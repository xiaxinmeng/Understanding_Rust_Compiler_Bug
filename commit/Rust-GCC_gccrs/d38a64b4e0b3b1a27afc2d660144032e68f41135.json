{"sha": "d38a64b4e0b3b1a27afc2d660144032e68f41135", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM4YTY0YjRlMGIzYjFhMjdhZmMyZDY2MDE0NDAzMmU2OGY0MTEzNQ==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2013-10-01T17:12:59Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2013-10-01T17:12:59Z"}, "message": "config.host (arc*-*-elf*, [...]): New configurations.\n\n2013-10-01  Joern Rennecke  <joern.rennecke@embecosm.com>\n            Brendan Kehoe  <brendan@zen.org>\n            Simon Cook  <simon.cook@embecosm.com>\n\n        * config.host (arc*-*-elf*, arc*-*-linux-uclibc*): New configurations.\n        * config/arc: New directory.\n        * longlong.h [__arc__] (umul_ppmm): Remove.\n        [__arc__] (__umulsidi3): Define.\n        [__arc__ && __ARC_NORM__] (count_leading_zeroes): Define.\n        [__arc__ && __ARC_NORM__] (COUNT_LEADING_ZEROS_0): Likewise.\n\nCo-Authored-By: Brendan Kehoe <brendan@zen.org>\nCo-Authored-By: Simon Cook <simon.cook@embecosm.com>\n\nFrom-SVN: r203073", "tree": {"sha": "745cdc23ed871e1941b32ac6573395fd7abe0b8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/745cdc23ed871e1941b32ac6573395fd7abe0b8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d38a64b4e0b3b1a27afc2d660144032e68f41135", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d38a64b4e0b3b1a27afc2d660144032e68f41135", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d38a64b4e0b3b1a27afc2d660144032e68f41135", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d38a64b4e0b3b1a27afc2d660144032e68f41135/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "526b7aee8fce16aa10a57e35d143b2e4ecb6b72e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/526b7aee8fce16aa10a57e35d143b2e4ecb6b72e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/526b7aee8fce16aa10a57e35d143b2e4ecb6b72e"}], "stats": {"total": 10270, "additions": 10260, "deletions": 10}, "files": [{"sha": "9d9db4b49b0f3df3ca3cd72a96f232b9a9f5f0b9", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -1,3 +1,14 @@\n+2013-10-01  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\t    Brendan Kehoe  <brendan@zen.org>\n+\t    Simon Cook  <simon.cook@embecosm.com>\n+\n+\t* config.host (arc*-*-elf*, arc*-*-linux-uclibc*): New configurations.\n+\t* config/arc: New directory.\n+\t* longlong.h [__arc__] (umul_ppmm): Remove.\n+\t[__arc__] (__umulsidi3): Define.\n+\t[__arc__ && __ARC_NORM__] (count_leading_zeroes): Define.\n+\t[__arc__ && __ARC_NORM__] (COUNT_LEADING_ZEROS_0): Likewise.\n+\n 2013-09-17  Jacek Caban  <jacek@codeweavers.com>\n \n \t* config/i386/gthr-win32.c: CreateSemaphoreW instead of"}, {"sha": "9c3066bd7b23ae1980c698df43668560c3837e31", "filename": "libgcc/config.host", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -91,6 +91,9 @@ alpha*-*-*)\n am33_2.0-*-linux*)\n \tcpu_type=mn10300\n \t;;\n+arc*-*-*)\n+\tcpu_type=arc\n+\t;;\n arm*-*-*)\n \tcpu_type=arm\n \t;;\n@@ -315,6 +318,14 @@ alpha*-dec-*vms*)\n \textra_parts=\"$extra_parts vms-dwarf2.o vms-dwarf2eh.o\"\n \tmd_unwind_header=alpha/vms-unwind.h\n \t;;\n+arc*-*-elf*)\n+\ttmake_file=\"arc/t-arc-newlib arc/t-arc\"\n+\textra_parts=\"crti.o crtn.o crtend.o crtbegin.o crtendS.o crtbeginS.o libgmon.a crtg.o crtgend.o\"\n+\t;;\n+arc*-*-linux-uclibc*)\n+\ttmake_file=\"${tmake_file} t-slibgcc-libgcc t-slibgcc-nolc-override arc/t-arc700-uClibc arc/t-arc\"\n+\textra_parts=\"crti.o crtn.o crtend.o crtbegin.o crtendS.o crtbeginS.o libgmon.a crtg.o crtgend.o\"\n+\t;;\n arm-wrs-vxworks)\n \ttmake_file=\"$tmake_file arm/t-arm arm/t-vxworks t-softfp-sfdf t-softfp-excl arm/t-softfp t-softfp\"\n \textra_parts=\"$extra_parts crti.o crtn.o\""}, {"sha": "f8543c412e4e24756d1de5536a49b956bfb0d264", "filename": "libgcc/config/arc/asm.h", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fasm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fasm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fasm.h?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,30 @@\n+/* Assembler macros for the Synopsys DesignWare ARC CPU.\n+\n+   Copyright (C) 1994, 1995, 1997, 2004, 2007-2012\n+   Free Software Foundation, Inc.\n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define FUNC(X)         .type X,@function\n+#define ENDFUNC(X)      .size X, .-X"}, {"sha": "0ddbbdf494b4da8c747d7f7b4854495210501707", "filename": "libgcc/config/arc/crtg.S", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fcrtg.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fcrtg.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fcrtg.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,52 @@\n+/* Code to start and stop profiling for the Synopsys DesignWare ARC CPU.\n+\n+   Copyright (C) 1994, 1995, 1997, 2004, 2007-2012\n+   Free Software Foundation, Inc.\n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+\t.section .init\n+\t.global _init\n+\t.global _fini\n+\t.global __monstartup\n+\tmov_s\tr0,_init\n+\tmov_s\tr1,_fini\n+\tjl\t__monstartup\n+\n+\t.section .__arc_profile_desc, \"a\"\n+\t.global __arc_profile_desc_secstart\n+\t.balign\t4\n+__arc_profile_desc_secstart:\n+\t.section .__arc_profile_forward, \"a\"\n+\t.global __arc_profile_forward_secstart\n+\t.balign 4\n+__arc_profile_forward_secstart:\n+\t.section .__arc_profile_counters, \"aw\"\n+\t.global __arc_profile_counters_secstart\n+\t.balign\t4\n+__arc_profile_counters_secstart:\n+\n+\t.section .fini\n+\t.global _mcleanup\n+\tjl\t_mcleanup"}, {"sha": "0e573f90079dba4fc989773ea1312db8e873e137", "filename": "libgcc/config/arc/crtgend.S", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fcrtgend.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fcrtgend.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fcrtgend.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,34 @@\n+/* Code to start and stop profiling for the Synopsys DesignWare ARC CPU.\n+\n+   Copyright (C) 1994, 1995, 1997, 2004, 2007-2012\n+   Free Software Foundation, Inc.\n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+\t.section .__arc_profile_desc, \"a\"\n+\t.global __arc_profile_desc_secend\n+__arc_profile_desc_secend:\n+\t.section .__arc_profile_forward, \"a\"\n+\t.global __arc_profile_forward_secend\n+__arc_profile_forward_secend:"}, {"sha": "796445002f59251bd85d4f7658d0c009cd686dd5", "filename": "libgcc/config/arc/crti.S", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fcrti.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fcrti.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fcrti.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,42 @@\n+/* .fini/.init stack frame setup for the Synopsys DesignWare ARC CPU.\n+\n+   Copyright (C) 1994, 1995, 1997, 2004, 2007-2012\n+   Free Software Foundation, Inc.\n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#  This file contains the stack frame setup for contents of the .fini and\n+# .init sections.\n+\n+\t.section .init\n+\t.global _init\n+\t.word 0\n+_init:\n+\tpush_s\tblink\n+\n+\t.section .fini\n+\t.global _fini\n+\t.word 0\n+_fini:\n+\tpush_s\tblink"}, {"sha": "0f3415eff0a7d57070bd0caff54ca20c19902dd5", "filename": "libgcc/config/arc/crtn.S", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fcrtn.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fcrtn.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fcrtn.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,39 @@\n+/* Ensure .fini/.init return for the Synopsys DesignWare ARC CPU.\n+\n+   Copyright (C) 1994, 1995, 1997, 2004, 2007-2012\n+   Free Software Foundation, Inc.\n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+                on behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+# This file just makes sure that the .fini and .init sections do in\n+# fact return. This file is the last thing linked into any executable.\n+\n+\t.section .init\n+\tpop_s\tblink\n+\tj_s\t[blink]\n+\n+\n+\t.section .fini\n+\tpop_s\tblink\n+\tj_s\t[blink]"}, {"sha": "556df8c6750d2f13489f03777535b8c9131a9a72", "filename": "libgcc/config/arc/divtab-arc700.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fdivtab-arc700.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fdivtab-arc700.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fdivtab-arc700.c?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,70 @@\n+/* Copyright (C) 2004, 2006, 2007-2012 Free Software Foundation, Inc.\n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 3, or (at your option) any\n+later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+This file is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with this program; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Calculate division table for ARC700 integer division\n+   Contributed by Joern Rennecke\n+   joern.rennecke@arc.com  */\n+\n+#include <stdio.h>\n+#include <math.h>\n+\n+int\n+main ()\n+{\n+  int i, j;\n+  unsigned x;\n+  double q, r, err, max_err = -1;\n+\n+  puts(\"/* This table has been generated by divtab-arc700.c.  */\");\n+  puts(\"\\\n+/* 1/512 .. 1/256, normalized.  There is a leading 1 in bit 31.\\n\\\n+   For powers of two, we list unnormalized numbers instead.  The values\\n\\\n+   for powers of 2 are loaded, but not used.  The value for 1 is actually\\n\\\n+   the first instruction after .Lmuldiv.  */\\n\\\n+\t.balign 4\");\n+  puts (\".Ldivtab:\\n\");\n+  for (i = 256; i >= 2; --i)\n+    {\n+      j = i < 0 ? -i : i;\n+      if (j & (j-1))\n+\twhile (j < 128)\n+\t  j += j;\n+      else\n+\t/* Power of two. */\n+\tj *= 128;\n+      q = 4.*(1<<30)*128/j;\n+      r = ceil (q);\n+      printf (\"\\t.long\\t0x%X\\n\", (unsigned) r);\n+      err = r - q;\n+      if (err > max_err)\n+\tmax_err = err;\n+    }\n+#if 0\n+  printf (\"\\t/* maximum error: %f */\\n\", max_err);\n+#endif\n+  exit (0);\n+}"}, {"sha": "fcbd89cf9d757bddeb76f13a138265f08ba8a9f7", "filename": "libgcc/config/arc/dp-hack.h", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fdp-hack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fdp-hack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fdp-hack.h?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,101 @@\n+/* Copyright (C) 2007-2013 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* This file selects the double-precision parts of fp-bit.c that are\n+   still needed for some ARC hardware variants; it also renames functions\n+   that duplicate asm-coded functionality so that their results can be\n+   used to compare with the optimized versions for debugging.  */\n+\n+#define FINE_GRAINED_LIBRARIES\n+#define ARC_DP_DEBUG 1\n+#if !defined (__ARC_NORM__) || ARC_DP_DEBUG\n+#define L_pack_df\n+#define L_unpack_df\n+#define L_make_df\n+#define L_thenan_df\n+#define L_sf_to_df\n+#endif\n+#ifndef __ARC_NORM__\n+#define L_addsub_df\n+#elif ARC_DP_DEBUG\n+#define L_addsub_df\n+#define __adddf3 __adddf3_c\n+#define __subdf3 __subdf3_c\n+#endif\n+#ifndef __ARC_NORM__\n+#define L_mul_df\n+#define L_div_df\n+#elif (!defined (__ARC700__) && !defined (__ARC_MUL64__) \\\n+       && !defined(__ARC_MUL32BY16__))\n+#define L_mul_df\n+#define L_div_df\n+#undef QUIET_NAN\n+#define QUIET_NAN 0xfffffffffffffLL\n+#elif ARC_DP_DEBUG\n+#define L_mul_df\n+#define __muldf3 __muldf3_c\n+#define L_div_df\n+#define __divdf3 __divdf3_c\n+#endif\n+#ifndef __ARC_NORM__\n+#define L_df_to_sf\n+#define L_si_to_df\n+#define L_df_to_si\n+#define L_tf_to_usi /* need to defined this instead of df_to_usi */\n+#define L_usi_to_df\n+#elif ARC_DP_DEBUG\n+#define L_df_to_sf\n+#define __truncdfsf2 __truncdfsf2_c\n+#define L_si_to_df\n+#define __floatsidf __floatsidf_c\n+#define L_df_to_si\n+#define __fixdfsi __fixdfsi_c\n+#define L_tf_to_usi\n+#define __fixunsdfsi __fixunsdfsi_c\n+#define L_usi_to_df\n+#define __floatunsidf __floatunsidf_c\n+#endif\n+#ifndef __ARC_NORM__\n+#define L_fpcmp_parts_df\n+#define L_compare_df\n+#define L_eq_df\n+#define L_ne_df\n+#define L_gt_df\n+#define L_ge_df\n+#define L_lt_df\n+#define L_le_df\n+#define L_unord_df\n+#define L_negate_df\n+#elif ARC_DP_DEBUG\n+#define L_fpcmp_parts_df\n+#define L_eq_df\n+#define __eqdf2 __eqdf2_c\n+#define L_gt_df\n+#define __gtdf2 __gtdf2_c\n+#define L_ge_df\n+#define __gedf2 __gedf2_c\n+#define L_unord_df\n+#define __unorddf2 __unorddf2_c\n+#endif"}, {"sha": "ea9cc9098e48943cee5ec5261b5f55f4e84cf707", "filename": "libgcc/config/arc/fp-hack.h", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Ffp-hack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Ffp-hack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Ffp-hack.h?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,85 @@\n+/* Copyright (C) 2007-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* This file selects the single-precision parts of fp-bit.c that are\n+   still needed for some ARC hardware variants; it also renames functions\n+   that duplicate asm-coded functionality so that their results can be\n+   used to compare with the optimized versions for debugging.  */\n+\n+#define ARC_FP_DEBUG 1\n+#define FINE_GRAINED_LIBRARIES\n+#if !defined (__ARC_NORM__) || ARC_FP_DEBUG\n+#define L_pack_sf\n+#define L_unpack_sf\n+#define L_make_sf\n+#define L_thenan_sf\n+#endif\n+#ifndef __ARC_NORM__\n+#define L_addsub_sf\n+#define L_mul_sf\n+#define L_div_sf\n+#define L_sf_to_df\n+#define L_si_to_sf\n+#define L_sf_to_si\n+#define L_usi_to_sf\n+#elif ARC_FP_DEBUG\n+#define L_addsub_sf\n+#define __addsf3 __addsf3_c\n+#define __subsf3 __subsf3_c\n+#define L_mul_sf\n+#define __mulsf3 __mulsf3_c\n+#define L_div_sf\n+#define __divsf3 __divsf3_c\n+#define L_sf_to_df\n+#define __extendsfdf2 __extendsfdf2_c\n+#define L_si_to_sf\n+#define __floatsisf __floatsisf_c\n+#define L_sf_to_si\n+#define __fixsfsi __fixsfsi_c\n+#define L_usi_to_sf\n+#define __floatunsisf __floatunsisf_c\n+#endif\n+#ifndef __ARC_NORM__\n+#define L_fpcmp_parts_sf\n+#define L_compare_sf\n+#define L_eq_sf\n+#define L_ne_sf\n+#define L_gt_sf\n+#define L_ge_sf\n+#define L_lt_sf\n+#define L_le_sf\n+#define L_unord_sf\n+#define L_negate_sf\n+#elif ARC_FP_DEBUG\n+#define L_fpcmp_parts_sf\n+#define L_eq_sf\n+#define __eqsf2 __eqsf2_c\n+#define L_gt_sf\n+#define __gtsf2 __gtsf2_c\n+#define L_ge_sf\n+#define __gesf2 __gesf2_c\n+#define L_unord_sf\n+#define __unordsf2 __unordsf2_c\n+#endif"}, {"sha": "368a48da4a13ac199d1012ccfc8e80eb882b9787", "filename": "libgcc/config/arc/gmon/atomic.h", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fgmon%2Fatomic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fgmon%2Fatomic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fgmon%2Fatomic.h?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,26 @@\n+/* Copyright (C) 2007-2012 Free Software Foundation, Inc.\n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* File deliberately left blank. */"}, {"sha": "22ac26e82b6c704b5f9adb64f7cf43e2e76ca1de", "filename": "libgcc/config/arc/gmon/auxreg.h", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fgmon%2Fauxreg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fgmon%2Fauxreg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fgmon%2Fauxreg.h?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,35 @@\n+/* Copyright (C) 2007-2012 Free Software Foundation, Inc.\n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define\tLP_START\t0x02\n+#define\tLP_END\t\t0x03\n+#define IDENTITY\t0x04\n+#define STATUS32\t0x0a\n+#define\tCOUNT0\t\t0x21 /* Timer 0 count */\n+#define\tCONTROL0\t0x22 /* Timer 0 control */\n+#define\tLIMIT0\t\t0x23 /* Timer 0 limit */\n+#define INT_VECTOR_BASE\t0x25\n+#define D_CACHE_BUILD\t0x72\n+#define DC_FLDL\t\t0x4c"}, {"sha": "116a6f0b08677b4a237d266c222c00d2b35396ff", "filename": "libgcc/config/arc/gmon/dcache_linesz.S", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fgmon%2Fdcache_linesz.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fgmon%2Fdcache_linesz.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fgmon%2Fdcache_linesz.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,55 @@\n+/* This file contains code to do profiling.\n+\n+   Copyright (C) 2007-2012 Free Software Foundation, Inc.\n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"../asm.h\"\n+#include \"auxreg.h\"\n+/*  This file contains code to do profiling.  */\n+\t.weak\t__profile_timer_cycles\n+\t.global __profile_timer_cycles\n+\t.set\t__profile_timer_cycles, 200\n+\t.text\n+\t; For Arctangent-A5, if no data cache is present, a read of the\n+\t; cache build register returns the ID register.  For ARC600 and\n+\t; later, the version field will be zero.\n+\t.global\t__dcache_linesz\n+\t.balign\t4\n+__dcache_linesz:\n+\tlr\tr12,[D_CACHE_BUILD]\n+\textb_s\tr0,r12\n+\tbreq_s\tr0,0,.Lsz_nocache\n+\tbrge\tr0,0x20,.Lsz_havecache\n+\tlr\tr0,[IDENTITY]\n+\tbreq\tr12,r0,.Lsz_nocache\n+.Lsz_havecache:\n+\tlsr_s\tr12,r12,16\n+\tmov_s\tr0,16\n+\tbmsk_s\tr12,r12,3\n+\tasl_s\tr0,r0,r12\n+\tj_s\t[blink]\n+.Lsz_nocache:\n+\tmov_s\tr0,1\n+\tj_s\t[blink]"}, {"sha": "7b721a9d0037185f2cc535503224d3f2cd627cb7", "filename": "libgcc/config/arc/gmon/gmon.c", "status": "added", "additions": 450, "deletions": 0, "changes": 450, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fgmon%2Fgmon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fgmon%2Fgmon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fgmon%2Fgmon.c?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,450 @@\n+/*-\n+ * Copyright (c) 1983, 1992, 1993\n+ *\tThe Regents of the University of California.  All rights reserved.\n+ * Copyright (C) 2007-2012 Free Software Foundation, Inc.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in the\n+ *    documentation and/or other materials provided with the distribution.\n+ * 4. Neither the name of the University nor the names of its contributors\n+ *    may be used to endorse or promote products derived from this software\n+ *    without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\n+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ */\n+#if 0\n+#include <sys/param.h>\n+#include <sys/time.h>\n+#endif\n+#include <sys/gmon.h>\n+#include <sys/gmon_out.h>\n+\n+#include <stddef.h>\n+#include <errno.h>\n+#include <stdio.h>\n+#include <fcntl.h>\n+#include <unistd.h>\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <unistd.h>\n+#if 0\n+#include <libc-internal.h>\n+#include <not-cancel.h>\n+\n+#ifdef USE_IN_LIBIO\n+# include <wchar.h>\n+#endif\n+#endif\n+#define internal_function\n+#define weak_alias(fun,aliasid) extern __typeof(fun) aliasid __attribute__ ((weak, alias (#fun)));\n+#define __libc_enable_secure 0\n+\n+/*  Head of basic-block list or NULL. */\n+struct __bb *__bb_head attribute_hidden;\n+\n+struct gmonparam _gmonparam attribute_hidden = { GMON_PROF_OFF };\n+\n+/*\n+ * See profil(2) where this is described:\n+ */\n+static int\ts_scale;\n+#define\t\tSCALE_1_TO_1\t0x10000L\n+\n+#define ERR(s) write (STDERR_FILENO, s, sizeof (s) - 1)\n+\n+void moncontrol (int mode);\n+void __moncontrol (int mode);\n+static void write_hist (int fd) internal_function;\n+static void write_call_graph (int fd) internal_function;\n+static void write_bb_counts (int fd) internal_function;\n+\n+/*\n+ * Control profiling\n+ *\tprofiling is what mcount checks to see if\n+ *\tall the data structures are ready.\n+ */\n+void\n+__moncontrol (int mode)\n+{\n+  struct gmonparam *p = &_gmonparam;\n+\n+  /* Don't change the state if we ran into an error.  */\n+  if (p->state == GMON_PROF_ERROR)\n+    return;\n+\n+  if (mode)\n+    {\n+      /* start */\n+      __profil((void *) p->kcount, p->kcountsize, p->lowpc, s_scale);\n+      p->state = GMON_PROF_ON;\n+    }\n+  else\n+    {\n+      /* stop */\n+      __profil(NULL, 0, 0, 0);\n+      p->state = GMON_PROF_OFF;\n+    }\n+}\n+weak_alias (__moncontrol, moncontrol)\n+\n+\n+void\n+__monstartup (u_long lowpc, u_long highpc)\n+{\n+  register int o;\n+  char *cp;\n+  struct gmonparam *p = &_gmonparam;\n+  int linesz;\n+\n+  /*\n+   * round lowpc and highpc to multiples of the density we're using\n+   * so the rest of the scaling (here and in gprof) stays in ints.\n+   */\n+  p->lowpc = ROUNDDOWN(lowpc, HISTFRACTION * sizeof(HISTCOUNTER));\n+  if (sizeof *p->froms % sizeof(HISTCOUNTER) != 0)\n+    {\n+      p->highpc = ROUNDUP(highpc, HISTFRACTION * sizeof(HISTCOUNTER));\n+      p->textsize = p->highpc - p->lowpc;\n+      p->kcountsize = ROUNDUP((p->textsize + HISTFRACTION - 1) / HISTFRACTION,\n+\t\t\t      sizeof (*p->froms));\n+    }\n+  else\n+    {\n+      /* Avoid odd scales by rounding up highpc to get kcountsize rounded.  */\n+      p->textsize = ROUNDUP (highpc - p->lowpc,\n+\t\t\t     HISTFRACTION * sizeof (*p->froms));\n+      p->highpc = p->lowpc + p->textsize;\n+      p->kcountsize = p->textsize / HISTFRACTION;\n+    }\n+  p->hashfraction = HASHFRACTION;\n+  p->log_hashfraction = -1;\n+  /* The following test must be kept in sync with the corresponding\n+     test in mcount.c.  */\n+  if ((HASHFRACTION & (HASHFRACTION - 1)) == 0) {\n+      /* if HASHFRACTION is a power of two, mcount can use shifting\n+\t instead of integer division.  Precompute shift amount. */\n+      p->log_hashfraction = ffs(p->hashfraction * sizeof(*p->froms)) - 1;\n+  }\n+  p->tolimit = p->textsize * ARCDENSITY / 100;\n+  if (p->tolimit < MINARCS)\n+    p->tolimit = MINARCS;\n+  else if (p->tolimit > MAXARCS)\n+    p->tolimit = MAXARCS;\n+  p->tossize = p->tolimit * sizeof(struct tostruct);\n+\n+  /* p->kcount must not share cache lines with the adjacent data, because\n+     we use uncached accesses while profiling.  */\n+  linesz = __dcache_linesz ();\n+  cp = calloc (ROUNDUP (p->kcountsize, linesz) + p->tossize\n+\t       + (linesz - 1), 1);\n+  if (! cp)\n+    {\n+      ERR(\"monstartup: out of memory\\n\");\n+      p->tos = NULL;\n+      p->state = GMON_PROF_ERROR;\n+      /* In case we loose the error state due to a race,\n+\t prevent invalid writes also by clearing tolimit.  */\n+      p->tolimit = 0;\n+      return;\n+    }\n+  p->tos = (struct tostruct *)cp;\n+  cp += p->tossize;\n+  cp = (char *) ROUNDUP ((ptrdiff_t) cp, linesz);\n+  p->kcount = (HISTCOUNTER *)cp;\n+  cp += ROUNDUP (p->kcountsize, linesz);\n+\n+  p->tos[0].link = 0;\n+\n+  o = p->highpc - p->lowpc;\n+  if (p->kcountsize < (u_long) o)\n+    {\n+#ifndef hp300\n+      s_scale = ((float)p->kcountsize / o ) * SCALE_1_TO_1;\n+#else\n+      /* avoid floating point operations */\n+      int quot = o / p->kcountsize;\n+\n+      if (quot >= 0x10000)\n+\ts_scale = 1;\n+      else if (quot >= 0x100)\n+\ts_scale = 0x10000 / quot;\n+      else if (o >= 0x800000)\n+\ts_scale = 0x1000000 / (o / (p->kcountsize >> 8));\n+      else\n+\ts_scale = 0x1000000 / ((o << 8) / p->kcountsize);\n+#endif\n+    } else\n+      s_scale = SCALE_1_TO_1;\n+\n+  __moncontrol(1);\n+}\n+weak_alias (__monstartup, monstartup)\n+\n+\n+static void\n+internal_function\n+write_hist (int fd)\n+{\n+  u_char tag = GMON_TAG_TIME_HIST;\n+  struct arc_gmon_hist_hdr thdr __attribute__ ((aligned (__alignof__ (char *))));\n+  int r;\n+\n+  if (_gmonparam.kcountsize > 0)\n+    {\n+      *(char **) thdr.low_pc = (char *) _gmonparam.lowpc;\n+      *(char **) thdr.high_pc = (char *) _gmonparam.highpc;\n+      *(int32_t *) thdr.hist_size = (_gmonparam.kcountsize\n+\t\t\t\t     / sizeof (HISTCOUNTER));\n+      *(int32_t *) thdr.prof_rate = __profile_frequency ();\n+      strncpy (thdr.dimen, \"seconds\", sizeof (thdr.dimen));\n+      thdr.dimen_abbrev = 's';\n+\n+      r = write (fd, &tag, sizeof tag);\n+      if (r != sizeof tag)\n+\treturn;\n+      r = write (fd, &thdr, sizeof thdr);\n+      if (r != sizeof thdr)\n+\treturn;\n+      r = write (fd,_gmonparam.kcount, _gmonparam.kcountsize);\n+      if ((unsigned) r != _gmonparam.kcountsize)\n+\treturn;\n+    }\n+}\n+\n+\n+static void\n+internal_function\n+write_call_graph (int fd)\n+{\n+#define NARCS_PER_WRITE\t64\n+#define BYTES_PER_ARC (1 + sizeof (struct gmon_cg_arc_record))\n+#define BYTES_PER_WRITE (BYTES_PER_ARC * NARCS_PER_WRITE)\n+  ARCINDEX to_index;\n+  u_long frompc, selfpc, count;\n+  char buffer[BYTES_PER_WRITE], *p;\n+  u_long *prof_desc = __arc_profile_desc_secstart;\n+  u_long *prof_count = __arc_profile_counters_secstart;\n+  u_long *prof_desc_end = __arc_profile_desc_secend;\n+  u_long *prof_forward = __arc_profile_forward_secstart;\n+\n+  for (p = buffer; p < buffer + BYTES_PER_WRITE; p += BYTES_PER_ARC)\n+    *p = GMON_TAG_CG_ARC;\n+  p = buffer;\n+  frompc = *prof_desc++ & -2;\n+  while (prof_desc < prof_desc_end)\n+    {\n+      selfpc = *prof_desc++;\n+      if (selfpc & 1)\n+\t{\n+\t  frompc = selfpc & -2;\n+\t  selfpc = *prof_desc++;\n+\t}\n+      count = *prof_count++;\n+      if (selfpc)\n+\t{\n+\t  struct arc\n+\t    {\n+\t      char *frompc;\n+\t      char *selfpc;\n+\t      int32_t count;\n+\t    }\n+\t  arc;\n+\n+\t  if (!count)\n+\t    continue;\n+\t  arc.frompc = (char *) frompc;\n+\t  arc.selfpc = (char *) selfpc;\n+\t  arc.count  = count;\n+\t  memcpy (p + 1, &arc, sizeof arc);\n+\t  p += 1 + sizeof arc;\n+\n+\t  if (p == buffer + BYTES_PER_WRITE)\n+\t    {\n+\t      write (fd, buffer, BYTES_PER_WRITE);\n+\t      p = buffer;\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  for (to_index = count;\n+\t       to_index != 0;\n+\t       to_index = _gmonparam.tos[to_index].link)\n+\t    {\n+\t      struct arc\n+\t\t{\n+\t\t  char *frompc;\n+\t\t  char *selfpc;\n+\t\t  int32_t count;\n+\t\t}\n+\t      arc;\n+\n+\t      arc.frompc = (char *) frompc;\n+\t      arc.selfpc = (char *) _gmonparam.tos[to_index].selfpc;\n+\t      arc.count  = _gmonparam.tos[to_index].count;\n+\t      memcpy (p + 1, &arc, sizeof arc);\n+\t      p += 1 + sizeof arc;\n+\n+\t      if (p == buffer + BYTES_PER_WRITE)\n+\t\t{\n+\t\t  write (fd, buffer, BYTES_PER_WRITE);\n+\t\t  p = buffer;\n+\t\t}\n+\t    }\n+\t}\n+    }\n+  while (prof_forward < __arc_profile_forward_secend)\n+    {\n+      /* ??? The 'call count' is actually supposed to be a fixed point\n+\t factor, with 16 bits each before and after the point.\n+\t It would be much nicer if we figured out the actual number\n+\t of calls to the caller, and multiplied that with the fixed point\n+\t factor to arrive at the estimated calls for the callee.  */\n+      memcpy (p + 1, prof_forward, 3 * sizeof *prof_forward);\n+      prof_forward += 3;\n+      p += 1 + 3 * sizeof *prof_forward;\n+      if (p == buffer + BYTES_PER_WRITE)\n+\t{\n+\t  write (fd, buffer, BYTES_PER_WRITE);\n+\t  p = buffer;\n+\t}\n+    }\n+  if (p != buffer)\n+    write (fd, buffer, p - buffer);\n+}\n+\n+\n+static void\n+internal_function\n+write_bb_counts (int fd)\n+{\n+  struct __bb *grp;\n+  u_char tag = GMON_TAG_BB_COUNT;\n+  size_t ncounts;\n+  size_t i;\n+\n+  struct { unsigned long address; long count; } bbbody[8];\n+  size_t nfilled;\n+\n+  /* Write each group of basic-block info (all basic-blocks in a\n+     compilation unit form a single group). */\n+\n+  for (grp = __bb_head; grp; grp = grp->next)\n+    {\n+      ncounts = grp->ncounts;\n+      write (fd, &tag, 1);\n+      write (fd, &ncounts, sizeof ncounts);\n+      for (nfilled = i = 0; i < ncounts; ++i)\n+\t{\n+\t  if (nfilled == sizeof (bbbody) / sizeof (bbbody[0]))\n+\t    {\n+\t      write (fd, bbbody, sizeof bbbody);\n+\t      nfilled = 0;\n+\t    }\n+\n+\t  bbbody[nfilled].address = grp->addresses[i];\n+\t  bbbody[nfilled++].count = grp->counts[i];\n+\t}\n+      if (nfilled > 0)\n+\twrite (fd, bbbody, nfilled * sizeof bbbody[0]);\n+    }\n+}\n+\n+\n+static void\n+write_gmon (void)\n+{\n+    struct gmon_hdr ghdr __attribute__ ((aligned (__alignof__ (int))));\n+    int fd = -1;\n+    char *env;\n+\n+#ifndef O_NOFOLLOW\n+# define O_NOFOLLOW\t0\n+#endif\n+\n+    env = getenv (\"GMON_OUT_PREFIX\");\n+    if (env != NULL && !__libc_enable_secure)\n+      {\n+\tsize_t len = strlen (env);\n+\tchar buf[len + 20];\n+\tsnprintf (buf, sizeof (buf), \"%s.%u\", env, getpid ());\n+\tfd = open (buf, O_CREAT|O_TRUNC|O_WRONLY|O_NOFOLLOW, 0666);\n+      }\n+\n+    if (fd == -1)\n+      {\n+\tfd = open (\"gmon.out\", O_CREAT|O_TRUNC|O_WRONLY|O_NOFOLLOW,\n+\t\t\t      0666);\n+\tif (fd < 0)\n+\t  {\n+\t    perror (\"_mcleanup: gmon.out\");\n+\t    return;\n+\t  }\n+      }\n+\n+    /* write gmon.out header: */\n+    memset (&ghdr, '\\0', sizeof (struct gmon_hdr));\n+    memcpy (&ghdr.cookie[0], GMON_MAGIC, sizeof (ghdr.cookie));\n+    *(int32_t *) ghdr.version = GMON_VERSION;\n+    write (fd, &ghdr, sizeof (struct gmon_hdr));\n+\n+    /* write PC histogram: */\n+    write_hist (fd);\n+\n+    /* write call-graph: */\n+    write_call_graph (fd);\n+\n+    /* write basic-block execution counts: */\n+    write_bb_counts (fd);\n+\n+    close (fd);\n+}\n+\n+\n+void\n+__write_profiling (void)\n+{\n+  int save = _gmonparam.state;\n+  _gmonparam.state = GMON_PROF_OFF;\n+  if (save == GMON_PROF_ON)\n+    write_gmon ();\n+  _gmonparam.state = save;\n+}\n+#ifndef SHARED\n+/* This symbol isn't used anywhere in the DSO and it is not exported.\n+   This would normally mean it should be removed to get the same API\n+   in static libraries.  But since profiling is special in static libs\n+   anyway we keep it.  But not when building the DSO since some\n+   quality assurance tests will otherwise trigger.  */\n+weak_alias (__write_profiling, write_profiling)\n+#endif\n+\n+\n+void\n+_mcleanup (void)\n+{\n+  __moncontrol (0);\n+\n+  if (_gmonparam.state != GMON_PROF_ERROR)\n+    write_gmon ();\n+\n+  /* free the memory. */\n+  if (_gmonparam.tos != NULL)\n+    free (_gmonparam.tos);\n+}"}, {"sha": "a03f23c607b3d1d0b2cff2b2fe1256d79a04575b", "filename": "libgcc/config/arc/gmon/machine-gmon.h", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fgmon%2Fmachine-gmon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fgmon%2Fmachine-gmon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fgmon%2Fmachine-gmon.h?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,65 @@\n+/* Copyright (C) 2007-2012 Free Software Foundation, Inc.\n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef MACHINE_GMON_H\n+#define MACHINE_GMON_H\n+\n+/* We can't fake out own <sys/types.h> header because the newlib / uclibc\n+   headers in GCC_FOR_TARGET take precedence.  */\n+\n+#define __BEGIN_DECLS\n+#define __END_DECLS\n+\n+#define __THROW\n+\n+extern int __dcache_linesz (void);\n+\n+#define _MCOUNT_DECL(countp, selfpc) \\\n+  static inline void _mcount_internal (void *countp, u_long selfpc)\n+\n+extern void _mcount (void);\n+extern void _mcount_call (void);\n+\n+/* N.B.: the calling point might be a sibcall, thus blink does not necessarily\n+  hold the caller's address.  r8 doesn't hold the caller's address, either,\n+  but rather a pointer to the counter data structure associated with the\n+  caller.\n+  This function must be compiled with optimization turned on in order to\n+  enable a sibcall for the final call to selfpc; this is important when trying\n+  to profile a program with deep tail-recursion that would get a stack\n+  overflow otherwise.  */\n+#define MCOUNT \\\n+void \\\n+_mcount_call (void) \\\n+{ \\\n+  register void *countp __asm(\"r8\"); \\\n+  register u_long selfpc __asm(\"r9\"); \\\n+  _mcount_internal (countp, selfpc); \\\n+  ((void (*)(void)) selfpc) (); \\\n+}\n+\n+extern int __profil (u_short *,size_t, size_t, u_int);\n+\n+#endif /* MACHINE_GMON_H */"}, {"sha": "2f2eaf5da23fda2c820c41e36a3e4620cff6341e", "filename": "libgcc/config/arc/gmon/mcount.c", "status": "added", "additions": 206, "deletions": 0, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fgmon%2Fmcount.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fgmon%2Fmcount.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fgmon%2Fmcount.c?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,206 @@\n+/*-\n+ * Copyright (c) 1983, 1992, 1993\n+ *\tThe Regents of the University of California.  All rights reserved.\n+ *\n+ * Copyright (C) 2007-2012 Free Software Foundation, Inc.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in the\n+ *    documentation and/or other materials provided with the distribution.\n+ * 4. Neither the name of the University nor the names of its contributors\n+ *    may be used to endorse or promote products derived from this software\n+ *    without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\n+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ */\n+\n+#if !defined(lint) && !defined(KERNEL) && defined(LIBC_SCCS)\n+static char sccsid[] = \"@(#)mcount.c\t8.1 (Berkeley) 6/4/93\";\n+#endif\n+\n+#if 0\n+#include <unistd.h>\n+#include <sys/param.h>\n+#endif\n+#include <sys/gmon.h>\n+\n+/* This file provides the machine-dependent definitions of the _MCOUNT_DECL\n+   and MCOUNT macros.  */\n+#include <machine-gmon.h>\n+\n+#include <atomic.h>\n+\n+/*\n+ * mcount is called on entry to each function compiled with the profiling\n+ * switch set.  _mcount(), which is declared in a machine-dependent way\n+ * with _MCOUNT_DECL, does the actual work and is either inlined into a\n+ * C routine or called by an assembly stub.  In any case, this magic is\n+ * taken care of by the MCOUNT definition in <machine/profile.h>.\n+ *\n+ * _mcount updates data structures that represent traversals of the\n+ * program's call graph edges.  frompc and selfpc are the return\n+ * address and function address that represents the given call graph edge.\n+ *\n+ * Note: the original BSD code used the same variable (frompcindex) for\n+ * both frompcindex and frompc.  Any reasonable, modern compiler will\n+ * perform this optimization.\n+ */\n+_MCOUNT_DECL(count_ptr, selfpc)\t/* _mcount; may be static, inline, etc */\n+{\n+\tregister ARCINDEX *frompcindex;\n+\tregister struct tostruct *top, *prevtop;\n+\tregister struct gmonparam *p;\n+\tregister ARCINDEX toindex;\n+\n+\t/* Check for nested function trampoline.  */\n+\tif (selfpc & 2)\n+\t  selfpc = *(u_long *) (selfpc + 10);\n+\n+\tp = &_gmonparam;\n+\t/*\n+\t * check that we are profiling\n+\t * and that we aren't recursively invoked.\n+\t */\n+#if 0\n+\tif (catomic_compare_and_exchange_bool_acq (&p->state, GMON_PROF_BUSY,\n+\t\t\t\t\t\t   GMON_PROF_ON))\n+\t  return;\n+#elif defined (__ARC700__)\n+/* ??? This could temporrarily loose the ERROR / OFF condition in a race,\n+   but doing an actual compare_and_exchange would be too costly.  It would\n+   be better if we had a semaphore independent of the 'sticky' state, but\n+   then we could run into ABI compatibility problems with the size of struct\n+   gmonparam.  */\n+\t{\n+\t  u_long old_state;\n+\n+\t  __asm (\"ex %0,%1\": \"=r\" (old_state), \"+m\" (p->state)\n+\t\t : \"0\" (GMON_PROF_BUSY));\n+\t  if (old_state != GMON_PROF_ON)\n+\t    {\n+\t      switch (old_state)\n+\t\t{\n+\t\tcase GMON_PROF_OFF:\n+\t\t  __asm (\"ex %0,%1\": \"+r\" (old_state), \"+m\" (p->state));\n+\t\t  if (old_state == GMON_PROF_BUSY\n+\t\t      /* Switching off while we say we are busy while profiling\n+\t\t\t was actually already switched off is all right.  */\n+\t\t      || old_state == GMON_PROF_OFF)\n+\t\t    break;\n+\t\t  /* It is not clear if we should allow switching on\n+\t\t     profiling at this point, and how to handle further races.\n+\t\t     For now, record an error in this case.  */\n+\t\t  /* Fall through.  */\n+\t\tdefault: /* We expect here only GMON_PROF_ERROR.  */\n+\t\t  p->state = GMON_PROF_ERROR;\n+\t\t  break;\n+\t\tcase GMON_PROF_BUSY: break;\n+\t\t}\n+\t      return;\n+\t    }\n+\t}\n+#else /* ??? No semaphore primitives available.  */\n+\tif (p->state != GMON_PROF_ON)\n+\t  return;\n+\tp->state = GMON_PROF_BUSY;\n+#endif\n+\n+\tfrompcindex = count_ptr;\n+\ttoindex = *frompcindex;\n+\tif (toindex == 0) {\n+\t\t/*\n+\t\t *\tfirst time traversing this arc\n+\t\t */\n+\t\ttoindex = ++p->tos[0].link;\n+\t\tif (toindex >= (ARCINDEX) p->tolimit)\n+\t\t\t/* halt further profiling */\n+\t\t\tgoto overflow;\n+\n+\t\t*frompcindex = toindex;\n+\t\ttop = &p->tos[toindex];\n+\t\ttop->selfpc = selfpc;\n+\t\ttop->count = 1;\n+\t\ttop->link = 0;\n+\t\tgoto done;\n+\t}\n+\ttop = &p->tos[toindex];\n+\tif (top->selfpc == selfpc) {\n+\t\t/*\n+\t\t * arc at front of chain; usual case.\n+\t\t */\n+\t\ttop->count++;\n+\t\tgoto done;\n+\t}\n+\t/*\n+\t * have to go looking down chain for it.\n+\t * top points to what we are looking at,\n+\t * prevtop points to previous top.\n+\t * we know it is not at the head of the chain.\n+\t */\n+\tfor (; /* goto done */; ) {\n+\t\tif (top->link == 0) {\n+\t\t\t/*\n+\t\t\t * top is end of the chain and none of the chain\n+\t\t\t * had top->selfpc == selfpc.\n+\t\t\t * so we allocate a new tostruct\n+\t\t\t * and link it to the head of the chain.\n+\t\t\t */\n+\t\t\ttoindex = ++p->tos[0].link;\n+\t\t\tif (toindex >= (ARCINDEX) p->tolimit)\n+\t\t\t\tgoto overflow;\n+\n+\t\t\ttop = &p->tos[toindex];\n+\t\t\ttop->selfpc = selfpc;\n+\t\t\ttop->count = 1;\n+\t\t\ttop->link = *frompcindex;\n+\t\t\t*frompcindex = toindex;\n+\t\t\tgoto done;\n+\t\t}\n+\t\t/*\n+\t\t * otherwise, check the next arc on the chain.\n+\t\t */\n+\t\tprevtop = top;\n+\t\ttop = &p->tos[top->link];\n+\t\tif (top->selfpc == selfpc) {\n+\t\t\t/*\n+\t\t\t * there it is.\n+\t\t\t * increment its count\n+\t\t\t * move it to the head of the chain.\n+\t\t\t */\n+\t\t\ttop->count++;\n+\t\t\ttoindex = prevtop->link;\n+\t\t\tprevtop->link = top->link;\n+\t\t\ttop->link = *frompcindex;\n+\t\t\t*frompcindex = toindex;\n+\t\t\tgoto done;\n+\t\t}\n+\n+\t}\n+done:\n+\tp->state = GMON_PROF_ON;\n+\treturn;\n+overflow:\n+\tp->state = GMON_PROF_ERROR;\n+\treturn;\n+}\n+\n+/*\n+ * Actual definition of mcount function.  Defined in <machine/profile.h>,\n+ * which is included by <sys/gmon.h>.\n+ */\n+MCOUNT"}, {"sha": "ea119584e9e546f11c9ecec60fff69ff4abf6b82", "filename": "libgcc/config/arc/gmon/prof-freq-stub.S", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fgmon%2Fprof-freq-stub.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fgmon%2Fprof-freq-stub.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fgmon%2Fprof-freq-stub.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,40 @@\n+/* This file contains code to do profiling.\n+\n+   Copyright (C) 2007-2012 Free Software Foundation, Inc.\n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"../asm.h\"\n+/*  This file contains code to do profiling.  */\n+\t.weak\t__profile_frequency_value\n+\t.global __profile_frequency_value\n+\t.set\t__profile_frequency_value, 1000\n+\t.text\n+\t.balign\t4\n+\t.global __profile_frequency\n+\tFUNC(__profile_frequency)\n+__profile_frequency:\n+\tmov_s\tr0,__profile_frequency_value\n+\tj_s\t[blink]\n+\tENDFUNC(__profile_frequency)"}, {"sha": "87228cb675d04e8b6efe9734a4a76c2bfd936b17", "filename": "libgcc/config/arc/gmon/prof-freq.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fgmon%2Fprof-freq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fgmon%2Fprof-freq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fgmon%2Fprof-freq.c?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,60 @@\n+/* Return frequency of ticks reported by profil.  Generic version. */\n+/*-\n+ * Copyright (c) 1983, 1992, 1993\n+ *\tThe Regents of the University of California.  All rights reserved.\n+ *\n+ * Copyright (C) 2007-2012 Free Software Foundation, Inc.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in the\n+ *    documentation and/or other materials provided with the distribution.\n+ * 4. Neither the name of the University nor the names of its contributors\n+ *    may be used to endorse or promote products derived from this software\n+ *    without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\n+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ */\n+\n+\n+#include <sys/types.h>\n+#include <sys/time.h>\n+#if 0\n+#include <libc-internal.h>\n+#else\n+#include \"sys/gmon.h\"\n+#endif\n+\n+int\n+__profile_frequency (void)\n+{\n+  /*\n+   * Discover the tick frequency of the machine if something goes wrong,\n+   * we return 0, an impossible hertz.\n+   */\n+  struct itimerval tim;\n+\n+  tim.it_interval.tv_sec = 0;\n+  tim.it_interval.tv_usec = 1;\n+  tim.it_value.tv_sec = 0;\n+  tim.it_value.tv_usec = 0;\n+  setitimer(ITIMER_REAL, &tim, 0);\n+  setitimer(ITIMER_REAL, 0, &tim);\n+  if (tim.it_interval.tv_usec < 2)\n+    return 0;\n+  return (1000000 / tim.it_interval.tv_usec);\n+}"}, {"sha": "31b045238d41347c3da0173122c550bcc2ed4e6d", "filename": "libgcc/config/arc/gmon/profil.S", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fgmon%2Fprofil.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fgmon%2Fprofil.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fgmon%2Fprofil.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,153 @@\n+/* This file contains code to do profiling.\n+\n+   Copyright (C) 2007-2012 Free Software Foundation, Inc.\n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"../asm.h\"\n+#include \"auxreg.h\"\n+/*  This file contains code to do profiling.  */\n+\t.weak\t__profile_timer_cycles\n+\t.global __profile_timer_cycles\n+\t.set\t__profile_timer_cycles, 200\n+\n+        .section .bss\n+        .global __profil_offset\n+        .align 4\n+        .type\t__profil_offset, @object\n+        .size\t__profil_offset, 4\n+__profil_offset:\n+        .zero   4\n+\n+\t.text\n+\t.global\t__dcache_linesz\n+\t.global __profil\n+\tFUNC(__profil)\n+.Lstop_profiling:\n+\tsr\tr0,[CONTROL0]\n+\tj_s\t[blink]\n+\t.balign\t4\n+__profil:\n+.Lprofil:\n+\tbreq_s\tr0,0,.Lstop_profiling\n+\t; r0: buf r1: bufsiz r2: offset r3: scale\n+\tbxor.f\tr3,r3,15; scale must be 0x8000, i.e. 1/2; generate 0.\n+\tpush_s\tblink\n+\tlsr_s\tr2,r2,1\n+\tmov_s\tr8,r0\n+\tflag.ne\t1\t; halt if wrong scale\n+\tsub_s\tr0,r0,r2\n+\tst\tr0,[__profil_offset]\n+\tbl\t__dcache_linesz\n+\tpop_s\tblink\n+\tbbit1.d\tr0,0,nocache\n+\tmov_s\tr0,r8\n+#ifdef __ARC700__\n+\tadd_s\tr1,r1,31\n+\tlsr.f\tlp_count,r1,5\n+\tlpne\t2f\n+\tsr\tr0,[DC_FLDL]\n+\tadd_s\tr0,r0,32\n+#else /* !__ARC700__ */\n+# FIX ME: set up loop according to cache line size\n+\tlr\tr12,[D_CACHE_BUILD]\n+\tsub_s\tr0,r0,16\n+\tsub_s\tr1,r1,1\n+\tlsr_s\tr12,r12,16\n+\tasr_s\tr1,r1,4\n+\tbmsk_s\tr12,r12,3\n+\tasr_s\tr1,r1,r12\n+\tadd.f\tlp_count,r1,1\n+\tmov_s\tr1,16\n+\tasl_s\tr1,r1,r12\n+\tlpne\t2f\n+\tadd\tr0,r0,r1\n+\tsr\tr0,[DC_FLDL]\n+#endif /* __ARC700__ */\n+2:\tb_s\t.Lcounters_cleared\n+nocache:\n+.Lcounters_cleared:\n+\tlr\tr1,[INT_VECTOR_BASE] ; disable timer0 interrupts\n+\tsr\tr3,[CONTROL0]\n+\tsr\tr3,[COUNT0]\n+0:\tld_s\tr0,[pcl,1f-0b+((0b-.Lprofil) & 2)] ; 1f@GOTOFF\n+0:\tld_s\tr12,[pcl,1f+4-0b+((0b-.Lprofil) & 2)] ; 1f@GOTOFF + 4\n+\tst_s\tr0,[r1,24]; timer0 uses vector3\n+\tst_s\tr12,[r1,24+4]; timer0 uses vector3\n+\t;sr\t10000,[LIMIT0]\n+\tsr\t__profile_timer_cycles,[LIMIT0]\n+\tmov_s\tr12,3\t; enable timer interrupts; count only when not halted.\n+\tsr\tr12,[CONTROL0]\n+\tlr\tr12,[STATUS32]\n+\tbset_s\tr12,r12,1 ; allow level 1 interrupts\n+\tflag\tr12\n+\tmov_s\tr0,0\n+\tj_s\t[blink]\n+\t.balign\t4\n+1:\tj\t__profil_irq\n+\tENDFUNC(__profil)\n+\n+\tFUNC(__profil_irq)\n+\t.balign 4\t; make final jump unaligned to avoid delay penalty\n+\t.balign 32,0,12\t; make sure the code spans no more that two cache lines\n+\tnop_s\n+__profil_irq:\n+\tpush_s\tr0\n+\tld\tr0,[__profil_offset]\n+\tpush_s\tr1\n+\tlsr\tr1,ilink1,2\n+\tpush_s\tr2\n+\tldw.as.di r2,[r0,r1]\n+\tadd1\tr0,r0,r1\n+\tld_s\tr1,[sp,4]\n+\tadd_s\tr2,r2,1\n+\tbbit1\tr2,16,nostore\n+\tstw.di\tr2,[r0]\n+nostore:ld.ab\tr2,[sp,8]\n+\tpop_s\tr0\n+\tj.f\t[ilink1]\n+\tENDFUNC(__profil_irq)\n+\n+; could save one cycle if the counters were allocated at link time and\n+; the contents of __profil_offset were pre-computed at link time, like this:\n+#if 0\n+; __profil_offset needs to be PROVIDEd as __profile_base-text/4\n+\t.global\t__profil_offset\n+\t.balign 4\n+__profil_irq:\n+\tpush_s\tr0\n+\tlsr\tr0,ilink1,2\n+\tadd1\tr0,__profil_offset,r0\n+\tpush_s\tr1\n+\tldw.di\tr1,[r0]\n+\n+\n+\tadd_s\tr1,r1,1\n+\tbbit1\tr1,16,nostore\n+\tstw.di\tr1,[r0]\n+nostore:pop_s\tr1\n+\tpop_s\tr0\n+\tj\t[ilink1]\n+#endif /* 0 */"}, {"sha": "69be1e640790d5c5b978ed4cbb8c8c6d3102763d", "filename": "libgcc/config/arc/gmon/sys/gmon.h", "status": "added", "additions": 217, "deletions": 0, "changes": 217, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fgmon%2Fsys%2Fgmon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fgmon%2Fsys%2Fgmon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fgmon%2Fsys%2Fgmon.h?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,217 @@\n+/*-\n+ * Copyright (c) 1982, 1986, 1992, 1993\n+ *\tThe Regents of the University of California.  All rights reserved.\n+ * Copyright (C) 2007-2012 Free Software Foundation, Inc.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in the\n+ *    documentation and/or other materials provided with the distribution.\n+ * 4. Neither the name of the University nor the names of its contributors\n+ *    may be used to endorse or promote products derived from this software\n+ *    without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\n+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ *\n+ *\t@(#)gmon.h\t8.2 (Berkeley) 1/4/94\n+ */\n+\n+#ifndef\t_SYS_GMON_H\n+#define\t_SYS_GMON_H\t1\n+\n+#if 0\n+#include <features.h>\n+#include <sys/types.h>\n+#else\n+#include <sys/types.h>\n+#include \"machine-gmon.h\"\n+#define attribute_hidden __attribute__ ((visibility(\"hidden\")))\n+#endif\n+\n+#include <stdint.h>\n+\n+/*\n+ * See gmon_out.h for gmon.out format.\n+ */\n+\n+/* structure emitted by \"gcc -a\".  This must match struct bb in\n+   gcc/libgcc2.c.  It is OK for gcc to declare a longer structure as\n+   long as the members below are present.  */\n+struct __bb\n+{\n+  long\t\t\tzero_word;\n+  const char\t\t*filename;\n+  long\t\t\t*counts;\n+  long\t\t\tncounts;\n+  struct __bb\t\t*next;\n+  const unsigned long\t*addresses;\n+};\n+\n+extern struct __bb *__bb_head;\n+\n+/*\n+ * histogram counters are unsigned shorts (according to the kernel).\n+ */\n+#define\tHISTCOUNTER\tunsigned short\n+\n+/*\n+ * fraction of text space to allocate for histogram counters here, 1/2\n+ */\n+#define\tHISTFRACTION\t2\n+\n+/*\n+ * Fraction of text space to allocate for from hash buckets.\n+ * The value of HASHFRACTION is based on the minimum number of bytes\n+ * of separation between two subroutine call points in the object code.\n+ * Given MIN_SUBR_SEPARATION bytes of separation the value of\n+ * HASHFRACTION is calculated as:\n+ *\n+ *\tHASHFRACTION = MIN_SUBR_SEPARATION / (2 * sizeof(short) - 1);\n+ *\n+ * For example, on the VAX, the shortest two call sequence is:\n+ *\n+ *\tcalls\t$0,(r0)\n+ *\tcalls\t$0,(r0)\n+ *\n+ * which is separated by only three bytes, thus HASHFRACTION is\n+ * calculated as:\n+ *\n+ *\tHASHFRACTION = 3 / (2 * 2 - 1) = 1\n+ *\n+ * Note that the division above rounds down, thus if MIN_SUBR_FRACTION\n+ * is less than three, this algorithm will not work!\n+ *\n+ * In practice, however, call instructions are rarely at a minimal\n+ * distance.  Hence, we will define HASHFRACTION to be 2 across all\n+ * architectures.  This saves a reasonable amount of space for\n+ * profiling data structures without (in practice) sacrificing\n+ * any granularity.\n+ */\n+#define\tHASHFRACTION\t2\n+\n+/*\n+ * Percent of text space to allocate for tostructs.\n+ * This is a heuristic; we will fail with a warning when profiling programs\n+ * with a very large number of very small functions, but that's\n+ * normally OK.\n+ * 2 is probably still a good value for normal programs.\n+ * Profiling a test case with 64000 small functions will work if\n+ * you raise this value to 3 and link statically (which bloats the\n+ * text size, thus raising the number of arcs expected by the heuristic).\n+ */\n+#define ARCDENSITY\t3\n+\n+/*\n+ * Always allocate at least this many tostructs.  This\n+ * hides the inadequacy of the ARCDENSITY heuristic, at least\n+ * for small programs.\n+ */\n+#define MINARCS\t\t50\n+\n+/*\n+ * The type used to represent indices into gmonparam.tos[].\n+ */\n+#define\tARCINDEX\tu_long\n+\n+/* \n+ * Maximum number of arcs we want to allow.\n+ * Used to be max representable value of ARCINDEX minus 2, but now \n+ * that ARCINDEX is a long, that's too large; we don't really want \n+ * to allow a 48 gigabyte table.\n+ * The old value of 1<<16 wasn't high enough in practice for large C++\n+ * programs; will 1<<20 be adequate for long?  FIXME\n+ */\n+#define MAXARCS\t\t(1 << 20)\n+\n+struct tostruct {\n+\tu_long\t\tselfpc;\n+\tlong\t\tcount;\n+\tARCINDEX\tlink;\n+};\n+\n+/*\n+ * a raw arc, with pointers to the calling site and\n+ * the called site and a count.\n+ */\n+struct rawarc {\n+\tu_long\traw_frompc;\n+\tu_long\traw_selfpc;\n+\tlong\traw_count;\n+};\n+\n+/*\n+ * general rounding functions.\n+ */\n+#define ROUNDDOWN(x,y)\t(((x)/(y))*(y))\n+#define ROUNDUP(x,y)\t((((x)+(y)-1)/(y))*(y))\n+\n+/*\n+ * The profiling data structures are housed in this structure.\n+ */\n+struct gmonparam {\n+\tlong int\tstate;\n+\tu_short\t\t*kcount;\n+\tu_long\t\tkcountsize;\n+\tARCINDEX\t*froms;\n+\tu_long\t\tfromssize;\n+\tstruct tostruct\t*tos;\n+\tu_long\t\ttossize;\n+\tlong\t\ttolimit;\n+\tu_long\t\tlowpc;\n+\tu_long\t\thighpc;\n+\tu_long\t\ttextsize;\n+\tu_long\t\thashfraction;\n+\tlong\t\tlog_hashfraction;\n+};\n+extern struct gmonparam _gmonparam;\n+\n+/*\n+ * Possible states of profiling.\n+ */\n+#define\tGMON_PROF_ON\t0\n+#define\tGMON_PROF_BUSY\t1\n+#define\tGMON_PROF_ERROR\t2\n+#define\tGMON_PROF_OFF\t3\n+\n+/*\n+ * Sysctl definitions for extracting profiling information from the kernel.\n+ */\n+#define\tGPROF_STATE\t0\t/* int: profiling enabling variable */\n+#define\tGPROF_COUNT\t1\t/* struct: profile tick count buffer */\n+#define\tGPROF_FROMS\t2\t/* struct: from location hash bucket */\n+#define\tGPROF_TOS\t3\t/* struct: destination/count structure */\n+#define\tGPROF_GMONPARAM\t4\t/* struct: profiling parameters (see above) */\n+\n+__BEGIN_DECLS\n+\n+/* Set up data structures and start profiling.  */\n+extern void __monstartup (u_long __lowpc, u_long __highpc) __THROW;\n+extern void monstartup (u_long __lowpc, u_long __highpc) __THROW;\n+\n+/* Clean up profiling and write out gmon.out.  */\n+extern void _mcleanup (void) __THROW;\n+\n+extern void __write_profiling (void);\n+extern int attribute_hidden __profile_frequency (void);\n+\n+extern u_long __arc_profile_desc_secstart[], __arc_profile_desc_secend[];\n+extern u_long __arc_profile_forward_secstart[], __arc_profile_forward_secend[];\n+extern u_long __arc_profile_counters_secstart[];\n+\n+__END_DECLS\n+\n+#endif /* sys/gmon.h */"}, {"sha": "58aebfa7c2722dbd1f50267282bf6cb1952ce5d7", "filename": "libgcc/config/arc/gmon/sys/gmon_out.h", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fgmon%2Fsys%2Fgmon_out.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fgmon%2Fsys%2Fgmon_out.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fgmon%2Fsys%2Fgmon_out.h?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,55 @@\n+/* Copyright (C) 2007-2012 Free Software Foundation, Inc.\n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define GMON_TAG_TIME_HIST 0\n+#define GMON_TAG_CG_ARC 1\n+#define GMON_TAG_BB_COUNT 2\n+\n+#define GMON_MAGIC \"gmon\"\n+#define GMON_VERSION 1\n+\n+struct arc_gmon_hist_hdr\n+{\n+  char low_pc[4];\n+  char high_pc[4];\n+  char hist_size[4];\n+  char prof_rate[4];\n+  char dimen[15];\n+  char dimen_abbrev;\n+};\n+\n+struct gmon_cg_arc_record\n+{\n+  char afrompc[4];\n+  char selfpc[4];\n+  char count[4];\n+};\n+\n+struct gmon_hdr\n+{\n+  char cookie[4];\n+  char version[4];\n+  char c[12];\n+};"}, {"sha": "35908da68f7f6f1b465fdcd60066eff378743dd9", "filename": "libgcc/config/arc/ieee-754/adddf3.S", "status": "added", "additions": 524, "deletions": 0, "changes": 524, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Fadddf3.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Fadddf3.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Fadddf3.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,524 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"arc-ieee-754.h\"\n+#if 0 /* DEBUG */\n+\t.global __adddf3\n+\t.balign 4\n+__adddf3:\n+\tpush_s blink\n+\tpush_s r2\n+\tpush_s r3\n+\tpush_s r0\n+\tbl.d __adddf3_c\n+\tpush_s r1\n+\tld_s r2,[sp,12]\n+\tld_s r3,[sp,8]\n+\tst_s r0,[sp,12]\n+\tst_s r1,[sp,8]\n+\tpop_s r1\n+\tbl.d __adddf3_asm\n+\tpop_s r0\n+\tpop_s r3\n+\tpop_s r2\n+\tpop_s blink\n+\tcmp r0,r2\n+\tcmp.eq r1,r3\n+\tjeq_s [blink]\n+\tbl abort\n+\t.global __subdf3\n+\t.balign 4\n+__subdf3:\n+\tpush_s blink\n+\tpush_s r2\n+\tpush_s r3\n+\tpush_s r0\n+\tbl.d __subdf3_c\n+\tpush_s r1\n+\tld_s r2,[sp,12]\n+\tld_s r3,[sp,8]\n+\tst_s r0,[sp,12]\n+\tst_s r1,[sp,8]\n+\tpop_s r1\n+\tbl.d __subdf3_asm\n+\tpop_s r0\n+\tpop_s r3\n+\tpop_s r2\n+\tpop_s blink\n+\tcmp r0,r2\n+\tcmp.eq r1,r3\n+\tjeq_s [blink]\n+\tbl abort\n+#define __adddf3 __adddf3_asm\n+#define __subdf3 __subdf3_asm\n+#endif /* DEBUG */\n+/* N.B. This is optimized for ARC700.\n+  ARC600 has very different scheduling / instruction selection criteria.  */\n+\n+/* inputs: DBL0, DBL1 (r0-r3)\n+   output: DBL0 (r0, r1)\n+   clobber: r2-r10, r12, flags\n+   All NaN highword bits must be 1.  NaN low word is random.  */\n+\n+\t.balign 4\n+\t.global __adddf3\n+\t.global __subdf3\n+\t.long 0x7ff00000 ; exponent mask\n+\tFUNC(__adddf3)\n+\tFUNC(__subdf3)\n+__subdf3:\n+\tbxor_l DBL1H,DBL1H,31\n+__adddf3:\n+\tld r9,[pcl,-8]\n+\tbmsk r4,DBL0H,30\n+\txor r10,DBL0H,DBL1H\n+\tand r6,DBL1H,r9\n+\tsub.f r12,r4,r6\n+\tasr_s r12,r12,20\n+\tblo .Ldbl1_gt\n+\tbrhs r4,r9,.Linf_nan\n+\tbrhs r12,32,.Large_shift\n+\tbrne r12,0,.Lsmall_shift\n+\tbrge r10,0,.Ladd_same_exp ; r12 == 0\n+\n+/* After subtracting, we need to normalize; when shifting to place the\n+  leading 1 into position for the implicit 1 and adding that to DBL0H,\n+  we increment the exponent.  Thus, we have to subtract one more than\n+  the shift count from the exponent beforehand.  Iff the exponent drops thus\n+  below zero (before adding in the fraction with the leading one), we have\n+  generated a denormal number.  Denormal handling is basicallly reducing the\n+  shift count so that we produce a zero exponent instead; however, this way\n+  the shift count can become zero (if we started out with exponent 1).\n+  Therefore, a simple min operation is not good enough, since we don't\n+  want to handle a zero normalizing shift in the main path.\n+  On the plus side, we don't need to check for denorm input, the result\n+  of subtracing these looks just the same as denormals generated during\n+  subtraction.  */\n+\tbmsk r7,DBL1H,30\n+\tcmp r4,r7\n+\tcmp.eq DBL0L,DBL1L\n+\tblo .L_rsub_same_exp\n+\tsub.f DBL0L,DBL0L,DBL1L\n+\tbmsk r12,DBL0H,19\n+\tbic DBL1H,DBL0H,r12\n+\tsbc.f r4,r4,r7\n+\tbeq_l .Large_cancel\n+\tnorm DBL1L,r4\n+\tb.d .Lsub_done_same_exp\n+\tsub r12,DBL1L,9\n+\n+\t.balign 4\n+.Linf_nan:\n+\t; If both inputs are inf, but with different signs, the result is NaN.\n+\tasr r12,r10,31\n+\tor_s DBL1H,DBL1H,r12\n+\tj_s.d [blink]\n+\tor.eq DBL0H,DBL0H,DBL1H\n+\n+\t.balign 4\n+.L_rsub_same_exp:\n+\trsub.f DBL0L,DBL0L,DBL1L\n+\tbmsk r12,DBL1H,19\n+\tbic_s DBL1H,DBL1H,r12\n+\tsbc.f r4,r7,r4\n+\tbeq_l .Large_cancel\n+\tnorm DBL1L,r4\n+\n+\tsub r12,DBL1L,9\n+.Lsub_done_same_exp:\n+\tasl_s r12,r12,20\n+\tsub_s DBL1L,DBL1L,10\n+\tsub DBL0H,DBL1H,r12\n+\txor.f 0,DBL0H,DBL1H\n+\tbmi .Ldenorm\n+.Lpast_denorm:\n+\tneg_s r12,DBL1L\n+\tlsr r7,DBL0L,r12\n+\tasl r12,r4,DBL1L\n+\tasl_s DBL0L,DBL0L,DBL1L\n+\tadd_s r12,r12,r7\n+\tj_s.d [blink]\n+\tadd_l DBL0H,DBL0H,r12\n+\t.balign 4\n+.Ladd_same_exp:\n+\t/* This is a special case because we can't test for need to shift\n+\t   down by checking if bit 20 of DBL0H changes.  OTOH, here we know\n+\t   that we always need to shift down.  */\n+\t; The implicit 1 of DBL0 is not shifted together with the\n+\t;  fraction, thus effectively doubled, compensating for not setting\n+\t;  implicit1 for DBL1\n+\tadd_s r12,DBL0L,DBL1L\n+\tlsr.f 0,r12,2 ; round to even\n+\tbreq r6,0,.Ldenorm_add\n+\tadc.f DBL0L,DBL0L,DBL1L\n+\tsub r7,DBL1H,DBL0H\n+\tsub1 r7,r7,r9 ; boost exponent by 2/2\n+\trrc DBL0L,DBL0L\n+\tasr.f r7,r7 ; DBL1.fraction/2 - DBL0.fraction/2 ; exp++\n+\tadd.cs.f DBL0L,DBL0L,0x80000000\n+\tadd_l DBL0H,DBL0H,r7 ; DBL0.implicit1 not shifted for DBL1.implicit1\n+\tadd.cs DBL0H,DBL0H,1\n+\tbic.f 0,r9,DBL0H ; check for overflow -> infinity.\n+\tjne_l [blink]\n+\tand DBL0H,DBL0H,0xfff00000\n+\tj_s.d [blink]\n+\tmov_s DBL0L,0\n+\t.balign 4\n+.Large_shift:\n+\tbrhs r12,55,.Lret_dbl0\n+\tbmsk_s DBL1H,DBL1H,19\n+\tbrne r6,0,.Lno_denorm_large_shift\n+\tbrhi.d r12,33,.Lfixed_denorm_large_shift\n+\tsub_s r12,r12,1\n+\tbreq r12,31, .Lfixed_denorm_small_shift\n+.Lshift32:\n+\tmov_s r12,DBL1L\n+\tmov_s DBL1L,DBL1H\n+\tbrlt.d r10,0,.Lsub\n+\tmov_s DBL1H,0\n+\tb_s .Ladd\n+.Ldenorm_add:\n+\tcmp_s r12,DBL1L\n+\tmov_s DBL0L,r12\n+\tj_s.d [blink]\n+\tadc DBL0H,r4,DBL1H\n+\n+.Lret_dbl0:\n+\tj_s [blink]\n+\t.balign 4\n+.Lsmall_shift:\n+\tbreq.d r6,0,.Ldenorm_small_shift\n+\tbmsk_s DBL1H,DBL1H,19\n+\tbset_s DBL1H,DBL1H,20\n+.Lfixed_denorm_small_shift:\n+\tneg r8,r12\n+\tasl r4,DBL1H,r8\n+\tlsr_l DBL1H,DBL1H,r12\n+\tlsr r5,DBL1L,r12\n+\tasl r12,DBL1L,r8\n+\tbrge.d r10,0,.Ladd\n+\tor DBL1L,r4,r5\n+/* subtract, abs(DBL0) > abs(DBL1) */\n+/* DBL0H, DBL0L: original values\n+   DBL1H, DBL1L: fraction with explicit leading 1, shifted into place\n+   r4:  orig. DBL0H & 0x7fffffff\n+   r6:  orig. DBL1H & 0x7ff00000\n+   r9:  0x7ff00000\n+   r10: orig. DBL0H ^ DBL1H\n+   r12: guard bits */\n+\t.balign 4\n+.Lsub:\n+\tneg.f r12,r12\n+\tmov_s r7,DBL1H\n+\tbmsk r5,DBL0H,19\n+\tsbc.f DBL0L,DBL0L,DBL1L\n+\tbic DBL1H,DBL0H,r5\n+\tbset r5,r5,20\n+\tsbc.f r4,r5,r7\n+\tbeq_l .Large_cancel_sub\n+\tnorm DBL1L,r4\n+\tbmsk r6,DBL1H,30\n+.Lsub_done:\n+\tsub_s DBL1L,DBL1L,9\n+\tbreq DBL1L,1,.Lsub_done_noshift\n+\tasl r5,DBL1L,20\n+\tsub_s DBL1L,DBL1L,1\n+\tbrlo r6,r5,.Ldenorm_sub\n+\tsub DBL0H,DBL1H,r5\n+.Lpast_denorm_sub:\n+\tneg_s DBL1H,DBL1L\n+\tlsr r6,r12,DBL1H\n+\tasl_s r12,r12,DBL1L\n+\tand r8,r6,1\n+\tadd1.f 0,r8,r12\n+\tadd.ne.f r12,r12,r12\n+\tasl r8,DBL0L,DBL1L\n+\tlsr r12,DBL0L,DBL1H\n+\tadc.f DBL0L,r8,r6\n+\tasl r5,r4,DBL1L\n+\tadd_s DBL0H,DBL0H,r12\n+\tj_s.d [blink]\n+\tadc DBL0H,DBL0H,r5\n+\n+\t.balign 4\n+.Lno_denorm_large_shift:\n+\tbreq.d r12,32,.Lshift32\n+\tbset_l DBL1H,DBL1H,20\n+.Lfixed_denorm_large_shift:\n+\tneg r8,r12\n+\tasl r4,DBL1H,r8\n+\tlsr r5,DBL1L,r12\n+\tasl.f 0,DBL1L,r8\n+\tlsr DBL1L,DBL1H,r12\n+\tor r12,r4,r5\n+\ttst.eq r12,1\n+\tor.ne r12,r12,2\n+\tbrlt.d r10,0,.Lsub\n+\tmov_s DBL1H,0\n+\tb_l .Ladd\n+\n+\t; If a denorm is produced without shifting, we have an exact result -\n+\t; no need for rounding.\n+\t.balign 4\n+.Ldenorm_sub:\n+\tlsr DBL1L,r6,20\n+\txor DBL0H,r6,DBL1H\n+\tbrne.d DBL1L,1,.Lpast_denorm_sub\n+\tsub_s DBL1L,DBL1L,1\n+.Lsub_done_noshift:\n+\tadd.f 0,r12,r12\n+\tbtst.eq DBL0L,0\n+\tcmp.eq r12,r12\n+\tadd.cs.f DBL0L,DBL0L,1\n+\tbclr r4,r4,20\n+\tj_s.d [blink]\n+\tadc DBL0H,DBL1H,r4\n+\n+\t.balign 4\n+.Ldenorm_small_shift:\n+\tbrne.d r12,1,.Lfixed_denorm_small_shift\n+\tsub_l r12,r12,1\n+\tbrlt r10,0,.Lsub\n+.Ladd: ; bit 20 of DBL1H is clear and bit 0 of r12 does not matter\n+\tadd.f DBL0L,DBL0L,DBL1L\n+\tadd_s DBL1H,DBL1H,DBL0H\n+\tadd.cs DBL1H,DBL1H,1\n+\txor_l DBL0H,DBL0H,DBL1H\n+\tbbit0 DBL0H,20,.Lno_shiftdown\n+\tlsr.f DBL0H,DBL1H\n+\tand r4,DBL0L,2\n+\tbmsk DBL0H,DBL0H,18\n+\tsbc DBL0H,DBL1H,DBL0H\n+\trrc.f DBL0L,DBL0L\n+\tor.f r12,r12,r4\n+\tcmp.eq r12,r12\n+\tadd.cs.f DBL0L,DBL0L,1\n+\tbic.f 0,r9,DBL0H ; check for generating infinity with possible ...\n+\tjne.d [blink]    ; ... non-zero fraction\n+\tadd.cs DBL0H,DBL0H,1\n+\tmov_s DBL0L,0\n+\tbmsk DBL1H,DBL0H,19\n+\tj_s.d [blink]\n+\tbic_s DBL0H,DBL0H,DBL1H\n+.Lno_shiftdown:\n+\tmov_s DBL0H,DBL1H\n+\tadd.f 0,r12,r12\n+\tbtst.eq DBL0L,0\n+\tcmp.eq r12,r12\n+\tadd.cs.f DBL0L,DBL0L,1\n+\tj_s.d [blink]\n+\tadd.cs DBL0H,DBL0H,1\n+\t.balign 4\n+.Ldenorm:\n+\tbmsk DBL0H,DBL1H,30\n+\tlsr r12,DBL0H,20\n+\txor_s DBL0H,DBL0H,DBL1H\n+\tsub_l DBL1L,r12,1\n+\tbgt .Lpast_denorm\n+\tj_s.d [blink]\n+\tadd_l DBL0H,DBL0H,r4\n+\n+\t.balign 4\n+.Large_cancel:\n+\t;DBL0L: mantissa DBL1H: sign & exponent\n+\tnorm.f DBL1L,DBL0L\n+\tbmsk DBL0H,DBL1H,30\n+\tadd_s DBL1L,DBL1L,22\n+\tmov.mi DBL1L,21\n+\tadd_s r12,DBL1L,1\n+\tasl_s r12,r12,20\n+\tbeq_s .Lret0\n+\tbrhs.d DBL0H,r12,.Lpast_denorm_large_cancel\n+\tsub DBL0H,DBL1H,r12\n+\tbmsk DBL0H,DBL1H,30\n+\tlsr r12,DBL0H,20\n+\txor_s DBL0H,DBL0H,DBL1H\n+\tsub.f DBL1L,r12,1\n+\tjle [blink]\n+.Lpast_denorm_large_cancel:\n+\trsub.f r7,DBL1L,32\n+\tlsr r7,DBL0L,r7\n+\tasl_s DBL0L,DBL0L,DBL1L\n+\tmov.ls r7,DBL0L\n+\tadd_s DBL0H,DBL0H,r7\n+\tj_s.d [blink]\n+\tmov.ls DBL0L,0\n+.Lret0:\n+\tj_s.d\t[blink]\n+\tmov_l\tDBL0H,0\n+\n+/* r4:DBL0L:r12 : unnormalized result fraction\n+   DBL1H: result sign and exponent         */\n+/* When seeing large cancellation, only the topmost guard bit might be set.  */\n+\t.balign 4\n+.Large_cancel_sub:\n+\tnorm.f DBL1L,DBL0L\n+\tbpnz.d 0f\n+\tbmsk DBL0H,DBL1H,30\n+\tmov r5,22<<20\n+\tbne.d 1f\n+\tmov_s DBL1L,21\n+\tbset r5,r5,5+20\n+\tadd_s DBL1L,DBL1L,32\n+\tbrne r12,0,1f\n+\tj_s.d\t[blink]\n+\tmov_l\tDBL0H,0\n+\t.balign 4\n+0:\tadd r5,DBL1L,23\n+\tasl r5,r5,20\n+\tadd_s DBL1L,DBL1L,22\n+1:\tbrlo DBL0H,r5,.Ldenorm_large_cancel_sub\n+\tsub DBL0H,DBL1H,r5\n+.Lpast_denorm_large_cancel_sub:\n+\trsub.f r7,DBL1L,32\n+\tlsr r12,r12,r7\n+\tlsr r7,DBL0L,r7\n+\tasl_s DBL0L,DBL0L,DBL1L\n+\tadd.ge DBL0H,DBL0H,r7\n+\tadd_s DBL0L,DBL0L,r12\n+\tadd.lt DBL0H,DBL0H,DBL0L\n+\tmov.eq DBL0L,r12\n+\tj_s.d [blink]\n+\tmov.lt DBL0L,0\n+\t.balign 4\n+.Ldenorm_large_cancel_sub:\n+\tlsr r5,DBL0H,20\n+\txor_s DBL0H,DBL0H,DBL1H\n+\tbrgt.d r5,1,.Lpast_denorm_large_cancel_sub\n+\tsub DBL1L,r5,1\n+\tj_l [blink] ; denorm, no shift -> no rounding needed.\n+\n+/* r4: DBL0H & 0x7fffffff\n+   r6: DBL1H & 0x7ff00000\n+   r9: 0x7ff00000\n+   r10: sign difference\n+   r12: shift count (negative) */\n+\t.balign 4\n+.Ldbl1_gt:\n+\tbrhs r6,r9,.Lret_dbl1 ; inf or NaN\n+\tneg r8,r12\n+\tbrhs r8,32,.Large_shift_dbl0\n+.Lsmall_shift_dbl0:\n+\tbreq.d r6,0,.Ldenorm_small_shift_dbl0\n+\tbmsk_s DBL0H,DBL0H,19\n+\tbset_s DBL0H,DBL0H,20\n+.Lfixed_denorm_small_shift_dbl0:\n+\tasl r4,DBL0H,r12\n+\tlsr DBL0H,DBL0H,r8\n+\tlsr r5,DBL0L,r8\n+\tasl r12,DBL0L,r12\n+\tbrge.d r10,0,.Ladd_dbl1_gt\n+\tor DBL0L,r4,r5\n+/* subtract, abs(DBL0) < abs(DBL1) */\n+/* DBL0H, DBL0L: fraction with explicit leading 1, shifted into place\n+   DBL1H, DBL1L: original values\n+   r6:  orig. DBL1H & 0x7ff00000\n+   r9:  0x7ff00000\n+   r12: guard bits */\n+\t.balign 4\n+.Lrsub:\n+\tneg.f r12,r12\n+\tbmsk r7,DBL1H,19\n+\tmov_s r5,DBL0H\n+\tsbc.f DBL0L,DBL1L,DBL0L\n+\tbic DBL1H,DBL1H,r7\n+\tbset r7,r7,20\n+\tsbc.f r4,r7,r5\n+\tbeq_l .Large_cancel_sub\n+\tnorm DBL1L,r4\n+\tb_l .Lsub_done ; note: r6 is already set up.\n+\n+.Lret_dbl1:\n+\tmov_s DBL0H,DBL1H\n+\tj_s.d [blink]\n+\tmov_l DBL0L,DBL1L\n+\t.balign 4\n+.Ldenorm_small_shift_dbl0:\n+\tsub.f r8,r8,1\n+\tbne.d .Lfixed_denorm_small_shift_dbl0\n+\tadd_s r12,r12,1\n+\tbrlt r10,0,.Lrsub\n+.Ladd_dbl1_gt: ; bit 20 of DBL0H is clear and bit 0 of r12 does not matter\n+\tadd.f DBL0L,DBL0L,DBL1L\n+\tadd_s DBL0H,DBL0H,DBL1H\n+\tadd.cs DBL0H,DBL0H,1\n+\txor DBL1H,DBL0H,DBL1H\n+\tbbit0 DBL1H,20,.Lno_shiftdown_dbl1_gt\n+\tlsr.f DBL1H,DBL0H\n+\tand r4,DBL0L,2\n+\tbmsk DBL1H,DBL1H,18\n+\tsbc DBL0H,DBL0H,DBL1H\n+\trrc.f DBL0L,DBL0L\n+\tor.f r12,r12,r4\n+\tcmp.eq r12,r12\n+\tadd.cs.f DBL0L,DBL0L,1\n+\tbic.f 0,r9,DBL0H ; check for generating infinity with possible ...\n+\tjne.d [blink]    ; ... non-zero fraction\n+\tadd.cs DBL0H,DBL0H,1\n+\tmov_s DBL0L,0\n+\tbmsk DBL1H,DBL0H,19\n+\tj_s.d [blink]\n+\tbic_s DBL0H,DBL0H,DBL1H\n+.Lno_shiftdown_dbl1_gt:\n+\tadd.f 0,r12,r12\n+\tbtst.eq DBL0L,0\n+\tcmp.eq r12,r12\n+\tadd.cs.f DBL0L,DBL0L,1\n+\tj_s.d [blink]\n+\tadd.cs DBL0H,DBL0H,1\n+\n+\t.balign 4\n+.Large_shift_dbl0:\n+\tbrhs r8,55,.Lret_dbl1\n+\tbmsk_s DBL0H,DBL0H,19\n+\tbrne r6,0,.Lno_denorm_large_shift_dbl0\n+\tadd_s r12,r12,1\n+\tbrne.d r8,33,.Lfixed_denorm_large_shift_dbl0\n+\tsub r8,r8,1\n+\tbset_s DBL0H,DBL0H,20\n+.Lshift32_dbl0:\n+\tmov_s r12,DBL0L\n+\tmov_s DBL0L,DBL0H\n+\tbrlt.d r10,0,.Lrsub\n+\tmov_s DBL0H,0\n+\tb_s .Ladd_dbl1_gt\n+\n+\t.balign 4\n+.Lno_denorm_large_shift_dbl0:\n+\tbreq.d r8,32,.Lshift32_dbl0\n+\tbset_l DBL0H,DBL0H,20\n+.Lfixed_denorm_large_shift_dbl0:\n+\tasl r4,DBL0H,r12\n+\tlsr r5,DBL0L,r8\n+\tasl.f 0,DBL0L,r12\n+\tlsr DBL0L,DBL0H,r8\n+\tor r12,r4,r5\n+\ttst.eq r12,1\n+\tor.ne r12,r12,2\n+\tbrlt.d r10,0,.Lrsub\n+\tmov_s DBL0H,0\n+\tb_l .Ladd_dbl1_gt\n+\tENDFUNC(__adddf3)\n+\tENDFUNC(__subdf3)"}, {"sha": "e25c0b5c4d2286152d8d67d5419ddfa6170a92f3", "filename": "libgcc/config/arc/ieee-754/addsf3.S", "status": "added", "additions": 344, "deletions": 0, "changes": 344, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Faddsf3.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Faddsf3.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Faddsf3.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,344 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"arc-ieee-754.h\"\n+#if 0 /* DEBUG */\n+\t.global __addsf3\n+\tFUNC(__addsf3)\n+\t.balign 4\n+__addsf3:\n+\tpush_s blink\n+\tpush_s r1\n+\tbl.d __addsf3_c\n+\tpush_s r0\n+\tld_s r1,[sp,4]\n+\tst_s r0,[sp,4]\n+\tbl.d __addsf3_asm\n+\tpop_s r0\n+\tpop_s r1\n+\tpop_s blink\n+\tcmp r0,r1\n+\tjeq_s [blink]\n+\tbl abort\n+\tENDFUNC(__addsf3)\n+\t.global __subsf3\n+\tFUNC(__subsf3)\n+\t.balign 4\n+__subsf3:\n+\tpush_s blink\n+\tpush_s r1\n+\tbl.d __subsf3_c\n+\tpush_s r0\n+\tld_s r1,[sp,4]\n+\tst_s r0,[sp,4]\n+\tbl.d __subsf3_asm\n+\tpop_s r0\n+\tpop_s r1\n+\tpop_s blink\n+\tcmp r0,r1\n+\tjeq_s [blink]\n+\tbl abort\n+\tENDFUNC(__subsf3)\n+#define __addsf3 __addsf3_asm\n+#define __subsf3 __subsf3_asm\n+#endif /* DEBUG */\n+/* N.B. This is optimized for ARC700.\n+  ARC600 has very different scheduling / instruction selection criteria.  */\n+\n+/* inputs: r0, r1\n+   output: r0\n+   clobber: r1-r10, r12, flags  */\n+\n+\t.balign 4\n+\t.global __addsf3\n+\t.global __subsf3\n+\tFUNC(__addsf3)\n+\tFUNC(__subsf3)\n+\t.long 0x7f800000 ; exponent mask\n+__subsf3:\n+\tbxor_l r1,r1,31\n+__addsf3:\n+\tld r9,[pcl,-8]\n+\tbmsk r4,r0,30\n+\txor r10,r0,r1\n+\tand r6,r1,r9\n+\tsub.f r12,r4,r6\n+\tasr_s r12,r12,23\n+\tblo .Ldbl1_gt\n+\tbrhs r4,r9,.Linf_nan\n+\tbrne r12,0,.Lsmall_shift\n+\tbrge r10,0,.Ladd_same_exp ; r12 == 0\n+/* After subtracting, we need to normalize; when shifting to place the\n+  leading 1 into position for the implicit 1 and adding that to DBL0,\n+  we increment the exponent.  Thus, we have to subtract one more than\n+  the shift count from the exponent beforehand.  Iff the exponent drops thus\n+  below zero (before adding in the fraction with the leading one), we have\n+  generated a denormal number.  Denormal handling is basicallly reducing the\n+  shift count so that we produce a zero exponent instead; FWIW, this way\n+  the shift count can become zero (if we started out with exponent 1).\n+  On the plus side, we don't need to check for denorm input, the result\n+  of subtracing these looks just the same as denormals generated during\n+  subtraction.  */\n+\tbmsk r7,r1,30\n+\tbreq\tr4,r7,.Lret0\n+\tsub.f r5,r4,r7\n+\tlsr r12,r4,23\n+\tneg.cs r5,r5\n+\tnorm r3,r5\n+\tbmsk r2,r0,22\n+\tsub_s r3,r3,6\n+\tmin r12,r12,r3\n+\tbic r1,r0,r2\n+\tsub_s r3,r12,1\n+\tasl_s r12,r12,23\n+\tasl r2,r5,r3\n+\tsub_s r1,r1,r12\n+\tadd_s r0,r1,r2\n+\tj_s.d [blink]\n+\tbxor.cs r0,r0,31\n+\t.balign 4\n+.Linf_nan:\n+\t; If both inputs are inf, but with different signs, the result is NaN.\n+\tasr r12,r10,31\n+\tor_s r1,r1,r12\n+\tj_s.d [blink]\n+\tor.eq r0,r0,r1\n+\t.balign 4\n+.Ladd_same_exp:\n+\t/* This is a special case because we can't test for need to shift\n+\t   down by checking if bit 23 of DBL0 changes.  OTOH, here we know\n+\t   that we always need to shift down.  */\n+\t; adding the two floating point numbers together makes the sign\n+\t; cancel out and apear as carry; the exponent is doubled, and the\n+\t; fraction also in need of shifting left by one. The two implicit\n+\t; ones of the sources make an implicit 1 of the result, again\n+\t; non-existent in a place shifted by one.\n+\tadd.f\tr0,r0,r1\n+\tbtst_s\tr0,1\n+\tbreq\tr6,0,.Ldenorm_add\n+\tadd.ne\tr0,r0,1 ; round to even.\n+\trrc\tr0,r0\n+\tbmsk\tr1,r9,23\n+\tadd\tr0,r0,r1 ; increment exponent\n+\tbic.f\t0,r9,r0; check for overflow -> infinity.\n+\tjne_l\t[blink]\n+\tmov_s\tr0,r9\n+\tj_s.d\t[blink]\n+\tbset.cs\tr0,r0,31\n+\n+.Ldenorm_add:\n+\tj_s.d [blink]\n+\tadd r0,r4,r1\n+\n+.Lret_dbl0:\n+        j_s [blink]\n+\n+\t.balign 4\n+.Lsmall_shift:\n+\tbrhi r12,25,.Lret_dbl0\n+\tbreq.d r6,0,.Ldenorm_small_shift\n+\tbmsk_s r1,r1,22\n+\tbset_s r1,r1,23\n+.Lfixed_denorm_small_shift:\n+\tneg r8,r12\n+\tasl r5,r1,r8\n+\tbrge.d r10,0,.Ladd\n+\tlsr_l r1,r1,r12\n+/* subtract, abs(DBL0) > abs(DBL1) */\n+/* DBL0: original values\n+   DBL1: fraction with explicit leading 1, shifted into place\n+   r4:  orig. DBL0 & 0x7fffffff\n+   r6:  orig. DBL1 & 0x7f800000\n+   r9:  0x7f800000\n+   r10: orig. DBL0H ^ DBL1H\n+   r5 : guard bits */\n+\t.balign 4\n+.Lsub:\n+\tneg.f r12,r5\n+\tbmsk r3,r0,22\n+\tbset r5,r3,23\n+\tsbc.f r4,r5,r1\n+\tbeq.d .Large_cancel_sub\n+\tbic r7,r0,r3\n+\tnorm r3,r4\n+\tbmsk r6,r7,30\n+.Lsub_done:\n+\tsub_s r3,r3,6\n+\tbreq r3,1,.Lsub_done_noshift\n+\tasl r5,r3,23\n+\tsub_l r3,r3,1\n+\tbrlo r6,r5,.Ldenorm_sub\n+\tsub r0,r7,r5\n+\tneg_s r1,r3\n+\tlsr.f r2,r12,r1\n+\tasl_s r12,r12,r3\n+\tbtst_s\tr2,0\n+\tbmsk.eq.f r12,r12,30\n+\tasl r5,r4,r3\n+\tadd_s r0,r0,r2\n+\tadc.ne r0,r0,0\n+\tj_s.d [blink]\n+\tadd_l r0,r0,r5\n+\n+.Lret0:\n+\tj_s.d\t[blink]\n+\tmov_l\tr0,0\n+\n+\t.balign 4\n+.Ldenorm_small_shift:\n+\tbrne.d\tr12,1,.Lfixed_denorm_small_shift\n+\tsub_s\tr12,r12,1\n+\tbrlt.d\tr10,0,.Lsub\n+\tmov_s\tr5,r12 ; zero r5, and align following code\n+.Ladd: ; Both bit 23 of DBL1 and bit 0 of r5 are clear.\n+\tbmsk\tr2,r0,22\n+\tadd_s\tr2,r2,r1\n+\tbbit0.d\tr2,23,.Lno_shiftdown\n+\tadd_s\tr0,r0,r1\n+\tbic.f\t0,r9,r0; check for overflow -> infinity; eq : infinity\n+\tbmsk\tr1,r2,22\n+\tlsr.ne.f r2,r2,2; cc: even ; hi: might round down\n+\tlsr.ne\tr1,r1,1\n+\trcmp.hi\tr5,1; hi : round down\n+\tbclr.hi\tr0,r0,0\n+\tj_l.d\t[blink]\n+\tsub_s\tr0,r0,r1\n+\n+/* r4: DBL0H & 0x7fffffff\n+   r6: DBL1H & 0x7f800000\n+   r9: 0x7f800000\n+   r10: sign difference\n+   r12: shift count (negative) */\n+\t.balign 4\n+.Ldbl1_gt:\n+\tbrhs r6,r9,.Lret_dbl1 ; inf or NaN\n+\tneg r8,r12\n+\tbrhi r8,25,.Lret_dbl1\n+.Lsmall_shift_dbl0:\n+\tbreq.d r6,0,.Ldenorm_small_shift_dbl0\n+\tbmsk_s r0,r0,22\n+\tbset_s r0,r0,23\n+.Lfixed_denorm_small_shift_dbl0:\n+\tasl r5,r0,r12\n+\tbrge.d r10,0,.Ladd_dbl1_gt\n+\tlsr r0,r0,r8\n+/* subtract, abs(DBL0) < abs(DBL1) */\n+/* DBL0: fraction with explicit leading 1, shifted into place\n+   DBL1: original value\n+   r6:  orig. DBL1 & 0x7f800000\n+   r9:  0x7f800000\n+   r5: guard bits */\n+\t.balign 4\n+.Lrsub:\n+\tneg.f r12,r5\n+\tbmsk r5,r1,22\n+\tbic r7,r1,r5\n+\tbset r5,r5,23\n+\tsbc.f r4,r5,r0\n+\tbne.d .Lsub_done ; note: r6 is already set up.\n+\tnorm r3,r4\n+\t/* Fall through */\n+\n+/* r4:r12 : unnormalized result fraction\n+   r7: result sign and exponent         */\n+/* When seeing large cancellation, only the topmost guard bit might be set.  */\n+\t.balign 4\n+.Large_cancel_sub:\n+\tbreq_s\tr12,0,.Lret0\n+\tsub\tr0,r7,24<<23\n+\txor.f\t0,r0,r7 ; test if exponent is negative\n+\ttst.pl\tr9,r0  ; test if exponent is zero\n+\tjpnz\t[blink] ; return if non-denormal result\n+\tbmsk\tr6,r7,30\n+\tlsr\tr3,r6,23\n+\txor\tr0,r6,r7\n+\tsub_s\tr3,r3,24-22\n+\tj_s.d\t[blink]\n+\tbset\tr0,r0,r3\n+\n+\t; If a denorm is produced, we have an exact result -\n+\t; no need for rounding.\n+\t.balign 4\n+.Ldenorm_sub:\n+\tsub r3,r6,1\n+\tlsr.f r3,r3,23\n+\txor r0,r6,r7\n+\tneg_s r1,r3\n+\tasl.ne r4,r4,r3\n+\tlsr_s r12,r12,r1\n+\tadd_s r0,r0,r4\n+\tj_s.d [blink]\n+\tadd.ne r0,r0,r12\n+\n+\t.balign 4\n+.Lsub_done_noshift:\n+\tadd.f 0,r12,r12\n+\tbtst.eq r4,0\n+\tbclr r4,r4,23\n+\tadd r0,r7,r4\n+\tj_s.d [blink]\n+\tadc.ne r0,r0,0\n+\n+\t.balign 4\n+.Lno_shiftdown:\n+\tadd.f 0,r5,r5\n+\tbtst.eq r0,0\n+\tcmp.eq r5,r5\n+\tj_s.d [blink]\n+\tadd.cs r0,r0,1\n+\n+.Lret_dbl1:\n+\tj_s.d [blink]\n+\tmov_l r0,r1\n+\t.balign 4\n+.Ldenorm_small_shift_dbl0:\n+\tsub.f r8,r8,1\n+\tbne.d .Lfixed_denorm_small_shift_dbl0\n+\tadd_s r12,r12,1\n+\tbrlt.d r10,0,.Lrsub\n+\tmov r5,0\n+.Ladd_dbl1_gt: ; both bit 23 of DBL0 and bit 0 of r5 are clear.\n+\tbmsk\tr2,r1,22\n+\tadd_s\tr2,r2,r0\n+\tbbit0.d\tr2,23,.Lno_shiftdown_dbl1_gt\n+\tadd_s\tr0,r1,r0\n+\tbic.f\t0,r9,r0; check for overflow -> infinity; eq : infinity\n+\tbmsk\tr1,r2,22\n+\tlsr.ne.f r2,r2,2; cc: even ; hi: might round down\n+\tlsr.ne\tr1,r1,1\n+\trcmp.hi\tr5,1; hi : round down\n+\tbclr.hi\tr0,r0,0\n+\tj_l.d\t[blink]\n+\tsub_s\tr0,r0,r1\n+\n+\t.balign\t4\n+.Lno_shiftdown_dbl1_gt:\n+\tadd.f\t0,r5,r5\n+\tbtst.eq\tr0,0\n+\tcmp.eq\tr5,r5\n+\tj_s.d\t[blink]\n+\tadd.cs\tr0,r0,1\n+\tENDFUNC(__addsf3)\n+\tENDFUNC(__subsf3)"}, {"sha": "785fc515c939011355be653f2726a4daf581b8c8", "filename": "libgcc/config/arc/ieee-754/arc-ieee-754.h", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc-ieee-754.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc-ieee-754.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc-ieee-754.h?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,56 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.\n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifdef __LITTLE_ENDIAN__\n+#define DBL0L r0\n+#define DBL0H r1\n+#define DBL1L r2\n+#define DBL1H r3\n+#else\n+#define DBL0L r1\n+#define DBL0H r0\n+#define DBL1L r3\n+#define DBL1H r2\n+#endif\n+#define add_l add\n+#define asr_l asr\n+#define j_l j\n+#define jne_l jne\n+#define jeq_l jeq\n+#define or_l or\n+#define mov_l mov\n+#define b_l b\n+#define beq_l beq\n+#define bne_l bne\n+#define brne_l brne\n+#define bset_l bset\n+#define sub_l sub\n+#define sub1_l sub1\n+#define lsr_l lsr\n+#define xor_l xor\n+#define bic_l bic\n+#define bmsk_l bmsk\n+#define bxor_l bxor\n+#define bcs_s blo_s"}, {"sha": "b475e1667204c94f79f42c9a525e5e3f3757f4e7", "filename": "libgcc/config/arc/ieee-754/arc600-dsp/divdf3.S", "status": "added", "additions": 421, "deletions": 0, "changes": 421, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600-dsp%2Fdivdf3.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600-dsp%2Fdivdf3.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600-dsp%2Fdivdf3.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,421 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/*\n+   to calculate a := b/x as b*y, with y := 1/x:\n+   - x is in the range [1..2)\n+   - calculate 15..18 bit inverse y0 using a table of approximating polynoms.\n+     Precision is higher for polynoms used to evaluate input with larger\n+     value.\n+   - Do one newton-raphson iteration step to double the precision,\n+     then multiply this with the divisor\n+\t-> more time to decide if dividend is subnormal\n+     - the worst error propagation is on the side of the value range\n+       with the least initial defect, thus giving us about 30 bits precision.\n+      The truncation error for the either is less than 1 + x/2 ulp.\n+      A 31 bit inverse can be simply calculated by using x with implicit 1\n+      and chaining the multiplies.  For a 32 bit inverse, we multiply y0^2\n+      with the bare fraction part of x, then add in y0^2 for the implicit\n+      1 of x.\n+    - If calculating a 31 bit inverse, the systematic error is less than\n+      -1 ulp; likewise, for 32 bit, it is less than -2 ulp.\n+    - If we calculate our seed with a 32 bit fraction, we can archive a\n+      tentative result strictly better than -2 / +2.5 (1) ulp/128, i.e. we\n+      only need to take the step to calculate the 2nd stage rest and\n+      rounding adjust 1/32th of the time.  However, if we use a 20 bit\n+      fraction for the seed, the negative error can exceed -2 ulp/128, (2)\n+      thus for a simple add / tst check, we need to do the 2nd stage\n+      rest calculation/ rounding adjust 1/16th of the time.\n+      (1): The inexactness of the 32 bit inverse contributes an error in the\n+      range of (-1 .. +(1+x/2) ) ulp/128.  Leaving out the low word of the\n+      rest contributes an error < +1/x ulp/128 .  In the interval [1,2),\n+      x/2 + 1/x <= 1.5 .\n+      (2): Unless proven otherwise.  I have not actually looked for an\n+      example where -2 ulp/128 is exceeded, and my calculations indicate\n+      that the excess, if existent, is less than -1/512 ulp.\n+    ??? The algorithm is still based on the ARC700 optimized code.\n+    Maybe we could make better use of 32x16 bit multiply, or 64 bit multiply\n+    results.\n+ */\n+#include \"../arc-ieee-754.h\"\n+#define mlo acc2\n+#define mhi acc1\n+#define mul64(b,c) mullw 0,b,c` machlw 0,b,c\n+#define mulu64(b,c) mululw 0,b,c` machulw 0,b,c\n+\n+/* N.B. fp-bit.c does double rounding on denormal numbers.  */\n+#if 0 /* DEBUG */\n+\t.global __divdf3\n+\tFUNC(__divdf3)\n+\t.balign 4\n+__divdf3:\n+\tpush_s blink\n+\tpush_s r2\n+\tpush_s r3\n+\tpush_s r0\n+\tbl.d __divdf3_c\n+\tpush_s r1\n+\tld_s r2,[sp,12]\n+\tld_s r3,[sp,8]\n+\tst_s r0,[sp,12]\n+\tst_s r1,[sp,8]\n+\tpop_s r1\n+\tbl.d __divdf3_asm\n+\tpop_s r0\n+\tpop_s r3\n+\tpop_s r2\n+\tpop_s blink\n+\tcmp r0,r2\n+\tcmp.eq r1,r3\n+\tjeq_s [blink]\n+\tand r12,DBL0H,DBL1H\n+\tbic.f 0,0x7ff80000,r12 ; both NaN -> OK\n+\tjeq_s [blink]\n+\tbl abort\n+\tENDFUNC(__divdf3)\n+#define __divdf3 __divdf3_asm\n+#endif /* DEBUG */\n+\n+\tFUNC(__divdf3)\n+\t.balign 4\n+.L7ff00000:\n+\t.long 0x7ff00000\n+.Ldivtab:\n+\t.long 0xfc0fffe1\n+\t.long 0xf46ffdfb\n+\t.long 0xed1ffa54\n+\t.long 0xe61ff515\n+\t.long 0xdf7fee75\n+\t.long 0xd91fe680\n+\t.long 0xd2ffdd52\n+\t.long 0xcd1fd30c\n+\t.long 0xc77fc7cd\n+\t.long 0xc21fbbb6\n+\t.long 0xbcefaec0\n+\t.long 0xb7efa100\n+\t.long 0xb32f92bf\n+\t.long 0xae8f83b7\n+\t.long 0xaa2f7467\n+\t.long 0xa5ef6479\n+\t.long 0xa1cf53fa\n+\t.long 0x9ddf433e\n+\t.long 0x9a0f3216\n+\t.long 0x965f2091\n+\t.long 0x92df0f11\n+\t.long 0x8f6efd05\n+\t.long 0x8c1eeacc\n+\t.long 0x88eed876\n+\t.long 0x85dec615\n+\t.long 0x82eeb3b9\n+\t.long 0x800ea10b\n+\t.long 0x7d3e8e0f\n+\t.long 0x7a8e7b3f\n+\t.long 0x77ee6836\n+\t.long 0x756e5576\n+\t.long 0x72fe4293\n+\t.long 0x709e2f93\n+\t.long 0x6e4e1c7f\n+\t.long 0x6c0e095e\n+\t.long 0x69edf6c5\n+\t.long 0x67cde3a5\n+\t.long 0x65cdd125\n+\t.long 0x63cdbe25\n+\t.long 0x61ddab3f\n+\t.long 0x600d991f\n+\t.long 0x5e3d868c\n+\t.long 0x5c6d7384\n+\t.long 0x5abd615f\n+\t.long 0x590d4ecd\n+\t.long 0x576d3c83\n+\t.long 0x55dd2a89\n+\t.long 0x545d18e9\n+\t.long 0x52dd06e9\n+\t.long 0x516cf54e\n+\t.long 0x4ffce356\n+\t.long 0x4e9cd1ce\n+\t.long 0x4d3cbfec\n+\t.long 0x4becae86\n+\t.long 0x4aac9da4\n+\t.long 0x496c8c73\n+\t.long 0x483c7bd3\n+\t.long 0x470c6ae8\n+\t.long 0x45dc59af\n+\t.long 0x44bc4915\n+\t.long 0x43ac3924\n+\t.long 0x428c27fb\n+\t.long 0x418c187a\n+\t.long 0x407c07bd\n+\n+__divdf3_support: /* This label makes debugger output saner.  */\n+\t.balign 4\n+.Ldenorm_dbl1:\n+\tbrge r6, \\\n+\t\t0x43500000,.Linf_NaN ; large number / denorm -> Inf\n+\tbmsk.f r12,DBL1H,19\n+\tmov.eq r12,DBL1L\n+\tmov.eq DBL1L,0\n+\tsub.eq r7,r7,32\n+\tnorm.f r11,r12 ; flag for x/0 -> Inf check\n+\tbeq_s .Linf_NaN\n+\tmov.mi r11,0\n+\tadd.pl r11,r11,1\n+\tadd_s r12,r12,r12\n+\tasl r8,r12,r11\n+\trsub r12,r11,31\n+\tlsr r12,DBL1L,r12\n+\ttst_s DBL1H,DBL1H\n+\tor r8,r8,r12\n+\tlsr r4,r8,26\n+\tlsr DBL1H,r8,12\n+\tld.as r4,[r10,r4]\n+\tbxor.mi DBL1H,DBL1H,31\n+\tsub r11,r11,11\n+\tasl DBL1L,DBL1L,r11\n+\tsub r11,r11,1\n+\tmulu64 (r4,r8)\n+\tsub r7,r7,r11\n+\tb.d .Lpast_denorm_dbl1\n+\tasl r7,r7,20\n+\n+.Linf_NaN:\n+\ttst_s DBL0L,DBL0L ; 0/0 -> NaN\n+\txor_s DBL1H,DBL1H,DBL0H\n+\tbclr.eq.f DBL0H,DBL0H,31\n+\tbmsk DBL0H,DBL1H,30\n+\txor_s DBL0H,DBL0H,DBL1H\n+\tsub.eq DBL0H,DBL0H,1\n+\tmov_s DBL0L,0\n+\tj_s.d [blink]\n+\tor DBL0H,DBL0H,r9\n+\t.balign 4\n+.Lret0_2:\n+\txor_s DBL1H,DBL1H,DBL0H\n+\tmov_s DBL0L,0\n+\tbmsk DBL0H,DBL1H,30\n+\tj_s.d [blink]\n+\txor_s DBL0H,DBL0H,DBL1H\n+\t.balign 4\n+\t.global __divdf3\n+/* N.B. the spacing between divtab and the sub3 to get its address must\n+   be a multiple of 8.  */\n+__divdf3:\n+\tasl r8,DBL1H,12\n+\tlsr r4,r8,26\n+\tsub3 r10,pcl,51;(.-.Ldivtab) >> 3\n+\tld.as r9,[pcl,-104]; [pcl,(-((.-.L7ff00000) >> 2))] ; 0x7ff00000\n+\tld.as r4,[r10,r4]\n+\tlsr r12,DBL1L,20\n+\tand.f r7,DBL1H,r9\n+\tor r8,r8,r12\n+\tmulu64 (r4,r8)\n+\tbeq.d .Ldenorm_dbl1\n+.Lpast_denorm_dbl1:\n+\tand.f r6,DBL0H,r9\n+\tbreq.d r7,r9,.Linf_nan_dbl1\n+\tasl r4,r4,12\n+\tsub r4,r4,mhi\n+\tmululw 0,r4,r4\n+\tmachulw r5,r4,r4\n+\tbne.d .Lnormal_dbl0\n+\tlsr r8,r8,1\n+\n+\t.balign 4\n+.Ldenorm_dbl0:\n+\tbmsk.f r12,DBL0H,19\n+\t; wb stall\n+\tmov.eq r12,DBL0L\n+\tsub.eq r6,r6,32\n+\tnorm.f r11,r12 ; flag for 0/x -> 0 check\n+\tbrge r7, \\\n+\t\t0x43500000, .Lret0_2 ; denorm/large number -> 0\n+\tbeq_s .Lret0_2\n+\tmov.mi r11,0\n+\tadd.pl r11,r11,1\n+\tasl r12,r12,r11\n+\tsub r6,r6,r11\n+\tadd.f 0,r6,31\n+\tlsr r10,DBL0L,r6\n+\tmov.mi r10,0\n+\tadd r6,r6,11+32\n+\tneg.f r11,r6\n+\tasl DBL0L,DBL0L,r11\n+\tmov.pl DBL0L,0\n+\tsub r6,r6,32-1\n+\tb.d .Lpast_denorm_dbl0\n+\tasl r6,r6,20\n+\n+\t.balign 4\n+.Linf_nan_dbl1: ; 0/Inf -> NaN Inf/Inf -> NaN x/Inf-> 0 x/NaN -> NaN\n+\tor.f 0,r6,DBL0L\n+\tcmp.ne r6,r9\n+\tnot_s DBL0L,DBL1H\n+\tsub_s.ne DBL0L,DBL0L,DBL0L\n+\ttst_s DBL0H,DBL0H\n+\tadd_s DBL0H,DBL1H,DBL0L\n+\tj_s.d [blink]\n+\tbxor.mi DBL0H,DBL0H,31\n+\n+\t.balign 4\n+.Lnormal_dbl0:\n+\tbreq.d r6,r9,.Linf_nan_dbl0\n+\tasl r12,DBL0H,11\n+\tlsr r10,DBL0L,21\n+.Lpast_denorm_dbl0:\n+\tbset r8,r8,31\n+\tmulu64 (r5,r8)\n+\tadd_s r12,r12,r10\n+\tbset r5,r12,31\n+\tcmp r5,r8\n+\tcmp.eq DBL0L,DBL1L\n+\tlsr.cc r5,r5,1\n+\tsub r4,r4,mhi ; u1.31 inverse, about 30 bit\n+\tmululw 0,r5,r4\n+\tmachulw r11,r5,r4 ; result fraction highpart\n+\tlsr r8,r8,2 ; u3.29\n+\tadd r5,r6, /* wait for immediate */ \\\n+\t\t0x3fe00000\n+\tmulu64 (r11,r8) ; u-28.31\n+\tasl_s DBL1L,DBL1L,9 ; u-29.23:9\n+\tsbc r6,r5,r7\n+\tmov r12,mlo ; u-28.31\n+\tmulu64 (r11,DBL1L) ; mhi: u-28.23:9\n+\tadd.cs DBL0L,DBL0L,DBL0L\n+\tasl_s DBL0L,DBL0L,6 ; u-26.25:7\n+\tasl r10,r11,23\n+\tsub_l DBL0L,DBL0L,r12\n+\tlsr r7,r11,9\n+\tsub r5,DBL0L,mhi ; rest msw ; u-26.31:0\n+\tmul64 (r5,r4) ; mhi: result fraction lowpart\n+\txor.f 0,DBL0H,DBL1H\n+\tand DBL0H,r6,r9\n+\tadd_s DBL0H,DBL0H,r7\n+\tbclr r12,r9,20 ; 0x7fe00000\n+\tbrhs.d r6,r12,.Linf_denorm\n+\tbxor.mi DBL0H,DBL0H,31\n+\tadd.f r12,mhi,0x11\n+\tasr r9,r12,5\n+\tsub.mi DBL0H,DBL0H,1\n+\tadd.f DBL0L,r9,r10\n+\ttst r12,0x1c\n+\tjne.d [blink]\n+\tadd.cs DBL0H,DBL0H,1\n+        /* work out exact rounding if we fall through here.  */\n+        /* We know that the exact result cannot be represented in double\n+           precision.  Find the mid-point between the two nearest\n+           representable values, multiply with the divisor, and check if\n+           the result is larger than the dividend.  Since we want to know\n+\t   only the sign bit, it is sufficient to calculate only the\n+\t   highpart of the lower 64 bits.  */\n+\tmulu64 (r11,DBL1L) ; rest before considering r12 in r5 : -mlo\n+\tsub.f DBL0L,DBL0L,1\n+\tasl r12,r9,2 ; u-22.30:2\n+\tsub.cs DBL0H,DBL0H,1\n+\tsub.f r12,r12,2\n+\tmov r10,mlo ; rest before considering r12 in r5 : -r10\n+\tmululw 0,r12,DBL1L\n+\tmachulw r7,r12,DBL1L ; mhi: u-51.32\n+\tasl r5,r5,25 ; s-51.7:25\n+\tlsr r10,r10,7 ; u-51.30:2\n+\tmulu64 (r12,r8) ; mlo: u-51.31:1\n+\tsub r5,r5,r10\n+\tadd.mi r5,r5,DBL1L ; signed multiply adjust for r12*DBL1L\n+\tbset r7,r7,0 ; make sure that the result is not zero, and that\n+\tsub r5,r5,r7 ; a highpart zero appears negative\n+\tsub.f r5,r5,mlo ; rest msw\n+\tadd.pl.f DBL0L,DBL0L,1\n+\tj_s.d [blink]\n+\tadd.eq DBL0H,DBL0H,1\n+\n+.Linf_nan_dbl0:\n+\ttst_s DBL1H,DBL1H\n+\tj_s.d [blink]\n+\tbxor.mi DBL0H,DBL0H,31\n+\t.balign 4\n+.Linf_denorm:\n+\tlsr r12,r6,28\n+\tbrlo.d r12,0xc,.Linf\n+.Ldenorm:\n+\tasr r6,r6,20\n+\tneg r9,r6\n+\tmov_s DBL0H,0\n+\tbrhs.d r9,54,.Lret0\n+\tbxor.mi DBL0H,DBL0H,31\n+\tadd r12,mhi,1\n+\tand r12,r12,-4\n+\trsub r7,r6,5\n+\tasr r10,r12,28\n+\tbmsk r4,r12,27\n+\tmin r7,r7,31\n+\tasr DBL0L,r4,r7\n+\tadd DBL1H,r11,r10\n+\tabs.f r10,r4\n+\tsub.mi r10,r10,1\n+\tadd.f r7,r6,32-5\n+\tasl r4,r4,r7\n+\tmov.mi r4,r10\n+\tadd.f r10,r6,23\n+\trsub r7,r6,9\n+\tlsr r7,DBL1H,r7\n+\tasl r10,DBL1H,r10\n+\tor.pnz DBL0H,DBL0H,r7\n+\tor.mi r4,r4,r10\n+\tmov.mi r10,r7\n+\tadd.f DBL0L,r10,DBL0L\n+\tadd.cs.f DBL0H,DBL0H,1 ; carry clear after this point\n+\tbxor.f 0,r4,31\n+\tadd.pnz.f DBL0L,DBL0L,1\n+\tadd.cs.f DBL0H,DBL0H,1\n+\tjne_s [blink]\n+\t/* Calculation so far was not conclusive; calculate further rest.  */\n+\tmulu64 (r11,DBL1L) ; rest before considering r12 in r5 : -mlo\n+\tasr.f r12,r12,3\n+\tasl r5,r5,25 ; s-51.7:25\n+\tmov r11,mlo ; rest before considering r12 in r5 : -r11\n+\tmulu64 (r12,r8) ; u-51.31:1\n+\tand r9,DBL0L,1 ; tie-breaker: round to even\n+\tlsr r11,r11,7 ; u-51.30:2\n+\tmov DBL1H,mlo ; u-51.31:1\n+\tmulu64 (r12,DBL1L) ; u-51.62:2\n+\tsub.mi r11,r11,DBL1L ; signed multiply adjust for r12*DBL1L\n+\tadd_s DBL1H,DBL1H,r11\n+\tsub DBL1H,DBL1H,r5 ; -rest msw\n+\tadd_s DBL1H,DBL1H,mhi ; -rest msw\n+\tadd.f 0,DBL1H,DBL1H ; can't ror.f by 32 :-(\n+\ttst_s DBL1H,DBL1H\n+\tcmp.eq mlo,r9\n+\tadd.cs.f DBL0L,DBL0L,1\n+\tj_s.d [blink]\n+\tadd.cs DBL0H,DBL0H,1\n+\n+.Lret0:\n+\t/* return +- 0 */\n+\tj_s.d [blink]\n+\tmov_s DBL0L,0\n+.Linf:\n+\tmov_s DBL0H,r9\n+\tmov_s DBL0L,0\n+\tj_s.d [blink]\n+\tbxor.mi DBL0H,DBL0H,31\n+\tENDFUNC(__divdf3)"}, {"sha": "4135f3ec5b3d56c47c774da4b44e0e05b0648a9e", "filename": "libgcc/config/arc/ieee-754/arc600-dsp/divsf3.S", "status": "added", "additions": 274, "deletions": 0, "changes": 274, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600-dsp%2Fdivsf3.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600-dsp%2Fdivsf3.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600-dsp%2Fdivsf3.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,274 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/*\n+   - calculate 15..18 bit inverse using a table of approximating polynoms.\n+     precision is higher for polynoms used to evaluate input with larger\n+     value.\n+   - do one newton-raphson iteration step to double the precision,\n+     then multiply this with the divisor\n+\t-> more time to decide if dividend is subnormal\n+     - the worst error propagation is on the side of the value range\n+       with the least initial defect, thus giving us about 30 bits precision.\n+ */\n+#include \"../arc-ieee-754.h\"\n+#define mlo acc2\n+#define mhi acc1\n+#define mul64(b,c) mullw 0,b,c` machlw 0,b,c\n+#define mulu64(b,c) mululw 0,b,c` machulw 0,b,c\n+\n+#if 0 /* DEBUG */\n+\t.global __divsf3\n+\tFUNC(__divsf3)\n+\t.balign 4\n+__divsf3:\n+\tpush_s blink\n+\tpush_s r1\n+\tbl.d __divsf3_c\n+\tpush_s r0\n+\tld_s r1,[sp,4]\n+\tst_s r0,[sp,4]\n+\tbl.d __divsf3_asm\n+\tpop_s r0\n+\tpop_s r1\n+\tpop_s blink\n+\tcmp r0,r1\n+#if 1\n+\tbne abort\n+\tjeq_s [blink]\n+\tb abort\n+#else\n+\tbne abort\n+\tj_s [blink]\n+#endif\n+\tENDFUNC(__divsf3)\n+#define __divsf3 __divsf3_asm\n+#endif /* DEBUG */\n+\n+\tFUNC(__divsf3)\n+\t.balign 4\n+.Ldivtab:\n+\t.long 0xfc0ffff0\n+\t.long 0xf46ffefd\n+\t.long 0xed1ffd2a\n+\t.long 0xe627fa8e\n+\t.long 0xdf7ff73b\n+\t.long 0xd917f33b\n+\t.long 0xd2f7eea3\n+\t.long 0xcd1fe986\n+\t.long 0xc77fe3e7\n+\t.long 0xc21fdddb\n+\t.long 0xbcefd760\n+\t.long 0xb7f7d08c\n+\t.long 0xb32fc960\n+\t.long 0xae97c1ea\n+\t.long 0xaa27ba26\n+\t.long 0xa5e7b22e\n+\t.long 0xa1cfa9fe\n+\t.long 0x9ddfa1a0\n+\t.long 0x9a0f990c\n+\t.long 0x9667905d\n+\t.long 0x92df878a\n+\t.long 0x8f6f7e84\n+\t.long 0x8c27757e\n+\t.long 0x88f76c54\n+\t.long 0x85df630c\n+\t.long 0x82e759c5\n+\t.long 0x8007506d\n+\t.long 0x7d3f470a\n+\t.long 0x7a8f3da2\n+\t.long 0x77ef341e\n+\t.long 0x756f2abe\n+\t.long 0x72f7212d\n+\t.long 0x709717ad\n+\t.long 0x6e4f0e44\n+\t.long 0x6c1704d6\n+\t.long 0x69e6fb44\n+\t.long 0x67cef1d7\n+\t.long 0x65c6e872\n+\t.long 0x63cedf18\n+\t.long 0x61e6d5cd\n+\t.long 0x6006cc6d\n+\t.long 0x5e36c323\n+\t.long 0x5c76b9f3\n+\t.long 0x5abeb0b7\n+\t.long 0x5916a79b\n+\t.long 0x57769e77\n+\t.long 0x55de954d\n+\t.long 0x54568c4e\n+\t.long 0x52d6834d\n+\t.long 0x51667a7f\n+\t.long 0x4ffe71b5\n+\t.long 0x4e9e68f1\n+\t.long 0x4d466035\n+\t.long 0x4bf65784\n+\t.long 0x4aae4ede\n+\t.long 0x496e4646\n+\t.long 0x48363dbd\n+\t.long 0x47063547\n+\t.long 0x45de2ce5\n+\t.long 0x44be2498\n+\t.long 0x43a61c64\n+\t.long 0x4296144a\n+\t.long 0x41860c0e\n+\t.long 0x407e03ee\n+.L7f800000:\n+\t.long 0x7f800000\n+\t.balign 4\n+\t.global __divsf3_support\n+__divsf3_support:\n+.Linf_NaN:\n+\tbclr.f 0,r0,31 ; 0/0 -> NaN\n+\txor_s r0,r0,r1\n+\tbmsk r1,r0,30\n+\tbic_s r0,r0,r1\n+\tsub.eq r0,r0,1\n+\tj_s.d [blink]\n+\tor r0,r0,r9\n+.Lret0:\n+\txor_s r0,r0,r1\n+\tbmsk r1,r0,30\n+\tj_s.d [blink]\n+\tbic_s r0,r0,r1\n+/* N.B. the spacing between divtab and the sub3 to get its address must\n+   be a multiple of 8.  */\n+__divsf3:\n+\tld.as r9,[pcl,-9]; [pcl,(-((.-.L7f800000) >> 2))] ; 0x7f800000\n+\tsub3 r3,pcl,37;(.-.Ldivtab) >> 3\n+\tlsr r2,r1,17\n+\tand.f r11,r1,r9\n+\tbmsk r5,r2,5\n+\tbeq.d .Ldenorm_fp1\n+\tasl r6,r1,8\n+\tand.f r2,r0,r9\n+\tld.as r5,[r3,r5]\n+\tasl r4,r1,9\n+\tbset r6,r6,31\n+\tbreq.d r11,r9,.Linf_nan_fp1\n+.Lpast_denorm_fp1:\n+\tmululw 0,r5,r4\n+\tmachulw r8,r5,r4\n+\tbreq.d r2,r9,.Linf_nan_fp0\n+\tasl r5,r5,13\n+\tsub r7,r5,r8\n+\tmululw 0,r7,r6\n+\tmachulw r8,r7,r6\n+\tbeq.d .Ldenorm_fp0\n+\tasl r12,r0,8\n+\tmulu64 (r8,r7)\n+\tbset r3,r12,31\n+.Lpast_denorm_fp0:\n+\tcmp_s r3,r6\n+\tlsr.cc r3,r3,1\n+\tadd_s r2,r2, /* wait for immediate */ \\\n+\t\t0x3f000000\n+\tsub r7,r7,mhi ; u1.31 inverse, about 30 bit\n+\tmulu64 (r3,r7)\n+\tsbc r2,r2,r11\n+\txor.f 0,r0,r1\n+\tand r0,r2,r9\n+\tbclr r3,r9,23 ; 0x7f000000\n+\tbrhs.d r2,r3,.Linf_denorm\n+\tbxor.mi r0,r0,31\n+.Lpast_denorm:\n+\tadd r3,mhi,0x22 ; round to nearest or higher\n+\ttst r3,0x3c ; check if rounding was unsafe\n+\tlsr r3,r3,6\n+\tjne.d [blink] ; return if rounding was safe.\n+\tadd_s r0,r0,r3\n+        /* work out exact rounding if we fall through here.  */\n+        /* We know that the exact result cannot be represented in single\n+           precision.  Find the mid-point between the two nearest\n+           representable values, multiply with the divisor, and check if\n+           the result is larger than the dividend.  */\n+        add_s r3,r3,r3\n+        sub_s r3,r3,1\n+        mulu64 (r3,r6)\n+\tasr.f 0,r0,1 ; for round-to-even in case this is a denorm\n+\trsub r2,r9,25\n+        asl_s r12,r12,r2\n+        sub.f 0,r12,mlo\n+        j_s.d [blink]\n+        sub.mi r0,r0,1\n+.Linf_nan_fp1:\n+\tlsr_s r0,r0,31\n+\tbmsk.f 0,r1,22\n+\tasl_s r0,r0,31\n+\tbne_s 0f ; inf/inf -> nan\n+\tbrne r2,r9,.Lsigned0 ; x/inf -> 0, but x/nan -> nan\n+0:\tj_s.d [blink]\n+\tmov r0,-1\n+.Lsigned0:\n+.Linf_nan_fp0:\n+\ttst_s r1,r1\n+\tj_s.d [blink]\n+\tbxor.mi r0,r0,31\n+\t.balign 4\n+\t.global __divsf3\n+/* For denormal results, it is possible that an exact result needs\n+   rounding, and thus the round-to-even rule has to come into play.  */\n+.Linf_denorm:\n+\tbrlo r2,0xc0000000,.Linf\n+.Ldenorm:\n+\tasr_s r2,r2,23\n+\tbic r0,r0,r9\n+\tneg r9,r2\n+\tbrlo.d r9,25,.Lpast_denorm\n+\tlsr r3,mlo,r9\n+\t/* Fall through: return +- 0 */\n+\tj_s [blink]\n+.Linf:\n+\tj_s.d [blink]\n+\tor r0,r0,r9\n+\t.balign 4\n+.Ldenorm_fp1:\n+\tnorm.f r12,r6 ; flag for x/0 -> Inf check\n+\tadd r6,r6,r6\n+\trsub r5,r12,16\n+\tror r5,r1,r5\n+\tbmsk r5,r5,5\n+\tbic.ne.f 0, \\\n+\t\t0x60000000,r0 ; large number / denorm -> Inf\n+\tld.as r5,[r3,r5]\n+\tasl r6,r6,r12\n+\tbeq.d .Linf_NaN\n+\tand.f r2,r0,r9\n+\tadd r4,r6,r6\n+\tasl_s r12,r12,23\n+\tbne.d .Lpast_denorm_fp1\n+\tadd_s r2,r2,r12\n+.Ldenorm_fp0:\n+\tmulu64 (r8,r7)\n+\tbclr r12,r12,31\n+\tnorm.f r3,r12 ; flag for 0/x -> 0 check\n+\tbic.ne.f 0,0x60000000,r1 ; denorm/large number -> 0\n+\tbeq_s .Lret0\n+\tasl_s r12,r12,r3\n+\tasl_s r3,r3,23\n+\tadd_s r12,r12,r12\n+\tadd r11,r11,r3\n+\tb.d .Lpast_denorm_fp0\n+\tmov_s r3,r12\n+\tENDFUNC(__divsf3)"}, {"sha": "0c21317e6ce9af9b435e5ba3618ea6a6b71f505c", "filename": "libgcc/config/arc/ieee-754/arc600-dsp/muldf3.S", "status": "added", "additions": 231, "deletions": 0, "changes": 231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600-dsp%2Fmuldf3.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600-dsp%2Fmuldf3.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600-dsp%2Fmuldf3.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,231 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"../arc-ieee-754.h\"\n+\n+#if 0 /* DEBUG */\n+\t.global __muldf3\n+\t.balign 4\n+__muldf3:\n+\tpush_s blink\n+\tpush_s r2\n+\tpush_s r3\n+\tpush_s r0\n+\tbl.d __muldf3_c\n+\tpush_s r1\n+\tld_s r2,[sp,12]\n+\tld_s r3,[sp,8]\n+\tst_s r0,[sp,12]\n+\tst_s r1,[sp,8]\n+\tpop_s r1\n+\tbl.d __muldf3_asm\n+\tpop_s r0\n+\tpop_s r3\n+\tpop_s r2\n+\tpop_s blink\n+\tcmp r0,r2\n+\tcmp.eq r1,r3\n+\tjeq_s [blink]\n+\tb abort\n+#define __muldf3 __muldf3_asm\n+#endif /* DEBUG */\n+\n+__muldf3_support: /* This label makes debugger output saner.  */\n+\t.balign 4\n+\tFUNC(__muldf3)\n+.Ldenorm_2:\n+\tbreq.d DBL1L,0,.Lret0_2 ; 0 input -> 0 output\n+\tnorm.f r12,DBL1L\n+\tmov.mi r12,21\n+\tadd.pl r12,r12,22\n+\tneg r11,r12\n+\tasl_s r12,r12,20\n+\tlsr.f DBL1H,DBL1L,r11\n+\tror DBL1L,DBL1L,r11\n+\tsub_s DBL0H,DBL0H,r12\n+\tmov.eq DBL1H,DBL1L\n+\tsub_l DBL1L,DBL1L,DBL1H\n+\t/* Fall through.  */\n+\t.global __muldf3\n+\t.balign 4\n+__muldf3:\n+\tmululw 0,DBL0L,DBL1L\n+\tmachulw r4,DBL0L,DBL1L\n+\tld.as r9,[pcl,0x67] ; ((.L7ff00000-.+2)/4)]\n+\tbmsk r6,DBL0H,19\n+\tbset r6,r6,20\n+\tmov r8,acc2\n+\tmululw 0,r4,1\n+\tand r11,DBL0H,r9\n+\tbreq.d r11,0,.Ldenorm_dbl0\n+\tand r12,DBL1H,r9\n+\tbreq.d r12,0,.Ldenorm_dbl1\n+\tmaclw 0,r6,DBL1L\n+\tmachulw 0,r6,DBL1L\n+\tbreq.d r11,r9,.Linf_nan\n+\tbmsk r10,DBL1H,19\n+\tbreq.d r12,r9,.Linf_nan\n+\tbset r10,r10,20\n+\tmaclw 0,r10,DBL0L\n+\tmachulw r5,r10,DBL0L\n+\tadd_s r12,r12,r11 ; add exponents\n+\tmov r4,acc2\n+\tmululw 0,r5,1\n+\tmaclw 0,r6,r10\n+\tmachulw r7,r6,r10 ; fraction product in r7:acc2:r4:r8\n+\ttst r8,r8\n+\tbclr r8,r9,30 ; 0x3ff00000\n+\tbset.ne r4,r4,0 ; put least significant word into sticky bit\n+\tbclr r6,r9,20 ; 0x7fe00000\n+\tlsr.f r10,r7,9\n+\trsub.eq r8,r8,r9 ; 0x40000000\n+\tsub r12,r12,r8 ; subtract bias + implicit 1\n+\tbrhs.d r12,r6,.Linf_denorm\n+\trsub r10,r10,12\n+.Lshift_frac:\n+\tneg r8,r10\n+\tasl r6,r4,r10\n+\tlsr DBL0L,r4,r8\n+\tadd.f 0,r6,r6\n+\tbtst.eq DBL0L,0\n+\tcmp.eq r4,r4 ; round to nearest / round to even\n+\tasl r4,acc2,r10\n+\tlsr r5,acc2,r8\n+\tadc.f DBL0L,DBL0L,r4\n+\txor.f 0,DBL0H,DBL1H\n+\tasl r7,r7,r10\n+\tadd_s r12,r12,r5\n+\tadc DBL0H,r12,r7\n+\tj_s.d [blink]\n+\tbset.mi DBL0H,DBL0H,31\n+\n+/* N.B. This is optimized for ARC700.\n+  ARC600 has very different scheduling / instruction selection criteria.  */\n+\n+/* If one number is denormal, subtract some from the exponent of the other\n+   one (if the other exponent is too small, return 0), and normalize the\n+   denormal.  Then re-run the computation.  */\n+.Lret0_2:\n+\tlsr_s DBL0H,DBL0H,31\n+\tasl_s DBL0H,DBL0H,31\n+\tj_s.d [blink]\n+\tmov_s DBL0L,0\n+\t.balign 4\n+.Ldenorm_dbl0:\n+\tmov_s r12,DBL0L\n+\tmov_s DBL0L,DBL1L\n+\tmov_s DBL1L,r12\n+\tmov_s r12,DBL0H\n+\tmov_s DBL0H,DBL1H\n+\tmov_s DBL1H,r12\n+\tand r11,DBL0H,r9\n+.Ldenorm_dbl1:\n+\tbrhs r11,r9,.Linf_nan\n+\tbrhs 0x3ca00001,r11,.Lret0\n+\tsub_s DBL0H,DBL0H,DBL1H\n+\tbmsk.f DBL1H,DBL1H,30\n+\tadd_s DBL0H,DBL0H,DBL1H\n+\tbeq.d .Ldenorm_2\n+\tnorm r12,DBL1H\n+\tsub_s r12,r12,10\n+\tasl r5,r12,20\n+\tasl_s DBL1H,DBL1H,r12\n+\tsub DBL0H,DBL0H,r5\n+\tneg r5,r12\n+\tlsr r6,DBL1L,r5\n+\tasl_s DBL1L,DBL1L,r12\n+\tb.d __muldf3\n+\tadd_s DBL1H,DBL1H,r6\n+\n+.Lret0:\txor_s DBL0H,DBL0H,DBL1H\n+\tbclr DBL1H,DBL0H,31\n+\txor_s DBL0H,DBL0H,DBL1H\n+\tj_s.d [blink]\n+\tmov_s DBL0L,0\n+\n+\t.balign 4\n+.Linf_nan:\n+\tbclr r12,DBL1H,31\n+\txor_s DBL1H,DBL1H,DBL0H\n+\tbclr_s DBL0H,DBL0H,31\n+\tmax r8,DBL0H,r12 ; either NaN -> NaN ; otherwise inf\n+\tor.f 0,DBL0H,DBL0L\n+\tmov_s DBL0L,0\n+\tor.ne.f DBL1L,DBL1L,r12\n+\tnot_s DBL0H,DBL0L ; inf * 0 -> NaN\n+\tmov.ne DBL0H,r8\n+\ttst_s DBL1H,DBL1H\n+\tj_s.d [blink]\n+\tbset.mi DBL0H,DBL0H,31\n+\n+/* We have checked for infinitey / NaN input before, and transformed\n+   denormalized inputs into normalized inputs.  Thus, the worst case\n+   exponent overflows are:\n+       1 +     1 - 0x400 == 0xc02 : maximum underflow\n+   0x7fe + 0x7fe - 0x3ff == 0xbfd ; maximum overflow\n+   N.B. 0x7e and 0x7f are also values for overflow.\n+\n+   If (r12 <= -54), we have an underflow to zero.  */\n+\t.balign 4\n+.Linf_denorm:\n+\tlsr r6,r12,28\n+\tbrlo.d r6,0xc,.Linf\n+\tasr r6,r12,20\n+\tadd.f r10,r10,r6\n+\tbrgt.d r10,0,.Lshift_frac\n+\tmov_s r12,0\n+\tbeq.d .Lround_frac\n+\tadd r10,r10,32\n+.Lshift32_frac:\n+\ttst r4,r4\n+\tmov r4,acc2\n+\tbset.ne r4,r4,1\n+\tmululw 0,r7,1\n+\tbrge.d r10,1,.Lshift_frac\n+\tmov r7,0\n+\tbreq.d r10,0,.Lround_frac\n+\tadd r10,r10,32\n+\tbrgt r10,21,.Lshift32_frac\n+\tb_s .Lret0\n+\n+.Lround_frac:\n+\tadd.f 0,r4,r4\n+\tbtst.eq acc2,0\n+\tmov_s DBL0L,acc2\n+\tmov_s DBL0H,r7\n+\tadc.eq.f DBL0L,DBL0L,0\n+\tj_s.d [blink]\n+\tadc.eq DBL0H,DBL0H,0\n+\n+.Linf:\tmov_s DBL0L,0\n+\txor.f DBL1H,DBL1H,DBL0H\n+\tmov_s DBL0H,r9\n+\tj_s.d [blink]\n+\tbset.mi DBL0H,DBL0H,31\n+\tENDFUNC(__muldf3)\n+\n+\t.balign 4\n+.L7ff00000:\n+\t.long 0x7ff00000"}, {"sha": "b826cd95409f78f1d14e330d0a9347d38c79228e", "filename": "libgcc/config/arc/ieee-754/arc600-dsp/mulsf3.S", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600-dsp%2Fmulsf3.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600-dsp%2Fmulsf3.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600-dsp%2Fmulsf3.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,176 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"../arc-ieee-754.h\"\n+\n+#if 0 /* DEBUG */\n+\t.global __mulsf3\n+\tFUNC(__mulsf3)\n+\t.balign 4\n+__mulsf3:\n+\tpush_s blink\n+\tpush_s r1\n+\tbl.d __mulsf3_c\n+\tpush_s r0\n+\tld_s r1,[sp,4]\n+\tst_s r0,[sp,4]\n+\tbl.d __mulsf3_asm\n+\tpop_s r0\n+\tpop_s r1\n+\tpop_s blink\n+\tcmp r0,r1\n+\tjeq_s [blink]\n+\tand r12,r0,r1\n+\tbic.f 0,0x7f800000,r12\n+\tbne 0f\n+\tbmsk.f 0,r0,22\n+\tbmsk.ne.f r1,r1,22\n+\tjne_s [blink] ; both NaN -> OK\n+0:\tbl abort\n+\tENDFUNC(__mulsf3)\n+#define __mulsf3 __mulsf3_asm\n+#endif /* DEBUG */\n+\n+\t.balign\t4\n+\t.global\t__mulsf3\n+\tFUNC(__mulsf3)\n+__mulsf3:\n+\tld.as\tr9,[pcl,80]; [pcl,((.L7f800000-.+2)/4)]\n+\tbmsk\tr4,r1,22\n+\tbset\tr2,r0,23\n+\tasl_s\tr2,r2,8\n+\tbset\tr3,r4,23\n+\tand\tr11,r0,r9\n+\tbreq.d\tr11,0,.Ldenorm_dbl0\n+\tand\tr12,r1,r9\n+\tbreq.d\tr12,0,.Ldenorm_dbl1\n+\txor_s\tr0,r0,r1\n+\tmululw\t0,r2,r3\n+\tmachulw\tr6,r2,r3\n+\tbreq.d\tr11,r9,.Linf_nan_dbl0\n+\tld.as\tr4,[pcl,69]; [pcl,((.L7fffffff-.+2)/4)]\n+\tbreq.d\tr12,r9,.Linf_nan_dbl1\n+.Lpast_denorm:\n+\tasl.f\t0,r6,8\n+\tmov\tr7,acc2\n+\tadd.pl\tr6,r6,r6\n+\tbclr.pl\tr6,r6,23\n+\tadd.pl.f r7,r7,r7\n+\tadd.cs\tr6,r6,1\n+\tlsr.f\t0,r6,1\n+\tadd_s\tr12,r12,r11\n+\tadc.f\t0,r7,r4\n+\tadd_s\tr12,r12, \\\n+\t\t-0x3f800000\n+\tadc.f\tr8,r6,r12\n+\ttst.pl\tr8,r9\n+\tbic\tr0,r0,r4\n+\tmin\tr3,r8,r9\n+\tjpnz.d\t[blink]\n+\tadd.pnz\tr0,r0,r3\n+; infinity or denormal number\n+\tadd.ne.f r3,r3,r3\n+\tasr_s\tr3,r3,23+1\n+\tbset\tr6,r6,23\n+\tbpnz.d\t.Linfinity\n+\tsub_s\tr3,r3,1\n+\tneg_s\tr2,r3\n+\tbrhi.d\tr2,24,.Lret_r0 ; right shift shift > 24 -> return +-0\n+\tlsr\tr2,r6,r2\n+\tasl\tr9,r6,r3\n+\tlsr.f\t0,r2,1\n+\ttst\tr7,r7\n+\tadd_s\tr0,r0,r2\n+\tbset.ne\tr9,r9,0\n+\tadc.f\t0,r9,r4\n+\tj_s.d\t[blink]\n+\tadd.cs\tr0,r0,1\n+.Linfinity:\n+\tj_s.d\t[blink]\n+\tadd_s\tr0,r0,r9\n+\n+.Lret_r0: j_s [blink]\n+\n+\t.balign\t4\n+.Ldenorm_dbl0:\n+\tbclr_s\tr2,r2,31\n+\tnorm.f\tr4,r2\n+\tadd_s\tr2,r2,r2\n+\tasl\tr2,r2,r4\n+\tbreq.d\tr12,r9,.Ldenorm_dbl0_inf_nan_dbl1\n+\tasl\tr4,r4,23\n+\tmululw\t0,r2,r3\n+\tmachulw\tr6,r2,r3\n+\tsub.ne.f r12,r12,r4\n+\tld.as\tr4,[pcl,28]; [pcl,((.L7fffffff-.+2)/4)]\n+\tbhi.d\t.Lpast_denorm\n+\txor_s\tr0,r0,r1\n+\tbmsk\tr1,r0,30\n+\tj_s.d\t[blink]\n+\tbic_s\tr0,r0,r1\n+\n+\t.balign\t4\n+.Ldenorm_dbl0_inf_nan_dbl1:\n+\tbmsk.f\t0,r0,30\n+\tmov.eq\tr1,-1\n+.Linf_nan_dbl1:\n+\txor_s\tr1,r1,r0\n+.Linf_nan_dbl0:\n+\tbclr_s\tr1,r1,31\n+\tj_s.d\t[blink]\n+\txor_s\tr0,r0,r1\n+\n+\t.balign\t4\n+.Ldenorm_dbl1:\n+\tbreq.d\tr11,r9,.Linf_nan_dbl0_2\n+\tnorm.f\tr3,r4\n+\tsub_s\tr3,r3,7\n+\tasl\tr4,r4,r3\n+\tmululw\t0,r2,r4\n+\tmachulw\tr6,r2,r4\n+\tsub_s\tr3,r3,1\n+\tasl_s\tr3,r3,23\n+\tsub.ne.f r11,r11,r3\n+\tld.as\tr4,[pcl,11]; [pcl,((.L7fffffff-.+2)/4)]\n+\tbhi.d\t.Lpast_denorm\n+\tbmsk\tr8,r0,30\n+\tj_s.d\t[blink]\n+\tbic\tr0,r0,r8\n+\n+\t.balign\t4\n+.Linf_nan_dbl0_2:\n+\tbclr_s\tr1,r1,31\n+\txor_s\tr0,r0,r1\n+\tsub.eq\tr1,r1,1 ; inf/nan * 0 -> nan\n+\tbic.f\t0,r9,r1\n+\tj_s.d\t[blink]\n+\tor.eq\tr0,r0,r1 ; r1 nan -> result nan\n+\n+\t.balign\t4\n+.L7f800000:\n+\t.long\t0x7f800000\n+.L7fffffff:\n+\t.long\t0x7fffffff\n+\tENDFUNC(__mulsf3)"}, {"sha": "b058344fd97888ea3ae9a72cfe5224e2e129de30", "filename": "libgcc/config/arc/ieee-754/arc600-mul64/divdf3.S", "status": "added", "additions": 410, "deletions": 0, "changes": 410, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600-mul64%2Fdivdf3.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600-mul64%2Fdivdf3.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600-mul64%2Fdivdf3.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,410 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/*\n+   to calculate a := b/x as b*y, with y := 1/x:\n+   - x is in the range [1..2)\n+   - calculate 15..18 bit inverse y0 using a table of approximating polynoms.\n+     Precision is higher for polynoms used to evaluate input with larger\n+     value.\n+   - Do one newton-raphson iteration step to double the precision,\n+     then multiply this with the divisor\n+\t-> more time to decide if dividend is subnormal\n+     - the worst error propagation is on the side of the value range\n+       with the least initial defect, thus giving us about 30 bits precision.\n+      The truncation error for the either is less than 1 + x/2 ulp.\n+      A 31 bit inverse can be simply calculated by using x with implicit 1\n+      and chaining the multiplies.  For a 32 bit inverse, we multiply y0^2\n+      with the bare fraction part of x, then add in y0^2 for the implicit\n+      1 of x.\n+    - If calculating a 31 bit inverse, the systematic error is less than\n+      -1 ulp; likewise, for 32 bit, it is less than -2 ulp.\n+    - If we calculate our seed with a 32 bit fraction, we can archive a\n+      tentative result strictly better than -2 / +2.5 (1) ulp/128, i.e. we\n+      only need to take the step to calculate the 2nd stage rest and\n+      rounding adjust 1/32th of the time.  However, if we use a 20 bit\n+      fraction for the seed, the negative error can exceed -2 ulp/128, (2)\n+      thus for a simple add / tst check, we need to do the 2nd stage\n+      rest calculation/ rounding adjust 1/16th of the time.\n+      (1): The inexactness of the 32 bit inverse contributes an error in the\n+      range of (-1 .. +(1+x/2) ) ulp/128.  Leaving out the low word of the\n+      rest contributes an error < +1/x ulp/128 .  In the interval [1,2),\n+      x/2 + 1/x <= 1.5 .\n+      (2): Unless proven otherwise.  I have not actually looked for an\n+      example where -2 ulp/128 is exceeded, and my calculations indicate\n+      that the excess, if existent, is less than -1/512 ulp.\n+    ??? The algorithm is still based on the ARC700 optimized code.\n+    Maybe we could make better use of 64 bit multiply results and/or mmed .\n+ */\n+#include \"../arc-ieee-754.h\"\n+\n+/* N.B. fp-bit.c does double rounding on denormal numbers.  */\n+#if 0 /* DEBUG */\n+\t.global __divdf3\n+\tFUNC(__divdf3)\n+\t.balign 4\n+__divdf3:\n+\tpush_s blink\n+\tpush_s r2\n+\tpush_s r3\n+\tpush_s r0\n+\tbl.d __divdf3_c\n+\tpush_s r1\n+\tld_s r2,[sp,12]\n+\tld_s r3,[sp,8]\n+\tst_s r0,[sp,12]\n+\tst_s r1,[sp,8]\n+\tpop_s r1\n+\tbl.d __divdf3_asm\n+\tpop_s r0\n+\tpop_s r3\n+\tpop_s r2\n+\tpop_s blink\n+\tcmp r0,r2\n+\tcmp.eq r1,r3\n+\tjeq_s [blink]\n+\tand r12,DBL0H,DBL1H\n+\tbic.f 0,0x7ff80000,r12 ; both NaN -> OK\n+\tjeq_s [blink]\n+\tbl abort\n+\tENDFUNC(__divdf3)\n+#define __divdf3 __divdf3_asm\n+#endif /* DEBUG */\n+\n+\tFUNC(__divdf3)\n+\t.balign 4\n+.L7ff00000:\n+\t.long 0x7ff00000\n+.Ldivtab:\n+\t.long 0xfc0fffe1\n+\t.long 0xf46ffdfb\n+\t.long 0xed1ffa54\n+\t.long 0xe61ff515\n+\t.long 0xdf7fee75\n+\t.long 0xd91fe680\n+\t.long 0xd2ffdd52\n+\t.long 0xcd1fd30c\n+\t.long 0xc77fc7cd\n+\t.long 0xc21fbbb6\n+\t.long 0xbcefaec0\n+\t.long 0xb7efa100\n+\t.long 0xb32f92bf\n+\t.long 0xae8f83b7\n+\t.long 0xaa2f7467\n+\t.long 0xa5ef6479\n+\t.long 0xa1cf53fa\n+\t.long 0x9ddf433e\n+\t.long 0x9a0f3216\n+\t.long 0x965f2091\n+\t.long 0x92df0f11\n+\t.long 0x8f6efd05\n+\t.long 0x8c1eeacc\n+\t.long 0x88eed876\n+\t.long 0x85dec615\n+\t.long 0x82eeb3b9\n+\t.long 0x800ea10b\n+\t.long 0x7d3e8e0f\n+\t.long 0x7a8e7b3f\n+\t.long 0x77ee6836\n+\t.long 0x756e5576\n+\t.long 0x72fe4293\n+\t.long 0x709e2f93\n+\t.long 0x6e4e1c7f\n+\t.long 0x6c0e095e\n+\t.long 0x69edf6c5\n+\t.long 0x67cde3a5\n+\t.long 0x65cdd125\n+\t.long 0x63cdbe25\n+\t.long 0x61ddab3f\n+\t.long 0x600d991f\n+\t.long 0x5e3d868c\n+\t.long 0x5c6d7384\n+\t.long 0x5abd615f\n+\t.long 0x590d4ecd\n+\t.long 0x576d3c83\n+\t.long 0x55dd2a89\n+\t.long 0x545d18e9\n+\t.long 0x52dd06e9\n+\t.long 0x516cf54e\n+\t.long 0x4ffce356\n+\t.long 0x4e9cd1ce\n+\t.long 0x4d3cbfec\n+\t.long 0x4becae86\n+\t.long 0x4aac9da4\n+\t.long 0x496c8c73\n+\t.long 0x483c7bd3\n+\t.long 0x470c6ae8\n+\t.long 0x45dc59af\n+\t.long 0x44bc4915\n+\t.long 0x43ac3924\n+\t.long 0x428c27fb\n+\t.long 0x418c187a\n+\t.long 0x407c07bd\n+\n+__divdf3_support: /* This label makes debugger output saner.  */\n+\t.balign 4\n+.Ldenorm_dbl1:\n+\tbrge r6, \\\n+\t\t0x43500000,.Linf_NaN ; large number / denorm -> Inf\n+\tbmsk.f r12,DBL1H,19\n+\tmov.eq r12,DBL1L\n+\tmov.eq DBL1L,0\n+\tsub.eq r7,r7,32\n+\tnorm.f r11,r12 ; flag for x/0 -> Inf check\n+\tbeq_s .Linf_NaN\n+\tmov.mi r11,0\n+\tadd.pl r11,r11,1\n+\tadd_s r12,r12,r12\n+\tasl r8,r12,r11\n+\trsub r12,r11,31\n+\tlsr r12,DBL1L,r12\n+\ttst_s DBL1H,DBL1H\n+\tor r8,r8,r12\n+\tlsr r4,r8,26\n+\tlsr DBL1H,r8,12\n+\tld.as r4,[r10,r4]\n+\tbxor.mi DBL1H,DBL1H,31\n+\tsub r11,r11,11\n+\tasl DBL1L,DBL1L,r11\n+\tsub r11,r11,1\n+\tmulu64 r4,r8\n+\tsub r7,r7,r11\n+\tb.d .Lpast_denorm_dbl1\n+\tasl r7,r7,20\n+\n+\t.balign 4\n+.Ldenorm_dbl0:\n+\tbmsk.f r12,DBL0H,19\n+\t; wb stall\n+\tmov.eq r12,DBL0L\n+\tsub.eq r6,r6,32\n+\tnorm.f r11,r12 ; flag for 0/x -> 0 check\n+\tbrge r7, \\\n+\t\t0x43500000, .Lret0_2 ; denorm/large number -> 0\n+\tbeq_s .Lret0_2\n+\tmov.mi r11,0\n+\tadd.pl r11,r11,1\n+\tasl r12,r12,r11\n+\tsub r6,r6,r11\n+\tadd.f 0,r6,31\n+\tlsr r10,DBL0L,r6\n+\tmov.mi r10,0\n+\tadd r6,r6,11+32\n+\tneg.f r11,r6\n+\tasl DBL0L,DBL0L,r11\n+\tmov.pl DBL0L,0\n+\tsub r6,r6,32-1\n+\tb.d .Lpast_denorm_dbl0\n+\tasl r6,r6,20\n+\n+.Linf_NaN:\n+\ttst_s DBL0L,DBL0L ; 0/0 -> NaN\n+\txor_s DBL1H,DBL1H,DBL0H\n+\tbclr.eq.f DBL0H,DBL0H,31\n+\tbmsk DBL0H,DBL1H,30\n+\txor_s DBL0H,DBL0H,DBL1H\n+\tsub.eq DBL0H,DBL0H,1\n+\tmov_s DBL0L,0\n+\tj_s.d [blink]\n+\tor DBL0H,DBL0H,r9\n+\t.balign 4\n+.Lret0_2:\n+\txor_s DBL1H,DBL1H,DBL0H\n+\tmov_s DBL0L,0\n+\tbmsk DBL0H,DBL1H,30\n+\tj_s.d [blink]\n+\txor_s DBL0H,DBL0H,DBL1H\n+\t.balign 4\n+\t.global __divdf3\n+/* N.B. the spacing between divtab and the sub3 to get its address must\n+   be a multiple of 8.  */\n+__divdf3:\n+\tasl r8,DBL1H,12\n+\tlsr r4,r8,26\n+\tsub3 r10,pcl,61; (.-.Ldivtab) >> 3\n+\tld.as r9,[pcl,-124]; [pcl,(-((.-.L7ff00000) >> 2))] ; 0x7ff00000\n+\tld.as r4,[r10,r4]\n+\tlsr r12,DBL1L,20\n+\tand.f r7,DBL1H,r9\n+\tor r8,r8,r12\n+\tmulu64 r4,r8\n+\tbeq.d .Ldenorm_dbl1\n+.Lpast_denorm_dbl1:\n+\tand.f r6,DBL0H,r9\n+\tbreq.d r7,r9,.Linf_nan_dbl1\n+\tasl r4,r4,12\n+\tsub r4,r4,mhi\n+\tmulu64 r4,r4\n+\tbeq.d .Ldenorm_dbl0\n+\tlsr r8,r8,1\n+\tbreq.d r6,r9,.Linf_nan_dbl0\n+\tasl r12,DBL0H,11\n+\tlsr r10,DBL0L,21\n+.Lpast_denorm_dbl0:\n+\tbset r8,r8,31\n+\tmulu64 mhi,r8\n+\tadd_s r12,r12,r10\n+\tbset r5,r12,31\n+\tcmp r5,r8\n+\tcmp.eq DBL0L,DBL1L\n+\tlsr.cc r5,r5,1\n+\tsub r4,r4,mhi ; u1.31 inverse, about 30 bit\n+\tmulu64 r5,r4 ; result fraction highpart\n+\tlsr r8,r8,2 ; u3.29\n+\tadd r5,r6, /* wait for immediate */ \\\n+\t\t0x3fe00000\n+\tmov r11,mhi ; result fraction highpart\n+\tmulu64 r11,r8 ; u-28.31\n+\tasl_s DBL1L,DBL1L,9 ; u-29.23:9\n+\tsbc r6,r5,r7\n+\tmov r12,mlo ; u-28.31\n+\tmulu64 r11,DBL1L ; mhi: u-28.23:9\n+\tadd.cs DBL0L,DBL0L,DBL0L\n+\tasl_s DBL0L,DBL0L,6 ; u-26.25:7\n+\tasl r10,r11,23\n+\tsub_l DBL0L,DBL0L,r12\n+\tlsr r7,r11,9\n+\tsub r5,DBL0L,mhi ; rest msw ; u-26.31:0\n+\tmul64 r5,r4 ; mhi: result fraction lowpart\n+\txor.f 0,DBL0H,DBL1H\n+\tand DBL0H,r6,r9\n+\tadd_s DBL0H,DBL0H,r7\n+\tbclr r12,r9,20 ; 0x7fe00000\n+\tbrhs.d r6,r12,.Linf_denorm\n+\tbxor.mi DBL0H,DBL0H,31\n+\tadd.f r12,mhi,0x11\n+\tasr r9,r12,5\n+\tsub.mi DBL0H,DBL0H,1\n+\tadd.f DBL0L,r9,r10\n+\ttst r12,0x1c\n+\tjne.d [blink]\n+\tadd.cs DBL0H,DBL0H,1\n+        /* work out exact rounding if we fall through here.  */\n+        /* We know that the exact result cannot be represented in double\n+           precision.  Find the mid-point between the two nearest\n+           representable values, multiply with the divisor, and check if\n+           the result is larger than the dividend.  Since we want to know\n+\t   only the sign bit, it is sufficient to calculate only the\n+\t   highpart of the lower 64 bits.  */\n+\tmulu64 r11,DBL1L ; rest before considering r12 in r5 : -mlo\n+\tsub.f DBL0L,DBL0L,1\n+\tasl r12,r9,2 ; u-22.30:2\n+\tsub.cs DBL0H,DBL0H,1\n+\tsub.f r12,r12,2\n+\tmov r10,mlo ; rest before considering r12 in r5 : -r10\n+\tmulu64 r12,DBL1L ; mhi: u-51.32\n+\tasl r5,r5,25 ; s-51.7:25\n+\tlsr r10,r10,7 ; u-51.30:2\n+\tmov r7,mhi ; u-51.32\n+\tmulu64 r12,r8 ; mlo: u-51.31:1\n+\tsub r5,r5,r10\n+\tadd.mi r5,r5,DBL1L ; signed multiply adjust for r12*DBL1L\n+\tbset r7,r7,0 ; make sure that the result is not zero, and that\n+\tsub r5,r5,r7 ; a highpart zero appears negative\n+\tsub.f r5,r5,mlo ; rest msw\n+\tadd.pl.f DBL0L,DBL0L,1\n+\tj_s.d [blink]\n+\tadd.eq DBL0H,DBL0H,1\n+\n+.Linf_nan_dbl1: ; 0/Inf -> NaN Inf/Inf -> NaN x/Inf-> 0 x/NaN -> NaN\n+\tor.f 0,r6,DBL0L\n+\tcmp.ne r6,r9\n+\tnot_s DBL0L,DBL1H\n+\tsub_s.ne DBL0L,DBL0L,DBL0L\n+\ttst_s DBL0H,DBL0H\n+\tadd_s DBL0H,DBL1H,DBL0L\n+\tj_s.d [blink]\n+\tbxor.mi DBL0H,DBL0H,31\n+.Linf_nan_dbl0:\n+\ttst_s DBL1H,DBL1H\n+\tj_s.d [blink]\n+\tbxor.mi DBL0H,DBL0H,31\n+\t.balign 4\n+.Linf_denorm:\n+\tlsr r12,r6,28\n+\tbrlo.d r12,0xc,.Linf\n+.Ldenorm:\n+\tasr r6,r6,20\n+\tneg r9,r6\n+\tmov_s DBL0H,0\n+\tbrhs.d r9,54,.Lret0\n+\tbxor.mi DBL0H,DBL0H,31\n+\tadd r12,mhi,1\n+\tand r12,r12,-4\n+\trsub r7,r6,5\n+\tasr r10,r12,28\n+\tbmsk r4,r12,27\n+\tmin r7,r7,31\n+\tasr DBL0L,r4,r7\n+\tadd DBL1H,r11,r10\n+\tabs.f r10,r4\n+\tsub.mi r10,r10,1\n+\tadd.f r7,r6,32-5\n+\tasl r4,r4,r7\n+\tmov.mi r4,r10\n+\tadd.f r10,r6,23\n+\trsub r7,r6,9\n+\tlsr r7,DBL1H,r7\n+\tasl r10,DBL1H,r10\n+\tor.pnz DBL0H,DBL0H,r7\n+\tor.mi r4,r4,r10\n+\tmov.mi r10,r7\n+\tadd.f DBL0L,r10,DBL0L\n+\tadd.cs.f DBL0H,DBL0H,1 ; carry clear after this point\n+\tbxor.f 0,r4,31\n+\tadd.pnz.f DBL0L,DBL0L,1\n+\tadd.cs.f DBL0H,DBL0H,1\n+\tjne_s [blink]\n+\t/* Calculation so far was not conclusive; calculate further rest.  */\n+\tmulu64 r11,DBL1L ; rest before considering r12 in r5 : -mlo\n+\tasr.f r12,r12,3\n+\tasl r5,r5,25 ; s-51.7:25\n+\tmov r11,mlo ; rest before considering r12 in r5 : -r11\n+\tmulu64 r12,r8 ; u-51.31:1\n+\tand r9,DBL0L,1 ; tie-breaker: round to even\n+\tlsr r11,r11,7 ; u-51.30:2\n+\tmov DBL1H,mlo ; u-51.31:1\n+\tmulu64 r12,DBL1L ; u-51.62:2\n+\tsub.mi r11,r11,DBL1L ; signed multiply adjust for r12*DBL1L\n+\tadd_s DBL1H,DBL1H,r11\n+\tsub DBL1H,DBL1H,r5 ; -rest msw\n+\tadd_s DBL1H,DBL1H,mhi ; -rest msw\n+\tadd.f 0,DBL1H,DBL1H ; can't ror.f by 32 :-(\n+\ttst_s DBL1H,DBL1H\n+\tcmp.eq mlo,r9\n+\tadd.cs.f DBL0L,DBL0L,1\n+\tj_s.d [blink]\n+\tadd.cs DBL0H,DBL0H,1\n+\n+.Lret0:\n+\t/* return +- 0 */\n+\tj_s.d [blink]\n+\tmov_s DBL0L,0\n+.Linf:\n+\tmov_s DBL0H,r9\n+\tmov_s DBL0L,0\n+\tj_s.d [blink]\n+\tbxor.mi DBL0H,DBL0H,31\n+\tENDFUNC(__divdf3)"}, {"sha": "67d96b0fabf5042a9638f1b4adcbb5e55a5199bc", "filename": "libgcc/config/arc/ieee-754/arc600-mul64/divsf3.S", "status": "added", "additions": 274, "deletions": 0, "changes": 274, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600-mul64%2Fdivsf3.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600-mul64%2Fdivsf3.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600-mul64%2Fdivsf3.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,274 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/*\n+   - calculate 15..18 bit inverse using a table of approximating polynoms.\n+     precision is higher for polynoms used to evaluate input with larger\n+     value.\n+   - do one newton-raphson iteration step to double the precision,\n+     then multiply this with the divisor\n+\t-> more time to decide if dividend is subnormal\n+     - the worst error propagation is on the side of the value range\n+       with the least initial defect, thus giving us about 30 bits precision.\n+ */\n+#include \"../arc-ieee-754.h\"\n+\n+#if 0 /* DEBUG */\n+\t.global __divsf3\n+\tFUNC(__divsf3)\n+\t.balign 4\n+__divsf3:\n+\tpush_s blink\n+\tpush_s r1\n+\tbl.d __divsf3_c\n+\tpush_s r0\n+\tld_s r1,[sp,4]\n+\tst_s r0,[sp,4]\n+\tbl.d __divsf3_asm\n+\tpop_s r0\n+\tpop_s r1\n+\tpop_s blink\n+\tcmp r0,r1\n+#if 1\n+\tbne abort\n+\tjeq_s [blink]\n+\tb abort\n+#else\n+\tbne abort\n+\tj_s [blink]\n+#endif\n+\tENDFUNC(__divsf3)\n+#define __divsf3 __divsf3_asm\n+#endif /* DEBUG */\n+\n+\tFUNC(__divsf3)\n+\t.balign 4\n+.Ldivtab:\n+\t.long 0xfc0ffff0\n+\t.long 0xf46ffefd\n+\t.long 0xed1ffd2a\n+\t.long 0xe627fa8e\n+\t.long 0xdf7ff73b\n+\t.long 0xd917f33b\n+\t.long 0xd2f7eea3\n+\t.long 0xcd1fe986\n+\t.long 0xc77fe3e7\n+\t.long 0xc21fdddb\n+\t.long 0xbcefd760\n+\t.long 0xb7f7d08c\n+\t.long 0xb32fc960\n+\t.long 0xae97c1ea\n+\t.long 0xaa27ba26\n+\t.long 0xa5e7b22e\n+\t.long 0xa1cfa9fe\n+\t.long 0x9ddfa1a0\n+\t.long 0x9a0f990c\n+\t.long 0x9667905d\n+\t.long 0x92df878a\n+\t.long 0x8f6f7e84\n+\t.long 0x8c27757e\n+\t.long 0x88f76c54\n+\t.long 0x85df630c\n+\t.long 0x82e759c5\n+\t.long 0x8007506d\n+\t.long 0x7d3f470a\n+\t.long 0x7a8f3da2\n+\t.long 0x77ef341e\n+\t.long 0x756f2abe\n+\t.long 0x72f7212d\n+\t.long 0x709717ad\n+\t.long 0x6e4f0e44\n+\t.long 0x6c1704d6\n+\t.long 0x69e6fb44\n+\t.long 0x67cef1d7\n+\t.long 0x65c6e872\n+\t.long 0x63cedf18\n+\t.long 0x61e6d5cd\n+\t.long 0x6006cc6d\n+\t.long 0x5e36c323\n+\t.long 0x5c76b9f3\n+\t.long 0x5abeb0b7\n+\t.long 0x5916a79b\n+\t.long 0x57769e77\n+\t.long 0x55de954d\n+\t.long 0x54568c4e\n+\t.long 0x52d6834d\n+\t.long 0x51667a7f\n+\t.long 0x4ffe71b5\n+\t.long 0x4e9e68f1\n+\t.long 0x4d466035\n+\t.long 0x4bf65784\n+\t.long 0x4aae4ede\n+\t.long 0x496e4646\n+\t.long 0x48363dbd\n+\t.long 0x47063547\n+\t.long 0x45de2ce5\n+\t.long 0x44be2498\n+\t.long 0x43a61c64\n+\t.long 0x4296144a\n+\t.long 0x41860c0e\n+\t.long 0x407e03ee\n+.L7f800000:\n+\t.long 0x7f800000\n+\t.balign 4\n+\t.global __divsf3_support\n+__divsf3_support:\n+.Linf_NaN:\n+\tbclr.f 0,r0,31 ; 0/0 -> NaN\n+\txor_s r0,r0,r1\n+\tbmsk r1,r0,30\n+\tbic_s r0,r0,r1\n+\tsub.eq r0,r0,1\n+\tj_s.d [blink]\n+\tor r0,r0,r9\n+.Lret0:\n+\txor_s r0,r0,r1\n+\tbmsk r1,r0,30\n+\tj_s.d [blink]\n+\tbic_s r0,r0,r1\n+/* N.B. the spacing between divtab and the sub3 to get its address must\n+   be a multiple of 8.  */\n+__divsf3:\n+\tlsr r2,r1,17\n+\tsub3 r3,pcl,37 ; (.-.Ldivtab) >> 3\n+\tbmsk_s r2,r2,5\n+\tld.as r5,[r3,r2]\n+\tasl r4,r1,9\n+\tld.as r9,[pcl,-13]; [pcl,(-((.-.L7f800000) >> 2))] ; 0x7f800000\n+\tmulu64 r5,r4\n+\tand.f r11,r1,r9\n+\tasl r6,r1,8\n+\tbset r6,r6,31\n+\tbeq.d .Ldenorm_fp1\n+\tasl r5,r5,13\n+\tbreq.d r11,r9,.Linf_nan_fp1\n+\tand.f r2,r0,r9\n+\tsub r7,r5,mhi\n+\tmulu64 r7,r6\n+\tbeq.d .Ldenorm_fp0\n+\tasl r12,r0,8\n+\tbreq.d r2,r9,.Linf_nan_fp0\n+\tmulu64 mhi,r7\n+.Lpast_denorm_fp1:\n+\tbset r3,r12,31\n+.Lpast_denorm_fp0:\n+\tcmp_s r3,r6\n+\tlsr.cc r3,r3,1\n+\tadd_s r2,r2, /* wait for immediate */ \\\n+\t\t0x3f000000\n+\tsub r7,r7,mhi ; u1.31 inverse, about 30 bit\n+\tmulu64 r3,r7\n+\tsbc r2,r2,r11\n+\txor.f 0,r0,r1\n+\tand r0,r2,r9\n+\tbclr r3,r9,23 ; 0x7f000000\n+\tbrhs.d r2,r3,.Linf_denorm\n+\tbxor.mi r0,r0,31\n+.Lpast_denorm:\n+\tadd r3,mhi,0x22 ; round to nearest or higher\n+\ttst r3,0x3c ; check if rounding was unsafe\n+\tlsr r3,r3,6\n+\tjne.d [blink] ; return if rounding was safe.\n+\tadd_s r0,r0,r3\n+        /* work out exact rounding if we fall through here.  */\n+        /* We know that the exact result cannot be represented in single\n+           precision.  Find the mid-point between the two nearest\n+           representable values, multiply with the divisor, and check if\n+           the result is larger than the dividend.  */\n+        add_s r3,r3,r3\n+        sub_s r3,r3,1\n+        mulu64 r3,r6\n+\tasr.f 0,r0,1 ; for round-to-even in case this is a denorm\n+\trsub r2,r9,25\n+        asl_s r12,r12,r2\n+        sub.f 0,r12,mlo\n+        j_s.d [blink]\n+        sub.mi r0,r0,1\n+.Linf_nan_fp1:\n+\tlsr_s r0,r0,31\n+\tbmsk.f 0,r1,22\n+\tasl_s r0,r0,31\n+\tbne_s 0f ; inf/inf -> nan\n+\tbrne r2,r9,.Lsigned0 ; x/inf -> 0, but x/nan -> nan\n+0:\tj_s.d [blink]\n+\tmov r0,-1\n+.Lsigned0:\n+.Linf_nan_fp0:\n+\ttst_s r1,r1\n+\tj_s.d [blink]\n+\tbxor.mi r0,r0,31\n+\t.balign 4\n+\t.global __divsf3\n+/* For denormal results, it is possible that an exact result needs\n+   rounding, and thus the round-to-even rule has to come into play.  */\n+.Linf_denorm:\n+\tbrlo r2,0xc0000000,.Linf\n+.Ldenorm:\n+\tasr_s r2,r2,23\n+\tbic r0,r0,r9\n+\tneg r9,r2\n+\tbrlo.d r9,25,.Lpast_denorm\n+\tlsr r3,mlo,r9\n+\t/* Fall through: return +- 0 */\n+\tj_s [blink]\n+.Linf:\n+\tj_s.d [blink]\n+\tor r0,r0,r9\n+\t.balign 4\n+.Ldenorm_fp1:\n+\tbclr r6,r6,31\n+\tnorm.f r12,r6 ; flag for x/0 -> Inf check\n+\tadd r6,r6,r6\n+\trsub r5,r12,16\n+\tror r5,r1,r5\n+\tasl r6,r6,r12\n+\tbmsk r5,r5,5\n+\tld.as r5,[r3,r5]\n+\tadd r4,r6,r6\n+\t; load latency\n+\tmulu64 r5,r4\n+\tbic.ne.f 0, \\\n+\t\t0x60000000,r0 ; large number / denorm -> Inf\n+\tasl r5,r5,13\n+\tsub r7,r5,mhi\n+\tbeq.d .Linf_NaN\n+\tmulu64 r7,r6\n+\tasl_s r12,r12,23\n+\tand.f r2,r0,r9\n+\tadd_s r2,r2,r12\n+\tasl r12,r0,8\n+\tbne.d .Lpast_denorm_fp1\n+.Ldenorm_fp0: mulu64 mhi,r7\n+\tbclr r12,r12,31\n+\tnorm.f r3,r12 ; flag for 0/x -> 0 check\n+\tbic.ne.f 0,0x60000000,r1 ; denorm/large number -> 0\n+\tbeq_s .Lret0\n+\tasl_s r12,r12,r3\n+\tasl_s r3,r3,23\n+\tadd_s r12,r12,r12\n+\tadd r11,r11,r3\n+\tb.d .Lpast_denorm_fp0\n+\tmov_s r3,r12\n+\tENDFUNC(__divsf3)"}, {"sha": "358636d0985e7fc8c61d84c508e1a13988e36ee4", "filename": "libgcc/config/arc/ieee-754/arc600-mul64/muldf3.S", "status": "added", "additions": 234, "deletions": 0, "changes": 234, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600-mul64%2Fmuldf3.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600-mul64%2Fmuldf3.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600-mul64%2Fmuldf3.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,234 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"../arc-ieee-754.h\"\n+\n+#if 0 /* DEBUG */\n+\t.global __muldf3\n+\t.balign 4\n+__muldf3:\n+\tpush_s blink\n+\tpush_s r2\n+\tpush_s r3\n+\tpush_s r0\n+\tbl.d __muldf3_c\n+\tpush_s r1\n+\tld_s r2,[sp,12]\n+\tld_s r3,[sp,8]\n+\tst_s r0,[sp,12]\n+\tst_s r1,[sp,8]\n+\tpop_s r1\n+\tbl.d __muldf3_asm\n+\tpop_s r0\n+\tpop_s r3\n+\tpop_s r2\n+\tpop_s blink\n+\tcmp r0,r2\n+\tcmp.eq r1,r3\n+\tjeq_s [blink]\n+\tand r12,DBL0H,DBL1H\n+\tbic.f 0,0x7ff80000,r12 ; both NaN -> OK\n+\tjeq_s [blink]\n+\tb abort\n+#define __muldf3 __muldf3_asm\n+#endif /* DEBUG */\n+\n+__muldf3_support: /* This label makes debugger output saner.  */\n+\t.balign 4\n+\tFUNC(__muldf3)\n+.Ldenorm_2:\n+\tbreq.d DBL1L,0,.Lret0_2 ; 0 input -> 0 output\n+\tnorm.f r12,DBL1L\n+\tmov.mi r12,21\n+\tadd.pl r12,r12,22\n+\tneg r11,r12\n+\tasl_s r12,r12,20\n+\tlsr.f DBL1H,DBL1L,r11\n+\tror DBL1L,DBL1L,r11\n+\tsub_s DBL0H,DBL0H,r12\n+\tmov.eq DBL1H,DBL1L\n+\tsub_l DBL1L,DBL1L,DBL1H\n+\t/* Fall through.  */\n+\t.global __muldf3\n+\t.balign 4\n+__muldf3:\n+\tmulu64 DBL0L,DBL1L\n+\tld.as r9,[pcl,0x68] ; ((.L7ff00000-.+2)/4)]\n+\tbmsk r6,DBL0H,19\n+\tbset r6,r6,20\n+\tand r11,DBL0H,r9\n+\tbreq.d r11,0,.Ldenorm_dbl0\n+\tand r12,DBL1H,r9\n+\tbreq.d r12,0,.Ldenorm_dbl1\n+\tmov r8,mlo\n+\tmov r4,mhi\n+\tmulu64 r6,DBL1L\n+\tbreq.d r11,r9,.Linf_nan\n+\tbmsk r10,DBL1H,19\n+\tbreq.d r12,r9,.Linf_nan\n+\tbset r10,r10,20\n+\tadd.f r4,r4,mlo\n+\tadc r5,mhi,0\n+\tmulu64 r10,DBL0L\n+\tadd_s r12,r12,r11 ; add exponents\n+\tadd.f r4,r4,mlo\n+\tadc r5,r5,mhi\n+\tmulu64 r6,r10\n+\ttst r8,r8\n+\tbclr r8,r9,30 ; 0x3ff00000\n+\tbset.ne r4,r4,0 ; put least significant word into sticky bit\n+\tbclr r6,r9,20 ; 0x7fe00000\n+\tadd.f r5,r5,mlo\n+\tadc r7,mhi,0 ; fraction product in r7:r5:r4\n+\tlsr.f r10,r7,9\n+\trsub.eq r8,r8,r9 ; 0x40000000\n+\tsub r12,r12,r8 ; subtract bias + implicit 1\n+\tbrhs.d r12,r6,.Linf_denorm\n+\trsub r10,r10,12\n+.Lshift_frac:\n+\tneg r8,r10\n+\tasl r6,r4,r10\n+\tlsr DBL0L,r4,r8\n+\tadd.f 0,r6,r6\n+\tbtst.eq DBL0L,0\n+\tcmp.eq r4,r4 ; round to nearest / round to even\n+\tasl r4,r5,r10\n+\tlsr r5,r5,r8\n+\tadc.f DBL0L,DBL0L,r4\n+\txor.f 0,DBL0H,DBL1H\n+\tasl r7,r7,r10\n+\tadd_s r12,r12,r5\n+\tadc DBL0H,r12,r7\n+\tj_s.d [blink]\n+\tbset.mi DBL0H,DBL0H,31\n+\n+/* N.B. This is optimized for ARC700.\n+  ARC600 has very different scheduling / instruction selection criteria.  */\n+\n+/* If one number is denormal, subtract some from the exponent of the other\n+   one (if the other exponent is too small, return 0), and normalize the\n+   denormal.  Then re-run the computation.  */\n+.Lret0_2:\n+\tlsr_s DBL0H,DBL0H,31\n+\tasl_s DBL0H,DBL0H,31\n+\tj_s.d [blink]\n+\tmov_s DBL0L,0\n+\t.balign 4\n+.Ldenorm_dbl0:\n+\tmov_s r12,DBL0L\n+\tmov_s DBL0L,DBL1L\n+\tmov_s DBL1L,r12\n+\tmov_s r12,DBL0H\n+\tmov_s DBL0H,DBL1H\n+\tmov_s DBL1H,r12\n+\tand r11,DBL0H,r9\n+.Ldenorm_dbl1:\n+\tbrhs r11,r9,.Linf_nan\n+\tbrhs 0x3ca00001,r11,.Lret0\n+\tsub_s DBL0H,DBL0H,DBL1H\n+\tbmsk.f DBL1H,DBL1H,30\n+\tadd_s DBL0H,DBL0H,DBL1H\n+\tbeq.d .Ldenorm_2\n+\tnorm r12,DBL1H\n+\tsub_s r12,r12,10\n+\tasl r5,r12,20\n+\tasl_s DBL1H,DBL1H,r12\n+\tsub DBL0H,DBL0H,r5\n+\tneg r5,r12\n+\tlsr r6,DBL1L,r5\n+\tasl_s DBL1L,DBL1L,r12\n+\tb.d __muldf3\n+\tadd_s DBL1H,DBL1H,r6\n+\n+.Lret0:\txor_s DBL0H,DBL0H,DBL1H\n+\tbclr DBL1H,DBL0H,31\n+\txor_s DBL0H,DBL0H,DBL1H\n+\tj_s.d [blink]\n+\tmov_s DBL0L,0\n+\n+\t.balign 4\n+.Linf_nan:\n+\tbclr r12,DBL1H,31\n+\txor_s DBL1H,DBL1H,DBL0H\n+\tbclr_s DBL0H,DBL0H,31\n+\tmax r8,DBL0H,r12 ; either NaN -> NaN ; otherwise inf\n+\tor.f 0,DBL0H,DBL0L\n+\tmov_s DBL0L,0\n+\tor.ne.f DBL1L,DBL1L,r12\n+\tnot_s DBL0H,DBL0L ; inf * 0 -> NaN\n+\tmov.ne DBL0H,r8\n+\ttst_s DBL1H,DBL1H\n+\tj_s.d [blink]\n+\tbset.mi DBL0H,DBL0H,31\n+\n+/* We have checked for infinitey / NaN input before, and transformed\n+   denormalized inputs into normalized inputs.  Thus, the worst case\n+   exponent overflows are:\n+       1 +     1 - 0x400 == 0xc02 : maximum underflow\n+   0x7fe + 0x7fe - 0x3ff == 0xbfd ; maximum overflow\n+   N.B. 0x7e and 0x7f are also values for overflow.\n+\n+   If (r12 <= -54), we have an underflow to zero.  */\n+\t.balign 4\n+.Linf_denorm:\n+\tlsr r6,r12,28\n+\tbrlo.d r6,0xc,.Linf\n+\tasr r6,r12,20\n+\tadd.f r10,r10,r6\n+\tbrgt.d r10,0,.Lshift_frac\n+\tmov_s r12,0\n+\tbeq.d .Lround_frac\n+\tadd r10,r10,32\n+.Lshift32_frac:\n+\ttst r4,r4\n+\tmov r4,r5\n+\tbset.ne r4,r4,1\n+\tmov r5,r7\n+\tbrge.d r10,1,.Lshift_frac\n+\tmov r7,0\n+\tbreq.d r10,0,.Lround_frac\n+\tadd r10,r10,32\n+\tbrgt r10,21,.Lshift32_frac\n+\tb_s .Lret0\n+\n+.Lround_frac:\n+\tadd.f 0,r4,r4\n+\tbtst.eq r5,0\n+\tmov_s DBL0L,r5\n+\tmov_s DBL0H,r7\n+\tadc.eq.f DBL0L,DBL0L,0\n+\tj_s.d [blink]\n+\tadc.eq DBL0H,DBL0H,0\n+\n+.Linf:\tmov_s DBL0L,0\n+\txor.f DBL1H,DBL1H,DBL0H\n+\tmov_s DBL0H,r9\n+\tj_s.d [blink]\n+\tbset.mi DBL0H,DBL0H,31\n+\tENDFUNC(__muldf3)\n+\n+\t.balign 4\n+.L7ff00000:\n+\t.long 0x7ff00000"}, {"sha": "619662491b2ed735c3e71a75d5c5e5e381a6dff0", "filename": "libgcc/config/arc/ieee-754/arc600-mul64/mulsf3.S", "status": "added", "additions": 180, "deletions": 0, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600-mul64%2Fmulsf3.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600-mul64%2Fmulsf3.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600-mul64%2Fmulsf3.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,180 @@\n+/* Copyright (C) 2008-2013 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"../arc-ieee-754.h\"\n+\n+#if 0 /* DEBUG */\n+\t.global __mulsf3\n+\tFUNC(__mulsf3)\n+\t.balign 4\n+__mulsf3:\n+\tpush_s blink\n+\tpush_s r1\n+\tbl.d __mulsf3_c\n+\tpush_s r0\n+\tld_s r1,[sp,4]\n+\tst_s r0,[sp,4]\n+\tbl.d __mulsf3_asm\n+\tpop_s r0\n+\tpop_s r1\n+\tpop_s blink\n+\tcmp r0,r1\n+\tjeq_s [blink]\n+\tand r12,r0,r1\n+\tbic.f 0,0x7f800000,r12\n+\tbne 0f\n+\tbmsk.f 0,r0,22\n+\tbmsk.ne.f r1,r1,22\n+\tjne_s [blink] ; both NaN -> OK\n+0:\tbl abort\n+\tENDFUNC(__mulsf3)\n+#define __mulsf3 __mulsf3_asm\n+#endif /* DEBUG */\n+\n+\t.balign\t4\n+\t.global\t__mulsf3\n+\tFUNC(__mulsf3)\n+__mulsf3:\n+\tld.as\tr9,[pcl,80]; [pcl,((.L7f800000-.+2)/4)]\n+\tbmsk\tr4,r1,22\n+\tbset\tr2,r0,23\n+\tasl_s\tr2,r2,8\n+\tbset\tr3,r4,23\n+\tmulu64\tr2,r3\n+\tand\tr11,r0,r9\n+\tbreq.d\tr11,0,.Ldenorm_dbl0\n+\tand\tr12,r1,r9\n+\tbreq.d\tr12,0,.Ldenorm_dbl1\n+\txor_s\tr0,r0,r1\n+\tbreq.d\tr11,r9,.Linf_nan_dbl0\n+\tld.as\tr4,[pcl,70]; [pcl,((.L7fffffff-.+2)/4)]\n+\tbreq.d\tr12,r9,.Linf_nan_dbl1\n+.Lpast_denorm:\n+\tasl.f\t0,mhi,8\n+\tmov\tr6,mhi\n+\tmov\tr7,mlo\n+\tadd.pl\tr6,r6,r6\n+\tbclr.pl\tr6,r6,23\n+\tadd.pl.f r7,r7,r7\n+\tadd.cs\tr6,r6,1\n+\tlsr.f\t0,r6,1\n+\tadd_s\tr12,r12,r11\n+\tadc.f\t0,r7,r4\n+\tadd_s\tr12,r12, \\\n+\t\t-0x3f800000\n+\tadc.f\tr8,r6,r12\n+\ttst.pl\tr8,r9\n+\tbic\tr0,r0,r4\n+\tmin\tr3,r8,r9\n+\tjpnz.d\t[blink]\n+\tadd.pnz\tr0,r0,r3\n+; infinity or denormal number\n+\tadd.ne.f r3,r3,r3\n+\tasr_s\tr3,r3,23+1\n+\tbset\tr6,r6,23\n+\tbpnz.d\t.Linfinity\n+\tsub_s\tr3,r3,1\n+\tneg_s\tr2,r3\n+\tbrhi.d\tr2,24,.Lret_r0 ; right shift shift > 24 -> return +-0\n+\tlsr\tr2,r6,r2\n+\tasl\tr9,r6,r3\n+\tlsr.f\t0,r2,1\n+\ttst\tr7,r7\n+\tadd_s\tr0,r0,r2\n+\tbset.ne\tr9,r9,0\n+\tadc.f\t0,r9,r4\n+\tj_s.d\t[blink]\n+\tadd.cs\tr0,r0,1\n+.Linfinity:\n+\tj_s.d\t[blink]\n+\tadd_s\tr0,r0,r9\n+\n+.Lret_r0: j_s [blink]\n+\n+\t.balign\t4\n+.Ldenorm_dbl0:\n+\tbclr_s\tr2,r2,31\n+\tnorm.f\tr4,r2\n+\tadd_s\tr2,r2,r2\n+\tasl\tr2,r2,r4\n+\tmulu64\tr2,r3\n+\tbreq.d\tr12,r9,.Ldenorm_dbl0_inf_nan_dbl1\n+\tasl\tr4,r4,23\n+\tsub.ne.f r12,r12,r4\n+\tld.as\tr4,[pcl,29]; [pcl,((.L7fffffff-.+2)/4)]\n+\tbhi.d\t.Lpast_denorm\n+\txor_s\tr0,r0,r1\n+\tbmsk\tr1,r0,30\n+\tj_s.d\t[blink]\n+\tbic_s\tr0,r0,r1\n+\n+\t.balign\t4\n+.Ldenorm_dbl0_inf_nan_dbl1:\n+\tbmsk.f\t0,r0,30\n+\tbeq_s\t.Lretnan\n+\txor_s\tr0,r0,r1\n+.Linf_nan_dbl1:\n+\txor_s\tr1,r1,r0\n+.Linf_nan_dbl0:\n+\tbclr_s\tr1,r1,31\n+\tcmp_s\tr1,r9\n+\tjls.d\t[blink]\n+\txor_s\tr0,r0,r1\n+; r1 NaN -> result NaN\n+.Lretnan:\n+\tj_s.d [blink]\n+\tmov r0,-1\n+\n+\t.balign\t4\n+.Ldenorm_dbl1:\n+\tbreq.d\tr11,r9,.Linf_nan_dbl0_2\n+\tnorm.f\tr3,r4\n+\tsub_s\tr3,r3,7\n+\tasl\tr4,r4,r3\n+\tmulu64\tr2,r4\n+\tsub_s\tr3,r3,1\n+\tasl_s\tr3,r3,23\n+\tsub.ne.f r11,r11,r3\n+\tld.as\tr4,[pcl,11]; [pcl,((.L7fffffff-.+2)/4)]\n+\tbhi.d\t.Lpast_denorm\n+\tbmsk\tr8,r0,30\n+\tj_s.d\t[blink]\n+\tbic\tr0,r0,r8\n+\n+\t.balign\t4\n+.Linf_nan_dbl0_2:\n+\tbclr_s\tr1,r1,31\n+\txor_s\tr0,r0,r1\n+\tsub.eq\tr1,r1,1 ; inf/nan * 0 -> nan\n+\tbic.f\t0,r9,r1\n+\tj_s.d\t[blink]\n+\tor.eq\tr0,r0,r1 ; r1 nan -> result nan\n+\n+\t.balign\t4\n+.L7f800000:\n+\t.long\t0x7f800000\n+.L7fffffff:\n+\t.long\t0x7fffffff\n+\tENDFUNC(__mulsf3)"}, {"sha": "7fcbadbe086220daa5c10985980f6faa55ea853d", "filename": "libgcc/config/arc/ieee-754/arc600/divsf3.S", "status": "added", "additions": 227, "deletions": 0, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600%2Fdivsf3.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600%2Fdivsf3.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600%2Fdivsf3.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,227 @@\n+/* Copyright (C) 2008-2013 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"../arc-ieee-754.h\"\n+\n+#if 0 /* DEBUG */\n+\t.global __divsf3\n+\tFUNC(__divsf3)\n+\t.balign 4\n+__divsf3:\n+\tpush_s blink\n+\tpush_s r1\n+\tbl.d __divsf3_c\n+\tpush_s r0\n+\tld_s r1,[sp,4]\n+\tst_s r0,[sp,4]\n+\tbl.d __divsf3_asm\n+\tpop_s r0\n+\tpop_s r1\n+\tpop_s blink\n+\tcmp r0,r1\n+        jeq_s [blink]\n+        and r12,r0,r1\n+        bic.f 0,0x7f800000,r12 ; both NaN -> OK\n+        jeq_s [blink]\n+        bl abort\n+\tENDFUNC(__divsf3)\n+#define __divsf3 __divsf3_asm\n+#endif /* DEBUG */\n+\n+\t.balign 4\n+__divdf3_support: /* This label makes debugger output saner.  */\n+\tFUNC(__divsf3)\n+.Ldenorm_fp0:\n+\tnorm.f r12,r2 ; flag for 0/x -> 0 check\n+\tbic.ne.f 0,0x60000000,r1 ; denorm/large number -> 0\n+\tbeq_s .Lret0_NaN\n+\ttst r1,r9\n+\tadd_s r2,r2,r2\n+\tsub_s r12,r12,8\n+\tasl_s r2,r2,r12\n+\tasl_l r12,r12,23\n+\tbne.d .Lpast_denorm_fp0\n+\tadd r5,r5,r12\n+/* r0 is subnormal, r1 is subnormal or 0.  */\n+\n+\t.balign 4\n+.Ldenorm_fp1:\n+\tnorm.f r12,r3 ; flag for  x/0 -> Inf check\n+\tbic.ne.f 0,0x60000000,r0 ; large number/denorm -> Inf\n+\tbeq_s .Linf\n+\tadd_s r3,r3,r3\n+\tsub_s r12,r12,8\n+\tasl_s r3,r3,r12\n+\tasl_s r12,r12,23\n+\tb.d .Lpast_denorm_fp1\n+\tadd r4,r4,r12\n+\n+.Lret0_NaN:\n+\tbclr.f 0,r1,31 ; 0/0 -> NaN\n+\tbic r0,r10,r9\n+\tj_s.d [blink]\n+\tsub.eq r0,r0,1\n+\n+\t.balign 4\n+.Linf_nan_fp0:\n+\tbic.f 0,r9,r1 ; fp1 Inf -> result NaN\n+\tbic r1,r5,r9  ; fp1 sign\n+\tsub.eq r1,r1,1\n+\tj_s.d [blink]\n+\txor_s r0,r0,r1\n+.Linf_nan_fp1:\n+\tbic r0,r4,r9 ; fp0 sign\n+\tbmsk.f 0,r1,22 ; x/inf -> 0, x/nan -> nan\n+\txor.eq r1,r1,r9\n+\tj_s.d [blink]\n+\txor_s r0,r0,r1\n+\n+\t.global __divsf3\n+\t.balign 4\n+        .long 0x7f800000 ; exponent mask\n+__divsf3:\n+\tld r9,[pcl,-4]\n+\tbmsk r2,r0,22\n+\txor r4,r0,r2\n+\tbmsk r3,r1,22\n+\txor r5,r1,r3\n+\tand r11,r0,r9\n+\tbreq.d r11,0,.Ldenorm_fp0\n+\txor r10,r4,r5\n+\tbreq r11,r9,.Linf_nan_fp0\n+\tbset_s r2,r2,23\n+\tand r11,r1,r9\n+\tbreq r11,0,.Ldenorm_fp1\n+\tbreq r11,r9,.Linf_nan_fp1\n+.Lpast_denorm_fp0:\n+\tbset_s r3,r3,23\n+.Lpast_denorm_fp1:\n+\tcmp r2,r3\n+\tasl_s r2,r2,6+1\n+\tasl_s r3,r3,7\n+\tadd.lo r2,r2,r2\n+\tbclr r8,r9,30 ; exponent bias\n+\tbclr.lo r8,r8,23 ; reduce exp by one if fraction is shifted\n+\tsub r4,r4,r5\n+\tadd r4,r4,r8\n+\txor.f 0,r10,r4\n+\tbmi .Linf_denorm\n+\tand.f r12,r4,r9\n+\tbeq .Ldenorm\n+\tsub_s r2,r2,r3 ; discard implicit 1\n+\trsub r3,r3,1 ; prime r3 for two-insn divide-step use\n+.Ldiv_23bit:\n+\t.rep 6\n+\tadd1.f r2,r3,r2\n+\tsub.cc r2,r2,r3\n+\t.endr\n+\tbreq r12,r9,.Linf\n+\tbmsk r0,r2,6\n+\txor_s r2,r2,r0\n+.Ldiv_17bit:\n+\t.rep 7\n+\tadd1.f r2,r3,r2\n+\tsub.cc r2,r2,r3\n+\t.endr\n+\tasl_s r0,r0,7\n+\tbmsk r1,r2,6\n+\txor_s r2,r2,r1\n+\tor_s r0,r0,r1\n+.Ldiv_10bit:\n+\t.rep 7\n+\tadd1.f r2,r3,r2\n+\tsub.cc r2,r2,r3\n+\t.endr\n+\tasl_s r0,r0,7\n+\tbmsk r1,r2,6\n+\txor_s r2,r2,r1\n+\tor_s r0,r0,r1\n+.Ldiv_3bit:\n+\t.rep 3\n+\tadd1.f r2,r3,r2\n+\tsub.cc r2,r2,r3\n+\t.endr\n+\tasl_s r0,r0,3\n+.Ldiv_0bit:\n+\tadd1.f r1,r3,r2\n+\tsub.cc r1,r1,r3\n+\tbmsk_s r2,r2,2\n+\ttst r1,-0x7e ; 0xffffff82, test for rest or odd\n+\tbmsk_s r1,r1,0\n+\tadd_s r0,r0,r2 ; assemble fraction\n+\tadd_s r0,r0,r4 ; add in sign & exponent\n+\tj_s.d [blink]\n+\tadd.ne r0,r0,r1 ; round to nearest / even\n+\n+\t.balign 4\n+.Linf:\n+\tj_s.d [blink]\n+\tor r0,r10,r9\n+\n+.Lret_r4:\n+\tj_s.d [blink]\n+\tmov_s r0,r4\n+\t.balign 4\n+.Linf_denorm:\n+\tadd.f r12,r4,r4\n+\tasr_l r12,r12,24\n+\tbpl .Linf\n+\tmax r12,r12,-24\n+.Ldenorm:\n+\trsub r3,r3,1\n+\tadd r1,pcl,68; .Ldenorm_tab-.\n+\tldw.as r12,[r1,r12]\n+\tmov_s r0,0\n+\tlsr_s r2,r2\n+\tsub_s r1,r1,r12\n+\tj_s.d [r1]\n+\tbic r4,r10,r9\n+\t.short .Ldenorm_tab-.Lret_r4\n+\t.short .Ldenorm_tab-.Ldiv_0bit\n+\t.short .Ldenorm_tab-.Ldiv_3bit-2*8\n+\t.short .Ldenorm_tab-.Ldiv_3bit-1*8\n+\t.short .Ldenorm_tab-.Ldiv_3bit\n+\t.short .Ldenorm_tab-.Ldiv_10bit-6*8\n+\t.short .Ldenorm_tab-.Ldiv_10bit-5*8\n+\t.short .Ldenorm_tab-.Ldiv_10bit-3*8\n+\t.short .Ldenorm_tab-.Ldiv_10bit-3*8\n+\t.short .Ldenorm_tab-.Ldiv_10bit-2*8\n+\t.short .Ldenorm_tab-.Ldiv_10bit-1*8\n+\t.short .Ldenorm_tab-.Ldiv_10bit\n+\t.short .Ldenorm_tab-.Ldiv_17bit-6*8\n+\t.short .Ldenorm_tab-.Ldiv_17bit-5*8\n+\t.short .Ldenorm_tab-.Ldiv_17bit-4*8\n+\t.short .Ldenorm_tab-.Ldiv_17bit-3*8\n+\t.short .Ldenorm_tab-.Ldiv_17bit-2*8\n+\t.short .Ldenorm_tab-.Ldiv_17bit-1*8\n+\t.short .Ldenorm_tab-.Ldiv_17bit\n+\t.short .Ldenorm_tab-.Ldiv_23bit-5*8\n+\t.short .Ldenorm_tab-.Ldiv_23bit-4*8\n+\t.short .Ldenorm_tab-.Ldiv_23bit-3*8\n+\t.short .Ldenorm_tab-.Ldiv_23bit-2*8\n+\t.short .Ldenorm_tab-.Ldiv_23bit-1*8\n+.Ldenorm_tab:\n+\t.short .Ldenorm_tab-.Ldiv_23bit\n+\tENDFUNC(__divsf3)"}, {"sha": "e3f0a3c12b6c14d1dfa8f4ed81097676450de695", "filename": "libgcc/config/arc/ieee-754/arc600/mulsf3.S", "status": "added", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600%2Fmulsf3.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600%2Fmulsf3.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Farc600%2Fmulsf3.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,179 @@\n+/* Copyright (C) 2008-2013 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"../arc-ieee-754.h\"\n+\n+#if 0 /* DEBUG */\n+\t.global __mulsf3\n+\tFUNC(__mulsf3)\n+\t.balign 4\n+__mulsf3:\n+\tpush_s blink\n+\tpush_s r1\n+\tbl.d __mulsf3_c\n+\tpush_s r0\n+\tld_s r1,[sp,4]\n+\tst_s r0,[sp,4]\n+\tbl.d __mulsf3_asm\n+\tpop_s r0\n+\tpop_s r1\n+\tpop_s blink\n+\tcmp r0,r1\n+\tjeq_s [blink]\n+\tand r12,r0,r1\n+\tbic.f 0,0x7f800000,r12\n+\tbne 0f\n+\tbmsk.f 0,r0,22\n+\tbmsk.ne.f r1,r1,22\n+\tjne_s [blink] ; both NaN -> OK\n+0:\tbl abort\n+\tENDFUNC(__mulsf3)\n+#define __mulsf3 __mulsf3_asm\n+#endif /* DEBUG */\n+\n+\t.balign\t4\n+\t.global\t__mulsf3\n+\tFUNC(__mulsf3)\n+__mulsf3:\n+\tld.as\tr9,[pcl,76]; [pcl,((.L7f800000-.+2)/4)]\n+\tbmsk\tr4,r1,22\n+\tbset\tr3,r4,23\n+\tbmsk\tr2,r0,22\n+\tand\tr11,r0,r9\n+\tbreq.d\tr11,0,.Ldenorm_dbl0\n+\tand\tr12,r1,r9\n+\txor_s\tr0,r0,r1\n+\tbreq.d\tr11,r9,.Linf_nan_dbl0\n+\tbset_s\tr2,r2,23\n+\tbreq\tr12,0,.Ldenorm_dbl1\n+\tbreq\tr12,r9,.Linf_nan_dbl1\n+.Lpast_denorm:\n+\tmov r6,0\n+\tlsr.f r7,r2\n+; We could so this a bit faster here with a 32 bit shift register and\n+; inserting the r2 factor / retrieving the low result a byte at a time,\n+; but that'd increase code size.\n+\tmov lp_count,24\n+\t.balign 4\n+\tlp 0f\n+\tadd.cs r6,r6,r3\n+\tlsr.f r6,r6\n+\trrc.f r7,r7\n+0:\n+\tld.as\tr4,[pcl,59]; [pcl,((.L7fffffff-.+2)/4)]\n+\tasl.f 0,r6,8\n+\tadd.pl\tr6,r6,r6\n+\tbclr.pl\tr6,r6,23\n+\tadd.pl.f r7,r7,r7\n+\tadd.cs\tr6,r6,1\n+\tlsr.f\t0,r6,1\n+\tadd_s\tr12,r12,r11\n+\tadc.f\t0,r7,r4\n+\tadd_s\tr12,r12, \\\n+\t\t-0x3f800000\n+\tadc.f\tr8,r6,r12\n+\ttst.pl\tr8,r9\n+\tbic\tr0,r0,r4\n+\tmin\tr3,r8,r9\n+\tjpnz.d\t[blink]\n+\tadd.pnz\tr0,r0,r3\n+; infinity or denormal number\n+\tadd.ne.f r3,r3,r3\n+\tasr_s\tr3,r3,23+1\n+\tbset\tr6,r6,23\n+\tbpnz.d\t.Linfinity\n+\tsub_s\tr3,r3,1\n+\tneg_s\tr2,r3\n+\tbrhi.d\tr2,24,.Lret_r0 ; right shift shift > 24 -> return +-0\n+\tlsr\tr2,r6,r2\n+\tasl\tr9,r6,r3\n+\tlsr.f\t0,r2,1\n+\ttst\tr7,r7\n+\tadd_s\tr0,r0,r2\n+\tbset.ne\tr9,r9,0\n+\tadc.f\t0,r9,r4\n+\tj_s.d\t[blink]\n+\tadd.cs\tr0,r0,1\n+.Linfinity:\n+\tj_s.d\t[blink]\n+\tadd_s\tr0,r0,r9\n+\n+.Lret_r0: j_s [blink]\n+\n+\t.balign\t4\n+.Ldenorm_dbl0:\n+\tasl_s\tr2,r2,8\n+\tnorm.f\tr4,r2\n+\tlsr_s\tr2,r2,7\n+\tasl\tr2,r2,r4\n+\tbreq.d\tr12,r9,.Ldenorm_dbl0_inf_nan_dbl1\n+\tasl\tr4,r4,23\n+\tsub.ne.f r12,r12,r4\n+\tbhi.d\t.Lpast_denorm\n+\txor_s\tr0,r0,r1\n+\tbmsk\tr1,r0,30\n+\tj_s.d\t[blink]\n+\tbic_s\tr0,r0,r1\n+\n+\t.balign\t4\n+.Ldenorm_dbl0_inf_nan_dbl1:\n+\tbmsk.f\t0,r0,30\n+\tbeq_s   .Lretnan\n+\txor_s\tr0,r0,r1\n+.Linf_nan_dbl1:\n+\txor_s\tr1,r1,r0\n+\tbclr_s\tr1,r1,31\n+\tj_s.d\t[blink]\n+\txor_s\tr0,r0,r1\n+.Linf_nan_dbl0:\n+\tsub_s   r2,r1,1 ; inf/nan * 0 -> nan; inf * nan -> nan (use |r2| >= inf)\n+\tbic.f   0,r9,r2\n+\txor_s   r0,r0,r1\n+\tbclr_s  r1,r1,31\n+\txor_s   r0,r0,r1\n+\tjne_s   [blink]\n+.Lretnan:\n+\tj_s.d   [blink]\n+\tmov     r0,-1\n+\t.balign\t4\n+.Ldenorm_dbl1:\n+\tnorm.f\tr3,r4\n+\tsub_s\tr3,r3,7\n+\tasl\tr4,r4,r3\n+\tsub_s\tr3,r3,1\n+\tasl_s\tr3,r3,23\n+\tsub.ne.f r11,r11,r3\n+\tbhi.d\t.Lpast_denorm\n+\tmov_s\tr3,r4\n+\tbmsk\tr3,r0,30\n+\tj_s.d\t[blink]\n+\tbic_s\tr0,r0,r3\n+\n+\t.balign\t4\n+.L7f800000:\n+\t.long\t0x7f800000\n+.L7fffffff:\n+\t.long\t0x7fffffff\n+\tENDFUNC(__mulsf3)"}, {"sha": "fe72d2d0ae879130f3f13063c6f78c2935bb2bff", "filename": "libgcc/config/arc/ieee-754/divdf3.S", "status": "added", "additions": 416, "deletions": 0, "changes": 416, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Fdivdf3.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Fdivdf3.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Fdivdf3.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,416 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/*\n+   to calculate a := b/x as b*y, with y := 1/x:\n+   - x is in the range [1..2)\n+   - calculate 15..18 bit inverse y0 using a table of approximating polynoms.\n+     Precision is higher for polynoms used to evaluate input with larger\n+     value.\n+   - Do one newton-raphson iteration step to double the precision,\n+     then multiply this with the divisor\n+\t-> more time to decide if dividend is subnormal\n+     - the worst error propagation is on the side of the value range\n+       with the least initial defect, thus giving us about 30 bits precision.\n+      The truncation error for the either is less than 1 + x/2 ulp.\n+      A 31 bit inverse can be simply calculated by using x with implicit 1\n+      and chaining the multiplies.  For a 32 bit inverse, we multiply y0^2\n+      with the bare fraction part of x, then add in y0^2 for the implicit\n+      1 of x.\n+    - If calculating a 31 bit inverse, the systematic error is less than\n+      -1 ulp; likewise, for 32 bit, it is less than -2 ulp.\n+    - If we calculate our seed with a 32 bit fraction, we can archive a\n+      tentative result strictly better than -2 / +2.5 (1) ulp/128, i.e. we\n+      only need to take the step to calculate the 2nd stage rest and\n+      rounding adjust 1/32th of the time.  However, if we use a 20 bit\n+      fraction for the seed, the negative error can exceed -2 ulp/128, (2)\n+      thus for a simple add / tst check, we need to do the 2nd stage\n+      rest calculation/ rounding adjust 1/16th of the time.\n+      (1): The inexactness of the 32 bit inverse contributes an error in the\n+      range of (-1 .. +(1+x/2) ) ulp/128.  Leaving out the low word of the\n+      rest contributes an error < +1/x ulp/128 .  In the interval [1,2),\n+      x/2 + 1/x <= 1.5 .\n+      (2): Unless proven otherwise.  I have not actually looked for an\n+      example where -2 ulp/128 is exceeded, and my calculations indicate\n+      that the excess, if existent, is less than -1/512 ulp.\n+ */\n+#include \"arc-ieee-754.h\"\n+\n+/* N.B. fp-bit.c does double rounding on denormal numbers.  */\n+#if 0 /* DEBUG */\n+\t.global __divdf3\n+\tFUNC(__divdf3)\n+\t.balign 4\n+__divdf3:\n+\tpush_s blink\n+\tpush_s r2\n+\tpush_s r3\n+\tpush_s r0\n+\tbl.d __divdf3_c\n+\tpush_s r1\n+\tld_s r2,[sp,12]\n+\tld_s r3,[sp,8]\n+\tst_s r0,[sp,12]\n+\tst_s r1,[sp,8]\n+\tpop_s r1\n+\tbl.d __divdf3_asm\n+\tpop_s r0\n+\tpop_s r3\n+\tpop_s r2\n+\tpop_s blink\n+\tcmp r0,r2\n+\tcmp.eq r1,r3\n+\tjeq_s [blink]\n+\tand r12,DBL0H,DBL1H\n+\tbic.f 0,0x7ff80000,r12 ; both NaN -> OK\n+\tjeq_s [blink]\n+\tbl abort\n+\tENDFUNC(__divdf3)\n+#define __divdf3 __divdf3_asm\n+#endif /* DEBUG */\n+\n+\tFUNC(__divdf3)\n+__divdf3_support: /* This label makes debugger output saner.  */\n+\t.balign 4\n+.Ldenorm_dbl1:\n+\tbrge r6, \\\n+\t\t0x43500000,.Linf_NaN ; large number / denorm -> Inf\n+\tbmsk.f r12,DBL1H,19\n+\tmov.eq r12,DBL1L\n+\tmov.eq DBL1L,0\n+\tsub.eq r7,r7,32\n+\tnorm.f r11,r12 ; flag for x/0 -> Inf check\n+\tbeq_s .Linf_NaN\n+\tmov.mi r11,0\n+\tadd.pl r11,r11,1\n+\tadd_s r12,r12,r12\n+\tasl r8,r12,r11\n+\trsub r12,r11,31\n+\tlsr r12,DBL1L,r12\n+\ttst_s DBL1H,DBL1H\n+\tor r8,r8,r12\n+\tlsr r4,r8,26\n+\tlsr DBL1H,r8,12\n+\tld.as r4,[r10,r4]\n+\tbxor.mi DBL1H,DBL1H,31\n+\tsub r11,r11,11\n+\tasl DBL1L,DBL1L,r11\n+\tsub r11,r11,1\n+\tmpyhu r5,r4,r8\n+\tsub r7,r7,r11\n+\tasl r4,r4,12\n+\tb.d .Lpast_denorm_dbl1\n+\tasl r7,r7,20\n+\t; wb stall\n+\n+\t.balign 4\n+.Ldenorm_dbl0:\n+\tbmsk.f r12,DBL0H,19\n+\t; wb stall\n+\tmov.eq r12,DBL0L\n+\tsub.eq r6,r6,32\n+\tnorm.f r11,r12 ; flag for 0/x -> 0 check\n+\tbrge r7, \\\n+\t\t0x43500000, .Lret0_NaN ; denorm/large number -> 0\n+\tbeq_s .Lret0_NaN\n+\tmov.mi r11,0\n+\tadd.pl r11,r11,1\n+\tasl r12,r12,r11\n+\tsub r6,r6,r11\n+\tadd.f 0,r6,31\n+\tlsr r10,DBL0L,r6\n+\tmov.mi r10,0\n+\tadd r6,r6,11+32\n+\tneg.f r11,r6\n+\tasl DBL0L,DBL0L,r11\n+\tmov.pl DBL0L,0\n+\tsub r6,r6,32-1\n+\tb.d .Lpast_denorm_dbl0\n+\tasl r6,r6,20\n+\n+.Linf_NaN:\n+\ttst_s DBL0L,DBL0L ; 0/0 -> NaN\n+\txor_s DBL1H,DBL1H,DBL0H\n+\tbclr.eq.f DBL0H,DBL0H,31\n+\tbmsk DBL0H,DBL1H,30\n+\txor_s DBL0H,DBL0H,DBL1H\n+\tsub.eq DBL0H,DBL0H,1\n+\tmov_s DBL0L,0\n+\tj_s.d [blink]\n+\tor DBL0H,DBL0H,r9\n+\t.balign 4\n+.Lret0_NaN:\n+\txor_s DBL1H,DBL1H,DBL0H\n+\tcmp_s r12,r9\n+\tmov_s DBL0L,0\n+\tbmsk DBL0H,DBL1H,30\n+\txor_s DBL0H,DBL0H,DBL1H\n+\tj_s.d [blink]\n+\tsub.hi DBL0H,DBL0H,1\n+.Linf_nan_dbl1: ; Inf/Inf -> NaN x/Inf-> 0 x/NaN -> NaN\n+\tnot_s DBL0L,DBL1H\n+\tcmp r6,r9\n+\tsub_s.ne DBL0L,DBL0L,DBL0L\n+\ttst_s DBL0H,DBL0H\n+\tadd_s DBL0H,DBL1H,DBL0L\n+\tj_s.d [blink]\n+\tbxor.mi DBL0H,DBL0H,31\n+.Linf_nan_dbl0:\n+\ttst_s DBL1H,DBL1H\n+\tj_s.d [blink]\n+\tbxor.mi DBL0H,DBL0H,31\n+\t.balign 4\n+\t.global __divdf3\n+/* N.B. the spacing between divtab and the add3 to get its address must\n+   be a multiple of 8.  */\n+__divdf3:\n+\tasl r8,DBL1H,12\n+\tlsr r12,DBL1L,20\n+\tlsr r4,r8,26\n+\tadd3 r10,pcl,59 ; (.Ldivtab-.) >> 3\n+\tld.as r4,[r10,r4]\n+\tld.as r9,[pcl,180]; [pcl,(-((.-.L7ff00000) >> 2))] ; 0x7ff00000\n+\tor r8,r8,r12\n+\tmpyhu r5,r4,r8\n+\tand.f r7,DBL1H,r9\n+\tasl r4,r4,12 ; having the asl here is a concession to the XMAC pipeline.\n+\tbeq.d .Ldenorm_dbl1\n+\tand r6,DBL0H,r9\n+.Lpast_denorm_dbl1: ; wb stall\n+\tsub r4,r4,r5\n+\tmpyhu r5,r4,r4\n+\tbreq.d r6,0,.Ldenorm_dbl0\n+\tlsr r8,r8,1\n+\tasl r12,DBL0H,11\n+\tlsr r10,DBL0L,21\n+.Lpast_denorm_dbl0: ; wb stall\n+\tbset r8,r8,31\n+\tmpyhu r11,r5,r8\n+\tadd_s r12,r12,r10\n+\tbset r5,r12,31\n+\tcmp r5,r8\n+\tcmp.eq DBL0L,DBL1L\n+\t; wb stall\n+\tlsr.cc r5,r5,1\n+\tsub r4,r4,r11 ; u1.31 inverse, about 30 bit\n+\tmpyhu r11,r5,r4 ; result fraction highpart\n+\tbreq r7,r9,.Linf_nan_dbl1\n+\tlsr r8,r8,2 ; u3.29\n+\tadd r5,r6, /* wait for immediate /  XMAC wb stall */ \\\n+\t\t0x3fe00000\n+\t; wb stall (not for XMAC)\n+\tbreq r6,r9,.Linf_nan_dbl0\n+\tmpyu r12,r11,r8 ; u-28.31\n+\tasl_s DBL1L,DBL1L,9 ; u-29.23:9\n+\tsbc r6,r5,r7\n+\t; resource conflict (not for XMAC)\n+\tmpyhu r5,r11,DBL1L ; u-28.23:9\n+\tadd.cs DBL0L,DBL0L,DBL0L\n+\tasl_s DBL0L,DBL0L,6 ; u-26.25:7\n+\tasl r10,r11,23\n+\tsub_l DBL0L,DBL0L,r12\n+\t; wb stall (before 'and' for XMAC)\n+\tlsr r7,r11,9\n+\tsub r5,DBL0L,r5 ; rest msw ; u-26.31:0\n+\tmpyh r12,r5,r4 ; result fraction lowpart\n+\txor.f 0,DBL0H,DBL1H\n+\tand DBL0H,r6,r9\n+\tadd_s DBL0H,DBL0H,r7 ; (XMAC wb stall)\n+\tbxor.mi DBL0H,DBL0H,31\n+\tbrhs r6, /*  wb stall / wait for immediate */ \\\n+\t\t0x7fe00000,.Linf_denorm\n+\tadd.f r12,r12,0x11\n+\tasr r9,r12,5\n+\tsub.mi DBL0H,DBL0H,1\n+\tadd.f DBL0L,r9,r10\n+\ttst r12,0x1c\n+\tjne.d [blink]\n+\tadd.cs DBL0H,DBL0H,1\n+        /* work out exact rounding if we fall through here.  */\n+        /* We know that the exact result cannot be represented in double\n+           precision.  Find the mid-point between the two nearest\n+           representable values, multiply with the divisor, and check if\n+           the result is larger than the dividend.  Since we want to know\n+\t   only the sign bit, it is sufficient to calculate only the\n+\t   highpart of the lower 64 bits.  */\n+\tsub.f DBL0L,DBL0L,1\n+\tasl r12,r9,2 ; u-22.30:2\n+\tmpyu r10,r11,DBL1L ; rest before considering r12 in r5 : -r10\n+\tsub.cs DBL0H,DBL0H,1\n+\tsub.f r12,r12,2\n+\t; resource conflict (not for XMAC)\n+\tmpyhu r7,r12,DBL1L ; u-51.32\n+\tasl r5,r5,25 ; s-51.7:25\n+\tlsr r10,r10,7 ; u-51.30:2\n+\t; resource conflict (not for XMAC)\n+\t; resource conflict (not for XMAC)\n+\tmpyu r9,r12,r8 ; u-51.31:1\n+\tsub r5,r5,r10\n+\tadd.mi r5,r5,DBL1L ; signed multiply adjust for r12*DBL1L\n+\tbset r7,r7,0 ; make sure that the result is not zero, and that\n+\t; wb stall (one earlier for XMAC)\n+\tsub r5,r5,r7 ; a highpart zero appears negative\n+\tsub.f r5,r5,r9 ; rest msw\n+\tadd.pl.f DBL0L,DBL0L,1\n+\tj_s.d [blink]\n+\tadd.eq DBL0H,DBL0H,1\n+\n+\t.balign 4\n+.Linf_denorm:\n+\tbrlo r6,0xc0000000,.Linf\n+.Ldenorm:\n+\tasr r6,r6,20\n+\tneg r9,r6\n+\tmov_s DBL0H,0\n+\tbrhs.d r9,54,.Lret0\n+\tbxor.mi DBL0H,DBL0H,31\n+\tadd_l r12,r12,1\n+\tand r12,r12,-4\n+\trsub r7,r6,5\n+\tasr r10,r12,28\n+\tbmsk r4,r12,27\n+\tasrs DBL0L,r4,r7\n+\tadd DBL1H,r11,r10\n+\tadd.f r7,r6,32-5\n+\tabss r10,r4\n+\tasl r4,r4,r7\n+\tmov.mi r4,r10\n+\tadd.f r10,r6,23\n+\trsub r7,r6,9\n+\tlsr r7,DBL1H,r7\n+\tasl r10,DBL1H,r10\n+\tor.pnz DBL0H,DBL0H,r7\n+\tor.mi r4,r4,r10\n+\tmov.mi r10,r7\n+\tadd.f DBL0L,r10,DBL0L\n+\tadd.cs.f DBL0H,DBL0H,1 ; carry clear after this point\n+\tbxor.f 0,r4,31\n+\tadd.pnz.f DBL0L,DBL0L,1\n+\tadd.cs.f DBL0H,DBL0H,1\n+\tjne_l [blink]\n+\t/* Calculation so far was not conclusive; calculate further rest.  */\n+\tmpyu r11,r11,DBL1L ; rest before considering r12 in r5 : -r11\n+\tasr.f r12,r12,3\n+\tasl r5,r5,25 ; s-51.7:25\n+\t; resource conflict (not for XMAC)\n+\tmpyu DBL1H,r12,r8 ; u-51.31:1\n+\tand r9,DBL0L,1 ; tie-breaker: round to even\n+\tlsr r11,r11,7 ; u-51.30:2\n+\t; resource conflict (not for XMAC)\n+\tmpyhu r8,r12,DBL1L ; u-51.32\n+\tsub.mi r11,r11,DBL1L ; signed multiply adjust for r12*DBL1L\n+\tadd_s DBL1H,DBL1H,r11\n+\t; resource conflict (not for XMAC)\n+\t; resource conflict (not for XMAC)\n+\tmpyu r12,r12,DBL1L ; u-83.30:2\n+\tsub DBL1H,DBL1H,r5 ; -rest msw\n+\tadd_s DBL1H,DBL1H,r8 ; -rest msw\n+\tadd.f 0,DBL1H,DBL1H ; can't ror.f by 32 :-(\n+\t; wb stall (XMAC: Before add.f)\n+\ttst_s DBL1H,DBL1H\n+\tcmp.eq r12,r9\n+\tadd.cs.f DBL0L,DBL0L,1\n+\tj_s.d [blink]\n+\tadd.cs DBL0H,DBL0H,1\n+\n+.Lret0:\n+\t/* return +- 0 */\n+\tj_s.d [blink]\n+\tmov_s DBL0L,0\n+.Linf:\n+\tmov_s DBL0H,r9\n+\tmov_s DBL0L,0\n+\tj_s.d [blink]\n+\tbxor.mi DBL0H,DBL0H,31\n+\n+\t.balign 4\n+.Ldivtab:\n+\t.long 0xfc0fffe1\n+\t.long 0xf46ffdfb\n+\t.long 0xed1ffa54\n+\t.long 0xe61ff515\n+\t.long 0xdf7fee75\n+\t.long 0xd91fe680\n+\t.long 0xd2ffdd52\n+\t.long 0xcd1fd30c\n+\t.long 0xc77fc7cd\n+\t.long 0xc21fbbb6\n+\t.long 0xbcefaec0\n+\t.long 0xb7efa100\n+\t.long 0xb32f92bf\n+\t.long 0xae8f83b7\n+\t.long 0xaa2f7467\n+\t.long 0xa5ef6479\n+\t.long 0xa1cf53fa\n+\t.long 0x9ddf433e\n+\t.long 0x9a0f3216\n+\t.long 0x965f2091\n+\t.long 0x92df0f11\n+\t.long 0x8f6efd05\n+\t.long 0x8c1eeacc\n+\t.long 0x88eed876\n+\t.long 0x85dec615\n+\t.long 0x82eeb3b9\n+\t.long 0x800ea10b\n+\t.long 0x7d3e8e0f\n+\t.long 0x7a8e7b3f\n+\t.long 0x77ee6836\n+\t.long 0x756e5576\n+\t.long 0x72fe4293\n+\t.long 0x709e2f93\n+\t.long 0x6e4e1c7f\n+\t.long 0x6c0e095e\n+\t.long 0x69edf6c5\n+\t.long 0x67cde3a5\n+\t.long 0x65cdd125\n+\t.long 0x63cdbe25\n+\t.long 0x61ddab3f\n+\t.long 0x600d991f\n+\t.long 0x5e3d868c\n+\t.long 0x5c6d7384\n+\t.long 0x5abd615f\n+\t.long 0x590d4ecd\n+\t.long 0x576d3c83\n+\t.long 0x55dd2a89\n+\t.long 0x545d18e9\n+\t.long 0x52dd06e9\n+\t.long 0x516cf54e\n+\t.long 0x4ffce356\n+\t.long 0x4e9cd1ce\n+\t.long 0x4d3cbfec\n+\t.long 0x4becae86\n+\t.long 0x4aac9da4\n+\t.long 0x496c8c73\n+\t.long 0x483c7bd3\n+\t.long 0x470c6ae8\n+\t.long 0x45dc59af\n+\t.long 0x44bc4915\n+\t.long 0x43ac3924\n+\t.long 0x428c27fb\n+\t.long 0x418c187a\n+\t.long 0x407c07bd\n+.L7ff00000:\n+\t.long 0x7ff00000\n+\tENDFUNC(__divdf3)"}, {"sha": "67f8e4fd3562da94a4f93548b282ae1eda243e04", "filename": "libgcc/config/arc/ieee-754/divsf3-stdmul.S", "status": "added", "additions": 281, "deletions": 0, "changes": 281, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Fdivsf3-stdmul.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Fdivsf3-stdmul.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Fdivsf3-stdmul.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,281 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/*\n+   - calculate 15..18 bit inverse using a table of approximating polynoms.\n+     precision is higher for polynoms used to evaluate input with larger\n+     value.\n+   - do one newton-raphson iteration step to double the precision,\n+     then multiply this with the divisor\n+\t-> more time to decide if dividend is subnormal\n+     - the worst error propagation is on the side of the value range\n+       with the least initial defect, thus giving us about 30 bits precision.\n+ */\n+#include \"arc-ieee-754.h\"\n+\n+#if 0 /* DEBUG */\n+\t.global __divsf3\n+\tFUNC(__divsf3)\n+\t.balign 4\n+__divsf3:\n+\tpush_s blink\n+\tpush_s r1\n+\tbl.d __divsf3_c\n+\tpush_s r0\n+\tld_s r1,[sp,4]\n+\tst_s r0,[sp,4]\n+\tbl.d __divsf3_asm\n+\tpop_s r0\n+\tpop_s r1\n+\tpop_s blink\n+\tcmp r0,r1\n+#if 1\n+\tbne abort\n+\tjeq_s [blink]\n+\tb abort\n+#else\n+\tbne abort\n+\tj_s [blink]\n+#endif\n+\tENDFUNC(__divsf3)\n+#define __divsf3 __divsf3_asm\n+#endif /* DEBUG */\n+\n+\tFUNC(__divsf3)\n+\t.balign 4\n+.L7f800000:\n+\t.long 0x7f800000\n+.Ldivtab:\n+\t.long 0xfc0ffff0\n+\t.long 0xf46ffefd\n+\t.long 0xed1ffd2a\n+\t.long 0xe627fa8e\n+\t.long 0xdf7ff73b\n+\t.long 0xd917f33b\n+\t.long 0xd2f7eea3\n+\t.long 0xcd1fe986\n+\t.long 0xc77fe3e7\n+\t.long 0xc21fdddb\n+\t.long 0xbcefd760\n+\t.long 0xb7f7d08c\n+\t.long 0xb32fc960\n+\t.long 0xae97c1ea\n+\t.long 0xaa27ba26\n+\t.long 0xa5e7b22e\n+\t.long 0xa1cfa9fe\n+\t.long 0x9ddfa1a0\n+\t.long 0x9a0f990c\n+\t.long 0x9667905d\n+\t.long 0x92df878a\n+\t.long 0x8f6f7e84\n+\t.long 0x8c27757e\n+\t.long 0x88f76c54\n+\t.long 0x85df630c\n+\t.long 0x82e759c5\n+\t.long 0x8007506d\n+\t.long 0x7d3f470a\n+\t.long 0x7a8f3da2\n+\t.long 0x77ef341e\n+\t.long 0x756f2abe\n+\t.long 0x72f7212d\n+\t.long 0x709717ad\n+\t.long 0x6e4f0e44\n+\t.long 0x6c1704d6\n+\t.long 0x69e6fb44\n+\t.long 0x67cef1d7\n+\t.long 0x65c6e872\n+\t.long 0x63cedf18\n+\t.long 0x61e6d5cd\n+\t.long 0x6006cc6d\n+\t.long 0x5e36c323\n+\t.long 0x5c76b9f3\n+\t.long 0x5abeb0b7\n+\t.long 0x5916a79b\n+\t.long 0x57769e77\n+\t.long 0x55de954d\n+\t.long 0x54568c4e\n+\t.long 0x52d6834d\n+\t.long 0x51667a7f\n+\t.long 0x4ffe71b5\n+\t.long 0x4e9e68f1\n+\t.long 0x4d466035\n+\t.long 0x4bf65784\n+\t.long 0x4aae4ede\n+\t.long 0x496e4646\n+\t.long 0x48363dbd\n+\t.long 0x47063547\n+\t.long 0x45de2ce5\n+\t.long 0x44be2498\n+\t.long 0x43a61c64\n+\t.long 0x4296144a\n+\t.long 0x41860c0e\n+\t.long 0x407e03ee\n+__divsf3_support: /* This label makes debugger output saner.  */\n+.Ldenorm_fp1:\n+\tbclr r6,r6,31\n+\tnorm.f r12,r6 ; flag for x/0 -> Inf check\n+\tadd r6,r6,r6\n+\trsub r5,r12,16\n+\tror r5,r1,r5\n+\tasl r6,r6,r12\n+\tbmsk r5,r5,5\n+\tld.as r5,[r3,r5]\n+\tadd r4,r6,r6\n+\t; load latency\n+\tmpyhu r7,r5,r4\n+\tbic.ne.f 0, \\\n+\t\t0x60000000,r0 ; large number / denorm -> Inf\n+\tbeq_s .Linf_NaN\n+\tasl r5,r5,13\n+\t; wb stall\n+\t; slow track\n+\tsub r7,r5,r7\n+\tmpyhu r8,r7,r6\n+\tasl_s r12,r12,23\n+\tand.f r2,r0,r9\n+\tadd r2,r2,r12\n+\tasl r12,r0,8\n+\t; wb stall\n+\tbne.d .Lpast_denorm_fp1\n+.Ldenorm_fp0:\n+\tmpyhu r8,r8,r7\n+\tbclr r12,r12,31\n+\tnorm.f r3,r12 ; flag for 0/x -> 0 check\n+\tbic.ne.f 0,0x60000000,r1 ; denorm/large number -> 0\n+\tbeq_s .Lret0\n+\tasl_s r12,r12,r3\n+\tasl_s r3,r3,23\n+\tadd_s r12,r12,r12\n+\tadd r11,r11,r3\n+\tb.d .Lpast_denorm_fp0\n+\tmov_s r3,r12\n+\t.balign 4\n+.Linf_NaN:\n+\tbclr.f 0,r0,31 ; 0/0 -> NaN\n+\txor_s r0,r0,r1\n+\tbmsk r1,r0,30\n+\tbic_s r0,r0,r1\n+\tsub.eq r0,r0,1\n+\tj_s.d [blink]\n+\tor r0,r0,r9\n+.Lret0:\n+\txor_s r0,r0,r1\n+\tbmsk r1,r0,30\n+\tj_s.d [blink]\n+\tbic_s r0,r0,r1\n+.Linf_nan_fp1:\n+\tlsr_s r0,r0,31\n+\tbmsk.f 0,r1,22\n+\tasl_s r0,r0,31\n+\tbne_s 0f ; inf/inf -> nan\n+\tbrne r2,r9,.Lsigned0 ; x/inf -> 0, but x/nan -> nan\n+0:\tj_s.d [blink]\n+\tmov r0,-1\n+.Lsigned0:\n+.Linf_nan_fp0:\n+\ttst_s r1,r1\n+\tj_s.d [blink]\n+\tbxor.mi r0,r0,31\n+\t.balign 4\n+\t.global __divsf3\n+/* N.B. the spacing between divtab and the sub3 to get its address must\n+   be a multiple of 8.  */\n+__divsf3:\n+\tlsr r2,r1,17\n+\tsub3 r3,pcl,55;(.-.Ldivtab) >> 3\n+\tbmsk_s r2,r2,5\n+\tld.as r5,[r3,r2]\n+\tasl r4,r1,9\n+\tld.as r9,[pcl,-114]; [pcl,(-((.-.L7f800000) >> 2))] ; 0x7f800000\n+\tmpyhu r7,r5,r4\n+\tasl r6,r1,8\n+\tand.f r11,r1,r9\n+\tbset r6,r6,31\n+\tasl r5,r5,13\n+\t; wb stall\n+\tbeq .Ldenorm_fp1\n+\tsub r7,r5,r7\n+\tmpyhu r8,r7,r6\n+\tbreq.d r11,r9,.Linf_nan_fp1\n+\tand.f r2,r0,r9\n+\tbeq.d .Ldenorm_fp0\n+\tasl r12,r0,8\n+\t; wb stall\n+\tbreq r2,r9,.Linf_nan_fp0\n+\tmpyhu r8,r8,r7\n+.Lpast_denorm_fp1:\n+\tbset r3,r12,31\n+.Lpast_denorm_fp0:\n+\tcmp_s r3,r6\n+\tlsr.cc r3,r3,1\n+\tadd_s r2,r2, /* wait for immediate */ \\\n+\t/* wb stall */ \\\n+\t\t0x3f000000\n+\tsub r7,r7,r8 ; u1.31 inverse, about 30 bit\n+\tmpyhu r3,r3,r7\n+\tsbc r2,r2,r11\n+\txor.f 0,r0,r1\n+\tand r0,r2,r9\n+\tbxor.mi r0,r0,31\n+\tbrhs r2, /* wb stall / wait for immediate */ \\\n+\t\t0x7f000000,.Linf_denorm\n+.Lpast_denorm:\n+\tadd_s r3,r3,0x22 ; round to nearest or higher\n+\ttst r3,0x3c ; check if rounding was unsafe\n+\tlsr r3,r3,6\n+\tjne.d [blink] ; return if rounding was safe.\n+\tadd_s r0,r0,r3\n+        /* work out exact rounding if we fall through here.  */\n+        /* We know that the exact result cannot be represented in single\n+           precision.  Find the mid-point between the two nearest\n+           representable values, multiply with the divisor, and check if\n+           the result is larger than the dividend.  */\n+        add_s r3,r3,r3\n+        sub_s r3,r3,1\n+        mpyu r3,r3,r6\n+\tasr.f 0,r0,1 ; for round-to-even in case this is a denorm\n+\trsub r2,r9,25\n+        asl_s r12,r12,r2\n+\t; wb stall\n+\t; slow track\n+        sub.f 0,r12,r3\n+        j_s.d [blink]\n+        sub.mi r0,r0,1\n+/* For denormal results, it is possible that an exact result needs\n+   rounding, and thus the round-to-even rule has to come into play.  */\n+.Linf_denorm:\n+\tbrlo r2,0xc0000000,.Linf\n+.Ldenorm:\n+\tasr_s r2,r2,23\n+\tbic r0,r0,r9\n+\tneg r9,r2\n+\tbrlo.d r9,25,.Lpast_denorm\n+\tlsr r3,r3,r9\n+\t/* Fall through: return +- 0 */\n+\tj_s [blink]\n+.Linf:\n+\tj_s.d [blink]\n+\tor r0,r0,r9\n+\tENDFUNC(__divsf3)"}, {"sha": "31a0ad3b10d8def21f841ee16ce7149fdeb3d202", "filename": "libgcc/config/arc/ieee-754/divsf3.S", "status": "added", "additions": 221, "deletions": 0, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Fdivsf3.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Fdivsf3.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Fdivsf3.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,221 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"arc-ieee-754.h\"\n+\n+#if 0 /* DEBUG */\n+\t.global __divsf3\n+\tFUNC(__divsf3)\n+\t.balign 4\n+__divsf3:\n+\tpush_s blink\n+\tpush_s r1\n+\tbl.d __divsf3_c\n+\tpush_s r0\n+\tld_s r1,[sp,4]\n+\tst_s r0,[sp,4]\n+\tbl.d __divsf3_asm\n+\tpop_s r0\n+\tpop_s r1\n+\tpop_s blink\n+\tcmp r0,r1\n+#if 1\n+\tbne abort\n+\tjeq_s [blink]\n+\tb abort\n+#else\n+\tbne abort\n+\tj_s [blink]\n+#endif\n+\tENDFUNC(__divsf3)\n+#define __divsf3 __divsf3_asm\n+#endif /* DEBUG */\n+\n+\t.balign 4\n+__divdf3_support: /* This label makes debugger output saner.  */\n+\tFUNC(__divsf3)\n+.Ldenorm_fp0:\n+\tnorm.f r12,r2 ; flag for 0/x -> 0 check\n+\tbic.ne.f 0,0x60000000,r1 ; denorm/large number -> 0\n+\tbeq_s .Lret0_NaN\n+\ttst r1,r9\n+\tadd_s r2,r2,r2\n+\tsub_s r12,r12,8\n+\tasl_s r2,r2,r12\n+\tasl_l r12,r12,23\n+\tbne.d .Lpast_denorm_fp0\n+\tadd r5,r5,r12\n+/* r0 is subnormal, r1 is subnormal or 0.  */\n+\n+\t.balign 4\n+.Ldenorm_fp1:\n+\tnorm.f r12,r3 ; flag for  x/0 -> Inf check\n+\tbic.ne.f 0,0x60000000,r0 ; large number/denorm -> Inf\n+\tbeq_s .Linf\n+\tadd_s r3,r3,r3\n+\tsub_s r12,r12,8\n+\tasl_s r3,r3,r12\n+\tasl_s r12,r12,23\n+\tb.d .Lpast_denorm_fp1\n+\tadd r4,r4,r12\n+\n+.Lret0_NaN:\n+\tbclr.f 0,r1,31 ; 0/0 -> NaN\n+\tbic r0,r10,r9\n+\tj_s.d [blink]\n+\tsub.eq r0,r0,1\n+\n+\t.global __divsf3\n+\t.balign 4\n+        .long 0x7f800000 ; exponent mask\n+__divsf3:\n+\tld r9,[pcl,-4]\n+\tbmsk r2,r0,22\n+\txor r4,r0,r2\n+\tbmsk r3,r1,22\n+\txor r5,r1,r3\n+\tand r11,r0,r9\n+\tbreq.d r11,0,.Ldenorm_fp0\n+\txor r10,r4,r5\n+\tbreq r11,r9,.Linf_nan_fp0\n+\tbset_s r2,r2,23\n+\tand r11,r1,r9\n+\tbreq r11,0,.Ldenorm_fp1\n+\tbreq r11,r9,.Linf_nan_fp1\n+.Lpast_denorm_fp0:\n+\tbset_s r3,r3,23\n+.Lpast_denorm_fp1:\n+\tcmp r2,r3\n+\tasl_s r2,r2,6+1\n+\tasl_s r3,r3,7\n+\tadd.lo r2,r2,r2\n+\tbclr r8,r9,30 ; exponent bias\n+\tbclr.lo r8,r8,23 ; reduce exp by one if fraction is shifted\n+\tsub r4,r4,r5\n+\tadd r4,r4,r8\n+\txor.f 0,r10,r4\n+\tbmi .Linf_denorm\n+\tand r12,r4,r9\n+\tbreq r12,0,.Ldenorm\n+\tsub_s r2,r2,r3 ; discard implicit 1\n+.Ldiv_23bit:\n+\t.rep 6\n+\tdivaw r2,r2,r3\n+\t.endr\n+\tbreq r12,r9,.Linf\n+\tbmsk r0,r2,6\n+\txor_s r2,r2,r0\n+.Ldiv_17bit:\n+\t.rep 7\n+\tdivaw r2,r2,r3\n+\t.endr\n+\tasl_s r0,r0,7\n+\tbmsk r1,r2,6\n+\txor_s r2,r2,r1\n+\tor_s r0,r0,r1\n+.Ldiv_10bit:\n+\t.rep 7\n+\tdivaw r2,r2,r3\n+\t.endr\n+\tasl_s r0,r0,7\n+\tbmsk r1,r2,6\n+\txor_s r2,r2,r1\n+\tor_s r0,r0,r1\n+.Ldiv_3bit:\n+\t.rep 3\n+\tdivaw r2,r2,r3\n+\t.endr\n+\tasl_s r0,r0,3\n+.Ldiv_0bit:\n+\tdivaw r1,r2,r3\n+\tbmsk_s r2,r2,2\n+\ttst r1,-0x7e ; 0xffffff82, test for rest or odd\n+\tbmsk_s r1,r1,0\n+\tadd_s r0,r0,r2 ; assemble fraction\n+\tadd_s r0,r0,r4 ; add in sign & exponent\n+\tj_s.d [blink]\n+\tadd.ne r0,r0,r1 ; round to nearest / even\n+\n+\t.balign 4\n+.Linf_nan_fp0:\n+\tbic.f 0,r9,r1 ; fp1 Inf -> result NaN\n+\tbic r1,r5,r9  ; fp1 sign\n+\tsub.eq r1,r1,1\n+\tj_s.d [blink]\n+\txor_s r0,r0,r1\n+.Linf_nan_fp1:\n+\tbic r0,r4,r9 ; fp0 sign\n+\tbmsk.f 0,r1,22 ; x/inf -> 0, x/nan -> nan\n+\txor.eq r1,r1,r9\n+\tj_s.d [blink]\n+\txor_s r0,r0,r1\n+.Linf:\n+\tj_s.d [blink]\n+\tor r0,r10,r9\n+\n+.Lret_r4:\n+\tj_s.d [blink]\n+\tmov_s r0,r4\n+\t.balign 4\n+.Linf_denorm:\n+\tadd.f r12,r4,r4\n+\tasr_l r12,r12,24\n+\tbpl .Linf\n+\tmax r12,r12,-24\n+.Ldenorm:\n+\tadd r1,pcl,42; .Ldenorm_tab-.\n+\tldb_s r12,[r12,r1]\n+\tmov_s r0,0\n+\tlsr_s r2,r2\n+\tsub_s r1,r1,r12\n+\tj_s.d [r1]\n+\tbic r4,r10,r9\n+\t.byte .Ldenorm_tab-.Lret_r4\n+\t.byte .Ldenorm_tab-.Ldiv_0bit\n+\t.byte .Ldenorm_tab-.Ldiv_3bit-8\n+\t.byte .Ldenorm_tab-.Ldiv_3bit-4\n+\t.byte .Ldenorm_tab-.Ldiv_3bit\n+\t.byte .Ldenorm_tab-.Ldiv_10bit-24\n+\t.byte .Ldenorm_tab-.Ldiv_10bit-20\n+\t.byte .Ldenorm_tab-.Ldiv_10bit-16\n+\t.byte .Ldenorm_tab-.Ldiv_10bit-12\n+\t.byte .Ldenorm_tab-.Ldiv_10bit-8\n+\t.byte .Ldenorm_tab-.Ldiv_10bit-4\n+\t.byte .Ldenorm_tab-.Ldiv_10bit\n+\t.byte .Ldenorm_tab-.Ldiv_17bit-24\n+\t.byte .Ldenorm_tab-.Ldiv_17bit-20\n+\t.byte .Ldenorm_tab-.Ldiv_17bit-16\n+\t.byte .Ldenorm_tab-.Ldiv_17bit-12\n+\t.byte .Ldenorm_tab-.Ldiv_17bit-8\n+\t.byte .Ldenorm_tab-.Ldiv_17bit-4\n+\t.byte .Ldenorm_tab-.Ldiv_17bit\n+\t.byte .Ldenorm_tab-.Ldiv_23bit-20\n+\t.byte .Ldenorm_tab-.Ldiv_23bit-16\n+\t.byte .Ldenorm_tab-.Ldiv_23bit-12\n+\t.byte .Ldenorm_tab-.Ldiv_23bit-8\n+\t.byte .Ldenorm_tab-.Ldiv_23bit-4\n+.Ldenorm_tab:\n+\t.byte .Ldenorm_tab-.Ldiv_23bit\n+\tENDFUNC(__divsf3)"}, {"sha": "d57f3e5a419736b1999cf670b4f82dd6669a1416", "filename": "libgcc/config/arc/ieee-754/divtab-arc-df.c", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Fdivtab-arc-df.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Fdivtab-arc-df.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Fdivtab-arc-df.c?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,161 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* We use a polynom similar to a Tchebycheff polynom to get an initial\n+   seed, and then use a newton-raphson iteration step to get an\n+   approximate result\n+   If this result can't be rounded to the exact result with confidence, we\n+   round to the value between the two closest representable values, and\n+   test if the correctly rounded value is above or below this value.\n+ \n+   Because of the Newton-raphson iteration step, an error in the seed at X\n+   is amplified by X.  Therefore, we don't want a Tchebycheff polynom\n+   or a polynom that is close to optimal according to the maximum norm\n+   on the errro of the seed value; we want one that is close to optimal\n+   according to the maximum norm on the error of the result, i.e. we\n+   want the maxima of the polynom to increase linearily.\n+   Given an interval [X0,X2) over which to approximate,\n+   with X1 := (X0+X2)/2,  D := X1-X0, F := 1/D, and S := D/X1 we have,\n+   like for Tchebycheff polynoms:\n+   P(0) := 1\n+   but then we have:\n+   P(1) := X + S*D\n+   P(2) := 2 * X^2 + S*D * X - D^2\n+   Then again:\n+   P(n+1) := 2 * X * P(n) - D^2 * P (n-1)\n+ */\n+\n+static long double merr = 42.;\n+\n+double\n+err (long double a0, long double a1, long double x)\n+{\n+  long double y0 = a0 + (x-1)*a1;\n+\n+  long double approx = 2. * y0 - y0 * x * y0;\n+  long double true = 1./x;\n+  long double err = approx - true;\n+\n+  if (err <= -1./65536./16384.)\n+    printf (\"ERROR EXCEEDS 1 ULP %.15f %.15f %.15f\\n\",\n+\t    (double)x, (double)approx, (double)true);\n+  if (merr > err)\n+    merr = err;\n+  return err;\n+}\n+\n+int\n+main (void)\n+{\n+  long double T[5]; /* Taylor polynom */\n+  long double P[5][5];\n+  int i, j;\n+  long double X0, X1, X2, S;\n+  long double inc = 1./64;\n+  long double D = inc*0.5;\n+  long i0, i1, i2, io;\n+\n+  memset (P, 0, sizeof (P));\n+  P[0][0] = 1.;\n+  for (i = 1; i < 5; i++)\n+    P[i][i] = 1 << i-1;\n+  P[2][0] = -D*D;\n+  for (X0 = 1.; X0 < 2.; X0 += inc)\n+    {\n+      X1 = X0 + inc * 0.5;\n+      X2 = X0 + inc;\n+      S = D / X1;\n+      T[0] = 1./X1;\n+      for (i = 1; i < 5; i++)\n+\tT[i] = T[i-1] * -T[0];\n+#if 0\n+      printf (\"T %1.8f %f %f %f %f\\n\", (double)T[0], (double)T[1], (double)T[2],\n+(double)T[3], (double)T[4]);\n+#endif\n+      P[1][0] = S*D;\n+      P[2][1] = S*D;\n+      for (i = 3; i < 5; i++)\n+\t{\n+\t  P[i][0] = -D*D*P[i-2][0];\n+\t  for (j = 1; j < i; j++)\n+\t    P[i][j] = 2*P[i-1][j-1]-D*D*P[i-2][j];\n+\t}\n+#if 0\n+      printf (\"P3 %1.8f %f %f %f %f\\n\", (double)P[3][0], (double)P[3][1], (double)P[3][2],\n+(double)P[3][3], (double)P[3][4]);\n+      printf (\"P4 %1.8f %f %f %f %f\\n\", (double)P[4][0], (double)P[4][1], (double)P[4][2],\n+(double)P[4][3], (double)P[4][4]);\n+#endif\n+      for (i = 4; i > 1; i--)\n+\t{\n+\t  long double a = T[i]/P[i][i];\n+\n+\t  for (j = 0; j < i; j++)\n+\t    T[j] -= a * P[i][j];\n+\t}\n+#if 0\n+      printf (\"A %1.8f %f %f\\n\", (double)T[0], (double)T[1], (double)T[2]);\n+#endif\n+#if 0\n+      i2 = T[2]*1024;\n+      long double a = (T[2]-i/1024.)/P[2][2];\n+      for (j = 0; j < 2; j++)\n+\tT[j] -= a * P[2][j];\n+#else\n+      i2 = 0;\n+#endif\n+\t  long double T0, Ti1;\n+      for (i = 0, i0 = 0; i < 4; i++)\n+\t{\n+\n+\t  i1 = T[1]*4096. + i0 / (long double)(1 << 20) - 0.5;\n+\t  i1 = - (-i1 & 0x0fff);\n+\t  Ti1 = ((unsigned)(-i1 << 20) | i0) /-(long double)(1LL<<32LL);\n+\t  T0 = T[0] - (T[1]-Ti1)/P[1][1] * P[1][0] - (X1 - 1) * Ti1;\n+\t  i0 = T0 * 1024 * 1024 + 0.5;\n+\t  i0 &= 0xfffff;\n+\t}\n+#if 0\n+      printf (\"A %1.8f %f %f\\n\", (double)T[0], (double)T[1], (double)T[2]);\n+#endif\n+      io = (unsigned)(-i1 << 20) | i0;\n+      long double A1 = (unsigned)io/-65536./65536.;\n+      long double A0 =  (unsigned)(io << 12)/65536./65536.;\n+      long double Xm0 = 1./sqrt (-A1);\n+      long double Xm1 = 0.5+0.5*-A0/A1;\n+#if 0\n+      printf (\"%f %f %f %f\\n\", (double)A0, (double)A1, (double) Ti1, (double)X0);\n+      printf (\"%.12f %.12f %.12f\\n\",\n+\t      err (A0, A1, X0), err (A0, A1, X1), err (A0, A1, X2));\n+      printf (\"%.12f %.12f\\n\", (double)Xm0, (double)Xm1);\n+      printf (\"%.12f %.12f\\n\", err (A0, A1, Xm0), err (A0, A1, Xm1));\n+#endif\n+      printf (\"\\t.long 0x%x\\n\", io);\n+   }\n+#if 0\n+  printf (\"maximum error: %.15f %x %f\\n\", (double)merr, (unsigned)(long long)(-merr * 65536 * 65536), (double)log(-merr)/log(2));\n+#endif\n+  return 0;\n+}"}, {"sha": "08a30e0381e939471dc0bdf907ef836a5f57548e", "filename": "libgcc/config/arc/ieee-754/divtab-arc-sf.c", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Fdivtab-arc-sf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Fdivtab-arc-sf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Fdivtab-arc-sf.c?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,127 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* We use a polynom similar to a Tchebycheff polynom to get an initial\n+   seed, and then use a newton-raphson iteration step to get an\n+   approximate result\n+   If this result can't be rounded to the exact result with confidence, we\n+   round to the value between the two closest representable values, and\n+   test if the correctly rounded value is above or below this value.\n+ \n+   Because of the Newton-raphson iteration step, an error in the seed at X\n+   is amplified by X.  Therefore, we don't want a Tchebycheff polynom\n+   or a polynom that is close to optimal according to the maximum norm\n+   on the errro of the seed value; we want one that is close to optimal\n+   according to the maximum norm on the error of the result, i.e. we\n+   want the maxima of the polynom to increase linearily.\n+   Given an interval [X0,X2) over which to approximate,\n+   with X1 := (X0+X2)/2,  D := X1-X0, F := 1/D, and S := D/X1 we have,\n+   like for Tchebycheff polynoms:\n+   P(0) := 1\n+   but then we have:\n+   P(1) := X + S*D\n+   P(2) := 2 * X^2 + S*D * X - D^2\n+   Then again:\n+   P(n+1) := 2 * X * P(n) - D^2 * P (n-1)\n+ */\n+\n+int\n+main (void)\n+{\n+  long double T[5]; /* Taylor polynom */\n+  long double P[5][5];\n+  int i, j;\n+  long double X0, X1, X2, S;\n+  long double inc = 1./64;\n+  long double D = inc*0.5;\n+  long i0, i1, i2;\n+\n+  memset (P, 0, sizeof (P));\n+  P[0][0] = 1.;\n+  for (i = 1; i < 5; i++)\n+    P[i][i] = 1 << i-1;\n+  P[2][0] = -D*D;\n+  for (X0 = 1.; X0 < 2.; X0 += inc)\n+    {\n+      X1 = X0 + inc * 0.5;\n+      X2 = X1 + inc;\n+      S = D / X1;\n+      T[0] = 1./X1;\n+      for (i = 1; i < 5; i++)\n+\tT[i] = T[i-1] * -T[0];\n+#if 0\n+      printf (\"T %1.8f %f %f %f %f\\n\", (double)T[0], (double)T[1], (double)T[2],\n+(double)T[3], (double)T[4]);\n+#endif\n+      P[1][0] = S*D;\n+      P[2][1] = S*D;\n+      for (i = 3; i < 5; i++)\n+\t{\n+\t  P[i][0] = -D*D*P[i-2][0];\n+\t  for (j = 1; j < i; j++)\n+\t    P[i][j] = 2*P[i-1][j-1]-D*D*P[i-2][j];\n+\t}\n+#if 0\n+      printf (\"P3 %1.8f %f %f %f %f\\n\", (double)P[3][0], (double)P[3][1], (double)P[3][2],\n+(double)P[3][3], (double)P[3][4]);\n+      printf (\"P4 %1.8f %f %f %f %f\\n\", (double)P[4][0], (double)P[4][1], (double)P[4][2],\n+(double)P[4][3], (double)P[4][4]);\n+#endif\n+      for (i = 4; i > 1; i--)\n+\t{\n+\t  long double a = T[i]/P[i][i];\n+\n+\t  for (j = 0; j < i; j++)\n+\t    T[j] -= a * P[i][j];\n+\t}\n+#if 0\n+      printf (\"A %1.8f %f %f\\n\", (double)T[0], (double)T[1], (double)T[2]);\n+#endif\n+#if 0\n+      i2 = T[2]*512;\n+      long double a = (T[2]-i/512.)/P[2][2];\n+      for (j = 0; j < 2; j++)\n+\tT[j] -= a * P[2][j];\n+#else\n+      i2 = 0;\n+#endif\n+      for (i = 0, i0 = 0; i < 4; i++)\n+\t{\n+\t  long double T0, Ti1;\n+\n+\t  i1 = T[1]*8192. + i0 / (long double)(1 << 19) - 0.5;\n+\t  i1 = - (-i1 & 0x1fff);\n+\t  Ti1 = ((unsigned)(-i1 << 19) | i0) /-(long double)(1LL<<32LL);\n+\t  T0 = T[0] - (T[1]-Ti1)/P[1][1] * P[1][0] - (X1 - 1) * Ti1;\n+\t  i0 = T0 * 512 * 1024 + 0.5;\n+\t  i0 &= 0x7ffff;\n+\t}\n+#if 0\n+      printf (\"A %1.8f %f %f\\n\", (double)T[0], (double)T[1], (double)T[2]);\n+#endif\n+      printf (\"\\t.long 0x%x\\n\", (-i1 << 19) | i0);\n+   }\n+  return 0;\n+}"}, {"sha": "4785393070da04e7af28b6164e7641f148f98d84", "filename": "libgcc/config/arc/ieee-754/eqdf2.S", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Feqdf2.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Feqdf2.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Feqdf2.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,76 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"arc-ieee-754.h\"\n+/* inputs: DBL0, DBL1\n+   output: z flag\n+   clobber: r12, flags\n+   For NaNs, bit 19.. bit 30 of the high word must be set.  */\n+#if 0 /* DEBUG */\n+\t.global __eqdf2\n+\t.balign 4\n+\tFUNC(__eqdf2)\n+__eqdf2:\n+\tst.a r11,[sp,-4]` push_s blink` st.a r10,[sp,-4]` st.a r9,[sp,-4]\n+\tst.a r8,[sp,-4]` st.a r7,[sp,-4]` st.a r6,[sp,-4]` st.a r5,[sp,-4]\n+\tst.a r4,[sp,-4]` push_s r3` push_s r2` push_s r1`\n+\tbl.d __eqdf2_c` push_s r0\n+\tmov r11,r0` pop_s r0` pop_s r1` pop_s r2` pop_s r3\n+\tld.ab r4,[sp,4]` ld.ab r5,[sp,4]` ld.ab r6,[sp,4]`\n+\tld.ab r7,[sp,4]` ld.ab r8,[sp,4]` ld.ab r9,[sp,4]\n+\tbl.d __eqdf2_asm` ld.ab r10,[sp,4]\n+\tpop_s blink\n+\tbreq.d r11,0,0f\n+\tld.ab r11,[sp,4]\n+\tjne_s [blink]\n+\tbl abort\n+0:\tjeq_s [blink]\n+\tbl abort\n+\tENDFUNC(__eqdf2)\n+#define __eqdf2 __eqdf2_asm\n+#endif /* DEBUG */\n+\t.global __eqdf2\n+\t.balign 4\n+\tHIDDEN_FUNC(__eqdf2)\n+\t/* Good performance as long as the difference in high word is\n+\t   well predictable (as seen from the branch predictor).  */\n+__eqdf2:\n+\tbrne.d DBL0H,DBL1H,.Lhighdiff\n+\tbmsk r12,DBL0H,20\n+#ifdef DPFP_COMPAT\n+\tor.f 0,DBL0L,DBL1L\n+\tbset.ne r12,r12,21\n+#endif /* DPFP_COMPAT */\n+\tadd1.f\tr12,r12,DBL0H /* set c iff NaN; also, clear z if NaN.  */\n+\tj_s.d\t[blink]\n+\tcmp.cc\tDBL0L,DBL1L\n+\t.balign 4\n+.Lhighdiff:\n+\tor\tr12,DBL0H,DBL1H\n+\tor.f\t0,DBL0L,DBL1L\n+\tj_s.d\t[blink]\n+\tbmsk.eq.f r12,r12,30\n+\tENDFUNC(__eqdf2)\n+/* ??? could we do better by speeding up some 'common' case of inequality?  */"}, {"sha": "3935d6bab7314c793c19c642b97bc2e60a540723", "filename": "libgcc/config/arc/ieee-754/eqsf2.S", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Feqsf2.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Feqsf2.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Feqsf2.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,69 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"arc-ieee-754.h\"\n+/* inputs: r0, r1\n+   output: z flag\n+   clobber: r12, flags\n+   For NaNs, bit 22 .. bit 30 must be set.  */\n+#if 0 /* DEBUG */\n+\t.global __eqsf2\n+\t.balign 4\n+\tFUNC(__eqsf2)\n+__eqsf2:\n+\tst.a r11,[sp,-4]` push_s blink` st.a r10,[sp,-4]` st.a r9,[sp,-4]\n+\tst.a r8,[sp,-4]` st.a r7,[sp,-4]` st.a r6,[sp,-4]` st.a r5,[sp,-4]\n+\tst.a r4,[sp,-4]` push_s r3` push_s r2` push_s r1`\n+\tbl.d __eqsf2_c` push_s r0\n+\tmov r11,r0` pop_s r0` pop_s r1` pop_s r2` pop_s r3\n+\tld.ab r4,[sp,4]` ld.ab r5,[sp,4]` ld.ab r6,[sp,4]`\n+\tld.ab r7,[sp,4]` ld.ab r8,[sp,4]` ld.ab r9,[sp,4]\n+\tbl.d __eqsf2_asm` ld.ab r10,[sp,4]\n+\tpop_s blink\n+\tbreq.d r11,0,0f\n+\tld.ab r11,[sp,4]\n+\tjne_s [blink]\n+\tbl abort\n+0:\tjeq_s [blink]\n+\tbl abort\n+\tENDFUNC(__eqsf2)\n+#define __eqsf2 __eqsf2_asm\n+#endif /* DEBUG */\n+\t/* Good performance as long as the binary difference is\n+\t   well predictable (as seen from the branch predictor).  */\n+\t.global __eqsf2\n+\t.balign 4\n+\tHIDDEN_FUNC(__eqsf2)\n+__eqsf2:\n+\tbreq\tr0, r1,.Lno_bdiff\n+\tor\tr12,r0,r1\n+\tj_s.d\t[blink]\n+\tbmsk.f\t0,r12,30\n+.Lno_bdiff:\n+\tbmsk r12,r0,23\n+\tadd1.f\tr12,r12,r0 /* set c iff NaN; also, clear z if NaN.  */\n+\tj_s.d\t[blink]\n+\tcmp.cc\tr0,r1\n+\tENDFUNC(__eqsf2)"}, {"sha": "2e2962f3bdc1fcba6dd84c26b2d73b4e7812ccd9", "filename": "libgcc/config/arc/ieee-754/extendsfdf2.S", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Fextendsfdf2.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Fextendsfdf2.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Fextendsfdf2.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,122 @@\n+/* Copyright (C) 2006, 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"arc-ieee-754.h\"\n+\n+#if 0 /* DEBUG */\n+\t.global __extendsfdf2\n+\t.balign 4\n+\tFUNC(__extendsfdf2)\n+__extendsfdf2:\n+\tpush_s blink\n+\tbl.d __extendsfdf2_c\n+\tpush_s r0\n+\tld_s r2,[sp]\n+\tst_s r1,[sp]\n+\tpush_s r0\n+\tbl.d __extendsfdf2_asm\n+\tmov_s r0,r2\n+\tpop_s r2\n+\tpop_s r3\n+\tpop_s blink\n+\tcmp r0,r2\n+\tcmp.eq r1,r3\n+\tjeq_s [blink]\n+\tbl abort\n+\tENDFUNC(__extendsfdf2)\n+#define __extendsfdf2 __extendsfdf2_asm\n+#endif /* DEBUG */\n+#if 0 /* ARC600 */\n+__extendsfdf2:\n+\tlsr r2,r0,23\n+\ttst r2,0xff\n+\tbic.ne.f r2,0xff\n+\tbeq_s .Linf_nan_denorm_0\n+..\n+.Linf_nan_denorm:\n+\tbbit1 r0,30,.Linf_nan\n+#endif\n+\t.global __extendsfdf2\n+\t.balign 4\n+\tFUNC(__extendsfdf2)\n+__extendsfdf2:\n+\tadd.f r1,r0,r0\n+\tnorm r3,r1\n+#ifdef __LITTLE_ENDIAN__\n+\tlsr_s DBL0H,r1,4\n+\tbrhs r3,7,.Linf_nan_denorm_0\n+\tasl_s DBL0L,r0,29\n+\tadd_s DBL0H,DBL0H, \\\n+\t\t0x38000000\n+#else\n+\tlsr r2,r1,4\n+\tbrhs r3,7,.Linf_nan_denorm_0\n+\tasl_s DBL0L,r1,28\n+\tadd DBL0H,r2, \\\n+\t\t0x38000000\n+#endif\n+\tj_s.d [blink]\n+\tbxor.cs DBL0H,DBL0H,31\n+\t.balign 4\n+.Linf_nan_denorm_0:\n+#ifdef __LITTLE_ENDIAN__\n+\tmov_s DBL0H,r0\n+\tjeq.d [blink]\n+\tmov.eq DBL0L,0\n+#else\n+\tjeq_s [blink]\n+#endif\n+\tbmi .Linf_nan\n+\tasl_s r0,r0,r3\n+\trsub r3,r3,0x380+6\n+#ifdef __LITTLE_ENDIAN__\n+\tasl_s r3,r3,20\n+\tlsr DBL0H,r0,9\n+\tasl_s DBL0L,r0,23\n+\tadd_s DBL0H,DBL0H,r3\n+\tj_s.d [blink]\n+\tbxor.cs DBL0H,DBL0H,31\n+#else\n+\tasl DBL0L,r0,23\n+\tlsr_s DBL0H,r0,9\n+\tasl_s r3,r3,20\n+\tbxor.cs DBL0H,DBL0H,31\n+\tj_s.d [blink]\n+\tadd_l DBL0H,DBL0H,r3\n+#endif\n+.Linf_nan:\n+#ifdef __LITTLE_ENDIAN__\n+\tlsr DBL0H,r0,3\n+\n+\tor_s DBL0H,DBL0H,r0\n+\tj_s.d [blink]\n+\tmov_l DBL0L,0\n+#else\n+\tlsr r3,r0,3\n+\tmov_s DBL0L,0\n+\tj_s.d [blink]\n+\tor_l DBL0H,r0,r3\n+#endif\n+\tENDFUNC(__extendsfdf2)"}, {"sha": "3c95998d25f75583227a4ff66cc76607582587ce", "filename": "libgcc/config/arc/ieee-754/fixdfsi.S", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Ffixdfsi.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Ffixdfsi.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Ffixdfsi.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,85 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"arc-ieee-754.h\"\n+\n+#if 0 /* DEBUG */\n+\tFUNC(__fixdfsi)\n+\t.global __fixdfsi\n+\t.balign 4\n+__fixdfsi:\n+\tpush_s blink\n+\tpush_s r0\n+\tbl.d __fixdfsi_c\n+\tpush_s r1\n+\tmov_s r2,r0\n+\tpop_s r1\n+\tld r0,[sp]\n+\tbl.d __fixdfsi_asm\n+\tst r2,[sp]\n+\tpop_s r1\n+\tpop_s blink\n+\tcmp r0,r1\n+\tjeq_s [blink]\n+\tbl abort\n+\tENDFUNC(__fixdfsi)\n+#define __fixdfsi __fixdfsi_asm\n+#endif /* DEBUG */\n+\n+/*      If the fraction has to be shifted left by a positive non-zero amount,\n+        we have to combine bits from DBL0L and DBL0H.  If we shift right,\n+        or shift by zero, we only want to have the bits from DBL0H in r0.  */\n+\n+\t.global __fixdfsi\n+\tFUNC(__fixdfsi)\n+\t.balign 4\n+__fixdfsi:\n+\tbbit0 DBL0H,30,.Lret0or1\n+\tasr r2,DBL0H,20\n+\tbmsk_s DBL0H,DBL0H,19\n+\tsub_s r2,r2,19; 0x3ff+20-0x400\n+\tneg_s r3,r2\n+\tasr.f 0,r3,11\n+\tbset_s DBL0H,DBL0H,20\n+#ifdef __LITTLE_ENDIAN__\n+\tmov.cs DBL0L,DBL0H\n+\tasl DBL0H,DBL0H,r2\n+#else\n+\tasl.cc DBL0H,DBL0H,r2\n+\tlsr.cs DBL0H,DBL0H,r3\n+#endif\n+\tlsr_s DBL0L,DBL0L,r3\n+\n+\tadd.cc r0,r0,r1\n+\tj_s.d [blink]\n+\tneg.pl r0,r0\n+.Lret0or1:\n+\tadd.f r0,DBL0H,0x100000\n+\tlsr_s r0,r0,30\n+\n+\tbmsk_s r0,r0,0\n+\tj_s.d [blink]\n+\tneg.mi r0,r0\n+\tENDFUNC(__fixdfsi)"}, {"sha": "b07b02cdcd26fbee310d258bfe5e6a0f05704648", "filename": "libgcc/config/arc/ieee-754/fixsfsi.S", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Ffixsfsi.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Ffixsfsi.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Ffixsfsi.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,71 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"arc-ieee-754.h\"\n+\n+#if 0 /* DEBUG */\n+\t.global __fixsfsi\n+\tFUNC(__fixsfsi)\n+\t.balign 4\n+__fixsfsi:\n+\tpush_s blink\n+\tbl.d __fixsfsi_c\n+\tpush_s r0\n+\tld_s r1,[sp]\n+\tst_s r0,[sp]\n+\tbl.d __fixsfsi_asm\n+\tmov_s r0,r1\n+\tpop_s r1\n+\tpop_s blink\n+\tcmp r0,r1\n+\tjeq_s [blink]\n+\tbl abort\n+\tENDFUNC(__fixsfsi)\n+#define __fixsfsi __fixsfsi_asm\n+#endif /* DEBUG */\n+\n+\t.global __fixsfsi\n+\tFUNC(__fixsfsi)\n+\t.balign 4\n+__fixsfsi:\n+\tbbit0 r0,30,.Lret0or1\n+\tlsr r2,r0,23\n+\tbmsk_s r0,r0,22\n+\tbset_s r0,r0,23\n+\tsub_s r2,r2,22;0x7f+23-0x80\n+\tasl.f 0,r2,24\n+\tneg r3,r2\n+\tasl.mi r0,r0,r2\n+\tlsr.pl r0,r0,r3\n+\tj_s.d [blink]\n+\tneg.cs r0,r0\n+.Lret0or1:\n+\tadd.f r0,r0,0x800000\n+\tlsr_s r0,r0,30\n+\n+\tbmsk_s r0,r0,0\n+\tj_s.d [blink]\n+\tneg.mi r0,r0\n+\tENDFUNC(__fixsfsi)"}, {"sha": "12260a0b0442147c50a6d0c3aff9ea92a725f0a6", "filename": "libgcc/config/arc/ieee-754/fixunsdfsi.S", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Ffixunsdfsi.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Ffixunsdfsi.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Ffixunsdfsi.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,80 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"arc-ieee-754.h\"\n+\n+#if 0 /* DEBUG */\n+\tFUNC(__fixunsdfsi)\n+\t.global __fixunsdfsi\n+\t.balign 4\n+__fixunsdfsi:\n+\tpush_s blink\n+\tpush_s r0\n+\tbl.d __fixunsdfsi_c\n+\tpush_s r1\n+\tmov_s r2,r0\n+\tpop_s r1\n+\tld r0,[sp]\n+\tbl.d __fixunsdfsi_asm\n+\tst r2,[sp]\n+\tpop_s r1\n+\tpop_s blink\n+\tcmp r0,r1\n+\tjeq_s [blink]\n+\tbl abort\n+\tENDFUNC(__fixunsdfsi)\n+#define __fixunsdfsi __fixunsdfsi_asm\n+#endif /* DEBUG */\n+\n+\t.global __fixunsdfsi\n+\tFUNC(__fixunsdfsi)\n+\t.balign 4\n+__fixunsdfsi:\n+\tbbit0 DBL0H,30,.Lret0or1\n+\tlsr r2,DBL0H,20\n+\tbmsk_s DBL0H,DBL0H,19\n+\tsub_s r2,r2,19; 0x3ff+20-0x400\n+\tneg_s r3,r2\n+\tbtst_s r3,10\n+\tbset_s DBL0H,DBL0H,20\n+#ifdef __LITTLE_ENDIAN__\n+\tmov.ne DBL0L,DBL0H\n+\tasl DBL0H,DBL0H,r2\n+#else\n+\tasl.eq DBL0H,DBL0H,r2\n+\tlsr.ne DBL0H,DBL0H,r3\n+#endif\n+\tlsr DBL0L,DBL0L,r3\n+\tj_s.d [blink]\n+\tadd.eq r0,r0,r1\n+.Lret0:\n+\tj_s.d [blink]\n+\tmov_l r0,0\n+.Lret0or1:\n+\tadd_s DBL0H,DBL0H,0x100000\n+\tlsr_s DBL0H,DBL0H,30\n+\tj_s.d [blink]\n+\tbmsk_l r0,DBL0H,0\n+\tENDFUNC(__fixunsdfsi)"}, {"sha": "2992673916b142f9dbe55d3fc443b1bebff19cdc", "filename": "libgcc/config/arc/ieee-754/floatsidf.S", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Ffloatsidf.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Ffloatsidf.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Ffloatsidf.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,77 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"arc-ieee-754.h\"\n+\n+#if 0 /* DEBUG */\n+\t.global __floatsidf\n+\t.balign 4\n+\tFUNC(__floatsidf)\n+__floatsidf:\n+\tpush_s blink\n+\tbl.d __floatsidf_c\n+\tpush_s r0\n+\tld_s r2,[sp]\n+\tst_s r1,[sp]\n+\tpush_s r0\n+\tbl.d __floatsidf_asm\n+\tmov_s r0,r2\n+\tpop_s r2\n+\tpop_s r3\n+\tpop_s blink\n+\tcmp r0,r2\n+\tcmp.eq r1,r3\n+\tjeq_s [blink]\n+\tbl abort\n+\tENDFUNC(__floatsidf)\n+#define __floatsidf __floatsidf_asm\n+#endif /* DEBUG */\n+\n+\t.global __floatsidf\n+\t.balign 4\n+\tFUNC(__floatsidf)\n+__floatsidf:\n+\tabs.f r1,r0\n+\tjeq_s [blink]\n+\tlsr r2,r1\n+\tmov r12,-0x41d ; -(0x3ff+31-1)\n+\tnorm r2,r2\n+\tbclr.cs r12,r12,11\n+\trsub.f r3,r2,11\n+\tadd_s r12,r2,r12\n+\tadd_s r2,r2,21\n+#ifdef __LITTLE_ENDIAN__\n+\tasl DBL0L,r1,r2\n+\tlsr_s DBL0H,r1,r3\n+#else\n+\tlsr DBL0H,r1,r3\n+\tasl_s DBL0L,r1,r2\n+#endif\n+\tasl_s r12,r12,20\n+\tmov.lo DBL0H,DBL0L\n+\tsub_s DBL0H,DBL0H,r12\n+\tj_s.d [blink]\n+\tmov.ls DBL0L,0\n+\tENDFUNC(__floatsidf)"}, {"sha": "7aba15813fe9debce0b0c23286179fbcd7d2d83b", "filename": "libgcc/config/arc/ieee-754/floatsisf.S", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Ffloatsisf.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Ffloatsisf.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Ffloatsisf.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,99 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"arc-ieee-754.h\"\n+\n+#if 0 /* DEBUG */\n+\t.global __floatsisf\n+\tFUNC(__floatsisf)\n+\t.balign 4\n+__floatsisf:\n+\tpush_s blink\n+\tbl.d __floatsisf_c\n+\tpush_s r0\n+\tld_s r1,[sp]\n+\tst_s r0,[sp]\n+\tbl.d __floatsisf_asm\n+\tmov_s r0,r1\n+\tpop_s r1\n+\tpop_s blink\n+\tcmp r0,r1\n+\tjeq_s [blink]\n+\tbl abort\n+\tENDFUNC(__floatsisf)\n+\t.global __floatunsisf\n+\tFUNC(__floatunsisf)\n+\t.balign 4\n+__floatunsisf:\n+\tpush_s blink\n+\tbl.d __floatunsisf_c\n+\tpush_s r0\n+\tld_s r1,[sp]\n+\tst_s r0,[sp]\n+\tbl.d __floatunsisf_asm\n+\tmov_s r0,r1\n+\tpop_s r1\n+\tpop_s blink\n+\tcmp r0,r1\n+\tjeq_s [blink]\n+\tbl abort\n+\tENDFUNC(__floatunsisf)\n+#define __floatsisf __floatsisf_asm\n+#define __floatunsisf __floatunsisf_asm\n+#endif /* DEBUG */\n+\n+\t.global __floatunsisf\n+\t.global __floatsisf\n+\tFUNC(__floatsisf)\n+\tFUNC(__floatunsisf)\n+\t.balign 4\n+__floatunsisf:\n+\tlsr_s r2,r0\n+\tmov_l r12,0x9d ; 0x7f + 31 - 1\n+\tnorm r2,r2\n+\tbrne_l r0,0,0f\n+\tj_s [blink]\n+\t.balign 4\n+__floatsisf:\n+\tabs.f r0,r0\n+\tjeq_s [blink]\n+\tlsr_s r2,r0\n+\tmov_s r12,0x9d ; 0x7f + 31 - 1\n+\tnorm r2,r2\n+\tbset.cs r12,r12,8\n+0:\trsub.f r3,r2,8\n+\tbmsk r1,r0,r3\n+\tror r1,r1,r3\n+\tlsr.pl r0,r0,r3\n+\tneg_s r3,r3\n+\tasl.mi r0,r0,r3\n+\tsub_s r12,r12,r2\n+\tasl_s r12,r12,23\n+\tbxor.pl.f r1,r1,31\n+\tadd_s r0,r0,r12\n+\tj_s.d [blink]\n+\tadd.pnz r0,r0,1\n+\tENDFUNC(__floatunsisf)\n+\tENDFUNC(__floatsisf)"}, {"sha": "5c59024fbf6a9118db205c2d7c4399e5d95a4d7f", "filename": "libgcc/config/arc/ieee-754/floatunsidf.S", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Ffloatunsidf.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Ffloatunsidf.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Ffloatunsidf.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,75 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"arc-ieee-754.h\"\n+\n+#if 0 /* DEBUG */\n+\t.global __floatunsidf\n+\t.balign 4\n+\tFUNC(__floatunsidf)\n+__floatunsidf:\n+\tpush_s blink\n+\tbl.d __floatunsidf_c\n+\tpush_s r0\n+\tld_s r2,[sp]\n+\tst_s r1,[sp]\n+\tpush_s r0\n+\tbl.d __floatunsidf_asm\n+\tmov_s r0,r2\n+\tpop_s r2\n+\tpop_s r3\n+\tpop_s blink\n+\tcmp r0,r2\n+\tcmp.eq r1,r3\n+\tjeq_s [blink]\n+\tbl abort\n+\tENDFUNC(__floatunsidf)\n+#define __floatunsidf __floatunsidf_asm\n+#endif /* DEBUG */\n+\n+\t.global __floatunsidf\n+\t.balign 4\n+\tFUNC(__floatunsidf)\n+__floatunsidf:\n+\tlsr_s r1,r0\n+\tbreq_s r0,0,.Lret0\n+\tnorm r2,r1\n+\tmov r12,-0x41d ; -(0x3ff+31-1)\n+\trsub.f r3,r2,11\n+\tadd_s r12,r2,r12\n+\tadd_s r2,r2,21\n+#ifdef __LITTLE_ENDIAN__\n+\tlsr DBL0H,r0,r3\n+\tasl_s DBL0L,r0,r2\n+#else\n+\tasl DBL0L,r0,r2\n+\tlsr_s DBL0H,r0,r3\n+#endif\n+\tasl_s r12,r12,20\n+\tmov.lo DBL0H,DBL0L\n+\tsub_s DBL0H,DBL0H,r12\n+.Lret0:\tj_s.d [blink]\n+\tmov.ls DBL0L,0\n+\tENDFUNC(__floatunsidf)"}, {"sha": "526f67c7fc060c7b3123b863aa2999f04a56bec9", "filename": "libgcc/config/arc/ieee-754/gedf2.S", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Fgedf2.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Fgedf2.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Fgedf2.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,86 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"arc-ieee-754.h\"\n+/* inputs: DBL0, DBL1\n+   output: c flags to be used for 'hs' condition\n+   clobber: r12, flags  */\n+/* For NaNs, bit 19.. bit 30 of the high word must be set.  */\n+#if 0 /* DEBUG */\n+\t.global __gedf2\n+\t.balign 4\n+\tFUNC(__gedf2)\n+__gedf2:\n+\tst.a r11,[sp,-4]` push_s blink` st.a r10,[sp,-4]` st.a r9,[sp,-4]\n+\tst.a r8,[sp,-4]` st.a r7,[sp,-4]` st.a r6,[sp,-4]` st.a r5,[sp,-4]\n+\tst.a r4,[sp,-4]` push_s r3` push_s r2` push_s r1`\n+\tbl.d __gedf2_c` push_s r0\n+\tmov r11,r0` pop_s r0` pop_s r1` pop_s r2` pop_s r3\n+\tld.ab r4,[sp,4]` ld.ab r5,[sp,4]` ld.ab r6,[sp,4]`\n+\tld.ab r7,[sp,4]` ld.ab r8,[sp,4]` ld.ab r9,[sp,4]\n+\tbl.d __gedf2_asm` ld.ab r10,[sp,4]\n+\tpop_s blink\n+\tbrge.d r11,0,0f\n+\tld.ab r11,[sp,4]\n+\tjlo [blink]\n+\tbl abort\n+0:\tjhs [blink]\n+\tbl abort\n+\tENDFUNC(__gedf2)\n+#define __gedf2 __gedf2_asm\n+#endif /* DEBUG */\n+\t.global __gedf2\n+\t.balign\t4\n+\tHIDDEN_FUNC(__gedf2)\n+__gedf2:\n+\tor.f\tr12,DBL0H,DBL1H\n+\tbmi.d\t.Lneg\n+\tbmsk_s\tr12,r12,20\n+\tadd1.f\t0,r12,DBL0H\t; clear z; set c iff NaN\n+\tadd1.cc.f r12,r12,DBL1H\t; clear z; set c iff NaN\n+\tbbit1\tDBL0H,31,.Lneg\n+\tcmp.cc\tDBL0H,DBL1H\n+\tj_s.d\t[blink]\n+\tcmp.eq\tDBL0L,DBL1L\n+\t.balign 4\n+.Lneg:\tbreq.d\tDBL1H,0,.L0\n+\tadd1.f\t0,r12,DBL0H\n+\tadd1.cc.f r12,r12,DBL1H\n+\tcmp.cc\tDBL1H,DBL0H\n+\tj_s.d\t[blink]\n+\tcmp.eq\tDBL1L,DBL0L\n+\t.balign 4\n+.L0:\n+\tbxor.f\t0,DBL0H,31 ; check for high word of -0.\n+\tbeq_s\t.Lcheck_0\n+\tcmp.cc\tDBL1H,DBL0H\n+\tj_s.d\t[blink]\n+\tcmp.eq\tDBL1L,DBL0L\n+.Lcheck_0:\n+\t; high words suggest DBL0 may be -0, DBL1 +0; check low words.\n+\tcmp_s\tDBL1H,DBL0L\n+\tj_s.d\t[blink]\n+\tcmp.cc\tDBL1H,DBL1L\n+\tENDFUNC(__gedf2)"}, {"sha": "089fe7923cfff9aec946fb8202014b2b5a4f06a6", "filename": "libgcc/config/arc/ieee-754/gesf2.S", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Fgesf2.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Fgesf2.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Fgesf2.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,75 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"arc-ieee-754.h\"\n+/* inputs: r0, r1\n+   output: c flag to be used for 'hs' condition\n+   clobber: r12,flags  */\n+/* For NaNs, bit 22.. bit 30 must be set.  */\n+#if 0 /* DEBUG */\n+\t.global __gesf2\n+\t.balign 4\n+\tFUNC(__gesf2)\n+__gesf2:\n+\tst.a r11,[sp,-4]` push_s blink` st.a r10,[sp,-4]` st.a r9,[sp,-4]\n+\tst.a r8,[sp,-4]` st.a r7,[sp,-4]` st.a r6,[sp,-4]` st.a r5,[sp,-4]\n+\tst.a r4,[sp,-4]` push_s r3` push_s r2` push_s r1`\n+\tbl.d __gesf2_c` push_s r0\n+\tmov r11,r0` pop_s r0` pop_s r1` pop_s r2` pop_s r3\n+\tld.ab r4,[sp,4]` ld.ab r5,[sp,4]` ld.ab r6,[sp,4]`\n+\tld.ab r7,[sp,4]` ld.ab r8,[sp,4]` ld.ab r9,[sp,4]\n+\tbl.d __gesf2_asm` ld.ab r10,[sp,4]\n+\tpop_s blink\n+\tbrge.d r11,0,0f\n+\tld.ab r11,[sp,4]\n+\tjlo [blink]\n+\tbl abort\n+0:\tjhs [blink]\n+\tbl abort\n+\tENDFUNC(__gesf2)\n+#define __gesf2 __gesf2_asm\n+#endif /* DEBUG */\n+\t.global __gesf2\n+\t.balign\t4\n+\tHIDDEN_FUNC(__gesf2)\n+__gesf2:\n+\tor.f\tr12,r0,r1\n+\tbmi.d\t.Lneg\n+\tbmsk_s\tr12,r12,23\n+\tadd1.f\t0,r12,r0 ; check for NaN\n+\tadd1.cc.f r12,r12,r1\n+\tj_s.d\t[blink]\n+\tcmp.cc\tr0,r1\n+\t.balign\t4\n+.Lneg:\tbreq.d\tr1,0,.L0\n+\tadd1.f\t0,r12,r0 ; check for NaN\n+\tadd1.cc.f r12,r12,r1\n+\tj_s.d\t[blink]\n+\tcmp.cc r1,r0\n+\t.balign\t4\n+.L0:\tbxor.f\t0,r0,31 ; check for -0\n+\tj_s.d\t[blink]\n+\tcmp.hi\tr1,r0\n+\tENDFUNC(__gesf2)"}, {"sha": "89b65e8d190dd12a976fda4ccac3594b7a37babf", "filename": "libgcc/config/arc/ieee-754/gtdf2.S", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Fgtdf2.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Fgtdf2.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Fgtdf2.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,86 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"arc-ieee-754.h\"\n+/* inputs: DBL0, DBL1\n+   output: c,z flags to be used for 'hi' condition\n+   clobber: r12, flags  */\n+/* For NaNs, bit 19.. bit 30 of the high word must be set.  */\n+#if 0 /* DEBUG */\n+\t.global __gtdf2\n+\t.balign 4\n+\tFUNC(__gtdf2)\n+__gtdf2:\n+\tst.a r11,[sp,-4]` push_s blink` st.a r10,[sp,-4]` st.a r9,[sp,-4]\n+\tst.a r8,[sp,-4]` st.a r7,[sp,-4]` st.a r6,[sp,-4]` st.a r5,[sp,-4]\n+\tst.a r4,[sp,-4]` push_s r3` push_s r2` push_s r1`\n+\tbl.d __gtdf2_c` push_s r0\n+\tmov r11,r0` pop_s r0` pop_s r1` pop_s r2` pop_s r3\n+\tld.ab r4,[sp,4]` ld.ab r5,[sp,4]` ld.ab r6,[sp,4]`\n+\tld.ab r7,[sp,4]` ld.ab r8,[sp,4]` ld.ab r9,[sp,4]\n+\tbl.d __gtdf2_asm` ld.ab r10,[sp,4]\n+\tpop_s blink\n+\tbrgt.d r11,0,0f\n+\tld.ab r11,[sp,4]\n+\tjls [blink]\n+\tbl abort\n+0:\tjhi [blink]\n+\tbl abort\n+\tENDFUNC(__gtdf2)\n+#define __gtdf2 __gtdf2_asm\n+#endif /* DEBUG */\n+\t.global __gtdf2\n+\t.balign\t4\n+\tHIDDEN_FUNC(__gtdf2)\n+__gtdf2:\n+\tor.f\tr12,DBL0H,DBL1H\n+\tbmi.d\t.Lneg\n+\tbmsk_s\tr12,r12,20\n+\tadd1.f\t0,r12,DBL0H\t; clear z; set c iff NaN\n+\tadd1.cc.f r12,r12,DBL1H\t; clear z; set c iff NaN\n+\t; don't care: z may or may not be cleared if there is no NaN event\n+\tcmp.cc\tDBL0H,DBL1H\n+\tj_s.d\t[blink]\n+\tcmp.eq\tDBL0L,DBL1L\n+\t.balign 4\n+.Lneg:\tbreq.d\tDBL0H,0,.L0\n+\tadd1.f\t0,r12,DBL1H\n+\tadd1.cc.f r12,r12,DBL0H\n+\tcmp.cc\tDBL1H,DBL0H\n+\tj_s.d\t[blink]\n+\tcmp.eq\tDBL1L,DBL0L\n+\t.balign 4\n+.L0:\n+\tbxor.f\t0,DBL1H,31\n+\tbeq_s\t.Lcheck_0\n+\tcmp.cc\tDBL1H,DBL0H\n+\tj_s.d\t[blink]\n+\tcmp.eq\tDBL1L,DBL0L\n+\t.balign\t4\n+.Lcheck_0:\n+\t; high words suggest DBL0 may be +0, DBL1 -0; check low words.\n+\tj_s.d\t[blink]\n+\tor.f\t0,DBL0L,DBL1L\n+\tENDFUNC(__gtdf2)"}, {"sha": "c4660d37dd482d5906458cea5dca56155e22d49c", "filename": "libgcc/config/arc/ieee-754/gtsf2.S", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Fgtsf2.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Fgtsf2.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Fgtsf2.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,75 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"arc-ieee-754.h\"\n+/* inputs: r0, r1\n+   output: c, z flags to be used for 'hi' condition\n+   clobber: r12,flags  */\n+/* For NaNs, bit 22.. bit 30 must be set.  */\n+#if 0 /* DEBUG */\n+\t.global __gtsf2\n+\t.balign 4\n+\tFUNC(__gtsf2)\n+__gtsf2:\n+\tst.a r11,[sp,-4]` push_s blink` st.a r10,[sp,-4]` st.a r9,[sp,-4]\n+\tst.a r8,[sp,-4]` st.a r7,[sp,-4]` st.a r6,[sp,-4]` st.a r5,[sp,-4]\n+\tst.a r4,[sp,-4]` push_s r3` push_s r2` push_s r1`\n+\tbl.d __gtsf2_c` push_s r0\n+\tmov r11,r0` pop_s r0` pop_s r1` pop_s r2` pop_s r3\n+\tld.ab r4,[sp,4]` ld.ab r5,[sp,4]` ld.ab r6,[sp,4]`\n+\tld.ab r7,[sp,4]` ld.ab r8,[sp,4]` ld.ab r9,[sp,4]\n+\tbl.d __gtsf2_asm` ld.ab r10,[sp,4]\n+\tpop_s blink\n+\tbrgt.d r11,0,0f\n+\tld.ab r11,[sp,4]\n+\tjls [blink]\n+\tbl abort\n+0:\tjhi [blink]\n+\tbl abort\n+\tENDFUNC(__gtsf2)\n+#define __gtsf2 __gtsf2_asm\n+#endif /* DEBUG */\n+\t.global __gtsf2\n+\t.balign\t4\n+\tHIDDEN_FUNC(__gtsf2)\n+__gtsf2:\n+\tor.f\tr12,r0,r1\n+\tbmi.d\t.Lneg\n+\tbmsk_s\tr12,r12,23\n+\tadd1.f\t0,r12,r0 ; check for NaN\n+\tadd1.cc.f r12,r12,r1\n+\tj_s.d\t[blink]\n+\tcmp.cc\tr0,r1\n+\t.balign\t4\n+.Lneg:\tbreq.d\tr0,0,.L0\n+\tadd1.f\t0,r12,r0 ; check for NaN\n+\tadd1.cc.f r12,r12,r1\n+\tj_s.d\t[blink]\n+\tcmp.cc r1,r0\n+\t.balign\t4\n+.L0:\tbxor.f\t0,r1,31 ; check for -0\n+\tj_s.d\t[blink]\n+\tcmp.hi\tr1,r0\n+\tENDFUNC(__gtsf2)"}, {"sha": "21941fbf9e40be6c0ffa801bfbcf3a6c45444112", "filename": "libgcc/config/arc/ieee-754/muldf3.S", "status": "added", "additions": 235, "deletions": 0, "changes": 235, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Fmuldf3.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Fmuldf3.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Fmuldf3.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,235 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* XMAC schedule: directly back-to-back multiplies stall; the third\n+   instruction after a multiply stalls unless it is also a multiply.  */\n+#include \"arc-ieee-754.h\"\n+\n+#if 0 /* DEBUG */\n+\t.global __muldf3\n+\t.balign 4\n+__muldf3:\n+\tpush_s blink\n+\tpush_s r2\n+\tpush_s r3\n+\tpush_s r0\n+\tbl.d __muldf3_c\n+\tpush_s r1\n+\tld_s r2,[sp,12]\n+\tld_s r3,[sp,8]\n+\tst_s r0,[sp,12]\n+\tst_s r1,[sp,8]\n+\tpop_s r1\n+\tbl.d __muldf3_asm\n+\tpop_s r0\n+\tpop_s r3\n+\tpop_s r2\n+\tpop_s blink\n+\tcmp r0,r2\n+\tcmp.eq r1,r3\n+\tjeq_s [blink]\n+\tb abort\n+#define __muldf3 __muldf3_asm\n+#endif /* DEBUG */\n+/* N.B. This is optimized for ARC700.\n+  ARC600 has very different scheduling / instruction selection criteria.  */\n+/* For the standard multiplier, instead of mpyu rx,DBL0L,DBL1L; tst rx,rx  ,\n+   we can do:\n+   sub rx,DBL0L,1; bic rx,DBL0L,rx; lsr rx,rx; norm rx,rx; asl.f 0,DBL1L,rx  */\n+\n+__muldf3_support: /* This label makes debugger output saner.  */\n+/* If one number is denormal, subtract some from the exponent of the other\n+   one (if the other exponent is too small, return 0), and normalize the\n+   denormal.  Then re-run the computation.  */\n+\t.balign 4\n+\tFUNC(__muldf3)\n+.Ldenorm_dbl0:\n+\tmov_s r12,DBL0L\n+\tmov_s DBL0L,DBL1L\n+\tmov_s DBL1L,r12\n+\tmov_s r12,DBL0H\n+\tmov_s DBL0H,DBL1H\n+\tmov_s DBL1H,r12\n+\tand r11,DBL0H,r9\n+.Ldenorm_dbl1:\n+\tbrhs r11,r9,.Linf_nan\n+\tbrhs 0x3ca00001,r11,.Lret0\n+\tsub_s DBL0H,DBL0H,DBL1H\n+\tbmsk_s DBL1H,DBL1H,30\n+\tadd_s DBL0H,DBL0H,DBL1H\n+\tbreq_s DBL1H,0,.Ldenorm_2\n+\tnorm r12,DBL1H\n+\n+\tsub_s r12,r12,10\n+\tasl r5,r12,20\n+\tasl_s DBL1H,DBL1H,r12\n+\tsub DBL0H,DBL0H,r5\n+\tneg r5,r12\n+\tlsr r6,DBL1L,r5\n+\tasl_s DBL1L,DBL1L,r12\n+\tb.d __muldf3\n+\tadd_s DBL1H,DBL1H,r6\n+\n+\t.balign 4\n+.Linf_nan:\n+\tbclr r12,DBL1H,31\n+\txor_s DBL1H,DBL1H,DBL0H\n+\tbclr_s DBL0H,DBL0H,31\n+\tmax r8,DBL0H,r12 ; either NaN -> NaN ; otherwise inf\n+\tor.f 0,DBL0H,DBL0L\n+\tmov_s DBL0L,0\n+\tor.ne.f DBL1L,DBL1L,r12\n+\tnot_s DBL0H,DBL0L ; inf * 0 -> NaN\n+\tmov.ne DBL0H,r8\n+\ttst_s DBL1H,DBL1H\n+\tj_s.d [blink]\n+\tbset.mi DBL0H,DBL0H,31\n+\n+.Lret0:\txor_s DBL0H,DBL0H,DBL1H\n+\tbclr DBL1H,DBL0H,31\n+\txor_s DBL0H,DBL0H,DBL1H\n+\tj_s.d [blink]\n+\tmov_l DBL0L,0\n+\n+\t.balign 4\n+.Ldenorm_2:\n+\tbreq_s DBL1L,0,.Lret0 ; 0 input -> 0 output\n+\tnorm.f r12,DBL1L\n+\n+\tmov.mi r12,21\n+\tadd.pl r12,r12,22\n+\tneg r11,r12\n+\tasl_s r12,r12,20\n+\tlsr.f DBL1H,DBL1L,r11\n+\tror DBL1L,DBL1L,r11\n+\tsub_s DBL0H,DBL0H,r12\n+\tmov.eq DBL1H,DBL1L\n+\tsub_s DBL1L,DBL1L,DBL1H\n+\t/* Fall through.  */\n+\t.global __muldf3\n+\t.balign 4\n+__muldf3:\n+\tld.as r9,[pcl,0x4b] ; ((.L7ff00000-.+2)/4)]\n+\tmpyhu r4,DBL0L,DBL1L\n+\tbmsk r6,DBL0H,19\n+\tbset r6,r6,20\n+\tmpyu r7,r6,DBL1L\n+\tand r11,DBL0H,r9\n+\tbreq r11,0,.Ldenorm_dbl0\n+\tmpyhu r8,r6,DBL1L\n+\tbmsk r10,DBL1H,19\n+\tbset r10,r10,20\n+\tmpyhu r5,r10,DBL0L\n+\tadd.f r4,r4,r7\n+\tand r12,DBL1H,r9\n+\tmpyhu r7,r6,r10\n+\tbreq r12,0,.Ldenorm_dbl1\n+\tadc.f r5,r5,r8\n+\tmpyu r8,r10,DBL0L\n+\tbreq r11,r9,.Linf_nan\n+\tbreq r12,r9,.Linf_nan\n+\tmpyu r6,r6,r10\n+\tadd.cs r7,r7,1\n+\tadd.f r4,r4,r8\n+\tmpyu r10,DBL1L,DBL0L\n+\tbclr r8,r9,30 ; 0x3ff00000\n+\tadc.f r5,r5,r6\n+\t; XMAC write-back stall / std. mult stall is one cycle later\n+\tbclr r6,r9,20 ; 0x7fe00000\n+\tadd.cs r7,r7,1 ; fraction product in r7:r5:r4\n+\ttst r10,r10\n+\tbset.ne r4,r4,0 ; put least significant word into sticky bit\n+\tlsr.f r10,r7,9\n+\tadd_l r12,r12,r11 ; add exponents\n+\trsub.eq r8,r8,r9 ; 0x40000000\n+\tsub r12,r12,r8 ; subtract bias + implicit 1\n+\tbrhs.d r12,r6,.Linf_denorm\n+\trsub r10,r10,12\n+.Lshift_frac:\n+\tneg r8,r10\n+\tasl r6,r4,r10\n+\tlsr DBL0L,r4,r8\n+\tadd.f 0,r6,r6\n+\tbtst.eq DBL0L,0\n+\tcmp.eq r4,r4 ; round to nearest / round to even\n+\tasl r4,r5,r10\n+\tlsr r5,r5,r8\n+\tadc.f DBL0L,DBL0L,r4\n+\txor.f 0,DBL0H,DBL1H\n+\tasl r7,r7,r10\n+\tadd_s r12,r12,r5\n+\tadc DBL0H,r12,r7\n+\tj_s.d [blink]\n+\tbset.mi DBL0H,DBL0H,31\n+\n+/* We have checked for infinitey / NaN input before, and transformed\n+   denormalized inputs into normalized inputs.  Thus, the worst case\n+   exponent overflows are:\n+       1 +     1 - 0x400 == 0xc02 : maximum underflow\n+   0x7fe + 0x7fe - 0x3ff == 0xbfd ; maximum overflow\n+   N.B. 0x7e and 0x7f are also values for overflow.\n+\n+   If (r12 <= -54), we have an underflow to zero.  */\n+\t.balign 4\n+.Linf_denorm:\n+\tbrlo r12,0xc0000000,.Linf\n+\tasr r6,r12,20\n+\tmov_s r12,0\n+\tadd.f r10,r10,r6\n+\tbrgt r10,0,.Lshift_frac\n+\tbeq_s .Lround_frac\n+\tadd.f r10,r10,32\n+.Lshift32_frac:\n+\ttst r4,r4\n+\tmov r4,r5\n+\tbset.ne r4,r4,1\n+\tmov r5,r7\n+\tmov r7,0\n+\tbrge r10,1,.Lshift_frac\n+\tbreq r10,0,.Lround_frac\n+\tadd.f r10,r10,32\n+\tbrgt r10,21,.Lshift32_frac\n+\tb_s .Lret0\n+\n+.Lround_frac:\n+\tadd.f 0,r4,r4\n+\tbtst.eq r5,0\n+\tmov_s DBL0L,r5\n+\tmov_s DBL0H,r7\n+\tadc.eq.f DBL0L,DBL0L,0\n+\tj_s.d [blink]\n+\n+\tadc.eq DBL0H,DBL0H,0\n+\n+.Linf:\txor.f DBL1H,DBL1H,DBL0H\n+\tmov_s DBL0L,0\n+\tmov_s DBL0H,r9\n+\tj_s.d [blink]\n+\tbset.mi DBL0H,DBL0H,31\n+\tENDFUNC(__muldf3)\n+\n+\t.balign 4\n+.L7ff00000:\n+\t.long 0x7ff00000"}, {"sha": "c931c3c947eeccb942db10c97368fa1914cf0406", "filename": "libgcc/config/arc/ieee-754/mulsf3.S", "status": "added", "additions": 180, "deletions": 0, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Fmulsf3.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Fmulsf3.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Fmulsf3.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,180 @@\n+/* Copyright (C) 2008-2013 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* XMAC schedule: directly back-to-back multiplies stall; the third\n+   instruction after a multiply stalls unless it is also a multiply.  */\n+#include \"arc-ieee-754.h\"\n+\n+#if 0 /* DEBUG */\n+\t.global __mulsf3\n+\tFUNC(__mulsf3)\n+\t.balign 4\n+__mulsf3:\n+\tpush_s blink\n+\tpush_s r1\n+\tbl.d __mulsf3_c\n+\tpush_s r0\n+\tld_s r1,[sp,4]\n+\tst_s r0,[sp,4]\n+\tbl.d __mulsf3_asm\n+\tpop_s r0\n+\tpop_s r1\n+\tpop_s blink\n+\tcmp r0,r1\n+\tjeq_s [blink]\n+\tand r12,r0,r1\n+\tbic.f 0,0x7f800000,r12\n+\tbne 0f\n+\tbmsk.f 0,r0,22\n+\tbmsk.ne.f r1,r1,22\n+\tjne_s [blink] ; both NaN -> OK\n+0:\tbl abort\n+\tENDFUNC(__mulsf3)\n+#define __mulsf3 __mulsf3_asm\n+#endif /* DEBUG */\n+\n+\t.balign\t4\n+\t.global\t__mulsf3\n+\tFUNC(__mulsf3)\n+__mulsf3:\n+\tld.as\tr9,[pcl,79]; [pcl,((.L7f800000-.+2)/4)]\n+\tbmsk\tr4,r1,22\n+\tbset\tr2,r0,23\n+\tasl_s\tr2,r2,8\n+\tbset\tr3,r4,23\n+\tmpyhu\tr6,r2,r3\n+\tand\tr11,r0,r9\n+\tbreq\tr11,0,.Ldenorm_dbl0\n+\tmpyu\tr7,r2,r3\n+\tbreq\tr11,r9,.Linf_nan_dbl0\n+\tand\tr12,r1,r9\n+\tasl.f\t0,r6,8\n+\tbreq\tr12,0,.Ldenorm_dbl1\n+.Lpast_denorm:\n+\txor_s\tr0,r0,r1\n+.Lpast_denorm_dbl1:\n+\tadd.pl\tr6,r6,r6\n+\tbclr.pl\tr6,r6,23\n+\tadd.pl.f r7,r7,r7\n+\tld.as\tr4,[pcl,64]; [pcl,((.L7fffffff-.+2)/4)]\n+\tadd.cs\tr6,r6,1\n+\tlsr.f\t0,r6,1\n+\tbreq\tr12,r9,.Linf_nan_dbl1\n+\tadd_s\tr12,r12,r11\n+\tadc.f\t0,r7,r4\n+\tadd_s\tr12,r12, \\\n+\t\t-0x3f800000\n+\tadc.f\tr8,r6,r12\n+\tbic\tr0,r0,r4\n+\ttst.pl\tr8,r9\n+\tmin\tr3,r8,r9\n+\tjpnz.d\t[blink]\n+\tadd.pnz\tr0,r0,r3\n+; infinity or denormal number\n+\tadd.ne.f r3,r3,r3\n+\tbpnz\t.Linfinity\n+\tasr_s\tr3,r3,23+1\n+\tbset\tr6,r6,23\n+\tsub_s\tr3,r3,1\n+\tneg_s\tr2,r3\n+\tbrhi\tr2,24,.Lret_r0 ; right shift shift > 24 -> return +-0\n+\tlsr\tr2,r6,r2\n+\tasl\tr9,r6,r3\n+\tlsr.f\t0,r2,1\n+\ttst\tr7,r7\n+\tadd_s\tr0,r0,r2\n+\tbset.ne\tr9,r9,0\n+\tadc.f\t0,r9,r4\n+\tj_s.d\t[blink]\n+\tadd.cs\tr0,r0,1\n+.Linfinity:\n+\tj_s.d\t[blink]\n+\tadd_s\tr0,r0,r9\n+\n+.Lret_r0: j_s [blink]\n+\n+\t.balign\t4\n+.Linf_nan_dbl0:\n+\tsub_s\tr2,r1,1 ; inf/nan * 0 -> nan; inf * nan -> nan (use |r2| >= inf)\n+\tbic.f\t0,r9,r2\n+\txor_s\tr0,r0,r1\n+\tbclr_s\tr1,r1,31\n+\txor_s\tr0,r0,r1\n+\tjne_s\t[blink]\n+.Lretnan:\n+\tj_s.d\t[blink]\n+\tmov\tr0,-1\n+.Ldenorm_dbl0_inf_nan_dbl1:\n+\tbmsk.f\t0,r0,30\n+\tbeq_s\t.Lretnan\n+\txor_s\tr0,r0,r1\n+.Linf_nan_dbl1:\n+\txor_s\tr1,r1,r0\n+\tbclr_s\tr1,r1,31\n+\tj_s.d\t[blink]\n+\txor_s\tr0,r0,r1\n+\n+\t.balign\t4\n+.Ldenorm_dbl0:\n+\tbclr_s\tr2,r2,31\n+\tnorm.f\tr4,r2\n+\tand\tr12,r1,r9\n+\tadd_s\tr2,r2,r2\n+\tasl\tr2,r2,r4\n+\tasl\tr4,r4,23\n+\tmpyhu\tr6,r2,r3\n+\tbreq\tr12,r9,.Ldenorm_dbl0_inf_nan_dbl1\n+\tsub.ne.f r12,r12,r4\n+\tmpyu\tr7,r2,r3\n+\tbhi.d\t.Lpast_denorm\n+\tasl.f\t0,r6,8\n+\txor_s\tr0,r0,r1\n+\tbmsk\tr1,r0,30\n+\tj_s.d\t[blink]\n+\tbic_l\tr0,r0,r1\n+\n+\t.balign\t4\n+.Ldenorm_dbl1:\n+\tnorm.f\tr3,r4\n+\txor_s\tr0,r0,r1\n+\tsub_s\tr3,r3,7\n+\tasl\tr4,r4,r3\n+\tsub_s\tr3,r3,1\n+\tasl_s\tr3,r3,23\n+\tmpyhu\tr6,r2,r4\n+\tsub.ne.f r11,r11,r3\n+\tbmsk\tr8,r0,30\n+\tmpyu\tr7,r2,r4\n+\tbhi.d\t.Lpast_denorm_dbl1\n+\tasl.f\t0,r6,8\n+\tj_s.d\t[blink]\n+\tbic\tr0,r0,r8\n+\n+\t.balign\t4\n+.L7f800000:\n+\t.long\t0x7f800000\n+.L7fffffff:\n+\t.long\t0x7fffffff\n+\tENDFUNC(__mulsf3)"}, {"sha": "041159f49b9e3ecb83149ecd2d1f95eb0eb70e55", "filename": "libgcc/config/arc/ieee-754/orddf2.S", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Forddf2.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Forddf2.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Forddf2.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,63 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"arc-ieee-754.h\"\n+/* inputs: r0, r1\n+   output: c flag\n+   clobber: r12, flags\n+   For NaNs, bit 19 .. bit 30 must be set.  */\n+#if 0 /* DEBUG */\n+\t.global __orddf2\n+\t.balign 4\n+\tFUNC(__orddf2)\n+__orddf2:\n+\tst.a r11,[sp,-4]` push_s blink` st.a r10,[sp,-4]` st.a r9,[sp,-4]\n+\tst.a r8,[sp,-4]` st.a r7,[sp,-4]` st.a r6,[sp,-4]` st.a r5,[sp,-4]\n+\tst.a r4,[sp,-4]` push_s r3` push_s r2` push_s r1`\n+\tbl.d __unorddf2_c` push_s r0\n+\tmov r11,r0` pop_s r0` pop_s r1` pop_s r2` pop_s r3\n+\tld.ab r4,[sp,4]` ld.ab r5,[sp,4]` ld.ab r6,[sp,4]`\n+\tld.ab r7,[sp,4]` ld.ab r8,[sp,4]` ld.ab r9,[sp,4]\n+\tbl.d __orddf2_asm` ld.ab r10,[sp,4]\n+\tpop_s blink\n+\tbrne.d r11,0,0f\n+\tld.ab r11,[sp,4]\n+\tjcc [blink]\n+\tbl abort\n+0:\tjcs [blink]\n+\tbl abort\n+\tENDFUNC(__orddf2)\n+#define __orddf2 __orddf2_asm\n+#endif /* DEBUG */\n+\t.global __orddf2\n+\t.balign 4\n+\tHIDDEN_FUNC(__orddf2)\n+__orddf2:\n+\tbmsk r12,DBL0H,20\n+\tadd1.f\tr12,r12,DBL0H /* clear z; set c if NaN.  */\n+\tbmsk r12,DBL1H,20\n+\tj_s.d\t[blink]\n+\tadd1.cc.f r12,r12,DBL1H /* clear z; set c if NaN.  */\n+\tENDFUNC(__orddf2)"}, {"sha": "5e0a3534e4d2a3b5935ef2dc4d7d171d10086875", "filename": "libgcc/config/arc/ieee-754/ordsf2.S", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Fordsf2.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Fordsf2.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Fordsf2.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,63 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"arc-ieee-754.h\"\n+/* inputs: r0, r1\n+   output: c flag\n+   clobber: r12, flags\n+   For NaNs, bit 22 .. bit 30 must be set.  */\n+#if 0 /* DEBUG */\n+\t.global __ordsf2\n+\t.balign 4\n+\tFUNC(__ordsf2)\n+__ordsf2:\n+\tst.a r11,[sp,-4]` push_s blink` st.a r10,[sp,-4]` st.a r9,[sp,-4]\n+\tst.a r8,[sp,-4]` st.a r7,[sp,-4]` st.a r6,[sp,-4]` st.a r5,[sp,-4]\n+\tst.a r4,[sp,-4]` push_s r3` push_s r2` push_s r1`\n+\tbl.d __unordsf2_c` push_s r0\n+\tmov r11,r0` pop_s r0` pop_s r1` pop_s r2` pop_s r3\n+\tld.ab r4,[sp,4]` ld.ab r5,[sp,4]` ld.ab r6,[sp,4]`\n+\tld.ab r7,[sp,4]` ld.ab r8,[sp,4]` ld.ab r9,[sp,4]\n+\tbl.d __ordsf2_asm` ld.ab r10,[sp,4]\n+\tpop_s blink\n+\tbrne.d r11,0,0f\n+\tld.ab r11,[sp,4]\n+\tjcc [blink]\n+\tbl abort\n+0:\tjcs [blink]\n+\tbl abort\n+\tENDFUNC(__ordsf2)\n+#define __ordsf2 __ordsf2_asm\n+#endif /* DEBUG */\n+\t.global __ordsf2\n+\t.balign 4\n+\tHIDDEN_FUNC(__ordsf2)\n+__ordsf2:\n+\tbmsk r12,r0,23\n+\tadd1.f\tr12,r12,r0 /* clear z; set c if NaN.  */\n+\tbmsk r12,r1,23\n+\tj_s.d\t[blink]\n+\tadd1.cc.f r12,r12,r1 /* clear z; set c if NaN.  */\n+\tENDFUNC(__ordsf2)"}, {"sha": "58d70dba4012a3be82b0197d16f59b6329946b49", "filename": "libgcc/config/arc/ieee-754/truncdfsf2.S", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Ftruncdfsf2.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Ftruncdfsf2.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Ftruncdfsf2.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,134 @@\n+/* Copyright (C) 2006, 2008-2012 Free Software Foundation, Inc.\n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"arc-ieee-754.h\"\n+\n+#if 0 /* DEBUG */\n+\tFUNC(__truncdfsf2)\n+\t.global __truncdfsf2\n+\t.balign 4\n+__truncdfsf2:\n+\tpush_s blink\n+\tpush_s r0\n+\tbl.d __truncdfsf2_c\n+\tpush_s r1\n+\tmov_s r2,r0\n+\tpop_s r1\n+\tld r0,[sp]\n+\tbl.d __truncdfsf2_asm\n+\tst r2,[sp]\n+\tpop_s r1\n+\tpop_s blink\n+\tcmp r0,r1\n+\tjeq_s [blink]\n+\tand r12,r0,r1\n+\tbic.f 0,0x7f800000,r12\n+\tbne 0f\n+\tbmsk.f 0,r0,22\n+\tbmsk.ne.f r1,r1,22\n+\tjne_s [blink] ; both NaN -> OK\n+0:\tbl abort\n+\tENDFUNC(__truncdfsf2)\n+#define __truncdfsf2 __truncdfsf2_asm\n+#endif /* DEBUG */\n+\n+\t.global __truncdfsf2\n+\t.balign 4\n+\tFUNC(__truncdfsf2)\n+__truncdfsf2:\n+\tlsr r2,DBL0H,20\n+\tasl_s DBL0H,DBL0H,12\n+\tsub r12,r2,0x380\n+\tbclr.f r3,r12,11\n+\tbrhs r3,0xff,.Lill_exp\n+\tbeq_l .Ldenorm0\n+\tasl_s r12,r12,23\n+\ttst DBL0L, \\\n+\t\t0x2fffffff /* Check if msb guard bit wants rounding up.  */\n+\tlsr_s DBL0L,DBL0L,28\n+\tlsr_s DBL0H,DBL0H,8\n+\tadd.ne DBL0L,DBL0L,1\n+\tadd_s DBL0H,DBL0H,DBL0L\n+\tlsr_s DBL0H,DBL0H\n+\tbtst_s r2,11\n+\tadd_s r0,DBL0H,r12\n+\tj_s.d [blink]\n+\tbxor.ne r0,r0,31\n+\t.balign 4\n+.Lill_exp:\n+\tbbit1 r2,10,.Linf_nan\n+\tbmsk_s r12,r12,9\n+\trsub.f r12,r12,8+0x400-32 ; Go from 9 to 1 guard bit in MSW.  */\n+\tbhs_s .Lzero\n+\tlsr r3,DBL0L,21\n+\trrc DBL0H,DBL0H ; insert leading 1\n+\tasl.f 0,DBL0L,8 ; check lower 24 guard bits\n+\tadd_s r3,DBL0H,r3\n+\tadd.pnz r3,r3,1 ; assemble fraction with compressed guard bits.\n+\tlsr r0,r3,r12\n+\tneg_s r12,r12\n+\tbtst_s r0,1\n+\tasl.eq.f r3,r3,r12\n+\tadd.ne r0,r0,1\n+\tbtst_s r2,11\n+\tlsr_s r0,r0\n+\tj_s.d [blink]\n+\tbxor.ne r0,r0,31\n+.Lzero:\n+\tlsr_s r2,r2,11\n+\tj_s.d [blink]\n+\tasl r0,r2,31\n+.Ldenorm0:\n+\tasl_s r12,r12,20\n+\ttst DBL0L, \\\n+\t\t0x5fffffff /* Check if msb guard bit wants rounding up.  */\n+\tlsr_s DBL0L,DBL0L,29\n+\tlsr_s DBL0H,DBL0H,9\n+\tadd.ne DBL0L,DBL0L,1\n+\tbset_s DBL0H,DBL0H,23\n+\tadd_s DBL0H,DBL0H,DBL0L\n+\tlsr_s DBL0H,DBL0H\n+\tj_s.d [blink]\n+\tadd_l r0,DBL0H,r12\n+\n+/* We would generally say that NaNs must have a non-zero high fraction part,\n+   but to allow hardware double precision floating point to interoperate\n+   with single precision software floating point, we make an exception here.\n+   The cost is to replace a tst_s DBL0H with an or.f DBL0L,DBL0L,DBL0H .\n+   As we start out unaligned, and there is an odd number of other short insns,\n+   we have a choice of letting this cost us a misalign penalty or\n+   4 more bytes (if we align the code).  We choose the former here because\n+   infinity / NaN is not expected to be prevalent in time-critical code.  */\n+.Linf_nan:\n+\tor.f DBL0L,DBL0L,DBL0H\n+\tmov_s r0,1\n+\tadd.ne r2,r2,1\n+\ttst r2,0x7ff\n+\tasl.ne r0,r0,23\n+\tbtst_s r12,11\n+\tneg r0,r0\n+\tj_s.d [blink]\n+\tbxor.eq r0,r0,31\n+\tENDFUNC(__truncdfsf2)"}, {"sha": "8757101d8bd11ff3c6adabb6d7da2434b5c607d4", "filename": "libgcc/config/arc/ieee-754/uneqdf2.S", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Funeqdf2.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Funeqdf2.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Funeqdf2.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,73 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"arc-ieee-754.h\"\n+/* inputs: DBL0, DBL1\n+   output: z flag\n+   clobber: r12, flags\n+   For NaNs, bit 19.. bit 30 of the high word must be set.  */\n+#if 0 /* DEBUG */\n+\t.global __uneqdf2\n+\t.balign 4\n+\tFUNC(__uneqdf2)\n+__uneqdf2:\n+\tst.a r11,[sp,-4]` push_s blink` st.a r10,[sp,-4]` st.a r9,[sp,-4]\n+\tst.a r8,[sp,-4]` st.a r7,[sp,-4]` st.a r6,[sp,-4]` st.a r5,[sp,-4]\n+\tst.a r4,[sp,-4]` push_s r3` push_s r2` push_s r1`\n+\tbl.d __eqdf2_c` push_s r0\n+\tpush_s r0` ld_s r0, [sp,4]` ld_s r1, [sp,8]` ld_s r2,[sp,12]\n+\tbl.d __unorddf2_c` ld_s r3,[sp,16]\n+\tld.ab r11,[sp,4]` tst r0,r0` mov.ne r11,0\n+\tpop_s r0` pop_s r1` pop_s r2` pop_s r3\n+\tld.ab r4,[sp,4]` ld.ab r5,[sp,4]` ld.ab r6,[sp,4]`\n+\tld.ab r7,[sp,4]` ld.ab r8,[sp,4]` ld.ab r9,[sp,4]\n+\tbl.d __uneqdf2_asm` ld.ab r10,[sp,4]\n+\tpop_s blink\n+\tbreq.d r11,0,0f\n+\tld.ab r11,[sp,4]\n+\tjne_s [blink]\n+\tbl abort\n+0:\tjeq_s [blink]\n+\tbl abort\n+\tENDFUNC(__uneqdf2)\n+#define __uneqdf2 __uneqdf2_asm\n+#endif /* DEBUG */\n+\t.global __uneqdf2\n+\t.balign 4\n+\tHIDDEN_FUNC(__uneqdf2)\n+__uneqdf2:\n+\tcmp_s\tDBL0H,DBL1H\n+\tcmp.eq\tDBL0L,DBL1L\n+\tjeq_s\t[blink]\n+\tor\tr12,DBL0H,DBL1H\n+\tor.f\t0,DBL0L,DBL1L\n+\tbclr.eq.f r12,r12,31\n+\tjeq_s\t[blink]\n+\tmov_s\tr12, \\\n+\t\t0x7ff80000\n+\tbic.f\t0,r12,DBL0H\n+\tj_s.d\t[blink]\n+\tbic.ne.f r12,r12,DBL1H\n+\tENDFUNC(__uneqdf2)"}, {"sha": "05058e87e66112e1ec72b9fa70d8baacd62aefae", "filename": "libgcc/config/arc/ieee-754/uneqsf2.S", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Funeqsf2.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Fieee-754%2Funeqsf2.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Fieee-754%2Funeqsf2.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,69 @@\n+/* Copyright (C) 2008-2012 Free Software Foundation, Inc.  \n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"arc-ieee-754.h\"\n+/* inputs: r0, r1\n+   output: z flag\n+   clobber: r12, flags\n+   For NaNs, bit 22 .. bit 30 must be set.  */\n+#if 0 /* DEBUG */\n+\t.global __uneqsf2\n+\t.balign 4\n+\tFUNC(__uneqsf2)\n+__uneqsf2:\n+\tst.a r11,[sp,-4]` push_s blink` st.a r10,[sp,-4]` st.a r9,[sp,-4]\n+\tst.a r8,[sp,-4]` st.a r7,[sp,-4]` st.a r6,[sp,-4]` st.a r5,[sp,-4]\n+\tst.a r4,[sp,-4]` push_s r3` push_s r2` push_s r1`\n+\tbl.d __eqsf2_c` push_s r0\n+\tpush_s r0` ld_s r0, [sp,4]\n+\tbl.d __unordsf2_c` ld_s r1,[sp,8]\n+\tld.ab r11,[sp,4]` tst r0,r0` mov.ne r11,0\n+\tpop_s r0` pop_s r1` pop_s r2` pop_s r3\n+\tld.ab r4,[sp,4]` ld.ab r5,[sp,4]` ld.ab r6,[sp,4]`\n+\tld.ab r7,[sp,4]` ld.ab r8,[sp,4]` ld.ab r9,[sp,4]\n+\tbl.d __uneqsf2_asm` ld.ab r10,[sp,4]\n+\tpop_s blink\n+\tbreq.d r11,0,0f\n+\tld.ab r11,[sp,4]\n+\tjne_s [blink]\n+\tbl abort\n+0:\tjeq_s [blink]\n+\tbl abort\n+\tENDFUNC(__uneqsf2)\n+#define __uneqsf2 __uneqsf2_asm\n+#endif /* DEBUG */\n+\t.global __uneqsf2\n+\t.balign 4\n+\tHIDDEN_FUNC(__uneqsf2)\n+__uneqsf2:\n+\tmov_s\tr12, \\\n+\t\t0x7fc00000\n+\tbic.f\t0,r12,r0\n+\tbic.ne.f r12,r12,r1\n+\tor\tr12,r0,r1\n+\tbmsk.ne.f r12,r12,30\n+\tj_s.d\t[blink]\n+\tcmp.ne\tr0,r1\n+\tENDFUNC(__uneqsf2)"}, {"sha": "a59e9cc9793d42f06142a21d1e5254dfe591f060", "filename": "libgcc/config/arc/initfini.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Finitfini.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Finitfini.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Finitfini.c?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,157 @@\n+/* .init/.fini section handling + C++ global constructor/destructor handling.\n+   This file is based on crtstuff.c, sol2-crti.asm, sol2-crtn.asm.\n+\n+   Copyright (C) 1995, 1997, 1998, 2007-2012 Free Software Foundation, Inc.\n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/*  Declare a pointer to void function type.  */\n+typedef void (*func_ptr) (void);\n+\n+#ifdef CRT_INIT\n+\n+/* NOTE:  In order to be able to support SVR4 shared libraries, we arrange\n+   to have one set of symbols { __CTOR_LIST__, __DTOR_LIST__, __CTOR_END__,\n+   __DTOR_END__ } per root executable and also one set of these symbols\n+   per shared library.  So in any given whole process image, we may have\n+   multiple definitions of each of these symbols.  In order to prevent\n+   these definitions from conflicting with one another, and in order to\n+   ensure that the proper lists are used for the initialization/finalization\n+   of each individual shared library (respectively), we give these symbols\n+   only internal (i.e. `static') linkage, and we also make it a point to\n+   refer to only the __CTOR_END__ symbol in crtfini.o and the __DTOR_LIST__\n+   symbol in crtinit.o, where they are defined.  */\n+\n+static func_ptr __CTOR_LIST__[1] __attribute__ ((section (\".ctors\")))\n+     = { (func_ptr) (-1) };\n+\n+static func_ptr __DTOR_LIST__[1] __attribute__ ((section (\".dtors\")))\n+     = { (func_ptr) (-1) };\n+\n+/* Run all the global destructors on exit from the program.  */\n+ \n+/* Some systems place the number of pointers in the first word of the\n+   table.  On SVR4 however, that word is -1.  In all cases, the table is\n+   null-terminated.  On SVR4, we start from the beginning of the list and\n+   invoke each per-compilation-unit destructor routine in order\n+   until we find that null.\n+\n+   Note that this function MUST be static.  There will be one of these\n+   functions in each root executable and one in each shared library, but\n+   although they all have the same code, each one is unique in that it\n+   refers to one particular associated `__DTOR_LIST__' which belongs to the\n+   same particular root executable or shared library file.  */\n+\n+static void __do_global_dtors (void)\n+asm (\"__do_global_dtors\") __attribute__ ((section (\".text\")));\n+\n+static void\n+__do_global_dtors (void)\n+{\n+  func_ptr *p;\n+  for (p = __DTOR_LIST__ + 1; *p; p++)\n+    (*p) ();\n+}\n+\n+/* .init section start.\n+   This must appear at the start of the .init section.  */\n+\n+asm (\"\\n\\\n+\t.section .init\\n\\\n+\t.global init\\n\\\n+\t.word 0\\n\\\n+init:\\n\\\n+\tst blink,[sp,4]\\n\\\n+\tst fp,[sp]\\n\\\n+\tmov fp,sp\\n\\\n+\tsub sp,sp,16\\n\\\n+\");\n+\n+/* .fini section start.\n+   This must appear at the start of the .init section.  */\n+\n+asm (\"\\n\\\n+\t.section .fini\\n\\\n+\t.global fini\\n\\\n+\t.word 0\\n\\\n+fini:\\n\\\n+\tst blink,[sp,4]\\n\\\n+\tst fp,[sp]\\n\\\n+\tmov fp,sp\\n\\\n+\tsub sp,sp,16\\n\\\n+\tbl.nd __do_global_dtors\\n\\\n+\");\n+\n+#endif /* CRT_INIT */\n+\n+#ifdef CRT_FINI\n+\n+/* Put a word containing zero at the end of each of our two lists of function\n+   addresses.  Note that the words defined here go into the .ctors and .dtors\n+   sections of the crtend.o file, and since that file is always linked in\n+   last, these words naturally end up at the very ends of the two lists\n+   contained in these two sections.  */\n+\n+static func_ptr __CTOR_END__[1] __attribute__ ((section (\".ctors\")))\n+     = { (func_ptr) 0 };\n+\n+static func_ptr __DTOR_END__[1] __attribute__ ((section (\".dtors\")))\n+     = { (func_ptr) 0 };\n+\n+/* Run all global constructors for the program.\n+   Note that they are run in reverse order.  */\n+\n+static void __do_global_ctors (void)\n+asm (\"__do_global_ctors\") __attribute__ ((section (\".text\")));\n+\n+static void\n+__do_global_ctors (void)\n+{\n+  func_ptr *p;\n+  for (p = __CTOR_END__ - 1; *p != (func_ptr) -1; p--)\n+    (*p) ();\n+}\n+\n+/* .init section end.\n+   This must live at the end of the .init section.  */\n+\n+asm (\"\\n\\\n+\t.section .init\\n\\\n+\tbl.nd __do_global_ctors\\n\\\n+\tld blink,[fp,4]\\n\\\n+\tj.d blink\\n\\\n+\tld.a fp,[sp,16]\\n\\\n+\");\n+\n+/* .fini section end.\n+   This must live at the end of the .fini section.  */\n+\n+asm (\"\\n\\\n+\t.section .fini\\n\\\n+\tld blink,[fp,4]\\n\\\n+\tj.d blink\\n\\\n+\tld.a fp,[sp,16]\\n\\\n+\");\n+\n+#endif /* CRT_FINI */"}, {"sha": "d434ccb4edde382432c109079a5a3266c036768a", "filename": "libgcc/config/arc/lib1funcs.S", "status": "added", "additions": 1418, "deletions": 0, "changes": 1418, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Flib1funcs.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Flib1funcs.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Flib1funcs.S?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,1418 @@\n+; libgcc1 routines for Synopsys DesignWare ARC cpu.\n+\n+/* Copyright (C) 1995, 1997, 2007-2013 Free Software Foundation, Inc.\n+   Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+\t\ton behalf of Synopsys Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* As a special exception, if you link this library with other files,\n+   some of which are compiled with GCC, to produce an executable,\n+   this library does not by itself cause the resulting executable\n+   to be covered by the GNU General Public License.\n+   This exception does not however invalidate any other reasons why\n+   the executable file might be covered by the GNU General Public License.  */\n+\n+ \n+ /* ANSI concatenation macros.  */\n+ \n+ #define CONCAT1(a, b) CONCAT2(a, b)\n+ #define CONCAT2(a, b) a ## b\n+ \n+ /* Use the right prefix for global labels.  */\n+ \n+ #define SYM(x) CONCAT1 (__USER_LABEL_PREFIX__, x)\n+ \n+#ifndef WORKING_ASSEMBLER\n+#define abs_l abs\n+#define asl_l asl\n+#define mov_l mov\n+#endif\n+ \t\n+#define FUNC(X)         .type SYM(X),@function\n+#define HIDDEN_FUNC(X)\tFUNC(X)` .hidden X\n+#define ENDFUNC0(X)     .Lfe_##X: .size X,.Lfe_##X-X\n+#define ENDFUNC(X)      ENDFUNC0(X)\n+\n+\t\n+\t\n+#ifdef  L_mulsi3\n+\t.section .text\n+\t.align 4\n+\n+\t.global SYM(__mulsi3)\n+SYM(__mulsi3):\n+\n+/* This the simple version.\n+\n+  while (a) \n+    {\n+      if (a & 1)\n+        r += b;\n+      a >>= 1;\n+      b <<= 1;\n+    }\n+*/\n+\n+#if defined (__ARC_MUL64__)\n+\tFUNC(__mulsi3)\n+\tmulu64 r0,r1\n+\tj_s.d [blink]\n+\tmov_s r0,mlo\n+\tENDFUNC(__mulsi3)\n+#elif defined (__ARC700__)\n+\tHIDDEN_FUNC(__mulsi3)\n+\tmpyu\tr0,r0,r1\n+\tnop_s\n+\tj_s\t[blink]\n+\tENDFUNC(__mulsi3)\n+#elif defined (__ARC_NORM__)\n+\tFUNC(__mulsi3)\n+\tnorm.f\tr2,r0\n+\trsub\tlp_count,r2,31\n+\tmov.mi\tlp_count,32\n+\tmov_s\tr2,r0\n+\tmov_s\tr0,0\n+\tlpnz\t@.Lend\t\t; loop is aligned\n+\tlsr.f\tr2,r2\n+\tadd.cs\tr0,r0,r1\n+\tadd_s\tr1,r1,r1\n+.Lend:\tj_s [blink]\n+\tENDFUNC(__mulsi3)\n+#elif !defined (__OPTIMIZE_SIZE__) && !defined(__ARC601__)\n+\t/* Up to 3.5 times faster than the simpler code below, but larger.  */\n+\tFUNC(__mulsi3)\n+\tror.f\tr2,r0,4\n+\tmov_s\tr0,0\n+\tadd3.mi\tr0,r0,r1\n+\tasl.f\tr2,r2,2\n+\tadd2.cs\tr0,r0,r1\n+\tjeq_s\t[blink]\n+.Loop:\n+\tadd1.mi\tr0,r0,r1\n+\tasl.f\tr2,r2,2\n+\tadd.cs\tr0,r0,r1\n+\tasl_s\tr1,r1,4\n+\tror.f\tr2,r2,8\n+\tadd3.mi\tr0,r0,r1\n+\tasl.f\tr2,r2,2\n+\tbne.d\t.Loop\n+\tadd2.cs\tr0,r0,r1\n+\tj_s\t[blink]\n+\tENDFUNC(__mulsi3)\n+#elif !defined (__OPTIMIZE_SIZE__) /* __ARC601__ */\n+\tFUNC(__mulsi3)\n+\tlsr.f r2,r0\n+\tmov_s r0,0\n+\tmov_s r3,0\n+\tadd.cs r0,r0,r1\n+.Loop:\n+\tlsr.f r2,r2\n+\tadd1.cs r0,r0,r1\n+\tlsr.f r2,r2\n+\tadd2.cs r0,r0,r1\n+\tlsr.f r2,r2\n+\tadd3.cs r0,r0,r1\n+\tbne.d .Loop\t\n+\tadd3 r1,r3,r1\n+\tj_s\t[blink]\n+\tENDFUNC(__mulsi3)\n+#else\n+/********************************************************/\n+\tFUNC(__mulsi3)\n+\tmov_s r2,0\t\t; Accumulate result here.\n+.Lloop:\n+\tbbit0 r0,0,@.Ly\n+\tadd_s r2,r2,r1\t\t; r += b\n+.Ly:\t\n+\tlsr_s r0,r0\t\t; a >>= 1\n+\tasl_s r1,r1\t\t; b <<= 1\t\n+\tbrne_s r0,0,@.Lloop\t\n+.Ldone:\n+\tj_s.d [blink]\n+\tmov_s r0,r2\n+\tENDFUNC(__mulsi3)\n+/********************************************************/\n+#endif\n+\t\n+#endif /* L_mulsi3 */\n+\n+#ifdef  L_umulsidi3\n+\t.section .text\n+\t.align 4\n+\n+\t.global SYM(__umulsidi3)\n+SYM(__umulsidi3):\n+\tHIDDEN_FUNC(__umulsidi3)\n+/* We need ARC700 /ARC_MUL64 definitions of __umulsidi3 / __umulsi3_highpart\n+   in case some code has been compiled without multiply support enabled,\n+   but linked with the multiply-support enabled libraries.\n+   For ARC601 (i.e. without a barrel shifter), we also use umuldisi3 as our\n+   umulsi3_highpart implementation; the use of the latter label doesn't\n+   actually benefit ARC601 platforms, but is useful when ARC601 code is linked\n+   against other libraries.  */\n+#if defined (__ARC700__) || defined (__ARC_MUL64__) || defined (__ARC601__)\n+\t.global SYM(__umulsi3_highpart)\n+SYM(__umulsi3_highpart):\n+\tHIDDEN_FUNC(__umulsi3_highpart)\n+#endif\n+\n+/* This the simple version.\n+\n+  while (a) \n+    {\n+      if (a & 1)\n+        r += b;\n+      a >>= 1;\n+      b <<= 1;\n+    }\n+*/\n+#include \"ieee-754/arc-ieee-754.h\"\n+\n+#ifdef __ARC700__\n+\tmov_s\tr12,DBL0L\n+\tmpyu\tDBL0L,r12,DBL0H\n+\tj_s.d\t[blink]\n+\tmpyhu\tDBL0H,r12,DBL0H\n+#elif defined (__ARC_MUL64__)\n+/* Likewise for __ARC_MUL64__ */\n+\tmulu64 r0,r1\n+\tmov_s DBL0L,mlo\n+\tj_s.d [blink]\n+\tmov_s DBL0H,mhi\n+#else /* !__ARC700__ && !__ARC_MUL64__ */\n+/* Although it might look tempting to extend this to handle muldi3,\n+   using mulsi3 twice with 2.25 cycles per 32 bit add is faster\n+   than one loop with 3 or four cycles per 32 bit add.  */\n+\tasl.f r12,0\t\t; Top part of b.\n+\tmov_s r2,0\t\t; Accumulate result here.\n+\tbbit1.d r0,0,@.Ladd\n+\tmov_s r3,0\n+.Llooptst:\n+\trlc r12,r12\n+\tbreq r0,0,@.Ldone\t; while (a)\n+.Lloop:\n+\tasl.f r1,r1\t\t; b <<= 1\n+\tbbit0.d r0,1,@.Llooptst\n+\tlsr r0,r0\t\t; a >>= 1\n+\trlc r12,r12\n+.Ladd:\n+\tadd.f r3,r3,r1\t; r += b\n+\tbrne.d r0,0,@.Lloop\t; while (a);\n+\tadc   r2,r2,r12\n+.Ldone:\n+\tmov_s DBL0L,r3\n+\tj_s.d [blink]\n+\tmov DBL0H,r2\n+#endif /* !__ARC700__*/\n+\tENDFUNC(__umulsidi3)\n+#if defined (__ARC700__) || defined (__ARC_MUL64__) || defined (__ARC601__)\n+\tENDFUNC(__umulsi3_highpart)\n+#endif\n+#endif /* L_umulsidi3 */\n+\n+#ifdef  L_umulsi3_highpart\n+#include \"ieee-754/arc-ieee-754.h\"\n+/* For use without a barrel shifter, and for ARC700 / ARC_MUL64, the\n+   mulsidi3 algorithms above look better, so for these, there is an\n+   extra label up there.  */\n+#if !defined (__ARC700__) && !defined (__ARC_MUL64__) && !defined (__ARC601__)\n+\t.global SYM(__umulsi3_highpart)\n+SYM(__umulsi3_highpart):\n+\tHIDDEN_FUNC(__umulsi3_highpart)\n+\tmov_s r2,0\n+\tmov_s r3,32\n+.Loop:\n+\tlsr.f r0,r0\n+\tadd.cs.f r2,r2,r1\n+\tsub_s r3,r3,1\n+\tbrne.d r0,0,.Loop\n+\trrc r2,r2\n+\tj_s.d\t[blink]\n+/* Make the result register peephole-compatible with mulsidi3.  */\n+\tlsr DBL0H,r2,r3\n+\tENDFUNC(__umulsi3_highpart)\n+#endif /* !__ARC700__  && !__ARC601__ */\n+#endif /* L_umulsi3_highpart */\n+\n+#ifdef L_divmod_tools\n+\n+; Utilities used by all routines.\n+\n+\t.section .text\n+\n+/*\n+unsigned long\n+udivmodsi4(int modwanted, unsigned long num, unsigned long den)\n+{\n+  unsigned long bit = 1;\n+  unsigned long res = 0;\n+\n+  while (den < num && bit && !(den & (1L<<31)))\n+    {\n+      den <<=1;\n+      bit <<=1;\n+    }\n+  while (bit)\n+    {\n+      if (num >= den)\n+\t{\n+\t  num -= den;\n+\t  res |= bit;\n+\t}\n+      bit >>=1;\n+      den >>=1;\n+    }\n+  if (modwanted) return num;\n+  return res;\n+}\n+*/\n+\n+; inputs: r0 = numerator, r1 = denominator\n+; outputs: r0 = quotient, r1 = remainder, r2/r3 trashed\n+\n+\t.balign 4\n+\t.global SYM(__udivmodsi4)\n+\tFUNC(__udivmodsi4)\n+SYM(__udivmodsi4):\n+\n+#if defined (__ARC700__)\n+/* Normalize divisor and divident, and then use the appropriate number of\n+   divaw (the number of result bits, or one more) to produce the result.\n+   There are some special conditions that need to be tested:\n+   - We can only directly normalize unsigned numbers that fit in 31 bit.  For\n+     the divisor, we test early on that it is not 'negative'.\n+   - divaw can't corrrectly process a divident that is larger than the divisor.\n+     We handle this be checking that the divident prior to normalization is\n+     not larger than the normalized divisor.  As we then already know then\n+     that the divisor fits 31 bit, this check also makes sure that the\n+     divident fits.\n+   - ordinary normalization of the divident could make it larger than the\n+     normalized divisor, which again would be unsuitable for divaw.\n+     Thus, we want to shift left the divident by one less, except that we\n+     want to leave it alone if it is already 31 bit.  To this end, we\n+     double the input to norm with adds.\n+   - If the divident has less bits than the divisor, that would leave us\n+     with a negative number of divaw to execute.  Although we could use a\n+     conditional loop to avoid excess divaw, and then the quotient could\n+     be extracted correctly as there'd be more than enough zero bits, the\n+     remainder would be shifted left too far, requiring a conditional shift\n+     right.  The cost of that shift and the possible mispredict on the\n+     conditional loop cost as much as putting in an early check for a zero\n+     result.  */\n+\tbmsk\tr3,r0,29\n+\tbrne.d\tr3,r0,.Large_dividend\n+\tnorm.f\tr2,r1\n+\tbrlo\tr0,r1,.Lret0\n+\tnorm\tr3,r0\n+\tasl_s\tr1,r1,r2\n+\tsub_s\tr3,r3,1\n+\tasl_l\tr0,r0,r3\t; not short to keep loop aligned\n+\tsub\tlp_count,r2,r3\n+\tlp\t.Ldiv_end\n+\tdivaw\tr0,r0,r1\n+.Ldiv_end:sub_s\tr3,r2,1\n+\tlsr\tr1,r0,r2\n+\tj_s.d\t[blink]\n+\tbmsk\tr0,r0,r3\n+\n+\t.balign 4\n+.Large_dividend:\n+\tbmi\t.Ltrivial\n+\tasl_s\tr1,r1,r2\n+\tmov_s\tr3,0\n+\tsub1.f\tr4,r0,r1\n+\tmov.lo\tr4,r0\n+\tmov.hs\tr3,2\n+\tcmp\tr4,r1\n+\tsub.hs\tr4,r4,r1\n+\tadd.hs\tr3,r3,1\n+\tmov.f\tlp_count,r2\n+\tlpne\t.Ldiv_end2\n+\tdivaw\tr4,r4,r1\n+.Ldiv_end2:asl\tr0,r3,r2\n+\tlsr\tr1,r4,r2\n+\tsub_s\tr2,r2,1\n+\tbmsk\tr4,r4,r2\n+\tj_s.d\t[blink]\n+\tor.ne\tr0,r0,r4\n+\n+.Lret0:\n+\tmov_s\tr1,r0\n+\tj_s.d\t[blink]\n+\tmov_l\tr0,0\n+\t.balign\t4\n+.Ltrivial:\n+\tsub.f\tr1,r0,r1\n+\tmov.c\tr1,r0\n+\tmov_s\tr0,1\n+\tj_s.d\t[blink]\n+\tmov.c\tr0,0\n+#elif !defined (__OPTIMIZE_SIZE__)\n+#ifdef __ARC_NORM__\n+\tlsr_s r2,r0\n+\tbrhs.d r1,r2,.Lret0_3\n+\tnorm r2,r2\n+\tnorm r3,r1\n+\tsub_s r3,r3,r2\n+\tasl_s r1,r1,r3\n+\tsub1.f 0,r0,r1\n+\tlsr.cs r1,r1,1\n+\tsbc r2,r3,0\n+\tsub1 r0,r0,r1\n+\tcmp_s r0,r1\n+\tmov.f lp_count,r2\n+#else /* ! __ARC_NORM__ */\n+\tlsr_s r2,r0\n+\tbrhs.d r1,r2,.Lret0_3\n+\tmov lp_count,32\n+.Lloop1:\n+\tasl_s r1,r1\t\t; den <<= 1\n+\tbrls.d r1,r2,@.Lloop1\n+\tsub lp_count,lp_count,1\n+\tsub_s r0,r0,r1\n+\tlsr_s r1,r1\n+\tcmp_s r0,r1\n+\txor.f r2,lp_count,31\n+\tmov_s lp_count,r2\n+#endif /* !__ARC_NORM__ */\n+\tsub.cc r0,r0,r1\n+\tmov_s r3,3\n+\tsbc r3,r3,0\n+#ifndef __ARC601__\n+\tasl_s r3,r3,r2\n+\trsub r1,r1,1\n+\tlpne @.Lloop2_end\n+\tadd1.f r0,r1,r0\n+\tsub.cc r0,r0,r1\n+.Lloop2_end:\n+\tlsr r1,r0,r2\n+#else\n+\trsub r1,r1,1\n+\tlpne @.Lloop2_end\n+\tasl_s r3,r3\n+\tadd1.f r0,r1,r0\n+\tsub.cc r0,r0,r1\n+.Lloop2_end:\n+\tlsr_s r1,r0\n+\tlsr.f lp_count,r2\n+\tmov.cc r1,r0\n+\tlpnz 1f\n+\tlsr_s r1,r1\n+\tlsr_s r1,r1\n+1:\n+#endif\n+\tbmsk r0,r0,r2\n+\tbclr r0,r0,r2\n+\tj_s.d [blink]\n+\tor_s r0,r0,r3\n+.Lret0_3:\n+#if 0 /* Slightly shorter, but slower.  */\n+\tlp .Loop3_end\n+\tbrhi.d r1,r0,.Loop3_end\n+\tsub_s r0,r0,r1\n+.Loop3_end\n+\tadd_s r1,r1,r0\n+\tj_s.d [blink]\n+\trsub r0,lp_count,32-1\n+#else\n+\tmov_s r4,r1\n+\tsub.f r1,r0,r1\n+\tsbc r0,r0,r0\n+\tsub.cc.f r1,r1,r4\n+\tsbc r0,r0,0\n+\tsub.cc.f r1,r1,r4\n+\tsbc r0,r0,-3\n+\tj_s.d [blink]\n+\tadd.cs r1,r1,r4\n+#endif\n+#else /* Arctangent-A5 */\n+\tbreq_s r1,0,@.Ldivmodend\n+\tmov_s r2,1\t\t; bit = 1\n+\tmov_s r3,0\t\t; res = 0\n+.Lloop1:\n+  \tbrhs r1,r0,@.Lloop2\n+\tbbit1 r1,31,@.Lloop2\n+\tasl_s r1,r1\t\t; den <<= 1\n+\tb.d @.Lloop1\n+\tasl_s r2,r2\t\t; bit <<= 1\n+.Lloop2:\n+  \tbrlo r0,r1,@.Lshiftdown\n+\tsub_s r0,r0,r1\t\t; num -= den\n+\tor_s r3,r3,r2\t\t; res |= bit\n+.Lshiftdown:\n+\tlsr_s r2,r2\t\t; bit >>= 1\n+\tlsr_s r1,r1\t\t; den >>= 1\t\n+\tbrne_s r2,0,@.Lloop2\n+.Ldivmodend:\n+\tmov_s r1,r0\t\t; r1 = mod\n+\tj.d [blink]\n+\tmov_s r0,r3\t\t; r0 = res\n+/******************************************************/\n+#endif\n+\tENDFUNC(__udivmodsi4)\n+\n+#endif\n+\n+#ifdef  L_udivsi3\n+\t.section .text\n+\t.align 4\n+\n+\t.global SYM(__udivsi3)\n+\tFUNC(__udivsi3)\n+SYM(__udivsi3):\n+\tb @SYM(__udivmodsi4)\n+\tENDFUNC(__udivsi3)\n+#if 0 /* interferes with linux loader */\n+\t.section .__arc_profile_forward, \"a\"\n+\t.long SYM(__udivsi3)\n+\t.long SYM(__udivmodsi4)\n+\t.long 65536\n+#endif\n+\n+#endif /* L_udivsi3 */\n+\n+#ifdef  L_divsi3\n+\t.section .text\n+\t.align 4\n+\n+\t.global SYM(__divsi3)\n+\tFUNC(__divsi3)\n+\n+#ifndef __ARC700__\n+SYM(__divsi3):\n+\t/* A5 / ARC60? */\n+\tmov r7,blink\n+\txor r6,r0,r1\n+\tabs_s r0,r0\n+\tbl.d @SYM(__udivmodsi4)\n+\t abs_s r1,r1\n+\ttst r6,r6\n+\tj.d [r7]\n+\t neg.mi r0,r0\n+#else \t/* !ifndef __ARC700__ */\n+\t;; We can use the abs, norm, divaw and mpy instructions for ARC700\n+#define MULDIV\n+#ifdef MULDIV\n+/* This table has been generated by divtab-arc700.c.  */\n+/* 1/512 .. 1/256, normalized.  There is a leading 1 in bit 31.\n+   For powers of two, we list unnormalized numbers instead.  The values\n+   for powers of 2 are loaded, but not used.  The value for 1 is actually\n+   the first instruction after .Lmuldiv.  */\n+\t.balign 4\n+.Ldivtab:\n+\n+\t.long\t0x1000000\n+\t.long\t0x80808081\n+\t.long\t0x81020409\n+\t.long\t0x81848DA9\n+\t.long\t0x82082083\n+\t.long\t0x828CBFBF\n+\t.long\t0x83126E98\n+\t.long\t0x83993053\n+\t.long\t0x84210843\n+\t.long\t0x84A9F9C9\n+\t.long\t0x85340854\n+\t.long\t0x85BF3762\n+\t.long\t0x864B8A7E\n+\t.long\t0x86D90545\n+\t.long\t0x8767AB60\n+\t.long\t0x87F78088\n+\t.long\t0x88888889\n+\t.long\t0x891AC73B\n+\t.long\t0x89AE408A\n+\t.long\t0x8A42F871\n+\t.long\t0x8AD8F2FC\n+\t.long\t0x8B70344B\n+\t.long\t0x8C08C08D\n+\t.long\t0x8CA29C05\n+\t.long\t0x8D3DCB09\n+\t.long\t0x8DDA5203\n+\t.long\t0x8E78356E\n+\t.long\t0x8F1779DA\n+\t.long\t0x8FB823EF\n+\t.long\t0x905A3864\n+\t.long\t0x90FDBC0A\n+\t.long\t0x91A2B3C5\n+\t.long\t0x92492493\n+\t.long\t0x92F11385\n+\t.long\t0x939A85C5\n+\t.long\t0x94458095\n+\t.long\t0x94F20950\n+\t.long\t0x95A02569\n+\t.long\t0x964FDA6D\n+\t.long\t0x97012E03\n+\t.long\t0x97B425EE\n+\t.long\t0x9868C80A\n+\t.long\t0x991F1A52\n+\t.long\t0x99D722DB\n+\t.long\t0x9A90E7DA\n+\t.long\t0x9B4C6F9F\n+\t.long\t0x9C09C09D\n+\t.long\t0x9CC8E161\n+\t.long\t0x9D89D89E\n+\t.long\t0x9E4CAD24\n+\t.long\t0x9F1165E8\n+\t.long\t0x9FD809FE\n+\t.long\t0xA0A0A0A1\n+\t.long\t0xA16B312F\n+\t.long\t0xA237C32C\n+\t.long\t0xA3065E40\n+\t.long\t0xA3D70A3E\n+\t.long\t0xA4A9CF1E\n+\t.long\t0xA57EB503\n+\t.long\t0xA655C43A\n+\t.long\t0xA72F053A\n+\t.long\t0xA80A80A9\n+\t.long\t0xA8E83F58\n+\t.long\t0xA9C84A48\n+\t.long\t0xAAAAAAAB\n+\t.long\t0xAB8F69E3\n+\t.long\t0xAC769185\n+\t.long\t0xAD602B59\n+\t.long\t0xAE4C415D\n+\t.long\t0xAF3ADDC7\n+\t.long\t0xB02C0B03\n+\t.long\t0xB11FD3B9\n+\t.long\t0xB21642C9\n+\t.long\t0xB30F6353\n+\t.long\t0xB40B40B5\n+\t.long\t0xB509E68B\n+\t.long\t0xB60B60B7\n+\t.long\t0xB70FBB5B\n+\t.long\t0xB81702E1\n+\t.long\t0xB92143FB\n+\t.long\t0xBA2E8BA3\n+\t.long\t0xBB3EE722\n+\t.long\t0xBC52640C\n+\t.long\t0xBD691048\n+\t.long\t0xBE82FA0C\n+\t.long\t0xBFA02FE9\n+\t.long\t0xC0C0C0C1\n+\t.long\t0xC1E4BBD6\n+\t.long\t0xC30C30C4\n+\t.long\t0xC4372F86\n+\t.long\t0xC565C87C\n+\t.long\t0xC6980C6A\n+\t.long\t0xC7CE0C7D\n+\t.long\t0xC907DA4F\n+\t.long\t0xCA4587E7\n+\t.long\t0xCB8727C1\n+\t.long\t0xCCCCCCCD\n+\t.long\t0xCE168A78\n+\t.long\t0xCF6474A9\n+\t.long\t0xD0B69FCC\n+\t.long\t0xD20D20D3\n+\t.long\t0xD3680D37\n+\t.long\t0xD4C77B04\n+\t.long\t0xD62B80D7\n+\t.long\t0xD79435E6\n+\t.long\t0xD901B204\n+\t.long\t0xDA740DA8\n+\t.long\t0xDBEB61EF\n+\t.long\t0xDD67C8A7\n+\t.long\t0xDEE95C4D\n+\t.long\t0xE070381D\n+\t.long\t0xE1FC780F\n+\t.long\t0xE38E38E4\n+\t.long\t0xE525982B\n+\t.long\t0xE6C2B449\n+\t.long\t0xE865AC7C\n+\t.long\t0xEA0EA0EB\n+\t.long\t0xEBBDB2A6\n+\t.long\t0xED7303B6\n+\t.long\t0xEF2EB720\n+\t.long\t0xF0F0F0F1\n+\t.long\t0xF2B9D649\n+\t.long\t0xF4898D60\n+\t.long\t0xF6603D99\n+\t.long\t0xF83E0F84\n+\t.long\t0xFA232CF3\n+\t.long\t0xFC0FC0FD\n+\t.long\t0xFE03F810\n+\t.long\t0x2000000\n+\t.long\t0x81020409\n+\t.long\t0x82082083\n+\t.long\t0x83126E98\n+\t.long\t0x84210843\n+\t.long\t0x85340854\n+\t.long\t0x864B8A7E\n+\t.long\t0x8767AB60\n+\t.long\t0x88888889\n+\t.long\t0x89AE408A\n+\t.long\t0x8AD8F2FC\n+\t.long\t0x8C08C08D\n+\t.long\t0x8D3DCB09\n+\t.long\t0x8E78356E\n+\t.long\t0x8FB823EF\n+\t.long\t0x90FDBC0A\n+\t.long\t0x92492493\n+\t.long\t0x939A85C5\n+\t.long\t0x94F20950\n+\t.long\t0x964FDA6D\n+\t.long\t0x97B425EE\n+\t.long\t0x991F1A52\n+\t.long\t0x9A90E7DA\n+\t.long\t0x9C09C09D\n+\t.long\t0x9D89D89E\n+\t.long\t0x9F1165E8\n+\t.long\t0xA0A0A0A1\n+\t.long\t0xA237C32C\n+\t.long\t0xA3D70A3E\n+\t.long\t0xA57EB503\n+\t.long\t0xA72F053A\n+\t.long\t0xA8E83F58\n+\t.long\t0xAAAAAAAB\n+\t.long\t0xAC769185\n+\t.long\t0xAE4C415D\n+\t.long\t0xB02C0B03\n+\t.long\t0xB21642C9\n+\t.long\t0xB40B40B5\n+\t.long\t0xB60B60B7\n+\t.long\t0xB81702E1\n+\t.long\t0xBA2E8BA3\n+\t.long\t0xBC52640C\n+\t.long\t0xBE82FA0C\n+\t.long\t0xC0C0C0C1\n+\t.long\t0xC30C30C4\n+\t.long\t0xC565C87C\n+\t.long\t0xC7CE0C7D\n+\t.long\t0xCA4587E7\n+\t.long\t0xCCCCCCCD\n+\t.long\t0xCF6474A9\n+\t.long\t0xD20D20D3\n+\t.long\t0xD4C77B04\n+\t.long\t0xD79435E6\n+\t.long\t0xDA740DA8\n+\t.long\t0xDD67C8A7\n+\t.long\t0xE070381D\n+\t.long\t0xE38E38E4\n+\t.long\t0xE6C2B449\n+\t.long\t0xEA0EA0EB\n+\t.long\t0xED7303B6\n+\t.long\t0xF0F0F0F1\n+\t.long\t0xF4898D60\n+\t.long\t0xF83E0F84\n+\t.long\t0xFC0FC0FD\n+\t.long\t0x4000000\n+\t.long\t0x82082083\n+\t.long\t0x84210843\n+\t.long\t0x864B8A7E\n+\t.long\t0x88888889\n+\t.long\t0x8AD8F2FC\n+\t.long\t0x8D3DCB09\n+\t.long\t0x8FB823EF\n+\t.long\t0x92492493\n+\t.long\t0x94F20950\n+\t.long\t0x97B425EE\n+\t.long\t0x9A90E7DA\n+\t.long\t0x9D89D89E\n+\t.long\t0xA0A0A0A1\n+\t.long\t0xA3D70A3E\n+\t.long\t0xA72F053A\n+\t.long\t0xAAAAAAAB\n+\t.long\t0xAE4C415D\n+\t.long\t0xB21642C9\n+\t.long\t0xB60B60B7\n+\t.long\t0xBA2E8BA3\n+\t.long\t0xBE82FA0C\n+\t.long\t0xC30C30C4\n+\t.long\t0xC7CE0C7D\n+\t.long\t0xCCCCCCCD\n+\t.long\t0xD20D20D3\n+\t.long\t0xD79435E6\n+\t.long\t0xDD67C8A7\n+\t.long\t0xE38E38E4\n+\t.long\t0xEA0EA0EB\n+\t.long\t0xF0F0F0F1\n+\t.long\t0xF83E0F84\n+\t.long\t0x8000000\n+\t.long\t0x84210843\n+\t.long\t0x88888889\n+\t.long\t0x8D3DCB09\n+\t.long\t0x92492493\n+\t.long\t0x97B425EE\n+\t.long\t0x9D89D89E\n+\t.long\t0xA3D70A3E\n+\t.long\t0xAAAAAAAB\n+\t.long\t0xB21642C9\n+\t.long\t0xBA2E8BA3\n+\t.long\t0xC30C30C4\n+\t.long\t0xCCCCCCCD\n+\t.long\t0xD79435E6\n+\t.long\t0xE38E38E4\n+\t.long\t0xF0F0F0F1\n+\t.long\t0x10000000\n+\t.long\t0x88888889\n+\t.long\t0x92492493\n+\t.long\t0x9D89D89E\n+\t.long\t0xAAAAAAAB\n+\t.long\t0xBA2E8BA3\n+\t.long\t0xCCCCCCCD\n+\t.long\t0xE38E38E4\n+\t.long\t0x20000000\n+\t.long\t0x92492493\n+\t.long\t0xAAAAAAAB\n+\t.long\t0xCCCCCCCD\n+\t.long\t0x40000000\n+\t.long\t0xAAAAAAAB\n+\t.long\t0x80000000\n+__muldiv:\n+\tneg\tr4,r2\n+\tld.as\tr5,[pcl,r4]\n+\tabs_s\tr12,r0\n+        bic.f\t0,r2,r4\n+        mpyhu.ne r12,r12,r5\n+\tnorm\tr3,r2\n+\txor.f\t0,r0,r1\n+        ; write port allocation stall\n+        rsub\tr3,r3,30\n+        lsr\tr0,r12,r3\n+        j_s.d\t[blink]\n+        neg.mi\tr0,r0\n+\n+\t.balign\t4\n+SYM(__divsi3):\n+\tnorm\tr3,r1\n+\tabs_s\tr2,r1\n+\tbrhs\tr3,23,__muldiv\n+\tnorm\tr4,r0\n+\tabs_l\tr12,r0\n+\tbrhs\tr4,r3,.Lonebit\n+\tasl_s\tr2,r2,r3\n+\tasl\tr12,r12,r4\n+\tsub\tlp_count,r3,r4\n+\tsub.f\tr12,r12,r2\n+\tbrge.d\tr12,r2,.Lsbit\n+\tsub\tr4,r3,r4\n+\tadd.lo\tr12,r12,r2\n+\tlp\t.Ldivend\n+.Ldivstart:divaw r12,r12,r2\n+.Ldivend:xor_s\tr1,r1,r0\n+\tsub\tr0,r4,1\n+\tbmsk\tr0,r12,r0\n+\tbset.hs\tr0,r0,r4\n+\ttst_s\tr1,r1\n+\tj_s.d\t[blink]\n+\tneg.mi\tr0,r0\n+.Lonebit:\n+\txor_s\tr1,r1,r0\n+\tasr_s\tr1,r1,31\n+\tsub1.f\t0,r12,r2\t; special case:\t-2**(n+1) / 2**n\n+\tor\tr0,r1,1\n+\tadd.eq\tr0,r0,r0\n+\tcmp_s\tr12,r2\n+\tj_s.d\t[blink]\n+\tmov.lo\tr0,0\n+.Lsbit:\n+\t; Need to handle special cases involving negative powers of two:\n+\t; r12,r2 are normalized dividend / divisor;\n+\t; divide anything by 0x80000000, or divide 0x80000000 by 0x40000000\n+\tadd_s\tr12,r12,r2\n+\txor_s\tr1,r1,r0\n+\trsub\tr4,r4,-1\n+\tror\tr0,r12,r4\n+\ttst_s\tr2,r2\n+\tbmsk\tr0,r0,r3\n+\tadd.pl\tr0,r0,r0\n+\ttst_s\tr1,r1\n+\tj_s.d\t[blink]\n+\tneg.mi\tr0,r0\n+#else /* !MULDIV */\n+/* This version requires that divaw works with a divisor of 0x80000000U  */\n+\tabs_s\tr2,r1\n+\tnorm\tr4,r0\n+\tneg_s\tr3,r2\n+\tnorm\tr3,r3\n+\tabs_s\tr12,r0\n+\tbrhs\tr4,r3,.Lonebit\n+\tasl_s\tr2,r2,r3\n+\tasl\tr12,r12,r4\n+\tsub\tlp_count,r3,r4\n+\tcmp_s\tr12,r2\n+\tsub.hs\tr12,r12,r2\n+\tlp\t.Ldivend\n+.Ldivstart:divaw r12,r12,r2\n+.Ldivend:xor_s\tr1,r1,r0\n+\tsub_s\tr0,r3,1\n+\tbmsk\tr0,r12,r0\n+\tbset.hs\tr0,r0,r3\n+\ttst_s\tr1,r1\n+\tj_s.d\t[blink]\n+\tnegmi\tr0,r0\n+.Lonebit:\n+\txor_s\tr1,r1,r0\n+\tasr_s\tr1,r1,31\n+\tcmp_s\tr12,r2\n+\tmov_s\tr0,0\n+\tj_s.d\t[blink]\n+\torhs\tr0,r1,1\n+#endif /* MULDIV */\n+\n+#endif\t/* ifndef __ARC700__ */\n+\tENDFUNC(__divsi3)\n+\n+\t\n+#endif /* L_divsi3 */\n+\n+#ifdef  L_umodsi3\n+\t.section .text\n+\t.align 4\n+\n+\t.global SYM(__umodsi3)\n+\tFUNC(__umodsi3)\n+SYM(__umodsi3):\n+\tmov r7,blink\n+\tbl.nd @SYM(__udivmodsi4)\n+\tj.d [r7]\n+\tmov r0,r1\n+\tENDFUNC(__umodsi3)\n+#if 0 /* interferes with linux loader */\n+\t.section .__arc_profile_forward, \"a\"\n+\t.long SYM(__umodsi3)\n+\t.long SYM(__udivmodsi4)\n+\t.long 65536\n+#endif\n+\n+#endif /* L_umodsi3 */\n+\n+#ifdef  L_modsi3\n+\t.section .text\n+\t.align 4\n+\n+\t.global SYM (__modsi3)\n+\tFUNC(__modsi3)\n+SYM(__modsi3):\n+#ifndef __ARC700__\n+\t/* A5 / ARC60? */\n+\tmov_s r12,blink\n+\tmov_s r6,r0\n+\tabs_s r0,r0\n+\tbl.d @SYM(__udivmodsi4)\n+\t abs_s r1,r1\n+\ttst r6,r6\n+\tneg_s r0,r1\n+\tj_s.d [r12]\n+\t mov.pl r0,r1\n+#else /* __ARC700__ */\n+\tabs_s\tr2,r1\n+\tnorm.f\tr4,r0\n+\tneg\tr5,r2\n+\tnorm\tr3,r5\n+\tabs_l\tr12,r0\n+\tbrhs\tr4,r3,.Lonebit\n+\tasl_s\tr2,r2,r3\n+\tasl\tr12,r12,r4\n+\tsub\tlp_count,r3,r4\n+\tcmp_s\tr12,r2\n+\tsub.hs\tr12,r12,r2\n+\ttst_s\tr0,r0\n+\tlp\t.Ldivend\n+.Ldivstart:divaw r12,r12,r2\n+.Ldivend:\n+\tlsr\tr0,r12,r3\n+\tj_s.d\t[blink]\n+\tneg.mi\tr0,r0\n+\t.balign\t4\n+.Lonebit:neg.pl\tr5,r5\n+\tcmp_s\tr12,r2\n+\tj_s.d\t[blink]\n+\tsub.hs\tr0,r0,r5\n+#endif /* __ARC700__ */\n+\tENDFUNC(__modsi3)\n+\n+#endif /* L_modsi3 */\n+\n+#ifdef L_clzsi2\n+       .section .text\n+       .align 4\n+       .global SYM (__clzsi2)\n+SYM(__clzsi2):\t\n+#ifdef __ARC_NORM__\n+\tHIDDEN_FUNC(__clzsi2)\n+\tnorm.f\tr0,r0\n+\tmov.n\tr0,0\n+\tj_s.d\t[blink]\n+\tadd.pl\tr0,r0,1\n+\tENDFUNC(__clzsi2)\n+#elif defined (__ARC601__)\n+\tFUNC(__clzsi2)\n+\tmov lp_count,10\n+\tmov_l r1,0\n+\tbset r2,r1,29\n+\tlp .Loop_end\n+\tbrhs r0,r2,.Loop_end\n+\tadd3 r0,r1,r0\n+.Loop_end:\n+\tasl.f 0,r0\n+\tsub2 r0,lp_count,lp_count\n+\tsub.cs.f r0,r0,1\n+\tadd r0,r0,31\n+\tj_s.d [blink]\n+\tadd.pl r0,r0,1\n+\tENDFUNC(__clzsi2)\n+#else\n+\tFUNC(__clzsi2)\n+\tasl.f 0,r0,2\n+\tmov r1,-1\n+.Lcheck:\n+\tbbit1.d r0,31,.Ldone\n+\tasl.pl r0,r0,3\n+\tbcs.d .Ldone_1\n+\tadd_s r1,r1,3\n+\tbpnz.d .Lcheck\n+\tasl.f 0,r0,2\n+\tmov_s r0,32\n+\tj_s.d [blink]\n+\tmov.ne r0,r1\n+.Ldone:\n+\tj_s.d [blink]\n+\tadd_s r0,r1,1\n+.Ldone_1:\n+\tj_s.d [blink]\n+\tsub_s r0,r1,1\n+\tENDFUNC(__clzsi2)\n+#endif\n+#endif /* L_clzsi2 */\n+       .section .text\n+\n+\n+;;; MILLICODE THUNK LIB ;***************\n+\t\n+;;; \t.macro push_regs from, to, offset\n+;;; \t\tst_s \"\\from\", [sp, \\offset]\n+;;; \t\t.if \\to-\\from\n+;;; \t\t\tpush_regs \"(\\from+1)\", \\to, \"(\\offset+4)\"\n+;;; \t\t.endif\n+;;; \t.endm\n+;;; \tpush_regs 13, 18, 0\n+;;;\n+\n+;;;;   \t.macro sum from, to, three\n+;;;;   \t\t.long \\from\n+;;;;   \t\t.long \\three\n+;;;;   \t\t.local regno\n+;;;;   \t\t.set regno, \\from+1\n+;;;;   \t\t.set shift, 32\n+;;;;   \t\t.set shift, shift - 1\n+;;;;   #\t\tst_s %shift @3 lsl #shift \n+;;;;   \t\t.if \\to-\\from\n+;;;;   \t\tsum \"(\\from+1)\", \\to, \"(\\three)\"\n+;;;;   \t\t.endif\t\t\n+;;;;   \t.endm\n+;;;;   \t\n+;;;;   \tSUM 0,5, 9\n+;;;;   \t\n+;\t.altmacro\t\t\n+;;  \t.macro push_regs from=0, to=3, offset\n+;;  \t\tst_s r\\from, [sp, \\offset]\n+;;  \t\t.if \\to-\\from\n+;;  \t\t\tpush_regs \"\\from+1 \",\\to,\"(\\offset+4)\"\n+;;  \t\t.endif\n+;;  \t.endm\n+;;  \n+;;  \t.macro expand_to_push from=13, to\n+;;  ;\t\t.section .text\n+;;  ;\t\t.align 4\n+;;  ;\t\t.global st_\n+;;  ;\t\t.type foo,\n+;;  \tst_13_to_25:\n+;;  ;\t\tpush_regs \\from, \\to, 0\n+;;  \tpush_regs 0,3\t\t; \n+;;  \t.endm\n+;;  \n+;;  \texpand_to_push 13,18\n+;;  \n+;#endif\n+\n+#ifdef L_millicodethunk_st\n+\t.section .text\n+\t.align 4\n+\t.global SYM(__st_r13_to_r15)\n+\t.global SYM(__st_r13_to_r16)\n+\t.global SYM(__st_r13_to_r17)\n+\t.global SYM(__st_r13_to_r18)\n+\t.global SYM(__st_r13_to_r19)\n+\t.global SYM(__st_r13_to_r20)\n+\t.global SYM(__st_r13_to_r21)\n+\t.global SYM(__st_r13_to_r22)\n+\t.global SYM(__st_r13_to_r23)\n+\t.global SYM(__st_r13_to_r24)\n+\t.global SYM(__st_r13_to_r25)\n+\tHIDDEN_FUNC(__st_r13_to_r15)\n+\tHIDDEN_FUNC(__st_r13_to_r16)\n+\tHIDDEN_FUNC(__st_r13_to_r17)\n+\tHIDDEN_FUNC(__st_r13_to_r18)\n+\tHIDDEN_FUNC(__st_r13_to_r19)\n+\tHIDDEN_FUNC(__st_r13_to_r20)\n+\tHIDDEN_FUNC(__st_r13_to_r21)\n+\tHIDDEN_FUNC(__st_r13_to_r22)\n+\tHIDDEN_FUNC(__st_r13_to_r23)\n+\tHIDDEN_FUNC(__st_r13_to_r24)\n+\tHIDDEN_FUNC(__st_r13_to_r25)\n+\t.align 4\n+SYM(__st_r13_to_r25):\n+\tst r25, [sp,48]\n+SYM(__st_r13_to_r24):\t\n+\tst r24, [sp,44]\n+SYM(__st_r13_to_r23):\t\n+\tst r23, [sp,40]\n+SYM(__st_r13_to_r22):\t\n+\tst r22, [sp,36]\n+SYM(__st_r13_to_r21):\t\n+\tst r21, [sp,32]\n+SYM(__st_r13_to_r20):\t\n+\tst r20, [sp,28]\t\t\n+SYM(__st_r13_to_r19):\t\n+\tst r19, [sp,24]\n+SYM(__st_r13_to_r18):\t\n+\tst r18, [sp,20]\n+SYM(__st_r13_to_r17):\t\n+\tst r17, [sp,16]\n+SYM(__st_r13_to_r16):\t\n+\tst r16, [sp,12]\n+SYM(__st_r13_to_r15):\t\n+#ifdef __ARC700__\n+\tst r15, [sp,8] ; minimum function size to avoid stall: 6 bytes.\n+#else\n+\tst_s r15, [sp,8]\n+#endif\n+\tst_s r14, [sp,4]\n+\tj_s.d [%blink]\n+\tst_s r13, [sp,0]\t\n+\tENDFUNC(__st_r13_to_r15)\n+\tENDFUNC(__st_r13_to_r16)\n+\tENDFUNC(__st_r13_to_r17)\n+\tENDFUNC(__st_r13_to_r18)\n+\tENDFUNC(__st_r13_to_r19)\n+\tENDFUNC(__st_r13_to_r20)\n+\tENDFUNC(__st_r13_to_r21)\n+\tENDFUNC(__st_r13_to_r22)\n+\tENDFUNC(__st_r13_to_r23)\n+\tENDFUNC(__st_r13_to_r24)\n+\tENDFUNC(__st_r13_to_r25)\n+#endif  /* L_millicodethunk_st */\n+\n+\n+#ifdef L_millicodethunk_ld\n+\t.section .text\n+\t.align 4\n+;\t================================== \n+;\tthe loads\n+\n+\t.global SYM(__ld_r13_to_r15)\n+\t.global SYM(__ld_r13_to_r16)\n+\t.global SYM(__ld_r13_to_r17)\n+\t.global SYM(__ld_r13_to_r18)\n+\t.global SYM(__ld_r13_to_r19)\n+\t.global SYM(__ld_r13_to_r20)\n+\t.global SYM(__ld_r13_to_r21)\n+\t.global SYM(__ld_r13_to_r22)\n+\t.global SYM(__ld_r13_to_r23)\n+\t.global SYM(__ld_r13_to_r24)\n+\t.global SYM(__ld_r13_to_r25)\n+\tHIDDEN_FUNC(__ld_r13_to_r15)\n+\tHIDDEN_FUNC(__ld_r13_to_r16)\n+\tHIDDEN_FUNC(__ld_r13_to_r17)\n+\tHIDDEN_FUNC(__ld_r13_to_r18)\n+\tHIDDEN_FUNC(__ld_r13_to_r19)\n+\tHIDDEN_FUNC(__ld_r13_to_r20)\n+\tHIDDEN_FUNC(__ld_r13_to_r21)\n+\tHIDDEN_FUNC(__ld_r13_to_r22)\n+\tHIDDEN_FUNC(__ld_r13_to_r23)\n+\tHIDDEN_FUNC(__ld_r13_to_r24)\n+\tHIDDEN_FUNC(__ld_r13_to_r25)\n+SYM(__ld_r13_to_r25):\n+\tld r25, [sp,48]\n+SYM(__ld_r13_to_r24):\n+\tld r24, [sp,44]\n+SYM(__ld_r13_to_r23):\n+\tld r23, [sp,40]\n+SYM(__ld_r13_to_r22):\n+\tld r22, [sp,36]\n+SYM(__ld_r13_to_r21):\n+\tld r21, [sp,32]\n+SYM(__ld_r13_to_r20):\n+\tld r20, [sp,28]\t\t\n+SYM(__ld_r13_to_r19):\n+\tld r19, [sp,24]\n+SYM(__ld_r13_to_r18):\n+\tld r18, [sp,20]\n+SYM(__ld_r13_to_r17):\n+\tld r17, [sp,16]\n+SYM(__ld_r13_to_r16):\n+\tld r16, [sp,12]\n+SYM(__ld_r13_to_r15):\n+#ifdef __ARC700__\n+\tld r15, [sp,8] ; minimum function size to avoid stall: 6 bytes.\n+#else\n+\tld_s r15, [sp,8]\n+#endif\n+\tld_s r14, [sp,4]\n+\tj_s.d [%blink]\n+\tld_s r13, [sp,0]\n+\tENDFUNC(__ld_r13_to_r15)\n+\tENDFUNC(__ld_r13_to_r16)\n+\tENDFUNC(__ld_r13_to_r17)\n+\tENDFUNC(__ld_r13_to_r18)\n+\tENDFUNC(__ld_r13_to_r19)\n+\tENDFUNC(__ld_r13_to_r20)\n+\tENDFUNC(__ld_r13_to_r21)\n+\tENDFUNC(__ld_r13_to_r22)\n+\tENDFUNC(__ld_r13_to_r23)\n+\tENDFUNC(__ld_r13_to_r24)\n+\tENDFUNC(__ld_r13_to_r25)\n+\n+#endif /* L_millicodethunk_ld */\n+#ifdef L_millicodethunk_ret\n+\t.global SYM(__ld_r13_to_r14_ret)\n+\t.global SYM(__ld_r13_to_r15_ret)\n+\t.global SYM(__ld_r13_to_r16_ret)\n+\t.global SYM(__ld_r13_to_r17_ret)\n+\t.global SYM(__ld_r13_to_r18_ret)\n+\t.global SYM(__ld_r13_to_r19_ret)\n+\t.global SYM(__ld_r13_to_r20_ret)\n+\t.global SYM(__ld_r13_to_r21_ret)\n+\t.global SYM(__ld_r13_to_r22_ret)\n+\t.global SYM(__ld_r13_to_r23_ret)\n+\t.global SYM(__ld_r13_to_r24_ret)\n+\t.global SYM(__ld_r13_to_r25_ret)\n+\tHIDDEN_FUNC(__ld_r13_to_r14_ret)\n+\tHIDDEN_FUNC(__ld_r13_to_r15_ret)\n+\tHIDDEN_FUNC(__ld_r13_to_r16_ret)\n+\tHIDDEN_FUNC(__ld_r13_to_r17_ret)\n+\tHIDDEN_FUNC(__ld_r13_to_r18_ret)\n+\tHIDDEN_FUNC(__ld_r13_to_r19_ret)\n+\tHIDDEN_FUNC(__ld_r13_to_r20_ret)\n+\tHIDDEN_FUNC(__ld_r13_to_r21_ret)\n+\tHIDDEN_FUNC(__ld_r13_to_r22_ret)\n+\tHIDDEN_FUNC(__ld_r13_to_r23_ret)\n+\tHIDDEN_FUNC(__ld_r13_to_r24_ret)\n+\tHIDDEN_FUNC(__ld_r13_to_r25_ret)\n+\t.section .text\n+\t.align 4\n+SYM(__ld_r13_to_r25_ret):\n+\tld r25, [sp,48]\n+SYM(__ld_r13_to_r24_ret):\n+\tld r24, [sp,44]\n+SYM(__ld_r13_to_r23_ret):\n+\tld r23, [sp,40]\n+SYM(__ld_r13_to_r22_ret):\n+\tld r22, [sp,36]\n+SYM(__ld_r13_to_r21_ret):\n+\tld r21, [sp,32]\n+SYM(__ld_r13_to_r20_ret):\n+\tld r20, [sp,28]\t\t\n+SYM(__ld_r13_to_r19_ret):\n+\tld r19, [sp,24]\n+SYM(__ld_r13_to_r18_ret):\n+\tld r18, [sp,20]\n+SYM(__ld_r13_to_r17_ret):\n+\tld r17, [sp,16]\n+SYM(__ld_r13_to_r16_ret):\n+\tld r16, [sp,12]\n+SYM(__ld_r13_to_r15_ret):\n+\tld r15, [sp,8]\n+SYM(__ld_r13_to_r14_ret):\n+\tld blink,[sp,r12]\n+\tld_s r14, [sp,4]\n+\tld.ab r13, [sp,r12]\n+\tj_s.d [%blink]\n+\tadd_s sp,sp,4\n+\tENDFUNC(__ld_r13_to_r14_ret)\n+\tENDFUNC(__ld_r13_to_r15_ret)\n+\tENDFUNC(__ld_r13_to_r16_ret)\n+\tENDFUNC(__ld_r13_to_r17_ret)\n+\tENDFUNC(__ld_r13_to_r18_ret)\n+\tENDFUNC(__ld_r13_to_r19_ret)\n+\tENDFUNC(__ld_r13_to_r20_ret)\n+\tENDFUNC(__ld_r13_to_r21_ret)\n+\tENDFUNC(__ld_r13_to_r22_ret)\n+\tENDFUNC(__ld_r13_to_r23_ret)\n+\tENDFUNC(__ld_r13_to_r24_ret)\n+\tENDFUNC(__ld_r13_to_r25_ret)\n+\n+#endif /* L_millicodethunk_ret */\n+\n+#ifdef  L_adddf3\n+#ifdef __ARC_NORM__\n+#include \"ieee-754/adddf3.S\"\n+#endif\n+#endif\n+\n+#ifdef  L_muldf3\n+#ifdef __ARC700__\n+#include \"ieee-754/muldf3.S\"\n+#elif defined (__ARC_NORM__) && defined(__ARC_MUL64__)\n+#include \"ieee-754/arc600-mul64/muldf3.S\"\n+#elif defined (__ARC_NORM__) && defined(__ARC_MUL32BY16__)\n+#include \"ieee-754/arc600-dsp/muldf3.S\"\n+#endif\n+#endif\n+\n+#ifdef  L_addsf3\n+#ifdef __ARC_NORM__\n+#include \"ieee-754/addsf3.S\"\n+#endif\n+#endif\n+\n+#ifdef  L_mulsf3\n+#ifdef __ARC700__\n+#include \"ieee-754/mulsf3.S\"\n+#elif defined (__ARC_NORM__) && defined(__ARC_MUL64__)\n+#include \"ieee-754/arc600-mul64/mulsf3.S\"\n+#elif defined (__ARC_NORM__) && defined(__ARC_MUL32BY16__)\n+#include \"ieee-754/arc600-dsp/mulsf3.S\"\n+#elif defined (__ARC_NORM__)\n+#include \"ieee-754/arc600/mulsf3.S\"\n+#endif\n+#endif\n+\n+#ifdef  L_divdf3\n+#ifdef __ARC700__\n+#include \"ieee-754/divdf3.S\"\n+#elif defined (__ARC_NORM__) && defined(__ARC_MUL64__)\n+#include \"ieee-754/arc600-mul64/divdf3.S\"\n+#elif defined (__ARC_NORM__) && defined(__ARC_MUL32BY16__)\n+#include \"ieee-754/arc600-dsp/divdf3.S\"\n+#endif\n+#endif\n+\n+#ifdef  L_divsf3\n+#ifdef __ARC700__\n+#include \"ieee-754/divsf3-stdmul.S\"\n+#elif defined (__ARC_NORM__) && defined(__ARC_MUL64__)\n+#include \"ieee-754/arc600-mul64/divsf3.S\"\n+#elif defined (__ARC_NORM__) && defined(__ARC_MUL32BY16__)\n+#include \"ieee-754/arc600-dsp/divsf3.S\"\n+#elif defined (__ARC_NORM__)\n+#include \"ieee-754/arc600/divsf3.S\"\n+#endif\n+#endif\n+\n+#ifdef L_extendsfdf2\n+#ifdef __ARC_NORM__\n+#include \"ieee-754/extendsfdf2.S\"\n+#endif\n+#endif\n+\n+#ifdef L_truncdfsf2\n+#ifdef __ARC_NORM__\n+#include \"ieee-754/truncdfsf2.S\"\n+#endif\n+#endif\n+\n+#ifdef L_floatsidf\n+#ifdef __ARC_NORM__\n+#include \"ieee-754/floatsidf.S\"\n+#endif\n+#endif\n+\n+#ifdef L_floatsisf\n+#ifdef __ARC_NORM__\n+#include \"ieee-754/floatsisf.S\"\n+#endif\n+#endif\n+\n+#ifdef L_floatunsidf\n+#ifdef __ARC_NORM__\n+#include \"ieee-754/floatunsidf.S\"\n+#endif\n+#endif\n+\n+#ifdef L_fixdfsi\n+#ifdef __ARC_NORM__\n+#include \"ieee-754/fixdfsi.S\"\n+#endif\n+#endif\n+\n+#ifdef L_fixsfsi\n+#ifdef __ARC_NORM__\n+#include \"ieee-754/fixsfsi.S\"\n+#endif\n+#endif\n+\n+#ifdef L_fixunsdfsi\n+#ifdef __ARC_NORM__\n+#include \"ieee-754/fixunsdfsi.S\"\n+#endif\n+#endif\n+\n+#ifdef L_eqdf2\n+#ifdef __ARC_NORM__\n+#include \"ieee-754/eqdf2.S\"\n+#endif\n+#endif\n+\n+#ifdef L_eqsf2\n+#ifdef __ARC_NORM__\n+#include \"ieee-754/eqsf2.S\"\n+#endif\n+#endif\n+\n+#ifdef L_gtdf2\n+#ifdef __ARC_NORM__\n+#include \"ieee-754/gtdf2.S\"\n+#endif\n+#endif\n+\n+#ifdef L_gtsf2\n+#ifdef __ARC_NORM__\n+#include \"ieee-754/gtsf2.S\"\n+#endif\n+#endif\n+\n+#ifdef L_gedf2\n+#ifdef __ARC_NORM__\n+#include \"ieee-754/gedf2.S\"\n+#endif\n+#endif\n+\n+#ifdef L_gesf2\n+#ifdef __ARC_NORM__\n+#include \"ieee-754/gesf2.S\"\n+#endif\n+#endif\n+\n+#ifdef L_uneqdf2\n+#ifdef __ARC_NORM__\n+#include \"ieee-754/uneqdf2.S\"\n+#endif\n+#endif\n+\n+#ifdef L_uneqsf2\n+#ifdef __ARC_NORM__\n+#include \"ieee-754/uneqsf2.S\"\n+#endif\n+#endif\n+\n+#ifdef L_orddf2\n+#ifdef __ARC_NORM__\n+#include \"ieee-754/orddf2.S\"\n+#endif\n+#endif\n+\n+#ifdef L_ordsf2\n+#ifdef __ARC_NORM__\n+#include \"ieee-754/ordsf2.S\"\n+#endif\n+#endif"}, {"sha": "10c7410ef9ae406ca46f13eb72e3c729b652283e", "filename": "libgcc/config/arc/libgcc-excl.ver", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Flibgcc-excl.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Flibgcc-excl.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Flibgcc-excl.ver?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,43 @@\n+# Exclude libgcc.so symbols for the Synopsys DesignWare ARC CPU.\n+\n+# Copyright (C) 2007-2012 Free Software Foundation, Inc.\n+# Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+#              on behalf of Synopsys Inc.\n+\n+# This file is part of GCC.\n+\n+# GCC is free software; you can redistribute it and/or modify it under\n+# the terms of the GNU General Public License as published by the Free\n+# Software Foundation; either version 3, or (at your option) any later\n+# version.\n+\n+# GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+# WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# for more details.\n+\n+# Under Section 7 of GPL version 3, you are granted additional\n+# permissions described in the GCC Runtime Library Exception, version\n+# 3.1, as published by the Free Software Foundation.\n+\n+# You should have received a copy of the GNU General Public License and\n+# a copy of the GCC Runtime Library Exception along with this program;\n+# see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+# <http://www.gnu.org/licenses/>.  */\n+\n+# Exclude various symbols which should not be visible in libgcc.so for ARC.\n+# Floating point comparisons use a special lightweight ABI which is not\n+# compatible with calls via a plt.  Moreover, the code is so compact that\n+# it is better to include a separate copy in each dso.\n+%exclude {\n+  __eqsf2\n+  __eqdf2\n+  __gtsf2\n+  __gtdf2\n+  __gesf2\n+  __gedf2\n+  __uneqsf2\n+  __uneqdf2\n+  __ordsf2\n+  __orddf2\n+}"}, {"sha": "6edf10ee3ec49fe161e974cc1ae2afe898ea822d", "filename": "libgcc/config/arc/t-arc", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Ft-arc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Ft-arc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Ft-arc?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,100 @@\n+# GCC Makefile fragment for Synopsys DesignWare ARC\n+\n+# Copyright (C) 2007-2013 Free Software Foundation, Inc.  \n+# Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+#              on behalf of Synopsys Inc.\n+\n+# This file is part of GCC.\n+\n+# GCC is free software; you can redistribute it and/or modify it under the\n+# terms of the GNU General Public License as published by the Free Software\n+# Foundation; either version 3, or (at your option) any later version.\n+\n+# GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n+# details.\n+\n+# You should have received a copy of the GNU General Public License along\n+# with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+CROSS_LIBGCC1 = libgcc1-asm.a\n+LIB1ASMSRC = arc/lib1funcs.S\n+LIB1ASMFUNCS = _mulsi3 _umulsidi3  _umulsi3_highpart \\\n+  _udivsi3 _divsi3 _umodsi3 _modsi3 \\\n+  _divmod_tools _clzsi2 \\\n+  _millicodethunk_st _millicodethunk_ld _millicodethunk_ret \\\n+  _adddf3 _muldf3 _addsf3 _mulsf3 _divsf3 _divdf3 _truncdfsf2 _extendsfdf2 \\\n+  _eqdf2 _eqsf2 _gedf2 _gesf2 _gtdf2 _gtsf2 _uneqdf2 _uneqsf2 _ordsf2 _orddf2 \\\n+  _fixdfsi _fixsfsi _floatsidf _floatsisf _fixunsdfsi _floatunsidf\n+\n+#LIBGCC2_CFLAGS = -g1 -O2 $(LIBGCC2_INCLUDES) $(GCC_CFLAGS)\n+\n+# For floating-point emulation, we mostly use hand-coded assembly.\n+# We use fp-bit.c for debugging purposes, and some parts of it\n+# as a fallback for hardware configurations for which the hand-coded\n+# assembly support is incomplete, i.e., where there is no NORM and/or no\n+# supported multiply instruction.  Using floating point on such a\n+# configuration is generally inadvisable, but we got to provide support\n+# somehow so that we can run the testsuites.\n+# fp-hack.h / dp-hack.h take care of slecting the parts that are needed,\n+# and (for debugging) of renaming functions so that they can be\n+# used in an asm wrapper.\n+\n+LIB2ADD = fp-bit.c dp-bit.c\n+\n+dp-bit.c: $(srcdir)/fp-bit.c\n+\techo '#ifndef __big_endian__' > dp-bit.c\n+\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> dp-bit.c\n+\techo '#endif' >> dp-bit.c\n+\techo '#include \"fp-bit.h\"' >> dp-bit.c\n+\techo '#include \"config/arc/dp-hack.h\"' >> dp-bit.c\n+\tgrep -v 'include.*fp-bit.h' $(srcdir)/fp-bit.c >> dp-bit.c\n+\n+fp-bit.c: $(srcdir)/fp-bit.c\n+\techo '#define FLOAT' > fp-bit.c\n+\techo '#ifndef __big_endian__' >> fp-bit.c\n+\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> fp-bit.c\n+\techo '#endif' >> fp-bit.c\n+\techo '#include \"config/arc/fp-hack.h\"' >> fp-bit.c\n+\tcat $(srcdir)/fp-bit.c >> fp-bit.c\n+\n+# .init/.fini section routines\n+\n+crtg.o: $(srcdir)/config/arc/crtg.S\n+\t$(crt_compile) -c -x assembler-with-cpp $<\n+\n+crtgend.o: $(srcdir)/config/arc/crtgend.S\n+\t$(crt_compile) -c -x assembler-with-cpp $<\n+\n+mcount.o: $(srcdir)/config/arc/gmon/mcount.c\n+\t$(gcc_compile) -isystem $(srcdir)/config/arc/gmon -c $< \\\n+\t-fcall-saved-r0 -fcall-saved-r1 -fcall-saved-r2 -fcall-saved-r3 \\\n+\t-fcall-saved-r4 -fcall-saved-r5 -fcall-saved-r6 -fcall-saved-r7 \\\n+\t-fomit-frame-pointer\n+\n+gmon.o: $(srcdir)/config/arc/gmon/gmon.c\n+\t$(gcc_compile) -isystem $(srcdir)/config/arc/gmon -mno-sdata -c $< \\\n+\t-fno-strict-aliasing \\\n+\t-Wno-extra # suppress inane warning about missing initializer.\n+\t# Adding initializers for the remaining elements of gmonparam would\n+\t# make the code more brittle.\n+\n+prof-freq-stub.o: $(srcdir)/config/arc/gmon/prof-freq-stub.S\n+\t$(gcc_compile) -isystem $(srcdir)/config/arc/gmon -c $<\n+\n+prof-freq.o: $(srcdir)/config/arc/gmon/prof-freq.c\n+\t$(gcc_compile) -isystem $(srcdir)/config/arc/gmon -c $<\n+\n+dcache_linesz.o: $(srcdir)/config/arc/gmon/dcache_linesz.S\n+\t$(gcc_compile) -isystem $(srcdir)/config/arc/gmon -c $<\n+\n+profil.o: $(srcdir)/config/arc/gmon/profil.S\n+\t$(gcc_compile) -isystem $(srcdir)/config/arc/gmon -c $<\n+\n+profil-uclibc.o: $(srcdir)/config/arc/gmon/profil-uclibc.c\n+\t$(gcc_compile) -isystem $(srcdir)/config/arc/gmon -c $<\n+\n+libgmon.a: mcount.o gmon.o dcache_linesz.o $(PROFILE_OSDEP)\n+\t$(AR_CREATE_FOR_TARGET) $@ $^"}, {"sha": "685ed18f2ca0f346b3f819708c2e9fcf5b3c7ef2", "filename": "libgcc/config/arc/t-arc-newlib", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Ft-arc-newlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Ft-arc-newlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Ft-arc-newlib?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,22 @@\n+# GCC Makefile fragment for the Synopsys DesignWare ARC CPU with newlib.\n+\n+# Copyright (C) 2007-2012 Free Software Foundation, Inc.  \n+# Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+#              on behalf of Synopsys Inc.\n+\n+# This file is part of GCC.\n+\n+# GCC is free software; you can redistribute it and/or modify it under the\n+# terms of the GNU General Public License as published by the Free Software\n+# Foundation; either version 3, or (at your option) any later version.\n+\n+# GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n+# details.\n+\n+# You should have received a copy of the GNU General Public License along\n+# with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+PROFILE_OSDEP = prof-freq-stub.o profil.o"}, {"sha": "fb34a8b86e119f7f06e385376b920340c649caaf", "filename": "libgcc/config/arc/t-arc700-uClibc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Ft-arc700-uClibc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Fconfig%2Farc%2Ft-arc700-uClibc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Ft-arc700-uClibc?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -0,0 +1,40 @@\n+# GCC Makefile fragment for the Synopsys DesignWare ARC700 CPU with uClibc.\n+\n+# Copyright (C) 2007-2012 Free Software Foundation, Inc.\n+# Contributor: Joern Rennecke <joern.rennecke@embecosm.com>\n+#              on behalf of Synopsys Inc.\n+\n+# This file is part of GCC.\n+\n+# GCC is free software; you can redistribute it and/or modify it under\n+# the terms of the GNU General Public License as published by the Free\n+# Software Foundation; either version 3, or (at your option) any later\n+# version.\n+\n+# GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+# WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# for more details.\n+\n+# Under Section 7 of GPL version 3, you are granted additional\n+# permissions described in the GCC Runtime Library Exception, version\n+# 3.1, as published by the Free Software Foundation.\n+\n+# You should have received a copy of the GNU General Public License and\n+# a copy of the GCC Runtime Library Exception along with this program;\n+# see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+# <http://www.gnu.org/licenses/>.  */\n+\n+CRTSTUFF_T_CFLAGS += -mno-sdata\n+\n+# Compile crtbeginS.o and crtendS.o with pic.\n+CRTSTUFF_T_CFLAGS_S = $(CRTSTUFF_T_CFLAGS) -mA7 -fPIC\n+\n+# Compile libgcc2.a with pic.\n+TARGET_LIBGCC2_CFLAGS = -mA7 -fPIC\n+\n+PROFILE_OSDEP = prof-freq.o\n+\n+# Override t-slibgcc-elf-ver to hide some lib1func\n+# routines which should not be called via PLT.\n+SHLIB_MAPFILES = libgcc-std.ver $(srcdir)/config/arc/libgcc-excl.ver"}, {"sha": "4fbfbaeca4134cab267905d7f9d19502d18dd2d7", "filename": "libgcc/longlong.h", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Flonglong.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38a64b4e0b3b1a27afc2d660144032e68f41135/libgcc%2Flonglong.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flonglong.h?ref=d38a64b4e0b3b1a27afc2d660144032e68f41135", "patch": "@@ -188,16 +188,20 @@ extern UDItype __udiv_qrnnd (UDItype *, UDItype, UDItype, UDItype);\n \t     \"rIJ\" ((USItype) (bh)),\t\t\t\t\t\\\n \t     \"r\" ((USItype) (al)),\t\t\t\t\t\\\n \t     \"rIJ\" ((USItype) (bl)))\n-/* Call libgcc routine.  */\n-#define umul_ppmm(w1, w0, u, v) \\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  DWunion __w;\t\t\t\t\t\t\t\t\\\n-  __w.ll = __umulsidi3 (u, v);\t\t\t\t\t\t\\\n-  w1 = __w.s.high;\t\t\t\t\t\t\t\\\n-  w0 = __w.s.low;\t\t\t\t\t\t\t\\\n-} while (0)\n-#define __umulsidi3 __umulsidi3\n-UDItype __umulsidi3 (USItype, USItype);\n+\n+#define __umulsidi3(u,v) ((UDItype)(USItype)u*(USItype)v)\n+#ifdef __ARC_NORM__\n+#define count_leading_zeros(count, x) \\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      SItype c_;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      __asm__ (\"norm.f\\t%0,%1\\n\\tmov.mi\\t%0,-1\" : \"=r\" (c_) : \"r\" (x) : \"cc\");\\\n+      (count) = c_ + 1;\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+#define COUNT_LEADING_ZEROS_0 32\n+#endif\n #endif\n \n #if defined (__arm__) && (defined (__thumb2__) || !defined (__thumb__)) \\"}]}