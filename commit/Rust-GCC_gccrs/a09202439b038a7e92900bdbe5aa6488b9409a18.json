{"sha": "a09202439b038a7e92900bdbe5aa6488b9409a18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA5MjAyNDM5YjAzOGE3ZTkyOTAwYmRiZTVhYTY0ODhiOTQwOWExOA==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2017-11-30T14:42:12Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2017-11-30T14:42:12Z"}, "message": "[ARC] Don't allow the last ZOL insn to be in a delay slot.\n\nThe ARC ZOL implementation doesn't allow the last instruction to be a\ncontrol instruction or part of a delay slot.  Thus, we add a note to\nthe last ZOL instruction which will prevent it to finish into a delay\nslot.\n\n2017-10-20  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc.c (hwloop_optimize): Prevent the last\n        ZOL instruction to end into a delay slot.\n\t* config/arc/arc.md (cond_delay_insn): Check if the instruction\n\tcan be placed into a delay slot against reg_note.\n\t(in_delay_slot): Likewise.\n\ntestsuite/\n2017-10-20  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* gcc.target/arc/loop-3.c: New test.\n\t* gcc.target/arc/loop-4.c: Likewise.\n\n[FIX][ZOL] fix checking for jumps\n\nFrom-SVN: r255275", "tree": {"sha": "9ded931435c2d2329430591a7fe9c439880f9238", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ded931435c2d2329430591a7fe9c439880f9238"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a09202439b038a7e92900bdbe5aa6488b9409a18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a09202439b038a7e92900bdbe5aa6488b9409a18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a09202439b038a7e92900bdbe5aa6488b9409a18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a09202439b038a7e92900bdbe5aa6488b9409a18/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d4c34aaade8422c8289daa8a5c95fab7830de37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d4c34aaade8422c8289daa8a5c95fab7830de37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d4c34aaade8422c8289daa8a5c95fab7830de37"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "ae502ca2b6a51cc4a6a49d14f5100d7b731e13c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09202439b038a7e92900bdbe5aa6488b9409a18/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09202439b038a7e92900bdbe5aa6488b9409a18/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a09202439b038a7e92900bdbe5aa6488b9409a18", "patch": "@@ -1,3 +1,10 @@\n+2017-11-30  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.c (hwloop_optimize): Prevent the last ZOL\n+\tinstruction to end into a delay slot.\n+\t* config/arc/arc.md (cond_delay_insn): Check if the instruction\n+\tcan be placed into a delay slot against reg_note.\n+\n 2017-11-30  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.c (hwloop_optimize): Update hw-loop's end/start"}, {"sha": "6b6bf8224e6831f363dbd03b93effe03f795da48", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09202439b038a7e92900bdbe5aa6488b9409a18/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09202439b038a7e92900bdbe5aa6488b9409a18/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=a09202439b038a7e92900bdbe5aa6488b9409a18", "patch": "@@ -7408,6 +7408,12 @@ hwloop_optimize (hwloop_info loop)\n \t\t loop->loop_no);\n       last_insn = emit_insn_after (gen_nopv (), last_insn);\n     }\n+\n+  /* SAVE_NOTE is used by haifa scheduler.  However, we are after it\n+     and we can use it to indicate the last ZOL instruction cannot be\n+     part of a delay slot.  */\n+  add_reg_note (last_insn, REG_SAVE_NOTE, GEN_INT (2));\n+\n   loop->last_insn = last_insn;\n \n   /* Get the loop iteration register.  */"}, {"sha": "b39f04771c9a55ce19566a510f3c65a5637fbaa1", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09202439b038a7e92900bdbe5aa6488b9409a18/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09202439b038a7e92900bdbe5aa6488b9409a18/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=a09202439b038a7e92900bdbe5aa6488b9409a18", "patch": "@@ -471,6 +471,8 @@\n \t     (symbol_ref \"(arc_hazard (prev_active_insn (insn), insn)\n \t\t\t   + arc_hazard (insn, next_active_insn (insn)))\"))\n \t (const_string \"false\")\n+\t (match_test \"find_reg_note (insn, REG_SAVE_NOTE, GEN_INT (2))\")\n+\t (const_string \"false\")\n \t (eq_attr \"iscompact\" \"maybe\") (const_string \"true\")\n \t ]\n \n@@ -498,6 +500,8 @@\n   (cond [(eq_attr \"cond\" \"!canuse\") (const_string \"no\")\n \t (eq_attr \"type\" \"call,branch,uncond_branch,jump,brcc\")\n \t (const_string \"no\")\n+\t (match_test \"find_reg_note (insn, REG_SAVE_NOTE, GEN_INT (2))\")\n+\t (const_string \"no\")\n \t (eq_attr \"length\" \"2,4\") (const_string \"yes\")]\n \t(const_string \"no\")))\n "}, {"sha": "972d1cbe6ef3b0e5f1b2cefaae36423728fb1400", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09202439b038a7e92900bdbe5aa6488b9409a18/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09202439b038a7e92900bdbe5aa6488b9409a18/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a09202439b038a7e92900bdbe5aa6488b9409a18", "patch": "@@ -1,3 +1,8 @@\n+2017-11-30  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* gcc.target/arc/loop-3.c: New test.\n+\t* gcc.target/arc/loop-4.c: Likewise.\n+\n 2017-11-30  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* gcc.target/arc/loop-2.cpp: New test."}, {"sha": "bf7aec948422acc6717da3beda4592fa7137c2ad", "filename": "gcc/testsuite/gcc.target/arc/loop-3.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09202439b038a7e92900bdbe5aa6488b9409a18/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Floop-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09202439b038a7e92900bdbe5aa6488b9409a18/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Floop-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Floop-3.c?ref=a09202439b038a7e92900bdbe5aa6488b9409a18", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do assemble } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mno-sdata\" } *\n+\n+/* This example will fail to assemble if the last instruction is a\n+   branch with delay slot.  */\n+int d;\n+extern char * fn2 (void);\n+\n+void fn1(void)\n+{\n+  char *a = fn2();\n+  for (;;) {\n+    long long b;\n+    int e = 8;\n+    for (; e <= 63; e += 7) {\n+      long c = *a++;\n+      b += c & e;\n+      if (c & 28)\n+        break;\n+    }\n+    d = b;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler \"bne_s @.L2\" } } */\n+/* { dg-final { scan-assembler-not \"add.eq\" } } */"}, {"sha": "99a93a74d1ed85901d02d5e484593b3139f0e6c1", "filename": "gcc/testsuite/gcc.target/arc/loop-4.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09202439b038a7e92900bdbe5aa6488b9409a18/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Floop-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09202439b038a7e92900bdbe5aa6488b9409a18/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Floop-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Floop-4.c?ref=a09202439b038a7e92900bdbe5aa6488b9409a18", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do assemble } */\n+/* { dg-do compile } */\n+/* { dg-options \"-Os\" } */\n+\n+\n+void fn1(void *p1, int p2, int p3)\n+{\n+  char *d = p1;\n+  do\n+    *d++ = p2;\n+  while (--p3);\n+}\n+\n+/* { dg-final { scan-assembler \"lp_count\" } } */"}]}