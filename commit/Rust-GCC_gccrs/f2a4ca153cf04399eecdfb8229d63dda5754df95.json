{"sha": "f2a4ca153cf04399eecdfb8229d63dda5754df95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJhNGNhMTUzY2YwNDM5OWVlY2RmYjgyMjlkNjNkZGE1NzU0ZGY5NQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2015-09-11T21:32:38Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-09-11T21:32:38Z"}, "message": "[PATCH] Another small cleanup to the const_and_copies stack\n\n2015-09-11  Jeff Law  <law@redhat.com>\n\n\tPR tree-optimization/47679\n\t* tree-ssa-dom.c (struct cond_equivalence): Update comment.\n\t* tree-ssa-scopedtables.h (class const_and_copies): Prefix data\n\tmember with m_.  Update inline member functions as necessary.  Add\n\ttoplevel comment.\n\t* tree-ssa-scopedtables.c: Update const_and_copies's member\n\tfunctions to use m_ prefix to access the stack.\n\nFrom-SVN: r227697", "tree": {"sha": "d8af52df36b4b2862fdcabe01a633ddf05f1a06f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8af52df36b4b2862fdcabe01a633ddf05f1a06f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2a4ca153cf04399eecdfb8229d63dda5754df95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2a4ca153cf04399eecdfb8229d63dda5754df95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2a4ca153cf04399eecdfb8229d63dda5754df95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2a4ca153cf04399eecdfb8229d63dda5754df95/comments", "author": null, "committer": null, "parents": [{"sha": "cf16e6efb00d9a5bc8a1a314779cc54df3367700", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf16e6efb00d9a5bc8a1a314779cc54df3367700", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf16e6efb00d9a5bc8a1a314779cc54df3367700"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "839b53e26a769790236c96261385d321b8ff616e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2a4ca153cf04399eecdfb8229d63dda5754df95/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2a4ca153cf04399eecdfb8229d63dda5754df95/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2a4ca153cf04399eecdfb8229d63dda5754df95", "patch": "@@ -1,3 +1,13 @@\n+2015-09-11  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/47679\n+\t* tree-ssa-dom.c (struct cond_equivalence): Update comment.\n+\t* tree-ssa-scopedtables.h (class const_and_copies): Prefix data\n+\tmember with m_.  Update inline member functions as necessary.  Add\n+\ttoplevel comment.\n+\t* tree-ssa-scopedtables.c: Update const_and_copies's member\n+\tfunctions to use m_ prefix to access the stack.\n+\n 2015-09-11  Aditya Kumar  <aditya.k7@samsung.com>\n \n         * graphite-optimize-isl.c (disable_tiling): Remove."}, {"sha": "e3eb0dbd54bb5822b0422405080adfbad3c44a71", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2a4ca153cf04399eecdfb8229d63dda5754df95/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2a4ca153cf04399eecdfb8229d63dda5754df95/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=f2a4ca153cf04399eecdfb8229d63dda5754df95", "patch": "@@ -92,19 +92,15 @@ struct cond_equivalence\n };\n \n \n-/* Structure for recording edge equivalences as well as any pending\n-   edge redirections during the dominator optimizer.\n+/* Structure for recording edge equivalences.\n \n    Computing and storing the edge equivalences instead of creating\n    them on-demand can save significant amounts of time, particularly\n    for pathological cases involving switch statements.\n \n    These structures live for a single iteration of the dominator\n    optimizer in the edge's AUX field.  At the end of an iteration we\n-   free each of these structures and update the AUX field to point\n-   to any requested redirection target (the code for updating the\n-   CFG and SSA graph for edge redirection expects redirection edge\n-   targets to be in the AUX field for each edge.  */\n+   free each of these structures.  */\n \n struct edge_info\n {"}, {"sha": "fedd92a850acc8a3568d04292570ea26fa14f0d4", "filename": "gcc/tree-ssa-scopedtables.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2a4ca153cf04399eecdfb8229d63dda5754df95/gcc%2Ftree-ssa-scopedtables.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2a4ca153cf04399eecdfb8229d63dda5754df95/gcc%2Ftree-ssa-scopedtables.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-scopedtables.c?ref=f2a4ca153cf04399eecdfb8229d63dda5754df95", "patch": "@@ -35,11 +35,11 @@ along with GCC; see the file COPYING3.  If not see\n void\n const_and_copies::pop_to_marker (void)\n {\n-  while (stack.length () > 0)\n+  while (m_stack.length () > 0)\n     {\n       tree prev_value, dest;\n \n-      dest = stack.pop ();\n+      dest = m_stack.pop ();\n \n       /* A NULL value indicates we should stop unwinding, otherwise\n \t pop off the next entry as they're recorded in pairs.  */\n@@ -55,7 +55,7 @@ const_and_copies::pop_to_marker (void)\n \t  fprintf (dump_file, \"\\n\");\n \t}\n \n-      prev_value = stack.pop ();\n+      prev_value = m_stack.pop ();\n       set_ssa_name_value (dest, prev_value);\n     }\n }\n@@ -90,9 +90,9 @@ const_and_copies::record_const_or_copy (tree x, tree y, tree prev_x)\n     }\n \n   set_ssa_name_value (x, y);\n-  stack.reserve (2);\n-  stack.quick_push (prev_x);\n-  stack.quick_push (x);\n+  m_stack.reserve (2);\n+  m_stack.quick_push (prev_x);\n+  m_stack.quick_push (x);\n }\n \n /* A new value has been assigned to LHS.  If necessary, invalidate any\n@@ -114,16 +114,16 @@ const_and_copies::invalidate (tree lhs)\n      then it's a \"stop unwinding\" marker.  Else the current marker is\n      the SSA_NAME with an equivalence and the prior entry in the stack\n      is what the current element is equivalent to.  */\n-  for (int i = stack.length() - 1; i >= 0; i--)\n+  for (int i = m_stack.length() - 1; i >= 0; i--)\n     {\n       /* Ignore the stop unwinding markers.  */\n-      if ((stack)[i] == NULL)\n+      if ((m_stack)[i] == NULL)\n \tcontinue;\n \n       /* We want to check the current value of stack[i] to see if\n \t it matches LHS.  If so, then invalidate.  */\n-      if (SSA_NAME_VALUE ((stack)[i]) == lhs)\n-\trecord_const_or_copy ((stack)[i], NULL_TREE);\n+      if (SSA_NAME_VALUE ((m_stack)[i]) == lhs)\n+\trecord_const_or_copy ((m_stack)[i], NULL_TREE);\n \n       /* Remember, we're dealing with two elements in this case.  */\n       i--;"}, {"sha": "f7d9ca4320c578816da064d30c57118ead6c9c2f", "filename": "gcc/tree-ssa-scopedtables.h", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2a4ca153cf04399eecdfb8229d63dda5754df95/gcc%2Ftree-ssa-scopedtables.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2a4ca153cf04399eecdfb8229d63dda5754df95/gcc%2Ftree-ssa-scopedtables.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-scopedtables.h?ref=f2a4ca153cf04399eecdfb8229d63dda5754df95", "patch": "@@ -20,14 +20,20 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_TREE_SSA_SCOPED_TABLES_H\n #define GCC_TREE_SSA_SCOPED_TABLES_H\n \n+/* This class defines an unwindable const/copy equivalence table\n+   layered on top of SSA_NAME_VALUE/set_ssa_name_value.\n+\n+   Essentially it's just a stack of name,prev value pairs with a\n+   special marker (NULL) to indicate unwind points.  */\n+\n class const_and_copies\n {\n  public:\n-  const_and_copies (void) { stack.create (20); };\n-  ~const_and_copies (void) { stack.release (); }\n+  const_and_copies (void) { m_stack.create (20); };\n+  ~const_and_copies (void) { m_stack.release (); }\n \n   /* Push the unwinding marker onto the stack.  */\n-  void push_marker (void) { stack.safe_push (NULL_TREE); }\n+  void push_marker (void) { m_stack.safe_push (NULL_TREE); }\n \n   /* Restore the const/copies table to its state when the last marker\n      was pushed.  */\n@@ -47,7 +53,7 @@ class const_and_copies\n   void invalidate (tree);\n \n  private:\n-  vec<tree> stack;\n+  vec<tree> m_stack;\n };\n \n #endif /* GCC_TREE_SSA_SCOPED_TABLES_H */"}]}