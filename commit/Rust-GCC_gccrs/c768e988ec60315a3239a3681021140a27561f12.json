{"sha": "c768e988ec60315a3239a3681021140a27561f12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc2OGU5ODhlYzYwMzE1YTMyMzlhMzY4MTAyMTE0MGEyNzU2MWYxMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-10T15:08:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-10T15:08:53Z"}, "message": "[multiple changes]\n\n2010-09-10  Thomas Quinot  <quinot@adacore.com>\n\n\t* scos.ads: Add comments.\n\n2010-09-10  Vincent Celier  <celier@adacore.com>\n\n\t* gnatcmd.adb (Get_Closure): Remove useless invocation of Close.\n\n2010-09-10  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch7.adb, exp_ch6.adb (Expand_Call): Establish a transient scope\n\tfor a controlled build-in-place function call which appears in an\n\tanonymous context. The transient scope ensures that the intermediate\n\tfunction result is cleaned up after the master is left.\n\t(Make_Build_In_Place_Call_In_Anonymous_Context): Remove the creation\n\tof the transient scope. This is now done in Exand_Call which covers\n\tadditional cases other than secondary stack release.\n\n2010-09-10  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sem.adb (Do_Unit_And_Dependents): Add guard.\n\n2010-09-10  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch5.adb: Update comments.\n\t* exp_dist.adb: Minor reformatting.\n\nFrom-SVN: r164187", "tree": {"sha": "a8556befe412e2568e782369bd08f8a9bb980226", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8556befe412e2568e782369bd08f8a9bb980226"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c768e988ec60315a3239a3681021140a27561f12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c768e988ec60315a3239a3681021140a27561f12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c768e988ec60315a3239a3681021140a27561f12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c768e988ec60315a3239a3681021140a27561f12/comments", "author": null, "committer": null, "parents": [{"sha": "9a1bc6d57f1df18a55ada1bd312699396ca8deb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a1bc6d57f1df18a55ada1bd312699396ca8deb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a1bc6d57f1df18a55ada1bd312699396ca8deb4"}], "stats": {"total": 144, "additions": 113, "deletions": 31}, "files": [{"sha": "ceac7ffbc1004bbdd6e2340e1739dc3a5b9e1e62", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c768e988ec60315a3239a3681021140a27561f12/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c768e988ec60315a3239a3681021140a27561f12/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c768e988ec60315a3239a3681021140a27561f12", "patch": "@@ -1,3 +1,30 @@\n+2010-09-10  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* scos.ads: Add comments.\n+\n+2010-09-10  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnatcmd.adb (Get_Closure): Remove useless invocation of Close.\n+\n+2010-09-10  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch7.adb, exp_ch6.adb (Expand_Call): Establish a transient scope\n+\tfor a controlled build-in-place function call which appears in an\n+\tanonymous context. The transient scope ensures that the intermediate\n+\tfunction result is cleaned up after the master is left.\n+\t(Make_Build_In_Place_Call_In_Anonymous_Context): Remove the creation\n+\tof the transient scope. This is now done in Exand_Call which covers\n+\tadditional cases other than secondary stack release.\n+\n+2010-09-10  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem.adb (Do_Unit_And_Dependents): Add guard.\n+\n+2010-09-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch5.adb: Update comments.\n+\t* exp_dist.adb: Minor reformatting.\n+\n 2010-09-10  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch13.adb (Check_Record_Representation_Clause): Implement record"}, {"sha": "089987b828c607627d81c99b950a2178093f2b61", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c768e988ec60315a3239a3681021140a27561f12/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c768e988ec60315a3239a3681021140a27561f12/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=c768e988ec60315a3239a3681021140a27561f12", "patch": "@@ -1008,11 +1008,16 @@ package body Exp_Ch5 is\n       S_Or_P : Name_Id;\n \n       function Build_Step (J : Nat) return Node_Id;\n+      --  The increment step for the index of the right-hand side is written\n+      --  as an attribute reference (Succ or Pred). This function returns\n+      --  the corresponding node, which is placed at the end of theloop body.\n+\n       --  Note that on the last iteration of the loop, the index is increased\n-      --  past the upper bound. This is consistent with the C semantics of the\n-      --  back-end, where such an off-by-one value on a dead variable is OK.\n-      --  However, in CodePeer mode this leads to spurious warnings, and thus\n-      --  we place a guard around the attribute reference.\n+      --  (or decreased) past the corresponding bound. This is consistent with\n+      --  the C semantics of the back-end, where such an off-by-one value on a\n+      --  dead index variable is OK.  However, in CodePeer mode this leads to\n+      --  spurious warnings, and thus we place a guard around the attribute\n+      --  reference. For obvious reasons we only do this for CodePeer.\n \n       ----------------\n       -- Build_Step --"}, {"sha": "8b9ec882492aa120fee641da31492cc9262dcfa4", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c768e988ec60315a3239a3681021140a27561f12/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c768e988ec60315a3239a3681021140a27561f12/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=c768e988ec60315a3239a3681021140a27561f12", "patch": "@@ -3100,14 +3100,30 @@ package body Exp_Ch6 is\n       --  To prevent a double attachment, check that the current call is\n       --  not a rewriting of a protected function call.\n \n-      if Needs_Finalization (Etype (Subp))\n-        and then not Is_Inherently_Limited_Type (Etype (Subp))\n-        and then\n-          (No (First_Formal (Subp))\n-            or else\n-              not Is_Concurrent_Record_Type (Etype (First_Formal (Subp))))\n-      then\n-         Expand_Ctrl_Function_Call (N);\n+      if Needs_Finalization (Etype (Subp)) then\n+         if not Is_Inherently_Limited_Type (Etype (Subp))\n+           and then\n+             (No (First_Formal (Subp))\n+                or else\n+                  not Is_Concurrent_Record_Type (Etype (First_Formal (Subp))))\n+         then\n+            Expand_Ctrl_Function_Call (N);\n+\n+         --  Build-in-place function calls which appear in anonymous contexts\n+         --  need a transient scope to ensure the proper finalization of the\n+         --  intermediate result after its use.\n+\n+         elsif Is_Build_In_Place_Function_Call (N)\n+           and then Nkind_In (Parent (N), N_Attribute_Reference,\n+                                          N_Function_Call,\n+                                          N_Indexed_Component,\n+                                          N_Object_Renaming_Declaration,\n+                                          N_Procedure_Call_Statement,\n+                                          N_Selected_Component,\n+                                          N_Slice)\n+         then\n+            Establish_Transient_Scope (N, Sec_Stack => True);\n+         end if;\n       end if;\n \n       --  Test for First_Optional_Parameter, and if so, truncate parameter list\n@@ -5336,7 +5352,6 @@ package body Exp_Ch6 is\n       --  scope is established to ensure eventual cleanup of the result.\n \n       else\n-\n          --  Pass an allocation parameter indicating that the function should\n          --  allocate its result on the secondary stack.\n \n@@ -5354,8 +5369,6 @@ package body Exp_Ch6 is\n \n          Add_Access_Actual_To_Build_In_Place_Call\n            (Func_Call, Function_Id, Empty);\n-\n-         Establish_Transient_Scope (Func_Call, Sec_Stack => True);\n       end if;\n    end Make_Build_In_Place_Call_In_Anonymous_Context;\n "}, {"sha": "c299dc17f12c709372d9c2e35002f568db6591e2", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c768e988ec60315a3239a3681021140a27561f12/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c768e988ec60315a3239a3681021140a27561f12/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=c768e988ec60315a3239a3681021140a27561f12", "patch": "@@ -1098,7 +1098,7 @@ package body Exp_Ch7 is\n       --  releasing or some finalizations are needed or in the context\n       --  of tasking\n \n-      if Uses_Sec_Stack  (Current_Scope)\n+      if Uses_Sec_Stack (Current_Scope)\n         and then not Sec_Stack_Needed_For_Return (Current_Scope)\n       then\n          null;"}, {"sha": "00bdeaf5113fda0963e00b07ebd1c67770e0d845", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c768e988ec60315a3239a3681021140a27561f12/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c768e988ec60315a3239a3681021140a27561f12/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=c768e988ec60315a3239a3681021140a27561f12", "patch": "@@ -9409,10 +9409,10 @@ package body Exp_Dist is\n \n             if Is_Itype (Typ) and then Typ /= Base_Type (Typ) then\n                Build_To_Any_Function\n-                  (Loc  => Loc,\n-                   Typ  => Etype (Typ),\n-                   Decl => Decl,\n-                   Fnam => Fnam);\n+                 (Loc  => Loc,\n+                  Typ  => Etype (Typ),\n+                  Decl => Decl,\n+                  Fnam => Fnam);\n                return;\n             end if;\n "}, {"sha": "93f7d1c6b93696390d5645039d9fab5b89898772", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c768e988ec60315a3239a3681021140a27561f12/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c768e988ec60315a3239a3681021140a27561f12/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=c768e988ec60315a3239a3681021140a27561f12", "patch": "@@ -805,8 +805,6 @@ procedure GNATCmd is\n          Return_Code  => Return_Code,\n          Err_To_Out   => True);\n \n-      Close (FD);\n-\n       --  Read the output of the invocation of gnatmake\n \n       Open (File, In_File, Get_Name_String (Name));"}, {"sha": "8163e62300df7a7c526f9f1d5372ff1ce579dbb1", "filename": "gcc/ada/scos.ads", "status": "modified", "additions": 41, "deletions": 7, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c768e988ec60315a3239a3681021140a27561f12/gcc%2Fada%2Fscos.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c768e988ec60315a3239a3681021140a27561f12/gcc%2Fada%2Fscos.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscos.ads?ref=c768e988ec60315a3239a3681021140a27561f12", "patch": "@@ -159,7 +159,7 @@ package SCOs is\n    --      Note: for I and W, condition above is in the RM syntax sense (this\n    --      condition is a decision in SCO terminology).\n \n-   --    and is omitted for all other cases.\n+   --    and is omitted for all other cases\n \n    --    Note: up to 6 entries can appear on a single CS line. If more than 6\n    --    entries appear in one logical statement sequence, continuation lines\n@@ -216,7 +216,7 @@ package SCOs is\n \n    --    For each decision, a decision line is generated with the form:\n \n-   --      C* sloc expression\n+   --      C* sloc expression [chaining]\n \n    --    Here * is one of the following characters:\n \n@@ -229,7 +229,7 @@ package SCOs is\n    --    For I, E, P, W, sloc is the source location of the IF, EXIT, PRAGMA or\n    --    WHILE token.\n \n-   --    For X, sloc is omitted.\n+   --    For X, sloc is omitted\n \n    --    The expression is a prefix polish form indicating the structure of\n    --    the decision, including logical operators and short-circuit forms.\n@@ -257,11 +257,11 @@ package SCOs is\n    --      where t/f are used to mark a condition that has been recognized by\n    --      the compiler as always being true or false.\n \n-   --    & indicates AND THEN connecting two conditions.\n+   --    & indicates AND THEN connecting two conditions\n \n-   --    | indicates OR ELSE connecting two conditions.\n+   --    | indicates OR ELSE connecting two conditions\n \n-   --    ! indicates NOT applied to the expression.\n+   --    ! indicates NOT applied to the expression\n \n    --    Note that complex decisions do NOT include non-short-circuited logical\n    --    operators (AND/XOR/OR). In the context of existing coverage tools the\n@@ -276,6 +276,34 @@ package SCOs is\n    --    condition, and that is true even if the Ada 2005 set membership\n    --    form is used, e.g. A in (2,7,11.15).\n \n+   --    The expression can be followed by chaining indicators of the form\n+   --    Tsloc-range or Fsloc-range.\n+\n+   --    T* is present when the statement with the given sloc range is executed\n+   --    if, and only if, the decision evaluates to TRUE.\n+\n+   --    F* is present when the statement with the given sloc range is executed\n+   --    if, and only if, the decision evaluates to FALSE.\n+\n+   --    For an IF statement or ELSIF part, a T chaining indicator is always\n+   --    present, with the sloc range of the first statement in the\n+   --    corresponding sequence.\n+\n+   --    For an ELSE part, the last decision in the IF statement (that of the\n+   --    last ELSIF part, if any, or that of the IF statement if there is no\n+   --    ELSIF part) has an F chaining indicator with the sloc range of the\n+   --    first statement in the sequence of the ELSE part.\n+\n+   --    For a WHILE loop, a T chaining indicator is always present, with the\n+   --    sloc range of the first statement in the loop, but no F chaining\n+   --    indicator is ever present.\n+\n+   --    For an EXIT WHEN statement, an F chaining indicator is present if\n+   --    there is an immediately following sequence in the same sequence of\n+   --    statements.\n+\n+   --    In all other cases, chaining indicators are omitted\n+\n    --  Case Expressions\n \n    --    For case statements, we rely on statement coverage to make sure that\n@@ -287,7 +315,7 @@ package SCOs is\n \n    --      CC sloc-range sloc-range ...\n \n-   --    where sloc-range covers the range of the case expression.\n+   --    where sloc-range covers the range of the case expression\n \n    --    Note: up to 6 entries can appear on a single CC line. If more than 6\n    --    entries appear in one logical statement sequence, continuation lines\n@@ -382,6 +410,12 @@ package SCOs is\n    --      To   = ending source location\n    --      Last = False for all but the last entry, True for last entry\n \n+   --    Element (chaining indicator)\n+   --      C1   = 'H' (cHain)\n+   --      C2   = 'T' or 'F' (chaining on decision true/false)\n+   --      From = starting source location of chained statement\n+   --      To   = ending source location of chained statement\n+\n    --    Note: the sequence starting with a decision, and continuing with\n    --    operators and elements up to and including the first one labeled with\n    --    Last = True, indicate the sequence to be output on one decision line."}, {"sha": "6b1032bad7b9fb48e85a9d91805e6efafc72d34f", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c768e988ec60315a3239a3681021140a27561f12/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c768e988ec60315a3239a3681021140a27561f12/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=c768e988ec60315a3239a3681021140a27561f12", "patch": "@@ -2201,10 +2201,15 @@ package body Sem is\n \n             --  If the context item indicates that a package body is needed\n             --  because of an instantiation in CU, traverse the body now,\n-            --  even if CU is not related to the main unit.\n+            --  even if CU is not related to the main unit. If the generic\n+            --  itself appears in a package body, the context item is this\n+            --  body, and it already appears in the traversal order, so we\n+            --  only need to examine the case where the context item is a\n+            --  package declaration.\n \n             if Present (Withed_Body (Context_Item))\n-               and then Present (Corresponding_Body (Unit (Lib_Unit)))\n+              and then Nkind (Unit (Lib_Unit)) = N_Package_Declaration\n+              and then Present (Corresponding_Body (Unit (Lib_Unit)))\n             then\n                Body_CU :=\n                  Parent"}]}