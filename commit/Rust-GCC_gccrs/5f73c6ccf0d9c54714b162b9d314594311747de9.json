{"sha": "5f73c6ccf0d9c54714b162b9d314594311747de9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY3M2M2Y2NmMGQ5YzU0NzE0YjE2MmI5ZDMxNDU5NDMxMTc0N2RlOQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2011-11-02T14:33:56Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2011-11-02T14:33:56Z"}, "message": "Move crtstuff support to toplevel libgcc\n\n\tgcc:\n\t* config.gcc (extra_parts): Remove.\n\t(*-*-freebsd*): Remove extra_parts.\n\t(*-*-linux*, frv-*-*linux*, *-*-kfreebsd*-gnu, *-*-knetbsd*-gnu,\n\t*-*-gnu*, *-*-kopensolaris*-gnu): Likewise.\n\t(*-*-netbsd*): Remove t-libc-ok, t-netbsd from tmake_file.\n\tRemove extra_parts for *-*-netbsd*1.[7-9]*, *-*-netbsd[2-9]*,\n\t*-*-netbsdelf[2-9]*.\n\t(*-*-openbsd*): Remove t-libc-ok from tmake_file.\n\t(alpha*-*-linux*): Remove extra_parts.\n\t(alpha*-*-freebsd*): Likewise.\n\t(bfin*-linux-uclibc*): Likewise.\n\t(fr30-*-elf): Likewise.\n\t(moxie-*-elf): Likewise.\n\t(moxie-*-uclinux*): Likewise.\n\t(h8300-*-rtems*): Remove h8300/t-elf from tmake_file.\n\t(h8300-*-elf*): Likewise.\n\t(hppa*64*-*-hpux11*): Remove extra_parts.\n\t(i[34567]86-*-elf*): Remove i386/t-i386elf, i386/t-crtstuff from\n\ttmake_file.\n\t(x86_64-*-elf*): Likewise.\n\t(i[34567]86-*-freebsd*): Remove tmake_file.\n\t(x86_64-*-freebsd*): Likewise.\n\t(x86_64-*-netbsd*): Likewise.\n\t(i[34567]86-*-openbsd2.*, i[34567]86-*openbsd3.[0123]): Remove\n\tt-libc-ok from tmake_file.\n\t(i[34567]86-*-linux*, i[34567]86-*-kfreebsd*-gnu,\n\ti[34567]86-*-knetbsd*-gnu, i[34567]86-*-gnu*,\n\ti[34567]86-*-kopensolaris*-gnu): Remove i386/t-crtstuff from tmake_file.\n\tRemove extra_parts.\n\t(x86_64-*-linux*, x86_64-*-kfreebsd*-gnu, x86_64-*-knetbsd*-gnu):\n\tRemove i386/t-crtstuff from tmake_file.\n\t(i[34567]86-*-lynxos*): Likewise.\n\tRemove extra_parts.\n\t(ia64*-*-elf*): Remove extra_parts.\n\t(ia64*-*-freebsd*): Likewise.\n\t(ia64*-*-linux*): Likewise.\n\t(ia64-hp-*vms*): Remove ia64/t-vms from tmake_file.\n\t(m32r-*-elf*): Remove extra_parts.\n\t(m32rle-*-elf*): Likewise.\n\t(m32r-*-rtems*): Likewise.\n\t(m68k-*-elf*, fido-*-elf*): Likewise.\n\t(m68k*-*-openbsd*): Remove t-libc-ok from tmake_file.\n\t(m68k-*-rtems*): Remove extra_parts.\n\t(mep-*-*): Likewise.\n\t(microblaze*-linux*): Likewise.\n\t(mips64*-*-linux*, mipsisa64*-*-linux*): Likewise.\n\t(mips*-*-linux*): Likewise.\n\t(powerpc-*-lynxos*): Likewise.\n\t(s390x-ibm-tpf*): Likewise.\n\t(score-*-elf): Likewise.\n\tRemove tmake_file.\n\t(sh-*-elf*, sh[12346l]*-*-elf*, sh-*-linux*, sh[2346lbe]*-*-linux*,\n\tsh-*-netbsdelf*, shl*-*-netbsdelf*, sh5-*-netbsd*, sh5l*-*-netbsd*,\n\tsh64-*-netbsd*, sh64l*-*-netbsd*): Remove sh/t-elf from tmake_file.\n\tRemove sh/t-superh from tmake_file for sh*-superh-elf.\n\tRemove sh/t-linux64 from tmake_file for sh64*-*-linux*.\n\t(sh-*-rtems*): Remove sh/t-elf from tmake_file.\n\t(sh-wrs-vxworks): Likewise.\n\t(sparc-*-linux*): Remove extra_parts.\n\t(sparc64-*-linux*): Likewise.\n\t(sparc64-*-freebsd*, ultrasparc-*-freebsd*): Likewise.\n\t(xstormy16-*-elf): Likewise.\n\t(xtensa*-*-linux*): Remove xtensa/t-linux from tmake_file.\n\t(am33_2.0-*-linux*): Remove extra_parts.\n\t* configure.ac (extra_parts): Don't substitute.\n\t* configure: Regenerate.\n\t* crtstuff.c: Move to ../libgcc.\n\t* Makefile.in (CRTSTUFF_CFLAGS): Remove.\n\t(EXTRA_PARTS): Remove.\n\t(CRTSTUFF_T_CFLAGS): Remove.\n\t(MOSTLYCLEANFILES): Remove $(EXTRA_PARTS).\n\t(GCC_EXTRA_PARTS): Remove.\n\t(libgcc.mvars): Remove GCC_EXTRA_PARTS, CRTSTUFF_CFLAGS,\n\tCRTSTUFF_T_CFLAGS, CRTSTUFF_T_CFLAGS_S.\n\tEmit GCC_CFLAGS, INHIBIT_LIBC_CFLAGS.\n\t($(T)crtbegin.o, $(T)crtend.o, $(T)crtbeginS.o, $(T)crtendS.o)\n\t($(T)crtbeginT.o): Remove.\n\t* config/alpha/t-vms (EXTRA_PARTS): Remove.\n\t($(T)vms-dwarf2.o, $(T)vms-dwarf2eh.o): Remove.\n\t* config/alpha/vms-dwarf2.asm: Move to\n\t../libgcc/config/alpha/vms-dwarf2.S.\n\t* config/alpha/vms-dwarf2eh.asm: Move to\n\t../libgcc/config/alpha/vms-dwarf2eh.S.\n\t* config/arm/crti.asm: Move to ../libgcc/config/arm/crti.S.\n\t* config/arm/crtn.asm: Move to ../libgcc/config/arm/crtn.S.\n\t* config/arm/t-arm-elf (EXTRA_MULTILIB_PARTS): Remove.\n\t($(T)crti.o, $(T)crtn.o): Remove.\n\t* config/arm/t-linux: Remove comment.\n\t* config/arm/t-linux-eabi (EXTRA_MULTILIB_PARTS): Remove.\n\t* config/arm/t-strongarm-elf (EXTRA_MULTILIB_PARTS): Remove.\n\t($(T)crti.o, $(T)crtn.o): Remove.\n\t* config/arm/t-symbian (EXTRA_MULTILIB_PARTS): Remove.\n\t* config/bfin/crti.s: Move to ../libgcc/config/bfin/crti.S.\n\t* config/bfin/crtn.s: Move to ../libgcc/config/bfin/crtn.S.\n\t* config/bfin/crtlibid.s: Move to ../libgcc/config/bfin/crtlibid.S.\n\t* config/bfin/t-bfin (EXTRA_PARTS): Remove.\n\t($(T)crti.o, $(T)crtn.o): Remove.\n\t* config/bfin/t-bfin-elf (CRTSTUFF_T_CFLAGS): Remove.\n\t($(T)crti.o, $(T)crtn.o, $(T)crtlibid.o): Remove\n\t(EXTRA_MULTILIB_PARTS): Remove.\n\t* config/bfin/t-bfin-linux (CRTSTUFF_T_CFLAGS,\n\tEXTRA_MULTILIB_PARTS): Remove.\n\t* config/bfin/t-bfin-uclinux (CRTSTUFF_T_CFLAGS): Remove.\n\t($(T)crtlibid.o): Remove.\n\t(EXTRA_MULTILIB_PARTS): Remove.\n\t* config/c6x/crti.s: Move to ../libgcc/config/c6x/crti.S.\n\t* config/c6x/crtn.s: Move to ../libgcc/config/c6x/crtn.S.\n\t* config/c6x/t-c6x-elf ($(T)crti.o, $(T)crtn.o): Remove.\n\t(EXTRA_MULTILIB_PARTS): Remove.\n\t(CRTSTUFF_T_CFLAGS, CRTSTUFF_T_CFLAGS_S): Remove.\n\t* config/c6x/t-c6x-uclinux (CRTSTUFF_T_CFLAGS,\n\tCRTSTUFF_T_CFLAGS_S): Remove.\n\t* config/cris/t-elfmulti (CRTSTUFF_T_CFLAGS): Remove.\n\t* config/cris/t-linux (CRTSTUFF_T_CFLAGS_S): Remove.\n\t* config/fr30/crti.asm: Move to ../libgcc/config/fr30/crti.S.\n\t* config/fr30/crtn.asm: Move to ../libgcc/config/fr30/crtn.S.\n\t* config/fr30/t-fr30 ($(T)crti.o, $(T)crtn.o): Remove.\n\t* config/frv/frvbegin.c, config/frv/frvend.c: Move to\n\t../libgcc/config/frv.\n\t* config/frv/t-frv (EXTRA_MULTILIB_PARTS): Remove.\n\t(FRVSTUFF_CFLAGS, $(T)frvbegin$(objext), $(T)frvend$(objext)): Remove.\n\t* config/frv/t-linux (EXTRA_MULTILIB_PARTS): Remove.\n\t(CRTSTUFF_T_CFLAGS): Remove.\n\t* config/h8300/crti.asm: Move to ../libgcc/config/h8300/crti.S.\n\t* config/h8300/crtn.asm: Move to ../libgcc/config/h8300/crtn.S.\n\t* config/h8300/t-elf: Remove.\n\t* config/i386/cygming-crtbegin.c, config/i386/cygming-crtend.c:\n\tMove to ../libgcc/config/i386.\n\t* config/i386/t-crtstuff: Remove.\n\t* config/i386/t-i386elf: Remove.\n\t* config/i386/t-linux64 (EXTRA_MULTILIB_PARTS): Remove.\n\t* config/i386/t-nto (CRTSTUFF_T_CFLAGS, EXTRA_PARTS): Remove.\n\t* config/ia64/crtbegin.asm: Move to\n\t../libgcc/config/ia64/crtbegin.S.\n\t* config/ia64/crtend.asm: Move to\n\t../libgcc/config/ia64/crtend.S.\n\t* config/ia64/crti.asm: Move to ../libgcc/config/ia64/crti.S.\n\t* config/ia64/crtn.asm: Move to ../libgcc/config/ia64/crtn.S.\n\t* config/ia64/t-vms: Remove.\n\t* config/ia64/vms-crtinit.asm: Move to\n\t../libgcc/config/ia64/vms-crtinit.S.\n\t* config/m32c/t-m32c (EXTRA_MULTILIB_PARTS): Remove.\n\t* config/m32r/initfini.c: Move to ../libgcc/config/m32r.\n\t* config/m32r/t-linux (CRTSTUFF_T_CFLAGS_S): Remove.\n\t* config/m32r/t-m32r (CRTSTUFF_T_CFLAGS): Remove.\n\t($(T)crtinit.o, $(T)crtfini.o): Remove.\n\t(m32rx, m32r2): Remove.\n\t(EXTRA_MULTILIB_PARTS): Remove.\n\t* config/m68k/crti.s: Move to ../libgcc/config/m68k/crti.S.\n\t* config/m68k/crtn.s: Move to ../libgcc/config/m68k/crtn.S.\n\t* config/m68k/t-crtstuff: Remove.\n\t* config/m68k/t-linux (EXTRA_MULTILIB_PARTS): Remove.\n\t* config/m68k/t-m68kelf: Remove.\n\t* config/m68k/t-uclinux (EXTRA_MULTILIB_PARTS): Remove.\n\t* config/mcore/crti.asm: Move to ../libgcc/config/mcore/crti.S.\n\t* config/mcore/crtn.asm: Move to ../libgcc/config/mcore/crtn.S.\n\t* config/mcore/t-mcore ($(T)crti.o, $(T)crtn.o): Remove.\n\t(EXTRA_PARTS, EXTRA_MULTILIB_PARTS): Remove.\n\t* config/mep/t-mep (CRTSTUFF_CFLAGS): Remove.\n\t(EXTRA_MULTILIB_PARTS): Remove.\n\t* config/microblaze/crti.s: Move to ../libgcc/config/microblaze/crti.S.\n\t* config/microblaze/crtn.s: Move to ../libgcc/config/microblaze/crtn.S.\n\t* config/microblaze/t-microblaze (EXTRA_MULTILIB_PARTS,\n\tEXTRA_PARTS): Remove.\n\t($(T)crti$(objext), $(T)crtn$(objext)): Remove.\n\t* config/mips/crti.asm: Move to ../libgcc/config/mips/crti.S.\n\t* config/mips/crtn.asm: Move to ../libgcc/config/mips/crtn.S.\n\t* config/mips/t-elf (CRTSTUFF_T_CFLAGS): Remove.\n\t($(T)crti.o, $(T)crtn.o): Remove.\n\t(EXTRA_MULTILIB_PARTS): Remove.\n\t* config/mips/t-isa3264: Likewise.\n\t* config/mips/t-linux64 (EXTRA_MULTILIB_PARTS): Remove.\n\t* config/mips/t-r3900 (EXTRA_MULTILIB_PARTS): Remove.\n\t(CRTSTUFF_T_CFLAGS): Remove.\n\t* config/mips/t-sde (CRTSTUFF_T_CFLAGS): Remove.\n\t($(T)crti.o, $(T)crtn.o): Remove.\n\t(EXTRA_MULTILIB_PARTS): Remove.\n\t* config/mips/t-sr71k (EXTRA_MULTILIB_PARTS, CRTSTUFF_T_CFLAGS):\n\tRemove.\n\t($(T)crti.o, $(T)crtn.o): Remove.\n\t* config/mips/t-st (EXTRA_MULTILIB_PARTS): Remove.\n\t* config/mips/t-vr (CRTSTUFF_T_CFLAGS): Remove.\n\t(EXTRA_MULTILIB_PARTS): Remove.\n\t($(T)crti.o, $(T)crtn.o): Remove.\n\t* config/mmix/crti.asm: Move to ../libgcc/config/crti.S.\n\t* config/mmix/crtn.asm: Move to ../libgcc/config/crtn.S.\n\t* config/mmix/t-mmix (CRTSTUFF_T_CFLAGS): Remove.\n\t* config/moxie/crti.asm, config/moxie/crtn.asm: Remove.\n\t* config/pa/stublib.c: Move to libgcc/config/pa.\n\t* config/pa/t-linux (CRTSTUFF_T_CFLAGS_S): Remove.\n\t* config/pa/t-linux64 (CRTSTUFF_T_CFLAGS_S): Remove.\n\t* config/pa/t-pa-hpux11 (LIBGCCSTUB_OBJS, stublib.c): Remove.\n\t(pthread_default_stacksize_np-stub.o, pthread_mutex_lock-stub.o)\n\t(pthread_mutex_unlock-stub.o, pthread_once-stub.o)\n\t($(T)libgcc_stub.a): Remove.\n\t* config/pa/t-pa64 (LIBGCCSTUB_OBJS, stublib.c): Remove.\n\t(rfi-stub.o, dfi-stub.o, cxaf-stub.o, jvrc-stub.o)\n\t(pthread_default_stacksize_np-stub.o, pthread_mutex_lock-stub.o)\n\t(pthread_mutex_unlock-stub.o, pthread_once-stub.o)\n\t($(T)libgcc_stub.a): Remove.\n\t* config/rs6000/eabi-cn.asm: Move to\n\t../../../libgcc/config/rs6000/eabi-cn.S.\n\t* config/rs6000/eabi-ci.asm: Move to\n\t../../../libgcc/config/rs6000/eabi-ci.S.\n\t* config/rs6000/sol-ci.asm: Move to\n\t../../../libgcc/config/rs6000/sol-ci.S.\n\t* config/rs6000/sol-cn.asm: Move to\n\t../../../libgcc/config/rs6000/sol-cn.S.\n\t* config/rs6000/t-lynx (EXTRA_MULTILIB_PARTS): Remove.\n\t(CRTSTUFF_T_CFLAGS, CRTSTUFF_T_CFLAGS_S): Remove.\n\t* config/rs6000/t-netbsd (CRTSTUFF_T_CFLAGS, CRTSTUFF_T_CFLAGS_S):\n\tRemove.\n\t(EXTRA_MULTILIB_PARTS): Remove.\n\t* config/rs6000/t-ppccomm (EXTRA_MULTILIB_PARTS): Remove.\n\t(ecrti.S, ecrtn.S, ncrti.S, ncrtn.S): Remove.\n\t($(T)ecrti$(objext), $(T)ecrtn$(objext), $(T)ncrti$(objext),\n\t$(T)ncrtn$(objext)): Remove.\n\t(CRTSTUFF_T_CFLAGS, CRTSTUFF_T_CFLAGS_S): Remove.\n\t* config/rs6000/t-vxworks (EXTRA_MULTILIB_PARTS): Remove.\n\t* config/rx/t-rx (EXTRA_MULTILIB_PARTS): Remove.\n\t* config/score/crti.asm: Move to ../libgcc/config/score/crti.S.\n\t* config/score/crtn.asm: Move to ../libgcc/config/score/crtn.S.\n\t* config/score/t-score-elf: Remove.\n\t* config/sh/crt1.asm: Move to ../libgcc/config/sh/crt1.S.\n\t* config/sh/crti.asm: Move to ../libgcc/config/sh/crti.S.\n\t* config/sh/crtn.asm: Move to ../libgcc/config/sh/crtn.S.\n\t* config/sh/lib1funcs-4-300.asm: Move to\n\t../../../libgcc/config/sh/lib1funcs-4-300.S.\n\t* config/sh/lib1funcs-Os-4-200.asm: Move to\n\t../libgcc/config/sh/lib1funcs-Os-4-200.S.\n\t* config/sh/t-elf: Remove.\n\t* config/sh/t-linux (EXTRA_MULTILIB_PARTS): Remove.\n\t* config/sh/t-linux64: Remove.\n\t* config/sh/t-netbsd (EXTRA_MULTILIB_PARTS): Remove.\n\t* config/sh/t-sh ($(T)crt1.o, $(T)crti.o, $(T)crtn.o): Remove.\n\t(IC_EXTRA_PARTS, OPT_EXTRA_PARTS, EXTRA_MULTILIB_PARTS): Remove.\n\t($(T)ic_invalidate_array_4-100.o)\n\t($(T)libic_invalidate_array_4-100.a)\n\t($(T)ic_invalidate_array_4-200.o)\n\t($(T)libic_invalidate_array_4-200.a, $(T)ic_invalidate_array_4a.o)\n\t($(T)libic_invalidate_array_4a.a, $(T)sdivsi3_i4i-Os-4-200.o)\n\t($(T)udivsi3_i4i-Os-4-200.o, $(T)unwind-dw2-Os-4-200.o)\n\t($(T)libgcc-Os-4-200.a, $(T)div_table-4-300.o)\n\t($(T)libgcc-4-300.a): Remove.\n\t* config/sh/t-superh: Remove.\n\t* config/sh/t-vxworks (EXTRA_MULTILIB_PARTS): Remove.\n\t* config/sparc/t-linux64 (CRTSTUFF_T_CFLAGS): Remove.\n\t* config/spu/cache.S: Move to ../libgcc/config/spu.\n\t* config/spu/cachemgr.c: Move to ../libgcc/config/spu.\n\t* config/spu/t-spu-elf (CRTSTUFF_T_CFLAGS): Remove.\n\t(EXTRA_MULTILIB_PARTS): Remove.\n\t($(T)cachemgr.o, $(T)cachemgr_nonatomic.o, $(T)libgcc_%.a): Remove.\n\t($(T)cache8k.o, $(T)cache16k.o, $(T)cache32k.o, $(T)cache32k.o)\n\t($(T)cache64k.o, $(T)cache128k.o): Remove.\n\t* config/t-freebsd (CRTSTUFF_T_CFLAGS_S): Remove.\n\t* config/t-libc-ok: Remove.\n\t* config/t-linux (CRTSTUFF_T_CFLAGS_S): Remove.\n\t* config/t-lynx (CRTSTUFF_T_CFLAGS_S): Remove.\n\t* config/t-netbsd: Remove.\n\t* config/t-svr4 (CRTSTUFF_T_CFLAGS_S): Remove.\n\t* config/t-vxworks (EXTRA_MULTILIB_PARTS): Remove.\n\t* config/vms/t-vms (VMS_EXTRA_PARTS): Remove.\n\t($(T)vcrt0.o, $(T)pcrt0.o): Remove.\n\t* config/vms/vms-ucrt0.c: Move to ../libgcc/config/vms.\n\t* config/xtensa/crti.asm: Move to ../libgcc/config/xtensa/crti.S.\n\t* config/xtensa/crtn.asm: Move to ../libgcc/config/xtensa/crtn.S.\n\t* config/xtensa/t-elf (CRTSTUFF_T_CFLAGS, CRTSTUFF_T_CFLAGS_S):\n\tRemove.\n\t(EXTRA_MULTILIB_PARTS): Remove.\n\t* config/xtensa/t-linux: Remove.\n\t* config/xtensa/t-xtensa ($(T)crti.o, $(T)crtn.o): Remove.\n\n\tgcc/po:\n\t* EXCLUDES (crtstuff.c): Remove.\n\n\tlibgcc:\n\t* crtstuff.c: New file.\n\t* Makefile.in (CRTSTUFF_CFLAGS): Define.\n\t(CRTSTUFF_T_CFLAGS): Define.\n\t(extra-parts, INSTALL_PARTS): Remove conditional assignments.\n\t(crtbegin$(objext), crtend$(objext), crtbeginS$(objext))\n\t(crtendS$(objext), crtbeginT.o): Use $(srcdir) to refer to\n\tcrtstuff.c.\n\tUse $<.\n\t(crtbeginT.o): Use $(objext).\n\t[!CUSTOM_CRTIN] (crti$(objext), crtn$(objext)): New rules.\n\t(libgcc-extra-parts): Don't compare EXTRA_PARTS, GCC_EXTRA_PARTS.\n\t(gcc-extra-parts): Remove.\n\t* config.host (*-*-freebsd*): Add t-crtstuff-pic to tmake_file.\n\tSet extra_parts.\n\t(*-*-linux*, frv-*-*linux*, *-*-kfreebsd*-gnu, *-*-knetbsd*-gnu,\n\t*-*-gnu*): Also handle *-*-kopensolaris*-gnu.\n\tAdd t-crtstuff-pic to tmake_file.\n\t(*-*-lynxos*): New case.\n\tSet tmake_file, extra_parts.\n\t(*-*-netbsd*): Add t-crtstuff-pic to tmake_file.\n\tSet extra_parts for *-*-netbsd*1.[7-9]*, *-*-netbsd[2-9]*,\n\t*-*-netbsdelf[2-9]*.\n\t(*-*-openbsd*): Add t-crtstuff-pic to tmake_file.\n\t(*-*-rtems*): Set extra_parts.\n\t(*-*-solaris2*): Remove t-crtin from tmake_file for Solaris < 10.\n\t(*-*-uclinux*): New case.\n\tSet extra_parts.\n\t(*-*-vms*): New case.\n\tSet tmake_file, extra_parts.\n\t(*-*-elf): Set extra_parts.\n\t(alpha*-*-freebsd*): Add crtbeginT.o to extra_parts.\n\t(alpha64-dec-*vms*): Append to tmake_file, remove vms/t-vms,\n\tvms/t-vms64.\n\tSet extra_parts.\n\t(alpha*-dec-*vms*): Append to tmake_file, remove vms/t-vms.\n\tSet extra_parts.\n\t(arm*-*-freebsd*): Add t-crtin to tmake_file.\n\tAdd crtbegin.o, crtend.o, crti.o, crtn.o to extra_parts.\n\t(arm-wrs-vxworks): Append to tmake_file.\n\tSet extra_parts.\n\t(arm*-*-uclinux*): Set extra_parts.\n\t(arm*-*-ecos-elf): Likewise.\n\t(arm*-*-eabi*, arm*-*-symbianelf*): Set extra_parts for\n\tarm*-*-eabi*.\n\t(arm*-*-rtems*): Set extra_parts.\n\t(arm*-*-elf): Likewise.\n\t(avr-*-rtems*): Clear extra_parts.\n\t(bfin*-elf*): Add bfin/t-crtlibid, bfin/t-crtstuff to extra_parts.\n\tSet extra_parts.\n\t(bfin*-uclinux*): Likewise.\n\t(bfin*-linux-uclibc*): Add bfin/t-crtstuff to tmake_file.\n\t(bfin*-rtems*): Append to tmake_file.\n\tSet extra_parts.\n\t(bfin*-*): Likewise.\n\t(crisv32-*-elf, crisv32-*-none, cris-*-elf, cris-*-none): Split into ...\n\t(crisv32-*-elf): ... this.\n\t(crisv32-*-none): ... this.\n\t(cris-*-elf, cris-*-none): New cases.\n\tAdd cris/t-elfmulti to tmake_file.\n\t(fr30-*-elf): Append to tmake_file.\n\tSet extra_parts.\n\t(frv-*-elf): Append to tmake_file, add frv/t-frv.\n\tSet extra_parts.\n\t(h8300-*-rtems*): Append to tmake_file.\n\tSet extra_parts.\n\t(h8300-*-elf*): Likewise.\n\t(hppa*64*-*-hpux11*): Add pa/t-stublib, pa/t-stublib64 to tmake_file.\n\tSet extra_parts.\n\t(hppa[12]*-*-hpux11*): Add pa/t-stublib to tmake_file.\n\tSet extra_parts.\n\t(i[34567]86-*-elf*): Add i386/t-crtstuff, t-crtstuff-pic to tmake_file.\n\t(x86_64-*-elf*): Likewise.\n\t(i[34567]86-*-freebsd*): Add i386/t-crtstuff to tmake_file.\n\t(x86_64-*-freebsd*): Likewise.\n\t(x86_64-*-netbsd*): Likewise.\n\t(i[34567]86-*-linux*): Likewise.\n\t(i[34567]86-*-kfreebsd*-gnu, i[34567]86-*-knetbsd*-gnu)\n\t(i[34567]86-*-gnu*, i[34567]86-*-kopensolaris*-gnu): Likewise.\n\t(x86_64-*-linux*): Likewise.\n\t(x86_64-*-kfreebsd*-gnu, x86_64-*-knetbsd*-gnu): Likewise.\n\t(i[34567]86-*-lynxos*): Add t-crtstuff-pic, i386/t-crtstuff to\n\ttmake_file.\n\tSet extra_parts.\n\t(i[34567]86-*-nto-qnx*): Set tmake_file, extra_parts.\n\t(i[34567]86-*-rtems*): Append to tmake_file, remove t-crtin.\n\tAppend to extra_parts, remove crtbegin.o, crtend.o.\n\t(ia64*-*-elf*): Append to extra_parts, remove crtbegin.o, crtend.o.\n\t(ia64*-*-freebsd*): Append to extra_parts, remove crtbegin.o,\n\tcrtend.o, crtbeginS.o, crtendS.o.\n\t(ia64*-*-linux*): Comment extra_parts.\n\t(ia64-hp-*vms*): Append to tmake_file, remove vms/t-vms, vms/t-vms64.\n\tSet extra_parts.\n\t(iq2000*-*-elf*): Clear extra_parts.\n\t(lm32-*-elf*, lm32-*-rtems*): Add t-crtin to tmake_file.\n\t(lm32-*-uclinux*): Add to extra_parts, remove crtbegin.o, crtend.o\n\t(m32r-*-elf*, m32r-*-rtems*): Split off ...\n\t(m32r-*-rtems*): ... this.\n\tAdd m32r/t-m32r to tmake_file.\n\t(m68k-*-elf*): Add t-crtin to tmake_file.\n\t(m68k-*-rtems*): Add crti.o, crtn.o to extra_parts.\n\t(mcore-*-elf): Likewise.\n\t(microblaze*-*-*): Set extra_parts.\n\t(mips*-sde-elf*): New case.\n\tSet tmake_file, extra_parts.\n\t(mipsisa32-*-elf*, mipsisa32el-*-elf*, mipsisa32r2-*-elf*)\n\t(mipsisa32r2el-*-elf*, mipsisa64-*-elf*, mipsisa64el-*-elf*)\n\t(mipsisa64r2-*-elf*, mipsisa64r2el-*-elf*): Add mips/t-crtstuff to\n\ttmake_file.\n\tSet extra_parts.\n\t(mipsisa64sr71k-*-elf*): Likewise.\n\t(mipsisa64sb1-*-elf*, mipsisa64sb1el-*-elf*): Likewise.\n\t(mips-*-elf*, mipsel-*-elf*): Likewise.\n\t(mips64-*-elf*, mips64el-*-elf*): Likewise.\n\t(mips64vr-*-elf*, mips64vrel-*-elf*): Likewise.\n\t(mips64orion-*-elf*,  mips64orionel-*-elf*): Likewise.\n\t(mips*-*-rtems*): Likewise.\n\t(mipstx39-*-elf*, mipstx39el-*-elf*): Likewise.\n\t(moxie-*-*): Split into ...\n\t(moxie-*-elf, moxie-*-uclinux*): ... this.\n\tAdd to extra_parts, remove crtbegin.o, crtend.o.\n\t(moxie-*-rtems*): New case.\n\tSet tmake_file.\n\tClear extra_parts.\n\t(powerpc-*-freebsd*): Add rs6000/t-crtstuff to tmake_file.\n\tSet extra_parts.\n\t(powerpc-*-netbsd*): Add rs6000/t-netbsd to tmake_file.\n\t(powerpc-*-eabispe*): Add rs6000/t-crtstuff, t-crtstuff-pic to\n\ttmake_file.\n\tSet extra_parts.\n\t(powerpc-*-eabisimaltivec*): Add to tmake_file, add rs6000/t-ppccomm,\n\trs6000/t-crtstuff, t-crtstuff-pic to tmake_file.\n\tSet extra_parts.\n\t(powerpc-*-eabisim*): Likewise.\n\t(powerpc-*-elf*): Likewise.\n\t(powerpc-*-eabialtivec*): Likewise.\n\t(powerpc-xilinx-eabi*): Likewise.\n\t(powerpc-*-eabi*): Likewise.\n\t(powerpc-*-rtems*): Likewise.\n\t(powerpc-*-linux*, powerpc64-*-linux*): Add rs6000/t-crtstuff to\n\ttmake_file.\n\tSet extra_parts.\n\t(powerpc-*-lynxos*): Add to tmake_file.\n\t(powerpcle-*-elf*): Add to tmake_file, add rs6000/t-ppccomm,\n\trs6000/t-crtstuff, t-crtstuff-pic.\n\tSet extra_parts.\n\t(powerpcle-*-eabisim*): Likewise.\n\t(powerpcle-*-eabi*): Likewise.\n\t(rx-*-elf): Remove extra_parts.\n\t(s390x-ibm-tpf*): Set extra_parts.\n\t(score-*-elf): Set extra_parts.\n\t(sh-*-elf*, sh[12346l]*-*-elf*, sh-*-linux*)\n\t(sh[2346lbe]*-*-linux*, sh-*-netbsdelf*, shl*-*-netbsdelf*)\n\t(sh5-*-netbsd*, sh5l*-*-netbsd*, sh64-*-netbsd*)\n\t(sh64l*-*-netbsd*): Split into ...\n\t(sh-*-elf*, sh[12346l]*-*-elf*): ... this.\n\tAdd t-crtstuff-pic to tmake_file.\n\tSet extra_parts.\n\t(sh-*-rtems*): Add to tmake_file, add t-crtstuff-pic.\n\tSet extra_parts.\n\t(sh-wrs-vxworks): Add to tmake_file, add t-crtstuff-pic.\n\t(sparc-*-elf*): Remove t-crtin from tmake_file.\n\tAdd to extra_parts, remove crtbegin.o, crtend.o.\n\t(sparc-*-linux*): Add sparc/t-linux64 to tmake_file.\n\t(sparc64-*-linux*): Likewise.\n\t(sparc-*-rtems*): Remove sparc/t-elf from tmake_file.\n\tAdd to extra_parts, remove crtbegin.o, crtend.o.\n\t(sparc64-*-elf*): Remove t-crtin from tmake_file.\n\tAdd to extra_parts, remove crtbegin.o, crtend.o.\n\t(sparc64-*-rtems*): Remove t-crtin from tmake_file.\n\tAdd to extra_parts, remove crtbegin.o, crtend.o.\n\t(sparc64-*-freebsd*, ultrasparc-*-freebsd*): Add to extra_parts.\n\t(sparc64-*-linux*): Add sparc/t-linux64 to tmake_file.\n\t(spu-*-elf*): Add to tmake_file, add spu/t-elf.\n\tSet extra_parts.\n\t(tic6x-*-uclinux): Add c6x/t-uxlinux, t-crtstuff-pic to tmake_file.\n\tSet extra_parts.\n\t(tic6x-*-*): Change to ...\n\t(tic6x-*-elf): ... this.\n\tSet extra_parts.\n\t(xtensa*-*-elf*): Add to tmake_file, add xtensa/t-elf.\n\tSet extra_parts.\n\t(am33_2.0-*-linux*): Add comment.\n\t(mep*-*-*): Add mep/t-mep to tmake_file.\n\tSet extra_parts.\n\t* config/alpha/t-vms: New file.\n\t* config/alpha/vms-dwarf2.S, config/alpha/vms-dwarf2eh.S: New files.\n\t* config/arm/crti.S, config/arm/crtn.S: New files.\n\t* config/bfin/crti.S, config/bfin/crtn.S: New files.\n\t* config/bfin/crtlibid.S: New file.\n\t* config/bfin/t-crtlibid, config/bfin/t-crtstuff: New files.\n\t* config/c6x/crti.S, config/c6x/crtn.S: New files.\n\t* config/c6x/t-elf (CUSTOM_CRTIN): Set.\n\t(crti.o, crtin.o): New rules.\n\t(CRTSTUFF_T_CFLAGS, CRTSTUFF_T_CFLAGS_S): Set.\n\t* config/c6x/t-uclinux: New file.\n\t* config/cris/t-elfmulti: New file.\n\t* config/cris/t-linux (CRTSTUFF_T_CFLAGS_S): Set.\n\t* config/fr30/crti.S, config/fr30/crtn.S: New files.\n\t* config/frv/frvbegin.c, config/frv/frvend.c: New files.\n\t* config/frv/t-frv: New file.\n\t* config/frv/t-linux (CRTSTUFF_T_CFLAGS): Set.\n\t* config/h8300/crti.S, config/h8300/crtn.S: New files.\n\t* config/i386/cygming-crtbegin.c, config/i386/cygming-crtend.c:\n\tNew files.\n\t* config/i386/t-cygming (crtbegin.o, crtend.o): Use $(srcdir) to\n\trefer to cygming-crtbegin.c, cygming-crtend.c.\n\tUse $<.\n\t* config/i386/t-nto: New file.\n\t* config/ia64/crtbegin.S, config/ia64/crtend.S: New files.\n\t* config/ia64/crti.S, config/ia64/crtn.S: New files.\n\t* config/ia64/t-ia64 (crtbegin.o, crtend.o, crtbeginS.o,\n\tcrtendS.o): Use $(srcdir) to refer to crtbegin.S, crtend.S.\n\tUse .S extension.\n\tUse $<.\n\t* config/ia64/t-vms (CRTSTUFF_T_CFLAGS, CRTSTUFF_T_CFLAGS_S): Set.\n\t(crtinitS.o): New rule.\n\t* config/ia64/vms-crtinit.S: New file.\n\t* config/lm32/t-elf ($(T)crti.o, $(T)crtn.o): Remove.\n\t* config/m32r/initfini.c: New file.\n\t* config/m32r/t-linux, config/m32r/t-m32r: New files.\n\t* config/m68k/crti.S, config/m68k/crtn.S: New files.\n\t* config/mcore/crti.S, config/mcore/crtn.S: New files.\n\t* config/mep/t-mep: New file.\n\t* config/microblaze/crti.S, config/microblaze/crtn.S: New files.\n\t* config/microblaze/t-microblaze (MULTILIB_OPTIONS): Remove.\n\t* config/mips/crti.S, config/mips/crtn.S: New files.\n\t* config/mips/t-crtstuff: New file.\n\t* config/mmix/crti.S, config/mmix/crtn.S: New files.\n\t* config/mmix/t-mmix (CRTSTUFF_T_CFLAGS): Set.\n\t(CUSTOM_CRTIN): Set.\n\t($(T)crti.o, $(T)crtn.o): Remove $(T),\n\tdependencies.\n\tUse $(srcdir) to refer to crti.S, crtn.S.\n\tUse .S extension, $<.\n\t* config/moxie/crti.asm: Rename to ...\n\t* config/moxie/crti.S: ... this.\n\t* config/moxie/crtn.asm: Rename to ...\n\t* config/moxie/crtn.S: ... this.\n\t* config/moxie/t-moxie: Remove.\n\t* config/pa/stublib.c: New file.\n\t* config/pa/t-stublib, config/pa/t-stublib64: New files.\n\t* config/rs6000/eabi-ci.S, config/rs6000/eabi-cn.S: New files.\n\t* config/rs6000/sol-ci.S, config/rs6000/sol-cn.S: New files.\n\t* config/rs6000/t-crtstuff: New file.\n\t* config/rs6000/t-ppccomm (EXTRA_PARTS): Remove.\n\t(ecrti.S, ecrtn.S, ncrti.S, ncrtn.S): Remove.\n\t(ecrti$(objext)): Depend on $(srcdir)/config/rs6000/eabi-ci.S.\n\tMake output file explicit.\n\t(ecrtn$(objext)): Depend on $(srcdir)/config/rs6000/eabi-cn.S.\n\tMake output file explicit.\n\t(ncrti$(objext): Depend on $(srcdir)/config/rs6000/sol-ci.S.\n\tMake output file explicit.\n\t(ncrtn$(objext)): Depend on $(srcdir)/config/rs6000/sol-cn.S.\n\tMake output file explicit.\n\t* config/score/crti.S, config/score/crtn.S: New files.\n\t* config/sh/crt1.S, config/sh/crti.S, config/sh/crtn.S: New files.\n\t* config/sh/lib1funcs-4-300.S, config/sh/lib1funcs-Os-4-200.S: New\n\tfiles.\n\t* config/sh/t-sh, config/sh/t-superh: New files.\n\t* config/sparc/t-linux64: New file.\n\t* config/spu/cache.S, config/spu/cachemgr.c: New files.\n\t* config/spu/t-elf (CRTSTUFF_T_CFLAGS): Set.\n\t(cachemgr.o, cachemgr_nonatomic.o, libgcc_%.a, cache8k.o)\n\t(cache16k.o, cache32k.o, cache64k.o, cache128k.o): New rules.\n\t* config/t-crtin: Remove.\n\t* config/t-crtstuff-pic: New file.\n\t* config/t-sol2 (CUSTOM_CRTIN): Set.\n\t(crti.o, crtn.o): New rules.\n\t* config/vms/t-vms: New file.\n\t* config/vms/vms-ucrt0.c: New file.\n\t* config/xtensa/t-elf: New file.\n\nFrom-SVN: r180771", "tree": {"sha": "2c5dd5cdcff32ca9e25b38d3c331376a3158c6ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c5dd5cdcff32ca9e25b38d3c331376a3158c6ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f73c6ccf0d9c54714b162b9d314594311747de9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f73c6ccf0d9c54714b162b9d314594311747de9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f73c6ccf0d9c54714b162b9d314594311747de9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f73c6ccf0d9c54714b162b9d314594311747de9/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "29026f66b08e17dc93d995fb3d48d2c0f7c51f26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29026f66b08e17dc93d995fb3d48d2c0f7c51f26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29026f66b08e17dc93d995fb3d48d2c0f7c51f26"}], "stats": {"total": 2369, "additions": 1142, "deletions": 1227}, "files": [{"sha": "5c3a91da561c4c3b0180b8585866361b7572b786", "filename": "gcc/ChangeLog", "status": "modified", "additions": 274, "deletions": 0, "changes": 274, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,3 +1,277 @@\n+2011-11-02  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config.gcc (extra_parts): Remove.\n+\t(*-*-freebsd*): Remove extra_parts.\n+\t(*-*-linux*, frv-*-*linux*, *-*-kfreebsd*-gnu, *-*-knetbsd*-gnu,\n+\t*-*-gnu*, *-*-kopensolaris*-gnu): Likewise.\n+\t(*-*-netbsd*): Remove t-libc-ok, t-netbsd from tmake_file.\n+\tRemove extra_parts for *-*-netbsd*1.[7-9]*, *-*-netbsd[2-9]*,\n+\t*-*-netbsdelf[2-9]*.\n+\t(*-*-openbsd*): Remove t-libc-ok from tmake_file.\n+\t(alpha*-*-linux*): Remove extra_parts.\n+\t(alpha*-*-freebsd*): Likewise.\n+\t(bfin*-linux-uclibc*): Likewise.\n+\t(fr30-*-elf): Likewise.\n+\t(moxie-*-elf): Likewise.\n+\t(moxie-*-uclinux*): Likewise.\n+\t(h8300-*-rtems*): Remove h8300/t-elf from tmake_file.\n+\t(h8300-*-elf*): Likewise.\n+\t(hppa*64*-*-hpux11*): Remove extra_parts.\n+\t(i[34567]86-*-elf*): Remove i386/t-i386elf, i386/t-crtstuff from\n+\ttmake_file.\n+\t(x86_64-*-elf*): Likewise.\n+\t(i[34567]86-*-freebsd*): Remove tmake_file.\n+\t(x86_64-*-freebsd*): Likewise.\n+\t(x86_64-*-netbsd*): Likewise.\n+\t(i[34567]86-*-openbsd2.*, i[34567]86-*openbsd3.[0123]): Remove\n+\tt-libc-ok from tmake_file.\n+\t(i[34567]86-*-linux*, i[34567]86-*-kfreebsd*-gnu,\n+\ti[34567]86-*-knetbsd*-gnu, i[34567]86-*-gnu*,\n+\ti[34567]86-*-kopensolaris*-gnu): Remove i386/t-crtstuff from tmake_file.\n+\tRemove extra_parts.\n+\t(x86_64-*-linux*, x86_64-*-kfreebsd*-gnu, x86_64-*-knetbsd*-gnu):\n+\tRemove i386/t-crtstuff from tmake_file.\n+\t(i[34567]86-*-lynxos*): Likewise.\n+\tRemove extra_parts.\n+\t(ia64*-*-elf*): Remove extra_parts.\n+\t(ia64*-*-freebsd*): Likewise.\n+\t(ia64*-*-linux*): Likewise.\n+\t(ia64-hp-*vms*): Remove ia64/t-vms from tmake_file.\n+\t(m32r-*-elf*): Remove extra_parts.\n+\t(m32rle-*-elf*): Likewise.\n+\t(m32r-*-rtems*): Likewise.\n+\t(m68k-*-elf*, fido-*-elf*): Likewise.\n+\t(m68k*-*-openbsd*): Remove t-libc-ok from tmake_file.\n+\t(m68k-*-rtems*): Remove extra_parts.\n+\t(mep-*-*): Likewise.\n+\t(microblaze*-linux*): Likewise.\n+\t(mips64*-*-linux*, mipsisa64*-*-linux*): Likewise.\n+\t(mips*-*-linux*): Likewise.\n+\t(powerpc-*-lynxos*): Likewise.\n+\t(s390x-ibm-tpf*): Likewise.\n+\t(score-*-elf): Likewise.\n+\tRemove tmake_file.\n+\t(sh-*-elf*, sh[12346l]*-*-elf*, sh-*-linux*, sh[2346lbe]*-*-linux*,\n+\tsh-*-netbsdelf*, shl*-*-netbsdelf*, sh5-*-netbsd*, sh5l*-*-netbsd*,\n+\tsh64-*-netbsd*, sh64l*-*-netbsd*): Remove sh/t-elf from tmake_file.\n+\tRemove sh/t-superh from tmake_file for sh*-superh-elf.\n+\tRemove sh/t-linux64 from tmake_file for sh64*-*-linux*.\n+\t(sh-*-rtems*): Remove sh/t-elf from tmake_file.\n+\t(sh-wrs-vxworks): Likewise.\n+\t(sparc-*-linux*): Remove extra_parts.\n+\t(sparc64-*-linux*): Likewise.\n+\t(sparc64-*-freebsd*, ultrasparc-*-freebsd*): Likewise.\n+\t(xstormy16-*-elf): Likewise.\n+\t(xtensa*-*-linux*): Remove xtensa/t-linux from tmake_file.\n+\t(am33_2.0-*-linux*): Remove extra_parts.\n+\t* configure.ac (extra_parts): Don't substitute.\n+\t* configure: Regenerate.\n+\t* crtstuff.c: Move to ../libgcc.\n+\t* Makefile.in (CRTSTUFF_CFLAGS): Remove.\n+\t(EXTRA_PARTS): Remove.\n+\t(CRTSTUFF_T_CFLAGS): Remove.\n+\t(MOSTLYCLEANFILES): Remove $(EXTRA_PARTS).\n+\t(GCC_EXTRA_PARTS): Remove.\n+\t(libgcc.mvars): Remove GCC_EXTRA_PARTS, CRTSTUFF_CFLAGS,\n+\tCRTSTUFF_T_CFLAGS, CRTSTUFF_T_CFLAGS_S.\n+\tEmit GCC_CFLAGS, INHIBIT_LIBC_CFLAGS.\n+\t($(T)crtbegin.o, $(T)crtend.o, $(T)crtbeginS.o, $(T)crtendS.o)\n+\t($(T)crtbeginT.o): Remove.\n+\t* config/alpha/t-vms (EXTRA_PARTS): Remove.\n+\t($(T)vms-dwarf2.o, $(T)vms-dwarf2eh.o): Remove.\n+\t* config/alpha/vms-dwarf2.asm: Move to\n+\t../libgcc/config/alpha/vms-dwarf2.S.\n+\t* config/alpha/vms-dwarf2eh.asm: Move to\n+\t../libgcc/config/alpha/vms-dwarf2eh.S.\n+\t* config/arm/crti.asm: Move to ../libgcc/config/arm/crti.S.\n+\t* config/arm/crtn.asm: Move to ../libgcc/config/arm/crtn.S.\n+\t* config/arm/t-arm-elf (EXTRA_MULTILIB_PARTS): Remove.\n+\t($(T)crti.o, $(T)crtn.o): Remove.\n+\t* config/arm/t-linux: Remove comment.\n+\t* config/arm/t-linux-eabi (EXTRA_MULTILIB_PARTS): Remove.\n+\t* config/arm/t-strongarm-elf (EXTRA_MULTILIB_PARTS): Remove.\n+\t($(T)crti.o, $(T)crtn.o): Remove.\n+\t* config/arm/t-symbian (EXTRA_MULTILIB_PARTS): Remove.\n+\t* config/bfin/crti.s: Move to ../libgcc/config/bfin/crti.S.\n+\t* config/bfin/crtn.s: Move to ../libgcc/config/bfin/crtn.S.\n+\t* config/bfin/crtlibid.s: Move to ../libgcc/config/bfin/crtlibid.S.\n+\t* config/bfin/t-bfin (EXTRA_PARTS): Remove.\n+\t($(T)crti.o, $(T)crtn.o): Remove.\n+\t* config/bfin/t-bfin-elf (CRTSTUFF_T_CFLAGS): Remove.\n+\t($(T)crti.o, $(T)crtn.o, $(T)crtlibid.o): Remove\n+\t(EXTRA_MULTILIB_PARTS): Remove.\n+\t* config/bfin/t-bfin-linux (CRTSTUFF_T_CFLAGS,\n+\tEXTRA_MULTILIB_PARTS): Remove.\n+\t* config/bfin/t-bfin-uclinux (CRTSTUFF_T_CFLAGS): Remove.\n+\t($(T)crtlibid.o): Remove.\n+\t(EXTRA_MULTILIB_PARTS): Remove.\n+\t* config/c6x/crti.s: Move to ../libgcc/config/c6x/crti.S.\n+\t* config/c6x/crtn.s: Move to ../libgcc/config/c6x/crtn.S.\n+\t* config/c6x/t-c6x-elf ($(T)crti.o, $(T)crtn.o): Remove.\n+\t(EXTRA_MULTILIB_PARTS): Remove.\n+\t(CRTSTUFF_T_CFLAGS, CRTSTUFF_T_CFLAGS_S): Remove.\n+\t* config/c6x/t-c6x-uclinux (CRTSTUFF_T_CFLAGS,\n+\tCRTSTUFF_T_CFLAGS_S): Remove.\n+\t* config/cris/t-elfmulti (CRTSTUFF_T_CFLAGS): Remove.\n+\t* config/cris/t-linux (CRTSTUFF_T_CFLAGS_S): Remove.\n+\t* config/fr30/crti.asm: Move to ../libgcc/config/fr30/crti.S.\n+\t* config/fr30/crtn.asm: Move to ../libgcc/config/fr30/crtn.S.\n+\t* config/fr30/t-fr30 ($(T)crti.o, $(T)crtn.o): Remove.\n+\t* config/frv/frvbegin.c, config/frv/frvend.c: Move to\n+\t../libgcc/config/frv.\n+\t* config/frv/t-frv (EXTRA_MULTILIB_PARTS): Remove.\n+\t(FRVSTUFF_CFLAGS, $(T)frvbegin$(objext), $(T)frvend$(objext)): Remove.\n+\t* config/frv/t-linux (EXTRA_MULTILIB_PARTS): Remove.\n+\t(CRTSTUFF_T_CFLAGS): Remove.\n+\t* config/h8300/crti.asm: Move to ../libgcc/config/h8300/crti.S.\n+\t* config/h8300/crtn.asm: Move to ../libgcc/config/h8300/crtn.S.\n+\t* config/h8300/t-elf: Remove.\n+\t* config/i386/cygming-crtbegin.c, config/i386/cygming-crtend.c:\n+\tMove to ../libgcc/config/i386.\n+\t* config/i386/t-crtstuff: Remove.\n+\t* config/i386/t-i386elf: Remove.\n+\t* config/i386/t-linux64 (EXTRA_MULTILIB_PARTS): Remove.\n+\t* config/i386/t-nto (CRTSTUFF_T_CFLAGS, EXTRA_PARTS): Remove.\n+\t* config/ia64/crtbegin.asm: Move to\n+\t../libgcc/config/ia64/crtbegin.S.\n+\t* config/ia64/crtend.asm: Move to\n+\t../libgcc/config/ia64/crtend.S.\n+\t* config/ia64/crti.asm: Move to ../libgcc/config/ia64/crti.S.\n+\t* config/ia64/crtn.asm: Move to ../libgcc/config/ia64/crtn.S.\n+\t* config/ia64/t-vms: Remove.\n+\t* config/ia64/vms-crtinit.asm: Move to\n+\t../libgcc/config/ia64/vms-crtinit.S.\n+\t* config/m32c/t-m32c (EXTRA_MULTILIB_PARTS): Remove.\n+\t* config/m32r/initfini.c: Move to ../libgcc/config/m32r.\n+\t* config/m32r/t-linux (CRTSTUFF_T_CFLAGS_S): Remove.\n+\t* config/m32r/t-m32r (CRTSTUFF_T_CFLAGS): Remove.\n+\t($(T)crtinit.o, $(T)crtfini.o): Remove.\n+\t(m32rx, m32r2): Remove.\n+\t(EXTRA_MULTILIB_PARTS): Remove.\n+\t* config/m68k/crti.s: Move to ../libgcc/config/m68k/crti.S.\n+\t* config/m68k/crtn.s: Move to ../libgcc/config/m68k/crtn.S.\n+\t* config/m68k/t-crtstuff: Remove.\n+\t* config/m68k/t-linux (EXTRA_MULTILIB_PARTS): Remove.\n+\t* config/m68k/t-m68kelf: Remove.\n+\t* config/m68k/t-uclinux (EXTRA_MULTILIB_PARTS): Remove.\n+\t* config/mcore/crti.asm: Move to ../libgcc/config/mcore/crti.S.\n+\t* config/mcore/crtn.asm: Move to ../libgcc/config/mcore/crtn.S.\n+\t* config/mcore/t-mcore ($(T)crti.o, $(T)crtn.o): Remove.\n+\t(EXTRA_PARTS, EXTRA_MULTILIB_PARTS): Remove.\n+\t* config/mep/t-mep (CRTSTUFF_CFLAGS): Remove.\n+\t(EXTRA_MULTILIB_PARTS): Remove.\n+\t* config/microblaze/crti.s: Move to ../libgcc/config/microblaze/crti.S.\n+\t* config/microblaze/crtn.s: Move to ../libgcc/config/microblaze/crtn.S.\n+\t* config/microblaze/t-microblaze (EXTRA_MULTILIB_PARTS,\n+\tEXTRA_PARTS): Remove.\n+\t($(T)crti$(objext), $(T)crtn$(objext)): Remove.\n+\t* config/mips/crti.asm: Move to ../libgcc/config/mips/crti.S.\n+\t* config/mips/crtn.asm: Move to ../libgcc/config/mips/crtn.S.\n+\t* config/mips/t-elf (CRTSTUFF_T_CFLAGS): Remove.\n+\t($(T)crti.o, $(T)crtn.o): Remove.\n+\t(EXTRA_MULTILIB_PARTS): Remove.\n+\t* config/mips/t-isa3264: Likewise.\n+\t* config/mips/t-linux64 (EXTRA_MULTILIB_PARTS): Remove.\n+\t* config/mips/t-r3900 (EXTRA_MULTILIB_PARTS): Remove.\n+\t(CRTSTUFF_T_CFLAGS): Remove.\n+\t* config/mips/t-sde (CRTSTUFF_T_CFLAGS): Remove.\n+\t($(T)crti.o, $(T)crtn.o): Remove.\n+\t(EXTRA_MULTILIB_PARTS): Remove.\n+\t* config/mips/t-sr71k (EXTRA_MULTILIB_PARTS, CRTSTUFF_T_CFLAGS):\n+\tRemove.\n+\t($(T)crti.o, $(T)crtn.o): Remove.\n+\t* config/mips/t-st (EXTRA_MULTILIB_PARTS): Remove.\n+\t* config/mips/t-vr (CRTSTUFF_T_CFLAGS): Remove.\n+\t(EXTRA_MULTILIB_PARTS): Remove.\n+\t($(T)crti.o, $(T)crtn.o): Remove.\n+\t* config/mmix/crti.asm: Move to ../libgcc/config/crti.S.\n+\t* config/mmix/crtn.asm: Move to ../libgcc/config/crtn.S.\n+\t* config/mmix/t-mmix (CRTSTUFF_T_CFLAGS): Remove.\n+\t* config/moxie/crti.asm, config/moxie/crtn.asm: Remove.\n+\t* config/pa/stublib.c: Move to libgcc/config/pa.\n+\t* config/pa/t-linux (CRTSTUFF_T_CFLAGS_S): Remove.\n+\t* config/pa/t-linux64 (CRTSTUFF_T_CFLAGS_S): Remove.\n+\t* config/pa/t-pa-hpux11 (LIBGCCSTUB_OBJS, stublib.c): Remove.\n+\t(pthread_default_stacksize_np-stub.o, pthread_mutex_lock-stub.o)\n+\t(pthread_mutex_unlock-stub.o, pthread_once-stub.o)\n+\t($(T)libgcc_stub.a): Remove.\n+\t* config/pa/t-pa64 (LIBGCCSTUB_OBJS, stublib.c): Remove.\n+\t(rfi-stub.o, dfi-stub.o, cxaf-stub.o, jvrc-stub.o)\n+\t(pthread_default_stacksize_np-stub.o, pthread_mutex_lock-stub.o)\n+\t(pthread_mutex_unlock-stub.o, pthread_once-stub.o)\n+\t($(T)libgcc_stub.a): Remove.\n+\t* config/rs6000/eabi-cn.asm: Move to\n+\t../../../libgcc/config/rs6000/eabi-cn.S.\n+\t* config/rs6000/eabi-ci.asm: Move to\n+\t../../../libgcc/config/rs6000/eabi-ci.S.\n+\t* config/rs6000/sol-ci.asm: Move to\n+\t../../../libgcc/config/rs6000/sol-ci.S.\n+\t* config/rs6000/sol-cn.asm: Move to\n+\t../../../libgcc/config/rs6000/sol-cn.S.\n+\t* config/rs6000/t-lynx (EXTRA_MULTILIB_PARTS): Remove.\n+\t(CRTSTUFF_T_CFLAGS, CRTSTUFF_T_CFLAGS_S): Remove.\n+\t* config/rs6000/t-netbsd (CRTSTUFF_T_CFLAGS, CRTSTUFF_T_CFLAGS_S):\n+\tRemove.\n+\t(EXTRA_MULTILIB_PARTS): Remove.\n+\t* config/rs6000/t-ppccomm (EXTRA_MULTILIB_PARTS): Remove.\n+\t(ecrti.S, ecrtn.S, ncrti.S, ncrtn.S): Remove.\n+\t($(T)ecrti$(objext), $(T)ecrtn$(objext), $(T)ncrti$(objext),\n+\t$(T)ncrtn$(objext)): Remove.\n+\t(CRTSTUFF_T_CFLAGS, CRTSTUFF_T_CFLAGS_S): Remove.\n+\t* config/rs6000/t-vxworks (EXTRA_MULTILIB_PARTS): Remove.\n+\t* config/rx/t-rx (EXTRA_MULTILIB_PARTS): Remove.\n+\t* config/score/crti.asm: Move to ../libgcc/config/score/crti.S.\n+\t* config/score/crtn.asm: Move to ../libgcc/config/score/crtn.S.\n+\t* config/score/t-score-elf: Remove.\n+\t* config/sh/crt1.asm: Move to ../libgcc/config/sh/crt1.S.\n+\t* config/sh/crti.asm: Move to ../libgcc/config/sh/crti.S.\n+\t* config/sh/crtn.asm: Move to ../libgcc/config/sh/crtn.S.\n+\t* config/sh/lib1funcs-4-300.asm: Move to\n+\t../../../libgcc/config/sh/lib1funcs-4-300.S.\n+\t* config/sh/lib1funcs-Os-4-200.asm: Move to\n+\t../libgcc/config/sh/lib1funcs-Os-4-200.S.\n+\t* config/sh/t-elf: Remove.\n+\t* config/sh/t-linux (EXTRA_MULTILIB_PARTS): Remove.\n+\t* config/sh/t-linux64: Remove.\n+\t* config/sh/t-netbsd (EXTRA_MULTILIB_PARTS): Remove.\n+\t* config/sh/t-sh ($(T)crt1.o, $(T)crti.o, $(T)crtn.o): Remove.\n+\t(IC_EXTRA_PARTS, OPT_EXTRA_PARTS, EXTRA_MULTILIB_PARTS): Remove.\n+\t($(T)ic_invalidate_array_4-100.o)\n+\t($(T)libic_invalidate_array_4-100.a)\n+\t($(T)ic_invalidate_array_4-200.o)\n+\t($(T)libic_invalidate_array_4-200.a, $(T)ic_invalidate_array_4a.o)\n+\t($(T)libic_invalidate_array_4a.a, $(T)sdivsi3_i4i-Os-4-200.o)\n+\t($(T)udivsi3_i4i-Os-4-200.o, $(T)unwind-dw2-Os-4-200.o)\n+\t($(T)libgcc-Os-4-200.a, $(T)div_table-4-300.o)\n+\t($(T)libgcc-4-300.a): Remove.\n+\t* config/sh/t-superh: Remove.\n+\t* config/sh/t-vxworks (EXTRA_MULTILIB_PARTS): Remove.\n+\t* config/sparc/t-linux64 (CRTSTUFF_T_CFLAGS): Remove.\n+\t* config/spu/cache.S: Move to ../libgcc/config/spu.\n+\t* config/spu/cachemgr.c: Move to ../libgcc/config/spu.\n+\t* config/spu/t-spu-elf (CRTSTUFF_T_CFLAGS): Remove.\n+\t(EXTRA_MULTILIB_PARTS): Remove.\n+\t($(T)cachemgr.o, $(T)cachemgr_nonatomic.o, $(T)libgcc_%.a): Remove.\n+\t($(T)cache8k.o, $(T)cache16k.o, $(T)cache32k.o, $(T)cache32k.o)\n+\t($(T)cache64k.o, $(T)cache128k.o): Remove.\n+\t* config/t-freebsd (CRTSTUFF_T_CFLAGS_S): Remove.\n+\t* config/t-libc-ok: Remove.\n+\t* config/t-linux (CRTSTUFF_T_CFLAGS_S): Remove.\n+\t* config/t-lynx (CRTSTUFF_T_CFLAGS_S): Remove.\n+\t* config/t-netbsd: Remove.\n+\t* config/t-svr4 (CRTSTUFF_T_CFLAGS_S): Remove.\n+\t* config/t-vxworks (EXTRA_MULTILIB_PARTS): Remove.\n+\t* config/vms/t-vms (VMS_EXTRA_PARTS): Remove.\n+\t($(T)vcrt0.o, $(T)pcrt0.o): Remove.\n+\t* config/vms/vms-ucrt0.c: Move to ../libgcc/config/vms.\n+\t* config/xtensa/crti.asm: Move to ../libgcc/config/xtensa/crti.S.\n+\t* config/xtensa/crtn.asm: Move to ../libgcc/config/xtensa/crtn.S.\n+\t* config/xtensa/t-elf (CRTSTUFF_T_CFLAGS, CRTSTUFF_T_CFLAGS_S):\n+\tRemove.\n+\t(EXTRA_MULTILIB_PARTS): Remove.\n+\t* config/xtensa/t-linux: Remove.\n+\t* config/xtensa/t-xtensa ($(T)crti.o, $(T)crtn.o): Remove.\n+\n 2011-11-02  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (bdesc_args) [IX86_BUILTIN_CVTTPD2DQ256]: Use"}, {"sha": "b6951dc1486c99a7cf56be4e320e47d5a437da62", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 58, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -687,13 +687,6 @@ LIBGCC2_INCLUDES =\n # Additional target-dependent options for compiling libgcc2.a.\n TARGET_LIBGCC2_CFLAGS =\n \n-# Options to use when compiling crtbegin/end.\n-CRTSTUFF_CFLAGS = -O2 $(GCC_CFLAGS) $(INCLUDES_FOR_TARGET) $(MULTILIB_CFLAGS) \\\n-  -g0 -finhibit-size-directive -fno-inline -fno-exceptions \\\n-  -fno-zero-initialized-in-bss -fno-toplevel-reorder -fno-tree-vectorize \\\n-  -fno-stack-protector \\\n-  $(INHIBIT_LIBC_CFLAGS)\n-\n # List of extra executables that should be compiled for this target machine\n # that are used for compiling from source code to object code.\n # The rules for compiling them should be in the t-* file for the machine.\n@@ -702,10 +695,6 @@ EXTRA_PASSES =@extra_passes@\n # Like EXTRA_PASSES, but these are used when linking.\n EXTRA_PROGRAMS = @extra_programs@\n \n-# List of extra object files that should be compiled for this target machine.\n-# The rules for compiling them should be in the t-* file for the machine.\n-EXTRA_PARTS = @extra_parts@\n-\n # List of extra object files that should be compiled and linked with\n # compiler proper (cc1, cc1obj, cc1plus).\n EXTRA_OBJS = @extra_objs@\n@@ -801,9 +790,6 @@ RUNTEST = `if [ -f $${srcdir}/../dejagnu/runtest ] ; then \\\n \t    else echo runtest; fi`\n RUNTESTFLAGS =\n \n-# Extra flags to use when compiling crt{begin,end}.o.\n-CRTSTUFF_T_CFLAGS =\n-\n # \"t\" or nothing, for building multilibbed versions of, say, crtbegin.o.\n T =\n \n@@ -1538,7 +1524,7 @@ MOSTLYCLEANFILES = insn-flags.h insn-config.h insn-codes.h \\\n  tree-check.h min-insn-modes.c insn-modes.c insn-modes.h \\\n  genrtl.h gt-*.h gtype-*.h gtype-desc.c gtyp-input.list \\\n  xgcc$(exeext) cpp$(exeext) cc1$(exeext) $(EXTRA_PASSES) \\\n- $(EXTRA_PARTS) $(EXTRA_PROGRAMS) gcc-cross$(exeext) \\\n+ $(EXTRA_PROGRAMS) gcc-cross$(exeext) \\\n  $(SPECS) collect2$(exeext) gcc-ar$(exeext) gcc-nm$(exeext) \\\n  gcc-ranlib$(exeext) \\\n  gcov-iov$(build_exeext) gcov$(exeext) gcov-dump$(exeext) \\\n@@ -1886,10 +1872,6 @@ srcdirify = $(patsubst $$(libgcc_objdir)/%,%, \\\n \t    $(patsubst %,$$(gcc_objdir)/%, \\\n \t\t$(filter-out $(srcdir)% $$(libgcc_objdir)%,$(1)))\n \n-# The distinction between these two variables is no longer relevant,\n-# so we combine them.  Sort removes duplicates.\n-GCC_EXTRA_PARTS := $(sort $(EXTRA_MULTILIB_PARTS) $(EXTRA_PARTS))\n-\n libgcc-support: libgcc.mvars stmp-int-hdrs $(TCONFIG_H) \\\n \t$(MACHMODE_H) $(LIB2ADD) $(LIB2ADD_ST) gcov-iov.h\n \n@@ -1904,12 +1886,10 @@ libgcc.mvars: config.status Makefile $(LIB2ADD) $(LIB2ADD_ST) specs \\\n \techo LIB2ADD_ST = '$(call srcdirify,$(LIB2ADD_ST))' >> tmp-libgcc.mvars\n \techo LIB2_SIDITI_CONV_FUNCS = '$(LIB2_SIDITI_CONV_FUNCS)' >> tmp-libgcc.mvars\n \techo LIB2_DIVMOD_FUNCS = '$(LIB2_DIVMOD_FUNCS)' >> tmp-libgcc.mvars\n-\techo GCC_EXTRA_PARTS = '$(GCC_EXTRA_PARTS)' >> tmp-libgcc.mvars\n \techo LIBGCC2_CFLAGS = '$(LIBGCC2_CFLAGS)' >> tmp-libgcc.mvars\n \techo TARGET_LIBGCC2_CFLAGS = '$(TARGET_LIBGCC2_CFLAGS)' >> tmp-libgcc.mvars\n-\techo CRTSTUFF_CFLAGS = '$(CRTSTUFF_CFLAGS)' >> tmp-libgcc.mvars\n-\techo CRTSTUFF_T_CFLAGS = '$(CRTSTUFF_T_CFLAGS)' >> tmp-libgcc.mvars\n-\techo CRTSTUFF_T_CFLAGS_S = '$(CRTSTUFF_T_CFLAGS_S)' >> tmp-libgcc.mvars\n+\techo GCC_CFLAGS = '$(GCC_CFLAGS)' >> tmp-libgcc.mvars\n+\techo INHIBIT_LIBC_CFLAGS = '$(INHIBIT_LIBC_CFLAGS)' >> tmp-libgcc.mvars\n \techo TARGET_SYSTEM_ROOT = '$(TARGET_SYSTEM_ROOT)' >> tmp-libgcc.mvars\n \n \tmv tmp-libgcc.mvars libgcc.mvars\n@@ -1937,41 +1917,6 @@ s-mlib: $(srcdir)/genmultilib Makefile\n \tfi\n \t$(SHELL) $(srcdir)/../move-if-change tmp-mlib.h multilib.h\n \t$(STAMP) s-mlib\n-\n-# Compile two additional files that are linked with every program\n-# linked using GCC on systems using COFF or ELF, for the sake of C++\n-# constructors.\n-$(T)crtbegin.o: crtstuff.c $(GCC_PASSES) $(TCONFIG_H) auto-host.h \\\n-  gbl-ctors.h stmp-int-hdrs tsystem.h coretypes.h $(TM_H)\n-\t$(GCC_FOR_TARGET) $(CRTSTUFF_CFLAGS) $(CRTSTUFF_T_CFLAGS) \\\n-\t  -c $(srcdir)/crtstuff.c -DCRT_BEGIN \\\n-\t  -o $(T)crtbegin$(objext)\n-\n-$(T)crtend.o: crtstuff.c $(GCC_PASSES) $(TCONFIG_H) auto-host.h \\\n-  gbl-ctors.h stmp-int-hdrs tsystem.h coretypes.h $(TM_H)\n-\t$(GCC_FOR_TARGET) $(CRTSTUFF_CFLAGS) $(CRTSTUFF_T_CFLAGS) \\\n-\t  -c $(srcdir)/crtstuff.c -DCRT_END \\\n-\t  -o $(T)crtend$(objext)\n-\n-# These are versions of crtbegin and crtend for shared libraries.\n-$(T)crtbeginS.o: crtstuff.c $(GCC_PASSES) $(TCONFIG_H) auto-host.h \\\n-  gbl-ctors.h stmp-int-hdrs tsystem.h coretypes.h $(TM_H)\n-\t$(GCC_FOR_TARGET) $(CRTSTUFF_CFLAGS) $(CRTSTUFF_T_CFLAGS_S) \\\n-\t  -c $(srcdir)/crtstuff.c -DCRT_BEGIN -DCRTSTUFFS_O \\\n-\t  -o $(T)crtbeginS$(objext)\n-\n-$(T)crtendS.o: crtstuff.c $(GCC_PASSES) $(TCONFIG_H) auto-host.h \\\n-  gbl-ctors.h stmp-int-hdrs tsystem.h coretypes.h $(TM_H)\n-\t$(GCC_FOR_TARGET) $(CRTSTUFF_CFLAGS) $(CRTSTUFF_T_CFLAGS_S) \\\n-\t  -c $(srcdir)/crtstuff.c -DCRT_END -DCRTSTUFFS_O \\\n-\t  -o $(T)crtendS$(objext)\n-\n-# This is a version of crtbegin for -static links.\n-$(T)crtbeginT.o: crtstuff.c $(GCC_PASSES) $(TCONFIG_H) auto-host.h \\\n-  gbl-ctors.h stmp-int-hdrs tsystem.h coretypes.h $(TM_H)\n-\t$(GCC_FOR_TARGET) $(CRTSTUFF_CFLAGS) $(CRTSTUFF_T_CFLAGS) \\\n-\t  -c $(srcdir)/crtstuff.c -DCRT_BEGIN -DCRTSTUFFT_O \\\n-\t  -o $(T)crtbeginT$(objext)\n #\f\n # Compiling object files from source files.\n "}, {"sha": "6bbec7db39eb7d04453f19faabe3d04fb11e89be", "filename": "gcc/config.gcc", "status": "modified", "additions": 17, "deletions": 71, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -138,9 +138,6 @@\n #  extra_passes\t\tList of extra executables compiled for this target\n #\t\t\tmachine, used for compiling from source to object.\n #\n-#  extra_parts\t\tList of extra object files that should be compiled\n-#\t\t\tfor this target machine.\n-#\n #  extra_programs\tLike extra_passes, but these are used when linking.\n #\n #  extra_options\tList of target-dependent .opt files.\n@@ -215,7 +212,6 @@ user_headers_inc_next_post=\n use_gcc_tgmath=yes\n use_gcc_stdint=none\n extra_passes=\n-extra_parts=\n extra_programs=\n extra_objs=\n extra_gcc_objs=\n@@ -556,7 +552,6 @@ case ${target} in\n   # pleases around the provided core setting.\n   gas=yes\n   gnu_ld=yes\n-  extra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o\"\n   fbsd_major=`echo ${target} | sed -e 's/.*freebsd//g' | sed -e 's/\\..*//g'`\n   tm_defines=\"${tm_defines} FBSD_MAJOR=${fbsd_major}\"\n   tmake_file=\"t-freebsd t-slibgcc\"\n@@ -586,7 +581,6 @@ case ${target} in\n   ;;\n *-*-linux* | frv-*-*linux* | *-*-kfreebsd*-gnu | *-*-knetbsd*-gnu | *-*-gnu* | *-*-kopensolaris*-gnu)\n   extra_options=\"$extra_options gnu-user.opt\"\n-  extra_parts=\"crtbegin.o crtbeginS.o crtbeginT.o crtend.o crtendS.o\"\n   gas=yes\n   gnu_ld=yes\n   case ${enable_threads} in\n@@ -640,7 +634,7 @@ case ${target} in\n   esac\n   ;;\n *-*-netbsd*)\n-  tmake_file=\"t-libc-ok t-netbsd t-libgcc-pic t-slibgcc\"\n+  tmake_file=\"t-libgcc-pic t-slibgcc\"\n   gas=yes\n   gnu_ld=yes\n \n@@ -661,15 +655,6 @@ case ${target} in\n       ;;\n   esac\n \n-  # NetBSD 1.7 and later are set up to use GCC's crtstuff for\n-  # ELF configurations.  We will clear extra_parts in the\n-  # a.out configurations.\n-  case ${target} in\n-    *-*-netbsd*1.[7-9]* | *-*-netbsd[2-9]* | *-*-netbsdelf[2-9]*)\n-      extra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o\"\n-      ;;\n-  esac\n-\n   # NetBSD 2.0 and later provide __cxa_atexit(), which we use by\n   # default (unless overridden by --disable-__cxa_atexit).\n   case ${target} in\n@@ -679,7 +664,7 @@ case ${target} in\n   esac\n   ;;\n *-*-openbsd*)\n-  tmake_file=\"t-libc-ok t-openbsd t-libgcc-pic\"\n+  tmake_file=\"t-openbsd t-libgcc-pic\"\n   case ${enable_threads} in\n     yes)\n       thread_file='posix'\n@@ -771,14 +756,12 @@ alpha*-*-linux*)\n \textra_options=\"${extra_options} alpha/elf.opt\"\n \ttarget_cpu_default=\"MASK_GAS\"\n \ttmake_file=\"${tmake_file} alpha/t-alpha alpha/t-ieee\"\n-\textra_parts=\"${extra_parts} crtfastmath.o\"\n \t;;\n alpha*-*-freebsd*)\n \ttm_file=\"${tm_file} ${fbsd_tm_file} alpha/elf.h alpha/freebsd.h\"\n \textra_options=\"${extra_options} alpha/elf.opt\"\n \ttarget_cpu_default=\"MASK_GAS\"\n \ttmake_file=\"${tmake_file} alpha/t-alpha alpha/t-ieee\"\n-\textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o crtfastmath.o\"\n \t;;\n alpha*-*-netbsd*)\n \ttm_file=\"${tm_file} netbsd.h alpha/elf.h netbsd-elf.h alpha/netbsd.h\"\n@@ -963,7 +946,6 @@ bfin*-uclinux*)\n bfin*-linux-uclibc*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h bfin/elf.h gnu-user.h linux.h glibc-stdint.h bfin/linux.h ./linux-sysroot-suffix.h\"\n \ttmake_file=\"bfin/t-bfin-linux t-slibgcc\"\n-\textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n \tuse_collect2=no\n \t;;\n bfin*-rtems*)\n@@ -1008,7 +990,6 @@ crisv32-*-linux* | cris-*-linux*)\n fr30-*-elf)\n \ttm_file=\"dbxelf.h elfos.h newlib-stdint.h ${tm_file}\"\n \ttmake_file=fr30/t-fr30\n-\textra_parts=\"crti.o crtn.o crtbegin.o crtend.o\"\n \t;;\n frv-*-elf)\n \ttm_file=\"dbxelf.h elfos.h newlib-stdint.h ${tm_file}\"\n@@ -1025,27 +1006,25 @@ moxie-*-elf)\n \tgas=yes\n \tgnu_ld=yes\n \ttm_file=\"dbxelf.h elfos.h newlib-stdint.h ${tm_file}\"\n-\textra_parts=\"crti.o crtn.o crtbegin.o crtend.o\"\n \ttmake_file=\"${tmake_file} moxie/t-moxie\"\n \t;;\n moxie-*-uclinux*)\n \tgas=yes\n \tgnu_ld=yes\n \ttm_file=\"dbxelf.h elfos.h ${tm_file} gnu-user.h linux.h glibc-stdint.h moxie/uclinux.h\"\n-\textra_parts=\"crti.o crtn.o crtbegin.o crtend.o\"\n \ttmake_file=\"${tmake_file} moxie/t-moxie\"\n \t;;\n moxie-*-rtems*)\n \ttmake_file=\"${tmake_file} moxie/t-moxie t-rtems\"\n \ttm_file=\"moxie/moxie.h dbxelf.h elfos.h moxie/rtems.h rtems.h newlib-stdint.h\"\n \t;;\n h8300-*-rtems*)\n-\ttmake_file=\"h8300/t-h8300 h8300/t-elf t-rtems h8300/t-rtems\"\n+\ttmake_file=\"h8300/t-h8300 t-rtems h8300/t-rtems\"\n \ttm_file=\"h8300/h8300.h dbxelf.h elfos.h h8300/elf.h h8300/rtems.h rtems.h newlib-stdint.h\"\n \tlibgcc_tm_file=\"$libgcc_tm_file h8300/h8300-lib.h\"\n \t;;\n h8300-*-elf*)\n-\ttmake_file=\"h8300/t-h8300 h8300/t-elf\"\n+\ttmake_file=\"h8300/t-h8300\"\n \ttm_file=\"h8300/h8300.h dbxelf.h elfos.h newlib-stdint.h h8300/elf.h\"\n \tlibgcc_tm_file=\"$libgcc_tm_file h8300/h8300-lib.h\"\n \t;;\n@@ -1129,8 +1108,6 @@ hppa*64*-*-hpux11*)\n \t\t       pa/pa-hpux1010.opt pa/pa64-hpux.opt hpux11.opt\"\n \tneed_64bit_hwint=yes\n \ttmake_file=\"pa/t-pa64 pa/t-pa-hpux t-slibgcc\"\n-\textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o \\\n-\t\t     libgcc_stub.a\"\n \tcase x${enable_threads} in\n \tx | xyes | xposix )\n \t\tthread_file=posix\n@@ -1169,7 +1146,6 @@ hppa[12]*-*-hpux11*)\n \t\t;;\n \tesac\n \ttmake_file=\"pa/t-pa-hpux11 pa/t-pa-hpux t-slibgcc\"\n-\textra_parts=\"libgcc_stub.a\"\n \tcase x${enable_threads} in\n \tx | xyes | xposix )\n \t\tthread_file=posix\n@@ -1207,19 +1183,17 @@ x86_64-*-darwin*)\n \t;;\n i[34567]86-*-elf*)\n \ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h newlib-stdint.h i386/i386elf.h\"\n-\ttmake_file=\"${tmake_file} i386/t-i386elf i386/t-crtstuff t-svr4\"\n+\ttmake_file=\"${tmake_file} t-svr4\"\n \t;;\n x86_64-*-elf*)\n \ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h newlib-stdint.h i386/i386elf.h i386/x86-64.h\"\n-\ttmake_file=\"${tmake_file} i386/t-i386elf i386/t-crtstuff t-svr4\"\n+\ttmake_file=\"${tmake_file} t-svr4\"\n \t;;\n i[34567]86-*-freebsd*)\n \ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h ${fbsd_tm_file} i386/freebsd.h\"\n-\ttmake_file=\"${tmake_file} i386/t-crtstuff\"\n \t;;\n x86_64-*-freebsd*)\n \ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h ${fbsd_tm_file} i386/x86-64.h i386/freebsd.h i386/freebsd64.h\"\n-\ttmake_file=\"${tmake_file} i386/t-crtstuff\"\n \t;;\n i[34567]86-*-netbsdelf*)\n \ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h netbsd.h netbsd-elf.h i386/netbsd-elf.h\"\n@@ -1228,13 +1202,12 @@ i[34567]86-*-netbsdelf*)\n x86_64-*-netbsd*)\n \ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h netbsd.h netbsd-elf.h i386/x86-64.h i386/netbsd64.h\"\n \textra_options=\"${extra_options} netbsd.opt netbsd-elf.opt\"\n-\ttmake_file=\"${tmake_file} i386/t-crtstuff\"\n \t;;\n i[34567]86-*-openbsd2.*|i[34567]86-*openbsd3.[0123])\n \ttm_file=\"i386/i386.h i386/unix.h i386/bsd.h i386/gas.h i386/gstabs.h openbsd-oldgas.h openbsd.h i386/openbsd.h\"\n \textra_options=\"${extra_options} openbsd.opt\"\n \t# needed to unconfuse gdb\n-\ttmake_file=\"${tmake_file} t-libc-ok t-openbsd i386/t-openbsd\"\n+\ttmake_file=\"${tmake_file} t-openbsd i386/t-openbsd\"\n \t# we need collect2 until our bug is fixed...\n \tuse_collect2=yes\n \t;;\n@@ -1306,10 +1279,6 @@ i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-knetbsd*-gnu | i\n \t\ttm_file=\"$tm_file i386/gnu-user.h gnu.h i386/gnu.h\"\n \t\t;;\n \tesac\n-\ttmake_file=\"${tmake_file} i386/t-crtstuff\"\n-\t# This is a hack to avoid a configuration mismatch\n-\t# until the toplevel libgcc move is complete.\n-\textra_parts=\"${extra_parts} crtprec32.o crtprec64.o crtprec80.o crtfastmath.o\"\n \t;;\n x86_64-*-linux* | x86_64-*-kfreebsd*-gnu | x86_64-*-knetbsd*-gnu)\n \ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h gnu-user.h glibc-stdint.h \\\n@@ -1327,7 +1296,7 @@ x86_64-*-linux* | x86_64-*-kfreebsd*-gnu | x86_64-*-knetbsd*-gnu)\n \t\ttm_file=\"${tm_file} knetbsd-gnu.h\"\n \t\t;;\n \tesac\n-\ttmake_file=\"${tmake_file} i386/t-linux64 i386/t-crtstuff\"\n+\ttmake_file=\"${tmake_file} i386/t-linux64\"\n \tx86_multilibs=\"${with_multilib_list}\"\n \tif test \"$x86_multilibs\" = \"default\"; then\n \t\tx86_multilibs=\"m64,m32\"\n@@ -1357,8 +1326,7 @@ i[34567]86-pc-msdosdjgpp*)\n i[34567]86-*-lynxos*)\n \txm_defines=POSIX\n \ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h i386/lynx.h lynx.h\"\n-\ttmake_file=\"${tmake_file} i386/t-crtstuff t-lynx\"\n-\textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n+\ttmake_file=\"${tmake_file} t-lynx\"\n \textra_options=\"${extra_options} lynx.opt\"\n \tthread_file=lynx\n \tgnu_ld=yes\n@@ -1547,19 +1515,16 @@ ia64*-*-elf*)\n \tthen\n \t\ttarget_cpu_default=\"${target_cpu_default}|MASK_GNU_LD\"\n \tfi\n-\textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtfastmath.o\"\n \t;;\n ia64*-*-freebsd*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h ${fbsd_tm_file} ia64/sysv4.h ia64/freebsd.h\"\n \ttarget_cpu_default=\"MASK_GNU_AS|MASK_GNU_LD\"\n \ttmake_file=\"${tmake_file} ia64/t-ia64\"\n-\textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtfastmath.o\"\n \t;;\n ia64*-*-linux*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h gnu-user.h linux.h glibc-stdint.h ia64/sysv4.h ia64/linux.h\"\n \ttmake_file=\"${tmake_file} ia64/t-ia64 t-libunwind\"\n \ttarget_cpu_default=\"MASK_GNU_AS|MASK_GNU_LD\"\n-\textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtfastmath.o\"\n \t;;\n ia64*-*-hpux*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h ia64/sysv4.h ia64/hpux.h\"\n@@ -1585,7 +1550,7 @@ ia64*-*-hpux*)\n ia64-hp-*vms*)\n \ttm_file=\"${tm_file} elfos.h ia64/sysv4.h ia64/elf.h ia64/vms.h ia64/vms64.h\"\n \txm_file=\"vms/xm-vms.h vms/xm-vms64.h\"\n-\ttmake_file=\"${tmake_file} vms/t-vms64 ia64/t-ia64 ia64/t-vms\"\n+\ttmake_file=\"${tmake_file} vms/t-vms64 ia64/t-ia64\"\n \ttarget_cpu_default=\"0\"\n \tif test x$gas = xyes\n \tthen\n@@ -1614,16 +1579,13 @@ lm32-*-uclinux*)\n         ;;\n m32r-*-elf*)\n \ttm_file=\"dbxelf.h elfos.h newlib-stdint.h ${tm_file}\"\n-\textra_parts=\"crtinit.o crtfini.o\"\n  \t;;\n m32rle-*-elf*)\n \ttm_file=\"dbxelf.h elfos.h newlib-stdint.h m32r/little.h ${tm_file}\"\n-\textra_parts=\"crtinit.o crtfini.o m32rx/crtinit.o m32rx/crtfini.o\"\n \t;;\n m32r-*-rtems*)\n \ttm_file=\"dbxelf.h elfos.h ${tm_file} m32r/rtems.h rtems.h newlib-stdint.h\"\n \ttmake_file=\"m32r/t-m32r t-rtems\"\n-\textra_parts=\"crtinit.o crtfini.o\"\n  \t;;\n m32r-*-linux*)\n \ttm_file=\"dbxelf.h elfos.h gnu-user.h linux.h glibc-stdint.h ${tm_file} m32r/linux.h\"\n@@ -1673,7 +1635,6 @@ m68k-*-elf* | fido-*-elf*)\n \t\ttmake_file=\"$tmake_file m68k/t-mlibs\"\n \t\t;;\n \tesac\n-\textra_parts=\"crtbegin.o crtend.o\"\n \t;;\n m68k*-*-netbsdelf*)\n \tdefault_m68k_cpu=68020\n@@ -1689,7 +1650,7 @@ m68k*-*-openbsd*)\n \ttm_defines=\"${tm_defines} OBSD_OLD_GAS\"\n \ttm_file=\"${tm_file} openbsd.h openbsd-stdint.h openbsd-libpthread.h m68k/openbsd.h\"\n \textra_options=\"${extra_options} openbsd.opt\"\n-\ttmake_file=\"t-libc-ok t-openbsd m68k/t-openbsd\"\n+\ttmake_file=\"t-openbsd m68k/t-openbsd\"\n \t# we need collect2 until our bug is fixed...\n \tuse_collect2=yes\n \t;;\n@@ -1703,7 +1664,7 @@ m68k-*-uclinux*)\t\t# Motorola m68k/ColdFire running uClinux\n  \ttm_defines=\"${tm_defines} MOTOROLA=1\"\n \ttmake_file=\"m68k/t-floatlib m68k/t-uclinux m68k/t-mlibs\"\n \t;;\n-m68k-*-linux*)\t\t# Motorola m68k's running GNU/Linux\n+m68k-*-linux*)\t\t\t# Motorola m68k's running GNU/Linux\n \t\t\t\t# with ELF format using glibc 2\n \t\t\t\t# aka the GNU/Linux C library 6.\n \tdefault_m68k_cpu=68020\n@@ -1720,7 +1681,6 @@ m68k-*-rtems*)\n \ttmake_file=\"m68k/t-floatlib m68k/t-m68kbare m68k/t-crtstuff t-rtems m68k/t-rtems m68k/t-mlibs\"\n \ttm_file=\"${tm_file} m68k/m68k-none.h m68k/m68kelf.h dbxelf.h elfos.h m68k/m68kemb.h m68k/m68020-elf.h m68k/rtemself.h rtems.h newlib-stdint.h\"\n \ttm_defines=\"${tm_defines} MOTOROLA=1\"\n-\textra_parts=\"crtbegin.o crtend.o\"\n \t;;\n mcore-*-elf)\n \ttm_file=\"dbxelf.h elfos.h newlib-stdint.h ${tm_file} mcore/mcore-elf.h\"\n@@ -1730,7 +1690,6 @@ mcore-*-elf)\n mep-*-*)\n \ttm_file=\"dbxelf.h elfos.h ${tm_file}\"\n \ttmake_file=mep/t-mep\n-\textra_parts=\"crtbegin.o crtend.o\"\n \tc_target_objs=\"mep-pragma.o\"\n \tcxx_target_objs=\"mep-pragma.o\"\n \tif test -d \"${srcdir}/../newlib/libc/include\" &&\n@@ -1744,7 +1703,6 @@ microblaze*-linux*)\n \tc_target_objs=\"${c_target_objs} microblaze-c.o\"\n \tcxx_target_objs=\"${cxx_target_objs} microblaze-c.o\"\n \ttmake_file=\"${tmake_file} t-linux microblaze/t-microblaze\"\n-        extra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o crtbeginT.o\"\n \t;;\n microblaze*-*-*)\n         tm_file=\"${tm_file} dbxelf.h\"\n@@ -1794,7 +1752,6 @@ mips64*-*-linux* | mipsisa64*-*-linux*)\n \t\t\ttm_defines=\"${tm_defines} MIPS_ISA_DEFAULT=65\"\n \t\t\t;;\n \tesac\n-\textra_parts=\"$extra_parts crtfastmath.o\"\n \tgnu_ld=yes\n \tgas=yes\n \ttest x$with_llsc != x || with_llsc=yes\n@@ -1813,7 +1770,6 @@ mips*-*-linux*)\t\t\t\t# Linux MIPS, either endian.\n         mipsisa32*)\n \t\ttm_defines=\"${tm_defines} MIPS_ISA_DEFAULT=32\"\n         esac\n-\textra_parts=\"$extra_parts crtfastmath.o\"\n \ttest x$with_llsc != x || with_llsc=yes\n \t;;\n mips*-*-openbsd*)\n@@ -2113,7 +2069,6 @@ powerpc-*-lynxos*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h rs6000/sysv4.h rs6000/lynx.h lynx.h\"\n \ttmake_file=\"t-lynx rs6000/t-lynx\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt lynx.opt\"\n-\textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n \tthread_file=lynx\n \tgnu_ld=yes\n \tgas=yes\n@@ -2205,21 +2160,18 @@ s390x-ibm-tpf*)\n         md_file=s390/s390.md\n         extra_modes=s390/s390-modes.def\n         out_file=s390/s390.c\n-        extra_parts=\"crtbeginS.o crtendS.o\"\n         thread_file='tpf'\n \textra_options=\"${extra_options} s390/tpf.opt\"\n \t;;\n score-*-elf)\n \tgas=yes\n \tgnu_ld=yes\n         tm_file=\"dbxelf.h elfos.h score/elf.h score/score.h newlib-stdint.h\"\n-\textra_parts=\"crti.o crtn.o crtbegin.o crtend.o\"\n-        tmake_file=\"${tmake_file} score/t-score-elf\"\n         ;;\n sh-*-elf* | sh[12346l]*-*-elf* | \\\n   sh-*-linux* | sh[2346lbe]*-*-linux* | \\\n   sh-*-netbsdelf* | shl*-*-netbsdelf* | sh5-*-netbsd* | sh5l*-*-netbsd* | \\\n-   sh64-*-netbsd* | sh64l*-*-netbsd*)\n+  sh64-*-netbsd* | sh64l*-*-netbsd*)\n \ttmake_file=\"${tmake_file} sh/t-sh sh/t-elf\"\n \tif test x${with_endian} = x; then\n \t\tcase ${target} in\n@@ -2260,7 +2212,6 @@ sh-*-elf* | sh[12346l]*-*-elf* | \\\n                         fi\n \t\t\ttm_file=\"${tm_file} sh/embed-elf.h\"\n \t\t\ttm_file=\"${tm_file} sh/superh.h\"\n-\t\t\ttmake_file=\"${tmake_file} sh/t-superh\"\n \t\t\textra_options=\"${extra_options} sh/superh.opt\" ;;\n \t*)\t\tif test x$with_newlib = xyes \\\n \t\t\t   && test x$with_libgloss = xyes; then\n@@ -2281,7 +2232,7 @@ sh-*-elf* | sh[12346l]*-*-elf* | \\\n                 tmake_file=\"${tmake_file} sh/t-netbsd\"\n \t\t;;\n \tsh64*-*-linux*)\n-\t\ttmake_file=\"${tmake_file} sh/t-sh64 sh/t-linux64\"\n+\t\ttmake_file=\"${tmake_file} sh/t-sh64\"\n \t\ttm_file=\"${tm_file} sh/sh64.h\"\n \t\textra_headers=\"shmedia.h ushmedia.h sshmedia.h\"\n \t\t;;\n@@ -2395,11 +2346,11 @@ sh-*-elf* | sh[12346l]*-*-elf* | \\\n \ttmake_file=\"$tmake_file t-sysroot-suffix\"\n \t;;\n sh-*-rtems*)\n-\ttmake_file=\"sh/t-sh sh/t-elf t-rtems sh/t-rtems\"\n+\ttmake_file=\"sh/t-sh t-rtems sh/t-rtems\"\n \ttm_file=\"${tm_file} dbxelf.h elfos.h sh/elf.h sh/embed-elf.h sh/rtemself.h rtems.h newlib-stdint.h\"\n \t;;\n sh-wrs-vxworks)\n-\ttmake_file=\"$tmake_file sh/t-sh sh/t-elf sh/t-vxworks\"\n+\ttmake_file=\"$tmake_file sh/t-sh sh/t-vxworks\"\n \ttm_file=\"${tm_file} elfos.h sh/elf.h sh/embed-elf.h vx-common.h vxworks.h sh/vxworks.h\"\n \t;;\n sparc-*-elf*)\n@@ -2440,7 +2391,6 @@ sparc-*-linux*)\n \telse\n \t\ttm_file=\"${tm_file} sparc/linux.h\"\n \tfi\n-\textra_parts=\"${extra_parts} crtfastmath.o\"\n \t;;\n sparc-*-netbsdelf*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h sparc/sysv4.h netbsd.h netbsd-elf.h sparc/netbsd-elf.h\"\n@@ -2478,7 +2428,6 @@ sparc64-*-linux*)\n \ttm_file=\"sparc/biarch64.h ${tm_file} dbxelf.h elfos.h sparc/sysv4.h gnu-user.h linux.h glibc-stdint.h sparc/default-64.h sparc/linux64.h\"\n \textra_options=\"${extra_options} sparc/long-double-switch.opt\"\n \ttmake_file=\"${tmake_file} sparc/t-sparc sparc/t-linux64\"\n-\textra_parts=\"${extra_parts} crtfastmath.o\"\n \t;;\n sparc64-*-freebsd*|ultrasparc-*-freebsd*)\n \ttm_file=\"${tm_file} ${fbsd_tm_file} dbxelf.h elfos.h sparc/sysv4.h sparc/freebsd.h\"\n@@ -2488,7 +2437,6 @@ sparc64-*-freebsd*|ultrasparc-*-freebsd*)\n \t\tx) with_cpu=ultrasparc ;;\n \t\t*) echo \"$with_cpu not supported for freebsd target\"; exit 1 ;;\n \tesac\n-\textra_parts=\"${extra_parts} crtfastmath.o\"\n \ttmake_file=\"${tmake_file} sparc/t-sparc\"\n \t;;\n sparc64-*-netbsd*)\n@@ -2582,7 +2530,6 @@ xstormy16-*-elf)\n \tout_file=stormy16/stormy16.c\n \textra_options=stormy16/stormy16.opt\n \ttmake_file=\"stormy16/t-stormy16\"\n-\textra_parts=\"crtbegin.o crtend.o\"\n \t;;\n xtensa*-*-elf*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h newlib-stdint.h xtensa/elf.h\"\n@@ -2591,12 +2538,11 @@ xtensa*-*-elf*)\n \t;;\n xtensa*-*-linux*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h gnu-user.h linux.h glibc-stdint.h xtensa/linux.h\"\n-\ttmake_file=\"${tmake_file} xtensa/t-xtensa xtensa/t-linux\"\n+\ttmake_file=\"${tmake_file} xtensa/t-xtensa\"\n \t;;\n am33_2.0-*-linux*)\n \ttm_file=\"mn10300/mn10300.h dbxelf.h elfos.h gnu-user.h linux.h glibc-stdint.h mn10300/linux.h\"\n \tgas=yes gnu_ld=yes\n-\textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o\"\n \tuse_collect2=no\n \t;;\n m32c-*-rtems*)"}, {"sha": "d6850053597132a8eed5db685100dca53dcb79a2", "filename": "gcc/config/alpha/t-vms", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Falpha%2Ft-vms", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Falpha%2Ft-vms", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Ft-vms?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -19,17 +19,6 @@\n \n LIB2FUNCS_EXTRA = $(srcdir)/config/alpha/vms-gcc_shell_handler.c\n \n-EXTRA_PARTS = vms-dwarf2.o vms-dwarf2eh.o $(VMS_EXTRA_PARTS) \\\n-  crtbegin.o crtbeginS.o crtend.o crtendS.o\n-\n-# This object must be linked with in order to make the executable debuggable.\n-# vms-ld handles it automatically when passed -g.\n-$(T)vms-dwarf2.o : $(srcdir)/config/alpha/vms-dwarf2.asm\n-\t$(GCC_FOR_TARGET) -c -x assembler $< -o $@\n-\n-$(T)vms-dwarf2eh.o : $(srcdir)/config/alpha/vms-dwarf2eh.asm\n-\t$(GCC_FOR_TARGET) -c -x assembler $< -o $@\n-\n MULTILIB_OPTIONS = mcpu=ev6\n MULTILIB_DIRNAMES = ev6\n MULTILIB_OSDIRNAMES = ev6"}, {"sha": "bfcf6ffd9394e9bf097793ad6ac95b0ad5c4e875", "filename": "gcc/config/arm/t-arm-elf", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Farm%2Ft-arm-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Farm%2Ft-arm-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm-elf?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -104,25 +104,10 @@ MULTILIB_EXCEPTIONS    += *mthumb/*mfloat-abi=hard*\n # MULTILIB_MATCHES    += mcpu?arm7=mcpu?arm610\n # MULTILIB_MATCHES    += mcpu?arm7=mcpu?arm620\n \n-EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crti.o crtn.o\n-\n-# If EXTRA_MULTILIB_PARTS is not defined above then define EXTRA_PARTS here\n-# EXTRA_PARTS = crtbegin.o crtend.o crti.o crtn.o\n-\n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib\n \n # Currently there is a bug somewhere in GCC's alias analysis\n # or scheduling code that is breaking _fpmul_parts in fp-bit.c.\n # Disabling function inlining is a workaround for this problem.\n TARGET_LIBGCC2_CFLAGS = -fno-inline\n-\n-# Assemble startup files.\n-$(T)crti.o: $(srcdir)/config/arm/crti.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crti.o -x assembler-with-cpp $(srcdir)/config/arm/crti.asm\n-\n-$(T)crtn.o: $(srcdir)/config/arm/crtn.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/arm/crtn.asm\n-"}, {"sha": "a0c5110f0c0afab0480d653ee9e8d03ec540df49", "filename": "gcc/config/arm/t-linux", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Farm%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Farm%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-linux?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -28,7 +28,5 @@ LIB1ASMFUNCS = _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_lnx _clzsi2 _clzdi2 \\\n # MULTILIB_OPTIONS = mfloat-abi=hard/mfloat-abi=soft\n # MULTILIB_DIRNAMES = hard-float soft-float\n \n-# EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o\n-\n # LIBGCC = stmp-multilib\n # INSTALL_LIBGCC = install-multilib"}, {"sha": "fed979e980b942cd24aef208b94259666e64250f", "filename": "gcc/config/arm/t-linux-eabi", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Farm%2Ft-linux-eabi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Farm%2Ft-linux-eabi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-linux-eabi?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2005, 2009, 2010 Free Software Foundation, Inc.\n+# Copyright (C) 2005, 2009, 2010, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -31,9 +31,5 @@ MULTILIB_DIRNAMES\t=\n # Use a version of div0 which raises SIGFPE, and a special __clear_cache.\n LIB1ASMFUNCS := $(filter-out _dvmd_tls,$(LIB1ASMFUNCS)) _dvmd_lnx _clear_cache\n \n-# Multilib the standard Linux files.  Don't include crti.o or crtn.o,\n-# which are provided by glibc.\n-EXTRA_MULTILIB_PARTS=crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o\n-\n LIB2FUNCS_STATIC_EXTRA += $(srcdir)/config/arm/linux-atomic.c\n LIB2FUNCS_STATIC_EXTRA += $(srcdir)/config/arm/linux-atomic-64bit.c"}, {"sha": "95680031e54a742842fa7508ec0c2f972dad124e", "filename": "gcc/config/arm/t-strongarm-elf", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Farm%2Ft-strongarm-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Farm%2Ft-strongarm-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-strongarm-elf?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -23,7 +23,6 @@ MULTILIB_OPTIONS     = mlittle-endian/mbig-endian mfloat-abi=hard/mfloat-abi=sof\n MULTILIB_DIRNAMES    = le be fpu soft\n MULTILIB_EXCEPTIONS  =\n MULTILIB_MATCHES     = mbig-endian=mbe mlittle-endian=mle\n-EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crti.o crtn.o\n \n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib\n@@ -32,12 +31,3 @@ INSTALL_LIBGCC = install-multilib\n # or scheduling code that is breaking _fpmul_parts in fp-bit.c.\n # Disabling function inlining is a workaround for this problem.\n TARGET_LIBGCC2_CFLAGS = -fno-inline\n-\n-# Assemble startup files.\n-$(T)crti.o: $(srcdir)/config/arm/crti.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crti.o -x assembler-with-cpp $(srcdir)/config/arm/crti.asm\n-\n-$(T)crtn.o: $(srcdir)/config/arm/crtn.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/arm/crtn.asm"}, {"sha": "cf716147849b391db176b06d8b1ccec4ad5cacf8", "filename": "gcc/config/arm/t-symbian", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Farm%2Ft-symbian", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Farm%2Ft-symbian", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-symbian?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -40,6 +40,3 @@ LIB2FUNCS_STATIC_EXTRA = $(srcdir)/config/arm/fp16.c\n # enabled, so there are no separate thumb-mode libraries.\n MULTILIB_OPTIONS     = mfloat-abi=softfp\n MULTILIB_DIRNAMES    = softfp\n-\n-# Symbian OS provides its own startup code.\n-EXTRA_MULTILIB_PARTS="}, {"sha": "bb95ab4139e6d837fe20bf3e7383b95d17d03c22", "filename": "gcc/config/bfin/t-bfin", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fbfin%2Ft-bfin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fbfin%2Ft-bfin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Ft-bfin?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -21,14 +21,3 @@\n LIB1ASMSRC = bfin/lib1funcs.asm\n LIB1ASMFUNCS = _divsi3 _udivsi3 _umodsi3 _modsi3 _muldi3 _umulsi3_highpart\n LIB1ASMFUNCS += _smulsi3_highpart\n-\n-EXTRA_PARTS = crtbegin.o crtend.o crti.o crtn.o\n-\n-# Assemble startup files.\n-$(T)crti.o: $(srcdir)/config/bfin/crti.s $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crti.o -x assembler-with-cpp $(srcdir)/config/bfin/crti.s\n-\n-$(T)crtn.o: $(srcdir)/config/bfin/crtn.s $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/bfin/crtn.s"}, {"sha": "fcf76c4ddfef307feb9ec8e4907756f77243eae1", "filename": "gcc/config/bfin/t-bfin-elf", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fbfin%2Ft-bfin-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fbfin%2Ft-bfin-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Ft-bfin-elf?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -22,7 +22,6 @@ LIB1ASMSRC = bfin/lib1funcs.asm\n LIB1ASMFUNCS = _divsi3 _udivsi3 _umodsi3 _modsi3 _muldi3 _umulsi3_highpart\n LIB1ASMFUNCS += _smulsi3_highpart\n \n-CRTSTUFF_T_CFLAGS = -fpic\n TARGET_LIBGCC2_CFLAGS = -fpic\n \n MULTILIB_OPTIONS=mcpu=bf532-none\n@@ -54,19 +53,3 @@ MULTILIB_EXCEPTIONS=mleaf-id-shared-library*\n MULTILIB_EXCEPTIONS+=mcpu=bf532-none/mleaf-id-shared-library*\n MULTILIB_EXCEPTIONS+=*mfdpic/mleaf-id-shared-library*\n MULTILIB_EXCEPTIONS+=*msep-data/mleaf-id-shared-library*\n-\n-# Assemble startup files.\n-$(T)crti.o: $(srcdir)/config/bfin/crti.s $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crti.o -x assembler-with-cpp $(srcdir)/config/bfin/crti.s\n-\n-$(T)crtn.o: $(srcdir)/config/bfin/crtn.s $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/bfin/crtn.s\n-\n-$(T)crtlibid.o: $(srcdir)/config/bfin/crtlibid.s $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crtlibid.o -x assembler-with-cpp \\\n-\t$(srcdir)/config/bfin/crtlibid.s\n-\n-EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crtbeginS.o crtendS.o crti.o crtn.o crtlibid.o"}, {"sha": "a83f9f2da83a0209d45c3d6efab7e9fbad542af3", "filename": "gcc/config/bfin/t-bfin-linux", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fbfin%2Ft-bfin-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fbfin%2Ft-bfin-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Ft-bfin-linux?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -22,7 +22,6 @@ LIB1ASMSRC = bfin/lib1funcs.asm\n LIB1ASMFUNCS = _divsi3 _udivsi3 _umodsi3 _modsi3 _muldi3 _umulsi3_highpart\n LIB1ASMFUNCS += _smulsi3_highpart\n \n-CRTSTUFF_T_CFLAGS = -fpic\n TARGET_LIBGCC2_CFLAGS = -fpic\n \n MULTILIB_OPTIONS=mcpu=bf532-none\n@@ -49,8 +48,6 @@ MULTILIB_MATCHES+=mcpu?bf532-none=mcpu?bf549m-none\n MULTILIB_MATCHES+=mcpu?bf532-none=mcpu?bf561-none\n MULTILIB_MATCHES+=mcpu?bf532-none=mcpu?bf592-none\n \n-EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crtbeginS.o crtendS.o\n-\n # This rule uses MULTILIB_MATCHES to generate a definition of\n # SYSROOT_SUFFIX_SPEC.\n linux-sysroot-suffix.h: $(srcdir)/config/bfin/print-sysroot-suffix.sh"}, {"sha": "1be0796987b614b407598c0d7910e20fa88d7e52", "filename": "gcc/config/bfin/t-bfin-uclinux", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fbfin%2Ft-bfin-uclinux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fbfin%2Ft-bfin-uclinux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Ft-bfin-uclinux?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -22,7 +22,6 @@ LIB1ASMSRC = bfin/lib1funcs.asm\n LIB1ASMFUNCS = _divsi3 _udivsi3 _umodsi3 _modsi3 _muldi3 _umulsi3_highpart\n LIB1ASMFUNCS += _smulsi3_highpart\n \n-CRTSTUFF_T_CFLAGS = -fpic\n TARGET_LIBGCC2_CFLAGS = -fpic\n \n MULTILIB_OPTIONS=mcpu=bf532-none\n@@ -53,11 +52,3 @@ MULTILIB_MATCHES+=mcpu?bf532-none=mcpu?bf592-none\n MULTILIB_EXCEPTIONS=mleaf-id-shared-library*\n MULTILIB_EXCEPTIONS+=mcpu=bf532-none/mleaf-id-shared-library*\n MULTILIB_EXCEPTIONS+=*msep-data/mleaf-id-shared-library*\n-\n-# Assemble startup files.\n-$(T)crtlibid.o: $(srcdir)/config/bfin/crtlibid.s $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crtlibid.o -x assembler-with-cpp \\\n-\t$(srcdir)/config/bfin/crtlibid.s\n-\n-EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crtbeginS.o crtendS.o crtlibid.o"}, {"sha": "b3b4b850fe8e58049351829bdb2ca8839cc46de5", "filename": "gcc/config/c6x/t-c6x-elf", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fc6x%2Ft-c6x-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fc6x%2Ft-c6x-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Ft-c6x-elf?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -46,20 +46,5 @@ MULTILIB_DIRNAMES    = be c674x\n MULTILIB_EXCEPTIONS  =\n MULTILIB_MATCHES     =\n \n-# Assemble startup files.\n-$(T)crti.o: $(srcdir)/config/c6x/crti.s $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crti.o $(CRTSTUFF_T_CFLAGS) -x assembler-with-cpp \\\n-\t$(srcdir)/config/c6x/crti.s\n-\n-$(T)crtn.o: $(srcdir)/config/c6x/crtn.s $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crtn.o $(CRTSTUFF_T_CFLAGS) -x assembler-with-cpp \\\n-\t$(srcdir)/config/c6x/crtn.s\n-\n-EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crtbeginS.o crtendS.o crti.o crtn.o\n-\n # Avoid failures when the user's GOT becomes too large.\n-CRTSTUFF_T_CFLAGS = -msdata=none\n-CRTSTUFF_T_CFLAGS_S = -msdata=none\n TARGET_LIBGCC2_CFLAGS = -msdata=none"}, {"sha": "c904f8f4d7c68d00e0c3b1ea76eb77d2fba3571c", "filename": "gcc/config/c6x/t-c6x-uclinux", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fc6x%2Ft-c6x-uclinux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fc6x%2Ft-c6x-uclinux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Ft-c6x-uclinux?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -2,6 +2,4 @@ MULTILIB_OSDIRNAMES    = march.c674x=!c674x\n MULTILIB_OSDIRNAMES   += mbig-endian=!be\n MULTILIB_OSDIRNAMES   += mbig-endian/march.c674x=!be/c674x\n \n-CRTSTUFF_T_CFLAGS = -fPIC -msdata=none\n-CRTSTUFF_T_CFLAGS_S = -fPIC -msdata=none\n TARGET_LIBGCC2_CFLAGS = -fPIC -msdata=none"}, {"sha": "29ab9beeb9489fde971f5dd0d727b7b28950df93", "filename": "gcc/config/cris/t-elfmulti", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fcris%2Ft-elfmulti", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fcris%2Ft-elfmulti", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Ft-elfmulti?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -31,4 +31,3 @@ MULTILIB_MATCHES = \\\n MULTILIB_EXTRA_OPTS = mbest-lib-options\n INSTALL_LIBGCC = install-multilib\n LIBGCC = stmp-multilib\n-CRTSTUFF_T_CFLAGS = -moverride-best-lib-options"}, {"sha": "6505c37e1d1f84282c8247117073d60e58598bda", "filename": "gcc/config/cris/t-linux", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fcris%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fcris%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Ft-linux?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,5 +1,4 @@\n TARGET_LIBGCC2_CFLAGS += -fPIC\n-CRTSTUFF_T_CFLAGS_S = $(TARGET_LIBGCC2_CFLAGS)\n \n # We *know* we have a limits.h in the glibc library, with extra\n # definitions needed for e.g. libgfortran."}, {"sha": "75009d4eb7054edbd478373550ae7e546dae1033", "filename": "gcc/config/fr30/t-fr30", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Ffr30%2Ft-fr30", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Ffr30%2Ft-fr30", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ft-fr30?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -19,13 +19,6 @@\n LIB1ASMSRC    = fr30/lib1funcs.asm\n LIB1ASMFUNCS  = _udivsi3 _divsi3 _umodsi3 _modsi3\n \n-# Assemble startup files.\n-$(T)crti.o: $(srcdir)/config/fr30/crti.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) -c -o $(T)crti.o -x assembler $(srcdir)/config/fr30/crti.asm\n-\n-$(T)crtn.o: $(srcdir)/config/fr30/crtn.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) -c -o $(T)crtn.o -x assembler $(srcdir)/config/fr30/crtn.asm\n-\n # If any special flags are necessary when building libgcc2 put them here.\n #\n # TARGET_LIBGCC2_CFLAGS"}, {"sha": "03f3cd8cde1c9edaf352db4afd7eeadad5dc1c8d", "filename": "gcc/config/frv/t-frv", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Ffrv%2Ft-frv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Ffrv%2Ft-frv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ft-frv?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -57,25 +57,6 @@ ulltof.c: $(srcdir)/config/frv/ulltof.c\n ulltod.c: $(srcdir)/config/frv/ulltod.c\n \t$(LN_S) $(srcdir)/config/frv/ulltod.c .\n \n-# Build frvbegin.o and frvend.o\n-EXTRA_MULTILIB_PARTS=frvbegin.o frvend.o\n-\n-# Compile two additional files that are linked with every program\n-# linked using GCC on systems using COFF or ELF, for the sake of C++\n-# constructors.\n-\n-FRVSTUFF_CFLAGS = $(TARGET_LIBGCC2_CFLAGS)\n-\n-$(T)frvbegin$(objext): $(srcdir)/config/frv/frvbegin.c $(GCC_PASSES) \\\n-  $(CONFIG_H) defaults.h $(srcdir)/../libgcc/unwind-dw2-fde.h gbl-ctors.h\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) $(FRVSTUFF_CFLAGS) \\\n-\t  -c $(srcdir)/config/frv/frvbegin.c -o $(T)frvbegin$(objext)\n-\n-$(T)frvend$(objext): $(srcdir)/config/frv/frvend.c $(GCC_PASSES) \\\n-  $(CONFIG_H) defaults.h $(srcdir)/../libgcc/unwind-dw2-fde.h gbl-ctors.h\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) $(FRVSTUFF_CFLAGS) \\\n-\t  -c $(srcdir)/config/frv/frvend.c -o $(T)frvend$(objext)\n-\n # Enable the following if multilibs are needed.\n # See gcc/genmultilib, gcc/gcc.texi and gcc/tm.texi for a\n # description of the options and their values."}, {"sha": "10800e9bdc1ac72a2a32e68083df3ce06b1dbc2d", "filename": "gcc/config/frv/t-linux", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Ffrv%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Ffrv%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ft-linux?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -23,8 +23,4 @@ MULTILIB_MATCHES=\n MULTILIB_EXCEPTIONS=\n MULTILIB_EXTRA_OPTS=\n \n-# We don't use frvbegin.o or frvend.o.\n-EXTRA_MULTILIB_PARTS =\n-\n-CRTSTUFF_T_CFLAGS = -fPIC\n TARGET_LIBGCC2_CFLAGS = -fPIC"}, {"sha": "c1f1dac32c79d7336dded6b6092dd4e072eca58f", "filename": "gcc/config/h8300/t-elf", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/gcc%2Fconfig%2Fh8300%2Ft-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/gcc%2Fconfig%2Fh8300%2Ft-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Ft-elf?ref=29026f66b08e17dc93d995fb3d48d2c0f7c51f26", "patch": "@@ -1,6 +0,0 @@\n-EXTRA_MULTILIB_PARTS= crti.o crtn.o crtbegin.o crtend.o\n-\n-$(T)crti.o: $(srcdir)/config/h8300/crti.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $(T)crti.o -x assembler-with-cpp $(srcdir)/config/h8300/crti.asm\n-$(T)crtn.o: $(srcdir)/config/h8300/crtn.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/h8300/crtn.asm"}, {"sha": "c14dd9411ae436d4e977f64795411539a78fa363", "filename": "gcc/config/i386/t-crtstuff", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/gcc%2Fconfig%2Fi386%2Ft-crtstuff", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/gcc%2Fconfig%2Fi386%2Ft-crtstuff", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-crtstuff?ref=29026f66b08e17dc93d995fb3d48d2c0f7c51f26", "patch": "@@ -1,7 +0,0 @@\n-# The pushl in CTOR initialization interferes with frame pointer elimination.\n-# crtend*.o cannot be compiled without -fno-asynchronous-unwind-tables,\n-# because then __FRAME_END__ might not be the last thing in .eh_frame\n-# section.  -fno-asynchronous-unwind-tables is off by default for i386\n-# and is on by default for x86-64.  We turn it off for both i386 and\n-# x86-64.\n-CRTSTUFF_T_CFLAGS += -fno-omit-frame-pointer -fno-asynchronous-unwind-tables"}, {"sha": "9560d905521130f1d8bb8df4620203ac6e2f817f", "filename": "gcc/config/i386/t-i386elf", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/gcc%2Fconfig%2Fi386%2Ft-i386elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/gcc%2Fconfig%2Fi386%2Ft-i386elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-i386elf?ref=29026f66b08e17dc93d995fb3d48d2c0f7c51f26", "patch": "@@ -1,4 +0,0 @@\n-# For svr4 we build crtbegin.o and crtend.o which serve to add begin and\n-# end labels to the .ctors and .dtors section when we link using gcc.\n-\n-EXTRA_PARTS=crtbegin.o crtend.o"}, {"sha": "4db41ea51eeaedbd9bec6175b9e99864085e480b", "filename": "gcc/config/i386/t-linux64", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fi386%2Ft-linux64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fi386%2Ft-linux64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-linux64?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -40,7 +40,3 @@ MULTILIB_OSDIRNAMES+= mx32=../libx32\n \n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib\n-\n-EXTRA_MULTILIB_PARTS=crtbegin.o crtend.o crtbeginS.o crtendS.o \\\n-\t\t     crtbeginT.o crtprec32.o crtprec64.o crtprec80.o \\\n-\t\t     crtfastmath.o"}, {"sha": "b72c00d04a6a01673d179fbe1aa9c0dc44c5d95d", "filename": "gcc/config/i386/t-nto", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fi386%2Ft-nto", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fi386%2Ft-nto", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-nto?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,4 +1 @@\n-CRTSTUFF_T_CFLAGS = -fno-omit-frame-pointer -fPIC\n TARGET_LIBGCC2_CFLAGS = -fPIC -fexceptions\n-\n-EXTRA_PARTS = crtbegin.o"}, {"sha": "a143d43d56c3feded544978a0c2a5b3c708ad907", "filename": "gcc/config/ia64/t-ia64", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fia64%2Ft-ia64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fia64%2Ft-ia64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Ft-ia64?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -38,9 +38,6 @@ LIB1ASMFUNCS  = __divxf3 __divdf3 __divsf3 \\\n # to support the Intel assembler.\n #LIBGCC2_DEBUG_CFLAGS = -g1 -P\n \n-# Effectively disable the crtbegin/end rules using crtstuff.c\n-T = disable\n-\n ia64-c.o: $(srcdir)/config/ia64/ia64-c.c $(CONFIG_H) $(SYSTEM_H) \\\n     coretypes.h $(TM_H) $(TREE_H) $(CPPLIB_H) $(C_COMMON_H) $(C_PRAGMA_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\"}, {"sha": "e834aea1ab029e620c08116f32eb44e5f76f55ad", "filename": "gcc/config/ia64/t-vms", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/gcc%2Fconfig%2Fia64%2Ft-vms", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/gcc%2Fconfig%2Fia64%2Ft-vms", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Ft-vms?ref=29026f66b08e17dc93d995fb3d48d2c0f7c51f26", "patch": "@@ -1,33 +0,0 @@\n-# Copyright (C) 2009, 2011\n-# Free Software Foundation, Inc.\n-#\n-# This file is part of GCC.\n-#\n-# GCC is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 3, or (at your option)\n-# any later version.\n-#\n-# GCC is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-\n-# Enable the crtbegin/end rules disabled in t-ia64\n-T =\n-\n-# VMS_EXTRA_PARTS is defined in x-vms and represent object files that\n-# are only needed for VMS targets, but can only be compiled on a VMS host\n-# (because they need DEC C).\n-EXTRA_PARTS = $(VMS_EXTRA_PARTS) crtbegin.o crtbeginS.o crtend.o crtendS.o crtinitS.o\n-\n-CRTSTUFF_T_CFLAGS = -O0\n-CRTSTUFF_T_CFLAGS_S = -O0\n-\n-$(T)crtinitS.o: $(srcdir)/config/ia64/vms-crtinit.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) -I. -c -o $(T)crtinitS.o -x assembler-with-cpp \\\n-\t\t$(srcdir)/config/ia64/vms-crtinit.asm"}, {"sha": "b11f34d674ff60d3dd1adcb3aceeff9f6ae0300f", "filename": "gcc/config/m32c/t-m32c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fm32c%2Ft-m32c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fm32c%2Ft-m32c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Ft-m32c?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -53,5 +53,3 @@ m32c-pragma.o: $(srcdir)/config/m32c/m32c-pragma.c $(RTL_H) $(TREE_H) $(CONFIG_H\n MULTILIB_OPTIONS = mcpu=m32cm\n MULTILIB_DIRNAMES = m32cm\n MULTILIB_MATCHES = mcpu?m32cm=mcpu?m32c mcpu?r8c=mcpu?m16c\n-\n-EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o"}, {"sha": "487c0198786789c5de59ee87146f9c6333b42966", "filename": "gcc/config/m32r/t-linux", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fm32r%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fm32r%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Ft-linux?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -24,15 +24,6 @@ CROSS_LIBGCC1 =\n \n TARGET_LIBGCC2_CFLAGS = -G 0 -fPIC\n \n-# We need to use -fpic when we are using gcc to compile the routines in\n-# initfini.c.  This is only really needed when we are going to use gcc/g++\n-# to produce a shared library, but since we don't know ahead of time when\n-# we will be doing that, we just always use -fpic when compiling the\n-# routines in initfini.c.\n-# -fpic currently isn't supported for the m32r.\n-\n-CRTSTUFF_T_CFLAGS_S = -fPIC\n-\n # Don't install \"assert.h\" in gcc. We use the one in glibc.\n INSTALL_ASSERT_H =\n  "}, {"sha": "81f0247694e34a65f7ab0869052184a03cd4e258", "filename": "gcc/config/m32r/t-m32r", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fm32r%2Ft-m32r", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fm32r%2Ft-m32r", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Ft-m32r?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -22,35 +22,6 @@\n \n TARGET_LIBGCC2_CFLAGS = -G 0\n \n-# We need to use -fpic when we are using gcc to compile the routines in\n-# initfini.c.  This is only really needed when we are going to use gcc/g++\n-# to produce a shared library, but since we don't know ahead of time when\n-# we will be doing that, we just always use -fpic when compiling the\n-# routines in initfini.c.\n-# -fpic currently isn't supported for the m32r.\n-\n-CRTSTUFF_T_CFLAGS =\n-\n-# .init/.fini section routines\n-\n-$(T)crtinit.o: $(srcdir)/config/m32r/initfini.c $(GCC_PASSES) $(CONFIG_H)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) \\\n-\t$(CRTSTUFF_T_CFLAGS) $(INCLUDES) -DCRT_INIT \\\n-\t-finhibit-size-directive -fno-inline-functions -g0 \\\n-\t-mmodel=medium -c $(srcdir)/config/m32r/initfini.c \\\n-\t-o $(T)crtinit.o \n-\n-$(T)crtfini.o: $(srcdir)/config/m32r/initfini.c $(GCC_PASSES) $(CONFIG_H)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) \\\n-\t$(CRTSTUFF_T_CFLAGS) $(INCLUDES) -DCRT_FINI \\\n-\t-finhibit-size-directive -fno-inline-functions -g0 \\\n-\t-mmodel=medium -c $(srcdir)/config/m32r/initfini.c \\\n-\t-o $(T)crtfini.o \n-m32rx:\n-\tmkdir $@\n-m32r2:\n-\tmkdir $@\n-\n # -mmodel={small,medium} requires separate libraries.\n # We don't build libraries for the large model, instead we use the medium\n # libraries.  The only difference is that the large model can handle jumps\n@@ -65,7 +36,5 @@ MULTILIB_MATCHES = mmodel?medium=mmodel?large\n # This is important for objects referenced in system header files.\n MULTILIB_EXTRA_OPTS = msdata=sdata\n \n-EXTRA_MULTILIB_PARTS = crtinit.o crtfini.o\n-\n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib"}, {"sha": "a8bdb502d6672d40253bd27a55bf769cfde3e537", "filename": "gcc/config/m68k/t-crtstuff", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/gcc%2Fconfig%2Fm68k%2Ft-crtstuff", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/gcc%2Fconfig%2Fm68k%2Ft-crtstuff", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ft-crtstuff?ref=29026f66b08e17dc93d995fb3d48d2c0f7c51f26", "patch": "@@ -1,10 +0,0 @@\n-EXTRA_MULTILIB_PARTS=crtbegin.o crtend.o crti.o crtn.o\n-\n-# Add flags here as required.\n-CRTSTUFF_T_CFLAGS =\n-\n-# Assemble startup files.\n-$(T)crti.o: $(srcdir)/config/m68k/crti.s $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $(T)crti.o $(srcdir)/config/m68k/crti.s\n-$(T)crtn.o: $(srcdir)/config/m68k/crtn.s $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $(T)crtn.o $(srcdir)/config/m68k/crtn.s"}, {"sha": "3fa29474693a7713398590dbee509344b5797382", "filename": "gcc/config/m68k/t-linux", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fm68k%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fm68k%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ft-linux?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2008, 2010 Free Software Foundation, Inc.\n+# Copyright (C) 2008, 2010, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -16,8 +16,6 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-EXTRA_MULTILIB_PARTS=crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o\n-\n # Only include multilibs for 680x0 and ColdFire CPUs with an MMU.\n M68K_MLIB_CPU += && ((CPU ~ \"^m680\") || (CPU ~ \"^mcf\")) && (FLAGS ~ \"FL_MMU\")\n "}, {"sha": "bea01dc4f498778149c5ab12954ea44e1f7502f8", "filename": "gcc/config/m68k/t-m68kelf", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/gcc%2Fconfig%2Fm68k%2Ft-m68kelf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/gcc%2Fconfig%2Fm68k%2Ft-m68kelf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ft-m68kelf?ref=29026f66b08e17dc93d995fb3d48d2c0f7c51f26", "patch": "@@ -1,4 +0,0 @@\n-# from ../t-svr4\n-EXTRA_MULTILIB_PARTS=crtbegin.o crtend.o\n-# no pic for now\n-#CRTSTUFF_T_CFLAGS=-fpic"}, {"sha": "6994359dcce9bebde7fa6a3a0f9a370d9ca60c5e", "filename": "gcc/config/m68k/t-uclinux", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fm68k%2Ft-uclinux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fm68k%2Ft-uclinux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ft-uclinux?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2003, 2005, 2007, 2008 Free Software Foundation, Inc.\n+# Copyright (C) 2003, 2005, 2007, 2008, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -16,9 +16,6 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-# crti and crtn are provided by uClibc.\n-EXTRA_MULTILIB_PARTS=crtbegin.o crtend.o\n-\n # Include multilibs for CPUs without an MMU or with FL_UCLINUX\n M68K_MLIB_CPU += && (!match(FLAGS, \"FL_MMU\") || match(FLAGS, \"FL_UCLINUX\"))\n "}, {"sha": "9c84d850f20270428b236ab4df0bddc750892aab", "filename": "gcc/config/mcore/t-mcore", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fmcore%2Ft-mcore", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fmcore%2Ft-mcore", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Ft-mcore?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -19,15 +19,6 @@\n LIB1ASMSRC    = mcore/lib1.asm\n LIB1ASMFUNCS  = _divsi3 _udivsi3 _modsi3 _umodsi3\n \n-# Assemble startup files.\n-$(T)crti.o: $(srcdir)/config/mcore/crti.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crti.o -x assembler-with-cpp $(srcdir)/config/mcore/crti.asm\n-\n-$(T)crtn.o: $(srcdir)/config/mcore/crtn.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/mcore/crtn.asm\n-\n # could use -msifilter to be safe from interrupt/jmp interactions and others.\n TARGET_LIBGCC2_CFLAGS=-O3 -DNO_FLOATLIB_FIXUNSDFSI #-msifilter\n \n@@ -37,21 +28,16 @@ CROSS_FLOAT_H = $(srcdir)/config/mcore/gfloat.h\n # If support for -m4align is ever re-enabled then comment out the\n # following line and uncomment the mutlilib lines below.\n \n-EXTRA_PARTS = crtbegin.o crtend.o crti.o crtn.o\n-\n # MULTILIB_OPTIONS     = m8align/m4align\n # MULTILIB_DIRNAMES    = align8 align4\n # MULTILIB_MATCHES     = \n # MULTILIB_EXTRA_OPTS  = \n # MULTILIB_EXCEPTIONS  =\n-# EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crti.o crtn.o\n # LIBGCC               = stmp-multilib\n # INSTALL_LIBGCC       = install-multilib\n \n MULTILIB_OPTIONS     = mbig-endian/mlittle-endian m210/m340\n MULTILIB_DIRNAMES    = big little m210 m340\n \n-EXTRA_PARTS          =\n-EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crti.o crtn.o\n LIBGCC               = stmp-multilib\n INSTALL_LIBGCC       = install-multilib"}, {"sha": "d560db0aa4bd688a498228775a2cee4b087a8551", "filename": "gcc/config/mep/t-mep", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fmep%2Ft-mep", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fmep%2Ft-mep", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Ft-mep?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -24,12 +24,6 @@\n \n GTM_H = tm.h $(tm_file_list) $(srcdir)/config/mep/mep-intrin.h insn-constants.h\n \n-# Use -O0 instead of -O2 so we don't get complex relocations\n-\n-CRTSTUFF_CFLAGS = -O0 $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -g0 \\\n-  -finhibit-size-directive -fno-inline-functions -fno-exceptions \\\n-  -fno-zero-initialized-in-bss -fno-unit-at-a-time\n-\n TCFLAGS = -mlibrary\n \n mep-pragma.o: $(srcdir)/config/mep/mep-pragma.c $(CONFIG_H) $(SYSTEM_H) \\\n@@ -57,8 +51,6 @@ LIB2FUNCS_EXTRA = \\\n MULTILIB_OPTIONS = mel mall-opts mfar\n MULTILIB_DIRNAMES = el allopt far\n \n-EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o\n-\n MD_INCLUDES = \\\n \t$(srcdir)/config/mep/intrinsics.md \\\n \t$(srcdir)/config/mep/predicates.md \\"}, {"sha": "cb49636b9ac396bbdbe0f621aefcd89770cce2ed", "filename": "gcc/config/microblaze/t-microblaze", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fmicroblaze%2Ft-microblaze", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fmicroblaze%2Ft-microblaze", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Ft-microblaze?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,8 +1,3 @@\n-# For C++ crtstuff\n-EXTRA_MULTILIB_PARTS = crtbegin$(objext) crtend$(objext)\n-\n-EXTRA_PARTS += crti$(objext) crtn$(objext)\n-\n MULTILIB_OPTIONS = mxl-barrel-shift mno-xl-soft-mul mxl-multiply-high\n MULTILIB_DIRNAMES = bs m mh\n MULTILIB_EXCEPTIONS = *mxl-barrel-shift/mxl-multiply-high mxl-multiply-high\n@@ -13,10 +8,3 @@ microblaze-c.o: $(srcdir)/config/microblaze/microblaze-c.c \\\n     $(CONFIG_H) $(SYSTEM_H) $(CPPLIB_H) $(TM_P_H) $(TREE_H) errors.h $(TM_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t$(srcdir)/config/microblaze/microblaze-c.c\n-\n-# Assemble startup files\n-$(T)crti$(objext): $(srcdir)/config/microblaze/crti.s\n-\t$(GCC_FOR_TARGET) -c $(srcdir)/config/microblaze/crti.s -o $(T)crti$(objext)\n-\n-$(T)crtn$(objext): $(srcdir)/config/microblaze/crtn.s\n-\t$(GCC_FOR_TARGET) -c $(srcdir)/config/microblaze/crtn.s -o $(T)crtn$(objext)"}, {"sha": "d6c18e6b81958d053487cd38fc8015cebf4f0478", "filename": "gcc/config/mips/t-elf", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fmips%2Ft-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fmips%2Ft-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-elf?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,5 +1,5 @@\n # Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2006,\n-# 2007 Free Software Foundation, Inc.\n+# 2007, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -17,18 +17,6 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-# Don't let CTOR_LIST end up in sdata section.\n-CRTSTUFF_T_CFLAGS = -G 0\n-\n-# Assemble startup files.\n-$(T)crti.o: $(srcdir)/config/mips/crti.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crti.o -x assembler-with-cpp $(srcdir)/config/mips/crti.asm\n-\n-$(T)crtn.o: $(srcdir)/config/mips/crtn.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/mips/crtn.asm\n-\n # We must build libgcc2.a with -G 0, in case the user wants to link\n # without the $gp register.\n TARGET_LIBGCC2_CFLAGS = -G 0\n@@ -38,7 +26,6 @@ TARGET_LIBGCC2_CFLAGS = -G 0\n MULTILIB_OPTIONS = msoft-float EL/EB\n MULTILIB_DIRNAMES = soft-float el eb\n MULTILIB_MATCHES = EL=mel EB=meb msingle-float=m4650\n-EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crti.o crtn.o\n \n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib"}, {"sha": "3ac98389c8fd482a27c2c584c2493bd687969181", "filename": "gcc/config/mips/t-isa3264", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fmips%2Ft-isa3264", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fmips%2Ft-isa3264", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-isa3264?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,5 +1,5 @@\n # Copyright (C) 2001, 2002, 2003, 2004, 2007,\n-# 2008 Free Software Foundation, Inc.\n+# 2008, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -17,18 +17,6 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-# Don't let CTOR_LIST end up in sdata section.\n-CRTSTUFF_T_CFLAGS = -G 0\n-\n-# Assemble startup files.\n-$(T)crti.o: $(srcdir)/config/mips/crti.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crti.o -x assembler-with-cpp $(srcdir)/config/mips/crti.asm\n-\n-$(T)crtn.o: $(srcdir)/config/mips/crtn.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/mips/crtn.asm\n-\n # We must build libgcc2.a with -G 0, in case the user wants to link\n # without the $gp register.\n TARGET_LIBGCC2_CFLAGS = -G 0\n@@ -48,7 +36,6 @@ MULTILIB_EXCLUSIONS = !mips32r2/mfp64\n endif\n endif\n MULTILIB_MATCHES = EL=mel EB=meb\n-EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crti.o crtn.o\n \n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib"}, {"sha": "5197e5ee209285656da8fab91646cae4d828dcfb", "filename": "gcc/config/mips/t-linux64", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fmips%2Ft-linux64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fmips%2Ft-linux64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-linux64?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -19,5 +19,3 @@\n MULTILIB_OPTIONS = mabi=n32/mabi=32/mabi=64\n MULTILIB_DIRNAMES = n32 32 64\n MULTILIB_OSDIRNAMES = ../lib32 ../lib ../lib64\n-\n-EXTRA_MULTILIB_PARTS=crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o"}, {"sha": "d46c4d59433a3a93ad71eb3494345a356c7016d7", "filename": "gcc/config/mips/t-r3900", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fmips%2Ft-r3900", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fmips%2Ft-r3900", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-r3900?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,5 +1,5 @@\n # Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-# 2007 Free Software Foundation, Inc.\n+# 2007, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -21,10 +21,6 @@\n # without the $gp register.\n TARGET_LIBGCC2_CFLAGS = -G 0\n \n-EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o\n-# Don't let CTOR_LIST end up in sdata section.\n-CRTSTUFF_T_CFLAGS = -G 0\n-\n # Build the libraries for both hard and soft floating point\n \n MULTILIB_OPTIONS = msoft-float EL/EB"}, {"sha": "3a6473441f23829aec1b8dd579872d2e6dc13099", "filename": "gcc/config/mips/t-sde", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fmips%2Ft-sde", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fmips%2Ft-sde", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-sde?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n+# Copyright (C) 2007, 2008, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -16,18 +16,6 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-# Don't let CTOR_LIST end up in sdata section.\n-CRTSTUFF_T_CFLAGS = -G 0\n-\n-# Assemble startup files.\n-$(T)crti.o: $(srcdir)/config/mips/crti.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crti.o -x assembler-with-cpp $(srcdir)/config/mips/crti.asm\n-\n-$(T)crtn.o: $(srcdir)/config/mips/crtn.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/mips/crtn.asm\n-\n MULTILIB_OPTIONS = EL/EB mips32/mips32r2/mips64/mips64r2 mips16 msoft-float/mfp64 mcode-readable=no\n MULTILIB_DIRNAMES = el eb mips32 mips32r2 mips64 mips64r2 mips16 sof f64 spram\n MULTILIB_MATCHES = EL=mel EB=meb\n@@ -46,8 +34,6 @@ else\n MULTILIB_EXCLUSIONS += mips64/mips16 mips64r2/mips16\n endif\n \n-EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crti.o crtn.o\n-\n # Build the multilibs.\n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib"}, {"sha": "7b8669fefd273d9f5f853d22d696340a697c4e3a", "filename": "gcc/config/mips/t-sr71k", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fmips%2Ft-sr71k", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fmips%2Ft-sr71k", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-sr71k?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -21,19 +21,6 @@\n LIBGCC1 =\n CROSS_LIBGCC1 =\n \n-EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crti.o crtn.o\n-# Don't let CTOR_LIST end up in sdata section.\n-CRTSTUFF_T_CFLAGS = -G 0\n-\n-# Assemble startup files.\n-$(T)crti.o: $(srcdir)/config/mips/crti.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crti.o -x assembler-with-cpp $(srcdir)/config/mips/crti.asm\n-\n-$(T)crtn.o: $(srcdir)/config/mips/crtn.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/mips/crtn.asm\n-\n # We must build libgcc2.a with -G 0, in case the user wants to link\n # without the $gp register.\n TARGET_LIBGCC2_CFLAGS = -G 0"}, {"sha": "b0a8933c32b9e0d7703d02166d8c4b35e18cb79b", "filename": "gcc/config/mips/t-st", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fmips%2Ft-st", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fmips%2Ft-st", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-st?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2008 Free Software Foundation, Inc.\n+# Copyright (C) 2008, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -28,5 +28,3 @@ MULTILIB_OSDIRNAMES += march.loongson2f/mabi.64=../lib64/2f\n MULTILIB_OSDIRNAMES += mabi.n32=../lib32\n MULTILIB_OSDIRNAMES += mabi.32=../lib\n MULTILIB_OSDIRNAMES += mabi.64=../lib64\n-\n-EXTRA_MULTILIB_PARTS=crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o"}, {"sha": "16623ced5641ac2b1a377600ccae99e1c9dee176", "filename": "gcc/config/mips/t-vr", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fmips%2Ft-vr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fmips%2Ft-vr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-vr?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2002, 2004, 2005 Free Software Foundation, Inc.\n+# Copyright (C) 2002, 2004, 2005, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -18,25 +18,12 @@\n \n # BEGIN boiler-plate MIPS stuff\n \n-# Don't let CTOR_LIST end up in sdata section.\n-CRTSTUFF_T_CFLAGS = -G 0\n-\n # We must build libgcc2.a with -G 0, in case the user wants to link\n # without the $gp register.\n TARGET_LIBGCC2_CFLAGS = -G 0\n \n LIB2FUNCS_STATIC_EXTRA = $(srcdir)/config/mips/mips16.S \\\n \t\t\t $(srcdir)/config/mips/vr4120-div.S\n-EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crti.o crtn.o\n-\n-# Assemble startup files.\n-$(T)crti.o: $(srcdir)/config/mips/crti.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crti.o -x assembler-with-cpp $(srcdir)/config/mips/crti.asm\n-\n-$(T)crtn.o: $(srcdir)/config/mips/crtn.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/mips/crtn.asm\n \n # END boiler-plate\n "}, {"sha": "bb2aabf83d284661ba26459c37b1fec37cc60519", "filename": "gcc/config/mmix/t-mmix", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fmmix%2Ft-mmix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fmmix%2Ft-mmix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Ft-mmix?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2001, 2002, 2003, 2010 Free Software Foundation, Inc.\n+# Copyright (C) 2001, 2002, 2003, 2010, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -20,12 +20,5 @@\n \n TARGET_LIBGCC2_CFLAGS = -mlibfuncs -O2\n \n-# We need to turn off some assumptions on normality for code in crtstuff.c\n-# and crt{i,n}.asm, specifically about execution not continuing past the\n-# end of the section in the file being compiled.  Thus we must stop the\n-# assembler from generating stubbable PUSHJ relocs, because that will add\n-# stubs at the end of the current section when necessary.\n-CRTSTUFF_T_CFLAGS = -Wa,--no-stubs\n-\n MULTILIB_OPTIONS = mabi=gnu\n MULTILIB_DIRNAMES = gnuabi"}, {"sha": "3ac9d31eed88514f8d0974e7eb7139f05b002eb3", "filename": "gcc/config/moxie/crtn.asm", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/gcc%2Fconfig%2Fmoxie%2Fcrtn.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/gcc%2Fconfig%2Fmoxie%2Fcrtn.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fcrtn.asm?ref=29026f66b08e17dc93d995fb3d48d2c0f7c51f26", "patch": "@@ -1,34 +0,0 @@\n-# crtn.asm for moxie\n-# \n-#   Copyright (C) 2009 Free Software Foundation\n-# \n-# This file is free software; you can redistribute it and/or modify it\n-# under the terms of the GNU General Public License as published by the\n-# Free Software Foundation; either version 3, or (at your option) any\n-# later version.\n-# \n-# This file is distributed in the hope that it will be useful, but\n-# WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# General Public License for more details.\n-# \n-# Under Section 7 of GPL version 3, you are granted additional\n-# permissions described in the GCC Runtime Library Exception, version\n-# 3.1, as published by the Free Software Foundation.\n-#\n-# You should have received a copy of the GNU General Public License and\n-# a copy of the GCC Runtime Library Exception along with this program;\n-# see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-# <http://www.gnu.org/licenses/>.\n-\n-# This file just makes sure that the .fini and .init sections do in\n-# fact return.  Users may put any desired instructions in those sections.\n-# This file is the last thing linked into any executable.\n-\n-\t.file\t\t\"crtn.asm\"\n-\n-\t.section\t\".init\"\n-\tret\n-\t\n-\t.section\t\".fini\"\n-\tret"}, {"sha": "df351e11458b68a88a3cf91b29e6f9d5faef98a9", "filename": "gcc/config/pa/t-linux", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fpa%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fpa%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ft-linux?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 1999, 2001, 2002, 2008 Free Software Foundation, Inc.\n+# Copyright (C) 1999, 2001, 2002, 2008, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -32,6 +32,3 @@ LIB2FUNCS_STATIC_EXTRA = $(srcdir)/config/pa/linux-atomic.c\n fptr.c: $(srcdir)/config/pa/fptr.c\n \trm -f fptr.c\n \tcp $(srcdir)/config/pa/fptr.c .\n-\n-# Compile crtbeginS.o and crtendS.o as PIC.\n-CRTSTUFF_T_CFLAGS_S = -fPIC"}, {"sha": "d40546cabccc4194eda0da2f1276c9f9dd8cbd6f", "filename": "gcc/config/pa/t-linux64", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fpa%2Ft-linux64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fpa%2Ft-linux64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ft-linux64?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2001, 2008 Free Software Foundation, Inc.\n+# Copyright (C) 2001, 2008, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -22,10 +22,6 @@\n LIB1ASMFUNCS =  _divI _divU _remI _remU _div_const _mulI\n LIB1ASMSRC = pa/milli64.S\n \n-# Compile crtbeginS.o and crtendS.o as PIC.\n-# Actually, hppa64 is always PIC but adding -fPIC does no harm.\n-CRTSTUFF_T_CFLAGS_S = -fPIC\n-\n LIB2FUNCS_STATIC_EXTRA = $(srcdir)/config/pa/linux-atomic.c\n \n # Compile libgcc2.a as PIC."}, {"sha": "2773828ac39f194b7d5c7e4577257f6258efb8ed", "filename": "gcc/config/pa/t-pa-hpux11", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fpa%2Ft-pa-hpux11", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fpa%2Ft-pa-hpux11", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ft-pa-hpux11?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,31 +1,2 @@\n TARGET_LIBGCC2_CFLAGS = -fPIC -frandom-seed=fixed-seed\n LIB2FUNCS_EXTRA=lib2funcs.asm quadlib.c\n-LIBGCCSTUB_OBJS = pthread_default_stacksize_np-stub.o \\\n-\tpthread_mutex_lock-stub.o \\\n-\tpthread_mutex_unlock-stub.o \\\n-\tpthread_once-stub.o\n-\n-stublib.c: $(srcdir)/config/pa/stublib.c\n-\trm -f stublib.c\n-\tcp $(srcdir)/config/pa/stublib.c .\n-\n-pthread_default_stacksize_np-stub.o: stublib.c $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) -c -O2 -DL_pthread_default_stacksize_np stublib.c \\\n-\t  -o pthread_default_stacksize_np-stub.o\n-\n-pthread_mutex_lock-stub.o: stublib.c $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) -c -O2 -DL_pthread_mutex_lock stublib.c \\\n-\t  -o pthread_mutex_lock-stub.o\n-\n-pthread_mutex_unlock-stub.o: stublib.c $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) -c -O2 -DL_pthread_mutex_unlock stublib.c \\\n-\t  -o pthread_mutex_unlock-stub.o\n-\n-pthread_once-stub.o: stublib.c $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) -c -O2 -DL_pthread_once stublib.c \\\n-\t  -o pthread_once-stub.o\n-\n-$(T)libgcc_stub.a: $(LIBGCCSTUB_OBJS)\n-\t-rm -rf $(T)libgcc_stub.a\n-\t$(AR) rc $(T)libgcc_stub.a $(LIBGCCSTUB_OBJS)\n-\t$(RANLIB) $(T)libgcc_stub.a"}, {"sha": "ce21808e0563b2f9f730691a1a19a18ef7cb55ae", "filename": "gcc/config/pa/t-pa64", "status": "modified", "additions": 1, "deletions": 47, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fpa%2Ft-pa64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fpa%2Ft-pa64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ft-pa64?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,5 +1,5 @@\n # Copyright (C) 2000, 2001, 2002, 2004, 2006,\n-# 2007, 2010 Free Software Foundation, Inc.\n+# 2007, 2010, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -19,49 +19,3 @@\n \n TARGET_LIBGCC2_CFLAGS = -fPIC -Dpa64=1 -DELF=1 -mlong-calls\n LIB2FUNCS_EXTRA = quadlib.c\n-LIBGCCSTUB_OBJS = rfi-stub.o dfi-stub.o jvrc-stub.o cxaf-stub.o \\\n-\tpthread_default_stacksize_np-stub.o \\\n-\tpthread_mutex_lock-stub.o \\\n-\tpthread_mutex_unlock-stub.o \\\n-\tpthread_once-stub.o\n-\n-stublib.c: $(srcdir)/config/pa/stublib.c\n-\trm -f stublib.c\n-\tcp $(srcdir)/config/pa/stublib.c .\n-\n-rfi-stub.o: stublib.c $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) -c -O2 -DL_register_frame_info stublib.c \\\n-\t  -o rfi-stub.o\n-\n-dfi-stub.o: stublib.c $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) -c -O2 -DL_deregister_frame_info stublib.c \\\n-\t  -o dfi-stub.o\n-\n-cxaf-stub.o: stublib.c $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) -c -O2 -DL_cxa_finalize stublib.c \\\n-\t  -o cxaf-stub.o\n-\n-jvrc-stub.o: stublib.c $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) -c -O2 -DL_Jv_RegisterClasses stublib.c \\\n-\t  -o jvrc-stub.o\n-\n-pthread_default_stacksize_np-stub.o: stublib.c $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) -c -O2 -DL_pthread_default_stacksize_np stublib.c \\\n-\t  -o pthread_default_stacksize_np-stub.o\n-\n-pthread_mutex_lock-stub.o: stublib.c $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) -c -O2 -DL_pthread_mutex_lock stublib.c \\\n-\t  -o pthread_mutex_lock-stub.o\n-\n-pthread_mutex_unlock-stub.o: stublib.c $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) -c -O2 -DL_pthread_mutex_unlock stublib.c \\\n-\t  -o pthread_mutex_unlock-stub.o\n-\n-pthread_once-stub.o: stublib.c $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) -c -O2 -DL_pthread_once stublib.c \\\n-\t  -o pthread_once-stub.o\n-\n-$(T)libgcc_stub.a: $(LIBGCCSTUB_OBJS)\n-\t-rm -rf $(T)libgcc_stub.a\n-\t$(AR) rc $(T)libgcc_stub.a $(LIBGCCSTUB_OBJS)\n-\t$(RANLIB) $(T)libgcc_stub.a"}, {"sha": "8eef22351a3fa2eba5702714c5ac74ae324663bb", "filename": "gcc/config/rs6000/t-lynx", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Frs6000%2Ft-lynx", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Frs6000%2Ft-lynx", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-lynx?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -32,15 +32,6 @@ MULTILIB_DIRNAMES   += altivec\n \n MULTILIB_EXCEPTIONS = *msoft-float/*maltivec*\n \n-EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o \n-\n-# If .sdata is enabled __CTOR_{LIST,END}__ go into .sdata instead of\n-# .ctors.\n-CRTSTUFF_T_CFLAGS = -mno-sdata \n- \n-# Compile crtbeginS.o and crtendS.o with pic. \n-CRTSTUFF_T_CFLAGS_S = -fPIC -mno-sdata \n-\n Local Variables:\n mode: makefile\n End:"}, {"sha": "bde741903284bcb29fc2c7bd7569a74a2c5f130d", "filename": "gcc/config/rs6000/t-netbsd", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Frs6000%2Ft-netbsd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Frs6000%2Ft-netbsd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-netbsd?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,6 +1,6 @@\n # Support for NetBSD PowerPC ELF targets (SVR4 ABI).\n #\n-# Copyright (C) 2002, 2008 Free Software Foundation, Inc.\n+# Copyright (C) 2002, 2008, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -45,10 +45,6 @@ crtresxfpr.S: $(srcdir)/config/rs6000/crtresxfpr.asm\n crtresxgpr.S: $(srcdir)/config/rs6000/crtresxgpr.asm\n \tcat $(srcdir)/config/rs6000/crtresxgpr.asm >crtresxgpr.S\n \n-# It is important that crtbegin.o, etc., aren't surprised by stuff in .sdata.\n-CRTSTUFF_T_CFLAGS += -msdata=none\n-CRTSTUFF_T_CFLAGS_S += -msdata=none\n-\n # Switch synonyms\n MULTILIB_MATCHES_FLOAT\t= msoft-float=mcpu?401 \\\n \t\t\t  msoft-float=mcpu?403 \\\n@@ -68,8 +64,6 @@ MULTILIB_MATCHES\t= ${MULTILIB_MATCHES_FLOAT}\n \n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib\n-EXTRA_MULTILIB_PARTS = crtbegin$(objext) crtend$(objext) \\\n-  crtbeginS$(objext) crtendS$(objext) crtbeginT$(objext)\n \n $(T)crtsavfpr$(objext): crtsavfpr.S\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c crtsavfpr.S -o $(T)crtsavfpr$(objext)"}, {"sha": "89716bc08c4d8e7ab1ea43b5c01a356e4a8da60f", "filename": "gcc/config/rs6000/t-ppccomm", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Frs6000%2Ft-ppccomm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Frs6000%2Ft-ppccomm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-ppccomm?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -33,43 +33,3 @@ tramp.S: $(srcdir)/config/rs6000/tramp.asm\n # Switch synonyms\n MULTILIB_MATCHES_ENDIAN\t= mlittle=mlittle-endian mbig=mbig-endian\n MULTILIB_MATCHES_SYSV\t= mcall-sysv=mcall-sysv-eabi mcall-sysv=mcall-sysv-noeabi mcall-sysv=mcall-linux mcall-sysv=mcall-netbsd\n-\n-EXTRA_MULTILIB_PARTS = crtbegin$(objext) crtend$(objext) \\\n-  crtbeginS$(objext) crtendS$(objext) crtbeginT$(objext) \\\n-  ecrti$(objext) ecrtn$(objext) \\\n-  ncrti$(objext) ncrtn$(objext)\n-\n-# We build {e,n}crti.o and {e,n}crtn.o, which serve to add begin and\n-# end labels to all of the special sections used when we link using gcc.\n-\n-# Assemble startup files.\n-ecrti.S: $(srcdir)/config/rs6000/eabi-ci.asm\n-\tcat $(srcdir)/config/rs6000/eabi-ci.asm >ecrti.S\n-\n-ecrtn.S: $(srcdir)/config/rs6000/eabi-cn.asm\n-\tcat $(srcdir)/config/rs6000/eabi-cn.asm >ecrtn.S\n-\n-ncrti.S: $(srcdir)/config/rs6000/sol-ci.asm\n-\tcat $(srcdir)/config/rs6000/sol-ci.asm >ncrti.S\n-\n-ncrtn.S: $(srcdir)/config/rs6000/sol-cn.asm\n-\tcat $(srcdir)/config/rs6000/sol-cn.asm >ncrtn.S\n-\n-# Build multiple copies of ?crt{i,n}.o, one for each target switch.\n-$(T)ecrti$(objext): ecrti.S\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c ecrti.S -o $(T)ecrti$(objext)\n-\n-$(T)ecrtn$(objext): ecrtn.S\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c ecrtn.S -o $(T)ecrtn$(objext)\n-\n-$(T)ncrti$(objext): ncrti.S\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c ncrti.S -o $(T)ncrti$(objext)\n-\n-$(T)ncrtn$(objext): ncrtn.S\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -c ncrtn.S -o $(T)ncrtn$(objext)\n-\n-# It is important that crtbegin.o, etc., aren't surprised by stuff in .sdata.\n-CRTSTUFF_T_CFLAGS = -msdata=none\n-# Make sure crt*.o are built with -fPIC even if configured with \n-# --enable-shared --disable-multilib\n-CRTSTUFF_T_CFLAGS_S = -fPIC -msdata=none"}, {"sha": "e6c67d731ec0f9012a9ecb3e6c111aeb0fe705aa", "filename": "gcc/config/rs6000/t-vxworks", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Frs6000%2Ft-vxworks", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Frs6000%2Ft-vxworks", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-vxworks?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -24,10 +24,6 @@ MULTILIB_DIRNAMES =\n MULTILIB_MATCHES = fPIC=fpic\n MULTILIB_EXCEPTIONS = fPIC*\n \n-# This is set from the common config/t-vxworks but clobbered by t-ppccomm\n-# on this target.\n-EXTRA_MULTILIB_PARTS = \n-\n # Similarily, LIB2FUNCS_EXTRA is set from config/t-vxworks and\n # t-ppccomm *adds* to it, but the common contents are useful to us.\n # In particular the base trampoline_setup bits are expected to be"}, {"sha": "9d282b66b1a0ae37d37ed64f9c3f770607abd7b8", "filename": "gcc/config/rx/t-rx", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Frx%2Ft-rx", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Frx%2Ft-rx", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Ft-rx?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -30,5 +30,3 @@ MULTILIB_EXTRA_OPTS =\n \n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib\n-\n-EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o"}, {"sha": "fd080c1b1fe008f32e921eaad0070466c65b0d3e", "filename": "gcc/config/score/t-score-elf", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/gcc%2Fconfig%2Fscore%2Ft-score-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/gcc%2Fconfig%2Fscore%2Ft-score-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Ft-score-elf?ref=29026f66b08e17dc93d995fb3d48d2c0f7c51f26", "patch": "@@ -1,26 +0,0 @@\n-# Copyright (C) 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n-#\n-# This file is part of GCC.\n-#\n-# GCC is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 3, or (at your option)\n-# any later version.\n-#\n-# GCC is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-\n-# Assemble startup files.\n-$(T)crti.o: $(srcdir)/config/score/crti.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crti.o -x assembler-with-cpp $(srcdir)/config/score/crti.asm\n-\n-$(T)crtn.o: $(srcdir)/config/score/crtn.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/score/crtn.asm"}, {"sha": "333efb54e09cdc0db047fcbbb076730d8a7bc81d", "filename": "gcc/config/sh/t-elf", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/gcc%2Fconfig%2Fsh%2Ft-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/gcc%2Fconfig%2Fsh%2Ft-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-elf?ref=29026f66b08e17dc93d995fb3d48d2c0f7c51f26", "patch": "@@ -1,10 +0,0 @@\n-EXTRA_MULTILIB_PARTS= crt1.o crti.o crtn.o \\\n-\tcrtbegin.o crtend.o crtbeginS.o crtendS.o $(IC_EXTRA_PARTS) $(OPT_EXTRA_PARTS)\n-\n-# Compile crtbeginS.o and crtendS.o with pic.\n-CRTSTUFF_T_CFLAGS_S = -fPIC\n-\n-# Don't compile libgcc with -fpic for now.  It's unlikely that we'll\n-# build shared libraries for embedded SH.\n-# Linux / Netbsd will already have set TARGET_LIBGCC2_CFLAGS.\n-# TARGET_LIBGCC2_CFLAGS = -fpic"}, {"sha": "a5c711618c639abbe0fb7fa55f5deb52d86fc9d3", "filename": "gcc/config/sh/t-linux", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fsh%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fsh%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-linux?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -4,5 +4,3 @@ LIB2FUNCS_EXTRA= $(srcdir)/config/sh/linux-atomic.asm\n \n MULTILIB_DIRNAMES= \n MULTILIB_MATCHES = \n-\n-EXTRA_MULTILIB_PARTS= crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o"}, {"sha": "126b0163754cd97473b682f3dd35d062a8204f5b", "filename": "gcc/config/sh/t-linux64", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/gcc%2Fconfig%2Fsh%2Ft-linux64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/gcc%2Fconfig%2Fsh%2Ft-linux64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-linux64?ref=29026f66b08e17dc93d995fb3d48d2c0f7c51f26", "patch": "@@ -1 +0,0 @@\n-EXTRA_MULTILIB_PARTS= crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o"}, {"sha": "de172d3f73fe53517a32db494f3d1e1ad00fb2ac", "filename": "gcc/config/sh/t-netbsd", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fsh%2Ft-netbsd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fsh%2Ft-netbsd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-netbsd?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -20,5 +20,3 @@ TARGET_LIBGCC2_CFLAGS = -fpic -mieee\n LIB1ASMFUNCS_CACHE = _ic_invalidate\n \n LIB2FUNCS_EXTRA=\n-\n-EXTRA_MULTILIB_PARTS="}, {"sha": "6eaf784e8ae0d5905c5236d7d62b8a89f3dcebe1", "filename": "gcc/config/sh/t-sh", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fsh%2Ft-sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fsh%2Ft-sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-sh?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -94,55 +94,9 @@ MULTILIB_OSDIRNAMES = \\\n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib\n \n-$(T)crt1.o: $(srcdir)/config/sh/crt1.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $(T)crt1.o -x assembler-with-cpp $(srcdir)/config/sh/crt1.asm\n-$(T)crti.o: $(srcdir)/config/sh/crti.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $(T)crti.o -x assembler-with-cpp $(srcdir)/config/sh/crti.asm\n-$(T)crtn.o: $(srcdir)/config/sh/crtn.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/sh/crtn.asm\n-\n $(out_object_file): gt-sh.h\n gt-sh.h : s-gtype ; @true\n \n-# These are not suitable for COFF.\n-# EXTRA_MULTILIB_PARTS= crt1.o crti.o crtn.o crtbegin.o crtend.o\n-\n-IC_EXTRA_PARTS= libic_invalidate_array_4-100.a libic_invalidate_array_4-200.a \\\n-libic_invalidate_array_4a.a\n-OPT_EXTRA_PARTS= libgcc-Os-4-200.a libgcc-4-300.a\n-EXTRA_MULTILIB_PARTS= $(IC_EXTRA_PARTS) $(OPT_EXTRA_PARTS)\n-\n-$(T)ic_invalidate_array_4-100.o: $(srcdir)/config/sh/lib1funcs.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $(T)ic_invalidate_array_4-100.o -DL_ic_invalidate_array -DWAYS=1 -DWAY_SIZE=0x2000 -x assembler-with-cpp $(srcdir)/config/sh/lib1funcs.asm\n-$(T)libic_invalidate_array_4-100.a: $(T)ic_invalidate_array_4-100.o $(GCC_PASSES)\n-\t$(AR_CREATE_FOR_TARGET) $(T)libic_invalidate_array_4-100.a $(T)ic_invalidate_array_4-100.o\n-\n-$(T)ic_invalidate_array_4-200.o: $(srcdir)/config/sh/lib1funcs.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $(T)ic_invalidate_array_4-200.o -DL_ic_invalidate_array -DWAYS=2 -DWAY_SIZE=0x2000 -x assembler-with-cpp $(srcdir)/config/sh/lib1funcs.asm\n-$(T)libic_invalidate_array_4-200.a: $(T)ic_invalidate_array_4-200.o $(GCC_PASSES)\n-\t$(AR_CREATE_FOR_TARGET) $(T)libic_invalidate_array_4-200.a $(T)ic_invalidate_array_4-200.o\n-\n-$(T)ic_invalidate_array_4a.o: $(srcdir)/config/sh/lib1funcs.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $(T)ic_invalidate_array_4a.o -DL_ic_invalidate_array -D__FORCE_SH4A__ -x assembler-with-cpp $(srcdir)/config/sh/lib1funcs.asm\n-$(T)libic_invalidate_array_4a.a: $(T)ic_invalidate_array_4a.o $(GCC_PASSES)\n-\t$(AR_CREATE_FOR_TARGET) $(T)libic_invalidate_array_4a.a $(T)ic_invalidate_array_4a.o\n-\n-$(T)sdivsi3_i4i-Os-4-200.o: $(srcdir)/config/sh/lib1funcs-Os-4-200.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $@ -DL_sdivsi3_i4i -x assembler-with-cpp $<\n-$(T)udivsi3_i4i-Os-4-200.o: $(srcdir)/config/sh/lib1funcs-Os-4-200.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $@ -DL_udivsi3_i4i -x assembler-with-cpp $<\n-$(T)unwind-dw2-Os-4-200.o: $(srcdir)/../libgcc/unwind-dw2.c $(srcdir)/../libgcc/unwind-generic.h $(srcdir)/../libgcc/unwind-pe.h $(srcdir)/../libgcc/unwind.inc $(srcdir)/../libgcc/unwind-dw2-fde.h $(srcdir)/../libgcc/unwind-dw2.h $(CONFIG_H) coretypes.h $(TM_H) $(MACHMODE_H) longlong.h config.status stmp-int-hdrs tsystem.h $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) $(LIBGCC2_CFLAGS) $(INCLUDES) $(vis_hide) -fexceptions -Os -c -o $@ $<\n-OBJS_Os_4_200=$(T)sdivsi3_i4i-Os-4-200.o $(T)udivsi3_i4i-Os-4-200.o $(T)unwind-dw2-Os-4-200.o\n-$(T)libgcc-Os-4-200.a: $(OBJS_Os_4_200) $(GCC_PASSES)\n-\t$(AR_CREATE_FOR_TARGET) $@ $(OBJS_Os_4_200)\n-\n-$(T)div_table-4-300.o: $(srcdir)/config/sh/lib1funcs-4-300.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $@ -DL_div_table -x assembler-with-cpp $<\n-\n-$(T)libgcc-4-300.a: $(T)div_table-4-300.o $(GCC_PASSES)\n-\t$(AR_CREATE_FOR_TARGET) $@ $(T)div_table-4-300.o\n-\n # Local Variables:\n # mode: Makefile\n # End:"}, {"sha": "4e2d83dcba055e6d5398d82ad9e4cfb4d24592bd", "filename": "gcc/config/sh/t-superh", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/gcc%2Fconfig%2Fsh%2Ft-superh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/gcc%2Fconfig%2Fsh%2Ft-superh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-superh?ref=29026f66b08e17dc93d995fb3d48d2c0f7c51f26", "patch": "@@ -1,33 +0,0 @@\n-# Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n-#\n-# This file is part of GCC.\n-#\n-# GCC is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 3, or (at your option)\n-# any later version.\n-#\n-# GCC is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-\n-EXTRA_MULTILIB_PARTS= crt1.o crti.o crtn.o \\\n-\tcrtbegin.o crtend.o crtbeginS.o crtendS.o \\\n-\tcrt1-mmu.o gcrt1-mmu.o gcrt1.o $(IC_EXTRA_PARTS) $(OPT_EXTRA_PARTS)\n-\n-# Compile crt1-mmu.o as crt1.o with -DMMU_SUPPORT\n-$(T)crt1-mmu.o: $(srcdir)/config/sh/crt1.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $(T)crt1-mmu.o -DMMU_SUPPORT -x assembler-with-cpp $(srcdir)/config/sh/crt1.asm\n-\n-# Compile gcrt1-mmu.o as crt1-mmu.o with -DPROFILE\n-$(T)gcrt1-mmu.o: $(srcdir)/config/sh/crt1.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $(T)gcrt1-mmu.o -DPROFILE -DMMU_SUPPORT -x assembler-with-cpp $(srcdir)/config/sh/crt1.asm\n-\n-# For sh4-400: Compile gcrt1.o as crt1.o with -DPROFILE\n-$(T)gcrt1.o: $(srcdir)/config/sh/crt1.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -c -o $(T)gcrt1.o -DPROFILE -x assembler-with-cpp $(srcdir)/config/sh/crt1.asm"}, {"sha": "d7ccc9b7f59e50559176a336087ac346cddfa3fd", "filename": "gcc/config/sh/t-vxworks", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fsh%2Ft-vxworks", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fsh%2Ft-vxworks", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-vxworks?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -4,6 +4,3 @@ MULTILIB_OPTIONS = mrtp fPIC m2/m3/m4/m4a ml\n # Don't build -fPIC without -mrtp, or -ml without -m3/-m4.\n MULTILIB_EXCEPTIONS = fPIC* ml* mrtp/ml* mrtp/fPIC/ml* *m2/ml*\n MULTILIB_MATCHES = m2=m4-nofpu fPIC=fpic\n-\n-# Restore a variable from t-vxworks clobbered by t-elf.\n-EXTRA_MULTILIB_PARTS ="}, {"sha": "7d5781d32ed8c48ef430cc3091c0fcd528fdf08e", "filename": "gcc/config/sparc/t-linux64", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fsparc%2Ft-linux64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fsparc%2Ft-linux64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ft-linux64?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,5 +1,5 @@\n # Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004,\n-# 2006, 2010 Free Software Foundation, Inc.\n+# 2006, 2010, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -30,7 +30,3 @@ MULTILIB_OSDIRNAMES = ../lib64 $(if $(wildcard $(shell echo $(SYSTEM_HEADER_DIR)\n \n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib\n-\n-CRTSTUFF_T_CFLAGS = `if test x$$($(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) \\\n-\t\t\t\t -print-multi-os-directory) \\\n-\t\t\t= x../lib64; then echo -mcmodel=medany; fi`"}, {"sha": "b1660353ee65b1a76a78ffffbfc1a93701d2bc21", "filename": "gcc/config/spu/t-spu-elf", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fspu%2Ft-spu-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fspu%2Ft-spu-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Ft-spu-elf?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -43,43 +43,9 @@ LIB2FUNCS_STATIC_EXTRA = $(srcdir)/config/spu/float_unssidf.c \\\n # integer data types.\n LIB2_SIDITI_CONV_FUNCS=yes\n \n-# Don't let CTOR_LIST end up in sdata section.\n-CRTSTUFF_T_CFLAGS =\n-\n # Multi-lib support.\n MULTILIB_OPTIONS=mea64\n \n-# Neither gcc or newlib seem to have a standard way to generate multiple\n-# crt*.o files.  So we don't use the standard crt0.o name anymore.\n-\n-EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o libgcc_cachemgr.a libgcc_cachemgr_nonatomic.a \\\n-\tlibgcc_cache8k.a libgcc_cache16k.a libgcc_cache32k.a libgcc_cache64k.a libgcc_cache128k.a\n-\n-$(T)cachemgr.o: $(srcdir)/config/spu/cachemgr.c\n-\t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(MULTILIB_CFLAGS) -c $< -o $@\n-\n-# Specialised rule to add a -D flag.\n-$(T)cachemgr_nonatomic.o: $(srcdir)/config/spu/cachemgr.c\n-\t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(MULTILIB_CFLAGS) -DNONATOMIC -c $< -o $@\n-\n-$(T)libgcc_%.a: $(T)%.o\n-\t$(AR_FOR_TARGET) -rcs $@ $<\n-\n-$(T)cache8k.o: $(srcdir)/config/spu/cache.S\n-\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -D__CACHE_SIZE__=8 -o $@ -c $<\n-\n-$(T)cache16k.o: $(srcdir)/config/spu/cache.S\n-\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -D__CACHE_SIZE__=16 -o $@ -c $<\n-\n-$(T)cache32k.o: $(srcdir)/config/spu/cache.S\n-\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -D__CACHE_SIZE__=32 -o $@ -c $<\n-\n-$(T)cache64k.o: $(srcdir)/config/spu/cache.S\n-\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -D__CACHE_SIZE__=64 -o $@ -c $<\n-\n-$(T)cache128k.o: $(srcdir)/config/spu/cache.S\n-\t$(GCC_FOR_TARGET) $(MULTILIB_CFLAGS) -D__CACHE_SIZE__=128 -o $@ -c $<\n-\n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib\n "}, {"sha": "26316be1efb5bd8c80e384fd9474ef7b5cd57d6f", "filename": "gcc/config/t-freebsd", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Ft-freebsd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Ft-freebsd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-freebsd?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,5 +1,2 @@\n-# Compile crtbeginS.o and crtendS.o with pic.\n-CRTSTUFF_T_CFLAGS_S = $(CRTSTUFF_T_CFLAGS) -fPIC\n-\n # Compile libgcc.a with pic.\n TARGET_LIBGCC2_CFLAGS += -fPIC"}, {"sha": "a5ef25c423b2b70a1ac78f2ba9aec589d9364319", "filename": "gcc/config/t-linux", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-linux?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -17,7 +17,5 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-# Compile crtbeginS.o and crtendS.o with pic.\n-CRTSTUFF_T_CFLAGS_S = $(CRTSTUFF_T_CFLAGS) -fPIC\n # Compile libgcc2.a with pic.\n TARGET_LIBGCC2_CFLAGS = -fPIC"}, {"sha": "4825164ca3179d8da13a6507f5cdbd38217060e1", "filename": "gcc/config/t-lynx", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Ft-lynx", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Ft-lynx", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-lynx?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2004, 2007 Free Software Foundation, Inc.\n+# Copyright (C) 2004, 2007, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -16,9 +16,6 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-# Compile crtbeginS.o and crtendS.o with pic.\n-CRTSTUFF_T_CFLAGS_S = $(CRTSTUFF_T_CFLAGS) -fPIC\n-\n # Compile libgcc2.a with pic.\n TARGET_LIBGCC2_CFLAGS = -fPIC\n "}, {"sha": "34949e12858ccc0325fccb0ff8c4493b6c2162a8", "filename": "gcc/config/t-netbsd", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/gcc%2Fconfig%2Ft-netbsd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/gcc%2Fconfig%2Ft-netbsd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-netbsd?ref=29026f66b08e17dc93d995fb3d48d2c0f7c51f26", "patch": "@@ -1,2 +0,0 @@\n-# Always build crtstuff with PIC.\n-CRTSTUFF_T_CFLAGS_S = $(CRTSTUFF_T_CFLAGS) -fPIC"}, {"sha": "5f38f56c9fe05d9e81ddedf10c628a16854307a3", "filename": "gcc/config/t-svr4", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Ft-svr4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Ft-svr4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-svr4?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -4,5 +4,4 @@\n # we will be doing that, we just always use -fPIC when compiling the\n # routines in crtstuff.c.  Likewise for libgcc2.c.\n \n-CRTSTUFF_T_CFLAGS_S = $(CRTSTUFF_T_CFLAGS) -fPIC\n TARGET_LIBGCC2_CFLAGS = -fPIC"}, {"sha": "d29ab66d8bf1ba209e65283044a3b1fe0be82d46", "filename": "gcc/config/t-vxworks", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Ft-vxworks", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Ft-vxworks", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-vxworks?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,5 +1,5 @@\n # Copyright (C) 2002, 2003, 2005, 2006, 2007, 2008,\n-# 2009, 2010 Free Software Foundation, Inc.\n+# 2009, 2010, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -46,8 +46,6 @@ LIBGCC2_INCLUDES = -nostdinc -I \\\n # Both the kernel and RTP headers provide limits.h.\n LIMITS_H_TEST = true\n \n-EXTRA_MULTILIB_PARTS = \n-\n vxworks.o: $(srcdir)/config/vxworks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \t$(TARGET_H) output.h $(TM_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "2ebcfd713c9e51047a5e25b0d0046ac515afc96c", "filename": "gcc/config/vms/t-vms", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fvms%2Ft-vms", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fvms%2Ft-vms", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Ft-vms?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2009, 2010\n+# Copyright (C) 2009, 2010, 2011\n # Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n@@ -24,17 +24,6 @@ LIMITS_H_TEST = false\n # Under VMS, directory names cannot contain dots.\n version:=$(shell echo $(BASEVER_c) | sed -e 's/\\./_/g')\n \n-VMS_EXTRA_PARTS=vcrt0.o pcrt0.o\n-\n-# Assemble startup files.\n-$(T)vcrt0.o: $(srcdir)/config/vms/vms-ucrt0.c $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)vcrt0.o $(srcdir)/config/vms/vms-ucrt0.c\n-\n-$(T)pcrt0.o: $(srcdir)/config/vms/vms-ucrt0.c $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)pcrt0.o -DCRT0_POSIX_EXIT $(srcdir)/config/vms/vms-ucrt0.c\n-\n vms-crtlmap.h: $(srcdir)/config/vms/vms-crtlmap.map  \\\n   $(srcdir)/config/vms/make-crtlmap.awk\n \t$(AWK) -f $(srcdir)/config/vms/make-crtlmap.awk \\"}, {"sha": "76f4ef3f304f8b653c8704b03b0881f394961045", "filename": "gcc/config/xtensa/t-elf", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fxtensa%2Ft-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fxtensa%2Ft-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Ft-elf?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,6 +1 @@\n-# Build CRT files and libgcc with the \"longcalls\" option\n-CRTSTUFF_T_CFLAGS += -mlongcalls\n-CRTSTUFF_T_CFLAGS_S += -mlongcalls\n TARGET_LIBGCC2_CFLAGS += -mlongcalls\n-\n-EXTRA_MULTILIB_PARTS = crti.o crtn.o crtbegin.o crtend.o"}, {"sha": "7d39351fa66c5d98a59b739be4a7117aa7cf0f3b", "filename": "gcc/config/xtensa/t-linux", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/gcc%2Fconfig%2Fxtensa%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/gcc%2Fconfig%2Fxtensa%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Ft-linux?ref=29026f66b08e17dc93d995fb3d48d2c0f7c51f26", "patch": "@@ -1 +0,0 @@\n-EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o"}, {"sha": "c0a7cb5202f75ca57c4b02d5954341abcc484f34", "filename": "gcc/config/xtensa/t-xtensa", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fxtensa%2Ft-xtensa", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfig%2Fxtensa%2Ft-xtensa", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Ft-xtensa?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -31,11 +31,4 @@ LIB1ASMFUNCS = _mulsi3 _divsi3 _modsi3 _udivsi3 _umodsi3 \\\n \n LIB2FUNCS_EXTRA = $(srcdir)/config/xtensa/lib2funcs.S\n \n-$(T)crti.o: $(srcdir)/config/xtensa/crti.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crti.o -x assembler-with-cpp $(srcdir)/config/xtensa/crti.asm\n-$(T)crtn.o: $(srcdir)/config/xtensa/crtn.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/xtensa/crtn.asm\n-\n $(out_object_file): gt-xtensa.h"}, {"sha": "68473c1d8880f118d8fe9c560414a62f449b4233", "filename": "gcc/configure", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -645,7 +645,6 @@ gcc_config_arguments\n float_h_file\n extra_programs\n extra_passes\n-extra_parts\n extra_objs\n extra_headers_list\n user_headers_inc_next_post\n@@ -18069,7 +18068,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18072 \"configure\"\n+#line 18071 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -18175,7 +18174,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18178 \"configure\"\n+#line 18177 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -27018,7 +27017,6 @@ fi\n \n \n \n-\n \n \n # Echo link setup."}, {"sha": "14bd614313057ac323c4632ea842db099bd6bf4b", "filename": "gcc/configure.ac", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -4947,7 +4947,6 @@ AC_SUBST(user_headers_inc_next_pre)\n AC_SUBST(user_headers_inc_next_post)\n AC_SUBST(extra_headers_list)\n AC_SUBST(extra_objs)\n-AC_SUBST(extra_parts)\n AC_SUBST(extra_passes)\n AC_SUBST(extra_programs)\n AC_SUBST(float_h_file)"}, {"sha": "e8c56e0356c32a014d2bea502216df2443601686", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,3 +1,7 @@\n+2011-11-02  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* EXCLUDES (crtstuff.c): Remove.\n+\n 2011-10-30  Joseph Myers  <joseph@codesourcery.com>\n \n \t* ja.po: Update."}, {"sha": "31e995b56d1f9eb7fe38584b0c958c56fd3ecf0d", "filename": "gcc/po/EXCLUDES", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fpo%2FEXCLUDES", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/gcc%2Fpo%2FEXCLUDES", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FEXCLUDES?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -23,7 +23,6 @@\n \n #   These files are part of libgcc, or target headers provided by gcc.\n config/vxlib.c\n-crtstuff.c\n gbl-ctors.h\n gcov-io.h\n gcov-iov.c"}, {"sha": "b5d9c243a9813672091c78a92a0476335a1d7180", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 274, "deletions": 0, "changes": 274, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,3 +1,277 @@\n+2011-11-02  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* crtstuff.c: New file.\n+\t* Makefile.in (CRTSTUFF_CFLAGS): Define.\n+\t(CRTSTUFF_T_CFLAGS): Define.\n+\t(extra-parts, INSTALL_PARTS): Remove conditional assignments.\n+\t(crtbegin$(objext), crtend$(objext), crtbeginS$(objext))\n+\t(crtendS$(objext), crtbeginT.o): Use $(srcdir) to refer to\n+\tcrtstuff.c.\n+\tUse $<.\n+\t(crtbeginT.o): Use $(objext).\n+\t[!CUSTOM_CRTIN] (crti$(objext), crtn$(objext)): New rules.\n+\t(libgcc-extra-parts): Don't compare EXTRA_PARTS, GCC_EXTRA_PARTS.\n+\t(gcc-extra-parts): Remove.\n+\t* config.host (*-*-freebsd*): Add t-crtstuff-pic to tmake_file.\n+\tSet extra_parts.\n+\t(*-*-linux*, frv-*-*linux*, *-*-kfreebsd*-gnu, *-*-knetbsd*-gnu,\n+\t*-*-gnu*): Also handle *-*-kopensolaris*-gnu.\n+\tAdd t-crtstuff-pic to tmake_file.\n+\t(*-*-lynxos*): New case.\n+\tSet tmake_file, extra_parts.\n+\t(*-*-netbsd*): Add t-crtstuff-pic to tmake_file.\n+\tSet extra_parts for *-*-netbsd*1.[7-9]*, *-*-netbsd[2-9]*,\n+\t*-*-netbsdelf[2-9]*.\n+\t(*-*-openbsd*): Add t-crtstuff-pic to tmake_file.\n+\t(*-*-rtems*): Set extra_parts.\n+\t(*-*-solaris2*): Remove t-crtin from tmake_file for Solaris < 10.\n+\t(*-*-uclinux*): New case.\n+\tSet extra_parts.\n+\t(*-*-vms*): New case.\n+\tSet tmake_file, extra_parts.\n+\t(*-*-elf): Set extra_parts.\n+\t(alpha*-*-freebsd*): Add crtbeginT.o to extra_parts.\n+\t(alpha64-dec-*vms*): Append to tmake_file, remove vms/t-vms,\n+\tvms/t-vms64.\n+\tSet extra_parts.\n+\t(alpha*-dec-*vms*): Append to tmake_file, remove vms/t-vms.\n+\tSet extra_parts.\n+\t(arm*-*-freebsd*): Add t-crtin to tmake_file.\n+\tAdd crtbegin.o, crtend.o, crti.o, crtn.o to extra_parts.\n+\t(arm-wrs-vxworks): Append to tmake_file.\n+\tSet extra_parts.\n+\t(arm*-*-uclinux*): Set extra_parts.\n+\t(arm*-*-ecos-elf): Likewise.\n+\t(arm*-*-eabi*, arm*-*-symbianelf*): Set extra_parts for\n+\tarm*-*-eabi*.\n+\t(arm*-*-rtems*): Set extra_parts.\n+\t(arm*-*-elf): Likewise.\n+\t(avr-*-rtems*): Clear extra_parts.\n+\t(bfin*-elf*): Add bfin/t-crtlibid, bfin/t-crtstuff to extra_parts.\n+\tSet extra_parts.\n+\t(bfin*-uclinux*): Likewise.\n+\t(bfin*-linux-uclibc*): Add bfin/t-crtstuff to tmake_file.\n+\t(bfin*-rtems*): Append to tmake_file.\n+\tSet extra_parts.\n+\t(bfin*-*): Likewise.\n+\t(crisv32-*-elf, crisv32-*-none, cris-*-elf, cris-*-none): Split into ...\n+\t(crisv32-*-elf): ... this.\n+\t(crisv32-*-none): ... this.\n+\t(cris-*-elf, cris-*-none): New cases.\n+\tAdd cris/t-elfmulti to tmake_file.\n+\t(fr30-*-elf): Append to tmake_file.\n+\tSet extra_parts.\n+\t(frv-*-elf): Append to tmake_file, add frv/t-frv.\n+\tSet extra_parts.\n+\t(h8300-*-rtems*): Append to tmake_file.\n+\tSet extra_parts.\n+\t(h8300-*-elf*): Likewise.\n+\t(hppa*64*-*-hpux11*): Add pa/t-stublib, pa/t-stublib64 to tmake_file.\n+\tSet extra_parts.\n+\t(hppa[12]*-*-hpux11*): Add pa/t-stublib to tmake_file.\n+\tSet extra_parts.\n+\t(i[34567]86-*-elf*): Add i386/t-crtstuff, t-crtstuff-pic to tmake_file.\n+\t(x86_64-*-elf*): Likewise.\n+\t(i[34567]86-*-freebsd*): Add i386/t-crtstuff to tmake_file.\n+\t(x86_64-*-freebsd*): Likewise.\n+\t(x86_64-*-netbsd*): Likewise.\n+\t(i[34567]86-*-linux*): Likewise.\n+\t(i[34567]86-*-kfreebsd*-gnu, i[34567]86-*-knetbsd*-gnu)\n+\t(i[34567]86-*-gnu*, i[34567]86-*-kopensolaris*-gnu): Likewise.\n+\t(x86_64-*-linux*): Likewise.\n+\t(x86_64-*-kfreebsd*-gnu, x86_64-*-knetbsd*-gnu): Likewise.\n+\t(i[34567]86-*-lynxos*): Add t-crtstuff-pic, i386/t-crtstuff to\n+\ttmake_file.\n+\tSet extra_parts.\n+\t(i[34567]86-*-nto-qnx*): Set tmake_file, extra_parts.\n+\t(i[34567]86-*-rtems*): Append to tmake_file, remove t-crtin.\n+\tAppend to extra_parts, remove crtbegin.o, crtend.o.\n+\t(ia64*-*-elf*): Append to extra_parts, remove crtbegin.o, crtend.o.\n+\t(ia64*-*-freebsd*): Append to extra_parts, remove crtbegin.o,\n+\tcrtend.o, crtbeginS.o, crtendS.o.\n+\t(ia64*-*-linux*): Comment extra_parts.\n+\t(ia64-hp-*vms*): Append to tmake_file, remove vms/t-vms, vms/t-vms64.\n+\tSet extra_parts.\n+\t(iq2000*-*-elf*): Clear extra_parts.\n+\t(lm32-*-elf*, lm32-*-rtems*): Add t-crtin to tmake_file.\n+\t(lm32-*-uclinux*): Add to extra_parts, remove crtbegin.o, crtend.o\n+\t(m32r-*-elf*, m32r-*-rtems*): Split off ...\n+\t(m32r-*-rtems*): ... this.\n+\tAdd m32r/t-m32r to tmake_file.\n+\t(m68k-*-elf*): Add t-crtin to tmake_file.\n+\t(m68k-*-rtems*): Add crti.o, crtn.o to extra_parts.\n+\t(mcore-*-elf): Likewise.\n+\t(microblaze*-*-*): Set extra_parts.\n+\t(mips*-sde-elf*): New case.\n+\tSet tmake_file, extra_parts.\n+\t(mipsisa32-*-elf*, mipsisa32el-*-elf*, mipsisa32r2-*-elf*)\n+\t(mipsisa32r2el-*-elf*, mipsisa64-*-elf*, mipsisa64el-*-elf*)\n+\t(mipsisa64r2-*-elf*, mipsisa64r2el-*-elf*): Add mips/t-crtstuff to\n+\ttmake_file.\n+\tSet extra_parts.\n+\t(mipsisa64sr71k-*-elf*): Likewise.\n+\t(mipsisa64sb1-*-elf*, mipsisa64sb1el-*-elf*): Likewise.\n+\t(mips-*-elf*, mipsel-*-elf*): Likewise.\n+\t(mips64-*-elf*, mips64el-*-elf*): Likewise.\n+\t(mips64vr-*-elf*, mips64vrel-*-elf*): Likewise.\n+\t(mips64orion-*-elf*,  mips64orionel-*-elf*): Likewise.\n+\t(mips*-*-rtems*): Likewise.\n+\t(mipstx39-*-elf*, mipstx39el-*-elf*): Likewise.\n+\t(moxie-*-*): Split into ...\n+\t(moxie-*-elf, moxie-*-uclinux*): ... this.\n+\tAdd to extra_parts, remove crtbegin.o, crtend.o.\n+\t(moxie-*-rtems*): New case.\n+\tSet tmake_file.\n+\tClear extra_parts.\n+\t(powerpc-*-freebsd*): Add rs6000/t-crtstuff to tmake_file.\n+\tSet extra_parts.\n+\t(powerpc-*-netbsd*): Add rs6000/t-netbsd to tmake_file.\n+\t(powerpc-*-eabispe*): Add rs6000/t-crtstuff, t-crtstuff-pic to\n+\ttmake_file.\n+\tSet extra_parts.\n+\t(powerpc-*-eabisimaltivec*): Add to tmake_file, add rs6000/t-ppccomm,\n+\trs6000/t-crtstuff, t-crtstuff-pic to tmake_file.\n+\tSet extra_parts.\n+\t(powerpc-*-eabisim*): Likewise.\n+\t(powerpc-*-elf*): Likewise.\n+\t(powerpc-*-eabialtivec*): Likewise.\n+\t(powerpc-xilinx-eabi*): Likewise.\n+\t(powerpc-*-eabi*): Likewise.\n+\t(powerpc-*-rtems*): Likewise.\n+\t(powerpc-*-linux*, powerpc64-*-linux*): Add rs6000/t-crtstuff to\n+\ttmake_file.\n+\tSet extra_parts.\n+\t(powerpc-*-lynxos*): Add to tmake_file.\n+\t(powerpcle-*-elf*): Add to tmake_file, add rs6000/t-ppccomm,\n+\trs6000/t-crtstuff, t-crtstuff-pic.\n+\tSet extra_parts.\n+\t(powerpcle-*-eabisim*): Likewise.\n+\t(powerpcle-*-eabi*): Likewise.\n+\t(rx-*-elf): Remove extra_parts.\n+\t(s390x-ibm-tpf*): Set extra_parts.\n+\t(score-*-elf): Set extra_parts.\n+\t(sh-*-elf*, sh[12346l]*-*-elf*, sh-*-linux*)\n+\t(sh[2346lbe]*-*-linux*, sh-*-netbsdelf*, shl*-*-netbsdelf*)\n+\t(sh5-*-netbsd*, sh5l*-*-netbsd*, sh64-*-netbsd*)\n+\t(sh64l*-*-netbsd*): Split into ...\n+\t(sh-*-elf*, sh[12346l]*-*-elf*): ... this.\n+\tAdd t-crtstuff-pic to tmake_file.\n+\tSet extra_parts.\n+\t(sh-*-rtems*): Add to tmake_file, add t-crtstuff-pic.\n+\tSet extra_parts.\n+\t(sh-wrs-vxworks): Add to tmake_file, add t-crtstuff-pic.\n+\t(sparc-*-elf*): Remove t-crtin from tmake_file.\n+\tAdd to extra_parts, remove crtbegin.o, crtend.o.\n+\t(sparc-*-linux*): Add sparc/t-linux64 to tmake_file.\n+\t(sparc64-*-linux*): Likewise.\n+\t(sparc-*-rtems*): Remove sparc/t-elf from tmake_file.\n+\tAdd to extra_parts, remove crtbegin.o, crtend.o.\n+\t(sparc64-*-elf*): Remove t-crtin from tmake_file.\n+\tAdd to extra_parts, remove crtbegin.o, crtend.o.\n+\t(sparc64-*-rtems*): Remove t-crtin from tmake_file.\n+\tAdd to extra_parts, remove crtbegin.o, crtend.o.\n+\t(sparc64-*-freebsd*, ultrasparc-*-freebsd*): Add to extra_parts.\n+\t(sparc64-*-linux*): Add sparc/t-linux64 to tmake_file.\n+\t(spu-*-elf*): Add to tmake_file, add spu/t-elf.\n+\tSet extra_parts.\n+\t(tic6x-*-uclinux): Add c6x/t-uxlinux, t-crtstuff-pic to tmake_file.\n+\tSet extra_parts.\n+\t(tic6x-*-*): Change to ...\n+\t(tic6x-*-elf): ... this.\n+\tSet extra_parts.\n+\t(xtensa*-*-elf*): Add to tmake_file, add xtensa/t-elf.\n+\tSet extra_parts.\n+\t(am33_2.0-*-linux*): Add comment.\n+\t(mep*-*-*): Add mep/t-mep to tmake_file.\n+\tSet extra_parts.\n+\t* config/alpha/t-vms: New file.\n+\t* config/alpha/vms-dwarf2.S, config/alpha/vms-dwarf2eh.S: New files.\n+\t* config/arm/crti.S, config/arm/crtn.S: New files.\n+\t* config/bfin/crti.S, config/bfin/crtn.S: New files.\n+\t* config/bfin/crtlibid.S: New file.\n+\t* config/bfin/t-crtlibid, config/bfin/t-crtstuff: New files.\n+\t* config/c6x/crti.S, config/c6x/crtn.S: New files.\n+\t* config/c6x/t-elf (CUSTOM_CRTIN): Set.\n+\t(crti.o, crtin.o): New rules.\n+\t(CRTSTUFF_T_CFLAGS, CRTSTUFF_T_CFLAGS_S): Set.\n+\t* config/c6x/t-uclinux: New file.\n+\t* config/cris/t-elfmulti: New file.\n+\t* config/cris/t-linux (CRTSTUFF_T_CFLAGS_S): Set.\n+\t* config/fr30/crti.S, config/fr30/crtn.S: New files.\n+\t* config/frv/frvbegin.c, config/frv/frvend.c: New files.\n+\t* config/frv/t-frv: New file.\n+\t* config/frv/t-linux (CRTSTUFF_T_CFLAGS): Set.\n+\t* config/h8300/crti.S, config/h8300/crtn.S: New files.\n+\t* config/i386/cygming-crtbegin.c, config/i386/cygming-crtend.c:\n+\tNew files.\n+\t* config/i386/t-cygming (crtbegin.o, crtend.o): Use $(srcdir) to\n+\trefer to cygming-crtbegin.c, cygming-crtend.c.\n+\tUse $<.\n+\t* config/i386/t-nto: New file.\n+\t* config/ia64/crtbegin.S, config/ia64/crtend.S: New files.\n+\t* config/ia64/crti.S, config/ia64/crtn.S: New files.\n+\t* config/ia64/t-ia64 (crtbegin.o, crtend.o, crtbeginS.o,\n+\tcrtendS.o): Use $(srcdir) to refer to crtbegin.S, crtend.S.\n+\tUse .S extension.\n+\tUse $<.\n+\t* config/ia64/t-vms (CRTSTUFF_T_CFLAGS, CRTSTUFF_T_CFLAGS_S): Set.\n+\t(crtinitS.o): New rule.\n+\t* config/ia64/vms-crtinit.S: New file.\n+\t* config/lm32/t-elf ($(T)crti.o, $(T)crtn.o): Remove.\n+\t* config/m32r/initfini.c: New file.\n+\t* config/m32r/t-linux, config/m32r/t-m32r: New files.\n+\t* config/m68k/crti.S, config/m68k/crtn.S: New files.\n+\t* config/mcore/crti.S, config/mcore/crtn.S: New files.\n+\t* config/mep/t-mep: New file.\n+\t* config/microblaze/crti.S, config/microblaze/crtn.S: New files.\n+\t* config/microblaze/t-microblaze (MULTILIB_OPTIONS): Remove.\n+\t* config/mips/crti.S, config/mips/crtn.S: New files.\n+\t* config/mips/t-crtstuff: New file.\n+\t* config/mmix/crti.S, config/mmix/crtn.S: New files.\n+\t* config/mmix/t-mmix (CRTSTUFF_T_CFLAGS): Set.\n+\t(CUSTOM_CRTIN): Set.\n+\t($(T)crti.o, $(T)crtn.o): Remove $(T),\n+\tdependencies.\n+\tUse $(srcdir) to refer to crti.S, crtn.S.\n+\tUse .S extension, $<.\n+\t* config/moxie/crti.asm: Rename to ...\n+\t* config/moxie/crti.S: ... this.\n+\t* config/moxie/crtn.asm: Rename to ...\n+\t* config/moxie/crtn.S: ... this.\n+\t* config/moxie/t-moxie: Remove.\n+\t* config/pa/stublib.c: New file.\n+\t* config/pa/t-stublib, config/pa/t-stublib64: New files.\n+\t* config/rs6000/eabi-ci.S, config/rs6000/eabi-cn.S: New files.\n+\t* config/rs6000/sol-ci.S, config/rs6000/sol-cn.S: New files.\n+\t* config/rs6000/t-crtstuff: New file.\n+\t* config/rs6000/t-ppccomm (EXTRA_PARTS): Remove.\n+\t(ecrti.S, ecrtn.S, ncrti.S, ncrtn.S): Remove.\n+\t(ecrti$(objext)): Depend on $(srcdir)/config/rs6000/eabi-ci.S.\n+\tMake output file explicit.\n+\t(ecrtn$(objext)): Depend on $(srcdir)/config/rs6000/eabi-cn.S.\n+\tMake output file explicit.\n+\t(ncrti$(objext): Depend on $(srcdir)/config/rs6000/sol-ci.S.\n+\tMake output file explicit.\n+\t(ncrtn$(objext)): Depend on $(srcdir)/config/rs6000/sol-cn.S.\n+\tMake output file explicit.\n+\t* config/score/crti.S, config/score/crtn.S: New files.\n+\t* config/sh/crt1.S, config/sh/crti.S, config/sh/crtn.S: New files.\n+\t* config/sh/lib1funcs-4-300.S, config/sh/lib1funcs-Os-4-200.S: New\n+\tfiles.\n+\t* config/sh/t-sh, config/sh/t-superh: New files.\n+\t* config/sparc/t-linux64: New file.\n+\t* config/spu/cache.S, config/spu/cachemgr.c: New files.\n+\t* config/spu/t-elf (CRTSTUFF_T_CFLAGS): Set.\n+\t(cachemgr.o, cachemgr_nonatomic.o, libgcc_%.a, cache8k.o)\n+\t(cache16k.o, cache32k.o, cache64k.o, cache128k.o): New rules.\n+\t* config/t-crtin: Remove.\n+\t* config/t-crtstuff-pic: New file.\n+\t* config/t-sol2 (CUSTOM_CRTIN): Set.\n+\t(crti.o, crtn.o): New rules.\n+\t* config/vms/t-vms: New file.\n+\t* config/vms/vms-ucrt0.c: New file.\n+\t* config/xtensa/t-elf: New file.\n+\n 2011-11-02  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* Makefile.in (SHLIB_NM_FLAGS): Set."}, {"sha": "467901b057a202a57fb4a680b1df0f3e69dc40c3", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 35, "deletions": 75, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -50,6 +50,8 @@ target_noncanonical = @target_noncanonical@\n # The rules for compiling them should be in the t-* file for the machine.\n EXTRA_PARTS = @extra_parts@\n \n+extra-parts = libgcc-extra-parts\n+\n # Multilib support variables.\n MULTISRCTOP =\n MULTIBUILDTOP =\n@@ -62,6 +64,7 @@ INSTALL = @INSTALL@\n INSTALL_PROGRAM = @INSTALL_PROGRAM@\n INSTALL_DATA = @INSTALL_DATA@\n mkinstalldirs = $(SHELL) $(libgcc_topdir)/mkinstalldirs\n+INSTALL_PARTS = $(EXTRA_PARTS)\n \n objext = .o\n \n@@ -238,6 +241,16 @@ override CFLAGS := $(filter-out -fprofile-generate -fprofile-use,$(CFLAGS))\n INTERNAL_CFLAGS = $(CFLAGS) $(LIBGCC2_CFLAGS) $(HOST_LIBGCC2_CFLAGS) \\\n \t\t  $(INCLUDES) @set_have_cc_tls@ @set_use_emutls@\n \n+# Options to use when compiling crtbegin/end.\n+CRTSTUFF_CFLAGS = -O2 $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -g0 \\\n+  -finhibit-size-directive -fno-inline -fno-exceptions \\\n+  -fno-zero-initialized-in-bss -fno-toplevel-reorder -fno-tree-vectorize \\\n+  -fno-stack-protector \\\n+  $(INHIBIT_LIBC_CFLAGS)\n+\n+# Extra flags to use when compiling crt{begin,end}.o.\n+CRTSTUFF_T_CFLAGS =\n+\n MULTIDIR := $(shell $(CC) $(CFLAGS) -print-multi-directory)\n MULTIOSDIR := $(shell $(CC) $(CFLAGS) -print-multi-os-directory)\n \n@@ -335,16 +348,6 @@ vis_hide =\n gen-hide-list = echo > \\$@\n endif\n \n-ifneq ($(EXTRA_PARTS),)\n-  extra-parts = libgcc-extra-parts\n-  INSTALL_PARTS = $(EXTRA_PARTS)\n-else\n-ifneq ($(GCC_EXTRA_PARTS),)\n-  extra-parts = gcc-extra-parts\n-  INSTALL_PARTS = $(GCC_EXTRA_PARTS)\n-endif\n-endif\n-\n LIB2ADD += enable-execute-stack.c\n \n LIB2ADDEH += $(srcdir)/emutls.c\n@@ -900,45 +903,39 @@ ALL_CRT_CFLAGS = $(CFLAGS) $(CRTSTUFF_CFLAGS) $(INCLUDES)\n crt_compile = $(CC) $(ALL_CRT_CFLAGS) -o $@ $(compile_deps)\n \n ifeq ($(CUSTOM_CRTSTUFF),)\n-crtbegin$(objext): $(gcc_srcdir)/crtstuff.c\n-\t$(crt_compile) $(CRTSTUFF_T_CFLAGS) \\\n-\t  -c $(gcc_srcdir)/crtstuff.c -DCRT_BEGIN\n+# Compile two additional files that are linked with every program\n+# linked using GCC on systems using COFF or ELF, for the sake of C++\n+# constructors.\n+crtbegin$(objext): $(srcdir)/crtstuff.c\n+\t$(crt_compile) $(CRTSTUFF_T_CFLAGS) -c $< -DCRT_BEGIN\n \n-crtend$(objext): $(gcc_srcdir)/crtstuff.c\n-\t$(crt_compile) $(CRTSTUFF_T_CFLAGS) \\\n-\t  -c $(gcc_srcdir)/crtstuff.c -DCRT_END\n+crtend$(objext): $(srcdir)/crtstuff.c\n+\t$(crt_compile) $(CRTSTUFF_T_CFLAGS) -c $< -DCRT_END\n \n # These are versions of crtbegin and crtend for shared libraries.\n-crtbeginS$(objext): $(gcc_srcdir)/crtstuff.c\n-\t$(crt_compile) $(CRTSTUFF_T_CFLAGS_S) \\\n-\t  -c $(gcc_srcdir)/crtstuff.c -DCRT_BEGIN -DCRTSTUFFS_O\n+crtbeginS$(objext): $(srcdir)/crtstuff.c\n+\t$(crt_compile) $(CRTSTUFF_T_CFLAGS_S) -c $< -DCRT_BEGIN -DCRTSTUFFS_O\n \n-crtendS$(objext): $(gcc_srcdir)/crtstuff.c\n-\t$(crt_compile) $(CRTSTUFF_T_CFLAGS_S) \\\n-\t  -c $(gcc_srcdir)/crtstuff.c -DCRT_END -DCRTSTUFFS_O\n+crtendS$(objext): $(srcdir)/crtstuff.c\n+\t$(crt_compile) $(CRTSTUFF_T_CFLAGS_S) -c $< -DCRT_END -DCRTSTUFFS_O\n \n # This is a version of crtbegin for -static links.\n-crtbeginT.o: $(gcc_srcdir)/crtstuff.c\n-\t$(crt_compile) $(CRTSTUFF_T_CFLAGS) \\\n-\t  -c $(gcc_srcdir)/crtstuff.c -DCRT_BEGIN -DCRTSTUFFT_O\n+crtbeginT$(objext): $(srcdir)/crtstuff.c\n+\t$(crt_compile) $(CRTSTUFF_T_CFLAGS) -c $< -DCRT_BEGIN -DCRTSTUFFT_O\n+endif\n+\n+ifeq ($(CUSTOM_CRTIN),)\n+# -x assembler-with-cpp is only needed on case-insensitive filesystem.\n+crti$(objext): $(srcdir)/config/$(cpu_type)/crti.S\n+\t$(crt_compile) -c -x assembler-with-cpp $<\n+\n+crtn$(objext): $(srcdir)/config/$(cpu_type)/crtn.S\n+\t$(crt_compile) -c -x assembler-with-cpp $<\n endif\n \n # Build extra startfiles in the libgcc directory.\n .PHONY: libgcc-extra-parts\n libgcc-extra-parts: $(EXTRA_PARTS)\n-ifneq ($(GCC_EXTRA_PARTS),)\n-ifneq ($(sort $(EXTRA_PARTS)),$(GCC_EXTRA_PARTS))\n-\t# If the gcc directory specifies which extra parts to\n-\t# build for this target, and the libgcc configuration also\n-\t# specifies, make sure they match.  This can be removed\n-\t# when the gcc directory no longer holds libgcc configuration;\n-\t# it is useful when migrating a target.\n-\t@echo \"Configuration mismatch!\"\n-\t@echo \"Extra parts from gcc directory: $(GCC_EXTRA_PARTS)\"\n-\t@echo \"Extra parts from libgcc: $(EXTRA_PARTS)\"\n-\texit 1\n-endif\n-endif\n \n \t# Early copyback; see \"all\" above for the rationale.  The\n \t# early copy is necessary so that the gcc -B options find\n@@ -954,43 +951,6 @@ endif\n \t  esac;\t\t\t\t\t\t\t\\\n \tdone\n \n-# Build extra startfiles in the gcc directory, for unconverted\n-# targets.\n-.PHONY: gcc-extra-parts\n-gcc-extra-parts:\n-\t# Recursively invoke make in the GCC directory to build any\n-\t# startfiles (for now).  We must do this just once, passing\n-\t# it all the GCC_EXTRA_PARTS as simultaneous goal targets,\n-\t# so that rules which cannot execute simultaneously are properly\n-\t# serialized.  We indirect through T_TARGET in case any multilib\n-\t# directories contain an equals sign, to prevent make from\n-\t# interpreting any of the goals as variable assignments.\n-\n-\t# We must use cd && make rather than make -C, or else the stage\n-\t# number will be embedded in debug information.\n-\n-\tT=`$(PWD_COMMAND)`/ \\\n-\t&& cd $(gcc_objdir) \\\n-\t&& $(MAKE) GCC_FOR_TARGET=\"$(CC)\" \\\n-\t  MULTILIB_CFLAGS=\"$(CFLAGS)\" \\\n-\t  T=$$T \\\n-\t  T_TARGET=\"$(patsubst %,$${T}%,$(GCC_EXTRA_PARTS))\" \\\n-\t  T_TARGET\n-\n-\t# Early copyback; see \"all\" above for the rationale.  The\n-\t# early copy is necessary so that the gcc -B options find\n-\t# the right startup files when linking shared libgcc.\n-\t$(mkinstalldirs) $(gcc_objdir)$(MULTISUBDIR)\n-\tparts=\"$(GCC_EXTRA_PARTS)\";\t\t\t\t\\\n-\tfor file in $$parts; do\t\t\t\t\t\\\n-\t  rm -f $(gcc_objdir)$(MULTISUBDIR)/$$file;\t\t\\\n-\t  $(INSTALL_DATA) $$file $(gcc_objdir)$(MULTISUBDIR)/;\t\\\n-\t  case $$file in \t\t\t\t\t\\\n-\t    *.a)\t\t\t\t\t\t\\\n-\t      $(RANLIB) $(gcc_objdir)$(MULTISUBDIR)/$$file ;;\t\\\n-\t  esac;\t\t\t\t\t\t\t\\\n-\tdone\n-\n all: $(extra-parts)\n \n install-unwind_h:"}, {"sha": "01e2f21a7978bf23c0903df502489cb712b0fbd5", "filename": "libgcc/config.host", "status": "modified", "additions": 216, "deletions": 100, "changes": 316, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -179,7 +179,8 @@ case ${host} in\n   # This is the generic ELF configuration of FreeBSD.  Later\n   # machine-specific sections may refine and add to this\n   # configuration.\n-  tmake_file=\"$tmake_file t-eh-dw2-dip t-slibgcc t-slibgcc-gld t-slibgcc-elf-ver\"\n+  tmake_file=\"$tmake_file t-crtstuff-pic t-eh-dw2-dip t-slibgcc t-slibgcc-gld t-slibgcc-elf-ver\"\n+  extra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o\"\n   case ${target_thread_file} in\n     posix)\n       # Before 5.0, FreeBSD can't bind shared libraries to -lc\n@@ -193,15 +194,29 @@ case ${host} in\n   esac\n   ;;\n *-*-linux* | frv-*-*linux* | *-*-kfreebsd*-gnu | *-*-knetbsd*-gnu | *-*-gnu* | *-*-kopensolaris*-gnu)\n-  tmake_file=\"$tmake_file t-eh-dw2-dip t-slibgcc t-slibgcc-gld t-slibgcc-elf-ver t-linux\"\n+  tmake_file=\"$tmake_file t-crtstuff-pic t-eh-dw2-dip t-slibgcc t-slibgcc-gld t-slibgcc-elf-ver t-linux\"\n   extra_parts=\"crtbegin.o crtbeginS.o crtbeginT.o crtend.o crtendS.o\"\n   ;;\n+*-*-lynxos*)\n+  tmake_file=\"$tmake_file $cpu_type/t-crtstuff t-crtstuff-pic\"\n+  extra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n+  ;;\n *-*-netbsd*)\n-  tmake_file=\"$tmake_file t-slibgcc t-slibgcc-gld t-slibgcc-elf-ver\"\n+  tmake_file=\"$tmake_file t-crtstuff-pic t-slibgcc t-slibgcc-gld t-slibgcc-elf-ver\"\n+  # NetBSD 1.7 and later are set up to use GCC's crtstuff for\n+  # ELF configurations.  We will clear extra_parts in the\n+  # a.out configurations.\n+  case ${host} in\n+    *-*-netbsd*1.[7-9]* | *-*-netbsd[2-9]* | *-*-netbsdelf[2-9]*)\n+      extra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o\"\n+      ;;\n+  esac\n   ;;\n *-*-openbsd*)\n+  tmake_file=\"$tmake_file t-crtstuff-pic\"\n   ;;\n *-*-rtems*)\n+  extra_parts=\"crtbegin.o crtend.o\"\n   ;;\n *-*-solaris2*)\n   # Unless linker support and dl_iterate_phdr are present,\n@@ -225,14 +240,21 @@ case ${host} in\n       extra_parts=\"$extra_parts crt1.o gcrt1.o\"\n       ;;\n     *)\n-      tmake_file=\"$tmake_file t-crtin\"\n       extra_parts=\"$extra_parts crt1.o crti.o crtn.o gcrt1.o\"\n       ;;\n   esac\n   ;;\n+*-*-uclinux*)\n+  extra_parts=\"crtbegin.o crtend.o\"\n+  ;;\n+*-*-*vms*)\n+  tmake_file=\"vms/t-vms\"\n+  extra_parts=\"vcrt0.o pcrt0.o crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n+  ;;\n *-*-vxworks*)\n   ;;\n *-*-elf)\n+  extra_parts=\"crtbegin.o crtend.o\"\n   ;;\n esac\n \n@@ -257,7 +279,7 @@ alpha*-*-linux*)\n \t;;\n alpha*-*-freebsd*)\n \ttmake_file=\"${tmake_file} t-crtfm\"\n-\textra_parts=\"$extra_parts crtfastmath.o\"\n+\textra_parts=\"$extra_parts crtbeginT.o crtfastmath.o\"\n \t;;\n alpha*-*-netbsd*)\n \t;;\n@@ -274,15 +296,18 @@ alpha*-dec-osf5.1*)\n \tmd_unwind_header=alpha/osf5-unwind.h\n \t;;\n alpha64-dec-*vms*)\n-\ttmake_file=\"vms/t-vms vms/t-vms64 alpha/t-vms t-slibgcc-vms\"\n+\ttmake_file=\"$tmake_file alpha/t-vms t-slibgcc-vms\"\n+\textra_parts=\"$extra_parts vms-dwarf2.o vms-dwarf2eh.o\"\n \tmd_unwind_header=alpha/vms-unwind.h\n \t;;\n alpha*-dec-*vms*)\n-\ttmake_file=\"vms/t-vms alpha/t-vms t-slibgcc-vms\"\n+\ttmake_file=\"$tmake_file alpha/t-vms t-slibgcc-vms\"\n+\textra_parts=\"$extra_parts vms-dwarf2.o vms-dwarf2eh.o\"\n \tmd_unwind_header=alpha/vms-unwind.h\n \t;;\n arm-wrs-vxworks)\n-\ttmake_file=t-fdpbit\n+\ttmake_file=\"$tmake_file t-fdpbit\"\n+\textra_parts=\"$extra_parts crti.o crtn.o\"\n \t;;\n arm*-*-freebsd*)\n \ttmake_file=\"$tmake_file t-fdpbit\"\n@@ -309,81 +334,108 @@ arm*-*-uclinux*)\t\t# ARM ucLinux\n \t  ;;\n \tesac\n \ttmake_file=\"$tmake_file t-softfp-sfdf t-softfp-excl arm/t-softfp t-softfp\"\n+\textra_parts=\"$extra_parts crti.o crtn.o\"\n \t;;\n arm*-*-ecos-elf)\n \ttmake_file=\"$tmake_file t-softfp-sfdf t-softfp-excl arm/t-softfp t-softfp\"\n+\textra_parts=\"$extra_parts crti.o crtn.o\"\n \t;;\n arm*-*-eabi* | arm*-*-symbianelf* )\n \ttmake_file=\"${tmake_file} t-fixedpoint-gnu-prefix\"\n \tcase ${host} in\n \tarm*-*-eabi*)\n \t  tmake_file=\"${tmake_file} arm/t-bpabi\"\n+\t  extra_parts=\"crtbegin.o crtend.o crti.o crtn.o\"\n \t  ;;\n \tarm*-*-symbianelf*)\n \t  tmake_file=\"${tmake_file} arm/t-symbian t-slibgcc-nolc-override\"\n+\t  # Symbian OS provides its own startup code.\n \t  ;;\n \tesac\n \ttmake_file=\"$tmake_file t-softfp-sfdf t-softfp-excl arm/t-softfp t-softfp\"\n \tunwind_header=config/arm/unwind-arm.h\n \t;;\n arm*-*-rtems*)\n \ttmake_file=\"$tmake_file t-softfp-sfdf t-softfp-excl arm/t-softfp t-softfp\"\n+\textra_parts=\"$extra_parts crti.o crtn.o\"\n \t;;\n arm*-*-elf)\n \ttmake_file=\"$tmake_file t-softfp-sfdf t-softfp-excl arm/t-softfp t-softfp\"\n+\textra_parts=\"$extra_parts crti.o crtn.o\"\n \t;;\n arm*-wince-pe*)\n \t;;\n avr-*-rtems*)\n \ttmake_file=t-fpbit\n+\t# Don't use default.\n+\textra_parts=\n \t;;\n avr-*-*)\n \t# Make HImode functions for AVR\n \ttmake_file=\"${cpu_type}/t-avr t-fpbit\"\n \t;;\n bfin*-elf*)\n-\ttmke_file=t-fdpbit\n+\ttmake_file=\"bfin/t-crtlibid bfin/t-crtstuff t-fdpbit\"\n+\textra_parts=\"$extra_parts crtbeginS.o crtendS.o crti.o crtn.o crtlibid.o\"\n         ;;\n bfin*-uclinux*)\n-\ttmake_file=t-fdpbit\n+\ttmake_file=\"bfin/t-crtlibid bfin/t-crtstuff t-fdpbit\"\n+\textra_parts=\"$extra_parts crtbeginS.o crtendS.o crtlibid.o\"\n \tmd_unwind_header=bfin/linux-unwind.h\n         ;;\n bfin*-linux-uclibc*)\n-\ttmake_file=\"$tmake_file t-fdpbit bfin/t-linux\"\n+\ttmake_file=\"$tmake_file bfin/t-crtstuff t-fdpbit bfin/t-linux\"\n \t# No need to build crtbeginT.o on uClibc systems.  Should probably\n \t# be moved to the OS specific section above.\n \textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n \tmd_unwind_header=bfin/linux-unwind.h\n \t;;\n bfin*-rtems*)\n-\ttmake_file=t-fdpbit\n+\ttmake_file=\"$tmake_file t-fdpbit\"\n+\textra_parts=\"$extra_parts crti.o crtn.o\"\n \t;;\n bfin*-*)\n-\ttmake_file=t-fdpbit\n+\ttmake_file=\"$tmake_file t-fdpbit\"\n+\textra_parts=\"crtbegin.o crtend.o crti.o crtn.o\"\n         ;;\n-crisv32-*-elf | crisv32-*-none | cris-*-elf | cris-*-none)\n+crisv32-*-elf)\n+ \ttmake_file=t-fdpbit\n+ \t;;\n+crisv32-*-none)\n \ttmake_file=t-fdpbit\n \textra_parts=\"crtbegin.o crtend.o\"\n \t;;\n+cris-*-elf)\n+\ttmake_file=\"$tmake_file cris/t-elfmulti\"\n+\t;;\n+cris-*-none)\n+\ttmake_file=\"$tmake_file cris/t-elfmulti\"\n+ \textra_parts=\"crtbegin.o crtend.o\"\n+\t;;\n cris-*-linux* | crisv32-*-linux*)\n \ttmake_file=\"$tmake_file t-fdpbit cris/t-linux\"\n \t;;\n fido-*-elf)\n \t;;\n fr30-*-elf)\n-\ttmake_file=t-fdpbit\n+\ttmake_file=\"$tmake_file t-fdpbit\"\n+\textra_parts=\"$extra_parts crti.o crtn.o\"\n \t;;\n frv-*-elf)\n-\ttmake_file=t-fdpbit\n+\ttmake_file=\"$tmake_file frv/t-frv t-fdpbit\"\n+\t# Don't use crtbegin.o, crtend.o.\n+\textra_parts=\"frvbegin.o frvend.o\"\n \t;;\n frv-*-*linux*)\n \ttmake_file=\"$tmake_file t-fdpbit frv/t-linux\"\n \t;;\n h8300-*-rtems*)\n-\ttmake_file=t-fpbit\n+\ttmake_file=\"$tmake_file t-fpbit\"\n+\textra_parts=\"$extra_parts crti.o crtn.o\"\n \t;;\n h8300-*-elf*)\n-\ttmake_file=t-fpbit\n+\ttmake_file=\"$tmake_file t-fpbit\"\n+\textra_parts=\"$extra_parts crti.o crtn.o\"\n \t;;\n hppa*64*-*-linux*)\n \t;;\n@@ -409,25 +461,28 @@ hppa[12]*-*-hpux10*)\n \tmd_unwind_header=pa/hpux-unwind.h\n \t;;\n hppa*64*-*-hpux11*)\n-\ttmake_file=\"$tmake_file t-slibgcc\"\n+\ttmake_file=\"$tmake_file pa/t-stublib pa/t-stublib64 t-slibgcc\"\n \t# Set the libgcc version number\n \tif test x$enable_sjlj_exceptions = xyes; then\n \t    tmake_file=\"$tmake_file pa/t-slibgcc-sjlj-ver\"\n \telse\n \t    tmake_file=\"$tmake_file pa/t-slibgcc-dwarf-ver\"\n \tfi\n \ttmake_file=\"$tmake_file pa/t-slibgcc-hpux t-slibgcc-hpux\"\n+\textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o \\\n+\t\t     libgcc_stub.a\"\n \tmd_unwind_header=pa/hpux-unwind.h\n \t;;\n hppa[12]*-*-hpux11*)\n-\ttmake_file=\"$tmake_file t-slibgcc\"\n+\ttmake_file=\"$tmake_file pa/t-stublib t-slibgcc\"\n \t# Set the libgcc version number\n \tif test x$enable_sjlj_exceptions = xyes; then\n \t    tmake_file=\"$tmake_file pa/t-slibgcc-sjlj-ver\"\n \telse\n \t    tmake_file=\"$tmake_file pa/t-slibgcc-dwarf-ver\"\n \tfi\n \ttmake_file=\"$tmake_file pa/t-slibgcc-hpux t-slibgcc-hpux\"\n+\textra_parts=\"libgcc_stub.a\"\n \tmd_unwind_header=pa/hpux-unwind.h\n \t;;\n i[34567]86-*-darwin*)\n@@ -439,50 +494,55 @@ x86_64-*-darwin*)\n \textra_parts=\"$extra_parts crtprec32.o crtprec64.o crtprec80.o crtfastmath.o\"\n \t;;\n i[34567]86-*-elf*)\n+\ttmake_file=\"$tmake_file i386/t-crtstuff t-crtstuff-pic\"\n \t;;\n x86_64-*-elf*)\n+\ttmake_file=\"$tmake_file i386/t-crtstuff t-crtstuff-pic\"\n \t;;\n i[34567]86-*-freebsd*)\n-\ttmake_file=\"${tmake_file} i386/t-freebsd\"\n+\ttmake_file=\"${tmake_file} i386/t-freebsd i386/t-crtstuff\"\n \t;;\n x86_64-*-freebsd*)\n-\ttmake_file=\"${tmake_file} i386/t-freebsd\"\n+\ttmake_file=\"${tmake_file} i386/t-freebsd i386/t-crtstuff\"\n \t;;\n i[34567]86-*-netbsdelf*)\n \t;;\n x86_64-*-netbsd*)\n+\ttmake_file=\"${tmake_file} i386/t-crtstuff\"\n \t;;\n i[34567]86-*-openbsd2.*|i[34567]86-*openbsd3.[0123])\n \t;;\n i[34567]86-*-openbsd*)\n \t;;\n i[34567]86-*-linux*)\n \textra_parts=\"$extra_parts crtprec32.o crtprec64.o crtprec80.o crtfastmath.o\"\n-\ttmake_file=\"${tmake_file} i386/t-crtpc i386/t-crtfm t-dfprules\"\n+\ttmake_file=\"${tmake_file} i386/t-crtpc i386/t-crtfm i386/t-crtstuff t-dfprules\"\n \tmd_unwind_header=i386/linux-unwind.h\n \t;;\n i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-knetbsd*-gnu | i[34567]86-*-gnu* | i[34567]86-*-kopensolaris*-gnu)\n \textra_parts=\"$extra_parts crtprec32.o crtprec64.o crtprec80.o crtfastmath.o\"\n-\ttmake_file=\"${tmake_file} i386/t-crtpc i386/t-crtfm t-dfprules\"\n+\ttmake_file=\"${tmake_file} i386/t-crtpc i386/t-crtfm i386/t-crtstuff t-dfprules\"\n \t;;\n x86_64-*-linux*)\n \textra_parts=\"$extra_parts crtprec32.o crtprec64.o crtprec80.o crtfastmath.o\"\n-\ttmake_file=\"${tmake_file} i386/t-crtpc i386/t-crtfm t-dfprules\"\n+\ttmake_file=\"${tmake_file} i386/t-crtpc i386/t-crtfm i386/t-crtstuff t-dfprules\"\n \tmd_unwind_header=i386/linux-unwind.h\n \t;;\n x86_64-*-kfreebsd*-gnu | x86_64-*-knetbsd*-gnu)\n \textra_parts=\"$extra_parts crtprec32.o crtprec64.o crtprec80.o crtfastmath.o\"\n-\ttmake_file=\"${tmake_file} i386/t-crtpc i386/t-crtfm t-dfprules\"\n+\ttmake_file=\"${tmake_file} i386/t-crtpc i386/t-crtfm i386/t-crtstuff t-dfprules\"\n \t;;\n i[34567]86-pc-msdosdjgpp*)\n \t;;\n i[34567]86-*-lynxos*)\n \t;;\n i[34567]86-*-nto-qnx*)\n+\ttmake_file=\"$tmake_file i386/t-nto\"\n+\textra_parts=crtbegin.o\n \t;;\n i[34567]86-*-rtems*)\n-\textra_parts=\"crtbegin.o crtend.o crti.o crtn.o\"\n-\ttmake_file=\"${tmake_file} t-crtin i386/t-softfp i386/t-crtstuff t-rtems\"\n+\textra_parts=\"$extra_parts crti.o crtn.o\"\n+\ttmake_file=\"${tmake_file} i386/t-softfp i386/t-crtstuff t-rtems\"\n \t;;\n i[34567]86-*-solaris2* | x86_64-*-solaris2.1[0-9]*)\n \ttmake_file=\"$tmake_file i386/t-crtpc i386/t-crtfm\"\n@@ -548,14 +608,15 @@ x86_64-*-mingw*)\n i[34567]86-*-interix3*)\n \t;;\n ia64*-*-elf*)\n-\textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtfastmath.o\"\n+\textra_parts=\"$extra_parts crtbeginS.o crtendS.o crtfastmath.o\"\n \ttmake_file=\"ia64/t-ia64 ia64/t-eh-ia64 t-crtfm\"\n \t;;\n ia64*-*-freebsd*)\n-\textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtfastmath.o\"\n+\textra_parts=\"$extra_parts crtfastmath.o\"\n \ttmake_file=\"$tmake_file ia64/t-ia64 ia64/t-eh-ia64 t-crtfm\"\n \t;;\n ia64*-*-linux*)\n+\t# Don't use crtbeginT.o from *-*-linux* default.\n \textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtfastmath.o\"\n \ttmake_file=\"$tmake_file ia64/t-ia64 t-crtfm t-softfp-tf ia64/t-softfp t-softfp ia64/t-softfp-compat ia64/t-eh-ia64 t-libunwind ia64/t-linux\"\n \tif test x$with_system_libunwind != xyes ; then\n@@ -567,31 +628,37 @@ ia64*-*-hpux*)\n \ttmake_file=\"ia64/t-hpux t-slibgcc ia64/t-slibgcc-hpux t-slibgcc-hpux\"\n \t;;\n ia64-hp-*vms*)\n-\ttmake_file=\"vms/t-vms vms/t-vms64 ia64/t-eh-ia64 ia64/t-vms t-slibgcc-vms\"\n+\ttmake_file=\"$tmake_file ia64/t-eh-ia64 ia64/t-vms t-slibgcc-vms\"\n+\textra_parts=\"$extra_parts crtinitS.o\"\n \tmd_unwind_header=ia64/vms-unwind.h\n \t;;\n iq2000*-*-elf*)\n \ttmake_file=t-fdpbit\n+\t# Don't use default.\n+\textra_parts=\n         ;;\n lm32-*-elf*|lm32-*-rtems*)\n-        extra_parts=\"crtbegin.o crtend.o crti.o crtn.o\"\n+        extra_parts=\"$extra_parts crti.o crtn.o\"\n         tmake_file=\"lm32/t-lm32 lm32/t-elf t-softfp-sfdf t-softfp\"\n \t;;\n lm32-*-uclinux*)\n-        extra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o\"\n+        extra_parts=\"$extra_parts crtbegin.o crtendS.o crtbeginT.o\"\n         tmake_file=\"lm32/t-lm32 lm32/t-uclinux t-softfp-sfdf t-softfp\"\n \t;;\t\n-m32r-*-elf*|m32r-*-rtems*)\n+m32r-*-elf*)\n \ttmake_file=t-fdpbit\n  \t;;\n+m32r-*-rtems*)\n+\ttmake_file=\"m32r/t-m32r t-fdpbit\"\n+\t;;\n m32rle-*-elf*)\n \ttmake_file=t-fdpbit\n \t;;\n m32r-*-linux*)\n-\ttmake_file=\"$tmake_file t-fdpbit m32r/t-linux\"\n+\ttmake_file=\"$tmake_file m32r/t-linux t-fdpbit\"\n  \t;;\n m32rle-*-linux*)\n-\ttmake_file=\"$tmake_file t-fdpbit m32r/t-linux\"\n+\ttmake_file=\"$tmake_file m32r/t-linux t-fdpbit\"\n \t;;\n m68k-*-elf*)\n \t;;\n@@ -613,15 +680,18 @@ m68k-*-linux*)\t\t\t# Motorola m68k's running GNU/Linux\n \tmd_unwind_header=m68k/linux-unwind.h\n \t;;\n m68k-*-rtems*)\n+\textra_parts=\"$extra_parts crti.o crtn.o\"\n \t;;\n mcore-*-elf)\n \ttmake_file=t-fdpbit\n+\textra_parts=\"$extra_parts crti.o crtn.o\"\n \t;;\n microblaze*-linux*)\n         tmake_file=\"$tmake_file t-slibgcc-nolc-override microblaze/t-microblaze t-fdpbit\"\n \t;;\n microblaze*-*-*)\n         tmake_file=\"microblaze/t-microblaze t-fdpbit\"\n+\textra_parts=\"crtbegin.o crtend.o crti.o crtn.o\"\n \t;;\n mips-sgi-irix6.5*)\n \ttmake_file=\"$tmake_file mips/t-irix6 t-crtfm mips/t-tpbit t-slibgcc mips/t-slibgcc-irix\"\n@@ -643,47 +713,57 @@ mips*-*-linux*)\t\t\t\t# Linux MIPS, either endian.\n mips*-*-openbsd*)\n \t;;\n mips*-sde-elf*)\n+\ttmake_file=\"mips/t-crtstuff mips/t-mips16\"\n \tcase \"${with_newlib}\" in\n \t  yes)\n \t    # newlib / libgloss.\n \t    ;;\n \t  *)\n \t    # MIPS toolkit libraries.\n-\t    tmake_file=mips/t-sdemtk\n+\t    tmake_file=\"$tmake_file mips/t-sdemtk\"\n \t    ;;\n \tesac\n-\ttmake_file=\"$tmake_file mips/t-mips16\"\n+\textra_parts=\"$extra_parts crti.o crtn.o\"\n \t;;\n mipsisa32-*-elf* | mipsisa32el-*-elf* | \\\n mipsisa32r2-*-elf* | mipsisa32r2el-*-elf* | \\\n mipsisa64-*-elf* | mipsisa64el-*-elf* | \\\n mipsisa64r2-*-elf* | mipsisa64r2el-*-elf*)\n-\ttmake_file=\"$tmake_file mips/t-mips16\"\n+\ttmake_file=\"$tmake_file mips/t-crtstuff mips/t-mips16\"\n+\textra_parts=\"$extra_parts crti.o crtn.o\"\n \t;;\n mipsisa64sr71k-*-elf*)\n-\ttmake_file=t-fdpbit\n+\ttmake_file=\"mips/t-crtstuff t-fdpbit\"\n+\textra_parts=\"$extra_parts crti.o crtn.o\"\n         ;;\n mipsisa64sb1-*-elf* | mipsisa64sb1el-*-elf*)\n-\ttmake_file=\"$tmake_file mips/t-mips16\"\n+\ttmake_file=\"$tmake_file mips/t-crtstuff mips/t-mips16\"\n+\textra_parts=\"$extra_parts crti.o crtn.o\"\n \t;;\n mips-*-elf* | mipsel-*-elf*)\n-\ttmake_file=\"$tmake_file mips/t-mips16\"\n+\ttmake_file=\"$tmake_file mips/t-crtstuff mips/t-mips16\"\n+\textra_parts=\"$extra_parts crti.o crtn.o\"\n \t;;\n mips64-*-elf* | mips64el-*-elf*)\n-\ttmake_file=\"$tmake_file mips/t-mips16\"\n+\ttmake_file=\"$tmake_file mips/t-crtstuff mips/t-mips16\"\n+\textra_parts=\"$extra_parts crti.o crtn.o\"\n \t;;\n mips64vr-*-elf* | mips64vrel-*-elf*)\n+\ttmake_file=\"$tmake_file mips/t-crtstuff\"\n+\textra_parts=\"$extra_parts crti.o crtn.o\"\n         ;;\n mips64orion-*-elf* | mips64orionel-*-elf*)\n-\ttmake_file=\"$tmake_file mips/t-mips16\"\n+\ttmake_file=\"$tmake_file mips/t-crtstuff mips/t-mips16\"\n+\textra_parts=\"$extra_parts crti.o crtn.o\"\n \t;;\n mips*-*-rtems*)\n-\ttmake_file=\"$tmake_file mips/t-mips16\"\n+\ttmake_file=\"$tmake_file mips/t-crtstuff mips/t-mips16\"\n+\textra_parts=\"$extra_parts crti.o crtn.o\"\n \t;;\n mips-wrs-vxworks)\n \t;;\n mipstx39-*-elf* | mipstx39el-*-elf*)\n-\ttmake_file=\"$tmake_file mips/t-mips16\"\n+\ttmake_file=\"$tmake_file mips/t-crtstuff mips/t-mips16\"\n \t;;\n mmix-knuth-mmixware)\n \textra_parts=\"crti.o crtn.o crtbegin.o crtend.o\"\n@@ -692,9 +772,14 @@ mmix-knuth-mmixware)\n mn10300-*-*)\n \ttmake_file=t-fdpbit\n \t;;\n-moxie-*-*)\n+moxie-*-elf | moxie-*-uclinux*)\n \ttmake_file=\"moxie/t-moxie t-softfp-sfdf t-softfp-excl t-softfp\"\n-\textra_parts=\"crtbegin.o crtend.o crti.o crtn.o\"\n+\textra_parts=\"$extra_parts crti.o crtn.o\"\n+\t;;\n+moxie-*-rtems*)\n+\ttmake_file=\"moxie/t-moxie t-softfp-sfdf t-softfp-excl t-softfp\"\n+\t# Don't use default.\n+\textra_parts=\n \t;;\n pdp11-*-*)\n \ttmake_file=t-fdpbit\n@@ -720,52 +805,66 @@ powerpc64-*-darwin*)\n \textra_parts=\"$extra_parts crt2.o\"\n \t;;\n powerpc-*-freebsd*)\n-\ttmake_file=\"${tmake_file} rs6000/t-ppccomm rs6000/t-freebsd t-softfp-sfdf t-softfp-excl t-softfp t-slibgcc-libgcc\"\n+\ttmake_file=\"${tmake_file} rs6000/t-ppccomm rs6000/t-crtstuff rs6000/t-freebsd t-softfp-sfdf t-softfp-excl t-softfp t-slibgcc-libgcc\"\n+\textra_parts=\"$extra_parts crtbeginT.o ecrti.o ecrtn.o ncrti.o ncrtn.o\"\n \t;;\n powerpc-*-netbsd*)\n+\ttmake_file=\"$tmake_file rs6000/t-crtstuff\"\n \t;;\n powerpc-*-eabispe*)\n-\ttmake_file=\"${tmake_file} rs6000/t-ppccomm\"\n+\ttmake_file=\"${tmake_file} rs6000/t-ppccomm rs6000/t-crtstuff t-crtstuff-pic\"\n+\textra_parts=\"$extra_parts crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o ecrti.o ecrtn.o ncrti.o ncrtn.o\"\n \t;;\n powerpc-*-eabisimaltivec*)\n-\ttmake_file=\"rs6000/t-ppccomm-ldbl t-fdpbit\"\n+\ttmake_file=\"${tmake_file} rs6000/t-ppccomm rs6000/t-ppccomm-ldbl rs6000/t-crtstuff t-crtstuff-pic t-fdpbit\"\n+\textra_parts=\"$extra_parts crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o ecrti.o ecrtn.o ncrti.o ncrtn.o\"\n \t;;\n powerpc-*-eabisim*)\n-\ttmake_file=\"rs6000/t-ppccomm-ldbl t-fdpbit\"\n+\ttmake_file=\"${tmake_file} rs6000/t-ppccomm rs6000/t-ppccomm-ldbl rs6000/t-crtstuff t-crtstuff-pic t-fdpbit\"\n+\textra_parts=\"$extra_parts crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o ecrti.o ecrtn.o ncrti.o ncrtn.o\"\n \t;;\n powerpc-*-elf*)\n-\ttmake_file=\"rs6000/t-ppccomm-ldbl t-fdpbit\"\n+\ttmake_file=\"${tmake_file} rs6000/t-ppccomm rs6000/t-ppccomm-ldbl rs6000/t-crtstuff t-crtstuff-pic t-fdpbit\"\n+\textra_parts=\"$extra_parts crtbeginS.o crtendS.o crtbeginT.o ecrti.o ecrtn.o ncrti.o ncrtn.o\"\n \t;;\n powerpc-*-eabialtivec*)\n-\ttmake_file=\"rs6000/t-ppccomm-ldbl t-fdpbit\"\n+\ttmake_file=\"${tmake_file} rs6000/t-ppccomm rs6000/t-ppccomm-ldbl rs6000/t-crtstuff t-crtstuff-pic t-fdpbit\"\n+\textra_parts=\"$extra_parts crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o ecrti.o ecrtn.o ncrti.o ncrtn.o\"\n \t;;\n powerpc-xilinx-eabi*)\n-\ttmake_file=\"rs6000/t-ppccomm-ldbl t-fdpbit\"\n+\ttmake_file=\"${tmake_file} rs6000/t-ppccomm rs6000/t-ppccomm-ldbl rs6000/t-crtstuff t-crtstuff-pic t-fdpbit\"\n+\textra_parts=\"$extra_parts crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o ecrti.o ecrtn.o ncrti.o ncrtn.o\"\n \t;;\n powerpc-*-eabi*)\n-\ttmake_file=\"${tmake_file} rs6000/t-ppccomm t-fdpbit\"\n+\ttmake_file=\"${tmake_file} rs6000/t-ppccomm rs6000/t-crtstuff t-crtstuff-pic t-fdpbit\"\n+\textra_parts=\"$extra_parts crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o ecrti.o ecrtn.o ncrti.o ncrtn.o\"\n \t;;\n powerpc-*-rtems*)\n-\ttmake_file=\"rs6000/t-ppccomm-ldbl t-fdpbit\"\n+\ttmake_file=\"${tmake_file} rs6000/t-ppccomm rs6000/t-ppccomm-ldbl rs6000/t-crtstuff t-crtstuff-pic t-fdpbit\"\n+\textra_parts=\"$extra_parts crtbeginS.o crtendS.o crtbeginT.o ecrti.o ecrtn.o ncrti.o ncrtn.o\"\n \t;;\n powerpc-*-linux* | powerpc64-*-linux*)\n-\ttmake_file=\"${tmake_file} rs6000/t-ppccomm rs6000/t-linux t-softfp-sfdf t-softfp-excl t-dfprules rs6000/t-ppc64-fp t-softfp t-slibgcc-libgcc\"\n+\ttmake_file=\"${tmake_file} rs6000/t-ppccomm rs6000/t-crtstuff rs6000/t-linux t-softfp-sfdf t-softfp-excl t-dfprules rs6000/t-ppc64-fp t-softfp t-slibgcc-libgcc\"\n+\textra_parts=\"$extra_parts ecrti.o ecrtn.o ncrti.o ncrtn.o\"\n \tmd_unwind_header=rs6000/linux-unwind.h\n \t;;\n powerpc-wrs-vxworks|powerpc-wrs-vxworksae)\n \ttmake_file=\"rs6000/t-ppccomm-ldbl t-fdpbit\"\n \t;;\n powerpc-*-lynxos*)\n-\ttmake_file=t-fdpbit\n+\ttmake_file=\"$tmake_file t-fdpbit\"\n \t;;\n powerpcle-*-elf*)\n-\ttmake_file=\"rs6000/t-ppccomm-ldbl t-fdpbit\"\n+\ttmake_file=\"${tmake_file} rs6000/t-ppccomm rs6000/t-ppccomm-ldbl rs6000/t-crtstuff t-crtstuff-pic t-fdpbit\"\n+\textra_parts=\"$extra_parts crtbeginS.o crtendS.o crtbeginT.o ecrti.o ecrtn.o ncrti.o ncrtn.o\"\n \t;;\n powerpcle-*-eabisim*)\n-\ttmake_file=\"rs6000/t-ppccomm-ldbl t-fdpbit\"\n+\ttmake_file=\"${tmake_file} rs6000/t-ppccomm rs6000/t-ppccomm-ldbl rs6000/t-crtstuff t-crtstuff-pic t-fdpbit\"\n+\textra_parts=\"$extra_parts crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o ecrti.o ecrtn.o ncrti.o ncrtn.o\"\n \t;;\n powerpcle-*-eabi*)\n-\ttmake_file=\"rs6000/t-ppccomm-ldbl t-fdpbit\"\n+\ttmake_file=\"${tmake_file} rs6000/t-ppccomm rs6000/t-ppccomm-ldbl rs6000/t-crtstuff t-crtstuff-pic t-fdpbit\"\n+\textra_parts=\"$extra_parts crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o ecrti.o ecrtn.o ncrti.o ncrtn.o\"\n \t;;\n rs6000-ibm-aix4.[3456789]* | powerpc-ibm-aix4.[3456789]*)\n \tmd_unwind_header=rs6000/aix-unwind.h\n@@ -780,7 +879,6 @@ rs6000-ibm-aix[56789].* | powerpc-ibm-aix[56789].*)\n \ttmake_file=\"t-fdpbit rs6000/t-ppc64-fp rs6000/t-ibm-ldouble rs6000/t-slibgcc-aix\"\n \t;;\n rx-*-elf)\n-\textra_parts=\"crtbegin.o crtend.o\"\n \ttmake_file=\"rx/t-rx t-fdpbit\"\n \t;;\n s390-*-linux*)\n@@ -793,36 +891,45 @@ s390x-*-linux*)\n \t;;\n s390x-ibm-tpf*)\n \ttmake_file=\"${tmake_file} s390/t-crtstuff s390/t-tpf t-eh-dw2-dip\"\n+\textra_parts=\"crtbeginS.o crtendS.o\"\n \tmd_unwind_header=s390/tpf-unwind.h\n \t;;\n score-*-elf)\n \ttmake_file=\"${tmake_file} t-softfp-sfdf t-softfp-excl t-softfp\"\n+\textra_parts=\"$extra_parts crti.o crtn.o\"\n         ;;\n-sh-*-elf* | sh[12346l]*-*-elf* | \\\n-  sh-*-linux* | sh[2346lbe]*-*-linux* | \\\n-  sh-*-netbsdelf* | shl*-*-netbsdelf* | sh5-*-netbsd* | sh5l*-*-netbsd* | \\\n-   sh64-*-netbsd* | sh64l*-*-netbsd*)\n+sh-*-elf* | sh[12346l]*-*-elf*)\n+\ttmake_file=\"$tmake_file sh/t-sh t-crtstuff-pic t-fdpbit\"\n+\textra_parts=\"$extra_parts crt1.o crti.o crtn.o crtbeginS.o crtendS.o \\\n+\t\tlibic_invalidate_array_4-100.a \\\n+\t\tlibic_invalidate_array_4-200.a \\\n+\t\tlibic_invalidate_array_4a.a \\\n+\t\tlibgcc-Os-4-200.a libgcc-4-300.a\"\n \tcase ${host} in\n-\tsh*-*-linux*)\n-\t\ttmake_file=\"${tmake_file} t-slibgcc-libgcc sh/t-linux t-fdpbit\"\n-\t\tmd_unwind_header=sh/linux-unwind.h\n-\t\t;;\n-\tsh*-*-netbsd*)\n-\t\t# NetBSD's C library includes a fast software FP library that\n-\t\t# has support for setting/setting the rounding mode, exception\n-\t\t# mask, etc.  Therefore, we don't want to include software FP\n-\t\t# in libgcc.\n-\t\t;;\n-\tsh*-*-*)\n-\t        tmake_file=t-fdpbit\n-\t\t;;\n-\tesac\n+\tsh*-superh-elf)\n+\t\ttmake_file=\"$tmake_file sh/t-superh\"\n+\t\textra_parts=\"$extra_parts crt1-mmu.o gcrt1-mmu.o gcrt1.o\"\n+ \t\t;;\n+ \tesac\n+\t;;\n+sh-*-linux* | sh[2346lbe]*-*-linux*)\n+\ttmake_file=\"${tmake_file} t-slibgcc-libgcc sh/t-linux t-fdpbit\"\n+\tmd_unwind_header=sh/linux-unwind.h\n+\t;;\n+sh-*-netbsdelf* | shl*-*-netbsdelf* | sh5-*-netbsd* | sh5l*-*-netbsd* | \\\n+  sh64-*-netbsd* | sh64l*-*-netbsd*)\n+\t# NetBSD's C library includes a fast software FP library that\n+\t# has support for setting/setting the rounding mode, exception\n+\t# mask, etc.  Therefore, we don't want to include software FP\n+\t# in libgcc.\n \t;;\n sh-*-rtems*)\n-\ttmake_file=t-fdpbit\n+\ttmake_file=\"$tmake_file t-crtstuff-pic t-fdpbit\"\n+\textra_parts=\"$extra_parts crt1.o crti.o crtn.o crtbeginS.o crtendS.o \\\n+\t\t$sh_ic_extra_parts $sh_opt_extra_parts\"\n \t;;\n sh-wrs-vxworks)\n-\ttmake_file=t-fdpbit\n+\ttmake_file=\"$tmake_file t-crtstuff-pic t-fdpbit\"\n \t;;\n sparc-*-netbsdelf*)\n \t;;\n@@ -836,10 +943,11 @@ sparc-*-elf*)\n \t  \ttmake_file=\"sparc/t-softmul\"\n \t  \t;;\n \tesac\n-\ttmake_file=\"${tmake_file} t-fdpbit t-crtin t-crtfm\"\n-\textra_parts=\"crtbegin.o crtend.o crti.o crtn.o crtfastmath.o\"\n+\ttmake_file=\"${tmake_file} t-fdpbit t-crtfm\"\n+\textra_parts=\"$extra_parts crti.o crtn.o crtfastmath.o\"\n \t;;\n sparc-*-linux*)\t\t# SPARC's running GNU/Linux, libc6\n+\ttmake_file=\"${tmake_file} t-crtfm sparc/t-linux64\"\n \tcase ${host} in\n \t*-leon*)\n \t\ttmake_file=\"${tmake_file} t-fdpbit\"\n@@ -849,48 +957,53 @@ sparc-*-linux*)\t\t# SPARC's running GNU/Linux, libc6\n \t\t;;\n \tesac\n \textra_parts=\"$extra_parts crtfastmath.o\"\n-\ttmake_file=\"${tmake_file} t-crtfm\"\n \tmd_unwind_header=sparc/linux-unwind.h\n \t;;\n sparc-*-rtems*)\n-\ttmake_file=\"sparc/t-elf t-crtin t-crtfm t-rtems t-fdpbit\"\n-\textra_parts=\"crtbegin.o crtend.o crti.o crtn.o crtfastmath.o\"\n+\ttmake_file=\"sparc/t-elf t-crtfm t-rtems t-fdpbit\"\n+\textra_parts=\"$extra_parts crti.o crtn.o crtfastmath.o\"\n \t;;\n sparc*-*-solaris2*)\n \ttmake_file=\"$tmake_file t-crtfm\"\n \textra_parts=\"$extra_parts crtfastmath.o\"\n \tmd_unwind_header=sparc/sol2-unwind.h\n \t;;\n sparc64-*-elf*)\n-\ttmake_file=\"${tmake_file} t-crtin t-crtfm\"\n-\textra_parts=\"crtbegin.o crtend.o crti.o crtn.o crtfastmath.o\"\n+\ttmake_file=\"${tmake_file} t-crtfm\"\n+\textra_parts=\"$extra_parts crti.o crtn.o crtfastmath.o\"\n \t;;\n sparc64-*-rtems*)\n-\ttmake_file=\"sparc/t-elf t-crtin t-crtfm t-rtems\"\n-\textra_parts=\"crtbegin.o crtend.o crti.o crtn.o crtfastmath.o\"\n+\ttmake_file=\"sparc/t-elf t-crtfm t-rtems\"\n+\textra_parts=\"$extra_parts crti.o crtn.o crtfastmath.o\"\n \t;;\n sparc-wrs-vxworks)\n \t;;\n sparc64-*-freebsd*|ultrasparc-*-freebsd*)\n \ttmake_file=\"$tmake_file t-crtfm\"\n-\textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o crtfastmath.o\"\n+\textra_parts=\"$extra_parts crtfastmath.o\"\n \t;;\n sparc64-*-linux*)\t\t# 64-bit SPARC's running GNU/Linux\n \textra_parts=\"$extra_parts crtfastmath.o\"\n-\ttmake_file=\"${tmake_file} t-crtfm sparc/t-linux\"\n+\ttmake_file=\"${tmake_file} t-crtfm sparc/t-linux sparc/t-linux64\"\n \tmd_unwind_header=sparc/linux-unwind.h\n \t;;\n sparc64-*-netbsd*)\n \t;;\n spu-*-elf*)\n-\ttmake_file=\"t-fdpbit spu/t-elf\"\n+\ttmake_file=\"$tmake_file spu/t-elf t-fdpbit\"\n+\textra_parts=\"$extra_parts \\\n+\t\tlibgcc_cachemgr.a libgcc_cachemgr_nonatomic.a \\\n+\t\tlibgcc_cache8k.a libgcc_cache16k.a libgcc_cache32k.a \\\n+\t\tlibgcc_cache64k.a libgcc_cache128k.a\"\n \t;;\n tic6x-*-uclinux)\n-\ttmake_file=\"${tmake_file} t-softfp-sfdf t-softfp-excl t-softfp c6x/t-elf t-slibgcc t-slibgcc-gld t-slibgcc-elf-ver t-gnu-prefix\"\n+\ttmake_file=\"${tmake_file} t-softfp-sfdf t-softfp-excl t-softfp c6x/t-elf  c6x/t-uclinux t-crtstuff-pic t-slibgcc t-slibgcc-gld t-slibgcc-elf-ver t-gnu-prefix\"\n+\textra_parts=\"crtbeginS.o crtendS.o crti.o crtn.o\"\n \tunwind_header=config/c6x/unwind-c6x.h\n \t;;\n-tic6x-*-*)\n-\ttmake_file=\"${tmake_file} t-softfp-sfdf t-softfp-excl t-softfp c6x/t-elf t-gnu-prefix\"\n+tic6x-*-elf)\n+\ttmake_file=\"${tmake_file} t-softfp-sfdf t-softfp-excl t-softfp t-gnu-prefix c6x/t-elf\"\n+\textra_parts=\"$extra_parts crtbeginS.o crtendS.o crti.o crtn.o\"\n \tunwind_header=config/c6x/unwind-c6x.h\n \t;;\n v850*-*-*)\n@@ -906,20 +1019,23 @@ xstormy16-*-elf)\n \ttmake_file=t-fdpbit\n \t;;\n xtensa*-*-elf*)\n-\ttmake_file=xtensa/t-xtensa\n+\ttmake_file=\"$tmake_file xtensa/t-xtensa xtensa/t-elf\"\n+\textra_parts=\"$extra_parts crti.o crtn.o\"\n \t;;\n xtensa*-*-linux*)\n \ttmake_file=\"$tmake_file xtensa/t-xtensa xtensa/t-linux\"\n \tmd_unwind_header=xtensa/linux-unwind.h\n \t;;\n am33_2.0-*-linux*)\n+\t# Don't need crtbeginT.o from *-*-linux* default.\n \textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o\"\n \ttmake_file=\"$tmake_file t-fdpbit\"\n \t;;\n m32c-*-elf*|m32c-*-rtems*)\n  \t;;\n mep*-*-*)\n-\ttmake_file=t-fdpbit\n+\ttmake_file=\"mep/t-mep t-fdpbit\"\n+\textra_parts=\"crtbegin.o crtend.o\"\n \t;;\n *)\n \techo \"*** Configuration ${host} not supported\" 1>&2"}, {"sha": "21d6d71df154861d38d246845053c00a8694987d", "filename": "libgcc/config/alpha/t-vms", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Falpha%2Ft-vms", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Falpha%2Ft-vms", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Falpha%2Ft-vms?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -0,0 +1,7 @@\n+# This object must be linked with in order to make the executable debuggable.\n+# vms-ld handles it automatically when passed -g.\n+vms-dwarf2.o: $(srcdir)/config/alpha/vms-dwarf2.S\n+\t$(gcc_compile) -c -x assembler-with-cpp $<\n+\n+vms-dwarf2eh.o: $(srcdir)/config/alpha/vms-dwarf2eh.S\n+\t$(gcc_compile) -c -x assembler-with-cpp $<"}, {"sha": "531c7aa9984615350ee5205ec3c86f8d2a4e4029", "filename": "libgcc/config/alpha/vms-dwarf2.S", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Falpha%2Fvms-dwarf2.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Falpha%2Fvms-dwarf2.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Falpha%2Fvms-dwarf2.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/alpha/vms-dwarf2.asm"}, {"sha": "e0eaf9d37417a2e4fcf7ef13a717fa79b8474e0f", "filename": "libgcc/config/alpha/vms-dwarf2eh.S", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Falpha%2Fvms-dwarf2eh.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Falpha%2Fvms-dwarf2eh.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Falpha%2Fvms-dwarf2eh.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/alpha/vms-dwarf2eh.asm"}, {"sha": "50915f9e31f8afb956dee7e895131dd46ae700f1", "filename": "libgcc/config/arm/crti.S", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Farm%2Fcrti.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Farm%2Fcrti.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Fcrti.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,4 +1,4 @@\n-#   Copyright (C) 2001, 2008, 2009, 2010 Free Software Foundation, Inc.\n+#   Copyright (C) 2001, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n #   Written By Nick Clifton\n # \n # This file is free software; you can redistribute it and/or modify it\n@@ -46,7 +46,7 @@\n #endif /* __ARM_EABI__ */\n \n \t# Note - this macro is complemented by the FUNC_END macro\n-\t# in crtn.asm.  If you change this macro you must also change\n+\t# in crtn.S.  If you change this macro you must also change\n \t# that macro match.\n .macro FUNC_START\n #ifdef __thumb__\n@@ -83,4 +83,4 @@ _init:\n _fini:\n \tFUNC_START\n \t\n-# end of crti.asm\n+# end of crti.S", "previous_filename": "gcc/config/arm/crti.asm"}, {"sha": "8c5f22572f7bd4a43a1fb7dc13b813548cd01360", "filename": "libgcc/config/arm/crtn.S", "status": "renamed", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Farm%2Fcrtn.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Farm%2Fcrtn.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Fcrtn.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,4 +1,5 @@\n-#   Copyright (C) 2001, 2004, 2008, 2009, 2010 Free Software Foundation, Inc.\n+#   Copyright (C) 2001, 2004, 2008, 2009, 2010, 2011\n+#   Free Software Foundation, Inc.\n #   Written By Nick Clifton\n # \n # This file is free software; you can redistribute it and/or modify it\n@@ -41,7 +42,7 @@\n # This file is the last thing linked into any executable.\n \n \t# Note - this macro is complemented by the FUNC_START macro\n-\t# in crti.asm.  If you change this macro you must also change\n+\t# in crti.S.  If you change this macro you must also change\n \t# that macro match.\n \t#\n \t# Note - we do not try any fancy optimizations of the return\n@@ -79,4 +80,4 @@\n \t;;\n \tFUNC_END\n \t\n-# end of crtn.asm\n+# end of crtn.S", "previous_filename": "gcc/config/arm/crtn.asm"}, {"sha": "b6f20fc9e6b069311e64188a8a78d27b66f74fac", "filename": "libgcc/config/bfin/crti.S", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fbfin%2Fcrti.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fbfin%2Fcrti.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fbfin%2Fcrti.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/bfin/crti.s"}, {"sha": "beab8093810e30cd650ad9d78bfc0a5e9f9d70f3", "filename": "libgcc/config/bfin/crtlibid.S", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fbfin%2Fcrtlibid.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fbfin%2Fcrtlibid.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fbfin%2Fcrtlibid.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/bfin/crtlibid.s"}, {"sha": "7fcd27bfade65e6db72784b74727ee5d92a6617e", "filename": "libgcc/config/bfin/crtn.S", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fbfin%2Fcrtn.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fbfin%2Fcrtn.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fbfin%2Fcrtn.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/bfin/crtn.s"}, {"sha": "b0c93e71eb911ebdcc872144381fea2ee2fb79ce", "filename": "libgcc/config/bfin/t-crtlibid", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fbfin%2Ft-crtlibid", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fbfin%2Ft-crtlibid", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fbfin%2Ft-crtlibid?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -0,0 +1,3 @@\n+# Assemble startup files.\n+crtlibid.o: $(srcdir)/config/bfin/crtlibid.S\n+\t$(gcc_compile) -c -x assembler-with-cpp $<"}, {"sha": "7b343e2540637e4cb0731ea0a2ac6e937f5fd3a6", "filename": "libgcc/config/bfin/t-crtstuff", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fbfin%2Ft-crtstuff", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fbfin%2Ft-crtstuff", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fbfin%2Ft-crtstuff?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -0,0 +1 @@\n+CRTSTUFF_T_CFLAGS = -fpic"}, {"sha": "8fe35c1f12117819160f4166f6906859bc63ff0d", "filename": "libgcc/config/c6x/crti.S", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fc6x%2Fcrti.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fc6x%2Fcrti.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fc6x%2Fcrti.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/c6x/crti.s"}, {"sha": "5900a4b14c4e82eb72da2d03a6777fcc8e32fb44", "filename": "libgcc/config/c6x/crtn.S", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fc6x%2Fcrtn.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fc6x%2Fcrtn.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fc6x%2Fcrtn.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/c6x/crtn.s"}, {"sha": "99d0cd2d5ca8bd71db9bdade10eec73a3a96c189", "filename": "libgcc/config/c6x/t-elf", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fc6x%2Ft-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fc6x%2Ft-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fc6x%2Ft-elf?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1 +1,15 @@\n+# Cannot use default rules due to $(CRTSTUFF_T_CFLAGS).\n+CUSTOM_CRTIN = yes\n+\n+# Assemble startup files.\n+crti.o: $(srcdir)/config/c6x/crti.S\n+\t$(crt_compile) -c $(CRTSTUFF_T_CFLAGS) $<\n+\n+crtn.o: $(srcdir)/config/c6x/crtn.S\n+\t$(crt_compile) -c $(CRTSTUFF_T_CFLAGS) $<\n+\n+# Avoid failures when the user's GOT becomes too large.\n+CRTSTUFF_T_CFLAGS = -msdata=none\n+CRTSTUFF_T_CFLAGS_S = -msdata=none\n+\n SHLIB_MAPFILES += $(srcdir)/config/c6x/libgcc-eabi.ver"}, {"sha": "15fb9a1afc18b4bfe4cb95af8cc1aa6dcf51201e", "filename": "libgcc/config/c6x/t-uclinux", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fc6x%2Ft-uclinux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fc6x%2Ft-uclinux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fc6x%2Ft-uclinux?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -0,0 +1 @@\n+CRTSTUFF_T_CFLAGS += -fPIC"}, {"sha": "3bb8ecf66c48b2537b268850c3cbf757c96ad8a1", "filename": "libgcc/config/cris/t-elfmulti", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fcris%2Ft-elfmulti", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fcris%2Ft-elfmulti", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fcris%2Ft-elfmulti?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -0,0 +1 @@\n+CRTSTUFF_T_CFLAGS = -moverride-best-lib-options"}, {"sha": "26555fd507215c3c672dc2839268206e7ca09358", "filename": "libgcc/config/cris/t-linux", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fcris%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fcris%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fcris%2Ft-linux?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,2 +1,4 @@\n+CRTSTUFF_T_CFLAGS_S = $(HOST_LIBGCC2_CFLAGS)\n+\n # Override t-linux default.\n SHLIB_MAPFILES = libgcc-std.ver $(srcdir)/config/cris/libgcc-glibc.ver"}, {"sha": "4ce61231bd7e1021fd637c0802191223f4945b4b", "filename": "libgcc/config/fr30/crti.S", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Ffr30%2Fcrti.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Ffr30%2Fcrti.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ffr30%2Fcrti.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/fr30/crti.asm"}, {"sha": "c62d37b667173aaa1136ffb3817a154c4dd9e723", "filename": "libgcc/config/fr30/crtn.S", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Ffr30%2Fcrtn.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Ffr30%2Fcrtn.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ffr30%2Fcrtn.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,6 +1,6 @@\n-# crtn.asm for ELF \n+# crtn.S for ELF \n \n-#   Copyright (C) 1992, 1999, 2008, 2009 Free Software Foundation, Inc.\n+#   Copyright (C) 1992, 1999, 2008, 2009, 2011 Free Software Foundation, Inc.\n #   Written By David Vinayak Henkel-Wallace, June 1992\n # \n # This file is free software; you can redistribute it and/or modify it", "previous_filename": "gcc/config/fr30/crtn.asm"}, {"sha": "23cbf1ecc935d345406ffec72d948146c1ad602f", "filename": "libgcc/config/frv/frvbegin.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Ffrv%2Ffrvbegin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Ffrv%2Ffrvbegin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ffrv%2Ffrvbegin.c?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/frv/frvbegin.c"}, {"sha": "0bb07b56b4aeabf67e3bb76a059fc27ebc3d169f", "filename": "libgcc/config/frv/frvend.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Ffrv%2Ffrvend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Ffrv%2Ffrvend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ffrv%2Ffrvend.c?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/frv/frvend.c"}, {"sha": "b364a5a25b98b32afe6d095f5c312f1e2efee776", "filename": "libgcc/config/frv/t-frv", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Ffrv%2Ft-frv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Ffrv%2Ft-frv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ffrv%2Ft-frv?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -0,0 +1,9 @@\n+# Compile two additional files that are linked with every program\n+# linked using GCC on systems using COFF or ELF, for the sake of C++\n+# constructors.\n+\n+frvbegin$(objext): $(srcdir)/config/frv/frvbegin.c\n+\t$(gcc_compile) -c $<\n+\n+frvend$(objext): $(srcdir)/config/frv/frvend.c\n+\t$(gcc_compile) -c $<"}, {"sha": "2b4fe3f94e82f53ab3a133e9cd8dc3fa5315be56", "filename": "libgcc/config/frv/t-linux", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Ffrv%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Ffrv%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ffrv%2Ft-linux?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1 +1,3 @@\n+CRTSTUFF_T_CFLAGS = -fPIC\n+\n SHLIB_MAPFILES = libgcc-std.ver $(srcdir)/config/frv/libgcc-glibc.ver"}, {"sha": "f58c3aac9dd5943502fd9094e02c703dde893558", "filename": "libgcc/config/h8300/crti.S", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fh8300%2Fcrti.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fh8300%2Fcrti.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fh8300%2Fcrti.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2001, 2002, 2009 Free Software Foundation, Inc.\n+/* Copyright (C) 2001, 2002, 2009, 2011 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -23,11 +23,11 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n /* The code in sections .init and .fini is supposed to be a single\n    regular function.  The function in .init is called directly from\n-   start in crt0.asm.  The function in .fini is atexit()ed in crt0.asm\n+   start in crt0.S.  The function in .fini is atexit()ed in crt0.S\n    too.\n \n-   crti.asm contributes the prologue of a function to these sections,\n-   and crtn.asm comes up the epilogue.  STARTFILE_SPEC should list\n+   crti.S contributes the prologue of a function to these sections,\n+   and crtn.S comes up the epilogue.  STARTFILE_SPEC should list\n    crti.o before any other object files that might add code to .init\n    or .fini sections, and ENDFILE_SPEC should list crtn.o after any\n    such object files.  */", "previous_filename": "gcc/config/h8300/crti.asm"}, {"sha": "7a591694563b322171108027f9a9c22344922cee", "filename": "libgcc/config/h8300/crtn.S", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fh8300%2Fcrtn.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fh8300%2Fcrtn.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fh8300%2Fcrtn.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2001, 2009 Free Software Foundation, Inc.\n+/* Copyright (C) 2001, 2009, 2011 Free Software Foundation, Inc.\n    This file was adapted from glibc sources.\n \n This file is part of GCC.\n@@ -22,7 +22,7 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n-/* See an explanation about .init and .fini in crti.asm.  */\n+/* See an explanation about .init and .fini in crti.S.  */\n \n #ifdef __H8300H__\n #ifdef __NORMAL_MODE__", "previous_filename": "gcc/config/h8300/crtn.asm"}, {"sha": "fc36cce257dafb28d1b5e7f6204c89420aba1ac9", "filename": "libgcc/config/i386/cygming-crtbegin.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fi386%2Fcygming-crtbegin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fi386%2Fcygming-crtbegin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcygming-crtbegin.c?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/i386/cygming-crtbegin.c"}, {"sha": "8545420b2710d96af397fe98fa61c2871f840fbe", "filename": "libgcc/config/i386/cygming-crtend.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fi386%2Fcygming-crtend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fi386%2Fcygming-crtend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcygming-crtend.c?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/i386/cygming-crtend.c"}, {"sha": "ad63bbbefd8ab69d396a089fa6132b9a4b47b005", "filename": "libgcc/config/i386/t-cygming", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fi386%2Ft-cygming", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fi386%2Ft-cygming", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Ft-cygming?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,11 +1,9 @@\n CUSTOM_CRTSTUFF = yes\n \n-crtbegin.o: $(gcc_srcdir)/config/i386/cygming-crtbegin.c\n-\t$(crt_compile) -fno-omit-frame-pointer  -c \\\n-\t$(gcc_srcdir)/config/i386/cygming-crtbegin.c\n+crtbegin.o: $(srcdir)/config/i386/cygming-crtbegin.c\n+\t$(crt_compile) -fno-omit-frame-pointer  -c $<\n \n # We intentionally use a implementation-reserved init priority of 0,\n # so allow the warning.\n-crtend.o: $(gcc_srcdir)/config/i386/cygming-crtend.c\n-\t$(crt_compile) -fno-omit-frame-pointer -Wno-error -c \\\n-\t$(gcc_srcdir)/config/i386/cygming-crtend.c\n+crtend.o: $(srcdir)/config/i386/cygming-crtend.c\n+\t$(crt_compile) -fno-omit-frame-pointer -Wno-error -c $<"}, {"sha": "0efb5b18adc8a7411c346dfdb33bb3a1f9fca1ee", "filename": "libgcc/config/i386/t-nto", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fi386%2Ft-nto", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fi386%2Ft-nto", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Ft-nto?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -0,0 +1 @@\n+CRTSTUFF_T_CFLAGS = -fno-omit-frame-pointer -fPIC"}, {"sha": "638489990d517f9b1cc01465ca54ce7ad127bdc1", "filename": "libgcc/config/ia64/crtbegin.S", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fia64%2Fcrtbegin.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fia64%2Fcrtbegin.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Fcrtbegin.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/ia64/crtbegin.asm"}, {"sha": "a904af9cfd9d7cada093096631fe17db3caf0fb9", "filename": "libgcc/config/ia64/crtend.S", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fia64%2Fcrtend.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fia64%2Fcrtend.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Fcrtend.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/ia64/crtend.asm"}, {"sha": "c15ff662bbe14795a6fa7f02c6fd9b2df73ba628", "filename": "libgcc/config/ia64/crti.S", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fia64%2Fcrti.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fia64%2Fcrti.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Fcrti.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2000, 2001, 2008, 2009 Free Software Foundation, Inc.\n+# Copyright (C) 2000, 2001, 2008, 2009, 2011 Free Software Foundation, Inc.\n #   Written By Timothy Wall\n #\n # This file is free software; you can redistribute it and/or modify it\n@@ -50,4 +50,4 @@ _fini:\n \tmov\tr33 = b0\n \t.body\n \n-# end of crti.asm\n+# end of crti.S", "previous_filename": "gcc/config/ia64/crti.asm"}, {"sha": "d44abbea3c79614fedb50ef4539fcc12477c9f87", "filename": "libgcc/config/ia64/crtn.S", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fia64%2Fcrtn.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fia64%2Fcrtn.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Fcrtn.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,4 +1,4 @@\n-#   Copyright (C) 2000, 2001, 2008, 2009 Free Software Foundation, Inc.\n+#   Copyright (C) 2000, 2001, 2008, 2009, 2011 Free Software Foundation, Inc.\n #   Written By Timothy Wall\n #\n # This file is free software; you can redistribute it and/or modify it\n@@ -40,4 +40,4 @@\n \tmov\tr12 = r35\n \tbr.ret.sptk.many b0\n \n-# end of crtn.asm\n+# end of crtn.S", "previous_filename": "gcc/config/ia64/crtn.asm"}, {"sha": "59cf3aa75f470b477637e9e502485e38a76511a1", "filename": "libgcc/config/ia64/t-ia64", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fia64%2Ft-ia64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fia64%2Ft-ia64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Ft-ia64?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,17 +1,15 @@\n CUSTOM_CRTSTUFF = yes\n \n # Assemble startup files.\n-crtbegin.o: $(gcc_srcdir)/config/ia64/crtbegin.asm\n-\t$(CC) $(compile_deps) -I. -I$(gcc_objdir) -c -x assembler-with-cpp \\\n-\t\t-o $@ $(gcc_srcdir)/config/ia64/crtbegin.asm\n-crtend.o: $(gcc_srcdir)/config/ia64/crtend.asm\n-\t$(CC) $(compile_deps) -I. -I$(gcc_objdir) -c -x assembler-with-cpp \\\n-\t\t-o $@ $(gcc_srcdir)/config/ia64/crtend.asm\n-crtbeginS.o: $(gcc_srcdir)/config/ia64/crtbegin.asm\n-\t$(CC) $(compile_deps) -I. -I$(gcc_objdir) -c -x assembler-with-cpp \\\n-\t\t-o $@ -DSHARED $(gcc_srcdir)/config/ia64/crtbegin.asm\n-crtendS.o: $(gcc_srcdir)/config/ia64/crtend.asm\n-\t$(CC) $(compile_deps) -I. -I$(gcc_objdir) -c -x assembler-with-cpp \\\n-\t\t-o $@ -DSHARED $(gcc_srcdir)/config/ia64/crtend.asm\n+# FIXME: -I$(gcc_objdir) is necessary to find auto-host.h.  Really?\n+crtbegin.o: $(srcdir)/config/ia64/crtbegin.S\n+\t$(CC) $(compile_deps) -I. -I$(gcc_objdir) -c -x assembler-with-cpp $<\n+crtend.o: $(srcdir)/config/ia64/crtend.S\n+\t$(CC) $(compile_deps) -I. -I$(gcc_objdir) -c -x assembler-with-cpp $<\n+crtbeginS.o: $(srcdir)/config/ia64/crtbegin.S\n+\t$(CC) $(compile_deps) -I. -I$(gcc_objdir) -c -x assembler-with-cpp \\\t\t\t-o $@ -DSHARED $<\n+crtendS.o: $(srcdir)/config/ia64/crtend.S\n+\t$(CC) $(compile_deps) -I. -I$(gcc_objdir) -c -x assembler-with-cpp \\\n+\t\t-o $@ -DSHARED $<\n \n SHLIB_MAPFILES += $(srcdir)/config/ia64/libgcc-ia64.ver"}, {"sha": "140c748b771905ef02b583c0c8b0d4cb590b2d9b", "filename": "libgcc/config/ia64/t-vms", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fia64%2Ft-vms", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fia64%2Ft-vms", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Ft-vms?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1 +1,7 @@\n+CRTSTUFF_T_CFLAGS = -O0\n+CRTSTUFF_T_CFLAGS_S = -O0\n+\n+crtinitS.o: $(srcdir)/config/ia64/vms-crtinit.S\n+\t$(gcc_compile) -c -x assembler-with-cpp $<\n+\n LIB2ADDEH += $(srcdir)/config/ia64/fde-vms.c"}, {"sha": "322b29273479477374f45cf6c73230f6ee25f741", "filename": "libgcc/config/ia64/vms-crtinit.S", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fia64%2Fvms-crtinit.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fia64%2Fvms-crtinit.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Fvms-crtinit.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/ia64/vms-crtinit.asm"}, {"sha": "b1ee8f2a253276db7391360266195f592434e293", "filename": "libgcc/config/lm32/t-elf", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Flm32%2Ft-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Flm32%2Ft-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Flm32%2Ft-elf?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,12 +1,2 @@\n-# Assemble startup files.\n-\n-$(T)crti.o: $(srcdir)/config/lm32/crti.S $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crti.o -x assembler-with-cpp $(srcdir)/config/lm32/crti.S\n-\n-$(T)crtn.o: $(srcdir)/config/lm32/crtn.S $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/lm32/crtn.S\n-\n CRTSTUFF_T_CFLAGS = -G 0 -msign-extend-enabled\n HOST_LIBGCC2_CFLAGS = -G 0 -msign-extend-enabled"}, {"sha": "6e7d58614c7fdcb46712acec95a420e7d2d989f1", "filename": "libgcc/config/m32r/initfini.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fm32r%2Finitfini.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fm32r%2Finitfini.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fm32r%2Finitfini.c?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/m32r/initfini.c"}, {"sha": "acc07586a1ff6af2e76cfe507e4a50657e5be7b3", "filename": "libgcc/config/m32r/t-m32r", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fm32r%2Ft-m32r", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fm32r%2Ft-m32r", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fm32r%2Ft-m32r?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -0,0 +1,19 @@\n+# We need to use -fpic when we are using gcc to compile the routines in\n+# initfini.c.  This is only really needed when we are going to use gcc/g++\n+# to produce a shared library, but since we don't know ahead of time when\n+# we will be doing that, we just always use -fpic when compiling the\n+# routines in initfini.c.\n+# -fpic currently isn't supported for the m32r.\n+# FIXME: No longer true.  Empty CRTSTUFF_T_CFLAGS is the default.\n+CRTSTUFF_T_CFLAGS =\n+\n+# .init/.fini section routines\n+crtinit.o: $(srcdir)/config/m32r/initfini.c\n+\t$(crt_compile) $(CRTSTUFF_T_CFLAGS) -DCRT_INIT \\\n+\t-finhibit-size-directive -fno-inline-functions -g0 \\\n+\t-mmodel=medium -c $<\n+\n+crtfini.o: $(srcdir)/config/m32r/initfini.c\n+\t$(crt_compile) $(CRTSTUFF_T_CFLAGS) -DCRT_FINI \\\n+\t-finhibit-size-directive -fno-inline-functions -g0 \\\n+\t-mmodel=medium -c $<"}, {"sha": "12fb59f4130b88b75e2904fc83a71620ba90b27e", "filename": "libgcc/config/m68k/crti.S", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fm68k%2Fcrti.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fm68k%2Fcrti.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fm68k%2Fcrti.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/m68k/crti.s"}, {"sha": "b7d70f02ed5eb16558acc77bf2575b2cad0eca6f", "filename": "libgcc/config/m68k/crtn.S", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fm68k%2Fcrtn.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fm68k%2Fcrtn.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fm68k%2Fcrtn.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/m68k/crtn.s"}, {"sha": "467e944fb370816f4624657ca4cd9544851f3d26", "filename": "libgcc/config/mcore/crti.S", "status": "renamed", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fmcore%2Fcrti.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fmcore%2Fcrti.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmcore%2Fcrti.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,6 +1,7 @@\n-# crti.asm for ELF based systems\n+# crti.S for ELF based systems\n \n-#   Copyright (C) 1992, 1998, 1999, 2008, 2009 Free Software Foundation, Inc.\n+#   Copyright (C) 1992, 1998, 1999, 2008, 2009, 2011\n+#   Free Software Foundation, Inc.\n #   Written By David Vinayak Henkel-Wallace, June 1992\n # \n # This file is free software; you can redistribute it and/or modify it", "previous_filename": "gcc/config/mcore/crti.asm"}, {"sha": "85f75b1d42f2e7877d77f589cf883c237d18e5ee", "filename": "libgcc/config/mcore/crtn.S", "status": "renamed", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fmcore%2Fcrtn.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fmcore%2Fcrtn.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmcore%2Fcrtn.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,7 +1,8 @@\n-# crtn.asm for ELF based systems\n+# crtn.S for ELF based systems\n \n-# Copyright (C) 1992, 1999, 2000, 2008, 2009 Free Software Foundation, Inc.\n-#   Written By David Vinayak Henkel-Wallace, June 1992\n+# Copyright (C) 1992, 1999, 2000, 2008, 2009, 2011\n+# Free Software Foundation, Inc.\n+# Written By David Vinayak Henkel-Wallace, June 1992\n # \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by the", "previous_filename": "gcc/config/mcore/crtn.asm"}, {"sha": "36e6f5dc7715c56f6be0cb6bd43a1c1226d48440", "filename": "libgcc/config/mep/t-mep", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fmep%2Ft-mep", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fmep%2Ft-mep", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmep%2Ft-mep?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -0,0 +1,2 @@\n+# Use -O0 instead of -O2 so we don't get complex relocations\n+CRTSTUFF_CFLAGS += -O0"}, {"sha": "3944443b437d0a72281a196b19cfc0426dd6189e", "filename": "libgcc/config/microblaze/crti.S", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fmicroblaze%2Fcrti.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fmicroblaze%2Fcrti.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmicroblaze%2Fcrti.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/microblaze/crti.s"}, {"sha": "7970dee1c931e25b9b00de98905c1ea39629b66c", "filename": "libgcc/config/microblaze/crtn.S", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fmicroblaze%2Fcrtn.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fmicroblaze%2Fcrtn.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmicroblaze%2Fcrtn.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/microblaze/crtn.s"}, {"sha": "ec17bb88c6aa0ebd680ae33b6d41cc61ef6fa076", "filename": "libgcc/config/microblaze/t-microblaze", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fmicroblaze%2Ft-microblaze", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fmicroblaze%2Ft-microblaze", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmicroblaze%2Ft-microblaze?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -8,5 +8,3 @@ LIB2ADD += \\\n         $(srcdir)/config/microblaze/udivsi3.asm \\\n         $(srcdir)/config/microblaze/umodsi3.asm \\\n         $(srcdir)/config/microblaze/divsi3_table.c\n-\n-MULTILIB_OPTIONS = mxl-barrel-shift mno-xl-soft-mul mxl-multiply-high"}, {"sha": "ac04271c598b456cecbf52c50e7e9412e9df2163", "filename": "libgcc/config/mips/crti.S", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fmips%2Fcrti.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fmips%2Fcrti.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmips%2Fcrti.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/mips/crti.asm"}, {"sha": "03a6b68c9cfe65195fb43f84d0576e9f2faccf1e", "filename": "libgcc/config/mips/crtn.S", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fmips%2Fcrtn.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fmips%2Fcrtn.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmips%2Fcrtn.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/mips/crtn.asm"}, {"sha": "d8ab43be2aee20cde830c29ec9397599136edad9", "filename": "libgcc/config/mips/t-crtstuff", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fmips%2Ft-crtstuff", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fmips%2Ft-crtstuff", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmips%2Ft-crtstuff?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -0,0 +1,2 @@\n+# Don't let CTOR_LIST end up in sdata section.\n+CRTSTUFF_T_CFLAGS = -G 0"}, {"sha": "698580469752933d58bc215f749605632cd111d5", "filename": "libgcc/config/mmix/crti.S", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fmmix%2Fcrti.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fmmix%2Fcrti.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmmix%2Fcrti.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+/* Copyright (C) 2001, 2002, 2011 Free Software Foundation, Inc.\n    Contributed by Hans-Peter Nilsson <hp@bitrange.com>\n \n This file is free software; you can redistribute it and/or modify it\n@@ -57,7 +57,7 @@ Main\tSETL\t$255,32\n \tPUT\trG,$255\n \n % Initialize the stack pointer.  It is supposedly made a global\n-% zero-initialized (allowed to change) register in crtn.asm; we use the\n+% zero-initialized (allowed to change) register in crtn.S; we use the\n % explicit number.\n \tGETA\t$255,stackpp\n \tLDOU\t$254,$255,0", "previous_filename": "gcc/config/mmix/crti.asm"}, {"sha": "c109e54db012a393ee85ad425b24b06baa077182", "filename": "libgcc/config/mmix/crtn.S", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fmmix%2Fcrtn.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fmmix%2Fcrtn.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmmix%2Fcrtn.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/mmix/crtn.asm"}, {"sha": "6793b3c5b9cb34c67dfbaedb730bcc6be80018f3", "filename": "libgcc/config/mmix/t-mmix", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fmmix%2Ft-mmix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fmmix%2Ft-mmix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmmix%2Ft-mmix?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,14 +1,20 @@\n+# We need to turn off some assumptions on normality for code in crtstuff.c\n+# and crt{i,n}.S, specifically about execution not continuing past the\n+# end of the section in the file being compiled.  Thus we must stop the\n+# assembler from generating stubbable PUSHJ relocs, because that will add\n+# stubs at the end of the current section when necessary.\n+CRTSTUFF_T_CFLAGS = -Wa,--no-stubs\n+\n # Don't use global registers in libraries.\n # FIXME: Not applied at \"root\" level, so disabled at the moment to stop\n # incorrect comparisons with -mabi=gnu.\n #MULTILIB_EXTRA_OPTS = mno-base-addresses\n \n-$(T)crti.o: $(gcc_srcdir)/config/mmix/crti.asm $(GCC_PASSES)\n-\t$(crt_compile) $(INCLUDES) \\\n-\t$(CRTSTUFF_T_CFLAGS) -c -x assembler-with-cpp \\\n-\t$(gcc_srcdir)/config/mmix/crti.asm\n+# Cannot use default rules due to $(CRTSTUFF_T_CFLAGS).\n+CUSTOM_CRTIN = yes\n+\n+crti.o: $(srcdir)/config/mmix/crti.S\n+\t$(crt_compile) $(CRTSTUFF_T_CFLAGS) -c $<\n \n-$(T)crtn.o: $(gcc_srcdir)/config/mmix/crtn.asm $(GCC_PASSES)\n-\t$(crt_compile) $(INCLUDES) \\\n-\t$(CRTSTUFF_T_CFLAGS) -c -x assembler-with-cpp \\\n-\t$(gcc_srcdir)/config/mmix/crtn.asm\n+crtn.o: $(srcdir)/config/mmix/crtn.S\n+\t$(crt_compile) $(CRTSTUFF_T_CFLAGS) -c $<"}, {"sha": "c59d3ecf0ef67d83af16dde956af2eb5421d2386", "filename": "libgcc/config/moxie/crti.S", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fmoxie%2Fcrti.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fmoxie%2Fcrti.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmoxie%2Fcrti.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,6 +1,6 @@\n-# crti.asm for moxie\n+# crti.S for moxie\n #\n-#   Copyright (C) 2009 Free Software Foundation\n+#   Copyright (C) 2009, 2011 Free Software Foundation\n # \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by the\n@@ -25,7 +25,7 @@\n # .init sections.  Users may put any desired instructions in those\n # sections.\n \n-\t.file\t\t\"crti.asm\"\n+\t.file\t\t\"crti.S\"\n \n \t.section\t\".init\"\n \t.global\t_init", "previous_filename": "gcc/config/moxie/crti.asm"}, {"sha": "f44582799a3421df1e072a00896ae7469f1f2ef1", "filename": "libgcc/config/moxie/crti.asm", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/libgcc%2Fconfig%2Fmoxie%2Fcrti.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/libgcc%2Fconfig%2Fmoxie%2Fcrti.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmoxie%2Fcrti.asm?ref=29026f66b08e17dc93d995fb3d48d2c0f7c51f26", "patch": "@@ -1,40 +0,0 @@\n-# crti.asm for moxie\n-#\n-#   Copyright (C) 2009 Free Software Foundation\n-# \n-# This file is free software; you can redistribute it and/or modify it\n-# under the terms of the GNU General Public License as published by the\n-# Free Software Foundation; either version 3, or (at your option) any\n-# later version.\n-# \n-# This file is distributed in the hope that it will be useful, but\n-# WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-# General Public License for more details.\n-# \n-# Under Section 7 of GPL version 3, you are granted additional\n-# permissions described in the GCC Runtime Library Exception, version\n-# 3.1, as published by the Free Software Foundation.\n-#\n-# You should have received a copy of the GNU General Public License and\n-# a copy of the GCC Runtime Library Exception along with this program;\n-# see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-# <http://www.gnu.org/licenses/>.\n-\n-# This file just make a stack frame for the contents of the .fini and\n-# .init sections.  Users may put any desired instructions in those\n-# sections.\n-\n-\t.file\t\t\"crti.asm\"\n-\n-\t.section\t\".init\"\n-\t.global\t_init\n-\t.type\t_init, @function\t\n-\t.p2align\t1\n-_init:\n-\n-\t.section\t\".fini\"\n-\t.global\t_fini\n-\t.type\t_fini,@function\n-\t.p2align\t1\n-_fini:"}, {"sha": "4455237a602ec33455cfb193019c7a140d477bd2", "filename": "libgcc/config/moxie/crtn.S", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fmoxie%2Fcrtn.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fmoxie%2Fcrtn.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmoxie%2Fcrtn.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,6 +1,6 @@\n-# crtn.asm for moxie\n+# crtn.S for moxie\n # \n-#   Copyright (C) 2009 Free Software Foundation\n+#   Copyright (C) 2009, 2011 Free Software Foundation\n # \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by the\n@@ -25,7 +25,7 @@\n # fact return.  Users may put any desired instructions in those sections.\n # This file is the last thing linked into any executable.\n \n-\t.file\t\t\"crtn.asm\"\n+\t.file\t\t\"crtn.S\"\n \n \t.section\t\".init\"\n \tret", "previous_filename": "libgcc/config/moxie/crtn.asm"}, {"sha": "6e62aec22244cff085a016e87a015beba8da6eb5", "filename": "libgcc/config/moxie/t-moxie", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/libgcc%2Fconfig%2Fmoxie%2Ft-moxie", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/libgcc%2Fconfig%2Fmoxie%2Ft-moxie", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmoxie%2Ft-moxie?ref=29026f66b08e17dc93d995fb3d48d2c0f7c51f26", "patch": "@@ -1,9 +0,0 @@\n-# Assemble startup files.\n-\n-$(T)crti.o: $(srcdir)/config/moxie/crti.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crti.o -x assembler-with-cpp $(srcdir)/config/moxie/crti.asm\n-\n-$(T)crtn.o: $(srcdir)/config/moxie/crtn.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n-\t-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/moxie/crtn.asm"}, {"sha": "d3cf559c8ab58d6b341d64362ba6a3f85f098238", "filename": "libgcc/config/pa/stublib.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fpa%2Fstublib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fpa%2Fstublib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fpa%2Fstublib.c?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/pa/stublib.c"}, {"sha": "017998ff68966cde4e8f4ec4321026e13ae08f9d", "filename": "libgcc/config/pa/t-stublib", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fpa%2Ft-stublib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fpa%2Ft-stublib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fpa%2Ft-stublib?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -0,0 +1,21 @@\n+LIBGCCSTUB_OBJS = pthread_default_stacksize_np-stub.o \\\n+\tpthread_mutex_lock-stub.o \\\n+\tpthread_mutex_unlock-stub.o \\\n+\tpthread_once-stub.o\n+\n+pthread_default_stacksize_np-stub.o: $(srcdir)/config/pa/stublib.c\n+\t$(gcc_compile) -c -O2 -DL_pthread_default_stacksize_np $<\n+\n+pthread_mutex_lock-stub.o: $(srcdir)/config/pa/stublib.c\n+\t$(gcc_compile) -c -O2 -DL_pthread_mutex_lock $<\n+\n+pthread_mutex_unlock-stub.o: $(srcdir)/config/pa/stublib.c\n+\t$(gcc_compile) -c -O2 -DL_pthread_mutex_unlock $<\n+\n+pthread_once-stub.o: $(srcdir)/config/pa/stublib.c\n+\t$(gcc_compile) -c -O2 -DL_pthread_once $<\n+\n+libgcc_stub.a: $(LIBGCCSTUB_OBJS)\n+\t-rm -rf $@\n+\t$(AR) rc $@ $<\n+\t$(RANLIB) $@"}, {"sha": "5d0d9682abfc3c64260d1cfb9019dc5cff484b3d", "filename": "libgcc/config/pa/t-stublib64", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fpa%2Ft-stublib64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fpa%2Ft-stublib64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fpa%2Ft-stublib64?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -0,0 +1,13 @@\n+LIBGCCSTUB_OBJS += rfi-stub.o dfi-stub.o jvrc-stub.o cxaf-stub.o\n+\n+rfi-stub.o: $(srcdir)/config/pa/stublib.c\n+\t$(gcc_compile) -c -O2 -DL_register_frame_info $<\n+\n+dfi-stub.o: $(srcdir)/config/pa/stublib.c\n+\t$(gcc_compile) -c -O2 -DL_deregister_frame_info $<\n+\n+cxaf-stub.o: $(srcdir)/config/pa/stublib.c\n+\t$(gcc_compile) -c -O2 -DL_cxa_finalize $<\n+\n+jvrc-stub.o: $(srcdir)/config/pa/stublib.c\n+\t$(gcc_compile) -c -O2 -DL_Jv_RegisterClasses $<"}, {"sha": "696f33d394f7af54962f7727be456d367ad1e383", "filename": "libgcc/config/rs6000/eabi-ci.S", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Frs6000%2Feabi-ci.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Frs6000%2Feabi-ci.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Feabi-ci.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/rs6000/eabi-ci.asm"}, {"sha": "68774097c7c08f3a35747d8c3b128d06f1717ed3", "filename": "libgcc/config/rs6000/eabi-cn.S", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Frs6000%2Feabi-cn.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Frs6000%2Feabi-cn.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Feabi-cn.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/rs6000/eabi-cn.asm"}, {"sha": "7c2fbae974715efa4b3f11f68174b44f3539dc87", "filename": "libgcc/config/rs6000/sol-ci.S", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Frs6000%2Fsol-ci.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Frs6000%2Fsol-ci.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Fsol-ci.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/rs6000/sol-ci.asm"}, {"sha": "4aeacaf2cfff76c294623d97166a3a56a59e397e", "filename": "libgcc/config/rs6000/sol-cn.S", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Frs6000%2Fsol-cn.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Frs6000%2Fsol-cn.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Fsol-cn.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/rs6000/sol-cn.asm"}, {"sha": "7422d383754e9b7e974fb74447a165add0acdbb3", "filename": "libgcc/config/rs6000/t-crtstuff", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Frs6000%2Ft-crtstuff", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Frs6000%2Ft-crtstuff", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-crtstuff?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -0,0 +1,3 @@\n+# If .sdata is enabled __CTOR_{LIST,END}__ go into .sdata instead of\n+# .ctors.\n+CRTSTUFF_T_CFLAGS = -msdata=none"}, {"sha": "174ccde2c3fcaafcb02c1994e39b413280cb34f2", "filename": "libgcc/config/rs6000/t-ppccomm", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Frs6000%2Ft-ppccomm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Frs6000%2Ft-ppccomm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-ppccomm?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -17,26 +17,10 @@ LIB2ADD_ST += crtsavfpr.S crtresfpr.S \\\n   e500crtsavg64gpr.S \\\n   e500crtsavg64gprctr.S\n \n-EXTRA_PARTS += crtbegin$(objext) crtend$(objext) \\\n-  crtbeginS$(objext) crtendS$(objext) crtbeginT$(objext) \\\n-  ecrti$(objext) ecrtn$(objext) ncrti$(objext) ncrtn$(objext)\n-\n # We build {e,n}crti.o and {e,n}crtn.o, which serve to add begin and\n # end labels to all of the special sections used when we link using gcc.\n \n # Assemble startup files.\n-ecrti.S: $(gcc_srcdir)/config/rs6000/eabi-ci.asm\n-\tcat $(gcc_srcdir)/config/rs6000/eabi-ci.asm >ecrti.S\n-\n-ecrtn.S: $(gcc_srcdir)/config/rs6000/eabi-cn.asm\n-\tcat $(gcc_srcdir)/config/rs6000/eabi-cn.asm >ecrtn.S\n-\n-ncrti.S: $(gcc_srcdir)/config/rs6000/sol-ci.asm\n-\tcat $(gcc_srcdir)/config/rs6000/sol-ci.asm >ncrti.S\n-\n-ncrtn.S: $(gcc_srcdir)/config/rs6000/sol-cn.asm\n-\tcat $(gcc_srcdir)/config/rs6000/sol-cn.asm >ncrtn.S\n-\n crtsavfpr.S: $(gcc_srcdir)/config/rs6000/crtsavfpr.asm\n \tcat $(gcc_srcdir)/config/rs6000/crtsavfpr.asm >crtsavfpr.S\n \n@@ -94,14 +78,14 @@ e500crtsavg64gpr.S: $(gcc_srcdir)/config/rs6000/e500crtsavg64gpr.asm\n e500crtsavg64gprctr.S: $(gcc_srcdir)/config/rs6000/e500crtsavg64gprctr.asm\n \tcat $(gcc_srcdir)/config/rs6000/e500crtsavg64gprctr.asm >e500crtsavg64gprctr.S\n \n-ecrti$(objext): ecrti.S\n+ecrti$(objext): $(srcdir)/config/rs6000/eabi-ci.S\n \t$(crt_compile) -c ecrti.S\n \n-ecrtn$(objext): ecrtn.S\n+ecrtn$(objext): $(srcdir)/config/rs6000/eabi-cn.S\n \t$(crt_compile) -c ecrtn.S\n \n-ncrti$(objext): ncrti.S\n+ncrti$(objext): $(srcdir)/config/rs6000/sol-ci.S\n \t$(crt_compile) -c ncrti.S\n \n-ncrtn$(objext): ncrtn.S\n+ncrtn$(objext): $(srcdir)/config/rs6000/sol-cn.S\n \t$(crt_compile) -c ncrtn.S"}, {"sha": "8e7c78b978b122040e215fec7811d8267fbab777", "filename": "libgcc/config/score/crti.S", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fscore%2Fcrti.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fscore%2Fcrti.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fscore%2Fcrti.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,6 +1,6 @@\n-# crti.asm for Sunplus S+CORE\n+# crti.S for Sunplus S+CORE\n #\n-#   Copyright (C) 2005, 2009, 2010 Free Software Foundation, Inc.\n+#   Copyright (C) 2005, 2009, 2010, 2011 Free Software Foundation, Inc.\n #\n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by the", "previous_filename": "gcc/config/score/crti.asm"}, {"sha": "adf4eb0840044c87bfd89242f649784d93aea4d9", "filename": "libgcc/config/score/crtn.S", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fscore%2Fcrtn.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fscore%2Fcrtn.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fscore%2Fcrtn.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,6 +1,6 @@\n-# crtn.asm for Sunplus S+CORE\n+# crtn.S for Sunplus S+CORE\n \n-#   Copyright (C) 2005, 2009, 2010 Free Software Foundation, Inc.\n+#   Copyright (C) 2005, 2009, 2010, 2011 Free Software Foundation, Inc.\n #\n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by the", "previous_filename": "gcc/config/score/crtn.asm"}, {"sha": "ce09a09458f2def6c50a37513f8be33730a95f8a", "filename": "libgcc/config/sh/crt1.S", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fsh%2Fcrt1.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fsh%2Fcrt1.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsh%2Fcrt1.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000, 2001, 2003, 2004, 2005, 2006, 2009\n+/* Copyright (C) 2000, 2001, 2003, 2004, 2005, 2006, 2009, 2011\n    Free Software Foundation, Inc.\n    This file was pretty much copied from newlib.\n \n@@ -36,7 +36,7 @@ __timer_stack:\n #endif /* MMU_SUPPORT */\n \t\n \t/* ;----------------------------------------\n-\tNormal newlib crt1.asm */\n+\tNormal newlib crt1.S */\n \n #ifdef __SH5__\n \t.section .data,\"aw\"", "previous_filename": "gcc/config/sh/crt1.asm"}, {"sha": "a8e4f8bed2266e26b19dd13e011bc7d09d631e13", "filename": "libgcc/config/sh/crti.S", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fsh%2Fcrti.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fsh%2Fcrti.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsh%2Fcrti.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000, 2001, 2009 Free Software Foundation, Inc.\n+/* Copyright (C) 2000, 2001, 2009, 2011 Free Software Foundation, Inc.\n    This file was adapted from glibc sources.\n \n This file is part of GCC.\n@@ -25,11 +25,11 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n /* The code in sections .init and .fini is supposed to be a single\n    regular function.  The function in .init is called directly from\n-   start in crt1.asm.  The function in .fini is atexit()ed in crt1.asm\n+   start in crt1.S.  The function in .fini is atexit()ed in crt1.S\n    too.\n \n-   crti.asm contributes the prologue of a function to these sections,\n-   and crtn.asm comes up the epilogue.  STARTFILE_SPEC should list\n+   crti.S contributes the prologue of a function to these sections,\n+   and crtn.S comes up the epilogue.  STARTFILE_SPEC should list\n    crti.o before any other object files that might add code to .init\n    or .fini sections, and ENDFILE_SPEC should list crtn.o after any\n    such object files.  */", "previous_filename": "gcc/config/sh/crti.asm"}, {"sha": "d2f58c01b1b643d05eaa4913fa0f27e1c05b0605", "filename": "libgcc/config/sh/crtn.S", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fsh%2Fcrtn.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fsh%2Fcrtn.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsh%2Fcrtn.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000, 2001, 2009 Free Software Foundation, Inc.\n+/* Copyright (C) 2000, 2001, 2009, 2011 Free Software Foundation, Inc.\n    This file was adapted from glibc sources.\n \n This file is part of GCC.\n@@ -22,7 +22,7 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n-/* See an explanation about .init and .fini in crti.asm.  */\n+/* See an explanation about .init and .fini in crti.S.  */\n \n \t.section .init\n #if __SHMEDIA__", "previous_filename": "gcc/config/sh/crtn.asm"}, {"sha": "b131877f1215740e581c4c53158f82c7c575bee8", "filename": "libgcc/config/sh/lib1funcs-4-300.S", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fsh%2Flib1funcs-4-300.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fsh%2Flib1funcs-4-300.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsh%2Flib1funcs-4-300.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/sh/lib1funcs-4-300.asm"}, {"sha": "aae57ccd36ce8d3f06643e6df395973060aa3300", "filename": "libgcc/config/sh/lib1funcs-Os-4-200.S", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fsh%2Flib1funcs-Os-4-200.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fsh%2Flib1funcs-Os-4-200.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsh%2Flib1funcs-Os-4-200.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/sh/lib1funcs-Os-4-200.asm"}, {"sha": "ab4d98089b12dafc1c1af2a10b5eb233b1839177", "filename": "libgcc/config/sh/t-sh", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fsh%2Ft-sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fsh%2Ft-sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsh%2Ft-sh?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -0,0 +1,53 @@\n+# Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n+# 2003, 2004, 2006, 2008, 2009, 2011 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+crt1.o: $(srcdir)/config/sh/crt1.S\n+\t$(gcc_compile) -c $<\n+\n+ic_invalidate_array_4-100.o: $(gcc_srcdir)/config/sh/lib1funcs.asm\n+\t$(gcc_compile) -c -DL_ic_invalidate_array -DWAYS=1 -DWAY_SIZE=0x2000 $<\n+libic_invalidate_array_4-100.a: ic_invalidate_array_4-100.o\n+\t$(AR_CREATE_FOR_TARGET) $@ $<\n+\n+ic_invalidate_array_4-200.o: $(gcc_srcdir)/config/sh/lib1funcs.asm\n+\t$(gcc_compile) -c -DL_ic_invalidate_array -DWAYS=2 -DWAY_SIZE=0x2000 $<\n+libic_invalidate_array_4-200.a: ic_invalidate_array_4-200.o\n+\t$(AR_CREATE_FOR_TARGET) $@ $<\n+\n+ic_invalidate_array_4a.o: $(gcc_srcdir)/config/sh/lib1funcs.asm\n+\t$(gcc_compile) -c -DL_ic_invalidate_array -D__FORCE_SH4A__ $<\n+libic_invalidate_array_4a.a: ic_invalidate_array_4a.o\n+\t$(AR_CREATE_FOR_TARGET) $@ $<\n+\n+sdivsi3_i4i-Os-4-200.o: $(srcdir)/config/sh/lib1funcs-Os-4-200.S\n+\t$(gcc_compile) -c -DL_sdivsi3_i4i $<\n+udivsi3_i4i-Os-4-200.o: $(srcdir)/config/sh/lib1funcs-Os-4-200.S\n+\t$(gcc_compile) -c -DL_udivsi3_i4i $<\n+unwind-dw2-Os-4-200.o: $(gcc_srcdir)/unwind-dw2.c\n+\t$(gcc_compile) $(LIBGCC2_CFLAGS) $(vis_hide) -fexceptions -Os -c $<\n+\n+OBJS_Os_4_200=sdivsi3_i4i-Os-4-200.o udivsi3_i4i-Os-4-200.o unwind-dw2-Os-4-200.o\n+libgcc-Os-4-200.a: $(OBJS_Os_4_200)\n+\t$(AR_CREATE_FOR_TARGET) $@ $(OBJS_Os_4_200)\n+\n+div_table-4-300.o: $(srcdir)/config/sh/lib1funcs-4-300.S\n+\t$(gcc_compile) -c -DL_div_table $<\n+\n+libgcc-4-300.a: div_table-4-300.o\n+\t$(AR_CREATE_FOR_TARGET) $@ div_table-4-300.o"}, {"sha": "b87aa5a316770c3f066b5f135be14ec20ff48b9b", "filename": "libgcc/config/sh/t-superh", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fsh%2Ft-superh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fsh%2Ft-superh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsh%2Ft-superh?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -0,0 +1,11 @@\n+# Compile crt1-mmu.o as crt1.o with -DMMU_SUPPORT\n+crt1-mmu.o: $(srcdir)/config/sh/crt1.S\n+\t$(gcc_compile) -c -DMMU_SUPPORT $<\n+\n+# Compile gcrt1-mmu.o as crt1-mmu.o with -DPROFILE\n+gcrt1-mmu.o: $(srcdir)/config/sh/crt1.S\n+\t$(gcc_compile) -c -DPROFILE -DMMU_SUPPORT $<\n+\n+# For sh4-400: Compile gcrt1.o as crt1.o with -DPROFILE\n+gcrt1.o: $(srcdir)/config/sh/crt1.S\n+\t$(gcc_compile) -c -DPROFILE $<"}, {"sha": "ca4a8929163c493bcdad5a3dad27c7a7dc5e5535", "filename": "libgcc/config/sparc/t-linux64", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fsparc%2Ft-linux64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fsparc%2Ft-linux64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsparc%2Ft-linux64?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -0,0 +1,2 @@\n+CRTSTUFF_T_CFLAGS = `if test x$$($(CC) -print-multi-os-directory) \\\n+\t\t\t= x../lib64; then echo -mcmodel=medany; fi`"}, {"sha": "9ffb6a0d1948bcf55fcb22ebc603b650d9438394", "filename": "libgcc/config/spu/cache.S", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fspu%2Fcache.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fspu%2Fcache.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fspu%2Fcache.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/spu/cache.S"}, {"sha": "e7abd5e62dbdc283ccc6c596b353cf9de7904c31", "filename": "libgcc/config/spu/cachemgr.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fspu%2Fcachemgr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fspu%2Fcachemgr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fspu%2Fcachemgr.c?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/spu/cachemgr.c"}, {"sha": "130d56102978fab4a88ee29d6cb643c91bdbf2cb", "filename": "libgcc/config/spu/t-elf", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fspu%2Ft-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fspu%2Ft-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fspu%2Ft-elf?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1,3 +1,35 @@\n+# Don't let CTOR_LIST end up in sdata section.\n+# FIXME: This is the default.\n+CRTSTUFF_T_CFLAGS =\n+\n+# Neither gcc or newlib seem to have a standard way to generate multiple\n+# crt*.o files.  So we don't use the standard crt0.o name anymore.\n+\n+cachemgr.o: $(srcdir)/config/spu/cachemgr.c\n+\t$(gcc_compile) -c $<\n+\n+# Specialised rule to add a -D flag.\n+cachemgr_nonatomic.o: $(srcdir)/config/spu/cachemgr.c\n+\t$(gcc_compile) -DNONATOMIC -c $<\n+\n+libgcc_%.a: %.o\n+\t$(AR_FOR_TARGET) -rcs $@ $<\n+\n+cache8k.o: $(srcdir)/config/spu/cache.S\n+\t$(gcc_compile) -D__CACHE_SIZE__=8 -c $<\n+\n+cache16k.o: $(srcdir)/config/spu/cache.S\n+\t$(gcc_compile) -D__CACHE_SIZE__=16 -c $<\n+\n+cache32k.o: $(srcdir)/config/spu/cache.S\n+\t$(gcc_compile) -D__CACHE_SIZE__=32 -c $<\n+\n+cache64k.o: $(srcdir)/config/spu/cache.S\n+\t$(gcc_compile) -D__CACHE_SIZE__=64 -c $<\n+\n+cache128k.o: $(srcdir)/config/spu/cache.S\n+\t$(gcc_compile) -D__CACHE_SIZE__=128 -c $<\n+\n # We provide our own version of __divdf3 that performs better and has\n # better support for non-default rounding modes.\n DPBIT_FUNCS := $(filter-out _div_df, $(DPBIT_FUNCS))"}, {"sha": "b30e0d52e2f6ff323d0a785ae91a6594978cad0c", "filename": "libgcc/config/t-crtin", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/libgcc%2Fconfig%2Ft-crtin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29026f66b08e17dc93d995fb3d48d2c0f7c51f26/libgcc%2Fconfig%2Ft-crtin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-crtin?ref=29026f66b08e17dc93d995fb3d48d2c0f7c51f26", "patch": "@@ -1,4 +0,0 @@\n-crti.o: $(srcdir)/config/$(cpu_type)/sol2-ci.S\n-\t$(crt_compile) -c $<\n-crtn.o: $(srcdir)/config/$(cpu_type)/sol2-cn.S\n-\t$(crt_compile) -c $<"}, {"sha": "55e5fc1015e812f8939fb3959ad1365e3031019c", "filename": "libgcc/config/t-crtstuff-pic", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Ft-crtstuff-pic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Ft-crtstuff-pic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-crtstuff-pic?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -1 +1,2 @@\n+# Compile crtbeginS.o and crtendS.o with pic.\n CRTSTUFF_T_CFLAGS_S = $(CRTSTUFF_T_CFLAGS) -fPIC", "previous_filename": "gcc/config/t-libc-ok"}, {"sha": "ab34a753378cecc8dfd2ecae664e9fcb59670f28", "filename": "libgcc/config/t-sol2", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Ft-sol2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Ft-sol2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-sol2?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -20,10 +20,16 @@\n gmon.o:\t$(srcdir)/config/gmon-sol2.c\n \t$(gcc_compile) -c $<\n \n+CUSTOM_CRTIN = yes\n+\n # Assemble startup files.\n crt1.o: $(srcdir)/config/$(cpu_type)/sol2-c1.S\n \t$(crt_compile) -c $<\n gcrt1.o: $(srcdir)/config/$(cpu_type)/sol2-c1.S\n \t$(crt_compile) -c -DGCRT1 $<\n+crti.o: $(srcdir)/config/$(cpu_type)/sol2-ci.S\n+\t$(crt_compile) -c $<\n+crtn.o: $(srcdir)/config/$(cpu_type)/sol2-cn.S\n+\t$(crt_compile) -c $<\n \n HOST_LIBGCC2_CFLAGS = -fPIC"}, {"sha": "93d8255dcb0186c23cb50700a396fa551cf8ce0d", "filename": "libgcc/config/vms/t-vms", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fvms%2Ft-vms", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fvms%2Ft-vms", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fvms%2Ft-vms?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -0,0 +1,6 @@\n+# Assemble startup files.\n+vcrt0.o: $(srcdir)/config/vms/vms-ucrt0.c\n+\t$(gcc_compile) -c $<\n+\n+pcrt0.o: $(srcdir)/config/vms/vms-ucrt0.c\n+\t$(gcc_compile) -c -DCRT0_POSIX_EXIT $<"}, {"sha": "344b59520e08a543d75f31e605b6359f9c5c5c8c", "filename": "libgcc/config/vms/vms-ucrt0.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fvms%2Fvms-ucrt0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fvms%2Fvms-ucrt0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fvms%2Fvms-ucrt0.c?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/vms/vms-ucrt0.c"}, {"sha": "cbe91b0e748966e4dfd6f11a05c8ce3d040ecaa6", "filename": "libgcc/config/xtensa/crti.S", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fxtensa%2Fcrti.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fxtensa%2Fcrti.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fxtensa%2Fcrti.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/xtensa/crti.asm"}, {"sha": "413cfa0ac10d5e5f978c921ba2e93899837fb6f0", "filename": "libgcc/config/xtensa/crtn.S", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fxtensa%2Fcrtn.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fxtensa%2Fcrtn.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fxtensa%2Fcrtn.S?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/config/xtensa/crtn.asm"}, {"sha": "dffcbc8b9d2f913bf0581debe79c67e5b42215ea", "filename": "libgcc/config/xtensa/t-elf", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fxtensa%2Ft-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fconfig%2Fxtensa%2Ft-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fxtensa%2Ft-elf?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "patch": "@@ -0,0 +1,3 @@\n+# Build CRT files and libgcc with the \"longcalls\" option\n+CRTSTUFF_T_CFLAGS += -mlongcalls\n+CRTSTUFF_T_CFLAGS_S += -mlongcalls"}, {"sha": "010d472765dfb1f9a5ba6d32aa55c84f1349cbb1", "filename": "libgcc/crtstuff.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f73c6ccf0d9c54714b162b9d314594311747de9/libgcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fcrtstuff.c?ref=5f73c6ccf0d9c54714b162b9d314594311747de9", "previous_filename": "gcc/crtstuff.c"}]}