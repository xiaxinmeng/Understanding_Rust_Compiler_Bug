{"sha": "5d66b937e3d1bbdbaace1da7bc5fac8a94793108", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ2NmI5MzdlM2QxYmJkYmFhY2UxZGE3YmM1ZmFjOGE5NDc5MzEwOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-09-19T08:12:39Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-09-19T08:12:39Z"}, "message": "[Ada] Improve handling of explicit by-reference mechanism\n\nThis improves the handling of an explicit by-reference passing mechanism\nspecified by means of the GNAT pragma Export_Function.  This device sort\nof circumvents the rules of the language for the by-reference passing\nmechanism and it's then up to the programmer to ensure that the actual\nparameter is addressable; if it is not, the compiler will generate a\ntemporary around the call, thus effectively passing the actual by copy.\n\nIt turns out that the compiler was too conservative when determining\nwhether the actual parameter is addressable, in particular if it's a\ncomponent of a record type subject to a representation clause.\n\nThe change effectively moves this computation from the front-end to the\nback-end, which has much more information on the layout and alignment\nof types and thus can be less conservative.\n\n2019-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch6.adb (Is_Legal_Copy): Also return false for an aliased\n\tformal and a formal passed by reference in convention Ada.  Add\n\tmissing guard to the existing test on Is_Valued_Procedure.\n\nFrom-SVN: r275931", "tree": {"sha": "4f2ebfa5a4a67a2c20f5e99859462cfa214adb31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f2ebfa5a4a67a2c20f5e99859462cfa214adb31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d66b937e3d1bbdbaace1da7bc5fac8a94793108", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d66b937e3d1bbdbaace1da7bc5fac8a94793108", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d66b937e3d1bbdbaace1da7bc5fac8a94793108", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d66b937e3d1bbdbaace1da7bc5fac8a94793108/comments", "author": null, "committer": null, "parents": [{"sha": "f4437882fe972b14eb5f4163de34fa9c909b5fb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4437882fe972b14eb5f4163de34fa9c909b5fb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4437882fe972b14eb5f4163de34fa9c909b5fb6"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "b0fdcf97ac0bd53b83aca998f9ded991e2bcdf6c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d66b937e3d1bbdbaace1da7bc5fac8a94793108/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d66b937e3d1bbdbaace1da7bc5fac8a94793108/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5d66b937e3d1bbdbaace1da7bc5fac8a94793108", "patch": "@@ -1,3 +1,9 @@\n+2019-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch6.adb (Is_Legal_Copy): Also return false for an aliased\n+\tformal and a formal passed by reference in convention Ada.  Add\n+\tmissing guard to the existing test on Is_Valued_Procedure.\n+\n 2019-09-19  Bob Duff  <duff@adacore.com>\n \n \t* rtsfind.ads (RTE_Available): Improve comment."}, {"sha": "d3540c3e35df83e7be63f257d027c73d052db0cb", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d66b937e3d1bbdbaace1da7bc5fac8a94793108/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d66b937e3d1bbdbaace1da7bc5fac8a94793108/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=5d66b937e3d1bbdbaace1da7bc5fac8a94793108", "patch": "@@ -1859,12 +1859,16 @@ package body Exp_Ch6 is\n          --  An attempt to copy a value of such a type can only occur if\n          --  representation clauses give the actual a misaligned address.\n \n-         if Is_By_Reference_Type (Etype (Formal)) then\n+         if Is_By_Reference_Type (Etype (Formal))\n+           or else Is_Aliased (Formal)\n+           or else (Mechanism (Formal) = By_Reference\n+                     and then not Has_Foreign_Convention (Subp))\n+         then\n \n             --  The actual may in fact be properly aligned but there is not\n             --  enough front-end information to determine this. In that case\n-            --  gigi will emit an error if a copy is not legal, or generate\n-            --  the proper code.\n+            --  gigi will emit an error or a warning if a copy is not legal,\n+            --  or generate the proper code.\n \n             return False;\n \n@@ -1875,6 +1879,7 @@ package body Exp_Ch6 is\n          --  be lurking.\n \n          elsif Mechanism (Formal) = By_Reference\n+           and then Ekind (Scope (Formal)) = E_Procedure\n            and then Is_Valued_Procedure (Scope (Formal))\n          then\n             Error_Msg_N"}]}