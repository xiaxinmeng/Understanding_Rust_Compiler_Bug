{"sha": "e60e09a0e0e8c1b17fc35cf25b739666a96010b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYwZTA5YTBlMGU4YzFiMTdmYzM1Y2YyNWI3Mzk2NjZhOTYwMTBiOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-01-30T18:05:53Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-01-30T18:05:53Z"}, "message": "re PR sanitizer/55374 ([asan] -static-libasan -static-libstdc++ doesn't work)\n\n\tPR sanitizer/55374\n\t* gcc.c (LIBASAN_SPEC): Define just to ADD_STATIC_LIBASAN_LIBS if\n\tLIBASAN_EARLY_SPEC is defined.\n\t(LIBASAN_EARLY_SPEC): Define to empty string if not already defined.\n\t(LINK_COMMAND_SPEC): Add LIBASAN_EARLY_SPEC for -fsanitize=address,\n\tbefore %o.\n\t* config/gnu-user.h (LIBASAN_EARLY_SPEC): Define.\n\n\t* g++.dg/asan/large-func-test-1.C: Allow both _Zna[jm] in addition\n\tto _Znw[jm] in the backtrace.  Allow _Zna[jm] to be the first frame\n\tprinted in backtrace.\n\t* g++.dg/asan/deep-stack-uaf-1.C: Use malloc instead of operator new\n\tto avoid errors about mismatched allocation vs. deallocation.\n\nFrom-SVN: r195585", "tree": {"sha": "fd21e26033e46b7fa15c4b038ed1fde6e14e347f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd21e26033e46b7fa15c4b038ed1fde6e14e347f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e60e09a0e0e8c1b17fc35cf25b739666a96010b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e60e09a0e0e8c1b17fc35cf25b739666a96010b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e60e09a0e0e8c1b17fc35cf25b739666a96010b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e60e09a0e0e8c1b17fc35cf25b739666a96010b9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3288746035c8699973d9242284606f1aad2465d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3288746035c8699973d9242284606f1aad2465d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3288746035c8699973d9242284606f1aad2465d2"}], "stats": {"total": 41, "additions": 36, "deletions": 5}, "files": [{"sha": "c93f31df6d355ef7be20b777d7ce342575ae7a4f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60e09a0e0e8c1b17fc35cf25b739666a96010b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60e09a0e0e8c1b17fc35cf25b739666a96010b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e60e09a0e0e8c1b17fc35cf25b739666a96010b9", "patch": "@@ -1,5 +1,13 @@\n 2013-01-30  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR sanitizer/55374\n+\t* gcc.c (LIBASAN_SPEC): Define just to ADD_STATIC_LIBASAN_LIBS if\n+\tLIBASAN_EARLY_SPEC is defined.\n+\t(LIBASAN_EARLY_SPEC): Define to empty string if not already defined.\n+\t(LINK_COMMAND_SPEC): Add LIBASAN_EARLY_SPEC for -fsanitize=address,\n+\tbefore %o.\n+\t* config/gnu-user.h (LIBASAN_EARLY_SPEC): Define.\n+\n \tPR c++/55742\n \t* config/i386/i386.c (ix86_valid_target_attribute_inner_p): Diagnose\n \tinvalid args instead of ICEing on it."}, {"sha": "6e3bbb48dff557158b41eb5d80e5fa797fae94a1", "filename": "gcc/config/gnu-user.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60e09a0e0e8c1b17fc35cf25b739666a96010b9/gcc%2Fconfig%2Fgnu-user.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60e09a0e0e8c1b17fc35cf25b739666a96010b9/gcc%2Fconfig%2Fgnu-user.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgnu-user.h?ref=e60e09a0e0e8c1b17fc35cf25b739666a96010b9", "patch": "@@ -98,6 +98,15 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_C99_FUNCTIONS 1\n #define TARGET_HAS_SINCOS 1\n \n+/* Link -lasan early on the command line.  For -static-libasan, don't link\n+   it for -shared link, the executable should be compiled with -static-libasan\n+   in that case, and for executable link link with --{,no-}whole-archive around\n+   it to force everything into the executable.  */\n+#undef LIBASAN_EARLY_SPEC\n+#define LIBASAN_EARLY_SPEC \"%{static-libasan:%{!shared:\" \\\n+  LD_STATIC_OPTION \" --whole-archive -lasan --no-whole-archive \" \\\n+  LD_DYNAMIC_OPTION \"}}%{!static-libasan:-lasan}\"\n+\n /* Additional libraries needed by -static-libasan.  */\n #undef STATIC_LIBASAN_LIBS\n #define STATIC_LIBASAN_LIBS \"-ldl -lpthread\""}, {"sha": "29735be1b9b22669f6c885c4d445b5026ebde3e4", "filename": "gcc/gcc.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60e09a0e0e8c1b17fc35cf25b739666a96010b9/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60e09a0e0e8c1b17fc35cf25b739666a96010b9/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=e60e09a0e0e8c1b17fc35cf25b739666a96010b9", "patch": "@@ -548,7 +548,9 @@ proper position among the other output files.  */\n #else\n #define ADD_STATIC_LIBASAN_LIBS\n #endif\n-#ifdef HAVE_LD_STATIC_DYNAMIC\n+#ifdef LIBASAN_EARLY_SPEC\n+#define LIBASAN_SPEC ADD_STATIC_LIBASAN_LIBS\n+#elif defined(HAVE_LD_STATIC_DYNAMIC)\n #define LIBASAN_SPEC \"%{static-libasan:\" LD_STATIC_OPTION \\\n \t\t     \"} -lasan %{static-libasan:\" LD_DYNAMIC_OPTION \"}\" \\\n \t\t     ADD_STATIC_LIBASAN_LIBS\n@@ -557,6 +559,10 @@ proper position among the other output files.  */\n #endif\n #endif\n \n+#ifndef LIBASAN_EARLY_SPEC\n+#define LIBASAN_EARLY_SPEC \"\"\n+#endif\n+\n #ifndef LIBTSAN_SPEC\n #ifdef HAVE_LD_STATIC_DYNAMIC\n #define LIBTSAN_SPEC \"%{static-libtsan:\" LD_STATIC_OPTION \\\n@@ -705,7 +711,8 @@ proper position among the other output files.  */\n    \"%{fuse-ld=*:-fuse-ld=%*}\\\n     %X %{o*} %{e*} %{N} %{n} %{r}\\\n     %{s} %{t} %{u*} %{z} %{Z} %{!nostdlib:%{!nostartfiles:%S}}\\\n-    %{static:} %{L*} %(mfwrap) %(link_libgcc) %o\\\n+    %{static:} %{L*} %(mfwrap) %(link_libgcc) \\\n+    %{fsanitize=address:\" LIBASAN_EARLY_SPEC \"} %o\\\n     %{fopenmp|ftree-parallelize-loops=*:%:include(libgomp.spec)%(link_gomp)}\\\n     %{fgnu-tm:%:include(libitm.spec)%(link_itm)}\\\n     %(mflib) \" STACK_SPLIT_SPEC \"\\"}, {"sha": "edd3d1489688604c7d25a98147d6925a1b502a09", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60e09a0e0e8c1b17fc35cf25b739666a96010b9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60e09a0e0e8c1b17fc35cf25b739666a96010b9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e60e09a0e0e8c1b17fc35cf25b739666a96010b9", "patch": "@@ -1,5 +1,12 @@\n 2013-01-30  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR sanitizer/55374\n+\t* g++.dg/asan/large-func-test-1.C: Allow both _Zna[jm] in addition\n+\tto _Znw[jm] in the backtrace.  Allow _Zna[jm] to be the first frame\n+\tprinted in backtrace.\n+\t* g++.dg/asan/deep-stack-uaf-1.C: Use malloc instead of operator new\n+\tto avoid errors about mismatched allocation vs. deallocation.\n+\n \tPR c++/55742\n \t* g++.dg/mv1.C: Moved to...\n \t* g++.dg/ext/mv1.C: ... here.  Adjust test."}, {"sha": "6ffec4c4c6def68208deed7df9790363bb2c83bc", "filename": "gcc/testsuite/g++.dg/asan/deep-stack-uaf-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60e09a0e0e8c1b17fc35cf25b739666a96010b9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fdeep-stack-uaf-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60e09a0e0e8c1b17fc35cf25b739666a96010b9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fdeep-stack-uaf-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fdeep-stack-uaf-1.C?ref=e60e09a0e0e8c1b17fc35cf25b739666a96010b9", "patch": "@@ -27,7 +27,7 @@ struct DeepFree<0> {\n };\n \n int main() {\n-  char *x = new char[10];\n+  char *x = (char*)malloc(10);\n   // deep_free(x);\n   DeepFree<200>::free(x);\n   return x[5];"}, {"sha": "32808e7a8bbabb7922b663e2ce698721932a4218", "filename": "gcc/testsuite/g++.dg/asan/large-func-test-1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60e09a0e0e8c1b17fc35cf25b739666a96010b9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Flarge-func-test-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60e09a0e0e8c1b17fc35cf25b739666a96010b9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Flarge-func-test-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Flarge-func-test-1.C?ref=e60e09a0e0e8c1b17fc35cf25b739666a96010b9", "patch": "@@ -41,5 +41,5 @@ int main() {\n // { dg-output \"    #0 0x\\[0-9a-f\\]+ (in \\[^\\n\\r]*LargeFunction\\[^\\n\\r]*(large-func-test-1.C:18|\\[^\\n\\r]*:0)|\\[(\\]).*(\\n|\\r\\n|\\r)\" }\n // { dg-output \"0x\\[0-9a-f\\]+ is located 44 bytes to the right of 400-byte region.*(\\n|\\r\\n|\\r)\" }\n // { dg-output \"allocated by thread T0 here:\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }\n-// { dg-output \"    #0 0x\\[0-9a-f\\]+ (in _*(interceptor_|)malloc|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }\n-// { dg-output \"    #1 0x\\[0-9a-f\\]+ (in (operator new|_*_Znw\\[mj\\])|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"    #0( 0x\\[0-9a-f\\]+ (in _*(interceptor_|)malloc|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"    #1|) 0x\\[0-9a-f\\]+ (in (operator new|_*_Zn\\[aw\\]\\[mj\\])|\\[(\\])\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" }"}]}