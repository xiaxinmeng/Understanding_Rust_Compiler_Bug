{"sha": "b06a282921c71bbc5cab69bc515804bd80f55e92", "node_id": "C_kwDOANBUbNoAKGIwNmEyODI5MjFjNzFiYmM1Y2FiNjliYzUxNTgwNGJkODBmNTVlOTI", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2022-06-11T23:16:24Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2022-06-27T12:47:45Z"}, "message": "amdgcn: remove obsolete assembler workarounds\n\nThis nonsense is no longer required, now that the minimum supported\nassembler version is LLVM 13.0.1.\n\ngcc/ChangeLog:\n\n\t* config/gcn/gcn.md (*movbi): Remove assembler bug workarounds.\n\t(jump): Likewise.\n\t(movdi_symbol_save_scc): Likewise.", "tree": {"sha": "9b161806f19131e0731c8a9f479ffca04c38d159", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b161806f19131e0731c8a9f479ffca04c38d159"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b06a282921c71bbc5cab69bc515804bd80f55e92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b06a282921c71bbc5cab69bc515804bd80f55e92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b06a282921c71bbc5cab69bc515804bd80f55e92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b06a282921c71bbc5cab69bc515804bd80f55e92/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c10a7546cf6158955dd680f92fd63a6f66a09e19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c10a7546cf6158955dd680f92fd63a6f66a09e19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c10a7546cf6158955dd680f92fd63a6f66a09e19"}], "stats": {"total": 36, "additions": 7, "deletions": 29}, "files": [{"sha": "033c1708e88a17d110a395e585cc8d58925f1a5e", "filename": "gcc/config/gcn/gcn.md", "status": "modified", "additions": 7, "deletions": 29, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b06a282921c71bbc5cab69bc515804bd80f55e92/gcc%2Fconfig%2Fgcn%2Fgcn.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b06a282921c71bbc5cab69bc515804bd80f55e92/gcc%2Fconfig%2Fgcn%2Fgcn.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.md?ref=b06a282921c71bbc5cab69bc515804bd80f55e92", "patch": "@@ -481,14 +481,7 @@\n        we emit bytes directly as a workaround.  */\n     switch (which_alternative) {\n     case 0:\n-      if (REG_P (operands[1]) && REGNO (operands[1]) == SCC_REG)\n-\treturn \"; s_mov_b32\\t%0,%1 is not supported by the assembler.\\;\"\n-\t       \".byte\\t0xfd\\;\"\n-\t       \".byte\\t0x0\\;\"\n-\t       \".byte\\t0x80|%R0\\;\"\n-\t       \".byte\\t0xbe\";\n-      else\n-\treturn \"s_mov_b32\\t%0, %1\";\n+      return \"s_mov_b32\\t%0, %1\";\n     case 1:\n       if (REG_P (operands[1]) && REGNO (operands[1]) == SCC_REG)\n \treturn \"; v_mov_b32\\t%0, %1\\;\"\n@@ -505,16 +498,8 @@\n     case 4:\n       return \"v_cmp_ne_u32\\tvcc, 0, %1\";\n     case 5:\n-      if (REGNO (operands[1]) == SCC_REG)\n-\treturn \"; s_mov_b32\\t%0, %1 is not supported by the assembler.\\;\"\n-\t       \".byte\\t0xfd\\;\"\n-\t       \".byte\\t0x0\\;\"\n-\t       \".byte\\t0xea\\;\"\n-\t       \".byte\\t0xbe\\;\"\n-\t       \"s_mov_b32\\tvcc_hi, 0\";\n-      else\n-\treturn \"s_mov_b32\\tvcc_lo, %1\\;\"\n-\t       \"s_mov_b32\\tvcc_hi, 0\";\n+      return \"s_mov_b32\\tvcc_lo, %1\\;\"\n+\t     \"s_mov_b32\\tvcc_hi, 0\";\n     case 6:\n       return \"s_load_dword\\t%0, %A1\\;s_waitcnt\\tlgkmcnt(0)\";\n     case 7:\n@@ -739,8 +724,7 @@\n       return \"s_branch\\t%0\";\n     else\n       /* !!! This sequence clobbers EXEC_SAVE_REG and CC_SAVE_REG.  */\n-      return \"; s_mov_b32\\ts22, scc is not supported by the assembler.\\;\"\n-\t     \".long\\t0xbe9600fd\\;\"\n+      return \"s_mov_b32\\ts22, scc\\;\"\n \t     \"s_getpc_b64\\ts[20:21]\\;\"\n \t     \"s_add_u32\\ts20, s20, %0@rel32@lo+4\\;\"\n \t     \"s_addc_u32\\ts21, s21, %0@rel32@hi+4\\;\"\n@@ -801,11 +785,7 @@\n \t  }\n \telse\n \t  return \"s_cbranch%c1\\t.Lskip%=\\;\"\n-\t\t \"; s_mov_b32\\ts22, scc is not supported by the assembler.\\;\"\n-\t\t \".byte\\t0xfd\\;\"\n-\t\t \".byte\\t0x0\\;\"\n-\t\t \".byte\\t0x80|22\\;\"\n-\t\t \".byte\\t0xbe\\;\"\n+\t\t \"s_mov_b32\\ts22, scc\\;\"\n \t\t \"s_getpc_b64\\ts[20:21]\\;\"\n \t\t \"s_add_u32\\ts20, s20, %0@rel32@lo+4\\;\"\n \t\t \"s_addc_u32\\ts21, s21, %0@rel32@hi+4\\;\"\n@@ -890,17 +870,15 @@\n \n     if (SYMBOL_REF_P (operands[1])\n \t&& SYMBOL_REF_WEAK (operands[1]))\n-\treturn \"; s_mov_b32\\ts22, scc is not supported by the assembler.\\;\"\n-\t       \".long\\t0xbe9600fd\\;\"\n+\treturn \"s_mov_b32\\ts22, scc\\;\"\n \t       \"s_getpc_b64\\t%0\\;\"\n \t       \"s_add_u32\\t%L0, %L0, %1@gotpcrel32@lo+4\\;\"\n \t       \"s_addc_u32\\t%H0, %H0, %1@gotpcrel32@hi+4\\;\"\n \t       \"s_load_dwordx2\\t%0, %0\\;\"\n \t       \"s_cmpk_lg_u32\\ts22, 0\\;\"\n \t       \"s_waitcnt\\tlgkmcnt(0)\";\n \n-    return \"; s_mov_b32\\ts22, scc is not supported by the assembler.\\;\"\n-\t   \".long\\t0xbe9600fd\\;\"\n+    return \"s_mov_b32\\ts22, scc\\;\"\n \t   \"s_getpc_b64\\t%0\\;\"\n \t   \"s_add_u32\\t%L0, %L0, %1@rel32@lo+4\\;\"\n \t   \"s_addc_u32\\t%H0, %H0, %1@rel32@hi+4\\;\""}]}