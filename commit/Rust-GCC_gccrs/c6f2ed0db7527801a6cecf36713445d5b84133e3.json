{"sha": "c6f2ed0db7527801a6cecf36713445d5b84133e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZmMmVkMGRiNzUyNzgwMWE2Y2VjZjM2NzEzNDQ1ZDViODQxMzNlMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-02-10T23:42:31Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-02-10T23:42:31Z"}, "message": "pt.c (check_explicit_specialization): Allow old-style specialization of class template members.\n\n\t* pt.c (check_explicit_specialization): Allow old-style specialization\n\tof class template members.\n\nFrom-SVN: r17836", "tree": {"sha": "cb8a7dd67fe374d58adfb1e4b4c85e432b7744d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb8a7dd67fe374d58adfb1e4b4c85e432b7744d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6f2ed0db7527801a6cecf36713445d5b84133e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6f2ed0db7527801a6cecf36713445d5b84133e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6f2ed0db7527801a6cecf36713445d5b84133e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6f2ed0db7527801a6cecf36713445d5b84133e3/comments", "author": null, "committer": null, "parents": [{"sha": "71cc65bdb7dc9acfa871c501bc1790ba76479395", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71cc65bdb7dc9acfa871c501bc1790ba76479395", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71cc65bdb7dc9acfa871c501bc1790ba76479395"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "1e3970ce0a7c9a43b47fbcdf1ca7b6cd5397098c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6f2ed0db7527801a6cecf36713445d5b84133e3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6f2ed0db7527801a6cecf36713445d5b84133e3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c6f2ed0db7527801a6cecf36713445d5b84133e3", "patch": "@@ -1,3 +1,8 @@\n+Tue Feb 10 23:41:57 1998  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (check_explicit_specialization): Allow old-style specialization\n+\tof class template members.\n+\n Tue Feb 10 20:36:52 1998  Jason Merrill  <jason@yorick.cygnus.com>\n \t\t\t  Manfred Hollstein  <manfred@s-direktnet.de>\n "}, {"sha": "b4ee69e734d7ac2b631963e10ac8b4a59d1e5f84", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6f2ed0db7527801a6cecf36713445d5b84133e3/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6f2ed0db7527801a6cecf36713445d5b84133e3/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c6f2ed0db7527801a6cecf36713445d5b84133e3", "patch": "@@ -712,34 +712,45 @@ check_explicit_specialization (declarator, decl, template_count, flags)\n \n \t  explicit_instantiation = 1;\n \t}\n-      else if ((ctype != NULL_TREE\n-\t\t&& !TYPE_BEING_DEFINED (ctype)\n-\t\t&& CLASSTYPE_TEMPLATE_INSTANTIATION (ctype))\n-\t       || TREE_CODE (declarator) == TEMPLATE_ID_EXPR)\n+      else if (ctype != NULL_TREE\n+\t       && !TYPE_BEING_DEFINED (ctype)\n+\t       && CLASSTYPE_TEMPLATE_INSTANTIATION (ctype))\n \t{\n-\t  /* The first part of the above clause catches illegal code\n-\t     that looks like this:\n+\t  /* This case catches outdated code that looks like this:\n \n-\t     template <class T> struct S { void f(); }\n+\t     template <class T> struct S { void f(); };\n \t     void S<int>::f() {} // Missing template <>\n \n \t     We disable this check when the type is being defined to\n \t     avoid complaining about default compiler-generated\n \t     constructors, destructors, and assignment operators.\n \t     Since the type is an instantiation, not a specialization,\n \t     these are the only functions that can be defined before\n-\t     the class is complete.\n+\t     the class is complete.  */\n \n-\t     The second part handles bogus declarations like\n+\t  /* If they said\n+\t       template <class T> void S<int>::f() {}\n+\t     that's bogus.  */\n+\t  if (template_header_count)\n+\t    {\n+\t      cp_error (\"template parameters specified in specialization\");\n+\t      return decl;\n+\t    }\n+\n+\t  if (pedantic)\n+\t    cp_pedwarn\n+\t      (\"explicit specialization not preceded by `template <>'\");\n+\t  specialization = 1;\n+\t  SET_DECL_TEMPLATE_SPECIALIZATION (decl);\n+\t}\n+      else if (TREE_CODE (declarator) == TEMPLATE_ID_EXPR)\n+\t{\n+\t  /* This case handles bogus declarations like\n \t     template <> template <class T>\n \t     void f<int>();  */\n \n-\t  if (template_header_count > template_count)\n-\t    cp_error (\"template-id `%D' in declaration of primary template\",\n-\t\t      declarator);\n-\t  else\n-\t    cp_error (\"explicit specialization not preceded by `template <>'\");\n-\n+\t  cp_error (\"template-id `%D' in declaration of primary template\",\n+\t\t    declarator);\n \t  return decl;\n \t}\n     }"}]}