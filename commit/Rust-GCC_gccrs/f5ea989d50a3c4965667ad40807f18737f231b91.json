{"sha": "f5ea989d50a3c4965667ad40807f18737f231b91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVlYTk4OWQ1MGEzYzQ5NjU2NjdhZDQwODA3ZjE4NzM3ZjIzMWI5MQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-10-25T19:24:01Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-10-25T19:24:01Z"}, "message": "input.c/libcpp: fix lifetimes of path buffers\n\nRunning \"make selftest-valgrind\" showed various leaks of the form:\n\n408 bytes in 24 blocks are definitely lost in loss record 572 of 679\n   at 0x4A0645D: malloc (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)\n   by 0x1B0D057: xmalloc (xmalloc.c:148)\n   by 0x1ACCAA1: append_file_to_dir(char const*, cpp_dir*) [clone .isra.3] (files.c:1567)\n   by 0x1ACD56F: _cpp_find_file (files.c:390)\n   by 0x1ACF8FB: cpp_read_main_file(cpp_reader*, char const*) (init.c:632)\n   by 0x1AB3D97: selftest::lexer_test::lexer_test(selftest::line_table_case const&, char const*, selftest::lexer_test_options*) (input.c:2014)\n   by 0x1AB792B: selftest::test_lexer_string_locations_u8(selftest::line_table_case const&) (input.c:2713)\n   by 0x1ABA22A: selftest::for_each_line_table_case(void (*)(selftest::line_table_case const&)) (input.c:3227)\n   by 0x1ABA381: selftest::input_c_tests() (input.c:3260)\n   by 0x1A295F1: selftest::run_tests() (selftest-run-tests.c:62)\n   by 0xF20DC4: toplev::run_self_tests() (toplev.c:2076)\n   by 0xF20FCD: toplev::main(int, char**) (toplev.c:2153)\n\nFix the leak by freeing the file->path in destroy_cpp_file.\nHowever, doing so would lead to a use-after-free in input.c's file cache\nsince the filenames in this cache are the libcpp file->path buffers.\n\nHence we need to ensure that any references to the file in the input.c\ncache are purged before cleaning up file->path.  This is normally done\nby the temp_source_file dtor.  Hence we need to reorder things to that\nthe temp_source_file dtor runs before cleaning up the cpp_parser.  The\npatch does this by introducing a wrapper class around cpp_parser *, so\nthat the dtor can run after the dtor for temp_source_file.\n\ngcc/ChangeLog:\n\t* input.c (fcache::file_patch): Add comment about lifetime.\n\t(selftest::cpp_reader_ptr): New class.\n\t(selftest::lexer_test): Convert m_parser from cpp_reader *\n\tto a cpp_reader_ptr, and move m_tempfile to after it.\n\t(selftest::lexer_test::lexer_test): Update for above reordering.\n\t(lexer_test::~lexer_test): Move cleanup of m_parser to\n\tcpp_reader_ptr's dtor.\n\nlibcpp/ChangeLog:\n\t* files.c (destroy_cpp_file): Free file->path.\n\nFrom-SVN: r241536", "tree": {"sha": "577d6785b1d140e60c6a5523ac860ed50ec2e5e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/577d6785b1d140e60c6a5523ac860ed50ec2e5e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5ea989d50a3c4965667ad40807f18737f231b91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5ea989d50a3c4965667ad40807f18737f231b91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5ea989d50a3c4965667ad40807f18737f231b91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5ea989d50a3c4965667ad40807f18737f231b91/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dd90ca33e8596f23354edc654528899feb12ff8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd90ca33e8596f23354edc654528899feb12ff8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd90ca33e8596f23354edc654528899feb12ff8a"}], "stats": {"total": 62, "additions": 54, "deletions": 8}, "files": [{"sha": "a1a920038afc6b7c5b0f1d931e936e35224f2a2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5ea989d50a3c4965667ad40807f18737f231b91/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5ea989d50a3c4965667ad40807f18737f231b91/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5ea989d50a3c4965667ad40807f18737f231b91", "patch": "@@ -1,3 +1,13 @@\n+2016-10-25  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* input.c (fcache::file_patch): Add comment about lifetime.\n+\t(selftest::cpp_reader_ptr): New class.\n+\t(selftest::lexer_test): Convert m_parser from cpp_reader *\n+\tto a cpp_reader_ptr, and move m_tempfile to after it.\n+\t(selftest::lexer_test::lexer_test): Update for above reordering.\n+\t(lexer_test::~lexer_test): Move cleanup of m_parser to\n+\tcpp_reader_ptr's dtor.\n+\n 2016-10-25  David Malcolm  <dmalcolm@redhat.com>\n \n \t* toplev.c (toplev::main): Remove call to"}, {"sha": "c2042e8e211b1f2f591663233b6c20d03a3d4238", "filename": "gcc/input.c", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5ea989d50a3c4965667ad40807f18737f231b91/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5ea989d50a3c4965667ad40807f18737f231b91/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=f5ea989d50a3c4965667ad40807f18737f231b91", "patch": "@@ -63,6 +63,10 @@ struct fcache\n      array.  */\n   unsigned use_count;\n \n+  /* The file_path is the key for identifying a particular file in\n+     the cache.\n+     For libcpp-using code, the underlying buffer for this field is\n+     owned by the corresponding _cpp_file within the cpp_reader.  */\n   const char *file_path;\n \n   FILE *fp;\n@@ -1918,6 +1922,29 @@ class lexer_test_options\n   virtual void apply (lexer_test &) = 0;\n };\n \n+/* Wrapper around an cpp_reader *, which calls cpp_finish and cpp_destroy\n+   in its dtor.\n+\n+   This is needed by struct lexer_test to ensure that the cleanup of the\n+   cpp_reader happens *after* the cleanup of the temp_source_file.  */\n+\n+class cpp_reader_ptr\n+{\n+ public:\n+  cpp_reader_ptr (cpp_reader *ptr) : m_ptr (ptr) {}\n+\n+  ~cpp_reader_ptr ()\n+  {\n+    cpp_finish (m_ptr, NULL);\n+    cpp_destroy (m_ptr);\n+  }\n+\n+  operator cpp_reader * () const { return m_ptr; }\n+\n+ private:\n+  cpp_reader *m_ptr;\n+};\n+\n /* A struct for writing lexer tests.  */\n \n struct lexer_test\n@@ -1928,9 +1955,16 @@ struct lexer_test\n \n   const cpp_token *get_token ();\n \n-  temp_source_file m_tempfile;\n+  /* The ordering of these fields matters.\n+     The line_table_test must be first, since the cpp_reader_ptr\n+     uses it.\n+     The cpp_reader must be cleaned up *after* the temp_source_file\n+     since the filenames in input.c's input cache are owned by the\n+     cpp_reader; in particular, when ~temp_source_file evicts the\n+     filename the filenames must still be alive.  */\n   line_table_test m_ltt;\n-  cpp_reader *m_parser;\n+  cpp_reader_ptr m_parser;\n+  temp_source_file m_tempfile;\n   string_concat_db m_concats;\n };\n \n@@ -1998,11 +2032,11 @@ ebcdic_execution_charset *ebcdic_execution_charset::s_singleton;\n    start parsing the tempfile.  */\n \n lexer_test::lexer_test (const line_table_case &case_, const char *content,\n-\t\t\tlexer_test_options *options) :\n+\t\t\tlexer_test_options *options)\n+: m_ltt (case_),\n+  m_parser (cpp_create_reader (CLK_GNUC99, NULL, line_table)),\n   /* Create a tempfile and write the text to it.  */\n   m_tempfile (SELFTEST_LOCATION, \".c\", content),\n-  m_ltt (case_),\n-  m_parser (cpp_create_reader (CLK_GNUC99, NULL, line_table)),\n   m_concats ()\n {\n   if (options)\n@@ -2026,9 +2060,6 @@ lexer_test::~lexer_test ()\n   tok = cpp_get_token_with_location (m_parser, &loc);\n   ASSERT_NE (tok, NULL);\n   ASSERT_EQ (tok->type, CPP_EOF);\n-\n-  cpp_finish (m_parser, NULL);\n-  cpp_destroy (m_parser);\n }\n \n /* Get the next token from m_parser.  */"}, {"sha": "9083bdab980d77bd69ec4cae326c46bdbae60c49", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5ea989d50a3c4965667ad40807f18737f231b91/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5ea989d50a3c4965667ad40807f18737f231b91/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=f5ea989d50a3c4965667ad40807f18737f231b91", "patch": "@@ -1,3 +1,7 @@\n+2016-10-25  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* files.c (destroy_cpp_file): Free file->path.\n+\n 2016-10-25  David Malcolm  <dmalcolm@redhat.com>\n \n \t* include/line-map.h (line_maps::~line_maps): New dtor."}, {"sha": "2c50e6c27e1b811fde42a2c989fd5c241d8e52c3", "filename": "libcpp/files.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5ea989d50a3c4965667ad40807f18737f231b91/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5ea989d50a3c4965667ad40807f18737f231b91/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=f5ea989d50a3c4965667ad40807f18737f231b91", "patch": "@@ -1132,6 +1132,7 @@ destroy_cpp_file (_cpp_file *file)\n {\n   free ((void *) file->buffer_start);\n   free ((void *) file->name);\n+  free ((void *) file->path);\n   free (file);\n }\n "}]}