{"sha": "632183ddcc8f3aead8b4fc63c4ab59a42ef9ad00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMyMTgzZGRjYzhmM2FlYWQ4YjRmYzYzYzRhYjU5YTQyZWY5YWQwMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-06-17T21:49:06Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-06-17T21:49:06Z"}, "message": "libstdc++: Avoid stack overflow in std::vector (PR 94540)\n\nThe std::__uninitialized_default_n algorithm used by std::vector creates\nan initial object as a local variable then copies that into the\ndestination range. If the object is too large for the stack this\ncrashes. We should create the first object directly into the\ndestination and then copy it from there.\n\nThis doesn't fix the bug for C++98, because in that case the initial\nvalue is created as a default argument of the vector constructor i.e. in\nthe user's code, not inside libstdc++. We can't prevent that.\n\n\tPR libstdc++/94540\n\t* include/bits/stl_uninitialized.h (__uninitialized_default_1<true>):\n\tConstruct the first value at *__first instead of on the stack.\n\t(__uninitialized_default_n_1<true>): Likewise.\n\tImprove comments on several of the non-standard algorithms.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_default/94540.cc:\n\tNew test.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_default_n/94540.cc:\n\tNew test.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_value_construct/94540.cc:\n\tNew test.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_value_construct_n/94540.cc:\n\tNew test.\n\t* testsuite/23_containers/vector/cons/94540.cc: New test.", "tree": {"sha": "ddcacb50ebec5eaf0359ac2b8fb250d934f467ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddcacb50ebec5eaf0359ac2b8fb250d934f467ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/632183ddcc8f3aead8b4fc63c4ab59a42ef9ad00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/632183ddcc8f3aead8b4fc63c4ab59a42ef9ad00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/632183ddcc8f3aead8b4fc63c4ab59a42ef9ad00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/632183ddcc8f3aead8b4fc63c4ab59a42ef9ad00/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "973bce0fb50bbfd91f47238b82b99935525716ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/973bce0fb50bbfd91f47238b82b99935525716ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/973bce0fb50bbfd91f47238b82b99935525716ad"}], "stats": {"total": 216, "additions": 200, "deletions": 16}, "files": [{"sha": "b5248fd49ea4eeb48fb2dbaeaea97dc95d297ddd", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632183ddcc8f3aead8b4fc63c4ab59a42ef9ad00/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632183ddcc8f3aead8b4fc63c4ab59a42ef9ad00/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=632183ddcc8f3aead8b4fc63c4ab59a42ef9ad00", "patch": "@@ -556,7 +556,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  typedef typename iterator_traits<_ForwardIterator>::value_type\n \t    _ValueType;\n \n-\t  std::fill(__first, __last, _ValueType());\n+\t  if (__first == __last)\n+\t    return;\n+\n+\t  typename iterator_traits<_ForwardIterator>::value_type* __val\n+\t    = std::__addressof(*__first);\n+\t  std::_Construct(__val);\n+\t  if (++__first != __last)\n+\t    std::fill(__first, __last, *__val);\n \t}\n     };\n \n@@ -589,16 +596,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         static _ForwardIterator\n         __uninit_default_n(_ForwardIterator __first, _Size __n)\n         {\n-\t  typedef typename iterator_traits<_ForwardIterator>::value_type\n-\t    _ValueType;\n-\n-\t  return std::fill_n(__first, __n, _ValueType());\n+\t  if (__n > 0)\n+\t    {\n+\t      typename iterator_traits<_ForwardIterator>::value_type* __val\n+\t\t= std::__addressof(*__first);\n+\t      std::_Construct(__val);\n+\t      ++__first;\n+\t      __first = std::fill_n(__first, __n - 1, *__val);\n+\t    }\n+\t  return __first;\n \t}\n     };\n \n   // __uninitialized_default\n-  // Fills [first, last) with std::distance(first, last) default\n-  // constructed value_types(s).\n+  // Fills [first, last) with value-initialized value_types.\n   template<typename _ForwardIterator>\n     inline void\n     __uninitialized_default(_ForwardIterator __first,\n@@ -615,7 +626,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   // __uninitialized_default_n\n-  // Fills [first, first + n) with n default constructed value_type(s).\n+  // Fills [first, first + n) with value-initialized value_types.\n   template<typename _ForwardIterator, typename _Size>\n     inline _ForwardIterator\n     __uninitialized_default_n(_ForwardIterator __first, _Size __n)\n@@ -633,8 +644,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \n   // __uninitialized_default_a\n-  // Fills [first, last) with std::distance(first, last) default\n-  // constructed value_types(s), constructed with the allocator alloc.\n+  // Fills [first, last) with value_types constructed by the allocator\n+  // alloc, with no arguments passed to the construct call.\n   template<typename _ForwardIterator, typename _Allocator>\n     void\n     __uninitialized_default_a(_ForwardIterator __first,\n@@ -664,8 +675,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \n   // __uninitialized_default_n_a\n-  // Fills [first, first + n) with n default constructed value_types(s),\n-  // constructed with the allocator alloc.\n+  // Fills [first, first + n) with value_types constructed by the allocator\n+  // alloc, with no arguments passed to the construct call.\n   template<typename _ForwardIterator, typename _Size, typename _Allocator>\n     _ForwardIterator\n     __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, \n@@ -686,6 +697,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     }\n \n+  // __uninitialized_default_n_a specialization for std::allocator,\n+  // which ignores the allocator and value-initializes the elements.\n   template<typename _ForwardIterator, typename _Size, typename _Tp>\n     inline _ForwardIterator\n     __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, \n@@ -757,8 +770,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n   // __uninitialized_default_novalue\n-  // Fills [first, last) with std::distance(first, last) default-initialized\n-  // value_types(s).\n+  // Fills [first, last) with default-initialized value_types.\n   template<typename _ForwardIterator>\n     inline void\n     __uninitialized_default_novalue(_ForwardIterator __first,\n@@ -772,8 +784,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__uninit_default_novalue(__first, __last);\n     }\n \n-  // __uninitialized_default_n\n-  // Fills [first, first + n) with n default-initialized value_type(s).\n+  // __uninitialized_default_novalue_n\n+  // Fills [first, first + n) with default-initialized value_types.\n   template<typename _ForwardIterator, typename _Size>\n     inline _ForwardIterator\n     __uninitialized_default_novalue_n(_ForwardIterator __first, _Size __n)"}, {"sha": "c55d2aa88fd82ba71b079556a73bf354f1963c41", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_default/94540.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632183ddcc8f3aead8b4fc63c4ab59a42ef9ad00/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_default%2F94540.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632183ddcc8f3aead8b4fc63c4ab59a42ef9ad00/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_default%2F94540.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_default%2F94540.cc?ref=632183ddcc8f3aead8b4fc63c4ab59a42ef9ad00", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target { c++11 && { ! simulator } } } }\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+// Assume that 9MB is larger than the stack limit.\n+struct X { char data[9*1024*1024]; };\n+\n+static_assert( std::is_trivial<X>::value, \"\" );\n+\n+int main()\n+{\n+  auto mem = new char[sizeof(X) * 2];\n+  auto p = reinterpret_cast<X*>(mem);\n+  std::__uninitialized_default(p, p + 2);\n+  delete[] mem;\n+}"}, {"sha": "948a3a084130d5bed9a4827aedb18e49570460ff", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_default_n/94540.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632183ddcc8f3aead8b4fc63c4ab59a42ef9ad00/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_default_n%2F94540.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632183ddcc8f3aead8b4fc63c4ab59a42ef9ad00/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_default_n%2F94540.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_default_n%2F94540.cc?ref=632183ddcc8f3aead8b4fc63c4ab59a42ef9ad00", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target { c++11 && { ! simulator } } } }\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+// Assume that 9MB is larger than the stack limit.\n+struct X { char data[9*1024*1024]; };\n+\n+static_assert( std::is_trivial<X>::value, \"\" );\n+\n+int main()\n+{\n+  auto mem = new char[sizeof(X) * 2];\n+  auto p = reinterpret_cast<X*>(mem);\n+  std::__uninitialized_default_n(p, 2);\n+  delete[] mem;\n+}"}, {"sha": "9fc5e5dd6fdb7d5ecb387f56d30b9220449002c3", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_value_construct/94540.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632183ddcc8f3aead8b4fc63c4ab59a42ef9ad00/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_value_construct%2F94540.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632183ddcc8f3aead8b4fc63c4ab59a42ef9ad00/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_value_construct%2F94540.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_value_construct%2F94540.cc?ref=632183ddcc8f3aead8b4fc63c4ab59a42ef9ad00", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run { target { c++17 && { ! simulator } } } }\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+// Assume that 9MB is larger than the stack limit.\n+struct X { char data[9*1024*1024]; };\n+\n+static_assert( std::is_trivial_v<X> );\n+\n+int main()\n+{\n+  auto mem = new char[sizeof(X) * 2];\n+  auto p = reinterpret_cast<X*>(mem);\n+  std::uninitialized_value_construct(p, p + 2);\n+  delete[] mem;\n+}"}, {"sha": "39d092028c9ef9661cadac0aa3785d8e561decf7", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_value_construct_n/94540.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632183ddcc8f3aead8b4fc63c4ab59a42ef9ad00/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_value_construct_n%2F94540.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632183ddcc8f3aead8b4fc63c4ab59a42ef9ad00/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_value_construct_n%2F94540.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_value_construct_n%2F94540.cc?ref=632183ddcc8f3aead8b4fc63c4ab59a42ef9ad00", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run { target { c++17 && { ! simulator } } } }\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+// Assume that 9MB is larger than the stack limit.\n+struct X { char data[9*1024*1024]; };\n+\n+static_assert( std::is_trivial_v<X> );\n+\n+int main()\n+{\n+  auto mem = new char[sizeof(X) * 2];\n+  std::uninitialized_value_construct_n(reinterpret_cast<X*>(mem), 2);\n+  delete[] mem;\n+}"}, {"sha": "6a1b7f43ec6adeee0e5c39a2b4e9dcd016522910", "filename": "libstdc++-v3/testsuite/23_containers/vector/cons/94540.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632183ddcc8f3aead8b4fc63c4ab59a42ef9ad00/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F94540.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632183ddcc8f3aead8b4fc63c4ab59a42ef9ad00/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F94540.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F94540.cc?ref=632183ddcc8f3aead8b4fc63c4ab59a42ef9ad00", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target { c++11 && { ! simulator } } } }\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+// Assume that 9MB is larger than the stack limit.\n+struct X { char data[9*1024*1024]; };\n+\n+static_assert( std::is_trivial<X>::value, \"\" );\n+\n+int main()\n+{\n+  std::vector<X> v(1);\n+  VERIFY( v.size() == 1 );\n+  v.clear();\n+  v.resize(2);\n+  VERIFY( v.size() == 2 );\n+}"}]}