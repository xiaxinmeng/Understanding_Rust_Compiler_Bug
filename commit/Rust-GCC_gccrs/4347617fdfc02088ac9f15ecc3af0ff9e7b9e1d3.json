{"sha": "4347617fdfc02088ac9f15ecc3af0ff9e7b9e1d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM0NzYxN2ZkZmMwMjA4OGFjOWYxNWVjYzNhZjBmZjllN2I5ZTFkMw==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-07-29T13:28:54Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-07-29T13:28:54Z"}, "message": "[ARM/AArch64 Testsuite] Add basic fp16 tests\n\n\t* gcc.target/aarch64/fp16/fp16.exp: New.\n\t* gcc.target/aarch64/fp16/f16_convs_1.c: New.\n\t* gcc.target/aarch64/fp16/f16_convs_2.c: New.\n\nFrom-SVN: r226350", "tree": {"sha": "8cca5c8d2e73c98401fcc311100dfd2bcb780252", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cca5c8d2e73c98401fcc311100dfd2bcb780252"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4347617fdfc02088ac9f15ecc3af0ff9e7b9e1d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4347617fdfc02088ac9f15ecc3af0ff9e7b9e1d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4347617fdfc02088ac9f15ecc3af0ff9e7b9e1d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4347617fdfc02088ac9f15ecc3af0ff9e7b9e1d3/comments", "author": null, "committer": null, "parents": [{"sha": "ef20ab5e01887341e8273dc3909b5d6c04663a5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef20ab5e01887341e8273dc3909b5d6c04663a5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef20ab5e01887341e8273dc3909b5d6c04663a5c"}], "stats": {"total": 116, "additions": 116, "deletions": 0}, "files": [{"sha": "868cb4d7746dbb7b71540b71c1c4adf295eb57e3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4347617fdfc02088ac9f15ecc3af0ff9e7b9e1d3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4347617fdfc02088ac9f15ecc3af0ff9e7b9e1d3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4347617fdfc02088ac9f15ecc3af0ff9e7b9e1d3", "patch": "@@ -1,3 +1,9 @@\n+2015-07-29  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* gcc.target/aarch64/fp16/fp16.exp: New.\n+\t* gcc.target/aarch64/fp16/f16_convs_1.c: New.\n+\t* gcc.target/aarch64/fp16/f16_convs_2.c: New.\n+\n 2015-07-29  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* gcc.target/aarch64/f16_movs_1.c: New test."}, {"sha": "a1c95fd28d14668c5cfa9cfb419c945878d7ac2b", "filename": "gcc/testsuite/gcc.target/aarch64/fp16/f16_convs_1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4347617fdfc02088ac9f15ecc3af0ff9e7b9e1d3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16%2Ff16_convs_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4347617fdfc02088ac9f15ecc3af0ff9e7b9e1d3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16%2Ff16_convs_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16%2Ff16_convs_1.c?ref=4347617fdfc02088ac9f15ecc3af0ff9e7b9e1d3", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-additional-options \"-mfp16-format=ieee\" {target \"arm*-*-*\"} } */\n+\n+extern void abort (void);\n+\n+#define EPSILON 0.0001\n+\n+int\n+main (int argc, char **argv)\n+{\n+  float f1 = 3.14159f;\n+  float f2 = 2.718f;\n+  /* This 'assembler' statement should be portable between ARM and AArch64.  */\n+  asm volatile (\"\" : : : \"memory\");\n+  __fp16 in1 = f1;\n+  __fp16 in2 = f2;\n+\n+  /* Do the addition on __fp16's (implicitly converts both operands to\n+     float32, adds, converts back to f16, then we convert back to f32).  */\n+  __fp16 res1 = in1 + in2;\n+  asm volatile (\"\" : : : \"memory\");\n+  float f_res_1 = res1;\n+\n+  /* Do the addition on float32's (we convert both operands to f32, and add,\n+     as above, but skip the final conversion f32 -> f16 -> f32).  */\n+  float f1a = in1;\n+  float f2a = in2;\n+  float f_res_2 = f1a + f2a;\n+\n+  if (__builtin_fabs (f_res_2 - f_res_1) > EPSILON)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "6aa3e59c15e0eb85595871b47e8d8aa937cca47e", "filename": "gcc/testsuite/gcc.target/aarch64/fp16/f16_convs_2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4347617fdfc02088ac9f15ecc3af0ff9e7b9e1d3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16%2Ff16_convs_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4347617fdfc02088ac9f15ecc3af0ff9e7b9e1d3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16%2Ff16_convs_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16%2Ff16_convs_2.c?ref=4347617fdfc02088ac9f15ecc3af0ff9e7b9e1d3", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-additional-options \"-mfp16-format=ieee\" {target \"arm*-*-*\"} } */\n+\n+extern void abort (void);\n+\n+#define EPSILON 0.0001\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i1 = 3;\n+  int i2 = 2;\n+  /*  This 'assembler' should be portable across ARM and AArch64.  */\n+  asm volatile (\"\" : : : \"memory\");\n+\n+  __fp16 in1 = i1;\n+  __fp16 in2 = i2;\n+\n+  /* Do the addition on __fp16's (implicitly converts both operands to\n+     float32, adds, converts back to f16, then we convert to int).  */\n+  __fp16 res1 = in1 + in2;\n+  asm volatile (\"\" : : : \"memory\");\n+  int result1 = res1;\n+\n+  /* Do the addition on int's (we convert both operands directly to int, add,\n+     and we're done).  */\n+  int result2 = ((int) in1) + ((int) in2);\n+\n+  if (__builtin_abs (result2 - result1) > EPSILON)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "7dc8d654a34004d280a1e9f6b9f39d868a60464a", "filename": "gcc/testsuite/gcc.target/aarch64/fp16/fp16.exp", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4347617fdfc02088ac9f15ecc3af0ff9e7b9e1d3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16%2Ffp16.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4347617fdfc02088ac9f15ecc3af0ff9e7b9e1d3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16%2Ffp16.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffp16%2Ffp16.exp?ref=4347617fdfc02088ac9f15ecc3af0ff9e7b9e1d3", "patch": "@@ -0,0 +1,43 @@\n+# Tests of 16-bit floating point (__fp16), for both ARM and AArch64.\n+# Copyright (C) 2015 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't an ARM or AArch64 target.\n+if {![istarget arm*-*-*]\n+    && ![istarget aarch64*-*-*]} then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cC\\]]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}]}