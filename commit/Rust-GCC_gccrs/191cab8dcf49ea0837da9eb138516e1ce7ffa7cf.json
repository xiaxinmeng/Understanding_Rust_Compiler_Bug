{"sha": "191cab8dcf49ea0837da9eb138516e1ce7ffa7cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkxY2FiOGRjZjQ5ZWEwODM3ZGE5ZWIxMzg1MTZlMWNlN2ZmYTdjZg==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2005-11-15T13:58:22Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-11-15T13:58:22Z"}, "message": "exp_intr.adb (Expand_Unc_Deallocation): If GIGI needs an actual subtype to compute the size of the designated object at...\n\n2005-11-14  Thomas Quinot  <quinot@adacore.com>\n\t    Robert Dewar  <dewar@adacore.com>\n\t    Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_intr.adb (Expand_Unc_Deallocation): If GIGI needs an actual\n\tsubtype to compute the size of the designated object at run-time,\n\tcreate such a subtype and store it in the Actual_Designated_Subtype\n\tattribute of the N_Free_Statement.\n\tGenerate itype for classwide designated object in both cases of\n\tuser-specified storage pool: specific and class-wide, not only in the\n\tspecific case.\n\tRaise CE when trying to set a not null access type object to null.\n\t(Expand_Dispatching_Constructor_Call): Retrieve subprogram actual with\n\tan explicit loop, because freeze nodes make its position variable.\n\n\t* sem_intr.adb (Check_Intrinsic_Call): Given warning for freeing not\n\tnull object.\n\nFrom-SVN: r106976", "tree": {"sha": "cdab281021e660fa90e4db3583dabce0806d6892", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdab281021e660fa90e4db3583dabce0806d6892"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/191cab8dcf49ea0837da9eb138516e1ce7ffa7cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/191cab8dcf49ea0837da9eb138516e1ce7ffa7cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/191cab8dcf49ea0837da9eb138516e1ce7ffa7cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/191cab8dcf49ea0837da9eb138516e1ce7ffa7cf/comments", "author": null, "committer": null, "parents": [{"sha": "65b1b4317c419981d35e0f2c7e71236fd105bc96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65b1b4317c419981d35e0f2c7e71236fd105bc96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65b1b4317c419981d35e0f2c7e71236fd105bc96"}], "stats": {"total": 180, "additions": 121, "deletions": 59}, "files": [{"sha": "6eb9bedd9b12c42cfb2978da25a15abbea1941c2", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 111, "deletions": 58, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191cab8dcf49ea0837da9eb138516e1ce7ffa7cf/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191cab8dcf49ea0837da9eb138516e1ce7ffa7cf/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=191cab8dcf49ea0837da9eb138516e1ce7ffa7cf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,7 +35,7 @@ with Exp_Code; use Exp_Code;\n with Exp_Disp; use Exp_Disp;\n with Exp_Fixd; use Exp_Fixd;\n with Exp_Util; use Exp_Util;\n-with Itypes;   use Itypes;\n+with Freeze;   use Freeze;\n with Namet;    use Namet;\n with Nmake;    use Nmake;\n with Nlists;   use Nlists;\n@@ -133,13 +133,25 @@ package body Exp_Intr is\n       Param_Arg  : constant Node_Id    := Next_Actual (Tag_Arg);\n       Subp_Decl  : constant Node_Id    := Parent (Parent (Entity (Name (N))));\n       Inst_Pkg   : constant Node_Id    := Parent (Subp_Decl);\n-      Act_Rename : constant Node_Id    :=\n-                     Next (Next (First (Visible_Declarations (Inst_Pkg))));\n-      Act_Constr : constant Entity_Id  := Entity (Name (Act_Rename));\n-      Result_Typ : constant Entity_Id  := Class_Wide_Type (Etype (Act_Constr));\n+      Act_Rename : Node_Id;\n+      Act_Constr : Entity_Id;\n+      Result_Typ : Entity_Id;\n       Cnstr_Call : Node_Id;\n \n    begin\n+      --  The subprogram is the third actual in the instantiation, and is\n+      --  retrieved from the corresponding renaming declaration. However,\n+      --  freeze nodes may appear before, so we retrieve the declaration\n+      --  with an explicit loop.\n+\n+      Act_Rename := First (Visible_Declarations (Inst_Pkg));\n+      while Nkind (Act_Rename) /= N_Subprogram_Renaming_Declaration loop\n+         Next (Act_Rename);\n+      end loop;\n+\n+      Act_Constr := Entity (Name (Act_Rename));\n+      Result_Typ := Class_Wide_Type (Etype (Act_Constr));\n+\n       --  Create the call to the actual Constructor function\n \n       Cnstr_Call :=\n@@ -829,6 +841,82 @@ package body Exp_Intr is\n       Append_To (Stmts, Free_Node);\n       Set_Storage_Pool (Free_Node, Pool);\n \n+      --  Deal with storage pool\n+\n+      if Present (Pool) then\n+\n+         --  Freeing the secondary stack is meaningless\n+\n+         if Is_RTE (Pool, RE_SS_Pool) then\n+            null;\n+\n+         elsif Is_Class_Wide_Type (Etype (Pool)) then\n+\n+            --  Case of a class-wide pool type: make a dispatching call\n+            --  to Deallocate through the class-wide Deallocate_Any.\n+\n+            Set_Procedure_To_Call (Free_Node,\n+              RTE (RE_Deallocate_Any));\n+\n+         else\n+            --  Case of a specific pool type: make a statically bound call\n+\n+            Set_Procedure_To_Call (Free_Node,\n+              Find_Prim_Op (Etype (Pool), Name_Deallocate));\n+         end if;\n+      end if;\n+\n+      if Present (Procedure_To_Call (Free_Node)) then\n+\n+         --  For all cases of a Deallocate call, the back-end needs to be\n+         --  able to compute the size of the object being freed. This may\n+         --  require some adjustments for objects of dynamic size.\n+         --\n+         --  If the type is class wide, we generate an implicit type with the\n+         --  right dynamic size, so that the deallocate call gets the right\n+         --  size parameter computed by GIGI. Same for an access to\n+         --  unconstrained packed array.\n+\n+         if Is_Class_Wide_Type (Desig_T)\n+           or else\n+            (Is_Array_Type (Desig_T)\n+               and then not Is_Constrained (Desig_T)\n+               and then Is_Packed (Desig_T))\n+         then\n+            declare\n+               Deref    : constant Node_Id :=\n+                            Make_Explicit_Dereference (Loc,\n+                              Duplicate_Subexpr_No_Checks (Arg));\n+               D_Subtyp : Node_Id;\n+               D_Type   : Entity_Id;\n+\n+            begin\n+               Set_Etype  (Deref, Typ);\n+               Set_Parent (Deref, Free_Node);\n+               D_Subtyp := Make_Subtype_From_Expr (Deref, Desig_T);\n+\n+               if Nkind (D_Subtyp) in N_Has_Entity then\n+                  D_Type := Entity (D_Subtyp);\n+\n+               else\n+                  D_Type := Make_Defining_Identifier (Loc,\n+                              New_Internal_Name ('A'));\n+                  Insert_Action (N,\n+                    Make_Subtype_Declaration (Loc,\n+                      Defining_Identifier => D_Type,\n+                      Subtype_Indication  => D_Subtyp));\n+                  Freeze_Itype (D_Type, N);\n+\n+               end if;\n+\n+               Set_Actual_Designated_Subtype (Free_Node, D_Type);\n+            end;\n+\n+         end if;\n+      end if;\n+\n+      Set_Expression (Free_Node, Free_Arg);\n+\n       --  Make implicit if statement. We omit this if we are the then part\n       --  of a test of the form:\n \n@@ -881,62 +969,27 @@ package body Exp_Intr is\n          end if;\n       end;\n \n-      --  Deal with storage pool\n-\n-      if Present (Pool) then\n-\n-         --  Freeing the secondary stack is meaningless\n-\n-         if Is_RTE (Pool, RE_SS_Pool) then\n-            null;\n+      --  Only remaining step is to set result to null, or generate a\n+      --  raise of constraint error if the target object is \"not null\".\n \n-         elsif Is_Class_Wide_Type (Etype (Pool)) then\n-            Set_Procedure_To_Call (Free_Node,\n-              RTE (RE_Deallocate_Any));\n-         else\n-            Set_Procedure_To_Call (Free_Node,\n-              Find_Prim_Op (Etype (Pool), Name_Deallocate));\n+      if Can_Never_Be_Null (Etype (Arg)) then\n+         Append_To (Stmts,\n+           Make_Raise_Constraint_Error (Loc,\n+             Reason => CE_Access_Check_Failed));\n \n-            --  If the type is class wide, we generate an implicit type\n-            --  with the right dynamic size, so that the deallocate call\n-            --  gets the right size parameter computed by gigi\n-\n-            if Is_Class_Wide_Type (Desig_T) then\n-               declare\n-                  Acc_Type : constant Entity_Id :=\n-                               Create_Itype (E_Access_Type, N);\n-                  Deref    : constant Node_Id :=\n-                               Make_Explicit_Dereference (Loc,\n-                                 Duplicate_Subexpr_No_Checks (Arg));\n-\n-               begin\n-                  Set_Etype  (Deref, Typ);\n-                  Set_Parent (Deref, Free_Node);\n-\n-                  Set_Etype     (Acc_Type, Acc_Type);\n-                  Set_Size_Info (Acc_Type, Typ);\n-                  Set_Directly_Designated_Type\n-                                (Acc_Type, Entity (Make_Subtype_From_Expr\n-                                                    (Deref, Desig_T)));\n-\n-                  Free_Arg := Unchecked_Convert_To (Acc_Type, Free_Arg);\n-               end;\n-            end if;\n-         end if;\n+      else\n+         declare\n+            Lhs : constant Node_Id := Duplicate_Subexpr_No_Checks (Arg);\n+         begin\n+            Set_Assignment_OK (Lhs);\n+            Append_To (Stmts,\n+              Make_Assignment_Statement (Loc,\n+                Name       => Lhs,\n+                Expression => Make_Null (Loc)));\n+         end;\n       end if;\n \n-      Set_Expression (Free_Node, Free_Arg);\n-\n-      declare\n-         Lhs : constant Node_Id := Duplicate_Subexpr_No_Checks (Arg);\n-\n-      begin\n-         Set_Assignment_OK (Lhs);\n-         Append_To (Stmts,\n-           Make_Assignment_Statement (Loc,\n-             Name       => Lhs,\n-             Expression => Make_Null (Loc)));\n-      end;\n+      --  Rewrite the call\n \n       Rewrite (N, Gen_Code);\n       Analyze (N);"}, {"sha": "4362a0ea4bbfda8f14e4b915ef8318156b9ff206", "filename": "gcc/ada/sem_intr.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191cab8dcf49ea0837da9eb138516e1ce7ffa7cf/gcc%2Fada%2Fsem_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191cab8dcf49ea0837da9eb138516e1ce7ffa7cf/gcc%2Fada%2Fsem_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_intr.adb?ref=191cab8dcf49ea0837da9eb138516e1ce7ffa7cf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -132,6 +132,15 @@ package body Sem_Intr is\n               (\"argument in call to & must be 31 characters or less\", N, Nam);\n          end if;\n \n+      --  Check for the case of freeing a non-null object which will raise\n+      --  Constaint_Error. Issue warning here, do the expansion in Exp_Intr.\n+\n+      elsif Cnam = Name_Free\n+        and then Can_Never_Be_Null (Etype (Arg1))\n+      then\n+         Error_Msg_N\n+           (\"freeing `NOT NULL` object will raise Constraint_Error?\", N);\n+\n       --  For now, no other special checks are required\n \n       else"}]}