{"sha": "7ce2938ccff9e1cdfcd0ad63d3653dc671335620", "node_id": "C_kwDOANBUbNoAKDdjZTI5MzhjY2ZmOWUxY2RmY2QwYWQ2M2QzNjUzZGM2NzEzMzU2MjA", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2022-06-21T18:32:37Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-12T12:24:11Z"}, "message": "[Ada] Avoid namespace pollution for Next and Previous\n\nThis patch renames Next and Previous in a-convec.ads and other\ncontainers to be _Next and _Previous, to avoid namespace pollution.  The\ncompiler now uses the leading-underscore names to look them up.\n\nThe scanner is changed to allow this.\n\ngcc/ada/\n\n\t* exp_ch5.adb (Expand_Iterator_Loop_Over_Array): Use _Next and\n\t_Previous in the optimized expansion of \"for ... of\".  No longer\n\tneed to check parameter profiles for these, because the\n\tleading-underscore names are unique.\n\t* libgnat/a-convec.ads (_Next, _Previous): Renamings of Next and\n\tPrevious, to avoid namespace pollution.\n\t* libgnat/a-cbdlli.ads, libgnat/a-cbhama.ads,\n\tlibgnat/a-cbhase.ads, libgnat/a-cbmutr.ads,\n\tlibgnat/a-cborma.ads, libgnat/a-cborse.ads,\n\tlibgnat/a-cdlili.ads, libgnat/a-cidlli.ads,\n\tlibgnat/a-cihama.ads, libgnat/a-cihase.ads,\n\tlibgnat/a-cimutr.ads, libgnat/a-ciorma.ads,\n\tlibgnat/a-ciorse.ads, libgnat/a-cobove.ads,\n\tlibgnat/a-cohama.ads, libgnat/a-cohase.ads,\n\tlibgnat/a-coinve.ads, libgnat/a-comutr.ads,\n\tlibgnat/a-coorma.ads, libgnat/a-coorse.ads: Likewise.  Also,\n\tremove duplicated comments -- refer to one comment about _Next,\n\t_Previous, Pseudo_Reference in libgnat/a-convec.ads. DRY.\n\t* scng.adb (Scan): Allow leading underscores in identifiers in\n\tthe run-time library.\n\t* snames.ads-tmpl (Name_uNext, Name_uPrevious): New names with\n\tleading underscores.", "tree": {"sha": "0f794b8f73d9eaa218e623a7c34568fdd642d3be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f794b8f73d9eaa218e623a7c34568fdd642d3be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ce2938ccff9e1cdfcd0ad63d3653dc671335620", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ce2938ccff9e1cdfcd0ad63d3653dc671335620", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ce2938ccff9e1cdfcd0ad63d3653dc671335620", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1710ba9e5d09493690c5f474a5c37b5c8f5d7b19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1710ba9e5d09493690c5f474a5c37b5c8f5d7b19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1710ba9e5d09493690c5f474a5c37b5c8f5d7b19"}], "stats": {"total": 210, "additions": 106, "deletions": 104}, "files": [{"sha": "9a2a1101de9cbefe48cc030a63ed040889a4c6d2", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=7ce2938ccff9e1cdfcd0ad63d3653dc671335620", "patch": "@@ -4924,7 +4924,8 @@ package body Exp_Ch5 is\n \n    --  In the optimized case, we make use of these:\n \n-   --     procedure Next (Position : in out Cursor); -- instead of Iter.Next\n+   --     procedure _Next (Position : in out Cursor); -- instead of Iter.Next\n+   --        (or _Previous for reverse loops)\n \n    --     function Pseudo_Reference\n    --       (Container : aliased Vector'Class) return Reference_Control_Type;\n@@ -4939,6 +4940,11 @@ package body Exp_Ch5 is\n    --  pollute the namespace for clients. The compiler has no trouble breaking\n    --  privacy to call things in the private part of an instance.)\n \n+   --  Note that Next and Previous are renamed as _Next and _Previous with\n+   --  leading underscores. Leading underscores are illegal in Ada, but we\n+   --  allow them in the run-time library. This allows us to avoid polluting\n+   --  the user-visible namespaces.\n+\n    --  Source:\n \n    --      for X of My_Vector loop\n@@ -4989,7 +4995,7 @@ package body Exp_Ch5 is\n    --              X.Count := X.Count + 1;\n    --              ...\n    --\n-   --              Next (Cur); -- or Prev\n+   --              _Next (Cur); -- or _Previous\n    --              --  This is instead of \"Cur := Next (Iter, Cur);\"\n    --          end;\n    --          --  No finalization here\n@@ -5015,13 +5021,14 @@ package body Exp_Ch5 is\n       Stats    : List_Id     := Statements (N);\n       --  Maybe wrapped in a conditional if a filter is present\n \n-      Cursor    : Entity_Id;\n-      Decl      : Node_Id;\n-      Iter_Type : Entity_Id;\n-      Iterator  : Entity_Id;\n-      Name_Init : Name_Id;\n-      Name_Step : Name_Id;\n-      New_Loop  : Node_Id;\n+      Cursor         : Entity_Id;\n+      Decl           : Node_Id;\n+      Iter_Type      : Entity_Id;\n+      Iterator       : Entity_Id;\n+      Name_Init      : Name_Id;\n+      Name_Step      : Name_Id;\n+      Name_Fast_Step : Name_Id;\n+      New_Loop       : Node_Id;\n \n       Fast_Element_Access_Op : Entity_Id := Empty;\n       Fast_Step_Op           : Entity_Id := Empty;\n@@ -5049,9 +5056,11 @@ package body Exp_Ch5 is\n       if Reverse_Present (I_Spec) then\n          Name_Init := Name_Last;\n          Name_Step := Name_Previous;\n+         Name_Fast_Step := Name_uPrevious;\n       else\n          Name_Init := Name_First;\n          Name_Step := Name_Next;\n+         Name_Fast_Step := Name_uNext;\n       end if;\n \n       --  The type of the iterator is the return type of the Iterate function\n@@ -5189,14 +5198,13 @@ package body Exp_Ch5 is\n \n             Iter_Pack := Scope (Root_Type (Etype (Iter_Type)));\n \n-            --  Find declarations needed for \"for ... of\" optimization\n+            --  Find declarations needed for \"for ... of\" optimization.\n             --  These declarations come from GNAT sources or sources\n             --  derived from them. User code may include additional\n             --  overloadings with similar names, and we need to perforn\n             --  some reasonable resolution to find the needed primitives.\n-            --  It is unclear whether this mechanism is fragile if a user\n-            --  makes arbitrary changes to the private part of a package\n-            --  that supports iterators.\n+            --  Note that we use _Next or _Previous to avoid picking up\n+            --  some arbitrary user-defined Next or Previous.\n \n             Ent := First_Entity (Pack);\n             while Present (Ent) loop\n@@ -5215,12 +5223,7 @@ package body Exp_Ch5 is\n                --  Next or Prev procedure with one parameter called\n                --  Position.\n \n-               elsif Chars (Ent) = Name_Step\n-                 and then Ekind (Ent) = E_Procedure\n-                 and then Present (First_Formal (Ent))\n-                 and then Chars (First_Formal (Ent)) = Name_Position\n-                 and then No (Next_Formal (First_Formal (Ent)))\n-               then\n+               elsif Chars (Ent) = Name_Fast_Step then\n                   pragma Assert (No (Fast_Step_Op));\n                   Fast_Step_Op := Ent;\n "}, {"sha": "78343a04ef4cfeafa89d33f51f63b9fafdfda359", "filename": "gcc/ada/libgnat/a-cbdlli.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-cbdlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-cbdlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbdlli.ads?ref=7ce2938ccff9e1cdfcd0ad63d3653dc671335620", "patch": "@@ -364,10 +364,10 @@ private\n \n    for Reference_Type'Read use Read;\n \n-   --  Three operations are used to optimize in the expansion of \"for ... of\"\n-   --  loops: the Next(Cursor) procedure in the visible part, and the following\n-   --  Pseudo_Reference and Get_Element_Access functions. See Exp_Ch5 for\n-   --  details.\n+   --  See Ada.Containers.Vectors for documentation on the following\n+\n+   procedure _Next (Position : in out Cursor) renames Next;\n+   procedure _Previous (Position : in out Cursor) renames Previous;\n \n    function Pseudo_Reference\n      (Container : aliased List'Class) return Reference_Control_Type;"}, {"sha": "c62d4519d679a07976c0e6ae1773c1890c178aa5", "filename": "gcc/ada/libgnat/a-cbhama.ads", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-cbhama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-cbhama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbhama.ads?ref=7ce2938ccff9e1cdfcd0ad63d3653dc671335620", "patch": "@@ -439,10 +439,9 @@ private\n \n    for Reference_Type'Read use Read;\n \n-   --  Three operations are used to optimize in the expansion of \"for ... of\"\n-   --  loops: the Next(Cursor) procedure in the visible part, and the following\n-   --  Pseudo_Reference and Get_Element_Access functions. See Sem_Ch5 for\n-   --  details.\n+   --  See Ada.Containers.Vectors for documentation on the following\n+\n+   procedure _Next (Position : in out Cursor) renames Next;\n \n    function Pseudo_Reference\n      (Container : aliased Map'Class) return Reference_Control_Type;"}, {"sha": "7c6d971b27a8331e7b025a635df0fd6009c6c2b7", "filename": "gcc/ada/libgnat/a-cbhase.ads", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-cbhase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-cbhase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbhase.ads?ref=7ce2938ccff9e1cdfcd0ad63d3653dc671335620", "patch": "@@ -596,10 +596,9 @@ private\n \n    for Constant_Reference_Type'Write use Write;\n \n-   --  Three operations are used to optimize in the expansion of \"for ... of\"\n-   --  loops: the Next(Cursor) procedure in the visible part, and the following\n-   --  Pseudo_Reference and Get_Element_Access functions. See Sem_Ch5 for\n-   --  details.\n+   --  See Ada.Containers.Vectors for documentation on the following\n+\n+   procedure _Next (Position : in out Cursor) renames Next;\n \n    function Pseudo_Reference\n      (Container : aliased Set'Class) return Reference_Control_Type;"}, {"sha": "89d5cdff68809c9e0d2fa54fba509d6c29d0e94b", "filename": "gcc/ada/libgnat/a-cbmutr.ads", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-cbmutr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-cbmutr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbmutr.ads?ref=7ce2938ccff9e1cdfcd0ad63d3653dc671335620", "patch": "@@ -386,10 +386,7 @@ private\n       Item   : out Reference_Type);\n    for Reference_Type'Read use Read;\n \n-   --  Three operations are used to optimize in the expansion of \"for ... of\"\n-   --  loops: the Next(Cursor) procedure in the visible part, and the following\n-   --  Pseudo_Reference and Get_Element_Access functions. See Exp_Ch5 for\n-   --  details.\n+   --  See Ada.Containers.Vectors for documentation on the following\n \n    function Pseudo_Reference\n      (Container : aliased Tree'Class) return Reference_Control_Type;"}, {"sha": "af69febb8289e2c324d23b9ad3ef9ac0b0d8b38d", "filename": "gcc/ada/libgnat/a-cborma.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-cborma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-cborma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cborma.ads?ref=7ce2938ccff9e1cdfcd0ad63d3653dc671335620", "patch": "@@ -341,10 +341,10 @@ private\n \n    for Reference_Type'Write use Write;\n \n-   --  Three operations are used to optimize in the expansion of \"for ... of\"\n-   --  loops: the Next(Cursor) procedure in the visible part, and the following\n-   --  Pseudo_Reference and Get_Element_Access functions.  See Sem_Ch5 for\n-   --  details.\n+   --  See Ada.Containers.Vectors for documentation on the following\n+\n+   procedure _Next (Position : in out Cursor) renames Next;\n+   procedure _Previous (Position : in out Cursor) renames Previous;\n \n    function Pseudo_Reference\n      (Container : aliased Map'Class) return Reference_Control_Type;"}, {"sha": "0b7e86f982ef331aca79ccbe202635f0d312c98e", "filename": "gcc/ada/libgnat/a-cborse.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-cborse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-cborse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cborse.ads?ref=7ce2938ccff9e1cdfcd0ad63d3653dc671335620", "patch": "@@ -435,10 +435,10 @@ private\n \n    for Constant_Reference_Type'Write use Write;\n \n-   --  Three operations are used to optimize in the expansion of \"for ... of\"\n-   --  loops: the Next(Cursor) procedure in the visible part, and the following\n-   --  Pseudo_Reference and Get_Element_Access functions. See Sem_Ch5 for\n-   --  details.\n+   --  See Ada.Containers.Vectors for documentation on the following\n+\n+   procedure _Next (Position : in out Cursor) renames Next;\n+   procedure _Previous (Position : in out Cursor) renames Previous;\n \n    function Pseudo_Reference\n      (Container : aliased Set'Class) return Reference_Control_Type;"}, {"sha": "bfe10ee50f3834d60962abae462c74f9583b0aa1", "filename": "gcc/ada/libgnat/a-cdlili.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-cdlili.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-cdlili.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cdlili.ads?ref=7ce2938ccff9e1cdfcd0ad63d3653dc671335620", "patch": "@@ -374,10 +374,10 @@ private\n \n    for Reference_Type'Read use Read;\n \n-   --  Three operations are used to optimize in the expansion of \"for ... of\"\n-   --  loops: the Next(Cursor) procedure in the visible part, and the following\n-   --  Pseudo_Reference and Get_Element_Access functions. See Sem_Ch5 for\n-   --  details.\n+   --  See Ada.Containers.Vectors for documentation on the following\n+\n+   procedure _Next (Position : in out Cursor) renames Next;\n+   procedure _Previous (Position : in out Cursor) renames Previous;\n \n    function Pseudo_Reference\n      (Container : aliased List'Class) return Reference_Control_Type;"}, {"sha": "cc0c70ca703deac6b69ca3902a8a69d66428e760", "filename": "gcc/ada/libgnat/a-cidlli.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-cidlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-cidlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cidlli.ads?ref=7ce2938ccff9e1cdfcd0ad63d3653dc671335620", "patch": "@@ -368,10 +368,10 @@ private\n \n    for Reference_Type'Read use Read;\n \n-   --  Three operations are used to optimize in the expansion of \"for ... of\"\n-   --  loops: the Next(Cursor) procedure in the visible part, and the following\n-   --  Pseudo_Reference and Get_Element_Access functions. See Exp_Ch5 for\n-   --  details.\n+   --  See Ada.Containers.Vectors for documentation on the following\n+\n+   procedure _Next (Position : in out Cursor) renames Next;\n+   procedure _Previous (Position : in out Cursor) renames Previous;\n \n    function Pseudo_Reference\n      (Container : aliased List'Class) return Reference_Control_Type;"}, {"sha": "142c94e51251cb81f7f24be493a46f9444c40d24", "filename": "gcc/ada/libgnat/a-cihama.ads", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-cihama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-cihama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cihama.ads?ref=7ce2938ccff9e1cdfcd0ad63d3653dc671335620", "patch": "@@ -440,10 +440,9 @@ private\n \n    for Reference_Type'Read use Read;\n \n-   --  Three operations are used to optimize in the expansion of \"for ... of\"\n-   --  loops: the Next(Cursor) procedure in the visible part, and the following\n-   --  Pseudo_Reference and Get_Element_Access functions. See Sem_Ch5 for\n-   --  details.\n+   --  See Ada.Containers.Vectors for documentation on the following\n+\n+   procedure _Next (Position : in out Cursor) renames Next;\n \n    function Pseudo_Reference\n      (Container : aliased Map'Class) return Reference_Control_Type;"}, {"sha": "f0b0f1551f46df7a21f78b8e95f32f9c90b9a978", "filename": "gcc/ada/libgnat/a-cihase.ads", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-cihase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-cihase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cihase.ads?ref=7ce2938ccff9e1cdfcd0ad63d3653dc671335620", "patch": "@@ -589,10 +589,9 @@ private\n \n    for Constant_Reference_Type'Write use Write;\n \n-   --  Three operations are used to optimize in the expansion of \"for ... of\"\n-   --  loops: the Next(Cursor) procedure in the visible part, and the following\n-   --  Pseudo_Reference and Get_Element_Access functions. See Sem_Ch5 for\n-   --  details.\n+   --  See Ada.Containers.Vectors for documentation on the following\n+\n+   procedure _Next (Position : in out Cursor) renames Next;\n \n    function Pseudo_Reference\n      (Container : aliased Set'Class) return Reference_Control_Type;"}, {"sha": "8a39a5b873f2d7c5b2078f78a5a3b098190deefd", "filename": "gcc/ada/libgnat/a-cimutr.ads", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-cimutr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-cimutr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cimutr.ads?ref=7ce2938ccff9e1cdfcd0ad63d3653dc671335620", "patch": "@@ -439,10 +439,7 @@ private\n \n    for Reference_Type'Write use Write;\n \n-   --  Three operations are used to optimize in the expansion of \"for ... of\"\n-   --  loops: the Next(Cursor) procedure in the visible part, and the following\n-   --  Pseudo_Reference and Get_Element_Access functions. See Exp_Ch5 for\n-   --  details.\n+   --  See Ada.Containers.Vectors for documentation on the following\n \n    function Pseudo_Reference\n      (Container : aliased Tree'Class) return Reference_Control_Type;"}, {"sha": "c240dcca81ce72dab932507567eab26ba54075fd", "filename": "gcc/ada/libgnat/a-ciorma.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-ciorma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-ciorma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ciorma.ads?ref=7ce2938ccff9e1cdfcd0ad63d3653dc671335620", "patch": "@@ -355,10 +355,10 @@ private\n \n    for Reference_Type'Write use Write;\n \n-   --  Three operations are used to optimize in the expansion of \"for ... of\"\n-   --  loops: the Next(Cursor) procedure in the visible part, and the following\n-   --  Pseudo_Reference and Get_Element_Access functions.  See Sem_Ch5 for\n-   --  details.\n+   --  See Ada.Containers.Vectors for documentation on the following\n+\n+   procedure _Next (Position : in out Cursor) renames Next;\n+   procedure _Previous (Position : in out Cursor) renames Previous;\n \n    function Pseudo_Reference\n      (Container : aliased Map'Class) return Reference_Control_Type;"}, {"sha": "e40ebfa3267849c1fd11cd70c299eec8d652210b", "filename": "gcc/ada/libgnat/a-ciorse.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-ciorse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-ciorse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ciorse.ads?ref=7ce2938ccff9e1cdfcd0ad63d3653dc671335620", "patch": "@@ -454,10 +454,10 @@ private\n \n    for Constant_Reference_Type'Write use Write;\n \n-   --  Three operations are used to optimize in the expansion of \"for ... of\"\n-   --  loops: the Next(Cursor) procedure in the visible part, and the following\n-   --  Pseudo_Reference and Get_Element_Access functions. See Sem_Ch5 for\n-   --  details.\n+   --  See Ada.Containers.Vectors for documentation on the following\n+\n+   procedure _Next (Position : in out Cursor) renames Next;\n+   procedure _Previous (Position : in out Cursor) renames Previous;\n \n    function Pseudo_Reference\n      (Container : aliased Set'Class) return Reference_Control_Type;"}, {"sha": "6f4b1180156099792fab58e76a9fef4e7cf1628b", "filename": "gcc/ada/libgnat/a-cobove.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-cobove.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-cobove.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cobove.ads?ref=7ce2938ccff9e1cdfcd0ad63d3653dc671335620", "patch": "@@ -511,10 +511,10 @@ private\n \n    for Reference_Type'Write use Write;\n \n-   --  Three operations are used to optimize in the expansion of \"for ... of\"\n-   --  loops: the Next(Cursor) procedure in the visible part, and the following\n-   --  Pseudo_Reference and Get_Element_Access functions. See Exp_Ch5 for\n-   --  details.\n+   --  See Ada.Containers.Vectors for documentation on the following\n+\n+   procedure _Next (Position : in out Cursor) renames Next;\n+   procedure _Previous (Position : in out Cursor) renames Previous;\n \n    function Pseudo_Reference\n      (Container : aliased Vector'Class) return Reference_Control_Type;"}, {"sha": "65949dcc9614289b48a71094f05f552bb19ca0fa", "filename": "gcc/ada/libgnat/a-cohama.ads", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-cohama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-cohama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cohama.ads?ref=7ce2938ccff9e1cdfcd0ad63d3653dc671335620", "patch": "@@ -543,10 +543,9 @@ private\n \n    for Reference_Type'Read use Read;\n \n-   --  Three operations are used to optimize in the expansion of \"for ... of\"\n-   --  loops: the Next(Cursor) procedure in the visible part, and the following\n-   --  Pseudo_Reference and Get_Element_Access functions. See Sem_Ch5 for\n-   --  details.\n+   --  See Ada.Containers.Vectors for documentation on the following\n+\n+   procedure _Next (Position : in out Cursor) renames Next;\n \n    function Pseudo_Reference\n      (Container : aliased Map'Class) return Reference_Control_Type;"}, {"sha": "bd82092fedb5620c46aba16183b7b00e9e9c0359", "filename": "gcc/ada/libgnat/a-cohase.ads", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-cohase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-cohase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cohase.ads?ref=7ce2938ccff9e1cdfcd0ad63d3653dc671335620", "patch": "@@ -623,10 +623,9 @@ private\n \n    for Constant_Reference_Type'Write use Write;\n \n-   --  Three operations are used to optimize in the expansion of \"for ... of\"\n-   --  loops: the Next(Cursor) procedure in the visible part, and the following\n-   --  Pseudo_Reference and Get_Element_Access functions. See Sem_Ch5 for\n-   --  details.\n+   --  See Ada.Containers.Vectors for documentation on the following\n+\n+   procedure _Next (Position : in out Cursor) renames Next;\n \n    function Pseudo_Reference\n      (Container : aliased Set'Class) return Reference_Control_Type;"}, {"sha": "a3bc206ee23dd83215a0dd1c423efdc497474116", "filename": "gcc/ada/libgnat/a-coinve.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-coinve.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-coinve.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coinve.ads?ref=7ce2938ccff9e1cdfcd0ad63d3653dc671335620", "patch": "@@ -512,10 +512,10 @@ private\n \n    for Reference_Type'Read use Read;\n \n-   --  Three operations are used to optimize in the expansion of \"for ... of\"\n-   --  loops: the Next(Cursor) procedure in the visible part, and the following\n-   --  Pseudo_Reference and Get_Element_Access functions. See Exp_Ch5 for\n-   --  details.\n+   --  See Ada.Containers.Vectors for documentation on the following\n+\n+   procedure _Next (Position : in out Cursor) renames Next;\n+   procedure _Previous (Position : in out Cursor) renames Previous;\n \n    function Pseudo_Reference\n      (Container : aliased Vector'Class) return Reference_Control_Type;"}, {"sha": "70944526897419b66e9672c6d155e6f3249f37b2", "filename": "gcc/ada/libgnat/a-comutr.ads", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-comutr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-comutr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-comutr.ads?ref=7ce2938ccff9e1cdfcd0ad63d3653dc671335620", "patch": "@@ -491,10 +491,7 @@ private\n \n    for Reference_Type'Write use Write;\n \n-   --  Three operations are used to optimize in the expansion of \"for ... of\"\n-   --  loops: the Next(Cursor) procedure in the visible part, and the following\n-   --  Pseudo_Reference and Get_Element_Access functions. See Exp_Ch5 for\n-   --  details.\n+   --  See Ada.Containers.Vectors for documentation on the following\n \n    function Pseudo_Reference\n      (Container : aliased Tree'Class) return Reference_Control_Type;"}, {"sha": "1005985cee8647462e720a5680c28fd60373dae3", "filename": "gcc/ada/libgnat/a-convec.ads", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-convec.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-convec.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-convec.ads?ref=7ce2938ccff9e1cdfcd0ad63d3653dc671335620", "patch": "@@ -829,10 +829,13 @@ private\n \n    for Reference_Type'Read use Read;\n \n-   --  Three operations are used to optimize in the expansion of \"for ... of\"\n-   --  loops: the Next(Cursor) procedure in the visible part, and the following\n-   --  Pseudo_Reference and Get_Element_Access functions. See Exp_Ch5 for\n-   --  details.\n+   --  Three operations are used to optimize the expansion of \"for ... of\"\n+   --  loops: the Next(Cursor) (or Previous) procedure in the visible part,\n+   --  and the following Pseudo_Reference and Get_Element_Access functions.\n+   --  See Exp_Ch5 for details, including the leading underscores here.\n+\n+   procedure _Next (Position : in out Cursor) renames Next;\n+   procedure _Previous (Position : in out Cursor) renames Previous;\n \n    function Pseudo_Reference\n      (Container : aliased Vector'Class) return Reference_Control_Type;"}, {"sha": "1948e2a43275adcc0c3c6d13480166fea5f394a8", "filename": "gcc/ada/libgnat/a-coorma.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-coorma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-coorma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coorma.ads?ref=7ce2938ccff9e1cdfcd0ad63d3653dc671335620", "patch": "@@ -357,10 +357,10 @@ private\n \n    for Reference_Type'Write use Write;\n \n-   --  Three operations are used to optimize in the expansion of \"for ... of\"\n-   --  loops: the Next(Cursor) procedure in the visible part, and the following\n-   --  Pseudo_Reference and Get_Element_Access functions.  See Sem_Ch5 for\n-   --  details.\n+   --  See Ada.Containers.Vectors for documentation on the following\n+\n+   procedure _Next (Position : in out Cursor) renames Next;\n+   procedure _Previous (Position : in out Cursor) renames Previous;\n \n    function Pseudo_Reference\n      (Container : aliased Map'Class) return Reference_Control_Type;"}, {"sha": "8888a8c1e57cbf5cff48d9e0f95a659c0451e3ae", "filename": "gcc/ada/libgnat/a-coorse.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-coorse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Flibgnat%2Fa-coorse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coorse.ads?ref=7ce2938ccff9e1cdfcd0ad63d3653dc671335620", "patch": "@@ -437,10 +437,10 @@ private\n \n    for Constant_Reference_Type'Read use Read;\n \n-   --  Three operations are used to optimize in the expansion of \"for ... of\"\n-   --  loops: the Next(Cursor) procedure in the visible part, and the following\n-   --  Pseudo_Reference and Get_Element_Access functions. See Sem_Ch5 for\n-   --  details.\n+   --  See Ada.Containers.Vectors for documentation on the following\n+\n+   procedure _Next (Position : in out Cursor) renames Next;\n+   procedure _Previous (Position : in out Cursor) renames Previous;\n \n    function Pseudo_Reference\n      (Container : aliased Set'Class) return Reference_Control_Type;"}, {"sha": "f5fc020a4edf612961a1f631b7329a46c0a7c83a", "filename": "gcc/ada/scng.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Fscng.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Fscng.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscng.adb?ref=7ce2938ccff9e1cdfcd0ad63d3653dc671335620", "patch": "@@ -27,6 +27,7 @@ with Atree;    use Atree;\n with Csets;    use Csets;\n with Errout;   use Errout;\n with Hostparm; use Hostparm;\n+with Lib;      use Lib;\n with Namet;    use Namet;\n with Opt;      use Opt;\n with Sinput;   use Sinput;\n@@ -2051,7 +2052,15 @@ package body Scng is\n          --  Underline character\n \n          when '_' =>\n-            Error_Msg_S (\"identifier cannot start with underline\");\n+            --  Identifiers with leading underscores are not allowed in Ada.\n+            --  However, we allow them in the run-time library, so we can\n+            --  create names that are hidden from normal Ada code. For an\n+            --  example, search for \"Name_uNext\", which is \"_Next\".\n+\n+            if not In_Internal_Unit (Scan_Ptr) then\n+               Error_Msg_S (\"identifier cannot start with underline\");\n+            end if;\n+\n             Name_Len := 1;\n             Name_Buffer (1) := '_';\n             Scan_Ptr := Scan_Ptr + 1;"}, {"sha": "0a1ff80dbd20c8a34b47a3c689229be9be65955c", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce2938ccff9e1cdfcd0ad63d3653dc671335620/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=7ce2938ccff9e1cdfcd0ad63d3653dc671335620", "patch": "@@ -1375,7 +1375,9 @@ package Snames is\n    Name_Has_Element                      : constant Name_Id := N + $;\n    Name_Forward_Iterator                 : constant Name_Id := N + $;\n    Name_Reversible_Iterator              : constant Name_Id := N + $;\n+   Name_uNext                            : constant Name_Id := N + $;\n    Name_Previous                         : constant Name_Id := N + $;\n+   Name_uPrevious                        : constant Name_Id := N + $;\n    Name_Pseudo_Reference                 : constant Name_Id := N + $;\n    Name_Reference_Control_Type           : constant Name_Id := N + $;\n    Name_Get_Element_Access               : constant Name_Id := N + $;"}]}