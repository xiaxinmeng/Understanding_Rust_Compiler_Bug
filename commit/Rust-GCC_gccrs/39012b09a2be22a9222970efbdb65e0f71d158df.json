{"sha": "39012b09a2be22a9222970efbdb65e0f71d158df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkwMTJiMDlhMmJlMjJhOTIyMjk3MGVmYmRiNjVlMGY3MWQxNThkZg==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-08-18T11:02:31Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-08-18T11:02:31Z"}, "message": "i386.c: Rename ufloatv8siv8df_mask to ufloatv8siv8df2_mask.\n\ngcc/\n\t* config/i386/i386.c: Rename ufloatv8siv8df_mask to ufloatv8siv8df2_mask.\n\t* config/i386/i386.md\n\t(define_code_iterator any_float): New.\n\t(define_code_attr floatsuffix): New.\n\t* config/i386/sse.md\n\t(define_mode_iterator VF1_128_256VL): New.\n\t(define_mode_iterator VF2_512_256VL): New.\n\t(define_insn \"float<si2dfmodelower><mode>2<mask_name>\"): Remove unnecessary\n\tTARGET check.\n\t(define_insn \"ufloatv8siv8df<mask_name>\"): Delete.\n\t(define_insn \"<floatsuffix>float<sseintvecmodelower><mode>2<mask_name><round_name>\"):\n\tNew.\n\t(define_mode_attr qq2pssuff): New.\n\t(define_mode_attr sselongvecmode): New.\n\t(define_mode_attr sselongvecmodelower): New.\n\t(define_mode_attr sseintvecmode3): New.\n\t(define_insn \"<floatsuffix>float<sselongvecmodelower><mode>2<mask_name><round_name>\"):\n\tNew.\n\t(define_insn \"*<floatsuffix>floatv2div2sf2\"): New.\n\t(define_insn \"<floatsuffix>floatv2div2sf2_mask\"): New.\n\t(define_insn \"ufloat<si2dfmodelower><mode>2<mask_name>\"): New.\n\t(define_insn \"ufloatv2siv2df2<mask_name>\"): New.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r214091", "tree": {"sha": "2c9ef03144597b162e308cf373983f9b7bb060dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c9ef03144597b162e308cf373983f9b7bb060dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39012b09a2be22a9222970efbdb65e0f71d158df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39012b09a2be22a9222970efbdb65e0f71d158df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39012b09a2be22a9222970efbdb65e0f71d158df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39012b09a2be22a9222970efbdb65e0f71d158df/comments", "author": null, "committer": null, "parents": [{"sha": "3bcf35e76f21b684f7f82ffcbe17ab18bc421f6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bcf35e76f21b684f7f82ffcbe17ab18bc421f6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bcf35e76f21b684f7f82ffcbe17ab18bc421f6c"}], "stats": {"total": 131, "additions": 123, "deletions": 8}, "files": [{"sha": "2dee41267f0599aa015a647d3074559ba0015677", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39012b09a2be22a9222970efbdb65e0f71d158df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39012b09a2be22a9222970efbdb65e0f71d158df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39012b09a2be22a9222970efbdb65e0f71d158df", "patch": "@@ -1,3 +1,35 @@\n+2014-08-18  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/i386.c: Rename ufloatv8siv8df_mask to ufloatv8siv8df2_mask.\n+\t* config/i386/i386.md\n+\t(define_code_iterator any_float): New.\n+\t(define_code_attr floatsuffix): New.\n+\t* config/i386/sse.md\n+\t(define_mode_iterator VF1_128_256VL): New.\n+\t(define_mode_iterator VF2_512_256VL): New.\n+\t(define_insn \"float<si2dfmodelower><mode>2<mask_name>\"): Remove unnecessary\n+\tTARGET check.\n+\t(define_insn \"ufloatv8siv8df<mask_name>\"): Delete.\n+\t(define_insn \"<floatsuffix>float<sseintvecmodelower><mode>2<mask_name><round_name>\"):\n+\tNew.\n+\t(define_mode_attr qq2pssuff): New.\n+\t(define_mode_attr sselongvecmode): New.\n+\t(define_mode_attr sselongvecmodelower): New.\n+\t(define_mode_attr sseintvecmode3): New.\n+\t(define_insn \"<floatsuffix>float<sselongvecmodelower><mode>2<mask_name><round_name>\"):\n+\tNew.\n+\t(define_insn \"*<floatsuffix>floatv2div2sf2\"): New.\n+\t(define_insn \"<floatsuffix>floatv2div2sf2_mask\"): New.\n+\t(define_insn \"ufloat<si2dfmodelower><mode>2<mask_name>\"): New.\n+\t(define_insn \"ufloatv2siv2df2<mask_name>\"): New.\n+\n 2014-08-18  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "cc4b0c7fe3a0a1a296801fe9f9de02ece9c8bc78", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39012b09a2be22a9222970efbdb65e0f71d158df/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39012b09a2be22a9222970efbdb65e0f71d158df/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=39012b09a2be22a9222970efbdb65e0f71d158df", "patch": "@@ -30048,7 +30048,7 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_compressv16sf_mask, \"__builtin_ia32_compresssf512_mask\", IX86_BUILTIN_COMPRESSPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_HI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_floatv8siv8df2_mask, \"__builtin_ia32_cvtdq2pd512_mask\", IX86_BUILTIN_CVTDQ2PD512, UNKNOWN, (int) V8DF_FTYPE_V8SI_V8DF_QI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_vcvtps2ph512_mask,  \"__builtin_ia32_vcvtps2ph512_mask\", IX86_BUILTIN_CVTPS2PH512, UNKNOWN, (int) V16HI_FTYPE_V16SF_INT_V16HI_HI },\n-  { OPTION_MASK_ISA_AVX512F, CODE_FOR_ufloatv8siv8df_mask, \"__builtin_ia32_cvtudq2pd512_mask\", IX86_BUILTIN_CVTUDQ2PD512, UNKNOWN, (int) V8DF_FTYPE_V8SI_V8DF_QI },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_ufloatv8siv8df2_mask, \"__builtin_ia32_cvtudq2pd512_mask\", IX86_BUILTIN_CVTUDQ2PD512, UNKNOWN, (int) V8DF_FTYPE_V8SI_V8DF_QI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_cvtusi2sd32, \"__builtin_ia32_cvtusi2sd32\", IX86_BUILTIN_CVTUSI2SD32, UNKNOWN, (int) V2DF_FTYPE_V2DF_UINT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_expandv8df_mask, \"__builtin_ia32_expanddf512_mask\", IX86_BUILTIN_EXPANDPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_QI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_expandv8df_maskz, \"__builtin_ia32_expanddf512_maskz\", IX86_BUILTIN_EXPANDPD512Z, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_QI },"}, {"sha": "9bb7e164e2815d43123accc49bd519df212c98e5", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39012b09a2be22a9222970efbdb65e0f71d158df/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39012b09a2be22a9222970efbdb65e0f71d158df/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=39012b09a2be22a9222970efbdb65e0f71d158df", "patch": "@@ -882,6 +882,10 @@\n (define_code_iterator any_fix [fix unsigned_fix])\n (define_code_attr fixsuffix [(fix \"\") (unsigned_fix \"u\")])\n \n+;; Used in signed and unsigned float.\n+(define_code_iterator any_float [float unsigned_float])\n+(define_code_attr floatsuffix [(float \"\") (unsigned_float \"u\")])\n+\n ;; All integer modes.\n (define_mode_iterator SWI1248x [QI HI SI DI])\n "}, {"sha": "4dd2af92266ce63e45548d5a5376e6e277ec4b12", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 86, "deletions": 7, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39012b09a2be22a9222970efbdb65e0f71d158df/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39012b09a2be22a9222970efbdb65e0f71d158df/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=39012b09a2be22a9222970efbdb65e0f71d158df", "patch": "@@ -205,6 +205,9 @@\n (define_mode_iterator VF1_128_256\n   [(V8SF \"TARGET_AVX\") V4SF])\n \n+(define_mode_iterator VF1_128_256VL\n+  [V8SF (V4SF \"TARGET_AVX512VL\")])\n+\n ;; All DFmode vector float modes\n (define_mode_iterator VF2\n   [(V8DF \"TARGET_AVX512F\") (V4DF \"TARGET_AVX\") V2DF])\n@@ -214,7 +217,10 @@\n   [(V4DF \"TARGET_AVX\") V2DF])\n \n (define_mode_iterator VF2_512_256\n-  [(V8DF \"TARGET_AVX512F\") (V4DF \"TARGET_AVX\")])\n+  [(V8DF \"TARGET_AVX512F\") V4DF])\n+\n+(define_mode_iterator VF2_512_256VL\n+  [V8DF (V4DF \"TARGET_AVX512VL\")])\n \n ;; All 128bit vector float modes\n (define_mode_iterator VF_128\n@@ -4096,15 +4102,88 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"ufloatv8siv8df<mask_name>\"\n-  [(set (match_operand:V8DF 0 \"register_operand\" \"=v\")\n-\t(unsigned_float:V8DF\n-\t  (match_operand:V8SI 1 \"nonimmediate_operand\" \"vm\")))]\n-  \"TARGET_AVX512F\"\n+(define_insn \"<floatsuffix>float<sseintvecmodelower><mode>2<mask_name><round_name>\"\n+  [(set (match_operand:VF2_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(any_float:VF2_AVX512VL\n+\t  (match_operand:<sseintvecmode> 1 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_AVX512DQ\"\n+  \"vcvt<floatsuffix>qq2pd\\t{<round_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_mask_op2>}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+;; For <floatsuffix>float<sselondveclower><mode> insn patterns\n+(define_mode_attr qq2pssuff\n+  [(V8SF \"\") (V4SF \"{y}\")])\n+\n+(define_mode_attr sselongvecmode\n+  [(V8SF \"V8DI\") (V4SF  \"V4DI\")])\n+\n+(define_mode_attr sselongvecmodelower\n+  [(V8SF \"v8di\") (V4SF  \"v4di\")])\n+\n+(define_mode_attr sseintvecmode3\n+  [(V8SF \"XI\") (V4SF \"OI\")\n+   (V8DF \"OI\") (V4DF \"TI\")])\n+\n+(define_insn \"<floatsuffix>float<sselongvecmodelower><mode>2<mask_name><round_name>\"\n+  [(set (match_operand:VF1_128_256VL 0 \"register_operand\" \"=v\")\n+\t (any_float:VF1_128_256VL\n+\t   (match_operand:<sselongvecmode> 1 \"nonimmediate_operand\" \"<round_constraint>\")))]\n+  \"TARGET_AVX512DQ && <round_modev8sf_condition>\"\n+  \"vcvt<floatsuffix>qq2ps<qq2pssuff>\\t{<round_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_mask_op2>}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*<floatsuffix>floatv2div2sf2\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n+    (vec_concat:V4SF\n+\t    (any_float:V2SF (match_operand:V2DI 1 \"nonimmediate_operand\" \"vm\"))\n+\t    (const_vector:V2SF [(const_int 0) (const_int 0)])))]\n+  \"TARGET_AVX512DQ && TARGET_AVX512VL\"\n+  \"vcvt<floatsuffix>qq2ps{x}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"V4SF\")])\n+\n+(define_insn \"<floatsuffix>floatv2div2sf2_mask\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n+    (vec_concat:V4SF\n+        (vec_merge:V2SF\n+\t        (any_float:V2SF (match_operand:V2DI 1 \"nonimmediate_operand\" \"vm\"))\n+            (vec_select:V2SF\n+                (match_operand:V4SF 2 \"vector_move_operand\" \"0C\")\n+                (parallel [(const_int 0) (const_int 1)]))\n+            (match_operand:QI 3 \"register_operand\" \"Yk\"))\n+\t    (const_vector:V2SF [(const_int 0) (const_int 0)])))]\n+  \"TARGET_AVX512DQ && TARGET_AVX512VL\"\n+  \"vcvt<floatsuffix>qq2ps{x}\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"V4SF\")])\n+\n+(define_insn \"ufloat<si2dfmodelower><mode>2<mask_name>\"\n+  [(set (match_operand:VF2_512_256VL 0 \"register_operand\" \"=v\")\n+\t(unsigned_float:VF2_512_256VL\n+\t  (match_operand:<si2dfmode> 1 \"nonimmediate_operand\" \"vm\")))]\n+   \"TARGET_AVX512F\"\n+   \"vcvtudq2pd\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+   [(set_attr \"type\" \"ssecvt\")\n+    (set_attr \"prefix\" \"evex\")\n+    (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"ufloatv2siv2df2<mask_name>\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=v\")\n+\t(unsigned_float:V2DF\n+\t  (vec_select:V2SI\n+\t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"vm\")\n+\t    (parallel [(const_int 0) (const_int 1)]))))]\n+  \"TARGET_AVX512VL\"\n   \"vcvtudq2pd\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"V8DF\")])\n+   (set_attr \"mode\" \"V2DF\")])\n \n (define_insn \"avx512f_cvtdq2pd512_2\"\n   [(set (match_operand:V8DF 0 \"register_operand\" \"=v\")"}]}