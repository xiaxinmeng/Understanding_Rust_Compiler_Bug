{"sha": "08ec27543d91cff797fc8dd0a8eb47cda2c843f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhlYzI3NTQzZDkxY2ZmNzk3ZmM4ZGQwYThlYjQ3Y2RhMmM4NDNmNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-06-25T17:05:47Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-06-25T17:05:47Z"}, "message": "decl.c (value_annotation_hasher::handle_cache_entry): Delete.\n\ngcc/ada/\n\t* gcc-interface/decl.c (value_annotation_hasher::handle_cache_entry):\n\tDelete.\n\t(value_annotation_hasher::keep_cache_entry): New function.\n\t* gcc-interface/utils.c (pad_type_hasher::handle_cache_entry):\n\tDelete.\n\t(pad_type_hasher::keep_cache_entry): New function.\n\ngcc/\n\t* hash-table.h (hash_table): Add gt_cleare_cache as a friend.\n\t(gt_cleare_cache): Check here for deleted and empty entries.\n\tReplace handle_cache_entry with a call to keep_cache_entry.\n\t* hash-traits.h (ggc_cache_hasher::handle_cache_entry): Delete.\n\t(ggc_cache_hasher::keep_cache_entry): New function.\n\t* trans-mem.c (tm_wrapper_hasher::handle_cache_entry): Delete.\n\t(tm_wrapper_hasher::keep_cache_entry): New function.\n\t* tree.h (tree_decl_map_cache_hasher::handle_cache_entry): Delete.\n\t(tree_vec_map_cache_hasher::keep_cache_entry): New function.\n\t* tree.c (type_cache_hasher::handle_cache_entry): Delete.\n\t(type_cache_hasher::keep_cache_entry): New function.\n\t(tree_vec_map_cache_hasher::handle_cache_entry): Delete.\n\t(tree_vec_map_cache_hasher::keep_cache_entry): New function.\n\t* ubsan.c (tree_type_map_cache_hasher::handle_cache_entry): Delete.\n\t(tree_type_map_cache_hasher::keep_cache_entry): New function.\n\t* varasm.c (tm_clone_hasher::handle_cache_entry): Delete.\n\t(tm_clone_hasher::keep_cache_entry): New function.\n\t* config/i386/i386.c (dllimport_hasher::handle_cache_entry): Delete.\n\t(dllimport_hasher::keep_cache_entry): New function.\n\nFrom-SVN: r224954", "tree": {"sha": "ca64d02be9c4087e4dadaeef0f61260ee7abcc17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca64d02be9c4087e4dadaeef0f61260ee7abcc17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08ec27543d91cff797fc8dd0a8eb47cda2c843f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08ec27543d91cff797fc8dd0a8eb47cda2c843f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08ec27543d91cff797fc8dd0a8eb47cda2c843f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08ec27543d91cff797fc8dd0a8eb47cda2c843f7/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f11c37791e904dac9f2b24bc8222c39221596eed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f11c37791e904dac9f2b24bc8222c39221596eed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f11c37791e904dac9f2b24bc8222c39221596eed"}], "stats": {"total": 182, "additions": 88, "deletions": 94}, "files": [{"sha": "71bb2af4552dcffefe34a84a6d53b6323fa816a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08ec27543d91cff797fc8dd0a8eb47cda2c843f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08ec27543d91cff797fc8dd0a8eb47cda2c843f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08ec27543d91cff797fc8dd0a8eb47cda2c843f7", "patch": "@@ -1,3 +1,25 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* hash-table.h (hash_table): Add gt_cleare_cache as a friend.\n+\t(gt_cleare_cache): Check here for deleted and empty entries.\n+\tReplace handle_cache_entry with a call to keep_cache_entry.\n+\t* hash-traits.h (ggc_cache_hasher::handle_cache_entry): Delete.\n+\t(ggc_cache_hasher::keep_cache_entry): New function.\n+\t* trans-mem.c (tm_wrapper_hasher::handle_cache_entry): Delete.\n+\t(tm_wrapper_hasher::keep_cache_entry): New function.\n+\t* tree.h (tree_decl_map_cache_hasher::handle_cache_entry): Delete.\n+\t(tree_vec_map_cache_hasher::keep_cache_entry): New function.\n+\t* tree.c (type_cache_hasher::handle_cache_entry): Delete.\n+\t(type_cache_hasher::keep_cache_entry): New function.\n+\t(tree_vec_map_cache_hasher::handle_cache_entry): Delete.\n+\t(tree_vec_map_cache_hasher::keep_cache_entry): New function.\n+\t* ubsan.c (tree_type_map_cache_hasher::handle_cache_entry): Delete.\n+\t(tree_type_map_cache_hasher::keep_cache_entry): New function.\n+\t* varasm.c (tm_clone_hasher::handle_cache_entry): Delete.\n+\t(tm_clone_hasher::keep_cache_entry): New function.\n+\t* config/i386/i386.c (dllimport_hasher::handle_cache_entry): Delete.\n+\t(dllimport_hasher::keep_cache_entry): New function.\n+\n 2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* hash-table.h: Include hash-traits.h."}, {"sha": "e4fc125017425d8db1cf0ba7330778a213319882", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08ec27543d91cff797fc8dd0a8eb47cda2c843f7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08ec27543d91cff797fc8dd0a8eb47cda2c843f7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=08ec27543d91cff797fc8dd0a8eb47cda2c843f7", "patch": "@@ -1,3 +1,12 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc-interface/decl.c (value_annotation_hasher::handle_cache_entry):\n+\tDelete.\n+\t(value_annotation_hasher::keep_cache_entry): New function.\n+\t* gcc-interface/utils.c (pad_type_hasher::handle_cache_entry):\n+\tDelete.\n+\t(pad_type_hasher::keep_cache_entry): New function.\n+\n 2015-06-25  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* gcc-interface/misc.c: Include calls.h not function.h."}, {"sha": "7511c560814ebb40948dd5a4b28f28709a3bc19e", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08ec27543d91cff797fc8dd0a8eb47cda2c843f7/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08ec27543d91cff797fc8dd0a8eb47cda2c843f7/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=08ec27543d91cff797fc8dd0a8eb47cda2c843f7", "patch": "@@ -148,16 +148,10 @@ struct value_annotation_hasher : ggc_cache_hasher<tree_int_map *>\n     return a->base.from == b->base.from;\n   }\n \n-  static void\n-  handle_cache_entry (tree_int_map *&m)\n+  static int\n+  keep_cache_entry (tree_int_map *&m)\n   {\n-    extern void gt_ggc_mx (tree_int_map *&);\n-    if (m == HTAB_EMPTY_ENTRY || m == HTAB_DELETED_ENTRY)\n-      return;\n-    else if (ggc_marked_p (m->base.from))\n-      gt_ggc_mx (m);\n-    else\n-      m = static_cast<tree_int_map *> (HTAB_DELETED_ENTRY);\n+    return ggc_marked_p (m->base.from);\n   }\n };\n "}, {"sha": "60446009070c25e28e77b0d92f1ea8429b5b3bbb", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08ec27543d91cff797fc8dd0a8eb47cda2c843f7/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08ec27543d91cff797fc8dd0a8eb47cda2c843f7/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=08ec27543d91cff797fc8dd0a8eb47cda2c843f7", "patch": "@@ -241,7 +241,7 @@ struct pad_type_hasher : ggc_cache_hasher<pad_type_hash *>\n {\n   static inline hashval_t hash (pad_type_hash *t) { return t->hash; }\n   static bool equal (pad_type_hash *a, pad_type_hash *b);\n-  static void handle_cache_entry (pad_type_hash *&);\n+  static int keep_cache_entry (pad_type_hash *&);\n };\n \n static GTY ((cache))\n@@ -1168,16 +1168,10 @@ make_type_from_size (tree type, tree size_tree, bool for_biased)\n \n /* See if the data pointed to by the hash table slot is marked.  */\n \n-void\n-pad_type_hasher::handle_cache_entry (pad_type_hash *&t)\n+int\n+pad_type_hasher::keep_cache_entry (pad_type_hash *&t)\n {\n-  extern void gt_ggc_mx (pad_type_hash *&);\n-  if (t == HTAB_EMPTY_ENTRY || t == HTAB_DELETED_ENTRY)\n-    return;\n-  else if (ggc_marked_p (t->type))\n-    gt_ggc_mx (t);\n-  else\n-    t = static_cast<pad_type_hash *> (HTAB_DELETED_ENTRY);\n+  return ggc_marked_p (t->type);\n }\n \n /* Return true iff the padded types are equivalent.  */"}, {"sha": "a05f226ef57d9b16c79bfd9c3b0a6c75bbd42a7c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08ec27543d91cff797fc8dd0a8eb47cda2c843f7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08ec27543d91cff797fc8dd0a8eb47cda2c843f7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=08ec27543d91cff797fc8dd0a8eb47cda2c843f7", "patch": "@@ -14221,16 +14221,10 @@ struct dllimport_hasher : ggc_cache_hasher<tree_map *>\n     return a->base.from == b->base.from;\n   }\n \n-  static void\n-  handle_cache_entry (tree_map *&m)\n+  static int\n+  keep_cache_entry (tree_map *&m)\n   {\n-    extern void gt_ggc_mx (tree_map *&);\n-    if (m == HTAB_EMPTY_ENTRY || m == HTAB_DELETED_ENTRY)\n-      return;\n-    else if (ggc_marked_p (m->base.from))\n-      gt_ggc_mx (m);\n-    else\n-      m = static_cast<tree_map *> (HTAB_DELETED_ENTRY);\n+    return ggc_marked_p (m->base.from);\n   }\n };\n "}, {"sha": "d0d93a353ac820bac19fe537fafb34fa4917919c", "filename": "gcc/hash-table.h", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08ec27543d91cff797fc8dd0a8eb47cda2c843f7/gcc%2Fhash-table.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08ec27543d91cff797fc8dd0a8eb47cda2c843f7/gcc%2Fhash-table.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-table.h?ref=08ec27543d91cff797fc8dd0a8eb47cda2c843f7", "patch": "@@ -52,6 +52,16 @@ along with GCC; see the file COPYING3.  If not see\n          individual elements of the table need to be disposed of (e.g.,\n          when deleting a hash table, removing elements from the table, etc).\n \n+\t - An optional static function named 'keep_cache_entry'.  This\n+\t function is provided only for garbage-collected elements that\n+\t are not marked by the normal gc mark pass.  It describes what\n+\t what should happen to the element at the end of the gc mark phase.\n+\t The return value should be:\n+\t   - 0 if the element should be deleted\n+\t   - 1 if the element should be kept and needs to be marked\n+\t   - -1 if the element should be kept and is already marked.\n+\t Returning -1 rather than 1 is purely an optimization.\n+\n       3. The type of the hash table itself.  (More later.)\n \n    In very special circumstances, users may need to know about a fourth type.\n@@ -584,6 +594,8 @@ class hash_table\n   template<typename T> friend void gt_pch_nx (hash_table<T> *,\n \t\t\t\t\t      gt_pointer_operator, void *);\n \n+  template<typename T> friend void gt_cleare_cache (hash_table<T> *);\n+\n   value_type *alloc_entries (size_t n CXX_MEM_STAT_INFO) const;\n   value_type *find_empty_slot_for_expand (hashval_t);\n   void expand ();\n@@ -1131,12 +1143,20 @@ template<typename H>\n inline void\n gt_cleare_cache (hash_table<H> *h)\n {\n+  extern void gt_ggc_mx (typename H::value_type &t);\n+  typedef hash_table<H> table;\n   if (!h)\n     return;\n \n-  for (typename hash_table<H>::iterator iter = h->begin (); iter != h->end ();\n-       ++iter)\n-    H::handle_cache_entry (*iter);\n+  for (typename table::iterator iter = h->begin (); iter != h->end (); ++iter)\n+    if (!table::is_empty (*iter) && !table::is_deleted (*iter))\n+      {\n+\tint res = H::keep_cache_entry (*iter);\n+\tif (res == 0)\n+\t  h->clear_slot (&*iter);\n+\telse if (res != -1)\n+\t  gt_ggc_mx (*iter);\n+      }\n }\n \n #endif /* TYPED_HASHTAB_H */"}, {"sha": "3cc6a6fa9ddbeb9d2c61b30c6c9db20fe5677c8e", "filename": "gcc/hash-traits.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08ec27543d91cff797fc8dd0a8eb47cda2c843f7/gcc%2Fhash-traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08ec27543d91cff797fc8dd0a8eb47cda2c843f7/gcc%2Fhash-traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-traits.h?ref=08ec27543d91cff797fc8dd0a8eb47cda2c843f7", "patch": "@@ -146,13 +146,10 @@ struct ggc_cache_hasher\n     op (&p, cookie);\n   }\n \n-  /* Clear out entries if they are about to be gc'd.  */\n-\n-  static void\n-  handle_cache_entry (T &e)\n+  static int\n+  keep_cache_entry (T &e)\n   {\n-    if (e != HTAB_EMPTY_ENTRY && e != HTAB_DELETED_ENTRY && !ggc_marked_p (e))\n-      e = static_cast<T> (HTAB_DELETED_ENTRY);\n+    return ggc_marked_p (e) ? -1 : 0;\n   }\n };\n "}, {"sha": "ded1e513705ef90b75d252cb44ec23f830acd793", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08ec27543d91cff797fc8dd0a8eb47cda2c843f7/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08ec27543d91cff797fc8dd0a8eb47cda2c843f7/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=08ec27543d91cff797fc8dd0a8eb47cda2c843f7", "patch": "@@ -480,17 +480,11 @@ struct tm_wrapper_hasher : ggc_cache_hasher<tree_map *>\n     return a->base.from == b->base.from;\n   }\n \n-  static void\n-  handle_cache_entry (tree_map *&m)\n-    {\n-      extern void gt_ggc_mx (tree_map *&);\n-      if (m == HTAB_EMPTY_ENTRY || m == HTAB_DELETED_ENTRY)\n-\treturn;\n-      else if (ggc_marked_p (m->base.from))\n-\tgt_ggc_mx (m);\n-      else\n-\tm = static_cast<tree_map *> (HTAB_DELETED_ENTRY);\n-    }\n+  static int\n+  keep_cache_entry (tree_map *&m)\n+  {\n+    return ggc_marked_p (m->base.from);\n+  }\n };\n \n static GTY((cache)) hash_table<tm_wrapper_hasher> *tm_wrap_map;"}, {"sha": "25112467bec89a8dd5ebcda4befab9778af97128", "filename": "gcc/tree.c", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08ec27543d91cff797fc8dd0a8eb47cda2c843f7/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08ec27543d91cff797fc8dd0a8eb47cda2c843f7/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=08ec27543d91cff797fc8dd0a8eb47cda2c843f7", "patch": "@@ -201,16 +201,10 @@ struct type_cache_hasher : ggc_cache_hasher<type_hash *>\n   static hashval_t hash (type_hash *t) { return t->hash; }\n   static bool equal (type_hash *a, type_hash *b);\n \n-  static void\n-  handle_cache_entry (type_hash *&t)\n+  static int\n+  keep_cache_entry (type_hash *&t)\n   {\n-    extern void gt_ggc_mx (type_hash *&);\n-    if (t == HTAB_DELETED_ENTRY || t == HTAB_EMPTY_ENTRY)\n-      return;\n-    else if (ggc_marked_p (t->type))\n-      gt_ggc_mx (t);\n-    else\n-      t = static_cast<type_hash *> (HTAB_DELETED_ENTRY);\n+    return ggc_marked_p (t->type);\n   }\n };\n \n@@ -259,7 +253,7 @@ static GTY ((cache))\n static GTY ((cache))\n      hash_table<tree_decl_map_cache_hasher> *value_expr_for_decl;\n \n-     struct tree_vec_map_cache_hasher : ggc_cache_hasher<tree_vec_map *>\n+struct tree_vec_map_cache_hasher : ggc_cache_hasher<tree_vec_map *>\n {\n   static hashval_t hash (tree_vec_map *m) { return DECL_UID (m->base.from); }\n \n@@ -269,16 +263,10 @@ static GTY ((cache))\n     return a->base.from == b->base.from;\n   }\n \n-  static void\n-  handle_cache_entry (tree_vec_map *&m)\n+  static int\n+  keep_cache_entry (tree_vec_map *&m)\n   {\n-    extern void gt_ggc_mx (tree_vec_map *&);\n-    if (m == HTAB_EMPTY_ENTRY || m == HTAB_DELETED_ENTRY)\n-      return;\n-    else if (ggc_marked_p (m->base.from))\n-      gt_ggc_mx (m);\n-    else\n-      m = static_cast<tree_vec_map *> (HTAB_DELETED_ENTRY);\n+    return ggc_marked_p (m->base.from);\n   }\n };\n "}, {"sha": "51465e25b6172921cb3e5a7c005d8595a17b33ff", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08ec27543d91cff797fc8dd0a8eb47cda2c843f7/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08ec27543d91cff797fc8dd0a8eb47cda2c843f7/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=08ec27543d91cff797fc8dd0a8eb47cda2c843f7", "patch": "@@ -4635,16 +4635,10 @@ struct tree_decl_map_cache_hasher : ggc_cache_hasher<tree_decl_map *>\n     return tree_decl_map_eq (a, b);\n   }\n \n-  static void\n-  handle_cache_entry (tree_decl_map *&m)\n+  static int\n+  keep_cache_entry (tree_decl_map *&m)\n   {\n-    extern void gt_ggc_mx (tree_decl_map *&);\n-    if (m == HTAB_EMPTY_ENTRY || m == HTAB_DELETED_ENTRY)\n-      return;\n-    else if (ggc_marked_p (m->base.from))\n-      gt_ggc_mx (m);\n-    else\n-      m = static_cast<tree_decl_map *> (HTAB_DELETED_ENTRY);\n+    return ggc_marked_p (m->base.from);\n   }\n };\n "}, {"sha": "14e54ef5e703cccee934fe57d9641844dfb05c3a", "filename": "gcc/ubsan.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08ec27543d91cff797fc8dd0a8eb47cda2c843f7/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08ec27543d91cff797fc8dd0a8eb47cda2c843f7/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=08ec27543d91cff797fc8dd0a8eb47cda2c843f7", "patch": "@@ -97,16 +97,10 @@ struct tree_type_map_cache_hasher : ggc_cache_hasher<tree_type_map *>\n     return a->type.from == b->type.from;\n   }\n \n-  static void\n-  handle_cache_entry (tree_type_map *&m)\n+  static int\n+  keep_cache_entry (tree_type_map *&m)\n   {\n-    extern void gt_ggc_mx (tree_type_map *&);\n-    if (m == HTAB_EMPTY_ENTRY || m == HTAB_DELETED_ENTRY)\n-      return;\n-    else if (ggc_marked_p (m->type.from))\n-      gt_ggc_mx (m);\n-    else\n-      m = static_cast<tree_type_map *> (HTAB_DELETED_ENTRY);\n+    return ggc_marked_p (m->type.from);\n   }\n };\n "}, {"sha": "8b4385b78568206d54e7e82b6fa1b0ee0a9c9fad", "filename": "gcc/varasm.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08ec27543d91cff797fc8dd0a8eb47cda2c843f7/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08ec27543d91cff797fc8dd0a8eb47cda2c843f7/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=08ec27543d91cff797fc8dd0a8eb47cda2c843f7", "patch": "@@ -5795,16 +5795,10 @@ struct tm_clone_hasher : ggc_cache_hasher<tree_map *>\n   static hashval_t hash (tree_map *m) { return tree_map_hash (m); }\n   static bool equal (tree_map *a, tree_map *b) { return tree_map_eq (a, b); }\n \n-  static void\n-  handle_cache_entry (tree_map *&e)\n+  static int\n+  keep_cache_entry (tree_map *&e)\n   {\n-    extern void gt_ggc_mx (tree_map *&);\n-    if (e == HTAB_EMPTY_ENTRY || e == HTAB_DELETED_ENTRY)\n-      return;\n-    else if (ggc_marked_p (e->base.from))\n-      gt_ggc_mx (e);\n-    else\n-      e = static_cast<tree_map *> (HTAB_DELETED_ENTRY);\n+    return ggc_marked_p (e->base.from);\n   }\n };\n "}]}