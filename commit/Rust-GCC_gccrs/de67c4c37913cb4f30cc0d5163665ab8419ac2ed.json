{"sha": "de67c4c37913cb4f30cc0d5163665ab8419ac2ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU2N2M0YzM3OTEzY2I0ZjMwY2MwZDUxNjM2NjVhYjg0MTlhYzJlZA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-12-16T18:15:01Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-12-16T18:15:01Z"}, "message": "Better error recovery for merge-conflict markers\n\ngcc/c-family/ChangeLog:\n\t* c-common.h (conflict_marker_get_final_tok_kind): New prototype.\n\t* c-lex.c (conflict_marker_get_final_tok_kind): New function.\n\ngcc/c/ChangeLog:\n\t* c-parser.c (struct c_parser): Expand array \"tokens_buf\" from 2\n\tto 4.\n\t(c_parser_peek_nth_token): New function.\n\t(c_parser_peek_conflict_marker): New function.\n\t(c_parser_error): Detect conflict markers and report them as such.\n\ngcc/cp/ChangeLog:\n\t* parser.c (cp_lexer_peek_conflict_marker): New function.\n\t(cp_parser_error): Detect conflict markers and report them as\n\tsuch.\n\ngcc/testsuite/ChangeLog:\n\t* c-c++-common/conflict-markers-1.c: New testcase.\n\t* c-c++-common/conflict-markers-2.c: Likewise.\n\t* c-c++-common/conflict-markers-3.c: Likewise.\n\t* c-c++-common/conflict-markers-4.c: Likewise.\n\t* c-c++-common/conflict-markers-5.c: Likewise.\n\t* c-c++-common/conflict-markers-6.c: Likewise.\n\t* c-c++-common/conflict-markers-7.c: Likewise.\n\t* c-c++-common/conflict-markers-8.c: Likewise.\n\t* c-c++-common/conflict-markers-9.c: Likewise.\n\t* c-c++-common/conflict-markers-10.c: Likewise.\n\t* c-c++-common/conflict-markers-11.c: Likewise.\n\t* g++.dg/conflict-markers-1.C: Likewise.\n\nFrom-SVN: r231712", "tree": {"sha": "631c0d4e81b08a923db1179b2753d0d62d53bd9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/631c0d4e81b08a923db1179b2753d0d62d53bd9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de67c4c37913cb4f30cc0d5163665ab8419ac2ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de67c4c37913cb4f30cc0d5163665ab8419ac2ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de67c4c37913cb4f30cc0d5163665ab8419ac2ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8a69b8590383788dc5da60693b3a48f8222a2893", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a69b8590383788dc5da60693b3a48f8222a2893", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a69b8590383788dc5da60693b3a48f8222a2893"}], "stats": {"total": 346, "additions": 344, "deletions": 2}, "files": [{"sha": "3208ce59ddadb8eda3a627dc5182ed6c4d2e4a0f", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=de67c4c37913cb4f30cc0d5163665ab8419ac2ed", "patch": "@@ -1,3 +1,8 @@\n+2015-12-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-common.h (conflict_marker_get_final_tok_kind): New prototype.\n+\t* c-lex.c (conflict_marker_get_final_tok_kind): New function.\n+\n 2015-12-15  Ilya Verbin  <ilya.verbin@intel.com>\n \n \t* c-common.c (c_common_attribute_table): Handle \"omp declare target"}, {"sha": "2183565c0ddd09227043c8af44af06bd64eb7fd2", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=de67c4c37913cb4f30cc0d5163665ab8419ac2ed", "patch": "@@ -1089,6 +1089,10 @@ extern void c_genericize (tree);\n extern int c_gimplify_expr (tree *, gimple_seq *, gimple_seq *);\n extern tree c_build_bind_expr (location_t, tree, tree);\n \n+/* In c-lex.c.  */\n+extern enum cpp_ttype\n+conflict_marker_get_final_tok_kind (enum cpp_ttype tok1_kind);\n+\n /* In c-pch.c  */\n extern void pch_init (void);\n extern void pch_cpp_save_state (void);"}, {"sha": "125407b820236a8d263404645713e32a6be386a7", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=de67c4c37913cb4f30cc0d5163665ab8419ac2ed", "patch": "@@ -1263,3 +1263,29 @@ lex_charconst (const cpp_token *token)\n \n   return value;\n }\n+\n+/* Helper function for c_parser_peek_conflict_marker\n+   and cp_lexer_peek_conflict_marker.\n+   Given a possible conflict marker token of kind TOK1_KIND\n+   consisting of a pair of characters, get the token kind for the\n+   standalone final character.  */\n+\n+enum cpp_ttype\n+conflict_marker_get_final_tok_kind (enum cpp_ttype tok1_kind)\n+{\n+  switch (tok1_kind)\n+    {\n+    default: gcc_unreachable ();\n+    case CPP_LSHIFT:\n+      /* \"<<\" and '<' */\n+      return CPP_LESS;\n+\n+    case CPP_EQ_EQ:\n+      /* \"==\" and '=' */\n+      return CPP_EQ;\n+\n+    case CPP_RSHIFT:\n+      /* \">>\" and '>' */\n+      return CPP_GREATER;\n+    }\n+}"}, {"sha": "22692d42a642e30ffbbee4ebfff45475b33b2420", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=de67c4c37913cb4f30cc0d5163665ab8419ac2ed", "patch": "@@ -1,3 +1,11 @@\n+2015-12-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-parser.c (struct c_parser): Expand array \"tokens_buf\" from 2\n+\tto 4.\n+\t(c_parser_peek_nth_token): New function.\n+\t(c_parser_peek_conflict_marker): New function.\n+\t(c_parser_error): Detect conflict markers and report them as such.\n+\n 2015-12-16  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-parser.c (c_parser_postfix_expression): Use EXPR_LOC_OR_LOC"}, {"sha": "43c26ae73847ebcb7817ec8a44eb894ae8af6260", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 73, "deletions": 2, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=de67c4c37913cb4f30cc0d5163665ab8419ac2ed", "patch": "@@ -202,8 +202,8 @@ struct GTY(()) c_parser {\n   /* The look-ahead tokens.  */\n   c_token * GTY((skip)) tokens;\n   /* Buffer for look-ahead tokens.  */\n-  c_token tokens_buf[2];\n-  /* How many look-ahead tokens are available (0, 1 or 2, or\n+  c_token tokens_buf[4];\n+  /* How many look-ahead tokens are available (0 - 4, or\n      more if parsing from pre-lexed tokens).  */\n   unsigned int tokens_avail;\n   /* True if a syntax error is being recovered from; false otherwise.\n@@ -492,6 +492,23 @@ c_parser_peek_2nd_token (c_parser *parser)\n   return &parser->tokens[1];\n }\n \n+/* Return a pointer to the Nth token from PARSER, reading it\n+   in if necessary.  The N-1th token is already read in.  */\n+\n+static c_token *\n+c_parser_peek_nth_token (c_parser *parser, unsigned int n)\n+{\n+  /* N is 1-based, not zero-based.  */\n+  gcc_assert (n > 0);\n+\n+  if (parser->tokens_avail >= n)\n+    return &parser->tokens[n - 1];\n+  gcc_assert (parser->tokens_avail == n - 1);\n+  c_lex_one_token (parser, &parser->tokens[n - 1]);\n+  parser->tokens_avail = n;\n+  return &parser->tokens[n - 1];\n+}\n+\n /* Return true if TOKEN can start a type name,\n    false otherwise.  */\n static bool\n@@ -829,6 +846,46 @@ c_parser_set_source_position_from_token (c_token *token)\n     }\n }\n \n+/* Helper function for c_parser_error.\n+   Having peeked a token of kind TOK1_KIND that might signify\n+   a conflict marker, peek successor tokens to determine\n+   if we actually do have a conflict marker.\n+   Specifically, we consider a run of 7 '<', '=' or '>' characters\n+   at the start of a line as a conflict marker.\n+   These come through the lexer as three pairs and a single,\n+   e.g. three CPP_LSHIFT (\"<<\") and a CPP_LESS ('<').\n+   If it returns true, *OUT_LOC is written to with the location/range\n+   of the marker.  */\n+\n+static bool\n+c_parser_peek_conflict_marker (c_parser *parser, enum cpp_ttype tok1_kind,\n+\t\t\t       location_t *out_loc)\n+{\n+  c_token *token2 = c_parser_peek_2nd_token (parser);\n+  if (token2->type != tok1_kind)\n+    return false;\n+  c_token *token3 = c_parser_peek_nth_token (parser, 3);\n+  if (token3->type != tok1_kind)\n+    return false;\n+  c_token *token4 = c_parser_peek_nth_token (parser, 4);\n+  if (token4->type != conflict_marker_get_final_tok_kind (tok1_kind))\n+    return false;\n+\n+  /* It must be at the start of the line.  */\n+  location_t start_loc = c_parser_peek_token (parser)->location;\n+  if (LOCATION_COLUMN (start_loc) != 1)\n+    return false;\n+\n+  /* We have a conflict marker.  Construct a location of the form:\n+       <<<<<<<\n+       ^~~~~~~\n+     with start == caret, finishing at the end of the marker.  */\n+  location_t finish_loc = get_finish (token4->location);\n+  *out_loc = make_location (start_loc, start_loc, finish_loc);\n+\n+  return true;\n+}\n+\n /* Issue a diagnostic of the form\n       FILE:LINE: MESSAGE before TOKEN\n    where TOKEN is the next token in the input stream of PARSER.\n@@ -850,6 +907,20 @@ c_parser_error (c_parser *parser, const char *gmsgid)\n   parser->error = true;\n   if (!gmsgid)\n     return;\n+\n+  /* If this is actually a conflict marker, report it as such.  */\n+  if (token->type == CPP_LSHIFT\n+      || token->type == CPP_RSHIFT\n+      || token->type == CPP_EQ_EQ)\n+    {\n+      location_t loc;\n+      if (c_parser_peek_conflict_marker (parser, token->type, &loc))\n+\t{\n+\t  error_at (loc, \"version control conflict marker in file\");\n+\t  return;\n+\t}\n+    }\n+\n   /* This diagnostic makes more sense if it is tagged to the line of\n      the token we just peeked at.  */\n   c_parser_set_source_position_from_token (token);"}, {"sha": "a3a73a39cbe16a72c5f5233de3a6ad74e7a0fe63", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=de67c4c37913cb4f30cc0d5163665ab8419ac2ed", "patch": "@@ -1,3 +1,9 @@\n+2015-12-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* parser.c (cp_lexer_peek_conflict_marker): New function.\n+\t(cp_parser_error): Detect conflict markers and report them as\n+\tsuch.\n+\n 2015-12-15  Martin Sebor  <msebor@redhat.com>\n \n \tc++/42121"}, {"sha": "c1948c463ebe1d118fa0f8daa0d796dd9b4a8b6f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=de67c4c37913cb4f30cc0d5163665ab8419ac2ed", "patch": "@@ -2689,6 +2689,46 @@ cp_parser_is_keyword (cp_token* token, enum rid keyword)\n   return token->keyword == keyword;\n }\n \n+/* Helper function for cp_parser_error.\n+   Having peeked a token of kind TOK1_KIND that might signify\n+   a conflict marker, peek successor tokens to determine\n+   if we actually do have a conflict marker.\n+   Specifically, we consider a run of 7 '<', '=' or '>' characters\n+   at the start of a line as a conflict marker.\n+   These come through the lexer as three pairs and a single,\n+   e.g. three CPP_LSHIFT tokens (\"<<\") and a CPP_LESS token ('<').\n+   If it returns true, *OUT_LOC is written to with the location/range\n+   of the marker.  */\n+\n+static bool\n+cp_lexer_peek_conflict_marker (cp_lexer *lexer, enum cpp_ttype tok1_kind,\n+\t\t\t       location_t *out_loc)\n+{\n+  cp_token *token2 = cp_lexer_peek_nth_token (lexer, 2);\n+  if (token2->type != tok1_kind)\n+    return false;\n+  cp_token *token3 = cp_lexer_peek_nth_token (lexer, 3);\n+  if (token3->type != tok1_kind)\n+    return false;\n+  cp_token *token4 = cp_lexer_peek_nth_token (lexer, 4);\n+  if (token4->type != conflict_marker_get_final_tok_kind (tok1_kind))\n+    return false;\n+\n+  /* It must be at the start of the line.  */\n+  location_t start_loc = cp_lexer_peek_token (lexer)->location;\n+  if (LOCATION_COLUMN (start_loc) != 1)\n+    return false;\n+\n+  /* We have a conflict marker.  Construct a location of the form:\n+       <<<<<<<\n+       ^~~~~~~\n+     with start == caret, finishing at the end of the marker.  */\n+  location_t finish_loc = get_finish (token4->location);\n+  *out_loc = make_location (start_loc, start_loc, finish_loc);\n+\n+  return true;\n+}\n+\n /* If not parsing tentatively, issue a diagnostic of the form\n       FILE:LINE: MESSAGE before TOKEN\n    where TOKEN is the next token in the input stream.  MESSAGE\n@@ -2713,6 +2753,19 @@ cp_parser_error (cp_parser* parser, const char* gmsgid)\n \t  return;\n \t}\n \n+      /* If this is actually a conflict marker, report it as such.  */\n+      if (token->type == CPP_LSHIFT\n+\t  || token->type == CPP_RSHIFT\n+\t  || token->type == CPP_EQ_EQ)\n+\t{\n+\t  location_t loc;\n+\t  if (cp_lexer_peek_conflict_marker (parser->lexer, token->type, &loc))\n+\t    {\n+\t      error_at (loc, \"version control conflict marker in file\");\n+\t      return;\n+\t    }\n+\t}\n+\n       c_parse_error (gmsgid,\n \t\t     /* Because c_parser_error does not understand\n \t\t\tCPP_KEYWORD, keywords are treated like"}, {"sha": "83cf7acbd5044057633a74910d5c140bbb86a700", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de67c4c37913cb4f30cc0d5163665ab8419ac2ed", "patch": "@@ -1,3 +1,18 @@\n+2015-12-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-c++-common/conflict-markers-1.c: New testcase.\n+\t* c-c++-common/conflict-markers-2.c: Likewise.\n+\t* c-c++-common/conflict-markers-3.c: Likewise.\n+\t* c-c++-common/conflict-markers-4.c: Likewise.\n+\t* c-c++-common/conflict-markers-5.c: Likewise.\n+\t* c-c++-common/conflict-markers-6.c: Likewise.\n+\t* c-c++-common/conflict-markers-7.c: Likewise.\n+\t* c-c++-common/conflict-markers-8.c: Likewise.\n+\t* c-c++-common/conflict-markers-9.c: Likewise.\n+\t* c-c++-common/conflict-markers-10.c: Likewise.\n+\t* c-c++-common/conflict-markers-11.c: Likewise.\n+\t* g++.dg/conflict-markers-1.C: Likewise.\n+\n 2015-12-16  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/cast-function-1.c (bar): Update column numbers."}, {"sha": "b9b3bab316dc9646d73938068959605ea98b5afa", "filename": "gcc/testsuite/c-c++-common/conflict-markers-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-1.c?ref=de67c4c37913cb4f30cc0d5163665ab8419ac2ed", "patch": "@@ -0,0 +1,11 @@\n+int p;\n+\n+<<<<<<< HEAD /* { dg-error \"conflict marker\" } */\n+extern int some_var;\n+=======      /* { dg-error \"conflict marker\" } */\n+extern short some_var; /* This line would lead to a warning due to the\n+\t\t\t  duplicate name, but it is skipped when handling\n+\t\t\t  the conflict marker.  */\n+>>>>>>> Some commit message  /* { dg-error \"conflict marker\" } */\n+\n+int q;"}, {"sha": "59e5a49f2bfe0ff97c1a3a85500c005fdf4bf445", "filename": "gcc/testsuite/c-c++-common/conflict-markers-10.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-10.c?ref=de67c4c37913cb4f30cc0d5163665ab8419ac2ed", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-options \"-fdiagnostics-show-caret\" } */\n+\n+<<<<<<< HEAD /* { dg-error \"conflict marker\" } */\n+/* { dg-begin-multiline-output \"\" }\n+ <<<<<<< HEAD\n+ ^~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+\n+extern int some_var;\n+\n+=======      /* { dg-error \"conflict marker\" } */\n+/* { dg-begin-multiline-output \"\" }\n+ =======\n+ ^~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+\n+extern short some_var; /* This line would lead to a warning due to the\n+\t\t\t  duplicate name, but it is skipped when handling\n+\t\t\t  the conflict marker.  */\n+\n+>>>>>>> Some commit message  /* { dg-error \"conflict marker\" } */\n+/* { dg-begin-multiline-output \"\" }\n+ >>>>>>>\n+ ^~~~~~~\n+   { dg-end-multiline-output \"\" } */"}, {"sha": "8771453e9cb8c5b26ac62b2c8d4d9d7bccec7e7d", "filename": "gcc/testsuite/c-c++-common/conflict-markers-11.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-11.c?ref=de67c4c37913cb4f30cc0d5163665ab8419ac2ed", "patch": "@@ -0,0 +1,14 @@\n+/* Verify that we only report conflict markers at the start of lines.  */\n+int p;\n+\n+ <<<<<<< HEAD /* { dg-error \"expected identifier|expected unqualified-id\" } */\n+\n+int q;\n+\n+ =======      /* { dg-error \"expected identifier|expected unqualified-id\" } */\n+\n+int r;\n+\n+ >>>>>>> Some commit message  /* { dg-error \"expected identifier|expected unqualified-id\" } */\n+\n+int s;"}, {"sha": "f06d04363ff3fcd40b8bc6b45f0a59755e941692", "filename": "gcc/testsuite/c-c++-common/conflict-markers-2.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-2.c?ref=de67c4c37913cb4f30cc0d5163665ab8419ac2ed", "patch": "@@ -0,0 +1,2 @@\n+/* This should not be flagged as a conflict marker.  */\n+const char *msg = \"<<<<<<< \";"}, {"sha": "f149ecccb417759001636f9259be18270b899b30", "filename": "gcc/testsuite/c-c++-common/conflict-markers-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-3.c?ref=de67c4c37913cb4f30cc0d5163665ab8419ac2ed", "patch": "@@ -0,0 +1,11 @@\n+/* Ensure we can handle unterminated conflict markers.  */\n+\n+int p;\n+\n+<<<<<<< HEAD  /* { dg-error \"conflict marker\" } */\n+\n+int q;\n+\n+<<<<<<< HEAD  /* { dg-error \"conflict marker\" } */\n+\n+int r;"}, {"sha": "a3c53ea1b1c2e8d2ab144c10fa69a73cdd0ffa6d", "filename": "gcc/testsuite/c-c++-common/conflict-markers-4.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-4.c?ref=de67c4c37913cb4f30cc0d5163665ab8419ac2ed", "patch": "@@ -0,0 +1,11 @@\n+/* Ensure we can handle mismatched conflict markers.  */\n+\n+int p;\n+\n+>>>>>>> Some commit message  /* { dg-error \"conflict marker\" } */\n+\n+int q;\n+\n+>>>>>>> Some other commit message  /* { dg-error \"conflict marker\" } */\n+\n+int r;"}, {"sha": "b55c9c3d34e0a9b079d33a83396529b8220f9577", "filename": "gcc/testsuite/c-c++-common/conflict-markers-5.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-5.c?ref=de67c4c37913cb4f30cc0d5163665ab8419ac2ed", "patch": "@@ -0,0 +1,11 @@\n+/* Ensure we can handle mismatched conflict markers.  */\n+\n+int p;\n+\n+=======  /* { dg-error \"conflict marker\" } */\n+\n+int q;\n+\n+=======  /* { dg-error \"conflict marker\" } */\n+\n+int r;"}, {"sha": "081e289b30acd23cb97b68fc51d1403c61af8b54", "filename": "gcc/testsuite/c-c++-common/conflict-markers-6.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-6.c?ref=de67c4c37913cb4f30cc0d5163665ab8419ac2ed", "patch": "@@ -0,0 +1,38 @@\n+/* Branch coverage of conflict marker detection:\n+   none of these should be reported as conflict markers.  */\n+\n+int a0;\n+\n+<< HEAD  /* { dg-error \"expected\" } */\n+\n+int a1;\n+\n+<<<< HEAD  /* { dg-error \"expected\" } */\n+\n+int a2;\n+\n+<<<<<< HEAD  /* { dg-error \"expected\" } */\n+\n+int b0;\n+\n+== HEAD  /* { dg-error \"expected\" } */\n+\n+int b1;\n+\n+==== HEAD  /* { dg-error \"expected\" } */\n+\n+int b2;\n+\n+====== HEAD  /* { dg-error \"expected\" } */\n+\n+int c0;\n+\n+>> HEAD  /* { dg-error \"expected\" } */\n+\n+int c1;\n+\n+>>>> HEAD  /* { dg-error \"expected\" } */\n+\n+int c2;\n+\n+>>>>>> HEAD  /* { dg-error \"expected\" } */"}, {"sha": "e68f84db3c11aaaf82282e6999e937e645a304ff", "filename": "gcc/testsuite/c-c++-common/conflict-markers-7.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-7.c?ref=de67c4c37913cb4f30cc0d5163665ab8419ac2ed", "patch": "@@ -0,0 +1,6 @@\n+/* It's valid to stringize the \"<<<<<<<\"; don't\n+   report it as a conflict marker.  */\n+#define str(s) #s\n+const char *s = str(\n+<<<<<<<\n+);"}, {"sha": "be2e121bee5a4c98bdd3c31cb2f782100ca294af", "filename": "gcc/testsuite/c-c++-common/conflict-markers-8.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-8.c?ref=de67c4c37913cb4f30cc0d5163665ab8419ac2ed", "patch": "@@ -0,0 +1,4 @@\n+/* A macro that's never expanded shouldn't be reported as a\n+   conflict marker.  */\n+#define foo \\\n+<<<<<<<"}, {"sha": "5c1e66394be2b4ba9dbe695536f222fa5146baef", "filename": "gcc/testsuite/c-c++-common/conflict-markers-9.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fconflict-markers-9.c?ref=de67c4c37913cb4f30cc0d5163665ab8419ac2ed", "patch": "@@ -0,0 +1,8 @@\n+/* It's valid to have\n+<<<<<<<\n+   inside both\n+   comments (as above), and within string literals.  */\n+const char *s = \"\\\n+<<<<<<<\";\n+\n+/* The above shouldn't be reported as errors.  */"}, {"sha": "be3cb8859be6781d98faa95504e4a496c6254fbf", "filename": "gcc/testsuite/g++.dg/conflict-markers-1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconflict-markers-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de67c4c37913cb4f30cc0d5163665ab8419ac2ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconflict-markers-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconflict-markers-1.C?ref=de67c4c37913cb4f30cc0d5163665ab8419ac2ed", "patch": "@@ -0,0 +1,13 @@\n+/* Ensure that we don't complain about conflict markers on\n+   valid template argument lists, valid in C++11 onwards.  */\n+// { dg-options \"-std=c++11\" }\n+\n+template <typename T>\n+struct foo\n+{\n+  T t;\n+};\n+\n+foo <foo <foo <foo <foo <foo <foo <int\n+>>>>>>> f;\n+// The above line is valid C++11, and isn't a conflict marker"}]}