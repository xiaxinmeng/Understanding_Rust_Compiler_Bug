{"sha": "275be1dac2866fa0e50a73ad36bdc45760796d63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc1YmUxZGFjMjg2NmZhMGU1MGE3M2FkMzZiZGM0NTc2MDc5NmQ2Mw==", "commit": {"author": {"name": "Ilya Tocar", "email": "tocarip@gmail.com", "date": "2014-08-15T12:47:41Z"}, "committer": {"name": "Ilya Tocar", "email": "tocarip@gcc.gnu.org", "date": "2014-08-15T12:47:41Z"}, "message": "gcc/\n\n\tPR target/61878\n\t* config/i386/avx512fintrin.h (_mm512_mask_cmpge_epi32_mask): New.\n\t(_mm512_mask_cmpge_epu32_mask): Ditto.\n\t(_mm512_cmpge_epu32_mask): Ditto.\n\t(_mm512_mask_cmpge_epi64_mask): Ditto.\n\t(_mm512_cmpge_epi64_mask): Ditto.\n\t(_mm512_mask_cmpge_epu64_mask): Ditto.\n\t(_mm512_cmpge_epu64_mask): Ditto.\n\t(_mm512_mask_cmple_epi32_mask): Ditto.\n\t(_mm512_cmple_epi32_mask): Ditto.\n\t(_mm512_mask_cmple_epu32_mask): Ditto.\n\t(_mm512_cmple_epu32_mask): Ditto.\n\t(_mm512_mask_cmple_epi64_mask): Ditto.\n\t(_mm512_cmple_epi64_mask): Ditto.\n\t(_mm512_mask_cmple_epu64_mask): Ditto.\n\t(_mm512_cmple_epu64_mask): Ditto.\n\t(_mm512_mask_cmplt_epi32_mask): Ditto.\n\t(_mm512_cmplt_epi32_mask): Ditto.\n\t(_mm512_mask_cmplt_epu32_mask): Ditto.\n\t(_mm512_cmplt_epu32_mask): Ditto.\n\t(_mm512_mask_cmplt_epi64_mask): Ditto.\n\t(_mm512_cmplt_epi64_mask): Ditto.\n\t(_mm512_mask_cmplt_epu64_mask): Ditto.\n\t(_mm512_cmplt_epu64_mask): Ditto.\n\t(_mm512_mask_cmpneq_epi32_mask): Ditto.\n\t(_mm512_mask_cmpneq_epu32_mask): Ditto.\n\t(_mm512_cmpneq_epu32_mask): Ditto.\n\t(_mm512_mask_cmpneq_epi64_mask): Ditto.\n\t(_mm512_cmpneq_epi64_mask): Ditto.\n\t(_mm512_mask_cmpneq_epu64_mask): Ditto.\n\t(_mm512_cmpneq_epu64_mask): Ditto.\n\t(_mm512_castpd_ps): Ditto.\n\t(_mm512_castpd_si512): Ditto.\n\t(_mm512_castps_pd): Ditto.\n\t(_mm512_castps_si512): Ditto.\n\t(_mm512_castsi512_ps): Ditto.\n\t(_mm512_castsi512_pd): Ditto.\n\t(_mm512_castpd512_pd128): Ditto.\n\t(_mm512_castps512_ps128): Ditto.\n\t(_mm512_castsi512_si128): Ditto.\n\t(_mm512_castpd512_pd256): Ditto.\n\t(_mm512_castps512_ps256): Ditto.\n\t(_mm512_castsi512_si256): Ditto.\n\t(_mm512_castpd128_pd512): Ditto.\n\t(_mm512_castps128_ps512): Ditto.\n\t(_mm512_castsi128_si512): Ditto.\n\t(_mm512_castpd256_pd512): Ditto.\n\t(_mm512_castps256_ps512): Ditto.\n\t(_mm512_castsi256_si512): Ditto.\n\t(_mm512_cmpeq_epu32_mask): Ditto.\n\t(_mm512_mask_cmpeq_epu32_mask): Ditto.\n\t(_mm512_mask_cmpeq_epu64_mask): Ditto.\n\t(_mm512_cmpeq_epu64_mask): Ditto.\n\t(_mm512_cmpgt_epu32_mask): Ditto.\n\t(_mm512_mask_cmpgt_epu32_mask): Ditto.\n\t(_mm512_mask_cmpgt_epu64_mask): Ditto.\n\t(_mm512_cmpgt_epu64_mask): Ditto.\n\t* config/i386/i386-builtin-types.def: Add V16SF_FTYPE_V8SF,\n\tV16SI_FTYPE_V8SI, V16SI_FTYPE_V4SI, V8DF_FTYPE_V2DF.\n\t* config/i386/i386.c (enum ix86_builtins): Add\n\tIX86_BUILTIN_SI512_SI256, IX86_BUILTIN_PD512_PD256,\n\tIX86_BUILTIN_PS512_PS256, IX86_BUILTIN_SI512_SI,\n\tIX86_BUILTIN_PD512_PD, IX86_BUILTIN_PS512_PS.\n\t(bdesc_args): Add __builtin_ia32_si512_256si,\n\t__builtin_ia32_ps512_256ps, __builtin_ia32_pd512_256pd,\n\t__builtin_ia32_si512_si, __builtin_ia32_ps512_ps,\n\t__builtin_ia32_pd512_pd.\n\t(ix86_expand_args_builtin): Handle new FTYPEs.\n\t* config/i386/sse.md (castmode): Add 512-bit modes.\n\t(AVX512MODE2P): New.\n\t(avx512f_<castmode><avxsizesuffix>_<castmode): New.\n\t(avx512f_<castmode><avxsizesuffix>_256<castmode): Ditto.\n\n\n\tgcc/testsuite/\n\n\tPR target/61878\n\t* gcc.target/i386/avx512f-typecast-1.c: New test.\n\t* gcc.target/i386/avx512f-vpcmpequd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpequd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpequq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpequq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpged-1.c: Add new intrinsic.\n\t* gcc.target/i386/avx512f-vpcmpged-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpgeq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpgeq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpgeud-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpgeud-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpgeuq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpgeuq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpgtud-1.c: New test.\n\t* gcc.target/i386/avx512f-vpcmpgtud-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpgtuq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpgtuq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpled-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpled-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpleq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpleq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpleud-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpleud-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpleuq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpleuq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpltd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpltd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpltq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpltq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpltud-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpltud-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpltuq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpltuq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpneqd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpneqd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpneqq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpneqq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpnequd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpnequd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpnequq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpnequq-2.c: Ditto.\n\nFrom-SVN: r214019", "tree": {"sha": "5e33170e9f7e7e04073f2aa45b6a6c21dc91df80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e33170e9f7e7e04073f2aa45b6a6c21dc91df80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/275be1dac2866fa0e50a73ad36bdc45760796d63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/275be1dac2866fa0e50a73ad36bdc45760796d63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/275be1dac2866fa0e50a73ad36bdc45760796d63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/275be1dac2866fa0e50a73ad36bdc45760796d63/comments", "author": {"login": "TocarIP", "id": 16836375, "node_id": "MDQ6VXNlcjE2ODM2Mzc1", "avatar_url": "https://avatars.githubusercontent.com/u/16836375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TocarIP", "html_url": "https://github.com/TocarIP", "followers_url": "https://api.github.com/users/TocarIP/followers", "following_url": "https://api.github.com/users/TocarIP/following{/other_user}", "gists_url": "https://api.github.com/users/TocarIP/gists{/gist_id}", "starred_url": "https://api.github.com/users/TocarIP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TocarIP/subscriptions", "organizations_url": "https://api.github.com/users/TocarIP/orgs", "repos_url": "https://api.github.com/users/TocarIP/repos", "events_url": "https://api.github.com/users/TocarIP/events{/privacy}", "received_events_url": "https://api.github.com/users/TocarIP/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f613bc0fbe95a4eaa2abe38c7dd6c17e9e5de8bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f613bc0fbe95a4eaa2abe38c7dd6c17e9e5de8bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f613bc0fbe95a4eaa2abe38c7dd6c17e9e5de8bf"}], "stats": {"total": 1112, "additions": 1079, "deletions": 33}, "files": [{"sha": "59af3dfdd86ce6d7f312561cb7988a262e13c62e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -1,3 +1,78 @@\n+2014-08-15  Ilya Tocar  <tocarip@gmail.com>\n+\n+\tPR target/61878\n+\t* config/i386/avx512fintrin.h (_mm512_mask_cmpge_epi32_mask): New.\n+\t(_mm512_mask_cmpge_epu32_mask): Ditto.\n+\t(_mm512_cmpge_epu32_mask): Ditto.\n+\t(_mm512_mask_cmpge_epi64_mask): Ditto.\n+\t(_mm512_cmpge_epi64_mask): Ditto.\n+\t(_mm512_mask_cmpge_epu64_mask): Ditto.\n+\t(_mm512_cmpge_epu64_mask): Ditto.\n+\t(_mm512_mask_cmple_epi32_mask): Ditto.\n+\t(_mm512_cmple_epi32_mask): Ditto.\n+\t(_mm512_mask_cmple_epu32_mask): Ditto.\n+\t(_mm512_cmple_epu32_mask): Ditto.\n+\t(_mm512_mask_cmple_epi64_mask): Ditto.\n+\t(_mm512_cmple_epi64_mask): Ditto.\n+\t(_mm512_mask_cmple_epu64_mask): Ditto.\n+\t(_mm512_cmple_epu64_mask): Ditto.\n+\t(_mm512_mask_cmplt_epi32_mask): Ditto.\n+\t(_mm512_cmplt_epi32_mask): Ditto.\n+\t(_mm512_mask_cmplt_epu32_mask): Ditto.\n+\t(_mm512_cmplt_epu32_mask): Ditto.\n+\t(_mm512_mask_cmplt_epi64_mask): Ditto.\n+\t(_mm512_cmplt_epi64_mask): Ditto.\n+\t(_mm512_mask_cmplt_epu64_mask): Ditto.\n+\t(_mm512_cmplt_epu64_mask): Ditto.\n+\t(_mm512_mask_cmpneq_epi32_mask): Ditto.\n+\t(_mm512_mask_cmpneq_epu32_mask): Ditto.\n+\t(_mm512_cmpneq_epu32_mask): Ditto.\n+\t(_mm512_mask_cmpneq_epi64_mask): Ditto.\n+\t(_mm512_cmpneq_epi64_mask): Ditto.\n+\t(_mm512_mask_cmpneq_epu64_mask): Ditto.\n+\t(_mm512_cmpneq_epu64_mask): Ditto.\n+\t(_mm512_castpd_ps): Ditto.\n+\t(_mm512_castpd_si512): Ditto.\n+\t(_mm512_castps_pd): Ditto.\n+\t(_mm512_castps_si512): Ditto.\n+\t(_mm512_castsi512_ps): Ditto.\n+\t(_mm512_castsi512_pd): Ditto.\n+\t(_mm512_castpd512_pd128): Ditto.\n+\t(_mm512_castps512_ps128): Ditto.\n+\t(_mm512_castsi512_si128): Ditto.\n+\t(_mm512_castpd512_pd256): Ditto.\n+\t(_mm512_castps512_ps256): Ditto.\n+\t(_mm512_castsi512_si256): Ditto.\n+\t(_mm512_castpd128_pd512): Ditto.\n+\t(_mm512_castps128_ps512): Ditto.\n+\t(_mm512_castsi128_si512): Ditto.\n+\t(_mm512_castpd256_pd512): Ditto.\n+\t(_mm512_castps256_ps512): Ditto.\n+\t(_mm512_castsi256_si512): Ditto.\n+\t(_mm512_cmpeq_epu32_mask): Ditto.\n+\t(_mm512_mask_cmpeq_epu32_mask): Ditto.\n+\t(_mm512_mask_cmpeq_epu64_mask): Ditto.\n+\t(_mm512_cmpeq_epu64_mask): Ditto.\n+\t(_mm512_cmpgt_epu32_mask): Ditto.\n+\t(_mm512_mask_cmpgt_epu32_mask): Ditto.\n+\t(_mm512_mask_cmpgt_epu64_mask): Ditto.\n+\t(_mm512_cmpgt_epu64_mask): Ditto.\n+\t* config/i386/i386-builtin-types.def: Add V16SF_FTYPE_V8SF,\n+\tV16SI_FTYPE_V8SI, V16SI_FTYPE_V4SI, V8DF_FTYPE_V2DF.\n+\t* config/i386/i386.c (enum ix86_builtins): Add\n+\tIX86_BUILTIN_SI512_SI256, IX86_BUILTIN_PD512_PD256,\n+\tIX86_BUILTIN_PS512_PS256, IX86_BUILTIN_SI512_SI,\n+\tIX86_BUILTIN_PD512_PD, IX86_BUILTIN_PS512_PS.\n+\t(bdesc_args): Add __builtin_ia32_si512_256si,\n+\t__builtin_ia32_ps512_256ps, __builtin_ia32_pd512_256pd,\n+\t__builtin_ia32_si512_si, __builtin_ia32_ps512_ps,\n+\t__builtin_ia32_pd512_pd.\n+\t(ix86_expand_args_builtin): Handle new FTYPEs.\n+\t* config/i386/sse.md (castmode): Add 512-bit modes.\n+\t(AVX512MODE2P): New.\n+\t(avx512f_<castmode><avxsizesuffix>_<castmode): New.\n+\t(avx512f_<castmode><avxsizesuffix>_256<castmode): Ditto.\n+\n 2014-08-15  Richard Biener  <rguenther@suse.de>\n \n \t* fold-const.c (tree_swap_operands_p): Put all constants"}, {"sha": "3f362d4306151a5c01e78b28ceb30a24370ca78c", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 338, "deletions": 0, "changes": 338, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -8751,6 +8751,24 @@ _mm512_cmpge_epi32_mask (__m512i __X, __m512i __Y)\n \t\t\t\t\t\t    (__mmask16) -1);\n }\n \n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpge_epi32_mask (__mmask16 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask16) __builtin_ia32_cmpd512_mask ((__v16si) __X,\n+\t\t\t\t\t\t    (__v16si) __Y, 5,\n+\t\t\t\t\t\t    (__mmask16) __M);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpge_epu32_mask (__mmask16 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask16) __builtin_ia32_ucmpd512_mask ((__v16si) __X,\n+\t\t\t\t\t\t    (__v16si) __Y, 5,\n+\t\t\t\t\t\t    (__mmask16) __M);\n+}\n+\n extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_cmpge_epu32_mask (__m512i __X, __m512i __Y)\n@@ -8760,6 +8778,15 @@ _mm512_cmpge_epu32_mask (__m512i __X, __m512i __Y)\n \t\t\t\t\t\t    (__mmask16) -1);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpge_epi64_mask (__mmask8 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpq512_mask ((__v8di) __X,\n+\t\t\t\t\t\t    (__v8di) __Y, 5,\n+\t\t\t\t\t\t    (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_cmpge_epi64_mask (__m512i __X, __m512i __Y)\n@@ -8769,6 +8796,15 @@ _mm512_cmpge_epi64_mask (__m512i __X, __m512i __Y)\n \t\t\t\t\t\t    (__mmask8) -1);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpge_epu64_mask (__mmask8 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpq512_mask ((__v8di) __X,\n+\t\t\t\t\t\t    (__v8di) __Y, 5,\n+\t\t\t\t\t\t    (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_cmpge_epu64_mask (__m512i __X, __m512i __Y)\n@@ -8778,6 +8814,15 @@ _mm512_cmpge_epu64_mask (__m512i __X, __m512i __Y)\n \t\t\t\t\t\t    (__mmask8) -1);\n }\n \n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmple_epi32_mask (__mmask16 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask16) __builtin_ia32_cmpd512_mask ((__v16si) __X,\n+\t\t\t\t\t\t    (__v16si) __Y, 2,\n+\t\t\t\t\t\t    (__mmask16) __M);\n+}\n+\n extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_cmple_epi32_mask (__m512i __X, __m512i __Y)\n@@ -8787,6 +8832,15 @@ _mm512_cmple_epi32_mask (__m512i __X, __m512i __Y)\n \t\t\t\t\t\t    (__mmask16) -1);\n }\n \n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmple_epu32_mask (__mmask16 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask16) __builtin_ia32_ucmpd512_mask ((__v16si) __X,\n+\t\t\t\t\t\t    (__v16si) __Y, 2,\n+\t\t\t\t\t\t    (__mmask16) __M);\n+}\n+\n extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_cmple_epu32_mask (__m512i __X, __m512i __Y)\n@@ -8796,6 +8850,15 @@ _mm512_cmple_epu32_mask (__m512i __X, __m512i __Y)\n \t\t\t\t\t\t    (__mmask16) -1);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmple_epi64_mask (__mmask8 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpq512_mask ((__v8di) __X,\n+\t\t\t\t\t\t    (__v8di) __Y, 2,\n+\t\t\t\t\t\t    (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_cmple_epi64_mask (__m512i __X, __m512i __Y)\n@@ -8805,6 +8868,15 @@ _mm512_cmple_epi64_mask (__m512i __X, __m512i __Y)\n \t\t\t\t\t\t    (__mmask8) -1);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmple_epu64_mask (__mmask8 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpq512_mask ((__v8di) __X,\n+\t\t\t\t\t\t    (__v8di) __Y, 2,\n+\t\t\t\t\t\t    (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_cmple_epu64_mask (__m512i __X, __m512i __Y)\n@@ -8814,6 +8886,15 @@ _mm512_cmple_epu64_mask (__m512i __X, __m512i __Y)\n \t\t\t\t\t\t    (__mmask8) -1);\n }\n \n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmplt_epi32_mask (__mmask16 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask16) __builtin_ia32_cmpd512_mask ((__v16si) __X,\n+\t\t\t\t\t\t    (__v16si) __Y, 1,\n+\t\t\t\t\t\t    (__mmask16) __M);\n+}\n+\n extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_cmplt_epi32_mask (__m512i __X, __m512i __Y)\n@@ -8823,6 +8904,15 @@ _mm512_cmplt_epi32_mask (__m512i __X, __m512i __Y)\n \t\t\t\t\t\t    (__mmask16) -1);\n }\n \n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmplt_epu32_mask (__mmask16 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask16) __builtin_ia32_ucmpd512_mask ((__v16si) __X,\n+\t\t\t\t\t\t    (__v16si) __Y, 1,\n+\t\t\t\t\t\t    (__mmask16) __M);\n+}\n+\n extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_cmplt_epu32_mask (__m512i __X, __m512i __Y)\n@@ -8832,6 +8922,15 @@ _mm512_cmplt_epu32_mask (__m512i __X, __m512i __Y)\n \t\t\t\t\t\t    (__mmask16) -1);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmplt_epi64_mask (__mmask8 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpq512_mask ((__v8di) __X,\n+\t\t\t\t\t\t    (__v8di) __Y, 1,\n+\t\t\t\t\t\t    (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_cmplt_epi64_mask (__m512i __X, __m512i __Y)\n@@ -8841,6 +8940,15 @@ _mm512_cmplt_epi64_mask (__m512i __X, __m512i __Y)\n \t\t\t\t\t\t    (__mmask8) -1);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmplt_epu64_mask (__mmask8 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpq512_mask ((__v8di) __X,\n+\t\t\t\t\t\t    (__v8di) __Y, 1,\n+\t\t\t\t\t\t    (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_cmplt_epu64_mask (__m512i __X, __m512i __Y)\n@@ -8859,6 +8967,24 @@ _mm512_cmpneq_epi32_mask (__m512i __X, __m512i __Y)\n \t\t\t\t\t\t    (__mmask16) -1);\n }\n \n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpneq_epi32_mask (__mmask16 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask16) __builtin_ia32_cmpd512_mask ((__v16si) __X,\n+\t\t\t\t\t\t    (__v16si) __Y, 4,\n+\t\t\t\t\t\t    (__mmask16) __M);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpneq_epu32_mask (__mmask16 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask16) __builtin_ia32_ucmpd512_mask ((__v16si) __X,\n+\t\t\t\t\t\t    (__v16si) __Y, 4,\n+\t\t\t\t\t\t    (__mmask16) __M);\n+}\n+\n extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_cmpneq_epu32_mask (__m512i __X, __m512i __Y)\n@@ -8868,6 +8994,15 @@ _mm512_cmpneq_epu32_mask (__m512i __X, __m512i __Y)\n \t\t\t\t\t\t    (__mmask16) -1);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpneq_epi64_mask (__mmask16 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmpq512_mask ((__v8di) __X,\n+\t\t\t\t\t\t    (__v8di) __Y, 4,\n+\t\t\t\t\t\t    (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_cmpneq_epi64_mask (__m512i __X, __m512i __Y)\n@@ -8877,6 +9012,15 @@ _mm512_cmpneq_epi64_mask (__m512i __X, __m512i __Y)\n \t\t\t\t\t\t    (__mmask8) -1);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpneq_epu64_mask (__mmask8 __M, __m512i __X, __m512i __Y)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpq512_mask ((__v8di) __X,\n+\t\t\t\t\t\t    (__v8di) __Y, 4,\n+\t\t\t\t\t\t    (__mmask8) __M);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_cmpneq_epu64_mask (__m512i __X, __m512i __Y)\n@@ -12907,6 +13051,200 @@ _mm512_kmov (__mmask16 __A)\n   return __builtin_ia32_kmov16 (__A);\n }\n \n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_castpd_ps (__m512d __A)\n+{\n+  return (__m512) (__A);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_castpd_si512 (__m512d __A)\n+{\n+  return (__m512i) (__A);\n+}\n+\n+extern __inline __m512d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_castps_pd (__m512 __A)\n+{\n+  return (__m512d) (__A);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_castps_si512 (__m512 __A)\n+{\n+  return (__m512i) (__A);\n+}\n+\n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_castsi512_ps (__m512i __A)\n+{\n+  return (__m512) (__A);\n+}\n+\n+extern __inline __m512d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_castsi512_pd (__m512i __A)\n+{\n+  return (__m512d) (__A);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_castpd512_pd128 (__m512d __A)\n+{\n+  return (__m128d)_mm512_extractf32x4_ps((__m512)__A, 0);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_castps512_ps128 (__m512 __A)\n+{\n+  return _mm512_extractf32x4_ps(__A, 0);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_castsi512_si128 (__m512i __A)\n+{\n+  return (__m128i)_mm512_extracti32x4_epi32((__m512i)__A, 0);\n+}\n+\n+extern __inline __m256d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_castpd512_pd256 (__m512d __A)\n+{\n+  return _mm512_extractf64x4_pd(__A, 0);\n+}\n+\n+extern __inline __m256\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_castps512_ps256 (__m512 __A)\n+{\n+  return (__m256)_mm512_extractf64x4_pd((__m512d)__A, 0);\n+}\n+\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_castsi512_si256 (__m512i __A)\n+{\n+  return (__m256i)_mm512_extractf64x4_pd((__m512d)__A, 0);\n+}\n+\n+extern __inline __m512d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_castpd128_pd512 (__m128d __A)\n+{\n+  return (__m512d) __builtin_ia32_pd512_pd((__m128d)__A);\n+}\n+\n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_castps128_ps512 (__m128 __A)\n+{\n+  return (__m512) __builtin_ia32_ps512_ps((__m128)__A);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_castsi128_si512 (__m128i __A)\n+{\n+  return (__m512i) __builtin_ia32_si512_si((__v4si)__A);\n+}\n+\n+extern __inline __m512d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_castpd256_pd512 (__m256d __A)\n+{\n+  return __builtin_ia32_pd512_256pd (__A);\n+}\n+\n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_castps256_ps512 (__m256 __A)\n+{\n+  return __builtin_ia32_ps512_256ps (__A);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_castsi256_si512 (__m256i __A)\n+{\n+  return (__m512i)__builtin_ia32_si512_256si ((__v8si)__A);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpeq_epu32_mask (__m512i __A, __m512i __B)\n+{\n+  return (__mmask16) __builtin_ia32_ucmpd512_mask ((__v16si) __A,\n+\t\t\t\t\t\t     (__v16si) __B, 0,\n+\t\t\t\t\t\t     (__mmask16) -1);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpeq_epu32_mask (__mmask16 __U, __m512i __A, __m512i __B)\n+{\n+  return (__mmask16) __builtin_ia32_ucmpd512_mask ((__v16si) __A,\n+\t\t\t\t\t\t     (__v16si) __B, 0, __U);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpeq_epu64_mask (__mmask8 __U, __m512i __A, __m512i __B)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpq512_mask ((__v8di) __A,\n+\t\t\t\t\t\t    (__v8di) __B, 0, __U);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpeq_epu64_mask (__m512i __A, __m512i __B)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpq512_mask ((__v8di) __A,\n+\t\t\t\t\t\t    (__v8di) __B, 0,\n+\t\t\t\t\t\t    (__mmask8) -1);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpgt_epu32_mask (__m512i __A, __m512i __B)\n+{\n+  return (__mmask16) __builtin_ia32_ucmpd512_mask ((__v16si) __A,\n+\t\t\t\t\t\t     (__v16si) __B, 6,\n+\t\t\t\t\t\t     (__mmask16) -1);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpgt_epu32_mask (__mmask16 __U, __m512i __A, __m512i __B)\n+{\n+  return (__mmask16) __builtin_ia32_ucmpd512_mask ((__v16si) __A,\n+\t\t\t\t\t\t     (__v16si) __B, 6,  __U);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpgt_epu64_mask (__mmask8 __U, __m512i __A, __m512i __B)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpq512_mask ((__v8di) __A,\n+\t\t\t\t\t\t    (__v8di) __B, 6, __U);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpgt_epu64_mask (__m512i __A, __m512i __B)\n+{\n+  return (__mmask8) __builtin_ia32_ucmpq512_mask ((__v8di) __A,\n+\t\t\t\t\t\t    (__v8di) __B, 6,\n+\t\t\t\t\t\t    (__mmask8) -1);\n+}\n+\n #ifdef __DISABLE_AVX512F__\n #undef __DISABLE_AVX512F__\n #pragma GCC pop_options"}, {"sha": "916128707fa41bf0449564912b91ebef97b59ddd", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -273,14 +273,18 @@ DEF_FUNCTION_TYPE (V16SI, INT)\n DEF_FUNCTION_TYPE (V8DF, DOUBLE)\n DEF_FUNCTION_TYPE (V8DI, INT64)\n DEF_FUNCTION_TYPE (V16SF, V4SF)\n+DEF_FUNCTION_TYPE (V16SF, V8SF)\n DEF_FUNCTION_TYPE (V8DF, V4DF)\n+DEF_FUNCTION_TYPE (V8DF, V2DF)\n DEF_FUNCTION_TYPE (V8DI, V4DI)\n DEF_FUNCTION_TYPE (V16QI, V8DI)\n DEF_FUNCTION_TYPE (UINT, V4SF)\n DEF_FUNCTION_TYPE (UINT64, V4SF)\n DEF_FUNCTION_TYPE (UINT, V2DF)\n DEF_FUNCTION_TYPE (UINT64, V2DF)\n DEF_FUNCTION_TYPE (V16SI, V16SI)\n+DEF_FUNCTION_TYPE (V16SI, V4SI)\n+DEF_FUNCTION_TYPE (V16SI, V8SI)\n DEF_FUNCTION_TYPE (V16SI, V16SI, V16SI, HI)\n DEF_FUNCTION_TYPE (V8DI, V8DI)\n DEF_FUNCTION_TYPE (V8DI, V8DI, V8DI, QI)"}, {"sha": "da80787c4a16f4253be6c395ae69abc9dcff65c1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -28121,6 +28121,12 @@ enum ix86_builtins\n   IX86_BUILTIN_GATHERDIV8SI,\n \n   /* AVX512F */\n+  IX86_BUILTIN_SI512_SI256,\n+  IX86_BUILTIN_PD512_PD256,\n+  IX86_BUILTIN_PS512_PS256,\n+  IX86_BUILTIN_SI512_SI,\n+  IX86_BUILTIN_PD512_PD,\n+  IX86_BUILTIN_PS512_PS,\n   IX86_BUILTIN_ADDPD512,\n   IX86_BUILTIN_ADDPS512,\n   IX86_BUILTIN_ADDSD_ROUND,\n@@ -30018,6 +30024,12 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_BMI2, CODE_FOR_bmi2_pext_di3, \"__builtin_ia32_pext_di\", IX86_BUILTIN_PEXT64, UNKNOWN, (int) UINT64_FTYPE_UINT64_UINT64 },\n \n   /* AVX512F */\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_si512_256si, \"__builtin_ia32_si512_256si\", IX86_BUILTIN_SI512_SI256, UNKNOWN, (int) V16SI_FTYPE_V8SI },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_ps512_256ps, \"__builtin_ia32_ps512_256ps\", IX86_BUILTIN_PS512_PS256, UNKNOWN, (int) V16SF_FTYPE_V8SF },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_pd512_256pd, \"__builtin_ia32_pd512_256pd\", IX86_BUILTIN_PD512_PD256, UNKNOWN, (int) V8DF_FTYPE_V4DF },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_si512_si, \"__builtin_ia32_si512_si\", IX86_BUILTIN_SI512_SI, UNKNOWN, (int) V16SI_FTYPE_V4SI },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_ps512_ps, \"__builtin_ia32_ps512_ps\", IX86_BUILTIN_PS512_PS, UNKNOWN, (int) V16SF_FTYPE_V4SF },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_pd512_pd, \"__builtin_ia32_pd512_pd\", IX86_BUILTIN_PD512_PD, UNKNOWN, (int) V8DF_FTYPE_V2DF },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_alignv16si_mask, \"__builtin_ia32_alignd512_mask\", IX86_BUILTIN_ALIGND512, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_INT_V16SI_HI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_alignv8di_mask, \"__builtin_ia32_alignq512_mask\", IX86_BUILTIN_ALIGNQ512, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_INT_V8DI_QI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_blendmv16si, \"__builtin_ia32_blendmd_512_mask\", IX86_BUILTIN_BLENDMD512, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_HI },\n@@ -33655,7 +33667,10 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V16SI_FTYPE_V16SI:\n     case V16SI_FTYPE_INT:\n     case V16SF_FTYPE_FLOAT:\n+    case V16SF_FTYPE_V8SF:\n+    case V16SI_FTYPE_V8SI:\n     case V16SF_FTYPE_V4SF:\n+    case V16SI_FTYPE_V4SI:\n     case V16SF_FTYPE_V16SF:\n     case V8HI_FTYPE_V8DI:\n     case V8UHI_FTYPE_V8UHI:\n@@ -33668,6 +33683,7 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V8DI_FTYPE_V8DI:\n     case V8DF_FTYPE_DOUBLE:\n     case V8DF_FTYPE_V4DF:\n+    case V8DF_FTYPE_V2DF:\n     case V8DF_FTYPE_V8DF:\n     case V8DF_FTYPE_V8SI:\n       nargs = 1;"}, {"sha": "d6155cf6b46f9396c69b965095cee2709caf0afb", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -637,7 +637,9 @@\n   [(V16QI \"7\") (V8HI \"15\") (V4SI \"31\") (V2DI \"63\")])\n \n ;; Mapping of mode to cast intrinsic name\n-(define_mode_attr castmode [(V8SI \"si\") (V8SF \"ps\") (V4DF \"pd\")])\n+(define_mode_attr castmode\n+ [(V8SI \"si\") (V8SF \"ps\") (V4DF \"pd\")\n+  (V16SI \"si\") (V16SF \"ps\") (V8DF \"pd\")])\n \n ;; Instruction suffix for sign and zero extensions.\n (define_code_attr extsuffix [(sign_extend \"sx\") (zero_extend \"zx\")])\n@@ -651,6 +653,7 @@\n \n ;; Mix-n-match\n (define_mode_iterator AVX256MODE2P [V8SI V8SF V4DF])\n+(define_mode_iterator AVX512MODE2P [V16SI V16SF V8DF])\n \n ;; Mapping for dbpsabbw modes\n (define_mode_attr dbpsadbwmode\n@@ -15717,3 +15720,43 @@\n   [(set_attr \"type\" \"sselog1\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n+\n+(define_insn_and_split \"avx512f_<castmode><avxsizesuffix>_<castmode>\"\n+  [(set (match_operand:AVX512MODE2P 0 \"nonimmediate_operand\" \"=x,m\")\n+\t(unspec:AVX512MODE2P\n+\t  [(match_operand:<ssequartermode> 1 \"nonimmediate_operand\" \"xm,x\")]\n+\t  UNSPEC_CAST))]\n+  \"TARGET_AVX512F\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+{\n+  rtx op0 = operands[0];\n+  rtx op1 = operands[1];\n+  if (REG_P (op0))\n+    op0 = gen_rtx_REG (<ssequartermode>mode, REGNO (op0));\n+  else\n+    op1 = gen_rtx_REG (<MODE>mode, REGNO (op1));\n+  emit_move_insn (op0, op1);\n+  DONE;\n+})\n+\n+(define_insn_and_split \"avx512f_<castmode><avxsizesuffix>_256<castmode>\"\n+  [(set (match_operand:AVX512MODE2P 0 \"nonimmediate_operand\" \"=x,m\")\n+\t(unspec:AVX512MODE2P\n+\t  [(match_operand:<ssehalfvecmode> 1 \"nonimmediate_operand\" \"xm,x\")]\n+\t  UNSPEC_CAST))]\n+  \"TARGET_AVX512F\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+{\n+  rtx op0 = operands[0];\n+  rtx op1 = operands[1];\n+  if (REG_P (op0))\n+    op0 = gen_rtx_REG (<ssehalfvecmode>mode, REGNO (op0));\n+  else\n+    op1 = gen_rtx_REG (<MODE>mode, REGNO (op1));\n+  emit_move_insn (op0, op1);\n+  DONE;\n+})"}, {"sha": "f783027678de46c8a19c9b64adc2a3628198de27", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -1,3 +1,48 @@\n+2014-08-15  Ilya Tocar  <tocarip@gmail.com>\n+\n+\tPR target/61878\n+\t* gcc.target/i386/avx512f-typecast-1.c: New test.\n+\t* gcc.target/i386/avx512f-vpcmpequd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpequd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpequq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpequq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpged-1.c: Add new intrinsic.\n+\t* gcc.target/i386/avx512f-vpcmpged-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpgeq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpgeq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpgeud-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpgeud-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpgeuq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpgeuq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpgtud-1.c: New test.\n+\t* gcc.target/i386/avx512f-vpcmpgtud-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpgtuq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpgtuq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpled-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpled-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpleq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpleq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpleud-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpleud-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpleuq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpleuq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpltd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpltd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpltq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpltq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpltud-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpltud-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpltuq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpltuq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpneqd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpneqd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpneqq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpneqq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpnequd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpnequd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpnequq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpnequq-2.c: Ditto.\n+\n 2014-08-15  Jakub Jelinek  <jakub@redhat.com>\n \t    Tobias Burnus  <burnus@net-b.de>\n "}, {"sha": "60243d66ad12d32acb86f47c6e122cd7995ba407", "filename": "gcc/testsuite/gcc.target/i386/avx512f-typecast-1.c", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-typecast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-typecast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-typecast-1.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -0,0 +1,118 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+\n+void\n+avx512f_test (void)\n+{\n+  union512i_d  a, ad;\n+  union512  b, bd;\n+  union512d  c, cd;\n+  union256i_d  d, dd;\n+  union256  e, ed;\n+  union256d  f, fd;\n+  union128i_d  g, gd;\n+  union128  h, hd;\n+  union128d  k, kd;\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      a.a[i] = 7146908634 + i;\n+      b.a[i] = 45.12f + i;\n+    }\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      c.a[i] = 41234512513451345.0905 + i;\n+      d.a[i] = 109534 + i;\n+      e.a[i] = 85034.095f + i;\n+    }\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      f.a[i] = 41234512451345.0905 + i;\n+      g.a[i] = 71469086341 + i;\n+      h.a[i] = 45.1264f + i;\n+    }\n+\n+  for (i = 0; i < 2; i++)\n+    {\n+      k.a[i] = 7146908634.576 + i;\n+    }\n+\n+  bd.x = _mm512_castpd_ps (c.x);\n+  if (memcmp(bd.a, c.a, 64))\n+    abort ();\n+\n+  ad.x = _mm512_castpd_si512 (c.x);\n+  if (memcmp(ad.a, c.a, 64))\n+    abort ();\n+\n+  cd.x = _mm512_castps_pd (b.x);\n+  if (memcmp(cd.a, b.a, 64))\n+    abort ();\n+\n+  ad.x = _mm512_castps_si512 (b.x);\n+  if (memcmp(ad.a, b.a, 64))\n+    abort ();\n+\n+  bd.x = _mm512_castsi512_ps (a.x);\n+  if (memcmp(bd.a, a.a, 64))\n+    abort ();\n+\n+  cd.x = _mm512_castsi512_pd (a.x);\n+  if (memcmp(cd.a, a.a, 64))\n+    abort ();\n+\n+  kd.x = _mm512_castpd512_pd128 (c.x);\n+  if (memcmp(kd.a, c.a, 16))\n+    abort ();\n+\n+  hd.x = _mm512_castps512_ps128 (b.x);\n+  if (memcmp(hd.a, b.a, 16))\n+    abort ();\n+\n+  gd.x = _mm512_castsi512_si128 (a.x);\n+  if (memcmp(gd.a, a.a, 16))\n+    abort ();\n+\n+  fd.x = _mm512_castpd512_pd256 (c.x);\n+  if (memcmp(fd.a, c.a, 32))\n+    abort ();\n+\n+  ed.x = _mm512_castps512_ps256 (b.x);\n+  if (memcmp(ed.a, b.a, 32))\n+    abort ();\n+\n+  dd.x = _mm512_castsi512_si256 (a.x);\n+  if (memcmp(dd.a, a.a, 32))\n+    abort ();\n+\n+  cd.x = _mm512_castpd128_pd512 (k.x);\n+  if (memcmp(cd.a, k.a, 16))\n+    abort ();\n+\n+  bd.x = _mm512_castps128_ps512 (h.x);\n+  if (memcmp(bd.a, h.a, 16))\n+    abort ();\n+\n+  ad.x = _mm512_castsi128_si512 (g.x);\n+  if (memcmp(ad.a, g.a, 16))\n+    abort ();\n+\n+  cd.x = _mm512_castpd256_pd512 (f.x);\n+  if (memcmp(cd.a, f.a, 32))\n+    abort ();\n+\n+  bd.x = _mm512_castps256_ps512 (e.x);\n+  if (memcmp(bd.a, e.a, 32))\n+    abort ();\n+\n+  ad.x = _mm512_castsi256_si512 (d.x);\n+  if (memcmp(ad.a, d.a, 32))\n+    abort ();\n+}"}, {"sha": "8ef65f6a598f0c5782c5aeff0acb75ae6cd17593", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpequd-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpequd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpequd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpequd-1.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\{\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  m = _mm512_cmpeq_epu32_mask (x, x);\n+  m = _mm512_mask_cmpeq_epu32_mask (3, x, x);\n+}"}, {"sha": "95ed31878be9b7ef163d683aaad0595a22d541a6", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpequd-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpequd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpequd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpequd-2.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (MASK_TYPE *r, unsigned int *s1, unsigned int *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] == s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_d) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  res1 = 0;\n+  res2 = 0;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmpeq_epu32_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmpeq_epu32_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res_ref != res2)\n+    abort ();\n+}"}, {"sha": "b04a1073649479cfc4fb51e4fa26aabfc106d083", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpequq-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpequq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpequq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpequq-1.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\{\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  m = _mm512_cmpeq_epu64_mask (x, x);\n+  m = _mm512_mask_cmpeq_epu64_mask (3, x, x);\n+}"}, {"sha": "a72a9322b36232aaea39d76655658768b4637a0c", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpequq-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpequq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpequq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpequq-2.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (MASK_TYPE *r, unsigned long long *s1, unsigned long long *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] == s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_q) src1, src2;\n+  MASK_TYPE res1, res2, res_ref;\n+  MASK_TYPE mask = MASK_VALUE;\n+  res1 = 0;\n+  res2 = 0;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmpeq_epu64_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmpeq_epu64_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res1 != res_ref)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res2 != res_ref)\n+    abort ();\n+}"}, {"sha": "3d2b1731cfef655aed46b86208fa2833080c9c82", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpged-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpged-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpged-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpged-1.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\{\" 1 } } */\n \n #include <immintrin.h>\n \n@@ -11,4 +12,5 @@ void extern\n avx512f_test (void)\n {\n   m = _mm512_cmpge_epi32_mask (x, x);\n+  m = _mm512_mask_cmpge_epi32_mask (m, x, x);\n }"}, {"sha": "906a0dbc28a1a9a016d08b1f8dbfbd9807315a26", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpged-2.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpged-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpged-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpged-2.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -26,7 +26,7 @@ TEST (void)\n {\n   int i;\n   UNION_TYPE (AVX512F_LEN, i_d) src1, src2;\n-  MASK_TYPE res_ref, res1;\n+  MASK_TYPE res_ref, res1, res2;\n   res1 = 0;\n \n   for (i = 0; i < SIZE / 2; i++)\n@@ -38,9 +38,15 @@ TEST (void)\n     }\n \n   res1 = INTRINSIC (_cmpge_epi32_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmpge_epi32_mask) (MASK_VALUE, src1.x, src2.x);\n \n   CALC (&res_ref, src1.a, src2.a);\n \n   if (res_ref != res1)\n     abort ();\n+\n+  res_ref &= MASK_VALUE;\n+\n+  if (res_ref != res2)\n+    abort ();\n }"}, {"sha": "dde035cc1cd8cda8968d164a7a960916c618d40e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpgeq-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeq-1.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\{\" 1 } } */\n \n #include <immintrin.h>\n \n@@ -11,4 +12,5 @@ void extern\n avx512f_test (void)\n {\n   m = _mm512_cmpge_epi64_mask (x, x);\n+  m = _mm512_mask_cmpge_epi64_mask (m, x, x);\n }"}, {"sha": "8ff390119b384b9c31cb3c7e60fb459fb009d320", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpgeq-2.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeq-2.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -26,7 +26,7 @@ TEST (void)\n {\n   int i;\n   UNION_TYPE (AVX512F_LEN, i_q) src1, src2;\n-  MASK_TYPE res1, res_ref;\n+  MASK_TYPE res1, res_ref, res2;\n   res1 = 0;\n \n   for (i = 0; i < SIZE / 2; i++)\n@@ -38,9 +38,15 @@ TEST (void)\n     }\n \n   res1 = INTRINSIC (_cmpge_epi64_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmpge_epi64_mask) (MASK_VALUE, src1.x, src2.x);\n \n   CALC (&res_ref, src1.a, src2.a);\n \n   if (res1 != res_ref)\n     abort ();\n+\n+  res_ref &= MASK_VALUE;\n+\n+  if (res2 != res_ref)\n+    abort ();\n }"}, {"sha": "cb26b33382afbe887d2bc312d8e9798b4c565256", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpgeud-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeud-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeud-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeud-1.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\{\" 1 } } */\n \n #include <immintrin.h>\n \n@@ -11,4 +12,5 @@ void extern\n avx512f_test (void)\n {\n   m = _mm512_cmpge_epu32_mask (x, x);\n+  m = _mm512_mask_cmpge_epu32_mask (m, x, x);\n }"}, {"sha": "3af07b16ec6fda54271ac22ea33f373355de08de", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpgeud-2.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeud-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeud-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeud-2.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -26,7 +26,7 @@ TEST (void)\n {\n   int i;\n   UNION_TYPE (AVX512F_LEN, i_d) src1, src2;\n-  MASK_TYPE res_ref, res1;\n+  MASK_TYPE res_ref, res1, res2;\n   res1 = 0;\n \n   for (i = 0; i < SIZE / 2; i++)\n@@ -38,9 +38,15 @@ TEST (void)\n     }\n \n   res1 = INTRINSIC (_cmpge_epu32_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmpge_epu32_mask) (MASK_VALUE, src1.x, src2.x);\n \n   CALC (&res_ref, src1.a, src2.a);\n \n   if (res_ref != res1)\n     abort ();\n+\n+  res_ref &= MASK_VALUE;\n+\n+  if (res_ref != res2)\n+    abort ();\n }"}, {"sha": "4f71dabc7369ef92c56dcc50604323ee11dcd201", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpgeuq-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeuq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeuq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeuq-1.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\{\" 1 } } */\n \n #include <immintrin.h>\n \n@@ -11,4 +12,5 @@ void extern\n avx512f_test (void)\n {\n   m = _mm512_cmpge_epu64_mask (x, x);\n+  m = _mm512_mask_cmpge_epu64_mask (m, x, x);\n }"}, {"sha": "bd776bdf60364c628beea6a19051dac2974660b7", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpgeuq-2.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeuq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeuq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgeuq-2.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -26,7 +26,7 @@ TEST (void)\n {\n   int i;\n   UNION_TYPE (AVX512F_LEN, i_q) src1, src2;\n-  MASK_TYPE res1, res_ref;\n+  MASK_TYPE res1, res_ref, res2;\n   res1 = 0;\n \n   for (i = 0; i < SIZE / 2; i++)\n@@ -38,9 +38,15 @@ TEST (void)\n     }\n \n   res1 = INTRINSIC (_cmpge_epu64_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmpge_epu64_mask) (MASK_VALUE, src1.x, src2.x);\n \n   CALC (&res_ref, src1.a, src2.a);\n \n   if (res1 != res_ref)\n     abort ();\n+\n+  res_ref &= MASK_VALUE;\n+\n+  if (res2 != res_ref)\n+    abort ();\n }"}, {"sha": "cce93ae2520b76c9900529850f75938034651e1e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpgtud-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgtud-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgtud-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgtud-1.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\{\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  m = _mm512_cmpgt_epu32_mask (x, x);\n+  m = _mm512_mask_cmpgt_epu32_mask (3, x, x);\n+}"}, {"sha": "5c65c81e14b2c5911388f7bebbc3be42c02badbf", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpgtud-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgtud-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgtud-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgtud-2.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (MASK_TYPE *r, unsigned int *s1, unsigned int *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] > s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_d) src1, src2;\n+  MASK_TYPE res_ref, res1, res2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  res1 = 0;\n+  res2 = 0;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmpgt_epu32_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmpgt_epu32_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res_ref != res1)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res_ref != res2)\n+    abort ();\n+}"}, {"sha": "0bf4d1aa834f207a1bac1e315e4c6e9ce2c63144", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpgtuq-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgtuq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgtuq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgtuq-1.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\{\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  m = _mm512_cmpgt_epu64_mask (x, x);\n+  m = _mm512_mask_cmpgt_epu64_mask (3, x, x);\n+}"}, {"sha": "c8d019c775d8afc84b4e4545fb769cd765c8a3b9", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpgtuq-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgtuq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgtuq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgtuq-2.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (MASK_TYPE *r, unsigned long long *s1, unsigned long long *s2)\n+{\n+  int i;\n+  *r = 0;\n+  MASK_TYPE one = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    if (s1[i] > s2[i])\n+      *r = *r | (one << i);\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_q) src1, src2;\n+  MASK_TYPE res1, res2, res_ref;\n+  MASK_TYPE mask = MASK_VALUE;\n+  res1 = 0;\n+  res2 = 0;\n+\n+  for (i = 0; i < SIZE / 2; i++)\n+    {\n+      src1.a[i * 2] = i;\n+      src1.a[i * 2 + 1] = i * i;\n+      src2.a[i * 2] = 2 * i;\n+      src2.a[i * 2 + 1] = i * i;\n+    }\n+\n+  res1 = INTRINSIC (_cmpgt_epu64_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmpgt_epu64_mask) (mask, src1.x, src2.x);\n+\n+  CALC (&res_ref, src1.a, src2.a);\n+\n+  if (res1 != res_ref)\n+    abort ();\n+\n+  res_ref &= mask;\n+\n+  if (res2 != res_ref)\n+    abort ();\n+}"}, {"sha": "5cd6efb80a6268bc448826520839ad358703c133", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpled-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpled-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpled-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpled-1.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\{\" 1 } } */\n \n #include <immintrin.h>\n \n@@ -11,4 +12,5 @@ void extern\n avx512f_test (void)\n {\n   m = _mm512_cmple_epi32_mask (x, x);\n+  m = _mm512_mask_cmple_epi32_mask (m, x, x);\n }"}, {"sha": "a116a6cbdde791d7cf5ed116f8b38339687dc707", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpled-2.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpled-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpled-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpled-2.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -26,7 +26,7 @@ TEST (void)\n {\n   int i;\n   UNION_TYPE (AVX512F_LEN, i_d) src1, src2;\n-  MASK_TYPE res_ref, res1;\n+  MASK_TYPE res_ref, res1, res2;\n   res1 = 0;\n \n   for (i = 0; i < SIZE / 2; i++)\n@@ -38,9 +38,15 @@ TEST (void)\n     }\n \n   res1 = INTRINSIC (_cmple_epi32_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmple_epi32_mask) (MASK_VALUE, src1.x, src2.x);\n \n   CALC (&res_ref, src1.a, src2.a);\n \n   if (res_ref != res1)\n     abort ();\n+\n+  res_ref &= MASK_VALUE;\n+\n+  if (res_ref != res2)\n+    abort ();\n }"}, {"sha": "a93ec4bb346105caa5bbfff6f80f468f3dce0a36", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpleq-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleq-1.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\{\" 1 } } */\n \n #include <immintrin.h>\n \n@@ -11,4 +12,5 @@ void extern\n avx512f_test (void)\n {\n   m = _mm512_cmple_epi64_mask (x, x);\n+  m = _mm512_mask_cmple_epi64_mask (m, x, x);\n }"}, {"sha": "f6fec983107604e5f629e33e587f5174c814de97", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpleq-2.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleq-2.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -26,7 +26,7 @@ TEST (void)\n {\n   int i;\n   UNION_TYPE (AVX512F_LEN, i_q) src1, src2;\n-  MASK_TYPE res1, res_ref;\n+  MASK_TYPE res1, res_ref, res2;\n   res1 = 0;\n \n   for (i = 0; i < SIZE / 2; i++)\n@@ -38,9 +38,15 @@ TEST (void)\n     }\n \n   res1 = INTRINSIC (_cmple_epi64_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmple_epi64_mask) (MASK_VALUE, src1.x, src2.x);\n \n   CALC (&res_ref, src1.a, src2.a);\n \n   if (res1 != res_ref)\n     abort ();\n+\n+  res_ref &= MASK_VALUE;\n+\n+  if (res2 != res_ref)\n+    abort ();\n }"}, {"sha": "0912fbd73ca57ddfc1f4573767a98749682d6a67", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpleud-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleud-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleud-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleud-1.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\{\" 1 } } */\n \n #include <immintrin.h>\n \n@@ -11,4 +12,5 @@ void extern\n avx512f_test (void)\n {\n   m = _mm512_cmple_epu32_mask (x, x);\n+  m = _mm512_mask_cmple_epu32_mask (m, x, x);\n }"}, {"sha": "ab6ea7e2c1b1e1a50a14593f4f52de19c081368b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpleud-2.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleud-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleud-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleud-2.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -26,7 +26,7 @@ TEST (void)\n {\n   int i;\n   UNION_TYPE (AVX512F_LEN, i_d) src1, src2;\n-  MASK_TYPE res_ref, res1;\n+  MASK_TYPE res_ref, res1, res2;\n   res1 = 0;\n \n   for (i = 0; i < SIZE / 2; i++)\n@@ -38,9 +38,15 @@ TEST (void)\n     }\n \n   res1 = INTRINSIC (_cmple_epu32_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmple_epu32_mask) (MASK_VALUE, src1.x, src2.x);\n \n   CALC (&res_ref, src1.a, src2.a);\n \n   if (res_ref != res1)\n     abort ();\n+\n+  res_ref &= MASK_VALUE;\n+\n+  if (res_ref != res2)\n+    abort ();\n }"}, {"sha": "bfe3e4cfb2da577c7a031acfd186881e5d4f3b3a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpleuq-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleuq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleuq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleuq-1.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\{\" 1 } } */\n \n #include <immintrin.h>\n \n@@ -11,4 +12,5 @@ void extern\n avx512f_test (void)\n {\n   m = _mm512_cmple_epu64_mask (x, x);\n+  m = _mm512_mask_cmple_epu64_mask (m, x, x);\n }"}, {"sha": "6154134826f451e403452477c3c3f899a954840d", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpleuq-2.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleuq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleuq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpleuq-2.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -26,7 +26,7 @@ TEST (void)\n {\n   int i;\n   UNION_TYPE (AVX512F_LEN, i_q) src1, src2;\n-  MASK_TYPE res1, res_ref;\n+  MASK_TYPE res1, res_ref, res2;\n   res1 = 0;\n \n   for (i = 0; i < SIZE / 2; i++)\n@@ -38,9 +38,15 @@ TEST (void)\n     }\n \n   res1 = INTRINSIC (_cmple_epu64_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmple_epu64_mask) (MASK_VALUE, src1.x, src2.x);\n \n   CALC (&res_ref, src1.a, src2.a);\n \n   if (res1 != res_ref)\n     abort ();\n+\n+  res_ref &= MASK_VALUE;\n+\n+  if (res2 != res_ref)\n+    abort ();\n }"}, {"sha": "80d7c17a67d36201417555e30efa9ed73e100710", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpltd-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltd-1.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\{\" 1 } } */\n \n #include <immintrin.h>\n \n@@ -11,4 +12,5 @@ void extern\n avx512f_test (void)\n {\n   m = _mm512_cmplt_epi32_mask (x, x);\n+  m = _mm512_mask_cmplt_epi32_mask (m, x, x);\n }"}, {"sha": "fa5278d1c226b886d60f4c5598c13e419fe135fc", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpltd-2.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltd-2.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -26,7 +26,7 @@ TEST (void)\n {\n   int i;\n   UNION_TYPE (AVX512F_LEN, i_d) src1, src2;\n-  MASK_TYPE res_ref, res1;\n+  MASK_TYPE res_ref, res1, res2;\n   res1 = 0;\n \n   for (i = 0; i < SIZE / 2; i++)\n@@ -38,9 +38,15 @@ TEST (void)\n     }\n \n   res1 = INTRINSIC (_cmplt_epi32_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmplt_epi32_mask) (MASK_VALUE, src1.x, src2.x);\n \n   CALC (&res_ref, src1.a, src2.a);\n \n   if (res_ref != res1)\n     abort ();\n+\n+  res_ref &= MASK_VALUE;\n+\n+  if (res_ref != res2)\n+    abort ();\n }"}, {"sha": "81a30cd2d371837f1566a7fbb164b20e2fc3d618", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpltq-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltq-1.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\{\" 1 } } */\n \n #include <immintrin.h>\n \n@@ -11,4 +12,5 @@ void extern\n avx512f_test (void)\n {\n   m = _mm512_cmplt_epi64_mask (x, x);\n+  m = _mm512_mask_cmplt_epi64_mask (m, x, x);\n }"}, {"sha": "abc1ee36cd82bd1c525c94e38f4b7e8a13319c36", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpltq-2.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltq-2.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -26,7 +26,7 @@ TEST (void)\n {\n   int i;\n   UNION_TYPE (AVX512F_LEN, i_q) src1, src2;\n-  MASK_TYPE res1, res_ref;\n+  MASK_TYPE res1, res_ref, res2;\n   res1 = 0;\n \n   for (i = 0; i < SIZE / 2; i++)\n@@ -38,9 +38,15 @@ TEST (void)\n     }\n \n   res1 = INTRINSIC (_cmplt_epi64_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmplt_epi64_mask) (MASK_VALUE, src1.x, src2.x);\n \n   CALC (&res_ref, src1.a, src2.a);\n \n   if (res1 != res_ref)\n     abort ();\n+\n+  res_ref &= MASK_VALUE;\n+\n+  if (res2 != res_ref)\n+    abort ();\n }"}, {"sha": "727e05dab14c50ff60d194de48296fa4a98bbfee", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpltud-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltud-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltud-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltud-1.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\{\" 1 } } */\n \n #include <immintrin.h>\n \n@@ -11,4 +12,5 @@ void extern\n avx512f_test (void)\n {\n   m = _mm512_cmplt_epu32_mask (x, x);\n+  m = _mm512_mask_cmplt_epu32_mask (m, x, x);\n }"}, {"sha": "a4e1348578bc9f78f6ada9afdc2b79a97629be48", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpltud-2.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltud-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltud-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltud-2.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -26,7 +26,7 @@ TEST (void)\n {\n   int i;\n   UNION_TYPE (AVX512F_LEN, i_d) src1, src2;\n-  MASK_TYPE res_ref, res1;\n+  MASK_TYPE res_ref, res1, res2;\n   res1 = 0;\n \n   for (i = 0; i < SIZE / 2; i++)\n@@ -38,9 +38,15 @@ TEST (void)\n     }\n \n   res1 = INTRINSIC (_cmplt_epu32_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmplt_epu32_mask) (MASK_VALUE, src1.x, src2.x);\n \n   CALC (&res_ref, src1.a, src2.a);\n \n   if (res_ref != res1)\n     abort ();\n+\n+  res_ref &= MASK_VALUE;\n+\n+  if (res_ref != res2)\n+    abort ();\n }"}, {"sha": "af7ea5e60d5a6c0cbb2b77754af54f6ed63a7cd9", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpltuq-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltuq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltuq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltuq-1.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\{\" 1 } } */\n \n #include <immintrin.h>\n \n@@ -11,4 +12,5 @@ void extern\n avx512f_test (void)\n {\n   m = _mm512_cmplt_epu64_mask (x, x);\n+  m = _mm512_mask_cmplt_epu64_mask (m, x, x);\n }"}, {"sha": "d492dbc317fb620ac56e58311684f6647a4543ff", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpltuq-2.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltuq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltuq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpltuq-2.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -26,7 +26,7 @@ TEST (void)\n {\n   int i;\n   UNION_TYPE (AVX512F_LEN, i_q) src1, src2;\n-  MASK_TYPE res1, res_ref;\n+  MASK_TYPE res1, res_ref, res2;\n   res1 = 0;\n \n   for (i = 0; i < SIZE / 2; i++)\n@@ -38,9 +38,15 @@ TEST (void)\n     }\n \n   res1 = INTRINSIC (_cmplt_epu64_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmplt_epu64_mask) (MASK_VALUE, src1.x, src2.x);\n \n   CALC (&res_ref, src1.a, src2.a);\n \n   if (res1 != res_ref)\n     abort ();\n+\n+  res_ref &= MASK_VALUE;\n+\n+  if (res2 != res_ref)\n+    abort ();\n }"}, {"sha": "ed0a8b3ac295d7d2b3663063768cef83427070e7", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpneqd-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpneqd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpneqd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpneqd-1.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\{\" 1 } } */\n \n #include <immintrin.h>\n \n@@ -11,4 +12,5 @@ void extern\n avx512f_test (void)\n {\n   m = _mm512_cmpneq_epi32_mask (x, x);\n+  m = _mm512_mask_cmpneq_epi32_mask (m, x, x);\n }"}, {"sha": "6e656935d47df3c1bc72b5ec1259b96375239539", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpneqd-2.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpneqd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpneqd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpneqd-2.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -26,7 +26,7 @@ TEST (void)\n {\n   int i;\n   UNION_TYPE (AVX512F_LEN, i_d) src1, src2;\n-  MASK_TYPE res_ref, res1;\n+  MASK_TYPE res_ref, res1, res2;\n   res1 = 0;\n \n   for (i = 0; i < SIZE / 2; i++)\n@@ -38,9 +38,15 @@ TEST (void)\n     }\n \n   res1 = INTRINSIC (_cmpneq_epi32_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmpneq_epi32_mask) (MASK_VALUE, src1.x, src2.x);\n \n   CALC (&res_ref, src1.a, src2.a);\n \n   if (res_ref != res1)\n     abort ();\n+\n+  res_ref &= MASK_VALUE;\n+\n+  if (res_ref != res2)\n+    abort ();\n }"}, {"sha": "4b92f0288fbdb2a7b8b3f7f5ff4b453b5225279a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpneqq-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpneqq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpneqq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpneqq-1.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\{\" 1 } } */\n \n #include <immintrin.h>\n \n@@ -11,4 +12,5 @@ void extern\n avx512f_test (void)\n {\n   m = _mm512_cmpneq_epi64_mask (x, x);\n+  m = _mm512_mask_cmpneq_epi64_mask (m, x, x);\n }"}, {"sha": "2277c94a654439c1b7294527cf88eafaa6e99f04", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpneqq-2.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpneqq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpneqq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpneqq-2.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -26,7 +26,7 @@ TEST (void)\n {\n   int i;\n   UNION_TYPE (AVX512F_LEN, i_q) src1, src2;\n-  MASK_TYPE res1, res_ref;\n+  MASK_TYPE res1, res_ref, res2;\n   res1 = 0;\n \n   for (i = 0; i < SIZE / 2; i++)\n@@ -38,9 +38,14 @@ TEST (void)\n     }\n \n   res1 = INTRINSIC (_cmpneq_epi64_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmpneq_epi64_mask) (MASK_VALUE, src1.x, src2.x);\n \n   CALC (&res_ref, src1.a, src2.a);\n \n   if (res1 != res_ref)\n     abort ();\n+\n+  res_ref &= MASK_VALUE;\n+  if (res2 != res_ref)\n+    abort ();\n }"}, {"sha": "e386c3663b02404983ddb52e353a0272642a9d34", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpnequd-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpnequd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpnequd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpnequd-1.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpud\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\{\" 1 } } */\n \n #include <immintrin.h>\n \n@@ -11,4 +12,5 @@ void extern\n avx512f_test (void)\n {\n   m = _mm512_cmpneq_epu32_mask (x, x);\n+  m = _mm512_mask_cmpneq_epu32_mask (m, x, x);\n }"}, {"sha": "e024432c874dcfaf61c1b8c5e9377814afb292ce", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpnequd-2.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpnequd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpnequd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpnequd-2.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -26,7 +26,7 @@ TEST (void)\n {\n   int i;\n   UNION_TYPE (AVX512F_LEN, i_d) src1, src2;\n-  MASK_TYPE res_ref, res1;\n+  MASK_TYPE res_ref, res1, res2;\n   res1 = 0;\n \n   for (i = 0; i < SIZE / 2; i++)\n@@ -38,9 +38,15 @@ TEST (void)\n     }\n \n   res1 = INTRINSIC (_cmpneq_epu32_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmpneq_epu32_mask) (MASK_VALUE, src1.x, src2.x);\n \n   CALC (&res_ref, src1.a, src2.a);\n \n   if (res_ref != res1)\n     abort ();\n+\n+  res_ref &= MASK_VALUE;\n+\n+  if (res_ref != res2)\n+    abort ();\n }"}, {"sha": "247443afca070d46a9f2495d07db922268a8d8b9", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpnequq-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpnequq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpnequq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpnequq-1.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpuq\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n^k\\]*%k\\[0-9\\]\\{\" 1 } } */\n \n #include <immintrin.h>\n \n@@ -11,4 +12,5 @@ void extern\n avx512f_test (void)\n {\n   m = _mm512_cmpneq_epu64_mask (x, x);\n+  m = _mm512_mask_cmpneq_epu64_mask (m, x, x);\n }"}, {"sha": "9b13b2b49304a66ecc673a8de965b8fca865e839", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpnequq-2.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpnequq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/275be1dac2866fa0e50a73ad36bdc45760796d63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpnequq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpnequq-2.c?ref=275be1dac2866fa0e50a73ad36bdc45760796d63", "patch": "@@ -26,7 +26,7 @@ TEST (void)\n {\n   int i;\n   UNION_TYPE (AVX512F_LEN, i_q) src1, src2;\n-  MASK_TYPE res1, res_ref;\n+  MASK_TYPE res1, res_ref, res2;\n   res1 = 0;\n \n   for (i = 0; i < SIZE / 2; i++)\n@@ -38,9 +38,15 @@ TEST (void)\n     }\n \n   res1 = INTRINSIC (_cmpneq_epu64_mask) (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_cmpneq_epu64_mask) (MASK_VALUE, src1.x, src2.x);\n \n   CALC (&res_ref, src1.a, src2.a);\n \n   if (res1 != res_ref)\n     abort ();\n+\n+  res_ref &= MASK_VALUE;\n+\n+  if (res2 != res_ref)\n+    abort ();\n }"}]}