{"sha": "f96540656c6cb530d90e14b2334c9ad3d153e76d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk2NTQwNjU2YzZjYjUzMGQ5MGUxNGIyMzM0YzlhZDNkMTUzZTc2ZA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2004-01-14T18:02:42Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2004-01-14T18:02:42Z"}, "message": "re PR target/9365 ([SH] segfault in gen_far_branch (config/sh/sh.c))\n\n        PR target/9365\n        * sh.c (gen_block_redirect): Add special handling of RETURN.\n        (gen_far_branch) Don't call gen_stuff_delay_slot if there is no\n        far branch target (i.e. it's a return).\n\nFrom-SVN: r75872", "tree": {"sha": "2cc2782f68d7471085c984bdb8c413e60df2f2f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2cc2782f68d7471085c984bdb8c413e60df2f2f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f96540656c6cb530d90e14b2334c9ad3d153e76d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f96540656c6cb530d90e14b2334c9ad3d153e76d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f96540656c6cb530d90e14b2334c9ad3d153e76d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f96540656c6cb530d90e14b2334c9ad3d153e76d/comments", "author": null, "committer": null, "parents": [{"sha": "abbe8578d63babc4d94ecd35a70c281386dfd0ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abbe8578d63babc4d94ecd35a70c281386dfd0ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abbe8578d63babc4d94ecd35a70c281386dfd0ce"}], "stats": {"total": 30, "additions": 25, "deletions": 5}, "files": [{"sha": "3ab2f54c2e99bdc28af605c92d2a36355d64a7fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96540656c6cb530d90e14b2334c9ad3d153e76d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96540656c6cb530d90e14b2334c9ad3d153e76d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f96540656c6cb530d90e14b2334c9ad3d153e76d", "patch": "@@ -1,3 +1,10 @@\n+2004-01-14  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\tPR target/9365\n+\t* sh.c (gen_block_redirect): Add special handling of RETURN.\n+\t(gen_far_branch) Don't call gen_stuff_delay_slot if there is no\n+\tfar branch target (i.e. it's a return).\n+\n 2004-01-14  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* regrename.c (find_oldest_value_reg): Fix a warning."}, {"sha": "43657e41e858de46c50fab355b15925256306008", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96540656c6cb530d90e14b2334c9ad3d153e76d/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96540656c6cb530d90e14b2334c9ad3d153e76d/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=f96540656c6cb530d90e14b2334c9ad3d153e76d", "patch": "@@ -3368,6 +3368,14 @@ gen_block_redirect (rtx jump, int addr, int need_block)\n       else if (recog_memoized (prev) == CODE_FOR_block_branch_redirect)\n \tneed_block = 0;\n     }\n+  if (GET_CODE (PATTERN (jump)) == RETURN)\n+    {\n+      if (! need_block)\n+\treturn prev;\n+      /* Reorg even does nasty things with return insns that cause branches\n+\t to go out of range - see find_end_label and callers.  */\n+      return emit_insn_before (gen_block_branch_redirect (GEN_INT (0)) , jump);\n+    }\n   /* We can't use JUMP_LABEL here because it might be undefined\n      when not optimizing.  */\n   dest = XEXP (SET_SRC (PATTERN (jump)), 0);\n@@ -3535,11 +3543,16 @@ gen_far_branch (struct far_branch *bp)\n   JUMP_LABEL (jump) = bp->far_label;\n   if (! invert_jump (insn, label, 1))\n     abort ();\n-  (emit_insn_after\n-   (gen_stuff_delay_slot\n-    (GEN_INT (INSN_UID (XEXP (SET_SRC (PATTERN (jump)), 0))),\n-     GEN_INT (recog_memoized (insn) == CODE_FOR_branch_false)),\n-    insn));\n+  /* If we are branching around a jump (rather than a return), prevent\n+     reorg from using an insn from the jump target as the delay slot insn -\n+     when reorg did this, it pessimized code (we rather hide the delay slot)\n+     and it could cause branches to go out of range.  */\n+  if (bp->far_label)\n+    (emit_insn_after\n+     (gen_stuff_delay_slot\n+      (GEN_INT (INSN_UID (XEXP (SET_SRC (PATTERN (jump)), 0))),\n+       GEN_INT (recog_memoized (insn) == CODE_FOR_branch_false)),\n+      insn));\n   /* Prevent reorg from undoing our splits.  */\n   gen_block_redirect (jump, bp->address += 2, 2);\n }"}]}