{"sha": "26fa464f42622c60d6929720dd37143a21054ede", "node_id": "C_kwDOANBUbNoAKDI2ZmE0NjRmNDI2MjJjNjBkNjkyOTcyMGRkMzcxNDNhMjEwNTRlZGU", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2022-01-02T14:08:35Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2022-04-21T21:30:45Z"}, "message": "rs6000: Disparage lfiwzx and similar\n\nRA now chooses GEN_OR_VSX_REGS in most cases.  This is great in most\ncases, but we often (or always?) use {l,st}{f,xs}iwzx now, which is\nproblematic because the integer load and store insns can use cheaper\naddressing modes.  We can fix that by putting a small penalty on the\ninstruction alternatives for those.\n\n2022-04-21  Segher Boessenkool  <segher@kernel.crashing.org>\n\n\tPR target/103197\n\tPR target/102146\n\t* config/rs6000/rs6000.md (zero_extendqi<mode>2 for EXTQI): Disparage\n\tthe \"Z\" alternatives in {l,st}{f,xs}iwzx.\n\t(zero_extendhi<mode>2 for EXTHI): Ditto.\n\t(zero_extendsi<mode>2 for EXTSI): Ditto.\n\t(*movsi_internal1): Ditto.\n\t(*mov<mode>_internal1 for QHI): Ditto.\n\t(movsd_hardfloat): Ditto.", "tree": {"sha": "133a52be9d8a354af6c8f67ec6f483d501d8a672", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/133a52be9d8a354af6c8f67ec6f483d501d8a672"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26fa464f42622c60d6929720dd37143a21054ede", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26fa464f42622c60d6929720dd37143a21054ede", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26fa464f42622c60d6929720dd37143a21054ede", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26fa464f42622c60d6929720dd37143a21054ede/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc9deca632c2eb246c54cfd13cb616bf3fcbd21a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc9deca632c2eb246c54cfd13cb616bf3fcbd21a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc9deca632c2eb246c54cfd13cb616bf3fcbd21a"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "a39b95f7dffa24c7943685a64a3eeaf6b2f594c9", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26fa464f42622c60d6929720dd37143a21054ede/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26fa464f42622c60d6929720dd37143a21054ede/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=26fa464f42622c60d6929720dd37143a21054ede", "patch": "@@ -835,8 +835,8 @@\n ;; complex forms.  Basic data transfer is done later.\n \n (define_insn \"zero_extendqi<mode>2\"\n-  [(set (match_operand:EXTQI 0 \"gpc_reg_operand\" \"=r,r,^wa,^v\")\n-\t(zero_extend:EXTQI (match_operand:QI 1 \"reg_or_mem_operand\" \"m,r,Z,v\")))]\n+  [(set (match_operand:EXTQI 0 \"gpc_reg_operand\" \"=r,r,wa,^v\")\n+\t(zero_extend:EXTQI (match_operand:QI 1 \"reg_or_mem_operand\" \"m,r,?Z,v\")))]\n   \"\"\n   \"@\n    lbz%U1%X1 %0,%1\n@@ -889,8 +889,8 @@\n \n \n (define_insn \"zero_extendhi<mode>2\"\n-  [(set (match_operand:EXTHI 0 \"gpc_reg_operand\" \"=r,r,^wa,^v\")\n-\t(zero_extend:EXTHI (match_operand:HI 1 \"reg_or_mem_operand\" \"m,r,Z,v\")))]\n+  [(set (match_operand:EXTHI 0 \"gpc_reg_operand\" \"=r,r,wa,^v\")\n+\t(zero_extend:EXTHI (match_operand:HI 1 \"reg_or_mem_operand\" \"m,r,?Z,v\")))]\n   \"\"\n   \"@\n    lhz%U1%X1 %0,%1\n@@ -944,7 +944,7 @@\n \n (define_insn \"zero_extendsi<mode>2\"\n   [(set (match_operand:EXTSI 0 \"gpc_reg_operand\" \"=r,r,d,wa,wa,r,wa\")\n-\t(zero_extend:EXTSI (match_operand:SI 1 \"reg_or_mem_operand\" \"m,r,Z,Z,r,wa,wa\")))]\n+\t(zero_extend:EXTSI (match_operand:SI 1 \"reg_or_mem_operand\" \"m,r,?Z,?Z,r,wa,wa\")))]\n   \"\"\n   \"@\n    lwz%U1%X1 %0,%1\n@@ -7496,15 +7496,15 @@\n   [(set (match_operand:SI 0 \"nonimmediate_operand\"\n \t  \"=r,         r,\n \t   r,          d,          v,\n-\t   m,          Z,          Z,\n+\t   m,          ?Z,         ?Z,\n \t   r,          r,          r,          r,\n \t   wa,         wa,         wa,         v,\n \t   wa,         v,          v,\n \t   wa,         r,\n \t   r,          *h,         *h\")\n \t(match_operand:SI 1 \"input_operand\"\n \t  \"r,          U,\n-\t   m,          Z,          Z,\n+\t   m,          ?Z,         ?Z,\n \t   r,          d,          v,\n \t   I,          L,          eI,         n,\n \t   wa,         O,          wM,         wB,\n@@ -7785,11 +7785,11 @@\n ;;\t\tMTVSRWZ     MF%1       MT%1       NOP\n (define_insn \"*mov<mode>_internal\"\n   [(set (match_operand:QHI 0 \"nonimmediate_operand\"\n-\t\t\"=r,        r,         wa,        m,         Z,         r,\n+\t\t\"=r,        r,         wa,        m,         ?Z,        r,\n \t\t wa,        wa,        wa,        v,         ?v,        r,\n \t\t wa,        r,         *c*l,      *h\")\n \t(match_operand:QHI 1 \"input_operand\"\n-\t\t\"r,         m,         Z,         r,         wa,        i,\n+\t\t\"r,         m,         ?Z,        r,         wa,        i,\n \t\t wa,        O,         wM,        wB,        wS,        wa,\n \t\t r,         *h,        r,         0\"))]\n   \"gpc_reg_operand (operands[0], <MODE>mode)\n@@ -7973,10 +7973,10 @@\n ;;\tFMR          MR         MT%0       MF%1       NOP\n (define_insn \"movsd_hardfloat\"\n   [(set (match_operand:SD 0 \"nonimmediate_operand\"\n-\t \"=!r,       d,         m,         Z,         ?d,        ?r,\n+\t \"=!r,       d,         m,         ?Z,        ?d,        ?r,\n \t  f,         !r,        *c*l,      !r,        *h\")\n \t(match_operand:SD 1 \"input_operand\"\n-\t \"m,         Z,         r,         wx,        r,         d,\n+\t \"m,         ?Z,        r,         wx,        r,         d,\n \t  f,         r,         r,         *h,        0\"))]\n   \"(register_operand (operands[0], SDmode)\n    || register_operand (operands[1], SDmode))"}]}