{"sha": "a899fa35017a572cfd343c199a355687a3282d92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg5OWZhMzUwMTdhNTcyY2ZkMzQzYzE5OWEzNTU2ODdhMzI4MmQ5Mg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2019-05-15T15:19:19Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2019-05-15T15:19:19Z"}, "message": "i386: Emulate MMX mmx_uavgv8qi3 with SSE\n\nEmulate MMX mmx_uavgv8qi3 with SSE.  Only SSE register source operand is\nallowed.\n\n\tPR target/89021\n\t* config/i386/mmx.md (mmx_uavgv8qi3): Also check TARGET_MMX\n\tand TARGET_MMX_WITH_SSE.\n\t(*mmx_uavgv8qi3): Add SSE emulation.\n\nFrom-SVN: r271235", "tree": {"sha": "95d87d0925fbe82e260677b352c6402d48956e94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95d87d0925fbe82e260677b352c6402d48956e94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a899fa35017a572cfd343c199a355687a3282d92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a899fa35017a572cfd343c199a355687a3282d92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a899fa35017a572cfd343c199a355687a3282d92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a899fa35017a572cfd343c199a355687a3282d92/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "55cd237908dcfa48ef12b4f7cd9e41f154139bd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55cd237908dcfa48ef12b4f7cd9e41f154139bd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55cd237908dcfa48ef12b4f7cd9e41f154139bd2"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "0857df4a3a590a25d249660292fd7e4cbb3f2316", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a899fa35017a572cfd343c199a355687a3282d92/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a899fa35017a572cfd343c199a355687a3282d92/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a899fa35017a572cfd343c199a355687a3282d92", "patch": "@@ -1,3 +1,10 @@\n+2019-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/89021\n+\t* config/i386/mmx.md (mmx_uavgv8qi3): Also check TARGET_MMX\n+\tand TARGET_MMX_WITH_SSE.\n+\t(*mmx_uavgv8qi3): Add SSE emulation.\n+\n 2019-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/89021"}, {"sha": "9f14d0d015d6e9eae25083111b1c6e266360c3dd", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a899fa35017a572cfd343c199a355687a3282d92/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a899fa35017a572cfd343c199a355687a3282d92/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=a899fa35017a572cfd343c199a355687a3282d92", "patch": "@@ -1704,50 +1704,55 @@\n \t    (plus:V8HI\n \t      (plus:V8HI\n \t\t(zero_extend:V8HI\n-\t\t  (match_operand:V8QI 1 \"nonimmediate_operand\"))\n+\t\t  (match_operand:V8QI 1 \"register_mmxmem_operand\"))\n \t\t(zero_extend:V8HI\n-\t\t  (match_operand:V8QI 2 \"nonimmediate_operand\")))\n+\t\t  (match_operand:V8QI 2 \"register_mmxmem_operand\")))\n \t      (const_vector:V8HI [(const_int 1) (const_int 1)\n \t\t\t\t  (const_int 1) (const_int 1)\n \t\t\t\t  (const_int 1) (const_int 1)\n \t\t\t\t  (const_int 1) (const_int 1)]))\n \t    (const_int 1))))]\n-  \"TARGET_SSE || TARGET_3DNOW\"\n+  \"(TARGET_MMX || TARGET_MMX_WITH_SSE)\n+   && (TARGET_SSE || TARGET_3DNOW_A)\"\n   \"ix86_fixup_binary_operands_no_copy (PLUS, V8QImode, operands);\")\n \n (define_insn \"*mmx_uavgv8qi3\"\n-  [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n+  [(set (match_operand:V8QI 0 \"register_operand\" \"=y,x,Yv\")\n \t(truncate:V8QI\n \t  (lshiftrt:V8HI\n \t    (plus:V8HI\n \t      (plus:V8HI\n \t\t(zero_extend:V8HI\n-\t\t  (match_operand:V8QI 1 \"nonimmediate_operand\" \"%0\"))\n+\t\t  (match_operand:V8QI 1 \"register_mmxmem_operand\" \"%0,0,Yv\"))\n \t\t(zero_extend:V8HI\n-\t\t  (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\")))\n+\t\t  (match_operand:V8QI 2 \"register_mmxmem_operand\" \"ym,x,Yv\")))\n \t      (const_vector:V8HI [(const_int 1) (const_int 1)\n \t\t\t\t  (const_int 1) (const_int 1)\n \t\t\t\t  (const_int 1) (const_int 1)\n \t\t\t\t  (const_int 1) (const_int 1)]))\n \t    (const_int 1))))]\n-  \"(TARGET_SSE || TARGET_3DNOW)\n+  \"(TARGET_MMX || TARGET_MMX_WITH_SSE)\n+   && (TARGET_SSE || TARGET_3DNOW_A)\n    && ix86_binary_operator_ok (PLUS, V8QImode, operands)\"\n {\n   /* These two instructions have the same operation, but their encoding\n      is different.  Prefer the one that is de facto standard.  */\n-  if (TARGET_SSE || TARGET_3DNOW_A)\n+  if (TARGET_MMX_WITH_SSE && TARGET_AVX)\n+    return \"vpavgb\\t{%2, %1, %0|%0, %1, %2}\";\n+  else if (TARGET_SSE || TARGET_3DNOW_A)\n     return \"pavgb\\t{%2, %0|%0, %2}\";\n   else\n     return \"pavgusb\\t{%2, %0|%0, %2}\";\n }\n-  [(set_attr \"type\" \"mmxshft\")\n+  [(set_attr \"mmx_isa\" \"native,x64_noavx,x64_avx\")\n+   (set_attr \"type\" \"mmxshft,sseiadd,sseiadd\")\n    (set (attr \"prefix_extra\")\n      (if_then_else\n        (not (ior (match_test \"TARGET_SSE\")\n \t\t (match_test \"TARGET_3DNOW_A\")))\n        (const_string \"1\")\n        (const_string \"*\")))\n-   (set_attr \"mode\" \"DI\")])\n+   (set_attr \"mode\" \"DI,TI,TI\")])\n \n (define_expand \"mmx_uavgv4hi3\"\n   [(set (match_operand:V4HI 0 \"register_operand\")"}]}