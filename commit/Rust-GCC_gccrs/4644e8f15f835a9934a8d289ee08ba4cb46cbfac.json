{"sha": "4644e8f15f835a9934a8d289ee08ba4cb46cbfac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY0NGU4ZjE1ZjgzNWE5OTM0YThkMjg5ZWUwOGJhNGNiNDZjYmZhYw==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2020-06-14T12:39:03Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2020-06-14T12:39:03Z"}, "message": "Always use locations from get and put arguments for error messages.\n\nA simple and obvios patch - the error location was taken\nfrom a variable that was not initialized for optional\nvariables.\n\ngcc/fortran/ChangeLog:\n\n\t* check.c (gfc_check_random_seed): Always use locations\n\tfrom get and put arguments for error messages.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/random_seed_4.f90: New test.", "tree": {"sha": "ac243c4241bfe472b78db70a0b52acd0487a5daa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac243c4241bfe472b78db70a0b52acd0487a5daa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4644e8f15f835a9934a8d289ee08ba4cb46cbfac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4644e8f15f835a9934a8d289ee08ba4cb46cbfac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4644e8f15f835a9934a8d289ee08ba4cb46cbfac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4644e8f15f835a9934a8d289ee08ba4cb46cbfac/comments", "author": null, "committer": null, "parents": [{"sha": "1af22e455584ef5fcad2b4474c1efc3fd26f6cb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1af22e455584ef5fcad2b4474c1efc3fd26f6cb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1af22e455584ef5fcad2b4474c1efc3fd26f6cb3"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "9c9552404f3a557448297d416c6fe656cc703093", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4644e8f15f835a9934a8d289ee08ba4cb46cbfac/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4644e8f15f835a9934a8d289ee08ba4cb46cbfac/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=4644e8f15f835a9934a8d289ee08ba4cb46cbfac", "patch": "@@ -6643,7 +6643,7 @@ gfc_check_random_seed (gfc_expr *size, gfc_expr *put, gfc_expr *get)\n \tgfc_error (\"Size of %qs argument of %qs intrinsic at %L \"\n \t\t   \"too small (%i/%i)\",\n \t\t   gfc_current_intrinsic_arg[1]->name, gfc_current_intrinsic,\n-\t\t   where, (int) mpz_get_ui (put_size), seed_size);\n+\t\t   &put->where, (int) mpz_get_ui (put_size), seed_size);\n     }\n \n   if (get != NULL)\n@@ -6675,7 +6675,7 @@ gfc_check_random_seed (gfc_expr *size, gfc_expr *put, gfc_expr *get)\n \tgfc_error (\"Size of %qs argument of %qs intrinsic at %L \"\n \t\t   \"too small (%i/%i)\",\n \t\t   gfc_current_intrinsic_arg[2]->name, gfc_current_intrinsic,\n-\t\t   where, (int) mpz_get_ui (get_size), seed_size);\n+\t\t   &get->where, (int) mpz_get_ui (get_size), seed_size);\n     }\n \n   /* RANDOM_SEED may not have more than one non-optional argument.  */"}, {"sha": "4c3afe5f9287bafd0a1e510f7feb5d8c26a2b4bf", "filename": "gcc/testsuite/gfortran.dg/random_seed_4.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4644e8f15f835a9934a8d289ee08ba4cb46cbfac/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_seed_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4644e8f15f835a9934a8d289ee08ba4cb46cbfac/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_seed_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_seed_4.f90?ref=4644e8f15f835a9934a8d289ee08ba4cb46cbfac", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do compile }\n+! PR fortran/95037\n+! This led to a segfault or a confusing error message.  Original\n+! test case by Bill Long.\n+\n+subroutine my_random_seed_v (size, put, get)\n+integer, optional :: size\n+integer, optional :: put(1)\n+integer, optional :: get(1)\n+call random_seed (size, get=get) ! { dg-error \"too small\" }\n+call random_seed (size, put=put) ! { dg-error \"too small\" }\n+call random_seed (size, get=get, put=put) ! { dg-error \"too small\" }\n+end subroutine my_random_seed_v\n+"}]}