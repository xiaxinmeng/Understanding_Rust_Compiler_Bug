{"sha": "416418e6a206f2c3ab6bcefd8a3b06259a2ebdeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE2NDE4ZTZhMjA2ZjJjM2FiNmJjZWZkOGEzYjA2MjU5YTJlYmRlYg==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2015-09-21T07:23:23Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2015-09-21T07:23:23Z"}, "message": "invoke.texi (SH Options): Undocument SH5/SH64 related options.\n\ngcc/\n\t* doc/invoke.texi (SH Options): Undocument SH5/SH64 related options.\n\nFrom-SVN: r227959", "tree": {"sha": "ce58a8a0c3b4ab85bf45414d9e3142ebb1750945", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce58a8a0c3b4ab85bf45414d9e3142ebb1750945"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/416418e6a206f2c3ab6bcefd8a3b06259a2ebdeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/416418e6a206f2c3ab6bcefd8a3b06259a2ebdeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/416418e6a206f2c3ab6bcefd8a3b06259a2ebdeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/416418e6a206f2c3ab6bcefd8a3b06259a2ebdeb/comments", "author": null, "committer": null, "parents": [{"sha": "1383eae791fc8ac120e0e79d878713fcdd4af653", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1383eae791fc8ac120e0e79d878713fcdd4af653", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1383eae791fc8ac120e0e79d878713fcdd4af653"}], "stats": {"total": 156, "additions": 10, "deletions": 146}, "files": [{"sha": "d9682b70bc9fe25cf07d2b1d8f3866dc17bc9b70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/416418e6a206f2c3ab6bcefd8a3b06259a2ebdeb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/416418e6a206f2c3ab6bcefd8a3b06259a2ebdeb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=416418e6a206f2c3ab6bcefd8a3b06259a2ebdeb", "patch": "@@ -1,3 +1,7 @@\n+2015-09-21  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* doc/invoke.texi (SH Options): Undocument SH5/SH64 related options.\n+\n 2015-09-21  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/67126"}, {"sha": "c11414d2ad858b38d0abdb2abf4270e4382b594d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 146, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/416418e6a206f2c3ab6bcefd8a3b06259a2ebdeb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/416418e6a206f2c3ab6bcefd8a3b06259a2ebdeb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=416418e6a206f2c3ab6bcefd8a3b06259a2ebdeb", "patch": "@@ -983,16 +983,12 @@ See RS/6000 and PowerPC Options.\n -m3  -m3e @gol\n -m4-nofpu  -m4-single-only  -m4-single  -m4 @gol\n -m4a-nofpu -m4a-single-only -m4a-single -m4a -m4al @gol\n--m5-64media  -m5-64media-nofpu @gol\n--m5-32media  -m5-32media-nofpu @gol\n--m5-compact  -m5-compact-nofpu @gol\n -mb  -ml  -mdalign  -mrelax @gol\n--mbigtable -mfmovd -mhitachi -mrenesas -mno-renesas -mnomacsave @gol\n+-mbigtable -mfmovd -mrenesas -mno-renesas -mnomacsave @gol\n -mieee -mno-ieee -mbitops  -misize  -minline-ic_invalidate -mpadstruct @gol\n -mspace -mprefergot  -musermode -multcost=@var{number} -mdiv=@var{strategy} @gol\n -mdivsi3_libfunc=@var{name} -mfixed-range=@var{register-range} @gol\n--mindexed-addressing -mgettrcost=@var{number} -mpt-fixed @gol\n--maccumulate-outgoing-args -minvalid-symbols @gol\n+-maccumulate-outgoing-args @gol\n -matomic-model=@var{atomic-model} @gol\n -mbranch-cost=@var{num} -mzdcbranch -mno-zdcbranch @gol\n -mcbranch-force-delay-slot @gol\n@@ -20805,33 +20801,6 @@ Same as @option{-m4a-nofpu}, except that it implicitly passes\n @option{-dsp} to the assembler.  GCC doesn't generate any DSP\n instructions at the moment.\n \n-@item -m5-32media\n-@opindex m5-32media\n-Generate 32-bit code for SHmedia.\n-\n-@item -m5-32media-nofpu\n-@opindex m5-32media-nofpu\n-Generate 32-bit code for SHmedia in such a way that the\n-floating-point unit is not used.\n-\n-@item -m5-64media\n-@opindex m5-64media\n-Generate 64-bit code for SHmedia.\n-\n-@item -m5-64media-nofpu\n-@opindex m5-64media-nofpu\n-Generate 64-bit code for SHmedia in such a way that the\n-floating-point unit is not used.\n-\n-@item -m5-compact\n-@opindex m5-compact\n-Generate code for SHcompact.\n-\n-@item -m5-compact-nofpu\n-@opindex m5-compact-nofpu\n-Generate code for SHcompact in such a way that the\n-floating-point unit is not used.\n-\n @item -mb\n @opindex mb\n Compile code for the processor in big-endian mode.\n@@ -21006,65 +20975,7 @@ Set the cost to assume for a multiply insn.\n @item -mdiv=@var{strategy}\n @opindex mdiv=@var{strategy}\n Set the division strategy to be used for integer division operations.\n-For SHmedia @var{strategy} can be one of: \n-\n-@table @samp\n-\n-@item fp \n-Performs the operation in floating point.  This has a very high latency,\n-but needs only a few instructions, so it might be a good choice if\n-your code has enough easily-exploitable ILP to allow the compiler to\n-schedule the floating-point instructions together with other instructions.\n-Division by zero causes a floating-point exception.\n-\n-@item inv\n-Uses integer operations to calculate the inverse of the divisor,\n-and then multiplies the dividend with the inverse.  This strategy allows\n-CSE and hoisting of the inverse calculation.  Division by zero calculates\n-an unspecified result, but does not trap.\n-\n-@item inv:minlat\n-A variant of @samp{inv} where, if no CSE or hoisting opportunities\n-have been found, or if the entire operation has been hoisted to the same\n-place, the last stages of the inverse calculation are intertwined with the\n-final multiply to reduce the overall latency, at the expense of using a few\n-more instructions, and thus offering fewer scheduling opportunities with\n-other code.\n-\n-@item call\n-Calls a library function that usually implements the @samp{inv:minlat}\n-strategy.\n-This gives high code density for @code{m5-*media-nofpu} compilations.\n-\n-@item call2\n-Uses a different entry point of the same library function, where it\n-assumes that a pointer to a lookup table has already been set up, which\n-exposes the pointer load to CSE and code hoisting optimizations.\n-\n-@item inv:call\n-@itemx inv:call2\n-@itemx inv:fp\n-Use the @samp{inv} algorithm for initial\n-code generation, but if the code stays unoptimized, revert to the @samp{call},\n-@samp{call2}, or @samp{fp} strategies, respectively.  Note that the\n-potentially-trapping side effect of division by zero is carried by a\n-separate instruction, so it is possible that all the integer instructions\n-are hoisted out, but the marker for the side effect stays where it is.\n-A recombination to floating-point operations or a call is not possible\n-in that case.\n-\n-@item inv20u\n-@itemx inv20l\n-Variants of the @samp{inv:minlat} strategy.  In the case\n-that the inverse calculation is not separated from the multiply, they speed\n-up division where the dividend fits into 20 bits (plus sign where applicable)\n-by inserting a test to skip a number of operations in this case; this test\n-slows down the case of larger dividends.  @samp{inv20u} assumes the case of a such\n-a small dividend to be unlikely, and @samp{inv20l} assumes it to be likely.\n-\n-@end table\n-\n-For targets other than SHmedia @var{strategy} can be one of:\n+@var{strategy} can be one of: \n \n @table @samp\n \n@@ -21104,9 +21015,9 @@ needed for unwinding to avoid changing the stack frame around conditional code.\n @opindex mdivsi3_libfunc=@var{name}\n Set the name of the library function used for 32-bit signed division to\n @var{name}.\n-This only affects the name used in the @samp{call} and @samp{inv:call}\n-division strategies, and the compiler still expects the same\n-sets of input/output/clobbered registers as if this option were not present.\n+This only affects the name used in the @samp{call} division strategies, and\n+the compiler still expects the same sets of input/output/clobbered registers as\n+if this option were not present.\n \n @item -mfixed-range=@var{register-range}\n @opindex mfixed-range\n@@ -21116,57 +21027,6 @@ useful when compiling kernel code.  A register range is specified as\n two registers separated by a dash.  Multiple register ranges can be\n specified separated by a comma.\n \n-@item -mindexed-addressing\n-@opindex mindexed-addressing\n-Enable the use of the indexed addressing mode for SHmedia32/SHcompact.\n-This is only safe if the hardware and/or OS implement 32-bit wrap-around\n-semantics for the indexed addressing mode.  The architecture allows the\n-implementation of processors with 64-bit MMU, which the OS could use to\n-get 32-bit addressing, but since no current hardware implementation supports\n-this or any other way to make the indexed addressing mode safe to use in\n-the 32-bit ABI, the default is @option{-mno-indexed-addressing}.\n-\n-@item -mgettrcost=@var{number}\n-@opindex mgettrcost=@var{number}\n-Set the cost assumed for the @code{gettr} instruction to @var{number}.\n-The default is 2 if @option{-mpt-fixed} is in effect, 100 otherwise.\n-\n-@item -mpt-fixed\n-@opindex mpt-fixed\n-Assume @code{pt*} instructions won't trap.  This generally generates\n-better-scheduled code, but is unsafe on current hardware.\n-The current architecture\n-definition says that @code{ptabs} and @code{ptrel} trap when the target \n-anded with 3 is 3.\n-This has the unintentional effect of making it unsafe to schedule these\n-instructions before a branch, or hoist them out of a loop.  For example,\n-@code{__do_global_ctors}, a part of @file{libgcc}\n-that runs constructors at program\n-startup, calls functions in a list which is delimited by @minus{}1.  With the\n-@option{-mpt-fixed} option, the @code{ptabs} is done before testing against @minus{}1.\n-That means that all the constructors run a bit more quickly, but when\n-the loop comes to the end of the list, the program crashes because @code{ptabs}\n-loads @minus{}1 into a target register.  \n-\n-Since this option is unsafe for any\n-hardware implementing the current architecture specification, the default\n-is @option{-mno-pt-fixed}.  Unless specified explicitly with \n-@option{-mgettrcost}, @option{-mno-pt-fixed} also implies @option{-mgettrcost=100};\n-this deters register allocation from using target registers for storing\n-ordinary integers.\n-\n-@item -minvalid-symbols\n-@opindex minvalid-symbols\n-Assume symbols might be invalid.  Ordinary function symbols generated by\n-the compiler are always valid to load with\n-@code{movi}/@code{shori}/@code{ptabs} or\n-@code{movi}/@code{shori}/@code{ptrel},\n-but with assembler and/or linker tricks it is possible\n-to generate symbols that cause @code{ptabs} or @code{ptrel} to trap.\n-This option is only meaningful when @option{-mno-pt-fixed} is in effect.\n-It prevents cross-basic-block CSE, hoisting and most scheduling\n-of symbol loads.  The default is @option{-mno-invalid-symbols}.\n-\n @item -mbranch-cost=@var{num}\n @opindex mbranch-cost=@var{num}\n Assume @var{num} to be the cost for a branch instruction.  Higher numbers"}]}