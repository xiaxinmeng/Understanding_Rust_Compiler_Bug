{"sha": "0b3d16c08a9b4082e5b3fbfb82e282f49fe7ac1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIzZDE2YzA4YTliNDA4MmU1YjNmYmZiODJlMjgyZjQ5ZmU3YWMxZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T14:02:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T14:02:45Z"}, "message": "[multiple changes]\n\n2011-08-02  Thomas Quinot  <quinot@adacore.com>\n\n\t* s-taskin.ads: Minor reformatting.\n\n2011-08-02  Emmanuel Briot  <briot@adacore.com>\n\n\t* g-comlin.adb (Display_Help): swap the order in which it prints the\n\tshort help and the general usage.\n\n2011-08-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Analyze_Generic_Subprogram_Declaration): copy properly\n\tthe aspect declarations and attach them to the generic copy for\n\tsubsequent analysis.\n\t(Analyze_Subprogram_Instantiation): copy explicitly the aspect\n\tdeclarations of the generic tree to the new subprogram declarations.\n\t* sem_attr.adb (Check_Precondition_Postcondition): recognize\n\tconditions that apply to a subprogram instance.\n\n2011-08-02  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Clarify doc on pragma Source_File_Name[_Project].\n\n2011-08-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Derived_Type_Declaration): When checking that a untagged\n\tprivate type with a tagged full view is not derived in the immediate\n\tscope of the partial view, (RM 7.3 (7)) use the scope of the base type.\n\nFrom-SVN: r177157", "tree": {"sha": "150e949d222d419224ca50715b01a272e4e5b5ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/150e949d222d419224ca50715b01a272e4e5b5ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b3d16c08a9b4082e5b3fbfb82e282f49fe7ac1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b3d16c08a9b4082e5b3fbfb82e282f49fe7ac1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b3d16c08a9b4082e5b3fbfb82e282f49fe7ac1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b3d16c08a9b4082e5b3fbfb82e282f49fe7ac1e/comments", "author": null, "committer": null, "parents": [{"sha": "4637729f3ee4f001e5c4fec92fe26d13b91d9f97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4637729f3ee4f001e5c4fec92fe26d13b91d9f97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4637729f3ee4f001e5c4fec92fe26d13b91d9f97"}], "stats": {"total": 138, "additions": 111, "deletions": 27}, "files": [{"sha": "b7d5737a4f751e7746f3feb638c5de051fb8f6c7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b3d16c08a9b4082e5b3fbfb82e282f49fe7ac1e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b3d16c08a9b4082e5b3fbfb82e282f49fe7ac1e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0b3d16c08a9b4082e5b3fbfb82e282f49fe7ac1e", "patch": "@@ -1,3 +1,32 @@\n+2011-08-02  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* s-taskin.ads: Minor reformatting.\n+\n+2011-08-02  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* g-comlin.adb (Display_Help): swap the order in which it prints the\n+\tshort help and the general usage.\n+\n+2011-08-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Analyze_Generic_Subprogram_Declaration): copy properly\n+\tthe aspect declarations and attach them to the generic copy for\n+\tsubsequent analysis.\n+\t(Analyze_Subprogram_Instantiation): copy explicitly the aspect\n+\tdeclarations of the generic tree to the new subprogram declarations.\n+\t* sem_attr.adb (Check_Precondition_Postcondition): recognize\n+\tconditions that apply to a subprogram instance.\n+\n+2011-08-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Clarify doc on pragma Source_File_Name[_Project].\n+\n+2011-08-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Derived_Type_Declaration): When checking that a untagged\n+\tprivate type with a tagged full view is not derived in the immediate\n+\tscope of the partial view, (RM 7.3 (7)) use the scope of the base type.\n+\n 2011-08-02  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch4.adb: Minor reformatting."}, {"sha": "1963520cf79aab267406f16347f70ebabe49527b", "filename": "gcc/ada/g-comlin.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b3d16c08a9b4082e5b3fbfb82e282f49fe7ac1e/gcc%2Fada%2Fg-comlin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b3d16c08a9b4082e5b3fbfb82e282f49fe7ac1e/gcc%2Fada%2Fg-comlin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-comlin.adb?ref=0b3d16c08a9b4082e5b3fbfb82e282f49fe7ac1e", "patch": "@@ -3176,6 +3176,10 @@ package body GNAT.Command_Line is\n          return;\n       end if;\n \n+      if Config.Help /= null and then Config.Help.all /= \"\" then\n+         Put_Line (Config.Help.all);\n+      end if;\n+\n       if Config.Usage /= null then\n          Put_Line (\"Usage: \"\n                    & Base_Name\n@@ -3185,10 +3189,6 @@ package body GNAT.Command_Line is\n                    & \" [switches] [arguments]\");\n       end if;\n \n-      if Config.Help /= null and then Config.Help.all /= \"\" then\n-         Put_Line (Config.Help.all);\n-      end if;\n-\n       Display_Section_Help (\"\");\n \n       if Config.Sections /= null and then Config.Switches /= null then"}, {"sha": "a2c86363973b23feb458fa4bc4b61d447842738c", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b3d16c08a9b4082e5b3fbfb82e282f49fe7ac1e/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b3d16c08a9b4082e5b3fbfb82e282f49fe7ac1e/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=0b3d16c08a9b4082e5b3fbfb82e282f49fe7ac1e", "patch": "@@ -4558,8 +4558,12 @@ specifies the casing of the unit name in the resulting file name string.\n The default is lower case.  Finally the third argument allows for systematic\n replacement of any dots in the unit name by the specified string literal.\n \n-A pragma Source_File_Name cannot appear after a\n-@ref{Pragma Source_File_Name_Project}.\n+Note that Source_File_Name pragmas should not be used if you are using\n+project files. The reason for this rule is that the project manager is not\n+aware of these pragmas, and so other tools that use the projet file would not\n+be aware of the intended naming conventions. If you are using project files,\n+file naming is controlled by Source_File_Name_Project pragmas. A pragma\n+Source_File_Name cannot appear after a @ref{Pragma Source_File_Name_Project}.\n \n For more details on the use of the @code{Source_File_Name} pragma,\n @xref{Using Other File Names,,, gnat_ugn, @value{EDITION} User's Guide},\n@@ -4581,7 +4585,8 @@ The intention is that Source_File_Name_Project pragmas are always\n generated by the Project Manager in a manner consistent with the naming\n specified in a project file, and when naming is controlled in this manner,\n it is not permissible to attempt to modify this naming scheme using\n-Source_File_Name pragmas (which would not be known to the project manager).\n+Source_File_Name or Source_File_Name_Project pragmas (which would not be\n+known to the project manager).\n \n @node Pragma Source_Reference\n @unnumberedsec Pragma Source_Reference"}, {"sha": "074c86b6a4ad29f1f70215511f9633b3e35716c4", "filename": "gcc/ada/s-taskin.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b3d16c08a9b4082e5b3fbfb82e282f49fe7ac1e/gcc%2Fada%2Fs-taskin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b3d16c08a9b4082e5b3fbfb82e282f49fe7ac1e/gcc%2Fada%2Fs-taskin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.ads?ref=0b3d16c08a9b4082e5b3fbfb82e282f49fe7ac1e", "patch": "@@ -1057,7 +1057,7 @@ package System.Tasking is\n       --  Protection: Self.L\n \n       Serial_Number : Task_Serial_Number;\n-      --  A growing number to provide some way to check locking  rules/ordering\n+      --  Monotonic counter to provide some way to check locking rules/ordering\n \n       Known_Tasks_Index : Integer := -1;\n       --  Index in the System.Tasking.Debug.Known_Tasks array"}, {"sha": "cfcd29633908d34a332755fdb1cd8b8b13b90ef7", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 50, "deletions": 4, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b3d16c08a9b4082e5b3fbfb82e282f49fe7ac1e/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b3d16c08a9b4082e5b3fbfb82e282f49fe7ac1e/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=0b3d16c08a9b4082e5b3fbfb82e282f49fe7ac1e", "patch": "@@ -2794,6 +2794,20 @@ package body Sem_Ch12 is\n       Set_Parent_Spec (New_N, Save_Parent);\n       Rewrite (N, New_N);\n \n+      --  The aspect specifications are not attached to the tree, and must\n+      --  be copied and attached to the generic copy explicitly.\n+\n+      if Present (Aspect_Specifications (New_N)) then\n+         declare\n+            Aspects : constant List_Id := Aspect_Specifications (N);\n+         begin\n+            Set_Has_Aspects (N, False);\n+            Move_Aspects (New_N, N);\n+            Set_Has_Aspects (Original_Node (N), False);\n+            Set_Aspect_Specifications (Original_Node (N), Aspects);\n+         end;\n+      end if;\n+\n       Spec := Specification (N);\n       Id := Defining_Entity (Spec);\n       Generate_Definition (Id);\n@@ -2888,16 +2902,42 @@ package body Sem_Ch12 is\n \n       Save_Global_References (Original_Node (N));\n \n+      --  To capture global references, analyze the expressions of aspects,\n+      --  and propagate information to original tree. Note that in this case\n+      --  analysis of attributes is not delayed until the freeze point.\n+      --  It seems very hard to recreate the proper visibility of the generic\n+      --  subprogram at a later point because the analysis of an aspect may\n+      --  create pragmas after the generic copies have been made ???\n+\n+      if Has_Aspects (N) then\n+         declare\n+            Aspect : Node_Id;\n+\n+         begin\n+            Aspect := First (Aspect_Specifications (N));\n+            while Present (Aspect) loop\n+               if Get_Aspect_Id (Chars (Identifier (Aspect)))\n+                  /= Aspect_Warnings\n+               then\n+                  Analyze (Expression (Aspect));\n+               end if;\n+               Next (Aspect);\n+            end loop;\n+\n+            Aspect := First (Aspect_Specifications (Original_Node (N)));\n+            while Present (Aspect) loop\n+               Save_Global_References (Expression (Aspect));\n+               Next (Aspect);\n+            end loop;\n+         end;\n+      end if;\n+\n       End_Generic;\n       End_Scope;\n       Exit_Generic_Scope (Id);\n       Generate_Reference_To_Formals (Id);\n \n       List_Inherited_Pre_Post_Aspects (Id);\n-\n-      if Has_Aspects (N) then\n-         Analyze_Aspect_Specifications (N, Id);\n-      end if;\n    end Analyze_Generic_Subprogram_Declaration;\n \n    -----------------------------------\n@@ -4262,6 +4302,12 @@ package body Sem_Ch12 is\n            Make_Subprogram_Declaration (Sloc (Act_Spec),\n              Specification => Act_Spec);\n \n+         --  The aspects have been copied previously, but they have to be\n+         --  linked explicitly to the new subprogram declaration.\n+         --  Explicit pre/postconditions on the instance are analyzed below,\n+         --  in a separate step.\n+\n+         Move_Aspects (Act_Tree, Act_Decl);\n          Set_Categorization_From_Pragmas (Act_Decl);\n \n          if Parent_Installed then"}, {"sha": "ca160188bf68140a28a8cb872513ec811dbbf60f", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b3d16c08a9b4082e5b3fbfb82e282f49fe7ac1e/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b3d16c08a9b4082e5b3fbfb82e282f49fe7ac1e/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=0b3d16c08a9b4082e5b3fbfb82e282f49fe7ac1e", "patch": "@@ -13902,7 +13902,6 @@ package body Sem_Ch3 is\n       Indic        : constant Node_Id := Subtype_Indication (Def);\n       Extension    : constant Node_Id := Record_Extension_Part (Def);\n       Parent_Node  : Node_Id;\n-      Parent_Scope : Entity_Id;\n       Taggd        : Boolean;\n \n    --  Start of processing for Derived_Type_Declaration\n@@ -14225,25 +14224,18 @@ package body Sem_Ch3 is\n          --  that it is not a Full_Type_Declaration (i.e. a private type or\n          --  private extension declaration), to distinguish a partial view\n          --  from  a derivation from a private type which also appears as\n-         --  E_Private_Type.\n+         --  E_Private_Type. If the parent base type is not declared in an\n+         --  enclosing scope there is no need to check.\n \n          elsif Present (Full_View (Parent_Type))\n            and then Nkind (Parent (Parent_Type)) /= N_Full_Type_Declaration\n            and then not Is_Tagged_Type (Parent_Type)\n            and then Is_Tagged_Type (Full_View (Parent_Type))\n+           and then In_Open_Scopes (Scope (Base_Type (Parent_Type)))\n          then\n-            Parent_Scope := Scope (T);\n-            while Present (Parent_Scope)\n-              and then Parent_Scope /= Standard_Standard\n-            loop\n-               if Parent_Scope = Scope (Parent_Type) then\n-                  Error_Msg_N\n-                    (\"premature derivation from type with tagged full view\",\n-                     Indic);\n-               end if;\n-\n-               Parent_Scope := Scope (Parent_Scope);\n-            end loop;\n+            Error_Msg_N\n+              (\"premature derivation from type with tagged full view\",\n+                Indic);\n          end if;\n       end if;\n "}, {"sha": "3bacf90477157ddd1f05742172b03f67bdbe81a0", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b3d16c08a9b4082e5b3fbfb82e282f49fe7ac1e/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b3d16c08a9b4082e5b3fbfb82e282f49fe7ac1e/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=0b3d16c08a9b4082e5b3fbfb82e282f49fe7ac1e", "patch": "@@ -1738,7 +1738,18 @@ package body Sem_Prag is\n             --  Skip stuff not coming from source\n \n             elsif not Comes_From_Source (PO) then\n-               null;\n+\n+               --  The condition may apply to a subprogram instantiation.\n+\n+               if Nkind (PO) = N_Subprogram_Declaration\n+                 and then Present (Generic_Parent (Specification (PO)))\n+               then\n+                  Chain_PPC (PO);\n+                  return;\n+\n+               else\n+                  null;\n+               end if;\n \n             --  Only remaining possibility is subprogram declaration\n \n@@ -7554,6 +7565,7 @@ package body Sem_Prag is\n                   then\n                      Set_Elaborate_Present (Citem, True);\n                      Set_Unit_Name (Get_Pragma_Arg (Arg), Name (Citem));\n+                     Generate_Reference (Entity (Name (Citem)), Citem);\n \n                      --  With the pragma present, elaboration calls on\n                      --  subprograms from the named unit need no further"}]}