{"sha": "9175051cae8912e5c5a8b7b52c4f2b12fba64c5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE3NTA1MWNhZTg5MTJlNWM1YThiN2I1MmM0ZjJiMTJmYmE2NGM1Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1994-07-31T21:31:00Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1994-07-31T21:31:00Z"}, "message": "(expand_inline_function): Don't fall down trying to\n        pass things by invisible reference.\n\nFrom-SVN: r7842", "tree": {"sha": "7b091d2e5d9555e8fc38c714b8cfc18d4584e47e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b091d2e5d9555e8fc38c714b8cfc18d4584e47e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9175051cae8912e5c5a8b7b52c4f2b12fba64c5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9175051cae8912e5c5a8b7b52c4f2b12fba64c5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9175051cae8912e5c5a8b7b52c4f2b12fba64c5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9175051cae8912e5c5a8b7b52c4f2b12fba64c5f/comments", "author": null, "committer": null, "parents": [{"sha": "02cc38b5eeb613c6139bf03885a806270254b645", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02cc38b5eeb613c6139bf03885a806270254b645", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02cc38b5eeb613c6139bf03885a806270254b645"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "26d766314a99d06bbe0d1555af693e7a4cb5fd75", "filename": "gcc/integrate.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9175051cae8912e5c5a8b7b52c4f2b12fba64c5f/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9175051cae8912e5c5a8b7b52c4f2b12fba64c5f/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=9175051cae8912e5c5a8b7b52c4f2b12fba64c5f", "patch": "@@ -1235,6 +1235,7 @@ expand_inline_function (fndecl, parms, target, ignore, type, structure_value_add\n       tree arg = convert (TREE_TYPE (formal), TREE_VALUE (actual));\n       /* Mode of the variable used within the function.  */\n       enum machine_mode mode = TYPE_MODE (TREE_TYPE (formal));\n+      int invisiref = 0;\n \n       /* Make sure this formal has some correspondence in the users code\n        * before emitting any line notes for it.  */\n@@ -1263,6 +1264,7 @@ expand_inline_function (fndecl, parms, target, ignore, type, structure_value_add\n \t  store_expr (arg, stack_slot, 0);\n \n \t  arg_vals[i] = XEXP (stack_slot, 0);\n+\t  invisiref = 1;\n \t}\n       else if (GET_CODE (loc) != MEM)\n \t{\n@@ -1288,8 +1290,11 @@ expand_inline_function (fndecl, parms, target, ignore, type, structure_value_add\n \t\t be two different pseudos, and `safe_from_p' will make all\n \t\t sorts of smart assumptions about their not conflicting.\n \t\t But if ARG_VALS[I] overlaps TARGET, these assumptions are\n-\t\t wrong, so put ARG_VALS[I] into a fresh register.  */\n+\t\t wrong, so put ARG_VALS[I] into a fresh register.\n+\t\t Don't worry about invisible references, since their stack\n+\t\t temps will never overlap the target.  */\n \t      || (target != 0\n+\t\t  && ! invisiref\n \t\t  && (GET_CODE (arg_vals[i]) == REG\n \t\t      || GET_CODE (arg_vals[i]) == SUBREG\n \t\t      || GET_CODE (arg_vals[i]) == MEM)"}]}