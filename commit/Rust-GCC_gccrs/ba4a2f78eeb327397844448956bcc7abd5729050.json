{"sha": "ba4a2f78eeb327397844448956bcc7abd5729050", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE0YTJmNzhlZWIzMjczOTc4NDQ0NDg5NTZiY2M3YWJkNTcyOTA1MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-17T09:06:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-17T09:06:20Z"}, "message": "[multiple changes]\n\n2009-04-17  Pascal Obry  <obry@adacore.com>\n\n\t* initialize.c: Set gnat_argv with UTF-8 encoded strings on Windows.\n\n\t* adaint.h, argv.c, bindgen.adb: Reverted to previous version.\n\n2009-04-17  Robert Dewar  <dewar@adacore.com>\n\n\t* a-except.adb, a-except-2005.adb: Add PE_Address_Of_Intrinsic\n\n\t* sem_attr.adb (Analyze_Attribute, case Address): Use\n\tPE_Address_Of_Intrinsic.\n\n\t* types.ads: Add PE_Address_Of_Intrinsic\n\n\t* types.h: Add PE_Address_Of_Intrinsic\n\nFrom-SVN: r146226", "tree": {"sha": "756c6f16bfba7fb26f0b99204170088a8412a739", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/756c6f16bfba7fb26f0b99204170088a8412a739"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba4a2f78eeb327397844448956bcc7abd5729050", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba4a2f78eeb327397844448956bcc7abd5729050", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba4a2f78eeb327397844448956bcc7abd5729050", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba4a2f78eeb327397844448956bcc7abd5729050/comments", "author": null, "committer": null, "parents": [{"sha": "78246a6e7541ef1c2008e68e54c941d694926fcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78246a6e7541ef1c2008e68e54c941d694926fcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78246a6e7541ef1c2008e68e54c941d694926fcd"}], "stats": {"total": 325, "additions": 157, "deletions": 168}, "files": [{"sha": "e9b46c6e20c852f136e439daeba21be49b529aae", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4a2f78eeb327397844448956bcc7abd5729050/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4a2f78eeb327397844448956bcc7abd5729050/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ba4a2f78eeb327397844448956bcc7abd5729050", "patch": "@@ -1,17 +1,24 @@\n-2009-04-17  Nicolas Setton  <setton@adacore.com>\n+2009-04-17  Pascal Obry  <obry@adacore.com>\n \n-\t* gcc-interface/Makefile.in: Under darwin, build shared libraries\n-\twith install_name starting with \"@rpath/\".\n+\t* initialize.c: Set gnat_argv with UTF-8 encoded strings on Windows.\n \n-2009-04-17  Pascal Obry  <obry@adacore.com>\n+\t* init.c: Fix minor typo and style fix.\n \n-\t* adaint.h, argv.c (__gnat_init_args): New routine used to initialize\n-\tcommand line arguments.\n+2009-04-17  Robert Dewar  <dewar@adacore.com>\n \n-\t* bindgen.adb: Call __gnat_init_args instead of simple assignments of\n-\targc, argv and envp parameters.\n+\t* a-except.adb, a-except-2005.adb: Add PE_Address_Of_Intrinsic\n \n-\t* init.c: Fix minor typo and style fix.\n+\t* sem_attr.adb (Analyze_Attribute, case Address): Use\n+\tPE_Address_Of_Intrinsic.\n+\n+\t* types.ads: Add PE_Address_Of_Intrinsic\n+\n+\t* types.h: Add PE_Address_Of_Intrinsic\n+\n+2009-04-17  Nicolas Setton  <setton@adacore.com>\n+\n+\t* gcc-interface/Makefile.in: Under darwin, build shared libraries\n+\twith install_name starting with \"@rpath/\".\n \n 2009-04-17  Nicolas Setton  <setton@adacore.com>\n "}, {"sha": "ad43e2121d1c78d86e835868966951b1056b7675", "filename": "gcc/ada/a-except-2005.adb", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4a2f78eeb327397844448956bcc7abd5729050/gcc%2Fada%2Fa-except-2005.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4a2f78eeb327397844448956bcc7abd5729050/gcc%2Fada%2Fa-except-2005.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.adb?ref=ba4a2f78eeb327397844448956bcc7abd5729050", "patch": "@@ -457,6 +457,7 @@ package body Ada.Exceptions is\n    procedure Rcheck_30 (File : System.Address; Line : Integer);\n    procedure Rcheck_31 (File : System.Address; Line : Integer);\n    procedure Rcheck_32 (File : System.Address; Line : Integer);\n+   procedure Rcheck_33 (File : System.Address; Line : Integer);\n \n    pragma Export (C, Rcheck_00, \"__gnat_rcheck_00\");\n    pragma Export (C, Rcheck_01, \"__gnat_rcheck_01\");\n@@ -491,6 +492,7 @@ package body Ada.Exceptions is\n    pragma Export (C, Rcheck_30, \"__gnat_rcheck_30\");\n    pragma Export (C, Rcheck_31, \"__gnat_rcheck_31\");\n    pragma Export (C, Rcheck_32, \"__gnat_rcheck_32\");\n+   pragma Export (C, Rcheck_33, \"__gnat_rcheck_33\");\n \n    --  None of these procedures ever returns (they raise an exception!). By\n    --  using pragma No_Return, we ensure that any junk code after the call,\n@@ -528,6 +530,7 @@ package body Ada.Exceptions is\n    pragma No_Return (Rcheck_29);\n    pragma No_Return (Rcheck_30);\n    pragma No_Return (Rcheck_32);\n+   pragma No_Return (Rcheck_33);\n \n    ---------------------------------------------\n    -- Reason Strings for Run-Time Check Calls --\n@@ -554,25 +557,27 @@ package body Ada.Exceptions is\n    Rmsg_13 : constant String := \"tag check failed\"                 & NUL;\n    Rmsg_14 : constant String := \"access before elaboration\"        & NUL;\n    Rmsg_15 : constant String := \"accessibility check failed\"       & NUL;\n-   Rmsg_16 : constant String := \"all guards closed\"                & NUL;\n-   Rmsg_17 : constant String := \"Current_Task referenced in entry\" &\n+   Rmsg_16 : constant String := \"attempt to take address of\"       &\n+                                \" intrinsic subprogram\"            & NUL;\n+   Rmsg_17 : constant String := \"all guards closed\"                & NUL;\n+   Rmsg_18 : constant String := \"Current_Task referenced in entry\" &\n                                 \" body\"                            & NUL;\n-   Rmsg_18 : constant String := \"duplicated entry address\"         & NUL;\n-   Rmsg_19 : constant String := \"explicit raise\"                   & NUL;\n-   Rmsg_20 : constant String := \"finalize/adjust raised exception\" & NUL;\n-   Rmsg_21 : constant String := \"implicit return with No_Return\"   & NUL;\n-   Rmsg_22 : constant String := \"misaligned address value\"         & NUL;\n-   Rmsg_23 : constant String := \"missing return\"                   & NUL;\n-   Rmsg_24 : constant String := \"overlaid controlled object\"       & NUL;\n-   Rmsg_25 : constant String := \"potentially blocking operation\"   & NUL;\n-   Rmsg_26 : constant String := \"stubbed subprogram called\"        & NUL;\n-   Rmsg_27 : constant String := \"unchecked union restriction\"      & NUL;\n-   Rmsg_28 : constant String := \"actual/returned class-wide value \"\n-                                & \"not transportable\"              & NUL;\n-   Rmsg_29 : constant String := \"empty storage pool\"               & NUL;\n-   Rmsg_30 : constant String := \"explicit raise\"                   & NUL;\n-   Rmsg_31 : constant String := \"infinite recursion\"               & NUL;\n-   Rmsg_32 : constant String := \"object too large\"                 & NUL;\n+   Rmsg_19 : constant String := \"duplicated entry address\"         & NUL;\n+   Rmsg_20 : constant String := \"explicit raise\"                   & NUL;\n+   Rmsg_21 : constant String := \"finalize/adjust raised exception\" & NUL;\n+   Rmsg_22 : constant String := \"implicit return with No_Return\"   & NUL;\n+   Rmsg_23 : constant String := \"misaligned address value\"         & NUL;\n+   Rmsg_24 : constant String := \"missing return\"                   & NUL;\n+   Rmsg_25 : constant String := \"overlaid controlled object\"       & NUL;\n+   Rmsg_26 : constant String := \"potentially blocking operation\"   & NUL;\n+   Rmsg_27 : constant String := \"stubbed subprogram called\"        & NUL;\n+   Rmsg_28 : constant String := \"unchecked union restriction\"      & NUL;\n+   Rmsg_29 : constant String := \"actual/returned class-wide\"       &\n+                                \" value not transportable\"         & NUL;\n+   Rmsg_30 : constant String := \"empty storage pool\"               & NUL;\n+   Rmsg_31 : constant String := \"explicit raise\"                   & NUL;\n+   Rmsg_32 : constant String := \"infinite recursion\"               & NUL;\n+   Rmsg_33 : constant String := \"object too large\"                 & NUL;\n \n    -----------------------\n    -- Polling Interface --\n@@ -1161,7 +1166,7 @@ package body Ada.Exceptions is\n \n    procedure Rcheck_29 (File : System.Address; Line : Integer) is\n    begin\n-      Raise_Storage_Error_Msg (File, Line, Rmsg_29'Address);\n+      Raise_Program_Error_Msg (File, Line, Rmsg_29'Address);\n    end Rcheck_29;\n \n    procedure Rcheck_30 (File : System.Address; Line : Integer) is\n@@ -1179,6 +1184,11 @@ package body Ada.Exceptions is\n       Raise_Storage_Error_Msg (File, Line, Rmsg_32'Address);\n    end Rcheck_32;\n \n+   procedure Rcheck_33 (File : System.Address; Line : Integer) is\n+   begin\n+      Raise_Storage_Error_Msg (File, Line, Rmsg_33'Address);\n+   end Rcheck_33;\n+\n    -------------\n    -- Reraise --\n    -------------"}, {"sha": "229645ac8f9099ed21d21cf22a589cbb4e313911", "filename": "gcc/ada/a-except.adb", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4a2f78eeb327397844448956bcc7abd5729050/gcc%2Fada%2Fa-except.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4a2f78eeb327397844448956bcc7abd5729050/gcc%2Fada%2Fa-except.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except.adb?ref=ba4a2f78eeb327397844448956bcc7abd5729050", "patch": "@@ -414,6 +414,7 @@ package body Ada.Exceptions is\n    procedure Rcheck_30 (File : System.Address; Line : Integer);\n    procedure Rcheck_31 (File : System.Address; Line : Integer);\n    procedure Rcheck_32 (File : System.Address; Line : Integer);\n+   procedure Rcheck_33 (File : System.Address; Line : Integer);\n \n    pragma Export (C, Rcheck_00, \"__gnat_rcheck_00\");\n    pragma Export (C, Rcheck_01, \"__gnat_rcheck_01\");\n@@ -448,6 +449,7 @@ package body Ada.Exceptions is\n    pragma Export (C, Rcheck_30, \"__gnat_rcheck_30\");\n    pragma Export (C, Rcheck_31, \"__gnat_rcheck_31\");\n    pragma Export (C, Rcheck_32, \"__gnat_rcheck_32\");\n+   pragma Export (C, Rcheck_33, \"__gnat_rcheck_33\");\n \n    --  None of these procedures ever returns (they raise an exception!). By\n    --  using pragma No_Return, we ensure that any junk code after the call,\n@@ -485,6 +487,7 @@ package body Ada.Exceptions is\n    pragma No_Return (Rcheck_29);\n    pragma No_Return (Rcheck_30);\n    pragma No_Return (Rcheck_32);\n+   pragma No_Return (Rcheck_33);\n \n    ---------------------------------------------\n    -- Reason Strings for Run-Time Check Calls --\n@@ -511,25 +514,27 @@ package body Ada.Exceptions is\n    Rmsg_13 : constant String := \"tag check failed\"                 & NUL;\n    Rmsg_14 : constant String := \"access before elaboration\"        & NUL;\n    Rmsg_15 : constant String := \"accessibility check failed\"       & NUL;\n-   Rmsg_16 : constant String := \"all guards closed\"                & NUL;\n-   Rmsg_17 : constant String := \"Current_Task referenced in entry\" &\n+   Rmsg_16 : constant String := \"attempt to take address of\"       &\n+                                \" intrinsic subprogram\"            & NUL;\n+   Rmsg_17 : constant String := \"all guards closed\"                & NUL;\n+   Rmsg_18 : constant String := \"Current_Task referenced in entry\" &\n                                 \" body\"                            & NUL;\n-   Rmsg_18 : constant String := \"duplicated entry address\"         & NUL;\n-   Rmsg_19 : constant String := \"explicit raise\"                   & NUL;\n-   Rmsg_20 : constant String := \"finalize/adjust raised exception\" & NUL;\n-   Rmsg_21 : constant String := \"implicit return with No_Return\"   & NUL;\n-   Rmsg_22 : constant String := \"misaligned address value\"         & NUL;\n-   Rmsg_23 : constant String := \"missing return\"                   & NUL;\n-   Rmsg_24 : constant String := \"overlaid controlled object\"       & NUL;\n-   Rmsg_25 : constant String := \"potentially blocking operation\"   & NUL;\n-   Rmsg_26 : constant String := \"stubbed subprogram called\"        & NUL;\n-   Rmsg_27 : constant String := \"unchecked union restriction\"      & NUL;\n-   Rmsg_28 : constant String := \"actual/returned class-wide value \"\n-                                & \"not transportable\"              & NUL;\n-   Rmsg_29 : constant String := \"empty storage pool\"               & NUL;\n-   Rmsg_30 : constant String := \"explicit raise\"                   & NUL;\n-   Rmsg_31 : constant String := \"infinite recursion\"               & NUL;\n-   Rmsg_32 : constant String := \"object too large\"                 & NUL;\n+   Rmsg_19 : constant String := \"duplicated entry address\"         & NUL;\n+   Rmsg_20 : constant String := \"explicit raise\"                   & NUL;\n+   Rmsg_21 : constant String := \"finalize/adjust raised exception\" & NUL;\n+   Rmsg_22 : constant String := \"implicit return with No_Return\"   & NUL;\n+   Rmsg_23 : constant String := \"misaligned address value\"         & NUL;\n+   Rmsg_24 : constant String := \"missing return\"                   & NUL;\n+   Rmsg_25 : constant String := \"overlaid controlled object\"       & NUL;\n+   Rmsg_26 : constant String := \"potentially blocking operation\"   & NUL;\n+   Rmsg_27 : constant String := \"stubbed subprogram called\"        & NUL;\n+   Rmsg_28 : constant String := \"unchecked union restriction\"      & NUL;\n+   Rmsg_29 : constant String := \"actual/returned class-wide\"       &\n+                                \" value not transportable\"         & NUL;\n+   Rmsg_30 : constant String := \"empty storage pool\"               & NUL;\n+   Rmsg_31 : constant String := \"explicit raise\"                   & NUL;\n+   Rmsg_32 : constant String := \"infinite recursion\"               & NUL;\n+   Rmsg_33 : constant String := \"object too large\"                 & NUL;\n \n    -----------------------\n    -- Polling Interface --\n@@ -1127,7 +1132,7 @@ package body Ada.Exceptions is\n \n    procedure Rcheck_29 (File : System.Address; Line : Integer) is\n    begin\n-      Raise_Storage_Error_Msg (File, Line, Rmsg_29'Address);\n+      Raise_Program_Error_Msg (File, Line, Rmsg_29'Address);\n    end Rcheck_29;\n \n    procedure Rcheck_30 (File : System.Address; Line : Integer) is\n@@ -1145,6 +1150,11 @@ package body Ada.Exceptions is\n       Raise_Storage_Error_Msg (File, Line, Rmsg_32'Address);\n    end Rcheck_32;\n \n+   procedure Rcheck_33 (File : System.Address; Line : Integer) is\n+   begin\n+      Raise_Storage_Error_Msg (File, Line, Rmsg_33'Address);\n+   end Rcheck_33;\n+\n    -------------\n    -- Reraise --\n    -------------"}, {"sha": "5ed4d76a91b6b02a5a6b16b0e2cbef3f955fce96", "filename": "gcc/ada/adaint.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4a2f78eeb327397844448956bcc7abd5729050/gcc%2Fada%2Fadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4a2f78eeb327397844448956bcc7abd5729050/gcc%2Fada%2Fadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.h?ref=ba4a2f78eeb327397844448956bcc7abd5729050", "patch": "@@ -142,7 +142,6 @@ extern FILE  *__gnat_constant_stdin\t  \t   (void);\n extern FILE  *__gnat_constant_stdout\t  \t   (void);\n extern char  *__gnat_full_name\t\t  \t   (char *, char *);\n \n-extern void   __gnat_init_args                     (int, char **, char **);\n extern int    __gnat_arg_count\t\t\t   (void);\n extern int    __gnat_len_arg\t\t\t   (int);\n extern void   __gnat_fill_arg\t\t\t   (char *, int);"}, {"sha": "b827b030f1eab9380e148d5f78ea6d0481e5df31", "filename": "gcc/ada/argv.c", "status": "modified", "additions": 4, "deletions": 48, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4a2f78eeb327397844448956bcc7abd5729050/gcc%2Fada%2Fargv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4a2f78eeb327397844448956bcc7abd5729050/gcc%2Fada%2Fargv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fargv.c?ref=ba4a2f78eeb327397844448956bcc7abd5729050", "patch": "@@ -46,73 +46,29 @@\n #include \"tconfig.h\"\n #include \"tsystem.h\"\n #include <sys/stat.h>\n-/* We don't have libiberty, so use malloc.  */\n-#define xmalloc(S) malloc (S)\n #else\n #include \"config.h\"\n #include \"system.h\"\n #endif\n \n+#include \"adaint.h\"\n+\n /* argc and argv of the main program are saved under gnat_argc and gnat_argv,\n    envp of the main program is saved under gnat_envp.  */\n \n int gnat_argc = 0;\n-char **gnat_argv = (char **) 0;\n+const char **gnat_argv = (const char **) 0;\n const char **gnat_envp = (const char **) 0;\n \n #if defined (_WIN32) && !defined (RTX)\n /* Note that on Windows environment the environ point to a buffer that could\n    be reallocated if needed. It means that gnat_envp needs to be updated\n-   before using gnat_envp to point to the right environment space. */\n-#include \"mingw32.h\"\n-#include <windows.h>\n+   before using gnat_envp to point to the right environment space */\n #include <stdlib.h>\n /* for the environ variable definition */\n #define gnat_envp (environ)\n #endif\n \n-#include \"adaint.h\"\n-\n-void\n-__gnat_init_args (int argc, char **argv ATTRIBUTE_UNUSED, char **envp)\n-{\n-#if defined (_WIN32) && ! defined (__vxworks) && ! defined (CROSS_COMPILE)\n-  char arg_utf8[MAX_PATH];\n-  LPWSTR *wargv;\n-  int wargc;\n-  int k;\n-\n-  wargv = CommandLineToArgvW (GetCommandLineW(), &wargc);\n-\n-  if (wargv == NULL)\n-    {\n-      /* CommandLineToArgvW was not successful, use standard argc/argv. */\n-      gnat_argv = argv;\n-      gnat_argc = argc;\n-    }\n-  else\n-    {\n-      /* Set gnat_argv with arguments encoded in UTF-8. */\n-      gnat_argv = (char **) xmalloc ((wargc + 1) * sizeof (char *));\n-\n-      for (k=0; k<wargc; k++)\n-\t{\n-\t  WS2SU (arg_utf8, wargv[k], MAX_PATH);\n-\t  gnat_argv[k] = (char *) xmalloc (strlen (arg_utf8) + 1);\n-\t  strcpy (gnat_argv[k], arg_utf8);\n-\t}\n-\n-      LocalFree (wargv);\n-      gnat_argc = wargc;\n-    }\n-#else\n-  gnat_argv = argv;\n-  gnat_argc = argc;\n-#endif\n-\n-  gnat_envp = envp;\n-}\n-\n int\n __gnat_arg_count (void)\n {"}, {"sha": "ce81c7ae0058ac8a6cb0f420e1238a60971bb112", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 6, "deletions": 31, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4a2f78eeb327397844448956bcc7abd5729050/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4a2f78eeb327397844448956bcc7abd5729050/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=ba4a2f78eeb327397844448956bcc7abd5729050", "patch": "@@ -1456,17 +1456,6 @@ package body Bindgen is\n \n          WBI (\"   is\");\n \n-         --  ??? the following code needs commenting\n-\n-         if not Configurable_Run_Time_Mode then\n-            WBI (\"      procedure Init_Args\");\n-            WBI (\"        (argc : Integer;\");\n-            WBI (\"         argv : System.Address;\");\n-            WBI (\"         envp : System.Address);\");\n-            WBI (\"      pragma Import (C, Init_Args, \"\"__gnat_init_args\"\");\");\n-            WBI (\"\");\n-         end if;\n-\n       else\n          if Exit_Status_Supported_On_Target then\n             Set_String (\" return Integer is\");\n@@ -1580,16 +1569,9 @@ package body Bindgen is\n       --  Acquire command line arguments if present on target\n \n       if Command_Line_Args_On_Target then\n-         if Configurable_Run_Time_Mode then\n-            WBI (\"      gnat_argc := argc;\");\n-            WBI (\"      gnat_argv := argv;\");\n-            WBI (\"      gnat_envp := envp;\");\n-\n-         --  ??? this else needs a comment\n-         else\n-            WBI (\"      Init_Args (argc, argv, envp);\");\n-         end if;\n-\n+         WBI (\"      gnat_argc := argc;\");\n+         WBI (\"      gnat_argv := argv;\");\n+         WBI (\"      gnat_envp := envp;\");\n          WBI (\"\");\n \n       --  If configurable run time and no command line args, then nothing\n@@ -1750,16 +1732,9 @@ package body Bindgen is\n       --  arguments are present on target\n \n       if Command_Line_Args_On_Target then\n-         if Configurable_Run_Time_Mode then\n-            WBI (\"   gnat_argc = argc;\");\n-            WBI (\"   gnat_argv = argv;\");\n-            WBI (\"   gnat_envp = envp;\");\n-\n-         --  ??? this call must be commented\n-         else\n-            WBI (\"   __gnat_init_args (argc, argv, envp);\");\n-         end if;\n-\n+         WBI (\"   gnat_argc = argc;\");\n+         WBI (\"   gnat_argv = argv;\");\n+         WBI (\"   gnat_envp = envp;\");\n          WBI (\" \");\n \n       --  If configurable run-time, then nothing to do, since in this case"}, {"sha": "5e7b2ff133a59b51b8ecfeb8b92a632bb0c30a0a", "filename": "gcc/ada/initialize.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4a2f78eeb327397844448956bcc7abd5729050/gcc%2Fada%2Finitialize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4a2f78eeb327397844448956bcc7abd5729050/gcc%2Fada%2Finitialize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finitialize.c?ref=ba4a2f78eeb327397844448956bcc7abd5729050", "patch": "@@ -43,6 +43,8 @@\n #ifdef IN_RTS\n #include \"tconfig.h\"\n #include \"tsystem.h\"\n+/* We don't have libiberty, so use malloc.  */\n+#define xmalloc(S) malloc (S)\n #else\n #include \"config.h\"\n #include \"system.h\"\n@@ -55,11 +57,15 @@\n /******************************************/\n \n #if defined (__MINGW32__)\n+#include \"mingw32.h\"\n #include <windows.h>\n \n extern void __gnat_init_float (void);\n extern void __gnat_install_SEH_handler (void *);\n \n+extern int gnat_argc;\n+extern char **gnat_argv;\n+\n #ifndef RTX\n /* Do not define for RTX since it is only used for creating child processes\n    which is not supported in RTX. */\n@@ -75,6 +81,32 @@ __gnat_initialize (void *eh)\n       given that we have set Max_Digits etc with this in mind */\n    __gnat_init_float ();\n \n+   /* Adjust gnat_argv to support Unicode characters. */\n+   {\n+     char arg_utf8[MAX_PATH];\n+     LPWSTR *wargv;\n+     int wargc;\n+     int k;\n+\n+     wargv = CommandLineToArgvW (GetCommandLineW(), &wargc);\n+\n+     if (wargv != NULL)\n+       {\n+\t /* Set gnat_argv with arguments encoded in UTF-8. */\n+\t gnat_argv = (char **) xmalloc ((wargc + 1) * sizeof (char *));\n+\n+\t for (k=0; k<wargc; k++)\n+\t   {\n+\t     WS2SU (arg_utf8, wargv[k], MAX_PATH);\n+\t     gnat_argv[k] = (char *) xmalloc (strlen (arg_utf8) + 1);\n+\t     strcpy (gnat_argv[k], arg_utf8);\n+\t   }\n+\n+\t LocalFree (wargv);\n+\t gnat_argc = wargc;\n+       }\n+    }\n+\n    /* Note that we do not activate this for the compiler itself to avoid a\n       bootstrap path problem.  Older version of gnatbind will generate a call\n       to __gnat_initialize() without argument. Therefore we cannot use eh in"}, {"sha": "c043c4fd89e57b91d311696c02607ec1a7c11d5e", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4a2f78eeb327397844448956bcc7abd5729050/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4a2f78eeb327397844448956bcc7abd5729050/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=ba4a2f78eeb327397844448956bcc7abd5729050", "patch": "@@ -2060,9 +2060,7 @@ package body Sem_Attr is\n                      if In_Instance then\n                         Rewrite (N,\n                           Make_Raise_Program_Error (Loc,\n-                            Reason => PE_Misaligned_Address_Value));\n-                        --   ??? why Misaligned_Address_Value, seems wrong\n-\n+                            Reason => PE_Address_Of_Intrinsic));\n                      else\n                         Error_Msg_N\n                          (\"cannot take Address of intrinsic subprogram\", N);"}, {"sha": "3b89ab25d0b62549f5eb7870a73ed9a9cd86eb3e", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4a2f78eeb327397844448956bcc7abd5729050/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4a2f78eeb327397844448956bcc7abd5729050/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=ba4a2f78eeb327397844448956bcc7abd5729050", "patch": "@@ -787,24 +787,25 @@ package Types is\n \n       PE_Access_Before_Elaboration,      -- 14\n       PE_Accessibility_Check_Failed,     -- 15\n-      PE_All_Guards_Closed,              -- 16\n-      PE_Current_Task_In_Entry_Body,     -- 17\n-      PE_Duplicated_Entry_Address,       -- 18\n-      PE_Explicit_Raise,                 -- 19\n-      PE_Finalize_Raised_Exception,      -- 20\n-      PE_Implicit_Return,                -- 21\n-      PE_Misaligned_Address_Value,       -- 22\n-      PE_Missing_Return,                 -- 23\n-      PE_Overlaid_Controlled_Object,     -- 24\n-      PE_Potentially_Blocking_Operation, -- 25\n-      PE_Stubbed_Subprogram_Called,      -- 26\n-      PE_Unchecked_Union_Restriction,    -- 27\n-      PE_Non_Transportable_Actual,       -- 28\n-\n-      SE_Empty_Storage_Pool,             -- 29\n-      SE_Explicit_Raise,                 -- 30\n-      SE_Infinite_Recursion,             -- 31\n-      SE_Object_Too_Large);              -- 32\n+      PE_Address_Of_Intrinsic,           -- 16\n+      PE_All_Guards_Closed,              -- 17\n+      PE_Current_Task_In_Entry_Body,     -- 18\n+      PE_Duplicated_Entry_Address,       -- 19\n+      PE_Explicit_Raise,                 -- 20\n+      PE_Finalize_Raised_Exception,      -- 21\n+      PE_Implicit_Return,                -- 22\n+      PE_Misaligned_Address_Value,       -- 23\n+      PE_Missing_Return,                 -- 24\n+      PE_Overlaid_Controlled_Object,     -- 25\n+      PE_Potentially_Blocking_Operation, -- 26\n+      PE_Stubbed_Subprogram_Called,      -- 27\n+      PE_Unchecked_Union_Restriction,    -- 28\n+      PE_Non_Transportable_Actual,       -- 29\n+\n+      SE_Empty_Storage_Pool,             -- 30\n+      SE_Explicit_Raise,                 -- 31\n+      SE_Infinite_Recursion,             -- 32\n+      SE_Object_Too_Large);              -- 33\n \n    subtype RT_CE_Exceptions is RT_Exception_Code range\n      CE_Access_Check_Failed .."}, {"sha": "9b2cc9036bde6efcc4042132c053265555328c96", "filename": "gcc/ada/types.h", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4a2f78eeb327397844448956bcc7abd5729050/gcc%2Fada%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4a2f78eeb327397844448956bcc7abd5729050/gcc%2Fada%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.h?ref=ba4a2f78eeb327397844448956bcc7abd5729050", "patch": "@@ -359,23 +359,24 @@ typedef Int Mechanism_Type;\n \n #define PE_Access_Before_Elaboration       14\n #define PE_Accessibility_Check_Failed      15\n-#define PE_All_Guards_Closed               16\n-#define PE_Current_Task_In_Entry_Body      17\n-#define PE_Duplicated_Entry_Address        18\n-#define PE_Explicit_Raise                  19\n-#define PE_Finalize_Raised_Exception       20\n-#define PE_Implicit_Return                 21\n-#define PE_Misaligned_Address_Value        22\n-#define PE_Missing_Return                  23\n-#define PE_Overlaid_Controlled_Object      24\n-#define PE_Potentially_Blocking_Operation  25\n-#define PE_Stubbed_Subprogram_Called       26\n-#define PE_Unchecked_Union_Restriction     27\n-#define PE_Non_Transportable_Actual        28\n-\n-#define SE_Empty_Storage_Pool              29\n-#define SE_Explicit_Raise                  30\n-#define SE_Infinite_Recursion              31\n-#define SE_Object_Too_Large                32\n-\n-#define LAST_REASON_CODE                   32\n+#define PE_Address_Of_Intrinsic            16\n+#define PE_All_Guards_Closed               17\n+#define PE_Current_Task_In_Entry_Body      18\n+#define PE_Duplicated_Entry_Address        19\n+#define PE_Explicit_Raise                  20\n+#define PE_Finalize_Raised_Exception       21\n+#define PE_Implicit_Return                 22\n+#define PE_Misaligned_Address_Value        23\n+#define PE_Missing_Return                  24\n+#define PE_Overlaid_Controlled_Object      25\n+#define PE_Potentially_Blocking_Operation  26\n+#define PE_Stubbed_Subprogram_Called       27\n+#define PE_Unchecked_Union_Restriction     28\n+#define PE_Non_Transportable_Actual        29\n+\n+#define SE_Empty_Storage_Pool              30\n+#define SE_Explicit_Raise                  31\n+#define SE_Infinite_Recursion              32\n+#define SE_Object_Too_Large                33\n+\n+#define LAST_REASON_CODE                   33"}]}