{"sha": "75a7176575c409940b66020def23508f5701f5fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVhNzE3NjU3NWM0MDk5NDBiNjYwMjBkZWYyMzUwOGY1NzAxZjVmYg==", "commit": {"author": {"name": "Jeff Law", "email": "jlaw@localhost.localdomain", "date": "2021-08-17T02:23:30Z"}, "committer": {"name": "Jeff Law", "email": "jlaw@localhost.localdomain", "date": "2021-08-17T02:26:35Z"}, "message": "Improve SImode shifts for H8\n\nSimilar to the H8/300H patch, this improves SImode shifts for the H8/S.\nIt's not as big a win on the H8/S since we can shift two positions at a\ntime.  But that also means that we can handle more residuals with minimal\node growth after a special shift-by-16 or shift-by-24 sequence.\n\nI think there's more to do here, but this seemed like as good a checkpoint\nas any.  Tested without regressions.\n\ngcc/\n\t* config/h8300/h8300.c (shift_alg_si): Avoid loops for most SImode\n\tshifts on the H8/S.\n\t(h8300_option_override): Use loops on H8/S more often when optimizing\n\tfor size.\n\t(get_shift_alg): Handle new \"special\" cases on H8/S.  Simplify\n\taccordingly.  Handle various arithmetic right shifts with special\n\tsequences that we couldn't handle before.", "tree": {"sha": "73549b2950c9464e7c6a8141e713115bdd5224f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73549b2950c9464e7c6a8141e713115bdd5224f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75a7176575c409940b66020def23508f5701f5fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75a7176575c409940b66020def23508f5701f5fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75a7176575c409940b66020def23508f5701f5fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75a7176575c409940b66020def23508f5701f5fb/comments", "author": null, "committer": null, "parents": [{"sha": "d56607c16deb278918cf0febba62263c39041039", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d56607c16deb278918cf0febba62263c39041039", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d56607c16deb278918cf0febba62263c39041039"}], "stats": {"total": 69, "additions": 53, "deletions": 16}, "files": [{"sha": "0c4e50897912dd682eb3a9ce7324021697cb1785", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 53, "deletions": 16, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a7176575c409940b66020def23508f5701f5fb/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a7176575c409940b66020def23508f5701f5fb/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=75a7176575c409940b66020def23508f5701f5fb", "patch": "@@ -248,17 +248,17 @@ static enum shift_alg shift_alg_si[2][3][32] = {\n     /* 16   17   18   19   20   21   22   23  */\n     /* 24   25   26   27   28   29   30   31  */\n     { INL, INL, INL, INL, INL, INL, INL, INL,\n-      INL, INL, INL, LOP, LOP, LOP, LOP, SPC,\n-      SPC, SPC, SPC, SPC, SPC, SPC, LOP, LOP,\n-      SPC, SPC, LOP, LOP, SPC, SPC, SPC, SPC }, /* SHIFT_ASHIFT   */\n+      INL, INL, INL, INL, INL, INL, INL, SPC,\n+      SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC,\n+      SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC }, /* SHIFT_ASHIFT   */\n     { INL, INL, INL, INL, INL, INL, INL, INL,\n-      INL, INL, INL, LOP, LOP, LOP, LOP, SPC,\n-      SPC, SPC, SPC, SPC, SPC, SPC, LOP, LOP,\n-      SPC, SPC, LOP, LOP, SPC, SPC, SPC, SPC }, /* SHIFT_LSHIFTRT */\n+      INL, INL, INL, INL, INL, INL, INL, SPC,\n+      SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC,\n+      SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC }, /* SHIFT_LSHIFTRT */\n     { INL, INL, INL, INL, INL, INL, INL, INL,\n-      INL, INL, INL, LOP, LOP, LOP, LOP, LOP,\n-      SPC, SPC, SPC, SPC, SPC, SPC, LOP, LOP,\n-      SPC, SPC, LOP, LOP, LOP, LOP, LOP, SPC }, /* SHIFT_ASHIFTRT */\n+      INL, INL, INL, INL, INL, INL, INL, LOP,\n+      SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC,\n+      SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC }, /* SHIFT_ASHIFTRT */\n   }\n };\n \n@@ -375,6 +375,36 @@ h8300_option_override (void)\n \n       /* H8S */\n       shift_alg_hi[H8_S][SHIFT_ASHIFTRT][14] = SHIFT_LOOP;\n+\n+      shift_alg_si[H8_S][SHIFT_ASHIFT][11] = SHIFT_LOOP;\n+      shift_alg_si[H8_S][SHIFT_ASHIFT][12] = SHIFT_LOOP;\n+      shift_alg_si[H8_S][SHIFT_ASHIFT][13] = SHIFT_LOOP;\n+      shift_alg_si[H8_S][SHIFT_ASHIFT][14] = SHIFT_LOOP;\n+      shift_alg_si[H8_S][SHIFT_ASHIFT][22] = SHIFT_LOOP;\n+      shift_alg_si[H8_S][SHIFT_ASHIFT][23] = SHIFT_LOOP;\n+      shift_alg_si[H8_S][SHIFT_ASHIFT][26] = SHIFT_LOOP;\n+      shift_alg_si[H8_S][SHIFT_ASHIFT][27] = SHIFT_LOOP;\n+\n+      shift_alg_si[H8_S][SHIFT_LSHIFTRT][11] = SHIFT_LOOP;\n+      shift_alg_si[H8_S][SHIFT_LSHIFTRT][12] = SHIFT_LOOP;\n+      shift_alg_si[H8_S][SHIFT_LSHIFTRT][13] = SHIFT_LOOP;\n+      shift_alg_si[H8_S][SHIFT_LSHIFTRT][14] = SHIFT_LOOP;\n+      shift_alg_si[H8_S][SHIFT_LSHIFTRT][22] = SHIFT_LOOP;\n+      shift_alg_si[H8_S][SHIFT_LSHIFTRT][23] = SHIFT_LOOP;\n+      shift_alg_si[H8_S][SHIFT_LSHIFTRT][26] = SHIFT_LOOP;\n+      shift_alg_si[H8_S][SHIFT_LSHIFTRT][27] = SHIFT_LOOP;\n+\n+      shift_alg_si[H8_S][SHIFT_ASHIFTRT][11] = SHIFT_LOOP;\n+      shift_alg_si[H8_S][SHIFT_ASHIFTRT][12] = SHIFT_LOOP;\n+      shift_alg_si[H8_S][SHIFT_ASHIFTRT][13] = SHIFT_LOOP;\n+      shift_alg_si[H8_S][SHIFT_ASHIFTRT][14] = SHIFT_LOOP;\n+      shift_alg_si[H8_S][SHIFT_ASHIFTRT][22] = SHIFT_LOOP;\n+      shift_alg_si[H8_S][SHIFT_ASHIFTRT][23] = SHIFT_LOOP;\n+      shift_alg_si[H8_S][SHIFT_ASHIFTRT][26] = SHIFT_LOOP;\n+      shift_alg_si[H8_S][SHIFT_ASHIFTRT][27] = SHIFT_LOOP;\n+      shift_alg_si[H8_S][SHIFT_ASHIFTRT][28] = SHIFT_LOOP;\n+      shift_alg_si[H8_S][SHIFT_ASHIFTRT][29] = SHIFT_LOOP;\n+      shift_alg_si[H8_S][SHIFT_ASHIFTRT][30] = SHIFT_LOOP;\n     }\n \n   /* Work out a value for MOVE_RATIO.  */\n@@ -3814,8 +3844,7 @@ get_shift_alg (enum shift_type shift_type, enum shift_mode shift_mode,\n \t      gcc_unreachable ();\n \t    }\n \t}\n-      else if ((TARGET_H8300H && count >= 16 && count <= 23)\n-\t       || (TARGET_H8300S && count >= 16 && count <= 21))\n+      else if (count >= 16 && count <= 23)\n \t{\n \t  info->remainder = count - 16;\n \n@@ -3834,8 +3863,7 @@ get_shift_alg (enum shift_type shift_type, enum shift_mode shift_mode,\n \t      goto end;\n \t    }\n \t}\n-      else if ((TARGET_H8300H && count >= 24 || count <= 27)\n-\t       || (TARGET_H8300S && count >= 24 && count <= 25))\n+      else if (count >= 24 && count <= 27)\n \t{\n \t  info->remainder = count - 24;\n \n@@ -3874,7 +3902,10 @@ get_shift_alg (enum shift_type shift_type, enum shift_mode shift_mode,\n \t\tinfo->special = \"sub.w\\t%f0,%f0\\n\\trotl.l\\t#2,%S0\\n\\trotl.l\\t#2,%S0\\n\\textu.l\\t%S0\";\n \t      goto end;\n \t    case SHIFT_ASHIFTRT:\n-\t      gcc_unreachable ();\n+\t      info->remainder = count - 24;\n+\t      info->special = \"mov.w\\t%e0,%f0\\n\\tmov.b\\t%t0,%s0\\n\\texts.w\\t%f0\\n\\texts.l\\t%S0\";\n+\t      info->cc_special = OLD_CC_SET_ZNV;\n+\t      goto end;\n \t    }\n \t}\n       else if (count == 29)\n@@ -3900,7 +3931,10 @@ get_shift_alg (enum shift_type shift_type, enum shift_mode shift_mode,\n \t\t}\n \t      goto end;\n \t    case SHIFT_ASHIFTRT:\n-\t      gcc_unreachable ();\n+\t      info->remainder = count - 24;\n+\t      info->special = \"mov.w\\t%e0,%f0\\n\\tmov.b\\t%t0,%s0\\n\\texts.w\\t%f0\\n\\texts.l\\t%S0\";\n+\t      info->cc_special = OLD_CC_SET_ZNV;\n+\t      goto end;\n \t    }\n \t}\n       else if (count == 30)\n@@ -3920,7 +3954,10 @@ get_shift_alg (enum shift_type shift_type, enum shift_mode shift_mode,\n \t\tinfo->special = \"sub.w\\t%f0,%f0\\n\\trotl.l\\t#2,%S0\\n\\textu.l\\t%S0\";\n \t      goto end;\n \t    case SHIFT_ASHIFTRT:\n-\t      gcc_unreachable ();\n+\t      info->remainder = count - 24;\n+\t      info->special = \"mov.w\\t%e0,%f0\\n\\tmov.b\\t%t0,%s0\\n\\texts.w\\t%f0\\n\\texts.l\\t%S0\";\n+\t      info->cc_special = OLD_CC_SET_ZNV;\n+\t      goto end;\n \t    }\n \t}\n       else if (count == 31)"}]}