{"sha": "5c07bed61da66d09c304a1e21023a8ee9a637c4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMwN2JlZDYxZGE2NmQwOWMzMDRhMWUyMTAyM2E4ZWU5YTYzN2M0Yg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-01-08T16:13:18Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-01-08T16:13:18Z"}, "message": "symtab.c (symtab_node::equal_address_to): Return -1 instead of 2 if we can't determine address equivalence.\n\n\t* symtab.c (symtab_node::equal_address_to): Return -1 instead of 2\n\tif we can't determine address equivalence.\n\t* alias.c (compare_base_decl): Update for changed return value of\n\tsymtab_node::equal_address_to.\n\nFrom-SVN: r232172", "tree": {"sha": "23b1fc7769734fa75e5f8a4353a4ea72d274c65a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23b1fc7769734fa75e5f8a4353a4ea72d274c65a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c07bed61da66d09c304a1e21023a8ee9a637c4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c07bed61da66d09c304a1e21023a8ee9a637c4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c07bed61da66d09c304a1e21023a8ee9a637c4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c07bed61da66d09c304a1e21023a8ee9a637c4b/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "550c5f8a7e3e2487b06ddbe9da3dc65c5c7e00f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/550c5f8a7e3e2487b06ddbe9da3dc65c5c7e00f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/550c5f8a7e3e2487b06ddbe9da3dc65c5c7e00f1"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "c3524fcde18cc0b08d1e7bd706d472516f09917c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c07bed61da66d09c304a1e21023a8ee9a637c4b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c07bed61da66d09c304a1e21023a8ee9a637c4b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c07bed61da66d09c304a1e21023a8ee9a637c4b", "patch": "@@ -1,3 +1,10 @@\n+2016-01-08  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* symtab.c (symtab_node::equal_address_to): Return -1 instead of 2\n+\tif we can't determine address equivalence.\n+\t* alias.c (compare_base_decl): Update for changed return value of\n+\tsymtab_node::equal_address_to.\n+\n 2016-01-08  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/68983"}, {"sha": "1b8390e85bb3893e9ea37ff160742bde202d692a", "filename": "gcc/alias.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c07bed61da66d09c304a1e21023a8ee9a637c4b/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c07bed61da66d09c304a1e21023a8ee9a637c4b/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=5c07bed61da66d09c304a1e21023a8ee9a637c4b", "patch": "@@ -2053,8 +2053,6 @@ compare_base_decls (tree base1, tree base2)\n     return 0;\n   \n   ret = node1->equal_address_to (node2, true);\n-  if (ret == 2)\n-    return -1;\n   return ret;\n }\n "}, {"sha": "308a489206c3eb7a19fd23b156f1c8057fd236c2", "filename": "gcc/symtab.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c07bed61da66d09c304a1e21023a8ee9a637c4b/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c07bed61da66d09c304a1e21023a8ee9a637c4b/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=5c07bed61da66d09c304a1e21023a8ee9a637c4b", "patch": "@@ -1877,7 +1877,7 @@ symtab_node::nonzero_address ()\n \n /* Return 0 if symbol is known to have different address than S2,\n    Return 1 if symbol is known to have same address as S2,\n-   return 2 otherwise.  \n+   return -1 otherwise.  \n \n    If MEMORY_ACCESSED is true, assume that both memory pointer to THIS\n    and S2 is going to be accessed.  This eliminates the situations when\n@@ -1941,15 +1941,15 @@ symtab_node::equal_address_to (symtab_node *s2, bool memory_accessed)\n   /* If both symbols may resolve to NULL, we can not really prove them\n      different.  */\n   if (!memory_accessed && !nonzero_address () && !s2->nonzero_address ())\n-    return 2;\n+    return -1;\n \n   /* Except for NULL, functions and variables never overlap.  */\n   if (TREE_CODE (decl) != TREE_CODE (s2->decl))\n     return 0;\n \n   /* If one of the symbols is unresolved alias, punt.  */\n   if (rs1->alias || rs2->alias)\n-    return 2;\n+    return -1;\n \n   /* If we have a non-interposale definition of at least one of the symbols\n      and the other symbol is different, we know other unit can not interpose\n@@ -1976,7 +1976,7 @@ symtab_node::equal_address_to (symtab_node *s2, bool memory_accessed)\n      We probably should be consistent and use this fact here, too, but for\n      the moment return false only when we are called from the alias oracle.  */\n \n-  return memory_accessed && rs1 != rs2 ? 0 : 2;\n+  return memory_accessed && rs1 != rs2 ? 0 : -1;\n }\n \n /* Worker for call_for_symbol_and_aliases.  */"}]}