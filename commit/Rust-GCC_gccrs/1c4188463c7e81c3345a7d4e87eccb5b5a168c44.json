{"sha": "1c4188463c7e81c3345a7d4e87eccb5b5a168c44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM0MTg4NDYzYzdlODFjMzM0NWE3ZDRlODdlY2NiNWI1YTE2OGM0NA==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-11-13T16:35:06Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-11-13T16:35:06Z"}, "message": "Remove VEC_RSHIFT_EXPR tree code, now unused\n\n\t* fold-const.c (const_binop): Remove code handling VEC_RSHIFT_EXPR.\n\t* tree-cfg.c (verify_gimple_assign_binary): Likewise.\n\t* tree-inline.c (estimate_operator_cost): Likewise.\n\t* tree-pretty-print.c (dump_generic_node, op_code_prio, op_symbol_code):\n\tLikewise.\n\n\t* tree-vect-generic.c (expand_vector_operations_1): Remove assertion\n\tagainst VEC_RSHIFT_EXPR.\n\n\t* optabs.h (expand_vec_shift_expr): Remove.\n\t* optabs.c (optab_for_tree_code): Remove case VEC_RSHIFT_EXPR.\n\t(expand_vec_shift_expr): Remove.\n\t* tree.def (VEC_RSHIFT_EXPR): Remove\n\nFrom-SVN: r217510", "tree": {"sha": "7ade3a50e40a210abad179d58eabb4cb20bd0176", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ade3a50e40a210abad179d58eabb4cb20bd0176"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c4188463c7e81c3345a7d4e87eccb5b5a168c44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c4188463c7e81c3345a7d4e87eccb5b5a168c44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c4188463c7e81c3345a7d4e87eccb5b5a168c44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c4188463c7e81c3345a7d4e87eccb5b5a168c44/comments", "author": null, "committer": null, "parents": [{"sha": "cf7aa6a3b79ac25df266aa4fcfe6c059243602aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf7aa6a3b79ac25df266aa4fcfe6c059243602aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf7aa6a3b79ac25df266aa4fcfe6c059243602aa"}], "stats": {"total": 141, "additions": 23, "deletions": 118}, "files": [{"sha": "5fe28340d3cc556959d45595b1b7026d23fd8eab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4188463c7e81c3345a7d4e87eccb5b5a168c44/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4188463c7e81c3345a7d4e87eccb5b5a168c44/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c4188463c7e81c3345a7d4e87eccb5b5a168c44", "patch": "@@ -1,3 +1,19 @@\n+2014-11-13  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* fold-const.c (const_binop): Remove code handling VEC_RSHIFT_EXPR.\n+\t* tree-cfg.c (verify_gimple_assign_binary): Likewise.\n+\t* tree-inline.c (estimate_operator_cost): Likewise.\n+\t* tree-pretty-print.c (dump_generic_node, op_code_prio, op_symbol_code):\n+\tLikewise.\n+\n+\t* tree-vect-generic.c (expand_vector_operations_1): Remove assertion\n+\tagainst VEC_RSHIFT_EXPR.\n+\n+\t* optabs.h (expand_vec_shift_expr): Remove.\n+\t* optabs.c (optab_for_tree_code): Remove case VEC_RSHIFT_EXPR.\n+\t(expand_vec_shift_expr): Remove.\n+\t* tree.def (VEC_RSHIFT_EXPR): Remove\n+\n 2014-11-13  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* optabs.c (can_vec_perm_p): Update comment, does not consider vec_shr."}, {"sha": "15d7638795a252e4dd4734962fea1b34dc8b14c9", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4188463c7e81c3345a7d4e87eccb5b5a168c44/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4188463c7e81c3345a7d4e87eccb5b5a168c44/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=1c4188463c7e81c3345a7d4e87eccb5b5a168c44", "patch": "@@ -4659,7 +4659,6 @@ expand_debug_expr (tree exp)\n     case VEC_PACK_FIX_TRUNC_EXPR:\n     case VEC_PACK_SAT_EXPR:\n     case VEC_PACK_TRUNC_EXPR:\n-    case VEC_RSHIFT_EXPR:\n     case VEC_UNPACK_FLOAT_HI_EXPR:\n     case VEC_UNPACK_FLOAT_LO_EXPR:\n     case VEC_UNPACK_HI_EXPR:"}, {"sha": "930549f8a461a15438201696885a09f30e3e2f28", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4188463c7e81c3345a7d4e87eccb5b5a168c44/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4188463c7e81c3345a7d4e87eccb5b5a168c44/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=1c4188463c7e81c3345a7d4e87eccb5b5a168c44", "patch": "@@ -9142,12 +9142,6 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n         return temp;\n       }\n \n-    case VEC_RSHIFT_EXPR:\n-      {\n-\ttarget = expand_vec_shift_expr (ops, target);\n-\treturn target;\n-      }\n-\n     case VEC_UNPACK_HI_EXPR:\n     case VEC_UNPACK_LO_EXPR:\n       {"}, {"sha": "ee9ed7b34fa8f5fa43faa20d0eb8c4eba8de345f", "filename": "gcc/fold-const.c", "status": "modified", "additions": 7, "deletions": 34, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4188463c7e81c3345a7d4e87eccb5b5a168c44/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4188463c7e81c3345a7d4e87eccb5b5a168c44/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=1c4188463c7e81c3345a7d4e87eccb5b5a168c44", "patch": "@@ -1418,44 +1418,17 @@ const_binop (enum tree_code code, tree arg1, tree arg2)\n       int count = TYPE_VECTOR_SUBPARTS (type), i;\n       tree *elts = XALLOCAVEC (tree, count);\n \n-      if (code == VEC_RSHIFT_EXPR)\n+      for (i = 0; i < count; i++)\n \t{\n-\t  if (!tree_fits_uhwi_p (arg2))\n-\t    return NULL_TREE;\n+\t  tree elem1 = VECTOR_CST_ELT (arg1, i);\n \n-\t  unsigned HOST_WIDE_INT shiftc = tree_to_uhwi (arg2);\n-\t  unsigned HOST_WIDE_INT outerc = tree_to_uhwi (TYPE_SIZE (type));\n-\t  unsigned HOST_WIDE_INT innerc\n-\t    = tree_to_uhwi (TYPE_SIZE (TREE_TYPE (type)));\n-\t  if (shiftc >= outerc || (shiftc % innerc) != 0)\n+\t  elts[i] = const_binop (code, elem1, arg2);\n+\n+\t  /* It is possible that const_binop cannot handle the given\n+\t     code and return NULL_TREE.  */\n+\t  if (elts[i] == NULL_TREE)\n \t    return NULL_TREE;\n-\t  int offset = shiftc / innerc;\n-\t  /* The direction of VEC_RSHIFT_EXPR is endian dependent.\n-\t     For reductions, if !BYTES_BIG_ENDIAN then compiler picks first\n-\t     vector element, but last element if BYTES_BIG_ENDIAN.  */\n-\t  if (BYTES_BIG_ENDIAN)\n-\t    offset = -offset;\n-\t  tree zero = build_zero_cst (TREE_TYPE (type));\n-\t  for (i = 0; i < count; i++)\n-\t    {\n-\t      if (i + offset < 0 || i + offset >= count)\n-\t\telts[i] = zero;\n-\t      else\n-\t\telts[i] = VECTOR_CST_ELT (arg1, i + offset);\n-\t    }\n \t}\n-      else\n-\tfor (i = 0; i < count; i++)\n-\t  {\n-\t    tree elem1 = VECTOR_CST_ELT (arg1, i);\n-\n-\t    elts[i] = const_binop (code, elem1, arg2);\n-\n-\t    /* It is possible that const_binop cannot handle the given\n-\t       code and return NULL_TREE */\n-\t    if (elts[i] == NULL_TREE)\n-\t      return NULL_TREE;\n-\t  }\n \n       return build_vector (type, elts);\n     }"}, {"sha": "f6548c33b26089d6d9adcbfacf52162dec931677", "filename": "gcc/optabs.c", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4188463c7e81c3345a7d4e87eccb5b5a168c44/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4188463c7e81c3345a7d4e87eccb5b5a168c44/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=1c4188463c7e81c3345a7d4e87eccb5b5a168c44", "patch": "@@ -520,9 +520,6 @@ optab_for_tree_code (enum tree_code code, const_tree type,\n     case REDUC_PLUS_EXPR:\n       return reduc_plus_scal_optab;\n \n-    case VEC_RSHIFT_EXPR:\n-      return vec_shr_optab;\n-\n     case VEC_WIDEN_MULT_HI_EXPR:\n       return TYPE_UNSIGNED (type) ?\n \tvec_widen_umult_hi_optab : vec_widen_smult_hi_optab;\n@@ -771,34 +768,6 @@ force_expand_binop (machine_mode mode, optab binoptab,\n   return true;\n }\n \n-/* Generate insns for VEC_RSHIFT_EXPR.  */\n-\n-rtx\n-expand_vec_shift_expr (sepops ops, rtx target)\n-{\n-  struct expand_operand eops[3];\n-  enum insn_code icode;\n-  rtx rtx_op1, rtx_op2;\n-  machine_mode mode = TYPE_MODE (ops->type);\n-  tree vec_oprnd = ops->op0;\n-  tree shift_oprnd = ops->op1;\n-\n-  gcc_assert (ops->code == VEC_RSHIFT_EXPR);\n-\n-  icode = optab_handler (vec_shr_optab, mode);\n-  gcc_assert (icode != CODE_FOR_nothing);\n-\n-  rtx_op1 = expand_normal (vec_oprnd);\n-  rtx_op2 = expand_normal (shift_oprnd);\n-\n-  create_output_operand (&eops[0], target, mode);\n-  create_input_operand (&eops[1], rtx_op1, GET_MODE (rtx_op1));\n-  create_convert_operand_from_type (&eops[2], rtx_op2, TREE_TYPE (shift_oprnd));\n-  expand_insn (icode, 3, eops);\n-\n-  return eops[0].value;\n-}\n-\n /* Create a new vector value in VMODE with all elements set to OP.  The\n    mode of OP must be the element mode of VMODE.  If OP is a constant,\n    then the return value will be a constant.  */"}, {"sha": "982a5935cfaf423ec3dbcea8df147ee1c9c4bde4", "filename": "gcc/optabs.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4188463c7e81c3345a7d4e87eccb5b5a168c44/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4188463c7e81c3345a7d4e87eccb5b5a168c44/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=1c4188463c7e81c3345a7d4e87eccb5b5a168c44", "patch": "@@ -287,8 +287,6 @@ extern rtx simplify_expand_binop (machine_mode mode, optab binoptab,\n \t\t\t\t  enum optab_methods methods);\n extern bool force_expand_binop (machine_mode, optab, rtx, rtx, rtx, int,\n \t\t\t\tenum optab_methods);\n-/* Generate code for VEC_RSHIFT_EXPR.  */\n-extern rtx expand_vec_shift_expr (struct separate_ops *, rtx);\n \n /* Generate code for a simple binary or unary operation.  \"Simple\" in\n    this case means \"can be unambiguously described by a (mode, code)"}, {"sha": "904f2ddf9fb58af179efa31261065cb6d6717f1a", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4188463c7e81c3345a7d4e87eccb5b5a168c44/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4188463c7e81c3345a7d4e87eccb5b5a168c44/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=1c4188463c7e81c3345a7d4e87eccb5b5a168c44", "patch": "@@ -3675,38 +3675,6 @@ verify_gimple_assign_binary (gimple stmt)\n \treturn false;\n       }\n \n-    case VEC_RSHIFT_EXPR:\n-      {\n-\tif (TREE_CODE (rhs1_type) != VECTOR_TYPE\n-\t    || !(INTEGRAL_TYPE_P (TREE_TYPE (rhs1_type))\n-\t\t || POINTER_TYPE_P (TREE_TYPE (rhs1_type))\n-\t\t || FIXED_POINT_TYPE_P (TREE_TYPE (rhs1_type))\n-\t\t || SCALAR_FLOAT_TYPE_P (TREE_TYPE (rhs1_type)))\n-\t    || (!INTEGRAL_TYPE_P (rhs2_type)\n-\t\t&& (TREE_CODE (rhs2_type) != VECTOR_TYPE\n-\t\t    || !INTEGRAL_TYPE_P (TREE_TYPE (rhs2_type))))\n-\t    || !useless_type_conversion_p (lhs_type, rhs1_type))\n-\t  {\n-\t    error (\"type mismatch in vector shift expression\");\n-\t    debug_generic_expr (lhs_type);\n-\t    debug_generic_expr (rhs1_type);\n-\t    debug_generic_expr (rhs2_type);\n-\t    return true;\n-\t  }\n-\t/* For shifting a vector of non-integral components we\n-\t   only allow shifting by a constant multiple of the element size.  */\n-\tif (!INTEGRAL_TYPE_P (TREE_TYPE (rhs1_type))\n-\t    && (TREE_CODE (rhs2) != INTEGER_CST\n-\t\t|| !div_if_zero_remainder (rhs2,\n-\t\t\t\t\t   TYPE_SIZE (TREE_TYPE (rhs1_type)))))\n-\t  {\n-\t    error (\"non-element sized vector shift of floating point vector\");\n-\t    return true;\n-\t  }\n-\n-\treturn false;\n-      }\n-\n     case WIDEN_LSHIFT_EXPR:\n       {\n         if (!INTEGRAL_TYPE_P (lhs_type)"}, {"sha": "520546e3d09bf45ca3f4eb507e1053fdda5ca226", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4188463c7e81c3345a7d4e87eccb5b5a168c44/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4188463c7e81c3345a7d4e87eccb5b5a168c44/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=1c4188463c7e81c3345a7d4e87eccb5b5a168c44", "patch": "@@ -3807,7 +3807,6 @@ estimate_operator_cost (enum tree_code code, eni_weights *weights,\n     case RSHIFT_EXPR:\n     case LROTATE_EXPR:\n     case RROTATE_EXPR:\n-    case VEC_RSHIFT_EXPR:\n \n     case BIT_IOR_EXPR:\n     case BIT_XOR_EXPR:"}, {"sha": "53720ded5cd375e9d9b7bf4b1bead1846e07e846", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4188463c7e81c3345a7d4e87eccb5b5a168c44/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4188463c7e81c3345a7d4e87eccb5b5a168c44/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=1c4188463c7e81c3345a7d4e87eccb5b5a168c44", "patch": "@@ -1858,7 +1858,6 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n     case RSHIFT_EXPR:\n     case LROTATE_EXPR:\n     case RROTATE_EXPR:\n-    case VEC_RSHIFT_EXPR:\n     case WIDEN_LSHIFT_EXPR:\n     case BIT_IOR_EXPR:\n     case BIT_XOR_EXPR:\n@@ -3038,7 +3037,6 @@ op_code_prio (enum tree_code code)\n     case REDUC_MAX_EXPR:\n     case REDUC_MIN_EXPR:\n     case REDUC_PLUS_EXPR:\n-    case VEC_RSHIFT_EXPR:\n     case VEC_UNPACK_HI_EXPR:\n     case VEC_UNPACK_LO_EXPR:\n     case VEC_UNPACK_FLOAT_HI_EXPR:\n@@ -3148,9 +3146,6 @@ op_symbol_code (enum tree_code code)\n     case RROTATE_EXPR:\n       return \"r>>\";\n \n-    case VEC_RSHIFT_EXPR:\n-      return \"v>>\";\n-\n     case WIDEN_LSHIFT_EXPR:\n       return \"w<<\";\n "}, {"sha": "bd9df1599e4daeacb01f7e56fd970e9b3c55a217", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4188463c7e81c3345a7d4e87eccb5b5a168c44/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4188463c7e81c3345a7d4e87eccb5b5a168c44/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=1c4188463c7e81c3345a7d4e87eccb5b5a168c44", "patch": "@@ -1604,7 +1604,6 @@ expand_vector_operations_1 (gimple_stmt_iterator *gsi)\n   if (compute_type == type)\n     return;\n \n-  gcc_assert (code != VEC_RSHIFT_EXPR);\n   new_rhs = expand_vector_operation (gsi, type, compute_type, stmt, code);\n \n   /* Leave expression untouched for later expansion.  */"}, {"sha": "e4625d0982203efd8efcb80c1d93ab98fd15890f", "filename": "gcc/tree.def", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4188463c7e81c3345a7d4e87eccb5b5a168c44/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4188463c7e81c3345a7d4e87eccb5b5a168c44/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=1c4188463c7e81c3345a7d4e87eccb5b5a168c44", "patch": "@@ -1251,11 +1251,6 @@ DEFTREECODE (WIDEN_LSHIFT_EXPR, \"widen_lshift_expr\", tcc_binary, 2)\n    before adding operand three.  */\n DEFTREECODE (FMA_EXPR, \"fma_expr\", tcc_expression, 3)\n \n-/* Whole vector right shift in bits.\n-   Operand 0 is a vector to be shifted.\n-   Operand 1 is an integer shift amount in bits.  */\n-DEFTREECODE (VEC_RSHIFT_EXPR, \"vec_rshift_expr\", tcc_binary, 2)\n-\f\n /* Widening vector multiplication.\n    The two operands are vectors with N elements of size S. Multiplying the\n    elements of the two vectors will result in N products of size 2*S."}]}