{"sha": "3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FjODgyMzlmYzI1ZjQ3ODVjYmRiNGU2YzI5ZGQyNDE0NWZjNzFkMg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-11-09T07:14:20Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-11-09T07:14:20Z"}, "message": "c-lang.c (LANG_HOOKS_NAME): New.\n\n\t* c-lang.c (LANG_HOOKS_NAME): New.\n\t(lang_hooks): Constify.\n\t(c_init_options): Update.\n\t(lang_identify): Remove.\n\t* c-parse.in (language_string): Remove.\n\t* dbxout.c: Include langhooks.h.\n\t(dbxout_symbol_location): Update.\n\t* dwarf2out.c: Include langhooks.h.\n\t(gen_compile_unit_die): Update.\n\t* dwarfout.c: Include langhooks.h.\n\t(prototyped_attribute, output_compile_unit_die): Update.\n\t* langhooks-def.h (LANG_HOOKS_NAME, LANG_HOOKS_IDENTIFIER_SIZE): New.\n\t(LANG_HOOKS_INITIALIZER): Update.\n\t* langhooks.h (struct lang_hooks): New members.  Constify.\n\t* stringpool.c: Don't include toplev.h.\n\t(set_identifier_size): Remove.\n\t* toplev.c (toplev_main): Initialize identifier size.\n\t(print_version): Update.\n\t* tree.h (language_string, init_lex, lang_identify,\n\tset_identifier_size): Remove.\n\t* Makefile.in: Update dependencies.\n\t* config/darwin.c: Include langhooks.h.\n\t(func_name_maybe_scoped): Update.\n\t* config/darwin.h (ASM_END_FILE): Update.\n\t* config/nextstep.h (ASM_END_FILE): Update.\n\t* config/nextstep21.h (ASM_END_FILE): Update.\n\t* config/i386/sun386.h (ASM_END_FILE): Update.\n\t* config/rs6000/rs6000.c (ASM_END_FILE): Include langhooks.h.\n\t(rs6000_output_function_epilogue): Update.\nada:\n\t* misc.c (LANG_HOOKS_NAME, LANG_HOOKS_IDENTIFIER_SIZE): Override.\n\t(struct lang_hooks): Constify.\n\t(language_string, lang_identify): Remove.\n\t* utils.c (init_decl_processing): Update.\ncp:\n\t* cp-lang.c (LANG_HOOKS_NAME): Override.\n\t(struct lang_hooks): Constify.\n\t* lex.c (cxx_init_options): Update.\n\t(lang_identify): Remove.\n\t* parse.y (language_string): Remove.\nf:\n\t* com.c (language_string, lang_identify): Remove.\n\t(struct lang_hooks): Constify.\n\t(LANG_HOOKS_NAME): Override.\n\t(init_parse): Update.\njava:\n\t* jcf-parse.c (init_lex): Remove.\n\t* lang.c (language_string, lang_identify): Remove.\n\t(struct lang_hooks): Constify.\n\t(LANG_HOOKS_NAME): Override.\n\t(init_parse): Update.\nobjc:\n\t* objc-act.c (LANG_HOOKS_NAME): Override.\n\t(struct lang_hooks): Constify.\n\t(objc_init_options): Update.\n\t(lang_identify): Remove.\n\nFrom-SVN: r46874", "tree": {"sha": "591f114c0c680e4ec2d6ca91c6e753b8fbeaba3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/591f114c0c680e4ec2d6ca91c6e753b8fbeaba3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/comments", "author": null, "committer": null, "parents": [{"sha": "14d269bba70774130beedfa92cc973888f983c42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14d269bba70774130beedfa92cc973888f983c42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14d269bba70774130beedfa92cc973888f983c42"}], "stats": {"total": 258, "additions": 126, "deletions": 132}, "files": [{"sha": "a0731e541f4a840b36fa7123d8b0e63f5e1caf9d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -1,3 +1,40 @@\n+2001-11-09  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* c-lang.c (LANG_HOOKS_NAME): New.\n+\t(lang_hooks): Constify.\n+\t(c_init_options): Update.\n+\t(lang_identify): Remove.\n+\t* c-parse.in (language_string): Remove.\n+\t* dbxout.c: Include langhooks.h.\n+\t(dbxout_symbol_location): Update.\n+\t* dwarf2out.c: Include langhooks.h.\n+\t(gen_compile_unit_die): Update.\n+\t* dwarfout.c: Include langhooks.h.\n+\t(prototyped_attribute, output_compile_unit_die): Update.\n+\t* langhooks-def.h (LANG_HOOKS_NAME, LANG_HOOKS_IDENTIFIER_SIZE): New.\n+\t(LANG_HOOKS_INITIALIZER): Update.\n+\t* langhooks.h (struct lang_hooks): New members.  Constify.\n+\t* stringpool.c: Don't include toplev.h.\n+\t(set_identifier_size): Remove.\n+\t* toplev.c (toplev_main): Initialize identifier size.\n+\t(print_version): Update.\n+\t* tree.h (language_string, init_lex, lang_identify,\n+\tset_identifier_size): Remove.\n+\t* Makefile.in: Update dependencies.\n+\t* config/darwin.c: Include langhooks.h.\n+\t(func_name_maybe_scoped): Update.\n+\t* config/darwin.h (ASM_END_FILE): Update.\n+\t* config/nextstep.h (ASM_END_FILE): Update.\n+\t* config/nextstep21.h (ASM_END_FILE): Update.\n+\t* config/i386/sun386.h (ASM_END_FILE): Update.\n+\t* config/rs6000/rs6000.c (ASM_END_FILE): Include langhooks.h.\n+\t(rs6000_output_function_epilogue): Update.\n+objc:\n+\t* objc-act.c (LANG_HOOKS_NAME): Override.\n+\t(struct lang_hooks): Constify.\n+\t(objc_init_options): Update.\n+\t(lang_identify): Remove.\n+\n Fri Nov  9 00:25:18 EST 2001  John Wehle  (john@feith.com)\n \n \t* fold-const.c (lshift_double): Honor PREC."}, {"sha": "efc3ba8cbfef282c005c3987538bc3306c2a81f4", "filename": "gcc/Makefile.in", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -1422,7 +1422,7 @@ optabs.o : optabs.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h  \\\n    insn-config.h $(EXPR_H) $(OPTABS_H) libfuncs.h $(RECOG_H) reload.h \\\n    toplev.h $(GGC_H) real.h $(TM_P_H) except.h\n dbxout.o : dbxout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) flags.h \\\n-    $(REGS_H) debug.h $(TM_P_H) $(TARGET_H) function.h \\\n+    $(REGS_H) debug.h $(TM_P_H) $(TARGET_H) function.h langhooks.h \\\n    insn-config.h reload.h gstab.h xcoffout.h output.h dbxout.h toplev.h\n debug.o : debug.c $(CONFIG_H) $(SYSTEM_H)\n sdbout.o : sdbout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) flags.h \\\n@@ -1431,11 +1431,11 @@ sdbout.o : sdbout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) flags.h \\\n    sdbout.h toplev.h $(TM_P_H) except.h debug.h\n dwarfout.o : dwarfout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) dwarf.h \\\n    flags.h insn-config.h reload.h output.h toplev.h $(TM_P_H) \\\n-   debug.h\n+   debug.h langhooks.h\n dwarf2out.o : dwarf2out.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) dwarf2.h \\\n    debug.h flags.h insn-config.h reload.h output.h diagnostic.h \\\n    hard-reg-set.h $(REGS_H) $(EXPR_H) libfuncs.h toplev.h dwarf2out.h varray.h \\\n-   $(GGC_H) except.h dwarf2asm.h $(TM_P_H)\n+   $(GGC_H) except.h dwarf2asm.h $(TM_P_H) langhooks.h\n dwarf2asm.o : dwarf2asm.c $(CONFIG_H) $(SYSTEM_H) flags.h $(RTL_H) $(TREE_H) \\\n    output.h dwarf2asm.h $(TM_P_H)\n xcoffout.o : xcoffout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) xcoffout.h \\\n@@ -1601,7 +1601,8 @@ params.o : params.c $(CONFIG_H) $(SYSTEM_H) $(PARAMS_H) toplev.h\n $(out_object_file): $(out_file) $(CONFIG_H) $(TREE_H) $(GGC_H) \\\n    $(RTL_H) $(REGS_H) hard-reg-set.h real.h insn-config.h conditions.h \\\n    output.h $(INSN_ATTR_H) $(SYSTEM_H) toplev.h $(TARGET_H) libfuncs.h \\\n-   $(TARGET_DEF_H) function.h sched-int.h $(TM_P_H) $(EXPR_H) $(OPTABS_H)\n+   $(TARGET_DEF_H) function.h sched-int.h $(TM_P_H) $(EXPR_H) $(OPTABS_H) \\\n+   langhooks.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(out_file) $(OUTPUT_OPTION)\n "}, {"sha": "07645b039f9a617ec661c5c8e0d8bd0aa7e03859", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -1,3 +1,10 @@\n+2001-11-09  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* misc.c (LANG_HOOKS_NAME, LANG_HOOKS_IDENTIFIER_SIZE): Override.\n+\t(struct lang_hooks): Constify.\n+\t(language_string, lang_identify): Remove.\n+\t* utils.c (init_decl_processing): Update.\n+\n 2001-11-06  Neil Booth  <neil@cat.daikokuya.demon.co.uk>\n \n \t* misc.c: Include langhooks-def.h."}, {"sha": "f6ad45b9f1887ea74c1bb2b1eaa21032ad0a10d6", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                           C Implementation File                          *\n  *                                                                          *\n- *                             $Revision: 1.8 $\n+ *                             $Revision: 1.9 $\n  *                                                                          *\n  *          Copyright (C) 1992-2001 Free Software Foundation, Inc.          *\n  *                                                                          *\n@@ -116,6 +116,10 @@ static HOST_WIDE_INT gnat_get_alias_set\tPARAMS ((tree));\n \n /* Structure giving our language-specific hooks.  */\n \n+#undef  LANG_HOOKS_NAME\n+#define LANG_HOOKS_NAME\t\t\t\"GNU Ada\"\n+#undef  LANG_HOOKS_IDENTIFIER_SIZE\n+#define LANG_HOOKS_IDENTIFIER_SIZE\tsizeof (struct tree_identifier)\n #undef  LANG_HOOKS_INIT\n #define LANG_HOOKS_INIT\t\t\tgnat_init\n #undef  LANG_HOOKS_INIT_OPTIONS\n@@ -127,7 +131,7 @@ static HOST_WIDE_INT gnat_get_alias_set\tPARAMS ((tree));\n #undef LANG_HOOKS_GET_ALIAS_SET\n #define LANG_HOOKS_GET_ALIAS_SET\tgnat_get_alias_set\n \n-struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n+const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n /* gnat standard argc argv */\n \n@@ -136,7 +140,6 @@ extern char **gnat_argv;\n \n /* Global Variables Expected by gcc: */\n \n-const char * const language_string = \"GNU Ada\";\n int flag_traditional;\t\t/* Used by dwarfout.c.  */\n int ggc_p = 1;\n \n@@ -358,14 +361,6 @@ gnat_init ()\n #endif\n }\n \n-/* Return a short string identifying this language to the debugger.  */\n-\n-const char *\n-lang_identify ()\n-{\n-  return \"ada\";\n-}\n-\n /* If DECL has a cleanup, build and return that cleanup here.\n    This is a callback called by expand_expr.  */\n "}, {"sha": "a1900096e00e761906f3b86d75b91826872fd9f8", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *                            $Revision$\n+ *                            $Revision: 1.2 $\n  *                                                                          *\n  *          Copyright (C) 1992-2001, Free Software Foundation, Inc.         *\n  *                                                                          *\n@@ -480,12 +480,6 @@ pushdecl (decl)\n void\n init_decl_processing ()\n {\n-  /* The structure `tree_identifier' is the GCC tree data structure that holds\n-     IDENTIFIER_NODE nodes. We need to call `set_identifier_size' to tell GCC\n-     that we have not added any language specific fields to IDENTIFIER_NODE\n-     nodes.  */\n-  set_identifier_size (sizeof (struct tree_identifier));\n-\n   lineno = 0;\n \n   /* incomplete_decl_finalize_hook is defined in toplev.c. It needs to be set"}, {"sha": "b3d9094b8d4b045f3b7e388642a111d18c373ffe", "filename": "gcc/c-lang.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -49,6 +49,8 @@ static void c_post_options PARAMS ((void));\n static int c_disregard_inline_limits PARAMS ((tree));\n static int c_cannot_inline_tree_fn PARAMS ((tree *));\n \n+#undef LANG_HOOKS_NAME\n+#define LANG_HOOKS_NAME \"GNU C\"\n #undef LANG_HOOKS_INIT\n #define LANG_HOOKS_INIT c_init\n #undef LANG_HOOKS_INIT_OPTIONS\n@@ -71,7 +73,7 @@ static int c_cannot_inline_tree_fn PARAMS ((tree *));\n   anon_aggr_type_p\n \n /* Each front end provides its own.  */\n-struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n+const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n /* Post-switch processing.  */\n static void\n@@ -99,9 +101,6 @@ c_post_options ()\n static void\n c_init_options ()\n {\n-  /* Make identifier nodes long enough for the language-specific slots.  */\n-  set_identifier_size (sizeof (struct lang_identifier));\n-\n   parse_in = cpp_create_reader (ident_hash, CLK_GNUC89);\n \n   /* Mark as \"unspecified\".  */\n@@ -135,12 +134,6 @@ c_init ()\n   c_parse_init ();\n }\n \n-const char *\n-lang_identify ()\n-{\n-  return \"c\";\n-}\n-\n void\n print_lang_statistics ()\n {"}, {"sha": "f458e03cb3a82adce4cf196c13ebf801b248a7bd", "filename": "gcc/c-parse.in", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -60,15 +60,6 @@ ifobjc\n #include \"objc-act.h\"\n end ifobjc\n \n-/* Since parsers are distinct for each language, put the language string\n-   definition here.  */\n-ifobjc\n-const char * const language_string = \"GNU Objective-C\";\n-end ifobjc\n-ifc\n-const char * const language_string = \"GNU C\";\n-end ifc\n-\n /* Like YYERROR but do call yyerror.  */\n #define YYERROR1 { yyerror (\"syntax error\"); YYERROR; }\n \n@@ -3542,10 +3533,6 @@ init_parse (filename)\n      const char *filename;\n {\n   add_c_tree_codes ();\n-\n-  /* Make identifier nodes long enough for the language-specific slots.  */\n-  set_identifier_size (sizeof (struct lang_identifier));\n-\n   init_reswords ();\n   init_pragma ();\n "}, {"sha": "caf812055887bf134fdcbd46f386ab8ebe957c9f", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -37,6 +37,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"reload.h\"\n #include \"function.h\"\n #include \"ggc.h\"\n+#include \"langhooks.h\"\n \n #include \"darwin-protos.h\"\n \n@@ -565,7 +566,7 @@ func_name_maybe_scoped (fname)\n {\n \n   if (is_cplusplus < 0)\n-    is_cplusplus = (strcmp (lang_identify (), \"cplusplus\") == 0);\n+    is_cplusplus = (strcmp (lang_hooks.name, \"GNU C++\") == 0);\n \n   if (is_cplusplus)\n     {"}, {"sha": "2b1826d43bd7452aeafca64dab2b47f06dcc8b51", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -175,7 +175,7 @@ do { text_section ();\t\t\t\t\t\t\t\\\n #define ASM_FILE_END(FILE)\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\\\n     machopic_finish (asm_out_file);                             \\\n-    if (strcmp (language_string, \"GNU C++\") == 0)\t\t\\\n+    if (strcmp (lang_hooks.name, \"GNU C++\") == 0)\t\t\\\n       {\t\t\t\t\t\t\t\t\\\n \tconstructor_section ();\t\t\t\t\t\\\n \tdestructor_section ();\t\t\t\t\t\\"}, {"sha": "20d48c9340c5dcedba9c08bdcac8771f8587e1b2", "filename": "gcc/config/i386/sun386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fconfig%2Fi386%2Fsun386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fconfig%2Fi386%2Fsun386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsun386.h?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -76,7 +76,7 @@ do\t\t\t\t\t\t\t\t\\\n       fprintf (FILE, \"\\n\");\t\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\t.version\\t\\\"%s %s\\\"\\n\",\t\t\\\n-\t     language_string, version_string);\t\t\\\n+\t     lang_hooks.name, version_string);\t\t\\\n     if (optimize) ASM_FILE_START_1 (FILE);\t\t\\\n   } while (0)\n "}, {"sha": "4be9e711cdbad3ed928cbe1e97b04ead122584ed", "filename": "gcc/config/nextstep.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fconfig%2Fnextstep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fconfig%2Fnextstep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnextstep.h?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -229,7 +229,7 @@ extern void nextstep_asm_out_destructor  PARAMS ((struct rtx_def *, int));\n #undef\tASM_FILE_END\n #define ASM_FILE_END(FILE)\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\\\n-    if (strcmp (language_string, \"GNU C++\") == 0)\t\t\\\n+    if (strcmp (lang_hooks.name, \"GNU C++\") == 0)\t\t\\\n       {\t\t\t\t\t\t\t\t\\\n \tconstructor_section ();\t\t\t\t\t\\\n \tdestructor_section ();\t\t\t\t\t\\"}, {"sha": "7827054d8975fa3cf2ac71a34326fe1a8bff3c44", "filename": "gcc/config/nextstep21.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fconfig%2Fnextstep21.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fconfig%2Fnextstep21.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnextstep21.h?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -43,7 +43,7 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_FILE_END\n #define ASM_FILE_END(FILE)\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\\\n-      if (strcmp (language_string, \"GNU C++\") == 0)\t\t\\\n+      if (strcmp (lang_hooks.name, \"GNU C++\") == 0)\t\t\\\n       {\t\t\t\t\t\t\t\t\\\n \tASM_OUTPUT_ALIGN (FILE, 1);\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\\"}, {"sha": "fc7ed613fa91a9e704a5dc5d9a26a6d1b7f3feb0", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -46,6 +46,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"tm_p.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n+#include \"langhooks.h\"\n \n #ifndef TARGET_NO_PROTOTYPE\n #define TARGET_NO_PROTOTYPE 0\n@@ -7499,6 +7500,7 @@ rs6000_output_function_epilogue (file, size)\n   if (DEFAULT_ABI == ABI_AIX && ! flag_inhibit_size_directive)\n     {\n       const char *fname = XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0);\n+      const char *language_string = lang_hooks.name;\n       int fixed_parms, float_parms, parm_info;\n       int i;\n "}, {"sha": "c2f51e6bb59aa7d9226eace682991f23f7a631fa", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -1,3 +1,11 @@\n+2001-11-09  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cp-lang.c (LANG_HOOKS_NAME): Override.\n+\t(struct lang_hooks): Constify.\n+\t* lex.c (cxx_init_options): Update.\n+\t(lang_identify): Remove.\n+\t* parse.y (language_string): Remove.\t\n+\n 2001-11-08  Andreas Franck  <afranck@gmx.de>\n \n \t* Make-lang.in (CXX_INSTALL_NAME, GXX_CROSS_NAME,"}, {"sha": "cd951da0596a64209ccebd18b2324c35640b1e51", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -29,6 +29,8 @@ Boston, MA 02111-1307, USA.  */\n \n static HOST_WIDE_INT cxx_get_alias_set PARAMS ((tree));\n \n+#undef LANG_HOOKS_NAME\n+#define LANG_HOOKS_NAME \"GNU C++\"\n #undef LANG_HOOKS_INIT\n #define LANG_HOOKS_INIT cxx_init\n #undef LANG_HOOKS_FINISH\n@@ -66,7 +68,7 @@ static HOST_WIDE_INT cxx_get_alias_set PARAMS ((tree));\n #define LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P anon_aggr_type_p\n \n /* Each front end provides its own hooks, for toplev.c.  */\n-struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n+const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n /* Special routine to get the alias set for C++.  */\n "}, {"sha": "00765867ce18739c5fc6cc9cf778bb5778bfd8c9", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -248,9 +248,6 @@ cxx_post_options ()\n void\n cxx_init_options ()\n {\n-  /* Make identifier nodes long enough for the language-specific slots.  */\n-  set_identifier_size (sizeof (struct lang_identifier));\n-\n   parse_in = cpp_create_reader (ident_hash, CLK_GNUCXX);\n \n   /* Default exceptions on.  */\n@@ -281,12 +278,6 @@ cxx_finish ()\n     GNU_xref_end (errorcount+sorrycount);\n }\n \n-const char *\n-lang_identify ()\n-{\n-  return \"cplusplus\";\n-}\n-\n static int *\n init_cpp_parse ()\n {"}, {"sha": "1cf00209028ddfc9965b2d23095e21199486b176", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -45,10 +45,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"ggc.h\"\n \n-/* Since parsers are distinct for each language, put the language string\n-   definition here.  (fnf) */\n-const char * const language_string = \"GNU C++\";\n-\n extern struct obstack permanent_obstack;\n \n /* Like YYERROR but do call yyerror.  */"}, {"sha": "50440f129cfa35f852391fc443cf6b130ef495de", "filename": "gcc/dbxout.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -85,6 +85,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"debug.h\"\n #include \"function.h\"\n #include \"target.h\"\n+#include \"langhooks.h\"\n \n #ifdef XCOFF_DEBUGGING_INFO\n #include \"xcoffout.h\"\n@@ -2147,7 +2148,7 @@ dbxout_symbol_location (decl, type, suffix, home)\n \t     we rely on the fact that error_mark_node initializers always\n \t     end up in bss for C++ and never end up in bss for C.  */\n \t  if (DECL_INITIAL (decl) == 0\n-\t      || (!strcmp (lang_identify (), \"cplusplus\")\n+\t      || (!strcmp (lang_hooks.name, \"GNU C++\")\n \t\t  && DECL_INITIAL (decl) == error_mark_node))\n \t    current_sym_code = N_LCSYM;\n \t  else if (DECL_IN_TEXT_SECTION (decl))"}, {"sha": "a78eb8f5b102d24112ef909a374f851e14c39be0", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -59,6 +59,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"diagnostic.h\"\n #include \"debug.h\"\n #include \"target.h\"\n+#include \"langhooks.h\"\n #include \"hashtable.h\"\n \n #ifdef DWARF2_DEBUGGING_INFO\n@@ -10470,6 +10471,7 @@ gen_compile_unit_die (filename)\n   dw_die_ref die;\n   char producer[250];\n   const char *wd = getpwd ();\n+  const char *language_string = lang_hooks.name;\n   int language;\n \n   die = new_die (DW_TAG_compile_unit, NULL);"}, {"sha": "d52544e39a2edacd33b305e6fcc545807fd6a20f", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -577,6 +577,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"toplev.h\"\n #include \"tm_p.h\"\n #include \"debug.h\"\n+#include \"langhooks.h\"\n \n /* NOTE: In the comments in this file, many references are made to\n    so called \"Debugging Information Entries\".  For the sake of brevity,\n@@ -3462,7 +3463,7 @@ static inline void\n prototyped_attribute (func_type)\n      tree func_type;\n {\n-  if ((strcmp (language_string, \"GNU C\") == 0)\n+  if ((strcmp (lang_hooks.name, \"GNU C\") == 0)\n       && (TYPE_ARG_TYPES (func_type) != NULL))\n     {\n       ASM_OUTPUT_DWARF_ATTRIBUTE (asm_out_file, AT_prototyped);\n@@ -4206,6 +4207,7 @@ output_compile_unit_die (arg)\n      void *arg;\n {\n   const char *main_input_filename = arg;\n+  const char *language_string = lang_hooks.name;\n \n   ASM_OUTPUT_DWARF_TAG (asm_out_file, TAG_compile_unit);\n   sibling_attribute ();"}, {"sha": "6daf9f0d77d6575940590a24266f1d5755a704e7", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -1,3 +1,10 @@\n+Fri Nov  9 07:14:47 2001  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* com.c (language_string, lang_identify): Remove.\n+\t(struct lang_hooks): Constify.\n+\t(LANG_HOOKS_NAME): Override.\n+\t(init_parse): Update.\n+\n 2001-11-08  Andreas Franck  <afranck@gmx.de>\n \n \t* Make-lang.in (G77_INSTALL_NAME, G77_CROSS_NAME): Handle "}, {"sha": "79eadefe0de245824434ffdcca2be4025a7fda5a", "filename": "gcc/f/com.c", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -136,11 +136,6 @@ typedef struct { unsigned :16, :16, :16; } vms_ino_t;\n \n /* Externals defined here.  */\n \n-/* ~~gcc/tree.h *should* declare this, because toplev.c and dwarfout.c\n-   reference it.  */\n-\n-const char * const language_string = \"GNU F77\";\n-\n /* Stream for reading from the input file.  */\n FILE *finput;\n \n@@ -14212,8 +14207,6 @@ init_parse (filename)\n   setvbuf (finput, (char *) xmalloc (IO_BUFFER_SIZE), _IOFBF, IO_BUFFER_SIZE);\n #endif\n \n-  /* Make identifier nodes long enough for the language-specific slots.  */\n-  set_identifier_size (sizeof (struct lang_identifier));\n   decl_printable_name = lang_printable_name;\n   print_error_function = lang_print_error_function;\n \n@@ -14264,6 +14257,8 @@ static void ffe_init PARAMS ((void));\n static void ffe_finish PARAMS ((void));\n static void ffe_init_options PARAMS ((void));\n \n+#undef  LANG_HOOKS_NAME\n+#define LANG_HOOKS_NAME\t\t\t\"GNU F77\"\n #undef  LANG_HOOKS_INIT\n #define LANG_HOOKS_INIT\t\t\tffe_init\n #undef  LANG_HOOKS_FINISH\n@@ -14281,7 +14276,7 @@ static void ffe_init_options PARAMS ((void));\n #undef LANG_HOOKS_GET_ALIAS_SET\n #define LANG_HOOKS_GET_ALIAS_SET hook_get_alias_set_0\n \n-struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n+const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n /* used by print-tree.c */\n \n@@ -14302,12 +14297,6 @@ ffe_finish ()\n     malloc_pool_display (malloc_pool_image ());\n }\n \n-const char *\n-lang_identify ()\n-{\n-  return \"f77\";\n-}\n-\n static void\n ffe_init_options ()\n {"}, {"sha": "284665932edb834afea855fe6ff376093af5edf3", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -1,3 +1,11 @@\n+2001-11-09  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* jcf-parse.c (init_lex): Remove.\n+\t* lang.c (language_string, lang_identify): Remove.\n+\t(struct lang_hooks): Constify.\n+\t(LANG_HOOKS_NAME): Override.\n+\t(init_parse): Update.\n+\n 2001-11-08  Andreas Franck  <afranck@gmx.de>\n \n \t* Make-lang.in (JAVA_INSTALL_NAME, JAVA_CROSS_NAME): Handle "}, {"sha": "6190cf358e581725dd168ce0508934854cae68f3", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -261,13 +261,6 @@ parse_signature (jcf, sig_index)\n \t\t\t\t   JPOOL_UTF_LENGTH (jcf, sig_index));\n }\n \n-void\n-init_lex ()\n-{\n-  /* Make identifier nodes long enough for the language-specific slots.  */\n-  set_identifier_size (sizeof (struct lang_identifier));\n-}\n-\n void\n set_yydebug (value)\n      int value;"}, {"sha": "feeb89ae0d77d72135e4dafc2bc2b7e067764a8c", "filename": "gcc/java/lang.c", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -99,8 +99,6 @@ static const char *const java_tree_code_name[] = {\n \n int compiling_from_source;\n \n-const char * const language_string = \"GNU Java\";\n-\n char * resource_name;\n \n int flag_emit_class_files = 0;\n@@ -197,6 +195,8 @@ static int dependency_tracking = 0;\n #define DEPEND_TARGET_SET 4\n #define DEPEND_FILE_ALREADY_SET 8\n \n+#undef LANG_HOOKS_NAME\n+#define LANG_HOOKS_NAME \"GNU Java\"\n #undef LANG_HOOKS_INIT\n #define LANG_HOOKS_INIT java_init\n #undef LANG_HOOKS_INIT_OPTIONS\n@@ -205,7 +205,7 @@ static int dependency_tracking = 0;\n #define LANG_HOOKS_DECODE_OPTION java_decode_option\n \n /* Each front end provides its own.  */\n-struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n+const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n /* Process an option that can accept a `no-' form.\n    Return 1 if option found, 0 otherwise.  */\n@@ -474,8 +474,6 @@ init_parse (filename)\n \t}\n     }\n \n-  init_lex ();\n-\n   return filename;\n }\n \n@@ -744,12 +742,6 @@ java_init_options ()\n   flag_non_call_exceptions = 1;\n }\n \n-const char *\n-lang_identify ()\n-{\n-  return \"Java\";\n-}\n-\n /* Hooks for print_node.  */\n \n void"}, {"sha": "340efddf680351b24be52e090ef33d5ad51f8a12", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -56,6 +56,8 @@ tree lhd_tree_inlining_copy_res_decl_for_inlining PARAMS ((tree, tree,\n \t\t\t\t\t\t\t   int *, void *));\n int lhd_tree_inlining_anon_aggr_type_p\t\tPARAMS ((tree));\n \n+#define LANG_HOOKS_NAME\t\t\t\"GNU unknown\"\n+#define LANG_HOOKS_IDENTIFIER_SIZE\tsizeof (struct lang_identifier)\n #define LANG_HOOKS_INIT\t\t\tlhd_do_nothing\n #define LANG_HOOKS_FINISH\t\tlhd_do_nothing\n #define LANG_HOOKS_CLEAR_BINDING_STACK\tlhd_clear_binding_stack\n@@ -95,6 +97,8 @@ int lhd_tree_inlining_anon_aggr_type_p\t\tPARAMS ((tree));\n \n /* The whole thing.  The structure is defined in toplev.h.  */\n #define LANG_HOOKS_INITIALIZER { \\\n+  LANG_HOOKS_NAME, \\\n+  LANG_HOOKS_IDENTIFIER_SIZE, \\\n   LANG_HOOKS_INIT, \\\n   LANG_HOOKS_FINISH, \\\n   LANG_HOOKS_CLEAR_BINDING_STACK, \\"}, {"sha": "5254afb1f99585aeb140aff8499a46787e07552c", "filename": "gcc/langhooks.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -49,6 +49,13 @@ struct lang_hooks_for_tree_inlining\n \n struct lang_hooks\n {\n+  /* String identifying the front end.  e.g. \"GNU C++\".  */\n+  const char *name;\n+\n+  /* sizeof (struct lang_identifier), so make_node () creates\n+     identifier nodes long enough for the language-specific slots.  */\n+  size_t identifier_size;\n+\n   /* Called first, to initialize the front end.  */\n   void (*init) PARAMS ((void));\n \n@@ -88,6 +95,6 @@ struct lang_hooks\n };\n \n /* Each front end provides its own.  */\n-extern struct lang_hooks lang_hooks;\n+extern const struct lang_hooks lang_hooks;\n \n #endif /* GCC_LANG_HOOKS_H */"}, {"sha": "a4cbcdb273dccdee6cd75e700d66eb72b5558900", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -451,6 +451,8 @@ static int generating_instance_variables = 0;\n \n static int print_struct_values = 0;\n \n+#undef LANG_HOOKS_NAME\n+#define LANG_HOOKS_NAME \"GNU Objective-C\"\n #undef LANG_HOOKS_INIT\n #define LANG_HOOKS_INIT objc_init\n #undef LANG_HOOKS_INIT_OPTIONS\n@@ -461,7 +463,7 @@ static int print_struct_values = 0;\n #define LANG_HOOKS_POST_OPTIONS objc_post_options\n \n /* Each front end provides its own.  */\n-struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n+const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n /* Post-switch processing.  */\n static void\n@@ -536,9 +538,6 @@ generate_struct_by_value_array ()\n static void\n objc_init_options ()\n {\n-  /* Make identifier nodes long enough for the language-specific slots.  */\n-  set_identifier_size (sizeof (struct lang_identifier));\n-\n   parse_in = cpp_create_reader (ident_hash, CLK_OBJC);\n   c_language = clk_objective_c;\n }\n@@ -601,12 +600,6 @@ finish_file ()\n     fclose (gen_declaration_file);\n }\n \n-const char *\n-lang_identify ()\n-{\n-  return \"objc\";\n-}\n-\n static int\n objc_decode_option (argc, argv)\n      int argc;"}, {"sha": "e5b674a8903fd031aa28ae016cf9da0f8230096d", "filename": "gcc/stringpool.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fstringpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Fstringpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstringpool.c?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -32,7 +32,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"ggc.h\"\n #include \"tree.h\"\n #include \"hashtable.h\"\n-#include \"toplev.h\"\n \n /* The \"\" allocated string.  */\n const char empty_string[] = \"\";\n@@ -143,19 +142,6 @@ maybe_get_identifier (text)\n   return NULL_TREE;\n }\n \n-/* Record the size of an identifier node for the language in use.\n-   SIZE is the total size in bytes.\n-   This is called by the language-specific files.  This must be\n-   called before allocating any identifiers.  */\n-\n-void\n-set_identifier_size (size)\n-     int size;\n-{\n-  tree_code_length[(int) IDENTIFIER_NODE]\n-    = (size - sizeof (struct tree_common)) / sizeof (tree);\n-}\n-\n /* Report some basic statistics about the string pool.  */\n \n void"}, {"sha": "f6473e119189046b09155f6996edfbd5e105c9f3", "filename": "gcc/toplev.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -4647,6 +4647,10 @@ toplev_main (argc, argv)\n   flag_short_enums = DEFAULT_SHORT_ENUMS;\n #endif\n \n+  tree_code_length[(int) IDENTIFIER_NODE]\n+    = ((lang_hooks.identifier_size - sizeof (struct tree_common))\n+       / sizeof (tree));\n+\n   /* Initialize the garbage-collector.  */\n   init_ggc ();\n   init_stringpool ();\n@@ -5015,7 +5019,7 @@ print_version (file, indent)\n \t   \"%s%s%s version %s (%s) compiled by CC.\\n\"\n #endif\n \t   , indent, *indent != 0 ? \" \" : \"\",\n-\t   language_string, version_string, TARGET_NAME,\n+\t   lang_hooks.name, version_string, TARGET_NAME,\n \t   indent, __VERSION__);\n }\n "}, {"sha": "b92a5ecf3d9f7881574eaa7299fd76f8d1132cc5", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac88239fc25f4785cbdb4e6c29dd24145fc71d2/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=3ac88239fc25f4785cbdb4e6c29dd24145fc71d2", "patch": "@@ -2650,8 +2650,6 @@ extern void (*incomplete_decl_finalize_hook)\tPARAMS ((tree));\n extern const char *init_parse\t\t\tPARAMS ((const char *));\n extern void finish_parse\t\t\tPARAMS ((void));\n \n-extern const char * const language_string;\n-\n /* Declare a predefined function.  Return the declaration.  This function is\n    provided by each language frontend.  */\n extern tree builtin_function\t\t\tPARAMS ((const char *, tree, int,\n@@ -2777,14 +2775,9 @@ extern tree fold_builtin\t\tPARAMS ((tree));\n \f\n /* The language front-end must define these functions.  */\n \n-/* Function of no arguments for initializing lexical scanning.  */\n-extern void init_lex\t\t\t\tPARAMS ((void));\n /* Function of no arguments for initializing the symbol table.  */\n extern void init_decl_processing\t\tPARAMS ((void));\n \n-/* Function to identify which front-end produced the output file.  */\n-extern const char *lang_identify\t\t\tPARAMS ((void));\n-\n /* Function to replace the DECL_LANG_SPECIFIC field of a DECL with a copy.  */\n extern void copy_lang_decl\t\t\tPARAMS ((tree));\n \n@@ -2833,7 +2826,6 @@ struct obstack;\n \n /* In tree.c */\n extern int really_constant_p\t\tPARAMS ((tree));\n-extern void set_identifier_size\t\tPARAMS ((int));\n extern int int_fits_type_p\t\tPARAMS ((tree, tree));\n extern int tree_log2\t\t\tPARAMS ((tree));\n extern int tree_floor_log2\t\tPARAMS ((tree));"}]}