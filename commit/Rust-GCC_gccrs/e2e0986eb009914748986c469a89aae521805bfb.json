{"sha": "e2e0986eb009914748986c469a89aae521805bfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJlMDk4NmViMDA5OTE0NzQ4OTg2YzQ2OWE4OWFhZTUyMTgwNWJmYg==", "commit": {"author": {"name": "Gavin Romig-Koch", "email": "gavin@cygnus.com", "date": "1999-02-22T08:18:56Z"}, "committer": {"name": "Gavin Romig-Koch", "email": "gavin@gcc.gnu.org", "date": "1999-02-22T08:18:56Z"}, "message": "c-lex.c (yylex): Replace warning about integer constants being larger than long-longs...\n\n\t* c-lex.c (yylex): Replace warning about integer constants being\n\tlarger than long-longs, with a warning about integer constants\n        being larger than the largest target integer.\n\nFrom-SVN: r25364", "tree": {"sha": "100a85bbee6a92b3b340227d4689216288e82779", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/100a85bbee6a92b3b340227d4689216288e82779"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2e0986eb009914748986c469a89aae521805bfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2e0986eb009914748986c469a89aae521805bfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2e0986eb009914748986c469a89aae521805bfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2e0986eb009914748986c469a89aae521805bfb/comments", "author": null, "committer": null, "parents": [{"sha": "e9c0315e10f7778d51504be20dcb525dec080d44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9c0315e10f7778d51504be20dcb525dec080d44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9c0315e10f7778d51504be20dcb525dec080d44"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "75981688af9044e33077c1cb444156bd78c8c963", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e0986eb009914748986c469a89aae521805bfb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e0986eb009914748986c469a89aae521805bfb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2e0986eb009914748986c469a89aae521805bfb", "patch": "@@ -1,3 +1,9 @@\n+Mon Feb 22 10:55:00 1999  Gavin Romig-Koch  <gavin@cygnus.com>\n+\n+\t* c-lex.c (yylex): Replace warning about integer constants being\n+\tlarger than long-longs, with a warning about integer constants \n+        being larger than the largest target integer.\n+\n Fri Feb 19 18:18:56 1999  Don Bowman  <don@pixstream.com>\n \n \t* configure.in (mips*-*-vxworks*): Enable gthreads vxworks support."}, {"sha": "8f63b2db7dc3e31b62ef59fb03ab4439a62f2045", "filename": "gcc/c-lex.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2e0986eb009914748986c469a89aae521805bfb/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2e0986eb009914748986c469a89aae521805bfb/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=e2e0986eb009914748986c469a89aae521805bfb", "patch": "@@ -1698,15 +1698,15 @@ yylex ()\n \t\tc = GETC();\n \t      }\n \n-\t    /* If the constant won't fit in an unsigned long long,\n-\t       then warn that the constant is out of range.  */\n+\t    /* If the constant won't fit in the targets widest int,\n+\t       or it won't fit in the host's representation for ints, \n+\t       then warn that the constant is out of range. */\n \n-\t    /* ??? This assumes that long long and long integer types are\n-\t       a multiple of 8 bits.  This better than the original code\n-\t       though which assumed that long was exactly 32 bits and long\n-\t       long was exactly 64 bits.  */\n-\n-\t    bytes = TYPE_PRECISION (long_long_integer_type_node) / 8;\n+#if HOST_BITS_PER_WIDE_INT >= 64\n+\t    bytes = TYPE_PRECISION (intTI_type_node) / HOST_BITS_PER_CHAR;\n+#else\n+\t    bytes = TYPE_PRECISION (intDI_type_node) / HOST_BITS_PER_CHAR;\n+#endif\n \n \t    warn = overflow;\n \t    for (i = bytes; i < TOTAL_PARTS; i++)"}]}