{"sha": "b75d6babbcf1a4d0fa1f358f52015020ffa688d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc1ZDZiYWJiY2YxYTRkMGZhMWYzNThmNTIwMTUwMjBmZmE2ODhkMQ==", "commit": {"author": {"name": "Mark Dettinger", "email": "dettinge@de.ibm.com", "date": "2004-12-16T12:31:32Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2004-12-16T12:31:32Z"}, "message": "s390.c (struct processor_costs): Two new fields: madbr, maebr.\n\n2004-12-16  Mark Dettinger  <dettinge@de.ibm.com>\n\n\t* config/s390/s390.c (struct processor_costs): Two new fields:\n\tmadbr, maebr.\n\t(s390_rtx_costs): Added handling of multipy and add in SFmode.\n\tMore precise values for cost of multiply and add.\n\nFrom-SVN: r92259", "tree": {"sha": "0eb9b31eb39bc39efdaee23da11440f88cb95308", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0eb9b31eb39bc39efdaee23da11440f88cb95308"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b75d6babbcf1a4d0fa1f358f52015020ffa688d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b75d6babbcf1a4d0fa1f358f52015020ffa688d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b75d6babbcf1a4d0fa1f358f52015020ffa688d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b75d6babbcf1a4d0fa1f358f52015020ffa688d1/comments", "author": null, "committer": null, "parents": [{"sha": "cacd0a2ccff5b9e18996d4c4e46a936c4543db22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cacd0a2ccff5b9e18996d4c4e46a936c4543db22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cacd0a2ccff5b9e18996d4c4e46a936c4543db22"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "b857cce14b21e5a3545008bdd4ae054ed42a3973", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75d6babbcf1a4d0fa1f358f52015020ffa688d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75d6babbcf1a4d0fa1f358f52015020ffa688d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b75d6babbcf1a4d0fa1f358f52015020ffa688d1", "patch": "@@ -1,3 +1,10 @@\n+2004-12-16  Mark Dettinger  <dettinge@de.ibm.com>\n+\n+\t* config/s390/s390.c (struct processor_costs): Two new fields:\n+\tmadbr, maebr.\n+\t(s390_rtx_costs): Added handling of multipy and add in SFmode.\n+\tMore precise values for cost of multiply and add.\n+\n 2004-12-15  Richard Henderson  <rth@redhat.com>\n \n \tPR target/19028"}, {"sha": "9db222a8ffd60898c608bf6587c95115ac2911dd", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75d6babbcf1a4d0fa1f358f52015020ffa688d1/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75d6babbcf1a4d0fa1f358f52015020ffa688d1/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=b75d6babbcf1a4d0fa1f358f52015020ffa688d1", "patch": "@@ -105,6 +105,8 @@ struct processor_costs\n   const int mult_df;  /* cost of multiplication in DFmode.  */\n   const int sqdbr;    /* cost of square root in DFmode.  */\n   const int sqebr;    /* cost of square root in SFmode.  */\n+  const int madbr;    /* cost of multiply and add in DFmode.  */\n+  const int maebr;    /* cost of multiply and add in SFmode.  */\n };\n \n const struct processor_costs *s390_cost;\n@@ -127,6 +129,8 @@ struct processor_costs z900_cost =\n   COSTS_N_INSNS (7),     /* multiplication in DFmode */\n   COSTS_N_INSNS (44),    /* SQDBR */\n   COSTS_N_INSNS (35),    /* SQEBR */\n+  COSTS_N_INSNS (18),    /* MADBR */\n+  COSTS_N_INSNS (13),    /* MAEBR */\n };\n \n static const\n@@ -147,6 +151,8 @@ struct processor_costs z990_cost =\n   COSTS_N_INSNS (1),     /* multiplication in DFmode */\n   COSTS_N_INSNS (66),    /* SQDBR */\n   COSTS_N_INSNS (38),    /* SQEBR */\n+  COSTS_N_INSNS (1),     /* MADBR */\n+  COSTS_N_INSNS (1),     /* MAEBR */\n };\n \n \n@@ -1902,13 +1908,16 @@ s390_rtx_costs (rtx x, int code, int outer_code, int *total)\n     case PLUS:\n     case MINUS:\n       /* Check for multiply and add.  */\n-      if (GET_MODE (x) == DFmode\n+      if ((GET_MODE (x) == DFmode || GET_MODE (x) == SFmode)\n \t  && GET_CODE (XEXP (x, 0)) == MULT\n \t  && TARGET_HARD_FLOAT && TARGET_IEEE_FLOAT && TARGET_FUSED_MADD)\n \t{\n \t  /* This is the multiply and add case.  */\n-\t  *total = s390_cost->mult_df \n-\t    + rtx_cost (XEXP (XEXP (x, 0), 0), MULT) \n+\t  if (GET_MODE (x) == DFmode)\n+\t    *total = s390_cost->madbr;\n+\t  else\n+\t    *total = s390_cost->maebr;\n+\t  *total += rtx_cost (XEXP (XEXP (x, 0), 0), MULT) \n \t    + rtx_cost (XEXP (XEXP (x, 0), 1), MULT) \n \t    + rtx_cost (XEXP (x, 1), code);\n \t  return true;  /* Do not do an additional recursive descent.  */"}]}