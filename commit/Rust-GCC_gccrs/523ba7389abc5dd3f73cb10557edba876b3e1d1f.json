{"sha": "523ba7389abc5dd3f73cb10557edba876b3e1d1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIzYmE3Mzg5YWJjNWRkM2Y3M2NiMTA1NTdlZGJhODc2YjNlMWQxZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-08-21T17:23:10Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-08-21T17:23:10Z"}, "message": "gencodes.c (gencodes): Print the comma for the preceding enum value rather than the current one.\n\ngcc/\n\t* gencodes.c (gencodes): Print the comma for the preceding\n\tenum value rather than the current one.  Use aliased enum values\n\trather than #defines for compiled-out patterns.\n\t(main): Update accordingly.  Replace LAST_INSN_CODE with\n\tNUM_INSN_CODES.\n\t* lra.c (insn_code_data): Update accordingly.\n\t(finish_insn_code_data_once, get_static_insn_data): Likewise.\n\t* recog.h (target_recog): Likewise.\n\t(preprocess_insn_constraints): Change parameter to unsigned int.\n\t* recog.c (preprocess_insn_constraints): Likewise.\n\t(recog_init): Replace LAST_INSN_CODE with NUM_INSN_CODES.\n\t* tree-vect-stmts.c (vectorizable_operation): Simplify.\n\nFrom-SVN: r227076", "tree": {"sha": "48205e4dfefd1ab26f456d3fbd7f172bbab3cf5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48205e4dfefd1ab26f456d3fbd7f172bbab3cf5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/523ba7389abc5dd3f73cb10557edba876b3e1d1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/523ba7389abc5dd3f73cb10557edba876b3e1d1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/523ba7389abc5dd3f73cb10557edba876b3e1d1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/523ba7389abc5dd3f73cb10557edba876b3e1d1f/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f5dffc0ba1786e6af96fd31e9c04599b818aeedb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5dffc0ba1786e6af96fd31e9c04599b818aeedb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5dffc0ba1786e6af96fd31e9c04599b818aeedb"}], "stats": {"total": 63, "additions": 36, "deletions": 27}, "files": [{"sha": "2c074a0ab1a560c7c32a2a360380c8f8c55a5889", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/523ba7389abc5dd3f73cb10557edba876b3e1d1f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/523ba7389abc5dd3f73cb10557edba876b3e1d1f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=523ba7389abc5dd3f73cb10557edba876b3e1d1f", "patch": "@@ -1,3 +1,18 @@\n+2015-08-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gencodes.c (gencodes): Print the comma for the preceding\n+\tenum value rather than the current one.  Use aliased enum values\n+\trather than #defines for compiled-out patterns.\n+\t(main): Update accordingly.  Replace LAST_INSN_CODE with\n+\tNUM_INSN_CODES.\n+\t* lra.c (insn_code_data): Update accordingly.\n+\t(finish_insn_code_data_once, get_static_insn_data): Likewise.\n+\t* recog.h (target_recog): Likewise.\n+\t(preprocess_insn_constraints): Change parameter to unsigned int.\n+\t* recog.c (preprocess_insn_constraints): Likewise.\n+\t(recog_init): Replace LAST_INSN_CODE with NUM_INSN_CODES.\n+\t* tree-vect-stmts.c (vectorizable_operation): Simplify.\n+\n 2015-08-21  Markus Trippelsdorf  <markus@trippelsdorf.de>\n \n \tPR rtl-optimization/61657"}, {"sha": "d4560b4abf4c795a4c0dfed622524eecc912a46c", "filename": "gcc/gencodes.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/523ba7389abc5dd3f73cb10557edba876b3e1d1f/gcc%2Fgencodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/523ba7389abc5dd3f73cb10557edba876b3e1d1f/gcc%2Fgencodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencodes.c?ref=523ba7389abc5dd3f73cb10557edba876b3e1d1f", "patch": "@@ -40,9 +40,9 @@ gen_insn (md_rtx_info *info)\n   if (name[0] != 0 && name[0] != '*')\n     {\n       if (truth == 0)\n-\tprintf (\"#define CODE_FOR_%s CODE_FOR_nothing\\n\", name);\n+\tprintf (\",\\n   CODE_FOR_%s = CODE_FOR_nothing\", name);\n       else\n-\tprintf (\"  CODE_FOR_%s = %d,\\n\", name, info->index);\n+\tprintf (\",\\n  CODE_FOR_%s = %d\", name, info->index);\n     }\n }\n \n@@ -58,15 +58,15 @@ main (int argc, char **argv)\n   if (!init_rtx_reader_args (argc, argv))\n     return (FATAL_EXIT_CODE);\n \n-  puts (\"\\\n+  printf (\"\\\n /* Generated automatically by the program `gencodes'\\n\\\n    from the machine description file `md'.  */\\n\\\n \\n\\\n #ifndef GCC_INSN_CODES_H\\n\\\n #define GCC_INSN_CODES_H\\n\\\n \\n\\\n enum insn_code {\\n\\\n-  CODE_FOR_nothing = 0,\\n\");\n+  CODE_FOR_nothing = 0\");\n \n   /* Read the machine description.  */\n \n@@ -83,10 +83,10 @@ enum insn_code {\\n\\\n \tbreak;\n     }\n \n-  printf (\"  LAST_INSN_CODE = %d\\n\\\n-};\\n\\\n+  printf (\"\\n};\\n\\\n \\n\\\n-#endif /* GCC_INSN_CODES_H */\\n\", get_num_insn_codes () - 1);\n+const unsigned int NUM_INSN_CODES = %d;\\n\\\n+#endif /* GCC_INSN_CODES_H */\\n\", get_num_insn_codes ());\n \n   if (ferror (stdout) || fflush (stdout) || fclose (stdout))\n     return FATAL_EXIT_CODE;"}, {"sha": "a836cab630f39e44bdf854ee79ae958b659bdcf1", "filename": "gcc/lra.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/523ba7389abc5dd3f73cb10557edba876b3e1d1f/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/523ba7389abc5dd3f73cb10557edba876b3e1d1f/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=523ba7389abc5dd3f73cb10557edba876b3e1d1f", "patch": "@@ -585,7 +585,7 @@ finish_insn_regs (void)\n \n /* Map INSN_CODE -> the static insn data.  This info is valid during\n    all translation unit.  */\n-struct lra_static_insn_data *insn_code_data[LAST_INSN_CODE];\n+struct lra_static_insn_data *insn_code_data[NUM_INSN_CODES];\n \n /* Debug insns are represented as a special insn with one input\n    operand which is RTL expression in var_location.  */\n@@ -631,9 +631,7 @@ init_insn_code_data_once (void)\n static void\n finish_insn_code_data_once (void)\n {\n-  int i;\n-\n-  for (i = 0; i < LAST_INSN_CODE; i++)\n+  for (unsigned int i = 0; i < NUM_INSN_CODES; i++)\n     {\n       if (insn_code_data[i] != NULL)\n \tfree (insn_code_data[i]);\n@@ -650,7 +648,7 @@ get_static_insn_data (int icode, int nop, int ndup, int nalt)\n   struct lra_static_insn_data *data;\n   size_t n_bytes;\n \n-  lra_assert (icode < LAST_INSN_CODE);\n+  lra_assert (icode < (int) NUM_INSN_CODES);\n   if (icode >= 0 && (data = insn_code_data[icode]) != NULL)\n     return data;\n   lra_assert (nop >= 0 && ndup >= 0 && nalt >= 0);"}, {"sha": "c032424e06bab586de1f18258c62eb724ca2c255", "filename": "gcc/recog.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/523ba7389abc5dd3f73cb10557edba876b3e1d1f/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/523ba7389abc5dd3f73cb10557edba876b3e1d1f/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=523ba7389abc5dd3f73cb10557edba876b3e1d1f", "patch": "@@ -2441,9 +2441,9 @@ preprocess_constraints (int n_operands, int n_alternatives,\n    instruction ICODE.  */\n \n const operand_alternative *\n-preprocess_insn_constraints (int icode)\n+preprocess_insn_constraints (unsigned int icode)\n {\n-  gcc_checking_assert (IN_RANGE (icode, 0, LAST_INSN_CODE));\n+  gcc_checking_assert (IN_RANGE (icode, 0, NUM_INSN_CODES - 1));\n   if (this_target_recog->x_op_alt[icode])\n     return this_target_recog->x_op_alt[icode];\n \n@@ -4118,7 +4118,7 @@ recog_init ()\n     }\n   memset (this_target_recog->x_bool_attr_masks, 0,\n \t  sizeof (this_target_recog->x_bool_attr_masks));\n-  for (int i = 0; i < LAST_INSN_CODE; ++i)\n+  for (unsigned int i = 0; i < NUM_INSN_CODES; ++i)\n     if (this_target_recog->x_op_alt[i])\n       {\n \tfree (this_target_recog->x_op_alt[i]);"}, {"sha": "327d6c07494375b08a0381231bb3575bfc759748", "filename": "gcc/recog.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/523ba7389abc5dd3f73cb10557edba876b3e1d1f/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/523ba7389abc5dd3f73cb10557edba876b3e1d1f/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=523ba7389abc5dd3f73cb10557edba876b3e1d1f", "patch": "@@ -137,7 +137,7 @@ extern void extract_constrain_insn_cached (rtx_insn *);\n extern void extract_insn_cached (rtx_insn *);\n extern void preprocess_constraints (int, int, const char **,\n \t\t\t\t    operand_alternative *);\n-extern const operand_alternative *preprocess_insn_constraints (int);\n+extern const operand_alternative *preprocess_insn_constraints (unsigned int);\n extern void preprocess_constraints (rtx_insn *);\n extern rtx_insn *peep2_next_insn (int);\n extern int peep2_regno_dead_p (int, int);\n@@ -393,8 +393,8 @@ enum bool_attr {\n /* Target-dependent globals.  */\n struct target_recog {\n   bool x_initialized;\n-  alternative_mask x_bool_attr_masks[LAST_INSN_CODE][BA_LAST + 1];\n-  operand_alternative *x_op_alt[LAST_INSN_CODE];\n+  alternative_mask x_bool_attr_masks[NUM_INSN_CODES][BA_LAST + 1];\n+  operand_alternative *x_op_alt[NUM_INSN_CODES];\n };\n \n extern struct target_recog default_target_recog;"}, {"sha": "f87c0664e5b3458528f3c2dbc6de01a76def312f", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/523ba7389abc5dd3f73cb10557edba876b3e1d1f/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/523ba7389abc5dd3f73cb10557edba876b3e1d1f/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=523ba7389abc5dd3f73cb10557edba876b3e1d1f", "patch": "@@ -4719,7 +4719,7 @@ vectorizable_operation (gimple stmt, gimple_stmt_iterator *gsi,\n   tree new_temp;\n   int op_type;\n   optab optab;\n-  int icode;\n+  bool target_support_p;\n   tree def;\n   gimple def_stmt;\n   enum vect_def_type dt[3]\n@@ -4870,12 +4870,7 @@ vectorizable_operation (gimple stmt, gimple_stmt_iterator *gsi,\n \n   vec_mode = TYPE_MODE (vectype);\n   if (code == MULT_HIGHPART_EXPR)\n-    {\n-      if (can_mult_highpart_p (vec_mode, TYPE_UNSIGNED (vectype)))\n-\ticode = LAST_INSN_CODE;\n-      else\n-\ticode = CODE_FOR_nothing;\n-    }\n+    target_support_p = can_mult_highpart_p (vec_mode, TYPE_UNSIGNED (vectype));\n   else\n     {\n       optab = optab_for_tree_code (code, vectype, optab_default);\n@@ -4886,10 +4881,11 @@ vectorizable_operation (gimple stmt, gimple_stmt_iterator *gsi,\n                              \"no optab.\\n\");\n \t  return false;\n \t}\n-      icode = (int) optab_handler (optab, vec_mode);\n+      target_support_p = (optab_handler (optab, vec_mode)\n+\t\t\t  != CODE_FOR_nothing);\n     }\n \n-  if (icode == CODE_FOR_nothing)\n+  if (!target_support_p)\n     {\n       if (dump_enabled_p ())\n \tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,"}]}