{"sha": "f997b67550144c6c0562f94c9b9cb932125d0444", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk5N2I2NzU1MDE0NGM2YzA1NjJmOTRjOWI5Y2I5MzIxMjVkMDQ0NA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-08T13:03:52Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-08T13:45:37Z"}, "message": "libstdc++: Add C++11 member functions for ios::failure in old ABI\n\nThe new constructors that C++11 added to std::ios_base::failure were\nmissing for the old ABI. This adds them, but just ignores the\nstd::error_code argument (because there's nowhere to store it).\n\nThis also adds a code() member, which should be provided by the\nstd::system_error base class, but that base class isn't present in the\nold ABI.\n\nThis allows the old ios::failure to be used in code that expects the new\nAPI, although with reduced functionality.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ios_base.h (ios_base::failure): Add constructors\n\ttakeing error_code argument. Add code() member function.\n\t* testsuite/27_io/ios_base/failure/cxx11.cc: Allow test to\n\trun for the old ABI but do not check for derivation from\n\tstd::system_error.\n\t* testsuite/27_io/ios_base/failure/error_code.cc: New test.", "tree": {"sha": "8858edff564203f4282df738b271d5ba5a3dff45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8858edff564203f4282df738b271d5ba5a3dff45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f997b67550144c6c0562f94c9b9cb932125d0444", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f997b67550144c6c0562f94c9b9cb932125d0444", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f997b67550144c6c0562f94c9b9cb932125d0444", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f997b67550144c6c0562f94c9b9cb932125d0444/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c06617a79b41da37d80d7e88a3dbc56818f3e706", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c06617a79b41da37d80d7e88a3dbc56818f3e706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c06617a79b41da37d80d7e88a3dbc56818f3e706"}], "stats": {"total": 69, "additions": 68, "deletions": 1}, "files": [{"sha": "729ebd1768e437a8a0c4f94e2fb9217a7ea2d694", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f997b67550144c6c0562f94c9b9cb932125d0444/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f997b67550144c6c0562f94c9b9cb932125d0444/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=f997b67550144c6c0562f94c9b9cb932125d0444", "patch": "@@ -289,6 +289,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       virtual const char*\n       what() const throw();\n \n+#if __cplusplus >= 201103L\n+      // Define the new members required by C++11,\n+      // even though the error_code cannot be stored.\n+\n+      explicit\n+      failure(const string& __s, const error_code&) noexcept\n+      : failure(__s)\n+      { }\n+\n+      explicit\n+      failure(const char* __s, const error_code& = error_code{})\n+      : failure(string(__s))\n+      { }\n+\n+      // Stand-in for system_error::code() but returning by value.\n+      error_code code() const noexcept { return error_code{}; }\n+#endif\n+\n     private:\n       string _M_msg;\n     };"}, {"sha": "06827f662c0111ccbe21cd82cdd86eff28d8f61e", "filename": "libstdc++-v3/testsuite/27_io/ios_base/failure/cxx11.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f997b67550144c6c0562f94c9b9cb932125d0444/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fcxx11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f997b67550144c6c0562f94c9b9cb932125d0444/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fcxx11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fcxx11.cc?ref=f997b67550144c6c0562f94c9b9cb932125d0444", "patch": "@@ -16,14 +16,15 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do run { target c++11 } }\n-// { dg-require-effective-target cxx11-abi }\n \n #include <ios>\n #include <testsuite_hooks.h>\n \n using test_type = std::ios_base::failure;\n \n+#if _GLIBCXX_USE_CXX11_ABI\n static_assert( std::is_base_of<std::system_error, test_type>::value, \"base\" );\n+#endif\n \n void\n test01()"}, {"sha": "a377dc047c9fd8a6ebecdb695568b51fc8732498", "filename": "libstdc++-v3/testsuite/27_io/ios_base/failure/error_code.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f997b67550144c6c0562f94c9b9cb932125d0444/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Ferror_code.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f997b67550144c6c0562f94c9b9cb932125d0444/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Ferror_code.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Ferror_code.cc?ref=f997b67550144c6c0562f94c9b9cb932125d0444", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <ios>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::error_code ec, def_ec;\n+#if _GLIBCXX_USE_CXX11_ABI\n+  // For the new ABI code() should return the constructor argument.\n+  ec = std::make_error_code(std::errc::executable_format_error);\n+  def_ec = std::io_errc::stream;\n+#else\n+  // For the old ABI code() always returns a default-constructed error_code.\n+#endif\n+  std::ios_base::failure e1(\"string literal\");\n+  VERIFY( e1.code() == def_ec );\n+  std::ios_base::failure e2(std::string(\"std::string\"));\n+  VERIFY( e2.code() == def_ec );\n+  std::ios_base::failure e3(\"string literal\", ec);\n+  VERIFY( e3.code() == ec );\n+  std::ios_base::failure e4(std::string(\"std::string\"), ec);\n+  VERIFY( e4.code() == ec );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}