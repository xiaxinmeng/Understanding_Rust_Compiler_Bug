{"sha": "9a4d502421c7469369d863226f03d197bfa2cb13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE0ZDUwMjQyMWM3NDY5MzY5ZDg2MzIyNmYwM2QxOTdiZmEyY2IxMw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-02-04T08:23:22Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-02-04T08:23:22Z"}, "message": "Fix release checking build of ARM.\n\n\t* config/arm/arm.c (arm_gen_far_branch): Move the function\n\toutside of selftests.", "tree": {"sha": "ad3a9a858e211ad6ca4664528a5330ec7665d418", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad3a9a858e211ad6ca4664528a5330ec7665d418"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a4d502421c7469369d863226f03d197bfa2cb13", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl45KfoACgkQTcGC3A+n\nN4WIdwgAtYEyGYF9BcRPPQ4AahqmN+6PIsMpGOhXM5lidNeghKwTWqLqXydYpnFz\nz3Ee3tiZIkfVe5eET/VR0IN83nA/RMpxKJ4z63txw8sMi953VWs60pu2iu0ay8Ek\n6chwIdQBiRyp0yVQ5Vyvj02HybGV0mNSI16Lklmex8RJPhWX/NEvcsQgbhLOLc4i\ncORJfik+lPaDtUGsGhupsiMEIN3bS6s+dtNLnHh/yOW4uwpjrpPyZ1fU3PAavi3c\nV2a0DVqJ112NqMaquFKSY1xofMaX5MHF9ebnmiv49cZqQjdi1JumROD1ZjBtGVEm\negJBP6hCzCdcY3yDyT6nckLSxujzNA==\n=r/6e\n-----END PGP SIGNATURE-----", "payload": "tree ad3a9a858e211ad6ca4664528a5330ec7665d418\nparent 79530f94e9c53153c4fae3b50a8c938f89db0c32\nauthor Martin Liska <mliska@suse.cz> 1580804602 +0100\ncommitter Martin Liska <mliska@suse.cz> 1580804602 +0100\n\nFix release checking build of ARM.\n\n\t* config/arm/arm.c (arm_gen_far_branch): Move the function\n\toutside of selftests.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a4d502421c7469369d863226f03d197bfa2cb13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a4d502421c7469369d863226f03d197bfa2cb13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a4d502421c7469369d863226f03d197bfa2cb13/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79530f94e9c53153c4fae3b50a8c938f89db0c32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79530f94e9c53153c4fae3b50a8c938f89db0c32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79530f94e9c53153c4fae3b50a8c938f89db0c32"}], "stats": {"total": 46, "additions": 25, "deletions": 21}, "files": [{"sha": "59d606b86453b83628d0046ecc43e9114ffbdc27", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a4d502421c7469369d863226f03d197bfa2cb13/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a4d502421c7469369d863226f03d197bfa2cb13/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a4d502421c7469369d863226f03d197bfa2cb13", "patch": "@@ -1,3 +1,8 @@\n+2020-02-04  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/arm/arm.c (arm_gen_far_branch): Move the function\n+\toutside of selftests.\n+\n 2020-02-03  Michael Meissner  <meissner@linux.ibm.com>\n \n \t* config/rs6000/rs6000.c (adjust_vec_address_pcrel): New helper"}, {"sha": "fe3bc675b42ca31b3aa0a84498779182c2cef25f", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a4d502421c7469369d863226f03d197bfa2cb13/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a4d502421c7469369d863226f03d197bfa2cb13/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=9a4d502421c7469369d863226f03d197bfa2cb13", "patch": "@@ -33041,6 +33041,26 @@ arm_run_selftests (void)\n }\n } /* Namespace selftest.  */\n \n+#undef TARGET_RUN_TARGET_SELFTESTS\n+#define TARGET_RUN_TARGET_SELFTESTS selftest::arm_run_selftests\n+#endif /* CHECKING_P */\n+\n+/* Worker function for TARGET_MD_ASM_ADJUST, while in thumb1 mode.\n+   Unlike the arm version, we do NOT implement asm flag outputs.  */\n+\n+rtx_insn *\n+thumb1_md_asm_adjust (vec<rtx> &outputs, vec<rtx> &/*inputs*/,\n+\t\t      vec<const char *> &constraints,\n+\t\t      vec<rtx> &/*clobbers*/, HARD_REG_SET &/*clobbered_regs*/)\n+{\n+  for (unsigned i = 0, n = outputs.length (); i < n; ++i)\n+    if (strncmp (constraints[i], \"=@cc\", 4) == 0)\n+      {\n+\tsorry (\"asm flags not supported in thumb1 mode\");\n+\tbreak;\n+      }\n+  return NULL;\n+}\n \n /* Generate code to enable conditional branches in functions over 1 MiB.\n    Parameters are:\n@@ -33075,27 +33095,6 @@ arm_gen_far_branch (rtx * operands, int pos_label, const char * dest,\n   return \"\";\n }\n \n-#undef TARGET_RUN_TARGET_SELFTESTS\n-#define TARGET_RUN_TARGET_SELFTESTS selftest::arm_run_selftests\n-#endif /* CHECKING_P */\n-\n-/* Worker function for TARGET_MD_ASM_ADJUST, while in thumb1 mode.\n-   Unlike the arm version, we do NOT implement asm flag outputs.  */\n-\n-rtx_insn *\n-thumb1_md_asm_adjust (vec<rtx> &outputs, vec<rtx> &/*inputs*/,\n-\t\t      vec<const char *> &constraints,\n-\t\t      vec<rtx> &/*clobbers*/, HARD_REG_SET &/*clobbered_regs*/)\n-{\n-  for (unsigned i = 0, n = outputs.length (); i < n; ++i)\n-    if (strncmp (constraints[i], \"=@cc\", 4) == 0)\n-      {\n-\tsorry (\"asm flags not supported in thumb1 mode\");\n-\tbreak;\n-      }\n-  return NULL;\n-}\n-\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-arm.h\""}]}