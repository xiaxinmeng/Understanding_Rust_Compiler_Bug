{"sha": "aebfea10bedac8653e199c2d9cb6442184d2eb22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWViZmVhMTBiZWRhYzg2NTNlMTk5YzJkOWNiNjQ0MjE4NGQyZWIyMg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-02-13T10:09:16Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-02-13T10:09:16Z"}, "message": "* i386.md (fop_*_comm_*): allow nonimmediate in the first operand.\n\nFrom-SVN: r49725", "tree": {"sha": "8c84070bd62581b9c7ab0df18dc3d5a1024f77e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c84070bd62581b9c7ab0df18dc3d5a1024f77e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aebfea10bedac8653e199c2d9cb6442184d2eb22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aebfea10bedac8653e199c2d9cb6442184d2eb22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aebfea10bedac8653e199c2d9cb6442184d2eb22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aebfea10bedac8653e199c2d9cb6442184d2eb22/comments", "author": null, "committer": null, "parents": [{"sha": "8e4949e7410cf4cff37d84d3dd725958d4796bf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e4949e7410cf4cff37d84d3dd725958d4796bf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e4949e7410cf4cff37d84d3dd725958d4796bf1"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "78f4449e4bc5042f9e6e057d8534612082088ba8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aebfea10bedac8653e199c2d9cb6442184d2eb22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aebfea10bedac8653e199c2d9cb6442184d2eb22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aebfea10bedac8653e199c2d9cb6442184d2eb22", "patch": "@@ -1,3 +1,7 @@\n+Wed Feb 13 10:35:56 CET 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.md (fop_*_comm_*): allow nonimmediate in the first operand.\n+\n 2002-02-12  Aldy Hernandez  <aldyh@redhat.com>\n \n         * config/rs6000/rs6000.md: Use predicate altivec_register_operand"}, {"sha": "a6e06837377b425d0a58ec3a4f370c739f2bfb66", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aebfea10bedac8653e199c2d9cb6442184d2eb22/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aebfea10bedac8653e199c2d9cb6442184d2eb22/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=aebfea10bedac8653e199c2d9cb6442184d2eb22", "patch": "@@ -13858,10 +13858,11 @@\n (define_insn \"*fop_sf_comm_nosse\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(match_operator:SF 3 \"binary_fp_operator\"\n-\t\t\t[(match_operand:SF 1 \"register_operand\" \"%0\")\n+\t\t\t[(match_operand:SF 1 \"nonimmediate_operand\" \"%0\")\n \t\t\t (match_operand:SF 2 \"nonimmediate_operand\" \"fm\")]))]\n   \"TARGET_80387 && !TARGET_SSE_MATH\n-   && GET_RTX_CLASS (GET_CODE (operands[3])) == 'c'\"\n+   && GET_RTX_CLASS (GET_CODE (operands[3])) == 'c'\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n \t(if_then_else (match_operand:SF 3 \"mult_operator\" \"\") \n@@ -13872,10 +13873,11 @@\n (define_insn \"*fop_sf_comm\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f#x,x#f\")\n \t(match_operator:SF 3 \"binary_fp_operator\"\n-\t\t\t[(match_operand:SF 1 \"register_operand\" \"%0,0\")\n+\t\t\t[(match_operand:SF 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t\t (match_operand:SF 2 \"nonimmediate_operand\" \"fm#x,xm#f\")]))]\n   \"TARGET_80387 && TARGET_SSE_MATH && TARGET_MIX_SSE_I387\n-   && GET_RTX_CLASS (GET_CODE (operands[3])) == 'c'\"\n+   && GET_RTX_CLASS (GET_CODE (operands[3])) == 'c'\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n \t(if_then_else (eq_attr \"alternative\" \"1\")\n@@ -13888,20 +13890,22 @@\n (define_insn \"*fop_sf_comm_sse\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=x\")\n \t(match_operator:SF 3 \"binary_fp_operator\"\n-\t\t\t[(match_operand:SF 1 \"register_operand\" \"%0\")\n+\t\t\t[(match_operand:SF 1 \"nonimmediate_operand\" \"%0\")\n \t\t\t (match_operand:SF 2 \"nonimmediate_operand\" \"xm\")]))]\n-  \"TARGET_SSE_MATH && GET_RTX_CLASS (GET_CODE (operands[3])) == 'c'\"\n+  \"TARGET_SSE_MATH && GET_RTX_CLASS (GET_CODE (operands[3])) == 'c'\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"*fop_df_comm_nosse\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(match_operator:DF 3 \"binary_fp_operator\"\n-\t\t\t[(match_operand:DF 1 \"register_operand\" \"%0\")\n+\t\t\t[(match_operand:DF 1 \"nonimmediate_operand\" \"%0\")\n \t\t\t (match_operand:DF 2 \"nonimmediate_operand\" \"fm\")]))]\n   \"TARGET_80387 && (!TARGET_SSE2 || !TARGET_SSE_MATH)\n-   && GET_RTX_CLASS (GET_CODE (operands[3])) == 'c'\"\n+   && GET_RTX_CLASS (GET_CODE (operands[3])) == 'c'\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n \t(if_then_else (match_operand:SF 3 \"mult_operator\" \"\") \n@@ -13912,10 +13916,11 @@\n (define_insn \"*fop_df_comm\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f#Y,Y#f\")\n \t(match_operator:DF 3 \"binary_fp_operator\"\n-\t\t\t[(match_operand:DF 1 \"register_operand\" \"%0,0\")\n+\t\t\t[(match_operand:DF 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t\t (match_operand:DF 2 \"nonimmediate_operand\" \"fm#Y,Ym#f\")]))]\n   \"TARGET_80387 && TARGET_SSE_MATH && TARGET_SSE2 && TARGET_MIX_SSE_I387\n-   && GET_RTX_CLASS (GET_CODE (operands[3])) == 'c'\"\n+   && GET_RTX_CLASS (GET_CODE (operands[3])) == 'c'\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n \t(if_then_else (eq_attr \"alternative\" \"1\")\n@@ -13928,10 +13933,11 @@\n (define_insn \"*fop_df_comm_sse\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=Y\")\n \t(match_operator:DF 3 \"binary_fp_operator\"\n-\t\t\t[(match_operand:DF 1 \"register_operand\" \"%0\")\n+\t\t\t[(match_operand:DF 1 \"nonimmediate_operand\" \"%0\")\n \t\t\t (match_operand:DF 2 \"nonimmediate_operand\" \"Ym\")]))]\n   \"TARGET_SSE2 && TARGET_SSE_MATH\n-   && GET_RTX_CLASS (GET_CODE (operands[3])) == 'c'\"\n+   && GET_RTX_CLASS (GET_CODE (operands[3])) == 'c'\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"mode\" \"DF\")])"}]}