{"sha": "697073d938614f9285bf9e9ffc5c53d657d9677e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk3MDczZDkzODYxNGY5Mjg1YmY5ZTlmZmM1YzUzZDY1N2Q5Njc3ZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-05-22T20:58:14Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-05-22T20:58:14Z"}, "message": "fold-const.c (ssize_binop): New fn.\n\n\t* fold-const.c (ssize_binop): New fn.\n\t* tree.h: Declare it.\n\nFrom-SVN: r19963", "tree": {"sha": "22ca22ac3001522fcadc9ca83f1ac92b53a179e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22ca22ac3001522fcadc9ca83f1ac92b53a179e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/697073d938614f9285bf9e9ffc5c53d657d9677e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/697073d938614f9285bf9e9ffc5c53d657d9677e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/697073d938614f9285bf9e9ffc5c53d657d9677e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/697073d938614f9285bf9e9ffc5c53d657d9677e/comments", "author": null, "committer": null, "parents": [{"sha": "49feb20cf7a83961a57efdc1d4955a99c3d5a11b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49feb20cf7a83961a57efdc1d4955a99c3d5a11b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49feb20cf7a83961a57efdc1d4955a99c3d5a11b"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "4b21e905eb594565cc82328398d199be8cd0d297", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697073d938614f9285bf9e9ffc5c53d657d9677e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697073d938614f9285bf9e9ffc5c53d657d9677e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=697073d938614f9285bf9e9ffc5c53d657d9677e", "patch": "@@ -1,3 +1,8 @@\n+1998-05-22  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* fold-const.c (ssize_binop): New fn.\n+\t* tree.h: Declare it.\n+\n Fri May 22 03:42:05 1998  Richard Earnshaw (rearnsha@arm.com)\n \n \t* genextract.c (print_path): Handle zero-length path as a special "}, {"sha": "9d1cb36458d8b1db7994f83ab90b75caca842e28", "filename": "gcc/fold-const.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697073d938614f9285bf9e9ffc5c53d657d9677e/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697073d938614f9285bf9e9ffc5c53d657d9677e/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=697073d938614f9285bf9e9ffc5c53d657d9677e", "patch": "@@ -1489,6 +1489,40 @@ size_binop (code, arg0, arg1)\n \n   return fold (build (code, sizetype, arg0, arg1));\n }\n+\n+/* Combine operands OP1 and OP2 with arithmetic operation CODE.\n+   CODE is a tree code.  Data type is taken from `ssizetype',\n+   If the operands are constant, so is the result.  */\n+\n+tree\n+ssize_binop (code, arg0, arg1)\n+     enum tree_code code;\n+     tree arg0, arg1;\n+{\n+  /* Handle the special case of two integer constants faster.  */\n+  if (TREE_CODE (arg0) == INTEGER_CST && TREE_CODE (arg1) == INTEGER_CST)\n+    {\n+      /* And some specific cases even faster than that.  */\n+      if (code == PLUS_EXPR && integer_zerop (arg0))\n+\treturn arg1;\n+      else if ((code == MINUS_EXPR || code == PLUS_EXPR)\n+\t       && integer_zerop (arg1))\n+\treturn arg0;\n+      else if (code == MULT_EXPR && integer_onep (arg0))\n+\treturn arg1;\n+\n+      /* Handle general case of two integer constants.  We convert\n+         arg0 to ssizetype because int_const_binop uses its type for the\n+\t return value.  */\n+      arg0 = convert (ssizetype, arg0);\n+      return int_const_binop (code, arg0, arg1, 0, 0);\n+    }\n+\n+  if (arg0 == error_mark_node || arg1 == error_mark_node)\n+    return error_mark_node;\n+\n+  return fold (build (code, ssizetype, arg0, arg1));\n+}\n \f\n /* Given T, a tree representing type conversion of ARG1, a constant,\n    return a constant tree representing the result of conversion.  */"}, {"sha": "6320077f23b529d0ea9d6972e5ccc5948020461d", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697073d938614f9285bf9e9ffc5c53d657d9677e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697073d938614f9285bf9e9ffc5c53d657d9677e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=697073d938614f9285bf9e9ffc5c53d657d9677e", "patch": "@@ -1484,6 +1484,7 @@ extern tree convert\t\t\tPROTO((tree, tree));\n extern tree size_in_bytes\t\tPROTO((tree));\n extern HOST_WIDE_INT int_size_in_bytes\tPROTO((tree));\n extern tree size_binop\t\t\tPROTO((enum tree_code, tree, tree));\n+extern tree ssize_binop\t\t\tPROTO((enum tree_code, tree, tree));\n extern tree size_int_wide\t\tPROTO((unsigned HOST_WIDE_INT,\n \t\t\t\t\t       unsigned HOST_WIDE_INT, int));\n #define size_int(L) size_int_2 ((L), 0, 0)"}]}