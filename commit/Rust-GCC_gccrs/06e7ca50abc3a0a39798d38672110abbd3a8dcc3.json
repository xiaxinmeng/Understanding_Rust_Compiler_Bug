{"sha": "06e7ca50abc3a0a39798d38672110abbd3a8dcc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZlN2NhNTBhYmMzYTBhMzk3OThkMzg2NzIxMTBhYmJkM2E4ZGNjMw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-04-18T03:46:44Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-04-18T03:46:44Z"}, "message": "re PR libstdc++/9555 (ostream inserters fail to set badbit on exception)\n\n\n2003-04-17  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/9555\n\t* include/bits/ostream.tcc: Catch all exceptions for formatted\n\toutput, instead of std::exception and derivatives.\n\t* include/bits/istream.tcc: Same.\n\t* testsuite/27_io/basic_ostream/inserters_arithmetic/char/9555-oa.cc:\n\t* testsuite/27_io/basic_ostream/inserters_character/char/9555-oc.cc:\n\t* testsuite/27_io/basic_ostream/inserters_other/char/9555-oo.cc:\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/9555-ia.cc:\n\t* testsuite/27_io/basic_istream/extractors_character/char/9555-ic.cc:\n\t* testsuite/27_io/basic_istream/extractors_other/char/9555-io.cc:\n\tNew.\n\nFrom-SVN: r65770", "tree": {"sha": "0326c2a9b128a7129dc87509b792fbd101ddc13d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0326c2a9b128a7129dc87509b792fbd101ddc13d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06e7ca50abc3a0a39798d38672110abbd3a8dcc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06e7ca50abc3a0a39798d38672110abbd3a8dcc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06e7ca50abc3a0a39798d38672110abbd3a8dcc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06e7ca50abc3a0a39798d38672110abbd3a8dcc3/comments", "author": null, "committer": null, "parents": [{"sha": "3cfbe1789af22c094c85d57fcfbbdd279444d062", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cfbe1789af22c094c85d57fcfbbdd279444d062", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cfbe1789af22c094c85d57fcfbbdd279444d062"}], "stats": {"total": 569, "additions": 524, "deletions": 45}, "files": [{"sha": "ad9db7c662cd7014505de0e935af47c16f873b5d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e7ca50abc3a0a39798d38672110abbd3a8dcc3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e7ca50abc3a0a39798d38672110abbd3a8dcc3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=06e7ca50abc3a0a39798d38672110abbd3a8dcc3", "patch": "@@ -1,3 +1,17 @@\n+2003-04-17  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/9555\n+\t* include/bits/ostream.tcc: Catch all exceptions for formatted\n+\toutput, instead of std::exception and derivatives.\n+\t* include/bits/istream.tcc: Same.\n+\t* testsuite/27_io/basic_ostream/inserters_arithmetic/char/9555-oa.cc:\n+\t* testsuite/27_io/basic_ostream/inserters_character/char/9555-oc.cc:\n+\t* testsuite/27_io/basic_ostream/inserters_other/char/9555-oo.cc:\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/9555-ia.cc:\n+\t* testsuite/27_io/basic_istream/extractors_character/char/9555-ic.cc:\n+\t* testsuite/27_io/basic_istream/extractors_other/char/9555-io.cc:\n+\tNew.\n+\n 2003-04-17  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* include/bits/c++config:  Minor cosmetic tweaks."}, {"sha": "713c7bb6f8784f5666312ce3e51e8ce4d0139c7d", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e7ca50abc3a0a39798d38672110abbd3a8dcc3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e7ca50abc3a0a39798d38672110abbd3a8dcc3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=06e7ca50abc3a0a39798d38672110abbd3a8dcc3", "patch": "@@ -118,7 +118,7 @@ namespace std\n \t\tthis->_M_fnumget->get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -155,7 +155,7 @@ namespace std\n #endif\n \t      this->setstate(__err);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -182,7 +182,7 @@ namespace std\n \t\tthis->_M_fnumget->get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -219,7 +219,7 @@ namespace std\n #endif\n \t      this->setstate(__err);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -246,7 +246,7 @@ namespace std\n \t\tthis->_M_fnumget->get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -273,7 +273,7 @@ namespace std\n \t\tthis->_M_fnumget->get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -300,7 +300,7 @@ namespace std\n \t\tthis->_M_fnumget->get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -328,7 +328,7 @@ namespace std\n \t\tthis->_M_fnumget->get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -355,7 +355,7 @@ namespace std\n \t\tthis->_M_fnumget->get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -383,7 +383,7 @@ namespace std\n \t\tthis->_M_fnumget->get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -410,7 +410,7 @@ namespace std\n \t\tthis->_M_fnumget->get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -437,7 +437,7 @@ namespace std\n \t\tthis->_M_fnumget->get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -464,7 +464,7 @@ namespace std\n \t\tthis->_M_fnumget->get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -495,7 +495,7 @@ namespace std\n \t       if (!__sbout || !__xtrct)\n \t\t this->setstate(ios_base::failbit);\n \t     }\n-\t   catch(exception& __fail)\n+\t   catch(...)\n \t     {\n \t       // 27.6.2.5.1 Common requirements.\n \t       // Turn this on without causing an ios::failure to be thrown.\n@@ -527,7 +527,7 @@ namespace std\n \t      else\n \t\tthis->setstate(ios_base::eofbit | ios_base::failbit);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.3 paragraph 1\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -561,7 +561,7 @@ namespace std\n \t      else\n \t\tthis->setstate(ios_base::eofbit | ios_base::failbit);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.3 paragraph 1\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -600,7 +600,7 @@ namespace std\n \t      if (traits_type::eq_int_type(__c, __eof))\n \t\tthis->setstate(ios_base::eofbit);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.3 paragraph 1\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -643,7 +643,7 @@ namespace std\n \t      if (traits_type::eq_int_type(__c, __eof))\n \t\tthis->setstate(ios_base::eofbit);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.3 paragraph 1\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -694,7 +694,7 @@ namespace std\n \t\t    this->setstate(ios_base::failbit);\n \t\t}\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.3 paragraph 1\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -735,7 +735,7 @@ namespace std\n \t      if (traits_type::eq_int_type(__c, __eof))\n \t\tthis->setstate(ios_base::eofbit);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.3 paragraph 1\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -759,7 +759,7 @@ namespace std\n \t{\n \t  try \n \t    { __c = this->rdbuf()->sgetc(); }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.3 paragraph 1\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -786,7 +786,7 @@ namespace std\n \t      if (_M_gcount != __n)\n \t\tthis->setstate(ios_base::eofbit | ios_base::failbit);\n \t    }\t    \n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.3 paragraph 1\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -822,7 +822,7 @@ namespace std\n \t      else\n \t\tthis->setstate(ios_base::eofbit);\t\t    \n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.3 paragraph 1\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -853,7 +853,7 @@ namespace std\n \t\t  || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))\n \t\tthis->setstate(ios_base::badbit);\t\t    \n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.3 paragraph 1\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -884,7 +884,7 @@ namespace std\n \t\t  || traits_type::eq_int_type(__sb->sungetc(), __eof))\n \t\tthis->setstate(ios_base::badbit);\t\t    \n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.3 paragraph 1\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -919,7 +919,7 @@ namespace std\n \t\t    __ret = 0;\n \t\t}\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.3 paragraph 1\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -995,7 +995,7 @@ namespace std\n \t{\n \t  try \n \t    { __in.get(__c); }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -1052,7 +1052,7 @@ namespace std\n #endif\n \t      __in.width(0);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown."}, {"sha": "fc7d08a1b6e0e5b444448d012bca3a33d4940579", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e7ca50abc3a0a39798d38672110abbd3a8dcc3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e7ca50abc3a0a39798d38672110abbd3a8dcc3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=06e7ca50abc3a0a39798d38672110abbd3a8dcc3", "patch": "@@ -66,7 +66,7 @@ namespace std\n \t{ \n \t  try \n \t    { __pf(*this); }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.2.5.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -88,7 +88,7 @@ namespace std\n \t{ \n \t  try \n \t    { __pf(*this); }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.2.5.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -110,7 +110,7 @@ namespace std\n \t{ \n \t  try \n \t    { __pf(*this); }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.2.5.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -134,7 +134,7 @@ namespace std\n \t      if (!__copy_streambufs(*this, __sbin, this->rdbuf()))\n \t\tthis->setstate(ios_base::failbit);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.2.5.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -162,7 +162,7 @@ namespace std\n \t\t\t\t\t  this->fill(), __n).failed())\n \t\t  this->setstate(ios_base::badbit);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -201,7 +201,7 @@ namespace std\n \t\t    this->setstate(ios_base::badbit);\n \t\t}\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -227,7 +227,7 @@ namespace std\n \t\t\t\t\t  this->fill(), __n).failed())\n \t\t  this->setstate(ios_base::badbit);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -268,7 +268,7 @@ namespace std\n \t\t    this->setstate(ios_base::badbit);\n \t\t}\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -294,7 +294,7 @@ namespace std\n \t\t\t\t\t  this->fill(), __n).failed())\n \t\t  this->setstate(ios_base::badbit);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -321,7 +321,7 @@ namespace std\n \t\t\t\t\t  this->fill(), __n).failed())\n \t\t  this->setstate(ios_base::badbit);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -347,7 +347,7 @@ namespace std\n \t\t\t\t\t  this->fill(), __n).failed())\n \t\t  this->setstate(ios_base::badbit);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -373,7 +373,7 @@ namespace std\n \t\t\t\t\t  this->fill(), __n).failed())\n \t\t  this->setstate(ios_base::badbit);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -495,7 +495,7 @@ namespace std\n \t      __out._M_write(__pads, __len);\n \t      __out.width(0);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -531,7 +531,7 @@ namespace std\n \t      __out._M_write(__pads, __len);\n \t      __out.width(0);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -566,7 +566,7 @@ namespace std\n \t      __out._M_write(__s, __len);\n \t      __out.width(0);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -615,7 +615,7 @@ namespace std\n \t      __out._M_write(__str, __len);\n \t      __out.width(0);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown.\n@@ -654,7 +654,7 @@ namespace std\n \t      __out._M_write(__s, __len);\n \t      __out.width(0);\n \t    }\n-\t  catch(exception& __fail)\n+\t  catch(...)\n \t    {\n \t      // 27.6.1.2.1 Common requirements.\n \t      // Turn this on without causing an ios::failure to be thrown."}, {"sha": "5a87fb98582766e890c964b137ba510b6c514ded", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/9555-ia.cc", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e7ca50abc3a0a39798d38672110abbd3a8dcc3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F9555-ia.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e7ca50abc3a0a39798d38672110abbd3a8dcc3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F9555-ia.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F9555-ia.cc?ref=06e7ca50abc3a0a39798d38672110abbd3a8dcc3", "patch": "@@ -0,0 +1,86 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <istream>\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+struct buf: std::streambuf\n+{\n+  virtual int_type overflow(int_type) \n+  { throw 0; }\n+};\n+\n+template<typename T>\n+void testthrow(T arg)\n+{\n+  bool test = true;\n+  buf b;\n+  std::istream is(&b);\n+  is.exceptions(std::ios::badbit);\n+\n+  try \n+    {\n+      is >> arg;\n+    }\n+  catch(int) \n+      {\n+\t// Expected return is zero.\n+        VERIFY( is.bad() );\n+      }\n+  catch(...) \n+    {\n+      VERIFY( false );\n+    }    \n+}\n+\n+int main()\n+{\n+  bool b = true;\n+  short s = -4; \n+  unsigned short us = 4;\n+  int i = -45; \n+  unsigned int ui = 45;\n+  long l = -456;\n+  unsigned long ul = 456;\n+  float f = 3.4;\n+  double d = 3.45;\n+  long double ld = 3.456;\n+\n+  testthrow(b);\n+  testthrow(s);\n+  testthrow(us);\n+  testthrow(i);\n+  testthrow(ui);\n+  testthrow(l);\n+  testthrow(ul);\n+  testthrow(f);\n+  testthrow(d);\n+  testthrow(ld);\n+\n+  return 0;\n+}"}, {"sha": "ba2e8d3c5f4d09aa4c485bccc392499c0993f100", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_character/char/9555-ic.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e7ca50abc3a0a39798d38672110abbd3a8dcc3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F9555-ic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e7ca50abc3a0a39798d38672110abbd3a8dcc3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F9555-ic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_character%2Fchar%2F9555-ic.cc?ref=06e7ca50abc3a0a39798d38672110abbd3a8dcc3", "patch": "@@ -0,0 +1,79 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <istream>\n+#include <streambuf>\n+//#include <testsuite_hooks.h>\n+#define VERIFY(x) x\n+\n+struct buf: std::streambuf\n+{\n+  virtual int_type overflow(int_type) \n+  { throw 0; }\n+};\n+\n+template<typename T>\n+void testthrow(T arg)\n+{\n+  bool test = true;\n+  buf b;\n+  std::istream is(&b);\n+  is.exceptions(std::ios::badbit);\n+\n+  try \n+    {\n+      is >> arg;\n+    }\n+  catch(int) \n+      {\n+\t// Expected return is zero.\n+        VERIFY( is.bad() );\n+      }\n+  catch(...) \n+    {\n+      VERIFY( false );\n+    }    \n+}\n+\n+int main()\n+{\n+  char c = 'a';\n+  unsigned char uc = 'a';\n+  signed char sc = 'a';\n+  char* cp = &c;\n+  signed char* scp = &sc;\n+  unsigned char* ucp = &uc;\n+\n+  testthrow(c);\n+  testthrow(uc);\n+  testthrow(sc);\n+  testthrow(cp);\n+  testthrow(scp);\n+  testthrow(ucp);\n+\n+  return 0;\n+}"}, {"sha": "50ba27c15f84030b2917633340684165ac7626f8", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/char/9555-io.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e7ca50abc3a0a39798d38672110abbd3a8dcc3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2F9555-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e7ca50abc3a0a39798d38672110abbd3a8dcc3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2F9555-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2F9555-io.cc?ref=06e7ca50abc3a0a39798d38672110abbd3a8dcc3", "patch": "@@ -0,0 +1,68 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <istream>\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+struct buf: std::streambuf\n+{\n+  virtual int_type overflow(int_type) \n+  { throw 0; }\n+};\n+\n+template<typename T>\n+void testthrow(T arg)\n+{\n+  bool test = true;\n+  buf b;\n+  std::istream is(&b);\n+  is.exceptions(std::ios::badbit);\n+\n+  try \n+    {\n+      is >> arg;\n+    }\n+  catch(int) \n+      {\n+\t// Expected return is zero.\n+        VERIFY( is.bad() );\n+      }\n+  catch(...) \n+    {\n+      VERIFY( false );\n+    }    \n+}\n+\n+int main()\n+{\n+  buf b;\n+\n+  testthrow(&b);\n+\n+  return 0;\n+}"}, {"sha": "caf716061d9cbc7cba98a9f47930ab08655ddd90", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/char/9555-oa.cc", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e7ca50abc3a0a39798d38672110abbd3a8dcc3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F9555-oa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e7ca50abc3a0a39798d38672110abbd3a8dcc3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F9555-oa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2F9555-oa.cc?ref=06e7ca50abc3a0a39798d38672110abbd3a8dcc3", "patch": "@@ -0,0 +1,86 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <ostream>\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+struct buf: std::streambuf\n+{\n+  virtual int_type overflow(int_type) \n+  { throw 0; }\n+};\n+\n+template<typename T>\n+void testthrow(T arg)\n+{\n+  bool test = true;\n+  buf b;\n+  std::ostream os(&b);\n+  os.exceptions(std::ios::badbit);\n+\n+  try \n+    {\n+      os << arg;\n+    }\n+  catch(int) \n+      {\n+\t// Expected return is zero.\n+        VERIFY( os.bad() );\n+      }\n+  catch(...) \n+    {\n+      VERIFY( false );\n+    }    \n+}\n+\n+int main()\n+{\n+  bool b = true;\n+  short s = -4; \n+  unsigned short us = 4;\n+  int i = -45; \n+  unsigned int ui = 45;\n+  long l = -456;\n+  unsigned long ul = 456;\n+  float f = 3.4;\n+  double d = 3.45;\n+  long double ld = 3.456;\n+\n+  testthrow(b);\n+  testthrow(s);\n+  testthrow(us);\n+  testthrow(i);\n+  testthrow(ui);\n+  testthrow(l);\n+  testthrow(ul);\n+  testthrow(f);\n+  testthrow(d);\n+  testthrow(ld);\n+\n+  return 0;\n+}"}, {"sha": "f1e24f35bd23c5d0bf764818f8dbba9e1e36b4e3", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/char/9555-oc.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e7ca50abc3a0a39798d38672110abbd3a8dcc3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F9555-oc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e7ca50abc3a0a39798d38672110abbd3a8dcc3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F9555-oc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F9555-oc.cc?ref=06e7ca50abc3a0a39798d38672110abbd3a8dcc3", "patch": "@@ -0,0 +1,78 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <ostream>\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+struct buf: std::streambuf\n+{\n+  virtual int_type overflow(int_type) \n+  { throw 0; }\n+};\n+\n+template<typename T>\n+void testthrow(T arg)\n+{\n+  bool test = true;\n+  buf b;\n+  std::ostream os(&b);\n+  os.exceptions(std::ios::badbit);\n+\n+  try \n+    {\n+      os << arg;\n+    }\n+  catch(int) \n+      {\n+\t// Expected return is zero.\n+        VERIFY( os.bad() );\n+      }\n+  catch(...) \n+    {\n+      VERIFY( false );\n+    }    \n+}\n+\n+int main()\n+{\n+  char c = 'a';\n+  unsigned char uc = 'a';\n+  signed char sc = 'a';\n+  const char* ccp = \"governor ann richards\";\n+  const signed char* cscp = reinterpret_cast<const signed char*>(ccp);\n+  const unsigned char* cucp = reinterpret_cast<const unsigned char*>(ccp);\n+\n+  testthrow(c);\n+  testthrow(uc);\n+  testthrow(sc);\n+  testthrow(ccp);\n+  testthrow(cscp);\n+  testthrow(cucp);\n+\n+  return 0;\n+}"}, {"sha": "42ad89cbd1d560f145792ded6b5903381ba3bc1a", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/char/9555-oo.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e7ca50abc3a0a39798d38672110abbd3a8dcc3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F9555-oo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e7ca50abc3a0a39798d38672110abbd3a8dcc3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F9555-oo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F9555-oo.cc?ref=06e7ca50abc3a0a39798d38672110abbd3a8dcc3", "patch": "@@ -0,0 +1,68 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <ostream>\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+struct buf: std::streambuf\n+{\n+  virtual int_type overflow(int_type) \n+  { throw 0; }\n+};\n+\n+template<typename T>\n+void testthrow(T arg)\n+{\n+  bool test = true;\n+  buf b;\n+  std::ostream os(&b);\n+  os.exceptions(std::ios::badbit);\n+\n+  try \n+    {\n+      os << arg;\n+    }\n+  catch(int) \n+      {\n+\t// Expected return is zero.\n+        VERIFY( os.bad() );\n+      }\n+  catch(...) \n+    {\n+      VERIFY( false );\n+    }    \n+}\n+\n+int main()\n+{\n+  buf b;\n+\n+  testthrow(&b);\n+\n+  return 0;\n+}"}]}