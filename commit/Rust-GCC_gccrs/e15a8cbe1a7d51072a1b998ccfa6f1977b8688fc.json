{"sha": "e15a8cbe1a7d51072a1b998ccfa6f1977b8688fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE1YThjYmUxYTdkNTEwNzJhMWI5OThjY2ZhNmYxOTc3Yjg2ODhmYw==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2010-05-14T00:35:16Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2010-05-14T00:35:16Z"}, "message": "re PR target/44075 (__builtin_eh_return miscompiled)\n\n\tPR target/44075\n\t* config/rs6000/rs6000.c (struct machine_function): Reorder\n\tfields for better packing.  Add lr_save_state.\n\t(rs6000_ra_ever_killed): Return lr_save_state if set.\n\t(rs6000_emit_eh_reg_restore): Set lr_save_state.\n\nFrom-SVN: r159382", "tree": {"sha": "e8d0fffdb199a23a50c4c488287e90a6886c7998", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8d0fffdb199a23a50c4c488287e90a6886c7998"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e15a8cbe1a7d51072a1b998ccfa6f1977b8688fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e15a8cbe1a7d51072a1b998ccfa6f1977b8688fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e15a8cbe1a7d51072a1b998ccfa6f1977b8688fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e15a8cbe1a7d51072a1b998ccfa6f1977b8688fc/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3d8d607efced01c0af693f06e559bd8c32438451", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d8d607efced01c0af693f06e559bd8c32438451", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d8d607efced01c0af693f06e559bd8c32438451"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "86e0efd78dfb52749341bf12e0a0f74b1c091bc9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e15a8cbe1a7d51072a1b998ccfa6f1977b8688fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e15a8cbe1a7d51072a1b998ccfa6f1977b8688fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e15a8cbe1a7d51072a1b998ccfa6f1977b8688fc", "patch": "@@ -1,3 +1,11 @@\n+2010-05-14  Alan Modra  <amodra@gmail.com>\n+\n+\tPR target/44075\n+\t* config/rs6000/rs6000.c (struct machine_function): Reorder\n+\tfields for better packing.  Add lr_save_state.\n+\t(rs6000_ra_ever_killed): Return lr_save_state if set.\n+\t(rs6000_emit_eh_reg_restore): Set lr_save_state.\n+\n 2010-05-13  Jan Hubicka  <jh@suse.cz>\n \n \t* varpool.c (decide_is_variable_needed): Drop code checking"}, {"sha": "cd1e3bac8a4a04237a5819caa17fa7203996b75b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e15a8cbe1a7d51072a1b998ccfa6f1977b8688fc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e15a8cbe1a7d51072a1b998ccfa6f1977b8688fc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=e15a8cbe1a7d51072a1b998ccfa6f1977b8688fc", "patch": "@@ -115,14 +115,16 @@ typedef struct rs6000_stack {\n    This is added to the cfun structure.  */\n typedef struct GTY(()) machine_function\n {\n-  /* Flags if __builtin_return_address (n) with n >= 1 was used.  */\n-  int ra_needs_full_frame;\n   /* Some local-dynamic symbol.  */\n   const char *some_ld_name;\n   /* Whether the instruction chain has been scanned already.  */\n   int insn_chain_scanned_p;\n+  /* Flags if __builtin_return_address (n) with n >= 1 was used.  */\n+  int ra_needs_full_frame;\n   /* Flags if __builtin_return_address (0) was used.  */\n   int ra_need_lr;\n+  /* Cache lr_save_p after expansion of builtin_eh_return.  */\n+  int lr_save_state;\n   /* Offset from virtual_stack_vars_rtx to the start of the ABI_V4\n      varargs save area.  */\n   HOST_WIDE_INT varargs_save_offset;\n@@ -17729,6 +17731,9 @@ rs6000_ra_ever_killed (void)\n   if (cfun->is_thunk)\n     return 0;\n \n+  if (cfun->machine->lr_save_state)\n+    return cfun->machine->lr_save_state - 1;\n+\n   /* regs_ever_live has LR marked as used if any sibcalls are present,\n      but this should not force saving and restoring in the\n      pro/epilogue.  Likewise, reg_set_between_p thinks a sibcall\n@@ -17898,6 +17903,12 @@ rs6000_emit_eh_reg_restore (rtx source, rtx scratch)\n     }\n   else\n     emit_move_insn (gen_rtx_REG (Pmode, LR_REGNO), operands[0]);\n+\n+  /* Freeze lr_save_p.  We've just emitted rtl that depends on the\n+     state of lr_save_p so any change from here on would be a bug.  In\n+     particular, stop rs6000_ra_ever_killed from considering the SET\n+     of lr we may have added just above.  */ \n+  cfun->machine->lr_save_state = info->lr_save_p + 1;\n }\n \n static GTY(()) alias_set_type set = -1;"}]}