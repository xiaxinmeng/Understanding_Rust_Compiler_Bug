{"sha": "7eab6e7b91cdf2dbd17595eac46173e3ce65dd84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VhYjZlN2I5MWNkZjJkYmQxNzU5NWVhYzQ2MTczZTNjZTY1ZGQ4NA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-12-23T07:40:04Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-12-23T07:40:04Z"}, "message": "re PR c++/25369 (use of inline function in template class leads to undefined reference)\n\n\tPR c++/25369\n\t* g++.dg/template/ptrmem16.C: New test.\n\tPR c++/25369\n\t* tree.c (really_overloaded_fn): Tweak comment.\n\t* pt.c (tsubst_call_declarator_parms): Remove.\n\t(tsubst_copy): Call mark_used on the member referenced by an\n\tOFFSET_REF.\n\t* semantics.c (finish_qualified_id_expr): Simplify.\n\t* decl2.c (mark_used): Accept BASELINKs.\n\nFrom-SVN: r109010", "tree": {"sha": "d3c9d42deb43cc0a2a85375a47e5680b0096e26c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3c9d42deb43cc0a2a85375a47e5680b0096e26c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7eab6e7b91cdf2dbd17595eac46173e3ce65dd84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eab6e7b91cdf2dbd17595eac46173e3ce65dd84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7eab6e7b91cdf2dbd17595eac46173e3ce65dd84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eab6e7b91cdf2dbd17595eac46173e3ce65dd84/comments", "author": null, "committer": null, "parents": [{"sha": "dd55e286d4b1ea92a85632f15c416c513d2455ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd55e286d4b1ea92a85632f15c416c513d2455ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd55e286d4b1ea92a85632f15c416c513d2455ba"}], "stats": {"total": 96, "additions": 54, "deletions": 42}, "files": [{"sha": "5d906193e733d28b06116c4ad17984c7d3d7b9af", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eab6e7b91cdf2dbd17595eac46173e3ce65dd84/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eab6e7b91cdf2dbd17595eac46173e3ce65dd84/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7eab6e7b91cdf2dbd17595eac46173e3ce65dd84", "patch": "@@ -1,5 +1,13 @@\n 2005-12-22  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/25369\n+\t* tree.c (really_overloaded_fn): Tweak comment.\n+\t* pt.c (tsubst_call_declarator_parms): Remove.\n+\t(tsubst_copy): Call mark_used on the member referenced by an\n+\tOFFSET_REF.\n+\t* semantics.c (finish_qualified_id_expr): Simplify.\n+\t* decl2.c (mark_used): Accept BASELINKs.\n+\n \tPR c++/25364\n \t* typeck.c (build_unary_op): Pass DECLs not names to\n \tbuild_offset_refs."}, {"sha": "10296a708a1945e126cc656b372c830c203998b1", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eab6e7b91cdf2dbd17595eac46173e3ce65dd84/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eab6e7b91cdf2dbd17595eac46173e3ce65dd84/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=7eab6e7b91cdf2dbd17595eac46173e3ce65dd84", "patch": "@@ -3233,14 +3233,27 @@ check_default_args (tree x)\n     }\n }\n \n-/* Mark DECL as \"used\" in the program.  If DECL is a specialization or\n-   implicitly declared class member, generate the actual definition.  */\n+/* Mark DECL (eithet a _DECL or a BASELINK) as \"used\" in the program.\n+   If DECL is a specialization or implicitly declared class member,\n+   generate the actual definition.  */\n \n void\n mark_used (tree decl)\n {\n   HOST_WIDE_INT saved_processing_template_decl = 0;\n \n+  /* If DECL is a BASELINK for a single function, then treat it just\n+     like the DECL for the function.  Otherwise, if the BASELINK is\n+     for an overloaded function, we don't know which function was\n+     actually used until after overload resolution.  */\n+  if (TREE_CODE (decl) == BASELINK)\n+    {\n+      decl = BASELINK_FUNCTIONS (decl);\n+      if (really_overloaded_fn (decl))\n+\treturn;\n+      decl = OVL_CURRENT (decl);\n+    }\n+\n   TREE_USED (decl) = 1;\n   /* If we don't need a value, then we don't need to synthesize DECL.  */ \n   if (skip_evaluation)"}, {"sha": "93dad098689546e4ece0ca306a66f29ccbea26d6", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 34, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eab6e7b91cdf2dbd17595eac46173e3ce65dd84/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eab6e7b91cdf2dbd17595eac46173e3ce65dd84/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7eab6e7b91cdf2dbd17595eac46173e3ce65dd84", "patch": "@@ -144,7 +144,6 @@ static void check_specialization_scope (void);\n static tree process_partial_specialization (tree);\n static void set_current_access_from_decl (tree);\n static void check_default_tmpl_args (tree, tree, int, int);\n-static tree tsubst_call_declarator_parms (tree, tree, tsubst_flags_t, tree);\n static tree get_template_base (tree, tree, tree, tree);\n static int verify_class_unification (tree, tree, tree);\n static tree try_class_unification (tree, tree, tree, tree);\n@@ -6946,39 +6945,6 @@ tsubst_exception_specification (tree fntype,\n   return new_specs;\n }\n \n-/* Substitute into the PARMS of a call-declarator.  */\n-\n-static tree\n-tsubst_call_declarator_parms (tree parms,\n-\t\t\t      tree args,\n-\t\t\t      tsubst_flags_t complain,\n-\t\t\t      tree in_decl)\n-{\n-  tree new_parms;\n-  tree type;\n-  tree defarg;\n-\n-  if (!parms || parms == void_list_node)\n-    return parms;\n-\n-  new_parms = tsubst_call_declarator_parms (TREE_CHAIN (parms),\n-\t\t\t\t\t    args, complain, in_decl);\n-\n-  /* Figure out the type of this parameter.  */\n-  type = tsubst (TREE_VALUE (parms), args, complain, in_decl);\n-\n-  /* Figure out the default argument as well.  Note that we use\n-     tsubst_expr since the default argument is really an expression.  */\n-  defarg = tsubst_expr (TREE_PURPOSE (parms), args, complain, in_decl);\n-\n-  /* Chain this parameter on to the front of those we have already\n-     processed.  We don't use hash_tree_cons because that function\n-     doesn't check TREE_PARMLIST.  */\n-  new_parms = tree_cons (defarg, type, new_parms);\n-\n-  return new_parms;\n-}\n-\n /* Take the tree structure T and replace template parameters used\n    therein with the argument vector ARGS.  IN_DECL is an associated\n    decl for diagnostics.  If an error occurs, returns ERROR_MARK_NODE.\n@@ -8111,6 +8077,10 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t in response to the saved STMT_IS_FULL_EXPR_P setting.  */\n       gcc_unreachable ();\n \n+    case OFFSET_REF:\n+      mark_used (TREE_OPERAND (t, 1));\n+      return t;\n+\n     default:\n       return t;\n     }"}, {"sha": "6912e002d8c52aea2f9c75a864855fbe89d6a48f", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eab6e7b91cdf2dbd17595eac46173e3ce65dd84/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eab6e7b91cdf2dbd17595eac46173e3ce65dd84/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=7eab6e7b91cdf2dbd17595eac46173e3ce65dd84", "patch": "@@ -1513,12 +1513,8 @@ finish_qualified_id_expr (tree qualifying_class,\n   if (error_operand_p (expr))\n     return error_mark_node;\n \n-  if (DECL_P (expr))\n+  if (DECL_P (expr) || BASELINK_P (expr))\n     mark_used (expr);\n-  else if (BASELINK_P (expr)\n-\t   && TREE_CODE (BASELINK_FUNCTIONS (expr)) != TEMPLATE_ID_EXPR\n-\t   && !really_overloaded_fn (BASELINK_FUNCTIONS (expr)))\n-    mark_used (OVL_CURRENT (BASELINK_FUNCTIONS (expr)));\n \n   if (template_p)\n     check_template_keyword (expr);"}, {"sha": "9575c49d33420a12f361c2689108d6d2516cec94", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eab6e7b91cdf2dbd17595eac46173e3ce65dd84/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eab6e7b91cdf2dbd17595eac46173e3ce65dd84/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=7eab6e7b91cdf2dbd17595eac46173e3ce65dd84", "patch": "@@ -843,9 +843,9 @@ is_overloaded_fn (tree x)\n int\n really_overloaded_fn (tree x)\n {\n-  /* A baselink is also considered an overloaded function.  */\n   if (TREE_CODE (x) == OFFSET_REF)\n     x = TREE_OPERAND (x, 1);\n+  /* A baselink is also considered an overloaded function.  */\n   if (BASELINK_P (x))\n     x = BASELINK_FUNCTIONS (x);\n "}, {"sha": "87557d863a7a0d448942c7d8f767d256aa999d02", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eab6e7b91cdf2dbd17595eac46173e3ce65dd84/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eab6e7b91cdf2dbd17595eac46173e3ce65dd84/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7eab6e7b91cdf2dbd17595eac46173e3ce65dd84", "patch": "@@ -1,3 +1,8 @@\n+2005-12-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/25369\n+\t* g++.dg/template/ptrmem16.C: New test.\n+\n 2005-12-23  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/25029"}, {"sha": "770581db828873c5952098f24527207768221bac", "filename": "gcc/testsuite/g++.dg/template/ptrmem16.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eab6e7b91cdf2dbd17595eac46173e3ce65dd84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eab6e7b91cdf2dbd17595eac46173e3ce65dd84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem16.C?ref=7eab6e7b91cdf2dbd17595eac46173e3ce65dd84", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/25369\n+// { dg-do link }\n+\n+template <typename> struct A \n+{\n+  void foo() {}\n+};\n+\n+void bar(void (A<int>::*)()) {}\n+\n+template <int> void baz()\n+{\n+  bar(&A<int>::foo);\n+}\n+\n+int main()\n+{\n+  baz<0>();\n+  return 0;\n+}"}]}