{"sha": "4ef521bbc63f8a3883d507a8b6c1f95f442df3fe", "node_id": "C_kwDOANBUbNoAKDRlZjUyMWJiYzYzZjhhMzg4M2Q1MDdhOGI2YzFmOTVmNDQyZGYzZmU", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-12-14T22:42:52Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-12-15T05:26:13Z"}, "message": "c++: fix initializer_list transformation [PR108071]\n\nIn these testcases, we weren't adequately verifying that constructing the\nelement type from an array element would have the same effect as\nconstructing it from one of the initializers.\n\n\tPR c++/108071\n\tPR c++/105838\n\ngcc/cp/ChangeLog:\n\n\t* call.cc (struct conversion_obstack_sentinel): New.\n\t(maybe_init_list_as_array): Compare conversion of dummy argument.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/initlist131.C: New test.\n\t* g++.dg/cpp0x/initlist132.C: New test.\n\t* g++.dg/cpp0x/initlist133.C: New test.", "tree": {"sha": "83306869a166ea795ca55b4d6944dce955803c04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83306869a166ea795ca55b4d6944dce955803c04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ef521bbc63f8a3883d507a8b6c1f95f442df3fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ef521bbc63f8a3883d507a8b6c1f95f442df3fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ef521bbc63f8a3883d507a8b6c1f95f442df3fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ef521bbc63f8a3883d507a8b6c1f95f442df3fe/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26f4aefaebc056acacc2a842f5b092ed9e671ef0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f4aefaebc056acacc2a842f5b092ed9e671ef0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26f4aefaebc056acacc2a842f5b092ed9e671ef0"}], "stats": {"total": 104, "additions": 98, "deletions": 6}, "files": [{"sha": "c25df17428064d0f4ba9c4753f594c52ebdff068", "filename": "gcc/cp/call.cc", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef521bbc63f8a3883d507a8b6c1f95f442df3fe/gcc%2Fcp%2Fcall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef521bbc63f8a3883d507a8b6c1f95f442df3fe/gcc%2Fcp%2Fcall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.cc?ref=4ef521bbc63f8a3883d507a8b6c1f95f442df3fe", "patch": "@@ -622,6 +622,15 @@ conversion_obstack_alloc (size_t n)\n   return p;\n }\n \n+/* RAII class to discard anything added to conversion_obstack.  */\n+\n+struct conversion_obstack_sentinel\n+{\n+  void *p;\n+  conversion_obstack_sentinel (): p (conversion_obstack_alloc (0)) {}\n+  ~conversion_obstack_sentinel () { obstack_free (&conversion_obstack, p); }\n+};\n+\n /* Allocate rejection reasons.  */\n \n static struct rejection_reason *\n@@ -4219,18 +4228,32 @@ static tree\n maybe_init_list_as_array (tree elttype, tree init)\n {\n   /* Only do this if the array can go in rodata but not once converted.  */\n-  if (!CLASS_TYPE_P (elttype))\n+  if (!TYPE_NON_AGGREGATE_CLASS (elttype))\n     return NULL_TREE;\n   tree init_elttype = braced_init_element_type (init);\n   if (!init_elttype || !SCALAR_TYPE_P (init_elttype) || !TREE_CONSTANT (init))\n     return NULL_TREE;\n \n+  /* Check with a stub expression to weed out special cases, and check whether\n+     we call the same function for direct-init as copy-list-init.  */\n+  conversion_obstack_sentinel cos;\n+  tree arg = build_stub_object (init_elttype);\n+  conversion *c = implicit_conversion (elttype, init_elttype, arg, false,\n+\t\t\t\t       LOOKUP_NORMAL, tf_none);\n+  if (c && c->kind == ck_rvalue)\n+    c = next_conversion (c);\n+  if (!c || c->kind != ck_user)\n+    return NULL_TREE;\n+\n   tree first = CONSTRUCTOR_ELT (init, 0)->value;\n-  if (TREE_CODE (init_elttype) == INTEGER_TYPE && null_ptr_cst_p (first))\n-    /* Avoid confusion from treating 0 as a null pointer constant.  */\n-    first = build1 (UNARY_PLUS_EXPR, init_elttype, first);\n-  first = (perform_implicit_conversion_flags\n-\t   (elttype, first, tf_none, LOOKUP_IMPLICIT|LOOKUP_NO_NARROWING));\n+  conversion *fc = implicit_conversion (elttype, init_elttype, first, false,\n+\t\t\t\t\tLOOKUP_IMPLICIT|LOOKUP_NO_NARROWING,\n+\t\t\t\t\ttf_none);\n+  if (fc && fc->kind == ck_rvalue)\n+    fc = next_conversion (fc);\n+  if (!fc || fc->kind != ck_user || fc->cand->fn != c->cand->fn)\n+    return NULL_TREE;\n+  first = convert_like (fc, first, tf_none);\n   if (first == error_mark_node)\n     /* Let the normal code give the error.  */\n     return NULL_TREE;"}, {"sha": "a714215219a344fe642875bfee85ec598ab47e1c", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist131.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef521bbc63f8a3883d507a8b6c1f95f442df3fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist131.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef521bbc63f8a3883d507a8b6c1f95f442df3fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist131.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist131.C?ref=4ef521bbc63f8a3883d507a8b6c1f95f442df3fe", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/108071\n+// { dg-do compile { target c++11 } }\n+\n+#include <initializer_list>\n+\n+struct OptSpecifier {\n+  explicit OptSpecifier(bool);\n+  OptSpecifier(unsigned);\n+};\n+void f (std::initializer_list<OptSpecifier>);\n+int main()\n+{\n+  f({1});\n+}"}, {"sha": "34e0307cbbc04f1a0bd6e84714b19a152968b442", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist132.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef521bbc63f8a3883d507a8b6c1f95f442df3fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist132.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef521bbc63f8a3883d507a8b6c1f95f442df3fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist132.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist132.C?ref=4ef521bbc63f8a3883d507a8b6c1f95f442df3fe", "patch": "@@ -0,0 +1,30 @@\n+// PR c++/108071\n+// { dg-do compile { target c++11 } }\n+\n+#include <initializer_list>\n+\n+template< typename T1, typename T2 = void >\n+struct ConstCharArrayDetector\n+{\n+    static const bool ok = false;\n+};\n+template< std::size_t N, typename T >\n+struct ConstCharArrayDetector< const char[ N ], T >\n+{\n+    typedef T Type;\n+};\n+\n+struct Dummy { };\n+\n+struct OUString\n+{\n+  template<typename T>\n+    OUString(T&, typename ConstCharArrayDetector<T, Dummy>::Type = Dummy())\n+    { }\n+};\n+\n+struct Sequence {\n+  Sequence(std::initializer_list<OUString>);\n+};\n+\n+Sequence s = {\"\"};"}, {"sha": "08da5bebd0b052e22de602731a09792b39f8b1eb", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist133.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ef521bbc63f8a3883d507a8b6c1f95f442df3fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist133.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ef521bbc63f8a3883d507a8b6c1f95f442df3fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist133.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist133.C?ref=4ef521bbc63f8a3883d507a8b6c1f95f442df3fe", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/108071\n+// { dg-do compile { target c++14 } }\n+\n+#include <initializer_list>\n+\n+template<bool> struct enable_if { };\n+template<> struct enable_if<true> { using type = void; };\n+\n+template<typename T> constexpr bool is_array_v = false;\n+template<typename T, std::size_t N> constexpr bool is_array_v<T[N]> = true;\n+\n+struct OUString\n+{\n+  template<typename T, typename = typename enable_if<is_array_v<T>>::type>\n+  OUString(T&) { }\n+};\n+\n+struct vector\n+{\n+  vector(std::initializer_list<OUString>) { }\n+  template<typename Iter>\n+  vector(Iter i, Iter j) { if (i != j) OUString(*i); }\n+};\n+\n+vector v = { \"\" };"}]}