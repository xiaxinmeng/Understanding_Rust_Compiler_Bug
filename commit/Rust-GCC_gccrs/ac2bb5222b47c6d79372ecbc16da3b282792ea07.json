{"sha": "ac2bb5222b47c6d79372ecbc16da3b282792ea07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMyYmI1MjIyYjQ3YzZkNzkzNzJlY2JjMTZkYTNiMjgyNzkyZWEwNw==", "commit": {"author": {"name": "Robin Dapp", "email": "rdapp@linux.vnet.ibm.com", "date": "2017-10-18T09:14:16Z"}, "committer": {"name": "Robin Dapp", "email": "rdapp@gcc.gnu.org", "date": "2017-10-18T09:14:16Z"}, "message": "S/390: Do not end groups after fallthru edge.\n\ngcc/ChangeLog:\n\n2017-10-17  Robin Dapp  <rdapp@linux.vnet.ibm.com>\n\n\t* config/s390/s390.c (s390_bb_fallthru_entry_likely): New function.\n\t(s390_sched_init): Do not reset s390_sched_state if we entered the\n\tcurrent basic block via a fallthru edge and all others are unlikely.\n\nFrom-SVN: r253850", "tree": {"sha": "55973952685e706bdf6b5ba07f1b1d7f3db26311", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55973952685e706bdf6b5ba07f1b1d7f3db26311"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac2bb5222b47c6d79372ecbc16da3b282792ea07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2bb5222b47c6d79372ecbc16da3b282792ea07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac2bb5222b47c6d79372ecbc16da3b282792ea07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2bb5222b47c6d79372ecbc16da3b282792ea07/comments", "author": {"login": "rdapp1", "id": 22046046, "node_id": "MDQ6VXNlcjIyMDQ2MDQ2", "avatar_url": "https://avatars.githubusercontent.com/u/22046046?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdapp1", "html_url": "https://github.com/rdapp1", "followers_url": "https://api.github.com/users/rdapp1/followers", "following_url": "https://api.github.com/users/rdapp1/following{/other_user}", "gists_url": "https://api.github.com/users/rdapp1/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdapp1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdapp1/subscriptions", "organizations_url": "https://api.github.com/users/rdapp1/orgs", "repos_url": "https://api.github.com/users/rdapp1/repos", "events_url": "https://api.github.com/users/rdapp1/events{/privacy}", "received_events_url": "https://api.github.com/users/rdapp1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "67ba339309e7949cba2f27d3237156440d73d604", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67ba339309e7949cba2f27d3237156440d73d604", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67ba339309e7949cba2f27d3237156440d73d604"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "e4563c8e2ab8790db928a6bf295f06c5b8b1547b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2bb5222b47c6d79372ecbc16da3b282792ea07/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2bb5222b47c6d79372ecbc16da3b282792ea07/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac2bb5222b47c6d79372ecbc16da3b282792ea07", "patch": "@@ -1,3 +1,9 @@\n+2017-10-18  Robin Dapp  <rdapp@linux.vnet.ibm.com>\n+\n+\t* config/s390/s390.c (s390_bb_fallthru_entry_likely): New function.\n+\t(s390_sched_init): Do not reset s390_sched_state if we entered the\n+\tcurrent basic block via a fallthru edge and all others are unlikely.\n+\n 2017-10-18  Robin Dapp  <rdapp@linux.vnet.ibm.com>\n \n \t* config/s390/s390.c (NUM_SIDES): New variable."}, {"sha": "4e089557e102328e5640e04ddd95f19dfa2f3e35", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2bb5222b47c6d79372ecbc16da3b282792ea07/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2bb5222b47c6d79372ecbc16da3b282792ea07/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=ac2bb5222b47c6d79372ecbc16da3b282792ea07", "patch": "@@ -83,6 +83,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"symbol-summary.h\"\n #include \"ipa-prop.h\"\n #include \"ipa-fnsummary.h\"\n+#include \"sched-int.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -14618,6 +14619,28 @@ s390_z10_prevent_earlyload_conflicts (rtx_insn **ready, int *nready_p)\n   ready[0] = tmp;\n }\n \n+/* Returns TRUE if BB is entered via a fallthru edge and all other\n+   incoming edges are less than unlikely.  */\n+static bool\n+s390_bb_fallthru_entry_likely (basic_block bb)\n+{\n+  edge e, fallthru_edge;\n+  edge_iterator ei;\n+\n+  if (!bb)\n+    return false;\n+\n+  fallthru_edge = find_fallthru_edge (bb->preds);\n+  if (!fallthru_edge)\n+    return false;\n+\n+  FOR_EACH_EDGE (e, ei, bb->preds)\n+    if (e != fallthru_edge\n+\t&& e->probability >= profile_probability::unlikely ())\n+      return false;\n+\n+  return true;\n+}\n \n /* The s390_sched_state variable tracks the state of the current or\n    the last instruction group.\n@@ -14626,7 +14649,7 @@ s390_z10_prevent_earlyload_conflicts (rtx_insn **ready, int *nready_p)\n    3     the last group is complete - normal insns\n    4     the last group was a cracked/expanded insn */\n \n-static int s390_sched_state;\n+static int s390_sched_state = 0;\n \n #define S390_SCHED_STATE_NORMAL  3\n #define S390_SCHED_STATE_CRACKED 4\n@@ -15036,7 +15059,21 @@ s390_sched_init (FILE *file ATTRIBUTE_UNUSED,\n {\n   last_scheduled_insn = NULL;\n   memset (last_scheduled_unit_distance, 0, MAX_SCHED_UNITS * sizeof (int));\n-  s390_sched_state = 0;\n+\n+  /* If the next basic block is most likely entered via a fallthru edge\n+     we keep the last sched state.  Otherwise we start a new group.\n+     The scheduler traverses basic blocks in \"instruction stream\" ordering\n+     so if we see a fallthru edge here, s390_sched_state will be of its\n+     source block.\n+\n+     current_sched_info->prev_head is the insn before the first insn of the\n+     block of insns to be scheduled.\n+     */\n+  rtx_insn *insn = current_sched_info->prev_head\n+    ? NEXT_INSN (current_sched_info->prev_head) : NULL;\n+  basic_block bb = insn ? BLOCK_FOR_INSN (insn) : NULL;\n+  if (s390_tune < PROCESSOR_2964_Z13 || !s390_bb_fallthru_entry_likely (bb))\n+    s390_sched_state = 0;\n }\n \n /* This target hook implementation for TARGET_LOOP_UNROLL_ADJUST calculates"}]}