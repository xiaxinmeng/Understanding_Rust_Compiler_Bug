{"sha": "26f2ca2b6f05e0fac53cee2cfe6ab99839fd0cb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZmMmNhMmI2ZjA1ZTBmYWM1M2NlZTJjZmU2YWI5OTgzOWZkMGNiOQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-12-19T17:02:20Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-12-19T17:02:20Z"}, "message": "re PR fortran/30236 ([4.1 only]alternate-return subroutine in generic interface causes ice/segfault)\n\n2006-12-19  Paul Thomas <pault@gcc.gnu.org>\n\n\tPR fortran/30236\n\t* interface.c (compare_interfaces): Handle NULL symbols.\n\t(count_types_test): Count NULL symbols, which correspond to\n\talternate returns.\n\n\t(check_interface1): Change final argument from int to bool\n\tin the function and all references.\n\n2006-12-19  Paul Thomas <pault@gcc.gnu.org>\n\n\tPR fortran/30236\n\t* gfortran.dg/altreturn_3.f90: New test.\n\n\t* gfortran.dg/char_result_12.f90: Fix comment typos.\n\nFrom-SVN: r120052", "tree": {"sha": "efb961a815e927c547538f0fdbf89825777023fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efb961a815e927c547538f0fdbf89825777023fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26f2ca2b6f05e0fac53cee2cfe6ab99839fd0cb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f2ca2b6f05e0fac53cee2cfe6ab99839fd0cb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26f2ca2b6f05e0fac53cee2cfe6ab99839fd0cb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f2ca2b6f05e0fac53cee2cfe6ab99839fd0cb9/comments", "author": null, "committer": null, "parents": [{"sha": "400ebff4948b6c5dfdb5a637a7b2877dacd57a1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/400ebff4948b6c5dfdb5a637a7b2877dacd57a1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/400ebff4948b6c5dfdb5a637a7b2877dacd57a1c"}], "stats": {"total": 78, "additions": 70, "deletions": 8}, "files": [{"sha": "89c1252d40634de8f89f35e39905b791e9ecd2b4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f2ca2b6f05e0fac53cee2cfe6ab99839fd0cb9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f2ca2b6f05e0fac53cee2cfe6ab99839fd0cb9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=26f2ca2b6f05e0fac53cee2cfe6ab99839fd0cb9", "patch": "@@ -1,3 +1,13 @@\n+2006-12-19  Paul Thomas <pault@gcc.gnu.org>\n+\n+\tPR fortran/30236\n+\t* interface.c (compare_interfaces): Handle NULL symbols.\n+\t(count_types_test): Count NULL symbols, which correspond to\n+\talternate returns.\n+\n+\t(check_interface1): Change final argument from int to bool\n+\tin the function and all references.\n+\n 2006-12-18  Roger Sayle  <roger@eyesopen.com>\n \n \t* trans-array.c (gfc_conv_array_index_offset): Avoid multiplying"}, {"sha": "611754ccbd9dab738f815c767aef43e58a33b98b", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f2ca2b6f05e0fac53cee2cfe6ab99839fd0cb9/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f2ca2b6f05e0fac53cee2cfe6ab99839fd0cb9/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=26f2ca2b6f05e0fac53cee2cfe6ab99839fd0cb9", "patch": "@@ -443,6 +443,8 @@ static int compare_interfaces (gfc_symbol *, gfc_symbol *, int);\n static int\n compare_type_rank_if (gfc_symbol * s1, gfc_symbol * s2)\n {\n+  if (s1 == NULL || s2 == NULL)\n+    return s1 == s2 ? 1 : 0;\n \n   if (s1->attr.flavor != FL_PROCEDURE && s2->attr.flavor != FL_PROCEDURE)\n     return compare_type_rank (s1, s2);\n@@ -731,14 +733,14 @@ count_types_test (gfc_formal_arglist * f1, gfc_formal_arglist * f2)\n       if (arg[i].flag != -1)\n \tcontinue;\n \n-      if (arg[i].sym->attr.optional)\n+      if (arg[i].sym && arg[i].sym->attr.optional)\n \tcontinue;\t\t/* Skip optional arguments */\n \n       arg[i].flag = k;\n \n       /* Find other nonoptional arguments of the same type/rank.  */\n       for (j = i + 1; j < n1; j++)\n-\tif (!arg[j].sym->attr.optional\n+\tif ((arg[j].sym == NULL || !arg[j].sym->attr.optional)\n \t    && compare_type_rank_if (arg[i].sym, arg[j].sym))\n \t  arg[j].flag = k;\n \n@@ -968,7 +970,7 @@ check_interface0 (gfc_interface * p, const char *interface_name)\n static int\n check_interface1 (gfc_interface * p, gfc_interface * q0,\n \t\t  int generic_flag, const char *interface_name,\n-\t\t  int referenced)\n+\t\t  bool referenced)\n {\n   gfc_interface * q;\n   for (; p; p = p->next)\n@@ -1008,7 +1010,7 @@ static void\n check_sym_interfaces (gfc_symbol * sym)\n {\n   char interface_name[100];\n-  int k;\n+  bool k;\n \n   if (sym->ns != gfc_current_ns)\n     return;\n@@ -1048,7 +1050,7 @@ check_uop_interfaces (gfc_user_op * uop)\n \tcontinue;\n \n       check_interface1 (uop->operator, uop2->operator, 0,\n-\t\t\tinterface_name, 1);\n+\t\t\tinterface_name, true);\n     }\n }\n \n@@ -1090,7 +1092,7 @@ gfc_check_interfaces (gfc_namespace * ns)\n \n       for (ns2 = ns->parent; ns2; ns2 = ns2->parent)\n \tif (check_interface1 (ns->operator[i], ns2->operator[i], 0,\n-\t\t\t      interface_name, 1))\n+\t\t\t      interface_name, true))\n \t  break;\n     }\n "}, {"sha": "a901726bbf2a3cc969e9737d1557caa18fbed408", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f2ca2b6f05e0fac53cee2cfe6ab99839fd0cb9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f2ca2b6f05e0fac53cee2cfe6ab99839fd0cb9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=26f2ca2b6f05e0fac53cee2cfe6ab99839fd0cb9", "patch": "@@ -1,3 +1,10 @@\n+2006-12-19  Paul Thomas <pault@gcc.gnu.org>\n+\n+\tPR fortran/30236\n+\t* gfortran.dg/altreturn_3.f90: New test.\n+\n+\t* gfortran.dg/char_result_12.f90: Fix comment typos.\n+\n 2006-12-19  Ben Elliston  <bje@au.ibm.com>\n \n \t* gcc.dg/cpp/trad/include.c: #include stdlib.h instead of stdio.h,"}, {"sha": "d4b5afb9ce8d6d683bd748ed7d8840c6c4a0c902", "filename": "gcc/testsuite/gfortran.dg/altreturn_3.f90", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f2ca2b6f05e0fac53cee2cfe6ab99839fd0cb9/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f2ca2b6f05e0fac53cee2cfe6ab99839fd0cb9/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_3.f90?ref=26f2ca2b6f05e0fac53cee2cfe6ab99839fd0cb9", "patch": "@@ -0,0 +1,43 @@\n+! { dg-do run}\n+! Tests the fix for PR30236, which was due to alternate returns\n+! in generic interfaces causing a segfault.  They now work\n+! correctly.\n+!\n+! Contributed by Brooks Moses <brooks@gcc.gnu.org>\n+!\n+module arswitch\n+  implicit none\n+  interface gen\n+    module procedure with\n+    module procedure without\n+  end interface\n+contains\n+  subroutine with(i,*)\n+    integer i\n+    if (i>0) then\n+      i = -1\n+      return 1\n+    else\n+      i = -2\n+      return\n+    end if\n+  end subroutine\n+  subroutine without()\n+    return\n+  end subroutine\n+end module\n+\n+program test\n+  use arswitch\n+  implicit none\n+  integer :: i = 0\n+  call gen (i, *10)\n+  if (i /= -2) call abort ()\n+  i = 2\n+  call gen (i, *20)\n+ 10 continue\n+  call abort()\n+ 20 continue\n+  if (i /= -1) call abort ()\n+end\n+! { dg-final { cleanup-modules \"arswitch\" } }"}, {"sha": "6612dcf888fa5e94351cbf7a2d9bc72152431816", "filename": "gcc/testsuite/gfortran.dg/char_result_12.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f2ca2b6f05e0fac53cee2cfe6ab99839fd0cb9/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f2ca2b6f05e0fac53cee2cfe6ab99839fd0cb9/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_12.f90?ref=26f2ca2b6f05e0fac53cee2cfe6ab99839fd0cb9", "patch": "@@ -1,8 +1,8 @@\n ! { dg-do run }\n ! Tests the fix for PR29912, in which the call to JETTER\n-! would cause a segfault beause a temporary was not being written.\n+! would cause a segfault because a temporary was not being written.\n !\n-! COntributed by Philip Mason  <pmason@ricardo.com>\n+! Contributed by Philip Mason  <pmason@ricardo.com>\n !\n  program testat\n  character(len=4)   :: ctemp(2)"}]}