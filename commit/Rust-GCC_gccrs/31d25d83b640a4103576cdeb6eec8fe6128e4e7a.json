{"sha": "31d25d83b640a4103576cdeb6eec8fe6128e4e7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFkMjVkODNiNjQwYTQxMDM1NzZjZGViNmVlYzhmZTYxMjhlNGU3YQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-02-11T18:22:09Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-02-11T18:22:09Z"}, "message": "2004-02-11  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/DatagramSocket.java\n\t(setReuseAddress): Use Boolean.valueOf() instead of creating a new\n\tBoolean object.\n\t(setBroadcast): Likewise.\n\t* java/net/MulticastSocket.java\n\t(setLoopbackMode): Likewise.\n\t* java/net/ServerSocket.java\n\t(setReuseAddress): Likewise.\n\t* java/net/Socket.java\n\t(setTcpNoDelay): Likewise.\n\t(setSoLinger): Likewise.\n\t(setOOBInline): Likewise.\n\t(setKeepAlive): Likewise.\n\t(setReuseAddress): Likewise.\n\t* java/net/URLConnection.java\n\t(setContentHandler): Replace == with equals().\n\t* java/net/URLStreamHandler.java\n\t(hostSEquals): Fix checking host addresses.\n\t(toExternalForm): Dont check protocol for null. We know already its\n\tnot null.\n\nFrom-SVN: r77670", "tree": {"sha": "3b860ef7c7b10bd3123183217455386411e1a248", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b860ef7c7b10bd3123183217455386411e1a248"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31d25d83b640a4103576cdeb6eec8fe6128e4e7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31d25d83b640a4103576cdeb6eec8fe6128e4e7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31d25d83b640a4103576cdeb6eec8fe6128e4e7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31d25d83b640a4103576cdeb6eec8fe6128e4e7a/comments", "author": null, "committer": null, "parents": [{"sha": "e193b4082e8f7ce791f0bae9e2992c15e2d9d7fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e193b4082e8f7ce791f0bae9e2992c15e2d9d7fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e193b4082e8f7ce791f0bae9e2992c15e2d9d7fa"}], "stats": {"total": 47, "additions": 35, "deletions": 12}, "files": [{"sha": "db67e406552fa371b13fb2207629ff5f2aaabf8b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31d25d83b640a4103576cdeb6eec8fe6128e4e7a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31d25d83b640a4103576cdeb6eec8fe6128e4e7a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=31d25d83b640a4103576cdeb6eec8fe6128e4e7a", "patch": "@@ -1,3 +1,26 @@\n+2004-02-11  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/DatagramSocket.java\n+\t(setReuseAddress): Use Boolean.valueOf() instead of creating a new\n+\tBoolean object.\n+\t(setBroadcast): Likewise.\n+\t* java/net/MulticastSocket.java\n+\t(setLoopbackMode): Likewise.\n+\t* java/net/ServerSocket.java\n+\t(setReuseAddress): Likewise.\n+\t* java/net/Socket.java\n+\t(setTcpNoDelay): Likewise.\n+\t(setSoLinger): Likewise.\n+\t(setOOBInline): Likewise.\n+\t(setKeepAlive): Likewise.\n+\t(setReuseAddress): Likewise.\n+\t* java/net/URLConnection.java\n+\t(setContentHandler): Replace == with equals().\n+\t* java/net/URLStreamHandler.java\n+\t(hostSEquals): Fix checking host addresses.\n+\t(toExternalForm): Dont check protocol for null. We know already its\n+\tnot null.\n+\n 2004-02-10  David Jee  <djee@redhat.com>\n \n \t* java/awt/BorderLayout.java"}, {"sha": "895db94fa525a81c814c81c1fcb630060d1987ce", "filename": "libjava/java/net/DatagramSocket.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31d25d83b640a4103576cdeb6eec8fe6128e4e7a/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31d25d83b640a4103576cdeb6eec8fe6128e4e7a/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramSocket.java?ref=31d25d83b640a4103576cdeb6eec8fe6128e4e7a", "patch": "@@ -798,7 +798,7 @@ public void setReuseAddress(boolean on) throws SocketException\n     if (isClosed())\n       throw new SocketException(\"socket is closed\");\n \n-    getImpl().setOption (SocketOptions.SO_REUSEADDR, new Boolean (on));\n+    getImpl().setOption (SocketOptions.SO_REUSEADDR, Boolean.valueOf(on));\n   }\n \n   /**\n@@ -837,7 +837,7 @@ public void setBroadcast(boolean enable) throws SocketException\n     if (isClosed())\n       throw new SocketException(\"socket is closed\");\n \n-    getImpl().setOption(SocketOptions.SO_BROADCAST, new Boolean(enable));\n+    getImpl().setOption(SocketOptions.SO_BROADCAST, Boolean.valueOf(enable));\n   }\n \n   /**"}, {"sha": "28b76b365ee479b3dc6858deae05e245c59e81e3", "filename": "libjava/java/net/MulticastSocket.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31d25d83b640a4103576cdeb6eec8fe6128e4e7a/libjava%2Fjava%2Fnet%2FMulticastSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31d25d83b640a4103576cdeb6eec8fe6128e4e7a/libjava%2Fjava%2Fnet%2FMulticastSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FMulticastSocket.java?ref=31d25d83b640a4103576cdeb6eec8fe6128e4e7a", "patch": "@@ -255,7 +255,7 @@ public void setLoopbackMode(boolean disable) throws SocketException\n     if (isClosed())\n       throw new SocketException(\"socket is closed\");\n \n-    getImpl().setOption (SocketOptions.IP_MULTICAST_LOOP, new Boolean (disable));\n+    getImpl().setOption (SocketOptions.IP_MULTICAST_LOOP, Boolean.valueOf(disable));\n   }\n \n   /**"}, {"sha": "df338091291f71e03f7e88bdaa5b7c38157814f2", "filename": "libjava/java/net/ServerSocket.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31d25d83b640a4103576cdeb6eec8fe6128e4e7a/libjava%2Fjava%2Fnet%2FServerSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31d25d83b640a4103576cdeb6eec8fe6128e4e7a/libjava%2Fjava%2Fnet%2FServerSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FServerSocket.java?ref=31d25d83b640a4103576cdeb6eec8fe6128e4e7a", "patch": "@@ -471,7 +471,7 @@ public void setReuseAddress (boolean on)\n     if (isClosed())\n       throw new SocketException(\"ServerSocket is closed\");\n     \n-    impl.setOption (SocketOptions.SO_REUSEADDR, new Boolean (on));\n+    impl.setOption (SocketOptions.SO_REUSEADDR, Boolean.valueOf(on));\n   }\n \n   /**"}, {"sha": "4c14e8d99b34e9e268ff52b2c5da8b315c9351f9", "filename": "libjava/java/net/Socket.java", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31d25d83b640a4103576cdeb6eec8fe6128e4e7a/libjava%2Fjava%2Fnet%2FSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31d25d83b640a4103576cdeb6eec8fe6128e4e7a/libjava%2Fjava%2Fnet%2FSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocket.java?ref=31d25d83b640a4103576cdeb6eec8fe6128e4e7a", "patch": "@@ -657,7 +657,7 @@ public void setTcpNoDelay (boolean on)  throws SocketException\n     if (isClosed())\n       throw new SocketException(\"socket is closed\");\n     \n-    getImpl().setOption(SocketOptions.TCP_NODELAY, new Boolean(on));\n+    getImpl().setOption(SocketOptions.TCP_NODELAY, Boolean.valueOf(on));\n   }\n \n   /**\n@@ -719,7 +719,7 @@ public void setSoLinger(boolean on, int linger) throws SocketException\n       }\n     else\n       {\n-        getImpl().setOption(SocketOptions.SO_LINGER, new Boolean(false));\n+        getImpl().setOption(SocketOptions.SO_LINGER, Boolean.valueOf(false));\n       }\n   }\n \n@@ -784,7 +784,7 @@ public void setOOBInline (boolean on) throws SocketException\n     if (isClosed())\n       throw new SocketException(\"socket is closed\");\n     \n-    getImpl().setOption(SocketOptions.SO_OOBINLINE, new Boolean(on));\n+    getImpl().setOption(SocketOptions.SO_OOBINLINE, Boolean.valueOf(on));\n   }\n \n   /**\n@@ -975,7 +975,7 @@ public void setKeepAlive (boolean on) throws SocketException\n     if (isClosed())\n       throw new SocketException(\"socket is closed\");\n     \n-    getImpl().setOption(SocketOptions.SO_KEEPALIVE, new Boolean(on));\n+    getImpl().setOption(SocketOptions.SO_KEEPALIVE, Boolean.valueOf(on));\n   }\n \n   /**\n@@ -1150,7 +1150,7 @@ public boolean getReuseAddress () throws SocketException\n    */\n   public void setReuseAddress (boolean on) throws SocketException\n   {\n-    getImpl().setOption (SocketOptions.SO_REUSEADDR, new Boolean (on));\n+    getImpl().setOption (SocketOptions.SO_REUSEADDR, Boolean.valueOf(on));\n   }\n \n   /**"}, {"sha": "2b383b5502a8bff63ac9ccf8e18c4cd5ce9eee56", "filename": "libjava/java/net/URLConnection.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31d25d83b640a4103576cdeb6eec8fe6128e4e7a/libjava%2Fjava%2Fnet%2FURLConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31d25d83b640a4103576cdeb6eec8fe6128e4e7a/libjava%2Fjava%2Fnet%2FURLConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLConnection.java?ref=31d25d83b640a4103576cdeb6eec8fe6128e4e7a", "patch": "@@ -956,7 +956,7 @@ private ContentHandler setContentHandler(String contentType)\n     ContentHandler handler;\n \n     // No content type so just handle it as the default.\n-    if (contentType == null || contentType == \"\")\n+    if (contentType == null || contentType.equals(\"\"))\n       return null;\n \n     // See if a handler has been cached for this content type."}, {"sha": "af4335f4f44a070d46d69025739ebd90f9aaeb77", "filename": "libjava/java/net/URLStreamHandler.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31d25d83b640a4103576cdeb6eec8fe6128e4e7a/libjava%2Fjava%2Fnet%2FURLStreamHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31d25d83b640a4103576cdeb6eec8fe6128e4e7a/libjava%2Fjava%2Fnet%2FURLStreamHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLStreamHandler.java?ref=31d25d83b640a4103576cdeb6eec8fe6128e4e7a", "patch": "@@ -415,7 +415,7 @@ protected boolean hostsEqual (URL url1, URL url2)\n     InetAddress addr1 = getHostAddress (url1);\n     InetAddress addr2 = getHostAddress (url2);\n \n-    if (addr1 != null || addr2 != null)\n+    if (addr1 != null && addr2 != null)\n       return addr1.equals (addr2);\n \n     String host1 = url1.getHost();\n@@ -511,7 +511,7 @@ protected String toExternalForm(URL u)\n     int size = protocol.length() + host.length() + file.length() + 24;\n     StringBuffer sb = new StringBuffer(size);\n \n-    if (protocol != null && protocol.length() > 0)\n+    if (protocol.length() != 0)\n       {\n \tsb.append(protocol);\n \tsb.append(\":\");"}]}