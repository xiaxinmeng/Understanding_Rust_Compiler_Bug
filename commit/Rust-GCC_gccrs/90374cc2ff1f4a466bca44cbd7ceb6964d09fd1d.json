{"sha": "90374cc2ff1f4a466bca44cbd7ceb6964d09fd1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAzNzRjYzJmZjFmNGE0NjZiY2E0NGNiZDdjZWI2OTY0ZDA5ZmQxZA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-02-02T04:38:30Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-02-02T04:38:30Z"}, "message": "(finish_decl, grokdeclarator, finish_struct): Report overflows in storage sizes.\n\n(finish_decl, grokdeclarator, finish_struct): Report\noverflows in storage sizes.\n(build_enumerator): Report overflows in enumerators.\n\nFrom-SVN: r3402", "tree": {"sha": "3ae728f583948d5fe6958d534bb38bed67ec108e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ae728f583948d5fe6958d534bb38bed67ec108e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90374cc2ff1f4a466bca44cbd7ceb6964d09fd1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90374cc2ff1f4a466bca44cbd7ceb6964d09fd1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90374cc2ff1f4a466bca44cbd7ceb6964d09fd1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90374cc2ff1f4a466bca44cbd7ceb6964d09fd1d/comments", "author": null, "committer": null, "parents": [{"sha": "e0f776fbcb705304c3e6fa1fe0ba0e530f85e4a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f776fbcb705304c3e6fa1fe0ba0e530f85e4a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0f776fbcb705304c3e6fa1fe0ba0e530f85e4a2"}], "stats": {"total": 37, "additions": 23, "deletions": 14}, "files": [{"sha": "96c1523ef796bd11a6a46ed6d0928ed682862b63", "filename": "gcc/c-decl.c", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90374cc2ff1f4a466bca44cbd7ceb6964d09fd1d/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90374cc2ff1f4a466bca44cbd7ceb6964d09fd1d/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=90374cc2ff1f4a466bca44cbd7ceb6964d09fd1d", "patch": "@@ -3308,9 +3308,11 @@ finish_decl (decl, init, asmspec_tree)\n \t}\n \n       if ((DECL_EXTERNAL (decl) || TREE_STATIC (decl))\n-\t  && DECL_SIZE (decl) != 0\n-\t  && TREE_CODE (DECL_SIZE (decl)) != INTEGER_CST)\n-\terror_with_decl (decl, \"storage size of `%s' isn't constant\");\n+\t  && DECL_SIZE (decl) != 0)\n+\tif (TREE_CODE (DECL_SIZE (decl)) == INTEGER_CST)\n+\t  constant_expression_warning (DECL_SIZE (decl));\n+\telse\n+\t  error_with_decl (decl, \"storage size of `%s' isn't constant\");\n     }\n \n   /* Output the assembler code and/or RTL code for variables and functions,\n@@ -3961,6 +3963,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t\tpedwarn (\"ANSI C forbids zero-size array `%s'\", name);\n \t      if (TREE_CODE (size) == INTEGER_CST)\n \t\t{\n+\t\t  constant_expression_warning (size);\n \t\t  if (INT_CST_LT (size, integer_zero_node))\n \t\t    {\n \t\t      error (\"size of array `%s' is negative\", name);\n@@ -4896,11 +4899,14 @@ finish_struct (t, fieldlist)\n       /* Detect invalid bit-field size.  */\n       if (DECL_INITIAL (x))\n \tSTRIP_NOPS (DECL_INITIAL (x));\n-      if (DECL_INITIAL (x) && TREE_CODE (DECL_INITIAL (x)) != INTEGER_CST)\n-\t{\n-\t  error_with_decl (x, \"bit-field `%s' width not an integer constant\");\n-\t  DECL_INITIAL (x) = NULL;\n-\t}\n+      if (DECL_INITIAL (x))\n+\tif (TREE_CODE (DECL_INITIAL (x)) == INTEGER_CST)\n+\t  constant_expression_warning (DECL_INITIAL (x));\n+\telse\n+\t  {\n+\t    error_with_decl (x, \"bit-field `%s' width not an integer constant\");\n+\t    DECL_INITIAL (x) = NULL;\n+\t  }\n \n       /* Detect invalid bit-field type.  */\n       if (DECL_INITIAL (x)\n@@ -5308,12 +5314,15 @@ build_enumerator (name, value)\n   if (value)\n     STRIP_TYPE_NOPS (value);\n \n-  if (value != 0 && TREE_CODE (value) != INTEGER_CST)\n-    {\n-      error (\"enumerator value for `%s' not integer constant\",\n-\t     IDENTIFIER_POINTER (name));\n-      value = 0;\n-    }\n+  if (value != 0)\n+    if (TREE_CODE (value) == INTEGER_CST)\n+      constant_expression_warning (value);\n+    else\n+      {\n+\terror (\"enumerator value for `%s' not integer constant\",\n+\t       IDENTIFIER_POINTER (name));\n+\tvalue = 0;\n+      }\n \n   /* Default based on previous value.  */\n   /* It should no longer be possible to have NON_LVALUE_EXPR"}]}