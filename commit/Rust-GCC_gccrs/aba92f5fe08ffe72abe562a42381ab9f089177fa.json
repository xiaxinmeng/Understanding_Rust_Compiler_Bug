{"sha": "aba92f5fe08ffe72abe562a42381ab9f089177fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJhOTJmNWZlMDhmZmU3MmFiZTU2MmE0MjM4MWFiOWYwODkxNzdmYQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-06-03T11:26:54Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-06-03T11:26:54Z"}, "message": "re PR target/53512 (SH Target: Allow fsca and fsrra for non-SH4A)\n\n\tPR target/53512\n\t* sh.opt (mfsca, mfsrra): New options.\n\t* sh.md (rsqrtsf2): Use TARGET_FPU_ANY and TARGET_FSRRA\tcondition.\n\t(fsca): Use TARGET_FPU_ANY and TARGET_FSCA condition.\n\t(sinssf2, cossf2): Fold expanders to ...\n\t(sincossf3): ... this new expander.  Use TARGET_FPU_ANY and\n\tTARGET_FSCA condition.\n\t* sh.c (sh_option_override): Handle TARGET_FSRRA and TARGET_FSCA.\n\t* doc/invoke.texi (SH Options): Add descriptions for -mfsca,\n\t-mno-fsca, -mfsrra, -mno-fsrra.\n\n\tPR target/53512\n\t* gcc.target/sh/pr53512-1.c: New.\n\t* gcc.target/sh/pr53512-2.c: New.\n\t* gcc.target/sh/pr53512-3.c: New.\n\t* gcc.target/sh/pr53512-4.c: New.\n\nFrom-SVN: r188149", "tree": {"sha": "0fc02d7c6ff4ae14954689e5015e70a55244738c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fc02d7c6ff4ae14954689e5015e70a55244738c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aba92f5fe08ffe72abe562a42381ab9f089177fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aba92f5fe08ffe72abe562a42381ab9f089177fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aba92f5fe08ffe72abe562a42381ab9f089177fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aba92f5fe08ffe72abe562a42381ab9f089177fa/comments", "author": null, "committer": null, "parents": [{"sha": "d58e7d69246d89b43f2f04c09da812c37087577f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d58e7d69246d89b43f2f04c09da812c37087577f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d58e7d69246d89b43f2f04c09da812c37087577f"}], "stats": {"total": 208, "additions": 173, "deletions": 35}, "files": [{"sha": "0e102728931a626c3d75bccea000e86de63e602b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba92f5fe08ffe72abe562a42381ab9f089177fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba92f5fe08ffe72abe562a42381ab9f089177fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aba92f5fe08ffe72abe562a42381ab9f089177fa", "patch": "@@ -1,3 +1,16 @@\n+2012-06-03  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/53512\n+\t* sh.opt (mfsca, mfsrra): New options.\n+\t* sh.md (rsqrtsf2): Use TARGET_FPU_ANY and TARGET_FSRRA\tcondition.\n+\t(fsca): Use TARGET_FPU_ANY and TARGET_FSCA condition.\n+\t(sinssf2, cossf2): Fold expanders to ...\n+\t(sincossf3): ... this new expander.  Use TARGET_FPU_ANY and\n+\tTARGET_FSCA condition.\n+\t* sh.c (sh_option_override): Handle TARGET_FSRRA and TARGET_FSCA.\n+\t* doc/invoke.texi (SH Options): Add descriptions for -mfsca,\n+\t-mno-fsca, -mfsrra, -mno-fsrra.\n+\n 2012-06-03  Matt Turner  <mattst88@gmail.com>\n \n \t* config/mips/4600.md (r4700_imul_si): New.\n@@ -18,7 +31,7 @@\n \t* config/sparc/sparc-protos.h (sparc_initial_elimination_offset):\n \tPrototype it.\n \n-2012-06-2  Kenneth Zadeck <zadeck@naturalbridge.com>\n+2012-06-02  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n \t* expmed.c (expand_mult, choose_multiplier): Change \"2 *\n \tHOST_BITS_PER_WIDE_INT\" to \"HOST_BITS_PER_DOUBLE_INT\"."}, {"sha": "d5071c8fd5723eaf949105c08ced0d2cfddfa919", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba92f5fe08ffe72abe562a42381ab9f089177fa/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba92f5fe08ffe72abe562a42381ab9f089177fa/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=aba92f5fe08ffe72abe562a42381ab9f089177fa", "patch": "@@ -876,12 +876,29 @@ sh_option_override (void)\n \talign_functions = min_align;\n     }\n \n-  /* Enable fmac insn for \"a * b + c\" SFmode calculations when -ffast-math\n-     is enabled and -mno-fused-madd is not specified by the user.\n-     The fmac insn can't be enabled by default due to the implied\n-     FMA semantics.   See also PR target/29100.  */\n-  if (global_options_set.x_TARGET_FMAC == 0 && flag_unsafe_math_optimizations)\n-    TARGET_FMAC = 1;\n+  if (flag_unsafe_math_optimizations)\n+    {\n+      /* Enable fmac insn for \"a * b + c\" SFmode calculations when -ffast-math\n+\t is enabled and -mno-fused-madd is not specified by the user.\n+\t The fmac insn can't be enabled by default due to the implied\n+\t FMA semantics.   See also PR target/29100.  */\n+      if (global_options_set.x_TARGET_FMAC == 0)\n+\tTARGET_FMAC = 1;\n+\n+      /* Enable fsca insn for SH4A if not otherwise specified by the user.  */\n+      if (global_options_set.x_TARGET_FSCA == 0 && TARGET_SH4A_FP)\n+\tTARGET_FSCA = 1;\n+\n+      /* Enable fsrra insn for SH4A if not otherwise specified by the user.  */\n+      if (global_options_set.x_TARGET_FSRRA == 0 && TARGET_SH4A_FP)\n+\tTARGET_FSRRA = 1;\n+    }\n+\n+  /*  Allow fsrra insn only if -funsafe-math-optimizations and\n+      -ffinite-math-only is enabled.  */\n+  TARGET_FSRRA = TARGET_FSRRA\n+\t\t && flag_unsafe_math_optimizations\n+\t\t && flag_finite_math_only;\n \n   if (sh_fixed_range_str)\n     sh_fix_range (sh_fixed_range_str);\n@@ -896,7 +913,6 @@ sh_option_override (void)\n     error (\"-msoft-atomic and -mhard-atomic cannot be used at the same time\");\n   if (TARGET_HARD_ATOMIC && ! TARGET_SH4A_ARCH)\n     error (\"-mhard-atomic is only available for SH4A targets\");\n-\n }\n \f\n /* Print the operand address in x to the stream.  */"}, {"sha": "3bb14e8b908df7fdc3cc8814db7a91af95e769c7", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 14, "deletions": 26, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba92f5fe08ffe72abe562a42381ab9f089177fa/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba92f5fe08ffe72abe562a42381ab9f089177fa/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=aba92f5fe08ffe72abe562a42381ab9f089177fa", "patch": "@@ -10689,7 +10689,7 @@ label:\n \t(div:SF (match_operand:SF 1 \"immediate_operand\" \"i\")\n \t\t(sqrt:SF (match_operand:SF 2 \"register_operand\" \"0\"))))\n    (use (match_operand:PSI 3 \"fpscr_operand\" \"c\"))]\n-  \"TARGET_SH4A_FP && flag_unsafe_math_optimizations\n+  \"TARGET_FPU_ANY && TARGET_FSRRA\n    && operands[1] == CONST1_RTX (SFmode)\"\n   \"fsrra\t%0\"\n   [(set_attr \"type\" \"fsrra\")\n@@ -10705,47 +10705,35 @@ label:\n \t (unspec:SF [(mult:SF (float:SF (match_dup 1)) (match_dup 2))\n \t\t    ] UNSPEC_FCOSA)))\n    (use (match_operand:PSI 3 \"fpscr_operand\" \"c\"))]\n-  \"TARGET_SH4A_FP && flag_unsafe_math_optimizations\n+  \"TARGET_FPU_ANY && TARGET_FSCA\n    && operands[2] == sh_fsca_int2sf ()\"\n   \"fsca\tfpul,%d0\"\n   [(set_attr \"type\" \"fsca\")\n    (set_attr \"fp_mode\" \"single\")])\n \n-(define_expand \"sinsf2\"\n+;; When the sincos pattern is defined, the builtin functions sin and cos\n+;; will be expanded to the sincos pattern and one of the output values will\n+;; remain unused.\n+(define_expand \"sincossf3\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"\")\n-\t(unspec:SF [(match_operand:SF 1 \"fp_arith_reg_operand\" \"\")]\n-\t\t   UNSPEC_FSINA))]\n-  \"TARGET_SH4A_FP && flag_unsafe_math_optimizations\"\n+\t(unspec:SF [(match_operand:SF 2 \"fp_arith_reg_operand\" \"\")]\n+\t\t   UNSPEC_FSINA))\n+   (set (match_operand:SF 1 \"nonimmediate_operand\" \"\")\n+\t(unspec:SF [(match_dup 2)] UNSPEC_FCOSA))]\n+  \"TARGET_FPU_ANY && TARGET_FSCA\"\n {\n   rtx scaled = gen_reg_rtx (SFmode);\n   rtx truncated = gen_reg_rtx (SImode);\n   rtx fsca = gen_reg_rtx (V2SFmode);\n   rtx scale_reg = force_reg (SFmode, sh_fsca_sf2int ());\n \n-  emit_sf_insn (gen_mulsf3 (scaled, operands[1], scale_reg));\n+  emit_sf_insn (gen_mulsf3 (scaled, operands[2], scale_reg));\n   emit_sf_insn (gen_fix_truncsfsi2 (truncated, scaled));\n   emit_sf_insn (gen_fsca (fsca, truncated, sh_fsca_int2sf (),\n \t\t\t  get_fpscr_rtx ()));\n-  emit_move_insn (operands[0], gen_rtx_SUBREG (SFmode, fsca, 0));\n-  DONE;\n-})\n-\n-(define_expand \"cossf2\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"\")\n-\t(unspec:SF [(match_operand:SF 1 \"fp_arith_reg_operand\" \"\")]\n-\t\t   UNSPEC_FCOSA))]\n-  \"TARGET_SH4A_FP && flag_unsafe_math_optimizations\"\n-{\n-  rtx scaled = gen_reg_rtx (SFmode);\n-  rtx truncated = gen_reg_rtx (SImode);\n-  rtx fsca = gen_reg_rtx (V2SFmode);\n-  rtx scale_reg = force_reg (SFmode, sh_fsca_sf2int ());\n \n-  emit_sf_insn (gen_mulsf3 (scaled, operands[1], scale_reg));\n-  emit_sf_insn (gen_fix_truncsfsi2 (truncated, scaled));\n-  emit_sf_insn (gen_fsca (fsca, truncated, sh_fsca_int2sf (),\n-\t\t\t  get_fpscr_rtx ()));\n-  emit_move_insn (operands[0], gen_rtx_SUBREG (SFmode, fsca, 4));\n+  emit_move_insn (operands[0], gen_rtx_SUBREG (SFmode, fsca, 0));\n+  emit_move_insn (operands[1], gen_rtx_SUBREG (SFmode, fsca, 4));\n   DONE;\n })\n "}, {"sha": "be315d75a6bf426e7c9d06aa49b5b3ca073080ec", "filename": "gcc/config/sh/sh.opt", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba92f5fe08ffe72abe562a42381ab9f089177fa/gcc%2Fconfig%2Fsh%2Fsh.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba92f5fe08ffe72abe562a42381ab9f089177fa/gcc%2Fconfig%2Fsh%2Fsh.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.opt?ref=aba92f5fe08ffe72abe562a42381ab9f089177fa", "patch": "@@ -348,3 +348,12 @@ Don't generate privileged-mode only code; implies -mno-inline-ic_invalidate if t\n mpretend-cmove\n Target Var(TARGET_PRETEND_CMOVE)\n Pretend a branch-around-a-move is a conditional move.\n+\n+mfsca\n+Target Var(TARGET_FSCA)\n+Enable the use of the fsca instruction\n+\n+mfsrra\n+Target Var(TARGET_FSRRA)\n+Enable the use of the fsrra instruction\n+"}, {"sha": "d4f22e84df7f3c39f3b32db51b2adcabf9c8829a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba92f5fe08ffe72abe562a42381ab9f089177fa/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba92f5fe08ffe72abe562a42381ab9f089177fa/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=aba92f5fe08ffe72abe562a42381ab9f089177fa", "patch": "@@ -886,7 +886,7 @@ See RS/6000 and PowerPC Options.\n -mindexed-addressing -mgettrcost=@var{number} -mpt-fixed @gol\n -maccumulate-outgoing-args -minvalid-symbols -msoft-atomic -mhard-atomic @gol\n -mbranch-cost=@var{num} -mcbranchdi -mcmpeqdi -mfused-madd -mno-fused-madd @gol\n--mpretend-cmove -menable-tas}\n+-mfsca -mno-fsca -mfsrra -mno-fsrra -mpretend-cmove -menable-tas}\n \n @emph{Solaris 2 Options}\n @gccoptlist{-mimpure-text  -mno-impure-text @gol\n@@ -18302,6 +18302,28 @@ arithmetic.  @code{-mfused-madd} is enabled by default by option\n disallow the usage of the @code{fmac} instruction for regular calculations\n even if @option{-funsafe-math-optimizations} is in effect.\n \n+@item -mfsca\n+@itemx -mno-fsca\n+@opindex mfsca\n+@opindex mno-fsca\n+Allow or disallow the compiler to emit the @code{fsca} instruction for sine\n+and cosine approximations.  The option @code{-mfsca} must be used in\n+combination with @code{-funsafe-math-optimizations}.  It is enabled by default\n+when generating code for SH4A.  Using @code{-mno-fsca} disables sine and cosine\n+approximations even if @code{-funsafe-math-optimizations} is in effect.\n+\n+@item -mfsrra\n+@itemx -mno-fsrra\n+@opindex mfsrra\n+@opindex mno-fsrra\n+Allow or disallow the compiler to emit the @code{fsrra} instruction for\n+reciprocal square root approximations.  The option @code{-mfsrra} must be used\n+in combination with @code{-funsafe-math-optimizations} and\n+@code{-ffinite-math-only}.  It is enabled by default when generating code for\n+SH4A.  Using @code{-mno-fsrra} disables reciprocal square root approximations\n+even if @code{-funsafe-math-optimizations} and @code{-ffinite-math-only} are\n+in effect.\n+\n @item -mpretend-cmove\n @opindex mpretend-cmove\n Prefer zero-displacement conditional branches for conditional move instruction"}, {"sha": "946fb3f59fc31644f6196661e88d4287bc3321b6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba92f5fe08ffe72abe562a42381ab9f089177fa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba92f5fe08ffe72abe562a42381ab9f089177fa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aba92f5fe08ffe72abe562a42381ab9f089177fa", "patch": "@@ -1,3 +1,11 @@\n+2012-06-03  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/53512\n+\t* gcc.target/sh/pr53512-1.c: New.\n+\t* gcc.target/sh/pr53512-2.c: New.\n+\t* gcc.target/sh/pr53512-3.c: New.\n+\t* gcc.target/sh/pr53512-4.c: New.\n+\n 2012-06-01  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/52973"}, {"sha": "b46db65e78a18d2e2fc9cc093e308689fb8b971d", "filename": "gcc/testsuite/gcc.target/sh/pr53512-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba92f5fe08ffe72abe562a42381ab9f089177fa/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba92f5fe08ffe72abe562a42381ab9f089177fa/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-1.c?ref=aba92f5fe08ffe72abe562a42381ab9f089177fa", "patch": "@@ -0,0 +1,26 @@\n+/* Verify that the fsca insn is used when specifying -mfsca and\n+  -funsafe-math-optimizations.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1 -mfsca -funsafe-math-optimizations\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n+/* { dg-final { scan-assembler-times \"fsca\" 3 } } */\n+\n+#include <math.h>\n+\n+float\n+test_func_00 (float x)\n+{\n+  return sinf (x) + cosf (x);\n+}\n+\n+float\n+test_func_01 (float x)\n+{\n+  return sinf (x);\n+}\n+\n+float\n+test_func_02 (float x)\n+{\n+  return cosf (x);\n+}"}, {"sha": "d629ee71292a9351587a9df5b2e0ae6e09564d26", "filename": "gcc/testsuite/gcc.target/sh/pr53512-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba92f5fe08ffe72abe562a42381ab9f089177fa/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba92f5fe08ffe72abe562a42381ab9f089177fa/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-2.c?ref=aba92f5fe08ffe72abe562a42381ab9f089177fa", "patch": "@@ -0,0 +1,26 @@\n+/* Verify that the fsca insn is not used when specifying -mno-fsca and\n+  -funsafe-math-optimizations.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1 -mno-fsca -funsafe-math-optimizations\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n+/* { dg-final { scan-assembler-not \"fsca\" } } */\n+\n+#include <math.h>\n+\n+float\n+test_func_00 (float x)\n+{\n+  return sinf (x) + cosf (x);\n+}\n+\n+float\n+test_func_01 (float x)\n+{\n+  return sinf (x);\n+}\n+\n+float\n+test_func_02 (float x)\n+{\n+  return cosf (x);\n+}"}, {"sha": "b8e6ada9fb5369f11cb93a1514e9de094b519c70", "filename": "gcc/testsuite/gcc.target/sh/pr53512-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba92f5fe08ffe72abe562a42381ab9f089177fa/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba92f5fe08ffe72abe562a42381ab9f089177fa/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-3.c?ref=aba92f5fe08ffe72abe562a42381ab9f089177fa", "patch": "@@ -0,0 +1,15 @@\n+/* Verify that the fsrra insn is used when specifying -mfsrra and\n+  -funsafe-math-optimizations and -ffinite-math-only.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1 -mfsrra -funsafe-math-optimizations -ffinite-math-only\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n+/* { dg-final { scan-assembler \"fsrra\" } } */\n+\n+#include <math.h>\n+\n+float\n+test_func_00 (float x)\n+{\n+  return 1 / sqrtf (x);\n+}\n+"}, {"sha": "9ddad38b2120a85e8534e9bdd8af54b23ab6a8d8", "filename": "gcc/testsuite/gcc.target/sh/pr53512-4.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba92f5fe08ffe72abe562a42381ab9f089177fa/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba92f5fe08ffe72abe562a42381ab9f089177fa/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-4.c?ref=aba92f5fe08ffe72abe562a42381ab9f089177fa", "patch": "@@ -0,0 +1,15 @@\n+/* Verify that the fsrra insn is not used when specifying -mno-fsrra and\n+  -funsafe-math-optimizations and -ffinite-math-only.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1 -mno-fsrra -funsafe-math-optimizations -ffinite-math-only\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n+/* { dg-final { scan-assembler-not \"fsrra\" } } */\n+\n+#include <math.h>\n+\n+float\n+test_func_00 (float x)\n+{\n+  return 1 / sqrtf (x);\n+}\n+"}]}