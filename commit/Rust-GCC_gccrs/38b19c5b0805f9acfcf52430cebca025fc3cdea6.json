{"sha": "38b19c5b0805f9acfcf52430cebca025fc3cdea6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhiMTljNWIwODA1ZjlhY2ZjZjUyNDMwY2ViY2EwMjVmYzNjZGVhNg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-08-24T00:17:00Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-08-24T00:17:00Z"}, "message": "Daily bump.", "tree": {"sha": "52abfe049d6efc570437f274567de0d950896358", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52abfe049d6efc570437f274567de0d950896358"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38b19c5b0805f9acfcf52430cebca025fc3cdea6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38b19c5b0805f9acfcf52430cebca025fc3cdea6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38b19c5b0805f9acfcf52430cebca025fc3cdea6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38b19c5b0805f9acfcf52430cebca025fc3cdea6/comments", "author": null, "committer": null, "parents": [{"sha": "8ca7fa84a3af355c3e2bbda2acc61934c16078b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ca7fa84a3af355c3e2bbda2acc61934c16078b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ca7fa84a3af355c3e2bbda2acc61934c16078b2"}], "stats": {"total": 589, "additions": 588, "deletions": 1}, "files": [{"sha": "0183764e7fb2267e6d1f75d3fb0dc03ed32f501f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 197, "deletions": 0, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b19c5b0805f9acfcf52430cebca025fc3cdea6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b19c5b0805f9acfcf52430cebca025fc3cdea6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=38b19c5b0805f9acfcf52430cebca025fc3cdea6", "patch": "@@ -1,3 +1,200 @@\n+2021-08-23  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-gen-builtins.c (parse_bif_entry): Don't call\n+\tasprintf, which is not available on AIX.\n+\n+2021-08-23  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config.gcc (target_gtfiles): Add ./rs6000-builtins.h.\n+\t* config/rs6000/t-rs6000 (EXTRA_GTYPE_DEPS): Set.\n+\n+2021-08-23  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config.gcc (powerpc*-*-*): Add rs6000-builtins.o to extra_objs.\n+\t* config/rs6000/rs6000-gen-builtins.c (main): Close init_file\n+\tlast.\n+\t* config/rs6000/t-rs6000 (rs6000-gen-builtins.o): New target.\n+\t(rbtree.o): Likewise.\n+\t(rs6000-gen-builtins): Likewise.\n+\t(rs6000-builtins.c): Likewise.\n+\t(rs6000-builtins.h): Likewise.\n+\t(rs6000.o): Add dependency.\n+\t(EXTRA_HEADERS): Add rs6000-vecdefines.h.\n+\t(rs6000-vecdefines.h): New target.\n+\t(rs6000-builtins.o): Likewise.\n+\t(rs6000-call.o): Add rs6000-builtins.h as a dependency.\n+\t(rs6000-c.o): Likewise.\n+\n+2021-08-23  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\tPR target/101830\n+\t* config/rs6000/rs6000-gen-builtins.c (consume_whitespace):\n+\tDiagnose buffer overrun.\n+\t(safe_inc_pos): Fix overrun detection.\n+\t(match_identifier): Diagnose buffer overrun.\n+\t(match_integer): Likewise.\n+\t(match_to_right_bracket): Likewise.\n+\n+2021-08-23  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-modref-tree.h (modref_access_node::range_info_useful_p):\n+\tImprove range compare.\n+\t(modref_access_node::contains): New member function.\n+\t(modref_access_node::search): Remove.\n+\t(modref_access_node::insert): Be smarter about subaccesses.\n+\n+2021-08-23  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* config/i386/i386-options.c (ix86_omp_device_kind_arch_isa)\n+\t<omp_device_arch> [ACCEL_COMPILER]: Match \"intel_mic\".\n+\t* config/i386/t-omp-device (omp-device-properties-i386) <arch>:\n+\tAdd \"intel_mic\".\n+\n+2021-08-23  Jeff Law  <jlaw@localhost.localdomain>\n+\n+\t* config/h8300/h8300-protos.h (h8300_expand_epilogue): Add new\n+\targument.\n+\t* config/h8300/jumpcall.md (call, call_value): Restrict to\n+\t!SIBLING_CALL_P cases.\n+\t(subcall, sibcall_value): New patterns & expanders.\n+\t* config/h8300/proepi.md (epilogue): Pass new argument to\n+\th8300_expand_epilogue.\n+\t(sibcall_epilogue): New expander.\n+\t* config/h8300/h8300.c (h8300_expand_epilogue): Handle sibcall\n+\tepilogues too.\n+\t(h8300_ok_for_sibcall_p): New function.\n+\t(TARGET_FUNCTION_OK_FOR_SIBCALL): define.\n+\n+2021-08-23  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* simplify-rtx.c (simplify_unary_operation_1): [TRUNCATE]:\n+\tHandle case where the operand is already the desired mode.\n+\n+2021-08-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR ipa/97565\n+\t* tree-ssa-structalias.c (ipa_pta_execute): Check in_other_partition\n+\tin addition to has_gimple_body.\n+\n+2021-08-23  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR middle-end/101949\n+\t* ipa-modref.c (analyze_ssa_name_flags): Fix merging of\n+\tEAF_NOCLOBBER\n+\n+2021-08-23  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/invoke.texi: Put the option out of -mxl-mode-app-model\n+\ttable.\n+\n+2021-08-23  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-loop.c (vect_compute_single_scalar_iteration_cost):\n+\tProperly scale the inner loop cost only once.\n+\n+2021-08-23  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* tree-ssa-ccp.c (bit_value_binop) [TRUNC_MOD_EXPR, TRUNC_DIV_EXPR]:\n+\tProvide bounds for unsigned (and signed with non-negative operands)\n+\tdivision and modulus.\n+\n+2021-08-23  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* simplify-rtx.c (simplify_truncation): Generalize simplification\n+\tof (truncate:A (subreg:B X)).\n+\t(simplify_unary_operation_1) [FLOAT_TRUNCATE, FLOAT_EXTEND,\n+\tSIGN_EXTEND, ZERO_EXTEND]: Handle cases where the operand\n+\talready has the desired machine mode.\n+\t(test_scalar_int_ops): Add tests that useless extensions and\n+\ttruncations are optimized away.\n+\t(test_scalar_int_ext_ops): New self-test function to confirm\n+\tthat truncations of extensions are correctly simplified.\n+\t(test_scalar_int_ext_ops2): New self-test function to check\n+\ttruncations of truncations, extensions of extensions, and\n+\ttruncations of extensions.\n+\t(test_scalar_ops): Call the above two functions with a\n+\trepresentative sampling of integer machine modes.\n+\n+2021-08-23  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* match.pd (shift transformations): Change the sign of an\n+\tLSHIFT_EXPR if it reduces the number of explicit conversions.\n+\n+2021-08-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/86723\n+\t* gimple-ssa-store-merging.c (find_bswap_or_nop_finalize): Add\n+\tcast64_to_32 argument, set *cast64_to_32 to false, unless n is\n+\tnon-memory permutation of 64-bit src which only has bytes of\n+\t0 or [5..8] and n->range is 4.\n+\t(find_bswap_or_nop): Add cast64_to_32 and mask arguments, adjust\n+\tfind_bswap_or_nop_finalize caller, support bswap with some bytes\n+\tzeroed, as long as at least two bytes are not zeroed.\n+\t(bswap_replace): Add mask argument and handle masking of bswap\n+\tresult.\n+\t(maybe_optimize_vector_constructor): Adjust find_bswap_or_nop\n+\tcaller, punt if cast64_to_32 or mask is not all ones.\n+\t(pass_optimize_bswap::execute): Adjust find_bswap_or_nop_finalize\n+\tcaller, for now punt if cast64_to_32.\n+\n+2021-08-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/79334\n+\t* tree-ssa-sccvn.c (copy_reference_ops_from_ref): Record\n+\ta type also for COMPONENT_REFs.\n+\t(vn_reference_may_trap): Check ARRAY_REF with constant index\n+\tagainst the array domain.\n+\n+2021-08-23  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/102016\n+\t* config/i386/sse.md (*avx512f_pshufb_truncv8hiv8qi_1): Add\n+\tTARGET_AVX512BW to condition.\n+\n+2021-08-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/101905\n+\t* dwarf2out.c (gen_variable_die): Add DW_AT_location for global\n+\tregister variables already during early_dwarf if possible.\n+\n+2021-08-23  Christophe Lyon  <christophe.lyon@foss.st.com>\n+\n+\t* config/arm/arm_mve.h: Fix __arm_vctp16q return type.\n+\n+2021-08-23  Christophe Lyon  <christophe.lyon@foss.st.com>\n+\n+\tPR target/100856\n+\t* config/arm/arm.opt: Fix typo.\n+\t* config/arm/t-rmprofile: Fix typo.\n+\n+2021-08-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree.h (OMP_CLAUSE_GRAINSIZE_STRICT): Define.\n+\t(OMP_CLAUSE_NUM_TASKS_STRICT): Define.\n+\t* tree-pretty-print.c (dump_omp_clause) <case OMP_CLAUSE_GRAINSIZE,\n+\tcase OMP_CLAUSE_NUM_TASKS>: Print strict: modifier.\n+\t* omp-expand.c (expand_task_call): Use GOMP_TASK_FLAG_STRICT in iflags\n+\tif either grainsize or num_tasks clause has the strict modifier.\n+\n+2021-08-23  Martin Liska  <mliska@suse.cz>\n+\n+\t* dbgcnt.def (DEBUG_COUNTER): New counter.\n+\t* gimple.c (gimple_call_arg_flags): Use it in IPA PTA.\n+\n+2021-08-23  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-modref.c (analyze_ssa_name_flags): Improve handling of return slot.\n+\n+2021-08-23  Xi Ruoyao  <xry111@mengyan1223.wang>\n+\n+\tPR target/101922\n+\t* config/mips/mips-protos.h (mips_msa_output_shift_immediate):\n+\t  Declare.\n+\t* config/mips/mips.c (mips_msa_output_shift_immediate): New\n+\t  function.\n+\t* config/mips/mips-msa.md (vashl<mode>3, vashr<mode>3,\n+\t  vlshr<mode>3): Call it.\n+\n 2021-08-22  Jan Hubicka  <hubicka@ucw.cz>\n \t    Martin Liska  <mliska@suse.cz>\n "}, {"sha": "83a5291efecf14251dd939637496690794f3f40c", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b19c5b0805f9acfcf52430cebca025fc3cdea6/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b19c5b0805f9acfcf52430cebca025fc3cdea6/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=38b19c5b0805f9acfcf52430cebca025fc3cdea6", "patch": "@@ -1 +1 @@\n-20210823\n+20210824"}, {"sha": "211f34c795614a3067b9e623ebda1d94475e564e", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 181, "deletions": 0, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b19c5b0805f9acfcf52430cebca025fc3cdea6/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b19c5b0805f9acfcf52430cebca025fc3cdea6/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=38b19c5b0805f9acfcf52430cebca025fc3cdea6", "patch": "@@ -1,3 +1,184 @@\n+2021-08-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer.h (struct rejected_constraint): Convert to...\n+\t(class rejected_constraint): ...this.\n+\t(class bounded_ranges): New forward decl.\n+\t(class bounded_ranges_manager): New forward decl.\n+\t* constraint-manager.cc: Include \"analyzer/analyzer-logging.h\" and\n+\t\"tree-pretty-print.h\".\n+\t(can_plus_one_p): New.\n+\t(plus_one): New.\n+\t(can_minus_one_p): New.\n+\t(minus_one): New.\n+\t(bounded_range::bounded_range): New.\n+\t(dump_cst): New.\n+\t(bounded_range::dump_to_pp): New.\n+\t(bounded_range::dump): New.\n+\t(bounded_range::to_json): New.\n+\t(bounded_range::set_json_attr): New.\n+\t(bounded_range::contains_p): New.\n+\t(bounded_range::intersects_p): New.\n+\t(bounded_range::operator==): New.\n+\t(bounded_range::cmp): New.\n+\t(bounded_ranges::bounded_ranges): New.\n+\t(bounded_ranges::bounded_ranges): New.\n+\t(bounded_ranges::bounded_ranges): New.\n+\t(bounded_ranges::canonicalize): New.\n+\t(bounded_ranges::validate): New.\n+\t(bounded_ranges::operator==): New.\n+\t(bounded_ranges::dump_to_pp): New.\n+\t(bounded_ranges::dump): New.\n+\t(bounded_ranges::to_json): New.\n+\t(bounded_ranges::eval_condition): New.\n+\t(bounded_ranges::contain_p): New.\n+\t(bounded_ranges::cmp): New.\n+\t(bounded_ranges_manager::~bounded_ranges_manager): New.\n+\t(bounded_ranges_manager::get_or_create_empty): New.\n+\t(bounded_ranges_manager::get_or_create_point): New.\n+\t(bounded_ranges_manager::get_or_create_range): New.\n+\t(bounded_ranges_manager::get_or_create_union): New.\n+\t(bounded_ranges_manager::get_or_create_intersection): New.\n+\t(bounded_ranges_manager::get_or_create_inverse): New.\n+\t(bounded_ranges_manager::consolidate): New.\n+\t(bounded_ranges_manager::get_or_create_ranges_for_switch): New.\n+\t(bounded_ranges_manager::create_ranges_for_switch): New.\n+\t(bounded_ranges_manager::make_case_label_ranges): New.\n+\t(bounded_ranges_manager::log_stats): New.\n+\t(bounded_ranges_constraint::print): New.\n+\t(bounded_ranges_constraint::to_json): New.\n+\t(bounded_ranges_constraint::operator==): New.\n+\t(bounded_ranges_constraint::add_to_hash): New.\n+\t(constraint_manager::constraint_manager): Update for new field\n+\tm_bounded_ranges_constraints.\n+\t(constraint_manager::operator=): Likewise.\n+\t(constraint_manager::hash): Likewise.\n+\t(constraint_manager::operator==): Likewise.\n+\t(constraint_manager::print): Likewise.\n+\t(constraint_manager::dump_to_pp): Likewise.\n+\t(constraint_manager::to_json): Likewise.\n+\t(constraint_manager::add_unknown_constraint): Update the lhs_ec_id\n+\tif necessary in existing constraints when combining equivalence\n+\tclasses.  Add similar code for handling\n+\tm_bounded_ranges_constraints.\n+\t(constraint_manager::add_constraint_internal): Add comment.\n+\t(constraint_manager::add_bounded_ranges): New.\n+\t(constraint_manager::eval_condition): Use new field\n+\tm_bounded_ranges_constraints.\n+\t(constraint_manager::purge): Update bounded_ranges_constraint\n+\tinstances.\n+\t(constraint_manager::canonicalize): Update for new field.\n+\t(merger_fact_visitor::on_ranges): New.\n+\t(constraint_manager::for_each_fact): Use new field\n+\tm_bounded_ranges_constraints.\n+\t(constraint_manager::validate):  Fix off-by-one error needed due\n+\tto bug fixed above in add_unknown_constraint.  Validate the EC IDs\n+\tin m_bounded_ranges_constraints.\n+\t(constraint_manager::get_range_manager): New.\n+\t(selftest::assert_dump_bounded_range_eq): New.\n+\t(ASSERT_DUMP_BOUNDED_RANGE_EQ): New.\n+\t(selftest::test_bounded_range): New.\n+\t(selftest::assert_dump_bounded_ranges_eq): New.\n+\t(ASSERT_DUMP_BOUNDED_RANGES_EQ): New.\n+\t(selftest::test_bounded_ranges): New.\n+\t(selftest::run_constraint_manager_tests): Call the new selftests.\n+\t* constraint-manager.h (struct bounded_range): New.\n+\t(struct bounded_ranges): New.\n+\t(template <> struct default_hash_traits<bounded_ranges::key_t>): New.\n+\t(class bounded_ranges_manager): New.\n+\t(fact_visitor::on_ranges): New pure virtual function.\n+\t(class bounded_ranges_constraint): New.\n+\t(constraint_manager::add_bounded_ranges): New decl.\n+\t(constraint_manager::get_range_manager): New decl.\n+\t(constraint_manager::m_bounded_ranges_constraints): New field.\n+\t* diagnostic-manager.cc (epath_finder::process_worklist_item):\n+\tTransfer ownership of rc to add_feasibility_problem.\n+\t* engine.cc (feasibility_problem::dump_to_pp): Use get_model.\n+\t* feasible-graph.cc (infeasible_node::dump_dot): Update for\n+\tconversion of m_rc to a pointer.\n+\t(feasible_graph::add_feasibility_problem): Pass RC by pointer and\n+\ttake ownership.\n+\t* feasible-graph.h (infeasible_node::infeasible_node): Pass RC by\n+\tpointer and take ownership.\n+\t(infeasible_node::~infeasible_node): New.\n+\t(infeasible_node::m_rc): Convert to a pointer.\n+\t(feasible_graph::add_feasibility_problem): Pass RC by pointer and\n+\ttake ownership.\n+\t* region-model-manager.cc: Include\n+\t\"analyzer/constraint-manager.h\".\n+\t(region_model_manager::region_model_manager): Initializer new\n+\tfield m_range_mgr.\n+\t(region_model_manager::~region_model_manager): Delete it.\n+\t(region_model_manager::log_stats): Call log_stats on it.\n+\t* region-model.cc (region_model::add_constraint): Use new subclass\n+\trejected_op_constraint.\n+\t(region_model::apply_constraints_for_gswitch): Reimplement using\n+\tbounded_ranges_manager.\n+\t(rejected_constraint::dump_to_pp): Convert to...\n+\t(rejected_op_constraint::dump_to_pp): ...this.\n+\t(rejected_ranges_constraint::dump_to_pp): New.\n+\t* region-model.h (struct purge_stats): Add field\n+\tm_num_bounded_ranges_constraints.\n+\t(region_model_manager::get_range_manager): New.\n+\t(region_model_manager::m_range_mgr): New.\n+\t(region_model::get_range_manager): New.\n+\t(struct rejected_constraint): Split into...\n+\t(class rejected_constraint):...this new abstract base class,\n+\tand...\n+\t(class rejected_op_constraint): ...this new concrete subclass.\n+\t(class rejected_ranges_constraint): New.\n+\t* supergraph.cc: Include \"tree-cfg.h\".\n+\t(supergraph::supergraph): Drop idx param from add_cfg_edge.\n+\t(supergraph::add_cfg_edge): Drop idx param.\n+\t(switch_cfg_superedge::switch_cfg_superedge): Move here from\n+\theader.  Populate m_case_labels with all cases which go to DST.\n+\t(switch_cfg_superedge::dump_label_to_pp): Reimplement to use\n+\tm_case_labels.\n+\t(switch_cfg_superedge::get_case_label): Delete.\n+\t* supergraph.h (supergraphadd_cfg_edge): Drop \"idx\" param.\n+\t(switch_cfg_superedge::switch_cfg_superedge): Drop idx param and\n+\tmove implementation to supergraph.cc.\n+\t(switch_cfg_superedge::get_case_label): Delete.\n+\t(switch_cfg_superedge::get_case_labels): New.\n+\t(switch_cfg_superedge::m_idx): Delete.\n+\t(switch_cfg_superedge::m_case_labels): New field.\n+\n+2021-08-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/101875\n+\t* sm-file.cc (file_diagnostic::describe_state_change): Handle\n+\tchange.m_expr being NULL.\n+\n+2021-08-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/101837\n+\t* analyzer.cc (maybe_reconstruct_from_def_stmt): Bail if fn is\n+\tNULL, and assert that it's non-NULL before passing it to\n+\tbuild_call_array_loc.\n+\n+2021-08-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/101962\n+\t* region-model.cc (region_model::eval_condition_without_cm):\n+\tRefactor comparison against zero, adding a check for\n+\tPOINTER_PLUS_EXPR of non-NULL.\n+\n+2021-08-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* store.cc (bit_range::intersects_p): New overload.\n+\t(bit_range::operator-): New.\n+\t(binding_cluster::maybe_get_compound_binding): Handle the partial\n+\toverlap case.\n+\t(selftest::test_bit_range_intersects_p): Add test coverage for\n+\tnew overload of bit_range::intersects_p.\n+\t* store.h (bit_range::intersects_p): New overload.\n+\t(bit_range::operator-): New.\n+\n+2021-08-23  Ankur Saini  <arsenic@sourceware.org>\n+\n+\tPR analyzer/102020\n+\t* diagnostic-manager.cc\n+\t(diagnostic_manager::prune_for_sm_diagnostic)<case EK_CALL_EDGE>: Fix typo.\n+\n 2021-08-21  Ankur Saini  <arsenic@sourceware.org>\n \n \tPR analyzer/101980"}, {"sha": "27ccc32ca6ff852c17c10a17815213456361c567", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b19c5b0805f9acfcf52430cebca025fc3cdea6/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b19c5b0805f9acfcf52430cebca025fc3cdea6/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=38b19c5b0805f9acfcf52430cebca025fc3cdea6", "patch": "@@ -1,3 +1,8 @@\n+2021-08-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.c (c_parser_omp_clause_num_tasks,\n+\tc_parser_omp_clause_grainsize): Parse the optional strict: modifier.\n+\n 2021-08-22  Martin Uecker  <muecker@gwdg.de>\n \n \tPR c/98397"}, {"sha": "ddea2a2014162600cfb2dc28c9365826b91a372e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b19c5b0805f9acfcf52430cebca025fc3cdea6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b19c5b0805f9acfcf52430cebca025fc3cdea6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=38b19c5b0805f9acfcf52430cebca025fc3cdea6", "patch": "@@ -1,3 +1,8 @@\n+2021-08-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.c (cp_parser_omp_clause_num_tasks,\n+\tcp_parser_omp_clause_grainsize): Parse the optional strict: modifier.\n+\n 2021-08-20  Jakub Jelinek  <jakub@redhat.com>\n \n \t* parser.c (cp_parser_handle_statement_omp_attributes): Determine if"}, {"sha": "307886d0ff01464aed268ae2463a28df7244ea6d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b19c5b0805f9acfcf52430cebca025fc3cdea6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b19c5b0805f9acfcf52430cebca025fc3cdea6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=38b19c5b0805f9acfcf52430cebca025fc3cdea6", "patch": "@@ -1,3 +1,21 @@\n+2021-08-23  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* openmp.c (gfc_match_dupl_check, gfc_match_dupl_memorder,\n+\tgfc_match_dupl_atomic): New.\n+\t(gfc_match_omp_clauses): Use them; remove duplicate\n+\t'release'/'relaxed' clause matching; improve error dignostic\n+\tfor 'default'.\n+\n+2021-08-23  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* dump-parse-tree.c (show_omp_clauses): Handle 'strict' modifier\n+\ton grainsize/num_tasks\n+\t* gfortran.h (gfc_omp_clauses): Add grainsize_strict\n+\tand num_tasks_strict.\n+\t* trans-openmp.c (gfc_trans_omp_clauses, gfc_split_omp_clauses):\n+\tHandle 'strict' modifier on grainsize/num_tasks.\n+\t* openmp.c (gfc_match_omp_clauses): Likewise.\n+\n 2021-08-20  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* error.c"}, {"sha": "5c49bd3cc5a2fb26f31fa3eb81baa21baaac1e7b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b19c5b0805f9acfcf52430cebca025fc3cdea6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b19c5b0805f9acfcf52430cebca025fc3cdea6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=38b19c5b0805f9acfcf52430cebca025fc3cdea6", "patch": "@@ -1,3 +1,129 @@\n+2021-08-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/switch.c: Remove xfail.  Add various tests.\n+\t* gcc.dg/analyzer/torture/switch-2.c: New test.\n+\t* gcc.dg/analyzer/torture/switch-3.c: New test.\n+\t* gcc.dg/analyzer/torture/switch-4.c: New test.\n+\t* gcc.dg/analyzer/torture/switch-5.c: New test.\n+\n+2021-08-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/101875\n+\t* gcc.dg/analyzer/pr101875.c: New test.\n+\n+2021-08-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/101837\n+\t* gcc.dg/analyzer/pr101837.c: New test.\n+\n+2021-08-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/101962\n+\t* gcc.dg/analyzer/data-model-23.c: New test.\n+\t* gcc.dg/analyzer/pr101962.c: New test.\n+\n+2021-08-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/data-model-22.c: New test.\n+\t* gcc.dg/analyzer/uninit-6.c: New test.\n+\t* gcc.dg/analyzer/uninit-6b.c: New test.\n+\n+2021-08-23  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.dg/tree-ssa/modref-7.c: New test.\n+\n+2021-08-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR ipa/97565\n+\t* g++.dg/lto/pr97565_0.C: New testcase.\n+\t* g++.dg/lto/pr97565_1.C: Likewise.\n+\n+2021-08-23  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* g++.dg/tree-ssa/modref-1.C: Fix template.\n+\n+2021-08-23  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/goacc/asyncwait-1.f95: Update dg-error.\n+\t* gfortran.dg/goacc/default-2.f: Update dg-error.\n+\t* gfortran.dg/goacc/enter-exit-data.f95: Update dg-error.\n+\t* gfortran.dg/goacc/if.f95: Update dg-error.\n+\t* gfortran.dg/goacc/parallel-kernels-clauses.f95: Update dg-error.\n+\t* gfortran.dg/goacc/routine-6.f90: Update dg-error.\n+\t* gfortran.dg/goacc/sie.f95: Update dg-error.\n+\t* gfortran.dg/goacc/update-if_present-2.f90: Update dg-error.\n+\t* gfortran.dg/gomp/cancel-2.f90: Update dg-error.\n+\t* gfortran.dg/gomp/declare-simd-1.f90: Update dg-error.\n+\t* gfortran.dg/gomp/error-3.f90: Update dg-error.\n+\t* gfortran.dg/gomp/loop-2.f90: Update dg-error.\n+\t* gfortran.dg/gomp/masked-2.f90: Update dg-error.\n+\n+2021-08-23  Ankur Saini  <arsenic@sourceware.org>\n+\n+\tPR analyzer/102020\n+\t* gcc.dg/analyzer/malloc-callbacks.c : Fix faulty test.\n+\n+2021-08-23  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.dg/fold-convlshift-1.c: New test case.\n+\t* gcc.dg/fold-convlshift-2.c: New test case.\n+\n+2021-08-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/86723\n+\t* gcc.dg/pr86723.c: New test.\n+\t* gcc.target/i386/pr86723.c: New test.\n+\t* gcc.dg/optimize-bswapdi-1.c: Use -fdump-tree-optimized instead of\n+\t-fdump-tree-bswap and scan for number of __builtin_bswap64 calls.\n+\t* gcc.dg/optimize-bswapdi-2.c: Likewise.\n+\t* gcc.dg/optimize-bswapsi-1.c: Use -fdump-tree-optimized instead of\n+\t-fdump-tree-bswap and scan for number of __builtin_bswap32 calls.\n+\t* gcc.dg/optimize-bswapsi-5.c: Likewise.\n+\t* gcc.dg/optimize-bswapsi-3.c: Likewise.  Expect one __builtin_bswap32\n+\tcall instead of zero.\n+\n+2021-08-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/79334\n+\t* gcc.dg/torture/pr79334-0.c: New testcase.\n+\t* gcc.dg/torture/pr79334-1.c: Likewise.\n+\n+2021-08-23  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/102016\n+\t* gcc.target/i386/pr102016.c: New test.\n+\n+2021-08-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/101905\n+\t* gcc.dg/guality/pr101905.c: New test.\n+\n+2021-08-23  Christophe Lyon  <christophe.lyon@foss.st.com>\n+\n+\tPR target/100856\n+\t* gcc.target/arm/acle/pr100856.c: Use arm_v8m_main_cde_multilib\n+\tand arm_v8m_main_cde.\n+\t* lib/target-supports.exp: Add\n+\tcheck_effective_target_FUNC_multilib for ARM CDE.\n+\n+2021-08-23  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* g++.dg/tree-ssa/modref-1.C: New test.\n+\n+2021-08-23  Xi Ruoyao  <xry111@mengyan1223.wang>\n+\n+\tPR target/101922\n+\t* gcc.target/mips/pr101922.c: New test.\n+\n+2021-08-23  Jonathan Yong  <10walls@gmail.com>\n+\n+\t* gcc.c-torture/execute/gcc_tmpnam.h: Fix tmpnam case on Windows\n+\twhere it can return a filename with \"\\\" to indicate current\n+\tdirectory.\n+\t* gcc.c-torture/execute/fprintf-2.c: Use wrapper.\n+\t* gcc.c-torture/execute/printf-2.c: Use wrapper.\n+\t* gcc.c-torture/execute/user-printf.c: Use wrapper.\n+\n 2021-08-22  Martin Uecker  <muecker@gwdg.de>\n \n \tPR c/98397"}, {"sha": "23e0fa292d3b136424070a8941734122395be0f1", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b19c5b0805f9acfcf52430cebca025fc3cdea6/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b19c5b0805f9acfcf52430cebca025fc3cdea6/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=38b19c5b0805f9acfcf52430cebca025fc3cdea6", "patch": "@@ -1,3 +1,7 @@\n+2021-08-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gomp-constants.h (GOMP_TASK_FLAG_STRICT): Define.\n+\n 2021-07-24  Marek Polacek  <polacek@redhat.com>\n \n \t* ansidecl.h: Check if __cplusplus is defined before checking"}, {"sha": "4686bf50f23d0c9c63db07057fdfbfa5713f3bc8", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b19c5b0805f9acfcf52430cebca025fc3cdea6/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b19c5b0805f9acfcf52430cebca025fc3cdea6/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=38b19c5b0805f9acfcf52430cebca025fc3cdea6", "patch": "@@ -1,3 +1,32 @@\n+2021-08-23  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.c/address-space-1.c: New file.\n+\n+2021-08-23  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/lib/libgomp.exp\n+\t(check_effective_target_offload_target_intelmic): Remove 'proc'.\n+\t(check_effective_target_offload_device_intel_mic): New 'proc'.\n+\t* testsuite/libgomp.c-c++-common/on_device_arch.h\n+\t(device_arch_intel_mic, on_device_arch_intel_mic): New.\n+\t* testsuite/libgomp.c-c++-common/target-45.c: Use that for\n+\t'dg-xfail-run-if'.\n+\t* testsuite/libgomp.fortran/target10.f90: Likewise.\n+\n+2021-08-23  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.fortran/taskloop-4-a.f90: New test.\n+\t* testsuite/libgomp.fortran/taskloop-4.f90: New test.\n+\t* testsuite/libgomp.fortran/taskloop-5-a.f90: New test.\n+\t* testsuite/libgomp.fortran/taskloop-5.f90: New test.\n+\n+2021-08-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* taskloop.c (GOMP_taskloop): Handle GOMP_TASK_FLAG_STRICT.\n+\t* testsuite/libgomp.c-c++-common/taskloop-4.c (main): Fix up comment.\n+\t* testsuite/libgomp.c-c++-common/taskloop-5.c: New test.\n+\n 2021-08-22  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* config/nvptx/error.c (fwrite, exit): Override, too."}, {"sha": "acfe2083b30f911a136b93f320ad646c6dc8c71a", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b19c5b0805f9acfcf52430cebca025fc3cdea6/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b19c5b0805f9acfcf52430cebca025fc3cdea6/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=38b19c5b0805f9acfcf52430cebca025fc3cdea6", "patch": "@@ -1,3 +1,8 @@\n+2021-08-23  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* simple-object-mach-o.c (simple_object_mach_o_write_segment):\n+\tCast the first argument to set_32 as needed.\n+\n 2021-08-18  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* simple-object-mach-o.c (simple_object_mach_o_write_segment):"}, {"sha": "e5e7daa06527b66b3f31a7d201488de6b89d7657", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b19c5b0805f9acfcf52430cebca025fc3cdea6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b19c5b0805f9acfcf52430cebca025fc3cdea6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=38b19c5b0805f9acfcf52430cebca025fc3cdea6", "patch": "@@ -1,3 +1,20 @@\n+2021-08-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/ranges (basic_istream_view): Add default template\n+\targument.\n+\t* testsuite/std/ranges/istream_view.cc: Check it.\n+\n+2021-08-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* libsupc++/dyncast.cc (__dynamic_cast): Add __builtin_expect to\n+\tprecondition check.\n+\n+2021-08-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/90787\n+\t* testsuite/util/testsuite_fs.h (permissions_are_testable):\n+\tDefine as inline.\n+\n 2021-08-20  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/90787"}]}