{"sha": "bf9f9292131058faa03177b7a0d6f1c265eb29f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY5ZjkyOTIxMzEwNThmYWEwMzE3N2I3YTBkNmYxYzI2NWViMjlmMg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-09-24T11:22:38Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-09-24T11:22:38Z"}, "message": "Unpoison variable partition properly (PR sanitizer/85774).\n\n2018-09-24  Martin Liska  <mliska@suse.cz>\n\n\tPR sanitizer/85774\n\t* asan.c: Make asan_handled_variables extern.\n\t* asan.h: Likewise.\n\t* cfgexpand.c (expand_stack_vars): Make sure\n\ta representative is unpoison if another\n\tvariable in the partition is handled by\n\tuse-after-scope sanitization.\n2018-09-24  Martin Liska  <mliska@suse.cz>\n\n\tPR sanitizer/85774\n\t* g++.dg/asan/pr85774.C: New test.\n\nFrom-SVN: r264528", "tree": {"sha": "91afbb9244655cef727a35df6ce34bfce80453b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91afbb9244655cef727a35df6ce34bfce80453b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf9f9292131058faa03177b7a0d6f1c265eb29f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf9f9292131058faa03177b7a0d6f1c265eb29f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf9f9292131058faa03177b7a0d6f1c265eb29f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf9f9292131058faa03177b7a0d6f1c265eb29f2/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "54b7d98ec40895719d5d62be02e5f03d08aac543", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54b7d98ec40895719d5d62be02e5f03d08aac543", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54b7d98ec40895719d5d62be02e5f03d08aac543"}], "stats": {"total": 84, "additions": 83, "deletions": 1}, "files": [{"sha": "fc16b257d5af0f27b6bcd3dbc93a9d0072db0f6c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9f9292131058faa03177b7a0d6f1c265eb29f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9f9292131058faa03177b7a0d6f1c265eb29f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf9f9292131058faa03177b7a0d6f1c265eb29f2", "patch": "@@ -1,3 +1,13 @@\n+2018-09-24  Martin Liska  <mliska@suse.cz>\n+\n+\tPR sanitizer/85774\n+\t* asan.c: Make asan_handled_variables extern.\n+\t* asan.h: Likewise.\n+\t* cfgexpand.c (expand_stack_vars): Make sure\n+\ta representative is unpoison if another\n+\tvariable in the partition is handled by\n+\tuse-after-scope sanitization.\n+\n 2018-09-24  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/63155"}, {"sha": "235e219479d006779228cde9ae8ff559067d29a1", "filename": "gcc/asan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9f9292131058faa03177b7a0d6f1c265eb29f2/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9f9292131058faa03177b7a0d6f1c265eb29f2/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=bf9f9292131058faa03177b7a0d6f1c265eb29f2", "patch": "@@ -253,7 +253,7 @@ static tree last_alloca_addr;\n /* Set of variable declarations that are going to be guarded by\n    use-after-scope sanitizer.  */\n \n-static hash_set<tree> *asan_handled_variables = NULL;\n+hash_set<tree> *asan_handled_variables = NULL;\n \n hash_set <tree> *asan_used_labels = NULL;\n "}, {"sha": "2f431b4f93825601c33fbd682a6fd503de4ce051", "filename": "gcc/asan.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9f9292131058faa03177b7a0d6f1c265eb29f2/gcc%2Fasan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9f9292131058faa03177b7a0d6f1c265eb29f2/gcc%2Fasan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.h?ref=bf9f9292131058faa03177b7a0d6f1c265eb29f2", "patch": "@@ -110,6 +110,8 @@ extern bool asan_sanitize_stack_p (void);\n \n extern bool asan_sanitize_allocas_p (void);\n \n+extern hash_set<tree> *asan_handled_variables;\n+\n /* Return TRUE if builtin with given FCODE will be intercepted by\n    libasan.  */\n "}, {"sha": "35ca276e4ad0ad3e9485e13357d68c1c2b92d828", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9f9292131058faa03177b7a0d6f1c265eb29f2/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9f9292131058faa03177b7a0d6f1c265eb29f2/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=bf9f9292131058faa03177b7a0d6f1c265eb29f2", "patch": "@@ -1155,6 +1155,20 @@ expand_stack_vars (bool (*pred) (size_t), struct stack_vars_data *data)\n \t      if (repr_decl == NULL_TREE)\n \t\trepr_decl = stack_vars[i].decl;\n \t      data->asan_decl_vec.safe_push (repr_decl);\n+\n+\t      /* Make sure a representative is unpoison if another\n+\t\t variable in the partition is handled by\n+\t\t use-after-scope sanitization.  */\n+\t      if (asan_handled_variables != NULL\n+\t\t  && !asan_handled_variables->contains (repr_decl))\n+\t\t{\n+\t\t  for (j = i; j != EOC; j = stack_vars[j].next)\n+\t\t    if (asan_handled_variables->contains (stack_vars[j].decl))\n+\t\t      break;\n+\t\t  if (j != EOC)\n+\t\t    asan_handled_variables->add (repr_decl);\n+\t\t}\n+\n \t      data->asan_alignb = MAX (data->asan_alignb, alignb);\n \t      if (data->asan_base == NULL)\n \t\tdata->asan_base = gen_reg_rtx (Pmode);"}, {"sha": "569d20f6fd093c43aaba5290e430a0dafe43f988", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9f9292131058faa03177b7a0d6f1c265eb29f2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9f9292131058faa03177b7a0d6f1c265eb29f2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf9f9292131058faa03177b7a0d6f1c265eb29f2", "patch": "@@ -1,3 +1,8 @@\n+2018-09-24  Martin Liska  <mliska@suse.cz>\n+\n+\tPR sanitizer/85774\n+\t* g++.dg/asan/pr85774.C: New test.\n+\n 2018-09-24  Alexandre Oliva <oliva@adacore.com>\n \n \tPR middle-end/87054"}, {"sha": "c033abfd69b4b0bdd9b226c34fa467b448d23460", "filename": "gcc/testsuite/g++.dg/asan/pr85774.C", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9f9292131058faa03177b7a0d6f1c265eb29f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fpr85774.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9f9292131058faa03177b7a0d6f1c265eb29f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fpr85774.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fpr85774.C?ref=bf9f9292131058faa03177b7a0d6f1c265eb29f2", "patch": "@@ -0,0 +1,51 @@\n+/* PR sanitizer/85774 */\n+/* { dg-do run } */\n+\n+#include <functional>\n+\n+void\n+DoSomething ()\n+{\n+}\n+\n+void\n+DoFunc (const std::function<void(void)> &func)\n+{\n+  func ();\n+}\n+\n+void\n+Setup ()\n+{\n+  switch (1)\n+    {\n+    case 1:\n+      {\n+\tDoFunc ([]() {});\n+\tbreak;\n+      }\n+    case 2:\n+      {\n+\tDoFunc ([]() {});\n+\tbreak;\n+      }\n+    default:\n+      break;\n+    }\n+\n+  DoSomething ();\n+}\n+\n+void\n+DemostrateBadPoisoning ()\n+{\n+  DoFunc ([]() {});\n+}\n+\n+int\n+main ()\n+{\n+  Setup ();\n+  DemostrateBadPoisoning ();\n+  return 0;\n+}"}]}