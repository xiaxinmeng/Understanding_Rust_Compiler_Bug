{"sha": "35129fd3a745403bec0a06d62b18fc30ce1bbf8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUxMjlmZDNhNzQ1NDAzYmVjMGEwNmQ2MmIxOGZjMzBjZTFiYmY4ZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2018-02-28T12:32:10Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2018-02-28T12:32:10Z"}, "message": "[PR c++/84602] ICE with anon-struct\n\nhttps://gcc.gnu.org/ml/gcc-patches/2018-02/msg01577.html\n\tPR c++/84602\n\t* name-lookup.h (search_anon_aggr): Add defaulted WANT_TYPE arg.\n\t* name-lookup.c (fields_linear_search): Look in an anon-aggr\n\tregardless of want_type.\n\t(search_anon_aggr): Just use get_class_binding_direct.\n\n\tPR c++/84602\n\t* g++.dg/lookup/pr84602.C: New.\n\nFrom-SVN: r258060", "tree": {"sha": "52c83de64c58004608085231c1e4d9857b64ad3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52c83de64c58004608085231c1e4d9857b64ad3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35129fd3a745403bec0a06d62b18fc30ce1bbf8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35129fd3a745403bec0a06d62b18fc30ce1bbf8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35129fd3a745403bec0a06d62b18fc30ce1bbf8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35129fd3a745403bec0a06d62b18fc30ce1bbf8e/comments", "author": null, "committer": null, "parents": [{"sha": "6030f6fe258b81f2e3a8952ef3162772bb6e684e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6030f6fe258b81f2e3a8952ef3162772bb6e684e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6030f6fe258b81f2e3a8952ef3162772bb6e684e"}], "stats": {"total": 78, "additions": 57, "deletions": 21}, "files": [{"sha": "e2d88dcf240ad4c4b2d9c38eb66614985fb71730", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35129fd3a745403bec0a06d62b18fc30ce1bbf8e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35129fd3a745403bec0a06d62b18fc30ce1bbf8e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=35129fd3a745403bec0a06d62b18fc30ce1bbf8e", "patch": "@@ -1,3 +1,11 @@\n+2018-02-28  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/84602\n+\t* name-lookup.h (search_anon_aggr): Add defaulted WANT_TYPE arg.\n+\t* name-lookup.c (fields_linear_search): Look in an anon-aggr\n+\tregardless of want_type.\n+\t(search_anon_aggr): Just use get_class_binding_direct.\n+\n 2018-02-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* decl.c (cp_finish_decomp): Don't adjust eltscnt when calling"}, {"sha": "20db0f427dafa16052fcc28763ab618acc1768d0", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35129fd3a745403bec0a06d62b18fc30ce1bbf8e/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35129fd3a745403bec0a06d62b18fc30ce1bbf8e/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=35129fd3a745403bec0a06d62b18fc30ce1bbf8e", "patch": "@@ -1162,11 +1162,10 @@ fields_linear_search (tree klass, tree name, bool want_type)\n     {\n       tree decl = fields;\n \n-      if (!want_type\n-\t  && TREE_CODE (decl) == FIELD_DECL\n+      if (TREE_CODE (decl) == FIELD_DECL\n \t  && ANON_AGGR_TYPE_P (TREE_TYPE (decl)))\n \t{\n-\t  if (tree temp = search_anon_aggr (TREE_TYPE (decl), name))\n+\t  if (tree temp = search_anon_aggr (TREE_TYPE (decl), name, want_type))\n \t    return temp;\n \t}\n \n@@ -1191,26 +1190,17 @@ fields_linear_search (tree klass, tree name, bool want_type)\n   return NULL_TREE;\n }\n \n-/* Look for NAME field inside of anonymous aggregate ANON.  */\n+/* Look for NAME member inside of anonymous aggregate ANON.  Although\n+   such things should only contain FIELD_DECLs, we check that too\n+   late, and would give very confusing errors if we weren't\n+   permissive here.  */\n \n tree\n-search_anon_aggr (tree anon, tree name)\n+search_anon_aggr (tree anon, tree name, bool want_type)\n {\n   gcc_assert (COMPLETE_TYPE_P (anon));\n-  tree ret;\n-\t  \n-  if (vec<tree, va_gc> *member_vec = CLASSTYPE_MEMBER_VEC (anon))\n-    ret = member_vec_linear_search (member_vec, name);\n-  else\n-    ret = fields_linear_search (anon, name, false);\n-\n-  if (ret)\n-    {\n-      /* Anon members can only contain fields.  */\n-      gcc_assert (!STAT_HACK_P (ret) && !DECL_DECLARES_TYPE_P (ret));\n-      return ret;\n-    }\n-  return NULL_TREE;\n+  tree ret = get_class_binding_direct (anon, name, want_type);\n+  return ret;\n }\n \n /* Look for NAME as an immediate member of KLASS (including"}, {"sha": "8c587d3528bda70babd640ce408f56b7dca16935", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35129fd3a745403bec0a06d62b18fc30ce1bbf8e/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35129fd3a745403bec0a06d62b18fc30ce1bbf8e/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=35129fd3a745403bec0a06d62b18fc30ce1bbf8e", "patch": "@@ -307,7 +307,7 @@ extern void pop_decl_namespace (void);\n extern void do_namespace_alias (tree, tree);\n extern tree do_class_using_decl (tree, tree);\n extern tree lookup_arg_dependent (tree, tree, vec<tree, va_gc> *);\n-extern tree search_anon_aggr (tree, tree);\n+extern tree search_anon_aggr (tree, tree, bool = false);\n extern tree get_class_binding_direct (tree, tree, int type_or_fns = -1);\n extern tree get_class_binding (tree, tree, int type_or_fns = -1);\n extern tree *find_member_slot (tree klass, tree name);"}, {"sha": "252a33a00d43f0ccd04ad54b0550be7d3a570fdd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35129fd3a745403bec0a06d62b18fc30ce1bbf8e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35129fd3a745403bec0a06d62b18fc30ce1bbf8e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=35129fd3a745403bec0a06d62b18fc30ce1bbf8e", "patch": "@@ -1,11 +1,17 @@\n+2018-02-28  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/84602\n+\t* g++.dg/lookup/pr84602.C: New.\n+\n 2018-02-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/83871\n \tPR c++/83503\n \t* g++.dg/ext/attr-warning.C: Remove -fdump-tree-optimized from\n \tdg-options.\n \t* g++.dg/ext/attr-nonnull.C: Likewise.\n-\t* g++.dg/ext/attr-noinline.C: Fix syntax in scan-tree-dump-not directives.\n+\t* g++.dg/ext/attr-noinline.C: Fix syntax in scan-tree-dump-not\n+\tdirectives.\n \t* g++.dg/ext/attr-noinline-2.C: Likewise.\n \t* g++.dg/ext/attr-noreturn-2.C: Use -fdump-tree-optimized instead of\n \t-fdump-tree-eh in dg-options."}, {"sha": "d388ae003604010687000f489833915feb13c893", "filename": "gcc/testsuite/g++.dg/lookup/pr84602.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35129fd3a745403bec0a06d62b18fc30ce1bbf8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr84602.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35129fd3a745403bec0a06d62b18fc30ce1bbf8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr84602.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr84602.C?ref=35129fd3a745403bec0a06d62b18fc30ce1bbf8e", "patch": "@@ -0,0 +1,32 @@\n+// PR c++/84602 ICE\n+// { dg-additional-options \"-fpermissive\" }\n+\n+struct X {\n+  union {\n+    class a; // { dg-warning \"can only have\" }\n+  };\n+  a *b;\n+};\n+X::a *a;\n+\n+struct Y {\n+  union {\n+    class a; // { dg-warning \"can only have\" }\n+    int a;\n+  };\n+  class a *b;\n+};\n+\n+class Y::a *y;\n+\n+struct Z {\n+  union {\n+    // Force MEMBER_VEC creation\n+    int a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;\n+    class a; // { dg-warning \"can only have\" }\n+    int a;\n+  };\n+  class a *b;\n+};\n+\n+class Z::a *z;"}]}