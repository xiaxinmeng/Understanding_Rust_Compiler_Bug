{"sha": "5b01bc66eed730a17baf459d06f2aa454b908350", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIwMWJjNjZlZWQ3MzBhMTdiYWY0NTlkMDZmMmFhNDU0YjkwODM1MA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-12-31T20:42:07Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-12-31T20:42:07Z"}, "message": "(multiline_string_line): New file scope static variable.\n\n(rescan): Delete multiline_string_line variable definition.\n(skip_quoted_string): Print start line number of unterminated\nstring and character constants.  When see a newline: warn if\npedantic; delete unreachable duplicate code for traditional case;\nset multiline_string_line.\n\nFrom-SVN: r3012", "tree": {"sha": "a4f81b1512d8d9210c97e11b8f39f31820c83852", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4f81b1512d8d9210c97e11b8f39f31820c83852"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b01bc66eed730a17baf459d06f2aa454b908350", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b01bc66eed730a17baf459d06f2aa454b908350", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b01bc66eed730a17baf459d06f2aa454b908350", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b01bc66eed730a17baf459d06f2aa454b908350/comments", "author": null, "committer": null, "parents": [{"sha": "3e146e90e5672a6f4f8eec15848af491b6fb0654", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e146e90e5672a6f4f8eec15848af491b6fb0654", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e146e90e5672a6f4f8eec15848af491b6fb0654"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "a751a56e8d46fe998ff8b458398682adf2a23f9f", "filename": "gcc/cccp.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b01bc66eed730a17baf459d06f2aa454b908350/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b01bc66eed730a17baf459d06f2aa454b908350/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=5b01bc66eed730a17baf459d06f2aa454b908350", "patch": "@@ -451,6 +451,10 @@ static int no_output;\n    and/or warnings.  */\n \n static int done_initializing = 0;\n+\n+/* Line where a newline was first seen in a string constant.  */\n+\n+static int multiline_string_line = 0;\n \f\n /* I/O buffer structure.\n    The `fname' field is nonzero for source files and #include files\n@@ -2177,9 +2181,6 @@ rescan (op, output_marks)\n      this records the line it started on, for error messages.  */\n   int start_line;\n \n-  /* Line where a newline was first seen in a string constant.  */\n-  int multiline_string_line = 0;\n-\n   /* Record position of last `real' newline.  */\n   U_CHAR *beg_of_line;\n \n@@ -6669,6 +6670,9 @@ skip_quoted_string (bp, limit, start_line, count_newlines, backslash_newlines_p,\n     if (bp >= limit) {\n       error_with_line (line_for_error (start_line),\n \t\t       \"unterminated string or character constant\");\n+      error_with_line (multiline_string_line,\n+\t\t       \"possible real start of unterminated constant\");\n+      multiline_string_line = 0;\n       if (eofp)\n \t*eofp = 1;\n       break;\n@@ -6696,22 +6700,19 @@ skip_quoted_string (bp, limit, start_line, count_newlines, backslash_newlines_p,\n  \t  *eofp = 1;\n  \tbreak;\n       }\n-      if (match == '\\'') {\n+      if (pedantic || match == '\\'') {\n \terror_with_line (line_for_error (start_line),\n-\t\t\t \"unterminated character constant\");\n+\t\t\t \"unterminated string or character constant\");\n \tbp--;\n \tif (eofp)\n \t  *eofp = 1;\n \tbreak;\n       }\n-      if (traditional) {\t/* Unterminated strings are 'legal'.  */\n-\tif (eofp)\n-\t  *eofp = 1;\n-\tbreak;\n-      }\n       /* If not traditional, then allow newlines inside strings.  */\n       if (count_newlines)\n \t++*count_newlines;\n+      if (multiline_string_line == 0)\n+\tmultiline_string_line = start_line;\n     } else if (c == match)\n       break;\n   }"}]}