{"sha": "9dc1704f8e2a4d600596bcc32b1553ef068354fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRjMTcwNGY4ZTJhNGQ2MDA1OTZiY2MzMmIxNTUzZWYwNjgzNTRmYw==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-10-11T16:23:52Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-10-11T16:23:52Z"}, "message": "decl.c (java_init_decl_processing): Use build_function_type_list instead of build_function_type.\n\n\t* decl.c (java_init_decl_processing): Use build_function_type_list\n\tinstead of build_function_type.\n\t* jcf-parse.c (java_emit_static_constructor): Likewise.\n\t* builtins.c (initialize_builtins): Likewise.\n\nFrom-SVN: r165317", "tree": {"sha": "16055202b2c82313b7629035356d972882036158", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16055202b2c82313b7629035356d972882036158"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9dc1704f8e2a4d600596bcc32b1553ef068354fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dc1704f8e2a4d600596bcc32b1553ef068354fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dc1704f8e2a4d600596bcc32b1553ef068354fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dc1704f8e2a4d600596bcc32b1553ef068354fc/comments", "author": null, "committer": null, "parents": [{"sha": "1928f45020f103b945190d1a5ae95533ff865722", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1928f45020f103b945190d1a5ae95533ff865722", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1928f45020f103b945190d1a5ae95533ff865722"}], "stats": {"total": 195, "additions": 90, "deletions": 105}, "files": [{"sha": "9a337046a0188aace83f85f08b2ba02898d82d6b", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dc1704f8e2a4d600596bcc32b1553ef068354fc/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dc1704f8e2a4d600596bcc32b1553ef068354fc/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=9dc1704f8e2a4d600596bcc32b1553ef068354fc", "patch": "@@ -1,3 +1,10 @@\n+2010-10-11  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* decl.c (java_init_decl_processing): Use build_function_type_list\n+\tinstead of build_function_type.\n+\t* jcf-parse.c (java_emit_static_constructor): Likewise.\n+\t* builtins.c (initialize_builtins): Likewise.\n+\n 2010-10-08  Joseph Myers  <joseph@codesourcery.com>\n \n \t* lang.c (java_init_options_struct): New.  Split out from"}, {"sha": "fbaaf3e9bc76a847f3e8863c59c67dd269391fcf", "filename": "gcc/java/builtins.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dc1704f8e2a4d600596bcc32b1553ef068354fc/gcc%2Fjava%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dc1704f8e2a4d600596bcc32b1553ef068354fc/gcc%2Fjava%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fbuiltins.c?ref=9dc1704f8e2a4d600596bcc32b1553ef068354fc", "patch": "@@ -498,7 +498,6 @@ initialize_builtins (void)\n   tree double_ftype_double, double_ftype_double_double;\n   tree float_ftype_float_float;\n   tree boolean_ftype_boolean_boolean;\n-  tree t;\n   int i;\n \n   for (i = 0; java_builtins[i].builtin_code != END_BUILTINS; ++i)\n@@ -512,14 +511,15 @@ initialize_builtins (void)\n \n   void_list_node = end_params_node;\n \n-  t = tree_cons (NULL_TREE, float_type_node, end_params_node);\n-  t = tree_cons (NULL_TREE, float_type_node, t);\n-  float_ftype_float_float = build_function_type (float_type_node, t);\n+  float_ftype_float_float\n+    = build_function_type_list (float_type_node,\n+\t\t\t\tfloat_type_node, float_type_node, NULL_TREE);\n \n-  t = tree_cons (NULL_TREE, double_type_node, end_params_node);\n-  double_ftype_double = build_function_type (double_type_node, t);\n-  t = tree_cons (NULL_TREE, double_type_node, t);\n-  double_ftype_double_double = build_function_type (double_type_node, t);\n+  double_ftype_double\n+    = build_function_type_list (double_type_node, double_type_node, NULL_TREE);\n+  double_ftype_double_double\n+    = build_function_type_list (double_type_node,\n+\t\t\t\tdouble_type_node, double_type_node, NULL_TREE);\n \n   define_builtin (BUILT_IN_FMOD, \"__builtin_fmod\",\n \t\t  double_ftype_double_double, \"fmod\", BUILTIN_CONST);\n@@ -566,9 +566,10 @@ initialize_builtins (void)\n \t\t  double_ftype_double, \"_ZN4java4lang4Math3tanEJdd\",\n \t\t  BUILTIN_CONST);\n   \n-  t = tree_cons (NULL_TREE, boolean_type_node, end_params_node);\n-  t = tree_cons (NULL_TREE, boolean_type_node, t);\n-  boolean_ftype_boolean_boolean = build_function_type (boolean_type_node, t);\n+  boolean_ftype_boolean_boolean\n+    = build_function_type_list (boolean_type_node,\n+\t\t\t\tboolean_type_node, boolean_type_node,\n+\t\t\t\tNULL_TREE);\n   define_builtin (BUILT_IN_EXPECT, \"__builtin_expect\", \n \t\t  boolean_ftype_boolean_boolean,\n \t\t  \"__builtin_expect\",\n@@ -588,7 +589,7 @@ initialize_builtins (void)\n \t\t\t\t\t    int_type_node, NULL_TREE), \n \t\t  \"__sync_bool_compare_and_swap_8\", 0);\n   define_builtin (BUILT_IN_SYNCHRONIZE, \"__sync_synchronize\",\n-\t\t  build_function_type (void_type_node, void_list_node),\n+\t\t  build_function_type_list (void_type_node, NULL_TREE),\n \t\t  \"__sync_synchronize\", BUILTIN_NOTHROW);\n   \n   define_builtin (BUILT_IN_RETURN_ADDRESS, \"__builtin_return_address\","}, {"sha": "96a18aeb1b8a3ecc1eb7c41ab27530b8aa48c404", "filename": "gcc/java/decl.c", "status": "modified", "additions": 69, "deletions": 92, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dc1704f8e2a4d600596bcc32b1553ef068354fc/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dc1704f8e2a4d600596bcc32b1553ef068354fc/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=9dc1704f8e2a4d600596bcc32b1553ef068354fc", "patch": "@@ -555,7 +555,6 @@ parse_version (void)\n void\n java_init_decl_processing (void)\n {\n-  tree endlink;\n   tree field = NULL_TREE;\n   tree t;\n \n@@ -987,77 +986,66 @@ java_init_decl_processing (void)\n   build_decl (BUILTINS_LOCATION,\n \t      TYPE_DECL, get_identifier (\"Method\"), method_type_node);\n \n-  endlink = end_params_node = tree_cons (NULL_TREE, void_type_node, NULL_TREE);\n+  end_params_node = tree_cons (NULL_TREE, void_type_node, NULL_TREE);\n \n-  t = tree_cons (NULL_TREE, class_ptr_type, endlink);\n-  alloc_object_node = add_builtin_function (\"_Jv_AllocObject\",\n-\t\t\t\t\t    build_function_type (ptr_type_node, t),\n+  t = build_function_type_list (ptr_type_node, class_ptr_type, NULL_TREE);\n+  alloc_object_node = add_builtin_function (\"_Jv_AllocObject\", t,\n \t\t\t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n   DECL_IS_MALLOC (alloc_object_node) = 1;\n   alloc_no_finalizer_node =\n-    add_builtin_function (\"_Jv_AllocObjectNoFinalizer\",\n-\t\t\t  build_function_type (ptr_type_node, t),\n+    add_builtin_function (\"_Jv_AllocObjectNoFinalizer\", t,\n \t\t\t  0, NOT_BUILT_IN, NULL, NULL_TREE);\n   DECL_IS_MALLOC (alloc_no_finalizer_node) = 1;\n \n-  t = tree_cons (NULL_TREE, ptr_type_node, endlink);\n-  soft_initclass_node = add_builtin_function (\"_Jv_InitClass\",\n-\t\t\t\t\t      build_function_type (void_type_node,\n-\t\t\t\t\t\t\t\t   t),\n+  t = build_function_type_list (void_type_node, ptr_type_node, NULL_TREE);\n+  soft_initclass_node = add_builtin_function (\"_Jv_InitClass\", t,\n \t\t\t\t\t      0, NOT_BUILT_IN, NULL, NULL_TREE);\n-  t = tree_cons (NULL_TREE, class_ptr_type,\n-\t\t tree_cons (NULL_TREE, int_type_node, endlink));\n+  t = build_function_type_list (ptr_type_node,\n+\t\t\t\tclass_ptr_type, int_type_node, NULL_TREE);\n   soft_resolvepoolentry_node\n-    = add_builtin_function (\"_Jv_ResolvePoolEntry\",\n-\t\t\t    build_function_type (ptr_type_node, t),\n+    = add_builtin_function (\"_Jv_ResolvePoolEntry\", t,\n \t\t\t    0,NOT_BUILT_IN, NULL, NULL_TREE);\n   DECL_PURE_P (soft_resolvepoolentry_node) = 1;\n-  throw_node = add_builtin_function (\"_Jv_Throw\",\n-\t\t\t\t     build_function_type (void_type_node, t),\n+  t = build_function_type_list (void_type_node,\n+\t\t\t\tclass_ptr_type, int_type_node, NULL_TREE);\n+  throw_node = add_builtin_function (\"_Jv_Throw\", t,\n \t\t\t\t     0, NOT_BUILT_IN, NULL, NULL_TREE);\n   /* Mark throw_nodes as `noreturn' functions with side effects.  */\n   TREE_THIS_VOLATILE (throw_node) = 1;\n   TREE_SIDE_EFFECTS (throw_node) = 1;\n \n-  t = build_function_type (void_type_node, tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t\t\t\t      endlink));\n+  t = build_function_type_list (void_type_node, ptr_type_node, NULL_TREE);\n   soft_monitorenter_node\n     = add_builtin_function (\"_Jv_MonitorEnter\", t, 0, NOT_BUILT_IN,\n \t\t\t    NULL, NULL_TREE);\n   soft_monitorexit_node\n     = add_builtin_function (\"_Jv_MonitorExit\", t, 0, NOT_BUILT_IN,\n \t\t\t    NULL, NULL_TREE);\n \n-  t = tree_cons (NULL_TREE, ptr_type_node,\n-\t\t tree_cons (NULL_TREE, int_type_node, endlink));\n+  t = build_function_type_list (ptr_type_node,\n+\t\t\t\tptr_type_node, int_type_node, NULL_TREE);\n   soft_newarray_node\n-      = add_builtin_function (\"_Jv_NewPrimArray\",\n-\t\t\t      build_function_type (ptr_type_node, t),\n+      = add_builtin_function (\"_Jv_NewPrimArray\", t,\n \t\t\t      0, NOT_BUILT_IN, NULL, NULL_TREE);\n   DECL_IS_MALLOC (soft_newarray_node) = 1;\n \n-  t = tree_cons (NULL_TREE, int_type_node,\n-\t\t tree_cons (NULL_TREE, class_ptr_type,\n-\t\t\t    tree_cons (NULL_TREE, object_ptr_type_node,\n-\t\t\t\t       endlink)));\n+  t = build_function_type_list (ptr_type_node,\n+\t\t\t\tint_type_node, class_ptr_type,\n+\t\t\t\tobject_ptr_type_node, NULL_TREE);\n   soft_anewarray_node\n-      = add_builtin_function (\"_Jv_NewObjectArray\",\n-\t\t\t      build_function_type (ptr_type_node, t),\n+      = add_builtin_function (\"_Jv_NewObjectArray\", t,\n \t\t\t      0, NOT_BUILT_IN, NULL, NULL_TREE);\n   DECL_IS_MALLOC (soft_anewarray_node) = 1;\n \n-  /* There is no endlink here because _Jv_NewMultiArray is a varargs\n-     function.  */\n-  t = tree_cons (NULL_TREE, ptr_type_node,\n-\t\t tree_cons (NULL_TREE, int_type_node, NULL_TREE));\n+  t = build_varargs_function_type_list (ptr_type_node,\n+\t\t\t\t\tptr_type_node, int_type_node,\n+\t\t\t\t\tNULL_TREE);\n   soft_multianewarray_node\n-      = add_builtin_function (\"_Jv_NewMultiArray\",\n-\t\t\t      build_function_type (ptr_type_node, t),\n+      = add_builtin_function (\"_Jv_NewMultiArray\", t,\n \t\t\t      0, NOT_BUILT_IN, NULL, NULL_TREE);\n   DECL_IS_MALLOC (soft_multianewarray_node) = 1;\n \n-  t = build_function_type (void_type_node, \n-\t\t\t   tree_cons (NULL_TREE, int_type_node, endlink));\n+  t = build_function_type_list (void_type_node, int_type_node, NULL_TREE);\n   soft_badarrayindex_node\n       = add_builtin_function (\"_Jv_ThrowBadArrayIndex\", t,\n \t\t\t      0, NOT_BUILT_IN, NULL, NULL_TREE);\n@@ -1066,114 +1054,103 @@ java_init_decl_processing (void)\n   TREE_THIS_VOLATILE (soft_badarrayindex_node) = 1;\n   TREE_SIDE_EFFECTS (soft_badarrayindex_node) = 1;\n \n+  t = build_function_type_list (void_type_node, NULL_TREE);\n   soft_nullpointer_node\n-    = add_builtin_function (\"_Jv_ThrowNullPointerException\",\n-\t\t\t    build_function_type (void_type_node, endlink),\n+    = add_builtin_function (\"_Jv_ThrowNullPointerException\", t,\n \t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n   /* Mark soft_nullpointer_node as a `noreturn' function with side\n      effects.  */\n   TREE_THIS_VOLATILE (soft_nullpointer_node) = 1;\n   TREE_SIDE_EFFECTS (soft_nullpointer_node) = 1;\n \n   soft_abstractmethod_node\n-    = add_builtin_function (\"_Jv_ThrowAbstractMethodError\",\n-\t\t\t    build_function_type (void_type_node, endlink),\n+    = add_builtin_function (\"_Jv_ThrowAbstractMethodError\", t,\n \t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n   /* Mark soft_abstractmethod_node as a `noreturn' function with side\n      effects.  */\n   TREE_THIS_VOLATILE (soft_abstractmethod_node) = 1;\n   TREE_SIDE_EFFECTS (soft_abstractmethod_node) = 1;\n \n   soft_nosuchfield_node\n-    = add_builtin_function (\"_Jv_ThrowNoSuchFieldError\",\n-\t\t\t    build_function_type (void_type_node, endlink),\n+    = add_builtin_function (\"_Jv_ThrowNoSuchFieldError\", t,\n \t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n   /* Mark soft_nosuchfield_node as a `noreturn' function with side\n      effects.  */\n   TREE_THIS_VOLATILE (soft_nosuchfield_node) = 1;\n   TREE_SIDE_EFFECTS (soft_nosuchfield_node) = 1;\n \n-  t = tree_cons (NULL_TREE, class_ptr_type,\n-\t\t tree_cons (NULL_TREE, object_ptr_type_node, endlink));\n+  t = build_function_type_list (ptr_type_node,\n+\t\t\t\tclass_ptr_type, object_ptr_type_node,\n+\t\t\t\tNULL_TREE);\n   soft_checkcast_node\n-    = add_builtin_function (\"_Jv_CheckCast\",\n-\t\t\t    build_function_type (ptr_type_node, t),\n+    = add_builtin_function (\"_Jv_CheckCast\", t,\n \t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n-  t = tree_cons (NULL_TREE, object_ptr_type_node,\n-\t\t tree_cons (NULL_TREE, class_ptr_type, endlink));\n+  t = build_function_type_list (boolean_type_node,\n+\t\t\t\tobject_ptr_type_node, class_ptr_type,\n+\t\t\t\tNULL_TREE);\n   soft_instanceof_node\n-    = add_builtin_function (\"_Jv_IsInstanceOf\",\n-\t\t\t    build_function_type (boolean_type_node, t),\n+    = add_builtin_function (\"_Jv_IsInstanceOf\", t,\n \t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n   DECL_PURE_P (soft_instanceof_node) = 1;\n-  t = tree_cons (NULL_TREE, object_ptr_type_node,\n-\t\t tree_cons (NULL_TREE, object_ptr_type_node, endlink));\n+  t = build_function_type_list (void_type_node,\n+\t\t\t\tobject_ptr_type_node, object_ptr_type_node,\n+\t\t\t\tNULL_TREE);\n   soft_checkarraystore_node\n-    = add_builtin_function (\"_Jv_CheckArrayStore\",\n-\t\t\t    build_function_type (void_type_node, t),\n+    = add_builtin_function (\"_Jv_CheckArrayStore\", t,\n \t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n-  t = tree_cons (NULL_TREE, ptr_type_node,\n-\t\t tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t    tree_cons (NULL_TREE, int_type_node, endlink)));\n+  t = build_function_type_list (ptr_type_node,\n+\t\t\t\tptr_type_node, ptr_type_node, int_type_node,\n+\t\t\t\tNULL_TREE);\n   soft_lookupinterfacemethod_node\n-    = add_builtin_function (\"_Jv_LookupInterfaceMethodIdx\",\n-\t\t\t    build_function_type (ptr_type_node, t),\n+    = add_builtin_function (\"_Jv_LookupInterfaceMethodIdx\", t,\n \t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n   DECL_PURE_P (soft_lookupinterfacemethod_node) = 1;\n-  t = tree_cons (NULL_TREE, ptr_type_node,\n-\t\t tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t    tree_cons (NULL_TREE, ptr_type_node, endlink)));\n+\n+  t = build_function_type_list (ptr_type_node,\n+\t\t\t\tptr_type_node, ptr_type_node, ptr_type_node,\n+\t\t\t\tNULL_TREE);\n   soft_lookupinterfacemethodbyname_node\n-    = add_builtin_function (\"_Jv_LookupInterfaceMethod\",\n-\t\t\t    build_function_type (ptr_type_node, t),\n+    = add_builtin_function (\"_Jv_LookupInterfaceMethod\", t,\n \t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n-  t = tree_cons (NULL_TREE, object_ptr_type_node,\n-\t\t tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t    tree_cons (NULL_TREE, ptr_type_node, \n-\t\t\t               tree_cons (NULL_TREE, int_type_node, \n-\t\t\t\t                  endlink))));\n+  t = build_function_type_list (ptr_type_node,\n+\t\t\t\tobject_ptr_type_node, ptr_type_node,\n+\t\t\t\tptr_type_node, int_type_node, NULL_TREE);\n   soft_lookupjnimethod_node\n-    = add_builtin_function (\"_Jv_LookupJNIMethod\",\n-\t\t\t    build_function_type (ptr_type_node, t),\n+    = add_builtin_function (\"_Jv_LookupJNIMethod\", t,\n \t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n-  t = tree_cons (NULL_TREE, ptr_type_node, endlink);\n+  t = build_function_type_list (ptr_type_node, ptr_type_node, NULL_TREE);\n   soft_getjnienvnewframe_node\n-    = add_builtin_function (\"_Jv_GetJNIEnvNewFrame\",\n-\t\t\t    build_function_type (ptr_type_node, t),\n+    = add_builtin_function (\"_Jv_GetJNIEnvNewFrame\", t,\n \t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n+  t = build_function_type_list (void_type_node, ptr_type_node, NULL_TREE);\n   soft_jnipopsystemframe_node\n-    = add_builtin_function (\"_Jv_JNI_PopSystemFrame\",\n-\t\t\t    build_function_type (void_type_node, t),\n+    = add_builtin_function (\"_Jv_JNI_PopSystemFrame\", t,\n \t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n \n-  t = tree_cons (NULL_TREE, object_ptr_type_node, endlink);\n+  t = build_function_type_list (object_ptr_type_node,\n+\t\t\t\tobject_ptr_type_node, NULL_TREE);\n   soft_unwrapjni_node\n-    = add_builtin_function (\"_Jv_UnwrapJNIweakReference\",\n-\t\t\t    build_function_type (object_ptr_type_node, t),\n+    = add_builtin_function (\"_Jv_UnwrapJNIweakReference\", t,\n \t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n \n-  t = tree_cons (NULL_TREE, int_type_node,\n-\t\t tree_cons (NULL_TREE, int_type_node, endlink));\n+  t = build_function_type_list (int_type_node,\n+\t\t\t\tint_type_node, int_type_node, NULL_TREE);\n   soft_idiv_node\n-    = add_builtin_function (\"_Jv_divI\",\n-\t\t\t    build_function_type (int_type_node, t),\n+    = add_builtin_function (\"_Jv_divI\", t,\n \t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n \n   soft_irem_node\n-    = add_builtin_function (\"_Jv_remI\",\n-\t\t\t    build_function_type (int_type_node, t),\n+    = add_builtin_function (\"_Jv_remI\", t,\n \t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n \n-  t = tree_cons (NULL_TREE, long_type_node,\n-\t\t tree_cons (NULL_TREE, long_type_node, endlink));\n+  t = build_function_type_list (long_type_node,\n+\t\t\t\tlong_type_node, long_type_node, NULL_TREE);\n   soft_ldiv_node\n-    = add_builtin_function (\"_Jv_divJ\",\n-\t\t\t    build_function_type (long_type_node, t),\n+    = add_builtin_function (\"_Jv_divJ\", t,\n \t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n \n   soft_lrem_node\n-    = add_builtin_function (\"_Jv_remJ\",\n-\t\t\t    build_function_type (long_type_node, t),\n+    = add_builtin_function (\"_Jv_remJ\", t,\n \t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n \n   initialize_builtins ();"}, {"sha": "e6dc44c1d0ffef91ab4ce678dd43cf4fd71d2e30", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dc1704f8e2a4d600596bcc32b1553ef068354fc/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dc1704f8e2a4d600596bcc32b1553ef068354fc/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=9dc1704f8e2a4d600596bcc32b1553ef068354fc", "patch": "@@ -1704,7 +1704,7 @@ java_emit_static_constructor (void)\n \n       tree decl \n \t= build_decl (input_location, FUNCTION_DECL, name,\n-\t\t      build_function_type (void_type_node, void_list_node));\n+\t\t      build_function_type_list (void_type_node, NULL_TREE));\n \n       tree resdecl = build_decl (input_location,\n \t\t\t\t RESULT_DECL, NULL_TREE, void_type_node);"}]}