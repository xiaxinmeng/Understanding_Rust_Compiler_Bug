{"sha": "32fe15ec71951cb18be7d3f90019147b55b8ee76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJmZTE1ZWM3MTk1MWNiMThiZTdkM2Y5MDAxOTE0N2I1NWI4ZWU3Ng==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-05-21T15:40:01Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-05-21T15:40:01Z"}, "message": "tmmintrin.h (_mm_alignr_epi8): Provide macro implementation if __OPTIMIZE__ is not defined.\n\n\t* config/i386/tmmintrin.h (_mm_alignr_epi8): Provide macro\n\timplementation if __OPTIMIZE__ is not defined.\n\t(_mm_alignr_pi8): Ditto.\n\t* config/i386/ammintrin.h (_mm_extracti_si64): Ditto.\n\t(_mm_inserti_si64): Ditto.\n\t* config/i386/emmintrin.h (_mm_shuffle_pd): Ditto.\n\t(_mm_slli_epi16): Ditto.\n        (_mm_slli_epi32): Ditto.\n        (_mm_slli_epi64): Ditto.\n\t(_mm_srai_epi16): Ditto.\n\t(_mm_srai_epi32): Ditto.\n\t(_mm_srli_si128): Ditto.\n\t(_mm_slli_si128): Ditto.\n\t(_mm_srli_epi16): Ditto.\n        (_mm_srli_epi32): Ditto.\n        (_mm_srli_epi64): Ditto.\n\t(_mm_extract_epi16): Ditto.\n\t(_mm_insert_epi16): Ditto.\n\t(_mm_shufflehi_epi16): Ditto.\n\t(_mm_shufflelo_epi16): Ditto.\n\t(_mm_shuffle_epi32): Ditto.\n        * config/i386/xmmintrin.h (_mm_extract_pi16): Ditto.\n        (_m_pextrw): Ditto.\n        (_mm_insert_pi16): Ditto.\n        (_m_pinsrw): Ditto.\n        (_mm_shuffle_pi16): Ditto.\n        (_m_pshufw): Ditto.\n        (_mm_shufle_ps): Ditto.\n        (_mm_prefetch): Ditto.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/sse-14.c: Remove all intrinsic redefines.\n\t* gcc.target/i386/sse-12: Add -O to compile options.\n\t* g++.dg/other/i386-2.C: Use \"-march=k8 -m3dnow -mssse3\n\t-msse4a\" instead of \"-msse3\".  Include only ammintrin.h, tmmintrin.h\n\tand mm3dnow.h.  Add -O to compile options.\n\nFrom-SVN: r124904", "tree": {"sha": "a22c19f63607dd1c196746d1021d2233ecf3bc14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a22c19f63607dd1c196746d1021d2233ecf3bc14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32fe15ec71951cb18be7d3f90019147b55b8ee76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32fe15ec71951cb18be7d3f90019147b55b8ee76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32fe15ec71951cb18be7d3f90019147b55b8ee76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32fe15ec71951cb18be7d3f90019147b55b8ee76/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c4ba884897fc5aa644f3d43990431e023ed618f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4ba884897fc5aa644f3d43990431e023ed618f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4ba884897fc5aa644f3d43990431e023ed618f4"}], "stats": {"total": 196, "additions": 146, "deletions": 50}, "files": [{"sha": "f94c125fb46a736155af06b0931d256173e89961", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32fe15ec71951cb18be7d3f90019147b55b8ee76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32fe15ec71951cb18be7d3f90019147b55b8ee76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32fe15ec71951cb18be7d3f90019147b55b8ee76", "patch": "@@ -1,3 +1,35 @@\n+2007-05-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/tmmintrin.h (_mm_alignr_epi8): Provide macro\n+\timplementation if __OPTIMIZE__ is not defined.\n+\t(_mm_alignr_pi8): Ditto.\n+\t* config/i386/ammintrin.h (_mm_extracti_si64): Ditto.\n+\t(_mm_inserti_si64): Ditto.\n+\t* config/i386/emmintrin.h (_mm_shuffle_pd): Ditto.\n+\t(_mm_slli_epi16): Ditto.\n+\t(_mm_slli_epi32): Ditto.\n+\t(_mm_slli_epi64): Ditto.\n+\t(_mm_srai_epi16): Ditto.\n+\t(_mm_srai_epi32): Ditto.\n+\t(_mm_srli_si128): Ditto.\n+\t(_mm_slli_si128): Ditto.\n+\t(_mm_srli_epi16): Ditto.\n+\t(_mm_srli_epi32): Ditto.\n+\t(_mm_srli_epi64): Ditto.\n+\t(_mm_extract_epi16): Ditto.\n+\t(_mm_insert_epi16): Ditto.\n+\t(_mm_shufflehi_epi16): Ditto.\n+\t(_mm_shufflelo_epi16): Ditto.\n+\t(_mm_shuffle_epi32): Ditto.\n+\t* config/i386/xmmintrin.h (_mm_extract_pi16): Ditto.\n+\t(_m_pextrw): Ditto.\n+\t(_mm_insert_pi16): Ditto.\n+\t(_m_pinsrw): Ditto.\n+\t(_mm_shuffle_pi16): Ditto.\n+\t(_m_pshufw): Ditto.\n+\t(_mm_shufle_ps): Ditto.\n+\t(_mm_prefetch): Ditto.\n+\n 2007-05-21  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* defaults.h (IBM_FLOAT_FORMAT): Macro definition removed."}, {"sha": "c615b19163f9ebb060272659bb2a70062d2ebf0f", "filename": "gcc/config/i386/ammintrin.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32fe15ec71951cb18be7d3f90019147b55b8ee76/gcc%2Fconfig%2Fi386%2Fammintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32fe15ec71951cb18be7d3f90019147b55b8ee76/gcc%2Fconfig%2Fi386%2Fammintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fammintrin.h?ref=32fe15ec71951cb18be7d3f90019147b55b8ee76", "patch": "@@ -55,24 +55,33 @@ _mm_extract_si64 (__m128i __X, __m128i __Y)\n   return (__m128i) __builtin_ia32_extrq ((__v2di) __X, (__v16qi) __Y);\n }\n \n+#ifdef __OPTIMIZE__\n static __inline __m128i __attribute__((__always_inline__))\n _mm_extracti_si64 (__m128i __X, unsigned const int __I, unsigned const int __L)\n {\n   return (__m128i) __builtin_ia32_extrqi ((__v2di) __X, __I, __L);\n }\n+#else\n+#define _mm_extracti_si64(X, I, L) \\\n+  ((__m128i) __builtin_ia32_extrqi ((__v2di)(X), I, L))\n+#endif\n \n static __inline __m128i __attribute__((__always_inline__))\n _mm_insert_si64 (__m128i __X,__m128i __Y)\n {\n   return (__m128i) __builtin_ia32_insertq ((__v2di)__X, (__v2di)__Y);\n }\n \n+#ifdef __OPTIMIZE__\n static __inline __m128i __attribute__((__always_inline__))\n _mm_inserti_si64(__m128i __X, __m128i __Y, unsigned const int __I, unsigned const int __L)\n {\n   return (__m128i) __builtin_ia32_insertqi ((__v2di)__X, (__v2di)__Y, __I, __L);\n }\n-\n+#else\n+#define _mm_inserti_si64(X, Y, I, L) \\\n+  ((__m128i) __builtin_ia32_insertqi ((__v2di)(X), (__v2di)(Y), I, L))\n+#endif\n \n #endif /* __SSE4A__ */\n "}, {"sha": "a886b7140baa6bc4047e08882ed035e2b9fffab7", "filename": "gcc/config/i386/emmintrin.h", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32fe15ec71951cb18be7d3f90019147b55b8ee76/gcc%2Fconfig%2Fi386%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32fe15ec71951cb18be7d3f90019147b55b8ee76/gcc%2Fconfig%2Fi386%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Femmintrin.h?ref=32fe15ec71951cb18be7d3f90019147b55b8ee76", "patch": "@@ -880,11 +880,16 @@ _mm_cvtss_sd (__m128d __A, __m128 __B)\n   return (__m128d)__builtin_ia32_cvtss2sd ((__v2df) __A, (__v4sf)__B);\n }\n \n+#ifdef __OPTIMIZE__\n static __inline __m128d __attribute__((__always_inline__))\n _mm_shuffle_pd(__m128d __A, __m128d __B, const int __mask)\n {\n   return (__m128d)__builtin_ia32_shufpd ((__v2df)__A, (__v2df)__B, __mask);\n }\n+#else\n+#define _mm_shuffle_pd(__A, __B, __C) \\\n+  ((__m128d)__builtin_ia32_shufpd ((__v2df)__A, (__v2df)__B, (__C)))\n+#endif\n \n static __inline __m128d __attribute__((__always_inline__))\n _mm_unpackhi_pd (__m128d __A, __m128d __B)\n@@ -1108,6 +1113,7 @@ _mm_mul_epu32 (__m128i __A, __m128i __B)\n   return (__m128i)__builtin_ia32_pmuludq128 ((__v4si)__A, (__v4si)__B);\n }\n \n+#ifdef __OPTIMIZE__\n static __inline __m128i __attribute__((__always_inline__))\n _mm_slli_epi16 (__m128i __A, const int __B)\n {\n@@ -1125,7 +1131,16 @@ _mm_slli_epi64 (__m128i __A, const int __B)\n {\n   return (__m128i)__builtin_ia32_psllqi128 ((__v2di)__A, __B);\n }\n+#else\n+#define _mm_slli_epi16(__A, __B) \\\n+  ((__m128i)__builtin_ia32_psllwi128 ((__v8hi)(__A), __B))\n+#define _mm_slli_epi32(__A, __B) \\\n+  ((__m128i)__builtin_ia32_pslldi128 ((__v4si)(__A), __B))\n+#define _mm_slli_epi64(__A, __B) \\\n+  ((__m128i)__builtin_ia32_psllqi128 ((__v2di)(__A), __B))\n+#endif\n \n+#ifdef __OPTIMIZE__\n static __inline __m128i __attribute__((__always_inline__))\n _mm_srai_epi16 (__m128i __A, const int __B)\n {\n@@ -1137,7 +1152,14 @@ _mm_srai_epi32 (__m128i __A, const int __B)\n {\n   return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);\n }\n+#else\n+#define _mm_srai_epi16(__A, __B) \\\n+  ((__m128i)__builtin_ia32_psrawi128 ((__v8hi)(__A), __B))\n+#define _mm_srai_epi32(__A, __B) \\\n+  ((__m128i)__builtin_ia32_psradi128 ((__v4si)(__A), __B))\n+#endif\n \n+#ifdef __OPTIMIZE__\n static __inline __m128i __attribute__((__always_inline__))\n _mm_srli_si128 (__m128i __A, const int __B)\n {\n@@ -1149,7 +1171,14 @@ _mm_slli_si128 (__m128i __A, const int __B)\n {\n   return (__m128i)__builtin_ia32_pslldqi128 (__A, __B * 8);\n }\n+#else\n+#define _mm_srli_si128(__A, __B) \\\n+  ((__m128i)__builtin_ia32_psrldqi128 (__A, (__B) * 8))\n+#define _mm_slli_si128(__A, __B) \\\n+  ((__m128i)__builtin_ia32_pslldqi128 (__A, (__B) * 8))\n+#endif\n \n+#ifdef __OPTIMIZE__\n static __inline __m128i __attribute__((__always_inline__))\n _mm_srli_epi16 (__m128i __A, const int __B)\n {\n@@ -1167,6 +1196,14 @@ _mm_srli_epi64 (__m128i __A, const int __B)\n {\n   return (__m128i)__builtin_ia32_psrlqi128 ((__v2di)__A, __B);\n }\n+#else\n+#define _mm_srli_epi16(__A, __B) \\\n+  ((__m128i)__builtin_ia32_psrlwi128 ((__v8hi)(__A), __B))\n+#define _mm_srli_epi32(__A, __B) \\\n+  ((__m128i)__builtin_ia32_psrldi128 ((__v4si)(__A), __B))\n+#define _mm_srli_epi64(__A, __B) \\\n+  ((__m128i)__builtin_ia32_psrlqi128 ((__v2di)(__A), __B))\n+#endif\n \n static __inline __m128i __attribute__((__always_inline__))\n _mm_sll_epi16 (__m128i __A, __m128i __B)\n@@ -1294,6 +1331,7 @@ _mm_cmpgt_epi32 (__m128i __A, __m128i __B)\n   return (__m128i)__builtin_ia32_pcmpgtd128 ((__v4si)__A, (__v4si)__B);\n }\n \n+#ifdef __OPTIMIZE__\n static __inline int __attribute__((__always_inline__))\n _mm_extract_epi16 (__m128i const __A, int const __N)\n {\n@@ -1305,6 +1343,12 @@ _mm_insert_epi16 (__m128i const __A, int const __D, int const __N)\n {\n   return (__m128i) __builtin_ia32_vec_set_v8hi ((__v8hi)__A, __D, __N);\n }\n+#else\n+#define _mm_extract_epi16(A, N) \\\n+  ((int) __builtin_ia32_vec_ext_v8hi ((__v8hi)(A), (N)))\n+#define _mm_insert_epi16(A, D, N) \\\n+  ((__m128i) __builtin_ia32_vec_set_v8hi ((__v8hi)(A), (D), (N)))\n+#endif\n \n static __inline __m128i __attribute__((__always_inline__))\n _mm_max_epi16 (__m128i __A, __m128i __B)\n@@ -1342,6 +1386,7 @@ _mm_mulhi_epu16 (__m128i __A, __m128i __B)\n   return (__m128i)__builtin_ia32_pmulhuw128 ((__v8hi)__A, (__v8hi)__B);\n }\n \n+#ifdef __OPTIMIZE__\n static __inline __m128i __attribute__((__always_inline__))\n _mm_shufflehi_epi16 (__m128i __A, const int __mask)\n {\n@@ -1359,6 +1404,14 @@ _mm_shuffle_epi32 (__m128i __A, const int __mask)\n {\n   return (__m128i)__builtin_ia32_pshufd ((__v4si)__A, __mask);\n }\n+#else\n+#define _mm_shufflehi_epi16(__A, __B) \\\n+  ((__m128i)__builtin_ia32_pshufhw ((__v8hi)__A, __B))\n+#define _mm_shufflelo_epi16(__A, __B) \\\n+  ((__m128i)__builtin_ia32_pshuflw ((__v8hi)__A, __B))\n+#define _mm_shuffle_epi32(__A, __B) \\\n+  ((__m128i)__builtin_ia32_pshufd ((__v4si)__A, __B))\n+#endif\n \n static __inline void __attribute__((__always_inline__))\n _mm_maskmoveu_si128 (__m128i __A, __m128i __B, char *__C)"}, {"sha": "6d4e290f2a66321883c91a45ceca328590fa9561", "filename": "gcc/config/i386/tmmintrin.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32fe15ec71951cb18be7d3f90019147b55b8ee76/gcc%2Fconfig%2Fi386%2Ftmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32fe15ec71951cb18be7d3f90019147b55b8ee76/gcc%2Fconfig%2Fi386%2Ftmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ftmmintrin.h?ref=32fe15ec71951cb18be7d3f90019147b55b8ee76", "patch": "@@ -181,6 +181,7 @@ _mm_sign_pi32 (__m64 __X, __m64 __Y)\n   return (__m64) __builtin_ia32_psignd ((__v2si)__X, (__v2si)__Y);\n }\n \n+#ifdef __OPTIMIZE__\n static __inline __m128i __attribute__((__always_inline__))\n _mm_alignr_epi8(__m128i __X, __m128i __Y, const int __N)\n {\n@@ -191,6 +192,12 @@ _mm_alignr_pi8(__m64 __X, __m64 __Y, const int __N)\n {\n   return (__m64)__builtin_ia32_palignr ((long long)__X, (long long)__Y, __N * 8);\n }\n+#else\n+#define _mm_alignr_epi8(__X, __Y, __N) \\\n+  ((__m128i)__builtin_ia32_palignr128 ((__v2di) __X, (__v2di) __Y, (__N) * 8))\n+#define _mm_alignr_pi8(__X, __Y, __N) \\\n+  ((__m64)__builtin_ia32_palignr ((long long) (__X), (long long) (__Y), (__N) * 8))\n+#endif\n \n static __inline __m128i __attribute__((__always_inline__))\n _mm_abs_epi8 (__m128i __X)"}, {"sha": "b55474ced370c51dc4b8a53b4146c6ad82c90299", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32fe15ec71951cb18be7d3f90019147b55b8ee76/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32fe15ec71951cb18be7d3f90019147b55b8ee76/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=32fe15ec71951cb18be7d3f90019147b55b8ee76", "patch": "@@ -716,11 +716,16 @@ _mm_cvtps_pi8(__m128 __A)\n }\n \n /* Selects four specific SPFP values from A and B based on MASK.  */\n+#ifdef __OPTIMIZE__\n static __inline __m128 __attribute__((__always_inline__))\n _mm_shuffle_ps (__m128 __A, __m128 __B, int const __mask)\n {\n   return (__m128) __builtin_ia32_shufps ((__v4sf)__A, (__v4sf)__B, __mask);\n }\n+#else\n+#define _mm_shuffle_ps(A, B, MASK) \\\n+ ((__m128) __builtin_ia32_shufps ((__v4sf)(A), (__v4sf)(B), (MASK)))\n+#endif\n \n /* Selects and interleaves the upper two SPFP values from A and B.  */\n static __inline __m128 __attribute__((__always_inline__))\n@@ -986,6 +991,7 @@ _mm_move_ss (__m128 __A, __m128 __B)\n }\n \n /* Extracts one of the four words of A.  The selector N must be immediate.  */\n+#ifdef __OPTIMIZE__\n static __inline int __attribute__((__always_inline__))\n _mm_extract_pi16 (__m64 const __A, int const __N)\n {\n@@ -997,9 +1003,14 @@ _m_pextrw (__m64 const __A, int const __N)\n {\n   return _mm_extract_pi16 (__A, __N);\n }\n+#else\n+#define _mm_extract_pi16(A, N)\t__builtin_ia32_vec_ext_v4hi ((__v4hi)(A), (N))\n+#define _m_pextrw(A, N)\t\t_mm_extract_pi16((A), (N))\n+#endif\n \n /* Inserts word D into one of four words of A.  The selector N must be\n    immediate.  */\n+#ifdef __OPTIMIZE__\n static __inline __m64 __attribute__((__always_inline__))\n _mm_insert_pi16 (__m64 const __A, int const __D, int const __N)\n {\n@@ -1011,6 +1022,11 @@ _m_pinsrw (__m64 const __A, int const __D, int const __N)\n {\n   return _mm_insert_pi16 (__A, __D, __N);\n }\n+#else\n+#define _mm_insert_pi16(A, D, N) \\\n+  ((__m64) __builtin_ia32_vec_set_v4hi ((__v4hi)(A), (D), (N)))\n+#define _m_pinsrw(A, D, N)\t _mm_insert_pi16((A), (D), (N))\n+#endif\n \n /* Compute the element-wise maximum of signed 16-bit values.  */\n static __inline __m64 __attribute__((__always_inline__))\n@@ -1093,6 +1109,7 @@ _m_pmulhuw (__m64 __A, __m64 __B)\n \n /* Return a combination of the four 16-bit values in A.  The selector\n    must be an immediate.  */\n+#ifdef __OPTIMIZE__\n static __inline __m64 __attribute__((__always_inline__))\n _mm_shuffle_pi16 (__m64 __A, int const __N)\n {\n@@ -1104,6 +1121,11 @@ _m_pshufw (__m64 __A, int const __N)\n {\n   return _mm_shuffle_pi16 (__A, __N);\n }\n+#else\n+#define _mm_shuffle_pi16(A, N) \\\n+  ((__m64) __builtin_ia32_pshufw ((__v4hi)(A), (N)))\n+#define _m_pshufw(A, N)\t\t_mm_shuffle_pi16 ((A), (N))\n+#endif\n \n /* Conditionally store byte elements of A into P.  The high bit of each\n    byte in the selector N determines whether the corresponding byte from\n@@ -1163,11 +1185,16 @@ _m_psadbw (__m64 __A, __m64 __B)\n \n /* Loads one cache line from address P to a location \"closer\" to the\n    processor.  The selector I specifies the type of prefetch operation.  */\n+#ifdef __OPTIMIZE__\n static __inline void __attribute__((__always_inline__))\n _mm_prefetch (void *__P, enum _mm_hint __I)\n {\n   __builtin_prefetch (__P, 0, __I);\n }\n+#else\n+#define _mm_prefetch(P, I) \\\n+  __builtin_prefetch ((P), 0, (I))\n+#endif\n \n /* Stores the data in A to the address P without polluting the caches.  */\n static __inline void __attribute__((__always_inline__))"}, {"sha": "9e32a381962eaa7e3ded8c66a51a7a96ea69e10a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32fe15ec71951cb18be7d3f90019147b55b8ee76/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32fe15ec71951cb18be7d3f90019147b55b8ee76/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=32fe15ec71951cb18be7d3f90019147b55b8ee76", "patch": "@@ -1,3 +1,11 @@\n+2007-05-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/sse-14.c: Remove all intrinsic redefines.\n+\t* gcc.target/i386/sse-12: Add -O to compile options.\n+\t* g++.dg/other/i386-2.C: Use \"-march=k8 -m3dnow -mssse3\n+\t-msse4a\" instead of \"-msse3\".  Include only ammintrin.h, tmmintrin.h\n+\tand mm3dnow.h.  Add -O to compile options.\n+\n 2007-05-21  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/31867"}, {"sha": "86316171599464f78de38132ac5829db253f5b41", "filename": "gcc/testsuite/g++.dg/other/i386-1.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32fe15ec71951cb18be7d3f90019147b55b8ee76/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32fe15ec71951cb18be7d3f90019147b55b8ee76/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-1.C?ref=32fe15ec71951cb18be7d3f90019147b55b8ee76", "patch": "@@ -1,6 +1,5 @@\n /* { dg-do run { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-march=pentium4\" } */\n-/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-msse2\" } */\n \n #include <xmmintrin.h>\n #include <stdio.h>"}, {"sha": "e970923b02ec2005dafcddc6dd84f906bb59e8e0", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32fe15ec71951cb18be7d3f90019147b55b8ee76/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32fe15ec71951cb18be7d3f90019147b55b8ee76/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=32fe15ec71951cb18be7d3f90019147b55b8ee76", "patch": "@@ -1,12 +1,10 @@\n-/* Test that {,x,e,p}mmintrin.h and mm_malloc.h are\n-   usable with -pedantic-errors.  */\n+/* Test that {,x,e,p,t,a}mmintrin.h, mm3dnow.h and mm_malloc.h are\n+   usable with -O -pedantic-errors.  */\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-pedantic-errors -msse3\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -m3dnow -mssse3 -msse4a\" } */\n \n-#include <mmintrin.h>\n-#include <xmmintrin.h>\n-#include <emmintrin.h>\n-#include <pmmintrin.h>\n-#include <mm_malloc.h>\n+#include <ammintrin.h>\n+#include <tmmintrin.h>\n+#include <mm3dnow.h>\n \n int dummy;"}, {"sha": "de96ea882aed32080c6916b8121fe99a8ca6e855", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32fe15ec71951cb18be7d3f90019147b55b8ee76/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32fe15ec71951cb18be7d3f90019147b55b8ee76/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=32fe15ec71951cb18be7d3f90019147b55b8ee76", "patch": "@@ -1,7 +1,7 @@\n /* Test that {,x,e,p,t,a}mmintrin.h, mm3dnow.h and mm_malloc.h are\n-   usable with -std=c89 -pedantic-errors.  */\n+   usable with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-std=c89 -pedantic-errors -march=k8 -m3dnow -mssse3 -msse4a\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -m3dnow -mssse3 -msse4a\" } */\n \n #include <ammintrin.h>\n #include <tmmintrin.h>"}, {"sha": "4e06514df142a5d01f86aa3da37f2fdefa13d4ba", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32fe15ec71951cb18be7d3f90019147b55b8ee76/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32fe15ec71951cb18be7d3f90019147b55b8ee76/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=32fe15ec71951cb18be7d3f90019147b55b8ee76", "patch": "@@ -9,43 +9,6 @@\n #define static\n #define __inline\n \n-/* Following intrinsics require immediate arguments. */\n-\n-/* ammintrin.h */\n-#define __builtin_ia32_extrqi(X, I, L)  __builtin_ia32_extrqi(X, 1, 1)\n-#define __builtin_ia32_insertqi(X, Y, I, L) __builtin_ia32_insertqi(X, Y, 1, 1)\n-\n-/* tmmintrin.h */\n-#define __builtin_ia32_palignr128(X, Y, N) __builtin_ia32_palignr128(X, Y, 8)\n-#define __builtin_ia32_palignr(X, Y, N) __builtin_ia32_palignr(X, Y, 8)\n-\n-/* emmintrin.h */\n-#define __builtin_ia32_psllwi128(A, B) __builtin_ia32_psllwi128(A, 1)\n-#define __builtin_ia32_psrlqi128(A, B) __builtin_ia32_psrlqi128(A, 1)\n-#define __builtin_ia32_psrlwi128(A, B) __builtin_ia32_psrlwi128(A, 1)\n-#define __builtin_ia32_psrldi128(A, B) __builtin_ia32_psrldi128(A, 1)\n-#define __builtin_ia32_psrldqi128(A, B) __builtin_ia32_psrldqi128(A, 8)\n-#define __builtin_ia32_pslldqi128(A, B) __builtin_ia32_pslldqi128(A, 8)\n-#define __builtin_ia32_psrawi128(A, B) __builtin_ia32_psrawi128(A, 1)\n-#define __builtin_ia32_psradi128(A, B) __builtin_ia32_psradi128(A, 1)\n-#define __builtin_ia32_psllqi128(A, B) __builtin_ia32_psllqi128(A, 1)\n-#define __builtin_ia32_pslldi128(A, B) __builtin_ia32_pslldi128(A, 1)\n-#define __builtin_ia32_pshufhw(A, N) __builtin_ia32_pshufhw(A, 0)\n-#define __builtin_ia32_pshuflw(A, N) __builtin_ia32_pshuflw(A, 0)\n-#define __builtin_ia32_pshufd(A, N) __builtin_ia32_pshufd(A, 0)\n-#define __builtin_ia32_vec_set_v8hi(A, D, N) \\\n-  __builtin_ia32_vec_set_v8hi(A, D, 0)\n-#define __builtin_ia32_vec_ext_v8hi(A, N) __builtin_ia32_vec_ext_v8hi(A, 0)\n-#define __builtin_ia32_shufpd(A, B, N) __builtin_ia32_shufpd(A, B, 0)\n-\n-/* xmmintrin.h */\n-#define __builtin_prefetch(P, A, I) __builtin_prefetch(P, A, _MM_HINT_NTA)\n-#define __builtin_ia32_pshufw(A, N) __builtin_ia32_pshufw(A, 0)\n-#define __builtin_ia32_vec_set_v4hi(A, D, N) \\\n-  __builtin_ia32_vec_set_v4hi(A, D, 0)\n-#define __builtin_ia32_vec_ext_v4hi(A, N) __builtin_ia32_vec_ext_v4hi(A, 0)\n-#define __builtin_ia32_shufps(A, B, N) __builtin_ia32_shufps(A, B, 0)\n-\n #include <ammintrin.h>\n #include <tmmintrin.h>\n "}]}