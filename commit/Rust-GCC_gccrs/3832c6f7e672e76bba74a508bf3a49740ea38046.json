{"sha": "3832c6f7e672e76bba74a508bf3a49740ea38046", "node_id": "C_kwDOANBUbNoAKDM4MzJjNmY3ZTY3MmU3NmJiYTc0YTUwOGJmM2E0OTc0MGVhMzgwNDY", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-11-28T19:43:02Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-11-29T18:11:10Z"}, "message": "Fortran: intrinsic MERGE shall use all its arguments [PR107874]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/107874\n\t* simplify.cc (gfc_simplify_merge): When simplifying MERGE with a\n\tconstant scalar MASK, ensure that arguments TSOURCE and FSOURCE are\n\teither constant or will be evaluated.\n\t* trans-intrinsic.cc (gfc_conv_intrinsic_merge): Evaluate arguments\n\tbefore generating conditional expression.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/107874\n\t* gfortran.dg/merge_init_expr_2.f90: Adjust code to the corrected\n\tsimplification.\n\t* gfortran.dg/merge_1.f90: New test.\n\nCo-authored-by: Steven G. Kargl <kargl@gcc.gnu.org>", "tree": {"sha": "d8f0e191348ffeb1dacfebf2a7a1034f8149ad5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8f0e191348ffeb1dacfebf2a7a1034f8149ad5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3832c6f7e672e76bba74a508bf3a49740ea38046", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3832c6f7e672e76bba74a508bf3a49740ea38046", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3832c6f7e672e76bba74a508bf3a49740ea38046", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3832c6f7e672e76bba74a508bf3a49740ea38046/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cca06f0d6d76b08ed4ddb7667eda93e2e9f2589e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cca06f0d6d76b08ed4ddb7667eda93e2e9f2589e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cca06f0d6d76b08ed4ddb7667eda93e2e9f2589e"}], "stats": {"total": 72, "additions": 70, "deletions": 2}, "files": [{"sha": "b6184181f26a090c4c5a306571f2c6028fd2d39c", "filename": "gcc/fortran/simplify.cc", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3832c6f7e672e76bba74a508bf3a49740ea38046/gcc%2Ffortran%2Fsimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3832c6f7e672e76bba74a508bf3a49740ea38046/gcc%2Ffortran%2Fsimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.cc?ref=3832c6f7e672e76bba74a508bf3a49740ea38046", "patch": "@@ -4913,7 +4913,22 @@ gfc_simplify_merge (gfc_expr *tsource, gfc_expr *fsource, gfc_expr *mask)\n \n   if (mask->expr_type == EXPR_CONSTANT)\n     {\n-      result = gfc_copy_expr (mask->value.logical ? tsource : fsource);\n+      /* The standard requires evaluation of all function arguments.\n+\t Simplify only when the other dropped argument (FSOURCE or TSOURCE)\n+\t is a constant expression.  */\n+      if (mask->value.logical)\n+\t{\n+\t  if (!gfc_is_constant_expr (fsource))\n+\t    return NULL;\n+\t  result = gfc_copy_expr (tsource);\n+\t}\n+      else\n+\t{\n+\t  if (!gfc_is_constant_expr (tsource))\n+\t    return NULL;\n+\t  result = gfc_copy_expr (fsource);\n+\t}\n+\n       /* Parenthesis is needed to get lower bounds of 1.  */\n       result = gfc_get_parentheses (result);\n       gfc_simplify_expr (result, 1);"}, {"sha": "93426981bac6ecdca8381285fe6665524ad00524", "filename": "gcc/fortran/trans-intrinsic.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3832c6f7e672e76bba74a508bf3a49740ea38046/gcc%2Ffortran%2Ftrans-intrinsic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3832c6f7e672e76bba74a508bf3a49740ea38046/gcc%2Ffortran%2Ftrans-intrinsic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.cc?ref=3832c6f7e672e76bba74a508bf3a49740ea38046", "patch": "@@ -7557,6 +7557,9 @@ gfc_conv_intrinsic_merge (gfc_se * se, gfc_expr * expr)\n \t\t\t\t   &se->pre);\n       se->string_length = len;\n     }\n+  tsource = gfc_evaluate_now (tsource, &se->pre);\n+  fsource = gfc_evaluate_now (fsource, &se->pre);\n+  mask = gfc_evaluate_now (mask, &se->pre);\n   type = TREE_TYPE (tsource);\n   se->expr = fold_build3_loc (input_location, COND_EXPR, type, mask, tsource,\n \t\t\t      fold_convert (type, fsource));"}, {"sha": "abbc2276b1c9edfe9ae5f716a838efb8b4288194", "filename": "gcc/testsuite/gfortran.dg/merge_1.f90", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3832c6f7e672e76bba74a508bf3a49740ea38046/gcc%2Ftestsuite%2Fgfortran.dg%2Fmerge_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3832c6f7e672e76bba74a508bf3a49740ea38046/gcc%2Ftestsuite%2Fgfortran.dg%2Fmerge_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmerge_1.f90?ref=3832c6f7e672e76bba74a508bf3a49740ea38046", "patch": "@@ -0,0 +1,49 @@\n+! { dg-do run }\n+! PR fortran/107874 - merge not using all its arguments\n+! Contributed by John Harper\n+\n+program testmerge9\n+  implicit none\n+  integer :: i\n+  logical :: x(2) = (/.true., .false./)\n+  logical :: called(2)\n+\n+  ! At run-time all arguments shall be evaluated\n+  do i = 1,2\n+     called = .false.\n+     print *, merge (tstuff(), fstuff(), x(i))\n+     if (any (.not. called)) stop 1\n+  end do\n+\n+  ! Compile-time simplification shall not drop non-constant args\n+  called = .false.\n+  print *, merge (tstuff(),fstuff(),.true.)\n+  if (any (.not. called)) stop 2\n+  called = .false.\n+  print *, merge (tstuff(),fstuff(),.false.)\n+  if (any (.not. called)) stop 3\n+  called = .false.\n+  print *, merge (tstuff(),.false.,.true.)\n+  if (any (called .neqv. [.true.,.false.])) stop 4\n+  called = .false.\n+  print *, merge (tstuff(),.false.,.false.)\n+  if (any (called .neqv. [.true.,.false.])) stop 5\n+  called = .false.\n+  print *, merge (.true.,fstuff(),.true.)\n+  if (any (called .neqv. [.false.,.true.])) stop 6\n+  called = .false.\n+  print *, merge (.true.,fstuff(),.false.)\n+  if (any (called .neqv. [.false.,.true.])) stop 7\n+contains\n+  logical function tstuff()\n+    print *,'tstuff'\n+    tstuff = .true.\n+    called(1) = .true.\n+  end function tstuff\n+  \n+  logical function fstuff()\n+    print *,'fstuff'\n+    fstuff = .false.\n+    called(2) = .true.\n+  end function fstuff\n+end program testmerge9"}, {"sha": "f4a838011376a37761cc16a1edd6f8f4523d787c", "filename": "gcc/testsuite/gfortran.dg/merge_init_expr_2.f90", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3832c6f7e672e76bba74a508bf3a49740ea38046/gcc%2Ftestsuite%2Fgfortran.dg%2Fmerge_init_expr_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3832c6f7e672e76bba74a508bf3a49740ea38046/gcc%2Ftestsuite%2Fgfortran.dg%2Fmerge_init_expr_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmerge_init_expr_2.f90?ref=3832c6f7e672e76bba74a508bf3a49740ea38046", "patch": "@@ -48,7 +48,8 @@ end module m2\n \n \n subroutine test\n-  character(len=3) :: one, two, three\n+  character(len=3) :: one, three\n+  character(len=3), parameter :: two = \"def\"\n   logical, parameter :: true = .true.\n   three = merge (one, two, true)\n end subroutine test"}]}