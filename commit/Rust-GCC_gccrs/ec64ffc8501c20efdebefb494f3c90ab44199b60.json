{"sha": "ec64ffc8501c20efdebefb494f3c90ab44199b60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM2NGZmYzg1MDFjMjBlZmRlYmVmYjQ5NGYzYzkwYWI0NDE5OWI2MA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-03-14T08:07:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-03-14T08:07:45Z"}, "message": "re PR tree-optimization/84830 (ICE in compute_antic, at tree-ssa-pre.c:2388)\n\n2018-03-14  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/84830\n\t* tree-ssa-pre.c (compute_antic_aux): Intersect the new ANTIC_IN\n\twith the old one to avoid oscillations.\n\n\t* gcc.dg/torture/pr84830.c: New testcase.\n\nFrom-SVN: r258514", "tree": {"sha": "579ef57ef3cf179c52ec685a1460b1bab0a52192", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/579ef57ef3cf179c52ec685a1460b1bab0a52192"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec64ffc8501c20efdebefb494f3c90ab44199b60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec64ffc8501c20efdebefb494f3c90ab44199b60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec64ffc8501c20efdebefb494f3c90ab44199b60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec64ffc8501c20efdebefb494f3c90ab44199b60/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8fef0dc6a9479bdd4f82e52f7b7e1e678a817b75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fef0dc6a9479bdd4f82e52f7b7e1e678a817b75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fef0dc6a9479bdd4f82e52f7b7e1e678a817b75"}], "stats": {"total": 86, "additions": 86, "deletions": 0}, "files": [{"sha": "550e2b6b3e003b9a96109f4c99b7f74d71b0111b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec64ffc8501c20efdebefb494f3c90ab44199b60/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec64ffc8501c20efdebefb494f3c90ab44199b60/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec64ffc8501c20efdebefb494f3c90ab44199b60", "patch": "@@ -1,3 +1,9 @@\n+2018-03-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/84830\n+\t* tree-ssa-pre.c (compute_antic_aux): Intersect the new ANTIC_IN\n+\twith the old one to avoid oscillations.\n+\n 2018-03-13  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR target/83712"}, {"sha": "0175d4342c0a56ae285cd2b2000575400d5e9a9f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec64ffc8501c20efdebefb494f3c90ab44199b60/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec64ffc8501c20efdebefb494f3c90ab44199b60/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ec64ffc8501c20efdebefb494f3c90ab44199b60", "patch": "@@ -1,3 +1,8 @@\n+2018-03-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/84830\n+\t* gcc.dg/torture/pr84830.c: New testcase.\n+\n 2018-03-14  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/84596"}, {"sha": "d076170d2587ab1eae0c13b538376fb9cf055a3a", "filename": "gcc/testsuite/gcc.dg/torture/pr84830.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec64ffc8501c20efdebefb494f3c90ab44199b60/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr84830.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec64ffc8501c20efdebefb494f3c90ab44199b60/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr84830.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr84830.c?ref=ec64ffc8501c20efdebefb494f3c90ab44199b60", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-fno-tree-ch -fno-tree-vrp\" } */\n+\n+int x0;\n+\n+void\n+br (int yp, int oo)\n+{\n+  int *qi = &yp;\n+\n+  if (oo == 0)\n+    {\n+g8:\n+      if (x0 != 0)\n+\tx0 = yp;\n+      else if (oo != 0)\n+\tx0 = yp;\n+\n+      if (x0 == 0)\n+\t{\n+\t  *qi = 0;\n+\t  x0 = *qi;\n+\t}\n+\n+      if (x0 != 0)\n+\t{\n+\t  ++oo;\n+\t  goto g8;\n+\t}\n+\n+      if (yp == oo)\n+\typ += !!oo;\n+    }\n+  else\n+    {\n+      x0 = 1;\n+      while (x0 < 2)\n+\t{\n+\t  qi = &oo;\n+\t  ++oo;\n+\t  x0 = 1;\n+\t}\n+    }\n+\n+  goto g8;\n+}"}, {"sha": "c3d2bbac957840b48f1e17071dfb0206bf69e0c3", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec64ffc8501c20efdebefb494f3c90ab44199b60/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec64ffc8501c20efdebefb494f3c90ab44199b60/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=ec64ffc8501c20efdebefb494f3c90ab44199b60", "patch": "@@ -2154,6 +2154,35 @@ compute_antic_aux (basic_block block, bool block_has_abnormal_pred_edge)\n   /* clean (ANTIC_IN (block)) is defered to after the iteration converged\n      because it can cause non-convergence, see for example PR81181.  */\n \n+  /* Intersect ANTIC_IN with the old ANTIC_IN.  This is required until\n+     we properly represent the maximum expression set, thus not prune\n+     values without expressions during the iteration.  */\n+  if (was_visited\n+      && bitmap_and_into (&ANTIC_IN (block)->values, &old->values))\n+    {\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\tfprintf (dump_file, \"warning: intersecting with old ANTIC_IN \"\n+\t\t \"shrinks the set\\n\");\n+      /* Prune expressions not in the value set.  */\n+      bitmap_iterator bi;\n+      unsigned int i;\n+      unsigned int to_clear = -1U;\n+      FOR_EACH_EXPR_ID_IN_SET (ANTIC_IN (block), i, bi)\n+\t{\n+\t  if (to_clear != -1U)\n+\t    {\n+\t      bitmap_clear_bit (&ANTIC_IN (block)->expressions, to_clear);\n+\t      to_clear = -1U;\n+\t    }\n+\t  pre_expr expr = expression_for_id (i);\n+\t  unsigned int value_id = get_expr_value_id (expr);\n+\t  if (!bitmap_bit_p (&ANTIC_IN (block)->values, value_id))\n+\t    to_clear = i;\n+\t}\n+      if (to_clear != -1U)\n+\tbitmap_clear_bit (&ANTIC_IN (block)->expressions, to_clear);\n+    }\n+\n   if (!bitmap_set_equal (old, ANTIC_IN (block)))\n     {\n       changed = true;"}]}