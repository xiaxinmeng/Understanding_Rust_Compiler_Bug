{"sha": "793c5f05923d8faf0005ae1c100777f46554537a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzkzYzVmMDU5MjNkOGZhZjAwMDVhZTFjMTAwNzc3ZjQ2NTU0NTM3YQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-30T14:00:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-30T14:00:58Z"}, "message": "[multiple changes]\n\n2014-07-30  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_prag.adb, a-tags.ads: Minor typo fixes.\n\n2014-07-30  Bob Duff  <duff@adacore.com>\n\n\t* a-excach.adb, a-excach-cert.adb, a-except-2005.ads,\n\ta-except.ads, g-traceb.adb, memtrack.adb,\n\ts-traceb.adb, s-traceb.ads, s-traceb-hpux.adb, s-traceb-mastop.adb:\n\tCleanup: Make the three versions of System.Traceback.Call_Chain\n\thave the same interface. Use an array for the Traceback parameter\n\tinstead of an Address.\tThis will enable reduction in code\n\tduplication.\n\n2014-07-30  Pat Rogers  <rogers@adacore.com>\n\n\t* gnat_ugn.texi: Corrected minor textual error in description\n\tof switch -gnatwl.\n\n2014-07-30  Bob Duff  <duff@adacore.com>\n\n\t* Makefile.rtl: Sort file names.\n\n2014-07-30  Arnaud Charlet  <charlet@adacore.com>\n\n\t* a-tasatt.adb: Complete previous change: kill spurious warning\n\ton e.g. sparc, and make sure we only use the fast path when the\n\talignment is compatible.\n\n2014-07-30  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Mark new Spec_Id as\n\tcoming from source.\n\nFrom-SVN: r213275", "tree": {"sha": "a3f2016778871d215060872a24102803c270ac8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3f2016778871d215060872a24102803c270ac8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/793c5f05923d8faf0005ae1c100777f46554537a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/793c5f05923d8faf0005ae1c100777f46554537a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/793c5f05923d8faf0005ae1c100777f46554537a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/793c5f05923d8faf0005ae1c100777f46554537a/comments", "author": null, "committer": null, "parents": [{"sha": "1eb31e605ff6ffb4332e8681ee086f5a4ea1bea9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eb31e605ff6ffb4332e8681ee086f5a4ea1bea9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1eb31e605ff6ffb4332e8681ee086f5a4ea1bea9"}], "stats": {"total": 194, "additions": 156, "deletions": 38}, "files": [{"sha": "3ca141da0006262a7de7254a203bd5fc5e179d3e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=793c5f05923d8faf0005ae1c100777f46554537a", "patch": "@@ -1,3 +1,37 @@\n+2014-07-30  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_prag.adb, a-tags.ads: Minor typo fixes.\n+\n+2014-07-30  Bob Duff  <duff@adacore.com>\n+\n+\t* a-excach.adb, a-excach-cert.adb, a-except-2005.ads,\n+\ta-except.ads, g-traceb.adb, memtrack.adb,\n+\ts-traceb.adb, s-traceb.ads, s-traceb-hpux.adb, s-traceb-mastop.adb:\n+\tCleanup: Make the three versions of System.Traceback.Call_Chain\n+\thave the same interface. Use an array for the Traceback parameter\n+\tinstead of an Address.\tThis will enable reduction in code\n+\tduplication.\n+\n+2014-07-30  Pat Rogers  <rogers@adacore.com>\n+\n+\t* gnat_ugn.texi: Corrected minor textual error in description\n+\tof switch -gnatwl.\n+\n+2014-07-30  Bob Duff  <duff@adacore.com>\n+\n+\t* Makefile.rtl: Sort file names.\n+\n+2014-07-30  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* a-tasatt.adb: Complete previous change: kill spurious warning\n+\ton e.g. sparc, and make sure we only use the fast path when the\n+\talignment is compatible.\n+\n+2014-07-30  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Mark new Spec_Id as\n+\tcoming from source.\n+\n 2014-07-30  Yannick Moy  <moy@adacore.com>\n \n \t* inline.adb (Build_Body_To_Inline): Issue more precise messages"}, {"sha": "98b74290881b7d2c16bb55ae5a3888f1850ff657", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=793c5f05923d8faf0005ae1c100777f46554537a", "patch": "@@ -99,12 +99,12 @@ GNATRTL_NONTASKING_OBJS= \\\n   a-calend$(objext) \\\n   a-calfor$(objext) \\\n   a-catizo$(objext) \\\n+  a-cbdlli$(objext) \\\n   a-cbhama$(objext) \\\n   a-cbhase$(objext) \\\n-  a-cborse$(objext) \\\n-  a-cbdlli$(objext) \\\n   a-cbmutr$(objext) \\\n   a-cborma$(objext) \\\n+  a-cborse$(objext) \\\n   a-cbprqu$(objext) \\\n   a-cbsyqu$(objext) \\\n   a-cdlili$(objext) \\\n@@ -121,19 +121,22 @@ GNATRTL_NONTASKING_OBJS= \\\n   a-charac$(objext) \\\n   a-chlat1$(objext) \\\n   a-chlat9$(objext) \\\n-  a-chtgbo$(objext) \\\n   a-chtgbk$(objext) \\\n+  a-chtgbo$(objext) \\\n   a-chtgke$(objext) \\\n   a-chtgop$(objext) \\\n   a-chzla1$(objext) \\\n   a-chzla9$(objext) \\\n   a-cidlli$(objext) \\\n   a-cihama$(objext) \\\n   a-cihase$(objext) \\\n+  a-cimutr$(objext) \\\n   a-ciorma$(objext) \\\n   a-ciormu$(objext) \\\n   a-ciorse$(objext) \\\n   a-clrefi$(objext) \\\n+  a-cobove$(objext) \\\n+  a-cofove$(objext) \\\n   a-cogeso$(objext) \\\n   a-cohama$(objext) \\\n   a-cohase$(objext) \\\n@@ -143,10 +146,9 @@ GNATRTL_NONTASKING_OBJS= \\\n   a-colien$(objext) \\\n   a-colire$(objext) \\\n   a-comlin$(objext) \\\n+  a-comutr$(objext) \\\n   a-contai$(objext) \\\n   a-convec$(objext) \\\n-  a-cobove$(objext) \\\n-  a-cofove$(objext) \\\n   a-coorma$(objext) \\\n   a-coormu$(objext) \\\n   a-coorse$(objext) \\\n@@ -156,8 +158,6 @@ GNATRTL_NONTASKING_OBJS= \\\n   a-crbtgk$(objext) \\\n   a-crbtgo$(objext) \\\n   a-crdlli$(objext) \\\n-  a-comutr$(objext) \\\n-  a-cimutr$(objext) \\\n   a-csquin$(objext) \\\n   a-cuprqu$(objext) \\\n   a-cusyqu$(objext) \\\n@@ -207,12 +207,12 @@ GNATRTL_NONTASKING_OBJS= \\\n   a-nlcoar$(objext) \\\n   a-nlcoty$(objext) \\\n   a-nlelfu$(objext) \\\n-  a-nlrear$(objext) \\\n   a-nllcar$(objext) \\\n   a-nllcef$(objext) \\\n   a-nllcty$(objext) \\\n   a-nllefu$(objext) \\\n   a-nllrar$(objext) \\\n+  a-nlrear$(objext) \\\n   a-nscefu$(objext) \\\n   a-nscoty$(objext) \\\n   a-nselfu$(objext) \\\n@@ -224,8 +224,8 @@ GNATRTL_NONTASKING_OBJS= \\\n   a-numaux$(objext) \\\n   a-numeri$(objext) \\\n   a-nurear$(objext) \\\n-  a-rbtgbo$(objext) \\\n   a-rbtgbk$(objext) \\\n+  a-rbtgbo$(objext) \\\n   a-rbtgso$(objext) \\\n   a-sbecin$(objext) \\\n   a-sbhcin$(objext) \\\n@@ -511,8 +511,8 @@ GNATRTL_NONTASKING_OBJS= \\\n   s-crc32$(objext)  \\\n   s-crtl$(objext)   \\\n   s-diflio$(objext) \\\n-  s-dim$(objext)    \\\n   s-diinio$(objext) \\\n+  s-dim$(objext)    \\\n   s-dimkio$(objext) \\\n   s-dimmks$(objext) \\\n   s-direio$(objext) \\"}, {"sha": "b1cc22b94bf132e5fe2dedd30e900dc2380c5100", "filename": "gcc/ada/a-excach.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2Fa-excach.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2Fa-excach.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-excach.adb?ref=793c5f05923d8faf0005ae1c100777f46554537a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -63,7 +63,7 @@ begin\n       --  outside the AAA/ZZZ range.\n \n       System.Traceback.Call_Chain\n-        (Traceback   => Excep.Tracebacks'Address,\n+        (Traceback   => Excep.Tracebacks,\n          Max_Len     => Max_Tracebacks,\n          Len         => Excep.Num_Tracebacks,\n          Exclude_Min => Code_Address_For_AAA,"}, {"sha": "7bf20dc32f39f07a3c0b28fc11426456c73ce7b0", "filename": "gcc/ada/a-except-2005.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2Fa-except-2005.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2Fa-except-2005.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.ads?ref=793c5f05923d8faf0005ae1c100777f46554537a", "patch": "@@ -291,7 +291,7 @@ private\n    Max_Tracebacks : constant := 50;\n    --  Maximum number of trace backs stored in exception occurrence\n \n-   type Tracebacks_Array is array (1 .. Max_Tracebacks) of TBE.Traceback_Entry;\n+   subtype Tracebacks_Array is TBE.Tracebacks_Array (1 .. Max_Tracebacks);\n    --  Traceback array stored in exception occurrence\n \n    type Exception_Occurrence is record"}, {"sha": "183bd58ba37777cb092ae705d02c976127951b19", "filename": "gcc/ada/a-except.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2Fa-except.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2Fa-except.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except.ads?ref=793c5f05923d8faf0005ae1c100777f46554537a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -265,7 +265,7 @@ private\n    Max_Tracebacks : constant := 50;\n    --  Maximum number of trace backs stored in exception occurrence\n \n-   type Tracebacks_Array is array (1 .. Max_Tracebacks) of TBE.Traceback_Entry;\n+   subtype Tracebacks_Array is TBE.Tracebacks_Array (1 .. Max_Tracebacks);\n    --  Traceback array stored in exception occurrence\n \n    type Exception_Occurrence is record"}, {"sha": "53a541b3b787c22bd6e19997b06f0c75c740e245", "filename": "gcc/ada/a-tags.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2Fa-tags.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2Fa-tags.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tags.ads?ref=793c5f05923d8faf0005ae1c100777f46554537a", "patch": "@@ -49,12 +49,12 @@\n --    Descendant_Tag (when used with a library-level tagged type),\n --    Internal_Tag (when used with a library-level tagged type).\n \n---  The following subprograms of the public part of this package take non\n---  constant time (in terms of sources line executed):\n+--  The following subprograms of the public part of this package execute in\n+--  time that is not constant (in terms of sources line executed):\n \n --    Internal_Tag (when used with a locally defined tagged type), because in\n---    such case this routine processes the external tag, extract from it an\n---    address available there, and convert it into the tag value returned by\n+--    such cases this routine processes the external tag, extracts from it an\n+--    address available there, and converts it into the tag value returned by\n --    this function. The number of instructions executed is not constant since\n --    it depends on the length of the external tag string.\n "}, {"sha": "6e35d2668fda6ec48a1ea1e89d6825719016f448", "filename": "gcc/ada/a-tasatt.adb", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2Fa-tasatt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2Fa-tasatt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tasatt.adb?ref=793c5f05923d8faf0005ae1c100777f46554537a", "patch": "@@ -115,11 +115,13 @@ package body Ada.Task_Attributes is\n \n    Fast_Path : constant Boolean :=\n                  Attribute'Size <= Atomic_Address'Size\n+                   and then Attribute'Alignment <= Atomic_Address'Alignment\n                    and then To_Address (Initial_Value) = 0;\n-   --  If the attribute fits in an Atomic_Address and Initial_Value is 0 (or\n-   --  null), then we will map the attribute directly into\n-   --  ATCB.Attributes (Index), otherwise we will create a level of indirection\n-   --  and instead use Attributes (Index) as a Real_Attribute_Access.\n+   --  If the attribute fits in an Atomic_Address (both size and alignment)\n+   --  and Initial_Value is 0 (or null), then we will map the attribute\n+   --  directly into ATCB.Attributes (Index), otherwise we will create a level\n+   --  of indirection and instead use Attributes (Index) as a\n+   --  Real_Attribute_Access.\n \n    Index : constant Integer :=\n              Next_Index (Require_Finalization => not Fast_Path);\n@@ -203,7 +205,11 @@ package body Ada.Task_Attributes is\n       end if;\n \n       if Fast_Path then\n+         --  Kill warning about possible alignment mismatch. If this happens,\n+         --  Fast_Path will be False anyway\n+         pragma Warnings (Off);\n          return To_Handle (TT.Attributes (Index)'Address);\n+         pragma Warnings (On);\n       else\n          Self_Id := STPO.Self;\n          Task_Lock (Self_Id);"}, {"sha": "417a76d2d07d65bfc531b2488748176917559087", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=793c5f05923d8faf0005ae1c100777f46554537a", "patch": "@@ -441,7 +441,7 @@ package body Exp_Prag is\n                --  Generate a temporary to capture the value of the prefix:\n                --    Temp : <Pref type>;\n                --  Place that temporary at the beginning of declarations, to\n-               --  prevent anomolies in the GNATprove flow analysis pass in\n+               --  prevent anomalies in the GNATprove flow-analysis pass in\n                --  the precondition procedure that follows.\n \n                Decl :="}, {"sha": "157d8b620cd2637de49333131b3982ad56241e6a", "filename": "gcc/ada/g-traceb.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2Fg-traceb.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2Fg-traceb.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-traceb.adb?ref=793c5f05923d8faf0005ae1c100777f46554537a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                      Copyright (C) 1999-2010, AdaCore                    --\n+--                      Copyright (C) 1999-2014, AdaCore                    --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -44,7 +44,7 @@ package body GNAT.Traceback is\n       Len       : out Natural)\n    is\n    begin\n-      System.Traceback.Call_Chain (Traceback'Address, Traceback'Length, Len);\n+      System.Traceback.Call_Chain (Traceback, Traceback'Length, Len);\n    end Call_Chain;\n \n end GNAT.Traceback;"}, {"sha": "bd8be5590617ac5a182004b57bfdcf94327d8900", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=793c5f05923d8faf0005ae1c100777f46554537a", "patch": "@@ -5424,8 +5424,8 @@ is defined in package Standard.\n @emph{Activate warnings for elaboration pragmas.}\n @cindex @option{-gnatwl} (@command{gcc})\n @cindex Elaboration, warnings\n-This switch activates warnings on missing\n-for possible elaboration problems, including suspicious use\n+This switch activates warnings for possible elaboration problems,\n+including suspicious use\n of @code{Elaborate} pragmas, when using the static elaboration model, and\n possible situations that may raise @code{Program_Error} when using the\n dynamic elaboration model."}, {"sha": "be510f590291b58ecdfb85ee9797610d63c026fb", "filename": "gcc/ada/memtrack.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2Fmemtrack.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2Fmemtrack.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmemtrack.adb?ref=793c5f05923d8faf0005ae1c100777f46554537a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -132,7 +132,7 @@ package body System.Memory is\n    Max_Call_Stack : constant := 200;\n    --  Maximum number of frames supported\n \n-   Tracebk   : aliased array (0 .. Max_Call_Stack) of Traceback_Entry;\n+   Tracebk   : Tracebacks_Array (1 .. Max_Call_Stack);\n    Num_Calls : aliased Integer := 0;\n \n    Gmemfname : constant String := \"gmem.out\" & ASCII.NUL;\n@@ -196,7 +196,7 @@ package body System.Memory is\n          end if;\n \n          Timestamp := System.OS_Primitives.Clock;\n-         Call_Chain (Tracebk'Address, Max_Call_Stack, Num_Calls,\n+         Call_Chain (Tracebk, Max_Call_Stack, Num_Calls,\n                      Skip_Frames => 2);\n          fputc (Character'Pos ('A'), Gmemfile);\n          fwrite (Result'Address, Address_Size, 1, Gmemfile);\n@@ -262,7 +262,7 @@ package body System.Memory is\n             Gmem_Initialize;\n          end if;\n \n-         Call_Chain (Tracebk'Address, Max_Call_Stack, Num_Calls,\n+         Call_Chain (Tracebk, Max_Call_Stack, Num_Calls,\n                      Skip_Frames => 2);\n          Timestamp := System.OS_Primitives.Clock;\n          fputc (Character'Pos ('D'), Gmemfile);\n@@ -345,7 +345,7 @@ package body System.Memory is\n          if Needs_Init then\n             Gmem_Initialize;\n          end if;\n-         Call_Chain (Tracebk'Address, Max_Call_Stack, Num_Calls,\n+         Call_Chain (Tracebk, Max_Call_Stack, Num_Calls,\n                      Skip_Frames => 2);\n          Timestamp := System.OS_Primitives.Clock;\n          fputc (Character'Pos ('D'), Gmemfile);"}, {"sha": "92e36ca06d6a96f8b8af9a34ab0c80891747ce8d", "filename": "gcc/ada/s-traceb-hpux.adb", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2Fs-traceb-hpux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2Fs-traceb-hpux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-traceb-hpux.adb?ref=793c5f05923d8faf0005ae1c100777f46554537a", "patch": "@@ -7,7 +7,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---           Copyright (C) 2009-2011, Free Software Foundation, Inc.        --\n+--           Copyright (C) 2009-2014, Free Software Foundation, Inc.        --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -262,6 +262,15 @@ package body System.Traceback is\n    --  but it is not usable when frames with dynamically allocated space are\n    --  on the way.\n \n+   procedure Call_Chain\n+     (Traceback   : System.Address;\n+      Max_Len     : Natural;\n+      Len         : out Natural;\n+      Exclude_Min : System.Address := System.Null_Address;\n+      Exclude_Max : System.Address := System.Null_Address;\n+      Skip_Frames : Natural := 1);\n+   --  Same as the exported version, but takes Traceback as an Address\n+\n    ------------------\n    -- C_Call_Chain --\n    ------------------\n@@ -598,4 +607,18 @@ package body System.Traceback is\n       Len := J - 1;\n    end Call_Chain;\n \n+   procedure Call_Chain\n+     (Traceback   : in out System.Traceback_Entries.Tracebacks_Array;\n+      Max_Len     : Natural;\n+      Len         : out Natural;\n+      Exclude_Min : System.Address := System.Null_Address;\n+      Exclude_Max : System.Address := System.Null_Address;\n+      Skip_Frames : Natural := 1)\n+   is\n+   begin\n+      Call_Chain\n+        (Traceback'Address, Max_Len, Len,\n+         Exclude_Min, Exclude_Max, Skip_Frames);\n+   end Call_Chain;\n+\n end System.Traceback;"}, {"sha": "f7da8070e77312650162648961b2a20a19f42524", "filename": "gcc/ada/s-traceb-mastop.adb", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2Fs-traceb-mastop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2Fs-traceb-mastop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-traceb-mastop.adb?ref=793c5f05923d8faf0005ae1c100777f46554537a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 1999-2010, AdaCore                     --\n+--                     Copyright (C) 1999-2014, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,6 +37,15 @@ package body System.Traceback is\n \n    use System.Machine_State_Operations;\n \n+   procedure Call_Chain\n+     (Traceback   : System.Address;\n+      Max_Len     : Natural;\n+      Len         : out Natural;\n+      Exclude_Min : System.Address := System.Null_Address;\n+      Exclude_Max : System.Address := System.Null_Address;\n+      Skip_Frames : Natural := 1);\n+   --  Same as the exported version, but takes Traceback as an Address\n+\n    ----------------\n    -- Call_Chain --\n    ----------------\n@@ -93,6 +102,20 @@ package body System.Traceback is\n       Free_Machine_State (M);\n    end Call_Chain;\n \n+   procedure Call_Chain\n+     (Traceback   : in out System.Traceback_Entries.Tracebacks_Array;\n+      Max_Len     : Natural;\n+      Len         : out Natural;\n+      Exclude_Min : System.Address := System.Null_Address;\n+      Exclude_Max : System.Address := System.Null_Address;\n+      Skip_Frames : Natural := 1)\n+   is\n+   begin\n+      Call_Chain\n+        (Traceback'Address, Max_Len, Len,\n+         Exclude_Min, Exclude_Max, Skip_Frames);\n+   end Call_Chain;\n+\n    ------------------\n    -- C_Call_Chain --\n    ------------------"}, {"sha": "0c55cfc6b5a1df982a3b1bdabc639b875567dbcc", "filename": "gcc/ada/s-traceb.adb", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2Fs-traceb.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2Fs-traceb.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-traceb.adb?ref=793c5f05923d8faf0005ae1c100777f46554537a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1999-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,6 +38,15 @@ pragma Compiler_Unit_Warning;\n \n package body System.Traceback is\n \n+   procedure Call_Chain\n+     (Traceback   : System.Address;\n+      Max_Len     : Natural;\n+      Len         : out Natural;\n+      Exclude_Min : System.Address := System.Null_Address;\n+      Exclude_Max : System.Address := System.Null_Address;\n+      Skip_Frames : Natural := 1);\n+   --  Same as the exported version, but takes Traceback as an Address\n+\n    ------------------\n    -- C_Call_Chain --\n    ------------------\n@@ -90,4 +99,18 @@ package body System.Traceback is\n                         Skip_Frames => Skip_Frames + 1);\n    end Call_Chain;\n \n+   procedure Call_Chain\n+     (Traceback   : in out System.Traceback_Entries.Tracebacks_Array;\n+      Max_Len     : Natural;\n+      Len         : out Natural;\n+      Exclude_Min : System.Address := System.Null_Address;\n+      Exclude_Max : System.Address := System.Null_Address;\n+      Skip_Frames : Natural := 1)\n+   is\n+   begin\n+      Call_Chain\n+        (Traceback'Address, Max_Len, Len,\n+         Exclude_Min, Exclude_Max, Skip_Frames);\n+   end Call_Chain;\n+\n end System.Traceback;"}, {"sha": "b14926817bde8bd72b2ada34687aa7bce436a473", "filename": "gcc/ada/s-traceb.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2Fs-traceb.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2Fs-traceb.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-traceb.ads?ref=793c5f05923d8faf0005ae1c100777f46554537a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1999-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,14 +39,16 @@ pragma Polling (Off);\n --  We must turn polling off for this unit, because otherwise we get\n --  elaboration circularities with System.Exception_Tables.\n \n+with System.Traceback_Entries;\n+\n package System.Traceback is\n \n    ----------------\n    -- Call_Chain --\n    ----------------\n \n    procedure Call_Chain\n-     (Traceback   : System.Address;\n+     (Traceback   : in out System.Traceback_Entries.Tracebacks_Array;\n       Max_Len     : Natural;\n       Len         : out Natural;\n       Exclude_Min : System.Address := System.Null_Address;"}, {"sha": "a5dda115f7ec0325ea80a8f00da5c023fa3f3f74", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793c5f05923d8faf0005ae1c100777f46554537a/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=793c5f05923d8faf0005ae1c100777f46554537a", "patch": "@@ -3104,6 +3104,13 @@ package body Sem_Ch6 is\n \n                      Spec_Id := Defining_Entity (New_Decl);\n \n+                     --  As Body_Id originally comes from source, mark the new\n+                     --  Spec_Id as such, which is required so that calls to\n+                     --  this subprogram are registered in the local effects\n+                     --  stored in ALI files for GNATprove.\n+\n+                     Set_Comes_From_Source (Spec_Id, True);\n+\n                      --  If aspect SPARK_Mode was specified on the body, it\n                      --  needs to be repeated on the generated decl and the\n                      --  body. Since the original aspect was moved to the"}]}