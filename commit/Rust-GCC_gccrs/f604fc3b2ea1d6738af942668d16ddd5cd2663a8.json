{"sha": "f604fc3b2ea1d6738af942668d16ddd5cd2663a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYwNGZjM2IyZWExZDY3MzhhZjk0MjY2OGQxNmRkZDVjZDI2NjNhOA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2006-07-19T00:22:43Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-07-19T00:22:43Z"}, "message": "re PR c++/28235 (ICE with static const member as default parameter in template)\n\n\tPR c++/28235\n\t* pt.c (tsubst_decl): Handling substitutions into a static data\n\tmember from within the scope of the tempalte itself.\n\tPR c++/28235\n\t* g++.dg/template/static27.C: New test.\n\nFrom-SVN: r115576", "tree": {"sha": "4c3e45cb6e2a2a0cf8fae4bbd9efde2d779c5dae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c3e45cb6e2a2a0cf8fae4bbd9efde2d779c5dae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f604fc3b2ea1d6738af942668d16ddd5cd2663a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f604fc3b2ea1d6738af942668d16ddd5cd2663a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f604fc3b2ea1d6738af942668d16ddd5cd2663a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f604fc3b2ea1d6738af942668d16ddd5cd2663a8/comments", "author": null, "committer": null, "parents": [{"sha": "437a9eba689bd253b51a8f4ac46b01b063835084", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/437a9eba689bd253b51a8f4ac46b01b063835084", "html_url": "https://github.com/Rust-GCC/gccrs/commit/437a9eba689bd253b51a8f4ac46b01b063835084"}], "stats": {"total": 94, "additions": 71, "deletions": 23}, "files": [{"sha": "2f22450fb82b6a53c30bedb79065db37422741c0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f604fc3b2ea1d6738af942668d16ddd5cd2663a8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f604fc3b2ea1d6738af942668d16ddd5cd2663a8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f604fc3b2ea1d6738af942668d16ddd5cd2663a8", "patch": "@@ -1,3 +1,9 @@\n+2006-07-18  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/28235\n+\t* pt.c (tsubst_decl): Handling substitutions into a static data\n+\tmember from within the scope of the tempalte itself.\n+\n 2006-07-18  Lee Millward  <lee.millward@gmail.com>\n \n \tPR c++/28258"}, {"sha": "7c099644d35a1f1689c5113dd08483324a8ffc95", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 47, "deletions": 23, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f604fc3b2ea1d6738af942668d16ddd5cd2663a8/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f604fc3b2ea1d6738af942668d16ddd5cd2663a8/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f604fc3b2ea1d6738af942668d16ddd5cd2663a8", "patch": "@@ -6673,7 +6673,7 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \ttree tmpl = NULL_TREE;\n \ttree ctx;\n \ttree type = NULL_TREE;\n-\tint local_p;\n+\tbool local_p;\n \n \tif (TREE_CODE (t) == TYPE_DECL)\n \t  {\n@@ -6691,40 +6691,64 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t      }\n \t  }\n \n-\t/* Assume this is a non-local variable.  */\n-\tlocal_p = 0;\n+\t/* Check to see if we already have the specialization we\n+\t   need.  */\n+\tspec = NULL_TREE;\n+\tif (DECL_CLASS_SCOPE_P (t) || DECL_NAMESPACE_SCOPE_P (t))\n+\t  {\n+\t    /* T is a static data member or namespace-scope entity.\n+\t       We have to substitute into namespace-scope variables\n+\t       (even though such entities are never templates) because\n+\t       of cases like:\n+\t       \n+\t         template <class T> void f() { extern T t; }\n+\n+\t       where the entity referenced is not known until\n+\t       instantiation time.  */\n+\t    local_p = false;\n+\t    ctx = DECL_CONTEXT (t);\n+\t    if (DECL_CLASS_SCOPE_P (t))\n+\t      {\n+\t\tctx = tsubst_aggr_type (ctx, args,\n+\t\t\t\t\tcomplain,\n+\t\t\t\t\tin_decl, /*entering_scope=*/1);\n+\t\t/* If CTX is unchanged, then T is in fact the\n+\t\t   specialization we want.  That situation occurs when\n+\t\t   referencing a static data member within in its own\n+\t\t   class.  We can use pointer equality, rather than\n+\t\t   same_type_p, because DECL_CONTEXT is always\n+\t\t   canonical.  */\n+\t\tif (ctx == DECL_CONTEXT (t))\n+\t\t  spec = t;\n+\t      }\n \n-\tif (TYPE_P (CP_DECL_CONTEXT (t)))\n-\t  ctx = tsubst_aggr_type (DECL_CONTEXT (t), args,\n-\t\t\t\t  complain,\n-\t\t\t\t  in_decl, /*entering_scope=*/1);\n-\telse if (DECL_NAMESPACE_SCOPE_P (t))\n-\t  ctx = DECL_CONTEXT (t);\n+\t    if (!spec)\n+\t      {\n+\t\ttmpl = DECL_TI_TEMPLATE (t);\n+\t\tgen_tmpl = most_general_template (tmpl);\n+\t\targvec = tsubst (DECL_TI_ARGS (t), args, complain, in_decl);\n+\t\tspec = (retrieve_specialization \n+\t\t\t(gen_tmpl, argvec,\n+\t\t\t /*class_specializations_p=*/false));\n+\t      }\n+\t  }\n \telse\n \t  {\n+\t    /* A local variable.  */\n+\t    local_p = true;\n \t    /* Subsequent calls to pushdecl will fill this in.  */\n \t    ctx = NULL_TREE;\n-\t    local_p = 1;\n+\t    spec = retrieve_local_specialization (t);\n \t  }\n-\n-\t/* Check to see if we already have this specialization.  */\n-\tif (!local_p)\n-\t  {\n-\t    tmpl = DECL_TI_TEMPLATE (t);\n-\t    gen_tmpl = most_general_template (tmpl);\n-\t    argvec = tsubst (DECL_TI_ARGS (t), args, complain, in_decl);\n-\t    spec = retrieve_specialization (gen_tmpl, argvec,\n-\t\t\t\t\t    /*class_specializations_p=*/false);\n-\t  }\n-\telse\n-\t  spec = retrieve_local_specialization (t);\n-\n+\t/* If we already have the specialization we need, there is\n+\t   nothing more to do.  */ \n \tif (spec)\n \t  {\n \t    r = spec;\n \t    break;\n \t  }\n \n+\t/* Create a new node for the specialization we need.  */\n \tr = copy_decl (t);\n \tif (TREE_CODE (r) == VAR_DECL)\n \t  {"}, {"sha": "604b6cdb06d95cf1459d9575dc0c73ef4f013730", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f604fc3b2ea1d6738af942668d16ddd5cd2663a8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f604fc3b2ea1d6738af942668d16ddd5cd2663a8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f604fc3b2ea1d6738af942668d16ddd5cd2663a8", "patch": "@@ -1,3 +1,8 @@\n+2006-07-18  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/28235\n+\t* g++.dg/template/static27.C: New test.\n+\n 2006-07-18  Diego Novillo  <dnovillo@redhat.com>\n \n \tPR 28410"}, {"sha": "0b63967e35214bd4d1f358509ccd1790488d83db", "filename": "gcc/testsuite/g++.dg/template/static27.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f604fc3b2ea1d6738af942668d16ddd5cd2663a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f604fc3b2ea1d6738af942668d16ddd5cd2663a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic27.C?ref=f604fc3b2ea1d6738af942668d16ddd5cd2663a8", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/28235\n+\n+template<typename> struct A\n+{\n+  static const bool i = true;\n+  template<bool = i> struct B {};\n+  B<> b;\n+};\n+\n+void f() {\n+  A<int> a1, a2;\n+  a1.b = a2.b;\n+}"}]}