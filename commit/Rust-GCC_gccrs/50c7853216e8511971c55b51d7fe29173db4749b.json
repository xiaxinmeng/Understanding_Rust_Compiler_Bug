{"sha": "50c7853216e8511971c55b51d7fe29173db4749b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBjNzg1MzIxNmU4NTExOTcxYzU1YjUxZDdmZTI5MTczZGI0NzQ5Yg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-04-07T18:29:41Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-04-07T18:30:10Z"}, "message": "libgcc: use syscall rather than __mmap/__munmap\n\n\tPR libgcc/94513\n\t* generic-morestack.c: Give up trying to use __mmap/__munmap, use\n\tsyscall instead.", "tree": {"sha": "7e200c42bded18d4077ae846817e390ae31735e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e200c42bded18d4077ae846817e390ae31735e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50c7853216e8511971c55b51d7fe29173db4749b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50c7853216e8511971c55b51d7fe29173db4749b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50c7853216e8511971c55b51d7fe29173db4749b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50c7853216e8511971c55b51d7fe29173db4749b/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d947f1f27188e3a61ba7f42399b1c348469fe13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d947f1f27188e3a61ba7f42399b1c348469fe13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d947f1f27188e3a61ba7f42399b1c348469fe13"}], "stats": {"total": 61, "additions": 53, "deletions": 8}, "files": [{"sha": "6340cfbbf5905257ae249bc9e11b98016178816c", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c7853216e8511971c55b51d7fe29173db4749b/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c7853216e8511971c55b51d7fe29173db4749b/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=50c7853216e8511971c55b51d7fe29173db4749b", "patch": "@@ -1,3 +1,9 @@\n+2020-04-07  Ian Lance Taylor  <iant@golang.org>\n+\n+\tPR libgcc/94513\n+\t* generic-morestack.c: Give up trying to use __mmap/__munmap, use\n+\tsyscall instead.\n+\n 2020-04-04  Ian Lance Taylor  <iant@golang.org>\n \n \t* generic-morestack.c: Only use __mmap on glibc >= 2.26."}, {"sha": "35764a848f6e9c26e9ce762733b0a6ea146a0e52", "filename": "libgcc/generic-morestack.c", "status": "modified", "additions": 47, "deletions": 8, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c7853216e8511971c55b51d7fe29173db4749b/libgcc%2Fgeneric-morestack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c7853216e8511971c55b51d7fe29173db4749b/libgcc%2Fgeneric-morestack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fgeneric-morestack.c?ref=50c7853216e8511971c55b51d7fe29173db4749b", "patch": "@@ -56,17 +56,56 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n /* Some systems use LD_PRELOAD or similar tricks to add hooks to\n    mmap/munmap.  That breaks this code, because when we call mmap\n    there is enough stack space for the system call but there is not,\n-   in general, enough stack space to run a hook.  At least when using\n-   glibc on GNU/Linux we can avoid the problem by calling __mmap and\n-   __munmap.  */\n+   in general, enough stack space to run a hook.  Try to avoid the\n+   problem by calling syscall directly.  We only do this on GNU/Linux\n+   for now, but it should be easy to add support for more systems with\n+   testing.  */\n \n-#if defined(__gnu_linux__) && (__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 26))\n+#if defined(__gnu_linux__)\n \n-extern void *__mmap (void *, size_t, int, int, int, off_t);\n-extern int __munmap (void *, size_t);\n+#include <sys/syscall.h>\n \n-#define mmap __mmap\n-#define munmap __munmap\n+#if defined(SYS_mmap) || defined(SYS_mmap2)\n+\n+#ifdef SYS_mmap2\n+#define MORESTACK_MMAP SYS_mmap2\n+#define MORESTACK_ADJUST_OFFSET(x) ((x) / 4096ULL)\n+#else\n+#define MORESTACK_MMAP SYS_mmap\n+#define MORESTACK_ADJUST_OFFSET(x) (x)\n+#endif\n+\n+static void *\n+morestack_mmap (void *addr, size_t length, int prot, int flags, int fd,\n+\t\toff_t offset)\n+{\n+  offset = MORESTACK_ADJUST_OFFSET (offset);\n+\n+#ifdef __s390__\n+  long args[6] = { (long) addr, (long) length, (long) prot, (long) flags,\n+\t\t   (long) fd, (long) offset };\n+  return (void *) syscall (MORESTACK_MMAP, args);\n+#else\n+  return (void *) syscall (MORESTACK_MMAP, addr, length, prot, flags, fd,\n+\t\t\t   offset);\n+#endif\n+}\n+\n+#define mmap morestack_mmap\n+\n+#endif /* defined(SYS_MMAP) || defined(SYS_mmap2) */\n+\n+#if defined(SYS_munmap)\n+\n+static int\n+morestack_munmap (void * addr, size_t length)\n+{\n+  return (int) syscall (SYS_munmap, addr, length);\n+}\n+\n+#define munmap morestack_munmap\n+\n+#endif /* defined(SYS_munmap) */\n \n #endif /* defined(__gnu_linux__) */\n "}]}