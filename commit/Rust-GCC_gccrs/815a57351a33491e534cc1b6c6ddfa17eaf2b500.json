{"sha": "815a57351a33491e534cc1b6c6ddfa17eaf2b500", "node_id": "C_kwDOANBUbNoAKDgxNWE1NzM1MWEzMzQ5MWU1MzRjYzFiNmM2ZGRmYTE3ZWFmMmI1MDA", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-11-15T11:01:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-15T11:01:12Z"}, "message": "Merge #1631\n\n1631: Ast dump where clause r=CohenArthur a=jdupak\n\nAdds dump of the where clause and recursively needed nodes.\r\nAdds visitor compatibility layer for general references except for unique pointers - needed for lifetimes. The enable is necessary to coexist with the unique_ptr overload.\r\n\r\nDepends on #1624 and will be rebased when it is merged. \n\nCo-authored-by: Jakub Dupak <dev@jakubdupak.com>", "tree": {"sha": "292bb3744e1908b39e0bfbfdb1e54aab3e2d2760", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/292bb3744e1908b39e0bfbfdb1e54aab3e2d2760"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/815a57351a33491e534cc1b6c6ddfa17eaf2b500", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjc3F4CRBK7hj4Ov3rIwAAxh4IACnHHlicrqqdy1zOaNvIjXAh\nG0+QqJ+PCVpA5ftBQ1M67mEEq5PW+Ntm0LZ5asZJ9XlAtXnhG73skAOM64HzHV9R\nycqLG28UXnLJuAU/6QI+1ICGdfWtAUQaDm2pHr8HqdDBHq+NQuyj6m5ZIRqrdTWN\nANQJqPjO7gkMmKi0y/Gc86fwQOHe9fXatC6eV7oiEKUNI2+aF820TiZBx3+r5fj0\neVaHe+1ZjAAWxi5nZteqDxECksYRBHskgMOEiypOIbLKX58tjYZ3WKHH0ppsAdFp\n7La9NfvgIP4xOKLLWq6cnxMd98brCXuhOew/f4bEvrYqq7bQPde6vFeGEsCagmg=\n=HWwm\n-----END PGP SIGNATURE-----\n", "payload": "tree 292bb3744e1908b39e0bfbfdb1e54aab3e2d2760\nparent 009337f5935882799fe520e98f0b233403254e41\nparent 22977337faf0c1a80af36b00249aed30fa586f2d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1668510072 +0000\ncommitter GitHub <noreply@github.com> 1668510072 +0000\n\nMerge #1631\n\n1631: Ast dump where clause r=CohenArthur a=jdupak\n\nAdds dump of the where clause and recursively needed nodes.\r\nAdds visitor compatibility layer for general references except for unique pointers - needed for lifetimes. The enable is necessary to coexist with the unique_ptr overload.\r\n\r\nDepends on #1624 and will be rebased when it is merged. \n\nCo-authored-by: Jakub Dupak <dev@jakubdupak.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/815a57351a33491e534cc1b6c6ddfa17eaf2b500", "html_url": "https://github.com/Rust-GCC/gccrs/commit/815a57351a33491e534cc1b6c6ddfa17eaf2b500", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/815a57351a33491e534cc1b6c6ddfa17eaf2b500/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "009337f5935882799fe520e98f0b233403254e41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/009337f5935882799fe520e98f0b233403254e41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/009337f5935882799fe520e98f0b233403254e41"}, {"sha": "22977337faf0c1a80af36b00249aed30fa586f2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22977337faf0c1a80af36b00249aed30fa586f2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22977337faf0c1a80af36b00249aed30fa586f2d"}], "stats": {"total": 178, "additions": 154, "deletions": 24}, "files": [{"sha": "e5e051a46d883c692f30721389946a850b496bf8", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 134, "deletions": 21, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815a57351a33491e534cc1b6c6ddfa17eaf2b500/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815a57351a33491e534cc1b6c6ddfa17eaf2b500/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=815a57351a33491e534cc1b6c6ddfa17eaf2b500", "patch": "@@ -64,6 +64,13 @@ Dump::visit (std::unique_ptr<T> &node)\n   node->accept_vis (*this);\n }\n \n+template <typename T>\n+void\n+Dump::visit (T &node)\n+{\n+  node.accept_vis (*this);\n+}\n+\n template <typename T>\n void\n Dump::visit_items_joined_by_separator (T &collection,\n@@ -129,7 +136,7 @@ Dump::visit (FunctionParam &param)\n }\n \n void\n-Dump::visit (const Attribute &attrib)\n+Dump::visit (Attribute &attrib)\n {\n   stream << \"#[\";\n   visit_items_joined_by_separator (attrib.get_path ().get_segments (), \"::\");\n@@ -158,13 +165,13 @@ Dump::visit (const Attribute &attrib)\n }\n \n void\n-Dump::visit (const SimplePathSegment &segment)\n+Dump::visit (SimplePathSegment &segment)\n {\n   stream << segment.get_segment_name ();\n }\n \n void\n-Dump::visit (const Visibility &vis)\n+Dump::visit (Visibility &vis)\n {\n   switch (vis.get_vis_type ())\n     {\n@@ -220,6 +227,28 @@ Dump::visit (StructField &field)\n   visit (field.get_field_type ());\n }\n \n+// TODO is this unique by type?\n+void\n+Dump::visit (std::vector<LifetimeParam> &for_lifetimes)\n+{\n+  // ForLifetimes :\n+  //     for GenericParams\n+  //\n+  // GenericParams :\n+  //      < >\n+  //   | < (GenericParam ,)* GenericParam ,? >\n+  //\n+  // GenericParam :\n+  //   OuterAttribute* ( LifetimeParam | TypeParam | ConstParam )\n+  //\n+  // LifetimeParam :\n+  //   LIFETIME_OR_LABEL ( : LifetimeBounds )?\n+\n+  stream << \"for <\";\n+  visit_items_joined_by_separator (for_lifetimes, \" + \");\n+  stream << \"> \";\n+}\n+\n void\n Dump::visit (Token &tok)\n {\n@@ -251,11 +280,35 @@ Dump::visit (IdentifierExpr &ident_expr)\n \n void\n Dump::visit (Lifetime &lifetime)\n-{}\n+{\n+  // Syntax:\n+  // Lifetime :\n+  // \tLIFETIME_OR_LABEL\n+  // \t| 'static\n+  // \t| '_\n+  stream << lifetime.as_string ();\n+}\n \n void\n Dump::visit (LifetimeParam &lifetime_param)\n-{}\n+{\n+  // Syntax:\n+  //   LIFETIME_OR_LABEL ( : LifetimeBounds )?\n+  // LifetimeBounds :\n+  //   ( Lifetime + )* Lifetime?\n+\n+  // TODO what to do with outer attr? They are not mentioned in the reference.\n+\n+  auto lifetime = lifetime_param.get_lifetime ();\n+  visit (lifetime);\n+\n+  if (lifetime_param.has_lifetime_bounds ())\n+    {\n+      stream << \": \";\n+      visit_items_joined_by_separator (lifetime_param.get_lifetime_bounds (),\n+\t\t\t\t       \" + \");\n+    }\n+}\n \n void\n Dump::visit (ConstGenericParam &lifetime_param)\n@@ -797,13 +850,52 @@ Dump::visit (TypeParam &param)\n     }\n }\n \n+void\n+Dump::visit (WhereClause &rule)\n+{\n+  // Syntax:\n+  // \twhere ( WhereClauseItem , )* WhereClauseItem ?\n+  // WhereClauseItem :\n+  // \tLifetimeWhereClauseItem\n+  //  \t| TypeBoundWhereClauseItem\n+\n+  stream << \" where\\n\";\n+  indentation.increment ();\n+  visit_items_as_lines (rule.get_items (), \",\");\n+  indentation.decrement ();\n+}\n+\n void\n Dump::visit (LifetimeWhereClauseItem &item)\n-{}\n+{\n+  // Syntax:\n+  // \tLifetime : LifetimeBounds\n+  // LifetimeBounds :\n+  //   ( Lifetime + )* Lifetime?\n+\n+  visit (item.get_lifetime ());\n+  stream << \": \";\n+  visit_items_joined_by_separator (item.get_lifetime_bounds (), \" + \");\n+}\n \n void\n Dump::visit (TypeBoundWhereClauseItem &item)\n-{}\n+{\n+  // Syntax:\n+  // \tForLifetimes? Type : TypeParamBounds?\n+  // TypeParamBounds :\n+  // \tTypeParamBound ( + TypeParamBound )* +?\n+  // TypeParamBound :\n+  //    Lifetime | TraitBound\n+\n+  if (item.has_for_lifetimes ())\n+    visit (item.get_for_lifetimes ());\n+\n+  visit (item.get_type ());\n+  stream << \": \";\n+\n+  visit_items_joined_by_separator (item.get_type_param_bounds (), \" + \");\n+}\n \n void\n Dump::visit (Method &method)\n@@ -889,6 +981,12 @@ Dump::visit (UseDeclaration &use_decl)\n void\n Dump::visit (Function &function)\n {\n+  // Syntax:\n+  //   FunctionQualifiers fn IDENTIFIER GenericParams?\n+  //      ( FunctionParameters? )\n+  //      FunctionReturnType? WhereClause?\n+  //      ( BlockExpression | ; )\n+\n   visit (function.get_visibility ());\n \n   stream << \"fn \" << function.get_function_name ();\n@@ -906,6 +1004,9 @@ Dump::visit (Function &function)\n       stream << \" \";\n     }\n \n+  if (function.has_where_clause ())\n+    visit (function.get_where_clause ());\n+\n   auto &block = function.get_definition ();\n   if (!block)\n     stream << ';';\n@@ -929,8 +1030,7 @@ Dump::visit (TypeAlias &type_alias)\n   if (type_alias.has_generics ())\n     visit (type_alias.get_generic_params ());\n   if (type_alias.has_where_clause ())\n-    {\n-    } // FIXME: WhereClause\n+    visit (type_alias.get_where_clause ());\n   stream << \" = \";\n   visit (type_alias.get_type_aliased ());\n   stream << \";\\n\";\n@@ -942,9 +1042,8 @@ Dump::visit (StructStruct &struct_item)\n   stream << \"struct \" << struct_item.get_identifier ();\n   if (struct_item.has_generics ())\n     visit (struct_item.get_generic_params ());\n-\n-  // FIXME: where-clause\n-\n+  if (struct_item.has_where_clause ())\n+    visit (struct_item.get_where_clause ());\n   if (struct_item.is_unit_struct ())\n     stream << \";\\n\";\n   else\n@@ -957,8 +1056,8 @@ Dump::visit (TupleStruct &tuple_struct)\n   stream << \"struct \" << tuple_struct.get_identifier ();\n   if (tuple_struct.has_generics ())\n     visit (tuple_struct.get_generic_params ());\n-\n-  // FIXME: where-clause\n+  if (tuple_struct.has_where_clause ())\n+    visit (tuple_struct.get_where_clause ());\n \n   stream << '(';\n   visit_items_joined_by_separator (tuple_struct.get_fields (), \", \");\n@@ -999,8 +1098,8 @@ Dump::visit (Enum &enum_item)\n   stream << \"enum \" << enum_item.get_identifier ();\n   if (enum_item.has_generics ())\n     visit (enum_item.get_generic_params ());\n-\n-  // FIXME: where-clause\n+  if (enum_item.has_where_clause ())\n+    visit (enum_item.get_where_clause ());\n \n   visit_items_as_block (enum_item.get_variants (), \",\");\n }\n@@ -1011,8 +1110,8 @@ Dump::visit (Union &union_item)\n   stream << \"union \" << union_item.get_identifier ();\n   if (union_item.has_generics ())\n     visit (union_item.get_generic_params ());\n-\n-  // FIXME: where-clause\n+  if (union_item.has_where_clause ())\n+    visit (union_item.get_where_clause ());\n \n   visit_items_as_block (union_item.get_variants (), \",\");\n }\n@@ -1099,7 +1198,7 @@ Dump::visit (TraitItemType &item)\n void\n Dump::visit (Trait &trait)\n {\n-  for (const auto &attr : trait.get_outer_attrs ())\n+  for (auto &attr : trait.get_outer_attrs ())\n     {\n       visit (attr);\n       stream << \"\\n\" << indentation;\n@@ -1130,7 +1229,9 @@ Dump::visit (InherentImpl &impl)\n \n   visit (impl.get_type ());\n \n-  // FIXME: Handle where-clause\n+  if (impl.has_where_clause ())\n+    visit (impl.get_where_clause ());\n+\n   // FIXME: Handle inner attributes\n \n   visit_items_as_block (impl.get_impl_items (), \"\");\n@@ -1444,7 +1545,19 @@ Dump::visit (ExprStmtWithBlock &stmt)\n // rust-type.h\n void\n Dump::visit (TraitBound &bound)\n-{}\n+{\n+  // Syntax:\n+  //      ?? ForLifetimes? TypePath\n+  //   | ( ?? ForLifetimes? TypePath )\n+\n+  if (bound.has_opening_question_mark ())\n+    stream << \"? \";\n+\n+  if (bound.has_for_lifetimes ())\n+    visit (bound.get_for_lifetimes ());\n+\n+  visit (bound.get_type_path ());\n+}\n \n void\n Dump::visit (ImplTraitType &type)"}, {"sha": "2bd3b31d09aff973994df030b8628f2f1b6e9b43", "filename": "gcc/rust/ast/rust-ast-dump.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815a57351a33491e534cc1b6c6ddfa17eaf2b500/gcc%2Frust%2Fast%2Frust-ast-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815a57351a33491e534cc1b6c6ddfa17eaf2b500/gcc%2Frust%2Fast%2Frust-ast-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.h?ref=815a57351a33491e534cc1b6c6ddfa17eaf2b500", "patch": "@@ -80,6 +80,11 @@ class Dump : public ASTVisitor\n    */\n   template <typename T> void visit (std::unique_ptr<T> &node);\n \n+  /**\n+   * @see visit<std::unique_ptr<T>>\n+   */\n+  template <typename T> void visit (T &node);\n+\n   /**\n    * Visit all items in given @collection, placing the separator in between but\n    * not at the end.\n@@ -122,14 +127,16 @@ class Dump : public ASTVisitor\n \t\t\t      std::unique_ptr<BlockExpr> &block);\n \n   void visit (FunctionParam &param);\n-  void visit (const Attribute &attrib);\n-  void visit (const Visibility &vis);\n+  void visit (Attribute &attrib);\n+  void visit (Visibility &vis);\n   void visit (std::vector<std::unique_ptr<GenericParam>> &params);\n   void visit (TupleField &field);\n   void visit (StructField &field);\n-  void visit (const SimplePathSegment &segment);\n+  void visit (SimplePathSegment &segment);\n   void visit (NamedFunctionParam &param);\n   void visit (MacroRule &rule);\n+  void visit (WhereClause &rule);\n+  void visit (std::vector<LifetimeParam> &for_lifetimes);\n \n   // rust-ast.h\n   void visit (Token &tok);"}, {"sha": "fc7af58eed5aa18b927ca48e4ff791e8475f07e5", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815a57351a33491e534cc1b6c6ddfa17eaf2b500/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815a57351a33491e534cc1b6c6ddfa17eaf2b500/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=815a57351a33491e534cc1b6c6ddfa17eaf2b500", "patch": "@@ -1310,6 +1310,8 @@ class LifetimeParam : public GenericParam\n   // Returns whether the lifetime param has any lifetime bounds.\n   bool has_lifetime_bounds () const { return !lifetime_bounds.empty (); }\n \n+  std::vector<Lifetime> &get_lifetime_bounds () { return lifetime_bounds; }\n+\n   // Returns whether the lifetime param has an outer attribute.\n   bool has_outer_attribute () const { return !outer_attr.is_empty (); }\n "}, {"sha": "09fad819c458dfcc304e6613e9203977402749e4", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815a57351a33491e534cc1b6c6ddfa17eaf2b500/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815a57351a33491e534cc1b6c6ddfa17eaf2b500/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=815a57351a33491e534cc1b6c6ddfa17eaf2b500", "patch": "@@ -236,6 +236,8 @@ class TypeBoundWhereClauseItem : public WhereClauseItem\n   // Returns whether the item has ForLifetimes\n   bool has_for_lifetimes () const { return !for_lifetimes.empty (); }\n \n+  std::vector<LifetimeParam> &get_for_lifetimes () { return for_lifetimes; }\n+\n   // Returns whether the item has type param bounds\n   bool has_type_param_bounds () const { return !type_param_bounds.empty (); }\n \n@@ -901,6 +903,7 @@ class Method : public InherentImplItem, public TraitImplItem\n \n   FunctionQualifiers get_qualifiers () { return qualifiers; }\n \n+  Visibility &get_visibility () { return vis; }\n   const Visibility &get_visibility () const { return vis; }\n \n protected:\n@@ -1975,6 +1978,7 @@ struct StructField\n     return field_type;\n   }\n \n+  Visibility &get_visibility () { return visibility; }\n   const Visibility &get_visibility () const { return visibility; }\n \n   NodeId get_node_id () const { return node_id; }\n@@ -2109,6 +2113,7 @@ struct TupleField\n \n   NodeId get_node_id () const { return node_id; }\n \n+  Visibility &get_visibility () { return visibility; }\n   const Visibility &get_visibility () const { return visibility; }\n \n   Location get_locus () const { return locus; }\n@@ -4150,6 +4155,7 @@ class ExternalFunctionItem : public ExternalItem\n \n   Location get_locus () const { return locus; }\n \n+  Visibility &get_visibility () { return visibility; }\n   const Visibility &get_visibility () const { return visibility; }\n \n   ExternalFunctionItem ("}, {"sha": "8fc3d31b45b1d7bab4a1fb9bebb163b1dd40693e", "filename": "gcc/rust/ast/rust-type.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/815a57351a33491e534cc1b6c6ddfa17eaf2b500/gcc%2Frust%2Fast%2Frust-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/815a57351a33491e534cc1b6c6ddfa17eaf2b500/gcc%2Frust%2Fast%2Frust-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-type.h?ref=815a57351a33491e534cc1b6c6ddfa17eaf2b500", "patch": "@@ -46,6 +46,8 @@ class TraitBound : public TypeParamBound\n   // Returns whether trait bound has \"for\" lifetimes\n   bool has_for_lifetimes () const { return !for_lifetimes.empty (); }\n \n+  std::vector<LifetimeParam> &get_for_lifetimes () { return for_lifetimes; }\n+\n   TraitBound (TypePath type_path, Location locus, bool in_parens = false,\n \t      bool opening_question_mark = false,\n \t      std::vector<LifetimeParam> for_lifetimes"}]}