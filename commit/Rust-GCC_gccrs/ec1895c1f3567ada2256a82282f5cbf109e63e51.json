{"sha": "ec1895c1f3567ada2256a82282f5cbf109e63e51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMxODk1YzFmMzU2N2FkYTIyNTZhODIyODJmNWNiZjEwOWU2M2U1MQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2017-07-30T08:51:37Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-07-30T08:51:37Z"}, "message": "i386.h (ASM_PRINTF_EXTENSIONS): New macro.\n\n\t* config/i386/i386.h (ASM_PRINTF_EXTENSIONS): New macro.\n\t(ASM_OUTPUT_REG_PUSH): Rewrite with new operand modifiers.\n\t(ASM_OUTPUT_REG_POP): Ditto.\n\t* config/i386/i386.c (ix86_asm_output_function_label): Use fputs\n\tinstead of asm_fprintf to output pure string.\n\nFrom-SVN: r250720", "tree": {"sha": "e8845add693bbe723e3dcb5ea546fae62df0fec1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8845add693bbe723e3dcb5ea546fae62df0fec1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec1895c1f3567ada2256a82282f5cbf109e63e51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec1895c1f3567ada2256a82282f5cbf109e63e51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec1895c1f3567ada2256a82282f5cbf109e63e51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec1895c1f3567ada2256a82282f5cbf109e63e51/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "218e5d04b322a58949f8d73e83976765de75e610", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/218e5d04b322a58949f8d73e83976765de75e610", "html_url": "https://github.com/Rust-GCC/gccrs/commit/218e5d04b322a58949f8d73e83976765de75e610"}], "stats": {"total": 59, "additions": 35, "deletions": 24}, "files": [{"sha": "300857938d197fe45dc02d340b6cf99a2e1bdf5f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec1895c1f3567ada2256a82282f5cbf109e63e51/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec1895c1f3567ada2256a82282f5cbf109e63e51/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec1895c1f3567ada2256a82282f5cbf109e63e51", "patch": "@@ -1,3 +1,11 @@\n+2017-07-30  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.h (ASM_PRINTF_EXTENSIONS): New macro.\n+\t(ASM_OUTPUT_REG_PUSH): Rewrite with new operand modifiers.\n+\t(ASM_OUTPUT_REG_POP): Ditto.\n+\t* config/i386/i386.c (ix86_asm_output_function_label): Use fputs\n+\tinstead of asm_fprintf to output pure string.\n+\n 2017-07-29  Jakub Jelinek  <jakub@redhat.com>\n \n \t* debug.h (struct gcc_debug_hooks): Add IMPLICIT argument"}, {"sha": "c0213a66ae0dd26483b2543230a463b10dd06a67", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec1895c1f3567ada2256a82282f5cbf109e63e51/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec1895c1f3567ada2256a82282f5cbf109e63e51/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ec1895c1f3567ada2256a82282f5cbf109e63e51", "patch": "@@ -8777,16 +8777,15 @@ ix86_asm_output_function_label (FILE *asm_out_file, const char *fname,\n       if (TARGET_64BIT)\n \t{\n \t  /* leaq [%rsp + 0], %rsp  */\n-\t  asm_fprintf (asm_out_file, ASM_BYTE\n-\t\t       \"0x48, 0x8d, 0xa4, 0x24, 0x00, 0x00, 0x00, 0x00\\n\");\n+\t  fputs (ASM_BYTE \"0x48, 0x8d, 0xa4, 0x24, 0x00, 0x00, 0x00, 0x00\\n\",\n+\t\t asm_out_file);\n \t}\n       else\n \t{\n           /* movl.s %edi, %edi\n \t     push   %ebp\n \t     movl.s %esp, %ebp */\n-\t  asm_fprintf (asm_out_file, ASM_BYTE\n-\t\t       \"0x8b, 0xff, 0x55, 0x8b, 0xec\\n\");\n+\t  fputs (ASM_BYTE \"0x8b, 0xff, 0x55, 0x8b, 0xec\\n\", asm_out_file);\n \t}\n     }\n }"}, {"sha": "61501dc8c0b8014f8d8887960cb7bd13b1b74aca", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec1895c1f3567ada2256a82282f5cbf109e63e51/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec1895c1f3567ada2256a82282f5cbf109e63e51/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=ec1895c1f3567ada2256a82282f5cbf109e63e51", "patch": "@@ -2196,29 +2196,33 @@ extern int const svr4_dbx_register_map[FIRST_PSEUDO_REGISTER];\n #define ASM_PREFERRED_EH_DATA_FORMAT(CODE, GLOBAL)       \t\t\\\n   asm_preferred_eh_data_format ((CODE), (GLOBAL))\n \n-/* This is how to output an insn to push a register on the stack.\n-   It need not be very fast code.  */\n-\n-#define ASM_OUTPUT_REG_PUSH(FILE, REGNO)  \\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  if (TARGET_64BIT)\t\t\t\t\t\t\t\\\n-    asm_fprintf ((FILE), \"\\tpush{q}\\t%%r%s\\n\",\t\t\t\t\\\n-\t\t reg_names[(REGNO)] + (REX_INT_REGNO_P (REGNO) != 0));\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    asm_fprintf ((FILE), \"\\tpush{l}\\t%%e%s\\n\", reg_names[(REGNO)]);\t\\\n-} while (0)\n+/* These are a couple of extensions to the formats accepted\n+   by asm_fprintf:\n+     %z prints out opcode suffix for word-mode instruction\n+     %r prints out word-mode name for reg_names[arg]  */\n+#define ASM_FPRINTF_EXTENSIONS(FILE, ARGS, P)\t\t\\\n+  case 'z':\t\t\t\t\t\t\\\n+    fputc (TARGET_64BIT ? 'q' : 'l', (FILE));\t\t\\\n+    break;\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+  case 'r':\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      unsigned int regno = va_arg ((ARGS), int);\t\\\n+      if (LEGACY_INT_REGNO_P (regno))\t\t\t\\\n+\tfputc (TARGET_64BIT ? 'r' : 'e', (FILE));\t\\\n+      fputs (reg_names[regno], (FILE));\t\t\t\\\n+      break;\t\t\t\t\t\t\\\n+    }\n+\n+/* This is how to output an insn to push a register on the stack.  */\n \n-/* This is how to output an insn to pop a register from the stack.\n-   It need not be very fast code.  */\n+#define ASM_OUTPUT_REG_PUSH(FILE, REGNO)\t\t\\\n+  asm_fprintf ((FILE), \"\\tpush%z\\t%%%r\\n\", (REGNO))\n+\n+/* This is how to output an insn to pop a register from the stack.  */\n \n #define ASM_OUTPUT_REG_POP(FILE, REGNO)  \\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  if (TARGET_64BIT)\t\t\t\t\t\t\t\\\n-    asm_fprintf ((FILE), \"\\tpop{q}\\t%%r%s\\n\",\t\t\t\t\\\n-\t\t reg_names[(REGNO)] + (REX_INT_REGNO_P (REGNO) != 0));\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    asm_fprintf ((FILE), \"\\tpop{l}\\t%%e%s\\n\", reg_names[(REGNO)]);\t\\\n-} while (0)\n+  asm_fprintf ((FILE), \"\\tpop%z\\t%%%r\\n\", (REGNO))\n \n /* This is how to output an element of a case-vector that is absolute.  */\n "}]}