{"sha": "b74cf1ce4535e85f2b214cbbe94f688e599f35bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc0Y2YxY2U0NTM1ZTg1ZjJiMjE0Y2JiZTk0ZjY4OGU1OTlmMzViZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-09-08T20:01:54Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-09-08T20:01:54Z"}, "message": "* reg-stack.c (subst_stack_regs_pat): Fix fcmov reversal code.\n\nFrom-SVN: r45490", "tree": {"sha": "d04cf706b0cd12d1eec53ac85ad4a5bf95646b35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d04cf706b0cd12d1eec53ac85ad4a5bf95646b35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b74cf1ce4535e85f2b214cbbe94f688e599f35bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b74cf1ce4535e85f2b214cbbe94f688e599f35bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b74cf1ce4535e85f2b214cbbe94f688e599f35bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b74cf1ce4535e85f2b214cbbe94f688e599f35bd/comments", "author": null, "committer": null, "parents": [{"sha": "718fd87ea192c3e038c178aff18ee52cac40aabf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/718fd87ea192c3e038c178aff18ee52cac40aabf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/718fd87ea192c3e038c178aff18ee52cac40aabf"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "7442f6f5855ef1d39d8047a6f3a752781a2828fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74cf1ce4535e85f2b214cbbe94f688e599f35bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74cf1ce4535e85f2b214cbbe94f688e599f35bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b74cf1ce4535e85f2b214cbbe94f688e599f35bd", "patch": "@@ -1,3 +1,7 @@\n+Sat Sep  8 22:00:55 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* reg-stack.c (subst_stack_regs_pat): Fix fcmov reversal code.\n+\n 2001-09-08  Andreas Jaeger  <aj@suse.de>\n \n \t* i386.h (TARGET_SWITCHES): Fix description."}, {"sha": "a72f622d4df053f8c5edcc5c20ab74f503b0e8e6", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74cf1ce4535e85f2b214cbbe94f688e599f35bd/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74cf1ce4535e85f2b214cbbe94f688e599f35bd/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=b74cf1ce4535e85f2b214cbbe94f688e599f35bd", "patch": "@@ -1797,20 +1797,18 @@ subst_stack_regs_pat (insn, regstack, pat)\n \t\t    || (REGNO (*src2) == regstack->reg[regstack->top]\n \t\t\t&& src2_note))\n \t\t  {\n-\n-\t\t    /* We know that both sources \"dies\", as one dies and other\n-\t\t       is overwriten by the destination.  Claim both sources\n-\t\t       to be dead, as the code bellow will properly pop the\n-\t\t       non-top-of-stack note and replace top-of-stack by the\n-\t\t       result by popping source first and then pushing result. */\n-\t\t    if (!src1_note)\n-\t\t      src1_note = REG_NOTES (insn)\n-\t\t\t= gen_rtx_EXPR_LIST (REG_DEAD, *src1, REG_NOTES (insn));\n-\t\t    if (!src2_note)\n-\t\t      src2_note = REG_NOTES (insn)\n-\t\t\t= gen_rtx_EXPR_LIST (REG_DEAD, *src2, REG_NOTES (insn));\n-\n-\t\t    /* i386 do have comparison always reversible.  */\n+\t\t    int idx1 = (get_hard_regnum (regstack, *src1)\n+\t\t\t\t- FIRST_STACK_REG);\n+\t\t    int idx2 = (get_hard_regnum (regstack, *src2)\n+\t\t\t\t- FIRST_STACK_REG);\n+\n+\t\t    /* Make reg-stack believe that the operands are already\n+\t\t       swapped on the stack */\n+\t\t    regstack->reg[regstack->top - idx1] = REGNO (*src2);\n+\t\t    regstack->reg[regstack->top - idx2] = REGNO (*src1);\n+\n+\t\t    /* Reverse condition to compensate the operand swap.\n+\t\t       i386 do have comparison always reversible.  */\n \t\t    PUT_CODE (XEXP (pat_src, 0),\n \t\t\t      reversed_comparison_code (XEXP (pat_src, 0), insn));\n \t\t  }\n@@ -1845,11 +1843,9 @@ subst_stack_regs_pat (insn, regstack, pat)\n \t\t\t\t       EMIT_AFTER);\n \t\t      }\n \t\t    else\n-\t\t      {\n-\t\t\tCLEAR_HARD_REG_BIT (regstack->reg_set, regno);\n-\t\t\treplace_reg (&XEXP (src_note[i], 0), FIRST_STACK_REG);\n-\t\t\tregstack->top--;\n-\t\t      }\n+\t\t      /* Top of stack never dies, as it is the\n+\t\t\t destination.  */\n+\t\t      abort ();\n \t\t  }\n \t    }\n "}]}