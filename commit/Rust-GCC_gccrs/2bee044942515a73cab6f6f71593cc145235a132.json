{"sha": "2bee044942515a73cab6f6f71593cc145235a132", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJlZTA0NDk0MjUxNWE3M2NhYjZmNmY3MTU5M2NjMTQ1MjM1YTEzMg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-31T21:16:25Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-31T21:16:25Z"}, "message": "(extendqidi2, extendqisi2, extendqihi2): Remove non-existent lba instruction.\n\n(ashrdi3): Undo previous change.\n\nFrom-SVN: r7397", "tree": {"sha": "75f8c66cc8dce561bbba1c675fd6f0a916b613f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75f8c66cc8dce561bbba1c675fd6f0a916b613f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bee044942515a73cab6f6f71593cc145235a132", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bee044942515a73cab6f6f71593cc145235a132", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bee044942515a73cab6f6f71593cc145235a132", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bee044942515a73cab6f6f71593cc145235a132/comments", "author": null, "committer": null, "parents": [{"sha": "7efad3f776363669abf4fd7c94777f20f59fa4ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7efad3f776363669abf4fd7c94777f20f59fa4ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7efad3f776363669abf4fd7c94777f20f59fa4ec"}], "stats": {"total": 54, "additions": 17, "deletions": 37}, "files": [{"sha": "1872dffb378c080684a7c31ad93c97a61d426c76", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 17, "deletions": 37, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bee044942515a73cab6f6f71593cc145235a132/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bee044942515a73cab6f6f71593cc145235a132/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=2bee044942515a73cab6f6f71593cc145235a132", "patch": "@@ -287,20 +287,11 @@\n   \"rldicl. %0,%1,0,56\"\n   [(set_attr \"type\" \"compare\")])\n \n-(define_expand \"extendqidi2\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(sign_extend:DI (match_operand:QI 1 \"gpc_reg_operand\" \"\")))]\n+(define_insn \"extendqidi2\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(sign_extend:DI (match_operand:QI 1 \"gpc_reg_operand\" \"r\")))]\n   \"TARGET_POWERPC64\"\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(sign_extend:DI (match_operand:QI 1 \"reg_or_mem_operand\" \"m,r\")))]\n-  \"TARGET_POWERPC64\"\n-  \"@\n-   lba%U1%X1 %0,%1\n-   extsb %0,%1\"\n-  [(set_attr \"type\" \"load,*\")])\n+  \"extsb %0,%1\")\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n@@ -507,13 +498,10 @@\n }\")\n \n (define_insn \"extendqisi2_ppc\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(sign_extend:SI (match_operand:QI 1 \"reg_or_mem_operand\" \"m,r\")))]\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+\t(sign_extend:SI (match_operand:QI 1 \"gpc_reg_operand\" \"r\")))]\n   \"TARGET_POWERPC\"\n-  \"@\n-   lba%U1%X1 %0,%1\n-   extsb %0,%1\"\n-  [(set_attr \"type\" \"load,*\")])\n+  \"extsb %0,%1\")\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n@@ -610,13 +598,10 @@\n }\")\n \n (define_insn \"extendqihi2_ppc\"\n-  [(set (match_operand:HI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(sign_extend:HI (match_operand:QI 1 \"reg_or_mem_operand\" \"m,r\")))]\n+  [(set (match_operand:HI 0 \"gpc_reg_operand\" \"=r\")\n+\t(sign_extend:HI (match_operand:QI 1 \"gpc_reg_operand\" \"r\")))]\n   \"TARGET_POWERPC\"\n-  \"@\n-   lba%U1%X1 %0,%1\n-   extsb %0,%1\"\n-  [(set_attr \"type\" \"load,*\")])\n+  \"extsb %0,%1\")\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n@@ -3390,22 +3375,17 @@\n ;; just handle shifts by constants.\n \n (define_expand \"ashrdi3\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(ashiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"\")))]\n-  \"\"\n+  [(parallel [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=\")\n+\t\t   (ashiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n+\t\t\t\t(match_operand:SI 2 \"general_operand\" \"\")))\n+\t      (clobber (match_scratch:SI 3 \"\"))])]\n+  \"TARGET_POWER\"\n   \"\n-{\n-  if (TARGET_POWER && GET_CODE (operands[2]) != CONST_INT)\n-    {\n-      emit_insn (gen_ashrdi3_power (operands[0], operands[1], operands[2]));\n-      DONE;\n-    }\n-  else if (! TARGET_POWERPC64)\n+{ if (GET_CODE (operands[2]) != CONST_INT)\n     FAIL;\n }\")\n \n-(define_insn \"ashrdi3_power\"\n+(define_insn \"\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(ashiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n \t\t     (match_operand:SI 2 \"const_int_operand\" \"M,i\")))"}]}