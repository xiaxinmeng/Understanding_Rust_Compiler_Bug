{"sha": "60e457d9cad52491bbff434bf611b21f2da07ecc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBlNDU3ZDljYWQ1MjQ5MWJiZmY0MzRiZjYxMWIyMWYyZGEwN2VjYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-12-11T16:51:05Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-12-11T16:51:05Z"}, "message": "PR c++/92774 - ICE with implicitly deleted operator<=>.\n\nMissing error-recovery code.  While I was poking at this I also figured we\ndon't need to iterate over the members of a union.\n\n\t* method.c (comp_info::~comp_info): Factor out of...\n\t(build_comparison_op): Here.  Handle error return from build_new_op.\n\nFrom-SVN: r279235", "tree": {"sha": "2c438668a84a9f52f6e1c808d948c2b62bdf7297", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c438668a84a9f52f6e1c808d948c2b62bdf7297"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60e457d9cad52491bbff434bf611b21f2da07ecc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60e457d9cad52491bbff434bf611b21f2da07ecc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60e457d9cad52491bbff434bf611b21f2da07ecc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60e457d9cad52491bbff434bf611b21f2da07ecc/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d6e8c01cff1bee743a9d00e9a43303ec29fde233", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6e8c01cff1bee743a9d00e9a43303ec29fde233", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6e8c01cff1bee743a9d00e9a43303ec29fde233"}], "stats": {"total": 62, "additions": 50, "deletions": 12}, "files": [{"sha": "6daee41c5d18efeae1b4680399498cace668bb9d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60e457d9cad52491bbff434bf611b21f2da07ecc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60e457d9cad52491bbff434bf611b21f2da07ecc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=60e457d9cad52491bbff434bf611b21f2da07ecc", "patch": "@@ -1,5 +1,9 @@\n 2019-12-11  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/92774 - ICE with implicitly deleted operator<=>.\n+\t* method.c (comp_info::~comp_info): Factor out of...\n+\t(build_comparison_op): Here.  Handle error return from build_new_op.\n+\n \tPR c++/92859 - ADL and bit-field.\n \t* name-lookup.c: Use unlowered_expr_type.\n "}, {"sha": "97c27c51ea3d38c872aabebea546eeca88e457e3", "filename": "gcc/cp/method.c", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60e457d9cad52491bbff434bf611b21f2da07ecc/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60e457d9cad52491bbff434bf611b21f2da07ecc/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=60e457d9cad52491bbff434bf611b21f2da07ecc", "patch": "@@ -1244,6 +1244,21 @@ struct comp_info\n     if (noex && !expr_noexcept_p (expr, tf_none))\n       noex = false;\n   }\n+\n+  ~comp_info ()\n+  {\n+    if (first_time)\n+      {\n+\tDECL_DECLARED_CONSTEXPR_P (fndecl) = constexp || was_constexp;\n+\ttree raises = TYPE_RAISES_EXCEPTIONS (TREE_TYPE (fndecl));\n+\tif (!raises || UNEVALUATED_NOEXCEPT_SPEC_P (raises))\n+\t  {\n+\t    raises = noex ? noexcept_true_spec : noexcept_false_spec;\n+\t    TREE_TYPE (fndecl) = build_exception_variant (TREE_TYPE (fndecl),\n+\t\t\t\t\t\t\t  raises);\n+\t  }\n+      }\n+  }\n };\n \n /* Build up the definition of a defaulted comparison operator.  Unlike other\n@@ -1282,6 +1297,7 @@ build_comparison_op (tree fndecl, tsubst_flags_t complain)\n       if (complain & tf_error)\n \tinform (info.loc, \"cannot default compare union %qT\", ctype);\n       DECL_DELETED_FN (fndecl) = true;\n+      return;\n     }\n \n   tree compound_stmt = NULL_TREE;\n@@ -1335,6 +1351,11 @@ build_comparison_op (tree fndecl, tsubst_flags_t complain)\n \t\t\t\t NULL_TREE);\n \t  tree comp = build_new_op (info.loc, code, flags, lhs_mem, rhs_mem,\n \t\t\t\t    NULL_TREE, NULL, complain);\n+\t  if (comp == error_mark_node)\n+\t    {\n+\t      DECL_DELETED_FN (fndecl) = true;\n+\t      continue;\n+\t    }\n \t  comps.safe_push (comp);\n \t}\n       if (code == SPACESHIP_EXPR && is_auto (rettype))\n@@ -1430,18 +1451,6 @@ build_comparison_op (tree fndecl, tsubst_flags_t complain)\n     finish_compound_stmt (compound_stmt);\n   else\n     --cp_unevaluated_operand;\n-\n-  if (info.first_time)\n-    {\n-      DECL_DECLARED_CONSTEXPR_P (fndecl) = info.constexp || info.was_constexp;\n-      tree raises = TYPE_RAISES_EXCEPTIONS (TREE_TYPE (fndecl));\n-      if (!raises || UNEVALUATED_NOEXCEPT_SPEC_P (raises))\n-\t{\n-\t  raises = info.noex ? noexcept_true_spec : noexcept_false_spec;\n-\t  TREE_TYPE (fndecl) = build_exception_variant (TREE_TYPE (fndecl),\n-\t\t\t\t\t\t\traises);\n-\t}\n-    }\n }\n \n /* Synthesize FNDECL, a non-static member function.   */"}, {"sha": "ecc249a67b7adfc6f7b8758cef62af269ef84282", "filename": "gcc/testsuite/g++.dg/cpp2a/spaceship-synth-neg2.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60e457d9cad52491bbff434bf611b21f2da07ecc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth-neg2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60e457d9cad52491bbff434bf611b21f2da07ecc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth-neg2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth-neg2.C?ref=60e457d9cad52491bbff434bf611b21f2da07ecc", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/92774\n+// { dg-do compile { target c++2a } }\n+\n+#include <compare>\n+\n+template<typename T>\n+struct X { };\n+\n+template<typename T>\n+bool operator==(const X<T>&, const X<T>&) { return true; }\n+template<typename T>\n+bool operator<(const X<T>&, const X<T>&) { return true; }\n+\n+struct Y\n+{\n+  int a;\n+  X<int> c;\n+\n+  auto operator <=>(Y const&) const = default; // { dg-error \"no match\" }\n+};\n+\n+void f()\n+{\n+  auto x = Y() < Y();\t\t// { dg-error \"deleted\" }\n+}"}]}