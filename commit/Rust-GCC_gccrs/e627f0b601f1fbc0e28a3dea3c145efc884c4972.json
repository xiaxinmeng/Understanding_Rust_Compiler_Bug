{"sha": "e627f0b601f1fbc0e28a3dea3c145efc884c4972", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYyN2YwYjYwMWYxZmJjMGUyOGEzZGVhM2MxNDVlZmM4ODRjNDk3Mg==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1994-06-15T02:29:07Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1994-06-15T02:29:07Z"}, "message": "Revert last patch: (fold, case *_DIV_EXPR): Optimize (x / C << y)...\n\nFrom-SVN: r7475", "tree": {"sha": "cce8a7f17f5225d7125a6b352781937efaae59a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cce8a7f17f5225d7125a6b352781937efaae59a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e627f0b601f1fbc0e28a3dea3c145efc884c4972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e627f0b601f1fbc0e28a3dea3c145efc884c4972", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e627f0b601f1fbc0e28a3dea3c145efc884c4972", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e627f0b601f1fbc0e28a3dea3c145efc884c4972/comments", "author": null, "committer": null, "parents": [{"sha": "ebc75e94ecf88298d861973feb759d2e28ba2671", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebc75e94ecf88298d861973feb759d2e28ba2671", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebc75e94ecf88298d861973feb759d2e28ba2671"}], "stats": {"total": 47, "additions": 0, "deletions": 47}, "files": [{"sha": "becfb4a964ab9a1869f18b2f90ad7abde776532f", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e627f0b601f1fbc0e28a3dea3c145efc884c4972/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e627f0b601f1fbc0e28a3dea3c145efc884c4972/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e627f0b601f1fbc0e28a3dea3c145efc884c4972", "patch": "@@ -3994,53 +3994,6 @@ fold (expr)\n \t    }\n \t}\n \n-      /* Note that this transformation might sometimes cause division-by-zero\n-\t to pass unnoticed.  For example when C=2 and y=31.  If that is unacceptable,\n-\t we could restrict the optimization to the case when log == 0.  */\n-\n-      if ((code == FLOOR_DIV_EXPR || code == TRUNC_DIV_EXPR)\n-\t  && TREE_CODE (arg1) == LSHIFT_EXPR)\n-\t{\n-\t  int log;\n-\t  if (TREE_CODE (TREE_OPERAND (arg1, 0)) == INTEGER_CST\n-\t      && (log = exact_log2 (TREE_INT_CST_LOW (TREE_OPERAND (arg1, 0)))) >= 0\n-\t      && TREE_INT_CST_HIGH (TREE_OPERAND (arg1, 0)) == 0)\n-\t    {\n-\t      tree cnt;\n-\t      cnt = log == 0 ? TREE_OPERAND (arg1, 1)\n-\t\t: fold (build (PLUS_EXPR, TREE_TYPE (TREE_OPERAND (arg1, 1)),\n-\t\t\t       TREE_OPERAND (arg1, 1),\n-\t\t\t       build_int_2 (log, 0)));\n-\n-\t      if (TREE_UNSIGNED (type) || code == FLOOR_DIV_EXPR)\n-\t\t{\n-\t\t  /* (x / (C << y)) where C = 1 << log  =>  x >> (y + log)  */\n-\t\t  /* BUG: First TYPE here should always be unsigned to get logical\n-\t\t     shift.  How do we do that?  */\n-\t\t  return fold (build (RSHIFT_EXPR, type, arg0, cnt));\n-\t\t}\n-\n-\t      /* (x / (C << y)) when C = 1 << log  =>\n-\t\t  => (ashiftrt (plus x (and (ashiftrt x 31)\n-\t\t\t\t\t    (not (lshift -1 cnt)))) cnt),\n-\t\t    where cnt is y + log  */\n-\t      /* BUG: Several TYPE arguments here might be wrong.  */\n-\t      return\n-\t\tfold (build (RSHIFT_EXPR, type,\n-\t\t\t     fold (build (PLUS_EXPR, type,\n-\t\t\t\t\t  arg0,\n-\t\t\t\t\t  fold (build (BIT_AND_EXPR, type,\n-\t\t\t\t\t\t       fold (build (RSHIFT_EXPR, type,\n-\t\t\t\t\t\t\t\t    arg0,\n-\t\t\t\t\t\t\t\t    build_int_2 (TYPE_PRECISION (type) - 1, 0))),\n-\t\t\t\t\t\t       fold (build1 (BIT_NOT_EXPR, type,\n-\t\t\t\t\t\t\t\t     fold (build (LSHIFT_EXPR, type,\n-\t\t\t\t\t\t\t\t\t\t  build_int_2 (~0, ~0),\n-\t\t\t\t\t\t\t\t\t\t  cnt)))))))),\n-\t\t\t     cnt));\n-\t    }\n-\t}\n-\n       goto binary;\n \n     case CEIL_MOD_EXPR:"}]}