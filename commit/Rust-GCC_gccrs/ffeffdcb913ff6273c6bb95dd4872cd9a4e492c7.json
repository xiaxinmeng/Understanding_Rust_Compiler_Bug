{"sha": "ffeffdcb913ff6273c6bb95dd4872cd9a4e492c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZlZmZkY2I5MTNmZjYyNzNjNmJiOTVkZDQ4NzJjZDlhNGU0OTJjNw==", "commit": {"author": {"name": "Greta Yorsh", "email": "greta.yorsh@arm.com", "date": "2012-12-21T09:49:58Z"}, "committer": {"name": "Greta Yorsh", "email": "gretay@gcc.gnu.org", "date": "2012-12-21T09:49:58Z"}, "message": "cortex-a7.md: New file.\n\ngcc/\n\n2012-12-21  Greta Yorsh  <Greta.Yorsh@arm.com>\n\n        * config/arm/cortex-a7.md: New file.\n        * config/arm/t-arm (MD_INCLUDES): Add cortex-a7.md.\n        * config/arm/arm.md: Include cortex-a7.md.\n        (generic_sched): Don't use generic scheduler for Cortex-A7.\n        (generic_vfp): Likewise.\n        * config/arm/arm.c: (TARGET_SCHED_REORDER): Use arm_sched_reorder.\n        (arm_sched_reorder,cortexa7_sched_reorder): New function.\n        (cortexa7_older_only,cortexa7_younger): Likewise.\n        (arm_issue_rate): Add Cortex-A7.\n\nFrom-SVN: r194656", "tree": {"sha": "c00a2c28032b1f4e0dfcec843d572510b968e776", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c00a2c28032b1f4e0dfcec843d572510b968e776"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffeffdcb913ff6273c6bb95dd4872cd9a4e492c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffeffdcb913ff6273c6bb95dd4872cd9a4e492c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffeffdcb913ff6273c6bb95dd4872cd9a4e492c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffeffdcb913ff6273c6bb95dd4872cd9a4e492c7/comments", "author": null, "committer": null, "parents": [{"sha": "2e612eb2e2fca6e3db59b098e975559c72704141", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e612eb2e2fca6e3db59b098e975559c72704141", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e612eb2e2fca6e3db59b098e975559c72704141"}], "stats": {"total": 534, "additions": 532, "deletions": 2}, "files": [{"sha": "90ecae0e034bdaaf8f60f75dee6a2d2819e00aeb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffeffdcb913ff6273c6bb95dd4872cd9a4e492c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffeffdcb913ff6273c6bb95dd4872cd9a4e492c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ffeffdcb913ff6273c6bb95dd4872cd9a4e492c7", "patch": "@@ -1,3 +1,15 @@\n+2012-12-21  Greta Yorsh  <Greta.Yorsh@arm.com>\n+\n+        * config/arm/cortex-a7.md: New file.\n+        * config/arm/t-arm (MD_INCLUDES): Add cortex-a7.md.\n+        * config/arm/arm.md: Include cortex-a7.md.\n+        (generic_sched): Don't use generic scheduler for Cortex-A7.\n+        (generic_vfp): Likewise.\n+        * config/arm/arm.c: (TARGET_SCHED_REORDER): Use arm_sched_reorder.\n+        (arm_sched_reorder,cortexa7_sched_reorder): New function.\n+        (cortexa7_older_only,cortexa7_younger): Likewise.\n+        (arm_issue_rate): Add Cortex-A7.\n+\n 2012-12-20  Ian Bolton  <ian.bolton@arm.com>\n \n \t* gcc/config/aarch64/aarch64.md"}, {"sha": "13d745fb973b7384d60782191d6bdc2b0e3d1ccc", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffeffdcb913ff6273c6bb95dd4872cd9a4e492c7/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffeffdcb913ff6273c6bb95dd4872cd9a4e492c7/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=ffeffdcb913ff6273c6bb95dd4872cd9a4e492c7", "patch": "@@ -132,6 +132,7 @@ static void arm_output_function_prologue (FILE *, HOST_WIDE_INT);\n static int arm_comp_type_attributes (const_tree, const_tree);\n static void arm_set_default_type_attributes (tree);\n static int arm_adjust_cost (rtx, rtx, rtx, int);\n+static int arm_sched_reorder (FILE *, int, rtx *, int *, int);\n static int optimal_immediate_sequence (enum rtx_code code,\n \t\t\t\t       unsigned HOST_WIDE_INT val,\n \t\t\t\t       struct four_ints *return_sequence);\n@@ -367,6 +368,9 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef  TARGET_SCHED_ADJUST_COST\n #define TARGET_SCHED_ADJUST_COST arm_adjust_cost\n \n+#undef TARGET_SCHED_REORDER\n+#define TARGET_SCHED_REORDER arm_sched_reorder\n+\n #undef TARGET_REGISTER_MOVE_COST\n #define TARGET_REGISTER_MOVE_COST arm_register_move_cost\n \n@@ -8694,6 +8698,164 @@ arm_memory_move_cost (enum machine_mode mode, reg_class_t rclass,\n     }\n }\n \n+\n+/* Return true if and only if this insn can dual-issue only as older.  */\n+static bool\n+cortexa7_older_only (rtx insn)\n+{\n+  if (recog_memoized (insn) < 0)\n+    return false;\n+\n+  if (get_attr_insn (insn) == INSN_MOV)\n+    return false;\n+\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_ALU_REG:\n+    case TYPE_LOAD_BYTE:\n+    case TYPE_LOAD1:\n+    case TYPE_STORE1:\n+    case TYPE_FFARITHS:\n+    case TYPE_FADDS:\n+    case TYPE_FFARITHD:\n+    case TYPE_FADDD:\n+    case TYPE_FCPYS:\n+    case TYPE_F_CVT:\n+    case TYPE_FCMPS:\n+    case TYPE_FCMPD:\n+    case TYPE_FCONSTS:\n+    case TYPE_FCONSTD:\n+    case TYPE_FMULS:\n+    case TYPE_FMACS:\n+    case TYPE_FMULD:\n+    case TYPE_FMACD:\n+    case TYPE_FDIVS:\n+    case TYPE_FDIVD:\n+    case TYPE_F_2_R:\n+    case TYPE_F_FLAG:\n+    case TYPE_F_LOADS:\n+    case TYPE_F_STORES:\n+      return true;\n+    default:\n+      return false;\n+    }\n+}\n+\n+/* Return true if and only if this insn can dual-issue as younger.  */\n+static bool\n+cortexa7_younger (FILE *file, int verbose, rtx insn)\n+{\n+  if (recog_memoized (insn) < 0)\n+    {\n+      if (verbose > 5)\n+        fprintf (file, \";; not cortexa7_younger %d\\n\", INSN_UID (insn));\n+      return false;\n+    }\n+\n+  if (get_attr_insn (insn) == INSN_MOV)\n+    return true;\n+\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_SIMPLE_ALU_IMM:\n+    case TYPE_SIMPLE_ALU_SHIFT:\n+    case TYPE_BRANCH:\n+      return true;\n+    default:\n+      return false;\n+    }\n+}\n+\n+\n+/* Look for an instruction that can dual issue only as an older\n+   instruction, and move it in front of any instructions that can\n+   dual-issue as younger, while preserving the relative order of all\n+   other instructions in the ready list.  This is a hueuristic to help\n+   dual-issue in later cycles, by postponing issue of more flexible\n+   instructions.  This heuristic may affect dual issue opportunities\n+   in the current cycle.  */\n+static void\n+cortexa7_sched_reorder (FILE *file, int verbose, rtx *ready, int *n_readyp,\n+                        int clock)\n+{\n+  int i;\n+  int first_older_only = -1, first_younger = -1;\n+\n+  if (verbose > 5)\n+    fprintf (file,\n+             \";; sched_reorder for cycle %d with %d insns in ready list\\n\",\n+             clock,\n+             *n_readyp);\n+\n+  /* Traverse the ready list from the head (the instruction to issue\n+     first), and looking for the first instruction that can issue as\n+     younger and the first instruction that can dual-issue only as\n+     older.  */\n+  for (i = *n_readyp - 1; i >= 0; i--)\n+    {\n+      rtx insn = ready[i];\n+      if (cortexa7_older_only (insn))\n+        {\n+          first_older_only = i;\n+          if (verbose > 5)\n+            fprintf (file, \";; reorder older found %d\\n\", INSN_UID (insn));\n+          break;\n+        }\n+      else if (cortexa7_younger (file, verbose, insn) && first_younger == -1)\n+        first_younger = i;\n+    }\n+\n+  /* Nothing to reorder because either no younger insn found or insn\n+     that can dual-issue only as older appears before any insn that\n+     can dual-issue as younger.  */\n+  if (first_younger == -1)\n+    {\n+      if (verbose > 5)\n+        fprintf (file, \";; sched_reorder nothing to reorder as no younger\\n\");\n+      return;\n+    }\n+\n+  /* Nothing to reorder because no older-only insn in the ready list.  */\n+  if (first_older_only == -1)\n+    {\n+      if (verbose > 5)\n+        fprintf (file, \";; sched_reorder nothing to reorder as no older_only\\n\");\n+      return;\n+    }\n+\n+  /* Move first_older_only insn before first_younger.  */\n+  if (verbose > 5)\n+    fprintf (file, \";; cortexa7_sched_reorder insn %d before %d\\n\",\n+             INSN_UID(ready [first_older_only]),\n+             INSN_UID(ready [first_younger]));\n+  rtx first_older_only_insn = ready [first_older_only];\n+  for (i = first_older_only; i < first_younger; i++)\n+    {\n+      ready[i] = ready[i+1];\n+    }\n+\n+  ready[i] = first_older_only_insn;\n+  return;\n+}\n+\n+/* Implement TARGET_SCHED_REORDER. */\n+static int\n+arm_sched_reorder (FILE *file, int verbose, rtx *ready, int *n_readyp,\n+                   int clock)\n+{\n+  switch (arm_tune)\n+    {\n+    case cortexa7:\n+      cortexa7_sched_reorder (file, verbose, ready, n_readyp, clock);\n+      break;\n+    default:\n+      /* Do nothing for other cores.  */\n+      break;\n+    }\n+\n+  return arm_issue_rate ();\n+}\n+\n /* This function implements the target macro TARGET_SCHED_ADJUST_COST.\n    It corrects the value of COST based on the relationship between\n    INSN and DEP through the dependence LINK.  It returns the new\n@@ -25480,6 +25642,7 @@ arm_issue_rate (void)\n     case cortexr5:\n     case genericv7a:\n     case cortexa5:\n+    case cortexa7:\n     case cortexa8:\n     case cortexa9:\n     case fa726te:"}, {"sha": "1cb1515b1fa57c6052b68eb8701616c1b80e7416", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffeffdcb913ff6273c6bb95dd4872cd9a4e492c7/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffeffdcb913ff6273c6bb95dd4872cd9a4e492c7/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=ffeffdcb913ff6273c6bb95dd4872cd9a4e492c7", "patch": "@@ -502,15 +502,15 @@\n \n (define_attr \"generic_sched\" \"yes,no\"\n   (const (if_then_else\n-          (ior (eq_attr \"tune\" \"fa526,fa626,fa606te,fa626te,fmp626,fa726te,arm926ejs,arm1020e,arm1026ejs,arm1136js,arm1136jfs,cortexa5,cortexa8,cortexa9,cortexa15,cortexm4\")\n+          (ior (eq_attr \"tune\" \"fa526,fa626,fa606te,fa626te,fmp626,fa726te,arm926ejs,arm1020e,arm1026ejs,arm1136js,arm1136jfs,cortexa5,cortexa7,cortexa8,cortexa9,cortexa15,cortexm4\")\n \t       (eq_attr \"tune_cortexr4\" \"yes\"))\n           (const_string \"no\")\n           (const_string \"yes\"))))\n \n (define_attr \"generic_vfp\" \"yes,no\"\n   (const (if_then_else\n \t  (and (eq_attr \"fpu\" \"vfp\")\n-\t       (eq_attr \"tune\" \"!arm1020e,arm1022e,cortexa5,cortexa8,cortexa9,cortexm4\")\n+\t       (eq_attr \"tune\" \"!arm1020e,arm1022e,cortexa5,cortexa7,cortexa8,cortexa9,cortexm4\")\n \t       (eq_attr \"tune_cortexr4\" \"no\"))\n \t  (const_string \"yes\")\n \t  (const_string \"no\"))))\n@@ -527,6 +527,7 @@\n (include \"fmp626.md\")\n (include \"fa726te.md\")\n (include \"cortex-a5.md\")\n+(include \"cortex-a7.md\")\n (include \"cortex-a8.md\")\n (include \"cortex-a9.md\")\n (include \"cortex-a15.md\")"}, {"sha": "74d4ca0bc3d620f391e27e97dbf491c4d904ba81", "filename": "gcc/config/arm/cortex-a7.md", "status": "added", "additions": 353, "deletions": 0, "changes": 353, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffeffdcb913ff6273c6bb95dd4872cd9a4e492c7/gcc%2Fconfig%2Farm%2Fcortex-a7.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffeffdcb913ff6273c6bb95dd4872cd9a4e492c7/gcc%2Fconfig%2Farm%2Fcortex-a7.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a7.md?ref=ffeffdcb913ff6273c6bb95dd4872cd9a4e492c7", "patch": "@@ -0,0 +1,353 @@\n+;; ARM Cortex-A7 pipeline description\n+;; Copyright (C) 2012 Free Software Foundation, Inc.\n+;;\n+;; Contributed by ARM Ltd.\n+;; Based on cortex-a5.md which was originally contributed by CodeSourcery.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but\n+;; WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+;; General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_automaton \"cortex_a7\")\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;; Functional units.\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+;; The Cortex-A7 pipeline integer and vfp pipeline.  \n+;; The decode is the same for all instructions, so do not model it. \n+;; We only model the first execution stage because\n+;; instructions always advance one stage per cycle in order. \n+;; We model all of the LS, Branch, ALU, MAC and FPU pipelines together. \n+\n+(define_cpu_unit \"cortex_a7_ex1, cortex_a7_ex2\" \"cortex_a7\")\n+\n+(define_reservation \"cortex_a7_both\" \"cortex_a7_ex1+cortex_a7_ex2\")\n+\n+(define_cpu_unit \"cortex_a7_branch\" \"cortex_a7\")\n+\n+;; Cortex-A7 is in order and can dual-issue under limited circumstances.\n+;; ex2 can be reserved only after ex1 is reserved.\n+\n+(final_presence_set \"cortex_a7_ex2\" \"cortex_a7_ex1\")\n+\n+;; Pseudo-unit for blocking the multiply pipeline when a double-precision\n+;; multiply is in progress.\n+\n+(define_cpu_unit \"cortex_a7_fpmul_pipe\" \"cortex_a7\")\n+\n+;; The floating-point add pipeline (ex1/f1 stage), used to model the usage\n+;; of the add pipeline by fmac instructions, etc.\n+\n+(define_cpu_unit \"cortex_a7_fpadd_pipe\" \"cortex_a7\")\n+\n+;; Floating-point div/sqrt (long latency, out-of-order completion).\n+\n+(define_cpu_unit \"cortex_a7_fp_div_sqrt\" \"cortex_a7\")\n+\n+;; Neon pipeline\n+(define_cpu_unit \"cortex_a7_neon\" \"cortex_a7\")\n+\n+(define_reservation \"cortex_a7_all\" \"cortex_a7_both+\\\n+                                     cortex_a7_fpmul_pipe+\\\n+                                     cortex_a7_fpadd_pipe+\\\n+                                     cortex_a7_fp_div_sqrt+\\\n+                                     cortex_a7_neon\")\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;; Branches.\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+;; A direct branch can dual issue either as younger or older instruction,\n+;; but branches cannot dual issue with branches.\n+;; No latency as there is no result.\n+\n+(define_insn_reservation \"cortex_a7_branch\" 0\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (and (eq_attr \"type\" \"branch\")\n+            (eq_attr \"neon_type\" \"none\")))\n+  \"(cortex_a7_ex2|cortex_a7_ex1)+cortex_a7_branch\")\n+\n+;; A call reserves all issue slots. The result is available the next cycle.\n+(define_insn_reservation \"cortex_a7_call\" 1\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (and (eq_attr \"type\" \"call\")\n+            (eq_attr \"neon_type\" \"none\")))\n+  \"cortex_a7_all\")\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;; ALU instructions.\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+;; ALU instruction with an immediate operand can dual-issue.\n+(define_insn_reservation \"cortex_a7_alu_imm\" 2\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (and (ior (eq_attr \"type\" \"simple_alu_imm\")\n+                 (ior (eq_attr \"type\" \"simple_alu_shift\")\n+                      (and (eq_attr \"insn\" \"mov\")\n+                           (not (eq_attr \"length\" \"8\")))))\n+            (eq_attr \"neon_type\" \"none\")))\n+  \"cortex_a7_ex2|cortex_a7_ex1\")\n+\n+;; ALU instruction with register operands can dual-issue\n+;; with a younger immediate-based instruction.\n+(define_insn_reservation \"cortex_a7_alu_reg\" 2\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (and (eq_attr \"type\" \"alu_reg\")\n+            (eq_attr \"neon_type\" \"none\")))\n+  \"cortex_a7_ex1\")\n+\n+(define_insn_reservation \"cortex_a7_alu_shift\" 2\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (and (eq_attr \"type\" \"alu_shift,alu_shift_reg\")\n+            (eq_attr \"neon_type\" \"none\")))\n+  \"cortex_a7_ex1\")\n+\n+;; Forwarding path for unshifted operands.\n+(define_bypass 1 \"cortex_a7_alu_imm,cortex_a7_alu_reg,cortex_a7_alu_shift\"\n+  \"cortex_a7_alu_imm,cortex_a7_alu_reg,cortex_a7_mul\")\n+\n+(define_bypass 1 \"cortex_a7_alu_imm,cortex_a7_alu_reg,cortex_a7_alu_shift\"\n+  \"cortex_a7_store*\"\n+  \"arm_no_early_store_addr_dep\")\n+\n+(define_bypass 1 \"cortex_a7_alu_imm,cortex_a7_alu_reg,cortex_a7_alu_shift\"\n+  \"cortex_a7_alu_shift\"\n+  \"arm_no_early_alu_shift_dep\")\n+\n+;; The multiplier pipeline can forward results from wr stage only so\n+;; there's no need to specify bypasses.\n+;; Multiply instructions cannot dual-issue.\n+\n+(define_insn_reservation \"cortex_a7_mul\" 2\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (and (eq_attr \"type\" \"mult\")\n+            (eq_attr \"neon_type\" \"none\")))\n+  \"cortex_a7_both\")\n+\n+;; The latency depends on the operands, so we use an estimate here.\n+(define_insn_reservation \"cortex_a7_idiv\" 5\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (eq_attr \"insn\" \"udiv,sdiv\"))\n+  \"cortex_a7_all*5\")\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;; Load/store instructions.\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+;; Address-generation happens in the issue stage. \n+;; Double-word accesses can be issued in a single cycle,\n+;; and occupy only one pipeline stage.\n+\n+(define_insn_reservation \"cortex_a7_load1\" 2\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (and (eq_attr \"type\" \"load_byte,load1\")\n+            (eq_attr \"neon_type\" \"none\")))\n+  \"cortex_a7_ex1\")\n+\n+(define_insn_reservation \"cortex_a7_store1\" 0\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (and (eq_attr \"type\" \"store1\")\n+            (eq_attr \"neon_type\" \"none\")))\n+  \"cortex_a7_ex1\")\n+\n+(define_insn_reservation \"cortex_a7_load2\" 2\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (and (eq_attr \"type\" \"load2\")\n+            (eq_attr \"neon_type\" \"none\")))\n+  \"cortex_a7_both\")\n+\n+(define_insn_reservation \"cortex_a7_store2\" 0\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (and (eq_attr \"type\" \"store2\")\n+            (eq_attr \"neon_type\" \"none\")))\n+  \"cortex_a7_both\")\n+\n+(define_insn_reservation \"cortex_a7_load3\" 3\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (and (eq_attr \"type\" \"load3\")\n+            (eq_attr \"neon_type\" \"none\")))\n+  \"cortex_a7_both, cortex_a7_ex1\")\n+\n+(define_insn_reservation \"cortex_a7_store3\" 0\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (and (eq_attr \"type\" \"store4\")\n+            (eq_attr \"neon_type\" \"none\")))\n+  \"cortex_a7_both, cortex_a7_ex1\")\n+\n+(define_insn_reservation \"cortex_a7_load4\" 3\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (and (eq_attr \"type\" \"load4\")\n+            (eq_attr \"neon_type\" \"none\")))\n+  \"cortex_a7_both, cortex_a7_both\")\n+\n+(define_insn_reservation \"cortex_a7_store4\" 0\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (and (eq_attr \"type\" \"store3\")\n+            (eq_attr \"neon_type\" \"none\")))\n+  \"cortex_a7_both, cortex_a7_both\")\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;; Floating-point arithmetic.\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+(define_insn_reservation \"cortex_a7_fpalu\" 4\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (and (eq_attr \"type\" \"ffariths, fadds, ffarithd, faddd, fcpys,\\\n+                             f_cvt, fcmps, fcmpd\")\n+            (eq_attr \"neon_type\" \"none\")))\n+  \"cortex_a7_ex1+cortex_a7_fpadd_pipe\")\n+\n+;; For fconsts and fconstd, 8-bit immediate data is passed directly from\n+;; f1 to f3 (which I think reduces the latency by one cycle).\n+\n+(define_insn_reservation \"cortex_a7_fconst\" 3\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (and (eq_attr \"type\" \"fconsts,fconstd\")\n+            (eq_attr \"neon_type\" \"none\")))\n+  \"cortex_a7_ex1+cortex_a7_fpadd_pipe\")\n+\n+;; We should try not to attempt to issue a single-precision multiplication in\n+;; the middle of a double-precision multiplication operation (the usage of\n+;; cortex_a7_fpmul_pipe).\n+\n+(define_insn_reservation \"cortex_a7_fpmuls\" 4\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (and (eq_attr \"type\" \"fmuls\")\n+            (eq_attr \"neon_type\" \"none\")))\n+  \"cortex_a7_ex1+cortex_a7_fpmul_pipe\")\n+\n+;; For single-precision multiply-accumulate, the add (accumulate) is issued\n+;; whilst the multiply is in F4.  The multiply result can then be forwarded\n+;; from F5 to F1.  The issue unit is only used once (when we first start\n+;; processing the instruction), but the usage of the FP add pipeline could\n+;; block other instructions attempting to use it simultaneously.  We try to\n+;; avoid that using cortex_a7_fpadd_pipe.\n+\n+(define_insn_reservation \"cortex_a7_fpmacs\" 8\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (and (eq_attr \"type\" \"fmacs\")\n+            (eq_attr \"neon_type\" \"none\")))\n+  \"cortex_a7_ex1+cortex_a7_fpmul_pipe, nothing*3, cortex_a7_fpadd_pipe\")\n+\n+;; Non-multiply instructions can issue between two cycles of a\n+;; double-precision multiply. \n+\n+(define_insn_reservation \"cortex_a7_fpmuld\" 7\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (and (eq_attr \"type\" \"fmuld\")\n+            (eq_attr \"neon_type\" \"none\")))\n+  \"cortex_a7_ex1+cortex_a7_fpmul_pipe, cortex_a7_fpmul_pipe*2,\\\n+   cortex_a7_ex1+cortex_a7_fpmul_pipe\")\n+\n+(define_insn_reservation \"cortex_a7_fpmacd\" 11\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (and (eq_attr \"type\" \"fmacd\")\n+            (eq_attr \"neon_type\" \"none\")))\n+  \"cortex_a7_ex1+cortex_a7_fpmul_pipe, cortex_a7_fpmul_pipe*2,\\\n+   cortex_a7_ex1+cortex_a7_fpmul_pipe, nothing*3, cortex_a7_fpadd_pipe\")\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;; Floating-point divide/square root instructions.\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+(define_insn_reservation \"cortex_a7_fdivs\" 16\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (and (eq_attr \"type\" \"fdivs\")\n+            (eq_attr \"neon_type\" \"none\")))\n+  \"cortex_a7_ex1, cortex_a7_fp_div_sqrt * 14\")\n+\n+(define_insn_reservation \"cortex_a7_fdivd\" 29\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (and (eq_attr \"type\" \"fdivd\")\n+            (eq_attr \"neon_type\" \"none\")))\n+  \"cortex_a7_ex1, cortex_a7_fp_div_sqrt * 28\")\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;; VFP to/from core transfers.\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+;; Core-to-VFP transfers.\n+\n+(define_insn_reservation \"cortex_a7_r2f\" 4\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (and (eq_attr \"type\" \"r_2_f\")\n+            (eq_attr \"neon_type\" \"none\")))\n+  \"cortex_a7_both\")\n+\n+(define_insn_reservation \"cortex_a7_f2r\" 2\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (and (eq_attr \"type\" \"f_2_r\")\n+            (eq_attr \"neon_type\" \"none\")))\n+  \"cortex_a7_ex1\")\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;; VFP flag transfer.\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+;; Fuxne: The flag forwarding from fmstat to the second instruction is\n+;; not modeled at present.\n+\n+(define_insn_reservation \"cortex_a7_f_flags\" 4\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (and (eq_attr \"type\" \"f_flag\")\n+            (eq_attr \"neon_type\" \"none\")))\n+  \"cortex_a7_ex1\")\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;; VFP load/store.\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+(define_insn_reservation \"cortex_a7_f_loads\" 4\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (and (eq_attr \"type\" \"f_loads\")\n+            (eq_attr \"neon_type\" \"none\")))\n+  \"cortex_a7_ex1\")\n+\n+(define_insn_reservation \"cortex_a7_f_loadd\" 4\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (and (eq_attr \"type\" \"f_loadd\")\n+            (eq_attr \"neon_type\" \"none\")))\n+  \"cortex_a7_both\")\n+\n+(define_insn_reservation \"cortex_a7_f_stores\" 0\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (and (eq_attr \"type\" \"f_stores\")\n+            (eq_attr \"neon_type\" \"none\")))\n+  \"cortex_a7_ex1\")\n+\n+(define_insn_reservation \"cortex_a7_f_stored\" 0\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (and (eq_attr \"type\" \"f_stored\")\n+            (eq_attr \"neon_type\" \"none\")))\n+  \"cortex_a7_both\")\n+\n+;; Load-to-use for floating-point values has a penalty of one cycle,\n+;; i.e. a latency of two.\n+\n+(define_bypass 2 \"cortex_a7_f_loads, cortex_a7_f_loadd\"\n+                 \"cortex_a7_fpalu, cortex_a7_fpmacs, cortex_a7_fpmuld,\\\n+\t\t  cortex_a7_fpmacd, cortex_a7_fdivs, cortex_a7_fdivd,\\\n+\t\t  cortex_a7_f2r\")\n+\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;; NEON load/store.\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+\n+(define_insn_reservation \"cortex_a7_neon\" 4\n+  (and (eq_attr \"tune\" \"cortexa7\")\n+       (eq_attr \"neon_type\" \"!none\"))\n+  \"cortex_a7_both*2\")"}, {"sha": "2ceb938199ff1230e0d2ae1817c98fda11430d1a", "filename": "gcc/config/arm/t-arm", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffeffdcb913ff6273c6bb95dd4872cd9a4e492c7/gcc%2Fconfig%2Farm%2Ft-arm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffeffdcb913ff6273c6bb95dd4872cd9a4e492c7/gcc%2Fconfig%2Farm%2Ft-arm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm?ref=ffeffdcb913ff6273c6bb95dd4872cd9a4e492c7", "patch": "@@ -32,6 +32,7 @@ MD_INCLUDES=\t$(srcdir)/config/arm/arm1020e.md \\\n \t\t$(srcdir)/config/arm/constraints.md \\\n \t\t$(srcdir)/config/arm/cortex-a15.md \\\n \t\t$(srcdir)/config/arm/cortex-a5.md \\\n+\t\t$(srcdir)/config/arm/cortex-a7.md \\\n \t\t$(srcdir)/config/arm/cortex-a8.md \\\n \t\t$(srcdir)/config/arm/cortex-a8-neon.md \\\n \t\t$(srcdir)/config/arm/cortex-a9.md \\"}]}