{"sha": "2d52a3a19d16f75e57f5278d722e227d29ba4d03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ1MmEzYTE5ZDE2Zjc1ZTU3ZjUyNzhkNzIyZTIyN2QyOWJhNGQwMw==", "commit": {"author": {"name": "Zhenqiang Chen", "email": "zhenqiang.chen@linaro.org", "date": "2014-11-17T05:52:26Z"}, "committer": {"name": "Zhenqiang Chen", "email": "zqchen@gcc.gnu.org", "date": "2014-11-17T05:52:26Z"}, "message": "cfgexpand.c (expand_gimple_cond): Check ccmp.\n\n2014-11-17  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n\n\t* cfgexpand.c (expand_gimple_cond): Check ccmp.\n\t* expmed.c (emit_cstore): Make it global.\n\t* expmed.h: #include \"insn-codes.h\"\n\t(emit_cstore): New prototype.\n\t* expr.c (expand_operands): Make it global.\n\t* expr.h (expand_operands): New prototype.\n\t* optabs.c (get_rtx_code): Make it global.\n\t* optabs.h (get_rtx_code): New prototype.\n\nFrom-SVN: r217640", "tree": {"sha": "f005f7c543c6200411ad017985122790e2488d1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f005f7c543c6200411ad017985122790e2488d1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d52a3a19d16f75e57f5278d722e227d29ba4d03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d52a3a19d16f75e57f5278d722e227d29ba4d03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d52a3a19d16f75e57f5278d722e227d29ba4d03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d52a3a19d16f75e57f5278d722e227d29ba4d03/comments", "author": null, "committer": null, "parents": [{"sha": "2e0f134153b4ac30da86de0a918fadcd4675a153", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e0f134153b4ac30da86de0a918fadcd4675a153", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e0f134153b4ac30da86de0a918fadcd4675a153"}], "stats": {"total": 46, "additions": 37, "deletions": 9}, "files": [{"sha": "16b3e35b5fa0665d63e174fdb1b2ce76a1f38635", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d52a3a19d16f75e57f5278d722e227d29ba4d03/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d52a3a19d16f75e57f5278d722e227d29ba4d03/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d52a3a19d16f75e57f5278d722e227d29ba4d03", "patch": "@@ -1,4 +1,15 @@\n-2014-11-17  Zhenqiang Chen  <zhenqiang.chen@linaor.org>\n+2014-11-17  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n+\n+\t* cfgexpand.c (expand_gimple_cond): Check ccmp.\n+\t* expmed.c (emit_cstore): Make it global.\n+\t* expmed.h: #include \"insn-codes.h\"\n+\t(emit_cstore): New prototype.\n+\t* expr.c (expand_operands): Make it global.\n+\t* expr.h (expand_operands): New prototype.\n+\t* optabs.c (get_rtx_code): Make it global.\n+\t* optabs.h (get_rtx_code): New prototype.\n+\n+2014-11-17  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n \n \t* target.def (gen_ccmp_first, gen_ccmp_first): Add two new hooks.\n \t* doc/tm.texi.in (TARGET_GEN_CCMP_FIRST, TARGET_GEN_CCMP_NEXT): New."}, {"sha": "19e87ecb54c018d24c41a6d36203b7bf3191fdba", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d52a3a19d16f75e57f5278d722e227d29ba4d03/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d52a3a19d16f75e57f5278d722e227d29ba4d03/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=2d52a3a19d16f75e57f5278d722e227d29ba4d03", "patch": "@@ -2129,9 +2129,10 @@ expand_gimple_cond (basic_block bb, gimple stmt)\n \t      op0 = gimple_assign_rhs1 (second);\n \t      op1 = gimple_assign_rhs2 (second);\n \t    }\n-\t  /* If jumps are cheap turn some more codes into\n-\t     jumpy sequences.  */\n-\t  else if (BRANCH_COST (optimize_insn_for_speed_p (), false) < 4)\n+\t  /* If jumps are cheap and the target does not support conditional\n+\t     compare, turn some more codes into jumpy sequences.  */\n+\t  else if (BRANCH_COST (optimize_insn_for_speed_p (), false) < 4\n+\t\t   && targetm.gen_ccmp_first == NULL)\n \t    {\n \t      if ((code2 == BIT_AND_EXPR\n \t\t   && TYPE_PRECISION (TREE_TYPE (op0)) == 1"}, {"sha": "0304e46ebb350c8a9a7ab19a525ac996bb12e15e", "filename": "gcc/expmed.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d52a3a19d16f75e57f5278d722e227d29ba4d03/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d52a3a19d16f75e57f5278d722e227d29ba4d03/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=2d52a3a19d16f75e57f5278d722e227d29ba4d03", "patch": "@@ -5109,7 +5109,7 @@ expand_and (machine_mode mode, rtx op0, rtx op1, rtx target)\n }\n \n /* Helper function for emit_store_flag.  */\n-static rtx\n+rtx\n emit_cstore (rtx target, enum insn_code icode, enum rtx_code code,\n \t     machine_mode mode, machine_mode compare_mode,\n \t     int unsignedp, rtx x, rtx y, int normalizep,"}, {"sha": "41d5d5fd52033a2f56981b1fdb04693f3f0c88b7", "filename": "gcc/expmed.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d52a3a19d16f75e57f5278d722e227d29ba4d03/gcc%2Fexpmed.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d52a3a19d16f75e57f5278d722e227d29ba4d03/gcc%2Fexpmed.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.h?ref=2d52a3a19d16f75e57f5278d722e227d29ba4d03", "patch": "@@ -20,6 +20,8 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef EXPMED_H\n #define EXPMED_H 1\n \n+#include \"insn-codes.h\"\n+\n enum alg_code {\n   alg_unknown,\n   alg_zero,\n@@ -665,4 +667,8 @@ convert_cost (machine_mode to_mode, machine_mode from_mode,\n }\n \n extern int mult_by_coeff_cost (HOST_WIDE_INT, machine_mode, bool);\n+extern rtx emit_cstore (rtx target, enum insn_code icode, enum rtx_code code,\n+\t\t\tenum machine_mode mode, enum machine_mode compare_mode,\n+\t\t\tint unsignedp, rtx x, rtx y, int normalizep,\n+\t\t\tenum machine_mode target_mode);\n #endif"}, {"sha": "7b1cb29043eff31935bdce8f5a162af0bce04842", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d52a3a19d16f75e57f5278d722e227d29ba4d03/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d52a3a19d16f75e57f5278d722e227d29ba4d03/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=2d52a3a19d16f75e57f5278d722e227d29ba4d03", "patch": "@@ -159,8 +159,6 @@ static rtx store_field (rtx, HOST_WIDE_INT, HOST_WIDE_INT,\n static unsigned HOST_WIDE_INT highest_pow2_factor_for_target (const_tree, const_tree);\n \n static int is_aligning_offset (const_tree, const_tree);\n-static void expand_operands (tree, tree, rtx, rtx*, rtx*,\n-\t\t\t     enum expand_modifier);\n static rtx reduce_to_bit_field_precision (rtx, rtx, tree);\n static rtx do_store_flag (sepops, rtx, machine_mode);\n #ifdef PUSH_ROUNDING\n@@ -7573,7 +7571,7 @@ convert_tree_comp_to_rtx (enum tree_code tcode, int unsignedp)\n    The value may be stored in TARGET if TARGET is nonzero.  The\n    MODIFIER argument is as documented by expand_expr.  */\n \n-static void\n+void\n expand_operands (tree exp0, tree exp1, rtx target, rtx *op0, rtx *op1,\n \t\t enum expand_modifier modifier)\n {"}, {"sha": "2f54c359499c8142f2164028e515956736af2792", "filename": "gcc/expr.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d52a3a19d16f75e57f5278d722e227d29ba4d03/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d52a3a19d16f75e57f5278d722e227d29ba4d03/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=2d52a3a19d16f75e57f5278d722e227d29ba4d03", "patch": "@@ -619,4 +619,6 @@ extern bool categorize_ctor_elements (const_tree, HOST_WIDE_INT *,\n    by EXP.  This does not include any offset in DECL_FIELD_BIT_OFFSET.  */\n extern tree component_ref_field_offset (tree);\n \n+extern void expand_operands (tree, tree, rtx, rtx*, rtx*,\n+\t\t\t     enum expand_modifier);\n #endif /* GCC_EXPR_H */"}, {"sha": "35ee7ece9aed4a1f5bd376e47d9ecc701c3bc970", "filename": "gcc/optabs.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d52a3a19d16f75e57f5278d722e227d29ba4d03/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d52a3a19d16f75e57f5278d722e227d29ba4d03/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=2d52a3a19d16f75e57f5278d722e227d29ba4d03", "patch": "@@ -6454,7 +6454,7 @@ gen_cond_trap (enum rtx_code code, rtx op1, rtx op2, rtx tcode)\n /* Return rtx code for TCODE. Use UNSIGNEDP to select signed\n    or unsigned operation code.  */\n \n-static enum rtx_code\n+enum rtx_code\n get_rtx_code (enum tree_code tcode, bool unsignedp)\n {\n   enum rtx_code code;\n@@ -6504,6 +6504,14 @@ get_rtx_code (enum tree_code tcode, bool unsignedp)\n       code = LTGT;\n       break;\n \n+    case BIT_AND_EXPR:\n+      code = AND;\n+      break;\n+\n+    case BIT_IOR_EXPR:\n+      code = IOR;\n+      break;\n+\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "bfb33ef8d76148a5638ac6dd94963e5cada25503", "filename": "gcc/optabs.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d52a3a19d16f75e57f5278d722e227d29ba4d03/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d52a3a19d16f75e57f5278d722e227d29ba4d03/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=2d52a3a19d16f75e57f5278d722e227d29ba4d03", "patch": "@@ -566,4 +566,6 @@ extern bool get_best_mem_extraction_insn (extraction_insn *,\n \n extern bool lshift_cheap_p (bool);\n \n+extern enum rtx_code get_rtx_code (enum tree_code tcode, bool unsignedp);\n+\n #endif /* GCC_OPTABS_H */"}]}