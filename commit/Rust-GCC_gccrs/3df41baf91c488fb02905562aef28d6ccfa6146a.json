{"sha": "3df41baf91c488fb02905562aef28d6ccfa6146a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RmNDFiYWY5MWM0ODhmYjAyOTA1NTYyYWVmMjhkNmNjZmE2MTQ2YQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2010-06-29T13:51:37Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2010-06-29T13:51:37Z"}, "message": "Revert parts of the change for PR25130.\n\n\t* cse.c (exp_equiv_p): For MEMs, if for_gcse, only compare\n\tMEM_ALIAS_SET.\n\nFrom-SVN: r161534", "tree": {"sha": "6f4891ddd4a72cde06b176e32e7c65dcb748eeaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f4891ddd4a72cde06b176e32e7c65dcb748eeaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3df41baf91c488fb02905562aef28d6ccfa6146a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3df41baf91c488fb02905562aef28d6ccfa6146a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3df41baf91c488fb02905562aef28d6ccfa6146a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3df41baf91c488fb02905562aef28d6ccfa6146a/comments", "author": null, "committer": null, "parents": [{"sha": "810c4bf4f02f33cc69d7af5d8c2eeddadd1c380b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/810c4bf4f02f33cc69d7af5d8c2eeddadd1c380b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/810c4bf4f02f33cc69d7af5d8c2eeddadd1c380b"}], "stats": {"total": 26, "additions": 10, "deletions": 16}, "files": [{"sha": "8beace50a8a420a25b7e2ae365656522d50dd228", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df41baf91c488fb02905562aef28d6ccfa6146a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df41baf91c488fb02905562aef28d6ccfa6146a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3df41baf91c488fb02905562aef28d6ccfa6146a", "patch": "@@ -5,6 +5,10 @@\n \t(maddhisi4): Renamed from mulhisi3addsi.  Operands renumbered.\n \t(maddhidi4): Likewise.\n \n+\tRevert parts of the change for PR25130.\n+\t* cse.c (exp_equiv_p): For MEMs, if for_gcse, only compare\n+\tMEM_ALIAS_SET.\n+\n 2010-06-29  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* calls.c, dse.c, expr.c, function.c: Call targetm.calls.function_arg,"}, {"sha": "82921f668616cfd7a8fbc34cae40b29af33bb8e5", "filename": "gcc/cse.c", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df41baf91c488fb02905562aef28d6ccfa6146a/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df41baf91c488fb02905562aef28d6ccfa6146a/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=3df41baf91c488fb02905562aef28d6ccfa6146a", "patch": "@@ -2669,26 +2669,16 @@ exp_equiv_p (const_rtx x, const_rtx y, int validate, bool for_gcse)\n     case MEM:\n       if (for_gcse)\n \t{\n+\t  /* Can't merge two expressions in different alias sets, since we\n+\t     can decide that the expression is transparent in a block when\n+\t     it isn't, due to it being set with the different alias set.  */\n+\t  if (MEM_ALIAS_SET (x) != MEM_ALIAS_SET (y))\n+\t    return 0;\n+\n \t  /* A volatile mem should not be considered equivalent to any\n \t     other.  */\n \t  if (MEM_VOLATILE_P (x) || MEM_VOLATILE_P (y))\n \t    return 0;\n-\n-\t  /* Can't merge two expressions in different alias sets, since we\n-\t     can decide that the expression is transparent in a block when\n-\t     it isn't, due to it being set with the different alias set.\n-\n-\t     Also, can't merge two expressions with different MEM_ATTRS.\n-\t     They could e.g. be two different entities allocated into the\n-\t     same space on the stack (see e.g. PR25130).  In that case, the\n-\t     MEM addresses can be the same, even though the two MEMs are\n-\t     absolutely not equivalent.\n-\n-\t     But because really all MEM attributes should be the same for\n-\t     equivalent MEMs, we just use the invariant that MEMs that have\n-\t     the same attributes share the same mem_attrs data structure.  */\n-\t  if (MEM_ATTRS (x) != MEM_ATTRS (y))\n-\t    return 0;\n \t}\n       break;\n "}]}