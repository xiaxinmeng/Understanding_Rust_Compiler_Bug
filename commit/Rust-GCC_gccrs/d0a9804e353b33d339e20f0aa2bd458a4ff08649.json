{"sha": "d0a9804e353b33d339e20f0aa2bd458a4ff08649", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBhOTgwNGUzNTNiMzNkMzM5ZTIwZjBhYTJiZDQ1OGE0ZmYwODY0OQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2009-10-09T20:34:35Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2009-10-09T20:34:35Z"}, "message": "re PR fortran/41582 ([OOP] Allocation of abstract types requires a type spec or a SOURCE)\n\n2009-10-09  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/41582\n        * decl.c (encapsulate_class_symbol): Save attr.abstract.\n        * resolve.c (resolve_allocate_expr): Reject class allocate\n        without typespec or source=.\n        * trans-stmt.c (gfc_trans_allocate): Change gfc_warning\n        into gfc_error for \"not yet implemented\".\n\n2009-10-09  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/41582\n        * gfortran.dg/class_allocate_1.f03: Modify code such that\n        it compiles with the gfc_warning->gfc_error change.\n        * gfortran.dg/class_allocate_1.f03: New test.\n\nFrom-SVN: r152601", "tree": {"sha": "7eeb58c662060f0443817dc0734fd9cc29a924a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7eeb58c662060f0443817dc0734fd9cc29a924a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0a9804e353b33d339e20f0aa2bd458a4ff08649", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0a9804e353b33d339e20f0aa2bd458a4ff08649", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0a9804e353b33d339e20f0aa2bd458a4ff08649", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0a9804e353b33d339e20f0aa2bd458a4ff08649/comments", "author": null, "committer": null, "parents": [{"sha": "7431bf06bc2bb01a307a796bf4de57d9ca48bb38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7431bf06bc2bb01a307a796bf4de57d9ca48bb38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7431bf06bc2bb01a307a796bf4de57d9ca48bb38"}], "stats": {"total": 75, "additions": 66, "deletions": 9}, "files": [{"sha": "899673d7dc6c6f3247c7927ed06b4dd5f3e19f27", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a9804e353b33d339e20f0aa2bd458a4ff08649/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a9804e353b33d339e20f0aa2bd458a4ff08649/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d0a9804e353b33d339e20f0aa2bd458a4ff08649", "patch": "@@ -1,3 +1,12 @@\n+2009-10-09  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/41582\n+\t* decl.c (encapsulate_class_symbol): Save attr.abstract.\n+\t* resolve.c (resolve_allocate_expr): Reject class allocate\n+\twithout typespec or source=.\n+\t* trans-stmt.c (gfc_trans_allocate): Change gfc_warning\n+\tinto gfc_error for \"not yet implemented\".\n+\n 2009-10-09  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/41579\n@@ -49,8 +58,8 @@\n \n 2009-10-07  Paul Thomas <pault@gcc.gnu.org>\n \n-        PR fortran/41613\n-        * resolve.c (check_class_members): Reset compcall.assign.\n+\tPR fortran/41613\n+\t* resolve.c (check_class_members): Reset compcall.assign.\n \n 2009-10-05  Paul Thomas  <pault@gcc.gnu.org>\n \n@@ -373,7 +382,6 @@\n \t* parse.c (next_free): Improve error locus printing.\n \t(next_fixed): Change gfc_warn to gfc_warning_now, and improve\n \tlocus reporting.\n- \n \n 2009-09-16  Michael Matz  <matz@suse.de>\n "}, {"sha": "2c378fb43e400c5c5dea13d09af166b64a8c0b01", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a9804e353b33d339e20f0aa2bd458a4ff08649/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a9804e353b33d339e20f0aa2bd458a4ff08649/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=d0a9804e353b33d339e20f0aa2bd458a4ff08649", "patch": "@@ -1077,6 +1077,7 @@ encapsulate_class_symbol (gfc_typespec *ts, symbol_attribute *attr,\n       c->attr.pointer = attr->pointer || attr->dummy;\n       c->attr.allocatable = attr->allocatable;\n       c->attr.dimension = attr->dimension;\n+      c->attr.abstract = ts->u.derived->attr.abstract;\n       c->as = (*as);\n       c->initializer = gfc_get_expr ();\n       c->initializer->expr_type = EXPR_NULL;"}, {"sha": "5ea41c9bdf8fe0f9a5d6c48b6083c5c5b733e4f1", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a9804e353b33d339e20f0aa2bd458a4ff08649/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a9804e353b33d339e20f0aa2bd458a4ff08649/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=d0a9804e353b33d339e20f0aa2bd458a4ff08649", "patch": "@@ -5840,7 +5840,7 @@ gfc_expr_to_initialize (gfc_expr *e)\n static gfc_try\n resolve_allocate_expr (gfc_expr *e, gfc_code *code)\n {\n-  int i, pointer, allocatable, dimension, check_intent_in;\n+  int i, pointer, allocatable, dimension, check_intent_in, is_abstract;\n   symbol_attribute attr;\n   gfc_ref *ref, *ref2;\n   gfc_array_ref *ar;\n@@ -5862,6 +5862,9 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code)\n   if (e->symtree)\n     sym = e->symtree->n.sym;\n \n+  /* Check whether ultimate component is abstract and CLASS.  */\n+  is_abstract = 0;\n+\n   if (e->expr_type != EXPR_VARIABLE)\n     {\n       allocatable = 0;\n@@ -5876,6 +5879,7 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code)\n \t  allocatable = sym->ts.u.derived->components->attr.allocatable;\n \t  pointer = sym->ts.u.derived->components->attr.pointer;\n \t  dimension = sym->ts.u.derived->components->attr.dimension;\n+\t  is_abstract = sym->ts.u.derived->components->attr.abstract;\n \t}\n       else\n \t{\n@@ -5903,12 +5907,14 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code)\n \t\t    allocatable = c->ts.u.derived->components->attr.allocatable;\n \t\t    pointer = c->ts.u.derived->components->attr.pointer;\n \t\t    dimension = c->ts.u.derived->components->attr.dimension;\n+\t\t    is_abstract = c->ts.u.derived->components->attr.abstract;\n \t\t  }\n \t\telse\n \t\t  {\n \t\t    allocatable = c->attr.allocatable;\n \t\t    pointer = c->attr.pointer;\n \t\t    dimension = c->attr.dimension;\n+\t\t    is_abstract = c->attr.abstract;\n \t\t  }\n \t\tbreak;\n \n@@ -5927,6 +5933,14 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code)\n       return FAILURE;\n     }\n \n+  if (is_abstract && !code->expr3 && code->ext.alloc.ts.type == BT_UNKNOWN)\n+    {\n+      gcc_assert (e->ts.type == BT_CLASS);\n+      gfc_error (\"Allocating %s of ABSTRACT base type at %L requires a \"\n+\t\t \"type-spec or SOURCE=\", sym->name, &e->where);\n+      return FAILURE;\n+    }\n+\n   if (check_intent_in && sym->attr.intent == INTENT_IN)\n     {\n       gfc_error (\"Cannot allocate INTENT(IN) variable '%s' at %L\","}, {"sha": "110534d2a5eb5fca6b491d0cdc694055b0c0df77", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a9804e353b33d339e20f0aa2bd458a4ff08649/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a9804e353b33d339e20f0aa2bd458a4ff08649/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=d0a9804e353b33d339e20f0aa2bd458a4ff08649", "patch": "@@ -4025,8 +4025,8 @@ gfc_trans_allocate (gfc_code * code)\n \t      gfc_typespec *ts;\n \t      /* TODO: Size must be determined at run time, since it must equal\n \t\t the size of the dynamic type of SOURCE, not the declared type.  */\n-\t      gfc_warning (\"Dynamic size allocation at %L not supported yet, \"\n-\t\t\t   \"using size of declared type\", &code->loc);\n+\t      gfc_error (\"Using SOURCE= with a class variable at %L not \"\n+\t\t\t \"supported yet\", &code->loc);\n \t      ts = &code->expr3->ts.u.derived->components->ts;\n \t      tmp = TYPE_SIZE_UNIT (gfc_typenode_for_spec (ts));\n \t    }"}, {"sha": "ce6dcc2a8e767830e8b8de0e35388927ca9d9b6c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a9804e353b33d339e20f0aa2bd458a4ff08649/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a9804e353b33d339e20f0aa2bd458a4ff08649/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d0a9804e353b33d339e20f0aa2bd458a4ff08649", "patch": "@@ -1,3 +1,10 @@\n+2009-10-09  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/41582\n+\t* gfortran.dg/class_allocate_1.f03: Modify code such that\n+\tit compiles with the gfc_warning->gfc_error change.\n+\t* gfortran.dg/class_allocate_1.f03: New test.\n+\n 2009-10-09  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/41579\n@@ -448,7 +455,7 @@\n \n 2009-10-02  Jack Howarth  <howarth@bromo.med.uc.edu>\n \n-        * gcc.dg/guality/guality.exp: Disable on darwin.\n+\t* gcc.dg/guality/guality.exp: Disable on darwin.\n \n 2009-10-02  Janis Johnson  <janis187@us.ibm.com>\n \n@@ -5543,7 +5550,7 @@\n 2009-05-12  David Billinghurst <billingd@gcc.gnu.org>\n \n \t* lib/target-supports.exp (check_profiling_available): Return\n- \tfalse for -p on *-*-cygwin* targets.\n+\tfalse for -p on *-*-cygwin* targets.\n \n 2009-05-11  H.J. Lu  <hongjiu.lu@intel.com>\n "}, {"sha": "719d90cf8f9b1ab828ebd4f15b809224f26de6e1", "filename": "gcc/testsuite/gfortran.dg/class_allocate_1.f03", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a9804e353b33d339e20f0aa2bd458a4ff08649/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_allocate_1.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a9804e353b33d339e20f0aa2bd458a4ff08649/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_allocate_1.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_allocate_1.f03?ref=d0a9804e353b33d339e20f0aa2bd458a4ff08649", "patch": "@@ -20,6 +20,7 @@\n  end type\n \n  class(t1),pointer :: cp, cp2\n+ type(t2),pointer :: cp3\n  type(t3) :: x\n  integer :: i\n \n@@ -67,7 +68,10 @@\n \n  i = 0\n  allocate(t2 :: cp2)\n- allocate(cp, source = cp2)  ! { dg-warning \"not supported yet\" }\n+! FIXME: Not yet supported: source=<class>\n+! allocate(cp, source = cp2)\n+ allocate(t2 :: cp3)\n+ allocate(cp, source=cp3)\n  select type (cp)\n  type is (t1)\n    i = 1"}, {"sha": "d6a5d78bd758d70ea9994e250208185f3c807d58", "filename": "gcc/testsuite/gfortran.dg/class_allocate_2.f03", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a9804e353b33d339e20f0aa2bd458a4ff08649/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_allocate_2.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a9804e353b33d339e20f0aa2bd458a4ff08649/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_allocate_2.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_allocate_2.f03?ref=d0a9804e353b33d339e20f0aa2bd458a4ff08649", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do compile }\n+!\n+! PR fortran/41582\n+!\n+subroutine test()\n+type :: t\n+end type t\n+class(t), allocatable :: c,d\n+allocate(t :: d)\n+allocate(c,source=d) ! { dg-error \"not supported yet\" }\n+end\n+\n+type, abstract :: t\n+end type t\n+type t2\n+  class(t), pointer :: t\n+end type t2\n+\n+class(t), allocatable :: a,c,d\n+type(t2) :: b\n+allocate(a) ! { dg-error \"requires a type-spec or SOURCE\" }\n+allocate(b%t) ! { dg-error \"requires a type-spec or SOURCE\" }\n+end"}]}