{"sha": "2ee0165f72be96083deaa8fd315bcfed011acd52", "node_id": "C_kwDOANBUbNoAKDJlZTAxNjVmNzJiZTk2MDgzZGVhYThmZDMxNWJjZmVkMDExYWNkNTI", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-11-07T18:29:42Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-11-07T18:29:42Z"}, "message": "libstdc++: Implement ranges::as_rvalue_view from P2446R2\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (as_rvalue_view): Define.\n\t(enable_borrowed_range<as_rvalue_view>): Define.\n\t(views::__detail::__can_as_rvalue_view): Define.\n\t(views::_AsRvalue, views::as_rvalue): Define.\n\t* testsuite/std/ranges/adaptors/as_rvalue/1.cc: New test.", "tree": {"sha": "645f25b7ba7193d94eac43ce3c58c4a85528b1c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/645f25b7ba7193d94eac43ce3c58c4a85528b1c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ee0165f72be96083deaa8fd315bcfed011acd52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ee0165f72be96083deaa8fd315bcfed011acd52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ee0165f72be96083deaa8fd315bcfed011acd52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ee0165f72be96083deaa8fd315bcfed011acd52/comments", "author": null, "committer": null, "parents": [{"sha": "f471cb71c86c1e7a3dead324142bdf880f00a3da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f471cb71c86c1e7a3dead324142bdf880f00a3da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f471cb71c86c1e7a3dead324142bdf880f00a3da"}], "stats": {"total": 137, "additions": 137, "deletions": 0}, "files": [{"sha": "ba544e116e14bec8d70e2e2e00e1907badf39891", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee0165f72be96083deaa8fd315bcfed011acd52/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee0165f72be96083deaa8fd315bcfed011acd52/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=2ee0165f72be96083deaa8fd315bcfed011acd52", "patch": "@@ -8486,6 +8486,96 @@ namespace views::__adaptor\n \n     inline constexpr _CartesianProduct cartesian_product;\n   }\n+\n+  template<input_range _Vp>\n+    requires view<_Vp>\n+  class as_rvalue_view : public view_interface<as_rvalue_view<_Vp>>\n+  {\n+    _Vp _M_base = _Vp();\n+\n+  public:\n+    as_rvalue_view() requires default_initializable<_Vp> = default;\n+\n+    constexpr explicit\n+    as_rvalue_view(_Vp __base)\n+    : _M_base(std::move(__base))\n+    { }\n+\n+    constexpr _Vp\n+    base() const& requires copy_constructible<_Vp>\n+    { return _M_base; }\n+\n+    constexpr _Vp\n+    base() &&\n+    { return std::move(_M_base); }\n+\n+    constexpr auto\n+    begin() requires (!__detail::__simple_view<_Vp>)\n+    { return move_iterator(ranges::begin(_M_base)); }\n+\n+    constexpr auto\n+    begin() const requires range<const _Vp>\n+    { return move_iterator(ranges::begin(_M_base)); }\n+\n+    constexpr auto\n+    end() requires (!__detail::__simple_view<_Vp>)\n+    {\n+      if constexpr (common_range<_Vp>)\n+\treturn move_iterator(ranges::end(_M_base));\n+      else\n+\treturn move_sentinel(ranges::end(_M_base));\n+    }\n+\n+    constexpr auto\n+    end() const requires range<const _Vp>\n+    {\n+      if constexpr (common_range<const _Vp>)\n+\treturn move_iterator(ranges::end(_M_base));\n+      else\n+\treturn move_sentinel(ranges::end(_M_base));\n+    }\n+\n+    constexpr auto\n+    size() requires sized_range<_Vp>\n+    { return ranges::size(_M_base); }\n+\n+    constexpr auto\n+    size() const requires sized_range<const _Vp>\n+    { return ranges::size(_M_base); }\n+  };\n+\n+  template<typename _Range>\n+    as_rvalue_view(_Range&&) -> as_rvalue_view<views::all_t<_Range>>;\n+\n+  template<typename _Tp>\n+    inline constexpr bool enable_borrowed_range<as_rvalue_view<_Tp>>\n+      = enable_borrowed_range<_Tp>;\n+\n+  namespace views\n+  {\n+    namespace __detail\n+    {\n+      template<typename _Tp>\n+\tconcept __can_as_rvalue_view = requires { as_rvalue_view(std::declval<_Tp>()); };\n+    }\n+\n+    struct _AsRvalue : __adaptor::_RangeAdaptorClosure\n+    {\n+      template<viewable_range _Range>\n+\trequires __detail::__can_as_rvalue_view<_Range>\n+\tconstexpr auto\n+\toperator() [[nodiscard]] (_Range&& __r) const\n+\t{\n+\t  if constexpr (same_as<range_rvalue_reference_t<_Range>,\n+\t\t\t\trange_reference_t<_Range>>)\n+\t    return views::all(std::forward<_Range>(__r));\n+\t  else\n+\t    return as_rvalue_view(std::forward<_Range>(__r));\n+\t}\n+    };\n+\n+    inline constexpr _AsRvalue as_rvalue;\n+  }\n #endif // C++23\n } // namespace ranges\n "}, {"sha": "8ca4f50e9d25c69194fec5af1c781da248b3e629", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/as_rvalue/1.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee0165f72be96083deaa8fd315bcfed011acd52/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fas_rvalue%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee0165f72be96083deaa8fd315bcfed011acd52/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fas_rvalue%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fas_rvalue%2F1.cc?ref=2ee0165f72be96083deaa8fd315bcfed011acd52", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do run { target c++23 } }\n+\n+#include <ranges>\n+#include <algorithm>\n+#include <memory>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+namespace ranges = std::ranges;\n+namespace views = std::views;\n+\n+constexpr bool\n+test01()\n+{\n+\n+  std::unique_ptr<int> a[3] = { std::make_unique<int>(1),\n+\t\t\t\tstd::make_unique<int>(2),\n+\t\t\t\tstd::make_unique<int>(3) };\n+  std::unique_ptr<int> b[3];\n+  auto v = a | views::as_rvalue;\n+  ranges::copy(v, b);\n+  VERIFY( ranges::all_of(a, [](auto& p) { return p.get() == nullptr; }) );\n+  VERIFY( ranges::equal(b | views::transform([](auto& p) { return *p; }), (int[]){1, 2, 3}) );\n+\n+  return true;\n+}\n+\n+void\n+test02()\n+{\n+  std::unique_ptr<int> x = std::make_unique<int>(42);\n+  std::unique_ptr<int> y;\n+  __gnu_test::test_input_range rx(&x, &x+1);\n+  auto v = rx | views::as_rvalue;\n+  static_assert(!ranges::common_range<decltype(v)>);\n+  ranges::copy(v, &y);\n+  VERIFY( x.get() == nullptr );\n+  VERIFY( *y == 42 );\n+}\n+\n+int\n+main()\n+{\n+  static_assert(test01());\n+  test02();\n+}"}]}