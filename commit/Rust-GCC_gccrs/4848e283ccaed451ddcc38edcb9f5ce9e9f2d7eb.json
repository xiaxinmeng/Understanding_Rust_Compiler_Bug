{"sha": "4848e283ccaed451ddcc38edcb9f5ce9e9f2d7eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg0OGUyODNjY2FlZDQ1MWRkY2MzOGVkY2I5ZjVjZTllOWYyZDdlYg==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-07-08T22:27:54Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-07-23T11:15:02Z"}, "message": "aarch64: Use memcpy to copy vector tables in vtbx4 intrinsics\n\nUse __builtin_memcpy to copy vector structures instead of building\na new opaque structure one vector at a time in each of the vtbx4\nNeon intrinsics in arm_neon.h. This simplifies the header file and\nalso improves code generation - superfluous move instructions were\nemitted for every register extraction/set in this additional\nstructure.\n\ngcc/ChangeLog:\n\n2021-07-19  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/arm_neon.h (vtbx4_s8): Use __builtin_memcpy\n\tinstead of constructing __builtin_aarch64_simd_oi one vector\n\tat a time.\n\t(vtbx4_u8): Likewise.\n\t(vtbx4_p8): Likewise.", "tree": {"sha": "4ae2831d01b01fc7c3e1ec6865dd55da75e2e8e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ae2831d01b01fc7c3e1ec6865dd55da75e2e8e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4848e283ccaed451ddcc38edcb9f5ce9e9f2d7eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4848e283ccaed451ddcc38edcb9f5ce9e9f2d7eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4848e283ccaed451ddcc38edcb9f5ce9e9f2d7eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4848e283ccaed451ddcc38edcb9f5ce9e9f2d7eb/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2f04d8b9d1f5d4fc8c3a17c7fa5ac518574f2df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2f04d8b9d1f5d4fc8c3a17c7fa5ac518574f2df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2f04d8b9d1f5d4fc8c3a17c7fa5ac518574f2df"}], "stats": {"total": 15, "additions": 3, "deletions": 12}, "files": [{"sha": "d383af30fe701deb0b8a2ac327e9da2cae0bff78", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4848e283ccaed451ddcc38edcb9f5ce9e9f2d7eb/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4848e283ccaed451ddcc38edcb9f5ce9e9f2d7eb/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=4848e283ccaed451ddcc38edcb9f5ce9e9f2d7eb", "patch": "@@ -28417,10 +28417,7 @@ vtbx4_s8 (int8x8_t __r, int8x8x4_t __tab, int8x8_t __idx)\n   __builtin_aarch64_simd_oi __o;\n   __temp.val[0] = vcombine_s8 (__tab.val[0], __tab.val[1]);\n   __temp.val[1] = vcombine_s8 (__tab.val[2], __tab.val[3]);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o,\n-\t\t\t\t\t   (int8x16_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o,\n-\t\t\t\t\t   (int8x16_t) __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   return __builtin_aarch64_qtbx2v8qi (__r, __o, __idx);\n }\n \n@@ -28432,10 +28429,7 @@ vtbx4_u8 (uint8x8_t __r, uint8x8x4_t __tab, uint8x8_t __idx)\n   __builtin_aarch64_simd_oi __o;\n   __temp.val[0] = vcombine_u8 (__tab.val[0], __tab.val[1]);\n   __temp.val[1] = vcombine_u8 (__tab.val[2], __tab.val[3]);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o,\n-\t\t\t\t\t   (int8x16_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o,\n-\t\t\t\t\t   (int8x16_t) __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   return (uint8x8_t)__builtin_aarch64_qtbx2v8qi ((int8x8_t)__r, __o,\n \t\t\t\t\t\t (int8x8_t)__idx);\n }\n@@ -28448,10 +28442,7 @@ vtbx4_p8 (poly8x8_t __r, poly8x8x4_t __tab, uint8x8_t __idx)\n   __builtin_aarch64_simd_oi __o;\n   __temp.val[0] = vcombine_p8 (__tab.val[0], __tab.val[1]);\n   __temp.val[1] = vcombine_p8 (__tab.val[2], __tab.val[3]);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o,\n-\t\t\t\t\t   (int8x16_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o,\n-\t\t\t\t\t   (int8x16_t) __temp.val[1], 1);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   return (poly8x8_t)__builtin_aarch64_qtbx2v8qi ((int8x8_t)__r, __o,\n \t\t\t\t\t\t (int8x8_t)__idx);\n }"}]}