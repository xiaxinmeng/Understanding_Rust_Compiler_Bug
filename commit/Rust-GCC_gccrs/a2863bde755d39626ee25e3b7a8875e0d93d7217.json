{"sha": "a2863bde755d39626ee25e3b7a8875e0d93d7217", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI4NjNiZGU3NTVkMzk2MjZlZTI1ZTNiN2E4ODc1ZTBkOTNkNzIxNw==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2016-12-01T16:23:21Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2016-12-01T16:23:21Z"}, "message": "Implement LWG 2766,\n\nSwapping non-swappable types and LWG 2749,\nswappable traits for variants.\n* include/bits/move.h (swap(_Tp&, _Tp&)): Constrain\nwith __is_tuple_like.\n* include/bits/stl_pair.h (swap(pair<_T1, _T2>&, pair<_T1, _T2>&)):\nAdd a deleted overload.\n* include/bits/unique_ptr.h\n(swap(unique_ptr<_Tp, _Dp>&, unique_ptr<_Tp, _Dp>&)): Likewise.\n* include/std/array\n(swap(array<_Tp, _Nm>&, array<_Tp, _Nm>&)): Likewise.\n* include/std/optional\n(swap(optional<_Tp>&, optional<_Tp>&)): Likewise.\n* include/std/tuple (__is_tuple_like_impl, __is_tuple_like):\nMove to type_traits.\n(swap(tuple<_Elements...>&, tuple<_Elements...>&)): Add a deleted\noverload.\n* include/std/type_traits (__is_tuple_like_impl, __is_tuple_like):\nNew.\n(swap(_Tp&, _Tp&)): Constrain with __is_tuple_like.\n* include/std/utility (__is_tuple_like_impl): Move to type_traits.\n* include/std/variant\n(swap(variant<_Types...>&, variant<_Types...>&)):\nAdd a deleted overload.\n* testsuite/20_util/optional/swap/2.cc: Add tests for disabled\nswaps.\n* testsuite/20_util/pair/swap_cxx17.cc: New.\n* testsuite/20_util/tuple/swap_cxx17.cc: Likewise.\n* testsuite/20_util/unique_ptr/specialized_algorithms/swap_cxx17.cc:\nLikewise.\n* testsuite/20_util/variant/compile.cc: Add tests for disabled\nswaps.\n* testsuite/23_containers/array/specialized_algorithms/swap_cxx17.cc:\nNew.\n* testsuite/23_containers/array/tuple_interface/get_neg.cc: Adjust.\n* testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc:\nLikewise.\n\nFrom-SVN: r243120", "tree": {"sha": "a2bd7318c8afb8108d1a4d091102ab832cc467bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2bd7318c8afb8108d1a4d091102ab832cc467bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2863bde755d39626ee25e3b7a8875e0d93d7217", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2863bde755d39626ee25e3b7a8875e0d93d7217", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2863bde755d39626ee25e3b7a8875e0d93d7217", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2863bde755d39626ee25e3b7a8875e0d93d7217/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9c21e2a4f44175eab8588d794a3ea3ce2fa8d0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9c21e2a4f44175eab8588d794a3ea3ce2fa8d0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9c21e2a4f44175eab8588d794a3ea3ce2fa8d0b"}], "stats": {"total": 294, "additions": 270, "deletions": 24}, "files": [{"sha": "21404f16bfaac325bab4ef3058c895056d8ed56e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a2863bde755d39626ee25e3b7a8875e0d93d7217", "patch": "@@ -1,3 +1,43 @@\n+2016-12-01  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement LWG 2766,\n+\tSwapping non-swappable types and LWG 2749,\n+\tswappable traits for variants.\n+\t* include/bits/move.h (swap(_Tp&, _Tp&)): Constrain\n+\twith __is_tuple_like.\n+\t* include/bits/stl_pair.h (swap(pair<_T1, _T2>&, pair<_T1, _T2>&)):\n+\tAdd a deleted overload.\n+\t* include/bits/unique_ptr.h\n+\t(swap(unique_ptr<_Tp, _Dp>&, unique_ptr<_Tp, _Dp>&)): Likewise.\n+\t* include/std/array\n+\t(swap(array<_Tp, _Nm>&, array<_Tp, _Nm>&)): Likewise.\n+\t* include/std/optional\n+\t(swap(optional<_Tp>&, optional<_Tp>&)): Likewise.\n+\t* include/std/tuple (__is_tuple_like_impl, __is_tuple_like):\n+\tMove to type_traits.\n+\t(swap(tuple<_Elements...>&, tuple<_Elements...>&)): Add a deleted\n+\toverload.\n+\t* include/std/type_traits (__is_tuple_like_impl, __is_tuple_like):\n+\tNew.\n+\t(swap(_Tp&, _Tp&)): Constrain with __is_tuple_like.\n+\t* include/std/utility (__is_tuple_like_impl): Move to type_traits.\n+\t* include/std/variant\n+\t(swap(variant<_Types...>&, variant<_Types...>&)):\n+\tAdd a deleted overload.\n+\t* testsuite/20_util/optional/swap/2.cc: Add tests for disabled\n+\tswaps.\n+\t* testsuite/20_util/pair/swap_cxx17.cc: New.\n+\t* testsuite/20_util/tuple/swap_cxx17.cc: Likewise.\n+\t* testsuite/20_util/unique_ptr/specialized_algorithms/swap_cxx17.cc:\n+\tLikewise.\n+\t* testsuite/20_util/variant/compile.cc: Add tests for disabled\n+\tswaps.\n+\t* testsuite/23_containers/array/specialized_algorithms/swap_cxx17.cc:\n+\tNew.\n+\t* testsuite/23_containers/array/tuple_interface/get_neg.cc: Adjust.\n+\t* testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc:\n+\tLikewise.\n+\n 2016-12-01  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tThe convertible_to traits need to use a variadic catch-all for the"}, {"sha": "0bd11d65fa59d895a1f7e90d1e38c589dca9feac", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=a2863bde755d39626ee25e3b7a8875e0d93d7217", "patch": "@@ -181,7 +181,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     inline\n #if __cplusplus >= 201103L\n-    typename enable_if<__and_<is_move_constructible<_Tp>,\n+    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,\n+\t\t\t      is_move_constructible<_Tp>,\n \t\t\t      is_move_assignable<_Tp>>::value>::type\n     swap(_Tp& __a, _Tp& __b)\n     noexcept(__and_<is_nothrow_move_constructible<_Tp>,"}, {"sha": "981dbeb6875327d15b2d5b9dd43f269cbfe37032", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=a2863bde755d39626ee25e3b7a8875e0d93d7217", "patch": "@@ -478,6 +478,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)\n     noexcept(noexcept(__x.swap(__y)))\n     { __x.swap(__y); }\n+\n+#if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n+  template<typename _T1, typename _T2>\n+    inline\n+    typename enable_if<!__and_<__is_swappable<_T1>,\n+\t\t\t       __is_swappable<_T2>>::value>::type\n+    swap(pair<_T1, _T2>&, pair<_T1, _T2>&) = delete;\n+#endif\n #endif // __cplusplus >= 201103L\n \n   /**"}, {"sha": "03f9bfc7d1fa1dd62741a81b15be9684999349d5", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=a2863bde755d39626ee25e3b7a8875e0d93d7217", "patch": "@@ -650,6 +650,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t unique_ptr<_Tp, _Dp>& __y) noexcept\n     { __x.swap(__y); }\n \n+#if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n+  template<typename _Tp, typename _Dp>\n+    inline\n+    typename enable_if<!__is_swappable<_Dp>::value>::type\n+    swap(unique_ptr<_Tp, _Dp>&,\n+\t unique_ptr<_Tp, _Dp>&) = delete;\n+#endif\n+\n   template<typename _Tp, typename _Dp,\n \t   typename _Up, typename _Ep>\n     inline bool"}, {"sha": "fa7bac6cfbe819b7fdaa82942003fa5530abb393", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=a2863bde755d39626ee25e3b7a8875e0d93d7217", "patch": "@@ -288,6 +288,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     noexcept(noexcept(__one.swap(__two)))\n     { __one.swap(__two); }\n \n+#if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n+  template<typename _Tp, std::size_t _Nm>\n+    inline\n+    typename enable_if<\n+      !_GLIBCXX_STD_C::__array_traits<_Tp, _Nm>::_Is_swappable::value>::type\n+    swap(array<_Tp, _Nm>&, array<_Tp, _Nm>&) = delete;\n+#endif\n+\n   template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n     constexpr _Tp&\n     get(array<_Tp, _Nm>& __arr) noexcept"}, {"sha": "191d64ba90254c1f6d3ee1e2912ad006de75d366", "filename": "libstdc++-v3/include/std/optional", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional?ref=a2863bde755d39626ee25e3b7a8875e0d93d7217", "patch": "@@ -929,6 +929,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     noexcept(noexcept(__lhs.swap(__rhs)))\n     { __lhs.swap(__rhs); }\n \n+  template<typename _Tp>\n+    inline enable_if_t<!(is_move_constructible_v<_Tp> && is_swappable_v<_Tp>)>\n+    swap(optional<_Tp>&, optional<_Tp>&) = delete;\n+\n   template<typename _Tp>\n     constexpr optional<decay_t<_Tp>>\n     make_optional(_Tp&& __t)"}, {"sha": "fb2fd177aee8ec90ecc5c8ecdef6872a6553de61", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=a2863bde755d39626ee25e3b7a8875e0d93d7217", "patch": "@@ -1442,17 +1442,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     forward_as_tuple(_Elements&&... __args) noexcept\n     { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }\n \n-  template<typename... _Tps>\n-    struct __is_tuple_like_impl<tuple<_Tps...>> : true_type\n-    { };\n-\n-  // Internal type trait that allows us to sfinae-protect tuple_cat.\n-  template<typename _Tp>\n-    struct __is_tuple_like\n-    : public __is_tuple_like_impl<typename std::remove_cv\n-            <typename std::remove_reference<_Tp>::type>::type>::type\n-    { };\n-\n   template<size_t, typename, typename, size_t>\n     struct __make_tuple_impl;\n \n@@ -1597,6 +1586,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     noexcept(noexcept(__x.swap(__y)))\n     { __x.swap(__y); }\n \n+#if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n+  template<typename... _Elements>\n+    inline\n+    typename enable_if<!__and_<__is_swappable<_Elements>...>::value>::type\n+    swap(tuple<_Elements...>&, tuple<_Elements...>&) = delete;\n+#endif\n+\n   // A class (and instance) which can be used in 'tie' when an element\n   // of a tuple is not required\n   struct _Swallow_assign"}, {"sha": "f164f7158b164091b642d1043c2cd29d346916c1", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=a2863bde755d39626ee25e3b7a8875e0d93d7217", "patch": "@@ -2593,9 +2593,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template <typename _Tp>\n     struct __is_nothrow_swappable;\n \n+  template<typename... _Elements>\n+    class tuple;\n+\n+  template<typename>\n+    struct __is_tuple_like_impl : false_type\n+    { };\n+\n+  template<typename... _Tps>\n+    struct __is_tuple_like_impl<tuple<_Tps...>> : true_type\n+    { };\n+\n+  // Internal type trait that allows us to sfinae-protect tuple_cat.\n+  template<typename _Tp>\n+    struct __is_tuple_like\n+    : public __is_tuple_like_impl<typename remove_cv<\n+      typename remove_reference<_Tp>::type>::type>::type\n+    { };\n+\n   template<typename _Tp>\n     inline\n-    typename enable_if<__and_<is_move_constructible<_Tp>,\n+    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,\n+\t\t\t      is_move_constructible<_Tp>,\n \t\t\t      is_move_assignable<_Tp>>::value>::type\n     swap(_Tp&, _Tp&)\n     noexcept(__and_<is_nothrow_move_constructible<_Tp>,"}, {"sha": "8e02f0e5e7a3c2a05e1c5efdd8119edf3f3d0bd2", "filename": "libstdc++-v3/include/std/utility", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility?ref=a2863bde755d39626ee25e3b7a8875e0d93d7217", "patch": "@@ -140,10 +140,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     using tuple_element_t = typename tuple_element<__i, _Tp>::type;\n #endif\n \n-  template<typename>\n-    struct __is_tuple_like_impl : false_type\n-    { };\n-\n   // Various functions which give std::pair a tuple-like interface.\n \n   /// Partial specialization for std::pair"}, {"sha": "89ca97986094dea61c1e3b170d49b0055aa15063", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=a2863bde755d39626ee25e3b7a8875e0d93d7217", "patch": "@@ -889,10 +889,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return false; }\n \n   template<typename... _Types>\n-    inline auto swap(variant<_Types...>& __lhs, variant<_Types...>& __rhs)\n-    noexcept(noexcept(__lhs.swap(__rhs))) -> decltype(__lhs.swap(__rhs))\n+    inline enable_if_t<__and_<is_move_constructible<_Types>...,\n+\t\t\t      is_swappable<_Types>...>::value>\n+    swap(variant<_Types...>& __lhs, variant<_Types...>& __rhs)\n+    noexcept(noexcept(__lhs.swap(__rhs)))\n     { __lhs.swap(__rhs); }\n \n+  template<typename... _Types>\n+    inline enable_if_t<!__and_<is_move_constructible<_Types>...,\n+\t\t\t       is_swappable<_Types>...>::value>\n+    swap(variant<_Types...>&, variant<_Types...>&) = delete;\n+\n   class bad_variant_access : public exception\n   {\n   public:"}, {"sha": "cb9291aada74bdb13a9f4ce36f7b802fc9a2c5c6", "filename": "libstdc++-v3/testsuite/20_util/optional/swap/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fswap%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fswap%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fswap%2F2.cc?ref=a2863bde755d39626ee25e3b7a8875e0d93d7217", "patch": "@@ -33,11 +33,11 @@ void swap(B&, B&) noexcept(false);\n static_assert( std::is_swappable_v<std::optional<B>> );\n static_assert( !std::is_nothrow_swappable_v<std::optional<B>> );\n \n-// Not swappable, but optional<C> is swappable via the generic std::swap.\n+// Not swappable, and optional<C> not swappable via the generic std::swap.\n struct C { };\n void swap(C&, C&) = delete;\n \n-static_assert( std::is_swappable_v<std::optional<C>> );\n+static_assert( !std::is_swappable_v<std::optional<C>> );\n \n // Not swappable, and optional<D> not swappable via the generic std::swap.\n struct D { D(D&&) = delete; };"}, {"sha": "6b09f42e7f7c75c9b591dd44c34295d954d383b0", "filename": "libstdc++-v3/testsuite/20_util/pair/swap_cxx17.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fswap_cxx17.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fswap_cxx17.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fswap_cxx17.cc?ref=a2863bde755d39626ee25e3b7a8875e0d93d7217", "patch": "@@ -0,0 +1,35 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <utility>\n+\n+// Not swappable, and pair not swappable via the generic std::swap.\n+struct C { };\n+void swap(C&, C&) = delete;\n+\n+static_assert( !std::is_swappable_v<std::pair<int, C>> );\n+static_assert( !std::is_swappable_v<std::pair<C, int>> );\n+\n+// Not swappable, and pair not swappable via the generic std::swap.\n+struct D { D(D&&) = delete; };\n+\n+static_assert( !std::is_swappable_v<std::pair<int, D>> );\n+static_assert( !std::is_swappable_v<std::pair<D, int>> );"}, {"sha": "d2a75ce1103a9c6560d7b683bcf5e7eb13e67435", "filename": "libstdc++-v3/testsuite/20_util/tuple/swap_cxx17.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fswap_cxx17.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fswap_cxx17.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fswap_cxx17.cc?ref=a2863bde755d39626ee25e3b7a8875e0d93d7217", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+// NOTE: This makes use of the fact that we know how moveable\n+// is implemented on tuple.  If the implementation changed\n+// this test may begin to fail.\n+\n+#include <tuple>\n+\n+// Not swappable, and tuple not swappable via the generic std::swap.\n+struct C { };\n+void swap(C&, C&) = delete;\n+\n+static_assert( !std::is_swappable_v<std::tuple<int, C>> );\n+static_assert( !std::is_swappable_v<std::tuple<C, int>> );\n+static_assert( !std::is_swappable_v<std::tuple<int, int, C>> );\n+static_assert( !std::is_swappable_v<std::tuple<C, int, int>> );\n+\n+// Not swappable, and tuple not swappable via the generic std::swap.\n+struct D { D(D&&) = delete; };\n+\n+static_assert( !std::is_swappable_v<std::tuple<int, D>> );\n+static_assert( !std::is_swappable_v<std::tuple<D, int>> );\n+static_assert( !std::is_swappable_v<std::tuple<int, int, D>> );\n+static_assert( !std::is_swappable_v<std::tuple<D, int, int>> );"}, {"sha": "bf106ec8466639509b611dcc63affaabb47f7ee9", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/specialized_algorithms/swap_cxx17.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fspecialized_algorithms%2Fswap_cxx17.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fspecialized_algorithms%2Fswap_cxx17.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fspecialized_algorithms%2Fswap_cxx17.cc?ref=a2863bde755d39626ee25e3b7a8875e0d93d7217", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <memory>\n+\n+// Not swappable, and unique_ptr not swappable via the generic std::swap.\n+struct C { };\n+void swap(C&, C&) = delete;\n+\n+static_assert( !std::is_swappable_v<std::unique_ptr<int, C>> );\n+\n+// Not swappable, and unique_ptr not swappable via the generic std::swap.\n+struct D { D(D&&) = delete; };\n+\n+static_assert( !std::is_swappable_v<std::unique_ptr<int, D>> );\n+"}, {"sha": "8250a9522f8d10f4d133e5f5089c3835510cdccc", "filename": "libstdc++-v3/testsuite/20_util/variant/compile.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc?ref=a2863bde755d39626ee25e3b7a8875e0d93d7217", "patch": "@@ -219,6 +219,21 @@ void test_relational()\n   }\n }\n \n+// Not swappable, and variant<C> not swappable via the generic std::swap.\n+struct C { };\n+void swap(C&, C&) = delete;\n+\n+static_assert( !std::is_swappable_v<variant<C>> );\n+static_assert( !std::is_swappable_v<variant<int, C>> );\n+static_assert( !std::is_swappable_v<variant<C, int>> );\n+\n+// Not swappable, and variant<D> not swappable via the generic std::swap.\n+struct D { D(D&&) = delete; };\n+\n+static_assert( !std::is_swappable_v<variant<D>> );\n+static_assert( !std::is_swappable_v<variant<int, D>> );\n+static_assert( !std::is_swappable_v<variant<D, int>> );\n+\n void test_swap()\n {\n   variant<int, string> a, b;"}, {"sha": "2e93c4d9bd935ede1f35d13edeea9573ba48df33", "filename": "libstdc++-v3/testsuite/23_containers/array/specialized_algorithms/swap_cxx17.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fspecialized_algorithms%2Fswap_cxx17.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fspecialized_algorithms%2Fswap_cxx17.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fspecialized_algorithms%2Fswap_cxx17.cc?ref=a2863bde755d39626ee25e3b7a8875e0d93d7217", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+\n+// Not swappable, and pair not swappable via the generic std::swap.\n+struct C { };\n+void swap(C&, C&) = delete;\n+\n+static_assert( !std::is_swappable_v<std::array<C, 42>> );\n+\n+// Not swappable, and pair not swappable via the generic std::swap.\n+struct D { D(D&&) = delete; };\n+\n+static_assert( !std::is_swappable_v<std::array<D, 42>> );\n+"}, {"sha": "568ec850a394858c3114fa60f62150852dea2c8b", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/get_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc?ref=a2863bde755d39626ee25e3b7a8875e0d93d7217", "patch": "@@ -27,6 +27,6 @@ int n1 = std::get<1>(a);\n int n2 = std::get<1>(std::move(a));\n int n3 = std::get<1>(ca);\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 295 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 304 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 303 }\n // { dg-error \"static assertion failed\" \"\" { target *-*-* } 312 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 320 }"}, {"sha": "32cb10b7dc21b2651969a427848be0b67e94aee1", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2863bde755d39626ee25e3b7a8875e0d93d7217/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc?ref=a2863bde755d39626ee25e3b7a8875e0d93d7217", "patch": "@@ -22,4 +22,4 @@\n \n typedef std::tuple_element<1, std::array<int, 1>>::type type;\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 343 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 351 }"}]}