{"sha": "8423e57caae976cddbc1f9f68ebf6fef595cae83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQyM2U1N2NhYWU5NzZjZGRiYzFmOWY2OGViZjZmZWY1OTVjYWU4Mw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2015-08-02T23:14:18Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2015-08-02T23:14:18Z"}, "message": "c.opt (-Wframe-address): New warning option.\n\ngcc/ChangeLog\n2015-07-28  Martin Sebor  <msebor@redhat.com>\n\n    * c-family/c.opt (-Wframe-address): New warning option.\n    * doc/invoke.texi (Wframe-address): Document it.\n    * doc/extend.texi (__builtin_frame_address, __builtin_return_address):\n    Clarify possible effects of calling the functions with non-zero\n    arguments and mention -Wframe-address.\n    * builtins.c (expand_builtin_frame_address): Handle -Wframe-address.\n\ngcc/testsuite/ChangeLog\n2015-07-28  Martin Sebor  <msebor@redhat.com>\n\n    * g++.dg/Wframe-address-in-Wall.C: New test.\n    * g++.dg/Wframe-address.C: New test.\n    * g++.dg/Wno-frame-address.C: New test.\n    * gcc.dg/Wframe-address-in-Wall.c: New test.\n    * gcc.dg/Wframe-address.c: New test.\n    * gcc.dg/Wno-frame-address.c: New test.\n\nFrom-SVN: r226480", "tree": {"sha": "97746f9a2a68398bc9ae1064c1bc4e81ce8b48ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97746f9a2a68398bc9ae1064c1bc4e81ce8b48ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8423e57caae976cddbc1f9f68ebf6fef595cae83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8423e57caae976cddbc1f9f68ebf6fef595cae83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8423e57caae976cddbc1f9f68ebf6fef595cae83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8423e57caae976cddbc1f9f68ebf6fef595cae83/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8ebca419e837774146ef77574580456107d7315b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ebca419e837774146ef77574580456107d7315b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ebca419e837774146ef77574580456107d7315b"}], "stats": {"total": 237, "additions": 220, "deletions": 17}, "files": [{"sha": "25cb049708e4dd469f9e47082b4caa4a782cec10", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8423e57caae976cddbc1f9f68ebf6fef595cae83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8423e57caae976cddbc1f9f68ebf6fef595cae83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8423e57caae976cddbc1f9f68ebf6fef595cae83", "patch": "@@ -1,3 +1,12 @@\n+2015-08-02  Martin Sebor  <msebor@redhat.com>\n+\n+\t* c-family/c.opt (-Wframe-address): New warning option.\n+\t* doc/invoke.texi (Wframe-address): Document it.\n+\t* doc/extend.texi (__builtin_frame_address, __builtin_return_address):\n+\tClarify possible effects of calling the functions with non-zero\n+\targuments and mention -Wframe-address.\n+\t* builtins.c (expand_builtin_frame_address): Handle -Wframe-address.\n+\n 2015-08-01  Michael Collison  <michael.collison@linaro.org\n \t    Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n "}, {"sha": "eb7b7b2bbacff325ad1ad67760dc2208e6a795eb", "filename": "gcc/builtins.c", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8423e57caae976cddbc1f9f68ebf6fef595cae83/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8423e57caae976cddbc1f9f68ebf6fef595cae83/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=8423e57caae976cddbc1f9f68ebf6fef595cae83", "patch": "@@ -4551,34 +4551,38 @@ expand_builtin_frame_address (tree fndecl, tree exp)\n {\n   /* The argument must be a nonnegative integer constant.\n      It counts the number of frames to scan up the stack.\n-     The value is the return address saved in that frame.  */\n+     The value is either the frame pointer value or the return\n+     address saved in that frame.  */\n   if (call_expr_nargs (exp) == 0)\n     /* Warning about missing arg was already issued.  */\n     return const0_rtx;\n   else if (! tree_fits_uhwi_p (CALL_EXPR_ARG (exp, 0)))\n     {\n-      if (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_FRAME_ADDRESS)\n-\terror (\"invalid argument to %<__builtin_frame_address%>\");\n-      else\n-\terror (\"invalid argument to %<__builtin_return_address%>\");\n+      error (\"invalid argument to %qD\", fndecl);\n       return const0_rtx;\n     }\n   else\n     {\n-      rtx tem\n-\t= expand_builtin_return_addr (DECL_FUNCTION_CODE (fndecl),\n-\t\t\t\t      tree_to_uhwi (CALL_EXPR_ARG (exp, 0)));\n+      /* Number of frames to scan up the stack.  */\n+      unsigned HOST_WIDE_INT count = tree_to_uhwi (CALL_EXPR_ARG (exp, 0));\n+\n+      rtx tem = expand_builtin_return_addr (DECL_FUNCTION_CODE (fndecl), count);\n \n       /* Some ports cannot access arbitrary stack frames.  */\n       if (tem == NULL)\n \t{\n-\t  if (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_FRAME_ADDRESS)\n-\t    warning (0, \"unsupported argument to %<__builtin_frame_address%>\");\n-\t  else\n-\t    warning (0, \"unsupported argument to %<__builtin_return_address%>\");\n+\t  warning (0, \"unsupported argument to %qD\", fndecl);\n \t  return const0_rtx;\n \t}\n \n+      if (count)\n+\t{\n+\t  /* Warn since no effort is made to ensure that any frame\n+\t     beyond the current one exists or can be safely reached.  */\n+\t  warning (OPT_Wframe_address, \"calling %qD with \"\n+\t\t   \"a nonzero argument is unsafe\", fndecl);\n+\t}\n+\n       /* For __builtin_frame_address, return what we've got.  */\n       if (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_FRAME_ADDRESS)\n \treturn tem;"}, {"sha": "4679038c90bd31292a6e1cc2e930f9286e662d8e", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8423e57caae976cddbc1f9f68ebf6fef595cae83/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8423e57caae976cddbc1f9f68ebf6fef595cae83/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=8423e57caae976cddbc1f9f68ebf6fef595cae83", "patch": "@@ -295,6 +295,10 @@ Wbool-compare\n C ObjC C++ ObjC++ Var(warn_bool_compare) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn about boolean expression compared with an integer value different from true/false\n \n+Wframe-address\n+C ObjC C++ ObjC++ Var(warn_frame_address) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n+Warn when __builtin_frame_address or __builtin_return_address is used unsafely\n+\n Wbuiltin-macro-redefined\n C ObjC C++ ObjC++ CPP(warn_builtin_macro_redefined) CppReason(CPP_W_BUILTIN_MACRO_REDEFINED) Var(cpp_warn_builtin_macro_redefined) Init(1) Warning\n Warn when a built-in preprocessor macro is undefined or redefined"}, {"sha": "9bf292ecdef1e584891855d14a28e7a40dc1416d", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8423e57caae976cddbc1f9f68ebf6fef595cae83/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8423e57caae976cddbc1f9f68ebf6fef595cae83/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=8423e57caae976cddbc1f9f68ebf6fef595cae83", "patch": "@@ -8652,8 +8652,11 @@ to determine if the top of the stack has been reached.\n Additional post-processing of the returned value may be needed, see\n @code{__builtin_extract_return_addr}.\n \n-This function should only be used with a nonzero argument for debugging\n-purposes.\n+Calling this function with a nonzero argument can have unpredictable\n+effects, including crashing the calling program.  As a result, calls\n+that are considered unsafe are diagnosed when the @option{-Wframe-address}\n+option is in effect.  Such calls should only be made in debugging\n+situations.\n @end deftypefn\n \n @deftypefn {Built-in Function} {void *} __builtin_extract_return_addr (void *@var{addr})\n@@ -8691,8 +8694,11 @@ any function other than the current one; in such cases, or when the top\n of the stack has been reached, this function returns @code{0} if\n the first frame pointer is properly initialized by the startup code.\n \n-This function should only be used with a nonzero argument for debugging\n-purposes.\n+Calling this function with a nonzero argument can have unpredictable\n+effects, including crashing the calling program.  As a result, calls\n+that are considered unsafe are diagnosed when the @option{-Wframe-address}\n+option is in effect.  Such calls should only be made in debugging\n+situations.\n @end deftypefn\n \n @node Vector Extensions"}, {"sha": "f7daa02d6587cc2a99e27322b41d88cfcbbd10fc", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8423e57caae976cddbc1f9f68ebf6fef595cae83/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8423e57caae976cddbc1f9f68ebf6fef595cae83/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8423e57caae976cddbc1f9f68ebf6fef595cae83", "patch": "@@ -241,7 +241,7 @@ Objective-C and Objective-C++ Dialects}.\n -pedantic-errors @gol\n -w  -Wextra  -Wall  -Waddress  -Waggregate-return  @gol\n -Waggressive-loop-optimizations -Warray-bounds -Warray-bounds=@var{n} @gol\n--Wbool-compare @gol\n+-Wbool-compare -Wframe-address @gol\n -Wno-attributes -Wno-builtin-macro-redefined @gol\n -Wc90-c99-compat -Wc99-c11-compat @gol\n -Wc++-compat -Wc++11-compat -Wc++14-compat -Wcast-align  -Wcast-qual  @gol\n@@ -4462,6 +4462,13 @@ if ((n > 1) == 2) @{ @dots{} @}\n @end smallexample\n This warning is enabled by @option{-Wall}.\n \n+@item -Wframe-address\n+@opindex Wno-frame-address\n+@opindex Wframe-address\n+Warn when the @samp{__builtin_frame_address} or @samp{__builtin_return_address}\n+is called with an argument greater than 0.  Such calls may return indeterminate\n+values or crash the program.  The warning is included in @option{-Wall}.\n+\n @item -Wno-discarded-qualifiers @r{(C and Objective-C only)}\n @opindex Wno-discarded-qualifiers\n @opindex Wdiscarded-qualifiers"}, {"sha": "55bfb355cd850e7dba59100e131a2df08b7837f9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8423e57caae976cddbc1f9f68ebf6fef595cae83/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8423e57caae976cddbc1f9f68ebf6fef595cae83/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8423e57caae976cddbc1f9f68ebf6fef595cae83", "patch": "@@ -1,3 +1,12 @@\n+2015-08-02  Martin Sebor  <msebor@redhat.com>\n+\n+        * g++.dg/Wframe-address-in-Wall.C: New test.\n+        * g++.dg/Wframe-address.C: New test.\n+        * g++.dg/Wno-frame-address.C: New test.\n+        * gcc.dg/Wframe-address-in-Wall.c: New test.\n+        * gcc.dg/Wframe-address.c: New test.\n+        * gcc.dg/Wno-frame-address.c: New test.\n+\n 2015-08-02  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \t* c-c++-common/Wmisleading-indentation.c: Add more tests."}, {"sha": "2d945e564053ef606f39952d8c6346f29e8a3f93", "filename": "gcc/testsuite/g++.dg/Wframe-address-in-Wall.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8423e57caae976cddbc1f9f68ebf6fef595cae83/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWframe-address-in-Wall.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8423e57caae976cddbc1f9f68ebf6fef595cae83/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWframe-address-in-Wall.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWframe-address-in-Wall.C?ref=8423e57caae976cddbc1f9f68ebf6fef595cae83", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile }\n+// { dg-options \"-Wall\" }\n+\n+// Verify that -Wframe-address is included in -Wall.\n+\n+void* test_builtin_address (unsigned i)\n+{\n+  void* const ba[] = {\n+    __builtin_frame_address (4), // { dg-warning \"builtin_frame_address\" }\n+    __builtin_return_address (4) // { dg-warning \"builtin_return_address\" }\n+  };\n+\n+  return ba [i];\n+}"}, {"sha": "229004ee6a7a5ae2ca4d8cbc8a63be9514861685", "filename": "gcc/testsuite/g++.dg/Wframe-address.C", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8423e57caae976cddbc1f9f68ebf6fef595cae83/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWframe-address.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8423e57caae976cddbc1f9f68ebf6fef595cae83/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWframe-address.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWframe-address.C?ref=8423e57caae976cddbc1f9f68ebf6fef595cae83", "patch": "@@ -0,0 +1,70 @@\n+// { dg-do compile }\n+// { dg-options \"-Wframe-address\" }\n+\n+static void* const fa[] = {\n+  __builtin_frame_address (0),\n+  __builtin_frame_address (1), // { dg-warning \"builtin_frame_address\" }\n+  __builtin_frame_address (2), // { dg-warning \"builtin_frame_address\" }\n+  __builtin_frame_address (3), // { dg-warning \"builtin_frame_address\" }\n+  __builtin_frame_address (4)  // { dg-warning \"builtin_frame_address\" }\n+};\n+\n+\n+static void* const ra[] = {\n+  __builtin_return_address (0),\n+  __builtin_return_address (1), // { dg-warning \"builtin_return_address\" }\n+  __builtin_return_address (2), // { dg-warning \"builtin_return_address\" }\n+  __builtin_return_address (3), // { dg-warning \"builtin_return_address\" }\n+  __builtin_return_address (4)  // { dg-warning \"builtin_return_address\" }\n+};\n+\n+\n+void* __attribute__ ((noclone, noinline))\n+test_builtin_frame_address (unsigned i)\n+{\n+  void* const fa[] = {\n+    __builtin_frame_address (0),\n+    __builtin_frame_address (1), // { dg-warning \"builtin_frame_address\" }\n+    __builtin_frame_address (2), // { dg-warning \"builtin_frame_address\" }\n+    __builtin_frame_address (3), // { dg-warning \"builtin_frame_address\" }\n+    __builtin_frame_address (4)  // { dg-warning \"builtin_frame_address\" }\n+  };\n+\n+  return fa [i];\n+}\n+\n+\n+void* __attribute__ ((noclone, noinline))\n+test_builtin_return_address (unsigned i)\n+{\n+  void* const ra[] = {\n+    __builtin_return_address (0),\n+    __builtin_return_address (1), // { dg-warning \"builtin_return_address\" }\n+    __builtin_return_address (2), // { dg-warning \"builtin_return_address\" }\n+    __builtin_return_address (3), // { dg-warning \"builtin_return_address\" }\n+    __builtin_return_address (4)  // { dg-warning \"builtin_return_address\" }\n+  };\n+  return ra [i];\n+}\n+\n+\n+int main ()\n+{\n+  test_builtin_frame_address (0);\n+\n+  test_builtin_return_address (0);\n+\n+  void* const a[] = {\n+    __builtin_frame_address (0),\n+    __builtin_frame_address (1), // { dg-warning \"builtin_frame_address\" }\n+    __builtin_frame_address (2), // { dg-warning \"builtin_frame_address\" }\n+    __builtin_frame_address (3), // { dg-warning \"builtin_frame_address\" }\n+    __builtin_frame_address (4), // { dg-warning \"builtin_frame_address\" }\n+\n+    __builtin_return_address (0),\n+    __builtin_return_address (1), // { dg-warning \"builtin_return_address\" }\n+    __builtin_return_address (2), // { dg-warning \"builtin_return_address\" }\n+    __builtin_return_address (3), // { dg-warning \"builtin_return_address\" }\n+    __builtin_return_address (4)  // { dg-warning \"builtin_return_address\" }\n+  };\n+}"}, {"sha": "b19cb4334e140403b8af2ec74c9b8768a9b5f8c9", "filename": "gcc/testsuite/g++.dg/Wno-frame-address.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8423e57caae976cddbc1f9f68ebf6fef595cae83/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWno-frame-address.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8423e57caae976cddbc1f9f68ebf6fef595cae83/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWno-frame-address.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWno-frame-address.C?ref=8423e57caae976cddbc1f9f68ebf6fef595cae83", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do compile }\n+// { dg-options \"-Werror\" }\n+\n+// Verify that -Wframe-address is not enabled by default by enabling\n+// -Werror and verifying the test still compiles.\n+#include \"Wframe-address.C\""}, {"sha": "70da9c80483a613e995a006f906826cde121556a", "filename": "gcc/testsuite/gcc.dg/Wframe-address-in-Wall.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8423e57caae976cddbc1f9f68ebf6fef595cae83/gcc%2Ftestsuite%2Fgcc.dg%2FWframe-address-in-Wall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8423e57caae976cddbc1f9f68ebf6fef595cae83/gcc%2Ftestsuite%2Fgcc.dg%2FWframe-address-in-Wall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWframe-address-in-Wall.c?ref=8423e57caae976cddbc1f9f68ebf6fef595cae83", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall\" } */\n+\n+/* Verify that -Wframe-address is included in -Wall.  */\n+\n+void* test_builtin_address (unsigned i)\n+{\n+  void* const ba[] = {\n+    __builtin_frame_address (4), /* { dg-warning \"builtin_frame_address\" } */\n+    __builtin_return_address (4)  /* { dg-warning \"builtin_return_address\" } */\n+  };\n+\n+  return ba [i];\n+}"}, {"sha": "7481baf9acdfbdb220c0ab7a5373483274d130a6", "filename": "gcc/testsuite/gcc.dg/Wframe-address.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8423e57caae976cddbc1f9f68ebf6fef595cae83/gcc%2Ftestsuite%2Fgcc.dg%2FWframe-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8423e57caae976cddbc1f9f68ebf6fef595cae83/gcc%2Ftestsuite%2Fgcc.dg%2FWframe-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWframe-address.c?ref=8423e57caae976cddbc1f9f68ebf6fef595cae83", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wframe-address\" } */\n+\n+void* __attribute__ ((noclone, noinline))\n+test_builtin_frame_address (unsigned i)\n+{\n+  void* const fa[] = {\n+    __builtin_frame_address (0),\n+    __builtin_frame_address (1), /* { dg-warning \"builtin_frame_address\" } */\n+    __builtin_frame_address (2), /* { dg-warning \"builtin_frame_address\" } */\n+    __builtin_frame_address (3), /* { dg-warning \"builtin_frame_address\" } */\n+    __builtin_frame_address (4)  /* { dg-warning \"builtin_frame_address\" } */\n+  };\n+\n+  return fa [i];\n+}\n+\n+\n+void* __attribute__ ((noclone, noinline))\n+test_builtin_return_address (unsigned i)\n+{\n+  void* const ra[] = {\n+    __builtin_return_address (0),\n+    __builtin_return_address (1), /* { dg-warning \"builtin_return_address\" } */\n+    __builtin_return_address (2), /* { dg-warning \"builtin_return_address\" } */\n+    __builtin_return_address (3), /* { dg-warning \"builtin_return_address\" } */\n+    __builtin_return_address (4)  /* { dg-warning \"builtin_return_address\" } */\n+  };\n+  return ra [i];\n+}\n+\n+\n+int main (void)\n+{\n+  test_builtin_frame_address (0);\n+\n+  test_builtin_return_address (0);\n+\n+  void* const a[] = {\n+    __builtin_frame_address (0),\n+    __builtin_frame_address (1), /* { dg-warning \"builtin_frame_address\" } */\n+    __builtin_frame_address (2), /* { dg-warning \"builtin_frame_address\" } */\n+    __builtin_frame_address (3), /* { dg-warning \"builtin_frame_address\" } */\n+    __builtin_frame_address (4), /* { dg-warning \"builtin_frame_address\" } */\n+\n+    __builtin_return_address (0),\n+    __builtin_return_address (1), /* { dg-warning \"builtin_return_address\" } */\n+    __builtin_return_address (2), /* { dg-warning \"builtin_return_address\" } */\n+    __builtin_return_address (3), /* { dg-warning \"builtin_return_address\" } */\n+    __builtin_return_address (4)  /* { dg-warning \"builtin_return_address\" } */\n+  };\n+\n+  return 0;\n+}"}, {"sha": "f48b91a2bcbba0070a7812839e8ec249d04edd5b", "filename": "gcc/testsuite/gcc.dg/Wno-frame-address.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8423e57caae976cddbc1f9f68ebf6fef595cae83/gcc%2Ftestsuite%2Fgcc.dg%2FWno-frame-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8423e57caae976cddbc1f9f68ebf6fef595cae83/gcc%2Ftestsuite%2Fgcc.dg%2FWno-frame-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWno-frame-address.c?ref=8423e57caae976cddbc1f9f68ebf6fef595cae83", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Werror\" } */\n+\n+/* Verify that -Wframe-address is not enabled by default by enabling\n+   -Werror and verifying the test still compiles.  */\n+#include \"Wframe-address.c\""}]}