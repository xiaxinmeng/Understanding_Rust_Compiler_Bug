{"sha": "abfadcb132909fa5bf7e7c3f385c20218d8017fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJmYWRjYjEzMjkwOWZhNWJmN2U3YzNmMzg1YzIwMjE4ZDgwMTdmYw==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-11-29T01:09:09Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-11-29T01:09:09Z"}, "message": "Makefile.am (sources): Add bitset.cc\n\n\t* src/Makefile.am (sources): Add bitset.cc\n\t* src/Makefile.in: Regenrate.\n\n\t* include/bits/std_bitset.h (_GLIBCPP_BITSET_BITS_PER_WORD): New\n\tmacro. Replace __BITS_PER_WORDS throughout.\n\t(__BITS_PER_WORDS): Remove.\n\t(bitset<>::_M_do_find_first, bitset<>::_M_do_find_next): Move\n\tdefinitions to src/bitset.cc.\n\n\t* src/bitset.cc (bitset<>::_M_do_find_first,\n\tbitset<>::_M_do_find_next):  Define here.\n\t(_Bit_count<>::_S_bit_count, _Find_one<>::_S_first_one): Define\n\there. Explicitly instantiate definitions.\n\nFrom-SVN: r37837", "tree": {"sha": "7e51990bab3a9564fd5828fd1d1a9b11f9aefac4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e51990bab3a9564fd5828fd1d1a9b11f9aefac4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abfadcb132909fa5bf7e7c3f385c20218d8017fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abfadcb132909fa5bf7e7c3f385c20218d8017fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abfadcb132909fa5bf7e7c3f385c20218d8017fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abfadcb132909fa5bf7e7c3f385c20218d8017fc/comments", "author": null, "committer": null, "parents": [{"sha": "54fef245c04e79351cf5aad5608a4bc2a5d5bf25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54fef245c04e79351cf5aad5608a4bc2a5d5bf25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54fef245c04e79351cf5aad5608a4bc2a5d5bf25"}], "stats": {"total": 517, "additions": 225, "deletions": 292}, "files": [{"sha": "c8737338f194c9b554f349d814d84daa5ad2c62d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abfadcb132909fa5bf7e7c3f385c20218d8017fc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abfadcb132909fa5bf7e7c3f385c20218d8017fc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=abfadcb132909fa5bf7e7c3f385c20218d8017fc", "patch": "@@ -1,3 +1,19 @@\n+2000-11-29  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* src/Makefile.am (sources): Add bitset.cc\n+\t* src/Makefile.in: Regenrate.\n+\n+\t* include/bits/std_bitset.h (_GLIBCPP_BITSET_BITS_PER_WORD): New\n+\tmacro. Replace __BITS_PER_WORDS throughout.\n+\t(__BITS_PER_WORDS): Remove.\n+\t(bitset<>::_M_do_find_first, bitset<>::_M_do_find_next): Move\n+\tdefinitions to src/bitset.cc.\n+\n+\t* src/bitset.cc (bitset<>::_M_do_find_first,\n+\tbitset<>::_M_do_find_next):  Define here.\n+\t(_Bit_count<>::_S_bit_count, _Find_one<>::_S_first_one): Define\n+\there. Explicitly instantiate definitions.\n+\n 2000-11-28  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n \n \t* config/cpu/powerpc/bits/atomicity.h (__exchange_and_add): Silence"}, {"sha": "d4bf10c45e08d8f64bd230d20fe41b5d19b0d3e3", "filename": "libstdc++-v3/include/bits/std_bitset.h", "status": "modified", "additions": 19, "deletions": 192, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abfadcb132909fa5bf7e7c3f385c20218d8017fc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_bitset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abfadcb132909fa5bf7e7c3f385c20218d8017fc/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_bitset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_bitset.h?ref=abfadcb132909fa5bf7e7c3f385c20218d8017fc", "patch": "@@ -42,9 +42,9 @@\n #include <bits/std_iostream.h>   // for istream, ostream\n #endif\n \n-#define __BITS_PER_WORD (CHAR_BIT*sizeof(unsigned long))\n+#define _GLIBCPP_BITSET_BITS_PER_WORD (CHAR_BIT*sizeof(unsigned long))\n #define __BITSET_WORDS(__n) \\\n- ((__n) < 1 ? 1 : ((__n) + __BITS_PER_WORD - 1)/__BITS_PER_WORD)\n+ ((__n) < 1 ? 1 : ((__n) + _GLIBCPP_BITSET_BITS_PER_WORD - 1)/_GLIBCPP_BITSET_BITS_PER_WORD)\n \n __STL_BEGIN_NAMESPACE\n \n@@ -82,11 +82,11 @@ struct _Base_bitset {\n   }\n \n   static size_t _S_whichword( size_t __pos )\n-    { return __pos / __BITS_PER_WORD; }\n+    { return __pos / _GLIBCPP_BITSET_BITS_PER_WORD; }\n   static size_t _S_whichbyte( size_t __pos )\n-    { return (__pos % __BITS_PER_WORD) / CHAR_BIT; }\n+    { return (__pos % _GLIBCPP_BITSET_BITS_PER_WORD) / CHAR_BIT; }\n   static size_t _S_whichbit( size_t __pos )\n-    { return __pos % __BITS_PER_WORD; }\n+    { return __pos % _GLIBCPP_BITSET_BITS_PER_WORD; }\n   static _WordT _S_maskbit( size_t __pos )\n     { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }\n \n@@ -176,15 +176,15 @@ template<size_t _Nw>\n void _Base_bitset<_Nw>::_M_do_left_shift(size_t __shift) \n {\n   if (__shift != 0) {\n-    const size_t __wshift = __shift / __BITS_PER_WORD;\n-    const size_t __offset = __shift % __BITS_PER_WORD;\n+    const size_t __wshift = __shift / _GLIBCPP_BITSET_BITS_PER_WORD;\n+    const size_t __offset = __shift % _GLIBCPP_BITSET_BITS_PER_WORD;\n \n     if (__offset == 0)\n       for (size_t __n = _Nw - 1; __n >= __wshift; --__n)\n         _M_w[__n] = _M_w[__n - __wshift];\n \n     else {\n-      const size_t __sub_offset = __BITS_PER_WORD - __offset;\n+      const size_t __sub_offset = _GLIBCPP_BITSET_BITS_PER_WORD - __offset;\n       for (size_t __n = _Nw - 1; __n > __wshift; --__n)\n         _M_w[__n] = (_M_w[__n - __wshift] << __offset) | \n                     (_M_w[__n - __wshift - 1] >> __sub_offset);\n@@ -199,16 +199,16 @@ template<size_t _Nw>\n void _Base_bitset<_Nw>::_M_do_right_shift(size_t __shift) \n {\n   if (__shift != 0) {\n-    const size_t __wshift = __shift / __BITS_PER_WORD;\n-    const size_t __offset = __shift % __BITS_PER_WORD;\n+    const size_t __wshift = __shift / _GLIBCPP_BITSET_BITS_PER_WORD;\n+    const size_t __offset = __shift % _GLIBCPP_BITSET_BITS_PER_WORD;\n     const size_t __limit = _Nw - __wshift - 1;\n \n     if (__offset == 0)\n       for (size_t __n = 0; __n <= __limit; ++__n)\n         _M_w[__n] = _M_w[__n + __wshift];\n \n     else {\n-      const size_t __sub_offset = __BITS_PER_WORD - __offset;\n+      const size_t __sub_offset = _GLIBCPP_BITSET_BITS_PER_WORD - __offset;\n       for (size_t __n = 0; __n < __limit; ++__n)\n         _M_w[__n] = (_M_w[__n + __wshift] >> __offset) |\n                     (_M_w[__n + __wshift + 1] << __sub_offset);\n@@ -240,7 +240,7 @@ size_t _Base_bitset<_Nw>::_M_do_find_first(size_t __not_found) const\n         unsigned char __this_byte\n           = static_cast<unsigned char>(__thisword & (~(unsigned char)0));\n         if ( __this_byte )\n-          return __i*__BITS_PER_WORD + __j*CHAR_BIT +\n+          return __i*_GLIBCPP_BITSET_BITS_PER_WORD + __j*CHAR_BIT +\n             _First_one<true>::_S_first_one[__this_byte];\n \n         __thisword >>= CHAR_BIT;\n@@ -259,7 +259,7 @@ _Base_bitset<_Nw>::_M_do_find_next(size_t __prev, size_t __not_found) const\n   ++__prev;\n \n   // check out of bounds\n-  if ( __prev >= _Nw * __BITS_PER_WORD )\n+  if ( __prev >= _Nw * _GLIBCPP_BITSET_BITS_PER_WORD )\n     return __not_found;\n \n     // search first word\n@@ -277,7 +277,7 @@ _Base_bitset<_Nw>::_M_do_find_next(size_t __prev, size_t __not_found) const\n       unsigned char __this_byte\n         = static_cast<unsigned char>(__thisword & (~(unsigned char)0));\n       if ( __this_byte )\n-        return __i*__BITS_PER_WORD + __j*CHAR_BIT +\n+        return __i*_GLIBCPP_BITSET_BITS_PER_WORD + __j*CHAR_BIT +\n           _First_one<true>::_S_first_one[__this_byte];\n \n       __thisword >>= CHAR_BIT;\n@@ -294,7 +294,7 @@ _Base_bitset<_Nw>::_M_do_find_next(size_t __prev, size_t __not_found) const\n         unsigned char __this_byte\n           = static_cast<unsigned char>(__thisword & (~(unsigned char)0));\n         if ( __this_byte )\n-          return __i*__BITS_PER_WORD + __j*CHAR_BIT +\n+          return __i*_GLIBCPP_BITSET_BITS_PER_WORD + __j*CHAR_BIT +\n             _First_one<true>::_S_first_one[__this_byte];\n \n         __thisword >>= CHAR_BIT;\n@@ -321,11 +321,11 @@ __STL_TEMPLATE_NULL struct _Base_bitset<1> {\n   _Base_bitset(unsigned long __val) : _M_w(__val) {}\n \n   static size_t _S_whichword( size_t __pos )\n-    { return __pos / __BITS_PER_WORD; }\n+    { return __pos / _GLIBCPP_BITSET_BITS_PER_WORD; }\n   static size_t _S_whichbyte( size_t __pos )\n-    { return (__pos % __BITS_PER_WORD) / CHAR_BIT; }\n+    { return (__pos % _GLIBCPP_BITSET_BITS_PER_WORD) / CHAR_BIT; }\n   static size_t _S_whichbit( size_t __pos )\n-    {  return __pos % __BITS_PER_WORD; }\n+    {  return __pos % _GLIBCPP_BITSET_BITS_PER_WORD; }\n   static _WordT _S_maskbit( size_t __pos )\n     { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }\n \n@@ -370,63 +370,6 @@ __STL_TEMPLATE_NULL struct _Base_bitset<1> {\n \n };\n \n-//\n-// Definitions of non-inline functions from the single-word version of\n-//  _Base_bitset.\n-//\n-\n-size_t _Base_bitset<1>::_M_do_find_first(size_t __not_found) const\n-{\n-  _WordT __thisword = _M_w;\n-\n-  if ( __thisword != static_cast<_WordT>(0) ) {\n-    // find byte within word\n-    for ( size_t __j = 0; __j < sizeof(_WordT); __j++ ) {\n-      unsigned char __this_byte\n-        = static_cast<unsigned char>(__thisword & (~(unsigned char)0));\n-      if ( __this_byte )\n-        return __j*CHAR_BIT + _First_one<true>::_S_first_one[__this_byte];\n-\n-      __thisword >>= CHAR_BIT;\n-    }\n-  }\n-  // not found, so return a value that indicates failure.\n-  return __not_found;\n-}\n-\n-size_t _Base_bitset<1>::_M_do_find_next(size_t __prev, size_t __not_found ) const\n-{\n-  // make bound inclusive\n-  ++__prev;\n-\n-  // check out of bounds\n-  if ( __prev >= __BITS_PER_WORD )\n-    return __not_found;\n-\n-    // search first (and only) word\n-  _WordT __thisword = _M_w;\n-\n-  // mask off bits below bound\n-  __thisword &= (~static_cast<_WordT>(0)) << _S_whichbit(__prev);\n-\n-  if ( __thisword != static_cast<_WordT>(0) ) {\n-    // find byte within word\n-    // get first byte into place\n-    __thisword >>= _S_whichbyte(__prev) * CHAR_BIT;\n-    for ( size_t __j = _S_whichbyte(__prev); __j < sizeof(_WordT); __j++ ) {\n-      unsigned char __this_byte\n-        = static_cast<unsigned char>(__thisword & (~(unsigned char)0));\n-      if ( __this_byte )\n-        return __j*CHAR_BIT + _First_one<true>::_S_first_one[__this_byte];\n-\n-      __thisword >>= CHAR_BIT;\n-    }\n-  }\n-\n-  // not found, so return a value that indicates failure.\n-  return __not_found;\n-} // end _M_do_find_next\n-\n \n // ------------------------------------------------------------\n // Helper class to zero out the unused high-order bits in the highest word.\n@@ -455,7 +398,7 @@ class bitset : private _Base_bitset<__BITSET_WORDS(_Nb)>\n \n private:\n   void _M_do_sanitize() {\n-    _Sanitize<_Nb%__BITS_PER_WORD>::_M_do_sanitize(this->_M_hiword());\n+    _Sanitize<_Nb%_GLIBCPP_BITSET_BITS_PER_WORD>::_M_do_sanitize(this->_M_hiword());\n   }\n \n public:\n@@ -942,129 +885,13 @@ ostream& operator<<(ostream& __os, const bitset<_Nb>& __x) {\n \n #endif /* __STL_USE_NEW_IOSTREAMS */\n \n-// ------------------------------------------------------------\n-// Lookup tables for find and count operations.\n-\n-template<bool __dummy>\n-unsigned char _Bit_count<__dummy>::_S_bit_count[] = {\n-  0, /*   0 */ 1, /*   1 */ 1, /*   2 */ 2, /*   3 */ 1, /*   4 */\n-  2, /*   5 */ 2, /*   6 */ 3, /*   7 */ 1, /*   8 */ 2, /*   9 */\n-  2, /*  10 */ 3, /*  11 */ 2, /*  12 */ 3, /*  13 */ 3, /*  14 */\n-  4, /*  15 */ 1, /*  16 */ 2, /*  17 */ 2, /*  18 */ 3, /*  19 */\n-  2, /*  20 */ 3, /*  21 */ 3, /*  22 */ 4, /*  23 */ 2, /*  24 */\n-  3, /*  25 */ 3, /*  26 */ 4, /*  27 */ 3, /*  28 */ 4, /*  29 */\n-  4, /*  30 */ 5, /*  31 */ 1, /*  32 */ 2, /*  33 */ 2, /*  34 */\n-  3, /*  35 */ 2, /*  36 */ 3, /*  37 */ 3, /*  38 */ 4, /*  39 */\n-  2, /*  40 */ 3, /*  41 */ 3, /*  42 */ 4, /*  43 */ 3, /*  44 */\n-  4, /*  45 */ 4, /*  46 */ 5, /*  47 */ 2, /*  48 */ 3, /*  49 */\n-  3, /*  50 */ 4, /*  51 */ 3, /*  52 */ 4, /*  53 */ 4, /*  54 */\n-  5, /*  55 */ 3, /*  56 */ 4, /*  57 */ 4, /*  58 */ 5, /*  59 */\n-  4, /*  60 */ 5, /*  61 */ 5, /*  62 */ 6, /*  63 */ 1, /*  64 */\n-  2, /*  65 */ 2, /*  66 */ 3, /*  67 */ 2, /*  68 */ 3, /*  69 */\n-  3, /*  70 */ 4, /*  71 */ 2, /*  72 */ 3, /*  73 */ 3, /*  74 */\n-  4, /*  75 */ 3, /*  76 */ 4, /*  77 */ 4, /*  78 */ 5, /*  79 */\n-  2, /*  80 */ 3, /*  81 */ 3, /*  82 */ 4, /*  83 */ 3, /*  84 */\n-  4, /*  85 */ 4, /*  86 */ 5, /*  87 */ 3, /*  88 */ 4, /*  89 */\n-  4, /*  90 */ 5, /*  91 */ 4, /*  92 */ 5, /*  93 */ 5, /*  94 */\n-  6, /*  95 */ 2, /*  96 */ 3, /*  97 */ 3, /*  98 */ 4, /*  99 */\n-  3, /* 100 */ 4, /* 101 */ 4, /* 102 */ 5, /* 103 */ 3, /* 104 */\n-  4, /* 105 */ 4, /* 106 */ 5, /* 107 */ 4, /* 108 */ 5, /* 109 */\n-  5, /* 110 */ 6, /* 111 */ 3, /* 112 */ 4, /* 113 */ 4, /* 114 */\n-  5, /* 115 */ 4, /* 116 */ 5, /* 117 */ 5, /* 118 */ 6, /* 119 */\n-  4, /* 120 */ 5, /* 121 */ 5, /* 122 */ 6, /* 123 */ 5, /* 124 */\n-  6, /* 125 */ 6, /* 126 */ 7, /* 127 */ 1, /* 128 */ 2, /* 129 */\n-  2, /* 130 */ 3, /* 131 */ 2, /* 132 */ 3, /* 133 */ 3, /* 134 */\n-  4, /* 135 */ 2, /* 136 */ 3, /* 137 */ 3, /* 138 */ 4, /* 139 */\n-  3, /* 140 */ 4, /* 141 */ 4, /* 142 */ 5, /* 143 */ 2, /* 144 */\n-  3, /* 145 */ 3, /* 146 */ 4, /* 147 */ 3, /* 148 */ 4, /* 149 */\n-  4, /* 150 */ 5, /* 151 */ 3, /* 152 */ 4, /* 153 */ 4, /* 154 */\n-  5, /* 155 */ 4, /* 156 */ 5, /* 157 */ 5, /* 158 */ 6, /* 159 */\n-  2, /* 160 */ 3, /* 161 */ 3, /* 162 */ 4, /* 163 */ 3, /* 164 */\n-  4, /* 165 */ 4, /* 166 */ 5, /* 167 */ 3, /* 168 */ 4, /* 169 */\n-  4, /* 170 */ 5, /* 171 */ 4, /* 172 */ 5, /* 173 */ 5, /* 174 */\n-  6, /* 175 */ 3, /* 176 */ 4, /* 177 */ 4, /* 178 */ 5, /* 179 */\n-  4, /* 180 */ 5, /* 181 */ 5, /* 182 */ 6, /* 183 */ 4, /* 184 */\n-  5, /* 185 */ 5, /* 186 */ 6, /* 187 */ 5, /* 188 */ 6, /* 189 */\n-  6, /* 190 */ 7, /* 191 */ 2, /* 192 */ 3, /* 193 */ 3, /* 194 */\n-  4, /* 195 */ 3, /* 196 */ 4, /* 197 */ 4, /* 198 */ 5, /* 199 */\n-  3, /* 200 */ 4, /* 201 */ 4, /* 202 */ 5, /* 203 */ 4, /* 204 */\n-  5, /* 205 */ 5, /* 206 */ 6, /* 207 */ 3, /* 208 */ 4, /* 209 */\n-  4, /* 210 */ 5, /* 211 */ 4, /* 212 */ 5, /* 213 */ 5, /* 214 */\n-  6, /* 215 */ 4, /* 216 */ 5, /* 217 */ 5, /* 218 */ 6, /* 219 */\n-  5, /* 220 */ 6, /* 221 */ 6, /* 222 */ 7, /* 223 */ 3, /* 224 */\n-  4, /* 225 */ 4, /* 226 */ 5, /* 227 */ 4, /* 228 */ 5, /* 229 */\n-  5, /* 230 */ 6, /* 231 */ 4, /* 232 */ 5, /* 233 */ 5, /* 234 */\n-  6, /* 235 */ 5, /* 236 */ 6, /* 237 */ 6, /* 238 */ 7, /* 239 */\n-  4, /* 240 */ 5, /* 241 */ 5, /* 242 */ 6, /* 243 */ 5, /* 244 */\n-  6, /* 245 */ 6, /* 246 */ 7, /* 247 */ 5, /* 248 */ 6, /* 249 */\n-  6, /* 250 */ 7, /* 251 */ 6, /* 252 */ 7, /* 253 */ 7, /* 254 */\n-  8  /* 255 */\n-}; // end _Bit_count\n-\n-template<bool __dummy>\n-unsigned char _First_one<__dummy>::_S_first_one[] = {\n-  0, /*   0 */ 0, /*   1 */ 1, /*   2 */ 0, /*   3 */ 2, /*   4 */\n-  0, /*   5 */ 1, /*   6 */ 0, /*   7 */ 3, /*   8 */ 0, /*   9 */\n-  1, /*  10 */ 0, /*  11 */ 2, /*  12 */ 0, /*  13 */ 1, /*  14 */\n-  0, /*  15 */ 4, /*  16 */ 0, /*  17 */ 1, /*  18 */ 0, /*  19 */\n-  2, /*  20 */ 0, /*  21 */ 1, /*  22 */ 0, /*  23 */ 3, /*  24 */\n-  0, /*  25 */ 1, /*  26 */ 0, /*  27 */ 2, /*  28 */ 0, /*  29 */\n-  1, /*  30 */ 0, /*  31 */ 5, /*  32 */ 0, /*  33 */ 1, /*  34 */\n-  0, /*  35 */ 2, /*  36 */ 0, /*  37 */ 1, /*  38 */ 0, /*  39 */\n-  3, /*  40 */ 0, /*  41 */ 1, /*  42 */ 0, /*  43 */ 2, /*  44 */\n-  0, /*  45 */ 1, /*  46 */ 0, /*  47 */ 4, /*  48 */ 0, /*  49 */\n-  1, /*  50 */ 0, /*  51 */ 2, /*  52 */ 0, /*  53 */ 1, /*  54 */\n-  0, /*  55 */ 3, /*  56 */ 0, /*  57 */ 1, /*  58 */ 0, /*  59 */\n-  2, /*  60 */ 0, /*  61 */ 1, /*  62 */ 0, /*  63 */ 6, /*  64 */\n-  0, /*  65 */ 1, /*  66 */ 0, /*  67 */ 2, /*  68 */ 0, /*  69 */\n-  1, /*  70 */ 0, /*  71 */ 3, /*  72 */ 0, /*  73 */ 1, /*  74 */\n-  0, /*  75 */ 2, /*  76 */ 0, /*  77 */ 1, /*  78 */ 0, /*  79 */\n-  4, /*  80 */ 0, /*  81 */ 1, /*  82 */ 0, /*  83 */ 2, /*  84 */\n-  0, /*  85 */ 1, /*  86 */ 0, /*  87 */ 3, /*  88 */ 0, /*  89 */\n-  1, /*  90 */ 0, /*  91 */ 2, /*  92 */ 0, /*  93 */ 1, /*  94 */\n-  0, /*  95 */ 5, /*  96 */ 0, /*  97 */ 1, /*  98 */ 0, /*  99 */\n-  2, /* 100 */ 0, /* 101 */ 1, /* 102 */ 0, /* 103 */ 3, /* 104 */\n-  0, /* 105 */ 1, /* 106 */ 0, /* 107 */ 2, /* 108 */ 0, /* 109 */\n-  1, /* 110 */ 0, /* 111 */ 4, /* 112 */ 0, /* 113 */ 1, /* 114 */\n-  0, /* 115 */ 2, /* 116 */ 0, /* 117 */ 1, /* 118 */ 0, /* 119 */\n-  3, /* 120 */ 0, /* 121 */ 1, /* 122 */ 0, /* 123 */ 2, /* 124 */\n-  0, /* 125 */ 1, /* 126 */ 0, /* 127 */ 7, /* 128 */ 0, /* 129 */\n-  1, /* 130 */ 0, /* 131 */ 2, /* 132 */ 0, /* 133 */ 1, /* 134 */\n-  0, /* 135 */ 3, /* 136 */ 0, /* 137 */ 1, /* 138 */ 0, /* 139 */\n-  2, /* 140 */ 0, /* 141 */ 1, /* 142 */ 0, /* 143 */ 4, /* 144 */\n-  0, /* 145 */ 1, /* 146 */ 0, /* 147 */ 2, /* 148 */ 0, /* 149 */\n-  1, /* 150 */ 0, /* 151 */ 3, /* 152 */ 0, /* 153 */ 1, /* 154 */\n-  0, /* 155 */ 2, /* 156 */ 0, /* 157 */ 1, /* 158 */ 0, /* 159 */\n-  5, /* 160 */ 0, /* 161 */ 1, /* 162 */ 0, /* 163 */ 2, /* 164 */\n-  0, /* 165 */ 1, /* 166 */ 0, /* 167 */ 3, /* 168 */ 0, /* 169 */\n-  1, /* 170 */ 0, /* 171 */ 2, /* 172 */ 0, /* 173 */ 1, /* 174 */\n-  0, /* 175 */ 4, /* 176 */ 0, /* 177 */ 1, /* 178 */ 0, /* 179 */\n-  2, /* 180 */ 0, /* 181 */ 1, /* 182 */ 0, /* 183 */ 3, /* 184 */\n-  0, /* 185 */ 1, /* 186 */ 0, /* 187 */ 2, /* 188 */ 0, /* 189 */\n-  1, /* 190 */ 0, /* 191 */ 6, /* 192 */ 0, /* 193 */ 1, /* 194 */\n-  0, /* 195 */ 2, /* 196 */ 0, /* 197 */ 1, /* 198 */ 0, /* 199 */\n-  3, /* 200 */ 0, /* 201 */ 1, /* 202 */ 0, /* 203 */ 2, /* 204 */\n-  0, /* 205 */ 1, /* 206 */ 0, /* 207 */ 4, /* 208 */ 0, /* 209 */\n-  1, /* 210 */ 0, /* 211 */ 2, /* 212 */ 0, /* 213 */ 1, /* 214 */\n-  0, /* 215 */ 3, /* 216 */ 0, /* 217 */ 1, /* 218 */ 0, /* 219 */\n-  2, /* 220 */ 0, /* 221 */ 1, /* 222 */ 0, /* 223 */ 5, /* 224 */\n-  0, /* 225 */ 1, /* 226 */ 0, /* 227 */ 2, /* 228 */ 0, /* 229 */\n-  1, /* 230 */ 0, /* 231 */ 3, /* 232 */ 0, /* 233 */ 1, /* 234 */\n-  0, /* 235 */ 2, /* 236 */ 0, /* 237 */ 1, /* 238 */ 0, /* 239 */\n-  4, /* 240 */ 0, /* 241 */ 1, /* 242 */ 0, /* 243 */ 2, /* 244 */\n-  0, /* 245 */ 1, /* 246 */ 0, /* 247 */ 3, /* 248 */ 0, /* 249 */\n-  1, /* 250 */ 0, /* 251 */ 2, /* 252 */ 0, /* 253 */ 1, /* 254 */\n-  0, /* 255 */\n-}; // end _First_one\n \n #if defined(__sgi) && !defined(__GNUC__) && (_MIPS_SIM != _MIPS_SIM_ABI32)\n #pragma reset woff 1209\n #endif\n \n __STL_END_NAMESPACE\n \n-\n-#undef __BITS_PER_WORD\n #undef __BITSET_WORDS\n \n #endif /* __SGI_STL_BITSET */"}, {"sha": "61650188fcf131bc40f701b0d0a6cb8dcfeb877b", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abfadcb132909fa5bf7e7c3f385c20218d8017fc/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abfadcb132909fa5bf7e7c3f385c20218d8017fc/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=abfadcb132909fa5bf7e7c3f385c20218d8017fc", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.51 2000/11/23 06:46:31 bkoz Exp $\n+## $Id: Makefile.am,v 1.52 2000/11/25 09:11:15 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -177,7 +177,7 @@ sources = \\\n \tlimitsMEMBERS.cc \\\n \tcmath.cc \\\n \tcomplex.cc complexf.cc complexl.cc complex_io.cc \\\n-\tstdexcept.cc \\\n+\tstdexcept.cc bitset.cc \\\n \tc++io.cc ios.cc stdstreams.cc strstream.cc \\\n \tlocale.cc localename.cc codecvt.cc \\\n \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc"}, {"sha": "3921cfc8fdb0bef5d776b56a25c5dca03231e58c", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abfadcb132909fa5bf7e7c3f385c20218d8017fc/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abfadcb132909fa5bf7e7c3f385c20218d8017fc/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=abfadcb132909fa5bf7e7c3f385c20218d8017fc", "patch": "@@ -168,7 +168,7 @@ build_headers =  \tbits/std_limits.h bits/c++config.h bits/c++io.h bits/c++thread\n \n headers = $(base_headers) $(c_headers)\n \n-sources =  \tlimitsMEMBERS.cc \tcmath.cc \tcomplex.cc complexf.cc complexl.cc complex_io.cc \tstdexcept.cc \tc++io.cc ios.cc stdstreams.cc strstream.cc \tlocale.cc localename.cc codecvt.cc \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n+sources =  \tlimitsMEMBERS.cc \tcmath.cc \tcomplex.cc complexf.cc complexl.cc complex_io.cc \tstdexcept.cc bitset.cc \tc++io.cc ios.cc stdstreams.cc strstream.cc \tlocale.cc localename.cc codecvt.cc \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n \n \n wstring_sources =  \twstring-inst.cc\n@@ -247,9 +247,9 @@ libinst_wstring_la_LDFLAGS =\n libinst_wstring_la_LIBADD = \n libinst_wstring_la_OBJECTS =  wstring-inst.lo\n libstdc___la_OBJECTS =  limitsMEMBERS.lo cmath.lo complex.lo complexf.lo \\\n-complexl.lo complex_io.lo stdexcept.lo c++io.lo ios.lo stdstreams.lo \\\n-strstream.lo locale.lo localename.lo codecvt.lo locale-inst.lo \\\n-stl-inst.lo misc-inst.lo valarray-inst.lo string-inst.lo\n+complexl.lo complex_io.lo stdexcept.lo bitset.lo c++io.lo ios.lo \\\n+stdstreams.lo strstream.lo locale.lo localename.lo codecvt.lo \\\n+locale-inst.lo stl-inst.lo misc-inst.lo valarray-inst.lo string-inst.lo\n CXXFLAGS = @CXXFLAGS@\n CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n CXXLD = $(CXX)\n@@ -400,7 +400,7 @@ distdir: $(DISTFILES)\n \t@for file in $(DISTFILES); do \\\n \t  if test -f $$file; then d=.; else d=$(srcdir); fi; \\\n \t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n+\t    cp -pr $$/$$file $(distdir)/$$file; \\\n \t  else \\\n \t    test -f $(distdir)/$$file \\\n \t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\"}, {"sha": "599a399c46137e26d50d3bed14a0130b41c3a101", "filename": "libstdc++-v3/src/bitset.cc", "status": "modified", "additions": 183, "deletions": 93, "changes": 276, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abfadcb132909fa5bf7e7c3f385c20218d8017fc/libstdc%2B%2B-v3%2Fsrc%2Fbitset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abfadcb132909fa5bf7e7c3f385c20218d8017fc/libstdc%2B%2B-v3%2Fsrc%2Fbitset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fbitset.cc?ref=abfadcb132909fa5bf7e7c3f385c20218d8017fc", "patch": "@@ -1,107 +1,197 @@\n-/* Low-level implementation of bitset template class from ISO C++.  */\n-\n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n+/*\n+ * Copyright (c) 1998\n+ * Silicon Graphics Computer Systems, Inc.\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Silicon Graphics makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ */ \n \n #include <bits/std_bitset.h>\n-#include <bits/std_climits.h>\n-\n-\n-static const size_t word_bits = sizeof (__bitset_word) * CHAR_BIT;\n \n+//\n+// Definitions of non-inline functions from the single-word version of\n+//  _Base_bitset.\n+//\n \n-void\n-__bitset_base_lshift (__bitset_word *arr, size_t n, size_t nlast,\n-\t\t      size_t offset, size_t nbits)\n+size_t\n+std::_Base_bitset<1>::_M_do_find_first(size_t __not_found) const\n {\n-  arr[n - 1] = arr[n - 1 - offset] << nbits;\n+  _WordT __thisword = _M_w;\n \n-  for (size_t cnt = n - 1; cnt > offset; --cnt)\n-    {\n-      arr[cnt] |= arr[cnt - 1 - offset] >> (word_bits - nbits);\n-      arr[cnt - 1] = arr[cnt - 1 - offset] << nbits;\n-    }\n+  if ( __thisword != static_cast<_WordT>(0) ) {\n+    // find byte within word\n+    for ( size_t __j = 0; __j < sizeof(_WordT); __j++ ) {\n+      unsigned char __this_byte\n+        = static_cast<unsigned char>(__thisword & (~(unsigned char)0));\n+      if ( __this_byte )\n+        return __j*CHAR_BIT + _First_one<true>::_S_first_one[__this_byte];\n \n-  memset (arr, '\\0', offset * sizeof (__bitset_word));\n-}\n-\n-\n-void\n-__bitset_base_rshift (__bitset_word *arr, size_t n, size_t nlast,\n-\t\t      size_t offset, size_t nbits)\n-{\n-  arr[0] = arr[offset] >> nbits;\n-\n-  for (size_t cnt = offset + 1; cnt < n; ++cnt)\n-    {\n-      arr[cnt - 1 - offset] |= arr[cnt] << (word_bits - nbits);\n-      arr[cnt - offset] = arr[cnt] >> nbits;\n+      __thisword >>= CHAR_BIT;\n     }\n-\n-  memset (&arr[n - offset], '\\0', offset * sizeof (__bitset_word));\n+  }\n+  // not found, so return a value that indicates failure.\n+  return __not_found;\n }\n \n-\n size_t\n-__bitset_base_count (__bitset_word *arr, size_t n)\n+std::_Base_bitset<1>::_M_do_find_next(size_t __prev, size_t __not_found) const\n {\n-  size_t result = 0;\n-\n-  while (n > 0)\n-    {\n-      __bitset_word word = arr[n];\n-\n-      if (sizeof (__bitset_word) == 4)\n-\t{\n-\t  word = (word & 0x55555555) + ((word >> 1) & 0x55555555);\n-\t  word = (word & 0x33333333) + ((word >> 2) & 0x33333333);\n-\t  word = (word + (word >> 4)) & 0x0f0f0f0f;\n-\t  word = word + (word >> 8);\n-\t  word = (word + (word >> 16)) & 0xff;\n-\t}\n-      else\n-\t{\n-\t  // The only other possibility is a 64 bit word.\n-\t  word = ((word & ((0x55555555UL << 16) << 16 | 0x55555555UL))\n-\t\t  + ((word >> 1)\n-\t\t     & ((0x55555555UL << 16) << 16 | 0x55555555UL)));\n-\t  word = ((word & ((0x33333333UL << 16) << 16 | 0x33333333UL))\n-\t\t  + ((word >> 1)\n-\t\t     & ((0x33333333UL << 16) << 16 | 0x33333333UL)));\n-\t  word = ((word + (word >> 4))\n-\t\t  & ((0x0f0f0f0fUL << 16) << 16 | 0x0f0f0f0fUL));\n-\t  word = (word + (word >> 8));\n-\t  word = (word + (word >> 16));\n-\t  word = (word + ((word >> 16) >> 16)) & 0xff;\n-\t}\n-\n-      result += word;\n+  // make bound inclusive\n+  ++__prev;\n+\n+  // check out of bounds\n+  if ( __prev >= _GLIBCPP_BITSET_BITS_PER_WORD )\n+    return __not_found;\n+\n+    // search first (and only) word\n+  _WordT __thisword = _M_w;\n+\n+  // mask off bits below bound\n+  __thisword &= (~static_cast<_WordT>(0)) << _S_whichbit(__prev);\n+\n+  if ( __thisword != static_cast<_WordT>(0) ) {\n+    // find byte within word\n+    // get first byte into place\n+    __thisword >>= _S_whichbyte(__prev) * CHAR_BIT;\n+    for ( size_t __j = _S_whichbyte(__prev); __j < sizeof(_WordT); __j++ ) {\n+      unsigned char __this_byte\n+        = static_cast<unsigned char>(__thisword & (~(unsigned char)0));\n+      if ( __this_byte )\n+        return __j*CHAR_BIT + _First_one<true>::_S_first_one[__this_byte];\n+\n+      __thisword >>= CHAR_BIT;\n     }\n+  }\n+\n+  // not found, so return a value that indicates failure.\n+  return __not_found;\n+} // end _M_do_find_next\n+\n+// ------------------------------------------------------------\n+// Lookup tables for find and count operations.\n+\n+template<bool __dummy>\n+unsigned char std::_Bit_count<__dummy>::_S_bit_count[] = {\n+  0, /*   0 */ 1, /*   1 */ 1, /*   2 */ 2, /*   3 */ 1, /*   4 */\n+  2, /*   5 */ 2, /*   6 */ 3, /*   7 */ 1, /*   8 */ 2, /*   9 */\n+  2, /*  10 */ 3, /*  11 */ 2, /*  12 */ 3, /*  13 */ 3, /*  14 */\n+  4, /*  15 */ 1, /*  16 */ 2, /*  17 */ 2, /*  18 */ 3, /*  19 */\n+  2, /*  20 */ 3, /*  21 */ 3, /*  22 */ 4, /*  23 */ 2, /*  24 */\n+  3, /*  25 */ 3, /*  26 */ 4, /*  27 */ 3, /*  28 */ 4, /*  29 */\n+  4, /*  30 */ 5, /*  31 */ 1, /*  32 */ 2, /*  33 */ 2, /*  34 */\n+  3, /*  35 */ 2, /*  36 */ 3, /*  37 */ 3, /*  38 */ 4, /*  39 */\n+  2, /*  40 */ 3, /*  41 */ 3, /*  42 */ 4, /*  43 */ 3, /*  44 */\n+  4, /*  45 */ 4, /*  46 */ 5, /*  47 */ 2, /*  48 */ 3, /*  49 */\n+  3, /*  50 */ 4, /*  51 */ 3, /*  52 */ 4, /*  53 */ 4, /*  54 */\n+  5, /*  55 */ 3, /*  56 */ 4, /*  57 */ 4, /*  58 */ 5, /*  59 */\n+  4, /*  60 */ 5, /*  61 */ 5, /*  62 */ 6, /*  63 */ 1, /*  64 */\n+  2, /*  65 */ 2, /*  66 */ 3, /*  67 */ 2, /*  68 */ 3, /*  69 */\n+  3, /*  70 */ 4, /*  71 */ 2, /*  72 */ 3, /*  73 */ 3, /*  74 */\n+  4, /*  75 */ 3, /*  76 */ 4, /*  77 */ 4, /*  78 */ 5, /*  79 */\n+  2, /*  80 */ 3, /*  81 */ 3, /*  82 */ 4, /*  83 */ 3, /*  84 */\n+  4, /*  85 */ 4, /*  86 */ 5, /*  87 */ 3, /*  88 */ 4, /*  89 */\n+  4, /*  90 */ 5, /*  91 */ 4, /*  92 */ 5, /*  93 */ 5, /*  94 */\n+  6, /*  95 */ 2, /*  96 */ 3, /*  97 */ 3, /*  98 */ 4, /*  99 */\n+  3, /* 100 */ 4, /* 101 */ 4, /* 102 */ 5, /* 103 */ 3, /* 104 */\n+  4, /* 105 */ 4, /* 106 */ 5, /* 107 */ 4, /* 108 */ 5, /* 109 */\n+  5, /* 110 */ 6, /* 111 */ 3, /* 112 */ 4, /* 113 */ 4, /* 114 */\n+  5, /* 115 */ 4, /* 116 */ 5, /* 117 */ 5, /* 118 */ 6, /* 119 */\n+  4, /* 120 */ 5, /* 121 */ 5, /* 122 */ 6, /* 123 */ 5, /* 124 */\n+  6, /* 125 */ 6, /* 126 */ 7, /* 127 */ 1, /* 128 */ 2, /* 129 */\n+  2, /* 130 */ 3, /* 131 */ 2, /* 132 */ 3, /* 133 */ 3, /* 134 */\n+  4, /* 135 */ 2, /* 136 */ 3, /* 137 */ 3, /* 138 */ 4, /* 139 */\n+  3, /* 140 */ 4, /* 141 */ 4, /* 142 */ 5, /* 143 */ 2, /* 144 */\n+  3, /* 145 */ 3, /* 146 */ 4, /* 147 */ 3, /* 148 */ 4, /* 149 */\n+  4, /* 150 */ 5, /* 151 */ 3, /* 152 */ 4, /* 153 */ 4, /* 154 */\n+  5, /* 155 */ 4, /* 156 */ 5, /* 157 */ 5, /* 158 */ 6, /* 159 */\n+  2, /* 160 */ 3, /* 161 */ 3, /* 162 */ 4, /* 163 */ 3, /* 164 */\n+  4, /* 165 */ 4, /* 166 */ 5, /* 167 */ 3, /* 168 */ 4, /* 169 */\n+  4, /* 170 */ 5, /* 171 */ 4, /* 172 */ 5, /* 173 */ 5, /* 174 */\n+  6, /* 175 */ 3, /* 176 */ 4, /* 177 */ 4, /* 178 */ 5, /* 179 */\n+  4, /* 180 */ 5, /* 181 */ 5, /* 182 */ 6, /* 183 */ 4, /* 184 */\n+  5, /* 185 */ 5, /* 186 */ 6, /* 187 */ 5, /* 188 */ 6, /* 189 */\n+  6, /* 190 */ 7, /* 191 */ 2, /* 192 */ 3, /* 193 */ 3, /* 194 */\n+  4, /* 195 */ 3, /* 196 */ 4, /* 197 */ 4, /* 198 */ 5, /* 199 */\n+  3, /* 200 */ 4, /* 201 */ 4, /* 202 */ 5, /* 203 */ 4, /* 204 */\n+  5, /* 205 */ 5, /* 206 */ 6, /* 207 */ 3, /* 208 */ 4, /* 209 */\n+  4, /* 210 */ 5, /* 211 */ 4, /* 212 */ 5, /* 213 */ 5, /* 214 */\n+  6, /* 215 */ 4, /* 216 */ 5, /* 217 */ 5, /* 218 */ 6, /* 219 */\n+  5, /* 220 */ 6, /* 221 */ 6, /* 222 */ 7, /* 223 */ 3, /* 224 */\n+  4, /* 225 */ 4, /* 226 */ 5, /* 227 */ 4, /* 228 */ 5, /* 229 */\n+  5, /* 230 */ 6, /* 231 */ 4, /* 232 */ 5, /* 233 */ 5, /* 234 */\n+  6, /* 235 */ 5, /* 236 */ 6, /* 237 */ 6, /* 238 */ 7, /* 239 */\n+  4, /* 240 */ 5, /* 241 */ 5, /* 242 */ 6, /* 243 */ 5, /* 244 */\n+  6, /* 245 */ 6, /* 246 */ 7, /* 247 */ 5, /* 248 */ 6, /* 249 */\n+  6, /* 250 */ 7, /* 251 */ 6, /* 252 */ 7, /* 253 */ 7, /* 254 */\n+  8  /* 255 */\n+}; // end _Bit_count\n+\n+template<bool __dummy>\n+unsigned char std::_First_one<__dummy>::_S_first_one[] = {\n+  0, /*   0 */ 0, /*   1 */ 1, /*   2 */ 0, /*   3 */ 2, /*   4 */\n+  0, /*   5 */ 1, /*   6 */ 0, /*   7 */ 3, /*   8 */ 0, /*   9 */\n+  1, /*  10 */ 0, /*  11 */ 2, /*  12 */ 0, /*  13 */ 1, /*  14 */\n+  0, /*  15 */ 4, /*  16 */ 0, /*  17 */ 1, /*  18 */ 0, /*  19 */\n+  2, /*  20 */ 0, /*  21 */ 1, /*  22 */ 0, /*  23 */ 3, /*  24 */\n+  0, /*  25 */ 1, /*  26 */ 0, /*  27 */ 2, /*  28 */ 0, /*  29 */\n+  1, /*  30 */ 0, /*  31 */ 5, /*  32 */ 0, /*  33 */ 1, /*  34 */\n+  0, /*  35 */ 2, /*  36 */ 0, /*  37 */ 1, /*  38 */ 0, /*  39 */\n+  3, /*  40 */ 0, /*  41 */ 1, /*  42 */ 0, /*  43 */ 2, /*  44 */\n+  0, /*  45 */ 1, /*  46 */ 0, /*  47 */ 4, /*  48 */ 0, /*  49 */\n+  1, /*  50 */ 0, /*  51 */ 2, /*  52 */ 0, /*  53 */ 1, /*  54 */\n+  0, /*  55 */ 3, /*  56 */ 0, /*  57 */ 1, /*  58 */ 0, /*  59 */\n+  2, /*  60 */ 0, /*  61 */ 1, /*  62 */ 0, /*  63 */ 6, /*  64 */\n+  0, /*  65 */ 1, /*  66 */ 0, /*  67 */ 2, /*  68 */ 0, /*  69 */\n+  1, /*  70 */ 0, /*  71 */ 3, /*  72 */ 0, /*  73 */ 1, /*  74 */\n+  0, /*  75 */ 2, /*  76 */ 0, /*  77 */ 1, /*  78 */ 0, /*  79 */\n+  4, /*  80 */ 0, /*  81 */ 1, /*  82 */ 0, /*  83 */ 2, /*  84 */\n+  0, /*  85 */ 1, /*  86 */ 0, /*  87 */ 3, /*  88 */ 0, /*  89 */\n+  1, /*  90 */ 0, /*  91 */ 2, /*  92 */ 0, /*  93 */ 1, /*  94 */\n+  0, /*  95 */ 5, /*  96 */ 0, /*  97 */ 1, /*  98 */ 0, /*  99 */\n+  2, /* 100 */ 0, /* 101 */ 1, /* 102 */ 0, /* 103 */ 3, /* 104 */\n+  0, /* 105 */ 1, /* 106 */ 0, /* 107 */ 2, /* 108 */ 0, /* 109 */\n+  1, /* 110 */ 0, /* 111 */ 4, /* 112 */ 0, /* 113 */ 1, /* 114 */\n+  0, /* 115 */ 2, /* 116 */ 0, /* 117 */ 1, /* 118 */ 0, /* 119 */\n+  3, /* 120 */ 0, /* 121 */ 1, /* 122 */ 0, /* 123 */ 2, /* 124 */\n+  0, /* 125 */ 1, /* 126 */ 0, /* 127 */ 7, /* 128 */ 0, /* 129 */\n+  1, /* 130 */ 0, /* 131 */ 2, /* 132 */ 0, /* 133 */ 1, /* 134 */\n+  0, /* 135 */ 3, /* 136 */ 0, /* 137 */ 1, /* 138 */ 0, /* 139 */\n+  2, /* 140 */ 0, /* 141 */ 1, /* 142 */ 0, /* 143 */ 4, /* 144 */\n+  0, /* 145 */ 1, /* 146 */ 0, /* 147 */ 2, /* 148 */ 0, /* 149 */\n+  1, /* 150 */ 0, /* 151 */ 3, /* 152 */ 0, /* 153 */ 1, /* 154 */\n+  0, /* 155 */ 2, /* 156 */ 0, /* 157 */ 1, /* 158 */ 0, /* 159 */\n+  5, /* 160 */ 0, /* 161 */ 1, /* 162 */ 0, /* 163 */ 2, /* 164 */\n+  0, /* 165 */ 1, /* 166 */ 0, /* 167 */ 3, /* 168 */ 0, /* 169 */\n+  1, /* 170 */ 0, /* 171 */ 2, /* 172 */ 0, /* 173 */ 1, /* 174 */\n+  0, /* 175 */ 4, /* 176 */ 0, /* 177 */ 1, /* 178 */ 0, /* 179 */\n+  2, /* 180 */ 0, /* 181 */ 1, /* 182 */ 0, /* 183 */ 3, /* 184 */\n+  0, /* 185 */ 1, /* 186 */ 0, /* 187 */ 2, /* 188 */ 0, /* 189 */\n+  1, /* 190 */ 0, /* 191 */ 6, /* 192 */ 0, /* 193 */ 1, /* 194 */\n+  0, /* 195 */ 2, /* 196 */ 0, /* 197 */ 1, /* 198 */ 0, /* 199 */\n+  3, /* 200 */ 0, /* 201 */ 1, /* 202 */ 0, /* 203 */ 2, /* 204 */\n+  0, /* 205 */ 1, /* 206 */ 0, /* 207 */ 4, /* 208 */ 0, /* 209 */\n+  1, /* 210 */ 0, /* 211 */ 2, /* 212 */ 0, /* 213 */ 1, /* 214 */\n+  0, /* 215 */ 3, /* 216 */ 0, /* 217 */ 1, /* 218 */ 0, /* 219 */\n+  2, /* 220 */ 0, /* 221 */ 1, /* 222 */ 0, /* 223 */ 5, /* 224 */\n+  0, /* 225 */ 1, /* 226 */ 0, /* 227 */ 2, /* 228 */ 0, /* 229 */\n+  1, /* 230 */ 0, /* 231 */ 3, /* 232 */ 0, /* 233 */ 1, /* 234 */\n+  0, /* 235 */ 2, /* 236 */ 0, /* 237 */ 1, /* 238 */ 0, /* 239 */\n+  4, /* 240 */ 0, /* 241 */ 1, /* 242 */ 0, /* 243 */ 2, /* 244 */\n+  0, /* 245 */ 1, /* 246 */ 0, /* 247 */ 3, /* 248 */ 0, /* 249 */\n+  1, /* 250 */ 0, /* 251 */ 2, /* 252 */ 0, /* 253 */ 1, /* 254 */\n+  0, /* 255 */\n+}; // end _First_one\n+\n+// Explicitly instantiate them.\n+\n+template unsigned char std::_Bit_count<false>::_S_bit_count[];\n+template unsigned char std::_Bit_count<true>::_S_bit_count[];\n+\n+template unsigned char std::_First_one<false>::_S_first_one[];\n+template unsigned char std::_First_one<true>::_S_first_one[];\n \n-  return result;\n-}"}]}