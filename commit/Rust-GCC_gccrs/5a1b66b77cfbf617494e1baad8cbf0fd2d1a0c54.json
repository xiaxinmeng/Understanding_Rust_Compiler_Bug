{"sha": "5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "node_id": "C_kwDOANBUbNoAKDVhMWI2NmI3N2NmYmY2MTc0OTRlMWJhYWQ4Y2JmMGZkMmQxYTBjNTQ", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2022-12-14T08:19:35Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2022-12-19T14:23:26Z"}, "message": "RISC-V: Add testcases for VSETVL PASS 4\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-1.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-10.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-11.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-12.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-13.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-14.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-15.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-16.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-17.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-18.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-19.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-2.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-20.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-21.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-22.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-23.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-24.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-25.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-26.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-27.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-28.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-3.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-4.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-5.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-6.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-7.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-8.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-9.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_call-1.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_call-2.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_call-3.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_call-4.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_complex_loop-1.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_complex_loop-2.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_conflict-1.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_conflict-10.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_conflict-11.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_conflict-12.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_conflict-2.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_conflict-3.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_conflict-4.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_conflict-5.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_conflict-6.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_conflict-7.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_conflict-8.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_conflict-9.c: New test.", "tree": {"sha": "d4fe64f47dfd3b201a72ec81a3b2e95ece41b964", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4fe64f47dfd3b201a72ec81a3b2e95ece41b964"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76023293e6e82439643048a32cad36ddf9ba0e44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76023293e6e82439643048a32cad36ddf9ba0e44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76023293e6e82439643048a32cad36ddf9ba0e44"}], "stats": {"total": 6563, "additions": 6563, "deletions": 0}, "files": [{"sha": "4e4e16ccd2aa75fe63fba84b057bc88a92e91f51", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-1.c", "status": "added", "additions": 182, "deletions": 0, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-1.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,182 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 500);\n+    *(vint8mf8_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 600);\n+    *(vint8mf8_t*)(out + 600) = v;\n+  } else {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 700);\n+    *(vint8mf8_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 900 + i);\n+    *(vint8mf8_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f2 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 500);\n+    *(vint8mf4_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 600);\n+    *(vint8mf4_t*)(out + 600) = v;\n+  } else {\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 700);\n+    *(vint8mf4_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 900 + i);\n+    *(vint8mf4_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f3 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 500);\n+    *(vint8mf2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 600);\n+    *(vint8mf2_t*)(out + 600) = v;\n+  } else {\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 700);\n+    *(vint8mf2_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 900 + i);\n+    *(vint8mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f4 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 500);\n+    *(vint16mf4_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 600);\n+    *(vint16mf4_t*)(out + 600) = v;\n+  } else {\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 700);\n+    *(vint16mf4_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 900 + i);\n+    *(vint16mf4_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f5 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 500);\n+    *(vint16mf2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 600);\n+    *(vint16mf2_t*)(out + 600) = v;\n+  } else {\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 700);\n+    *(vint16mf2_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 900 + i);\n+    *(vint16mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 500);\n+    *(vint32mf2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 600);\n+    *(vint32mf2_t*)(out + 600) = v;\n+  } else {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 700);\n+    *(vint32mf2_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 900 + i);\n+    *(vint32mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */"}, {"sha": "f78c3487979adc13fa61145268a3ff12af21f121", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-10.c", "status": "added", "additions": 230, "deletions": 0, "changes": 230, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-10.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,230 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 500);\n+    *(vint8mf8_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 500);\n+    *(vint8mf8_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 700);\n+    *(vint8mf8_t*)(out + 700) = v;\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 900 + i);\n+    *(vint8mf8_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f2 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 500);\n+    *(vint8mf4_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 500);\n+    *(vint8mf4_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 700);\n+    *(vint8mf4_t*)(out + 700) = v;\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 900 + i);\n+    *(vint8mf4_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f3 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 500);\n+    *(vint8mf2_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 500);\n+    *(vint8mf2_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 700);\n+    *(vint8mf2_t*)(out + 700) = v;\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 900 + i);\n+    *(vint8mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f4 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 500);\n+    *(vint16mf4_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 500);\n+    *(vint16mf4_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 700);\n+    *(vint16mf4_t*)(out + 700) = v;\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 900 + i);\n+    *(vint16mf4_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f5 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 500);\n+    *(vint16mf2_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 500);\n+    *(vint16mf2_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 700);\n+    *(vint16mf2_t*)(out + 700) = v;\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 900 + i);\n+    *(vint16mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 500);\n+    *(vuint32mf2_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 500);\n+    *(vuint32mf2_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 700);\n+    *(vuint32mf2_t*)(out + 700) = v;\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 900 + i);\n+    *(vuint32mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */"}, {"sha": "1dfa2e9ed7686860519c7e067f73a4d72e85af21", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-11.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-11.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 500);\n+    *(vfloat32mf2_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 500);\n+    *(vfloat32mf2_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 700);\n+    *(vfloat32mf2_t*)(out + 700) = v;\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 900 + i);\n+    *(vfloat32mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "fed1aa3afecd16c89adc9ad95ed0a6735e08ff19", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-12.c", "status": "added", "additions": 266, "deletions": 0, "changes": 266, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-12.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,266 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vbool64_t v = *(vbool64_t*)(in + 500);\n+    *(vbool64_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vbool64_t v = *(vbool64_t*)(in + 500);\n+    *(vbool64_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    vbool64_t v = *(vbool64_t*)(in + 700);\n+    *(vbool64_t*)(out + 700) = v;\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool64_t v = *(vbool64_t*)(in + 900 + i);\n+    *(vbool64_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f2 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vbool32_t v = *(vbool32_t*)(in + 500);\n+    *(vbool32_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vbool32_t v = *(vbool32_t*)(in + 500);\n+    *(vbool32_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    vbool32_t v = *(vbool32_t*)(in + 700);\n+    *(vbool32_t*)(out + 700) = v;\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool32_t v = *(vbool32_t*)(in + 900 + i);\n+    *(vbool32_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f3 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vbool16_t v = *(vbool16_t*)(in + 500);\n+    *(vbool16_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vbool16_t v = *(vbool16_t*)(in + 500);\n+    *(vbool16_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    vbool16_t v = *(vbool16_t*)(in + 700);\n+    *(vbool16_t*)(out + 700) = v;\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool16_t v = *(vbool16_t*)(in + 900 + i);\n+    *(vbool16_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f4 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vbool8_t v = *(vbool8_t*)(in + 500);\n+    *(vbool8_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vbool8_t v = *(vbool8_t*)(in + 500);\n+    *(vbool8_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    vbool8_t v = *(vbool8_t*)(in + 700);\n+    *(vbool8_t*)(out + 700) = v;\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool8_t v = *(vbool8_t*)(in + 900 + i);\n+    *(vbool8_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f5 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vbool4_t v = *(vbool4_t*)(in + 500);\n+    *(vbool4_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vbool4_t v = *(vbool4_t*)(in + 500);\n+    *(vbool4_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    vbool4_t v = *(vbool4_t*)(in + 700);\n+    *(vbool4_t*)(out + 700) = v;\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool4_t v = *(vbool4_t*)(in + 900 + i);\n+    *(vbool4_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vbool2_t v = *(vbool2_t*)(in + 500);\n+    *(vbool2_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vbool2_t v = *(vbool2_t*)(in + 500);\n+    *(vbool2_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    vbool2_t v = *(vbool2_t*)(in + 700);\n+    *(vbool2_t*)(out + 700) = v;\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool2_t v = *(vbool2_t*)(in + 900 + i);\n+    *(vbool2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f7 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vbool1_t v = *(vbool1_t*)(in + 500);\n+    *(vbool1_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vbool1_t v = *(vbool1_t*)(in + 500);\n+    *(vbool1_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    vbool1_t v = *(vbool1_t*)(in + 700);\n+    *(vbool1_t*)(out + 700) = v;\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool1_t v = *(vbool1_t*)(in + 900 + i);\n+    *(vbool1_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" no-opts \"-O1\" } } } } */"}, {"sha": "bcf8e1c59bb15bd84e3b421248097a2efe01c6d0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-13.c", "status": "added", "additions": 221, "deletions": 0, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-13.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,221 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 500);\n+    *(vint8mf8_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 500);\n+    *(vint8mf8_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 900 + i);\n+    *(vint8mf8_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f2 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 500);\n+    *(vint8mf4_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 500);\n+    *(vint8mf4_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 900 + i);\n+    *(vint8mf4_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f3 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 500);\n+    *(vint8mf2_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 500);\n+    *(vint8mf2_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 900 + i);\n+    *(vint8mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f4 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 500);\n+    *(vint16mf4_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 500);\n+    *(vint16mf4_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 900 + i);\n+    *(vint16mf4_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f5 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 500);\n+    *(vint16mf2_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 500);\n+    *(vint16mf2_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 900 + i);\n+    *(vint16mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 500);\n+    *(vint32mf2_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 500);\n+    *(vint32mf2_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 900 + i);\n+    *(vint32mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "c2a8c3bd3b02560719377532c203cbdc1b1ef2c0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-14.c", "status": "added", "additions": 221, "deletions": 0, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-14.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,221 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 500);\n+    *(vuint8mf8_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 500);\n+    *(vuint8mf8_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 900 + i);\n+    *(vuint8mf8_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f2 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vuint8mf4_t v = *(vuint8mf4_t*)(in + 500);\n+    *(vuint8mf4_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vuint8mf4_t v = *(vuint8mf4_t*)(in + 500);\n+    *(vuint8mf4_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint8mf4_t v = *(vuint8mf4_t*)(in + 900 + i);\n+    *(vuint8mf4_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f3 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vuint8mf2_t v = *(vuint8mf2_t*)(in + 500);\n+    *(vuint8mf2_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vuint8mf2_t v = *(vuint8mf2_t*)(in + 500);\n+    *(vuint8mf2_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint8mf2_t v = *(vuint8mf2_t*)(in + 900 + i);\n+    *(vuint8mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f4 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vuint16mf4_t v = *(vuint16mf4_t*)(in + 500);\n+    *(vuint16mf4_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vuint16mf4_t v = *(vuint16mf4_t*)(in + 500);\n+    *(vuint16mf4_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint16mf4_t v = *(vuint16mf4_t*)(in + 900 + i);\n+    *(vuint16mf4_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f5 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vuint16mf2_t v = *(vuint16mf2_t*)(in + 500);\n+    *(vuint16mf2_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vuint16mf2_t v = *(vuint16mf2_t*)(in + 500);\n+    *(vuint16mf2_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint16mf2_t v = *(vuint16mf2_t*)(in + 900 + i);\n+    *(vuint16mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 500);\n+    *(vuint32mf2_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 500);\n+    *(vuint32mf2_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 900 + i);\n+    *(vuint32mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "e449078c79e0dfe7c62b728150265d0ef910b89e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-15.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-15.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 500);\n+    *(vfloat32mf2_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 500);\n+    *(vfloat32mf2_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 900 + i);\n+    *(vfloat32mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "224fc2e5f86e89a11052bf962d6632968672b4aa", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-16.c", "status": "added", "additions": 257, "deletions": 0, "changes": 257, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-16.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,257 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vbool64_t v = *(vbool64_t*)(in + 500);\n+    *(vbool64_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vbool64_t v = *(vbool64_t*)(in + 500);\n+    *(vbool64_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool64_t v = *(vbool64_t*)(in + 900 + i);\n+    *(vbool64_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f2 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vbool32_t v = *(vbool32_t*)(in + 500);\n+    *(vbool32_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vbool32_t v = *(vbool32_t*)(in + 500);\n+    *(vbool32_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool32_t v = *(vbool32_t*)(in + 900 + i);\n+    *(vbool32_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f3 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vbool16_t v = *(vbool16_t*)(in + 500);\n+    *(vbool16_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vbool16_t v = *(vbool16_t*)(in + 500);\n+    *(vbool16_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool16_t v = *(vbool16_t*)(in + 900 + i);\n+    *(vbool16_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f4 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vbool8_t v = *(vbool8_t*)(in + 500);\n+    *(vbool8_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vbool8_t v = *(vbool8_t*)(in + 500);\n+    *(vbool8_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool8_t v = *(vbool8_t*)(in + 900 + i);\n+    *(vbool8_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f5 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vbool4_t v = *(vbool4_t*)(in + 500);\n+    *(vbool4_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vbool4_t v = *(vbool4_t*)(in + 500);\n+    *(vbool4_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool4_t v = *(vbool4_t*)(in + 900 + i);\n+    *(vbool4_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vbool2_t v = *(vbool2_t*)(in + 500);\n+    *(vbool2_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vbool2_t v = *(vbool2_t*)(in + 500);\n+    *(vbool2_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool2_t v = *(vbool2_t*)(in + 900 + i);\n+    *(vbool2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f7 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vbool1_t v = *(vbool1_t*)(in + 500);\n+    *(vbool1_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vbool1_t v = *(vbool1_t*)(in + 500);\n+    *(vbool1_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool1_t v = *(vbool1_t*)(in + 900 + i);\n+    *(vbool1_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */"}, {"sha": "7cbabab16d9ba8c4a2ccdd7d91384e5e7c3d43f4", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-17.c", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-17.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,177 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vint8mf8_t v = *(vint8mf8_t*)(in + 100);\n+      *(vint8mf8_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      vint8mf8_t v = *(vint8mf8_t*)(in + 200);\n+      *(vint8mf8_t*)(out + 200) = v;\n+      if (cond == 2)\n+        {\n+          out[1000] = 8000;\n+        }\n+      else\n+        {\n+          out[2000] = 9000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = *(vint8mf8_t*)(in + i);\n+      *(vint8mf8_t*)(out + i) = v;\n+    }\n+}\n+\n+void f2 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vint8mf4_t v = *(vint8mf4_t*)(in + 100);\n+      *(vint8mf4_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      vint8mf4_t v = *(vint8mf4_t*)(in + 200);\n+      *(vint8mf4_t*)(out + 200) = v;\n+      if (cond == 2)\n+        {\n+          out[1000] = 8000;\n+        }\n+      else\n+        {\n+          out[2000] = 9000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf4_t v = *(vint8mf4_t*)(in + i);\n+      *(vint8mf4_t*)(out + i) = v;\n+    }\n+}\n+\n+void f3 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vint8mf2_t v = *(vint8mf2_t*)(in + 100);\n+      *(vint8mf2_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      vint8mf2_t v = *(vint8mf2_t*)(in + 200);\n+      *(vint8mf2_t*)(out + 200) = v;\n+      if (cond == 2)\n+        {\n+          out[1000] = 8000;\n+        }\n+      else\n+        {\n+          out[2000] = 9000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf2_t v = *(vint8mf2_t*)(in + i);\n+      *(vint8mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+void f4 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vint16mf4_t v = *(vint16mf4_t*)(in + 100);\n+      *(vint16mf4_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      vint16mf4_t v = *(vint16mf4_t*)(in + 200);\n+      *(vint16mf4_t*)(out + 200) = v;\n+      if (cond == 2)\n+        {\n+          out[1000] = 8000;\n+        }\n+      else\n+        {\n+          out[2000] = 9000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint16mf4_t v = *(vint16mf4_t*)(in + i);\n+      *(vint16mf4_t*)(out + i) = v;\n+    }\n+}\n+\n+void f5 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vint16mf2_t v = *(vint16mf2_t*)(in + 100);\n+      *(vint16mf2_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      vint16mf2_t v = *(vint16mf2_t*)(in + 200);\n+      *(vint16mf2_t*)(out + 200) = v;\n+      if (cond == 2)\n+        {\n+          out[1000] = 8000;\n+        }\n+      else\n+        {\n+          out[2000] = 9000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint16mf2_t v = *(vint16mf2_t*)(in + i);\n+      *(vint16mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+void f6 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vint32mf2_t v = *(vint32mf2_t*)(in + 100);\n+      *(vint32mf2_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      vint32mf2_t v = *(vint32mf2_t*)(in + 200);\n+      *(vint32mf2_t*)(out + 200) = v;\n+      if (cond == 2)\n+        {\n+          out[1000] = 8000;\n+        }\n+      else\n+        {\n+          out[2000] = 9000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint32mf2_t v = *(vint32mf2_t*)(in + i);\n+      *(vint32mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "cfaba79eed2143fe5679a61840df5c20d201e5c0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-18.c", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-18.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,177 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vuint8mf8_t v = *(vuint8mf8_t*)(in + 100);\n+      *(vuint8mf8_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      vuint8mf8_t v = *(vuint8mf8_t*)(in + 200);\n+      *(vuint8mf8_t*)(out + 200) = v;\n+      if (cond == 2)\n+        {\n+          out[1000] = 8000;\n+        }\n+      else\n+        {\n+          out[2000] = 9000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint8mf8_t v = *(vuint8mf8_t*)(in + i);\n+      *(vuint8mf8_t*)(out + i) = v;\n+    }\n+}\n+\n+void f2 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vuint8mf4_t v = *(vuint8mf4_t*)(in + 100);\n+      *(vuint8mf4_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      vuint8mf4_t v = *(vuint8mf4_t*)(in + 200);\n+      *(vuint8mf4_t*)(out + 200) = v;\n+      if (cond == 2)\n+        {\n+          out[1000] = 8000;\n+        }\n+      else\n+        {\n+          out[2000] = 9000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint8mf4_t v = *(vuint8mf4_t*)(in + i);\n+      *(vuint8mf4_t*)(out + i) = v;\n+    }\n+}\n+\n+void f3 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vuint8mf2_t v = *(vuint8mf2_t*)(in + 100);\n+      *(vuint8mf2_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      vuint8mf2_t v = *(vuint8mf2_t*)(in + 200);\n+      *(vuint8mf2_t*)(out + 200) = v;\n+      if (cond == 2)\n+        {\n+          out[1000] = 8000;\n+        }\n+      else\n+        {\n+          out[2000] = 9000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint8mf2_t v = *(vuint8mf2_t*)(in + i);\n+      *(vuint8mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+void f4 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vuint16mf4_t v = *(vuint16mf4_t*)(in + 100);\n+      *(vuint16mf4_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      vuint16mf4_t v = *(vuint16mf4_t*)(in + 200);\n+      *(vuint16mf4_t*)(out + 200) = v;\n+      if (cond == 2)\n+        {\n+          out[1000] = 8000;\n+        }\n+      else\n+        {\n+          out[2000] = 9000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint16mf4_t v = *(vuint16mf4_t*)(in + i);\n+      *(vuint16mf4_t*)(out + i) = v;\n+    }\n+}\n+\n+void f5 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vuint16mf2_t v = *(vuint16mf2_t*)(in + 100);\n+      *(vuint16mf2_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      vuint16mf2_t v = *(vuint16mf2_t*)(in + 200);\n+      *(vuint16mf2_t*)(out + 200) = v;\n+      if (cond == 2)\n+        {\n+          out[1000] = 8000;\n+        }\n+      else\n+        {\n+          out[2000] = 9000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint16mf2_t v = *(vuint16mf2_t*)(in + i);\n+      *(vuint16mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+void f6 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vuint32mf2_t v = *(vuint32mf2_t*)(in + 100);\n+      *(vuint32mf2_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      vuint32mf2_t v = *(vuint32mf2_t*)(in + 200);\n+      *(vuint32mf2_t*)(out + 200) = v;\n+      if (cond == 2)\n+        {\n+          out[1000] = 8000;\n+        }\n+      else\n+        {\n+          out[2000] = 9000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint32mf2_t v = *(vuint32mf2_t*)(in + i);\n+      *(vuint32mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "4ea46c790f9da177b9d9f5df10a11f2014018f3b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-19.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-19.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f6 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 100);\n+      *(vfloat32mf2_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 200);\n+      *(vfloat32mf2_t*)(out + 200) = v;\n+      if (cond == 2)\n+        {\n+          out[1000] = 8000;\n+        }\n+      else\n+        {\n+          out[2000] = 9000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vfloat32mf2_t v = *(vfloat32mf2_t*)(in + i);\n+      *(vfloat32mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "4e478a825dfc18e3f5736cbcfcfa48d5f3de340c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-2.c", "status": "added", "additions": 182, "deletions": 0, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-2.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,182 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 500);\n+    *(vuint8mf8_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 600);\n+    *(vuint8mf8_t*)(out + 600) = v;\n+  } else {\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 700);\n+    *(vuint8mf8_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 900 + i);\n+    *(vuint8mf8_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f2 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vuint8mf4_t v = *(vuint8mf4_t*)(in + 500);\n+    *(vuint8mf4_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vuint8mf4_t v = *(vuint8mf4_t*)(in + 600);\n+    *(vuint8mf4_t*)(out + 600) = v;\n+  } else {\n+    vuint8mf4_t v = *(vuint8mf4_t*)(in + 700);\n+    *(vuint8mf4_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint8mf4_t v = *(vuint8mf4_t*)(in + 900 + i);\n+    *(vuint8mf4_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f3 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vuint8mf2_t v = *(vuint8mf2_t*)(in + 500);\n+    *(vuint8mf2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vuint8mf2_t v = *(vuint8mf2_t*)(in + 600);\n+    *(vuint8mf2_t*)(out + 600) = v;\n+  } else {\n+    vuint8mf2_t v = *(vuint8mf2_t*)(in + 700);\n+    *(vuint8mf2_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint8mf2_t v = *(vuint8mf2_t*)(in + 900 + i);\n+    *(vuint8mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f4 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vuint16mf4_t v = *(vuint16mf4_t*)(in + 500);\n+    *(vuint16mf4_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vuint16mf4_t v = *(vuint16mf4_t*)(in + 600);\n+    *(vuint16mf4_t*)(out + 600) = v;\n+  } else {\n+    vuint16mf4_t v = *(vuint16mf4_t*)(in + 700);\n+    *(vuint16mf4_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint16mf4_t v = *(vuint16mf4_t*)(in + 900 + i);\n+    *(vuint16mf4_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f5 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vuint16mf2_t v = *(vuint16mf2_t*)(in + 500);\n+    *(vuint16mf2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vuint16mf2_t v = *(vuint16mf2_t*)(in + 600);\n+    *(vuint16mf2_t*)(out + 600) = v;\n+  } else {\n+    vuint16mf2_t v = *(vuint16mf2_t*)(in + 700);\n+    *(vuint16mf2_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint16mf2_t v = *(vuint16mf2_t*)(in + 900 + i);\n+    *(vuint16mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 500);\n+    *(vuint32mf2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 600);\n+    *(vuint32mf2_t*)(out + 600) = v;\n+  } else {\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 700);\n+    *(vuint32mf2_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 900 + i);\n+    *(vuint32mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" no-opts \"-O1\" } } } } */"}, {"sha": "9562d8fb889b1c7d1f36538e0ccfef9fdff843ca", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-20.c", "status": "added", "additions": 203, "deletions": 0, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-20.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,203 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vbool64_t v = *(vbool64_t*)(in + 100);\n+      *(vbool64_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      vbool64_t v = *(vbool64_t*)(in + 200);\n+      *(vbool64_t*)(out + 200) = v;\n+      if (cond == 2)\n+        {\n+          out[1000] = 8000;\n+        }\n+      else\n+        {\n+          out[2000] = 9000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool64_t v = *(vbool64_t*)(in + i);\n+      *(vbool64_t*)(out + i) = v;\n+    }\n+}\n+\n+void f2 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vbool32_t v = *(vbool32_t*)(in + 100);\n+      *(vbool32_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      vbool32_t v = *(vbool32_t*)(in + 200);\n+      *(vbool32_t*)(out + 200) = v;\n+      if (cond == 2)\n+        {\n+          out[1000] = 8000;\n+        }\n+      else\n+        {\n+          out[2000] = 9000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool32_t v = *(vbool32_t*)(in + i);\n+      *(vbool32_t*)(out + i) = v;\n+    }\n+}\n+\n+void f3 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vbool16_t v = *(vbool16_t*)(in + 100);\n+      *(vbool16_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      vbool16_t v = *(vbool16_t*)(in + 200);\n+      *(vbool16_t*)(out + 200) = v;\n+      if (cond == 2)\n+        {\n+          out[1000] = 8000;\n+        }\n+      else\n+        {\n+          out[2000] = 9000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool16_t v = *(vbool16_t*)(in + i);\n+      *(vbool16_t*)(out + i) = v;\n+    }\n+}\n+\n+void f4 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vbool8_t v = *(vbool8_t*)(in + 100);\n+      *(vbool8_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      vbool8_t v = *(vbool8_t*)(in + 200);\n+      *(vbool8_t*)(out + 200) = v;\n+      if (cond == 2)\n+        {\n+          out[1000] = 8000;\n+        }\n+      else\n+        {\n+          out[2000] = 9000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool8_t v = *(vbool8_t*)(in + i);\n+      *(vbool8_t*)(out + i) = v;\n+    }\n+}\n+\n+void f5 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vbool4_t v = *(vbool4_t*)(in + 100);\n+      *(vbool4_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      vbool4_t v = *(vbool4_t*)(in + 200);\n+      *(vbool4_t*)(out + 200) = v;\n+      if (cond == 2)\n+        {\n+          out[1000] = 8000;\n+        }\n+      else\n+        {\n+          out[2000] = 9000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool4_t v = *(vbool4_t*)(in + i);\n+      *(vbool4_t*)(out + i) = v;\n+    }\n+}\n+\n+void f6 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vbool2_t v = *(vbool2_t*)(in + 100);\n+      *(vbool2_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      vbool2_t v = *(vbool2_t*)(in + 200);\n+      *(vbool2_t*)(out + 200) = v;\n+      if (cond == 2)\n+        {\n+          out[1000] = 8000;\n+        }\n+      else\n+        {\n+          out[2000] = 9000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool2_t v = *(vbool2_t*)(in + i);\n+      *(vbool2_t*)(out + i) = v;\n+    }\n+}\n+\n+void f7 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vbool1_t v = *(vbool1_t*)(in + 100);\n+      *(vbool1_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      vbool1_t v = *(vbool1_t*)(in + 200);\n+      *(vbool1_t*)(out + 200) = v;\n+      if (cond == 2)\n+        {\n+          out[1000] = 8000;\n+        }\n+      else\n+        {\n+          out[2000] = 9000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool1_t v = *(vbool1_t*)(in + i);\n+      *(vbool1_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 6 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "198b72fd8ca1870b4ec2add4a44e7622fcb2cb06", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-21.c", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-21.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,155 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vint8mf8_t v = *(vint8mf8_t*)(in + 100);\n+      *(vint8mf8_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      if (cond == 2)\n+        {\n+          vint8mf8_t v = *(vint8mf8_t*)(in + 200);\n+          *(vint8mf8_t*)(out + 200) = v;\n+          out[1000] = 8000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = *(vint8mf8_t*)(in + i);\n+      *(vint8mf8_t*)(out + i) = v;\n+    }\n+}\n+\n+void f2 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vint8mf4_t v = *(vint8mf4_t*)(in + 100);\n+      *(vint8mf4_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      if (cond == 2)\n+        {\n+          vint8mf4_t v = *(vint8mf4_t*)(in + 200);\n+          *(vint8mf4_t*)(out + 200) = v;\n+          out[1000] = 8000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf4_t v = *(vint8mf4_t*)(in + i);\n+      *(vint8mf4_t*)(out + i) = v;\n+    }\n+}\n+\n+void f3 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vint8mf2_t v = *(vint8mf2_t*)(in + 100);\n+      *(vint8mf2_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      if (cond == 2)\n+        {\n+          vint8mf2_t v = *(vint8mf2_t*)(in + 200);\n+          *(vint8mf2_t*)(out + 200) = v;\n+          out[1000] = 8000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf2_t v = *(vint8mf2_t*)(in + i);\n+      *(vint8mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+void f4 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vint16mf4_t v = *(vint16mf4_t*)(in + 100);\n+      *(vint16mf4_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      if (cond == 2)\n+        {\n+          vint16mf4_t v = *(vint16mf4_t*)(in + 200);\n+          *(vint16mf4_t*)(out + 200) = v;\n+          out[1000] = 8000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint16mf4_t v = *(vint16mf4_t*)(in + i);\n+      *(vint16mf4_t*)(out + i) = v;\n+    }\n+}\n+\n+void f5 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vint16mf2_t v = *(vint16mf2_t*)(in + 100);\n+      *(vint16mf2_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      if (cond == 2)\n+        {\n+          vint16mf2_t v = *(vint16mf2_t*)(in + 200);\n+          *(vint16mf2_t*)(out + 200) = v;\n+          out[1000] = 8000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint16mf2_t v = *(vint16mf2_t*)(in + i);\n+      *(vint16mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+void f6 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vint32mf2_t v = *(vint32mf2_t*)(in + 100);\n+      *(vint32mf2_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      if (cond == 2)\n+        {\n+          vint32mf2_t v = *(vint32mf2_t*)(in + 200);\n+          *(vint32mf2_t*)(out + 200) = v;\n+          out[1000] = 8000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint32mf2_t v = *(vint32mf2_t*)(in + i);\n+      *(vint32mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "ca20f2f6aa812a7ceadd0a56466f49a6887e9987", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-22.c", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-22.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,155 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vuint8mf8_t v = *(vuint8mf8_t*)(in + 100);\n+      *(vuint8mf8_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      if (cond == 2)\n+        {\n+          vuint8mf8_t v = *(vuint8mf8_t*)(in + 200);\n+          *(vuint8mf8_t*)(out + 200) = v;\n+          out[1000] = 8000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint8mf8_t v = *(vuint8mf8_t*)(in + i);\n+      *(vuint8mf8_t*)(out + i) = v;\n+    }\n+}\n+\n+void f2 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vuint8mf4_t v = *(vuint8mf4_t*)(in + 100);\n+      *(vuint8mf4_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      if (cond == 2)\n+        {\n+          vuint8mf4_t v = *(vuint8mf4_t*)(in + 200);\n+          *(vuint8mf4_t*)(out + 200) = v;\n+          out[1000] = 8000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint8mf4_t v = *(vuint8mf4_t*)(in + i);\n+      *(vuint8mf4_t*)(out + i) = v;\n+    }\n+}\n+\n+void f3 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vuint8mf2_t v = *(vuint8mf2_t*)(in + 100);\n+      *(vuint8mf2_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      if (cond == 2)\n+        {\n+          vuint8mf2_t v = *(vuint8mf2_t*)(in + 200);\n+          *(vuint8mf2_t*)(out + 200) = v;\n+          out[1000] = 8000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint8mf2_t v = *(vuint8mf2_t*)(in + i);\n+      *(vuint8mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+void f4 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vuint16mf4_t v = *(vuint16mf4_t*)(in + 100);\n+      *(vuint16mf4_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      if (cond == 2)\n+        {\n+          vuint16mf4_t v = *(vuint16mf4_t*)(in + 200);\n+          *(vuint16mf4_t*)(out + 200) = v;\n+          out[1000] = 8000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint16mf4_t v = *(vuint16mf4_t*)(in + i);\n+      *(vuint16mf4_t*)(out + i) = v;\n+    }\n+}\n+\n+void f5 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vuint16mf2_t v = *(vuint16mf2_t*)(in + 100);\n+      *(vuint16mf2_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      if (cond == 2)\n+        {\n+          vuint16mf2_t v = *(vuint16mf2_t*)(in + 200);\n+          *(vuint16mf2_t*)(out + 200) = v;\n+          out[1000] = 8000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint16mf2_t v = *(vuint16mf2_t*)(in + i);\n+      *(vuint16mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+void f6 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vuint32mf2_t v = *(vuint32mf2_t*)(in + 100);\n+      *(vuint32mf2_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      if (cond == 2)\n+        {\n+          vuint32mf2_t v = *(vuint32mf2_t*)(in + 200);\n+          *(vuint32mf2_t*)(out + 200) = v;\n+          out[1000] = 8000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint32mf2_t v = *(vuint32mf2_t*)(in + i);\n+      *(vuint32mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "ecd8a202440fd4a82d8de26fcac4ae187f43ea18", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-23.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-23.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vuint32mf2_t v = *(vuint32mf2_t*)(in + 100);\n+      *(vuint32mf2_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      if (cond == 2)\n+        {\n+          vuint32mf2_t v = *(vuint32mf2_t*)(in + 200);\n+          *(vuint32mf2_t*)(out + 200) = v;\n+          out[1000] = 8000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint32mf2_t v = *(vuint32mf2_t*)(in + i);\n+      *(vuint32mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "a9ed21167a8832c3a7e5f258fb0efe3cc707b7b2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-24.c", "status": "added", "additions": 180, "deletions": 0, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-24.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,180 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vbool64_t v = *(vbool64_t*)(in + 100);\n+      *(vbool64_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      if (cond == 2)\n+        {\n+          vbool64_t v = *(vbool64_t*)(in + 200);\n+          *(vbool64_t*)(out + 200) = v;\n+          out[1000] = 8000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool64_t v = *(vbool64_t*)(in + i);\n+      *(vbool64_t*)(out + i) = v;\n+    }\n+}\n+\n+void f2 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vbool32_t v = *(vbool32_t*)(in + 100);\n+      *(vbool32_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      if (cond == 2)\n+        {\n+          vbool32_t v = *(vbool32_t*)(in + 200);\n+          *(vbool32_t*)(out + 200) = v;\n+          out[1000] = 8000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool32_t v = *(vbool32_t*)(in + i);\n+      *(vbool32_t*)(out + i) = v;\n+    }\n+}\n+\n+void f3 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vbool16_t v = *(vbool16_t*)(in + 100);\n+      *(vbool16_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      if (cond == 2)\n+        {\n+          vbool16_t v = *(vbool16_t*)(in + 200);\n+          *(vbool16_t*)(out + 200) = v;\n+          out[1000] = 8000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool16_t v = *(vbool16_t*)(in + i);\n+      *(vbool16_t*)(out + i) = v;\n+    }\n+}\n+\n+void f4 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vbool8_t v = *(vbool8_t*)(in + 100);\n+      *(vbool8_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      if (cond == 2)\n+        {\n+          vbool8_t v = *(vbool8_t*)(in + 200);\n+          *(vbool8_t*)(out + 200) = v;\n+          out[1000] = 8000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool8_t v = *(vbool8_t*)(in + i);\n+      *(vbool8_t*)(out + i) = v;\n+    }\n+}\n+\n+void f5 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vbool4_t v = *(vbool4_t*)(in + 100);\n+      *(vbool4_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      if (cond == 2)\n+        {\n+          vbool4_t v = *(vbool4_t*)(in + 200);\n+          *(vbool4_t*)(out + 200) = v;\n+          out[1000] = 8000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool4_t v = *(vbool4_t*)(in + i);\n+      *(vbool4_t*)(out + i) = v;\n+    }\n+}\n+\n+void f6 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vbool2_t v = *(vbool2_t*)(in + 100);\n+      *(vbool2_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      if (cond == 2)\n+        {\n+          vbool2_t v = *(vbool2_t*)(in + 200);\n+          *(vbool2_t*)(out + 200) = v;\n+          out[1000] = 8000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool2_t v = *(vbool2_t*)(in + i);\n+      *(vbool2_t*)(out + i) = v;\n+    }\n+}\n+\n+void f7 (int * restrict in, int * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vbool1_t v = *(vbool1_t*)(in + 100);\n+      *(vbool1_t*)(out + 100) = v;\n+    }\n+  else\n+    {\n+      if (cond == 2)\n+        {\n+          vbool1_t v = *(vbool1_t*)(in + 200);\n+          *(vbool1_t*)(out + 200) = v;\n+          out[1000] = 8000;\n+        }\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool1_t v = *(vbool1_t*)(in + i);\n+      *(vbool1_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "f87a8ccfad5117b929b4bf7ff44202335e7a672a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-25.c", "status": "added", "additions": 572, "deletions": 0, "changes": 572, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-25.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,572 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vbool64_t v = *(vbool64_t*)(in + 500);\n+    *(vbool64_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vbool64_t v = *(vbool64_t*)(in + 600);\n+    *(vbool64_t*)(out + 600) = v;\n+  } else {\n+    vbool64_t v = *(vbool64_t*)(in + 700);\n+    *(vbool64_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool64_t v = *(vbool64_t*)(in + 900 + i);\n+    *(vbool64_t*)(out + 900 + i) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  if (n == 0) {\n+    vbool64_t v = *(vbool64_t*)(in + 500);\n+    *(vbool64_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vbool64_t v = *(vbool64_t*)(in + 600);\n+    *(vbool64_t*)(out + 600) = v;\n+  } else {\n+    vbool64_t v = *(vbool64_t*)(in + 700);\n+    *(vbool64_t*)(out + 700) = v;\n+  }\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool64_t v = *(vbool64_t*)(in + 900 + i);\n+    *(vbool64_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f2 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vbool32_t v = *(vbool32_t*)(in + 500);\n+    *(vbool32_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vbool32_t v = *(vbool32_t*)(in + 600);\n+    *(vbool32_t*)(out + 600) = v;\n+  } else {\n+    vbool32_t v = *(vbool32_t*)(in + 700);\n+    *(vbool32_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool32_t v = *(vbool32_t*)(in + 900 + i);\n+    *(vbool32_t*)(out + 900 + i) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  if (n == 0) {\n+    vbool32_t v = *(vbool32_t*)(in + 500);\n+    *(vbool32_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vbool32_t v = *(vbool32_t*)(in + 600);\n+    *(vbool32_t*)(out + 600) = v;\n+  } else {\n+    vbool32_t v = *(vbool32_t*)(in + 700);\n+    *(vbool32_t*)(out + 700) = v;\n+  }\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool32_t v = *(vbool32_t*)(in + 900 + i);\n+    *(vbool32_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f3 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vbool16_t v = *(vbool16_t*)(in + 500);\n+    *(vbool16_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vbool16_t v = *(vbool16_t*)(in + 600);\n+    *(vbool16_t*)(out + 600) = v;\n+  } else {\n+    vbool16_t v = *(vbool16_t*)(in + 700);\n+    *(vbool16_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool16_t v = *(vbool16_t*)(in + 900 + i);\n+    *(vbool16_t*)(out + 900 + i) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  if (n == 0) {\n+    vbool16_t v = *(vbool16_t*)(in + 500);\n+    *(vbool16_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vbool16_t v = *(vbool16_t*)(in + 600);\n+    *(vbool16_t*)(out + 600) = v;\n+  } else {\n+    vbool16_t v = *(vbool16_t*)(in + 700);\n+    *(vbool16_t*)(out + 700) = v;\n+  }\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool16_t v = *(vbool16_t*)(in + 900 + i);\n+    *(vbool16_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f4 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vbool8_t v = *(vbool8_t*)(in + 500);\n+    *(vbool8_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vbool8_t v = *(vbool8_t*)(in + 600);\n+    *(vbool8_t*)(out + 600) = v;\n+  } else {\n+    vbool8_t v = *(vbool8_t*)(in + 700);\n+    *(vbool8_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool8_t v = *(vbool8_t*)(in + 900 + i);\n+    *(vbool8_t*)(out + 900 + i) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  if (n == 0) {\n+    vbool8_t v = *(vbool8_t*)(in + 500);\n+    *(vbool8_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vbool8_t v = *(vbool8_t*)(in + 600);\n+    *(vbool8_t*)(out + 600) = v;\n+  } else {\n+    vbool8_t v = *(vbool8_t*)(in + 700);\n+    *(vbool8_t*)(out + 700) = v;\n+  }\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool8_t v = *(vbool8_t*)(in + 900 + i);\n+    *(vbool8_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f5 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vbool4_t v = *(vbool4_t*)(in + 500);\n+    *(vbool4_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vbool4_t v = *(vbool4_t*)(in + 600);\n+    *(vbool4_t*)(out + 600) = v;\n+  } else {\n+    vbool4_t v = *(vbool4_t*)(in + 700);\n+    *(vbool4_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool4_t v = *(vbool4_t*)(in + 900 + i);\n+    *(vbool4_t*)(out + 900 + i) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  if (n == 0) {\n+    vbool4_t v = *(vbool4_t*)(in + 500);\n+    *(vbool4_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vbool4_t v = *(vbool4_t*)(in + 600);\n+    *(vbool4_t*)(out + 600) = v;\n+  } else {\n+    vbool4_t v = *(vbool4_t*)(in + 700);\n+    *(vbool4_t*)(out + 700) = v;\n+  }\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool4_t v = *(vbool4_t*)(in + 900 + i);\n+    *(vbool4_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vbool2_t v = *(vbool2_t*)(in + 500);\n+    *(vbool2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vbool2_t v = *(vbool2_t*)(in + 600);\n+    *(vbool2_t*)(out + 600) = v;\n+  } else {\n+    vbool2_t v = *(vbool2_t*)(in + 700);\n+    *(vbool2_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool2_t v = *(vbool2_t*)(in + 900 + i);\n+    *(vbool2_t*)(out + 900 + i) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  if (n == 0) {\n+    vbool2_t v = *(vbool2_t*)(in + 500);\n+    *(vbool2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vbool2_t v = *(vbool2_t*)(in + 600);\n+    *(vbool2_t*)(out + 600) = v;\n+  } else {\n+    vbool2_t v = *(vbool2_t*)(in + 700);\n+    *(vbool2_t*)(out + 700) = v;\n+  }\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool2_t v = *(vbool2_t*)(in + 900 + i);\n+    *(vbool2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f7 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vbool1_t v = *(vbool1_t*)(in + 500);\n+    *(vbool1_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vbool1_t v = *(vbool1_t*)(in + 600);\n+    *(vbool1_t*)(out + 600) = v;\n+  } else {\n+    vbool1_t v = *(vbool1_t*)(in + 700);\n+    *(vbool1_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool1_t v = *(vbool1_t*)(in + 900 + i);\n+    *(vbool1_t*)(out + 900 + i) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  if (n == 0) {\n+    vbool1_t v = *(vbool1_t*)(in + 500);\n+    *(vbool1_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vbool1_t v = *(vbool1_t*)(in + 600);\n+    *(vbool1_t*)(out + 600) = v;\n+  } else {\n+    vbool1_t v = *(vbool1_t*)(in + 700);\n+    *(vbool1_t*)(out + 700) = v;\n+  }\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool1_t v = *(vbool1_t*)(in + 900 + i);\n+    *(vbool1_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "c12385576cb37f48c31fab470753521c343a546e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-26.c", "status": "added", "additions": 492, "deletions": 0, "changes": 492, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-26.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,492 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 500);\n+    *(vint8mf8_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 600);\n+    *(vint8mf8_t*)(out + 600) = v;\n+  } else {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 700);\n+    *(vint8mf8_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 900 + i);\n+    *(vint8mf8_t*)(out + 900 + i) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  if (n == 0) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 500);\n+    *(vint8mf8_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 600);\n+    *(vint8mf8_t*)(out + 600) = v;\n+  } else {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 700);\n+    *(vint8mf8_t*)(out + 700) = v;\n+  }\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 900 + i);\n+    *(vint8mf8_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f2 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 500);\n+    *(vint8mf4_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 600);\n+    *(vint8mf4_t*)(out + 600) = v;\n+  } else {\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 700);\n+    *(vint8mf4_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 900 + i);\n+    *(vint8mf4_t*)(out + 900 + i) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  if (n == 0) {\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 500);\n+    *(vint8mf4_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 600);\n+    *(vint8mf4_t*)(out + 600) = v;\n+  } else {\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 700);\n+    *(vint8mf4_t*)(out + 700) = v;\n+  }\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 900 + i);\n+    *(vint8mf4_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f3 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 500);\n+    *(vint8mf2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 600);\n+    *(vint8mf2_t*)(out + 600) = v;\n+  } else {\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 700);\n+    *(vint8mf2_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 900 + i);\n+    *(vint8mf2_t*)(out + 900 + i) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  if (n == 0) {\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 500);\n+    *(vint8mf2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 600);\n+    *(vint8mf2_t*)(out + 600) = v;\n+  } else {\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 700);\n+    *(vint8mf2_t*)(out + 700) = v;\n+  }\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 900 + i);\n+    *(vint8mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f4 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 500);\n+    *(vint16mf4_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 600);\n+    *(vint16mf4_t*)(out + 600) = v;\n+  } else {\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 700);\n+    *(vint16mf4_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 900 + i);\n+    *(vint16mf4_t*)(out + 900 + i) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  if (n == 0) {\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 500);\n+    *(vint16mf4_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 600);\n+    *(vint16mf4_t*)(out + 600) = v;\n+  } else {\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 700);\n+    *(vint16mf4_t*)(out + 700) = v;\n+  }\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 900 + i);\n+    *(vint16mf4_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f5 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 500);\n+    *(vint16mf2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 600);\n+    *(vint16mf2_t*)(out + 600) = v;\n+  } else {\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 700);\n+    *(vint16mf2_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 900 + i);\n+    *(vint16mf2_t*)(out + 900 + i) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  if (n == 0) {\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 500);\n+    *(vint16mf2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 600);\n+    *(vint16mf2_t*)(out + 600) = v;\n+  } else {\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 700);\n+    *(vint16mf2_t*)(out + 700) = v;\n+  }\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 900 + i);\n+    *(vint16mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 500);\n+    *(vint32mf2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 600);\n+    *(vint32mf2_t*)(out + 600) = v;\n+  } else {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 700);\n+    *(vint32mf2_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 900 + i);\n+    *(vint32mf2_t*)(out + 900 + i) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  if (n == 0) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 500);\n+    *(vint32mf2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 600);\n+    *(vint32mf2_t*)(out + 600) = v;\n+  } else {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 700);\n+    *(vint32mf2_t*)(out + 700) = v;\n+  }\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 900 + i);\n+    *(vint32mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+"}, {"sha": "6265000a6e1c3d430b8e24f0d4b2d5b8992a2b8d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-27.c", "status": "added", "additions": 491, "deletions": 0, "changes": 491, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-27.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,491 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 500);\n+    *(vuint8mf8_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 600);\n+    *(vuint8mf8_t*)(out + 600) = v;\n+  } else {\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 700);\n+    *(vuint8mf8_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 900 + i);\n+    *(vuint8mf8_t*)(out + 900 + i) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  if (n == 0) {\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 500);\n+    *(vuint8mf8_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 600);\n+    *(vuint8mf8_t*)(out + 600) = v;\n+  } else {\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 700);\n+    *(vuint8mf8_t*)(out + 700) = v;\n+  }\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 900 + i);\n+    *(vuint8mf8_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f2 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vuint8mf4_t v = *(vuint8mf4_t*)(in + 500);\n+    *(vuint8mf4_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vuint8mf4_t v = *(vuint8mf4_t*)(in + 600);\n+    *(vuint8mf4_t*)(out + 600) = v;\n+  } else {\n+    vuint8mf4_t v = *(vuint8mf4_t*)(in + 700);\n+    *(vuint8mf4_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint8mf4_t v = *(vuint8mf4_t*)(in + 900 + i);\n+    *(vuint8mf4_t*)(out + 900 + i) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  if (n == 0) {\n+    vuint8mf4_t v = *(vuint8mf4_t*)(in + 500);\n+    *(vuint8mf4_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vuint8mf4_t v = *(vuint8mf4_t*)(in + 600);\n+    *(vuint8mf4_t*)(out + 600) = v;\n+  } else {\n+    vuint8mf4_t v = *(vuint8mf4_t*)(in + 700);\n+    *(vuint8mf4_t*)(out + 700) = v;\n+  }\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint8mf4_t v = *(vuint8mf4_t*)(in + 900 + i);\n+    *(vuint8mf4_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f3 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vuint8mf2_t v = *(vuint8mf2_t*)(in + 500);\n+    *(vuint8mf2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vuint8mf2_t v = *(vuint8mf2_t*)(in + 600);\n+    *(vuint8mf2_t*)(out + 600) = v;\n+  } else {\n+    vuint8mf2_t v = *(vuint8mf2_t*)(in + 700);\n+    *(vuint8mf2_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint8mf2_t v = *(vuint8mf2_t*)(in + 900 + i);\n+    *(vuint8mf2_t*)(out + 900 + i) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  if (n == 0) {\n+    vuint8mf2_t v = *(vuint8mf2_t*)(in + 500);\n+    *(vuint8mf2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vuint8mf2_t v = *(vuint8mf2_t*)(in + 600);\n+    *(vuint8mf2_t*)(out + 600) = v;\n+  } else {\n+    vuint8mf2_t v = *(vuint8mf2_t*)(in + 700);\n+    *(vuint8mf2_t*)(out + 700) = v;\n+  }\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint8mf2_t v = *(vuint8mf2_t*)(in + 900 + i);\n+    *(vuint8mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f4 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vuint16mf4_t v = *(vuint16mf4_t*)(in + 500);\n+    *(vuint16mf4_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vuint16mf4_t v = *(vuint16mf4_t*)(in + 600);\n+    *(vuint16mf4_t*)(out + 600) = v;\n+  } else {\n+    vuint16mf4_t v = *(vuint16mf4_t*)(in + 700);\n+    *(vuint16mf4_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint16mf4_t v = *(vuint16mf4_t*)(in + 900 + i);\n+    *(vuint16mf4_t*)(out + 900 + i) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  if (n == 0) {\n+    vuint16mf4_t v = *(vuint16mf4_t*)(in + 500);\n+    *(vuint16mf4_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vuint16mf4_t v = *(vuint16mf4_t*)(in + 600);\n+    *(vuint16mf4_t*)(out + 600) = v;\n+  } else {\n+    vuint16mf4_t v = *(vuint16mf4_t*)(in + 700);\n+    *(vuint16mf4_t*)(out + 700) = v;\n+  }\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint16mf4_t v = *(vuint16mf4_t*)(in + 900 + i);\n+    *(vuint16mf4_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f5 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vuint16mf2_t v = *(vuint16mf2_t*)(in + 500);\n+    *(vuint16mf2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vuint16mf2_t v = *(vuint16mf2_t*)(in + 600);\n+    *(vuint16mf2_t*)(out + 600) = v;\n+  } else {\n+    vuint16mf2_t v = *(vuint16mf2_t*)(in + 700);\n+    *(vuint16mf2_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint16mf2_t v = *(vuint16mf2_t*)(in + 900 + i);\n+    *(vuint16mf2_t*)(out + 900 + i) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  if (n == 0) {\n+    vuint16mf2_t v = *(vuint16mf2_t*)(in + 500);\n+    *(vuint16mf2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vuint16mf2_t v = *(vuint16mf2_t*)(in + 600);\n+    *(vuint16mf2_t*)(out + 600) = v;\n+  } else {\n+    vuint16mf2_t v = *(vuint16mf2_t*)(in + 700);\n+    *(vuint16mf2_t*)(out + 700) = v;\n+  }\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint16mf2_t v = *(vuint16mf2_t*)(in + 900 + i);\n+    *(vuint16mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 500);\n+    *(vuint32mf2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 600);\n+    *(vuint32mf2_t*)(out + 600) = v;\n+  } else {\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 700);\n+    *(vuint32mf2_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 900 + i);\n+    *(vuint32mf2_t*)(out + 900 + i) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  if (n == 0) {\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 500);\n+    *(vuint32mf2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 600);\n+    *(vuint32mf2_t*)(out + 600) = v;\n+  } else {\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 700);\n+    *(vuint32mf2_t*)(out + 700) = v;\n+  }\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 900 + i);\n+    *(vuint32mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "de7c5f9549148ed7be42c8e42920b1a9d3cac32d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-28.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-28.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 500);\n+    *(vfloat32mf2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 600);\n+    *(vfloat32mf2_t*)(out + 600) = v;\n+  } else {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 700);\n+    *(vfloat32mf2_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 900 + i);\n+    *(vfloat32mf2_t*)(out + 900 + i) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  if (n == 0) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 500);\n+    *(vfloat32mf2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 600);\n+    *(vfloat32mf2_t*)(out + 600) = v;\n+  } else {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 700);\n+    *(vfloat32mf2_t*)(out + 700) = v;\n+  }\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 900 + i);\n+    *(vfloat32mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "f920017747bd9f29584042dacd9244c7bbd9e923", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-3.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-3.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 500);\n+    *(vfloat32mf2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 600);\n+    *(vfloat32mf2_t*)(out + 600) = v;\n+  } else {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 700);\n+    *(vfloat32mf2_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 900 + i);\n+    *(vfloat32mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "31a9e436e6be4a0e49d999e3fc9fef8166aa8aae", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-4.c", "status": "added", "additions": 210, "deletions": 0, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-4.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,210 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vbool64_t v = *(vbool64_t*)(in + 500);\n+    *(vbool64_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vbool64_t v = *(vbool64_t*)(in + 600);\n+    *(vbool64_t*)(out + 600) = v;\n+  } else {\n+    vbool64_t v = *(vbool64_t*)(in + 700);\n+    *(vbool64_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool64_t v = *(vbool64_t*)(in + 900 + i);\n+    *(vbool64_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f2 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vbool32_t v = *(vbool32_t*)(in + 500);\n+    *(vbool32_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vbool32_t v = *(vbool32_t*)(in + 600);\n+    *(vbool32_t*)(out + 600) = v;\n+  } else {\n+    vbool32_t v = *(vbool32_t*)(in + 700);\n+    *(vbool32_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool32_t v = *(vbool32_t*)(in + 900 + i);\n+    *(vbool32_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f3 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vbool16_t v = *(vbool16_t*)(in + 500);\n+    *(vbool16_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vbool16_t v = *(vbool16_t*)(in + 600);\n+    *(vbool16_t*)(out + 600) = v;\n+  } else {\n+    vbool16_t v = *(vbool16_t*)(in + 700);\n+    *(vbool16_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool16_t v = *(vbool16_t*)(in + 900 + i);\n+    *(vbool16_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f4 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vbool8_t v = *(vbool8_t*)(in + 500);\n+    *(vbool8_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vbool8_t v = *(vbool8_t*)(in + 600);\n+    *(vbool8_t*)(out + 600) = v;\n+  } else {\n+    vbool8_t v = *(vbool8_t*)(in + 700);\n+    *(vbool8_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool8_t v = *(vbool8_t*)(in + 900 + i);\n+    *(vbool8_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f5 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vbool4_t v = *(vbool4_t*)(in + 500);\n+    *(vbool4_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vbool4_t v = *(vbool4_t*)(in + 600);\n+    *(vbool4_t*)(out + 600) = v;\n+  } else {\n+    vbool4_t v = *(vbool4_t*)(in + 700);\n+    *(vbool4_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool4_t v = *(vbool4_t*)(in + 900 + i);\n+    *(vbool4_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vbool2_t v = *(vbool2_t*)(in + 500);\n+    *(vbool2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vbool2_t v = *(vbool2_t*)(in + 600);\n+    *(vbool2_t*)(out + 600) = v;\n+  } else {\n+    vbool2_t v = *(vbool2_t*)(in + 700);\n+    *(vbool2_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool2_t v = *(vbool2_t*)(in + 900 + i);\n+    *(vbool2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f7 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vbool1_t v = *(vbool1_t*)(in + 500);\n+    *(vbool1_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vbool1_t v = *(vbool1_t*)(in + 600);\n+    *(vbool1_t*)(out + 600) = v;\n+  } else {\n+    vbool1_t v = *(vbool1_t*)(in + 700);\n+    *(vbool1_t*)(out + 700) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool1_t v = *(vbool1_t*)(in + 900 + i);\n+    *(vbool1_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 6 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O2\" } } } } */"}, {"sha": "2cf28d7cd36ec1b0d43bf8831a6636ad5aad05f0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-5.c", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-5.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,167 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 500);\n+    *(vint8mf8_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 600);\n+    *(vint8mf8_t*)(out + 600) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 900 + i);\n+    *(vint8mf8_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f2 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 500);\n+    *(vint8mf4_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 600);\n+    *(vint8mf4_t*)(out + 600) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 900 + i);\n+    *(vint8mf4_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f3 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 500);\n+    *(vint8mf2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 600);\n+    *(vint8mf2_t*)(out + 600) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 900 + i);\n+    *(vint8mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f4 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 500);\n+    *(vint16mf4_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 600);\n+    *(vint16mf4_t*)(out + 600) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 900 + i);\n+    *(vint16mf4_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f5 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 500);\n+    *(vint16mf2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 600);\n+    *(vint16mf2_t*)(out + 600) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 900 + i);\n+    *(vint16mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 500);\n+    *(vint32mf2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 600);\n+    *(vint32mf2_t*)(out + 600) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 900 + i);\n+    *(vint32mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */"}, {"sha": "d52c1bbecd3cbccebbc9c03ea82dfdd5111259fb", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-6.c", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-6.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,167 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 500);\n+    *(vint8mf8_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 600);\n+    *(vint8mf8_t*)(out + 600) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 900 + i);\n+    *(vint8mf8_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f2 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 500);\n+    *(vint8mf4_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 600);\n+    *(vint8mf4_t*)(out + 600) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 900 + i);\n+    *(vint8mf4_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f3 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 500);\n+    *(vint8mf2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 600);\n+    *(vint8mf2_t*)(out + 600) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 900 + i);\n+    *(vint8mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f4 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 500);\n+    *(vint16mf4_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 600);\n+    *(vint16mf4_t*)(out + 600) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 900 + i);\n+    *(vint16mf4_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f5 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 500);\n+    *(vint16mf2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 600);\n+    *(vint16mf2_t*)(out + 600) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 900 + i);\n+    *(vint16mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 500);\n+    *(vuint32mf2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 600);\n+    *(vuint32mf2_t*)(out + 600) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 900 + i);\n+    *(vuint32mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */"}, {"sha": "bd6d68bf780cfdcc324cb0e29eaf63b515a381ea", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-7.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-7.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 500);\n+    *(vfloat32mf2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 600);\n+    *(vfloat32mf2_t*)(out + 600) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 900 + i);\n+    *(vfloat32mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */"}, {"sha": "d3b3fa3390e018e8c447789d566e87628112d8cd", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-8.c", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-8.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,194 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vbool64_t v = *(vbool64_t*)(in + 500);\n+    *(vbool64_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vbool64_t v = *(vbool64_t*)(in + 600);\n+    *(vbool64_t*)(out + 600) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool64_t v = *(vbool64_t*)(in + 900 + i);\n+    *(vbool64_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f2 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vbool32_t v = *(vbool32_t*)(in + 500);\n+    *(vbool32_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vbool32_t v = *(vbool32_t*)(in + 600);\n+    *(vbool32_t*)(out + 600) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool32_t v = *(vbool32_t*)(in + 900 + i);\n+    *(vbool32_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f3 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vbool16_t v = *(vbool16_t*)(in + 500);\n+    *(vbool16_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vbool16_t v = *(vbool16_t*)(in + 600);\n+    *(vbool16_t*)(out + 600) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool16_t v = *(vbool16_t*)(in + 900 + i);\n+    *(vbool16_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f4 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vbool8_t v = *(vbool8_t*)(in + 500);\n+    *(vbool8_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vbool8_t v = *(vbool8_t*)(in + 600);\n+    *(vbool8_t*)(out + 600) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool8_t v = *(vbool8_t*)(in + 900 + i);\n+    *(vbool8_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f5 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vbool4_t v = *(vbool4_t*)(in + 500);\n+    *(vbool4_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vbool4_t v = *(vbool4_t*)(in + 600);\n+    *(vbool4_t*)(out + 600) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool4_t v = *(vbool4_t*)(in + 900 + i);\n+    *(vbool4_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vbool2_t v = *(vbool2_t*)(in + 500);\n+    *(vbool2_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vbool2_t v = *(vbool2_t*)(in + 600);\n+    *(vbool2_t*)(out + 600) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool2_t v = *(vbool2_t*)(in + 900 + i);\n+    *(vbool2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f7 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  if (n == 0) {\n+    vbool1_t v = *(vbool1_t*)(in + 500);\n+    *(vbool1_t*)(out + 500) = v;\n+  } else if (n == 1) {\n+    vbool1_t v = *(vbool1_t*)(in + 600);\n+    *(vbool1_t*)(out + 600) = v;\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool1_t v = *(vbool1_t*)(in + 900 + i);\n+    *(vbool1_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */"}, {"sha": "e1c560953d59b8345bb046efc7372269dd78d6ff", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-9.c", "status": "added", "additions": 230, "deletions": 0, "changes": 230, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-9.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,230 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 500);\n+    *(vint8mf8_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 500);\n+    *(vint8mf8_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 700);\n+    *(vint8mf8_t*)(out + 700) = v;\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 900 + i);\n+    *(vint8mf8_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f2 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 500);\n+    *(vint8mf4_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 500);\n+    *(vint8mf4_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 700);\n+    *(vint8mf4_t*)(out + 700) = v;\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 900 + i);\n+    *(vint8mf4_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f3 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 500);\n+    *(vint8mf2_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 500);\n+    *(vint8mf2_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 700);\n+    *(vint8mf2_t*)(out + 700) = v;\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 900 + i);\n+    *(vint8mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f4 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 500);\n+    *(vint16mf4_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 500);\n+    *(vint16mf4_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 700);\n+    *(vint16mf4_t*)(out + 700) = v;\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 900 + i);\n+    *(vint16mf4_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f5 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 500);\n+    *(vint16mf2_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 500);\n+    *(vint16mf2_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 700);\n+    *(vint16mf2_t*)(out + 700) = v;\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 900 + i);\n+    *(vint16mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  switch (n)\n+  {\n+  case 0:{\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 500);\n+    *(vint32mf2_t*)(out + 500) = v;\n+    break;\n+  }\n+  case 1:{\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 500);\n+    *(vint32mf2_t*)(out + 500) = v;\n+    break;\n+  }\n+  default:{\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 700);\n+    *(vint32mf2_t*)(out + 700) = v;\n+    break;\n+  }\n+  }\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 900 + i);\n+    *(vint32mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\ta[0-7],a[0-7],a[0-7]\\s+\\.L[0-9][0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */"}, {"sha": "89b6abe397b5ef3885a61f2dd5f4612fadae4cd8", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_call-1.c", "status": "added", "additions": 239, "deletions": 0, "changes": 239, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_call-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_call-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_call-1.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,239 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void fn3 (void);\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool64_t v = *(vbool64_t*)(in + 900 + i);\n+    *(vbool64_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool64_t v = *(vbool64_t*)(in + 900 + i);\n+    *(vbool64_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool64_t v = *(vbool64_t*)(in + 900 + i);\n+    *(vbool64_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool64_t v = *(vbool64_t*)(in + 900 + i);\n+    *(vbool64_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool64_t v = *(vbool64_t*)(in + 900 + i);\n+    *(vbool64_t*)(out + 900 + i) = v;\n+  }\n+\n+}\n+\n+int f2 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool32_t v = *(vbool32_t*)(in + 900 + i);\n+    *(vbool32_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool32_t v = *(vbool32_t*)(in + 900 + i);\n+    *(vbool32_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool32_t v = *(vbool32_t*)(in + 900 + i);\n+    *(vbool32_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool32_t v = *(vbool32_t*)(in + 900 + i);\n+    *(vbool32_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool32_t v = *(vbool32_t*)(in + 900 + i);\n+    *(vbool32_t*)(out + 900 + i) = v;\n+  }\n+\n+}\n+\n+int f3 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool16_t v = *(vbool16_t*)(in + 900 + i);\n+    *(vbool16_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool16_t v = *(vbool16_t*)(in + 900 + i);\n+    *(vbool16_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool16_t v = *(vbool16_t*)(in + 900 + i);\n+    *(vbool16_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool16_t v = *(vbool16_t*)(in + 900 + i);\n+    *(vbool16_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool16_t v = *(vbool16_t*)(in + 900 + i);\n+    *(vbool16_t*)(out + 900 + i) = v;\n+  }\n+\n+}\n+\n+int f4 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool8_t v = *(vbool8_t*)(in + 900 + i);\n+    *(vbool8_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool8_t v = *(vbool8_t*)(in + 900 + i);\n+    *(vbool8_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool8_t v = *(vbool8_t*)(in + 900 + i);\n+    *(vbool8_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool8_t v = *(vbool8_t*)(in + 900 + i);\n+    *(vbool8_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool8_t v = *(vbool8_t*)(in + 900 + i);\n+    *(vbool8_t*)(out + 900 + i) = v;\n+  }\n+\n+}\n+\n+int f5 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool4_t v = *(vbool4_t*)(in + 900 + i);\n+    *(vbool4_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool4_t v = *(vbool4_t*)(in + 900 + i);\n+    *(vbool4_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool4_t v = *(vbool4_t*)(in + 900 + i);\n+    *(vbool4_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool4_t v = *(vbool4_t*)(in + 900 + i);\n+    *(vbool4_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool4_t v = *(vbool4_t*)(in + 900 + i);\n+    *(vbool4_t*)(out + 900 + i) = v;\n+  }\n+\n+}\n+\n+int f6 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool2_t v = *(vbool2_t*)(in + 900 + i);\n+    *(vbool2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool2_t v = *(vbool2_t*)(in + 900 + i);\n+    *(vbool2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool2_t v = *(vbool2_t*)(in + 900 + i);\n+    *(vbool2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool2_t v = *(vbool2_t*)(in + 900 + i);\n+    *(vbool2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool2_t v = *(vbool2_t*)(in + 900 + i);\n+    *(vbool2_t*)(out + 900 + i) = v;\n+  }\n+\n+}\n+\n+int f7 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool1_t v = *(vbool1_t*)(in + 900 + i);\n+    *(vbool1_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool1_t v = *(vbool1_t*)(in + 900 + i);\n+    *(vbool1_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool1_t v = *(vbool1_t*)(in + 900 + i);\n+    *(vbool1_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool1_t v = *(vbool1_t*)(in + 900 + i);\n+    *(vbool1_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vbool1_t v = *(vbool1_t*)(in + 900 + i);\n+    *(vbool1_t*)(out + 900 + i) = v;\n+  }\n+\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "930f6f88cf155612229614b227c67c1f1b33e580", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_call-2.c", "status": "added", "additions": 207, "deletions": 0, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_call-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_call-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_call-2.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,207 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void fn3 (void);\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 900 + i);\n+    *(vint8mf8_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 900 + i);\n+    *(vint8mf8_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 900 + i);\n+    *(vint8mf8_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 900 + i);\n+    *(vint8mf8_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 900 + i);\n+    *(vint8mf8_t*)(out + 900 + i) = v;\n+  }\n+\n+}\n+\n+void f2 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 900 + i);\n+    *(vint8mf4_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 900 + i);\n+    *(vint8mf4_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 900 + i);\n+    *(vint8mf4_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 900 + i);\n+    *(vint8mf4_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 900 + i);\n+    *(vint8mf4_t*)(out + 900 + i) = v;\n+  }\n+\n+}\n+\n+void f3 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 900 + i);\n+    *(vint8mf2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 900 + i);\n+    *(vint8mf2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 900 + i);\n+    *(vint8mf2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 900 + i);\n+    *(vint8mf2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 900 + i);\n+    *(vint8mf2_t*)(out + 900 + i) = v;\n+  }\n+\n+}\n+\n+void f4 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 900 + i);\n+    *(vint16mf4_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 900 + i);\n+    *(vint16mf4_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 900 + i);\n+    *(vint16mf4_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 900 + i);\n+    *(vint16mf4_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 900 + i);\n+    *(vint16mf4_t*)(out + 900 + i) = v;\n+  }\n+\n+}\n+\n+void f5 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 900 + i);\n+    *(vint16mf2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 900 + i);\n+    *(vint16mf2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 900 + i);\n+    *(vint16mf2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 900 + i);\n+    *(vint16mf2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 900 + i);\n+    *(vint16mf2_t*)(out + 900 + i) = v;\n+  }\n+\n+}\n+\n+void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 900 + i);\n+    *(vint32mf2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 900 + i);\n+    *(vint32mf2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 900 + i);\n+    *(vint32mf2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 900 + i);\n+    *(vint32mf2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 900 + i);\n+    *(vint32mf2_t*)(out + 900 + i) = v;\n+  }\n+\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "e8b92e09fc4ae2930df048bbbe845d260643dcaa", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_call-3.c", "status": "added", "additions": 207, "deletions": 0, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_call-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_call-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_call-3.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,207 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void fn3 (void);\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 900 + i);\n+    *(vuint8mf8_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 900 + i);\n+    *(vuint8mf8_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 900 + i);\n+    *(vuint8mf8_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 900 + i);\n+    *(vuint8mf8_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 900 + i);\n+    *(vuint8mf8_t*)(out + 900 + i) = v;\n+  }\n+\n+}\n+\n+void f2 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint8mf4_t v = *(vuint8mf4_t*)(in + 900 + i);\n+    *(vuint8mf4_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint8mf4_t v = *(vuint8mf4_t*)(in + 900 + i);\n+    *(vuint8mf4_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint8mf4_t v = *(vuint8mf4_t*)(in + 900 + i);\n+    *(vuint8mf4_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint8mf4_t v = *(vuint8mf4_t*)(in + 900 + i);\n+    *(vuint8mf4_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint8mf4_t v = *(vuint8mf4_t*)(in + 900 + i);\n+    *(vuint8mf4_t*)(out + 900 + i) = v;\n+  }\n+\n+}\n+\n+void f3 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint8mf2_t v = *(vuint8mf2_t*)(in + 900 + i);\n+    *(vuint8mf2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint8mf2_t v = *(vuint8mf2_t*)(in + 900 + i);\n+    *(vuint8mf2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint8mf2_t v = *(vuint8mf2_t*)(in + 900 + i);\n+    *(vuint8mf2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint8mf2_t v = *(vuint8mf2_t*)(in + 900 + i);\n+    *(vuint8mf2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint8mf2_t v = *(vuint8mf2_t*)(in + 900 + i);\n+    *(vuint8mf2_t*)(out + 900 + i) = v;\n+  }\n+\n+}\n+\n+void f4 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint16mf4_t v = *(vuint16mf4_t*)(in + 900 + i);\n+    *(vuint16mf4_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint16mf4_t v = *(vuint16mf4_t*)(in + 900 + i);\n+    *(vuint16mf4_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint16mf4_t v = *(vuint16mf4_t*)(in + 900 + i);\n+    *(vuint16mf4_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint16mf4_t v = *(vuint16mf4_t*)(in + 900 + i);\n+    *(vuint16mf4_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint16mf4_t v = *(vuint16mf4_t*)(in + 900 + i);\n+    *(vuint16mf4_t*)(out + 900 + i) = v;\n+  }\n+\n+}\n+\n+void f5 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint16mf2_t v = *(vuint16mf2_t*)(in + 900 + i);\n+    *(vuint16mf2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint16mf2_t v = *(vuint16mf2_t*)(in + 900 + i);\n+    *(vuint16mf2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint16mf2_t v = *(vuint16mf2_t*)(in + 900 + i);\n+    *(vuint16mf2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint16mf2_t v = *(vuint16mf2_t*)(in + 900 + i);\n+    *(vuint16mf2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint16mf2_t v = *(vuint16mf2_t*)(in + 900 + i);\n+    *(vuint16mf2_t*)(out + 900 + i) = v;\n+  }\n+\n+}\n+\n+void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 900 + i);\n+    *(vuint32mf2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 900 + i);\n+    *(vuint32mf2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 900 + i);\n+    *(vuint32mf2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 900 + i);\n+    *(vuint32mf2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 900 + i);\n+    *(vuint32mf2_t*)(out + 900 + i) = v;\n+  }\n+\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "27f11a8f8ed0c9013926081d0626c86e8fb6b083", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_call-4.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_call-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_call-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_call-4.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void fn3 (void);\n+\n+void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 900 + i);\n+    *(vfloat32mf2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 900 + i);\n+    *(vfloat32mf2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  \n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 900 + i);\n+    *(vfloat32mf2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 900 + i);\n+    *(vfloat32mf2_t*)(out + 900 + i) = v;\n+  }\n+  fn3 ();\n+  for (int i = 0 ; i < n * n * n * n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 900 + i);\n+    *(vfloat32mf2_t*)(out + 900 + i) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 5 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "c5962e5a385cd4dc92ff602c2a9ef824c4a4a524", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_complex_loop-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_complex_loop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_complex_loop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_complex_loop-1.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, size_t n, size_t m, int cond)\n+{\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      if (i % 2) {\n+        \n+        if (cond) {\n+          vfloat32mf2_t v = *(vfloat32mf2_t*)(in + i + 2000);\n+          *(vfloat32mf2_t*)out = v;\n+        } else {\n+          vfloat32mf2_t v = *(vfloat32mf2_t*)(in + i + 3000);\n+          *(vfloat32mf2_t*)out = v;\n+        }\n+        \n+        for (size_t j = 0; j < m; j += 1) {\n+          if (j % 2 == 0) {\n+            vint8mf8_t v = *(vint8mf8_t*)(in + i + j + 100);\n+            *(vint8mf8_t*)out = v;\n+          } else {\n+            vint8mf8_t v = *(vint8mf8_t*)(in + i + j + 200);\n+            *(vint8mf8_t*)out = v;\n+          }\n+        }\n+        \n+        if (cond) {\n+          vuint16mf4_t v = *(vuint16mf4_t*)(in + i + 7000);\n+          *(vuint16mf4_t*)out = v;\n+        } else {\n+          vuint16mf4_t v = *(vuint16mf4_t*)(in + i + 8000);\n+          *(vuint16mf4_t*)out = v;\n+        }\n+      } else {\n+        if (cond) {\n+          vint8mf8_t v = *(vint8mf8_t*)(in + i + 4000);\n+          *(vint8mf8_t*)out = v;\n+        } else {\n+          vint8mf8_t v = *(vint8mf8_t*)(in + i + 5000);\n+          *(vint8mf8_t*)out = v;\n+        }\n+        \n+        vbool64_t v = *(vbool64_t*)(in + i + 300);\n+        *(vbool64_t*)out = v;\n+      }\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "8fa2bd8a8338986a589d75926f63fa78541a49de", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_complex_loop-2.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_complex_loop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_complex_loop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_complex_loop-2.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, size_t n, size_t m, int cond)\n+{\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      if (i % 2) {\n+        \n+        if (cond) {\n+          vfloat32mf2_t v = *(vfloat32mf2_t*)(in + i + 2000);\n+          *(vfloat32mf2_t*)(out + i + 2000) = v;\n+        } else {\n+          vfloat32mf2_t v = *(vfloat32mf2_t*)(in + i + 3000);\n+          *(vfloat32mf2_t*)(out + i + 3000) = v;\n+        }\n+        \n+        for (size_t j = 0; j < m; j += 1) {\n+          if (j % 2 == 0) {\n+            vint8mf8_t v = *(vint8mf8_t*)(in + i + j + 100);\n+            *(vint8mf8_t*)(out + i + j + 100) = v;\n+          } else {\n+            vint8mf8_t v = *(vint8mf8_t*)(in + i + j + 200);\n+            *(vint8mf8_t*)(out + i + j + 200) = v;\n+          }\n+        }\n+        \n+        if (cond) {\n+          vuint16mf4_t v = *(vuint16mf4_t*)(in + i + 7000);\n+          *(vuint16mf4_t*)(out + i + 7000) = v;\n+        } else {\n+          vuint16mf4_t v = *(vuint16mf4_t*)(in + i + 8000);\n+          *(vuint16mf4_t*)(out + i + 8000) = v;\n+        }\n+      } else {\n+        if (cond) {\n+          vuint16mf2_t v = *(vuint16mf2_t*)(in + i + 4000);\n+          *(vuint16mf2_t*)(out + i + 4000) = v;\n+        } else {\n+          vuint16mf2_t v = *(vuint16mf2_t*)(in + i + 5000);\n+          *(vuint16mf2_t*)(out + i + 5000) = v;\n+        }\n+        \n+        vbool1_t v = *(vbool1_t*)(in + i + 300);\n+        *(vbool1_t*)(out + i + 300) = v;\n+      }\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 5 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-not {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "34ac4a541647f0dfc45b376cfcae7c0d0f9f6c19", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_conflict-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-1.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, size_t n, size_t cond, size_t cond2)\n+{\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      if (i != cond) {\n+        vint8mf8_t v = *(vint8mf8_t*)(in + i + 100);\n+        *(vint8mf8_t*)(out + i + 100) = v;\n+      } else {\n+        vbool1_t v = *(vbool1_t*)(in + i + 400);\n+        *(vbool1_t*)(out + i + 400) = v;\n+      }\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+:\\s+vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+j\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "697b093f69ff67fad04058f7f940aed950225e2f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_conflict-10.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-10.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, size_t n, size_t m, size_t cond, size_t cond2)\n+{\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      if (i != cond) {\n+        vbool16_t v = *(vbool16_t*)(in + i + 400);\n+        *(vbool16_t*)(out + i + 400) = v;\n+        for (int j = 0; j < m; j++) {\n+          vuint8mf2_t v = *(vuint8mf2_t*)(in + i + 100 + j);\n+          *(vuint8mf2_t*)(out + i + 100 + j) = v;\n+        }\n+      } else if (i == cond2) {\n+        vuint16mf2_t v = *(vuint16mf2_t*)(in + i + 200);\n+        *(vuint16mf2_t*)(out + i + 200) = v;\n+      } else {\n+        vint8mf8_t v = *(vint8mf8_t*)(in + i + 100);\n+        *(vint8mf8_t*)(out + i + 100) = v;\n+      }\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 5 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "1dab5ed6e8494af514dbf06740c5756a0abe29b3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_conflict-11.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-11.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, size_t n, size_t m, size_t cond, size_t cond2)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*) (in + i + 1);\n+    *(vint8mf8_t*) (out + i + 1) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat32mf2_t v = *(vfloat32mf2_t*) (in + i + 2);\n+    *(vfloat32mf2_t*) (out + i + 2) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat32mf2_t v;\n+    *(vfloat32mf2_t*) (out + i + 3) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "38828bc56d50eca24dfe34d5f4caf5df084ba846", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_conflict-12.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-12.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f2 (int32_t * restrict in, int32_t * restrict in2, int32_t * restrict out, int32_t * restrict out2, size_t n, size_t m, size_t cond, size_t cond2)\n+{\n+  for (int i = 0; i < n; i++){\n+    out2[i] = in2[i] + out[i];\n+  }\n+  for (int i = 0; i < n; i++){\n+    out[i] = in[i] & out2[i];\n+  }\n+  for (int i = 0; i < n; i++){\n+    out2[i] = out[i] * out2[i];\n+  }\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      if (i > cond) {\n+        if (cond2) {\n+          for (int j = 0; j < m; j++) {\n+            vint8mf8_t v2 = *(vint8mf8_t*)(in2 + i + 100 + j);\n+            *(vint8mf8_t*)(out2 + i + 100 + j) = v2;\n+          }\n+        } else {\n+          for (int j = 0; j < m; j++) {\n+            vfloat32mf2_t v3 = *(vfloat32mf2_t*)(in2 + i + 300 + j);\n+            *(vfloat32mf2_t*)(out2 + i + 100 + j) = v3;\n+          }\n+        }\n+      } else {\n+        vbool64_t v = *(vbool64_t*)(in + i + 400);\n+        *(vbool64_t*)(out + i + 400) = v;\n+      }\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "cd01c9f705b63ca3d36e03c992bc115c259b3416", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_conflict-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-2.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, size_t n, size_t cond, size_t cond2)\n+{\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      if (i == cond) {\n+        vint8mf8_t v = *(vint8mf8_t*)(in + i + 100);\n+        *(vint8mf8_t*)(out + i + 100) = v;\n+      } else {\n+        vbool1_t v = *(vbool1_t*)(in + i + 400);\n+        *(vbool1_t*)(out + i + 400) = v;\n+      }\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+j\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "d79e83a3a87d3ae16f4db88ce0babd6bf2f44f5b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_conflict-3.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-3.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f2 (int32_t * restrict in, int32_t * restrict in2, int32_t * restrict out, int32_t * restrict out2, size_t n, size_t m, size_t cond, size_t cond2)\n+{\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      if (i > cond) {\n+        if (cond2) {\n+          for (int j = 0; j < m; j++) {\n+            vint8mf8_t v2 = *(vint8mf8_t*)(in2 + i + 100 + j);\n+            *(vint8mf8_t*)(out2 + i + 100 + j) = v2;\n+          }\n+        } else {\n+          for (int j = 0; j < m; j++) {\n+            vfloat32mf2_t v3 = *(vfloat32mf2_t*)(in2 + i + 300 + j);\n+            *(vfloat32mf2_t*)(out2 + i + 100 + j) = v3;\n+          }\n+        }\n+      } else {\n+        vbool64_t v = *(vbool64_t*)(in + i + 400);\n+        *(vbool64_t*)(out + i + 400) = v;\n+      }\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "44bd4d8be67bc8e96496491c45244b5aa0f16150", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_conflict-4.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-4.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, size_t n, size_t cond, size_t cond2)\n+{\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      if (i == cond) {\n+        vint8mf8_t v = *(vint8mf8_t*)(in + i + 100);\n+        *(vint8mf8_t*)(out + i + 100) = v;\n+      } else if (i == cond2) {\n+        vfloat32mf2_t v = *(vfloat32mf2_t*)(in + i + 200);\n+        *(vfloat32mf2_t*)(out + i + 200) = v;\n+      } else {\n+        vbool1_t v = *(vbool1_t*)(in + i + 400);\n+        *(vbool1_t*)(out + i + 400) = v;\n+      }\n+    }\n+}\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]:+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 5 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+"}, {"sha": "12f40f336afcd32fb6ae4f750330436f84ef1373", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_conflict-5.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-5.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, size_t n, size_t cond, size_t cond2)\n+{\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      if (i == cond) {\n+        vint8mf8_t v = *(vint8mf8_t*)(in + i + 100);\n+        *(vint8mf8_t*)(out + i + 100) = v;\n+      } else if (i == cond2) {\n+        vfloat32mf2_t v = *(vfloat32mf2_t*)(in + i + 200);\n+        *(vfloat32mf2_t*)(out + i + 200) = v;\n+      } else if (i == (cond2 - 1)) {\n+        vuint16mf2_t v = *(vuint16mf2_t*)(in + i + 300);\n+        *(vuint16mf2_t*)(out + i + 300) = v;\n+      } else {\n+        vbool1_t v = *(vbool1_t*)(in + i + 400);\n+        *(vbool1_t*)(out + i + 400) = v;\n+      }\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]:+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 7 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+"}, {"sha": "217ce11f5a928d37a76cc6b75df4a67e37187c6c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_conflict-6.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-6.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * in, int32_t * out, int n, int cond)\n+{\n+  if (cond) {\n+    vint32mf2_t v = *(vint32mf2_t*) (in + 100);\n+    *(vint32mf2_t*) (out + 100) = v;\n+  } else {\n+    vint16mf2_t v = *(vint16mf2_t*) (in + 200);\n+    *(vint16mf2_t*) (out + 200) = v;\n+  }\n+  \n+  for (int i = 0; i < n; i++) {\n+    vint8mf8_t v = *(vint8mf8_t*) (in + 300 + i);\n+    *(vint8mf8_t*) (out + 300 + i) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+:\\s+vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+:} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+:\\s+vle8\\.v} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "05058b8c0765d233de45c5424cde73b4921e7f38", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_conflict-7.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-7.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, size_t n, size_t cond, size_t cond2)\n+{\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      if (i != cond) {\n+        vbool1_t v = *(vbool1_t*)(in + i + 400);\n+        *(vbool1_t*)(out + i + 400) = v;\n+      } else if (i == cond2) {\n+        vfloat32mf2_t v = *(vfloat32mf2_t*)(in + i + 200);\n+        *(vfloat32mf2_t*)(out + i + 200) = v;\n+      } else {\n+        vint8mf8_t v = *(vint8mf8_t*)(in + i + 100);\n+        *(vint8mf8_t*)(out + i + 100) = v;\n+      }\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 4 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {j\\s+\\.L[0-9]+\\s+\\.L[0-9]+:\\s+vlm\\.v} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "79a02e47eb261f5dba1834754e2e69b0e2abb04a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_conflict-8.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-8.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, size_t n, size_t cond, size_t cond2)\n+{\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      if (i != cond) {\n+        vbool1_t v = *(vbool1_t*)(in + i + 400);\n+        *(vbool1_t*)(out + i + 400) = v;\n+      } else if (i == cond2) {\n+        vuint16mf2_t v = *(vuint16mf2_t*)(in + i + 200);\n+        *(vuint16mf2_t*)(out + i + 200) = v;\n+      } else {\n+        vint8mf8_t v = *(vint8mf8_t*)(in + i + 100);\n+        *(vint8mf8_t*)(out + i + 100) = v;\n+      }\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 5 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {j\\s+\\.L[0-9]+\\s+\\.L[0-9]+:\\s+vlm\\.v} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "bd6d552b22eb3a55fa430db13b89511166ed8756", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_conflict-9.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-9.c?ref=5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int32_t * restrict in, int32_t * restrict out, size_t n, size_t m, size_t cond, size_t cond2)\n+{\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      if (i != cond) {\n+        vbool1_t v = *(vbool1_t*)(in + i + 400);\n+        *(vbool1_t*)(out + i + 400) = v;\n+        for (int j = 0; j < m; j++) {\n+          vint32mf2_t v = *(vint32mf2_t*)(in + i + 100 + j);\n+          *(vint32mf2_t*)(out + i + 100 + j) = v;\n+        }\n+      } else if (i == cond2) {\n+        vuint16mf2_t v = *(vuint16mf2_t*)(in + i + 200);\n+        *(vuint16mf2_t*)(out + i + 200) = v;\n+      } else {\n+        vint8mf8_t v = *(vint8mf8_t*)(in + i + 100);\n+        *(vint8mf8_t*)(out + i + 100) = v;\n+      }\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 7 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}]}