{"sha": "3d9cd79a7c9c7d21e974ee10bf05fb356bafea32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q5Y2Q3OWE3YzljN2QyMWU5NzRlZTEwYmYwNWZiMzU2YmFmZWEzMg==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2006-12-12T23:21:48Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2006-12-12T23:21:48Z"}, "message": "spu.c (TARGET_ENCODE_SECTION_INFO): Define.\n\n\t* config/spu/spu.c (TARGET_ENCODE_SECTION_INFO): Define.\n\t(spu_encode_section_info): New.\n\t* config/spu/spu.h (ALIGNED_SYMBOL_REF_P): Adjust.\n\t(SYMBOL_FLAG_ALIGN1): New.\n\nFrom-SVN: r119803", "tree": {"sha": "45ad7d40574a8bb0d19b828aad5c937a2fc8127d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45ad7d40574a8bb0d19b828aad5c937a2fc8127d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d9cd79a7c9c7d21e974ee10bf05fb356bafea32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d9cd79a7c9c7d21e974ee10bf05fb356bafea32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d9cd79a7c9c7d21e974ee10bf05fb356bafea32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d9cd79a7c9c7d21e974ee10bf05fb356bafea32/comments", "author": null, "committer": null, "parents": [{"sha": "1f70491b9910eaa7dda71bb6e6d58cd6f212ec9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f70491b9910eaa7dda71bb6e6d58cd6f212ec9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f70491b9910eaa7dda71bb6e6d58cd6f212ec9e"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "86530bca63ed328229bbd2de907bc6d455809ea5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9cd79a7c9c7d21e974ee10bf05fb356bafea32/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9cd79a7c9c7d21e974ee10bf05fb356bafea32/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d9cd79a7c9c7d21e974ee10bf05fb356bafea32", "patch": "@@ -1,3 +1,10 @@\n+2006-12-13  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/spu/spu.c (TARGET_ENCODE_SECTION_INFO): Define.\n+\t(spu_encode_section_info): New.\n+\t* config/spu/spu.h (ALIGNED_SYMBOL_REF_P): Adjust.\n+\t(SYMBOL_FLAG_ALIGN1): New.\n+\n 2006-12-12  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR tree-opt/28624"}, {"sha": "7e3e687c7888b79802be4c0eefdf21fd4789f771", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9cd79a7c9c7d21e974ee10bf05fb356bafea32/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9cd79a7c9c7d21e974ee10bf05fb356bafea32/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=3d9cd79a7c9c7d21e974ee10bf05fb356bafea32", "patch": "@@ -129,6 +129,7 @@ static unsigned char spu_function_ok_for_sibcall (tree decl, tree exp);\n static void spu_init_libfuncs (void);\n static bool spu_return_in_memory (tree type, tree fntype);\n static void fix_range (const char *);\n+static void spu_encode_section_info (tree, rtx, int);\n \n extern const char *reg_names[];\n rtx spu_compare_op0, spu_compare_op1;\n@@ -244,6 +245,9 @@ const struct attribute_spec spu_attribute_table[];\n #undef TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY spu_return_in_memory\n \n+#undef  TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO spu_encode_section_info\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n /* Sometimes certain combinations of command options do not make sense\n@@ -3178,6 +3182,20 @@ aligned_mem_p (rtx mem)\n   return 0;\n }\n \n+/* Encode symbol attributes (local vs. global, tls model) of a SYMBOL_REF\n+   into its SYMBOL_REF_FLAGS.  */\n+static void\n+spu_encode_section_info (tree decl, rtx rtl, int first)\n+{\n+  default_encode_section_info (decl, rtl, first);\n+\n+  /* If a variable has a forced alignment to < 16 bytes, mark it with\n+     SYMBOL_FLAG_ALIGN1.  */\n+  if (TREE_CODE (decl) == VAR_DECL\n+      && DECL_USER_ALIGN (decl) && DECL_ALIGN (decl) < 128)\n+    SYMBOL_REF_FLAGS (XEXP (rtl, 0)) |= SYMBOL_FLAG_ALIGN1;\n+}\n+\n /* Return TRUE if we are certain the mem refers to a complete object\n    which is both 16-byte aligned and padded to a 16-byte boundary.  This\n    would make it safe to store with a single instruction. "}, {"sha": "813bc6c039b57d4111ae01a765f96103a0e78f5e", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9cd79a7c9c7d21e974ee10bf05fb356bafea32/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9cd79a7c9c7d21e974ee10bf05fb356bafea32/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=3d9cd79a7c9c7d21e974ee10bf05fb356bafea32", "patch": "@@ -87,6 +87,7 @@ extern const char *spu_fixed_range_string;\n /* symbol_ref's of functions are not aligned to 16 byte boundary. */\n #define ALIGNED_SYMBOL_REF_P(X) \\\n \t(GET_CODE (X) == SYMBOL_REF \\\n+          && (SYMBOL_REF_FLAGS (X) & SYMBOL_FLAG_ALIGN1) == 0 \\\n \t  && (! SYMBOL_REF_FUNCTION_P (X) \\\n \t      || align_functions >= 16))\n \n@@ -372,6 +373,9 @@ warn_main = 0;\t\t\t\t\t\t\t\t\\\n \n #define FUNCTION_VALUE_REGNO_P(N) ((N) >= (FIRST_RETURN_REGNUM) && (N) <= (LAST_RETURN_REGNUM))\n \n+\f\n+/* Machine-specific symbol_ref flags.  */\n+#define SYMBOL_FLAG_ALIGN1\t(SYMBOL_FLAG_MACH_DEP << 0)\n \f\n /* Aggregate Return */\n "}]}