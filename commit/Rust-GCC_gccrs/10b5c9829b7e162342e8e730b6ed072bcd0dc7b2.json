{"sha": "10b5c9829b7e162342e8e730b6ed072bcd0dc7b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBiNWM5ODI5YjdlMTYyMzQyZThlNzMwYjZlZDA3MmJjZDBkYzdiMg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2018-02-27T20:52:15Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2018-02-27T20:52:15Z"}, "message": "[PR c++/84426] ICE after conflicting member decl\n\nhttps://gcc.gnu.org/ml/gcc-patches/2018-02/msg01529.html\n\tPR c++/84426\n\t* name-lookup.h (get_member_slot): Rename ...\n\t(find_member_slot): ... here.\n\t(add_member_slot): New.\n\t* name-lookup.c (member_vec_linear_search): No need to check for\n\tNULL slot.\n\t(get_member_slot): Rename ...\n\t(find_member_slot): ... here.  Don't add slot for incomplete class.\n\t(add_member_slot): New.\n\t* class.c (add_method): Adjust get_member_slot rename.  Bail out\n\tif push_class_level_binding fails.  Create slot and grok\n\tproperties once we're committed to insertion.\n\n\tPR c++/84426\n\t* g++.dg/lookup/pr84426.C: New.\n\nFrom-SVN: r258042", "tree": {"sha": "d4a3fcaa4ea60a66ebc04d0669d289cb6662db27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4a3fcaa4ea60a66ebc04d0669d289cb6662db27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10b5c9829b7e162342e8e730b6ed072bcd0dc7b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10b5c9829b7e162342e8e730b6ed072bcd0dc7b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10b5c9829b7e162342e8e730b6ed072bcd0dc7b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10b5c9829b7e162342e8e730b6ed072bcd0dc7b2/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7f7e718d9cfeab9a3ee4aea4dd2d9d565462c185", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f7e718d9cfeab9a3ee4aea4dd2d9d565462c185", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f7e718d9cfeab9a3ee4aea4dd2d9d565462c185"}], "stats": {"total": 106, "additions": 71, "deletions": 35}, "files": [{"sha": "dbb678cbd48c795d7d5f5d197de4a24d25111553", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10b5c9829b7e162342e8e730b6ed072bcd0dc7b2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10b5c9829b7e162342e8e730b6ed072bcd0dc7b2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=10b5c9829b7e162342e8e730b6ed072bcd0dc7b2", "patch": "@@ -1,3 +1,18 @@\n+2018-02-27  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/84426\n+\t* name-lookup.h (get_member_slot): Rename ...\n+\t(find_member_slot): ... here.\n+\t(add_member_slot): New.\n+\t* name-lookup.c (member_vec_linear_search): No need to check for\n+\tNULL slot.\n+\t(get_member_slot): Rename ...\n+\t(find_member_slot): ... here.  Don't add slot for incomplete class.\n+\t(add_member_slot): New.\n+\t* class.c (add_method): Adjust get_member_slot rename.  Bail out\n+\tif push_class_level_binding fails.  Create slot and grok\n+\tproperties once we're committed to insertion.\n+\n 2018-02-27  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/84489 - dependent default template argument"}, {"sha": "8348552a05b613762b2f385cf608d2372c8ac96c", "filename": "gcc/cp/class.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10b5c9829b7e162342e8e730b6ed072bcd0dc7b2/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10b5c9829b7e162342e8e730b6ed072bcd0dc7b2/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=10b5c9829b7e162342e8e730b6ed072bcd0dc7b2", "patch": "@@ -993,14 +993,11 @@ add_method (tree type, tree method, bool via_using)\n   if (method == error_mark_node)\n     return false;\n \n-  /* Maintain TYPE_HAS_USER_CONSTRUCTOR, etc.  */\n-  grok_special_member_properties (method);\n-\n-  tree *slot = get_member_slot (type, DECL_NAME (method));\n-  tree current_fns = *slot;\n-\n   gcc_assert (!DECL_EXTERN_C_P (method));\n \n+  tree *slot = find_member_slot (type, DECL_NAME (method));\n+  tree current_fns = slot ? *slot : NULL_TREE;\n+\n   /* Check to see if we've already got this method.  */\n   for (ovl_iterator iter (current_fns); iter; ++iter)\n     {\n@@ -1146,8 +1143,15 @@ add_method (tree type, tree method, bool via_using)\n \n   current_fns = ovl_insert (method, current_fns, via_using);\n \n-  if (!DECL_CONV_FN_P (method) && !COMPLETE_TYPE_P (type))\n-    push_class_level_binding (DECL_NAME (method), current_fns);\n+  if (!COMPLETE_TYPE_P (type) && !DECL_CONV_FN_P (method)\n+      && !push_class_level_binding (DECL_NAME (method), current_fns))\n+    return false;\n+\n+  if (!slot)\n+    slot = add_member_slot (type, DECL_NAME (method));\n+\n+  /* Maintain TYPE_HAS_USER_CONSTRUCTOR, etc.  */\n+  grok_special_member_properties (method);\n \n   *slot = current_fns;\n "}, {"sha": "c61f01c4f88bec01d41b901021ff0223ad257434", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10b5c9829b7e162342e8e730b6ed072bcd0dc7b2/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10b5c9829b7e162342e8e730b6ed072bcd0dc7b2/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=10b5c9829b7e162342e8e730b6ed072bcd0dc7b2", "patch": "@@ -1146,17 +1146,9 @@ static tree\n member_vec_linear_search (vec<tree, va_gc> *member_vec, tree name)\n {\n   for (int ix = member_vec->length (); ix--;)\n-    /* We can get a NULL binding during insertion of a new method\n-       name, because the identifier_binding machinery performs a\n-       lookup.  If we find such a NULL slot, that's the thing we were\n-       looking for, so we might as well bail out immediately.  */\n     if (tree binding = (*member_vec)[ix])\n-      {\n-\tif (OVL_NAME (binding) == name)\n-\t  return binding;\n-      }\n-    else\n-      break;\n+      if (OVL_NAME (binding) == name)\n+\treturn binding;\n \n   return NULL_TREE;\n }\n@@ -1334,15 +1326,15 @@ get_class_binding (tree klass, tree name, int type_or_fns)\n }\n \n /* Find the slot containing overloads called 'NAME'.  If there is no\n-   such slot, create an empty one.  KLASS might be complete at this\n-   point, in which case we need to preserve ordering.  Deals with\n-   conv_op marker handling.  */\n+   such slot and the class is complete, create an empty one, at the\n+   correct point in the sorted member vector.  Otherwise return NULL.\n+   Deals with conv_op marker handling.  */\n \n tree *\n-get_member_slot (tree klass, tree name)\n+find_member_slot (tree klass, tree name)\n {\n   bool complete_p = COMPLETE_TYPE_P (klass);\n-  \n+\n   vec<tree, va_gc> *member_vec = CLASSTYPE_MEMBER_VEC (klass);\n   if (!member_vec)\n     {\n@@ -1389,24 +1381,34 @@ get_member_slot (tree klass, tree name)\n \tbreak;\n     }\n \n-  /* No slot found.  Create one at IX.  We know in this case that our\n-     caller will succeed in adding the function.  */\n+  /* No slot found, add one if the class is complete.  */\n   if (complete_p)\n     {\n-      /* Do exact allocation when complete, as we don't expect to add\n-\t many.  */\n+      /* Do exact allocation, as we don't expect to add many.  */\n+      gcc_assert (name != conv_op_identifier);\n       vec_safe_reserve_exact (member_vec, 1);\n+      CLASSTYPE_MEMBER_VEC (klass) = member_vec;\n       member_vec->quick_insert (ix, NULL_TREE);\n+      return &(*member_vec)[ix];\n     }\n-  else\n-    {\n-      gcc_checking_assert (ix == length);\n-      vec_safe_push (member_vec, NULL_TREE);\n-    }\n+\n+  return NULL;\n+}\n+\n+/* KLASS is an incomplete class to which we're adding a method NAME.\n+   Add a slot and deal with conv_op marker handling.  */\n+\n+tree *\n+add_member_slot (tree klass, tree name)\n+{\n+  gcc_assert (!COMPLETE_TYPE_P (klass));\n+\n+  vec<tree, va_gc> *member_vec = CLASSTYPE_MEMBER_VEC (klass);\n+  vec_safe_push (member_vec, NULL_TREE);\n   CLASSTYPE_MEMBER_VEC (klass) = member_vec;\n \n-  tree *slot = &(*member_vec)[ix];\n-  if (name == conv_op_identifier)\n+  tree *slot = &member_vec->last ();\n+  if (IDENTIFIER_CONV_OP_P (name))\n     {\n       /* Install the marker prefix.  */\n       *slot = ovl_make (conv_op_marker, NULL_TREE);"}, {"sha": "fe15136b227fc84b92a6c51cd4e8fe3185046be4", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10b5c9829b7e162342e8e730b6ed072bcd0dc7b2/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10b5c9829b7e162342e8e730b6ed072bcd0dc7b2/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=10b5c9829b7e162342e8e730b6ed072bcd0dc7b2", "patch": "@@ -310,7 +310,8 @@ extern tree lookup_arg_dependent (tree, tree, vec<tree, va_gc> *);\n extern tree search_anon_aggr (tree, tree);\n extern tree get_class_binding_direct (tree, tree, int type_or_fns = -1);\n extern tree get_class_binding (tree, tree, int type_or_fns = -1);\n-extern tree *get_member_slot (tree klass, tree name);\n+extern tree *find_member_slot (tree klass, tree name);\n+extern tree *add_member_slot (tree klass, tree name);\n extern void resort_type_member_vec (void *, void *,\n \t\t\t\t    gt_pointer_operator, void *);\n extern void set_class_bindings (tree, unsigned extra = 0);"}, {"sha": "eaf0d6a21b767759ebc6b3aee2bba6d122f61650", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10b5c9829b7e162342e8e730b6ed072bcd0dc7b2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10b5c9829b7e162342e8e730b6ed072bcd0dc7b2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=10b5c9829b7e162342e8e730b6ed072bcd0dc7b2", "patch": "@@ -1,3 +1,8 @@\n+2018-02-27  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/84426\n+\t* g++.dg/lookup/pr84426.C: New.\n+\n 2018-02-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/84512"}, {"sha": "50ac11be73e8059f306314b9c55b8d9d3d33fb4b", "filename": "gcc/testsuite/g++.dg/lookup/pr84426.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10b5c9829b7e162342e8e730b6ed072bcd0dc7b2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr84426.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10b5c9829b7e162342e8e730b6ed072bcd0dc7b2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr84426.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr84426.C?ref=10b5c9829b7e162342e8e730b6ed072bcd0dc7b2", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/84426 ICE after error\n+\n+struct A\n+{\n+  int foo; // { dg-message \"previous\" }\n+  virtual void foo(); // { dg-error \"conflict\" }\n+};\n+\n+struct B : A {}; // ICED here"}]}