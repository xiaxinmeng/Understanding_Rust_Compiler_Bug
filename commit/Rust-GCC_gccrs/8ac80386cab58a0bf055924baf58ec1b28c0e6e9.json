{"sha": "8ac80386cab58a0bf055924baf58ec1b28c0e6e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFjODAzODZjYWI1OGEwYmYwNTU5MjRiYWY1OGVjMWIyOGMwZTZlOQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-08-07T19:59:48Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-08-07T19:59:48Z"}, "message": "PipedInputStream.java (read(byte[],int,int)): Mostly rewrote.\n\n\t* java/io/PipedInputStream.java (read(byte[],int,int)): Mostly\n\trewrote.\n\t(receive): Streamlined.\n\nFrom-SVN: r35556", "tree": {"sha": "6fb33f433f640ace30f10253c268911edf522165", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fb33f433f640ace30f10253c268911edf522165"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ac80386cab58a0bf055924baf58ec1b28c0e6e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ac80386cab58a0bf055924baf58ec1b28c0e6e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ac80386cab58a0bf055924baf58ec1b28c0e6e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ac80386cab58a0bf055924baf58ec1b28c0e6e9/comments", "author": null, "committer": null, "parents": [{"sha": "320f95489d1a822d0b67fa63aa5691d70cd3ae0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/320f95489d1a822d0b67fa63aa5691d70cd3ae0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/320f95489d1a822d0b67fa63aa5691d70cd3ae0d"}], "stats": {"total": 198, "additions": 86, "deletions": 112}, "files": [{"sha": "c1f310b707364fe0a7aadb524f94af62be3abc8b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac80386cab58a0bf055924baf58ec1b28c0e6e9/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac80386cab58a0bf055924baf58ec1b28c0e6e9/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=8ac80386cab58a0bf055924baf58ec1b28c0e6e9", "patch": "@@ -1,3 +1,9 @@\n+2000-08-07  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* java/io/PipedInputStream.java (read(byte[],int,int)): Mostly\n+\trewrote.\n+\t(receive): Streamlined.\n+\n 2000-08-05  Tom Tromey  <tromey@cygnus.com>\n \n \t* java/io/PrintWriter.java: Merged comments from Classpath."}, {"sha": "b5c7931de624221dfadcfcd5e453ed34dbf8b737", "filename": "libjava/java/io/PipedInputStream.java", "status": "modified", "additions": 70, "deletions": 105, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac80386cab58a0bf055924baf58ec1b28c0e6e9/libjava%2Fjava%2Fio%2FPipedInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac80386cab58a0bf055924baf58ec1b28c0e6e9/libjava%2Fjava%2Fio%2FPipedInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPipedInputStream.java?ref=8ac80386cab58a0bf055924baf58ec1b28c0e6e9", "patch": "@@ -285,61 +285,40 @@ else if (in > out)\n   int bytes_read = 0;\n   for (;;)\n     {\n-      // If there are bytes, take them\n+      // If there are bytes, take them.\n       if (in != -1)\n         {\n           int desired_bytes = len - bytes_read;\n \n-          // We are in a \"wrap\" condition\n-          if (out > in)\n+          // We are in a \"wrap\" condition.\n+          if (out >= in)\n             {\n-              if (desired_bytes > (pipe_size - out))\n-                {\n-                  if (in == 0)\n-                    desired_bytes = (pipe_size - out) - 1;\n-                  else\n-                    desired_bytes = pipe_size - out;\n-\n-                  System.arraycopy(buffer, out, buf, offset + bytes_read,\n-                                   desired_bytes);\n-\n-                  bytes_read += desired_bytes;\n-                  out += desired_bytes;\n-                  desired_bytes = len - bytes_read;\n-\n-                  if (out == pipe_size)\n-                    out = 0;\n-\n-                  notifyAll();\n-                }\n-              else\n-                {\n-                  if ((out + desired_bytes) == in)\n-                    --desired_bytes;\n+\t      desired_bytes = Math.min (desired_bytes, pipe_size - out);\n \n-                  if (((out + desired_bytes) == pipe_size) && (in == 0)) \n-                    desired_bytes = (pipe_size - out) - 1;\n+\t      System.arraycopy (buffer, out, buf, offset + bytes_read,\n+\t\t\t\tdesired_bytes);\n \n-                  System.arraycopy(buffer, out, buf, offset + bytes_read,\n-                                   desired_bytes); \n+\t      bytes_read += desired_bytes;\n+\t      out += desired_bytes;\n+\t      desired_bytes = len - bytes_read;\n \n-                  bytes_read += desired_bytes;\n-                  out += desired_bytes;\n-                  desired_bytes = len - bytes_read;\n+\t      if (out == pipe_size)\n+\t\t{\n+\t\t  out = 0;\n+\t\t  // OUT has wrapped.  Make sure that we don't falsely\n+\t\t  // indicate that the buffer is full.\n+\t\t  if (in == 0)\n+\t\t    in = -1;\n+\t\t}\n \n-                  if (out == pipe_size)\n-                    out = 0;\n-\n-                  notifyAll();\n-                }\n+\t      notifyAll();\n             }\n- \n-          // We are in a \"no wrap\" or condition (can also be fall through\n-          // from above\n+\n+          // We are in a \"no wrap\".  This can be triggered by\n+          // fall-through from the above.\n           if (in > out)\n             {\n-              if (desired_bytes >= ((in - out) - 1))\n-                desired_bytes = (in - out) - 1;\n+\t      desired_bytes = Math.min (desired_bytes, in - out);\n \n               System.arraycopy(buffer, out, buf, offset + bytes_read, \n                                desired_bytes);\n@@ -348,41 +327,42 @@ else if (in > out)\n               out += desired_bytes;\n               desired_bytes = len - bytes_read;\n \n-              if (out == pipe_size)\n+\t      if (out == in)\n+\t\t{\n+\t\t  // Don't falsely indicate that the buffer is full.\n+\t\t  out = 0;\n+\t\t  in = -1;\n+\t\t}\n+              else if (out == pipe_size)\n                 out = 0;\n \n               notifyAll();\n             }\n         }\n \n-      // If we are done, return\n-      if (bytes_read == len)\n-        return(bytes_read);\n-\n-      // Return a short count if necessary\n-      if (bytes_read > 0 && bytes_read < len)\n+      // Return when we've read something.  A short return is ok.\n+      // Also return in the case where LEN==0.\n+      if (bytes_read > 0 || bytes_read == len)\n \treturn(bytes_read);\n \n       // Handle the case where the end of stream was encountered.\n       if (closed)\n         {\n-          // We never let in == out so there might be one last byte\n-          // available that we have not copied yet.\n-          if (in != -1)\n-            {\n-              buf[offset + bytes_read] = buffer[out];\n-              in = -1;\n-              ++out;\n-              ++bytes_read;\n-            }\n-\n-          if (bytes_read != 0)\n-            return(bytes_read);\n-          else\n-            return(-1);\n+\t  if (in == -1)\n+\t    {\n+\t      // The stream is closed and empty.  We've already\n+\t      // returned if bytes were read.  So we know EOF is the\n+\t      // only answer.\n+\t      return -1;\n+\t    }\n+\n+\t  // I think this shouldn't happen.  I don't think there is a\n+\t  // way to get here when nothing has been read but there are\n+\t  // bytes in the buffer.  Still...\n+\t  continue;\n         }\n \n-      // Wait for a byte to be read\n+      // Wait for a byte to be received.\n       try\n         {\n           wait();\n@@ -434,33 +414,39 @@ else if (in > out)\n     return;\n \n   int total_written = 0;\n+ outer:\n   while (total_written < len)\n     {\n-      // If we are not at the end of the buffer with out = 0\n-      if (!((in == (buffer.length - 1)) && (out == 0)))\n+      // If the buffer is full, then wait.\n+      // Also, if we are at the end of the buffer and OUT is 0, wait.\n+      if (! (in == out\n+\t     || (in == pipe_size - 1 && out == 0)))\n         {\n           // This is the \"no wrap\" situation\n-          if ((in - 1) >= out)\n+\t  if (in > out)\n             {\n               int bytes_written = 0;\n-              if ((buffer.length - in) > (len - total_written))\n+              if ((pipe_size - in) > (len - total_written))\n                 bytes_written = (len - total_written);\n               else if (out == 0)\n-                bytes_written = (buffer.length - in) - 1;\n+                bytes_written = (pipe_size - in) - 1;\n               else \n-                bytes_written = (buffer.length - in);\n+                bytes_written = (pipe_size - in);\n \n               if (bytes_written > 0) \n-                System.arraycopy(buf, offset + total_written, buffer, in, \n-                                 bytes_written);\n-              total_written += bytes_written;\n-              in += bytes_written;\n+\t\t{\n+\t\t  System.arraycopy(buf, offset + total_written, buffer, in, \n+\t\t\t\t   bytes_written);\n+\t\t  total_written += bytes_written;\n+\t\t  in += bytes_written;\n \n-              if (in == buffer.length)\n-                in = 0;\n+\t\t  if (in == pipe_size)\n+\t\t    in = 0;\n \n-              notifyAll();\n+\t\t  notifyAll();\n+\t\t}\n             }\n+\n           // This is the \"wrap\" situtation\n           if ((out > in) && (total_written != len))\n             {\n@@ -470,40 +456,20 @@ else if (out == 0)\n               if (in == -1)\n                 {\n                   in = 0;\n-\n-                  if (buffer.length > len)\n-                    bytes_written = len;\n-                  else\n-                    bytes_written = buffer.length - 1;\n-                }\n-              else if (((out - in) - 1) < (len - total_written))\n-                {\n-                  bytes_written = (out - in) - 1;\n+\t\t  bytes_written = Math.min (len - total_written, pipe_size);\n                 }\n               else\n-                {\n-                  bytes_written = len - total_written;\n-                }\n-\n-              // If the buffer is full, wait for it to empty out\n-              if ((out - 1) == in)\n-                {\n-                  try\n-                    {         \n-                      wait(); \n-                    }\n-                  catch (InterruptedException e) \n-                    { \n-                      continue; \n-                    }\n-                }\n+\t\t{\n+\t\t  bytes_written = Math.min (len - total_written,\n+\t\t\t\t\t    out - in);\n+\t\t}\n \n               System.arraycopy(buf, offset + total_written, buffer, in,\n                                bytes_written);\n               total_written += bytes_written;\n               in += bytes_written;\n \n-              if (in == buffer.length)\n+              if (in == pipe_size)\n                 in = 0;\n \n               notifyAll();\n@@ -522,4 +488,3 @@ else if (((out - in) - 1) < (len - total_written))\n }\n \n } // class PipedInputStream\n-"}, {"sha": "768194d23ccc135051cffd3ec6d21484cd47110c", "filename": "libjava/java/lang/reflect/Field.java", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac80386cab58a0bf055924baf58ec1b28c0e6e9/libjava%2Fjava%2Flang%2Freflect%2FField.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac80386cab58a0bf055924baf58ec1b28c0e6e9/libjava%2Fjava%2Flang%2Freflect%2FField.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FField.java?ref=8ac80386cab58a0bf055924baf58ec1b28c0e6e9", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -253,10 +253,13 @@ public String toString ()\n     StringBuffer sbuf = new StringBuffer ();\n     int mods = getModifiers();\n     if (mods != 0)\n-      Modifier.toString(mods, sbuf);\n+      {\n+\tModifier.toString(mods, sbuf);\n+\tsbuf.append(' ');\n+      }\n     sbuf.append(getType());\n     sbuf.append(' ');\n-    sbuf.append(getDeclaringClass());\n+    sbuf.append(getDeclaringClass().getName());\n     sbuf.append('.');\n     sbuf.append(getName());\n     return sbuf.toString();"}, {"sha": "f7a979458cd6e909ac53d0096c23fb9629c78870", "filename": "libjava/java/lang/reflect/Method.java", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac80386cab58a0bf055924baf58ec1b28c0e6e9/libjava%2Fjava%2Flang%2Freflect%2FMethod.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac80386cab58a0bf055924baf58ec1b28c0e6e9/libjava%2Fjava%2Flang%2Freflect%2FMethod.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FMethod.java?ref=8ac80386cab58a0bf055924baf58ec1b28c0e6e9", "patch": "@@ -78,17 +78,17 @@ public String toString ()\n \tgetType ();\n \n       StringBuffer b = new StringBuffer ();\n-      b.append(Modifier.toString(getModifiers()));\n+      Modifier.toString(getModifiers(), b);\n       b.append(\" \");\n       b.append(return_type.toString());\n       b.append(\" \");\n-      b.append(declaringClass.toString());\n+      b.append(declaringClass.getName());\n       b.append(\".\");\n       b.append(name);\n       b.append(\"(\");\n       for (int i = 0; i < parameter_types.length; ++i)\n \t{\n-\t  b.append(parameter_types[i].toString());\n+\t  b.append(parameter_types[i].getName());\n \t  if (i < parameter_types.length - 1)\n \t    b.append(\",\");\n \t}\n@@ -98,7 +98,7 @@ public String toString ()\n \t  b.append(\" throws \");\n \t  for (int i = 0; i < exception_types.length; ++i)\n \t    {\n-\t      b.append(exception_types[i].toString());\n+\t      b.append(exception_types[i].getName());\n \t      if (i < exception_types.length - 1)\n \t\tb.append(\",\");\n \t    }"}]}