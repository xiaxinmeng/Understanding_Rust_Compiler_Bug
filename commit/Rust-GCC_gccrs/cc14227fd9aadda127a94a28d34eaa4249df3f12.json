{"sha": "cc14227fd9aadda127a94a28d34eaa4249df3f12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MxNDIyN2ZkOWFhZGRhMTI3YTk0YTI4ZDM0ZWFhNDI0OWRmM2YxMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2010-07-12T19:03:43Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2010-07-12T19:03:43Z"}, "message": "reload.h (target_reload): Add x_cached_reg_save_code and x_cached_reg_restore_code.\n\ngcc/\n\t* reload.h (target_reload): Add x_cached_reg_save_code and\n\tx_cached_reg_restore_code.\n\t* caller-save.c (cached_reg_save_code, cached_reg_restore_code):\n\tRedefine as macros.\n\nFrom-SVN: r162106", "tree": {"sha": "17257bf331c6a9f21e3d19df584d3f0ecf1671bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17257bf331c6a9f21e3d19df584d3f0ecf1671bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc14227fd9aadda127a94a28d34eaa4249df3f12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc14227fd9aadda127a94a28d34eaa4249df3f12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc14227fd9aadda127a94a28d34eaa4249df3f12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc14227fd9aadda127a94a28d34eaa4249df3f12/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fa19795ec4394113e1d79f4660d97b2da23cfaca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa19795ec4394113e1d79f4660d97b2da23cfaca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa19795ec4394113e1d79f4660d97b2da23cfaca"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "e2a9f8ec479c796024937c4dad957e747676e816", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc14227fd9aadda127a94a28d34eaa4249df3f12/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc14227fd9aadda127a94a28d34eaa4249df3f12/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc14227fd9aadda127a94a28d34eaa4249df3f12", "patch": "@@ -1,3 +1,10 @@\n+2010-07-12  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* reload.h (target_reload): Add x_cached_reg_save_code and\n+\tx_cached_reg_restore_code.\n+\t* caller-save.c (cached_reg_save_code, cached_reg_restore_code):\n+\tRedefine as macros.\n+\n 2010-07-12  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* Makefile.in (target-globals.o): Depend on builtins.h."}, {"sha": "d95e66c34c1f788b18e9fa68c7812ee7226616e2", "filename": "gcc/caller-save.c", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc14227fd9aadda127a94a28d34eaa4249df3f12/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc14227fd9aadda127a94a28d34eaa4249df3f12/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=cc14227fd9aadda127a94a28d34eaa4249df3f12", "patch": "@@ -45,6 +45,10 @@ along with GCC; see the file COPYING3.  If not see\n \n #define regno_save_mode \\\n   (this_target_reload->x_regno_save_mode)\n+#define cached_reg_save_code \\\n+  (this_target_reload->x_cached_reg_save_code)\n+#define cached_reg_restore_code \\\n+  (this_target_reload->x_cached_reg_restore_code)\n \n /* For each hard register, a place on the stack where it can be saved,\n    if needed.  */\n@@ -58,17 +62,6 @@ static int save_slots_num;\n /* Allocated slots so far.  */\n static rtx save_slots[FIRST_PSEUDO_REGISTER];\n \n-/* We will only make a register eligible for caller-save if it can be\n-   saved in its widest mode with a simple SET insn as long as the memory\n-   address is valid.  We record the INSN_CODE is those insns here since\n-   when we emit them, the addresses might not be valid, so they might not\n-   be recognized.  */\n-\n-static int\n-  cached_reg_save_code[FIRST_PSEUDO_REGISTER][MAX_MACHINE_MODE];\n-static int\n-  cached_reg_restore_code[FIRST_PSEUDO_REGISTER][MAX_MACHINE_MODE];\n-\n /* Set of hard regs currently residing in save area (during insn scan).  */\n \n static HARD_REG_SET hard_regs_saved;"}, {"sha": "01bbfb1bbc612a5e0634ad2112c7696d57fd1758", "filename": "gcc/reload.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc14227fd9aadda127a94a28d34eaa4249df3f12/gcc%2Freload.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc14227fd9aadda127a94a28d34eaa4249df3f12/gcc%2Freload.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.h?ref=cc14227fd9aadda127a94a28d34eaa4249df3f12", "patch": "@@ -182,6 +182,14 @@ struct target_reload {\n   enum machine_mode (x_regno_save_mode\n \t\t     [FIRST_PSEUDO_REGISTER]\n \t\t     [MAX_MOVE_MAX / MIN_UNITS_PER_WORD + 1]);\n+\n+  /* We will only make a register eligible for caller-save if it can be\n+     saved in its widest mode with a simple SET insn as long as the memory\n+     address is valid.  We record the INSN_CODE is those insns here since\n+     when we emit them, the addresses might not be valid, so they might not\n+     be recognized.  */\n+  int x_cached_reg_save_code[FIRST_PSEUDO_REGISTER][MAX_MACHINE_MODE];\n+  int x_cached_reg_restore_code[FIRST_PSEUDO_REGISTER][MAX_MACHINE_MODE];\n };\n \n extern struct target_reload default_target_reload;"}]}