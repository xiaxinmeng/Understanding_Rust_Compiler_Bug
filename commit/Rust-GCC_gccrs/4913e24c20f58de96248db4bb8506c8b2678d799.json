{"sha": "4913e24c20f58de96248db4bb8506c8b2678d799", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkxM2UyNGMyMGY1OGRlOTYyNDhkYjRiYjg1MDZjOGIyNjc4ZDc5OQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-01-06T14:48:05Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-01-06T14:48:05Z"}, "message": "[multiple changes]\n\n2012-01-06  Robert Dewar  <dewar@adacore.com>\n\n\t* a-wichha.ads, a-wichun.ads, a-zchhan.ads, a-zchuni.ads,\n\ts-utf_32.ads: Add pragma Pure\n\t* s-utf_32.adb: Suppress warnings on non-static constants (now\n\tthat this is Pure).\n\n2012-01-06  Bob Duff  <duff@adacore.com>\n\n\t* s-rpc.ads (Read, Write): Add overriding indicators.\n\n2012-01-06  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Add documentation for conventions\n\tAda_Pass_By_Copy and Ada_Pass_By_Reference.\n\n2012-01-06  Gary Dismukes  <dismukes@adacore.com>\n\n\t* a-tienio.adb (Put): Add exception message on\n\traise statements. Remove unneeded blocks and object declarations.\n\n2012-01-06  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_prag.adb: Minor reformatting.\n\n2012-01-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sinfo.ads, sinfo.adb (Has_Prefixed_Call): New flag to indicate\n\tthat a selected component within a generic unit has been resolved\n\tas a prefixed call with local references.\n\t* sem_ch3.adb (Is_Visible_Component): In an instance body a selected\n\tcomponent is always visible.\n\t* sem_ch4.adb (Analyze_Selected_Component): If the node is a\n\tprefixed call in an instance, do not look for visible components\n\tof the type.\n\t* sem_ch12.adb (Reset_Entity): If a selected component has resolved\n\tto a prefixed call, mark the node accordingly when prefix and\n\tselector are local references.\n\nFrom-SVN: r182954", "tree": {"sha": "14b273463371d190969b1946bbd551ae4fc4f537", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14b273463371d190969b1946bbd551ae4fc4f537"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4913e24c20f58de96248db4bb8506c8b2678d799", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4913e24c20f58de96248db4bb8506c8b2678d799", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4913e24c20f58de96248db4bb8506c8b2678d799", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4913e24c20f58de96248db4bb8506c8b2678d799/comments", "author": null, "committer": null, "parents": [{"sha": "86d71fcabfba7a1f288ea6b90e7228705d6f5b99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86d71fcabfba7a1f288ea6b90e7228705d6f5b99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86d71fcabfba7a1f288ea6b90e7228705d6f5b99"}], "stats": {"total": 177, "additions": 128, "deletions": 49}, "files": [{"sha": "67905722c590e78f9283be222c92102adeb6c7ca", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4913e24c20f58de96248db4bb8506c8b2678d799", "patch": "@@ -1,3 +1,42 @@\n+2012-01-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-wichha.ads, a-wichun.ads, a-zchhan.ads, a-zchuni.ads,\n+\ts-utf_32.ads: Add pragma Pure\n+\t* s-utf_32.adb: Suppress warnings on non-static constants (now\n+\tthat this is Pure).\n+\n+2012-01-06  Bob Duff  <duff@adacore.com>\n+\n+\t* s-rpc.ads (Read, Write): Add overriding indicators.\n+\n+2012-01-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Add documentation for conventions\n+\tAda_Pass_By_Copy and Ada_Pass_By_Reference.\n+\n+2012-01-06  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* a-tienio.adb (Put): Add exception message on\n+\traise statements. Remove unneeded blocks and object declarations.\n+\n+2012-01-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_prag.adb: Minor reformatting.\n+\n+2012-01-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sinfo.ads, sinfo.adb (Has_Prefixed_Call): New flag to indicate\n+\tthat a selected component within a generic unit has been resolved\n+\tas a prefixed call with local references.\n+\t* sem_ch3.adb (Is_Visible_Component): In an instance body a selected\n+\tcomponent is always visible.\n+\t* sem_ch4.adb (Analyze_Selected_Component): If the node is a\n+\tprefixed call in an instance, do not look for visible components\n+\tof the type.\n+\t* sem_ch12.adb (Reset_Entity): If a selected component has resolved\n+\tto a prefixed call, mark the node accordingly when prefix and\n+\tselector are local references.\n+\n 2012-01-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnatvsn.ads (Current_Year): Bump to 2012."}, {"sha": "1b9ab8bcd6402eb2b7c04c077efd857ed71c10dd", "filename": "gcc/ada/a-tienio.adb", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fa-tienio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fa-tienio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tienio.adb?ref=4913e24c20f58de96248db4bb8506c8b2678d799", "patch": "@@ -101,14 +101,10 @@ package body Ada.Text_IO.Enumeration_IO is\n       --  checks suppressed, which includes instantiated generics.\n \n       if not Item'Valid then\n-         raise Constraint_Error;\n+         raise Constraint_Error with \"invalid enumeration value\";\n       end if;\n \n-      declare\n-         Image : constant String := Enum'Image (Item);\n-      begin\n-         Aux.Put (File, Image, Width, Set);\n-      end;\n+      Aux.Put (File, Enum'Image (Item), Width, Set);\n    end Put;\n \n    procedure Put\n@@ -132,14 +128,10 @@ package body Ada.Text_IO.Enumeration_IO is\n       --  checks suppressed, which includes instantiated generics.\n \n       if not Item'Valid then\n-         raise Constraint_Error;\n+         raise Constraint_Error with \"invalid enumeration value\";\n       end if;\n \n-      declare\n-         Image : constant String := Enum'Image (Item);\n-      begin\n-         Aux.Puts (To, Image, Set);\n-      end;\n+      Aux.Puts (To, Enum'Image (Item), Set);\n    end Put;\n \n end Ada.Text_IO.Enumeration_IO;"}, {"sha": "a9cff259f7afb0deea5b22cdca6532317579e1e8", "filename": "gcc/ada/a-wichha.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fa-wichha.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fa-wichha.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-wichha.ads?ref=4913e24c20f58de96248db4bb8506c8b2678d799", "patch": "@@ -14,6 +14,11 @@\n ------------------------------------------------------------------------------\n \n package Ada.Wide_Characters.Handling is\n+   pragma Pure;\n+   --  This package is clearly intended to be Pure, by analogy with the\n+   --  base Ada.Characters.Handling package. The version in the RM does\n+   --  not yet have this pragma, but that is a clear omission. This will\n+   --  be fixed in a future version of AI05-0266-1.\n \n    function Is_Control (Item : Wide_Character) return Boolean;\n    pragma Inline (Is_Control);"}, {"sha": "a2f78e393672ee2b4812f669b2eae6ca7439d936", "filename": "gcc/ada/a-wichun.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fa-wichun.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fa-wichun.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-wichun.ads?ref=4913e24c20f58de96248db4bb8506c8b2678d799", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2005-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2005-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,6 +37,7 @@\n with System.UTF_32;\n \n package Ada.Wide_Characters.Unicode is\n+   pragma Pure;\n \n    --  The following type defines the categories from the unicode definitions.\n    --  The one addition we make is Fe, which represents the characters FFFE"}, {"sha": "4c78dcd070c7847b003fb8484d09e63b1576b033", "filename": "gcc/ada/a-zchhan.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fa-zchhan.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fa-zchhan.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-zchhan.ads?ref=4913e24c20f58de96248db4bb8506c8b2678d799", "patch": "@@ -14,6 +14,11 @@\n ------------------------------------------------------------------------------\n \n package Ada.Wide_Wide_Characters.Handling is\n+   pragma Pure;\n+   --  This package is clearly intended to be Pure, by analogy with the\n+   --  base Ada.Characters.Handling package. The version in the RM does\n+   --  not yet have this pragma, but that is a clear omission. This will\n+   --  be fixed in a future version of AI05-0266-1.\n \n    function Is_Control (Item : Wide_Wide_Character) return Boolean;\n    pragma Inline (Is_Control);"}, {"sha": "bb2af79fe77553e48168a9ec66544e719eb18cc8", "filename": "gcc/ada/a-zchuni.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fa-zchuni.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fa-zchuni.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-zchuni.ads?ref=4913e24c20f58de96248db4bb8506c8b2678d799", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2005-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2005-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,6 +34,7 @@\n with System.UTF_32;\n \n package Ada.Wide_Wide_Characters.Unicode is\n+   pragma Pure;\n \n    --  The following type defines the categories from the unicode definitions.\n    --  The one addition we make is Fe, which represents the characters FFFE"}, {"sha": "908b177187bfb040e6d7c212ba4ced9185de21cc", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=4913e24c20f58de96248db4bb8506c8b2678d799", "patch": "@@ -9608,6 +9608,14 @@ The following convention names are supported\n @table @code\n @item  Ada\n Ada\n+@item Ada_Pass_By_Copy\n+Allowed for any types except by-reference types such as limited\n+records. Compatible with convention Ada, but causes any parameters\n+with this convention to be passed by copy.\n+@item Ada_Pass_By_Reference\n+Allowed for any types except by-copy types such as scalars.\n+Compatible with convention Ada, but causes any parameters\n+with this convention to be passed by reference.\n @item Assembler\n Assembly language\n @item Asm"}, {"sha": "93ad69bfc5e6353493c051a7ba1f66a5ed6166db", "filename": "gcc/ada/s-rpc.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fs-rpc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fs-rpc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-rpc.ads?ref=4913e24c20f58de96248db4bb8506c8b2678d799", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -52,12 +52,12 @@ package System.RPC is\n      (Initial_Size : Ada.Streams.Stream_Element_Count) is new\n        Ada.Streams.Root_Stream_Type with private;\n \n-   procedure Read\n+   overriding procedure Read\n      (Stream : in out Params_Stream_Type;\n       Item   : out Ada.Streams.Stream_Element_Array;\n       Last   : out Ada.Streams.Stream_Element_Offset);\n \n-   procedure Write\n+   overriding procedure Write\n      (Stream : in out Params_Stream_Type;\n       Item   : Ada.Streams.Stream_Element_Array);\n "}, {"sha": "676d0e3ccc9bea4bccd750f2d466c97a4d86e016", "filename": "gcc/ada/s-utf_32.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fs-utf_32.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fs-utf_32.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-utf_32.adb?ref=4913e24c20f58de96248db4bb8506c8b2678d799", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2005-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2005-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,6 +34,13 @@ pragma Compiler_Unit;\n pragma Style_Checks (Off);\n --  Allow long lines in this unit\n \n+--  pragma Warnings (Off, \"non-static constant in preelaborated unit\");\n+--  We need this to be pure, and the three constants in question are not a\n+--  real problem, they are completely known at compile time. This pragma\n+--  is commented out for now, because we still want to be able to bootstrap\n+--  with old versions of the compiler that did not support this form. We\n+--  have added additional pragma Warnings (Off/On) for now ???\n+\n package body System.UTF_32 is\n \n    ----------------------\n@@ -1850,6 +1857,9 @@ package body System.UTF_32 is\n      (16#F0000#, 16#FFFFD#),  -- (Co)  <Plane 15 Private Use, First> .. <Plane 15 Private Use, Last>\n      (16#100000#, 16#10FFFD#));  -- (Co)  <Plane 16 Private Use, First> .. <Plane 16 Private Use, Last>\n \n+   pragma Warnings (Off);\n+   --  Temporary, until pragma at start can be activated ???\n+\n    --  The following array is parallel to the Unicode_Ranges table above. For\n    --  each entry in the Unicode_Ranges table, there is a corresponding entry\n    --  in the following table indicating the corresponding unicode category.\n@@ -6060,6 +6070,9 @@ package body System.UTF_32 is\n         40,  -- DESERET CAPITAL LETTER LONG I .. DESERET CAPITAL LETTER EW\n         32); -- TAG LATIN CAPITAL LETTER A .. TAG LATIN CAPITAL LETTER Z\n \n+   pragma Warnings (On);\n+   --  Temporary until pragma Warnings at start can be activated ???\n+\n    --  The following is a list of the 10646 names for CAPITAL LETTER entries\n    --  that have no matching SMALL LETTER entry and are thus not folded\n "}, {"sha": "4f61a0147887c1e760bd6a4d13f7e91c090a6d4b", "filename": "gcc/ada/s-utf_32.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fs-utf_32.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fs-utf_32.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-utf_32.ads?ref=4913e24c20f58de96248db4bb8506c8b2678d799", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2005-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2005-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -44,6 +44,7 @@\n pragma Compiler_Unit;\n \n package System.UTF_32 is\n+   pragma Pure;\n \n    type UTF_32 is range 0 .. 16#7FFF_FFFF#;\n    --  So far, the only defined character codes are in 0 .. 16#01_FFFF#"}, {"sha": "cbc8b4df86896e92364b07a21460c13f9e43db16", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=4913e24c20f58de96248db4bb8506c8b2678d799", "patch": "@@ -12676,17 +12676,21 @@ package body Sem_Ch12 is\n                   Save_Entity_Descendants (N);\n \n                else\n+                  Set_Is_Prefixed_Call (Parent (N));\n                   Set_Associated_Node (N, Empty);\n                   Set_Etype (N, Empty);\n                end if;\n \n             --  In Ada 2005, X.F may be a call to a primitive operation,\n             --  rewritten as F (X). This rewriting will be done again in an\n             --  instance, so keep the original node. Global entities will be\n-            --  captured as for other constructs.\n+            --  captured as for other constructs. Indicate that this must\n+            --  resolve as a call, to prevent accidental overloading in the\n+            --  instance, if both a component and a primitive operation appear\n+            --  as candidates.\n \n             else\n-               null;\n+               Set_Is_Prefixed_Call (Parent (N));\n             end if;\n \n          --  Entity is local. Reset in generic unit, so that node is resolved"}, {"sha": "88ef2674dc3902d4f982912d691bf4d64ea0aaa3", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 3, "deletions": 26, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=4913e24c20f58de96248db4bb8506c8b2678d799", "patch": "@@ -16300,34 +16300,11 @@ package body Sem_Ch3 is\n       then\n          return True;\n \n-      --  If we are in the body of an instantiation, the component is visible\n-      --  if the parent type is non-private, or in  an enclosing scope. The\n-      --  scope stack is not present when analyzing an instance body, so we\n-      --  must inspect the chain of scopes explicitly.\n+      --  In the body of an instantiation, no need to check for the visibility\n+      --  of a component.\n \n       elsif In_Instance_Body then\n-         if not Is_Private_Type (Scope (C)) then\n-            return True;\n-\n-         else\n-            declare\n-               S : Entity_Id;\n-\n-            begin\n-               S := Current_Scope;\n-               while Present (S)\n-                 and then S /= Standard_Standard\n-               loop\n-                  if S = Type_Scope then\n-                     return True;\n-                  end if;\n-\n-                  S := Scope (S);\n-               end loop;\n-\n-               return False;\n-            end;\n-         end if;\n+         return True;\n \n       --  If the component has been declared in an ancestor which is currently\n       --  a private type, then it is not visible. The same applies if the"}, {"sha": "5ade3a88166baca99c1eb0a29bf738d2437f14d6", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=4913e24c20f58de96248db4bb8506c8b2678d799", "patch": "@@ -3858,8 +3858,10 @@ package body Sem_Ch4 is\n       elsif Is_Record_Type (Prefix_Type) then\n \n          --  Find component with given name\n+         --  In an instance, if the node is known as a prefixed call, do\n+         --  not examine components whose visibility may be accidental.\n \n-         while Present (Comp) loop\n+         while Present (Comp) and then not Is_Prefixed_Call (N) loop\n             if Chars (Comp) = Chars (Sel)\n               and then Is_Visible_Component (Comp)\n             then"}, {"sha": "8ac54a51f3c70df4eb728d0ded69891fa4dc03a6", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=4913e24c20f58de96248db4bb8506c8b2678d799", "patch": "@@ -14501,7 +14501,7 @@ package body Sem_Prag is\n                      --  the formal may be wrapped in a conversion if the\n                      --  actual is a conversion. Retrieve the real entity name.\n \n-                     if (In_Instance_Body or else In_Inlined_Body)\n+                     if (In_Instance_Body or In_Inlined_Body)\n                        and then Nkind (E_Id) = N_Unchecked_Type_Conversion\n                      then\n                         E_Id := Expression (E_Id);"}, {"sha": "96b45709c43f608b587a324804632fe71d4907cc", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=4913e24c20f58de96248db4bb8506c8b2678d799", "patch": "@@ -1838,6 +1838,14 @@ package body Sinfo is\n       return Flag13 (N);\n    end Is_Power_Of_2_For_Shift;\n \n+   function Is_Prefixed_Call\n+      (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Selected_Component);\n+      return Flag17 (N);\n+   end Is_Prefixed_Call;\n+\n    function Is_Protected_Subprogram_Body\n       (N : Node_Id) return Boolean is\n    begin\n@@ -4910,6 +4918,14 @@ package body Sinfo is\n       Set_Flag13 (N, Val);\n    end Set_Is_Power_Of_2_For_Shift;\n \n+   procedure Set_Is_Prefixed_Call\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Selected_Component);\n+      Set_Flag17 (N, Val);\n+   end Set_Is_Prefixed_Call;\n+\n    procedure Set_Is_Protected_Subprogram_Body\n       (N : Node_Id; Val : Boolean := True) is\n    begin"}, {"sha": "3d1809be93dc1715567a4e07fb84fe2f2ba17c8b", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4913e24c20f58de96248db4bb8506c8b2678d799/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=4913e24c20f58de96248db4bb8506c8b2678d799", "patch": "@@ -1335,6 +1335,12 @@ package Sinfo is\n    --    conditions holds, and the flag is set, then the division or\n    --    multiplication can be (and is) converted to a shift.\n \n+   --  Is_Prefixed_Call (Flag17-Sem)\n+   --    This flag is set in a selected component within a generic unit, if\n+   --    it resolves to a prefixed call to a primitive operation. The flag\n+   --    is used to prevent accidental overloadings in an instance, when a\n+   --    primitive operation and a private record component may be homographs.\n+\n    --  Is_Protected_Subprogram_Body (Flag7-Sem)\n    --    A flag set in a Subprogram_Body block to indicate that it is the\n    --    implementation of a protected subprogram. Such a body needs cleanup\n@@ -3249,6 +3255,7 @@ package Sinfo is\n       --  Associated_Node (Node4-Sem)\n       --  Do_Discriminant_Check (Flag13-Sem)\n       --  Is_In_Discriminant_Check (Flag11-Sem)\n+      --  Is_Prefixed_Call (Flag17-Sem)\n       --  Atomic_Sync_Required (Flag14-Sem)\n       --  plus fields for expression\n \n@@ -8653,6 +8660,9 @@ package Sinfo is\n    function Is_Power_Of_2_For_Shift\n      (N : Node_Id) return Boolean;    -- Flag13\n \n+   function Is_Prefixed_Call\n+     (N : Node_Id) return Boolean;    -- Flag17\n+\n    function Is_Protected_Subprogram_Body\n      (N : Node_Id) return Boolean;    -- Flag7\n \n@@ -9631,6 +9641,9 @@ package Sinfo is\n    procedure Set_Is_Power_Of_2_For_Shift\n      (N : Node_Id; Val : Boolean := True);    -- Flag13\n \n+   procedure Set_Is_Prefixed_Call\n+     (N : Node_Id; Val : Boolean := True);    -- Flag17\n+\n    procedure Set_Is_Protected_Subprogram_Body\n      (N : Node_Id; Val : Boolean := True);    -- Flag7\n \n@@ -11971,6 +11984,7 @@ package Sinfo is\n    pragma Inline (Is_Null_Loop);\n    pragma Inline (Is_Overloaded);\n    pragma Inline (Is_Power_Of_2_For_Shift);\n+   pragma Inline (Is_Prefixed_Call);\n    pragma Inline (Is_Protected_Subprogram_Body);\n    pragma Inline (Is_Static_Coextension);\n    pragma Inline (Is_Static_Expression);\n@@ -12293,6 +12307,7 @@ package Sinfo is\n    pragma Inline (Set_Is_Null_Loop);\n    pragma Inline (Set_Is_Overloaded);\n    pragma Inline (Set_Is_Power_Of_2_For_Shift);\n+   pragma Inline (Set_Is_Prefixed_Call);\n    pragma Inline (Set_Is_Protected_Subprogram_Body);\n    pragma Inline (Set_Has_Self_Reference);\n    pragma Inline (Set_Is_Static_Coextension);"}]}