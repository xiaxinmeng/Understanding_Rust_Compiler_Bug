{"sha": "04ac5b95df838a19592df6405a56b58c0e1c7ee0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRhYzViOTVkZjgzOGExOTU5MmRmNjQwNWE1NmI1OGMwZTFjN2VlMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-11-26T19:13:47Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-11-26T19:13:47Z"}, "message": "(pattern for HImode PSHM): Corrected.\n\n(trunchiqi2, zero_extendqihi2, extendhftqf2): Corrected.\n(pattern for movhi of CONST_INT to REG): Corrected.\n(divmodqi pattern for DISN): Corrected.\n(all shift patterns): Corrected.\n\nFrom-SVN: r10594", "tree": {"sha": "87f66f92dd5359123acce02751d6780bf7943fe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87f66f92dd5359123acce02751d6780bf7943fe2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04ac5b95df838a19592df6405a56b58c0e1c7ee0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04ac5b95df838a19592df6405a56b58c0e1c7ee0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04ac5b95df838a19592df6405a56b58c0e1c7ee0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04ac5b95df838a19592df6405a56b58c0e1c7ee0/comments", "author": null, "committer": null, "parents": [{"sha": "7838976cf761ab54ff6956aabaaba866896ca60c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7838976cf761ab54ff6956aabaaba866896ca60c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7838976cf761ab54ff6956aabaaba866896ca60c"}], "stats": {"total": 207, "additions": 134, "deletions": 73}, "files": [{"sha": "e2d4f2644c69311ee950bb0b251c277f0176e18c", "filename": "gcc/config/1750a/1750a.md", "status": "modified", "additions": 134, "deletions": 73, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04ac5b95df838a19592df6405a56b58c0e1c7ee0/gcc%2Fconfig%2F1750a%2F1750a.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04ac5b95df838a19592df6405a56b58c0e1c7ee0/gcc%2Fconfig%2F1750a%2F1750a.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.md?ref=04ac5b95df838a19592df6405a56b58c0e1c7ee0", "patch": "@@ -55,17 +55,20 @@\n   [(set (match_operand:QI 0 \"push_operand\" \"=<\")\n         (match_operand:QI 1 \"general_operand\" \"r\"))]\n   \"\"\n-  \"pshm r%1,r%1\")\n+  \"pshm r%1,r%1  ; stackptr = R%0\")\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"push_operand\" \"=<\")\n         (match_operand:HI 1 \"general_operand\" \"r\"))]\n   \"\"\n   \"*\n    { \n-        rtx new_operands[2];\n+        rtx new_operands[3];\n+        new_operands[2] = operands[0];\n         new_operands[0] = operands[1];\n         new_operands[1] = gen_rtx(CONST_INT,VOIDmode,REGNO(operands[1])+1);\n+        output_asm_insn(\\\"pshm r%0,r%1  ; stackptr = r%2\\\",new_operands);\n+        return \\\";\\\";\n    } \")\n \n (define_insn \"\"\n@@ -74,11 +77,12 @@\n   \"\"\n   \"*\n   { \n-        rtx new_operands[2];\n+        rtx new_operands[3];\n+        new_operands[2] = operands[0];\n         new_operands[0] = operands[1];\n         new_operands[1] = gen_rtx(CONST_INT,VOIDmode,REGNO(operands[1])+1);\n-        output_asm_insn(\\\"pshm r%0,r%1\\\",new_operands);\n-        return \\\"\\;\\\";\n+        output_asm_insn(\\\"pshm r%0,r%1  ; stackptr = r%2\\\",new_operands);\n+        return \\\";\\\";\n    } \")\n \n (define_insn \"\"\n@@ -87,11 +91,12 @@\n   \"\"\n   \"*\n    { \n-        rtx new_operands[2];\n+        rtx new_operands[3];\n+        new_operands[2] = operands[0];\n         new_operands[0] = operands[1];\n         new_operands[1] = gen_rtx(CONST_INT,VOIDmode,REGNO(operands[1])+2);\n-        output_asm_insn(\\\"pshm r%0,r%1\\\",new_operands);\n-        return \\\"\\;\\\";\n+        output_asm_insn(\\\"pshm r%0,r%1  ; stackptr = r%2\\\",new_operands);\n+        return \\\";\\\";\n    } \")\n \n ;; stackpop\n@@ -111,7 +116,7 @@\n         new_operands[0] = operands[0];\n         new_operands[1] = gen_rtx(CONST_INT,VOIDmode,REGNO(operands[0])+1);\n         output_asm_insn(\\\"popm r%0,r%1\\\",new_operands);\n-        return \\\"\\;\\\";\n+        return \\\";\\\";\n    } \")\n \n (define_insn \"\"\n@@ -124,7 +129,7 @@\n         new_operands[0] = operands[0];\n         new_operands[1] = gen_rtx(CONST_INT,VOIDmode,REGNO(operands[0])+1);\n         output_asm_insn(\\\"popm r%0,r%1\\\",new_operands);\n-        return \\\"\\;\\\";\n+        return \\\";\\\";\n    } \")\n \n (define_insn \"\"\n@@ -137,7 +142,7 @@\n         new_operands[0] = operands[0];\n         new_operands[1] = gen_rtx(CONST_INT,VOIDmode,REGNO(operands[0])+2);\n         output_asm_insn(\\\"popm r%0,r%1\\\",new_operands);\n-        return \\\"\\;\\\";\n+        return \\\";\\\";\n    } \")\n \n ;; Test operations. These shouldn't really occur for 1750:\n@@ -262,8 +267,11 @@\n   \"\"\n   \"*\n      {\n-        REGNO(operands[1]) += 1;\n-        return \\\"lr r%0,r%1  ;trunchiqi2\\\";\n+\trtx new_operands[2];\n+\tnew_operands[0] = operands[0];\n+\tnew_operands[1] = gen_rtx (REG, HImode, REGNO(operands[1]) + 1);\n+        output_asm_insn(\\\"lr r%0,r%1  ;trunchiqi2\\\",new_operands);\n+        return \\\";\\\";\n      } \")\n \n ;; zero extension instructions\n@@ -274,17 +282,23 @@\n   \"\"\n   \"*\n       {\n+\trtx new_opnds[2];\n         output_asm_insn(\\\"xorr r%0,r%0   ;zero_extendqihi2\\\",operands);\n-        REGNO(operands[0]) += 1;\n+\tnew_opnds[0] = gen_rtx (REG, HImode, REGNO(operands[0]) + 1);\n+\tnew_opnds[1] = operands[1];\n         switch (which_alternative)\n           {\n             case 0:\n-              return \\\"lr  r%0,r%1\\\";\n+              output_asm_insn(\\\"lr  r%0,r%1\\\",new_opnds);\n+              break;\n             case 1:\n-              return \\\"l   r%0,%1\\\";\n+              output_asm_insn(\\\"l   r%0,%1\\\",new_opnds);\n+              break;\n             case 2:\n-              return \\\"lim r%0,%1\\\";\n+              output_asm_insn(\\\"lim r%0,%1\\\",new_opnds);\n+              break;\n           }\n+        return \\\";\\\";\n       } \")\n \n ;; sign extension instructions\n@@ -304,18 +318,18 @@\n ; 1750 HF-to-TQF extend: just append 16 bits (least signif.) with all bits zero\n (define_insn \"extendhftqf2\"\n   [(set (match_operand:TQF 0 \"register_operand\" \"=r,r\")\n-        (float_extend:TQF\n-         (match_operand:HF 1 \"general_operand\" \"r,m\")))]\n+        (float_extend:TQF (match_operand:HF 1 \"general_operand\" \"r,m\")))]\n   \"\"\n   \"*\n       {\n-        REGNO(operands[0]) += 2;\n-        output_asm_insn(\\\"xorr r%0,r%0   ;extendhftqf2\\\",operands);\n-        REGNO(operands[0]) -= 2;\n+\trtx new_opnds[2];\n+\tnew_opnds[0] = gen_rtx (REG, QImode, REGNO(operands[0]) + 2);\n+\tnew_opnds[1] = operands[1];\n+        output_asm_insn(\\\"xorr r%0,r%0   ;extendhftqf2\\\",new_opnds);\n         if (which_alternative == 0)\n-          return \\\"dlr r%0,r%1\\\";\n+          return \\\"dlr r%0,r%1   ; put condition codes back on track\\\";\n         else\n-          return \\\"dl  r%0,%1\\\";\n+          return \\\"dl  r%0,%1    ; put condition codes back on track\\\";\n       } \")\n \n ; 1750 TQF-to-HF truncate is a no-op: just leave away the least signif. 16 bits\n@@ -386,38 +400,42 @@\n \n ;; 32-bit moves\n \n-;; Set HIreg to constant\n+; Set HIreg to constant\n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-        (match_operand    1 \"immediate_operand\" \"i\"))]\n+        (match_operand:HI 1 \"immediate_operand\" \"i\"))]\n   \"\"\n   \"*\n-    if (GET_CODE(operands[1]) == CONST_INT)\n       {\n+        rtx new_opnds[2];\n         int val = INTVAL(operands[1]);\n         if (val >= 0)\n           {\n             if (val <= 65535)\n               {\n-                output_asm_insn(\\\"xorr   r%0,r%0 ;movhi cst->reg\\\",operands);\n-                operands[0] = gen_rtx(REG,QImode,REGNO(operands[0]) + 1);\n+                new_opnds[0] = gen_rtx(REG,QImode,REGNO(operands[0]));\n+                new_opnds[1] = operands[1];\n+                output_asm_insn(\\\"xorr   r%0,r%0 ;movhi cst->reg\\\",new_opnds);\n+                REGNO(new_opnds[0]) += 1;\n                 if (val == 0)\n-                  return \\\"xorr r%0,r%0\\\";\n+                  output_asm_insn(\\\"xorr r%0,r%0\\\",new_opnds);\n                 else if (val <= 16)\n-                  return \\\"lisp r%0,%1\\\";\n+                  output_asm_insn(\\\"lisp r%0,%1\\\",new_opnds);\n                 else\n-                  return \\\"lim  r%0,%1\\\";\n+                  output_asm_insn(\\\"lim  r%0,%1\\\",new_opnds);\n+                return \\\";\\\";\n               }\n           }\n         else if (val >= -16)\n           return \\\"lisn r%0,%J1\\;dsra r%0,16 ;movhi cst\\\";\n-        INTVAL(operands[1]) >>= 16;\n-        output_asm_insn(\\\"lim r%0,%1 ;movhi cst->reg\\\",operands);\n-        REGNO(operands[0]) += 1;\n-        INTVAL(operands[1]) = val & 0xFFFF;\n-        return \\\"lim r%0,%1\\\";\n+\tnew_opnds[0] = gen_rtx(REG, QImode, REGNO(operands[0]));\n+\tnew_opnds[1] = gen_rtx(CONST_INT,VOIDmode,(INTVAL(operands[1])) >> 16);\n+        output_asm_insn(\\\"lim r%0,%1 ;movhi cst->reg\\\",new_opnds);\n+        INTVAL(new_opnds[1]) = val & 0xFFFF;\n+        REGNO(new_opnds[0]) += 1;\n+        output_asm_insn(\\\"lim r%0,%1\\\",new_opnds);\n+        return \\\";\\\";\n       }\n-    return \\\"lim r%0,%1\\;dsra r%0,16 ;movhi cst\\\";\n   \")\n \n (define_insn \"movhi\"\n@@ -671,8 +689,15 @@\n          istr = \\\"disp\\\";\n          break;\n        case 1:\n-         INTVAL(operands[2]) = - INTVAL(operands[2]); /* to be corrected */\n-         istr = \\\"disn\\\";\n+\t {\n+\t   rtx new_opnds[4];\n+\t   new_opnds[0] = operands[0];\n+\t   new_opnds[1] = operands[1];\n+\t   new_opnds[2] = gen_rtx (CONST_INT, VOIDmode, -INTVAL(operands[2]));\n+\t   new_opnds[3] = operands[3];\n+           istr = \\\"disn\\\";\n+\t   return (char *)mod_regno_adjust(istr,new_opnds);\n+\t }\n          break;\n        case 2:\n          istr = \\\"dvim\\\";\n@@ -880,7 +905,7 @@\n (define_insn \"ashlqi3\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n         (ashift:QI (match_operand:QI 1 \"register_operand\" \"0,0\")\n-                   (match_operand:QI 2 \"general_operand\" \"I,r\")))]\n+                   (match_operand:QI 2 \"nonmemory_operand\" \"I,r\")))]\n   \"\"\n   \"@\n     sll r%0,%2\n@@ -889,21 +914,34 @@\n (define_insn \"ashlhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n         (ashift:HI (match_operand:HI 1 \"register_operand\" \"0,0\")\n-                   (match_operand:QI 2 \"general_operand\" \"L,r\")))]\n+                   (match_operand:QI 2 \"nonmemory_operand\" \"L,r\")))]\n   \"\"                        ; the 'L' constraint is a slight imprecise...\n-  \"@\n-     dsll r%0,%2\n-     dslr r%0,r%2 \")\n+  \"*\n+  if (which_alternative == 1)\n+    return \\\"dslr r%0,r%2\\\";\n+  else if (INTVAL(operands[2]) <= 16)\n+    return \\\"dsll r%0,%2\\\";\n+  else\n+  {\n+    rtx new_opnds[2];\n+    new_opnds[0] = gen_rtx (REG, QImode, REGNO(operands[0]));\n+    new_opnds[1] = gen_rtx (REG, QImode, REGNO(operands[0]) + 1);\n+    output_asm_insn(\\\"lr r%0,r%1  ; ashlhi3 shiftcount > 16\\\",new_opnds);\n+    new_opnds[1] = gen_rtx (CONST_INT, VOIDmode, INTVAL(operands[2]) - 16);\n+    output_asm_insn(\\\"sll r%0,%1\\\",new_opnds);\n+    return \\\";\\\";\n+  } \")\n+\n \n ;; Right shift by a variable shiftcount works by negating the shift count,\n ;; then emitting a right shift with the shift count negated.  This means\n ;; that all actual shift counts in the RTL will be positive.  This \n ;; prevents converting shifts to ZERO_EXTRACTs with negative positions,\n ;; which isn't valid.\n (define_expand \"lshrqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:QI 0 \"general_operand\" \"=r\")\n \t(lshiftrt:QI (match_operand:QI 1 \"general_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"general_operand\" \"g\")))]\n+\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"g\")))]\n   \"\"\n   \"\n {\n@@ -916,7 +954,7 @@\n \t(lshiftrt:QI (match_operand:QI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"immediate_operand\" \"I\")))]\n   \"\"\n-  \"srl r%0,%1\")\n+  \"srl r%0,%2\")\n \n (define_insn \"\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n@@ -926,23 +964,35 @@\n   \"slr r%0,r%2 \")\n \n ;; Same thing for HImode.\n+\n (define_expand \"lshrhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g\")\n-\t(lshiftrt:HI (match_operand:HI 1 \"general_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"general_operand\" \"g\")))]\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(lshiftrt:HI (match_operand:HI 1 \"register_operand\" \"0\")\n+\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"g\")))]\n   \"\"\n   \"\n-{\n-  if (GET_CODE (operands[2]) != CONST_INT)\n-    operands[2] = gen_rtx (NEG, QImode, negate_rtx (QImode, operands[2]));\n-}\")\n+  {\n+    if (GET_CODE (operands[2]) != CONST_INT)\n+      operands[2] = gen_rtx (NEG, QImode, negate_rtx (QImode, operands[2]));\n+  }\")\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(lshiftrt:HI (match_operand:HI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"immediate_operand\" \"L\")))]\n   \"\"\n-  \"dsrl r%0,%1\")\n+  \"*\n+  {\n+    rtx new_opnds[2];\n+    int amount = INTVAL(operands[2]);\n+    if (amount <= 16)\n+      return \\\"dsrl r%0,%2\\\";\n+    output_asm_insn(\\\"dsrl r%0,16  ; lshrhi3 shiftcount > 16\\\",operands);\n+    new_opnds[0] = gen_rtx (REG, QImode, REGNO(operands[0]) + 1);\n+    new_opnds[1] = gen_rtx (CONST_INT, VOIDmode, amount - 16);\n+    output_asm_insn(\\\"srl  r%0,%1\\\",new_opnds);\n+    return \\\";\\\";\n+  } \")\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -953,22 +1003,22 @@\n \n ;; Same applies for arithmetic shift right.\n (define_expand \"ashrqi3\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:QI 0 \"general_operand\" \"=r\")\n \t(ashiftrt:QI (match_operand:QI 1 \"general_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"general_operand\" \"g\")))]\n+\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"g\")))]\n   \"\"\n   \"\n-{\n-  if (GET_CODE (operands[2]) != CONST_INT)\n-    operands[2] = gen_rtx (NEG, QImode, negate_rtx (QImode, operands[2]));\n-}\")\n+  {\n+    if (GET_CODE (operands[2]) != CONST_INT)\n+      operands[2] = gen_rtx (NEG, QImode, negate_rtx (QImode, operands[2]));\n+  }\")\n \n (define_insn \"\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n \t(ashiftrt:QI (match_operand:QI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"immediate_operand\" \"I\")))]\n   \"\"\n-  \"sra r%0,%1\")\n+  \"sra r%0,%2\")\n \n (define_insn \"\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n@@ -979,22 +1029,33 @@\n \n ;; HImode arithmetic shift right.\n (define_expand \"ashrhi3\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=g\")\n+  [(set (match_operand:HI 0 \"general_operand\" \"=r\")\n \t(ashiftrt:HI (match_operand:HI 1 \"general_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"general_operand\" \"g\")))]\n+\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"g\")))]\n   \"\"\n   \"\n-{\n-  if (GET_CODE (operands[2]) != CONST_INT)\n-    operands[2] = gen_rtx (NEG, QImode, negate_rtx (QImode, operands[2]));\n-}\")\n+  {\n+    if (GET_CODE (operands[2]) != CONST_INT)\n+      operands[2] = gen_rtx (NEG, QImode, negate_rtx (QImode, operands[2]));\n+  }\")\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(ashiftrt:HI (match_operand:HI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"immediate_operand\" \"L\")))]\n   \"\"\n-  \"dsra r%0,%1\")\n+  \"*\n+  {\n+    rtx new_opnds[2];\n+    int amount = INTVAL(operands[2]);\n+    if (amount <= 16)\n+      return \\\"dsra r%0,%2\\\";\n+    output_asm_insn(\\\"dsra r%0,16  ; ashrhi3 shiftcount > 16\\\",operands);\n+    new_opnds[0] = gen_rtx (REG, QImode, REGNO(operands[0]) + 1);\n+    new_opnds[1] = gen_rtx (CONST_INT, VOIDmode, amount - 16);\n+    output_asm_insn(\\\"sra  r%0,%1\\\",new_opnds);\n+    return \\\";\\\";\n+  } \")\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -1009,7 +1070,7 @@\n (define_insn \"rotlqi3\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n         (rotate:QI (match_operand:QI 1 \"register_operand\" \"0,0\")\n-                   (match_operand:QI 2 \"general_operand\" \"I,r\")))]\n+                   (match_operand:QI 2 \"nonmemory_operand\" \"I,r\")))]\n   \"\"\n   \"@\n     slc r%0,%2\n@@ -1018,7 +1079,7 @@\n (define_insn \"rotlhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n         (rotate:HI (match_operand:HI 1 \"register_operand\" \"0,0\")\n-                   (match_operand:QI 2 \"general_operand\" \"I,r\")))]\n+                   (match_operand:QI 2 \"nonmemory_operand\" \"I,r\")))]\n   \"\"\n   \"@\n     dslc r%0,%2\n@@ -1034,7 +1095,7 @@\n (define_insn \"rotrhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n         (rotatert:HI (match_operand:HI 1 \"register_operand\" \"0\")\n-                     (match_operand:QI 2 \"general_operand\" \"r\")))]\n+                     (match_operand:QI 2 \"nonmemory_operand\" \"r\")))]\n   \"\"\n   \"neg  r%2,r%2\\;dscr r%0,r%2 \")\n "}]}