{"sha": "5acea42bfb17b59aff01ce77fe63d880b4ef5878", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFjZWE0MmJmYjE3YjU5YWZmMDFjZTc3ZmU2M2Q4ODBiNGVmNTg3OA==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2001-04-26T18:11:02Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2001-04-26T18:11:02Z"}, "message": "verify.c (verify_jvm_instructions): For field instructions, check that field index is valid.\n\n\n\t* verify.c (verify_jvm_instructions):  For field instructions,\n\tcheck that field index is valid.  For invoke instructions, check that\n\tmethod index is valid.\n\nFrom-SVN: r41600", "tree": {"sha": "a1fb5e9ea8a2a33133389b69195efbc748ba099e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1fb5e9ea8a2a33133389b69195efbc748ba099e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5acea42bfb17b59aff01ce77fe63d880b4ef5878", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5acea42bfb17b59aff01ce77fe63d880b4ef5878", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5acea42bfb17b59aff01ce77fe63d880b4ef5878", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5acea42bfb17b59aff01ce77fe63d880b4ef5878/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b329888265f674982705102d1bc6a3f976189f80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b329888265f674982705102d1bc6a3f976189f80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b329888265f674982705102d1bc6a3f976189f80"}], "stats": {"total": 58, "additions": 48, "deletions": 10}, "files": [{"sha": "1f8fd67c9f33f4a49cf04d272032576ebba50a11", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5acea42bfb17b59aff01ce77fe63d880b4ef5878/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5acea42bfb17b59aff01ce77fe63d880b4ef5878/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=5acea42bfb17b59aff01ce77fe63d880b4ef5878", "patch": "@@ -1,3 +1,9 @@\n+2001-04-25  Per Bothner  <per@bothner.com>\n+\n+\t* verify.c (verify_jvm_instructions):  For field instructions,\n+\tcheck that field index is valid.  For invoke instructions, check that\n+\tmethod index is valid.\n+\n 2001-04-25  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config-lang.in (target_libs): Copy from $libgcj_saved."}, {"sha": "0a63477d7153de69dfe167012196feb20e5dbade", "filename": "gcc/java/verify.c", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5acea42bfb17b59aff01ce77fe63d880b4ef5878/gcc%2Fjava%2Fverify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5acea42bfb17b59aff01ce77fe63d880b4ef5878/gcc%2Fjava%2Fverify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fverify.c?ref=5acea42bfb17b59aff01ce77fe63d880b4ef5878", "patch": "@@ -901,9 +901,15 @@ verify_jvm_instructions (jcf, byte_ops, length)\n \tcase OPCODE_putfield:  is_putting = 1;  is_static = 0;  goto field;\n \tfield:\n \t  {\n-\t    int index = IMMEDIATE_u2;\n-\t    tree field_signature = COMPONENT_REF_SIGNATURE (&current_jcf->cpool, index);\n-\t    tree field_type = get_type_from_signature (field_signature);\n+\t    tree field_signature, field_type;\n+\t    index = IMMEDIATE_u2;\n+\t    if (index <= 0 || index >= JPOOL_SIZE(current_jcf))\n+\t      VERIFICATION_ERROR_WITH_INDEX (\"bad constant pool index %d\");\n+\t    if (JPOOL_TAG (current_jcf, index) != CONSTANT_Fieldref)\n+\t      VERIFICATION_ERROR\n+\t\t(\"field instruction does not reference a Fieldref\");\n+\t    field_signature = COMPONENT_REF_SIGNATURE (&current_jcf->cpool, index);\n+\t    field_type = get_type_from_signature (field_signature);\n \t    if (is_putting)\n \t      POP_TYPE (field_type, \"incorrect type for field\");\n \t    if (! is_static)\n@@ -959,7 +965,7 @@ verify_jvm_instructions (jcf, byte_ops, length)\n \t  index = IMMEDIATE_u2;  goto ldc;\n \tldc:\n \t  if (index <= 0 || index >= JPOOL_SIZE(current_jcf))\n-\t    VERIFICATION_ERROR (\"bad constant pool index in ldc\");\n+\t    VERIFICATION_ERROR_WITH_INDEX (\"bad constant pool index %d in ldc\");\n \t  int_value = -1;\n \t  switch (JPOOL_TAG (current_jcf, index) & ~CONSTANT_ResolvedFlag)\n \t    {\n@@ -988,13 +994,32 @@ verify_jvm_instructions (jcf, byte_ops, length)\n \tcase OPCODE_invokestatic:\n \tcase OPCODE_invokeinterface:\n \t  {\n-\t    int index = IMMEDIATE_u2;\n-\t    tree sig = COMPONENT_REF_SIGNATURE (&current_jcf->cpool, index);\n-\t    tree self_type = get_class_constant\n+\t    tree sig, method_name, method_type, self_type;\n+\t    int self_is_interface, tag;\n+\t    index = IMMEDIATE_u2;\n+\t    if (index <= 0 || index >= JPOOL_SIZE(current_jcf))\n+\t      VERIFICATION_ERROR_WITH_INDEX\n+\t\t(\"bad constant pool index %d for invoke\");\n+\t    tag = JPOOL_TAG (current_jcf, index);\n+\t    if (op_code == OPCODE_invokeinterface)\n+\t      {\n+\t\tif (tag != CONSTANT_InterfaceMethodref)\n+\t\t  VERIFICATION_ERROR\n+\t\t    (\"invokeinterface does not reference an InterfaceMethodref\");\n+\t      }\n+\t    else\n+\t      {\n+\t\tif (tag != CONSTANT_Methodref)\n+\t\t  VERIFICATION_ERROR (\"invoke does not reference a Methodref\");\n+\t      }\n+\t    sig = COMPONENT_REF_SIGNATURE (&current_jcf->cpool, index);\n+\t    self_type = get_class_constant\n \t      (current_jcf, COMPONENT_REF_CLASS_INDEX (&current_jcf->cpool,\n \t\t\t\t\t\t       index));\n-\t    tree method_name = COMPONENT_REF_NAME (&current_jcf->cpool, index);\n-\t    tree method_type;\n+\t    if (! CLASS_LOADED_P (self_type))\n+\t      load_class (self_type, 1);\n+\t    self_is_interface = CLASS_INTERFACE (TYPE_NAME (self_type));\n+\t    method_name = COMPONENT_REF_NAME (&current_jcf->cpool, index);\n \t    method_type = parse_signature_string (IDENTIFIER_POINTER (sig),\n \t\t\t\t\t\t  IDENTIFIER_LENGTH (sig));\n \t    if (TREE_CODE (method_type) != FUNCTION_TYPE)\n@@ -1027,7 +1052,14 @@ verify_jvm_instructions (jcf, byte_ops, length)\n \t\t  if (!nargs || notZero)\n \t\t      VERIFICATION_ERROR \n \t\t        (\"invalid argument number in invokeinterface\");\n-\t\t  break;\t\t  \n+\t\t  // If we verify/resolve the constant pool, as we should,\n+\t\t  // this test (and the one just following) are redundant.\n+\t\t  if (! self_is_interface)\n+\t\t    VERIFICATION_ERROR (\"invokeinterface calls method not in interface\");\n+\t\t  break;\n+\t\tdefault:\n+\t\t  if (self_is_interface)\n+\t\t    VERIFICATION_ERROR (\"method in interface called\");\n \t\t}\n \t      }\n "}]}