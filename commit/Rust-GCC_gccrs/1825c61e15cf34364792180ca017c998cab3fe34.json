{"sha": "1825c61e15cf34364792180ca017c998cab3fe34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgyNWM2MWUxNWNmMzQzNjQ3OTIxODBjYTAxN2M5OThjYWIzZmUzNA==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2017-07-17T10:46:55Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2017-07-17T10:46:55Z"}, "message": "[PATCH] [ARC] Add support for naked functions.\n\ngcc/\n2017-07-17  Claudiu Zissulescu  <claziss@synopsys.com>\n            Andrew Burgess  <andrew.burgess@embecosm.com>\n\n        * config/arc/arc-protos.h (arc_compute_function_type): Change prototype.\n        (arc_return_address_register): New function.\n        * config/arc/arc.c (arc_handle_fndecl_attribute): New function.\n        (arc_handle_fndecl_attribute): Add naked attribute.\n        (TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS): Define.\n        (TARGET_WARN_FUNC_RETURN): Likewise.\n        (arc_allocate_stack_slots_for_args): New function.\n        (arc_warn_func_return): Likewise.\n        (machine_function): Change type fn_type.\n        (arc_compute_function_type): Consider new naked function type,\n        change function return type.\n        (arc_must_save_register): Adapt to handle new\n        arc_compute_function_type's return type.\n        (arc_expand_prologue): Likewise.\n        (arc_expand_epilogue): Likewise.\n        (arc_return_address_regs): Delete.\n        (arc_return_address_register): New function.\n        (arc_epilogue_uses): Use above function.\n        * config/arc/arc.h (arc_return_address_regs): Delete prototype.\n        (arc_function_type): Change encoding, add naked type.\n        (ARC_INTERRUPT_P): Change to handle the new encoding.\n        (ARC_FAST_INTERRUPT_P): Likewise.\n        (ARC_NORMAL_P): Define.\n        (ARC_NAKED_P): Likewise.\n        (arc_compute_function_type): Delete prototype.\n        * config/arc/arc.md (in_ret_delay_slot): Use\n        arc_return_address_register function.\n        (simple_return): Likewise.\n        (p_return_i): Likewise.\n\ngcc/testsuite\n2017-07-17  Claudiu Zissulescu  <claziss@synopsys.com>\n            Andrew Burgess  <andrew.burgess@embecosm.com>\n\n        * gcc.target/arc/naked-1.c: New file.\n        * gcc.target/arc/naked-2.c: Likewise.\n\nCo-Authored-By: Andrew Burgess <andrew.burgess@embecosm.com>\n\nFrom-SVN: r250266", "tree": {"sha": "ee7d5ab017ac8466277d3bfa737e36ff23115c48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee7d5ab017ac8466277d3bfa737e36ff23115c48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1825c61e15cf34364792180ca017c998cab3fe34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1825c61e15cf34364792180ca017c998cab3fe34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1825c61e15cf34364792180ca017c998cab3fe34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1825c61e15cf34364792180ca017c998cab3fe34/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9ebce098585220299a78ecda84b145d16ee25bca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ebce098585220299a78ecda84b145d16ee25bca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ebce098585220299a78ecda84b145d16ee25bca"}], "stats": {"total": 300, "additions": 234, "deletions": 66}, "files": [{"sha": "d4d940e72fd8433ee7696009b54b6932faf87cd9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1825c61e15cf34364792180ca017c998cab3fe34/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1825c61e15cf34364792180ca017c998cab3fe34/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1825c61e15cf34364792180ca017c998cab3fe34", "patch": "@@ -1,3 +1,36 @@\n+2017-07-17  Claudiu Zissulescu  <claziss@synopsys.com>\n+\tAndrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* config/arc/arc-protos.h (arc_compute_function_type): Change prototype.\n+\t(arc_return_address_register): New function.\n+\t* config/arc/arc.c (arc_handle_fndecl_attribute): New function.\n+\t(arc_handle_fndecl_attribute): Add naked attribute.\n+\t(TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS): Define.\n+\t(TARGET_WARN_FUNC_RETURN): Likewise.\n+\t(arc_allocate_stack_slots_for_args): New function.\n+\t(arc_warn_func_return): Likewise.\n+\t(machine_function): Change type fn_type.\n+\t(arc_compute_function_type): Consider new naked function type,\n+\tchange function return type.\n+\t(arc_must_save_register): Adapt to handle new\n+\tarc_compute_function_type's return type.\n+\t(arc_expand_prologue): Likewise.\n+\t(arc_expand_epilogue): Likewise.\n+\t(arc_return_address_regs): Delete.\n+\t(arc_return_address_register): New function.\n+\t(arc_epilogue_uses): Use above function.\n+\t* config/arc/arc.h (arc_return_address_regs): Delete prototype.\n+\t(arc_function_type): Change encoding, add naked type.\n+\t(ARC_INTERRUPT_P): Change to handle the new encoding.\n+\t(ARC_FAST_INTERRUPT_P): Likewise.\n+\t(ARC_NORMAL_P): Define.\n+\t(ARC_NAKED_P): Likewise.\n+\t(arc_compute_function_type): Delete prototype.\n+\t* config/arc/arc.md (in_ret_delay_slot): Use\n+\tarc_return_address_register function.\n+\t(simple_return): Likewise.\n+\t(p_return_i): Likewise.\n+\n 2017-07-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/81428"}, {"sha": "f6bf14e80eb8aa8fdded2a81c268c9e40070a08e", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1825c61e15cf34364792180ca017c998cab3fe34/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1825c61e15cf34364792180ca017c998cab3fe34/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=1825c61e15cf34364792180ca017c998cab3fe34", "patch": "@@ -45,13 +45,10 @@ extern void arc_expand_atomic_op (enum rtx_code, rtx, rtx, rtx, rtx, rtx);\n extern void arc_split_compare_and_swap (rtx *);\n extern void arc_expand_compare_and_swap (rtx *);\n extern bool compact_memory_operand_p (rtx, machine_mode, bool, bool);\n+extern int arc_return_address_register (unsigned int);\n+extern unsigned int arc_compute_function_type (struct function *);\n #endif /* RTX_CODE */\n \n-#ifdef TREE_CODE\n-extern enum arc_function_type arc_compute_function_type (struct function *);\n-#endif /* TREE_CODE */\n-\n-\n extern unsigned int arc_compute_frame_size (int);\n extern bool arc_ccfsm_branch_deleted_p (void);\n extern void arc_ccfsm_record_branch_deleted (void);"}, {"sha": "7b7f9ea9438fcaacc59167a5a316d136d61629f3", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 117, "deletions": 43, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1825c61e15cf34364792180ca017c998cab3fe34/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1825c61e15cf34364792180ca017c998cab3fe34/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=1825c61e15cf34364792180ca017c998cab3fe34", "patch": "@@ -211,6 +211,7 @@ static int rgf_banked_register_count;\n static int get_arc_condition_code (rtx);\n \n static tree arc_handle_interrupt_attribute (tree *, tree, tree, int, bool *);\n+static tree arc_handle_fndecl_attribute (tree *, tree, tree, int, bool *);\n \n /* Initialized arc_attribute_table to NULL since arc doesnot have any\n    machine specific supported attributes.  */\n@@ -229,6 +230,9 @@ const struct attribute_spec arc_attribute_table[] =\n   /* And these functions are always known to reside within the 21 bit\n      addressing range of blcc.  */\n   { \"short_call\",   0, 0, false, true,  true,  NULL, false },\n+  /* Function which are not having the prologue and epilogue generated\n+     by the compiler.  */\n+  { \"naked\", 0, 0, true, false, false, arc_handle_fndecl_attribute, false },\n   { NULL, 0, 0, false, false, false, NULL, false }\n };\n static int arc_comp_type_attributes (const_tree, const_tree);\n@@ -512,6 +516,12 @@ static void arc_finalize_pic (void);\n #define TARGET_DIFFERENT_ADDR_DISPLACEMENT_P hook_bool_void_true\n #define TARGET_SPILL_CLASS arc_spill_class\n \n+#undef TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS\n+#define TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS arc_allocate_stack_slots_for_args\n+\n+#undef TARGET_WARN_FUNC_RETURN\n+#define TARGET_WARN_FUNC_RETURN arc_warn_func_return\n+\n #include \"target-def.h\"\n \n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -1855,6 +1865,42 @@ arc_handle_interrupt_attribute (tree *, tree name, tree args, int,\n   return NULL_TREE;\n }\n \n+static tree\n+arc_handle_fndecl_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n+\t\t\t     int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) != FUNCTION_DECL)\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n+\t       name);\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+/* Implement `TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS' */\n+\n+static bool\n+arc_allocate_stack_slots_for_args (void)\n+{\n+  /* Naked functions should not allocate stack slots for arguments.  */\n+  unsigned int fn_type = arc_compute_function_type (cfun);\n+\n+  return !ARC_NAKED_P(fn_type);\n+}\n+\n+/* Implement `TARGET_WARN_FUNC_RETURN'.  */\n+\n+static bool\n+arc_warn_func_return (tree decl)\n+{\n+  struct function *func = DECL_STRUCT_FUNCTION (decl);\n+  unsigned int fn_type = arc_compute_function_type (func);\n+\n+  return !ARC_NAKED_P (fn_type);\n+}\n+\n /* Return zero if TYPE1 and TYPE are incompatible, one if they are compatible,\n    and two if they are nearly compatible (which causes a warning to be\n    generated).  */\n@@ -2358,7 +2404,7 @@ struct GTY (()) arc_frame_info\n \n typedef struct GTY (()) machine_function\n {\n-  enum arc_function_type fn_type;\n+  unsigned int fn_type;\n   struct arc_frame_info frame_info;\n   /* To keep track of unalignment caused by short insns.  */\n   int unalign;\n@@ -2376,43 +2422,40 @@ typedef struct GTY (()) machine_function\n    The result is cached.  To reset the cache at the end of a function,\n    call with DECL = NULL_TREE.  */\n \n-enum arc_function_type\n+unsigned int\n arc_compute_function_type (struct function *fun)\n {\n-  tree decl = fun->decl;\n-  tree a;\n-  enum arc_function_type fn_type = fun->machine->fn_type;\n+  tree attr, decl = fun->decl;\n+  unsigned int fn_type = fun->machine->fn_type;\n \n   if (fn_type != ARC_FUNCTION_UNKNOWN)\n     return fn_type;\n \n-  /* Assume we have a normal function (not an interrupt handler).  */\n-  fn_type = ARC_FUNCTION_NORMAL;\n+  /* Check if it is a naked function.  */\n+  if (lookup_attribute (\"naked\", DECL_ATTRIBUTES (decl)) != NULL_TREE)\n+    fn_type |= ARC_FUNCTION_NAKED;\n+  else\n+    fn_type |= ARC_FUNCTION_NORMAL;\n \n   /* Now see if this is an interrupt handler.  */\n-  for (a = DECL_ATTRIBUTES (decl);\n-       a;\n-       a = TREE_CHAIN (a))\n-    {\n-      tree name = TREE_PURPOSE (a), args = TREE_VALUE (a);\n-\n-      if (name == get_identifier (\"interrupt\")\n-\t  && list_length (args) == 1\n-\t  && TREE_CODE (TREE_VALUE (args)) == STRING_CST)\n-\t{\n-\t  tree value = TREE_VALUE (args);\n-\n-\t  if (!strcmp (TREE_STRING_POINTER (value), \"ilink1\")\n-\t      || !strcmp (TREE_STRING_POINTER (value), \"ilink\"))\n-\t    fn_type = ARC_FUNCTION_ILINK1;\n-\t  else if (!strcmp (TREE_STRING_POINTER (value), \"ilink2\"))\n-\t    fn_type = ARC_FUNCTION_ILINK2;\n-\t  else if (!strcmp (TREE_STRING_POINTER (value), \"firq\"))\n-\t    fn_type = ARC_FUNCTION_FIRQ;\n-\t  else\n-\t    gcc_unreachable ();\n-\t  break;\n-\t}\n+  attr = lookup_attribute (\"interrupt\", DECL_ATTRIBUTES (decl));\n+  if (attr != NULL_TREE)\n+    {\n+      tree value, args = TREE_VALUE (attr);\n+\n+      gcc_assert (list_length (args) == 1);\n+      value = TREE_VALUE (args);\n+      gcc_assert (TREE_CODE (value) == STRING_CST);\n+\n+      if (!strcmp (TREE_STRING_POINTER (value), \"ilink1\")\n+\t  || !strcmp (TREE_STRING_POINTER (value), \"ilink\"))\n+\tfn_type |= ARC_FUNCTION_ILINK1;\n+      else if (!strcmp (TREE_STRING_POINTER (value), \"ilink2\"))\n+\tfn_type |= ARC_FUNCTION_ILINK2;\n+      else if (!strcmp (TREE_STRING_POINTER (value), \"firq\"))\n+\tfn_type |= ARC_FUNCTION_FIRQ;\n+      else\n+\tgcc_unreachable ();\n     }\n \n   return fun->machine->fn_type = fn_type;\n@@ -2433,7 +2476,7 @@ arc_compute_function_type (struct function *fun)\n static bool\n arc_must_save_register (int regno, struct function *func)\n {\n-  enum arc_function_type fn_type = arc_compute_function_type (func);\n+  unsigned int fn_type = arc_compute_function_type (func);\n   bool irq_auto_save_p = ((irq_ctrl_saved.irq_save_last_reg >= regno)\n \t\t\t  && ARC_AUTO_IRQ_P (fn_type));\n   bool firq_auto_save_p = ARC_FAST_INTERRUPT_P (fn_type);\n@@ -2878,7 +2921,11 @@ arc_expand_prologue (void)\n      Change the stack layout so that we rather store a high register with the\n      PRE_MODIFY, thus enabling more short insn generation.)  */\n   int first_offset = 0;\n-  enum arc_function_type fn_type = arc_compute_function_type (cfun);\n+  unsigned int fn_type = arc_compute_function_type (cfun);\n+\n+  /* Naked functions don't have prologue.  */\n+  if (ARC_NAKED_P (fn_type))\n+    return;\n \n   size = ARC_STACK_ALIGN (size);\n \n@@ -2989,7 +3036,7 @@ void\n arc_expand_epilogue (int sibcall_p)\n {\n   int size = get_frame_size ();\n-  enum arc_function_type fn_type = arc_compute_function_type (cfun);\n+  unsigned int fn_type = arc_compute_function_type (cfun);\n \n   size = ARC_STACK_ALIGN (size);\n   size = (!cfun->machine->frame_info.initialized\n@@ -3005,6 +3052,10 @@ arc_expand_epilogue (int sibcall_p)\n   int millicode_p = cfun->machine->frame_info.millicode_end_reg > 0;\n   rtx insn;\n \n+  /* Naked functions don't have epilogue.  */\n+  if (ARC_NAKED_P (fn_type))\n+    return;\n+\n   size_to_deallocate = size;\n \n   frame_size = size - (pretend_size +\n@@ -9788,37 +9839,60 @@ arc_can_follow_jump (const rtx_insn *follower, const rtx_insn *followee)\n   return true;\n }\n \n-int arc_return_address_regs[5] =\n-  {0, RETURN_ADDR_REGNUM, ILINK1_REGNUM, ILINK2_REGNUM, ILINK1_REGNUM};\n+/* Return the register number of the register holding the return address\n+   for a function of type TYPE.  */\n+\n+int\n+arc_return_address_register (unsigned int fn_type)\n+{\n+  int regno = 0;\n+\n+  if (ARC_INTERRUPT_P (fn_type))\n+    {\n+      if (((fn_type & ARC_FUNCTION_ILINK1) | ARC_FUNCTION_FIRQ) != 0)\n+        regno = ILINK1_REGNUM;\n+      else if ((fn_type & ARC_FUNCTION_ILINK2) != 0)\n+        regno = ILINK2_REGNUM;\n+      else\n+        gcc_unreachable ();\n+    }\n+  else if (ARC_NORMAL_P (fn_type) || ARC_NAKED_P (fn_type))\n+    regno = RETURN_ADDR_REGNUM;\n+\n+  gcc_assert (regno != 0);\n+  return regno;\n+}\n \n-/* Implement EPILOGUE__USES.\n+/* Implement EPILOGUE_USES.\n    Return true if REGNO should be added to the deemed uses of the epilogue.\n \n-   We use the return address\n-   arc_return_address_regs[arc_compute_function_type (cfun)].  But\n-   also, we have to make sure all the register restore instructions\n-   are known to be live in interrupt functions, plus the blink\n-   register if it is clobbered by the isr.  */\n+   We have to make sure all the register restore instructions are\n+   known to be live in interrupt functions, plus the blink register if\n+   it is clobbered by the isr.  */\n \n bool\n arc_epilogue_uses (int regno)\n {\n+  unsigned int fn_type;\n+\n   if (regno == arc_tp_regno)\n     return true;\n+\n+  fn_type = arc_compute_function_type (cfun);\n   if (reload_completed)\n     {\n       if (ARC_INTERRUPT_P (cfun->machine->fn_type))\n \t{\n \t  if (!fixed_regs[regno])\n \t    return true;\n-\t  return ((regno == arc_return_address_regs[cfun->machine->fn_type])\n+\t  return ((regno == arc_return_address_register (fn_type))\n \t\t  || (regno == RETURN_ADDR_REGNUM));\n \t}\n       else\n \treturn regno == RETURN_ADDR_REGNUM;\n     }\n   else\n-    return regno == arc_return_address_regs[arc_compute_function_type (cfun)];\n+    return regno == arc_return_address_register (fn_type);\n }\n \n /* Helper for EH_USES macro.  */"}, {"sha": "53aacfe5ea8799ba1112e3eccba890c422d6c26a", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1825c61e15cf34364792180ca017c998cab3fe34/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1825c61e15cf34364792180ca017c998cab3fe34/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=1825c61e15cf34364792180ca017c998cab3fe34", "patch": "@@ -1370,10 +1370,6 @@ do { \\\n #define ASM_OUTPUT_ALIGNED_DECL_LOCAL(STREAM, DECL, NAME, SIZE, ALIGNMENT) \\\n   arc_asm_output_aligned_decl_local (STREAM, DECL, NAME, SIZE, ALIGNMENT, 0)\n \n-/* To translate the return value of arc_function_type into a register number\n-   to jump through for function return.  */\n-extern int arc_return_address_regs[5];\n-\n /* Debugging information.  */\n \n /* Generate DBX and DWARF debugging information.  */\n@@ -1506,22 +1502,38 @@ extern struct rtx_def *arc_compare_op0, *arc_compare_op1;\n \n /* ARC function types.   */\n enum arc_function_type {\n-  ARC_FUNCTION_UNKNOWN, ARC_FUNCTION_NORMAL,\n+  /* No function should have the unknown type.  This value is used to\n+   indicate the that function type has not yet been computed.  */\n+  ARC_FUNCTION_UNKNOWN  = 0,\n+\n+  /* The normal function type indicates that the function has the\n+   standard prologue and epilogue.  */\n+  ARC_FUNCTION_NORMAL  = 1 << 0,\n   /* These are interrupt handlers.  The name corresponds to the register\n      name that contains the return address.  */\n-  ARC_FUNCTION_ILINK1, ARC_FUNCTION_ILINK2,\n+  ARC_FUNCTION_ILINK1  = 1 << 1,\n+  ARC_FUNCTION_ILINK2  = 1 << 2,\n   /* Fast interrupt is only available on ARCv2 processors.  */\n-  ARC_FUNCTION_FIRQ\n+  ARC_FUNCTION_FIRQ    = 1 << 3,\n+  /* The naked function type indicates that the function does not have\n+   prologue or epilogue, and that no stack frame is available.  */\n+  ARC_FUNCTION_NAKED   = 1 << 4\n };\n-#define ARC_INTERRUPT_P(TYPE)\t\t\t\t\t\t\\\n-  (((TYPE) == ARC_FUNCTION_ILINK1) || ((TYPE) == ARC_FUNCTION_ILINK2)\t\\\n-   || ((TYPE) == ARC_FUNCTION_FIRQ))\n \n-#define ARC_FAST_INTERRUPT_P(TYPE) ((TYPE) == ARC_FUNCTION_FIRQ)\n+/* Check if a function is an interrupt function.  */\n+#define ARC_INTERRUPT_P(TYPE)\t\t\t\t\t\\\n+  (((TYPE) & (ARC_FUNCTION_ILINK1 | ARC_FUNCTION_ILINK2\t\t\\\n+\t      | ARC_FUNCTION_FIRQ)) != 0)\n+\n+/* Check if a function is a fast interrupt function.  */\n+#define ARC_FAST_INTERRUPT_P(TYPE) (((TYPE) & ARC_FUNCTION_FIRQ) != 0)\n+\n+/* Check if a function is normal, that is, has standard prologue and\n+   epilogue.  */\n+#define ARC_NORMAL_P(TYPE) (((TYPE) & ARC_FUNCTION_NORMAL) != 0)\n \n-/* Compute the type of a function from its DECL.  Needed for EPILOGUE_USES.  */\n-struct function;\n-extern enum arc_function_type arc_compute_function_type (struct function *);\n+/* Check if a function is naked.  */\n+#define ARC_NAKED_P(TYPE) (((TYPE) & ARC_FUNCTION_NAKED) != 0)\n \n /* Called by crtstuff.c to make calls to function FUNCTION that are defined in\n    SECTION_OP, and then to switch back to text section.  */"}, {"sha": "0d14085bc2b608a44eac6287e611c80dd4b4b16c", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1825c61e15cf34364792180ca017c998cab3fe34/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1825c61e15cf34364792180ca017c998cab3fe34/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=1825c61e15cf34364792180ca017c998cab3fe34", "patch": "@@ -505,8 +505,8 @@\n   (cond [(eq_attr \"in_delay_slot\" \"false\")\n \t (const_string \"no\")\n \t (match_test \"regno_clobbered_p\n-\t\t\t(arc_return_address_regs\n-\t\t\t  [arc_compute_function_type (cfun)],\n+\t\t\t(arc_return_address_register\n+\t\t\t  (arc_compute_function_type (cfun)),\n \t\t\t insn, SImode, 1)\")\n \t (const_string \"no\")]\n \t(const_string \"yes\")))\n@@ -4859,7 +4859,8 @@\n {\n   rtx reg\n     = gen_rtx_REG (Pmode,\n-\t\t   arc_return_address_regs[arc_compute_function_type (cfun)]);\n+\t\t   arc_return_address_register (arc_compute_function_type\n+\t\t\t\t\t\t(cfun)));\n \n   if (TARGET_V2\n       && ARC_INTERRUPT_P (arc_compute_function_type (cfun)))\n@@ -4908,7 +4909,8 @@\n   xop[0] = operands[0];\n   xop[1]\n     = gen_rtx_REG (Pmode,\n-\t\t   arc_return_address_regs[arc_compute_function_type (cfun)]);\n+\t\t   arc_return_address_register (arc_compute_function_type\n+\t\t\t\t\t\t(cfun)));\n \n   if (TARGET_PAD_RETURN)\n     arc_pad_return ();"}, {"sha": "5004640af8f0e8fb6ec27e7482b7b5cca9f7568b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1825c61e15cf34364792180ca017c998cab3fe34/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1825c61e15cf34364792180ca017c998cab3fe34/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1825c61e15cf34364792180ca017c998cab3fe34", "patch": "@@ -1,3 +1,9 @@\n+2017-07-17  Claudiu Zissulescu  <claziss@synopsys.com>\n+\t    Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gcc.target/arc/naked-1.c: New file.\n+\t* gcc.target/arc/naked-2.c: Likewise.\n+\n 2017-07-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/81428"}, {"sha": "e45f433f73cdf807559daee0462eacccb7ce064a", "filename": "gcc/testsuite/gcc.target/arc/naked-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1825c61e15cf34364792180ca017c998cab3fe34/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fnaked-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1825c61e15cf34364792180ca017c998cab3fe34/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fnaked-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fnaked-1.c?ref=1825c61e15cf34364792180ca017c998cab3fe34", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0\" } */\n+/* Check that naked functions don't place arguments on the stack at\n+   optimisation level '-O0'.  */\n+extern void bar (int);\n+\n+void __attribute__((naked))\n+foo (int n, int m)\n+{\n+  bar (n + m);\n+}\n+/* { dg-final { scan-assembler \"\\tbl @bar\" } } */\n+\n+/* Look for things that would appear in a non-naked function, but which\n+   should not appear in a naked function.  */\n+/* { dg-final { scan-assembler-not \"\\tj.* \\\\\\[blink\\\\\\]\" } } */\n+/* { dg-final { scan-assembler-not \"\\tst.* \" } } */\n+/* { dg-final { scan-assembler-not \"\\tmov fp,sp\" } } */"}, {"sha": "7b7262f791677e5847e73302d6ca615c477b0b8a", "filename": "gcc/testsuite/gcc.target/arc/naked-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1825c61e15cf34364792180ca017c998cab3fe34/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fnaked-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1825c61e15cf34364792180ca017c998cab3fe34/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fnaked-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fnaked-2.c?ref=1825c61e15cf34364792180ca017c998cab3fe34", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0\" } */\n+/* Check that naked functions don't place arguments on the stack at\n+   optimisation level '-O0'.  */\n+\n+#if defined(__HS__) || defined(__EM__)\n+# define ILINK \"ilink\"\n+#else\n+# define ILINK \"ilink1\"\n+#endif\n+\n+extern void bar (int);\n+\n+void __attribute__((naked, interrupt(ILINK)))\n+foo (int n, int m)\n+{\n+  bar (n + m);\n+}\n+/* { dg-final { scan-assembler \"\\tbl @bar\" } } */\n+\n+/* Look for things that would appear in a non-naked function, but which\n+   should not appear in a naked function.  */\n+/* { dg-final { scan-assembler-not \"\\trtie\" } } */\n+/* { dg-final { scan-assembler-not \"j.*\\[ilink1\\]\" } } */\n+/* { dg-final { scan-assembler-not \"\\tst.* \" } } */\n+/* { dg-final { scan-assembler-not \"\\tmov fp,sp\" } } */"}]}