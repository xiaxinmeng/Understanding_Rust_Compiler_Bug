{"sha": "b66fd4fc3777e1d072a63529b70b2ff777e6efcb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY2ZmQ0ZmMzNzc3ZTFkMDcyYTYzNTI5YjcwYjJmZjc3N2U2ZWZjYg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-21T14:52:43Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-21T14:52:43Z"}, "message": "Simplify pad_below implementation\n\nThis patch simplifies the alignment calculations in pad_below.\nThe first arm of the \"if\" was:\n\n- taking GET_MODE_BITSIZE (always equal to GET_MODE_SIZE * BITS_PER_UNIT),\n- rounding up to the next multiple of PARM_BOUNDARY\n- converting bits to bytes and\n- subtracting the GET_MODE_SIZE\n\nso was in effect calculating the number of bytes needed to round\nGET_MODE_SIZE up to (PARM_BOUNDARY / BITS_PER_UNIT).  That can be\ndone more directly as -size & (align - 1), which is easier to\nconvert to variable-sized modes.\n\n2017-08-21  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* function.c (pad_below): Simplify padding calculation.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251233", "tree": {"sha": "16ed38c19f780a1c7f311546e6eeffca79e4eac6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16ed38c19f780a1c7f311546e6eeffca79e4eac6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b66fd4fc3777e1d072a63529b70b2ff777e6efcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b66fd4fc3777e1d072a63529b70b2ff777e6efcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b66fd4fc3777e1d072a63529b70b2ff777e6efcb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b66fd4fc3777e1d072a63529b70b2ff777e6efcb/comments", "author": null, "committer": null, "parents": [{"sha": "427764163985bbfb309ee43a85605d6b32c225d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/427764163985bbfb309ee43a85605d6b32c225d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/427764163985bbfb309ee43a85605d6b32c225d5"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "26b34a363aa39817d02d129b91438cdf83b25b32", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66fd4fc3777e1d072a63529b70b2ff777e6efcb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66fd4fc3777e1d072a63529b70b2ff777e6efcb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b66fd4fc3777e1d072a63529b70b2ff777e6efcb", "patch": "@@ -1,3 +1,9 @@\n+2017-08-21  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* function.c (pad_below): Simplify padding calculation.\n+\n 2017-08-21  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "7fce0c530b8ff91986aafca7822bd1fa842ac2b7", "filename": "gcc/function.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66fd4fc3777e1d072a63529b70b2ff777e6efcb/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66fd4fc3777e1d072a63529b70b2ff777e6efcb/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=b66fd4fc3777e1d072a63529b70b2ff777e6efcb", "patch": "@@ -4322,21 +4322,16 @@ pad_to_arg_alignment (struct args_size *offset_ptr, int boundary,\n static void\n pad_below (struct args_size *offset_ptr, machine_mode passed_mode, tree sizetree)\n {\n+  unsigned int align = PARM_BOUNDARY / BITS_PER_UNIT;\n   if (passed_mode != BLKmode)\n-    {\n-      if (GET_MODE_BITSIZE (passed_mode) % PARM_BOUNDARY)\n-\toffset_ptr->constant\n-\t  += (((GET_MODE_BITSIZE (passed_mode) + PARM_BOUNDARY - 1)\n-\t       / PARM_BOUNDARY * PARM_BOUNDARY / BITS_PER_UNIT)\n-\t      - GET_MODE_SIZE (passed_mode));\n-    }\n+    offset_ptr->constant += -GET_MODE_SIZE (passed_mode) & (align - 1);\n   else\n     {\n       if (TREE_CODE (sizetree) != INTEGER_CST\n-\t  || (TREE_INT_CST_LOW (sizetree) * BITS_PER_UNIT) % PARM_BOUNDARY)\n+\t  || (TREE_INT_CST_LOW (sizetree) & (align - 1)) != 0)\n \t{\n \t  /* Round the size up to multiple of PARM_BOUNDARY bits.  */\n-\t  tree s2 = round_up (sizetree, PARM_BOUNDARY / BITS_PER_UNIT);\n+\t  tree s2 = round_up (sizetree, align);\n \t  /* Add it in.  */\n \t  ADD_PARM_SIZE (*offset_ptr, s2);\n \t  SUB_PARM_SIZE (*offset_ptr, sizetree);"}]}