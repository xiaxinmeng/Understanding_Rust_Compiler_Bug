{"sha": "96854fe254e5d4758bab1bd3f6a3b68b6c8ff616", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY4NTRmZTI1NGU1ZDQ3NThiYWIxYmQzZjZhM2I2OGI2YzhmZjYxNg==", "commit": {"author": {"name": "Scott Snyder", "email": "snyder@fnal.gov", "date": "2002-03-09T02:01:34Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-03-09T02:01:34Z"}, "message": "locale_facets.tcc (num_put::_M_convert_float): Allow one more digit of precision.\n\n\n2002-03-08  scott snyder  <snyder@fnal.gov>\n\n\tlibstdc++/5875\n\t* include/bits/locale_facets.tcc (num_put::_M_convert_float):\n\tAllow one more digit of precision.\n\t* testsuite/27_io/ostream_inserter_arith.cc: Test that we can\n\twrite a double and read back in the same value.\n\nFrom-SVN: r50470", "tree": {"sha": "2776f7a9be6f9f84b9e2b17edbefe0efdfa9d447", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2776f7a9be6f9f84b9e2b17edbefe0efdfa9d447"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96854fe254e5d4758bab1bd3f6a3b68b6c8ff616", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96854fe254e5d4758bab1bd3f6a3b68b6c8ff616", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96854fe254e5d4758bab1bd3f6a3b68b6c8ff616", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96854fe254e5d4758bab1bd3f6a3b68b6c8ff616/comments", "author": null, "committer": null, "parents": [{"sha": "3070dd00e9eb9530a18a340a0fbfddd8492f5020", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3070dd00e9eb9530a18a340a0fbfddd8492f5020", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3070dd00e9eb9530a18a340a0fbfddd8492f5020"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "3c8fea13024ca501b15a34b108f29143091580a3", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96854fe254e5d4758bab1bd3f6a3b68b6c8ff616/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96854fe254e5d4758bab1bd3f6a3b68b6c8ff616/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=96854fe254e5d4758bab1bd3f6a3b68b6c8ff616", "patch": "@@ -609,7 +609,9 @@ namespace std\n       _M_convert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,\n \t\t       _ValueT __v) const\n       {\n-\tconst int __max_digits = numeric_limits<_ValueT>::digits10;\n+\t// Note: digits10 is rounded down.  We need to add 1 to ensure\n+\t// we get the full available precision.\n+\tconst int __max_digits = numeric_limits<_ValueT>::digits10 + 1;\n \tstreamsize __prec = __io.precision();\n \t// Protect against sprintf() buffer overflows.\n \tif (__prec > static_cast<streamsize>(__max_digits))"}, {"sha": "041f3149011fdf58be3941b13a6e0a063277f2f6", "filename": "libstdc++-v3/testsuite/27_io/ostream_inserter_arith.cc", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96854fe254e5d4758bab1bd3f6a3b68b6c8ff616/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96854fe254e5d4758bab1bd3f6a3b68b6c8ff616/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc?ref=96854fe254e5d4758bab1bd3f6a3b68b6c8ff616", "patch": "@@ -1,7 +1,7 @@\n // 1999-11-15 Kevin Ediger  <kediger@licor.com>\n // test the floating point inserters (facet num_put)\n \n-// Copyright (C) 1999 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,6 +20,8 @@\n // USA.\n \n #include <cstdio> // for sprintf\n+#include <cmath> // for abs\n+#include <cfloat> // for DBL_EPSILON\n #include <iostream>\n #include <iomanip>\n #include <locale>\n@@ -355,13 +357,29 @@ test04()\n   return 0;\n }\n \n+int\n+test05()\n+{\n+  double pi = 3.14159265358979323846;\n+  ostringstream ostr;\n+  ostr.precision(20);\n+  ostr << pi;\n+  string sval = ostr.str();\n+  istringstream istr (sval);\n+  double d;\n+  istr >> d;\n+  VERIFY (abs(pi-d)/pi < DBL_EPSILON);\n+  return 0;\n+}\n+\n int \n main()\n {\n   test01();\n   test02();\n   test03();\n   test04();\n+  test05();\n #ifdef TEST_NUMPUT_VERBOSE\n   cout << \"Test passed!\" << endl;\n #endif"}]}