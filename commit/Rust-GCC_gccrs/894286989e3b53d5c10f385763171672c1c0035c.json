{"sha": "894286989e3b53d5c10f385763171672c1c0035c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk0Mjg2OTg5ZTNiNTNkNWMxMGYzODU3NjMxNzE2NzJjMWMwMDM1Yw==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2002-02-14T23:16:11Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2002-02-14T23:16:11Z"}, "message": "[multiple changes]\n\n2002-02-14  Mark Wielaard  <mark@klomp.org>\n\n    * java/math/BigInteger.java: import gnu.java.math.MPN not the whole\n    package as a workaround for gcj 3.0.x\n\n2002-02-14  Mark Wielaard <mark@klomp.org>\n\n    * java/security/BasicPermission.java: extends with fully qualified\n    classname as workaround for gcj 3.0.4.\n\n2002-02-14  Eric Blake  <ebb9@email.byu.edu>\n\n    * java/net/DatagramSocketImpl.java (setOption, getOption): Work\n    around gcj bug of wrong emitted qualifier for inherited method.\n    * java/net/SocketImpl.java (setOption, getOption): Ditto.\n    * java/util/WeakHashMap.java (WeakEntrySet): Add non-private\n    constructor to reduce amount of emitted bytecode. While this\n    happens to work around a jikes 1.15 bug, it is still a useful\n    patch even for correct compilers.\n    * java/rmi/server/RMIClassLoader.java (MyClassLoader): Ditto.\n    * gnu/java/rmi/server/UnicastRemoteCall.java\n    (DummyObjectOutputStream, DummyObjectInputStream): Ditto.\n\n2002-02-14  Eric Blake  <ebb9@email.byu.edu>\n\n    * java/net/DatagramSocketImpl.java: Reformat (no code changes).\n    * java/net/SocketImpl.java: Ditto.\n    * java/rmi/server/RMIClassLoader.java: Ditto.\n    * gnu/java/rmi/server/UnicastRemoteCall.java: Ditto.\n\n2002-02-14  Mark Wielaard <mark@klomp.org>\n\n    Thanks to Takashi Okamoto\n    * java/util/Arrays.java (ArrayList.indexOf()): this.equals().\n    * java/util/Arrays.java (ArrayList.lastIndexOf()): Likewise.\n    * java/util/WeakHashMap.java (WeakEntry.getEntry()): this.get().\n\nFrom-SVN: r49778", "tree": {"sha": "2b8e89cbcec8051aec3a4bab7d43c0c0d2c02ffe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b8e89cbcec8051aec3a4bab7d43c0c0d2c02ffe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/894286989e3b53d5c10f385763171672c1c0035c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/894286989e3b53d5c10f385763171672c1c0035c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/894286989e3b53d5c10f385763171672c1c0035c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/894286989e3b53d5c10f385763171672c1c0035c/comments", "author": null, "committer": null, "parents": [{"sha": "9a360704f9edf14fd0dd3a04dcf16923164c09b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a360704f9edf14fd0dd3a04dcf16923164c09b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a360704f9edf14fd0dd3a04dcf16923164c09b2"}], "stats": {"total": 962, "additions": 577, "deletions": 385}, "files": [{"sha": "3a63171c188a94f5b28d72ed14cf2f1206c3f33e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894286989e3b53d5c10f385763171672c1c0035c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894286989e3b53d5c10f385763171672c1c0035c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=894286989e3b53d5c10f385763171672c1c0035c", "patch": "@@ -1,3 +1,40 @@\n+2002-02-14  Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/math/BigInteger.java: import gnu.java.math.MPN not the whole\n+\tpackage as a workaround for gcj 3.0.x\n+\n+2002-02-14  Mark Wielaard <mark@klomp.org>\n+\n+\t* java/security/BasicPermission.java: extends with fully qualified\n+\tclassname as workaround for gcj 3.0.4.\n+\n+2002-02-14  Eric Blake  <ebb9@email.byu.edu>\n+\n+\t* java/net/DatagramSocketImpl.java (setOption, getOption): Work\n+\taround gcj bug of wrong emitted qualifier for inherited method.\n+\t* java/net/SocketImpl.java (setOption, getOption): Ditto.\n+\t* java/util/WeakHashMap.java (WeakEntrySet): Add non-private\n+\tconstructor to reduce amount of emitted bytecode. While this\n+\thappens to work around a jikes 1.15 bug, it is still a useful\n+\tpatch even for correct compilers.\n+\t* java/rmi/server/RMIClassLoader.java (MyClassLoader): Ditto.\n+\t* gnu/java/rmi/server/UnicastRemoteCall.java\n+\t(DummyObjectOutputStream, DummyObjectInputStream): Ditto.\n+\n+2002-02-14  Eric Blake  <ebb9@email.byu.edu>\n+\n+\t* java/net/DatagramSocketImpl.java: Reformat (no code changes).\n+\t* java/net/SocketImpl.java: Ditto.\n+\t* java/rmi/server/RMIClassLoader.java: Ditto.\n+\t* gnu/java/rmi/server/UnicastRemoteCall.java: Ditto.\n+\n+2002-02-14  Mark Wielaard <mark@klomp.org>\n+\n+\tThanks to Takashi Okamoto\n+\t* java/util/Arrays.java (ArrayList.indexOf()): this.equals().\n+\t* java/util/Arrays.java (ArrayList.lastIndexOf()): Likewise.\n+\t* java/util/WeakHashMap.java (WeakEntry.getEntry()): this.get().\n+\n 2002-02-13  Todd Stock  <toddastock@yahoo.com>\n \n \tFix for PR libgcj/5670:"}, {"sha": "200538d4ae8d1163686d9230a796d5eed7126084", "filename": "libjava/gnu/java/rmi/server/UnicastRemoteCall.java", "status": "modified", "additions": 329, "deletions": 265, "changes": 594, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894286989e3b53d5c10f385763171672c1c0035c/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastRemoteCall.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894286989e3b53d5c10f385763171672c1c0035c/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastRemoteCall.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastRemoteCall.java?ref=894286989e3b53d5c10f385763171672c1c0035c", "patch": "@@ -1,13 +1,13 @@\n-/*\n-  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* UnicastRemoteCall.java\n+  Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -45,267 +45,331 @@\n import java.rmi.server.RemoteCall;\n import java.util.Vector;\n \n-public class UnicastRemoteCall\n-\timplements RemoteCall {\n-\n-private UnicastConnection conn;\n-private Object result;\n-private Object object;\n-private int opnum;\n-private long hash;\n-private Vector vec;\n-private int ptr;\n-\n-/**\n- * Incoming call.\n- */\n-UnicastRemoteCall(UnicastConnection conn) {\n-\tthis.conn = conn;\n-}\n-\n-/**\n- * Outgoing call.\n- */\n-UnicastRemoteCall(Object obj, int opnum, long hash) {\n-\tthis.object = obj;\n-\tthis.opnum = opnum;\n-\tthis.hash = hash;\n-}\n-\n-public ObjectOutput getOutputStream() throws IOException {\n-\tvec = new Vector();\n-\treturn (new DummyObjectOutputStream());\n-}\n-\n-public void releaseOutputStream() throws IOException {\n-\t// Does nothing.\n-}\n-\n-public ObjectInput getInputStream() throws IOException {\n-\tif (conn != null) {\n-\t\treturn (conn.getObjectInputStream());\n-\t}\n-\telse {\n-\t\tptr = 0;\n-\t\treturn (new DummyObjectInputStream());\n-\t}\n-}\n-\n-public void releaseInputStream() throws IOException {\n-\t// Does nothing.\n-}\n-\n-public ObjectOutput getResultStream(boolean success) throws IOException, StreamCorruptedException {\n-\tvec = new Vector();\n-\treturn (new DummyObjectOutputStream());\n-}\n-\n-public void executeCall() throws Exception {\n-\tthrow new Error(\"Not implemented\");\n-}\n-\n-public void done() throws IOException {\n-\t/* Does nothing */\n-}\n-\n-Object returnValue() {\n-\treturn (vec.elementAt(0));\n-}\n-\n-Object[] getArguments() {\n-\treturn (vec.toArray());\n-}\n-\n-Object getObject() {\n-\treturn (object);\n-}\n-\n-int getOpnum() {\n-\treturn (opnum);\n-}\n-\n-long getHash() {\n-\treturn (hash);\n-}\n-\n-void setReturnValue(Object obj) {\n-\tvec.removeAllElements();\n-\tvec.addElement(obj);\n-}\n-\n-/**\n- * Dummy object output class.\n- */\n-private class DummyObjectOutputStream implements ObjectOutput {\n-\n-public void writeBoolean(boolean v) throws IOException {\n-\tvec.addElement(new Boolean(v));\n-}\n-\n-public void writeByte(int v) throws IOException {\n-\tvec.addElement(new Byte((byte)v));\n-}\n-\n-public void writeChar(int v) throws IOException {\n-\tvec.addElement(new Character((char)v));\n-}\n-\n-public void writeDouble(double v) throws IOException {\n-\tvec.addElement(new Double(v));\n-}\n-\n-public void writeFloat(float v) throws IOException {\n-\tvec.addElement(new Float(v));\n-}\n-\n-public void writeInt(int v) throws IOException {\n-\tvec.addElement(new Integer(v));\n-}\n-\n-public void writeLong(long v) throws IOException {\n-\tvec.addElement(new Long(v));\n-}\n-\n-public void writeShort(int v) throws IOException {\n-\tvec.addElement(new Short((short)v));\n-}\n-\n-public void writeObject(Object obj) throws IOException {\n-\tvec.addElement(obj);\n-}\n-\n-public void write(byte b[]) throws IOException {\n-\tthrow new IOException(\"not required\");\n-}\n-\n-public void write(byte b[], int off, int len) throws IOException {\n-\tthrow new IOException(\"not required\");\n-}\n-\n-public void write(int b) throws IOException {\n-\tthrow new IOException(\"not required\");\n-}\n-\n-public void writeBytes(String s) throws IOException {\n-\tthrow new IOException(\"not required\");\n-}\n-\n-public void writeChars(String s) throws IOException {\n-\tthrow new IOException(\"not required\");\n-}\n-\n-public void writeUTF(String str) throws IOException {\n-\tthrow new IOException(\"not required\");\n-}\n-\n-public void flush() throws IOException {\n-}\n-\n-public void close() throws IOException {\n-}\n-\n-}\n-\n-/**\n- * Dummy object input class.\n- */\n-private class DummyObjectInputStream implements ObjectInput {\n-\n-public boolean readBoolean() throws IOException {\n-\tObject obj = vec.elementAt(ptr++);\n-\treturn (((Boolean)obj).booleanValue());\n-}\n-\n-public byte readByte() throws IOException {\n-\tObject obj = vec.elementAt(ptr++);\n-\treturn (((Byte)obj).byteValue());\n-}\n-\n-public char readChar() throws IOException {\n-\tObject obj = vec.elementAt(ptr++);\n-\treturn (((Character)obj).charValue());\n-}\n-\n-public double readDouble() throws IOException {\n-\tObject obj = vec.elementAt(ptr++);\n-\treturn (((Double)obj).doubleValue());\n-}\n-\n-public float readFloat() throws IOException {\n-\tObject obj = vec.elementAt(ptr++);\n-\treturn (((Float)obj).floatValue());\n-}\n-\n-public int readInt() throws IOException {\n-\tObject obj = vec.elementAt(ptr++);\n-\treturn (((Integer)obj).intValue());\n-}\n-\n-public long readLong() throws IOException {\n-\tObject obj = vec.elementAt(ptr++);\n-\treturn (((Long)obj).longValue());\n-}\n-\n-public short readShort() throws IOException {\n-\tObject obj = vec.elementAt(ptr++);\n-\treturn (((Short)obj).shortValue());\n-}\n-\n-public Object readObject() throws IOException {\n-\treturn (vec.elementAt(ptr++));\n-}\n-\n-public int read(byte b[]) throws IOException {\n-\tthrow new IOException(\"not required\");\n-}\n-\n-public int read(byte b[], int off, int len) throws IOException {\n-\tthrow new IOException(\"not required\");\n-}\n-\n-public int read() throws IOException {\n-\tthrow new IOException(\"not required\");\n-}\n-\n-public long skip(long n) throws IOException {\n-\tthrow new IOException(\"not required\");\n-}\n-\n-public int available() throws IOException {\n-\tthrow new IOException(\"not required\");\n-}\n-\n-public void readFully(byte b[]) throws IOException {\n-\tthrow new IOException(\"not required\");\n-}\n-\n-public void readFully(byte b[], int off, int len) throws IOException {\n-\tthrow new IOException(\"not required\");\n-}\n-\n-public String readLine() throws IOException {\n-\tthrow new IOException(\"not required\");\n-}\n-\n-public String readUTF() throws IOException {\n-\tthrow new IOException(\"not required\");\n-}\n-\n-public int readUnsignedByte() throws IOException {\n-\tthrow new IOException(\"not required\");\n-}\n-\n-public int readUnsignedShort() throws IOException {\n-\tthrow new IOException(\"not required\");\n-}\n-\n-public int skipBytes(int n) throws IOException {\n-\tthrow new IOException(\"not required\");\n-}\n-\n-public void close() throws IOException {\n-}\n-\n-}\n+public class UnicastRemoteCall implements RemoteCall\n+{\n+\n+  private UnicastConnection conn;\n+  private Object result;\n+  private Object object;\n+  private int opnum;\n+  private long hash;\n+  private Vector vec;\n+  private int ptr;\n+\n+  /**\n+   * Incoming call.\n+   */\n+  UnicastRemoteCall(UnicastConnection conn)\n+  {\n+    this.conn = conn;\n+  }\n+\n+  /**\n+   * Outgoing call.\n+   */\n+  UnicastRemoteCall(Object obj, int opnum, long hash)\n+  {\n+    this.object = obj;\n+    this.opnum = opnum;\n+    this.hash = hash;\n+  }\n+\n+  public ObjectOutput getOutputStream() throws IOException\n+  {\n+    vec = new Vector();\n+    return new DummyObjectOutputStream();\n+  }\n+\n+  public void releaseOutputStream() throws IOException\n+  {\n+    // Does nothing.\n+  }\n+\n+  public ObjectInput getInputStream() throws IOException\n+  {\n+    if (conn != null)\n+      return conn.getObjectInputStream();\n+    ptr = 0;\n+    return new DummyObjectInputStream();\n+  }\n+\n+  public void releaseInputStream() throws IOException\n+  {\n+    // Does nothing.\n+  }\n+\n+  public ObjectOutput getResultStream(boolean success)\n+    throws IOException, StreamCorruptedException\n+  {\n+    vec = new Vector();\n+    return new DummyObjectOutputStream();\n+  }\n+\n+  public void executeCall() throws Exception\n+  {\n+    throw new Error(\"Not implemented\");\n+  }\n+\n+  public void done() throws IOException\n+  {\n+    /* Does nothing */\n+  }\n+\n+  Object returnValue()\n+  {\n+    return vec.elementAt(0);\n+  }\n+\n+  Object[] getArguments()\n+  {\n+    return vec.toArray();\n+  }\n+\n+  Object getObject()\n+  {\n+    return object;\n+  }\n+\n+  int getOpnum()\n+  {\n+    return opnum;\n+  }\n+\n+  long getHash()\n+  {\n+    return hash;\n+  }\n+\n+  void setReturnValue(Object obj)\n+  {\n+    vec.removeAllElements();\n+    vec.addElement(obj);\n+  }\n+\n+  /**\n+   * Dummy object output class.\n+   */\n+  private class DummyObjectOutputStream implements ObjectOutput\n+  {\n+    /**\n+     * Non-private constructor to reduce bytecode emitted.\n+     */\n+    DummyObjectOutputStream()\n+    {\n+    }\n+\n+    public void writeBoolean(boolean v) throws IOException\n+    {\n+      vec.addElement(new Boolean(v));\n+    }\n+\n+    public void writeByte(int v) throws IOException\n+    {\n+      vec.addElement(new Byte((byte) v));\n+    }\n+\n+    public void writeChar(int v) throws IOException\n+    {\n+      vec.addElement(new Character((char) v));\n+    }\n+\n+    public void writeDouble(double v) throws IOException\n+    {\n+      vec.addElement(new Double(v));\n+    }\n+\n+    public void writeFloat(float v) throws IOException\n+    {\n+      vec.addElement(new Float(v));\n+    }\n+\n+    public void writeInt(int v) throws IOException\n+    {\n+      vec.addElement(new Integer(v));\n+    }\n+\n+    public void writeLong(long v) throws IOException\n+    {\n+      vec.addElement(new Long(v));\n+    }\n+\n+    public void writeShort(int v) throws IOException\n+    {\n+      vec.addElement(new Short((short) v));\n+    }\n+\n+    public void writeObject(Object obj) throws IOException\n+    {\n+      vec.addElement(obj);\n+    }\n+\n+    public void write(byte b[]) throws IOException\n+    {\n+      throw new IOException(\"not required\");\n+    }\n+\n+    public void write(byte b[], int off, int len) throws IOException\n+    {\n+      throw new IOException(\"not required\");\n+    }\n+\n+    public void write(int b) throws IOException\n+    {\n+      throw new IOException(\"not required\");\n+    }\n+\n+    public void writeBytes(String s) throws IOException\n+    {\n+      throw new IOException(\"not required\");\n+    }\n+\n+    public void writeChars(String s) throws IOException\n+    {\n+      throw new IOException(\"not required\");\n+    }\n+\n+    public void writeUTF(String str) throws IOException\n+    {\n+      throw new IOException(\"not required\");\n+    }\n+\n+    public void flush() throws IOException\n+    {\n+    }\n+\n+    public void close() throws IOException\n+    {\n+    }\n+  } // class DummyObjectOutputStream\n+\n+  /**\n+   * Dummy object input class.\n+   */\n+  private class DummyObjectInputStream implements ObjectInput\n+  {\n+    /**\n+     * Non-private constructor to reduce bytecode emitted.\n+     */\n+    DummyObjectInputStream()\n+    {\n+    }\n+\n+    public boolean readBoolean() throws IOException\n+    {\n+      Object obj = vec.elementAt(ptr++);\n+      return ((Boolean) obj).booleanValue();\n+    }\n+\n+    public byte readByte() throws IOException\n+    {\n+      Object obj = vec.elementAt(ptr++);\n+      return ((Byte) obj).byteValue();\n+    }\n+\n+    public char readChar() throws IOException\n+    {\n+      Object obj = vec.elementAt(ptr++);\n+      return ((Character) obj).charValue();\n+    }\n+\n+    public double readDouble() throws IOException\n+    {\n+      Object obj = vec.elementAt(ptr++);\n+      return ((Double) obj).doubleValue();\n+    }\n+\n+    public float readFloat() throws IOException\n+    {\n+      Object obj = vec.elementAt(ptr++);\n+      return ((Float) obj).floatValue();\n+    }\n+\n+    public int readInt() throws IOException\n+    {\n+      Object obj = vec.elementAt(ptr++);\n+      return ((Integer) obj).intValue();\n+    }\n+\n+    public long readLong() throws IOException\n+    {\n+      Object obj = vec.elementAt(ptr++);\n+      return ((Long) obj).longValue();\n+    }\n+\n+    public short readShort() throws IOException\n+    {\n+      Object obj = vec.elementAt(ptr++);\n+      return ((Short) obj).shortValue();\n+    }\n+\n+    public Object readObject() throws IOException\n+    {\n+      return vec.elementAt(ptr++);\n+    }\n+\n+    public int read(byte b[]) throws IOException\n+    {\n+      throw new IOException(\"not required\");\n+    }\n+\n+    public int read(byte b[], int off, int len) throws IOException\n+    {\n+      throw new IOException(\"not required\");\n+    }\n+\n+    public int read() throws IOException\n+    {\n+      throw new IOException(\"not required\");\n+    }\n+\n+    public long skip(long n) throws IOException\n+    {\n+      throw new IOException(\"not required\");\n+    }\n+\n+    public int available() throws IOException\n+    {\n+      throw new IOException(\"not required\");\n+    }\n+\n+    public void readFully(byte b[]) throws IOException\n+    {\n+      throw new IOException(\"not required\");\n+    }\n+\n+    public void readFully(byte b[], int off, int len) throws IOException\n+    {\n+      throw new IOException(\"not required\");\n+    }\n+\n+    public String readLine() throws IOException\n+    {\n+      throw new IOException(\"not required\");\n+    }\n+\n+    public String readUTF() throws IOException\n+    {\n+      throw new IOException(\"not required\");\n+    }\n+\n+    public int readUnsignedByte() throws IOException\n+    {\n+      throw new IOException(\"not required\");\n+    }\n+\n+    public int readUnsignedShort() throws IOException\n+    {\n+      throw new IOException(\"not required\");\n+    }\n+\n+    public int skipBytes(int n) throws IOException\n+    {\n+      throw new IOException(\"not required\");\n+    }\n+\n+    public void close() throws IOException\n+    {\n+    }\n+  } // class DummyObjectInputStream\n \n }"}, {"sha": "e8c6b1dfdc97fbd45da2c01e87083498291b818b", "filename": "libjava/java/math/BigInteger.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894286989e3b53d5c10f385763171672c1c0035c/libjava%2Fjava%2Fmath%2FBigInteger.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894286989e3b53d5c10f385763171672c1c0035c/libjava%2Fjava%2Fmath%2FBigInteger.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fmath%2FBigInteger.java?ref=894286989e3b53d5c10f385763171672c1c0035c", "patch": "@@ -37,7 +37,7 @@\n \n package java.math;\n \n-import gnu.java.math.*;\n+import gnu.java.math.MPN;\n import java.util.Random;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;"}, {"sha": "df6e1ecbf464607070636c8b11f795e08982d745", "filename": "libjava/java/net/DatagramSocketImpl.java", "status": "modified", "additions": 41, "deletions": 11, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894286989e3b53d5c10f385763171672c1c0035c/libjava%2Fjava%2Fnet%2FDatagramSocketImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894286989e3b53d5c10f385763171672c1c0035c/libjava%2Fjava%2Fnet%2FDatagramSocketImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramSocketImpl.java?ref=894286989e3b53d5c10f385763171672c1c0035c", "patch": "@@ -1,13 +1,13 @@\n /* DatagramSocketImpl.java -- Abstract class for UDP socket implementations\n-   Copyright (C) 1998, 1999 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -45,10 +45,8 @@\n  * Written using on-line Java Platform 1.2 API Specification, as well\n  * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n  * Status:  Believed complete and correct.\n- */\n-\n-/**\n- * This abstract class models a datagram socket implementation.  An\n+ *\n+ * <p>This abstract class models a datagram socket implementation.  An\n  * actual implementation class would implement these methods, probably\n  * via redirecting them to native code.\n  *\n@@ -64,7 +62,7 @@ public abstract class DatagramSocketImpl implements SocketOptions\n   protected int localPort;\n \n   /**\n-   * The FileDescriptor object for this object. \n+   * The FileDescriptor object for this object.\n    */\n   protected FileDescriptor fd;\n \n@@ -84,7 +82,7 @@ public DatagramSocketImpl()\n    * @exception SocketException If an error occurs\n    */\n   protected abstract void bind(int lport, InetAddress laddr)\n-  \tthrows SocketException;\n+    throws SocketException;\n \n   /**\n    * This methods closes the socket\n@@ -123,7 +121,7 @@ protected abstract void bind(int lport, InetAddress laddr)\n \n   /**\n    * Receives a packet of data from the network  Will block until a packet\n-   * arrives.  The packet info in populated into the passed in \n+   * arrives.  The packet info in populated into the passed in\n    * DatagramPacket object.\n    *\n    * @param p A place to store the incoming packet.\n@@ -152,7 +150,7 @@ protected abstract void bind(int lport, InetAddress laddr)\n    */\n   protected abstract byte getTTL() throws IOException;\n \n- /**\n+  /**\n    * Sets the Time to Live (TTL) setting on this socket to the specified\n    * value.\n    *\n@@ -179,7 +177,7 @@ protected abstract void bind(int lport, InetAddress laddr)\n    */\n   protected abstract void join(InetAddress inetaddr) throws IOException;\n \n- /**\n+  /**\n    * Causes the socket to leave the specified multicast group.\n    *\n    * @param inetaddr The multicast address to leave\n@@ -203,4 +201,36 @@ protected int getLocalPort()\n   {\n     return localPort;\n   }\n+\n+  /**\n+   * Sets the specified option on a socket to the passed in object.  For\n+   * options that take an integer argument, the passed in object is an\n+   * <code>Integer</code>.  For options that are set to on or off, the\n+   * value passed will be a <code>Boolean</code>.   The <code>option_id</code> \n+   * parameter is one of the defined constants in the superinterface.\n+   *\n+   * @param option_id The identifier of the option\n+   * @param val The value to set the option to\n+   *\n+   * @exception SocketException If an error occurs\n+   * @XXX This redeclaration from SocketOptions is a workaround to a gcj bug.\n+   */\n+  public abstract void setOption(int option_id, Object val)\n+    throws SocketException;\n+\n+  /**\n+   * Returns the current setting of the specified option.  The \n+   * <code>Object</code> returned will be an <code>Integer</code> for options \n+   * that have integer values.  For options that are set to on or off, a \n+   * <code>Boolean</code> will be returned.   The <code>option_id</code>\n+   * is one of the defined constants in the superinterface.\n+   *\n+   * @param option_id The option identifier\n+   *\n+   * @return The current value of the option\n+   *\n+   * @exception SocketException If an error occurs\n+   * @XXX This redeclaration from SocketOptions is a workaround to a gcj bug.\n+   */\n+  public abstract Object getOption(int option_id) throws SocketException;\n }"}, {"sha": "fb5a60ca52098b5474ad72b096b95dd7cf1b2f36", "filename": "libjava/java/net/SocketImpl.java", "status": "modified", "additions": 74, "deletions": 44, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894286989e3b53d5c10f385763171672c1c0035c/libjava%2Fjava%2Fnet%2FSocketImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894286989e3b53d5c10f385763171672c1c0035c/libjava%2Fjava%2Fnet%2FSocketImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocketImpl.java?ref=894286989e3b53d5c10f385763171672c1c0035c", "patch": "@@ -1,13 +1,13 @@\n /* SocketImpl.java -- Abstract socket implementation class\n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -39,37 +39,35 @@\n \n import java.io.*;\n \n- /* Written using on-line Java Platform 1.2 API Specification.\n-  * Believed complete and correct.\n-  */\n+/* Written using on-line Java Platform 1.2 API Specification.\n+ * Believed complete and correct.\n+ */\n \n-  /**\n-   * This abstract class serves as the parent class for socket implementations.\n-   * The implementation class serves an intermediary to native routines that\n-   * perform system specific socket operations.\n-   * <p>\n-   * A default implementation is provided by the system, but this can be\n-   * changed via installing a <code>SocketImplFactory</code> (through a call \n-   * to the static method <code>Socket.setSocketImplFactory</code>).  A \n-   * subclass of <code>Socket</code> can also pass in a <code>SocketImpl</code>\n-   * to the <code>Socket(SocketImpl)</code> constructor to use an \n-   * implementation different from the system default without installing\n-   * a factory.\n-   *\n-   * @author Aaron M. Renn (arenn@urbanophile.com)\n-   * @author Per Bothner <bothner@cygnus.com>\n-   */\n+/**\n+ * This abstract class serves as the parent class for socket implementations.\n+ * The implementation class serves an intermediary to native routines that\n+ * perform system specific socket operations.\n+ * <p>\n+ * A default implementation is provided by the system, but this can be\n+ * changed via installing a <code>SocketImplFactory</code> (through a call\n+ * to the static method <code>Socket.setSocketImplFactory</code>).  A\n+ * subclass of <code>Socket</code> can also pass in a <code>SocketImpl</code>\n+ * to the <code>Socket(SocketImpl)</code> constructor to use an\n+ * implementation different from the system default without installing\n+ * a factory.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Per Bothner <bothner@cygnus.com>\n+ */\n public abstract class SocketImpl implements SocketOptions\n {\n-\n-\n   /**\n    * The address of the remote end of the socket connection\n    */\n   protected InetAddress address;\n \n   /**\n-   * A FileDescriptor object representing this socket connection.  \n+   * A FileDescriptor object representing this socket connection.\n    */\n   protected FileDescriptor fd;\n \n@@ -86,7 +84,7 @@ public abstract class SocketImpl implements SocketOptions\n   /**\n    * Default, no-argument constructor for use by subclasses.\n    */\n-  public SocketImpl ()\n+  public SocketImpl()\n   {\n   }\n \n@@ -98,7 +96,7 @@ public SocketImpl ()\n    *\n    * @param stream true for a stream socket, false for a datagram socket\n    */\n-  protected abstract void create (boolean stream) throws IOException;\n+  protected abstract void create(boolean stream) throws IOException;\n \n   /**\n    * Connects to the remote hostname and port specified as arguments.\n@@ -108,7 +106,7 @@ public SocketImpl ()\n    *\n    * @exception IOException If an error occurs\n    */\n-  protected abstract void connect (String host, int port) throws IOException;\n+  protected abstract void connect(String host, int port) throws IOException;\n \n   /**\n    * Connects to the remote address and port specified as arguments.\n@@ -118,7 +116,7 @@ public SocketImpl ()\n    *\n    * @exception IOException If an error occurs\n    */\n-  protected abstract void connect (InetAddress host, int port)\n+  protected abstract void connect(InetAddress host, int port)\n     throws IOException;\n \n   /**\n@@ -133,7 +131,7 @@ protected abstract void connect (InetAddress host, int port)\n    *\n    * @exception IOException If an error occurs\n    */\n-  protected abstract void bind (InetAddress host, int port) throws IOException;\n+  protected abstract void bind(InetAddress host, int port) throws IOException;\n \n   /**\n    * Starts listening for connections on a socket. The backlog parameter\n@@ -142,10 +140,10 @@ protected abstract void connect (InetAddress host, int port)\n    * number, additional connections will be refused.\n    *\n    * @param backlog The length of the pending connection queue\n-   * \n+   *\n    * @exception IOException If an error occurs\n    */\n-  protected abstract void listen (int backlog) throws IOException;\n+  protected abstract void listen(int backlog) throws IOException;\n \n   /**\n    * Accepts a connection on this socket.\n@@ -154,7 +152,7 @@ protected abstract void connect (InetAddress host, int port)\n    *\n    * @exception IOException If an error occurs\n    */\n-  protected abstract void accept (SocketImpl s) throws IOException;\n+  protected abstract void accept(SocketImpl s) throws IOException;\n \n   /**\n    * Returns an <code>InputStream</code> object for reading from this socket.\n@@ -167,7 +165,7 @@ protected abstract void connect (InetAddress host, int port)\n \n   /**\n    * Returns an <code>OutputStream</code> object for writing to this socket\n-   * \n+   *\n    * @return An <code>OutputStream</code> for writing to this socket.\n    *\n    * @exception IOException If an error occurs.\n@@ -182,7 +180,7 @@ protected abstract void connect (InetAddress host, int port)\n    *\n    * @exception IOException If an error occurs\n    */\n-  protected abstract int available () throws IOException;\n+  protected abstract int available() throws IOException;\n \n   /**\n    * Closes the socket.  This will normally cause any resources, such as the\n@@ -193,45 +191,77 @@ protected abstract void connect (InetAddress host, int port)\n    *\n    * @exception IOException If an error occurs\n    */\n-  protected abstract void close () throws IOException;\n+  protected abstract void close() throws IOException;\n \n   /**\n    * Returns the FileDescriptor objects for this socket.\n    *\n    * @return A FileDescriptor for this socket.\n    */\n-  protected FileDescriptor getFileDescriptor () { return fd; }\n+  protected FileDescriptor getFileDescriptor() { return fd; }\n \n   /**\n    * Returns the remote address this socket is connected to\n    *\n    * @return The remote address\n    */\n-  protected InetAddress getInetAddress () { return address; }\n+  protected InetAddress getInetAddress() { return address; }\n \n   /**\n    * Returns the remote port this socket is connected to\n    *\n    * @return The remote port\n    */\n-  protected int getPort () { return port; }\n+  protected int getPort() { return port; }\n \n   /**\n    * Returns the local port this socket is bound to\n    *\n    * @return The local port\n    */\n-  protected int getLocalPort () { return localport; }\n+  protected int getLocalPort() { return localport; }\n \n   /**\n-   * Returns a <code>String</code> representing the remote host and port of this\n-   * socket.\n+   * Returns a <code>String</code> representing the remote host and port of\n+   * this socket.\n    *\n    * @return A <code>String</code> for this socket.\n    */\n-  public String toString ()\n+  public String toString()\n   {\n-    return \"[addr=\" + address.toString() + \",port=\" + Integer.toString(port) +\n-      \",localport=\" + Integer.toString(localport) + \"]\";\n+    return \"[addr=\" + address.toString() + \",port=\" + Integer.toString(port)\n+      + \",localport=\" + Integer.toString(localport) + \"]\";\n   }\n+\n+  /**\n+   * Sets the specified option on a socket to the passed in object.  For\n+   * options that take an integer argument, the passed in object is an\n+   * <code>Integer</code>.  For options that are set to on or off, the\n+   * value passed will be a <code>Boolean</code>.   The <code>option_id</code> \n+   * parameter is one of the defined constants in the superinterface.\n+   *\n+   * @param option_id The identifier of the option\n+   * @param val The value to set the option to\n+   *\n+   * @exception SocketException If an error occurs\n+   * @XXX This redeclaration from SocketOptions is a workaround to a gcj bug.\n+   */\n+  public abstract void setOption(int option_id, Object val)\n+    throws SocketException;\n+\n+  /**\n+   * Returns the current setting of the specified option.  The \n+   * <code>Object</code> returned will be an <code>Integer</code> for options \n+   * that have integer values.  For options that are set to on or off, a \n+   * <code>Boolean</code> will be returned.   The <code>option_id</code>\n+   * is one of the defined constants in the superinterface.\n+   *\n+   * @param option_id The option identifier\n+   *\n+   * @return The current value of the option\n+   *\n+   * @exception SocketException If an error occurs\n+   * @XXX This redeclaration from SocketOptions is a workaround to a gcj bug.\n+   */\n+  public abstract Object getOption(int option_id) throws SocketException;\n }"}, {"sha": "cde97b0452e2c590e62a74121f03b1570ee3e76a", "filename": "libjava/java/rmi/server/RMIClassLoader.java", "status": "modified", "additions": 80, "deletions": 57, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894286989e3b53d5c10f385763171672c1c0035c/libjava%2Fjava%2Frmi%2Fserver%2FRMIClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894286989e3b53d5c10f385763171672c1c0035c/libjava%2Fjava%2Frmi%2Fserver%2FRMIClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FRMIClassLoader.java?ref=894286989e3b53d5c10f385763171672c1c0035c", "patch": "@@ -1,13 +1,13 @@\n-/*\n-  Copyright (c) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n+/* RMIClassLoader.java\n+  Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -44,59 +44,82 @@\n import java.net.MalformedURLException;\n import java.util.StringTokenizer;\n \n-public class RMIClassLoader {\n-\n-static private class MyClassLoader extends ClassLoader {\n-\n-Class defineClass(String name, byte[] data) {\n-\treturn (defineClass(name, data, 0, data.length));\n-}\n-}\n-static private MyClassLoader loader = new MyClassLoader();\n-\n-/**\n- * @deprecated\n- */\n-public static Class loadClass(String name) throws MalformedURLException, ClassNotFoundException {\n-\treturn (loadClass(System.getProperty(\"java.rmi.server.codebase\"), name));\n-}\n-\n-public static Class loadClass(URL codebase, String name) throws MalformedURLException, ClassNotFoundException {\n-\tURL u = new URL(codebase, name + \".class\");\n-\ttry {\n-\t\tURLConnection conn = u.openConnection();\n-\t\tDataInputStream strm = new DataInputStream(conn.getInputStream());\n-\t\tbyte data[] = new byte[conn.getContentLength()];\n-\t\tstrm.readFully(data);\n-\t\treturn (loader.defineClass(name, data));\n-\t}\n-\tcatch (IOException _) {\n-\t\tthrow new ClassNotFoundException(name);\n-\t}\n-}\n-\n-public static Class loadClass(String codebase, String name) throws MalformedURLException, ClassNotFoundException {\n-\tStringTokenizer tok = new StringTokenizer(codebase, \":\");\n-\twhile (tok.hasMoreTokens()) {\n-\t\ttry {\n-\t\t\treturn (loadClass(new URL(tok.nextToken()), name));\n-\t\t}\n-\t\tcatch (ClassNotFoundException _) {\n-\t\t\t// Ignore - try the next one.\n-\t\t}\n-\t}\n-\tthrow new ClassNotFoundException(name);\n-}\n-\n-public static String getClassAnnotation(Class cl) {\n-\treturn (null);\t// We don't yet do this.\n-}\n-\n-/**\n- * @deprecated\n- */\n-public static Object getSecurityContext(ClassLoader loader) {\n-\tthrow new Error(\"Not implemented\");\n-}\n+public class RMIClassLoader\n+{\n+\n+  static private class MyClassLoader extends ClassLoader\n+  {\n+    /**\n+     * Non-private constructor to reduce bytecode emitted.\n+     */\n+    MyClassLoader()\n+    {\n+    }\n+\n+    Class defineClass(String name, byte[] data)\n+    {\n+      return defineClass(name, data, 0, data.length);\n+    }\n+  }\n+\n+  static private MyClassLoader loader = new MyClassLoader();\n+\n+  /**\n+   * @deprecated\n+   */\n+  public static Class loadClass(String name)\n+    throws MalformedURLException, ClassNotFoundException\n+  {\n+    return loadClass(System.getProperty(\"java.rmi.server.codebase\"), name);\n+  }\n+\n+  public static Class loadClass(URL codebase, String name)\n+    throws MalformedURLException, ClassNotFoundException\n+  {\n+    URL u = new URL(codebase, name + \".class\");\n+    try\n+      {\n+        URLConnection conn = u.openConnection();\n+        DataInputStream strm = new DataInputStream(conn.getInputStream());\n+        byte data[] = new byte[conn.getContentLength()];\n+        strm.readFully(data);\n+        return loader.defineClass(name, data);\n+      }\n+    catch (IOException _)\n+      {\n+        throw new ClassNotFoundException(name);\n+      }\n+  }\n+\n+  public static Class loadClass(String codebase, String name)\n+    throws MalformedURLException, ClassNotFoundException\n+  {\n+    StringTokenizer tok = new StringTokenizer(codebase, \":\");\n+    while (tok.hasMoreTokens())\n+      {\n+        try\n+          {\n+            return loadClass(new URL(tok.nextToken()), name);\n+          }\n+        catch (ClassNotFoundException _)\n+          {\n+            // Ignore - try the next one.\n+          }\n+      }\n+    throw new ClassNotFoundException(name);\n+  }\n+\n+  public static String getClassAnnotation(Class cl)\n+  {\n+    return null; // We don't yet do this.\n+  }\n+\n+  /**\n+   * @deprecated\n+   */\n+  public static Object getSecurityContext(ClassLoader loader)\n+  {\n+    throw new Error(\"Not implemented\");\n+  }\n \n }"}, {"sha": "7e7d09db8e515ec15f597b2a4a8d1883b2c9c35d", "filename": "libjava/java/security/BasicPermission.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894286989e3b53d5c10f385763171672c1c0035c/libjava%2Fjava%2Fsecurity%2FBasicPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894286989e3b53d5c10f385763171672c1c0035c/libjava%2Fjava%2Fsecurity%2FBasicPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FBasicPermission.java?ref=894286989e3b53d5c10f385763171672c1c0035c", "patch": "@@ -61,8 +61,9 @@\n  *\n  * @author Aaron M. Renn (arenn@urbanophile.com)\n  */\n-public abstract class BasicPermission extends Permission implements\n-  Serializable\n+public abstract class BasicPermission extends java.security.Permission\n+  implements Serializable\n+  // FIXME extends with fully qualified classname as workaround for gcj 3.0.4\n {\n   /**\n    * This method initializes a new instance of <code>BasicPermission</code>"}, {"sha": "13f9be0c93c041389e31e70777cd17f531da7f5e", "filename": "libjava/java/util/Arrays.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894286989e3b53d5c10f385763171672c1c0035c/libjava%2Fjava%2Futil%2FArrays.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894286989e3b53d5c10f385763171672c1c0035c/libjava%2Fjava%2Futil%2FArrays.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FArrays.java?ref=894286989e3b53d5c10f385763171672c1c0035c", "patch": "@@ -1,5 +1,5 @@\n /* Arrays.java -- Utility class with methods to operate on arrays\n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -2430,7 +2430,7 @@ public int indexOf(Object o)\n     {\n       int size = a.length;\n       for (int i = 0; i < size; i++)\n-        if (equals(o, a[i]))\n+        if (this.equals(o, a[i]))\n           return i;\n       return -1;\n     }\n@@ -2439,7 +2439,7 @@ public int lastIndexOf(Object o)\n     {\n       int i = a.length;\n       while (--i >= 0)\n-        if (equals(o, a[i]))\n+        if (this.equals(o, a[i]))\n           return i;\n       return -1;\n     }"}, {"sha": "8c55ae0a553a53ef888a40a6f88db411d00ac912", "filename": "libjava/java/util/WeakHashMap.java", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894286989e3b53d5c10f385763171672c1c0035c/libjava%2Fjava%2Futil%2FWeakHashMap.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894286989e3b53d5c10f385763171672c1c0035c/libjava%2Fjava%2Futil%2FWeakHashMap.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FWeakHashMap.java?ref=894286989e3b53d5c10f385763171672c1c0035c", "patch": "@@ -1,6 +1,6 @@\n /* java.util.WeakHashMap -- a hashtable that keeps only weak references\n    to its keys, allowing the virtual machine to reclaim them\n-   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -169,6 +169,13 @@ public boolean equals(Object o)\n    */\n   private final class WeakEntrySet extends AbstractSet\n   {\n+    /**\n+     * Non-private constructor to reduce bytecode emitted.\n+     */\n+    WeakEntrySet()\n+    {\n+    }\n+\n     /**\n      * Returns the size of this set.\n      *\n@@ -483,7 +490,7 @@ public String toString()\n      */\n     WeakEntry getEntry()\n     {\n-      final Object key = get();\n+      final Object key = this.get();\n       if (key == null)\n         return null;\n       return new WeakEntry(key);"}]}