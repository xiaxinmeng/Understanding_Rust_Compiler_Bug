{"sha": "e1293ae35777427e1c87659ae21f9bca5f6395d6", "node_id": "C_kwDOANBUbNoAKGUxMjkzYWUzNTc3NzQyN2UxYzg3NjU5YWUyMWY5YmNhNWY2Mzk1ZDY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-07-08T11:47:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-08T11:47:17Z"}, "message": "Merge #1366\n\n1366: Refactor mappings class and HIR lowering to be consistent r=philberty a=philberty\n\nIn order to support loading extern crates and use statements we needed to\r\nclarify the usage of NodeId and HirId within gccrs. Each of these id's were\r\nnested behind the CrateNum but the type resolution, linting and code-gen\r\npasses do not support that level of nesting.\r\n\r\nIn order to get metadata exports and imports working lets focus on gccrs\r\nsupporting compilation of a single crate at a time. This means the crate\r\nprefix only matters for imports and limits the complexity here. Down the\r\nline there might be a way to leverage DefId's for all Path resolution\r\nwhich could solve this problem but significant refactoring would be\r\nrequired here to do this properly and its not nessecary for a basic working\r\nrust compiler.\r\n\r\nThe mappings changes here will help us resolve issues like #1361 much more\r\neasily.\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "362332a85d7d4e27ed53f91a2f8293817fafc856", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/362332a85d7d4e27ed53f91a2f8293817fafc856"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1293ae35777427e1c87659ae21f9bca5f6395d6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiyBlFCRBK7hj4Ov3rIwAAbMAIAKuKYHXX+WzEgb/LlFs0/Hf0\nGI7uD1U0gqDwIHzOjWBAgEz2FKwGM4MbZt4w84UljD7QdrDG7P1+ySc0KrQ11uDf\nwmGvB/M8FuvJf4C5SerGVdke6jquMtchFePOHmMnUWPD0yZycDRuUfVVKpRvxt2E\nwAXiGKbhczCMguqH2pkEzocCCE5fzan1oTevo+v78K5bawnwPm+C9hN25sPSki+l\n+3gE0i33h2z0PtOnuVIzNPodil0jO4zPdlAZrX4PgYx0J4TjVCWJqtEoyMDSrKVs\nqOagzfWnd2l/xo1dutcgMoMn+apSmILx0YxJp7e1qp4U9biNMUKh2EAp6qWTIz8=\n=Ch87\n-----END PGP SIGNATURE-----\n", "payload": "tree 362332a85d7d4e27ed53f91a2f8293817fafc856\nparent 33eb5c938ac41ff5e65c3a8d947d033b32d31ace\nparent fb27d1452b31d5485b1fce692f14279472cf0baf\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1657280837 +0000\ncommitter GitHub <noreply@github.com> 1657280837 +0000\n\nMerge #1366\n\n1366: Refactor mappings class and HIR lowering to be consistent r=philberty a=philberty\n\nIn order to support loading extern crates and use statements we needed to\r\nclarify the usage of NodeId and HirId within gccrs. Each of these id's were\r\nnested behind the CrateNum but the type resolution, linting and code-gen\r\npasses do not support that level of nesting.\r\n\r\nIn order to get metadata exports and imports working lets focus on gccrs\r\nsupporting compilation of a single crate at a time. This means the crate\r\nprefix only matters for imports and limits the complexity here. Down the\r\nline there might be a way to leverage DefId's for all Path resolution\r\nwhich could solve this problem but significant refactoring would be\r\nrequired here to do this properly and its not nessecary for a basic working\r\nrust compiler.\r\n\r\nThe mappings changes here will help us resolve issues like #1361 much more\r\neasily.\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1293ae35777427e1c87659ae21f9bca5f6395d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1293ae35777427e1c87659ae21f9bca5f6395d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1293ae35777427e1c87659ae21f9bca5f6395d6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33eb5c938ac41ff5e65c3a8d947d033b32d31ace", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33eb5c938ac41ff5e65c3a8d947d033b32d31ace", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33eb5c938ac41ff5e65c3a8d947d033b32d31ace"}, {"sha": "fb27d1452b31d5485b1fce692f14279472cf0baf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb27d1452b31d5485b1fce692f14279472cf0baf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb27d1452b31d5485b1fce692f14279472cf0baf"}], "stats": {"total": 2005, "additions": 831, "deletions": 1174}, "files": [{"sha": "4987674cba19a730b6f96eb2e4eeb449af7636b3", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -1153,6 +1153,9 @@ class ExternCrate : public VisItem\n \n   void accept_vis (ASTVisitor &vis) override;\n \n+  const std::string &get_referenced_crate () const { return referenced_crate; }\n+  const std::string &get_as_clause () const { return as_clause_name; }\n+\n   // Override that adds extern crate name in decl to passed list of names.\n   void add_crate_name (std::vector<std::string> &names) const override\n   {"}, {"sha": "3e6e370abe506e661c285931a9b47090190341ba", "filename": "gcc/rust/backend/rust-compile-base.cc", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.cc?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -404,19 +404,16 @@ std::vector<Bvariable *>\n HIRCompileBase::compile_locals_for_block (Context *ctx, Resolver::Rib &rib,\n \t\t\t\t\t  tree fndecl)\n {\n-  CrateNum crate = ctx->get_mappings ()->get_current_crate ();\n-\n   std::vector<Bvariable *> locals;\n   for (auto it : rib.get_declarations ())\n     {\n       NodeId node_id = it.first;\n       HirId ref = UNKNOWN_HIRID;\n-      if (!ctx->get_mappings ()->lookup_node_to_hir (crate, node_id, &ref))\n+      if (!ctx->get_mappings ()->lookup_node_to_hir (node_id, &ref))\n \tcontinue;\n \n       // we only care about local patterns\n-      HIR::Pattern *pattern\n-\t= ctx->get_mappings ()->lookup_hir_pattern (crate, ref);\n+      HIR::Pattern *pattern = ctx->get_mappings ()->lookup_hir_pattern (ref);\n       if (pattern == nullptr)\n \tcontinue;\n "}, {"sha": "7aa691e2506964a19cd8afb124359def63ec4d86", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -985,8 +985,7 @@ CompileExpr::visit (HIR::MethodCallExpr &expr)\n \n   // reverse lookup\n   HirId ref;\n-  if (!ctx->get_mappings ()->lookup_node_to_hir (\n-\texpr.get_mappings ().get_crate_num (), resolved_node_id, &ref))\n+  if (!ctx->get_mappings ()->lookup_node_to_hir (resolved_node_id, &ref))\n     {\n       rust_fatal_error (expr.get_locus (), \"reverse lookup failure\");\n       return;\n@@ -1188,8 +1187,7 @@ CompileExpr::resolve_method_address (TyTy::FnType *fntype, HirId ref,\n   // declared function, generic function which has not be compiled yet or\n   // its an not yet trait bound function\n   HIR::ImplItem *resolved_item\n-    = ctx->get_mappings ()->lookup_hir_implitem (expr_mappings.get_crate_num (),\n-\t\t\t\t\t\t ref, nullptr);\n+    = ctx->get_mappings ()->lookup_hir_implitem (ref, nullptr);\n   if (resolved_item != nullptr)\n     {\n       if (!fntype->has_subsititions_defined ())\n@@ -1199,8 +1197,8 @@ CompileExpr::resolve_method_address (TyTy::FnType *fntype, HirId ref,\n     }\n \n   // it might be resolved to a trait item\n-  HIR::TraitItem *trait_item = ctx->get_mappings ()->lookup_hir_trait_item (\n-    expr_mappings.get_crate_num (), ref);\n+  HIR::TraitItem *trait_item\n+    = ctx->get_mappings ()->lookup_hir_trait_item (ref);\n   HIR::Trait *trait = ctx->get_mappings ()->lookup_trait_item_mapping (\n     trait_item->get_mappings ().get_hirid ());\n \n@@ -1284,8 +1282,7 @@ CompileExpr::resolve_operator_overload (\n \n   // reverse lookup\n   HirId ref;\n-  ok = ctx->get_mappings ()->lookup_node_to_hir (\n-    expr.get_mappings ().get_crate_num (), resolved_node_id, &ref);\n+  ok = ctx->get_mappings ()->lookup_node_to_hir (resolved_node_id, &ref);\n   rust_assert (ok);\n \n   TyTy::BaseType *receiver = nullptr;\n@@ -1874,8 +1871,7 @@ CompileExpr::visit (HIR::IdentifierExpr &expr)\n \n   // node back to HIR\n   HirId ref;\n-  if (!ctx->get_mappings ()->lookup_node_to_hir (\n-\texpr.get_mappings ().get_crate_num (), ref_node_id, &ref))\n+  if (!ctx->get_mappings ()->lookup_node_to_hir (ref_node_id, &ref))\n     {\n       rust_error_at (expr.get_locus (), \"reverse lookup failure\");\n       return;\n@@ -1939,8 +1935,7 @@ CompileExpr::visit (HIR::IdentifierExpr &expr)\n   else\n     {\n       // lets try and query compile it to an item/impl item\n-      HIR::Item *resolved_item = ctx->get_mappings ()->lookup_hir_item (\n-\texpr.get_mappings ().get_crate_num (), ref);\n+      HIR::Item *resolved_item = ctx->get_mappings ()->lookup_hir_item (ref);\n       bool is_hir_item = resolved_item != nullptr;\n       if (!is_hir_item)\n \t{"}, {"sha": "48a516ab41912d28d4ff03257967872a2ce1252a", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -715,8 +715,7 @@ class CompileExpr : public HIRCompileBase, public HIR::HIRExpressionVisitor\n \t  }\n \n \tHirId ref = UNKNOWN_HIRID;\n-\tif (!ctx->get_mappings ()->lookup_node_to_hir (\n-\t      expr.get_mappings ().get_crate_num (), resolved_node_id, &ref))\n+\tif (!ctx->get_mappings ()->lookup_node_to_hir (resolved_node_id, &ref))\n \t  {\n \t    rust_fatal_error (expr.get_locus (),\n \t\t\t      \"reverse lookup label failure\");\n@@ -762,8 +761,7 @@ class CompileExpr : public HIRCompileBase, public HIR::HIRExpressionVisitor\n \t  }\n \n \tHirId ref = UNKNOWN_HIRID;\n-\tif (!ctx->get_mappings ()->lookup_node_to_hir (\n-\t      expr.get_mappings ().get_crate_num (), resolved_node_id, &ref))\n+\tif (!ctx->get_mappings ()->lookup_node_to_hir (resolved_node_id, &ref))\n \t  {\n \t    rust_fatal_error (expr.get_locus (),\n \t\t\t      \"reverse lookup label failure\");"}, {"sha": "735dede93c6e1ed528d7dab840f3902f98a5ee35", "filename": "gcc/rust/backend/rust-compile-implitem.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fbackend%2Frust-compile-implitem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fbackend%2Frust-compile-implitem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-implitem.cc?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -31,7 +31,6 @@ CompileTraitItem::visit (HIR::TraitItemConst &constant)\n \n   const Resolver::CanonicalPath *canonical_path = nullptr;\n   bool ok = ctx->get_mappings ()->lookup_canonical_path (\n-    constant.get_mappings ().get_crate_num (),\n     constant.get_mappings ().get_nodeid (), &canonical_path);\n   rust_assert (ok);\n \n@@ -84,8 +83,7 @@ CompileTraitItem::visit (HIR::TraitItemFunc &func)\n \n   const Resolver::CanonicalPath *canonical_path = nullptr;\n   bool ok = ctx->get_mappings ()->lookup_canonical_path (\n-    func.get_mappings ().get_crate_num (), func.get_mappings ().get_nodeid (),\n-    &canonical_path);\n+    func.get_mappings ().get_nodeid (), &canonical_path);\n   rust_assert (ok);\n \n   // FIXME: How do we get the proper visibility here?"}, {"sha": "1f2e479e1f65db7ff3321e6ecfe1d201917d2b80", "filename": "gcc/rust/backend/rust-compile-item.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fbackend%2Frust-compile-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fbackend%2Frust-compile-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.cc?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -47,8 +47,7 @@ CompileItem::visit (HIR::StaticItem &var)\n \n   const Resolver::CanonicalPath *canonical_path = nullptr;\n   ok = ctx->get_mappings ()->lookup_canonical_path (\n-    var.get_mappings ().get_crate_num (), var.get_mappings ().get_nodeid (),\n-    &canonical_path);\n+    var.get_mappings ().get_nodeid (), &canonical_path);\n   rust_assert (ok);\n \n   std::string name = canonical_path->get ();\n@@ -87,7 +86,6 @@ CompileItem::visit (HIR::ConstantItem &constant)\n   // canonical path\n   const Resolver::CanonicalPath *canonical_path = nullptr;\n   ok = ctx->get_mappings ()->lookup_canonical_path (\n-    constant.get_mappings ().get_crate_num (),\n     constant.get_mappings ().get_nodeid (), &canonical_path);\n   rust_assert (ok);\n \n@@ -162,7 +160,6 @@ CompileItem::visit (HIR::Function &function)\n \n   const Resolver::CanonicalPath *canonical_path = nullptr;\n   bool ok = ctx->get_mappings ()->lookup_canonical_path (\n-    function.get_mappings ().get_crate_num (),\n     function.get_mappings ().get_nodeid (), &canonical_path);\n   rust_assert (ok);\n "}, {"sha": "95d8841b5abd3d2d43c0c2dfe6533eb762c75f10", "filename": "gcc/rust/backend/rust-compile-resolve-path.cc", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -99,8 +99,7 @@ ResolvePathRef::resolve (const HIR::PathIdentSegment &final_segment,\n     }\n \n   HirId ref;\n-  if (!ctx->get_mappings ()->lookup_node_to_hir (mappings.get_crate_num (),\n-\t\t\t\t\t\t ref_node_id, &ref))\n+  if (!ctx->get_mappings ()->lookup_node_to_hir (ref_node_id, &ref))\n     {\n       rust_error_at (expr_locus, \"reverse call path lookup failure\");\n       return error_mark_node;\n@@ -159,11 +158,9 @@ HIRCompileBase::query_compile (HirId ref, TyTy::BaseType *lookup,\n \t\t\t       const Analysis::NodeMapping &mappings,\n \t\t\t       Location expr_locus, bool is_qualified_path)\n {\n-  HIR::Item *resolved_item\n-    = ctx->get_mappings ()->lookup_hir_item (mappings.get_crate_num (), ref);\n+  HIR::Item *resolved_item = ctx->get_mappings ()->lookup_hir_item (ref);\n   HIR::ExternalItem *resolved_extern_item\n-    = ctx->get_mappings ()->lookup_hir_extern_item (mappings.get_crate_num (),\n-\t\t\t\t\t\t    ref);\n+    = ctx->get_mappings ()->lookup_hir_extern_item (ref);\n   bool is_hir_item = resolved_item != nullptr;\n   bool is_hir_extern_item = resolved_extern_item != nullptr;\n   if (is_hir_item)\n@@ -188,15 +185,13 @@ HIRCompileBase::query_compile (HirId ref, TyTy::BaseType *lookup,\n     {\n       HirId parent_impl_id = UNKNOWN_HIRID;\n       HIR::ImplItem *resolved_item\n-\t= ctx->get_mappings ()->lookup_hir_implitem (mappings.get_crate_num (),\n-\t\t\t\t\t\t     ref, &parent_impl_id);\n+\t= ctx->get_mappings ()->lookup_hir_implitem (ref, &parent_impl_id);\n       bool is_impl_item = resolved_item != nullptr;\n       if (is_impl_item)\n \t{\n \t  rust_assert (parent_impl_id != UNKNOWN_HIRID);\n \t  HIR::Item *impl_ref\n-\t    = ctx->get_mappings ()->lookup_hir_item (mappings.get_crate_num (),\n-\t\t\t\t\t\t     parent_impl_id);\n+\t    = ctx->get_mappings ()->lookup_hir_item (parent_impl_id);\n \t  rust_assert (impl_ref != nullptr);\n \t  HIR::ImplBlock *impl = static_cast<HIR::ImplBlock *> (impl_ref);\n \n@@ -216,8 +211,7 @@ HIRCompileBase::query_compile (HirId ref, TyTy::BaseType *lookup,\n \t{\n \t  // it might be resolved to a trait item\n \t  HIR::TraitItem *trait_item\n-\t    = ctx->get_mappings ()->lookup_hir_trait_item (\n-\t      mappings.get_crate_num (), ref);\n+\t    = ctx->get_mappings ()->lookup_hir_trait_item (ref);\n \t  HIR::Trait *trait = ctx->get_mappings ()->lookup_trait_item_mapping (\n \t    trait_item->get_mappings ().get_hirid ());\n "}, {"sha": "12d6f87182da821d5bb4f25a42922144f6ca6bc8", "filename": "gcc/rust/expand/rust-attribute-visitor.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -2864,6 +2864,8 @@ AttrVisitor::visit (AST::MacroRulesDefinition &rules_def)\n   expander.resolver->get_macro_scope ().insert (path, rules_def.get_node_id (),\n \t\t\t\t\t\trules_def.get_locus ());\n   expander.mappings->insert_macro_def (&rules_def);\n+  rust_debug_loc (rules_def.get_locus (), \"inserting macro def: [%s]\",\n+\t\t  path.get ().c_str ());\n }\n \n void"}, {"sha": "189d377ccc4dd3141037f456e709da5b33b60879", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -142,7 +142,7 @@ MacroExpander::expand_invoc (AST::MacroInvocation &invoc)\n     &resolved_node);\n   if (!found)\n     {\n-      rust_error_at (invoc.get_locus (), \"unknown macro\");\n+      rust_error_at (invoc.get_locus (), \"unknown macro 1\");\n       return;\n     }\n \n@@ -177,13 +177,14 @@ MacroExpander::expand_invoc_semi (AST::MacroInvocation &invoc)\n \n   // lookup the rules for this macro\n   NodeId resolved_node = UNKNOWN_NODEID;\n-  bool found = resolver->get_macro_scope ().lookup (\n-    Resolver::CanonicalPath::new_seg (invoc.get_macro_node_id (),\n-\t\t\t\t      invoc_data.get_path ().as_string ()),\n-    &resolved_node);\n+  auto seg\n+    = Resolver::CanonicalPath::new_seg (invoc.get_macro_node_id (),\n+\t\t\t\t\tinvoc_data.get_path ().as_string ());\n+  bool found = resolver->get_macro_scope ().lookup (seg, &resolved_node);\n   if (!found)\n     {\n-      rust_error_at (invoc.get_locus (), \"unknown macro\");\n+      rust_error_at (invoc.get_locus (), \"unknown macro 2: [%s]\",\n+\t\t     seg.get ().c_str ());\n       return;\n     }\n "}, {"sha": "3db7dc312ebc78c0c76a1edeb00160eb8626947b", "filename": "gcc/rust/hir/rust-ast-lower-base.cc", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -527,8 +527,7 @@ ASTLoweringBase::lower_lifetime (AST::Lifetime &lifetime)\n   Analysis::NodeMapping mapping (crate_num, lifetime.get_node_id (),\n \t\t\t\t mappings->get_next_hir_id (crate_num),\n \t\t\t\t UNKNOWN_LOCAL_DEFID);\n-  mappings->insert_node_to_hir (mapping.get_crate_num (), mapping.get_nodeid (),\n-\t\t\t\tmapping.get_hirid ());\n+  mappings->insert_node_to_hir (mapping.get_nodeid (), mapping.get_hirid ());\n \n   return HIR::Lifetime (mapping, lifetime.get_lifetime_type (),\n \t\t\tlifetime.get_lifetime_name (), lifetime.get_locus ());\n@@ -543,8 +542,7 @@ ASTLoweringBase::lower_loop_label (AST::LoopLabel &loop_label)\n   Analysis::NodeMapping mapping (crate_num, loop_label.get_node_id (),\n \t\t\t\t mappings->get_next_hir_id (crate_num),\n \t\t\t\t UNKNOWN_LOCAL_DEFID);\n-  mappings->insert_node_to_hir (mapping.get_crate_num (), mapping.get_nodeid (),\n-\t\t\t\tmapping.get_hirid ());\n+  mappings->insert_node_to_hir (mapping.get_nodeid (), mapping.get_hirid ());\n \n   return HIR::LoopLabel (mapping, std::move (life), loop_label.get_locus ());\n }\n@@ -734,13 +732,11 @@ ASTLowerQualifiedPathInType::visit (AST::QualifiedPathInType &path)\n \n   Analysis::NodeMapping mapping (crate_num, path.get_node_id (), hirid,\n \t\t\t\t mappings->get_next_localdef_id (crate_num));\n-\n   translated = new HIR::QualifiedPathInType (std::move (mapping),\n \t\t\t\t\t     std::move (qual_path_type),\n \t\t\t\t\t     std::move (associated_segment),\n \t\t\t\t\t     std::move (translated_segments),\n \t\t\t\t\t     path.get_locus ());\n-  mappings->insert_hir_type (crate_num, hirid, translated);\n }\n \n void\n@@ -758,9 +754,6 @@ ASTLoweringType::visit (AST::TraitObjectTypeOneBound &type)\n \n   translated = new HIR::TraitObjectType (mapping, std::move (bounds),\n \t\t\t\t\t type.get_locus (), type.is_dyn ());\n-\n-  mappings->insert_hir_type (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t     translated);\n }\n \n void\n@@ -783,9 +776,6 @@ ASTLoweringType::visit (AST::TraitObjectType &type)\n \n   translated = new HIR::TraitObjectType (mapping, std::move (bounds),\n \t\t\t\t\t type.get_locus (), type.is_dyn ());\n-\n-  mappings->insert_hir_type (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t     translated);\n }\n \n HIR::Type *\n@@ -1084,12 +1074,6 @@ ASTLoweringBase::lower_extern_block (AST::ExternBlock &extern_block)\n \t\t\t    extern_block.get_outer_attrs (),\n \t\t\t    extern_block.get_locus ());\n \n-  mappings->insert_defid_mapping (mapping.get_defid (), hir_extern_block);\n-  mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t     hir_extern_block);\n-  mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t     extern_block.get_locus ());\n-\n   return hir_extern_block;\n }\n "}, {"sha": "0d3c704c6f13a5d712dc16f728663042c1f12f2c", "filename": "gcc/rust/hir/rust-ast-lower-block.h", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -36,10 +36,7 @@ class ASTLoweringBlock : public ASTLoweringBase\n     expr->accept_vis (resolver);\n     if (resolver.translated != nullptr)\n       {\n-\tresolver.mappings->insert_hir_expr (\n-\t  resolver.translated->get_mappings ().get_crate_num (),\n-\t  resolver.translated->get_mappings ().get_hirid (),\n-\t  resolver.translated);\n+\tresolver.mappings->insert_hir_expr (resolver.translated);\n       }\n \n     *terminated = resolver.terminated;\n@@ -65,9 +62,7 @@ class ASTLoweringBlock : public ASTLoweringBase\n \t\t\t\t  std::unique_ptr<HIR::BlockExpr> (block),\n \t\t\t\t  expr->get_outer_attrs (), expr->get_locus ());\n \n-    resolver.mappings->insert_hir_expr (\n-      translated->get_mappings ().get_crate_num (),\n-      translated->get_mappings ().get_hirid (), translated);\n+    resolver.mappings->insert_hir_expr (translated);\n \n     return translated;\n   }\n@@ -94,10 +89,7 @@ class ASTLoweringIfBlock : public ASTLoweringBase\n     expr->accept_vis (resolver);\n     if (resolver.translated != nullptr)\n       {\n-\tresolver.mappings->insert_hir_expr (\n-\t  resolver.translated->get_mappings ().get_crate_num (),\n-\t  resolver.translated->get_mappings ().get_hirid (),\n-\t  resolver.translated);\n+\tresolver.mappings->insert_hir_expr (resolver.translated);\n       }\n     *terminated = resolver.terminated;\n     return resolver.translated;\n@@ -131,10 +123,7 @@ class ASTLoweringIfLetBlock : public ASTLoweringBase\n     expr->accept_vis (resolver);\n     if (resolver.translated != nullptr)\n       {\n-\tresolver.mappings->insert_hir_expr (\n-\t  resolver.translated->get_mappings ().get_crate_num (),\n-\t  resolver.translated->get_mappings ().get_hirid (),\n-\t  resolver.translated);\n+\tresolver.mappings->insert_hir_expr (resolver.translated);\n       }\n     return resolver.translated;\n   }\n@@ -161,10 +150,7 @@ class ASTLoweringExprWithBlock : public ASTLoweringBase\n     expr->accept_vis (resolver);\n     if (resolver.translated != nullptr)\n       {\n-\tresolver.mappings->insert_hir_expr (\n-\t  resolver.translated->get_mappings ().get_crate_num (),\n-\t  resolver.translated->get_mappings ().get_hirid (),\n-\t  resolver.translated);\n+\tresolver.mappings->insert_hir_expr (resolver.translated);\n       }\n \n     *terminated = resolver.terminated;"}, {"sha": "b76658c78ccd164c5ca1b4ef5f040e65952d309d", "filename": "gcc/rust/hir/rust-ast-lower-enumitem.h", "status": "modified", "additions": 13, "deletions": 25, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Frust-ast-lower-enumitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Frust-ast-lower-enumitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-enumitem.h?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -39,6 +39,17 @@ class ASTLoweringEnumItem : public ASTLoweringBase\n   {\n     ASTLoweringEnumItem resolver;\n     item->accept_vis (resolver);\n+\n+    rust_assert (resolver.translated != nullptr);\n+\n+    auto hirid = resolver.translated->get_mappings ().get_hirid ();\n+    auto defid = resolver.translated->get_mappings ().get_defid ();\n+\n+    resolver.mappings->insert_defid_mapping (defid, resolver.translated);\n+    resolver.mappings->insert_hir_item (resolver.translated);\n+    resolver.mappings->insert_location (hirid,\n+\t\t\t\t\tresolver.translated->get_locus ());\n+\n     return resolver.translated;\n   }\n \n@@ -53,15 +64,8 @@ class ASTLoweringEnumItem : public ASTLoweringBase\n       rust_error_at (item.get_locus (),\n \t\t     \"visibility qualifier %qs not allowed on enum item\",\n \t\t     item.get_visibility ().as_string ().c_str ());\n-\n     translated = new HIR::EnumItem (mapping, item.get_identifier (),\n \t\t\t\t    item.get_outer_attrs (), item.get_locus ());\n-\n-    mappings->insert_defid_mapping (mapping.get_defid (), translated);\n-    mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t       translated);\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       item.get_locus ());\n   }\n \n   void visit (AST::EnumItemTuple &item) override\n@@ -100,12 +104,6 @@ class ASTLoweringEnumItem : public ASTLoweringBase\n       = new HIR::EnumItemTuple (mapping, item.get_identifier (),\n \t\t\t\tstd::move (fields), item.get_outer_attrs (),\n \t\t\t\titem.get_locus ());\n-\n-    mappings->insert_defid_mapping (mapping.get_defid (), translated);\n-    mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t       translated);\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       item.get_locus ());\n   }\n \n   void visit (AST::EnumItemStruct &item) override\n@@ -149,13 +147,8 @@ class ASTLoweringEnumItem : public ASTLoweringBase\n       = new HIR::EnumItemStruct (mapping, item.get_identifier (),\n \t\t\t\t std::move (fields), item.get_outer_attrs (),\n \t\t\t\t item.get_locus ());\n-\n-    mappings->insert_defid_mapping (mapping.get_defid (), translated);\n-    mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t       translated);\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       item.get_locus ());\n   }\n+\n   void visit (AST::EnumItemDiscriminant &item) override\n   {\n     auto crate_num = mappings->get_current_crate ();\n@@ -174,16 +167,11 @@ class ASTLoweringEnumItem : public ASTLoweringBase\n \t\t\t\t       std::unique_ptr<HIR::Expr> (expr),\n \t\t\t\t       item.get_outer_attrs (),\n \t\t\t\t       item.get_locus ());\n-\n-    mappings->insert_defid_mapping (mapping.get_defid (), translated);\n-    mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t       translated);\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       item.get_locus ());\n   }\n \n private:\n   ASTLoweringEnumItem () : translated (nullptr) {}\n+\n   HIR::EnumItem *translated;\n };\n "}, {"sha": "166a44b90968bea6786f5483df0be5c3f183aa2b", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -87,11 +87,8 @@ class ASTLoweringExpr : public ASTLoweringBase\n \treturn nullptr;\n       }\n \n-    resolver.mappings->insert_hir_expr (\n-      resolver.translated->get_mappings ().get_crate_num (),\n-      resolver.translated->get_mappings ().get_hirid (), resolver.translated);\n+    resolver.mappings->insert_hir_expr (resolver.translated);\n     resolver.mappings->insert_location (\n-      resolver.translated->get_mappings ().get_crate_num (),\n       resolver.translated->get_mappings ().get_hirid (), expr->get_locus ());\n \n     if (terminated != nullptr)"}, {"sha": "28d160bb3e9fc373a95bf53105b9f61e9902efb0", "filename": "gcc/rust/hir/rust-ast-lower-extern.h", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Frust-ast-lower-extern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Frust-ast-lower-extern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-extern.h?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -35,6 +35,13 @@ class ASTLoweringExternItem : public ASTLoweringBase\n   {\n     ASTLoweringExternItem resolver;\n     item->accept_vis (resolver);\n+\n+    rust_assert (resolver.translated != nullptr);\n+    resolver.mappings->insert_hir_extern_item (resolver.translated);\n+    resolver.mappings->insert_location (\n+      resolver.translated->get_mappings ().get_hirid (),\n+      resolver.translated->get_locus ());\n+\n     return resolver.translated;\n   }\n \n@@ -49,17 +56,10 @@ class ASTLoweringExternItem : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n-    HIR::ExternalStaticItem *static_item = new HIR::ExternalStaticItem (\n+    translated = new HIR::ExternalStaticItem (\n       mapping, item.get_identifier (), std::unique_ptr<HIR::Type> (static_type),\n       item.is_mut () ? Mutability::Mut : Mutability::Imm, std::move (vis),\n       item.get_outer_attrs (), item.get_locus ());\n-\n-    translated = static_item;\n-\n-    mappings->insert_hir_extern_item (crate_num, mapping.get_hirid (),\n-\t\t\t\t      translated);\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       item.get_locus ());\n   }\n \n   void visit (AST::ExternalFunctionItem &function) override\n@@ -100,18 +100,11 @@ class ASTLoweringExternItem : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n-    HIR::ExternalFunctionItem *function_item = new HIR::ExternalFunctionItem (\n+    translated = new HIR::ExternalFunctionItem (\n       mapping, function.get_identifier (), std::move (generic_params),\n       std::unique_ptr<HIR::Type> (return_type), std::move (where_clause),\n       std::move (function_params), function.is_variadic (), std::move (vis),\n       function.get_outer_attrs (), function.get_locus ());\n-\n-    translated = function_item;\n-\n-    mappings->insert_hir_extern_item (crate_num, mapping.get_hirid (),\n-\t\t\t\t      translated);\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       function.get_locus ());\n   }\n \n private:"}, {"sha": "d5ca47587fc887d87e12270c5870820d90036f58", "filename": "gcc/rust/hir/rust-ast-lower-implitem.h", "status": "modified", "additions": 68, "deletions": 79, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -37,18 +37,48 @@ class ASTLowerImplItem : public ASTLoweringBase\n   static HIR::ImplItem *translate (AST::InherentImplItem *item,\n \t\t\t\t   HirId parent_impl_id)\n   {\n-    ASTLowerImplItem resolver (parent_impl_id);\n+    ASTLowerImplItem resolver;\n     item->accept_vis (resolver);\n-    rust_assert (resolver.translated != nullptr);\n+\n+    if (resolver.translated != nullptr)\n+      {\n+\trust_assert (resolver.item_cast != nullptr);\n+\n+\tauto id = resolver.translated->get_impl_mappings ().get_hirid ();\n+\tauto defid = resolver.translated->get_impl_mappings ().get_defid ();\n+\tauto locus = resolver.translated->get_locus ();\n+\n+\tresolver.handle_outer_attributes (*resolver.item_cast);\n+\tresolver.mappings->insert_hir_implitem (parent_impl_id,\n+\t\t\t\t\t\tresolver.translated);\n+\tresolver.mappings->insert_location (id, locus);\n+\tresolver.mappings->insert_defid_mapping (defid, resolver.item_cast);\n+      }\n+\n     return resolver.translated;\n   }\n \n   static HIR::ImplItem *translate (AST::TraitImplItem *item,\n \t\t\t\t   HirId parent_impl_id)\n   {\n-    ASTLowerImplItem resolver (parent_impl_id);\n+    ASTLowerImplItem resolver;\n     item->accept_vis (resolver);\n-    rust_assert (resolver.translated != nullptr);\n+\n+    if (resolver.translated != nullptr)\n+      {\n+\trust_assert (resolver.item_cast != nullptr);\n+\n+\tauto id = resolver.translated->get_impl_mappings ().get_hirid ();\n+\tauto defid = resolver.translated->get_impl_mappings ().get_defid ();\n+\tauto locus = resolver.translated->get_locus ();\n+\n+\tresolver.handle_outer_attributes (*resolver.item_cast);\n+\tresolver.mappings->insert_hir_implitem (parent_impl_id,\n+\t\t\t\t\t\tresolver.translated);\n+\tresolver.mappings->insert_location (id, locus);\n+\tresolver.mappings->insert_defid_mapping (defid, resolver.item_cast);\n+      }\n+\n     return resolver.translated;\n   }\n \n@@ -76,13 +106,7 @@ class ASTLowerImplItem : public ASTLoweringBase\n       std::move (vis), alias.get_outer_attrs (), alias.get_locus ());\n \n     translated = type_alias;\n-\n-    mappings->insert_defid_mapping (mapping.get_defid (), type_alias);\n-    mappings->insert_hir_implitem (mapping.get_crate_num (),\n-\t\t\t\t   mapping.get_hirid (), parent_impl_id,\n-\t\t\t\t   translated);\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       alias.get_locus ());\n+    item_cast = type_alias;\n   }\n \n   void visit (AST::ConstantItem &constant) override\n@@ -104,13 +128,7 @@ class ASTLowerImplItem : public ASTLoweringBase\n \t\t\t       constant.get_outer_attrs (),\n \t\t\t       constant.get_locus ());\n     translated = translated_constant;\n-\n-    mappings->insert_defid_mapping (mapping.get_defid (), translated_constant);\n-    mappings->insert_hir_implitem (mapping.get_crate_num (),\n-\t\t\t\t   mapping.get_hirid (), parent_impl_id,\n-\t\t\t\t   translated);\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       constant.get_locus ());\n+    item_cast = translated_constant;\n   }\n \n   void visit (AST::Function &function) override\n@@ -167,8 +185,7 @@ class ASTLowerImplItem : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n-    mappings->insert_location (crate_num,\n-\t\t\t       function_body->get_mappings ().get_hirid (),\n+    mappings->insert_location (function_body->get_mappings ().get_hirid (),\n \t\t\t       function.get_locus ());\n \n     auto fn\n@@ -179,22 +196,15 @@ class ASTLowerImplItem : public ASTLoweringBase\n \t\t\t   std::move (vis), function.get_outer_attrs (),\n \t\t\t   HIR::SelfParam::error (), locus);\n \n-    mappings->insert_defid_mapping (mapping.get_defid (), fn);\n-    mappings->insert_hir_implitem (mapping.get_crate_num (),\n-\t\t\t\t   mapping.get_hirid (), parent_impl_id, fn);\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       function.get_locus ());\n-\n     // add the mappings for the function params at the end\n     for (auto &param : fn->get_function_params ())\n       {\n-\tmappings->insert_hir_param (mapping.get_crate_num (),\n-\t\t\t\t    param.get_mappings ().get_hirid (), &param);\n-\tmappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t\t   param.get_locus ());\n+\tmappings->insert_hir_param (&param);\n+\tmappings->insert_location (mapping.get_hirid (), param.get_locus ());\n       }\n \n     translated = fn;\n+    item_cast = fn;\n   }\n \n   void visit (AST::Method &method) override\n@@ -260,39 +270,27 @@ class ASTLowerImplItem : public ASTLoweringBase\n \t\t\t   std::move (vis), method.get_outer_attrs (),\n \t\t\t   std::move (self_param), locus);\n \n-    mappings->insert_defid_mapping (mapping.get_defid (), mth);\n-    mappings->insert_hir_implitem (mapping.get_crate_num (),\n-\t\t\t\t   mapping.get_hirid (), parent_impl_id, mth);\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       method.get_locus ());\n-\n     // insert mappings for self\n-    mappings->insert_hir_self_param (crate_num,\n-\t\t\t\t     self_param.get_mappings ().get_hirid (),\n-\t\t\t\t     &self_param);\n-    mappings->insert_location (crate_num,\n-\t\t\t       self_param.get_mappings ().get_hirid (),\n+    mappings->insert_hir_self_param (&self_param);\n+    mappings->insert_location (self_param.get_mappings ().get_hirid (),\n \t\t\t       self_param.get_locus ());\n \n     // add the mappings for the function params at the end\n     for (auto &param : mth->get_function_params ())\n       {\n-\tmappings->insert_hir_param (mapping.get_crate_num (),\n-\t\t\t\t    param.get_mappings ().get_hirid (), &param);\n-\tmappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t\t   param.get_locus ());\n+\tmappings->insert_hir_param (&param);\n+\tmappings->insert_location (mapping.get_hirid (), param.get_locus ());\n       }\n \n     translated = mth;\n+    item_cast = mth;\n   }\n \n private:\n-  ASTLowerImplItem (HirId parent_impl_id)\n-    : translated (nullptr), parent_impl_id (parent_impl_id)\n-  {}\n+  ASTLowerImplItem () : translated (nullptr), item_cast (nullptr) {}\n \n   HIR::ImplItem *translated;\n-  HirId parent_impl_id;\n+  HIR::Item *item_cast;\n };\n \n class ASTLowerTraitItem : public ASTLoweringBase\n@@ -304,7 +302,21 @@ class ASTLowerTraitItem : public ASTLoweringBase\n   {\n     ASTLowerTraitItem resolver;\n     item->accept_vis (resolver);\n-    rust_assert (resolver.translated != nullptr);\n+\n+    if (resolver.translated != nullptr)\n+      {\n+\t// FIXME\n+\n+\t// auto id = resolver.translated->get_mappings ().get_hirid ();\n+\t// auto defid = resolver.translated->get_mappings ().get_defid ();\n+\t// auto locus = resolver.translated->get_locus ();\n+\n+\t// resolver.handle_outer_attributes (*resolver.translated);\n+\tresolver.mappings->insert_hir_trait_item (resolver.translated);\n+\t// resolver.mappings->insert_location (id, locus);\n+\t// resolver.mappings->insert_defid_mapping (defid, resolver.item_cast);\n+      }\n+\n     return resolver.translated;\n   }\n \n@@ -371,18 +383,12 @@ class ASTLowerTraitItem : public ASTLoweringBase\n \t\t\t\tstd::move (block_expr), func.get_outer_attrs (),\n \t\t\t\tfunc.get_locus ());\n     translated = trait_item;\n-    mappings->insert_hir_trait_item (mapping.get_crate_num (),\n-\t\t\t\t     mapping.get_hirid (), translated);\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       trait_item->get_locus ());\n \n     // add the mappings for the function params at the end\n     for (auto &param : trait_item->get_decl ().get_function_params ())\n       {\n-\tmappings->insert_hir_param (mapping.get_crate_num (),\n-\t\t\t\t    param.get_mappings ().get_hirid (), &param);\n-\tmappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t\t   param.get_locus ());\n+\tmappings->insert_hir_param (&param);\n+\tmappings->insert_location (mapping.get_hirid (), param.get_locus ());\n       }\n   }\n \n@@ -451,26 +457,17 @@ class ASTLowerTraitItem : public ASTLoweringBase\n \t\t\t\tstd::move (block_expr),\n \t\t\t\tmethod.get_outer_attrs (), method.get_locus ());\n     translated = trait_item;\n-    mappings->insert_hir_trait_item (mapping.get_crate_num (),\n-\t\t\t\t     mapping.get_hirid (), translated);\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       trait_item->get_locus ());\n \n     // insert mappings for self\n-    mappings->insert_hir_self_param (crate_num,\n-\t\t\t\t     self_param.get_mappings ().get_hirid (),\n-\t\t\t\t     &self_param);\n-    mappings->insert_location (crate_num,\n-\t\t\t       self_param.get_mappings ().get_hirid (),\n+    mappings->insert_hir_self_param (&self_param);\n+    mappings->insert_location (self_param.get_mappings ().get_hirid (),\n \t\t\t       self_param.get_locus ());\n \n     // add the mappings for the function params at the end\n     for (auto &param : trait_item->get_decl ().get_function_params ())\n       {\n-\tmappings->insert_hir_param (mapping.get_crate_num (),\n-\t\t\t\t    param.get_mappings ().get_hirid (), &param);\n-\tmappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t\t   param.get_locus ());\n+\tmappings->insert_hir_param (&param);\n+\tmappings->insert_location (mapping.get_hirid (), param.get_locus ());\n       }\n   }\n \n@@ -494,10 +491,6 @@ class ASTLowerTraitItem : public ASTLoweringBase\n \t\t\t\t constant.get_outer_attrs (),\n \t\t\t\t constant.get_locus ());\n     translated = trait_item;\n-    mappings->insert_hir_trait_item (mapping.get_crate_num (),\n-\t\t\t\t     mapping.get_hirid (), translated);\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       trait_item->get_locus ());\n   }\n \n   void visit (AST::TraitItemType &type) override\n@@ -514,10 +507,6 @@ class ASTLowerTraitItem : public ASTLoweringBase\n \t\t\t\tstd::move (type_param_bounds),\n \t\t\t\ttype.get_outer_attrs (), type.get_locus ());\n     translated = trait_item;\n-    mappings->insert_hir_trait_item (mapping.get_crate_num (),\n-\t\t\t\t     mapping.get_hirid (), translated);\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       trait_item->get_locus ());\n   }\n \n private:"}, {"sha": "fefc938b8e57a14366f0424353582c152adc4eb1", "filename": "gcc/rust/hir/rust-ast-lower-item.cc", "status": "modified", "additions": 23, "deletions": 90, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -28,7 +28,17 @@ ASTLoweringItem::translate (AST::Item *item)\n   item->accept_vis (resolver);\n \n   if (resolver.translated != nullptr)\n-    resolver.handle_outer_attributes (*resolver.translated);\n+    {\n+      auto id = resolver.translated->get_mappings ().get_hirid ();\n+      auto defid = resolver.translated->get_mappings ().get_defid ();\n+      auto locus = resolver.translated->get_locus ();\n+\n+      resolver.handle_outer_attributes (*resolver.translated);\n+      resolver.mappings->insert_ast_item (item);\n+      resolver.mappings->insert_hir_item (resolver.translated);\n+      resolver.mappings->insert_location (id, locus);\n+      resolver.mappings->insert_defid_mapping (defid, resolver.translated);\n+    }\n \n   return resolver.translated;\n }\n@@ -53,21 +63,14 @@ ASTLoweringItem::visit (AST::Module &module)\n     }\n \n   // should be lowered/copied from module.get_in/outer_attrs()\n-  AST::AttrVec inner_attrs;\n-  AST::AttrVec outer_attrs;\n+  AST::AttrVec inner_attrs = module.get_inner_attrs ();\n+  AST::AttrVec outer_attrs = module.get_outer_attrs ();\n \n   translated\n     = new HIR::Module (mapping, module.get_name (), module.get_locus (),\n \t\t       std::move (items), std::move (vis),\n \t\t       std::move (inner_attrs), std::move (outer_attrs));\n-\n-  mappings->insert_defid_mapping (mapping.get_defid (), translated);\n-  mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t     translated);\n-  mappings->insert_module (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t   static_cast<Module *> (translated));\n-  mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t     module.get_locus ());\n+  mappings->insert_module (static_cast<Module *> (translated));\n }\n \n void\n@@ -102,12 +105,6 @@ ASTLoweringItem::visit (AST::TypeAlias &alias)\n \t\t\t  std::unique_ptr<HIR::Type> (existing_type),\n \t\t\t  std::move (vis), alias.get_outer_attrs (),\n \t\t\t  alias.get_locus ());\n-\n-  mappings->insert_defid_mapping (mapping.get_defid (), translated);\n-  mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t     translated);\n-  mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t     alias.get_locus ());\n }\n \n void\n@@ -165,12 +162,6 @@ ASTLoweringItem::visit (AST::TupleStruct &struct_decl)\n \t\t\t\t     std::move (where_clause), vis,\n \t\t\t\t     struct_decl.get_outer_attrs (),\n \t\t\t\t     struct_decl.get_locus ());\n-\n-  mappings->insert_defid_mapping (mapping.get_defid (), translated);\n-  mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t     translated);\n-  mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t     struct_decl.get_locus ());\n }\n \n void\n@@ -233,12 +224,6 @@ ASTLoweringItem::visit (AST::StructStruct &struct_decl)\n \t\t\t\t      std::move (where_clause), is_unit, vis,\n \t\t\t\t      struct_decl.get_outer_attrs (),\n \t\t\t\t      struct_decl.get_locus ());\n-\n-  mappings->insert_defid_mapping (mapping.get_defid (), translated);\n-  mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t     translated);\n-  mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t     struct_decl.get_locus ());\n }\n \n void\n@@ -282,12 +267,6 @@ ASTLoweringItem::visit (AST::Enum &enum_decl)\n \t\t\t      std::move (where_clause), /* is_unit, */\n \t\t\t      std::move (items), enum_decl.get_outer_attrs (),\n \t\t\t      enum_decl.get_locus ());\n-\n-  mappings->insert_defid_mapping (mapping.get_defid (), translated);\n-  mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t     translated);\n-  mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t     enum_decl.get_locus ());\n }\n \n void\n@@ -347,12 +326,6 @@ ASTLoweringItem::visit (AST::Union &union_decl)\n \t\t      std::move (generic_params), std::move (where_clause),\n \t\t      std::move (variants), union_decl.get_outer_attrs (),\n \t\t      union_decl.get_locus ());\n-\n-  mappings->insert_defid_mapping (mapping.get_defid (), translated);\n-  mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t     translated);\n-  mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t     union_decl.get_locus ());\n }\n \n void\n@@ -374,11 +347,6 @@ ASTLoweringItem::visit (AST::StaticItem &var)\n \t\t\t\t    std::unique_ptr<HIR::Type> (type),\n \t\t\t\t    std::unique_ptr<HIR::Expr> (expr), vis,\n \t\t\t\t    var.get_outer_attrs (), var.get_locus ());\n-\n-  mappings->insert_defid_mapping (mapping.get_defid (), translated);\n-  mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t     translated);\n-  mappings->insert_location (crate_num, mapping.get_hirid (), var.get_locus ());\n }\n \n void\n@@ -399,12 +367,6 @@ ASTLoweringItem::visit (AST::ConstantItem &constant)\n \t\t\t\t      std::unique_ptr<HIR::Expr> (expr),\n \t\t\t\t      constant.get_outer_attrs (),\n \t\t\t\t      constant.get_locus ());\n-\n-  mappings->insert_defid_mapping (mapping.get_defid (), translated);\n-  mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t     translated);\n-  mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t     constant.get_locus ());\n }\n \n void\n@@ -470,8 +432,7 @@ ASTLoweringItem::visit (AST::Function &function)\n \t\t\t\t mappings->get_next_hir_id (crate_num),\n \t\t\t\t mappings->get_next_localdef_id (crate_num));\n \n-  mappings->insert_location (crate_num,\n-\t\t\t     function_body->get_mappings ().get_hirid (),\n+  mappings->insert_location (function_body->get_mappings ().get_hirid (),\n \t\t\t     function.get_locus ());\n \n   auto fn\n@@ -482,19 +443,11 @@ ASTLoweringItem::visit (AST::Function &function)\n \t\t\t std::move (vis), function.get_outer_attrs (),\n \t\t\t HIR::SelfParam::error (), locus);\n \n-  mappings->insert_defid_mapping (mapping.get_defid (), translated);\n-  mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t     fn);\n-  mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t     function.get_locus ());\n-\n   // add the mappings for the function params at the end\n   for (auto &param : fn->get_function_params ())\n     {\n-      mappings->insert_hir_param (mapping.get_crate_num (),\n-\t\t\t\t  param.get_mappings ().get_hirid (), &param);\n-      mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t\t param.get_locus ());\n+      mappings->insert_hir_param (&param);\n+      mappings->insert_location (mapping.get_hirid (), param.get_locus ());\n     }\n \n   translated = fn;\n@@ -573,14 +526,7 @@ ASTLoweringItem::visit (AST::InherentImpl &impl_block)\n     impl_block.get_locus ());\n   translated = hir_impl_block;\n \n-  mappings->insert_defid_mapping (mapping.get_defid (), translated);\n-  mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t     translated);\n-  mappings->insert_hir_impl_block (mapping.get_crate_num (),\n-\t\t\t\t   mapping.get_hirid (), hir_impl_block);\n-  mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t     impl_block.get_locus ());\n-\n+  mappings->insert_hir_impl_block (hir_impl_block);\n   for (auto &impl_item_id : impl_item_ids)\n     {\n       mappings->insert_impl_item_mapping (impl_item_id, hir_impl_block);\n@@ -648,12 +594,6 @@ ASTLoweringItem::visit (AST::Trait &trait)\n \t\t      trait.get_outer_attrs (), trait.get_locus ());\n   translated = hir_trait;\n \n-  mappings->insert_defid_mapping (mapping.get_defid (), translated);\n-  mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t     translated);\n-  mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t     trait.get_locus ());\n-\n   for (auto trait_item_id : trait_item_ids)\n     {\n       mappings->insert_trait_item_mapping (trait_item_id, hir_trait);\n@@ -735,14 +675,7 @@ ASTLoweringItem::visit (AST::TraitImpl &impl_block)\n     impl_block.get_locus ());\n   translated = hir_impl_block;\n \n-  mappings->insert_defid_mapping (mapping.get_defid (), translated);\n-  mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t     translated);\n-  mappings->insert_hir_impl_block (mapping.get_crate_num (),\n-\t\t\t\t   mapping.get_hirid (), hir_impl_block);\n-  mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t     impl_block.get_locus ());\n-\n+  mappings->insert_hir_impl_block (hir_impl_block);\n   for (auto &impl_item_id : impl_item_ids)\n     {\n       mappings->insert_impl_item_mapping (impl_item_id, hir_impl_block);\n@@ -775,8 +708,8 @@ ASTLoweringSimplePath::lower (const AST::SimplePathSegment &segment)\n \n   auto hir_seg = HIR::SimplePathSegment (mapping);\n \n-  mappings->insert_node_to_hir (crate_num, node_id, mapping.get_hirid ());\n-  mappings->insert_simple_path_segment (crate_num, node_id, &segment);\n+  mappings->insert_node_to_hir (node_id, mapping.get_hirid ());\n+  // mappings->insert_simple_path_segment (crate_num, node_id, &segment);\n \n   return hir_seg;\n }\n@@ -798,8 +731,8 @@ ASTLoweringSimplePath::lower (const AST::SimplePath &path)\n   auto lowered\n     = HIR::SimplePath (std::move (segments), mapping, path.get_locus ());\n \n-  mappings->insert_node_to_hir (crate_num, node_id, mapping.get_hirid ());\n-  mappings->insert_simple_path (crate_num, node_id, &path);\n+  mappings->insert_node_to_hir (node_id, mapping.get_hirid ());\n+  // mappings->insert_simple_path (crate_num, node_id, &path);\n \n   return lowered;\n }"}, {"sha": "2421ca8465130880894e79ce28c15d0f94ba1535", "filename": "gcc/rust/hir/rust-ast-lower-pattern.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.cc?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -133,11 +133,10 @@ ASTLoweringPattern::visit (AST::StructPattern &pattern)\n \t}\n \n       // insert the reverse mappings and locations\n-      auto crate_num = f->get_mappings ().get_crate_num ();\n       auto field_id = f->get_mappings ().get_hirid ();\n       auto field_node_id = f->get_mappings ().get_nodeid ();\n-      mappings->insert_location (crate_num, field_id, f->get_locus ());\n-      mappings->insert_node_to_hir (crate_num, field_node_id, field_id);\n+      mappings->insert_location (field_id, f->get_locus ());\n+      mappings->insert_node_to_hir (field_node_id, field_id);\n \n       // add it to the lowered fields list\n       fields.push_back (std::unique_ptr<HIR::StructPatternField> (f));"}, {"sha": "aab99f602d5f41752f8e927a1fb0cc6ae88f42f4", "filename": "gcc/rust/hir/rust-ast-lower-pattern.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-pattern.h?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -36,12 +36,8 @@ class ASTLoweringPattern : public ASTLoweringBase\n \n     rust_assert (resolver.translated != nullptr);\n \n-    resolver.mappings->insert_hir_pattern (\n-      resolver.translated->get_pattern_mappings ().get_crate_num (),\n-      resolver.translated->get_pattern_mappings ().get_hirid (),\n-      resolver.translated);\n+    resolver.mappings->insert_hir_pattern (resolver.translated);\n     resolver.mappings->insert_location (\n-      resolver.translated->get_pattern_mappings ().get_crate_num (),\n       resolver.translated->get_pattern_mappings ().get_hirid (),\n       pattern->get_locus ());\n "}, {"sha": "2b26ae3835cb571e5c80691204a423b05d8e2ad0", "filename": "gcc/rust/hir/rust-ast-lower-stmt.h", "status": "modified", "additions": 24, "deletions": 61, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -40,8 +40,24 @@ class ASTLoweringStmt : public ASTLoweringBase\n   {\n     ASTLoweringStmt resolver;\n     stmt->accept_vis (resolver);\n+\n     rust_assert (resolver.translated != nullptr);\n     *terminated = resolver.terminated;\n+    resolver.mappings->insert_location (\n+      resolver.translated->get_mappings ().get_hirid (),\n+      resolver.translated->get_locus ());\n+    resolver.mappings->insert_hir_stmt (resolver.translated);\n+    if (resolver.translated->is_item ())\n+      {\n+\tHIR::Item *i = static_cast<HIR::Item *> (resolver.translated);\n+\n+\tauto defid = resolver.translated->get_mappings ().get_defid ();\n+\n+\tresolver.handle_outer_attributes (*i);\n+\tresolver.mappings->insert_hir_item (i);\n+\tresolver.mappings->insert_defid_mapping (defid, i);\n+      }\n+\n     return resolver.translated;\n   }\n \n@@ -60,9 +76,6 @@ class ASTLoweringStmt : public ASTLoweringBase\n \t\t\t\t    std::unique_ptr<HIR::ExprWithBlock> (expr),\n \t\t\t\t    stmt.get_locus (),\n \t\t\t\t    !stmt.is_semicolon_followed ());\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       stmt.get_locus ());\n-    mappings->insert_hir_stmt (crate_num, mapping.get_hirid (), translated);\n   }\n \n   void visit (AST::ExprStmtWithoutBlock &stmt) override\n@@ -78,9 +91,6 @@ class ASTLoweringStmt : public ASTLoweringBase\n       = new HIR::ExprStmtWithoutBlock (mapping,\n \t\t\t\t       std::unique_ptr<HIR::Expr> (expr),\n \t\t\t\t       stmt.get_locus ());\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       stmt.get_locus ());\n-    mappings->insert_hir_stmt (crate_num, mapping.get_hirid (), translated);\n   }\n \n   void visit (AST::ConstantItem &constant) override\n@@ -95,20 +105,11 @@ class ASTLoweringStmt : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n-    HIR::ConstantItem *constant_item\n-      = new HIR::ConstantItem (mapping, constant.get_identifier (), vis,\n-\t\t\t       std::unique_ptr<HIR::Type> (type),\n-\t\t\t       std::unique_ptr<HIR::Expr> (expr),\n-\t\t\t       constant.get_outer_attrs (),\n-\t\t\t       constant.get_locus ());\n-    translated = constant_item;\n-\n-    mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t       constant_item);\n-    mappings->insert_hir_stmt (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t       constant_item);\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       constant.get_locus ());\n+    translated = new HIR::ConstantItem (mapping, constant.get_identifier (),\n+\t\t\t\t\tvis, std::unique_ptr<HIR::Type> (type),\n+\t\t\t\t\tstd::unique_ptr<HIR::Expr> (expr),\n+\t\t\t\t\tconstant.get_outer_attrs (),\n+\t\t\t\t\tconstant.get_locus ());\n   }\n \n   void visit (AST::LetStmt &stmt) override\n@@ -132,9 +133,6 @@ class ASTLoweringStmt : public ASTLoweringBase\n \t\t\t  std::unique_ptr<HIR::Expr> (init_expression),\n \t\t\t  std::unique_ptr<HIR::Type> (type),\n \t\t\t  stmt.get_outer_attrs (), stmt.get_locus ());\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       stmt.get_locus ());\n-    mappings->insert_hir_stmt (crate_num, mapping.get_hirid (), translated);\n   }\n \n   void visit (AST::TupleStruct &struct_decl) override\n@@ -181,11 +179,6 @@ class ASTLoweringStmt : public ASTLoweringBase\n \t\t\t\t       std::move (where_clause), vis,\n \t\t\t\t       struct_decl.get_outer_attrs (),\n \t\t\t\t       struct_decl.get_locus ());\n-\n-    mappings->insert_hir_stmt (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t       translated);\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       struct_decl.get_locus ());\n   }\n \n   void visit (AST::StructStruct &struct_decl) override\n@@ -237,11 +230,6 @@ class ASTLoweringStmt : public ASTLoweringBase\n \t\t\t\t\tstd::move (where_clause), is_unit, vis,\n \t\t\t\t\tstruct_decl.get_outer_attrs (),\n \t\t\t\t\tstruct_decl.get_locus ());\n-\n-    mappings->insert_hir_stmt (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t       translated);\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       struct_decl.get_locus ());\n   }\n \n   void visit (AST::Union &union_decl) override\n@@ -291,11 +279,6 @@ class ASTLoweringStmt : public ASTLoweringBase\n \t\t\tstd::move (generic_params), std::move (where_clause),\n \t\t\tstd::move (variants), union_decl.get_outer_attrs (),\n \t\t\tunion_decl.get_locus ());\n-\n-    mappings->insert_hir_stmt (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t       translated);\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       union_decl.get_locus ());\n   }\n \n   void visit (AST::Enum &enum_decl) override\n@@ -329,11 +312,6 @@ class ASTLoweringStmt : public ASTLoweringBase\n \t\t\t\tstd::move (where_clause), /* is_unit, */\n \t\t\t\tstd::move (items), enum_decl.get_outer_attrs (),\n \t\t\t\tenum_decl.get_locus ());\n-\n-    mappings->insert_hir_stmt (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t       translated);\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       enum_decl.get_locus ());\n   }\n \n   void visit (AST::EmptyStmt &empty) override\n@@ -344,11 +322,6 @@ class ASTLoweringStmt : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n     translated = new HIR::EmptyStmt (mapping, empty.get_locus ());\n-\n-    mappings->insert_hir_stmt (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t       translated);\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       empty.get_locus ());\n   }\n \n   void visit (AST::Function &function) override\n@@ -406,8 +379,7 @@ class ASTLoweringStmt : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n-    mappings->insert_location (crate_num,\n-\t\t\t       function_body->get_mappings ().get_hirid (),\n+    mappings->insert_location (function_body->get_mappings ().get_hirid (),\n \t\t\t       function.get_locus ());\n \n     auto fn\n@@ -418,20 +390,11 @@ class ASTLoweringStmt : public ASTLoweringBase\n \t\t\t   std::move (vis), function.get_outer_attrs (),\n \t\t\t   HIR::SelfParam::error (), locus);\n \n-    mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t       fn);\n-    mappings->insert_hir_stmt (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t       fn);\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       function.get_locus ());\n-\n     // add the mappings for the function params at the end\n     for (auto &param : fn->get_function_params ())\n       {\n-\tmappings->insert_hir_param (mapping.get_crate_num (),\n-\t\t\t\t    param.get_mappings ().get_hirid (), &param);\n-\tmappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t\t   param.get_locus ());\n+\tmappings->insert_hir_param (&param);\n+\tmappings->insert_location (mapping.get_hirid (), param.get_locus ());\n       }\n \n     translated = fn;"}, {"sha": "dadf3594904eb7de053e8c68d72f00a6b11e7cde", "filename": "gcc/rust/hir/rust-ast-lower-struct-field-expr.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Frust-ast-lower-struct-field-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Frust-ast-lower-struct-field-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-struct-field-expr.h?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -36,11 +36,8 @@ class ASTLowerStructExprField : public ASTLoweringBase\n     field->accept_vis (compiler);\n     rust_assert (compiler.translated != nullptr);\n \n-    compiler.mappings->insert_hir_struct_field (\n-      compiler.translated->get_mappings ().get_crate_num (),\n-      compiler.translated->get_mappings ().get_hirid (), compiler.translated);\n+    compiler.mappings->insert_hir_struct_field (compiler.translated);\n     compiler.mappings->insert_location (\n-      compiler.translated->get_mappings ().get_crate_num (),\n       compiler.translated->get_mappings ().get_hirid (), field->get_locus ());\n \n     return compiler.translated;"}, {"sha": "317fe851a88b3164fbab63209a6edad9faa33072", "filename": "gcc/rust/hir/rust-ast-lower-type.h", "status": "modified", "additions": 10, "deletions": 25, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -84,7 +84,6 @@ class ASTLowerTypePath : public ASTLoweringBase\n       = new HIR::TypePath (std::move (mapping), std::move (translated_segments),\n \t\t\t   path.get_locus (),\n \t\t\t   path.has_opening_scope_resolution_op ());\n-    mappings->insert_hir_type (crate_num, hirid, translated);\n   }\n \n protected:\n@@ -124,9 +123,10 @@ class ASTLoweringType : public ASTLoweringBase\n     type->accept_vis (resolver);\n \n     rust_assert (resolver.translated != nullptr);\n+    resolver.mappings->insert_hir_type (resolver.translated);\n     resolver.mappings->insert_location (\n-      resolver.translated->get_mappings ().get_crate_num (),\n-      resolver.translated->get_mappings ().get_hirid (), type->get_locus ());\n+      resolver.translated->get_mappings ().get_hirid (),\n+      resolver.translated->get_locus ());\n \n     return resolver.translated;\n   }\n@@ -229,8 +229,6 @@ class ASTLoweringType : public ASTLoweringBase\n \t\t\t    std::unique_ptr<HIR::Type> (translated_type),\n \t\t\t    std::unique_ptr<HIR::Expr> (array_size),\n \t\t\t    type.get_locus ());\n-    mappings->insert_hir_type (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t       translated);\n   }\n \n   void visit (AST::ReferenceType &type) override\n@@ -250,9 +248,6 @@ class ASTLoweringType : public ASTLoweringBase\n \t\t\t\t\t\t\t     : Mutability::Imm,\n \t\t\t\t\t std::unique_ptr<HIR::Type> (base_type),\n \t\t\t\t\t type.get_locus (), lifetime);\n-\n-    mappings->insert_hir_type (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t       translated);\n   }\n \n   void visit (AST::RawPointerType &type) override\n@@ -273,9 +268,6 @@ class ASTLoweringType : public ASTLoweringBase\n \t\t\t\t   : Mutability::Imm,\n \t\t\t\t std::unique_ptr<HIR::Type> (base_type),\n \t\t\t\t type.get_locus ());\n-\n-    mappings->insert_hir_type (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t       translated);\n   }\n \n   void visit (AST::SliceType &type) override\n@@ -291,9 +283,6 @@ class ASTLoweringType : public ASTLoweringBase\n     translated\n       = new HIR::SliceType (mapping, std::unique_ptr<HIR::Type> (base_type),\n \t\t\t    type.get_locus ());\n-\n-    mappings->insert_hir_type (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t       translated);\n   }\n \n   void visit (AST::InferredType &type) override\n@@ -304,9 +293,6 @@ class ASTLoweringType : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n     translated = new HIR::InferredType (mapping, type.get_locus ());\n-\n-    mappings->insert_hir_type (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t       translated);\n   }\n \n   void visit (AST::NeverType &type) override\n@@ -317,9 +303,6 @@ class ASTLoweringType : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n     translated = new HIR::NeverType (mapping, type.get_locus ());\n-\n-    mappings->insert_hir_type (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t       translated);\n   }\n \n   void visit (AST::TraitObjectTypeOneBound &type) override;\n@@ -344,11 +327,8 @@ class ASTLowerGenericParam : public ASTLoweringBase\n \n     rust_assert (resolver.translated != nullptr);\n     resolver.mappings->insert_location (\n-      resolver.translated->get_mappings ().get_crate_num (),\n       resolver.translated->get_mappings ().get_hirid (), param->get_locus ());\n-    resolver.mappings->insert_hir_generic_param (\n-      resolver.translated->get_mappings ().get_crate_num (),\n-      resolver.translated->get_mappings ().get_hirid (), resolver.translated);\n+    resolver.mappings->insert_hir_generic_param (resolver.translated);\n \n     return resolver.translated;\n   }\n@@ -440,7 +420,6 @@ class ASTLoweringTypeBounds : public ASTLoweringBase\n \n     rust_assert (resolver.translated != nullptr);\n     resolver.mappings->insert_location (\n-      resolver.translated->get_mappings ().get_crate_num (),\n       resolver.translated->get_mappings ().get_hirid (),\n       resolver.translated->get_locus ());\n \n@@ -486,7 +465,13 @@ class ASTLowerWhereClauseItem : public ASTLoweringBase\n   {\n     ASTLowerWhereClauseItem compiler;\n     item.accept_vis (compiler);\n+\n     rust_assert (compiler.translated != nullptr);\n+    // FIXME\n+    // compiler.mappings->insert_location (\n+    //   compiler.translated->get_mappings ().get_hirid (),\n+    //   compiler.translated->get_locus ());\n+\n     return compiler.translated;\n   }\n "}, {"sha": "0bec8b088afea3a0ad59e864a3440d351e19204b", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -58,14 +58,14 @@ ASTLowering::ASTLowering (AST::Crate &astCrate) : astCrate (astCrate) {}\n \n ASTLowering::~ASTLowering () {}\n \n-HIR::Crate\n+std::unique_ptr<HIR::Crate>\n ASTLowering::Resolve (AST::Crate &astCrate)\n {\n   ASTLowering resolver (astCrate);\n   return resolver.go ();\n }\n \n-HIR::Crate\n+std::unique_ptr<HIR::Crate>\n ASTLowering::go ()\n {\n   std::vector<std::unique_ptr<HIR::Item> > items;\n@@ -83,7 +83,8 @@ ASTLowering::go ()\n \t\t\t\t mappings->get_next_hir_id (crate_num),\n \t\t\t\t UNKNOWN_LOCAL_DEFID);\n \n-  return HIR::Crate (std::move (items), astCrate.get_inner_attrs (), mapping);\n+  return std::unique_ptr<HIR::Crate> (\n+    new HIR::Crate (std::move (items), astCrate.get_inner_attrs (), mapping));\n }\n \n // rust-ast-lower-block.h\n@@ -413,9 +414,7 @@ ASTLowerPathInExpression::visit (AST::PathInExpression &expr)\n \n       // insert the mappings for the segment\n       HIR::PathExprSegment *lowered_seg = &path_segments.back ();\n-      mappings->insert_hir_path_expr_seg (\n-\tlowered_seg->get_mappings ().get_crate_num (),\n-\tlowered_seg->get_mappings ().get_hirid (), lowered_seg);\n+      mappings->insert_hir_path_expr_seg (lowered_seg);\n     }\n   auto crate_num = mappings->get_current_crate ();\n   Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n@@ -461,9 +460,7 @@ ASTLowerQualPathInExpression::visit (AST::QualifiedPathInExpression &expr)\n \n       // insert the mappings for the segment\n       HIR::PathExprSegment *lowered_seg = &path_segments.back ();\n-      mappings->insert_hir_path_expr_seg (\n-\tlowered_seg->get_mappings ().get_crate_num (),\n-\tlowered_seg->get_mappings ().get_hirid (), lowered_seg);\n+      mappings->insert_hir_path_expr_seg (lowered_seg);\n     }\n \n   auto crate_num = mappings->get_current_crate ();"}, {"sha": "e726b4b8282228e3eeeaf480686ffda527f291fb", "filename": "gcc/rust/hir/rust-ast-lower.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Frust-ast-lower.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Frust-ast-lower.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.h?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -43,12 +43,12 @@ translate_visibility (const AST::Visibility &vis);\n class ASTLowering\n {\n public:\n-  static HIR::Crate Resolve (AST::Crate &astCrate);\n+  static std::unique_ptr<HIR::Crate> Resolve (AST::Crate &astCrate);\n   ~ASTLowering ();\n \n private:\n   ASTLowering (AST::Crate &astCrate);\n-  HIR::Crate go ();\n+  std::unique_ptr<HIR::Crate> go ();\n \n   AST::Crate &astCrate;\n };"}, {"sha": "1fcecb828ad1fe012e1714d8bf9b0ea7e9d5efc0", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -75,9 +75,12 @@ class TypeParam : public GenericParam\n   // Copy constructor uses clone\n   TypeParam (TypeParam const &other)\n     : GenericParam (other.mappings), outer_attr (other.outer_attr),\n-      type_representation (other.type_representation),\n-      type (other.type->clone_type ()), locus (other.locus)\n+      type_representation (other.type_representation), locus (other.locus)\n   {\n+    // guard to prevent null pointer dereference\n+    if (other.type != nullptr)\n+      type = other.type->clone_type ();\n+\n     type_param_bounds.reserve (other.type_param_bounds.size ());\n     for (const auto &e : other.type_param_bounds)\n       type_param_bounds.push_back (e->clone_type_param_bound ());\n@@ -87,19 +90,22 @@ class TypeParam : public GenericParam\n   TypeParam &operator= (TypeParam const &other)\n   {\n     type_representation = other.type_representation;\n-    // type_param_bounds = other.type_param_bounds;\n-    type = other.type->clone_type ();\n     outer_attr = other.outer_attr;\n     locus = other.locus;\n     mappings = other.mappings;\n \n+    // guard to prevent null pointer dereference\n+    if (other.type != nullptr)\n+      type = other.type->clone_type ();\n+    else\n+      type = nullptr;\n+\n     type_param_bounds.reserve (other.type_param_bounds.size ());\n     for (const auto &e : other.type_param_bounds)\n       type_param_bounds.push_back (e->clone_type_param_bound ());\n \n     return *this;\n   }\n-\n   // move constructors\n   TypeParam (TypeParam &&other) = default;\n   TypeParam &operator= (TypeParam &&other) = default;\n@@ -1111,11 +1117,16 @@ class Function : public VisItem, public ImplItem\n     : VisItem (other), qualifiers (other.qualifiers),\n       function_name (other.function_name),\n       function_params (other.function_params),\n-      return_type (other.return_type->clone_type ()),\n       where_clause (other.where_clause),\n       function_body (other.function_body->clone_block_expr ()),\n       self (other.self), locus (other.locus)\n   {\n+    // guard to prevent null dereference (always required)\n+    if (other.return_type != nullptr)\n+      return_type = other.return_type->clone_type ();\n+    else\n+      return_type = nullptr;\n+\n     generic_params.reserve (other.generic_params.size ());\n     for (const auto &e : other.generic_params)\n       generic_params.push_back (e->clone_generic_param ());\n@@ -1128,7 +1139,13 @@ class Function : public VisItem, public ImplItem\n     function_name = other.function_name;\n     qualifiers = other.qualifiers;\n     function_params = other.function_params;\n-    return_type = other.return_type->clone_type ();\n+\n+    // guard to prevent null dereference (always required)\n+    if (other.return_type != nullptr)\n+      return_type = other.return_type->clone_type ();\n+    else\n+      return_type = nullptr;\n+\n     where_clause = other.where_clause;\n     function_body = other.function_body->clone_block_expr ();\n     locus = other.locus;"}, {"sha": "03cf5f5d2e89c2c9d9880ae32b507cf06aff93b2", "filename": "gcc/rust/hir/tree/rust-hir-path.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -1001,6 +1001,8 @@ class SimplePath\n \t\t\t    Location ());\n   }\n \n+  bool is_error () const { return segments.empty (); }\n+\n   const Analysis::NodeMapping &get_mappings () const { return mappings; }\n   const Location &get_locus () const { return locus; }\n };"}, {"sha": "5247b0aa0f0b78a195d69abdd85d30d192fb1465", "filename": "gcc/rust/hir/tree/rust-hir-stmt.h", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -91,20 +91,41 @@ class LetStmt : public Stmt\n   // Copy constructor with clone\n   LetStmt (LetStmt const &other)\n     : Stmt (other.mappings), outer_attrs (other.outer_attrs),\n-      variables_pattern (other.variables_pattern->clone_pattern ()),\n-      type (other.type->clone_type ()),\n-      init_expr (other.init_expr->clone_expr ()), locus (other.locus)\n-  {}\n+      locus (other.locus)\n+  {\n+    // guard to prevent null dereference (only required if error state)\n+    if (other.variables_pattern != nullptr)\n+      variables_pattern = other.variables_pattern->clone_pattern ();\n+\n+    // guard to prevent null dereference (always required)\n+    if (other.init_expr != nullptr)\n+      init_expr = other.init_expr->clone_expr ();\n+    if (other.type != nullptr)\n+      type = other.type->clone_type ();\n+  }\n \n   // Overloaded assignment operator to clone\n   LetStmt &operator= (LetStmt const &other)\n   {\n-    variables_pattern = other.variables_pattern->clone_pattern ();\n-    init_expr = other.init_expr->clone_expr ();\n-    type = other.type->clone_type ();\n     outer_attrs = other.outer_attrs;\n     locus = other.locus;\n \n+    // guard to prevent null dereference (only required if error state)\n+    if (other.variables_pattern != nullptr)\n+      variables_pattern = other.variables_pattern->clone_pattern ();\n+    else\n+      variables_pattern = nullptr;\n+\n+    // guard to prevent null dereference (always required)\n+    if (other.init_expr != nullptr)\n+      init_expr = other.init_expr->clone_expr ();\n+    else\n+      init_expr = nullptr;\n+    if (other.type != nullptr)\n+      type = other.type->clone_type ();\n+    else\n+      type = nullptr;\n+\n     return *this;\n   }\n "}, {"sha": "edc4b718c1b90021c411b4412423776bea3c84d4", "filename": "gcc/rust/lint/rust-lint-marklive.cc", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive.cc?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -80,13 +80,12 @@ MarkLive::Analysis (HIR::Crate &crate)\n void\n MarkLive::go (HIR::Crate &crate)\n {\n-  CrateNum crateNum = crate.get_mappings ().get_crate_num ();\n   while (!worklist.empty ())\n     {\n       HirId hirId = worklist.back ();\n       worklist.pop_back ();\n       scannedSymbols.emplace (hirId);\n-      HIR::Item *item = mappings->lookup_hir_item (crateNum, hirId);\n+      HIR::Item *item = mappings->lookup_hir_item (hirId);\n       liveSymbols.emplace (hirId);\n       if (item != nullptr)\n \t{\n@@ -96,7 +95,7 @@ MarkLive::go (HIR::Crate &crate)\n \t{ // the item maybe inside a trait impl\n \t  HirId parent_impl_id = UNKNOWN_HIRID;\n \t  HIR::ImplItem *implItem\n-\t    = mappings->lookup_hir_implitem (crateNum, hirId, &parent_impl_id);\n+\t    = mappings->lookup_hir_implitem (hirId, &parent_impl_id);\n \t  if (implItem != nullptr)\n \t    implItem->accept_vis (*this);\n \t}\n@@ -120,13 +119,11 @@ MarkLive::visit (HIR::PathInExpression &expr)\n \n   // node back to HIR\n   HirId ref;\n-  bool ok = mappings->lookup_node_to_hir (expr.get_mappings ().get_crate_num (),\n-\t\t\t\t\t  ref_node_id, &ref);\n+  bool ok = mappings->lookup_node_to_hir (ref_node_id, &ref);\n   rust_assert (ok);\n \n   // it must resolve to some kind of HIR::Item or HIR::InheritImplItem\n-  HIR::Item *resolved_item\n-    = mappings->lookup_hir_item (expr.get_mappings ().get_crate_num (), ref);\n+  HIR::Item *resolved_item = mappings->lookup_hir_item (ref);\n   if (resolved_item != nullptr)\n     {\n       mark_hir_id (resolved_item->get_mappings ().get_hirid ());\n@@ -135,8 +132,7 @@ MarkLive::visit (HIR::PathInExpression &expr)\n     {\n       HirId parent_impl_id = UNKNOWN_HIRID;\n       HIR::ImplItem *resolved_item\n-\t= mappings->lookup_hir_implitem (expr.get_mappings ().get_crate_num (),\n-\t\t\t\t\t ref, &parent_impl_id);\n+\t= mappings->lookup_hir_implitem (ref, &parent_impl_id);\n       if (resolved_item != nullptr)\n \t{\n \t  mark_hir_id (resolved_item->get_impl_mappings ().get_hirid ());\n@@ -159,8 +155,7 @@ MarkLive::visit (HIR::MethodCallExpr &expr)\n \n   // node back to HIR\n   HirId ref;\n-  bool ok = mappings->lookup_node_to_hir (expr.get_mappings ().get_crate_num (),\n-\t\t\t\t\t  ref_node_id, &ref);\n+  bool ok = mappings->lookup_node_to_hir (ref_node_id, &ref);\n   rust_assert (ok);\n   mark_hir_id (ref);\n }\n@@ -185,8 +180,7 @@ MarkLive::visit_path_segment (HIR::PathExprSegment seg)\n \treturn false;\n     }\n   HirId ref;\n-  bool ok = mappings->lookup_node_to_hir (seg.get_mappings ().get_crate_num (),\n-\t\t\t\t\t  ref_node_id, &ref);\n+  bool ok = mappings->lookup_node_to_hir (ref_node_id, &ref);\n   rust_assert (ok);\n   mark_hir_id (ref);\n   return true;\n@@ -261,8 +255,7 @@ MarkLive::visit (HIR::IdentifierExpr &expr)\n \n   // node back to HIR\n   HirId ref;\n-  bool ok = mappings->lookup_node_to_hir (expr.get_mappings ().get_crate_num (),\n-\t\t\t\t\t  ref_node_id, &ref);\n+  bool ok = mappings->lookup_node_to_hir (ref_node_id, &ref);\n   rust_assert (ok);\n   mark_hir_id (ref);\n }\n@@ -274,9 +267,7 @@ MarkLive::visit (HIR::TypeAlias &alias)\n   resolver->lookup_resolved_type (\n     alias.get_type_aliased ()->get_mappings ().get_nodeid (), &ast_node_id);\n   HirId hir_id;\n-  bool ok\n-    = mappings->lookup_node_to_hir (alias.get_mappings ().get_crate_num (),\n-\t\t\t\t    ast_node_id, &hir_id);\n+  bool ok = mappings->lookup_node_to_hir (ast_node_id, &hir_id);\n   rust_assert (ok);\n   mark_hir_id (hir_id);\n }"}, {"sha": "227564cb65a1b754c519e88b49b69f40d8dafe09", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -424,7 +424,7 @@ Parser<ManagedTokenSource>::parse_items ()\n \n // Parses a crate (compilation unit) - entry point\n template <typename ManagedTokenSource>\n-AST::Crate\n+std::unique_ptr<AST::Crate>\n Parser<ManagedTokenSource>::parse_crate ()\n {\n   // parse inner attributes\n@@ -437,7 +437,8 @@ Parser<ManagedTokenSource>::parse_crate ()\n   for (const auto &error : error_table)\n     error.emit_error ();\n \n-  return AST::Crate (std::move (items), std::move (inner_attrs));\n+  return std::unique_ptr<AST::Crate> (\n+    new AST::Crate (std::move (items), std::move (inner_attrs)));\n }\n \n // Parse a contiguous block of inner attributes."}, {"sha": "4cae6ff809c256b6115527317ff7405393294a04", "filename": "gcc/rust/parse/rust-parse.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fparse%2Frust-parse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fparse%2Frust-parse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse.h?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -669,7 +669,7 @@ template <typename ManagedTokenSource> class Parser\n   std::vector<std::unique_ptr<AST::Item> > parse_items ();\n \n   // Main entry point for parser.\n-  AST::Crate parse_crate ();\n+  std::unique_ptr<AST::Crate> parse_crate ();\n \n   // Dumps all lexer output.\n   void debug_dump_lex_output (std::ostream &out);"}, {"sha": "00d993483bcb25c72051f23b5aa62ed37b38624a", "filename": "gcc/rust/privacy/rust-privacy-reporter.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fprivacy%2Frust-privacy-reporter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fprivacy%2Frust-privacy-reporter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-privacy-reporter.cc?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -129,8 +129,8 @@ PrivacyReporter::check_base_type_privacy (Analysis::NodeMapping &node_mappings,\n \tauto ref_id = ty->get_ref ();\n \tNodeId lookup_id;\n \n-\tmappings.lookup_hir_to_node (node_mappings.get_crate_num (), ref_id,\n-\t\t\t\t     &lookup_id);\n+\tbool ok = mappings.lookup_hir_to_node (ref_id, &lookup_id);\n+\trust_assert (ok);\n \n \treturn check_for_privacy_violation (lookup_id, locus);\n       }"}, {"sha": "301182754a4be7a3a55a02fac9a90a6b8e429a15", "filename": "gcc/rust/privacy/rust-visibility-resolver.cc", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.cc?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -72,14 +72,9 @@ VisibilityResolver::resolve_module_path (const HIR::SimplePath &restriction,\n   // present?\n \n   HirId ref;\n-  rust_assert (\n-    mappings.lookup_node_to_hir (restriction.get_mappings ().get_crate_num (),\n-\t\t\t\t ref_node_id, &ref));\n-\n-  auto module\n-    = mappings.lookup_module (restriction.get_mappings ().get_crate_num (),\n-\t\t\t      ref);\n+  rust_assert (mappings.lookup_node_to_hir (ref_node_id, &ref));\n \n+  auto module = mappings.lookup_module (ref);\n   if (!module)\n     {\n       invalid_path.emit_error ();"}, {"sha": "29dbe3436f5e067a09f9e39f07747cf9cbe33ddb", "filename": "gcc/rust/resolve/rust-ast-resolve-implitem.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -147,8 +147,7 @@ class ResolveTopLevelTraitItems : public ResolverBase\n \trust_error_at (r, \"redefined multiple times\");\n       });\n \n-    mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t     function.get_node_id (), cpath);\n+    mappings->insert_canonical_path (function.get_node_id (), cpath);\n   }\n \n   void visit (AST::TraitItemMethod &method) override\n@@ -166,8 +165,7 @@ class ResolveTopLevelTraitItems : public ResolverBase\n \trust_error_at (r, \"redefined multiple times\");\n       });\n \n-    mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t     method.get_node_id (), cpath);\n+    mappings->insert_canonical_path (method.get_node_id (), cpath);\n   }\n \n   void visit (AST::TraitItemConst &constant) override\n@@ -185,8 +183,7 @@ class ResolveTopLevelTraitItems : public ResolverBase\n \trust_error_at (r, \"redefined multiple times\");\n       });\n \n-    mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t     constant.get_node_id (), cpath);\n+    mappings->insert_canonical_path (constant.get_node_id (), cpath);\n   }\n \n   void visit (AST::TraitItemType &type) override\n@@ -204,8 +201,7 @@ class ResolveTopLevelTraitItems : public ResolverBase\n \trust_error_at (r, \"redefined multiple times\");\n       });\n \n-    mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t     type.get_node_id (), cpath);\n+    mappings->insert_canonical_path (type.get_node_id (), cpath);\n   }\n \n private:"}, {"sha": "244bf64d148d69f12a79be73339421cff27777bf", "filename": "gcc/rust/resolve/rust-ast-resolve-item.cc", "status": "modified", "additions": 18, "deletions": 36, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -46,8 +46,7 @@ ResolveTraitItems::visit (AST::TraitItemType &type)\n     = CanonicalPath::new_seg (type.get_node_id (), type.get_identifier ());\n   auto path = prefix.append (decl);\n   auto cpath = canonical_prefix.append (decl);\n-  mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t   type.get_node_id (), cpath);\n+  mappings->insert_canonical_path (type.get_node_id (), cpath);\n \n   for (auto &bound : type.get_type_param_bounds ())\n     ResolveTypeBound::go (bound.get ());\n@@ -60,8 +59,7 @@ ResolveTraitItems::visit (AST::TraitItemFunc &func)\n     func.get_node_id (), func.get_trait_function_decl ().get_identifier ());\n   auto path = prefix.append (decl);\n   auto cpath = canonical_prefix.append (decl);\n-  mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t   func.get_node_id (), cpath);\n+  mappings->insert_canonical_path (func.get_node_id (), cpath);\n \n   NodeId scope_node_id = func.get_node_id ();\n   resolver->get_name_scope ().push (scope_node_id);\n@@ -107,8 +105,7 @@ ResolveTraitItems::visit (AST::TraitItemMethod &func)\n \t\t\t      func.get_trait_method_decl ().get_identifier ());\n   auto path = prefix.append (decl);\n   auto cpath = canonical_prefix.append (decl);\n-  mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t   func.get_node_id (), cpath);\n+  mappings->insert_canonical_path (func.get_node_id (), cpath);\n \n   NodeId scope_node_id = func.get_node_id ();\n   resolver->get_name_scope ().push (scope_node_id);\n@@ -170,8 +167,7 @@ ResolveTraitItems::visit (AST::TraitItemConst &constant)\n \t\t\t\t      constant.get_identifier ());\n   auto path = prefix.append (decl);\n   auto cpath = canonical_prefix.append (decl);\n-  mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t   constant.get_node_id (), cpath);\n+  mappings->insert_canonical_path (constant.get_node_id (), cpath);\n \n   ResolveType::go (constant.get_type ().get ());\n \n@@ -199,8 +195,7 @@ ResolveItem::visit (AST::TypeAlias &alias)\n     = CanonicalPath::new_seg (alias.get_node_id (), alias.get_new_type_name ());\n   auto path = prefix.append (talias);\n   auto cpath = canonical_prefix.append (talias);\n-  mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t   alias.get_node_id (), cpath);\n+  mappings->insert_canonical_path (alias.get_node_id (), cpath);\n \n   NodeId scope_node_id = alias.get_node_id ();\n   resolver->get_type_scope ().push (scope_node_id);\n@@ -223,8 +218,7 @@ ResolveItem::visit (AST::Module &module)\n   auto mod = CanonicalPath::new_seg (module.get_node_id (), module.get_name ());\n   auto path = prefix.append (mod);\n   auto cpath = canonical_prefix.append (mod);\n-  mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t   module.get_node_id (), cpath);\n+  mappings->insert_canonical_path (module.get_node_id (), cpath);\n \n   resolve_visibility (module.get_visibility ());\n \n@@ -259,8 +253,7 @@ ResolveItem::visit (AST::TupleStruct &struct_decl)\n \t\t\t\t      struct_decl.get_identifier ());\n   auto path = prefix.append (decl);\n   auto cpath = canonical_prefix.append (decl);\n-  mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t   struct_decl.get_node_id (), cpath);\n+  mappings->insert_canonical_path (struct_decl.get_node_id (), cpath);\n \n   resolve_visibility (struct_decl.get_visibility ());\n \n@@ -294,8 +287,7 @@ ResolveItem::visit (AST::Enum &enum_decl)\n \t\t\t\t      enum_decl.get_identifier ());\n   auto path = prefix.append (decl);\n   auto cpath = canonical_prefix.append (decl);\n-  mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t   enum_decl.get_node_id (), cpath);\n+  mappings->insert_canonical_path (enum_decl.get_node_id (), cpath);\n \n   resolve_visibility (enum_decl.get_visibility ());\n \n@@ -327,8 +319,7 @@ ResolveItem::visit (AST::EnumItem &item)\n     = CanonicalPath::new_seg (item.get_node_id (), item.get_identifier ());\n   auto path = prefix.append (decl);\n   auto cpath = canonical_prefix.append (decl);\n-  mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t   item.get_node_id (), cpath);\n+  mappings->insert_canonical_path (item.get_node_id (), cpath);\n }\n \n void\n@@ -338,8 +329,7 @@ ResolveItem::visit (AST::EnumItemTuple &item)\n     = CanonicalPath::new_seg (item.get_node_id (), item.get_identifier ());\n   auto path = prefix.append (decl);\n   auto cpath = canonical_prefix.append (decl);\n-  mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t   item.get_node_id (), cpath);\n+  mappings->insert_canonical_path (item.get_node_id (), cpath);\n \n   for (auto &field : item.get_tuple_fields ())\n     {\n@@ -357,8 +347,7 @@ ResolveItem::visit (AST::EnumItemStruct &item)\n     = CanonicalPath::new_seg (item.get_node_id (), item.get_identifier ());\n   auto path = prefix.append (decl);\n   auto cpath = canonical_prefix.append (decl);\n-  mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t   item.get_node_id (), cpath);\n+  mappings->insert_canonical_path (item.get_node_id (), cpath);\n \n   for (auto &field : item.get_struct_fields ())\n     {\n@@ -377,8 +366,7 @@ ResolveItem::visit (AST::EnumItemDiscriminant &item)\n   auto path = prefix.append (decl);\n   auto cpath = canonical_prefix.append (decl);\n \n-  mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t   item.get_node_id (), cpath);\n+  mappings->insert_canonical_path (item.get_node_id (), cpath);\n }\n \n void\n@@ -388,8 +376,7 @@ ResolveItem::visit (AST::StructStruct &struct_decl)\n \t\t\t\t      struct_decl.get_identifier ());\n   auto path = prefix.append (decl);\n   auto cpath = canonical_prefix.append (decl);\n-  mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t   struct_decl.get_node_id (), cpath);\n+  mappings->insert_canonical_path (struct_decl.get_node_id (), cpath);\n \n   resolve_visibility (struct_decl.get_visibility ());\n \n@@ -423,8 +410,7 @@ ResolveItem::visit (AST::Union &union_decl)\n \t\t\t\t      union_decl.get_identifier ());\n   auto path = prefix.append (decl);\n   auto cpath = canonical_prefix.append (decl);\n-  mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t   union_decl.get_node_id (), cpath);\n+  mappings->insert_canonical_path (union_decl.get_node_id (), cpath);\n \n   resolve_visibility (union_decl.get_visibility ());\n \n@@ -456,8 +442,7 @@ ResolveItem::visit (AST::StaticItem &var)\n     = CanonicalPath::new_seg (var.get_node_id (), var.get_identifier ());\n   auto path = prefix.append (decl);\n   auto cpath = canonical_prefix.append (decl);\n-  mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t   var.get_node_id (), cpath);\n+  mappings->insert_canonical_path (var.get_node_id (), cpath);\n \n   ResolveType::go (var.get_type ().get ());\n   ResolveExpr::go (var.get_expr ().get (), path, cpath);\n@@ -470,8 +455,7 @@ ResolveItem::visit (AST::ConstantItem &constant)\n \t\t\t\t      constant.get_identifier ());\n   auto path = prefix.append (decl);\n   auto cpath = canonical_prefix.append (decl);\n-  mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t   constant.get_node_id (), cpath);\n+  mappings->insert_canonical_path (constant.get_node_id (), cpath);\n \n   resolve_visibility (constant.get_visibility ());\n \n@@ -487,8 +471,7 @@ ResolveItem::visit (AST::Function &function)\n   auto path = prefix.append (decl);\n   auto cpath = canonical_prefix.append (decl);\n \n-  mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t   function.get_node_id (), cpath);\n+  mappings->insert_canonical_path (function.get_node_id (), cpath);\n \n   resolve_visibility (function.get_visibility ());\n \n@@ -614,8 +597,7 @@ ResolveItem::visit (AST::Method &method)\n     = CanonicalPath::new_seg (method.get_node_id (), method.get_method_name ());\n   auto path = prefix.append (decl);\n   auto cpath = canonical_prefix.append (decl);\n-  mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t   method.get_node_id (), cpath);\n+  mappings->insert_canonical_path (method.get_node_id (), cpath);\n \n   NodeId scope_node_id = method.get_node_id ();\n "}, {"sha": "6f21bc35a333e84345720a3bf73e6e676ac23625", "filename": "gcc/rust/resolve/rust-ast-resolve-stmt.h", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -60,8 +60,7 @@ class ResolveStmt : public ResolverBase\n \t\t\t\t\tconstant.get_identifier ());\n     auto path = decl; // this ensures we have the correct relative resolution\n     auto cpath = canonical_prefix.append (decl);\n-    mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t     constant.get_node_id (), cpath);\n+    mappings->insert_canonical_path (constant.get_node_id (), cpath);\n \n     resolver->get_name_scope ().insert (\n       path, constant.get_node_id (), constant.get_locus (), false,\n@@ -94,8 +93,7 @@ class ResolveStmt : public ResolverBase\n \t\t\t\t\tstruct_decl.get_identifier ());\n     auto path = decl; // this ensures we have the correct relative resolution\n     auto cpath = canonical_prefix.append (decl);\n-    mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t     struct_decl.get_node_id (), cpath);\n+    mappings->insert_canonical_path (struct_decl.get_node_id (), cpath);\n \n     resolver->get_type_scope ().insert (\n       path, struct_decl.get_node_id (), struct_decl.get_locus (), false,\n@@ -126,8 +124,7 @@ class ResolveStmt : public ResolverBase\n \t\t\t\t\tenum_decl.get_identifier ());\n     auto path = decl; // this ensures we have the correct relative resolution\n     auto cpath = canonical_prefix.append (decl);\n-    mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t     enum_decl.get_node_id (), cpath);\n+    mappings->insert_canonical_path (enum_decl.get_node_id (), cpath);\n \n     resolver->get_type_scope ().insert (\n       path, enum_decl.get_node_id (), enum_decl.get_locus (), false,\n@@ -158,8 +155,7 @@ class ResolveStmt : public ResolverBase\n       CanonicalPath::new_seg (item.get_node_id (), item.get_identifier ()));\n     auto path = decl; // this ensures we have the correct relative resolution\n     auto cpath = canonical_prefix.append (decl);\n-    mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t     item.get_node_id (), cpath);\n+    mappings->insert_canonical_path (item.get_node_id (), cpath);\n \n     resolver->get_type_scope ().insert (\n       path, item.get_node_id (), item.get_locus (), false,\n@@ -178,8 +174,7 @@ class ResolveStmt : public ResolverBase\n       CanonicalPath::new_seg (item.get_node_id (), item.get_identifier ()));\n     auto path = decl; // this ensures we have the correct relative resolution\n     auto cpath = canonical_prefix.append (decl);\n-    mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t     item.get_node_id (), cpath);\n+    mappings->insert_canonical_path (item.get_node_id (), cpath);\n \n     resolver->get_type_scope ().insert (\n       path, item.get_node_id (), item.get_locus (), false,\n@@ -204,8 +199,7 @@ class ResolveStmt : public ResolverBase\n       CanonicalPath::new_seg (item.get_node_id (), item.get_identifier ()));\n     auto path = decl; // this ensures we have the correct relative resolution\n     auto cpath = canonical_prefix.append (decl);\n-    mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t     item.get_node_id (), cpath);\n+    mappings->insert_canonical_path (item.get_node_id (), cpath);\n \n     resolver->get_type_scope ().insert (\n       path, item.get_node_id (), item.get_locus (), false,\n@@ -230,8 +224,7 @@ class ResolveStmt : public ResolverBase\n       CanonicalPath::new_seg (item.get_node_id (), item.get_identifier ()));\n     auto path = decl; // this ensures we have the correct relative resolution\n     auto cpath = canonical_prefix.append (decl);\n-    mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t     item.get_node_id (), cpath);\n+    mappings->insert_canonical_path (item.get_node_id (), cpath);\n \n     resolver->get_type_scope ().insert (\n       path, item.get_node_id (), item.get_locus (), false,\n@@ -250,8 +243,7 @@ class ResolveStmt : public ResolverBase\n \t\t\t\t\tstruct_decl.get_identifier ());\n     auto path = decl; // this ensures we have the correct relative resolution\n     auto cpath = canonical_prefix.append (decl);\n-    mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t     struct_decl.get_node_id (), cpath);\n+    mappings->insert_canonical_path (struct_decl.get_node_id (), cpath);\n \n     resolver->get_type_scope ().insert (\n       path, struct_decl.get_node_id (), struct_decl.get_locus (), false,\n@@ -287,8 +279,7 @@ class ResolveStmt : public ResolverBase\n \t\t\t\t\tunion_decl.get_identifier ());\n     auto path = decl; // this ensures we have the correct relative resolution\n     auto cpath = canonical_prefix.append (decl);\n-    mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t     union_decl.get_node_id (), cpath);\n+    mappings->insert_canonical_path (union_decl.get_node_id (), cpath);\n \n     resolver->get_type_scope ().insert (\n       path, union_decl.get_node_id (), union_decl.get_locus (), false,\n@@ -322,8 +313,7 @@ class ResolveStmt : public ResolverBase\n \t\t\t\t\tfunction.get_function_name ());\n     auto path = decl; // this ensures we have the correct relative resolution\n     auto cpath = canonical_prefix.append (decl);\n-    mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t     function.get_node_id (), cpath);\n+    mappings->insert_canonical_path (function.get_node_id (), cpath);\n \n     resolver->get_name_scope ().insert (\n       path, function.get_node_id (), function.get_locus (), false,"}, {"sha": "352faac0c46df1da6373442caec889f79f61664f", "filename": "gcc/rust/resolve/rust-ast-resolve-toplevel.h", "status": "modified", "additions": 65, "deletions": 28, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -24,6 +24,7 @@\n #include \"rust-ast-resolve-implitem.h\"\n #include \"rust-ast-full.h\"\n #include \"rust-name-resolver.h\"\n+#include \"rust-session-manager.h\"\n \n namespace Rust {\n namespace Resolver {\n@@ -72,8 +73,7 @@ class ResolveTopLevel : public ResolverBase\n \n     resolver->pop_module_scope ();\n \n-    mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t     module.get_node_id (), cpath);\n+    mappings->insert_canonical_path (module.get_node_id (), cpath);\n   }\n \n   void visit (AST::TypeAlias &alias) override\n@@ -93,8 +93,7 @@ class ResolveTopLevel : public ResolverBase\n \n     NodeId current_module = resolver->peek_current_module_scope ();\n     mappings->insert_module_child_item (current_module, talias);\n-    mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t     alias.get_node_id (), cpath);\n+    mappings->insert_canonical_path (alias.get_node_id (), cpath);\n   }\n \n   void visit (AST::TupleStruct &struct_decl) override\n@@ -114,8 +113,7 @@ class ResolveTopLevel : public ResolverBase\n \n     NodeId current_module = resolver->peek_current_module_scope ();\n     mappings->insert_module_child_item (current_module, decl);\n-    mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t     struct_decl.get_node_id (), cpath);\n+    mappings->insert_canonical_path (struct_decl.get_node_id (), cpath);\n   }\n \n   void visit (AST::Enum &enum_decl) override\n@@ -138,8 +136,7 @@ class ResolveTopLevel : public ResolverBase\n \n     NodeId current_module = resolver->peek_current_module_scope ();\n     mappings->insert_module_child_item (current_module, decl);\n-    mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t     enum_decl.get_node_id (), cpath);\n+    mappings->insert_canonical_path (enum_decl.get_node_id (), cpath);\n   }\n \n   void visit (AST::EnumItem &item) override\n@@ -157,8 +154,7 @@ class ResolveTopLevel : public ResolverBase\n \trust_error_at (r, \"redefined multiple times\");\n       });\n \n-    mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t     item.get_node_id (), cpath);\n+    mappings->insert_canonical_path (item.get_node_id (), cpath);\n   }\n \n   void visit (AST::EnumItemTuple &item) override\n@@ -176,8 +172,7 @@ class ResolveTopLevel : public ResolverBase\n \trust_error_at (r, \"redefined multiple times\");\n       });\n \n-    mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t     item.get_node_id (), cpath);\n+    mappings->insert_canonical_path (item.get_node_id (), cpath);\n   }\n \n   void visit (AST::EnumItemStruct &item) override\n@@ -195,8 +190,7 @@ class ResolveTopLevel : public ResolverBase\n \trust_error_at (r, \"redefined multiple times\");\n       });\n \n-    mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t     item.get_node_id (), cpath);\n+    mappings->insert_canonical_path (item.get_node_id (), cpath);\n   }\n \n   void visit (AST::EnumItemDiscriminant &item) override\n@@ -214,8 +208,7 @@ class ResolveTopLevel : public ResolverBase\n \trust_error_at (r, \"redefined multiple times\");\n       });\n \n-    mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t     item.get_node_id (), cpath);\n+    mappings->insert_canonical_path (item.get_node_id (), cpath);\n   }\n \n   void visit (AST::StructStruct &struct_decl) override\n@@ -235,8 +228,7 @@ class ResolveTopLevel : public ResolverBase\n \n     NodeId current_module = resolver->peek_current_module_scope ();\n     mappings->insert_module_child_item (current_module, decl);\n-    mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t     struct_decl.get_node_id (), cpath);\n+    mappings->insert_canonical_path (struct_decl.get_node_id (), cpath);\n   }\n \n   void visit (AST::Union &union_decl) override\n@@ -256,8 +248,7 @@ class ResolveTopLevel : public ResolverBase\n \n     NodeId current_module = resolver->peek_current_module_scope ();\n     mappings->insert_module_child_item (current_module, decl);\n-    mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t     union_decl.get_node_id (), cpath);\n+    mappings->insert_canonical_path (union_decl.get_node_id (), cpath);\n   }\n \n   void visit (AST::StaticItem &var) override\n@@ -277,8 +268,7 @@ class ResolveTopLevel : public ResolverBase\n \n     NodeId current_module = resolver->peek_current_module_scope ();\n     mappings->insert_module_child_item (current_module, decl);\n-    mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t     var.get_node_id (), cpath);\n+    mappings->insert_canonical_path (var.get_node_id (), cpath);\n   }\n \n   void visit (AST::ConstantItem &constant) override\n@@ -298,8 +288,7 @@ class ResolveTopLevel : public ResolverBase\n \n     NodeId current_module = resolver->peek_current_module_scope ();\n     mappings->insert_module_child_item (current_module, decl);\n-    mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t     constant.get_node_id (), cpath);\n+    mappings->insert_canonical_path (constant.get_node_id (), cpath);\n   }\n \n   void visit (AST::Function &function) override\n@@ -319,8 +308,7 @@ class ResolveTopLevel : public ResolverBase\n \n     NodeId current_module = resolver->peek_current_module_scope ();\n     mappings->insert_module_child_item (current_module, decl);\n-    mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t     function.get_node_id (), cpath);\n+    mappings->insert_canonical_path (function.get_node_id (), cpath);\n   }\n \n   void visit (AST::InherentImpl &impl_block) override\n@@ -385,8 +373,7 @@ class ResolveTopLevel : public ResolverBase\n \n     NodeId current_module = resolver->peek_current_module_scope ();\n     mappings->insert_module_child_item (current_module, decl);\n-    mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t     trait.get_node_id (), cpath);\n+    mappings->insert_canonical_path (trait.get_node_id (), cpath);\n   }\n \n   void visit (AST::ExternBlock &extern_block) override\n@@ -397,6 +384,56 @@ class ResolveTopLevel : public ResolverBase\n       }\n   }\n \n+  void visit (AST::ExternCrate &extern_crate) override\n+  {\n+    if (extern_crate.is_marked_for_strip ())\n+      return;\n+\n+    NodeId resolved_crate = UNKNOWN_NODEID;\n+    if (extern_crate.references_self ())\n+      {\n+\t// FIXME\n+\t// then this resolves to current crate_node_id\n+\t// need to expose on the session object a reference to the current\n+\t// AST::Crate& to get node_id\n+\tgcc_unreachable ();\n+\treturn;\n+      }\n+    else\n+      {\n+\trust_debug_loc (extern_crate.get_locus (), \"load extern crate: [%s]\",\n+\t\t\textern_crate.as_string ().c_str ());\n+\n+\tSession &session = Session::get_instance ();\n+\tresolved_crate\n+\t  = session.load_extern_crate (extern_crate.get_referenced_crate ());\n+      }\n+\n+    if (resolved_crate == UNKNOWN_NODEID)\n+      {\n+\trust_error_at (extern_crate.get_locus (), \"failed to resolve crate\");\n+\treturn;\n+      }\n+\n+    // mark the node as resolved\n+    resolver->insert_resolved_name (extern_crate.get_node_id (),\n+\t\t\t\t    resolved_crate);\n+\n+    // does it has an as clause\n+    if (extern_crate.has_as_clause ())\n+      {\n+\tauto decl = CanonicalPath::new_seg (extern_crate.get_node_id (),\n+\t\t\t\t\t    extern_crate.get_as_clause ());\n+\tresolver->get_type_scope ().insert (\n+\t  decl, extern_crate.get_node_id (), extern_crate.get_locus (), false,\n+\t  [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n+\t    RichLocation r (extern_crate.get_locus ());\n+\t    r.add_range (locus);\n+\t    rust_error_at (r, \"redefined multiple times\");\n+\t  });\n+      }\n+  }\n+\n private:\n   ResolveTopLevel (const CanonicalPath &prefix,\n \t\t   const CanonicalPath &canonical_prefix)"}, {"sha": "8e85889ffd17fc1aff7538e91f8cb7fa0af04857", "filename": "gcc/rust/resolve/rust-ast-resolve-type.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -371,8 +371,7 @@ ResolveTypeToCanonicalPath::visit (AST::TypePath &path)\n     return;\n \n   const CanonicalPath *type_path = nullptr;\n-  if (mappings->lookup_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t       resolved_node, &type_path))\n+  if (mappings->lookup_canonical_path (resolved_node, &type_path))\n     {\n       auto &final_seg = path.get_segments ().back ();\n       switch (final_seg->get_type ())"}, {"sha": "1679831822703970842cfd8e49f17eb3955b2dc2", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -184,8 +184,7 @@ class ResolveGenericParam : public ResolverBase\n \trust_error_at (locus, \"was defined here\");\n       });\n \n-    mappings->insert_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t     param.get_node_id (), seg);\n+    mappings->insert_canonical_path (param.get_node_id (), seg);\n   }\n \n private:"}, {"sha": "fb7087425c130cca84b13b4fdcc50057be2958ad", "filename": "gcc/rust/resolve/rust-name-resolver.cc", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fresolve%2Frust-name-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fresolve%2Frust-name-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.cc?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -34,11 +34,10 @@\n       _R.push_back (builtin_type);                                             \\\n       tyctx->insert_builtin (_TY->get_ref (), builtin_type->get_node_id (),    \\\n \t\t\t     _TY);                                             \\\n-      mappings->insert_node_to_hir (mappings->get_current_crate (),            \\\n-\t\t\t\t    builtin_type->get_node_id (),              \\\n+      mappings->insert_node_to_hir (builtin_type->get_node_id (),              \\\n \t\t\t\t    _TY->get_ref ());                          \\\n       mappings->insert_canonical_path (                                        \\\n-\tmappings->get_current_crate (), builtin_type->get_node_id (),          \\\n+\tbuiltin_type->get_node_id (),                                          \\\n \tCanonicalPath::new_seg (builtin_type->get_node_id (), _X));            \\\n     }                                                                          \\\n   while (0)\n@@ -129,6 +128,24 @@ Rib::decl_was_declared_here (NodeId def) const\n   return false;\n }\n \n+void\n+Rib::debug () const\n+{\n+  fprintf (stderr, \"%s\\n\", debug_str ().c_str ());\n+}\n+\n+std::string\n+Rib::debug_str () const\n+{\n+  std::string buffer;\n+  for (const auto &it : path_mappings)\n+    {\n+      buffer += it.first.get () + \"=\" + std::to_string (it.second);\n+      buffer += \",\";\n+    }\n+  return \"{\" + buffer + \"}\";\n+}\n+\n Scope::Scope (CrateNum crate_num) : crate_num (crate_num) {}\n \n void"}, {"sha": "014628a87c9a0fc44a7e0babd6291c274f1ab378", "filename": "gcc/rust/resolve/rust-name-resolver.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.h?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -45,6 +45,8 @@ class Rib\n   void append_reference_for_def (NodeId def, NodeId ref);\n   bool have_references_for_node (NodeId def) const;\n   bool decl_was_declared_here (NodeId def) const;\n+  void debug () const;\n+  std::string debug_str () const;\n \n   CrateNum get_crate_num () const { return crate_num; }\n   NodeId get_node_id () const { return node_id; }"}, {"sha": "febd00965579f8a5feaa178bb10b4ea8c66473ba", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 46, "deletions": 67, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -62,6 +62,13 @@ const char *kTargetOptionsDumpFile = \"gccrs.target-options.dump\";\n const std::string kDefaultCrateName = \"rust_out\";\n const size_t kMaxNameLength = 64;\n \n+Session &\n+Session::get_instance ()\n+{\n+  static Session instance;\n+  return instance;\n+}\n+\n static std::string\n infer_crate_name (const std::string &filename)\n {\n@@ -374,6 +381,9 @@ Session::init ()\n \n   // setup backend to GCC GIMPLE\n   backend = rust_get_backend ();\n+\n+  // setup mappings class\n+  mappings = Analysis::Mappings::get ();\n }\n \n /* Initialise default options. Actually called before handle_option, unlike init\n@@ -574,10 +584,8 @@ Session::parse_files (int num_files, const char **files)\n       options.set_crate_name (crate_name);\n     }\n \n-  auto mappings = Analysis::Mappings::get ();\n-  CrateNum crate_num = mappings->setup_crate_mappings (options.crate_name);\n+  CrateNum crate_num = mappings->get_next_crate_num (options.get_crate_name ());\n   mappings->set_current_crate (crate_num);\n-\n   for (int i = 0; i < num_files; i++)\n     {\n       rust_debug (\"Attempting to parse file: %s\", files[i]);\n@@ -588,7 +596,7 @@ Session::parse_files (int num_files, const char **files)\n }\n \n void\n-Session::handle_crate_name (AST::Crate parsed_crate)\n+Session::handle_crate_name (const AST::Crate &parsed_crate)\n {\n   auto mappings = Analysis::Mappings::get ();\n   auto crate_name_changed = false;\n@@ -656,26 +664,23 @@ Session::parse_file (const char *filename)\n   Parser<Lexer> parser (lex);\n \n   // generate crate from parser\n-  auto parsed_crate = parser.parse_crate ();\n-\n-  // setup the mappings for this AST\n-  auto mappings = Analysis::Mappings::get ();\n-  mappings->insert_ast_crate (&parsed_crate);\n+  std::unique_ptr<AST::Crate> ast_crate = parser.parse_crate ();\n \n   // handle crate name\n-  handle_crate_name (parsed_crate);\n+  handle_crate_name (*ast_crate.get ());\n \n+  // dump options\n   if (options.dump_option_enabled (CompileOptions::LEXER_DUMP))\n     {\n       dump_lex (parser);\n     }\n   if (options.dump_option_enabled (CompileOptions::PARSER_AST_DUMP))\n     {\n-      dump_ast (parser, parsed_crate);\n+      dump_ast (parser, *ast_crate.get ());\n     }\n   if (options.dump_option_enabled (CompileOptions::AST_DUMP_PRETTY))\n     {\n-      dump_ast_pretty (parsed_crate);\n+      dump_ast_pretty (*ast_crate.get ());\n     }\n   if (options.dump_option_enabled (CompileOptions::TARGET_OPTION_DUMP))\n     {\n@@ -685,6 +690,11 @@ Session::parse_file (const char *filename)\n   if (saw_errors ())\n     return;\n \n+  // setup the mappings for this AST\n+  CrateNum current_crate = mappings->get_current_crate ();\n+  AST::Crate &parsed_crate\n+    = mappings->insert_ast_crate (std::move (ast_crate), current_crate);\n+\n   /* basic pipeline:\n    *  - lex\n    *  - parse\n@@ -744,23 +754,22 @@ Session::parse_file (const char *filename)\n     return;\n \n   // lower AST to HIR\n-  HIR::Crate hir = HIR::ASTLowering::Resolve (parsed_crate);\n+  std::unique_ptr<HIR::Crate> lowered\n+    = HIR::ASTLowering::Resolve (parsed_crate);\n+  if (saw_errors ())\n+    return;\n+\n+  // add the mappings to it\n+  HIR::Crate &hir = mappings->insert_hir_crate (std::move (lowered));\n   if (options.dump_option_enabled (CompileOptions::HIR_DUMP))\n     {\n       dump_hir (hir);\n     }\n-\n   if (options.dump_option_enabled (CompileOptions::HIR_DUMP_PRETTY))\n     {\n       dump_hir_pretty (hir);\n     }\n \n-  if (saw_errors ())\n-    return;\n-\n-  // add the mappings to it\n-  mappings->insert_hir_crate (&hir);\n-\n   // type resolve\n   Resolver::TypeResolution::Resolve (hir);\n   if (options.dump_option_enabled (CompileOptions::TYPE_RESOLUTION_DUMP))\n@@ -781,6 +790,7 @@ Session::parse_file (const char *filename)\n   // we can't do static analysis if there are errors to worry about\n   if (!saw_errors ())\n     {\n+      // lints\n       Analysis::ScanDeadcode::Scan (hir);\n       Analysis::UnusedVariables::Lint (ctx);\n     }\n@@ -789,52 +799,6 @@ Session::parse_file (const char *filename)\n   ctx.write_to_backend ();\n }\n \n-// TODO: actually implement method\n-void\n-load_extern_crate (std::string crate_name ATTRIBUTE_UNUSED)\n-{}\n-// TODO: deprecated - don't use\n-\n-// Parses up to the \"load (external) crates\" part of the frontend.\n-// TODO: lots of this code is probably actually useful outside of dumping, so\n-// maybe split off function\n-void\n-Session::debug_dump_load_crates (Parser<Lexer> &parser)\n-{\n-  // parse crate as AST\n-  AST::Crate crate = parser.parse_crate ();\n-\n-  /* TODO: search through inner attrs and see whether any of those attr paths\n-   * contain \"no_core\", \"no_std\", \"compiler_builtins\". If so/not, save certain\n-   * crate names. In these names, insert items at beginning of crate items.\n-   * This is crate injection. Also, inject prelude use decl at beginning\n-   * (first name is assumed to be prelude - prelude is a use decl\n-   * automatically generated to enable using Option and Copy without\n-   * qualifying it or importing it via 'use' manually) */\n-\n-  std::vector<std::string> crate_names;\n-  for (const auto &item : crate.items)\n-    {\n-      // if item is extern crate, add name? to list of stuff ONLY IF config is\n-      // checked if item is module, iterate this loop inside it as well\n-      // (recursive?) ONLY IF config is checked\n-\n-      // TODO: actually do the checks somewhere - probably in the items\n-\n-      item->add_crate_name (crate_names);\n-    }\n-\n-  /* loop through list of crate names/paths/whatever, attempting to load each\n-   * one. save loaded crates to a Session variable? Or save to current\n-   * AST::Crate? */\n-  for (const auto &name : crate_names)\n-    {\n-      load_extern_crate (name /*, basename = \"\"?*/);\n-    }\n-  //  for each loaded crate, load dependencies of it as well\n-}\n-// TODO: deprecated - don't use\n-\n void\n Session::register_plugins (AST::Crate &crate ATTRIBUTE_UNUSED)\n {\n@@ -951,7 +915,7 @@ Session::injection (AST::Crate &crate)\n \t\t\t      Linemap::unknown_location ()));\n \n       // insert at beginning\n-      crate.items.insert (crate.items.begin (), std::move (extern_crate));\n+      // crate.items.insert (crate.items.begin (), std::move (extern_crate));\n     }\n \n   // create use tree path\n@@ -1130,6 +1094,21 @@ Session::dump_type_resolution (HIR::Crate &hir) const\n   out.close ();\n }\n \n+// imports\n+\n+NodeId\n+Session::load_extern_crate (const std::string &crate_name)\n+{\n+  // check if it was already loaded\n+  // ....\n+\n+  rust_debug (\"load_extern_crate: %s\", crate_name.c_str ());\n+  gcc_unreachable ();\n+\n+  return UNKNOWN_NODEID;\n+}\n+//\n+\n void\n TargetOptions::dump_target_options () const\n {"}, {"sha": "dd696411db66fbf49fe226abe15bd5059cacb632", "filename": "gcc/rust/rust-session-manager.h", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Frust-session-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Frust-session-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.h?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -22,6 +22,7 @@\n \n #include \"rust-linemap.h\"\n #include \"rust-backend.h\"\n+#include \"rust-hir-map.h\"\n #include \"safe-ctype.h\"\n \n #include \"config.h\"\n@@ -225,6 +226,12 @@ struct CompileOptions\n     crate_name = std::move (name);\n   }\n \n+  const std::string &get_crate_name () const\n+  {\n+    rust_assert (!crate_name.empty ());\n+    return crate_name;\n+  }\n+\n   void set_edition (int raw_edition)\n   {\n     edition = static_cast<Edition> (raw_edition);\n@@ -250,15 +257,14 @@ struct Session\n   // backend linemap\n   Linemap *linemap;\n \n+  // mappings\n+  Analysis::Mappings *mappings;\n+\n public:\n   /* Get a reference to the static session instance */\n-  static Session &get_instance ()\n-  {\n-    static Session instance;\n-\n-    return instance;\n-  }\n+  static Session &get_instance ();\n \n+  Session () = default;\n   ~Session () = default;\n \n   /* This initializes the compiler session. Corresponds to langhook\n@@ -275,7 +281,7 @@ struct Session\n \t\t      const struct cl_option_handlers *handlers);\n   void parse_files (int num_files, const char **files);\n   void init_options ();\n-  void handle_crate_name (AST::Crate parsed_crate);\n+  void handle_crate_name (const AST::Crate &parsed_crate);\n \n   /* This function saves the filename data into the session manager using the\n    * `move` semantics, and returns a C-style string referencing the input\n@@ -286,8 +292,9 @@ struct Session\n     return extra_files.back ().c_str ();\n   }\n \n+  NodeId load_extern_crate (const std::string &crate_name);\n+\n private:\n-  Session () = default;\n   void parse_file (const char *filename);\n   bool enable_dump (std::string arg);\n \n@@ -299,8 +306,6 @@ struct Session\n   void dump_hir_pretty (HIR::Crate &crate) const;\n   void dump_type_resolution (HIR::Crate &crate) const;\n \n-  void debug_dump_load_crates (Parser<Lexer> &parser);\n-\n   void implicitly_enable_feature (std::string feature_name);\n   void enable_features ();\n \n@@ -324,6 +329,7 @@ struct Session\n   // handle cfg_option\n   bool handle_cfg_option (std::string &data);\n };\n+\n } // namespace Rust\n \n #if CHECKING_P"}, {"sha": "5ad9540868c348cd11c09ffba5bf970397ddb049", "filename": "gcc/rust/typecheck/rust-hir-trait-resolve.cc", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -107,15 +107,13 @@ TraitResolver::resolve_path (HIR::TypePath &path)\n     }\n \n   HirId hir_node = UNKNOWN_HIRID;\n-  if (!mappings->lookup_node_to_hir (mappings->get_current_crate (), ref,\n-\t\t\t\t     &hir_node))\n+  if (!mappings->lookup_node_to_hir (ref, &hir_node))\n     {\n       rust_error_at (path.get_locus (), \"Failed to resolve path to hir-id\");\n       return &TraitReference::error_node ();\n     }\n \n-  HIR::Item *resolved_item\n-    = mappings->lookup_hir_item (mappings->get_current_crate (), hir_node);\n+  HIR::Item *resolved_item = mappings->lookup_hir_item (hir_node);\n \n   rust_assert (resolved_item != nullptr);\n   resolved_item->accept_vis (*this);\n@@ -248,15 +246,13 @@ TraitResolver::lookup_path (HIR::TypePath &path)\n     }\n \n   HirId hir_node = UNKNOWN_HIRID;\n-  if (!mappings->lookup_node_to_hir (mappings->get_current_crate (), ref,\n-\t\t\t\t     &hir_node))\n+  if (!mappings->lookup_node_to_hir (ref, &hir_node))\n     {\n       rust_error_at (path.get_locus (), \"Failed to resolve path to hir-id\");\n       return &TraitReference::error_node ();\n     }\n \n-  HIR::Item *resolved_item\n-    = mappings->lookup_hir_item (mappings->get_current_crate (), hir_node);\n+  HIR::Item *resolved_item = mappings->lookup_hir_item (hir_node);\n \n   rust_assert (resolved_item != nullptr);\n   resolved_item->accept_vis (*this);"}, {"sha": "bc91f458b72c5cedbb8d3ce2281081f571244476", "filename": "gcc/rust/typecheck/rust-hir-type-check-enumitem.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-enumitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-enumitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-enumitem.h?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -65,8 +65,7 @@ class TypeCheckEnumItem : public TypeCheckBase\n     context->insert_type (mapping, isize);\n \n     const CanonicalPath *canonical_path = nullptr;\n-    ok = mappings->lookup_canonical_path (item.get_mappings ().get_crate_num (),\n-\t\t\t\t\t  item.get_mappings ().get_nodeid (),\n+    ok = mappings->lookup_canonical_path (item.get_mappings ().get_nodeid (),\n \t\t\t\t\t  &canonical_path);\n     rust_assert (ok);\n \n@@ -95,8 +94,7 @@ class TypeCheckEnumItem : public TypeCheckBase\n \n     const CanonicalPath *canonical_path = nullptr;\n     bool ok\n-      = mappings->lookup_canonical_path (item.get_mappings ().get_crate_num (),\n-\t\t\t\t\t item.get_mappings ().get_nodeid (),\n+      = mappings->lookup_canonical_path (item.get_mappings ().get_nodeid (),\n \t\t\t\t\t &canonical_path);\n     rust_assert (ok);\n \n@@ -143,8 +141,7 @@ class TypeCheckEnumItem : public TypeCheckBase\n     context->insert_type (mapping, isize);\n \n     const CanonicalPath *canonical_path = nullptr;\n-    ok = mappings->lookup_canonical_path (item.get_mappings ().get_crate_num (),\n-\t\t\t\t\t  item.get_mappings ().get_nodeid (),\n+    ok = mappings->lookup_canonical_path (item.get_mappings ().get_nodeid (),\n \t\t\t\t\t  &canonical_path);\n     rust_assert (ok);\n \n@@ -190,8 +187,7 @@ class TypeCheckEnumItem : public TypeCheckBase\n     context->insert_type (mapping, isize);\n \n     const CanonicalPath *canonical_path = nullptr;\n-    ok = mappings->lookup_canonical_path (item.get_mappings ().get_crate_num (),\n-\t\t\t\t\t  item.get_mappings ().get_nodeid (),\n+    ok = mappings->lookup_canonical_path (item.get_mappings ().get_nodeid (),\n \t\t\t\t\t  &canonical_path);\n     rust_assert (ok);\n "}, {"sha": "a5f0a849b913416e3f665f9c336020f4f016cb15", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -438,8 +438,7 @@ class TypeCheckExpr : public TypeCheckBase\n \n     // node back to HIR\n     HirId ref;\n-    if (!mappings->lookup_node_to_hir (expr.get_mappings ().get_crate_num (),\n-\t\t\t\t       ref_node_id, &ref))\n+    if (!mappings->lookup_node_to_hir (ref_node_id, &ref))\n       {\n \t// FIXME\n \t// this is an internal error"}, {"sha": "294dffdead26766fea6de171dd15b1427349aaad", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -307,9 +307,9 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n       }\n \n     const CanonicalPath *canonical_path = nullptr;\n-    bool ok = mappings->lookup_canonical_path (\n-      function.get_mappings ().get_crate_num (),\n-      function.get_mappings ().get_nodeid (), &canonical_path);\n+    bool ok\n+      = mappings->lookup_canonical_path (function.get_mappings ().get_nodeid (),\n+\t\t\t\t\t &canonical_path);\n     rust_assert (ok);\n \n     RustIdent ident{*canonical_path, function.get_locus ()};"}, {"sha": "ac1ebfd6c952c5767e579c8b0cbe50245f7f0682", "filename": "gcc/rust/typecheck/rust-hir-type-check-path.cc", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -205,8 +205,7 @@ TypeCheckExpr::resolve_root_path (HIR::PathInExpression &expr, size_t *offset,\n \n       // node back to HIR\n       HirId ref;\n-      if (!mappings->lookup_node_to_hir (expr.get_mappings ().get_crate_num (),\n-\t\t\t\t\t ref_node_id, &ref))\n+      if (!mappings->lookup_node_to_hir (ref_node_id, &ref))\n \t{\n \t  rust_error_at (seg.get_locus (), \"456 reverse lookup failure\");\n \t  rust_debug_loc (seg.get_locus (),\n@@ -218,10 +217,7 @@ TypeCheckExpr::resolve_root_path (HIR::PathInExpression &expr, size_t *offset,\n \t  return new TyTy::ErrorType (expr.get_mappings ().get_hirid ());\n \t}\n \n-      auto seg_is_module\n-\t= (nullptr\n-\t   != mappings->lookup_module (expr.get_mappings ().get_crate_num (),\n-\t\t\t\t       ref));\n+      auto seg_is_module = (nullptr != mappings->lookup_module (ref));\n       auto seg_is_crate = mappings->is_local_hirid_crate (ref);\n       if (seg_is_module || seg_is_crate)\n \t{\n@@ -354,11 +350,8 @@ TypeCheckExpr::resolve_segments (NodeId root_resolved_node_id,\n \t{\n \t  const TyTy::VariantDef *variant = candidate.item.enum_field.variant;\n \n-\t  CrateNum crate_num = mappings->get_current_crate ();\n \t  HirId variant_id = variant->get_id ();\n-\n-\t  HIR::Item *enum_item\n-\t    = mappings->lookup_hir_item (crate_num, variant_id);\n+\t  HIR::Item *enum_item = mappings->lookup_hir_item (variant_id);\n \t  rust_assert (enum_item != nullptr);\n \n \t  resolved_node_id = enum_item->get_mappings ().get_nodeid ();"}, {"sha": "b2b68c054949d4336124ae6b0b2c5614487ade49", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -177,7 +177,6 @@ class TypeCheckStmt : public TypeCheckBase\n     // get the path\n     const CanonicalPath *canonical_path = nullptr;\n     bool ok = mappings->lookup_canonical_path (\n-      struct_decl.get_mappings ().get_crate_num (),\n       struct_decl.get_mappings ().get_nodeid (), &canonical_path);\n     rust_assert (ok);\n     RustIdent ident{*canonical_path, struct_decl.get_locus ()};\n@@ -251,7 +250,6 @@ class TypeCheckStmt : public TypeCheckBase\n     // get the path\n     const CanonicalPath *canonical_path = nullptr;\n     bool ok = mappings->lookup_canonical_path (\n-      enum_decl.get_mappings ().get_crate_num (),\n       enum_decl.get_mappings ().get_nodeid (), &canonical_path);\n     rust_assert (ok);\n     RustIdent ident{*canonical_path, enum_decl.get_locus ()};\n@@ -313,7 +311,6 @@ class TypeCheckStmt : public TypeCheckBase\n     // get the path\n     const CanonicalPath *canonical_path = nullptr;\n     bool ok = mappings->lookup_canonical_path (\n-      struct_decl.get_mappings ().get_crate_num (),\n       struct_decl.get_mappings ().get_nodeid (), &canonical_path);\n     rust_assert (ok);\n     RustIdent ident{*canonical_path, struct_decl.get_locus ()};\n@@ -389,7 +386,6 @@ class TypeCheckStmt : public TypeCheckBase\n     // get the path\n     const CanonicalPath *canonical_path = nullptr;\n     bool ok = mappings->lookup_canonical_path (\n-      union_decl.get_mappings ().get_crate_num (),\n       union_decl.get_mappings ().get_nodeid (), &canonical_path);\n     rust_assert (ok);\n     RustIdent ident{*canonical_path, union_decl.get_locus ()};\n@@ -478,9 +474,9 @@ class TypeCheckStmt : public TypeCheckBase\n \n     // get the path\n     const CanonicalPath *canonical_path = nullptr;\n-    bool ok = mappings->lookup_canonical_path (\n-      function.get_mappings ().get_crate_num (),\n-      function.get_mappings ().get_nodeid (), &canonical_path);\n+    bool ok\n+      = mappings->lookup_canonical_path (function.get_mappings ().get_nodeid (),\n+\t\t\t\t\t &canonical_path);\n     rust_assert (ok);\n \n     RustIdent ident{*canonical_path, function.get_locus ()};"}, {"sha": "78188cc17ad8ab9e884fee61da3145ce9422d89d", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.cc", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.cc?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -99,7 +99,6 @@ TypeCheckTopLevel::visit (HIR::TupleStruct &struct_decl)\n   // get the path\n   const CanonicalPath *canonical_path = nullptr;\n   bool ok = mappings->lookup_canonical_path (\n-    struct_decl.get_mappings ().get_crate_num (),\n     struct_decl.get_mappings ().get_nodeid (), &canonical_path);\n   rust_assert (ok);\n   RustIdent ident{*canonical_path, struct_decl.get_locus ()};\n@@ -159,7 +158,6 @@ TypeCheckTopLevel::visit (HIR::StructStruct &struct_decl)\n   // get the path\n   const CanonicalPath *canonical_path = nullptr;\n   bool ok = mappings->lookup_canonical_path (\n-    struct_decl.get_mappings ().get_crate_num (),\n     struct_decl.get_mappings ().get_nodeid (), &canonical_path);\n   rust_assert (ok);\n   RustIdent ident{*canonical_path, struct_decl.get_locus ()};\n@@ -205,9 +203,9 @@ TypeCheckTopLevel::visit (HIR::Enum &enum_decl)\n \n   // get the path\n   const CanonicalPath *canonical_path = nullptr;\n-  bool ok = mappings->lookup_canonical_path (\n-    enum_decl.get_mappings ().get_crate_num (),\n-    enum_decl.get_mappings ().get_nodeid (), &canonical_path);\n+  bool ok\n+    = mappings->lookup_canonical_path (enum_decl.get_mappings ().get_nodeid (),\n+\t\t\t\t       &canonical_path);\n   rust_assert (ok);\n   RustIdent ident{*canonical_path, enum_decl.get_locus ()};\n \n@@ -249,9 +247,9 @@ TypeCheckTopLevel::visit (HIR::Union &union_decl)\n \n   // get the path\n   const CanonicalPath *canonical_path = nullptr;\n-  bool ok = mappings->lookup_canonical_path (\n-    union_decl.get_mappings ().get_crate_num (),\n-    union_decl.get_mappings ().get_nodeid (), &canonical_path);\n+  bool ok\n+    = mappings->lookup_canonical_path (union_decl.get_mappings ().get_nodeid (),\n+\t\t\t\t       &canonical_path);\n   rust_assert (ok);\n   RustIdent ident{*canonical_path, union_decl.get_locus ()};\n \n@@ -335,9 +333,9 @@ TypeCheckTopLevel::visit (HIR::Function &function)\n     }\n \n   const CanonicalPath *canonical_path = nullptr;\n-  bool ok = mappings->lookup_canonical_path (\n-    function.get_mappings ().get_crate_num (),\n-    function.get_mappings ().get_nodeid (), &canonical_path);\n+  bool ok\n+    = mappings->lookup_canonical_path (function.get_mappings ().get_nodeid (),\n+\t\t\t\t       &canonical_path);\n   rust_assert (ok);\n \n   RustIdent ident{*canonical_path, function.get_locus ()};"}, {"sha": "9291a18d5986910ea205b4544df568b7ede98f61", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.cc", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -273,8 +273,7 @@ TypeCheckType::resolve_root_path (HIR::TypePath &path, size_t *offset,\n \n       // node back to HIR\n       HirId ref = UNKNOWN_HIRID;\n-      if (!mappings->lookup_node_to_hir (path.get_mappings ().get_crate_num (),\n-\t\t\t\t\t ref_node_id, &ref))\n+      if (!mappings->lookup_node_to_hir (ref_node_id, &ref))\n \t{\n \t  if (is_root)\n \t    {\n@@ -291,10 +290,7 @@ TypeCheckType::resolve_root_path (HIR::TypePath &path, size_t *offset,\n \t  return root_tyty;\n \t}\n \n-      auto seg_is_module\n-\t= (nullptr\n-\t   != mappings->lookup_module (path.get_mappings ().get_crate_num (),\n-\t\t\t\t       ref));\n+      auto seg_is_module = (nullptr != mappings->lookup_module (ref));\n       auto seg_is_crate = mappings->is_local_hirid_crate (ref);\n       if (seg_is_module || seg_is_crate)\n \t{"}, {"sha": "82ca221545c15c29755b80b34392b56df19fa686", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -291,9 +291,7 @@ class ResolveWhereClauseItem : public TypeCheckBase\n \n     // node back to HIR\n     HirId ref;\n-    if (!mappings->lookup_node_to_hir (\n-\t  binding_type_path->get_mappings ().get_crate_num (), ref_node_id,\n-\t  &ref))\n+    if (!mappings->lookup_node_to_hir (ref_node_id, &ref))\n       {\n \t// FIXME\n \trust_error_at (Location (), \"where-clause reverse lookup failure\");"}, {"sha": "37a085f521bff4319a554cded368870f6c231f20", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -313,10 +313,8 @@ TraitItemReference::get_type_from_fn (/*const*/ HIR::TraitItemFunc &fn) const\n \n   auto mappings = Analysis::Mappings::get ();\n   const CanonicalPath *canonical_path = nullptr;\n-  bool ok\n-    = mappings->lookup_canonical_path (fn.get_mappings ().get_crate_num (),\n-\t\t\t\t       fn.get_mappings ().get_nodeid (),\n-\t\t\t\t       &canonical_path);\n+  bool ok = mappings->lookup_canonical_path (fn.get_mappings ().get_nodeid (),\n+\t\t\t\t\t     &canonical_path);\n   rust_assert (ok);\n \n   RustIdent ident{*canonical_path, fn.get_locus ()};"}, {"sha": "05cd8ce971abac9ca0ffdc0624732d864a4b1902", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -329,8 +329,7 @@ TyVar::get_implicit_infer_var (Location locus)\n \t\t\t\t\t       infer->get_ref (),\n \t\t\t\t\t       UNKNOWN_LOCAL_DEFID),\n \t\t\tinfer);\n-  mappings->insert_location (mappings->get_current_crate (), infer->get_ref (),\n-\t\t\t     locus);\n+  mappings->insert_location (infer->get_ref (), locus);\n \n   return TyVar (infer->get_ref ());\n }\n@@ -457,7 +456,7 @@ InferType::clone () const\n \t\t\t\t\t       clone->get_ref (),\n \t\t\t\t\t       UNKNOWN_LOCAL_DEFID),\n \t\t\tclone);\n-  mappings->insert_location (mappings->get_current_crate (), clone->get_ref (),\n+  mappings->insert_location (clone->get_ref (),\n \t\t\t     mappings->lookup_location (get_ref ()));\n \n   // setup the chain to reference this"}, {"sha": "b5989fba676439b8717ecef40fb6c2ecde509d66", "filename": "gcc/rust/util/rust-attributes.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Futil%2Frust-attributes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Futil%2Frust-attributes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-attributes.cc?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -35,6 +35,7 @@ static const BuiltinAttrDefinition __definitions[] = {\n   {\"link_section\", CODE_GENERATION},\n   {\"no_mangle\", CODE_GENERATION},\n   {\"repr\", CODE_GENERATION},\n+  {\"path\", EXPANSION},\n };\n \n BuiltinAttributeMappings *"}, {"sha": "353b7cb16ed98eb8cc4b8459fc97bbf2bca5a109", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 255, "deletions": 345, "changes": 600, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -20,6 +20,7 @@\n #include \"rust-ast-full.h\"\n #include \"rust-hir-full.h\"\n #include \"rust-macro-builtins.h\"\n+#include \"rust-mapping-common.h\"\n \n namespace Rust {\n namespace Analysis {\n@@ -87,8 +88,14 @@ NodeMapping::as_string () const\n }\n \n // Mappings Class now\n+static const HirId kDefaultNodeIdBegin = 1;\n+static const HirId kDefaultHirIdBegin = 1;\n+static const HirId kDefaultCrateNumBegin = 0;\n \n-Mappings::Mappings () {}\n+Mappings::Mappings ()\n+  : crateNumItr (kDefaultCrateNumBegin), currentCrateNum (UNKNOWN_CREATENUM),\n+    hirIdIter (kDefaultHirIdBegin), nodeIdIter (kDefaultNodeIdBegin)\n+{}\n \n Mappings::~Mappings () {}\n \n@@ -103,9 +110,12 @@ Mappings::get ()\n }\n \n CrateNum\n-Mappings::get_next_crate_num ()\n+Mappings::get_next_crate_num (const std::string &name)\n {\n-  return crateNumItr++;\n+  auto id = crateNumItr;\n+  crateNumItr++;\n+  set_crate_name (id, name);\n+  return id;\n }\n \n void\n@@ -114,49 +124,32 @@ Mappings::set_current_crate (CrateNum crateNum)\n   currentCrateNum = crateNum;\n }\n \n-CrateNum\n-Mappings::setup_crate_mappings (std::string crate_name)\n-{\n-  CrateNum crate_num = get_next_crate_num ();\n-\n-  hirIdIter[crate_num] = UNKNOWN_HIRID;\n-  nodeIdIter[crate_num] = UNKNOWN_NODEID;\n-  localIdIter[crate_num] = UNKNOWN_LOCAL_DEFID;\n-  nodeIdToHirMappings[crate_num] = {};\n-  locations[crate_num] = {};\n-  crate_names[crate_num] = crate_name;\n-\n-  return crate_num;\n-}\n-\n CrateNum\n Mappings::get_current_crate () const\n {\n   return currentCrateNum;\n }\n \n NodeId\n-Mappings::get_next_node_id (CrateNum crateNum)\n+Mappings::get_next_node_id ()\n {\n-  auto it = nodeIdIter.find (crateNum);\n-  // We're probably *not* parsing actual rust code... but mostly reusing\n-  // the parser in another way. Return 0\n-  if (it == nodeIdIter.end ())\n-    return 0;\n-\n-  auto id = it->second + 1;\n-  nodeIdIter[crateNum] = id;\n-  return id;\n+  auto it = nodeIdIter;\n+  nodeIdIter++;\n+  return it;\n }\n \n HirId\n Mappings::get_next_hir_id (CrateNum crateNum)\n {\n-  auto it = hirIdIter.find (crateNum);\n-  rust_assert (it != hirIdIter.end ());\n+  auto id = hirIdIter;\n+  hirIdIter++;\n+\n+  auto it = hirNodesWithinCrate.find (crateNum);\n+  if (it == hirNodesWithinCrate.end ())\n+    {\n+      hirNodesWithinCrate.insert ({crateNum, {}});\n+    }\n \n-  auto id = it->second + 1;\n-  hirIdIter[crateNum] = id;\n   hirNodesWithinCrate[crateNum].insert (id);\n   return id;\n }\n@@ -165,64 +158,89 @@ LocalDefId\n Mappings::get_next_localdef_id (CrateNum crateNum)\n {\n   auto it = localIdIter.find (crateNum);\n+  if (it == localIdIter.end ())\n+    {\n+      localIdIter.insert ({crateNum, 1});\n+    }\n+\n+  it = localIdIter.find (crateNum);\n   rust_assert (it != localIdIter.end ());\n \n-  auto id = it->second + 1;\n-  localIdIter[crateNum] = id;\n+  LocalDefId id = it->second;\n+  localIdIter[crateNum] = id + 1;\n   return id;\n }\n \n-AST::Crate *\n+AST::Crate &\n Mappings::get_ast_crate (CrateNum crateNum)\n {\n-  auto it = astCrateMappings.find (crateNum);\n-  if (it == astCrateMappings.end ())\n-    return nullptr;\n+  auto it = ast_crate_mappings.find (crateNum);\n+  rust_assert (it != ast_crate_mappings.end ());\n+  return *it->second;\n+}\n \n-  return it->second;\n+AST::Crate &\n+Mappings::get_ast_crate_by_node_id (NodeId id)\n+{\n+  auto i = crate_node_to_crate_num.find (id);\n+  rust_assert (i != crate_node_to_crate_num.end ());\n+\n+  CrateNum crateNum = i->second;\n+  auto it = ast_crate_mappings.find (crateNum);\n+  rust_assert (it != ast_crate_mappings.end ());\n+  return *it->second;\n }\n \n-void\n-Mappings::insert_ast_crate (AST::Crate *crate)\n+AST::Crate &\n+Mappings::insert_ast_crate (std::unique_ptr<AST::Crate> &&crate,\n+\t\t\t    CrateNum crate_num)\n {\n-  CrateNum crateNum = get_current_crate ();\n-  rust_assert (get_ast_crate (crateNum) == nullptr);\n+  auto it = ast_crate_mappings.find (crate_num);\n+  rust_assert (it == ast_crate_mappings.end ());\n \n-  astCrateMappings[crateNum] = crate;\n+  // store it\n+  ast_crate_mappings.insert ({crate_num, crate.get ()});\n+\n+  // return the reference to it\n+  it = ast_crate_mappings.find (crate_num);\n+  rust_assert (it != ast_crate_mappings.end ());\n+  return *it->second;\n }\n \n-HIR::Crate *\n+HIR::Crate &\n Mappings::get_hir_crate (CrateNum crateNum)\n {\n-  auto it = hirCrateMappings.find (crateNum);\n-  if (it == hirCrateMappings.end ())\n-    return nullptr;\n-\n-  return it->second;\n+  auto it = hir_crate_mappings.find (crateNum);\n+  rust_assert (it != hir_crate_mappings.end ());\n+  return *it->second;\n }\n \n bool\n Mappings::is_local_hirid_crate (HirId crateNum)\n {\n-  for (const auto &it : hirCrateMappings)\n+  for (const auto &it : hir_crate_mappings)\n     {\n-      const HIR::Crate *crate = it.second;\n+      const auto &crate = it.second;\n       if (crate->get_mappings ().get_hirid () == crateNum)\n \treturn true;\n     }\n   return false;\n }\n \n-void\n-Mappings::insert_hir_crate (HIR::Crate *crate)\n+HIR::Crate &\n+Mappings::insert_hir_crate (std::unique_ptr<HIR::Crate> &&crate)\n {\n   CrateNum crateNum = crate->get_mappings ().get_crate_num ();\n-  rust_assert (get_hir_crate (crateNum) == nullptr);\n+  auto it = hir_crate_mappings.find (crateNum);\n+  rust_assert (it == hir_crate_mappings.end ());\n \n-  hirCrateMappings[crateNum] = crate;\n-  insert_node_to_hir (crate->get_mappings ().get_crate_num (),\n-\t\t      crate->get_mappings ().get_nodeid (),\n+  insert_node_to_hir (crate->get_mappings ().get_nodeid (),\n \t\t      crate->get_mappings ().get_hirid ());\n+  hir_crate_mappings.insert ({crateNum, crate.get ()});\n+\n+  it = hir_crate_mappings.find (crateNum);\n+  rust_assert (it != hir_crate_mappings.end ());\n+  return *it->second;\n }\n \n void\n@@ -249,420 +267,317 @@ Mappings::lookup_defid (DefId id)\n }\n \n void\n-Mappings::insert_hir_item (CrateNum crateNum, HirId id, HIR::Item *item)\n+Mappings::insert_hir_item (HIR::Item *item)\n {\n-  rust_assert (lookup_hir_item (crateNum, id) == nullptr);\n+  auto id = item->get_mappings ().get_hirid ();\n+  rust_assert (lookup_hir_item (id) == nullptr);\n \n-  hirItemMappings[crateNum][id] = item;\n-  insert_node_to_hir (crateNum, item->get_mappings ().get_nodeid (), id);\n+  hirItemMappings[id] = item;\n+  insert_node_to_hir (item->get_mappings ().get_nodeid (), id);\n }\n \n HIR::Item *\n-Mappings::lookup_hir_item (CrateNum crateNum, HirId id)\n+Mappings::lookup_hir_item (HirId id)\n {\n-  auto it = hirItemMappings.find (crateNum);\n+  auto it = hirItemMappings.find (id);\n   if (it == hirItemMappings.end ())\n     return nullptr;\n \n-  auto iy = it->second.find (id);\n-  if (iy == it->second.end ())\n-    return nullptr;\n-\n-  return iy->second;\n+  return it->second;\n }\n \n void\n-Mappings::insert_hir_trait_item (CrateNum crateNum, HirId id,\n-\t\t\t\t HIR::TraitItem *item)\n+Mappings::insert_hir_trait_item (HIR::TraitItem *item)\n {\n-  rust_assert (lookup_hir_trait_item (crateNum, id) == nullptr);\n+  auto id = item->get_mappings ().get_hirid ();\n+  rust_assert (lookup_hir_trait_item (id) == nullptr);\n \n-  hirTraitItemMappings[crateNum][id] = item;\n-  insert_node_to_hir (crateNum, item->get_mappings ().get_nodeid (), id);\n+  hirTraitItemMappings[id] = item;\n+  insert_node_to_hir (item->get_mappings ().get_nodeid (), id);\n }\n \n HIR::TraitItem *\n-Mappings::lookup_hir_trait_item (CrateNum crateNum, HirId id)\n+Mappings::lookup_hir_trait_item (HirId id)\n {\n-  auto it = hirTraitItemMappings.find (crateNum);\n+  auto it = hirTraitItemMappings.find (id);\n   if (it == hirTraitItemMappings.end ())\n     return nullptr;\n \n-  auto iy = it->second.find (id);\n-  if (iy == it->second.end ())\n-    return nullptr;\n-\n-  return iy->second;\n+  return it->second;\n }\n \n void\n-Mappings::insert_hir_extern_item (CrateNum crateNum, HirId id,\n-\t\t\t\t  HIR::ExternalItem *item)\n+Mappings::insert_hir_extern_item (HIR::ExternalItem *item)\n {\n-  rust_assert (lookup_hir_extern_item (crateNum, id) == nullptr);\n+  auto id = item->get_mappings ().get_hirid ();\n+  rust_assert (lookup_hir_extern_item (id) == nullptr);\n \n-  hirExternItemMappings[crateNum][id] = item;\n-  insert_node_to_hir (crateNum, item->get_mappings ().get_nodeid (), id);\n+  hirExternItemMappings[id] = item;\n+  insert_node_to_hir (item->get_mappings ().get_nodeid (), id);\n }\n \n HIR::ExternalItem *\n-Mappings::lookup_hir_extern_item (CrateNum crateNum, HirId id)\n+Mappings::lookup_hir_extern_item (HirId id)\n {\n-  auto it = hirExternItemMappings.find (crateNum);\n+  auto it = hirExternItemMappings.find (id);\n   if (it == hirExternItemMappings.end ())\n     return nullptr;\n \n-  auto iy = it->second.find (id);\n-  if (iy == it->second.end ())\n-    return nullptr;\n-\n-  return iy->second;\n+  return it->second;\n }\n \n void\n-Mappings::insert_hir_impl_block (CrateNum crateNum, HirId id,\n-\t\t\t\t HIR::ImplBlock *item)\n+Mappings::insert_hir_impl_block (HIR::ImplBlock *item)\n {\n-  rust_assert (lookup_hir_impl_block (crateNum, id) == nullptr);\n+  auto id = item->get_mappings ().get_hirid ();\n+  rust_assert (lookup_hir_impl_block (id) == nullptr);\n \n-  hirImplBlockMappings[crateNum][id] = item;\n-  insert_node_to_hir (crateNum, item->get_mappings ().get_nodeid (), id);\n+  hirImplBlockMappings[id] = item;\n+  insert_node_to_hir (item->get_mappings ().get_nodeid (), id);\n }\n \n HIR::ImplBlock *\n-Mappings::lookup_hir_impl_block (CrateNum crateNum, HirId id)\n+Mappings::lookup_hir_impl_block (HirId id)\n {\n-  auto it = hirImplBlockMappings.find (crateNum);\n+  auto it = hirImplBlockMappings.find (id);\n   if (it == hirImplBlockMappings.end ())\n     return nullptr;\n \n-  auto iy = it->second.find (id);\n-  if (iy == it->second.end ())\n-    return nullptr;\n-\n-  return iy->second;\n+  return it->second;\n }\n \n void\n-Mappings::insert_module (CrateNum crateNum, HirId id, HIR::Module *module)\n+Mappings::insert_module (HIR::Module *module)\n {\n-  rust_assert (lookup_module (crateNum, id) == nullptr);\n+  auto id = module->get_mappings ().get_hirid ();\n+  rust_assert (lookup_module (id) == nullptr);\n \n-  hirModuleMappings[crateNum][id] = module;\n+  hirModuleMappings[id] = module;\n+  insert_node_to_hir (module->get_mappings ().get_nodeid (), id);\n }\n \n HIR::Module *\n-Mappings::lookup_module (CrateNum crateNum, HirId id)\n+Mappings::lookup_module (HirId id)\n {\n-  auto it = hirModuleMappings.find (crateNum);\n+  auto it = hirModuleMappings.find (id);\n   if (it == hirModuleMappings.end ())\n     return nullptr;\n \n-  auto iy = it->second.find (id);\n-  if (iy == it->second.end ())\n-    return nullptr;\n-\n-  return iy->second;\n+  return it->second;\n }\n \n void\n-Mappings::insert_hir_implitem (CrateNum crateNum, HirId id,\n-\t\t\t       HirId parent_impl_id, HIR::ImplItem *item)\n+Mappings::insert_hir_implitem (HirId parent_impl_id, HIR::ImplItem *item)\n {\n-  rust_assert (lookup_hir_implitem (crateNum, id, nullptr) == nullptr);\n-  hirImplItemMappings[crateNum][id]\n+  auto id = item->get_impl_mappings ().get_hirid ();\n+  rust_assert (lookup_hir_implitem (id, nullptr) == nullptr);\n+\n+  hirImplItemMappings[id]\n     = std::pair<HirId, HIR::ImplItem *> (parent_impl_id, item);\n-  insert_node_to_hir (crateNum, item->get_impl_mappings ().get_nodeid (), id);\n+  insert_node_to_hir (item->get_impl_mappings ().get_nodeid (), id);\n }\n \n HIR::ImplItem *\n-Mappings::lookup_hir_implitem (CrateNum crateNum, HirId id,\n-\t\t\t       HirId *parent_impl_id)\n+Mappings::lookup_hir_implitem (HirId id, HirId *parent_impl_id)\n {\n-  auto it = hirImplItemMappings.find (crateNum);\n+  auto it = hirImplItemMappings.find (id);\n   if (it == hirImplItemMappings.end ())\n     return nullptr;\n \n-  auto iy = it->second.find (id);\n-  if (iy == it->second.end ())\n-    return nullptr;\n-\n-  std::pair<HirId, HIR::ImplItem *> &ref = iy->second;\n+  std::pair<HirId, HIR::ImplItem *> &ref = it->second;\n   if (parent_impl_id != nullptr)\n     *parent_impl_id = ref.first;\n \n   return ref.second;\n }\n \n void\n-Mappings::insert_hir_expr (CrateNum crateNum, HirId id, HIR::Expr *expr)\n+Mappings::insert_hir_expr (HIR::Expr *expr)\n {\n-  hirExprMappings[crateNum][id] = expr;\n-  insert_node_to_hir (crateNum, expr->get_mappings ().get_nodeid (), id);\n-  insert_location (crateNum, id, expr->get_locus ());\n+  auto id = expr->get_mappings ().get_hirid ();\n+  hirExprMappings[id] = expr;\n+\n+  insert_node_to_hir (expr->get_mappings ().get_nodeid (), id);\n+  insert_location (id, expr->get_locus ());\n }\n \n HIR::Expr *\n-Mappings::lookup_hir_expr (CrateNum crateNum, HirId id)\n+Mappings::lookup_hir_expr (HirId id)\n {\n-  auto it = hirExprMappings.find (crateNum);\n+  auto it = hirExprMappings.find (id);\n   if (it == hirExprMappings.end ())\n     return nullptr;\n \n-  auto iy = it->second.find (id);\n-  if (iy == it->second.end ())\n-    return nullptr;\n-\n-  return iy->second;\n+  return it->second;\n }\n \n void\n-Mappings::insert_hir_path_expr_seg (CrateNum crateNum, HirId id,\n-\t\t\t\t    HIR::PathExprSegment *expr)\n+Mappings::insert_hir_path_expr_seg (HIR::PathExprSegment *expr)\n {\n-  rust_assert (lookup_hir_path_expr_seg (crateNum, id) == nullptr);\n+  auto id = expr->get_mappings ().get_hirid ();\n+  rust_assert (lookup_hir_path_expr_seg (id) == nullptr);\n \n-  hirPathSegMappings[crateNum][id] = expr;\n-  insert_node_to_hir (crateNum, expr->get_mappings ().get_nodeid (), id);\n-  insert_location (crateNum, id, expr->get_locus ());\n+  hirPathSegMappings[id] = expr;\n+  insert_node_to_hir (expr->get_mappings ().get_nodeid (), id);\n+  insert_location (id, expr->get_locus ());\n }\n \n HIR::PathExprSegment *\n-Mappings::lookup_hir_path_expr_seg (CrateNum crateNum, HirId id)\n+Mappings::lookup_hir_path_expr_seg (HirId id)\n {\n-  auto it = hirPathSegMappings.find (crateNum);\n+  auto it = hirPathSegMappings.find (id);\n   if (it == hirPathSegMappings.end ())\n     return nullptr;\n \n-  auto iy = it->second.find (id);\n-  if (iy == it->second.end ())\n-    return nullptr;\n-\n-  return iy->second;\n-}\n-\n-void\n-Mappings::insert_simple_path_segment (CrateNum crateNum, HirId id,\n-\t\t\t\t      const AST::SimplePathSegment *path)\n-{\n-  rust_assert (lookup_simple_path_segment (crateNum, id) == nullptr);\n-\n-  astSimplePathSegmentMappings[crateNum][id] = path;\n-  insert_node_to_hir (crateNum, path->get_node_id (), id);\n-  insert_location (crateNum, id, path->get_locus ());\n-}\n-\n-const AST::SimplePathSegment *\n-Mappings::lookup_simple_path_segment (CrateNum crateNum, HirId id)\n-{\n-  auto it = astSimplePathSegmentMappings.find (crateNum);\n-  if (it == astSimplePathSegmentMappings.end ())\n-    return nullptr;\n-\n-  auto iy = it->second.find (id);\n-  if (iy == it->second.end ())\n-    return nullptr;\n-\n-  return iy->second;\n-}\n-\n-void\n-Mappings::insert_simple_path (CrateNum crateNum, HirId id,\n-\t\t\t      const AST::SimplePath *path)\n-{\n-  rust_assert (lookup_simple_path (crateNum, id) == nullptr);\n-\n-  astSimplePathMappings[crateNum][id] = path;\n-  insert_node_to_hir (crateNum, path->get_node_id (), id);\n-  insert_location (crateNum, id, path->get_locus ());\n-}\n-\n-const AST::SimplePath *\n-Mappings::lookup_simple_path (CrateNum crateNum, HirId id)\n-{\n-  auto it = astSimplePathMappings.find (crateNum);\n-  if (it == astSimplePathMappings.end ())\n-    return nullptr;\n-\n-  auto iy = it->second.find (id);\n-  if (iy == it->second.end ())\n-    return nullptr;\n-\n-  return iy->second;\n+  return it->second;\n }\n \n void\n-Mappings::insert_hir_generic_param (CrateNum crateNum, HirId id,\n-\t\t\t\t    HIR::GenericParam *param)\n+Mappings::insert_hir_generic_param (HIR::GenericParam *param)\n {\n-  rust_assert (lookup_hir_generic_param (crateNum, id) == nullptr);\n+  auto id = param->get_mappings ().get_hirid ();\n+  rust_assert (lookup_hir_generic_param (id) == nullptr);\n \n-  hirGenericParamMappings[crateNum][id] = param;\n-  insert_node_to_hir (crateNum, param->get_mappings ().get_nodeid (), id);\n-  insert_location (crateNum, id, param->get_locus ());\n+  hirGenericParamMappings[id] = param;\n+  insert_node_to_hir (param->get_mappings ().get_nodeid (), id);\n+  insert_location (id, param->get_locus ());\n }\n \n HIR::GenericParam *\n-Mappings::lookup_hir_generic_param (CrateNum crateNum, HirId id)\n+Mappings::lookup_hir_generic_param (HirId id)\n {\n-  auto it = hirGenericParamMappings.find (crateNum);\n+  auto it = hirGenericParamMappings.find (id);\n   if (it == hirGenericParamMappings.end ())\n     return nullptr;\n \n-  auto iy = it->second.find (id);\n-  if (iy == it->second.end ())\n-    return nullptr;\n-\n-  return iy->second;\n+  return it->second;\n }\n \n void\n-Mappings::insert_hir_type (CrateNum crateNum, HirId id, HIR::Type *type)\n+Mappings::insert_hir_type (HIR::Type *type)\n {\n-  rust_assert (lookup_hir_type (crateNum, id) == nullptr);\n+  auto id = type->get_mappings ().get_hirid ();\n+  rust_assert (lookup_hir_type (id) == nullptr);\n \n-  hirTypeMappings[crateNum][id] = type;\n-  insert_node_to_hir (crateNum, type->get_mappings ().get_nodeid (), id);\n+  hirTypeMappings[id] = type;\n+  insert_node_to_hir (type->get_mappings ().get_nodeid (), id);\n }\n \n HIR::Type *\n-Mappings::lookup_hir_type (CrateNum crateNum, HirId id)\n+Mappings::lookup_hir_type (HirId id)\n {\n-  auto it = hirTypeMappings.find (crateNum);\n+  auto it = hirTypeMappings.find (id);\n   if (it == hirTypeMappings.end ())\n     return nullptr;\n \n-  auto iy = it->second.find (id);\n-  if (iy == it->second.end ())\n-    return nullptr;\n-\n-  return iy->second;\n+  return it->second;\n }\n \n void\n-Mappings::insert_hir_stmt (CrateNum crateNum, HirId id, HIR::Stmt *stmt)\n+Mappings::insert_hir_stmt (HIR::Stmt *stmt)\n {\n-  rust_assert (lookup_hir_stmt (crateNum, id) == nullptr);\n+  auto id = stmt->get_mappings ().get_hirid ();\n+  rust_assert (lookup_hir_stmt (id) == nullptr);\n \n-  hirStmtMappings[crateNum][id] = stmt;\n-  insert_node_to_hir (crateNum, stmt->get_mappings ().get_nodeid (), id);\n+  hirStmtMappings[id] = stmt;\n+  insert_node_to_hir (stmt->get_mappings ().get_nodeid (), id);\n }\n \n HIR::Stmt *\n-Mappings::lookup_hir_stmt (CrateNum crateNum, HirId id)\n+Mappings::lookup_hir_stmt (HirId id)\n {\n-  auto it = hirStmtMappings.find (crateNum);\n+  auto it = hirStmtMappings.find (id);\n   if (it == hirStmtMappings.end ())\n     return nullptr;\n \n-  auto iy = it->second.find (id);\n-  if (iy == it->second.end ())\n-    return nullptr;\n-\n-  return iy->second;\n+  return it->second;\n }\n \n void\n-Mappings::insert_hir_param (CrateNum crateNum, HirId id,\n-\t\t\t    HIR::FunctionParam *param)\n+Mappings::insert_hir_param (HIR::FunctionParam *param)\n {\n-  rust_assert (lookup_hir_stmt (crateNum, id) == nullptr);\n+  auto id = param->get_mappings ().get_hirid ();\n+  rust_assert (lookup_hir_param (id) == nullptr);\n \n-  hirParamMappings[crateNum][id] = param;\n-  insert_node_to_hir (crateNum, param->get_mappings ().get_nodeid (), id);\n+  hirParamMappings[id] = param;\n+  insert_node_to_hir (param->get_mappings ().get_nodeid (), id);\n }\n \n HIR::FunctionParam *\n-Mappings::lookup_hir_param (CrateNum crateNum, HirId id)\n+Mappings::lookup_hir_param (HirId id)\n {\n-  auto it = hirParamMappings.find (crateNum);\n+  auto it = hirParamMappings.find (id);\n   if (it == hirParamMappings.end ())\n     return nullptr;\n \n-  auto iy = it->second.find (id);\n-  if (iy == it->second.end ())\n-    return nullptr;\n-\n-  return iy->second;\n+  return it->second;\n }\n \n void\n-Mappings::insert_hir_self_param (CrateNum crateNum, HirId id,\n-\t\t\t\t HIR::SelfParam *param)\n+Mappings::insert_hir_self_param (HIR::SelfParam *param)\n {\n-  rust_assert (lookup_hir_stmt (crateNum, id) == nullptr);\n+  auto id = param->get_mappings ().get_hirid ();\n+  rust_assert (lookup_hir_self_param (id) == nullptr);\n \n-  hirSelfParamMappings[crateNum][id] = param;\n-  insert_node_to_hir (crateNum, param->get_mappings ().get_nodeid (), id);\n+  hirSelfParamMappings[id] = param;\n+  insert_node_to_hir (param->get_mappings ().get_nodeid (), id);\n }\n \n HIR::SelfParam *\n-Mappings::lookup_hir_self_param (CrateNum crateNum, HirId id)\n+Mappings::lookup_hir_self_param (HirId id)\n {\n-  auto it = hirSelfParamMappings.find (crateNum);\n+  auto it = hirSelfParamMappings.find (id);\n   if (it == hirSelfParamMappings.end ())\n     return nullptr;\n \n-  auto iy = it->second.find (id);\n-  if (iy == it->second.end ())\n-    return nullptr;\n-\n-  return iy->second;\n+  return it->second;\n }\n \n void\n-Mappings::insert_hir_struct_field (CrateNum crateNum, HirId id,\n-\t\t\t\t   HIR::StructExprField *field)\n+Mappings::insert_hir_struct_field (HIR::StructExprField *field)\n {\n-  rust_assert (lookup_hir_stmt (crateNum, id) == nullptr);\n+  auto id = field->get_mappings ().get_hirid ();\n+  rust_assert (lookup_hir_struct_field (id) == nullptr);\n \n-  hirStructFieldMappings[crateNum][id] = field;\n-  insert_node_to_hir (crateNum, field->get_mappings ().get_nodeid (), id);\n+  hirStructFieldMappings[id] = field;\n+  insert_node_to_hir (field->get_mappings ().get_nodeid (), id);\n }\n \n HIR::StructExprField *\n-Mappings::lookup_hir_struct_field (CrateNum crateNum, HirId id)\n+Mappings::lookup_hir_struct_field (HirId id)\n {\n-  auto it = hirStructFieldMappings.find (crateNum);\n+  auto it = hirStructFieldMappings.find (id);\n   if (it == hirStructFieldMappings.end ())\n     return nullptr;\n \n-  auto iy = it->second.find (id);\n-  if (iy == it->second.end ())\n-    return nullptr;\n-\n-  return iy->second;\n+  return it->second;\n }\n \n void\n-Mappings::insert_hir_pattern (CrateNum crateNum, HirId id,\n-\t\t\t      HIR::Pattern *pattern)\n+Mappings::insert_hir_pattern (HIR::Pattern *pattern)\n {\n-  hirPatternMappings[crateNum][id] = pattern;\n-  insert_node_to_hir (crateNum, pattern->get_pattern_mappings ().get_nodeid (),\n-\t\t      id);\n+  auto id = pattern->get_pattern_mappings ().get_hirid ();\n+  rust_assert (lookup_hir_pattern (id) == nullptr);\n+\n+  hirPatternMappings[id] = pattern;\n+  insert_node_to_hir (pattern->get_pattern_mappings ().get_nodeid (), id);\n }\n \n HIR::Pattern *\n-Mappings::lookup_hir_pattern (CrateNum crateNum, HirId id)\n+Mappings::lookup_hir_pattern (HirId id)\n {\n-  auto it = hirPatternMappings.find (crateNum);\n+  auto it = hirPatternMappings.find (id);\n   if (it == hirPatternMappings.end ())\n     return nullptr;\n \n-  auto iy = it->second.find (id);\n-  if (iy == it->second.end ())\n-    return nullptr;\n-\n-  return iy->second;\n+  return it->second;\n }\n \n void\n Mappings::insert_local_defid_mapping (CrateNum crateNum, LocalDefId id,\n \t\t\t\t      HIR::Item *item)\n {\n   rust_assert (lookup_local_defid (crateNum, id) == nullptr);\n-\n   localDefIdMappings[crateNum][id] = item;\n }\n \n@@ -696,75 +611,59 @@ Mappings::walk_local_defids_for_crate (CrateNum crateNum,\n }\n \n void\n-Mappings::insert_node_to_hir (CrateNum crate, NodeId id, HirId ref)\n+Mappings::insert_node_to_hir (NodeId id, HirId ref)\n {\n-  nodeIdToHirMappings[crate][id] = ref;\n-  hirIdToNodeMappings[crate][ref] = id;\n+  nodeIdToHirMappings[id] = ref;\n+  hirIdToNodeMappings[ref] = id;\n }\n \n bool\n-Mappings::lookup_node_to_hir (CrateNum crate, NodeId id, HirId *ref)\n+Mappings::lookup_node_to_hir (NodeId id, HirId *ref)\n {\n-  auto it = nodeIdToHirMappings.find (crate);\n+  auto it = nodeIdToHirMappings.find (id);\n   if (it == nodeIdToHirMappings.end ())\n     return false;\n \n-  auto iy = it->second.find (id);\n-  if (iy == it->second.end ())\n-    return false;\n-\n-  *ref = iy->second;\n+  *ref = it->second;\n   return true;\n }\n \n bool\n-Mappings::lookup_hir_to_node (CrateNum crate, HirId id, NodeId *ref)\n+Mappings::lookup_hir_to_node (HirId id, NodeId *ref)\n {\n-  auto it = hirIdToNodeMappings.find (crate);\n+  auto it = hirIdToNodeMappings.find (id);\n   if (it == hirIdToNodeMappings.end ())\n     return false;\n \n-  auto iy = it->second.find (id);\n-  if (iy == it->second.end ())\n-    return false;\n-\n-  *ref = iy->second;\n+  *ref = it->second;\n   return true;\n }\n \n void\n-Mappings::insert_location (CrateNum crate, HirId id, Location locus)\n+Mappings::insert_location (HirId id, Location locus)\n {\n-  locations[crate][id] = locus;\n+  locations[id] = locus;\n }\n \n Location\n-Mappings::lookup_location (CrateNum crate, HirId id)\n+Mappings::lookup_location (HirId id)\n {\n-  auto it = locations.find (crate);\n+  auto it = locations.find (id);\n   if (it == locations.end ())\n     return Location ();\n \n-  auto iy = it->second.find (id);\n-  if (iy == it->second.end ())\n-    return Location ();\n-\n-  return iy->second;\n+  return it->second;\n }\n \n bool\n-Mappings::resolve_nodeid_to_stmt (CrateNum crate, NodeId id, HIR::Stmt **stmt)\n+Mappings::resolve_nodeid_to_stmt (NodeId id, HIR::Stmt **stmt)\n {\n-  auto it = nodeIdToHirMappings.find (crate);\n+  auto it = nodeIdToHirMappings.find (id);\n   if (it == nodeIdToHirMappings.end ())\n     return false;\n \n-  auto iy = it->second.find (id);\n-  if (iy == it->second.end ())\n-    return false;\n-\n-  HirId resolved = iy->second;\n-  auto resolved_stmt = lookup_hir_stmt (crate, resolved);\n+  HirId resolved = it->second;\n+  auto resolved_stmt = lookup_hir_stmt (resolved);\n   *stmt = resolved_stmt;\n   return resolved_stmt != nullptr;\n }\n@@ -776,15 +675,12 @@ Mappings::iterate_impl_items (\n   for (auto it = hirImplItemMappings.begin (); it != hirImplItemMappings.end ();\n        it++)\n     {\n-      for (auto iy = it->second.begin (); iy != it->second.end (); iy++)\n-\t{\n-\t  auto id = iy->first;\n-\t  auto impl_item = iy->second.second;\n-\t  auto impl = lookup_associated_impl (\n-\t    impl_item->get_impl_mappings ().get_hirid ());\n-\t  if (!cb (id, impl_item, impl))\n-\t    return;\n-\t}\n+      auto id = it->first;\n+      auto impl_item = it->second.second;\n+      auto impl\n+\t= lookup_associated_impl (impl_item->get_impl_mappings ().get_hirid ());\n+      if (!cb (id, impl_item, impl))\n+\treturn;\n     }\n }\n \n@@ -794,13 +690,10 @@ Mappings::iterate_impl_blocks (std::function<bool (HirId, HIR::ImplBlock *)> cb)\n   for (auto it = hirImplBlockMappings.begin ();\n        it != hirImplBlockMappings.end (); it++)\n     {\n-      for (auto iy = it->second.begin (); iy != it->second.end (); iy++)\n-\t{\n-\t  HirId id = iy->first;\n-\t  HIR::ImplBlock *impl_block = iy->second;\n-\t  if (!cb (id, impl_block))\n-\t    return;\n-\t}\n+      HirId id = it->first;\n+      HIR::ImplBlock *impl_block = it->second;\n+      if (!cb (id, impl_block))\n+\treturn;\n     }\n }\n \n@@ -811,15 +704,12 @@ Mappings::iterate_trait_items (\n   for (auto it = hirTraitItemMappings.begin ();\n        it != hirTraitItemMappings.end (); it++)\n     {\n-      for (auto iy = it->second.begin (); iy != it->second.end (); iy++)\n-\t{\n-\t  HirId trait_item_id = iy->first;\n-\t  HIR::TraitItem *trait_item = iy->second;\n-\t  HIR::Trait *trait = lookup_trait_item_mapping (trait_item_id);\n-\n-\t  if (!cb (trait_item, trait))\n-\t    return;\n-\t}\n+      HirId trait_item_id = it->first;\n+      HIR::TraitItem *trait_item = it->second;\n+      HIR::Trait *trait = lookup_trait_item_mapping (trait_item_id);\n+\n+      if (!cb (trait_item, trait))\n+\treturn;\n     }\n }\n \n@@ -966,5 +856,25 @@ Mappings::node_is_module (NodeId query)\n   return module_child_items.find (query) != module_child_items.end ();\n }\n \n+void\n+Mappings::insert_ast_item (AST::Item *item)\n+{\n+  auto it = ast_item_mappings.find (item->get_node_id ());\n+  rust_assert (it == ast_item_mappings.end ());\n+\n+  ast_item_mappings[item->get_node_id ()] = item;\n+}\n+\n+bool\n+Mappings::lookup_ast_item (NodeId id, AST::Item **result)\n+{\n+  auto it = ast_item_mappings.find (id);\n+  if (it == ast_item_mappings.end ())\n+    return false;\n+\n+  *result = it->second;\n+  return true;\n+}\n+\n } // namespace Analysis\n } // namespace Rust"}, {"sha": "804242e99bb5f121a1cd4693c6f0bf03e12af15a", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 89, "deletions": 138, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1293ae35777427e1c87659ae21f9bca5f6395d6/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=e1293ae35777427e1c87659ae21f9bca5f6395d6", "patch": "@@ -74,10 +74,9 @@ class Mappings\n   static Mappings *get ();\n   ~Mappings ();\n \n-  CrateNum get_next_crate_num ();\n+  CrateNum get_next_crate_num (const std::string &name);\n   void set_current_crate (CrateNum crateNum);\n   CrateNum get_current_crate () const;\n-  CrateNum setup_crate_mappings (std::string crate_name);\n \n   bool get_crate_name (CrateNum crate_num, std::string &name) const\n   {\n@@ -90,16 +89,9 @@ class Mappings\n   }\n \n   // set crate name mid-compilation\n-  // don't use this if setting crate name before Session::parse_files\n-  bool set_crate_name (CrateNum crate_num, std::string name)\n+  void set_crate_name (CrateNum crate_num, const std::string &name)\n   {\n-    rust_assert (!name.empty ());\n-    auto it = crate_names.find (crate_num);\n-    if (it == crate_names.end ())\n-      return false;\n-\n-    it->second.assign (name);\n-    return true;\n+    crate_names[crate_num] = name;\n   }\n \n   std::string get_current_crate_name () const\n@@ -110,20 +102,22 @@ class Mappings\n     return name;\n   }\n \n-  NodeId get_next_node_id () { return get_next_node_id (get_current_crate ()); }\n-  NodeId get_next_node_id (CrateNum crateNum);\n-\n+  NodeId get_next_node_id ();\n   HirId get_next_hir_id () { return get_next_hir_id (get_current_crate ()); }\n   HirId get_next_hir_id (CrateNum crateNum);\n-\n+  LocalDefId get_next_localdef_id ()\n+  {\n+    return get_next_localdef_id (get_current_crate ());\n+  }\n   LocalDefId get_next_localdef_id (CrateNum crateNum);\n \n-  AST::Crate *get_ast_crate (CrateNum crateNum);\n-  void insert_ast_crate (AST::Crate *crate);\n-\n-  HIR::Crate *get_hir_crate (CrateNum crateNum);\n+  AST::Crate &get_ast_crate (CrateNum crateNum);\n+  AST::Crate &get_ast_crate_by_node_id (NodeId id);\n+  AST::Crate &insert_ast_crate (std::unique_ptr<AST::Crate> &&crate,\n+\t\t\t\tCrateNum crate_num);\n+  HIR::Crate &insert_hir_crate (std::unique_ptr<HIR::Crate> &&crate);\n+  HIR::Crate &get_hir_crate (CrateNum crateNum);\n   bool is_local_hirid_crate (HirId crateNum);\n-  void insert_hir_crate (HIR::Crate *crate);\n \n   void insert_defid_mapping (DefId id, HIR::Item *item);\n   HIR::Item *lookup_defid (DefId id);\n@@ -132,88 +126,62 @@ class Mappings\n \t\t\t\t   HIR::Item *item);\n   HIR::Item *lookup_local_defid (CrateNum crateNum, LocalDefId id);\n \n-  void insert_hir_item (CrateNum crateNum, HirId id, HIR::Item *item);\n-  HIR::Item *lookup_hir_item (CrateNum crateNum, HirId id);\n-\n-  void insert_hir_trait_item (CrateNum crateNum, HirId id,\n-\t\t\t      HIR::TraitItem *item);\n-  HIR::TraitItem *lookup_hir_trait_item (CrateNum crateNum, HirId id);\n+  void insert_hir_item (HIR::Item *item);\n+  HIR::Item *lookup_hir_item (HirId id);\n \n-  void insert_hir_extern_item (CrateNum crateNum, HirId id,\n-\t\t\t       HIR::ExternalItem *item);\n-  HIR::ExternalItem *lookup_hir_extern_item (CrateNum crateNum, HirId id);\n+  void insert_hir_trait_item (HIR::TraitItem *item);\n+  HIR::TraitItem *lookup_hir_trait_item (HirId id);\n \n-  void insert_hir_impl_block (CrateNum crateNum, HirId id,\n-\t\t\t      HIR::ImplBlock *item);\n-  HIR::ImplBlock *lookup_hir_impl_block (CrateNum crateNum, HirId id);\n+  void insert_hir_extern_item (HIR::ExternalItem *item);\n+  HIR::ExternalItem *lookup_hir_extern_item (HirId id);\n \n-  void insert_module (CrateNum crateNum, HirId id, HIR::Module *module);\n-  HIR::Module *lookup_module (CrateNum crateNum, HirId id);\n+  void insert_hir_impl_block (HIR::ImplBlock *item);\n+  HIR::ImplBlock *lookup_hir_impl_block (HirId id);\n \n-  void insert_hir_implitem (CrateNum crateNum, HirId id, HirId parent_impl_id,\n-\t\t\t    HIR::ImplItem *item);\n-  HIR::ImplItem *lookup_hir_implitem (CrateNum crateNum, HirId id,\n-\t\t\t\t      HirId *parent_impl_id);\n+  void insert_module (HIR::Module *module);\n+  HIR::Module *lookup_module (HirId id);\n \n-  void insert_hir_expr (CrateNum crateNum, HirId id, HIR::Expr *expr);\n-  HIR::Expr *lookup_hir_expr (CrateNum crateNum, HirId id);\n+  void insert_hir_implitem (HirId parent_impl_id, HIR::ImplItem *item);\n+  HIR::ImplItem *lookup_hir_implitem (HirId id, HirId *parent_impl_id);\n \n-  void insert_hir_path_expr_seg (CrateNum crateNum, HirId id,\n-\t\t\t\t HIR::PathExprSegment *expr);\n-  HIR::PathExprSegment *lookup_hir_path_expr_seg (CrateNum crateNum, HirId id);\n+  void insert_hir_expr (HIR::Expr *expr);\n+  HIR::Expr *lookup_hir_expr (HirId id);\n \n-  void insert_simple_path_segment (CrateNum crateNum, HirId id,\n-\t\t\t\t   const AST::SimplePathSegment *path);\n-  const AST::SimplePathSegment *lookup_simple_path_segment (CrateNum crateNum,\n-\t\t\t\t\t\t\t    HirId id);\n+  void insert_hir_path_expr_seg (HIR::PathExprSegment *expr);\n+  HIR::PathExprSegment *lookup_hir_path_expr_seg (HirId id);\n \n-  void insert_simple_path (CrateNum crateNum, HirId id,\n-\t\t\t   const AST::SimplePath *path);\n-  const AST::SimplePath *lookup_simple_path (CrateNum crateNum, HirId id);\n+  void insert_hir_generic_param (HIR::GenericParam *expr);\n+  HIR::GenericParam *lookup_hir_generic_param (HirId id);\n \n-  void insert_hir_generic_param (CrateNum crateNum, HirId id,\n-\t\t\t\t HIR::GenericParam *expr);\n-  HIR::GenericParam *lookup_hir_generic_param (CrateNum crateNum, HirId id);\n+  void insert_hir_type (HIR::Type *type);\n+  HIR::Type *lookup_hir_type (HirId id);\n \n-  void insert_hir_type (CrateNum crateNum, HirId id, HIR::Type *type);\n-  HIR::Type *lookup_hir_type (CrateNum crateNum, HirId id);\n+  void insert_hir_stmt (HIR::Stmt *stmt);\n+  HIR::Stmt *lookup_hir_stmt (HirId id);\n \n-  void insert_hir_stmt (CrateNum crateNum, HirId id, HIR::Stmt *stmt);\n-  HIR::Stmt *lookup_hir_stmt (CrateNum crateNum, HirId id);\n+  void insert_hir_param (HIR::FunctionParam *type);\n+  HIR::FunctionParam *lookup_hir_param (HirId id);\n \n-  void insert_hir_param (CrateNum crateNum, HirId id, HIR::FunctionParam *type);\n-  HIR::FunctionParam *lookup_hir_param (CrateNum crateNum, HirId id);\n+  void insert_hir_self_param (HIR::SelfParam *type);\n+  HIR::SelfParam *lookup_hir_self_param (HirId id);\n \n-  void insert_hir_self_param (CrateNum crateNum, HirId id,\n-\t\t\t      HIR::SelfParam *type);\n-  HIR::SelfParam *lookup_hir_self_param (CrateNum crateNum, HirId id);\n+  void insert_hir_struct_field (HIR::StructExprField *type);\n+  HIR::StructExprField *lookup_hir_struct_field (HirId id);\n \n-  void insert_hir_struct_field (CrateNum crateNum, HirId id,\n-\t\t\t\tHIR::StructExprField *type);\n-  HIR::StructExprField *lookup_hir_struct_field (CrateNum crateNum, HirId id);\n-\n-  void insert_hir_pattern (CrateNum crateNum, HirId id, HIR::Pattern *pattern);\n-  HIR::Pattern *lookup_hir_pattern (CrateNum crateNum, HirId id);\n+  void insert_hir_pattern (HIR::Pattern *pattern);\n+  HIR::Pattern *lookup_hir_pattern (HirId id);\n \n   void walk_local_defids_for_crate (CrateNum crateNum,\n \t\t\t\t    std::function<bool (HIR::Item *)> cb);\n \n-  void insert_node_to_hir (CrateNum crate, NodeId id, HirId ref);\n-  bool lookup_node_to_hir (CrateNum crate, NodeId id, HirId *ref);\n-  bool lookup_hir_to_node (CrateNum crate, HirId id, NodeId *ref);\n+  void insert_node_to_hir (NodeId id, HirId ref);\n+  bool lookup_node_to_hir (NodeId id, HirId *ref);\n+  bool lookup_hir_to_node (HirId id, NodeId *ref);\n \n-  void insert_location (CrateNum crate, HirId id, Location locus);\n-  Location lookup_location (CrateNum crate, HirId id);\n-  Location lookup_location (HirId id)\n-  {\n-    return lookup_location (get_current_crate (), id);\n-  }\n+  void insert_location (HirId id, Location locus);\n+  Location lookup_location (HirId id);\n \n-  bool resolve_nodeid_to_stmt (CrateNum crate, NodeId id, HIR::Stmt **stmt);\n-  bool resolve_nodeid_to_stmt (NodeId id, HIR::Stmt **stmt)\n-  {\n-    return resolve_nodeid_to_stmt (get_current_crate (), id, stmt);\n-  }\n+  bool resolve_nodeid_to_stmt (NodeId id, HIR::Stmt **stmt);\n \n   std::set<HirId> &get_hirids_within_crate (CrateNum crate)\n   {\n@@ -245,8 +213,7 @@ class Mappings\n   bool is_impl_item (HirId id)\n   {\n     HirId parent_impl_block_id = UNKNOWN_HIRID;\n-    return lookup_hir_implitem (get_current_crate (), id, &parent_impl_block_id)\n-\t   != nullptr;\n+    return lookup_hir_implitem (id, &parent_impl_block_id) != nullptr;\n   }\n \n   void insert_trait_item_mapping (HirId trait_item_id, HIR::Trait *trait)\n@@ -263,11 +230,10 @@ class Mappings\n     return lookup->second;\n   }\n \n-  void insert_canonical_path (CrateNum crate, NodeId id,\n-\t\t\t      const Resolver::CanonicalPath path)\n+  void insert_canonical_path (NodeId id, const Resolver::CanonicalPath path)\n   {\n     const Resolver::CanonicalPath *p = nullptr;\n-    if (lookup_canonical_path (crate, id, &p))\n+    if (lookup_canonical_path (id, &p))\n       {\n \t// if we have already stored a canonical path this is ok so long as\n \t// this new path is equal or is smaller that the existing one but in\n@@ -281,21 +247,16 @@ class Mappings\n \t  }\n       }\n \n-    paths[crate].emplace (id, std::move (path));\n+    paths.emplace (id, std::move (path));\n   }\n \n-  bool lookup_canonical_path (CrateNum crate, NodeId id,\n-\t\t\t      const Resolver::CanonicalPath **path)\n+  bool lookup_canonical_path (NodeId id, const Resolver::CanonicalPath **path)\n   {\n-    auto it = paths.find (crate);\n+    auto it = paths.find (id);\n     if (it == paths.end ())\n       return false;\n \n-    auto iy = it->second.find (id);\n-    if (iy == it->second.end ())\n-      return false;\n-\n-    *path = &iy->second;\n+    *path = &it->second;\n     return true;\n   }\n \n@@ -338,59 +299,46 @@ class Mappings\n   Optional<NodeId> lookup_parent_module (NodeId child_item);\n   bool node_is_module (NodeId query);\n \n+  void insert_ast_item (AST::Item *item);\n+  bool lookup_ast_item (NodeId id, AST::Item **result);\n+\n private:\n   Mappings ();\n \n-  CrateNum crateNumItr = 0;\n+  CrateNum crateNumItr;\n   CrateNum currentCrateNum;\n-\n-  std::map<CrateNum, HirId> hirIdIter;\n-  std::map<CrateNum, NodeId> nodeIdIter;\n+  HirId hirIdIter;\n+  NodeId nodeIdIter;\n   std::map<CrateNum, LocalDefId> localIdIter;\n \n-  std::map<CrateNum, AST::Crate *> astCrateMappings;\n-  std::map<CrateNum, HIR::Crate *> hirCrateMappings;\n-\n+  std::map<NodeId, CrateNum> crate_node_to_crate_num;\n+  std::map<CrateNum, AST::Crate *> ast_crate_mappings;\n+  std::map<CrateNum, HIR::Crate *> hir_crate_mappings;\n   std::map<DefId, HIR::Item *> defIdMappings;\n   std::map<CrateNum, std::map<LocalDefId, HIR::Item *>> localDefIdMappings;\n-  std::map<CrateNum, std::map<HirId, HIR::Module *>> hirModuleMappings;\n-  std::map<CrateNum, std::map<HirId, HIR::Item *>> hirItemMappings;\n-  std::map<CrateNum, std::map<HirId, HIR::Type *>> hirTypeMappings;\n-  std::map<CrateNum, std::map<HirId, HIR::Expr *>> hirExprMappings;\n-  std::map<CrateNum, std::map<HirId, HIR::Stmt *>> hirStmtMappings;\n-  std::map<CrateNum, std::map<HirId, HIR::FunctionParam *>> hirParamMappings;\n-  std::map<CrateNum, std::map<HirId, HIR::StructExprField *>>\n-    hirStructFieldMappings;\n-  std::map<CrateNum, std::map<HirId, std::pair<HirId, HIR::ImplItem *>>>\n-    hirImplItemMappings;\n-  std::map<CrateNum, std::map<HirId, HIR::SelfParam *>> hirSelfParamMappings;\n+\n+  std::map<HirId, HIR::Module *> hirModuleMappings;\n+  std::map<HirId, HIR::Item *> hirItemMappings;\n+  std::map<HirId, HIR::Type *> hirTypeMappings;\n+  std::map<HirId, HIR::Expr *> hirExprMappings;\n+  std::map<HirId, HIR::Stmt *> hirStmtMappings;\n+  std::map<HirId, HIR::FunctionParam *> hirParamMappings;\n+  std::map<HirId, HIR::StructExprField *> hirStructFieldMappings;\n+  std::map<HirId, std::pair<HirId, HIR::ImplItem *>> hirImplItemMappings;\n+  std::map<HirId, HIR::SelfParam *> hirSelfParamMappings;\n   std::map<HirId, HIR::ImplBlock *> hirImplItemsToImplMappings;\n-  std::map<CrateNum, std::map<HirId, HIR::ImplBlock *>> hirImplBlockMappings;\n-  std::map<CrateNum, std::map<HirId, HIR::TraitItem *>> hirTraitItemMappings;\n-  std::map<CrateNum, std::map<HirId, HIR::ExternalItem *>>\n-    hirExternItemMappings;\n-  std::map<CrateNum, std::map<HirId, const AST::SimplePath *>>\n-    astSimplePathMappings;\n-  std::map<CrateNum, std::map<HirId, const AST::SimplePathSegment *>>\n-    astSimplePathSegmentMappings;\n-  std::map<CrateNum, std::map<HirId, HIR::PathExprSegment *>>\n-    hirPathSegMappings;\n-  std::map<CrateNum, std::map<HirId, HIR::GenericParam *>>\n-    hirGenericParamMappings;\n+  std::map<HirId, HIR::ImplBlock *> hirImplBlockMappings;\n+  std::map<HirId, HIR::TraitItem *> hirTraitItemMappings;\n+  std::map<HirId, HIR::ExternalItem *> hirExternItemMappings;\n+  std::map<HirId, HIR::PathExprSegment *> hirPathSegMappings;\n+  std::map<HirId, HIR::GenericParam *> hirGenericParamMappings;\n   std::map<HirId, HIR::Trait *> hirTraitItemsToTraitMappings;\n-  std::map<CrateNum, std::map<HirId, HIR::Pattern *>> hirPatternMappings;\n-\n-  // this maps the lang=<item_type> to DefId mappings\n+  std::map<HirId, HIR::Pattern *> hirPatternMappings;\n   std::map<RustLangItem::ItemType, DefId> lang_item_mappings;\n-\n-  // canonical paths\n-  std::map<CrateNum, std::map<NodeId, const Resolver::CanonicalPath>> paths;\n-\n-  // location info\n-  std::map<CrateNum, std::map<NodeId, Location>> locations;\n-\n-  std::map<CrateNum, std::map<NodeId, HirId>> nodeIdToHirMappings;\n-  std::map<CrateNum, std::map<HirId, NodeId>> hirIdToNodeMappings;\n+  std::map<NodeId, const Resolver::CanonicalPath> paths;\n+  std::map<NodeId, Location> locations;\n+  std::map<NodeId, HirId> nodeIdToHirMappings;\n+  std::map<HirId, NodeId> hirIdToNodeMappings;\n \n   // all hirid nodes\n   std::map<CrateNum, std::set<HirId>> hirNodesWithinCrate;\n@@ -410,6 +358,9 @@ class Mappings\n   std::map<NodeId, std::vector<NodeId>> module_child_map;\n   std::map<NodeId, std::vector<Resolver::CanonicalPath>> module_child_items;\n   std::map<NodeId, NodeId> child_to_parent_module_map;\n+\n+  // AST mappings\n+  std::map<NodeId, AST::Item *> ast_item_mappings;\n };\n \n } // namespace Analysis"}]}