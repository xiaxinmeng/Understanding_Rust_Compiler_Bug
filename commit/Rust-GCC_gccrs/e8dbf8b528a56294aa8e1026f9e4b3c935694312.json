{"sha": "e8dbf8b528a56294aa8e1026f9e4b3c935694312", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThkYmY4YjUyOGE1NjI5NGFhOGUxMDI2ZjllNGIzYzkzNTY5NDMxMg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-08-16T15:32:17Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-08-16T15:32:17Z"}, "message": "re PR tree-optimization/50082 (-Wstrict-overflow mishandles typedef)\n\n2011-08-16  Richard GUenther  <rguenther@suse.de>\n\n\tPR tree-optimization/50082\n\t* tree-ssa-forwprop.c (combine_cond_expr_cond): Handle overflow\n\twarnings here, instead of ...\n\t(ssa_forward_propagate_and_combine): ... here.\n\t(forward_propagate_into_comparison_1): Adjust.\n\t(forward_propagate_into_comparison): Likewise.\n\t(forward_propagate_into_gimple_cond): Likewise.\n\t(forward_propagate_into_cond): Likewise.\n\nFrom-SVN: r177788", "tree": {"sha": "03b51cb52640713b93cb9e6433737d92e123364e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03b51cb52640713b93cb9e6433737d92e123364e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8dbf8b528a56294aa8e1026f9e4b3c935694312", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8dbf8b528a56294aa8e1026f9e4b3c935694312", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8dbf8b528a56294aa8e1026f9e4b3c935694312", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8dbf8b528a56294aa8e1026f9e4b3c935694312/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "870d0521923927bc95a32e3b92d1ba042686b407", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/870d0521923927bc95a32e3b92d1ba042686b407", "html_url": "https://github.com/Rust-GCC/gccrs/commit/870d0521923927bc95a32e3b92d1ba042686b407"}], "stats": {"total": 58, "additions": 32, "deletions": 26}, "files": [{"sha": "d567a2072cbb0259d1fc561dfa13d48607b525ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8dbf8b528a56294aa8e1026f9e4b3c935694312/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8dbf8b528a56294aa8e1026f9e4b3c935694312/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e8dbf8b528a56294aa8e1026f9e4b3c935694312", "patch": "@@ -1,3 +1,14 @@\n+2011-08-16  Richard GUenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/50082\n+\t* tree-ssa-forwprop.c (combine_cond_expr_cond): Handle overflow\n+\twarnings here, instead of ...\n+\t(ssa_forward_propagate_and_combine): ... here.\n+\t(forward_propagate_into_comparison_1): Adjust.\n+\t(forward_propagate_into_comparison): Likewise.\n+\t(forward_propagate_into_gimple_cond): Likewise.\n+\t(forward_propagate_into_cond): Likewise.\n+\n 2011-08-16  Andreas Schwab  <schwab@redhat.com>\n \n \t* ggc.h (ggc_alloc_rtvec_sized): Use ggc_alloc_zone_rtvec_def"}, {"sha": "00121796613c5d9841d08a847f306990b37e9519", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 21, "deletions": 26, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8dbf8b528a56294aa8e1026f9e4b3c935694312/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8dbf8b528a56294aa8e1026f9e4b3c935694312/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=e8dbf8b528a56294aa8e1026f9e4b3c935694312", "patch": "@@ -369,16 +369,20 @@ rhs_to_tree (tree type, gimple stmt)\n    considered simplified.  */\n \n static tree\n-combine_cond_expr_cond (location_t loc, enum tree_code code, tree type,\n+combine_cond_expr_cond (gimple stmt, enum tree_code code, tree type,\n \t\t\ttree op0, tree op1, bool invariant_only)\n {\n   tree t;\n \n   gcc_assert (TREE_CODE_CLASS (code) == tcc_comparison);\n \n-  t = fold_binary_loc (loc, code, type, op0, op1);\n+  fold_defer_overflow_warnings ();\n+  t = fold_binary_loc (gimple_location (stmt), code, type, op0, op1);\n   if (!t)\n-    return NULL_TREE;\n+    {\n+      fold_undefer_overflow_warnings (false, NULL, 0);\n+      return NULL_TREE;\n+    }\n \n   /* Require that we got a boolean type out if we put one in.  */\n   gcc_assert (TREE_CODE (TREE_TYPE (t)) == TREE_CODE (type));\n@@ -388,7 +392,12 @@ combine_cond_expr_cond (location_t loc, enum tree_code code, tree type,\n \n   /* Bail out if we required an invariant but didn't get one.  */\n   if (!t || (invariant_only && !is_gimple_min_invariant (t)))\n-    return NULL_TREE;\n+    {\n+      fold_undefer_overflow_warnings (false, NULL, 0);\n+      return NULL_TREE;\n+    }\n+\n+  fold_undefer_overflow_warnings (!gimple_no_warning_p (stmt), stmt, 0);\n \n   return t;\n }\n@@ -398,7 +407,7 @@ combine_cond_expr_cond (location_t loc, enum tree_code code, tree type,\n    were no simplifying combines.  */\n \n static tree\n-forward_propagate_into_comparison_1 (location_t loc,\n+forward_propagate_into_comparison_1 (gimple stmt,\n \t\t\t\t     enum tree_code code, tree type,\n \t\t\t\t     tree op0, tree op1)\n {\n@@ -414,7 +423,7 @@ forward_propagate_into_comparison_1 (location_t loc,\n       if (def_stmt && can_propagate_from (def_stmt))\n \t{\n \t  rhs0 = rhs_to_tree (TREE_TYPE (op1), def_stmt);\n-\t  tmp = combine_cond_expr_cond (loc, code, type,\n+\t  tmp = combine_cond_expr_cond (stmt, code, type,\n \t\t\t\t\trhs0, op1, !single_use0_p);\n \t  if (tmp)\n \t    return tmp;\n@@ -428,7 +437,7 @@ forward_propagate_into_comparison_1 (location_t loc,\n       if (def_stmt && can_propagate_from (def_stmt))\n \t{\n \t  rhs1 = rhs_to_tree (TREE_TYPE (op0), def_stmt);\n-\t  tmp = combine_cond_expr_cond (loc, code, type,\n+\t  tmp = combine_cond_expr_cond (stmt, code, type,\n \t\t\t\t\top0, rhs1, !single_use1_p);\n \t  if (tmp)\n \t    return tmp;\n@@ -438,7 +447,7 @@ forward_propagate_into_comparison_1 (location_t loc,\n   /* If that wasn't successful either, try both operands.  */\n   if (rhs0 != NULL_TREE\n       && rhs1 != NULL_TREE)\n-    tmp = combine_cond_expr_cond (loc, code, type,\n+    tmp = combine_cond_expr_cond (stmt, code, type,\n \t\t\t\t  rhs0, rhs1,\n \t\t\t\t  !(single_use0_p && single_use1_p));\n \n@@ -460,7 +469,7 @@ forward_propagate_into_comparison (gimple_stmt_iterator *gsi)\n   tree rhs2 = gimple_assign_rhs2 (stmt);\n \n   /* Combine the comparison with defining statements.  */\n-  tmp = forward_propagate_into_comparison_1 (gimple_location (stmt),\n+  tmp = forward_propagate_into_comparison_1 (stmt,\n \t\t\t\t\t     gimple_assign_rhs_code (stmt),\n \t\t\t\t\t     TREE_TYPE\n \t\t\t\t\t       (gimple_assign_lhs (stmt)),\n@@ -491,7 +500,6 @@ forward_propagate_into_comparison (gimple_stmt_iterator *gsi)\n static int\n forward_propagate_into_gimple_cond (gimple stmt)\n {\n-  location_t loc = gimple_location (stmt);\n   tree tmp;\n   enum tree_code code = gimple_cond_code (stmt);\n   bool cfg_changed = false;\n@@ -502,7 +510,7 @@ forward_propagate_into_gimple_cond (gimple stmt)\n   if (TREE_CODE_CLASS (gimple_cond_code (stmt)) != tcc_comparison)\n     return 0;\n \n-  tmp = forward_propagate_into_comparison_1 (loc, code,\n+  tmp = forward_propagate_into_comparison_1 (stmt, code,\n \t\t\t\t\t     boolean_type_node,\n \t\t\t\t\t     rhs1, rhs2);\n   if (tmp)\n@@ -541,13 +549,12 @@ static int\n forward_propagate_into_cond (gimple_stmt_iterator *gsi_p)\n {\n   gimple stmt = gsi_stmt (*gsi_p);\n-  location_t loc = gimple_location (stmt);\n   tree tmp = NULL_TREE;\n   tree cond = gimple_assign_rhs1 (stmt);\n \n   /* We can do tree combining on SSA_NAME and comparison expressions.  */\n   if (COMPARISON_CLASS_P (cond))\n-    tmp = forward_propagate_into_comparison_1 (loc, TREE_CODE (cond),\n+    tmp = forward_propagate_into_comparison_1 (stmt, TREE_CODE (cond),\n \t\t\t\t\t       boolean_type_node,\n \t\t\t\t\t       TREE_OPERAND (cond, 0),\n \t\t\t\t\t       TREE_OPERAND (cond, 1));\n@@ -559,7 +566,7 @@ forward_propagate_into_cond (gimple_stmt_iterator *gsi_p)\n \treturn 0;\n \n       rhs0 = gimple_assign_rhs1 (def_stmt);\n-      tmp = combine_cond_expr_cond (loc, NE_EXPR, boolean_type_node, rhs0,\n+      tmp = combine_cond_expr_cond (stmt, NE_EXPR, boolean_type_node, rhs0,\n \t\t\t\t    build_int_cst (TREE_TYPE (rhs0), 0),\n \t\t\t\t    false);\n     }\n@@ -2440,27 +2447,18 @@ ssa_forward_propagate_and_combine (void)\n \t\t  {\n \t\t    /* In this case the entire COND_EXPR is in rhs1. */\n \t\t    int did_something;\n-\t\t    fold_defer_overflow_warnings ();\n \t\t    did_something = forward_propagate_into_cond (&gsi);\n \t\t    stmt = gsi_stmt (gsi);\n \t\t    if (did_something == 2)\n \t\t      cfg_changed = true;\n-\t\t    fold_undefer_overflow_warnings\n-\t\t      (!TREE_NO_WARNING (rhs1) && did_something, stmt,\n-\t\t       WARN_STRICT_OVERFLOW_CONDITIONAL);\n \t\t    changed = did_something != 0;\n \t\t  }\n \t\telse if (TREE_CODE_CLASS (code) == tcc_comparison)\n \t\t  {\n-\t\t    bool no_warning = gimple_no_warning_p (stmt);\n \t\t    int did_something;\n-\t\t    fold_defer_overflow_warnings ();\n \t\t    did_something = forward_propagate_into_comparison (&gsi);\n \t\t    if (did_something == 2)\n \t\t      cfg_changed = true;\n-\t\t    fold_undefer_overflow_warnings\n-\t\t\t(!no_warning && changed,\n-\t\t\t stmt, WARN_STRICT_OVERFLOW_CONDITIONAL);\n \t\t    changed = did_something != 0;\n \t\t  }\n \t\telse if (code == BIT_AND_EXPR\n@@ -2489,12 +2487,9 @@ ssa_forward_propagate_and_combine (void)\n \t    case GIMPLE_COND:\n \t      {\n \t\tint did_something;\n-\t\tfold_defer_overflow_warnings ();\n \t\tdid_something = forward_propagate_into_gimple_cond (stmt);\n \t\tif (did_something == 2)\n \t\t  cfg_changed = true;\n-\t\tfold_undefer_overflow_warnings\n-\t\t  (did_something, stmt, WARN_STRICT_OVERFLOW_CONDITIONAL);\n \t\tchanged = did_something != 0;\n \t\tbreak;\n \t      }"}]}