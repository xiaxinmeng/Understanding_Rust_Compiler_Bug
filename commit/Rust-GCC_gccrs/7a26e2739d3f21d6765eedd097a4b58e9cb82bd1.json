{"sha": "7a26e2739d3f21d6765eedd097a4b58e9cb82bd1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EyNmUyNzM5ZDNmMjFkNjc2NWVlZGQwOTdhNGI1OGU5Y2I4MmJkMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-03-13T09:19:25Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-03-13T09:19:25Z"}, "message": "re PR sanitizer/80953 (Support libsanitizer on Solaris)\n\n\tPR sanitizer/80953\n\tMerge from LLVM revision 355980\n\t* asan/asan_allocator.h (kAllocatorSpace): Define for SPARC.\n\t(kAllocatorSize): Likewise.\n\t(DefaultSizeClassMap): Likewise.\n\t* asan/asan_mapping.h (kSPARC64_ShadowOffset64): Define.\n\t(SHADOW_OFFSET): Define for SPARC.\n\tInclude asan_mapping_sparc64.h for SPARC 64-bit.\n\t* asan/asan_mapping_sparc64.h: New file.\n\nFrom-SVN: r269641", "tree": {"sha": "624bc407835407724ec91faf81fe762bd11730e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/624bc407835407724ec91faf81fe762bd11730e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a26e2739d3f21d6765eedd097a4b58e9cb82bd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a26e2739d3f21d6765eedd097a4b58e9cb82bd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a26e2739d3f21d6765eedd097a4b58e9cb82bd1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a26e2739d3f21d6765eedd097a4b58e9cb82bd1/comments", "author": null, "committer": null, "parents": [{"sha": "a196c82cf236299e00704f3fc23eba798bdc6e37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a196c82cf236299e00704f3fc23eba798bdc6e37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a196c82cf236299e00704f3fc23eba798bdc6e37"}], "stats": {"total": 130, "additions": 129, "deletions": 1}, "files": [{"sha": "8b599bb754ce71f871912f69795b3302ead3d885", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a26e2739d3f21d6765eedd097a4b58e9cb82bd1/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a26e2739d3f21d6765eedd097a4b58e9cb82bd1/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=7a26e2739d3f21d6765eedd097a4b58e9cb82bd1", "patch": "@@ -1,3 +1,15 @@\n+2019-03-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR sanitizer/80953\n+\tMerge from LLVM revision 355980\n+\t* asan/asan_allocator.h (kAllocatorSpace): Define for SPARC.\n+\t(kAllocatorSize): Likewise.\n+\t(DefaultSizeClassMap): Likewise.\n+\t* asan/asan_mapping.h (kSPARC64_ShadowOffset64): Define.\n+\t(SHADOW_OFFSET): Define for SPARC.\n+\tInclude asan_mapping_sparc64.h for SPARC 64-bit.\n+\t* asan/asan_mapping_sparc64.h: New file.\n+\n 2019-03-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR sanitizer/80953"}, {"sha": "1f58bb168597d39c5ce083187ce41ca0e9d90102", "filename": "libsanitizer/asan/asan_allocator.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a26e2739d3f21d6765eedd097a4b58e9cb82bd1/libsanitizer%2Fasan%2Fasan_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a26e2739d3f21d6765eedd097a4b58e9cb82bd1/libsanitizer%2Fasan%2Fasan_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_allocator.h?ref=7a26e2739d3f21d6765eedd097a4b58e9cb82bd1", "patch": "@@ -132,11 +132,15 @@ const uptr kAllocatorSpace =  ~(uptr)0;\n const uptr kAllocatorSize  =  0x2000000000ULL;  // 128G.\n typedef VeryCompactSizeClassMap SizeClassMap;\n # elif defined(__aarch64__)\n-// AArch64/SANITIZER_CAN_USER_ALLOCATOR64 is only for 42-bit VMA\n+// AArch64/SANITIZER_CAN_USE_ALLOCATOR64 is only for 42-bit VMA\n // so no need to different values for different VMA.\n const uptr kAllocatorSpace =  0x10000000000ULL;\n const uptr kAllocatorSize  =  0x10000000000ULL;  // 3T.\n typedef DefaultSizeClassMap SizeClassMap;\n+# elif defined(__sparc__)\n+const uptr kAllocatorSpace = ~(uptr)0;\n+const uptr kAllocatorSize  =  0x20000000000ULL;  // 2T.\n+typedef DefaultSizeClassMap SizeClassMap;\n # elif SANITIZER_WINDOWS\n const uptr kAllocatorSpace = ~(uptr)0;\n const uptr kAllocatorSize  =  0x8000000000ULL;  // 500G"}, {"sha": "2357c50e67fec1bb3f2b48ec8c8e08a9afadbf69", "filename": "libsanitizer/asan/asan_mapping.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a26e2739d3f21d6765eedd097a4b58e9cb82bd1/libsanitizer%2Fasan%2Fasan_mapping.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a26e2739d3f21d6765eedd097a4b58e9cb82bd1/libsanitizer%2Fasan%2Fasan_mapping.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_mapping.h?ref=7a26e2739d3f21d6765eedd097a4b58e9cb82bd1", "patch": "@@ -99,6 +99,13 @@\n // || `[0x10000000000000, 0x11ffffffffffff]` || LowShadow  ||\n // || `[0x00000000000000, 0x0fffffffffffff]` || LowMem     ||\n //\n+// Default Linux/SPARC64 (52-bit VMA) mapping:\n+// || `[0x8000000000000, 0xfffffffffffff]` || HighMem    ||\n+// || `[0x1080000000000, 0x207ffffffffff]` || HighShadow ||\n+// || `[0x0090000000000, 0x107ffffffffff]` || ShadowGap  ||\n+// || `[0x0080000000000, 0x008ffffffffff]` || LowShadow  ||\n+// || `[0x0000000000000, 0x007ffffffffff]` || LowMem     ||\n+//\n // Shadow mapping on FreeBSD/x86-64 with SHADOW_OFFSET == 0x400000000000:\n // || `[0x500000000000, 0x7fffffffffff]` || HighMem    ||\n // || `[0x4a0000000000, 0x4fffffffffff]` || HighShadow ||\n@@ -161,6 +168,7 @@ static const u64 kMIPS32_ShadowOffset32 = 0x0aaa0000;\n static const u64 kMIPS64_ShadowOffset64 = 1ULL << 37;\n static const u64 kPPC64_ShadowOffset64 = 1ULL << 41;\n static const u64 kSystemZ_ShadowOffset64 = 1ULL << 52;\n+static const u64 kSPARC64_ShadowOffset64 = 1ULL << 43;  // 0x80000000000\n static const u64 kFreeBSD_ShadowOffset32 = 1ULL << 30;  // 0x40000000\n static const u64 kFreeBSD_ShadowOffset64 = 1ULL << 46;  // 0x400000000000\n static const u64 kNetBSD_ShadowOffset32 = 1ULL << 30;  // 0x40000000\n@@ -223,6 +231,8 @@ static const u64 kMyriadCacheBitMask32 = 0x40000000ULL;\n #   define SHADOW_OFFSET kDefaultShadowOffset64\n #  elif defined(__mips64)\n #   define SHADOW_OFFSET kMIPS64_ShadowOffset64\n+#  elif defined(__sparc__)\n+#   define SHADOW_OFFSET kSPARC64_ShadowOffset64\n #  elif SANITIZER_WINDOWS64\n #   define SHADOW_OFFSET __asan_shadow_memory_dynamic_address\n #  else\n@@ -269,6 +279,8 @@ extern uptr kHighMemEnd, kMidMemBeg, kMidMemEnd;  // Initialized in __asan_init.\n \n #if SANITIZER_MYRIAD2\n #include \"asan_mapping_myriad.h\"\n+#elif defined(__sparc__) && SANITIZER_WORDSIZE == 64\n+#include \"asan_mapping_sparc64.h\"\n #else\n #define MEM_TO_SHADOW(mem) (((mem) >> SHADOW_SCALE) + (SHADOW_OFFSET))\n "}, {"sha": "ecde5cac9e1bb1dc64396a4ce4ac3e92991c5ad7", "filename": "libsanitizer/asan/asan_mapping_sparc64.h", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a26e2739d3f21d6765eedd097a4b58e9cb82bd1/libsanitizer%2Fasan%2Fasan_mapping_sparc64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a26e2739d3f21d6765eedd097a4b58e9cb82bd1/libsanitizer%2Fasan%2Fasan_mapping_sparc64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_mapping_sparc64.h?ref=7a26e2739d3f21d6765eedd097a4b58e9cb82bd1", "patch": "@@ -0,0 +1,100 @@\n+//===-- asan_mapping_sparc64.h ----------------------------------*- C++ -*-===//\n+//\n+// This file is distributed under the University of Illinois Open Source\n+// License. See LICENSE.TXT for details\n+//\n+//===----------------------------------------------------------------------===//\n+//\n+// This file is a part of AddressSanitizer, an address sanity checker.\n+//\n+// SPARC64-specific definitions for ASan memory mapping.\n+//===----------------------------------------------------------------------===//\n+#ifndef ASAN_MAPPING_SPARC64_H\n+#define ASAN_MAPPING_SPARC64_H\n+\n+// This is tailored to the 52-bit VM layout on SPARC-T4 and later.\n+// The VM space is split into two 51-bit halves at both ends: the low part\n+// has all the bits above the 51st cleared, while the high part has them set.\n+//   0xfff8000000000000 - 0xffffffffffffffff\n+//   0x0000000000000000 - 0x0007ffffffffffff\n+\n+#define VMA_BITS 52\n+#define HIGH_BITS (64 - VMA_BITS)\n+\n+// The idea is to chop the high bits before doing the scaling, so the two\n+// parts become contiguous again and the usual scheme can be applied.\n+\n+#define MEM_TO_SHADOW(mem) \\\n+  ((((mem) << HIGH_BITS) >> (HIGH_BITS + (SHADOW_SCALE))) + (SHADOW_OFFSET))\n+\n+#define kLowMemBeg 0\n+#define kLowMemEnd (SHADOW_OFFSET - 1)\n+\n+#define kLowShadowBeg SHADOW_OFFSET\n+#define kLowShadowEnd MEM_TO_SHADOW(kLowMemEnd)\n+\n+// But of course there is the huge hole between the high shadow memory,\n+// which is in the low part, and the beginning of the high part.\n+\n+#define kHighMemBeg (-(1ULL << (VMA_BITS - 1)))\n+\n+#define kHighShadowBeg MEM_TO_SHADOW(kHighMemBeg)\n+#define kHighShadowEnd MEM_TO_SHADOW(kHighMemEnd)\n+\n+#define kMidShadowBeg 0\n+#define kMidShadowEnd 0\n+\n+// With the zero shadow base we can not actually map pages starting from 0.\n+// This constant is somewhat arbitrary.\n+#define kZeroBaseShadowStart 0\n+#define kZeroBaseMaxShadowStart (1 << 18)\n+\n+#define kShadowGapBeg (kLowShadowEnd + 1)\n+#define kShadowGapEnd (kHighShadowBeg - 1)\n+\n+#define kShadowGap2Beg 0\n+#define kShadowGap2End 0\n+\n+#define kShadowGap3Beg 0\n+#define kShadowGap3End 0\n+\n+namespace __asan {\n+\n+static inline bool AddrIsInLowMem(uptr a) {\n+  PROFILE_ASAN_MAPPING();\n+  return a <= kLowMemEnd;\n+}\n+\n+static inline bool AddrIsInLowShadow(uptr a) {\n+  PROFILE_ASAN_MAPPING();\n+  return a >= kLowShadowBeg && a <= kLowShadowEnd;\n+}\n+\n+static inline bool AddrIsInMidMem(uptr a) {\n+  PROFILE_ASAN_MAPPING();\n+  return false;\n+}\n+\n+static inline bool AddrIsInMidShadow(uptr a) {\n+  PROFILE_ASAN_MAPPING();\n+  return false;\n+}\n+\n+static inline bool AddrIsInHighMem(uptr a) {\n+  PROFILE_ASAN_MAPPING();\n+  return kHighMemBeg && a >= kHighMemBeg && a <= kHighMemEnd;\n+}\n+\n+static inline bool AddrIsInHighShadow(uptr a) {\n+  PROFILE_ASAN_MAPPING();\n+  return kHighMemBeg && a >= kHighShadowBeg && a <= kHighShadowEnd;\n+}\n+\n+static inline bool AddrIsInShadowGap(uptr a) {\n+  PROFILE_ASAN_MAPPING();\n+  return a >= kShadowGapBeg && a <= kShadowGapEnd;\n+}\n+\n+}  // namespace __asan\n+\n+#endif  // ASAN_MAPPING_SPARC64_H"}]}