{"sha": "fb5f0c207eb0b04eb7a62a68641b0cca6d98d1a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI1ZjBjMjA3ZWIwYjA0ZWI3YTYyYTY4NjQxYjBjY2E2ZDk4ZDFhOQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2018-07-13T18:43:00Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2018-07-13T18:43:00Z"}, "message": "emmintrin.h (_mm_and_si128): New function.\n\n[gcc]\n\n2018-07-13  Bill Schmidt  <wschmidt@linux.ibm.com>\n\t    Steve Munroe  <munroesj52@gmail.com>\n\n\t* config/rs6000/emmintrin.h (_mm_and_si128): New function.\n\t(_mm_andnot_si128): Likewise.\n\t(_mm_or_si128): Likewise.\n\t(_mm_xor_si128): Likewise.\n\n[gcc/testsuite]\n\n2018-07-13  Bill Schmidt  <wschmidt@linux.ibm.com>\n\t    Steve Munroe  <munroesj52@gmail.com>\n\n\t* gcc.target/powerpc/sse2-pand-1.c: New file.\n\t* gcc.target/powerpc/sse2-pandn-1.c: Likewise.\n\t* gcc.target/powerpc/sse2-por-1.c: Likewise.\n\t* gcc.target/powerpc/sse2-pxor-1.c: Likewise.\n\n\nCo-Authored-By: Steve Munroe <munroesj52@gmail.com>\n\nFrom-SVN: r262642", "tree": {"sha": "0f1efef4cd291eee026b921b17f1c072e6faf8ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f1efef4cd291eee026b921b17f1c072e6faf8ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb5f0c207eb0b04eb7a62a68641b0cca6d98d1a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb5f0c207eb0b04eb7a62a68641b0cca6d98d1a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb5f0c207eb0b04eb7a62a68641b0cca6d98d1a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb5f0c207eb0b04eb7a62a68641b0cca6d98d1a9/comments", "author": null, "committer": null, "parents": [{"sha": "113950b77af34087b3496d5c994cbcc8005d910e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113950b77af34087b3496d5c994cbcc8005d910e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/113950b77af34087b3496d5c994cbcc8005d910e"}], "stats": {"total": 207, "additions": 207, "deletions": 0}, "files": [{"sha": "70cf49636f17fe1129bb9fe2f3fec5312ed9b914", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5f0c207eb0b04eb7a62a68641b0cca6d98d1a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5f0c207eb0b04eb7a62a68641b0cca6d98d1a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb5f0c207eb0b04eb7a62a68641b0cca6d98d1a9", "patch": "@@ -1,3 +1,11 @@\n+2018-07-13  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\t    Steve Munroe  <munroesj52@gmail.com>\n+\n+\t* config/rs6000/emmintrin.h (_mm_and_si128): New function.\n+\t(_mm_andnot_si128): Likewise.\n+\t(_mm_or_si128): Likewise.\n+\t(_mm_xor_si128): Likewise.\n+\n 2018-07-13  Qing Zhao  <qing.zhao@oracle.com>\n \n \tPR middle-end/78809"}, {"sha": "412ece7355b83fe1d7cfb04b5ae6c5aaead54ef4", "filename": "gcc/config/rs6000/emmintrin.h", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5f0c207eb0b04eb7a62a68641b0cca6d98d1a9/gcc%2Fconfig%2Frs6000%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5f0c207eb0b04eb7a62a68641b0cca6d98d1a9/gcc%2Fconfig%2Frs6000%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Femmintrin.h?ref=fb5f0c207eb0b04eb7a62a68641b0cca6d98d1a9", "patch": "@@ -1883,6 +1883,30 @@ _mm_xor_pd (__m128d __A, __m128d __B)\n   return (vec_xor ((__v2df) __A, (__v2df) __B));\n }\n \n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_and_si128 (__m128i __A, __m128i __B)\n+{\n+  return (__m128i)vec_and ((__v2di) __A, (__v2di) __B);\n+}\n+\n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_andnot_si128 (__m128i __A, __m128i __B)\n+{\n+  return (__m128i)vec_andc ((__v2di) __B, (__v2di) __A);\n+}\n+\n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_or_si128 (__m128i __A, __m128i __B)\n+{\n+  return (__m128i)vec_or ((__v2di) __A, (__v2di) __B);\n+}\n+\n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_xor_si128 (__m128i __A, __m128i __B)\n+{\n+  return (__m128i)vec_xor ((__v2di) __A, (__v2di) __B);\n+}\n+\n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmpeq_epi8 (__m128i __A, __m128i __B)\n {\n@@ -2333,3 +2357,4 @@ _mm_castsi128_pd(__m128i __A)\n }\n \n #endif /* EMMINTRIN_H_ */\n+"}, {"sha": "3bedd12bb1568367b55850a780553cb33005cb44", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5f0c207eb0b04eb7a62a68641b0cca6d98d1a9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5f0c207eb0b04eb7a62a68641b0cca6d98d1a9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fb5f0c207eb0b04eb7a62a68641b0cca6d98d1a9", "patch": "@@ -1,3 +1,11 @@\n+2018-07-13  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\t    Steve Munroe  <munroesj52@gmail.com>\n+\n+\t* gcc.target/powerpc/sse2-pand-1.c: New file.\n+\t* gcc.target/powerpc/sse2-pandn-1.c: Likewise.\n+\t* gcc.target/powerpc/sse2-por-1.c: Likewise.\n+\t* gcc.target/powerpc/sse2-pxor-1.c: Likewise.\n+\n 2018-07-13  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/86374"}, {"sha": "8c5904b5cf1f806b12d058ee32dd775168185cce", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pand-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5f0c207eb0b04eb7a62a68641b0cca6d98d1a9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pand-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5f0c207eb0b04eb7a62a68641b0cca6d98d1a9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pand-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pand-1.c?ref=fb5f0c207eb0b04eb7a62a68641b0cca6d98d1a9", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_pand_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  return _mm_and_si128 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_b u, s1, s2;\n+  char e[16];\n+  int i;\n+   \n+  s1.x = _mm_set_epi8 (1,2,3,4,10,20,30,90,-80,-40,-100,-15,98, 25, 98,7);\n+  s2.x = _mm_set_epi8 (88, 44, 33, 22, 11, 98, 76, -100, -34, -78, -39, 6, 3, 4, 5, 119);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 16; i++)\n+     e[i] = s1.a[i] & s2.a[i];\n+\n+  if (check_union128i_b (u, e))\n+    abort ();\n+}"}, {"sha": "5d0d1b7b66ad08b15dfc6ea60cbd5eabed4626b2", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pandn-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5f0c207eb0b04eb7a62a68641b0cca6d98d1a9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pandn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5f0c207eb0b04eb7a62a68641b0cca6d98d1a9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pandn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pandn-1.c?ref=fb5f0c207eb0b04eb7a62a68641b0cca6d98d1a9", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_pandn_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  return _mm_andnot_si128 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_b u, s1, s2;\n+  char e[16];\n+  int i;\n+   \n+  s1.x = _mm_set_epi8 (1,2,3,4,10,20,30,90,-80,-40,-100,-15,98, 25, 98,7);\n+  s2.x = _mm_set_epi8 (88, 44, 33, 22, 11, 98, 76, -100, -34, -78, -39, 6, 3, 4, 5, 119);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 16; i++)\n+     e[i] = (~s1.a[i]) & s2.a[i];\n+\n+  if (check_union128i_b (u, e))\n+    abort ();\n+}"}, {"sha": "bdd48ad6f8cd85d7175f73d3483464986aa33379", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-por-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5f0c207eb0b04eb7a62a68641b0cca6d98d1a9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-por-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5f0c207eb0b04eb7a62a68641b0cca6d98d1a9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-por-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-por-1.c?ref=fb5f0c207eb0b04eb7a62a68641b0cca6d98d1a9", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_por_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  return _mm_or_si128 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_w u, s1, s2;\n+  short e[8];\n+  int i;\n+   \n+  s1.x = _mm_set_epi16 (10,20,30,90,-80,-40,-100,-15);\n+  s2.x = _mm_set_epi16 (11, 98, 76, -100, -34, -78, -39, 14);\n+  u.x = test (s1.x, s2.x); \n+   \n+  for (i = 0; i < 8; i++)\n+    {\n+      e[i] = s1.a[i] | s2.a[i];\n+    }\n+\n+  if (check_union128i_w (u, e))\n+    abort ();\n+}"}, {"sha": "cf430ee2d6f7b46c0fd8e62158638da782c59abd", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pxor-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5f0c207eb0b04eb7a62a68641b0cca6d98d1a9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pxor-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5f0c207eb0b04eb7a62a68641b0cca6d98d1a9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pxor-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pxor-1.c?ref=fb5f0c207eb0b04eb7a62a68641b0cca6d98d1a9", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse2_test_pxor_1\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static __m128i\n+__attribute__((noinline, unused))\n+test (__m128i s1, __m128i s2)\n+{\n+  return _mm_xor_si128 (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128i_ub u, s1, s2;\n+  unsigned char e[16] = {0};\n+  int i; \n+   \n+  s1.x = _mm_set_epi8 (1,2,3,4,10,20,30,90,80,40,100,15,98, 25, 98,7);\n+  s2.x = _mm_set_epi8 (88, 44, 33, 22, 11, 98, 76, 100, 34, 78, 39, 6, 3, 4, 5, 119);\n+  u.x = test (s1.x, s2.x); \n+ \n+  for (i = 0; i < 16; i++)\n+    e[i] = s1.a[i] ^ s2.a[i];\n+\n+  if (check_union128i_ub (u, e))\n+    abort ();\n+}"}]}