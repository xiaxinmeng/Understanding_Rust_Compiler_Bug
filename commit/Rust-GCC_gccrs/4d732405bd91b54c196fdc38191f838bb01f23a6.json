{"sha": "4d732405bd91b54c196fdc38191f838bb01f23a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ3MzI0MDViZDkxYjU0YzE5NmZkYzM4MTkxZjgzOGJiMDFmMjNhNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-13T21:35:20Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-13T21:35:20Z"}, "message": "Use checking forms of DECL_FUNCTION_CODE (PR 91421)\n\nWe were shoe-horning all built-in enumerations (including frontend\nand target-specific ones) into a field of type built_in_function.  This\nwas accessed as either an lvalue or an rvalue using DECL_FUNCTION_CODE.\n\nThe obvious danger with this (as was noted by several ??? comments)\nis that the ranges have nothing to do with each other, and targets can\neasily have more built-in functions than generic code.  But my patch to\nmake the field bigger was the straw that finally made the problem visible.\n\nThis patch therefore:\n\n- replaces the field with a plain unsigned int\n\n- turns DECL_FUNCTION_CODE into an rvalue-only accessor that checks\n  that the function really is BUILT_IN_NORMAL\n\n- adds corresponding DECL_MD_FUNCTION_CODE and DECL_FE_FUNCTION_CODE\n  accessors for BUILT_IN_MD and BUILT_IN_FRONTEND respectively\n\n- adds DECL_UNCHECKED_FUNCTION_CODE for places that need to access the\n  underlying field (should be low-level code only)\n\n- adds new helpers for setting the built-in class and function code\n\n- makes DECL_BUILT_IN_CLASS an rvalue-only accessor too, since all\n  assignments should go through the new helpers\n\n2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR middle-end/91421\n\t* tree-core.h (function_decl::function_code): Change type to\n\tunsigned int.\n\t* tree.h (DECL_FUNCTION_CODE): Rename old definition to...\n\t(DECL_UNCHECKED_FUNCTION_CODE): ...this.\n\t(DECL_BUILT_IN_CLASS): Make an rvalue macro only.\n\t(DECL_FUNCTION_CODE): New function.  Assert that the built-in class\n\tis BUILT_IN_NORMAL.\n\t(DECL_MD_FUNCTION_CODE, DECL_FE_FUNCTION_CODE): New functions.\n\t(set_decl_built_in_function, copy_decl_built_in_function): Likewise.\n\t(fndecl_built_in_p): Change the type of the \"name\" argument to\n\tunsigned int.\n\t* builtins.c (expand_builtin): Move DECL_FUNCTION_CODE use\n\tafter check for DECL_BUILT_IN_CLASS.\n\t* cgraphclones.c (build_function_decl_skip_args): Use\n\tset_decl_built_in_function.\n\t* ipa-param-manipulation.c (ipa_modify_formal_parameters): Likewise.\n\t* ipa-split.c (split_function): Likewise.\n\t* langhooks.c (add_builtin_function_common): Likewise.\n\t* omp-simd-clone.c (simd_clone_create): Likewise.\n\t* tree-streamer-in.c (unpack_ts_function_decl_value_fields): Likewise.\n\t* config/darwin.c (darwin_init_cfstring_builtins): Likewise.\n\t(darwin_fold_builtin): Use DECL_MD_FUNCTION_CODE instead of\n\tDECL_FUNCTION_CODE.\n\t* fold-const.c (operand_equal_p): Compare DECL_UNCHECKED_FUNCTION_CODE\n\tinstead of DECL_FUNCTION_CODE.\n\t* lto-streamer-out.c (hash_tree): Use DECL_UNCHECKED_FUNCTION_CODE\n\tinstead of DECL_FUNCTION_CODE.\n\t* tree-streamer-out.c (pack_ts_function_decl_value_fields): Likewise.\n\t* print-tree.c (print_node): Use DECL_MD_FUNCTION_CODE when\n\tprinting DECL_BUILT_IN_MD.  Handle DECL_BUILT_IN_FRONTEND.\n\t* config/aarch64/aarch64-builtins.c (aarch64_expand_builtin)\n\t(aarch64_fold_builtin, aarch64_gimple_fold_builtin): Use\n\tDECL_MD_FUNCTION_CODE instead of DECL_FUNCTION_CODE.\n\t* config/aarch64/aarch64.c (aarch64_builtin_reciprocal): Likewise.\n\t* config/alpha/alpha.c (alpha_expand_builtin, alpha_fold_builtin):\n\t(alpha_gimple_fold_builtin): Likewise.\n\t* config/arc/arc.c (arc_expand_builtin): Likewise.\n\t* config/arm/arm-builtins.c (arm_expand_builtin): Likewise.\n\t* config/avr/avr-c.c (avr_resolve_overloaded_builtin): Likewise.\n\t* config/avr/avr.c (avr_expand_builtin, avr_fold_builtin): Likewise.\n\t* config/bfin/bfin.c (bfin_expand_builtin): Likewise.\n\t* config/c6x/c6x.c (c6x_expand_builtin): Likewise.\n\t* config/frv/frv.c (frv_expand_builtin): Likewise.\n\t* config/gcn/gcn.c (gcn_expand_builtin_1): Likewise.\n\t(gcn_expand_builtin): Likewise.\n\t* config/i386/i386-builtins.c (ix86_builtin_reciprocal): Likewise.\n\t(fold_builtin_cpu): Likewise.\n\t* config/i386/i386-expand.c (ix86_expand_builtin): Likewise.\n\t* config/i386/i386.c (ix86_fold_builtin): Likewise.\n\t(ix86_gimple_fold_builtin): Likewise.\n\t* config/ia64/ia64.c (ia64_fold_builtin): Likewise.\n\t(ia64_expand_builtin): Likewise.\n\t* config/iq2000/iq2000.c (iq2000_expand_builtin): Likewise.\n\t* config/mips/mips.c (mips_expand_builtin): Likewise.\n\t* config/msp430/msp430.c (msp430_expand_builtin): Likewise.\n\t* config/nds32/nds32-intrinsic.c (nds32_expand_builtin_impl): Likewise.\n\t* config/nios2/nios2.c (nios2_expand_builtin): Likewise.\n\t* config/nvptx/nvptx.c (nvptx_expand_builtin): Likewise.\n\t* config/pa/pa.c (pa_expand_builtin): Likewise.\n\t* config/pru/pru.c (pru_expand_builtin): Likewise.\n\t* config/riscv/riscv-builtins.c (riscv_expand_builtin): Likewise.\n\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin):\n\tLikewise.\n\t* config/rs6000/rs6000-call.c (htm_expand_builtin): Likewise.\n\t(altivec_expand_dst_builtin, altivec_expand_builtin): Likewise.\n\t(rs6000_gimple_fold_builtin, rs6000_expand_builtin): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_builtin_md_vectorized_function)\n\t(rs6000_builtin_reciprocal): Likewise.\n\t* config/rx/rx.c (rx_expand_builtin): Likewise.\n\t* config/s390/s390-c.c (s390_resolve_overloaded_builtin): Likewise.\n\t* config/s390/s390.c (s390_expand_builtin): Likewise.\n\t* config/sh/sh.c (sh_expand_builtin): Likewise.\n\t* config/sparc/sparc.c (sparc_expand_builtin): Likewise.\n\t(sparc_fold_builtin): Likewise.\n\t* config/spu/spu-c.c (spu_resolve_overloaded_builtin): Likewise.\n\t* config/spu/spu.c (spu_expand_builtin): Likewise.\n\t* config/stormy16/stormy16.c (xstormy16_expand_builtin): Likewise.\n\t* config/tilegx/tilegx.c (tilegx_expand_builtin): Likewise.\n\t* config/tilepro/tilepro.c (tilepro_expand_builtin): Likewise.\n\t* config/xtensa/xtensa.c (xtensa_fold_builtin): Likewise.\n\t(xtensa_expand_builtin): Likewise.\n\ngcc/ada/\n\tPR middle-end/91421\n\t* gcc-interface/trans.c (gigi): Call set_decl_buillt_in_function.\n\t(Call_to_gnu): Use DECL_FE_FUNCTION_CODE instead of DECL_FUNCTION_CODE.\n\ngcc/c/\n\tPR middle-end/91421\n\t* c-decl.c (merge_decls): Use copy_decl_built_in_function.\n\ngcc/c-family/\n\tPR middle-end/91421\n\t* c-common.c (resolve_overloaded_builtin): Use\n\tcopy_decl_built_in_function.\n\ngcc/cp/\n\tPR middle-end/91421\n\t* decl.c (duplicate_decls):  Use copy_decl_built_in_function.\n\t* pt.c (declare_integer_pack): Use set_decl_built_in_function.\n\ngcc/d/\n\tPR middle-end/91421\n\t* intrinsics.cc (maybe_set_intrinsic): Use set_decl_built_in_function.\n\ngcc/jit/\n\tPR middle-end/91421\n\t* jit-playback.c (new_function): Use set_decl_built_in_function.\n\ngcc/lto/\n\tPR middle-end/91421\n\t* lto-common.c (compare_tree_sccs_1): Use DECL_UNCHECKED_FUNCTION_CODE\n\tinstead of DECL_FUNCTION_CODE.\n\t* lto-symtab.c (lto_symtab_merge_p): Likewise.\n\nFrom-SVN: r274404", "tree": {"sha": "b29b63d06b3fd1651a8d6cccc8ad3aa409d5ddd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b29b63d06b3fd1651a8d6cccc8ad3aa409d5ddd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d732405bd91b54c196fdc38191f838bb01f23a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d732405bd91b54c196fdc38191f838bb01f23a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d732405bd91b54c196fdc38191f838bb01f23a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d732405bd91b54c196fdc38191f838bb01f23a6/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cb1180d547e3b28547134a06ee020163afa59cc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb1180d547e3b28547134a06ee020163afa59cc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb1180d547e3b28547134a06ee020163afa59cc3"}], "stats": {"total": 421, "additions": 293, "deletions": 128}, "files": [{"sha": "989431d39218d06b5efa2d995f557820cded08a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -1,3 +1,88 @@\n+2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/91421\n+\t* tree-core.h (function_decl::function_code): Change type to\n+\tunsigned int.\n+\t* tree.h (DECL_FUNCTION_CODE): Rename old definition to...\n+\t(DECL_UNCHECKED_FUNCTION_CODE): ...this.\n+\t(DECL_BUILT_IN_CLASS): Make an rvalue macro only.\n+\t(DECL_FUNCTION_CODE): New function.  Assert that the built-in class\n+\tis BUILT_IN_NORMAL.\n+\t(DECL_MD_FUNCTION_CODE, DECL_FE_FUNCTION_CODE): New functions.\n+\t(set_decl_built_in_function, copy_decl_built_in_function): Likewise.\n+\t(fndecl_built_in_p): Change the type of the \"name\" argument to\n+\tunsigned int.\n+\t* builtins.c (expand_builtin): Move DECL_FUNCTION_CODE use\n+\tafter check for DECL_BUILT_IN_CLASS.\n+\t* cgraphclones.c (build_function_decl_skip_args): Use\n+\tset_decl_built_in_function.\n+\t* ipa-param-manipulation.c (ipa_modify_formal_parameters): Likewise.\n+\t* ipa-split.c (split_function): Likewise.\n+\t* langhooks.c (add_builtin_function_common): Likewise.\n+\t* omp-simd-clone.c (simd_clone_create): Likewise.\n+\t* tree-streamer-in.c (unpack_ts_function_decl_value_fields): Likewise.\n+\t* config/darwin.c (darwin_init_cfstring_builtins): Likewise.\n+\t(darwin_fold_builtin): Use DECL_MD_FUNCTION_CODE instead of\n+\tDECL_FUNCTION_CODE.\n+\t* fold-const.c (operand_equal_p): Compare DECL_UNCHECKED_FUNCTION_CODE\n+\tinstead of DECL_FUNCTION_CODE.\n+\t* lto-streamer-out.c (hash_tree): Use DECL_UNCHECKED_FUNCTION_CODE\n+\tinstead of DECL_FUNCTION_CODE.\n+\t* tree-streamer-out.c (pack_ts_function_decl_value_fields): Likewise.\n+\t* print-tree.c (print_node): Use DECL_MD_FUNCTION_CODE when\n+\tprinting DECL_BUILT_IN_MD.  Handle DECL_BUILT_IN_FRONTEND.\n+\t* config/aarch64/aarch64-builtins.c (aarch64_expand_builtin)\n+\t(aarch64_fold_builtin, aarch64_gimple_fold_builtin): Use\n+\tDECL_MD_FUNCTION_CODE instead of DECL_FUNCTION_CODE.\n+\t* config/aarch64/aarch64.c (aarch64_builtin_reciprocal): Likewise.\n+\t* config/alpha/alpha.c (alpha_expand_builtin, alpha_fold_builtin):\n+\t(alpha_gimple_fold_builtin): Likewise.\n+\t* config/arc/arc.c (arc_expand_builtin): Likewise.\n+\t* config/arm/arm-builtins.c (arm_expand_builtin): Likewise.\n+\t* config/avr/avr-c.c (avr_resolve_overloaded_builtin): Likewise.\n+\t* config/avr/avr.c (avr_expand_builtin, avr_fold_builtin): Likewise.\n+\t* config/bfin/bfin.c (bfin_expand_builtin): Likewise.\n+\t* config/c6x/c6x.c (c6x_expand_builtin): Likewise.\n+\t* config/frv/frv.c (frv_expand_builtin): Likewise.\n+\t* config/gcn/gcn.c (gcn_expand_builtin_1): Likewise.\n+\t(gcn_expand_builtin): Likewise.\n+\t* config/i386/i386-builtins.c (ix86_builtin_reciprocal): Likewise.\n+\t(fold_builtin_cpu): Likewise.\n+\t* config/i386/i386-expand.c (ix86_expand_builtin): Likewise.\n+\t* config/i386/i386.c (ix86_fold_builtin): Likewise.\n+\t(ix86_gimple_fold_builtin): Likewise.\n+\t* config/ia64/ia64.c (ia64_fold_builtin): Likewise.\n+\t(ia64_expand_builtin): Likewise.\n+\t* config/iq2000/iq2000.c (iq2000_expand_builtin): Likewise.\n+\t* config/mips/mips.c (mips_expand_builtin): Likewise.\n+\t* config/msp430/msp430.c (msp430_expand_builtin): Likewise.\n+\t* config/nds32/nds32-intrinsic.c (nds32_expand_builtin_impl): Likewise.\n+\t* config/nios2/nios2.c (nios2_expand_builtin): Likewise.\n+\t* config/nvptx/nvptx.c (nvptx_expand_builtin): Likewise.\n+\t* config/pa/pa.c (pa_expand_builtin): Likewise.\n+\t* config/pru/pru.c (pru_expand_builtin): Likewise.\n+\t* config/riscv/riscv-builtins.c (riscv_expand_builtin): Likewise.\n+\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin):\n+\tLikewise.\n+\t* config/rs6000/rs6000-call.c (htm_expand_builtin): Likewise.\n+\t(altivec_expand_dst_builtin, altivec_expand_builtin): Likewise.\n+\t(rs6000_gimple_fold_builtin, rs6000_expand_builtin): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_builtin_md_vectorized_function)\n+\t(rs6000_builtin_reciprocal): Likewise.\n+\t* config/rx/rx.c (rx_expand_builtin): Likewise.\n+\t* config/s390/s390-c.c (s390_resolve_overloaded_builtin): Likewise.\n+\t* config/s390/s390.c (s390_expand_builtin): Likewise.\n+\t* config/sh/sh.c (sh_expand_builtin): Likewise.\n+\t* config/sparc/sparc.c (sparc_expand_builtin): Likewise.\n+\t(sparc_fold_builtin): Likewise.\n+\t* config/spu/spu-c.c (spu_resolve_overloaded_builtin): Likewise.\n+\t* config/spu/spu.c (spu_expand_builtin): Likewise.\n+\t* config/stormy16/stormy16.c (xstormy16_expand_builtin): Likewise.\n+\t* config/tilegx/tilegx.c (tilegx_expand_builtin): Likewise.\n+\t* config/tilepro/tilepro.c (tilepro_expand_builtin): Likewise.\n+\t* config/xtensa/xtensa.c (xtensa_fold_builtin): Likewise.\n+\t(xtensa_expand_builtin): Likewise.\n+\n 2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR middle-end/91421"}, {"sha": "4d999a4fb84469ac97f31476f9a37a54221f1530", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -1,3 +1,9 @@\n+2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/91421\n+\t* gcc-interface/trans.c (gigi): Call set_decl_buillt_in_function.\n+\t(Call_to_gnu): Use DECL_FE_FUNCTION_CODE instead of DECL_FUNCTION_CODE.\n+\n 2019-08-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* ali.ads (Linker_Option_Record): Remove Original_Pos component."}, {"sha": "95991bde274b36191e631553d4a73ce17a02713b", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -493,8 +493,7 @@ gigi (Node_Id gnat_root,\n        build_function_type_list (integer_type_node, jmpbuf_ptr_type,\n \t\t\t\t NULL_TREE),\n        NULL_TREE, is_default, true, true, true, false, false, NULL, Empty);\n-  DECL_BUILT_IN_CLASS (setjmp_decl) = BUILT_IN_NORMAL;\n-  DECL_FUNCTION_CODE (setjmp_decl) = BUILT_IN_SETJMP;\n+  set_decl_built_in_function (setjmp_decl, BUILT_IN_NORMAL, BUILT_IN_SETJMP);\n \n   /* update_setjmp_buf updates a setjmp buffer from the current stack pointer\n      address.  */\n@@ -503,8 +502,8 @@ gigi (Node_Id gnat_root,\n       (get_identifier (\"__builtin_update_setjmp_buf\"), NULL_TREE,\n        build_function_type_list (void_type_node, jmpbuf_ptr_type, NULL_TREE),\n        NULL_TREE, is_default, true, true, true, false, false, NULL, Empty);\n-  DECL_BUILT_IN_CLASS (update_setjmp_buf_decl) = BUILT_IN_NORMAL;\n-  DECL_FUNCTION_CODE (update_setjmp_buf_decl) = BUILT_IN_UPDATE_SETJMP_BUF;\n+  set_decl_built_in_function (update_setjmp_buf_decl, BUILT_IN_NORMAL,\n+\t\t\t      BUILT_IN_UPDATE_SETJMP_BUF);\n \n   /* Indicate that it never returns.  */\n   ftype = build_function_type_list (void_type_node,\n@@ -5535,7 +5534,7 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n       tree pred_cst = build_int_cst (integer_type_node, PRED_BUILTIN_EXPECT);\n       enum internal_fn icode = IFN_BUILTIN_EXPECT;\n \n-      switch (DECL_FUNCTION_CODE (gnu_subprog))\n+      switch (DECL_FE_FUNCTION_CODE (gnu_subprog))\n \t{\n \tcase BUILT_IN_EXPECT:\n \t  break;"}, {"sha": "cb1a45ae8154d51619d08cda1ad3f7b289e84fcd", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -7236,7 +7236,6 @@ expand_builtin (tree exp, rtx target, rtx subtarget, machine_mode mode,\n \t\tint ignore)\n {\n   tree fndecl = get_callee_fndecl (exp);\n-  enum built_in_function fcode = DECL_FUNCTION_CODE (fndecl);\n   machine_mode target_mode = TYPE_MODE (TREE_TYPE (exp));\n   int flags;\n \n@@ -7248,6 +7247,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, machine_mode mode,\n      redundant checks and be sure, that possible overflow will be detected\n      by ASan.  */\n \n+  enum built_in_function fcode = DECL_FUNCTION_CODE (fndecl);\n   if ((flag_sanitize & SANITIZE_ADDRESS) && asan_intercepted_p (fcode))\n     return expand_call (exp, target, ignore);\n "}, {"sha": "c3bd56cf4c6203d63fe6798d43d92842101ed183", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -1,3 +1,9 @@\n+2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/91421\n+\t* c-common.c (resolve_overloaded_builtin): Use\n+\tcopy_decl_built_in_function.\n+\n 2019-08-13  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/80619"}, {"sha": "610cb905814fbcb34dbc0708ae5f7b187b0efca6", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -7332,8 +7332,6 @@ tree\n resolve_overloaded_builtin (location_t loc, tree function,\n \t\t\t    vec<tree, va_gc> *params)\n {\n-  enum built_in_function orig_code = DECL_FUNCTION_CODE (function);\n-\n   /* Is function one of the _FETCH_OP_ or _OP_FETCH_ built-ins?\n      Those are not valid to call with a pointer to _Bool (or C++ bool)\n      and so must be rejected.  */\n@@ -7355,6 +7353,7 @@ resolve_overloaded_builtin (location_t loc, tree function,\n     }\n \n   /* Handle BUILT_IN_NORMAL here.  */\n+  enum built_in_function orig_code = DECL_FUNCTION_CODE (function);\n   switch (orig_code)\n     {\n     case BUILT_IN_SPECULATION_SAFE_VALUE_N:"}, {"sha": "4d2897e54edb231b1c6ef2e3bc1be590ddca611d", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -1,3 +1,8 @@\n+2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/91421\n+\t* c-decl.c (merge_decls): Use copy_decl_built_in_function.\n+\n 2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR middle-end/91421"}, {"sha": "31116b21308dbae4f7cf9be12875f6f470cb3964", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -2736,8 +2736,7 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n \t{\n \t  /* If redeclaring a builtin function, it stays built in.\n \t     But it gets tagged as having been declared.  */\n-\t  DECL_BUILT_IN_CLASS (newdecl) = DECL_BUILT_IN_CLASS (olddecl);\n-\t  DECL_FUNCTION_CODE (newdecl) = DECL_FUNCTION_CODE (olddecl);\n+\t  copy_decl_built_in_function (newdecl, olddecl);\n \t  C_DECL_DECLARED_BUILTIN (newdecl) = 1;\n \t  if (new_is_prototype)\n \t    {"}, {"sha": "fa753697c787d7868369a9ec97c6a1fb59191aba", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -225,10 +225,7 @@ build_function_decl_skip_args (tree orig_decl, bitmap args_to_skip,\n   if (fndecl_built_in_p (new_decl)\n       && args_to_skip\n       && !bitmap_empty_p (args_to_skip))\n-    {\n-      DECL_BUILT_IN_CLASS (new_decl) = NOT_BUILT_IN;\n-      DECL_FUNCTION_CODE (new_decl) = (enum built_in_function) 0;\n-    }\n+    set_decl_built_in_function (new_decl, NOT_BUILT_IN, 0);\n   /* The FE might have information and assumptions about the other\n      arguments.  */\n   DECL_LANG_SPECIFIC (new_decl) = NULL;"}, {"sha": "2fc5cf7d450fc3257f9eb33088fbb99ce885f428", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -1595,7 +1595,7 @@ aarch64_expand_builtin (tree exp,\n \t\t     int ignore ATTRIBUTE_UNUSED)\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  int fcode = DECL_FUNCTION_CODE (fndecl);\n+  int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n   int icode;\n   rtx pat, op0;\n   tree arg0;\n@@ -1881,7 +1881,7 @@ tree\n aarch64_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED, tree *args,\n \t\t      bool ignore ATTRIBUTE_UNUSED)\n {\n-  int fcode = DECL_FUNCTION_CODE (fndecl);\n+  int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n   tree type = TREE_TYPE (TREE_TYPE (fndecl));\n \n   switch (fcode)\n@@ -1913,7 +1913,7 @@ aarch64_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n       fndecl = gimple_call_fndecl (stmt);\n       if (fndecl)\n \t{\n-\t  int fcode = DECL_FUNCTION_CODE (fndecl);\n+\t  int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n \t  unsigned nargs = gimple_call_num_args (stmt);\n \t  tree *args = (nargs > 0\n \t\t\t? gimple_call_arg_ptr (stmt, 0)"}, {"sha": "46c058c98579e7bf55ff4ffa3d7f330598f795e9", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -11180,7 +11180,7 @@ aarch64_builtin_reciprocal (tree fndecl)\n \n   if (!use_rsqrt_p (mode))\n     return NULL_TREE;\n-  return aarch64_builtin_rsqrt (DECL_FUNCTION_CODE (fndecl));\n+  return aarch64_builtin_rsqrt (DECL_MD_FUNCTION_CODE (fndecl));\n }\n \n /* Emit instruction sequence to compute either the approximate square root"}, {"sha": "d551af74e1ee5dc7ca0103571afc89823814f14e", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -6657,7 +6657,7 @@ alpha_expand_builtin (tree exp, rtx target,\n #define MAX_ARGS 2\n \n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  unsigned int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n   tree arg;\n   call_expr_arg_iterator iter;\n   enum insn_code icode;\n@@ -7056,7 +7056,7 @@ alpha_fold_builtin (tree fndecl, int n_args, tree *op,\n \t}\n     }\n \n-  switch (DECL_FUNCTION_CODE (fndecl))\n+  switch (DECL_MD_FUNCTION_CODE (fndecl))\n     {\n     case ALPHA_BUILTIN_CMPBGE:\n       return alpha_fold_builtin_cmpbge (opint, op_const);\n@@ -7172,7 +7172,7 @@ alpha_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n \t{\n \t  tree arg0, arg1;\n \n-\t  switch (DECL_FUNCTION_CODE (fndecl))\n+\t  switch (DECL_MD_FUNCTION_CODE (fndecl))\n \t    {\n \t    case ALPHA_BUILTIN_UMULH:\n \t      arg0 = gimple_call_arg (stmt, 0);"}, {"sha": "98fbfea7efb18ae32f6b3da45578cfaab371193f", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -6996,7 +6996,7 @@ arc_expand_builtin (tree exp,\n \t\t    int ignore ATTRIBUTE_UNUSED)\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  unsigned int id = DECL_FUNCTION_CODE (fndecl);\n+  unsigned int id = DECL_MD_FUNCTION_CODE (fndecl);\n   const struct arc_builtin_description *d = &arc_bdesc[id];\n   int i, j, n_args = call_expr_nargs (exp);\n   rtx pat = NULL_RTX;"}, {"sha": "c5cdb7b5d339748bbf5d1f26a9de676b702b5c1b", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -2555,7 +2555,7 @@ arm_expand_builtin (tree exp,\n   rtx               op1;\n   rtx               op2;\n   rtx               pat;\n-  unsigned int      fcode = DECL_FUNCTION_CODE (fndecl);\n+  unsigned int      fcode = DECL_MD_FUNCTION_CODE (fndecl);\n   size_t            i;\n   machine_mode tmode;\n   machine_mode mode0;"}, {"sha": "e0ba5bd47af187b03f0a16ec45642071624a227e", "filename": "gcc/config/avr/avr-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Favr%2Favr-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Favr%2Favr-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-c.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -54,7 +54,7 @@ avr_resolve_overloaded_builtin (unsigned int iloc, tree fndecl, void *vargs)\n   location_t loc = (location_t) iloc;\n   vec<tree, va_gc> &args = * (vec<tree, va_gc>*) vargs;\n \n-  switch (DECL_FUNCTION_CODE (fndecl))\n+  switch (DECL_MD_FUNCTION_CODE (fndecl))\n     {\n     default:\n       break;"}, {"sha": "ba49e3d6e88b6645495786ca9be7ec1d6c8aa1a6", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -14243,7 +14243,7 @@ avr_expand_builtin (tree exp, rtx target,\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n   const char *bname = IDENTIFIER_POINTER (DECL_NAME (fndecl));\n-  unsigned int id = DECL_FUNCTION_CODE (fndecl);\n+  unsigned int id = DECL_MD_FUNCTION_CODE (fndecl);\n   const struct avr_builtin_description *d = &avr_bdesc[id];\n   tree arg0;\n   rtx op0;\n@@ -14395,7 +14395,7 @@ static tree\n avr_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED, tree *arg,\n                   bool ignore ATTRIBUTE_UNUSED)\n {\n-  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  unsigned int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n   tree val_type = TREE_TYPE (TREE_TYPE (fndecl));\n \n   if (!optimize)"}, {"sha": "d1a68321c11e987047c8f650b6ef6c07a7d74874", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -5498,7 +5498,7 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n   enum insn_code icode;\n   const struct builtin_description *d;\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  unsigned int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n   tree arg0, arg1, arg2;\n   rtx op0, op1, op2, accvec, pat, tmp1, tmp2, a0reg, a1reg;\n   machine_mode tmode, mode0;"}, {"sha": "516a7c719c7dc5d24a737575f9d23d714abca0d5", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -6661,7 +6661,7 @@ c6x_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n   size_t i;\n   const struct builtin_description *d;\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  unsigned int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n \n   for (i = 0, d = bdesc_2arg; i < ARRAY_SIZE (bdesc_2arg); i++, d++)\n     if (d->code == fcode)"}, {"sha": "e1017befaf750bcffac8929035778aba1c01cf0c", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -3439,8 +3439,7 @@ darwin_init_cfstring_builtins (unsigned builtin_cfstring)\n      in place of the existing, which may be NULL.  */\n   DECL_LANG_SPECIFIC (cfsfun) = NULL;\n   (*lang_hooks.dup_lang_specific_decl) (cfsfun);\n-  DECL_BUILT_IN_CLASS (cfsfun) = BUILT_IN_MD;\n-  DECL_FUNCTION_CODE (cfsfun) = darwin_builtin_cfstring;\n+  set_decl_built_in_function (cfsfun, BUILT_IN_MD, darwin_builtin_cfstring);\n   lang_hooks.builtin_function (cfsfun);\n \n   /* extern int __CFConstantStringClassReference[];  */\n@@ -3464,7 +3463,7 @@ tree\n darwin_fold_builtin (tree fndecl, int n_args, tree *argp,\n \t\t     bool ARG_UNUSED (ignore))\n {\n-  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  unsigned int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n \n   if (fcode == darwin_builtin_cfstring)\n     {"}, {"sha": "f8a3a0753196ca324f48d138a1427b2fcb5fdd02", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -9113,7 +9113,7 @@ frv_expand_builtin (tree exp,\n                     int ignore ATTRIBUTE_UNUSED)\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  unsigned fcode = (unsigned)DECL_FUNCTION_CODE (fndecl);\n+  unsigned fcode = DECL_MD_FUNCTION_CODE (fndecl);\n   unsigned i;\n   struct builtin_description *d;\n "}, {"sha": "2c1158f2df0a91d16733ea045b48bf9e92d940ff", "filename": "gcc/config/gcn/gcn.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fgcn%2Fgcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fgcn%2Fgcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -3546,7 +3546,7 @@ gcn_expand_builtin_1 (tree exp, rtx target, rtx /*subtarget */ ,\n \t\t      struct gcn_builtin_description *)\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  switch (DECL_FUNCTION_CODE (fndecl))\n+  switch (DECL_MD_FUNCTION_CODE (fndecl))\n     {\n     case GCN_BUILTIN_FLAT_LOAD_INT32:\n       {\n@@ -3773,7 +3773,7 @@ gcn_expand_builtin (tree exp, rtx target, rtx subtarget, machine_mode mode,\n \t\t    int ignore)\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  unsigned int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n   struct gcn_builtin_description *d;\n \n   gcc_assert (fcode < GCN_BUILTIN_MAX);"}, {"sha": "9736a7586f460b0c707de4f598bb80232fb6eb22", "filename": "gcc/config/i386/i386-builtins.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtins.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -1833,7 +1833,7 @@ tree\n ix86_builtin_reciprocal (tree fndecl)\n {\n   enum ix86_builtins fn_code\n-    = (enum ix86_builtins) DECL_FUNCTION_CODE (fndecl);\n+    = (enum ix86_builtins) DECL_MD_FUNCTION_CODE (fndecl);\n   switch (fn_code)\n     {\n       /* Vectorized version of sqrt to rsqrt conversion.  */\n@@ -2407,8 +2407,8 @@ tree\n fold_builtin_cpu (tree fndecl, tree *args)\n {\n   unsigned int i;\n-  enum ix86_builtins fn_code = (enum ix86_builtins)\n-\t\t\t\tDECL_FUNCTION_CODE (fndecl);\n+  enum ix86_builtins fn_code\n+    = (enum ix86_builtins) DECL_MD_FUNCTION_CODE (fndecl);\n   tree param_string_cst = NULL;\n \n   tree __processor_model_type = build_processor_model_struct ();"}, {"sha": "d1d5a9435f132b6929284546834b58fa0f52da74", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -10978,7 +10978,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n   tree arg0, arg1, arg2, arg3, arg4;\n   rtx op0, op1, op2, op3, op4, pat, pat2, insn;\n   machine_mode mode0, mode1, mode2, mode3, mode4;\n-  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  unsigned int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n \n   /* For CPU builtins that can be folded, fold first and expand the fold.  */\n   switch (fcode)\n@@ -12535,7 +12535,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \t\t  tree fndecl = gimple_call_fndecl (def_stmt);\n \t\t  if (fndecl\n \t\t      && fndecl_built_in_p (fndecl, BUILT_IN_MD))\n-\t\t    switch ((unsigned int) DECL_FUNCTION_CODE (fndecl))\n+\t\t    switch (DECL_MD_FUNCTION_CODE (fndecl))\n \t\t      {\n \t\t      case IX86_BUILTIN_CMPPD:\n \t\t      case IX86_BUILTIN_CMPPS:"}, {"sha": "1236230297210991acffafb80fd058b0b9cff0bf", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -16817,8 +16817,8 @@ ix86_fold_builtin (tree fndecl, int n_args,\n {\n   if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n     {\n-      enum ix86_builtins fn_code = (enum ix86_builtins)\n-\t\t\t\t   DECL_FUNCTION_CODE (fndecl);\n+      enum ix86_builtins fn_code\n+\t= (enum ix86_builtins) DECL_MD_FUNCTION_CODE (fndecl);\n       enum rtx_code rcode;\n       bool is_vshift;\n       unsigned HOST_WIDE_INT mask;\n@@ -17283,7 +17283,8 @@ ix86_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n   tree fndecl = gimple_call_fndecl (stmt);\n   gcc_checking_assert (fndecl && fndecl_built_in_p (fndecl, BUILT_IN_MD));\n   int n_args = gimple_call_num_args (stmt);\n-  enum ix86_builtins fn_code = (enum ix86_builtins) DECL_FUNCTION_CODE (fndecl);\n+  enum ix86_builtins fn_code\n+    = (enum ix86_builtins) DECL_MD_FUNCTION_CODE (fndecl);\n   tree decl = NULL_TREE;\n   tree arg0, arg1, arg2;\n   enum rtx_code rcode;"}, {"sha": "a07244e2206226852682072b18444c130de063c8", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -10556,8 +10556,8 @@ ia64_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED,\n {\n   if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n     {\n-      enum ia64_builtins fn_code = (enum ia64_builtins)\n-\t\t\t\t   DECL_FUNCTION_CODE (fndecl);\n+      enum ia64_builtins fn_code\n+\t= (enum ia64_builtins) DECL_MD_FUNCTION_CODE (fndecl);\n       switch (fn_code)\n \t{\n \tcase IA64_BUILTIN_NANQ:\n@@ -10591,7 +10591,7 @@ ia64_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \t\t     int ignore ATTRIBUTE_UNUSED)\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  unsigned int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n \n   switch (fcode)\n     {"}, {"sha": "ad21f1c87763bc17c9495bb0a03f735469463bed", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -2707,7 +2707,7 @@ iq2000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \t\t       int ignore ATTRIBUTE_UNUSED)\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  int fcode = DECL_FUNCTION_CODE (fndecl);\n+  int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n   enum rtx_code code [5];\n \n   code[0] = REG;"}, {"sha": "45ddec13e9f47c90833db81e74c4d9ca456a272c", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -17215,7 +17215,7 @@ mips_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n   const struct mips_builtin_description *d;\n \n   fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  fcode = DECL_FUNCTION_CODE (fndecl);\n+  fcode = DECL_MD_FUNCTION_CODE (fndecl);\n   gcc_assert (fcode < ARRAY_SIZE (mips_builtins));\n   d = &mips_builtins[fcode];\n   avail = d->avail ();"}, {"sha": "72e62d2f785962d10541707d8380237d39719492", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -2089,7 +2089,7 @@ msp430_expand_builtin (tree exp,\n \t\t       int ignore ATTRIBUTE_UNUSED)\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  unsigned int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n   rtx arg1 = expand_normal (CALL_EXPR_ARG (exp, 0));\n \n   if (fcode == MSP430_BUILTIN_DELAY_CYCLES)"}, {"sha": "1348591b008ac763d04075dda70e349bafb0ac62", "filename": "gcc/config/nds32/nds32-intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -993,7 +993,7 @@ nds32_expand_builtin_impl (tree exp,\n \t\t\t   int ignore ATTRIBUTE_UNUSED)\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  unsigned int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n   unsigned i;\n   struct builtin_description *d;\n "}, {"sha": "e54bdba8403b6fb29f5ab7d86e8c86b56bb39f12", "filename": "gcc/config/nios2/nios2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fnios2%2Fnios2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fnios2%2Fnios2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -4009,7 +4009,7 @@ nios2_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \t\t      int ignore ATTRIBUTE_UNUSED)\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  unsigned int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n \n   if (fcode < nios2_fpu_builtin_base)\n     {"}, {"sha": "ce4602f786e1329309c78ffa9949169a9ae1bd4e", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -5452,7 +5452,7 @@ nvptx_expand_builtin (tree exp, rtx target, rtx ARG_UNUSED (subtarget),\n \t\t      machine_mode mode, int ignore)\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  switch (DECL_FUNCTION_CODE (fndecl))\n+  switch (DECL_MD_FUNCTION_CODE (fndecl))\n     {\n     case NVPTX_BUILTIN_SHUFFLE:\n     case NVPTX_BUILTIN_SHUFFLELL:"}, {"sha": "0ab95d84c3a66809e89c3bf23fca175f590be276", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -653,7 +653,7 @@ pa_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \t\t   int ignore ATTRIBUTE_UNUSED)\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  unsigned int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n \n   switch (fcode)\n     {"}, {"sha": "4e1c081538502966f1810e7f509a8f8b64e970cd", "filename": "gcc/config/pru/pru.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fpru%2Fpru.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fpru%2Fpru.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpru%2Fpru.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -2873,7 +2873,7 @@ pru_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n \t\t    int ignore ATTRIBUTE_UNUSED)\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  unsigned int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n   rtx arg1 = expand_normal (CALL_EXPR_ARG (exp, 0));\n \n   if (fcode == PRU_BUILTIN_DELAY_CYCLES)"}, {"sha": "80169fa9887b2d522f7f496d14f40a72db31dfc9", "filename": "gcc/config/riscv/riscv-builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Friscv%2Friscv-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Friscv%2Friscv-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-builtins.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -256,7 +256,7 @@ riscv_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \t\t      int ignore ATTRIBUTE_UNUSED)\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  unsigned int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n   const struct riscv_builtin_description *d = &riscv_builtins[fcode];\n \n   switch (d->builtin_type)"}, {"sha": "bd4b19d5646008a1e25fb1693d7499a523079146", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -6124,7 +6124,7 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n   vec<tree, va_gc> *arglist = static_cast<vec<tree, va_gc> *> (passed_arglist);\n   unsigned int nargs = vec_safe_length (arglist);\n   enum rs6000_builtins fcode\n-    = (enum rs6000_builtins)DECL_FUNCTION_CODE (fndecl);\n+    = (enum rs6000_builtins) DECL_MD_FUNCTION_CODE (fndecl);\n   tree fnargs = TYPE_ARG_TYPES (TREE_TYPE (fndecl));\n   tree types[3], args[3];\n   const struct altivec_builtin_types *desc;"}, {"sha": "62aa4bf6be4e688898877fd054c4fe5f37b5067a", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -4003,7 +4003,8 @@ htm_expand_builtin (tree exp, rtx target, bool * expandedp)\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n   bool nonvoid = TREE_TYPE (TREE_TYPE (fndecl)) != void_type_node;\n-  enum rs6000_builtins fcode = (enum rs6000_builtins) DECL_FUNCTION_CODE (fndecl);\n+  enum rs6000_builtins fcode\n+    = (enum rs6000_builtins) DECL_MD_FUNCTION_CODE (fndecl);\n   const struct builtin_description *d;\n   size_t i;\n \n@@ -4472,7 +4473,8 @@ altivec_expand_dst_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n \t\t\t    bool *expandedp)\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  enum rs6000_builtins fcode = (enum rs6000_builtins) DECL_FUNCTION_CODE (fndecl);\n+  enum rs6000_builtins fcode\n+    = (enum rs6000_builtins) DECL_MD_FUNCTION_CODE (fndecl);\n   tree arg0, arg1, arg2;\n   machine_mode mode0, mode1;\n   rtx pat, op0, op1, op2;\n@@ -4666,7 +4668,7 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n   rtx op0, pat;\n   machine_mode tmode, mode0;\n   enum rs6000_builtins fcode\n-    = (enum rs6000_builtins) DECL_FUNCTION_CODE (fndecl);\n+    = (enum rs6000_builtins) DECL_MD_FUNCTION_CODE (fndecl);\n \n   if (rs6000_overloaded_builtin_p (fcode))\n     {\n@@ -5325,7 +5327,7 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n   tree fndecl = gimple_call_fndecl (stmt);\n   gcc_checking_assert (fndecl && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD);\n   enum rs6000_builtins fn_code\n-    = (enum rs6000_builtins) DECL_FUNCTION_CODE (fndecl);\n+    = (enum rs6000_builtins) DECL_MD_FUNCTION_CODE (fndecl);\n   tree arg0, arg1, lhs, temp;\n   enum tree_code bcode;\n   gimple *g;\n@@ -6216,7 +6218,7 @@ rs6000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n   enum rs6000_builtins fcode\n-    = (enum rs6000_builtins)DECL_FUNCTION_CODE (fndecl);\n+    = (enum rs6000_builtins) DECL_MD_FUNCTION_CODE (fndecl);\n   size_t uns_fcode = (size_t)fcode;\n   const struct builtin_description *d;\n   size_t i;"}, {"sha": "e792116fb402f3d0e5187e11f9c74676cc7e8e50", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -5335,7 +5335,7 @@ rs6000_builtin_md_vectorized_function (tree fndecl, tree type_out,\n   in_n = TYPE_VECTOR_SUBPARTS (type_in);\n \n   enum rs6000_builtins fn\n-    = (enum rs6000_builtins) DECL_FUNCTION_CODE (fndecl);\n+    = (enum rs6000_builtins) DECL_MD_FUNCTION_CODE (fndecl);\n   switch (fn)\n     {\n     case RS6000_BUILTIN_RSQRTF:\n@@ -21300,7 +21300,7 @@ rs6000_ira_change_pseudo_allocno_class (int regno ATTRIBUTE_UNUSED,\n static tree\n rs6000_builtin_reciprocal (tree fndecl)\n {\n-  switch (DECL_FUNCTION_CODE (fndecl))\n+  switch (DECL_MD_FUNCTION_CODE (fndecl))\n     {\n     case VSX_BUILTIN_XVSQRTDP:\n       if (!RS6000_RECIP_AUTO_RSQRTE_P (V2DFmode))"}, {"sha": "10b8f6e81d128ab7981505dd1d87e67181f61adf", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -2616,7 +2616,7 @@ rx_expand_builtin (tree exp,\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n   tree arg    = call_expr_nargs (exp) >= 1 ? CALL_EXPR_ARG (exp, 0) : NULL_TREE;\n   rtx  op     = arg ? expand_normal (arg) : NULL_RTX;\n-  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  unsigned int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n \n   switch (fcode)\n     {"}, {"sha": "fd98a392517bc180d70b60cecf8b5e3b576eb3de", "filename": "gcc/config/s390/s390-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fs390%2Fs390-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fs390%2Fs390-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-c.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -860,7 +860,7 @@ s390_resolve_overloaded_builtin (location_t loc,\n   vec<tree, va_gc> *arglist = static_cast<vec<tree, va_gc> *> (passed_arglist);\n   unsigned int in_args_num = vec_safe_length (arglist);\n   unsigned int ob_args_num = 0;\n-  unsigned int ob_fcode = DECL_FUNCTION_CODE (ob_fndecl);\n+  unsigned int ob_fcode = DECL_MD_FUNCTION_CODE (ob_fndecl);\n   enum s390_overloaded_builtin_vars bindex;\n   unsigned int i;\n   int last_match_type = INT_MAX;"}, {"sha": "74f1d254a33a3959dc997cfed4eb3b085206fe85", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -770,7 +770,7 @@ s390_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n #define MAX_ARGS 6\n \n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  unsigned int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n   enum insn_code icode;\n   rtx op[MAX_ARGS], pat;\n   int arity;"}, {"sha": "e44e46d1fad25b84d0caa00326e0cfa0fc2d2145", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -10461,7 +10461,7 @@ sh_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \t\t   machine_mode mode ATTRIBUTE_UNUSED, int ignore)\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  unsigned int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n   const struct builtin_description *d = &bdesc[fcode];\n   enum insn_code icode = d->icode;\n   int signature = d->signature;"}, {"sha": "a15f27f442c1fe523334a8872337fda7cb0214cd", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -11661,7 +11661,8 @@ sparc_expand_builtin (tree exp, rtx target,\n \t\t      int ignore ATTRIBUTE_UNUSED)\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  enum sparc_builtins code = (enum sparc_builtins) DECL_FUNCTION_CODE (fndecl);\n+  enum sparc_builtins code\n+    = (enum sparc_builtins) DECL_MD_FUNCTION_CODE (fndecl);\n   enum insn_code icode = sparc_builtins_icode[code];\n   bool nonvoid = TREE_TYPE (TREE_TYPE (fndecl)) != void_type_node;\n   call_expr_arg_iterator iter;\n@@ -11829,7 +11830,8 @@ static tree\n sparc_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED,\n \t\t    tree *args, bool ignore)\n {\n-  enum sparc_builtins code = (enum sparc_builtins) DECL_FUNCTION_CODE (fndecl);\n+  enum sparc_builtins code\n+    = (enum sparc_builtins) DECL_MD_FUNCTION_CODE (fndecl);\n   tree rtype = TREE_TYPE (TREE_TYPE (fndecl));\n   tree arg0, arg1, arg2;\n "}, {"sha": "63120824e031e081429d2847ee7331710f79cc80", "filename": "gcc/config/spu/spu-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fspu%2Fspu-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fspu%2Fspu-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu-c.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -93,7 +93,7 @@ spu_resolve_overloaded_builtin (location_t loc, tree fndecl, void *passed_args)\n \t\t\t  || POINTER_TYPE_P (t))\n   vec<tree, va_gc> *fnargs = static_cast <vec<tree, va_gc> *> (passed_args);\n   unsigned int nargs = vec_safe_length (fnargs);\n-  int new_fcode, fcode = DECL_FUNCTION_CODE (fndecl);\n+  int new_fcode, fcode = DECL_MD_FUNCTION_CODE (fndecl);\n   struct spu_builtin_description *desc;\n   tree match = NULL_TREE;\n "}, {"sha": "f88ad19aa6f7e8fb2451c650c8bad93d8fd499ad", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -6591,7 +6591,7 @@ spu_expand_builtin (tree exp,\n \t\t    int ignore ATTRIBUTE_UNUSED)\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  unsigned int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n   struct spu_builtin_description *d;\n \n   if (fcode < NUM_SPU_BUILTINS)"}, {"sha": "aec9f2df2614a584d1111a30f73790c17eb5df3e", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -2326,7 +2326,7 @@ xstormy16_expand_builtin (tree exp, rtx target,\n \n   fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n   argtree = TREE_OPERAND (exp, 1);\n-  i = DECL_FUNCTION_CODE (fndecl);\n+  i = DECL_MD_FUNCTION_CODE (fndecl);\n   code = s16builtins[i].md_code;\n \n   for (a = 0; a < 10 && argtree; a++)"}, {"sha": "575780fcccb4befda0392fb853b265f943d30031", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -3531,7 +3531,7 @@ tilegx_expand_builtin (tree exp,\n #define MAX_BUILTIN_ARGS 4\n \n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  unsigned int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n   tree arg;\n   call_expr_arg_iterator iter;\n   enum insn_code icode;"}, {"sha": "b4adfa49985f221d193cf7a4f9ea56004e45a450", "filename": "gcc/config/tilepro/tilepro.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -3095,7 +3095,7 @@ tilepro_expand_builtin (tree exp,\n #define MAX_BUILTIN_ARGS 4\n \n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  unsigned int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n   tree arg;\n   call_expr_arg_iterator iter;\n   enum insn_code icode;"}, {"sha": "a99956755ec0bc5d5bb9152ac3190ff48132d9b8", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -3450,7 +3450,7 @@ static tree\n xtensa_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED, tree *args,\n \t\t     bool ignore ATTRIBUTE_UNUSED)\n {\n-  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  unsigned int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n   tree arg0, arg1;\n \n   switch (fcode)\n@@ -3481,7 +3481,7 @@ xtensa_expand_builtin (tree exp, rtx target,\n \t\t       int ignore)\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  unsigned int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n \n   switch (fcode)\n     {"}, {"sha": "5c005d49a730482d36d5ffeb93de4d960655f8fe", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -1,3 +1,9 @@\n+2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/91421\n+\t* decl.c (duplicate_decls):  Use copy_decl_built_in_function.\n+\t* pt.c (declare_integer_pack): Use set_decl_built_in_function.\n+\n 2019-08-13  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/90473 - wrong code with nullptr in default argument."}, {"sha": "b849630e3421065e9314d8c5136fef2a46b24302", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -2544,8 +2544,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n       if (fndecl_built_in_p (olddecl)\n \t  && (new_defines_function ? GNU_INLINE_P (newdecl) : types_match))\n \t{\n-\t  DECL_BUILT_IN_CLASS (newdecl) = DECL_BUILT_IN_CLASS (olddecl);\n-\t  DECL_FUNCTION_CODE (newdecl) = DECL_FUNCTION_CODE (olddecl);\n+\t  copy_decl_built_in_function (newdecl, olddecl);\n \t  /* If we're keeping the built-in definition, keep the rtl,\n \t     regardless of declaration matches.  */\n \t  COPY_DECL_RTL (olddecl, newdecl);"}, {"sha": "17585119bceb2e6416b548676e07059aa911a208", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -28331,9 +28331,8 @@ declare_integer_pack (void)\n \t\t\t\t\t\t\t NULL_TREE),\n \t\t\t       NULL_TREE, ECF_CONST);\n   DECL_DECLARED_CONSTEXPR_P (ipfn) = true;\n-  DECL_BUILT_IN_CLASS (ipfn) = BUILT_IN_FRONTEND;\n-  DECL_FUNCTION_CODE (ipfn)\n-    = (enum built_in_function) (int) CP_BUILT_IN_INTEGER_PACK;\n+  set_decl_built_in_function (ipfn, BUILT_IN_FRONTEND,\n+\t\t\t      CP_BUILT_IN_INTEGER_PACK);\n }\n \n /* Set up the hash tables for template instantiations.  */"}, {"sha": "a4db1facbf844b6a2aad5d67659b391bd852d1f1", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -1,3 +1,8 @@\n+2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/91421\n+\t* intrinsics.cc (maybe_set_intrinsic): Use set_decl_built_in_function.\n+\n 2019-08-11  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/90601"}, {"sha": "56eab522e09d347573c03a93e782ec4b10416f50", "filename": "gcc/d/intrinsics.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fd%2Fintrinsics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fd%2Fintrinsics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fintrinsics.cc?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -134,10 +134,7 @@ maybe_set_intrinsic (FuncDeclaration *decl)\n \t  /* If there is no function body, then the implementation is always\n \t     provided by the compiler.  */\n \t  if (!decl->fbody)\n-\t    {\n-\t      DECL_BUILT_IN_CLASS (decl->csym) = BUILT_IN_FRONTEND;\n-\t      DECL_FUNCTION_CODE (decl->csym) = (built_in_function) code;\n-\t    }\n+\t    set_decl_built_in_function (decl->csym, BUILT_IN_FRONTEND, code);\n \n \t  /* Infer whether the intrinsic can be used for CTFE, let the\n \t     front-end know that it can be evaluated at compile-time.  */"}, {"sha": "8c711aba12a9e4ac08f728218e3a9643e3c241bc", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -3466,7 +3466,8 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n       return (TREE_CODE (arg0) == FUNCTION_DECL\n \t      && fndecl_built_in_p (arg0) && fndecl_built_in_p (arg1)\n \t      && DECL_BUILT_IN_CLASS (arg0) == DECL_BUILT_IN_CLASS (arg1)\n-\t      && DECL_FUNCTION_CODE (arg0) == DECL_FUNCTION_CODE (arg1));\n+\t      && (DECL_UNCHECKED_FUNCTION_CODE (arg0)\n+\t\t  == DECL_UNCHECKED_FUNCTION_CODE (arg1)));\n \n     case tcc_exceptional:\n       if (TREE_CODE (arg0) == CONSTRUCTOR)"}, {"sha": "1af6d050c486d81074aa6226234771364225126c", "filename": "gcc/ipa-param-manipulation.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fipa-param-manipulation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fipa-param-manipulation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-param-manipulation.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -219,10 +219,7 @@ ipa_modify_formal_parameters (tree fndecl, ipa_parm_adjustment_vec adjustments)\n \n   /* When signature changes, we need to clear builtin info.  */\n   if (fndecl_built_in_p (fndecl))\n-    {\n-      DECL_BUILT_IN_CLASS (fndecl) = NOT_BUILT_IN;\n-      DECL_FUNCTION_CODE (fndecl) = (enum built_in_function) 0;\n-    }\n+    set_decl_built_in_function (fndecl, NOT_BUILT_IN, 0);\n \n   TREE_TYPE (fndecl) = new_type;\n   DECL_VIRTUAL_P (fndecl) = 0;"}, {"sha": "cecfe05d0a9bdeb8cb0d4fa5ef851f1b63d8f91e", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -1351,10 +1351,7 @@ split_function (basic_block return_bb, class split_point *split_point,\n      changes.  For partial inlining we however cannot expect the part\n      of builtin implementation to have same semantic as the whole.  */\n   if (fndecl_built_in_p (node->decl))\n-    {\n-      DECL_BUILT_IN_CLASS (node->decl) = NOT_BUILT_IN;\n-      DECL_FUNCTION_CODE (node->decl) = (enum built_in_function) 0;\n-    }\n+    set_decl_built_in_function (node->decl, NOT_BUILT_IN, 0);\n \n   /* If return_bb contains any clobbers that refer to SSA_NAMEs\n      set in the split part, remove them.  Also reset debug stmts that"}, {"sha": "110367ef835998b673484dc42478f80a585131cd", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -1,3 +1,8 @@\n+2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/91421\n+\t* jit-playback.c (new_function): Use set_decl_built_in_function.\n+\n 2019-07-22  Andrea Corallo  <andrea.corallo@arm.com>\n \n \t* jit-recording.c (unary_op_reproducer_strings): Make it extern."}, {"sha": "9eeb2a71892ab29bf44a883289b1193c9e305ea6", "filename": "gcc/jit/jit-playback.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fjit%2Fjit-playback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fjit%2Fjit-playback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -453,12 +453,11 @@ new_function (location *loc,\n \n   if (builtin_id)\n     {\n-      DECL_FUNCTION_CODE (fndecl) = builtin_id;\n       gcc_assert (loc == NULL);\n       DECL_SOURCE_LOCATION (fndecl) = BUILTINS_LOCATION;\n \n-      DECL_BUILT_IN_CLASS (fndecl) =\n-\tbuiltins_manager::get_class (builtin_id);\n+      built_in_class fclass = builtins_manager::get_class (builtin_id);\n+      set_decl_built_in_function (fndecl, fclass, builtin_id);\n       set_builtin_decl (builtin_id, fndecl,\n \t\t\tbuiltins_manager::implicit_p (builtin_id));\n "}, {"sha": "22ace130a627aa02d5eb6dd104cee9c64f1bde62", "filename": "gcc/langhooks.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -615,12 +615,8 @@ add_builtin_function_common (const char *name,\n \n   TREE_PUBLIC (decl)         = 1;\n   DECL_EXTERNAL (decl)       = 1;\n-  DECL_BUILT_IN_CLASS (decl) = cl;\n \n-  DECL_FUNCTION_CODE (decl)  = (enum built_in_function) function_code;\n-\n-  /* DECL_FUNCTION_CODE is a bitfield; verify that the value fits.  */\n-  gcc_assert (DECL_FUNCTION_CODE (decl) == function_code);\n+  set_decl_built_in_function (decl, cl, function_code);\n \n   if (library_name)\n     {"}, {"sha": "b156876904d3adfd3b0ee6e8a87202aec7583df1", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -1137,7 +1137,7 @@ hash_tree (struct streamer_tree_cache_d *cache, hash_map<tree, hashval_t> *map,\n       hstate.add_flag (DECL_LOOPING_CONST_OR_PURE_P (t));\n       hstate.commit_flag ();\n       if (DECL_BUILT_IN_CLASS (t) != NOT_BUILT_IN)\n-\thstate.add_int (DECL_FUNCTION_CODE (t));\n+\thstate.add_int (DECL_UNCHECKED_FUNCTION_CODE (t));\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TYPE_COMMON))"}, {"sha": "2467d78f2a26bd5fc322921c1b7af736be68232c", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -1,3 +1,10 @@\n+2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/91421\n+\t* lto-common.c (compare_tree_sccs_1): Use DECL_UNCHECKED_FUNCTION_CODE\n+\tinstead of DECL_FUNCTION_CODE.\n+\t* lto-symtab.c (lto_symtab_merge_p): Likewise.\n+\n 2019-08-01  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* Make-lang.in (lto.install-common): Remove unnecessary slash"}, {"sha": "9a17933d094b212cd28242cb8e5289d8f8c6217f", "filename": "gcc/lto/lto-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Flto%2Flto-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Flto%2Flto-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-common.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -1241,7 +1241,7 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n       compare_values (DECL_CXX_CONSTRUCTOR_P);\n       compare_values (DECL_CXX_DESTRUCTOR_P);\n       if (DECL_BUILT_IN_CLASS (t1) != NOT_BUILT_IN)\n-\tcompare_values (DECL_FUNCTION_CODE);\n+\tcompare_values (DECL_UNCHECKED_FUNCTION_CODE);\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TYPE_COMMON))"}, {"sha": "37fa572b88393eb17ba7ce87e9b8b2092fba7465", "filename": "gcc/lto/lto-symtab.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Flto%2Flto-symtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Flto%2Flto-symtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-symtab.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -556,7 +556,8 @@ lto_symtab_merge_p (tree prevailing, tree decl)\n \t}\n       if (fndecl_built_in_p (prevailing)\n \t  && (DECL_BUILT_IN_CLASS (prevailing) != DECL_BUILT_IN_CLASS (decl)\n-\t      || DECL_FUNCTION_CODE (prevailing) != DECL_FUNCTION_CODE (decl)))\n+\t      || (DECL_UNCHECKED_FUNCTION_CODE (prevailing)\n+\t\t  != DECL_UNCHECKED_FUNCTION_CODE (decl))))\n \t{\n \t  if (dump_file)\n \t    fprintf (dump_file, \"Not merging decls; \""}, {"sha": "a0780333941e19684841dbabf6df71745954e63e", "filename": "gcc/omp-simd-clone.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fomp-simd-clone.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fomp-simd-clone.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-simd-clone.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -461,8 +461,7 @@ simd_clone_create (struct cgraph_node *old_node)\n   if (new_node == NULL)\n     return new_node;\n \n-  DECL_BUILT_IN_CLASS (new_node->decl) = NOT_BUILT_IN;\n-  DECL_FUNCTION_CODE (new_node->decl) = (enum built_in_function) 0;\n+  set_decl_built_in_function (new_node->decl, NOT_BUILT_IN, 0);\n   TREE_PUBLIC (new_node->decl) = TREE_PUBLIC (old_node->decl);\n   DECL_COMDAT (new_node->decl) = DECL_COMDAT (old_node->decl);\n   DECL_WEAK (new_node->decl) = DECL_WEAK (old_node->decl);"}, {"sha": "6dcbb2dcb1369a0f0fb7fbcdff9322807d868d32", "filename": "gcc/print-tree.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -519,7 +519,11 @@ print_node (FILE *file, const char *prefix, tree node, int indent,\n \t  if (code == FUNCTION_DECL && fndecl_built_in_p (node))\n \t    {\n \t      if (DECL_BUILT_IN_CLASS (node) == BUILT_IN_MD)\n-\t\tfprintf (file, \" built-in: BUILT_IN_MD:%d\", DECL_FUNCTION_CODE (node));\n+\t\tfprintf (file, \" built-in: BUILT_IN_MD:%d\",\n+\t\t\t DECL_MD_FUNCTION_CODE (node));\n+\t      else if (DECL_BUILT_IN_CLASS (node) == BUILT_IN_FRONTEND)\n+\t\tfprintf (file, \" built-in: BUILT_IN_FRONTEND:%d\",\n+\t\t\t DECL_FE_FUNCTION_CODE (node));\n \t      else\n \t\tfprintf (file, \" built-in: %s:%s\",\n \t\t\t built_in_class_names[(int) DECL_BUILT_IN_CLASS (node)],"}, {"sha": "cfd88393c04ed48b8e44bb767944c542a99a1359", "filename": "gcc/tree-core.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -1870,9 +1870,8 @@ struct GTY(()) tree_function_decl {\n   /* Index within a virtual table.  */\n   tree vindex;\n \n-  /* In a FUNCTION_DECL for which DECL_BUILT_IN holds, this is\n-     DECL_FUNCTION_CODE.  Otherwise unused.  */\n-  enum built_in_function function_code;\n+  /* In a FUNCTION_DECL this is DECL_UNCHECKED_FUNCTION_CODE.  */\n+  unsigned int function_code;\n \n   ENUM_BITFIELD(built_in_class) built_in_class : 2;\n   unsigned static_ctor_flag : 1;"}, {"sha": "dcd511e4b55fbe7bf6fa25efd4aa18646d16a740", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -324,8 +324,7 @@ unpack_ts_decl_with_vis_value_fields (struct bitpack_d *bp, tree expr)\n static void\n unpack_ts_function_decl_value_fields (struct bitpack_d *bp, tree expr)\n {\n-  DECL_BUILT_IN_CLASS (expr) = bp_unpack_enum (bp, built_in_class,\n-\t\t\t\t\t       BUILT_IN_LAST);\n+  built_in_class cl = bp_unpack_enum (bp, built_in_class, BUILT_IN_LAST);\n   DECL_STATIC_CONSTRUCTOR (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_STATIC_DESTRUCTOR (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_UNINLINABLE (expr) = (unsigned) bp_unpack_value (bp, 1);\n@@ -344,22 +343,22 @@ unpack_ts_function_decl_value_fields (struct bitpack_d *bp, tree expr)\n   DECL_DISREGARD_INLINE_LIMITS (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_PURE_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_LOOPING_CONST_OR_PURE_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n-  if (DECL_BUILT_IN_CLASS (expr) != NOT_BUILT_IN)\n+  unsigned int fcode = 0;\n+  if (cl != NOT_BUILT_IN)\n     {\n-      DECL_FUNCTION_CODE (expr) = (enum built_in_function) bp_unpack_value (bp,\n-\t                                                                    12);\n-      if (DECL_BUILT_IN_CLASS (expr) == BUILT_IN_NORMAL\n-\t  && DECL_FUNCTION_CODE (expr) >= END_BUILTINS)\n+      fcode = bp_unpack_value (bp, 32);\n+      if (cl == BUILT_IN_NORMAL && fcode >= END_BUILTINS)\n \tfatal_error (input_location,\n \t\t     \"machine independent builtin code out of range\");\n-      else if (DECL_BUILT_IN_CLASS (expr) == BUILT_IN_MD)\n+      else if (cl == BUILT_IN_MD)\n \t{\n-          tree result = targetm.builtin_decl (DECL_FUNCTION_CODE (expr), true);\n+          tree result = targetm.builtin_decl (fcode, true);\n \t  if (!result || result == error_mark_node)\n \t    fatal_error (input_location,\n \t\t\t \"target specific builtin not available\");\n \t}\n     }\n+  set_decl_built_in_function (expr, cl, fcode);\n }\n \n "}, {"sha": "aadc56ca0db176e733a3a1cb684c276d38963a57", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -306,7 +306,7 @@ pack_ts_function_decl_value_fields (struct bitpack_d *bp, tree expr)\n   bp_pack_value (bp, DECL_PURE_P (expr), 1);\n   bp_pack_value (bp, DECL_LOOPING_CONST_OR_PURE_P (expr), 1);\n   if (DECL_BUILT_IN_CLASS (expr) != NOT_BUILT_IN)\n-    bp_pack_value (bp, DECL_FUNCTION_CODE (expr), 12);\n+    bp_pack_value (bp, DECL_UNCHECKED_FUNCTION_CODE (expr), 32);\n }\n \n "}, {"sha": "b910c5cb4759b4e45ba19b9344249cf097fa9a7d", "filename": "gcc/tree.h", "status": "modified", "additions": 63, "deletions": 8, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d732405bd91b54c196fdc38191f838bb01f23a6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=4d732405bd91b54c196fdc38191f838bb01f23a6", "patch": "@@ -2518,10 +2518,10 @@ extern machine_mode vector_type_mode (const_tree);\n   (DECL_COMMON_CHECK (NODE)->decl_common.mode = (MODE))\n \n /* For FUNCTION_DECL, if it is built-in, this identifies which built-in\n-   operation it is.  Note, however, that this field is overloaded, with\n-   DECL_BUILT_IN_CLASS as the discriminant, so the latter must always be\n-   checked before any access to the former.  */\n-#define DECL_FUNCTION_CODE(NODE) \\\n+   operation it is.  This is only intended for low-level accesses;\n+   normally DECL_FUNCTION_CODE, DECL_FE_FUNCTION_CODE or DECL_MD_FUNCTION\n+   should be used instead.  */\n+#define DECL_UNCHECKED_FUNCTION_CODE(NODE) \\\n   (FUNCTION_DECL_CHECK (NODE)->function_decl.function_code)\n \n /* Test if FCODE is a function code for an alloca operation.  */\n@@ -3143,10 +3143,9 @@ extern vec<tree, va_gc> **decl_debug_args_insert (tree);\n #define DECL_STRUCT_FUNCTION(NODE) \\\n   (FUNCTION_DECL_CHECK (NODE)->function_decl.f)\n \n-\n /* For a builtin function, identify which part of the compiler defined it.  */\n #define DECL_BUILT_IN_CLASS(NODE) \\\n-   (FUNCTION_DECL_CHECK (NODE)->function_decl.built_in_class)\n+   ((built_in_class) FUNCTION_DECL_CHECK (NODE)->function_decl.built_in_class)\n \n /* In FUNCTION_DECL, a chain of ..._DECL nodes.  */\n #define DECL_ARGUMENTS(NODE) \\\n@@ -3885,6 +3884,61 @@ valid_vector_subparts_p (poly_uint64 subparts)\n   return true;\n }\n \n+/* Return the built-in function that DECL represents, given that it is known\n+   to be a FUNCTION_DECL with built-in class BUILT_IN_NORMAL.  */\n+inline built_in_function\n+DECL_FUNCTION_CODE (const_tree decl)\n+{\n+  const tree_function_decl &fndecl = FUNCTION_DECL_CHECK (decl)->function_decl;\n+  gcc_checking_assert (fndecl.built_in_class == BUILT_IN_NORMAL);\n+  return (built_in_function) fndecl.function_code;\n+}\n+\n+/* Return the target-specific built-in function that DECL represents,\n+   given that it is known to be a FUNCTION_DECL with built-in class\n+   BUILT_IN_MD.  */\n+inline int\n+DECL_MD_FUNCTION_CODE (const_tree decl)\n+{\n+  const tree_function_decl &fndecl = FUNCTION_DECL_CHECK (decl)->function_decl;\n+  gcc_checking_assert (fndecl.built_in_class == BUILT_IN_MD);\n+  return fndecl.function_code;\n+}\n+\n+/* Return the frontend-specific built-in function that DECL represents,\n+   given that it is known to be a FUNCTION_DECL with built-in class\n+   BUILT_IN_FRONTEND.  */\n+inline int\n+DECL_FE_FUNCTION_CODE (const_tree decl)\n+{\n+  const tree_function_decl &fndecl = FUNCTION_DECL_CHECK (decl)->function_decl;\n+  gcc_checking_assert (fndecl.built_in_class == BUILT_IN_FRONTEND);\n+  return fndecl.function_code;\n+}\n+\n+/* Record that FUNCTION_DECL DECL represents built-in function FCODE of\n+   class FCLASS.  */\n+inline void\n+set_decl_built_in_function (tree decl, built_in_class fclass,\n+\t\t\t    unsigned int fcode)\n+{\n+  tree_function_decl &fndecl = FUNCTION_DECL_CHECK (decl)->function_decl;\n+  fndecl.built_in_class = fclass;\n+  fndecl.function_code = fcode;\n+}\n+\n+/* Record that FUNCTION_DECL NEWDECL represents the same built-in function\n+   as OLDDECL (or none, if OLDDECL doesn't represent a built-in function).  */\n+inline void\n+copy_decl_built_in_function (tree newdecl, const_tree olddecl)\n+{\n+  tree_function_decl &newfndecl = FUNCTION_DECL_CHECK (newdecl)->function_decl;\n+  const tree_function_decl &oldfndecl\n+    = FUNCTION_DECL_CHECK (olddecl)->function_decl;\n+  newfndecl.built_in_class = oldfndecl.built_in_class;\n+  newfndecl.function_code = oldfndecl.function_code;\n+}\n+\n /* In NON_LVALUE_EXPR and VIEW_CONVERT_EXPR, set when this node is merely a\n    wrapper added to express a location_t on behalf of the node's child\n    (e.g. by maybe_wrap_with_location).  */\n@@ -6077,9 +6131,10 @@ fndecl_built_in_p (const_tree node, built_in_class klass)\n    of class KLASS with name equal to NAME.  */\n \n inline bool\n-fndecl_built_in_p (const_tree node, int name, built_in_class klass)\n+fndecl_built_in_p (const_tree node, unsigned int name, built_in_class klass)\n {\n-  return (fndecl_built_in_p (node, klass) && DECL_FUNCTION_CODE (node) == name);\n+  return (fndecl_built_in_p (node, klass)\n+\t  && DECL_UNCHECKED_FUNCTION_CODE (node) == name);\n }\n \n /* Return true if a FUNCTION_DECL NODE is a GCC built-in function"}]}