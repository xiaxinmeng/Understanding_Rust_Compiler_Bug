{"sha": "8d4f237b9fb6e4313a2f87d876027cddc1eb3972", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ0ZjIzN2I5ZmI2ZTQzMTNhMmY4N2Q4NzYwMjdjZGRjMWViMzk3Mg==", "commit": {"author": {"name": "Julia Koval", "email": "julia.koval@intel.com", "date": "2017-11-29T18:19:34Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2017-11-29T18:19:34Z"}, "message": "Enable VBMI2 support [6/7]\n\ngcc/\n\t* config/i386/avx512vbmi2intrin.h (_mm512_shrdv_epi16,\n\t_mm512_mask_shrdv_epi16, _mm512_maskz_shrdv_epi16, _mm512_shrdv_epi32,\n\t_mm512_mask_shrdv_epi32, _mm512_maskz_shrdv_epi32, _mm512_shrdv_epi64,\n\t_mm512_mask_shrdv_epi64, _mm512_maskz_shrdv_epi64): New intrinsics.\n\t* config/i386/avx512vbmi2vlintrin.h (_mm256_shrdv_epi16,\n\t_mm256_mask_shrdv_epi16, _mm256_maskz_shrdv_epi16, _mm256_shrdv_epi32,\n\t_mm256_mask_shrdv_epi32, _mm256_maskz_shrdv_epi32, _mm256_shrdv_epi64,\n\t_mm256_mask_shrdv_epi64, _mm256_maskz_shrdv_epi64, _mm_shrdv_epi16,\n\t_mm_mask_shrdv_epi16, _mm_maskz_shrdv_epi16, _mm_shrdv_epi32,\n\t_mm_mask_shrdv_epi32, _mm_maskz_shrdv_epi32, _mm_shrdv_epi64,\n\t_mm_mask_shrdv_epi64, _mm_maskz_shrdv_epi64): Ditto.\n\t* config/i386/i386-builtin-types.def (V32HI_FTYPE_V32HI_V32HI_V32HI,\n\tV32HI_FTYPE_V32HI_V32HI_V32HI_INT, V16HI_FTYPE_V16HI_V16HI_V16HI_INT,\n\tV8HI_FTYPE_V8HI_V8HI_V8HI_INT, V8SI_FTYPE_V8SI_V8SI_V8SI_INT,\n\tV4SI_FTYPE_V4SI_V4SI_V4SI_INT, V8DI_FTYPE_V8DI_V8DI_V8DI,\n\tV8DI_FTYPE_V8DI_V8DI_V8DI_INT, V4DI_FTYPE_V4DI_V4DI_V4DI_INT,\n\tV16SI_FTYPE_V16SI_V16SI_V16SI, V16SI_FTYPE_V16SI_V16SI_V16SI_INT,\n\tV2DI_FTYPE_V2DI_V2DI_V2DI_INT): New types.\n\t* config/i386/i386.c (ix86_expand_args_builtin): Handle new types.\n\t* config/i386/sse.md (vpshrdv_<mode>, vpshrdv_<mode>_mask,\n\tvpshrdv_<mode>_maskz, vpshrdv_<mode>_maskz_1): New pattern.\n\ngcc/testsuite/\n\t* gcc.target/i386/avx512f-vpshrdv-1.c: New test.\n\t* gcc.target/i386/avx512f-vpshrdvd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpshrdvq-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpshrdvw-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vpshrdw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpshrdv-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpshrdvd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpshrdvq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpshrdvw-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpshrdw-2.c: Ditto.\n\nFrom-SVN: r255249", "tree": {"sha": "2f3121aea1b1bb3ebc24b67b75b76093b991c278", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f3121aea1b1bb3ebc24b67b75b76093b991c278"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d4f237b9fb6e4313a2f87d876027cddc1eb3972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d4f237b9fb6e4313a2f87d876027cddc1eb3972", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d4f237b9fb6e4313a2f87d876027cddc1eb3972", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/comments", "author": {"login": "vaalfreja", "id": 5216345, "node_id": "MDQ6VXNlcjUyMTYzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5216345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaalfreja", "html_url": "https://github.com/vaalfreja", "followers_url": "https://api.github.com/users/vaalfreja/followers", "following_url": "https://api.github.com/users/vaalfreja/following{/other_user}", "gists_url": "https://api.github.com/users/vaalfreja/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaalfreja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaalfreja/subscriptions", "organizations_url": "https://api.github.com/users/vaalfreja/orgs", "repos_url": "https://api.github.com/users/vaalfreja/repos", "events_url": "https://api.github.com/users/vaalfreja/events{/privacy}", "received_events_url": "https://api.github.com/users/vaalfreja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1d0a8ae9d44171e066de45c25c80a65de6370876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d0a8ae9d44171e066de45c25c80a65de6370876", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d0a8ae9d44171e066de45c25c80a65de6370876"}], "stats": {"total": 771, "additions": 771, "deletions": 0}, "files": [{"sha": "f421b64fd62073df2216a06e311f590fdaa026db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d4f237b9fb6e4313a2f87d876027cddc1eb3972", "patch": "@@ -1,3 +1,27 @@\n+2017-11-29  Julia Koval  <julia.koval@intel.com>\n+\n+\t* config/i386/avx512vbmi2intrin.h (_mm512_shrdv_epi16,\n+\t_mm512_mask_shrdv_epi16, _mm512_maskz_shrdv_epi16, _mm512_shrdv_epi32,\n+\t_mm512_mask_shrdv_epi32, _mm512_maskz_shrdv_epi32, _mm512_shrdv_epi64,\n+\t_mm512_mask_shrdv_epi64, _mm512_maskz_shrdv_epi64): New intrinsics.\n+\t* config/i386/avx512vbmi2vlintrin.h (_mm256_shrdv_epi16,\n+\t_mm256_mask_shrdv_epi16, _mm256_maskz_shrdv_epi16, _mm256_shrdv_epi32,\n+\t_mm256_mask_shrdv_epi32, _mm256_maskz_shrdv_epi32, _mm256_shrdv_epi64,\n+\t_mm256_mask_shrdv_epi64, _mm256_maskz_shrdv_epi64, _mm_shrdv_epi16,\n+\t_mm_mask_shrdv_epi16, _mm_maskz_shrdv_epi16, _mm_shrdv_epi32,\n+\t_mm_mask_shrdv_epi32, _mm_maskz_shrdv_epi32, _mm_shrdv_epi64,\n+\t_mm_mask_shrdv_epi64, _mm_maskz_shrdv_epi64): Ditto.\n+\t* config/i386/i386-builtin-types.def (V32HI_FTYPE_V32HI_V32HI_V32HI,\n+\tV32HI_FTYPE_V32HI_V32HI_V32HI_INT, V16HI_FTYPE_V16HI_V16HI_V16HI_INT,\n+\tV8HI_FTYPE_V8HI_V8HI_V8HI_INT, V8SI_FTYPE_V8SI_V8SI_V8SI_INT,\n+\tV4SI_FTYPE_V4SI_V4SI_V4SI_INT, V8DI_FTYPE_V8DI_V8DI_V8DI,\n+\tV8DI_FTYPE_V8DI_V8DI_V8DI_INT, V4DI_FTYPE_V4DI_V4DI_V4DI_INT,\n+\tV16SI_FTYPE_V16SI_V16SI_V16SI, V16SI_FTYPE_V16SI_V16SI_V16SI_INT,\n+\tV2DI_FTYPE_V2DI_V2DI_V2DI_INT): New types.\n+\t* config/i386/i386.c (ix86_expand_args_builtin): Handle new types.\n+\t* config/i386/sse.md (vpshrdv_<mode>, vpshrdv_<mode>_mask,\n+\tvpshrdv_<mode>_maskz, vpshrdv_<mode>_maskz_1): New pattern.\n+\n 2017-11-29  Daniel Cederman  <cederman@gaisler.com>\n \n \t* config/sparc/sparc.c (sparc_do_work_around_errata): Treat the"}, {"sha": "1fed406db4051360bbd4c42e26e70925ab77a2be", "filename": "gcc/config/i386/avx512vbmi2intrin.h", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Fconfig%2Fi386%2Favx512vbmi2intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Fconfig%2Fi386%2Favx512vbmi2intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vbmi2intrin.h?ref=8d4f237b9fb6e4313a2f87d876027cddc1eb3972", "patch": "@@ -361,6 +361,79 @@ _mm512_maskz_shldi_epi64 (__mmask8 __A, __m512i __B, __m512i __C, int __D)\n \t(__v8di)(__m512i)_mm512_setzero_si512 (), (__mmask8)(A))\n #endif\n \n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_shrdv_epi16 (__m512i __A, __m512i __B, __m512i __C)\n+{\n+  return (__m512i) __builtin_ia32_vpshrdv_v32hi ((__v32hi)__A, (__v32hi) __B,\n+\t\t\t\t\t\t\t\t(__v32hi) __C);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_shrdv_epi16 (__m512i __A, __mmask32 __B, __m512i __C, __m512i __D)\n+{\n+  return (__m512i)__builtin_ia32_vpshrdv_v32hi_mask ((__v32hi)__A,\n+\t\t\t\t(__v32hi) __C, (__v32hi) __D, (__mmask32)__B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_shrdv_epi16 (__mmask32 __A, __m512i __B, __m512i __C, __m512i __D)\n+{\n+  return (__m512i)__builtin_ia32_vpshrdv_v32hi_maskz ((__v32hi)__B,\n+\t\t\t\t(__v32hi) __C, (__v32hi) __D, (__mmask32)__A);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_shrdv_epi32 (__m512i __A, __m512i __B, __m512i __C)\n+{\n+  return (__m512i) __builtin_ia32_vpshrdv_v16si ((__v16si)__A, (__v16si) __B,\n+\t\t\t\t\t\t\t\t(__v16si) __C);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_shrdv_epi32 (__m512i __A, __mmask16 __B, __m512i __C, __m512i __D)\n+{\n+  return (__m512i)__builtin_ia32_vpshrdv_v16si_mask ((__v16si)__A,\n+\t\t\t\t(__v16si) __C, (__v16si) __D, (__mmask16)__B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_shrdv_epi32 (__mmask16 __A, __m512i __B, __m512i __C, __m512i __D)\n+{\n+  return (__m512i)__builtin_ia32_vpshrdv_v16si_maskz ((__v16si)__B,\n+\t\t\t\t(__v16si) __C, (__v16si) __D, (__mmask16)__A);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_shrdv_epi64 (__m512i __A, __m512i __B, __m512i __C)\n+{\n+  return (__m512i) __builtin_ia32_vpshrdv_v8di ((__v8di)__A, (__v8di) __B,\n+\t\t\t\t\t\t\t\t(__v8di) __C);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_shrdv_epi64 (__m512i __A, __mmask8 __B, __m512i __C, __m512i __D)\n+{\n+  return (__m512i)__builtin_ia32_vpshrdv_v8di_mask ((__v8di)__A, (__v8di) __C,\n+\t\t\t\t\t\t(__v8di) __D, (__mmask8)__B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_shrdv_epi64 (__mmask8 __A, __m512i __B, __m512i __C, __m512i __D)\n+{\n+  return (__m512i)__builtin_ia32_vpshrdv_v8di_maskz ((__v8di)__B, (__v8di) __C,\n+\t\t\t\t\t\t (__v8di) __D, (__mmask8)__A);\n+}\n+\n+\n #ifdef __DISABLE_AVX512VBMI2BW__\n #undef __DISABLE_AVX512VBMI2BW__\n "}, {"sha": "cf3d4e6be48e66ea9dd0e9c84eb55d3a27604162", "filename": "gcc/config/i386/avx512vbmi2vlintrin.h", "status": "modified", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Fconfig%2Fi386%2Favx512vbmi2vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Fconfig%2Fi386%2Favx512vbmi2vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vbmi2vlintrin.h?ref=8d4f237b9fb6e4313a2f87d876027cddc1eb3972", "patch": "@@ -618,6 +618,152 @@ _mm_shldi_epi64 (__m128i __A, __m128i __B, int __C)\n \t(__v2di)(__m128i)_mm_setzero_si128 (), (__mmask8)(A))\n #endif\n \n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_shrdv_epi16 (__m256i __A, __m256i __B, __m256i __C)\n+{\n+  return (__m256i) __builtin_ia32_vpshrdv_v16hi ((__v16hi)__A, (__v16hi) __B,\n+\t\t\t\t\t\t\t\t(__v16hi) __C);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_shrdv_epi16 (__m256i __A, __mmask16 __B, __m256i __C, __m256i __D)\n+{\n+  return (__m256i)__builtin_ia32_vpshrdv_v16hi_mask ((__v16hi)__A,\n+\t\t\t\t(__v16hi) __C, (__v16hi) __D, (__mmask16)__B);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_shrdv_epi16 (__mmask16 __A, __m256i __B, __m256i __C, __m256i __D)\n+{\n+  return (__m256i)__builtin_ia32_vpshrdv_v16hi_maskz ((__v16hi)__B,\n+\t\t\t\t(__v16hi) __C, (__v16hi) __D, (__mmask16)__A);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_shrdv_epi32 (__m256i __A, __m256i __B, __m256i __C)\n+{\n+  return (__m256i) __builtin_ia32_vpshrdv_v8si ((__v8si)__A, (__v8si) __B,\n+\t\t\t\t\t\t\t\t(__v8si) __C);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_shrdv_epi32 (__m256i __A, __mmask8 __B, __m256i __C, __m256i __D)\n+{\n+  return (__m256i)__builtin_ia32_vpshrdv_v8si_mask ((__v8si)__A, (__v8si) __C,\n+\t\t\t\t\t\t(__v8si) __D, (__mmask8)__B);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_shrdv_epi32 (__mmask8 __A, __m256i __B, __m256i __C, __m256i __D)\n+{\n+  return (__m256i)__builtin_ia32_vpshrdv_v8si_maskz ((__v8si)__B, (__v8si) __C,\n+\t\t\t\t\t\t (__v8si) __D, (__mmask8)__A);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_shrdv_epi64 (__m256i __A, __m256i __B, __m256i __C)\n+{\n+  return (__m256i) __builtin_ia32_vpshrdv_v4di ((__v4di)__A, (__v4di) __B,\n+\t\t\t\t\t\t\t\t(__v4di) __C);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_shrdv_epi64 (__m256i __A, __mmask8 __B, __m256i __C, __m256i __D)\n+{\n+  return (__m256i)__builtin_ia32_vpshrdv_v4di_mask ((__v4di)__A, (__v4di) __C,\n+\t\t\t\t\t\t(__v4di) __D, (__mmask8)__B);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_shrdv_epi64 (__mmask8 __A, __m256i __B, __m256i __C, __m256i __D)\n+{\n+  return (__m256i)__builtin_ia32_vpshrdv_v4di_maskz ((__v4di)__B, (__v4di) __C,\n+\t\t\t\t\t\t (__v4di) __D, (__mmask8)__A);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_shrdv_epi16 (__m128i __A, __m128i __B, __m128i __C)\n+{\n+  return (__m128i) __builtin_ia32_vpshrdv_v8hi ((__v8hi)__A, (__v8hi) __B,\n+\t\t\t\t\t\t\t\t(__v8hi) __C);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_shrdv_epi16 (__m128i __A, __mmask8 __B, __m128i __C, __m128i __D)\n+{\n+  return (__m128i)__builtin_ia32_vpshrdv_v8hi_mask ((__v8hi)__A, (__v8hi) __C,\n+\t\t\t\t\t\t(__v8hi) __D, (__mmask8)__B);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_shrdv_epi16 (__mmask8 __A, __m128i __B, __m128i __C, __m128i __D)\n+{\n+  return (__m128i)__builtin_ia32_vpshrdv_v8hi_maskz ((__v8hi)__B, (__v8hi) __C,\n+\t\t\t\t\t\t (__v8hi) __D, (__mmask8)__A);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_shrdv_epi32 (__m128i __A, __m128i __B, __m128i __C)\n+{\n+  return (__m128i) __builtin_ia32_vpshrdv_v4si ((__v4si)__A, (__v4si) __B,\n+\t\t\t\t\t\t\t\t(__v4si) __C);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_shrdv_epi32 (__m128i __A, __mmask8 __B, __m128i __C, __m128i __D)\n+{\n+  return (__m128i)__builtin_ia32_vpshrdv_v4si_mask ((__v4si)__A, (__v4si) __C,\n+\t\t\t\t\t\t(__v4si) __D, (__mmask8)__B);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_shrdv_epi32 (__mmask8 __A, __m128i __B, __m128i __C, __m128i __D)\n+{\n+  return (__m128i)__builtin_ia32_vpshrdv_v4si_maskz ((__v4si)__B, (__v4si) __C,\n+\t\t\t\t\t\t (__v4si) __D, (__mmask8)__A);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_shrdv_epi64 (__m128i __A, __m128i __B, __m128i __C)\n+{\n+  return (__m128i) __builtin_ia32_vpshrdv_v2di ((__v2di)__A, (__v2di) __B,\n+\t\t\t\t\t\t\t\t(__v2di) __C);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_shrdv_epi64 (__m128i __A, __mmask8 __B, __m128i __C, __m128i __D)\n+{\n+  return (__m128i)__builtin_ia32_vpshrdv_v2di_mask ((__v2di)__A, (__v2di) __C,\n+\t\t\t\t\t\t(__v2di) __D, (__mmask8)__B);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_shrdv_epi64 (__mmask8 __A, __m128i __B, __m128i __C, __m128i __D)\n+{\n+  return (__m128i)__builtin_ia32_vpshrdv_v2di_maskz ((__v2di)__B, (__v2di) __C,\n+\t\t\t\t\t\t (__v2di) __D, (__mmask8)__A);\n+}\n+\n+\n+\n #ifdef __DISABLE_AVX512VBMI2VL__\n #undef __DISABLE_AVX512VBMI2VL__\n #pragma GCC pop_options"}, {"sha": "1423f3ee8b71e72698d284b88e09e1375c794f0e", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=8d4f237b9fb6e4313a2f87d876027cddc1eb3972", "patch": "@@ -1244,3 +1244,15 @@ DEF_FUNCTION_TYPE (V4DI, V4DI, V4DI, INT, V4DI, INT)\n DEF_FUNCTION_TYPE (V8HI, V8HI, V8HI, INT, V8HI, INT)\n DEF_FUNCTION_TYPE (V4SI, V4SI, V4SI, INT, V4SI, INT)\n DEF_FUNCTION_TYPE (V2DI, V2DI, V2DI, INT, V2DI, INT)\n+DEF_FUNCTION_TYPE (V32HI, V32HI, V32HI, V32HI)\n+DEF_FUNCTION_TYPE (V32HI, V32HI, V32HI, V32HI, INT)\n+DEF_FUNCTION_TYPE (V16HI, V16HI, V16HI, V16HI, INT)\n+DEF_FUNCTION_TYPE (V8HI, V8HI, V8HI, V8HI, INT)\n+DEF_FUNCTION_TYPE (V8SI, V8SI, V8SI, V8SI, INT)\n+DEF_FUNCTION_TYPE (V4SI, V4SI, V4SI, V4SI, INT)\n+DEF_FUNCTION_TYPE (V8DI, V8DI, V8DI, V8DI)\n+DEF_FUNCTION_TYPE (V8DI, V8DI, V8DI, V8DI, INT)\n+DEF_FUNCTION_TYPE (V4DI, V4DI, V4DI, V4DI, INT)\n+DEF_FUNCTION_TYPE (V16SI, V16SI, V16SI, V16SI)\n+DEF_FUNCTION_TYPE (V16SI, V16SI, V16SI, V16SI, INT)\n+DEF_FUNCTION_TYPE (V2DI, V2DI, V2DI, V2DI, INT)"}, {"sha": "045ee391a6ce8cb0f5da482f186a68de10449514", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=8d4f237b9fb6e4313a2f87d876027cddc1eb3972", "patch": "@@ -2665,6 +2665,34 @@ BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v4di_mask, \"__builtin_ia32_v\n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v2di, \"__builtin_ia32_vpshld_v2di\", IX86_BUILTIN_VPSHLDV2DI, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_INT)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v2di_mask, \"__builtin_ia32_vpshld_v2di_mask\", IX86_BUILTIN_VPSHLDV2DI_MASK, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_INT_V2DI_INT)\n \n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v32hi, \"__builtin_ia32_vpshrdv_v32hi\", IX86_BUILTIN_VPSHRDVV32HI, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_V32HI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v32hi_mask, \"__builtin_ia32_vpshrdv_v32hi_mask\", IX86_BUILTIN_VPSHRDVV32HI_MASK, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_V32HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v32hi_maskz, \"__builtin_ia32_vpshrdv_v32hi_maskz\", IX86_BUILTIN_VPSHRDVV32HI_MASKZ, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_V32HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v16hi, \"__builtin_ia32_vpshrdv_v16hi\", IX86_BUILTIN_VPSHRDVV16HI, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_V16HI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v16hi_mask, \"__builtin_ia32_vpshrdv_v16hi_mask\", IX86_BUILTIN_VPSHRDVV16HI_MASK, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_V16HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v16hi_maskz, \"__builtin_ia32_vpshrdv_v16hi_maskz\", IX86_BUILTIN_VPSHRDVV16HI_MASKZ, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_V16HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v8hi, \"__builtin_ia32_vpshrdv_v8hi\", IX86_BUILTIN_VPSHRDVV8HI, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_V8HI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v8hi_mask, \"__builtin_ia32_vpshrdv_v8hi_mask\", IX86_BUILTIN_VPSHRDVV8HI_MASK, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_V8HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v8hi_maskz, \"__builtin_ia32_vpshrdv_v8hi_maskz\", IX86_BUILTIN_VPSHRDVV8HI_MASKZ, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_V8HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v16si, \"__builtin_ia32_vpshrdv_v16si\", IX86_BUILTIN_VPSHRDVV16SI, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v16si_mask, \"__builtin_ia32_vpshrdv_v16si_mask\", IX86_BUILTIN_VPSHRDVV16SI_MASK, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v16si_maskz, \"__builtin_ia32_vpshrdv_v16si_maskz\", IX86_BUILTIN_VPSHRDVV16SI_MASKZ, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v8si, \"__builtin_ia32_vpshrdv_v8si\", IX86_BUILTIN_VPSHRDVV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v8si_mask, \"__builtin_ia32_vpshrdv_v8si_mask\", IX86_BUILTIN_VPSHRDVV8SI_MASK, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v8si_maskz, \"__builtin_ia32_vpshrdv_v8si_maskz\", IX86_BUILTIN_VPSHRDVV8SI_MASKZ, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v4si, \"__builtin_ia32_vpshrdv_v4si\", IX86_BUILTIN_VPSHRDVV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v4si_mask, \"__builtin_ia32_vpshrdv_v4si_mask\", IX86_BUILTIN_VPSHRDVV4SI_MASK, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v4si_maskz, \"__builtin_ia32_vpshrdv_v4si_maskz\", IX86_BUILTIN_VPSHRDVV4SI_MASKZ, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v8di, \"__builtin_ia32_vpshrdv_v8di\", IX86_BUILTIN_VPSHRDVV8DI, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_V8DI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v8di_mask, \"__builtin_ia32_vpshrdv_v8di_mask\", IX86_BUILTIN_VPSHRDVV8DI_MASK, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_V8DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v8di_maskz, \"__builtin_ia32_vpshrdv_v8di_maskz\", IX86_BUILTIN_VPSHRDVV8DI_MASKZ, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_V8DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v4di, \"__builtin_ia32_vpshrdv_v4di\", IX86_BUILTIN_VPSHRDVV4DI, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_V4DI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v4di_mask, \"__builtin_ia32_vpshrdv_v4di_mask\", IX86_BUILTIN_VPSHRDVV4DI_MASK, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_V4DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v4di_maskz, \"__builtin_ia32_vpshrdv_v4di_maskz\", IX86_BUILTIN_VPSHRDVV4DI_MASKZ, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_V4DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v2di, \"__builtin_ia32_vpshrdv_v2di\", IX86_BUILTIN_VPSHRDVV2DI, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v2di_mask, \"__builtin_ia32_vpshrdv_v2di_mask\", IX86_BUILTIN_VPSHRDVV2DI_MASK, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrdv_v2di_maskz, \"__builtin_ia32_vpshrdv_v2di_maskz\", IX86_BUILTIN_VPSHRDVV2DI_MASKZ, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI_INT)\n+\n BDESC_END (ARGS2, SPECIAL_ARGS2)\n \n BDESC_FIRST (special_args2, SPECIAL_ARGS2, OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_compressstorev64qi_mask, \"__builtin_ia32_compressstoreuqi512_mask\", IX86_BUILTIN_PCOMPRESSBSTORE512, UNKNOWN, (int) VOID_FTYPE_PV64QI_V64QI_UDI)"}, {"sha": "30c5ab36210579f7a52b448ceba219846dc50864", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8d4f237b9fb6e4313a2f87d876027cddc1eb3972", "patch": "@@ -33828,6 +33828,13 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V8HI_FTYPE_V8DI_V8HI_UQI:\n     case V8SI_FTYPE_V8DI_V8SI_UQI:\n     case V4SI_FTYPE_V4SI_V4SI_V4SI:\n+    case V16SI_FTYPE_V16SI_V16SI_V16SI:\n+    case V8DI_FTYPE_V8DI_V8DI_V8DI:\n+    case V32HI_FTYPE_V32HI_V32HI_V32HI:\n+    case V2DI_FTYPE_V2DI_V2DI_V2DI:\n+    case V16HI_FTYPE_V16HI_V16HI_V16HI:\n+    case V8SI_FTYPE_V8SI_V8SI_V8SI:\n+    case V8HI_FTYPE_V8HI_V8HI_V8HI:\n       nargs = 3;\n       break;\n     case V32QI_FTYPE_V32QI_V32QI_INT:\n@@ -33989,6 +33996,15 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case USI_FTYPE_V32HI_V32HI_INT_USI:\n     case UHI_FTYPE_V16HI_V16HI_INT_UHI:\n     case UQI_FTYPE_V8HI_V8HI_INT_UQI:\n+    case V32HI_FTYPE_V32HI_V32HI_V32HI_INT:\n+    case V16HI_FTYPE_V16HI_V16HI_V16HI_INT:\n+    case V8HI_FTYPE_V8HI_V8HI_V8HI_INT:\n+    case V8SI_FTYPE_V8SI_V8SI_V8SI_INT:\n+    case V4DI_FTYPE_V4DI_V4DI_V4DI_INT:\n+    case V8DI_FTYPE_V8DI_V8DI_V8DI_INT:\n+    case V16SI_FTYPE_V16SI_V16SI_V16SI_INT:\n+    case V2DI_FTYPE_V2DI_V2DI_V2DI_INT:\n+    case V4SI_FTYPE_V4SI_V4SI_V4SI_INT:\n       nargs = 4;\n       mask_pos = 1;\n       nargs_constant = 1;"}, {"sha": "5a92444000761f0ed06da5b00cd62209510bebf3", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=8d4f237b9fb6e4313a2f87d876027cddc1eb3972", "patch": "@@ -164,6 +164,7 @@\n   ;; For AVX512VBMI2 support\n   UNSPEC_VPSHLD\n   UNSPEC_VPSHRD\n+  UNSPEC_VPSHRDV\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -20114,3 +20115,59 @@\n   \"TARGET_AVX512VBMI2\"\n   \"vpshld<ssemodesuffix>\\t{%3, %2, %1, %0<mask_operand4>|%0<mask_operand4>, %1, %2, %3 }\"\n    [(set_attr (\"prefix\") (\"evex\"))])\n+\n+(define_insn \"vpshrdv_<mode>\"\n+  [(set (match_operand:VI248_VLBW 0 \"register_operand\" \"=v\")\n+\t(unspec:VI248_VLBW\n+\t  [(match_operand:VI248_VLBW 1 \"register_operand\" \"0\")\n+\t   (match_operand:VI248_VLBW 2 \"register_operand\" \"v\")\n+\t   (match_operand:VI248_VLBW 3 \"nonimmediate_operand\" \"vm\")\n+] UNSPEC_VPSHRDV))]\n+  \"TARGET_AVX512VBMI2\"\n+  \"vpshrdv<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3 }\"\n+   [(set_attr (\"prefix\") (\"evex\"))\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"vpshrdv_<mode>_mask\"\n+  [(set (match_operand:VI248_VLBW 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VI248_VLBW (unspec:VI248_VLBW\n+\t  [(match_operand:VI248_VLBW 1 \"register_operand\" \"0\")\n+\t   (match_operand:VI248_VLBW 2 \"register_operand\" \"v\")\n+\t   (match_operand:VI248_VLBW 3 \"nonimmediate_operand\" \"vm\")\n+\t] UNSPEC_VPSHRDV)\n+           (match_dup 1)\n+           (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\"))\n+)]\n+  \"TARGET_AVX512VBMI2\"\n+  \"vpshrdv<ssemodesuffix>\\t{%3, %2, %0%{%4%}|%0%{%4%}, %2, %3 }\"\n+   [(set_attr (\"prefix\") (\"evex\"))\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_expand \"vpshrdv_<mode>_maskz\"\n+  [(match_operand:VI248_VLBW 0 \"register_operand\")\n+   (match_operand:VI248_VLBW 1 \"register_operand\")\n+   (match_operand:VI248_VLBW 2 \"register_operand\")\n+   (match_operand:VI248_VLBW 3 \"nonimmediate_operand\")\n+   (match_operand:<avx512fmaskmode> 4 \"register_operand\")]\n+  \"TARGET_AVX512VBMI2\"\n+{\n+  emit_insn (gen_vpshrdv_<mode>_maskz_1 (\n+    operands[0], operands[1], operands[2], operands[3],\n+    CONST0_RTX (<MODE>mode), operands[4]));\n+  DONE;\n+})\n+\n+(define_insn \"vpshrdv_<mode>_maskz_1\"\n+  [(set (match_operand:VI248_VLBW 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VI248_VLBW (unspec:VI248_VLBW\n+\t  [(match_operand:VI248_VLBW 1 \"register_operand\" \"0\")\n+\t   (match_operand:VI248_VLBW 2 \"register_operand\" \"v\")\n+\t   (match_operand:VI248_VLBW 3 \"nonimmediate_operand\" \"vm\")\n+\t] UNSPEC_VPSHRDV)\n+\t  (match_operand:VI248_VLBW 4 \"const0_operand\" \"C\")\n+          (match_operand:<avx512fmaskmode> 5 \"register_operand\" \"Yk\"))\n+)]\n+  \"TARGET_AVX512VBMI2\"\n+  \"vpshrdv<ssemodesuffix>\\t{%3, %2, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %2, %3 }\"\n+   [(set_attr (\"prefix\") (\"evex\"))\n+   (set_attr \"mode\" \"<sseinsnmode>\")])"}, {"sha": "c5af0ddcc6fec42e52651b906684edd049cbd9c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8d4f237b9fb6e4313a2f87d876027cddc1eb3972", "patch": "@@ -1,3 +1,16 @@\n+2017-11-29  Julia Koval  <julia.koval@intel.com>\n+\n+\t* gcc.target/i386/avx512f-vpshrdv-1.c: New test.\n+\t* gcc.target/i386/avx512f-vpshrdvd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpshrdvq-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpshrdvw-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpshrdw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpshrdv-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpshrdvd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpshrdvq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpshrdvw-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpshrdw-2.c: Ditto.\n+\n 2017-11-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/83195"}, {"sha": "6dd3f0fa2b79caac1caa5c618c4c766e5ddaa754", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpshrdv-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshrdv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshrdv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshrdv-1.c?ref=8d4f237b9fb6e4313a2f87d876027cddc1eb3972", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -mavx512vbmi2 -mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpshrdvw\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdvw\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdvw\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdvd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdvd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdvd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdvq\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdvq\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdvq\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x,y,z,z1;\n+volatile __mmask32 m32;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_shrdv_epi16 (x, y, z);\n+  x = _mm512_mask_shrdv_epi16 (x, m32, y, z);\n+  x = _mm512_maskz_shrdv_epi16 (m32, x, y, z);\n+\n+  x = _mm512_shrdv_epi32 (x, y, z);\n+  x = _mm512_mask_shrdv_epi32 (x, m16, y, z);\n+  x = _mm512_maskz_shrdv_epi32 (m16, x, y, z);\n+\n+  x = _mm512_shrdv_epi64 (x, y, z);\n+  x = _mm512_mask_shrdv_epi64 (x, m8, y, z);\n+  x = _mm512_maskz_shrdv_epi64 (m8, x, y, z);\n+}"}, {"sha": "6e08095eade52f5a80f5c7c86d585414d7060756", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpshrdvd-2.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshrdvd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshrdvd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshrdvd-2.c?ref=8d4f237b9fb6e4313a2f87d876027cddc1eb3972", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f -mavx512bw -mavx512vbmi2\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512F\n+\n+#define AVX512VBMI2\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (int *r, int *dst, int *s1, int *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = (dst[i] >> (s2[i] & 31)) | (s1[i] << (32 - (s2[i] & 31)));\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_d) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  int res_ref[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1 + i;\n+      src2.a[i] = 2 + 2*i;\n+    }\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  CALC (res_ref, res1.a, src1.a, src2.a);\n+\n+  res1.x = INTRINSIC (_shrdv_epi32) (res1.x, src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_shrdv_epi32) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_shrdv_epi32) (mask, res3.x, src1.x, src2.x);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "5810fa06e4cac1269801e4e788fa5261e0c3aece", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpshrdvq-2.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshrdvq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshrdvq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshrdvq-2.c?ref=8d4f237b9fb6e4313a2f87d876027cddc1eb3972", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f -mavx512bw -mavx512vbmi2\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512F\n+\n+#define AVX512VBMI2\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (long long *r, long long *dst, long long *s1, long long *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = (dst[i] >> (s2[i] & 63)) | (s1[i] << (64 - (s2[i] & 63)));\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_q) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  long long res_ref[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1 + i;\n+      src2.a[i] = 2 + 2*i;\n+    }\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  CALC (res_ref, res1.a, src1.a, src2.a);\n+\n+  res1.x = INTRINSIC (_shrdv_epi64) (res1.x, src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_shrdv_epi64) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_shrdv_epi64) (mask, res3.x, src1.x, src2.x);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "1699c26248302c1ecf0f0b669e2af930da4afcae", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpshrdvw-2.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshrdvw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshrdvw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshrdvw-2.c?ref=8d4f237b9fb6e4313a2f87d876027cddc1eb3972", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f -mavx512bw -mavx512vbmi2\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512F\n+\n+#define AVX512VBMI2\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (short *r, short *dst, short *s1, short *s2)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = (dst[i] >> (s2[i] & 15)) | (s1[i] << (16 - (s2[i] & 15)));\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_w) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  short res_ref[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1 + i;\n+      src2.a[i] = 2 + 2*i;\n+    }\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  CALC (res_ref, res1.a, src1.a, src2.a);\n+\n+  res1.x = INTRINSIC (_shrdv_epi16) (res1.x, src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_shrdv_epi16) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_shrdv_epi16) (mask, res3.x, src1.x, src2.x);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "67596eb7613ab435735be9ba4e1e9e291122ecfd", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpshrdw-2.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshrdw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshrdw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshrdw-2.c?ref=8d4f237b9fb6e4313a2f87d876027cddc1eb3972", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f -mavx512vbmi2 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512F\n+\n+#define AVX512VBMI2\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (short *r, short *dst, short *s1, short *s2, int imm)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = (s1[i] >> (imm & 15)) | (s2[i] << (16 - (imm & 15)));\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_w) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  short res_ref[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1 + i;\n+      src2.a[i] = 2 + 2*i;\n+    }\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  CALC (res_ref, res1.a, src1.a, src2.a, DEFAULT_VALUE);\n+\n+  res1.x = INTRINSIC (_shrdi_epi16) (src1.x, src2.x, DEFAULT_VALUE);\n+  res2.x = INTRINSIC (_mask_shrdi_epi16) (res2.x, mask, src1.x, src2.x, DEFAULT_VALUE);\n+  res3.x = INTRINSIC (_maskz_shrdi_epi16) (mask, src1.x, src2.x, DEFAULT_VALUE);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "4e6ceb2787ab3ffe46c5df4fb0e92f1f213ccea9", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpshrdv-1.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshrdv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshrdv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshrdv-1.c?ref=8d4f237b9fb6e4313a2f87d876027cddc1eb3972", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -mavx512vbmi2 -mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpshrdvw\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdvw\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdvw\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdvd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdvd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdvd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdvq\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdvq\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdvq\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdvw\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdvw\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdvw\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdvd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdvd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdvd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdvq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdvq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdvq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x,y,z;\n+volatile __m128i x_,y_,z_;\n+volatile __mmask32 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm256_shrdv_epi16 (x, y, z);\n+  x = _mm256_mask_shrdv_epi16 (x, m, y, z);\n+  x = _mm256_maskz_shrdv_epi16 (m, x, y, z);\n+\n+  x = _mm256_shrdv_epi32 (x, y, z);\n+  x = _mm256_mask_shrdv_epi32 (x, m, y, z);\n+  x = _mm256_maskz_shrdv_epi32 (m, x, y, z);\n+\n+  x = _mm256_shrdv_epi64 (x, y, z);\n+  x = _mm256_mask_shrdv_epi64 (x, m, y, z);\n+  x = _mm256_maskz_shrdv_epi64 (m, x, y, z);\n+\n+  x_ = _mm_shrdv_epi16 (x_, y_, z_);\n+  x_ = _mm_mask_shrdv_epi16 (x_, m, y_, z_);\n+  x_ = _mm_maskz_shrdv_epi16 (m, x_, y_, z_);\n+\n+  x_ = _mm_shrdv_epi32 (x_, y_, z_);\n+  x_ = _mm_mask_shrdv_epi32 (x_, m, y_, z_);\n+  x_ = _mm_maskz_shrdv_epi32 (m, x_, y_, z_);\n+\n+  x_ = _mm_shrdv_epi64 (x_, y_, z_);\n+  x_ = _mm_mask_shrdv_epi64 (x_, m, y_, z_);\n+  x_ = _mm_maskz_shrdv_epi64 (m, x_, y_, z_);\n+}"}, {"sha": "6d8ab79bcad3b64d74e97d4350cef762ba277da3", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpshrdvd-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshrdvd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshrdvd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshrdvd-2.c?ref=8d4f237b9fb6e4313a2f87d876027cddc1eb3972", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512bw -mavx512vbmi2\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpshrdvd-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpshrdvd-2.c\""}, {"sha": "da74a62c7240d98f9fb920a46ce0177c095c3fb7", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpshrdvq-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshrdvq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshrdvq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshrdvq-2.c?ref=8d4f237b9fb6e4313a2f87d876027cddc1eb3972", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512bw -mavx512vbmi2\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpshrdvq-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpshrdvq-2.c\""}, {"sha": "50a3c00c640c2b10f1425764f20639679c7b8687", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpshrdvw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshrdvw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshrdvw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshrdvw-2.c?ref=8d4f237b9fb6e4313a2f87d876027cddc1eb3972", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512bw -mavx512vbmi2\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpshrdvw-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpshrdvw-2.c\""}, {"sha": "507034b2288b4a20f5a4ea0c2ac104a6bd60bd05", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpshrdw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshrdw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4f237b9fb6e4313a2f87d876027cddc1eb3972/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshrdw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshrdw-2.c?ref=8d4f237b9fb6e4313a2f87d876027cddc1eb3972", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512bw -mavx512vbmi2\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpshrdw-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpshrdw-2.c\""}]}