{"sha": "9327c475dff65f2d2f906c098943910397aaf7e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTMyN2M0NzVkZmY2NWYyZDJmOTA2YzA5ODk0MzkxMDM5N2FhZjdlNA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2006-08-06T22:43:05Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2006-08-06T22:43:05Z"}, "message": "re PR libgcj/28491 (NetworkInterface.getNetworkInterfaces() doesn't report ipv6 interfaces.)\n\n\tPR libgcj/28491:\n\t* configure, include/config.h.in: Rebuilt.\n\t* configure.ac: Look for ifaddrs.h, getifaddrs.\n\t* java/net/natVMNetworkInterfacePosix.cc (getInterfaces): Use\n\tgetifaddrs if available.\n\nFrom-SVN: r115977", "tree": {"sha": "da232522e2e183ad14c50a33158388c5e9df7f06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da232522e2e183ad14c50a33158388c5e9df7f06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9327c475dff65f2d2f906c098943910397aaf7e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9327c475dff65f2d2f906c098943910397aaf7e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9327c475dff65f2d2f906c098943910397aaf7e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9327c475dff65f2d2f906c098943910397aaf7e4/comments", "author": null, "committer": null, "parents": [{"sha": "bc19f9eedaf172fce1117c0e5baee2d8f72e04d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc19f9eedaf172fce1117c0e5baee2d8f72e04d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc19f9eedaf172fce1117c0e5baee2d8f72e04d6"}], "stats": {"total": 98, "additions": 82, "deletions": 16}, "files": [{"sha": "57044e81a897a2a5a233c5f2b0a0d23cd40ca88f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9327c475dff65f2d2f906c098943910397aaf7e4/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9327c475dff65f2d2f906c098943910397aaf7e4/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9327c475dff65f2d2f906c098943910397aaf7e4", "patch": "@@ -1,3 +1,11 @@\n+2006-08-06  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR libgcj/28491:\n+\t* configure, include/config.h.in: Rebuilt.\n+\t* configure.ac: Look for ifaddrs.h, getifaddrs.\n+\t* java/net/natVMNetworkInterfacePosix.cc (getInterfaces): Use\n+\tgetifaddrs if available.\n+\n 2006-08-06  Tom Tromey  <tromey@redhat.com>\n \n \tPR libgcj/28576:"}, {"sha": "43b9920619c5ce1bc32a62abdb37d375fe4363cb", "filename": "libjava/configure", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9327c475dff65f2d2f906c098943910397aaf7e4/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9327c475dff65f2d2f906c098943910397aaf7e4/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=9327c475dff65f2d2f906c098943910397aaf7e4", "patch": "@@ -7614,15 +7614,15 @@ ac_x_header_dirs='\n /usr/openwin/share/include'\n \n if test \"$ac_x_includes\" = no; then\n-  # Guess where to find include files, by looking for Intrinsic.h.\n+  # Guess where to find include files, by looking for Xlib.h.\n   # First, try using that file with no special directory specified.\n   cat >conftest.$ac_ext <<_ACEOF\n /* confdefs.h.  */\n _ACEOF\n cat confdefs.h >>conftest.$ac_ext\n cat >>conftest.$ac_ext <<_ACEOF\n /* end confdefs.h.  */\n-#include <X11/Intrinsic.h>\n+#include <X11/Xlib.h>\n _ACEOF\n if { (eval echo \"$as_me:$LINENO: \\\"$ac_cpp conftest.$ac_ext\\\"\") >&5\n   (eval $ac_cpp conftest.$ac_ext) 2>conftest.er1\n@@ -7649,7 +7649,7 @@ else\n sed 's/^/| /' conftest.$ac_ext >&5\n \n   for ac_dir in $ac_x_header_dirs; do\n-  if test -r \"$ac_dir/X11/Intrinsic.h\"; then\n+  if test -r \"$ac_dir/X11/Xlib.h\"; then\n     ac_x_includes=$ac_dir\n     break\n   fi\n@@ -7675,11 +7675,11 @@ _ACEOF\n cat confdefs.h >>conftest.$ac_ext\n cat >>conftest.$ac_ext <<_ACEOF\n /* end confdefs.h.  */\n-#include <X11/Intrinsic.h>\n+#include <X11/Xlib.h>\n int\n main ()\n {\n-XtMalloc (0)\n+XrmInitialize ()\n   ;\n   return 0;\n }\n@@ -9371,14 +9371,16 @@ else\n \n \n \n+\n \n \n for ac_func in strerror ioctl select fstat open fsync sleep opendir \\\n                    gmtime_r localtime_r readdir_r getpwuid_r getcwd \\\n \t\t   access stat lstat mkdir rename rmdir unlink utime chmod readlink \\\n \t\t   nl_langinfo setlocale \\\n \t\t   inet_pton uname inet_ntoa \\\n-\t\t   fork execvp pipe sigaction ftruncate mmap\n+\t\t   fork execvp pipe sigaction ftruncate mmap \\\n+\t\t   getifaddrs\n do\n as_ac_var=`echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n echo \"$as_me:$LINENO: checking for $ac_func\" >&5\n@@ -15093,13 +15095,14 @@ esac\n \n \n \n+\n \n \n for ac_header in unistd.h bstring.h sys/time.h sys/types.h fcntl.h \\\n \t\t  sys/ioctl.h sys/filio.h sys/stat.h sys/select.h \\\n \t\t  sys/socket.h netinet/in.h arpa/inet.h netdb.h net/if.h \\\n \t\t  pwd.h sys/config.h stdint.h langinfo.h locale.h \\\n-\t\t  dirent.h sys/rw_lock.h\n+\t\t  dirent.h sys/rw_lock.h ifaddrs.h\n do\n as_ac_Header=`echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then"}, {"sha": "e529593d1e679590b4ede5879886f7149b7e3a3e", "filename": "libjava/configure.ac", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9327c475dff65f2d2f906c098943910397aaf7e4/libjava%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9327c475dff65f2d2f906c098943910397aaf7e4/libjava%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.ac?ref=9327c475dff65f2d2f906c098943910397aaf7e4", "patch": "@@ -913,7 +913,8 @@ else\n \t\t   access stat lstat mkdir rename rmdir unlink utime chmod readlink \\\n \t\t   nl_langinfo setlocale \\\n \t\t   inet_pton uname inet_ntoa \\\n-\t\t   fork execvp pipe sigaction ftruncate mmap])\n+\t\t   fork execvp pipe sigaction ftruncate mmap \\\n+\t\t   getifaddrs])\n    AC_CHECK_FUNCS(inet_aton inet_addr, break)\n    AC_CHECK_HEADERS(execinfo.h unistd.h dlfcn.h)\n    # Do an additional check on dld, HP-UX for example has dladdr in libdld.sl\n@@ -1301,7 +1302,7 @@ AC_CHECK_HEADERS([unistd.h bstring.h sys/time.h sys/types.h fcntl.h \\\n \t\t  sys/ioctl.h sys/filio.h sys/stat.h sys/select.h \\\n \t\t  sys/socket.h netinet/in.h arpa/inet.h netdb.h net/if.h \\\n \t\t  pwd.h sys/config.h stdint.h langinfo.h locale.h \\\n-\t\t  dirent.h sys/rw_lock.h])\n+\t\t  dirent.h sys/rw_lock.h ifaddrs.h])\n AC_CHECK_HEADERS(inttypes.h, [\n     AC_DEFINE(HAVE_INTTYPES_H, 1, [Define if <inttypes.h> is available])\n     AC_DEFINE(JV_HAVE_INTTYPES_H, 1, [Define if <inttypes.h> is available])"}, {"sha": "e6ea39495d1232a1be3d79b1158e8a197d4bdc81", "filename": "libjava/include/config.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9327c475dff65f2d2f906c098943910397aaf7e4/libjava%2Finclude%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9327c475dff65f2d2f906c098943910397aaf7e4/libjava%2Finclude%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fconfig.h.in?ref=9327c475dff65f2d2f906c098943910397aaf7e4", "patch": "@@ -115,6 +115,9 @@\n /* Define if gethostname is declared in <unistd.h>. */\n #undef HAVE_GETHOSTNAME_DECL\n \n+/* Define to 1 if you have the `getifaddrs' function. */\n+#undef HAVE_GETIFADDRS\n+\n /* Define to 1 if you have the `getpwuid_r' function. */\n #undef HAVE_GETPWUID_R\n \n@@ -127,6 +130,9 @@\n /* Define if you have the iconv() function. */\n #undef HAVE_ICONV\n \n+/* Define to 1 if you have the <ifaddrs.h> header file. */\n+#undef HAVE_IFADDRS_H\n+\n /* Define if inet6 structures are defined in netinet/in.h. */\n #undef HAVE_INET6\n "}, {"sha": "8238d9c1fa6c6537165b9246c91d5d28cb754b85", "filename": "libjava/java/net/natVMNetworkInterfacePosix.cc", "status": "modified", "additions": 55, "deletions": 7, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9327c475dff65f2d2f906c098943910397aaf7e4/libjava%2Fjava%2Fnet%2FnatVMNetworkInterfacePosix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9327c475dff65f2d2f906c098943910397aaf7e4/libjava%2Fjava%2Fnet%2FnatVMNetworkInterfacePosix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatVMNetworkInterfacePosix.cc?ref=9327c475dff65f2d2f906c098943910397aaf7e4", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2003, 2005  Free Software Foundation\n+/* Copyright (C) 2003, 2005, 2006  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -34,6 +34,9 @@ details.  */\n #ifdef HAVE_NET_IF_H\n #include <net/if.h>\n #endif\n+#ifdef HAVE_IFADDRS_H\n+#include <ifaddrs.h>\n+#endif\n \n #include <gcj/cni.h>\n #include <jvm.h>\n@@ -46,11 +49,59 @@ details.  */\n ::java::util::Vector*\n java::net::VMNetworkInterface::getInterfaces ()\n {\n+  ::java::util::Vector* ht = new ::java::util::Vector ();\n+\n+#ifdef HAVE_GETIFADDRS\n+\n+  struct ifaddrs *addrs;\n+  if (::getifaddrs (&addrs) == -1)\n+    throw new ::java::net::SocketException(JvNewStringUTF (strerror (errno)));\n+\n+  for (struct ifaddrs *work = addrs; work != NULL; work = work->ifa_next)\n+    {\n+      // Sometimes the address can be NULL; I don't know why but\n+      // there's nothing we can do with this.\n+      if (! work->ifa_addr)\n+\tcontinue;\n+      // We only return Inet4 or Inet6 addresses.\n+      jbyteArray laddr;\n+      if (work->ifa_addr->sa_family == AF_INET)\n+\t{\n+\t  sockaddr_in *real = reinterpret_cast<sockaddr_in *> (work->ifa_addr);\n+\t  laddr = JvNewByteArray(4);\n+\t  memcpy (elements (laddr), &real->sin_addr, 4);\n+\t}\n+#ifdef HAVE_INET6\n+      else if (work->ifa_addr->sa_family == AF_INET6)\n+\t{\n+\t  sockaddr_in6 *real\n+\t    = reinterpret_cast<sockaddr_in6 *> (work->ifa_addr);\n+\t  laddr = JvNewByteArray(16);\n+\t  memcpy (elements (laddr), &real->sin6_addr, 16);\n+\t}\n+#endif\n+      else\n+\tcontinue;\n+\n+      ::java::net::InetAddress *inaddr\n+\t  =  ::java::net::InetAddress::getByAddress(laddr);\n+\n+      // It is ok to make a new NetworkInterface for each struct; the\n+      // java code will unify these as necessary; see\n+      // NetworkInterface.condense().\n+      jstring name = JvNewStringUTF (work->ifa_name);\n+\n+      ht->add (new NetworkInterface (name, inaddr));\n+    }\n+\n+  freeifaddrs (addrs);\n+\n+#else /* ! HAVE_GETIFADDRS */\n+\n   int fd;\n   int num_interfaces = 0;\n   struct ifconf if_data;\n   struct ifreq* if_record;\n-  ::java::util::Vector* ht = new ::java::util::Vector ();\n \n   if_data.ifc_len = 0;\n   if_data.ifc_buf = NULL;\n@@ -103,14 +154,11 @@ java::net::VMNetworkInterface::getInterfaces ()\n       if_record++;\n     }\n \n-#ifdef HAVE_INET6\n-      // FIXME: read /proc/net/if_inet6 (on Linux 2.4)\n-#endif\n-\n   _Jv_Free (if_data.ifc_buf);\n   \n   if (fd >= 0)\n     _Jv_close (fd);\n-  \n+#endif /* HAVE_GETIFADDRS */ \n+\n   return ht;\n }"}]}