{"sha": "a49c5793d5df1c90f00aa0419b1f218bb4983fd9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ5YzU3OTNkNWRmMWM5MGYwMGFhMDQxOWIxZjIxOGJiNDk4M2ZkOQ==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebpop@gmail.com", "date": "2007-06-24T20:59:02Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2007-06-24T20:59:02Z"}, "message": "re PR tree-optimization/32461 (Segmentation fault in build_classic_dist_vector_1() at tree-data-ref.c:2700)\n\n\tPR middle-end/32461\n\t* fold-const.c (fold_binary): Strip nops of operand 0\n\tof BIT_NOT_EXPR before calling operand_equal_p.\n\t* testsuite/gcc.dg/tree-ssa/pr32461-1.c: New.\n\t* testsuite/gcc.dg/tree-ssa/pr32461-2.c: New.\n\nFrom-SVN: r125988", "tree": {"sha": "b5ef95b7a52b4aaad86fe4118925cd68be322d23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5ef95b7a52b4aaad86fe4118925cd68be322d23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a49c5793d5df1c90f00aa0419b1f218bb4983fd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a49c5793d5df1c90f00aa0419b1f218bb4983fd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a49c5793d5df1c90f00aa0419b1f218bb4983fd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a49c5793d5df1c90f00aa0419b1f218bb4983fd9/comments", "author": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e16ca9a8206d0951baab2140533c8e59d8bf3d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e16ca9a8206d0951baab2140533c8e59d8bf3d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e16ca9a8206d0951baab2140533c8e59d8bf3d3"}], "stats": {"total": 82, "additions": 75, "deletions": 7}, "files": [{"sha": "679e5faa8db41b43b28bb0bcddba126757787280", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49c5793d5df1c90f00aa0419b1f218bb4983fd9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49c5793d5df1c90f00aa0419b1f218bb4983fd9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a49c5793d5df1c90f00aa0419b1f218bb4983fd9", "patch": "@@ -1,3 +1,11 @@\n+2007-06-24  Sebastian Pop  <sebpop@gmail.com>\n+\n+\tPR middle-end/32461\n+\t* fold-const.c (fold_binary): Strip nops of operand 0\n+\tof BIT_NOT_EXPR before calling operand_equal_p.\n+\t* testsuite/gcc.dg/tree-ssa/pr32461-1.c: New.\n+\t* testsuite/gcc.dg/tree-ssa/pr32461-2.c: New.\n+\n 2007-06-23  Mark Mitchell  <mark@codesourcery.com>\n \n \t* doc/extend.texi: Document that dllimport and dllexport imply"}, {"sha": "e2d57c99c117306d8d53bd32a4892100a02025ce", "filename": "gcc/fold-const.c", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49c5793d5df1c90f00aa0419b1f218bb4983fd9/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49c5793d5df1c90f00aa0419b1f218bb4983fd9/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=a49c5793d5df1c90f00aa0419b1f218bb4983fd9", "patch": "@@ -9260,21 +9260,31 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \n \t  /* ~X + X is -1.  */\n \t  if (TREE_CODE (arg0) == BIT_NOT_EXPR\n-\t      && operand_equal_p (TREE_OPERAND (arg0, 0), arg1, 0)\n \t      && !TYPE_OVERFLOW_TRAPS (type))\n \t    {\n-\t      t1 = build_int_cst_type (type, -1);\n-\t      return omit_one_operand (type, t1, arg1);\n+\t      tree tem = TREE_OPERAND (arg0, 0);\n+\n+\t      STRIP_NOPS (tem);\n+\t      if (operand_equal_p (tem, arg1, 0))\n+\t\t{\n+\t\t  t1 = build_int_cst_type (type, -1);\n+\t\t  return omit_one_operand (type, t1, arg1);\n+\t\t}\n \t    }\n \n \t  /* X + ~X is -1.  */\n \t  if (TREE_CODE (arg1) == BIT_NOT_EXPR\n-\t      && operand_equal_p (arg0, TREE_OPERAND (arg1, 0), 0)\n \t      && !TYPE_OVERFLOW_TRAPS (type))\n \t    {\n-\t      t1 = build_int_cst_type (type, -1);\n-\t      return omit_one_operand (type, t1, arg0);\n-\t  }\n+\t      tree tem = TREE_OPERAND (arg1, 0);\n+\n+\t      STRIP_NOPS (tem);\n+\t      if (operand_equal_p (arg0, tem, 0))\n+\t\t{\n+\t\t  t1 = build_int_cst_type (type, -1);\n+\t\t  return omit_one_operand (type, t1, arg0);\n+\t\t}\n+\t    }\n \n \t  /* If we are adding two BIT_AND_EXPR's, both of which are and'ing\n \t     with a constant, and the two constants have no bits in common,"}, {"sha": "6e069886d1ac4046158f91f55a5716c01861d382", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr32461-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49c5793d5df1c90f00aa0419b1f218bb4983fd9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr32461-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49c5793d5df1c90f00aa0419b1f218bb4983fd9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr32461-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr32461-1.c?ref=a49c5793d5df1c90f00aa0419b1f218bb4983fd9", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+typedef struct\n+{\n+  unsigned exp[256];\n+}\n+expbap_t;\n+\n+void\n+a52_bit_allocate (expbap_t * expbap)\n+{\n+  int i;\n+  unsigned *exp = expbap->exp;\n+  char *bap;\n+\n+  while (i < 3 || exp[i] > exp[i - 1]);\n+\n+  do {\n+    if (exp[i + 1] == exp[i])\n+      bap[i] = 0;\n+    i++;\n+  } while (i < 20);\n+}"}, {"sha": "81ee6ae953ed41b6c703d3e2e60ea744b356f022", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr32461-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49c5793d5df1c90f00aa0419b1f218bb4983fd9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr32461-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49c5793d5df1c90f00aa0419b1f218bb4983fd9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr32461-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr32461-2.c?ref=a49c5793d5df1c90f00aa0419b1f218bb4983fd9", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+typedef struct\n+{\n+  unsigned char exp[256];\n+}\n+expbap_t;\n+\n+void\n+a52_bit_allocate (expbap_t * expbap)\n+{\n+  int i;\n+  unsigned char *exp = expbap->exp;\n+  int lowcomp;\n+\n+  do\n+    {\n+      if (exp[i + 1] == exp[i] - 2)\n+        lowcomp = 384;\n+      else if (lowcomp && (exp[i + 1] > exp[i]))\n+        lowcomp -= 64;\n+      i++;\n+    }\n+  while ((i < 3) || ((i < 7) && (exp[i] > exp[i - 1])));\n+}"}]}