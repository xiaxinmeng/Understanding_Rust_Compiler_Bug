{"sha": "4017da8d1ccc205b51ad4dbfcb63b799ad9c9a51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAxN2RhOGQxY2NjMjA1YjUxYWQ0ZGJmY2I2M2I3OTlhZDljOWE1MQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2019-06-18T22:14:24Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2019-06-18T22:14:24Z"}, "message": "[PR90743] Fortran 'allocatable' with OpenACC data/OpenMP 'target' 'map' clauses\n\nTest what OpenMP 5.0 has to say on this topic.  And, do the same for OpenACC.\n\n\tlibgomp/\n\tPR fortran/90743\n\t* oacc-parallel.c (GOACC_parallel_keyed): Handle NULL mapping\n\tcase.\n\t* testsuite/libgomp.fortran/target-allocatable-1-1.f90: New file.\n\t* testsuite/libgomp.fortran/target-allocatable-1-2.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/allocatable-1-1.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/allocatable-1-2.f90: Likewise.\n\nFrom-SVN: r272447", "tree": {"sha": "135dceff521920b841c745107ae1a1c697a275b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/135dceff521920b841c745107ae1a1c697a275b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4017da8d1ccc205b51ad4dbfcb63b799ad9c9a51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4017da8d1ccc205b51ad4dbfcb63b799ad9c9a51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4017da8d1ccc205b51ad4dbfcb63b799ad9c9a51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4017da8d1ccc205b51ad4dbfcb63b799ad9c9a51/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6f7c1f65027e3372ce540398e55781f84bf575d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f7c1f65027e3372ce540398e55781f84bf575d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f7c1f65027e3372ce540398e55781f84bf575d3"}], "stats": {"total": 317, "additions": 314, "deletions": 3}, "files": [{"sha": "62c45828a009386eefa65cd0602694913643b772", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4017da8d1ccc205b51ad4dbfcb63b799ad9c9a51/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4017da8d1ccc205b51ad4dbfcb63b799ad9c9a51/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=4017da8d1ccc205b51ad4dbfcb63b799ad9c9a51", "patch": "@@ -1,5 +1,13 @@\n 2019-06-18  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\tPR fortran/90743\n+\t* oacc-parallel.c (GOACC_parallel_keyed): Handle NULL mapping\n+\tcase.\n+\t* testsuite/libgomp.fortran/target-allocatable-1-1.f90: New file.\n+\t* testsuite/libgomp.fortran/target-allocatable-1-2.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/allocatable-1-1.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/allocatable-1-2.f90: Likewise.\n+\n \tPR testsuite/90861\n \t* testsuite/libgomp.oacc-c-c++-common/declare-vla.c: Update.\n "}, {"sha": "0c2cfa05a438afc28cfb981e5de70b6be6c2e8cd", "filename": "libgomp/oacc-parallel.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4017da8d1ccc205b51ad4dbfcb63b799ad9c9a51/libgomp%2Foacc-parallel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4017da8d1ccc205b51ad4dbfcb63b799ad9c9a51/libgomp%2Foacc-parallel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-parallel.c?ref=4017da8d1ccc205b51ad4dbfcb63b799ad9c9a51", "patch": "@@ -325,9 +325,12 @@ GOACC_parallel_keyed (int flags_m, void (*fn) (void *),\n   \n   devaddrs = gomp_alloca (sizeof (void *) * mapnum);\n   for (i = 0; i < mapnum; i++)\n-    devaddrs[i] = (void *) (tgt->list[i].key->tgt->tgt_start\n-\t\t\t    + tgt->list[i].key->tgt_offset\n-\t\t\t    + tgt->list[i].offset);\n+    if (tgt->list[i].key != NULL)\n+      devaddrs[i] = (void *) (tgt->list[i].key->tgt->tgt_start\n+\t\t\t      + tgt->list[i].key->tgt_offset\n+\t\t\t      + tgt->list[i].offset);\n+    else\n+      devaddrs[i] = NULL;\n   if (aq == NULL)\n     acc_dev->openacc.exec_func (tgt_fn, mapnum, hostaddrs, devaddrs, dims,\n \t\t\t\ttgt);"}, {"sha": "429a855a20b215433d1f56d1ce23ec9dc4ff6f3b", "filename": "libgomp/testsuite/libgomp.fortran/target-allocatable-1-1.f90", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4017da8d1ccc205b51ad4dbfcb63b799ad9c9a51/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-allocatable-1-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4017da8d1ccc205b51ad4dbfcb63b799ad9c9a51/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-allocatable-1-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-allocatable-1-1.f90?ref=4017da8d1ccc205b51ad4dbfcb63b799ad9c9a51", "patch": "@@ -0,0 +1,69 @@\n+! Test 'allocatable' with OpenMP 'target' 'map' clauses.\n+\n+! See also '../libgomp.oacc-fortran/allocatable-1-1.f90'.\n+\n+! { dg-do run }\n+! { dg-additional-options \"-cpp\" }\n+! { dg-additional-options \"-DMEM_SHARED\" { target offload_device_shared_as } }\n+\n+program main\n+  implicit none\n+  integer, allocatable :: a, b, c, d, e\n+\n+  allocate (a)\n+  a = 11\n+\n+  b = 25 ! Implicit allocation.\n+\n+  c = 52 ! Implicit allocation.\n+\n+  !No 'allocate (d)' here.\n+\n+  !No 'allocate (e)' here.\n+\n+  !$omp target map(to: a) map(tofrom: b, c, d) map(from: e)\n+\n+  if (.not. allocated (a)) stop 1\n+  if (a .ne. 11) stop 2\n+  a = 33\n+\n+  if (.not. allocated (b)) stop 3\n+  if (b .ne. 25) stop 4\n+\n+  if (.not. allocated (c)) stop 5\n+  if (c .ne. 52) stop 6\n+  c = 10\n+\n+  if (allocated (d)) stop 7\n+  d = 42 ! Implicit allocation, but on device only.\n+  if (.not. allocated (d)) stop 8\n+  deallocate (d) ! OpenMP requires must be \"unallocated upon exit from the region\".\n+\n+  if (allocated (e)) stop 9\n+  e = 24 ! Implicit allocation, but on device only.\n+  if (.not. allocated (e)) stop 10\n+  deallocate (e) ! OpenMP requires must be \"unallocated upon exit from the region\".\n+\n+  !$omp end target\n+\n+  if (.not. allocated (a)) stop 20\n+#ifdef MEM_SHARED\n+  if (a .ne. 33) stop 21\n+#else\n+  if (a .ne. 11) stop 22\n+#endif\n+  deallocate (a)\n+\n+  if (.not. allocated (b)) stop 23\n+  if (b .ne. 25) stop 24\n+  deallocate (b)\n+\n+  if (.not. allocated (c)) stop 25\n+  if (c .ne. 10) stop 26\n+  deallocate (c)\n+\n+  if (allocated (d)) stop 27\n+\n+  if (allocated (e)) stop 28\n+\n+end program main"}, {"sha": "5301c8eeffbd912ced4af9d9651cdd7249421616", "filename": "libgomp/testsuite/libgomp.fortran/target-allocatable-1-2.f90", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4017da8d1ccc205b51ad4dbfcb63b799ad9c9a51/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-allocatable-1-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4017da8d1ccc205b51ad4dbfcb63b799ad9c9a51/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-allocatable-1-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget-allocatable-1-2.f90?ref=4017da8d1ccc205b51ad4dbfcb63b799ad9c9a51", "patch": "@@ -0,0 +1,82 @@\n+! Test 'allocatable' with OpenMP 'target' 'map' clauses, subroutine in module,\n+! pass by reference.\n+\n+! See also '../libgomp.oacc-fortran/allocatable-1-2.f90'.\n+\n+! { dg-do run }\n+! { dg-additional-options \"-cpp\" }\n+! { dg-additional-options \"-DMEM_SHARED\" { target offload_device_shared_as } }\n+\n+module m\n+contains\n+  subroutine r (a, b, c, d, e)\n+    implicit none\n+    integer, allocatable :: a, b, c, d, e\n+\n+    !$omp target map(to: a) map(tofrom: b, c, d) map(from: e)\n+\n+    if (.not. allocated (a)) stop 1\n+    if (a .ne. 11) stop 2\n+    a = 33\n+\n+    if (.not. allocated (b)) stop 3\n+    if (b .ne. 25) stop 4\n+\n+    if (.not. allocated (c)) stop 5\n+    if (c .ne. 52) stop 6\n+    c = 10\n+\n+    if (allocated (d)) stop 7\n+    d = 42 ! Implicit allocation, but on device only.\n+    if (.not. allocated (d)) stop 8\n+    deallocate (d) ! OpenMP requires must be \"unallocated upon exit from the region\".\n+\n+    if (allocated (e)) stop 9\n+    e = 24 ! Implicit allocation, but on device only.\n+    if (.not. allocated (e)) stop 10\n+    deallocate (e) ! OpenMP requires must be \"unallocated upon exit from the region\".\n+\n+    !$omp end target\n+\n+  end subroutine r\n+end module m\n+\n+program main\n+  use m\n+  implicit none\n+  integer, allocatable :: a, b, c, d, e\n+\n+  allocate (a)\n+  a = 11\n+\n+  b = 25 ! Implicit allocation.\n+\n+  c = 52 ! Implicit allocation.\n+\n+  !No 'allocate (d)' here.\n+\n+  !No 'allocate (e)' here.\n+\n+  call r(a, b, c, d, e)\n+\n+  if (.not. allocated (a)) stop 20\n+#ifdef MEM_SHARED\n+  if (a .ne. 33) stop 21\n+#else\n+  if (a .ne. 11) stop 22\n+#endif\n+  deallocate (a)\n+\n+  if (.not. allocated (b)) stop 23\n+  if (b .ne. 25) stop 24\n+  deallocate (b)\n+\n+  if (.not. allocated (c)) stop 25\n+  if (c .ne. 10) stop 26\n+  deallocate (c)\n+\n+  if (allocated (d)) stop 27\n+\n+  if (allocated (e)) stop 28\n+\n+end program main"}, {"sha": "e5981312f1484f9742d741f0e41bb315a63e8135", "filename": "libgomp/testsuite/libgomp.oacc-fortran/allocatable-1-1.f90", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4017da8d1ccc205b51ad4dbfcb63b799ad9c9a51/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fallocatable-1-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4017da8d1ccc205b51ad4dbfcb63b799ad9c9a51/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fallocatable-1-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fallocatable-1-1.f90?ref=4017da8d1ccc205b51ad4dbfcb63b799ad9c9a51", "patch": "@@ -0,0 +1,68 @@\n+! Test 'allocatable' with OpenACC data clauses.\n+\n+! See also '../libgomp.fortran/target-allocatable-1-1.f90'.\n+\n+! { dg-do run }\n+! { dg-additional-options \"-cpp\" }\n+\n+program main\n+  implicit none\n+  integer, allocatable :: a, b, c, d, e\n+\n+  allocate (a)\n+  a = 11\n+\n+  b = 25 ! Implicit allocation.\n+\n+  c = 52 ! Implicit allocation.\n+\n+  !No 'allocate (d)' here.\n+\n+  !No 'allocate (e)' here.\n+\n+  !$acc parallel copyin(a) copy(b, c, d) copyout(e)\n+\n+  if (.not. allocated (a)) stop 1\n+  if (a .ne. 11) stop 2\n+  a = 33\n+\n+  if (.not. allocated (b)) stop 3\n+  if (b .ne. 25) stop 4\n+\n+  if (.not. allocated (c)) stop 5\n+  if (c .ne. 52) stop 6\n+  c = 10\n+\n+  if (allocated (d)) stop 7\n+  d = 42 ! Implicit allocation, but on device only.\n+  if (.not. allocated (d)) stop 8\n+  deallocate (d) ! OpenMP requires must be \"unallocated upon exit from the region\".\n+\n+  if (allocated (e)) stop 9\n+  e = 24 ! Implicit allocation, but on device only.\n+  if (.not. allocated (e)) stop 10\n+  deallocate (e) ! OpenMP requires must be \"unallocated upon exit from the region\".\n+\n+  !$acc end parallel\n+\n+  if (.not. allocated (a)) stop 20\n+#if ACC_MEM_SHARED\n+  if (a .ne. 33) stop 21\n+#else\n+  if (a .ne. 11) stop 22\n+#endif\n+  deallocate (a)\n+\n+  if (.not. allocated (b)) stop 23\n+  if (b .ne. 25) stop 24\n+  deallocate (b)\n+\n+  if (.not. allocated (c)) stop 25\n+  if (c .ne. 10) stop 26\n+  deallocate (c)\n+\n+  if (allocated (d)) stop 27\n+\n+  if (allocated (e)) stop 28\n+\n+end program main"}, {"sha": "2faf0f8078f02904b0c1fa2844db5acb629e5cb4", "filename": "libgomp/testsuite/libgomp.oacc-fortran/allocatable-1-2.f90", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4017da8d1ccc205b51ad4dbfcb63b799ad9c9a51/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fallocatable-1-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4017da8d1ccc205b51ad4dbfcb63b799ad9c9a51/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fallocatable-1-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fallocatable-1-2.f90?ref=4017da8d1ccc205b51ad4dbfcb63b799ad9c9a51", "patch": "@@ -0,0 +1,81 @@\n+! Test 'allocatable' with OpenACC data clauses, subroutine in module, pass by\n+! reference.\n+\n+! See also '../libgomp.fortran/target-allocatable-1-2.f90'.\n+\n+! { dg-do run }\n+! { dg-additional-options \"-cpp\" }\n+\n+module m\n+contains\n+  subroutine r (a, b, c, d, e)\n+    implicit none\n+    integer, allocatable :: a, b, c, d, e\n+\n+    !$acc parallel copyin(a) copy(b, c, d) copyout(e)\n+\n+    if (.not. allocated (a)) stop 1\n+    if (a .ne. 11) stop 2\n+    a = 33\n+\n+    if (.not. allocated (b)) stop 3\n+    if (b .ne. 25) stop 4\n+\n+    if (.not. allocated (c)) stop 5\n+    if (c .ne. 52) stop 6\n+    c = 10\n+\n+    if (allocated (d)) stop 7\n+    d = 42 ! Implicit allocation, but on device only.\n+    if (.not. allocated (d)) stop 8\n+    deallocate (d) ! OpenMP requires must be \"unallocated upon exit from the region\".\n+\n+    if (allocated (e)) stop 9\n+    e = 24 ! Implicit allocation, but on device only.\n+    if (.not. allocated (e)) stop 10\n+    deallocate (e) ! OpenMP requires must be \"unallocated upon exit from the region\".\n+\n+    !$acc end parallel\n+\n+  end subroutine r\n+end module m\n+\n+program main\n+  use m\n+  implicit none\n+  integer, allocatable :: a, b, c, d, e\n+\n+  allocate (a)\n+  a = 11\n+\n+  b = 25 ! Implicit allocation.\n+\n+  c = 52 ! Implicit allocation.\n+\n+  !No 'allocate (d)' here.\n+\n+  !No 'allocate (e)' here.\n+\n+  call r(a, b, c, d, e)\n+\n+  if (.not. allocated (a)) stop 20\n+#if ACC_MEM_SHARED\n+  if (a .ne. 33) stop 21\n+#else\n+  if (a .ne. 11) stop 22\n+#endif\n+  deallocate (a)\n+\n+  if (.not. allocated (b)) stop 23\n+  if (b .ne. 25) stop 24\n+  deallocate (b)\n+\n+  if (.not. allocated (c)) stop 25\n+  if (c .ne. 10) stop 26\n+  deallocate (c)\n+\n+  if (allocated (d)) stop 27\n+\n+  if (allocated (e)) stop 28\n+\n+end program main"}]}