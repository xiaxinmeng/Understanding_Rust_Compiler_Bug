{"sha": "837c4b78f697de3a047f6e6dba919c02fd769809", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM3YzRiNzhmNjk3ZGUzYTA0N2Y2ZTZkYmE5MTljMDJmZDc2OTgwOQ==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-10-21T11:31:55Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-10-21T11:31:55Z"}, "message": "re PR fortran/46060 ([F03] procedure pointer component referenced without argument list)\n\n2010-10-21  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/46060\n\t* match.h (gfc_matching_ptr_assignment): New global variable to indicate\n\twe're currently matching a (non-proc-)pointer assignment.\n\t* decl.c (match_pointer_init): Set it.\n\t* match.c (gfc_match_pointer_assignment): Ditto.\n\t* primary.c (matching_actual_arglist): New global variable to indicate\n\twe're currently matching an actual argument list.\n\t(gfc_match_actual_arglist): Set it.\n\t(gfc_match_varspec): Reject procedure pointer component calls with\n\tmissing argument list.\n\n\n2010-10-21  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/46060\n\t* gfortran.dg/proc_ptr_comp_25.f90: New.\n\nFrom-SVN: r165769", "tree": {"sha": "9476e2f4bdc3f2072057ad7def2aa663cf81b0a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9476e2f4bdc3f2072057ad7def2aa663cf81b0a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/837c4b78f697de3a047f6e6dba919c02fd769809", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/837c4b78f697de3a047f6e6dba919c02fd769809", "html_url": "https://github.com/Rust-GCC/gccrs/commit/837c4b78f697de3a047f6e6dba919c02fd769809", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/837c4b78f697de3a047f6e6dba919c02fd769809/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46241ea9d1ecf8a9b337bc6cbeb4f28421060f85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46241ea9d1ecf8a9b337bc6cbeb4f28421060f85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46241ea9d1ecf8a9b337bc6cbeb4f28421060f85"}], "stats": {"total": 68, "additions": 67, "deletions": 1}, "files": [{"sha": "5ade0ecf3342bb71b75db8f9b2e5211028962957", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837c4b78f697de3a047f6e6dba919c02fd769809/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837c4b78f697de3a047f6e6dba919c02fd769809/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=837c4b78f697de3a047f6e6dba919c02fd769809", "patch": "@@ -1,3 +1,16 @@\n+2010-10-21  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/46060\n+\t* match.h (gfc_matching_ptr_assignment): New global variable to indicate\n+\twe're currently matching a (non-proc-)pointer assignment.\n+\t* decl.c (match_pointer_init): Set it.\n+\t* match.c (gfc_match_pointer_assignment): Ditto.\n+\t* primary.c (matching_actual_arglist): New global variable to indicate\n+\twe're currently matching an actual argument list.\n+\t(gfc_match_actual_arglist): Set it.\n+\t(gfc_match_varspec): Reject procedure pointer component calls with\n+\tmissing argument list.\n+\n 2010-10-21  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/46067"}, {"sha": "009b010db2604092bb50841b0487dd9382d6bca4", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837c4b78f697de3a047f6e6dba919c02fd769809/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837c4b78f697de3a047f6e6dba919c02fd769809/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=837c4b78f697de3a047f6e6dba919c02fd769809", "patch": "@@ -1673,8 +1673,10 @@ match_pointer_init (gfc_expr **init, int procptr)\n     return m;\n \n   /* Match non-NULL initialization.  */\n+  gfc_matching_ptr_assignment = !procptr;\n   gfc_matching_procptr_assignment = procptr;\n   m = gfc_match_rvalue (init);\n+  gfc_matching_ptr_assignment = 0;\n   gfc_matching_procptr_assignment = 0;\n   if (m == MATCH_ERROR)\n     return MATCH_ERROR;"}, {"sha": "efde1a6c71b7c054bebb4edaaa100354177317f6", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837c4b78f697de3a047f6e6dba919c02fd769809/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837c4b78f697de3a047f6e6dba919c02fd769809/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=837c4b78f697de3a047f6e6dba919c02fd769809", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"match.h\"\n #include \"parse.h\"\n \n+int gfc_matching_ptr_assignment = 0;\n int gfc_matching_procptr_assignment = 0;\n bool gfc_matching_prefix = false;\n \n@@ -1331,6 +1332,7 @@ gfc_match_pointer_assignment (void)\n   old_loc = gfc_current_locus;\n \n   lvalue = rvalue = NULL;\n+  gfc_matching_ptr_assignment = 0;\n   gfc_matching_procptr_assignment = 0;\n \n   m = gfc_match (\" %v =>\", &lvalue);\n@@ -1343,8 +1345,11 @@ gfc_match_pointer_assignment (void)\n   if (lvalue->symtree->n.sym->attr.proc_pointer\n       || gfc_is_proc_ptr_comp (lvalue, NULL))\n     gfc_matching_procptr_assignment = 1;\n+  else\n+    gfc_matching_ptr_assignment = 1;\n \n   m = gfc_match (\" %e%t\", &rvalue);\n+  gfc_matching_ptr_assignment = 0;\n   gfc_matching_procptr_assignment = 0;\n   if (m != MATCH_YES)\n     goto cleanup;"}, {"sha": "69f1d9e607bf9f010e098239e37d9da8af09964d", "filename": "gcc/fortran/match.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837c4b78f697de3a047f6e6dba919c02fd769809/gcc%2Ffortran%2Fmatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837c4b78f697de3a047f6e6dba919c02fd769809/gcc%2Ffortran%2Fmatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.h?ref=837c4b78f697de3a047f6e6dba919c02fd769809", "patch": "@@ -31,6 +31,7 @@ extern gfc_symbol *gfc_new_block;\n    separate.  */\n extern gfc_st_label *gfc_statement_label;\n \n+extern int gfc_matching_ptr_assignment;\n extern int gfc_matching_procptr_assignment;\n extern bool gfc_matching_prefix;\n "}, {"sha": "9632d1c852393dc4c95c5bbb5552adca91af475d", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837c4b78f697de3a047f6e6dba919c02fd769809/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837c4b78f697de3a047f6e6dba919c02fd769809/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=837c4b78f697de3a047f6e6dba919c02fd769809", "patch": "@@ -28,6 +28,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"parse.h\"\n #include \"constructor.h\"\n \n+int matching_actual_arglist = 0;\n+\n /* Matches a kind-parameter expression, which is either a named\n    symbolic constant or a nonnegative integer constant.  If\n    successful, sets the kind value to the correct integer.  */\n@@ -1610,6 +1612,8 @@ gfc_match_actual_arglist (int sub_flag, gfc_actual_arglist **argp)\n     return MATCH_YES;\n   head = NULL;\n \n+  matching_actual_arglist++;\n+\n   for (;;)\n     {\n       if (head == NULL)\n@@ -1684,6 +1688,7 @@ gfc_match_actual_arglist (int sub_flag, gfc_actual_arglist **argp)\n     }\n \n   *argp = head;\n+  matching_actual_arglist--;\n   return MATCH_YES;\n \n syntax:\n@@ -1692,7 +1697,7 @@ gfc_match_actual_arglist (int sub_flag, gfc_actual_arglist **argp)\n cleanup:\n   gfc_free_actual_arglist (head);\n   gfc_current_locus = old_loc;\n-\n+  matching_actual_arglist--;\n   return MATCH_ERROR;\n }\n \n@@ -1883,10 +1888,20 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,\n       if (component->attr.proc_pointer && ppc_arg\n \t  && !gfc_matching_procptr_assignment)\n \t{\n+\t  /* Procedure pointer component call: Look for argument list.  */\n \t  m = gfc_match_actual_arglist (sub_flag,\n \t\t\t\t\t&primary->value.compcall.actual);\n \t  if (m == MATCH_ERROR)\n \t    return MATCH_ERROR;\n+\n+\t  if (m == MATCH_NO && !gfc_matching_ptr_assignment\n+\t      && !matching_actual_arglist)\n+\t    {\n+\t      gfc_error (\"Procedure pointer component '%s' requires an \"\n+\t\t\t \"argument list at %C\", component->name);\n+\t      return MATCH_ERROR;\n+\t    }\n+\n \t  if (m == MATCH_YES)\n \t    primary->expr_type = EXPR_PPC;\n "}, {"sha": "51877d1454582542629935674df09ba990bf4e84", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837c4b78f697de3a047f6e6dba919c02fd769809/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837c4b78f697de3a047f6e6dba919c02fd769809/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=837c4b78f697de3a047f6e6dba919c02fd769809", "patch": "@@ -1,3 +1,8 @@\n+2010-10-21  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/46060\n+\t* gfortran.dg/proc_ptr_comp_25.f90: New.\n+\n 2010-10-21  Richard Guenther  <rguenther@suse.de>\n \tMichael Matz  <matz@suse.de>\n "}, {"sha": "68355262979d923c2c3fc02c5e4a3f0e05356ecc", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_comp_25.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837c4b78f697de3a047f6e6dba919c02fd769809/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_25.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837c4b78f697de3a047f6e6dba919c02fd769809/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_25.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_25.f90?ref=837c4b78f697de3a047f6e6dba919c02fd769809", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do compile }\n+!\n+! PR 46060: [F03] procedure pointer component referenced without argument list\n+!\n+! Contributed by Stephen J. Bespalko <sjbespa@comcast.net>\n+\n+implicit none\n+\n+abstract interface\n+  function name_func (ivar) result (res)\n+    integer, intent(in) :: ivar\n+    character(len=8) :: res\n+  end function name_func\n+end interface\n+\n+type var_type\n+  procedure(name_func), nopass, pointer :: name\n+end type var_type\n+\n+type(var_type) :: vars\n+character(len=8) name\n+\n+name = vars%name   ! { dg-error \"requires an argument list\" }\n+\n+end"}]}