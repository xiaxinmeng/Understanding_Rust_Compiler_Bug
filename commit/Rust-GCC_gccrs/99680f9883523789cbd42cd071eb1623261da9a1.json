{"sha": "99680f9883523789cbd42cd071eb1623261da9a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk2ODBmOTg4MzUyMzc4OWNiZDQyY2QwNzFlYjE2MjMyNjFkYTlhMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-08T21:10:16Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-08T21:10:16Z"}, "message": "arc-protos.h (arc_va_arg): Remove.\n\n        * config/arc/arc-protos.h (arc_va_arg): Remove.\n        * config/arc/arc.c (TARGET_GIMPLIFY_VA_ARG_EXPR): New.\n        (arc_gimplify_va_arg_expr): Rewrite from arc_va_arg.\n        * config/arc/arc.h (EXPAND_BUILTIN_VA_ARG): Remove.\n\nFrom-SVN: r84313", "tree": {"sha": "be5dad71aebec4ddf679f34c9e8b1e0b5e4af912", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be5dad71aebec4ddf679f34c9e8b1e0b5e4af912"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99680f9883523789cbd42cd071eb1623261da9a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99680f9883523789cbd42cd071eb1623261da9a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99680f9883523789cbd42cd071eb1623261da9a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99680f9883523789cbd42cd071eb1623261da9a1/comments", "author": null, "committer": null, "parents": [{"sha": "b714a4192e2ec903b99d1d8a7c664fab099f4908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b714a4192e2ec903b99d1d8a7c664fab099f4908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b714a4192e2ec903b99d1d8a7c664fab099f4908"}], "stats": {"total": 88, "additions": 14, "deletions": 74}, "files": [{"sha": "224dd725cfa963f66f9c381c7592bb51c7a7d6c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99680f9883523789cbd42cd071eb1623261da9a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99680f9883523789cbd42cd071eb1623261da9a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99680f9883523789cbd42cd071eb1623261da9a1", "patch": "@@ -1,5 +1,10 @@\n 2004-07-08  Richard Henderson  <rth@redhat.com>\n \n+\t* config/arc/arc-protos.h (arc_va_arg): Remove.\n+\t* config/arc/arc.c (TARGET_GIMPLIFY_VA_ARG_EXPR): New.\n+\t(arc_gimplify_va_arg_expr): Rewrite from arc_va_arg.\n+\t* config/arc/arc.h (EXPAND_BUILTIN_VA_ARG): Remove.\n+\n \t* config/c4x/c4x-protos.h (c4x_va_arg): Remove.\n \t* config/c4x/c4x.c (TARGET_GIMPLIFY_VA_ARG_EXPR): New.\n \t(c4x_gimplify_va_arg_expr): Rewrite from c4x_va_arg."}, {"sha": "347d2bc3126275eae26c8440265e55f490e75f2e", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99680f9883523789cbd42cd071eb1623261da9a1/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99680f9883523789cbd42cd071eb1623261da9a1/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=99680f9883523789cbd42cd071eb1623261da9a1", "patch": "@@ -18,11 +18,7 @@ along with GCC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#ifdef RTX_CODE\n-#ifdef TREE_CODE\n extern void arc_va_start (tree, rtx);\n-extern rtx arc_va_arg (tree, tree);\n-#endif /* TREE_CODE */\n \n extern enum machine_mode arc_select_cc_mode (enum rtx_code, rtx, rtx);\n \n@@ -55,11 +51,8 @@ extern int const_sint32_operand (rtx, enum machine_mode);\n extern int const_uint32_operand (rtx, enum machine_mode);\n extern int proper_comparison_operator (rtx, enum machine_mode);\n extern int shift_operator (rtx, enum machine_mode);\n-#endif /* RTX_CODE */\n \n-#ifdef TREE_CODE\n extern enum arc_function_type arc_compute_function_type (tree);\n-#endif /* TREE_CODE */\n \n \n extern void arc_init (void);\n@@ -71,4 +64,3 @@ extern void arc_finalize_pic (void);\n extern void arc_ccfsm_at_label (const char *, int);\n extern int arc_ccfsm_branch_deleted_p (void);\n extern void arc_ccfsm_record_branch_deleted (void);\n-"}, {"sha": "ec2520d67626452646448e3e24436b96685f32dd", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 9, "deletions": 62, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99680f9883523789cbd42cd071eb1623261da9a1/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99680f9883523789cbd42cd071eb1623261da9a1/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=99680f9883523789cbd42cd071eb1623261da9a1", "patch": "@@ -102,6 +102,7 @@ static bool arc_rtx_costs (rtx, int, int, int *);\n static int arc_address_cost (rtx);\n static void arc_external_libcall (rtx);\n static bool arc_return_in_memory (tree, tree);\n+static tree arc_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -141,6 +142,8 @@ static bool arc_return_in_memory (tree, tree);\n \n #undef TARGET_SETUP_INCOMING_VARARGS\n #define TARGET_SETUP_INCOMING_VARARGS arc_setup_incoming_varargs\n+#undef TARGET_GIMPLIFY_VA_ARG_EXPR\n+#define TARGET_GIMPLIFY_VA_ARG_EXPR arc_gimplify_va_arg_expr\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -2289,76 +2292,20 @@ arc_va_start (tree valist, rtx nextarg)\n   std_expand_builtin_va_start (valist, nextarg);\n }\n \n-rtx\n-arc_va_arg (tree valist, tree type)\n+static tree\n+arc_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n {\n-  rtx addr_rtx;\n-  tree addr, incr;\n-  tree type_ptr = build_pointer_type (type);\n-\n   /* All aggregates are passed by reference.  All scalar types larger\n      than 8 bytes are passed by reference.  */\n \n   if (AGGREGATE_TYPE_P (type) || int_size_in_bytes (type) > 8)\n     {\n-      tree type_ptr_ptr = build_pointer_type (type_ptr);\n-\n-      addr = build (INDIRECT_REF, type_ptr,\n-\t\t    build (NOP_EXPR, type_ptr_ptr, valist));\n-\n-      incr = build (PLUS_EXPR, TREE_TYPE (valist),\n-\t\t    valist, build_int_2 (UNITS_PER_WORD, 0));\n+      tree type_ptr = build_pointer_type (type);\n+      tree addr = std_gimplify_va_arg_expr (valist, type_ptr, pre_p, post_p);\n+      return build_fold_indirect_ref (addr);\n     }\n-  else\n-    {\n-      HOST_WIDE_INT align, rounded_size;\n-\n-      /* Compute the rounded size of the type.  */\n-      align = PARM_BOUNDARY / BITS_PER_UNIT;\n-      rounded_size = (((TREE_INT_CST_LOW (TYPE_SIZE (type)) / BITS_PER_UNIT\n-\t\t\t+ align - 1) / align) * align);\n-\n-      /* Align 8 byte operands.  */\n-      addr = valist;\n-      if (TYPE_ALIGN (type) > BITS_PER_WORD)\n-\t{\n-\t  /* AP = (TYPE *)(((int)AP + 7) & -8)  */\n-\n-\t  addr = build (NOP_EXPR, integer_type_node, valist);\n-\t  addr = fold (build (PLUS_EXPR, integer_type_node, addr,\n-\t\t\t      build_int_2 (7, 0)));\n-\t  addr = fold (build (BIT_AND_EXPR, integer_type_node, addr,\n-\t\t\t      build_int_2 (-8, 0)));\n-\t  addr = fold (build (NOP_EXPR, TREE_TYPE (valist), addr));\n-\t}\n-\n-      /* The increment is always rounded_size past the aligned pointer.  */\n-      incr = fold (build (PLUS_EXPR, TREE_TYPE (addr), addr,\n-\t\t\t  build_int_2 (rounded_size, 0)));\n-\n-      /* Adjust the pointer in big-endian mode.  */\n-      if (BYTES_BIG_ENDIAN)\n-\t{\n-\t  HOST_WIDE_INT adj;\n-\t  adj = TREE_INT_CST_LOW (TYPE_SIZE (type)) / BITS_PER_UNIT;\n-\t  if (rounded_size > align)\n-\t    adj = rounded_size;\n-\n-\t  addr = fold (build (PLUS_EXPR, TREE_TYPE (addr), addr,\n-\t\t\t      build_int_2 (rounded_size - adj, 0)));\n-\t}\n-    }\n-\n-  /* Evaluate the data address.  */\n-  addr_rtx = expand_expr (addr, NULL_RTX, Pmode, EXPAND_NORMAL);\n-  addr_rtx = copy_to_reg (addr_rtx);\n-  \n-  /* Compute new value for AP.  */\n-  incr = build (MODIFY_EXPR, TREE_TYPE (valist), valist, incr);\n-  TREE_SIDE_EFFECTS (incr) = 1;\n-  expand_expr (incr, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n-  return addr_rtx;\n+  return std_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n }\n \n /* This is how to output a definition of an internal numbered label where"}, {"sha": "55cb8f4c0d938e9e5d30cb2ee411a34cf98eb527", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99680f9883523789cbd42cd071eb1623261da9a1/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99680f9883523789cbd42cd071eb1623261da9a1/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=99680f9883523789cbd42cd071eb1623261da9a1", "patch": "@@ -1217,7 +1217,3 @@ enum arc_function_type {\n /* Implement `va_start' for varargs and stdarg.  */\n #define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n   arc_va_start (valist, nextarg)\n-\n-/* Implement `va_arg'.  */\n-#define EXPAND_BUILTIN_VA_ARG(valist, type) \\\n-  arc_va_arg (valist, type)"}]}