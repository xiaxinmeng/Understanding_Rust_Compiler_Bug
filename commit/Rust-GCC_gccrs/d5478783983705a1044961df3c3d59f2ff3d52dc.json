{"sha": "d5478783983705a1044961df3c3d59f2ff3d52dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU0Nzg3ODM5ODM3MDVhMTA0NDk2MWRmM2MzZDU5ZjJmZjNkNTJkYw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-11-10T22:35:13Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-11-10T22:35:13Z"}, "message": "common.opt (flag_excess_precision_cmdline, [...]): New Variable declarations.\n\n\t* common.opt (flag_excess_precision_cmdline, flag_generate_lto,\n\twarn_larger_than, larger_than_size, warn_frame_larger_than,\n\tframe_larger_than_size, flag_gen_aux_info, flag_shlib,\n\tdefault_visibility, flag_tls_default): New Variable declarations.\n\t(aux-info, auxbase, dumpbase, dumpdir, falign-functions=,\n\tfalign-jumps=, falign-labels=, falign-loops=, o, v): Use Var.\n\t(v): Declare as Common and document here.\n\t* flags.h (default_visibility, flag_generate_lto,\n\twarn_larger_than, larger_than_size, warn_frame_larger_than,\n\tframe_larger_than_size, flag_gen_aux_info, flag_pedantic_errors,\n\tflag_shlib, flag_excess_precision_cmdline): Remove.\n\t(set_Wstrict_aliasing): Update prototype.\n\t* gcc.c (verbose_flag): Remove.\n\t(driver_handle_option): Add diagnostic_context parameter.  Don't\n\thandle OPT_v explicitly here.  Set verbose_flag to 1 rather than\n\tincrementing it.\n\t* opts-common.c (handle_option): Pass dc to handler.\n\t* opts.c (warn_larger_than, larger_than_size,\n\twarn_frame_larger_than, frame_larger_than_size,\n\tdefault_visibility): Remove.\n\t(common_handle_option): Add diagnostic_context parameter.\n\t(set_fast_math_flags, set_unsafe_math_optimizations_flags): Add\n\tgcc_options parameters.\n\t(lang_handle_option, target_handle_option, read_cmdline_options,\n\tdecode_options): Add diagnostic_context parameters.\n\t(finish_options): Access option state through opts pointer where\n\tpossible.\n\t(common_handle_option): Access option state through opts pointer\n\twhere possible.  Do not set local static variable verbose.  Do not\n\texplicitly handle OPT_v, OPT_Wstrict_aliasing_,\n\tOPT_Wstrict_overflow_, OPT_Wunused, OPT_auxbase, OPT_dumpbase,\n\tOPT_dumpdir, OPT_falign_functions_, OPT_falign_jumps_,\n\tOPT_falign_labels_, OPT_falign_loops_, OPT_fira_verbose_, OPT_o or\n\tOPT_fwhopr_.  Do not explicitly set .opt file variables for\n\tOPT_aux_info or OPT_pedantic_errors.  Use dc for diagnostic\n\tcontext.\n\t(set_Wstrict_aliasing): Add gcc_options parameter.\n\t* opts.h (struct cl_option_handler_func): Add diagnostic_context\n\tparameter to handler.\n\t(decode_options): Add diagnostic_context parameter.\n\t* toplev.c (dump_base_name, dump_dir_name, aux_base_name,\n\tasm_file_name, flag_generate_lto, flag_gen_aux_info,\n\taux_info_file_name, flag_shlib, flag_tls_default,\n\tflag_excess_precision_cmdline, flag_pedantic_errors): Remove.\n\t(toplev_main): Pass global_dc to decode_options.\n\t* toplev.h (dump_base_name, dump_dir_name, aux_base_name,\n\taux_info_file_name, asm_file_name): Remove.\n\t* tree.h (flag_tls_default): Remove.\n\nc-family:\n\t* c-common.c (parse_optimize_options): Pass global_dc to\n\tdecode_options.\n\t* c-opts.c (c_common_handle_option): Pass &global_options to\n\tset_Wstrict_aliasing.\n\t* c.opt (v): Don't mark Common or document here.\n\nfortran:\n\t* cpp.c (asm_file_name): Don't declare here.\n\nobjc:\n\t* objc-act.c (dump_base_name): Don't declare here.\n\nFrom-SVN: r166565", "tree": {"sha": "f57929816077a497be812af640de16726bdb0e24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f57929816077a497be812af640de16726bdb0e24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5478783983705a1044961df3c3d59f2ff3d52dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5478783983705a1044961df3c3d59f2ff3d52dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5478783983705a1044961df3c3d59f2ff3d52dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5478783983705a1044961df3c3d59f2ff3d52dc/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e7a6ed68c18117b0b248bccd932b5a477d2f8c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e7a6ed68c18117b0b248bccd932b5a477d2f8c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e7a6ed68c18117b0b248bccd932b5a477d2f8c2"}], "stats": {"total": 700, "additions": 324, "deletions": 376}, "files": [{"sha": "bd6c0d776d02b51a1b6f6c706a7721a82f9d7a12", "filename": "gcc/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5478783983705a1044961df3c3d59f2ff3d52dc", "patch": "@@ -1,3 +1,54 @@\n+2010-11-10  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* common.opt (flag_excess_precision_cmdline, flag_generate_lto,\n+\twarn_larger_than, larger_than_size, warn_frame_larger_than,\n+\tframe_larger_than_size, flag_gen_aux_info, flag_shlib,\n+\tdefault_visibility, flag_tls_default): New Variable declarations.\n+\t(aux-info, auxbase, dumpbase, dumpdir, falign-functions=,\n+\tfalign-jumps=, falign-labels=, falign-loops=, o, v): Use Var.\n+\t(v): Declare as Common and document here.\n+\t* flags.h (default_visibility, flag_generate_lto,\n+\twarn_larger_than, larger_than_size, warn_frame_larger_than,\n+\tframe_larger_than_size, flag_gen_aux_info, flag_pedantic_errors,\n+\tflag_shlib, flag_excess_precision_cmdline): Remove.\n+\t(set_Wstrict_aliasing): Update prototype.\n+\t* gcc.c (verbose_flag): Remove.\n+\t(driver_handle_option): Add diagnostic_context parameter.  Don't\n+\thandle OPT_v explicitly here.  Set verbose_flag to 1 rather than\n+\tincrementing it.\n+\t* opts-common.c (handle_option): Pass dc to handler.\n+\t* opts.c (warn_larger_than, larger_than_size,\n+\twarn_frame_larger_than, frame_larger_than_size,\n+\tdefault_visibility): Remove.\n+\t(common_handle_option): Add diagnostic_context parameter.\n+\t(set_fast_math_flags, set_unsafe_math_optimizations_flags): Add\n+\tgcc_options parameters.\n+\t(lang_handle_option, target_handle_option, read_cmdline_options,\n+\tdecode_options): Add diagnostic_context parameters.\n+\t(finish_options): Access option state through opts pointer where\n+\tpossible.\n+\t(common_handle_option): Access option state through opts pointer\n+\twhere possible.  Do not set local static variable verbose.  Do not\n+\texplicitly handle OPT_v, OPT_Wstrict_aliasing_,\n+\tOPT_Wstrict_overflow_, OPT_Wunused, OPT_auxbase, OPT_dumpbase,\n+\tOPT_dumpdir, OPT_falign_functions_, OPT_falign_jumps_,\n+\tOPT_falign_labels_, OPT_falign_loops_, OPT_fira_verbose_, OPT_o or\n+\tOPT_fwhopr_.  Do not explicitly set .opt file variables for\n+\tOPT_aux_info or OPT_pedantic_errors.  Use dc for diagnostic\n+\tcontext.\n+\t(set_Wstrict_aliasing): Add gcc_options parameter.\n+\t* opts.h (struct cl_option_handler_func): Add diagnostic_context\n+\tparameter to handler.\n+\t(decode_options): Add diagnostic_context parameter.\n+\t* toplev.c (dump_base_name, dump_dir_name, aux_base_name,\n+\tasm_file_name, flag_generate_lto, flag_gen_aux_info,\n+\taux_info_file_name, flag_shlib, flag_tls_default,\n+\tflag_excess_precision_cmdline, flag_pedantic_errors): Remove.\n+\t(toplev_main): Pass global_dc to decode_options.\n+\t* toplev.h (dump_base_name, dump_dir_name, aux_base_name,\n+\taux_info_file_name, asm_file_name): Remove.\n+\t* tree.h (flag_tls_default): Remove.\n+\n 2010-11-10  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/sparc/sparc.c (sparc_delegitimize_address): New function."}, {"sha": "aa5539f952648e40501d2366f7aff6a8c416d82f", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=d5478783983705a1044961df3c3d59f2ff3d52dc", "patch": "@@ -1,3 +1,11 @@\n+2010-11-10  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.c (parse_optimize_options): Pass global_dc to\n+\tdecode_options.\n+\t* c-opts.c (c_common_handle_option): Pass &global_options to\n+\tset_Wstrict_aliasing.\n+\t* c.opt (v): Don't mark Common or document here.\n+\n 2010-11-06  Iain Sandoe  <iains@gcc.gnu.org>\n \n \tPR target/44981"}, {"sha": "d4b5da1128a01a26e68638a7779235462bd1ae4a", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=d5478783983705a1044961df3c3d59f2ff3d52dc", "patch": "@@ -7804,7 +7804,7 @@ parse_optimize_options (tree args, bool attr_p)\n \t\t\t\t\t\t&decoded_options,\n \t\t\t\t\t\t&decoded_options_count);\n   decode_options (&global_options, &global_options_set,\n-\t\t  decoded_options, decoded_options_count);\n+\t\t  decoded_options, decoded_options_count, global_dc);\n \n   targetm.override_options_after_change();\n "}, {"sha": "dc5c777d3e972ca853beef9861014b4740d15c04", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=d5478783983705a1044961df3c3d59f2ff3d52dc", "patch": "@@ -451,7 +451,7 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       warn_sequence_point = value;\t/* Was C only.  */\n       warn_switch = value;\n       if (warn_strict_aliasing == -1)\n-\tset_Wstrict_aliasing (value);\n+\tset_Wstrict_aliasing (&global_options, value);\n       warn_address = value;\n       if (warn_strict_overflow == -1)\n \twarn_strict_overflow = value;"}, {"sha": "b25ecd6789a58f43e3f260c2ce78e2bba7f1a191", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=d5478783983705a1044961df3c3d59f2ff3d52dc", "patch": "@@ -1213,8 +1213,8 @@ C ObjC C++ ObjC++ Var(flag_undef)\n Do not predefine system-specific and GCC-specific macros\n \n v\n-Common C ObjC C++ ObjC++\n-Enable verbose output\n+C ObjC C++ ObjC++\n+; Documented in common.opt\n \n w\n C ObjC C++ ObjC++"}, {"sha": "71f45783b80a3bdaa6a6494f77e6c5b757772e5b", "filename": "gcc/common.opt", "status": "modified", "additions": 55, "deletions": 11, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=d5478783983705a1044961df3c3d59f2ff3d52dc", "patch": "@@ -62,6 +62,49 @@ int *param_values\n Variable\n enum fp_contract_mode flag_fp_contract_mode = FP_CONTRACT_FAST\n \n+; The excess precision specified on the command line, or defaulted by\n+; the front end.\n+Variable\n+enum excess_precision flag_excess_precision_cmdline = EXCESS_PRECISION_DEFAULT\n+\n+; Nonzero if we should write GIMPLE bytecode for link-time optimization.\n+Variable\n+int flag_generate_lto\n+\n+; True to warn about any objects definitions whose size is larger\n+; than N bytes.  Also want about function definitions whose returned\n+; values are larger than N bytes, where N is 'larger_than_size'.\n+Variable\n+bool warn_larger_than\n+\n+Variable\n+HOST_WIDE_INT larger_than_size\n+\n+; True to warn about any function whose frame size is larger\n+; than N bytes.\n+Variable\n+bool warn_frame_larger_than\n+\n+Variable\n+HOST_WIDE_INT frame_larger_than_size\n+\n+; Nonzero means we should be saving declaration info into a .X file.\n+Variable\n+int flag_gen_aux_info = 0\n+\n+; Nonzero if we are compiling code for a shared library, zero for\n+; executable.\n+Variable\n+int flag_shlib\n+\n+; The default visibility for all symbols (unless overridden).\n+Variable\n+enum symbol_visibility default_visibility = VISIBILITY_DEFAULT\n+\n+; Set to the default thread-local storage (tls) model to use.\n+Variable\n+enum tls_model flag_tls_default = TLS_MODEL_GLOBAL_DYNAMIC\n+\n ###\n Driver\n \n@@ -522,14 +565,14 @@ Xpreprocessor\n Driver Separate\n \n aux-info\n-Common Separate\n+Common Separate Var(aux_info_file_name)\n -aux-info <file>\tEmit declaration information into <file>\n \n aux-info=\n Common Joined Alias(aux-info)\n \n auxbase\n-Common Separate RejectDriver\n+Common Separate RejectDriver Var(aux_base_name)\n \n auxbase-strip\n Common Separate RejectDriver\n@@ -545,11 +588,11 @@ Common Joined\n -d<letters>\tEnable dumps from specific passes of the compiler\n \n dumpbase\n-Common Separate\n+Common Separate Var(dump_base_name)\n -dumpbase <file>\tSet the file basename to be used for dumps\n \n dumpdir\n-Common Separate\n+Common Separate Var(dump_dir_name)\n -dumpdir <dir>\tSet the directory name to be used for dumps\n \n dumpmachine\n@@ -591,28 +634,28 @@ Common Report Var(align_functions,0) Optimization UInteger\n Align the start of functions\n \n falign-functions=\n-Common RejectNegative Joined UInteger\n+Common RejectNegative Joined UInteger Var(align_functions)\n \n falign-jumps\n Common Report Var(align_jumps,0) Optimization UInteger\n Align labels which are only reached by jumping\n \n falign-jumps=\n-Common RejectNegative Joined UInteger\n+Common RejectNegative Joined UInteger Var(align_jumps)\n \n falign-labels\n Common Report Var(align_labels,0) Optimization UInteger\n Align all labels\n \n falign-labels=\n-Common RejectNegative Joined UInteger\n+Common RejectNegative Joined UInteger Var(align_labels)\n \n falign-loops\n Common Report Var(align_loops,0) Optimization UInteger\n Align the start of loops\n \n falign-loops=\n-Common RejectNegative Joined UInteger\n+Common RejectNegative Joined UInteger Var(align_loops)\n \n fargument-alias\n Common Ignore\n@@ -1928,7 +1971,7 @@ nostdlib\n Driver\n \n o\n-Common Driver Joined Separate MissingArgError(missing filename after %qs)\n+Common Driver Joined Separate Var(asm_file_name) MissingArgError(missing filename after %qs)\n -o <file>\tPlace output into <file>\n \n p\n@@ -1943,7 +1986,7 @@ Common Var(pedantic)\n Issue warnings needed for strict compliance to the standard\n \n pedantic-errors\n-Common\n+Common Var(flag_pedantic_errors)\n Like -pedantic but issue them as errors\n \n pg\n@@ -2003,7 +2046,8 @@ Driver\n ; C option, but driver must not handle as \"-u ndef\".\n \n v\n-Driver\n+Common Driver Var(verbose_flag)\n+Enable verbose output\n \n version\n Common Var(version_flag) RejectDriver"}, {"sha": "7aa9ff14be3b1606565629e4ae95a3da2de07531", "filename": "gcc/flags.h", "status": "modified", "additions": 3, "deletions": 41, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=d5478783983705a1044961df3c3d59f2ff3d52dc", "patch": "@@ -49,9 +49,6 @@ extern bool use_gnu_debug_info_extensions;\n    an actual variable not a macro.  */\n extern int flag_compare_debug;\n \n-/* The default visibility for all symbols (unless overridden).  */\n-extern enum symbol_visibility default_visibility;\n-\n /* Global visibility options.  */\n extern struct visibility_flags visibility_options;\n \n@@ -62,31 +59,14 @@ extern struct visibility_flags visibility_options;\n \n extern bool in_lto_p;\n \n-/* Nonzero if we should write GIMPLE bytecode for link-time optimization.  */\n-\n-extern int flag_generate_lto;\n-\n-/* Used to set the level of -Wstrict-aliasing, when no level is specified.\n-   The external way to set the default level is to use\n+/* Used to set the level of -Wstrict-aliasing in OPTS, when no level\n+   is specified.  The external way to set the default level is to use\n    -Wstrict-aliasing=level.\n    ONOFF is assumed to take value 1 when -Wstrict-aliasing is specified,\n    and 0 otherwise.  After calling this function, wstrict_aliasing will be\n    set to the default value of -Wstrict_aliasing=level.  */\n \n-extern void set_Wstrict_aliasing (int onoff);\n-\n-/* Nonzero means warn about any objects definitions whose size is larger\n-   than N bytes.  Also want about function definitions whose returned\n-   values are larger than N bytes. The value N is in `larger_than_size'.  */\n-\n-extern bool warn_larger_than;\n-extern HOST_WIDE_INT larger_than_size;\n-\n-/* Nonzero means warn about any function whose frame size is larger\n-   than N bytes. */\n-\n-extern bool warn_frame_larger_than;\n-extern HOST_WIDE_INT frame_larger_than_size;\n+extern void set_Wstrict_aliasing (struct gcc_options *opts, int onoff);\n \n /* Nonzero for -dp: annotate the assembly with a comment describing the\n    pattern and alternative used.  */\n@@ -99,28 +79,14 @@ extern int flag_print_asm_name;\n \n extern int rtl_dump_and_exit;\n \n-/* Nonzero means we should save auxiliary info into a .X file.  */\n-\n-extern int flag_gen_aux_info;\n-\n /* True if printing into -fdump-final-insns= dump.  */\n \n extern bool final_insns_dump_p;\n \n-/* Nonzero means change certain warnings into errors.\n-   Usually these are warnings about failure to conform to some standard.  */\n-\n-extern int flag_pedantic_errors;\n-\n /* Nonzero means make permerror produce warnings instead of errors.  */\n \n extern int flag_permissive;\n \n-/* Nonzero if we are compiling code for a shared library, zero for\n-   executable.  */\n-\n-extern int flag_shlib;\n-\n /* -dA causes debug information to be produced in\n    the generated assembly code (to make it more readable).  This option\n    is generally only of use to those who actually need to read the\n@@ -135,10 +101,6 @@ extern int flag_debug_asm;\n extern int flag_next_runtime;\n \n extern int flag_dump_rtl_in_asm;\n-\n-/* The excess precision specified on the command line, or defaulted by\n-   the front end.  */\n-extern enum excess_precision flag_excess_precision_cmdline;\n \f\n /* Other basic status info about current function.  */\n "}, {"sha": "48a2e4f77c4be9d95a21e9a0a6b3336e43ebb1ce", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d5478783983705a1044961df3c3d59f2ff3d52dc", "patch": "@@ -1,3 +1,7 @@\n+2010-11-10  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* cpp.c (asm_file_name): Don't declare here.\n+\n 2010-11-10  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/46411"}, {"sha": "4c1307c84968bb80f82a94d7392564d15089b990", "filename": "gcc/fortran/cpp.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Ffortran%2Fcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Ffortran%2Fcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcpp.c?ref=d5478783983705a1044961df3c3d59f2ff3d52dc", "patch": "@@ -115,12 +115,6 @@ gfc_cpp_option;\n static cpp_options *cpp_option = NULL;\n static cpp_reader *cpp_in = NULL;\n \n-/* Defined in toplev.c.  */\n-extern const char *asm_file_name;\n-\n-\n-\n-\n /* Encapsulates state used to convert a stream of cpp-tokens into\n    a text file.  */\n static struct"}, {"sha": "5884f381772e038c5db239b9a09cd9d26779d517", "filename": "gcc/gcc.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=d5478783983705a1044961df3c3d59f2ff3d52dc", "patch": "@@ -114,10 +114,6 @@ static int print_help_list;\n \n static int print_version;\n \n-/* Flag indicating whether we should print the command and arguments */\n-\n-static int verbose_flag;\n-\n /* Flag indicating whether we should ONLY print the command and\n    arguments (like verbose_flag) without executing the command.\n    Displayed arguments are quoted so that the generated command\n@@ -3145,7 +3141,8 @@ driver_handle_option (struct gcc_options *opts,\n \t\t      struct gcc_options *opts_set,\n \t\t      const struct cl_decoded_option *decoded,\n \t\t      unsigned int lang_mask ATTRIBUTE_UNUSED, int kind,\n-\t\t      const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED)\n+\t\t      const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED,\n+\t\t      diagnostic_context *dc)\n {\n   size_t opt_index = decoded->opt_index;\n   const char *arg = decoded->arg;\n@@ -3157,6 +3154,7 @@ driver_handle_option (struct gcc_options *opts,\n   gcc_assert (opts == &global_options);\n   gcc_assert (opts_set == &global_options_set);\n   gcc_assert (kind == DK_UNSPECIFIED);\n+  gcc_assert (dc == global_dc);\n \n   switch (opt_index)\n     {\n@@ -3421,7 +3419,7 @@ driver_handle_option (struct gcc_options *opts,\n \t is intended for use in shell scripts to capture the\n \t driver-generated command line.  */\n       verbose_only_flag++;\n-      verbose_flag++;\n+      verbose_flag = 1;\n       do_save = false;\n       break;\n \n@@ -3456,10 +3454,6 @@ driver_handle_option (struct gcc_options *opts,\n       validated = true;\n       break;\n \n-    case OPT_v:\t/* Print our subcommands and print versions.  */\n-      verbose_flag++;\n-      break;\n-\n     case OPT_x:\n       spec_lang = arg;\n       if (!strcmp (spec_lang, \"none\"))"}, {"sha": "3c814c6ae4858db85426098b5ce0441c2da16c76", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=d5478783983705a1044961df3c3d59f2ff3d52dc", "patch": "@@ -1,3 +1,7 @@\n+2010-11-10  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* objc-act.c (dump_base_name): Don't declare here.\n+\n 2010-11-08  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc-act.c (objc_add_dynamic_declaration_for_property): Do not"}, {"sha": "bc6cc029ff7d6c2627abf876f01a899fc45c887c", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=d5478783983705a1044961df3c3d59f2ff3d52dc", "patch": "@@ -414,9 +414,6 @@ static char *errbuf;\t/* Buffer for error diagnostics */\n \n extern enum debug_info_type write_symbols;\n \n-/* Data imported from toplev.c.  */\n-\n-extern const char *dump_base_name;\n \f\n static int flag_typed_selectors;\n "}, {"sha": "349d1bf4a8be7956de8335ebb5e086ea80305581", "filename": "gcc/opts-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=d5478783983705a1044961df3c3d59f2ff3d52dc", "patch": "@@ -751,7 +751,7 @@ handle_option (struct gcc_options *opts,\n     if (option->flags & handlers->handlers[i].mask)\n       {\n \tif (!handlers->handlers[i].handler (opts, opts_set, decoded,\n-\t\t\t\t\t    lang_mask, kind, handlers))\n+\t\t\t\t\t    lang_mask, kind, handlers, dc))\n \t  return false;\n \telse\n \t  handlers->post_handling_callback (decoded,"}, {"sha": "7b1d265bc84aab50efaf2e52222b7bf3371d9dbc", "filename": "gcc/opts.c", "status": "modified", "additions": 184, "deletions": 241, "changes": 425, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=d5478783983705a1044961df3c3d59f2ff3d52dc", "patch": "@@ -49,17 +49,6 @@ along with GCC; see the file COPYING3.  If not see\n /* True if we should exit after parsing options.  */\n bool exit_after_options;\n \n-/* True to warn about any objects definitions whose size is larger\n-   than N bytes.  Also want about function definitions whose returned\n-   values are larger than N bytes, where N is `larger_than_size'.  */\n-bool warn_larger_than;\n-HOST_WIDE_INT larger_than_size;\n-\n-/* True to warn about any function whose frame size is larger\n-   than N bytes. */\n-bool warn_frame_larger_than;\n-HOST_WIDE_INT frame_larger_than_size;\n-\n /* Type(s) of debugging information we are producing (if any).  See\n    flags.h for the definitions of the different possible types of\n    debugging information.  */\n@@ -329,9 +318,6 @@ should_emit_struct_debug (tree type, enum debug_info_usage usage)\n    write_symbols is set to DBX_DEBUG, XCOFF_DEBUG, or DWARF_DEBUG.  */\n bool use_gnu_debug_info_extensions;\n \n-/* The default visibility for all symbols (unless overridden) */\n-enum symbol_visibility default_visibility = VISIBILITY_DEFAULT;\n-\n /* Global visibility options.  */\n struct visibility_flags visibility_options;\n \n@@ -361,16 +347,18 @@ static bool common_handle_option (struct gcc_options *opts,\n \t\t\t\t  struct gcc_options *opts_set,\n \t\t\t\t  const struct cl_decoded_option *decoded,\n \t\t\t\t  unsigned int lang_mask, int kind,\n-\t\t\t\t  const struct cl_option_handlers *handlers);\n+\t\t\t\t  const struct cl_option_handlers *handlers,\n+\t\t\t\t  diagnostic_context *dc);\n static void handle_param (struct gcc_options *opts,\n \t\t\t  struct gcc_options *opts_set, const char *carg);\n static char *write_langs (unsigned int lang_mask);\n static void complain_wrong_lang (const struct cl_decoded_option *,\n \t\t\t\t unsigned int lang_mask);\n static void set_debug_level (enum debug_info_type type, int extended,\n \t\t\t     const char *arg);\n-static void set_fast_math_flags (int set);\n-static void set_unsafe_math_optimizations_flags (int set);\n+static void set_fast_math_flags (struct gcc_options *opts, int set);\n+static void set_unsafe_math_optimizations_flags (struct gcc_options *opts,\n+\t\t\t\t\t\t int set);\n \n /* Return a malloced slash-separated list of languages in MASK.  */\n static char *\n@@ -505,10 +493,12 @@ lang_handle_option (struct gcc_options *opts,\n \t\t    struct gcc_options *opts_set,\n \t\t    const struct cl_decoded_option *decoded,\n \t\t    unsigned int lang_mask ATTRIBUTE_UNUSED, int kind,\n-\t\t    const struct cl_option_handlers *handlers)\n+\t\t    const struct cl_option_handlers *handlers,\n+\t\t    diagnostic_context *dc)\n {\n   gcc_assert (opts == &global_options);\n   gcc_assert (opts_set == &global_options_set);\n+  gcc_assert (dc == global_dc);\n   gcc_assert (decoded->canonical_option_num_elements <= 2);\n   return lang_hooks.handle_option (decoded->opt_index, decoded->arg,\n \t\t\t\t   decoded->value, kind, handlers);\n@@ -522,10 +512,12 @@ target_handle_option (struct gcc_options *opts,\n \t\t      struct gcc_options *opts_set,\n \t\t      const struct cl_decoded_option *decoded,\n \t\t      unsigned int lang_mask ATTRIBUTE_UNUSED, int kind,\n-\t\t      const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED)\n+\t\t      const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED,\n+\t\t      diagnostic_context *dc)\n {\n   gcc_assert (opts == &global_options);\n   gcc_assert (opts_set == &global_options_set);\n+  gcc_assert (dc == global_dc);\n   gcc_assert (decoded->canonical_option_num_elements <= 2);\n   gcc_assert (kind == DK_UNSPECIFIED);\n   return targetm.handle_option (decoded->opt_index, decoded->arg,\n@@ -615,15 +607,16 @@ flag_instrument_functions_exclude_p (tree fndecl)\n \n /* Handle the vector of command line options, storing the results of\n    processing DECODED_OPTIONS and DECODED_OPTIONS_COUNT in OPTS and\n-   OPTS_SET.  LANG_MASK contains has a single bit set representing the\n-   current language.  HANDLERS describes what functions to call for\n-   the options.  */\n+   OPTS_SET and using DC for diagnostic state.  LANG_MASK contains has\n+   a single bit set representing the current language.  HANDLERS\n+   describes what functions to call for the options.  */\n static void\n read_cmdline_options (struct gcc_options *opts, struct gcc_options *opts_set,\n \t\t      struct cl_decoded_option *decoded_options,\n \t\t      unsigned int decoded_options_count,\n \t\t      unsigned int lang_mask,\n-\t\t      const struct cl_option_handlers *handlers)\n+\t\t      const struct cl_option_handlers *handlers,\n+\t\t      diagnostic_context *dc)\n {\n   unsigned int i;\n \n@@ -648,7 +641,7 @@ read_cmdline_options (struct gcc_options *opts, struct gcc_options *opts_set,\n \n       read_cmdline_option (opts, opts_set,\n \t\t\t   decoded_options + i, lang_mask, handlers,\n-\t\t\t   global_dc);\n+\t\t\t   dc);\n     }\n }\n \n@@ -1008,11 +1001,12 @@ static void finish_options (struct gcc_options *, struct gcc_options *);\n \n /* Parse command line options and set default flag values.  Do minimal\n    options processing.  The decoded options are in *DECODED_OPTIONS\n-   and *DECODED_OPTIONS_COUNT.  */\n+   and *DECODED_OPTIONS_COUNT; settings go in OPTS, OPTS_SET and DC.  */\n void\n decode_options (struct gcc_options *opts, struct gcc_options *opts_set,\n \t\tstruct cl_decoded_option *decoded_options,\n-\t\tunsigned int decoded_options_count)\n+\t\tunsigned int decoded_options_count,\n+\t\tdiagnostic_context *dc)\n {\n   struct cl_option_handlers handlers;\n \n@@ -1033,11 +1027,11 @@ decode_options (struct gcc_options *opts, struct gcc_options *opts_set,\n \n   /* Enable -Werror=coverage-mismatch by default */\n   enable_warning_as_error (\"coverage-mismatch\", 1, lang_mask, &handlers,\n-\t\t\t   global_dc);\n+\t\t\t   dc);\n \n   default_options_optimization (opts, opts_set,\n \t\t\t\tdecoded_options, decoded_options_count,\n-\t\t\t\tlang_mask, &handlers, global_dc);\n+\t\t\t\tlang_mask, &handlers, dc);\n \n #ifdef ENABLE_LTO\n   /* Clear any options currently held for LTO.  */\n@@ -1046,7 +1040,7 @@ decode_options (struct gcc_options *opts, struct gcc_options *opts_set,\n \n   read_cmdline_options (opts, opts_set,\n \t\t\tdecoded_options, decoded_options_count, lang_mask,\n-\t\t\t&handlers);\n+\t\t\t&handlers, dc);\n \n   finish_options (opts, opts_set);\n }\n@@ -1063,202 +1057,205 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set)\n   gcc_assert (opts == &global_options);\n   gcc_assert (opts_set = &global_options_set);\n \n-  if (dump_base_name && ! IS_ABSOLUTE_PATH (dump_base_name))\n+  if (opts->x_dump_base_name && ! IS_ABSOLUTE_PATH (opts->x_dump_base_name))\n     {\n-      /* First try to make DUMP_BASE_NAME relative to the DUMP_DIR_NAME\n-\t directory.  Then try to make DUMP_BASE_NAME relative to the\n-\t AUX_BASE_NAME directory, typically the directory to contain\n-\t the object file.  */\n-      if (dump_dir_name)\n-\tdump_base_name = concat (dump_dir_name, dump_base_name, NULL);\n-      else if (aux_base_name)\n+      /* First try to make OPTS->X_DUMP_BASE_NAME relative to the\n+\t OPTS->X_DUMP_DIR_NAME directory.  Then try to make\n+\t OPTS->X_DUMP_BASE_NAME relative to the OPTS->X_AUX_BASE_NAME\n+\t directory, typically the directory to contain the object\n+\t file.  */\n+      if (opts->x_dump_dir_name)\n+\topts->x_dump_base_name = concat (opts->x_dump_dir_name,\n+\t\t\t\t\t opts->x_dump_base_name, NULL);\n+      else if (opts->x_aux_base_name)\n \t{\n \t  const char *aux_base;\n \n-\t  base_of_path (aux_base_name, &aux_base);\n-\t  if (aux_base_name != aux_base)\n+\t  base_of_path (opts->x_aux_base_name, &aux_base);\n+\t  if (opts->x_aux_base_name != aux_base)\n \t    {\n-\t      int dir_len = aux_base - aux_base_name;\n+\t      int dir_len = aux_base - opts->x_aux_base_name;\n \t      char *new_dump_base_name =\n-\t\tXNEWVEC (char, strlen(dump_base_name) + dir_len + 1);\n+\t\tXNEWVEC (char, strlen (opts->x_dump_base_name) + dir_len + 1);\n \n-\t      /* Copy directory component from AUX_BASE_NAME.  */\n-\t      memcpy (new_dump_base_name, aux_base_name, dir_len);\n-\t      /* Append existing DUMP_BASE_NAME.  */\n-\t      strcpy (new_dump_base_name + dir_len, dump_base_name);\n-\t      dump_base_name = new_dump_base_name;\n+\t      /* Copy directory component from OPTS->X_AUX_BASE_NAME.  */\n+\t      memcpy (new_dump_base_name, opts->x_aux_base_name, dir_len);\n+\t      /* Append existing OPTS->X_DUMP_BASE_NAME.  */\n+\t      strcpy (new_dump_base_name + dir_len, opts->x_dump_base_name);\n+\t      opts->x_dump_base_name = new_dump_base_name;\n \t    }\n \t}\n     }\n \n   /* Handle related options for unit-at-a-time, toplevel-reorder, and\n      section-anchors.  */\n-  if (!flag_unit_at_a_time)\n+  if (!opts->x_flag_unit_at_a_time)\n     {\n-      if (flag_section_anchors && opts_set->x_flag_section_anchors)\n+      if (opts->x_flag_section_anchors && opts_set->x_flag_section_anchors)\n \terror (\"Section anchors must be disabled when unit-at-a-time \"\n \t       \"is disabled.\");\n-      flag_section_anchors = 0;\n-      if (flag_toplevel_reorder == 1)\n+      opts->x_flag_section_anchors = 0;\n+      if (opts->x_flag_toplevel_reorder == 1)\n \terror (\"Toplevel reorder must be disabled when unit-at-a-time \"\n \t       \"is disabled.\");\n-      flag_toplevel_reorder = 0;\n+      opts->x_flag_toplevel_reorder = 0;\n     }\n \n   /* -Wmissing-noreturn is alias for -Wsuggest-attribute=noreturn.  */\n-  if (warn_missing_noreturn)\n-    warn_suggest_attribute_noreturn = true;\n+  if (opts->x_warn_missing_noreturn)\n+    opts->x_warn_suggest_attribute_noreturn = true;\n     \n   /* Unless the user has asked for section anchors, we disable toplevel\n      reordering at -O0 to disable transformations that might be surprising\n      to end users and to get -fno-toplevel-reorder tested.  */\n   if (!optimize\n-      && flag_toplevel_reorder == 2\n-      && !(flag_section_anchors && opts_set->x_flag_section_anchors))\n+      && opts->x_flag_toplevel_reorder == 2\n+      && !(opts->x_flag_section_anchors && opts_set->x_flag_section_anchors))\n     {\n-      flag_toplevel_reorder = 0;\n-      flag_section_anchors = 0;\n+      opts->x_flag_toplevel_reorder = 0;\n+      opts->x_flag_section_anchors = 0;\n     }\n-  if (!flag_toplevel_reorder)\n+  if (!opts->x_flag_toplevel_reorder)\n     {\n-      if (flag_section_anchors && opts_set->x_flag_section_anchors)\n+      if (opts->x_flag_section_anchors && opts_set->x_flag_section_anchors)\n \terror (\"section anchors must be disabled when toplevel reorder\"\n \t       \" is disabled\");\n-      flag_section_anchors = 0;\n+      opts->x_flag_section_anchors = 0;\n     }\n \n   if (first_time_p)\n     {\n-      if (flag_pie)\n-\tflag_pic = flag_pie;\n-      if (flag_pic && !flag_pie)\n-\tflag_shlib = 1;\n+      if (opts->x_flag_pie)\n+\topts->x_flag_pic = opts->x_flag_pie;\n+      if (opts->x_flag_pic && !opts->x_flag_pie)\n+\topts->x_flag_shlib = 1;\n       first_time_p = false;\n     }\n \n   if (optimize == 0)\n     {\n       /* Inlining does not work if not optimizing,\n \t so force it not to be done.  */\n-      warn_inline = 0;\n-      flag_no_inline = 1;\n+      opts->x_warn_inline = 0;\n+      opts->x_flag_no_inline = 1;\n     }\n \n   /* The optimization to partition hot and cold basic blocks into separate\n      sections of the .o and executable files does not work (currently)\n      with exception handling.  This is because there is no support for\n-     generating unwind info.  If flag_exceptions is turned on we need to\n-     turn off the partitioning optimization.  */\n+     generating unwind info.  If opts->x_flag_exceptions is turned on\n+     we need to turn off the partitioning optimization.  */\n \n   ui_except = targetm.except_unwind_info ();\n \n-  if (flag_exceptions\n-      && flag_reorder_blocks_and_partition\n+  if (opts->x_flag_exceptions\n+      && opts->x_flag_reorder_blocks_and_partition\n       && (ui_except == UI_SJLJ || ui_except == UI_TARGET))\n     {\n       inform (input_location,\n \t      \"-freorder-blocks-and-partition does not work \"\n \t      \"with exceptions on this architecture\");\n-      flag_reorder_blocks_and_partition = 0;\n-      flag_reorder_blocks = 1;\n+      opts->x_flag_reorder_blocks_and_partition = 0;\n+      opts->x_flag_reorder_blocks = 1;\n     }\n \n   /* If user requested unwind info, then turn off the partitioning\n      optimization.  */\n \n-  if (flag_unwind_tables\n+  if (opts->x_flag_unwind_tables\n       && !targetm.unwind_tables_default\n-      && flag_reorder_blocks_and_partition\n+      && opts->x_flag_reorder_blocks_and_partition\n       && (ui_except == UI_SJLJ || ui_except == UI_TARGET))\n     {\n       inform (input_location,\n \t      \"-freorder-blocks-and-partition does not support \"\n \t      \"unwind info on this architecture\");\n-      flag_reorder_blocks_and_partition = 0;\n-      flag_reorder_blocks = 1;\n+      opts->x_flag_reorder_blocks_and_partition = 0;\n+      opts->x_flag_reorder_blocks = 1;\n     }\n \n   /* If the target requested unwind info, then turn off the partitioning\n      optimization with a different message.  Likewise, if the target does not\n      support named sections.  */\n \n-  if (flag_reorder_blocks_and_partition\n+  if (opts->x_flag_reorder_blocks_and_partition\n       && (!targetm.have_named_sections\n-\t  || (flag_unwind_tables\n+\t  || (opts->x_flag_unwind_tables\n \t      && targetm.unwind_tables_default\n \t      && (ui_except == UI_SJLJ || ui_except == UI_TARGET))))\n     {\n       inform (input_location,\n \t      \"-freorder-blocks-and-partition does not work \"\n \t      \"on this architecture\");\n-      flag_reorder_blocks_and_partition = 0;\n-      flag_reorder_blocks = 1;\n+      opts->x_flag_reorder_blocks_and_partition = 0;\n+      opts->x_flag_reorder_blocks = 1;\n     }\n \n   /* Pipelining of outer loops is only possible when general pipelining\n      capabilities are requested.  */\n-  if (!flag_sel_sched_pipelining)\n-    flag_sel_sched_pipelining_outer_loops = 0;\n+  if (!opts->x_flag_sel_sched_pipelining)\n+    opts->x_flag_sel_sched_pipelining_outer_loops = 0;\n \n   if (!targetm.ira_cover_classes\n-      && flag_ira_algorithm == IRA_ALGORITHM_CB)\n+      && opts->x_flag_ira_algorithm == IRA_ALGORITHM_CB)\n     {\n       inform (input_location,\n \t      \"-fira-algorithm=CB does not work on this architecture\");\n-      flag_ira_algorithm = IRA_ALGORITHM_PRIORITY;\n+      opts->x_flag_ira_algorithm = IRA_ALGORITHM_PRIORITY;\n     }\n \n-  if (flag_conserve_stack)\n+  if (opts->x_flag_conserve_stack)\n     {\n       maybe_set_param_value (PARAM_LARGE_STACK_FRAME, 100,\n \t\t\t     opts->x_param_values, opts_set->x_param_values);\n       maybe_set_param_value (PARAM_STACK_FRAME_GROWTH, 40,\n \t\t\t     opts->x_param_values, opts_set->x_param_values);\n     }\n-  if (flag_wpa || flag_ltrans)\n+  if (opts->x_flag_wpa || opts->x_flag_ltrans)\n     {\n       /* These passes are not WHOPR compatible yet.  */\n-      flag_ipa_pta = 0;\n-      flag_ipa_struct_reorg = 0;\n+      opts->x_flag_ipa_pta = 0;\n+      opts->x_flag_ipa_struct_reorg = 0;\n     }\n \n-  if (flag_lto || flag_whopr)\n+  if (opts->x_flag_lto || opts->x_flag_whopr)\n     {\n #ifdef ENABLE_LTO\n-      flag_generate_lto = 1;\n+      opts->x_flag_generate_lto = 1;\n \n       /* When generating IL, do not operate in whole-program mode.\n \t Otherwise, symbols will be privatized too early, causing link\n \t errors later.  */\n-      flag_whole_program = 0;\n+      opts->x_flag_whole_program = 0;\n #else\n       error (\"LTO support has not been enabled in this configuration\");\n #endif\n     }\n-  if (flag_lto_partition_balanced || flag_lto_partition_1to1)\n+  if (opts->x_flag_lto_partition_balanced || opts->x_flag_lto_partition_1to1)\n     {\n-      if (flag_lto_partition_balanced && flag_lto_partition_1to1)\n+      if (opts->x_flag_lto_partition_balanced\n+\t  && opts->x_flag_lto_partition_1to1)\n \terror (\"Only one -flto-partitoin value can be specified\");\n-      if (!flag_whopr && !flag_wpa && !flag_ltrans)\n+      if (!opts->x_flag_whopr && !opts->x_flag_wpa && !opts->x_flag_ltrans)\n \terror (\"-flto-partition has no effect without -fwhopr\");\n     }\n \n   /* Reconcile -flto and -fwhopr.  Set additional flags as appropriate and\n      check option consistency.  */\n-  if (flag_lto && flag_whopr)\n+  if (opts->x_flag_lto && opts->x_flag_whopr)\n     error (\"-flto and -fwhopr are mutually exclusive\");\n \n-  /* We initialize flag_split_stack to -1 so that targets can set a\n+  /* We initialize opts->x_flag_split_stack to -1 so that targets can set a\n      default value if they choose based on other options.  */\n-  if (flag_split_stack == -1)\n-    flag_split_stack = 0;\n-  else if (flag_split_stack)\n+  if (opts->x_flag_split_stack == -1)\n+    opts->x_flag_split_stack = 0;\n+  else if (opts->x_flag_split_stack)\n     {\n       if (!targetm.supports_split_stack (true))\n \t{\n \t  error (\"%<-fsplit-stack%> is not supported by \"\n \t\t \"this compiler configuration\");\n-\t  flag_split_stack = 0;\n+\t  opts->x_flag_split_stack = 0;\n \t}\n     }\n }\n@@ -1588,16 +1585,17 @@ common_handle_option (struct gcc_options *opts,\n \t\t      struct gcc_options *opts_set,\n \t\t      const struct cl_decoded_option *decoded,\n \t\t      unsigned int lang_mask, int kind ATTRIBUTE_UNUSED,\n-\t\t      const struct cl_option_handlers *handlers)\n+\t\t      const struct cl_option_handlers *handlers,\n+\t\t      diagnostic_context *dc)\n {\n   size_t scode = decoded->opt_index;\n   const char *arg = decoded->arg;\n   int value = decoded->value;\n-  static bool verbose = false;\n   enum opt_code code = (enum opt_code) scode;\n \n   gcc_assert (opts == &global_options);\n   gcc_assert (opts_set == &global_options_set);\n+  gcc_assert (dc == global_dc);\n   gcc_assert (decoded->canonical_option_num_elements <= 2);\n \n   switch (code)\n@@ -1606,17 +1604,15 @@ common_handle_option (struct gcc_options *opts,\n       handle_param (opts, opts_set, arg);\n       break;\n \n-    case OPT_v:\n-      verbose = true;\n-      break;\n-\n     case OPT__help:\n       {\n \tunsigned int all_langs_mask = (1U << cl_lang_count) - 1;\n \tunsigned int undoc_mask;\n \tunsigned int i;\n \n-\tundoc_mask = (verbose | extra_warnings) ? 0 : CL_UNDOCUMENTED;\n+\tundoc_mask = ((opts->x_verbose_flag | opts->x_extra_warnings)\n+\t\t      ? 0\n+\t\t      : CL_UNDOCUMENTED);\n \t/* First display any single language specific options.  */\n \tfor (i = 0; i < cl_lang_count; i++)\n \t  print_specific_help\n@@ -1769,95 +1765,54 @@ common_handle_option (struct gcc_options *opts,\n       break;\n \n     case OPT_Werror_:\n-      enable_warning_as_error (arg, value, lang_mask, handlers, global_dc);\n+      enable_warning_as_error (arg, value, lang_mask, handlers, dc);\n       break;\n \n     case OPT_Wlarger_than_:\n-      larger_than_size = value;\n-      warn_larger_than = value != -1;\n+      opts->x_larger_than_size = value;\n+      opts->x_warn_larger_than = value != -1;\n       break;\n \n     case OPT_Wfatal_errors:\n-      global_dc->fatal_errors = value;\n+      dc->fatal_errors = value;\n       break;\n \n     case OPT_Wframe_larger_than_:\n-      frame_larger_than_size = value;\n-      warn_frame_larger_than = value != -1;\n+      opts->x_frame_larger_than_size = value;\n+      opts->x_warn_frame_larger_than = value != -1;\n       break;\n \n     case OPT_Wstrict_aliasing:\n-      set_Wstrict_aliasing (value);\n-      break;\n-\n-    case OPT_Wstrict_aliasing_:\n-      warn_strict_aliasing = value;\n+      set_Wstrict_aliasing (opts, value);\n       break;\n \n     case OPT_Wstrict_overflow:\n-      warn_strict_overflow = (value\n-\t\t\t      ? (int) WARN_STRICT_OVERFLOW_CONDITIONAL\n-\t\t\t      : 0);\n-      break;\n-\n-    case OPT_Wstrict_overflow_:\n-      warn_strict_overflow = value;\n+      opts->x_warn_strict_overflow = (value\n+\t\t\t\t      ? (int) WARN_STRICT_OVERFLOW_CONDITIONAL\n+\t\t\t\t      : 0);\n       break;\n \n     case OPT_Wsystem_headers:\n-      global_dc->dc_warn_system_headers = value;\n-      break;\n-\n-    case OPT_Wunused:\n-      warn_unused = value;\n+      dc->dc_warn_system_headers = value;\n       break;\n \n     case OPT_aux_info:\n-      aux_info_file_name = arg;\n-      flag_gen_aux_info = 1;\n-      break;\n-\n-    case OPT_auxbase:\n-      aux_base_name = arg;\n+      opts->x_flag_gen_aux_info = 1;\n       break;\n \n     case OPT_auxbase_strip:\n       {\n \tchar *tmp = xstrdup (arg);\n \tstrip_off_ending (tmp, strlen (tmp));\n \tif (tmp[0])\n-\t  aux_base_name = tmp;\n+\t  opts->x_aux_base_name = tmp;\n       }\n       break;\n \n     case OPT_d:\n       decode_d_option (arg);\n       break;\n \n-    case OPT_dumpbase:\n-      dump_base_name = arg;\n-      break;\n-\n-    case OPT_dumpdir:\n-      dump_dir_name = arg;\n-      break;\n-\n-    case OPT_falign_functions_:\n-      align_functions = value;\n-      break;\n-\n-    case OPT_falign_jumps_:\n-      align_jumps = value;\n-      break;\n-\n-    case OPT_falign_labels_:\n-      align_labels = value;\n-      break;\n-\n-    case OPT_falign_loops_:\n-      align_loops = value;\n-      break;\n-\n     case OPT_fcall_used_:\n       fix_register (arg, 0, 1);\n       break;\n@@ -1884,16 +1839,16 @@ common_handle_option (struct gcc_options *opts,\n \n     case OPT_fdiagnostics_show_location_:\n       if (!strcmp (arg, \"once\"))\n-\tdiagnostic_prefixing_rule (global_dc) = DIAGNOSTICS_SHOW_PREFIX_ONCE;\n+\tdiagnostic_prefixing_rule (dc) = DIAGNOSTICS_SHOW_PREFIX_ONCE;\n       else if (!strcmp (arg, \"every-line\"))\n-\tdiagnostic_prefixing_rule (global_dc)\n+\tdiagnostic_prefixing_rule (dc)\n \t  = DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE;\n       else\n \treturn false;\n       break;\n \n     case OPT_fdiagnostics_show_option:\n-      global_dc->show_option_requested = value;\n+      dc->show_option_requested = value;\n       break;\n \n     case OPT_fdump_:\n@@ -1904,30 +1859,30 @@ common_handle_option (struct gcc_options *opts,\n     case OPT_ffp_contract_:\n       if (!strcmp (arg, \"on\"))\n \t/* Not implemented, fall back to conservative FP_CONTRACT_OFF.  */\n-\tflag_fp_contract_mode = FP_CONTRACT_OFF;\n+\topts->x_flag_fp_contract_mode = FP_CONTRACT_OFF;\n       else if (!strcmp (arg, \"off\"))\n-\tflag_fp_contract_mode = FP_CONTRACT_OFF;\n+\topts->x_flag_fp_contract_mode = FP_CONTRACT_OFF;\n       else if (!strcmp (arg, \"fast\"))\n-\tflag_fp_contract_mode = FP_CONTRACT_FAST;\n+\topts->x_flag_fp_contract_mode = FP_CONTRACT_FAST;\n       else\n \terror (\"unknown floating point contraction style \\\"%s\\\"\", arg);\n       break;\n \n     case OPT_fexcess_precision_:\n       if (!strcmp (arg, \"fast\"))\n-\tflag_excess_precision_cmdline = EXCESS_PRECISION_FAST;\n+\topts->x_flag_excess_precision_cmdline = EXCESS_PRECISION_FAST;\n       else if (!strcmp (arg, \"standard\"))\n-\tflag_excess_precision_cmdline = EXCESS_PRECISION_STANDARD;\n+\topts->x_flag_excess_precision_cmdline = EXCESS_PRECISION_STANDARD;\n       else\n \terror (\"unknown excess precision style \\\"%s\\\"\", arg);\n       break;\n \n     case OPT_ffast_math:\n-      set_fast_math_flags (value);\n+      set_fast_math_flags (opts, value);\n       break;\n \n     case OPT_funsafe_math_optimizations:\n-      set_unsafe_math_optimizations_flags (value);\n+      set_unsafe_math_optimizations_flags (opts, value);\n       break;\n \n     case OPT_ffixed_:\n@@ -1952,7 +1907,7 @@ common_handle_option (struct gcc_options *opts,\n       break;\n \n     case OPT_fmessage_length_:\n-      pp_set_line_maximum_length (global_dc->printer, value);\n+      pp_set_line_maximum_length (dc->printer, value);\n       break;\n \n     case OPT_fpack_struct_:\n@@ -1987,35 +1942,35 @@ common_handle_option (struct gcc_options *opts,\n \n     case OPT_fprofile_use_:\n       profile_data_prefix = xstrdup (arg);\n-      flag_profile_use = true;\n+      opts->x_flag_profile_use = true;\n       value = true;\n       /* No break here - do -fprofile-use processing. */\n     case OPT_fprofile_use:\n       if (!opts_set->x_flag_branch_probabilities)\n-        flag_branch_probabilities = value;\n+\topts->x_flag_branch_probabilities = value;\n       if (!opts_set->x_flag_profile_values)\n-        flag_profile_values = value;\n+\topts->x_flag_profile_values = value;\n       if (!opts_set->x_flag_unroll_loops)\n-        flag_unroll_loops = value;\n+\topts->x_flag_unroll_loops = value;\n       if (!opts_set->x_flag_peel_loops)\n-        flag_peel_loops = value;\n+\topts->x_flag_peel_loops = value;\n       if (!opts_set->x_flag_tracer)\n-        flag_tracer = value;\n+\topts->x_flag_tracer = value;\n       if (!opts_set->x_flag_value_profile_transformations)\n-        flag_value_profile_transformations = value;\n+\topts->x_flag_value_profile_transformations = value;\n       if (!opts_set->x_flag_inline_functions)\n-        flag_inline_functions = value;\n+\topts->x_flag_inline_functions = value;\n       if (!opts_set->x_flag_ipa_cp)\n-        flag_ipa_cp = value;\n+\topts->x_flag_ipa_cp = value;\n       if (!opts_set->x_flag_ipa_cp_clone\n-\t  && value && flag_ipa_cp)\n-\tflag_ipa_cp_clone = value;\n+\t  && value && opts->x_flag_ipa_cp)\n+\topts->x_flag_ipa_cp_clone = value;\n       if (!opts_set->x_flag_predictive_commoning)\n-\tflag_predictive_commoning = value;\n+\topts->x_flag_predictive_commoning = value;\n       if (!opts_set->x_flag_unswitch_loops)\n-\tflag_unswitch_loops = value;\n+\topts->x_flag_unswitch_loops = value;\n       if (!opts_set->x_flag_gcse_after_reload)\n-\tflag_gcse_after_reload = value;\n+\topts->x_flag_gcse_after_reload = value;\n       break;\n \n     case OPT_fprofile_generate_:\n@@ -2024,29 +1979,29 @@ common_handle_option (struct gcc_options *opts,\n       /* No break here - do -fprofile-generate processing. */\n     case OPT_fprofile_generate:\n       if (!opts_set->x_profile_arc_flag)\n-        profile_arc_flag = value;\n+\topts->x_profile_arc_flag = value;\n       if (!opts_set->x_flag_profile_values)\n-        flag_profile_values = value;\n+\topts->x_flag_profile_values = value;\n       if (!opts_set->x_flag_value_profile_transformations)\n-        flag_value_profile_transformations = value;\n+\topts->x_flag_value_profile_transformations = value;\n       if (!opts_set->x_flag_inline_functions)\n-        flag_inline_functions = value;\n+\topts->x_flag_inline_functions = value;\n       break;\n \n     case OPT_fshow_column:\n-      global_dc->show_column = value;\n+      dc->show_column = value;\n       break;\n \n     case OPT_fvisibility_:\n       {\n         if (!strcmp(arg, \"default\"))\n-          default_visibility = VISIBILITY_DEFAULT;\n+          opts->x_default_visibility = VISIBILITY_DEFAULT;\n         else if (!strcmp(arg, \"internal\"))\n-          default_visibility = VISIBILITY_INTERNAL;\n+          opts->x_default_visibility = VISIBILITY_INTERNAL;\n         else if (!strcmp(arg, \"hidden\"))\n-          default_visibility = VISIBILITY_HIDDEN;\n+          opts->x_default_visibility = VISIBILITY_HIDDEN;\n         else if (!strcmp(arg, \"protected\"))\n-          default_visibility = VISIBILITY_PROTECTED;\n+          opts->x_default_visibility = VISIBILITY_PROTECTED;\n         else\n           error (\"unrecognized visibility value \\\"%s\\\"\", arg);\n       }\n@@ -2072,13 +2027,13 @@ common_handle_option (struct gcc_options *opts,\n #endif\n \n     case OPT_fsched_stalled_insns_:\n-      flag_sched_stalled_insns = value;\n-      if (flag_sched_stalled_insns == 0)\n-\tflag_sched_stalled_insns = -1;\n+      opts->x_flag_sched_stalled_insns = value;\n+      if (opts->x_flag_sched_stalled_insns == 0)\n+\topts->x_flag_sched_stalled_insns = -1;\n       break;\n \n     case OPT_fsched_stalled_insns_dep_:\n-      flag_sched_stalled_insns_dep = value;\n+      opts->x_flag_sched_stalled_insns_dep = value;\n       break;\n \n     case OPT_fstack_check_:\n@@ -2127,41 +2082,37 @@ common_handle_option (struct gcc_options *opts,\n \n     case OPT_ftls_model_:\n       if (!strcmp (arg, \"global-dynamic\"))\n-\tflag_tls_default = TLS_MODEL_GLOBAL_DYNAMIC;\n+\topts->x_flag_tls_default = TLS_MODEL_GLOBAL_DYNAMIC;\n       else if (!strcmp (arg, \"local-dynamic\"))\n-\tflag_tls_default = TLS_MODEL_LOCAL_DYNAMIC;\n+\topts->x_flag_tls_default = TLS_MODEL_LOCAL_DYNAMIC;\n       else if (!strcmp (arg, \"initial-exec\"))\n-\tflag_tls_default = TLS_MODEL_INITIAL_EXEC;\n+\topts->x_flag_tls_default = TLS_MODEL_INITIAL_EXEC;\n       else if (!strcmp (arg, \"local-exec\"))\n-\tflag_tls_default = TLS_MODEL_LOCAL_EXEC;\n+\topts->x_flag_tls_default = TLS_MODEL_LOCAL_EXEC;\n       else\n \twarning (0, \"unknown tls-model \\\"%s\\\"\", arg);\n       break;\n \n     case OPT_fira_algorithm_:\n       if (!strcmp (arg, \"CB\"))\n-\tflag_ira_algorithm = IRA_ALGORITHM_CB;\n+\topts->x_flag_ira_algorithm = IRA_ALGORITHM_CB;\n       else if (!strcmp (arg, \"priority\"))\n-\tflag_ira_algorithm = IRA_ALGORITHM_PRIORITY;\n+\topts->x_flag_ira_algorithm = IRA_ALGORITHM_PRIORITY;\n       else\n \twarning (0, \"unknown ira algorithm \\\"%s\\\"\", arg);\n       break;\n \n     case OPT_fira_region_:\n       if (!strcmp (arg, \"one\"))\n-\tflag_ira_region = IRA_REGION_ONE;\n+\topts->x_flag_ira_region = IRA_REGION_ONE;\n       else if (!strcmp (arg, \"all\"))\n-\tflag_ira_region = IRA_REGION_ALL;\n+\topts->x_flag_ira_region = IRA_REGION_ALL;\n       else if (!strcmp (arg, \"mixed\"))\n-\tflag_ira_region = IRA_REGION_MIXED;\n+\topts->x_flag_ira_region = IRA_REGION_MIXED;\n       else\n \twarning (0, \"unknown ira region \\\"%s\\\"\", arg);\n       break;\n \n-    case OPT_fira_verbose_:\n-      flag_ira_verbose = value;\n-      break;\n-\n     case OPT_g:\n       set_debug_level (NO_DEBUG, DEFAULT_GDB_EXTENSIONS, arg);\n       break;\n@@ -2196,25 +2147,17 @@ common_handle_option (struct gcc_options *opts,\n       set_debug_level (XCOFF_DEBUG, code == OPT_gxcoff_, arg);\n       break;\n \n-    case OPT_o:\n-      asm_file_name = arg;\n-      break;\n-\n     case OPT_pedantic_errors:\n-      flag_pedantic_errors = pedantic = 1;\n-      global_dc->pedantic_errors = 1;\n-      break;\n-\n-    case OPT_fwhopr_:\n-      flag_whopr = arg;\n+      opts->x_pedantic = 1;\n+      dc->pedantic_errors = 1;\n       break;\n \n     case OPT_fwhopr:\n-      flag_whopr = \"\";\n+      opts->x_flag_whopr = \"\";\n       break;\n \n     case OPT_w:\n-      global_dc->dc_inhibit_warnings = true;\n+      dc->dc_inhibit_warnings = true;\n       break;\n \n     case OPT_fuse_linker_plugin:\n@@ -2259,48 +2202,48 @@ handle_param (struct gcc_options *opts, struct gcc_options *opts_set,\n   free (arg);\n }\n \n-/* Used to set the level of strict aliasing warnings,\n+/* Used to set the level of strict aliasing warnings in OPTS,\n    when no level is specified (i.e., when -Wstrict-aliasing, and not\n    -Wstrict-aliasing=level was given).\n    ONOFF is assumed to take value 1 when -Wstrict-aliasing is specified,\n    and 0 otherwise.  After calling this function, wstrict_aliasing will be\n    set to the default value of -Wstrict_aliasing=level, currently 3.  */\n void\n-set_Wstrict_aliasing (int onoff)\n+set_Wstrict_aliasing (struct gcc_options *opts, int onoff)\n {\n   gcc_assert (onoff == 0 || onoff == 1);\n   if (onoff != 0)\n-    warn_strict_aliasing = 3;\n+    opts->x_warn_strict_aliasing = 3;\n   else\n-    warn_strict_aliasing = 0;\n+    opts->x_warn_strict_aliasing = 0;\n }\n \n /* The following routines are useful in setting all the flags that\n    -ffast-math and -fno-fast-math imply.  */\n static void\n-set_fast_math_flags (int set)\n+set_fast_math_flags (struct gcc_options *opts, int set)\n {\n-  flag_unsafe_math_optimizations = set;\n-  set_unsafe_math_optimizations_flags (set);\n-  flag_finite_math_only = set;\n-  flag_errno_math = !set;\n+  opts->x_flag_unsafe_math_optimizations = set;\n+  set_unsafe_math_optimizations_flags (opts, set);\n+  opts->x_flag_finite_math_only = set;\n+  opts->x_flag_errno_math = !set;\n   if (set)\n     {\n-      flag_signaling_nans = 0;\n-      flag_rounding_math = 0;\n-      flag_cx_limited_range = 1;\n+      opts->x_flag_signaling_nans = 0;\n+      opts->x_flag_rounding_math = 0;\n+      opts->x_flag_cx_limited_range = 1;\n     }\n }\n \n /* When -funsafe-math-optimizations is set the following\n    flags are set as well.  */\n static void\n-set_unsafe_math_optimizations_flags (int set)\n+set_unsafe_math_optimizations_flags (struct gcc_options *opts, int set)\n {\n-  flag_trapping_math = !set;\n-  flag_signed_zeros = !set;\n-  flag_associative_math = set;\n-  flag_reciprocal_math = set;\n+  opts->x_flag_trapping_math = !set;\n+  opts->x_flag_signed_zeros = !set;\n+  opts->x_flag_associative_math = set;\n+  opts->x_flag_reciprocal_math = set;\n }\n \n /* Return true iff flags are set as if -ffast-math.  */"}, {"sha": "ec9fbc7ba4e7df26ffcac3818a929a344ffd0d1e", "filename": "gcc/opts.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=d5478783983705a1044961df3c3d59f2ff3d52dc", "patch": "@@ -165,7 +165,8 @@ struct cl_option_handler_func\n \t\t   struct gcc_options *opts_set,\n \t\t   const struct cl_decoded_option *decoded,\n \t\t   unsigned int lang_mask, int kind,\n-\t\t   const struct cl_option_handlers *handlers);\n+\t\t   const struct cl_option_handlers *handlers,\n+\t\t   diagnostic_context *dc);\n \n   /* The mask that must have some bit in common with the flags for the\n      option for this particular handler to be used.  */\n@@ -223,7 +224,8 @@ extern void decode_cmdline_options_to_array_default_mask (unsigned int argc,\n extern void decode_options (struct gcc_options *opts,\n \t\t\t    struct gcc_options *opts_set,\n \t\t\t    struct cl_decoded_option *decoded_options,\n-\t\t\t    unsigned int decoded_options_count);\n+\t\t\t    unsigned int decoded_options_count,\n+\t\t\t    diagnostic_context *dc);\n extern int option_enabled (int opt_idx, void *opts);\n extern bool get_option_state (struct gcc_options *, int,\n \t\t\t      struct cl_option_state *);"}, {"sha": "0a41c02d08558ec673a7d2e1fea8a4ddaa9792d7", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 47, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=d5478783983705a1044961df3c3d59f2ff3d52dc", "patch": "@@ -140,18 +140,6 @@ const char *main_input_filename;\n    to optimize in process_options ().  */\n #define AUTODETECT_VALUE 2\n \n-/* Name to use as base of names for dump output files.  */\n-\n-const char *dump_base_name;\n-\n-/* Directory used for dump output files.  */\n-\n-const char *dump_dir_name;\n-\n-/* Name to use as a base for auxiliary output files.  */\n-\n-const char *aux_base_name;\n-\n /* Prefix for profile data files */\n const char *profile_data_prefix;\n \n@@ -165,21 +153,13 @@ int rtl_dump_and_exit;\n int flag_print_asm_name;\n enum graph_dump_types graph_dump_format;\n \n-/* Name for output file of assembly code, specified with -o.  */\n-\n-const char *asm_file_name;\n-\n /* True if this is the lto front end.  This is used to disable\n    gimple generation and lowering passes that are normally run on the\n    output of a front end.  These passes must be bypassed for lto since\n    they have already been done before the gimple was written.  */\n \n bool in_lto_p = false;\n \n-/* Nonzero if we should write GIMPLE bytecode for link-time optimization.  */\n-\n-int flag_generate_lto;\n-\n /* The FUNCTION_DECL for the function currently being compiled,\n    or 0 if between functions.  */\n tree current_function_decl;\n@@ -198,19 +178,6 @@ unsigned local_tick;\n \n /* -f flags.  */\n \n-/* Nonzero means we should be saving declaration info into a .X file.  */\n-\n-int flag_gen_aux_info = 0;\n-\n-/* Specified name of aux-info file.  */\n-\n-const char *aux_info_file_name;\n-\n-/* Nonzero if we are compiling code for a shared library, zero for\n-   executable.  */\n-\n-int flag_shlib;\n-\n /* Generate code for GNU or NeXT Objective-C runtime environment.  */\n \n #ifdef NEXT_OBJC_RUNTIME\n@@ -219,19 +186,6 @@ int flag_next_runtime = 1;\n int flag_next_runtime = 0;\n #endif\n \n-/* Set to the default thread-local storage (tls) model to use.  */\n-\n-enum tls_model flag_tls_default = TLS_MODEL_GLOBAL_DYNAMIC;\n-\n-/* Set the default for excess precision.  */\n-\n-enum excess_precision flag_excess_precision_cmdline = EXCESS_PRECISION_DEFAULT;\n-\n-/* Nonzero means change certain warnings into errors.\n-   Usually these are warnings about failure to conform to some standard.  */\n-\n-int flag_pedantic_errors = 0;\n-\n /* Nonzero means make permerror produce warnings instead of errors.  */\n \n int flag_permissive = 0;\n@@ -2402,7 +2356,8 @@ toplev_main (int argc, char **argv)\n   /* Parse the options and do minimal processing; basically just\n      enough to default flags appropriately.  */\n   decode_options (&global_options, &global_options_set,\n-\t\t  save_decoded_options, save_decoded_options_count);\n+\t\t  save_decoded_options, save_decoded_options_count,\n+\t\t  global_dc);\n \n   init_local_tick ();\n "}, {"sha": "0f6c0216c2e7dc6636648915c4358e444b41c083", "filename": "gcc/toplev.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=d5478783983705a1044961df3c3d59f2ff3d52dc", "patch": "@@ -74,12 +74,7 @@ extern unsigned local_tick;\n /* Top-level source file.  */\n extern const char *main_input_filename;\n \n-extern const char *dump_base_name;\n-extern const char *dump_dir_name;\n-extern const char *aux_base_name;\n-extern const char *aux_info_file_name;\n extern const char *profile_data_prefix;\n-extern const char *asm_file_name;\n extern bool exit_after_options;\n \n /* True if the user has tagged the function with the 'section'"}, {"sha": "d4827a63f1de563689f01514d90e88d50f65838c", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5478783983705a1044961df3c3d59f2ff3d52dc/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=d5478783983705a1044961df3c3d59f2ff3d52dc", "patch": "@@ -3886,11 +3886,6 @@ extern GTY(()) tree integer_types[itk_none];\n #define long_long_unsigned_type_node\tinteger_types[itk_unsigned_long_long]\n #define int128_integer_type_node\tinteger_types[itk_int128]\n #define int128_unsigned_type_node\tinteger_types[itk_unsigned_int128]\n-\f\n-/* Set to the default thread-local storage (tls) model to use.  */\n-\n-extern enum tls_model flag_tls_default;\n-\n \f\n /* A pointer-to-function member type looks like:\n "}]}