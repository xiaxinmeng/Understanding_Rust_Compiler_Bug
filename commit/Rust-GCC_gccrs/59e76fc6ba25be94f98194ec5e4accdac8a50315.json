{"sha": "59e76fc6ba25be94f98194ec5e4accdac8a50315", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTllNzZmYzZiYTI1YmU5NGY5ODE5NGVjNWU0YWNjZGFjOGE1MDMxNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-11-18T12:27:30Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-11-18T12:27:30Z"}, "message": "decl.c (cplus_expand_expr_stmt): Always complain about unresolved type.\n\n\t* decl.c (cplus_expand_expr_stmt): Always complain about unresolved\n\ttype.\nFixes Sec13/4/E13417.C\n\t* tree.c (lvalue_p_1): An INDIRECT_REF to a function is an lvalue.\n\t* call.c (build_object_call): Also support references to functions.\n\t* typeck.c (convert_for_initialization): Don't decay a function\n\tif the target is a reference to function.\nFixes Sec13/2_1_1_2/P13120.C\n\t* search.c (add_conversions): Get all the overloads from a class.\nFixes Sec13/2/P13101.C\n\t* decl.c (grok_ctor_properties): Complain about any constructor\n\tthat will take a single arg of the class type by value.\nFixes Sec12/8/S12072.C\n\t* typeck2.c (build_functional_cast): Can't create objects of\n\tabstract classes this way.\n\t* cvt.c (ocp_convert): Likewise.\nFixes Sec10/4/S10018.C\n\t* decl.c (grokfndecl): Member functions of local classes are not\n\tpublic.\nFixes Sec10/3/P10092.C\n\nFrom-SVN: r23695", "tree": {"sha": "f8d198f498d62e38807a0fd49db30db8a820e0ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8d198f498d62e38807a0fd49db30db8a820e0ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59e76fc6ba25be94f98194ec5e4accdac8a50315", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59e76fc6ba25be94f98194ec5e4accdac8a50315", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59e76fc6ba25be94f98194ec5e4accdac8a50315", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59e76fc6ba25be94f98194ec5e4accdac8a50315/comments", "author": null, "committer": null, "parents": [{"sha": "ab1878854a909d581de35aaabe6b0e668781068c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab1878854a909d581de35aaabe6b0e668781068c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab1878854a909d581de35aaabe6b0e668781068c"}], "stats": {"total": 75, "additions": 63, "deletions": 12}, "files": [{"sha": "7f2dd8924bd2e9339475ff5c0319f0af0fecc6be", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e76fc6ba25be94f98194ec5e4accdac8a50315/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e76fc6ba25be94f98194ec5e4accdac8a50315/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=59e76fc6ba25be94f98194ec5e4accdac8a50315", "patch": "@@ -1,3 +1,25 @@\n+1998-11-18  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (cplus_expand_expr_stmt): Always complain about unresolved\n+\ttype.\n+\n+\t* tree.c (lvalue_p_1): An INDIRECT_REF to a function is an lvalue.\n+\t* call.c (build_object_call): Also support references to functions.\n+\t* typeck.c (convert_for_initialization): Don't decay a function\n+\tif the target is a reference to function.\n+\n+\t* search.c (add_conversions): Get all the overloads from a class.\n+\n+\t* decl.c (grok_ctor_properties): Complain about any constructor\n+\tthat will take a single arg of the class type by value.\n+\n+\t* typeck2.c (build_functional_cast): Can't create objects of \n+\tabstract classes this way.\n+\t* cvt.c (ocp_convert): Likewise.\n+\n+\t* decl.c (grokfndecl): Member functions of local classes are not\n+\tpublic.\n+\n 1998-11-18  Mark Mitchell  <mark@markmitchell.com>\n \n \t* Make-lang.in (cc1plus): Add dependency on hash.o."}, {"sha": "380033054bddd3a46e779da1a17b19aaca4a2c6f", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e76fc6ba25be94f98194ec5e4accdac8a50315/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e76fc6ba25be94f98194ec5e4accdac8a50315/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=59e76fc6ba25be94f98194ec5e4accdac8a50315", "patch": "@@ -2421,7 +2421,8 @@ build_object_call (obj, args)\n       tree fns = TREE_VALUE (convs);\n       tree totype = TREE_TYPE (TREE_TYPE (OVL_CURRENT (fns)));\n \n-      if (TREE_CODE (totype) == POINTER_TYPE\n+      if ((TREE_CODE (totype) == POINTER_TYPE\n+\t   || TREE_CODE (totype) == REFERENCE_TYPE)\n \t  && TREE_CODE (TREE_TYPE (totype)) == FUNCTION_TYPE)\n \tfor (; fns; fns = OVL_NEXT (fns))\n \t  {"}, {"sha": "781f0157c3ca07d2539ab3812c951a9a7631f795", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e76fc6ba25be94f98194ec5e4accdac8a50315/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e76fc6ba25be94f98194ec5e4accdac8a50315/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=59e76fc6ba25be94f98194ec5e4accdac8a50315", "patch": "@@ -814,6 +814,12 @@ ocp_convert (type, expr, convtype, flags)\n \n       ctor = e;\n \n+      if (IS_AGGR_TYPE (type) && CLASSTYPE_ABSTRACT_VIRTUALS (type))\n+\t{\n+\t  abstract_virtuals_error (NULL_TREE, type);\n+\t  return error_mark_node;\n+\t}\n+\n       if ((flags & LOOKUP_ONLYCONVERTING)\n \t  && ! (IS_AGGR_TYPE (dtype) && DERIVED_FROM_P (type, dtype)))\n \t/* For copy-initialization, first we create a temp of the proper type"}, {"sha": "9feae32cd50d847d912159094e9411e0c9af7378", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e76fc6ba25be94f98194ec5e4accdac8a50315/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e76fc6ba25be94f98194ec5e4accdac8a50315/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=59e76fc6ba25be94f98194ec5e4accdac8a50315", "patch": "@@ -8139,8 +8139,10 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n       publicp = 1;\n     }\n \n-  /* Members of anonymous types have no linkage; make them internal.  */\n-  if (ctype && ANON_AGGRNAME_P (TYPE_IDENTIFIER (ctype)))\n+  /* Members of anonymous types and local classes have no linkage; make\n+     them internal.  */\n+  if (ctype && (ANON_AGGRNAME_P (TYPE_IDENTIFIER (ctype))\n+\t\t|| hack_decl_function_context (TYPE_MAIN_DECL (ctype))))\n     publicp = 0;\n \n   if (publicp)\n@@ -11377,8 +11379,9 @@ grok_ctor_properties (ctype, decl)\n \tTYPE_HAS_CONST_INIT_REF (ctype) = 1;\n     }\n   else if (TYPE_MAIN_VARIANT (parmtype) == ctype\n-\t   && TREE_CHAIN (parmtypes) != NULL_TREE\n-\t   && TREE_CHAIN (parmtypes) == void_list_node)\n+\t   && (TREE_CHAIN (parmtypes) == NULL_TREE\n+\t       || TREE_CHAIN (parmtypes) == void_list_node\n+\t       || TREE_PURPOSE (TREE_CHAIN (parmtypes))))\n     {\n       cp_error (\"invalid constructor; you probably meant `%T (const %T&)'\",\n \t\tctype, ctype);\n@@ -13967,10 +13970,10 @@ cplus_expand_expr_stmt (exp)\n \n   if (TREE_TYPE (exp) == unknown_type_node)\n     {\n-      if (TREE_CODE (exp) == ADDR_EXPR || TREE_CODE (exp) == TREE_LIST)\n-\terror (\"address of overloaded function with no contextual type information\");\n-      else if (TREE_CODE (exp) == COMPONENT_REF)\n+      if (TREE_CODE (exp) == COMPONENT_REF)\n \terror (\"invalid reference to a member function name, did you forget the ()?\");\n+      else\n+\terror (\"address of overloaded function with no contextual type information\");\n     }\n   else\n     {"}, {"sha": "f9ec9dced7f12f606179e1b67faf7e77d614e898", "filename": "gcc/cp/search.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e76fc6ba25be94f98194ec5e4accdac8a50315/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e76fc6ba25be94f98194ec5e4accdac8a50315/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=59e76fc6ba25be94f98194ec5e4accdac8a50315", "patch": "@@ -3297,6 +3297,7 @@ add_conversions (binfo)\n {\n   int i;\n   tree method_vec = CLASSTYPE_METHOD_VEC (BINFO_TYPE (binfo));\n+  tree name = NULL_TREE;\n \n   for (i = 2; i < TREE_VEC_LENGTH (method_vec); ++i)\n     {\n@@ -3305,13 +3306,25 @@ add_conversions (binfo)\n       if (!tmp || ! DECL_CONV_FN_P (OVL_CURRENT (tmp)))\n \tbreak;\n \n+      /* We don't want to mark 'name' until we've seen all the overloads\n+\t in this class; we could be overloading on the quals of 'this'.  */\n+      if (name && name != DECL_NAME (tmp))\n+\t{\n+\t  IDENTIFIER_MARKED (name) = 1;\n+\t  name = NULL_TREE;\n+\t}\n+\n       /* Make sure we don't already have this conversion.  */\n       if (! IDENTIFIER_MARKED (DECL_NAME (tmp)))\n \t{\n \t  conversions = scratch_tree_cons (binfo, tmp, conversions);\n-\t  IDENTIFIER_MARKED (DECL_NAME (tmp)) = 1;\n+\t  name = DECL_NAME (tmp);\n \t}\n     }\n+\n+  if (name)\n+     IDENTIFIER_MARKED (name) = 1;\n+\n   return NULL_TREE;\n }\n "}, {"sha": "efbf6b247824caf7773d49f299586c74a7763da8", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e76fc6ba25be94f98194ec5e4accdac8a50315/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e76fc6ba25be94f98194ec5e4accdac8a50315/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=59e76fc6ba25be94f98194ec5e4accdac8a50315", "patch": "@@ -87,8 +87,7 @@ lvalue_p_1 (ref, treat_class_rvalues_as_lvalues)\n     case ARRAY_REF:\n     case PARM_DECL:\n     case RESULT_DECL:\n-      if (TREE_CODE (TREE_TYPE (ref)) != FUNCTION_TYPE\n-\t  && TREE_CODE (TREE_TYPE (ref)) != METHOD_TYPE)\n+      if (TREE_CODE (TREE_TYPE (ref)) != METHOD_TYPE)\n \treturn 1;\n       break;\n "}, {"sha": "e944eee978f0983d451d74e15fe69d23d965f7b2", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e76fc6ba25be94f98194ec5e4accdac8a50315/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e76fc6ba25be94f98194ec5e4accdac8a50315/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=59e76fc6ba25be94f98194ec5e4accdac8a50315", "patch": "@@ -6931,7 +6931,9 @@ convert_for_initialization (exp, type, rhs, flags, errtype, fndecl, parmnum)\n        && TREE_CODE (type) != ARRAY_TYPE\n        && (TREE_CODE (type) != REFERENCE_TYPE\n \t   || TREE_CODE (TREE_TYPE (type)) != ARRAY_TYPE))\n-      || TREE_CODE (TREE_TYPE (rhs)) == FUNCTION_TYPE\n+      || (TREE_CODE (TREE_TYPE (rhs)) == FUNCTION_TYPE\n+\t  && (TREE_CODE (type) != REFERENCE_TYPE\n+\t      || TREE_CODE (TREE_TYPE (type)) != FUNCTION_TYPE))\n       || TREE_CODE (TREE_TYPE (rhs)) == METHOD_TYPE)\n     rhs = default_conversion (rhs);\n "}, {"sha": "ed655cd2965e3631509d6653b41d2a862a61e889", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e76fc6ba25be94f98194ec5e4accdac8a50315/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e76fc6ba25be94f98194ec5e4accdac8a50315/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=59e76fc6ba25be94f98194ec5e4accdac8a50315", "patch": "@@ -1438,6 +1438,11 @@ build_functional_cast (exp, parms)\n       cp_error (\"type `%T' is not yet defined\", type);\n       return error_mark_node;\n     }\n+  if (IS_AGGR_TYPE (type) && CLASSTYPE_ABSTRACT_VIRTUALS (type))\n+    {\n+      abstract_virtuals_error (NULL_TREE, type);\n+      return error_mark_node;\n+    }\n \n   if (parms && TREE_CHAIN (parms) == NULL_TREE)\n     return build_c_cast (type, TREE_VALUE (parms));"}]}