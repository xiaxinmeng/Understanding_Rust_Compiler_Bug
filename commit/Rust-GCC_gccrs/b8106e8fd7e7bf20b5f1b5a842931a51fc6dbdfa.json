{"sha": "b8106e8fd7e7bf20b5f1b5a842931a51fc6dbdfa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgxMDZlOGZkN2U3YmYyMGI1ZjFiNWE4NDI5MzFhNTFmYzZkYmRmYQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-09-09T13:26:17Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-09-09T13:26:17Z"}, "message": "compiler: make sure type descriptor initializers go in .rodata\n    \n    When creating type descriptor variables, the compiler (specifically\n    Type::make_type_descriptor_var) invokes the immutable_struct() and\n    immutable_struct_set_init() back end methods, so as to insure that\n    these items go into the \".rodata\" section of the generate object file.\n    The expression initializers for these variables can contain nested\n    subexpressions, however, and these subexpressions were not always\n    being placed into .rodata. This patch changes the backend-gen code for\n    slice initializers to emit implicit variables into .rodata if those\n    initializers are part of a type descriptor init.\n    \n    Reviewed-on: https://go-review.googlesource.com/132596\n\nFrom-SVN: r264181", "tree": {"sha": "d86d734cb4c7d27b3d328f32d6c58a8e73202e07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d86d734cb4c7d27b3d328f32d6c58a8e73202e07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8106e8fd7e7bf20b5f1b5a842931a51fc6dbdfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8106e8fd7e7bf20b5f1b5a842931a51fc6dbdfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8106e8fd7e7bf20b5f1b5a842931a51fc6dbdfa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8106e8fd7e7bf20b5f1b5a842931a51fc6dbdfa/comments", "author": null, "committer": null, "parents": [{"sha": "04dad37c39e77274ff30873e2c8a205c764df5ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04dad37c39e77274ff30873e2c8a205c764df5ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04dad37c39e77274ff30873e2c8a205c764df5ce"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "1ef2c8d39d3a11bc52879856116f3fae01a175a4", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8106e8fd7e7bf20b5f1b5a842931a51fc6dbdfa/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8106e8fd7e7bf20b5f1b5a842931a51fc6dbdfa/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=b8106e8fd7e7bf20b5f1b5a842931a51fc6dbdfa", "patch": "@@ -1,4 +1,4 @@\n-da249ffd264154cc992e76ff03f91f700d3bf53e\n+06e688ff6d829c8de3735e9f59b61b373afc596f\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "efc8eba99082f376278d8d8f7857121757035f5a", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8106e8fd7e7bf20b5f1b5a842931a51fc6dbdfa/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8106e8fd7e7bf20b5f1b5a842931a51fc6dbdfa/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=b8106e8fd7e7bf20b5f1b5a842931a51fc6dbdfa", "patch": "@@ -4453,7 +4453,8 @@ Unary_expression::do_get_backend(Translate_context* context)\n \t      // initialize the value once, so we can use this directly\n \t      // rather than copying it.  In that case we can't make it\n \t      // read-only, because the program is permitted to change it.\n-\t      copy_to_heap = context->function() != NULL;\n+\t      copy_to_heap = (context->function() != NULL\n+                              || context->is_const());\n \t    }\n \t  std::string asm_name(go_selectively_encode_id(var_name));\n \t  Bvariable* implicit ="}]}