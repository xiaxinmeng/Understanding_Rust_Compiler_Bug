{"sha": "a76acaedcee2e75b16adfa0112632873c1fe2e71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc2YWNhZWRjZWUyZTc1YjE2YWRmYTAxMTI2MzI4NzNjMWZlMmU3MQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-03-07T19:30:31Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-03-07T19:30:31Z"}, "message": "PR tree-optimization/84468 - bogus -Wstringop-truncation despite assignment after conditional strncpy\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/84468\n\t* tree-ssa-strlen.c (maybe_diag_stxncpy_trunc): Consider successor\n\tbasic block when looking for nul assignment.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/84468\n\t* g++.dg/warn/Wstringop-truncation-2.C: New test.\n\t* gcc.dg/Wstringop-truncation.c: New test.\n\t* gcc.dg/Wstringop-truncation-2.c: New test.\n\nFrom-SVN: r258339", "tree": {"sha": "06a0c23188ccd0d051f0d12c261d793b03baaa68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06a0c23188ccd0d051f0d12c261d793b03baaa68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a76acaedcee2e75b16adfa0112632873c1fe2e71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a76acaedcee2e75b16adfa0112632873c1fe2e71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a76acaedcee2e75b16adfa0112632873c1fe2e71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a76acaedcee2e75b16adfa0112632873c1fe2e71/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b78b513e41b3d491efa0bd639cedbad8622a09bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b78b513e41b3d491efa0bd639cedbad8622a09bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b78b513e41b3d491efa0bd639cedbad8622a09bd"}], "stats": {"total": 465, "additions": 462, "deletions": 3}, "files": [{"sha": "1e988ed719927844fc707e42286c4983bbadbb51", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a76acaedcee2e75b16adfa0112632873c1fe2e71/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a76acaedcee2e75b16adfa0112632873c1fe2e71/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a76acaedcee2e75b16adfa0112632873c1fe2e71", "patch": "@@ -1,3 +1,9 @@\n+2018-03-07  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/84468\n+\t* tree-ssa-strlen.c (maybe_diag_stxncpy_trunc): Consider successor\n+\tbasic block when looking for nul assignment.\n+\n 2018-03-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR target/84277"}, {"sha": "8e273c6bf6ce709e2fa179cf22dbf89c9151fc7e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a76acaedcee2e75b16adfa0112632873c1fe2e71/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a76acaedcee2e75b16adfa0112632873c1fe2e71/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a76acaedcee2e75b16adfa0112632873c1fe2e71", "patch": "@@ -1,3 +1,10 @@\n+2018-03-07  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/84468\n+\t* g++.dg/warn/Wstringop-truncation-2.C: New test.\n+\t* gcc.dg/Wstringop-truncation.c: New test.\n+\t* gcc.dg/Wstringop-truncation-2.c: New test.\n+\n 2018-03-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/84565"}, {"sha": "83066019772e6eadc548afb3ee30a29c88336956", "filename": "gcc/testsuite/g++.dg/warn/Wstringop-truncation-1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a76acaedcee2e75b16adfa0112632873c1fe2e71/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-truncation-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a76acaedcee2e75b16adfa0112632873c1fe2e71/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-truncation-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-truncation-1.C?ref=a76acaedcee2e75b16adfa0112632873c1fe2e71", "patch": "@@ -37,7 +37,7 @@ void good_nowarn_size_m1 ()\n   sink (&str);\n }\n \n-void good_nowarn_size_m1_var (const char* s)\n+static void good_nowarn_size_m1_var (const char* s)\n {\n   GoodString<3> str (s);        // { dg-bogus \"\\\\\\[-Wstringop-truncation]\" }\n   sink (&str);\n@@ -112,7 +112,7 @@ private:\n   char str[N + 1];\n };\n \n-void bad3_warn_size_m1_var (const char *s)\n+static void bad3_warn_size_m1_var (const char *s)\n {\n   BadString3<3> str (s);\n   sink (&str);"}, {"sha": "ebbd44307d9ac04621de8660f7799d7567328519", "filename": "gcc/testsuite/g++.dg/warn/Wstringop-truncation-2.C", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a76acaedcee2e75b16adfa0112632873c1fe2e71/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-truncation-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a76acaedcee2e75b16adfa0112632873c1fe2e71/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-truncation-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-truncation-2.C?ref=a76acaedcee2e75b16adfa0112632873c1fe2e71", "patch": "@@ -0,0 +1,164 @@\n+// PR tree-optimization/84468 - bogus -Wstringop-truncation despite\n+// assignment after conditional strncpy\n+// Compile with -g to verify the warning deals properly with debug\n+// statements.\n+// { dg-do compile }\n+// { dg-options \"-O2 -Wstringop-truncation -g\" }\n+\n+extern \"C\" char* strncpy (char*, const char*, __SIZE_TYPE__);\n+\n+char d[3];\n+\n+void g ();\n+\n+void fnowarn1 (const char *s)\n+{\n+  // Update dummy but never actually use it so it's eliminated\n+  // but causes debugging statements to be emitted for each\n+  // modification.\n+  int dummy = 0;\n+\n+  try\n+    {\n+      g ();\n+      strncpy (d, s, sizeof d);   // { dg-bogus \"\\\\\\[-Wstringop-truncation]\" }\n+      ++dummy;\n+    }\n+  catch (...)\n+    {\n+      ++dummy;\n+      d[0] = 0;\n+    }\n+\n+  ++dummy;\n+  d[sizeof d - 1] = 0;\n+}\n+\n+void fnowarn2 (const char *s)\n+{\n+  int dummy = 0;\n+\n+  try\n+    {\n+      g ();\n+      strncpy (d, s, sizeof d);\n+      ++dummy;\n+    }\n+  catch (...)\n+    {\n+      ++dummy;\n+      return;\n+    }\n+\n+  ++dummy;\n+  d[sizeof d - 1] = 0;\n+}\n+\n+void fnowarn3 (const char *s)\n+{\n+  int dummy = 0;\n+\n+  try\n+    {\n+      g ();\n+      strncpy (d, s, sizeof d);\n+      ++dummy;\n+      try\n+\t{\n+\t  ++dummy;\n+\t  d[sizeof d - 1] = 0;\n+\t  g ();\n+\t}\n+      catch (...)\n+\t{\n+\t  ++dummy;\n+\t}\n+    }\n+  catch (...)\n+    {\n+      ++dummy;\n+      return;\n+    }\n+\n+  ++dummy;\n+  d[sizeof d - 1] = 0;\n+}\n+\n+void fnowarn4 (const char *s)\n+{\n+  int dummy = 0;\n+\n+  try\n+    {\n+      g ();\n+    }\n+  catch (...)\n+    {\n+      strncpy (d, s, sizeof d);   // { dg-bogus \"\\\\\\[-Wstringop-truncation]\" \"bug 84468\" { xfail *-*-*} }\n+      ++dummy;\n+    }\n+\n+  ++dummy;\n+  d[sizeof d - 1] = 0;\n+}\n+\n+void fwarn1 (const char *s)\n+{\n+  int dummy = 0;\n+\n+  try\n+    {\n+      ++dummy;\n+      g ();\n+      ++dummy;\n+      strncpy (d, s, sizeof d);   // { dg-warning \"\\\\\\[-Wstringop-truncation]\" }\n+      ++dummy;\n+    }\n+  catch (...)\n+    {\n+      ++dummy;\n+    }\n+\n+  ++dummy;\n+}\n+\n+void fwarn2 (const char *s)\n+{\n+  int dummy = 0;\n+\n+  try\n+    {\n+      ++dummy;\n+      strncpy (d, s, sizeof d);   // { dg-warning \"\\\\\\[-Wstringop-truncation]\" }\n+      ++dummy;\n+      g ();\n+      ++dummy;\n+    }\n+  catch (...)\n+    {\n+      ++dummy;\n+    }\n+\n+  ++dummy;\n+}\n+\n+void fwarn3 (const char *s)\n+{\n+  int dummy = 0;\n+\n+  try\n+    {\n+      ++dummy;\n+      g ();\n+      ++dummy;\n+      strncpy (d, s, sizeof d);   // { dg-warning \"\\\\\\[-Wstringop-truncation]\" }\n+      ++dummy;\n+    }\n+  catch (...)\n+    {\n+      ++dummy;\n+      d[0] = 0;\n+    }\n+\n+  ++dummy;\n+}"}, {"sha": "707a511d92e0ed6497360f5133b994d21364ad77", "filename": "gcc/testsuite/gcc.dg/Wstringop-truncation-2.c", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a76acaedcee2e75b16adfa0112632873c1fe2e71/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-truncation-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a76acaedcee2e75b16adfa0112632873c1fe2e71/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-truncation-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-truncation-2.c?ref=a76acaedcee2e75b16adfa0112632873c1fe2e71", "patch": "@@ -0,0 +1,126 @@\n+/* PR tree-optimization/84468 - bogus -Wstringop-truncation despite\n+   assignment after conditional strncpy\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wstringop-truncation -g\" } */\n+\n+extern char* strncpy (char*, const char*, __SIZE_TYPE__);\n+\n+char a[4];\n+\n+void f1 (char *s)\n+{\n+  int i = 0;\n+\n+  if (s[0] == '0')\n+    {\n+      i += 1;\n+      strncpy (a, s, sizeof a);                   /* { dg-bogus \"\\\\\\[-Wstringop-truncation]\" } */\n+    }\n+  else\n+    i += 2;\n+\n+  a[sizeof a - 1] = 0;\n+}\n+\n+void f2 (char *s)\n+{\n+  int i = 0;\n+\n+  if (s[0] == '0')\n+    {\n+      i += 1;\n+      if (s[1] == '1')\n+\t{\n+\t  i += 2;\n+\t  strncpy (a, s, sizeof a);               /* { dg-bogus \"\\\\\\[-Wstringop-truncation]\" } */\n+\t}\n+      else\n+\ti += 3;\n+    }\n+  else\n+    i += 4;\n+\n+  a[sizeof a - 1] = 0;\n+}\n+\n+void f3 (char *s)\n+{\n+  int i = 0;\n+\n+  if (s[0] == '0')\n+    {\n+      i += 1;\n+      if (s[1] == '1')\n+\t{\n+\t  i += 2;\n+\t  if (s[2] == '2')\n+\t    strncpy (a, s, sizeof a);             /* { dg-bogus \"\\\\\\[-Wstringop-truncation]\" } */\n+\t  else\n+\t    i += 3;\n+\t}\n+      else\n+\ti += 4;\n+    }\n+  else\n+    i += 5;\n+\n+  a[sizeof a - 1] = 0;\n+}\n+\n+void f4 (char *s)\n+{\n+  int i = 0;\n+\n+  if (s[0] == '0')\n+    {\n+      i += 1;\n+      if (s[1] == '1')\n+\t{\n+\t  i += 2;\n+\t  if (s[2] == '2')\n+\t    {\n+\t      i += 3;\n+\t      if (s[3] == '3')\n+\t\tstrncpy (a, s, sizeof a);         /* { dg-bogus \"\\\\\\[-Wstringop-truncation]\" } */\n+\t      else\n+\t\ti += 4;\n+\t    }\n+\t  else\n+\t    i += 5;\n+\t}\n+      else\n+\ti += 6;\n+    }\n+  else\n+    i += 7;\n+\n+  a[sizeof a - 1] = 0;\n+}\n+\n+void f4_warn (char *s)\n+{\n+  int i = 0;\n+\n+  if (s[0] == '0')\n+    {\n+      i += 1;\n+      if (s[1] == '1')\n+\t{\n+\t  i += 2;\n+\t  if (s[2] == '2')\n+\t    {\n+\t      i += 3;\n+\t      if (s[3] == '3')\n+\t\tstrncpy (a, s, sizeof a);         /* { dg-warning \"\\\\\\[-Wstringop-truncation]\" } */\n+\t      else\n+\t\ti += 4;\n+\t    }\n+\t  else\n+\t    i += 5;\n+\t}\n+      else\n+\ti += 6;\n+    }\n+  else\n+    i += 7;\n+}"}, {"sha": "b537296779074a878a5325c6aff3f42ff74e1735", "filename": "gcc/testsuite/gcc.dg/Wstringop-truncation.c", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a76acaedcee2e75b16adfa0112632873c1fe2e71/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-truncation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a76acaedcee2e75b16adfa0112632873c1fe2e71/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-truncation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-truncation.c?ref=a76acaedcee2e75b16adfa0112632873c1fe2e71", "patch": "@@ -0,0 +1,131 @@\n+/* PR tree-optimization/84468 - Inconsistent -Wstringop-truncation warnings\n+   with -O2\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wstringop-truncation -ftrack-macro-expansion=0 -g\" }  */\n+\n+#define strncpy __builtin_strncpy\n+\n+struct A\n+{\n+  char a[4];\n+};\n+\n+void no_pred_succ_lit (struct A *p)\n+{\n+  /* The following is folded early on, before the strncpy statement\n+     has a basic block.  Verify that the case is handled gracefully\n+     (i.e., there's no assumption that the statement does have\n+     a basic block).  */\n+  strncpy (p->a, \"1234\", sizeof p->a - 1);    /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+}\n+\n+/* Verify a strncpy call in a basic block with no predecessor or\n+   successor.  */\n+void no_pred_succ (struct A *p, const struct A *q)\n+{\n+  strncpy (p->a, q->a, sizeof p->a - 1);      /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+}\n+\n+\n+/* Verify a strncpy call in a basic block with no successor.  */\n+void no_succ (struct A *p, const struct A *q)\n+{\n+  if (q->a)\n+    strncpy (p->a, q->a, sizeof p->a - 1);    /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+}\n+\n+/* Verify a strncpy call in a basic block with nul assignment in\n+   a successor block.  */\n+void succ (struct A *p, const struct A *q)\n+{\n+  /* Verify that the assignment suppresses the warning for the conditional\n+     strcnpy call.  The conditional should be folded to true since the\n+     address of an array can never be null (see bug 84470).  */\n+  if (q->a)\n+    strncpy (p->a, q->a, sizeof p->a - 1);    /* { dg-bogus \"\\\\\\[-Wstringop-truncation\" } */\n+\n+  p->a[sizeof p->a - 1] = 0;\n+}\n+\n+\n+void succ_2 (struct A *p, const struct A *q, int i)\n+{\n+  /* Same as above but with a conditional that cannot be eliminated.  */\n+  if (i < 0)\n+    strncpy (p->a, q->a, sizeof p->a - 1);    /* { dg-bogus \"\\\\\\[-Wstringop-truncation\" } */\n+\n+  p->a[sizeof p->a - 1] = 0;\n+}\n+\n+\n+/* Verify a strncpy call in a basic block with nul assignment in\n+   the next successor block.  */\n+int next_succ (struct A *p, const struct A *q, int i, int j)\n+{\n+  /* Same as above but with a nested conditionals with else clauses.  */\n+  if (i < 0)\n+    {\n+      if (j < 0)\n+\tstrncpy (p->a, q->a, sizeof p->a - 1);    /* { dg-bogus \"\\\\\\[-Wstringop-truncation\" } */\n+    }\n+  else\n+    __builtin_strcpy (p->a, q->a);\n+\n+  p->a[sizeof p->a - 1] = 0;\n+  return 0;\n+}\n+\n+\n+int next_succ_1 (struct A *p, const struct A *q, int i, int j)\n+{\n+  /* Same as above but with a nested conditionals with else clauses.  */\n+  if (i < 0)\n+    {\n+      if (j < 0)\n+\tstrncpy (p->a, q->a, sizeof p->a - 1);    /* { dg-bogus \"\\\\\\[-Wstringop-truncation\" } */\n+      else\n+\tstrncpy (p->a, q->a, sizeof p->a - 2);    /* { dg-bogus \"\\\\\\[-Wstringop-truncation\" } */\n+    }\n+\n+  p->a[sizeof p->a - 2] = 0;\n+  return 1;\n+}\n+\n+\n+int next_succ_2 (struct A *p, const struct A *q, int i, int j)\n+{\n+  /* Same as above but with a nested conditionals with else clauses.  */\n+  if (i < 0)\n+    {\n+      if (j < 0)\n+\tstrncpy (p->a, q->a, sizeof p->a - 1);    /* { dg-bogus \"\\\\\\[-Wstringop-truncation\" } */\n+      else\n+\tstrncpy (p->a, q->a, sizeof p->a - 2);    /* { dg-bogus \"\\\\\\[-Wstringop-truncation\" } */\n+    }\n+  else\n+    __builtin_strcpy (p->a, q->a);\n+\n+  p->a[sizeof p->a - 2] = 0;\n+  return 2;\n+}\n+\n+\n+void cond_succ_warn (struct A *p, const struct A *q, int i)\n+{\n+  /* Verify that a conditional assignment doesn't suppress the warning.  */\n+  strncpy (p->a, q->a, sizeof p->a - 1);      /* { dg-warning \"\\\\\\[-Wstringop-truncation\" } */\n+\n+  if (i < 0)\n+    p->a[sizeof p->a - 1] = 0;\n+}\n+\n+void cond_succ_nowarn (struct A *p, const struct A *q)\n+{\n+  /* Verify that distinct but provably equivalent conditionals are\n+     recognized and don't trigger the warning.  */\n+  if (p != q)\n+    strncpy (p->a, q->a, sizeof p->a - 1);\n+\n+  if (p->a != q->a)\n+    p->a[sizeof p->a - 1] = 0;\n+}"}, {"sha": "72f6a17cd322ca387d56ed4f58e1e6241bc2b52a", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a76acaedcee2e75b16adfa0112632873c1fe2e71/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a76acaedcee2e75b16adfa0112632873c1fe2e71/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=a76acaedcee2e75b16adfa0112632873c1fe2e71", "patch": "@@ -1856,8 +1856,33 @@ maybe_diag_stxncpy_trunc (gimple_stmt_iterator gsi, tree src, tree cnt)\n      avoid the truncation warning.  */\n   gsi_next_nondebug (&gsi);\n   gimple *next_stmt = gsi_stmt (gsi);\n+  if (!next_stmt)\n+    {\n+      /* When there is no statement in the same basic block check\n+\t the immediate successor block.  */\n+      if (basic_block bb = gimple_bb (stmt))\n+\t{\n+\t  if (single_succ_p (bb))\n+\t    {\n+\t      /* For simplicity, ignore blocks with multiple outgoing\n+\t\t edges for now and only consider successor blocks along\n+\t\t normal edges.  */\n+\t      edge e = EDGE_SUCC (bb, 0);\n+\t      if (!(e->flags & EDGE_ABNORMAL))\n+\t\t{\n+\t\t  gsi = gsi_start_bb (e->dest);\n+\t\t  next_stmt = gsi_stmt (gsi);\n+\t\t  if (next_stmt && is_gimple_debug (next_stmt))\n+\t\t    {\n+\t\t      gsi_next_nondebug (&gsi);\n+\t\t      next_stmt = gsi_stmt (gsi);\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+    }\n \n-  if (!gsi_end_p (gsi) && is_gimple_assign (next_stmt))\n+  if (next_stmt && is_gimple_assign (next_stmt))\n     {\n       tree lhs = gimple_assign_lhs (next_stmt);\n       tree_code code = TREE_CODE (lhs);"}]}