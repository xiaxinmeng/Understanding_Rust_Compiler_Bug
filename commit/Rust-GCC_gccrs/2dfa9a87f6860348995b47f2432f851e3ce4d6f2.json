{"sha": "2dfa9a87f6860348995b47f2432f851e3ce4d6f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRmYTlhODdmNjg2MDM0ODk5NWI0N2YyNDMyZjg1MWUzY2U0ZDZmMg==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "1999-03-15T01:52:49Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "1999-03-15T01:52:49Z"}, "message": "rtlanal.c (auto_inc_p): New function.\n\n\t* rtlanal.c (auto_inc_p): New function.\n        * rtl.h (auto_inc_p): Prototype it.\n\t* reload1.c (add_auto_inc_notes): New function.\n\t(reload): Strip REG_INC notes and call add_auto_inc_notes\n\tfor each insn to restore them correctly.\n\nFrom-SVN: r25774", "tree": {"sha": "7fe0df0111a98b6f7af1daa0cbded32b22f3ac51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fe0df0111a98b6f7af1daa0cbded32b22f3ac51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dfa9a87f6860348995b47f2432f851e3ce4d6f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dfa9a87f6860348995b47f2432f851e3ce4d6f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dfa9a87f6860348995b47f2432f851e3ce4d6f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dfa9a87f6860348995b47f2432f851e3ce4d6f2/comments", "author": null, "committer": null, "parents": [{"sha": "7ae575286e5c6b27aa69f2d6d80b0497dbfabd10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ae575286e5c6b27aa69f2d6d80b0497dbfabd10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ae575286e5c6b27aa69f2d6d80b0497dbfabd10"}], "stats": {"total": 83, "additions": 78, "deletions": 5}, "files": [{"sha": "cbf81e5dbb2653e04e9b685eeae7ba33fe43e03f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dfa9a87f6860348995b47f2432f851e3ce4d6f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dfa9a87f6860348995b47f2432f851e3ce4d6f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2dfa9a87f6860348995b47f2432f851e3ce4d6f2", "patch": "@@ -1,3 +1,11 @@\n+Mon Mar 15 22:50:18 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* rtlanal.c (auto_inc_p): New function.\n+        * rtl.h (auto_inc_p): Prototype it.\n+\t* reload1.c (add_auto_inc_notes): New function.\n+\t(reload): Strip REG_INC notes and call add_auto_inc_notes\n+\tfor each insn to restore them correctly.\n+\n 1999-03-15  Manfred Hollstein  <manfred@s-direktnet.de>\n \n \t* fixinc/Makefile.in (procopen.o): List the actual"}, {"sha": "1e83d5fe4be18e327274ce3bc68253ad46db66f7", "filename": "gcc/reload1.c", "status": "modified", "additions": 45, "deletions": 5, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dfa9a87f6860348995b47f2432f851e3ce4d6f2/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dfa9a87f6860348995b47f2432f851e3ce4d6f2/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=2dfa9a87f6860348995b47f2432f851e3ce4d6f2", "patch": "@@ -443,6 +443,9 @@ static void reload_combine_note_use PROTO((rtx *, rtx));\n static void reload_combine_note_store PROTO((rtx, rtx));\n static void reload_cse_move2add PROTO((rtx));\n static void move2add_note_store PROTO((rtx, rtx));\n+#ifdef AUTO_INC_DEC\n+static void add_auto_inc_notes PROTO((rtx, rtx));\n+#endif\n \f\n /* Initialize the reload pass once per compilation.  */\n \n@@ -1124,11 +1127,13 @@ reload (first, global, dumpfile)\n      which are only valid during and after reload.  */\n   reload_completed = 1;\n \n-  /* Make a pass over all the insns and delete all USEs which we inserted\n-     only to tag a REG_EQUAL note on them.  Remove all REG_DEAD and REG_UNUSED\n-     notes.  Delete all CLOBBER insns and simplify (subreg (reg)) operands.\n-     Also remove all REG_RETVAL and REG_LIBCALL notes since they are no longer\n-     useful or accurate.  */\n+  /* Make a pass over all the insns and delete all USEs which we\n+     inserted only to tag a REG_EQUAL note on them.  Remove all\n+     REG_DEAD and REG_UNUSED notes.  Delete all CLOBBER insns and\n+     simplify (subreg (reg)) operands.  Also remove all REG_RETVAL and\n+     REG_LIBCALL notes since they are no longer useful or accurate.\n+     Strip and regenerate REG_INC notes that may have been moved\n+     around.  */\n \n   for (insn = first; insn; insn = NEXT_INSN (insn))\n     if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n@@ -1150,13 +1155,18 @@ reload (first, global, dumpfile)\n \t  {\n \t    if (REG_NOTE_KIND (*pnote) == REG_DEAD\n \t\t|| REG_NOTE_KIND (*pnote) == REG_UNUSED\n+\t\t|| REG_NOTE_KIND (*pnote) == REG_INC\n \t\t|| REG_NOTE_KIND (*pnote) == REG_RETVAL\n \t\t|| REG_NOTE_KIND (*pnote) == REG_LIBCALL)\n \t      *pnote = XEXP (*pnote, 1);\n \t    else\n \t      pnote = &XEXP (*pnote, 1);\n \t  }\n \n+#ifdef AUTO_INC_DEC\n+\tadd_auto_inc_notes (insn, PATTERN (insn));\n+#endif\n+\n \t/* And simplify (subreg (reg)) if it appears as an operand.  */\n \tcleanup_subreg_operands (insn);\n       }\n@@ -10131,3 +10141,33 @@ move2add_note_store (dst, set)\n \t}\n     }\n }\n+\n+#ifdef AUTO_INC_DEC\n+static void\n+add_auto_inc_notes (insn, x)\n+     rtx insn;\n+     rtx x;\n+{\n+  enum rtx_code code = GET_CODE (x);\n+  char *fmt;\n+  int i, j;\n+\n+  if (code == MEM && auto_inc_p (XEXP (x, 0)))\n+    {\n+      REG_NOTES (insn)\n+\t= gen_rtx_EXPR_LIST (REG_INC, XEXP (XEXP (x, 0), 0), REG_NOTES (insn));\n+      return;\n+    }\n+\n+  /* Scan all the operand sub-expressions.  */\n+  fmt = GET_RTX_FORMAT (code);\n+  for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n+    {\n+      if (fmt[i] == 'e')\n+\tadd_auto_inc_notes (insn, XEXP (x, i));\n+      else if (fmt[i] == 'E')\n+\tfor (j = XVECLEN (x, i) - 1; j >= 0; j--)\n+\t  add_auto_inc_notes (insn, XVECEXP (x, i, j));\n+    }\n+}\n+#endif"}, {"sha": "18489d372b468ad71b85fd5d9b195dd47a260b0d", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dfa9a87f6860348995b47f2432f851e3ce4d6f2/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dfa9a87f6860348995b47f2432f851e3ce4d6f2/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=2dfa9a87f6860348995b47f2432f851e3ce4d6f2", "patch": "@@ -1041,6 +1041,7 @@ extern int computed_jump_p\t\tPROTO((rtx));\n typedef int (*rtx_function)             PROTO((rtx *, void *));\n extern int for_each_rtx                 PROTO((rtx *, rtx_function, void *));\n extern rtx regno_use_in\t\t\tPROTO((int, rtx));\n+extern int auto_inc_p\t\t\tPROTO((rtx));\n \n /* flow.c */\n "}, {"sha": "8347849c6e197c7f307948bb717b5b992fad633c", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dfa9a87f6860348995b47f2432f851e3ce4d6f2/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dfa9a87f6860348995b47f2432f851e3ce4d6f2/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=2dfa9a87f6860348995b47f2432f851e3ce4d6f2", "patch": "@@ -2235,3 +2235,27 @@ regno_use_in (regno, x)\n \n   return NULL_RTX;\n }\n+\n+\n+/* Return 1 if X is an autoincrement side effect and the register is\n+   not the stack pointer.  */\n+int\n+auto_inc_p (x)\n+     rtx x;\n+{\n+  switch (GET_CODE (x))\n+    {\n+    case PRE_INC:\n+    case POST_INC:\n+    case PRE_DEC:\n+    case POST_DEC:\n+    case PRE_MODIFY:\n+    case POST_MODIFY:\n+      /* There are no REG_INC notes for SP.  */\n+      if (XEXP (x, 0) != stack_pointer_rtx)\n+\treturn 1;\n+    default:\n+      break;\n+    }\n+  return 0;\n+}"}]}