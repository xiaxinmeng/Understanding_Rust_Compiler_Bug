{"sha": "3fa39831668c00d32632f72860cbacbcf8bef1cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZhMzk4MzE2NjhjMDBkMzI2MzJmNzI4NjBjYmFjYmNmOGJlZjFjYg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-07-02T09:14:03Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-07-02T09:14:03Z"}, "message": "re PR tree-optimization/44748 (ICE: in fold_convert_const_int_from_real, at fold-const.c:1548)\n\n2010-07-02  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/44748\n\t* tree-ssa-ccp.c (fold_const_aggregate_ref): Properly handle\n\tthe embedded conversion in MEM_REFs.\n\n\t* gcc.dg/tree-ssa/ssa-ccp-29.c: New testcase.\n\nFrom-SVN: r161689", "tree": {"sha": "e275a509ae2b4520b1fe0b16331bf4376e900379", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e275a509ae2b4520b1fe0b16331bf4376e900379"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fa39831668c00d32632f72860cbacbcf8bef1cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa39831668c00d32632f72860cbacbcf8bef1cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fa39831668c00d32632f72860cbacbcf8bef1cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa39831668c00d32632f72860cbacbcf8bef1cb/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c7481f253d8943d16947248d76d7f717f8d7028", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c7481f253d8943d16947248d76d7f717f8d7028", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c7481f253d8943d16947248d76d7f717f8d7028"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "365a719ed81d1a039376f6ac4689da8047e2c141", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa39831668c00d32632f72860cbacbcf8bef1cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa39831668c00d32632f72860cbacbcf8bef1cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3fa39831668c00d32632f72860cbacbcf8bef1cb", "patch": "@@ -1,3 +1,9 @@\n+2010-07-02  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/44748\n+\t* tree-ssa-ccp.c (fold_const_aggregate_ref): Properly handle\n+\tthe embedded conversion in MEM_REFs.\n+\n 2010-07-01  L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* reload.c: Include toplev.h."}, {"sha": "d9c0a99a7bd09f29b9a276e952915233a739c7f0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa39831668c00d32632f72860cbacbcf8bef1cb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa39831668c00d32632f72860cbacbcf8bef1cb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3fa39831668c00d32632f72860cbacbcf8bef1cb", "patch": "@@ -1,3 +1,8 @@\n+2010-07-02  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/44748\n+\t* gcc.dg/tree-ssa/ssa-ccp-29.c: New testcase.\n+\n 2010-07-02  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* objc-obj-c++-shared/next-abi.h: Remove dependency on system"}, {"sha": "44d2945a311f938f1d0f9fe54b1e7d5c4d325a5f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ccp-29.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa39831668c00d32632f72860cbacbcf8bef1cb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa39831668c00d32632f72860cbacbcf8bef1cb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-29.c?ref=3fa39831668c00d32632f72860cbacbcf8bef1cb", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-ccp2\" } */\n+\n+static double num;\n+int foo (void)\n+{\n+  return *(unsigned *)&num;\n+}\n+\n+/* { dg-final { scan-tree-dump \"return 0;\" \"ccp2\" } } */\n+/* { dg-final { cleanup-tree-dump \"ccp2\" } } */"}, {"sha": "1e2309acb167d0821c076062d9665b647280ec37", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa39831668c00d32632f72860cbacbcf8bef1cb/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa39831668c00d32632f72860cbacbcf8bef1cb/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=3fa39831668c00d32632f72860cbacbcf8bef1cb", "patch": "@@ -1317,7 +1317,14 @@ fold_const_aggregate_ref (tree t)\n \t  if (DECL_P (base)\n \t      && !AGGREGATE_TYPE_P (TREE_TYPE (base))\n \t      && integer_zerop (TREE_OPERAND (t, 1)))\n-\t    return get_symbol_constant_value (base);\n+\t    {\n+\t      tree res = get_symbol_constant_value (base);\n+\t      if (res\n+\t\t  && !useless_type_conversion_p\n+\t\t        (TREE_TYPE (t), TREE_TYPE (res)))\n+\t\tres = fold_unary (VIEW_CONVERT_EXPR, TREE_TYPE (t), res);\n+\t      return res;\n+\t    }\n \n \t  if (!TREE_READONLY (base)\n \t      || TREE_CODE (TREE_TYPE (base)) != ARRAY_TYPE"}]}