{"sha": "b6422cca6ec7b3cc3704dd2b4ea27b5969b239e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY0MjJjY2E2ZWM3YjNjYzM3MDRkZDJiNGVhMjdiNTk2OWIyMzllNw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-05T01:46:51Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-05T01:46:51Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r893", "tree": {"sha": "a362ff235742e948b671c96baf93165a6acc19f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a362ff235742e948b671c96baf93165a6acc19f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6422cca6ec7b3cc3704dd2b4ea27b5969b239e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6422cca6ec7b3cc3704dd2b4ea27b5969b239e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6422cca6ec7b3cc3704dd2b4ea27b5969b239e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6422cca6ec7b3cc3704dd2b4ea27b5969b239e7/comments", "author": null, "committer": null, "parents": [{"sha": "c1c691dd6794a313d7eb3cd78fa416655b326fc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1c691dd6794a313d7eb3cd78fa416655b326fc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1c691dd6794a313d7eb3cd78fa416655b326fc4"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "384d214c36cd351e0a99e05bf0a5e492bb43dc4b", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6422cca6ec7b3cc3704dd2b4ea27b5969b239e7/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6422cca6ec7b3cc3704dd2b4ea27b5969b239e7/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=b6422cca6ec7b3cc3704dd2b4ea27b5969b239e7", "patch": "@@ -961,13 +961,13 @@ __bb_init_func (blocks)\n typedef void (*vfp)(void);\n \n extern vfp __new_handler;\n+extern void *malloc ();\n \n void *\n __builtin_new (sz)\n-     long sz;\n+     size_t sz;\n {\n   void *p;\n-  extern void *malloc ();\n \n   p = malloc (sz);\n   if (p == 0)\n@@ -979,18 +979,20 @@ __builtin_new (sz)\n #ifdef L_builtin_New\n typedef void (*vfp)(void);\n \n-extern void *__builtin_new ();\n-static void default_new_handler ();\n+extern void *__builtin_new (size_t);\n+static void default_new_handler (void);\n \n vfp __new_handler = default_new_handler;\n \n void *\n __builtin_vec_new (p, maxindex, size, ctor)\n      void *p;\n-     int maxindex, size;\n+     size_t maxindex;\n+     size_t size;\n      void (*ctor)(void *);\n {\n-  int i, nelts = maxindex + 1;\n+  size_t i;\n+  size_t nelts = maxindex + 1;\n   void *rval;\n \n   if (p == 0)\n@@ -1055,11 +1057,13 @@ __builtin_delete (ptr)\n void\n __builtin_vec_delete (ptr, maxindex, size, dtor, auto_delete_vec, auto_delete)\n      void *ptr;\n-     int maxindex, size;\n-     void (*dtor)();\n+     size_t maxindex;\n+     size_t size;\n+     void (*dtor)(void *, int);\n      int auto_delete;\n {\n-  int i, nelts = maxindex + 1;\n+  size_t i;\n+  size_t nelts = maxindex + 1;\n   void *p = ptr;\n \n   ptr += nelts * size;\n@@ -1102,7 +1106,8 @@ __clear_cache (beg, end)\n   static char array[INSN_CACHE_SIZE + INSN_CACHE_PLANE_SIZE + INSN_CACHE_LINE_WIDTH];\n   static int initialized = 0;\n   int offset;\n-  unsigned int start_addr, end_addr;\n+  void *start_addr\n+  void *end_addr;\n   typedef (*function_ptr) ();\n \n #if (INSN_CACHE_SIZE / INSN_CACHE_LINE_WIDTH) < 16\n@@ -1273,8 +1278,8 @@ __do_global_dtors ()\n #ifdef DO_GLOBAL_DTORS_BODY\n   DO_GLOBAL_DTORS_BODY;\n #else\n-  int nptrs = *(int *)__DTOR_LIST__;\n-  int i;\n+  unsigned nptrs = (unsigned) __DTOR_LIST__[0];\n+  unsigned i;\n \n   /* Some systems place the number of pointers\n      in the first word of the table.\n@@ -1326,7 +1331,7 @@ void\n __main ()\n {\n   /* Support recursive calls to `main': run initializers just once.  */\n-  static initialized = 0;\n+  static int initialized = 0;\n   if (! initialized)\n     {\n       initialized = 1;"}]}