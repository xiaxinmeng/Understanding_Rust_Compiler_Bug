{"sha": "592a16fca09f8a595037e8b693f698a95390c899", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkyYTE2ZmNhMDlmOGE1OTUwMzdlOGI2OTNmNjk4YTk1MzkwYzg5OQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2013-11-05T21:57:45Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2013-11-05T21:57:45Z"}, "message": "rtlanal.c (tablejump_p): Expect a JUMP_TABLE_DATA to always follow immediately after a label for a...\n\n\n\t* rtlanal.c (tablejump_p): Expect a JUMP_TABLE_DATA to always follow\n\timmediately after a label for a tablejump pattern.\n\n\t* config/arm/arm.c (is_jump_table): Remove.\n\t(create_fix_barrier): Use tablejump_p instead.\n\t(arm_reorg): Likewise.\n\t(thumb1_output_casesi): Expect JUMP_TABLE_DATA to always be NEXT_INSN.\n\t(thumb2_output_casesi): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_output_casesi): Likewise.\n\t* config/sh/sh.md (casesi_worker_1, casesi_worker_2,\n\tcasesi_shift_media, casesi_load_media): Likewise.\n\t* config/iq2000/iq2000.md: Likewise (in anonymous define_insn).\n\t* config/microblaze/microblaze.md: Likewise.\n\nFrom-SVN: r204424", "tree": {"sha": "919b61c9112314164efeda47c891e8848b6542a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/919b61c9112314164efeda47c891e8848b6542a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/592a16fca09f8a595037e8b693f698a95390c899", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/592a16fca09f8a595037e8b693f698a95390c899", "html_url": "https://github.com/Rust-GCC/gccrs/commit/592a16fca09f8a595037e8b693f698a95390c899", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/592a16fca09f8a595037e8b693f698a95390c899/comments", "author": null, "committer": null, "parents": [{"sha": "e8ff5196a89bdd14deca4ecb5d07d60cfd081b11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8ff5196a89bdd14deca4ecb5d07d60cfd081b11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8ff5196a89bdd14deca4ecb5d07d60cfd081b11"}], "stats": {"total": 68, "additions": 31, "deletions": 37}, "files": [{"sha": "2727156ca8dbee8ef443e3dbe9f8b0685ccc3a1c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/592a16fca09f8a595037e8b693f698a95390c899/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/592a16fca09f8a595037e8b693f698a95390c899/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=592a16fca09f8a595037e8b693f698a95390c899", "patch": "@@ -1,3 +1,20 @@\n+2013-11-05  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\n+\t* rtlanal.c (tablejump_p): Expect a JUMP_TABLE_DATA to always follow\n+\timmediately after a label for a tablejump pattern.\n+\n+\t* config/arm/arm.c (is_jump_table): Remove.\n+\t(create_fix_barrier): Use tablejump_p instead.\n+\t(arm_reorg): Likewise.\n+\t(thumb1_output_casesi): Expect JUMP_TABLE_DATA to always be NEXT_INSN.\n+\t(thumb2_output_casesi): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_output_casesi): Likewise.\n+\t* config/sh/sh.md (casesi_worker_1, casesi_worker_2,\n+\tcasesi_shift_media, casesi_load_media): Likewise.\n+\t* config/iq2000/iq2000.md: Likewise (in anonymous define_insn).\n+\t* config/microblaze/microblaze.md: Likewise.\n+\n 2013-11-05  Tobias Burnus  <burnus@net-b.de>\n \n \t* doc/invoke.texi (-Wdate-time): Document."}, {"sha": "30c8eb008058d50f1f791753d36db760fba12d56", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/592a16fca09f8a595037e8b693f698a95390c899/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/592a16fca09f8a595037e8b693f698a95390c899/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=592a16fca09f8a595037e8b693f698a95390c899", "patch": "@@ -4329,7 +4329,7 @@ aarch64_output_casesi (rtx *operands)\n {\n   char buf[100];\n   char label[100];\n-  rtx diff_vec = PATTERN (next_active_insn (operands[2]));\n+  rtx diff_vec = PATTERN (NEXT_INSN (operands[2]));\n   int index;\n   static const char *const patterns[4][2] =\n   {"}, {"sha": "7757e86691f713c09a56b78b67c9e82baf4a36bf", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/592a16fca09f8a595037e8b693f698a95390c899/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/592a16fca09f8a595037e8b693f698a95390c899/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=592a16fca09f8a595037e8b693f698a95390c899", "patch": "@@ -95,13 +95,11 @@ static bool arm_print_operand_punct_valid_p (unsigned char code);\n static const char *fp_const_from_val (REAL_VALUE_TYPE *);\n static arm_cc get_arm_condition_code (rtx);\n static HOST_WIDE_INT int_log2 (HOST_WIDE_INT);\n-static rtx is_jump_table (rtx);\n static const char *output_multi_immediate (rtx *, const char *, const char *,\n \t\t\t\t\t   int, HOST_WIDE_INT);\n static const char *shift_op (rtx, HOST_WIDE_INT *);\n static struct machine_function *arm_init_machine_status (void);\n static void thumb_exit (FILE *, int);\n-static rtx is_jump_table (rtx);\n static HOST_WIDE_INT get_jump_table_size (rtx);\n static Mnode *move_minipool_fix_forward_ref (Mnode *, Mnode *, HOST_WIDE_INT);\n static Mnode *add_minipool_forward_ref (Mfix *);\n@@ -15468,23 +15466,6 @@ Mfix * \t\tminipool_fix_tail;\n /* The fix entry for the current minipool, once it has been placed.  */\n Mfix *\t\tminipool_barrier;\n \n-/* Determines if INSN is the start of a jump table.  Returns the end\n-   of the TABLE or NULL_RTX.  */\n-static rtx\n-is_jump_table (rtx insn)\n-{\n-  rtx table;\n-\n-  if (jump_to_label_p (insn)\n-      && ((table = next_active_insn (JUMP_LABEL (insn)))\n-\t  == next_active_insn (insn))\n-      && table != NULL\n-      && JUMP_TABLE_DATA_P (table))\n-    return table;\n-\n-  return NULL_RTX;\n-}\n-\n #ifndef JUMP_TABLES_IN_TEXT_SECTION\n #define JUMP_TABLES_IN_TEXT_SECTION 0\n #endif\n@@ -16093,8 +16074,7 @@ create_fix_barrier (Mfix *fix, HOST_WIDE_INT max_address)\n \tcount += get_attr_length (from);\n \n       /* If there is a jump table, add its length.  */\n-      tmp = is_jump_table (from);\n-      if (tmp != NULL)\n+      if (tablejump_p (from, NULL, &tmp))\n \t{\n \t  count += get_jump_table_size (tmp);\n \n@@ -16700,7 +16680,7 @@ arm_reorg (void)\n \n \t  /* If the insn is a vector jump, add the size of the table\n \t     and skip the table.  */\n-\t  if ((table = is_jump_table (insn)) != NULL)\n+\t  if (tablejump_p (insn, NULL, &table))\n \t    {\n \t      address += get_jump_table_size (table);\n \t      insn = table;\n@@ -28610,7 +28590,7 @@ arm_output_iwmmxt_tinsr (rtx *operands)\n const char *\n thumb1_output_casesi (rtx *operands)\n {\n-  rtx diff_vec = PATTERN (next_active_insn (operands[0]));\n+  rtx diff_vec = PATTERN (NEXT_INSN (operands[0]));\n \n   gcc_assert (GET_CODE (diff_vec) == ADDR_DIFF_VEC);\n \n@@ -28633,7 +28613,7 @@ thumb1_output_casesi (rtx *operands)\n const char *\n thumb2_output_casesi (rtx *operands)\n {\n-  rtx diff_vec = PATTERN (next_active_insn (operands[2]));\n+  rtx diff_vec = PATTERN (NEXT_INSN (operands[2]));\n \n   gcc_assert (GET_CODE (diff_vec) == ADDR_DIFF_VEC);\n "}, {"sha": "7a516c1b5083becf8d9be96bb17886ea03ba604c", "filename": "gcc/config/iq2000/iq2000.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/592a16fca09f8a595037e8b693f698a95390c899/gcc%2Fconfig%2Fiq2000%2Fiq2000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/592a16fca09f8a595037e8b693f698a95390c899/gcc%2Fconfig%2Fiq2000%2Fiq2000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.md?ref=592a16fca09f8a595037e8b693f698a95390c899", "patch": "@@ -1398,9 +1398,8 @@\n \t(plus:SI (match_operand:SI 0 \"register_operand\" \"d\")\n \t\t (label_ref:SI (match_operand 1 \"\" \"\"))))\n    (use (label_ref:SI (match_dup 1)))]\n-  \"!(Pmode == DImode) && next_active_insn (insn) != 0\n-   && GET_CODE (PATTERN (next_active_insn (insn))) == ADDR_DIFF_VEC\n-   && PREV_INSN (next_active_insn (insn)) == operands[1]\"\n+  \"!(Pmode == DImode) && NEXT_INSN (operands[1]) != 0\n+   && GET_CODE (PATTERN (NEXT_INSN (operands[1]))) == ADDR_DIFF_VEC\"\n   \"*\n {\n   return \\\"j\\\\t%0\\\";"}, {"sha": "8a526f1d2f86ceb23e2cde78ecda520031e26a90", "filename": "gcc/config/microblaze/microblaze.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/592a16fca09f8a595037e8b693f698a95390c899/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/592a16fca09f8a595037e8b693f698a95390c899/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.md?ref=592a16fca09f8a595037e8b693f698a95390c899", "patch": "@@ -1798,9 +1798,8 @@\n \t(plus:SI (match_operand:SI 0 \"register_operand\" \"d\")\n \t\t (label_ref:SI (match_operand 1 \"\" \"\"))))\n   (use (label_ref:SI (match_dup 1)))]\n- \"next_active_insn (insn) != 0\n-  && GET_CODE (PATTERN (next_active_insn (insn))) == ADDR_DIFF_VEC\n-  && PREV_INSN (next_active_insn (insn)) == operands[1]\n+ \"NEXT_INSN (operands[1]) != 0\n+  && GET_CODE (PATTERN (NEXT_INSN (operands[1]))) == ADDR_DIFF_VEC\n   && flag_pic\"\n   {\n     output_asm_insn (\"addk\\t%0,%0,r20\",operands);"}, {"sha": "364226b5c7e211119fbf21740e8932fad54e1bf7", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/592a16fca09f8a595037e8b693f698a95390c899/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/592a16fca09f8a595037e8b693f698a95390c899/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=592a16fca09f8a595037e8b693f698a95390c899", "patch": "@@ -10827,7 +10827,7 @@ label:\n    (clobber (match_scratch:SI 3 \"=X,1\"))]\n   \"TARGET_SH1\"\n {\n-  rtx diff_vec = PATTERN (next_active_insn (operands[2]));\n+  rtx diff_vec = PATTERN (NEXT_INSN (operands[2]));\n \n   gcc_assert (GET_CODE (diff_vec) == ADDR_DIFF_VEC);\n \n@@ -10861,7 +10861,7 @@ label:\n    (clobber (match_operand:SI 4 \"\" \"=X,1\"))]\n   \"TARGET_SH2 && reload_completed && flag_pic\"\n {\n-  rtx diff_vec = PATTERN (next_active_insn (operands[2]));\n+  rtx diff_vec = PATTERN (NEXT_INSN (operands[2]));\n   gcc_assert (GET_CODE (diff_vec) == ADDR_DIFF_VEC);\n \n   switch (GET_MODE (diff_vec))\n@@ -10899,7 +10899,7 @@ label:\n \t\t    UNSPEC_CASESI)))]\n   \"TARGET_SHMEDIA\"\n {\n-  rtx diff_vec = PATTERN (next_active_insn (operands[2]));\n+  rtx diff_vec = PATTERN (NEXT_INSN (operands[2]));\n \n   gcc_assert (GET_CODE (diff_vec) == ADDR_DIFF_VEC);\n \n@@ -10926,7 +10926,7 @@ label:\n \t\t      (label_ref:DI (match_operand 3 \"\" \"\"))] UNSPEC_CASESI)))]\n   \"TARGET_SHMEDIA\"\n {\n-  rtx diff_vec = PATTERN (next_active_insn (operands[3]));\n+  rtx diff_vec = PATTERN (NEXT_INSN (operands[3]));\n \n   gcc_assert (GET_CODE (diff_vec) == ADDR_DIFF_VEC);\n "}, {"sha": "b9f3e2b792535eb7af00f86c8b481c305e6afe1b", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/592a16fca09f8a595037e8b693f698a95390c899/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/592a16fca09f8a595037e8b693f698a95390c899/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=592a16fca09f8a595037e8b693f698a95390c899", "patch": "@@ -2742,10 +2742,9 @@ tablejump_p (const_rtx insn, rtx *labelp, rtx *tablep)\n \n   label = JUMP_LABEL (insn);\n   if (label != NULL_RTX && !ANY_RETURN_P (label)\n-      && (table = next_active_insn (label)) != NULL_RTX\n+      && (table = NEXT_INSN (label)) != NULL_RTX\n       && JUMP_TABLE_DATA_P (table))\n     {\n-      gcc_assert (table == NEXT_INSN (label));\n       if (labelp)\n \t*labelp = label;\n       if (tablep)"}]}