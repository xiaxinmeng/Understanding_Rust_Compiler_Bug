{"sha": "ffd327a731d2a63c5d1110f52596641d3b7aa819", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZkMzI3YTczMWQyYTYzYzVkMTExMGY1MjU5NjY0MWQzYjdhYTgxOQ==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2008-09-18T13:58:55Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2008-09-18T13:58:55Z"}, "message": "fix PR 37102 by having out of ssa remove dead PHI nodes.\n\nFrom-SVN: r140455", "tree": {"sha": "becb2d6db49aba4ceae227e0ba5ac61c61928142", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/becb2d6db49aba4ceae227e0ba5ac61c61928142"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffd327a731d2a63c5d1110f52596641d3b7aa819", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffd327a731d2a63c5d1110f52596641d3b7aa819", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffd327a731d2a63c5d1110f52596641d3b7aa819", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffd327a731d2a63c5d1110f52596641d3b7aa819/comments", "author": null, "committer": null, "parents": [{"sha": "3d9fbb9abd4785660983bc1d239f3f03e8dbc67c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d9fbb9abd4785660983bc1d239f3f03e8dbc67c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d9fbb9abd4785660983bc1d239f3f03e8dbc67c"}], "stats": {"total": 108, "additions": 101, "deletions": 7}, "files": [{"sha": "0988e70cd75561f383b7dc382b5040395902999f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffd327a731d2a63c5d1110f52596641d3b7aa819/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffd327a731d2a63c5d1110f52596641d3b7aa819/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ffd327a731d2a63c5d1110f52596641d3b7aa819", "patch": "@@ -1,3 +1,12 @@\n+2008-09-18  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/37102\n+\t* tree-outof-ssa.c (remove_gimple_phi_args): Remove all the arguments from a PHI\n+\tnode. If it is a final use of an SSA_NAME, check to see if another PHI is dead.\n+\t(eliminate_useless_phis): Rename from eliminate_virtual_phis and remove real \n+\tPHIs which have no uses.\n+\t(rewrite_out_of_ssa): Call eliminate_useless_phis.\n+\n 2008-09-18  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/37284"}, {"sha": "72e590c34c627cec7f137258ea1425e48d7a4106", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffd327a731d2a63c5d1110f52596641d3b7aa819/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffd327a731d2a63c5d1110f52596641d3b7aa819/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ffd327a731d2a63c5d1110f52596641d3b7aa819", "patch": "@@ -1,3 +1,8 @@\n+2008-09-18  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/37102\n+\t* gcc.c-torture/execute/pr37102.c: New Test.\n+\n 2008-09-18  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/37284"}, {"sha": "32c18ba88a10b2284fc5bf837d0088e6aea0498e", "filename": "gcc/testsuite/gcc.c-torture/execute/pr37102.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffd327a731d2a63c5d1110f52596641d3b7aa819/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr37102.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffd327a731d2a63c5d1110f52596641d3b7aa819/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr37102.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr37102.c?ref=ffd327a731d2a63c5d1110f52596641d3b7aa819", "patch": "@@ -0,0 +1,25 @@\n+extern void abort (void);\n+\n+unsigned int a, b = 1, c;\n+\n+void __attribute__ ((noinline))\n+foo (int x)\n+{\n+  if (x != 5)\n+    abort ();\n+}\n+\n+int\n+main ()\n+{\n+  unsigned int d, e;\n+  for (d = 1; d < 5; d++)\n+    if (c)\n+      a = b;\n+  a = b;\n+  e = a << 1;\n+  if (e)\n+    e = (e << 1) ^ 1;\n+  foo (e);\n+  return 0;\n+}"}, {"sha": "042e349368a55f264b45979075c19b1a09622d51", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 62, "deletions": 7, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffd327a731d2a63c5d1110f52596641d3b7aa819/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffd327a731d2a63c5d1110f52596641d3b7aa819/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=ffd327a731d2a63c5d1110f52596641d3b7aa819", "patch": "@@ -606,25 +606,69 @@ replace_def_variable (var_map map, def_operand_p def_p, tree *expr)\n }\n \n \n-/* Remove any PHI node which is a virtual PHI.  */\n+/* Remove each argument from a PHI node.  If an arg was the last use of an SSA_NAME, \n+   check to see if this allows another PHI node to be removed.  */\n \n static void\n-eliminate_virtual_phis (void)\n+remove_gimple_phi_args (gimple phi)\n+{\n+  use_operand_p arg_p;\n+  ssa_op_iter iter;\n+\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      fprintf (dump_file, \"Removing Dead PHI definition: \");\n+      print_gimple_stmt (dump_file, phi, 0, TDF_SLIM);\n+    }\n+\n+  FOR_EACH_PHI_ARG (arg_p, phi, iter, SSA_OP_USE)\n+    {\n+      tree arg = USE_FROM_PTR (arg_p);\n+      if (TREE_CODE (arg) == SSA_NAME)\n+        {\n+\t  /* Remove the reference to the existing argument.  */\n+\t  SET_USE (arg_p, NULL_TREE);\n+\t  if (has_zero_uses (arg))\n+\t    {\n+\t      gimple stmt;\n+\t      gimple_stmt_iterator gsi;\n+\n+\t      stmt = SSA_NAME_DEF_STMT (arg);\n+\n+\t      /* Also remove the def if it is a PHI node.  */\n+\t      if (gimple_code (stmt) == GIMPLE_PHI)\n+\t\t{\n+\t\t  remove_gimple_phi_args (stmt);\n+\t\t  gsi = gsi_for_stmt (stmt);\n+\t\t  remove_phi_node (&gsi, true);\n+\t\t}\n+\n+\t    }\n+\t}\n+    }\n+}\n+\n+/* Remove any PHI node which is a virtual PHI, or a PHI with no uses.  */\n+\n+static void\n+eliminate_useless_phis (void)\n {\n   basic_block bb;\n   gimple_stmt_iterator gsi;\n+  tree result;\n \n   FOR_EACH_BB (bb)\n     {\n       for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); )\n         {\n \t  gimple phi = gsi_stmt (gsi);\n-\t  if (!is_gimple_reg (SSA_NAME_VAR (gimple_phi_result (phi))))\n+\t  result = gimple_phi_result (phi);\n+\t  if (!is_gimple_reg (SSA_NAME_VAR (result)))\n \t    {\n #ifdef ENABLE_CHECKING\n \t      size_t i;\n-\t      /* There should be no arguments of this PHI which are in\n-\t\t the partition list, or we get incorrect results.  */\n+\t      /* There should be no arguments of this PHI which are not virtual, or we \n+\t         get incorrect results.  */\n \t      for (i = 0; i < gimple_phi_num_args (phi); i++)\n \t        {\n \t\t  tree arg = PHI_ARG_DEF (phi, i);\n@@ -642,7 +686,16 @@ eliminate_virtual_phis (void)\n \t      remove_phi_node (&gsi, true);\n \t    }\n           else\n-            gsi_next (&gsi);\n+\t    {\n+\t      /* Also remove real PHIs with no uses.  */\n+\t      if (has_zero_uses (result))\n+\t        {\n+\t\t  remove_gimple_phi_args (phi);\n+\t\t  remove_phi_node (&gsi, true);\n+\t\t}\n+\t      else\n+\t\tgsi_next (&gsi);\n+\t    }\n \t}\n     }\n }\n@@ -1443,7 +1496,9 @@ rewrite_out_of_ssa (void)\n      copies into the loop itself.  */\n   insert_backedge_copies ();\n \n-  eliminate_virtual_phis ();\n+\n+  /* Eliminate PHIs which are of no use, such as virtual or dead phis.  */\n+  eliminate_useless_phis ();\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     gimple_dump_cfg (dump_file, dump_flags & ~TDF_DETAILS);"}]}