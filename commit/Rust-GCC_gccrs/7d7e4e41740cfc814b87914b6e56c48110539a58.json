{"sha": "7d7e4e41740cfc814b87914b6e56c48110539a58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q3ZTRlNDE3NDBjZmM4MTRiODc5MTRiNmU1NmM0ODExMDUzOWE1OA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-05-05T17:22:40Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-05-05T17:22:40Z"}, "message": "compiler: Use backend interface for bound method expressions.\n\nFrom-SVN: r210072", "tree": {"sha": "3971f1a5b898fd3f9f89a8134640ab227c649f30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3971f1a5b898fd3f9f89a8134640ab227c649f30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d7e4e41740cfc814b87914b6e56c48110539a58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d7e4e41740cfc814b87914b6e56c48110539a58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d7e4e41740cfc814b87914b6e56c48110539a58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d7e4e41740cfc814b87914b6e56c48110539a58/comments", "author": null, "committer": null, "parents": [{"sha": "7e7f8713ea1d2be35a20892f4fbd4c87149aa0ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e7f8713ea1d2be35a20892f4fbd4c87149aa0ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e7f8713ea1d2be35a20892f4fbd4c87149aa0ac"}], "stats": {"total": 34, "additions": 12, "deletions": 22}, "files": [{"sha": "69af48c9d355c0196f183093bbdcd4e0016743bc", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7e4e41740cfc814b87914b6e56c48110539a58/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7e4e41740cfc814b87914b6e56c48110539a58/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=7d7e4e41740cfc814b87914b6e56c48110539a58", "patch": "@@ -6736,12 +6736,9 @@ Bound_method_expression::do_get_tree(Translate_context* context)\n   Expression* ret = Expression::make_struct_composite_literal(st, vals, loc);\n   ret = Expression::make_heap_expression(ret, loc);\n \n-  tree ret_tree = ret->get_tree(context);\n-\n-  Expression* nil_check = NULL;\n-\n   // See whether the expression or any embedded pointers are nil.\n \n+  Expression* nil_check = NULL;\n   Expression* expr = this->expr_;\n   if (this->method_->field_indexes() != NULL)\n     {\n@@ -6764,26 +6761,19 @@ Bound_method_expression::do_get_tree(Translate_context* context)\n \tnil_check = Expression::make_binary(OPERATOR_OROR, nil_check, n, loc);\n     }\n \n+  Bexpression* bme = tree_to_expr(ret->get_tree(context));\n   if (nil_check != NULL)\n     {\n-      tree nil_check_tree = nil_check->get_tree(context);\n-      Expression* crash_expr =\n-\tcontext->gogo()->runtime_error(RUNTIME_ERROR_NIL_DEREFERENCE, loc);\n-      tree crash = crash_expr->get_tree(context);\n-      if (ret_tree == error_mark_node\n-\t  || nil_check_tree == error_mark_node\n-\t  || crash == error_mark_node)\n-\treturn error_mark_node;\n-\n-      ret_tree = fold_build2_loc(loc.gcc_location(), COMPOUND_EXPR,\n-\t\t\t\t TREE_TYPE(ret_tree),\n-\t\t\t\t build3_loc(loc.gcc_location(), COND_EXPR,\n-\t\t\t\t\t    void_type_node, nil_check_tree,\n-\t\t\t\t\t    crash, NULL_TREE),\n-\t\t\t\t ret_tree);\n-    }\n-\n-  return ret_tree;\n+      Gogo* gogo = context->gogo();\n+      Expression* crash =\n+\tgogo->runtime_error(RUNTIME_ERROR_NIL_DEREFERENCE, loc);\n+      Bexpression* bcrash = tree_to_expr(crash->get_tree(context));\n+      Btype* btype = ret->type()->get_backend(gogo);\n+      Bexpression* bcheck = tree_to_expr(nil_check->get_tree(context));\n+      bme = gogo->backend()->conditional_expression(btype, bcheck, bcrash,\n+\t\t\t\t\t\t    bme, loc);\n+    }\n+  return expr_to_tree(bme);\n }\n \n // Dump ast representation of a bound method expression."}]}