{"sha": "050bbfebe25a20cc711fc35d49be6bae5ff7a047", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUwYmJmZWJlMjVhMjBjYzcxMWZjMzVkNDliZTZiYWU1ZmY3YTA0Nw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-12-03T15:10:03Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-12-03T15:10:03Z"}, "message": "re PR middle-end/36326 (gimplification of aggregate copies introduces extra aggregate copy)\n\n2008-12-03  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/36326\n\t* gimplify.c (is_gimple_mem_or_call_rhs): Remove work-around for\n\tnon-BLKmode types.\n\n\t* gcc.dg/tree-ssa/pr36326.c: New testcase.\n\nFrom-SVN: r142396", "tree": {"sha": "91efd973d6edfe28e64f55a78e533097f611ce6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91efd973d6edfe28e64f55a78e533097f611ce6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/050bbfebe25a20cc711fc35d49be6bae5ff7a047", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/050bbfebe25a20cc711fc35d49be6bae5ff7a047", "html_url": "https://github.com/Rust-GCC/gccrs/commit/050bbfebe25a20cc711fc35d49be6bae5ff7a047", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/050bbfebe25a20cc711fc35d49be6bae5ff7a047/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cea1b9ebeef015414db84f1a3e6ab18e94476530", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cea1b9ebeef015414db84f1a3e6ab18e94476530", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cea1b9ebeef015414db84f1a3e6ab18e94476530"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "1f1c0315979164d7473e97ecd8b38814a0c31dc5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/050bbfebe25a20cc711fc35d49be6bae5ff7a047/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/050bbfebe25a20cc711fc35d49be6bae5ff7a047/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=050bbfebe25a20cc711fc35d49be6bae5ff7a047", "patch": "@@ -1,3 +1,9 @@\n+2008-12-03  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/36326\n+\t* gimplify.c (is_gimple_mem_or_call_rhs): Remove work-around for\n+\tnon-BLKmode types.\n+\n 2008-12-03  Tomas Bily  <tbily@suse.cz>\n \n         PR middle-end/38250"}, {"sha": "09f130ecc7e5861684a9c371de0efbded705e01e", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/050bbfebe25a20cc711fc35d49be6bae5ff7a047/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/050bbfebe25a20cc711fc35d49be6bae5ff7a047/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=050bbfebe25a20cc711fc35d49be6bae5ff7a047", "patch": "@@ -656,13 +656,8 @@ static bool\n is_gimple_mem_or_call_rhs (tree t)\n {\n   /* If we're dealing with a renamable type, either source or dest must be\n-     a renamed variable.  Also force a temporary if the type doesn't need\n-     to be stored in memory, since it's cheap and prevents erroneous\n-     tailcalls (PR 17526).  */\n-  if (is_gimple_reg_type (TREE_TYPE (t))\n-      || (TYPE_MODE (TREE_TYPE (t)) != BLKmode\n-\t  && (TREE_CODE (t) != CALL_EXPR\n-              || ! aggregate_value_p (t, t))))\n+     a renamed variable.  */\n+  if (is_gimple_reg_type (TREE_TYPE (t)))\n     return is_gimple_val (t);\n   else\n     return is_gimple_formal_tmp_or_call_rhs (t);"}, {"sha": "c9364f8f94fd7ff1cb35f4362fe88854cec82605", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/050bbfebe25a20cc711fc35d49be6bae5ff7a047/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/050bbfebe25a20cc711fc35d49be6bae5ff7a047/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=050bbfebe25a20cc711fc35d49be6bae5ff7a047", "patch": "@@ -1,3 +1,8 @@\n+2008-12-03  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/36326\n+\t* gcc.dg/tree-ssa/pr36326.c: New testcase.\n+\n 2008-12-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/37716"}, {"sha": "0611f7d8499b888c72cc396ad6b961901663da5f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr36326.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/050bbfebe25a20cc711fc35d49be6bae5ff7a047/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr36326.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/050bbfebe25a20cc711fc35d49be6bae5ff7a047/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr36326.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr36326.c?ref=050bbfebe25a20cc711fc35d49be6bae5ff7a047", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-gimple\" } */\n+\n+union X { int i; double x; };\n+\n+int foo (union X *p)\n+{\n+  union X x = *p;\n+  return x.x;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"x.0\" \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}]}