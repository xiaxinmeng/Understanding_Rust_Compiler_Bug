{"sha": "0bb7645daa5ad298b195f8a79410620cdd99eacc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJiNzY0NWRhYTVhZDI5OGIxOTVmOGE3OTQxMDYyMGNkZDk5ZWFjYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2015-10-29T18:36:39Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2015-10-29T18:36:39Z"}, "message": "Fix target/68124\n\n        PR target/68124\n        PR rtl-opt/67609\n        * config/i386/i386.c (ix86_cannot_change_mode_class): Tighten\n        sse check to the exact conditions of PR 67609.\n\nFrom-SVN: r229550", "tree": {"sha": "eda9bd72e08e5bc22fd13bc8ca3d641a8c7943b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eda9bd72e08e5bc22fd13bc8ca3d641a8c7943b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bb7645daa5ad298b195f8a79410620cdd99eacc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bb7645daa5ad298b195f8a79410620cdd99eacc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bb7645daa5ad298b195f8a79410620cdd99eacc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bb7645daa5ad298b195f8a79410620cdd99eacc/comments", "author": null, "committer": null, "parents": [{"sha": "d8cf6ce752078133a63d5ffe49f639bad82ad8e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8cf6ce752078133a63d5ffe49f639bad82ad8e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8cf6ce752078133a63d5ffe49f639bad82ad8e9"}], "stats": {"total": 43, "additions": 28, "deletions": 15}, "files": [{"sha": "fa3e95651deb6dc174861febb55d8d3be8e09af9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bb7645daa5ad298b195f8a79410620cdd99eacc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bb7645daa5ad298b195f8a79410620cdd99eacc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0bb7645daa5ad298b195f8a79410620cdd99eacc", "patch": "@@ -1,3 +1,10 @@\n+2015-10-29  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/68124\n+\tPR rtl-opt/67609\n+\t* config/i386/i386.c (ix86_cannot_change_mode_class): Tighten\n+\tsse check to the exact conditions of PR 67609.\n+\n 2015-10-29  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_init_libfuncs): Split libfunc"}, {"sha": "8476677f1c17ada54b41c3af84a825d11f5240c8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bb7645daa5ad298b195f8a79410620cdd99eacc/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bb7645daa5ad298b195f8a79410620cdd99eacc/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0bb7645daa5ad298b195f8a79410620cdd99eacc", "patch": "@@ -43031,22 +43031,28 @@ ix86_cannot_change_mode_class (machine_mode from, machine_mode to,\n   if (MAYBE_FLOAT_CLASS_P (regclass))\n     return true;\n \n-  /* Vector registers do not support QI or HImode loads.  If we don't\n-     disallow a change to these modes, reload will assume it's ok to\n-     drop the subreg from (subreg:SI (reg:HI 100) 0).  This affects\n-     the vec_dupv4hi pattern.\n-\n-     Further, we cannot allow word_mode subregs of full vector modes.\n-     Otherwise the middle-end will assume it's ok to store to\n-     (subreg:DI (reg:TI 100) 0) in order to modify only the low 64 bits\n-     of the 128-bit register.  However, after reload the subreg will\n-     be dropped leaving a plain DImode store.  This is indistinguishable\n-     from a \"normal\" DImode move, and so we're justified to use movsd,\n-     which modifies the entire 128-bit register.\n-\n-     Combining these two conditions, disallow all narrowing mode changes.  */\n   if (MAYBE_SSE_CLASS_P (regclass) || MAYBE_MMX_CLASS_P (regclass))\n-    return GET_MODE_SIZE (to) < GET_MODE_SIZE (from);\n+    {\n+      int from_size = GET_MODE_SIZE (from);\n+      int to_size = GET_MODE_SIZE (to);\n+\n+      /* Vector registers do not support QI or HImode loads.  If we don't\n+\t disallow a change to these modes, reload will assume it's ok to\n+\t drop the subreg from (subreg:SI (reg:HI 100) 0).  This affects\n+\t the vec_dupv4hi pattern.  */\n+      if (from_size < 4)\n+\treturn true;\n+\n+      /* Further, we cannot allow word_mode subregs of full vector modes.\n+         Otherwise the middle-end will assume it's ok to store to\n+         (subreg:DI (reg:TI 100) 0) in order to modify only the low 64 bits\n+         of the 128-bit register.  However, after reload the subreg will\n+         be dropped leaving a plain DImode store.  This is indistinguishable\n+         from a \"normal\" DImode move, and so we're justified to use movsd,\n+         which modifies the entire 128-bit register.  */\n+      if (to_size == UNITS_PER_WORD && from_size > UNITS_PER_WORD)\n+\treturn true;\n+    }\n \n   return false;\n }"}]}