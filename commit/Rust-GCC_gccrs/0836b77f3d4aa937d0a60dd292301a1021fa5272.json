{"sha": "0836b77f3d4aa937d0a60dd292301a1021fa5272", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgzNmI3N2YzZDRhYTkzN2QwYTYwZGQyOTIzMDFhMTAyMWZhNTI3Mg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2014-05-21T09:29:25Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2014-05-21T09:29:25Z"}, "message": "Make the Blackfin port build again.\n\n\t* config/bfin/bfin.c (split_load_immediate): Use gen_int_mode in a few\n\tmore places.\n\nFrom-SVN: r210684", "tree": {"sha": "5d0dd4cdb95c5fe6c625060a5675297c96ee4214", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d0dd4cdb95c5fe6c625060a5675297c96ee4214"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0836b77f3d4aa937d0a60dd292301a1021fa5272", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0836b77f3d4aa937d0a60dd292301a1021fa5272", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0836b77f3d4aa937d0a60dd292301a1021fa5272", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0836b77f3d4aa937d0a60dd292301a1021fa5272/comments", "author": null, "committer": null, "parents": [{"sha": "8a9e6b45baed602a208c6be551fd9708e1d06809", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a9e6b45baed602a208c6be551fd9708e1d06809", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a9e6b45baed602a208c6be551fd9708e1d06809"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "ac9558695f2d88b5d4c546c9086e9c3b778ffbb4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0836b77f3d4aa937d0a60dd292301a1021fa5272/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0836b77f3d4aa937d0a60dd292301a1021fa5272/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0836b77f3d4aa937d0a60dd292301a1021fa5272", "patch": "@@ -1,5 +1,8 @@\n 2014-05-21  Bernd Schmidt  <bernds@codesourcery.com>\n \n+\t* config/bfin/bfin.c (split_load_immediate): Use gen_int_mode in a few\n+\tmore places.\n+\n \t* cfgrtl.c (cfg_layout_initialize): Weaken assert to only trigger if\n \tflag_reorder_blocks_and_partition.\n \t* hw-doloop.c (reorg_loops): Avoid reordering if that flag is set."}, {"sha": "7945de4d8730de2c3987e32dee5dfb7fbd5bc766", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0836b77f3d4aa937d0a60dd292301a1021fa5272/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0836b77f3d4aa937d0a60dd292301a1021fa5272/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=0836b77f3d4aa937d0a60dd292301a1021fa5272", "patch": "@@ -2588,7 +2588,7 @@ split_load_immediate (rtx operands[])\n       && (D_REGNO_P (regno)\n \t  || (regno >= REG_P0 && regno <= REG_P7 && num_zero <= 2)))\n     {\n-      emit_insn (gen_movsi (operands[0], GEN_INT (shifted)));\n+      emit_insn (gen_movsi (operands[0], gen_int_mode (shifted, SImode)));\n       emit_insn (gen_ashlsi3 (operands[0], operands[0], GEN_INT (num_zero)));\n       return 1;\n     }\n@@ -2602,13 +2602,15 @@ split_load_immediate (rtx operands[])\n       if (log2constp (val & 0xFFFF0000))\n \t{\n \t  emit_insn (gen_movsi (operands[0], GEN_INT (val & 0xFFFF)));\n-\t  emit_insn (gen_iorsi3 (operands[0], operands[0], GEN_INT (val & 0xFFFF0000)));\n+\t  emit_insn (gen_iorsi3 (operands[0], operands[0],\n+\t\t\t\t gen_int_mode (val & 0xFFFF0000, SImode)));\n \t  return 1;\n \t}\n       else if (log2constp (val | 0xFFFF) && (val & 0x8000) != 0)\n \t{\n \t  emit_insn (gen_movsi (operands[0], GEN_INT (tmp)));\n-\t  emit_insn (gen_andsi3 (operands[0], operands[0], GEN_INT (val | 0xFFFF)));\n+\t  emit_insn (gen_andsi3 (operands[0], operands[0],\n+\t\t\t\t gen_int_mode (val | 0xFFFF, SImode)));\n \t}\n     }\n \n@@ -2617,7 +2619,9 @@ split_load_immediate (rtx operands[])\n       if (tmp >= -64 && tmp <= 63)\n \t{\n \t  emit_insn (gen_movsi (operands[0], GEN_INT (tmp)));\n-\t  emit_insn (gen_movstricthi_high (operands[0], GEN_INT (val & -65536)));\n+\t  emit_insn (gen_movstricthi_high (operands[0],\n+\t\t\t\t\t   gen_int_mode (val & -65536,\n+\t\t\t\t\t\t\t SImode)));\n \t  return 1;\n \t}\n \n@@ -2645,7 +2649,7 @@ split_load_immediate (rtx operands[])\n     {\n       /* If optimizing for size, generate a sequence that has more instructions\n \t but is shorter.  */\n-      emit_insn (gen_movsi (operands[0], GEN_INT (shifted_compl)));\n+      emit_insn (gen_movsi (operands[0], gen_int_mode (shifted_compl, SImode)));\n       emit_insn (gen_ashlsi3 (operands[0], operands[0],\n \t\t\t      GEN_INT (num_compl_zero)));\n       emit_insn (gen_one_cmplsi2 (operands[0], operands[0]));"}]}