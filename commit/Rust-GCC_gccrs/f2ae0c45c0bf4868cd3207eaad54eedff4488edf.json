{"sha": "f2ae0c45c0bf4868cd3207eaad54eedff4488edf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJhZTBjNDVjMGJmNDg2OGNkMzIwN2VhYWQ1NGVlZGZmNDQ4OGVkZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2000-09-13T01:02:52Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-09-13T01:02:52Z"}, "message": "decl.c (maybe_deduce_size_from_array_init): Set do_default for all non-extern arrays.\n\n        * decl.c (maybe_deduce_size_from_array_init): Set do_default for\n        all non-extern arrays.\n\n        * decl.c (grokdeclarator): Complain about 'friend T' for implicit\n        typenames, too.  Downgrade complaint to pedwarn.\n        (xref_tag): Warn about surprising behavior of 'friend struct T'.\n        * decl2.c (handle_class_head): Generate a TYPENAME_TYPE for\n        'class This::Inherited'.\n\nFrom-SVN: r36382", "tree": {"sha": "1e7159a57b47665ba88d5de38a5e4b6a58dbcfab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e7159a57b47665ba88d5de38a5e4b6a58dbcfab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2ae0c45c0bf4868cd3207eaad54eedff4488edf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2ae0c45c0bf4868cd3207eaad54eedff4488edf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2ae0c45c0bf4868cd3207eaad54eedff4488edf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2ae0c45c0bf4868cd3207eaad54eedff4488edf/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "634dd0ca7756a22847e2327b6270792cbd042495", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/634dd0ca7756a22847e2327b6270792cbd042495", "html_url": "https://github.com/Rust-GCC/gccrs/commit/634dd0ca7756a22847e2327b6270792cbd042495"}], "stats": {"total": 72, "additions": 59, "deletions": 13}, "files": [{"sha": "ddf6086c429e16522c1d02657f5c82d196c39e25", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ae0c45c0bf4868cd3207eaad54eedff4488edf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ae0c45c0bf4868cd3207eaad54eedff4488edf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f2ae0c45c0bf4868cd3207eaad54eedff4488edf", "patch": "@@ -1,3 +1,14 @@\n+2000-09-12  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl.c (maybe_deduce_size_from_array_init): Set do_default for\n+\tall non-extern arrays.\n+\n+\t* decl.c (grokdeclarator): Complain about 'friend T' for implicit\n+\ttypenames, too.  Downgrade complaint to pedwarn.\n+\t(xref_tag): Warn about surprising behavior of 'friend struct T'.\n+\t* decl2.c (handle_class_head): Generate a TYPENAME_TYPE for\n+\t'class This::Inherited'.\n+\n 2000-09-12  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl.c (finish_case_label): Given the LABEL_DECL a"}, {"sha": "4430d55cc24fc2e616fcb165bf0f3efb2bc561ee", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ae0c45c0bf4868cd3207eaad54eedff4488edf/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ae0c45c0bf4868cd3207eaad54eedff4488edf/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f2ae0c45c0bf4868cd3207eaad54eedff4488edf", "patch": "@@ -7654,12 +7654,9 @@ maybe_deduce_size_from_array_init (decl, init)\n       && TYPE_DOMAIN (type) == NULL_TREE\n       && TREE_CODE (decl) != TYPE_DECL)\n     {\n-      int do_default\n-\t= (TREE_STATIC (decl)\n-\t   /* Even if pedantic, an external linkage array\n-\t      may have incomplete type at first.  */\n-\t   ? pedantic && ! DECL_EXTERNAL (decl)\n-\t   : !DECL_EXTERNAL (decl));\n+      /* do_default is really a C-ism to deal with tentative definitions.\n+\t But let's leave it here to ease the eventual merge.  */\n+      int do_default = !DECL_EXTERNAL (decl);\n       tree initializer = init ? init : DECL_INITIAL (decl);\n       int failure = complete_array_type (type, initializer, do_default);\n \n@@ -11381,12 +11378,23 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t      cp_error (\"`inline' specified for friend class declaration\");\n \t      inlinep = 0;\n \t    }\n-\t  if (!current_aggr && TREE_CODE (type) != TYPENAME_TYPE)\n+\n+\t  /* Until core issue 180 is resolved, allow 'friend typename A::B'.\n+\t     But don't allow implicit typenames.  */\n+\t  if (!current_aggr && (TREE_CODE (type) != TYPENAME_TYPE\n+\t\t\t\t|| IMPLICIT_TYPENAME_P (type)))\n \t    {\n \t      if (TREE_CODE (type) == TEMPLATE_TYPE_PARM)\n-\t        cp_error (\"template parameters cannot be friends\");\n+\t        cp_pedwarn (\"template parameters cannot be friends\");\n+\t      else if (TREE_CODE (type) == TYPENAME_TYPE)\n+\t        cp_pedwarn (\"\\\n+friend declaration requires class-key, i.e. `friend class %T::%T'\",\n+\t\t\t    constructor_name (current_class_type),\n+\t\t\t    TYPE_IDENTIFIER (type));\n \t      else\n-\t        cp_error (\"friend declaration requires `%#T'\", type);\n+\t        cp_pedwarn (\"\\\n+friend declaration requires class-key, i.e. `friend %#T'\",\n+\t\t\t    type);\n \t    }\n \n \t  /* Only try to do this stuff if we didn't already give up.  */\n@@ -12896,6 +12904,22 @@ xref_tag (code_type_node, name, globalize)\n   else\n     t = IDENTIFIER_TYPE_VALUE (name);\n \n+  /* Warn about 'friend struct Inherited;' doing the wrong thing.  */\n+  if (t && globalize && TREE_CODE (t) == TYPENAME_TYPE)\n+    {\n+      static int explained;\n+\n+      cp_warning (\"`%s %T' declares a new type at namespace scope;\\n\\\n+to refer to the inherited type, say `%s %T::%T'%s\",\n+\t\t  tag_name (tag_code), name, tag_name (tag_code),\n+\t\t  constructor_name (current_class_type), TYPE_IDENTIFIER (t),\n+\t\t  (!explained ? \"\\n\\\n+(names from dependent base classes are not visible to unqualified name lookup)\"\n+\t\t   : \"\"));\n+\n+      explained = 1;\n+    }\n+\n   if (t && TREE_CODE (t) != code && TREE_CODE (t) != TEMPLATE_TYPE_PARM\n       && TREE_CODE (t) != BOUND_TEMPLATE_TEMPLATE_PARM)\n     t = NULL_TREE;"}, {"sha": "a2cdb1dd7c941efed974efbd60f1a2ce3479bb53", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ae0c45c0bf4868cd3207eaad54eedff4488edf/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ae0c45c0bf4868cd3207eaad54eedff4488edf/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=f2ae0c45c0bf4868cd3207eaad54eedff4488edf", "patch": "@@ -5437,7 +5437,7 @@ tree\n handle_class_head (aggr, scope, id)\n      tree aggr, scope, id;\n {\n-  tree decl;\n+  tree decl = NULL_TREE;\n \n   if (TREE_CODE (id) == TYPE_DECL)\n     /* We must bash typedefs back to the main decl of the type. Otherwise\n@@ -5447,15 +5447,25 @@ handle_class_head (aggr, scope, id)\n     decl = DECL_TEMPLATE_RESULT (id);\n   else \n     {\n-      tree current = current_scope();\n+      tree current = current_scope ();\n   \n       if (current == NULL_TREE)\n         current = current_namespace;\n       if (scope == std_node)\n         scope = global_namespace;\n       if (scope == NULL_TREE)\n         scope = global_namespace;\n-      if (scope == current)\n+\n+      if (TYPE_P (scope))\n+\t{\n+\t  /* According to the suggested resolution of core issue 180,\n+\t     'typename' is assumed after a class-key.  */\n+\t  decl = make_typename_type (scope, id, 1);\n+\t  if (decl == error_mark_node)\n+\t    return error_mark_node;\n+\t  decl = TYPE_MAIN_DECL (decl);\n+\t}\n+      else if (scope == current)\n         {\n           /* We've been given AGGR SCOPE::ID, when we're already inside SCOPE.\n              Be nice about it.  */\n@@ -5469,7 +5479,8 @@ handle_class_head (aggr, scope, id)\n \tcp_error (\"no file-scope type named `%D'\", id);\n       \n       /* Inject it at the current scope.  */\n-      decl = TYPE_MAIN_DECL (xref_tag (aggr, id, 1));\n+      if (!decl)\n+\tdecl = TYPE_MAIN_DECL (xref_tag (aggr, id, 1));\n     }\n  \n   /* Enter the SCOPE.  If this turns out not to be a definition, the"}]}