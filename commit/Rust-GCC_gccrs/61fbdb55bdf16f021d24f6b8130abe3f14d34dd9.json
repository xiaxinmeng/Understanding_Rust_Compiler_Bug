{"sha": "61fbdb55bdf16f021d24f6b8130abe3f14d34dd9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFmYmRiNTViZGYxNmYwMjFkMjRmNmI4MTMwYWJlM2YxNGQzNGRkOQ==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@cygnus.com", "date": "1998-04-30T10:11:45Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "1998-04-30T10:11:45Z"}, "message": "Update gxxint.texi to include squangling info\n\nFrom-SVN: r19502", "tree": {"sha": "cc97ec5dac35a36144a4806bd4bffc5fbd672eb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc97ec5dac35a36144a4806bd4bffc5fbd672eb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61fbdb55bdf16f021d24f6b8130abe3f14d34dd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61fbdb55bdf16f021d24f6b8130abe3f14d34dd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61fbdb55bdf16f021d24f6b8130abe3f14d34dd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61fbdb55bdf16f021d24f6b8130abe3f14d34dd9/comments", "author": null, "committer": null, "parents": [{"sha": "d6bcc74ac6145adf20574e585ce5cb49a26302b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6bcc74ac6145adf20574e585ce5cb49a26302b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6bcc74ac6145adf20574e585ce5cb49a26302b8"}], "stats": {"total": 75, "additions": 73, "deletions": 2}, "files": [{"sha": "bbff3a0b6de666242bd797100604eea13df2b8b2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61fbdb55bdf16f021d24f6b8130abe3f14d34dd9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61fbdb55bdf16f021d24f6b8130abe3f14d34dd9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=61fbdb55bdf16f021d24f6b8130abe3f14d34dd9", "patch": "@@ -1,3 +1,7 @@\n+Thu Apr 30 13:05:33 EDT 1998  Andrew MacLeod  <amacleod@cygnus.com>\n+\n+\t* gxxint.texi: Add info for squangling codes K and B.\n+\n Tue Apr 28 13:22:01 1998  Mark Mitchell  <mmitchell@usa.net>\n \n \t* semantics.c (begin_stmt_expr): Avoid duplicating the effect of"}, {"sha": "4868c27cc05d769d3985503f37f9557f99446e53", "filename": "gcc/cp/gxxint.texi", "status": "modified", "additions": 69, "deletions": 2, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61fbdb55bdf16f021d24f6b8130abe3f14d34dd9/gcc%2Fcp%2Fgxxint.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61fbdb55bdf16f021d24f6b8130abe3f14d34dd9/gcc%2Fcp%2Fgxxint.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fgxxint.texi?ref=61fbdb55bdf16f021d24f6b8130abe3f14d34dd9", "patch": "@@ -1664,6 +1664,39 @@ A Java object reference type is equivalent\n to a C++ pointer parameter, so we mangle such an parameter type\n as @samp{P} followed by the mangling of the class name.\n \n+@subsection Squangled type compression\n+\n+Squangling (enabled with the @samp{-fsquangle} option), utilizes \n+the @samp{B} code to indicate reuse of a previously\n+seen type within an indentifier. Types are recognized in a left to\n+right manner and given increasing values, which are\n+appended to the code in the standard manner. Ie, multiple digit numbers\n+are delimited by @samp{_} characters. A type is considered to be any \n+non primitive type, regardless of whether its a parameter, template\n+parameter, or entire template. Certain codes are considered modifiers\n+of a type, and are not included as part of the type. These are the\n+@samp{C}, @samp{V}, @samp{P}, @samp{A}, @samp{R}, and @samp{U} codes, \n+denoting constant, volatile, pointer, array, reference, and unsigned. \n+These codes may precede a @samp{B} type in order to make the required \n+modifications to the type.\n+\n+For example:\n+@example\n+template <class T> class class1 @{ @};\n+\n+template <class T> class class2 @{ @};\n+\n+class class3 @{ @};\n+\n+int f(class2<class1<class3> > a ,int b, const class1<class3>&c, class3 *d) @{ @}\n+\n+    B0 -> class2<class1<class3>\n+    B1 -> class1<class3>\n+    B2 -> class3\n+@end example\n+Produces the mangled name @samp{f__FGt6class21Zt6class11Z6class3iRCB1PB2}.\n+The int parameter is a basic type, and does not receive a B encoding...\n+\n @subsection Qualified names\n \n Both C++ and Java allow a class to be lexically nested inside another\n@@ -1680,6 +1713,40 @@ Then follows each part of the qualified name, as described above.\n For example @code{Foo::\\u0319::Bar} is encoded as\n @samp{Q33FooU5_03193Bar}.\n \n+Squangling utilizes the the letter @samp{K} to indicate a \n+remembered portion of a qualified name. As qualified names are processed\n+for an identifier, the names are numbered and remembered in a \n+manner similar to the @samp{B} type compression code. \n+Names are recognized left to right, and given increasing values, which are\n+appended to the code in the standard manner. ie, multiple digit numbers\n+are delimited by @samp{_} characters.\n+\n+For example \n+@example\n+class Andrew \n+@{\n+  class WasHere \n+  @{\n+      class AndHereToo \n+      @{\n+      @};\n+  @};\n+@};\n+\n+f(Andrew&r1, Andrew::WasHere& r2, Andrew::WasHere::AndHereToo& r3) @{ @}\n+\n+   K0 ->  Andrew\n+   K1 ->  Andrew::WasHere\n+   K2 ->  Andrew::WasHere::AndHereToo\n+@end example\n+Function @samp{f()} would be mangled as : \n+@samp{f__FR6AndrewRQ2K07WasHereRQ2K110AndHereToo}\n+\n+There are some occasions when either a @samp{B} or @samp{K} code could\n+be chosen, preference is always given to the @samp{B} code. Ie, the example\n+in the section on @samp{B} mangling could have used a @samp{K} code \n+instead of @samp{B2}.\n+\n @subsection Templates\n \n A class template instantiation is encoded as the letter @samp{t},\n@@ -1747,7 +1814,7 @@ Encodes the C++ @code{bool} type,\n and the Java @code{boolean} type.\n \n @item B\n-Used for squangling.\n+Used for squangling. Similar in concept to the 'T' non-squangled code.\n \n @item c\n Encodes the C++ @code{char} type, and the Java @code{byte} type.\n@@ -1782,7 +1849,7 @@ Encodes the C++ and Java @code{int} types.\n Indicates a complex type.\n \n @item K\n-Used for squangling.\n+Used by squangling to compress qualified names.\n \n @item l\n Encodes the C++ @code{long} type."}]}