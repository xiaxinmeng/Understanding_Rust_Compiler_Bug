{"sha": "8648c55f3b703a0a824ae0815485dbebe4e01478", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY0OGM1NWYzYjcwM2EwYTgyNGFlMDgxNTQ4NWRiZWJlNGUwMTQ3OA==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2015-03-11T23:11:19Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2015-03-11T23:11:19Z"}, "message": "invoke.texi (-fgnu89-inline): Remove discussion about old GCC versions.\n\n2015-03-11  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/invoke.texi (-fgnu89-inline): Remove discussion about \n\told GCC versions.\n\t(-fabi-compat-version): Likewise.\n\t(-ffriend-injection): Likewise.\n\t(-Wdeclaration-after-statement): Likewise.\n\t(-fomit-frame-pointer): Likewise.\n\t(-ftree-coalesce-inlined-vars): Likewise.\n\t(-fvisibility=): Likewise.\n\t* doc/extend.texi (Typeof): Likewise.\n\t(Zero Length): Likewise.\n\t(Escaped Newlines): Likewise.\n\t(Compound Literals): Likewise.\n\t(Function Attributes): Likewise.\n\t(Label Attributes): Likewise.\n\t(Type Attributes): Likewise.\n\t(Function Names): Likewise.\n\t(Other Builtins): Likewise.\n\t(Function Specific Option Pragmas): Likewise.\n\t(C++ Interface): Likewise.\n\nFrom-SVN: r221364", "tree": {"sha": "e65f3f27e2d448430f72e1499d09dd5461cf1a1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e65f3f27e2d448430f72e1499d09dd5461cf1a1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8648c55f3b703a0a824ae0815485dbebe4e01478", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8648c55f3b703a0a824ae0815485dbebe4e01478", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8648c55f3b703a0a824ae0815485dbebe4e01478", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8648c55f3b703a0a824ae0815485dbebe4e01478/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "17abb5ac387fe5ea785517522cab95f035b3a7d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17abb5ac387fe5ea785517522cab95f035b3a7d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17abb5ac387fe5ea785517522cab95f035b3a7d5"}], "stats": {"total": 226, "additions": 66, "deletions": 160}, "files": [{"sha": "e451495c724d1ad72c49eab133e82121bdb82daf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8648c55f3b703a0a824ae0815485dbebe4e01478/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8648c55f3b703a0a824ae0815485dbebe4e01478/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8648c55f3b703a0a824ae0815485dbebe4e01478", "patch": "@@ -1,3 +1,25 @@\n+2015-03-11  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/invoke.texi (-fgnu89-inline): Remove discussion about \n+\told GCC versions.\n+\t(-fabi-compat-version): Likewise.\n+\t(-ffriend-injection): Likewise.\n+\t(-Wdeclaration-after-statement): Likewise.\n+\t(-fomit-frame-pointer): Likewise.\n+\t(-ftree-coalesce-inlined-vars): Likewise.\n+\t(-fvisibility=): Likewise.\n+\t* doc/extend.texi (Typeof): Likewise.\n+\t(Zero Length): Likewise.\n+\t(Escaped Newlines): Likewise.\n+\t(Compound Literals): Likewise.\n+\t(Function Attributes): Likewise.\n+\t(Label Attributes): Likewise.\n+\t(Type Attributes): Likewise.\n+\t(Function Names): Likewise.\n+\t(Other Builtins): Likewise.\n+\t(Function Specific Option Pragmas): Likewise.\n+\t(C++ Interface): Likewise.\n+\n 2015-03-11  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* config/nvptx/nvptx.h (LIBSTDCXX): Define to \"gcc\"."}, {"sha": "91b94f7b610b79ee71451ae20b5e2ed4c1ecd93f", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 29, "deletions": 137, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8648c55f3b703a0a824ae0815485dbebe4e01478/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8648c55f3b703a0a824ae0815485dbebe4e01478/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=8648c55f3b703a0a824ae0815485dbebe4e01478", "patch": "@@ -786,26 +786,6 @@ evaluated only once when using @code{__auto_type}, but twice if\n @code{typeof} is used.\n @end itemize\n \n-@emph{Compatibility Note:} In addition to @code{typeof}, GCC 2 supported\n-a more limited extension that permitted one to write\n-\n-@smallexample\n-typedef @var{T} = @var{expr};\n-@end smallexample\n-\n-@noindent\n-with the effect of declaring @var{T} to have the type of the expression\n-@var{expr}.  This extension does not work with GCC 3 (versions between\n-3.0 and 3.2 crash; 3.2.1 and later give an error).  Code that\n-relies on it should be rewritten to use @code{typeof}:\n-\n-@smallexample\n-typedef typeof(@var{expr}) @var{T};\n-@end smallexample\n-\n-@noindent\n-This works with all versions of GCC@.\n-\n @node Conditionals\n @section Conditionals with Omitted Operands\n @cindex conditional expressions, extensions\n@@ -1498,16 +1478,13 @@ structure or an element of an array.  (However, these uses are\n permitted by GCC as extensions.)\n @end itemize\n \n-GCC versions before 3.0 allowed zero-length arrays to be statically\n-initialized, as if they were flexible arrays.  In addition to those\n-cases that were useful, it also allowed initializations in situations\n-that would corrupt later data.  Non-empty initialization of zero-length\n-arrays is now treated like any case where there are more initializer\n+Non-empty initialization of zero-length\n+arrays is treated like any case where there are more initializer\n elements than the array holds, in that a suitable warning about ``excess\n elements in array'' is given, and the excess elements (all of them, in\n this case) are ignored.\n \n-Instead GCC allows static initialization of flexible array members.\n+GCC allows static initialization of flexible array members.\n This is equivalent to defining a new structure containing the original\n structure followed by an array of sufficient size to contain the data.\n E.g.@: in the following, @code{f1} is constructed as if it were declared\n@@ -1729,9 +1706,10 @@ argument, these arguments are not macro expanded.\n @cindex escaped newlines\n @cindex newlines (escaped)\n \n-Recently, the preprocessor has relaxed its treatment of escaped\n-newlines.  Previously, the newline had to immediately follow a\n-backslash.  The current implementation allows whitespace in the form\n+The preprocessor treatment of escaped newlines is more relaxed \n+than that specified by the C90 standard, which requires the newline\n+to immediately follow a backslash.  \n+GCC's implementation allows whitespace in the form\n of spaces, horizontal and vertical tabs, and form feeds between the\n backslash and the subsequent newline.  The preprocessor issues a\n warning, but treats it as a valid escaped newline and combines the two\n@@ -1905,12 +1883,12 @@ In C, a compound literal designates an unnamed object with static or\n automatic storage duration.  In C++, a compound literal designates a\n temporary object, which only lives until the end of its\n full-expression.  As a result, well-defined C code that takes the\n-address of a subobject of a compound literal can be undefined in C++.\n+address of a subobject of a compound literal can be undefined in C++,\n+so the C++ compiler rejects the conversion of a temporary array to a pointer.\n For instance, if the array compound literal example above appeared\n inside a function, any subsequent use of @samp{foo} in C++ has\n undefined behavior because the lifetime of the array ends after the\n-declaration of @samp{foo}.  As a result, the C++ compiler now rejects\n-the conversion of a temporary array to a pointer.\n+declaration of @samp{foo}.  \n \n As an optimization, the C++ compiler sometimes gives array compound\n literals longer lifetimes: when the array either appears outside a\n@@ -2447,21 +2425,6 @@ function that calls a non-@code{const} function usually must not be\n @code{const}.  It does not make sense for a @code{const} function to\n return @code{void}.\n \n-The attribute @code{const} is not implemented in GCC versions earlier\n-than 2.5.  An alternative way to declare that a function has no side\n-effects, which works in the current version and in some older versions,\n-is as follows:\n-\n-@smallexample\n-typedef int intfn ();\n-\n-extern const intfn square;\n-@end smallexample\n-\n-@noindent\n-This approach does not work in GNU C++ from 2.6.0 on, since the language\n-specifies that the @samp{const} must be attached to the return value.\n-\n @item constructor\n @itemx destructor\n @itemx constructor (@var{priority})\n@@ -2536,14 +2499,13 @@ On systems that support the @code{visibility} attribute, this\n attribute also implies ``default'' visibility.  It is an error to\n explicitly specify any other visibility.\n \n-In previous versions of GCC, the @code{dllexport} attribute was ignored\n-for inlined functions, unless the @option{-fkeep-inline-functions} flag\n-had been used.  The default behavior now is to emit all dllexported\n-inline functions; however, this can cause object file-size bloat, in\n-which case the old behavior can be restored by using\n-@option{-fno-keep-inline-dllexport}.\n+GCC's default behavior is to emit all inline functions with the\n+@code{dllexport} attribute.  Since this can cause object file-size bloat,\n+you can use @option{-fno-keep-inline-dllexport}, which tells GCC to\n+ignore the attribute for inlined functions unless the \n+@option{-fkeep-inline-functions} flag is used instead.\n \n-The attribute is also ignored for undefined symbols.\n+The attribute is ignored for undefined symbols.\n \n When applied to C++ classes, the attribute marks defined non-inlined\n member functions and static data members as exports.  Static consts\n@@ -2595,8 +2557,7 @@ the current translation unit.\n For Microsoft Windows targets the use of the @code{dllimport}\n attribute on functions is not necessary, but provides a small\n performance benefit by eliminating a thunk in the DLL@.  The use of the\n-@code{dllimport} attribute on imported variables was required on older\n-versions of the GNU linker, but can now be avoided by passing the\n+@code{dllimport} attribute on imported variables can be avoided by passing the\n @option{--enable-auto-import} switch to the GNU linker.  As with\n functions, using the attribute for a variable eliminates a thunk in\n the DLL@.\n@@ -2931,8 +2892,8 @@ void *memcpy (void *, const void *, size_t)\n      __attribute__ ((ifunc (\"resolve_memcpy\")));\n @end smallexample\n \n-Indirect functions cannot be weak, and require a recent binutils (at\n-least version 2.20.1), and GNU C library (at least version 2.11.1).\n+Indirect functions cannot be weak.  Binutils version 2.20.1 or higher\n+and GNU C Library version 2.11.1 are required to use this feature.\n \n @item interrupt\n @cindex interrupt handler functions\n@@ -3573,28 +3534,13 @@ restored before calling the @code{noreturn} function.\n It does not make sense for a @code{noreturn} function to have a return\n type other than @code{void}.\n \n-The attribute @code{noreturn} is not implemented in GCC versions\n-earlier than 2.5.  An alternative way to declare that a function does\n-not return, which works in the current version and in some older\n-versions, is as follows:\n-\n-@smallexample\n-typedef void voidfn ();\n-\n-volatile voidfn fatal;\n-@end smallexample\n-\n-@noindent\n-This approach does not work in GNU C++.\n-\n @item nothrow\n @cindex @code{nothrow} function attribute\n The @code{nothrow} attribute is used to inform the compiler that a\n function cannot throw an exception.  For example, most functions in\n the standard C library can be guaranteed not to throw an exception\n with the notable exceptions of @code{qsort} and @code{bsearch} that\n-take function pointer arguments.  The @code{nothrow} attribute is not\n-implemented in GCC versions earlier than 3.3.\n+take function pointer arguments.\n \n @item nosave_low_regs\n @cindex @code{nosave_low_regs} attribute\n@@ -3692,9 +3638,6 @@ Interesting non-pure functions are functions with infinite loops or those\n depending on volatile memory or other system resource, that may change between\n two consecutive calls (such as @code{feof} in a multithreading environment).\n \n-The attribute @code{pure} is not implemented in GCC versions earlier\n-than 2.96.\n-\n @item hot\n @cindex @code{hot} function attribute\n The @code{hot} attribute on a function is used to inform the compiler that\n@@ -3706,9 +3649,6 @@ improving locality.\n When profile feedback is available, via @option{-fprofile-use}, hot functions\n are automatically detected and this attribute is ignored.\n \n-The @code{hot} attribute on functions is not implemented in GCC versions\n-earlier than 4.3.\n-\n @item cold\n @cindex @code{cold} function attribute\n The @code{cold} attribute on functions is used to inform the compiler that\n@@ -3724,9 +3664,6 @@ of hot functions that do call marked functions in rare occasions.\n When profile feedback is available, via @option{-fprofile-use}, cold functions\n are automatically detected and this attribute is ignored.\n \n-The @code{cold} attribute on functions is not implemented in GCC versions\n-earlier than 4.3.\n-\n @item no_sanitize_address\n @itemx no_address_safety_analysis\n @cindex @code{no_sanitize_address} function attribute\n@@ -4660,19 +4597,13 @@ the path following the label is more likely than paths that are not so\n annotated.  This attribute is used in cases where @code{__builtin_expect}\n cannot be used, for instance with computed goto or @code{asm goto}.\n \n-The @code{hot} attribute on labels is not implemented in GCC versions\n-earlier than 4.8.\n-\n @item cold\n @cindex @code{cold} label attribute\n The @code{cold} attribute on labels is used to inform the compiler that\n the path following the label is unlikely to be executed.  This attribute\n is used in cases where @code{__builtin_expect} cannot be used, for instance\n with computed goto or @code{asm goto}.\n \n-The @code{cold} attribute on labels is not implemented in GCC versions\n-earlier than 4.8.\n-\n @end table\n \n @node Attribute Syntax\n@@ -5985,7 +5916,7 @@ main (void)\n If you replaced @code{short_a} with @code{short} in the variable\n declaration, the above program would abort when compiled with\n @option{-fstrict-aliasing}, which is on by default at @option{-O2} or\n-above in recent GCC versions.\n+above.\n \n @item visibility\n In C++, attribute visibility (@pxref{Function Attributes}) can also be\n@@ -7845,21 +7776,8 @@ static const char __func__[] = \"function-name\";\n appeared, where function-name is the name of the lexically-enclosing\n function.  This name is the unadorned name of the function.\n \n-@code{__FUNCTION__} is another name for @code{__func__}.  Older\n-versions of GCC recognize only this name.  However, it is not\n-standardized.  For maximum portability, we recommend you use\n-@code{__func__}, but provide a fallback definition with the\n-preprocessor:\n-\n-@smallexample\n-#if __STDC_VERSION__ < 199901L\n-# if __GNUC__ >= 2\n-#  define __func__ __FUNCTION__\n-# else\n-#  define __func__ \"<unknown>\"\n-# endif\n-#endif\n-@end smallexample\n+@code{__FUNCTION__} is another name for @code{__func__}, provided for\n+backward compatibility with old versions of GCC.\n \n In C, @code{__PRETTY_FUNCTION__} is yet another name for\n @code{__func__}.  However, in C++, @code{__PRETTY_FUNCTION__} contains\n@@ -7897,13 +7815,9 @@ __FUNCTION__ = sub\n __PRETTY_FUNCTION__ = void a::sub(int)\n @end smallexample\n \n-These identifiers are not preprocessor macros.  In GCC 3.3 and\n-earlier, in C only, @code{__FUNCTION__} and @code{__PRETTY_FUNCTION__}\n-were treated as string literals; they could be used to initialize\n-@code{char} arrays, and they could be concatenated with other string\n-literals.  GCC 3.4 and later treat them as variables, like\n-@code{__func__}.  In C++, @code{__FUNCTION__} and\n-@code{__PRETTY_FUNCTION__} have always been variables.\n+These identifiers are variables, not preprocessor macros, and may not\n+be used to initialize @code{char} arrays or be concatenated with other string\n+literals.\n \n @node Return Address\n @section Getting the Return or Frame Address of a Function\n@@ -9718,10 +9632,6 @@ not otherwise permitted in a static initializer (for example,\n @code{0 && foo ()}).  GCC must be more conservative about evaluating the\n built-in in this case, because it has no opportunity to perform\n optimization.\n-\n-Previous versions of GCC did not accept this built-in in data\n-initializers.  The earliest version where it is completely safe is\n-3.0.1.\n @end deftypefn\n \n @deftypefn {Built-in Function} long __builtin_expect (long @var{exp}, long @var{c})\n@@ -17894,9 +17804,6 @@ if @code{attribute((optimize(\"STRING\")))} was specified for that\n function.  The parenthesis around the options is optional.\n @xref{Function Attributes}, for more information about the\n @code{optimize} attribute and the attribute syntax.\n-\n-The @samp{#pragma GCC optimize} pragma is not implemented in GCC\n-versions earlier than 4.4.\n @end table\n \n @table @code\n@@ -17910,9 +17817,6 @@ options.  It is intended for include files where you temporarily want\n to switch to using a different @samp{#pragma GCC target} or\n @samp{#pragma GCC optimize} and then to pop back to the previous\n options.\n-\n-The @samp{#pragma GCC push_options} and @samp{#pragma GCC pop_options}\n-pragmas are not implemented in GCC versions earlier than 4.4.\n @end table\n \n @table @code\n@@ -17922,9 +17826,6 @@ pragmas are not implemented in GCC versions earlier than 4.4.\n This pragma clears the current @code{#pragma GCC target} and\n @code{#pragma GCC optimize} to use the default switches as specified\n on the command line.\n-\n-The @samp{#pragma GCC reset_options} pragma is not implemented in GCC\n-versions earlier than 4.4.\n @end table\n \n @node Loop-Specific Pragmas\n@@ -18557,14 +18458,11 @@ user with a way of explicitly directing the compiler to emit entities\n with vague linkage (and debugging information) in a particular\n translation unit.\n \n-@emph{Note:} As of GCC 2.7.2, these @code{#pragma}s are not useful in\n-most cases, because of COMDAT support and the ``key method'' heuristic\n+@emph{Note:} These @code{#pragma}s have been superceded as of GCC 2.7.2\n+by COMDAT support and the ``key method'' heuristic\n mentioned in @ref{Vague Linkage}.  Using them can actually cause your\n program to grow due to unnecessary out-of-line copies of inline\n-functions.  Currently (3.4) the only benefit of these\n-@code{#pragma}s is reduced duplication of debugging information, and\n-that should be addressed soon on DWARF 2 targets with the use of\n-COMDAT groups.\n+functions.\n \n @table @code\n @item #pragma interface\n@@ -18608,12 +18506,6 @@ file.  For example, in @file{allclass.cc}, giving just\n @samp{#pragma implementation}\n by itself is equivalent to @samp{#pragma implementation \"allclass.h\"}.\n \n-In versions of GNU C++ prior to 2.6.0 @file{allclass.h} was treated as\n-an implementation file whenever you would include it from\n-@file{allclass.cc} even if you never specified @samp{#pragma\n-implementation}.  This was deemed to be more trouble than it was worth,\n-however, and disabled.\n-\n Use the string argument if you want a single implementation file to\n include code from multiple header files.  (You must also use\n @samp{#include} to include the header file; @samp{#pragma"}, {"sha": "1534ed93b3d9c8e1c86d22cea3b64939ce88740d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8648c55f3b703a0a824ae0815485dbebe4e01478/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8648c55f3b703a0a824ae0815485dbebe4e01478/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8648c55f3b703a0a824ae0815485dbebe4e01478", "patch": "@@ -1777,17 +1777,15 @@ releases.\n @opindex fgnu89-inline\n The option @option{-fgnu89-inline} tells GCC to use the traditional\n GNU semantics for @code{inline} functions when in C99 mode.\n-@xref{Inline,,An Inline Function is As Fast As a Macro}.  This option\n-is accepted and ignored by GCC versions 4.1.3 up to but not including\n-4.3.  In GCC versions 4.3 and later it changes the behavior of GCC in\n-C99 mode.  Using this option is roughly equivalent to adding the\n+@xref{Inline,,An Inline Function is As Fast As a Macro}.\n+Using this option is roughly equivalent to adding the\n @code{gnu_inline} function attribute to all inline functions\n (@pxref{Function Attributes}).\n \n The option @option{-fno-gnu89-inline} explicitly tells GCC to use the\n C99 semantics for @code{inline} when in C99 or gnu99 mode (i.e., it\n-specifies the default behavior).  This option was first supported in\n-GCC 4.3.  This option is not supported in @option{-std=c90} or\n+specifies the default behavior).  \n+This option is not supported in @option{-std=c90} or\n @option{-std=gnu90} mode.\n \n The preprocessor macros @code{__GNUC_GNU_INLINE__} and\n@@ -2122,7 +2120,7 @@ See also @option{-Wabi}.\n \n @item -fabi-compat-version=@var{n}\n @opindex fabi-compat-version\n-Starting with GCC 4.5, on targets that support strong aliases, G++\n+On targets that support strong aliases, G++\n works around mangling changes by creating an alias with the correct\n mangled name when defining a symbol with an incorrect mangled name.\n This switch specifies which ABI version to use for the alias.\n@@ -2183,11 +2181,10 @@ deprecated, and may be removed in a future version of G++.\n Inject friend functions into the enclosing namespace, so that they are\n visible outside the scope of the class in which they are declared.\n Friend functions were documented to work this way in the old Annotated\n-C++ Reference Manual, and versions of G++ before 4.1 always worked\n-that way.  However, in ISO C++ a friend function that is not declared\n+C++ Reference Manual.  \n+However, in ISO C++ a friend function that is not declared\n in an enclosing scope can only be found using argument dependent\n-lookup.  This option causes friends to be injected as they were in\n-earlier releases.\n+lookup.  GCC defaults to the standard behavior.\n \n This option is for compatibility, and may be removed in a future\n release of G++.\n@@ -4546,8 +4543,7 @@ except when the same as the default promotion.\n @opindex Wno-declaration-after-statement\n Warn when a declaration is found after a statement in a block.  This\n construct, known from C++, was introduced with ISO C99 and is by default\n-allowed in GCC@.  It is not supported by ISO C90 and was not supported by\n-GCC versions before GCC 3.0.  @xref{Mixed Declarations}.\n+allowed in GCC@.  It is not supported by ISO C90.  @xref{Mixed Declarations}.\n \n @item -Wundef\n @opindex Wundef\n@@ -7594,11 +7590,10 @@ machine-description macro @code{FRAME_POINTER_REQUIRED} controls\n whether a target machine supports this flag.  @xref{Registers,,Register\n Usage, gccint, GNU Compiler Collection (GCC) Internals}.\n \n-Starting with GCC version 4.6, the default setting (when not optimizing for\n-size) for 32-bit GNU/Linux x86 and 32-bit Darwin x86 targets has been changed to\n-@option{-fomit-frame-pointer}.  The default can be reverted to\n-@option{-fno-omit-frame-pointer} by configuring GCC with the\n-@option{--enable-frame-pointer} configure option.\n+The default setting (when not optimizing for\n+size) for 32-bit GNU/Linux x86 and 32-bit Darwin x86 targets is\n+@option{-fomit-frame-pointer}.  You can configure GCC with the\n+@option{--enable-frame-pointer} configure option to change the default.\n \n Enabled at levels @option{-O}, @option{-O2}, @option{-O3}, @option{-Os}.\n \n@@ -8820,8 +8815,7 @@ from other functions.  It is a more limited form of\n @option{-ftree-coalesce-vars}.  This may harm debug information of such\n inlined variables, but it keeps variables of the inlined-into\n function apart from each other, such that they are more likely to\n-contain the expected values in a debugging session.  This was the\n-default in GCC versions older than 4.7.\n+contain the expected values in a debugging session.\n \n @item -ftree-coalesce-vars\n @opindex ftree-coalesce-vars\n@@ -23814,9 +23808,7 @@ available to be linked against from outside the shared object.\n @samp{protected} and @samp{internal} are pretty useless in real-world\n usage so the only other commonly used option is @samp{hidden}.\n The default if @option{-fvisibility} isn't specified is\n-@samp{default}, i.e., make every\n-symbol public---this causes the same behavior as previous versions of\n-GCC@.\n+@samp{default}, i.e., make every symbol public.\n \n A good explanation of the benefits offered by ensuring ELF\n symbols have the correct visibility is given by ``How To Write"}]}