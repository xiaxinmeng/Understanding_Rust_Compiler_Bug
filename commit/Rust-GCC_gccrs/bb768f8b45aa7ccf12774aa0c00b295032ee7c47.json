{"sha": "bb768f8b45aa7ccf12774aa0c00b295032ee7c47", "node_id": "C_kwDOANBUbNoAKGJiNzY4ZjhiNDVhYTdjY2YxMjc3NGFhMGMwMGIyOTUwMzJlZTdjNDc", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-12-13T14:13:21Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-12-13T15:16:28Z"}, "message": "aarch64: Add memmove expansion for +mops\n\nThis second patch in the series adds an inline movmem expansion for TARGET_MOPS\nthat emits the recommended sequence.\n\nA new param aarch64-mops-memmove-size-threshold is added to control the memmove size threshold\nfor this expansion. Its default value is zero to be consistent with the current behaviour where\nwe always emit a libcall, as we don't currently have a movmem inline expansion\n(we should add a compatible-everywhere inline expansion, but that's for the future), so we should\nalways prefer to emit the MOPS sequence when available in lieu of a libcall.\n\nBootstrapped and tested on aarch64-none-linux-gnu.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64.md (aarch64_movmemdi): Define.\n\t(movmemdi): Define.\n\t(unspec): Add UNSPEC_MOVMEM.\n\t* config/aarch64/aarch64.opt (aarch64-mops-memmove-size-threshold):\n\tNew param.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/mops_2.c: New test.", "tree": {"sha": "fc97be718f95d57816cbec7102d4c0f84f4300cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc97be718f95d57816cbec7102d4c0f84f4300cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb768f8b45aa7ccf12774aa0c00b295032ee7c47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb768f8b45aa7ccf12774aa0c00b295032ee7c47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb768f8b45aa7ccf12774aa0c00b295032ee7c47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb768f8b45aa7ccf12774aa0c00b295032ee7c47/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0caf592d6ae836a99907841fccd31c4c5f180e8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0caf592d6ae836a99907841fccd31c4c5f180e8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0caf592d6ae836a99907841fccd31c4c5f180e8d"}], "stats": {"total": 108, "additions": 108, "deletions": 0}, "files": [{"sha": "b71c171ca049f895933c63e43827f3059d4ea801", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb768f8b45aa7ccf12774aa0c00b295032ee7c47/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb768f8b45aa7ccf12774aa0c00b295032ee7c47/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=bb768f8b45aa7ccf12774aa0c00b295032ee7c47", "patch": "@@ -189,6 +189,7 @@\n     UNSPEC_LD3_LANE\n     UNSPEC_LD4_LANE\n     UNSPEC_MB\n+    UNSPEC_MOVMEM\n     UNSPEC_NOP\n     UNSPEC_PACIA1716\n     UNSPEC_PACIB1716\n@@ -1603,6 +1604,52 @@\n }\n )\n \n+(define_insn \"aarch64_movmemdi\"\n+  [(parallel [\n+   (set (match_operand:DI 2 \"register_operand\" \"+&r\") (const_int 0))\n+   (clobber (match_operand:DI 0 \"register_operand\" \"+&r\"))\n+   (clobber (match_operand:DI 1 \"register_operand\" \"+&r\"))\n+   (set (mem:BLK (match_dup 0))\n+        (unspec:BLK [(mem:BLK (match_dup 1)) (match_dup 2)] UNSPEC_MOVMEM))])]\n+ \"TARGET_MOPS\"\n+ \"cpyp\\t[%x0]!, [%x1]!, %x2!\\;cpym\\t[%x0]!, [%x1]!, %x2!\\;cpye\\t[%x0]!, [%x1]!, %x2!\"\n+ [(set_attr \"length\" \"12\")]\n+)\n+\n+;; 0 is dst\n+;; 1 is src\n+;; 2 is size of copy in bytes\n+;; 3 is alignment\n+\n+(define_expand \"movmemdi\"\n+  [(match_operand:BLK 0 \"memory_operand\")\n+   (match_operand:BLK 1 \"memory_operand\")\n+   (match_operand:DI 2 \"general_operand\")\n+   (match_operand:DI 3 \"immediate_operand\")]\n+   \"TARGET_MOPS\"\n+{\n+   rtx sz_reg = operands[2];\n+   /* For constant-sized memmoves check the threshold.\n+      FIXME: We should add a non-MOPS memmove expansion for smaller,\n+      constant-sized memmove to avoid going to a libcall.  */\n+   if (CONST_INT_P (sz_reg)\n+       && INTVAL (sz_reg) < aarch64_mops_memmove_size_threshold)\n+     FAIL;\n+\n+   rtx addr_dst = XEXP (operands[0], 0);\n+   rtx addr_src = XEXP (operands[1], 0);\n+\n+   if (!REG_P (sz_reg))\n+     sz_reg = force_reg (DImode, sz_reg);\n+   if (!REG_P (addr_dst))\n+     addr_dst = force_reg (DImode, addr_dst);\n+   if (!REG_P (addr_src))\n+     addr_src = force_reg (DImode, addr_src);\n+   emit_insn (gen_aarch64_movmemdi (addr_dst, addr_src, sz_reg));\n+   DONE;\n+}\n+)\n+\n ;; 0 is dst\n ;; 1 is val\n ;; 2 is size of copy in bytes"}, {"sha": "33788ffd9e39978ce6b50fa7f48f271b67f646ba", "filename": "gcc/config/aarch64/aarch64.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb768f8b45aa7ccf12774aa0c00b295032ee7c47/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb768f8b45aa7ccf12774aa0c00b295032ee7c47/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.opt?ref=bb768f8b45aa7ccf12774aa0c00b295032ee7c47", "patch": "@@ -284,3 +284,7 @@ Target Joined UInteger Var(aarch64_loop_vect_issue_rate_niters) Init(6) IntegerR\n -param=aarch64-mops-memcpy-size-threshold=\n Target Joined UInteger Var(aarch64_mops_memcpy_size_threshold) Init(256) Param\n Constant memcpy size in bytes above which to start using MOPS sequence.\n+\n+-param=aarch64-mops-memmove-size-threshold=\n+Target Joined UInteger Var(aarch64_mops_memmove_size_threshold) Init(0) Param\n+Constant memmove size in bytes above which to start using MOPS sequence."}, {"sha": "6fda4dd6b1e8321f0ceb3edba750106337af2d7a", "filename": "gcc/testsuite/gcc.target/aarch64/mops_2.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb768f8b45aa7ccf12774aa0c00b295032ee7c47/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmops_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb768f8b45aa7ccf12774aa0c00b295032ee7c47/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmops_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmops_2.c?ref=bb768f8b45aa7ccf12774aa0c00b295032ee7c47", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=armv8.6-a+mops --param=aarch64-mops-memmove-size-threshold=0\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+#include <stdlib.h>\n+\n+/* We want to inline variable-sized memmove.\n+** do_it_mov:\n+**\tcpyp\t\\[x1\\]\\!, \\[x0\\]\\!, x2\\!\n+**\tcpym\t\\[x1\\]\\!, \\[x0\\]\\!, x2\\!\n+**\tcpye\t\\[x1\\]\\!, \\[x0\\]\\!, x2\\!\n+**\tret\n+*/\n+void do_it_mov (char * in, char * out, size_t size)\n+{\n+  __builtin_memmove (out, in, size);\n+}\n+\n+/*\n+** do_it_mov_large:\n+**\tmov\tx2, 1024\n+**\tcpyp\t\\[x1\\]\\!, \\[x0\\]!, x2\\!\n+**\tcpym\t\\[x1\\]\\!, \\[x0\\]!, x2\\!\n+**\tcpye\t\\[x1\\]\\!, \\[x0\\]\\!, x2\\!\n+**\tret\n+*/\n+void do_it_mov_large (char * in, char * out)\n+{\n+  __builtin_memmove (out, in, 1024);\n+}\n+\n+/*\n+** do_it_mov_127:\n+**\tmov\tx2, 127\n+**\tcpyp\t\\[x1\\]\\!, \\[x0\\]!, x2\\!\n+**\tcpym\t\\[x1\\]\\!, \\[x0\\]!, x2\\!\n+**\tcpye\t\\[x1\\]\\!, \\[x0\\]\\!, x2\\!\n+**\tret\n+*/\n+void do_it_mov_127 (char * in, char * out)\n+{\n+  __builtin_memmove (out, in, 127);\n+}\n+\n+/*\n+** do_it_mov_128:\n+**\tmov\tx2, 128\n+**\tcpyp\t\\[x1\\]\\!, \\[x0\\]!, x2\\!\n+**\tcpym\t\\[x1\\]\\!, \\[x0\\]!, x2\\!\n+**\tcpye\t\\[x1\\]\\!, \\[x0\\]\\!, x2\\!\n+**\tret\n+*/\n+void do_it_mov_128 (char * in, char * out)\n+{\n+  __builtin_memmove (out, in, 128);\n+}\n+"}]}