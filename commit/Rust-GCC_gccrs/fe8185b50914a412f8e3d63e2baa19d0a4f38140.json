{"sha": "fe8185b50914a412f8e3d63e2baa19d0a4f38140", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU4MTg1YjUwOTE0YTQxMmY4ZTNkNjNlMmJhYTE5ZDBhNGYzODE0MA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-16T00:16:34Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-16T00:16:34Z"}, "message": "Daily bump.", "tree": {"sha": "026107511166c1bbf3484ad469e1c45b2c8c1c48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/026107511166c1bbf3484ad469e1c45b2c8c1c48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe8185b50914a412f8e3d63e2baa19d0a4f38140", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe8185b50914a412f8e3d63e2baa19d0a4f38140", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe8185b50914a412f8e3d63e2baa19d0a4f38140", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe8185b50914a412f8e3d63e2baa19d0a4f38140/comments", "author": null, "committer": null, "parents": [{"sha": "6c2848ad02feef5ac094d1158be3861819b3bb49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c2848ad02feef5ac094d1158be3861819b3bb49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c2848ad02feef5ac094d1158be3861819b3bb49"}], "stats": {"total": 388, "additions": 387, "deletions": 1}, "files": [{"sha": "50966f515207b58a01bb6e7f4472d7935f935cfd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe8185b50914a412f8e3d63e2baa19d0a4f38140/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe8185b50914a412f8e3d63e2baa19d0a4f38140/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe8185b50914a412f8e3d63e2baa19d0a4f38140", "patch": "@@ -1,3 +1,58 @@\n+2020-07-15  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/95355\n+\t* config/i386/sync.md\n+\t(peephole2 to remove unneded compare after CMPXCHG): New pattern.\n+\n+2020-07-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libgomp/96198\n+\t* omp-general.h (struct omp_for_data): Rename min_inner_iterations\n+\tmember to first_inner_iterations, adjust comment.\n+\t* omp-general.c (omp_extract_for_data): Adjust for the above change.\n+\tAlways use n1first and n2first to compute it, rather than depending\n+\ton single_nonrect_cond_code.  Similarly, always compute factor\n+\tas (m2 - m1) * outer_step / inner_step rather than sometimes m1 - m2\n+\tdepending on single_nonrect_cond_code.\n+\t* omp-expand.c (expand_omp_for_init_vars): Rename min_inner_iterations\n+\tto first_inner_iterations and min_inner_iterationsd to\n+\tfirst_inner_iterationsd.\n+\n+2020-07-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/96174\n+\t* config/i386/avx512fintrin.h (_mm512_cmpeq_pd_mask,\n+\t_mm512_mask_cmpeq_pd_mask, _mm512_cmplt_pd_mask,\n+\t_mm512_mask_cmplt_pd_mask, _mm512_cmple_pd_mask,\n+\t_mm512_mask_cmple_pd_mask, _mm512_cmpunord_pd_mask,\n+\t_mm512_mask_cmpunord_pd_mask, _mm512_cmpneq_pd_mask,\n+\t_mm512_mask_cmpneq_pd_mask, _mm512_cmpnlt_pd_mask,\n+\t_mm512_mask_cmpnlt_pd_mask, _mm512_cmpnle_pd_mask,\n+\t_mm512_mask_cmpnle_pd_mask, _mm512_cmpord_pd_mask,\n+\t_mm512_mask_cmpord_pd_mask, _mm512_cmpeq_ps_mask,\n+\t_mm512_mask_cmpeq_ps_mask, _mm512_cmplt_ps_mask,\n+\t_mm512_mask_cmplt_ps_mask, _mm512_cmple_ps_mask,\n+\t_mm512_mask_cmple_ps_mask, _mm512_cmpunord_ps_mask,\n+\t_mm512_mask_cmpunord_ps_mask, _mm512_cmpneq_ps_mask,\n+\t_mm512_mask_cmpneq_ps_mask, _mm512_cmpnlt_ps_mask,\n+\t_mm512_mask_cmpnlt_ps_mask, _mm512_cmpnle_ps_mask,\n+\t_mm512_mask_cmpnle_ps_mask, _mm512_cmpord_ps_mask,\n+\t_mm512_mask_cmpord_ps_mask): Move outside of __OPTIMIZE__ guarded\n+\tsection.\n+\n+2020-07-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/96176\n+\t* builtins.c: Include gimple-ssa.h, tree-ssa-live.h and\n+\ttree-outof-ssa.h.\n+\t(expand_expr_force_mode): If exp is a SSA_NAME with different mode\n+\tfrom MODE and get_gimple_for_ssa_name is a cast from MODE, use the\n+\tcast's rhs.\n+\n+2020-07-15  Jiufu Guo   <guojiufu@cn.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_loop_unroll_adjust): Refine hook.\n+\n 2020-07-14  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config/rs6000/rs6000.md (rotldi3_insert_sf): Add TARGET_POWERPC64"}, {"sha": "788faba5246fb7f08e530e5b045b3279e8629d51", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe8185b50914a412f8e3d63e2baa19d0a4f38140/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe8185b50914a412f8e3d63e2baa19d0a4f38140/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=fe8185b50914a412f8e3d63e2baa19d0a4f38140", "patch": "@@ -1 +1 @@\n-20200715\n+20200716"}, {"sha": "27c26289bea0d6a1b0bd2e271ecc7e71ea1fd706", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 258, "deletions": 0, "changes": 258, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe8185b50914a412f8e3d63e2baa19d0a4f38140/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe8185b50914a412f8e3d63e2baa19d0a4f38140/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fe8185b50914a412f8e3d63e2baa19d0a4f38140", "patch": "@@ -1,3 +1,261 @@\n+2020-07-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Find_Overlaid_Entity): Fix style in comment.\n+\t(Note_Possible_Modification): Simplify repeated calls to Ekind.\n+\n+2020-07-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_aggr.adb (Flatten): Adjust description.\n+\t(Convert_To_Positional): Remove obsolete ??? comment and use\n+\tCompile_Time_Known_Value in the final test.\n+\n+2020-07-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* par-ch4.adb (P_Iterated_Component_Association): Extended to\n+\trecognzize the similar Iterated_Element_Association. This node\n+\tis only generated when an explicit Key_Expression is given.\n+\tOtherwise the distinction between the two iterated forms is done\n+\tduring semantic analysis.\n+\t* sinfo.ads: New node N_Iterated_Element_Association, for\n+\tAda202x container aggregates.  New field Key_Expression.\n+\t* sinfo.adb: Subprograms for new node and newn field.\n+\t* sem_aggr.adb (Resolve_Iterated_Component_Association): Handle\n+\tthe case where the Iteration_Scheme is an\n+\tIterator_Specification.\n+\t* exp_aggr.adb (Wxpand_Iterated_Component): Handle a component\n+\twith an Iterated_Component_Association, generate proper loop\n+\tusing given Iterator_Specification.\n+\t* exp_util.adb (Insert_Axtions): Handle new node as other\n+\taggregate components.\n+\t* sem.adb, sprint.adb: Handle new node.\n+\t* tbuild.adb (Make_Implicit_Loop_Statement): Handle properly a\n+\tloop with an Iterator_ specification.\n+\n+2020-07-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/s-stposu.adb (Allocate_Any_Controlled): Fix logic in\n+\tlock/unlock.\n+\n+2020-07-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Is_Object_Reference): Return True on\n+\tN_Target_Name.\n+\n+2020-07-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch13.adb (Check_Aspect_At_End_Of_Declarations): Add proper\n+\thandling of Aspect_Predicate_Failure, consistent with\n+\tCheck_Aspect_At_Freeze_Point.\n+\n+2020-07-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch13.adb (Check_Aspect_Too_Late): Mention -gnat2020 switch\n+\tin error message.\n+\n+2020-07-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* einfo.ads (Delayed Freezing and Elaboration): Adjust description.\n+\t* freeze.adb (Freeze_Object_Declaration): Likewise.\n+\t* sem_ch3.adb (Delayed_Aspect_Present): Likewise.  Do not return\n+\ttrue for Alignment.\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Do not always delay\n+\tfor Alignment.  Moreover, for Alignment and various Size aspects,\n+\tdo not delay if the expression is an attribute whose prefix is the\n+\tStandard package.\n+\n+2020-07-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch6.adb (Requires_Atomic_Or_Volatile_Copy): Return false\n+\tinside an initialization procedure.\n+\n+2020-07-15  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_util.adb (Is_Renaming): Add ekind checks.\n+\n+2020-07-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* doc/gnat_ugn/gnat_utility_programs.rst: Remove doc on obsolete\n+\ttools.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2020-07-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Type_Conversion): Protect against null\n+\tentity.  Add proper tag for -gnatwr warning.\n+\n+2020-07-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Procedure_Call): Detect use of operators\n+\tin a procedure call.\n+\t* sem_util.adb: Minor edit.\n+\n+2020-07-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_spark.adb (Expand_SPARK_Delta_Or_Update): Apply scalar\n+\trange checks against the base type of an index type, not against\n+\tthe index type itself.\n+\n+2020-07-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* einfo.ads (Delayed Freezing and Elaboration): Minor tweaks.\n+\tDocument the discrepancy between the aspect and the non-aspect\n+\tcases for alignment settings in object declarations.\n+\n+2020-07-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch3.adb (Freeze_Type): Remove warning in expander,\n+\treplaced by a corresponding error in sem_ch13.adb. Replace\n+\tRTE_Available by RTU_Loaded to avoid adding unnecessary\n+\tdependencies.\n+\t* sem_ch13.adb (Associate_Storage_Pool): New procedure.\n+\t(Analyze_Attribute_Definition_Clause\n+\t[Attribute_Simple_Storage_Pool| Attribute_Storage_Pool]): Call\n+\tAssociate_Storage_Pool to add proper legality checks on\n+\tsubpools.\n+\n+2020-07-15  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/a-cbdlli.adb, libgnat/a-cbdlli.ads,\n+\tlibgnat/a-cbhama.adb, libgnat/a-cbhama.ads,\n+\tlibgnat/a-cbhase.adb, libgnat/a-cbhase.ads,\n+\tlibgnat/a-cbmutr.adb, libgnat/a-cbmutr.ads,\n+\tlibgnat/a-cborma.adb, libgnat/a-cborma.ads,\n+\tlibgnat/a-cborse.adb, libgnat/a-cborse.ads,\n+\tlibgnat/a-cbprqu.adb, libgnat/a-cbprqu.ads,\n+\tlibgnat/a-cbsyqu.adb, libgnat/a-cbsyqu.ads,\n+\tlibgnat/a-cdlili.adb, libgnat/a-cdlili.ads,\n+\tlibgnat/a-cidlli.adb, libgnat/a-cidlli.ads,\n+\tlibgnat/a-cihama.adb, libgnat/a-cihama.ads,\n+\tlibgnat/a-cihase.adb, libgnat/a-cihase.ads,\n+\tlibgnat/a-cimutr.adb, libgnat/a-cimutr.ads,\n+\tlibgnat/a-ciorma.adb, libgnat/a-ciorma.ads,\n+\tlibgnat/a-ciormu.adb, libgnat/a-ciormu.ads,\n+\tlibgnat/a-ciorse.adb, libgnat/a-ciorse.ads,\n+\tlibgnat/a-cohama.adb, libgnat/a-cohama.ads,\n+\tlibgnat/a-cohase.adb, libgnat/a-cohase.ads,\n+\tlibgnat/a-coinve.adb, libgnat/a-coinve.ads,\n+\tlibgnat/a-comutr.adb, libgnat/a-comutr.ads,\n+\tlibgnat/a-convec.adb, libgnat/a-convec.ads,\n+\tlibgnat/a-coorma.adb, libgnat/a-coorma.ads,\n+\tlibgnat/a-coormu.adb, libgnat/a-coormu.ads,\n+\tlibgnat/a-coorse.adb, libgnat/a-coorse.ads: Add SPARK_Mode =>\n+\tOff.\n+\n+2020-07-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch3.adb (Delayed_Aspect_Present): Fix oversight in loop.\n+\t* freeze.adb (Freeze_Object_Declaration): Use Declaration_Node\n+\tinstead of Parent for the sake of consistency.\n+\n+2020-07-15  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_attr.adb (Resolve_Attribute): Resolve overloaded\n+\tN_Selected_Component prefix of 'Access. Required to handle\n+\toverloaded prefixed view of protected subprograms.\n+\n+2020-07-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* doc/gnat_ugn/about_this_guide.rst: Remove old section and\n+\tupdate for Ada 202x.\n+\t* doc/gnat_ugn/getting_started_with_gnat.rst: Add a system\n+\trequirements section. Remove obsolete section and minimal\n+\trewording on the getting started section.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2020-07-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_Assign_Array): Use short-circuit operator\n+\t(style).\n+\t* sem_res.adb (Resolve_Indexed_Component): Fix style in comment.\n+\t* sem_util.adb (Is_Effectively_Volatile_Object): Handle slices\n+\tjust like indexed components; handle qualified expressions and\n+\ttype conversions lie in Is_OK_Volatile_Context.\n+\t(Is_OK_Volatile_Context): Handle qualified expressions just like\n+\ttype conversions.\n+\n+2020-07-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Atomic_Components): Simplify with Ekind_In.\n+\t(Complex_Representation): Fix type of E_Id, which just like when\n+\tfor pragma Atomic_Components will hold an N_Identifier node, not\n+\tan entity.\n+\t* sem_util.adb (Is_Effectively_Volatile): Refactor to avoid\n+\tunnecessary computation.\n+\n+2020-07-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* inline.adb, inline.ads\n+\t(Inline_Static_Expression_Function_Call): Renamed\n+\tInline_Static_Function_Call.\n+\t* sem_ch13.adb (Analyze_Aspect_Static): Allow static intrinsic\n+\timported functions under -gnatX.\n+\t* sem_util.ads, sem_util.adb (Is_Static_Expression_Function):\n+\tRenamed Is_Static_Function.\n+\t(Is_Static_Expression_Function_Call): Renamed\n+\tIs_Static_Function_Call.\n+\t* sem_ch6.adb, sem_elab.adb, sem_res.adb: Update calls to\n+\tIs_Static_Function*.\n+\t* sem_eval.adb (Fold_Dummy, Eval_Intrinsic_Call, Fold_Shift):\n+\tNew.\n+\t(Eval_Call): Add support for intrinsic calls, code refactoring.\n+\t(Eval_Entity_Name): Code refactoring.\n+\t(Eval_Logical_Op): Update comment.\n+\t(Eval_Shift): Call Fold_Shift. Update comments.\n+\t* par-prag.adb (Par [Pragma_Extensions_Allowed]): Set\n+\tAda_Version to Ada_Version_Type'Last to handle\n+\tExtensions_Allowed (On) consistently.\n+\t* opt.ads (Extensions_Allowed): Update documentation.\n+\t* sem_attr.adb: Update comment.\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Update\n+\tdocumentation of Extensions_Allowed.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2020-07-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Iterated_Component_Association): Ensure\n+\tTyp is never accessed uninitialized.\n+\n+2020-07-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* doc/gnat_rm/representation_clauses_and_pragmas.rst: Fix typo.\n+\t* gnat_rm.texi: Regenerate.\n+\t* libgnat/s-secsta.ads (Memory_Alignment): Likewise.\n+\n+2020-07-15  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch6.adb: Add a comma and fix a typo (machinary =>\n+\tmachinery) in comment.\n+\t* exp_aggr.adb: Reformat, fix capitalization, and add a couple\n+\tof commas in a comment. Adjust columns in several code\n+\tfragments.\n+\t* sem_aggr.adb: Reformat and add a comma in a comment.\n+\n+2020-07-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch9.adb (Expand_N_Timed_Entry_Call): Use the Sloc of\n+\tthe delay statement in the expansion.\n+\n+2020-07-15  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Iterated_Component_Association): New\n+\tprocedure, internal to Resolve_Container_Aggregate, to complete\n+\tsemantic analysis of Iterated_Component_Associations.\n+\t* exp_aggr.adb (Expand_Iterated_Component): New procedure,\n+\tinternal to Expand_Container_Aggregate, to expand the construct\n+\tinto an implicit loop that performs individual insertions into\n+\tthe target aggregate.\n+\n+2020-07-15  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_ch6.adb (Make_Build_In_Place_Call_Allocator): Normalize\n+\tthe associated node for internally generated objects to be like\n+\ttheir SOAAT counter-parts.\n+\n+2020-07-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/g-socket.adb (Wait_On_Socket): Fix potentially\n+\tuninitialized variable.\n+\n 2020-07-10  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* sem_ch8.adb (Find_Direct_Name): Fix code to match the comment."}, {"sha": "37a1ccefea6356653802c82a9dca302d9a1ce869", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe8185b50914a412f8e3d63e2baa19d0a4f38140/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe8185b50914a412f8e3d63e2baa19d0a4f38140/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fe8185b50914a412f8e3d63e2baa19d0a4f38140", "patch": "@@ -1,3 +1,19 @@\n+2020-07-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* parser.c (cp_parser_declaration): Avoid copying tokens.\n+\t(cp_parser_block_declaration): RAII token pointer.\n+\n+2020-07-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* parser.c (cp_parser_skip_to_closing_parenthesis_1): Deal with\n+\tmeeting a deferred pragma.\n+\t(cp_parser_skip_to_end_of_statement): Likewise.\n+\t(cp_parser_skip_to_end_of_block_or_statement): Likewise.\n+\t(cp_parser_skip_to_pragma_eol): We should never meet EOF.\n+\t(cp_parser_omp_declare_simd): Likewise.\n+\t(cp_parser_omp_declare_reduction, cp_parser_oacc_routine)\n+\t(pragma_lex): Likewise.\n+\n 2020-07-14  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/95789"}, {"sha": "077cd3ff5c3e062a59bc73811f0fe444de6240d5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe8185b50914a412f8e3d63e2baa19d0a4f38140/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe8185b50914a412f8e3d63e2baa19d0a4f38140/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fe8185b50914a412f8e3d63e2baa19d0a4f38140", "patch": "@@ -1,3 +1,23 @@\n+2020-07-15  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/95355\n+\t* gcc.target/i386/pr96189.c: New test.\n+\n+2020-07-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/parse/pragma-recovery.C: New.\n+\n+2020-07-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/96174\n+\t* gcc.target/i386/avx512f-vcmppd-3.c: New test.\n+\t* gcc.target/i386/avx512f-vcmpps-3.c: New test.\n+\n+2020-07-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/96176\n+\t* gcc.target/i386/pr96176.c: New test.\n+\n 2020-07-14  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/59978"}, {"sha": "b5db16aec79b65c0960b4478a39b49f35f560ac1", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe8185b50914a412f8e3d63e2baa19d0a4f38140/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe8185b50914a412f8e3d63e2baa19d0a4f38140/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=fe8185b50914a412f8e3d63e2baa19d0a4f38140", "patch": "@@ -1,3 +1,40 @@\n+2020-07-15  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.fortran/alloc-1.F90: Use c_size_t to\n+\tavoid conversion on 32bit systems from 32bit to 64bit due\n+\tto -fdefault-integer-8.\n+\n+2020-07-15  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.fortran/struct-elem-map-1.f90: Remove unused\n+\tvariables; add character(kind=4) tests; update TODO comment.\n+\n+2020-07-15  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* allocator.c: Add ialias for omp_init_allocator and\n+\tomp_destroy_allocator.\n+\t* configure.ac: Set INTPTR_T_KIND.\n+\t* configure: Regenerate.\n+\t* Makefile.in: Regenerate.\n+\t* testsuite/Makefile.in: Regenerate.\n+\t* fortran.c (omp_init_allocator_, omp_destroy_allocator_,\n+\tomp_set_default_allocator_, omp_get_default_allocator_): New\n+\tfunctions and ialias_redirect.\n+\t* icv.c: Add ialias for omp_set_default_allocator and\n+\tomp_get_default_allocator.\n+\t* libgomp.map (OMP_5.0.1): Add omp_init_allocator_,\n+\tomp_destroy_allocator_, omp_set_default_allocator_ and\n+\tomp_get_default_allocator_.\n+\t* omp_lib.f90.in: Add allocator traits parameters, declare\n+\tallocator routines and add related kind parameters.\n+\t* omp_lib.h.in: Likewise.\n+\t* testsuite/libgomp.c-c++-common/alloc-2.c: Fix sizeof.\n+\t* testsuite/libgomp.fortran/alloc-1.F90: New test.\n+\t* testsuite/libgomp.fortran/alloc-2.F90: New test.\n+\t* testsuite/libgomp.fortran/alloc-3.F: New test.\n+\t* testsuite/libgomp.fortran/alloc-4.f90: New test.\n+\t* testsuite/libgomp.fortran/alloc-5.f90: New test.\n+\n 2020-07-14  Tom de Vries  <tom@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>\n \t    Thomas Schwinge  <thomas@codesourcery.com>"}]}