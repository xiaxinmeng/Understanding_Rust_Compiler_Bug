{"sha": "2c31a8be4a5db11a0a0e97c366dded6362421086", "node_id": "C_kwDOANBUbNoAKDJjMzFhOGJlNGE1ZGIxMWEwYTBlOTdjMzY2ZGRlZDYzNjI0MjEwODY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-24T10:13:39Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-24T10:13:39Z"}, "message": "properly disable -fsplit-stack on non-glibc targets [PR104170]\n\nOn Sat, Jan 22, 2022 at 10:32:21AM +0100, Martin Li\u0161ka wrote:\n> I've just noticed the patch broke a few cross compilers:\n>\n> s390x-ibm-tpf:\n>\n> /home/marxin/buildworker/zen2-cross-compilers/build/gcc/common/config/s390/s390-common.cc: In function \u2018bool s390_supports_split_stack(bool, gcc_options*)\u2019:\n> /home/marxin/buildworker/zen2-cross-compilers/build/gcc/common/config/s390/s390-common.cc:126:13: error: \u2018struct gcc_options\u2019 has no member named \u2018x_linux_libc\u2019\n>   126 |   if (opts->x_linux_libc == LIBC_GLIBC)\n>       |             ^~~~~~~~~~~~\n>\n> i686-kopensolaris-gnu, i686-symbolics-gnu\n>\n> /home/marxin/buildworker/zen2-cross-compilers/build/gcc/common/config/i386/i386-common.cc: In function \u2018bool ix86_supports_split_stack(bool, gcc_options*)\u2019:\n> /home/marxin/buildworker/zen2-cross-compilers/build/gcc/common/config/i386/i386-common.cc:1721:13: error: \u2018struct gcc_options\u2019 has no member named \u2018x_linux_libc\u2019\n>  1721 |   if (opts->x_linux_libc != LIBC_GLIBC)\n>       |             ^~~~~~~~~~~~\n> make[1]: *** [Makefile:2418: i386-common.o] Error 1\n>\n> Can you please take a look? Btw. do you have a bugzilla account?\n\nI bet instead of opts->x_linux_libc != LIBC_GLIBC it needs to use\n #ifdef OPTION_GLIBC\n   if (!OPTION_GLIBC)\n #endif\nor so.  I think the first committed patch actually used that\nbut used it in #if directive, which is wrong because it is something\nthat needs to be evaluated at runtime.\n\nThat doesn't work well either, because the *supports_split_stack\nhooks have opts argument and OPTION_GLIBC doesn't take that.\n\nSo, here is a patch that introduces OPTION_*_P macros that take opts\nas an argument and redefines OPTION_* using those (similarly to how\nthe option scripts create TARGET_*_P and TARGET_* macros).\n\n2022-01-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR bootstrap/104170\n\t* config/linux.h (OPTION_GLIBC_P, OPTION_UCLIBC_P,\n\tOPTION_BIONIC_P, OPTION_MUSL_P): Define.\n\t(OPTION_GLIBC, OPTION_UCLIBC, OPTION_BIONIC, OPTION_MUSL): Redefine\n\tusing OPTION_*_P macros.\n\t* config/alpha/linux.h (OPTION_GLIBC_P, OPTION_UCLIBC_P,\n\tOPTION_BIONIC_P, OPTION_MUSL_P): Define.\n\t(OPTION_GLIBC, OPTION_UCLIBC, OPTION_BIONIC, OPTION_MUSL): Redefine\n\tusing OPTION_*_P macros.\n\t* config/rs6000/linux.h (OPTION_GLIBC_P, OPTION_UCLIBC_P,\n\tOPTION_BIONIC_P, OPTION_MUSL_P): Define.\n\t(OPTION_GLIBC, OPTION_UCLIBC, OPTION_BIONIC, OPTION_MUSL): Redefine\n\tusing OPTION_*_P macros.\n\t* config/rs6000/linux64.h (OPTION_GLIBC_P, OPTION_UCLIBC_P,\n\tOPTION_BIONIC_P, OPTION_MUSL_P): Define.\n\t(OPTION_GLIBC, OPTION_UCLIBC, OPTION_BIONIC, OPTION_MUSL): Redefine\n\tusing OPTION_*_P macros.\n\t* config/fuchsia.h (OPTION_MUSL_P): Redefine.\n\t* config/glibc-stdint.h (OPTION_MUSL_P): Define if not defined.\n\t* common/config/s390/s390-common.cc (s390_supports_split_stack): Re-add\n\tATTRIBUTE_UNUSED to opts parameter.  If OPTION_GLIBC_P is defined, use\n\tOPTION_GLIBC_P (opts) as condition, otherwise assume if (false).\n\t* common/config/i386/i386-common.cc (ix86_supports_split_stack): If\n\tOPTION_GLIBC_P is defined use !OPTION_GLIBC_P (opts) as condition,\n\totherwise assume if (true).", "tree": {"sha": "05d4bf8380fcdc83d6c63f02290e640b806628bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05d4bf8380fcdc83d6c63f02290e640b806628bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c31a8be4a5db11a0a0e97c366dded6362421086", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c31a8be4a5db11a0a0e97c366dded6362421086", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c31a8be4a5db11a0a0e97c366dded6362421086", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c31a8be4a5db11a0a0e97c366dded6362421086/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c106529eb219976426eeb9b3e47ad7f496e89b0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c106529eb219976426eeb9b3e47ad7f496e89b0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c106529eb219976426eeb9b3e47ad7f496e89b0e"}], "stats": {"total": 115, "additions": 71, "deletions": 44}, "files": [{"sha": "607e9f20e8562fd2be566770a670a925a39581ec", "filename": "gcc/common/config/i386/i386-common.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c31a8be4a5db11a0a0e97c366dded6362421086/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c31a8be4a5db11a0a0e97c366dded6362421086/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc?ref=2c31a8be4a5db11a0a0e97c366dded6362421086", "patch": "@@ -1717,8 +1717,8 @@ static bool\n ix86_supports_split_stack (bool report,\n \t\t\t   struct gcc_options *opts ATTRIBUTE_UNUSED)\n {\n-#ifdef TARGET_THREAD_SPLIT_STACK_OFFSET\n-  if (opts->x_linux_libc != LIBC_GLIBC)\n+#if defined(TARGET_THREAD_SPLIT_STACK_OFFSET) && defined(OPTION_GLIBC_P)\n+  if (!OPTION_GLIBC_P (opts))\n #endif\n     {\n       if (report)"}, {"sha": "caec2f14c6cdd3cc57b7e318c0ccc6d2e1d96bd6", "filename": "gcc/common/config/s390/s390-common.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c31a8be4a5db11a0a0e97c366dded6362421086/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c31a8be4a5db11a0a0e97c366dded6362421086/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.cc?ref=2c31a8be4a5db11a0a0e97c366dded6362421086", "patch": "@@ -121,10 +121,12 @@ s390_handle_option (struct gcc_options *opts ATTRIBUTE_UNUSED,\n \n static bool\n s390_supports_split_stack (bool report,\n-\t\t\t   struct gcc_options *opts)\n+\t\t\t   struct gcc_options *opts ATTRIBUTE_UNUSED)\n {\n-  if (opts->x_linux_libc == LIBC_GLIBC)\n+#ifdef OPTION_GLIBC_P\n+  if (OPTION_GLIBC_P (opts))\n     return true;\n+#endif\n \n   if (report)\n     error (\"%<-fsplit-stack%> currently only supported on GNU/Linux\");"}, {"sha": "14ced5f8be617ac725c635eb8b7974ab4b2053e9", "filename": "gcc/config/alpha/linux.h", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c31a8be4a5db11a0a0e97c366dded6362421086/gcc%2Fconfig%2Falpha%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c31a8be4a5db11a0a0e97c366dded6362421086/gcc%2Fconfig%2Falpha%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Flinux.h?ref=2c31a8be4a5db11a0a0e97c366dded6362421086", "patch": "@@ -58,18 +58,23 @@ along with GCC; see the file COPYING3.  If not see\n #define WCHAR_TYPE \"int\"\n \n #ifdef SINGLE_LIBC\n-#define OPTION_GLIBC  (DEFAULT_LIBC == LIBC_GLIBC)\n-#define OPTION_UCLIBC (DEFAULT_LIBC == LIBC_UCLIBC)\n-#define OPTION_BIONIC (DEFAULT_LIBC == LIBC_BIONIC)\n-#undef OPTION_MUSL\n-#define OPTION_MUSL   (DEFAULT_LIBC == LIBC_MUSL)\n+#define OPTION_GLIBC_P(opts)\t(DEFAULT_LIBC == LIBC_GLIBC)\n+#define OPTION_UCLIBC_P(opts)\t(DEFAULT_LIBC == LIBC_UCLIBC)\n+#define OPTION_BIONIC_P(opts)\t(DEFAULT_LIBC == LIBC_BIONIC)\n+#undef OPTION_MUSL_P\n+#define OPTION_MUSL_P(opts)\t(DEFAULT_LIBC == LIBC_MUSL)\n #else\n-#define OPTION_GLIBC  (linux_libc == LIBC_GLIBC)\n-#define OPTION_UCLIBC (linux_libc == LIBC_UCLIBC)\n-#define OPTION_BIONIC (linux_libc == LIBC_BIONIC)\n-#undef OPTION_MUSL\n-#define OPTION_MUSL   (linux_libc == LIBC_MUSL)\n+#define OPTION_GLIBC_P(opts)\t((opts)->x_linux_libc == LIBC_GLIBC)\n+#define OPTION_UCLIBC_P(opts)\t((opts)->x_linux_libc == LIBC_UCLIBC)\n+#define OPTION_BIONIC_P(opts)\t((opts)->x_linux_libc == LIBC_BIONIC)\n+#undef OPTION_MUSL_P\n+#define OPTION_MUSL_P(opts)\t((opts)->x_linux_libc == LIBC_MUSL)\n #endif\n+#define OPTION_GLIBC\t\tOPTION_GLIBC_P (&global_options)\n+#define OPTION_UCLIBC\t\tOPTION_UCLIBC_P (&global_options)\n+#define OPTION_BIONIC\t\tOPTION_BIONIC_P (&global_options)\n+#undef OPTION_MUSL\n+#define OPTION_MUSL\t\tOPTION_MUSL_P (&global_options)\n \n /* Determine what functions are present at the runtime;\n    this includes full c99 runtime and sincos.  */"}, {"sha": "0baf6f1f38505633597b4ef0dcb6765c4b656ecf", "filename": "gcc/config/fuchsia.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c31a8be4a5db11a0a0e97c366dded6362421086/gcc%2Fconfig%2Ffuchsia.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c31a8be4a5db11a0a0e97c366dded6362421086/gcc%2Fconfig%2Ffuchsia.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffuchsia.h?ref=2c31a8be4a5db11a0a0e97c366dded6362421086", "patch": "@@ -52,6 +52,8 @@ along with GCC; see the file COPYING3.  If not see\n /* We are using MUSL as our libc.  */\n #undef  OPTION_MUSL\n #define OPTION_MUSL 1\n+#undef  OPTION_MUSL_P\n+#define OPTION_MUSL_P(opts) 1\n \n #ifndef TARGET_SUB_OS_CPP_BUILTINS\n #define TARGET_SUB_OS_CPP_BUILTINS()"}, {"sha": "a3652d0112db842c81462bd1549bf25d0eb63635", "filename": "gcc/config/glibc-stdint.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c31a8be4a5db11a0a0e97c366dded6362421086/gcc%2Fconfig%2Fglibc-stdint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c31a8be4a5db11a0a0e97c366dded6362421086/gcc%2Fconfig%2Fglibc-stdint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fglibc-stdint.h?ref=2c31a8be4a5db11a0a0e97c366dded6362421086", "patch": "@@ -27,6 +27,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #ifndef OPTION_MUSL\n #define OPTION_MUSL 0\n #endif\n+#ifndef OPTION_MUSL_P\n+#define OPTION_MUSL_P(opts) 0\n+#endif\n \n #define SIG_ATOMIC_TYPE \"int\"\n "}, {"sha": "74f70793d90d5f4ff82bbddc0fac6360280b93c1", "filename": "gcc/config/linux.h", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c31a8be4a5db11a0a0e97c366dded6362421086/gcc%2Fconfig%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c31a8be4a5db11a0a0e97c366dded6362421086/gcc%2Fconfig%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux.h?ref=2c31a8be4a5db11a0a0e97c366dded6362421086", "patch": "@@ -29,18 +29,23 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n /* C libraries supported on Linux.  */\n #ifdef SINGLE_LIBC\n-#define OPTION_GLIBC  (DEFAULT_LIBC == LIBC_GLIBC)\n-#define OPTION_UCLIBC (DEFAULT_LIBC == LIBC_UCLIBC)\n-#define OPTION_BIONIC (DEFAULT_LIBC == LIBC_BIONIC)\n-#undef OPTION_MUSL\n-#define OPTION_MUSL   (DEFAULT_LIBC == LIBC_MUSL)\n+#define OPTION_GLIBC_P(opts)\t(DEFAULT_LIBC == LIBC_GLIBC)\n+#define OPTION_UCLIBC_P(opts)\t(DEFAULT_LIBC == LIBC_UCLIBC)\n+#define OPTION_BIONIC_P(opts)\t(DEFAULT_LIBC == LIBC_BIONIC)\n+#undef OPTION_MUSL_P\n+#define OPTION_MUSL_P(opts)\t(DEFAULT_LIBC == LIBC_MUSL)\n #else\n-#define OPTION_GLIBC  (linux_libc == LIBC_GLIBC)\n-#define OPTION_UCLIBC (linux_libc == LIBC_UCLIBC)\n-#define OPTION_BIONIC (linux_libc == LIBC_BIONIC)\n-#undef OPTION_MUSL\n-#define OPTION_MUSL   (linux_libc == LIBC_MUSL)\n+#define OPTION_GLIBC_P(opts)\t((opts)->x_linux_libc == LIBC_GLIBC)\n+#define OPTION_UCLIBC_P(opts)\t((opts)->x_linux_libc == LIBC_UCLIBC)\n+#define OPTION_BIONIC_P(opts)\t((opts)->x_linux_libc == LIBC_BIONIC)\n+#undef OPTION_MUSL_P\n+#define OPTION_MUSL_P(opts)\t((opts)->x_linux_libc == LIBC_MUSL)\n #endif\n+#define OPTION_GLIBC\t\tOPTION_GLIBC_P (&global_options)\n+#define OPTION_UCLIBC\t\tOPTION_UCLIBC_P (&global_options)\n+#define OPTION_BIONIC\t\tOPTION_BIONIC_P (&global_options)\n+#undef OPTION_MUSL\n+#define OPTION_MUSL\t\tOPTION_MUSL_P (&global_options)\n \n #define GNU_USER_TARGET_OS_CPP_BUILTINS()\t\t\t\\\n     do {\t\t\t\t\t\t\t\\"}, {"sha": "8c9039ac1e5b206a05e2edb9ee31378a8cb96eab", "filename": "gcc/config/rs6000/linux.h", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c31a8be4a5db11a0a0e97c366dded6362421086/gcc%2Fconfig%2Frs6000%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c31a8be4a5db11a0a0e97c366dded6362421086/gcc%2Fconfig%2Frs6000%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux.h?ref=2c31a8be4a5db11a0a0e97c366dded6362421086", "patch": "@@ -27,18 +27,23 @@\n #define NO_PROFILE_COUNTERS 1\n \n #ifdef SINGLE_LIBC\n-#define OPTION_GLIBC  (DEFAULT_LIBC == LIBC_GLIBC)\n-#define OPTION_UCLIBC (DEFAULT_LIBC == LIBC_UCLIBC)\n-#define OPTION_BIONIC (DEFAULT_LIBC == LIBC_BIONIC)\n-#undef OPTION_MUSL\n-#define OPTION_MUSL   (DEFAULT_LIBC == LIBC_MUSL)\n+#define OPTION_GLIBC_P(opts)\t(DEFAULT_LIBC == LIBC_GLIBC)\n+#define OPTION_UCLIBC_P(opts)\t(DEFAULT_LIBC == LIBC_UCLIBC)\n+#define OPTION_BIONIC_P(opts)\t(DEFAULT_LIBC == LIBC_BIONIC)\n+#undef OPTION_MUSL_P\n+#define OPTION_MUSL_P(opts)\t(DEFAULT_LIBC == LIBC_MUSL)\n #else\n-#define OPTION_GLIBC  (linux_libc == LIBC_GLIBC)\n-#define OPTION_UCLIBC (linux_libc == LIBC_UCLIBC)\n-#define OPTION_BIONIC (linux_libc == LIBC_BIONIC)\n-#undef OPTION_MUSL\n-#define OPTION_MUSL   (linux_libc == LIBC_MUSL)\n+#define OPTION_GLIBC_P(opts)\t((opts)->x_linux_libc == LIBC_GLIBC)\n+#define OPTION_UCLIBC_P(opts)\t((opts)->x_linux_libc == LIBC_UCLIBC)\n+#define OPTION_BIONIC_P(opts)\t((opts)->x_linux_libc == LIBC_BIONIC)\n+#undef OPTION_MUSL_P\n+#define OPTION_MUSL_P(opts)\t((opts)->x_linux_libc == LIBC_MUSL)\n #endif\n+#define OPTION_GLIBC\t\tOPTION_GLIBC_P (&global_options)\n+#define OPTION_UCLIBC\t\tOPTION_UCLIBC_P (&global_options)\n+#define OPTION_BIONIC\t\tOPTION_BIONIC_P (&global_options)\n+#undef OPTION_MUSL\n+#define OPTION_MUSL\t\tOPTION_MUSL_P (&global_options)\n \n /* Determine what functions are present at the runtime;\n    this includes full c99 runtime and sincos.  */"}, {"sha": "b2a7afabc73f4b0baad89213f9a9b6204b36cfd3", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c31a8be4a5db11a0a0e97c366dded6362421086/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c31a8be4a5db11a0a0e97c366dded6362421086/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=2c31a8be4a5db11a0a0e97c366dded6362421086", "patch": "@@ -265,18 +265,23 @@ extern int dot_symbols;\n #define OS_MISSING_POWERPC64 !TARGET_64BIT\n \n #ifdef SINGLE_LIBC\n-#define OPTION_GLIBC  (DEFAULT_LIBC == LIBC_GLIBC)\n-#define OPTION_UCLIBC (DEFAULT_LIBC == LIBC_UCLIBC)\n-#define OPTION_BIONIC (DEFAULT_LIBC == LIBC_BIONIC)\n-#undef OPTION_MUSL\n-#define OPTION_MUSL   (DEFAULT_LIBC == LIBC_MUSL)\n+#define OPTION_GLIBC_P(opts)\t(DEFAULT_LIBC == LIBC_GLIBC)\n+#define OPTION_UCLIBC_P(opts)\t(DEFAULT_LIBC == LIBC_UCLIBC)\n+#define OPTION_BIONIC_P(opts)\t(DEFAULT_LIBC == LIBC_BIONIC)\n+#undef OPTION_MUSL_P\n+#define OPTION_MUSL_P(opts)\t(DEFAULT_LIBC == LIBC_MUSL)\n #else\n-#define OPTION_GLIBC  (linux_libc == LIBC_GLIBC)\n-#define OPTION_UCLIBC (linux_libc == LIBC_UCLIBC)\n-#define OPTION_BIONIC (linux_libc == LIBC_BIONIC)\n-#undef OPTION_MUSL\n-#define OPTION_MUSL   (linux_libc == LIBC_MUSL)\n+#define OPTION_GLIBC_P(opts)\t((opts)->x_linux_libc == LIBC_GLIBC)\n+#define OPTION_UCLIBC_P(opts)\t((opts)->x_linux_libc == LIBC_UCLIBC)\n+#define OPTION_BIONIC_P(opts)\t((opts)->x_linux_libc == LIBC_BIONIC)\n+#undef OPTION_MUSL_P\n+#define OPTION_MUSL_P(opts)\t((opts)->x_linux_libc == LIBC_MUSL)\n #endif\n+#define OPTION_GLIBC\t\tOPTION_GLIBC_P (&global_options)\n+#define OPTION_UCLIBC\t\tOPTION_UCLIBC_P (&global_options)\n+#define OPTION_BIONIC\t\tOPTION_BIONIC_P (&global_options)\n+#undef OPTION_MUSL\n+#define OPTION_MUSL\t\tOPTION_MUSL_P (&global_options)\n \n /* Determine what functions are present at the runtime;\n    this includes full c99 runtime and sincos.  */"}]}