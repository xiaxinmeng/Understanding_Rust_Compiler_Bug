{"sha": "c910ceff6a0533e34889ef4aa86d19e42cbff123", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkxMGNlZmY2YTA1MzNlMzQ4ODllZjRhYTg2ZDE5ZTQyY2JmZjEyMw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2009-06-21T14:02:09Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2009-06-21T14:02:09Z"}, "message": "future: New.\n\n2009-06-21  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* include/std/future: New.\n\t* include/Makefile.am: Add.\n\t* include/Makefile.in: Regenerate.\n\t* src/future.cc: New.\n\t* src/Makefile.am: Add.\n\t* src/Makefile.in: Regenerate.\n\t* config/abi/pre/gnu.ver: Add export.\n\t* testsuite/30_threads/headers/future/std_c++0x_neg.cc: New.\n\t* testsuite/30_threads/headers/future/types_std_c++0x.cc: New.\n\t* testsuite/30_threads/packaged_task/cons/1.cc: New.\n\t* testsuite/30_threads/packaged_task/cons/2.cc: New.\n\t* testsuite/30_threads/packaged_task/cons/assign_neg.cc: New.\n\t* testsuite/30_threads/packaged_task/cons/copy_neg.cc: New.\n\t* testsuite/30_threads/packaged_task/cons/move_assign.cc: New.\n\t* testsuite/30_threads/packaged_task/cons/move.cc: New.\n\t* testsuite/30_threads/packaged_task/members/boolconv.cc: New.\n\t* testsuite/30_threads/packaged_task/members/get_future.cc: New.\n\t* testsuite/30_threads/packaged_task/members/get_future2.cc: New.\n\t* testsuite/30_threads/packaged_task/members/invoke.cc: New.\n\t* testsuite/30_threads/packaged_task/members/invoke2.cc: New.\n\t* testsuite/30_threads/packaged_task/members/invoke3.cc: New.\n\t* testsuite/30_threads/packaged_task/members/invoke4.cc: New.\n\t* testsuite/30_threads/packaged_task/members/invoke5.cc: New.\n\t* testsuite/30_threads/packaged_task/members/reset.cc: New.\n\t* testsuite/30_threads/packaged_task/members/reset2.cc: New.\n\t* testsuite/30_threads/packaged_task/members/swap.cc: New.\n\t* testsuite/30_threads/packaged_task/requirements/\n\texplicit_instantiation.cc: New.\n\t* testsuite/30_threads/promise/cons/1.cc: New.\n\t* testsuite/30_threads/promise/cons/assign_neg.cc: New.\n\t* testsuite/30_threads/promise/cons/copy_neg.cc: New.\n\t* testsuite/30_threads/promise/cons/move_assign.cc: New.\n\t* testsuite/30_threads/promise/cons/move.cc: New.\n\t* testsuite/30_threads/promise/members/get_future.cc: New.\n\t* testsuite/30_threads/promise/members/get_future2.cc: New.\n\t* testsuite/30_threads/promise/members/set_exception.cc: New.\n\t* testsuite/30_threads/promise/members/set_exception2.cc: New.\n\t* testsuite/30_threads/promise/members/set_value.cc: New.\n\t* testsuite/30_threads/promise/members/set_value2.cc: New.\n\t* testsuite/30_threads/promise/members/set_value3.cc: New.\n\t* testsuite/30_threads/promise/members/swap.cc: New.\n\t* testsuite/30_threads/promise/requirements/\n\texplicit_instantiation.cc: New.\n\t* testsuite/30_threads/shared_future/cons/assign_neg.cc: New.\n\t* testsuite/30_threads/shared_future/cons/copy.cc: New.\n\t* testsuite/30_threads/shared_future/cons/default_neg.cc: New.\n\t* testsuite/30_threads/shared_future/cons/move.cc: New.\n\t* testsuite/30_threads/shared_future/members/get.cc: New.\n\t* testsuite/30_threads/shared_future/members/get2.cc: New.\n\t* testsuite/30_threads/shared_future/members/has_exception.cc: New.\n\t* testsuite/30_threads/shared_future/members/has_value.cc: New.\n\t* testsuite/30_threads/shared_future/members/is_ready.cc: New.\n\t* testsuite/30_threads/shared_future/members/wait.cc: New.\n\t* testsuite/30_threads/shared_future/members/wait_for.cc: New.\n\t* testsuite/30_threads/shared_future/members/wait_until.cc: New.\n\t* testsuite/30_threads/shared_future/requirements/\n\texplicit_instantiation.cc: New.\n\t* testsuite/30_threads/unique_future/cons/assign_neg.cc: New.\n\t* testsuite/30_threads/unique_future/cons/copy_neg.cc: New.\n\t* testsuite/30_threads/unique_future/cons/default_neg.cc: New.\n\t* testsuite/30_threads/unique_future/cons/move.cc: New.\n\t* testsuite/30_threads/unique_future/members/get.cc: New.\n\t* testsuite/30_threads/unique_future/members/get2.cc: New.\n\t* testsuite/30_threads/unique_future/members/has_exception.cc: New.\n\t* testsuite/30_threads/unique_future/members/has_value.cc: New.\n\t* testsuite/30_threads/unique_future/members/is_ready.cc: New.\n\t* testsuite/30_threads/unique_future/members/wait.cc: New.\n\t* testsuite/30_threads/unique_future/members/wait_for.cc: New.\n\t* testsuite/30_threads/unique_future/members/wait_until.cc: New.\n\t* testsuite/30_threads/unique_future/requirements/\n\texplicit_instantiation.cc: New.\n\t* testsuite/performance/30_threads/future/polling.cc: New.\n\nFrom-SVN: r148765", "tree": {"sha": "8896639da96a35b2386c6cbd32ae840556dcb736", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8896639da96a35b2386c6cbd32ae840556dcb736"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c910ceff6a0533e34889ef4aa86d19e42cbff123", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c910ceff6a0533e34889ef4aa86d19e42cbff123", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c910ceff6a0533e34889ef4aa86d19e42cbff123", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c910ceff6a0533e34889ef4aa86d19e42cbff123/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3b57ab07947fb2cd07b0abebdfca7784875bc1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3b57ab07947fb2cd07b0abebdfca7784875bc1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3b57ab07947fb2cd07b0abebdfca7784875bc1a"}], "stats": {"total": 4458, "additions": 4453, "deletions": 5}, "files": [{"sha": "cefde03746fea84b67d1f97dd8ef96c000b3a5d7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -1,3 +1,78 @@\n+2009-06-21  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/std/future: New.\n+\t* include/Makefile.am: Add.\n+\t* include/Makefile.in: Regenerate.\n+\t* src/future.cc: New.\n+\t* src/Makefile.am: Add.\n+\t* src/Makefile.in: Regenerate.\n+\t* config/abi/pre/gnu.ver: Add export.\n+\t* testsuite/30_threads/headers/future/std_c++0x_neg.cc: New.\n+\t* testsuite/30_threads/headers/future/types_std_c++0x.cc: New.\n+\t* testsuite/30_threads/packaged_task/cons/1.cc: New.\n+\t* testsuite/30_threads/packaged_task/cons/2.cc: New.\n+\t* testsuite/30_threads/packaged_task/cons/assign_neg.cc: New.\n+\t* testsuite/30_threads/packaged_task/cons/copy_neg.cc: New.\n+\t* testsuite/30_threads/packaged_task/cons/move_assign.cc: New.\n+\t* testsuite/30_threads/packaged_task/cons/move.cc: New.\n+\t* testsuite/30_threads/packaged_task/members/boolconv.cc: New.\n+\t* testsuite/30_threads/packaged_task/members/get_future.cc: New.\n+\t* testsuite/30_threads/packaged_task/members/get_future2.cc: New.\n+\t* testsuite/30_threads/packaged_task/members/invoke.cc: New.\n+\t* testsuite/30_threads/packaged_task/members/invoke2.cc: New.\n+\t* testsuite/30_threads/packaged_task/members/invoke3.cc: New.\n+\t* testsuite/30_threads/packaged_task/members/invoke4.cc: New.\n+\t* testsuite/30_threads/packaged_task/members/invoke5.cc: New.\n+\t* testsuite/30_threads/packaged_task/members/reset.cc: New.\n+\t* testsuite/30_threads/packaged_task/members/reset2.cc: New.\n+\t* testsuite/30_threads/packaged_task/members/swap.cc: New.\n+\t* testsuite/30_threads/packaged_task/requirements/\n+\texplicit_instantiation.cc: New.\n+\t* testsuite/30_threads/promise/cons/1.cc: New.\n+\t* testsuite/30_threads/promise/cons/assign_neg.cc: New.\n+\t* testsuite/30_threads/promise/cons/copy_neg.cc: New.\n+\t* testsuite/30_threads/promise/cons/move_assign.cc: New.\n+\t* testsuite/30_threads/promise/cons/move.cc: New.\n+\t* testsuite/30_threads/promise/members/get_future.cc: New.\n+\t* testsuite/30_threads/promise/members/get_future2.cc: New.\n+\t* testsuite/30_threads/promise/members/set_exception.cc: New.\n+\t* testsuite/30_threads/promise/members/set_exception2.cc: New.\n+\t* testsuite/30_threads/promise/members/set_value.cc: New.\n+\t* testsuite/30_threads/promise/members/set_value2.cc: New.\n+\t* testsuite/30_threads/promise/members/set_value3.cc: New.\n+\t* testsuite/30_threads/promise/members/swap.cc: New.\n+\t* testsuite/30_threads/promise/requirements/\n+\texplicit_instantiation.cc: New.\n+\t* testsuite/30_threads/shared_future/cons/assign_neg.cc: New.\n+\t* testsuite/30_threads/shared_future/cons/copy.cc: New.\n+\t* testsuite/30_threads/shared_future/cons/default_neg.cc: New.\n+\t* testsuite/30_threads/shared_future/cons/move.cc: New.\n+\t* testsuite/30_threads/shared_future/members/get.cc: New.\n+\t* testsuite/30_threads/shared_future/members/get2.cc: New.\n+\t* testsuite/30_threads/shared_future/members/has_exception.cc: New.\n+\t* testsuite/30_threads/shared_future/members/has_value.cc: New.\n+\t* testsuite/30_threads/shared_future/members/is_ready.cc: New.\n+\t* testsuite/30_threads/shared_future/members/wait.cc: New.\n+\t* testsuite/30_threads/shared_future/members/wait_for.cc: New.\n+\t* testsuite/30_threads/shared_future/members/wait_until.cc: New.\n+\t* testsuite/30_threads/shared_future/requirements/\n+\texplicit_instantiation.cc: New.\n+\t* testsuite/30_threads/unique_future/cons/assign_neg.cc: New.\n+\t* testsuite/30_threads/unique_future/cons/copy_neg.cc: New.\n+\t* testsuite/30_threads/unique_future/cons/default_neg.cc: New.\n+\t* testsuite/30_threads/unique_future/cons/move.cc: New.\n+\t* testsuite/30_threads/unique_future/members/get.cc: New.\n+\t* testsuite/30_threads/unique_future/members/get2.cc: New.\n+\t* testsuite/30_threads/unique_future/members/has_exception.cc: New.\n+\t* testsuite/30_threads/unique_future/members/has_value.cc: New.\n+\t* testsuite/30_threads/unique_future/members/is_ready.cc: New.\n+\t* testsuite/30_threads/unique_future/members/wait.cc: New.\n+\t* testsuite/30_threads/unique_future/members/wait_for.cc: New.\n+\t* testsuite/30_threads/unique_future/members/wait_until.cc: New.\n+\t* testsuite/30_threads/unique_future/requirements/\n+\texplicit_instantiation.cc: New.\n+\t* testsuite/performance/30_threads/future/polling.cc: New.\n+\n 2009-06-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* Revert last Change."}, {"sha": "3a24dc9fb16249f4fe9caec5ceb1d21dbabdc859", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -964,6 +964,9 @@ GLIBCXX_3.4.12 {\n     _ZSt27__set_once_functor_lock_ptrPSt11unique_lockISt5mutexE;\n     _ZSt16__get_once_mutexv;\n \n+    # future\n+    _ZSt15future_category;\n+\n } GLIBCXX_3.4.11;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "b0fc483f20b57b900f5198c7802f4fcf16d079c4", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -38,6 +38,7 @@ std_headers = \\\n \t${std_srcdir}/forward_list \\\n \t${std_srcdir}/fstream \\\n \t${std_srcdir}/functional \\\n+\t${std_srcdir}/future \\\n \t${std_srcdir}/iomanip \\\n \t${std_srcdir}/ios \\\n \t${std_srcdir}/iosfwd \\"}, {"sha": "bba451f7db62b164d828442d07877b7e652b6e38", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -304,6 +304,7 @@ std_headers = \\\n \t${std_srcdir}/forward_list \\\n \t${std_srcdir}/fstream \\\n \t${std_srcdir}/functional \\\n+\t${std_srcdir}/future \\\n \t${std_srcdir}/iomanip \\\n \t${std_srcdir}/ios \\\n \t${std_srcdir}/iosfwd \\"}, {"sha": "c485b9614a1c6c7e65a36546e18e3fc10598b763", "filename": "libstdc++-v3/include/std/future", "status": "added", "additions": 925, "deletions": 0, "changes": 925, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,925 @@\n+// <future> -*- C++ -*-\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file future\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_FUTURE\n+#define _GLIBCXX_FUTURE 1\n+\n+#pragma GCC system_header\n+\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+# include <c++0x_warning.h>\n+#else\n+\n+#include <functional>\n+#include <memory>\n+#include <mutex>\n+#include <condition_variable>\n+#include <system_error>\n+#include <exception>\n+#include <cstdatomic>\n+\n+#if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1) \\\n+  && defined(_GLIBCXX_ATOMIC_BUILTINS_4)\n+\n+namespace std\n+{\n+  /**\n+   * @defgroup futures Futures\n+   * @ingroup concurrency\n+   *\n+   * Classes for futures support.\n+   * @{\n+   */\n+\n+  /// Error code for futures\n+  enum class future_errc\n+  { broken_promise, future_already_retrieved, promise_already_satisfied };\n+\n+  // TODO: requires concepts\n+  // concept_map ErrorCodeEnum<future_errc> { }\n+  template<>\n+    struct is_error_code_enum<future_errc> : public true_type { };\n+\n+  /// Points to a statically-allocated object derived from error_category.\n+  extern const error_category* const future_category;\n+\n+  // TODO: requires constexpr\n+  inline error_code make_error_code(future_errc __errc)\n+  { return error_code(static_cast<int>(__errc), *future_category); }\n+\n+  // TODO: requires constexpr\n+  inline error_condition make_error_condition(future_errc __errc)\n+  { return error_condition(static_cast<int>(__errc), *future_category); }\n+\n+  /// Exception type thrown by futures.\n+  class future_error : public logic_error\n+  {\n+  public:\n+    explicit future_error(future_errc __ec)\n+    : logic_error(\"std::future_error\"), _M_code(make_error_code(__ec))\n+    { }\n+\n+    const error_code& code() const throw() { return _M_code; }\n+\n+    const char* what() const throw() { return _M_code.message().c_str(); }\n+\n+  private:\n+    error_code _M_code;\n+  };\n+\n+  // Holds the result of a future\n+  struct _Future_result_base\n+  {\n+    _Future_result_base() = default;\n+    _Future_result_base(const _Future_result_base&) = delete;\n+    _Future_result_base& operator=(const _Future_result_base&) = delete;\n+\n+    exception_ptr _M_error;\n+\n+    // _M_destroy() allows derived classes to control deallocation,\n+    // which will be needed when allocator support is added to promise.\n+    // See http://gcc.gnu.org/ml/libstdc++/2009-06/msg00032.html\n+    virtual void _M_destroy() = 0;\n+    struct _Deleter\n+    {\n+      void operator()(_Future_result_base* __fr) const { __fr->_M_destroy(); }\n+    };\n+\n+  protected:\n+    ~_Future_result_base() = default;\n+  };\n+\n+  // TODO: use template alias when available\n+  /*\n+   template<typename _Res>\n+     using _Future_ptr = unique_ptr<_Res, _Future_result_base::_Deleter>;\n+   */\n+  template<typename _Res>\n+    struct _Future_ptr\n+    {\n+      typedef unique_ptr<_Res, _Future_result_base::_Deleter> type;\n+    };\n+\n+  // State shared between a promise and one or more associated futures.\n+  class _Future_state\n+  {\n+    typedef _Future_ptr<_Future_result_base>::type _Future_ptr_type;\n+\n+  public:\n+    _Future_state() : _M_result(), _M_retrieved(false) { }\n+\n+    _Future_state(const _Future_state&) = delete;\n+    _Future_state& operator=(const _Future_state&) = delete;\n+\n+    bool\n+    is_ready()\n+    { return _M_get() != 0; }\n+\n+    bool\n+    has_exception()\n+    {\n+      _Future_result_base* const __res = _M_get();\n+      return __res && !(__res->_M_error == 0);\n+    }\n+\n+    bool\n+    has_value()\n+    {\n+      _Future_result_base* const __res = _M_get();\n+      return __res && (__res->_M_error == 0);\n+    }\n+\n+    _Future_result_base&\n+    wait()\n+    {\n+      unique_lock<mutex> __lock(_M_mutex);\n+      if (!_M_ready())\n+        _M_cond.wait(__lock, std::bind(&_Future_state::_M_ready, this));\n+      return *_M_result;\n+    }\n+\n+    template<typename _Rep, typename _Period>\n+      bool\n+      wait_for(const chrono::duration<_Rep, _Period>& __rel)\n+      {\n+        unique_lock<mutex> __lock(_M_mutex);\n+        return _M_ready() || _M_cond.wait_for(__lock, __rel,\n+            std::bind(&_Future_state::_M_ready, this));\n+      }\n+\n+    template<typename _Clock, typename _Duration>\n+      bool\n+      wait_until(const chrono::time_point<_Clock, _Duration>& __abs)\n+      {\n+        unique_lock<mutex> __lock(_M_mutex);\n+        return _M_ready() || _M_cond.wait_until(__lock, __abs,\n+            std::bind(&_Future_state::_M_ready, this));\n+      }\n+\n+    void\n+    _M_set_result(_Future_ptr_type __res)\n+    {\n+      {\n+        lock_guard<mutex> __lock(_M_mutex);\n+        if (_M_ready())\n+          throw future_error(future_errc::promise_already_satisfied);\n+        _M_result.swap(__res);\n+      }\n+      _M_cond.notify_all();\n+    }\n+\n+    void\n+    _M_break_promise(_Future_ptr_type __res)\n+    {\n+      if (static_cast<bool>(__res))\n+      {\n+        __res->_M_error\n+          = std::copy_exception(future_error(future_errc::broken_promise));\n+        {\n+          lock_guard<mutex> __lock(_M_mutex);\n+          _M_result.swap(__res);\n+        }\n+        _M_cond.notify_all();\n+      }\n+    }\n+\n+    // called when this object is passed to a unique_future\n+    void\n+    _M_set_retrieved_flag()\n+    {\n+      if (_M_retrieved.test_and_set())\n+        throw future_error(future_errc::future_already_retrieved);\n+    }\n+\n+  private:\n+    _Future_result_base*\n+    _M_get()\n+    {\n+      lock_guard<mutex> __lock(_M_mutex);\n+      return _M_result.get();\n+    }\n+\n+    bool _M_ready() const { return static_cast<bool>(_M_result); }\n+\n+    _Future_ptr_type    _M_result;\n+    mutex               _M_mutex;\n+    condition_variable  _M_cond;\n+    atomic_flag         _M_retrieved;\n+  };\n+\n+  // workaround for CWG issue 664 and c++/34022\n+  template<typename _Result, bool = is_scalar<_Result>::value>\n+    struct _Move_future_result\n+    {\n+      typedef _Result&& __rval_type;\n+      static _Result&& _S_move(_Result& __res) { return std::move(__res); }\n+    };\n+\n+  // specialization for scalar types returns rvalue not rvalue-reference\n+  template<typename _Result>\n+    struct _Move_future_result<_Result, true>\n+    {\n+      typedef _Result __rval_type;\n+      static _Result _S_move(_Result __res) { return __res; }\n+    };\n+\n+  template<typename _Result>\n+    struct _Future_result : _Future_result_base\n+    {\n+      _Future_result() : _M_initialized() { }\n+\n+      ~_Future_result()\n+      {\n+        if (_M_initialized)\n+          _M_value().~_Result();\n+      }\n+\n+      // return lvalue, future will add const or rvalue-reference\n+      _Result& _M_value()\n+      { return *static_cast<_Result*>(_M_addr()); }\n+\n+      void\n+      _M_set(const _Result& __res)\n+      {\n+        ::new (_M_addr()) _Result(__res);\n+        _M_initialized = true;\n+      }\n+\n+      void\n+      _M_set(_Result&& __res)\n+      {\n+        typedef _Move_future_result<_Result> _Mover;\n+        ::new (_M_addr()) _Result(_Mover::_S_move(__res));\n+        _M_initialized = true;\n+      }\n+\n+    private:\n+      void _M_destroy() { delete this; }\n+\n+      void* _M_addr() { return static_cast<void*>(&_M_storage); }\n+\n+      typename aligned_storage<sizeof(_Result),\n+               alignment_of<_Result>::value>::type _M_storage;\n+      bool _M_initialized;\n+    };\n+\n+  template<typename _Result>\n+    struct _Future_result<_Result&> : _Future_result_base\n+    {\n+      _Future_result() : _M_value_ptr() { }\n+\n+      _Result* _M_value_ptr;\n+\n+      void _M_destroy() { delete this; }\n+    };\n+\n+  template<>\n+    struct _Future_result<void> : _Future_result_base\n+    {\n+      void _M_destroy() { delete this; }\n+    };\n+\n+  /// unique_future\n+  template<typename _Result>\n+    class unique_future;\n+\n+  /// shared_future\n+  template<typename _Result>\n+    class shared_future;\n+\n+  // common implementation for unique_future and shared_future\n+  template<typename _Result>\n+    class _Future_impl\n+    {\n+    public:\n+      // disable copying\n+      _Future_impl(const _Future_impl&) = delete;\n+      _Future_impl& operator=(const _Future_impl&) = delete;\n+\n+      // functions to check state and wait for ready\n+      bool is_ready() const { return this->_M_state->is_ready(); }\n+\n+      bool has_exception() const { return this->_M_state->has_exception(); }\n+\n+      bool has_value() const { return this->_M_state->has_value(); }\n+\n+      void wait() const { this->_M_state->wait(); }\n+\n+      template<typename _Rep, typename _Period>\n+        bool\n+        wait_for(const chrono::duration<_Rep, _Period>& __rel) const\n+        { return this->_M_state->wait_for(__rel); }\n+\n+      template<typename _Clock, typename _Duration>\n+        bool\n+        wait_until(const chrono::time_point<_Clock, _Duration>& __abs) const\n+        { return this->_M_state->wait_until(__abs); }\n+\n+    protected:\n+      // wait for the state to be ready and rethrow any stored exception\n+      _Future_result<_Result>&\n+      _M_get_result()\n+      {\n+        _Future_result_base& __res = this->_M_state->wait();\n+        if (!(__res._M_error == 0))\n+          rethrow_exception(__res._M_error);\n+        return static_cast<_Future_result<_Result>&>(__res);\n+      }\n+\n+      typedef shared_ptr<_Future_state> _State_ptr;\n+\n+      // construction of a unique_future by promise::get_future()\n+      explicit\n+      _Future_impl(const _State_ptr& __state)\n+      : _M_state(__state)\n+      {\n+        if (static_cast<bool>(this->_M_state))\n+          this->_M_state->_M_set_retrieved_flag();\n+        else\n+          throw future_error(future_errc::future_already_retrieved);\n+      }\n+\n+      // copy construction from a shared_future\n+      explicit\n+      _Future_impl(const shared_future<_Result>&);\n+\n+      // move construction from a unique_future\n+      explicit\n+      _Future_impl(unique_future<_Result>&&);\n+\n+      _State_ptr _M_state;\n+    };\n+\n+  /// promise\n+  template<typename _Result>\n+    class promise;\n+\n+  // primary template for unique_future\n+  template<typename _Result>\n+    class unique_future : public _Future_impl<_Result>\n+    {\n+      typedef _Move_future_result<_Result> _Mover;\n+\n+    public:\n+      /// Move constructor\n+      unique_future(unique_future&& __uf) : _Base_type(std::move(__uf)) { }\n+\n+      // disable copying\n+      unique_future(const unique_future&) = delete;\n+      unique_future& operator=(const unique_future&) = delete;\n+\n+      // retrieving the value\n+      typename _Mover::__rval_type\n+      get()\n+      { return _Mover::_S_move(this->_M_get_result()._M_value()); }\n+\n+    private:\n+      typedef _Future_impl<_Result> _Base_type;\n+      typedef typename _Base_type::_State_ptr _State_ptr;\n+\n+      friend class promise<_Result>;\n+\n+      explicit\n+      unique_future(const _State_ptr& __state) : _Base_type(__state) { }\n+    };\n+ \n+  // partial specialization for unique_future<R&>\n+  template<typename _Result>\n+    class unique_future<_Result&> : public _Future_impl<_Result&>\n+    {\n+    public:\n+      /// Move constructor\n+      unique_future(unique_future&& __uf) : _Base_type(std::move(__uf)) { }\n+\n+      // disable copying\n+      unique_future(const unique_future&) = delete;\n+      unique_future& operator=(const unique_future&) = delete;\n+\n+      // retrieving the value\n+      _Result& get() { return *this->_M_get_result()._M_value_ptr; }\n+\n+    private:\n+      typedef _Future_impl<_Result&>           _Base_type;\n+      typedef typename _Base_type::_State_ptr _State_ptr;\n+\n+      friend class promise<_Result&>;\n+\n+      explicit\n+      unique_future(const _State_ptr& __state) : _Base_type(__state) { }\n+    };\n+\n+  // specialization for unique_future<void>\n+  template<>\n+    class unique_future<void> : public _Future_impl<void>\n+    {\n+    public:\n+      /// Move constructor\n+      unique_future(unique_future&& __uf) : _Base_type(std::move(__uf)) { }\n+\n+      // disable copying\n+      unique_future(const unique_future&) = delete;\n+      unique_future& operator=(const unique_future&) = delete;\n+\n+      // retrieving the value\n+      void get() { this->_M_get_result(); }\n+\n+    private:\n+      typedef _Future_impl<void> _Base_type;\n+      typedef _Base_type::_State_ptr _State_ptr;\n+\n+      friend class promise<void>;\n+\n+      explicit\n+      unique_future(const _State_ptr& __state) : _Base_type(__state) { }\n+    };\n+\n+  // primary template for unique_future\n+  template<typename _Result>\n+    class shared_future : public _Future_impl<_Result>\n+    {\n+    public:\n+      /// Copy constructor\n+      shared_future(const shared_future& __sf) : _Base_type(__sf) { }\n+\n+      /// Construct from a unique_future rvalue\n+      shared_future(unique_future<_Result>&& __uf)\n+      : _Base_type(std::move(__uf))\n+      { }\n+\n+      shared_future& operator=(const shared_future&) = delete;\n+\n+      // retrieving the value\n+      const _Result&\n+      get()\n+      { return this->_M_get_result()._M_value(); }\n+\n+    private:\n+      typedef _Future_impl<_Result> _Base_type;\n+    };\n+ \n+  // partial specialization for shared_future<R&>\n+  template<typename _Result>\n+    class shared_future<_Result&> : public _Future_impl<_Result&>\n+    {\n+    public:\n+      /// Copy constructor\n+      shared_future(const shared_future& __sf) : _Base_type(__sf) { }\n+\n+      /// Construct from a unique_future rvalue\n+      shared_future(unique_future<_Result&>&& __uf)\n+      : _Base_type(std::move(__uf))\n+      { }\n+\n+      shared_future& operator=(const shared_future&) = delete;\n+\n+      // retrieving the value\n+      _Result& get() { return *this->_M_get_result()._M_value_ptr; }\n+\n+    private:\n+      typedef _Future_impl<_Result&>           _Base_type;\n+    };\n+\n+  // specialization for shared_future<void>\n+  template<>\n+    class shared_future<void> : public _Future_impl<void>\n+    {\n+    public:\n+      /// Copy constructor\n+      shared_future(const shared_future& __sf) : _Base_type(__sf) { }\n+\n+      /// Construct from a unique_future rvalue\n+      shared_future(unique_future<void>&& __uf)\n+      : _Base_type(std::move(__uf))\n+      { }\n+\n+      shared_future& operator=(const shared_future&) = delete;\n+\n+      // retrieving the value\n+      void get() { this->_M_get_result(); }\n+\n+    private:\n+      typedef _Future_impl<void> _Base_type;\n+    };\n+\n+  // now we can define the protected _Future_impl constructors\n+\n+  template<typename _Result>\n+    _Future_impl<_Result>::_Future_impl(const shared_future<_Result>& __sf)\n+    : _M_state(__sf._M_state)\n+    { }\n+\n+  template<typename _Result>\n+    _Future_impl<_Result>::_Future_impl(unique_future<_Result>&& __uf)\n+    : _M_state(std::move(__uf._M_state))\n+    { }\n+\n+  template<typename> class packaged_task; // undefined\n+\n+  // primary template for promise\n+  template<typename _Result>\n+    class promise\n+    {\n+    public:\n+      promise()\n+      : _M_future(std::make_shared<_Future_state>()),\n+      _M_storage(new _Future_result<_Result>())\n+      { }\n+\n+      promise(promise&& __rhs)\n+      : _M_future(std::move(__rhs._M_future)),\n+      _M_storage(std::move(__rhs._M_storage))\n+      { }\n+\n+      // TODO: requires allocator concepts\n+      /*\n+      template<typename _Allocator>\n+        promise(allocator_arg_t, const _Allocator& __a);\n+\n+      template<typename _Allocator>\n+        promise(allocator_arg_t, const _Allocator&, promise&& __rhs);\n+       */\n+\n+      promise(const promise&) = delete;\n+\n+      ~promise()\n+      {\n+        if (static_cast<bool>(_M_future) && !_M_future.unique())\n+          _M_future->_M_break_promise(std::move(_M_storage));\n+      }\n+\n+      // assignment\n+      promise&\n+      operator=(promise&& __rhs)\n+      {\n+        promise(std::move(__rhs)).swap(*this);\n+        return *this;\n+      }\n+\n+      promise& operator=(const promise&) = delete;\n+\n+      void\n+      swap(promise& __rhs)\n+      {\n+        _M_future.swap(__rhs._M_future);\n+        _M_storage.swap(__rhs._M_storage);\n+      }\n+\n+      // retrieving the result\n+      unique_future<_Result>\n+      get_future()\n+      { return unique_future<_Result>(_M_future); }\n+\n+      // setting the result\n+      void\n+      set_value(const _Result& __r)\n+      {\n+        if (!_M_satisfied())\n+          _M_storage->_M_set(__r);\n+        _M_future->_M_set_result(std::move(_M_storage));\n+      }\n+\n+      void\n+      set_value(_Result&& __r)\n+      {\n+        if (!_M_satisfied())\n+          _M_storage->_M_set(_Mover::_S_move(__r));\n+        _M_future->_M_set_result(std::move(_M_storage));\n+      }\n+\n+      void\n+      set_exception(exception_ptr __p)\n+      {\n+        if (!_M_satisfied())\n+          _M_storage->_M_error = __p;\n+        _M_future->_M_set_result(std::move(_M_storage));\n+      }\n+\n+    private:\n+      template<typename> friend class packaged_task;\n+      typedef _Move_future_result<_Result> _Mover;\n+      bool _M_satisfied() { return !static_cast<bool>(_M_storage); }\n+      shared_ptr<_Future_state>                           _M_future;\n+      typename _Future_ptr<_Future_result<_Result>>::type _M_storage;\n+    };\n+\n+  // partial specialization for promise<R&>\n+  template<typename _Result>\n+    class promise<_Result&>\n+    {\n+    public:\n+      promise()\n+      : _M_future(std::make_shared<_Future_state>()),\n+      _M_storage(new _Future_result<_Result&>())\n+      { }\n+\n+      promise(promise&& __rhs)\n+      : _M_future(std::move(__rhs._M_future)),\n+      _M_storage(std::move(__rhs._M_storage))\n+      { }\n+\n+      // TODO: requires allocator concepts\n+      /*\n+      template<typename _Allocator>\n+        promise(allocator_arg_t, const _Allocator& __a);\n+\n+      template<typename _Allocator>\n+        promise(allocator_arg_t, const _Allocator&, promise&& __rhs);\n+       */\n+\n+      promise(const promise&) = delete;\n+\n+      ~promise()\n+      {\n+        if (static_cast<bool>(_M_future) && !_M_future.unique())\n+          _M_future->_M_break_promise(std::move(_M_storage));\n+      }\n+\n+      // assignment\n+      promise&\n+      operator=(promise&& __rhs)\n+      {\n+        promise(std::move(__rhs)).swap(*this);\n+        return *this;\n+      }\n+\n+      promise& operator=(const promise&) = delete;\n+\n+      void\n+      swap(promise& __rhs)\n+      {\n+        _M_future.swap(__rhs._M_future);\n+        _M_storage.swap(__rhs._M_storage);\n+      }\n+\n+      // retrieving the result\n+      unique_future<_Result&>\n+      get_future()\n+      { return unique_future<_Result&>(_M_future); }\n+\n+      // setting the result\n+      void\n+      set_value(_Result& __r)\n+      {\n+        if (!_M_satisfied())\n+          _M_storage->_M_value_ptr = &__r;\n+        _M_future->_M_set_result(std::move(_M_storage));\n+      }\n+\n+      void\n+      set_exception(exception_ptr __p)\n+      {\n+        if (!_M_satisfied())\n+          _M_storage->_M_error = __p;\n+        _M_future->_M_set_result(std::move(_M_storage));\n+      }\n+\n+    private:\n+      template<typename> friend class packaged_task;\n+      bool _M_satisfied() { return !static_cast<bool>(_M_storage); }\n+      shared_ptr<_Future_state>                             _M_future;\n+      typename _Future_ptr<_Future_result<_Result&>>::type  _M_storage;\n+    };\n+\n+  // specialization for promise<void>\n+  template<>\n+    class promise<void>\n+    {\n+    public:\n+      promise()\n+      : _M_future(std::make_shared<_Future_state>()),\n+      _M_storage(new _Future_result<void>())\n+      { }\n+\n+      promise(promise&& __rhs)\n+      : _M_future(std::move(__rhs._M_future)),\n+      _M_storage(std::move(__rhs._M_storage))\n+      { }\n+\n+      // TODO: requires allocator concepts\n+      /*\n+      template<typename _Allocator>\n+        promise(allocator_arg_t, const _Allocator& __a);\n+\n+      template<typename _Allocator>\n+        promise(allocator_arg_t, const _Allocator&, promise&& __rhs);\n+       */\n+\n+      promise(const promise&) = delete;\n+\n+      ~promise()\n+      {\n+        if (static_cast<bool>(_M_future) && !_M_future.unique())\n+          _M_future->_M_break_promise(std::move(_M_storage));\n+      }\n+\n+      // assignment\n+      promise&\n+      operator=(promise&& __rhs)\n+      {\n+        promise(std::move(__rhs)).swap(*this);\n+        return *this;\n+      }\n+\n+      promise& operator=(const promise&) = delete;\n+\n+      void\n+      swap(promise& __rhs)\n+      {\n+        _M_future.swap(__rhs._M_future);\n+        _M_storage.swap(__rhs._M_storage);\n+      }\n+\n+      // retrieving the result\n+      unique_future<void>\n+      get_future()\n+      { return unique_future<void>(_M_future); }\n+\n+      // setting the result\n+      void\n+      set_value()\n+      {\n+        _M_future->_M_set_result(std::move(_M_storage));\n+      }\n+\n+      void\n+      set_exception(exception_ptr __p)\n+      {\n+        if (!_M_satisfied())\n+          _M_storage->_M_error = __p;\n+        _M_future->_M_set_result(std::move(_M_storage));\n+      }\n+\n+    private:\n+      template<typename> friend class packaged_task;\n+      bool _M_satisfied() { return !static_cast<bool>(_M_storage); }\n+      shared_ptr<_Future_state>                 _M_future;\n+      _Future_ptr<_Future_result<void>>::type   _M_storage;\n+    };\n+\n+  // TODO: requires allocator concepts\n+  /*\n+  template<typename _Result, class Alloc>\n+    concept_map UsesAllocator<promise<_Result>, Alloc>\n+    {\n+      typedef Alloc allocator_type;\n+    }\n+   */\n+\n+  template<typename _Result, typename... _ArgTypes>\n+    struct _Run_task\n+    {\n+      static void\n+      _S_run(promise<_Result>& __p, function<_Result(_ArgTypes...)>& __f,\n+          _ArgTypes... __args)\n+      {\n+        __p.set_value(__f(std::forward<_ArgTypes>(__args)...));\n+      }\n+    };\n+\n+  // specialization used by packaged_task<void(...)>\n+  template<typename... _ArgTypes>\n+    struct _Run_task<void, _ArgTypes...>\n+    {\n+      static void\n+      _S_run(promise<void>& __p, function<void(_ArgTypes...)>& __f,\n+          _ArgTypes... __args)\n+      {\n+        __f(std::forward<_ArgTypes>(__args)...);\n+        __p.set_value();\n+      }\n+    };\n+\n+  template<typename _Result, typename... _ArgTypes>\n+    class packaged_task<_Result(_ArgTypes...)>\n+    {\n+    public:\n+      typedef _Result result_type;\n+\n+      // construction and destruction\n+      packaged_task() { }\n+\n+      template<typename _Fn>\n+        explicit\n+        packaged_task(const _Fn& __fn) : _M_task(__fn) { }\n+\n+      template<typename _Fn>\n+        explicit\n+        packaged_task(_Fn&& __fn) : _M_task(std::move(__fn)) { }\n+\n+      explicit\n+      packaged_task(_Result(*__fn)(_ArgTypes...)) : _M_task(__fn) { }\n+\n+      // TODO: requires allocator concepts\n+      /*\n+      template<typename _Fn, typename _Allocator>\n+        explicit\n+        packaged_task(allocator_arg_t __tag, const _Allocator& __a, _Fn __fn)\n+        : _M_task(__tag, __a, __fn), _M_promise(__tag, __a)\n+        { }\n+\n+      template<typename _Fn, typename _Allocator>\n+        explicit\n+        packaged_task(allocator_arg_t __tag, const _Allocator& __a, _Fn&& __fn)\n+        : _M_task(__tag, __a, std::move(__fn)), _M_promise(__tag, __a)\n+        { }\n+       */\n+\n+      ~packaged_task() = default;\n+\n+      // no copy\n+      packaged_task(packaged_task&) = delete;\n+      packaged_task& operator=(packaged_task&) = delete;\n+\n+      // move support\n+      packaged_task(packaged_task&& __other)\n+      { this->swap(__other); }\n+\n+      packaged_task& operator=(packaged_task&& __other)\n+      {\n+        packaged_task(std::move(__other)).swap(*this);\n+        return *this;\n+      }\n+\n+      void\n+      swap(packaged_task& __other)\n+      {\n+        _M_task.swap(__other._M_task);\n+        _M_promise.swap(__other._M_promise);\n+      }\n+\n+      explicit operator bool() const { return static_cast<bool>(_M_task); }\n+\n+      // result retrieval\n+      unique_future<_Result>\n+      get_future()\n+      {\n+        try\n+        {\n+          return _M_promise.get_future();\n+        }\n+        catch (const future_error& __e)\n+        {\n+          if (__e.code() == future_errc::future_already_retrieved)\n+            throw std::bad_function_call();\n+          throw;\n+        }\n+      }\n+\n+      // execution\n+      void\n+      operator()(_ArgTypes... __args)\n+      {\n+        if (!static_cast<bool>(_M_task) || _M_promise._M_satisfied())\n+          throw std::bad_function_call();\n+        try\n+        {\n+          _Run_task<_Result, _ArgTypes...>::_S_run(_M_promise, _M_task,\n+              std::forward<_ArgTypes>(__args)...);\n+        }\n+        catch (...)\n+        {\n+          _M_promise.set_exception(current_exception());\n+        }\n+      }\n+\n+      void reset() { promise<_Result>().swap(_M_promise); }\n+\n+    private:\n+      function<_Result(_ArgTypes...)>   _M_task;\n+      promise<_Result>                  _M_promise;\n+    };\n+\n+  // @} group futures\n+}\n+\n+#endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1\n+       // && _GLIBCXX_ATOMIC_BUILTINS_4\n+\n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n+#endif // _GLIBCXX_FUTURE"}, {"sha": "4295d4dda663266fcc7142b2491c9e9641dd0304", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -189,6 +189,7 @@ sources = \\\n \tcondition_variable.cc \\\n \tchrono.cc \\\n \tthread.cc \\\n+\tfuture.cc \\\n \t${host_sources} \\\n \t${host_sources_extra} \n \n@@ -297,6 +298,11 @@ thread.lo: thread.cc\n thread.o: thread.cc\n \t$(CXXCOMPILE) -std=gnu++0x -c $<\n \n+future.lo: future.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+future.o: future.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n if GLIBCXX_LDBL_COMPAT\n # Use special rules for compatibility-ldbl.cc compilation, as we need to\n # pass -mlong-double-64."}, {"sha": "9134f0472d2a630a7b9105d025c05e53e22ec353", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -87,10 +87,11 @@ am__libstdc___la_SOURCES_DIST = atomic.cc bitmap_allocator.cc \\\n \tostream-inst.cc sstream-inst.cc streambuf-inst.cc streambuf.cc \\\n \tstring-inst.cc valarray-inst.cc wlocale-inst.cc \\\n \twstring-inst.cc mutex.cc condition_variable.cc chrono.cc \\\n-\tthread.cc atomicity.cc codecvt_members.cc collate_members.cc \\\n-\tctype_members.cc messages_members.cc monetary_members.cc \\\n-\tnumeric_members.cc time_members.cc basic_file.cc c++locale.cc \\\n-\tcompatibility-ldbl.cc parallel_list.cc parallel_settings.cc\n+\tthread.cc future.cc atomicity.cc codecvt_members.cc \\\n+\tcollate_members.cc ctype_members.cc messages_members.cc \\\n+\tmonetary_members.cc numeric_members.cc time_members.cc \\\n+\tbasic_file.cc c++locale.cc compatibility-ldbl.cc \\\n+\tparallel_list.cc parallel_settings.cc\n am__objects_1 = atomicity.lo codecvt_members.lo collate_members.lo \\\n \tctype_members.lo messages_members.lo monetary_members.lo \\\n \tnumeric_members.lo time_members.lo\n@@ -113,7 +114,7 @@ am__objects_5 = atomic.lo bitmap_allocator.lo pool_allocator.lo \\\n \tostream-inst.lo sstream-inst.lo streambuf-inst.lo streambuf.lo \\\n \tstring-inst.lo valarray-inst.lo wlocale-inst.lo \\\n \twstring-inst.lo mutex.lo condition_variable.lo chrono.lo \\\n-\tthread.lo $(am__objects_1) $(am__objects_4)\n+\tthread.lo future.lo $(am__objects_1) $(am__objects_4)\n am_libstdc___la_OBJECTS = $(am__objects_5)\n libstdc___la_OBJECTS = $(am_libstdc___la_OBJECTS)\n DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)\n@@ -441,6 +442,7 @@ sources = \\\n \tcondition_variable.cc \\\n \tchrono.cc \\\n \tthread.cc \\\n+\tfuture.cc \\\n \t${host_sources} \\\n \t${host_sources_extra} \n \n@@ -908,6 +910,11 @@ thread.lo: thread.cc\n thread.o: thread.cc\n \t$(CXXCOMPILE) -std=gnu++0x -c $<\n \n+future.lo: future.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+future.o: future.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n # Use special rules for compatibility-ldbl.cc compilation, as we need to\n # pass -mlong-double-64.\n @GLIBCXX_LDBL_COMPAT_TRUE@compatibility-ldbl.lo: compatibility-ldbl.cc"}, {"sha": "ab9d5dbcc69434e052270e158df9be1c1b8f36c1", "filename": "libstdc++-v3/src/future.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Fsrc%2Ffuture.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Fsrc%2Ffuture.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffuture.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,73 @@\n+// future -*- C++ -*-\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <future>\n+\n+#if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1) \\\n+  && defined(_GLIBCXX_ATOMIC_BUILTINS_4)\n+namespace\n+{\n+  struct future_error_category : public std::error_category\n+  {\n+    virtual const char*\n+    name() const \n+    { return \"future\"; }\n+\n+    virtual std::string message(int __ec) const\n+    {\n+      std::string __msg;\n+      switch (std::future_errc(__ec))\n+      {\n+      case std::future_errc::broken_promise:\n+          __msg = \"Broken promise\";\n+          break;\n+      case std::future_errc::future_already_retrieved:\n+          __msg = \"Future already retrieved\";\n+          break;\n+      case std::future_errc::promise_already_satisfied:\n+          __msg = \"Promise already satisfied\";\n+          break;\n+      default:\n+          __msg = \"Unknown error\";\n+          break;\n+      }\n+      return __msg;\n+    }\n+  };\n+\n+  const future_error_category&\n+  __future_category_instance()\n+  {\n+    static const future_error_category __fec;\n+    return __fec;\n+  }\n+}\n+\n+namespace std\n+{\n+  const error_category* const future_category = &__future_category_instance();\n+}\n+\n+#endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1\n+       // && _GLIBCXX_ATOMIC_BUILTINS_4"}, {"sha": "5f021b8e5ac22e21a9261e5666bffe0bc793b876", "filename": "libstdc++-v3/testsuite/30_threads/headers/future/std_c++0x_neg.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Ffuture%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Ffuture%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Ffuture%2Fstd_c%2B%2B0x_neg.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++98\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <future>  // { dg-excess-errors \"In file included from\" }\n+\n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 31 } \n+\n+\n+"}, {"sha": "16a54b4147a7aaa7b34f9c1e391ac386315d6c3d", "filename": "libstdc++-v3/testsuite/30_threads/headers/future/types_std_c++0x.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Ffuture%2Ftypes_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Ffuture%2Ftypes_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Ffuture%2Ftypes_std_c%2B%2B0x.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,49 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" } \n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <future>\n+\n+void test01()\n+{\n+  typedef std::future_errc errc_t;\n+\n+  using std::future_category;\n+\n+  typedef std::future_error error_t;\n+\n+  typedef std::unique_future<int> uniq_t;\n+  typedef std::unique_future<int&> uniqr_t;\n+  typedef std::unique_future<void> uniqv_t;\n+\n+  typedef std::shared_future<int> shar_t;\n+  typedef std::shared_future<int&> sharr_t;\n+  typedef std::shared_future<void> sharv_t;\n+\n+  typedef std::promise<int> promise_t;\n+  typedef std::promise<int&> promiser_t;\n+  typedef std::promise<void> promisev_t;\n+\n+  typedef std::packaged_task<int> ptask_t;\n+  typedef std::packaged_task<int&> ptaskr_t;\n+  typedef std::packaged_task<void> ptaskv_t;\n+}"}, {"sha": "a2414333e220bc51e48f518ebf3bc6d48126ba0c", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/cons/1.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2F1.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,53 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::packaged_task;\n+  using namespace __gnu_test;\n+\n+  packaged_task<int ()> p1;\n+  VERIFY( !static_cast<bool>(p1) );\n+  packaged_task<int& ()> p2;\n+  VERIFY( !static_cast<bool>(p2) );\n+  packaged_task<void ()> p3;\n+  VERIFY( !static_cast<bool>(p3) );\n+  packaged_task<ClassType ()> p4;\n+  VERIFY( !static_cast<bool>(p4) );\n+  packaged_task<AbstractClass& (int)> p5;\n+  VERIFY( !static_cast<bool>(p5) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "98f5de73c4db78dff1f4c2235f340adf979ccf17", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/cons/2.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2F2.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,64 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+using namespace __gnu_test;\n+\n+int f1() { return 0; }\n+int& f2() { static int i; return i; }\n+void f3() { }\n+ClassType f4() { return ClassType(); }\n+\n+struct Derived : AbstractClass {\n+  void rotate(int) { }\n+  Derived& operator()(int i) { rotate(i); return *this; }\n+} f5;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::packaged_task;\n+\n+  packaged_task<int ()> p1(f1);\n+  VERIFY( static_cast<bool>(p1) );\n+  packaged_task<int& ()> p2(f2);\n+  VERIFY( static_cast<bool>(p2) );\n+  packaged_task<void ()> p3(f3);\n+  VERIFY( static_cast<bool>(p3) );\n+  packaged_task<ClassType ()> p4(f4);\n+  VERIFY( static_cast<bool>(p4) );\n+  packaged_task<AbstractClass& (int)> p5(f5);\n+  VERIFY( static_cast<bool>(p5) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5f02dea015637d799d218f0eb00bbff7a48f31ec", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/cons/assign_neg.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fassign_neg.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,36 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+\n+void test01()\n+{\n+  // assign\n+  std::packaged_task<int()> p1;\n+  std::packaged_task<int()> p2;\n+  p1 = p2;\n+}\n+\n+// { dg-error \"used here\" \"\" { target *-*-* } 32 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 856 }"}, {"sha": "6a50d7802aa0a8b10ee26fcfd1b3dd0dabda8715", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/cons/copy_neg.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fcopy_neg.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+\n+void test01()\n+{\n+  // copy\n+  std::packaged_task<int()> p1;\n+  std::packaged_task<int()> p2(p1);\n+}\n+\n+// { dg-error \"used here\" \"\" { target *-*-* } 31 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 855 }"}, {"sha": "5335db39949415a1378ddce25d2a28d77aaa5169", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/cons/move.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fmove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fmove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fmove.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,49 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+int f1() { return 0; }\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  // move\n+  packaged_task<int()> p1(f1);\n+  packaged_task<int()> p2(std::move(p1));\n+  VERIFY( !static_cast<bool>(p1) );\n+  VERIFY( static_cast<bool>(p2) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "c23e5e3b72b9d7e2afa3e21226d27e16749c4710", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/cons/move_assign.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fmove_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fmove_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fcons%2Fmove_assign.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,49 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+int gen() { return 0; }\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  // move assign\n+  std::packaged_task<int()> p1;\n+  std::packaged_task<int()> p2(gen);\n+  p1 = std::move(p2);\n+  VERIFY( static_cast<bool>(p1) );\n+  VERIFY( !static_cast<bool>(p2) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+"}, {"sha": "c332b85741df2cfb4ddf5b28b48f0b6b9e17daec", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/members/boolconv.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Fboolconv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Fboolconv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Fboolconv.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,47 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+int zero() { return 0; }\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::packaged_task<int()> p1;\n+  VERIFY( !static_cast<bool>(p1) );\n+\n+  std::packaged_task<int()> p2(zero);\n+  VERIFY( static_cast<bool>(p2) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c1bc129e26fb9bf36d0f50b85e7f08c5d287ea91", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/members/get_future.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Fget_future.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Fget_future.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Fget_future.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,55 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+int& inc(int& i) { return ++i; }\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::packaged_task<int&(int&)> p1(inc);\n+  std::unique_future<int&> f1 = p1.get_future();\n+\n+  VERIFY( !f1.is_ready() );\n+\n+  int i1 = 0;\n+\n+  p1(i1);\n+\n+  int& i2 = f1.get();\n+\n+  VERIFY( &i1 == &i2 );\n+  VERIFY( i1 == 1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a6c9c61e5c837bd5a58b696ab8c299ecb282299e", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/members/get_future2.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Fget_future2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Fget_future2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Fget_future2.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,57 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int& inc(int& i) { return ++i; }\n+\n+void test01()\n+{\n+  bool test = false;\n+\n+  std::packaged_task<int&(int&)> p1(inc);\n+  p1.get_future();\n+\n+  try\n+  {\n+    p1.get_future();\n+    VERIFY( false );\n+  }\n+  catch (std::bad_function_call&)\n+  {\n+    test = true;\n+  }\n+\n+  VERIFY( test );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2797b0606bd45f6b3b855d44e3aa040fd0e649b2", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/members/invoke.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,49 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+int zero() { return 0; }\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::packaged_task<int()> p1(zero);\n+  std::unique_future<int> f1 = p1.get_future();\n+\n+  p1();\n+\n+  VERIFY( static_cast<bool>(p1) );\n+  VERIFY( f1.has_value() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "fae15dcac655ba564a517348cdd3cf6b53f724be", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/members/invoke2.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke2.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,56 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+bool odd(unsigned i) { return i%2; }\n+\n+void test01()\n+{\n+  bool test = false;\n+\n+  std::packaged_task<bool(unsigned)> p1(odd);\n+\n+  p1(5);\n+\n+  try\n+  {\n+    p1(4);\n+  }\n+  catch (std::bad_function_call&)\n+  {\n+    test = true;\n+  }\n+\n+  VERIFY( test );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "91d43413d35b8bfd25856cbfb146b6161be6d22b", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/members/invoke3.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke3.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,60 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+int& inc(int& i) { ++i; return i; }\n+\n+void test01()\n+{\n+  bool test = false;\n+\n+  std::packaged_task<void(int&)> p1(inc);\n+\n+  int i1 = 0;\n+  p1(i1);\n+\n+  VERIFY( i1 == 1 );\n+\n+  try\n+  {\n+    p1(i1);\n+  }\n+  catch (std::bad_function_call&)\n+  {\n+    test = true;\n+  }\n+\n+  VERIFY( i1 == 1 );\n+  VERIFY( test );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "eefb313b7a44a863267d383904eb6932b7176646", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/members/invoke4.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke4.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,48 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+void thrower() { throw 0; }\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::packaged_task<void()> p1(thrower);\n+  std::unique_future<void> f1 = p1.get_future();\n+\n+  p1();\n+\n+  VERIFY( f1.has_exception() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "925dc108fe9e0eae21f1e240d07c5fe82d9abcb0", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/members/invoke5.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Finvoke5.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,51 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <thread>\n+#include <testsuite_hooks.h>\n+\n+void noop() { }\n+void waiter(std::shared_future<void> f) { f.wait(); }\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::packaged_task<void()> p1(noop);\n+  std::shared_future<void> f1(p1.get_future());\n+  std::thread t1(waiter, f1);\n+\n+  p1();\n+\n+  t1.join();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "66b9f3da6695fd5b48d1623f422dbc62178e247c", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/members/reset.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Freset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Freset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Freset.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,65 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int zero() { return 0; }\n+\n+void test01()\n+{\n+  bool test = false;\n+  using namespace std;\n+\n+  packaged_task<int()> p1(zero);\n+  unique_future<int> f1 = p1.get_future();\n+\n+  p1.reset();\n+  VERIFY( static_cast<bool>(p1) );\n+\n+  unique_future<int> f2 = p1.get_future();\n+  VERIFY( !f2.is_ready() );\n+\n+  VERIFY( f1.has_exception() );\n+  try\n+  {\n+    f1.get();\n+  }\n+  catch (future_error& e)\n+  {\n+    VERIFY( e.code() == make_error_code(future_errc::broken_promise) );\n+    test = true;\n+  }\n+\n+  VERIFY( test );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "69ee9a99213fd620770035fb59f7796b617e5520", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/members/reset2.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Freset2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Freset2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Freset2.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,53 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+int zero() { return 0; }\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::packaged_task<int()> p1(zero);\n+  std::unique_future<int> f1 = p1.get_future();\n+\n+  p1();\n+  p1.reset();\n+\n+  VERIFY( static_cast<bool>(p1) );\n+  VERIFY( f1.has_value() );\n+\n+  std::unique_future<int> f2 = p1.get_future();\n+  VERIFY( !f2.is_ready() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ced2a00529a9e292d95f1e80bd1d9ece0a65f9bb", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/members/swap.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Fmembers%2Fswap.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,49 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+int zero() { return 0; }\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::packaged_task<int()> p1(zero);\n+  std::packaged_task<int()> p2;\n+  VERIFY( static_cast<bool>(p1) );\n+  VERIFY( !static_cast<bool>(p2) );\n+  p1.swap(p2);\n+  VERIFY( !static_cast<bool>(p1) );\n+  VERIFY( static_cast<bool>(p2) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "4d55603c83e06894564b01fce72024c5abb45340", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/requirements/explicit_instantiation.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Frequirements%2Fexplicit_instantiation.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_tr1.h>\n+\n+using namespace __gnu_test;\n+using std::packaged_task;\n+template class packaged_task<int()>;\n+template class packaged_task<int&()>;\n+template class packaged_task<void()>;\n+template class packaged_task<ClassType(int)>;\n+template class packaged_task<AbstractClass&(int)>;"}, {"sha": "79120b7cd2bcb9dcf2f8a4db8d7277e6c5564fdb", "filename": "libstdc++-v3/testsuite/30_threads/promise/cons/1.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2F1.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,46 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  using std::promise;\n+  using namespace __gnu_test;\n+\n+  promise<int> p1;\n+  promise<int&> p2;\n+  promise<void> p3;\n+  promise<ClassType> p4;\n+  promise<AbstractClass&> p5;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0c77173d0bd8a320b7aadafa343ff9a39a78fd77", "filename": "libstdc++-v3/testsuite/30_threads/promise/cons/assign_neg.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fassign_neg.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,36 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+\n+void test01()\n+{\n+  // assign\n+  std::promise<int> p1;\n+  std::promise<int> p2;\n+  p1 = p2;\n+}\n+\n+// { dg-error \"used here\" \"\" { target *-*-* } 32 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 583 }"}, {"sha": "867c4be31331d2f63a948b82031a8bc3f112fc50", "filename": "libstdc++-v3/testsuite/30_threads/promise/cons/copy_neg.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fcopy_neg.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+\n+void test01()\n+{\n+  // copy\n+  std::promise<int> p1;\n+  std::promise<int> p2(p1);\n+}\n+\n+// { dg-error \"used here\" \"\" { target *-*-* } 31 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 567 }"}, {"sha": "8b1e1399801a758aba5fa1d06056b0c01a6ba70e", "filename": "libstdc++-v3/testsuite/30_threads/promise/cons/move.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fmove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fmove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fmove.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,55 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  // move assign\n+  promise<int> p1;\n+  p1.set_value(3);\n+  promise<int> p2(std::move(p1));\n+  VERIFY( p2.get_future().get() == 3 );\n+  try\n+  {\n+    p1.get_future();\n+    VERIFY( false );\n+  }\n+  catch (std::future_error& e)\n+  {\n+    VERIFY(e.code() == make_error_code(future_errc::future_already_retrieved));\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c5bda4d35605070ea5202db859d286baf26eb60f", "filename": "libstdc++-v3/testsuite/30_threads/promise/cons/move_assign.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fmove_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fmove_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fcons%2Fmove_assign.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,56 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  // move assign\n+  promise<int> p1;\n+  p1.set_value(3);\n+  promise<int> p2;\n+  p2 = move(p1);\n+  VERIFY( p2.get_future().get() == 3 );\n+  try\n+  {\n+    p1.get_future();\n+    VERIFY( false );\n+  }\n+  catch (future_error& e)\n+  {\n+    VERIFY(e.code() == make_error_code(future_errc::future_already_retrieved));\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7e969908a99ac4874609db9a0351eae1b7a8ad52", "filename": "libstdc++-v3/testsuite/30_threads/promise/members/get_future.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fget_future.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fget_future.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fget_future.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,52 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int&> p1;\n+  std::unique_future<int&> f1 = p1.get_future();\n+\n+  VERIFY( !f1.is_ready() );\n+\n+  int i1 = 0;\n+\n+  p1.set_value(i1);\n+\n+  int& i2 = f1.get();\n+\n+  VERIFY( &i1 == &i2 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "cc44fc4791961864a17064d8da07d1f7482de066", "filename": "libstdc++-v3/testsuite/30_threads/promise/members/get_future2.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fget_future2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fget_future2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fget_future2.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,57 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test = false;\n+  using namespace std;\n+\n+  promise<int&> p1;\n+  p1.get_future();\n+\n+  try\n+  {\n+    p1.get_future();\n+    VERIFY( false );\n+  }\n+  catch (future_error& e)\n+  {\n+    VERIFY(e.code() == make_error_code(future_errc::future_already_retrieved));\n+    test = true;\n+  }\n+\n+  VERIFY( test );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e5b8f60aa3adfe72650b0fe122fffe7eb44ab1db", "filename": "libstdc++-v3/testsuite/30_threads/promise/members/set_exception.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_exception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_exception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_exception.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,49 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int> p1;\n+  std::unique_future<int> f1 = p1.get_future();\n+\n+  VERIFY( !f1.is_ready() );\n+\n+  p1.set_exception(std::copy_exception(0));\n+\n+  VERIFY( f1.has_exception() );\n+  VERIFY( !f1.has_value() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3bbe28d48da23afe36f4b846cd98d0e721f53c6b", "filename": "libstdc++-v3/testsuite/30_threads/promise/members/set_exception2.cc", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_exception2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_exception2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_exception2.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,95 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test = false;\n+\n+  std::promise<int> p1;\n+  std::unique_future<int> f1 = p1.get_future();\n+\n+  p1.set_exception(std::copy_exception(0));\n+\n+  try\n+  {\n+    p1.set_exception(std::copy_exception(1));\n+    VERIFY( false );\n+  }\n+  catch (std::future_error& e)\n+  {\n+    VERIFY(e.code() ==\n+        std::make_error_code(std::future_errc::promise_already_satisfied));\n+    test = true;\n+  }\n+\n+  try\n+  {\n+    f1.get();\n+    test = false;\n+  }\n+  catch(int i)\n+  {\n+    VERIFY( i == 0 );\n+  }\n+\n+  VERIFY( test );\n+}\n+\n+void test02()\n+{\n+  bool test = false;\n+\n+  std::promise<int> p1;\n+  std::unique_future<int> f1 = p1.get_future();\n+\n+  p1.set_value(2);\n+\n+  try\n+  {\n+    p1.set_exception(std::copy_exception(0));\n+    VERIFY( false );\n+  }\n+  catch (std::future_error& e)\n+  {\n+    VERIFY(e.code() ==\n+        std::make_error_code(std::future_errc::promise_already_satisfied));\n+    test = true;\n+  }\n+\n+  VERIFY( f1.has_value() );\n+  VERIFY( !f1.has_exception() );\n+  VERIFY( test );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "978ef1914b08a30439acdd8b4957cda93ba78a46", "filename": "libstdc++-v3/testsuite/30_threads/promise/members/set_value.cc", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_value.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,105 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+#include <testsuite_rvalref.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int> p1;\n+  std::unique_future<int> f1 = p1.get_future();\n+\n+  VERIFY( !f1.is_ready() );\n+\n+  p1.set_value(0);\n+\n+  int&& i1 = f1.get();\n+\n+  VERIFY( i1 == 0 );\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using __gnu_test::rvalstruct;\n+\n+  std::promise<rvalstruct> p1;\n+  std::unique_future<rvalstruct> f1 = p1.get_future();\n+\n+  VERIFY( !f1.is_ready() );\n+\n+  p1.set_value(rvalstruct(1));\n+\n+  rvalstruct r1(f1.get());\n+\n+  VERIFY( r1.valid );\n+  VERIFY( r1.val == 1 );\n+}\n+\n+\n+void test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int&> p1;\n+  std::unique_future<int&> f1 = p1.get_future();\n+\n+  VERIFY( !f1.is_ready() );\n+\n+  int i1 = 0;\n+  p1.set_value(i1);\n+  int& i2 = f1.get();\n+\n+  VERIFY( &i1 == &i2 );\n+}\n+\n+void test04()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<void> p1;\n+  std::unique_future<void> f1 = p1.get_future();\n+\n+  VERIFY( !f1.is_ready() );\n+\n+  p1.set_value();\n+  f1.get();\n+\n+  VERIFY( f1.is_ready() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+\n+  return 0;\n+}"}, {"sha": "58e2fe813e4551159bb3e1a1e66f54c188c74d13", "filename": "libstdc++-v3/testsuite/30_threads/promise/members/set_value2.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_value2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_value2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_value2.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,88 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test = false;\n+\n+  std::promise<int> p1;\n+  std::unique_future<int> f1 = p1.get_future();\n+\n+  p1.set_value(1);\n+\n+  try\n+  {\n+    p1.set_value(2);\n+    VERIFY( false );\n+  }\n+  catch (std::future_error& e)\n+  {\n+    VERIFY(e.code() ==\n+        std::make_error_code(std::future_errc::promise_already_satisfied));\n+    test = true;\n+  }\n+\n+  VERIFY( f1.has_value() );\n+  VERIFY( f1.get() == 1 );\n+  VERIFY( test );\n+}\n+\n+void test02()\n+{\n+  bool test = false;\n+\n+  std::promise<int> p1;\n+  std::unique_future<int> f1 = p1.get_future();\n+\n+  p1.set_value(3);\n+\n+  try\n+  {\n+    p1.set_exception(std::copy_exception(4));\n+    VERIFY( false );\n+  }\n+  catch (std::future_error& e)\n+  {\n+    VERIFY(e.code() ==\n+        std::make_error_code(std::future_errc::promise_already_satisfied));\n+    test = true;\n+  }\n+\n+  VERIFY( f1.has_value() );\n+  VERIFY( !f1.has_exception() );\n+  VERIFY( f1.get() == 3 );\n+  VERIFY( test );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "92581964e3c60e5424056241164d2c192cbe01fa", "filename": "libstdc++-v3/testsuite/30_threads/promise/members/set_value3.cc", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_value3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_value3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fset_value3.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,87 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+\n+// Test promise::set_value() for deadlock by checking if the state is ready\n+// during construction and destruction of the associated state.\n+\n+struct tester\n+{\n+  tester(int);\n+  tester(const tester&);\n+  tester() = delete;\n+  ~tester();\n+  tester& operator=(const tester&);\n+};\n+\n+std::promise<tester> pglobal;\n+std::unique_future<tester> fglobal = pglobal.get_future();\n+\n+tester::tester(int)\n+{\n+  bool test __attribute__((unused)) = true;\n+  VERIFY (!fglobal.is_ready());\n+}\n+\n+tester::tester(const tester&)\n+{\n+  bool test __attribute__((unused)) = true;\n+  // if this copy happens while a mutex is locked next line could deadlock:\n+  VERIFY (!fglobal.is_ready());\n+}\n+\n+tester& tester::operator=(const tester&)\n+{\n+  bool test __attribute__((unused)) = true;\n+  // if this copy happens while a mutex is locked next line could deadlock:\n+  VERIFY (!fglobal.is_ready());\n+  return *this;\n+}\n+\n+tester::~tester()\n+{\n+  bool test __attribute__((unused)) = true;\n+  VERIFY (fglobal.is_ready());\n+}\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  pglobal.set_value( tester(1) );\n+\n+  VERIFY( fglobal.is_ready() );\n+}\n+\n+int main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "8bfbdfd6c8f69c36c6c785f5321e0ed126b31073", "filename": "libstdc++-v3/testsuite/30_threads/promise/members/swap.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fswap.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,46 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int> p1;\n+  std::promise<int> p2;\n+  p1.set_value(1);\n+  p1.swap(p2);\n+  VERIFY( !p1.get_future().is_ready() );\n+  VERIFY( p2.get_future().is_ready() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "903b3ab146e10d06422d36bfbfef2c36bebe4567", "filename": "libstdc++-v3/testsuite/30_threads/promise/requirements/explicit_instantiation.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Frequirements%2Fexplicit_instantiation.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_tr1.h>\n+\n+using namespace __gnu_test;\n+using std::promise;\n+template class promise<int>;\n+template class promise<int&>;\n+template class promise<void>;\n+template class promise<ClassType>;\n+template class promise<ClassType&>;"}, {"sha": "7e3c96ffc1ea2a47dcc37320c247333971556175", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/cons/assign_neg.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fcons%2Fassign_neg.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+\n+extern std::shared_future<int>& get();\n+\n+void test01()\n+{\n+  // assign\n+  std::shared_future<int>& p1 = get();\n+  std::shared_future<int>& p2 = get();\n+  p1 = p2;\n+}\n+\n+// { dg-error \"used here\" \"\" { target *-*-* } 34 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 474 }"}, {"sha": "16954a1d4c195032d889bc0a7ce3389dd86773aa", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/cons/copy.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fcons%2Fcopy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fcons%2Fcopy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fcons%2Fcopy.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+extern std::unique_future<int>& get();\n+\n+void test01()\n+{\n+  using std::shared_future;\n+\n+  shared_future<int> p1 = get();\n+  shared_future<int> p2(p1);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "cc4aadfce6f133c84e1ea3d52b426daa53c5d628", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/cons/default_neg.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fcons%2Fdefault_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fcons%2Fdefault_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fcons%2Fdefault_neg.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,45 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  using std::shared_future;\n+  using namespace __gnu_test;\n+\n+  shared_future<int> p1;            // { dg-error \"22: error: no match\" }\n+  shared_future<int&> p2;           // { dg-error \"23: error: no match\" }\n+  shared_future<void> p3;           // { dg-error \"23: error: no match\" }\n+  shared_future<ClassType> p4;      // { dg-error \"28: error: no match\" }\n+  shared_future<AbstractClass&> p5; // { dg-error \"33: error: no match\" }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+// { dg-excess-errors \"note\" }"}, {"sha": "3494a10463f2f98bb5c40b6cabcd6c45ed74d6aa", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/cons/move.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fcons%2Fmove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fcons%2Fmove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fcons%2Fmove.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+\n+void test01()\n+{\n+  // construct from rvalue unique_future\n+  std::promise<int> p1;\n+  std::unique_future<int> f1(p1.get_future());\n+  std::shared_future<int> f2(std::move(f1));\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "bf773c31d52c8ede50c149e9f22ad4c1cee94cc1", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/members/get.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fget.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fget.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fget.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,78 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+int value = 99;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int> p1;\n+  std::shared_future<int> f1(p1.get_future());\n+  std::shared_future<int> f2(f1);\n+\n+  p1.set_value(value);\n+  VERIFY( f1.get() == value );\n+  VERIFY( f2.get() == value );\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int&> p1;\n+  std::shared_future<int&> f1(p1.get_future());\n+  std::shared_future<int&> f2(f1);\n+\n+  p1.set_value(value);\n+  VERIFY( &f1.get() == &value );\n+  VERIFY( &f2.get() == &value );\n+}\n+\n+void test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<void> p1;\n+  std::shared_future<void> f1(p1.get_future());\n+  std::shared_future<void> f2(f1);\n+\n+  p1.set_value();\n+  f1.get();\n+  f2.get();\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+\n+  return 0;\n+}"}, {"sha": "80dd368a9739c045e5748026795bce738674c62f", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/members/get2.cc", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fget2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fget2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fget2.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,127 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <exception>\n+#include <testsuite_hooks.h>\n+\n+int value = 99;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int> p1;\n+  std::shared_future<int> f1(p1.get_future());\n+  std::shared_future<int> f2(f1);\n+\n+  p1.set_exception(std::copy_exception(value));\n+  try\n+  {\n+    (void) f1.get();\n+    VERIFY( false );\n+  }\n+  catch (int& e)\n+  {\n+    VERIFY( e == value );\n+  }\n+  try\n+  {\n+    (void) f2.get();\n+    VERIFY( false );\n+  }\n+  catch (int& e)\n+  {\n+    VERIFY( e == value );\n+  }\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int&> p1;\n+  std::shared_future<int&> f1(p1.get_future());\n+  std::shared_future<int&> f2(f1);\n+\n+  p1.set_exception(std::copy_exception(value));\n+  try\n+  {\n+    (void) f1.get();\n+    VERIFY( false );\n+  }\n+  catch (int& e)\n+  {\n+    VERIFY( e == value );\n+  }\n+  try\n+  {\n+    (void) f2.get();\n+    VERIFY( false );\n+  }\n+  catch (int& e)\n+  {\n+    VERIFY( e == value );\n+  }\n+}\n+\n+void test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<void> p1;\n+  std::shared_future<void> f1(p1.get_future());\n+  std::shared_future<void> f2(f1);\n+\n+  p1.set_exception(std::copy_exception(value));\n+  try\n+  {\n+    f1.get();\n+    VERIFY( false );\n+  }\n+  catch (int& e)\n+  {\n+    VERIFY( e == value );\n+  }\n+  try\n+  {\n+    f2.get();\n+    VERIFY( false );\n+  }\n+  catch (int& e)\n+  {\n+    VERIFY( e == value );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+\n+  return 0;\n+}"}, {"sha": "97d398025e529d27f53a8329db85a2a24e57969a", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/members/has_exception.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fhas_exception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fhas_exception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fhas_exception.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,70 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int> p1;\n+  std::shared_future<int> f1(p1.get_future());\n+  std::shared_future<int> f2(f1);\n+\n+  VERIFY( !f1.has_exception() );\n+  VERIFY( !f2.has_exception() );\n+\n+  p1.set_exception(std::copy_exception(1));\n+\n+  VERIFY( f1.has_exception() );\n+  VERIFY( f2.has_exception() );\n+}\n+\n+void test02()\n+{\n+  std::promise<int> p1;\n+  bool test __attribute__((unused)) = true;\n+\n+  std::shared_future<int> f1(p1.get_future());\n+  std::shared_future<int> f2(f1);\n+\n+  VERIFY( !f1.has_exception() );\n+  VERIFY( !f2.has_exception() );\n+\n+  p1.set_value(1);\n+\n+  VERIFY( !f1.has_exception() );\n+  VERIFY( !f2.has_exception() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+\n+  return 0;\n+}"}, {"sha": "8903c825f889c6bb8ecb6283de2020e2f2d000dd", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/members/has_value.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fhas_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fhas_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fhas_value.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,70 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int> p1;\n+  std::shared_future<int> f1(p1.get_future());\n+  std::shared_future<int> f2(f1);\n+\n+  VERIFY( !f1.has_value() );\n+  VERIFY( !f2.has_value() );\n+\n+  p1.set_value(1);\n+\n+  VERIFY( f1.has_value() );\n+  VERIFY( f2.has_value() );\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int> p1;\n+  std::shared_future<int> f1(p1.get_future());\n+  std::shared_future<int> f2(f1);\n+\n+  VERIFY( !f1.has_value() );\n+  VERIFY( !f2.has_value() );\n+\n+  p1.set_exception(std::copy_exception(1));\n+\n+  VERIFY( !f1.has_value() );\n+  VERIFY( !f2.has_value() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+\n+  return 0;\n+}"}, {"sha": "eb2252a664b523dfc977e631d74621a48736df99", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/members/is_ready.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fis_ready.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fis_ready.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fis_ready.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,51 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int> p1;\n+  std::shared_future<int> f1(p1.get_future());\n+  std::shared_future<int> f2(f1);\n+\n+  VERIFY( !f1.is_ready() );\n+  VERIFY( !f2.is_ready() );\n+\n+  p1.set_value(1);\n+\n+  VERIFY( f1.is_ready() );\n+  VERIFY( f2.is_ready() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a4e325b0d96ab2f7dae3c1f06d07a0057c63edb1", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/members/wait.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fwait.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fwait.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fwait.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,56 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <thread>\n+#include <mutex>\n+#include <testsuite_hooks.h>\n+\n+void wait(std::shared_future<void> f)\n+{\n+  f.wait();\n+}\n+\n+void test01()\n+{\n+  std::promise<void> p1;\n+  std::shared_future<void> f1(p1.get_future());\n+\n+  std::thread t1(wait, f1);\n+  std::thread t2(wait, f1);\n+  std::thread t3(wait, f1);\n+\n+  p1.set_value();\n+  t1.join();\n+  t2.join();\n+  t3.join();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "408b6460225391852ff6876db8d6bbfd7b7b3cca", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/members/wait_for.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fwait_for.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fwait_for.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fwait_for.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,56 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <chrono>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int> p1;\n+  std::shared_future<int> f1(p1.get_future());\n+  std::shared_future<int> f2(f1);\n+\n+  std::chrono::milliseconds delay(100);\n+\n+  VERIFY( !f1.wait_for(delay) );\n+  VERIFY( !f2.wait_for(delay) );\n+\n+  p1.set_value(1);\n+\n+  auto before = std::chrono::system_clock::now();\n+  VERIFY( f1.wait_for(delay) );\n+  VERIFY( f2.wait_for(delay) );\n+  VERIFY( std::chrono::system_clock::now() < (before + 2*delay) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "561fb20952d221c694ab961a819880c9415b334d", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/members/wait_until.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fwait_until.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fwait_until.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fwait_until.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,64 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <chrono>\n+#include <testsuite_hooks.h>\n+\n+std::chrono::system_clock::time_point make_time(int i)\n+{\n+  return std::chrono::system_clock::now() + std::chrono::milliseconds(i);\n+}\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int> p1;\n+  std::shared_future<int> f1(p1.get_future());\n+  std::shared_future<int> f2(f1);\n+\n+  auto when = make_time(10);\n+  VERIFY( !f1.wait_until(make_time(10)) );\n+  VERIFY( std::chrono::system_clock::now() >= when );\n+\n+  when = make_time(10);\n+  VERIFY( !f2.wait_until(make_time(10)) );\n+  VERIFY( std::chrono::system_clock::now() >= when );\n+\n+  p1.set_value(1);\n+\n+  when = make_time(100);\n+  VERIFY( f1.wait_until(when) );\n+  VERIFY( f2.wait_until(when) );\n+  VERIFY( std::chrono::system_clock::now() < when );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "4c1b3b276bd090a51e1a01e5a2122e92eb4059a0", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/requirements/explicit_instantiation.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Frequirements%2Fexplicit_instantiation.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_tr1.h>\n+\n+using namespace __gnu_test;\n+using std::shared_future;\n+template class shared_future<int>;\n+template class shared_future<int&>;\n+template class shared_future<void>;\n+template class shared_future<ClassType>;\n+template class shared_future<ClassType&>;"}, {"sha": "e9525e4da7a183d199e6d9105921872b8396b777", "filename": "libstdc++-v3/testsuite/30_threads/unique_future/cons/assign_neg.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fcons%2Fassign_neg.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+\n+extern std::unique_future<int>& get();\n+\n+void test01()\n+{\n+  // assign\n+  std::unique_future<int>& p1 = get();\n+  std::unique_future<int>& p2 = get();\n+  p1 = p2;\n+}\n+\n+// { dg-error \"used here\" \"\" { target *-*-* } 34 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 394 }"}, {"sha": "bf40e054af082afbe1f719e5d159d726bb974c09", "filename": "libstdc++-v3/testsuite/30_threads/unique_future/cons/copy_neg.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fcons%2Fcopy_neg.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+\n+extern std::unique_future<int>& get();\n+\n+void test01()\n+{\n+  // copy\n+  std::unique_future<int>& p1 = get();\n+  std::unique_future<int> p2(p1);\n+}\n+\n+// { dg-error \"used here\" \"\" { target *-*-* } 33 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 393 }"}, {"sha": "ba5066bfcabc8835c5add10ed5e7f69448eddb30", "filename": "libstdc++-v3/testsuite/30_threads/unique_future/cons/default_neg.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fcons%2Fdefault_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fcons%2Fdefault_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fcons%2Fdefault_neg.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,45 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  using std::unique_future;\n+  using namespace __gnu_test;\n+\n+  unique_future<int> p1;            // { dg-error \"22: error: no match\" }\n+  unique_future<int&> p2;           // { dg-error \"23: error: no match\" }\n+  unique_future<void> p3;           // { dg-error \"23: error: no match\" }\n+  unique_future<ClassType> p4;      // { dg-error \"28: error: no match\" }\n+  unique_future<AbstractClass&> p5; // { dg-error \"33: error: no match\" }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+// { dg-excess-errors \"note\" }"}, {"sha": "17eaa914e4e08862627fd4fb8036e632be0b0565", "filename": "libstdc++-v3/testsuite/30_threads/unique_future/cons/move.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fcons%2Fmove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fcons%2Fmove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fcons%2Fmove.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+\n+void test01()\n+{\n+  // move\n+  std::promise<int> p1;\n+  std::unique_future<int> f1(p1.get_future());\n+  std::unique_future<int> f2(std::move(f1));\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5c9a454849173c08f1d5a64c401301cd598c42c5", "filename": "libstdc++-v3/testsuite/30_threads/unique_future/members/get.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fmembers%2Fget.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fmembers%2Fget.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fmembers%2Fget.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,70 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+int value = 99;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int> p1;\n+  std::unique_future<int> f1(p1.get_future());\n+\n+  p1.set_value(value);\n+  VERIFY( f1.get() == value );\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int&> p1;\n+  std::unique_future<int&> f1(p1.get_future());\n+\n+  p1.set_value(value);\n+  VERIFY( &f1.get() == &value );\n+}\n+\n+void test03()\n+{\n+  std::promise<void> p1;\n+  std::unique_future<void> f1(p1.get_future());\n+\n+  p1.set_value();\n+  f1.get();\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+\n+  return 0;\n+}"}, {"sha": "e6317fed838a1cc1390be576dd90f07698acd58b", "filename": "libstdc++-v3/testsuite/30_threads/unique_future/members/get2.cc", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fmembers%2Fget2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fmembers%2Fget2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fmembers%2Fget2.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,97 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <exception>\n+#include <testsuite_hooks.h>\n+\n+int value = 99;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int> p1;\n+  std::unique_future<int> f1(p1.get_future());\n+\n+  p1.set_exception(std::copy_exception(value));\n+  try\n+  {\n+    (void) f1.get();\n+    VERIFY( false );\n+  }\n+  catch (int& e)\n+  {\n+    VERIFY( e == value );\n+  }\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int&> p1;\n+  std::unique_future<int&> f1(p1.get_future());\n+\n+  p1.set_exception(std::copy_exception(value));\n+  try\n+  {\n+    (void) f1.get();\n+    VERIFY( false );\n+  }\n+  catch (int& e)\n+  {\n+    VERIFY( e == value );\n+  }\n+}\n+\n+void test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<void> p1;\n+  std::unique_future<void> f1(p1.get_future());\n+\n+  p1.set_exception(std::copy_exception(value));\n+  try\n+  {\n+    f1.get();\n+    VERIFY( false );\n+  }\n+  catch (int& e)\n+  {\n+    VERIFY( e == value );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+\n+  return 0;\n+}"}, {"sha": "1d5baf883936f474c8c9dec4b1cb5de0f35424b5", "filename": "libstdc++-v3/testsuite/30_threads/unique_future/members/has_exception.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fmembers%2Fhas_exception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fmembers%2Fhas_exception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fmembers%2Fhas_exception.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,64 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int> p1;\n+  std::unique_future<int> f1(p1.get_future());\n+\n+  VERIFY( !f1.has_exception() );\n+\n+  p1.set_exception(std::copy_exception(1));\n+\n+  VERIFY( f1.has_exception() );\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int> p1;\n+  std::unique_future<int> f1(p1.get_future());\n+\n+  VERIFY( !f1.has_exception() );\n+\n+  p1.set_value(1);\n+\n+  VERIFY( !f1.has_exception() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+\n+  return 0;\n+}"}, {"sha": "f1f96f21ddc75f36796c1aaab0bcbb9467b8a4fd", "filename": "libstdc++-v3/testsuite/30_threads/unique_future/members/has_value.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fmembers%2Fhas_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fmembers%2Fhas_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fmembers%2Fhas_value.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,65 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int> p1;\n+  std::unique_future<int> f1(p1.get_future());\n+\n+  VERIFY( !f1.has_value() );\n+\n+  p1.set_value(1);\n+\n+  VERIFY( f1.has_value() );\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int> p1;\n+  std::unique_future<int> f1(p1.get_future());\n+\n+  VERIFY( !f1.has_value() );\n+\n+  p1.set_exception(std::copy_exception(1));\n+\n+  VERIFY( !f1.has_value() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+\n+  return 0;\n+}\n+"}, {"sha": "6f2b688559521df6a56bb8b6b3ad3015224b0e60", "filename": "libstdc++-v3/testsuite/30_threads/unique_future/members/is_ready.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fmembers%2Fis_ready.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fmembers%2Fis_ready.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fmembers%2Fis_ready.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,48 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int> p1;\n+  std::unique_future<int> f1(p1.get_future());\n+\n+  VERIFY( !f1.is_ready() );\n+\n+  p1.set_value(1);\n+\n+  VERIFY( f1.is_ready() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b9c9402cf31d8705b642551b262edf8298447606", "filename": "libstdc++-v3/testsuite/30_threads/unique_future/members/wait.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fmembers%2Fwait.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fmembers%2Fwait.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fmembers%2Fwait.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,54 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <chrono>\n+#include <thread>\n+#include <mutex>\n+#include <testsuite_hooks.h>\n+\n+\n+void wait(std::unique_future<void>& f)\n+{\n+  f.wait();\n+}\n+\n+void test01()\n+{\n+  std::promise<void> p1;\n+  std::unique_future<void> f1(p1.get_future());\n+\n+  std::thread t1(wait, std::ref(f1));\n+\n+  p1.set_value();\n+  t1.join();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "065240097b13ceec138f3a89085e6f6d248d1a17", "filename": "libstdc++-v3/testsuite/30_threads/unique_future/members/wait_for.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fmembers%2Fwait_for.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fmembers%2Fwait_for.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fmembers%2Fwait_for.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,53 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <chrono>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int> p1;\n+  std::unique_future<int> f1(p1.get_future());\n+\n+  std::chrono::milliseconds delay(100);\n+\n+  VERIFY( !f1.wait_for(delay) );\n+\n+  p1.set_value(1);\n+\n+  auto before = std::chrono::system_clock::now();\n+  VERIFY( f1.wait_for(delay) );\n+  VERIFY( std::chrono::system_clock::now() < (before + delay) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "55bdcbcc76c127c16e02a83c4b3b844500ebe2ce", "filename": "libstdc++-v3/testsuite/30_threads/unique_future/members/wait_until.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fmembers%2Fwait_until.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fmembers%2Fwait_until.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Fmembers%2Fwait_until.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,58 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <chrono>\n+#include <testsuite_hooks.h>\n+\n+std::chrono::system_clock::time_point make_time(int i)\n+{\n+  return std::chrono::system_clock::now() + std::chrono::milliseconds(i);\n+}\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int> p1;\n+  std::unique_future<int> f1(p1.get_future());\n+\n+  auto when = make_time(10);\n+  VERIFY( !f1.wait_until(when) );\n+  VERIFY( std::chrono::system_clock::now() >= when );\n+\n+  p1.set_value(1);\n+\n+  when = make_time(100);\n+  VERIFY( f1.wait_until(when) );\n+  VERIFY( std::chrono::system_clock::now() < when );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "01e5c5924b2c9ff584da28d8fc62b145c3b314a3", "filename": "libstdc++-v3/testsuite/30_threads/unique_future/requirements/explicit_instantiation.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_future%2Frequirements%2Fexplicit_instantiation.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_tr1.h>\n+\n+using namespace __gnu_test;\n+using std::unique_future;\n+template class unique_future<int>;\n+template class unique_future<int&>;\n+template class unique_future<void>;\n+template class unique_future<ClassType>;\n+template class unique_future<ClassType&>;"}, {"sha": "21405e18ad41277982022dcdbbcc21d566f4d1fa", "filename": "libstdc++-v3/testsuite/performance/30_threads/future/polling.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F30_threads%2Ffuture%2Fpolling.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c910ceff6a0533e34889ef4aa86d19e42cbff123/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F30_threads%2Ffuture%2Fpolling.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F30_threads%2Ffuture%2Fpolling.cc?ref=c910ceff6a0533e34889ef4aa86d19e42cbff123", "patch": "@@ -0,0 +1,55 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <thread>\n+#include <testsuite_performance.h>\n+\n+void poll(std::shared_future<void> f)\n+{\n+  while (!f.is_ready())\n+  { }\n+}\n+\n+int main()\n+{\n+  using namespace __gnu_test;\n+  time_counter time;\n+  resource_counter resource;\n+\n+  const int n = 20;\n+  std::promise<void> p;\n+  std::shared_future<void> f = p.get_future();\n+  std::thread pollers[n];\n+  for (int i=0; i < n; ++i)\n+    pollers[i] = std::thread(poll, f);\n+\n+  start_counters(time, resource);\n+\n+  for (int i = 0; i < 1000000; ++i)\n+    (void)f.is_ready();\n+  p.set_value();\n+\n+  for (int i=0; i < n; ++i)\n+    pollers[i].join();\n+\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"\", time, resource);\n+\n+  return 0;\n+}"}]}