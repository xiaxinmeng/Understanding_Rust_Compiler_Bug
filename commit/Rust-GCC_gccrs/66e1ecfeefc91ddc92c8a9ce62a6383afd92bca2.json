{"sha": "66e1ecfeefc91ddc92c8a9ce62a6383afd92bca2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZlMWVjZmVlZmM5MWRkYzkyYzhhOWNlNjJhNjM4M2FmZDkyYmNhMg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2008-03-31T13:32:38Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-03-31T13:32:38Z"}, "message": "re PR target/32000 (x86 backend uses aligned load on unaligned memory)\n\ngcc/\n\n2008-03-31  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/32000\n\t* config/i386/i386.md (*movti_internal): Emit unaligned SSE\n\tload/store if memory is unaligned.\n\t(*movti_rex64): Likewise.\n\n\t* config/i386/predicates.md (misaligned_operand): New.\n\ngcc/testsuite/\n\n2008-03-31  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/32000\n\t* gcc.target/i386/pr32000-1.c: New.\n\nFrom-SVN: r133753", "tree": {"sha": "abf2f98f5cbb58d08ed990748f37f097440d04ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abf2f98f5cbb58d08ed990748f37f097440d04ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66e1ecfeefc91ddc92c8a9ce62a6383afd92bca2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66e1ecfeefc91ddc92c8a9ce62a6383afd92bca2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66e1ecfeefc91ddc92c8a9ce62a6383afd92bca2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66e1ecfeefc91ddc92c8a9ce62a6383afd92bca2/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9b1b8df212720add1ad9c702a5c0d0fd8b9d9ac3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b1b8df212720add1ad9c702a5c0d0fd8b9d9ac3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b1b8df212720add1ad9c702a5c0d0fd8b9d9ac3"}], "stats": {"total": 83, "additions": 77, "deletions": 6}, "files": [{"sha": "0a426b1b849843742414ed0ce39cda9969f6b659", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e1ecfeefc91ddc92c8a9ce62a6383afd92bca2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e1ecfeefc91ddc92c8a9ce62a6383afd92bca2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66e1ecfeefc91ddc92c8a9ce62a6383afd92bca2", "patch": "@@ -1,3 +1,12 @@\n+2008-03-31  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/32000\n+\t* config/i386/i386.md (*movti_internal): Emit unaligned SSE\n+\tload/store if memory is unaligned.\n+\t(*movti_rex64): Likewise.\n+\n+\t* config/i386/predicates.md (misaligned_operand): New.\n+\n 2008-03-31  Andrew Pinski  <pinskia@gmail.com>\n \n \tPR tree-opt/35431"}, {"sha": "1135799b65eeea635673e48d98ac0315787b0b56", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e1ecfeefc91ddc92c8a9ce62a6383afd92bca2/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e1ecfeefc91ddc92c8a9ce62a6383afd92bca2/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=66e1ecfeefc91ddc92c8a9ce62a6383afd92bca2", "patch": "@@ -2385,10 +2385,23 @@\n \treturn \"pxor\\t%0, %0\";\n     case 1:\n     case 2:\n-      if (get_attr_mode (insn) == MODE_V4SF)\n-\treturn \"movaps\\t{%1, %0|%0, %1}\";\n+      /* TDmode values are passed as TImode on the stack.  Moving them\n+\t to stack may result in unaligned memory access.  */\n+      if (misaligned_operand (operands[0], TImode)\n+\t  || misaligned_operand (operands[1], TImode))\n+\t{ \n+\t  if (get_attr_mode (insn) == MODE_V4SF)\n+\t    return \"movups\\t{%1, %0|%0, %1}\";\n+\t else\n+\t   return \"movdqu\\t{%1, %0|%0, %1}\";\n+\t}\n       else\n-\treturn \"movdqa\\t{%1, %0|%0, %1}\";\n+\t{ \n+\t  if (get_attr_mode (insn) == MODE_V4SF)\n+\t    return \"movaps\\t{%1, %0|%0, %1}\";\n+\t else\n+\t   return \"movdqa\\t{%1, %0|%0, %1}\";\n+\t}\n     default:\n       gcc_unreachable ();\n     }\n@@ -2422,10 +2435,23 @@\n \treturn \"pxor\\t%0, %0\";\n     case 3:\n     case 4:\n-      if (get_attr_mode (insn) == MODE_V4SF)\n-\treturn \"movaps\\t{%1, %0|%0, %1}\";\n+      /* TDmode values are passed as TImode on the stack.  Moving them\n+\t to stack may result in unaligned memory access.  */\n+      if (misaligned_operand (operands[0], TImode)\n+\t  || misaligned_operand (operands[1], TImode))\n+\t{ \n+\t  if (get_attr_mode (insn) == MODE_V4SF)\n+\t    return \"movups\\t{%1, %0|%0, %1}\";\n+\t else\n+\t   return \"movdqu\\t{%1, %0|%0, %1}\";\n+\t}\n       else\n-\treturn \"movdqa\\t{%1, %0|%0, %1}\";\n+\t{ \n+\t  if (get_attr_mode (insn) == MODE_V4SF)\n+\t    return \"movaps\\t{%1, %0|%0, %1}\";\n+\t else\n+\t   return \"movdqa\\t{%1, %0|%0, %1}\";\n+\t}\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "5389aa998425ebed589fb3f16549561af583202e", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e1ecfeefc91ddc92c8a9ce62a6383afd92bca2/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e1ecfeefc91ddc92c8a9ce62a6383afd92bca2/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=66e1ecfeefc91ddc92c8a9ce62a6383afd92bca2", "patch": "@@ -1043,3 +1043,8 @@\n \n (define_predicate \"absneg_operator\"\n   (match_code \"abs,neg\"))\n+\n+;; Return 1 if OP is misaligned memory operand\n+(define_predicate \"misaligned_operand\"\n+  (and (match_code \"mem\")\n+       (match_test \"MEM_ALIGN (op) < GET_MODE_ALIGNMENT (mode)\")))"}, {"sha": "4353823ca4f1d023d3b15ff17056204316219e0a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e1ecfeefc91ddc92c8a9ce62a6383afd92bca2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e1ecfeefc91ddc92c8a9ce62a6383afd92bca2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=66e1ecfeefc91ddc92c8a9ce62a6383afd92bca2", "patch": "@@ -1,3 +1,8 @@\n+2008-03-31  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/32000\n+\t* gcc.target/i386/pr32000-1.c: New.\n+\n 2008-03-31  Andrew Pinski  <pinskia@gmail.com>\n \n \tPR tree-opt/35431"}, {"sha": "483d24a763a6b3f04a1b560aa78f2a67a9abbe35", "filename": "gcc/testsuite/gcc.target/i386/pr32000-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e1ecfeefc91ddc92c8a9ce62a6383afd92bca2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32000-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e1ecfeefc91ddc92c8a9ce62a6383afd92bca2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32000-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32000-1.c?ref=66e1ecfeefc91ddc92c8a9ce62a6383afd92bca2", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target dfp } */\n+/* { dg-options \"-O -msse2 -std=gnu99\" } */\n+\n+#include \"sse2-check.h\"\n+\n+typedef struct { _Decimal128 f __attribute__((packed)); } packed;\n+\n+_Decimal128 __attribute__((noinline))\n+foo (_Decimal128 a1, _Decimal128 a2, _Decimal128 a3, _Decimal128 a4,\n+     _Decimal128 a5, _Decimal128 a6, _Decimal128 a7, _Decimal128 a8,\n+     int b1, int b2, int b3, int b4, int b5, int b6, int b7, packed y)\n+{\n+  return y.f;\n+}\n+\n+void\n+sse2_test (void)\n+{\n+  packed x;\n+  _Decimal128 y = -1;\n+  x.f = y;\n+  y = foo (0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, -1, x);\n+  if (__builtin_memcmp (&y, &x.f, sizeof (y)))\n+    abort ();\n+}"}]}