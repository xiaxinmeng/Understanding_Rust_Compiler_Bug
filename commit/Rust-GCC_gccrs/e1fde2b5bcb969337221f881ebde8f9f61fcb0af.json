{"sha": "e1fde2b5bcb969337221f881ebde8f9f61fcb0af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFmZGUyYjViY2I5NjkzMzcyMjFmODgxZWJkZThmOWY2MWZjYjBhZg==", "commit": {"author": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-04-18T19:55:56Z"}, "committer": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-04-18T19:55:56Z"}, "message": "entered into RCS\n\nFrom-SVN: r781", "tree": {"sha": "c27a10c8ab601d98ded4bc0218c8b32a72eb0664", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c27a10c8ab601d98ded4bc0218c8b32a72eb0664"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1fde2b5bcb969337221f881ebde8f9f61fcb0af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1fde2b5bcb969337221f881ebde8f9f61fcb0af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1fde2b5bcb969337221f881ebde8f9f61fcb0af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1fde2b5bcb969337221f881ebde8f9f61fcb0af/comments", "author": null, "committer": null, "parents": [{"sha": "def9623c20edb10be93391abe9a3c8c7e5788bb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/def9623c20edb10be93391abe9a3c8c7e5788bb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/def9623c20edb10be93391abe9a3c8c7e5788bb5"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "b6fad6cbb0785b091c82ebb37a4aab59d5cab923", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1fde2b5bcb969337221f881ebde8f9f61fcb0af/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1fde2b5bcb969337221f881ebde8f9f61fcb0af/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=e1fde2b5bcb969337221f881ebde8f9f61fcb0af", "patch": "@@ -891,7 +891,7 @@ do \\\n \n /* The relative costs of various types of constants.  Note that cse.c defines\n    REG = 1, SUBREG = 2, any node = (2 + sum of subnodes).  */\n-#define CONST_COSTS(RTX, CODE)  \\\n+#define CONST_COSTS(RTX, CODE, OUTER_CODE)  \\\n   case CONST_INT:\t\t\t\t\\\n     if (const_ok_for_arm (INTVAL (RTX)))\t\\\n       return (2);\t\t\t\t\\"}, {"sha": "01f738dfff247f9153cecfb7dbf5a15062e912e2", "filename": "gcc/config/fx80/fx80.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1fde2b5bcb969337221f881ebde8f9f61fcb0af/gcc%2Fconfig%2Ffx80%2Ffx80.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1fde2b5bcb969337221f881ebde8f9f61fcb0af/gcc%2Fconfig%2Ffx80%2Ffx80.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffx80%2Ffx80.h?ref=e1fde2b5bcb969337221f881ebde8f9f61fcb0af", "patch": "@@ -870,7 +870,7 @@ extern enum reg_class regno_reg_class[];\n    of a switch statement.  If the code is computed here,\n    return it with a return statement.  Otherwise, break from the switch.  */\n \n-#define CONST_COSTS(RTX,CODE) \\\n+#define CONST_COSTS(RTX,CODE,OUTER_CODE) \\\n   case CONST_INT:\t\t\t\t\t\t\\\n     /* Constant zero is super cheap due to clr instruction.  */\t\\\n     if (RTX == const0_rtx) return 0;\t\t\t\t\\"}, {"sha": "b726246019f4712174ea3103a01e33206a8fc6f3", "filename": "gcc/config/gmicro/gmicro.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1fde2b5bcb969337221f881ebde8f9f61fcb0af/gcc%2Fconfig%2Fgmicro%2Fgmicro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1fde2b5bcb969337221f881ebde8f9f61fcb0af/gcc%2Fconfig%2Fgmicro%2Fgmicro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgmicro%2Fgmicro.h?ref=e1fde2b5bcb969337221f881ebde8f9f61fcb0af", "patch": "@@ -1177,7 +1177,7 @@ extern enum reg_class regno_reg_class[];\n    of a switch statement.  If the code is computed here,\n    return it with a return statement.  Otherwise, break from the switch.  */\n \n-#define CONST_COSTS(RTX,CODE) \\\n+#define CONST_COSTS(RTX,CODE,OUTER_CODE) \\\n   case CONST_INT:\t\t\t\t\t\t\\\n     if ((unsigned) INTVAL (RTX) < 8) return 0;\t\t\t\\\n     if ((unsigned) (INTVAL (RTX) + 0x80) < 0x100) return 1;\t\\"}, {"sha": "49fbb7c27098d0187997e93715fdf4b28abe2ca4", "filename": "gcc/config/spur/spur.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1fde2b5bcb969337221f881ebde8f9f61fcb0af/gcc%2Fconfig%2Fspur%2Fspur.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1fde2b5bcb969337221f881ebde8f9f61fcb0af/gcc%2Fconfig%2Fspur%2Fspur.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspur%2Fspur.h?ref=e1fde2b5bcb969337221f881ebde8f9f61fcb0af", "patch": "@@ -774,7 +774,7 @@ extern int current_function_pretend_args_size;\n    of a switch statement.  If the code is computed here,\n    return it with a return statement.  Otherwise, break from the switch.  */\n \n-#define CONST_COSTS(RTX,CODE) \\\n+#define CONST_COSTS(RTX,CODE,OUTER_CODE) \\\n   case CONST_INT:\t\t\t\t\t\t\\\n     if (INTVAL (RTX) < 0x2000 && INTVAL (RTX) >= -0x2000) return 1; \\\n   case CONST:\t\t\t\t\t\t\t\\"}]}