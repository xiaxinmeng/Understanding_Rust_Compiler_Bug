{"sha": "8a9e230f41eb406380ab0d9c2b73031133d54259", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE5ZTIzMGY0MWViNDA2MzgwYWIwZDljMmI3MzAzMTEzM2Q1NDI1OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-06-17T13:22:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-06-17T14:30:21Z"}, "message": "Use SLP_TREE_VECTYPE consistently\n\nThis assigns SLP_TREE_VECTYPE to all SLP nodes and uses it when\nanalyzing def operands.  It does not deal with mismatches between\nSLP_TREE_VECTYPE and STMT_VINFO_VECTYPE yet - those cases are\nstill rejected until I get to clean up the interaction with data\nreference groups.\n\n2020-06-17  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-slp.c (vect_build_slp_tree_1): Set the passed\n\tin *vectype parameter.\n\t(vect_build_slp_tree_2): Set SLP_TREE_VECTYPE from what\n\tvect_build_slp_tree_1 computed.\n\t(vect_analyze_slp_instance): Set SLP_TREE_VECTYPE.\n\t(vect_slp_analyze_node_operations_1): Use the SLP node vector type.\n\t(vect_schedule_slp_instance): Likewise.\n\t* tree-vect-stmts.c (vect_is_simple_use): Take the vector type\n\tfrom SLP_TREE_VECTYPE.", "tree": {"sha": "c47d5a0c76c39420d9cdb189b736a66827978436", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c47d5a0c76c39420d9cdb189b736a66827978436"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a9e230f41eb406380ab0d9c2b73031133d54259", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a9e230f41eb406380ab0d9c2b73031133d54259", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a9e230f41eb406380ab0d9c2b73031133d54259", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a9e230f41eb406380ab0d9c2b73031133d54259/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae2ebf011fec926e003645c33c07a03619ea216a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae2ebf011fec926e003645c33c07a03619ea216a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae2ebf011fec926e003645c33c07a03619ea216a"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "fe946738a971d2d0d6fca9d973374dfd8a7dc0de", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9e230f41eb406380ab0d9c2b73031133d54259/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9e230f41eb406380ab0d9c2b73031133d54259/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=8a9e230f41eb406380ab0d9c2b73031133d54259", "patch": "@@ -744,7 +744,7 @@ static bool\n vect_build_slp_tree_1 (vec_info *vinfo, unsigned char *swap,\n \t\t       vec<stmt_vec_info> stmts, unsigned int group_size,\n \t\t       poly_uint64 *max_nunits, bool *matches,\n-\t\t       bool *two_operators)\n+\t\t       bool *two_operators, tree *node_vectype)\n {\n   unsigned int i;\n   stmt_vec_info first_stmt_info = stmts[0];\n@@ -848,6 +848,7 @@ vect_build_slp_tree_1 (vec_info *vinfo, unsigned char *swap,\n       /* Check the operation.  */\n       if (i == 0)\n \t{\n+\t  *node_vectype = vectype;\n \t  first_stmt_code = rhs_code;\n \n \t  /* Shift arguments should be equal in all the packed stmts for a\n@@ -1259,14 +1260,17 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \treturn NULL;\n       (*tree_size)++;\n       node = vect_create_new_slp_node (stmts, 0);\n+      SLP_TREE_VECTYPE (node) = vectype;\n       return node;\n     }\n \n \n   bool two_operators = false;\n   unsigned char *swap = XALLOCAVEC (unsigned char, group_size);\n+  tree vectype = NULL_TREE;\n   if (!vect_build_slp_tree_1 (vinfo, swap, stmts, group_size,\n-\t\t\t      &this_max_nunits, matches, &two_operators))\n+\t\t\t      &this_max_nunits, matches, &two_operators,\n+\t\t\t      &vectype))\n     return NULL;\n \n   /* If the SLP node is a load, terminate the recursion unless masked.  */\n@@ -1284,6 +1288,7 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \t  *max_nunits = this_max_nunits;\n \t  (*tree_size)++;\n \t  node = vect_create_new_slp_node (stmts, 0);\n+\t  SLP_TREE_VECTYPE (node) = vectype;\n \t  /* And compute the load permutation.  Whether it is actually\n \t     a permutation depends on the unrolling factor which is\n \t     decided later.  */\n@@ -1509,6 +1514,7 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \n   node = vect_create_new_slp_node (stmts, nops);\n   SLP_TREE_TWO_OPERATORS (node) = two_operators;\n+  SLP_TREE_VECTYPE (node) = vectype;\n   SLP_TREE_CHILDREN (node).splice (children);\n   return node;\n }\n@@ -2169,6 +2175,7 @@ vect_analyze_slp_instance (vec_info *vinfo,\n \t      for (unsigned i = 0; i < group_size; ++i)\n \t\tscalar_stmts.quick_push (next_info);\n \t      slp_tree conv = vect_create_new_slp_node (scalar_stmts, 1);\n+\t      SLP_TREE_VECTYPE (conv) = STMT_VINFO_VECTYPE (next_info);\n \t      SLP_TREE_CHILDREN (conv).quick_push (node);\n \t      SLP_INSTANCE_TREE (new_instance) = conv;\n \t      /* We also have to fake this conversion stmt as SLP reduction\n@@ -2620,7 +2627,7 @@ vect_slp_analyze_node_operations_1 (vec_info *vinfo, slp_tree node,\n       else\n \tvf = 1;\n       unsigned int group_size = SLP_TREE_LANES (node);\n-      tree vectype = STMT_VINFO_VECTYPE (stmt_info);\n+      tree vectype = SLP_TREE_VECTYPE (node);\n       SLP_TREE_NUMBER_OF_VEC_STMTS (node)\n \t= vect_get_num_vectors (vf * group_size, vectype);\n     }\n@@ -3963,7 +3970,7 @@ vect_schedule_slp_instance (vec_info *vinfo,\n   stmt_vec_info stmt_info = SLP_TREE_REPRESENTATIVE (node);\n \n   /* VECTYPE is the type of the destination.  */\n-  tree vectype = STMT_VINFO_VECTYPE (stmt_info);\n+  tree vectype = SLP_TREE_VECTYPE (node);\n   poly_uint64 nunits = TYPE_VECTOR_SUBPARTS (vectype);\n   unsigned group_size = SLP_TREE_SCALAR_STMTS (node).length ();\n "}, {"sha": "4a0a907fcb47dfa11a4542ab85eee1ada846e88b", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9e230f41eb406380ab0d9c2b73031133d54259/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9e230f41eb406380ab0d9c2b73031133d54259/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=8a9e230f41eb406380ab0d9c2b73031133d54259", "patch": "@@ -11230,15 +11230,18 @@ vect_is_simple_use (vec_info *vinfo, stmt_vec_info stmt, slp_tree slp_node,\n     {\n       slp_tree child = SLP_TREE_CHILDREN (slp_node)[operand];\n       *slp_def = child;\n+      *vectype = SLP_TREE_VECTYPE (child);\n       if (SLP_TREE_DEF_TYPE (child) == vect_internal_def)\n-\t*op = gimple_get_lhs (SLP_TREE_REPRESENTATIVE (child)->stmt);\n+\t{\n+\t  *op = gimple_get_lhs (SLP_TREE_REPRESENTATIVE (child)->stmt);\n+\t  return vect_is_simple_use (*op, vinfo, dt, def_stmt_info_out);\n+\t}\n       else\n \t{\n \t  if (def_stmt_info_out)\n \t    *def_stmt_info_out = NULL;\n \t  *op = SLP_TREE_SCALAR_OPS (child)[0];\n \t  *dt = SLP_TREE_DEF_TYPE (child);\n-\t  *vectype = SLP_TREE_VECTYPE (child);\n \t  return true;\n \t}\n     }\n@@ -11269,11 +11272,8 @@ vect_is_simple_use (vec_info *vinfo, stmt_vec_info stmt, slp_tree slp_node,\n \t}\n       else\n \tgcc_unreachable ();\n+      return vect_is_simple_use (*op, vinfo, dt, vectype, def_stmt_info_out);\n     }\n-\n-  /* ???  We might want to update *vectype from *slp_def here though\n-     when sharing nodes this would prevent unsharing in the caller.  */\n-  return vect_is_simple_use (*op, vinfo, dt, vectype, def_stmt_info_out);\n }\n \n /* If OP is not NULL and is external or constant update its vector"}]}