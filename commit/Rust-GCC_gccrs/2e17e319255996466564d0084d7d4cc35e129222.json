{"sha": "2e17e319255996466564d0084d7d4cc35e129222", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUxN2UzMTkyNTU5OTY0NjY1NjRkMDA4NGQ3ZDRjYzM1ZTEyOTIyMg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2017-06-16T21:04:07Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2017-06-16T21:04:07Z"}, "message": "[arm] Make -mfloat-abi=softfp work when there are no\n\n\nBefore this patch series it wasn't really possible to not have an FPU;\nit was always there, even if the hardware didn't really support it.\nNow that we have -mfpu=auto, the concept of not having an FPU becomes\nreal.  Consequently, when the -mfloat-abi switch is set to softfp\ndoing the Right Thing is much more important.  In this case we have a\nsoft-float ABI, but can use FP instructions if they are available.\nTo support this we have to separate out TARGET_HARD_FLOAT into two\nuse cases: one where the instructions exist and one when they don't.\nWe preserve the original meaning of TARGET_HARD_FLOAT (but add an extra\ncheck) of meaning that we are generating HW FP instructions, and add a\nnew macro for the special case when use of FP instructions is permitted,\nbut might not be available at this time (the distinction is important\nbecause they might be enabled by an attribute during the compilation).\nTARGET_SOFT_FLOAT continues to be the exact inverse of TARGET_HARD_FLOAT,\nbut we now define it as such.\n\n\t* config/arm/arm.h (TARGET_HARD_FLOAT): Also check that we\n\thave some floating-point instructions.\n\t(TARGET_SOFT_FLOAT): Define as inverse of TARGET_HARD_FLOAT.\n\t(TARGET_MAYBE_HARD_FLOAT): New macro.\n\t* config/arm/arm-builtins.c (arm_init_builtins): Use\n\tTARGET_MAYBE_HARD_FLOAT.\n\t* config/arm/arm.c (arm_option_override): Use TARGET_HARD_FLOAT_ABI.\n\nFrom-SVN: r249293", "tree": {"sha": "0294b5df4a85924af1c4c5079c26e4fc1baf608d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0294b5df4a85924af1c4c5079c26e4fc1baf608d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e17e319255996466564d0084d7d4cc35e129222", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e17e319255996466564d0084d7d4cc35e129222", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e17e319255996466564d0084d7d4cc35e129222", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e17e319255996466564d0084d7d4cc35e129222/comments", "author": null, "committer": null, "parents": [{"sha": "0b97b8f84a904dff92284e9899f53f9a1dbc177b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b97b8f84a904dff92284e9899f53f9a1dbc177b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b97b8f84a904dff92284e9899f53f9a1dbc177b"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "c7b1bbb4332de044fee6a9804f911fb6b89f12bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e17e319255996466564d0084d7d4cc35e129222/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e17e319255996466564d0084d7d4cc35e129222/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e17e319255996466564d0084d7d4cc35e129222", "patch": "@@ -1,3 +1,13 @@\n+2017-06-16  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/arm.h (TARGET_HARD_FLOAT): Also check that we\n+\thave some floating-point instructions.\n+\t(TARGET_SOFT_FLOAT): Define as inverse of TARGET_HARD_FLOAT.\n+\t(TARGET_MAYBE_HARD_FLOAT): New macro.\n+\t* config/arm/arm-builtins.c (arm_init_builtins): Use\n+\tTARGET_MAYBE_HARD_FLOAT.\n+\t* config/arm/arm.c (arm_option_override): Use TARGET_HARD_FLOAT_ABI.\n+\n 2017-06-16  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* common/config/arm/arm-common.c: Define INCLUDE_LIST."}, {"sha": "8d14e58d916620108f822cbe88a5c377e3535296", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e17e319255996466564d0084d7d4cc35e129222/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e17e319255996466564d0084d7d4cc35e129222/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=2e17e319255996466564d0084d7d4cc35e129222", "patch": "@@ -1876,7 +1876,7 @@ arm_init_builtins (void)\n      arm_init_neon_builtins which uses it.  */\n   arm_init_fp16_builtins ();\n \n-  if (TARGET_HARD_FLOAT)\n+  if (TARGET_MAYBE_HARD_FLOAT)\n     {\n       arm_init_neon_builtins ();\n       arm_init_vfp_builtins ();\n@@ -1885,7 +1885,7 @@ arm_init_builtins (void)\n \n   arm_init_acle_builtins ();\n \n-  if (TARGET_HARD_FLOAT)\n+  if (TARGET_MAYBE_HARD_FLOAT)\n     {\n       tree ftype_set_fpscr\n \t= build_function_type_list (void_type_node, unsigned_type_node, NULL);"}, {"sha": "385792ddc4db9689d375d9a24f53f915ec6d8c7f", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e17e319255996466564d0084d7d4cc35e129222/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e17e319255996466564d0084d7d4cc35e129222/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=2e17e319255996466564d0084d7d4cc35e129222", "patch": "@@ -3449,8 +3449,7 @@ arm_option_override (void)\n     {\n       if (arm_abi == ARM_ABI_IWMMXT)\n \tarm_pcs_default = ARM_PCS_AAPCS_IWMMXT;\n-      else if (arm_float_abi == ARM_FLOAT_ABI_HARD\n-\t       && TARGET_HARD_FLOAT)\n+      else if (TARGET_HARD_FLOAT_ABI)\n \t{\n \t  arm_pcs_default = ARM_PCS_AAPCS_VFP;\n \t  if (!bitmap_bit_p (arm_active_target.isa, isa_bit_VFPv2))"}, {"sha": "92361fc9c30ed358a03fb42c332bd8293431aae1", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e17e319255996466564d0084d7d4cc35e129222/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e17e319255996466564d0084d7d4cc35e129222/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=2e17e319255996466564d0084d7d4cc35e129222", "patch": "@@ -119,9 +119,14 @@ extern tree arm_fp16_type_node;\n #define TARGET_32BIT_P(flags)  (TARGET_ARM_P (flags) || TARGET_THUMB2_P (flags))\n \n /* Run-time Target Specification.  */\n-#define TARGET_SOFT_FLOAT\t\t(arm_float_abi == ARM_FLOAT_ABI_SOFT)\n /* Use hardware floating point instructions. */\n-#define TARGET_HARD_FLOAT\t\t(arm_float_abi != ARM_FLOAT_ABI_SOFT)\n+#define TARGET_HARD_FLOAT\t(arm_float_abi != ARM_FLOAT_ABI_SOFT\t\\\n+\t\t\t\t && bitmap_bit_p (arm_active_target.isa, \\\n+\t\t\t\t\t\t  isa_bit_VFPv2))\n+#define TARGET_SOFT_FLOAT\t(!TARGET_HARD_FLOAT)\n+/* User has permitted use of FP instructions, if they exist for this\n+   target.  */\n+#define TARGET_MAYBE_HARD_FLOAT (arm_float_abi != ARM_FLOAT_ABI_SOFT)\n /* Use hardware floating point calling convention.  */\n #define TARGET_HARD_FLOAT_ABI\t\t(arm_float_abi == ARM_FLOAT_ABI_HARD)\n #define TARGET_IWMMXT\t\t\t(arm_arch_iwmmxt)"}]}