{"sha": "345137c78a04d79092b6c8633dd11470f30e7267", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ1MTM3Yzc4YTA0ZDc5MDkyYjZjODYzM2RkMTE0NzBmMzBlNzI2Nw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "1999-02-25T12:36:03Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "1999-02-25T12:36:03Z"}, "message": "parse.y (read_import_dir): Use `|=', not `+=', to set `found'.\n\n\t* parse.y (read_import_dir): Use `|=', not `+=', to set `found'.\n\tWhen reading a zip file, only use strncmp if both strings are\n\tbigger than the buffer length.  Initialize `k' when looping\n\tthrough zip file.\n\nFrom-SVN: r25439", "tree": {"sha": "903aff72bf90ad6a6e70ecc46ea0eda23be1817a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/903aff72bf90ad6a6e70ecc46ea0eda23be1817a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/345137c78a04d79092b6c8633dd11470f30e7267", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/345137c78a04d79092b6c8633dd11470f30e7267", "html_url": "https://github.com/Rust-GCC/gccrs/commit/345137c78a04d79092b6c8633dd11470f30e7267", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/345137c78a04d79092b6c8633dd11470f30e7267/comments", "author": null, "committer": null, "parents": [{"sha": "a015305167fc1b3f303363003584e2bdb9ef2073", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a015305167fc1b3f303363003584e2bdb9ef2073", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a015305167fc1b3f303363003584e2bdb9ef2073"}], "stats": {"total": 37, "additions": 23, "deletions": 14}, "files": [{"sha": "32486e3076d3e06c47744a4dc99abfca629fde0c", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/345137c78a04d79092b6c8633dd11470f30e7267/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/345137c78a04d79092b6c8633dd11470f30e7267/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=345137c78a04d79092b6c8633dd11470f30e7267", "patch": "@@ -1,3 +1,10 @@\n+1999-02-25  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* parse.y (read_import_dir): Use `|=', not `+=', to set `found'.\n+\tWhen reading a zip file, only use strncmp if both strings are\n+\tbigger than the buffer length.  Initialize `k' when looping\n+\tthrough zip file.\n+\n 1999-02-24  Tom Tromey  <tromey@cygnus.com>\n \n \t* gjavah.c (struct namelet): New structure."}, {"sha": "49b84f0e02c6a4daa4a31d0ba818e40e9f227a9d", "filename": "gcc/java/parse.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/345137c78a04d79092b6c8633dd11470f30e7267/gcc%2Fjava%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/345137c78a04d79092b6c8633dd11470f30e7267/gcc%2Fjava%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.c?ref=345137c78a04d79092b6c8633dd11470f30e7267", "patch": "@@ -2217,7 +2217,7 @@ static const short yycheck[] = {     3,\n #define YYPURE 1\n \n /* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */\n-#line 3 \"/usr/share/bison.simple\"\n+#line 3 \"/usr/share/misc/bison.simple\"\n \n /* Skeleton output parser for bison,\n    Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.\n@@ -2234,7 +2234,7 @@ static const short yycheck[] = {     3,\n \n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n-   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n /* As a special exception, when this file is copied by Bison into a\n    Bison output file, you may use that output file without restriction.\n@@ -2410,7 +2410,7 @@ __yy_memcpy (char *to, char *from, int count)\n #endif\n #endif\n \f\n-#line 196 \"/usr/share/bison.simple\"\n+#line 196 \"/usr/share/misc/bison.simple\"\n \n /* The user can define YYPARSE_PARAM as the name of an argument to be passed\n    into yyparse.  The argument should have type void *.\n@@ -4675,7 +4675,7 @@ case 493:\n     break;}\n }\n    /* the action file gets copied in in place of this dollarsign */\n-#line 498 \"/usr/share/bison.simple\"\n+#line 498 \"/usr/share/misc/bison.simple\"\n \f\n   yyvsp -= yylen;\n   yyssp -= yylen;\n@@ -7620,15 +7620,16 @@ read_import_dir (wfl)\n \t\t}\n \t      *filename->ptr++ = '/';\n \n-\t      for (; k < zipf->count;  k++, zipd = ZIPDIR_NEXT (zipd))\n+\t      for (k = 0; k < zipf->count;  k++, zipd = ZIPDIR_NEXT (zipd))\n \t\t{\n \t\t  char *current_entry = ZIPDIR_FILENAME (zipd);\n \t\t  int current_entry_len = zipd->filename_length;\n \n-\t\t  if (strncmp (filename->data, current_entry, \n-\t\t\t       BUFFER_LENGTH (filename)) != 0)\n+\t\t  if (current_entry_len >= BUFFER_LENGTH (filename)\n+\t\t      && strncmp (filename->data, current_entry, \n+\t\t\t\t  BUFFER_LENGTH (filename)) != 0)\n \t\t    continue;\n-\t\t  found += note_possible_classname (current_entry,\n+\t\t  found |= note_possible_classname (current_entry,\n \t\t\t\t\t\t    current_entry_len);\n \t\t}\n \t    }\n@@ -7661,7 +7662,7 @@ read_import_dir (wfl)\n \t      len = strlen (direntp->d_name);\n \t      buffer_grow (filename, len+1);\n \t      strcpy (filename->ptr, d_name);\n-\t      found += note_possible_classname (filename->data + entry_length,\n+\t      found |= note_possible_classname (filename->data + entry_length,\n \t\t\t\t\t\tpackage_length+len+1);\n \t    }\n \t  if (dirp)"}, {"sha": "504d1dc93aeadea9e036fe9fa5ba7344b49efb5e", "filename": "gcc/java/parse.y", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/345137c78a04d79092b6c8633dd11470f30e7267/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/345137c78a04d79092b6c8633dd11470f30e7267/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=345137c78a04d79092b6c8633dd11470f30e7267", "patch": "@@ -5018,15 +5018,16 @@ read_import_dir (wfl)\n \t\t}\n \t      *filename->ptr++ = '/';\n \n-\t      for (; k < zipf->count;  k++, zipd = ZIPDIR_NEXT (zipd))\n+\t      for (k = 0; k < zipf->count;  k++, zipd = ZIPDIR_NEXT (zipd))\n \t\t{\n \t\t  char *current_entry = ZIPDIR_FILENAME (zipd);\n \t\t  int current_entry_len = zipd->filename_length;\n \n-\t\t  if (strncmp (filename->data, current_entry, \n-\t\t\t       BUFFER_LENGTH (filename)) != 0)\n+\t\t  if (current_entry_len >= BUFFER_LENGTH (filename)\n+\t\t      && strncmp (filename->data, current_entry, \n+\t\t\t\t  BUFFER_LENGTH (filename)) != 0)\n \t\t    continue;\n-\t\t  found += note_possible_classname (current_entry,\n+\t\t  found |= note_possible_classname (current_entry,\n \t\t\t\t\t\t    current_entry_len);\n \t\t}\n \t    }\n@@ -5059,7 +5060,7 @@ read_import_dir (wfl)\n \t      len = strlen (direntp->d_name);\n \t      buffer_grow (filename, len+1);\n \t      strcpy (filename->ptr, d_name);\n-\t      found += note_possible_classname (filename->data + entry_length,\n+\t      found |= note_possible_classname (filename->data + entry_length,\n \t\t\t\t\t\tpackage_length+len+1);\n \t    }\n \t  if (dirp)"}]}