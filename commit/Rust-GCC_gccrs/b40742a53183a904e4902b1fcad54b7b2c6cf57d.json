{"sha": "b40742a53183a904e4902b1fcad54b7b2c6cf57d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQwNzQyYTUzMTgzYTkwNGU0OTAyYjFmY2FkNTRiN2IyYzZjZjU3ZA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2004-06-09T12:48:21Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2004-06-09T12:48:21Z"}, "message": "re PR rtl-optimization/15521 (sched1 extends life of hard registers on SMALL_REGISTER_CLASSES targets when exceptions are enabled)\n\n\tPR rtl-optimization/15521:\n\t* sched-int.h (in_post_call_group_p): Change type to enum.\n\t* sched-deps.c (sched_analyze_insn):\n\t(sched_analyze): When in_post_call_group_p is post_call_initial,\n\tdon't add a dependency, but still set SCHED_GROUP_P and CANT_MOVE,\n\tand also reset in_post_call_group_p to post_call.\n\t(sched_analyze): When the previous basic block ended in a CALL_INSN,\n\tinitialize in_post_call_group_p as post_call_initial.\n\t(init_deps): initialize in_post_call_group_p to not_post_call.\n\nFrom-SVN: r82831", "tree": {"sha": "2af6aebeeaeb59c31134109dad45632bf8b1a8a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2af6aebeeaeb59c31134109dad45632bf8b1a8a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b40742a53183a904e4902b1fcad54b7b2c6cf57d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b40742a53183a904e4902b1fcad54b7b2c6cf57d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b40742a53183a904e4902b1fcad54b7b2c6cf57d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b40742a53183a904e4902b1fcad54b7b2c6cf57d/comments", "author": null, "committer": null, "parents": [{"sha": "a4ac5dd3ef232d1b4b820960fef7f787525b8009", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4ac5dd3ef232d1b4b820960fef7f787525b8009", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4ac5dd3ef232d1b4b820960fef7f787525b8009"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "55d2914e97a7aa3f211ea352badd9804b41a242b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b40742a53183a904e4902b1fcad54b7b2c6cf57d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b40742a53183a904e4902b1fcad54b7b2c6cf57d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b40742a53183a904e4902b1fcad54b7b2c6cf57d", "patch": "@@ -1,3 +1,15 @@\n+2004-06-09  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\tPR rtl-optimization/15521:\n+\t* sched-int.h (in_post_call_group_p): Change type to enum.\n+\t* sched-deps.c (sched_analyze_insn):\n+\t(sched_analyze): When in_post_call_group_p is post_call_initial,\n+\tdon't add a dependency, but still set SCHED_GROUP_P and CANT_MOVE,\n+\tand also reset in_post_call_group_p to post_call.\n+\t(sched_analyze): When the previous basic block ended in a CALL_INSN,\n+\tinitialize in_post_call_group_p as post_call_initial.\n+\t(init_deps): initialize in_post_call_group_p to not_post_call.\n+\t\n 2004-06-09  Arnaud Charlet  <charlet@act-europe.fr>\n \n \tPR ada/6637"}, {"sha": "c1c4ece2e8e798ae9248b8e9a71c22f7487a408b", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b40742a53183a904e4902b1fcad54b7b2c6cf57d/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b40742a53183a904e4902b1fcad54b7b2c6cf57d/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=b40742a53183a904e4902b1fcad54b7b2c6cf57d", "patch": "@@ -1145,13 +1145,21 @@ sched_analyze_insn (struct deps *deps, rtx x, rtx insn, rtx loop_notes)\n       if (src_regno < FIRST_PSEUDO_REGISTER\n \t  || dest_regno < FIRST_PSEUDO_REGISTER)\n \t{\n-\t  set_sched_group_p (insn);\n+\t  /* If we are inside a post-call group right at the start of the\n+\t     scheduling region, we must not add a dependency.  */\n+\t  if (deps->in_post_call_group_p == post_call_initial)\n+\t    {\n+\t      SCHED_GROUP_P (insn) = 1;\n+\t      deps->in_post_call_group_p = post_call;\n+\t    }\n+\t  else\n+\t    set_sched_group_p (insn);\n \t  CANT_MOVE (insn) = 1;\n \t}\n       else\n \t{\n \tend_call_group:\n-\t  deps->in_post_call_group_p = false;\n+\t  deps->in_post_call_group_p = not_post_call;\n \t}\n     }\n }\n@@ -1168,6 +1176,15 @@ sched_analyze (struct deps *deps, rtx head, rtx tail)\n   if (current_sched_info->use_cselib)\n     cselib_init (true);\n \n+  /* Before reload, if the previous block ended in a call, show that\n+     we are inside a post-call group, so as to keep the lifetimes of\n+     hard registers correct.  */\n+  if (! reload_completed && GET_CODE (head) != CODE_LABEL)\n+    {\n+      insn = prev_nonnote_insn (head);\n+      if (insn && GET_CODE (insn) == CALL_INSN)\n+\tdeps->in_post_call_group_p = post_call_initial;\n+    }\n   for (insn = head;; insn = NEXT_INSN (insn))\n     {\n       rtx link, end_seq, r0, set;\n@@ -1259,7 +1276,7 @@ sched_analyze (struct deps *deps, rtx head, rtx tail)\n \t  /* Before reload, begin a post-call group, so as to keep the\n \t     lifetimes of hard registers correct.  */\n \t  if (! reload_completed)\n-\t    deps->in_post_call_group_p = true;\n+\t    deps->in_post_call_group_p = post_call;\n \t}\n \n       /* See comments on reemit_notes as to why we do this.\n@@ -1420,7 +1437,7 @@ init_deps (struct deps *deps)\n   deps->last_pending_memory_flush = 0;\n   deps->last_function_call = 0;\n   deps->sched_before_next_call = 0;\n-  deps->in_post_call_group_p = false;\n+  deps->in_post_call_group_p = not_post_call;\n   deps->libcall_block_tail_insn = 0;\n }\n "}, {"sha": "383a29d3e3a24be13ffae24e7b5b203afb29d7b9", "filename": "gcc/sched-int.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b40742a53183a904e4902b1fcad54b7b2c6cf57d/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b40742a53183a904e4902b1fcad54b7b2c6cf57d/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=b40742a53183a904e4902b1fcad54b7b2c6cf57d", "patch": "@@ -94,7 +94,7 @@ struct deps\n \n   /* Used to keep post-call pseudo/hard reg movements together with\n      the call.  */\n-  bool in_post_call_group_p;\n+  enum { not_post_call, post_call, post_call_initial } in_post_call_group_p;\n \n   /* Set to the tail insn of the outermost libcall block.\n "}]}