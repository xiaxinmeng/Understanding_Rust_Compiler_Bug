{"sha": "94e098d11228f5c3caade657a9f8254336494fb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRlMDk4ZDExMjI4ZjVjM2NhYWRlNjU3YTlmODI1NDMzNjQ5NGZiNg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1998-11-18T17:58:33Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-11-18T17:58:33Z"}, "message": "cp-tree.h (PTRMEM_CST_CLASS): Fix typo.\n\n\t* cp-tree.h (PTRMEM_CST_CLASS): Fix typo.\n\t(global_delete_fndecl): New variable.\n\t* decl.c (global_delete_fndecl): Define it.\n\t(init_decl_processing): Set it.\n\t* init.c (build_builtin_delete_call): Use it.\n\t* tree.c (mapcar): Recursively call mapcar for the type of EXPR\n\tnodes.\n\nFrom-SVN: r23699", "tree": {"sha": "7d6c738147d9114ea0021ad92cfd6edbfef6f4db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d6c738147d9114ea0021ad92cfd6edbfef6f4db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94e098d11228f5c3caade657a9f8254336494fb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94e098d11228f5c3caade657a9f8254336494fb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94e098d11228f5c3caade657a9f8254336494fb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94e098d11228f5c3caade657a9f8254336494fb6/comments", "author": null, "committer": null, "parents": [{"sha": "ef18065c0ad435acad2bb2562d53a3d5db6c731f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef18065c0ad435acad2bb2562d53a3d5db6c731f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef18065c0ad435acad2bb2562d53a3d5db6c731f"}], "stats": {"total": 74, "additions": 65, "deletions": 9}, "files": [{"sha": "5f56a0333dbce1a9d64bb20dccd416cdd4cf875b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94e098d11228f5c3caade657a9f8254336494fb6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94e098d11228f5c3caade657a9f8254336494fb6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=94e098d11228f5c3caade657a9f8254336494fb6", "patch": "@@ -1,3 +1,13 @@\n+1998-11-18  Mark Mitchell  <mark@markmitchell.com>\n+\n+\t* cp-tree.h (PTRMEM_CST_CLASS): Fix typo.\n+\t(global_delete_fndecl): New variable.\n+\t* decl.c (global_delete_fndecl): Define it.\n+\t(init_decl_processing): Set it.\n+\t* init.c (build_builtin_delete_call): Use it.\n+\t* tree.c (mapcar): Recursively call mapcar for the type of EXPR\n+\tnodes.\n+\n 1998-11-18  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl.c (cplus_expand_expr_stmt): Always complain about unresolved"}, {"sha": "340d9925d4d9ecd86004b22e883543007b2cb488", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94e098d11228f5c3caade657a9f8254336494fb6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94e098d11228f5c3caade657a9f8254336494fb6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=94e098d11228f5c3caade657a9f8254336494fb6", "patch": "@@ -1623,9 +1623,9 @@ extern int flag_new_for_scope;\n \n /* For a pointer-to-member constant `X::Y' this is the RECORD_TYPE for\n    `X'.  */\n-#define PTRMEM_CST_CLASS(NODE)\t\t\t\t\\\n-   (TYPE_PTRMEM_P (TREE_TYPE (NODE)) \t\t\t\\\n-    ? TYPE_OFFSET_BASETYPE (TREE_TYPE (NODE))\t\t\\\n+#define PTRMEM_CST_CLASS(NODE)\t\t\t\t  \\\n+   (TYPE_PTRMEM_P (TREE_TYPE (NODE)) \t\t\t  \\\n+    ? TYPE_OFFSET_BASETYPE (TREE_TYPE (TREE_TYPE (NODE))) \\\n     : TYPE_PTRMEMFUNC_OBJECT_TYPE (TREE_TYPE (NODE)))\n \n /* For a pointer-to-member constant `X::Y' this is the _DECL for \n@@ -2060,6 +2060,10 @@ extern tree null_node;\n \n extern tree anonymous_namespace_name;\n \n+/* The FUNCTION_DECL for the default `::operator delete'.  */\n+\n+extern tree global_delete_fndecl;\n+\n /* in pt.c  */\n \n /* These values are used for the `STRICT' parameter to type_unfication and"}, {"sha": "8980c110c3ed1a46644642a1471d212b431661c4", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94e098d11228f5c3caade657a9f8254336494fb6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94e098d11228f5c3caade657a9f8254336494fb6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=94e098d11228f5c3caade657a9f8254336494fb6", "patch": "@@ -374,6 +374,10 @@ tree ctor_label;\n \n tree abort_fndecl;\n \n+/* A FUNCTION_DECL for the default `::operator delete'.  */\n+\n+tree global_delete_fndecl;\n+\n extern rtx cleanup_label, return_label;\n \n /* If original DECL_RESULT of current function was a register,\n@@ -6325,7 +6329,8 @@ init_decl_processing ()\n       (void_ftype_ptr, build_tree_list (NULL_TREE, NULL_TREE));\n     auto_function (ansi_opname[(int) NEW_EXPR], newtype, NOT_BUILT_IN);\n     auto_function (ansi_opname[(int) VEC_NEW_EXPR], newtype, NOT_BUILT_IN);\n-    auto_function (ansi_opname[(int) DELETE_EXPR], deltype, NOT_BUILT_IN);\n+    global_delete_fndecl\n+      = auto_function (ansi_opname[(int) DELETE_EXPR], deltype, NOT_BUILT_IN);\n     auto_function (ansi_opname[(int) VEC_DELETE_EXPR], deltype, NOT_BUILT_IN);\n   }\n "}, {"sha": "76271b77271d5af06102ec18da19a7d307656de6", "filename": "gcc/cp/init.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94e098d11228f5c3caade657a9f8254336494fb6/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94e098d11228f5c3caade657a9f8254336494fb6/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=94e098d11228f5c3caade657a9f8254336494fb6", "patch": "@@ -1862,11 +1862,9 @@ static tree\n build_builtin_delete_call (addr)\n      tree addr;\n {\n-  tree BID = get_first_fn\n-    (IDENTIFIER_GLOBAL_VALUE (ansi_opname[(int) DELETE_EXPR]));\n-\n-  assemble_external (BID);\n-  return build_call (BID, void_type_node, build_expr_list (NULL_TREE, addr));\n+  assemble_external (global_delete_fndecl);\n+  return build_call (global_delete_fndecl, \n+\t\t     void_type_node, build_expr_list (NULL_TREE, addr));\n }\n \f\n /* Generate a C++ \"new\" expression. DECL is either a TREE_LIST"}, {"sha": "a94d9f7db9f72e4fff6f4d6a8a3bc03f4dd7c296", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94e098d11228f5c3caade657a9f8254336494fb6/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94e098d11228f5c3caade657a9f8254336494fb6/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=94e098d11228f5c3caade657a9f8254336494fb6", "patch": "@@ -1935,6 +1935,7 @@ mapcar (t, func)\n     case COMPONENT_REF:\n     case CLEANUP_POINT_EXPR:\n       t = copy_node (t);\n+      TREE_TYPE (t) = mapcar (TREE_TYPE (t), func);\n       TREE_OPERAND (t, 0) = mapcar (TREE_OPERAND (t, 0), func);\n       return t;\n "}, {"sha": "eb56350371b280954298cfe52b4dc3da56b69abc", "filename": "gcc/testsuite/g++.old-deja/g++.other/delete3.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94e098d11228f5c3caade657a9f8254336494fb6/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94e098d11228f5c3caade657a9f8254336494fb6/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete3.C?ref=94e098d11228f5c3caade657a9f8254336494fb6", "patch": "@@ -0,0 +1,38 @@\n+#include <new>\n+\n+int i;\n+\n+extern \"C\" void printf(const char*, ...);\n+\n+template <class T, class U> \n+struct map {\n+  ~map ();\n+};\n+\n+template <class T, class U>\n+map<T, U>::~map ()\n+{}\n+\n+struct SomeClass { };\n+\n+void* operator new(size_t numBytes, SomeClass&, const nothrow_t&) throw()\n+{\n+  return operator new(numBytes, nothrow);\n+}\n+\n+void operator delete(void* pMemory, SomeClass&, const nothrow_t&) throw()\n+{\n+  i = 7;\n+  return operator delete(pMemory);\n+}\n+\n+int\n+main()\n+{\n+  map< int, int>* pMap = new map< int, int>;\n+  \n+  delete pMap;\n+  \n+  if (i == 7)\n+    return 1;\n+}"}]}