{"sha": "4d3cea21c7753c244069178c956b5fa8bec73bc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQzY2VhMjFjNzc1M2MyNDQwNjkxNzhjOTU2YjVmYThiZWM3M2JjNg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-21T16:34:59Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-21T16:34:59Z"}, "message": "* pa.c (emit_move_sequence): Handle secondary reloads for SAR.\n\nFrom-SVN: r3298", "tree": {"sha": "9daab165f9d14ae48d49f07bdca7efe8c10c7c4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9daab165f9d14ae48d49f07bdca7efe8c10c7c4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d3cea21c7753c244069178c956b5fa8bec73bc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d3cea21c7753c244069178c956b5fa8bec73bc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d3cea21c7753c244069178c956b5fa8bec73bc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d3cea21c7753c244069178c956b5fa8bec73bc6/comments", "author": null, "committer": null, "parents": [{"sha": "5a6cbc3795e29d2056db40339460ef7915daed1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a6cbc3795e29d2056db40339460ef7915daed1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a6cbc3795e29d2056db40339460ef7915daed1b"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "98848f34d8a36627f54d580ef9b07078a1be6634", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d3cea21c7753c244069178c956b5fa8bec73bc6/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d3cea21c7753c244069178c956b5fa8bec73bc6/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=4d3cea21c7753c244069178c956b5fa8bec73bc6", "patch": "@@ -528,6 +528,8 @@ emit_move_sequence (operands, mode, scratch_reg)\n   register rtx operand0 = operands[0];\n   register rtx operand1 = operands[1];\n \n+  /* Handle secondary reloads for loads/stores of FP registers from\n+     REG+D addresses where D does not fit in 5 bits.  */\n   if (fp_reg_operand (operand0, mode)\n       && GET_CODE (operand1) == MEM\n       && !short_memory_operand  (operand1, mode)\n@@ -548,6 +550,19 @@ emit_move_sequence (operands, mode, scratch_reg)\n \t\t\t  operand1));\n       return 1;\n     }\n+  /* Handle secondary reloads for SAR.  These occur when trying to load\n+     the SAR from memory or from a FP register.  */\n+  else if (GET_CODE (operand0) == REG\n+\t   && REGNO_REG_CLASS (REGNO (operand0)) == SHIFT_REGS\n+\t   && (GET_CODE (operand1) == MEM\n+\t       || (GET_CODE (operand1) == REG\n+\t\t   && FP_REG_CLASS_P (REGNO_REG_CLASS (REGNO (operand1)))))\n+\t   && scratch_reg)\n+    {\n+      emit_move_insn (scratch_reg, operand1);\n+      emit_move_insn (operand0, scratch_reg);\n+      return 1;\n+    }\n   /* Handle most common case: storing into a register.  */\n   else if (register_operand (operand0, mode))\n     {"}]}