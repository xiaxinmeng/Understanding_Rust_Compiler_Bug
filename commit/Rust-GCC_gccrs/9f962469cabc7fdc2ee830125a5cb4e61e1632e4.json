{"sha": "9f962469cabc7fdc2ee830125a5cb4e61e1632e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY5NjI0NjljYWJjN2ZkYzJlZTgzMDEyNWE1Y2I0ZTYxZTE2MzJlNA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2019-06-26T19:12:27Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-06-26T19:12:27Z"}, "message": "re PR target/89021 (Implement mmintrin.h in SSE)\n\n\tPR target/89021\n\t* config/i386/i386.c (ix86_autovectorize_vector_sizes):\n\tAutovectorize 8-byte vectors for TARGET_MMX_WITH_SSE.\n\ntestsuite/ChangeLog:\n\n\tPR target/89021\n\t* lib/target-supports.exp (available_vector_sizes)\n\t<[istarget i?86-*-*] || [istarget x86_64-*-*]>: Add\n\t64-bit vectors for !ia32.\n\nFrom-SVN: r272711", "tree": {"sha": "f9e5afb71b48f830418d4cd8a2f6f1475f769cae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9e5afb71b48f830418d4cd8a2f6f1475f769cae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f962469cabc7fdc2ee830125a5cb4e61e1632e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f962469cabc7fdc2ee830125a5cb4e61e1632e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f962469cabc7fdc2ee830125a5cb4e61e1632e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f962469cabc7fdc2ee830125a5cb4e61e1632e4/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9ff33839fc46e2d3f5ff36870e8000f2f15846e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ff33839fc46e2d3f5ff36870e8000f2f15846e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ff33839fc46e2d3f5ff36870e8000f2f15846e9"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "a27a189670b76235b9f3f624cfa956529751bcef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f962469cabc7fdc2ee830125a5cb4e61e1632e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f962469cabc7fdc2ee830125a5cb4e61e1632e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f962469cabc7fdc2ee830125a5cb4e61e1632e4", "patch": "@@ -1,3 +1,9 @@\n+2019-06-26  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/89021\n+\t* config/i386/i386.c (ix86_autovectorize_vector_sizes):\n+\tAutovectorize 8-byte vectors for TARGET_MMX_WITH_SSE.\n+\n 2019-06-26  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config/rs6000/rs6000-internal.h (branch_island): New typedef."}, {"sha": "7d6280b6da1c788e6ffece1bce93a2b81a3107b7", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f962469cabc7fdc2ee830125a5cb4e61e1632e4/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f962469cabc7fdc2ee830125a5cb4e61e1632e4/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9f962469cabc7fdc2ee830125a5cb4e61e1632e4", "patch": "@@ -21401,6 +21401,11 @@ ix86_autovectorize_vector_sizes (vector_sizes *sizes, bool all)\n       sizes->safe_push (16);\n       sizes->safe_push (32);\n     }\n+  else if (TARGET_MMX_WITH_SSE)\n+    sizes->safe_push (16);\n+\n+  if (TARGET_MMX_WITH_SSE)\n+    sizes->safe_push (8);\n }\n \n /* Implemenation of targetm.vectorize.get_mask_mode.  */"}, {"sha": "e9fade55b671c961af5d7811922fabaa0c994389", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f962469cabc7fdc2ee830125a5cb4e61e1632e4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f962469cabc7fdc2ee830125a5cb4e61e1632e4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9f962469cabc7fdc2ee830125a5cb4e61e1632e4", "patch": "@@ -1,3 +1,10 @@\n+2019-06-26  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/89021\n+\t* lib/target-supports.exp (available_vector_sizes)\n+\t<[istarget i?86-*-*] || [istarget x86_64-*-*]>: Add\n+\t64-bit vectors for !ia32.\n+\n 2019-06-26  Jeff Law  <law@redhat.com>\n \n \t* gcc.c-torture/execute/builtins/builtins.exp: Add -fno-tree-dse"}, {"sha": "285c32f8cebb115a72e353673e0f8879314a53b5", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f962469cabc7fdc2ee830125a5cb4e61e1632e4/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f962469cabc7fdc2ee830125a5cb4e61e1632e4/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=9f962469cabc7fdc2ee830125a5cb4e61e1632e4", "patch": "@@ -6603,9 +6603,14 @@ proc available_vector_sizes { } {\n     } elseif { [istarget arm*-*-*]\n \t\t&& [check_effective_target_arm_neon_ok] } {\n \tlappend result 128 64\n-    } elseif { (([istarget i?86-*-*] || [istarget x86_64-*-*])\n-\t\t && ([check_avx_available] && ![check_prefer_avx128])) } {\n-\tlappend result 256 128\n+    } elseif { [istarget i?86-*-*] || [istarget x86_64-*-*] } {\n+\tif { [check_avx_available] && ![check_prefer_avx128] } {\n+\t    lappend result 256\n+\t}\n+\tlappend result 128\n+\tif { ![is-effective-target ia32] } {\n+\t    lappend result 64\n+\t}\n     } elseif { [istarget sparc*-*-*] } {\n \tlappend result 64\n     } else {"}]}