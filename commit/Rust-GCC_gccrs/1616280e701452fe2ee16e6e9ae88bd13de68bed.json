{"sha": "1616280e701452fe2ee16e6e9ae88bd13de68bed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYxNjI4MGU3MDE0NTJmZTJlZTE2ZTZlOWFlODhiZDEzZGU2OGJlZA==", "commit": {"author": {"name": "Anthony Green", "email": "green@redhat.com", "date": "2004-06-17T13:53:11Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2004-06-17T13:53:11Z"}, "message": "ZipFile.getInputStream returns null if entry not found.\n\nFrom-SVN: r83293", "tree": {"sha": "515152a9de25a8f25f7eb4063674565497511b6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/515152a9de25a8f25f7eb4063674565497511b6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1616280e701452fe2ee16e6e9ae88bd13de68bed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1616280e701452fe2ee16e6e9ae88bd13de68bed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1616280e701452fe2ee16e6e9ae88bd13de68bed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1616280e701452fe2ee16e6e9ae88bd13de68bed/comments", "author": {"login": "atgreen", "id": 89993, "node_id": "MDQ6VXNlcjg5OTkz", "avatar_url": "https://avatars.githubusercontent.com/u/89993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atgreen", "html_url": "https://github.com/atgreen", "followers_url": "https://api.github.com/users/atgreen/followers", "following_url": "https://api.github.com/users/atgreen/following{/other_user}", "gists_url": "https://api.github.com/users/atgreen/gists{/gist_id}", "starred_url": "https://api.github.com/users/atgreen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atgreen/subscriptions", "organizations_url": "https://api.github.com/users/atgreen/orgs", "repos_url": "https://api.github.com/users/atgreen/repos", "events_url": "https://api.github.com/users/atgreen/events{/privacy}", "received_events_url": "https://api.github.com/users/atgreen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cfb6b4b8c3c01be5a1d43695c9d2988838f2254a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfb6b4b8c3c01be5a1d43695c9d2988838f2254a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfb6b4b8c3c01be5a1d43695c9d2988838f2254a"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "8c9abb7e12722d109d22dbe7a06ef3a18433ed91", "filename": "libjava/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1616280e701452fe2ee16e6e9ae88bd13de68bed/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1616280e701452fe2ee16e6e9ae88bd13de68bed/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=1616280e701452fe2ee16e6e9ae88bd13de68bed", "patch": "@@ -1,5 +1,8 @@\n 2004-06-17  Anthony Green  <green@redhat.com>\n \n+\t* java/util/zip/ZipFile.java (getInputStream): Return null if\n+\tentry not found.\n+\n \t* gnu/gcj/runtime/VMClassLoader.java (init): Add extension\n \tdirectory contents to the class path.\n "}, {"sha": "25b5785432a29f538a5533860d98e46a7a6d64c5", "filename": "libjava/java/util/zip/ZipFile.java", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1616280e701452fe2ee16e6e9ae88bd13de68bed/libjava%2Fjava%2Futil%2Fzip%2FZipFile.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1616280e701452fe2ee16e6e9ae88bd13de68bed/libjava%2Fjava%2Futil%2Fzip%2FZipFile.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FZipFile.java?ref=1616280e701452fe2ee16e6e9ae88bd13de68bed", "patch": "@@ -408,8 +408,18 @@ private long checkLocalHeader(ZipEntry entry) throws IOException\n    * uncompressed data.  Normally zip entry should be an entry\n    * returned by getEntry() or entries().\n    *\n+   * This implementation returns null if the requested entry does not\n+   * exist.  This decision is not obviously correct, however, it does\n+   * appear to mirror Sun's implementation, and it is consistant with\n+   * their javadoc.  On the other hand, the old JCL book, 2nd Edition,\n+   * claims that this should return a \"non-null ZIP entry\".  We have\n+   * chosen for now ignore the old book, as modern versions of Ant (an\n+   * important application) depend on this behaviour.  See discussion\n+   * in this thread:\n+   * http://gcc.gnu.org/ml/java-patches/2004-q2/msg00602.html\n+   *\n    * @param entry the entry to create an InputStream for.\n-   * @return the input stream.\n+   * @return the input stream, or null if the requested entry does not exist.\n    *\n    * @exception IOException if a i/o error occured.\n    * @exception ZipException if the Zip archive is malformed.  \n@@ -420,7 +430,7 @@ public InputStream getInputStream(ZipEntry entry) throws IOException\n     String name = entry.getName();\n     ZipEntry zipEntry = (ZipEntry) entries.get(name);\n     if (zipEntry == null)\n-      throw new NoSuchElementException(name);\n+      return null;\n \n     long start = checkLocalHeader(zipEntry);\n     int method = zipEntry.getMethod();"}]}