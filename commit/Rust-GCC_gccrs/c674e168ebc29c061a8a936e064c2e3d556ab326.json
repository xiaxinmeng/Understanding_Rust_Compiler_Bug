{"sha": "c674e168ebc29c061a8a936e064c2e3d556ab326", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY3NGUxNjhlYmMyOWMwNjFhOGE5MzZlMDY0YzJlM2Q1NTZhYjMyNg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-17T16:41:01Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-17T16:41:01Z"}, "message": "Add object safety checks for dynamic objects\n\nYou cannot create dynamic objects that contain non object safe trait items.\nThis adds checks to ensure that all items are object safe so code\ngeneration does not need to care.\n\nsee: https://doc.rust-lang.org/reference/items/traits.html#object-safety\n\nAddresses: #197", "tree": {"sha": "0cbce4d44d5069009fad649da7eb9be83dd07699", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cbce4d44d5069009fad649da7eb9be83dd07699"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c674e168ebc29c061a8a936e064c2e3d556ab326", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c674e168ebc29c061a8a936e064c2e3d556ab326", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c674e168ebc29c061a8a936e064c2e3d556ab326", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c674e168ebc29c061a8a936e064c2e3d556ab326/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa019b251e9900e81e8b3ec258a4f1f340a91296", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa019b251e9900e81e8b3ec258a4f1f340a91296", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa019b251e9900e81e8b3ec258a4f1f340a91296"}], "stats": {"total": 145, "additions": 137, "deletions": 8}, "files": [{"sha": "8cd7a01b2e8d386ff23281bd278a4e137786e0ff", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c674e168ebc29c061a8a936e064c2e3d556ab326/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c674e168ebc29c061a8a936e064c2e3d556ab326/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=c674e168ebc29c061a8a936e064c2e3d556ab326", "patch": "@@ -2264,6 +2264,8 @@ class TraitItemFunc : public TraitItem\n \n   TraitFunctionDecl &get_decl () { return decl; }\n \n+  const TraitFunctionDecl &get_decl () const { return decl; }\n+\n   bool has_block_defined () const { return block_expr != nullptr; }\n \n   std::unique_ptr<BlockExpr> &get_block_expr ()"}, {"sha": "2b5b78c4a3fc39479c274affcdc612e373e86cf4", "filename": "gcc/rust/typecheck/rust-hir-trait-ref.h", "status": "modified", "additions": 46, "deletions": 3, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c674e168ebc29c061a8a936e064c2e3d556ab326/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c674e168ebc29c061a8a936e064c2e3d556ab326/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-ref.h?ref=c674e168ebc29c061a8a936e064c2e3d556ab326", "patch": "@@ -143,6 +143,8 @@ class TraitItemReference\n \n   void associated_type_reset ();\n \n+  bool is_object_safe () const;\n+\n private:\n   TyTy::ErrorType *get_error () const\n   {\n@@ -179,8 +181,10 @@ class TraitReference\n {\n public:\n   TraitReference (const HIR::Trait *hir_trait_ref,\n-\t\t  std::vector<TraitItemReference> item_refs)\n-    : hir_trait_ref (hir_trait_ref), item_refs (item_refs)\n+\t\t  std::vector<TraitItemReference> item_refs,\n+\t\t  std::vector<const TraitReference *> super_traits)\n+    : hir_trait_ref (hir_trait_ref), item_refs (item_refs),\n+      super_traits (super_traits)\n   {}\n \n   TraitReference (TraitReference const &other)\n@@ -198,7 +202,7 @@ class TraitReference\n   TraitReference (TraitReference &&other) = default;\n   TraitReference &operator= (TraitReference &&other) = default;\n \n-  static TraitReference error () { return TraitReference (nullptr, {}); }\n+  static TraitReference error () { return TraitReference (nullptr, {}, {}); }\n \n   bool is_error () const { return hir_trait_ref == nullptr; }\n \n@@ -323,9 +327,48 @@ class TraitReference\n     return this_id == other_id;\n   }\n \n+  const std::vector<const TraitReference *> get_super_traits () const\n+  {\n+    return super_traits;\n+  }\n+\n+  bool is_object_safe (bool emit_error, Location locus) const\n+  {\n+    // https: // doc.rust-lang.org/reference/items/traits.html#object-safety\n+    std::vector<const TraitReference *> non_object_super_traits;\n+    for (auto &item : super_traits)\n+      {\n+\tif (!item->is_object_safe (false, Location ()))\n+\t  non_object_super_traits.push_back (item);\n+      }\n+\n+    std::vector<const Resolver::TraitItemReference *> non_object_safe_items;\n+    for (auto &item : get_trait_items ())\n+      {\n+\tif (!item.is_object_safe ())\n+\t  non_object_safe_items.push_back (&item);\n+      }\n+\n+    bool is_safe\n+      = non_object_super_traits.empty () && non_object_safe_items.empty ();\n+    if (emit_error && !is_safe)\n+      {\n+\tRichLocation r (locus);\n+\tfor (auto &item : non_object_super_traits)\n+\t  r.add_range (item->get_locus ());\n+\tfor (auto &item : non_object_safe_items)\n+\t  r.add_range (item->get_locus ());\n+\n+\trust_error_at (r, \"trait bound is not object safe\");\n+      }\n+\n+    return is_safe;\n+  }\n+\n private:\n   const HIR::Trait *hir_trait_ref;\n   std::vector<TraitItemReference> item_refs;\n+  std::vector<const TraitReference *> super_traits;\n };\n \n class AssociatedImplTrait"}, {"sha": "cee6999acce2d432ea27c7e33430b64df17e6b46", "filename": "gcc/rust/typecheck/rust-hir-trait-resolve.cc", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c674e168ebc29c061a8a936e064c2e3d556ab326/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c674e168ebc29c061a8a936e064c2e3d556ab326/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc?ref=c674e168ebc29c061a8a936e064c2e3d556ab326", "patch": "@@ -193,6 +193,36 @@ TraitItemReference::get_parent_trait_mappings () const\n   return trait->get_mappings ();\n }\n \n+bool\n+TraitItemReference::is_object_safe () const\n+{\n+  // https://doc.rust-lang.org/reference/items/traits.html#object-safety\n+  switch (get_trait_item_type ())\n+    {\n+      case TraitItemReference::TraitItemType::FN: {\n+\t// lets be boring and just check that this is indeed a method will do\n+\t// for now\n+\tconst HIR::TraitItem *item = get_hir_trait_item ();\n+\tconst HIR::TraitItemFunc *fn\n+\t  = static_cast<const HIR::TraitItemFunc *> (item);\n+\treturn fn->get_decl ().is_method ();\n+      }\n+\n+      // constants are not available via dyn dispatch and so is not object safe\n+    case TraitItemReference::TraitItemType::CONST:\n+      return false;\n+\n+      // types are object safe since they are not available via dyn dispatch\n+    case TraitItemReference::TraitItemType::TYPE:\n+      return true;\n+\n+      // this is just an error so lets just fail it\n+    case TraitItemReference::TraitItemType::ERROR:\n+      return false;\n+    }\n+  return false;\n+}\n+\n TyTy::BaseType *\n AssociatedImplTrait::get_projected_type (\n   const TraitItemReference *trait_item_ref, TyTy::BaseType *receiver, HirId ref,"}, {"sha": "a32b4dae7d8268c16607e8f0be613032d2055f39", "filename": "gcc/rust/typecheck/rust-hir-trait-resolve.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c674e168ebc29c061a8a936e064c2e3d556ab326/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c674e168ebc29c061a8a936e064c2e3d556ab326/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h?ref=c674e168ebc29c061a8a936e064c2e3d556ab326", "patch": "@@ -153,6 +153,7 @@ class TraitResolver : public TypeCheckBase\n       TyTy::TypeBoundPredicate (trait_reference->get_mappings ().get_defid (),\n \t\t\t\ttrait_reference->get_locus ()));\n \n+    std::vector<const TraitReference *> super_traits;\n     if (trait_reference->has_type_param_bounds ())\n       {\n \tfor (auto &bound : trait_reference->get_type_param_bounds ())\n@@ -170,6 +171,7 @@ class TraitResolver : public TypeCheckBase\n \t\t  trait->get_mappings ().get_defid (), bound->get_locus ());\n \n \t\tspecified_bounds.push_back (std::move (predicate));\n+\t\tsuper_traits.push_back (predicate.get ());\n \t      }\n \t  }\n       }\n@@ -189,7 +191,8 @@ class TraitResolver : public TypeCheckBase\n \titem_refs.push_back (std::move (trait_item_ref));\n       }\n \n-    TraitReference trait_object (trait_reference, item_refs);\n+    TraitReference trait_object (trait_reference, item_refs,\n+\t\t\t\t std::move (super_traits));\n     context->insert_trait_reference (\n       trait_reference->get_mappings ().get_defid (), std::move (trait_object));\n "}, {"sha": "7ad6d033afa91cd332be47da03823f779e48b406", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c674e168ebc29c061a8a936e064c2e3d556ab326/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c674e168ebc29c061a8a936e064c2e3d556ab326/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc?ref=c674e168ebc29c061a8a936e064c2e3d556ab326", "patch": "@@ -231,10 +231,13 @@ TypeCheckType::visit (HIR::TraitObjectTypeOneBound &type)\n   TyTy::TypeBoundPredicate predicate (trait->get_mappings ().get_defid (),\n \t\t\t\t      trait_bound.get_locus ());\n \n-  specified_bounds.push_back (std::move (predicate));\n-\n-  translated = new TyTy::DynamicObjectType (type.get_mappings ().get_hirid (),\n-\t\t\t\t\t    std::move (specified_bounds));\n+  if (predicate.is_object_safe (true, type.get_locus ()))\n+    {\n+      specified_bounds.push_back (std::move (predicate));\n+      translated\n+\t= new TyTy::DynamicObjectType (type.get_mappings ().get_hirid (),\n+\t\t\t\t       std::move (specified_bounds));\n+    }\n }\n \n } // namespace Resolver"}, {"sha": "196a6cada5ccb264ea9c109f3ae5cfb0b7475f3a", "filename": "gcc/rust/typecheck/rust-tyty-bounds.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c674e168ebc29c061a8a936e064c2e3d556ab326/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c674e168ebc29c061a8a936e064c2e3d556ab326/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc?ref=c674e168ebc29c061a8a936e064c2e3d556ab326", "patch": "@@ -91,5 +91,13 @@ TypeBoundPredicate::get_name () const\n   return get ()->get_name ();\n }\n \n+bool\n+TypeBoundPredicate::is_object_safe (bool emit_error, Location locus) const\n+{\n+  const Resolver::TraitReference *trait = get ();\n+  rust_assert (trait != nullptr);\n+  return trait->is_object_safe (emit_error, locus);\n+}\n+\n } // namespace TyTy\n } // namespace Rust"}, {"sha": "040831e2bc8c5f58520ea909a80c91250b5c62f3", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c674e168ebc29c061a8a936e064c2e3d556ab326/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c674e168ebc29c061a8a936e064c2e3d556ab326/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=c674e168ebc29c061a8a936e064c2e3d556ab326", "patch": "@@ -154,6 +154,10 @@ class TypeBoundPredicate\n \n   std::string get_name () const;\n \n+  // check that this predicate is object-safe see:\n+  // https://doc.rust-lang.org/reference/items/traits.html#object-safety\n+  bool is_object_safe (bool emit_error, Location locus) const;\n+\n private:\n   DefId reference;\n   Location locus;"}, {"sha": "a4622b240c4027bf74ebb6ca1913304df9fc0c7f", "filename": "gcc/testsuite/rust/compile/traits10.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c674e168ebc29c061a8a936e064c2e3d556ab326/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits10.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c674e168ebc29c061a8a936e064c2e3d556ab326/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits10.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits10.rs?ref=c674e168ebc29c061a8a936e064c2e3d556ab326", "patch": "@@ -0,0 +1,16 @@\n+struct Foo(i32);\n+\n+trait Bar {\n+    const A: i32 = 123;\n+    fn B();\n+    fn C(&self);\n+}\n+\n+pub fn main() {\n+    let a;\n+    a = Foo(123);\n+\n+    let b: &dyn Bar = &a;\n+    // { dg-error \"trait bound is not object safe\" \"\" { target *-*-* } .-1 }\n+    // { dg-error \"expected\" \"\" { target *-*-* } .-2 }\n+}"}, {"sha": "bf69ff0e5a64d9d65e309ac6d810d25773433dcd", "filename": "gcc/testsuite/rust/compile/traits11.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c674e168ebc29c061a8a936e064c2e3d556ab326/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits11.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c674e168ebc29c061a8a936e064c2e3d556ab326/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits11.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits11.rs?ref=c674e168ebc29c061a8a936e064c2e3d556ab326", "patch": "@@ -0,0 +1,20 @@\n+struct Foo(i32);\n+\n+trait A {\n+    const A: i32 = 123;\n+    fn B();\n+    fn C(&self);\n+}\n+\n+trait B: A {\n+    fn test(&self);\n+}\n+\n+pub fn main() {\n+    let a;\n+    a = Foo(123);\n+\n+    let b: &dyn B = &a;\n+    // { dg-error \"trait bound is not object safe\" \"\" { target *-*-* } .-1 }\n+    // { dg-error \"expected\" \"\" { target *-*-* } .-2 }\n+}"}]}