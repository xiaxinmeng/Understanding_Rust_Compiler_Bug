{"sha": "f9bd1a89667c1e7a88ad4c92f25535c6e9540a6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjliZDFhODk2NjdjMWU3YTg4YWQ0YzkyZjI1NTM1YzZlOTU0MGE2Yw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2008-11-03T20:14:57Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-11-03T20:14:57Z"}, "message": "arm.md (UNSPEC_PIC_BASE): Update documentation.\n\ngcc/\n\t* config/arm/arm.md (UNSPEC_PIC_BASE): Update documentation.\n\t(UNSPEC_GOTSYM_OFF): New unspec.\n\t(pic_add_dot_plus_four): Simplify the UNSPEC_PIC_BASE operands.\n\t(pic_add_dot_plus_eight): Likewise.\n\t(tls_load_dot_plus_eight): Likewise.  Update peephole2.\n\t* config/arm/thumb2.md (pic_load_dot_plus_four): Simplify the\n\tUNSPEC_PIC_BASE operands.\n\t* config/arm/arm.c (arm_load_pic_register): Use UNSPEC_GOTSYM_OFF.\n\t(arm_output_addr_const_extra): Handle it.\n\nFrom-SVN: r141560", "tree": {"sha": "bdeac114911bbf8adf18e8820297ff4155d0f076", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdeac114911bbf8adf18e8820297ff4155d0f076"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9bd1a89667c1e7a88ad4c92f25535c6e9540a6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9bd1a89667c1e7a88ad4c92f25535c6e9540a6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9bd1a89667c1e7a88ad4c92f25535c6e9540a6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9bd1a89667c1e7a88ad4c92f25535c6e9540a6c/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dffda765c064a083dc7efdd1670d10d8b8b84c1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dffda765c064a083dc7efdd1670d10d8b8b84c1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dffda765c064a083dc7efdd1670d10d8b8b84c1e"}], "stats": {"total": 85, "additions": 49, "deletions": 36}, "files": [{"sha": "61203031e481406ae17a572da7d9a7765cafd8b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bd1a89667c1e7a88ad4c92f25535c6e9540a6c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bd1a89667c1e7a88ad4c92f25535c6e9540a6c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9bd1a89667c1e7a88ad4c92f25535c6e9540a6c", "patch": "@@ -1,3 +1,15 @@\n+2008-11-03  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* config/arm/arm.md (UNSPEC_PIC_BASE): Update documentation.\n+\t(UNSPEC_GOTSYM_OFF): New unspec.\n+\t(pic_add_dot_plus_four): Simplify the UNSPEC_PIC_BASE operands.\n+\t(pic_add_dot_plus_eight): Likewise.\n+\t(tls_load_dot_plus_eight): Likewise.  Update peephole2.\n+\t* config/arm/thumb2.md (pic_load_dot_plus_four): Simplify the\n+\tUNSPEC_PIC_BASE operands.\n+\t* config/arm/arm.c (arm_load_pic_register): Use UNSPEC_GOTSYM_OFF.\n+\t(arm_output_addr_const_extra): Handle it.\n+\n 2008-11-03  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/i386/i386.c (classify_argument) <ARRAY_TYPE>: Promote partial"}, {"sha": "aeb0e53ea729007999530073b0e54100490d38ca", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bd1a89667c1e7a88ad4c92f25535c6e9540a6c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bd1a89667c1e7a88ad4c92f25535c6e9540a6c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f9bd1a89667c1e7a88ad4c92f25535c6e9540a6c", "patch": "@@ -3659,8 +3659,7 @@ static GTY(()) int pic_labelno;\n void\n arm_load_pic_register (unsigned long saved_regs ATTRIBUTE_UNUSED)\n {\n-  rtx l1, labelno, pic_tmp, pic_tmp2, pic_rtx, pic_reg;\n-  rtx global_offset_table;\n+  rtx l1, labelno, pic_tmp, pic_rtx, pic_reg;\n \n   if (crtl->uses_pic_offset_table == 0 || TARGET_SINGLE_PIC_BASE)\n     return;\n@@ -3688,20 +3687,11 @@ arm_load_pic_register (unsigned long saved_regs ATTRIBUTE_UNUSED)\n       l1 = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, labelno), UNSPEC_PIC_LABEL);\n       l1 = gen_rtx_CONST (VOIDmode, l1);\n \n-      global_offset_table\n-\t= gen_rtx_SYMBOL_REF (Pmode, \"_GLOBAL_OFFSET_TABLE_\");\n       /* On the ARM the PC register contains 'dot + 8' at the time of the\n \t addition, on the Thumb it is 'dot + 4'.  */\n-      pic_tmp = plus_constant (l1, TARGET_ARM ? 8 : 4);\n-      if (GOT_PCREL)\n-\t{\n-\t  pic_tmp2 = gen_rtx_PLUS (Pmode, global_offset_table, pc_rtx);\n-\t  pic_tmp2 = gen_rtx_CONST (VOIDmode, pic_tmp2);\n-\t}\n-      else\n-\tpic_tmp2 = gen_rtx_CONST (VOIDmode, global_offset_table);\n-\n-      pic_rtx = gen_rtx_MINUS (Pmode, pic_tmp2, pic_tmp);\n+      pic_rtx = plus_constant (l1, TARGET_ARM ? 8 : 4);\n+      pic_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, pic_rtx),\n+\t\t\t\tUNSPEC_GOTSYM_OFF);\n       pic_rtx = gen_rtx_CONST (Pmode, pic_rtx);\n \n       if (TARGET_ARM)\n@@ -18994,6 +18984,16 @@ arm_output_addr_const_extra (FILE *fp, rtx x)\n       ASM_GENERATE_INTERNAL_LABEL (label, \"LPIC\", labelno);\n       assemble_name_raw (fp, label);\n \n+      return TRUE;\n+    }\n+  else if (GET_CODE (x) == UNSPEC && XINT (x, 1) == UNSPEC_GOTSYM_OFF)\n+    {\n+      assemble_name (fp, \"_GLOBAL_OFFSET_TABLE_\");\n+      if (GOT_PCREL)\n+\tfputs (\"+.\", fp);\n+      fputs (\"-(\", fp);\n+      output_addr_const (fp, XVECEXP (x, 0, 0));\n+      fputc (')', fp);\n       return TRUE;\n     }\n   else if (GET_CODE (x) == CONST_VECTOR)"}, {"sha": "071f622d08c35bc5e88b4ddd468e9a6cd4cc17cd", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bd1a89667c1e7a88ad4c92f25535c6e9540a6c/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bd1a89667c1e7a88ad4c92f25535c6e9540a6c/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=f9bd1a89667c1e7a88ad4c92f25535c6e9540a6c", "patch": "@@ -67,10 +67,9 @@\n    (UNSPEC_PIC_SYM   3) ; A symbol that has been treated properly for pic\n \t\t\t;   usage, that is, we will add the pic_register\n \t\t\t;   value to it before trying to dereference it.\n-   (UNSPEC_PIC_BASE  4)\t; Adding the PC value to the offset to the\n-\t\t\t;   GLOBAL_OFFSET_TABLE.  The operation is fully\n-\t\t\t;   described by the RTL but must be wrapped to\n-\t\t\t;   prevent combine from trying to rip it apart.\n+   (UNSPEC_PIC_BASE  4)\t; Add PC and all but the last operand together,\n+\t\t\t;   The last operand is the number of a PIC_LABEL\n+\t\t\t;   that points at the containing instruction.\n    (UNSPEC_PRLG_STK  5) ; A special barrier that prevents frame accesses \n \t\t\t;   being scheduled before the stack adjustment insn.\n    (UNSPEC_PROLOGUE_USE 6) ; As USE insns are not meaningful after reload,\n@@ -98,6 +97,8 @@\n \t\t\t   ; generate correct unwind information.\n    (UNSPEC_PIC_OFFSET 23) ; A symbolic 12-bit OFFSET that has been treated\n \t\t\t  ; correctly for PIC usage.\n+   (UNSPEC_GOTSYM_OFF 24) ; The offset of the start of the the GOT from a\n+\t\t\t  ; a given symbolic address.\n   ]\n )\n \n@@ -5033,8 +5034,8 @@\n \n (define_insn \"pic_add_dot_plus_four\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(unspec:SI [(plus:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t\t     (const (plus:SI (pc) (const_int 4))))\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"0\")\n+\t\t    (const_int 4)\n \t\t    (match_operand 2 \"\" \"\")]\n \t\t   UNSPEC_PIC_BASE))]\n   \"TARGET_THUMB1\"\n@@ -5048,8 +5049,8 @@\n \n (define_insn \"pic_add_dot_plus_eight\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(unspec:SI [(plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t     (const (plus:SI (pc) (const_int 8))))\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t    (const_int 8)\n \t\t    (match_operand 2 \"\" \"\")]\n \t\t   UNSPEC_PIC_BASE))]\n   \"TARGET_ARM\"\n@@ -5063,8 +5064,8 @@\n \n (define_insn \"tls_load_dot_plus_eight\"\n   [(set (match_operand:SI 0 \"register_operand\" \"+r\")\n-\t(mem:SI (unspec:SI [(plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t\t     (const (plus:SI (pc) (const_int 8))))\n+\t(mem:SI (unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t    (const_int 8)\n \t\t\t    (match_operand 2 \"\" \"\")]\n \t\t\t   UNSPEC_PIC_BASE)))]\n   \"TARGET_ARM\"\n@@ -5081,18 +5082,18 @@\n ;; tls_load_dot_plus_eight by a peephole.\n \n (define_peephole2\n-  [(parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t\t   (unspec:SI [(plus:SI (match_operand:SI 3 \"register_operand\" \"\")\n-\t\t\t     \t \t(const (plus:SI (pc) (const_int 8))))]\n-\t\t\t      UNSPEC_PIC_BASE))\n-   \t      (use (label_ref (match_operand 1 \"\" \"\")))])\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(unspec:SI [(match_operand:SI 3 \"register_operand\" \"\")\n+\t\t    (const_int 8)\n+\t\t    (match_operand 1 \"\" \"\")]\n+\t\t   UNSPEC_PIC_BASE))\n    (set (match_operand:SI 2 \"register_operand\" \"\") (mem:SI (match_dup 0)))]\n   \"TARGET_ARM && peep2_reg_dead_p (2, operands[0])\"\n-  [(parallel [(set (match_dup 2)\n-\t\t   (mem:SI (unspec:SI [(plus:SI (match_dup 3)\n-\t\t\t\t\t\t(const (plus:SI (pc) (const_int 8))))]\n-\t\t\t\t      UNSPEC_PIC_BASE)))\n-   \t      (use (label_ref (match_dup 1)))])]\n+  [(set (match_dup 2)\n+\t(mem:SI (unspec:SI [(match_dup 3)\n+\t\t\t    (const_int 8)\n+\t\t\t    (match_dup 1)]\n+\t\t\t   UNSPEC_PIC_BASE)))]\n   \"\"\n )\n "}, {"sha": "3278b63f015c75f1087de5b0629a8dcc27311487", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bd1a89667c1e7a88ad4c92f25535c6e9540a6c/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bd1a89667c1e7a88ad4c92f25535c6e9540a6c/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=f9bd1a89667c1e7a88ad4c92f25535c6e9540a6c", "patch": "@@ -259,8 +259,8 @@\n ;; word aligned.\n (define_insn \"pic_load_dot_plus_four\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(unspec:SI [(const (plus:SI (pc) (const_int 4)))\n-\t\t    (use (match_operand 1 \"\" \"\"))]\n+\t(unspec:SI [(const_int 4)\n+\t\t    (match_operand 1 \"\" \"\")]\n \t\t   UNSPEC_PIC_BASE))]\n   \"TARGET_THUMB2\"\n   \"*"}]}