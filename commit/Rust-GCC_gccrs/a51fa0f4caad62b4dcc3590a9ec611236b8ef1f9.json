{"sha": "a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUxZmEwZjRjYWFkNjJiNGRjYzM1OTBhOWVjNjExMjM2YjhlZjFmOQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2008-07-25T23:44:24Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2008-07-25T23:44:24Z"}, "message": "Fix IA-64 breakage...\n\nFix IA-64 breakage; Make hot/cold optimization conversation port specific; Move\ndisabling of scheduling from OVERRIDE_OPTIONS to OPTIMIZATION_OPTIONS\n\nFiles modified:\ngcc/doc/extend.texi\ngcc/doc/tm.texi\ngcc/target.h\ngcc/ChangeLog\ngcc/testsuite/gcc.target/i386/cmov8.c\ngcc/testsuite/gcc.target/i386/funcspec-10.c\ngcc/testsuite/gcc.target/i386/funcspec-11.c\ngcc/testsuite/ChangeLog\ngcc/target-def.h\ngcc/c-common.c\ngcc/config/i386/i386.c\ngcc/config/ia64/ia64.c\n\nFrom-SVN: r138154", "tree": {"sha": "330eb2ef57fad7b5b44cf68983fb078c468d04e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/330eb2ef57fad7b5b44cf68983fb078c468d04e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9/comments", "author": null, "committer": null, "parents": [{"sha": "26f130aa70c58a1ea994cb34527c4e8fa37c49c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f130aa70c58a1ea994cb34527c4e8fa37c49c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26f130aa70c58a1ea994cb34527c4e8fa37c49c4"}], "stats": {"total": 170, "additions": 149, "deletions": 21}, "files": [{"sha": "ed4a31c36be78b64dd17a357b06061c80bda4520", "filename": "gcc/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9", "patch": "@@ -1,3 +1,46 @@\n+2008-07-25  Michael Meissner  <gnu@the-meissners.org>\n+\n+\t* doc/extend.texi (hot attribute): Document that the hot attribute\n+\tturns on -O3 for some ports.\n+\t(cold attribute): Document that the cold attribute turns on -Os\n+\tfor some ports\n+\n+\t* doc/tm.texi (OPTIMIZATION_OPTIONS): Update documentation to\n+\treflect function specific option support.\n+\n+\t* target.h (struct target_option_hooks): Add fields to say whether\n+\tthe cold attribute implies -Os and the hot attribute implies -O3.\n+\n+\t* target-def.h (TARGET_OPTION_COLD_ATTRIBUTE_SETS_OPTIMIZATION):\n+\tBy default, do not turn on -Os for cold functions.\n+\t(TARGET_OPTION_COLD_ATTRIBUTE_SETS_OPTIMIZATION): By default, do\n+\tnot turn on -O3 for hot functions.\n+\n+\t* c-common.c (handle_hot_attribute): Use target hook to determine\n+\tif hot functions should enable -O3.\n+\t(handle_cold_attribute): Use target hook to determine if cold\n+\tfunctions should enable -Os.\n+\n+\t* config/i386/i386.c (ix86_target_string): Add -m3dnowa support.\n+\t(override_options): Move disable scheduling to\n+\toptimization_options.\n+\t(optimization_options): Disable scheduling here, not\n+\toverride_options.\n+\t(TARGET_OPTION_COLD_ATTRIBUTE_SETS_OPTIMIZATION): Define.\n+\t(TARGET_OPTION_HOT_ATTRIBUTE_SETS_OPTIMIZATION): Define.\n+\n+\t* config/ia64/ia64.c (ia64_override_options): Move setting\n+\tscheduling flags to ia64_optimization_options.\n+\t(ia64_optimization_options): Disable scheduling options here, and\n+\tnot in ia64_override_options.\n+\t(TARGET_OPTION_COLD_ATTRIBUTE_SETS_OPTIMIZATION): Define.\n+\t(TARGET_OPTION_HOT_ATTRIBUTE_SETS_OPTIMIZATION): Define.\n+\n+2008-07-25  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/36936\n+\t* config/i386/i386.c (override_options): Don't clear TARGET_CMOVE.\n+\n 2008-07-25  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/36926"}, {"sha": "c9ffd9c9aa32128139095e38b77bbb051e264026", "filename": "gcc/c-common.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9", "patch": "@@ -5046,14 +5046,14 @@ handle_hot_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \t\t   name, \"cold\");\n \t  *no_add_attrs = true;\n \t}\n-\n       else\n \t{\n \t  tree old_opts = DECL_FUNCTION_SPECIFIC_OPTIMIZATION (*node);\n \n \t  /* If we are not at -O3, but are optimizing, turn on -O3\n \t     optimizations just for this one function.  */\n \t  if (((optimize > 0 && optimize < 3) || optimize_size)\n+\t      && targetm.target_option.hot_attribute_sets_optimization\n \t      && (!old_opts || old_opts == optimization_default_node))\n \t    {\n \t      /* Create the hot optimization node if needed.  */\n@@ -5071,9 +5071,9 @@ handle_hot_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \t      DECL_FUNCTION_SPECIFIC_OPTIMIZATION (*node)\n \t\t= optimization_hot_node;\n \t    }\n+\t  /* Most of the rest of the hot processing is done later with\n+\t     lookup_attribute.  */\n \t}\n-      /* Most of the rest of the hot processing is done later with\n-\t lookup_attribute.  */\n     }\n   else\n     {\n@@ -5105,6 +5105,7 @@ handle_cold_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \t  /* If we are optimizing, but not optimizing for space, turn on -Os\n \t     optimizations just for this one function.  */\n \t  if (optimize && !optimize_size\n+\t      && targetm.target_option.cold_attribute_sets_optimization\n \t      && (!old_opts || old_opts == optimization_default_node))\n \t    {\n \t      /* Create the cold optimization node if needed.  */\n@@ -5122,6 +5123,8 @@ handle_cold_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \t      DECL_FUNCTION_SPECIFIC_OPTIMIZATION (*node)\n \t\t= optimization_cold_node;\n \t    }\n+\t  /* Most of the rest of the cold processing is done later with\n+\t     lookup_attribute.  */\n \t}\n     }\n   else"}, {"sha": "7b4c243035abc3a50333c0d40bc830ad0035041e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9", "patch": "@@ -2215,6 +2215,7 @@ ix86_target_string (int isa, int flags, const char *arch, const char *tune,\n     { \"-msse2\",\t\tOPTION_MASK_ISA_SSE2 },\n     { \"-msse\",\t\tOPTION_MASK_ISA_SSE },\n     { \"-m3dnow\",\tOPTION_MASK_ISA_3DNOW },\n+    { \"-m3dnowa\",\tOPTION_MASK_ISA_3DNOW_A },\n     { \"-mmmx\",\t\tOPTION_MASK_ISA_MMX },\n     { \"-mabm\",\t\tOPTION_MASK_ISA_ABM },\n     { \"-mpopcnt\",\tOPTION_MASK_ISA_POPCNT },\n@@ -3123,8 +3124,6 @@ override_options (bool main_args_p)\n       target_flags |= MASK_ACCUMULATE_OUTGOING_ARGS;\n     }\n \n-  TARGET_CMOVE = 0;\n-\n   /* For sane SSE instruction set generation we need fcomi instruction.\n      It is safe to enable all CMOVE instructions.  */\n   if (TARGET_SSE)\n@@ -3139,11 +3138,6 @@ override_options (bool main_args_p)\n     *p = '\\0';\n   }\n \n-  /* When scheduling description is not available, disable scheduler pass\n-     so it won't slow down the compilation and make x87 code slower.  */\n-  if (!TARGET_SCHEDULE)\n-    flag_schedule_insns_after_reload = flag_schedule_insns = 0;\n-\n   if (!PARAM_SET_P (PARAM_SIMULTANEOUS_PREFETCHES))\n     set_param_value (\"simultaneous-prefetches\",\n \t\t     ix86_cost->simultaneous_prefetches);\n@@ -3911,6 +3905,11 @@ optimization_options (int level, int size ATTRIBUTE_UNUSED)\n     flag_schedule_insns = 0;\n #endif\n \n+  /* When scheduling description is not available, disable scheduler pass\n+     so it won't slow down the compilation and make x87 code slower.  */\n+  if (!TARGET_SCHEDULE)\n+    flag_schedule_insns_after_reload = flag_schedule_insns = 0;\n+\n   if (TARGET_MACHO)\n     /* The Darwin libraries never set errno, so we might as well\n        avoid calling them when that's the only reason we would.  */\n@@ -27345,6 +27344,12 @@ ix86_enum_va_list (int idx, const char **pname, tree *ptree)\n #undef TARGET_OPTION_CAN_INLINE_P\n #define TARGET_OPTION_CAN_INLINE_P ix86_can_inline_p\n \n+#undef TARGET_OPTION_COLD_ATTRIBUTE_SETS_OPTIMIZATION\n+#define TARGET_OPTION_COLD_ATTRIBUTE_SETS_OPTIMIZATION true\n+\n+#undef TARGET_OPTION_HOT_ATTRIBUTE_SETS_OPTIMIZATION\n+#define TARGET_OPTION_HOT_ATTRIBUTE_SETS_OPTIMIZATION true\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n #include \"gt-i386.h\""}, {"sha": "29a9a8dacf2bf5fd951fe4dd318b1ca6b1780894", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9", "patch": "@@ -493,6 +493,12 @@ static const struct attribute_spec ia64_attribute_table[] =\n #undef TARGET_C_MODE_FOR_SUFFIX\n #define TARGET_C_MODE_FOR_SUFFIX ia64_c_mode_for_suffix\n \n+#undef TARGET_OPTION_COLD_ATTRIBUTE_SETS_OPTIMIZATION\n+#define TARGET_OPTION_COLD_ATTRIBUTE_SETS_OPTIMIZATION true\n+\n+#undef TARGET_OPTION_HOT_ATTRIBUTE_SETS_OPTIMIZATION\n+#define TARGET_OPTION_HOT_ATTRIBUTE_SETS_OPTIMIZATION true\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n typedef enum\n@@ -5232,9 +5238,6 @@ ia64_override_options (void)\n       TARGET_INLINE_SQRT = INL_MAX_THR;\n     }\n \n-  ia64_flag_schedule_insns2 = flag_schedule_insns_after_reload;\n-  flag_schedule_insns_after_reload = 0;\n-\n   ia64_section_threshold = g_switch_set ? g_switch_value : IA64_DEFAULT_GVALUE;\n \n   init_machine_status = ia64_init_machine_status;\n@@ -9927,6 +9930,13 @@ void\n ia64_optimization_options (int level ATTRIBUTE_UNUSED,\n                            int size ATTRIBUTE_UNUSED)\n {\n+  /* Disable the second machine independent scheduling pass and use one for the\n+     IA-64.  This needs to be here instead of in OVERRIDE_OPTIONS because this\n+     is done whenever the optimization is changed via #pragma GCC optimize or\n+     attribute((optimize(...))).  */\n+  ia64_flag_schedule_insns2 = flag_schedule_insns_after_reload;\n+  flag_schedule_insns_after_reload = 0;\n+\n   /* Let the scheduler form additional regions.  */\n   set_param_value (\"max-sched-extend-regions-iters\", 2);\n "}, {"sha": "4b1d302a48d6d6eec91b01ac266bbf359f270581", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9", "patch": "@@ -2853,7 +2853,7 @@ that affect more than one function.\n This can be used for instance to have frequently executed functions\n compiled with more aggressive optimization options that produce faster\n and larger code, while other functions can be called with less\n-aggressive options.  The @code{hot} attribute implies\n+aggressive options.  On some targets, the @code{hot} attribute implies\n @code{optimize(\"O3\")}, and @code{cold} attribute implies\n @code{optimize(\"Os\")}.\n \n@@ -2903,8 +2903,9 @@ are automatically detected and this attribute is ignored.\n The @code{hot} attribute is not implemented in GCC versions earlier\n than 4.3.\n \n-Starting with GCC 4.4, the @code{hot} attribute sets\n-@code{optimize(\"O3\")} to turn on more aggressive optimization.\n+Starting with GCC 4.4, the @code{cold} attribute sets\n+@code{optimize(\"O3\")} to turn on more aggressive optimization on the\n+the i386, x86_64, and IA-64 targets.\n \n @item cold\n @cindex @code{cold} function attribute\n@@ -2924,7 +2925,8 @@ are automatically detected and this attribute is ignored.\n The @code{cold} attribute is not implemented in GCC versions earlier than 4.3.\n \n Starting with GCC 4.4, the @code{cold} attribute sets\n-@code{optimize(\"Os\")} to save space.\n+@code{optimize(\"Os\")} to save space on the the i386, x86_64, and IA-64\n+targets.\n \n @item regparm (@var{number})\n @cindex @code{regparm} attribute"}, {"sha": "5183736ccae3554c0d81e59670f160f67b4e4e08", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9", "patch": "@@ -833,10 +833,9 @@ specified, 1 if @option{-O} is specified, and 0 if neither is specified.\n \n @var{size} is nonzero if @option{-Os} is specified and zero otherwise.\n \n-You should not use this macro to change options that are not\n-machine-specific.  These should uniformly selected by the same\n-optimization level on all supported machines.  Use this macro to enable\n-machine-specific optimizations.\n+This macro is run once at program startup and when the optimization\n+options are changed via @code{#pragma GCC optimize} or by using the\n+@code{optimize} attribute.\n \n @strong{Do not examine @code{write_symbols} in\n this macro!} The debugging options are not supposed to alter the"}, {"sha": "bf8c7e79eac1e98d99f70ef442ccec2ffe73456a", "filename": "gcc/target-def.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9", "patch": "@@ -783,6 +783,14 @@\n #define TARGET_OPTION_CAN_INLINE_P default_target_option_can_inline_p\n #endif\n \n+#ifndef TARGET_OPTION_COLD_ATTRIBUTE_SETS_OPTIMIZATION\n+#define TARGET_OPTION_COLD_ATTRIBUTE_SETS_OPTIMIZATION false\n+#endif\n+\n+#ifndef TARGET_OPTION_HOT_ATTRIBUTE_SETS_OPTIMIZATION\n+#define TARGET_OPTION_HOT_ATTRIBUTE_SETS_OPTIMIZATION false\n+#endif\n+\n #define TARGET_OPTION_HOOKS\t\t\t\\\n   {\t\t\t\t\t\t\\\n     TARGET_OPTION_VALID_ATTRIBUTE_P,\t\t\\\n@@ -791,6 +799,8 @@\n     TARGET_OPTION_PRINT,\t\t\t\\\n     TARGET_OPTION_PRAGMA_PARSE,\t\t\t\\\n     TARGET_OPTION_CAN_INLINE_P,\t\t\t\\\n+    TARGET_OPTION_COLD_ATTRIBUTE_SETS_OPTIMIZATION, \\\n+    TARGET_OPTION_HOT_ATTRIBUTE_SETS_OPTIMIZATION, \\\n   }\n \n /* The whole shebang.  */"}, {"sha": "a44ab0b51c7ff74a82080543a7511f950534214a", "filename": "gcc/target.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9", "patch": "@@ -989,6 +989,12 @@ struct gcc_target\n \n     /* Function to determine if one function can inline another function.  */\n     bool (*can_inline_p) (tree, tree);\n+\n+    /* Whether the cold attribute changes the optimization level.  */\n+    bool cold_attribute_sets_optimization;\n+\n+    /* Whether the hot attribute changes the optimization level.  */\n+    bool hot_attribute_sets_optimization;\n   } target_option;\n \n   /* For targets that need to mark extra registers as live on entry to"}, {"sha": "db8df624927073ebccd4426ad66d58d52bc3c82a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9", "patch": "@@ -1,3 +1,10 @@\n+2008-07-25  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/36936\n+\t* gcc.target/i386/cmov8.c: New.\n+\t* gcc.target/i386/funcspec-10.c: Likewise.\n+\t* gcc.target/i386/funcspec-11.c: Likewise.\n+\n 2008-07-25  Joseph Myers  <joseph@codesourcery.com>\n \n \t* lib/target-supports.exp (check_effective_target_arm_thumb1_ok):"}, {"sha": "639fb62b0c06526a69a78d5e1d25a92eaa0b6110", "filename": "gcc/testsuite/gcc.target/i386/cmov8.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmov8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmov8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmov8.c?ref=a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9", "patch": "@@ -0,0 +1,13 @@\n+/* PR target/36936 */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -march=i686\" } */\n+/* { dg-final { scan-assembler \"cmov\\[^8\\]\" } } */\n+\n+int\n+foo (int x)\n+{\n+  if (x < 0)\n+    x = 1;\n+  return x;\n+}"}, {"sha": "9446cdf8f3519ee7b06c8c0cd0238a7ba173413d", "filename": "gcc/testsuite/gcc.target/i386/funcspec-10.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-10.c?ref=a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9", "patch": "@@ -0,0 +1,15 @@\n+/* PR target/36936 */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -march=i686\" } */\n+/* { dg-final { scan-assembler-not \"cmov\" } } */\n+\n+extern int foo (int) __attribute__((__option__(\"arch=i386\")));\n+\n+int\n+foo (int x)\n+{\n+  if (x < 0)\n+    x = 1;\n+  return x;\n+}"}, {"sha": "ec32e0c669ed2ff82f391e535c9ca49857392696", "filename": "gcc/testsuite/gcc.target/i386/funcspec-11.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-11.c?ref=a51fa0f4caad62b4dcc3590a9ec611236b8ef1f9", "patch": "@@ -0,0 +1,15 @@\n+/* PR target/36936 */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -march=i386\" } */\n+/* { dg-final { scan-assembler \"cmov\" } } */\n+\n+extern int foo (int) __attribute__((__option__(\"arch=i686\")));\n+\n+int\n+foo (int x)\n+{\n+  if (x < 0)\n+    x = 1;\n+  return x;\n+}"}]}