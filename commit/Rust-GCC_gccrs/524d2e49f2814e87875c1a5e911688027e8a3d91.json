{"sha": "524d2e49f2814e87875c1a5e911688027e8a3d91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI0ZDJlNDlmMjgxNGU4Nzg3NWMxYTVlOTExNjg4MDI3ZThhM2Q5MQ==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2015-07-14T23:43:48Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2015-07-14T23:43:48Z"}, "message": "constraints.md (U, v): New constraints.\n\n2015-07-14  Sandra Loosemore  <sandra@codesourcery.com>\n\t    Cesar Philippidis  <cesar@codesourcery.com>\n\t    Chung-Lin Tang  <cltang@codesourcery.com>\n\n\tgcc/\n\t* config/nios2/constraints.md (U, v): New constraints.\n\t* config/nios2/predicates.md (rdprs_dcache_operand): New.\n\t(ldstex_memory_operand): New.\n\t* config/nios2/sync.md: New file.\n\t* config/nios2/nios2.md (unspecv): Add new builtin function\n\tUNSPECV codes.\n\t(rdprs, flushd, flushda, wrpie, eni): New patterns.\n\t(top-level): Include sync.md.\n\t* config/nios2/nios2.c (N2_FTYPES): Add function types for\n\tnew builtins.\n\t(N2_BUILTINS): Add arch field setting, add new builtins.\n\t(enum nios2_builtin_code,nios2_builtins): Update N2_BUILTIN_DEF\n\tfor arch field.\n\t(nios2_expand_ldst_builtin): Rename from nios2_expand_ldstio_builtin.\n\tAlso handle ldex/stex/ldsex/stsex builtins.\n\t(nios2_expand_rdprs_builtin): New function.\n\t(nios2_expand_cache_builtin): New function.\n\t(nios2_expand_wrpie_builtin): New function.\n\t(nios2_expand_eni_builtin): New function.\n\t(nios2_expand_builtin): Add arch field handling and new builtin \n        cases.\n\t* doc/extend.texi (Altera Nios II Built-in Functions): Document\n\tnew builtins.\n\t* doc/md.texi (Machine Constraints): Document U and v constraints.\n\n\tgcc/testsuite/\n\t* gcc.target/nios2/nios2-flushd.c: New.\n\t* gcc.target/nios2/nios2-rdprs.c: New.\n\t* gcc.target/nios2/r2-atomic.c: New.\n\t* gcc.target/nios2/r2-eni.c: New.\n\t* gcc.target/nios2/r2-wrpie.c: New.\n\nCo-Authored-By: Cesar Philippidis <cesar@codesourcery.com>\nCo-Authored-By: Chung-Lin Tang <cltang@codesourcery.com>\n\nFrom-SVN: r225800", "tree": {"sha": "a1ebc88c554b085e5722372d81bb1fb10519908b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1ebc88c554b085e5722372d81bb1fb10519908b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/524d2e49f2814e87875c1a5e911688027e8a3d91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/524d2e49f2814e87875c1a5e911688027e8a3d91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/524d2e49f2814e87875c1a5e911688027e8a3d91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/524d2e49f2814e87875c1a5e911688027e8a3d91/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c3ff2812ae4ff647356577388e327cdf937fbf27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3ff2812ae4ff647356577388e327cdf937fbf27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3ff2812ae4ff647356577388e327cdf937fbf27"}], "stats": {"total": 450, "additions": 429, "deletions": 21}, "files": [{"sha": "1e7fbabac88e485b0d075ece0230734680a900e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/524d2e49f2814e87875c1a5e911688027e8a3d91/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/524d2e49f2814e87875c1a5e911688027e8a3d91/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=524d2e49f2814e87875c1a5e911688027e8a3d91", "patch": "@@ -1,3 +1,32 @@\n+2015-07-14  Sandra Loosemore  <sandra@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\t    Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* config/nios2/constraints.md (U, v): New constraints.\n+\t* config/nios2/predicates.md (rdprs_dcache_operand): New.\n+\t(ldstex_memory_operand): New.\n+\t* config/nios2/sync.md: New file.\n+\t* config/nios2/nios2.md (unspecv): Add new builtin function\n+\tUNSPECV codes.\n+\t(rdprs, flushd, flushda, wrpie, eni): New patterns.\n+\t(top-level): Include sync.md.\n+\t* config/nios2/nios2.c (N2_FTYPES): Add function types for\n+\tnew builtins.\n+\t(N2_BUILTINS): Add arch field setting, add new builtins.\n+\t(enum nios2_builtin_code,nios2_builtins): Update N2_BUILTIN_DEF\n+\tfor arch field.\n+\t(nios2_expand_ldst_builtin): Rename from nios2_expand_ldstio_builtin.\n+\tAlso handle ldex/stex/ldsex/stsex builtins.\n+\t(nios2_expand_rdprs_builtin): New function.\n+\t(nios2_expand_cache_builtin): New function.\n+\t(nios2_expand_wrpie_builtin): New function.\n+\t(nios2_expand_eni_builtin): New function.\n+\t(nios2_expand_builtin): Add arch field handling and new builtin \n+        cases.\n+\t* doc/extend.texi (Altera Nios II Built-in Functions): Document\n+\tnew builtins.\n+\t* doc/md.texi (Machine Constraints): Document U and v constraints.\n+\n 2015-07-14  Sandra Loosemore  <sandra@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>\n \t    Chung-Lin Tang  <cltang@codesourcery.com>"}, {"sha": "6f7afa4358fe944956e25c76a50b466e874ef772", "filename": "gcc/config/nios2/constraints.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/524d2e49f2814e87875c1a5e911688027e8a3d91/gcc%2Fconfig%2Fnios2%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/524d2e49f2814e87875c1a5e911688027e8a3d91/gcc%2Fconfig%2Fnios2%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fconstraints.md?ref=524d2e49f2814e87875c1a5e911688027e8a3d91", "patch": "@@ -28,9 +28,11 @@\n ;;  M: 0\n ;;  N: 0 to 255 (for custom instruction numbers)\n ;;  O: 0 to 31 (for control register numbers)\n+;;  U: -32768 to 32767 under R1, -2048 to 2047 under R2\n ;;\n ;; We use the following constraint letters for memory constraints\n ;;\n+;;  v: memory operands for R2 load/store exclusive instructions\n ;;  w: memory operands for load/store IO and cache instructions\n ;;\n ;; We use the following built-in register classes:\n@@ -100,6 +102,17 @@\n   \"A constant unspec offset representing a relocation.\"\n   (match_test \"nios2_unspec_reloc_p (op)\"))\n \n+(define_constraint \"U\"\n+  \"A 12-bit or 16-bit constant (for RDPRS and DCACHE).\"\n+  (and (match_code \"const_int\")\n+       (if_then_else (match_test \"TARGET_ARCH_R2\")\n+                     (match_test \"SMALL_INT12 (ival)\")\n+                     (match_test \"SMALL_INT (ival)\"))))\n+\n+(define_memory_constraint \"v\"\n+  \"A memory operand suitable for R2 load/store exclusive instructions.\"\n+  (match_operand 0 \"ldstex_memory_operand\"))\n+\n (define_memory_constraint \"w\"\n   \"A memory operand suitable for load/store IO and cache instructions.\"\n   (match_operand 0 \"ldstio_memory_operand\"))"}, {"sha": "a780c512060dd8f0d7ff47fe7cbc242416d16d63", "filename": "gcc/config/nios2/nios2.c", "status": "modified", "additions": 144, "deletions": 21, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/524d2e49f2814e87875c1a5e911688027e8a3d91/gcc%2Fconfig%2Fnios2%2Fnios2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/524d2e49f2814e87875c1a5e911688027e8a3d91/gcc%2Fconfig%2Fnios2%2Fnios2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.c?ref=524d2e49f2814e87875c1a5e911688027e8a3d91", "patch": "@@ -135,12 +135,16 @@ static bool custom_code_conflict = false;\n   N2_FTYPE(2, (SI, SF))\t\t\t\t\\\n   N2_FTYPE(3, (SI, SF, SF))\t\t\t\\\n   N2_FTYPE(2, (SI, SI))\t\t\t\t\\\n+  N2_FTYPE(3, (SI, SI, SI))\t\t\t\\\n+  N2_FTYPE(3, (SI, VPTR, SI))\t\t\t\\\n   N2_FTYPE(2, (UI, CVPTR))\t\t\t\\\n   N2_FTYPE(2, (UI, DF))\t\t\t\t\\\n   N2_FTYPE(2, (UI, SF))\t\t\t\t\\\n   N2_FTYPE(2, (VOID, DF))\t\t\t\\\n   N2_FTYPE(2, (VOID, SF))\t\t\t\\\n+  N2_FTYPE(2, (VOID, SI))\t\t\t\\\n   N2_FTYPE(3, (VOID, SI, SI))\t\t\t\\\n+  N2_FTYPE(2, (VOID, VPTR))\t\t\t\\\n   N2_FTYPE(3, (VOID, VPTR, SI))\n \n #define N2_FTYPE_OP1(R)         N2_FTYPE_ ## R ## _VOID\n@@ -3266,33 +3270,43 @@ nios2_expand_custom_builtin (tree exp, unsigned int index, rtx target)\n struct nios2_builtin_desc\n {\n   enum insn_code icode;\n+  enum nios2_arch_type arch;\n   enum nios2_ftcode ftype;\n   const char *name;\n };\n \n #define N2_BUILTINS\t\t\t\t\t\\\n-  N2_BUILTIN_DEF (sync,   N2_FTYPE_VOID_VOID)\t\t\\\n-  N2_BUILTIN_DEF (ldbio,  N2_FTYPE_SI_CVPTR)\t\t\\\n-  N2_BUILTIN_DEF (ldbuio, N2_FTYPE_UI_CVPTR)\t\t\\\n-  N2_BUILTIN_DEF (ldhio,  N2_FTYPE_SI_CVPTR)\t\t\\\n-  N2_BUILTIN_DEF (ldhuio, N2_FTYPE_UI_CVPTR)\t\t\\\n-  N2_BUILTIN_DEF (ldwio,  N2_FTYPE_SI_CVPTR)\t\t\\\n-  N2_BUILTIN_DEF (stbio,  N2_FTYPE_VOID_VPTR_SI)\t\\\n-  N2_BUILTIN_DEF (sthio,  N2_FTYPE_VOID_VPTR_SI)\t\\\n-  N2_BUILTIN_DEF (stwio,  N2_FTYPE_VOID_VPTR_SI)\t\\\n-  N2_BUILTIN_DEF (rdctl,  N2_FTYPE_SI_SI)\t\t\\\n-  N2_BUILTIN_DEF (wrctl,  N2_FTYPE_VOID_SI_SI)\n+  N2_BUILTIN_DEF (sync,    R1, N2_FTYPE_VOID_VOID)\t\\\n+  N2_BUILTIN_DEF (ldbio,   R1, N2_FTYPE_SI_CVPTR)\t\\\n+  N2_BUILTIN_DEF (ldbuio,  R1, N2_FTYPE_UI_CVPTR)\t\\\n+  N2_BUILTIN_DEF (ldhio,   R1, N2_FTYPE_SI_CVPTR)\t\\\n+  N2_BUILTIN_DEF (ldhuio,  R1, N2_FTYPE_UI_CVPTR)\t\\\n+  N2_BUILTIN_DEF (ldwio,   R1, N2_FTYPE_SI_CVPTR)\t\\\n+  N2_BUILTIN_DEF (stbio,   R1, N2_FTYPE_VOID_VPTR_SI)\t\\\n+  N2_BUILTIN_DEF (sthio,   R1, N2_FTYPE_VOID_VPTR_SI)\t\\\n+  N2_BUILTIN_DEF (stwio,   R1, N2_FTYPE_VOID_VPTR_SI)\t\\\n+  N2_BUILTIN_DEF (rdctl,   R1, N2_FTYPE_SI_SI)\t\t\\\n+  N2_BUILTIN_DEF (wrctl,   R1, N2_FTYPE_VOID_SI_SI)\t\\\n+  N2_BUILTIN_DEF (rdprs,   R1, N2_FTYPE_SI_SI_SI)\t\\\n+  N2_BUILTIN_DEF (flushd,  R1, N2_FTYPE_VOID_VPTR)\t\\\n+  N2_BUILTIN_DEF (flushda, R1, N2_FTYPE_VOID_VPTR)\t\\\n+  N2_BUILTIN_DEF (wrpie,   R2, N2_FTYPE_SI_SI)\t\t\\\n+  N2_BUILTIN_DEF (eni,     R2, N2_FTYPE_VOID_SI)\t\\\n+  N2_BUILTIN_DEF (ldex,    R2, N2_FTYPE_SI_CVPTR)\t\\\n+  N2_BUILTIN_DEF (ldsex,   R2, N2_FTYPE_SI_CVPTR)\t\\\n+  N2_BUILTIN_DEF (stex,    R2, N2_FTYPE_SI_VPTR_SI)\t\\\n+  N2_BUILTIN_DEF (stsex,   R2, N2_FTYPE_SI_VPTR_SI)\n \n enum nios2_builtin_code {\n-#define N2_BUILTIN_DEF(name, ftype) NIOS2_BUILTIN_ ## name,\n+#define N2_BUILTIN_DEF(name, arch, ftype) NIOS2_BUILTIN_ ## name,\n   N2_BUILTINS\n #undef N2_BUILTIN_DEF\n   NUM_FIXED_NIOS2_BUILTINS\n };\n \n static const struct nios2_builtin_desc nios2_builtins[] = {\n-#define N2_BUILTIN_DEF(name, ftype)\t\t\t\\\n-  { CODE_FOR_ ## name, ftype, \"__builtin_\" #name },\n+#define N2_BUILTIN_DEF(name, arch, ftype)\t\t\\\n+  { CODE_FOR_ ## name, ARCH_ ## arch, ftype, \"__builtin_\" #name },\n   N2_BUILTINS\n #undef N2_BUILTIN_DEF\n };\n@@ -3373,10 +3387,11 @@ nios2_expand_builtin_insn (const struct nios2_builtin_desc *d, int n,\n     } \n }\n \n-/* Expand ldio/stio form load-store instruction builtins.  */\n+/* Expand ldio/stio and ldex/ldsex/stex/stsex form load-store\n+   instruction builtins.  */\n static rtx\n-nios2_expand_ldstio_builtin (tree exp, rtx target,\n-\t\t\t     const struct nios2_builtin_desc *d)\n+nios2_expand_ldst_builtin (tree exp, rtx target,\n+\t\t\t   const struct nios2_builtin_desc *d)\n {\n   bool has_target_p;\n   rtx addr, mem, val;\n@@ -3388,14 +3403,21 @@ nios2_expand_ldstio_builtin (tree exp, rtx target,\n \n   if (insn_data[d->icode].operand[0].allows_mem)\n     {\n-      /* stxio.  */\n+      /* stxio/stex/stsex.  */\n       val = expand_normal (CALL_EXPR_ARG (exp, 1));\n       if (CONST_INT_P (val))\n \tval = force_reg (mode, gen_int_mode (INTVAL (val), mode));\n       val = simplify_gen_subreg (mode, val, GET_MODE (val), 0);\n       create_output_operand (&ops[0], mem, mode);\n       create_input_operand (&ops[1], val, mode);\n-      has_target_p = false;\n+      if (insn_data[d->icode].n_operands == 3)\n+\t{\n+\t  /* stex/stsex status value, returned as result of function.  */\n+\t  create_output_operand (&ops[2], target, mode);\n+\t  has_target_p = true;\n+\t}\n+      else\n+\thas_target_p = false;\n     }\n   else\n     {\n@@ -3404,7 +3426,8 @@ nios2_expand_ldstio_builtin (tree exp, rtx target,\n       create_input_operand (&ops[1], mem, mode);\n       has_target_p = true;\n     }\n-  return nios2_expand_builtin_insn (d, 2, ops, has_target_p);\n+  return nios2_expand_builtin_insn (d, insn_data[d->icode].n_operands, ops,\n+\t\t\t\t    has_target_p);\n }\n \n /* Expand rdctl/wrctl builtins.  */\n@@ -3436,6 +3459,81 @@ nios2_expand_rdwrctl_builtin (tree exp, rtx target,\n   return nios2_expand_builtin_insn (d, 2, ops, has_target_p);\n }\n \n+static rtx\n+nios2_expand_rdprs_builtin (tree exp, rtx target,\n+\t\t\t    const struct nios2_builtin_desc *d)\n+{\n+  rtx reg = expand_normal (CALL_EXPR_ARG (exp, 0));\n+  rtx imm = expand_normal (CALL_EXPR_ARG (exp, 1));\n+  struct expand_operand ops[MAX_RECOG_OPERANDS];\n+\n+  if (!rdwrctl_operand (reg, VOIDmode))\n+    {\n+      error (\"Register number must be in range 0-31 for %s\",\n+\t     d->name);\n+      return gen_reg_rtx (SImode);\n+    }\n+\n+  if (!rdprs_dcache_operand (imm, VOIDmode))\n+    {\n+      error (\"The immediate value must fit into a %d-bit integer for %s\",\n+\t     (TARGET_ARCH_R2) ? 12 : 16, d->name);\n+      return gen_reg_rtx (SImode);\n+    }\n+\n+  create_output_operand (&ops[0], target, SImode);\n+  create_input_operand (&ops[1], reg, SImode);\n+  create_integer_operand (&ops[2], INTVAL (imm));\n+\n+  return nios2_expand_builtin_insn (d, 3, ops, true);\n+}\n+\n+static rtx\n+nios2_expand_cache_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n+\t\t\t    const struct nios2_builtin_desc *d)\n+{\n+  rtx mem, addr;\n+  struct expand_operand ops[MAX_RECOG_OPERANDS];\n+\n+  addr = expand_normal (CALL_EXPR_ARG (exp, 0));\n+  mem = gen_rtx_MEM (SImode, addr);\n+\n+  create_input_operand (&ops[0], mem, SImode);\n+ \n+  return nios2_expand_builtin_insn (d, 1, ops, false);\n+}\n+\n+static rtx\n+nios2_expand_wrpie_builtin (tree exp, rtx target,\n+\t\t\t    const struct nios2_builtin_desc *d)\n+{\n+  rtx val;\n+  struct expand_operand ops[MAX_RECOG_OPERANDS];\n+\n+  val = expand_normal (CALL_EXPR_ARG (exp, 0));\n+  create_input_operand (&ops[1], val, SImode);\n+  create_output_operand (&ops[0], target, SImode);\n+ \n+  return nios2_expand_builtin_insn (d, 2, ops, true);\n+}\n+\n+static rtx\n+nios2_expand_eni_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n+\t\t\t    const struct nios2_builtin_desc *d)\n+{\n+  rtx imm = expand_normal (CALL_EXPR_ARG (exp, 0));\n+  struct expand_operand ops[MAX_RECOG_OPERANDS];\n+\n+  if (INTVAL (imm) != 0 && INTVAL (imm) != 1)\n+    {\n+      error (\"The ENI instruction operand must be either 0 or 1\");\n+      return const0_rtx;      \n+    }\n+  create_integer_operand (&ops[0], INTVAL (imm));\n+ \n+  return nios2_expand_builtin_insn (d, 1, ops, false);\n+}\n+\n /* Implement TARGET_EXPAND_BUILTIN.  Expand an expression EXP that calls\n    a built-in function, with result going to TARGET if that's convenient\n    (and in mode MODE if that's convenient).\n@@ -3454,6 +3552,14 @@ nios2_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n     {\n       const struct nios2_builtin_desc *d = &nios2_builtins[fcode];\n \n+      if (d->arch > nios2_arch_option)\n+\t{\n+\t  error (\"Builtin function %s requires Nios II R%d\",\n+\t\t d->name, (int) d->arch);\n+\t  /* Given it is invalid, just generate a normal call.  */\n+\t  return expand_call (exp, target, ignore);\n+\t}\n+\n       switch (fcode)\n \t{\n \tcase NIOS2_BUILTIN_sync:\n@@ -3468,12 +3574,29 @@ nios2_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \tcase NIOS2_BUILTIN_stbio:\n \tcase NIOS2_BUILTIN_sthio:\n \tcase NIOS2_BUILTIN_stwio:\n-\t  return nios2_expand_ldstio_builtin (exp, target, d);\n+\tcase NIOS2_BUILTIN_ldex:\n+\tcase NIOS2_BUILTIN_ldsex:\n+\tcase NIOS2_BUILTIN_stex:\n+\tcase NIOS2_BUILTIN_stsex:\n+\t  return nios2_expand_ldst_builtin (exp, target, d);\n \n \tcase NIOS2_BUILTIN_rdctl:\n \tcase NIOS2_BUILTIN_wrctl:\n \t  return nios2_expand_rdwrctl_builtin (exp, target, d);\n \n+\tcase NIOS2_BUILTIN_rdprs:\n+\t  return nios2_expand_rdprs_builtin (exp, target, d);\n+\n+\tcase NIOS2_BUILTIN_flushd:\n+\tcase NIOS2_BUILTIN_flushda:\n+\t  return nios2_expand_cache_builtin (exp, target, d);\n+\n+\tcase NIOS2_BUILTIN_wrpie:\n+\t  return nios2_expand_wrpie_builtin (exp, target, d);\n+\n+\tcase NIOS2_BUILTIN_eni:\n+\t  return nios2_expand_eni_builtin (exp, target, d);\n+\n \tdefault:\n \t  gcc_unreachable ();\n \t}"}, {"sha": "88e689b00bf74aacc16727b2826a3fb4448af174", "filename": "gcc/config/nios2/nios2.md", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/524d2e49f2814e87875c1a5e911688027e8a3d91/gcc%2Fconfig%2Fnios2%2Fnios2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/524d2e49f2814e87875c1a5e911688027e8a3d91/gcc%2Fconfig%2Fnios2%2Fnios2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.md?ref=524d2e49f2814e87875c1a5e911688027e8a3d91", "patch": "@@ -62,6 +62,15 @@\n   UNSPECV_CUSTOM_XNXX\n   UNSPECV_LDXIO\n   UNSPECV_STXIO\n+  UNSPECV_RDPRS\n+  UNSPECV_FLUSHD\n+  UNSPECV_FLUSHDA\n+  UNSPECV_WRPIE\n+  UNSPECV_ENI\n+  UNSPECV_LDEX\n+  UNSPECV_LDSEX\n+  UNSPECV_STEX\n+  UNSPECV_STSEX\n ])\n \n (define_c_enum \"unspec\" [\n@@ -1127,6 +1136,48 @@\n   \"wrctl\\\\tctl%0, %z1\"\n   [(set_attr \"type\" \"control\")])\n \n+(define_insn \"rdprs\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec_volatile:SI [(match_operand:SI 1 \"rdwrctl_operand\" \"O\")\n+                             (match_operand:SI 2 \"arith_operand\"   \"U\")]\n+         UNSPECV_RDPRS))]\n+  \"\"\n+  \"rdprs\\\\t%0, %1, %2\"\n+  [(set_attr \"type\" \"control\")])\n+\n+;; Cache Instructions\n+\n+(define_insn \"flushd\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"ldstio_memory_operand\" \"w\")]\n+  \t\t        UNSPECV_FLUSHD)]\n+  \"\"\n+  \"flushd\\\\t%0\"\n+  [(set_attr \"type\" \"control\")])\n+\n+(define_insn \"flushda\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"ldstio_memory_operand\" \"w\")]\n+  \t\t        UNSPECV_FLUSHDA)]\n+  \"\"\n+  \"flushda\\\\t%0\"\n+  [(set_attr \"type\" \"control\")])\n+\n+;; R2 Instructions\n+\n+(define_insn \"wrpie\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec_volatile:SI [(match_operand:SI 1 \"register_operand\" \"r\")]\n+\t\t \t     UNSPECV_WRPIE))]\n+  \"TARGET_ARCH_R2\"\n+  \"wrpie\\\\t%0, %1\"\n+  [(set_attr \"type\" \"control\")])\n+\n+(define_insn \"eni\"\n+  [(unspec:VOID [(match_operand 0 \"const_int_operand\" \"i\")]\n+  \t\t UNSPECV_ENI)]\n+  \"TARGET_ARCH_R2\"\n+  \"eni\\\\t%0\"\n+  [(set_attr \"type\" \"control\")])\n+\n ;; Trap patterns\n (define_insn \"trap\"\n   [(trap_if (const_int 1) (const_int 3))]\n@@ -1172,6 +1223,10 @@\n   emit_move_insn (operands[0], gen_rtx_REG (Pmode, TP_REGNO));\n   DONE;\n })\n+\n+;; Synchronization Primitives\n+(include \"sync.md\")\n+\n ;; Include the ldwm/stwm/push.n/pop.n patterns and peepholes.\n (include \"ldstwm.md\")\n "}, {"sha": "f1de2f4edb36ba7bd2846261a9a164696c5d00f1", "filename": "gcc/config/nios2/predicates.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/524d2e49f2814e87875c1a5e911688027e8a3d91/gcc%2Fconfig%2Fnios2%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/524d2e49f2814e87875c1a5e911688027e8a3d91/gcc%2Fconfig%2Fnios2%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fpredicates.md?ref=524d2e49f2814e87875c1a5e911688027e8a3d91", "patch": "@@ -81,6 +81,12 @@\n   (and (match_code \"const_int\")\n        (match_test \"RDWRCTL_INT (INTVAL (op))\")))\n \n+(define_predicate \"rdprs_dcache_operand\"\n+  (and (match_code \"const_int\")\n+       (if_then_else (match_test \"TARGET_ARCH_R2\")\n+                     (match_test \"SMALL_INT12 (INTVAL (op))\")\n+                     (match_test \"SMALL_INT (INTVAL (op))\"))))\n+\n (define_predicate \"custom_insn_opcode\"\n   (and (match_code \"const_int\")\n        (match_test \"CUSTOM_INSN_OPCODE (INTVAL (op))\")))\n@@ -144,3 +150,10 @@\n     }\n   return memory_operand (op, mode);\n })\n+\n+(define_predicate \"ldstex_memory_operand\"\n+  (match_code \"mem\")\n+{\n+  /* ldex/ldsex/stex/stsex cannot handle memory addresses with offsets.  */\n+  return GET_CODE (XEXP (op, 0)) == REG;\n+})"}, {"sha": "405aa38e9aa05ed67a9b9940dbfb9d43ce3a5421", "filename": "gcc/config/nios2/sync.md", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/524d2e49f2814e87875c1a5e911688027e8a3d91/gcc%2Fconfig%2Fnios2%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/524d2e49f2814e87875c1a5e911688027e8a3d91/gcc%2Fconfig%2Fnios2%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fsync.md?ref=524d2e49f2814e87875c1a5e911688027e8a3d91", "patch": "@@ -0,0 +1,45 @@\n+;; Machine Description for Altera Nios II synchronization primitives.\n+;; Copyright (C) 2014-2015 Free Software Foundation, Inc.\n+;; Contributed by Mentor Graphics, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_int_iterator UNSPECV_LOAD_EXCLUSIVE [UNSPECV_LDEX UNSPECV_LDSEX])\n+(define_int_attr load_exclusive [(UNSPECV_LDEX  \"ldex\")\n+                                 (UNSPECV_LDSEX \"ldsex\")])\n+(define_insn \"<load_exclusive>\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec_volatile:SI\n+          [(match_operand:SI 1 \"ldstex_memory_operand\" \"v\")]\n+          UNSPECV_LOAD_EXCLUSIVE))]\n+  \"TARGET_ARCH_R2\"\n+  \"<load_exclusive>\\\\t%0, %A1\"\n+  [(set_attr \"type\" \"ld\")])\n+\n+(define_int_iterator UNSPECV_STORE_EXCLUSIVE [UNSPECV_STEX UNSPECV_STSEX])\n+(define_int_attr store_exclusive [(UNSPECV_STEX  \"stex\")\n+                                  (UNSPECV_STSEX \"stsex\")])\n+(define_insn \"<store_exclusive>\"\n+  [(set (match_operand:SI 2 \"register_operand\" \"=r\")\n+        (unspec_volatile:SI [(const_int 0)] UNSPECV_STORE_EXCLUSIVE))\n+   (set (match_operand:SI 0 \"ldstex_memory_operand\" \"=v\")\n+        (unspec_volatile:SI\n+          [(match_operand:SI 1 \"reg_or_0_operand\" \"rM\")]\n+          UNSPECV_STORE_EXCLUSIVE))]\n+  \"TARGET_ARCH_R2\"\n+  \"<store_exclusive>\\\\t%2, %z1, %A0\"\n+  [(set_attr \"type\" \"st\")])"}, {"sha": "82593b43c89f844564f603f96d2cc96b199f8a2b", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/524d2e49f2814e87875c1a5e911688027e8a3d91/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/524d2e49f2814e87875c1a5e911688027e8a3d91/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=524d2e49f2814e87875c1a5e911688027e8a3d91", "patch": "@@ -11045,7 +11045,16 @@ void __builtin_sthio (volatile void *, int)\n void __builtin_stwio (volatile void *, int)\n void __builtin_sync (void)\n int __builtin_rdctl (int) \n+int __builtin_rdprs (int, int)\n void __builtin_wrctl (int, int)\n+void __builtin_flushd (volatile void *)\n+void __builtin_flushda (volatile void *)\n+int __builtin_wrpie (int);\n+void __builtin_eni (int);\n+int __builtin_ldex (volatile const void *)\n+int __builtin_stex (volatile void *, int)\n+int __builtin_ldsex (volatile const void *)\n+int __builtin_stsex (volatile void *, int)\n @end example\n \n The following built-in functions are always available.  They"}, {"sha": "4fba7acc37eec9f5540f622047bf345c4c6c03f7", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/524d2e49f2814e87875c1a5e911688027e8a3d91/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/524d2e49f2814e87875c1a5e911688027e8a3d91/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=524d2e49f2814e87875c1a5e911688027e8a3d91", "patch": "@@ -2999,6 +2999,14 @@ Matches immediates which are addresses in the small\n data section and therefore can be added to @code{gp}\n as a 16-bit immediate to re-create their 32-bit value.\n \n+@item U\n+Matches constants suitable as an operand for the rdprs and\n+cache instructions.\n+\n+@item v\n+A memory operand suitable for Nios II R2 load/store\n+exclusive instructions.\n+\n @item w\n A memory operand suitable for load/store IO and cache\n instructions."}, {"sha": "f961db7c3ba3614c79bf0ecd808e004161a737a9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/524d2e49f2814e87875c1a5e911688027e8a3d91/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/524d2e49f2814e87875c1a5e911688027e8a3d91/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=524d2e49f2814e87875c1a5e911688027e8a3d91", "patch": "@@ -1,3 +1,13 @@\n+2015-07-14  Sandra Loosemore  <sandra@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\t    Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* gcc.target/nios2/nios2-flushd.c: New.\n+\t* gcc.target/nios2/nios2-rdprs.c: New.\n+\t* gcc.target/nios2/r2-atomic.c: New.\n+\t* gcc.target/nios2/r2-eni.c: New.\n+\t* gcc.target/nios2/r2-wrpie.c: New.\n+\n 2015-07-14  Sandra Loosemore  <sandra@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>\n \t    Chung-Lin Tang  <cltang@codesourcery.com>"}, {"sha": "8c9a9be32f44afa6ba2ea3002b4905920a2de249", "filename": "gcc/testsuite/gcc.target/nios2/nios2-flushd.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/524d2e49f2814e87875c1a5e911688027e8a3d91/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-flushd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/524d2e49f2814e87875c1a5e911688027e8a3d91/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-flushd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-flushd.c?ref=524d2e49f2814e87875c1a5e911688027e8a3d91", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O\" } */\n+\n+void test_flushd (unsigned char* p1, unsigned char* p2)\n+{\n+  __builtin_flushd (p1);\n+  __builtin_flushd (p2);\n+  __builtin_flushd (p2 + 1);\n+  __builtin_flushd (p2 + 2);\n+  __builtin_flushd (p2 + 2047);\n+  __builtin_flushd (p2 + 2048);\n+}\n+\n+void test_flushda (unsigned char* p1, unsigned char* p2)\n+{\n+  __builtin_flushda (p1);\n+  __builtin_flushda (p2);\n+  __builtin_flushda (p2 + 1);\n+  __builtin_flushda (p2 + 2);\n+  __builtin_flushda (p2 + 2047);\n+  __builtin_flushda (p2 + 2048);\n+}"}, {"sha": "bea6bbe6adaa89729a324f1a685b09805f6b8c49", "filename": "gcc/testsuite/gcc.target/nios2/nios2-rdprs.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/524d2e49f2814e87875c1a5e911688027e8a3d91/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-rdprs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/524d2e49f2814e87875c1a5e911688027e8a3d91/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-rdprs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fnios2-rdprs.c?ref=524d2e49f2814e87875c1a5e911688027e8a3d91", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-final { scan-assembler \"rdprs\" } } */\n+\n+int x ()\n+{\n+  __builtin_rdprs (3,934);\n+  return 0;\n+} "}, {"sha": "d4be7aba1697f35169bbbfef3d8b091c72d1e87f", "filename": "gcc/testsuite/gcc.target/nios2/r2-atomic.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/524d2e49f2814e87875c1a5e911688027e8a3d91/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fr2-atomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/524d2e49f2814e87875c1a5e911688027e8a3d91/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fr2-atomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fr2-atomic.c?ref=524d2e49f2814e87875c1a5e911688027e8a3d91", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O -march=r2\" } */\n+\n+int test_stex (unsigned char* p1, unsigned char* p2)\n+{\n+  int a, b, c, d;\n+  a = __builtin_stex (p1, *p2);\n+  b = __builtin_stex (p2, 0);\n+  c = __builtin_stex (p2 + 1, 0x80);\n+  d = __builtin_stex (p2 + 2, 0x7f);\n+\n+  return a + b + c + d;\n+}\n+\n+int test_stsex (unsigned short* p1, unsigned short* p2)\n+{\n+  int a, b, c, d;\n+  \n+  a = __builtin_stsex (p1, *p2);\n+  b = __builtin_stsex (p2, 0);\n+  c = __builtin_stsex (p2 + 1, 0x8000);\n+  d = __builtin_stsex (p2 + 2, 0x7fff);\n+\n+  return a + b + c + d;\n+}\n+\n+int test_ldex (unsigned char* p1, unsigned char* p2)\n+{\n+  int a, b, c, d;\n+  \n+  a = __builtin_ldex (p1);\n+  b = __builtin_ldex (p2);\n+  c = __builtin_ldex (p2 + 1);\n+  d = __builtin_ldex (p2 + 2);\n+\n+  return a + b + c + d;\n+}\n+\n+int test_ldsex (unsigned char* p1, unsigned char* p2)\n+{\n+  int a, b, c, d;\n+  \n+  a = __builtin_ldsex (p1);\n+  b = __builtin_ldsex (p2);\n+  c = __builtin_ldsex (p2 + 1);\n+  d = __builtin_ldsex (p2 + 2);\n+\n+  return a + b + c + d;\n+}"}, {"sha": "85c448ad7500a55d3e2db0e3b47f9dca09865e44", "filename": "gcc/testsuite/gcc.target/nios2/r2-eni.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/524d2e49f2814e87875c1a5e911688027e8a3d91/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fr2-eni.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/524d2e49f2814e87875c1a5e911688027e8a3d91/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fr2-eni.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fr2-eni.c?ref=524d2e49f2814e87875c1a5e911688027e8a3d91", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=r2\" } */\n+/* { dg-final { scan-assembler \"eni\" } } */\n+\n+void\n+foo (void)\n+{\n+  __builtin_eni (0);\n+  __builtin_eni (1);\n+}"}, {"sha": "fe9da11e058ec73ca5442373d3923cf86c35af82", "filename": "gcc/testsuite/gcc.target/nios2/r2-wrpie.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/524d2e49f2814e87875c1a5e911688027e8a3d91/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fr2-wrpie.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/524d2e49f2814e87875c1a5e911688027e8a3d91/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fr2-wrpie.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fr2-wrpie.c?ref=524d2e49f2814e87875c1a5e911688027e8a3d91", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=r2\" } */\n+/* { dg-final { scan-assembler \"wrpie\" } } */\n+\n+int\n+foo (int a)\n+{\n+  int b;\n+\n+  b = __builtin_wrpie (a);\n+  a = __builtin_wrpie (b);\n+\n+  return a + b;\n+}"}]}