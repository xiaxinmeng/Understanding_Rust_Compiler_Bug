{"sha": "1bfbe9adbc554930163eb551f9904cf4fe096696", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJmYmU5YWRiYzU1NDkzMDE2M2ViNTUxZjk5MDRjZjRmZTA5NjY5Ng==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-01-25T23:13:31Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-01-25T23:13:31Z"}, "message": "compiler: look through aliases when looking for methods\n    \n    Add a Type::is_alias method to remove some existing loops and avoid\n    adding a new one.\n    \n    Test case is https://golang.org/cl/89935.\n    \n    Fixes golang/go#23489\n    \n    Reviewed-on: https://go-review.googlesource.com/89975\n\nFrom-SVN: r257069", "tree": {"sha": "62d1d4ee4dddd626ab695de3285ec42ac4e5d60f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62d1d4ee4dddd626ab695de3285ec42ac4e5d60f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bfbe9adbc554930163eb551f9904cf4fe096696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bfbe9adbc554930163eb551f9904cf4fe096696", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bfbe9adbc554930163eb551f9904cf4fe096696", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bfbe9adbc554930163eb551f9904cf4fe096696/comments", "author": null, "committer": null, "parents": [{"sha": "a14e122ae2ecf27a8cace7e0d1dda8606d5e4eca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a14e122ae2ecf27a8cace7e0d1dda8606d5e4eca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a14e122ae2ecf27a8cace7e0d1dda8606d5e4eca"}], "stats": {"total": 71, "additions": 49, "deletions": 22}, "files": [{"sha": "25801a67cd8748c839f50ee4a6dc706ee6f3edb4", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bfbe9adbc554930163eb551f9904cf4fe096696/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bfbe9adbc554930163eb551f9904cf4fe096696/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=1bfbe9adbc554930163eb551f9904cf4fe096696", "patch": "@@ -1,4 +1,4 @@\n-203cbe7d3820fa03c965a01f72461f71588fe952\n+897ce971b06a39c217d02dce9e1361bc7a240188\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "3ee98844d3b8f34df18b2475513bd8f5e81c1166", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 39, "deletions": 21, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bfbe9adbc554930163eb551f9904cf4fe096696/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bfbe9adbc554930163eb551f9904cf4fe096696/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=1bfbe9adbc554930163eb551f9904cf4fe096696", "patch": "@@ -107,6 +107,34 @@ Type::forwarded() const\n   return t;\n }\n \n+// Skip alias definitions.\n+\n+Type*\n+Type::unalias()\n+{\n+  Type* t = this->forwarded();\n+  Named_type* nt = t->named_type();\n+  while (nt != NULL && nt->is_alias())\n+    {\n+      t = nt->real_type()->forwarded();\n+      nt = t->named_type();\n+    }\n+  return t;\n+}\n+\n+const Type*\n+Type::unalias() const\n+{\n+  const Type* t = this->forwarded();\n+  const Named_type* nt = t->named_type();\n+  while (nt != NULL && nt->is_alias())\n+    {\n+      t = nt->real_type()->forwarded();\n+      nt = t->named_type();\n+    }\n+  return t;\n+}\n+\n // If this is a named type, return it.  Otherwise, return NULL.\n \n Named_type*\n@@ -333,15 +361,9 @@ Type::are_identical_cmp_tags(const Type* t1, const Type* t2, Cmp_tags cmp_tags,\n       return errors_are_identical ? true : t1 == t2;\n     }\n \n-  // Skip defined forward declarations.\n-  t1 = t1->forwarded();\n-  t2 = t2->forwarded();\n-\n-  // Ignore aliases for purposes of type identity.\n-  while (t1->named_type() != NULL && t1->named_type()->is_alias())\n-    t1 = t1->named_type()->real_type()->forwarded();\n-  while (t2->named_type() != NULL && t2->named_type()->is_alias())\n-    t2 = t2->named_type()->real_type()->forwarded();\n+  // Skip defined forward declarations.  Ignore aliases.\n+  t1 = t1->unalias();\n+  t2 = t2->unalias();\n \n   if (t1 == t2)\n     return true;\n@@ -1197,9 +1219,7 @@ Type::finish_backend(Gogo* gogo, Btype *placeholder)\n Bexpression*\n Type::type_descriptor_pointer(Gogo* gogo, Location location)\n {\n-  Type* t = this->forwarded();\n-  while (t->named_type() != NULL && t->named_type()->is_alias())\n-    t = t->named_type()->real_type()->forwarded();\n+  Type* t = this->unalias();\n   if (t->type_descriptor_var_ == NULL)\n     {\n       t->make_type_descriptor_var(gogo);\n@@ -1648,10 +1668,10 @@ Type::type_functions(Gogo* gogo, Named_type* name, Function_type* hash_fntype,\n \t\t     Function_type* equal_fntype, Named_object** hash_fn,\n \t\t     Named_object** equal_fn)\n {\n-  // If this loop leaves NAME as NULL, then the type does not have a\n-  // name after all.\n-  while (name != NULL && name->is_alias())\n-    name = name->real_type()->named_type();\n+  // If the unaliased type is not a named type, then the type does not\n+  // have a name after all.\n+  if (name != NULL)\n+    name = name->unalias()->named_type();\n \n   if (!this->is_comparable())\n     {\n@@ -2370,9 +2390,7 @@ static const int64_t max_ptrmask_bytes = 2048;\n Bexpression*\n Type::gc_symbol_pointer(Gogo* gogo)\n {\n-  Type* t = this->forwarded();\n-  while (t->named_type() != NULL && t->named_type()->is_alias())\n-    t = t->named_type()->real_type()->forwarded();\n+  Type* t = this->unalias();\n \n   if (!t->has_pointer())\n     return gogo->backend()->nil_pointer_expression();\n@@ -11494,9 +11512,9 @@ Type::find_field_or_method(const Type* type,\n \t\t\t   std::string* ambig2)\n {\n   // Named types can have locally defined methods.\n-  const Named_type* nt = type->named_type();\n+  const Named_type* nt = type->unalias()->named_type();\n   if (nt == NULL && type->points_to() != NULL)\n-    nt = type->points_to()->named_type();\n+    nt = type->points_to()->unalias()->named_type();\n   if (nt != NULL)\n     {\n       Named_object* no = nt->find_local_method(name);"}, {"sha": "2703319554f7ffd129c20b4635d44e2dff2e0e7c", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bfbe9adbc554930163eb551f9904cf4fe096696/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bfbe9adbc554930163eb551f9904cf4fe096696/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=1bfbe9adbc554930163eb551f9904cf4fe096696", "patch": "@@ -676,6 +676,15 @@ class Type\n   const Type*\n   forwarded() const;\n \n+  // Return the type skipping any alias definitions and any defined\n+  // forward declarations.  This is like forwarded, but also\n+  // recursively expands alias definitions to the aliased type.\n+  Type*\n+  unalias();\n+\n+  const Type*\n+  unalias() const;\n+\n   // Return true if this is a basic type: a type which is not composed\n   // of other types, and is not void.\n   bool"}]}