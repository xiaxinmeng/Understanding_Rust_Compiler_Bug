{"sha": "3d01c7c2f20ffc062d01a525b8e567931c2b089c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2QwMWM3YzJmMjBmZmMwNjJkMDFhNTI1YjhlNTY3OTMxYzJiMDg5Yw==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2019-04-08T19:45:48Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2019-04-08T19:45:48Z"}, "message": "Fix visit<R> for variant.\n\n* include/std/variant (__do_visit): Add a template parameter\nfor enforcing same return types for visit.\n(__gen_vtable_impl): Likewise.\n(_S_apply_single_alt): Adjust.\n(__visit_invoke_impl): New. Handle casting to void.\n(__do_visit_invoke): New. Enforces same return types.\n(__do_visit_invoke_r): New. Converts return types.\n(__visit_invoke): Adjust.\n(__gen_vtable):  Add a template parameter for enforcing\nsame return types for visit.\n* testsuite/20_util/variant/visit_r.cc: Add a test for a visitor with\ndifferent return types.\n* testsuite/20_util/variant/visit_neg.cc: New. Ensures that\nvisitors with different return types don't accidentally\ncompile with regular visitation.\n\nFrom-SVN: r270216", "tree": {"sha": "bfb9c683a02f50f55e7e54b9010f95a168dd8b3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfb9c683a02f50f55e7e54b9010f95a168dd8b3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d01c7c2f20ffc062d01a525b8e567931c2b089c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d01c7c2f20ffc062d01a525b8e567931c2b089c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d01c7c2f20ffc062d01a525b8e567931c2b089c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d01c7c2f20ffc062d01a525b8e567931c2b089c/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15f4769a12dd1640fcf6608c34eea46d8da86fbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15f4769a12dd1640fcf6608c34eea46d8da86fbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15f4769a12dd1640fcf6608c34eea46d8da86fbb"}], "stats": {"total": 156, "additions": 140, "deletions": 16}, "files": [{"sha": "f363c44df4ae10e90a1a18e1bc0e52ff20947426", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d01c7c2f20ffc062d01a525b8e567931c2b089c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d01c7c2f20ffc062d01a525b8e567931c2b089c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3d01c7c2f20ffc062d01a525b8e567931c2b089c", "patch": "@@ -1,3 +1,22 @@\n+2019-04-08  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tFix visit<R> for variant.\n+\t* include/std/variant (__do_visit): Add a template parameter\n+\tfor enforcing same return types for visit.\n+\t(__gen_vtable_impl): Likewise.\n+\t(_S_apply_single_alt): Adjust.\n+\t(__visit_invoke_impl): New. Handle casting to void.\n+\t(__do_visit_invoke): New. Enforces same return types.\n+\t(__do_visit_invoke_r): New. Converts return types.\n+\t(__visit_invoke): Adjust.\n+\t(__gen_vtable):  Add a template parameter for enforcing\n+\tsame return types for visit.\n+\t* testsuite/20_util/variant/visit_r.cc: Add a test for a visitor with\n+\tdifferent return types.\n+\t* testsuite/20_util/variant/visit_neg.cc: New. Ensures that\n+\tvisitors with different return types don't accidentally\n+\tcompile with regular visitation.\n+\n 2019-04-08  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* testsuite/27_io/filesystem/iterators/caching.cc: Add"}, {"sha": "7bab47231e73215435da6ceb3242fbd5c510e8d4", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 62, "deletions": 16, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d01c7c2f20ffc062d01a525b8e567931c2b089c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d01c7c2f20ffc062d01a525b8e567931c2b089c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=3d01c7c2f20ffc062d01a525b8e567931c2b089c", "patch": "@@ -138,7 +138,9 @@ namespace __variant\n     constexpr variant_alternative_t<_Np, variant<_Types...>> const&&\n     get(const variant<_Types...>&&);\n \n-  template<bool __use_index=false, typename _Visitor, typename... _Variants>\n+  template<bool __use_index=false,\n+\t   bool __same_return_types = true,\n+\t   typename _Visitor, typename... _Variants>\n     constexpr decltype(auto)\n     __do_visit(_Visitor&& __visitor, _Variants&&... __variants);\n \n@@ -868,12 +870,15 @@ namespace __variant\n   //                       tuple<V1&&, V2&&>, std::index_sequence<1, 2>>\n   // The returned multi-dimensional vtable can be fast accessed by the visitor\n   // using index calculation.\n-  template<typename _Array_type, typename _Variant_tuple, typename _Index_seq>\n+  template<bool __same_return_types,\n+\t   typename _Array_type, typename _Variant_tuple, typename _Index_seq>\n     struct __gen_vtable_impl;\n \n-  template<typename _Result_type, typename _Visitor, size_t... __dimensions,\n+  template<bool __same_return_types,\n+\t   typename _Result_type, typename _Visitor, size_t... __dimensions,\n \t   typename... _Variants, size_t... __indices>\n     struct __gen_vtable_impl<\n+        __same_return_types,\n \t_Multi_array<_Result_type (*)(_Visitor, _Variants...), __dimensions...>,\n \ttuple<_Variants...>, std::index_sequence<__indices...>>\n     {\n@@ -915,26 +920,31 @@ namespace __variant\n \t  if constexpr (__do_cookie)\n \t    {\n \t      __element = __gen_vtable_impl<\n+\t\t__same_return_types,\n \t\t_Tp,\n \t\ttuple<_Variants...>,\n \t\tstd::index_sequence<__indices..., __index>>::_S_apply();\n \t      *__cookie_element = __gen_vtable_impl<\n+\t\t__same_return_types,\n \t\t_Tp,\n \t\ttuple<_Variants...>,\n \t\tstd::index_sequence<__indices..., variant_npos>>::_S_apply();\n \t    }\n \t  else\n \t    {\n \t      __element = __gen_vtable_impl<\n+\t\t__same_return_types,\n \t\tremove_reference_t<decltype(__element)>, tuple<_Variants...>,\n \t\tstd::index_sequence<__indices..., __index>>::_S_apply();\n \t    }\n \t}\n     };\n \n-  template<typename _Result_type, typename _Visitor, typename... _Variants,\n+  template<bool __same_return_types,\n+\t   typename _Result_type, typename _Visitor, typename... _Variants,\n \t   size_t... __indices>\n     struct __gen_vtable_impl<\n+      __same_return_types,\n       _Multi_array<_Result_type (*)(_Visitor, _Variants...)>,\n \t\t   tuple<_Variants...>, std::index_sequence<__indices...>>\n     {\n@@ -952,25 +962,56 @@ namespace __variant\n \t}\n \n       static constexpr decltype(auto)\n-      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)\n+      __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)\n       {\n-\tif constexpr (is_same_v<_Result_type, __variant_idx_cookie>)\n-\t  return std::__invoke(std::forward<_Visitor>(__visitor),\n+       if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)\n+         return std::__invoke(std::forward<_Visitor>(__visitor),\n+            __element_by_index_or_cookie<__indices>(\n+              std::forward<_Variants>(__vars))...,\n+              integral_constant<size_t, __indices>()...);\n+        else if constexpr (!__same_return_types &&\n+\t\t\t   std::is_void_v<_Result_type>)\n+\t  return (void)std::__invoke(std::forward<_Visitor>(__visitor),\n \t    __element_by_index_or_cookie<__indices>(\n-\t      std::forward<_Variants>(__vars))...,\n-\t      integral_constant<size_t, __indices>()...);\n+\t      std::forward<_Variants>(__vars))...);\n \telse\n \t  return std::__invoke(std::forward<_Visitor>(__visitor),\n \t    __element_by_index_or_cookie<__indices>(\n \t      std::forward<_Variants>(__vars))...);\n       }\n \n+      static constexpr decltype(auto)\n+      __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)\n+      {\n+\treturn __visit_invoke_impl(std::forward<_Visitor>(__visitor),\n+\t\t\t\t   std::forward<_Variants>(__vars)...);\n+      }\n+\n+      static constexpr _Result_type\n+      __do_visit_invoke_r(_Visitor&& __visitor, _Variants... __vars)\n+      {\n+\treturn __visit_invoke_impl(std::forward<_Visitor>(__visitor),\n+\t\t\t\t   std::forward<_Variants>(__vars)...);\n+      }\n+\n+      static constexpr decltype(auto)\n+      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)\n+      {\n+\tif constexpr (__same_return_types)\n+\t  return __do_visit_invoke(std::forward<_Visitor>(__visitor),\n+\t\t\t\t   std::forward<_Variants>(__vars)...);\n+\telse\n+\t  return __do_visit_invoke_r(std::forward<_Visitor>(__visitor),\n+\t\t\t\t     std::forward<_Variants>(__vars)...);\n+      }\n+\n       static constexpr auto\n       _S_apply()\n       { return _Array_type{&__visit_invoke}; }\n     };\n \n-  template<typename _Result_type, typename _Visitor, typename... _Variants>\n+  template<bool __same_return_types,\n+\t   typename _Result_type, typename _Visitor, typename... _Variants>\n     struct __gen_vtable\n     {\n       using _Func_ptr = _Result_type (*)(_Visitor&&, _Variants...);\n@@ -981,7 +1022,8 @@ namespace __variant\n       static constexpr _Array_type\n       _S_apply()\n       {\n-\treturn __gen_vtable_impl<_Array_type, tuple<_Variants...>,\n+\treturn __gen_vtable_impl<__same_return_types,\n+\t\t\t\t _Array_type, tuple<_Variants...>,\n \t\t\t\t std::index_sequence<>>::_S_apply();\n       }\n \n@@ -1582,7 +1624,9 @@ namespace __variant\n \t  std::get<0>(std::forward<_Variants>(__variants))...);\n     }\n \n-  template<bool __use_index, typename _Visitor, typename... _Variants>\n+  template<bool __use_index,\n+\t   bool __same_return_types,\n+\t   typename _Visitor, typename... _Variants>\n     constexpr decltype(auto)\n     __do_visit(_Visitor&& __visitor, _Variants&&... __variants)\n     {\n@@ -1592,6 +1636,7 @@ namespace __variant\n \t           std::forward<_Variants>(__variants)...));\n \n       constexpr auto& __vtable = __detail::__variant::__gen_vtable<\n+\t__same_return_types,\n \t_Result_type, _Visitor&&, _Variants&&...>::_S_vtable;\n \n       auto __func_ptr = __vtable._M_access(__variants.index()...);\n@@ -1618,12 +1663,13 @@ namespace __variant\n       if ((__variants.valueless_by_exception() || ...))\n \t__throw_bad_variant_access(\"Unexpected index\");\n \n+\n       if constexpr (std::is_void_v<_Res>)\n-\t(void) __do_visit(std::forward<_Visitor>(__visitor),\n-\t\t\t  std::forward<_Variants>(__variants)...);\n+        (void) __do_visit<false, false>(std::forward<_Visitor>(__visitor),\n+\t\t\t\t\tstd::forward<_Variants>(__variants)...);\n       else\n-\treturn __do_visit(std::forward<_Visitor>(__visitor),\n-\t\t\t  std::forward<_Variants>(__variants)...);\n+\treturn __do_visit<false, false>(std::forward<_Visitor>(__visitor),\n+\t\t\t\t\tstd::forward<_Variants>(__variants)...);\n     }\n #endif\n "}, {"sha": "ae6fdd11b9589e0141e5f482ee1665baab764a29", "filename": "libstdc++-v3/testsuite/20_util/variant/visit_neg.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d01c7c2f20ffc062d01a525b8e567931c2b089c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fvisit_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d01c7c2f20ffc062d01a525b8e567931c2b089c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fvisit_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fvisit_neg.cc?ref=3d01c7c2f20ffc062d01a525b8e567931c2b089c", "patch": "@@ -0,0 +1,45 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <variant>\n+#include <testsuite_hooks.h>\n+\n+// { dg-error \"invalid conversion\" \"\" { target *-*-* } 0 }\n+// { dg-prune-output \"in 'constexpr' expansion\" }\n+\n+void\n+test01()\n+{\n+  {\n+    struct Visitor\n+    {\n+      double operator()(double) {return 0.02;}\n+      void operator()(int) {}\n+    };\n+    std::variant<int, double> v;\n+    std::visit(Visitor(), v);\n+  }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "55f5f8bcb9e59fa0d0611ceae558600097622b9e", "filename": "libstdc++-v3/testsuite/20_util/variant/visit_r.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d01c7c2f20ffc062d01a525b8e567931c2b089c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fvisit_r.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d01c7c2f20ffc062d01a525b8e567931c2b089c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fvisit_r.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fvisit_r.cc?ref=3d01c7c2f20ffc062d01a525b8e567931c2b089c", "patch": "@@ -42,8 +42,22 @@ test01()\n   static_assert(std::is_void_v<decltype(std::visit<void>(Visitor{}, v1, v2))>);\n }\n \n+void test02()\n+{\n+  struct Visitor\n+  {\n+    int operator()(double) {return 42;}\n+    double operator()(int) {return 0.02;}\n+  };\n+  std::variant<int, double> v;\n+  std::visit<int>(Visitor(), v);\n+  std::visit<const void>(Visitor(), v);\n+}\n+\n+\n int\n main()\n {\n   test01();\n+  test02();\n }"}]}