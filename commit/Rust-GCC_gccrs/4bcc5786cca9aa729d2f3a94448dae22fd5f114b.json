{"sha": "4bcc5786cca9aa729d2f3a94448dae22fd5f114b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJjYzU3ODZjY2E5YWE3MjlkMmYzYTk0NDQ4ZGFlMjJmZDVmMTE0Yg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2012-12-10T14:00:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-12-10T14:00:25Z"}, "message": "re PR tree-optimization/55107 (GCC in an infinite loop in PRE)\n\n2012-12-10  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/55107\n\t* tree-ssa-pre.c (struct pre_stats): Remove constified field.\n\t(bitmap_set_replace_value): Add gcc_unreachable.\n\t(do_regular_insertion): Re-write all_same handling.  Insert\n\tan assignment instead of a PHI in this case.\n\t(eliminate_bb): Record availability also for SSA names defined\n\tby a constant.\n\t(do_pre): Do not record constified events.\n\t(execute_fre): Likewise.\n\n\t* gcc.dg/torture/pr55107.c: New testcase.\n\t* gcc.dg/tree-ssa/ssa-pre-5.c: Adjust.\n\nFrom-SVN: r194358", "tree": {"sha": "785d5415c7292d7967f68b5385c500d00fa0d391", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/785d5415c7292d7967f68b5385c500d00fa0d391"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bcc5786cca9aa729d2f3a94448dae22fd5f114b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bcc5786cca9aa729d2f3a94448dae22fd5f114b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bcc5786cca9aa729d2f3a94448dae22fd5f114b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bcc5786cca9aa729d2f3a94448dae22fd5f114b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "46e8409ef20445db542d1a7c6023705c343c6d05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46e8409ef20445db542d1a7c6023705c343c6d05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46e8409ef20445db542d1a7c6023705c343c6d05"}], "stats": {"total": 152, "additions": 99, "deletions": 53}, "files": [{"sha": "00c7fef40a013748acff875c4a205b25741308bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcc5786cca9aa729d2f3a94448dae22fd5f114b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcc5786cca9aa729d2f3a94448dae22fd5f114b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4bcc5786cca9aa729d2f3a94448dae22fd5f114b", "patch": "@@ -1,3 +1,15 @@\n+2012-12-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/55107\n+\t* tree-ssa-pre.c (struct pre_stats): Remove constified field.\n+\t(bitmap_set_replace_value): Add gcc_unreachable.\n+\t(do_regular_insertion): Re-write all_same handling.  Insert\n+\tan assignment instead of a PHI in this case.\n+\t(eliminate_bb): Record availability also for SSA names defined\n+\tby a constant.\n+\t(do_pre): Do not record constified events.\n+\t(execute_fre): Likewise.\n+\n 2012-12-10  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* config/spu/spu.md: Replace \"operands\" with \"operands != NULL\" in"}, {"sha": "5ada4dbd8de51c9ac0fdfd0ebd7a630739d3a406", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcc5786cca9aa729d2f3a94448dae22fd5f114b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcc5786cca9aa729d2f3a94448dae22fd5f114b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4bcc5786cca9aa729d2f3a94448dae22fd5f114b", "patch": "@@ -1,3 +1,9 @@\n+2012-12-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/55107\n+\t* gcc.dg/torture/pr55107.c: New testcase.\n+\t* gcc.dg/tree-ssa/ssa-pre-5.c: Adjust.\n+\n 2012-12-10  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/asan/asan_test.cc: Sync from upstream."}, {"sha": "2402716be3015332977e30e65acd18d966ff915c", "filename": "gcc/testsuite/gcc.dg/torture/pr55107.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcc5786cca9aa729d2f3a94448dae22fd5f114b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55107.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcc5786cca9aa729d2f3a94448dae22fd5f114b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55107.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr55107.c?ref=4bcc5786cca9aa729d2f3a94448dae22fd5f114b", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+\n+typedef unsigned short uint16_t;\n+\n+uint16_t a, b;\n+\n+uint16_t f(void)\n+{\n+  int c, **p;\n+  short d = 2, e = 4;\n+\n+  for (;; b++)\n+    {\n+      int *j, k = 0;\n+\n+      for (; *j; j++)\n+\t{\n+\t  for(; c; c++)\n+\t    for(; k < 1; k++)\n+\t      {\n+\t\tshort *f = &d;\n+\n+\t\tif(b)\n+\t\t  return *f;\n+\t      }\n+\t}\n+\n+      if(!c)\n+\td *= e;\n+\n+      ((a = d) ? b = 0 : (**p ? : 1) != (d != 1 ? : (a = 0))) != (k ? a : 0)\n+\t  < (a *= c = k) && (**p = 0);\n+    }\n+}"}, {"sha": "d0e985f81a53123127be597b6ea551abb10a0226", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-pre-5.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcc5786cca9aa729d2f3a94448dae22fd5f114b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcc5786cca9aa729d2f3a94448dae22fd5f114b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-5.c?ref=4bcc5786cca9aa729d2f3a94448dae22fd5f114b", "patch": "@@ -12,5 +12,6 @@ foo (int i)\n }\n /* We should detect that a+b is the same along both edges, and replace it with\n    5  */\n-/* { dg-final { scan-tree-dump-times \"Constified: 1\" 1 \"pre\"} } */\n+/* { dg-final { scan-tree-dump-times \"Eliminated: 1\" 1 \"pre\"} } */\n+/* { dg-final { scan-tree-dump-times \"Insertions\" 0 \"pre\"} } */\n /* { dg-final { cleanup-tree-dump \"pre\" } } */"}, {"sha": "689d170eeeb874a71f218f8ab2dab016d0234a30", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 45, "deletions": 52, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcc5786cca9aa729d2f3a94448dae22fd5f114b/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcc5786cca9aa729d2f3a94448dae22fd5f114b/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=4bcc5786cca9aa729d2f3a94448dae22fd5f114b", "patch": "@@ -446,10 +446,6 @@ static struct\n \n   /* The number of new PHI nodes added by PRE.  */\n   int phis;\n-\n-  /* The number of values found constant.  */\n-  int constified;\n-\n } pre_stats;\n \n static bool do_partial_partial;\n@@ -867,6 +863,8 @@ bitmap_set_replace_value (bitmap_set_t set, unsigned int lookfor,\n \t  return;\n \t}\n     }\n+\n+  gcc_unreachable ();\n }\n \n /* Return true if two bitmap sets are equal.  */\n@@ -3325,7 +3323,8 @@ do_regular_insertion (basic_block block, basic_block dom)\n \n   FOR_EACH_VEC_ELT (exprs, i, expr)\n     {\n-      if (expr->kind != NAME)\n+      if (expr->kind == NARY\n+\t  || expr->kind == REFERENCE)\n \t{\n \t  unsigned int val;\n \t  bool by_some = false;\n@@ -3435,35 +3434,28 @@ do_regular_insertion (basic_block block, basic_block dom)\n \t  /* If all edges produce the same value and that value is\n \t     an invariant, then the PHI has the same value on all\n \t     edges.  Note this.  */\n-\t  else if (!cant_insert && all_same && eprime\n-\t\t   && (edoubleprime->kind == CONSTANT\n-\t\t       || edoubleprime->kind == NAME)\n-\t\t   && !value_id_constant_p (val))\n+\t  else if (!cant_insert && all_same)\n \t    {\n-\t      unsigned int j;\n-\t      bitmap_iterator bi;\n-\t      bitmap exprset = value_expressions[val];\n-\n-\t      unsigned int new_val = get_expr_value_id (edoubleprime);\n-\t      EXECUTE_IF_SET_IN_BITMAP (exprset, 0, j, bi)\n-\t\t{\n-\t\t  pre_expr expr = expression_for_id (j);\n-\n-\t\t  if (expr->kind == NAME)\n-\t\t    {\n-\t\t      vn_ssa_aux_t info = VN_INFO (PRE_EXPR_NAME (expr));\n-\t\t      /* Just reset the value id and valnum so it is\n-\t\t\t the same as the constant we have discovered.  */\n-\t\t      if (edoubleprime->kind == CONSTANT)\n-\t\t\t{\n-\t\t\t  info->valnum = PRE_EXPR_CONSTANT (edoubleprime);\n-\t\t\t  pre_stats.constified++;\n-\t\t\t}\n-\t\t      else\n-\t\t\tinfo->valnum = VN_INFO (PRE_EXPR_NAME (edoubleprime))->valnum;\n-\t\t      info->value_id = new_val;\n-\t\t    }\n-\t\t}\n+\t      gcc_assert (edoubleprime->kind == CONSTANT\n+\t\t\t  || edoubleprime->kind == NAME);\n+\n+\t      tree temp = make_temp_ssa_name (get_expr_type (expr),\n+\t\t\t\t\t      NULL, \"pretmp\");\n+\t      gimple assign = gimple_build_assign (temp,\n+\t\t\t\t\t\t   edoubleprime->kind == CONSTANT ? PRE_EXPR_CONSTANT (edoubleprime) : PRE_EXPR_NAME (edoubleprime));\n+\t      gimple_stmt_iterator gsi = gsi_after_labels (block);\n+\t      gsi_insert_before (&gsi, assign, GSI_NEW_STMT);\n+\n+\t      gimple_set_plf (assign, NECESSARY, false);\n+\t      VN_INFO_GET (temp)->value_id = val;\n+\t      VN_INFO (temp)->valnum = sccvn_valnum_from_value_id (val);\n+\t      if (VN_INFO (temp)->valnum == NULL_TREE)\n+\t\tVN_INFO (temp)->valnum = temp;\n+\t      bitmap_set_bit (inserted_exprs, SSA_NAME_VERSION (temp));\n+\t      pre_expr newe = get_or_alloc_expr_for_name (temp);\n+\t      add_to_value (val, newe);\n+\t      bitmap_value_replace_in_set (AVAIL_OUT (block), newe);\n+\t      bitmap_insert_into_set (NEW_SETS (block), newe);\n \t    }\n \t}\n     }\n@@ -3495,7 +3487,8 @@ do_partial_partial_insertion (basic_block block, basic_block dom)\n \n   FOR_EACH_VEC_ELT (exprs, i, expr)\n     {\n-      if (expr->kind != NAME)\n+      if (expr->kind == NARY\n+\t  || expr->kind == REFERENCE)\n \t{\n \t  unsigned int val;\n \t  bool by_all = true;\n@@ -4142,26 +4135,32 @@ eliminate_bb (dom_walk_data *, basic_block b)\n \n       /* Lookup the RHS of the expression, see if we have an\n \t available computation for it.  If so, replace the RHS with\n-\t the available computation.\n-\n-\t See PR43491.\n-\t We don't replace global register variable when it is a the RHS of\n-\t a single assign. We do replace local register variable since gcc\n-\t does not guarantee local variable will be allocated in register.  */\n+\t the available computation.  */\n       if (gimple_has_lhs (stmt)\n \t  && TREE_CODE (lhs) == SSA_NAME\n-\t  && !gimple_assign_ssa_name_copy_p (stmt)\n-\t  && (!gimple_assign_single_p (stmt)\n-\t      || (!is_gimple_min_invariant (rhs)\n-\t\t  && (gimple_assign_rhs_code (stmt) != VAR_DECL\n-\t\t      || !is_global_var (rhs)\n-\t\t      || !DECL_HARD_REGISTER (rhs))))\n \t  && !gimple_has_volatile_ops  (stmt))\n \t{\n \t  tree sprime;\n \t  gimple orig_stmt = stmt;\n \n \t  sprime = eliminate_avail (lhs);\n+\t  /* If there is no usable leader mark lhs as leader for its value.  */\n+\t  if (!sprime)\n+\t    eliminate_push_avail (lhs);\n+\n+\t  /* See PR43491.  Do not replace a global register variable when\n+\t     it is a the RHS of an assignment.  Do replace local register\n+\t     variables since gcc does not guarantee a local variable will\n+\t     be allocated in register.\n+\t     Do not perform copy propagation or undo constant propagation.  */\n+\t  if (gimple_assign_single_p (stmt)\n+\t      && (TREE_CODE (rhs) == SSA_NAME\n+\t\t  || is_gimple_min_invariant (rhs)\n+\t\t  || (TREE_CODE (rhs) == VAR_DECL\n+\t\t      && is_global_var (rhs)\n+\t\t      && DECL_HARD_REGISTER (rhs))))\n+\t    continue;\n+\n \t  if (!sprime)\n \t    {\n \t      /* If there is no existing usable leader but SCCVN thinks\n@@ -4208,10 +4207,6 @@ eliminate_bb (dom_walk_data *, basic_block b)\n \t      continue;\n \t    }\n \n-\t  /* If there is no usable leader mark lhs as leader for its value.  */\n-\t  if (!sprime)\n-\t    eliminate_push_avail (lhs);\n-\n \t  if (sprime\n \t      && sprime != lhs\n \t      && (rhs == NULL_TREE\n@@ -4742,7 +4737,6 @@ do_pre (void)\n   statistics_counter_event (cfun, \"PA inserted\", pre_stats.pa_insert);\n   statistics_counter_event (cfun, \"New PHIs\", pre_stats.phis);\n   statistics_counter_event (cfun, \"Eliminated\", pre_stats.eliminations);\n-  statistics_counter_event (cfun, \"Constified\", pre_stats.constified);\n \n   clear_expression_ids ();\n   remove_dead_inserted_code ();\n@@ -4823,7 +4817,6 @@ execute_fre (void)\n \n   statistics_counter_event (cfun, \"Insertions\", pre_stats.insertions);\n   statistics_counter_event (cfun, \"Eliminated\", pre_stats.eliminations);\n-  statistics_counter_event (cfun, \"Constified\", pre_stats.constified);\n \n   return todo;\n }"}]}