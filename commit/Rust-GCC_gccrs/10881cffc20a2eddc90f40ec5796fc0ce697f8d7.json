{"sha": "10881cffc20a2eddc90f40ec5796fc0ce697f8d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA4ODFjZmZjMjBhMmVkZGM5MGY0MGVjNTc5NmZjMGNlNjk3ZjhkNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-01-29T07:43:14Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-01-29T07:43:14Z"}, "message": "re PR ipa/64801 (kernel build failure due to ICF)\n\n\tPR ipa/64801\n\t* gcc.dg/tree-ssa/pr64801.c: New testcase.\n\t* cgraphunit.c (init_lowered_empty_function): Add CoUNT parameter;\n\tmake sane BB profile.\n\t(cgraph_node::expand_thunk): Make sane BB profile.\n\t(cgraph_node::create_wrapper): Do not set call_stmt_cannot_inline_p.\n\t* cgraph.h (init_lowered_empty_function): Update prototype.\n\t* config/i386/i386.c (make_resolver_func): Update call.\n\t* predict.c (gate): Disable branch prediction pass if\n\tprofile is already there.\n\nFrom-SVN: r220230", "tree": {"sha": "f011650fc0f421082a967c18e661f127af6f2860", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f011650fc0f421082a967c18e661f127af6f2860"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10881cffc20a2eddc90f40ec5796fc0ce697f8d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10881cffc20a2eddc90f40ec5796fc0ce697f8d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10881cffc20a2eddc90f40ec5796fc0ce697f8d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10881cffc20a2eddc90f40ec5796fc0ce697f8d7/comments", "author": null, "committer": null, "parents": [{"sha": "bea30e0dea2888c88064fcebc106ef1647b16897", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bea30e0dea2888c88064fcebc106ef1647b16897", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bea30e0dea2888c88064fcebc106ef1647b16897"}], "stats": {"total": 98, "additions": 84, "deletions": 14}, "files": [{"sha": "1471b218cf03e0fa3cb1cc171bd7b19bfb51357d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10881cffc20a2eddc90f40ec5796fc0ce697f8d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10881cffc20a2eddc90f40ec5796fc0ce697f8d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10881cffc20a2eddc90f40ec5796fc0ce697f8d7", "patch": "@@ -1,3 +1,15 @@\n+2015-01-29  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/64801\n+\t* cgraphunit.c (init_lowered_empty_function): Add CoUNT parameter;\n+\tmake sane BB profile.\n+\t(cgraph_node::expand_thunk): Make sane BB profile.\n+\t(cgraph_node::create_wrapper): Do not set call_stmt_cannot_inline_p.\n+\t* cgraph.h (init_lowered_empty_function): Update prototype.\n+\t* config/i386/i386.c (make_resolver_func): Update call.\n+\t* predict.c (gate): Disable branch prediction pass if\n+\tprofile is already there.\n+\n 2015-01-29  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* optc-save-gen.awk: flag_fp_contract_mode is no longer speical."}, {"sha": "40e6c6c767c51513ff9d009d7028d9ab6cb889b0", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10881cffc20a2eddc90f40ec5796fc0ce697f8d7/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10881cffc20a2eddc90f40ec5796fc0ce697f8d7/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=10881cffc20a2eddc90f40ec5796fc0ce697f8d7", "patch": "@@ -2194,7 +2194,7 @@ void cgraphunit_c_finalize (void);\n \n /*  Initialize datastructures so DECL is a function in lowered gimple form.\n     IN_SSA is true if the gimple is in SSA.  */\n-basic_block init_lowered_empty_function (tree, bool);\n+basic_block init_lowered_empty_function (tree, bool, gcov_type);\n \n /* In cgraphclones.c  */\n "}, {"sha": "a2650f724c1db9476fbebff4f6d5a231ecfa91c2", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 41, "deletions": 12, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10881cffc20a2eddc90f40ec5796fc0ce697f8d7/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10881cffc20a2eddc90f40ec5796fc0ce697f8d7/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=10881cffc20a2eddc90f40ec5796fc0ce697f8d7", "patch": "@@ -1325,9 +1325,10 @@ mark_functions_to_output (void)\n    return basic block in the function body.  */\n \n basic_block\n-init_lowered_empty_function (tree decl, bool in_ssa)\n+init_lowered_empty_function (tree decl, bool in_ssa, gcov_type count)\n {\n   basic_block bb;\n+  edge e;\n \n   current_function_decl = decl;\n   allocate_struct_function (decl, false);\n@@ -1353,9 +1354,19 @@ init_lowered_empty_function (tree decl, bool in_ssa)\n   loops_for_fn (cfun)->state |= LOOPS_MAY_HAVE_MULTIPLE_LATCHES;\n \n   /* Create BB for body of the function and connect it properly.  */\n+  ENTRY_BLOCK_PTR_FOR_FN (cfun)->count = count;\n+  ENTRY_BLOCK_PTR_FOR_FN (cfun)->frequency = REG_BR_PROB_BASE;\n+  EXIT_BLOCK_PTR_FOR_FN (cfun)->count = count;\n+  EXIT_BLOCK_PTR_FOR_FN (cfun)->frequency = REG_BR_PROB_BASE;\n   bb = create_basic_block (NULL, (void *) 0, ENTRY_BLOCK_PTR_FOR_FN (cfun));\n-  make_edge (ENTRY_BLOCK_PTR_FOR_FN (cfun), bb, EDGE_FALLTHRU);\n-  make_edge (bb, EXIT_BLOCK_PTR_FOR_FN (cfun), 0);\n+  bb->count = count;\n+  bb->frequency = BB_FREQ_MAX;\n+  e = make_edge (ENTRY_BLOCK_PTR_FOR_FN (cfun), bb, EDGE_FALLTHRU);\n+  e->count = count;\n+  e->probability = REG_BR_PROB_BASE;\n+  e = make_edge (bb, EXIT_BLOCK_PTR_FOR_FN (cfun), 0);\n+  e->count = count;\n+  e->probability = REG_BR_PROB_BASE;\n   add_bb_to_loop (bb, ENTRY_BLOCK_PTR_FOR_FN (cfun)->loop_father);\n \n   return bb;\n@@ -1578,7 +1589,8 @@ cgraph_node::expand_thunk (bool output_asm_thunks, bool force_gimple_thunk)\n       else\n \tresdecl = DECL_RESULT (thunk_fndecl);\n \n-      bb = then_bb = else_bb = return_bb = init_lowered_empty_function (thunk_fndecl, true);\n+      bb = then_bb = else_bb = return_bb\n+\t= init_lowered_empty_function (thunk_fndecl, true, count);\n \n       bsi = gsi_start_bb (bb);\n \n@@ -1654,13 +1666,20 @@ cgraph_node::expand_thunk (bool output_asm_thunks, bool force_gimple_thunk)\n \t      if (TREE_CODE (TREE_TYPE (restmp)) == POINTER_TYPE)\n \t\t{\n \t\t  gimple stmt;\n+\t\t  edge e;\n \t\t  /* If the return type is a pointer, we need to\n \t\t     protect against NULL.  We know there will be an\n \t\t     adjustment, because that's why we're emitting a\n \t\t     thunk.  */\n \t\t  then_bb = create_basic_block (NULL, (void *) 0, bb);\n+\t\t  then_bb->count = count - count / 16;\n+\t\t  then_bb->frequency = BB_FREQ_MAX - BB_FREQ_MAX / 16;\n \t\t  return_bb = create_basic_block (NULL, (void *) 0, then_bb);\n+\t\t  return_bb->count = count;\n+\t\t  return_bb->frequency = BB_FREQ_MAX;\n \t\t  else_bb = create_basic_block (NULL, (void *) 0, else_bb);\n+\t\t  then_bb->count = count / 16;\n+\t\t  then_bb->frequency = BB_FREQ_MAX / 16;\n \t\t  add_bb_to_loop (then_bb, bb->loop_father);\n \t\t  add_bb_to_loop (return_bb, bb->loop_father);\n \t\t  add_bb_to_loop (else_bb, bb->loop_father);\n@@ -1670,11 +1689,21 @@ cgraph_node::expand_thunk (bool output_asm_thunks, bool force_gimple_thunk)\n \t\t\t\t\t    build_zero_cst (TREE_TYPE (restmp)),\n \t\t\t\t\t    NULL_TREE, NULL_TREE);\n \t\t  gsi_insert_after (&bsi, stmt, GSI_NEW_STMT);\n-\t\t  make_edge (bb, then_bb, EDGE_TRUE_VALUE);\n-\t\t  make_edge (bb, else_bb, EDGE_FALSE_VALUE);\n-\t\t  make_edge (return_bb, EXIT_BLOCK_PTR_FOR_FN (cfun), 0);\n-\t\t  make_edge (then_bb, return_bb, EDGE_FALLTHRU);\n-\t\t  make_edge (else_bb, return_bb, EDGE_FALLTHRU);\n+\t\t  e = make_edge (bb, then_bb, EDGE_TRUE_VALUE);\n+\t\t  e->probability = REG_BR_PROB_BASE - REG_BR_PROB_BASE / 16;\n+\t\t  e->count = count - count / 16;\n+\t\t  e = make_edge (bb, else_bb, EDGE_FALSE_VALUE);\n+\t\t  e->probability = REG_BR_PROB_BASE / 16;\n+\t\t  e->count = count / 16;\n+\t\t  e = make_edge (return_bb, EXIT_BLOCK_PTR_FOR_FN (cfun), 0);\n+\t\t  e->probability = REG_BR_PROB_BASE;\n+\t\t  e->count = count;\n+\t\t  e = make_edge (then_bb, return_bb, EDGE_FALLTHRU);\n+\t\t  e->probability = REG_BR_PROB_BASE;\n+\t\t  e->count = count - count / 16;\n+\t\t  e = make_edge (else_bb, return_bb, EDGE_FALLTHRU);\n+\t\t  e->probability = REG_BR_PROB_BASE;\n+\t\t  e->count = count / 16;\n \t\t  bsi = gsi_last_bb (then_bb);\n \t\t}\n \n@@ -1708,6 +1737,8 @@ cgraph_node::expand_thunk (bool output_asm_thunks, bool force_gimple_thunk)\n \t}\n \n       cfun->gimple_df->in_ssa_p = true;\n+      profile_status_for_fn (cfun)\n+        = count ? PROFILE_READ : PROFILE_GUESSED;\n       /* FIXME: C++ FE should stop setting TREE_ASM_WRITTEN on thunks.  */\n       TREE_ASM_WRITTEN (thunk_fndecl) = false;\n       delete_unreachable_blocks ();\n@@ -2415,8 +2446,7 @@ cgraph_node::create_wrapper (cgraph_node *target)\n   definition = true;\n   thunk.thunk_p = true;\n   thunk.this_adjusting = false;\n-\n-  cgraph_edge *e = create_edge (target, NULL, 0, CGRAPH_FREQ_BASE);\n+  create_edge (target, NULL, count, CGRAPH_FREQ_BASE);\n \n   tree arguments = DECL_ARGUMENTS (decl);\n \n@@ -2427,7 +2457,6 @@ cgraph_node::create_wrapper (cgraph_node *target)\n     }\n \n   expand_thunk (false, true);\n-  e->call_stmt_cannot_inline_p = true;\n \n   /* Inline summary set-up.  */\n   analyze ();"}, {"sha": "1db80709bea0ed13244c9898f1df40587799ee22", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10881cffc20a2eddc90f40ec5796fc0ce697f8d7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10881cffc20a2eddc90f40ec5796fc0ce697f8d7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=10881cffc20a2eddc90f40ec5796fc0ce697f8d7", "patch": "@@ -35145,7 +35145,7 @@ make_resolver_func (const tree default_decl,\n \n   gimplify_function_tree (decl);\n   push_cfun (DECL_STRUCT_FUNCTION (decl));\n-  *empty_bb = init_lowered_empty_function (decl, false);\n+  *empty_bb = init_lowered_empty_function (decl, false, 0);\n \n   cgraph_node::add_new_function (decl, true);\n   symtab->call_cgraph_insertion_hooks (cgraph_node::get_create (decl));"}, {"sha": "67d5d20102b24d27b5b7c206e5ad3e1e2dd7acaf", "filename": "gcc/predict.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10881cffc20a2eddc90f40ec5796fc0ce697f8d7/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10881cffc20a2eddc90f40ec5796fc0ce697f8d7/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=10881cffc20a2eddc90f40ec5796fc0ce697f8d7", "patch": "@@ -3050,6 +3050,9 @@ pass_profile::execute (function *fun)\n {\n   unsigned nb_loops;\n \n+  if (profile_status_for_fn (cfun) == PROFILE_GUESSED)\n+    return 0;\n+\n   loop_optimizer_init (LOOPS_NORMAL);\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     flow_loops_dump (dump_file, NULL, 0);"}, {"sha": "a0fbef7c30b20ca5cfe1b6df612073d23bafe02c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10881cffc20a2eddc90f40ec5796fc0ce697f8d7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10881cffc20a2eddc90f40ec5796fc0ce697f8d7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=10881cffc20a2eddc90f40ec5796fc0ce697f8d7", "patch": "@@ -1,3 +1,8 @@\n+2015-01-29  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/64801\n+\t* gcc.dg/tree-ssa/pr64801.c: New testcase.\n+\n 2015-01-28  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/64659"}, {"sha": "8d07b3018ca7404866bfe05306fa578025203dff", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr64801.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10881cffc20a2eddc90f40ec5796fc0ce697f8d7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr64801.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10881cffc20a2eddc90f40ec5796fc0ce697f8d7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr64801.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr64801.c?ref=10881cffc20a2eddc90f40ec5796fc0ce697f8d7", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+int a;\n+int\n+elantech_detect (void)\n+{\n+  return -38;\n+}\n+inline int\n+fsp_detect (void)\n+{\n+  return -38;\n+}\n+void\n+psmouse_extensions (void)\n+{\n+  int (*b)() = fsp_detect;\n+  a = b ();\n+}\n+/* { dg-final { scan-tree-dump-not \"fsp_detect\"} } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}]}