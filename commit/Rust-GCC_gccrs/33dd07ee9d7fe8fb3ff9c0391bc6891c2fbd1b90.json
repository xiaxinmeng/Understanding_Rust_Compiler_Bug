{"sha": "33dd07ee9d7fe8fb3ff9c0391bc6891c2fbd1b90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNkZDA3ZWU5ZDdmZThmYjNmZjljMDM5MWJjNjg5MWMyZmJkMWI5MA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-04-29T14:56:24Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-04-29T14:56:24Z"}, "message": "re PR c++/6492 (New boost regression (friends))\n\n\tPR c++/6492\n\t* pt.c (tsubst_friend_class): If the friend has an explicit scope,\n\tenter that scope before name lookup.\n\n\tPR c++/6486\n\t* method.c (do_build_copy_constructor): Avoid building\n\tcv-qualified reference types.\n\n\tPR c++/6486\n\t* g++.dg/template/friend6.C: New test.\n\n\tPR c++/6492\n\t* g++.dg/init/copy1.C: New test.\n\nFrom-SVN: r52895", "tree": {"sha": "bbfde17f6dfa4ed7c3ba43768c8a5d0cfd5fb3f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbfde17f6dfa4ed7c3ba43768c8a5d0cfd5fb3f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33dd07ee9d7fe8fb3ff9c0391bc6891c2fbd1b90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33dd07ee9d7fe8fb3ff9c0391bc6891c2fbd1b90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33dd07ee9d7fe8fb3ff9c0391bc6891c2fbd1b90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33dd07ee9d7fe8fb3ff9c0391bc6891c2fbd1b90/comments", "author": null, "committer": null, "parents": [{"sha": "d5482cdcb03e1da0d673ebac860cc77034026ac2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5482cdcb03e1da0d673ebac860cc77034026ac2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5482cdcb03e1da0d673ebac860cc77034026ac2"}], "stats": {"total": 105, "additions": 102, "deletions": 3}, "files": [{"sha": "9ad6e11b049528c23444d226e5d040e23f39184a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33dd07ee9d7fe8fb3ff9c0391bc6891c2fbd1b90/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33dd07ee9d7fe8fb3ff9c0391bc6891c2fbd1b90/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=33dd07ee9d7fe8fb3ff9c0391bc6891c2fbd1b90", "patch": "@@ -1,3 +1,13 @@\n+2002-04-29  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/6492\n+\t* pt.c (tsubst_friend_class): If the friend has an explicit scope,\n+\tenter that scope before name lookup.\n+\n+\tPR c++/6486\n+\t* method.c (do_build_copy_constructor): Avoid building\n+\tcv-qualified reference types.\n+  \n 2002-04-29  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/5719"}, {"sha": "b74bd285243f7f2fac890194349800d6e231d71f", "filename": "gcc/cp/method.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33dd07ee9d7fe8fb3ff9c0391bc6891c2fbd1b90/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33dd07ee9d7fe8fb3ff9c0391bc6891c2fbd1b90/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=33dd07ee9d7fe8fb3ff9c0391bc6891c2fbd1b90", "patch": "@@ -562,6 +562,7 @@ do_build_copy_constructor (fndecl)\n \t{\n \t  tree init;\n \t  tree field = fields;\n+\t  tree expr_type;\n \n \t  if (TREE_CODE (field) != FIELD_DECL)\n \t    continue;\n@@ -584,9 +585,15 @@ do_build_copy_constructor (fndecl)\n \t  else\n \t    continue;\n \n-\t  init = build (COMPONENT_REF,\n-\t                cp_build_qualified_type (TREE_TYPE (field), cvquals),\n-\t                init, field);\n+\t  /* Compute the type of \"init->field\".  If the copy-constructor\n+\t     parameter is, for example, \"const S&\", and the type of\n+\t     the field is \"T\", then the type will usually be \"const\n+\t     T\".  (There are no cv-qualified variants of reference\n+\t     types.)  */\n+\t  expr_type = TREE_TYPE (field);\n+\t  if (TREE_CODE (expr_type) != REFERENCE_TYPE)\n+\t    expr_type = cp_build_qualified_type (expr_type, cvquals);\n+\t  init = build (COMPONENT_REF, expr_type, init, field);\n \t  init = build_tree_list (NULL_TREE, init);\n \n \t  member_init_list"}, {"sha": "722263a9d9909951886b0cb5d4c780074a5a3d07", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33dd07ee9d7fe8fb3ff9c0391bc6891c2fbd1b90/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33dd07ee9d7fe8fb3ff9c0391bc6891c2fbd1b90/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=33dd07ee9d7fe8fb3ff9c0391bc6891c2fbd1b90", "patch": "@@ -1,3 +1,11 @@\n+2002-04-29  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/6486\n+\t* g++.dg/template/friend6.C: New test.\n+\n+\tPR c++/6492\n+\t* g++.dg/init/copy1.C: New test.\n+\n 2002-04-29  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.dg/warn/effc1.C: New test."}, {"sha": "91a84ae3e3cc8a68f5b6488517c92ca5f98cb757", "filename": "gcc/testsuite/g++.dg/init/copy1.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33dd07ee9d7fe8fb3ff9c0391bc6891c2fbd1b90/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fcopy1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33dd07ee9d7fe8fb3ff9c0391bc6891c2fbd1b90/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fcopy1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fcopy1.C?ref=33dd07ee9d7fe8fb3ff9c0391bc6891c2fbd1b90", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do compile }\n+\n+class A {\n+public:\n+    A(){}\n+    A( const A& a ){}\n+};\n+\n+class B  : public A\n+{\n+public:\n+  B( int& s) : s_(s){}\n+  int& s_;\n+};\n+\n+int main()\n+{\n+  int i;\n+  B x1( i );\n+  B x2( x1 );\n+}"}, {"sha": "e330d981892cfc2ce4bf2025c8db0c90e1c2909e", "filename": "gcc/testsuite/g++.dg/template/friend6.C", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33dd07ee9d7fe8fb3ff9c0391bc6891c2fbd1b90/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33dd07ee9d7fe8fb3ff9c0391bc6891c2fbd1b90/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend6.C?ref=33dd07ee9d7fe8fb3ff9c0391bc6891c2fbd1b90", "patch": "@@ -0,0 +1,53 @@\n+// { dg-do compile }\n+\n+namespace boost_no_member_template_friends{\n+\n+template <class T>\n+class foobar;\n+\n+template <class T>\n+class foo\n+{\n+private:\n+   template<typename Y> friend class foobar;\n+   template<typename Y> friend class foo;\n+   template<typename Y> friend bool must_be_friend_proc(const foo<Y>& f);\n+   int i;\n+public:\n+   foo(){ i = 0; }\n+   template <class U>\n+   foo(const foo<U>& f){ i = f.i; }\n+};\n+\n+template <class T>\n+class foo;\n+\n+template <class T>\n+bool must_be_friend_proc(const foo<T>& f);\n+\n+template <class T>\n+bool must_be_friend_proc(const foo<T>& f)\n+{ return f.i != 0; }\n+\n+template <class T>\n+class foobar\n+{\n+   int i;\n+public:\n+   template <class U>\n+   foobar(const foo<U>& f)\n+   { i = f.i; }\n+};\n+\n+\n+int test()\n+{\n+   foo<int> fi;\n+   foo<double> fd(fi);\n+   (void) &fd;           // avoid \"unused variable\" warning\n+   foobar<long> fb(fi);\n+   (void) &fb;           // avoid \"unused variable\" warning\n+   return 0;\n+}\n+\n+}"}]}