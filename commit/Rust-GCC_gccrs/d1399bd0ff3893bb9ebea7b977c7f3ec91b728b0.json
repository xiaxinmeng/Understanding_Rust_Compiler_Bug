{"sha": "d1399bd0ff3893bb9ebea7b977c7f3ec91b728b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDEzOTliZDBmZjM4OTNiYjllYmVhN2I5NzdjN2YzZWM5MWI3MjhiMA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1993-03-17T22:22:35Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1993-03-17T22:22:35Z"}, "message": "Add -mlong-calls.\n\nFrom-SVN: r3770", "tree": {"sha": "8ad954bb749bf726c6eb08ad4defbd6590900880", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ad954bb749bf726c6eb08ad4defbd6590900880"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1399bd0ff3893bb9ebea7b977c7f3ec91b728b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1399bd0ff3893bb9ebea7b977c7f3ec91b728b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1399bd0ff3893bb9ebea7b977c7f3ec91b728b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1399bd0ff3893bb9ebea7b977c7f3ec91b728b0/comments", "author": null, "committer": null, "parents": [{"sha": "16594451917dbcd49cd3031fd7cf65f10f6a8224", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16594451917dbcd49cd3031fd7cf65f10f6a8224", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16594451917dbcd49cd3031fd7cf65f10f6a8224"}], "stats": {"total": 78, "additions": 46, "deletions": 32}, "files": [{"sha": "f3ca4f09505baa896d3bc8a3fe7d019596cd4f9d", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1399bd0ff3893bb9ebea7b977c7f3ec91b728b0/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1399bd0ff3893bb9ebea7b977c7f3ec91b728b0/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=d1399bd0ff3893bb9ebea7b977c7f3ec91b728b0", "patch": "@@ -463,7 +463,7 @@ while (0)\n \f\n /* Print subsidiary information on the compiler version in use.  */\n \n-#define MIPS_VERSION \"[AL 1.1, MM 34]\"\n+#define MIPS_VERSION \"[AL 1.1, MM 35]\"\n \n #ifndef MACHINE_TYPE\n #define MACHINE_TYPE \"BSD Mips\"\n@@ -683,23 +683,18 @@ do {\t\t\t\t\t\t\t\\\n #define MASK_FLOAT64\t0x00000200\t/* fp registers are 64 bits */\n #define MASK_ABICALLS\t0x00000400\t/* emit .abicalls/.cprestore/.cpload */\n #define MASK_HALF_PIC\t0x00000800\t/* Emit OSF-style pic refs to externs*/\n-#define MASK_UNUSED1\t0x00001000\n-#define MASK_UNUSED2\t0x00002000\n-#define MASK_UNUSED3\t0x00004000\n-#define MASK_UNUSED4\t0x00008000\n-#define MASK_UNUSED5\t0x00010000\n-#define MASK_UNUSED6\t0x00020000\n-#define MASK_UNUSED7\t0x00040000\n-#define MASK_UNUSED8\t0x00080000\n+#define MASK_LONG_CALLS\t0x00001000\t/* Always call through a register */\n+#define MASK_UNUSED1\t0x00002000\n+#define MASK_UNUSED2\t0x00004000\n+#define MASK_UNUSED3\t0x00008000\n+#define MASK_UNUSED4\t0x00010000\n+#define MASK_UNUSED5\t0x00020000\n+#define MASK_UNUSED6\t0x00040000\n+#define MASK_UNUSED7\t0x00080000\n \n \t\t\t\t\t/* Dummy switches used only in spec's*/\n #define MASK_MIPS_TFILE\t0x00000000\t/* flag for mips-tfile usage */\n \n-\t\t\t\t\t/* switches not used yet */\n-#define MASK_WC8\t0x00000000\t/* wchar's are  8 bits, not 32 */\n-#define MASK_WC16\t0x00000000\t/* wchar's are 16 bits, not 32 */\n-#define MASK_WC32\t0x00000000\t/* dummy for consistency */\n-\n \t\t\t\t\t/* Debug switches, not documented */\n #define MASK_DEBUG\t0x40000000\t/* Eliminate version # in .s file */\n #define MASK_DEBUG_A\t0x20000000\t/* don't allow <label>($reg) addrs */\n@@ -755,15 +750,13 @@ do {\t\t\t\t\t\t\t\\\n \t\t\t\t\t/* OSF pic references to externs */\n #define TARGET_HALF_PIC\t\t(target_flags & MASK_HALF_PIC)\n \n-\t\t\t\t\t/* wchar size */\n-#define TARGET_WC8\t\t(target_flags & MASK_WC8)\n-#define TARGET_WC16\t\t(target_flags & MASK_WC16)\n-#define TARGET_WC32\t\t((target_flags & (MASK_WC8 | MASK_WC16)) == 0)\n-\n \t\t\t\t\t/* software floating point */\n #define TARGET_SOFT_FLOAT\t(target_flags & MASK_SOFT_FLOAT)\n #define TARGET_HARD_FLOAT\t(! TARGET_SOFT_FLOAT)\n \n+\t\t\t\t\t/* always call through a register */\n+#define TARGET_LONG_CALLS\t(target_flags & MASK_LONG_CALLS)\n+\n /* Macro to define tables used to set the flags.\n    This is a list in braces of pairs in braces,\n    each pair being { \"NAME\", VALUE }\n@@ -787,9 +780,6 @@ do {\t\t\t\t\t\t\t\\\n   {\"no-stats\",\t\t -MASK_STATS},\t\t\t\t\t\\\n   {\"memcpy\",\t\t  MASK_MEMCPY},\t\t\t\t\t\\\n   {\"no-memcpy\",\t\t -MASK_MEMCPY},\t\t\t\t\t\\\n-  {\"wc8\",\t\t  MASK_WC8},\t\t\t\t\t\\\n-  {\"wc16\",\t\t  MASK_WC16},\t\t\t\t\t\\\n-  {\"wc32\",\t\t  MASK_WC32},\t\t\t\t\t\\\n   {\"mips-tfile\",\t  MASK_MIPS_TFILE},\t\t\t\t\\\n   {\"no-mips-tfile\",\t -MASK_MIPS_TFILE},\t\t\t\t\\\n   {\"soft-float\",\t  MASK_SOFT_FLOAT},\t\t\t\t\\\n@@ -800,6 +790,8 @@ do {\t\t\t\t\t\t\t\\\n   {\"no-abicalls\",\t -MASK_ABICALLS},\t\t\t\t\\\n   {\"half-pic\",\t\t  MASK_HALF_PIC},\t\t\t\t\\\n   {\"no-half-pic\",\t -MASK_HALF_PIC},\t\t\t\t\\\n+  {\"long-calls\",\t  MASK_LONG_CALLS},\t\t\t\t\\\n+  {\"no-long-calls\",\t -MASK_LONG_CALLS},\t\t\t\t\\\n   {\"debug\",\t\t  MASK_DEBUG},\t\t\t\t\t\\\n   {\"debuga\",\t\t  MASK_DEBUG_A},\t\t\t\t\\\n   {\"debugb\",\t\t  MASK_DEBUG_B},\t\t\t\t\\"}, {"sha": "57ae3cb273ba4c48e3b86e99864718d83acbf18c", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1399bd0ff3893bb9ebea7b977c7f3ec91b728b0/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1399bd0ff3893bb9ebea7b977c7f3ec91b728b0/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=d1399bd0ff3893bb9ebea7b977c7f3ec91b728b0", "patch": "@@ -4054,7 +4054,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   if (operands[0])\t\t/* eliminate unused code warnings */\n     {\n       addr = XEXP (operands[0], 0);\n-      if (GET_CODE (addr) != REG && !CONSTANT_ADDRESS_P (addr))\n+      if (GET_CODE (addr) != REG && (!CONSTANT_ADDRESS_P (addr) || TARGET_LONG_CALLS))\n \tXEXP (operands[0], 0) = force_reg (FUNCTION_MODE, addr);\n \n       /* In order to pass small structures by value in registers\n@@ -4074,17 +4074,17 @@ move\\\\t%0,%z4\\\\n\\\\\n \t    emit_insn (RTVEC_ELT (adjust, i));\n \t}\n \n-      emit_call_insn (gen_call_internal (operands[0], operands[1],\n-\t\t\t\t\t gen_rtx (REG, Pmode, GP_REG_FIRST + 31)));\n+      emit_call_insn (gen_call_internal1 (operands[0], operands[1],\n+\t\t\t\t\t  gen_rtx (REG, Pmode, GP_REG_FIRST + 31)));\n       DONE;\n     }\n }\")\n \n-(define_insn \"call_internal\"\n+(define_insn \"call_internal1\"\n   [(call (match_operand 0 \"memory_operand\" \"m\")\n \t (match_operand 1 \"\" \"i\"))\n    (clobber (match_operand:SI 2 \"register_operand\" \"=d\"))]\n-  \"\"\n+  \"!TARGET_LONG_CALLS\"\n   \"*\n {\n   register rtx target = XEXP (operands[0], 0);\n@@ -4108,6 +4108,17 @@ move\\\\t%0,%z4\\\\n\\\\\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"1\")])\n \n+(define_insn \"call_internal2\"\n+  [(call (mem:SI (match_operand:SI 0 \"register_operand\" \"r\"))\n+\t (match_operand 1 \"\" \"i\"))\n+   (clobber (match_operand:SI 2 \"register_operand\" \"=d\"))]\n+  \"TARGET_LONG_CALLS\"\n+  \"%*jal\\\\t%2,%0\"\n+  [(set_attr \"type\"\t\"call\")\n+   (set_attr \"mode\"\t\"none\")\n+   (set_attr \"length\"\t\"1\")])\n+\n+\n ;; calls.c now passes a fourth argument, make saber happy\n \n (define_expand \"call_value\"\n@@ -4124,7 +4135,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   if (operands[0])\t\t/* eliminate unused code warning */\n     {\n       addr = XEXP (operands[1], 0);\n-      if (GET_CODE (addr) != REG && !CONSTANT_ADDRESS_P (addr))\n+      if (GET_CODE (addr) != REG && (!CONSTANT_ADDRESS_P (addr) || TARGET_LONG_CALLS))\n \tXEXP (operands[1], 0) = force_reg (FUNCTION_MODE, addr);\n \n       /* In order to pass small structures by value in registers\n@@ -4144,20 +4155,20 @@ move\\\\t%0,%z4\\\\n\\\\\n \t    emit_insn (RTVEC_ELT (adjust, i));\n \t}\n \n-      emit_call_insn (gen_call_value_internal (operands[0], operands[1], operands[2],\n-\t\t\t\t\t       gen_rtx (REG, Pmode, GP_REG_FIRST + 31)));\n+      emit_call_insn (gen_call_value_internal1 (operands[0], operands[1], operands[2],\n+\t\t\t\t\t        gen_rtx (REG, Pmode, GP_REG_FIRST + 31)));\n \n       DONE;\n     }\n \n }\")\n \n-(define_insn \"call_value_internal\"\n+(define_insn \"call_value_internal1\"\n   [(set (match_operand 0 \"register_operand\" \"=df\")\n         (call (match_operand 1 \"memory_operand\" \"m\")\n               (match_operand 2 \"\" \"i\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"=d\"))]\n-  \"\"\n+  \"!TARGET_LONG_CALLS\"\n   \"*\n {\n   register rtx target = XEXP (operands[1], 0);\n@@ -4181,6 +4192,17 @@ move\\\\t%0,%z4\\\\n\\\\\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"1\")])\n \n+(define_insn \"call_value_internal2\"\n+  [(set (match_operand 0 \"register_operand\" \"=df\")\n+        (call (mem:SI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t      (match_operand 2 \"\" \"i\")))\n+   (clobber (match_operand:SI 3 \"register_operand\" \"=d\"))]\n+  \"TARGET_LONG_CALLS\"\n+  \"%*jal\\\\t%3,%1\"\n+  [(set_attr \"type\"\t\"call\")\n+   (set_attr \"mode\"\t\"none\")\n+   (set_attr \"length\"\t\"1\")])\n+\n \f\n ;;\n ;;  ...................."}]}