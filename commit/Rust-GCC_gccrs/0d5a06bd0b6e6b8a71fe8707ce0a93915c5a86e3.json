{"sha": "0d5a06bd0b6e6b8a71fe8707ce0a93915c5a86e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ1YTA2YmQwYjZlNmI4YTcxZmU4NzA3Y2UwYTkzOTE1YzVhODZlMw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-04-19T20:53:06Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-04-19T20:53:06Z"}, "message": "cpphash.c (special_symbol): Represent an empty macro with \"\\r \\r \" not just \"\\r \".\n\n\t* cpphash.c (special_symbol): Represent an empty macro with\n\t\"\\r \\r \" not just \"\\r \".\n\t(_cpp_macroexpand): Correct condition for the foo ( ) special\n\tcase.\n\t(unsafe_chars): Handle EOF as second argument.\n\t(push_macro_expansion): Simplify test for removing escape at\n\tend.  Do not trim both escapes if there is no text in between.\n\n\t* gcc.dg/20000419-1.c: New test.\n\nFrom-SVN: r33267", "tree": {"sha": "c18dfee98cd0004a33f644025c4dfb4c94a3a231", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c18dfee98cd0004a33f644025c4dfb4c94a3a231"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d5a06bd0b6e6b8a71fe8707ce0a93915c5a86e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d5a06bd0b6e6b8a71fe8707ce0a93915c5a86e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d5a06bd0b6e6b8a71fe8707ce0a93915c5a86e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d5a06bd0b6e6b8a71fe8707ce0a93915c5a86e3/comments", "author": null, "committer": null, "parents": [{"sha": "b13fe8bfb261f1f8239507d4316cd2d0b158d990", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b13fe8bfb261f1f8239507d4316cd2d0b158d990", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b13fe8bfb261f1f8239507d4316cd2d0b158d990"}], "stats": {"total": 60, "additions": 46, "deletions": 14}, "files": [{"sha": "86d0cb38aa224dec34513b6d3be037dfbf0edfc7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d5a06bd0b6e6b8a71fe8707ce0a93915c5a86e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d5a06bd0b6e6b8a71fe8707ce0a93915c5a86e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d5a06bd0b6e6b8a71fe8707ce0a93915c5a86e3", "patch": "@@ -1,3 +1,13 @@\n+2000-04-19  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cpphash.c (special_symbol): Represent an empty macro with\n+\t\"\\r \\r \" not just \"\\r \".\n+\t(_cpp_macroexpand): Correct condition for the foo ( ) special\n+\tcase.\n+\t(unsafe_chars): Handle EOF as second argument.\n+\t(push_macro_expansion): Simplify test for removing escape at\n+\tend.  Do not trim both escapes if there is no text in between.\n+\n 2000-04-19  Jim Blandy  <jimb@redhat.com>\n \n \t* dwarf2out.c (DWARF2_ADDR_SIZE): New macro.  Use it instead"}, {"sha": "70d1147465da9836b06580679920337956b90ee4", "filename": "gcc/cpphash.c", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d5a06bd0b6e6b8a71fe8707ce0a93915c5a86e3/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d5a06bd0b6e6b8a71fe8707ce0a93915c5a86e3/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=0d5a06bd0b6e6b8a71fe8707ce0a93915c5a86e3", "patch": "@@ -908,7 +908,7 @@ special_symbol (hp, pfile)\n       if (!buf)\n \treturn;\n       if (*buf == '\\0')\n-\tbuf = \"\\r \";\n+\tbuf = \"\\r \\r \";\n \n       CPP_PUTS (pfile, buf, strlen (buf));\n       return;\n@@ -1075,14 +1075,14 @@ _cpp_macroexpand (pfile, hp)\n       if (token != CPP_RPAREN)\n \treturn;\n \n-      /* If we got one arg but it was just whitespace, call that 0 args.  */\n-      if (i == 1)\n+      /* foo ( ) is equivalent to foo () unless foo takes exactly one\n+\t argument, in which case the former is allowed and the latter\n+\t is not.  XXX C99 is silent on this rule, but it seems\n+\t inconsistent to me.  */\n+      if (i == 1 && nargs != 1)\n \t{\n \t  register U_CHAR *bp = ARG_BASE + args[0].raw;\n \t  register U_CHAR *lim = bp + args[0].raw_length;\n-\t  /* cpp.texi says for foo ( ) we provide one argument.\n-\t     However, if foo wants just 0 arguments, treat this as 0.  */\n-\t  if (nargs == 0)\n \t    while (bp != lim && is_space(*bp))\n \t      bp++;\n \t  if (bp == lim)\n@@ -1410,6 +1410,10 @@ unsafe_chars (pfile, c1, c2)\n      cpp_reader *pfile;\n      int c1, c2;\n {\n+  /* If c2 is EOF, that's always safe.  */\n+  if (c2 == EOF)\n+    return 0;\n+\n   switch (c1)\n     {\n     case EOF:\n@@ -1491,14 +1495,13 @@ push_macro_expansion (pfile, xbuf, len, hp)\n   /* Likewise, avoid the extra space at the end of the macro expansion\n      if this is safe.  We can do a better job here since we can know\n      what the next char will be.  */\n-  if (len >= 3\n-      && xbuf[len-2] == '\\r'\n-      && xbuf[len-1] == ' ')\n-    {\n-      int c = CPP_BUF_PEEK (CPP_BUFFER (pfile));\n-      if (c == EOF || !unsafe_chars (pfile, xbuf[len-3], c))\n-\tlen -= 2;\n-    }\n+  if (len >= 3 && xbuf[len-2] == '\\r' && xbuf[len-1] == ' '\n+      && !unsafe_chars (pfile, xbuf[len-3], CPP_BUF_PEEK (CPP_BUFFER (pfile))))\n+    len -= 2;\n+\n+  /* If the total expansion is \"\\r \\r\", we must not trim both escapes.  */\n+  if (len == 2 && advance_cur)\n+    advance_cur = 0;\n \n   mbuf = cpp_push_buffer (pfile, xbuf, len);\n   if (mbuf == NULL)"}, {"sha": "58dc414f3485d9f688bea4458c387c9dbcf28eba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d5a06bd0b6e6b8a71fe8707ce0a93915c5a86e3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d5a06bd0b6e6b8a71fe8707ce0a93915c5a86e3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0d5a06bd0b6e6b8a71fe8707ce0a93915c5a86e3", "patch": "@@ -1,3 +1,7 @@\n+2000-04-19  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* gcc.dg/20000419-1.c: New test.\n+\n Wed Apr 12 10:25:08 2000  Jeffrey A Law  (law@cygnus.com)\n \n \t* gcc.c-torture/execute/20000412-5.c: New test."}, {"sha": "1e1b660c2debd0cbe12f41553755fcfa94b2f178", "filename": "gcc/testsuite/gcc.dg/20000419-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d5a06bd0b6e6b8a71fe8707ce0a93915c5a86e3/gcc%2Ftestsuite%2Fgcc.dg%2F20000419-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d5a06bd0b6e6b8a71fe8707ce0a93915c5a86e3/gcc%2Ftestsuite%2Fgcc.dg%2F20000419-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20000419-1.c?ref=0d5a06bd0b6e6b8a71fe8707ce0a93915c5a86e3", "patch": "@@ -0,0 +1,15 @@\n+/* Test for erroneous deletion of the entire macro expansion when pruning\n+   \\r escapes.  Problem noted by DJ Delorie <dj@delorie.com>; test case\n+   distilled from GNU libc header files.  */\n+/* { dg-do preprocess } */\n+\n+#define __REDIRECT(name, proto, alias) name proto __asm__ (__ASMNAME (#alias))\n+#define __ASMNAME(cname)  __ASMNAME2 (__USER_LABEL_PREFIX__, cname)\n+#define __ASMNAME2(prefix, cname) __STRING (prefix) cname\n+#define __STRING(x)    #x\n+\n+__REDIRECT (a, b, c)\n+__ASMNAME2 (__USER_LABEL_PREFIX__, harumph)\n+\n+/* { dg-bogus \"used without args\" \"no args, 1\" { target native } 11 } */\n+/* { dg-bogus \"used without args\" \"no args, 1\" { target native } 12 } */"}]}