{"sha": "31316208638e76c2273a82864d32457a9cb9806d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzEzMTYyMDg2MzhlNzZjMjI3M2E4Mjg2NGQzMjQ1N2E5Y2I5ODA2ZA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-09-15T23:57:01Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-09-15T23:57:01Z"}, "message": "fix-it hints can't contain newlines\n\nI hope to implement newline support within fix-it hints at some point,\nbut currently it's not supported, and leads to misleading diagnostic\noutput, so for now, fail gracefully.\n\ngcc/ChangeLog:\n\t* diagnostic-show-locus.c\n\t(selftest::test_fixit_insert_containing_newline): New function.\n\t(selftest::test_fixit_replace_containing_newline): New function.\n\t(selftest::diagnostic_show_locus_c_tests): Call the above.\n\nlibcpp/ChangeLog:\n\t* include/line-map.h (class rich_location): Note that newlines\n\taren't supported in fix-it text.\n\t* line-map.c (rich_location::add_fixit_insert_before): Reject\n\tattempts to add fix-its containing newlines.\n\t(rich_location::add_fixit_replace): Likewise.\n\nFrom-SVN: r240169", "tree": {"sha": "802052306a708cf70c39ab01f29991c7f405d639", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/802052306a708cf70c39ab01f29991c7f405d639"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31316208638e76c2273a82864d32457a9cb9806d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31316208638e76c2273a82864d32457a9cb9806d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31316208638e76c2273a82864d32457a9cb9806d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31316208638e76c2273a82864d32457a9cb9806d/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "902d624f45c2be8ca865017539f0c224c913f146", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/902d624f45c2be8ca865017539f0c224c913f146", "html_url": "https://github.com/Rust-GCC/gccrs/commit/902d624f45c2be8ca865017539f0c224c913f146"}], "stats": {"total": 113, "additions": 113, "deletions": 0}, "files": [{"sha": "d103ae65fe40908e9820c9bfd47817fd5e74b097", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31316208638e76c2273a82864d32457a9cb9806d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31316208638e76c2273a82864d32457a9cb9806d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31316208638e76c2273a82864d32457a9cb9806d", "patch": "@@ -1,3 +1,10 @@\n+2016-09-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic-show-locus.c\n+\t(selftest::test_fixit_insert_containing_newline): New function.\n+\t(selftest::test_fixit_replace_containing_newline): New function.\n+\t(selftest::diagnostic_show_locus_c_tests): Call the above.\n+\n 2016-09-15  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/77503"}, {"sha": "f6bfcc9c8f33c665298bb7d84485940165145d61", "filename": "gcc/diagnostic-show-locus.c", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31316208638e76c2273a82864d32457a9cb9806d/gcc%2Fdiagnostic-show-locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31316208638e76c2273a82864d32457a9cb9806d/gcc%2Fdiagnostic-show-locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-show-locus.c?ref=31316208638e76c2273a82864d32457a9cb9806d", "patch": "@@ -2160,6 +2160,87 @@ test_fixit_consolidation (const line_table_case &case_)\n   }\n }\n \n+/* Insertion fix-it hint: adding a \"break;\" on a line by itself.\n+   This will fail, as newlines aren't yet supported.  */\n+\n+static void\n+test_fixit_insert_containing_newline (const line_table_case &case_)\n+{\n+  /* Create a tempfile and write some text to it.\n+     .........................0000000001111111.\n+     .........................1234567890123456.  */\n+  const char *old_content = (\"    case 'a':\\n\" /* line 1. */\n+\t\t\t     \"      x = a;\\n\"  /* line 2. */\n+\t\t\t     \"    case 'b':\\n\" /* line 3. */\n+\t\t\t     \"      x = b;\\n\");/* line 4. */\n+\n+  temp_source_file tmp (SELFTEST_LOCATION, \".c\", old_content);\n+  line_table_test ltt (case_);\n+  linemap_add (line_table, LC_ENTER, false, tmp.get_filename (), 3);\n+\n+  /* Add a \"break;\" on a line by itself before line 3 i.e. before\n+     column 1 of line 3. */\n+  location_t case_start = linemap_position_for_column (line_table, 5);\n+  location_t case_finish = linemap_position_for_column (line_table, 13);\n+  location_t case_loc = make_location (case_start, case_start, case_finish);\n+  rich_location richloc (line_table, case_loc);\n+  location_t line_start = linemap_position_for_column (line_table, 1);\n+  richloc.add_fixit_insert_before (line_start, \"      break;\\n\");\n+\n+  /* Newlines are not yet supported within fix-it hints, so\n+     the fix-it should not be displayed.  */\n+  ASSERT_TRUE (richloc.seen_impossible_fixit_p ());\n+\n+  if (case_finish > LINE_MAP_MAX_LOCATION_WITH_COLS)\n+    return;\n+\n+  test_diagnostic_context dc;\n+  diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+  ASSERT_STREQ (\"\\n\"\n+\t\t\"     case 'b':\\n\"\n+\t\t\"     ^~~~~~~~~\\n\",\n+\t\tpp_formatted_text (dc.printer));\n+}\n+\n+/* Replacement fix-it hint containing a newline.\n+   This will fail, as newlines aren't yet supported.  */\n+\n+static void\n+test_fixit_replace_containing_newline (const line_table_case &case_)\n+{\n+  /* Create a tempfile and write some text to it.\n+    .........................0000000001111.\n+    .........................1234567890123.  */\n+  const char *old_content = \"foo = bar ();\\n\";\n+\n+  temp_source_file tmp (SELFTEST_LOCATION, \".c\", old_content);\n+  line_table_test ltt (case_);\n+  linemap_add (line_table, LC_ENTER, false, tmp.get_filename (), 1);\n+\n+  /* Replace the \" = \" with \"\\n  = \", as if we were reformatting an\n+     overly long line.  */\n+  location_t start = linemap_position_for_column (line_table, 4);\n+  location_t finish = linemap_position_for_column (line_table, 6);\n+  location_t loc = linemap_position_for_column (line_table, 13);\n+  rich_location richloc (line_table, loc);\n+  source_range range = source_range::from_locations (start, finish);\n+  richloc.add_fixit_replace (range, \"\\n =\");\n+\n+  /* Newlines are not yet supported within fix-it hints, so\n+     the fix-it should not be displayed.  */\n+  ASSERT_TRUE (richloc.seen_impossible_fixit_p ());\n+\n+  if (finish > LINE_MAP_MAX_LOCATION_WITH_COLS)\n+    return;\n+\n+  test_diagnostic_context dc;\n+  diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+  ASSERT_STREQ (\"\\n\"\n+\t\t\" foo = bar ();\\n\"\n+\t\t\"             ^\\n\",\n+\t\tpp_formatted_text (dc.printer));\n+}\n+\n /* Run all of the selftests within this file.  */\n \n void\n@@ -2176,6 +2257,8 @@ diagnostic_show_locus_c_tests ()\n   for_each_line_table_case (test_diagnostic_show_locus_one_liner);\n   for_each_line_table_case (test_diagnostic_show_locus_fixit_lines);\n   for_each_line_table_case (test_fixit_consolidation);\n+  for_each_line_table_case (test_fixit_insert_containing_newline);\n+  for_each_line_table_case (test_fixit_replace_containing_newline);\n }\n \n } // namespace selftest"}, {"sha": "b2b36037463b0458231faa4fd25e9f96d39d8bc9", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31316208638e76c2273a82864d32457a9cb9806d/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31316208638e76c2273a82864d32457a9cb9806d/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=31316208638e76c2273a82864d32457a9cb9806d", "patch": "@@ -1,3 +1,11 @@\n+2016-09-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* include/line-map.h (class rich_location): Note that newlines\n+\taren't supported in fix-it text.\n+\t* line-map.c (rich_location::add_fixit_insert_before): Reject\n+\tattempts to add fix-its containing newlines.\n+\t(rich_location::add_fixit_replace): Likewise.\n+\n 2016-09-13  David Malcolm  <dmalcolm@redhat.com>\n \n \t* include/line-map.h (class rich_location): Add description of"}, {"sha": "747609d4393d6860500816dd0cd627477097631a", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31316208638e76c2273a82864d32457a9cb9806d/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31316208638e76c2273a82864d32457a9cb9806d/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=31316208638e76c2273a82864d32457a9cb9806d", "patch": "@@ -1551,6 +1551,8 @@ class fixit_hint;\n \n    Attempts to add a fix-it hint within a macro expansion will fail.\n \n+   We do not yet support newlines in fix-it text; attempts to do so will fail.\n+\n    The rich_location API handles these failures gracefully, so that\n    diagnostics can attempt to add fix-it hints without each needing\n    extensive checking."}, {"sha": "07e3acb78a5fba04ef23df2e9de7276fe7c01956", "filename": "libcpp/line-map.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31316208638e76c2273a82864d32457a9cb9806d/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31316208638e76c2273a82864d32457a9cb9806d/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=31316208638e76c2273a82864d32457a9cb9806d", "patch": "@@ -2128,6 +2128,12 @@ rich_location::add_fixit_insert_before (source_location where,\n \n   if (reject_impossible_fixit (start))\n     return;\n+  /* We do not yet support newlines within fix-it hints.  */\n+  if (strchr (new_content, '\\n'))\n+    {\n+      stop_supporting_fixits ();\n+      return;\n+    }\n   add_fixit (new fixit_insert (start, new_content));\n }\n \n@@ -2271,6 +2277,13 @@ rich_location::add_fixit_replace (source_range src_range,\n   if (reject_impossible_fixit (src_range.m_finish))\n     return;\n \n+  /* We do not yet support newlines within fix-it hints.  */\n+  if (strchr (new_content, '\\n'))\n+    {\n+      stop_supporting_fixits ();\n+      return;\n+    }\n+\n   /* Consolidate neighboring fixits.  */\n   fixit_hint *prev = get_last_fixit_hint ();\n   if (prev)"}]}