{"sha": "a8086abfa0106b810145f8a41058fa7dea4091c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgwODZhYmZhMDEwNmI4MTAxNDVmOGE0MTA1OGZhN2RlYTQwOTFjMw==", "commit": {"author": {"name": "Graham Stott", "email": "grahams@redhat.com", "date": "2002-01-08T10:03:10Z"}, "committer": {"name": "Graham Stott", "email": "grahams@gcc.gnu.org", "date": "2002-01-08T10:03:10Z"}, "message": "c-tree.h (C_TYPE_FIELDS_READONLY): Uppercase macro parameter.\n\n\n        * c-tree.h (C_TYPE_FIELDS_READONLY): Uppercase macro parameter.\n        (C_TYPE_FIELDS_VOLATILE): Likewise.\n        (C_TYPE_BEING_DEFINED): Likewise.\n        (C_IS_RESERVED_WORD): Likewise.\n        (C_TYPE_VARIABLE_SIZE): Likewise.\n        (C_DECL_VARIABLE_SIZE): Likewise.\n        (C_MISSING_PROTOTYPE_WARNED): Likewise.\n        (C_SET_EXP_ORIGINAL_CODE): Likewise.\n        (C_TYPEDEF_EXPLICITLY_SIGNED): Uppercase macro parameter and remove\n        parenthesis.\n        (C_DECL_ANTICIPATED): Likewise.\n        (c_build_type_variant): Add parenthesis.\n\nFrom-SVN: r48632", "tree": {"sha": "150584c446162116b113a0ef31c5daa24feabcf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/150584c446162116b113a0ef31c5daa24feabcf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8086abfa0106b810145f8a41058fa7dea4091c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8086abfa0106b810145f8a41058fa7dea4091c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8086abfa0106b810145f8a41058fa7dea4091c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8086abfa0106b810145f8a41058fa7dea4091c3/comments", "author": null, "committer": null, "parents": [{"sha": "3f595aa14ce1e5d7dc853fdb97dfae852849d939", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f595aa14ce1e5d7dc853fdb97dfae852849d939", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f595aa14ce1e5d7dc853fdb97dfae852849d939"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "2165b08f1896cd69d391b5882e968649c1b119ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8086abfa0106b810145f8a41058fa7dea4091c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8086abfa0106b810145f8a41058fa7dea4091c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a8086abfa0106b810145f8a41058fa7dea4091c3", "patch": "@@ -1,3 +1,18 @@\n+2002-01-08  Graham Stott  <grahams@redhat.com>\n+\n+\t* c-tree.h (C_TYPE_FIELDS_READONLY): Uppercase macro parameter.\n+\t(C_TYPE_FIELDS_VOLATILE): Likewise.\n+\t(C_TYPE_BEING_DEFINED): Likewise.\n+\t(C_IS_RESERVED_WORD): Likewise.\n+\t(C_TYPE_VARIABLE_SIZE): Likewise.\n+\t(C_DECL_VARIABLE_SIZE): Likewise.\n+\t(C_MISSING_PROTOTYPE_WARNED): Likewise.\n+\t(C_SET_EXP_ORIGINAL_CODE): Likewise.\n+\t(C_TYPEDEF_EXPLICITLY_SIGNED): Uppercase macro parameter and remove\n+\tparenthesis.\n+\t(C_DECL_ANTICIPATED): Likewise.\n+\t(c_build_type_variant): Add parenthesis.\n+\n 2002-01-08  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gcc.c (option_map): Remove --version."}, {"sha": "e2b2404d3c643b102afcc52ac78b45e87c329181", "filename": "gcc/c-tree.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8086abfa0106b810145f8a41058fa7dea4091c3/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8086abfa0106b810145f8a41058fa7dea4091c3/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=a8086abfa0106b810145f8a41058fa7dea4091c3", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for C parsing and type checking.\n    Copyright (C) 1987, 1993, 1994, 1995, 1997, 1998,\n-   1999, 2000, 2001 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -86,19 +86,19 @@ struct lang_decl\n    TREE_ADDRESSABLE   to record that the address of such a decl was used.  */\n \n /* In a RECORD_TYPE or UNION_TYPE, nonzero if any component is read-only.  */\n-#define C_TYPE_FIELDS_READONLY(type) TREE_LANG_FLAG_1 (type)\n+#define C_TYPE_FIELDS_READONLY(TYPE) TREE_LANG_FLAG_1 (TYPE)\n \n /* In a RECORD_TYPE or UNION_TYPE, nonzero if any component is volatile.  */\n-#define C_TYPE_FIELDS_VOLATILE(type) TREE_LANG_FLAG_2 (type)\n+#define C_TYPE_FIELDS_VOLATILE(TYPE) TREE_LANG_FLAG_2 (TYPE)\n \n /* In a RECORD_TYPE or UNION_TYPE or ENUMERAL_TYPE\n    nonzero if the definition of the type has already started.  */\n-#define C_TYPE_BEING_DEFINED(type) TYPE_LANG_FLAG_0 (type)\n+#define C_TYPE_BEING_DEFINED(TYPE) TYPE_LANG_FLAG_0 (TYPE)\n \n /* In an IDENTIFIER_NODE, nonzero if this identifier is actually a\n    keyword.  C_RID_CODE (node) is then the RID_* value of the keyword,\n    and C_RID_YYCODE is the token number wanted by Yacc.  */\n-#define C_IS_RESERVED_WORD(id) TREE_LANG_FLAG_0 (id)\n+#define C_IS_RESERVED_WORD(ID) TREE_LANG_FLAG_0 (ID)\n \n /* This function was declared inline.  This flag controls the linkage\n    semantics of 'inline'; whether or not the function is inlined is\n@@ -115,27 +115,27 @@ struct lang_type\n \n /* Record whether a type or decl was written with nonconstant size.\n    Note that TYPE_SIZE may have simplified to a constant.  */\n-#define C_TYPE_VARIABLE_SIZE(type) TYPE_LANG_FLAG_1 (type)\n-#define C_DECL_VARIABLE_SIZE(type) DECL_LANG_FLAG_0 (type)\n+#define C_TYPE_VARIABLE_SIZE(TYPE) TYPE_LANG_FLAG_1 (TYPE)\n+#define C_DECL_VARIABLE_SIZE(TYPE) DECL_LANG_FLAG_0 (TYPE)\n \n #if 0 /* Not used.  */\n /* Record whether a decl for a function or function pointer has\n    already been mentioned (in a warning) because it was called\n    but didn't have a prototype.  */\n-#define C_MISSING_PROTOTYPE_WARNED(decl) DECL_LANG_FLAG_2(decl)\n+#define C_MISSING_PROTOTYPE_WARNED(DECL) DECL_LANG_FLAG_2 (DECL)\n #endif\n \n /* Store a value in that field.  */\n-#define C_SET_EXP_ORIGINAL_CODE(exp, code) \\\n-  (TREE_COMPLEXITY (exp) = (int) (code))\n+#define C_SET_EXP_ORIGINAL_CODE(EXP, CODE) \\\n+  (TREE_COMPLEXITY (EXP) = (int) (CODE))\n \n /* Record whether a typedef for type `int' was actually `signed int'.  */\n-#define C_TYPEDEF_EXPLICITLY_SIGNED(exp) DECL_LANG_FLAG_1 ((exp))\n+#define C_TYPEDEF_EXPLICITLY_SIGNED(EXP) DECL_LANG_FLAG_1 (EXP)\n \n /* Nonzero for a declaration of a built in function if there has been no\n    occasion that would declare the function in ordinary C.\n    Using the function draws a pedantic warning in this case.  */\n-#define C_DECL_ANTICIPATED(exp) DECL_LANG_FLAG_3 ((exp))\n+#define C_DECL_ANTICIPATED(EXP) DECL_LANG_FLAG_3 (EXP)\n \n /* For FUNCTION_TYPE, a hidden list of types of arguments.  The same as\n    TYPE_ARG_TYPES for functions with prototypes, but created for functions\n@@ -177,7 +177,7 @@ extern void c_objc_common_finish_file\t\tPARAMS ((void));\n extern int defer_fn\t\t\t\tPARAMS ((tree));\n \n #define c_build_type_variant(TYPE, CONST_P, VOLATILE_P)\t\t  \\\n-  c_build_qualified_type (TYPE,\t\t\t\t  \\\n+  c_build_qualified_type ((TYPE),\t\t\t\t  \\\n \t\t\t  ((CONST_P) ? TYPE_QUAL_CONST : 0) |\t  \\\n \t\t\t  ((VOLATILE_P) ? TYPE_QUAL_VOLATILE : 0))\n extern int  c_decode_option                     PARAMS ((int, char **));"}]}