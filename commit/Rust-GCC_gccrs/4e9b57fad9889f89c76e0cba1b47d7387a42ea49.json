{"sha": "4e9b57fad9889f89c76e0cba1b47d7387a42ea49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU5YjU3ZmFkOTg4OWY4OWM3NmUwY2JhMWI0N2Q3Mzg3YTQyZWE0OQ==", "commit": {"author": {"name": "Ben Elliston", "email": "bje@au.ibm.com", "date": "2008-08-26T13:27:31Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2008-08-26T13:27:31Z"}, "message": "rtlanal.c: Fix uses of \"it's\" with \"its\" where appropriate.\n\n\t* rtlanal.c: Fix uses of \"it's\" with \"its\" where appropriate.\n\t* cp/typeck.c: Likewise.\n\t* cp/tree.c: Likewise.\n\t* gimple-low.c: Likewise.\n\t* jump.c: Likewise.\n\nFrom-SVN: r139591", "tree": {"sha": "716c140c6389b8cf4fb3e177e8651261149de57c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/716c140c6389b8cf4fb3e177e8651261149de57c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e9b57fad9889f89c76e0cba1b47d7387a42ea49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e9b57fad9889f89c76e0cba1b47d7387a42ea49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e9b57fad9889f89c76e0cba1b47d7387a42ea49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e9b57fad9889f89c76e0cba1b47d7387a42ea49/comments", "author": null, "committer": null, "parents": [{"sha": "058e97ecf33ad0dfd926b3876a4bcf59ac9556ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/058e97ecf33ad0dfd926b3876a4bcf59ac9556ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/058e97ecf33ad0dfd926b3876a4bcf59ac9556ff"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "68763ec9c3a76501fdfd242c04ae4543746aef96", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9b57fad9889f89c76e0cba1b47d7387a42ea49/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9b57fad9889f89c76e0cba1b47d7387a42ea49/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e9b57fad9889f89c76e0cba1b47d7387a42ea49", "patch": "@@ -1,3 +1,11 @@\n+2008-08-26  Ben Elliston  <bje@au.ibm.com>\n+\n+\t* rtlanal.c: Fix uses of \"it's\" with \"its\" where appropriate.\n+\t* cp/typeck.c: Likewise.\n+\t* cp/tree.c: Likewise.\n+\t* gimple-low.c: Likewise.\n+\t* jump.c: Likewise.\n+\n 2008-08-26  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* ira-build.c, ira-color.c, ira-costs.c, ira.h, ira-lives.c,"}, {"sha": "f9df932221ffe48c3447707f7fbeaee51a8cc088", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9b57fad9889f89c76e0cba1b47d7387a42ea49/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9b57fad9889f89c76e0cba1b47d7387a42ea49/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=4e9b57fad9889f89c76e0cba1b47d7387a42ea49", "patch": "@@ -2088,7 +2088,7 @@ is_dummy_object (const_tree ob)\n int\n pod_type_p (const_tree t)\n {\n-  /* This CONST_CAST is okay because strip_array_types returns it's\n+  /* This CONST_CAST is okay because strip_array_types returns its\n      argument unmodified and we assign it to a const_tree.  */\n   t = strip_array_types (CONST_CAST_TREE(t));\n \n@@ -2127,7 +2127,7 @@ class_tmpl_impl_spec_p (const_tree t)\n int\n zero_init_p (const_tree t)\n {\n-  /* This CONST_CAST is okay because strip_array_types returns it's\n+  /* This CONST_CAST is okay because strip_array_types returns its\n      argument unmodified and we assign it to a const_tree.  */\n   t = strip_array_types (CONST_CAST_TREE(t));\n "}, {"sha": "410174ceb1e091c22792124bc59a5af564bd2dfb", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9b57fad9889f89c76e0cba1b47d7387a42ea49/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9b57fad9889f89c76e0cba1b47d7387a42ea49/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=4e9b57fad9889f89c76e0cba1b47d7387a42ea49", "patch": "@@ -7103,7 +7103,7 @@ comp_ptr_ttypes_const (tree to, tree from)\n int\n cp_type_quals (const_tree type)\n {\n-  /* This CONST_CAST is okay because strip_array_types returns it's\n+  /* This CONST_CAST is okay because strip_array_types returns its\n      argument unmodified and we assign it to a const_tree.  */\n   type = strip_array_types (CONST_CAST_TREE(type));\n   if (type == error_mark_node)\n@@ -7117,7 +7117,7 @@ cp_type_quals (const_tree type)\n bool\n cp_type_readonly (const_tree type)\n {\n-  /* This CONST_CAST is okay because strip_array_types returns it's\n+  /* This CONST_CAST is okay because strip_array_types returns its\n      argument unmodified and we assign it to a const_tree.  */\n   type = strip_array_types (CONST_CAST_TREE(type));\n   return TYPE_READONLY (type);\n@@ -7128,7 +7128,7 @@ cp_type_readonly (const_tree type)\n bool\n cp_has_mutable_p (const_tree type)\n {\n-  /* This CONST_CAST is okay because strip_array_types returns it's\n+  /* This CONST_CAST is okay because strip_array_types returns its\n      argument unmodified and we assign it to a const_tree.  */\n   type = strip_array_types (CONST_CAST_TREE(type));\n "}, {"sha": "99f8754473b116f052e7fff8ffc18fe8a2f0a37b", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9b57fad9889f89c76e0cba1b47d7387a42ea49/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9b57fad9889f89c76e0cba1b47d7387a42ea49/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=4e9b57fad9889f89c76e0cba1b47d7387a42ea49", "patch": "@@ -496,7 +496,7 @@ gimple_try_catch_may_fallthru (gimple stmt)\n bool\n block_may_fallthru (const_tree block)\n {\n-  /* This CONST_CAST is okay because expr_last returns it's argument\n+  /* This CONST_CAST is okay because expr_last returns its argument\n      unmodified and we assign it to a const_tree.  */\n   const_tree stmt = expr_last (CONST_CAST_TREE(block));\n "}, {"sha": "bacb7f4e1ba2ac21fc6051348c23654697885333", "filename": "gcc/jump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9b57fad9889f89c76e0cba1b47d7387a42ea49/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9b57fad9889f89c76e0cba1b47d7387a42ea49/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=4e9b57fad9889f89c76e0cba1b47d7387a42ea49", "patch": "@@ -351,7 +351,7 @@ reversed_comparison_code_parts (enum rtx_code code, const_rtx arg0,\n \treturn UNKNOWN;\n \n       /* These CONST_CAST's are okay because prev_nonnote_insn just\n-\t returns it's argument and we assign it to a const_rtx\n+\t returns its argument and we assign it to a const_rtx\n \t variable.  */\n       for (prev = prev_nonnote_insn (CONST_CAST_RTX(insn));\n \t   prev != 0 && !LABEL_P (prev);"}, {"sha": "00a63cd9b960ac0d7bcbea1c501b060fa2ecff44", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9b57fad9889f89c76e0cba1b47d7387a42ea49/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9b57fad9889f89c76e0cba1b47d7387a42ea49/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=4e9b57fad9889f89c76e0cba1b47d7387a42ea49", "patch": "@@ -3399,7 +3399,7 @@ keep_with_call_p (const_rtx insn)\n       if (SET_DEST (set) == stack_pointer_rtx)\n \t{\n \t  /* This CONST_CAST is okay because next_nonnote_insn just\n-\t     returns it's argument and we assign it to a const_rtx\n+\t     returns its argument and we assign it to a const_rtx\n \t     variable.  */\n \t  const_rtx i2 = next_nonnote_insn (CONST_CAST_RTX(insn));\n \t  if (i2 && keep_with_call_p (i2))"}]}