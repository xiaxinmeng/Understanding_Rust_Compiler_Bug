{"sha": "3146f36f935b0594a4719320e891e2d7524c014c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE0NmYzNmY5MzViMDU5NGE0NzE5MzIwZTg5MWUyZDc1MjRjMDE0Yw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-08-24T21:31:54Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-08-24T21:31:54Z"}, "message": "re PR c++/41109 (Argument flagged as unused despite use in sizeof())\n\n\tPR c++/41109\n\tPR c++/41110\n\tPR c++/41134\n\t* cp-tree.h (DECL_ODR_USED): New macro.\n\t(struct lang_decl_base): Add odr_used flag.\n\t* decl.c (duplicate_decls): Propagate it.  Use it for error.\n\t* pt.c (register_specialization): Use it for error.\n\t* decl2.c (mark_used): Use it as gating flag rather than TREE_USED.\n\t(cp_write_global_declarations): Use it for error.\n\t(tree_used_ok): Remove.\n\t* cp-tree.h: Remove tree_used_ok.\n\t* call.c (build_call_a): Don't call it.\n\t* init.c (build_offset_ref): Likewise.\n\nFrom-SVN: r151061", "tree": {"sha": "21f3fafc0a9586551eed28be49bc928210769cec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21f3fafc0a9586551eed28be49bc928210769cec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3146f36f935b0594a4719320e891e2d7524c014c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3146f36f935b0594a4719320e891e2d7524c014c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3146f36f935b0594a4719320e891e2d7524c014c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3146f36f935b0594a4719320e891e2d7524c014c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c767899ef26cac6092786591518ff9e5a54dbe04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c767899ef26cac6092786591518ff9e5a54dbe04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c767899ef26cac6092786591518ff9e5a54dbe04"}], "stats": {"total": 90, "additions": 68, "deletions": 22}, "files": [{"sha": "8c555e6b339ff117d8bff38e1c964ec42b2b56ad", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3146f36f935b0594a4719320e891e2d7524c014c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3146f36f935b0594a4719320e891e2d7524c014c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3146f36f935b0594a4719320e891e2d7524c014c", "patch": "@@ -1,3 +1,19 @@\n+2009-08-21  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/41109\n+\tPR c++/41110\n+\tPR c++/41134\n+\t* cp-tree.h (DECL_ODR_USED): New macro.\n+\t(struct lang_decl_base): Add odr_used flag.\n+\t* decl.c (duplicate_decls): Propagate it.  Use it for error.\n+\t* pt.c (register_specialization): Use it for error.\n+\t* decl2.c (mark_used): Use it as gating flag rather than TREE_USED.\n+\t(cp_write_global_declarations): Use it for error.\n+\t(tree_used_ok): Remove.\n+\t* cp-tree.h: Remove tree_used_ok.\n+\t* call.c (build_call_a): Don't call it.\n+\t* init.c (build_offset_ref): Likewise.\n+\n 2009-08-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/41131"}, {"sha": "f6a083bd6776aeeedf462b7e5adc1583c6e08e46", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3146f36f935b0594a4719320e891e2d7524c014c/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3146f36f935b0594a4719320e891e2d7524c014c/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=3146f36f935b0594a4719320e891e2d7524c014c", "patch": "@@ -318,7 +318,7 @@ build_call_a (tree function, int n, tree *argarray)\n       && TREE_CODE (TREE_OPERAND (function, 0)) == FUNCTION_DECL)\n     {\n       decl = TREE_OPERAND (function, 0);\n-      if (!tree_used_ok (decl))\n+      if (!TREE_USED (decl))\n \t{\n \t  /* We invoke build_call directly for several library\n \t     functions.  These may have been declared normally if"}, {"sha": "bafe0339f8d77081abb627171b63eba837ea3def", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3146f36f935b0594a4719320e891e2d7524c014c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3146f36f935b0594a4719320e891e2d7524c014c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3146f36f935b0594a4719320e891e2d7524c014c", "patch": "@@ -1579,8 +1579,9 @@ struct GTY(()) lang_decl_base {\n   unsigned anticipated_p : 1;\t\t   /* fn or type */\n   unsigned friend_attr : 1;\t\t   /* fn or type */\n   unsigned template_conv_p : 1;\t\t   /* template only? */\n+  unsigned odr_used : 1;\t\t   /* var or fn */\n   unsigned u2sel : 1;\n-  /* 2 spare bits */\n+  /* 1 spare bit */\n };\n \n /* True for DECL codes which have template info and access.  */\n@@ -1982,6 +1983,12 @@ struct GTY(()) lang_decl {\n   (DECL_LANG_SPECIFIC (VAR_OR_FUNCTION_DECL_CHECK (DECL)) \\\n    ->u.base.initialized_in_class)\n \n+/* Nonzero if the DECL is used in the sense of 3.2 [basic.def.odr].\n+   Only available for decls with DECL_LANG_SPECIFIC.  */\n+#define DECL_ODR_USED(DECL) \\\n+  (DECL_LANG_SPECIFIC (VAR_OR_FUNCTION_DECL_CHECK (DECL)) \\\n+   ->u.base.odr_used)\n+\n /* Nonzero for DECL means that this decl is just a friend declaration,\n    and should not be added to the list of members for this class.  */\n #define DECL_FRIEND_P(NODE) (DECL_LANG_SPECIFIC (NODE)->u.base.friend_attr)\n@@ -4477,7 +4484,6 @@ extern tree build_cleanup\t\t\t(tree);\n extern tree build_offset_ref_call_from_tree\t(tree, VEC(tree,gc) **);\n extern void check_default_args\t\t\t(tree);\n extern void mark_used\t\t\t\t(tree);\n-extern bool tree_used_ok\t\t\t(tree);\n extern void finish_static_data_member_decl\t(tree, tree, bool, tree, int);\n extern tree cp_build_parm_decl\t\t\t(tree, tree);\n extern tree get_guard\t\t\t\t(tree);"}, {"sha": "cad0fc5b2e6dbc8d5fcdc4434268edc5e3c4132e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3146f36f935b0594a4719320e891e2d7524c014c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3146f36f935b0594a4719320e891e2d7524c014c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3146f36f935b0594a4719320e891e2d7524c014c", "patch": "@@ -1890,6 +1890,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t}\n       DECL_TEMPLATE_INSTANTIATED (newdecl)\n \t|= DECL_TEMPLATE_INSTANTIATED (olddecl);\n+      DECL_ODR_USED (newdecl) |= DECL_ODR_USED (olddecl);\n \n       /* If the OLDDECL is an instantiation and/or specialization,\n \t then the NEWDECL must be too.  But, it may not yet be marked\n@@ -1955,7 +1956,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t     should have exited above, returning 0.  */\n \t  gcc_assert (DECL_TEMPLATE_SPECIALIZATION (newdecl));\n \n-\t  if (TREE_USED (olddecl))\n+\t  if (DECL_ODR_USED (olddecl))\n \t    /* From [temp.expl.spec]:\n \n \t       If a template, a member template or the member of a class"}, {"sha": "960ccf019abdacaee5a1b3516c020b989f347940", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3146f36f935b0594a4719320e891e2d7524c014c/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3146f36f935b0594a4719320e891e2d7524c014c/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=3146f36f935b0594a4719320e891e2d7524c014c", "patch": "@@ -3631,7 +3631,7 @@ cp_write_global_declarations (void)\n   for (i = 0; VEC_iterate (tree, deferred_fns, i, decl); ++i)\n     {\n       if (/* Check online inline functions that were actually used.  */\n-\t  TREE_USED (decl) && DECL_DECLARED_INLINE_P (decl)\n+\t  DECL_ODR_USED (decl) && DECL_DECLARED_INLINE_P (decl)\n \t  /* If the definition actually was available here, then the\n \t     fact that the function was not defined merely represents\n \t     that for some reason (use of a template repository,\n@@ -3845,22 +3845,33 @@ mark_used (tree decl)\n       decl = OVL_CURRENT (decl);\n     }\n \n+  /* Set TREE_USED for the benefit of -Wunused.  */\n+  TREE_USED (decl) = 1;\n+  if (DECL_CLONED_FUNCTION_P (decl))\n+    TREE_USED (DECL_CLONED_FUNCTION (decl)) = 1;\n+\n   if (TREE_CODE (decl) == FUNCTION_DECL\n       && DECL_DELETED_FN (decl))\n     {\n       error (\"deleted function %q+D\", decl);\n       error (\"used here\");\n-      TREE_USED (decl) = 1;\n       return;\n     }\n   /* If we don't need a value, then we don't need to synthesize DECL.  */\n   if (cp_unevaluated_operand != 0)\n     return;\n \n+  /* We can only check DECL_ODR_USED on variables or functions with\n+     DECL_LANG_SPECIFIC set, and these are also the only decls that we\n+     might need special handling for.  */\n+  if ((TREE_CODE (decl) != VAR_DECL && TREE_CODE (decl) != FUNCTION_DECL)\n+      || DECL_LANG_SPECIFIC (decl) == NULL)\n+    return;\n+\n   /* We only want to do this processing once.  We don't need to keep trying\n      to instantiate inline templates, because unit-at-a-time will make sure\n      we get them compiled before functions that want to inline them.  */\n-  if (TREE_USED (decl))\n+  if (DECL_ODR_USED (decl))\n     return;\n \n   /* If within finish_function, defer the rest until that function\n@@ -3896,9 +3907,9 @@ mark_used (tree decl)\n   if (processing_template_decl)\n     return;\n \n-  TREE_USED (decl) = 1;\n+  DECL_ODR_USED (decl) = 1;\n   if (DECL_CLONED_FUNCTION_P (decl))\n-    TREE_USED (DECL_CLONED_FUNCTION (decl)) = 1;\n+    DECL_ODR_USED (DECL_CLONED_FUNCTION (decl)) = 1;\n \n   /* DR 757: A type without linkage shall not be used as the type of a\n      variable or function with linkage, unless\n@@ -3981,15 +3992,4 @@ mark_used (tree decl)\n   processing_template_decl = saved_processing_template_decl;\n }\n \n-/* Use this function to verify that mark_used has been called\n-   previously.  That is, either TREE_USED is set, or we're in a\n-   context that doesn't set it.  */\n-\n-bool\n-tree_used_ok (tree decl)\n-{\n-  return (TREE_USED (decl) || cp_unevaluated_operand\n-\t  || defer_mark_used_calls || processing_template_decl);\n-}\n-\n #include \"gt-cp-decl2.h\""}, {"sha": "ef18a6c104158c52a9fb8f80d763049234f7271c", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3146f36f935b0594a4719320e891e2d7524c014c/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3146f36f935b0594a4719320e891e2d7524c014c/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=3146f36f935b0594a4719320e891e2d7524c014c", "patch": "@@ -1502,7 +1502,7 @@ build_offset_ref (tree type, tree member, bool address_p)\n \n   gcc_assert (DECL_P (member) || BASELINK_P (member));\n   /* Callers should call mark_used before this point.  */\n-  gcc_assert (!DECL_P (member) || tree_used_ok (member));\n+  gcc_assert (!DECL_P (member) || TREE_USED (member));\n \n   if (!COMPLETE_TYPE_P (complete_type (type))\n       && !TYPE_BEING_DEFINED (type))"}, {"sha": "b8561401881a9ab2ebc35fed9e8164c2db3659d5", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3146f36f935b0594a4719320e891e2d7524c014c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3146f36f935b0594a4719320e891e2d7524c014c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3146f36f935b0594a4719320e891e2d7524c014c", "patch": "@@ -1296,7 +1296,7 @@ register_specialization (tree spec, tree tmpl, tree args, bool is_friend,\n     {\n       if (DECL_TEMPLATE_INSTANTIATION (fn))\n \t{\n-\t  if (TREE_USED (fn)\n+\t  if (DECL_ODR_USED (fn)\n \t      || DECL_EXPLICIT_INSTANTIATION (fn))\n \t    {\n \t      error (\"specialization of %qD after instantiation\","}, {"sha": "4aa415472fbae3f9ab86fdd49785e74add9eae9e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3146f36f935b0594a4719320e891e2d7524c014c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3146f36f935b0594a4719320e891e2d7524c014c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3146f36f935b0594a4719320e891e2d7524c014c", "patch": "@@ -1,3 +1,7 @@\n+2009-08-21  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/warn/Wunused-17.C: New.\n+\n 2009-08-11  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n        * gcc.target/arm/combine-cmp-shift.c: New test."}, {"sha": "217bb4b77fe334db6d069b4f2a8c6d12a0cbe4c9", "filename": "gcc/testsuite/g++.dg/warn/Wunused-17.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3146f36f935b0594a4719320e891e2d7524c014c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3146f36f935b0594a4719320e891e2d7524c014c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-17.C?ref=3146f36f935b0594a4719320e891e2d7524c014c", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/41109, 41110, 41134\n+// { dg-options \"-Wunused\" }\n+\n+int memory_consumption(const int &t) { return sizeof(t); }\n+\n+int s;\n+int g() { return memory_consumption(s); }\n+\n+template <int> struct X { static const int s = 2; };\n+\n+template <typename T> int f() {\n+  const unsigned int dim = 2;\n+  return X<dim>::s;\n+}\n+\n+template int f<int>();\n+\n+static int i;\n+template <typename> int h() { return i; }"}]}