{"sha": "1e47f02b6390db82d2e7dcc7eec3bb888c78318a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU0N2YwMmI2MzkwZGI4MmQyZTdkY2M3ZWVjM2JiODg4Yzc4MzE4YQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2017-05-12T09:33:18Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2017-05-12T09:33:18Z"}, "message": "OpenACC C front end maintenance: c_parser_oacc_single_int_clause\n\n\tgcc/c/\n\t* c-parser.c (c_parser_omp_clause_num_gangs)\n\t(c_parser_omp_clause_num_workers)\n\t(c_parser_omp_clause_vector_length): Merge functions into...\n\t(c_parser_oacc_single_int_clause): ... this new function.  Adjust\n\tall users.\n\tgcc/testsuite/\n\t* c-c++-common/goacc/parallel-dims-1.c: New file.\n\t* c-c++-common/goacc/parallel-dims-2.c: Likewise.\n\nFrom-SVN: r247960", "tree": {"sha": "0cc51c36b180d9add1a3f320701f67c275ab7b12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cc51c36b180d9add1a3f320701f67c275ab7b12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e47f02b6390db82d2e7dcc7eec3bb888c78318a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e47f02b6390db82d2e7dcc7eec3bb888c78318a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e47f02b6390db82d2e7dcc7eec3bb888c78318a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e47f02b6390db82d2e7dcc7eec3bb888c78318a/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "62ffe9207c7568fe9d28891caa2bf3aa18664375", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62ffe9207c7568fe9d28891caa2bf3aa18664375", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62ffe9207c7568fe9d28891caa2bf3aa18664375"}], "stats": {"total": 325, "additions": 200, "deletions": 125}, "files": [{"sha": "b12f41d5fd370620854c12e1ef59e7ac7b8e302c", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e47f02b6390db82d2e7dcc7eec3bb888c78318a/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e47f02b6390db82d2e7dcc7eec3bb888c78318a/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=1e47f02b6390db82d2e7dcc7eec3bb888c78318a", "patch": "@@ -1,3 +1,11 @@\n+2017-05-12  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-parser.c (c_parser_omp_clause_num_gangs)\n+\t(c_parser_omp_clause_num_workers)\n+\t(c_parser_omp_clause_vector_length): Merge functions into...\n+\t(c_parser_oacc_single_int_clause): ... this new function.  Adjust\n+\tall users.\n+\n 2017-05-11  Nathan Sidwell  <nathan@acm.org>\n \n \t* gimple-parser.c: Don't #include tree-dump.h."}, {"sha": "90d2d179152ebeba694b9265b18a8c3c92863370", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 47, "deletions": 125, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e47f02b6390db82d2e7dcc7eec3bb888c78318a/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e47f02b6390db82d2e7dcc7eec3bb888c78318a/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=1e47f02b6390db82d2e7dcc7eec3bb888c78318a", "patch": "@@ -11339,51 +11339,6 @@ c_parser_omp_clause_nowait (c_parser *parser ATTRIBUTE_UNUSED, tree list)\n   return c;\n }\n \n-/* OpenACC:\n-   num_gangs ( expression ) */\n-\n-static tree\n-c_parser_omp_clause_num_gangs (c_parser *parser, tree list)\n-{\n-  location_t num_gangs_loc = c_parser_peek_token (parser)->location;\n-  if (c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n-    {\n-      location_t expr_loc = c_parser_peek_token (parser)->location;\n-      c_expr expr = c_parser_expression (parser);\n-      expr = convert_lvalue_to_rvalue (expr_loc, expr, false, true);\n-      tree c, t = expr.value;\n-      t = c_fully_fold (t, false, NULL);\n-\n-      c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, \"expected %<)%>\");\n-\n-      if (!INTEGRAL_TYPE_P (TREE_TYPE (t)))\n-\t{\n-\t  c_parser_error (parser, \"expected integer expression\");\n-\t  return list;\n-\t}\n-\n-      /* Attempt to statically determine when the number isn't positive.  */\n-      c = fold_build2_loc (expr_loc, LE_EXPR, boolean_type_node, t,\n-\t\t       build_int_cst (TREE_TYPE (t), 0));\n-      protected_set_expr_location (c, expr_loc);\n-      if (c == boolean_true_node)\n-\t{\n-\t  warning_at (expr_loc, 0,\n-\t\t      \"%<num_gangs%> value must be positive\");\n-\t  t = integer_one_node;\n-\t}\n-\n-      check_no_duplicate_clause (list, OMP_CLAUSE_NUM_GANGS, \"num_gangs\");\n-\n-      c = build_omp_clause (num_gangs_loc, OMP_CLAUSE_NUM_GANGS);\n-      OMP_CLAUSE_NUM_GANGS_EXPR (c) = t;\n-      OMP_CLAUSE_CHAIN (c) = list;\n-      list = c;\n-    }\n-\n-  return list;\n-}\n-\n /* OpenMP 2.5:\n    num_threads ( expression ) */\n \n@@ -11671,48 +11626,54 @@ c_parser_omp_clause_is_device_ptr (c_parser *parser, tree list)\n }\n \n /* OpenACC:\n-   num_workers ( expression ) */\n+   num_gangs ( expression )\n+   num_workers ( expression )\n+   vector_length ( expression )  */\n \n static tree\n-c_parser_omp_clause_num_workers (c_parser *parser, tree list)\n+c_parser_oacc_single_int_clause (c_parser *parser, omp_clause_code code,\n+\t\t\t\t tree list)\n {\n-  location_t num_workers_loc = c_parser_peek_token (parser)->location;\n-  if (c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n-    {\n-      location_t expr_loc = c_parser_peek_token (parser)->location;\n-      c_expr expr = c_parser_expression (parser);\n-      expr = convert_lvalue_to_rvalue (expr_loc, expr, false, true);\n-      tree c, t = expr.value;\n-      t = c_fully_fold (t, false, NULL);\n+  location_t loc = c_parser_peek_token (parser)->location;\n \n-      c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, \"expected %<)%>\");\n+  if (!c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n+    return list;\n \n-      if (!INTEGRAL_TYPE_P (TREE_TYPE (t)))\n-\t{\n-\t  c_parser_error (parser, \"expected integer expression\");\n-\t  return list;\n-\t}\n+  location_t expr_loc = c_parser_peek_token (parser)->location;\n+  c_expr expr = c_parser_expression (parser);\n+  expr = convert_lvalue_to_rvalue (expr_loc, expr, false, true);\n+  tree c, t = expr.value;\n+  t = c_fully_fold (t, false, NULL);\n \n-      /* Attempt to statically determine when the number isn't positive.  */\n-      c = fold_build2_loc (expr_loc, LE_EXPR, boolean_type_node, t,\n-\t\t       build_int_cst (TREE_TYPE (t), 0));\n-      protected_set_expr_location (c, expr_loc);\n-      if (c == boolean_true_node)\n-\t{\n-\t  warning_at (expr_loc, 0,\n-\t\t      \"%<num_workers%> value must be positive\");\n-\t  t = integer_one_node;\n-\t}\n+  c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, \"expected %<)%>\");\n \n-      check_no_duplicate_clause (list, OMP_CLAUSE_NUM_WORKERS, \"num_workers\");\n+  if (t == error_mark_node)\n+    return list;\n+  else if (!INTEGRAL_TYPE_P (TREE_TYPE (t)))\n+    {\n+      error_at (expr_loc, \"%qs expression must be integral\",\n+\t\tomp_clause_code_name[code]);\n+      return list;\n+    }\n \n-      c = build_omp_clause (num_workers_loc, OMP_CLAUSE_NUM_WORKERS);\n-      OMP_CLAUSE_NUM_WORKERS_EXPR (c) = t;\n-      OMP_CLAUSE_CHAIN (c) = list;\n-      list = c;\n+  /* Attempt to statically determine when the number isn't positive.  */\n+  c = fold_build2_loc (expr_loc, LE_EXPR, boolean_type_node, t,\n+\t\t       build_int_cst (TREE_TYPE (t), 0));\n+  protected_set_expr_location (c, expr_loc);\n+  if (c == boolean_true_node)\n+    {\n+      warning_at (expr_loc, 0,\n+\t\t  \"%qs value must be positive\",\n+\t\t  omp_clause_code_name[code]);\n+      t = integer_one_node;\n     }\n \n-  return list;\n+  check_no_duplicate_clause (list, code, omp_clause_code_name[code]);\n+\n+  c = build_omp_clause (loc, code);\n+  OMP_CLAUSE_OPERAND (c, 0) = t;\n+  OMP_CLAUSE_CHAIN (c) = list;\n+  return c;\n }\n \n /* OpenACC:\n@@ -12354,51 +12315,6 @@ c_parser_omp_clause_untied (c_parser *parser ATTRIBUTE_UNUSED, tree list)\n   return c;\n }\n \n-/* OpenACC:\n-   vector_length ( expression ) */\n-\n-static tree\n-c_parser_omp_clause_vector_length (c_parser *parser, tree list)\n-{\n-  location_t vector_length_loc = c_parser_peek_token (parser)->location;\n-  if (c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n-    {\n-      location_t expr_loc = c_parser_peek_token (parser)->location;\n-      c_expr expr = c_parser_expression (parser);\n-      expr = convert_lvalue_to_rvalue (expr_loc, expr, false, true);\n-      tree c, t = expr.value;\n-      t = c_fully_fold (t, false, NULL);\n-\n-      c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, \"expected %<)%>\");\n-\n-      if (!INTEGRAL_TYPE_P (TREE_TYPE (t)))\n-\t{\n-\t  c_parser_error (parser, \"expected integer expression\");\n-\t  return list;\n-\t}\n-\n-      /* Attempt to statically determine when the number isn't positive.  */\n-      c = fold_build2_loc (expr_loc, LE_EXPR, boolean_type_node, t,\n-\t\t       build_int_cst (TREE_TYPE (t), 0));\n-      protected_set_expr_location (c, expr_loc);\n-      if (c == boolean_true_node)\n-\t{\n-\t  warning_at (expr_loc, 0,\n-\t\t      \"%<vector_length%> value must be positive\");\n-\t  t = integer_one_node;\n-\t}\n-\n-      check_no_duplicate_clause (list, OMP_CLAUSE_VECTOR_LENGTH, \"vector_length\");\n-\n-      c = build_omp_clause (vector_length_loc, OMP_CLAUSE_VECTOR_LENGTH);\n-      OMP_CLAUSE_VECTOR_LENGTH_EXPR (c) = t;\n-      OMP_CLAUSE_CHAIN (c) = list;\n-      list = c;\n-    }\n-\n-  return list;\n-}\n-\n /* OpenMP 4.0:\n    inbranch\n    notinbranch */\n@@ -13283,11 +13199,15 @@ c_parser_oacc_all_clauses (c_parser *parser, omp_clause_mask mask,\n \t  c_name = \"link\";\n \t  break;\n \tcase PRAGMA_OACC_CLAUSE_NUM_GANGS:\n-\t  clauses = c_parser_omp_clause_num_gangs (parser, clauses);\n+\t  clauses = c_parser_oacc_single_int_clause (parser,\n+\t\t\t\t\t\t     OMP_CLAUSE_NUM_GANGS,\n+\t\t\t\t\t\t     clauses);\n \t  c_name = \"num_gangs\";\n \t  break;\n \tcase PRAGMA_OACC_CLAUSE_NUM_WORKERS:\n-\t  clauses = c_parser_omp_clause_num_workers (parser, clauses);\n+\t  clauses = c_parser_oacc_single_int_clause (parser,\n+\t\t\t\t\t\t     OMP_CLAUSE_NUM_WORKERS,\n+\t\t\t\t\t\t     clauses);\n \t  c_name = \"num_workers\";\n \t  break;\n \tcase PRAGMA_OACC_CLAUSE_PRESENT:\n@@ -13341,7 +13261,9 @@ c_parser_oacc_all_clauses (c_parser *parser, omp_clause_mask mask,\n \t\t\t\t\t\tc_name,\tclauses);\n \t  break;\n \tcase PRAGMA_OACC_CLAUSE_VECTOR_LENGTH:\n-\t  clauses = c_parser_omp_clause_vector_length (parser, clauses);\n+\t  clauses = c_parser_oacc_single_int_clause (parser,\n+\t\t\t\t\t\t     OMP_CLAUSE_VECTOR_LENGTH,\n+\t\t\t\t\t\t     clauses);\n \t  c_name = \"vector_length\";\n \t  break;\n \tcase PRAGMA_OACC_CLAUSE_WAIT:"}, {"sha": "13241be7df4af280e09d89bb3fbdd12d07ad53d5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e47f02b6390db82d2e7dcc7eec3bb888c78318a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e47f02b6390db82d2e7dcc7eec3bb888c78318a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1e47f02b6390db82d2e7dcc7eec3bb888c78318a", "patch": "@@ -1,5 +1,8 @@\n 2017-05-12  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\t* c-c++-common/goacc/parallel-dims-1.c: New file.\n+\t* c-c++-common/goacc/parallel-dims-2.c: Likewise.\n+\n \t* c-c++-common/goacc/classify-kernels-unparallelized.c: Adjust.\n \t* c-c++-common/goacc/classify-kernels.c: Likewise.\n \t* c-c++-common/goacc/kernels-counter-vars-function-scope.c:"}, {"sha": "a85d3d3a0d444b055782b3c51b1b956c634ad88c", "filename": "gcc/testsuite/c-c++-common/goacc/parallel-dims-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e47f02b6390db82d2e7dcc7eec3bb888c78318a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fparallel-dims-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e47f02b6390db82d2e7dcc7eec3bb888c78318a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fparallel-dims-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fparallel-dims-1.c?ref=1e47f02b6390db82d2e7dcc7eec3bb888c78318a", "patch": "@@ -0,0 +1,8 @@\n+/* Valid use of OpenACC parallelism dimensions clauses: num_gangs, num_workers,\n+   vector_length.  */\n+\n+void f(int i)\n+{\n+#pragma acc parallel num_gangs(i) num_workers(i) vector_length(i)\n+  ;\n+}"}, {"sha": "30a3d1770ace4837ce56cb6cba622c7d966c6364", "filename": "gcc/testsuite/c-c++-common/goacc/parallel-dims-2.c", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e47f02b6390db82d2e7dcc7eec3bb888c78318a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fparallel-dims-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e47f02b6390db82d2e7dcc7eec3bb888c78318a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fparallel-dims-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fparallel-dims-2.c?ref=1e47f02b6390db82d2e7dcc7eec3bb888c78318a", "patch": "@@ -0,0 +1,134 @@\n+/* Invalid use of OpenACC parallelism dimensions clauses: num_gangs,\n+   num_workers, vector_length.  */\n+\n+void acc_kernels(int i)\n+{\n+#pragma acc kernels num_gangs(i) /* { dg-error \"'num_gangs' is not valid for '#pragma acc kernels'\" } */\n+  ;\n+#pragma acc kernels num_workers(i) /* { dg-error \"'num_workers' is not valid for '#pragma acc kernels'\" } */\n+  ;\n+#pragma acc kernels vector_length(i) /* { dg-error \"'vector_length' is not valid for '#pragma acc kernels'\" } */\n+  ;\n+}\n+\n+void acc_parallel(int i, float f)\n+{\n+#pragma acc parallel num_gangs /* { dg-error \"expected '\\\\(' before end of line\" } */\n+  ;\n+#pragma acc parallel num_workers /* { dg-error \"expected '\\\\(' before end of line\" } */\n+  ;\n+#pragma acc parallel vector_length /* { dg-error \"expected '\\\\(' before end of line\" } */\n+  ;\n+\n+#pragma acc parallel num_gangs( /* { dg-error \"expected (primary-|)expression before end of line\" } */\n+  ;\n+#pragma acc parallel num_workers( /* { dg-error \"expected (primary-|)expression before end of line\" } */\n+  ;\n+#pragma acc parallel vector_length( /* { dg-error \"expected (primary-|)expression before end of line\" } */\n+  ;\n+\n+#pragma acc parallel num_gangs() /* { dg-error \"expected (primary-|)expression before '\\\\)' token\" } */\n+  ;\n+#pragma acc parallel num_workers() /* { dg-error \"expected (primary-|)expression before '\\\\)' token\" } */\n+  ;\n+#pragma acc parallel vector_length() /* { dg-error \"expected (primary-|)expression before '\\\\)' token\" } */\n+  ;\n+\n+#pragma acc parallel num_gangs(1 /* { dg-error \"expected '\\\\)' before end of line\" } */\n+  ;\n+#pragma acc parallel num_workers(1 /* { dg-error \"expected '\\\\)' before end of line\" } */\n+  ;\n+#pragma acc parallel vector_length(1 /* { dg-error \"expected '\\\\)' before end of line\" } */\n+  ;\n+\n+#pragma acc parallel num_gangs(i /* { dg-error \"expected '\\\\)' before end of line\" } */\n+  ;\n+#pragma acc parallel num_workers(i /* { dg-error \"expected '\\\\)' before end of line\" } */\n+  ;\n+#pragma acc parallel vector_length(i /* { dg-error \"expected '\\\\)' before end of line\" } */\n+  ;\n+\n+#pragma acc parallel num_gangs(1 i /* { dg-error \"expected '\\\\)' before 'i'\" } */\n+  ;\n+#pragma acc parallel num_workers(1 i /* { dg-error \"expected '\\\\)' before 'i'\" } */\n+  ;\n+#pragma acc parallel vector_length(1 i /* { dg-error \"expected '\\\\)' before 'i'\" } */\n+  ;\n+\n+#pragma acc parallel num_gangs(1 i) /* { dg-error \"expected '\\\\)' before 'i'\" } */\n+  ;\n+#pragma acc parallel num_workers(1 i) /* { dg-error \"expected '\\\\)' before 'i'\" } */\n+  ;\n+#pragma acc parallel vector_length(1 i) /* { dg-error \"expected '\\\\)' before 'i'\" } */\n+  ;\n+\n+#pragma acc parallel num_gangs(1, i /* { dg-error \"expected '\\\\)' before ',' token\" \"TODO\" { xfail c } } */\n+  /* { dg-bogus \"expected '\\\\)' before end of line\" \"TODO\" { xfail c } .-1 } */\n+  ;\n+#pragma acc parallel num_workers(1, i /* { dg-error \"expected '\\\\)' before ',' token\" \"TODO\" { xfail c } } */\n+  /* { dg-bogus \"expected '\\\\)' before end of line\" \"TODO\" { xfail c } .-1 } */\n+  ;\n+#pragma acc parallel vector_length(1, i /* { dg-error \"expected '\\\\)' before ',' token\" \"TODO\" { xfail c } } */\n+  /* { dg-bogus \"expected '\\\\)' before end of line\" \"TODO\" { xfail c } .-1 } */\n+  ;\n+\n+#pragma acc parallel num_gangs(1, i) /* { dg-error \"expected '\\\\)' before ',' token\" \"TODO\" { xfail c } } */\n+  ;\n+#pragma acc parallel num_workers(1, i) /* { dg-error \"expected '\\\\)' before ',' token\" \"TODO\" { xfail c } } */\n+  ;\n+#pragma acc parallel vector_length(1, i) /* { dg-error \"expected '\\\\)' before ',' token\" \"TODO\" { xfail c } } */\n+  ;\n+\n+#pragma acc parallel num_gangs(num_gangs) /* { dg-error \"'num_gangs' (un|was not )declared\" } */\n+  ;\n+#pragma acc parallel num_workers(num_workers) /* { dg-error \"'num_workers' (un|was not )declared\" } */\n+  ;\n+#pragma acc parallel vector_length(vector_length) /* { dg-error \"'vector_length' (un|was not )declared\" } */\n+  ;\n+\n+#pragma acc parallel num_gangs(f) /* { dg-error \"'num_gangs' expression must be integral\" } */\n+  ;\n+#pragma acc parallel num_workers(f) /* { dg-error \"'num_workers' expression must be integral\" } */\n+  ;\n+#pragma acc parallel vector_length(f) /* { dg-error \"'vector_length' expression must be integral\" } */\n+  ;\n+\n+#pragma acc parallel num_gangs((float) 1) /* { dg-error \"'num_gangs' expression must be integral\" } */\n+  ;\n+#pragma acc parallel num_workers((float) 1) /* { dg-error \"'num_workers' expression must be integral\" } */\n+  ;\n+#pragma acc parallel vector_length((float) 1) /* { dg-error \"'vector_length' expression must be integral\" } */\n+  ;\n+\n+#pragma acc parallel num_gangs(0) /* { dg-warning \"'num_gangs' value must be positive\" } */\n+  ;\n+#pragma acc parallel num_workers(0) /* { dg-warning \"'num_workers' value must be positive\" } */\n+  ;\n+#pragma acc parallel vector_length(0) /* { dg-warning \"'vector_length' value must be positive\" } */\n+  ;\n+\n+#pragma acc parallel num_gangs((int) -1.2) /* { dg-warning \"'num_gangs' value must be positive\" } */\n+  ;\n+#pragma acc parallel num_workers((int) -1.2) /* { dg-warning \"'num_workers' value must be positive\" } */\n+  ;\n+#pragma acc parallel vector_length((int) -1.2) /* { dg-warning \"'vector_length' value must be positive\" } */\n+  ;\n+\n+#pragma acc parallel \\\n+  num_gangs(1) /* { dg-error \"too many 'num_gangs' clauses\" \"\" { target c } } */ \\\n+  num_workers(1) /* { dg-error \"too many 'num_workers' clauses\" \"\" { target c } } */ \\\n+  vector_length(1) /* { dg-error \"too many 'vector_length' clauses\" \"\" { target c } } */ \\\n+  num_workers(1) /* { dg-error \"too many 'num_workers' clauses\" \"\" { target c++ } } */ \\\n+  vector_length(1) /* { dg-error \"too many 'vector_length' clauses\" \"\" { target c++ } } */ \\\n+  num_gangs(1) /* { dg-error \"too many 'num_gangs' clauses\" \"\" { target c++ } } */\n+  ;\n+\n+#pragma acc parallel \\\n+  num_gangs(-1) /* { dg-warning \"'num_gangs' value must be positive\" } */ \\\n+  num_workers() /* { dg-error \"expected (primary-|)expression before '\\\\)' token\" } */ \\\n+  vector_length(abc) /* { dg-error \"'abc' (un|was not )declared\" } */ \\\n+  num_workers(0.5) /* { dg-error \"'num_workers' expression must be integral\" } */ \\\n+  vector_length(&acc_parallel) /* { dg-error \"'vector_length' expression must be integral\" } */ \\\n+  num_gangs( /* { dg-error \"expected (primary-|)expression before end of line\" \"TODO\" { xfail c } } */\n+  ;\n+}"}]}