{"sha": "07a5fe52c547185a5fc9ef5b0f205016c3ee35f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdhNWZlNTJjNTQ3MTg1YTVmYzllZjViMGYyMDUwMTZjM2VlMzVmMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-10-11T21:15:59Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-10-11T21:15:59Z"}, "message": "i386.c (ix86_canonicalize_comparison): New function.\n\n\t* config/i386/i386.c (ix86_canonicalize_comparison): New function.\n\t(TARGET_CANONICALIZE_COMPARISON): Define.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/387-ficom-2.c: New test.\n\nFrom-SVN: r253663", "tree": {"sha": "9cec49cd92325a13efb5e85e54c9f82752242704", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cec49cd92325a13efb5e85e54c9f82752242704"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07a5fe52c547185a5fc9ef5b0f205016c3ee35f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07a5fe52c547185a5fc9ef5b0f205016c3ee35f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07a5fe52c547185a5fc9ef5b0f205016c3ee35f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07a5fe52c547185a5fc9ef5b0f205016c3ee35f3/comments", "author": null, "committer": null, "parents": [{"sha": "ca38a07b0637440d40ac7f6f987a16c825f00aa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca38a07b0637440d40ac7f6f987a16c825f00aa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca38a07b0637440d40ac7f6f987a16c825f00aa4"}], "stats": {"total": 74, "additions": 60, "deletions": 14}, "files": [{"sha": "4e0d71e9435878af16b35c803018966a2d55e9c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a5fe52c547185a5fc9ef5b0f205016c3ee35f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a5fe52c547185a5fc9ef5b0f205016c3ee35f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07a5fe52c547185a5fc9ef5b0f205016c3ee35f3", "patch": "@@ -1,3 +1,8 @@\n+2017-10-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_canonicalize_comparison): New function.\n+\t(TARGET_CANONICALIZE_COMPARISON): Define.\n+\n 2017-10-11  Qing Zhao  <qing.zhao@oracle.com>\n \n \tPR target/81422\n@@ -114,7 +119,8 @@\n \t(ix86_min_insn_size): ... this one; export.\n \t(core2i7_first_cycle_multipass_begin): Move to x86-tune-sched-core.c.\n \t(core2i7_first_cycle_multipass_issue): Move to x86-tune-sched-core.c.\n-\t(core2i7_first_cycle_multipass_backtrack): Move to x86-tune-sched-core.c.\n+\t(core2i7_first_cycle_multipass_backtrack): Move to\n+\tx86-tune-sched-core.c.\n \t(core2i7_first_cycle_multipass_end): Move to x86-tune-sched-core.c.\n \t(core2i7_first_cycle_multipass_fini): Move to x86-tune-sched-core.c.\n \t(ix86_sched_init_global): Break up logic to ix86_core2i7_init_hooks.\n@@ -664,7 +670,6 @@\n \n \t* builtins.def (BUILT_IN_SETJMP): Revert latest change.\n \n-2017-10-08  Jan Hubicka  <hubicka@ucw.cz>\n 2017-10-08  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* i386.c (ix86_expand_set_or_movmem): Disable 512bit loops for targets\n@@ -892,7 +897,8 @@\n \t(znver1_cost): Set scalar reassoc width to 4 and vector to 3 and 6\n \tfor int and fp.\n \t(atom_cost): Set reassociation width to 2.\n-\t(slm_cost, generic_cost): Set fp reassociation width to 2 and 1 otherwise.\n+\t(slm_cost, generic_cost): Set fp reassociation width\n+\tto 2 and 1 otherwise.\n \t(intel_cost): Set fp reassociation width to 4 and 1 otherwise.\n \t(core_cost): Set fp reassociation width to 4 and vector to 2.\n \t(ix86_reassociation_width): Rewrite using cost table; special case\n@@ -1158,7 +1164,7 @@\n \t(class dom_opt_dom_walker): Initialize m_dummy_cond member in the\n \tclass ctor.\n \t(pass_dominator:execute): Build the dummy_cond here and pass it\n-\tto the dom_opt_dom_walker ctor. \n+\tto the dom_opt_dom_walker ctor.\n \t(test_for_singularity): New function.\n \n 2017-09-30  Krister Walfridsson  <krister.walfridsson@gmail.com>\n@@ -1603,7 +1609,7 @@\n \t* rs6000.md (allocate_stack): Handle -fstack-clash-protection.\n \t(probe_stack_range<P:mode>): Operand 0 is now early-clobbered.\n \tAdd additional operand and pass it to output_probe_stack_range.\n-    \n+\n 2017-09-25  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/82163\n@@ -2035,7 +2041,7 @@\n \n 2017-09-22  Sergey Shalnov  <sergey.shalnov@intel.com>\n \n-        * config/i386/sse.md (\"mov<mode>_internal\"): Use <sseinsnmode>\n+\t* config/i386/sse.md (\"mov<mode>_internal\"): Use <sseinsnmode>\n \tmode attribute for TARGET_AVX512VL.\n \n 2017-09-21  Sergey Shalnov  <sergey.shalnov@intel.com>\n@@ -2314,9 +2320,9 @@\n \t(ix86_expand_prologue): Dump stack clash info as needed.\n \tCall ix86_adjust_stack_and_probe_stack_clash as needed.\n \n-        * function.c (dump_stack_clash_frame_info): New function.\n-        * function.h (dump_stack_clash_frame_info): Prototype.\n-        (enum stack_clash_probes): New enum.\n+\t* function.c (dump_stack_clash_frame_info): New function.\n+\t* function.h (dump_stack_clash_frame_info): Prototype.\n+\t(enum stack_clash_probes): New enum.\n \n \t* config/alpha/alpha.c (alpha_expand_prologue): Also check\n \tflag_stack_clash_protection."}, {"sha": "d7482bc9a679bd1b44353d3706ad3ccaa306adff", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a5fe52c547185a5fc9ef5b0f205016c3ee35f3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a5fe52c547185a5fc9ef5b0f205016c3ee35f3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=07a5fe52c547185a5fc9ef5b0f205016c3ee35f3", "patch": "@@ -4792,6 +4792,30 @@ ix86_conditional_register_usage (void)\n       fixed_regs[i] = call_used_regs[i] = 1, reg_names[i] = \"\";\n }\n \n+/* Canonicalize a comparison from one we don't have to one we do have.  */\n+\n+static void\n+ix86_canonicalize_comparison (int *code, rtx *op0, rtx *op1,\n+\t\t\t      bool op0_preserve_value)\n+{\n+  /* The order of operands in x87 ficom compare is forced by combine in\n+     simplify_comparison () function. Float operator is treated as RTX_OBJ\n+     with a precedence over other operators and is always put in the first\n+     place. Swap condition and operands to match ficom instruction.  */\n+  if (!op0_preserve_value\n+      && GET_CODE (*op0) == FLOAT && MEM_P (XEXP (*op0, 0)) && REG_P (*op1))\n+    {\n+      enum rtx_code scode = swap_condition ((enum rtx_code) *code);\n+\n+      /* We are called only for compares that are split to SAHF instruction.\n+\t Ensure that we have setcc/jcc insn for the swapped condition.  */\n+      if (ix86_fp_compare_code_to_integer (scode) != UNKNOWN)\n+\t{\n+\t  std::swap (*op0, *op1);\n+\t  *code = (int) scode;\n+\t}\n+    }\n+}\n \f\n /* Save the current options */\n \n@@ -49649,6 +49673,9 @@ ix86_run_selftests (void)\n #undef TARGET_CONDITIONAL_REGISTER_USAGE\n #define TARGET_CONDITIONAL_REGISTER_USAGE ix86_conditional_register_usage\n \n+#undef TARGET_CANONICALIZE_COMPARISON\n+#define TARGET_CANONICALIZE_COMPARISON ix86_canonicalize_comparison\n+\n #undef TARGET_LOOP_UNROLL_ADJUST\n #define TARGET_LOOP_UNROLL_ADJUST ix86_loop_unroll_adjust\n "}, {"sha": "a2daea4d8bdac93687c78d7aa655a6d319586c38", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a5fe52c547185a5fc9ef5b0f205016c3ee35f3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a5fe52c547185a5fc9ef5b0f205016c3ee35f3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=07a5fe52c547185a5fc9ef5b0f205016c3ee35f3", "patch": "@@ -1,3 +1,7 @@\n+2017-10-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/387-ficom-2.c: New test.\n+\n 2017-10-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/80421\n@@ -18,7 +22,7 @@\n 2017-10-11  Qing Zhao  <qing.zhao@oracle.com>\n \n \tPR target/81422\n-      \t* gcc.target/aarch64/pr81422.C: New test.\n+\t* gcc.target/aarch64/pr81422.C: New test.\n \n 2017-10-11  Vladimir Makarov  <vmakarov@redhat.com>\n \n@@ -1084,7 +1088,7 @@\n \n 2017-09-22  Sergey Shalnov  <sergey.shalnov@intel.com>\n \n-        * gcc.target/i386/avx512f-constant-set.c: New test.\n+\t* gcc.target/i386/avx512f-constant-set.c: New test.\n \n 2017-09-21  Sergey Shalnov  <sergey.shalnov@intel.com>\n \n@@ -2653,7 +2657,7 @@\n \n 2017-08-23  Richard Biener  <rguenther@suse.de>\n \n-        PR target/81921\n+\tPR target/81921\n \t* gcc.target/i386/pr81921.c: New testcase.\n \n 2017-08-23  Daniel Santos  <daniel.santos@pobox.com>\n@@ -2734,8 +2738,8 @@\n \n 2017-08-22  Yvan Roux  <yvan.roux@linaro.org>\n \n-        PR c++/80287\n-        * g++.dg/pr80287.C: New test.\n+\tPR c++/80287\n+\t* g++.dg/pr80287.C: New test.\n \n 2017-08-22  Richard Biener  <rguenther@suse.de>\n "}, {"sha": "4190ebaae71ecbecfafe8573075b215c1e17afe1", "filename": "gcc/testsuite/gcc.target/i386/387-ficom-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a5fe52c547185a5fc9ef5b0f205016c3ee35f3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-ficom-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a5fe52c547185a5fc9ef5b0f205016c3ee35f3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-ficom-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-ficom-2.c?ref=07a5fe52c547185a5fc9ef5b0f205016c3ee35f3", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ia32 } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-march=*\" } { \"-march=i386\" } } */\n+/* { dg-options \"-Os -march=i386 -ffast-math -masm=att\" } */\n+\n+#include \"387-ficom-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"ficomps\" 3 } } */\n+/* { dg-final { scan-assembler-times \"ficompl\" 3 } } */"}]}