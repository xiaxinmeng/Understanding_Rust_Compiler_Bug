{"sha": "c5fa0890a2a879bc6c240e83ff67036ca46e1a8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVmYTA4OTBhMmE4NzliYzZjMjQwZTgzZmY2NzAzNmNhNDZlMWE4ZA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-11-12T23:30:42Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-11-12T23:30:42Z"}, "message": "opts-common.c (control_warning_option): New.\n\n\t* opts-common.c (control_warning_option): New.\n\t* opts.c (set_default_handlers): New.\n\t(decode_options): Use set_default_handlers and\n\tcontrol_warning_option.\n\t(common_handle_option): Update call to enable_warning_as_error.\n\t(enable_warning_as_error): Take gcc_options parameters.  Use\n\tcontrol_warning_option.\n\t* opts.h (set_default_handlers, control_warning_option): Declare.\n\nc-family:\n\t* c-common.h (c_family_lang_mask): Declare.\n\t* c-opts.c (c_family_lang_mask): Make extern.\n\t* c-pragma.c (handle_pragma_diagnostic): Use\n\tcontrol_warning_option.\n\ntestsuite:\n\t* gcc.dg/pragma-diag-2.c: New test.\n\nFrom-SVN: r166689", "tree": {"sha": "ae26a7e8a2fcd55cebd323ad5e45623c076f18d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae26a7e8a2fcd55cebd323ad5e45623c076f18d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5fa0890a2a879bc6c240e83ff67036ca46e1a8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5fa0890a2a879bc6c240e83ff67036ca46e1a8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5fa0890a2a879bc6c240e83ff67036ca46e1a8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5fa0890a2a879bc6c240e83ff67036ca46e1a8d/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4d8c676006f3b672af5088f52160e762aa7a197", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4d8c676006f3b672af5088f52160e762aa7a197", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4d8c676006f3b672af5088f52160e762aa7a197"}], "stats": {"total": 164, "additions": 118, "deletions": 46}, "files": [{"sha": "28ac1074536fc8088c0fddc825bd1a00ed68cb20", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5fa0890a2a879bc6c240e83ff67036ca46e1a8d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5fa0890a2a879bc6c240e83ff67036ca46e1a8d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c5fa0890a2a879bc6c240e83ff67036ca46e1a8d", "patch": "@@ -1,3 +1,14 @@\n+2010-11-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* opts-common.c (control_warning_option): New.\n+\t* opts.c (set_default_handlers): New.\n+\t(decode_options): Use set_default_handlers and\n+\tcontrol_warning_option.\n+\t(common_handle_option): Update call to enable_warning_as_error.\n+\t(enable_warning_as_error): Take gcc_options parameters.  Use\n+\tcontrol_warning_option.\n+\t* opts.h (set_default_handlers, control_warning_option): Declare.\n+\n 2010-11-12  Joseph Myers  <joseph@codesourcery.com>\n \n \t* Makefile.in (OPTS_H): Define."}, {"sha": "bb0472e2957f427e28a8d9e29689a738edd132e8", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5fa0890a2a879bc6c240e83ff67036ca46e1a8d/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5fa0890a2a879bc6c240e83ff67036ca46e1a8d/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c5fa0890a2a879bc6c240e83ff67036ca46e1a8d", "patch": "@@ -1,3 +1,10 @@\n+2010-11-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.h (c_family_lang_mask): Declare.\n+\t* c-opts.c (c_family_lang_mask): Make extern.\n+\t* c-pragma.c (handle_pragma_diagnostic): Use\n+\tcontrol_warning_option.\n+\n 2010-11-12  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-common.c (parse_optimize_options): Update call to"}, {"sha": "a28183a9500be4ed162841bcb208ca7d26a24011", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5fa0890a2a879bc6c240e83ff67036ca46e1a8d/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5fa0890a2a879bc6c240e83ff67036ca46e1a8d/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=c5fa0890a2a879bc6c240e83ff67036ca46e1a8d", "patch": "@@ -762,6 +762,7 @@ extern void set_compound_literal_name (tree decl);\n \n extern tree build_va_arg (location_t, tree, tree);\n \n+extern const unsigned int c_family_lang_mask;\n extern unsigned int c_common_option_lang_mask (void);\n extern void c_common_initialize_diagnostics (diagnostic_context *);\n extern bool c_common_complain_wrong_lang_p (const struct cl_option *);"}, {"sha": "46f6c780ea65c44fa974f56d841c53354df3bde9", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5fa0890a2a879bc6c240e83ff67036ca46e1a8d/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5fa0890a2a879bc6c240e83ff67036ca46e1a8d/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=c5fa0890a2a879bc6c240e83ff67036ca46e1a8d", "patch": "@@ -132,7 +132,7 @@ static struct deferred_opt\n } *deferred_opts;\n \n \n-static const unsigned int \n+extern const unsigned int \n c_family_lang_mask = (CL_C | CL_CXX | CL_ObjC | CL_ObjCXX);\n \n /* Defer option CODE with argument ARG.  */\n@@ -467,6 +467,10 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       cpp_opts->warn_invalid_pch = value;\n       break;\n \n+    case OPT_Wlong_long:\n+      cpp_opts->cpp_warn_long_long = value;\n+      break;\n+\n     case OPT_Wmissing_include_dirs:\n       cpp_opts->warn_missing_include_dirs = value;\n       break;"}, {"sha": "9c00983596fc4b11c5ce2150d0e937a7cf0acf7e", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5fa0890a2a879bc6c240e83ff67036ca46e1a8d/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5fa0890a2a879bc6c240e83ff67036ca46e1a8d/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=c5fa0890a2a879bc6c240e83ff67036ca46e1a8d", "patch": "@@ -720,6 +720,7 @@ handle_pragma_diagnostic(cpp_reader *ARG_UNUSED(dummy))\n   enum cpp_ttype token;\n   diagnostic_t kind;\n   tree x;\n+  struct cl_option_handlers handlers;\n \n   token = pragma_lex (&x);\n   if (token != CPP_NAME)\n@@ -748,18 +749,14 @@ handle_pragma_diagnostic(cpp_reader *ARG_UNUSED(dummy))\n   if (token != CPP_STRING)\n     GCC_BAD (\"missing option after %<#pragma GCC diagnostic%> kind\");\n   option_string = TREE_STRING_POINTER (x);\n+  set_default_handlers (&handlers);\n   for (option_index = 0; option_index < cl_options_count; option_index++)\n     if (strcmp (cl_options[option_index].opt_text, option_string) == 0)\n       {\n-\tvoid *flag_var = option_flag_var (option_index, &global_options);\n-\n-\t/* This overrides -Werror, for example.  */\n-\tdiagnostic_classify_diagnostic (global_dc, option_index, kind, input_location);\n-\t/* This makes sure the option is enabled, like -Wfoo would do.  */\n-\tif (cl_options[option_index].var_type == CLVC_BOOLEAN\n-\t    && flag_var\n-\t    && kind != DK_IGNORED)\n-\t    *(int *) flag_var = 1;\n+\tcontrol_warning_option (option_index, (int) kind, kind != DK_IGNORED,\n+\t\t\t\tinput_location, c_family_lang_mask, &handlers,\n+\t\t\t\t&global_options, &global_options_set,\n+\t\t\t\tglobal_dc);\n \treturn;\n       }\n   GCC_BAD (\"unknown option after %<#pragma GCC diagnostic%> kind\");"}, {"sha": "cc20410544cf7a66b7b0e56126448d1a60c75dc3", "filename": "gcc/opts-common.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5fa0890a2a879bc6c240e83ff67036ca46e1a8d/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5fa0890a2a879bc6c240e83ff67036ca46e1a8d/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=c5fa0890a2a879bc6c240e83ff67036ca46e1a8d", "patch": "@@ -977,3 +977,34 @@ option_flag_var (int opt_index, struct gcc_options *opts)\n     return NULL;\n   return (void *)(((char *) opts) + option->flag_var_offset);\n }\n+\n+/* Set a warning option OPT_INDEX (language mask LANG_MASK, option\n+   handlers HANDLERS) to have diagnostic kind KIND for option\n+   structures OPTS and OPTS_SET and diagnostic context DC (possibly\n+   NULL), at location LOC (UNKNOWN_LOCATION for -Werror=).  If IMPLY,\n+   the warning option in question is implied at this point.  This is\n+   used by -Werror= and #pragma GCC diagnostic.  */\n+\n+void\n+control_warning_option (unsigned int opt_index, int kind, bool imply,\n+\t\t\tlocation_t loc, unsigned int lang_mask,\n+\t\t\tconst struct cl_option_handlers *handlers,\n+\t\t\tstruct gcc_options *opts,\n+\t\t\tstruct gcc_options *opts_set,\n+\t\t\tdiagnostic_context *dc)\n+{\n+  if (cl_options[opt_index].alias_target != N_OPTS)\n+    opt_index = cl_options[opt_index].alias_target;\n+  if (opt_index == OPT_SPECIAL_ignore)\n+    return;\n+  if (dc)\n+    diagnostic_classify_diagnostic (dc, opt_index, (diagnostic_t) kind, loc);\n+  if (imply)\n+    {\n+      /* -Werror=foo implies -Wfoo.  */\n+      if (cl_options[opt_index].var_type == CLVC_BOOLEAN)\n+\thandle_generated_option (opts, opts_set,\n+\t\t\t\t opt_index, NULL, 1, lang_mask,\n+\t\t\t\t kind, loc, handlers, dc);\n+    }\n+}"}, {"sha": "d4d7f1d82cc69b6cd5c56230ce79b48b91ea7350", "filename": "gcc/opts.c", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5fa0890a2a879bc6c240e83ff67036ca46e1a8d/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5fa0890a2a879bc6c240e83ff67036ca46e1a8d/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=c5fa0890a2a879bc6c240e83ff67036ca46e1a8d", "patch": "@@ -363,6 +363,8 @@ static void set_unsafe_math_optimizations_flags (struct gcc_options *opts,\n static void enable_warning_as_error (const char *arg, int value,\n \t\t\t\t     unsigned int lang_mask,\n \t\t\t\t     const struct cl_option_handlers *handlers,\n+\t\t\t\t     struct gcc_options *opts,\n+\t\t\t\t     struct gcc_options *opts_set,\n \t\t\t\t     location_t loc,\n \t\t\t\t     diagnostic_context *dc);\n \n@@ -1014,6 +1016,23 @@ default_options_optimization (struct gcc_options *opts,\n \n static void finish_options (struct gcc_options *, struct gcc_options *);\n \n+/* Set *HANDLERS to the default set of option handlers for use in the\n+   compilers proper (not the driver).  */\n+void\n+set_default_handlers (struct cl_option_handlers *handlers)\n+{\n+  handlers->unknown_option_callback = unknown_option_callback;\n+  handlers->wrong_lang_callback = complain_wrong_lang;\n+  handlers->post_handling_callback = post_handling_callback;\n+  handlers->num_handlers = 3;\n+  handlers->handlers[0].handler = lang_handle_option;\n+  handlers->handlers[0].mask = initial_lang_mask;\n+  handlers->handlers[1].handler = common_handle_option;\n+  handlers->handlers[1].mask = CL_COMMON;\n+  handlers->handlers[2].handler = target_handle_option;\n+  handlers->handlers[2].mask = CL_TARGET;\n+}\n+\n /* Parse command line options and set default flag values.  Do minimal\n    options processing.  The decoded options are in *DECODED_OPTIONS\n    and *DECODED_OPTIONS_COUNT; settings go in OPTS, OPTS_SET and DC;\n@@ -1030,20 +1049,12 @@ decode_options (struct gcc_options *opts, struct gcc_options *opts_set,\n \n   lang_mask = initial_lang_mask;\n \n-  handlers.unknown_option_callback = unknown_option_callback;\n-  handlers.wrong_lang_callback = complain_wrong_lang;\n-  handlers.post_handling_callback = post_handling_callback;\n-  handlers.num_handlers = 3;\n-  handlers.handlers[0].handler = lang_handle_option;\n-  handlers.handlers[0].mask = lang_mask;\n-  handlers.handlers[1].handler = common_handle_option;\n-  handlers.handlers[1].mask = CL_COMMON;\n-  handlers.handlers[2].handler = target_handle_option;\n-  handlers.handlers[2].mask = CL_TARGET;\n-\n-  /* Enable -Werror=coverage-mismatch by default */\n-  enable_warning_as_error (\"coverage-mismatch\", 1, lang_mask, &handlers,\n-\t\t\t   loc, dc);\n+  set_default_handlers (&handlers);\n+\n+  /* Enable -Werror=coverage-mismatch by default.  */\n+  control_warning_option (OPT_Wcoverage_mismatch, (int) DK_ERROR, true,\n+\t\t\t  loc, lang_mask,\n+\t\t\t  &handlers, opts, opts_set, dc);\n \n   default_options_optimization (opts, opts_set,\n \t\t\t\tdecoded_options, decoded_options_count,\n@@ -1778,7 +1789,8 @@ common_handle_option (struct gcc_options *opts,\n       break;\n \n     case OPT_Werror_:\n-      enable_warning_as_error (arg, value, lang_mask, handlers, loc, dc);\n+      enable_warning_as_error (arg, value, lang_mask, handlers,\n+\t\t\t       opts, opts_set, loc, dc);\n       break;\n \n     case OPT_Wlarger_than_:\n@@ -2411,13 +2423,15 @@ get_option_state (struct gcc_options *opts, int option,\n }\n \n /* Enable (or disable if VALUE is 0) a warning option ARG (language\n-   mask LANG_MASK, option handlers HANDLERS) as an error for\n-   diagnostic context DC (possibly NULL), location LOC.  This is used\n-   by -Werror=.  */\n+   mask LANG_MASK, option handlers HANDLERS) as an error for option\n+   structures OPTS and OPTS_SET, diagnostic context DC (possibly\n+   NULL), location LOC.  This is used by -Werror=.  */\n \n static void\n enable_warning_as_error (const char *arg, int value, unsigned int lang_mask,\n \t\t\t const struct cl_option_handlers *handlers,\n+\t\t\t struct gcc_options *opts,\n+\t\t\t struct gcc_options *opts_set,\n \t\t\t location_t loc, diagnostic_context *dc)\n {\n   char *new_option;\n@@ -2429,29 +2443,15 @@ enable_warning_as_error (const char *arg, int value, unsigned int lang_mask,\n   option_index = find_opt (new_option, lang_mask);\n   if (option_index == OPT_SPECIAL_unknown)\n     {\n-      error (\"-Werror=%s: No option -%s\", arg, new_option);\n+      error (\"-Werror=%s: no option -%s\", arg, new_option);\n     }\n   else\n     {\n-      const struct cl_option *option = &cl_options[option_index];\n       const diagnostic_t kind = value ? DK_ERROR : DK_WARNING;\n \n-      if (option->alias_target != N_OPTS)\n-\toption_index = option->alias_target;\n-      if (option_index == OPT_SPECIAL_ignore)\n-\treturn;\n-      if (dc)\n-\tdiagnostic_classify_diagnostic (dc, option_index, kind, loc);\n-      if (kind == DK_ERROR)\n-\t{\n-\t  const struct cl_option * const option = cl_options + option_index;\n-\n-\t  /* -Werror=foo implies -Wfoo.  */\n-\t  if (option->var_type == CLVC_BOOLEAN)\n-\t    handle_generated_option (&global_options, &global_options_set,\n-\t\t\t\t     option_index, NULL, value, lang_mask,\n-\t\t\t\t     (int)kind, loc, handlers, dc);\n-\t}\n+      control_warning_option (option_index, (int) kind, value,\n+\t\t\t      loc, lang_mask,\n+\t\t\t      handlers, opts, opts_set, dc);\n     }\n   free (new_option);\n }"}, {"sha": "00422b6ea387fd0ba5e047cf183be467dd9eccb7", "filename": "gcc/opts.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5fa0890a2a879bc6c240e83ff67036ca46e1a8d/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5fa0890a2a879bc6c240e83ff67036ca46e1a8d/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=c5fa0890a2a879bc6c240e83ff67036ca46e1a8d", "patch": "@@ -223,6 +223,7 @@ extern void decode_cmdline_options_to_array_default_mask (unsigned int argc,\n \t\t\t\t\t\t\t  const char **argv, \n \t\t\t\t\t\t\t  struct cl_decoded_option **decoded_options,\n \t\t\t\t\t\t\t  unsigned int *decoded_options_count);\n+extern void set_default_handlers (struct cl_option_handlers *handlers);\n extern void decode_options (struct gcc_options *opts,\n \t\t\t    struct gcc_options *opts_set,\n \t\t\t    struct cl_decoded_option *decoded_options,\n@@ -255,5 +256,12 @@ extern void read_cmdline_option (struct gcc_options *opts,\n \t\t\t\t unsigned int lang_mask,\n \t\t\t\t const struct cl_option_handlers *handlers,\n \t\t\t\t diagnostic_context *dc);\n+extern void control_warning_option (unsigned int opt_index, int kind,\n+\t\t\t\t    bool imply, location_t loc,\n+\t\t\t\t    unsigned int lang_mask,\n+\t\t\t\t    const struct cl_option_handlers *handlers,\n+\t\t\t\t    struct gcc_options *opts,\n+\t\t\t\t    struct gcc_options *opts_set,\n+\t\t\t\t    diagnostic_context *dc);\n extern void print_ignored_options (void);\n #endif"}, {"sha": "8eeb72cd487b90745c05259073d27bb90fa3642c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5fa0890a2a879bc6c240e83ff67036ca46e1a8d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5fa0890a2a879bc6c240e83ff67036ca46e1a8d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c5fa0890a2a879bc6c240e83ff67036ca46e1a8d", "patch": "@@ -1,3 +1,7 @@\n+2010-11-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/pragma-diag-2.c: New test.\n+\n 2010-11-12  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/45794"}, {"sha": "588d618955cbb0474550e53ea4778d730264be8d", "filename": "gcc/testsuite/gcc.dg/pragma-diag-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5fa0890a2a879bc6c240e83ff67036ca46e1a8d/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-diag-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5fa0890a2a879bc6c240e83ff67036ca46e1a8d/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-diag-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-diag-2.c?ref=c5fa0890a2a879bc6c240e83ff67036ca46e1a8d", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c89 -pedantic -Wno-long-long\" } */\n+/* { dg-message \"warnings being treated as errors\" \"\" { target *-*-* } 0 } */\n+\n+int i = 0LL;\n+\n+#pragma GCC diagnostic error \"-Wlong-long\"\n+\n+int j = 1LL; /* { dg-error \"long long\" } */"}]}