{"sha": "5d3b14bd9ac79db3f2b957752b41bd0641f49829", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQzYjE0YmQ5YWM3OWRiM2YyYjk1Nzc1MmI0MWJkMDY0MWY0OTgyOQ==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-09-18T09:34:58Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-09-18T09:34:58Z"}, "message": "In libobjc/:\n\n        * hash.c: Include objc-private/hash.h instead of objc/hash.h.\n\n        * objc/sarray.h: Moved into objc/deprecated/sarray.h;\n        objc/sarray.h replaced with a placeholder including the file from\n        the deprecated/ directory.\n        * objc-private/sarray.h: New file (private copy of sarray.h).\n        * hash.c: Include <assert.h> instead of \"assert.h\"\n        * sarray.c: Include <assert.h> instead of \"assert.h\".  Include\n        objc-private/sarray.h instead of objc/sarray.h.\n        * selector.c: Include objc-private/sarray.h instead of\n        objc/sarray.h.\n        * sendmsg.c: Include <assert.h>.  Include objc-private/sarray.h\n        instead of objc/sarray.h.\n        * Makefile.in (OBJC_DEPRECATED_H): Added sarray.h.\n\nFrom-SVN: r164389", "tree": {"sha": "91d9ff8ffcfeb22b2c75ae8a683cb8b8e0b961c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91d9ff8ffcfeb22b2c75ae8a683cb8b8e0b961c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d3b14bd9ac79db3f2b957752b41bd0641f49829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d3b14bd9ac79db3f2b957752b41bd0641f49829", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d3b14bd9ac79db3f2b957752b41bd0641f49829", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d3b14bd9ac79db3f2b957752b41bd0641f49829/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fc99f7809e92e922356761380539cf4c388f48b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc99f7809e92e922356761380539cf4c388f48b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc99f7809e92e922356761380539cf4c388f48b8"}], "stats": {"total": 755, "additions": 506, "deletions": 249}, "files": [{"sha": "4c238076b108595421ee16d8330080a27e55fdb4", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3b14bd9ac79db3f2b957752b41bd0641f49829/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3b14bd9ac79db3f2b957752b41bd0641f49829/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=5d3b14bd9ac79db3f2b957752b41bd0641f49829", "patch": "@@ -1,3 +1,20 @@\n+2010-09-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* hash.c: Include objc-private/hash.h instead of objc/hash.h.\n+\n+\t* objc/sarray.h: Moved into objc/deprecated/sarray.h;\n+\tobjc/sarray.h replaced with a placeholder including the file from\n+\tthe deprecated/ directory.\n+\t* objc-private/sarray.h: New file (private copy of sarray.h).\n+\t* hash.c: Include <assert.h> instead of \"assert.h\"\n+\t* sarray.c: Include <assert.h> instead of \"assert.h\".  Include\n+\tobjc-private/sarray.h instead of objc/sarray.h.\n+\t* selector.c: Include objc-private/sarray.h instead of\n+\tobjc/sarray.h.\n+\t* sendmsg.c: Include <assert.h>.  Include objc-private/sarray.h\n+\tinstead of objc/sarray.h.\n+\t* Makefile.in (OBJC_DEPRECATED_H): Added sarray.h.\t\n+\n 2010-09-17  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc-private/objc-list.h (list_remove_elem): Unused function"}, {"sha": "71a3a2e21c27a22acb6bb35609a265ebfce0ed7e", "filename": "libobjc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3b14bd9ac79db3f2b957752b41bd0641f49829/libobjc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3b14bd9ac79db3f2b957752b41bd0641f49829/libobjc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FMakefile.in?ref=5d3b14bd9ac79db3f2b957752b41bd0641f49829", "patch": "@@ -120,11 +120,11 @@ OBJC_H = \\\n   message.h \\\n   objc-api.h \\\n   objc-decls.h \\\n-  sarray.h \\\n   thr.h \\\n   \\\n   hash.h \\\n   objc-list.h \\\n+  sarray.h \\\n   typedstream.h\n \n # User-visible header files containing deprecated APIs, from the\n@@ -139,6 +139,7 @@ OBJC_DEPRECATED_H = \\\n   objc_malloc.h \\\n   objc_unexpected_exception.h \\\n   objc_valloc.h \\\n+  sarray.h \\\n   struct_objc_class.h \\\n   struct_objc_protocol.h \\\n   struct_objc_selector.h \\"}, {"sha": "602fc84a87400f0cc066029e6083c7b43c59627f", "filename": "libobjc/hash.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3b14bd9ac79db3f2b957752b41bd0641f49829/libobjc%2Fhash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3b14bd9ac79db3f2b957752b41bd0641f49829/libobjc%2Fhash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fhash.c?ref=5d3b14bd9ac79db3f2b957752b41bd0641f49829", "patch": "@@ -23,11 +23,11 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n #include \"objc-private/common.h\"\n-#include \"assert.h\"\n+#include <assert.h> /* For assert */\n \n #include \"objc/objc.h\"\n #include \"objc/objc-api.h\"\n-#include \"objc/hash.h\"\n+#include \"objc-private/hash.h\"\n #include \"objc-private/runtime.h\"\t\t/* for DEBUG_PRINTF */\n \n /* These two macros determine when a hash table is full and"}, {"sha": "f81b08e71e756b3154dc831ea79c50dae873d37b", "filename": "libobjc/objc-private/sarray.h", "status": "added", "additions": 239, "deletions": 0, "changes": 239, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3b14bd9ac79db3f2b957752b41bd0641f49829/libobjc%2Fobjc-private%2Fsarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3b14bd9ac79db3f2b957752b41bd0641f49829/libobjc%2Fobjc-private%2Fsarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc-private%2Fsarray.h?ref=5d3b14bd9ac79db3f2b957752b41bd0641f49829", "patch": "@@ -0,0 +1,239 @@\n+/* Sparse Arrays for Objective C dispatch tables\n+   Copyright (C) 1993, 1995, 1996, 2004, 2009 Free Software Foundation, Inc.\n+   Contributed by Kresten Krab Thorup.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef __sarray_INCLUDE_GNU\n+#define __sarray_INCLUDE_GNU\n+\n+#define OBJC_SPARSE2\t\t/* 2-level sparse array */\n+/* #define OBJC_SPARSE3 */      /* 3-level sparse array */\n+\n+#ifdef OBJC_SPARSE2\n+extern const char* __objc_sparse2_id;\n+#endif\n+\n+#ifdef OBJC_SPARSE3\n+extern const char* __objc_sparse3_id;\n+#endif\n+\n+#include <stddef.h>\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif /* __cplusplus */\n+\n+extern int nbuckets;\t\t/* for stats */\n+extern int nindices;\n+extern int narrays;\n+extern int idxsize;\n+\n+/* An unsigned integer of same size as a pointer */\n+#define SIZET_BITS (sizeof(size_t)*8)\n+\n+#if defined(__sparc__) || defined(OBJC_SPARSE2)\n+#define PRECOMPUTE_SELECTORS\n+#endif\n+\n+#ifdef OBJC_SPARSE3\n+\n+/* Buckets are 8 words each */\n+#define BUCKET_BITS 3\n+#define BUCKET_SIZE (1<<BUCKET_BITS)\n+#define BUCKET_MASK (BUCKET_SIZE-1)\n+\n+/* Indices are 16 words each */\n+#define INDEX_BITS 4\n+#define INDEX_SIZE (1<<INDEX_BITS)\n+#define INDEX_MASK (INDEX_SIZE-1)\n+\n+#define INDEX_CAPACITY (BUCKET_SIZE*INDEX_SIZE)\n+\n+#else /* OBJC_SPARSE2 */\n+\n+/* Buckets are 32 words each */\n+#define BUCKET_BITS 5\n+#define BUCKET_SIZE (1<<BUCKET_BITS)\n+#define BUCKET_MASK (BUCKET_SIZE-1)\n+\n+#endif /* OBJC_SPARSE2 */\n+\n+typedef size_t sidx;\n+\n+#ifdef PRECOMPUTE_SELECTORS\n+\n+struct soffset {\n+#ifdef OBJC_SPARSE3\n+  unsigned int unused : SIZET_BITS/4;\n+  unsigned int eoffset : SIZET_BITS/4;\n+  unsigned int boffset : SIZET_BITS/4;\n+  unsigned int ioffset : SIZET_BITS/4;\n+#else /* OBJC_SPARSE2 */\n+#ifdef __sparc__\n+  unsigned long boffset : (SIZET_BITS - 2) - BUCKET_BITS;\n+  unsigned int eoffset : BUCKET_BITS;\n+  unsigned int unused  : 2;\n+#else\n+  unsigned int boffset : SIZET_BITS/2;\n+  unsigned int eoffset : SIZET_BITS/2;\n+#endif\n+#endif /* OBJC_SPARSE2 */\n+};\n+\n+union sofftype {\n+  struct soffset off;\n+  sidx idx;\n+};\n+\n+#endif /* not PRECOMPUTE_SELECTORS */\n+\n+union sversion {\n+  int\tversion;\n+  void *next_free;\n+};\n+\n+struct sbucket {\n+  void* elems[BUCKET_SIZE];\t/* elements stored in array */\n+  union sversion\tversion;\t\t/* used for copy-on-write */\n+};\n+\n+#ifdef OBJC_SPARSE3\n+\n+struct sindex {\n+  struct sbucket* buckets[INDEX_SIZE];\n+  union sversion\tversion;\t\t/* used for copy-on-write */\n+};\n+\n+#endif /* OBJC_SPARSE3 */\n+\n+struct sarray {\n+#ifdef OBJC_SPARSE3\n+  struct sindex** indices;\n+  struct sindex* empty_index;\n+#else /* OBJC_SPARSE2 */\n+  struct sbucket** buckets;\n+#endif  /* OBJC_SPARSE2 */\n+  struct sbucket* empty_bucket;\n+  union sversion\tversion;\t\t/* used for copy-on-write */\n+  short ref_count;\n+  struct sarray* is_copy_of;\n+  size_t capacity;\n+};\n+\n+struct sarray* sarray_new(int, void* default_element);\n+void sarray_free(struct sarray*);\n+struct sarray* sarray_lazy_copy(struct sarray*);\n+void sarray_realloc(struct sarray*, int new_size);\n+void sarray_at_put(struct sarray*, sidx indx, void* elem);\n+void sarray_at_put_safe(struct sarray*, sidx indx, void* elem);\n+\n+struct sarray* sarray_hard_copy(struct sarray*); /* ... like the name? */\n+void sarray_remove_garbage(void);\n+\f\n+\n+#ifdef PRECOMPUTE_SELECTORS\n+/* Transform soffset values to ints and vica verca */\n+static inline unsigned int\n+soffset_decode(sidx indx)\n+{\n+  union sofftype x;\n+  x.idx = indx;\n+#ifdef OBJC_SPARSE3\n+  return x.off.eoffset\n+    + (x.off.boffset*BUCKET_SIZE)\n+      + (x.off.ioffset*INDEX_CAPACITY);\n+#else /* OBJC_SPARSE2 */\n+  return x.off.eoffset + (x.off.boffset*BUCKET_SIZE);\n+#endif /* OBJC_SPARSE2 */\n+}\n+\n+static inline sidx\n+soffset_encode(size_t offset)\n+{\n+  union sofftype x;\n+  x.off.eoffset = offset%BUCKET_SIZE;\n+#ifdef OBJC_SPARSE3\n+  x.off.boffset = (offset/BUCKET_SIZE)%INDEX_SIZE;\n+  x.off.ioffset = offset/INDEX_CAPACITY;\n+#else /* OBJC_SPARSE2 */\n+  x.off.boffset = offset/BUCKET_SIZE;\n+#endif\n+  return (sidx)x.idx;\n+}\n+\n+#else /* not PRECOMPUTE_SELECTORS */\n+\n+static inline size_t\n+soffset_decode(sidx indx)\n+{\n+  return indx;\n+}\n+\n+static inline sidx\n+soffset_encode(size_t offset)\n+{\n+  return offset;\n+}\n+#endif /* not PRECOMPUTE_SELECTORS */\n+\n+/* Get element from the Sparse array `array' at offset `indx' */\n+\n+static inline void* sarray_get(struct sarray* array, sidx indx)\n+{\n+#ifdef PRECOMPUTE_SELECTORS\n+  union sofftype x;\n+  x.idx = indx;\n+#ifdef OBJC_SPARSE3\n+  return \n+    array->\n+      indices[x.off.ioffset]->\n+\tbuckets[x.off.boffset]->\n+\t  elems[x.off.eoffset];\n+#else /* OBJC_SPARSE2 */\n+  return array->buckets[x.off.boffset]->elems[x.off.eoffset];\n+#endif /* OBJC_SPARSE2 */\n+#else /* not PRECOMPUTE_SELECTORS */\n+#ifdef OBJC_SPARSE3\n+  return array->\n+    indices[indx/INDEX_CAPACITY]->\n+      buckets[(indx/BUCKET_SIZE)%INDEX_SIZE]->\n+\telems[indx%BUCKET_SIZE];\n+#else /* OBJC_SPARSE2 */\n+  return array->buckets[indx/BUCKET_SIZE]->elems[indx%BUCKET_SIZE];\n+#endif /* not OBJC_SPARSE3 */\n+#endif /* not PRECOMPUTE_SELECTORS */\n+}\n+\n+static inline void* sarray_get_safe(struct sarray* array, sidx indx)\n+{\n+  if(soffset_decode(indx) < array->capacity)\n+    return sarray_get(array, indx);\n+  else\n+    return (array->empty_bucket->elems[0]);\n+}\n+\n+#ifdef __cplusplus\n+}\n+#endif /* __cplusplus */\n+\n+#endif /* __sarray_INCLUDE_GNU */"}, {"sha": "aa2f3350a456288fb8a9da0baf5bed6f71a793d1", "filename": "libobjc/objc/deprecated/sarray.h", "status": "added", "additions": 240, "deletions": 0, "changes": 240, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3b14bd9ac79db3f2b957752b41bd0641f49829/libobjc%2Fobjc%2Fdeprecated%2Fsarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3b14bd9ac79db3f2b957752b41bd0641f49829/libobjc%2Fobjc%2Fdeprecated%2Fsarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2Fsarray.h?ref=5d3b14bd9ac79db3f2b957752b41bd0641f49829", "patch": "@@ -0,0 +1,240 @@\n+/* Sparse Arrays for Objective C dispatch tables\n+   Copyright (C) 1993, 1995, 1996, 2004, 2009 Free Software Foundation, Inc.\n+   Contributed by Kresten Krab Thorup.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+\n+#ifndef __sarray_INCLUDE_GNU\n+#define __sarray_INCLUDE_GNU\n+\n+#define OBJC_SPARSE2\t\t/* 2-level sparse array */\n+/* #define OBJC_SPARSE3 */      /* 3-level sparse array */\n+\n+#ifdef OBJC_SPARSE2\n+extern const char* __objc_sparse2_id;\n+#endif\n+\n+#ifdef OBJC_SPARSE3\n+extern const char* __objc_sparse3_id;\n+#endif\n+\n+#include <stddef.h>\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif /* __cplusplus */\n+\n+extern int nbuckets;\t\t/* for stats */\n+extern int nindices;\n+extern int narrays;\n+extern int idxsize;\n+\n+/* An unsigned integer of same size as a pointer */\n+#define SIZET_BITS (sizeof(size_t)*8)\n+\n+#if defined(__sparc__) || defined(OBJC_SPARSE2)\n+#define PRECOMPUTE_SELECTORS\n+#endif\n+\n+#ifdef OBJC_SPARSE3\n+\n+/* Buckets are 8 words each */\n+#define BUCKET_BITS 3\n+#define BUCKET_SIZE (1<<BUCKET_BITS)\n+#define BUCKET_MASK (BUCKET_SIZE-1)\n+\n+/* Indices are 16 words each */\n+#define INDEX_BITS 4\n+#define INDEX_SIZE (1<<INDEX_BITS)\n+#define INDEX_MASK (INDEX_SIZE-1)\n+\n+#define INDEX_CAPACITY (BUCKET_SIZE*INDEX_SIZE)\n+\n+#else /* OBJC_SPARSE2 */\n+\n+/* Buckets are 32 words each */\n+#define BUCKET_BITS 5\n+#define BUCKET_SIZE (1<<BUCKET_BITS)\n+#define BUCKET_MASK (BUCKET_SIZE-1)\n+\n+#endif /* OBJC_SPARSE2 */\n+\n+typedef size_t sidx;\n+\n+#ifdef PRECOMPUTE_SELECTORS\n+\n+struct soffset {\n+#ifdef OBJC_SPARSE3\n+  unsigned int unused : SIZET_BITS/4;\n+  unsigned int eoffset : SIZET_BITS/4;\n+  unsigned int boffset : SIZET_BITS/4;\n+  unsigned int ioffset : SIZET_BITS/4;\n+#else /* OBJC_SPARSE2 */\n+#ifdef __sparc__\n+  unsigned long boffset : (SIZET_BITS - 2) - BUCKET_BITS;\n+  unsigned int eoffset : BUCKET_BITS;\n+  unsigned int unused  : 2;\n+#else\n+  unsigned int boffset : SIZET_BITS/2;\n+  unsigned int eoffset : SIZET_BITS/2;\n+#endif\n+#endif /* OBJC_SPARSE2 */\n+};\n+\n+union sofftype {\n+  struct soffset off;\n+  sidx idx;\n+};\n+\n+#endif /* not PRECOMPUTE_SELECTORS */\n+\n+union sversion {\n+  int\tversion;\n+  void *next_free;\n+};\n+\n+struct sbucket {\n+  void* elems[BUCKET_SIZE];\t/* elements stored in array */\n+  union sversion\tversion;\t\t/* used for copy-on-write */\n+};\n+\n+#ifdef OBJC_SPARSE3\n+\n+struct sindex {\n+  struct sbucket* buckets[INDEX_SIZE];\n+  union sversion\tversion;\t\t/* used for copy-on-write */\n+};\n+\n+#endif /* OBJC_SPARSE3 */\n+\n+struct sarray {\n+#ifdef OBJC_SPARSE3\n+  struct sindex** indices;\n+  struct sindex* empty_index;\n+#else /* OBJC_SPARSE2 */\n+  struct sbucket** buckets;\n+#endif  /* OBJC_SPARSE2 */\n+  struct sbucket* empty_bucket;\n+  union sversion\tversion;\t\t/* used for copy-on-write */\n+  short ref_count;\n+  struct sarray* is_copy_of;\n+  size_t capacity;\n+};\n+\n+struct sarray* sarray_new(int, void* default_element);\n+void sarray_free(struct sarray*);\n+struct sarray* sarray_lazy_copy(struct sarray*);\n+void sarray_realloc(struct sarray*, int new_size);\n+void sarray_at_put(struct sarray*, sidx indx, void* elem);\n+void sarray_at_put_safe(struct sarray*, sidx indx, void* elem);\n+\n+struct sarray* sarray_hard_copy(struct sarray*); /* ... like the name? */\n+void sarray_remove_garbage(void);\n+\f\n+\n+#ifdef PRECOMPUTE_SELECTORS\n+/* Transform soffset values to ints and vica verca */\n+static inline unsigned int\n+soffset_decode(sidx indx)\n+{\n+  union sofftype x;\n+  x.idx = indx;\n+#ifdef OBJC_SPARSE3\n+  return x.off.eoffset\n+    + (x.off.boffset*BUCKET_SIZE)\n+      + (x.off.ioffset*INDEX_CAPACITY);\n+#else /* OBJC_SPARSE2 */\n+  return x.off.eoffset + (x.off.boffset*BUCKET_SIZE);\n+#endif /* OBJC_SPARSE2 */\n+}\n+\n+static inline sidx\n+soffset_encode(size_t offset)\n+{\n+  union sofftype x;\n+  x.off.eoffset = offset%BUCKET_SIZE;\n+#ifdef OBJC_SPARSE3\n+  x.off.boffset = (offset/BUCKET_SIZE)%INDEX_SIZE;\n+  x.off.ioffset = offset/INDEX_CAPACITY;\n+#else /* OBJC_SPARSE2 */\n+  x.off.boffset = offset/BUCKET_SIZE;\n+#endif\n+  return (sidx)x.idx;\n+}\n+\n+#else /* not PRECOMPUTE_SELECTORS */\n+\n+static inline size_t\n+soffset_decode(sidx indx)\n+{\n+  return indx;\n+}\n+\n+static inline sidx\n+soffset_encode(size_t offset)\n+{\n+  return offset;\n+}\n+#endif /* not PRECOMPUTE_SELECTORS */\n+\n+/* Get element from the Sparse array `array' at offset `indx' */\n+\n+static inline void* sarray_get(struct sarray* array, sidx indx)\n+{\n+#ifdef PRECOMPUTE_SELECTORS\n+  union sofftype x;\n+  x.idx = indx;\n+#ifdef OBJC_SPARSE3\n+  return \n+    array->\n+      indices[x.off.ioffset]->\n+\tbuckets[x.off.boffset]->\n+\t  elems[x.off.eoffset];\n+#else /* OBJC_SPARSE2 */\n+  return array->buckets[x.off.boffset]->elems[x.off.eoffset];\n+#endif /* OBJC_SPARSE2 */\n+#else /* not PRECOMPUTE_SELECTORS */\n+#ifdef OBJC_SPARSE3\n+  return array->\n+    indices[indx/INDEX_CAPACITY]->\n+      buckets[(indx/BUCKET_SIZE)%INDEX_SIZE]->\n+\telems[indx%BUCKET_SIZE];\n+#else /* OBJC_SPARSE2 */\n+  return array->buckets[indx/BUCKET_SIZE]->elems[indx%BUCKET_SIZE];\n+#endif /* not OBJC_SPARSE3 */\n+#endif /* not PRECOMPUTE_SELECTORS */\n+}\n+\n+static inline void* sarray_get_safe(struct sarray* array, sidx indx)\n+{\n+  if(soffset_decode(indx) < array->capacity)\n+    return sarray_get(array, indx);\n+  else\n+    return (array->empty_bucket->elems[0]);\n+}\n+\n+#ifdef __cplusplus\n+}\n+#endif /* __cplusplus */\n+\n+#endif /* __sarray_INCLUDE_GNU */"}, {"sha": "ff51e47f918d018f8393630802ab694c96a35536", "filename": "libobjc/objc/sarray.h", "status": "modified", "additions": 1, "deletions": 242, "changes": 243, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3b14bd9ac79db3f2b957752b41bd0641f49829/libobjc%2Fobjc%2Fsarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3b14bd9ac79db3f2b957752b41bd0641f49829/libobjc%2Fobjc%2Fsarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fsarray.h?ref=5d3b14bd9ac79db3f2b957752b41bd0641f49829", "patch": "@@ -1,243 +1,2 @@\n-/* Sparse Arrays for Objective C dispatch tables\n-   Copyright (C) 1993, 1995, 1996, 2004, 2009 Free Software Foundation, Inc.\n-   Contributed by Kresten Krab Thorup.\n+#include \"deprecated/sarray.h\"\n \n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-\n-#ifndef __sarray_INCLUDE_GNU\n-#define __sarray_INCLUDE_GNU\n-\n-#include \"thr.h\"\n-\n-#define OBJC_SPARSE2\t\t/* 2-level sparse array */\n-/* #define OBJC_SPARSE3 */      /* 3-level sparse array */\n-\n-#ifdef OBJC_SPARSE2\n-extern const char* __objc_sparse2_id;\n-#endif\n-\n-#ifdef OBJC_SPARSE3\n-extern const char* __objc_sparse3_id;\n-#endif\n-\n-#include <stddef.h>\n-#include <assert.h>\n-\n-#ifdef __cplusplus\n-extern \"C\" {\n-#endif /* __cplusplus */\n-\n-extern int nbuckets;\t\t/* for stats */\n-extern int nindices;\n-extern int narrays;\n-extern int idxsize;\n-\n-/* An unsigned integer of same size as a pointer */\n-#define SIZET_BITS (sizeof(size_t)*8)\n-\n-#if defined(__sparc__) || defined(OBJC_SPARSE2)\n-#define PRECOMPUTE_SELECTORS\n-#endif\n-\n-#ifdef OBJC_SPARSE3\n-\n-/* Buckets are 8 words each */\n-#define BUCKET_BITS 3\n-#define BUCKET_SIZE (1<<BUCKET_BITS)\n-#define BUCKET_MASK (BUCKET_SIZE-1)\n-\n-/* Indices are 16 words each */\n-#define INDEX_BITS 4\n-#define INDEX_SIZE (1<<INDEX_BITS)\n-#define INDEX_MASK (INDEX_SIZE-1)\n-\n-#define INDEX_CAPACITY (BUCKET_SIZE*INDEX_SIZE)\n-\n-#else /* OBJC_SPARSE2 */\n-\n-/* Buckets are 32 words each */\n-#define BUCKET_BITS 5\n-#define BUCKET_SIZE (1<<BUCKET_BITS)\n-#define BUCKET_MASK (BUCKET_SIZE-1)\n-\n-#endif /* OBJC_SPARSE2 */\n-\n-typedef size_t sidx;\n-\n-#ifdef PRECOMPUTE_SELECTORS\n-\n-struct soffset {\n-#ifdef OBJC_SPARSE3\n-  unsigned int unused : SIZET_BITS/4;\n-  unsigned int eoffset : SIZET_BITS/4;\n-  unsigned int boffset : SIZET_BITS/4;\n-  unsigned int ioffset : SIZET_BITS/4;\n-#else /* OBJC_SPARSE2 */\n-#ifdef __sparc__\n-  unsigned long boffset : (SIZET_BITS - 2) - BUCKET_BITS;\n-  unsigned int eoffset : BUCKET_BITS;\n-  unsigned int unused  : 2;\n-#else\n-  unsigned int boffset : SIZET_BITS/2;\n-  unsigned int eoffset : SIZET_BITS/2;\n-#endif\n-#endif /* OBJC_SPARSE2 */\n-};\n-\n-union sofftype {\n-  struct soffset off;\n-  sidx idx;\n-};\n-\n-#endif /* not PRECOMPUTE_SELECTORS */\n-\n-union sversion {\n-  int\tversion;\n-  void *next_free;\n-};\n-\n-struct sbucket {\n-  void* elems[BUCKET_SIZE];\t/* elements stored in array */\n-  union sversion\tversion;\t\t/* used for copy-on-write */\n-};\n-\n-#ifdef OBJC_SPARSE3\n-\n-struct sindex {\n-  struct sbucket* buckets[INDEX_SIZE];\n-  union sversion\tversion;\t\t/* used for copy-on-write */\n-};\n-\n-#endif /* OBJC_SPARSE3 */\n-\n-struct sarray {\n-#ifdef OBJC_SPARSE3\n-  struct sindex** indices;\n-  struct sindex* empty_index;\n-#else /* OBJC_SPARSE2 */\n-  struct sbucket** buckets;\n-#endif  /* OBJC_SPARSE2 */\n-  struct sbucket* empty_bucket;\n-  union sversion\tversion;\t\t/* used for copy-on-write */\n-  short ref_count;\n-  struct sarray* is_copy_of;\n-  size_t capacity;\n-};\n-\n-struct sarray* sarray_new(int, void* default_element);\n-void sarray_free(struct sarray*);\n-struct sarray* sarray_lazy_copy(struct sarray*);\n-void sarray_realloc(struct sarray*, int new_size);\n-void sarray_at_put(struct sarray*, sidx indx, void* elem);\n-void sarray_at_put_safe(struct sarray*, sidx indx, void* elem);\n-\n-struct sarray* sarray_hard_copy(struct sarray*); /* ... like the name? */\n-void sarray_remove_garbage(void);\n-\f\n-\n-#ifdef PRECOMPUTE_SELECTORS\n-/* Transform soffset values to ints and vica verca */\n-static inline unsigned int\n-soffset_decode(sidx indx)\n-{\n-  union sofftype x;\n-  x.idx = indx;\n-#ifdef OBJC_SPARSE3\n-  return x.off.eoffset\n-    + (x.off.boffset*BUCKET_SIZE)\n-      + (x.off.ioffset*INDEX_CAPACITY);\n-#else /* OBJC_SPARSE2 */\n-  return x.off.eoffset + (x.off.boffset*BUCKET_SIZE);\n-#endif /* OBJC_SPARSE2 */\n-}\n-\n-static inline sidx\n-soffset_encode(size_t offset)\n-{\n-  union sofftype x;\n-  x.off.eoffset = offset%BUCKET_SIZE;\n-#ifdef OBJC_SPARSE3\n-  x.off.boffset = (offset/BUCKET_SIZE)%INDEX_SIZE;\n-  x.off.ioffset = offset/INDEX_CAPACITY;\n-#else /* OBJC_SPARSE2 */\n-  x.off.boffset = offset/BUCKET_SIZE;\n-#endif\n-  return (sidx)x.idx;\n-}\n-\n-#else /* not PRECOMPUTE_SELECTORS */\n-\n-static inline size_t\n-soffset_decode(sidx indx)\n-{\n-  return indx;\n-}\n-\n-static inline sidx\n-soffset_encode(size_t offset)\n-{\n-  return offset;\n-}\n-#endif /* not PRECOMPUTE_SELECTORS */\n-\n-/* Get element from the Sparse array `array' at offset `indx' */\n-\n-static inline void* sarray_get(struct sarray* array, sidx indx)\n-{\n-#ifdef PRECOMPUTE_SELECTORS\n-  union sofftype x;\n-  x.idx = indx;\n-#ifdef OBJC_SPARSE3\n-  return \n-    array->\n-      indices[x.off.ioffset]->\n-\tbuckets[x.off.boffset]->\n-\t  elems[x.off.eoffset];\n-#else /* OBJC_SPARSE2 */\n-  return array->buckets[x.off.boffset]->elems[x.off.eoffset];\n-#endif /* OBJC_SPARSE2 */\n-#else /* not PRECOMPUTE_SELECTORS */\n-#ifdef OBJC_SPARSE3\n-  return array->\n-    indices[indx/INDEX_CAPACITY]->\n-      buckets[(indx/BUCKET_SIZE)%INDEX_SIZE]->\n-\telems[indx%BUCKET_SIZE];\n-#else /* OBJC_SPARSE2 */\n-  return array->buckets[indx/BUCKET_SIZE]->elems[indx%BUCKET_SIZE];\n-#endif /* not OBJC_SPARSE3 */\n-#endif /* not PRECOMPUTE_SELECTORS */\n-}\n-\n-static inline void* sarray_get_safe(struct sarray* array, sidx indx)\n-{\n-  if(soffset_decode(indx) < array->capacity)\n-    return sarray_get(array, indx);\n-  else\n-    return (array->empty_bucket->elems[0]);\n-}\n-\n-#ifdef __cplusplus\n-}\n-#endif /* __cplusplus */\n-\n-#endif /* __sarray_INCLUDE_GNU */"}, {"sha": "8d5303701e090585debe15e228f30b0d925ca903", "filename": "libobjc/sarray.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3b14bd9ac79db3f2b957752b41bd0641f49829/libobjc%2Fsarray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3b14bd9ac79db3f2b957752b41bd0641f49829/libobjc%2Fsarray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fsarray.c?ref=5d3b14bd9ac79db3f2b957752b41bd0641f49829", "patch": "@@ -23,14 +23,14 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n #include \"objc-private/common.h\"\n-#include \"objc/sarray.h\"\n+#include \"objc-private/sarray.h\"\n #include \"objc/objc.h\"\n #include \"objc/objc-api.h\"\n #include \"objc/thr.h\"\n #include \"objc-private/runtime.h\"\n #include <stdio.h>\n #include <string.h> /* For memset */\n-#include \"assert.h\"\n+#include <assert.h> /* For assert */\n \n int nbuckets = 0;\t\t\t\t\t/* !T:MUTEX */\n int nindices = 0;\t\t\t\t\t/* !T:MUTEX */"}, {"sha": "10b7ab63dadc87a854a70e8fd65e2e9ff6e20093", "filename": "libobjc/selector.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3b14bd9ac79db3f2b957752b41bd0641f49829/libobjc%2Fselector.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3b14bd9ac79db3f2b957752b41bd0641f49829/libobjc%2Fselector.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fselector.c?ref=5d3b14bd9ac79db3f2b957752b41bd0641f49829", "patch": "@@ -29,7 +29,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"objc-private/hash.h\"\n #include \"objc-private/objc-list.h\" \n #include \"objc-private/runtime.h\"\n-#include \"objc/sarray.h\"\n+#include \"objc-private/sarray.h\"\n #include \"objc/encoding.h\"\n \n /* Initial selector hash table size. Value doesn't matter much */"}, {"sha": "5e466c6cce0d3c09473d69cea10cd8c2161c2d31", "filename": "libobjc/sendmsg.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d3b14bd9ac79db3f2b957752b41bd0641f49829/libobjc%2Fsendmsg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d3b14bd9ac79db3f2b957752b41bd0641f49829/libobjc%2Fsendmsg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fsendmsg.c?ref=5d3b14bd9ac79db3f2b957752b41bd0641f49829", "patch": "@@ -37,9 +37,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"objc/objc-api.h\"\n #include \"objc/thr.h\"\n #include \"objc-private/runtime.h\"\n-#include \"objc/sarray.h\"\n+#include \"objc-private/sarray.h\"\n #include \"objc/encoding.h\"\n #include \"runtime-info.h\"\n+#include <assert.h> /* For assert */\n #include <string.h> /* For strlen */\n \n /* This is how we hack STRUCT_VALUE to be 1 or 0.   */"}]}