{"sha": "0205fbb91be022055c632973caa95e398b33db39", "node_id": "C_kwDOANBUbNoAKDAyMDVmYmI5MWJlMDIyMDU1YzYzMjk3M2NhYTk1ZTM5OGIzM2RiMzk", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-10-17T23:00:49Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-10-18T00:58:00Z"}, "message": "Merge partial relation precisions properly\n\nWhen merging 2 groups of PE's, one group was simply being set to the\nother instead of properly merging them.\n\n\tPR tree-optimization/107273\n\tgcc/\n\t* value-relation.cc (equiv_oracle::add_partial_equiv): Merge\n\tinstead of copying precison of each member.\n\n\tgcc/testsuite/\n\t* gcc.dg/tree-ssa/pr107273-1.c: New.\n\t* gcc.dg/tree-ssa/pr107273-2.c: New.", "tree": {"sha": "322df26899bc722507c163697f4e3e59b2799f2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/322df26899bc722507c163697f4e3e59b2799f2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0205fbb91be022055c632973caa95e398b33db39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0205fbb91be022055c632973caa95e398b33db39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0205fbb91be022055c632973caa95e398b33db39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0205fbb91be022055c632973caa95e398b33db39/comments", "author": null, "committer": null, "parents": [{"sha": "6237663c17c90bc56bda0e994da835fa0a8d85f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6237663c17c90bc56bda0e994da835fa0a8d85f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6237663c17c90bc56bda0e994da835fa0a8d85f8"}], "stats": {"total": 60, "additions": 59, "deletions": 1}, "files": [{"sha": "db2e2c0da559ccac398d9e102943c6964cf6ceae", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr107273-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0205fbb91be022055c632973caa95e398b33db39/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr107273-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0205fbb91be022055c632973caa95e398b33db39/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr107273-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr107273-1.c?ref=0205fbb91be022055c632973caa95e398b33db39", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+int printf(const char *, ...);\n+int a[1] = {1};\n+short b, c = 5500;\n+int d;\n+long e;\n+char f = 1;\n+int main() {\n+  while (1) {\n+    long g = b < 1;\n+    e = g;\n+    break;\n+  }\n+  for (; f; f--) {\n+    if (e) {\n+      d = -(6L | -(c & 1000));\n+    }\n+    char h = d;\n+    if (b)\n+      b = 0;\n+    if (d < 200)\n+      while (1)\n+        printf(\"%d\", a[c]);\n+    short i = h * 210;\n+    c = i;\n+  }\n+  return 0;\n+}\n+"}, {"sha": "337450782d9b6d087137950896592a28f23ba18e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr107273-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0205fbb91be022055c632973caa95e398b33db39/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr107273-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0205fbb91be022055c632973caa95e398b33db39/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr107273-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr107273-2.c?ref=0205fbb91be022055c632973caa95e398b33db39", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-Os\" } */\n+\n+int a, d, f;\n+char b, g;\n+unsigned i;\n+int main() {\n+  int c = 300, h = 40;\n+  char e = 1;\n+  for (; a < 1; a++) {\n+    c = ~((i - ~c) | e);\n+  L1:\n+    e = f = c;\n+    if (c)\n+      if (c > -200)\n+        e = g % (1 << h);\n+    char k = 0;\n+  L2:;\n+  }\n+  if (b) {\n+    if (d)\n+      goto L2;\n+    if (!b)\n+      goto L1;\n+  }\n+  return 0;\n+}"}, {"sha": "178a245f41a6347cf4f8c19c832eeca18206d124", "filename": "gcc/value-relation.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0205fbb91be022055c632973caa95e398b33db39/gcc%2Fvalue-relation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0205fbb91be022055c632973caa95e398b33db39/gcc%2Fvalue-relation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-relation.cc?ref=0205fbb91be022055c632973caa95e398b33db39", "patch": "@@ -380,7 +380,7 @@ equiv_oracle::add_partial_equiv (relation_kind r, tree op1, tree op2)\n       EXECUTE_IF_SET_IN_BITMAP (pe1.members, 0, x, bi)\n \t{\n \t  m_partial[x].ssa_base = op2;\n-\t  m_partial[x].code = pe2.code;\n+\t  m_partial[x].code = pe_min (m_partial[x].code, pe2.code);\n \t}\n       bitmap_set_bit (pe1.members, v2);\n       return;"}]}