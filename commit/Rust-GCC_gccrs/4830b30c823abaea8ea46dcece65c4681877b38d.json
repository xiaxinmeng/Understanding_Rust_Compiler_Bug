{"sha": "4830b30c823abaea8ea46dcece65c4681877b38d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgzMGIzMGM4MjNhYmFlYThlYTQ2ZGNlY2U2NWM0NjgxODc3YjM4ZA==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2020-10-01T02:22:38Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2020-10-01T22:34:27Z"}, "message": "[RS6000] function for linux64 SUBSUBTARGET_OVERRIDE_OPTIONS\n\n\t* config/rs6000/freebsd64.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Use\n\trs6000_linux64_override_options.\n\t* config/rs6000/linux64.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Break\n\tout to..\n\t* config/rs6000/rs6000.c (rs6000_linux64_override_options): ..this,\n\tnew function.  Tweak non-biarch test and clearing of\n\tprofile_kernel to work with freebsd64.h.", "tree": {"sha": "f67f28d537547592be388169c05a0cd942e85997", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f67f28d537547592be388169c05a0cd942e85997"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4830b30c823abaea8ea46dcece65c4681877b38d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4830b30c823abaea8ea46dcece65c4681877b38d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4830b30c823abaea8ea46dcece65c4681877b38d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4830b30c823abaea8ea46dcece65c4681877b38d/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfaa24c974bab4bc1bd3840d67ca1701acc0010c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfaa24c974bab4bc1bd3840d67ca1701acc0010c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfaa24c974bab4bc1bd3840d67ca1701acc0010c"}], "stats": {"total": 250, "additions": 98, "deletions": 152}, "files": [{"sha": "6984ca5a10752717ddb4f4b74d005a2867ab0023", "filename": "gcc/config/rs6000/freebsd64.h", "status": "modified", "additions": 1, "deletions": 59, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4830b30c823abaea8ea46dcece65c4681877b38d/gcc%2Fconfig%2Frs6000%2Ffreebsd64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4830b30c823abaea8ea46dcece65c4681877b38d/gcc%2Fconfig%2Frs6000%2Ffreebsd64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ffreebsd64.h?ref=4830b30c823abaea8ea46dcece65c4681877b38d", "patch": "@@ -78,65 +78,7 @@ extern int dot_symbols;\n \n #undef  SUBSUBTARGET_OVERRIDE_OPTIONS\n #define SUBSUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      if (!global_options_set.x_rs6000_alignment_flags)\t\t\\\n-\trs6000_alignment_flags = MASK_ALIGN_NATURAL;\t\t\\\n-      if (TARGET_64BIT)\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  if (DEFAULT_ABI != ABI_AIX)\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\\\n-\t      rs6000_current_abi = ABI_AIX;\t\t\t\\\n-\t      error (INVALID_64BIT, \"call\");\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\\\n-\t  dot_symbols = !strcmp (rs6000_abi_name, \"aixdesc\");\t\\\n-\t  if (rs6000_isa_flags & OPTION_MASK_RELOCATABLE)\t\\\n-\t    {\t\t\t\t\t\t\t\\\n-\t      rs6000_isa_flags &= ~OPTION_MASK_RELOCATABLE;\t\\\n-\t      error (INVALID_64BIT, \"relocatable\");\t\t\\\n-\t    }\t\t\t\t\t\t\t\\\n-\t  if (ELFv2_ABI_CHECK)\t\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\\\n-\t      rs6000_current_abi = ABI_ELFv2;\t\t\t\\\n-\t      if (dot_symbols)\t\t\t\t\t\\\n-\t\terror (\"%<-mcall-aixdesc%> incompatible with %<-mabi=elfv2%>\"); \\\n-\t    }\t\t\t\t\t\t\t\\\n-\t  if (rs6000_isa_flags & OPTION_MASK_EABI)\t\t\\\n-\t    {\t\t\t\t\t\t\t\\\n-\t      rs6000_isa_flags &= ~OPTION_MASK_EABI;\t\t\\\n-\t      error (INVALID_64BIT, \"eabi\");\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\\\n-\t  if (TARGET_PROTOTYPE)\t\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\\\n-\t      target_prototype = 0;\t\t\t\t\\\n-\t      error (INVALID_64BIT, \"prototype\");\t\t\\\n-\t    }\t\t\t\t\t\t\t\\\n-\t  if ((rs6000_isa_flags & OPTION_MASK_POWERPC64) == 0)\t\\\n-\t    {\t\t\t\t\t\t\t\\\n-\t      rs6000_isa_flags |= OPTION_MASK_POWERPC64;\t\\\n-\t      error (\"%<-m64%> requires a PowerPC64 cpu\");\t\t\\\n-\t    }\t\t\t\t\t\t\t\\\n-\t   if ((rs6000_isa_flags_explicit\t\t\t\\\n-\t\t& OPTION_MASK_MINIMAL_TOC) != 0)\t\t\\\n-\t    {\t\t\t\t\t\t\t\\\n-\t      if (global_options_set.x_rs6000_current_cmodel\t\\\n-\t\t  && rs6000_current_cmodel != CMODEL_SMALL)\t\\\n-\t\terror (\"%<-mcmodel%> incompatible with other toc options\"); \\\n-\t      SET_CMODEL (CMODEL_SMALL);\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\\\n-\t  else\t\t\t\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\\\n-\t      if (!global_options_set.x_rs6000_current_cmodel)\t\\\n-\t\tSET_CMODEL (CMODEL_MEDIUM);\t\t\t\\\n-\t      if (rs6000_current_cmodel != CMODEL_SMALL)\t\\\n-\t\t{\t\t\t\t\t\t\\\n-\t\t  TARGET_NO_FP_IN_TOC = 0;\t\t\t\\\n-\t\t  TARGET_NO_SUM_IN_TOC = 0;\t\t\t\\\n-\t\t}\t\t\t\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n+  do rs6000_linux64_override_options (); while (0)\n \n #undef\tASM_SPEC\n #undef\tLINK_OS_FREEBSD_SPEC"}, {"sha": "73b6c01874cd179822c87192164bdab9b30bd4b5", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 1, "deletions": 93, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4830b30c823abaea8ea46dcece65c4681877b38d/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4830b30c823abaea8ea46dcece65c4681877b38d/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=4830b30c823abaea8ea46dcece65c4681877b38d", "patch": "@@ -96,99 +96,7 @@ extern int dot_symbols;\n \n #undef\tSUBSUBTARGET_OVERRIDE_OPTIONS\n #define\tSUBSUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      if (!global_options_set.x_rs6000_alignment_flags)\t\t\\\n-\trs6000_alignment_flags = MASK_ALIGN_NATURAL;\t\t\\\n-      if (rs6000_isa_flags & OPTION_MASK_64BIT)\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  if (DEFAULT_ABI != ABI_AIX)\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\\\n-\t      rs6000_current_abi = ABI_AIX;\t\t\t\\\n-\t      error (INVALID_64BIT, \"call\");\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\\\n-\t  dot_symbols = !strcmp (rs6000_abi_name, \"aixdesc\");\t\\\n-\t  if (ELFv2_ABI_CHECK)\t\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\\\n-\t      rs6000_current_abi = ABI_ELFv2;\t\t\t\\\n-\t      if (dot_symbols)\t\t\t\t\t\\\n-\t\terror (\"%<-mcall-aixdesc%> incompatible with %<-mabi=elfv2%>\"); \\\n-\t    }\t\t\t\t\t\t\t\\\n-\t  if (rs6000_isa_flags & OPTION_MASK_RELOCATABLE)\t\\\n-\t    {\t\t\t\t\t\t\t\\\n-\t      rs6000_isa_flags &= ~OPTION_MASK_RELOCATABLE;\t\\\n-\t      error (INVALID_64BIT, \"relocatable\");\t\t\\\n-\t    }\t\t\t\t\t\t\t\\\n-\t  if (rs6000_isa_flags & OPTION_MASK_EABI)\t\t\\\n-\t    {\t\t\t\t\t\t\t\\\n-\t      rs6000_isa_flags &= ~OPTION_MASK_EABI;\t\t\\\n-\t      error (INVALID_64BIT, \"eabi\");\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\\\n-\t  if (TARGET_PROTOTYPE)\t\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\\\n-\t      target_prototype = 0;\t\t\t\t\\\n-\t      error (INVALID_64BIT, \"prototype\");\t\t\\\n-\t    }\t\t\t\t\t\t\t\\\n-\t  if ((rs6000_isa_flags & OPTION_MASK_POWERPC64) == 0)\t\\\n-\t    {\t\t\t\t\t\t\t\\\n-\t      rs6000_isa_flags |= OPTION_MASK_POWERPC64;\t\\\n-\t      error (\"%<-m64%> requires a PowerPC64 cpu\");\t\\\n-\t    }\t\t\t\t\t\t\t\\\n-\t  if (!global_options_set.x_rs6000_current_cmodel)\t\\\n-\t    SET_CMODEL (CMODEL_MEDIUM);\t\t\t\t\\\n-\t  if ((rs6000_isa_flags_explicit\t\t\t\\\n-\t       & OPTION_MASK_MINIMAL_TOC) != 0)\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\\\n-\t      if (global_options_set.x_rs6000_current_cmodel\t\\\n-\t\t  && rs6000_current_cmodel != CMODEL_SMALL)\t\\\n-\t\terror (\"%<-mcmodel incompatible with other toc options%>\"); \\\n-\t      if (TARGET_MINIMAL_TOC)\t\t\t\t\\\n-\t\tSET_CMODEL (CMODEL_SMALL);\t\t\t\\\n-\t      else if (TARGET_PCREL\t\t\t\t\\\n-\t\t       || (PCREL_SUPPORTED_BY_OS\t\t\\\n-\t\t\t   && (rs6000_isa_flags_explicit\t\\\n-\t\t\t       & OPTION_MASK_PCREL) == 0))\t\\\n-\t\t/* Ignore -mno-minimal-toc.  */\t\t\t\\\n-\t\t;\t\t\t\t\t\t\\\n-\t      else\t\t\t\t\t\t\\\n-\t\tSET_CMODEL (CMODEL_SMALL);\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\\\n-\t  else\t\t\t\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\\\n-\t      if (rs6000_current_cmodel != CMODEL_SMALL)\t\\\n-\t\t{\t\t\t\t\t\t\\\n-\t\t  if (!global_options_set.x_TARGET_NO_FP_IN_TOC) \\\n-\t\t    TARGET_NO_FP_IN_TOC\t\t\t\t\\\n-\t\t      = rs6000_current_cmodel == CMODEL_MEDIUM;\t\\\n-\t\t  if (!global_options_set.x_TARGET_NO_SUM_IN_TOC) \\\n-\t\t    TARGET_NO_SUM_IN_TOC = 0;\t\t\t\\\n-\t\t}\t\t\t\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\\\n-\t  if (TARGET_PLTSEQ && DEFAULT_ABI != ABI_ELFv2)\t\\\n-\t    {\t\t\t\t\t\t\t\\\n-\t      if (global_options_set.x_rs6000_pltseq)\t\t\\\n-\t\twarning (0, \"%qs unsupported for this ABI\",\t\\\n-\t\t\t \"-mpltseq\");\t\t\t\t\\\n-\t      rs6000_pltseq = false;\t\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  if (!RS6000_BI_ARCH_P)\t\t\t\t\\\n-\t    error (INVALID_32BIT, \"32\");\t\t\t\\\n-\t  if (TARGET_PROFILE_KERNEL)\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\\\n-\t      TARGET_PROFILE_KERNEL = 0;\t\t\t\\\n-\t      error (INVALID_32BIT, \"profile-kernel\");\t\t\\\n-\t    }\t\t\t\t\t\t\t\\\n-\t  if (global_options_set.x_rs6000_current_cmodel)\t\\\n-\t    {\t\t\t\t\t\t\t\\\n-\t      SET_CMODEL (CMODEL_SMALL);\t\t\t\\\n-\t      error (INVALID_32BIT, \"cmodel\");\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n+  do rs6000_linux64_override_options (); while (0)\n \n #undef\tASM_SPEC\n #undef\tLINK_OS_LINUX_SPEC"}, {"sha": "f5f927f30322e8dea27e344af131151b2a37c27c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4830b30c823abaea8ea46dcece65c4681877b38d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4830b30c823abaea8ea46dcece65c4681877b38d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=4830b30c823abaea8ea46dcece65c4681877b38d", "patch": "@@ -3452,6 +3452,102 @@ rs6000_override_options_after_change (void)\n     flag_cunroll_grow_size = flag_peel_loops || optimize >= 3;\n }\n \n+#ifdef TARGET_USES_LINUX64_OPT\n+static void\n+rs6000_linux64_override_options ()\n+{\n+  if (!global_options_set.x_rs6000_alignment_flags)\n+    rs6000_alignment_flags = MASK_ALIGN_NATURAL;\n+  if (rs6000_isa_flags & OPTION_MASK_64BIT)\n+    {\n+      if (DEFAULT_ABI != ABI_AIX)\n+\t{\n+\t  rs6000_current_abi = ABI_AIX;\n+\t  error (INVALID_64BIT, \"call\");\n+\t}\n+      dot_symbols = !strcmp (rs6000_abi_name, \"aixdesc\");\n+      if (ELFv2_ABI_CHECK)\n+\t{\n+\t  rs6000_current_abi = ABI_ELFv2;\n+\t  if (dot_symbols)\n+\t    error (\"%<-mcall-aixdesc%> incompatible with %<-mabi=elfv2%>\");\n+\t}\n+      if (rs6000_isa_flags & OPTION_MASK_RELOCATABLE)\n+\t{\n+\t  rs6000_isa_flags &= ~OPTION_MASK_RELOCATABLE;\n+\t  error (INVALID_64BIT, \"relocatable\");\n+\t}\n+      if (rs6000_isa_flags & OPTION_MASK_EABI)\n+\t{\n+\t  rs6000_isa_flags &= ~OPTION_MASK_EABI;\n+\t  error (INVALID_64BIT, \"eabi\");\n+\t}\n+      if (TARGET_PROTOTYPE)\n+\t{\n+\t  target_prototype = 0;\n+\t  error (INVALID_64BIT, \"prototype\");\n+\t}\n+      if ((rs6000_isa_flags & OPTION_MASK_POWERPC64) == 0)\n+\t{\n+\t  rs6000_isa_flags |= OPTION_MASK_POWERPC64;\n+\t  error (\"%<-m64%> requires a PowerPC64 cpu\");\n+\t}\n+      if (!global_options_set.x_rs6000_current_cmodel)\n+\tSET_CMODEL (CMODEL_MEDIUM);\n+      if ((rs6000_isa_flags_explicit\n+\t   & OPTION_MASK_MINIMAL_TOC) != 0)\n+\t{\n+\t  if (global_options_set.x_rs6000_current_cmodel\n+\t      && rs6000_current_cmodel != CMODEL_SMALL)\n+\t    error (\"%<-mcmodel incompatible with other toc options%>\");\n+\t  if (TARGET_MINIMAL_TOC)\n+\t    SET_CMODEL (CMODEL_SMALL);\n+\t  else if (TARGET_PCREL\n+\t\t   || (PCREL_SUPPORTED_BY_OS\n+\t\t       && (rs6000_isa_flags_explicit\n+\t\t\t   & OPTION_MASK_PCREL) == 0))\n+\t    /* Ignore -mno-minimal-toc.  */\n+\t    ;\n+\t  else\n+\t    SET_CMODEL (CMODEL_SMALL);\n+\t}\n+      else\n+\t{\n+\t  if (rs6000_current_cmodel != CMODEL_SMALL)\n+\t    {\n+\t      if (!global_options_set.x_TARGET_NO_FP_IN_TOC)\n+\t\tTARGET_NO_FP_IN_TOC\n+\t\t  = rs6000_current_cmodel == CMODEL_MEDIUM;\n+\t      if (!global_options_set.x_TARGET_NO_SUM_IN_TOC)\n+\t\tTARGET_NO_SUM_IN_TOC = 0;\n+\t    }\n+\t}\n+      if (TARGET_PLTSEQ && DEFAULT_ABI != ABI_ELFv2)\n+\t{\n+\t  if (global_options_set.x_rs6000_pltseq)\n+\t    warning (0, \"%qs unsupported for this ABI\",\n+\t\t     \"-mpltseq\");\n+\t  rs6000_pltseq = false;\n+\t}\n+    }\n+  else if (TARGET_64BIT)\n+    error (INVALID_32BIT, \"32\");\n+  else\n+    {\n+      if (TARGET_PROFILE_KERNEL)\n+\t{\n+\t  profile_kernel = 0;\n+\t  error (INVALID_32BIT, \"profile-kernel\");\n+\t}\n+      if (global_options_set.x_rs6000_current_cmodel)\n+\t{\n+\t  SET_CMODEL (CMODEL_SMALL);\n+\t  error (INVALID_32BIT, \"cmodel\");\n+\t}\n+    }\n+}\n+#endif\n+\n /* Override command line options.\n \n    Combine build-specific configuration information with options"}]}