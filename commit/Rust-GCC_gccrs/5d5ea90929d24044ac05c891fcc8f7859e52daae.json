{"sha": "5d5ea90929d24044ac05c891fcc8f7859e52daae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ1ZWE5MDkyOWQyNDA0NGFjMDVjODkxZmNjOGY3ODU5ZTUyZGFhZQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-06-12T23:42:59Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-06-12T23:42:59Z"}, "message": "(record_jump_cond): Look up op1 again after inserting op0.\n\nFrom-SVN: r4669", "tree": {"sha": "e61278f3c3b0ca6c85933ec858d06eab3fb82f75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e61278f3c3b0ca6c85933ec858d06eab3fb82f75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d5ea90929d24044ac05c891fcc8f7859e52daae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d5ea90929d24044ac05c891fcc8f7859e52daae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d5ea90929d24044ac05c891fcc8f7859e52daae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d5ea90929d24044ac05c891fcc8f7859e52daae/comments", "author": null, "committer": null, "parents": [{"sha": "9e69dd9f3a3e70cd53e5cf9717094030a1590e13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e69dd9f3a3e70cd53e5cf9717094030a1590e13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e69dd9f3a3e70cd53e5cf9717094030a1590e13"}], "stats": {"total": 3, "additions": 3, "deletions": 0}, "files": [{"sha": "0e1fe8431c17c49381ca5c9fca398c216e1aae09", "filename": "gcc/cse.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5ea90929d24044ac05c891fcc8f7859e52daae/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5ea90929d24044ac05c891fcc8f7859e52daae/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=5d5ea90929d24044ac05c891fcc8f7859e52daae", "patch": "@@ -5619,6 +5619,9 @@ record_jump_cond (code, mode, op0, op1, reversed_nonequality)\n       qty_comparison_code[reg_qty[REGNO (op0)]] = code;\n       if (GET_CODE (op1) == REG)\n \t{\n+\t  /* Look it up again--in case op0 and op1 are the same.  */\n+\t  op1_elt = lookup (op1, op1_hash_code, mode);\n+\n \t  /* Put OP1 in the hash table so it gets a new quantity number.  */\n \t  if (op1_elt == 0)\n \t    {"}]}