{"sha": "14c942c3eb060e063fd8142d390c6d09951bf544", "node_id": "C_kwDOANBUbNoAKDE0Yzk0MmMzZWIwNjBlMDYzZmQ4MTQyZDM5MGM2ZDA5OTUxYmY1NDQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-10-26T08:27:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-26T08:27:39Z"}, "message": "Merge #1585\n\n1585: Apply #1556 on master r=CohenArthur a=CohenArthur\n\nWe should probably wonder about our usage of `-Wno-unused-parameter` :)\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "38a5ad7bab280bb64825736b2b436b23b7613652", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38a5ad7bab280bb64825736b2b436b23b7613652"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14c942c3eb060e063fd8142d390c6d09951bf544", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjWO97CRBK7hj4Ov3rIwAAnhoIAFYdhHnDRWEVwY81ihgiE3ZE\nnm1EgXIAUGKfBwGQAf8a6iLo47+CbNxAakWdU3S8h80wtRgoAluqtCPyM0dqtcqm\n7SEZ4dKGYoQod39wSxPMRoRkjvR+VBfohJQKE4LCd8hlXARCGT17RdAhOAZc6Uml\nc0yuPy+GWggom5X2cpud1eedekZUgCz+VhUxQXiOd6uOOQx7IzyqmWhrS8231L50\n3Se3tStrXIeDfAZwcEjKCYkznmpm/yLUbm0k/aiWbY6jKFWZkOXjkMIZL2UMwsJy\ngsPepNvdI8DH382MNg5jj8/HvmL4p32CneUmods5HSWzAOlNBCygTSxfAUL/pt4=\n=F22K\n-----END PGP SIGNATURE-----\n", "payload": "tree 38a5ad7bab280bb64825736b2b436b23b7613652\nparent 0cf743d57fc67d88ecba654be8574ea9a5be40d2\nparent 94d11161c1abe8927f571aedbf39871f21ccf73a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1666772859 +0000\ncommitter GitHub <noreply@github.com> 1666772859 +0000\n\nMerge #1585\n\n1585: Apply #1556 on master r=CohenArthur a=CohenArthur\n\nWe should probably wonder about our usage of `-Wno-unused-parameter` :)\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14c942c3eb060e063fd8142d390c6d09951bf544", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14c942c3eb060e063fd8142d390c6d09951bf544", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14c942c3eb060e063fd8142d390c6d09951bf544/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cf743d57fc67d88ecba654be8574ea9a5be40d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cf743d57fc67d88ecba654be8574ea9a5be40d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cf743d57fc67d88ecba654be8574ea9a5be40d2"}, {"sha": "94d11161c1abe8927f571aedbf39871f21ccf73a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94d11161c1abe8927f571aedbf39871f21ccf73a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94d11161c1abe8927f571aedbf39871f21ccf73a"}], "stats": {"total": 118, "additions": 53, "deletions": 65}, "files": [{"sha": "0d99fd341a8ebfa2cc62a16998c945660025c600", "filename": ".github/bors_log_expected_warnings", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c942c3eb060e063fd8142d390c6d09951bf544/.github%2Fbors_log_expected_warnings", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c942c3eb060e063fd8142d390c6d09951bf544/.github%2Fbors_log_expected_warnings", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/.github%2Fbors_log_expected_warnings?ref=14c942c3eb060e063fd8142d390c6d09951bf544", "patch": "@@ -12,9 +12,6 @@\n ../../../libffi/src/java_raw_api.c:369:3: warning: \u2018ffi_prep_java_raw_closure_loc\u2019 is deprecated [-Wdeprecated-declarations]\n ../../../libffi/src/x86/ffi64.c:783:1: warning: label \u2018out\u2019 defined but not used [-Wunused-label]\n ../../../libffi/src/x86/ffiw64.c:250:1: warning: label \u2018out\u2019 defined but not used [-Wunused-label]\n-../../c++tools/server.cc:490:11: warning: ignoring return value of \u2018ssize_t write(int, const void*, size_t)\u2019, declared with attribute warn_unused_result [-Wunused-result]\n-../../c++tools/server.cc:620:10: warning: ignoring return value of \u2018int pipe(int*)\u2019, declared with attribute warn_unused_result [-Wunused-result]\n-../../gcc/../libgcc/libgcov-util.c:455:9: warning: ignoring return value of \u2018int chdir(const char*)\u2019, declared with attribute warn_unused_result [-Wunused-result]\n ../../gcc/analyzer/diagnostic-manager.cc:784:20: warning: too many arguments for format [-Wformat-extra-args]\n ../../gcc/analyzer/diagnostic-manager.cc:784:28: warning: unknown conversion type character \u2018E\u2019 in format [-Wformat=]\n ../../gcc/analyzer/engine.cc:1652:3: warning: too many arguments for format [-Wformat-extra-args]\n@@ -84,23 +81,10 @@\n ../../gcc/config/i386/i386.cc:2565:8: warning: unknown conversion type character \u2018}\u2019 in format [-Wformat=]\n ../../gcc/diagnostic.cc:2206:52: warning: format not a string literal and no format arguments [-Wformat-security]\n ../../gcc/fold-const.cc:314:42: warning: format not a string literal and no format arguments [-Wformat-security]\n-../../gcc/gcc.cc:10475:12: warning: ignoring return value of \u2018ssize_t read(int, void*, size_t)\u2019, declared with attribute warn_unused_result [-Wunused-result]\n-../../gcc/gcc.cc:7708:9: warning: ignoring return value of \u2018ssize_t write(int, const void*, size_t)\u2019, declared with attribute warn_unused_result [-Wunused-result]\n-../../gcc/gcc.cc:7711:13: warning: ignoring return value of \u2018ssize_t write(int, const void*, size_t)\u2019, declared with attribute warn_unused_result [-Wunused-result]\n-../../gcc/gcc.cc:7712:13: warning: ignoring return value of \u2018ssize_t write(int, const void*, size_t)\u2019, declared with attribute warn_unused_result [-Wunused-result]\n-../../gcc/gcc.cc:7714:9: warning: ignoring return value of \u2018ssize_t write(int, const void*, size_t)\u2019, declared with attribute warn_unused_result [-Wunused-result]\n-../../gcc/genhooks.cc:112:17: warning: ignoring return value of \u2018int fscanf(FILE*, const char*, ...)\u2019, declared with attribute warn_unused_result [-Wunused-result]\n-../../gcc/genhooks.cc:121:14: warning: ignoring return value of \u2018int fscanf(FILE*, const char*, ...)\u2019, declared with attribute warn_unused_result [-Wunused-result]\n-../../gcc/genhooks.cc:174:14: warning: ignoring return value of \u2018int fscanf(FILE*, const char*, ...)\u2019, declared with attribute warn_unused_result [-Wunused-result]\n-../../gcc/genhooks.cc:180:14: warning: ignoring return value of \u2018int fscanf(FILE*, const char*, ...)\u2019, declared with attribute warn_unused_result [-Wunused-result]\n ../../gcc/gimple-range-gori.cc:318:22: warning: format not a string literal and no format arguments [-Wformat-security]\n ../../gcc/ipa-devirt.cc:965:47: warning: format not a string literal and no format arguments [-Wformat-security]\n-../../gcc/lto-wrapper.cc:1147:8: warning: ignoring return value of \u2018ssize_t read(int, void*, size_t)\u2019, declared with attribute warn_unused_result [-Wunused-result]\n ../../gcc/lto-wrapper.cc:1365:52: warning: format not a string literal and no format arguments [-Wformat-security]\n ../../gcc/lto-wrapper.cc:1957:44: warning: format not a string literal and no format arguments [-Wformat-security]\n-../../gcc/lto/lto-common.cc:2075:10: warning: ignoring return value of \u2018int fscanf(FILE*, const char*, ...)\u2019, declared with attribute warn_unused_result [-Wunused-result]\n-../../gcc/lto/lto-common.cc:2077:9: warning: ignoring return value of \u2018size_t fread(void*, size_t, size_t, FILE*)\u2019, declared with attribute warn_unused_result [-Wunused-result]\n-../../gcc/lto/lto-common.cc:2097:10: warning: ignoring return value of \u2018int fscanf(FILE*, const char*, ...)\u2019, declared with attribute warn_unused_result [-Wunused-result]\n ../../gcc/omp-low.cc:10632:19: warning: \u2018T\u2019 conversion used within a quoted sequence [-Wformat=]\n ../../gcc/omp-low.cc:1547:23: warning: \u2018T\u2019 conversion used within a quoted sequence [-Wformat=]\n ../../gcc/omp-low.cc:1552:23: warning: \u2018T\u2019 conversion used within a quoted sequence [-Wformat=]"}, {"sha": "22440b04b870b72e0d2f4be47d28498126fbd57a", "filename": ".github/workflows/ccpp.yml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c942c3eb060e063fd8142d390c6d09951bf544/.github%2Fworkflows%2Fccpp.yml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c942c3eb060e063fd8142d390c6d09951bf544/.github%2Fworkflows%2Fccpp.yml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/.github%2Fworkflows%2Fccpp.yml?ref=14c942c3eb060e063fd8142d390c6d09951bf544", "patch": "@@ -8,6 +8,9 @@ on:\n   pull_request:\n     branches: [ master ]\n \n+env:\n+  CXXFLAGS: \"-Wno-unused-parameter -Werror=overloaded-virtual\"\n+\n jobs:\n   build-and-check-ubuntu-64bit:\n "}, {"sha": "58dbc094f2378487102260c602576bc644c68456", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c942c3eb060e063fd8142d390c6d09951bf544/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c942c3eb060e063fd8142d390c6d09951bf544/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=14c942c3eb060e063fd8142d390c6d09951bf544", "patch": "@@ -331,8 +331,7 @@ CFLAGS-rust/rust-lex.o += $(RUST_INCLUDES)\n CFLAGS-rust/rust-parse.o += $(RUST_INCLUDES)\n CFLAGS-rust/rust-session-manager.o += $(RUST_INCLUDES)\n \n-# TODO: possibly find a way to ensure C++11 compilation level here?\n-RUST_CXXFLAGS = -std=c++11 -Wno-unused-parameter -Werror=overloaded-virtual\n+RUST_CXXFLAGS = $(CXXFLAGS)\n \n # build all rust/lex files in rust folder, add cross-folder includes\n rust/%.o: rust/lex/%.cc"}, {"sha": "21e8bed99b0017c69cdb5275b7b35f3edbe7e7e8", "filename": "gcc/rust/backend/rust-constexpr.cc", "status": "modified", "additions": 49, "deletions": 47, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c942c3eb060e063fd8142d390c6d09951bf544/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c942c3eb060e063fd8142d390c6d09951bf544/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-constexpr.cc?ref=14c942c3eb060e063fd8142d390c6d09951bf544", "patch": "@@ -3658,49 +3658,48 @@ eval_call_expression (const constexpr_ctx *ctx, tree t, bool lval,\n    whose constructor we are processing.  Add the initializer to the vector\n    and return true to indicate success.  */\n \n-static bool\n-build_anon_member_initialization (tree member, tree init,\n-\t\t\t\t  vec<constructor_elt, va_gc> **vec_outer)\n-{\n-  /* MEMBER presents the relevant fields from the inside out, but we need\n-     to build up the initializer from the outside in so that we can reuse\n-     previously built CONSTRUCTORs if this is, say, the second field in an\n-     anonymous struct.  So we use a vec as a stack.  */\n-  auto_vec<tree, 2> fields;\n-  do\n-    {\n-      fields.safe_push (TREE_OPERAND (member, 1));\n-      member = TREE_OPERAND (member, 0);\n-    }\n-  while (ANON_AGGR_TYPE_P (TREE_TYPE (member))\n-\t && TREE_CODE (member) == COMPONENT_REF);\n-\n-  /* VEC has the constructor elements vector for the context of FIELD.\n-     If FIELD is an anonymous aggregate, we will push inside it.  */\n-  vec<constructor_elt, va_gc> **vec = vec_outer;\n-  tree field;\n-  while (field = fields.pop (), ANON_AGGR_TYPE_P (TREE_TYPE (field)))\n-    {\n-      tree ctor;\n-      /* If there is already an outer constructor entry for the anonymous\n-\t aggregate FIELD, use it; otherwise, insert one.  */\n-      if (vec_safe_is_empty (*vec) || (*vec)->last ().index != field)\n-\t{\n-\t  ctor = build_constructor (TREE_TYPE (field), NULL);\n-\t  CONSTRUCTOR_APPEND_ELT (*vec, field, ctor);\n-\t}\n-      else\n-\tctor = (*vec)->last ().value;\n-      vec = &CONSTRUCTOR_ELTS (ctor);\n-    }\n-\n-  /* Now we're at the innermost field, the one that isn't an anonymous\n-     aggregate.  Add its initializer to the CONSTRUCTOR and we're done.  */\n-  gcc_assert (fields.is_empty ());\n-  CONSTRUCTOR_APPEND_ELT (*vec, field, init);\n-\n-  return true;\n-}\n+// static bool\n+// build_anon_member_initialization (tree member, tree init,\n+// \t\t\t\t  vec<constructor_elt, va_gc> **vec_outer)\n+// {\n+//   /* MEMBER presents the relevant fields from the inside out, but we need\n+//      to build up the initializer from the outside in so that we can reuse\n+//      previously built CONSTRUCTORs if this is, say, the second field in an\n+//      anonymous struct.  So we use a vec as a stack.  */\n+//   auto_vec<tree, 2> fields;\n+//   do\n+//     {\n+//       fields.safe_push (TREE_OPERAND (member, 1));\n+//       member = TREE_OPERAND (member, 0);\n+//   } while (ANON_AGGR_TYPE_P (TREE_TYPE (member))\n+// \t   && TREE_CODE (member) == COMPONENT_REF);\n+//\n+//   /* VEC has the constructor elements vector for the context of FIELD.\n+//      If FIELD is an anonymous aggregate, we will push inside it.  */\n+//   vec<constructor_elt, va_gc> **vec = vec_outer;\n+//   tree field;\n+//   while (field = fields.pop (), ANON_AGGR_TYPE_P (TREE_TYPE (field)))\n+//     {\n+//       tree ctor;\n+//       /* If there is already an outer constructor entry for the anonymous\n+// \t aggregate FIELD, use it; otherwise, insert one.  */\n+//       if (vec_safe_is_empty (*vec) || (*vec)->last ().index != field)\n+// \t{\n+// \t  ctor = build_constructor (TREE_TYPE (field), NULL);\n+// \t  CONSTRUCTOR_APPEND_ELT (*vec, field, ctor);\n+// \t}\n+//       else\n+// \tctor = (*vec)->last ().value;\n+//       vec = &CONSTRUCTOR_ELTS (ctor);\n+//     }\n+//\n+//   /* Now we're at the innermost field, the one that isn't an anonymous\n+//      aggregate.  Add its initializer to the CONSTRUCTOR and we're done.  */\n+//   gcc_assert (fields.is_empty ());\n+//   CONSTRUCTOR_APPEND_ELT (*vec, field, init);\n+//\n+//   return true;\n+// }\n \n ///* V is a vector of constructor elements built up for the base and member\n //   initializers of a constructor for TYPE.  They need to be in increasing\n@@ -3750,7 +3749,7 @@ build_anon_member_initialization (tree member, tree init,\n static bool\n build_data_member_initialization (tree t, vec<constructor_elt, va_gc> **vec)\n {\n-  tree member, init;\n+  tree member;\n   if (TREE_CODE (t) == CLEANUP_POINT_EXPR)\n     t = TREE_OPERAND (t, 0);\n   if (TREE_CODE (t) == EXPR_STMT)\n@@ -3835,7 +3834,8 @@ build_data_member_initialization (tree t, vec<constructor_elt, va_gc> **vec)\n \tmember = TREE_OPERAND (member, 1);\n       else if (ANON_AGGR_TYPE_P (TREE_TYPE (aggr)))\n \t/* Initializing a member of an anonymous union.  */\n-\treturn build_anon_member_initialization (member, init, vec);\n+\trust_sorry_at (Location (), \"cannot handle value initialization yet\");\n+      // return build_anon_member_initialization (member, init, vec);\n       else\n \t/* We're initializing a vtable pointer in a base.  Leave it as\n \t   COMPONENT_REF so we remember the path to get to the vfield.  */\n@@ -3845,9 +3845,11 @@ build_data_member_initialization (tree t, vec<constructor_elt, va_gc> **vec)\n   /* Value-initialization can produce multiple initializers for the\n      same field; use the last one.  */\n   if (!vec_safe_is_empty (*vec) && (*vec)->last ().index == member)\n-    (*vec)->last ().value = init;\n+    rust_sorry_at (Location (), \"cannot handle value initialization yet\");\n+  // (*vec)->last ().value = init;\n   else\n-    CONSTRUCTOR_APPEND_ELT (*vec, member, init);\n+    rust_sorry_at (Location (), \"cannot handle value initialization yet\");\n+  // CONSTRUCTOR_APPEND_ELT (*vec, member, init);\n   return true;\n }\n "}]}