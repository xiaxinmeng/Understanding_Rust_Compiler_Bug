{"sha": "e9472c81d3efe5996e501348cc218c2ab79f3f38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk0NzJjODFkM2VmZTU5OTZlNTAxMzQ4Y2MyMThjMmFiNzlmM2YzOA==", "commit": {"author": {"name": "Andrew Burgess", "email": "aburgess@gcc.gnu.org", "date": "2016-11-30T11:08:06Z"}, "committer": {"name": "Andrew Burgess", "email": "aburgess@gcc.gnu.org", "date": "2016-11-30T11:08:06Z"}, "message": "arc: Avoid store/load pipeline hazard\n\nARC700 targets have a store/load pipeline hazard, if we load within 2\ncycles of a store, and the load/store are at the same address, then we\npay a multi-cycle penalty.\n\nThis commit avoids this by inserting nop instructions between the store\nand the load.\n\ngcc/ChangeLog:\n\n\t* config/arc/arc-protos.h (arc_store_addr_hazard_p): Declare.\n\t* config/arc/arc.c (arc_store_addr_hazard_p): New function.\n\t(workaround_arc_anomaly): Call arc_store_addr_hazard_p for ARC700.\n\t* config/arc/arc700.md: Add define_bypass for store/load.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arc/arc700-stld-hazard.c: New file.\n\nFrom-SVN: r243007", "tree": {"sha": "20dcea3cae10d8f23d4bd700e09dc2746d4bb193", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20dcea3cae10d8f23d4bd700e09dc2746d4bb193"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9472c81d3efe5996e501348cc218c2ab79f3f38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9472c81d3efe5996e501348cc218c2ab79f3f38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9472c81d3efe5996e501348cc218c2ab79f3f38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9472c81d3efe5996e501348cc218c2ab79f3f38/comments", "author": null, "committer": null, "parents": [{"sha": "a7da4881303a7bc9a59014f0d03cd946a9cdecec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7da4881303a7bc9a59014f0d03cd946a9cdecec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7da4881303a7bc9a59014f0d03cd946a9cdecec"}], "stats": {"total": 104, "additions": 104, "deletions": 0}, "files": [{"sha": "4f3c77382087b1c9fa8b8708e63fc4b0d1eb79d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9472c81d3efe5996e501348cc218c2ab79f3f38/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9472c81d3efe5996e501348cc218c2ab79f3f38/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e9472c81d3efe5996e501348cc218c2ab79f3f38", "patch": "@@ -1,3 +1,11 @@\n+2016-11-30  Claudiu Zissulescu  <claziss@synopsys.com>\n+\t    Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* config/arc/arc-protos.h (arc_store_addr_hazard_p): Declare.\n+\t* config/arc/arc.c (arc_store_addr_hazard_p): New function.\n+\t(workaround_arc_anomaly): Call arc_store_addr_hazard_p for ARC700.\n+\t* config/arc/arc700.md: Add define_bypass for store/load.\n+\n 2016-11-30  Martin Liska  <mliska@suse.cz>\n \n \t* cgraph.c (symbol_table::initialize): Initialize"}, {"sha": "83a0b731e7055cd48e0382b6ed1c66ac233c00e3", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9472c81d3efe5996e501348cc218c2ab79f3f38/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9472c81d3efe5996e501348cc218c2ab79f3f38/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=e9472c81d3efe5996e501348cc218c2ab79f3f38", "patch": "@@ -123,3 +123,4 @@ extern bool arc_legitimize_reload_address (rtx *, machine_mode, int, int);\n extern void arc_secondary_reload_conv (rtx, rtx, rtx, bool);\n extern bool insn_is_tls_gd_dispatch (rtx_insn *);\n extern void arc_cpu_cpp_builtins (cpp_reader *);\n+extern bool arc_store_addr_hazard_p (rtx_insn *, rtx_insn *);"}, {"sha": "832f567a79b4a8104e02caf41f47d9c516fa7e25", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9472c81d3efe5996e501348cc218c2ab79f3f38/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9472c81d3efe5996e501348cc218c2ab79f3f38/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=e9472c81d3efe5996e501348cc218c2ab79f3f38", "patch": "@@ -6504,6 +6504,58 @@ arc_invalid_within_doloop (const rtx_insn *insn)\n   return NULL;\n }\n \n+/* Return true if a load instruction (CONSUMER) uses the same address as a\n+   store instruction (PRODUCER).  This function is used to avoid st/ld\n+   address hazard in ARC700 cores.  */\n+bool\n+arc_store_addr_hazard_p (rtx_insn* producer, rtx_insn* consumer)\n+{\n+  rtx in_set, out_set;\n+  rtx out_addr, in_addr;\n+\n+  if (!producer)\n+    return false;\n+\n+  if (!consumer)\n+    return false;\n+\n+  /* Peel the producer and the consumer for the address.  */\n+  out_set = single_set (producer);\n+  if (out_set)\n+    {\n+      out_addr = SET_DEST (out_set);\n+      if (!out_addr)\n+\treturn false;\n+      if (GET_CODE (out_addr) == ZERO_EXTEND\n+\t  || GET_CODE (out_addr) == SIGN_EXTEND)\n+\tout_addr = XEXP (out_addr, 0);\n+\n+      if (!MEM_P (out_addr))\n+\treturn false;\n+\n+      in_set = single_set (consumer);\n+      if (in_set)\n+\t{\n+\t  in_addr = SET_SRC (in_set);\n+\t  if (!in_addr)\n+\t    return false;\n+\t  if (GET_CODE (in_addr) == ZERO_EXTEND\n+\t      || GET_CODE (in_addr) == SIGN_EXTEND)\n+\t    in_addr = XEXP (in_addr, 0);\n+\n+\t  if (!MEM_P (in_addr))\n+\t    return false;\n+\t  /* Get rid of the MEM and check if the addresses are\n+\t     equivalent.  */\n+\t  in_addr = XEXP (in_addr, 0);\n+\t  out_addr = XEXP (out_addr, 0);\n+\n+\t  return exp_equiv_p (in_addr, out_addr, 0, true);\n+\t}\n+    }\n+  return false;\n+}\n+\n /* The same functionality as arc_hazard.  It is called in machine\n    reorg before any other optimization.  Hence, the NOP size is taken\n    into account when doing branch shortening.  */\n@@ -6522,6 +6574,29 @@ workaround_arc_anomaly (void)\n \t  emit_insn_before (gen_nopv (), succ0);\n \t}\n     }\n+\n+  if (TARGET_ARC700)\n+    {\n+      rtx_insn *succ1;\n+\n+      for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n+\t{\n+\t  succ0 = next_real_insn (insn);\n+\t  if (arc_store_addr_hazard_p (insn, succ0))\n+\t    {\n+\t      emit_insn_after (gen_nopv (), insn);\n+\t      emit_insn_after (gen_nopv (), insn);\n+\t      continue;\n+\t    }\n+\n+\t  /* Avoid adding nops if the instruction between the ST and LD is\n+\t     a call or jump.  */\n+\t  succ1 = next_real_insn (succ0);\n+\t  if (succ0 && !JUMP_P (succ0) && !CALL_P (succ0)\n+\t      && arc_store_addr_hazard_p (insn, succ1))\n+\t    emit_insn_after (gen_nopv (), insn);\n+\t}\n+    }\n }\n \n static int arc_reorg_in_progress = 0;"}, {"sha": "3eb51999004c485c8ac18c46d5cb460c1a70c944", "filename": "gcc/config/arc/arc700.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9472c81d3efe5996e501348cc218c2ab79f3f38/gcc%2Fconfig%2Farc%2Farc700.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9472c81d3efe5996e501348cc218c2ab79f3f38/gcc%2Fconfig%2Farc%2Farc700.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc700.md?ref=e9472c81d3efe5996e501348cc218c2ab79f3f38", "patch": "@@ -168,3 +168,5 @@\n        (eq_attr \"type\" \"store\")\n        (not (match_operand:DI 0 \"\" \"\")))\n   \"issue+dmp_write_port\")\n+\n+(define_bypass 3 \"data_store\" \"data_load\" \"arc_store_addr_hazard_p\")"}, {"sha": "5532ed19495eec4551f5b13420fcf9f72c73c436", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9472c81d3efe5996e501348cc218c2ab79f3f38/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9472c81d3efe5996e501348cc218c2ab79f3f38/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e9472c81d3efe5996e501348cc218c2ab79f3f38", "patch": "@@ -1,3 +1,7 @@\n+2016-11-30  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gcc.target/arc/arc700-stld-hazard.c: New file.\n+\n 2016-11-30  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/78592"}, {"sha": "bf6ae334284a475d73d94933b366c70c735f2a7f", "filename": "gcc/testsuite/gcc.target/arc/arc700-stld-hazard.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9472c81d3efe5996e501348cc218c2ab79f3f38/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Farc700-stld-hazard.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9472c81d3efe5996e501348cc218c2ab79f3f38/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Farc700-stld-hazard.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Farc700-stld-hazard.c?ref=e9472c81d3efe5996e501348cc218c2ab79f3f38", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=arc700\" } */\n+\n+volatile int a;\n+volatile int b;\n+\n+void\n+foo ()\n+{\n+  a = 1;\n+  b = a;\n+}\n+\n+/* { dg-final { scan-assembler \"st r\\[0-9\\]+,\\\\\\[@a\\\\\\]\\[^\\n\\]*\\n\\[ \\t\\]+nop_s\\[^\\n\\]*\\n\\[ \\t\\]+nop_s\\[^\\n\\]*\\n\\[ \\t\\]+ld r\\[0-9\\]+,\\\\\\[@a\\\\\\]\" } } */"}]}