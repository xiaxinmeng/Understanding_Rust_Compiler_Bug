{"sha": "31934da71aba3925e001c39c77e90763bc2d39eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE5MzRkYTcxYWJhMzkyNWUwMDFjMzljNzdlOTA3NjNiYzJkMzllYg==", "commit": {"author": {"name": "Josef Zlomek", "email": "zlomekj@suse.cz", "date": "2003-09-01T05:06:25Z"}, "committer": {"name": "Josef Zlomek", "email": "zlomek@gcc.gnu.org", "date": "2003-09-01T05:06:25Z"}, "message": "c-typeck.c (build_binary_op): Kill BIT_ANDTC_EXPR.\n\n\t* c-typeck.c (build_binary_op): Kill BIT_ANDTC_EXPR.\n\t* convert.c (convert_to_integer): Kill BIT_ANDTC_EXPR.\n\t* fold-const.c (int_const_binop): Kill BIT_ANDTC_EXPR.\n\t(fold): Kill BIT_ANDTC_EXPR and label bit_and.\n\t* tree.def (BIT_ANDTC_EXPR): Kill.\n\n\t* error.c (dump_expr): Kill BIT_ANDTC_EXPR.\n\t* lex.c (init_operators): Kill BIT_ANDTC_EXPR.\n\t* pt.c (tsubst_copy): Kill BIT_ANDTC_EXPR.\n\t* typeck.c (build_binary_op): Kill BIT_ANDTC_EXPR.\n\t(tsubst_copy_and_build): Kill BIT_ANDTC_EXPR.\n\n\t* com.c (ffecom_overlap_): Kill BIT_ANDTC_EXPR.\n\t(ffecom_tree_canonize_ref_): Kill BIT_ANDTC_EXPR.\n\nFrom-SVN: r70972", "tree": {"sha": "5b0d203422dc44311fe3d048d9db6a130f319b7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b0d203422dc44311fe3d048d9db6a130f319b7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31934da71aba3925e001c39c77e90763bc2d39eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31934da71aba3925e001c39c77e90763bc2d39eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31934da71aba3925e001c39c77e90763bc2d39eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31934da71aba3925e001c39c77e90763bc2d39eb/comments", "author": null, "committer": null, "parents": [{"sha": "754c70772172cf8106c68a9c45edc4ac3bdecff8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/754c70772172cf8106c68a9c45edc4ac3bdecff8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/754c70772172cf8106c68a9c45edc4ac3bdecff8"}], "stats": {"total": 63, "additions": 30, "deletions": 33}, "files": [{"sha": "ed09e54aebacd91ef954a84e02597a2602c21d40", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31934da71aba3925e001c39c77e90763bc2d39eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31934da71aba3925e001c39c77e90763bc2d39eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31934da71aba3925e001c39c77e90763bc2d39eb", "patch": "@@ -1,3 +1,11 @@\n+2003-09-01  Josef Zlomek  <zlomekj@suse.cz>\n+\n+\t* c-typeck.c (build_binary_op): Kill BIT_ANDTC_EXPR.\n+\t* convert.c (convert_to_integer): Kill BIT_ANDTC_EXPR.\n+\t* fold-const.c (int_const_binop): Kill BIT_ANDTC_EXPR.\n+\t(fold): Kill BIT_ANDTC_EXPR and label bit_and.\n+\t* tree.def (BIT_ANDTC_EXPR): Kill.\n+\n 2003-08-31  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* configure.in: Remove uses of \"for x in .. ${foo}\" idiom."}, {"sha": "1d5823c131fc1996f73ffdd4aa8679c5babeae2b", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31934da71aba3925e001c39c77e90763bc2d39eb/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31934da71aba3925e001c39c77e90763bc2d39eb/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=31934da71aba3925e001c39c77e90763bc2d39eb", "patch": "@@ -6623,7 +6623,6 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n       break;\n \n     case BIT_AND_EXPR:\n-    case BIT_ANDTC_EXPR:\n     case BIT_IOR_EXPR:\n     case BIT_XOR_EXPR:\n       if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)"}, {"sha": "9096541fe2a110d45911b69216b38f0076dd6e43", "filename": "gcc/convert.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31934da71aba3925e001c39c77e90763bc2d39eb/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31934da71aba3925e001c39c77e90763bc2d39eb/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=31934da71aba3925e001c39c77e90763bc2d39eb", "patch": "@@ -473,7 +473,6 @@ convert_to_integer (tree type, tree expr)\n \tcase BIT_AND_EXPR:\n \tcase BIT_IOR_EXPR:\n \tcase BIT_XOR_EXPR:\n-\tcase BIT_ANDTC_EXPR:\n \ttrunc1:\n \t  {\n \t    tree arg0 = get_unwidened (TREE_OPERAND (expr, 0), type);"}, {"sha": "55635df2024151088f7e145efc31d22b18e55655", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31934da71aba3925e001c39c77e90763bc2d39eb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31934da71aba3925e001c39c77e90763bc2d39eb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=31934da71aba3925e001c39c77e90763bc2d39eb", "patch": "@@ -1,3 +1,11 @@\n+2003-09-01  Josef Zlomek  <zlomekj@suse.cz>\n+\n+\t* error.c (dump_expr): Kill BIT_ANDTC_EXPR.\n+\t* lex.c (init_operators): Kill BIT_ANDTC_EXPR.\n+\t* pt.c (tsubst_copy): Kill BIT_ANDTC_EXPR.\n+\t* typeck.c (build_binary_op): Kill BIT_ANDTC_EXPR.\n+\t(tsubst_copy_and_build): Kill BIT_ANDTC_EXPR.\n+\n 2003-08-29  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/12093"}, {"sha": "d8d70e7286b5a0903141837535a5c46994540383", "filename": "gcc/cp/error.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31934da71aba3925e001c39c77e90763bc2d39eb/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31934da71aba3925e001c39c77e90763bc2d39eb/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=31934da71aba3925e001c39c77e90763bc2d39eb", "patch": "@@ -1486,7 +1486,6 @@ dump_expr (tree t, int flags)\n     case BIT_IOR_EXPR:\n     case BIT_XOR_EXPR:\n     case BIT_AND_EXPR:\n-    case BIT_ANDTC_EXPR:\n     case TRUTH_ANDIF_EXPR:\n     case TRUTH_ORIF_EXPR:\n     case LT_EXPR:"}, {"sha": "4e602757eedb1d04f0877513dd555351cfcf496a", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31934da71aba3925e001c39c77e90763bc2d39eb/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31934da71aba3925e001c39c77e90763bc2d39eb/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=31934da71aba3925e001c39c77e90763bc2d39eb", "patch": "@@ -206,7 +206,6 @@ init_operators (void)\n   operator_name_info [(int) ROUND_MOD_EXPR].name = \"(round %)\";\n   operator_name_info [(int) ABS_EXPR].name = \"abs\";\n   operator_name_info [(int) FFS_EXPR].name = \"ffs\";\n-  operator_name_info [(int) BIT_ANDTC_EXPR].name = \"&~\";\n   operator_name_info [(int) TRUTH_AND_EXPR].name = \"strict &&\";\n   operator_name_info [(int) TRUTH_OR_EXPR].name = \"strict ||\";\n   operator_name_info [(int) IN_EXPR].name = \"in\";"}, {"sha": "0c5714363f10a5a48bfadf470776d3e9b2659bca", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31934da71aba3925e001c39c77e90763bc2d39eb/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31934da71aba3925e001c39c77e90763bc2d39eb/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=31934da71aba3925e001c39c77e90763bc2d39eb", "patch": "@@ -7302,7 +7302,6 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n     case ROUND_DIV_EXPR:\n     case EXACT_DIV_EXPR:\n     case BIT_AND_EXPR:\n-    case BIT_ANDTC_EXPR:\n     case BIT_IOR_EXPR:\n     case BIT_XOR_EXPR:\n     case TRUNC_MOD_EXPR:\n@@ -7985,7 +7984,6 @@ tsubst_copy_and_build (tree t,\n     case ROUND_DIV_EXPR:\n     case EXACT_DIV_EXPR:\n     case BIT_AND_EXPR:\n-    case BIT_ANDTC_EXPR:\n     case BIT_IOR_EXPR:\n     case BIT_XOR_EXPR:\n     case TRUNC_MOD_EXPR:"}, {"sha": "91aab2f99e8de9cb7793488b1fe9e457f25f66fd", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31934da71aba3925e001c39c77e90763bc2d39eb/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31934da71aba3925e001c39c77e90763bc2d39eb/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=31934da71aba3925e001c39c77e90763bc2d39eb", "patch": "@@ -2808,7 +2808,6 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n       break;\n \n     case BIT_AND_EXPR:\n-    case BIT_ANDTC_EXPR:\n     case BIT_IOR_EXPR:\n     case BIT_XOR_EXPR:\n       if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)"}, {"sha": "62a7941aad9b667b86f71822c1fee56a5bd2cc04", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31934da71aba3925e001c39c77e90763bc2d39eb/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31934da71aba3925e001c39c77e90763bc2d39eb/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=31934da71aba3925e001c39c77e90763bc2d39eb", "patch": "@@ -1,3 +1,8 @@\n+2003-09-01  Josef Zlomek  <zlomekj@suse.cz>\n+\n+\t* com.c (ffecom_overlap_): Kill BIT_ANDTC_EXPR.\n+\t(ffecom_tree_canonize_ref_): Kill BIT_ANDTC_EXPR.\n+\n Thu Jul 31 01:47:27 2003  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* com.c (ffecom_init_0): Use `dconsthalf'."}, {"sha": "b5e6fddb0679c33cf678606770ed36d8e34a2f6b", "filename": "gcc/f/com.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31934da71aba3925e001c39c77e90763bc2d39eb/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31934da71aba3925e001c39c77e90763bc2d39eb/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=31934da71aba3925e001c39c77e90763bc2d39eb", "patch": "@@ -1581,7 +1581,6 @@ ffecom_overlap_ (tree dest_decl, tree dest_offset, tree dest_size,\n     case BIT_IOR_EXPR:\n     case BIT_XOR_EXPR:\n     case BIT_AND_EXPR:\n-    case BIT_ANDTC_EXPR:\n     case BIT_NOT_EXPR:\n     case TRUTH_ANDIF_EXPR:\n     case TRUTH_ORIF_EXPR:\n@@ -8891,7 +8890,6 @@ ffecom_tree_canonize_ref_ (tree *decl, tree *offset, tree *size, tree t)\n     case BIT_IOR_EXPR:\n     case BIT_XOR_EXPR:\n     case BIT_AND_EXPR:\n-    case BIT_ANDTC_EXPR:\n     case BIT_NOT_EXPR:\n     case TRUTH_ANDIF_EXPR:\n     case TRUTH_ORIF_EXPR:"}, {"sha": "27a3da15e4c4fe3f97064e5f560ace9669c1b561", "filename": "gcc/fold-const.c", "status": "modified", "additions": 9, "deletions": 23, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31934da71aba3925e001c39c77e90763bc2d39eb/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31934da71aba3925e001c39c77e90763bc2d39eb/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=31934da71aba3925e001c39c77e90763bc2d39eb", "patch": "@@ -1108,10 +1108,6 @@ int_const_binop (enum tree_code code, tree arg1, tree arg2, int notrunc)\n       low = int1l & int2l, hi = int1h & int2h;\n       break;\n \n-    case BIT_ANDTC_EXPR:\n-      low = int1l & ~int2l, hi = int1h & ~int2h;\n-      break;\n-\n     case RSHIFT_EXPR:\n       int2l = -int2l;\n     case LSHIFT_EXPR:\n@@ -6316,7 +6312,6 @@ fold (tree expr)\n       goto bit_rotate;\n \n     case BIT_AND_EXPR:\n-    bit_and:\n       if (integer_all_onesp (arg1))\n \treturn non_lvalue (convert (type, arg0));\n       if (integer_zerop (arg1))\n@@ -6354,19 +6349,6 @@ fold (tree expr)\n \n       goto associate;\n \n-    case BIT_ANDTC_EXPR:\n-      if (integer_all_onesp (arg0))\n-\treturn non_lvalue (convert (type, arg1));\n-      if (integer_zerop (arg0))\n-\treturn omit_one_operand (type, arg0, arg1);\n-      if (TREE_CODE (arg1) == INTEGER_CST)\n-\t{\n-\t  arg1 = fold (build1 (BIT_NOT_EXPR, type, arg1));\n-\t  code = BIT_AND_EXPR;\n-\t  goto bit_and;\n-\t}\n-      goto binary;\n-\n     case RDIV_EXPR:\n       /* Don't touch a floating-point divide by zero unless the mode\n \t of the constant can represent infinity.  */\n@@ -6649,7 +6631,6 @@ fold (tree expr)\n \t permute the two operations.  */\n       if (code == RROTATE_EXPR && TREE_CODE (arg1) == INTEGER_CST\n \t  && (TREE_CODE (arg0) == BIT_AND_EXPR\n-\t      || TREE_CODE (arg0) == BIT_ANDTC_EXPR\n \t      || TREE_CODE (arg0) == BIT_IOR_EXPR\n \t      || TREE_CODE (arg0) == BIT_XOR_EXPR)\n \t  && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST)\n@@ -7418,8 +7399,11 @@ fold (tree expr)\n \t  && TREE_CODE (arg1) == INTEGER_CST\n \t  && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST)\n \t{\n-\t  tree dandnotc = fold (build (BIT_ANDTC_EXPR, TREE_TYPE (arg0),\n-\t\t\t\t       arg1, TREE_OPERAND (arg0, 1)));\n+\t  tree dandnotc\n+\t    = fold (build (BIT_AND_EXPR, TREE_TYPE (arg0),\n+\t\t\t   arg1, build1 (BIT_NOT_EXPR,\n+\t\t\t\t\t TREE_TYPE (TREE_OPERAND (arg0, 1)),\n+\t\t\t\t\t TREE_OPERAND (arg0, 1))));\n \t  tree rslt = code == EQ_EXPR ? integer_zero_node : integer_one_node;\n \t  if (integer_nonzerop (dandnotc))\n \t    return omit_one_operand (type, rslt, arg0);\n@@ -7432,8 +7416,10 @@ fold (tree expr)\n \t  && TREE_CODE (arg1) == INTEGER_CST\n \t  && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST)\n \t{\n-\t  tree candnotd = fold (build (BIT_ANDTC_EXPR, TREE_TYPE (arg0),\n-\t\t\t\t       TREE_OPERAND (arg0, 1), arg1));\n+\t  tree candnotd\n+\t    = fold (build (BIT_AND_EXPR, TREE_TYPE (arg0),\n+\t\t\t   TREE_OPERAND (arg0, 1),\n+\t\t\t   build1 (BIT_NOT_EXPR, TREE_TYPE (arg1), arg1)));\n \t  tree rslt = code == EQ_EXPR ? integer_zero_node : integer_one_node;\n \t  if (integer_nonzerop (candnotd))\n \t    return omit_one_operand (type, rslt, arg0);"}, {"sha": "553e4ed930a2fd66469cc8ca209a79db27660496", "filename": "gcc/tree.def", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31934da71aba3925e001c39c77e90763bc2d39eb/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31934da71aba3925e001c39c77e90763bc2d39eb/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=31934da71aba3925e001c39c77e90763bc2d39eb", "patch": "@@ -638,7 +638,6 @@ DEFTREECODE (RROTATE_EXPR, \"rrotate_expr\", '2', 2)\n DEFTREECODE (BIT_IOR_EXPR, \"bit_ior_expr\", '2', 2)\n DEFTREECODE (BIT_XOR_EXPR, \"bit_xor_expr\", '2', 2)\n DEFTREECODE (BIT_AND_EXPR, \"bit_and_expr\", '2', 2)\n-DEFTREECODE (BIT_ANDTC_EXPR, \"bit_andtc_expr\", '2', 2)\n DEFTREECODE (BIT_NOT_EXPR, \"bit_not_expr\", '1', 1)\n \n /* ANDIF and ORIF allow the second operand not to be computed if the"}]}