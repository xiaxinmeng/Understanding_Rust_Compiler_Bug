{"sha": "92ed82367e7ccf5e031e9cb7c653c14a2d64ca89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJlZDgyMzY3ZTdjY2Y1ZTAzMWU5Y2I3YzY1M2MxNGEyZDY0Y2E4OQ==", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2020-05-10T17:46:06Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2020-05-10T17:46:06Z"}, "message": "PR fortran/93499 - ICE on division by zero in declaration statements\n\nDivision by zero in declaration statements could sometimes\ngenerate NULL pointers being passed around that lead to ICEs.\n\n2020-05-10  Harald Anlauf  <anlauf@gmx.de>\n\ngcc/fortran/\n\tPR fortran/93499\n\t* arith.c (gfc_divide): Catch division by zero.\n\t(eval_intrinsic_f3): Safeguard for NULL operands.\n\ngcc/testsuite/\n\tPR fortran/93499\n\t* gfortran.dg/pr93499.f90: New test.", "tree": {"sha": "528e107b9a21b3009080c3a34032b0ffd54629be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/528e107b9a21b3009080c3a34032b0ffd54629be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92ed82367e7ccf5e031e9cb7c653c14a2d64ca89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92ed82367e7ccf5e031e9cb7c653c14a2d64ca89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92ed82367e7ccf5e031e9cb7c653c14a2d64ca89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92ed82367e7ccf5e031e9cb7c653c14a2d64ca89/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef6394205d7bcab00dca01182d708ad5a6360a7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef6394205d7bcab00dca01182d708ad5a6360a7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef6394205d7bcab00dca01182d708ad5a6360a7b"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "6f1db3890f960a9432dc2c7976d7539b2532a4de", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ed82367e7ccf5e031e9cb7c653c14a2d64ca89/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ed82367e7ccf5e031e9cb7c653c14a2d64ca89/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=92ed82367e7ccf5e031e9cb7c653c14a2d64ca89", "patch": "@@ -1,3 +1,9 @@\n+2020-05-10  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/93499\n+\t* arith.c (gfc_divide): Catch division by zero.\n+\t(eval_intrinsic_f3): Safeguard for NULL operands.\n+\n 2020-05-05  Steve Kargl  <kargl@gcc.gnu.org>\n \tHarald Anlauf  <anlauf@gmx.de>\n "}, {"sha": "1cd0867a941991328a001c8c177732f7cdfdafe0", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ed82367e7ccf5e031e9cb7c653c14a2d64ca89/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ed82367e7ccf5e031e9cb7c653c14a2d64ca89/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=92ed82367e7ccf5e031e9cb7c653c14a2d64ca89", "patch": "@@ -1746,6 +1746,9 @@ eval_intrinsic_f3 (gfc_intrinsic_op op,\n   gfc_expr *result;\n   eval_f f;\n \n+  if (!op1 && !op2)\n+    return NULL;\n+\n   result = reduce_binary0 (op1, op2);\n   if (result != NULL)\n     return eval_type_intrinsic0(op, result);\n@@ -1803,6 +1806,37 @@ gfc_multiply (gfc_expr *op1, gfc_expr *op2)\n gfc_expr *\n gfc_divide (gfc_expr *op1, gfc_expr *op2)\n {\n+  if (op2 && op2->expr_type == EXPR_CONSTANT)\n+    {\n+      arith rc = ARITH_OK;\n+      switch (op2->ts.type)\n+\t{\n+\tcase BT_INTEGER:\n+\t  /* non-integer divided by integer 0 is handled elsewhere.  */\n+\t  if (mpz_sgn (op2->value.integer) == 0\n+\t      && op1->ts.type == BT_INTEGER)\n+\t    rc = ARITH_DIV0;\n+\t  break;\n+\tcase BT_REAL:\n+\t  if (mpfr_sgn (op2->value.real) == 0\n+\t      && flag_range_check == 1)\n+\t    rc = ARITH_DIV0;\n+\t  break;\n+\tcase BT_COMPLEX:\n+\t  if (mpc_cmp_si_si (op2->value.complex, 0, 0) == 0\n+\t      && flag_range_check == 1)\n+\t    rc = ARITH_DIV0;\n+\t  break;\n+\tdefault:\n+\t  gfc_internal_error (\"gfc_divide(): Bad basic type\");\n+\t}\n+      if (rc == ARITH_DIV0)\n+\t{\n+\t  gfc_seen_div0 = true;\n+\t  gfc_error (\"Division by zero at %L\", &op2->where);\n+\t  return NULL;\n+\t}\n+    }\n   return eval_intrinsic_f3 (INTRINSIC_DIVIDE, gfc_arith_divide, op1, op2);\n }\n "}, {"sha": "791c62aeab882bebab45b1c98130a3565b0148b0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ed82367e7ccf5e031e9cb7c653c14a2d64ca89/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ed82367e7ccf5e031e9cb7c653c14a2d64ca89/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=92ed82367e7ccf5e031e9cb7c653c14a2d64ca89", "patch": "@@ -1,3 +1,8 @@\n+2020-05-10  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/93499\n+\t* gfortran.dg/pr93499.f90: New test.\n+\n 2020-05-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR testsuite/95008"}, {"sha": "7a414bb601685a64c02d157d89e60170aef18e68", "filename": "gcc/testsuite/gfortran.dg/pr93499.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ed82367e7ccf5e031e9cb7c653c14a2d64ca89/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93499.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ed82367e7ccf5e031e9cb7c653c14a2d64ca89/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93499.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93499.f90?ref=92ed82367e7ccf5e031e9cb7c653c14a2d64ca89", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do compile }\n+! PR 93499 - this used to ICE. Original test case by Gerhard Steinmetz.\n+\n+program p\n+  integer :: a((0.)/0)  ! { dg-error \"Division by zero\" }\n+  type t(n)\n+     integer, len :: n\n+  end type t\n+  type(t((0)/0))  :: x  ! { dg-error \"Division by zero\" }\n+end"}]}