{"sha": "b641d7fca3c917bd40da5de8e9f16876bdd4a5df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY0MWQ3ZmNhM2M5MTdiZDQwZGE1ZGU4ZTlmMTY4NzZiZGQ0YTVkZg==", "commit": {"author": {"name": "Adam Nemet", "email": "anemet@caviumnetworks.com", "date": "2009-07-18T21:46:01Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2009-07-18T21:46:01Z"}, "message": "combine.c (simplify_shift_const_1): Split code to determine shift_mode into ...\n\n\t* combine.c (simplify_shift_const_1): Split code to determine\n\tshift_mode into ...\n\t(try_widen_shift_mode): ... here.  Allow widening for ASHIFTRT if the\n\tnew bits shifted in are identical to the old sign bit.\n\ntestsuite/\n\t* gcc.target/mips/octeon-exts-7.c: New test.\n\t* gcc.target/mips/octeon-exts-2.c: Revert previous change.\n\t* gcc.target/mips/octeon-exts-5.c: Likewise.\n\nFrom-SVN: r149778", "tree": {"sha": "a58b9ea723f1b744b052635b30e5dc9e99b20305", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a58b9ea723f1b744b052635b30e5dc9e99b20305"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b641d7fca3c917bd40da5de8e9f16876bdd4a5df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b641d7fca3c917bd40da5de8e9f16876bdd4a5df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b641d7fca3c917bd40da5de8e9f16876bdd4a5df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b641d7fca3c917bd40da5de8e9f16876bdd4a5df/comments", "author": null, "committer": null, "parents": [{"sha": "b95d6ac9ca9decd3568e49662744987d78116681", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b95d6ac9ca9decd3568e49662744987d78116681", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b95d6ac9ca9decd3568e49662744987d78116681"}], "stats": {"total": 93, "additions": 72, "deletions": 21}, "files": [{"sha": "96430050d90b87784929a33370b7f54bcf27a31d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b641d7fca3c917bd40da5de8e9f16876bdd4a5df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b641d7fca3c917bd40da5de8e9f16876bdd4a5df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b641d7fca3c917bd40da5de8e9f16876bdd4a5df", "patch": "@@ -1,3 +1,10 @@\n+2009-07-18  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* combine.c (simplify_shift_const_1): Split code to determine\n+\tshift_mode into ...\n+\t(try_widen_shift_mode): ... here.  Allow widening for ASHIFTRT if the\n+\tnew bits shifted in are identical to the old sign bit.\n+\n 2009-07-18  Richard Guenther  <rguenther@suse.de>\n \n \tPR c/40787"}, {"sha": "a0157df71406e33272b0223a297cb025e0f40076", "filename": "gcc/combine.c", "status": "modified", "additions": 38, "deletions": 15, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b641d7fca3c917bd40da5de8e9f16876bdd4a5df/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b641d7fca3c917bd40da5de8e9f16876bdd4a5df/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=b641d7fca3c917bd40da5de8e9f16876bdd4a5df", "patch": "@@ -8982,6 +8982,42 @@ merge_outer_ops (enum rtx_code *pop0, HOST_WIDE_INT *pconst0, enum rtx_code op1,\n   return 1;\n }\n \f\n+/* A helper to simplify_shift_const_1 to determine the mode we can perform\n+   the shift in.  The original shift operation CODE is performed on OP in\n+   ORIG_MODE.  Return the wider mode MODE if we can perform the operation\n+   in that mode.  Return ORIG_MODE otherwise.  */\n+\n+static enum machine_mode\n+try_widen_shift_mode (enum rtx_code code, rtx op,\n+\t\t      enum machine_mode orig_mode, enum machine_mode mode)\n+{\n+  if (orig_mode == mode)\n+    return mode;\n+  gcc_assert (GET_MODE_BITSIZE (mode) > GET_MODE_BITSIZE (orig_mode));\n+\n+  /* In general we can't perform in wider mode for right shift and rotate.  */\n+  switch (code)\n+    {\n+    case ASHIFTRT:\n+      /* We can still widen if the bits brought in from the left are identical\n+\t to the sign bit of ORIG_MODE.  */\n+      if (num_sign_bit_copies (op, mode)\n+\t  > (unsigned) (GET_MODE_BITSIZE (mode)\n+\t\t\t- GET_MODE_BITSIZE (orig_mode)))\n+\treturn mode;\n+      /* fall through */\n+    case LSHIFTRT:\n+    case ROTATE:\n+      return orig_mode;\n+\n+    case ROTATERT:\n+      gcc_unreachable ();\n+\n+    default:\n+      return mode;\n+    }\n+}\n+\n /* Simplify a shift of VAROP by COUNT bits.  CODE says what kind of shift.\n    The result of the shift is RESULT_MODE.  Return NULL_RTX if we cannot\n    simplify it.  Otherwise, return a simplified value.\n@@ -9041,13 +9077,7 @@ simplify_shift_const_1 (enum rtx_code code, enum machine_mode result_mode,\n \t    count = bitsize - count;\n \t}\n \n-      /* We need to determine what mode we will do the shift in.  If the\n-\t shift is a right shift or a ROTATE, we must always do it in the mode\n-\t it was originally done in.  Otherwise, we can do it in MODE, the\n-\t widest mode encountered.  */\n-      shift_mode\n-\t= (code == ASHIFTRT || code == LSHIFTRT || code == ROTATE\n-\t   ? result_mode : mode);\n+      shift_mode = try_widen_shift_mode (code, varop, result_mode, mode);\n \n       /* Handle cases where the count is greater than the size of the mode\n \t minus 1.  For ASHIFT, use the size minus one as the count (this can\n@@ -9645,14 +9675,7 @@ simplify_shift_const_1 (enum rtx_code code, enum machine_mode result_mode,\n       break;\n     }\n \n-  /* We need to determine what mode to do the shift in.  If the shift is\n-     a right shift or ROTATE, we must always do it in the mode it was\n-     originally done in.  Otherwise, we can do it in MODE, the widest mode\n-     encountered.  The code we care about is that of the shift that will\n-     actually be done, not the shift that was originally requested.  */\n-  shift_mode\n-    = (code == ASHIFTRT || code == LSHIFTRT || code == ROTATE\n-       ? result_mode : mode);\n+  shift_mode = try_widen_shift_mode (code, varop, result_mode, mode);\n \n   /* We have now finished analyzing the shift.  The result should be\n      a shift of type CODE with SHIFT_MODE shifting VAROP COUNT places.  If"}, {"sha": "3200817c4e1efb63bcad9b76d92ec2a0dce40966", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b641d7fca3c917bd40da5de8e9f16876bdd4a5df/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b641d7fca3c917bd40da5de8e9f16876bdd4a5df/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b641d7fca3c917bd40da5de8e9f16876bdd4a5df", "patch": "@@ -1,3 +1,9 @@\n+2009-07-18  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* gcc.target/mips/octeon-exts-7.c: New test.\n+\t* gcc.target/mips/octeon-exts-2.c: Revert previous change.\n+\t* gcc.target/mips/octeon-exts-5.c: Likewise.\n+\n 2009-07-18  Richard Guenther  <rguenther@suse.de>\n \n \tPR testsuite/40798"}, {"sha": "fc5df639d02bc4d64586da7cc2b4227191ef681f", "filename": "gcc/testsuite/gcc.target/mips/octeon-exts-2.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b641d7fca3c917bd40da5de8e9f16876bdd4a5df/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-exts-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b641d7fca3c917bd40da5de8e9f16876bdd4a5df/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-exts-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-exts-2.c?ref=b641d7fca3c917bd40da5de8e9f16876bdd4a5df", "patch": "@@ -1,7 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -march=octeon -meb -dp\" } */\n-/* Don't match exts in sign-extension.  */\n-/* { dg-final { scan-assembler-times \"\\texts\\t\\[^\\\\n\\]*extv\" 4 } } */\n+/* { dg-options \"-O -march=octeon -meb\" } */\n+/* { dg-final { scan-assembler-times \"\\texts\\t\" 4 } } */\n \n struct bar\n {"}, {"sha": "e7a4738b96fbd97b6264f33dc667fb3096eb97ac", "filename": "gcc/testsuite/gcc.target/mips/octeon-exts-5.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b641d7fca3c917bd40da5de8e9f16876bdd4a5df/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-exts-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b641d7fca3c917bd40da5de8e9f16876bdd4a5df/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-exts-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-exts-5.c?ref=b641d7fca3c917bd40da5de8e9f16876bdd4a5df", "patch": "@@ -1,8 +1,7 @@\n /* -mel version of octeon-exts-2.c.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -march=octeon -mel -dp\" } */\n-/* Don't match exts in sign-extension.  */\n-/* { dg-final { scan-assembler-times \"\\texts\\t\\[^\\\\n\\]*extv\" 4 } } */\n+/* { dg-options \"-O -march=octeon -mel\" } */\n+/* { dg-final { scan-assembler-times \"\\texts\\t\" 4 } } */\n \n struct bar\n {"}, {"sha": "04805d06de466360fe731778a9c6e8b2ef595c00", "filename": "gcc/testsuite/gcc.target/mips/octeon-exts-7.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b641d7fca3c917bd40da5de8e9f16876bdd4a5df/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-exts-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b641d7fca3c917bd40da5de8e9f16876bdd4a5df/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-exts-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon-exts-7.c?ref=b641d7fca3c917bd40da5de8e9f16876bdd4a5df", "patch": "@@ -0,0 +1,17 @@\n+/* Remove the redundant sign-extension after the sign-extraction.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -march=octeon -mgp64\" } */\n+/* { dg-final { scan-assembler-times \"\\texts\\t\" 1 } } */\n+/* { dg-final { scan-assembler-not \"sll|sra\" } } */\n+\n+struct bar\n+{\n+  long long a:18;\n+  long long b:14;\n+};\n+\n+NOMIPS16 int\n+f1 (struct bar *s)\n+{\n+  return s->b;\n+}"}]}