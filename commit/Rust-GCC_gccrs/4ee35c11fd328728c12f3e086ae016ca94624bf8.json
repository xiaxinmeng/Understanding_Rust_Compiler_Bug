{"sha": "4ee35c11fd328728c12f3e086ae016ca94624bf8", "node_id": "C_kwDOANBUbNoAKDRlZTM1YzExZmQzMjg3MjhjMTJmM2UwODZhZTAxNmNhOTQ2MjRiZjg", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-10-09T20:39:02Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-11-04T08:59:58Z"}, "message": "Restore default 'sorry' 'TARGET_ASM_CONSTRUCTOR', 'TARGET_ASM_DESTRUCTOR'\n\n... that got lost in commit 7e0db0cdf01e9c885a29cb37415f5bc00d90c029\n\"STABS: remove -gstabs and -gxcoff functionality\".\n\nPreviously, if a back end was not 'USE_COLLECT2', nor manually defined\n'TARGET_ASM_CONSTRUCTOR', 'TARGET_ASM_DESTRUCTOR', or got pointed to the\nrespective 'default_[...]' functions due to 'CTORS_SECTION_ASM_OP',\n'DTORS_SECTION_ASM_OP', or 'TARGET_ASM_NAMED_SECTION', it got pointed to\n'default_stabs_asm_out_constructor', 'default_stabs_asm_out_destructor'.\nThese would emit 'sorry' for any global constructor/destructor they're\nrun into.\n\nThis is now gone, and thus in such a back end configuration case\n'TARGET_ASM_CONSTRUCTOR', 'TARGET_ASM_DESTRUCTOR' don't get defined\nanymore, and thus the subsequently following:\n\n    #if !defined(TARGET_HAVE_CTORS_DTORS)\n    # if defined(TARGET_ASM_CONSTRUCTOR) && defined(TARGET_ASM_DESTRUCTOR)\n    # define TARGET_HAVE_CTORS_DTORS true\n    # endif\n    #endif\n\n... doesn't define 'TARGET_HAVE_CTORS_DTORS' anymore, and thus per my\nunderstanding, 'gcc/final.cc:rest_of_handle_final':\n\n    if (DECL_STATIC_CONSTRUCTOR (current_function_decl)\n        && targetm.have_ctors_dtors)\n      targetm.asm_out.constructor (XEXP (DECL_RTL (current_function_decl), 0),\n                                   decl_init_priority_lookup\n                                     (current_function_decl));\n    if (DECL_STATIC_DESTRUCTOR (current_function_decl)\n        && targetm.have_ctors_dtors)\n      targetm.asm_out.destructor (XEXP (DECL_RTL (current_function_decl), 0),\n                                  decl_fini_priority_lookup\n                                    (current_function_decl));\n\n... simply does nothing anymore for a 'DECL_STATIC_CONSTRUCTOR',\n'DECL_STATIC_DESTRUCTOR'.\n\nThis, effectively, means that GCC/nvptx now suddenly appears to \"support\"\nglobal constructors/destructors, which means that a ton of test cases now\nerroneously PASS that previously used to FAIL:\n\n    sorry, unimplemented: global constructors not supported on this target\n\nOf course, such support didn't magically happen due to\n\"STABS: remove -gstabs and -gxcoff functionality\", so this is bad.  And,\ncorresponding execution testing then regularly FAILs (due to the global\nconstructor/destructor functions never being invoked), for example:\n\n    [-UNSUPPORTED:-]{+PASS:+} gcc.dg/initpri1.c {+(test for excess errors)+}\n    {+FAIL: gcc.dg/initpri1.c execution test+}\n\n    [-UNSUPPORTED:-]{+PASS:+} g++.dg/special/conpr-1.C {+(test for excess errors)+}\n    {+FAIL: g++.dg/special/conpr-1.C execution test+}\n\nTo restore the previous GCC/nvptx behavior, for traceability, this simply\nrestores the previous code, stripped down to the bare minimum.\n\n\tgcc/\n\t* Makefile.in (OBJS): Add 'dbxout.o'.\n\t* config/nvptx/nvptx.cc: '#include \"dbxout.h\"'.\n\t* dbxout.cc: New.\n\t* dbxout.h: Likewise.\n\t* target-def.h (TARGET_ASM_CONSTRUCTOR, TARGET_ASM_DESTRUCTOR):\n\tDefault to 'default_stabs_asm_out_constructor',\n\t'default_stabs_asm_out_destructor'.", "tree": {"sha": "f4b10cd236780751d7cd88f0046b961e8612c34e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4b10cd236780751d7cd88f0046b961e8612c34e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ee35c11fd328728c12f3e086ae016ca94624bf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ee35c11fd328728c12f3e086ae016ca94624bf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ee35c11fd328728c12f3e086ae016ca94624bf8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ee35c11fd328728c12f3e086ae016ca94624bf8/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b4a03962a0fe18cadc944d90f1fb85a40004226", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b4a03962a0fe18cadc944d90f1fb85a40004226", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b4a03962a0fe18cadc944d90f1fb85a40004226"}], "stats": {"total": 74, "additions": 74, "deletions": 0}, "files": [{"sha": "c4072d06a936ffcfe5943f1348cc2ede0753822c", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee35c11fd328728c12f3e086ae016ca94624bf8/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee35c11fd328728c12f3e086ae016ca94624bf8/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=4ee35c11fd328728c12f3e086ae016ca94624bf8", "patch": "@@ -1355,6 +1355,7 @@ OBJS = \\\n \tdata-streamer.o \\\n \tdata-streamer-in.o \\\n \tdata-streamer-out.o \\\n+\tdbxout.o \\\n \tdbgcnt.o \\\n \tdce.o \\\n \tddg.o \\"}, {"sha": "4cb5d02d40cd3be2b44b4e913c51216a7b543caa", "filename": "gcc/config/nvptx/nvptx.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee35c11fd328728c12f3e086ae016ca94624bf8/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee35c11fd328728c12f3e086ae016ca94624bf8/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc?ref=4ee35c11fd328728c12f3e086ae016ca94624bf8", "patch": "@@ -52,6 +52,7 @@\n #include \"tm-preds.h\"\n #include \"tm-constrs.h\"\n #include \"langhooks.h\"\n+#include \"dbxout.h\"\n #include \"cfgrtl.h\"\n #include \"gimple.h\"\n #include \"stor-layout.h\""}, {"sha": "161eeb1965375204b92e6a644abb988e6c7037c4", "filename": "gcc/dbxout.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee35c11fd328728c12f3e086ae016ca94624bf8/gcc%2Fdbxout.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee35c11fd328728c12f3e086ae016ca94624bf8/gcc%2Fdbxout.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.cc?ref=4ee35c11fd328728c12f3e086ae016ca94624bf8", "patch": "@@ -0,0 +1,43 @@\n+/* Copyright (C) 1987-2022 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"diagnostic-core.h\"\n+#include \"dbxout.h\"\n+\n+/* Record an element in the table of global destructors.  SYMBOL is\n+   a SYMBOL_REF of the function to be called; PRIORITY is a number\n+   between 0 and MAX_INIT_PRIORITY.  */\n+\n+void\n+default_stabs_asm_out_destructor (rtx symbol ATTRIBUTE_UNUSED,\n+\t\t\t\t  int priority ATTRIBUTE_UNUSED)\n+{\n+  sorry (\"global destructors not supported on this target\");\n+}\n+\n+/* Likewise for global constructors.  */\n+\n+void\n+default_stabs_asm_out_constructor (rtx symbol ATTRIBUTE_UNUSED,\n+\t\t\t\t   int priority ATTRIBUTE_UNUSED)\n+{\n+  sorry (\"global constructors not supported on this target\");\n+}"}, {"sha": "ad0b538cabf1a78b1d3fe28709511503c030ddc1", "filename": "gcc/dbxout.h", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee35c11fd328728c12f3e086ae016ca94624bf8/gcc%2Fdbxout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee35c11fd328728c12f3e086ae016ca94624bf8/gcc%2Fdbxout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.h?ref=4ee35c11fd328728c12f3e086ae016ca94624bf8", "patch": "@@ -0,0 +1,25 @@\n+/* Copyright (C) 1998-2022 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_DBXOUT_H\n+#define GCC_DBXOUT_H\n+\n+extern void default_stabs_asm_out_destructor (rtx, int);\n+extern void default_stabs_asm_out_constructor (rtx, int);\n+\n+#endif /* GCC_DBXOUT_H */"}, {"sha": "1c4aa2963dc44107e703ba7c1fa71f07ffbd07bd", "filename": "gcc/target-def.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee35c11fd328728c12f3e086ae016ca94624bf8/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee35c11fd328728c12f3e086ae016ca94624bf8/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=4ee35c11fd328728c12f3e086ae016ca94624bf8", "patch": "@@ -62,6 +62,8 @@\n # else\n #  ifdef TARGET_ASM_NAMED_SECTION\n #   define TARGET_ASM_CONSTRUCTOR default_named_section_asm_out_constructor\n+#  else\n+#   define TARGET_ASM_CONSTRUCTOR default_stabs_asm_out_constructor\n #  endif\n # endif\n #endif\n@@ -72,6 +74,8 @@\n # else\n #  ifdef TARGET_ASM_NAMED_SECTION\n #   define TARGET_ASM_DESTRUCTOR default_named_section_asm_out_destructor\n+#  else\n+#   define TARGET_ASM_DESTRUCTOR default_stabs_asm_out_destructor\n #  endif\n # endif\n #endif"}]}