{"sha": "70310982492071f98eacdac0747521769b0f0328", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAzMTA5ODI0OTIwNzFmOThlYWNkYWMwNzQ3NTIxNzY5YjBmMDMyOA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-11-30T05:27:16Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-12-03T05:42:39Z"}, "message": "Optimize vpsubusw compared to 0 into vpcmpleuw or vpcmpnleuw [PR96906]\n\nFor signed comparisons, it handles cases that are eq or neq to 0.\nFor unsigned comparisons, it additionaly handles cases that are le or\ngt to 0(equivilent to eq or neq to 0). Transform case eq to leu,\ncase neq to gtu.\n\n.i.e. for -mavx512bw -mavx512vl transform eq case code from\n\n\tvpsubusw        %xmm1, %xmm0, %xmm0\n\tvpxor   %xmm1, %xmm1, %xmm1\n\tvpcmpeqw  %xmm1, %xmm0, %k0\nto\n\tvpcmpleuw       %xmm1, %xmm0, %k0\n\n.i.e. for -mavx512bw -mavx512vl transform neq case code from\n\n\tvpsubusw        %xmm1, %xmm0, %xmm0\n\tvpxor   %xmm1, %xmm1, %xmm1\n\tvpcmpneqw  %xmm1, %xmm0, %k0\nto\n\tvpcmpnleuw       %xmm1, %xmm0, %k0\n\ngcc/ChangeLog\n\tPR target/96906\n\t* config/i386/sse.md\n\t(<avx512>_ucmp<mode>3<mask_scalar_merge_name>): Add a new\n\tdefine_split after this insn.\n\ngcc/testsuite/ChangeLog\n\n\t* gcc.target/i386/avx512bw-pr96906-1.c: New test.\n\t* gcc.target/i386/pr96906-1.c: Add -mno-avx512f.", "tree": {"sha": "1b8f4e168b25ff13331f63c9d8592966cd4c9cc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b8f4e168b25ff13331f63c9d8592966cd4c9cc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70310982492071f98eacdac0747521769b0f0328", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70310982492071f98eacdac0747521769b0f0328", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70310982492071f98eacdac0747521769b0f0328", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70310982492071f98eacdac0747521769b0f0328/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b"}], "stats": {"total": 108, "additions": 107, "deletions": 1}, "files": [{"sha": "94bb4457e391d42b057e3c9b9365afb069840756", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70310982492071f98eacdac0747521769b0f0328/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70310982492071f98eacdac0747521769b0f0328/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=70310982492071f98eacdac0747521769b0f0328", "patch": "@@ -3098,6 +3098,44 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_int_iterator UNSPEC_PCMP_ITER\n+  [UNSPEC_PCMP UNSPEC_UNSIGNED_PCMP])\n+\n+(define_int_attr pcmp_signed_mask\n+  [(UNSPEC_PCMP \"3\") (UNSPEC_UNSIGNED_PCMP \"1\")])\n+\n+;; PR96906 - optimize vpsubusw compared to 0 into vpcmpleuw or vpcmpnltuw.\n+;; For signed comparison, handle EQ 0: NEQ 4,\n+;; for unsigned comparison extra handle LE:2, NLE:6, equivalent to EQ and NEQ.\n+\n+(define_split\n+  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\")\n+\t(unspec:<avx512fmaskmode>\n+\t  [(us_minus:VI12_AVX512VL\n+\t     (match_operand:VI12_AVX512VL 1 \"vector_operand\")\n+\t     (match_operand:VI12_AVX512VL 2 \"vector_operand\"))\n+\t   (match_operand:VI12_AVX512VL 3 \"const0_operand\")\n+\t   (match_operand:SI 4 \"const_0_to_7_operand\")]\n+\t  UNSPEC_PCMP_ITER))]\n+  \"TARGET_AVX512BW\n+  && ix86_binary_operator_ok (US_MINUS, <MODE>mode, operands)\n+  && (INTVAL (operands[4]) & <pcmp_signed_mask>) == 0\"\n+  [(const_int 0)]\n+  {\n+    /* LE: 2, NLT: 5, NLE: 6, LT: 1  */\n+    int cmp_predicate = 2; /* LE  */\n+    if (MEM_P (operands[1]))\n+      {\n+       std::swap (operands[1], operands[2]);\n+       cmp_predicate = 5; /* NLT (GE)  */\n+      }\n+    if ((INTVAL (operands[4]) & 4) != 0)\n+      cmp_predicate ^= 4; /* Invert the comparison to NLE (GT) or LT.  */\n+    emit_insn (gen_<avx512>_ucmp<mode>3 (operands[0], operands[1],operands[2],\n+\t\t\t\t\tGEN_INT (cmp_predicate)));\n+    DONE;\n+  })\n+\n (define_insn \"avx512f_vmcmp<mode>3<round_saeonly_name>\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n \t(and:<avx512fmaskmode>"}, {"sha": "81d7e06b97213e7606be3ac3c459e29dc8ffe5a7", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-pr96906-1.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70310982492071f98eacdac0747521769b0f0328/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr96906-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70310982492071f98eacdac0747521769b0f0328/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr96906-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr96906-1.c?ref=70310982492071f98eacdac0747521769b0f0328", "patch": "@@ -0,0 +1,68 @@\n+/* PR target/96906 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl -masm=att\" } */\n+/* { dg-final { scan-assembler-times {(?n)vpcmpub[ \\t]*\\$2} 9 } } */\n+/* { dg-final { scan-assembler-times {(?n)vpcmpub[ \\t]*\\$6} 9 } } */\n+/* { dg-final { scan-assembler-times {(?n)vpcmpuw[ \\t]*\\$2} 9 } } */\n+/* { dg-final { scan-assembler-times {(?n)vpcmpuw[ \\t]*\\$6} 9 } } */\n+\n+\n+#include<immintrin.h>\n+\n+#define FOO(LENGTH,SUFFIX,TYPE,UTYPE,RTYPE,PRED)\t\t\t\\\n+  __mmask##RTYPE\t\t\t\t\t\t\t\\\n+  foo_##LENGTH##_##TYPE##_##PRED (__m##LENGTH##i x, __m##LENGTH##i y)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return\t\t\t\t\t\t\t\t\\\n+      _mm##SUFFIX##_cmp_##TYPE##_mask (_mm##SUFFIX##_subs_##UTYPE (x, y), \\\n+\t\t\t\t       _mm##SUFFIX##_setzero_si##LENGTH (), \\\n+\t\t\t\t       PRED);\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+\n+FOO (128,, epi16, epu16, 8, 0);\n+FOO (128,, epi16, epu16, 8, 4);\n+\n+FOO (128,, epu16, epu16, 8, 0);\n+FOO (128,, epu16, epu16, 8, 2);\n+FOO (128,, epu16, epu16, 8, 4);\n+FOO (128,, epu16, epu16, 8, 6);\n+\n+FOO (256, 256, epi16, epu16, 16, 0);\n+FOO (256, 256, epi16, epu16, 16, 4);\n+\n+FOO (256, 256, epu16, epu16, 16, 0);\n+FOO (256, 256, epu16, epu16, 16, 2);\n+FOO (256, 256, epu16, epu16, 16, 4);\n+FOO (256, 256, epu16, epu16, 16, 6);\n+\n+FOO (512, 512, epi16, epu16, 32, 0);\n+FOO (512, 512, epi16, epu16, 32, 4);\n+\n+FOO (512, 512, epu16, epu16, 32, 0);\n+FOO (512, 512, epu16, epu16, 32, 2);\n+FOO (512, 512, epu16, epu16, 32, 4);\n+FOO (512, 512, epu16, epu16, 32, 6);\n+\n+FOO (128,, epi8, epu8, 16, 0);\n+FOO (128,, epi8, epu8, 16, 4);\n+\n+FOO (128,, epu8, epu8, 16, 0);\n+FOO (128,, epu8, epu8, 16, 2);\n+FOO (128,, epu8, epu8, 16, 4);\n+FOO (128,, epu8, epu8, 16, 6);\n+\n+FOO (256, 256, epi8, epu8, 32, 0);\n+FOO (256, 256, epi8, epu8, 32, 4);\n+\n+FOO (256, 256, epu8, epu8, 32, 0);\n+FOO (256, 256, epu8, epu8, 32, 2);\n+FOO (256, 256, epu8, epu8, 32, 4);\n+FOO (256, 256, epu8, epu8, 32, 6);\n+\n+FOO (512, 512, epi8, epu8, 64, 0);\n+FOO (512, 512, epi8, epu8, 64, 4);\n+\n+FOO (512, 512, epu8, epu8, 64, 0);\n+FOO (512, 512, epu8, epu8, 64, 2);\n+FOO (512, 512, epu8, epu8, 64, 4);\n+FOO (512, 512, epu8, epu8, 64, 6);"}, {"sha": "b1b41bf522d4b405478f7f43a473f3a421d67bc8", "filename": "gcc/testsuite/gcc.target/i386/pr96906-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70310982492071f98eacdac0747521769b0f0328/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96906-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70310982492071f98eacdac0747521769b0f0328/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96906-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96906-1.c?ref=70310982492071f98eacdac0747521769b0f0328", "patch": "@@ -1,6 +1,6 @@\n /* PR target/96906 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mavx2\" } */\n+/* { dg-options \"-O2 -mavx2 -mno-avx512f\" } */\n /* { dg-final { scan-assembler-times \"\\tvpminub\\[^\\n\\r]*xmm\" 2 } } */\n /* { dg-final { scan-assembler-times \"\\tvpminuw\\[^\\n\\r]*xmm\" 2 } } */\n /* { dg-final { scan-assembler-times \"\\tvpminub\\[^\\n\\r]*ymm\" 2 } } */"}]}