{"sha": "40873cdd57493f0dca7a5842e5a141ef10504aff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA4NzNjZGQ1NzQ5M2YwZGNhN2E1ODQyZTVhMTQxZWYxMDUwNGFmZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-06-14T13:31:43Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-06-14T13:31:43Z"}, "message": "re PR debug/48459 (avr: Assertion failure with -gdwarf-2)\n\nPR debug/48459\n        * dwarf2out.c (frame_pointer_fb_offset_valid): New.\n        (based_loc_descr): Assert it's true.\n        (compute_frame_pointer_to_fb_displacement): Set it, rather than\n        aborting immediately.\n\nFrom-SVN: r175018", "tree": {"sha": "af26a993461004b04bd46635e26fcdd7f9a336b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af26a993461004b04bd46635e26fcdd7f9a336b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40873cdd57493f0dca7a5842e5a141ef10504aff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40873cdd57493f0dca7a5842e5a141ef10504aff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40873cdd57493f0dca7a5842e5a141ef10504aff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40873cdd57493f0dca7a5842e5a141ef10504aff/comments", "author": null, "committer": null, "parents": [{"sha": "73e8cb24c2655ff316d58c559c082c8d1ef67ed9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73e8cb24c2655ff316d58c559c082c8d1ef67ed9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73e8cb24c2655ff316d58c559c082c8d1ef67ed9"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "0f06b436f7fd000f915fb0dc782a8c64acb0a219", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40873cdd57493f0dca7a5842e5a141ef10504aff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40873cdd57493f0dca7a5842e5a141ef10504aff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40873cdd57493f0dca7a5842e5a141ef10504aff", "patch": "@@ -1,3 +1,11 @@\n+2011-06-14  Richard Henderson  <rth@redhat.com>\n+\n+\tPR debug/48459\n+\t* dwarf2out.c (frame_pointer_fb_offset_valid): New.\n+\t(based_loc_descr): Assert it's true.\n+\t(compute_frame_pointer_to_fb_displacement): Set it, rather than\n+\taborting immediately.\n+\n 2011-06-14  Sanjin Liu\t<scliu@faraday-tech.com>\n \t    Mingfeng Wu  <mingfeng@faraday-tech.com>\n "}, {"sha": "c1c22b46323f7be7d2df06f18172249a5c4af2b2", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40873cdd57493f0dca7a5842e5a141ef10504aff/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40873cdd57493f0dca7a5842e5a141ef10504aff/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=40873cdd57493f0dca7a5842e5a141ef10504aff", "patch": "@@ -6471,6 +6471,7 @@ static GTY(()) VEC(tree,gc) *generic_type_instances;\n /* Offset from the \"steady-state frame pointer\" to the frame base,\n    within the current function.  */\n static HOST_WIDE_INT frame_pointer_fb_offset;\n+static bool frame_pointer_fb_offset_valid;\n \n static VEC (dw_die_ref, heap) *base_types;\n \n@@ -13613,6 +13614,7 @@ based_loc_descr (rtx reg, HOST_WIDE_INT offset,\n \t      return new_reg_loc_descr (base_reg, offset);\n \t    }\n \n+\t  gcc_assert (frame_pointer_fb_offset_valid);\n \t  offset += frame_pointer_fb_offset;\n \t  return new_loc_descr (DW_OP_fbreg, offset, 0);\n \t}\n@@ -18336,14 +18338,20 @@ compute_frame_pointer_to_fb_displacement (HOST_WIDE_INT offset)\n       elim = XEXP (elim, 0);\n     }\n \n-  gcc_assert ((SUPPORTS_STACK_ALIGNMENT\n-\t       && (elim == hard_frame_pointer_rtx\n-\t\t   || elim == stack_pointer_rtx))\n-\t      || elim == (frame_pointer_needed\n-\t\t\t  ? hard_frame_pointer_rtx\n-\t\t\t  : stack_pointer_rtx));\n-\n   frame_pointer_fb_offset = -offset;\n+\n+  /* ??? AVR doesn't set up valid eliminations when there is no stack frame\n+     in which to eliminate.  This is because it's stack pointer isn't \n+     directly accessible as a register within the ISA.  To work around\n+     this, assume that while we cannot provide a proper value for\n+     frame_pointer_fb_offset, we won't need one either.  */\n+  frame_pointer_fb_offset_valid\n+    = ((SUPPORTS_STACK_ALIGNMENT\n+\t&& (elim == hard_frame_pointer_rtx\n+\t    || elim == stack_pointer_rtx))\n+       || elim == (frame_pointer_needed\n+\t\t   ? hard_frame_pointer_rtx\n+\t\t   : stack_pointer_rtx));\n }\n \n /* Generate a DW_AT_name attribute given some string value to be included as"}]}