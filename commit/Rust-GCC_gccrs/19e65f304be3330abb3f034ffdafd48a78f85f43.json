{"sha": "19e65f304be3330abb3f034ffdafd48a78f85f43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTllNjVmMzA0YmUzMzMwYWJiM2YwMzRmZmRhZmQ0OGE3OGY4NWY0Mw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2006-01-04T18:48:38Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-01-04T18:48:38Z"}, "message": "re PR c++/24782 (wrongly accepted nested private typedef)\n\n\tPR c++/24782\n\t* parser.c (cp_parser_nested_name_specifier_opt): Preserve access\n\tchecks, even when parsing tentatively.\n\tPR c++/24782\n\t* g++.dg/parse/access9.C: New test.\n\t* g++.dg/tc1/dr52.C: Tweak error markers.\n\nFrom-SVN: r109342", "tree": {"sha": "e994e033726106d952196e298be9dbd809ea0100", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e994e033726106d952196e298be9dbd809ea0100"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19e65f304be3330abb3f034ffdafd48a78f85f43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19e65f304be3330abb3f034ffdafd48a78f85f43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19e65f304be3330abb3f034ffdafd48a78f85f43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19e65f304be3330abb3f034ffdafd48a78f85f43/comments", "author": null, "committer": null, "parents": [{"sha": "2fb13888768c8d03adf4821b6e87e9ec737bbf81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fb13888768c8d03adf4821b6e87e9ec737bbf81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fb13888768c8d03adf4821b6e87e9ec737bbf81"}], "stats": {"total": 47, "additions": 34, "deletions": 13}, "files": [{"sha": "4487eba9c591563deb0682f9095ce3b49fe7e31f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e65f304be3330abb3f034ffdafd48a78f85f43/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e65f304be3330abb3f034ffdafd48a78f85f43/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=19e65f304be3330abb3f034ffdafd48a78f85f43", "patch": "@@ -1,3 +1,9 @@\n+2006-01-04  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/24782\n+\t* parser.c (cp_parser_nested_name_specifier_opt): Preserve access\n+\tchecks, even when parsing tentatively.\n+\n 2006-01-04  Richard Henderson  <rth@redhat.com>\n \n \tMerge from gomp branch."}, {"sha": "13aa29a08559f5688da9f88e526945c479ce6691", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e65f304be3330abb3f034ffdafd48a78f85f43/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e65f304be3330abb3f034ffdafd48a78f85f43/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=19e65f304be3330abb3f034ffdafd48a78f85f43", "patch": "@@ -3517,7 +3517,6 @@ cp_parser_nested_name_specifier_opt (cp_parser *parser,\n \t\t\t\t     bool is_declaration)\n {\n   bool success = false;\n-  tree access_check = NULL_TREE;\n   cp_token_position start = 0;\n   cp_token *token;\n \n@@ -3537,9 +3536,10 @@ cp_parser_nested_name_specifier_opt (cp_parser *parser,\n \n   /* Remember where the nested-name-specifier starts.  */\n   if (cp_parser_uncommitted_to_tentative_parse_p (parser))\n-    start = cp_lexer_token_position (parser->lexer, false);\n-\n-  push_deferring_access_checks (dk_deferred);\n+    {\n+      start = cp_lexer_token_position (parser->lexer, false);\n+      push_deferring_access_checks (dk_deferred);\n+    }\n \n   while (true)\n     {\n@@ -3718,30 +3718,34 @@ cp_parser_nested_name_specifier_opt (cp_parser *parser,\n       parser->scope = new_scope;\n     }\n \n-  /* Retrieve any deferred checks.  Do not pop this access checks yet\n-     so the memory will not be reclaimed during token replacing below.  */\n-  access_check = get_deferred_access_checks ();\n-\n   /* If parsing tentatively, replace the sequence of tokens that makes\n      up the nested-name-specifier with a CPP_NESTED_NAME_SPECIFIER\n      token.  That way, should we re-parse the token stream, we will\n      not have to repeat the effort required to do the parse, nor will\n      we issue duplicate error messages.  */\n   if (success && start)\n     {\n-      cp_token *token = cp_lexer_token_at (parser->lexer, start);\n+      cp_token *token;\n+      tree access_checks;\n \n+      token = cp_lexer_token_at (parser->lexer, start);\n       /* Reset the contents of the START token.  */\n       token->type = CPP_NESTED_NAME_SPECIFIER;\n-      token->value = build_tree_list (access_check, parser->scope);\n+      /* Retrieve any deferred checks.  Do not pop this access checks yet\n+\t so the memory will not be reclaimed during token replacing below.  */\n+      access_checks = get_deferred_access_checks ();\n+      token->value = build_tree_list (copy_list (access_checks),\n+\t\t\t\t      parser->scope);\n       TREE_TYPE (token->value) = parser->qualifying_scope;\n       token->keyword = RID_MAX;\n \n       /* Purge all subsequent tokens.  */\n       cp_lexer_purge_tokens_after (parser->lexer, start);\n     }\n+  \n+  if (start)\n+    pop_to_parent_deferring_access_checks ();\n \n-  pop_deferring_access_checks ();\n   return success ? parser->scope : NULL_TREE;\n }\n "}, {"sha": "6ec417fb7df4f0468e5b16c61215c97b98b294b7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e65f304be3330abb3f034ffdafd48a78f85f43/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e65f304be3330abb3f034ffdafd48a78f85f43/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=19e65f304be3330abb3f034ffdafd48a78f85f43", "patch": "@@ -1,3 +1,9 @@\n+2006-01-04  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/24782\n+\t* g++.dg/parse/access9.C: New test.\n+\t* g++.dg/tc1/dr52.C: Tweak error markers.\n+\n 2006-01-04  Richard Henderson  <rth@redhat.com>\n \n \tMerge from gomp branch."}, {"sha": "2c29016b0479df28786aff3ca5d76990a64bb095", "filename": "gcc/testsuite/g++.dg/parse/access9.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e65f304be3330abb3f034ffdafd48a78f85f43/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Faccess9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e65f304be3330abb3f034ffdafd48a78f85f43/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Faccess9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Faccess9.C?ref=19e65f304be3330abb3f034ffdafd48a78f85f43", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/24782\n+\n+class Foo { public:  typedef int type1; };\n+class Bar { private: typedef Foo type2; }; // { dg-error \"private\" } \n+void g(Bar::type2::type1) {} // { dg-error \"context\" }"}, {"sha": "4f4015dc958dd91be517153002d2c787fa85a7a3", "filename": "gcc/testsuite/g++.dg/tc1/dr52.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19e65f304be3330abb3f034ffdafd48a78f85f43/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr52.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19e65f304be3330abb3f034ffdafd48a78f85f43/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr52.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr52.C?ref=19e65f304be3330abb3f034ffdafd48a78f85f43", "patch": "@@ -17,7 +17,7 @@ struct B1 : B {};\n struct B2 : B {};\n \n struct C\n-{\n+{ // { dg-error \"C\" }\n   void foo(void);\n };\n \n@@ -29,6 +29,6 @@ public:\n   void bar(void)\n   {\n     this->B::foo();  // { dg-error \"\" }\n-    this->C::foo();  // { dg-error \"\" }\n+    this->C::foo();  // { dg-error \"inaccessible|context\" }\n   }\n };"}]}