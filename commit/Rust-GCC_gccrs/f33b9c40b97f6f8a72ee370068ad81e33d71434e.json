{"sha": "f33b9c40b97f6f8a72ee370068ad81e33d71434e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMzYjljNDBiOTdmNmY4YTcyZWUzNzAwNjhhZDgxZTMzZDcxNDM0ZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-07-29T08:52:56Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-07-29T08:52:56Z"}, "message": "Prevent tree-ssa-dce.c from deleting stores at -Og\n\nDCE tries to delete dead stores to local data and also tries to insert\ndebug binds for simple cases:\n\n  /* If this is a store into a variable that is being optimized away,\n     add a debug bind stmt if possible.  */\n  if (MAY_HAVE_DEBUG_BIND_STMTS\n      && gimple_assign_single_p (stmt)\n      && is_gimple_val (gimple_assign_rhs1 (stmt)))\n    {\n      tree lhs = gimple_assign_lhs (stmt);\n      if ((VAR_P (lhs) || TREE_CODE (lhs) == PARM_DECL)\n\t  && !DECL_IGNORED_P (lhs)\n\t  && is_gimple_reg_type (TREE_TYPE (lhs))\n\t  && !is_global_var (lhs)\n\t  && !DECL_HAS_VALUE_EXPR_P (lhs))\n\t{\n\t  tree rhs = gimple_assign_rhs1 (stmt);\n\t  gdebug *note\n\t    = gimple_build_debug_bind (lhs, unshare_expr (rhs), stmt);\n\t  gsi_insert_after (i, note, GSI_SAME_STMT);\n\t}\n    }\n\nBut this doesn't help for things like \"print *ptr\" when ptr points\nto the local variable (tests Og-dce-1.c and Og-dce-2.c).  It can\nalso introduce wrong debug info for earlier references (second test\nin Og-dce-3.c) or make earlier references unavailable (first test\nin Og-dce-3.c).\n\nSo for -Og I think it'd be better not to delete any stmts with\nvdefs for now.  This also means that we can avoid the potentially\nexpensive vop walks (which already have a cut-off, but still).\n\nThe patch also fixes the Og failures in gcc.dg/guality/pr54970.c\n(PR 86638).\n\n2019-07-29  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR debug/86638\n\t* tree-ssa-dce.c (keep_all_vdefs_p): New function.\n\t(mark_stmt_if_obviously_necessary): Mark all stmts with vdefs as\n\tnecessary if keep_all_vdefs_p is true.\n\t(mark_aliased_reaching_defs_necessary): Add a gcc_checking_assert\n\tthat keep_all_vdefs_p is false.\n\t(mark_all_reaching_defs_necessary): Likewise.\n\t(propagate_necessity): Skip the vuse scan if keep_all_vdefs_p is true.\n\ngcc/testsuite/\n\t* c-c++-common/guality/Og-dce-1.c: New test.\n\t* c-c++-common/guality/Og-dce-2.c: Likewise.\n\t* c-c++-common/guality/Og-dce-3.c: Likewise.\n\nFrom-SVN: r273872", "tree": {"sha": "10ac13a84d0dcc56a8c8301920d1f2671bc0b93b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10ac13a84d0dcc56a8c8301920d1f2671bc0b93b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f33b9c40b97f6f8a72ee370068ad81e33d71434e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f33b9c40b97f6f8a72ee370068ad81e33d71434e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f33b9c40b97f6f8a72ee370068ad81e33d71434e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f33b9c40b97f6f8a72ee370068ad81e33d71434e/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c0fe6bce2a8c35e997f45b0a674ab2058ba50ae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0fe6bce2a8c35e997f45b0a674ab2058ba50ae0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0fe6bce2a8c35e997f45b0a674ab2058ba50ae0"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "8cd321ea61b3e8e8b4bb1c87120d28f075c84585", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33b9c40b97f6f8a72ee370068ad81e33d71434e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33b9c40b97f6f8a72ee370068ad81e33d71434e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f33b9c40b97f6f8a72ee370068ad81e33d71434e", "patch": "@@ -1,3 +1,14 @@\n+2019-07-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR debug/86638\n+\t* tree-ssa-dce.c (keep_all_vdefs_p): New function.\n+\t(mark_stmt_if_obviously_necessary): Mark all stmts with vdefs as\n+\tnecessary if keep_all_vdefs_p is true.\n+\t(mark_aliased_reaching_defs_necessary): Add a gcc_checking_assert\n+\tthat keep_all_vdefs_p is false.\n+\t(mark_all_reaching_defs_necessary): Likewise.\n+\t(propagate_necessity): Skip the vuse scan if keep_all_vdefs_p is true.\n+\n 2019-07-29  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* common.opt (Og): Change the initial value of flag_dse to 0."}, {"sha": "cc1aadfac553f30374536e1238f10edffa8a5631", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33b9c40b97f6f8a72ee370068ad81e33d71434e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33b9c40b97f6f8a72ee370068ad81e33d71434e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f33b9c40b97f6f8a72ee370068ad81e33d71434e", "patch": "@@ -1,3 +1,9 @@\n+2019-07-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* c-c++-common/guality/Og-dce-1.c: New test.\n+\t* c-c++-common/guality/Og-dce-2.c: Likewise.\n+\t* c-c++-common/guality/Og-dce-3.c: Likewise.\n+\n 2019-07-29  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* c-c++-common/guality/Og-global-dse-1.c: New test."}, {"sha": "a859e32521a2d184a83b4ebf9250b7dee31e2986", "filename": "gcc/testsuite/c-c++-common/guality/Og-dce-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33b9c40b97f6f8a72ee370068ad81e33d71434e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fguality%2FOg-dce-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33b9c40b97f6f8a72ee370068ad81e33d71434e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fguality%2FOg-dce-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fguality%2FOg-dce-1.c?ref=f33b9c40b97f6f8a72ee370068ad81e33d71434e", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-g\" } */\n+\n+int *__attribute__((noipa)) consume (int *ptr) { return ptr; }\n+\n+int\n+main (void)\n+{\n+  int x;\n+  int *volatile ptr = consume (&x);\n+  x = 0;\n+  x = 1;\t/* { dg-final { gdb-test . \"*ptr\" \"0\" } } */\n+  return 0;\t/* { dg-final { gdb-test . \"*ptr\" \"1\" } } */\n+}"}, {"sha": "3df2c792193a89342d6b147a60641fbc27722e93", "filename": "gcc/testsuite/c-c++-common/guality/Og-dce-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33b9c40b97f6f8a72ee370068ad81e33d71434e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fguality%2FOg-dce-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33b9c40b97f6f8a72ee370068ad81e33d71434e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fguality%2FOg-dce-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fguality%2FOg-dce-2.c?ref=f33b9c40b97f6f8a72ee370068ad81e33d71434e", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-options \"-g\" } */\n+\n+struct s { int a, b, c, d; };\n+\n+struct s gs1 = { 1, 2, 3, 4 };\n+struct s gs2 = { 5, 6, 7, 8 };\n+\n+struct s *__attribute__((noipa)) consume (struct s *ptr) { return ptr; }\n+\n+int\n+main (void)\n+{\n+  struct s x;\n+  struct s *volatile ptr = consume (&x);\n+  x = gs1;\n+  x = gs2;\t/* { dg-final { gdb-test . \"ptr->a\" \"1\" } } */\n+  return 0;\t/* { dg-final { gdb-test . \"ptr->a\" \"5\" } } */\n+}"}, {"sha": "fa6186a7394495795e0e6bef8f7aacac9bbf96c4", "filename": "gcc/testsuite/c-c++-common/guality/Og-dce-3.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33b9c40b97f6f8a72ee370068ad81e33d71434e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fguality%2FOg-dce-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33b9c40b97f6f8a72ee370068ad81e33d71434e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fguality%2FOg-dce-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fguality%2FOg-dce-3.c?ref=f33b9c40b97f6f8a72ee370068ad81e33d71434e", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-options \"-g\" } */\n+\n+volatile int amount = 10;\n+\n+void __attribute__((noipa))\n+do_something (int *ptr)\n+{\n+  *ptr += 10;\n+}\n+\n+int __attribute__((noipa))\n+foo (int count)\n+{\n+  int x = 1;\n+  for (int i = 0; i < count; ++i)\n+    do_something (&x); /* { dg-final { gdb-test . \"x\" \"1\" } } */\n+  int res = x; /* { dg-final { gdb-test . \"x\" \"101\" } } */\n+  x = res + 1;\n+  return res; /* { dg-final { gdb-test . \"x\" \"102\" } } */\n+  \n+}\n+\n+int\n+main (void)\n+{\n+  foo (10);\n+  return 0;\n+}"}, {"sha": "17a8d5e2eee8d0dd9cf1ba2cfe7eb2991010357b", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33b9c40b97f6f8a72ee370068ad81e33d71434e/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33b9c40b97f6f8a72ee370068ad81e33d71434e/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=f33b9c40b97f6f8a72ee370068ad81e33d71434e", "patch": "@@ -115,6 +115,14 @@ static bool cfg_altered;\n static int *bb_postorder;\n \n \n+/* True if we should treat any stmt with a vdef as necessary.  */\n+\n+static inline bool\n+keep_all_vdefs_p ()\n+{\n+  return optimize_debug;\n+}\n+\n /* If STMT is not already marked necessary, mark it, and add it to the\n    worklist if ADD_TO_WORKLIST is true.  */\n \n@@ -317,6 +325,12 @@ mark_stmt_if_obviously_necessary (gimple *stmt, bool aggressive)\n       return;\n     }\n \n+  if (gimple_vdef (stmt) && keep_all_vdefs_p ())\n+    {\n+      mark_stmt_necessary (stmt, true);\n+      return;\n+    }\n+\n   return;\n }\n \n@@ -532,6 +546,9 @@ mark_aliased_reaching_defs_necessary_1 (ao_ref *ref, tree vdef, void *data)\n static void\n mark_aliased_reaching_defs_necessary (gimple *stmt, tree ref)\n {\n+  /* Should have been caught before calling this function.  */\n+  gcc_checking_assert (!keep_all_vdefs_p ());\n+\n   unsigned int chain;\n   ao_ref refd;\n   gcc_assert (!chain_ovfl);\n@@ -610,6 +627,8 @@ mark_all_reaching_defs_necessary_1 (ao_ref *ref ATTRIBUTE_UNUSED,\n static void\n mark_all_reaching_defs_necessary (gimple *stmt)\n {\n+  /* Should have been caught before calling this function.  */\n+  gcc_checking_assert (!keep_all_vdefs_p ());\n   walk_aliased_vdefs (NULL, gimple_vuse (stmt),\n \t\t      mark_all_reaching_defs_necessary_1, NULL, &visited);\n }\n@@ -813,6 +832,10 @@ propagate_necessity (bool aggressive)\n \t  if (!use)\n \t    continue;\n \n+\t  /* No need to search for vdefs if we intrinsicly keep them all.  */\n+\t  if (keep_all_vdefs_p ())\n+\t    continue;\n+\n \t  /* If we dropped to simple mode make all immediately\n \t     reachable definitions necessary.  */\n \t  if (chain_ovfl)"}]}