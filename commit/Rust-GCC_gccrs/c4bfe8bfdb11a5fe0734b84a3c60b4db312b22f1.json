{"sha": "c4bfe8bfdb11a5fe0734b84a3c60b4db312b22f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRiZmU4YmZkYjExYTVmZTA3MzRiODRhM2M2MGI0ZGIzMTJiMjJmMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-02-13T20:47:39Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-02-13T20:47:39Z"}, "message": "asan.c (create_cond_insert_point): Add create_then_fallthru_edge argument.\n\n\t* asan.c (create_cond_insert_point): Add create_then_fallthru_edge\n\targument.  If it is false, don't create edge from then_bb to\n\tfallthru_bb.\n\t(insert_if_then_before_iter): Pass true to it.\n\t(build_check_stmt): Pass false to it.\n\t(transform_statements): Flush hash table only on extended basic\n\tblock boundaries, rather than at the beginning of every bb.\n\tDon't flush hash table on nonfreeing_call_p calls.\n\t* tree-flow.h (nonfreeing_call_p): New prototype.\n\t* tree-ssa-phiopt.c (nonfreeing_call_p): No longer static.\n\nFrom-SVN: r196029", "tree": {"sha": "c169eabab6c01a54a69fc9413c4019ef7aaa3d74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c169eabab6c01a54a69fc9413c4019ef7aaa3d74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4bfe8bfdb11a5fe0734b84a3c60b4db312b22f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4bfe8bfdb11a5fe0734b84a3c60b4db312b22f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4bfe8bfdb11a5fe0734b84a3c60b4db312b22f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4bfe8bfdb11a5fe0734b84a3c60b4db312b22f1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7afe28013fa88a06d0e3564dcf9e8ee5cb06c0e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7afe28013fa88a06d0e3564dcf9e8ee5cb06c0e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7afe28013fa88a06d0e3564dcf9e8ee5cb06c0e1"}], "stats": {"total": 55, "additions": 46, "deletions": 9}, "files": [{"sha": "4dd2753a72aaf06bfb385bfb5e0ed65ca3f86421", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4bfe8bfdb11a5fe0734b84a3c60b4db312b22f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4bfe8bfdb11a5fe0734b84a3c60b4db312b22f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4bfe8bfdb11a5fe0734b84a3c60b4db312b22f1", "patch": "@@ -1,3 +1,16 @@\n+2013-02-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* asan.c (create_cond_insert_point): Add create_then_fallthru_edge\n+\targument.  If it is false, don't create edge from then_bb to\n+\tfallthru_bb.\n+\t(insert_if_then_before_iter): Pass true to it.\n+\t(build_check_stmt): Pass false to it.\n+\t(transform_statements): Flush hash table only on extended basic\n+\tblock boundaries, rather than at the beginning of every bb.\n+\tDon't flush hash table on nonfreeing_call_p calls.\n+\t* tree-flow.h (nonfreeing_call_p): New prototype.\n+\t* tree-ssa-phiopt.c (nonfreeing_call_p): No longer static.\n+\n 2013-02-13  David S. Miller  <davem@davemloft.net>\n \n \t* expmed.c (expand_shift_1): Only strip scalar integer subregs."}, {"sha": "9e22c42743b02f4be3e99ad14fc1071529298273", "filename": "gcc/asan.c", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4bfe8bfdb11a5fe0734b84a3c60b4db312b22f1/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4bfe8bfdb11a5fe0734b84a3c60b4db312b22f1/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=c4bfe8bfdb11a5fe0734b84a3c60b4db312b22f1", "patch": "@@ -1185,6 +1185,9 @@ report_error_func (bool is_store, int size_in_bytes)\n    'then block' of the condition statement to be inserted by the\n    caller.\n \n+   If CREATE_THEN_FALLTHRU_EDGE is false, no edge will be created from\n+   *THEN_BLOCK to *FALLTHROUGH_BLOCK.\n+\n    Similarly, the function will set *FALLTRHOUGH_BLOCK to the 'else\n    block' of the condition statement to be inserted by the caller.\n \n@@ -1201,6 +1204,7 @@ static gimple_stmt_iterator\n create_cond_insert_point (gimple_stmt_iterator *iter,\n \t\t\t  bool before_p,\n \t\t\t  bool then_more_likely_p,\n+\t\t\t  bool create_then_fallthru_edge,\n \t\t\t  basic_block *then_block,\n \t\t\t  basic_block *fallthrough_block)\n {\n@@ -1226,7 +1230,8 @@ create_cond_insert_point (gimple_stmt_iterator *iter,\n     ? PROB_VERY_UNLIKELY\n     : PROB_ALWAYS - PROB_VERY_UNLIKELY;\n   e->probability = PROB_ALWAYS - fallthrough_probability;\n-  make_single_succ_edge (then_bb, fallthru_bb, EDGE_FALLTHRU);\n+  if (create_then_fallthru_edge)\n+    make_single_succ_edge (then_bb, fallthru_bb, EDGE_FALLTHRU);\n \n   /* Set up the fallthrough basic block.  */\n   e = find_edge (cond_bb, fallthru_bb);\n@@ -1277,6 +1282,7 @@ insert_if_then_before_iter (gimple cond,\n     create_cond_insert_point (iter,\n \t\t\t      /*before_p=*/true,\n \t\t\t      then_more_likely_p,\n+\t\t\t      /*create_then_fallthru_edge=*/true,\n \t\t\t      then_bb,\n \t\t\t      fallthrough_bb);\n   gsi_insert_after (&cond_insert_point, cond, GSI_NEW_STMT);\n@@ -1314,6 +1320,7 @@ build_check_stmt (location_t location, tree base, gimple_stmt_iterator *iter,\n      statement for the instrumentation.  */\n   gsi = create_cond_insert_point (iter, before_p,\n \t\t\t\t  /*then_more_likely_p=*/false,\n+\t\t\t\t  /*create_then_fallthru_edge=*/false,\n \t\t\t\t  &then_bb,\n \t\t\t\t  &else_bb);\n \n@@ -1883,15 +1890,31 @@ maybe_instrument_call (gimple_stmt_iterator *iter)\n static void\n transform_statements (void)\n {\n-  basic_block bb;\n+  basic_block bb, last_bb = NULL;\n   gimple_stmt_iterator i;\n   int saved_last_basic_block = last_basic_block;\n \n   FOR_EACH_BB (bb)\n     {\n-      empty_mem_ref_hash_table ();\n+      basic_block prev_bb = bb;\n \n       if (bb->index >= saved_last_basic_block) continue;\n+\n+      /* Flush the mem ref hash table, if current bb doesn't have\n+\t exactly one predecessor, or if that predecessor (skipping\n+\t over asan created basic blocks) isn't the last processed\n+\t basic block.  Thus we effectively flush on extended basic\n+\t block boundaries.  */\n+      while (single_pred_p (prev_bb))\n+\t{\n+\t  prev_bb = single_pred (prev_bb);\n+\t  if (prev_bb->index < saved_last_basic_block)\n+\t    break;\n+\t}\n+      if (prev_bb != last_bb)\n+\tempty_mem_ref_hash_table ();\n+      last_bb = bb;\n+\n       for (i = gsi_start_bb (bb); !gsi_end_p (i);)\n \t{\n \t  gimple s = gsi_stmt (i);\n@@ -1909,11 +1932,11 @@ transform_statements (void)\n \t    {\n \t      /* No instrumentation happened.\n \n-\t\t If the current instruction is a function call, let's\n-\t\t forget about the memory references that got\n-\t\t instrumented.  Otherwise we might miss some\n-\t\t instrumentation opportunities.  */\n-\t      if (is_gimple_call (s))\n+\t\t If the current instruction is a function call that\n+\t\t might free something, let's forget about the memory\n+\t\t references that got instrumented.  Otherwise we might\n+\t\t miss some instrumentation opportunities.  */\n+\t      if (is_gimple_call (s) && !nonfreeing_call_p (s))\n \t\tempty_mem_ref_hash_table ();\n \n \t      gsi_next (&i);"}, {"sha": "80cb2945dcedf1eb057e5c9f6cb3a3525fe07e8a", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4bfe8bfdb11a5fe0734b84a3c60b4db312b22f1/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4bfe8bfdb11a5fe0734b84a3c60b4db312b22f1/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=c4bfe8bfdb11a5fe0734b84a3c60b4db312b22f1", "patch": "@@ -609,6 +609,7 @@ struct tree_niter_desc\n /* In tree-ssa-phiopt.c */\n bool empty_block_p (basic_block);\n basic_block *blocks_in_phiopt_order (void);\n+bool nonfreeing_call_p (gimple);\n \n /* In tree-ssa-loop*.c  */\n "}, {"sha": "300016f7a0b14c7aa5cb0ec549c27064b3a19d08", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4bfe8bfdb11a5fe0734b84a3c60b4db312b22f1/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4bfe8bfdb11a5fe0734b84a3c60b4db312b22f1/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=c4bfe8bfdb11a5fe0734b84a3c60b4db312b22f1", "patch": "@@ -1339,7 +1339,7 @@ add_or_mark_expr (basic_block bb, tree exp,\n \n /* Return true when CALL is a call stmt that definitely doesn't\n    free any memory or makes it unavailable otherwise.  */\n-static bool\n+bool\n nonfreeing_call_p (gimple call)\n {\n   if (gimple_call_builtin_p (call, BUILT_IN_NORMAL)"}]}