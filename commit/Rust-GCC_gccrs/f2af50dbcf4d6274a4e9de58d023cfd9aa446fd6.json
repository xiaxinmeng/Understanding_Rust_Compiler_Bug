{"sha": "f2af50dbcf4d6274a4e9de58d023cfd9aa446fd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJhZjUwZGJjZjRkNjI3NGE0ZTlkZTU4ZDAyM2NmZDlhYTQ0NmZkNg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-12-21T04:37:24Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-12-21T04:37:24Z"}, "message": "re PR java/5057 (gcj -C erroneously omits <clinit>)\n\n\tFixes PR java/5057:\n\t* parse.y (analyze_clinit_body): Added this_class parameter.\n\tCheck for more cases where we must keep <clinit>.\n\t(maybe_yank_clinit): Cleaned up flow control.\n\nFrom-SVN: r48231", "tree": {"sha": "7b7487d3545c0d8b4a785eeedac618ecb64eadd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b7487d3545c0d8b4a785eeedac618ecb64eadd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2af50dbcf4d6274a4e9de58d023cfd9aa446fd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2af50dbcf4d6274a4e9de58d023cfd9aa446fd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2af50dbcf4d6274a4e9de58d023cfd9aa446fd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2af50dbcf4d6274a4e9de58d023cfd9aa446fd6/comments", "author": null, "committer": null, "parents": [{"sha": "7be33370370576182eaf875e3dec337d96811e45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7be33370370576182eaf875e3dec337d96811e45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7be33370370576182eaf875e3dec337d96811e45"}], "stats": {"total": 46, "additions": 27, "deletions": 19}, "files": [{"sha": "666c441fcbcfae90adeded28709f46cc6e090495", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2af50dbcf4d6274a4e9de58d023cfd9aa446fd6/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2af50dbcf4d6274a4e9de58d023cfd9aa446fd6/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=f2af50dbcf4d6274a4e9de58d023cfd9aa446fd6", "patch": "@@ -1,3 +1,10 @@\n+2001-12-20  Tom Tromey  <tromey@redhat.com>\n+\n+\tFixes PR java/5057:\n+\t* parse.y (analyze_clinit_body): Added this_class parameter.\n+\tCheck for more cases where we must keep <clinit>.\n+\t(maybe_yank_clinit): Cleaned up flow control.\n+\n 2001-12-20  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n \t* decl.c (java_init_decl_processing): Don't initialize "}, {"sha": "aeec7590ce3f6fa791d178de5b1ed96ef408e98e", "filename": "gcc/java/parse.y", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2af50dbcf4d6274a4e9de58d023cfd9aa446fd6/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2af50dbcf4d6274a4e9de58d023cfd9aa446fd6/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=f2af50dbcf4d6274a4e9de58d023cfd9aa446fd6", "patch": "@@ -141,7 +141,7 @@ static tree obtain_incomplete_type PARAMS ((tree));\n static tree java_complete_lhs PARAMS ((tree));\n static tree java_complete_tree PARAMS ((tree));\n static tree maybe_generate_pre_expand_clinit PARAMS ((tree));\n-static int analyze_clinit_body PARAMS ((tree));\n+static int analyze_clinit_body PARAMS ((tree, tree));\n static int maybe_yank_clinit PARAMS ((tree));\n static void start_complete_expand_method PARAMS ((tree));\n static void java_complete_expand_method PARAMS ((tree));\n@@ -7793,8 +7793,8 @@ maybe_generate_pre_expand_clinit (class_type)\n    MODIFY_EXPR with a constant value.  */\n \n static int\n-analyze_clinit_body (bbody)\n-     tree bbody;\n+analyze_clinit_body (this_class, bbody)\n+     tree this_class, bbody;\n {\n   while (bbody)\n     switch (TREE_CODE (bbody))\n@@ -7808,7 +7808,7 @@ analyze_clinit_body (bbody)\n \tbreak;\n \t\n       case COMPOUND_EXPR:\n-\tif (analyze_clinit_body (TREE_OPERAND (bbody, 0)))\n+\tif (analyze_clinit_body (this_class, TREE_OPERAND (bbody, 0)))\n \t  return 1;\n \tbbody = TREE_OPERAND (bbody, 1);\n \tbreak;\n@@ -7819,8 +7819,16 @@ analyze_clinit_body (bbody)\n \tif (TREE_CODE (TREE_OPERAND (bbody, 1)) == NEW_ARRAY_INIT\n \t    && flag_emit_class_files)\n \t  return 1;\n-\t/* Return 0 if the operand is constant, 1 otherwise.  */\n-\treturn ! TREE_CONSTANT (TREE_OPERAND (bbody, 1));\n+\n+\t/* There are a few cases where we're required to keep\n+\t   <clinit>:\n+\t   - If this is an assignment whose operand is not constant,\n+\t   - If this is an assignment to a non-initialized field,\n+\t   - If this field is not a member of the current class.\n+\t*/\n+\treturn (! TREE_CONSTANT (TREE_OPERAND (bbody, 1))\n+\t\t|| ! DECL_INITIAL (TREE_OPERAND (bbody, 0))\n+\t\t|| DECL_CONTEXT (TREE_OPERAND (bbody, 0)) != this_class);\n \n       default:\n \treturn 1;\n@@ -7839,7 +7847,6 @@ maybe_yank_clinit (mdecl)\n {\n   tree type, current;\n   tree fbody, bbody;\n-  int found = 0;\n   \n   if (!DECL_CLINIT_P (mdecl))\n     return 0;\n@@ -7855,7 +7862,7 @@ maybe_yank_clinit (mdecl)\n     return 0;\n   if (bbody && ! flag_emit_class_files && bbody != empty_stmt_node)\n     return 0;\n-  \n+\n   type = DECL_CONTEXT (mdecl);\n   current = TYPE_FIELDS (type);\n \n@@ -7864,13 +7871,12 @@ maybe_yank_clinit (mdecl)\n     {\n       tree f_init;\n \n-      /* We're not interested in non static field */\n+      /* We're not interested in non-static fields.  */\n       if (!FIELD_STATIC (current))\n \tcontinue;\n \n-      /* nor in fields with initializers. */\n+      /* Nor in fields without initializers. */\n       f_init = DECL_INITIAL (current);\n-\n       if (f_init == NULL_TREE)\n \tcontinue;\n \n@@ -7880,20 +7886,15 @@ maybe_yank_clinit (mdecl)\n \t correctly. */\n       if (! JSTRING_TYPE_P (TREE_TYPE (current))\n \t  && ! JNUMERIC_TYPE_P (TREE_TYPE (current)))\n-\tbreak;\n+\treturn 0;\n \n       if (! FIELD_FINAL (current) || ! TREE_CONSTANT (f_init))\n-\tbreak;\n+\treturn 0;\n     }\n \n   /* Now we analyze the method body and look for something that\n      isn't a MODIFY_EXPR */\n-  if (bbody == empty_stmt_node)\n-    found = 0;\n-  else\n-    found = analyze_clinit_body (bbody);\n-\n-  if (current || found)\n+  if (bbody != empty_stmt_node && analyze_clinit_body (type, bbody))\n     return 0;\n \n   /* Get rid of <clinit> in the class' list of methods */"}]}