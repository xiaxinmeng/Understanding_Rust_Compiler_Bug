{"sha": "5ba3ae6db5a599b3b8d3eaf500c47f447b36babf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJhM2FlNmRiNWE1OTliM2I4ZDNlYWY1MDBjNDdmNDQ3YjM2YmFiZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-05-21T13:23:41Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-05-21T13:23:41Z"}, "message": "re PR c++/66211 (Rvalue conversion in ternary operator causes internal compiler error)\n\n2015-05-21  Richard Biener  <rguenther@suse.de>\n\n\tPR c++/66211\n\t* match.pd: Guard pattern optimzing (int)(float)int\n\tconversions to apply only on GIMPLE.\n\n\t* g++.dg/conversion/pr66211.C: New testcase.\n\t* gcc.dg/tree-ssa/forwprop-18.c: Adjust.\n\nFrom-SVN: r223483", "tree": {"sha": "a38c2b2cacc71e52c0cc086b402691fb13a837b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a38c2b2cacc71e52c0cc086b402691fb13a837b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ba3ae6db5a599b3b8d3eaf500c47f447b36babf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ba3ae6db5a599b3b8d3eaf500c47f447b36babf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ba3ae6db5a599b3b8d3eaf500c47f447b36babf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ba3ae6db5a599b3b8d3eaf500c47f447b36babf/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ca46a7753d416f7f5610f82cca7f89683bf4da0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ca46a7753d416f7f5610f82cca7f89683bf4da0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ca46a7753d416f7f5610f82cca7f89683bf4da0"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "af2225b159583bdac8241ba173d516b1fc5e026d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ba3ae6db5a599b3b8d3eaf500c47f447b36babf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ba3ae6db5a599b3b8d3eaf500c47f447b36babf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ba3ae6db5a599b3b8d3eaf500c47f447b36babf", "patch": "@@ -1,3 +1,9 @@\n+2015-05-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c++/66211\n+\t* match.pd: Guard pattern optimzing (int)(float)int\n+\tconversions to apply only on GIMPLE.\n+\n 2015-05-21  Jeff Law  <law@redhat.com>\n \n \t* combine.c (find_split_point): Handle ASHIFT like MULT to encourage"}, {"sha": "ce628531136bc68ed0730cb19e115b9349a3a53c", "filename": "gcc/match.pd", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ba3ae6db5a599b3b8d3eaf500c47f447b36babf/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ba3ae6db5a599b3b8d3eaf500c47f447b36babf/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=5ba3ae6db5a599b3b8d3eaf500c47f447b36babf", "patch": "@@ -791,7 +791,8 @@ along with GCC; see the file COPYING3.  If not see\n    /* If we are converting an integer to a floating-point that can\n       represent it exactly and back to an integer, we can skip the\n       floating-point conversion.  */\n-   (if (inside_int && inter_float && final_int &&\n+   (if (GIMPLE /* PR66211 */\n+\t&& inside_int && inter_float && final_int &&\n \t(unsigned) significand_size (TYPE_MODE (inter_type))\n \t>= inside_prec - !inside_unsignedp)\n     (convert @0))))))"}, {"sha": "e681453384859874066287d0e374e416a7d15e18", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ba3ae6db5a599b3b8d3eaf500c47f447b36babf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ba3ae6db5a599b3b8d3eaf500c47f447b36babf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5ba3ae6db5a599b3b8d3eaf500c47f447b36babf", "patch": "@@ -1,3 +1,9 @@\n+2015-05-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c++/66211\n+\t* g++.dg/conversion/pr66211.C: New testcase.\n+\t* gcc.dg/tree-ssa/forwprop-18.c: Adjust.\n+\n 2015-05-21  Jeff Law  <law@redhat.com>\n \n \t* gcc.target/hppa/shadd-2.c: New test."}, {"sha": "49d2478888aa6029cb8ccd7b4a8b2cd964819135", "filename": "gcc/testsuite/g++.dg/conversion/pr66211.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ba3ae6db5a599b3b8d3eaf500c47f447b36babf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fpr66211.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ba3ae6db5a599b3b8d3eaf500c47f447b36babf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fpr66211.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fpr66211.C?ref=5ba3ae6db5a599b3b8d3eaf500c47f447b36babf", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/66211\n+// { dg-do compile }\n+\n+void f(int&){}\n+\n+int main()\n+{\n+  int x = 0;\n+  double y = 1;\n+  f(1 > 0 ? x : y); // { dg-error \"from an rvalue\" }\n+}"}, {"sha": "b0445fd20fb700a1a77cae9c8ea92ff846e909e3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-18.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ba3ae6db5a599b3b8d3eaf500c47f447b36babf/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ba3ae6db5a599b3b8d3eaf500c47f447b36babf/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-18.c?ref=5ba3ae6db5a599b3b8d3eaf500c47f447b36babf", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-forwprop1\" } */\n+/* { dg-options \"-O -fdump-tree-cddce1\" } */\n \n signed char f1(signed char n)\n {\n@@ -19,6 +19,6 @@ signed char g2(unsigned long long n)\n   return (float)n;\n }\n \n-/* { dg-final { scan-tree-dump-times \"\\\\\\(float\\\\\\)\" 2 \"forwprop1\" } } */\n-/* { dg-final { scan-tree-dump-not \"\\\\\\(long double\\\\\\)\" \"forwprop1\" } } */\n-/* { dg-final { cleanup-tree-dump \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\\\(float\\\\\\)\" 2 \"cddce1\" } } */\n+/* { dg-final { scan-tree-dump-not \"\\\\\\(long double\\\\\\)\" \"cddce1\" } } */\n+/* { dg-final { cleanup-tree-dump \"cddce1\" } } */"}]}