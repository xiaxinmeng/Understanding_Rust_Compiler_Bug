{"sha": "c77f556741ded4aa868f851ea32f9732602b0ea9", "node_id": "C_kwDOANBUbNoAKGM3N2Y1NTY3NDFkZWQ0YWE4NjhmODUxZWEzMmY5NzMyNjAyYjBlYTk", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-09-20T20:13:48Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-09-20T20:13:48Z"}, "message": "c++: xtreme-header modules tests cleanups\n\nThis adds some recently implemented C++20/23 library headers to the\nxtreme-header tests as appropriate.  Also, it looks like we can safely\nre-add <execution> and remove the NO_ASSOCIATED_LAMBDA workaround.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/modules/xtreme-header-2.h: Include <execution>.\n\t* g++.dg/modules/xtreme-header-6.h: Include implemented\n\tC++20 library headers.\n\t* g++.dg/modules/xtreme-header.h: Likewise.  Remove\n\tNO_ASSOCIATED_LAMBDA workaround.  Include implemented C++23\n\tlibrary headers.", "tree": {"sha": "78a75554bc85c74ba7f50c44b0a590725db6b218", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78a75554bc85c74ba7f50c44b0a590725db6b218"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c77f556741ded4aa868f851ea32f9732602b0ea9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77f556741ded4aa868f851ea32f9732602b0ea9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c77f556741ded4aa868f851ea32f9732602b0ea9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77f556741ded4aa868f851ea32f9732602b0ea9/comments", "author": null, "committer": null, "parents": [{"sha": "4fac53d652218946b82af4431a801ab1551f0e79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fac53d652218946b82af4431a801ab1551f0e79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fac53d652218946b82af4431a801ab1551f0e79"}], "stats": {"total": 72, "additions": 28, "deletions": 44}, "files": [{"sha": "dfe94aa6988e381ea0e2b05fda5004702d8e0f16", "filename": "gcc/testsuite/g++.dg/modules/xtreme-header-2.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77f556741ded4aa868f851ea32f9732602b0ea9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fxtreme-header-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77f556741ded4aa868f851ea32f9732602b0ea9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fxtreme-header-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fxtreme-header-2.h?ref=c77f556741ded4aa868f851ea32f9732602b0ea9", "patch": "@@ -1,8 +1,7 @@\n // Everything that transitively includes <ranges>\n \n #include <algorithm>\n-// FIXME: PR 97549\n-// #include <execution>\n+#include <execution>\n #include <functional>\n #include <future>\n #include <memory>"}, {"sha": "8d024b69bac4c8568c963654cdea719bd8f04b77", "filename": "gcc/testsuite/g++.dg/modules/xtreme-header-6.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77f556741ded4aa868f851ea32f9732602b0ea9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fxtreme-header-6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77f556741ded4aa868f851ea32f9732602b0ea9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fxtreme-header-6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fxtreme-header-6.h?ref=c77f556741ded4aa868f851ea32f9732602b0ea9", "patch": "@@ -1,22 +1,22 @@\n // C++20 headers\n #if __cplusplus > 201703\n #include <version>\n+#include <barrier>\n #include <bit>\n #include <compare>\n #include <concepts>\n #if __cpp_coroutines\n #include <coroutine>\n #endif\n+#include <latch>\n #include <numbers>\n+#include <semaphore>\n+#include <source_location>\n #include <span>\n #include <stop_token>\n+#include <syncstream>\n #if 0\n // Unimplemented\n-#include <barrier>\n #include <format>\n-#include <latch>\n-#include <semaphore>\n-#include <source_location>\n-#include <syncstream>\n #endif\n #endif"}, {"sha": "3147aaf00f44f719e328566518db41c183dd4518", "filename": "gcc/testsuite/g++.dg/modules/xtreme-header.h", "status": "modified", "additions": 22, "deletions": 37, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77f556741ded4aa868f851ea32f9732602b0ea9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fxtreme-header.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77f556741ded4aa868f851ea32f9732602b0ea9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fxtreme-header.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fxtreme-header.h?ref=c77f556741ded4aa868f851ea32f9732602b0ea9", "patch": "@@ -1,17 +1,8 @@\n // All the headers!\n \n-#if __cplusplus > 201703L\n-// FIXME: if we include everything, something goes wrong with location\n-// information.  We used to not handle lambdas attached to global\n-// vars, and this is a convienient flag to stop including everything.\n-#define NO_ASSOCIATED_LAMBDA 1\n-#endif\n-\n // C++ 17 and below\n #if 1\n-#if !NO_ASSOCIATED_LAMBDA\n #include <algorithm>\n-#endif\n #include <any>\n #include <array>\n #include <atomic>\n@@ -26,19 +17,12 @@\n #include <cwctype>\n #include <deque>\n #include <exception>\n-#if !NO_ASSOCIATED_LAMBDA\n-// FIXME: PR 97549\n-//#include <execution>\n-#endif\n+#include <execution>\n #include <filesystem>\n #include <forward_list>\n #include <fstream>\n-#if !NO_ASSOCIATED_LAMBDA\n #include <functional>\n-#endif\n-#if !NO_ASSOCIATED_LAMBDA\n #include <future>\n-#endif\n #include <initializer_list>\n #include <iomanip>\n #include <ios>\n@@ -49,12 +33,8 @@\n #include <list>\n #include <locale>\n #include <map>\n-#if !NO_ASSOCIATED_LAMBDA\n #include <memory>\n-#endif\n-#if !NO_ASSOCIATED_LAMBDA\n #include <memory_resource>\n-#endif\n #include <mutex>\n #include <new>\n #include <numeric>\n@@ -63,12 +43,8 @@\n #include <queue>\n #include <random>\n #include <ratio>\n-#if !NO_ASSOCIATED_LAMBDA\n #include <regex>\n-#endif\n-#if !NO_ASSOCIATED_LAMBDA\n #include <scoped_allocator>\n-#endif\n #include <set>\n #include <shared_mutex>\n #include <sstream>\n@@ -78,19 +54,15 @@\n #include <string>\n #include <string_view>\n #include <system_error>\n-#if !NO_ASSOCIATED_LAMBDA\n #include <thread>\n-#endif\n #include <tuple>\n #include <type_traits>\n #include <typeindex>\n #include <typeinfo>\n #include <unordered_map>\n #include <unordered_set>\n #include <utility>\n-#if !NO_ASSOCIATED_LAMBDA\n #include <valarray>\n-#endif\n #include <variant>\n #include <vector>\n #endif\n@@ -119,26 +91,39 @@\n #if __cplusplus > 201703\n #if 1\n #include <version>\n+#include <barrier>\n #include <bit>\n #include <compare>\n #include <concepts>\n #if __cpp_coroutines\n #include <coroutine>\n #endif\n-#if !NO_ASSOCIATED_LAMBDA\n-#include <ranges>\n-#endif\n+#include <latch>\n #include <numbers>\n+#include <ranges>\n+#include <semaphore>\n+#include <source_location>\n #include <span>\n #include <stop_token>\n+#include <syncstream>\n #if 0\n // Unimplemented\n-#include <barrier>\n #include <format>\n-#include <latch>\n-#include <semaphore>\n-#include <source_location>\n-#include <syncstream>\n #endif\n #endif\n #endif\n+\n+// C++23\n+#if __cplusplus > 202002L\n+#include <expected>\n+#include <spanstream>\n+#include <stacktrace>\n+#if 0\n+// Unimplemented\n+#include <flat_map>\n+#include <flat_set>\n+#include <generator>\n+#include <mdspan>\n+#include <print>\n+#endif\n+#endif"}]}