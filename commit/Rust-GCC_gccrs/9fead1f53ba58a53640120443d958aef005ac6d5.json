{"sha": "9fead1f53ba58a53640120443d958aef005ac6d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZlYWQxZjUzYmE1OGE1MzY0MDEyMDQ0M2Q5NThhZWYwMDVhYzZkNQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-10-14T22:13:34Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-10-14T22:13:34Z"}, "message": "static_members.cc (test02): Disable for systems without named locale support.\n\n\n2002-10-14  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/22_locale/static_members.cc (test02): Disable for\n\tsystems without named locale support.\n\t* testsuite/22_locale/ctor_copy_dtor.cc (test04): Don't assume\n\trunning the testsuites in \"C\" environment.\n\tAdd new tests.\n\t* docs/html/22_locale/locale.html: Update.\n\nFrom-SVN: r58142", "tree": {"sha": "c3715945d57e1cdf075335acecb5ae089eef9f6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3715945d57e1cdf075335acecb5ae089eef9f6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fead1f53ba58a53640120443d958aef005ac6d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fead1f53ba58a53640120443d958aef005ac6d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fead1f53ba58a53640120443d958aef005ac6d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fead1f53ba58a53640120443d958aef005ac6d5/comments", "author": null, "committer": null, "parents": [{"sha": "741fa37f8bbe7e48875f03383057f394882c2e8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/741fa37f8bbe7e48875f03383057f394882c2e8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/741fa37f8bbe7e48875f03383057f394882c2e8f"}], "stats": {"total": 607, "additions": 528, "deletions": 79}, "files": [{"sha": "6c2f3f281508fa8ac7bfde62fc8c25bf1836aa1b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fead1f53ba58a53640120443d958aef005ac6d5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fead1f53ba58a53640120443d958aef005ac6d5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9fead1f53ba58a53640120443d958aef005ac6d5", "patch": "@@ -1,3 +1,12 @@\n+2002-10-14  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/22_locale/static_members.cc (test02): Disable for \n+\tsystems without named locale support.\n+\t* testsuite/22_locale/ctor_copy_dtor.cc (test04): Don't assume\n+\trunning the testsuites in \"C\" environment.\n+\tAdd new tests.\n+\t* docs/html/22_locale/locale.html: Update.\n+\n 2002-10-13  Danny Smith  <dannysmith@users.sourceforge.net> \n \n \t* include/bits/stl_threads.h (_GLIBCPP_mutex,"}, {"sha": "6816204df8f3043865154aba23492aa4dc4b07f3", "filename": "libstdc++-v3/docs/html/22_locale/locale.html", "status": "modified", "additions": 405, "deletions": 48, "changes": 453, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fead1f53ba58a53640120443d958aef005ac6d5/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Flocale.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fead1f53ba58a53640120443d958aef005ac6d5/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Flocale.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Flocale.html?ref=9fead1f53ba58a53640120443d958aef005ac6d5", "patch": "@@ -6,7 +6,7 @@\n <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n    <meta name=\"AUTHOR\" content=\"bkoz@redhat.com (Benjamin Kosnik)\" />\n-   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, GCC, g++, libg++, STL\" />\n+   <meta name=\"KEYWORDS\" content=\"HOWTO, libstdc++, locale name LC_ALL\" />\n    <meta name=\"DESCRIPTION\" content=\"Notes on the locale implementation.\" />\n    <title>Notes on the locale implementation.</title>\n <link rel=\"StyleSheet\" href=\"../lib3styles.css\" />\n@@ -16,96 +16,455 @@ <h1>\n   Notes on the locale implementation.\n   </h1>\n <em>\n-prepared by Benjamin Kosnik (bkoz@redhat.com) on August 8, 2001\n+prepared by Benjamin Kosnik (bkoz@redhat.com) on October 14, 2002\n </em>\n \n <h2>\n-1. Abstract Describes the basic locale object, including nested\n-classes id, facet, and the reference-counted implementation object,\n-class _Impl.\n+1. Abstract \n </h2>\n <p>\n+Describes the basic locale object, including nested\n+classes id, facet, and the reference-counted implementation object,\n+class _Impl.\n </p>\n \n <h2>\n 2. What the standard says\n </h2>\n-See Chapter 22 of the standard.\n-\n-\n-<h2>\n-3. Problems with &quot;C&quot; locales : global locales, termination.\n-</h2>\n-\n-<p>\n-The major problem is fitting an object-orientated and non-global locale\n-design ontop of POSIX and other relevant stanards, which include the\n-Single Unix (nee X/Open.)\n-\n-Because POSIX falls down so completely, portibility is an issue.\n-</p>\n-\n-<h2>\n-4. Design\n-</h2>\n-Class locale in non-templatized and has three distinct types nested\n+Class locale is non-templatized and has two distinct types nested\n inside of it:\n \n+<blockquote>\n+<em>\n class facet\n 22.1.1.1.2 Class locale::facet\n+</em>\n+</blockquote>\n \n+<p>\n Facets actually implement locale functionality. For instance, a facet\n called numpunct is the data objects that can be used to query for the\n thousands separator is in the German locale.\n+</p>\n \n Literally, a facet is strictly defined:\n- - containing \n-public:\n-  static locale::id id;\n-\n-- or derived from another facet\n-\n-The only other thing of interest in this class is the memory\n-management of facets. Each constructor of a facet class takes a\n-std::size_t __refs argument: if __refs == 0, the facet is deleted when\n-the locale containing it is destroyed. If __refs == 1, the facet is\n-not destroyed, even when it is no longer referenced.\n+<ul>\n+  <li>containing the following public data member:\n+  <p>\n+  <code>static locale::id id;</code>\n+  </p>\n+  </li>\n+\n+  <li>derived from another facet:\n+  <p>\n+  <code> class gnu_codecvt: public std::ctype&lt;user-defined-type&gt;</code>\n+  </p>\n+  </li>\n+</ul>\n \n+<p>\n+Of interest in this class are the memory management options explicitly\n+specified as an argument to facet's constructor. Each constructor of a\n+facet class takes a std::size_t __refs argument: if __refs == 0, the\n+facet is deleted when the locale containing it is destroyed. If __refs\n+== 1, the facet is not destroyed, even when it is no longer\n+referenced.\n+</p>\n \n+<blockquote>\n+<em>\n class id\n+22.1.1.1.3 - Class locale::id\n+</em>\n+</blockquote>\n+\n+<p>\n Provides an index for looking up specific facets.\n+<p>\n \n-class _Impl\n-The internal representation of the std::locale object.\n \n <h2>\n-5.  Relationship to traditional \"C\" locales.\n+3. Interacting with &quot;C&quot; locales.\n </h2>\n \n+<p>\n+Some help on determining the underlying support for locales on a system. \n+Note, this is specific to linux (and glibc-2.3.x)\n+</p>\n+\n+<ul>\n+   <li> <code>`locale -a`</code> displays available locales. \n+<blockquote>\n+<pre>\n+af_ZA\n+ar_AE\n+ar_AE.utf8\n+ar_BH\n+ar_BH.utf8\n+ar_DZ\n+ar_DZ.utf8\n+ar_EG\n+ar_EG.utf8\n+ar_IN\n+ar_IQ\n+ar_IQ.utf8\n+ar_JO\n+ar_JO.utf8\n+ar_KW\n+ar_KW.utf8\n+ar_LB\n+ar_LB.utf8\n+ar_LY\n+ar_LY.utf8\n+ar_MA\n+ar_MA.utf8\n+ar_OM\n+ar_OM.utf8\n+ar_QA\n+ar_QA.utf8\n+ar_SA\n+ar_SA.utf8\n+ar_SD\n+ar_SD.utf8\n+ar_SY\n+ar_SY.utf8\n+ar_TN\n+ar_TN.utf8\n+ar_YE\n+ar_YE.utf8\n+be_BY\n+be_BY.utf8\n+bg_BG\n+bg_BG.utf8\n+br_FR\n+bs_BA\n+C\n+ca_ES\n+ca_ES@euro\n+ca_ES.utf8\n+ca_ES.utf8@euro\n+cs_CZ\n+cs_CZ.utf8\n+cy_GB\n+da_DK\n+da_DK.iso885915\n+da_DK.utf8\n+de_AT\n+de_AT@euro\n+de_AT.utf8\n+de_AT.utf8@euro\n+de_BE\n+de_BE@euro\n+de_BE.utf8\n+de_BE.utf8@euro\n+de_CH\n+de_CH.utf8\n+de_DE\n+de_DE@euro\n+de_DE.utf8\n+de_DE.utf8@euro\n+de_LU\n+de_LU@euro\n+de_LU.utf8\n+de_LU.utf8@euro\n+el_GR\n+el_GR.utf8\n+en_AU\n+en_AU.utf8\n+en_BW\n+en_BW.utf8\n+en_CA\n+en_CA.utf8\n+en_DK\n+en_DK.utf8\n+en_GB\n+en_GB.iso885915\n+en_GB.utf8\n+en_HK\n+en_HK.utf8\n+en_IE\n+en_IE@euro\n+en_IE.utf8\n+en_IE.utf8@euro\n+en_IN\n+en_NZ\n+en_NZ.utf8\n+en_PH\n+en_PH.utf8\n+en_SG\n+en_SG.utf8\n+en_US\n+en_US.iso885915\n+en_US.utf8\n+en_ZA\n+en_ZA.utf8\n+en_ZW\n+en_ZW.utf8\n+es_AR\n+es_AR.utf8\n+es_BO\n+es_BO.utf8\n+es_CL\n+es_CL.utf8\n+es_CO\n+es_CO.utf8\n+es_CR\n+es_CR.utf8\n+es_DO\n+es_DO.utf8\n+es_EC\n+es_EC.utf8\n+es_ES\n+es_ES@euro\n+es_ES.utf8\n+es_ES.utf8@euro\n+es_GT\n+es_GT.utf8\n+es_HN\n+es_HN.utf8\n+es_MX\n+es_MX.utf8\n+es_NI\n+es_NI.utf8\n+es_PA\n+es_PA.utf8\n+es_PE\n+es_PE.utf8\n+es_PR\n+es_PR.utf8\n+es_PY\n+es_PY.utf8\n+es_SV\n+es_SV.utf8\n+es_US\n+es_US.utf8\n+es_UY\n+es_UY.utf8\n+es_VE\n+es_VE.utf8\n+et_EE\n+et_EE.utf8\n+eu_ES\n+eu_ES@euro\n+eu_ES.utf8\n+eu_ES.utf8@euro\n+fa_IR\n+fi_FI\n+fi_FI@euro\n+fi_FI.utf8\n+fi_FI.utf8@euro\n+fo_FO\n+fo_FO.utf8\n+fr_BE\n+fr_BE@euro\n+fr_BE.utf8\n+fr_BE.utf8@euro\n+fr_CA\n+fr_CA.utf8\n+fr_CH\n+fr_CH.utf8\n+fr_FR\n+fr_FR@euro\n+fr_FR.utf8\n+fr_FR.utf8@euro\n+fr_LU\n+fr_LU@euro\n+fr_LU.utf8\n+fr_LU.utf8@euro\n+ga_IE\n+ga_IE@euro\n+ga_IE.utf8\n+ga_IE.utf8@euro\n+gl_ES\n+gl_ES@euro\n+gl_ES.utf8\n+gl_ES.utf8@euro\n+gv_GB\n+gv_GB.utf8\n+he_IL\n+he_IL.utf8\n+hi_IN\n+hr_HR\n+hr_HR.utf8\n+hu_HU\n+hu_HU.utf8\n+id_ID\n+id_ID.utf8\n+is_IS\n+is_IS.utf8\n+it_CH\n+it_CH.utf8\n+it_IT\n+it_IT@euro\n+it_IT.utf8\n+it_IT.utf8@euro\n+iw_IL\n+iw_IL.utf8\n+ja_JP.eucjp\n+ja_JP.utf8\n+ka_GE\n+kl_GL\n+kl_GL.utf8\n+ko_KR.euckr\n+ko_KR.utf8\n+kw_GB\n+kw_GB.utf8\n+lt_LT\n+lt_LT.utf8\n+lv_LV\n+lv_LV.utf8\n+mi_NZ\n+mk_MK\n+mk_MK.utf8\n+mr_IN\n+ms_MY\n+ms_MY.utf8\n+mt_MT\n+mt_MT.utf8\n+nl_BE\n+nl_BE@euro\n+nl_BE.utf8\n+nl_BE.utf8@euro\n+nl_NL\n+nl_NL@euro\n+nl_NL.utf8\n+nl_NL.utf8@euro\n+nn_NO\n+nn_NO.utf8\n+no_NO\n+no_NO.utf8\n+oc_FR\n+pl_PL\n+pl_PL.utf8\n+POSIX\n+pt_BR\n+pt_BR.utf8\n+pt_PT\n+pt_PT@euro\n+pt_PT.utf8\n+pt_PT.utf8@euro\n+ro_RO\n+ro_RO.utf8\n+ru_RU\n+ru_RU.koi8r\n+ru_RU.utf8\n+ru_UA\n+ru_UA.utf8\n+se_NO\n+sk_SK\n+sk_SK.utf8\n+sl_SI\n+sl_SI.utf8\n+sq_AL\n+sq_AL.utf8\n+sr_YU\n+sr_YU@cyrillic\n+sr_YU.utf8\n+sr_YU.utf8@cyrillic\n+sv_FI\n+sv_FI@euro\n+sv_FI.utf8\n+sv_FI.utf8@euro\n+sv_SE\n+sv_SE.iso885915\n+sv_SE.utf8\n+ta_IN\n+te_IN\n+tg_TJ\n+th_TH\n+th_TH.utf8\n+tl_PH\n+tr_TR\n+tr_TR.utf8\n+uk_UA\n+uk_UA.utf8\n+ur_PK\n+uz_UZ\n+vi_VN\n+vi_VN.tcvn\n+wa_BE\n+wa_BE@euro\n+yi_US\n+zh_CN\n+zh_CN.gb18030\n+zh_CN.gbk\n+zh_CN.utf8\n+zh_HK\n+zh_HK.utf8\n+zh_TW\n+zh_TW.euctw\n+zh_TW.utf8\n+</pre>\n+</blockquote>\n+</li>\n+   \n+   <li> <code>`locale`</code> displays environmental variables\n+   that impact how locale(\"\") will be deduced.\n+\n+<blockquote>\n+<pre>\n+LANG=en_US\n+LC_CTYPE=\"en_US\"\n+LC_NUMERIC=\"en_US\"\n+LC_TIME=\"en_US\"\n+LC_COLLATE=\"en_US\"\n+LC_MONETARY=\"en_US\"\n+LC_MESSAGES=\"en_US\"\n+LC_PAPER=\"en_US\"\n+LC_NAME=\"en_US\"\n+LC_ADDRESS=\"en_US\"\n+LC_TELEPHONE=\"en_US\"\n+LC_MEASUREMENT=\"en_US\"\n+LC_IDENTIFICATION=\"en_US\"\n+LC_ALL=\n+</pre>\n+</blockquote>\n+</li>\n+</ul>\n+\n+<p>\n From Josuttis, p. 697-698, which says, that \"there is only *one*\n relation (of the C++ locale mechanism) to the C locale mechanism: the\n global C locale is modified if a named C++ locale object is set as the\n global locale\" (emphasis Paolo), that is:\n+</p>\n+    <code>std::locale::global(std::locale(\"\"));</code>\n \n-    std::locale::global(std::locale(\"\"));\n-\n-affects the C functions as if the following call was made:\n+<p>affects the C functions as if the following call was made:</p>\n \n-    std::setlocale(LC_ALL, \"\");\n+    <code>std::setlocale(LC_ALL, \"\");</code>\n \n+<p>\n On the other hand, there is *no* viceversa, that is, calling setlocale\n has *no* whatsoever on the C++ locale mechanism, in particular on the\n working of locale(\"\"), which constructs the locale object from the\n environment of the running program, that is, in practice, the set of\n LC_ALL, LANG, etc. variable of the shell.\n+</p>\n+\n \n <h2>\n-5.  Examples\n+4. Design\n </h2>\n \n-<pre>\n-  typedef __locale_t locale;\n-</pre>\n+\n+<p>\n+The major design challenge is fitting an object-orientated and\n+non-global locale design ontop of POSIX and other relevant stanards,\n+which include the Single Unix (nee X/Open.)\n+</p>\n+\n+<p>\n+Because POSIX falls down so completely, portibility is an issue.\n+</p>\n+\n+class _Impl\n+The internal representation of the std::locale object.\n+\n+\n+<h2>\n+5.  Examples\n+</h2>\n \n More information can be found in the following testcases:\n <ul>\n@@ -117,8 +476,6 @@ <h2>\n </h2>\n \n <ul>\n-   <li> locale -a displays available locales on linux </li>\n-\n    <li> locale initialization: at what point does _S_classic,\n    _S_global get initialized? Can named locales assume this\n    initialization has already taken place? </li>"}, {"sha": "8ffef6e34e1e1fb12f234c565901306d72817b10", "filename": "libstdc++-v3/testsuite/22_locale/ctor_copy_dtor.cc", "status": "modified", "additions": 98, "deletions": 21, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fead1f53ba58a53640120443d958aef005ac6d5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctor_copy_dtor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fead1f53ba58a53640120443d958aef005ac6d5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctor_copy_dtor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctor_copy_dtor.cc?ref=9fead1f53ba58a53640120443d958aef005ac6d5", "patch": "@@ -315,53 +315,119 @@ void test03()\n {\n   bool test = true;\n #ifdef _GLIBCPP_HAVE_SETENV \n-  const char* oldLC_ALL = getenv(\"LC_ALL\");\n+  const char* LC_ALL_orig = getenv(\"LC_ALL\");\n   if (!setenv(\"LC_ALL\", \"it_IT\", 1))\n     {\n       std::locale loc(\"\"); \n       VERIFY( loc.name() == \"it_IT\" );\n-      setenv(\"LC_ALL\", oldLC_ALL ? oldLC_ALL : \"\", 1);\n+      setenv(\"LC_ALL\", LC_ALL_orig ? LC_ALL_orig : \"\", 1);\n     }\n #endif\n }\n \n \n-// More tests for Posix locale::name. \n+// More tests for locale(\"\") == POSIX locale::name. \n void test04()\n {\n   bool test = true;\n+  using namespace std;\n+\n #ifdef _GLIBCPP_HAVE_SETENV\n \n-  const char* oldLC_ALL = getenv(\"LC_ALL\") ? strdup(getenv(\"LC_ALL\")) : \"\";\n-  const char* oldLANG = getenv(\"LANG\") ? strdup(getenv(\"LANG\")) : \"\";\n+  const char* LANG_orig = getenv(\"LANG\") ? strdup(getenv(\"LANG\")) : \"\";\n+  const char* LC_ALL_orig = getenv(\"LC_ALL\") ? strdup(getenv(\"LC_ALL\")) : \"\";\n+  const char* LC_CTYPE_orig = \n+    getenv(\"LC_CTYPE\") ? strdup(getenv(\"LC_CTYPE\")) : \"\";\n+  const char* LC_NUMERIC_orig = \n+    getenv(\"LC_NUMERIC\") ? strdup(getenv(\"LC_NUMERIC\")) : \"\";\n+  const char* LC_COLLATE_orig =\n+    getenv(\"LC_COLLATE\") ? strdup(getenv(\"LC_COLLATE\")) : \"\";\n+  const char* LC_TIME_orig = \n+    getenv(\"LC_TIME\") ? strdup(getenv(\"LC_TIME\")) : \"\";\n+  const char* LC_MONETARY_orig = \n+    getenv(\"LC_MONETARY\") ? strdup(getenv(\"LC_MONETARY\")) : \"\";\n+  const char* LC_MESSAGES_orig = \n+    getenv(\"LC_MESSAGES\") ? strdup(getenv(\"LC_MESSAGES\")) : \"\";\n+#if _GLIBCPP_NUM_CATEGORIES\n+  const char* LC_PAPER_orig = \n+    getenv(\"LC_PAPER\") ? strdup(getenv(\"LC_PAPER\")) : \"\";\n+  const char* LC_NAME_orig = \n+    getenv(\"LC_NAME\") ? strdup(getenv(\"LC_NAME\")) : \"\";\n+  const char* LC_ADDRESS_orig = \n+    getenv(\"LC_ADDRESS\") ? strdup(getenv(\"LC_ADDRESS\")) : \"\";\n+  const char* LC_TELEPHONE_orig = \n+    getenv(\"LC_TELEPHONE\") ? strdup(getenv(\"LC_TELEPHONE\")) : \"\";\n+  const char* LC_MEASUREMENT_orig = \n+    getenv(\"LC_MEASUREMENT\") ? strdup(getenv(\"LC_MEASUREMENT\")) : \"\";\n+  const char* LC_IDENTIFICATION_orig =\n+    getenv(\"LC_IDENTIFICATION\") ? strdup(getenv(\"LC_IDENTIFICATION\")) : \"\";\n+#endif\n \n   // Check that a \"POSIX\" LC_ALL is equivalent to \"C\".\n   if (!setenv(\"LC_ALL\", \"POSIX\", 1))\n     {\n-      std::locale loc(\"\");\n+      locale loc(\"\");\n       VERIFY( loc.name() == \"C\" );\n     }\n+  setenv(\"LC_ALL\", \"\", 1);\n+\n+  // Check that a \"en_PH\" LC_ALL is equivalent to \"en_PH\".\n+  if (!setenv(\"LC_ALL\", \"en_PH\", 1))\n+    {\n+      locale loc(\"\");\n+      VERIFY( loc.name() == \"en_PH\" );\n+    }\n+  setenv(\"LC_ALL\", \"\", 1);\n+\n+  // Explicit check that LC_ALL sets regardless of LC_* and LANG.\n+  if (!setenv(\"LANG\", \"es_MX\", 1) && !setenv(\"LC_COLLATE\", \"de_DE\", 1))\n+    {\n+      if (!setenv(\"LC_ALL\", \"en_PH\", 1))\n+\t{\n+\t  locale loc(\"\");\n+\t  VERIFY( loc.name() == \"en_PH\" );\n+\t}\n+      setenv(\"LC_ALL\", \"\", 1);\n+      setenv(\"LANG\", LANG_orig ? LANG_orig : \"\", 1);\n+      setenv(\"LC_COLLATE\", LC_COLLATE_orig ? LC_COLLATE_orig : \"\", 1);\n+    }\n+\n+  // NB: LANG checks all LC_* macro settings. As such, all LC_* macros\n+  // must be cleared for these tests, and then restored.\n+  setenv(\"LC_ALL\", \"\", 1);\n+  setenv(\"LC_CTYPE\", \"\", 1);\n+  setenv(\"LC_NUMERIC\", \"\", 1);\n+  setenv(\"LC_COLLATE\", \"\", 1);\n+  setenv(\"LC_TIME\", \"\", 1);\n+  setenv(\"LC_MONETARY\", \"\", 1);\n+  setenv(\"LC_MESSAGES\", \"\", 1);\n+#if _GLIBCPP_NUM_CATEGORIES\n+  setenv(\"LC_PAPER\", \"\", 1);\n+  setenv(\"LC_NAME\", \"\", 1);\n+  setenv(\"LC_ADDRESS\", \"\", 1);\n+  setenv(\"LC_TELEPHONE\", \"\", 1);\n+  setenv(\"LC_MEASUREMENT\", \"\", 1);\n+  setenv(\"LC_IDENTIFICATION\", \"\", 1);\n+#endif\n \n   // Check the default set by LANG.\n-  if (!setenv(\"LC_ALL\", \"\", 1) && !setenv(\"LANG\", \"fr_FR\", 1))\n+  if (!setenv(\"LANG\", \"fr_FR\", 1))\n     {\n-      std::locale loc(\"\");\n+      locale loc(\"\");\n       VERIFY( loc.name() == \"fr_FR\" );\n     }\n \n   // Check that a \"POSIX\" LANG is equivalent to \"C\".\n   if (!setenv(\"LANG\", \"POSIX\", 1))\n     {\n-      std::locale loc(\"\"); \n+      locale loc(\"\"); \n       VERIFY( loc.name() == \"C\" );\n     }\n \n   // Setting a category in the \"C\" default.\n-  const char* oldLC_COLLATE =\n-    getenv(\"LC_COLLATE\") ? strdup(getenv(\"LC_COLLATE\")) : \"\";\n   if (!setenv(\"LC_COLLATE\", \"de_DE\", 1))\n     {\n-      std::locale loc(\"\");\n+      locale loc(\"\");\n \n #if _GLIBCPP_NUM_CATEGORIES\n       VERIFY( loc.name() == \"LC_CTYPE=C;LC_NUMERIC=C;LC_COLLATE=de_DE;\"\n@@ -377,7 +443,7 @@ void test04()\n   // Changing the LANG default while LC_COLLATE is set.\n   if (!setenv(\"LANG\", \"fr_FR\", 1))\n     {\n-      std::locale loc(\"\");\n+      locale loc(\"\");\n #if _GLIBCPP_NUM_CATEGORIES\n       VERIFY( loc.name() == \"LC_CTYPE=fr_FR;LC_NUMERIC=fr_FR;\"\n \t      \"LC_COLLATE=de_DE;LC_TIME=fr_FR;LC_MONETARY=fr_FR;\"\n@@ -392,12 +458,10 @@ void test04()\n     }\n   \n   // Changing another (C only) category.\n-  const char* oldLC_IDENTIFICATION =\n-    getenv(\"LC_IDENTIFICATION\") ? strdup(getenv(\"LC_IDENTIFICATION\")) : \"\";\n #if _GLIBCPP_NUM_CATEGORIES\n   if (!setenv(\"LC_IDENTIFICATION\", \"it_IT\", 1))\n     {\n-      std::locale loc(\"\");\n+      locale loc(\"\");\n       VERIFY( loc.name() == \"LC_CTYPE=fr_FR;LC_NUMERIC=fr_FR;\"\n \t      \"LC_COLLATE=de_DE;LC_TIME=fr_FR;LC_MONETARY=fr_FR;\"\n \t      \"LC_MESSAGES=fr_FR;LC_PAPER=fr_FR;LC_NAME=fr_FR;\"\n@@ -407,11 +471,24 @@ void test04()\n #endif\n \n   // Restore the environment.\n-  setenv(\"LC_ALL\", oldLC_ALL ? oldLC_ALL : \"\", 1);\n-  setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n-  setenv(\"LC_COLLATE\", oldLC_COLLATE ? oldLC_COLLATE : \"\", 1);\n-  setenv(\"LC_IDENTIFICATION\",\n-\t oldLC_IDENTIFICATION ? oldLC_IDENTIFICATION : \"\", 1);\n+  setenv(\"LANG\", LANG_orig ? LANG_orig : \"\", 1);\n+  setenv(\"LC_ALL\", LC_ALL_orig ? LC_ALL_orig : \"\", 1);\n+  setenv(\"LC_CTYPE\", LC_CTYPE_orig ? LC_CTYPE_orig : \"\", 1);\n+  setenv(\"LC_NUMERIC\", LC_NUMERIC_orig ? LC_NUMERIC_orig : \"\", 1);\n+  setenv(\"LC_COLLATE\", LC_COLLATE_orig ? LC_COLLATE_orig : \"\", 1);\n+  setenv(\"LC_TIME\", LC_TIME_orig ? LC_TIME_orig : \"\", 1);\n+  setenv(\"LC_MONETARY\", LC_MONETARY_orig ? LC_MONETARY_orig : \"\", 1);\n+  setenv(\"LC_MESSAGES\", LC_MESSAGES_orig ? LC_MESSAGES_orig : \"\", 1);\n+#if _GLIBCPP_NUM_CATEGORIES\n+  setenv(\"LC_PAPER\", LC_PAPER_orig ? LC_PAPER_orig : \"\", 1);\n+  setenv(\"LC_NAME\", LC_NAME_orig ? LC_NAME_orig : \"\", 1);\n+  setenv(\"LC_ADDRESS\", LC_ADDRESS_orig ? LC_ADDRESS_orig : \"\", 1);\n+  setenv(\"LC_TELEPHONE\", LC_TELEPHONE_orig ? LC_TELEPHONE_orig : \"\", 1);\n+  setenv(\"LC_MEASUREMENT\", LC_MEASUREMENT_orig ? LC_MEASUREMENT_orig : \"\", 1);\n+  setenv(\"LC_IDENTIFICATION\", \n+         LC_IDENTIFICATION_orig ? LC_IDENTIFICATION_orig : \"\", 1);\n+#endif\n+\n #endif\n }\n "}, {"sha": "936e8b8e1cf66198bedbdcfcb4502513fa34e7ef", "filename": "libstdc++-v3/testsuite/22_locale/static_members.cc", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fead1f53ba58a53640120443d958aef005ac6d5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fstatic_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fead1f53ba58a53640120443d958aef005ac6d5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fstatic_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fstatic_members.cc?ref=9fead1f53ba58a53640120443d958aef005ac6d5", "patch": "@@ -67,28 +67,34 @@ void test02()\n   using namespace std;\n   bool test = true;\n   \n+  // If the underlying locale doesn't support these names, setlocale\n+  // won't be reset. Therefore, disable unless we know named locales work.\n+#if _GLIBCPP_C_LOCALE_GNU\n+\n   const string ph(\"en_PH\");\n   const string mx(\"es_MX\");\n \n   const locale loc_ph(ph.c_str());\n   const locale loc_mx(mx.c_str());\n \n-  // Get underlying current locale and environment settings.\n-  const locale env_orig(\"\");\n-\n-  // setlocale to en_PH\n-  std::setlocale(LC_ALL, ph.c_str());\n-\n-  const locale loc_env(\"\");\n-  VERIFY( loc_env == env_orig );\n+  // Use setlocale between two calls to locale(\"\")\n+  const locale loc_env_1(\"\");\n+  setlocale(LC_ALL, ph.c_str());\n+  const locale loc_env_2(\"\");\n+  VERIFY( loc_env_1 == loc_env_2 );\n \n+  // Change global locale.\n   locale global_orig = locale::global(loc_mx);\n-  const char* lc_all_mx = std::setlocale(LC_ALL, NULL);\n+  const char* lc_all_mx = setlocale(LC_ALL, NULL);\n   if (lc_all_mx)\n-    VERIFY( mx == lc_all_mx );\n+    {\n+      cout << \"lc_all_mx is \" << lc_all_mx << endl;\n+      VERIFY( mx == lc_all_mx );\n+    }\n \n   // Restore global settings.\n   locale::global(global_orig);\n+#endif\n }\n \n // Static counter for use in checking ctors/dtors."}]}