{"sha": "57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdjZWU1NmExZWZlNjgxZWFjMWE1YzQyN2Y0ZmZlMWM2ZjRmNzdjZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-07-13T08:59:58Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-07-13T08:59:58Z"}, "message": "re PR libstdc++/53657 ([C++11] pair(pair&&) move constructor is non-trivial)\n\n2012-07-13  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/53657\n\t* include/bits/stl_pair.h (pair<>::pair(pair&&)): Declare defaulted,\n\tper C++11.\n\t* include/bits/stl_map.h (map<>::insert(_Pair&&), map<>::insert\n\t(const_iterator, _Pair&&)): Constrain with std::is_constructible,\n\tper LWG2005.\n\t* include/bits/stl_multimap.h (multimap<>::insert(_Pair&&),\n\tmultimap<>::insert(const_iterator, _Pair&&)): Likewise.\n\t* include/bits/hashtable_policy.h (_Insert<>::insert(_Pair&&),\n\t_Insert<>::insert(const_iterator, _Pair&&)): Likewise.\n\t* include/debug/unordered_map: Adjust.\n\t* include/debug/map.h: Likewise.\n\t* include/debug/multimap.h: Likewise.\n\t* include/profile/unordered_map: Likewise.\n\t* include/profile/map.h: Likewise.\n\t* include/profile/multimap.h: Likewise.\n\nFrom-SVN: r189456", "tree": {"sha": "98cbf83c315fe42c65c2ddcf8b73005612e9ba99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98cbf83c315fe42c65c2ddcf8b73005612e9ba99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd/comments", "author": null, "committer": null, "parents": [{"sha": "f0df84ab4a058d5ad3a75a37cb04816c49638aa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0df84ab4a058d5ad3a75a37cb04816c49638aa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0df84ab4a058d5ad3a75a37cb04816c49638aa8"}], "stats": {"total": 129, "additions": 71, "deletions": 58}, "files": [{"sha": "a19f33c488251dd7a460dcb915c8885210d0dace", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd", "patch": "@@ -1,3 +1,22 @@\n+2012-07-13  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/53657\n+\t* include/bits/stl_pair.h (pair<>::pair(pair&&)): Declare defaulted,\n+\tper C++11.\n+\t* include/bits/stl_map.h (map<>::insert(_Pair&&), map<>::insert\n+\t(const_iterator, _Pair&&)): Constrain with std::is_constructible,\n+\tper LWG2005.\n+\t* include/bits/stl_multimap.h (multimap<>::insert(_Pair&&),\n+\tmultimap<>::insert(const_iterator, _Pair&&)): Likewise.\n+\t* include/bits/hashtable_policy.h (_Insert<>::insert(_Pair&&),\n+\t_Insert<>::insert(const_iterator, _Pair&&)): Likewise.\n+\t* include/debug/unordered_map: Adjust.\n+\t* include/debug/map.h: Likewise.\n+\t* include/debug/multimap.h: Likewise.\n+\t* include/profile/unordered_map: Likewise.\n+\t* include/profile/map.h: Likewise.\n+\t* include/profile/multimap.h: Likewise.\n+\n 2012-07-06  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/53872"}, {"sha": "c0a6df5db2370e4fa67f963f29f27328d1261c26", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd", "patch": "@@ -831,23 +831,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using __base_type::insert;\n \n       template<typename _Pair>\n-\tusing __is_conv = std::is_convertible<_Pair, value_type>;\n+\tusing __is_cons = std::is_constructible<value_type, _Pair&&>;\n \n       template<typename _Pair>\n-\tusing _IFconv = std::enable_if<__is_conv<_Pair>::value>;\n+\tusing _IFcons = std::enable_if<__is_cons<_Pair>::value>;\n \n       template<typename _Pair>\n-\tusing _IFconvp = typename _IFconv<_Pair>::type;\n+\tusing _IFconsp = typename _IFcons<_Pair>::type;\n \n-      template<typename _Pair, typename = _IFconvp<_Pair>>\n+      template<typename _Pair, typename = _IFconsp<_Pair>>\n \t__ireturn_type\n \tinsert(_Pair&& __v)\n \t{\n \t  __hashtable& __h = this->_M_conjure_hashtable();\n \t  return __h._M_insert(std::forward<_Pair>(__v), __unique_keys());\n \t}\n \n-      template<typename _Pair, typename = _IFconvp<_Pair>>\n+      template<typename _Pair, typename = _IFconsp<_Pair>>\n \titerator\n \tinsert(const_iterator, _Pair&& __v)\n \t{ return __iconv_type()(insert(std::forward<_Pair>(__v))); }"}, {"sha": "cfd478a3b92f145c1f558c7ea1a45fab9305648d", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd", "patch": "@@ -1,7 +1,7 @@\n // Map implementation -*- C++ -*-\n \n // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n-// 2011 Free Software Foundation, Inc.\n+// 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -530,8 +530,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       template<typename _Pair, typename = typename\n-\t       std::enable_if<std::is_convertible<_Pair,\n-\t\t\t\t\t\t  value_type>::value>::type>\n+\t       std::enable_if<std::is_constructible<value_type,\n+\t\t\t\t\t\t    _Pair&&>::value>::type>\n         std::pair<iterator, bool>\n         insert(_Pair&& __x)\n         { return _M_t._M_insert_unique(std::forward<_Pair>(__x)); }\n@@ -583,8 +583,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       template<typename _Pair, typename = typename\n-\t       std::enable_if<std::is_convertible<_Pair,\n-\t\t\t\t\t\t  value_type>::value>::type>\n+\t       std::enable_if<std::is_constructible<value_type,\n+\t\t\t\t\t\t    _Pair&&>::value>::type>\n         iterator\n         insert(const_iterator __position, _Pair&& __x)\n         { return _M_t._M_insert_unique_(__position,"}, {"sha": "6fc478774540c96b4e458eea368020a1c31b76b0", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd", "patch": "@@ -1,7 +1,7 @@\n // Multimap implementation -*- C++ -*-\n \n // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n-// 2011 Free Software Foundation, Inc.\n+// 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -451,8 +451,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       template<typename _Pair, typename = typename\n-\t       std::enable_if<std::is_convertible<_Pair,\n-\t\t\t\t\t\t  value_type>::value>::type>\n+\t       std::enable_if<std::is_constructible<value_type,\n+\t\t\t\t\t\t    _Pair&&>::value>::type>\n         iterator\n         insert(_Pair&& __x)\n         { return _M_t._M_insert_equal(std::forward<_Pair>(__x)); }\n@@ -488,8 +488,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       template<typename _Pair, typename = typename\n-\t       std::enable_if<std::is_convertible<_Pair,\n-\t\t\t\t\t\t  value_type>::value>::type>\n+\t       std::enable_if<std::is_constructible<value_type,\n+\t\t\t\t\t\t    _Pair&&>::value>::type>\n         iterator\n         insert(const_iterator __position, _Pair&& __x)\n         { return _M_t._M_insert_equal_(__position,"}, {"sha": "4ece92aac121ad5ebe25e5255b33e4c0063e3e00", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd", "patch": "@@ -1,7 +1,7 @@\n // Pair implementation -*- C++ -*-\n \n // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n-// 2010, 2011\n+// 2010, 2011, 2012\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -122,13 +122,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t: first(__p.first), second(__p.second) { }\n \n       constexpr pair(const pair&) = default;\n-\n-      // XXX Defaulted?!? Breaks std::map!!!\n-      pair(pair&& __p)\n-      noexcept(__and_<is_nothrow_move_constructible<_T1>,\n-\t              is_nothrow_move_constructible<_T2>>::value)\n-      : first(std::forward<first_type>(__p.first)),\n-\tsecond(std::forward<second_type>(__p.second)) { }\n+      constexpr pair(pair&&) = default;\n \n       // DR 811.\n       template<class _U1, class = typename"}, {"sha": "95871ac6b73ff353ecf17d822a00efa41ff7e731", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd", "patch": "@@ -213,8 +213,8 @@ namespace __debug\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       template<typename _Pair, typename = typename\n-\t       std::enable_if<std::is_convertible<_Pair,\n-\t\t\t\t\t\t  value_type>::value>::type>\n+\t       std::enable_if<std::is_constructible<value_type,\n+\t\t\t\t\t\t    _Pair&&>::value>::type>\n         std::pair<iterator, bool>\n         insert(_Pair&& __x)\n         {\n@@ -244,8 +244,8 @@ namespace __debug\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       template<typename _Pair, typename = typename\n-\t       std::enable_if<std::is_convertible<_Pair,\n-\t\t\t\t\t\t  value_type>::value>::type>\n+\t       std::enable_if<std::is_constructible<value_type,\n+\t\t\t\t\t\t    _Pair&&>::value>::type>\n         iterator\n         insert(const_iterator __position, _Pair&& __x)\n         {"}, {"sha": "e1e09bc07afe44383ce407aef7a5d12067d15dc7", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd", "patch": "@@ -201,8 +201,8 @@ namespace __debug\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       template<typename _Pair, typename = typename\n-\t       std::enable_if<std::is_convertible<_Pair,\n-\t\t\t\t\t\t  value_type>::value>::type>\n+\t       std::enable_if<std::is_constructible<value_type,\n+\t\t\t\t\t\t    _Pair&&>::value>::type>\n         iterator\n         insert(_Pair&& __x)\n         { return iterator(_Base::insert(std::forward<_Pair>(__x)), this); }\n@@ -227,8 +227,8 @@ namespace __debug\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       template<typename _Pair, typename = typename\n-\t       std::enable_if<std::is_convertible<_Pair,\n-\t\t\t\t\t\t  value_type>::value>::type>\n+\t       std::enable_if<std::is_constructible<value_type,\n+\t\t\t\t\t\t    _Pair&&>::value>::type>\n         iterator\n         insert(const_iterator __position, _Pair&& __x)\n         {"}, {"sha": "96cb148ebb57c38161f08c84d8cf95424d1e861a", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd", "patch": "@@ -248,8 +248,8 @@ namespace __debug\n       }\n \n       template<typename _Pair, typename = typename\n-\t       std::enable_if<std::is_convertible<_Pair,\n-\t\t\t\t\t\t  value_type>::value>::type>\n+\t       std::enable_if<std::is_constructible<value_type,\n+\t\t\t\t\t\t    _Pair&&>::value>::type>\n \tstd::pair<iterator, bool>\n \tinsert(_Pair&& __obj)\n \t{\n@@ -261,8 +261,8 @@ namespace __debug\n \t}\n \n       template<typename _Pair, typename = typename\n-\t       std::enable_if<std::is_convertible<_Pair,\n-\t\t\t\t\t\t  value_type>::value>::type>\n+\t       std::enable_if<std::is_constructible<value_type,\n+\t\t\t\t\t\t    _Pair&&>::value>::type>\n \titerator\n \tinsert(const_iterator __hint, _Pair&& __obj)\n \t{\n@@ -663,8 +663,8 @@ namespace __debug\n       }\n \n       template<typename _Pair, typename = typename\n-\t       std::enable_if<std::is_convertible<_Pair,\n-\t\t\t\t\t\t  value_type>::value>::type>\n+\t       std::enable_if<std::is_constructible<value_type,\n+\t\t\t\t\t\t    _Pair&&>::value>::type>\n \titerator\n \tinsert(_Pair&& __obj)\n \t{\n@@ -675,8 +675,8 @@ namespace __debug\n \t}\n \n       template<typename _Pair, typename = typename\n-\t       std::enable_if<std::is_convertible<_Pair,\n-\t\t\t\t\t\t  value_type>::value>::type>\n+\t       std::enable_if<std::is_constructible<value_type,\n+\t\t\t\t\t\t    _Pair&&>::value>::type>\n \titerator\n \tinsert(const_iterator __hint, _Pair&& __obj)\n \t{"}, {"sha": "42c32aae4ce95d6b35db7fec025545d946ae0d48", "filename": "libstdc++-v3/include/profile/map.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h?ref=57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd", "patch": "@@ -1,6 +1,6 @@\n // Profiling map implementation -*- C++ -*-\n \n-// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -248,8 +248,8 @@ namespace __profile\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       template<typename _Pair, typename = typename\n-\t       std::enable_if<std::is_convertible<_Pair,\n-\t\t\t\t\t\t  value_type>::value>::type>\n+\t       std::enable_if<std::is_constructible<value_type,\n+\t\t\t\t\t\t    _Pair&&>::value>::type>\n         std::pair<iterator, bool>\n         insert(_Pair&& __x)\n         {\n@@ -289,8 +289,8 @@ namespace __profile\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       template<typename _Pair, typename = typename\n-\t       std::enable_if<std::is_convertible<_Pair,\n-\t\t\t\t\t\t  value_type>::value>::type>\n+\t       std::enable_if<std::is_constructible<value_type,\n+\t\t\t\t\t\t    _Pair&&>::value>::type>\n         iterator\n         insert(const_iterator __position, _Pair&& __x)\n         {"}, {"sha": "608d6b76c680e0fe71123ed12e7d3ec2f8e9a037", "filename": "libstdc++-v3/include/profile/multimap.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h?ref=57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd", "patch": "@@ -1,6 +1,6 @@\n // Profiling multimap implementation -*- C++ -*-\n \n-// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -186,8 +186,8 @@ namespace __profile\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       template<typename _Pair, typename = typename\n-\t       std::enable_if<std::is_convertible<_Pair,\n-\t\t\t\t\t\t  value_type>::value>::type>\n+\t       std::enable_if<std::is_constructible<value_type,\n+\t\t\t\t\t\t    _Pair&&>::value>::type>\n         iterator\n         insert(_Pair&& __x)\n         { return iterator(_Base::insert(std::forward<_Pair>(__x))); }\n@@ -209,8 +209,8 @@ namespace __profile\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       template<typename _Pair, typename = typename\n-\t       std::enable_if<std::is_convertible<_Pair,\n-\t\t\t\t\t\t  value_type>::value>::type>\n+\t       std::enable_if<std::is_constructible<value_type,\n+\t\t\t\t\t\t    _Pair&&>::value>::type>\n         iterator\n         insert(const_iterator __position, _Pair&& __x)\n         { return iterator(_Base::insert(__position,"}, {"sha": "266e804fe361325a7ea769be3c01ee651093695d", "filename": "libstdc++-v3/include/profile/unordered_map", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Funordered_map?ref=57cee56a1efe681eac1a5c427f4ffe1c6f4f77cd", "patch": "@@ -1,6 +1,6 @@\n // Profiling unordered_map/unordered_multimap implementation -*- C++ -*-\n \n-// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -214,8 +214,8 @@ namespace __profile\n       }\n \n       template<typename _Pair, typename = typename\n-\t       std::enable_if<std::is_convertible<_Pair,\n-\t\t\t\t\t\t  value_type>::value>::type>\n+\t       std::enable_if<std::is_constructible<value_type,\n+\t\t\t\t\t\t    _Pair&&>::value>::type>\n         std::pair<iterator, bool>\n         insert(_Pair&& __obj)\n         {\n@@ -227,8 +227,8 @@ namespace __profile\n \t}\n \n       template<typename _Pair, typename = typename\n-\t       std::enable_if<std::is_convertible<_Pair,\n-\t\t\t\t\t\t  value_type>::value>::type>\n+\t       std::enable_if<std::is_constructible<value_type,\n+\t\t\t\t\t\t    _Pair&&>::value>::type>\n         iterator\n         insert(const_iterator __iter, _Pair&& __v)\n         { \n@@ -503,8 +503,8 @@ namespace __profile\n       }\n \n       template<typename _Pair, typename = typename\n-\t       std::enable_if<std::is_convertible<_Pair,\n-\t\t\t\t\t\t  value_type>::value>::type>\n+\t       std::enable_if<std::is_constructible<value_type,\n+\t\t\t\t\t\t    _Pair&&>::value>::type>\n         iterator\n         insert(_Pair&& __obj)\n         {\n@@ -515,8 +515,8 @@ namespace __profile\n \t}\n \n       template<typename _Pair, typename = typename\n-\t       std::enable_if<std::is_convertible<_Pair,\n-\t\t\t\t\t\t  value_type>::value>::type>\n+\t       std::enable_if<std::is_constructible<value_type,\n+\t\t\t\t\t\t    _Pair&&>::value>::type>\n         iterator\n         insert(const_iterator __iter, _Pair&& __v)\n         {"}]}