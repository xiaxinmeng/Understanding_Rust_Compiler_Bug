{"sha": "74457d003ed7f9577931ae6d7adaa906fc0a0473", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ0NTdkMDAzZWQ3Zjk1Nzc5MzFhZTZkN2FkYWE5MDZmYzBhMDQ3Mw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2015-08-24T18:43:02Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2015-08-24T18:43:02Z"}, "message": "re PR target/67211 (ICE (insn does not satisfy its constraints) on powerpc64le-linux-gnu)\n\n[gcc]\n2015-08-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/67211\n\t* config/rs6000/rs6000-cpus.def (ISA_2_7_MASKS_SERVER): Set\n\t-mefficient-unaligned-vsx on ISA 2.7.\n\n\t* config/rs6000/rs6000.opt (-mefficient-unaligned-vsx): Convert\n\toption to a masked option.\n\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Rework\n\tlogic for -mefficient-unaligned-vsx so that it is set via an arch\n\tISA option, instead of being set if -mtune=power8 is set. Move\n\t-mefficient-unaligned-vsx and -mallow-movmisalign handling to be\n\tnear other default option handling.\n\n[gcc/testsuite]\n2015-08-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/67211\n\t* g++.dg/pr67211.C: New test.\n\nFrom-SVN: r227144", "tree": {"sha": "abf43cf752e7c4e7e8c4c72cb825552289ec03fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abf43cf752e7c4e7e8c4c72cb825552289ec03fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74457d003ed7f9577931ae6d7adaa906fc0a0473", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74457d003ed7f9577931ae6d7adaa906fc0a0473", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74457d003ed7f9577931ae6d7adaa906fc0a0473", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74457d003ed7f9577931ae6d7adaa906fc0a0473/comments", "author": null, "committer": null, "parents": [{"sha": "58d745ec901a3707c1e6487ce8c0eca387ec5f42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58d745ec901a3707c1e6487ce8c0eca387ec5f42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58d745ec901a3707c1e6487ce8c0eca387ec5f42"}], "stats": {"total": 131, "additions": 114, "deletions": 17}, "files": [{"sha": "99943fa993b6010084581e2d0d1ce0bc5d3f4445", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74457d003ed7f9577931ae6d7adaa906fc0a0473/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74457d003ed7f9577931ae6d7adaa906fc0a0473/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74457d003ed7f9577931ae6d7adaa906fc0a0473", "patch": "@@ -1,3 +1,18 @@\n+2015-08-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/67211\n+\t* config/rs6000/rs6000-cpus.def (ISA_2_7_MASKS_SERVER): Set\n+\t-mefficient-unaligned-vsx on ISA 2.7.\n+\n+\t* config/rs6000/rs6000.opt (-mefficient-unaligned-vsx): Convert\n+\toption to a masked option.\n+\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Rework\n+\tlogic for -mefficient-unaligned-vsx so that it is set via an arch\n+\tISA option, instead of being set if -mtune=power8 is set. Move\n+\t-mefficient-unaligned-vsx and -mallow-movmisalign handling to be\n+\tnear other default option handling.\n+\n 2015-08-24  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* genflags.c (gen_macro): Delete."}, {"sha": "03764aef740a53c367e750092806d8361daa5216", "filename": "gcc/config/rs6000/rs6000-cpus.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74457d003ed7f9577931ae6d7adaa906fc0a0473/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74457d003ed7f9577931ae6d7adaa906fc0a0473/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def?ref=74457d003ed7f9577931ae6d7adaa906fc0a0473", "patch": "@@ -53,6 +53,7 @@\n \t\t\t\t | OPTION_MASK_P8_VECTOR\t\t\\\n \t\t\t\t | OPTION_MASK_CRYPTO\t\t\t\\\n \t\t\t\t | OPTION_MASK_DIRECT_MOVE\t\t\\\n+\t\t\t\t | OPTION_MASK_EFFICIENT_UNALIGNED_VSX\t\\\n \t\t\t\t | OPTION_MASK_HTM\t\t\t\\\n \t\t\t\t | OPTION_MASK_QUAD_MEMORY\t\t\\\n   \t\t\t\t | OPTION_MASK_QUAD_MEMORY_ATOMIC\t\\\n@@ -78,6 +79,7 @@\n \t\t\t\t | OPTION_MASK_DFP\t\t\t\\\n \t\t\t\t | OPTION_MASK_DIRECT_MOVE\t\t\\\n \t\t\t\t | OPTION_MASK_DLMZB\t\t\t\\\n+\t\t\t\t | OPTION_MASK_EFFICIENT_UNALIGNED_VSX\t\\\n \t\t\t\t | OPTION_MASK_FPRND\t\t\t\\\n \t\t\t\t | OPTION_MASK_HTM\t\t\t\\\n \t\t\t\t | OPTION_MASK_ISEL\t\t\t\\"}, {"sha": "b4469564ca9682a8dc8c92cae8ba1e7fbaf14a8c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 41, "deletions": 16, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74457d003ed7f9577931ae6d7adaa906fc0a0473/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74457d003ed7f9577931ae6d7adaa906fc0a0473/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=74457d003ed7f9577931ae6d7adaa906fc0a0473", "patch": "@@ -3716,6 +3716,45 @@ rs6000_option_override_internal (bool global_init_p)\n   else if (TARGET_FLOAT128 == FLOAT128_SW && !TARGET_VSX)\n     error (\"-mfloat128-software requires VSX support\");\n \n+  /* Set -mallow-movmisalign to explicitly on if we have full ISA 2.07\n+     support. If we only have ISA 2.06 support, and the user did not specify\n+     the switch, leave it set to -1 so the movmisalign patterns are enabled,\n+     but we don't enable the full vectorization support  */\n+  if (TARGET_ALLOW_MOVMISALIGN == -1 && TARGET_P8_VECTOR && TARGET_DIRECT_MOVE)\n+    TARGET_ALLOW_MOVMISALIGN = 1;\n+\n+  else if (TARGET_ALLOW_MOVMISALIGN && !TARGET_VSX)\n+    {\n+      if (TARGET_ALLOW_MOVMISALIGN > 0)\n+\terror (\"-mallow-movmisalign requires -mvsx\");\n+\n+      TARGET_ALLOW_MOVMISALIGN = 0;\n+    }\n+\n+  /* Determine when unaligned vector accesses are permitted, and when\n+     they are preferred over masked Altivec loads.  Note that if\n+     TARGET_ALLOW_MOVMISALIGN has been disabled by the user, then\n+     TARGET_EFFICIENT_UNALIGNED_VSX must be as well.  The converse is\n+     not true.  */\n+  if (TARGET_EFFICIENT_UNALIGNED_VSX)\n+    {\n+      if (!TARGET_VSX)\n+\t{\n+\t  if (rs6000_isa_flags_explicit & OPTION_MASK_EFFICIENT_UNALIGNED_VSX)\n+\t    error (\"-mefficient-unaligned-vsx requires -mvsx\");\n+\n+\t  rs6000_isa_flags &= ~OPTION_MASK_EFFICIENT_UNALIGNED_VSX;\n+\t}\n+\n+      else if (!TARGET_ALLOW_MOVMISALIGN)\n+\t{\n+\t  if (rs6000_isa_flags_explicit & OPTION_MASK_EFFICIENT_UNALIGNED_VSX)\n+\t    error (\"-mefficient-unaligned-vsx requires -mallow-movmisalign\");\n+\n+\t  rs6000_isa_flags &= ~OPTION_MASK_EFFICIENT_UNALIGNED_VSX;\n+\t}\n+    }\n+\n   if (TARGET_DEBUG_REG || TARGET_DEBUG_TARGET)\n     rs6000_print_isa_options (stderr, 0, \"after defaults\", rs6000_isa_flags);\n \n@@ -4275,22 +4314,6 @@ rs6000_option_override_internal (bool global_init_p)\n \t}\n     }\n \n-  /* Determine when unaligned vector accesses are permitted, and when\n-     they are preferred over masked Altivec loads.  Note that if\n-     TARGET_ALLOW_MOVMISALIGN has been disabled by the user, then\n-     TARGET_EFFICIENT_UNALIGNED_VSX must be as well.  The converse is\n-     not true.  */\n-  if (TARGET_EFFICIENT_UNALIGNED_VSX == -1) {\n-    if (TARGET_VSX && rs6000_cpu == PROCESSOR_POWER8\n-\t&& TARGET_ALLOW_MOVMISALIGN != 0)\n-      TARGET_EFFICIENT_UNALIGNED_VSX = 1;\n-    else\n-      TARGET_EFFICIENT_UNALIGNED_VSX = 0;\n-  }\n-\n-  if (TARGET_ALLOW_MOVMISALIGN == -1 && rs6000_cpu == PROCESSOR_POWER8)\n-    TARGET_ALLOW_MOVMISALIGN = 1;\n-\n   /* Set the builtin mask of the various options used that could affect which\n      builtins were used.  In the past we used target_flags, but we've run out\n      of bits, and some options like SPE and PAIRED are no longer in\n@@ -32921,6 +32944,8 @@ static struct rs6000_opt_mask const rs6000_opt_masks[] =\n   { \"crypto\",\t\t\tOPTION_MASK_CRYPTO,\t\tfalse, true  },\n   { \"direct-move\",\t\tOPTION_MASK_DIRECT_MOVE,\tfalse, true  },\n   { \"dlmzb\",\t\t\tOPTION_MASK_DLMZB,\t\tfalse, true  },\n+  { \"efficient-unaligned-vsx\",\tOPTION_MASK_EFFICIENT_UNALIGNED_VSX,\n+\t\t\t\t\t\t\t\tfalse, true  },\n   { \"fprnd\",\t\t\tOPTION_MASK_FPRND,\t\tfalse, true  },\n   { \"hard-dfp\",\t\t\tOPTION_MASK_DFP,\t\tfalse, true  },\n   { \"htm\",\t\t\tOPTION_MASK_HTM,\t\tfalse, true  },"}, {"sha": "6d11ff7dfdbd35ab83b287a8eaa3aa721d44e14f", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74457d003ed7f9577931ae6d7adaa906fc0a0473/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74457d003ed7f9577931ae6d7adaa906fc0a0473/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=74457d003ed7f9577931ae6d7adaa906fc0a0473", "patch": "@@ -212,7 +212,7 @@ Target Undocumented Var(TARGET_ALLOW_MOVMISALIGN) Init(-1) Save\n ; Allow/disallow the movmisalign in DF/DI vectors\n \n mefficient-unaligned-vector\n-Target Undocumented Report Var(TARGET_EFFICIENT_UNALIGNED_VSX) Init(-1)\n+Target Undocumented Report Mask(EFFICIENT_UNALIGNED_VSX) Var(rs6000_isa_flags)\n ; Consider unaligned VSX accesses to be efficient/inefficient\n \n mallow-df-permute"}, {"sha": "a6cc0dc37727dafadec6c10b458b7c04163b9190", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74457d003ed7f9577931ae6d7adaa906fc0a0473/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74457d003ed7f9577931ae6d7adaa906fc0a0473/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=74457d003ed7f9577931ae6d7adaa906fc0a0473", "patch": "@@ -1,3 +1,8 @@\n+2015-08-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/67211\n+\t* g++.dg/pr67211.C: New test.\n+\n 2015-08-24  Louis Krupp <louis.krupp@zoho.com>\n \n \tPR fortran/62536"}, {"sha": "4afc69f4538ce2614128df9e4e1470cd1358a7de", "filename": "gcc/testsuite/g++.dg/pr67211.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74457d003ed7f9577931ae6d7adaa906fc0a0473/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr67211.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74457d003ed7f9577931ae6d7adaa906fc0a0473/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr67211.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr67211.C?ref=74457d003ed7f9577931ae6d7adaa906fc0a0473", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power7\" } } */\n+/* { dg-options \"-mcpu=power7 -mtune=power8 -O3 -w\" } */\n+\n+/* target/67211, compiler got a 'insn does not satisfy its constraints' error.  */\n+\n+template <typename _InputIterator, typename _ForwardIterator>\n+void find_first_of(_InputIterator, _InputIterator, _ForwardIterator p3,\n+                   _ForwardIterator p4) {\n+  for (; p3 != p4; ++p3)\n+    ;\n+}\n+\n+template <typename, typename, typename> struct A {\n+  int _S_buffer_size;\n+  int *_M_cur;\n+  int *_M_first;\n+  int *_M_last;\n+  int **_M_node;\n+  void operator++() {\n+    if (_M_cur == _M_last)\n+      m_fn1(_M_node + 1);\n+  }\n+  void m_fn1(int **p1) {\n+    _M_node = p1;\n+    _M_first = *p1;\n+    _M_last = _M_first + _S_buffer_size;\n+  }\n+};\n+\n+template <typename _Tp, typename _Ref, typename _Ptr>\n+bool operator==(A<_Tp, _Ref, _Ptr>, A<_Tp, _Ref, _Ptr>);\n+template <typename _Tp, typename _Ref, typename _Ptr>\n+bool operator!=(A<_Tp, _Ref, _Ptr> p1, A<_Tp, _Ref, _Ptr> p2) {\n+  return p1 == p2;\n+}\n+\n+class B {\n+public:\n+  A<int, int, int> m_fn2();\n+};\n+struct {\n+  B j;\n+} a;\n+void Linked() {\n+  A<int, int, int> b, c, d;\n+  find_first_of(d, c, b, a.j.m_fn2());\n+}"}]}