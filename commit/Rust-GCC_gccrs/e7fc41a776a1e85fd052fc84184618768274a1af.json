{"sha": "e7fc41a776a1e85fd052fc84184618768274a1af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdmYzQxYTc3NmExZTg1ZmQwNTJmYzg0MTg0NjE4NzY4Mjc0YTFhZg==", "commit": {"author": {"name": "Markus Trippelsdorf", "email": "markus@trippelsdorf.de", "date": "2015-12-02T19:57:55Z"}, "committer": {"name": "Markus Trippelsdorf", "email": "trippels@gcc.gnu.org", "date": "2015-12-02T19:57:55Z"}, "message": "Fix c++/67337 (segfault in mangle.c)\n\n\tPR c++/67337\n\t* mangle.c (write_template_prefix): Guard against context==NULL.\n\nFrom-SVN: r231203", "tree": {"sha": "966f1ad320883735aa2c30fdd61f16111dd2bacc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/966f1ad320883735aa2c30fdd61f16111dd2bacc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7fc41a776a1e85fd052fc84184618768274a1af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7fc41a776a1e85fd052fc84184618768274a1af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7fc41a776a1e85fd052fc84184618768274a1af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7fc41a776a1e85fd052fc84184618768274a1af/comments", "author": null, "committer": null, "parents": [{"sha": "157bb85d48034bba6eb24f6f9f4ca4e6e8a5fa93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/157bb85d48034bba6eb24f6f9f4ca4e6e8a5fa93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/157bb85d48034bba6eb24f6f9f4ca4e6e8a5fa93"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "ce26e5daa2fb3752df8eab6d7dd7c7d28389a43e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7fc41a776a1e85fd052fc84184618768274a1af/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7fc41a776a1e85fd052fc84184618768274a1af/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e7fc41a776a1e85fd052fc84184618768274a1af", "patch": "@@ -1,3 +1,8 @@\n+2015-12-02  Markus Trippelsdorf  <markus@trippelsdorf.de>\n+\n+\tPR c++/67337\n+\t* mangle.c (write_template_prefix): Guard against context==NULL.\n+\n 2015-12-02  Jason Merrill  <jason@redhat.com>\n \n \t* call.c (build_new_op_1): Don't fold arguments to"}, {"sha": "3ff30663f08402bdd8013fa936c90d2cc77de6c4", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7fc41a776a1e85fd052fc84184618768274a1af/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7fc41a776a1e85fd052fc84184618768274a1af/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=e7fc41a776a1e85fd052fc84184618768274a1af", "patch": "@@ -1145,7 +1145,7 @@ write_template_prefix (const tree node)\n      So, for the example above, `Outer<int>::Inner' is represented as a\n      substitution candidate by a TREE_LIST whose purpose is `Outer<int>'\n      and whose value is `Outer<T>::Inner<U>'.  */\n-  if (TYPE_P (context))\n+  if (context && TYPE_P (context))\n     substitution = build_tree_list (context, templ);\n   else\n     substitution = templ;"}, {"sha": "df2651bc9a570b6af5fa923a6aef4099aeeb1e73", "filename": "gcc/testsuite/g++.dg/template/pr67337.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7fc41a776a1e85fd052fc84184618768274a1af/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr67337.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7fc41a776a1e85fd052fc84184618768274a1af/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr67337.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr67337.C?ref=e7fc41a776a1e85fd052fc84184618768274a1af", "patch": "@@ -0,0 +1,25 @@\n+template <class> class A\n+{\n+  void m_fn1 (int *, int);\n+};\n+\n+template <class> class B\n+{\n+public:\n+  typedef int Type;\n+};\n+\n+template <class> class C\n+{\n+public:\n+  C (int);\n+  template <template <class> class T> void m_fn2 (typename T<void>::Type);\n+};\n+\n+template <>\n+void\n+A<int>::m_fn1 (int *, int)\n+{\n+  C<int> a (0);\n+  a.m_fn2<B> (0);\n+}"}]}