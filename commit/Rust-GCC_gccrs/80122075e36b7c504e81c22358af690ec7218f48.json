{"sha": "80122075e36b7c504e81c22358af690ec7218f48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODAxMjIwNzVlMzZiN2M1MDRlODFjMjIzNThhZjY5MGVjNzIxOGY0OA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-03-28T19:31:43Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-03-28T19:31:43Z"}, "message": "expr.c (pop_type_0): Call `concat' rather than building the string manually.\n\n\t* expr.c (pop_type_0): Call `concat' rather than building the\n\tstring manually.\n\t(pop_type): Add format specifier in call to `error'.\n\n\t* parse.y (patch_method_invocation): Avoid casting away\n\tconst-ness.\n\nFrom-SVN: r40940", "tree": {"sha": "e23785d4eee463f83a1239e37d4b84c198cf1fcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e23785d4eee463f83a1239e37d4b84c198cf1fcf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80122075e36b7c504e81c22358af690ec7218f48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80122075e36b7c504e81c22358af690ec7218f48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80122075e36b7c504e81c22358af690ec7218f48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80122075e36b7c504e81c22358af690ec7218f48/comments", "author": null, "committer": null, "parents": [{"sha": "3fdefbcc63ada60e2d6bca1dc5581f1cd3716ec1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fdefbcc63ada60e2d6bca1dc5581f1cd3716ec1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fdefbcc63ada60e2d6bca1dc5581f1cd3716ec1"}], "stats": {"total": 49, "additions": 24, "deletions": 25}, "files": [{"sha": "e9f24dfb876c1702fecafaa6b0f0fedf6393d3c6", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80122075e36b7c504e81c22358af690ec7218f48/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80122075e36b7c504e81c22358af690ec7218f48/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=80122075e36b7c504e81c22358af690ec7218f48", "patch": "@@ -1,3 +1,12 @@\n+2001-03-28  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* expr.c (pop_type_0): Call `concat' rather than building the\n+\tstring manually.\n+\t(pop_type): Add format specifier in call to `error'.\n+\n+\t* parse.y (patch_method_invocation): Avoid casting away\n+\tconst-ness.\n+\n 2001-03-21  Alexandre Petit-Bianco  <apbianco@redhat.com>\n \n \t* parse.y (qualify_ambiguous_name): Broaden `length'"}, {"sha": "2ea6a81352697042281c7037e3ce3baa369f7017", "filename": "gcc/java/expr.c", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80122075e36b7c504e81c22358af690ec7218f48/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80122075e36b7c504e81c22358af690ec7218f48/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=80122075e36b7c504e81c22358af690ec7218f48", "patch": "@@ -355,24 +355,11 @@ pop_type_0 (type, messagep)\n       else if (CLASS_INTERFACE (TYPE_NAME (TREE_TYPE (type))))\n \treturn object_ptr_type_node;\n     }\n-  {\n-    const char *str1 = \"expected type '\";\n-    const char *str3 = \"' but stack contains '\";\n-    const char *str5 = \"'\";\n-    int len1 = strlen (str1);\n-    int len2 = strlen (lang_printable_name (type, 0));\n-    int len3 = strlen (str3);\n-    int len4 = strlen (lang_printable_name (t, 0));\n-    int len5 = strlen (str5);\n-    char *msg = xmalloc (len1 + len2 + len3 + len4 + len5 + 1);\n-    *messagep = msg;\n-    strcpy (msg, str1);  msg += len1;\n-    strcpy (msg, lang_printable_name (type, 0));  msg += len2;\n-    strcpy (msg, str3);  msg += len3;\n-    strcpy (msg, lang_printable_name (t, 0));  msg += len4;\n-    strcpy (msg, str5);\n-    return type;\n-  }\n+\n+  *messagep = concat (\"expected type '\", lang_printable_name (type, 0),\n+\t\t      \"' but stack contains '\", lang_printable_name (t, 0),\n+\t\t      \"'\", NULL);\n+  return type;\n }\n \n /* Pop a type from the type stack.\n@@ -387,7 +374,7 @@ pop_type (type)\n   type = pop_type_0 (type, &message);\n   if (message != NULL)\n     {\n-      error (message);\n+      error (\"%s\", message);\n       free (message);\n     }\n   return type;"}, {"sha": "6df483e278d9234424eda776fa414e16913683ca", "filename": "gcc/java/parse.y", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80122075e36b7c504e81c22358af690ec7218f48/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80122075e36b7c504e81c22358af690ec7218f48/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=80122075e36b7c504e81c22358af690ec7218f48", "patch": "@@ -9963,12 +9963,15 @@ patch_method_invocation (patch, primary, where, from_super,\n       /* Calls to clone() on array types are permitted as a special-case. */\n       && !is_array_clone_call)\n     {\n-      char *fct_name = (char *) IDENTIFIER_POINTER (DECL_NAME (list));\n-      char *access = java_accstring_lookup (get_access_flags_from_decl (list));\n-      char *klass = (char *) IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (DECL_CONTEXT (list))));\n-      char *refklass = (char *) IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (current_class)));\n-      char *what = (char *) (DECL_CONSTRUCTOR_P (list)\n-\t\t\t     ? \"constructor\" : \"method\");\n+      const char *fct_name = IDENTIFIER_POINTER (DECL_NAME (list));\n+      const char *access =\n+\tjava_accstring_lookup (get_access_flags_from_decl (list));\n+      const char *klass =\n+\tIDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (DECL_CONTEXT (list))));\n+      const char *refklass =\n+\tIDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (current_class)));\n+      const char *what = (DECL_CONSTRUCTOR_P (list)\n+\t\t\t  ? \"constructor\" : \"method\");\n       /* FIXME: WFL yields the wrong message here but I don't know\n \t what else to use.  */\n       parse_error_context (wfl,"}]}