{"sha": "eab01c18fdf287aaac60224ddbecae6574631b7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFiMDFjMThmZGYyODdhYWFjNjAyMjRkZGJlY2FlNjU3NDYzMWI3Yg==", "commit": {"author": {"name": "Mukesh Kapoor", "email": "mukesh.kapoor@oracle.com", "date": "2017-10-24T13:49:13Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2017-10-24T13:49:13Z"}, "message": "re PR c++/82307 (unscoped enum-base incorrect cast)\n\n/cp\n2017-10-24  Mukesh Kapoor  <mukesh.kapoor@oracle.com>\n\t    Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/82307\n\t* cvt.c (type_promotes_to): Implement C++17, 7.6/4, about unscoped\n\tenumeration type whose underlying type is fixed.\n\n/testsuite\n2017-10-24  Mukesh Kapoor  <mukesh.kapoor@oracle.com>\n\t    Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/82307\n\t* g++.dg/cpp0x/enum35.C: New.\n\t* g++.dg/cpp0x/enum36.C: Likewise.\n\nCo-Authored-By: Paolo Carlini <paolo.carlini@oracle.com>\n\nFrom-SVN: r254046", "tree": {"sha": "a153300f80986f5e3b972aed4c6ff2aecf8675b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a153300f80986f5e3b972aed4c6ff2aecf8675b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eab01c18fdf287aaac60224ddbecae6574631b7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eab01c18fdf287aaac60224ddbecae6574631b7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eab01c18fdf287aaac60224ddbecae6574631b7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eab01c18fdf287aaac60224ddbecae6574631b7b/comments", "author": {"login": "mukapoor", "id": 29608874, "node_id": "MDQ6VXNlcjI5NjA4ODc0", "avatar_url": "https://avatars.githubusercontent.com/u/29608874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mukapoor", "html_url": "https://github.com/mukapoor", "followers_url": "https://api.github.com/users/mukapoor/followers", "following_url": "https://api.github.com/users/mukapoor/following{/other_user}", "gists_url": "https://api.github.com/users/mukapoor/gists{/gist_id}", "starred_url": "https://api.github.com/users/mukapoor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mukapoor/subscriptions", "organizations_url": "https://api.github.com/users/mukapoor/orgs", "repos_url": "https://api.github.com/users/mukapoor/repos", "events_url": "https://api.github.com/users/mukapoor/events{/privacy}", "received_events_url": "https://api.github.com/users/mukapoor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d56a36834f29373f80776c43e98c3813271d6bc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d56a36834f29373f80776c43e98c3813271d6bc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d56a36834f29373f80776c43e98c3813271d6bc1"}], "stats": {"total": 63, "additions": 60, "deletions": 3}, "files": [{"sha": "8228c8f0a9db7b144ccea4832b60afa9edd4c83c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab01c18fdf287aaac60224ddbecae6574631b7b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab01c18fdf287aaac60224ddbecae6574631b7b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=eab01c18fdf287aaac60224ddbecae6574631b7b", "patch": "@@ -1,3 +1,10 @@\n+2017-10-24  Mukesh Kapoor  <mukesh.kapoor@oracle.com>\n+\t    Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/82307\n+\t* cvt.c (type_promotes_to): Implement C++17, 7.6/4, about unscoped\n+\tenumeration type whose underlying type is fixed.\n+\n 2017-10-23  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/80449"}, {"sha": "9ce094eb2a5b3bbfd9c5793e7504db345bd47df8", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab01c18fdf287aaac60224ddbecae6574631b7b/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab01c18fdf287aaac60224ddbecae6574631b7b/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=eab01c18fdf287aaac60224ddbecae6574631b7b", "patch": "@@ -1834,12 +1834,27 @@ type_promotes_to (tree type)\n \t   || type == char32_type_node\n \t   || type == wchar_type_node)\n     {\n+      tree prom = type;\n+\n+      if (TREE_CODE (type) == ENUMERAL_TYPE)\n+\t{\n+\t  prom = ENUM_UNDERLYING_TYPE (prom);\n+\t  if (!ENUM_IS_SCOPED (type)\n+\t      && ENUM_FIXED_UNDERLYING_TYPE_P (type))\n+\t    {\n+\t      /* ISO C++17, 7.6/4.  A prvalue of an unscoped enumeration type\n+\t\t whose underlying type is fixed (10.2) can be converted to a\n+\t\t prvalue of its underlying type. Moreover, if integral promotion\n+\t\t can be applied to its underlying type, a prvalue of an unscoped\n+\t\t enumeration type whose underlying type is fixed can also be \n+\t\t converted to a prvalue of the promoted underlying type.  */\n+\t      return type_promotes_to (prom);\n+\t    }\n+\t}\n+\n       int precision = MAX (TYPE_PRECISION (type),\n \t\t\t   TYPE_PRECISION (integer_type_node));\n       tree totype = c_common_type_for_size (precision, 0);\n-      tree prom = type;\n-      if (TREE_CODE (prom) == ENUMERAL_TYPE)\n-\tprom = ENUM_UNDERLYING_TYPE (prom);\n       if (TYPE_UNSIGNED (prom)\n \t  && ! int_fits_type_p (TYPE_MAX_VALUE (prom), totype))\n \tprom = c_common_type_for_size (precision, 1);"}, {"sha": "a8a4a119886f0c2f2e8a28cf7c9e1cd0f011b704", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab01c18fdf287aaac60224ddbecae6574631b7b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab01c18fdf287aaac60224ddbecae6574631b7b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eab01c18fdf287aaac60224ddbecae6574631b7b", "patch": "@@ -1,3 +1,10 @@\n+2017-10-24  Mukesh Kapoor  <mukesh.kapoor@oracle.com>\n+\t    Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/82307\n+\t* g++.dg/cpp0x/enum35.C: New.\n+\t* g++.dg/cpp0x/enum36.C: Likewise.\n+\n 2017-10-24  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/82659"}, {"sha": "bcc1b26b39006ea90c42937fe10eb6d659fb2dc3", "filename": "gcc/testsuite/g++.dg/cpp0x/enum35.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab01c18fdf287aaac60224ddbecae6574631b7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum35.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab01c18fdf287aaac60224ddbecae6574631b7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum35.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum35.C?ref=eab01c18fdf287aaac60224ddbecae6574631b7b", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/82307\n+// { dg-do run { target c++11 } }\n+\n+#include <cassert>\n+\n+enum : unsigned long long { VAL };\n+\n+bool foo (unsigned long long) { return true; }\n+bool foo (int) { return false; }\n+\n+int main()\n+{\n+  assert (foo(VAL));\n+}"}, {"sha": "4859670309f8245f623fe7c4e34b17b39fb4a050", "filename": "gcc/testsuite/g++.dg/cpp0x/enum36.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab01c18fdf287aaac60224ddbecae6574631b7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab01c18fdf287aaac60224ddbecae6574631b7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum36.C?ref=eab01c18fdf287aaac60224ddbecae6574631b7b", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/82307\n+// { dg-do run { target c++11 } }\n+\n+#include <cassert>\n+\n+enum : short { VAL };\n+\n+bool foo (int) { return true; }\n+bool foo (unsigned long long) { return false; }\n+\n+int main()\n+{\n+  assert (foo (VAL));\n+}"}]}