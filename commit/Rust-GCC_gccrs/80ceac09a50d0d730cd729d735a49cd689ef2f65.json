{"sha": "80ceac09a50d0d730cd729d735a49cd689ef2f65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBjZWFjMDlhNTBkMGQ3MzBjZDcyOWQ3MzVhNDljZDY4OWVmMmY2NQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-05-05T20:56:36Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-05-05T20:56:36Z"}, "message": "diagnostic.c: add print_option_information\n\nThis patch simplifies diagnostic_report_diagnostic by moving\noption-printing to a new subroutine.\n\nDoing so required a slight rewrite.  In both the old and new\ncode, context->option_name returns a malloc-ed string.\nThe old behavior was to then use ACONCAT to manipulate the\nformat_spec, appending the option metadata.\nACONCAT calcs the buffer size, then uses alloca, and then copies the\ndata to the on-stack buffer.\n\nGiven the alloca, this needs rewriting when moving the printing to\na subroutine.  In the new version, the metadata is simply printed\nusing pp_* calls (so it's hitting the obstack within the\npretty_printer).\n\nThis means we can get rid of the save/restore of format_spec: I don't\nbelieve anything else in the code modifies it.\n\nIt also seems inherently simpler; it seems odd to me to be\nappending metadata to the formatting string, rather than simply\nprinting the metadata after the formatted string is printed\n(the old code also assumed that no option name contained a '%').\n\nNo functional change intended.\n\ngcc/ChangeLog:\n\t* diagnostic.c (diagnostic_report_diagnostic): Eliminate\n\tsave/restor of format_spec.  Move option-printing code to...\n\t(print_option_information): ...this new function, and\n\treimplement by simply printing to the pretty_printer,\n\trather than appending to the format string.\n\nFrom-SVN: r247661", "tree": {"sha": "4ef23783ca32bd1eb64b29445324abc7d48c5b3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ef23783ca32bd1eb64b29445324abc7d48c5b3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80ceac09a50d0d730cd729d735a49cd689ef2f65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80ceac09a50d0d730cd729d735a49cd689ef2f65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80ceac09a50d0d730cd729d735a49cd689ef2f65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80ceac09a50d0d730cd729d735a49cd689ef2f65/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dc41c9b07d3da5456df2fd11ed89be084afa55ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc41c9b07d3da5456df2fd11ed89be084afa55ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc41c9b07d3da5456df2fd11ed89be084afa55ed"}], "stats": {"total": 60, "additions": 36, "deletions": 24}, "files": [{"sha": "079fb47012f54b9a138c0b47e882c09ea9b660d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ceac09a50d0d730cd729d735a49cd689ef2f65/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ceac09a50d0d730cd729d735a49cd689ef2f65/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80ceac09a50d0d730cd729d735a49cd689ef2f65", "patch": "@@ -1,3 +1,11 @@\n+2017-05-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic.c (diagnostic_report_diagnostic): Eliminate\n+\tsave/restor of format_spec.  Move option-printing code to...\n+\t(print_option_information): ...this new function, and\n+\treimplement by simply printing to the pretty_printer,\n+\trather than appending to the format string.\n+\n 2017-05-05  David Malcolm  <dmalcolm@redhat.com>\n \n \t* diagnostic.c (diagnostic_report_diagnostic): Split out pragma"}, {"sha": "f1b6b1ef16a34eb7daa54dc1f9fef7d5aaab8900", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ceac09a50d0d730cd729d735a49cd689ef2f65/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ceac09a50d0d730cd729d735a49cd689ef2f65/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=80ceac09a50d0d730cd729d735a49cd689ef2f65", "patch": "@@ -815,6 +815,32 @@ update_effective_level_from_pragmas (diagnostic_context *context,\n   return diag_class;\n }\n \n+/* Print any metadata about the option used to control DIAGNOSTIC to CONTEXT's\n+   printer, e.g. \" [-Werror=uninitialized]\".\n+   Subroutine of diagnostic_report_diagnostic.  */\n+\n+static void\n+print_option_information (diagnostic_context *context,\n+\t\t\t  const diagnostic_info *diagnostic,\n+\t\t\t  diagnostic_t orig_diag_kind)\n+{\n+  char *option_text;\n+\n+  option_text = context->option_name (context, diagnostic->option_index,\n+\t\t\t\t      orig_diag_kind, diagnostic->kind);\n+\n+  if (option_text)\n+    {\n+      pretty_printer *pp = context->printer;\n+      pp_string (pp, \" [\");\n+      pp_string (pp, colorize_start (pp_show_color (pp),\n+\t\t\t\t     diagnostic_kind_color[diagnostic->kind]));\n+      pp_string (pp, option_text);\n+      pp_string (pp, colorize_stop (pp_show_color (pp)));\n+      pp_character (pp, ']');\n+      free (option_text);\n+    }\n+}\n \n /* Report a diagnostic message (an error or a warning) as specified by\n    DC.  This function is *the* subroutine in terms of which front-ends\n@@ -829,7 +855,6 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n {\n   location_t location = diagnostic_location (diagnostic);\n   diagnostic_t orig_diag_kind = diagnostic->kind;\n-  const char *saved_format_spec;\n \n   /* Give preference to being able to inhibit warnings, before they\n      get reclassified to something else.  */\n@@ -925,41 +950,20 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n   else\n     ++diagnostic_kind_count (context, diagnostic->kind);\n \n-  saved_format_spec = diagnostic->message.format_spec;\n-  if (context->show_option_requested)\n-    {\n-      char *option_text;\n-\n-      option_text = context->option_name (context, diagnostic->option_index,\n-\t\t\t\t\t  orig_diag_kind, diagnostic->kind);\n-\n-      if (option_text)\n-\t{\n-\t  const char *cs\n-\t    = colorize_start (pp_show_color (context->printer),\n-\t\t\t      diagnostic_kind_color[diagnostic->kind]);\n-\t  const char *ce = colorize_stop (pp_show_color (context->printer));\n-\t  diagnostic->message.format_spec\n-\t    = ACONCAT ((diagnostic->message.format_spec,\n-\t\t\t\" \", \n-\t\t\t\"[\", cs, option_text, ce, \"]\",\n-\t\t\tNULL));\n-\t  free (option_text);\n-\t}\n-    }\n   diagnostic->message.x_data = &diagnostic->x_data;\n   diagnostic->x_data = NULL;\n   pp_format (context->printer, &diagnostic->message);\n   (*diagnostic_starter (context)) (context, diagnostic);\n   pp_output_formatted_text (context->printer);\n+  if (context->show_option_requested)\n+    print_option_information (context, diagnostic, orig_diag_kind);\n   (*diagnostic_finalizer (context)) (context, diagnostic);\n   if (context->parseable_fixits_p)\n     {\n       print_parseable_fixits (context->printer, diagnostic->richloc);\n       pp_flush (context->printer);\n     }\n   diagnostic_action_after_output (context, diagnostic->kind);\n-  diagnostic->message.format_spec = saved_format_spec;\n   diagnostic->x_data = NULL;\n \n   if (context->edit_context_ptr)"}]}