{"sha": "8b6ded8d4ff7292cc0c4d9c24a6670d97755aaeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI2ZGVkOGQ0ZmY3MjkyY2MwYzRkOWMyNGE2NjcwZDk3NzU1YWFlYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2009-01-18T12:38:10Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2009-01-18T12:38:10Z"}, "message": "thread (__thread_data_base::__run): Make non-const.\n\n\t* include/std/thread (__thread_data_base::__run): Make non-const.\n\t* testsuite/30_threads/thread/cons/5.cc: New.\n\nFrom-SVN: r143483", "tree": {"sha": "d3e3ad76e04a0068362fb9a131ae775c32b03bcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3e3ad76e04a0068362fb9a131ae775c32b03bcb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b6ded8d4ff7292cc0c4d9c24a6670d97755aaeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b6ded8d4ff7292cc0c4d9c24a6670d97755aaeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b6ded8d4ff7292cc0c4d9c24a6670d97755aaeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b6ded8d4ff7292cc0c4d9c24a6670d97755aaeb/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d2cc6f08117772029621e01bd10e1bc47b9d7b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d2cc6f08117772029621e01bd10e1bc47b9d7b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d2cc6f08117772029621e01bd10e1bc47b9d7b6"}], "stats": {"total": 96, "additions": 94, "deletions": 2}, "files": [{"sha": "786a1e3c90747c7f743f40a0d95c6df034951125", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6ded8d4ff7292cc0c4d9c24a6670d97755aaeb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6ded8d4ff7292cc0c4d9c24a6670d97755aaeb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8b6ded8d4ff7292cc0c4d9c24a6670d97755aaeb", "patch": "@@ -1,3 +1,8 @@\n+2009-01-18  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/std/thread (__thread_data_base::__run): Make non-const.\n+\t* testsuite/30_threads/thread/cons/5.cc: New.\n+\n 2009-01-16  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* src/Makefile.am (sources): Add math_stubs_float.cc."}, {"sha": "00fb018989f83882934798c85fb3de5ae87f69fe", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6ded8d4ff7292cc0c4d9c24a6670d97755aaeb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6ded8d4ff7292cc0c4d9c24a6670d97755aaeb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=8b6ded8d4ff7292cc0c4d9c24a6670d97755aaeb", "patch": "@@ -65,7 +65,7 @@ namespace std\n     __thread_data_base() = default;\n     virtual ~__thread_data_base() = default;\n     \n-    virtual void __run() const = 0;\n+    virtual void __run() = 0;\n     \n     __gthread_t \t_M_thread_handle;\n     __thread_data_ptr \t_M_this_ptr;\n@@ -80,7 +80,7 @@ namespace std\n       : _M_func(std::forward<_Callable>(__f))\n       { }\n \n-      void __run() const\n+      void __run()\n       { _M_func(); }\n \n     private:"}, {"sha": "35ea25abeb1025ffcca0142973718c6900157f63", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/5.cc", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6ded8d4ff7292cc0c4d9c24a6670d97755aaeb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6ded8d4ff7292cc0c4d9c24a6670d97755aaeb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F5.cc?ref=8b6ded8d4ff7292cc0c4d9c24a6670d97755aaeb", "patch": "@@ -0,0 +1,87 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <functional> // std::unary_function\n+#include <utility> // std::ref\n+#include <thread>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+struct nonconst : public std::unary_function<std::thread::id&, void>\n+{\n+  void operator()(std::thread::id& id)\n+  {\n+    id = std::this_thread::get_id();\n+  }\n+};\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try\n+  {\n+    std::thread::id t1_id1;\n+    nonconst c1;\n+    std::thread t1(std::ref(c1), std::ref(t1_id1));\n+    std::thread::id t1_id2 = t1.get_id();\n+    VERIFY( t1.joinable() );\n+    t1.join();\n+    VERIFY( !t1.joinable() );\n+    VERIFY( t1_id1 == t1_id2 );\n+\n+    std::thread::id t2_id1;\n+    nonconst c2;\n+    std::thread t2(c2, std::ref(t2_id1));\n+    std::thread::id t2_id2 = t2.get_id();\n+    VERIFY( t2.joinable() );\n+    t2.join();\n+    VERIFY( !t2.joinable() );\n+    VERIFY( t2_id1 == t2_id2 );\n+  }\n+  catch (const std::system_error&)\n+  {\n+    VERIFY( false );\n+  }\n+  catch (...)\n+  {\n+    VERIFY( false );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}