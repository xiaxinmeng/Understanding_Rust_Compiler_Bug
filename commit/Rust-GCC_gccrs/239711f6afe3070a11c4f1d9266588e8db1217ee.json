{"sha": "239711f6afe3070a11c4f1d9266588e8db1217ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM5NzExZjZhZmUzMDcwYTExYzRmMWQ5MjY2NTg4ZThkYjEyMTdlZQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2014-12-17T14:22:57Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2014-12-17T14:22:57Z"}, "message": "Add -malign-data={abi|compat|cachineline}\n\nAdd -malign-data={abi|compat,cachineline} to control how GCC aligns\nvariables.  \"compat\" uses increased alignment value compatible with\nGCC 4.8 and earlier, \"abi\" uses alignment value as specified by the\npsABI, and \"cacheline\" uses increased alignment value to match the\ncache line size.  \"compat\" is the default.\n\ngcc/\n\n\tPR target/61296\n\t* config/i386/i386-opts.h (ix86_align_data): New enum.\n\t* config/i386/i386.c (ix86_data_alignment): Return the ABI\n\talignment value for -malign-data=abi, the cachine line size\n\tfor -malign-data=cachineline and the older GCC compatible\n\talignment value for for -malign-data=compat.\n\t* config/i386/i386.opt (malign-data=): New.\n\t* doc/invoke.texi: Document -malign-data=.\n\ngcc/testsuite/\n\n\tPR target/61296\n\t* gcc.target/i386/pr61296-2.c: New.\n\t* gcc.target/i386/pr61296-2.c: Likewise.\n\t* gcc.target/i386/pr61296-3.c: Likewise.\n\t* gcc.target/i386/pr61296-4.c: Likewise.\n\t* gcc.target/i386/pr61296-5.c: Likewise.\n\t* gcc.target/i386/pr61296-6.c: Likewise.\n\t* gcc.target/i386/pr61296-7.c: Likewise.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\nCo-Authored-By: Uros Bizjak <ubizjak@gmail.com>\n\nFrom-SVN: r218818", "tree": {"sha": "5ed4b6970db156cc051eed382941098982ed6791", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ed4b6970db156cc051eed382941098982ed6791"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/239711f6afe3070a11c4f1d9266588e8db1217ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/239711f6afe3070a11c4f1d9266588e8db1217ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/239711f6afe3070a11c4f1d9266588e8db1217ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/239711f6afe3070a11c4f1d9266588e8db1217ee/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "52c691fbfb8c78220816b0f72d8d7af71d2b5261", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c691fbfb8c78220816b0f72d8d7af71d2b5261", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52c691fbfb8c78220816b0f72d8d7af71d2b5261"}], "stats": {"total": 256, "additions": 253, "deletions": 3}, "files": [{"sha": "663669b13367f4848d112e55b1702ba9b2c9d128", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239711f6afe3070a11c4f1d9266588e8db1217ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239711f6afe3070a11c4f1d9266588e8db1217ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=239711f6afe3070a11c4f1d9266588e8db1217ee", "patch": "@@ -1,3 +1,16 @@\n+2014-12-17  H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\t    Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/61296\n+\t* config/i386/i386-opts.h (ix86_align_data): New enum.\n+\t* config/i386/i386.c (ix86_data_alignment): Return the ABI\n+\talignment value for -malign-data=abi, the cachine line size\n+\tfor -malign-data=cachineline and the older GCC compatible\n+\talignment value for for -malign-data=compat.\n+\t* config/i386/i386.opt (malign-data=): New.\n+\t* doc/invoke.texi: Document -malign-data=.\n+\n 2014-12-17  Marek Polacek  <polacek@redhat.com>\n \n \tPR middle-end/63568"}, {"sha": "455df43712cdd88a115aa88cfa34dc29ac4578c7", "filename": "gcc/config/i386/i386-opts.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239711f6afe3070a11c4f1d9266588e8db1217ee/gcc%2Fconfig%2Fi386%2Fi386-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239711f6afe3070a11c4f1d9266588e8db1217ee/gcc%2Fconfig%2Fi386%2Fi386-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-opts.h?ref=239711f6afe3070a11c4f1d9266588e8db1217ee", "patch": "@@ -77,6 +77,12 @@ enum pmode {\n   PMODE_DI \t/* Pmode == DImode. */\n };\n \n+enum ix86_align_data {\n+  ix86_align_data_type_compat,\n+  ix86_align_data_type_abi,\n+  ix86_align_data_type_cacheline\n+};\n+\n enum asm_dialect {\n   ASM_ATT,\n   ASM_INTEL"}, {"sha": "17ef75117ff5411bad973f094603ad37f4995ad7", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239711f6afe3070a11c4f1d9266588e8db1217ee/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239711f6afe3070a11c4f1d9266588e8db1217ee/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=239711f6afe3070a11c4f1d9266588e8db1217ee", "patch": "@@ -27191,8 +27191,7 @@ ix86_data_alignment (tree type, int align, bool opt)\n      those compilers, ensure we don't decrease alignment from what we\n      used to assume.  */\n \n-  int max_align_compat\n-    = optimize_size ? BITS_PER_WORD : MIN (256, MAX_OFILE_ALIGNMENT);\n+  int max_align_compat = MIN (256, MAX_OFILE_ALIGNMENT);\n \n   /* A data structure, equal or greater than the size of a cache line\n      (64 bytes in the Pentium 4 and other recent Intel processors, including\n@@ -27205,6 +27204,13 @@ ix86_data_alignment (tree type, int align, bool opt)\n   if (max_align < BITS_PER_WORD)\n     max_align = BITS_PER_WORD;\n \n+  switch (ix86_align_data_type)\n+    {\n+    case ix86_align_data_type_abi: opt = false; break;\n+    case ix86_align_data_type_compat: max_align = BITS_PER_WORD; break;\n+    case ix86_align_data_type_cacheline: break;\n+    }\n+\n   if (opt\n       && AGGREGATE_TYPE_P (type)\n       && TYPE_SIZE (type)"}, {"sha": "3d54bfa19456d4f063e4a764c688d95c7f86de36", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239711f6afe3070a11c4f1d9266588e8db1217ee/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239711f6afe3070a11c4f1d9266588e8db1217ee/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=239711f6afe3070a11c4f1d9266588e8db1217ee", "patch": "@@ -221,6 +221,23 @@ malign-stringops\n Target RejectNegative Report InverseMask(NO_ALIGN_STRINGOPS, ALIGN_STRINGOPS) Save\n Align destination of the string operations\n \n+malign-data=\n+Target RejectNegative Joined Var(ix86_align_data_type) Enum(ix86_align_data) Init(ix86_align_data_type_compat)\n+Use the given data alignment\n+\n+Enum\n+Name(ix86_align_data) Type(enum ix86_align_data)\n+Known data alignment choices (for use with the -malign-data= option):\n+\n+EnumValue\n+Enum(ix86_align_data) String(compat) Value(ix86_align_data_type_compat)\n+\n+EnumValue\n+Enum(ix86_align_data) String(abi) Value(ix86_align_data_type_abi)\n+\n+EnumValue\n+Enum(ix86_align_data) String(cacheline) Value(ix86_align_data_type_cacheline)\n+\n march=\n Target RejectNegative Joined Var(ix86_arch_string)\n Generate code for given CPU"}, {"sha": "15068da33e4d55e9279d7c01bd43a5b085e9c65c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239711f6afe3070a11c4f1d9266588e8db1217ee/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239711f6afe3070a11c4f1d9266588e8db1217ee/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=239711f6afe3070a11c4f1d9266588e8db1217ee", "patch": "@@ -701,7 +701,7 @@ Objective-C and Objective-C++ Dialects}.\n -m32 -m64 -mx32 -m16 -mlarge-data-threshold=@var{num} @gol\n -msse2avx -mfentry -mrecord-mcount -mnop-mcount -m8bit-idiv @gol\n -mavx256-split-unaligned-load -mavx256-split-unaligned-store @gol\n--mstack-protector-guard=@var{guard}}\n+-malign-data=@var{type} -mstack-protector-guard=@var{guard}}\n \n @emph{i386 and x86-64 Windows Options}\n @gccoptlist{-mconsole -mcygwin -mno-cygwin -mdll @gol\n@@ -15682,6 +15682,14 @@ as well as modifying the function calling convention for functions taking\n @code{long double}.  Hence they are not binary-compatible\n with code compiled without that switch.\n \n+@item -malign-data=@var{type}\n+@opindex malign-data\n+Control how GCC aligns variables.  Supported values for @var{type} are\n+@samp{compat} uses increased alignment value compatible uses GCC 4.8\n+and earlier, @samp{abi} uses alignment value as specified by the\n+psABI, and @samp{cacheline} uses increased alignment value to match\n+the cache line size.  @samp{compat} is the default.\n+\n @item -mlarge-data-threshold=@var{threshold}\n @opindex mlarge-data-threshold\n When @option{-mcmodel=medium} is specified, data objects larger than"}, {"sha": "24c5143c64d3041e592fd35fc1cf263806db7a90", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239711f6afe3070a11c4f1d9266588e8db1217ee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239711f6afe3070a11c4f1d9266588e8db1217ee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=239711f6afe3070a11c4f1d9266588e8db1217ee", "patch": "@@ -1,3 +1,14 @@\n+2014-12-17  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/61296\n+\t* gcc.target/i386/pr61296-2.c: New.\n+\t* gcc.target/i386/pr61296-2.c: Likewise.\n+\t* gcc.target/i386/pr61296-3.c: Likewise.\n+\t* gcc.target/i386/pr61296-4.c: Likewise.\n+\t* gcc.target/i386/pr61296-5.c: Likewise.\n+\t* gcc.target/i386/pr61296-6.c: Likewise.\n+\t* gcc.target/i386/pr61296-7.c: Likewise.\n+\n 2014-12-17  Tejas Belagod  <tejas.belagod@arm.com>\n \n \tPR testsuite/64328"}, {"sha": "751dee022cf7b0acdc040f5dc97cfd3da0890528", "filename": "gcc/testsuite/gcc.target/i386/pr61296-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239711f6afe3070a11c4f1d9266588e8db1217ee/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61296-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239711f6afe3070a11c4f1d9266588e8db1217ee/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61296-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61296-1.c?ref=239711f6afe3070a11c4f1d9266588e8db1217ee", "patch": "@@ -0,0 +1,27 @@\n+/* PR target/61296 */\n+/* { dg-do compile { target { *-*-linux* } } } */\n+/* { dg-options \"-O2\" } */\n+\n+struct foo\n+{\n+  char i1[8];\n+  char i2[8];\n+  char i3[8];\n+  char i4[8];\n+  char i5[8];\n+  char i6[8];\n+  char i7[8];\n+  char i8[8];\n+  char i9[8];\n+  char i10[8];\n+  char i11[8];\n+  char i12[8];\n+  char i13[8];\n+  char i14[8];\n+  char i15[8];\n+  char i16[8];\n+};\n+\n+struct foo x = { 1 };\n+\n+/* { dg-final { scan-assembler \".align\\[ \\t]*32\\[^:]*\\[\\n\\r]x:\" } } */"}, {"sha": "59995559d76ef1da6359196500571483f84f0fa7", "filename": "gcc/testsuite/gcc.target/i386/pr61296-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239711f6afe3070a11c4f1d9266588e8db1217ee/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61296-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239711f6afe3070a11c4f1d9266588e8db1217ee/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61296-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61296-2.c?ref=239711f6afe3070a11c4f1d9266588e8db1217ee", "patch": "@@ -0,0 +1,27 @@\n+/* PR target/61296 */\n+/* { dg-do compile { target { *-*-linux* } } } */\n+/* { dg-options \"-O2 -malign-data=cacheline\" } */\n+\n+struct foo\n+{\n+  char i1[8];\n+  char i2[8];\n+  char i3[8];\n+  char i4[8];\n+  char i5[8];\n+  char i6[8];\n+  char i7[8];\n+  char i8[8];\n+  char i9[8];\n+  char i10[8];\n+  char i11[8];\n+  char i12[8];\n+  char i13[8];\n+  char i14[8];\n+  char i15[8];\n+  char i16[8];\n+};\n+\n+struct foo x = { 1 };\n+\n+/* { dg-final { scan-assembler \".align\\[ \\t]*64\\[^:]*\\[\\n\\r]x:\" } } */"}, {"sha": "d0152f78f58c7628395cbb7c2986e3335423fa4a", "filename": "gcc/testsuite/gcc.target/i386/pr61296-3.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239711f6afe3070a11c4f1d9266588e8db1217ee/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61296-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239711f6afe3070a11c4f1d9266588e8db1217ee/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61296-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61296-3.c?ref=239711f6afe3070a11c4f1d9266588e8db1217ee", "patch": "@@ -0,0 +1,27 @@\n+/* PR target/61296 */\n+/* { dg-do compile { target { *-*-linux* } } } */\n+/* { dg-options \"-O2 -malign-data=abi\" } */\n+\n+struct foo\n+{\n+  char i1[8];\n+  char i2[8];\n+  char i3[8];\n+  char i4[8];\n+  char i5[8];\n+  char i6[8];\n+  char i7[8];\n+  char i8[8];\n+  char i9[8];\n+  char i10[8];\n+  char i11[8];\n+  char i12[8];\n+  char i13[8];\n+  char i14[8];\n+  char i15[8];\n+  char i16[8];\n+};\n+\n+struct foo x = { 1 };\n+\n+/* { dg-final { scan-assembler-not \".align\\[ \\t]*\\[0-9\\]+\\[^:]*\\[\\n\\r]x:\" } } */"}, {"sha": "95e1ac6c634b2229967a9b2ff30c8705e0bf40f6", "filename": "gcc/testsuite/gcc.target/i386/pr61296-4.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239711f6afe3070a11c4f1d9266588e8db1217ee/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61296-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239711f6afe3070a11c4f1d9266588e8db1217ee/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61296-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61296-4.c?ref=239711f6afe3070a11c4f1d9266588e8db1217ee", "patch": "@@ -0,0 +1,27 @@\n+/* PR target/61296 */\n+/* { dg-do compile { target { *-*-linux* } } } */\n+/* { dg-options \"-O2 -malign-data=cacheline -malign-data=abi\" } */\n+\n+struct foo\n+{\n+  char i1[8];\n+  char i2[8];\n+  char i3[8];\n+  char i4[8];\n+  char i5[8];\n+  char i6[8];\n+  char i7[8];\n+  char i8[8];\n+  char i9[8];\n+  char i10[8];\n+  char i11[8];\n+  char i12[8];\n+  char i13[8];\n+  char i14[8];\n+  char i15[8];\n+  char i16[8];\n+};\n+\n+struct foo x = { 1 };\n+\n+/* { dg-final { scan-assembler-not \".align\\[ \\t]*\\[0-9\\]+\\[^:]*\\[\\n\\r]x:\" } } */"}, {"sha": "5caa77c223a1f636ccdc428cb218c236cd031952", "filename": "gcc/testsuite/gcc.target/i386/pr61296-5.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239711f6afe3070a11c4f1d9266588e8db1217ee/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61296-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239711f6afe3070a11c4f1d9266588e8db1217ee/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61296-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61296-5.c?ref=239711f6afe3070a11c4f1d9266588e8db1217ee", "patch": "@@ -0,0 +1,27 @@\n+/* PR target/61296 */\n+/* { dg-do compile { target { *-*-linux* } } } */\n+/* { dg-options \"-O2 -malign-data=abi -malign-data=cacheline\" } */\n+\n+struct foo\n+{\n+  char i1[8];\n+  char i2[8];\n+  char i3[8];\n+  char i4[8];\n+  char i5[8];\n+  char i6[8];\n+  char i7[8];\n+  char i8[8];\n+  char i9[8];\n+  char i10[8];\n+  char i11[8];\n+  char i12[8];\n+  char i13[8];\n+  char i14[8];\n+  char i15[8];\n+  char i16[8];\n+};\n+\n+struct foo x = { 1 };\n+\n+/* { dg-final { scan-assembler \".align\\[ \\t]*64\\[^:]*\\[\\n\\r]x:\" } } */"}, {"sha": "8e0d535dc0098590e529bda27d4166ce0f944534", "filename": "gcc/testsuite/gcc.target/i386/pr61296-6.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239711f6afe3070a11c4f1d9266588e8db1217ee/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61296-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239711f6afe3070a11c4f1d9266588e8db1217ee/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61296-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61296-6.c?ref=239711f6afe3070a11c4f1d9266588e8db1217ee", "patch": "@@ -0,0 +1,27 @@\n+/* PR target/61296 */\n+/* { dg-do compile { target { *-*-linux* } } } */\n+/* { dg-options \"-O2 -malign-data=cacheline -malign-data=compat\" } */\n+\n+struct foo\n+{\n+  char i1[8];\n+  char i2[8];\n+  char i3[8];\n+  char i4[8];\n+  char i5[8];\n+  char i6[8];\n+  char i7[8];\n+  char i8[8];\n+  char i9[8];\n+  char i10[8];\n+  char i11[8];\n+  char i12[8];\n+  char i13[8];\n+  char i14[8];\n+  char i15[8];\n+  char i16[8];\n+};\n+\n+struct foo x = { 1 };\n+\n+/* { dg-final { scan-assembler \".align\\[ \\t]*32\\[^:]*\\[\\n\\r]x:\" } } */"}, {"sha": "6a67c9032e8aaaa3f79f82f73a1438a225518665", "filename": "gcc/testsuite/gcc.target/i386/pr61296-7.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239711f6afe3070a11c4f1d9266588e8db1217ee/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61296-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239711f6afe3070a11c4f1d9266588e8db1217ee/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61296-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr61296-7.c?ref=239711f6afe3070a11c4f1d9266588e8db1217ee", "patch": "@@ -0,0 +1,27 @@\n+/* PR target/61296 */\n+/* { dg-do compile { target { *-*-linux* } } } */\n+/* { dg-options \"-O2 -malign-data=compat -malign-data=abi\" } */\n+\n+struct foo\n+{\n+  char i1[8];\n+  char i2[8];\n+  char i3[8];\n+  char i4[8];\n+  char i5[8];\n+  char i6[8];\n+  char i7[8];\n+  char i8[8];\n+  char i9[8];\n+  char i10[8];\n+  char i11[8];\n+  char i12[8];\n+  char i13[8];\n+  char i14[8];\n+  char i15[8];\n+  char i16[8];\n+};\n+\n+struct foo x = { 1 };\n+\n+/* { dg-final { scan-assembler-not \".align\\[ \\t]*\\[0-9\\]+\\[^:]*\\[\\n\\r]x:\" } } */"}]}