{"sha": "c832cf1c1d114aed70c2f84566cf4d63de0a56d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgzMmNmMWMxZDExNGFlZDcwYzJmODQ1NjZjZjRkNjNkZTBhNTZkMA==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2020-07-03T06:13:19Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2020-07-08T06:02:16Z"}, "message": "libstdc++: Fix [multi]map/[multi]set move constructors noexcept qualification\n\nContainer move constructors shall not consider their allocator move\nconstructor qualification.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/stl_tree.h (_Rb_tree_impl(_Rb_tree_impl&&)): Add noexcept\n\tqualification based only on _Compare one.\n\t* testsuite/23_containers/map/cons/noexcept_move_construct.cc: Add\n\tstatic asserts.\n\t* testsuite/23_containers/multimap/cons/noexcept_move_construct.cc:\n\tLikewise.\n\t* testsuite/23_containers/multiset/cons/noexcept_move_construct.cc:\n\tLikewise.\n\t* testsuite/23_containers/set/cons/noexcept_move_construct.cc: Likewise.", "tree": {"sha": "3ad06482bfec1acc87dd302917afe424385ecef1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ad06482bfec1acc87dd302917afe424385ecef1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c832cf1c1d114aed70c2f84566cf4d63de0a56d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c832cf1c1d114aed70c2f84566cf4d63de0a56d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c832cf1c1d114aed70c2f84566cf4d63de0a56d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c832cf1c1d114aed70c2f84566cf4d63de0a56d0/comments", "author": null, "committer": null, "parents": [{"sha": "fccb41b909cb207174d3270ce69e6729e2db28fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fccb41b909cb207174d3270ce69e6729e2db28fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fccb41b909cb207174d3270ce69e6729e2db28fa"}], "stats": {"total": 132, "additions": 127, "deletions": 5}, "files": [{"sha": "21b72cebf2e078ae893c61917ff1094b81bfeefd", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c832cf1c1d114aed70c2f84566cf4d63de0a56d0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c832cf1c1d114aed70c2f84566cf4d63de0a56d0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=c832cf1c1d114aed70c2f84566cf4d63de0a56d0", "patch": "@@ -698,7 +698,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  : _Node_allocator(__a), _Base_key_compare(__comp)\n \t  { }\n #else\n-\t  _Rb_tree_impl(_Rb_tree_impl&&) = default;\n+\t  _Rb_tree_impl(_Rb_tree_impl&&)\n+\t    noexcept( is_nothrow_move_constructible<_Base_key_compare>::value )\n+\t  = default;\n \n \t  explicit\n \t  _Rb_tree_impl(_Node_allocator&& __a)"}, {"sha": "25d1c9b5aca37f54015b2f14e383d6b370d0b6c8", "filename": "libstdc++-v3/testsuite/23_containers/map/cons/noexcept_move_construct.cc", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c832cf1c1d114aed70c2f84566cf4d63de0a56d0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcons%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c832cf1c1d114aed70c2f84566cf4d63de0a56d0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcons%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcons%2Fnoexcept_move_construct.cc?ref=c832cf1c1d114aed70c2f84566cf4d63de0a56d0", "patch": "@@ -29,6 +29,33 @@ static_assert( std::is_nothrow_constructible<mtype,\n \t       mtype&&, const typename mtype::allocator_type&>::value,\n \t       \"noexcept move constructor with allocator\" );\n \n+template<typename Type>\n+  class not_noexcept_move_constructor_alloc : public std::allocator<Type>\n+  {\n+  public:\n+    not_noexcept_move_constructor_alloc() noexcept { }\n+\n+    not_noexcept_move_constructor_alloc(\n+\tconst not_noexcept_move_constructor_alloc& x) noexcept\n+    : std::allocator<Type>(x)\n+    { }\n+\n+    not_noexcept_move_constructor_alloc(\n+\tnot_noexcept_move_constructor_alloc&& x) noexcept(false)\n+    : std::allocator<Type>(std::move(x))\n+    { }\n+\n+    template<typename _Tp1>\n+      struct rebind\n+      { typedef not_noexcept_move_constructor_alloc<_Tp1> other; };\n+  };\n+\n+typedef std::map<int, int, std::less<int>,\n+\t\t not_noexcept_move_constructor_alloc<std::pair<const int, int>>> amtype;\n+\n+static_assert( std::is_nothrow_move_constructible<amtype>::value,\n+\t       \"noexcept move constructor with not noexcept alloc\" );\n+\n struct not_noexcept_less\n {\n   not_noexcept_less() = default;\n@@ -42,6 +69,9 @@ struct not_noexcept_less\n \n typedef std::map<int, int, not_noexcept_less> emtype;\n \n+static_assert( !std::is_nothrow_move_constructible<emtype>::value,\n+\t       \"not noexcept move constructor with not noexcept less\" );\n+\n static_assert( !std::is_nothrow_constructible<emtype, emtype&&,\n \t       const typename emtype::allocator_type&>::value,\n-\t       \"except move constructor with allocator\" );\n+\t       \"not noexcept move constructor with allocator\" );"}, {"sha": "af545ae297c07545a6214545392ea16fec215608", "filename": "libstdc++-v3/testsuite/23_containers/multimap/cons/noexcept_move_construct.cc", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c832cf1c1d114aed70c2f84566cf4d63de0a56d0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fcons%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c832cf1c1d114aed70c2f84566cf4d63de0a56d0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fcons%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fcons%2Fnoexcept_move_construct.cc?ref=c832cf1c1d114aed70c2f84566cf4d63de0a56d0", "patch": "@@ -29,6 +29,33 @@ static_assert( std::is_nothrow_constructible<mmtype,\n \t       mmtype&&, const typename mmtype::allocator_type&>::value,\n \t       \"noexcept move constructor with allocator\" );\n \n+template<typename Type>\n+  class not_noexcept_move_constructor_alloc : public std::allocator<Type>\n+  {\n+  public:\n+    not_noexcept_move_constructor_alloc() noexcept { }\n+\n+    not_noexcept_move_constructor_alloc(\n+\tconst not_noexcept_move_constructor_alloc& x) noexcept\n+    : std::allocator<Type>(x)\n+    { }\n+\n+    not_noexcept_move_constructor_alloc(\n+\tnot_noexcept_move_constructor_alloc&& x) noexcept(false)\n+    : std::allocator<Type>(std::move(x))\n+    { }\n+\n+    template<typename _Tp1>\n+      struct rebind\n+      { typedef not_noexcept_move_constructor_alloc<_Tp1> other; };\n+  };\n+\n+typedef std::multimap<int, int, std::less<int>,\n+\t\t      not_noexcept_move_constructor_alloc<std::pair<const int, int>>> ammtype;\n+\n+static_assert( std::is_nothrow_move_constructible<ammtype>::value,\n+\t       \"noexcept move constructor with not noexcept alloc\" );\n+\n struct not_noexcept_less\n {\n   not_noexcept_less() = default;\n@@ -42,6 +69,9 @@ struct not_noexcept_less\n \n typedef std::multimap<int, int, not_noexcept_less> emmtype;\n \n+static_assert( !std::is_nothrow_move_constructible<emmtype>::value,\n+\t       \"not noexcept move constructor with not noexcept less\" );\n+\n static_assert( !std::is_nothrow_constructible<emmtype, emmtype&&,\n \t       const typename emmtype::allocator_type&>::value,\n-\t       \"except move constructor with allocator\" );\n+\t       \"not noexcept move constructor with allocator\" );"}, {"sha": "ed4d9128606da7a6fdb2bfd8004d5b81e88554aa", "filename": "libstdc++-v3/testsuite/23_containers/multiset/cons/noexcept_move_construct.cc", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c832cf1c1d114aed70c2f84566cf4d63de0a56d0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcons%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c832cf1c1d114aed70c2f84566cf4d63de0a56d0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcons%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcons%2Fnoexcept_move_construct.cc?ref=c832cf1c1d114aed70c2f84566cf4d63de0a56d0", "patch": "@@ -29,6 +29,33 @@ static_assert( std::is_nothrow_constructible<mstype,\n \t       mstype&&, const typename mstype::allocator_type&>::value,\n \t       \"noexcept move constructor with allocator\" );\n \n+template<typename Type>\n+  class not_noexcept_move_constructor_alloc : public std::allocator<Type>\n+  {\n+  public:\n+    not_noexcept_move_constructor_alloc() noexcept { }\n+\n+    not_noexcept_move_constructor_alloc(\n+\tconst not_noexcept_move_constructor_alloc& x) noexcept\n+    : std::allocator<Type>(x)\n+    { }\n+\n+    not_noexcept_move_constructor_alloc(\n+\tnot_noexcept_move_constructor_alloc&& x) noexcept(false)\n+    : std::allocator<Type>(std::move(x))\n+    { }\n+\n+    template<typename _Tp1>\n+      struct rebind\n+      { typedef not_noexcept_move_constructor_alloc<_Tp1> other; };\n+  };\n+\n+typedef std::multiset<int, std::less<int>,\n+\t\t not_noexcept_move_constructor_alloc<int>> amstype;\n+\n+static_assert( std::is_nothrow_move_constructible<amstype>::value,\n+\t       \"noexcept move constructor with not noexcept alloc\" );\n+\n struct not_noexcept_less\n {\n   not_noexcept_less() = default;\n@@ -42,6 +69,9 @@ struct not_noexcept_less\n \n typedef std::multiset<int, not_noexcept_less> emstype;\n \n+static_assert( !std::is_nothrow_move_constructible<emstype>::value,\n+\t       \"not noexcept move constructor with not noexcept less\" );\n+\n static_assert( !std::is_nothrow_constructible<emstype, emstype&&,\n \t       const typename emstype::allocator_type&>::value,\n-\t       \"except move constructor with allocator\" );\n+\t       \"not noexcept move constructor with allocator\" );"}, {"sha": "dc96236a6689a1282375acd458e3d96f1eaf1bd8", "filename": "libstdc++-v3/testsuite/23_containers/set/cons/noexcept_move_construct.cc", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c832cf1c1d114aed70c2f84566cf4d63de0a56d0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c832cf1c1d114aed70c2f84566cf4d63de0a56d0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fnoexcept_move_construct.cc?ref=c832cf1c1d114aed70c2f84566cf4d63de0a56d0", "patch": "@@ -29,6 +29,33 @@ static_assert( std::is_nothrow_constructible<stype,\n \t       stype&&, const typename stype::allocator_type&>::value,\n \t       \"noexcept move constructor with allocator\" );\n \n+template<typename Type>\n+  class not_noexcept_move_constructor_alloc : public std::allocator<Type>\n+  {\n+  public:\n+    not_noexcept_move_constructor_alloc() noexcept { }\n+\n+    not_noexcept_move_constructor_alloc(\n+\tconst not_noexcept_move_constructor_alloc& x) noexcept\n+    : std::allocator<Type>(x)\n+    { }\n+\n+    not_noexcept_move_constructor_alloc(\n+\tnot_noexcept_move_constructor_alloc&& x) noexcept(false)\n+    : std::allocator<Type>(std::move(x))\n+    { }\n+\n+    template<typename _Tp1>\n+      struct rebind\n+      { typedef not_noexcept_move_constructor_alloc<_Tp1> other; };\n+  };\n+\n+typedef std::set<int, std::less<int>,\n+\t\t not_noexcept_move_constructor_alloc<int>> astype;\n+\n+static_assert( std::is_nothrow_move_constructible<astype>::value,\n+\t       \"noexcept move constructor with not noexcept alloc\" );\n+\n struct not_noexcept_less\n {\n   not_noexcept_less() = default;\n@@ -42,6 +69,9 @@ struct not_noexcept_less\n \n typedef std::set<int, not_noexcept_less> estype;\n \n+static_assert( !std::is_nothrow_move_constructible<estype>::value,\n+\t       \"not noexcept move constructor with not noexcept less\" );\n+\n static_assert( !std::is_nothrow_constructible<estype, estype&&,\n \t       const typename estype::allocator_type&>::value,\n-\t       \"except move constructor with allocator\" );\n+\t       \"not noexcept move constructor with allocator\" );"}]}