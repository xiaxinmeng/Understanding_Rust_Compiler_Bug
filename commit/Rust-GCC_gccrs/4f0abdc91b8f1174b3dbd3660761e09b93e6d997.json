{"sha": "4f0abdc91b8f1174b3dbd3660761e09b93e6d997", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYwYWJkYzkxYjhmMTE3NGIzZGJkMzY2MDc2MWUwOWI5M2U2ZDk5Nw==", "commit": {"author": {"name": "Andreas Tobler", "email": "a.tobler@schweiz.org", "date": "2006-10-25T20:18:39Z"}, "committer": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2006-10-25T20:18:39Z"}, "message": "natevents.cc (do_callback_arg_tests): Replace formatting modifiers %p with %#llx and cast the arguments.\n\n2006-10-25  Andreas Tobler  <a.tobler@schweiz.org>\n\n\t* testsuite/libjava.jvmti/natevents.cc (do_callback_arg_tests): Replace\n\tformatting modifiers %p with %#llx and cast the arguments.\n\nFrom-SVN: r118040", "tree": {"sha": "45cd524d7c87d0dcb4d008fdf7043464595b32a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45cd524d7c87d0dcb4d008fdf7043464595b32a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f0abdc91b8f1174b3dbd3660761e09b93e6d997", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0abdc91b8f1174b3dbd3660761e09b93e6d997", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f0abdc91b8f1174b3dbd3660761e09b93e6d997", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0abdc91b8f1174b3dbd3660761e09b93e6d997/comments", "author": null, "committer": null, "parents": [{"sha": "76f6e118d8d647d22e7c8a082b45a965d2b0956a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76f6e118d8d647d22e7c8a082b45a965d2b0956a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76f6e118d8d647d22e7c8a082b45a965d2b0956a"}], "stats": {"total": 157, "additions": 97, "deletions": 60}, "files": [{"sha": "e18d7caf2a08f6f036cadcf6e319923b2310ff2a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0abdc91b8f1174b3dbd3660761e09b93e6d997/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0abdc91b8f1174b3dbd3660761e09b93e6d997/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=4f0abdc91b8f1174b3dbd3660761e09b93e6d997", "patch": "@@ -1,3 +1,8 @@\n+2006-10-25  Andreas Tobler  <a.tobler@schweiz.org>\n+\n+\t* testsuite/libjava.jvmti/natevents.cc (do_callback_arg_tests): Replace\n+\tformatting modifiers %p with %#llx and cast the arguments.\n+\n 2006-10-20  Tom Tromey  <tromey@redhat.com>\n \n \t* testsuite/libjava.jvmti/natevents.cc (do_callback_arg_tests):"}, {"sha": "73c1449541fcefd256b98c89415ca314d2a1204d", "filename": "libjava/testsuite/libjava.jvmti/natevents.cc", "status": "modified", "additions": 92, "deletions": 60, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0abdc91b8f1174b3dbd3660761e09b93e6d997/libjava%2Ftestsuite%2Flibjava.jvmti%2Fnatevents.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0abdc91b8f1174b3dbd3660761e09b93e6d997/libjava%2Ftestsuite%2Flibjava.jvmti%2Fnatevents.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jvmti%2Fnatevents.cc?ref=4f0abdc91b8f1174b3dbd3660761e09b93e6d997", "patch": "@@ -56,25 +56,28 @@ print_events ()\n static void\n VMInitCB (jvmtiEnv *env, JNIEnv *jni_env, jthread thread)\n {\n-  printf (\"VMInitCB jni_env=%p thread=%p\\n\", jni_env, thread);\n+  printf (\"VMInitCB jni_env=%#llx thread=%#llx\\n\",\n+\t  (unsigned long long) jni_env, (unsigned long long) thread);\n }\n \n static void\n VMDeathCB (jvmtiEnv *env, JNIEnv *jni_env)\n {\n-  printf (\"VMDeathCB jni_env=%p\\n\", jni_env);\n+  printf (\"VMDeathCB jni_env=%#llx\\n\", (unsigned long long) jni_env);\n }\n \n static void\n ThreadStartCB (jvmtiEnv *env, JNIEnv *jni_env, jthread thread)\n {\n-  printf (\"ThreadStartCB jni_env=%p thread=%p\\n\", jni_env, thread);\n+  printf (\"ThreadStartCB jni_env=%#llx thread=%#llx\\n\",\n+\t  (unsigned long long) jni_env, (unsigned long long) thread);\n }\n \n static void\n ThreadEndCB (jvmtiEnv *env, JNIEnv *jni_env, jthread thread)\n {\n-  printf (\"ThreadEndCB jni_env=%p thread=%p\\n\", jni_env, thread);\n+  printf (\"ThreadEndCB jni_env=%#llx thread=%#llx\\n\",\n+\t  (unsigned long long) jni_env, (unsigned long long) thread);\n }\n \n static void\n@@ -84,68 +87,80 @@ ClassFileLoadHookCB (jvmtiEnv *env, JNIEnv *jni_env,\n \t\t     jint class_data_len, const unsigned char *class_data,\n \t\t     jint *new_class_data_len, unsigned char **new_class_data)\n {\n-  printf (\"ClassFileLoadHookCB jni_env=%p class_being_redefined=%p loader=%p\",\n-\t  jni_env, class_being_redefined, loader);\n-  printf (\" name=%s protection_domain=%p class_data_len=%d class_data=%p\",\n-\t  name, protection_domain, (int) class_data_len, class_data);\n-  printf (\" new_class_data_len=%p new_class_data=%p\\n\", new_class_data_len,\n+  printf (\"ClassFileLoadHookCB jni_env=%#llx class_being_redefined=%#llx\"\n+\t  \" loader=%#llx\", (unsigned long long) jni_env, (unsigned long long)\n+\t  class_being_redefined, (unsigned long long) loader);\n+  printf (\" name=%s protection_domain=%#llx class_data_len=%d class_data=%#llx\",\n+\t  name, (unsigned long long) protection_domain, (int) class_data_len,\n+\t  (unsigned long long) class_data);\n+  printf (\" new_class_data_len=%#llx new_class_data=%#llx\\n\",\n+\t  (unsigned long long) new_class_data_len, (unsigned long long)\n \t  new_class_data);\n }\n \n static void\n ClassLoadCB (jvmtiEnv *env, JNIEnv *jni_env, jthread thread, jclass klass)\n {\n-  printf (\"ClassLoadCB jni_env=%p thread=%p klass=%p\\n\", jni_env, thread,\n-\t  klass);\n+  printf (\"ClassLoadCB jni_env=%#llx thread=%#llx klass=%#llx\\n\",\n+\t  (unsigned long long) jni_env, (unsigned long long) thread,\n+\t  (unsigned long long) klass);\n }\n \n static void\n ClassPrepareCB (jvmtiEnv *env, JNIEnv *jni_env, jthread thread, jclass klass)\n {\n-  printf (\"ClassPrepareCB jni_env=%p thread=%p klass=%p\\n\", jni_env,\n-\t  thread, klass);\n+  printf (\"ClassPrepareCB jni_env=%#llx thread=%#llx klass=%#llx\\n\",\n+\t  (unsigned long long)jni_env, (unsigned long long) thread,\n+\t  (unsigned long long) klass);\n }\n \n static void\n VMStartCB (jvmtiEnv *env, JNIEnv *jni_env)\n {\n-  printf (\"VMStartCB jni_env=%p\\n\", jni_env);\n+  printf (\"VMStartCB jni_env=%#llx\\n\", (unsigned long long) jni_env);\n }\n \n static void\n ExceptionCB (jvmtiEnv *env, JNIEnv *jni_env, jthread thread, jmethodID method,\n \t     jlocation location, jobject exception, jmethodID catch_method,\n \t     jlocation catch_location)\n {\n-  printf (\"ExceptionCB jni_env=%p thread=%p method=%p location=%#llx\", jni_env,\n-\t  thread, method, (unsigned long long) location);\n-  printf (\" exception=%p catch_method=%p catch_location=%#llx\\n\", exception,\n-\t  catch_method, (unsigned long long) catch_location);\n+  printf (\"ExceptionCB jni_env=%#llx thread=%#llx method=%#llx location=%#llx\",\n+\t  (unsigned long long) jni_env, (unsigned long long) thread,\n+\t  (unsigned long long) method, (unsigned long long) location);\n+  printf (\" exception=%#llx catch_method=%#llx catch_location=%#llx\\n\",\n+\t  (unsigned long long) exception, (unsigned long long) catch_method,\n+\t  (unsigned long long) catch_location);\n }\n \n static void\n ExceptionCatchCB (jvmtiEnv *env, JNIEnv *jni_env, jthread thread,\n \t\t  jmethodID method, jlocation location, jobject exception)\n {\n-  printf (\"ExceptionCatchCB jni_env=%p thread=%p method=%p location=%#llx\",\n-\t  jni_env, thread, method, (unsigned long long) location);\n-  printf (\" exception=%p\\n\", exception);\n+  printf (\"ExceptionCatchCB jni_env=%#llx thread=%#llx method=%#llx\"\n+\t  \" location=%#llx\",\n+\t  (unsigned long long) jni_env, (unsigned long long) thread,\n+\t  (unsigned long long) method, (unsigned long long) location);\n+  printf (\" exception=%#llx\\n\", (unsigned long long) exception);\n }\n \n static void\n SingleStepCB (jvmtiEnv *env, JNIEnv *jni_env, jthread thread, jmethodID method,\n \t      jlocation location)\n {\n-  printf (\"SingleStepCB jni_env=%p thread=%p method=%p location=%#llx\\n\", \n-\t  jni_env, thread, method, (unsigned long long) location);\n+  printf (\"SingleStepCB jni_env=%#llx thread=%#llx method=%#llx\"\n+\t  \" location=%#llx\\n\",\n+\t  (unsigned long long) jni_env, (unsigned long long) thread,\n+\t  (unsigned long long) method, (unsigned long long) location);\n }\n \n static void\n FramePopCB (jvmtiEnv *env, JNIEnv *jni_env, jthread thread, jmethodID method,\n \t    jboolean was_popped_by_exception)\n {\n-  printf (\"FramePopCB jni_env=%p thread=%p method=%p\", jni_env, thread,\n-\t  method);\n+  printf (\"FramePopCB jni_env=%#llx thread=%#llx method=%#llx\",\n+\t  (unsigned long long) jni_env, (unsigned long long) thread,\n+\t  (unsigned long long) method);\n   printf (\" was_pooped_by_exception=%d\\n\", (was_popped_by_exception ?\n \t\t\t\t\t    1 : 0));\n }\n@@ -154,18 +169,22 @@ static void\n BreakpointCB (jvmtiEnv *env, JNIEnv *jni_env, jthread thread, jmethodID method,\n \t      jlocation location)\n {\n-  printf (\"BreakpointCB  jni_env=%p thread=%p method=%p location=%#llx\\n\",\n-\t  jni_env, thread, method, (unsigned long long) location);\n+  printf (\"BreakpointCB  jni_env=%#llx thread=%#llx method=%#llx\"\n+\t  \" location=%#llx\\n\", (unsigned long long) jni_env,\n+\t  (unsigned long long) thread, (unsigned long long) method,\n+\t  (unsigned long long) location);\n }\n \n static void\n FieldAccessCB (jvmtiEnv *env, JNIEnv *jni_env, jthread thread,\n \t       jmethodID method, jlocation location, jclass field_klass,\n \t       jobject object, jfieldID field)\n {\n-  printf (\"FieldAccessCB jni_env=%p thread=%p method=%p location=%#llx\",\n-\t  jni_env, thread, method, (unsigned long long) location);\n-  printf (\" field_klass=%p object=%p field=%p\\n\", field_klass, object, field);\n+  printf (\"FieldAccessCB jni_env=%#llx thread=%#llx method=%#llx\"\n+\t  \" location=%#llx\", (unsigned long long) jni_env, (unsigned long long)\n+\t  thread, (unsigned long long) method, (unsigned long long) location);\n+  printf (\" field_klass=%#llx object=%#llx field=%#llx\\n\", (unsigned long long)\n+\t  field_klass, (unsigned long long) object, (unsigned long long) field);\n }\n \n static void\n@@ -175,28 +194,32 @@ FieldModificationCB (jvmtiEnv *env, JNIEnv *jni_env, jthread thread,\n \t\t     jvalue new_value)\n \n {\n-  printf (\"FieldModificationCB  jni_env=%p thread=%p method=%p location=%#llx\",\n-\t  jni_env, thread, method, (unsigned long long) location);\n-  printf (\" field_klass=%p object=%p field=%p signature_type=%c\", field_klass,\n-\t  object, field, signature_type);\n+  printf (\"FieldModificationCB  jni_env=%#llx thread=%#llx method=%#llx\"\n+\t  \" location=%#llx\", (unsigned long long) jni_env, (unsigned long long)\n+\t  thread, (unsigned long long) method, (unsigned long long) location);\n+  printf (\" field_klass=%#llx object=%#llx field=%#llx signature_type=%c\",\n+\t  (unsigned long long) field_klass, (unsigned long long) object,\n+\t  (unsigned long long) field, signature_type);\n   printf (\" new_value=%d\\n\", (int) new_value.i);\n }\n \n static void\n MethodEntryCB (jvmtiEnv *env, JNIEnv *jni_env, jthread thread,\n \t       jmethodID method)\n {\n-  printf (\"MethodEntryCB jni_env=%p thread=%p method=%p\\n\", jni_env, thread,\n-\t  method);\n+  printf (\"MethodEntryCB jni_env=%#llx thread=%#llx method=%#llx\\n\",\n+\t  (unsigned long long) jni_env, (unsigned long long) thread,\n+\t  (unsigned long long) method);\n }\n \n static void\n MethodExitCB (jvmtiEnv *env, JNIEnv *jni_env, jthread thread,\n \t      jmethodID method, jboolean was_popped_by_exception,\n \t      jvalue return_value)\n {\n-  printf (\"MethodExitCB jni_env=%p thread=%p method=%p\", jni_env, thread,\n-\t  method);\n+  printf (\"MethodExitCB jni_env=%#llx thread=%#llx method=%#llx\",\n+\t  (unsigned long long) jni_env, (unsigned long long) thread,\n+\t  (unsigned long long) method);\n   printf (\" was_popped_by_exception=%d return_value=%d\\n\",\n \t  (was_popped_by_exception) ? 1 : 0, (int) return_value.i);\n }\n@@ -205,9 +228,11 @@ static void\n NativeMethodBindCB (jvmtiEnv *env, JNIEnv *jni_env, jthread thread,\n \t\t    jmethodID method, void *address, void **new_address_ptr)\n {\n-  printf (\"NativeMethodBindCB jni_env=%p thread=%p method=%p\", jni_env,\n-\t  thread, method);\n-  printf (\" address=%p new_address_ptr=%p\\n\", address, new_address_ptr);\n+  printf (\"NativeMethodBindCB jni_env=%#llx thread=%#llx method=%#llx\",\n+\t  (unsigned long long) jni_env, (unsigned long long) thread,\n+\t  (unsigned long long) method);\n+  printf (\" address=%#llx new_address_ptr=%#llx\\n\", (unsigned long long)\n+\t  address, (unsigned long long) new_address_ptr);\n }\n \n static void\n@@ -216,25 +241,26 @@ CompiledMethodLoadCB (jvmtiEnv *env, jmethodID method, jint code_size,\n \t\t      const jvmtiAddrLocationMap *map,\n \t\t      const void *compile_info)\n {\n-  printf (\"CompiledMethodLoadCB method=%p code_size=%#x code_addr=%p\",\n-\t  method, (unsigned) code_size, code_addr);\n-  printf (\" map_length=%d map=%p compile_info=%p\\n\", (int) map_length, map,\n-\t  compile_info);\n+  printf (\"CompiledMethodLoadCB method=%#llx code_size=%#llx code_addr=%#llx\",\n+\t  (unsigned long long) method, (unsigned long long) code_size,\n+\t  (unsigned long long) code_addr);\n+  printf (\" map_length=%d map=%#llx compile_info=%#llx\\n\", (int) map_length,\n+\t  (unsigned long long) map, (unsigned long long) compile_info);\n }\n \n static void\n CompiledMethodUnloadCB (jvmtiEnv *env, jmethodID method, const void *code_addr)\n {\n-  printf (\"CompiledMethodUnloadCB method=%p code_addr=%p\\n\", method, \n-\t  code_addr);\n+  printf (\"CompiledMethodUnloadCB method=%#llx code_addr=%#llx\\n\",\n+\t  (unsigned long long) method, (unsigned long long) code_addr);\n }\n \n static void\n DynamicCodeGeneratedCB (jvmtiEnv *env, const char *name, const void *address,\n \t\t\tjint length)\n {\n-  printf (\"DynamicCodeGeneratedCB name=%s address=%p length=%d\\n\", name,\n-\t  address, (int) length);\n+  printf (\"DynamicCodeGeneratedCB name=%s address=%#llx length=%d\\n\", name,\n+\t  (unsigned long long) address, (int) length);\n }\n \n static void\n@@ -247,32 +273,36 @@ static void\n MonitorWaitCB (jvmtiEnv *env, JNIEnv *jni_env, jthread thread, jobject object,\n \t       jlong timeout)\n {\n-  printf (\"MonitorWaitCB jni_env=%p thread=%p object=%p timeout=%ld\\n\",\n-\t  jni_env, thread, object, (long) timeout);\n+  printf (\"MonitorWaitCB jni_env=%#llx thread=%#llx object=%#llx timeout=%ld\\n\",\n+\t  (unsigned long long) jni_env, (unsigned long long) thread,\n+\t  (unsigned long long) object, (long) timeout);\n }\n \n static void\n MonitorWaitedCB (jvmtiEnv *env, JNIEnv *jni_env, jthread thread,\n \t\t jobject object, jboolean timed_out)\n {\n-  printf (\"MonitorWaitedCB jni_env=%p thread=%p object=%p timed_out=%d\\n\",\n-\t  jni_env, thread, object, (timed_out) ? 1 : 0);\n+  printf (\"MonitorWaitedCB jni_env=%#llx thread=%#llx object=%#llx\"\n+\t  \" timed_out=%d\\n\", (unsigned long long) jni_env, (unsigned long long)\n+\t  thread, (unsigned long long) object, (timed_out) ? 1 : 0);\n }\n \n static void\n MonitorContendedEnterCB (jvmtiEnv *env, JNIEnv *jni_env, jthread thread,\n \t\t\t jobject object)\n {\n-  printf (\"MonitorContendedEnterCB jni_env=%p thread=%p object=%p\\n\",\n-\t  jni_env, thread, object);\n+  printf (\"MonitorContendedEnterCB jni_env=%#llx thread=%#llx object=%#llx\\n\",\n+\t  (unsigned long long) jni_env, (unsigned long long) thread,\n+\t  (unsigned long long) object);\n }\n \n static void\n MonitorContendedEnteredCB (jvmtiEnv *env, JNIEnv *jni_env, jthread thread,\n \t\t\t   jobject object)\n {\n-  printf (\"MonitorContendedEnteredCB jni_env=%p thread=%p object=%p\\n\",\n-\t  jni_env, thread, object);\n+  printf (\"MonitorContendedEnteredCB jni_env=%#llx thread=%#llx object=%#llx\\n\",\n+\t  (unsigned long long) jni_env, (unsigned long long) thread,\n+\t  (unsigned long long) object);\n }\n \n static void\n@@ -297,9 +327,11 @@ static void\n VMObjectAllocCB (jvmtiEnv *env, JNIEnv *jni_env, jthread thread,\n \t\t jobject object, jclass object_klass, jlong size)\n {\n-  printf (\"VMObjectAllocCB jni_env=%p thread=%p object=%p\", jni_env,\n-\t  thread, object);\n-  printf (\" object_klass=%p size=%ld\\n\", object_klass, (long) size);\n+  printf (\"VMObjectAllocCB jni_env=%#llx thread=%#llx object=%#llx\",\n+\t  (unsigned long long) jni_env, (unsigned long long) thread,\n+\t  (unsigned long long) object);\n+  printf (\" object_klass=%#llx size=%ld\\n\", (unsigned long long) object_klass,\n+\t  (long) size);\n }\n \n static void"}]}