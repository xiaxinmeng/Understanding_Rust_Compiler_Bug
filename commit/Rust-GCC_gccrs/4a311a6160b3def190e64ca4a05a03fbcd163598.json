{"sha": "4a311a6160b3def190e64ca4a05a03fbcd163598", "node_id": "C_kwDOANBUbNoAKDRhMzExYTYxNjBiM2RlZjE5MGU2NGNhNGEwNWEwM2ZiY2QxNjM1OTg", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-09-14T06:29:54Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-09-14T15:06:48Z"}, "message": "Use frange::set_nan() from the generic frange::set().\n\nThis patch cleans up the frange::set() code by passing all things NAN\nto frange::set_nan().\n\nNo functional changes.\n\nRegstrapped on x86-64 Linux, plus I ran selftests for\n-ffinite-math-only.\n\ngcc/ChangeLog:\n\n\t* value-range.cc (frange::set): Use set_nan.\n\t* value-range.h (frange::set_nan): Inline code originally in\n\tset().", "tree": {"sha": "34432d6b96408992c4598edeecdf9fe8d676628e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34432d6b96408992c4598edeecdf9fe8d676628e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a311a6160b3def190e64ca4a05a03fbcd163598", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a311a6160b3def190e64ca4a05a03fbcd163598", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a311a6160b3def190e64ca4a05a03fbcd163598", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a311a6160b3def190e64ca4a05a03fbcd163598/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c4c4186eb7ca0a62fc590edcbb3f8fc9a081e64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c4c4186eb7ca0a62fc590edcbb3f8fc9a081e64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c4c4186eb7ca0a62fc590edcbb3f8fc9a081e64"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "d759fcf178c894117a445d8888a22cadc97d553a", "filename": "gcc/value-range.cc", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a311a6160b3def190e64ca4a05a03fbcd163598/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a311a6160b3def190e64ca4a05a03fbcd163598/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=4a311a6160b3def190e64ca4a05a03fbcd163598", "patch": "@@ -369,32 +369,33 @@ frange::set (tree min, tree max, value_range_kind kind)\n       return;\n     }\n \n+  // Handle NANs.\n+  if (real_isnan (TREE_REAL_CST_PTR (min)) || real_isnan (TREE_REAL_CST_PTR (max)))\n+    {\n+      gcc_checking_assert (real_identical (TREE_REAL_CST_PTR (min),\n+\t\t\t\t\t   TREE_REAL_CST_PTR (max)));\n+      tree type = TREE_TYPE (min);\n+      set_nan (type);\n+      return;\n+    }\n+\n   m_kind = kind;\n   m_type = TREE_TYPE (min);\n   m_props.set_varying ();\n   m_min = *TREE_REAL_CST_PTR (min);\n   m_max = *TREE_REAL_CST_PTR (max);\n \n-  bool is_nan = (real_isnan (TREE_REAL_CST_PTR (min))\n-\t\t || real_isnan (TREE_REAL_CST_PTR (max)));\n-\n-  // Ranges with a NAN and a non-NAN endpoint are nonsensical.\n-  gcc_checking_assert (!is_nan || operand_equal_p (min, max));\n-\n-  // Set NAN property if we're absolutely sure.\n-  if (is_nan && operand_equal_p (min, max))\n-    m_props.nan_set_yes ();\n-  else if (!HONOR_NANS (m_type))\n-    m_props.nan_set_no ();\n-\n   // Set SIGNBIT property for positive and negative ranges.\n   if (real_less (&m_max, &dconst0))\n     m_props.signbit_set_yes ();\n   else if (real_less (&dconst0, &m_min))\n     m_props.signbit_set_no ();\n \n+  if (!HONOR_NANS (m_type))\n+    m_props.nan_set_no ();\n+\n   // Check for swapped ranges.\n-  gcc_checking_assert (is_nan || tree_compare (LE_EXPR, min, max));\n+  gcc_checking_assert (tree_compare (LE_EXPR, min, max));\n \n   normalize_kind ();\n   if (flag_checking)"}, {"sha": "4392de84c8b5dc7e0a567a8333342a7610cfea4c", "filename": "gcc/value-range.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a311a6160b3def190e64ca4a05a03fbcd163598/gcc%2Fvalue-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a311a6160b3def190e64ca4a05a03fbcd163598/gcc%2Fvalue-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.h?ref=4a311a6160b3def190e64ca4a05a03fbcd163598", "patch": "@@ -1193,7 +1193,14 @@ frange::set_nan (tree type)\n {\n   REAL_VALUE_TYPE r;\n   gcc_assert (real_nan (&r, \"\", 1, TYPE_MODE (type)));\n-  set (type, r, r);\n+  m_kind = VR_RANGE;\n+  m_type = type;\n+  m_min = r;\n+  m_max = r;\n+  m_props.set_varying ();\n+  m_props.nan_set_yes ();\n+  if (flag_checking)\n+    verify_range ();\n }\n \n // Return TRUE if range is known to be finite."}]}