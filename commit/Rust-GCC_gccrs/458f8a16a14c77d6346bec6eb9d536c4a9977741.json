{"sha": "458f8a16a14c77d6346bec6eb9d536c4a9977741", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU4ZjhhMTZhMTRjNzdkNjM0NmJlYzZlYjlkNTM2YzRhOTk3Nzc0MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-07-20T18:18:03Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-07-20T18:18:03Z"}, "message": "parser.c (cp_parser_initializer_list): Handle C99 .id= and [N]= designated initializer syntax.\n\n\t* parser.c (cp_parser_initializer_list): Handle C99 .id= and [N]=\n\tdesignated initializer syntax.\n\t* decl.c (check_array_designated_initializer): Add index parm.\n\t(maybe_deduce_size_from_array_init): Pass it.\n\t(reshape_init_array_1): Likewise.\n\nFrom-SVN: r176530", "tree": {"sha": "97794ed16cf329b2e4619ee88fdb2e020628e225", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97794ed16cf329b2e4619ee88fdb2e020628e225"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/458f8a16a14c77d6346bec6eb9d536c4a9977741", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/458f8a16a14c77d6346bec6eb9d536c4a9977741", "html_url": "https://github.com/Rust-GCC/gccrs/commit/458f8a16a14c77d6346bec6eb9d536c4a9977741", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/458f8a16a14c77d6346bec6eb9d536c4a9977741/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd88bb8c771788c4f3ad2f1be42e99db5e4a90fe"}], "stats": {"total": 94, "additions": 83, "deletions": 11}, "files": [{"sha": "e314ae2a6149975dc4fae8fb52f888e1cba95c2f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/458f8a16a14c77d6346bec6eb9d536c4a9977741/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/458f8a16a14c77d6346bec6eb9d536c4a9977741/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=458f8a16a14c77d6346bec6eb9d536c4a9977741", "patch": "@@ -1,5 +1,11 @@\n 2011-07-20  Jason Merrill  <jason@redhat.com>\n \n+\t* parser.c (cp_parser_initializer_list): Handle C99 .id= and [N]=\n+\tdesignated initializer syntax.\n+\t* decl.c (check_array_designated_initializer): Add index parm.\n+\t(maybe_deduce_size_from_array_init): Pass it.\n+\t(reshape_init_array_1): Likewise.\n+\n \tPR c++/6709 (DR 743)\n \tPR c++/42603 (DR 950)\n \t* parser.c (token_is_decltype, cp_lexer_next_token_is_decltype): New."}, {"sha": "067930375a8d0066fadad75bea64960476d34701", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/458f8a16a14c77d6346bec6eb9d536c4a9977741/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/458f8a16a14c77d6346bec6eb9d536c4a9977741/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=458f8a16a14c77d6346bec6eb9d536c4a9977741", "patch": "@@ -4648,7 +4648,8 @@ build_init_list_var_init (tree decl, tree type, tree init, tree *array_init,\n    is valid, i.e., does not have a designated initializer.  */\n \n static bool\n-check_array_designated_initializer (const constructor_elt *ce)\n+check_array_designated_initializer (const constructor_elt *ce,\n+\t\t\t\t    unsigned HOST_WIDE_INT index)\n {\n   /* Designated initializers for array elements are not supported.  */\n   if (ce->index)\n@@ -4659,8 +4660,13 @@ check_array_designated_initializer (const constructor_elt *ce)\n \terror (\"name used in a GNU-style designated \"\n \t       \"initializer for an array\");\n       else if (TREE_CODE (ce->index) == INTEGER_CST)\n-\t/* An index added by reshape_init.  */\n-\treturn true;\n+\t{\n+\t  /* A C99 designator is OK if it matches the current index.  */\n+\t  if (TREE_INT_CST_LOW (ce->index) == index)\n+\t    return true;\n+\t  else\n+\t    sorry (\"non-trivial designated initializers not supported\");\n+\t}\n       else\n \t{\n \t  gcc_assert (TREE_CODE (ce->index) == IDENTIFIER_NODE);\n@@ -4702,7 +4708,7 @@ maybe_deduce_size_from_array_init (tree decl, tree init)\n \t  constructor_elt *ce;\n \t  HOST_WIDE_INT i;\n \t  FOR_EACH_VEC_ELT (constructor_elt, v, i, ce)\n-\t    if (!check_array_designated_initializer (ce))\n+\t    if (!check_array_designated_initializer (ce, i))\n \t      failure = 1;\n \t}\n \n@@ -4961,7 +4967,7 @@ reshape_init_array_1 (tree elt_type, tree max_index, reshape_iter *d,\n     {\n       tree elt_init;\n \n-      check_array_designated_initializer (d->cur);\n+      check_array_designated_initializer (d->cur, index);\n       elt_init = reshape_init_r (elt_type, d, /*first_initializer_p=*/false,\n \t\t\t\t complain);\n       if (elt_init == error_mark_node)"}, {"sha": "285180152e3b5cd4ac746c50d17cf2ac3651180e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/458f8a16a14c77d6346bec6eb9d536c4a9977741/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/458f8a16a14c77d6346bec6eb9d536c4a9977741/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=458f8a16a14c77d6346bec6eb9d536c4a9977741", "patch": "@@ -16693,8 +16693,13 @@ cp_parser_braced_list (cp_parser* parser, bool* non_constant_p)\n    GNU Extension:\n \n    initializer-list:\n-     identifier : initializer-clause\n-     initializer-list, identifier : initializer-clause\n+     designation initializer-clause ...[opt]\n+     initializer-list , designation initializer-clause ...[opt]\n+\n+   designation:\n+     . identifier =\n+     identifier :\n+     [ constant-expression ] =\n \n    Returns a VEC of constructor_elt.  The VALUE of each elt is an expression\n    for the initializer.  If the INDEX of the elt is non-NULL, it is the\n@@ -16713,7 +16718,7 @@ cp_parser_initializer_list (cp_parser* parser, bool* non_constant_p)\n   while (true)\n     {\n       cp_token *token;\n-      tree identifier;\n+      tree designator;\n       tree initializer;\n       bool clause_non_constant_p;\n \n@@ -16728,12 +16733,38 @@ cp_parser_initializer_list (cp_parser* parser, bool* non_constant_p)\n \t  pedwarn (input_location, OPT_pedantic, \n \t\t   \"ISO C++ does not allow designated initializers\");\n \t  /* Consume the identifier.  */\n-\t  identifier = cp_lexer_consume_token (parser->lexer)->u.value;\n+\t  designator = cp_lexer_consume_token (parser->lexer)->u.value;\n \t  /* Consume the `:'.  */\n \t  cp_lexer_consume_token (parser->lexer);\n \t}\n+      /* Also handle the C99 syntax, '. id ='.  */\n+      else if (cp_parser_allow_gnu_extensions_p (parser)\n+\t       && cp_lexer_next_token_is (parser->lexer, CPP_DOT)\n+\t       && cp_lexer_peek_nth_token (parser->lexer, 2)->type == CPP_NAME\n+\t       && cp_lexer_peek_nth_token (parser->lexer, 3)->type == CPP_EQ)\n+\t{\n+\t  /* Warn the user that they are using an extension.  */\n+\t  pedwarn (input_location, OPT_pedantic,\n+\t\t   \"ISO C++ does not allow C99 designated initializers\");\n+\t  /* Consume the `.'.  */\n+\t  cp_lexer_consume_token (parser->lexer);\n+\t  /* Consume the identifier.  */\n+\t  designator = cp_lexer_consume_token (parser->lexer)->u.value;\n+\t  /* Consume the `='.  */\n+\t  cp_lexer_consume_token (parser->lexer);\n+\t}\n+      /* Also handle C99 array designators, '[ const ] ='.  */\n+      else if (cp_parser_allow_gnu_extensions_p (parser)\n+\t       && !c_dialect_objc ()\n+\t       && cp_lexer_next_token_is (parser->lexer, CPP_OPEN_SQUARE))\n+\t{\n+\t  cp_lexer_consume_token (parser->lexer);\n+\t  designator = cp_parser_constant_expression (parser, false, NULL);\n+\t  cp_parser_require (parser, CPP_CLOSE_SQUARE, RT_CLOSE_SQUARE);\n+\t  cp_parser_require (parser, CPP_EQ, RT_EQ);\n+\t}\n       else\n-\tidentifier = NULL_TREE;\n+\tdesignator = NULL_TREE;\n \n       /* Parse the initializer.  */\n       initializer = cp_parser_initializer_clause (parser,\n@@ -16754,7 +16785,7 @@ cp_parser_initializer_list (cp_parser* parser, bool* non_constant_p)\n         }\n \n       /* Add it to the vector.  */\n-      CONSTRUCTOR_APPEND_ELT(v, identifier, initializer);\n+      CONSTRUCTOR_APPEND_ELT (v, designator, initializer);\n \n       /* If the next token is not a comma, we have reached the end of\n \t the list.  */"}, {"sha": "c5228f29925c08bedd0df71b0488bc5a3284c751", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/458f8a16a14c77d6346bec6eb9d536c4a9977741/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/458f8a16a14c77d6346bec6eb9d536c4a9977741/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=458f8a16a14c77d6346bec6eb9d536c4a9977741", "patch": "@@ -1,3 +1,7 @@\n+2011-07-20  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/ext/desig2.C: New.\n+\n 2011-07-20  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/ppc-fma-1.c: Adjust to allow non-VSX fmas to"}, {"sha": "229ae527d77fcf5c300f11290a3767fabf56dbb6", "filename": "gcc/testsuite/g++.dg/ext/desig2.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/458f8a16a14c77d6346bec6eb9d536c4a9977741/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdesig2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/458f8a16a14c77d6346bec6eb9d536c4a9977741/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdesig2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdesig2.C?ref=458f8a16a14c77d6346bec6eb9d536c4a9977741", "patch": "@@ -0,0 +1,25 @@\n+// Test for C99-style designated array initializer\n+\n+union U\n+{\n+  long l;\n+  const char *p;\n+};\n+\n+__extension__ U u = { .p = \"\" };\n+\n+__extension__ int i[4] = { [0] = 1, [1] = 2 };\n+\n+// Currently, except for unions, the C++ front end only supports\n+// designators that designate the element that would have been initialized\n+// anyway.  While that's true, make sure that we get a sorry rather than\n+// bad code.\n+\n+struct A\n+{\n+  int i;\n+  int j;\n+};\n+\n+__extension__ A a = { .j = 1 }; // { dg-message \"non-trivial\" }\n+__extension__ int j[2] = { [1] = 1 }; // { dg-message \"non-trivial\" }"}]}