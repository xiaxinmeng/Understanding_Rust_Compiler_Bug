{"sha": "5989c468fb8579b16e0bbb2b4528a832cabc5931", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk4OWM0NjhmYjg1NzliMTZlMGJiYjJiNDUyOGE4MzJjYWJjNTkzMQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-01-30T13:50:10Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-01-30T13:50:10Z"}, "message": "pa.md (parallel shift and shiftadd): Mark output of shift as an earlyclobber.\n\n        * pa.md (parallel shift and shiftadd): Mark output of shift as an\n        earlyclobber.\nFixes -O1 bootstrap problem.\n\nFrom-SVN: r24922", "tree": {"sha": "38ce516e6258bbf3412b44284c428c6d19a85d67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38ce516e6258bbf3412b44284c428c6d19a85d67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5989c468fb8579b16e0bbb2b4528a832cabc5931", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5989c468fb8579b16e0bbb2b4528a832cabc5931", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5989c468fb8579b16e0bbb2b4528a832cabc5931", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5989c468fb8579b16e0bbb2b4528a832cabc5931/comments", "author": null, "committer": null, "parents": [{"sha": "16b4c15e6af6d403f209bc87ac3ac9c32559aeb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16b4c15e6af6d403f209bc87ac3ac9c32559aeb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16b4c15e6af6d403f209bc87ac3ac9c32559aeb5"}], "stats": {"total": 54, "additions": 30, "deletions": 24}, "files": [{"sha": "1aa52ffb0a3c9b6556673e6f4437652ca146cdca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5989c468fb8579b16e0bbb2b4528a832cabc5931/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5989c468fb8579b16e0bbb2b4528a832cabc5931/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5989c468fb8579b16e0bbb2b4528a832cabc5931", "patch": "@@ -1,5 +1,8 @@\n Sat Jan 30 08:27:23 1999  Jeffrey A Law  (law@cygnus.com)\n \n+\t* pa.md (parallel shift and shiftadd): Mark output of shift as an\n+\tearlyclobber.\n+\n \t* loop.c: Disable recent loop changes.  Temporary as Joern\n \tcontinues to fix problems.\n "}, {"sha": "5775e2016242dea20a398de49165569681e3e9d5", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5989c468fb8579b16e0bbb2b4528a832cabc5931/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5989c468fb8579b16e0bbb2b4528a832cabc5931/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=5989c468fb8579b16e0bbb2b4528a832cabc5931", "patch": "@@ -3627,6 +3627,28 @@\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"4\")])\n \n+;; This variant of the above insn can occur if the first operand\n+;; is the frame pointer.  This is a kludge, but there doesn't\n+;; seem to be a way around it.  Only recognize it while reloading.\n+;; Note how operand 3 uses a predicate of \"const_int_operand\", but \n+;; has constraints allowing a register.  I don't know how this works,\n+;; but it somehow makes sure that out-of-range constants are placed\n+;; in a register which somehow magically is a \"const_int_operand\".\n+;; (this was stolen from alpha.md, I'm not going to try and change it.\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&r,r\")\n+\t(plus:SI (plus:SI (mult:SI (match_operand:SI 2 \"register_operand\" \"r,r\")\n+\t\t\t\t   (match_operand:SI 4 \"shadd_operand\" \"\"))\n+\t\t\t  (match_operand:SI 1 \"register_operand\" \"r,r\"))\n+\t\t (match_operand:SI 3 \"const_int_operand\" \"r,J\")))]\n+  \"reload_in_progress\"\n+  \"@\n+   sh%O4addl %2,%1,%0\\;addl %3,%0,%0\n+   sh%O4addl %2,%1,%0\\;ldo %3(%0),%0\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"8\")])\n+\n ;; This anonymous pattern and splitter wins because it reduces the latency\n ;; of the shadd sequence without increasing the latency of the shift.\n ;;\n@@ -3636,12 +3658,15 @@\n ;; It would be clearer if combine used the same operator for both expressions,\n ;; it's somewhat confusing to have a mult in ine operation and an ashift\n ;; in the other.\n+;;\n+;; If this pattern is not split before register allocation, then we must expose\n+;; the fact that operand 4 is set before operands 1, 2 and 3 have been read.\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(plus:SI (mult:SI (match_operand:SI 2 \"register_operand\" \"r\")\n \t\t\t  (match_operand:SI 3 \"shadd_operand\" \"\"))\n \t\t (match_operand:SI 1 \"register_operand\" \"r\")))\n-   (set (match_operand:SI 4 \"register_operand\" \"=r\")\n+   (set (match_operand:SI 4 \"register_operand\" \"=&r\")\n \t(ashift:SI (match_dup 2)\n \t\t   (match_operand:SI 5 \"const_int_operand\" \"i\")))]\n   \"INTVAL (operands[5]) == exact_log2 (INTVAL (operands[3]))\"\n@@ -3654,7 +3679,7 @@\n \t(plus:SI (mult:SI (match_operand:SI 2 \"register_operand\" \"r\")\n \t\t\t  (match_operand:SI 3 \"shadd_operand\" \"\"))\n \t\t (match_operand:SI 1 \"register_operand\" \"r\")))\n-   (set (match_operand:SI 4 \"register_operand\" \"=r\")\n+   (set (match_operand:SI 4 \"register_operand\" \"=&r\")\n \t(ashift:SI (match_dup 2)\n \t\t   (match_operand:SI 5 \"const_int_operand\" \"i\")))]\n   \"INTVAL (operands[5]) == exact_log2 (INTVAL (operands[3]))\"\n@@ -3663,28 +3688,6 @@\n \t\t\t       (match_dup 1)))]\n   \"\")\n \n-;; This variant of the above insn can occur if the first operand\n-;; is the frame pointer.  This is a kludge, but there doesn't\n-;; seem to be a way around it.  Only recognize it while reloading.\n-;; Note how operand 3 uses a predicate of \"const_int_operand\", but \n-;; has constraints allowing a register.  I don't know how this works,\n-;; but it somehow makes sure that out-of-range constants are placed\n-;; in a register which somehow magically is a \"const_int_operand\".\n-;; (this was stolen from alpha.md, I'm not going to try and change it.\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=&r,r\")\n-\t(plus:SI (plus:SI (mult:SI (match_operand:SI 2 \"register_operand\" \"r,r\")\n-\t\t\t\t   (match_operand:SI 4 \"shadd_operand\" \"\"))\n-\t\t\t  (match_operand:SI 1 \"register_operand\" \"r,r\"))\n-\t\t (match_operand:SI 3 \"const_int_operand\" \"r,J\")))]\n-  \"reload_in_progress\"\n-  \"@\n-   sh%O4addl %2,%1,%0\\;addl %3,%0,%0\n-   sh%O4addl %2,%1,%0\\;ldo %3(%0),%0\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"8\")])\n-\n (define_expand \"ashlsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(ashift:SI (match_operand:SI 1 \"lhs_lshift_operand\" \"\")"}]}