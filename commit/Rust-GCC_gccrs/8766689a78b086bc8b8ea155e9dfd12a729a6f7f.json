{"sha": "8766689a78b086bc8b8ea155e9dfd12a729a6f7f", "node_id": "C_kwDOANBUbNoAKDg3NjY2ODlhNzhiMDg2YmM4YjhlYTE1NWU5ZGZkMTJhNzI5YTZmN2Y", "commit": {"author": {"name": "chenglulu", "email": "chenglulu@loongson.cn", "date": "2021-11-27T07:09:39Z"}, "committer": {"name": "Chenghua Xu", "email": "paul.hua.gm@gmail.com", "date": "2022-03-29T09:43:36Z"}, "message": "LoongArch Port: Add doc.\n\n2022-03-29  Chenghua Xu  <xuchenghua@loongson.cn>\n\t    Lulu Cheng  <chenglulu@loongson.cn>\n\ngcc/ChangeLog:\n\n\t* doc/install.texi: Add LoongArch options section.\n\t* doc/invoke.texi: Add LoongArch options section.\n\t* doc/md.texi: Add LoongArch options section.\n\ncontrib/ChangeLog:\n\n\t* config-list.mk: Add LoongArch triplet.", "tree": {"sha": "f5a4d182c0679f3a78a3197ba369534f56fa10a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5a4d182c0679f3a78a3197ba369534f56fa10a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8766689a78b086bc8b8ea155e9dfd12a729a6f7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8766689a78b086bc8b8ea155e9dfd12a729a6f7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8766689a78b086bc8b8ea155e9dfd12a729a6f7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8766689a78b086bc8b8ea155e9dfd12a729a6f7f/comments", "author": {"login": "chenglulu326", "id": 88083425, "node_id": "MDQ6VXNlcjg4MDgzNDI1", "avatar_url": "https://avatars.githubusercontent.com/u/88083425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenglulu326", "html_url": "https://github.com/chenglulu326", "followers_url": "https://api.github.com/users/chenglulu326/followers", "following_url": "https://api.github.com/users/chenglulu326/following{/other_user}", "gists_url": "https://api.github.com/users/chenglulu326/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenglulu326/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenglulu326/subscriptions", "organizations_url": "https://api.github.com/users/chenglulu326/orgs", "repos_url": "https://api.github.com/users/chenglulu326/repos", "events_url": "https://api.github.com/users/chenglulu326/events{/privacy}", "received_events_url": "https://api.github.com/users/chenglulu326/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChenghuaXu", "id": 87753117, "node_id": "MDQ6VXNlcjg3NzUzMTE3", "avatar_url": "https://avatars.githubusercontent.com/u/87753117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChenghuaXu", "html_url": "https://github.com/ChenghuaXu", "followers_url": "https://api.github.com/users/ChenghuaXu/followers", "following_url": "https://api.github.com/users/ChenghuaXu/following{/other_user}", "gists_url": "https://api.github.com/users/ChenghuaXu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChenghuaXu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChenghuaXu/subscriptions", "organizations_url": "https://api.github.com/users/ChenghuaXu/orgs", "repos_url": "https://api.github.com/users/ChenghuaXu/repos", "events_url": "https://api.github.com/users/ChenghuaXu/events{/privacy}", "received_events_url": "https://api.github.com/users/ChenghuaXu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ae54e8dec3a3593ff5689754b58324501ecfdcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ae54e8dec3a3593ff5689754b58324501ecfdcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ae54e8dec3a3593ff5689754b58324501ecfdcc"}], "stats": {"total": 277, "additions": 271, "deletions": 6}, "files": [{"sha": "e042105561a90e40a8ae33ab68998e4cb765bb55", "filename": "contrib/config-list.mk", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8766689a78b086bc8b8ea155e9dfd12a729a6f7f/contrib%2Fconfig-list.mk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8766689a78b086bc8b8ea155e9dfd12a729a6f7f/contrib%2Fconfig-list.mk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fconfig-list.mk?ref=8766689a78b086bc8b8ea155e9dfd12a729a6f7f", "patch": "@@ -57,7 +57,9 @@ LIST = aarch64-elf aarch64-linux-gnu aarch64-rtems \\\n   i686-wrs-vxworksae \\\n   i686-cygwinOPT-enable-threads=yes i686-mingw32crt ia64-elf \\\n   ia64-freebsd6 ia64-linux ia64-hpux ia64-hp-vms iq2000-elf lm32-elf \\\n-  lm32-rtems lm32-uclinux m32c-rtems m32c-elf m32r-elf m32rle-elf \\\n+  lm32-rtems lm32-uclinux \\\n+  loongarch64-linux-gnuf64 loongarch64-linux-gnuf32 loongarch64-linux-gnusf \\\n+  m32c-rtems m32c-elf m32r-elf m32rle-elf \\\n   m68k-elf m68k-netbsdelf \\\n   m68k-uclinux m68k-linux m68k-rtems \\\n   mcore-elf microblaze-linux microblaze-elf \\"}, {"sha": "ab67a639836b7959135544bb82f53fe3e33df8ad", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 42, "deletions": 5, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8766689a78b086bc8b8ea155e9dfd12a729a6f7f/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8766689a78b086bc8b8ea155e9dfd12a729a6f7f/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=8766689a78b086bc8b8ea155e9dfd12a729a6f7f", "patch": "@@ -747,9 +747,9 @@ Here are the possible CPU types:\n @quotation\n aarch64, aarch64_be, alpha, alpha64, amdgcn, arc, arceb, arm, armeb, avr, bfin,\n bpf, cr16, cris, csky, epiphany, fido, fr30, frv, ft32, h8300, hppa, hppa2.0,\n-hppa64, i486, i686, ia64, iq2000, lm32, m32c, m32r, m32rle, m68k, mcore,\n-microblaze, microblazeel, mips, mips64, mips64el, mips64octeon, mips64orion,\n-mips64vr, mipsel, mipsisa32, mipsisa32r2, mipsisa64, mipsisa64r2,\n+hppa64, i486, i686, ia64, iq2000, lm32, loongarch64, m32c, m32r, m32rle, m68k,\n+mcore, microblaze, microblazeel, mips, mips64, mips64el, mips64octeon,\n+mips64orion, mips64vr, mipsel, mipsisa32, mipsisa32r2, mipsisa64, mipsisa64r2,\n mipsisa64r2el, mipsisa64sb1, mipsisa64sr71k, mipstx39, mmix, mn10300, moxie,\n msp430, nds32be, nds32le, nios2, nvptx, or1k, pdp11, powerpc, powerpc64,\n powerpc64le, powerpcle, pru, riscv32, riscv32be, riscv64, riscv64be, rl78, rx,\n@@ -1166,8 +1166,9 @@ sysv, aix.\n @itemx --without-multilib-list\n Specify what multilibs to build.  @var{list} is a comma separated list of\n values, possibly consisting of a single value.  Currently only implemented\n-for aarch64*-*-*, arm*-*-*, riscv*-*-*, sh*-*-* and x86-64-*-linux*.  The\n-accepted values and meaning for each target is given below.\n+for aarch64*-*-*, arm*-*-*, loongarch64-*-*, riscv*-*-*, sh*-*-* and\n+x86-64-*-linux*.  The accepted values and meaning for each target is given\n+below.\n \n @table @code\n @item aarch64*-*-*\n@@ -1254,6 +1255,14 @@ profile.  The union of these options is considered when specifying both\n @code{-mfloat-abi=hard}\n @end multitable\n \n+@item loongarch*-*-*\n+@var{list} is a comma-separated list of the following ABI identifiers:\n+@code{lp64d[/base]} @code{lp64f[/base]} @code{lp64d[/base]}, where the\n+@code{/base} suffix may be omitted, to enable their respective run-time\n+libraries.  If @var{list} is empty or @code{default},\n+or if @option{--with-multilib-list} is not specified, then the default ABI\n+as specified by @option{--with-abi} or implied by @option{--target} is selected.\n+\n @item riscv*-*-*\n @var{list} is a single ABI name.  The target architecture must be either\n @code{rv32gc} or @code{rv64gc}.  This will build a single multilib for the\n@@ -4439,6 +4448,34 @@ This configuration is intended for embedded systems.\n Lattice Mico32 processor.\n This configuration is intended for embedded systems running uClinux.\n \n+@html\n+<hr />\n+@end html\n+@anchor{loongarch}\n+@heading LoongArch\n+LoongArch processor.\n+The following LoongArch targets are available:\n+@table @code\n+@item loongarch64-linux-gnu*\n+LoongArch processor running GNU/Linux.  This target triplet may be coupled\n+with a small set of possible suffixes to identify their default ABI type:\n+@table @code\n+@item f64\n+Uses @code{lp64d/base} ABI by default.\n+@item f32\n+Uses @code{lp64f/base} ABI by default.\n+@item sf\n+Uses @code{lp64s/base} ABI by default.\n+@end table\n+\n+@item loongarch64-linux-gnu\n+Same as @code{loongarch64-linux-gnuf64}, but may be used with\n+@option{--with-abi=*} to configure the default ABI type.\n+@end table\n+\n+More information about LoongArch can be found at\n+@uref{https://github.com/loongson/LoongArch-Documentation}.\n+\n @html\n <hr />\n @end html"}, {"sha": "554e04ecbf3ac74742ac4f2af55a50521cbc295e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 200, "deletions": 0, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8766689a78b086bc8b8ea155e9dfd12a729a6f7f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8766689a78b086bc8b8ea155e9dfd12a729a6f7f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8766689a78b086bc8b8ea155e9dfd12a729a6f7f", "patch": "@@ -996,6 +996,16 @@ Objective-C and Objective-C++ Dialects}.\n @gccoptlist{-mbarrel-shift-enabled  -mdivide-enabled  -mmultiply-enabled @gol\n -msign-extend-enabled  -muser-enabled}\n \n+@emph{LoongArch Options}\n+@gccoptlist{-march=@var{cpu-type}  -mtune=@var{cpu-type} -mabi=@var{base-abi-type} @gol\n+-mfpu=@var{fpu-type} -msoft-float -msingle-float -mdouble-float @gol\n+-mbranch-cost=@var{n}  -mcheck-zero-division -mno-check-zero-division @gol\n+-mcond-move-int  -mno-cond-move-int @gol\n+-mcond-move-float  -mno-cond-move-float @gol\n+-memcpy  -mno-memcpy -mstrict-align -mno-strict-align @gol\n+-mmax-inline-memcpy-size=@var{n} @gol\n+-mcmodel=@var{code-model}}\n+\n @emph{M32R/D Options}\n @gccoptlist{-m32r2  -m32rx  -m32r @gol\n -mdebug @gol\n@@ -18905,6 +18915,7 @@ platform.\n * HPPA Options::\n * IA-64 Options::\n * LM32 Options::\n+* LoongArch Options::\n * M32C Options::\n * M32R/D Options::\n * M680x0 Options::\n@@ -24420,6 +24431,195 @@ Enable user-defined instructions.\n \n @end table\n \n+@node LoongArch Options\n+@subsection LoongArch Options\n+@cindex LoongArch Options\n+\n+These command-line options are defined for LoongArch targets:\n+\n+@table @gcctabopt\n+@item -march=@var{cpu-type}\n+@opindex -march\n+Generate instructions for the machine type @var{cpu-type}.  In contrast to\n+@option{-mtune=@var{cpu-type}}, which merely tunes the generated code\n+for the specified @var{cpu-type}, @option{-march=@var{cpu-type}} allows GCC\n+to generate code that may not run at all on processors other than the one\n+indicated.  Specifying @option{-march=@var{cpu-type}} implies\n+@option{-mtune=@var{cpu-type}}, except where noted otherwise.\n+\n+The choices for @var{cpu-type} are:\n+\n+@table @samp\n+@item native\n+This selects the CPU to generate code for at compilation time by determining\n+the processor type of the compiling machine.  Using @option{-march=native}\n+enables all instruction subsets supported by the local machine (hence\n+the result might not run on different machines).  Using @option{-mtune=native}\n+produces code optimized for the local machine under the constraints\n+of the selected instruction set.\n+@item loongarch64\n+A generic CPU with 64-bit extensions.\n+@item la464\n+LoongArch LA464 CPU with LBT, LSX, LASX, LVZ.\n+@end table\n+\n+@item -mtune=@var{cpu-type}\n+@opindex mtune\n+Optimize the output for the given processor, specified by microarchitecture\n+name.\n+\n+@item -mabi=@var{base-abi-type}\n+@opindex mabi\n+Generate code for the specified calling convention.\n+@var{base-abi-type} can be one of:\n+@table @samp\n+@item lp64d\n+Uses 64-bit general purpose registers and 32/64-bit floating-point\n+registers for parameter passing.  Data model is LP64, where @samp{int}\n+is 32 bits, while @samp{long int} and pointers are 64 bits.\n+@item lp64f\n+Uses 64-bit general purpose registers and 32-bit floating-point\n+registers for parameter passing.  Data model is LP64, where @samp{int}\n+is 32 bits, while @samp{long int} and pointers are 64 bits.\n+@item lp64s\n+Uses 64-bit general purpose registers and no floating-point\n+registers for parameter passing.  Data model is LP64, where @samp{int}\n+is 32 bits, while @samp{long int} and pointers are 64 bits.\n+@end table\n+\n+@item -mfpu=@var{fpu-type}\n+@opindex mfpu\n+Generate code for the specified FPU type, which can be one of:\n+@table @samp\n+@item 64\n+Allow the use of hardware floating-point instructions for 32-bit\n+and 64-bit operations.\n+@item 32\n+Allow the use of hardware floating-point instructions for 32-bit\n+operations.\n+@item none\n+@item 0\n+Prevent the use of hardware floating-point instructions.\n+@end table\n+\n+@item -msoft-float\n+@opindex msoft-float\n+Force @option{-mfpu=none} and prevents the use of floating-point\n+registers for parameter passing.  This option may change the target\n+ABI.\n+\n+@item -msingle-float\n+@opindex -msingle-float\n+Force @option{-mfpu=32} and allow the use of 32-bit floating-point\n+registers for parameter passing.  This option may change the target\n+ABI.\n+\n+@item -mdouble-float\n+@opindex -mdouble-float\n+Force @option{-mfpu=64} and allow the use of 32/64-bit floating-point\n+registers for parameter passing.  This option may change the target\n+ABI.\n+\n+@item -mbranch-cost=@var{n}\n+@opindex -mbranch-cost\n+Set the cost of branches to roughly @var{n} instructions.\n+\n+@item -mcheck-zero-division\n+@itemx -mno-check-zero-divison\n+@opindex -mcheck-zero-division\n+Trap (do not trap) on integer division by zero.  The default is\n+@option{-mcheck-zero-division}.\n+\n+@item -mcond-move-int\n+@itemx -mno-cond-move-int\n+@opindex -mcond-move-int\n+Conditional moves for integral data in general-purpose registers\n+are enabled (disabled).  The default is @option{-mcond-move-int}.\n+\n+@item -mcond-move-float\n+@itemx -mno-cond-move-float\n+@opindex -mcond-move-float\n+Conditional moves for floating-point registers are enabled (disabled).\n+The default is @option{-mcond-move-float}.\n+\n+@item -mmemcpy\n+@itemx -mno-memcpy\n+@opindex -mmemcpy\n+Force (do not force) the use of @code{memcpy} for non-trivial block moves.\n+The default is @option{-mno-memcpy}, which allows GCC to inline most\n+constant-sized copies.  Setting optimization level to @option{-Os} also\n+forces the use of @code{memcpy}, but @option{-mno-memcpy} may override this\n+behavior if explicitly specified, regardless of the order these options on\n+the command line.\n+\n+@item -mstrict-align\n+@itemx -mno-strict-align\n+@opindex -mstrict-align\n+Avoid or allow generating memory accesses that may not be aligned on a natural\n+object boundary as described in the architecture specification. The default is\n+@option{-mno-strict-align}.\n+\n+@item -msmall-data-limit=@var{number}\n+@opindex -msmall-data-limit\n+Put global and static data smaller than @var{number} bytes into a special\n+section (on some targets).  The default value is 0.\n+\n+@item -mmax-inline-memcpy-size=@var{n}\n+@opindex -mmax-inline-memcpy-size\n+Inline all block moves (such as calls to @code{memcpy} or structure copies)\n+less than or equal to @var{n} bytes.  The default value of @var{n} is 1024.\n+\n+@item -mcmodel=@var{code-model}\n+Set the code model to one of:\n+@table @samp\n+@item tiny-static\n+@itemize @bullet\n+@item\n+local symbol and global strong symbol: The data section must be within +/-2MiB addressing space.\n+The text section must be within +/-128MiB addressing space.\n+@item\n+global weak symbol: The got table must be within +/-2GiB addressing space.\n+@end itemize\n+\n+@item tiny\n+@itemize @bullet\n+@item\n+local symbol: The data section must be within +/-2MiB addressing space.\n+The text section must be within +/-128MiB\n+addressing space.\n+@item\n+global symbol: The got table must be within +/-2GiB addressing space.\n+@end itemize\n+\n+@item normal\n+@itemize @bullet\n+@item\n+local symbol: The data section must be within +/-2GiB addressing space.\n+The text section must be within +/-128MiB addressing space.\n+@item\n+global symbol: The got table must be within +/-2GiB addressing space.\n+@end itemize\n+\n+@item large\n+@itemize @bullet\n+@item\n+local symbol: The data section must be within +/-2GiB addressing space.\n+The text section must be within +/-128GiB addressing space.\n+@item\n+global symbol: The got table must be within +/-2GiB addressing space.\n+@end itemize\n+\n+@item extreme(Not implemented yet)\n+@itemize @bullet\n+@item\n+local symbol: The data and text section must be within +/-8EiB addressing space.\n+@item\n+global symbol: The data got table must be within +/-8EiB addressing space.\n+@end itemize\n+@end table\n+The default code model is @code{normal}.\n+@end table\n+\n @node M32C Options\n @subsection M32C Options\n @cindex M32C options"}, {"sha": "3b544358bb531a415408019a1723c787ee10d32d", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8766689a78b086bc8b8ea155e9dfd12a729a6f7f/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8766689a78b086bc8b8ea155e9dfd12a729a6f7f/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=8766689a78b086bc8b8ea155e9dfd12a729a6f7f", "patch": "@@ -2747,6 +2747,32 @@ Memory addressed using the small base register ($sb).\n $r1h\n @end table\n \n+@item LoongArch---@file{config/loongarch/constraints.md}\n+@table @code\n+@item f\n+A floating-point register (if available).\n+@item k\n+A memory operand whose address is formed by a base register and\n+(optionally scaled) index register.\n+@item l\n+A signed 16-bit constant.\n+@item m\n+A memory operand whose address is formed by a base register and offset\n+that is suitable for use in instructions with the same addressing mode\n+as @code{st.w} and @code{ld.w}.\n+@item I\n+A signed 12-bit constant (for arithmetic instructions).\n+@item K\n+An unsigned 12-bit constant (for logic instructions).\n+@item ZB\n+An address that is held in a general-purpose register.\n+The offset is zero.\n+@item ZC\n+A memory operand whose address is formed by a base register and offset\n+that is suitable for use in instructions with the same addressing mode\n+as @code{ll.w} and @code{sc.w}.\n+@end table\n+\n @item MicroBlaze---@file{config/microblaze/constraints.md}\n @table @code\n @item d"}]}