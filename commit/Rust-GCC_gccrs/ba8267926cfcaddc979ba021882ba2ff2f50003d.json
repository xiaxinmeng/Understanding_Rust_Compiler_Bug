{"sha": "ba8267926cfcaddc979ba021882ba2ff2f50003d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE4MjY3OTI2Y2ZjYWRkYzk3OWJhMDIxODgyYmEyZmYyZjUwMDAzZA==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2013-12-11T00:58:35Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2013-12-11T00:58:35Z"}, "message": "revert: re PR tree-optimization/41488 (IVOpts cannot coalesce multiple induction variables)\n\n\n\tReverted:\n\t2013-12-10  Bin Cheng  <bin.cheng@arm.com>\n\tPR tree-optimization/41488\n\t* tree-ssa-loop-ivopts.c (add_old_iv_candidates): Don't add cand\n\tfor PEELED_CHREC kind IV.\n\t* tree-scalar-evolution.c: Include necessary header files.\n\t(peeled_chrec_map, simplify_peeled_chrec): New.\n\t(analyze_evolution_in_loop): New static variable.\n\tCall simplify_peeled_chrec.\n\t(scev_initialize): Initialize peeled_chrec_map.\n\t(scev_reset, scev_finalize): Reset and release peeled_chrec_map.\n\n\tReverted:\n\t2013-12-10  Bin Cheng  <bin.cheng@arm.com>\n\tPR tree-optimization/41488\n\t* gcc.dg/tree-ssa/scev-7.c: New test.\n\t* gcc.dg/pr41488.c: New test.\n\nFrom-SVN: r205880", "tree": {"sha": "236c3dba6a88690d334b7d85fcc3c68956a01890", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/236c3dba6a88690d334b7d85fcc3c68956a01890"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba8267926cfcaddc979ba021882ba2ff2f50003d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba8267926cfcaddc979ba021882ba2ff2f50003d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba8267926cfcaddc979ba021882ba2ff2f50003d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba8267926cfcaddc979ba021882ba2ff2f50003d/comments", "author": null, "committer": null, "parents": [{"sha": "748a18534a1e52304770795890c932045312896a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/748a18534a1e52304770795890c932045312896a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/748a18534a1e52304770795890c932045312896a"}], "stats": {"total": 166, "additions": 28, "deletions": 138}, "files": [{"sha": "c581a9771b48634fbe5326c187f3749a7824114d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8267926cfcaddc979ba021882ba2ff2f50003d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8267926cfcaddc979ba021882ba2ff2f50003d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba8267926cfcaddc979ba021882ba2ff2f50003d", "patch": "@@ -1,3 +1,17 @@\n+2013-12-11  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tReverted:\n+\t2013-12-10  Bin Cheng  <bin.cheng@arm.com>\n+\tPR tree-optimization/41488\n+\t* tree-ssa-loop-ivopts.c (add_old_iv_candidates): Don't add cand\n+\tfor PEELED_CHREC kind IV.\n+\t* tree-scalar-evolution.c: Include necessary header files.\n+\t(peeled_chrec_map, simplify_peeled_chrec): New.\n+\t(analyze_evolution_in_loop): New static variable.\n+\tCall simplify_peeled_chrec.\n+\t(scev_initialize): Initialize peeled_chrec_map.\n+\t(scev_reset, scev_finalize): Reset and release peeled_chrec_map.\n+\n 2013-12-10   H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/59458"}, {"sha": "02da360515b423be1b2575fdee6a85b6e5648f0f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8267926cfcaddc979ba021882ba2ff2f50003d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8267926cfcaddc979ba021882ba2ff2f50003d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ba8267926cfcaddc979ba021882ba2ff2f50003d", "patch": "@@ -1,3 +1,11 @@\n+2013-12-11  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tReverted:\n+\t2013-12-10  Bin Cheng  <bin.cheng@arm.com>\n+\tPR tree-optimization/41488\n+\t* gcc.dg/tree-ssa/scev-7.c: New test.\n+\t* gcc.dg/pr41488.c: New test.\n+\n 2013-12-10  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/35831"}, {"sha": "c4bc42832b3676f7bcd216e229ea575811ffad81", "filename": "gcc/testsuite/gcc.dg/pr41488.c", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/748a18534a1e52304770795890c932045312896a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr41488.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/748a18534a1e52304770795890c932045312896a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr41488.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr41488.c?ref=748a18534a1e52304770795890c932045312896a", "patch": "@@ -1,18 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-sccp-scev\" } */\n-\n-struct struct_t\n-{\n-  int* data;\n-};\n-\n-void foo (struct struct_t* sp, int start, int end)\n-{\n-  int i;\n-\n-  for (i = 0; i+start < end; i++)\n-    sp->data[i+start] = 0;\n-}\n-\n-/* { dg-final { scan-tree-dump-times \"Simplify PEELED_CHREC into POLYNOMIAL_CHREC\" 1 \"sccp\" } } */\n-/* { dg-final { cleanup-tree-dump \"sccp\" } } */"}, {"sha": "d6ceb208258cdec32da17f6519c10c10b6a6a066", "filename": "gcc/testsuite/gcc.dg/tree-ssa/scev-7.c", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/748a18534a1e52304770795890c932045312896a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/748a18534a1e52304770795890c932045312896a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-7.c?ref=748a18534a1e52304770795890c932045312896a", "patch": "@@ -1,18 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-sccp-scev\" } */\n-\n-struct struct_t\n-{\n-  int* data;\n-};\n-\n-void foo (struct struct_t* sp, int start, int end)\n-{\n-  int i;\n-\n-  for (i = 1000; i+start > end; i--)\n-    sp->data[i+start] = 0;\n-}\n-\n-/* { dg-final { scan-tree-dump-times \"Simplify PEELED_CHREC into POLYNOMIAL_CHREC\" 1 \"sccp\" } } */\n-/* { dg-final { cleanup-tree-dump \"sccp\" } } */"}, {"sha": "59e44cbb9c9383e48c85f3ff11b4a578d9bba03f", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 1, "deletions": 89, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8267926cfcaddc979ba021882ba2ff2f50003d/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8267926cfcaddc979ba021882ba2ff2f50003d/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=ba8267926cfcaddc979ba021882ba2ff2f50003d", "patch": "@@ -280,8 +280,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa.h\"\n #include \"cfgloop.h\"\n #include \"tree-chrec.h\"\n-#include \"pointer-set.h\"\n-#include \"tree-affine.h\"\n #include \"tree-scalar-evolution.h\"\n #include \"dumpfile.h\"\n #include \"params.h\"\n@@ -1382,66 +1380,6 @@ follow_ssa_edge (struct loop *loop, gimple def, gimple halting_phi,\n }\n \n \f\n-/* Pointer map used when simplifying PEELED_CHREC into POLYNOMIAL_CHREC.  */\n-static pointer_map_t *peeled_chrec_map;\n-\n-/* Simplify PEELED_CHREC represented by (init_cond, arg) in LOOP.\n-   Handle below case and return the corresponding POLYNOMIAL_CHREC:\n-\n-   # i_17 = PHI <i_13(5), 0(3)>\n-   # _20 = PHI <_5(5), start_4(D)(3)>\n-   ...\n-   i_13 = i_17 + 1;\n-   _5 = start_4(D) + i_13;\n-\n-   Though variable _20 appears as a PEELED_CHREC in the form of\n-   (start_4, _5)_LOOP, it's a POLYNOMIAL_CHREC like {start_4, 1}_LOOP.\n-\n-   See PR41488.  */\n-\n-static tree\n-simplify_peeled_chrec (struct loop *loop, tree arg, tree init_cond)\n-{\n-  aff_tree aff1, aff2;\n-  tree ev, left, right, type, step_val;\n-\n-  ev = instantiate_parameters (loop, analyze_scalar_evolution (loop, arg));\n-  if (ev == NULL_TREE || TREE_CODE (ev) != POLYNOMIAL_CHREC)\n-    return chrec_dont_know;\n-\n-  left = CHREC_LEFT (ev);\n-  right = CHREC_RIGHT (ev);\n-  type = TREE_TYPE (left);\n-  step_val = chrec_fold_plus (type, init_cond, right);\n-\n-  /* Transform (init, {left, right}_LOOP)_LOOP to {init, right}_LOOP\n-     if \"left\" equals to \"init + right\".  */\n-  if (operand_equal_p (left, step_val, 0))\n-    {\n-      if (dump_file && (dump_flags & TDF_SCEV))\n-\tfprintf (dump_file, \"Simplify PEELED_CHREC into POLYNOMIAL_CHREC.\\n\");\n-\n-      return build_polynomial_chrec (loop->num, init_cond, right);\n-    }\n-\n-  /* Try harder to check if they are equal.  */\n-  tree_to_aff_combination_expand (left, type, &aff1, &peeled_chrec_map);\n-  tree_to_aff_combination_expand (step_val, type, &aff2, &peeled_chrec_map);\n-  aff_combination_scale (&aff2, double_int_minus_one);\n-  aff_combination_add (&aff1, &aff2);\n-  left = fold_convert (type, aff_combination_to_tree (&aff1));\n-\n-  /* Transform (init, {left, right}_LOOP)_LOOP to {init, right}_LOOP\n-     if \"left\" equals to \"init + right\".  */\n-  if (operand_equal_p (left, integer_zero_node, 0))\n-    {\n-      if (dump_file && (dump_flags & TDF_SCEV))\n-\tfprintf (dump_file, \"Simplify PEELED_CHREC into POLYNOMIAL_CHREC.\\n\");\n-\n-      return build_polynomial_chrec (loop->num, init_cond, right);\n-    }\n-  return chrec_dont_know;\n-}\n \n /* Given a LOOP_PHI_NODE, this function determines the evolution\n    function from LOOP_PHI_NODE to LOOP_PHI_NODE in the loop.  */\n@@ -1454,7 +1392,6 @@ analyze_evolution_in_loop (gimple loop_phi_node,\n   tree evolution_function = chrec_not_analyzed_yet;\n   struct loop *loop = loop_containing_stmt (loop_phi_node);\n   basic_block bb;\n-  static bool simplify_peeled_chrec_p = true;\n \n   if (dump_file && (dump_flags & TDF_SCEV))\n     {\n@@ -1505,19 +1442,7 @@ analyze_evolution_in_loop (gimple loop_phi_node,\n \t all the other iterations it has the value of ARG.\n \t For the moment, PEELED_CHREC nodes are not built.  */\n       if (res != t_true)\n-\t{\n-\t  ev_fn = chrec_dont_know;\n-\t  /* Try to recognize POLYNOMIAL_CHREC which appears in\n-\t     the form of PEELED_CHREC, but guard the process with\n-\t     a bool variable to keep the analyzer from infinite\n-\t     recurrence for real PEELED_RECs.  */\n-\t  if (simplify_peeled_chrec_p && TREE_CODE (arg) == SSA_NAME)\n-\t    {\n-\t      simplify_peeled_chrec_p = false;\n-\t      ev_fn = simplify_peeled_chrec (loop, arg, init_cond);\n-\t      simplify_peeled_chrec_p = true;\n-\t    }\n-\t}\n+\tev_fn = chrec_dont_know;\n \n       /* When there are multiple back edges of the loop (which in fact never\n \t happens currently, but nevertheless), merge their evolutions.  */\n@@ -3161,8 +3086,6 @@ scev_initialize (void)\n \n   initialize_scalar_evolutions_analyzer ();\n \n-  peeled_chrec_map = pointer_map_create ();\n-\n   FOR_EACH_LOOP (loop, 0)\n     {\n       loop->nb_iterations = NULL_TREE;\n@@ -3199,12 +3122,6 @@ scev_reset (void)\n \n   scev_reset_htab ();\n \n-  if (peeled_chrec_map)\n-    {\n-      pointer_map_destroy (peeled_chrec_map);\n-      peeled_chrec_map = NULL;\n-    }\n-\n   if (!current_loops)\n     return;\n \n@@ -3292,11 +3209,6 @@ scev_finalize (void)\n     return;\n   htab_delete (scalar_evolution_info);\n   scalar_evolution_info = NULL;\n-  if (peeled_chrec_map)\n-    {\n-      pointer_map_destroy (peeled_chrec_map);\n-      peeled_chrec_map = NULL;\n-    }\n }\n \n /* Returns true if the expression EXPR is considered to be too expensive"}, {"sha": "fb3ceb9a1b5a62c93e5e6b1ca45f3a7dd833e89a", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba8267926cfcaddc979ba021882ba2ff2f50003d/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba8267926cfcaddc979ba021882ba2ff2f50003d/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=ba8267926cfcaddc979ba021882ba2ff2f50003d", "patch": "@@ -2526,19 +2526,11 @@ add_old_iv_candidates (struct ivopts_data *data, struct iv *iv)\n       /* Additionally record the possibility of leaving the original iv\n \t untouched.  */\n       def = PHI_ARG_DEF_FROM_EDGE (phi, loop_latch_edge (data->current_loop));\n-      /* Don't add candidate if it's from another PHI node because\n-\t  it's an affine iv appearing in the form of PEELED_CHREC.  */\n-      phi = SSA_NAME_DEF_STMT (def);\n-      if (gimple_code (phi) != GIMPLE_PHI)\n-\t{\n-\t  cand = add_candidate_1 (data,\n-\t\t\t\t  iv->base, iv->step, true, IP_ORIGINAL, NULL,\n-\t\t\t\t  SSA_NAME_DEF_STMT (def));\n-\t  cand->var_before = iv->ssa_name;\n-\t  cand->var_after = def;\n-\t}\n-      else\n-\tgcc_assert (gimple_bb (phi) == data->current_loop->header);\n+      cand = add_candidate_1 (data,\n+\t\t\t      iv->base, iv->step, true, IP_ORIGINAL, NULL,\n+\t\t\t      SSA_NAME_DEF_STMT (def));\n+      cand->var_before = iv->ssa_name;\n+      cand->var_after = def;\n     }\n }\n "}]}