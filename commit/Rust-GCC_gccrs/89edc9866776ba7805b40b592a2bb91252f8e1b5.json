{"sha": "89edc9866776ba7805b40b592a2bb91252f8e1b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODllZGM5ODY2Nzc2YmE3ODA1YjQwYjU5MmEyYmI5MTI1MmY4ZTFiNQ==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-11-04T12:05:52Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-11-04T12:05:52Z"}, "message": "[ARM] Migrate to new reduc_plus_scal_optab\n\n\tconfig/arm/neon.md (reduc_plus_*): Rename to...\n\t(reduc_plus_scal_*): ...this; reduce to temp and extract scalar result.\n\nFrom-SVN: r217079", "tree": {"sha": "45808ba2a019b97364e7c6c34cdc28a8f4dfb2e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45808ba2a019b97364e7c6c34cdc28a8f4dfb2e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89edc9866776ba7805b40b592a2bb91252f8e1b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89edc9866776ba7805b40b592a2bb91252f8e1b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89edc9866776ba7805b40b592a2bb91252f8e1b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89edc9866776ba7805b40b592a2bb91252f8e1b5/comments", "author": null, "committer": null, "parents": [{"sha": "95d47b10bedd6cbdd7d18f8d59ea5bcee14d04a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95d47b10bedd6cbdd7d18f8d59ea5bcee14d04a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95d47b10bedd6cbdd7d18f8d59ea5bcee14d04a6"}], "stats": {"total": 48, "additions": 28, "deletions": 20}, "files": [{"sha": "a2568e47b5ff27d2ffb56b27e5e1efdc6a11e5ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89edc9866776ba7805b40b592a2bb91252f8e1b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89edc9866776ba7805b40b592a2bb91252f8e1b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89edc9866776ba7805b40b592a2bb91252f8e1b5", "patch": "@@ -1,3 +1,8 @@\n+2014-11-04  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\tconfig/arm/neon.md (reduc_plus_*): Rename to...\n+\t(reduc_plus_scal_*): ...this; reduce to temp and extract scalar result.\n+\n 2014-11-04  Michael Collison <michael.collison@linaro.org>\n \n \t* config/aarch64/iterators.md (lconst_atomic): New mode attribute"}, {"sha": "482701577157ea8813b6122246be6157515bbcdf", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89edc9866776ba7805b40b592a2bb91252f8e1b5/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89edc9866776ba7805b40b592a2bb91252f8e1b5/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=89edc9866776ba7805b40b592a2bb91252f8e1b5", "patch": "@@ -1349,33 +1349,47 @@\n \n ;; Reduction operations\n \n-(define_expand \"reduc_splus_<mode>\"\n-  [(match_operand:VD 0 \"s_register_operand\" \"\")\n+(define_expand \"reduc_plus_scal_<mode>\"\n+  [(match_operand:<V_elem> 0 \"nonimmediate_operand\" \"\")\n    (match_operand:VD 1 \"s_register_operand\" \"\")]\n   \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n {\n-  neon_pairwise_reduce (operands[0], operands[1], <MODE>mode,\n+  rtx vec = gen_reg_rtx (<MODE>mode);\n+  neon_pairwise_reduce (vec, operands[1], <MODE>mode,\n \t\t\t&gen_neon_vpadd_internal<mode>);\n+  /* The same result is actually computed into every element.  */\n+  emit_insn (gen_vec_extract<mode> (operands[0], vec, const0_rtx));\n   DONE;\n })\n \n-(define_expand \"reduc_splus_<mode>\"\n-  [(match_operand:VQ 0 \"s_register_operand\" \"\")\n+(define_expand \"reduc_plus_scal_<mode>\"\n+  [(match_operand:<V_elem> 0 \"nonimmediate_operand\" \"\")\n    (match_operand:VQ 1 \"s_register_operand\" \"\")]\n   \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\n    && !BYTES_BIG_ENDIAN\"\n {\n   rtx step1 = gen_reg_rtx (<V_HALF>mode);\n-  rtx res_d = gen_reg_rtx (<V_HALF>mode);\n \n   emit_insn (gen_quad_halves_plus<mode> (step1, operands[1]));\n-  emit_insn (gen_reduc_splus_<V_half> (res_d, step1));\n-  emit_insn (gen_move_lo_quad_<mode> (operands[0], res_d));\n+  emit_insn (gen_reduc_plus_scal_<V_half> (operands[0], step1));\n+\n+  DONE;\n+})\n+\n+(define_expand \"reduc_plus_scal_v2di\"\n+  [(match_operand:DI 0 \"nonimmediate_operand\" \"=w\")\n+   (match_operand:V2DI 1 \"s_register_operand\" \"\")]\n+  \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n+{\n+  rtx vec = gen_reg_rtx (V2DImode);\n+\n+  emit_insn (gen_arm_reduc_plus_internal_v2di (vec, operands[1]));\n+  emit_insn (gen_vec_extractv2di (operands[0], vec, const0_rtx));\n \n   DONE;\n })\n \n-(define_insn \"reduc_splus_v2di\"\n+(define_insn \"arm_reduc_plus_internal_v2di\"\n   [(set (match_operand:V2DI 0 \"s_register_operand\" \"=w\")\n \t(unspec:V2DI [(match_operand:V2DI 1 \"s_register_operand\" \"w\")]\n \t\t     UNSPEC_VPADD))]\n@@ -1384,17 +1398,6 @@\n   [(set_attr \"type\" \"neon_add_q\")]\n )\n \n-;; NEON does not distinguish between signed and unsigned addition except on\n-;; widening operations.\n-(define_expand \"reduc_uplus_<mode>\"\n-  [(match_operand:VDQI 0 \"s_register_operand\" \"\")\n-   (match_operand:VDQI 1 \"s_register_operand\" \"\")]\n-  \"TARGET_NEON && (<Is_d_reg> || !BYTES_BIG_ENDIAN)\"\n-{\n-  emit_insn (gen_reduc_splus_<mode> (operands[0], operands[1]));\n-  DONE;\n-})\n-\n (define_expand \"reduc_smin_<mode>\"\n   [(match_operand:VD 0 \"s_register_operand\" \"\")\n    (match_operand:VD 1 \"s_register_operand\" \"\")]"}]}