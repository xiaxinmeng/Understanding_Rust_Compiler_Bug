{"sha": "719488f819ceb7e7185bf324f04aa9030ba9c2ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE5NDg4ZjgxOWNlYjdlNzE4NWJmMzI0ZjA0YWE5MDMwYmE5YzJhZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-07-27T13:44:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-07-27T13:44:51Z"}, "message": "re PR tree-optimization/81571 (ICE at -O3 in both 32-bit and 64-bit modes (internal compiler error: in as_a, at is-a.h:192))\n\n2017-07-27  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/81571\n\t* tree-vect-slp.c (vect_build_slp_tree): Properly verify reduction\n\tPHIs.\n\n\t* gcc.dg/torture/pr81571.c: New testcase.\n\nFrom-SVN: r250626", "tree": {"sha": "a5112dcccea389b89c2b45df21c4b1bd83af3533", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5112dcccea389b89c2b45df21c4b1bd83af3533"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/719488f819ceb7e7185bf324f04aa9030ba9c2ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/719488f819ceb7e7185bf324f04aa9030ba9c2ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/719488f819ceb7e7185bf324f04aa9030ba9c2ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/719488f819ceb7e7185bf324f04aa9030ba9c2ad/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e88a93840b20153a80b9504b3233e58012b009d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e88a93840b20153a80b9504b3233e58012b009d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e88a93840b20153a80b9504b3233e58012b009d5"}], "stats": {"total": 48, "additions": 44, "deletions": 4}, "files": [{"sha": "3ae2f46c8f2b2cf88ea5b8411d4cf9bed4b824a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/719488f819ceb7e7185bf324f04aa9030ba9c2ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/719488f819ceb7e7185bf324f04aa9030ba9c2ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=719488f819ceb7e7185bf324f04aa9030ba9c2ad", "patch": "@@ -1,3 +1,9 @@\n+2017-07-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/81571\n+\t* tree-vect-slp.c (vect_build_slp_tree): Properly verify reduction\n+\tPHIs.\n+\n 2017-07-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/sparc/sparc.c (sparc_option_override): Set MASK_FSMULD flag"}, {"sha": "e12654400b92c477b7705b2f4f4fb4aa3fcd440a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/719488f819ceb7e7185bf324f04aa9030ba9c2ad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/719488f819ceb7e7185bf324f04aa9030ba9c2ad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=719488f819ceb7e7185bf324f04aa9030ba9c2ad", "patch": "@@ -1,3 +1,8 @@\n+2017-07-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/81571\n+\t* gcc.dg/torture/pr81571.c: New testcase.\n+\n 2017-07-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/81502"}, {"sha": "74bceb763ea459ccf1f48e4cc9131eaca995df6c", "filename": "gcc/testsuite/gcc.dg/torture/pr81571.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/719488f819ceb7e7185bf324f04aa9030ba9c2ad/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr81571.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/719488f819ceb7e7185bf324f04aa9030ba9c2ad/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr81571.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr81571.c?ref=719488f819ceb7e7185bf324f04aa9030ba9c2ad", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+int a, b, c, d;\n+short fn1(int p1, int p2) { return p1; }\n+\n+int fn2(int p1) {}\n+\n+int main()\n+{\n+  for (; c; c++)\n+    a |= fn1(1, a) | fn2(b |= d);\n+  return 0;\n+}"}, {"sha": "15d589d345257c56cc31fa7392558d12222cc543", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/719488f819ceb7e7185bf324f04aa9030ba9c2ad/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/719488f819ceb7e7185bf324f04aa9030ba9c2ad/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=719488f819ceb7e7185bf324f04aa9030ba9c2ad", "patch": "@@ -947,11 +947,27 @@ vect_build_slp_tree (vec_info *vinfo,\n      the recursion.  */\n   if (gimple_code (stmt) == GIMPLE_PHI)\n     {\n+      vect_def_type def_type = STMT_VINFO_DEF_TYPE (vinfo_for_stmt (stmt));\n       /* Induction from different IVs is not supported.  */\n-      if (STMT_VINFO_DEF_TYPE (vinfo_for_stmt (stmt)) == vect_induction_def)\n-\tFOR_EACH_VEC_ELT (stmts, i, stmt)\n-\t  if (stmt != stmts[0])\n-\t    return NULL;\n+      if (def_type == vect_induction_def)\n+\t{\n+\t  FOR_EACH_VEC_ELT (stmts, i, stmt)\n+\t    if (stmt != stmts[0])\n+\t      return NULL;\n+\t}\n+      else\n+\t{\n+\t  /* Else def types have to match.  */\n+\t  FOR_EACH_VEC_ELT (stmts, i, stmt)\n+\t    {\n+\t      /* But for reduction chains only check on the first stmt.  */\n+\t      if (GROUP_FIRST_ELEMENT (vinfo_for_stmt (stmt))\n+\t\t  && GROUP_FIRST_ELEMENT (vinfo_for_stmt (stmt)) != stmt)\n+\t\tcontinue;\n+\t      if (STMT_VINFO_DEF_TYPE (vinfo_for_stmt (stmt)) != def_type)\n+\t\treturn NULL;\n+\t    }\n+\t}\n       node = vect_create_new_slp_node (stmts);\n       return node;\n     }"}]}