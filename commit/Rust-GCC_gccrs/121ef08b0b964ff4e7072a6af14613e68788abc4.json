{"sha": "121ef08b0b964ff4e7072a6af14613e68788abc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIxZWYwOGIwYjk2NGZmNGU3MDcyYTZhZjE0NjEzZTY4Nzg4YWJjNA==", "commit": {"author": {"name": "Giuliano Belinassi", "email": "giuliano.belinassi@usp.br", "date": "2018-10-11T21:06:12Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-10-11T21:06:12Z"}, "message": "re PR tree-optimization/86829 (Missing sin(atan(x)) and cos(atan(x)) optimizations)\n\n\tPR tree-optimization/86829\n\t* match.pd (sin (atan (x))): New simplification rules.\n\t(cos (atan (x))): Likewise.\n\t* real.c (build_sinatan_real): New function.\n\t* real.h (build_sinatan_real): Prototype.\n\n\tPR tree-optimization/86829\n\t* gcc.dg/sinatan-1.c: New test.\n\t* gcc.dg/sinatan-2.c: New test.\n\t* gcc.dg/sinatan-3.c: New test.\n\nFrom-SVN: r265064", "tree": {"sha": "e967a89e2270c12ad7a8fa8d6fbf6f4a32132efd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e967a89e2270c12ad7a8fa8d6fbf6f4a32132efd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/121ef08b0b964ff4e7072a6af14613e68788abc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/121ef08b0b964ff4e7072a6af14613e68788abc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/121ef08b0b964ff4e7072a6af14613e68788abc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/121ef08b0b964ff4e7072a6af14613e68788abc4/comments", "author": null, "committer": null, "parents": [{"sha": "ea010af6b4d780261b791999e43ba056edce2af0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea010af6b4d780261b791999e43ba056edce2af0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea010af6b4d780261b791999e43ba056edce2af0"}], "stats": {"total": 309, "additions": 309, "deletions": 0}, "files": [{"sha": "307d64ac88135ee338073bcab73cd07e79a47127", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/121ef08b0b964ff4e7072a6af14613e68788abc4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/121ef08b0b964ff4e7072a6af14613e68788abc4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=121ef08b0b964ff4e7072a6af14613e68788abc4", "patch": "@@ -1,3 +1,11 @@\n+2018-10-11  Giuliano Belinassi  <giuliano.belinassi@usp.br>\n+\n+\tPR tree-optimization/86829\n+\t* match.pd (sin (atan (x))): New simplification rules.\n+\t(cos (atan (x))): Likewise.\n+\t* real.c (build_sinatan_real): New function.\n+\t* real.h (build_sinatan_real): Prototype.\n+\n 2018-10-11  Will Schmidt <will_schmidt@vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (map_to_integral_tree_type): New helper"}, {"sha": "94fbab841f5e36bd33fda849a686fd80886ee1ff", "filename": "gcc/match.pd", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/121ef08b0b964ff4e7072a6af14613e68788abc4/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/121ef08b0b964ff4e7072a6af14613e68788abc4/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=121ef08b0b964ff4e7072a6af14613e68788abc4", "patch": "@@ -4223,6 +4223,45 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    (tans (atans @0))\n    @0)))\n \n+ /* Simplify sin(atan(x)) -> x / sqrt(x*x + 1). */\n+ (for sins (SIN)\n+      atans (ATAN)\n+      sqrts (SQRT)\n+      copysigns (COPYSIGN)\n+  (simplify\n+   (sins (atans:s @0))\n+   (with\n+     {\n+      REAL_VALUE_TYPE r_cst;\n+      build_sinatan_real (&r_cst, type);\n+      tree t_cst = build_real (type, r_cst);\n+      tree t_one = build_one_cst (type);\n+     }\n+    (if (SCALAR_FLOAT_TYPE_P (type))\n+     (cond (le (abs @0) { t_cst; })\n+      (rdiv @0 (sqrts (plus (mult @0 @0) { t_one; })))\n+      (copysigns { t_one; } @0))))))\n+\n+/* Simplify cos(atan(x)) -> 1 / sqrt(x*x + 1). */\n+ (for coss (COS)\n+      atans (ATAN)\n+      sqrts (SQRT)\n+      copysigns (COPYSIGN)\n+  (simplify\n+   (coss (atans:s @0))\n+   (with\n+     {\n+      REAL_VALUE_TYPE r_cst;\n+      build_sinatan_real (&r_cst, type);\n+      tree t_cst = build_real (type, r_cst);\n+      tree t_one = build_one_cst (type);\n+      tree t_zero = build_zero_cst (type);\n+     }\n+    (if (SCALAR_FLOAT_TYPE_P (type))\n+     (cond (le (abs @0) { t_cst; })\n+      (rdiv { t_one; } (sqrts (plus (mult @0 @0) { t_one; })))\n+      (copysigns { t_zero; } @0))))))\n+\n /* cabs(x+0i) or cabs(0+xi) -> abs(x).  */\n (simplify\n  (CABS (complex:C @0 real_zerop@1))"}, {"sha": "51f8fd5b3aeb02ce2a996ce730721f9402031c84", "filename": "gcc/real.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/121ef08b0b964ff4e7072a6af14613e68788abc4/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/121ef08b0b964ff4e7072a6af14613e68788abc4/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=121ef08b0b964ff4e7072a6af14613e68788abc4", "patch": "@@ -5279,3 +5279,29 @@ HONOR_SIGN_DEPENDENT_ROUNDING (const_rtx x)\n {\n   return HONOR_SIGN_DEPENDENT_ROUNDING (GET_MODE (x));\n }\n+\n+/* Fills r with the largest value such that 1 + r*r won't overflow.\n+   This is used in both sin (atan (x)) and cos (atan(x)) optimizations. */\n+\n+void\n+build_sinatan_real (REAL_VALUE_TYPE * r, tree type)\n+{\n+  REAL_VALUE_TYPE maxval;\n+  mpfr_t mpfr_const1, mpfr_c, mpfr_maxval;\n+  machine_mode mode = TYPE_MODE (type);\n+  const struct real_format * fmt = REAL_MODE_FORMAT (mode);\n+\n+  real_maxval (&maxval, 0, mode);\n+\n+  mpfr_inits (mpfr_const1, mpfr_c, mpfr_maxval, NULL);\n+\n+  mpfr_from_real (mpfr_const1, &dconst1, GMP_RNDN);\n+  mpfr_from_real (mpfr_maxval, &maxval,  GMP_RNDN);\n+\n+  mpfr_sub (mpfr_c, mpfr_maxval, mpfr_const1, GMP_RNDN);\n+  mpfr_sqrt (mpfr_c, mpfr_c, GMP_RNDZ);\n+\n+  real_from_mpfr (r, mpfr_c, fmt, GMP_RNDZ);\n+  \n+  mpfr_clears (mpfr_const1, mpfr_c, mpfr_maxval, NULL);\n+}"}, {"sha": "561d0fda129d01db9c64b2c2d8af4f882227cab8", "filename": "gcc/real.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/121ef08b0b964ff4e7072a6af14613e68788abc4/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/121ef08b0b964ff4e7072a6af14613e68788abc4/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=121ef08b0b964ff4e7072a6af14613e68788abc4", "patch": "@@ -523,4 +523,8 @@ extern void real_from_integer (REAL_VALUE_TYPE *, format_helper,\n \t\t\t       const wide_int_ref &, signop);\n #endif\n \n+/* Fills r with the largest value such that 1 + r*r won't overflow.\n+   This is used in both sin (atan (x)) and cos (atan(x)) optimizations. */\n+extern void build_sinatan_real (REAL_VALUE_TYPE *, tree); \n+\n #endif /* ! GCC_REAL_H */"}, {"sha": "c8d0d3fbd356ce840c87b0bddb71f15cf915ec02", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/121ef08b0b964ff4e7072a6af14613e68788abc4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/121ef08b0b964ff4e7072a6af14613e68788abc4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=121ef08b0b964ff4e7072a6af14613e68788abc4", "patch": "@@ -1,3 +1,10 @@\n+2018-10-09  Giuliano Belinassi  <giuliano.belinassi@usp.br>\n+\n+\tPR tree-optimization/86829\n+\t* gcc.dg/sinatan-1.c: New test.\n+\t* gcc.dg/sinatan-2.c: New test.\n+\t* gcc.dg/sinatan-3.c: New test.\n+\n 2018-10-11  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* gcc.target/powerpc/fold-vec-mergeeo-floatdouble.c: New."}, {"sha": "194926ce8d4c7e8cda332e5a7648e43054ba4714", "filename": "gcc/testsuite/gcc.dg/sinatan-1.c", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/121ef08b0b964ff4e7072a6af14613e68788abc4/gcc%2Ftestsuite%2Fgcc.dg%2Fsinatan-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/121ef08b0b964ff4e7072a6af14613e68788abc4/gcc%2Ftestsuite%2Fgcc.dg%2Fsinatan-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsinatan-1.c?ref=121ef08b0b964ff4e7072a6af14613e68788abc4", "patch": "@@ -0,0 +1,101 @@\n+/* { dg-do run } */\n+/* { dg-options \"-Ofast\" } */\n+\n+extern float sinf (float);\n+extern float cosf (float);\n+extern float atanf (float);\n+extern float sqrtf (float);\n+extern float nextafterf (float, float);\n+extern double sin (double);\n+extern double cos (double);\n+extern double atan (double);\n+extern double sqrt (double);\n+extern double nextafter (double, double);\n+extern long double sinl (long double);\n+extern long double cosl (long double);\n+extern long double atanl (long double);\n+extern long double sqrtl (long double);\n+extern long double nextafterl (long double, long double);\n+\n+extern void abort ();\n+\n+double __attribute__ ((noinline, optimize(\"Ofast\")))\n+sinatan (double x)\n+{\n+    return sin (atan (x));\n+}\n+\n+double __attribute__ ((noinline, optimize(\"Ofast\")))\n+cosatan (double x)\n+{\n+    return cos (atan (x));\n+}\n+\n+float __attribute__ ((noinline, optimize(\"Ofast\")))\n+sinatanf(float x)\n+{\n+    return sinf (atanf (x));\n+}\n+\n+float __attribute__ ((noinline, optimize(\"Ofast\")))\n+cosatanf(float x)\n+{\n+    return cosf (atanf (x));\n+}\n+\n+long double __attribute__ ((noinline, optimize(\"Ofast\")))\n+sinatanl (long double x)\n+{\n+    return sinl (atanl (x));\n+}\n+\n+long double __attribute__ ((noinline, optimize(\"Ofast\")))\n+cosatanl (long double x)\n+{\n+    return cosl (atanl (x));\n+}\n+\n+int\n+main()\n+{\n+    /* Get first x such that 1 + x*x will overflow */\n+    float fc = nextafterf (sqrtf (__FLT_MAX__ - 1), __FLT_MAX__);\n+    double c = nextafter (sqrt (__DBL_MAX__ - 1), __DBL_MAX__);\n+    long double lc = nextafter (sqrtl (__LDBL_MAX__ - 1), __LDBL_MAX__);\n+\n+    /*  Force move from FPU to memory, otherwise comparison may\n+        fail due to possible more accurate registers (see 387)  */\n+    volatile float fy;\n+    volatile double y;\n+    volatile long double ly;\n+\n+    fy = sinatanf (fc);\n+    y = sinatan (c);\n+    ly = sinatanl (lc);\n+\n+    if (fy != 1.f || y != 1 || ly != 1.L)\n+        abort ();\n+\n+    fy = cosatanf (fc);\n+    y = cosatan (c);\n+    ly = cosatanl (lc);\n+\n+    if (fy != 0.f || y != 0. || ly != 0.L)\n+        abort ();\n+\n+    fy = sinatanf (-fc);\n+    y = sinatan (-c);\n+    ly = sinatanl (-lc);\n+\n+    if (fy != -1.f || y != -1. || ly != -1.L)\n+        abort ();\n+    \n+    fy = cosatanf (-fc);\n+    y = cosatan (-c);\n+    ly = cosatanl (-lc);\n+\n+    if (fy != 0.f || y != 0. || ly != 0.L)\n+        abort ();\n+\n+    return 0;\n+}"}, {"sha": "07a1e1e0c19d13adcd6d9c1fb62f7e6b170f29bf", "filename": "gcc/testsuite/gcc.dg/sinatan-2.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/121ef08b0b964ff4e7072a6af14613e68788abc4/gcc%2Ftestsuite%2Fgcc.dg%2Fsinatan-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/121ef08b0b964ff4e7072a6af14613e68788abc4/gcc%2Ftestsuite%2Fgcc.dg%2Fsinatan-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsinatan-2.c?ref=121ef08b0b964ff4e7072a6af14613e68788abc4", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -fdump-tree-optimized\" } */\n+\n+extern float sinf (float);\n+extern float cosf (float);\n+extern float atanf (float);\n+extern double sin (double);\n+extern double cos (double);\n+extern double atan (double);\n+extern long double sinl (long double);\n+extern long double cosl (long double);\n+extern long double atanl (long double);\n+\n+double __attribute__ ((noinline))\n+sinatan_ (double x)\n+{\n+    return sin (atan (x));\n+}\n+\n+double __attribute__ ((noinline))\n+cosatan_ (double x)\n+{\n+    return cos (atan (x));\n+}\n+\n+float __attribute__ ((noinline))\n+sinatanf_(float x)\n+{\n+    return sinf (atanf (x));\n+}\n+\n+float __attribute__ ((noinline))\n+cosatanf_(float x)\n+{\n+    return cosf (atanf (x));\n+}\n+\n+long double __attribute__ ((noinline))\n+sinatanl_ (long double x)\n+{\n+    return sinl (atanl (x));\n+}\n+\n+long double __attribute__ ((noinline))\n+cosatanl_ (long double x)\n+{\n+    return cosl (atanl (x));\n+}\n+\n+/* There must be no calls to sin, cos, or atan */\n+/* {dg-final { scan-tree-dump-not \"sin \" \"optimized\" } } */\n+/* {dg-final { scan-tree-dump-not \"cos \" \"optimized\" } } */\n+/* {dg-final { scan-tree-dump-not \"atan \" \"optimized\" }} */\n+/* {dg-final { scan-tree-dump-not \"sinf \" \"optimized\" } } */\n+/* {dg-final { scan-tree-dump-not \"cosf \" \"optimized\" } } */\n+/* {dg-final { scan-tree-dump-not \"atanf \" \"optimized\" }} */\n+/* {dg-final { scan-tree-dump-not \"sinl \" \"optimized\" } } */\n+/* {dg-final { scan-tree-dump-not \"cosl \" \"optimized\" } } */\n+/* {dg-final { scan-tree-dump-not \"atanl \" \"optimized\" }} */"}, {"sha": "600d475ba55f9cd2d0351ab73d4d5e17366380a3", "filename": "gcc/testsuite/gcc.dg/sinatan-3.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/121ef08b0b964ff4e7072a6af14613e68788abc4/gcc%2Ftestsuite%2Fgcc.dg%2Fsinatan-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/121ef08b0b964ff4e7072a6af14613e68788abc4/gcc%2Ftestsuite%2Fgcc.dg%2Fsinatan-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsinatan-3.c?ref=121ef08b0b964ff4e7072a6af14613e68788abc4", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -fdump-tree-optimized\" } */\n+\n+extern float sinf (float);\n+extern float cosf (float);\n+extern float atanf (float);\n+extern double sin (double);\n+extern double cos (double);\n+extern double atan (double);\n+extern long double sinl (long double);\n+extern long double cosl (long double);\n+extern long double atanl (long double);\n+\n+float __attribute__ ((noinline)) \n+cosatanf_(float x)\n+{\n+    float atg = atanf(x);\n+    return cosf(atg) + atg;\n+}\n+\n+double __attribute__ ((noinline)) \n+cosatan_(double x)\n+{\n+    double atg = atan(x);\n+    return cos(atg) + atg;\n+}\n+\n+long double __attribute__ ((noinline)) \n+cosatanl_(long double x)\n+{\n+    long double atg = atanl(x);\n+    return cosl(atg) + atg;\n+}\n+\n+float __attribute__ ((noinline)) \n+sinatanf_(float x)\n+{\n+    float atg = atanf(x);\n+    return sinf(atg) + atg;\n+}\n+\n+double __attribute__ ((noinline)) \n+sinatan_(double x)\n+{\n+    double atg = atan(x);\n+    return sin(atg) + atg;\n+}\n+\n+long double __attribute__ ((noinline)) \n+sinatanl_(long double x)\n+{\n+    long double atg = atanl(x);\n+    return sinl(atg) + atg;\n+}\n+\n+/* There should be calls to both sin and atan */\n+/* { dg-final { scan-tree-dump \"cos \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"sin \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"atan \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"cosf \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"sinf \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"atanf \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"cosl \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"sinl \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"atanl \" \"optimized\" } } */"}]}