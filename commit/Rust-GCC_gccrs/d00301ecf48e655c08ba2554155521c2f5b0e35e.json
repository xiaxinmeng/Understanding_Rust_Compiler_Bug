{"sha": "d00301ecf48e655c08ba2554155521c2f5b0e35e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAwMzAxZWNmNDhlNjU1YzA4YmEyNTU0MTU1NTIxYzJmNWIwZTM1ZQ==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2017-11-16T09:43:24Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-11-16T09:43:24Z"}, "message": "sem_ch6.adb (Create_Extra_Formals): The type of the BIP_Object_Access formal must not have a designated type that...\n\n2017-11-16  Bob Duff  <duff@adacore.com>\n\n\t* sem_ch6.adb (Create_Extra_Formals): The type of the BIP_Object_Access\n\tformal must not have a designated type that is the full view coming\n\tfrom a limited-with'ed package.\n\t* sem_util.adb,sem_util.ads (Incomplete_View_From_Limited_With): New\n\tfunction called from sem_ch6.\n\t* sem_ch5.adb (Analyze_Assignment): Treat user-defined concatenation\n\tspecially for b-i-p cases.\n\nFrom-SVN: r254801", "tree": {"sha": "17b49bec11b5dc1f2a3b31d70b01d723620a6783", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17b49bec11b5dc1f2a3b31d70b01d723620a6783"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d00301ecf48e655c08ba2554155521c2f5b0e35e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d00301ecf48e655c08ba2554155521c2f5b0e35e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d00301ecf48e655c08ba2554155521c2f5b0e35e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d00301ecf48e655c08ba2554155521c2f5b0e35e/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "36f287603b7d1be4a29dc98ef36deca013948527", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36f287603b7d1be4a29dc98ef36deca013948527", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36f287603b7d1be4a29dc98ef36deca013948527"}], "stats": {"total": 106, "additions": 100, "deletions": 6}, "files": [{"sha": "50b308412a2901bb9012d9104747b35df9e25340", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d00301ecf48e655c08ba2554155521c2f5b0e35e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d00301ecf48e655c08ba2554155521c2f5b0e35e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d00301ecf48e655c08ba2554155521c2f5b0e35e", "patch": "@@ -1,3 +1,13 @@\n+2017-11-16  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch6.adb (Create_Extra_Formals): The type of the BIP_Object_Access\n+\tformal must not have a designated type that is the full view coming\n+\tfrom a limited-with'ed package.\n+\t* sem_util.adb,sem_util.ads (Incomplete_View_From_Limited_With): New\n+\tfunction called from sem_ch6.\n+\t* sem_ch5.adb (Analyze_Assignment): Treat user-defined concatenation\n+\tspecially for b-i-p cases.\n+\n 2017-11-10  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/81117"}, {"sha": "e7fc14983d69e77a278cbcc9c8ce691a6032b6df", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d00301ecf48e655c08ba2554155521c2f5b0e35e/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d00301ecf48e655c08ba2554155521c2f5b0e35e/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=d00301ecf48e655c08ba2554155521c2f5b0e35e", "patch": "@@ -552,6 +552,45 @@ package body Sem_Ch5 is\n       --  in-place.\n \n       if Should_Transform_BIP_Assignment (Typ => T1) then\n+         --  In certain cases involving user-defined concatenation operators,\n+         --  we need to resolve the right-hand side before transforming the\n+         --  assignment.\n+\n+         case Nkind (Unqual_Conv (Rhs)) is\n+            when N_Function_Call =>\n+               declare\n+                  Actual     : Node_Id :=\n+                    First (Parameter_Associations (Unqual_Conv (Rhs)));\n+                  Actual_Exp : Node_Id;\n+\n+               begin\n+                  while Present (Actual) loop\n+                     if Nkind (Actual) = N_Parameter_Association then\n+                        Actual_Exp := Explicit_Actual_Parameter (Actual);\n+                     else\n+                        Actual_Exp := Actual;\n+                     end if;\n+\n+                     if Nkind (Actual_Exp) = N_Op_Concat then\n+                        Resolve (Rhs, T1);\n+                        exit;\n+                     end if;\n+\n+                     Next (Actual);\n+                  end loop;\n+               end;\n+\n+            when N_Op\n+               | N_Expanded_Name\n+               | N_Identifier\n+               | N_Attribute_Reference\n+            =>\n+               null;\n+\n+            when others =>\n+               raise Program_Error;\n+         end case;\n+\n          Transform_BIP_Assignment (Typ => T1);\n       end if;\n "}, {"sha": "764a6f66c88905f21c9132b4cc8a5d0d9a21fdba", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d00301ecf48e655c08ba2554155521c2f5b0e35e/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d00301ecf48e655c08ba2554155521c2f5b0e35e/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=d00301ecf48e655c08ba2554155521c2f5b0e35e", "patch": "@@ -7840,7 +7840,7 @@ package body Sem_Ch6 is\n \n          if No (First_Extra) then\n             First_Extra := EF;\n-            Set_Extra_Formals (Scope, First_Extra);\n+            Set_Extra_Formals (Scope, EF);\n          end if;\n \n          if Present (Last_Extra) then\n@@ -7890,7 +7890,7 @@ package body Sem_Ch6 is\n \n       --  If Extra_Formals were already created, don't do it again. This\n       --  situation may arise for subprogram types created as part of\n-      --  dispatching calls (see Expand_Dispatching_Call)\n+      --  dispatching calls (see Expand_Dispatching_Call).\n \n       if Present (Last_Extra) and then Present (Extra_Formal (Last_Extra)) then\n          return;\n@@ -8028,9 +8028,7 @@ package body Sem_Ch6 is\n             Full_Subt   : constant Entity_Id := Available_View (Result_Subt);\n             Formal_Typ  : Entity_Id;\n             Subp_Decl   : Node_Id;\n-\n-            Discard : Entity_Id;\n-            pragma Warnings (Off, Discard);\n+            Discard     : Entity_Id;\n \n          begin\n             --  In the case of functions with unconstrained result subtypes,\n@@ -8094,7 +8092,14 @@ package body Sem_Ch6 is\n             Formal_Typ :=\n               Create_Itype (E_Anonymous_Access_Type, E, Scope_Id => Scope (E));\n \n-            Set_Directly_Designated_Type (Formal_Typ, Result_Subt);\n+            --  Incomplete_View_From_Limited_With is needed here because\n+            --  gigi gets confused if the designated type is the full view\n+            --  coming from a limited-with'ed package. In the normal case,\n+            --  (no limited with) Incomplete_View_From_Limited_With\n+            --  returns Result_Subt.\n+\n+            Set_Directly_Designated_Type\n+              (Formal_Typ, Incomplete_View_From_Limited_With (Result_Subt));\n             Set_Etype (Formal_Typ, Formal_Typ);\n             Set_Depends_On_Private\n               (Formal_Typ, Has_Private_Component (Formal_Typ));"}, {"sha": "2050286c96c381abd0173ba306ec2c1754fe5f7c", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d00301ecf48e655c08ba2554155521c2f5b0e35e/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d00301ecf48e655c08ba2554155521c2f5b0e35e/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=d00301ecf48e655c08ba2554155521c2f5b0e35e", "patch": "@@ -12213,6 +12213,40 @@ package body Sem_Util is\n       return Empty;\n    end Incomplete_Or_Partial_View;\n \n+   ---------------------------------------\n+   -- Incomplete_View_From_Limited_With --\n+   ---------------------------------------\n+\n+   function Incomplete_View_From_Limited_With\n+     (Typ : Entity_Id) return Entity_Id is\n+   begin\n+      --  It might make sense to make this an attribute in Einfo, and set it\n+      --  in Sem_Ch10 in Build_Shadow_Entity. However, we're running short on\n+      --  slots for new attributes, and it seems a bit simpler to just search\n+      --  the Limited_View (if it exists) for an incomplete type whose\n+      --  Non_Limited_View is Typ.\n+\n+      if Ekind (Scope (Typ)) = E_Package\n+        and then Present (Limited_View (Scope (Typ)))\n+      then\n+         declare\n+            Ent : Entity_Id := First_Entity (Limited_View (Scope (Typ)));\n+         begin\n+            while Present (Ent) loop\n+               if Ekind (Ent) in Incomplete_Kind\n+                 and then Non_Limited_View (Ent) = Typ\n+               then\n+                  return Ent;\n+               end if;\n+\n+               Ent := Next_Entity (Ent);\n+            end loop;\n+         end;\n+      end if;\n+\n+      return Typ;\n+   end Incomplete_View_From_Limited_With;\n+\n    ----------------------------------\n    -- Indexed_Component_Bit_Offset --\n    ----------------------------------"}, {"sha": "4c2cec59e079a77c7def5f6a2695b872f593e6b5", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d00301ecf48e655c08ba2554155521c2f5b0e35e/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d00301ecf48e655c08ba2554155521c2f5b0e35e/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=d00301ecf48e655c08ba2554155521c2f5b0e35e", "patch": "@@ -1425,6 +1425,12 @@ package Sem_Util is\n    --  partial view of the same entity. Note that Id may not have a partial\n    --  view in which case the function returns Empty.\n \n+   function Incomplete_View_From_Limited_With\n+     (Typ : Entity_Id) return Entity_Id;\n+   --  Typ is a type entity. This normally returns Typ. However, if there is\n+   --  an incomplete view of this entity that comes from a limited-with'ed\n+   --  package, then this returns that incomplete view.\n+\n    function Indexed_Component_Bit_Offset (N : Node_Id) return Uint;\n    --  Given an N_Indexed_Component node, return the first bit position of the\n    --  component if it is known at compile time. A value of No_Uint means that"}]}