{"sha": "1d9da71f4f1dcad2a5e2bd3a3e9fac6012a6049b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ5ZGE3MWY0ZjFkY2FkMmE1ZTJiZDNhM2U5ZmFjNjAxMmE2MDQ5Yg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-11-17T18:43:42Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-11-17T18:43:42Z"}, "message": "Make more use of combined_fn\n\nThis patch generalises fold-const.[hc] routines to use combined_fn\ninstead of built_in_function.  It also updates gimple-ssa-backprop,c\nsince the update is simple and it avoids churn on the call to\nnegate_mathfn_p.\n\nTested on x86_64-linux-gnu, aarch64-linux-gnu and arm-linux-gnueabi.\n\ngcc/\n\t* fold-const.h (negate_mathfn_p): Take a combined_fn rather\n\tthan a built_in_function.\n\t(tree_call_nonnegative_warnv_p): Take a combined_fn rather than\n\ta function decl.\n\t(integer_valued_real_call_p): Likewise.\n\t* fold-const.c: Include case-cfn-macros.h\n\t(negate_mathfn_p): Take a combined_fn rather than a built_in_function.\n\t(negate_expr_p): Update accordingly.\n\t(tree_call_nonnegative_warnv_p): Take a combined_fn rather than\n\ta function decl.\n\t(integer_valued_real_call_p): Likewise.\n\t(tree_invalid_nonnegative_warnv_p): Update accordingly.\n\t(integer_valued_real_p): Likewise.\n\t* gimple-fold.c (gimple_call_nonnegative_warnv_p): Update call\n\tto tree_call_nonnegative_warnv_p.\n\t(gimple_call_integer_valued_real_p): Likewise\n\tinteger_valued_real_call_p.\n\t* gimple-ssa-backprop.c: Include case-cfn-macros.h.\n\t(backprop::process_builtin_call_use): Extend to combined_fn.\n\t(strip_sign_op_1): Likewise.\n\t(backprop::process_use): Don't check for built-in calls here.\n\t(backprop::execute): Likewise.\n\t(backprop::optimize_builtin_call): Update call to negate_mathfn_p.\n\nFrom-SVN: r230478", "tree": {"sha": "3e66f5aadc735245c637a8832dd961243bf16b74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e66f5aadc735245c637a8832dd961243bf16b74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d9da71f4f1dcad2a5e2bd3a3e9fac6012a6049b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d9da71f4f1dcad2a5e2bd3a3e9fac6012a6049b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d9da71f4f1dcad2a5e2bd3a3e9fac6012a6049b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d9da71f4f1dcad2a5e2bd3a3e9fac6012a6049b/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d7ebef0648bc358514ed2048a46b22f801c19689", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7ebef0648bc358514ed2048a46b22f801c19689", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7ebef0648bc358514ed2048a46b22f801c19689"}], "stats": {"total": 415, "additions": 217, "deletions": 198}, "files": [{"sha": "75ce9f8b1bf6a9de7f7098175aed7640e2a4ea14", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9da71f4f1dcad2a5e2bd3a3e9fac6012a6049b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9da71f4f1dcad2a5e2bd3a3e9fac6012a6049b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d9da71f4f1dcad2a5e2bd3a3e9fac6012a6049b", "patch": "@@ -1,3 +1,29 @@\n+2015-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* fold-const.h (negate_mathfn_p): Take a combined_fn rather\n+\tthan a built_in_function.\n+\t(tree_call_nonnegative_warnv_p): Take a combined_fn rather than\n+\ta function decl.\n+\t(integer_valued_real_call_p): Likewise.\n+\t* fold-const.c: Include case-cfn-macros.h\n+\t(negate_mathfn_p): Take a combined_fn rather than a built_in_function.\n+\t(negate_expr_p): Update accordingly.\n+\t(tree_call_nonnegative_warnv_p): Take a combined_fn rather than\n+\ta function decl.\n+\t(integer_valued_real_call_p): Likewise.\n+\t(tree_invalid_nonnegative_warnv_p): Update accordingly.\n+\t(integer_valued_real_p): Likewise.\n+\t* gimple-fold.c (gimple_call_nonnegative_warnv_p): Update call\n+\tto tree_call_nonnegative_warnv_p.\n+\t(gimple_call_integer_valued_real_p): Likewise\n+\tinteger_valued_real_call_p.\n+\t* gimple-ssa-backprop.c: Include case-cfn-macros.h.\n+\t(backprop::process_builtin_call_use): Extend to combined_fn.\n+\t(strip_sign_op_1): Likewise.\n+\t(backprop::process_use): Don't check for built-in calls here.\n+\t(backprop::execute): Likewise.\n+\t(backprop::optimize_builtin_call): Update call to negate_mathfn_p.\n+\n 2015-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* fold-const-call.h (fold_const_call): Replace built_in_function"}, {"sha": "698062ee814cdf62a1da0d24febf17aa4611ad89", "filename": "gcc/fold-const.c", "status": "modified", "additions": 160, "deletions": 161, "changes": 321, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9da71f4f1dcad2a5e2bd3a3e9fac6012a6049b/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9da71f4f1dcad2a5e2bd3a3e9fac6012a6049b/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=1d9da71f4f1dcad2a5e2bd3a3e9fac6012a6049b", "patch": "@@ -73,6 +73,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"params.h\"\n #include \"tree-into-ssa.h\"\n #include \"md5.h\"\n+#include \"case-cfn-macros.h\"\n \n #ifndef LOAD_EXTEND_OP\n #define LOAD_EXTEND_OP(M) UNKNOWN\n@@ -313,39 +314,39 @@ fold_overflow_warning (const char* gmsgid, enum warn_strict_overflow_code wc)\n    is odd, i.e. -f(x) == f(-x).  */\n \n bool\n-negate_mathfn_p (enum built_in_function code)\n-{\n-  switch (code)\n-    {\n-    CASE_FLT_FN (BUILT_IN_ASIN):\n-    CASE_FLT_FN (BUILT_IN_ASINH):\n-    CASE_FLT_FN (BUILT_IN_ATAN):\n-    CASE_FLT_FN (BUILT_IN_ATANH):\n-    CASE_FLT_FN (BUILT_IN_CASIN):\n-    CASE_FLT_FN (BUILT_IN_CASINH):\n-    CASE_FLT_FN (BUILT_IN_CATAN):\n-    CASE_FLT_FN (BUILT_IN_CATANH):\n-    CASE_FLT_FN (BUILT_IN_CBRT):\n-    CASE_FLT_FN (BUILT_IN_CPROJ):\n-    CASE_FLT_FN (BUILT_IN_CSIN):\n-    CASE_FLT_FN (BUILT_IN_CSINH):\n-    CASE_FLT_FN (BUILT_IN_CTAN):\n-    CASE_FLT_FN (BUILT_IN_CTANH):\n-    CASE_FLT_FN (BUILT_IN_ERF):\n-    CASE_FLT_FN (BUILT_IN_LLROUND):\n-    CASE_FLT_FN (BUILT_IN_LROUND):\n-    CASE_FLT_FN (BUILT_IN_ROUND):\n-    CASE_FLT_FN (BUILT_IN_SIN):\n-    CASE_FLT_FN (BUILT_IN_SINH):\n-    CASE_FLT_FN (BUILT_IN_TAN):\n-    CASE_FLT_FN (BUILT_IN_TANH):\n-    CASE_FLT_FN (BUILT_IN_TRUNC):\n+negate_mathfn_p (combined_fn fn)\n+{\n+  switch (fn)\n+    {\n+    CASE_CFN_ASIN:\n+    CASE_CFN_ASINH:\n+    CASE_CFN_ATAN:\n+    CASE_CFN_ATANH:\n+    CASE_CFN_CASIN:\n+    CASE_CFN_CASINH:\n+    CASE_CFN_CATAN:\n+    CASE_CFN_CATANH:\n+    CASE_CFN_CBRT:\n+    CASE_CFN_CPROJ:\n+    CASE_CFN_CSIN:\n+    CASE_CFN_CSINH:\n+    CASE_CFN_CTAN:\n+    CASE_CFN_CTANH:\n+    CASE_CFN_ERF:\n+    CASE_CFN_LLROUND:\n+    CASE_CFN_LROUND:\n+    CASE_CFN_ROUND:\n+    CASE_CFN_SIN:\n+    CASE_CFN_SINH:\n+    CASE_CFN_TAN:\n+    CASE_CFN_TANH:\n+    CASE_CFN_TRUNC:\n       return true;\n \n-    CASE_FLT_FN (BUILT_IN_LLRINT):\n-    CASE_FLT_FN (BUILT_IN_LRINT):\n-    CASE_FLT_FN (BUILT_IN_NEARBYINT):\n-    CASE_FLT_FN (BUILT_IN_RINT):\n+    CASE_CFN_LLRINT:\n+    CASE_CFN_LRINT:\n+    CASE_CFN_NEARBYINT:\n+    CASE_CFN_RINT:\n       return !flag_rounding_math;\n \n     default:\n@@ -506,7 +507,7 @@ negate_expr_p (tree t)\n \n     case CALL_EXPR:\n       /* Negate -f(x) as f(-x).  */\n-      if (negate_mathfn_p (builtin_mathfn_code (t)))\n+      if (negate_mathfn_p (get_call_combined_fn (t)))\n \treturn negate_expr_p (CALL_EXPR_ARG (t, 0));\n       break;\n \n@@ -693,7 +694,7 @@ fold_negate_expr (location_t loc, tree t)\n \n     case CALL_EXPR:\n       /* Negate -f(x) as f(-x).  */\n-      if (negate_mathfn_p (builtin_mathfn_code (t))\n+      if (negate_mathfn_p (get_call_combined_fn (t))\n \t  && negate_expr_p (CALL_EXPR_ARG (t, 0)))\n \t{\n \t  tree fndecl, arg;\n@@ -12910,121 +12911,120 @@ tree_single_nonnegative_warnv_p (tree t, bool *strict_overflow_p, int depth)\n    *STRICT_OVERFLOW_P.  DEPTH is the current nesting depth of the query.  */\n \n bool\n-tree_call_nonnegative_warnv_p (tree type, tree fndecl, tree arg0, tree arg1,\n+tree_call_nonnegative_warnv_p (tree type, combined_fn fn, tree arg0, tree arg1,\n \t\t\t       bool *strict_overflow_p, int depth)\n {\n-  if (fndecl && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n-    switch (DECL_FUNCTION_CODE (fndecl))\n-      {\n-\tCASE_FLT_FN (BUILT_IN_ACOS):\n-\tCASE_FLT_FN (BUILT_IN_ACOSH):\n-\tCASE_FLT_FN (BUILT_IN_CABS):\n-\tCASE_FLT_FN (BUILT_IN_COSH):\n-\tCASE_FLT_FN (BUILT_IN_ERFC):\n-\tCASE_FLT_FN (BUILT_IN_EXP):\n-\tCASE_FLT_FN (BUILT_IN_EXP10):\n-\tCASE_FLT_FN (BUILT_IN_EXP2):\n-\tCASE_FLT_FN (BUILT_IN_FABS):\n-\tCASE_FLT_FN (BUILT_IN_FDIM):\n-\tCASE_FLT_FN (BUILT_IN_HYPOT):\n-\tCASE_FLT_FN (BUILT_IN_POW10):\n-\tCASE_INT_FN (BUILT_IN_FFS):\n-\tCASE_INT_FN (BUILT_IN_PARITY):\n-\tCASE_INT_FN (BUILT_IN_POPCOUNT):\n-\tCASE_INT_FN (BUILT_IN_CLZ):\n-\tCASE_INT_FN (BUILT_IN_CLRSB):\n-      case BUILT_IN_BSWAP32:\n-      case BUILT_IN_BSWAP64:\n-\t/* Always true.  */\n-\treturn true;\n+  switch (fn)\n+    {\n+    CASE_CFN_ACOS:\n+    CASE_CFN_ACOSH:\n+    CASE_CFN_CABS:\n+    CASE_CFN_COSH:\n+    CASE_CFN_ERFC:\n+    CASE_CFN_EXP:\n+    CASE_CFN_EXP10:\n+    CASE_CFN_EXP2:\n+    CASE_CFN_FABS:\n+    CASE_CFN_FDIM:\n+    CASE_CFN_HYPOT:\n+    CASE_CFN_POW10:\n+    CASE_CFN_FFS:\n+    CASE_CFN_PARITY:\n+    CASE_CFN_POPCOUNT:\n+    CASE_CFN_CLZ:\n+    CASE_CFN_CLRSB:\n+    case CFN_BUILT_IN_BSWAP32:\n+    case CFN_BUILT_IN_BSWAP64:\n+      /* Always true.  */\n+      return true;\n \n-\tCASE_FLT_FN (BUILT_IN_SQRT):\n-\t/* sqrt(-0.0) is -0.0.  */\n-\tif (!HONOR_SIGNED_ZEROS (element_mode (type)))\n-\t  return true;\n-\treturn RECURSE (arg0);\n-\n-\tCASE_FLT_FN (BUILT_IN_ASINH):\n-\tCASE_FLT_FN (BUILT_IN_ATAN):\n-\tCASE_FLT_FN (BUILT_IN_ATANH):\n-\tCASE_FLT_FN (BUILT_IN_CBRT):\n-\tCASE_FLT_FN (BUILT_IN_CEIL):\n-\tCASE_FLT_FN (BUILT_IN_ERF):\n-\tCASE_FLT_FN (BUILT_IN_EXPM1):\n-\tCASE_FLT_FN (BUILT_IN_FLOOR):\n-\tCASE_FLT_FN (BUILT_IN_FMOD):\n-\tCASE_FLT_FN (BUILT_IN_FREXP):\n-\tCASE_FLT_FN (BUILT_IN_ICEIL):\n-\tCASE_FLT_FN (BUILT_IN_IFLOOR):\n-\tCASE_FLT_FN (BUILT_IN_IRINT):\n-\tCASE_FLT_FN (BUILT_IN_IROUND):\n-\tCASE_FLT_FN (BUILT_IN_LCEIL):\n-\tCASE_FLT_FN (BUILT_IN_LDEXP):\n-\tCASE_FLT_FN (BUILT_IN_LFLOOR):\n-\tCASE_FLT_FN (BUILT_IN_LLCEIL):\n-\tCASE_FLT_FN (BUILT_IN_LLFLOOR):\n-\tCASE_FLT_FN (BUILT_IN_LLRINT):\n-\tCASE_FLT_FN (BUILT_IN_LLROUND):\n-\tCASE_FLT_FN (BUILT_IN_LRINT):\n-\tCASE_FLT_FN (BUILT_IN_LROUND):\n-\tCASE_FLT_FN (BUILT_IN_MODF):\n-\tCASE_FLT_FN (BUILT_IN_NEARBYINT):\n-\tCASE_FLT_FN (BUILT_IN_RINT):\n-\tCASE_FLT_FN (BUILT_IN_ROUND):\n-\tCASE_FLT_FN (BUILT_IN_SCALB):\n-\tCASE_FLT_FN (BUILT_IN_SCALBLN):\n-\tCASE_FLT_FN (BUILT_IN_SCALBN):\n-\tCASE_FLT_FN (BUILT_IN_SIGNBIT):\n-\tCASE_FLT_FN (BUILT_IN_SIGNIFICAND):\n-\tCASE_FLT_FN (BUILT_IN_SINH):\n-\tCASE_FLT_FN (BUILT_IN_TANH):\n-\tCASE_FLT_FN (BUILT_IN_TRUNC):\n-\t/* True if the 1st argument is nonnegative.  */\n-\treturn RECURSE (arg0);\n-\n-\tCASE_FLT_FN (BUILT_IN_FMAX):\n-\t/* True if the 1st OR 2nd arguments are nonnegative.  */\n-\treturn RECURSE (arg0) || RECURSE (arg1);\n-\n-\tCASE_FLT_FN (BUILT_IN_FMIN):\n-\t/* True if the 1st AND 2nd arguments are nonnegative.  */\n-\treturn RECURSE (arg0) && RECURSE (arg1);\n-\n-\tCASE_FLT_FN (BUILT_IN_COPYSIGN):\n-\t/* True if the 2nd argument is nonnegative.  */\n-\treturn RECURSE (arg1);\n-\n-\tCASE_FLT_FN (BUILT_IN_POWI):\n-\t/* True if the 1st argument is nonnegative or the second\n-\t   argument is an even integer.  */\n-\tif (TREE_CODE (arg1) == INTEGER_CST\n-\t    && (TREE_INT_CST_LOW (arg1) & 1) == 0)\n-\t  return true;\n-\treturn RECURSE (arg0);\n+    CASE_CFN_SQRT:\n+      /* sqrt(-0.0) is -0.0.  */\n+      if (!HONOR_SIGNED_ZEROS (element_mode (type)))\n+\treturn true;\n+      return RECURSE (arg0);\n+\n+    CASE_CFN_ASINH:\n+    CASE_CFN_ATAN:\n+    CASE_CFN_ATANH:\n+    CASE_CFN_CBRT:\n+    CASE_CFN_CEIL:\n+    CASE_CFN_ERF:\n+    CASE_CFN_EXPM1:\n+    CASE_CFN_FLOOR:\n+    CASE_CFN_FMOD:\n+    CASE_CFN_FREXP:\n+    CASE_CFN_ICEIL:\n+    CASE_CFN_IFLOOR:\n+    CASE_CFN_IRINT:\n+    CASE_CFN_IROUND:\n+    CASE_CFN_LCEIL:\n+    CASE_CFN_LDEXP:\n+    CASE_CFN_LFLOOR:\n+    CASE_CFN_LLCEIL:\n+    CASE_CFN_LLFLOOR:\n+    CASE_CFN_LLRINT:\n+    CASE_CFN_LLROUND:\n+    CASE_CFN_LRINT:\n+    CASE_CFN_LROUND:\n+    CASE_CFN_MODF:\n+    CASE_CFN_NEARBYINT:\n+    CASE_CFN_RINT:\n+    CASE_CFN_ROUND:\n+    CASE_CFN_SCALB:\n+    CASE_CFN_SCALBLN:\n+    CASE_CFN_SCALBN:\n+    CASE_CFN_SIGNBIT:\n+    CASE_CFN_SIGNIFICAND:\n+    CASE_CFN_SINH:\n+    CASE_CFN_TANH:\n+    CASE_CFN_TRUNC:\n+      /* True if the 1st argument is nonnegative.  */\n+      return RECURSE (arg0);\n+\n+    CASE_CFN_FMAX:\n+      /* True if the 1st OR 2nd arguments are nonnegative.  */\n+      return RECURSE (arg0) || RECURSE (arg1);\n+\n+    CASE_CFN_FMIN:\n+      /* True if the 1st AND 2nd arguments are nonnegative.  */\n+      return RECURSE (arg0) && RECURSE (arg1);\n+\n+    CASE_CFN_COPYSIGN:\n+      /* True if the 2nd argument is nonnegative.  */\n+      return RECURSE (arg1);\n+\n+    CASE_CFN_POWI:\n+      /* True if the 1st argument is nonnegative or the second\n+\t argument is an even integer.  */\n+      if (TREE_CODE (arg1) == INTEGER_CST\n+\t  && (TREE_INT_CST_LOW (arg1) & 1) == 0)\n+\treturn true;\n+      return RECURSE (arg0);\n \n-\tCASE_FLT_FN (BUILT_IN_POW):\n-\t/* True if the 1st argument is nonnegative or the second\n-\t   argument is an even integer valued real.  */\n-\tif (TREE_CODE (arg1) == REAL_CST)\n-\t  {\n-\t    REAL_VALUE_TYPE c;\n-\t    HOST_WIDE_INT n;\n+    CASE_CFN_POW:\n+      /* True if the 1st argument is nonnegative or the second\n+\t argument is an even integer valued real.  */\n+      if (TREE_CODE (arg1) == REAL_CST)\n+\t{\n+\t  REAL_VALUE_TYPE c;\n+\t  HOST_WIDE_INT n;\n \n-\t    c = TREE_REAL_CST (arg1);\n-\t    n = real_to_integer (&c);\n-\t    if ((n & 1) == 0)\n-\t      {\n-\t\tREAL_VALUE_TYPE cint;\n-\t\treal_from_integer (&cint, VOIDmode, n, SIGNED);\n-\t\tif (real_identical (&c, &cint))\n-\t\t  return true;\n-\t      }\n-\t  }\n-\treturn RECURSE (arg0);\n+\t  c = TREE_REAL_CST (arg1);\n+\t  n = real_to_integer (&c);\n+\t  if ((n & 1) == 0)\n+\t    {\n+\t      REAL_VALUE_TYPE cint;\n+\t      real_from_integer (&cint, VOIDmode, n, SIGNED);\n+\t      if (real_identical (&c, &cint))\n+\t\treturn true;\n+\t    }\n+\t}\n+      return RECURSE (arg0);\n \n-      default:\n-\tbreak;\n-      }\n+    default:\n+      break;\n+    }\n   return tree_simple_nonnegative_warnv_p (CALL_EXPR, type);\n }\n \n@@ -13079,7 +13079,7 @@ tree_invalid_nonnegative_warnv_p (tree t, bool *strict_overflow_p, int depth)\n \ttree arg1 = call_expr_nargs (t) > 1 ?  CALL_EXPR_ARG (t, 1) : NULL_TREE;\n \n \treturn tree_call_nonnegative_warnv_p (TREE_TYPE (t),\n-\t\t\t\t\t      get_callee_fndecl (t),\n+\t\t\t\t\t      get_call_combined_fn (t),\n \t\t\t\t\t      arg0,\n \t\t\t\t\t      arg1,\n \t\t\t\t\t      strict_overflow_p, depth);\n@@ -13482,26 +13482,25 @@ integer_valued_real_binary_p (tree_code code, tree op0, tree op1, int depth)\n    DEPTH is the current nesting depth of the query.  */\n \n bool\n-integer_valued_real_call_p (tree fndecl, tree arg0, tree arg1, int depth)\n+integer_valued_real_call_p (combined_fn fn, tree arg0, tree arg1, int depth)\n {\n-  if (fndecl && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n-    switch (DECL_FUNCTION_CODE (fndecl))\n-      {\n-      CASE_FLT_FN (BUILT_IN_CEIL):\n-      CASE_FLT_FN (BUILT_IN_FLOOR):\n-      CASE_FLT_FN (BUILT_IN_NEARBYINT):\n-      CASE_FLT_FN (BUILT_IN_RINT):\n-      CASE_FLT_FN (BUILT_IN_ROUND):\n-      CASE_FLT_FN (BUILT_IN_TRUNC):\n-\treturn true;\n+  switch (fn)\n+    {\n+    CASE_CFN_CEIL:\n+    CASE_CFN_FLOOR:\n+    CASE_CFN_NEARBYINT:\n+    CASE_CFN_RINT:\n+    CASE_CFN_ROUND:\n+    CASE_CFN_TRUNC:\n+      return true;\n \n-      CASE_FLT_FN (BUILT_IN_FMIN):\n-      CASE_FLT_FN (BUILT_IN_FMAX):\n-\treturn RECURSE (arg0) && RECURSE (arg1);\n+    CASE_CFN_FMIN:\n+    CASE_CFN_FMAX:\n+      return RECURSE (arg0) && RECURSE (arg1);\n \n-      default:\n-\tbreak;\n-      }\n+    default:\n+      break;\n+    }\n   return false;\n }\n \n@@ -13612,7 +13611,7 @@ integer_valued_real_p (tree t, int depth)\n \ttree arg1 = (call_expr_nargs (t) > 1\n \t\t     ? CALL_EXPR_ARG (t, 1)\n \t\t     : NULL_TREE);\n-\treturn integer_valued_real_call_p (get_callee_fndecl (t),\n+\treturn integer_valued_real_call_p (get_call_combined_fn (t),\n \t\t\t\t\t   arg0, arg1, depth);\n       }\n "}, {"sha": "7741802981ece4a91991f79ac952900a9ca32267", "filename": "gcc/fold-const.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9da71f4f1dcad2a5e2bd3a3e9fac6012a6049b/gcc%2Ffold-const.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9da71f4f1dcad2a5e2bd3a3e9fac6012a6049b/gcc%2Ffold-const.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.h?ref=1d9da71f4f1dcad2a5e2bd3a3e9fac6012a6049b", "patch": "@@ -137,12 +137,12 @@ extern bool tree_unary_nonnegative_warnv_p (enum tree_code, tree, tree,\n extern bool tree_binary_nonnegative_warnv_p (enum tree_code, tree, tree, tree,\n \t\t\t\t\t     bool *, int);\n extern bool tree_single_nonnegative_warnv_p (tree, bool *, int);\n-extern bool tree_call_nonnegative_warnv_p (tree, tree, tree, tree, bool *,\n-\t\t\t\t\t   int);\n+extern bool tree_call_nonnegative_warnv_p (tree, combined_fn, tree, tree,\n+\t\t\t\t\t   bool *, int);\n \n extern bool integer_valued_real_unary_p (tree_code, tree, int);\n extern bool integer_valued_real_binary_p (tree_code, tree, tree, int);\n-extern bool integer_valued_real_call_p (tree, tree, tree, int);\n+extern bool integer_valued_real_call_p (combined_fn, tree, tree, int);\n extern bool integer_valued_real_single_p (tree, int);\n extern bool integer_valued_real_p (tree, int = 0);\n \n@@ -179,7 +179,7 @@ extern tree sign_bit_p (tree, const_tree);\n extern tree exact_inverse (tree, tree);\n extern tree const_unop (enum tree_code, tree, tree);\n extern tree const_binop (enum tree_code, tree, tree, tree);\n-extern bool negate_mathfn_p (enum built_in_function);\n+extern bool negate_mathfn_p (combined_fn);\n extern const char *c_getstr (tree);\n \n /* Return OFF converted to a pointer offset type suitable as offset for"}, {"sha": "436e29b37b7e1992734ab6e66e6554c5b45b372c", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9da71f4f1dcad2a5e2bd3a3e9fac6012a6049b/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9da71f4f1dcad2a5e2bd3a3e9fac6012a6049b/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=1d9da71f4f1dcad2a5e2bd3a3e9fac6012a6049b", "patch": "@@ -6202,7 +6202,7 @@ gimple_call_nonnegative_warnv_p (gimple *stmt, bool *strict_overflow_p,\n     gimple_call_arg (stmt, 1) : NULL_TREE;\n \n   return tree_call_nonnegative_warnv_p (gimple_expr_type (stmt),\n-\t\t\t\t\tgimple_call_fndecl (stmt),\n+\t\t\t\t\tgimple_call_combined_fn (stmt),\n \t\t\t\t\targ0,\n \t\t\t\t\targ1,\n \t\t\t\t\tstrict_overflow_p, depth);\n@@ -6295,7 +6295,7 @@ gimple_call_integer_valued_real_p (gimple *stmt, int depth)\n   tree arg1 = (gimple_call_num_args (stmt) > 1\n \t       ? gimple_call_arg (stmt, 1)\n \t       : NULL_TREE);\n-  return integer_valued_real_call_p (gimple_call_fndecl (stmt),\n+  return integer_valued_real_call_p (gimple_call_combined_fn (stmt),\n \t\t\t\t     arg0, arg1, depth);\n }\n "}, {"sha": "d5736514dff7a7f9c354685011d7fe50827c4def", "filename": "gcc/gimple-ssa-backprop.c", "status": "modified", "additions": 25, "deletions": 31, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9da71f4f1dcad2a5e2bd3a3e9fac6012a6049b/gcc%2Fgimple-ssa-backprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9da71f4f1dcad2a5e2bd3a3e9fac6012a6049b/gcc%2Fgimple-ssa-backprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-backprop.c?ref=1d9da71f4f1dcad2a5e2bd3a3e9fac6012a6049b", "patch": "@@ -102,6 +102,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-fold.h\"\n #include \"alloc-pool.h\"\n #include \"tree-hash-traits.h\"\n+#include \"case-cfn-macros.h\"\n \n namespace {\n \n@@ -337,26 +338,29 @@ backprop::pop_from_worklist ()\n void\n backprop::process_builtin_call_use (gcall *call, tree rhs, usage_info *info)\n {\n-  enum built_in_function fn = DECL_FUNCTION_CODE (gimple_call_fndecl (call));\n+  combined_fn fn = gimple_call_combined_fn (call);\n   tree lhs = gimple_call_lhs (call);\n   switch (fn)\n     {\n-    CASE_FLT_FN (BUILT_IN_COS):\n-    CASE_FLT_FN (BUILT_IN_COSH):\n-    CASE_FLT_FN (BUILT_IN_CCOS):\n-    CASE_FLT_FN (BUILT_IN_CCOSH):\n-    CASE_FLT_FN (BUILT_IN_HYPOT):\n+    case CFN_LAST:\n+      break;\n+\n+    CASE_CFN_COS:\n+    CASE_CFN_COSH:\n+    CASE_CFN_CCOS:\n+    CASE_CFN_CCOSH:\n+    CASE_CFN_HYPOT:\n       /* The signs of all inputs are ignored.  */\n       info->flags.ignore_sign = true;\n       break;\n \n-    CASE_FLT_FN (BUILT_IN_COPYSIGN):\n+    CASE_CFN_COPYSIGN:\n       /* The sign of the first input is ignored.  */\n       if (rhs != gimple_call_arg (call, 1))\n \tinfo->flags.ignore_sign = true;\n       break;\n \n-    CASE_FLT_FN (BUILT_IN_POW):\n+    CASE_CFN_POW:\n       {\n \t/* The sign of the first input is ignored as long as the second\n \t   input is an even real.  */\n@@ -369,7 +373,7 @@ backprop::process_builtin_call_use (gcall *call, tree rhs, usage_info *info)\n \tbreak;\n       }\n \n-    CASE_FLT_FN (BUILT_IN_FMA):\n+    CASE_CFN_FMA:\n       /* In X * X + Y, where Y is distinct from X, the sign of X doesn't\n \t matter.  */\n       if (gimple_call_arg (call, 0) == rhs\n@@ -472,10 +476,7 @@ backprop::process_use (gimple *stmt, tree rhs, usage_info *info)\n     }\n \n   if (gcall *call = dyn_cast <gcall *> (stmt))\n-    {\n-      if (gimple_call_builtin_p (call, BUILT_IN_NORMAL))\n-\tprocess_builtin_call_use (call, rhs, info);\n-    }\n+    process_builtin_call_use (call, rhs, info);\n   else if (gassign *assign = dyn_cast <gassign *> (stmt))\n     process_assign_use (assign, rhs, info);\n   else if (gphi *phi = dyn_cast <gphi *> (stmt))\n@@ -686,17 +687,14 @@ strip_sign_op_1 (tree rhs)\n \tbreak;\n       }\n   else if (gcall *call = dyn_cast <gcall *> (def_stmt))\n-    {\n-      if (gimple_call_builtin_p (call, BUILT_IN_NORMAL))\n-\tswitch (DECL_FUNCTION_CODE (gimple_call_fndecl (call)))\n-\t  {\n-\t  CASE_FLT_FN (BUILT_IN_COPYSIGN):\n-\t    return gimple_call_arg (call, 0);\n-\n-\t  default:\n-\t    break;\n-\t  }\n-    }\n+    switch (gimple_call_combined_fn (call))\n+      {\n+      CASE_CFN_COPYSIGN:\n+\treturn gimple_call_arg (call, 0);\n+\n+      default:\n+\tbreak;\n+      }\n \n   return NULL_TREE;\n }\n@@ -758,11 +756,10 @@ backprop::complete_change (gimple *stmt)\n void\n backprop::optimize_builtin_call (gcall *call, tree lhs, const usage_info *info)\n {\n-  tree fndecl = gimple_call_fndecl (call);\n-  enum built_in_function fn = DECL_FUNCTION_CODE (fndecl);\n   /* If we have an f such that -f(x) = f(-x), and if the sign of the result\n      doesn't matter, strip any sign operations from the input.  */\n-  if (info->flags.ignore_sign && negate_mathfn_p (fn))\n+  if (info->flags.ignore_sign\n+      && negate_mathfn_p (gimple_call_combined_fn (call)))\n     {\n       tree new_arg = strip_sign_op (gimple_call_arg (call, 0));\n       if (new_arg)\n@@ -889,10 +886,7 @@ backprop::execute ()\n \t  tree var = m_vars[i].first;\n \t  gimple *stmt = SSA_NAME_DEF_STMT (var);\n \t  if (gcall *call = dyn_cast <gcall *> (stmt))\n-\t    {\n-\t      if (gimple_call_builtin_p (call, BUILT_IN_NORMAL))\n-\t\toptimize_builtin_call (call, var, info);\n-\t    }\n+\t    optimize_builtin_call (call, var, info);\n \t  else if (gassign *assign = dyn_cast <gassign *> (stmt))\n \t    optimize_assign (assign, var, info);\n \t  else if (gphi *phi = dyn_cast <gphi *> (stmt))"}]}