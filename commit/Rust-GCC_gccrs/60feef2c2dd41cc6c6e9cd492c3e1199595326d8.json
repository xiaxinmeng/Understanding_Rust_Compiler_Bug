{"sha": "60feef2c2dd41cc6c6e9cd492c3e1199595326d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBmZWVmMmMyZGQ0MWNjNmM2ZTljZDQ5MmMzZTExOTk1OTUzMjZkOA==", "commit": {"author": {"name": "Lee Millward", "email": "lee.millward@codesourcery.com", "date": "2006-09-25T19:45:34Z"}, "committer": {"name": "Lee Millward", "email": "lmillward@gcc.gnu.org", "date": "2006-09-25T19:45:34Z"}, "message": "re PR c++/27329 (ICE with misplaced expression)\n\n        PR c++/27329\n        PR c++/26938\n        * cp-tree.h (redeclare_class_template): Adjust declaration\n        to return bool instead of void.\n        * pt.c (redeclare_class_template): Update definition. Return\n        false on error.\n        * decl.c (xref_tag): Return error_mark_node if redeclare_class_template\n        returned false.\n\n        * g++.dg/template/crash58.C: New test.\n        * g++.dg/template/crash59.C: New test.\n        * g++.dg/parse/crash28.C: Adjust error markers.\n        * g++.dg/template/crash34.C: Likewise.\n        * g++.dg/template/friend31.C: Likewise.\n        * g++.dg/template/crash32.C: Likewise.\n\nFrom-SVN: r117205", "tree": {"sha": "7344bf4f6330bee0ad5f5c66edb47f0335d0fb28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7344bf4f6330bee0ad5f5c66edb47f0335d0fb28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60feef2c2dd41cc6c6e9cd492c3e1199595326d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60feef2c2dd41cc6c6e9cd492c3e1199595326d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60feef2c2dd41cc6c6e9cd492c3e1199595326d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60feef2c2dd41cc6c6e9cd492c3e1199595326d8/comments", "author": null, "committer": null, "parents": [{"sha": "6b61b9573985890223c2f8b330fb83b0e5914419", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b61b9573985890223c2f8b330fb83b0e5914419", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b61b9573985890223c2f8b330fb83b0e5914419"}], "stats": {"total": 85, "additions": 71, "deletions": 14}, "files": [{"sha": "a41714cdcd1a860570e02193f6244233664dd701", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60feef2c2dd41cc6c6e9cd492c3e1199595326d8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60feef2c2dd41cc6c6e9cd492c3e1199595326d8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=60feef2c2dd41cc6c6e9cd492c3e1199595326d8", "patch": "@@ -1,3 +1,14 @@\n+2006-09-25  Lee Millward  <lee.millward@codesourcery.com>\n+\n+        PR c++/27329\n+        PR c++/26938\n+        * cp-tree.h (redeclare_class_template): Adjust declaration\n+        to return bool instead of void.\n+        * pt.c (redeclare_class_template): Update definition.\n+\tReturn false on error.\n+        * decl.c (xref_tag): Return error_mark_node if\n+\tredeclare_class_template returned false.\n+\t\n 2006-09-21  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/29016"}, {"sha": "227fc9dfdec0f1cb8e045b415c22e94bd3a60f5e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60feef2c2dd41cc6c6e9cd492c3e1199595326d8/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60feef2c2dd41cc6c6e9cd492c3e1199595326d8/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=60feef2c2dd41cc6c6e9cd492c3e1199595326d8", "patch": "@@ -4097,7 +4097,7 @@ extern tree end_template_parm_list\t\t(tree);\n extern void end_template_decl\t\t\t(void);\n extern tree push_template_decl\t\t\t(tree);\n extern tree push_template_decl_real\t\t(tree, bool);\n-extern void redeclare_class_template\t\t(tree, tree);\n+extern bool redeclare_class_template\t\t(tree, tree);\n extern tree lookup_template_class\t\t(tree, tree, tree, tree,\n \t\t\t\t\t\t int, tsubst_flags_t);\n extern tree lookup_template_function\t\t(tree, tree);"}, {"sha": "84f2aaa49b3e15dfcf1c45f873b33c3aba6a7dfd", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60feef2c2dd41cc6c6e9cd492c3e1199595326d8/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60feef2c2dd41cc6c6e9cd492c3e1199595326d8/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=60feef2c2dd41cc6c6e9cd492c3e1199595326d8", "patch": "@@ -9712,7 +9712,10 @@ xref_tag (enum tag_types tag_code, tree name,\n   else\n     {\n       if (template_header_p && IS_AGGR_TYPE (t))\n-\tredeclare_class_template (t, current_template_parms);\n+        {\n+\t  if (!redeclare_class_template (t, current_template_parms))\n+            POP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, error_mark_node);\n+        }\n       else if (!processing_template_decl\n \t       && CLASS_TYPE_P (t)\n \t       && CLASSTYPE_IS_TEMPLATE (t))"}, {"sha": "daee2522047c313742062b80d09ce2c154ec0364", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60feef2c2dd41cc6c6e9cd492c3e1199595326d8/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60feef2c2dd41cc6c6e9cd492c3e1199595326d8/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=60feef2c2dd41cc6c6e9cd492c3e1199595326d8", "patch": "@@ -3315,7 +3315,7 @@ push_template_decl (tree decl)\n      template <class T> struct S;\n      template <class T> struct S {};  */\n \n-void\n+bool\n redeclare_class_template (tree type, tree parms)\n {\n   tree tmpl;\n@@ -3325,21 +3325,21 @@ redeclare_class_template (tree type, tree parms)\n   if (!TYPE_TEMPLATE_INFO (type))\n     {\n       error (\"%qT is not a template type\", type);\n-      return;\n+      return false;\n     }\n \n   tmpl = TYPE_TI_TEMPLATE (type);\n   if (!PRIMARY_TEMPLATE_P (tmpl))\n     /* The type is nested in some template class.  Nothing to worry\n        about here; there are no new template parameters for the nested\n        type.  */\n-    return;\n+    return true;\n \n   if (!parms)\n     {\n       error (\"template specifiers not specified in declaration of %qD\",\n \t     tmpl);\n-      return;\n+      return false;\n     }\n \n   parms = INNERMOST_TEMPLATE_PARMS (parms);\n@@ -3351,7 +3351,7 @@ redeclare_class_template (tree type, tree parms)\n       error (\"used %d template parameter(s) instead of %d\",\n \t     TREE_VEC_LENGTH (tmpl_parms),\n \t     TREE_VEC_LENGTH (parms));\n-      return;\n+      return false;\n     }\n \n   for (i = 0; i < TREE_VEC_LENGTH (tmpl_parms); ++i)\n@@ -3379,7 +3379,7 @@ redeclare_class_template (tree type, tree parms)\n \t{\n \t  error (\"template parameter %q+#D\", tmpl_parm);\n \t  error (\"redeclared here as %q#D\", parm);\n-\t  return;\n+\t  return false;\n \t}\n \n       if (tmpl_default != NULL_TREE && parm_default != NULL_TREE)\n@@ -3390,7 +3390,7 @@ redeclare_class_template (tree type, tree parms)\n \t     by two different declarations in the same scope.  */\n \t  error (\"redefinition of default argument for %q#D\", parm);\n \t  error (\"%J  original definition appeared here\", tmpl_parm);\n-\t  return;\n+\t  return false;\n \t}\n \n       if (parm_default != NULL_TREE)\n@@ -3402,6 +3402,8 @@ redeclare_class_template (tree type, tree parms)\n \t   parameters for any members.  */\n \tTREE_PURPOSE (TREE_VEC_ELT (parms, i)) = tmpl_default;\n     }\n+\n+    return true;\n }\n \n /* Simplify EXPR if it is a non-dependent expression.  Returns the"}, {"sha": "a511e56253652a719f3638a443c88ec00fba719a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60feef2c2dd41cc6c6e9cd492c3e1199595326d8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60feef2c2dd41cc6c6e9cd492c3e1199595326d8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=60feef2c2dd41cc6c6e9cd492c3e1199595326d8", "patch": "@@ -1,3 +1,15 @@\n+2006-09-25  Lee Millward  <lee.millward@codesourcery.com>\n+\n+        PR c++/26938\n+        * g++.dg/template/crash58.C: New test.\n+        * g++.dg/parse/crash28.C: Adjust error markers.\n+        * g++.dg/template/crash34.C: Likewise.\n+        * g++.dg/template/friend31.C: Likewise.\n+        * g++.dg/template/crash32.C: Likewise.\n+\n+        PR c++/27329\n+        * g++.dg/template/crash59.C: New test.\n+\t\n 2006-09-24  Zdenek Dvorak <dvorakz@suse.cz>\n \t    Adam Nemet  <anemet@caviumnetworks.com>\n "}, {"sha": "67d78d6bb7f5c3d5dff8cbfd6294c5ce83d6739c", "filename": "gcc/testsuite/g++.dg/parse/crash28.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60feef2c2dd41cc6c6e9cd492c3e1199595326d8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60feef2c2dd41cc6c6e9cd492c3e1199595326d8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash28.C?ref=60feef2c2dd41cc6c6e9cd492c3e1199595326d8", "patch": "@@ -7,7 +7,7 @@\n \n template <class _Tp> class insert_iterator<slist<_Tp> > {}; // { dg-error \"not a template|not declared in this scope|expected unqualified-id|extra\" }\n template <class _Value> class insert_iterator<int > { // { dg-error \"template\" }\n-  hash_set<_Value>; // { dg-error \"no type|expected\" }\n+  hash_set<_Value>;\n };\n \n template<int> struct A<X<> > {}; // { dg-error \"not a template|not declared in this scope|expected unqualified-id|extra\" }"}, {"sha": "4c7af8a39142fa4c33ce8760bbccc0644ba5b549", "filename": "gcc/testsuite/g++.dg/template/crash32.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60feef2c2dd41cc6c6e9cd492c3e1199595326d8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60feef2c2dd41cc6c6e9cd492c3e1199595326d8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash32.C?ref=60feef2c2dd41cc6c6e9cd492c3e1199595326d8", "patch": "@@ -3,7 +3,7 @@\n struct integral_constant { };\n \n template<typename _Tp>\n-struct is_function : public integral_constant { }; // { dg-error \"previous\" }\n+struct is_function : public integral_constant { };\n \n template<>\n struct is_function : public integral_constant { }; // { dg-error \"\" }"}, {"sha": "ef4d21b60d84749967456d85763b05394c3efd15", "filename": "gcc/testsuite/g++.dg/template/crash34.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60feef2c2dd41cc6c6e9cd492c3e1199595326d8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60feef2c2dd41cc6c6e9cd492c3e1199595326d8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash34.C?ref=60feef2c2dd41cc6c6e9cd492c3e1199595326d8", "patch": "@@ -9,4 +9,4 @@ class Foo;\n \n template <typename T> class Foo { }; // { dg-error \"not a template type\" }\n \n-Foo<int> x; // { dg-error \"not a template\" }\n+Foo<int> x; // { dg-error \"not a template|incomplete type\" }"}, {"sha": "af2172c67326a71bcd1825c6cae1ce2d1927a399", "filename": "gcc/testsuite/g++.dg/template/crash58.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60feef2c2dd41cc6c6e9cd492c3e1199595326d8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash58.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60feef2c2dd41cc6c6e9cd492c3e1199595326d8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash58.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash58.C?ref=60feef2c2dd41cc6c6e9cd492c3e1199595326d8", "patch": "@@ -0,0 +1,10 @@\n+//PR 26938\n+\n+template<int, int = 0> struct A;  // { dg-error \"previous declaration\" }\n+\n+template<int> struct A            // { dg-error \"template\" }\n+{\n+  A();\n+};\n+\n+A<0> a;                           // { dg-error \"incomplete type\" }"}, {"sha": "61d2188fc9ef02f352f547ebaa25d67f8d3adf16", "filename": "gcc/testsuite/g++.dg/template/crash59.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60feef2c2dd41cc6c6e9cd492c3e1199595326d8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash59.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60feef2c2dd41cc6c6e9cd492c3e1199595326d8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash59.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash59.C?ref=60feef2c2dd41cc6c6e9cd492c3e1199595326d8", "patch": "@@ -0,0 +1,19 @@\n+//PR c++/27329\n+\n+template<int> struct A                          // { dg-error \"forward declaration\" }\n+!                                               // { dg-error \"expected unqualified-id\" }\n+  ;\n+\n+template<int> struct A { int foo(); };          // { dg-error \"not a template\" }\n+\n+int i = A<0>().foo();                           // { dg-error \"not a template|invalid use\" }\n+\n+\n+template<int> struct B        \n+!                                               // { dg-error \"expected unqualified-id\" }\n+  ;\n+\n+template<int> struct B { static int bar(); };   // { dg-error \"not a template\" }\n+\n+int j = B<0>::bar();                            // { dg-error \"not a template|incomplete type\" }\n+ "}, {"sha": "222ce238d78652f1fe996b8fd1aa3b93df66c17f", "filename": "gcc/testsuite/g++.dg/template/friend31.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60feef2c2dd41cc6c6e9cd492c3e1199595326d8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend31.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60feef2c2dd41cc6c6e9cd492c3e1199595326d8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend31.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend31.C?ref=60feef2c2dd41cc6c6e9cd492c3e1199595326d8", "patch": "@@ -10,12 +10,12 @@ template <typename T, typename U> struct F; // { dg-error \"previous declaration\"\n class W\n {\n   template<int i> friend class F;\t// { dg-error \"template parameter\" }\n-  int x;\n+  int x;                                // { dg-error \"private\" }\n };\n \n template <typename T, typename U> struct F\n {\n-  void Look(W& w) { w.x = 3; }\n+  void Look(W& w) { w.x = 3; }          // { dg-error \"within this context\" }\n };\n \n int main()"}]}