{"sha": "01f481c77e01414e75fc26adead0d143b27df85d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFmNDgxYzc3ZTAxNDE0ZTc1ZmMyNmFkZWFkMGQxNDNiMjdkZjg1ZA==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2018-05-31T10:45:05Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-31T10:45:05Z"}, "message": "[Ada] Fix check on placement of multiple loop (in)variant pragmas\n\nLoop (in)variants should appear next to each other, which is checked by GNAT\nfrontend. As statements inserted during expansion may break this contiguity,\nGNAT recognizes specially such statements which originate in loop pragmas. In\nsome cases, this special treatment was not properly put in place, which lead to\nspurious errors being issued.\n\n2018-05-31  Yannick Moy  <moy@adacore.com>\n\ngcc/ada/\n\n\t* sem_prag.adb (Analyze_Pragma.Check_Loop_Pragma_Placement): Inverse\n\torder of treatment between nodes recognized as loop pragmas (or\n\tgenerated from one) and block statements.\n\nFrom-SVN: r260996", "tree": {"sha": "e8cce3d179e4244902ae613eeb22c8d91da52a06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8cce3d179e4244902ae613eeb22c8d91da52a06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01f481c77e01414e75fc26adead0d143b27df85d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01f481c77e01414e75fc26adead0d143b27df85d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01f481c77e01414e75fc26adead0d143b27df85d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01f481c77e01414e75fc26adead0d143b27df85d/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4cfb305e9c5c3fb8f7e9afd184802265f8a0e665", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cfb305e9c5c3fb8f7e9afd184802265f8a0e665", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cfb305e9c5c3fb8f7e9afd184802265f8a0e665"}], "stats": {"total": 40, "additions": 25, "deletions": 15}, "files": [{"sha": "e52386f6dfebc68a5efd1b58f65b5d6319a1e2af", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f481c77e01414e75fc26adead0d143b27df85d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f481c77e01414e75fc26adead0d143b27df85d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=01f481c77e01414e75fc26adead0d143b27df85d", "patch": "@@ -1,3 +1,9 @@\n+2018-05-31  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma.Check_Loop_Pragma_Placement): Inverse\n+\torder of treatment between nodes recognized as loop pragmas (or\n+\tgenerated from one) and block statements.\n+\n 2018-05-31  Doug Rupp  <rupp@adacore.com>\n \n \t* libgnat/s-osprim__posix2008.adb (Clock): Implement using"}, {"sha": "b75b318d2ef67f445f43719cacfee0ab8e522657", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f481c77e01414e75fc26adead0d143b27df85d/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f481c77e01414e75fc26adead0d143b27df85d/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=01f481c77e01414e75fc26adead0d143b27df85d", "patch": "@@ -5931,23 +5931,9 @@ package body Sem_Prag is\n                Stmt := First (L);\n                while Present (Stmt) loop\n \n-                  --  Pragmas Loop_Invariant and Loop_Variant may only appear\n-                  --  inside a loop or a block housed inside a loop. Inspect\n-                  --  the declarations and statements of the block as they may\n-                  --  contain the first grouping.\n-\n-                  if Nkind (Stmt) = N_Block_Statement then\n-                     HSS := Handled_Statement_Sequence (Stmt);\n-\n-                     Check_Grouping (Declarations (Stmt));\n-\n-                     if Present (HSS) then\n-                        Check_Grouping (Statements (HSS));\n-                     end if;\n-\n                   --  First pragma of the first topmost grouping has been found\n \n-                  elsif Is_Loop_Pragma (Stmt) then\n+                  if Is_Loop_Pragma (Stmt) then\n \n                      --  The group and the current pragma are not in the same\n                      --  declarative or statement list.\n@@ -6004,6 +5990,24 @@ package body Sem_Prag is\n \n                         raise Program_Error;\n                      end if;\n+\n+                  --  Pragmas Loop_Invariant and Loop_Variant may only appear\n+                  --  inside a loop or a block housed inside a loop. Inspect\n+                  --  the declarations and statements of the block as they may\n+                  --  contain the first grouping. This case follows the one for\n+                  --  loop pragmas, as block statements which originate in a\n+                  --  loop pragma (and so Is_Loop_Pragma will return True on\n+                  --  that block statement) should be treated in the previous\n+                  --  case.\n+\n+                  elsif Nkind (Stmt) = N_Block_Statement then\n+                     HSS := Handled_Statement_Sequence (Stmt);\n+\n+                     Check_Grouping (Declarations (Stmt));\n+\n+                     if Present (HSS) then\n+                        Check_Grouping (Statements (HSS));\n+                     end if;\n                   end if;\n \n                   Next (Stmt);"}]}