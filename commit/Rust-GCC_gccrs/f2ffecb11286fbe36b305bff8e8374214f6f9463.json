{"sha": "f2ffecb11286fbe36b305bff8e8374214f6f9463", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJmZmVjYjExMjg2ZmJlMzZiMzA1YmZmOGU4Mzc0MjE0ZjZmOTQ2Mw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-07-14T02:52:05Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-07-14T02:52:05Z"}, "message": "c_locale.h: Include <cstdlib> and <cstring>.\n\n\t* config/locale/generic/c_locale.h: Include <cstdlib> and\n\t<cstring>.\n\t* include/bits/boost_concept_check.h: Add this-> to unqualified\n\tmethod calls.\n\t* include/bits/deque.tcc: Likewise.\n\t* include/bits/locale_facets.h : Likewise.\n\t* include/bits/ostream.tcc: Likewise.\n\t* include/bits/stl_algo.h: Likewise.\n\t* include/bits/stl_bvector.h: Likewise.\n\t* include/bits/stl_deque.h: Likewise.\n\t* include/bits/stl_list.h: Likewise.\n\t* include/bits/stl_tree.h: Likewise.\n\t* include/bits/stl_vector.h: Likewise.\n\t* include/bits/vector.tcc: Likewise.\n\t* include/ext/rope: Likewise.\n\t* include/ext/ropeimpl.h: Likewise.\n\t* include/ext/stdio_filebuf.h: Likewise.\n\nFrom-SVN: r69315", "tree": {"sha": "94f2f4de4e06e819e5d44c00159d978e3bc98aae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94f2f4de4e06e819e5d44c00159d978e3bc98aae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2ffecb11286fbe36b305bff8e8374214f6f9463", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2ffecb11286fbe36b305bff8e8374214f6f9463", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2ffecb11286fbe36b305bff8e8374214f6f9463", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2ffecb11286fbe36b305bff8e8374214f6f9463/comments", "author": null, "committer": null, "parents": [{"sha": "4fab535ec6ff6ed08d42cfb58ba391cd20ef52a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fab535ec6ff6ed08d42cfb58ba391cd20ef52a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fab535ec6ff6ed08d42cfb58ba391cd20ef52a4"}], "stats": {"total": 160, "additions": 91, "deletions": 69}, "files": [{"sha": "093758c937e7d7ae8488d6b9ebebc9d8bec6d9cc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f2ffecb11286fbe36b305bff8e8374214f6f9463", "patch": "@@ -1,3 +1,23 @@\n+2003-07-13  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* config/locale/generic/c_locale.h: Include <cstdlib> and\n+\t<cstring>.\n+\t* include/bits/boost_concept_check.h: Add this-> to unqualified\n+\tmethod calls.\n+\t* include/bits/deque.tcc: Likewise.\n+\t* include/bits/locale_facets.h : Likewise.\n+\t* include/bits/ostream.tcc: Likewise.\n+\t* include/bits/stl_algo.h: Likewise.\n+\t* include/bits/stl_bvector.h: Likewise.\n+\t* include/bits/stl_deque.h: Likewise.\n+\t* include/bits/stl_list.h: Likewise.\n+\t* include/bits/stl_tree.h: Likewise.\n+\t* include/bits/stl_vector.h: Likewise.\n+\t* include/bits/vector.tcc: Likewise.\n+\t* include/ext/rope: Likewise.\n+\t* include/ext/ropeimpl.h: Likewise.\n+\t* include/ext/stdio_filebuf.h: Likewise.\n+\n 2003-07-11  Jerry Quinn  <jlquinn@optonline.net>\n \n \t* include/bits/basic_ios.h (copyfmt): Document."}, {"sha": "72565fbe0d2878a09201c4691f74b701e54483b1", "filename": "libstdc++-v3/config/locale/generic/c_locale.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h?ref=f2ffecb11286fbe36b305bff8e8374214f6f9463", "patch": "@@ -39,6 +39,8 @@\n #pragma GCC system_header\n \n #include <clocale>\n+#include <cstdlib>\n+#include <cstring>\n \n #define _GLIBCXX_NUM_CATEGORIES 0\n "}, {"sha": "f6e3b08d101af22794a2f39c4cda70a0b397f86b", "filename": "libstdc++-v3/include/bits/boost_concept_check.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h?ref=f2ffecb11286fbe36b305bff8e8374214f6f9463", "patch": "@@ -88,7 +88,7 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n   template <class _Tp>\n   struct _IntegerConcept {\n     void __constraints() { \n-      __error_type_must_be_an_integer_type();\n+      this->__error_type_must_be_an_integer_type();\n     }\n   };\n   template <> struct _IntegerConcept<short> { void __constraints() {} };\n@@ -104,7 +104,7 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n   template <class _Tp>\n   struct _SignedIntegerConcept {\n     void __constraints() { \n-      __error_type_must_be_a_signed_integer_type();\n+      this->__error_type_must_be_a_signed_integer_type();\n     }\n   };\n   template <> struct _SignedIntegerConcept<short> { void __constraints() {} };\n@@ -115,7 +115,7 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n   template <class _Tp>\n   struct _UnsignedIntegerConcept {\n     void __constraints() { \n-      __error_type_must_be_an_unsigned_integer_type();\n+      this->__error_type_must_be_an_unsigned_integer_type();\n     }\n   };\n   template <> struct _UnsignedIntegerConcept<unsigned short>"}, {"sha": "dedab6a311243b599b613fd21240dc08fff18e5a", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=f2ffecb11286fbe36b305bff8e8374214f6f9463", "patch": "@@ -268,7 +268,7 @@ namespace std\n       _M_range_initialize(_InputIterator __first, _InputIterator __last,\n                           input_iterator_tag)\n       {\n-        _M_initialize_map(0);\n+        this->_M_initialize_map(0);\n         try\n           {\n             for ( ; __first != __last; ++__first)\n@@ -289,7 +289,7 @@ namespace std\n                           forward_iterator_tag)\n       {\n         size_type __n = std::distance(__first, __last);\n-        _M_initialize_map(__n);\n+        this->_M_initialize_map(__n);\n       \n         _Map_pointer __cur_node;\n         try\n@@ -320,7 +320,7 @@ namespace std\n     {\n       value_type __t_copy = __t;\n       _M_reserve_map_at_back();\n-      *(this->_M_finish._M_node + 1) = _M_allocate_node();\n+      *(this->_M_finish._M_node + 1) = this->_M_allocate_node();\n       try\n         {\n           std::_Construct(this->_M_finish._M_cur, __t_copy);\n@@ -342,7 +342,7 @@ namespace std\n     {\n       value_type __t_copy = __t;\n       _M_reserve_map_at_front();\n-      *(this->_M_start._M_node - 1) = _M_allocate_node();\n+      *(this->_M_start._M_node - 1) = this->_M_allocate_node();\n       try\n         {\n           this->_M_start._M_set_node(this->_M_start._M_node - 1);\n@@ -631,7 +631,7 @@ namespace std\n       try\n         {\n           for (__i = 1; __i <= __new_nodes; ++__i)\n-            *(this->_M_start._M_node - __i) = _M_allocate_node();\n+            *(this->_M_start._M_node - __i) = this->_M_allocate_node();\n         }\n       catch(...)\n         {\n@@ -653,7 +653,7 @@ namespace std\n       try\n         {\n           for (__i = 1; __i <= __new_nodes; ++__i)\n-            *(this->_M_finish._M_node + __i) = _M_allocate_node();\n+            *(this->_M_finish._M_node + __i) = this->_M_allocate_node();\n         }\n       catch(...)\n         {\n@@ -692,7 +692,7 @@ namespace std\n         size_type __new_map_size = \n           this->_M_map_size + std::max(this->_M_map_size, __nodes_to_add) + 2;\n     \n-        _Map_pointer __new_map = _M_allocate_map(__new_map_size);\n+        _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);\n         __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2\n                              + (__add_at_front ? __nodes_to_add : 0);\n         std::copy(this->_M_start._M_node,"}, {"sha": "2d680404fa461cdf5a03bc5bf4131d0b909dc274", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=f2ffecb11286fbe36b305bff8e8374214f6f9463", "patch": "@@ -773,14 +773,14 @@ namespace std\n       numpunct_byname(const char* __s, size_t __refs = 0)\n       : numpunct<_CharT>(__refs)\n       {\n-\t_S_create_c_locale(_M_c_locale_numpunct, __s);\n-\t_M_initialize_numpunct(_M_c_locale_numpunct);\t\n+\tthis->_S_create_c_locale(_M_c_locale_numpunct, __s);\n+\tthis->_M_initialize_numpunct(_M_c_locale_numpunct);\t\n       }\n \n     protected:\n       virtual \n       ~numpunct_byname() \n-      { _S_destroy_c_locale(_M_c_locale_numpunct); }\n+      { this->_S_destroy_c_locale(_M_c_locale_numpunct); }\n     };\n \n   template<typename _CharT, typename _InIter>\n@@ -1134,8 +1134,8 @@ namespace std\n       collate_byname(const char* __s, size_t __refs = 0)\n       : collate<_CharT>(__refs) \n       { \n-\t_S_destroy_c_locale(this->_M_c_locale_collate);\n-\t_S_create_c_locale(this->_M_c_locale_collate, __s); \n+\tthis->_S_destroy_c_locale(this->_M_c_locale_collate);\n+\tthis->_S_create_c_locale(this->_M_c_locale_collate, __s); \n       }\n \n     protected:\n@@ -1717,14 +1717,14 @@ namespace std\n       moneypunct_byname(const char* __s, size_t __refs = 0)\n       : moneypunct<_CharT, _Intl>(__refs)\n       {\n-\t_S_create_c_locale(_M_c_locale_moneypunct, __s);\n-\t_M_initialize_moneypunct(_M_c_locale_moneypunct);\t\n+\tthis->_S_create_c_locale(_M_c_locale_moneypunct, __s);\n+\tthis->_M_initialize_moneypunct(_M_c_locale_moneypunct);\t\n       }\n \n     protected:\n       virtual \n       ~moneypunct_byname() \n-      { _S_destroy_c_locale(_M_c_locale_moneypunct); }\n+      { this->_S_destroy_c_locale(_M_c_locale_moneypunct); }\n     };\n \n   template<typename _CharT, bool _Intl>"}, {"sha": "3d11b3b2144eaf0ce83286021563defadab5794d", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=f2ffecb11286fbe36b305bff8e8374214f6f9463", "patch": "@@ -387,7 +387,7 @@ namespace std\n       sentry __cerb(*this);\n       if (__cerb) \n \t{\n-\t  int_type __put = rdbuf()->sputc(__c); \n+\t  int_type __put = this->rdbuf()->sputc(__c); \n \t  if (traits_type::eq_int_type(__put, traits_type::eof()))\n \t    this->setstate(ios_base::badbit);\n \t}"}, {"sha": "b465df2140b1d26ac38fa14a1e743c0dd0e6edfa", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=f2ffecb11286fbe36b305bff8e8374214f6f9463", "patch": "@@ -946,7 +946,7 @@ namespace std\n       // concept requirements\n       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n             // \"the type returned by a _Generator\"\n-            __typeof__(gen())>)\n+            __typeof__(__gen())>)\n \n       for ( ; __n > 0; --__n, ++__first)\n \t*__first = __gen();"}, {"sha": "15e0f57f166a4441a90197e947cc4a04d218318e", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=f2ffecb11286fbe36b305bff8e8374214f6f9463", "patch": "@@ -373,7 +373,7 @@ template <typename _Alloc>\n   \n   protected:\n     void _M_initialize(size_type __n) {\n-      _Bit_type * __q = _M_bit_alloc(__n);\n+      _Bit_type * __q = this->_M_bit_alloc(__n);\n       this->_M_end_of_storage = __q + (__n + _S_word_bit - 1)/_S_word_bit;\n       this->_M_start = iterator(__q, 0);\n       this->_M_finish = this->_M_start + difference_type(__n);\n@@ -387,11 +387,11 @@ template <typename _Alloc>\n       else {\n         size_type __len = size() \n \t                  ? 2 * size() : static_cast<size_type>(_S_word_bit);\n-        _Bit_type * __q = _M_bit_alloc(__len);\n+        _Bit_type * __q = this->_M_bit_alloc(__len);\n         iterator __i = std::copy(begin(), __position, iterator(__q, 0));\n         *__i++ = __x;\n         this->_M_finish = std::copy(__position, end(), __i);\n-        _M_deallocate();\n+        this->_M_deallocate();\n         this->_M_end_of_storage = __q + (__len + _S_word_bit - 1)/_S_word_bit;\n         this->_M_start = iterator(__q, 0);\n       }\n@@ -439,11 +439,11 @@ template <typename _Alloc>\n         }\n         else {\n           size_type __len = size() + std::max(size(), __n);\n-          _Bit_type * __q = _M_bit_alloc(__len);\n+          _Bit_type * __q = this->_M_bit_alloc(__len);\n           iterator __i = std::copy(begin(), __position, iterator(__q, 0));\n           __i = std::copy(__first, __last, __i);\n           this->_M_finish = std::copy(__position, end(), __i);\n-          _M_deallocate();\n+          this->_M_deallocate();\n           this->_M_end_of_storage\n \t    = __q + (__len + _S_word_bit - 1)/_S_word_bit;\n           this->_M_start = iterator(__q, 0);\n@@ -539,7 +539,7 @@ template <typename _Alloc>\n     vector& operator=(const vector& __x) {\n       if (&__x == this) return *this;\n       if (__x.size() > capacity()) {\n-        _M_deallocate();\n+        this->_M_deallocate();\n         _M_initialize(__x.size());\n       }\n       std::copy(__x.begin(), __x.end(), begin());\n@@ -609,9 +609,9 @@ template <typename _Alloc>\n       if (__n > this->max_size())\n \t__throw_length_error(__N(\"vector::reserve\"));\n       if (this->capacity() < __n) {\n-        _Bit_type * __q = _M_bit_alloc(__n);\n+        _Bit_type * __q = this->_M_bit_alloc(__n);\n         this->_M_finish = std::copy(begin(), end(), iterator(__q, 0));\n-        _M_deallocate();\n+        this->_M_deallocate();\n         this->_M_start = iterator(__q, 0);\n         this->_M_end_of_storage = __q + (__n + _S_word_bit - 1)/_S_word_bit;\n       }\n@@ -682,11 +682,11 @@ template <typename _Alloc>\n       }\n       else {\n         size_type __len = size() + std::max(size(), __n);\n-        _Bit_type * __q = _M_bit_alloc(__len);\n+        _Bit_type * __q = this->_M_bit_alloc(__len);\n         iterator __i = std::copy(begin(), __position, iterator(__q, 0));\n         std::fill_n(__i, __n, __x);\n         this->_M_finish = std::copy(__position, end(), __i + difference_type(__n));\n-        _M_deallocate();\n+        this->_M_deallocate();\n         this->_M_end_of_storage = __q + (__len + _S_word_bit - 1)/_S_word_bit;\n         this->_M_start = iterator(__q, 0);\n       }"}, {"sha": "b5733433bbce669f0f7896fb8f5e375ad5af9ad8", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=f2ffecb11286fbe36b305bff8e8374214f6f9463", "patch": "@@ -532,7 +532,7 @@ namespace std\n     try\n       {\n         for (__cur = __nstart; __cur < __nfinish; ++__cur)\n-          *__cur = _M_allocate_node();\n+          *__cur = this->_M_allocate_node();\n       }\n     catch(...)\n       { "}, {"sha": "5ddd78459b46fbf9c42f87f02b89f0ef14015241", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=f2ffecb11286fbe36b305bff8e8374214f6f9463", "patch": "@@ -406,7 +406,7 @@ namespace std\n     _Node*\n     _M_create_node(const value_type& __x)\n     {\n-      _Node* __p = _M_get_node();\n+      _Node* __p = this->_M_get_node();\n       try {\n         std::_Construct(&__p->_M_data, __x);\n       }\n@@ -427,7 +427,7 @@ namespace std\n     _Node*\n     _M_create_node()\n     {\n-      _Node* __p = _M_get_node();\n+      _Node* __p = this->_M_get_node();\n       try {\n         std::_Construct(&__p->_M_data);\n       }"}, {"sha": "920e591e09a70072310c5f90a8711c6dd9fa5f38", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=f2ffecb11286fbe36b305bff8e8374214f6f9463", "patch": "@@ -336,7 +336,7 @@ namespace std\n       _Link_type\n       _M_create_node(const value_type& __x)\n       {\n-\t_Link_type __tmp = _M_get_node();\n+\t_Link_type __tmp = this->_M_get_node();\n \ttry \n \t  { std::_Construct(&__tmp->_M_value_field, __x); }\n \tcatch(...)"}, {"sha": "e911697210dd670f0a5433dff3898dccd4424c22", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=f2ffecb11286fbe36b305bff8e8374214f6f9463", "patch": "@@ -153,7 +153,7 @@ namespace std\n       _Vector_base(size_t __n, const allocator_type& __a)\n       : _Base(__a)\n       {\n-\tthis->_M_start = _M_allocate(__n);\n+\tthis->_M_start = this->_M_allocate(__n);\n \tthis->_M_finish = this->_M_start;\n \tthis->_M_end_of_storage = this->_M_start + __n;\n       }\n@@ -753,7 +753,7 @@ namespace std\n         _M_allocate_and_copy(size_type __n,\n \t\t\t     _ForwardIterator __first, _ForwardIterator __last)\n         {\n-\t  pointer __result = _M_allocate(__n);\n+\t  pointer __result = this->_M_allocate(__n);\n \t  try\n \t    {\n \t      std::uninitialized_copy(__first, __last, __result);\n@@ -807,7 +807,7 @@ namespace std\n \t\t\t    _ForwardIterator __last, forward_iterator_tag)\n         {\n \t  size_type __n = std::distance(__first, __last);\n-\t  this->_M_start = _M_allocate(__n);\n+\t  this->_M_start = this->_M_allocate(__n);\n \t  this->_M_end_of_storage = this->_M_start + __n;\n \t  this->_M_finish = std::uninitialized_copy(__first, __last,\n \t\t\t\t\t\t    this->_M_start);"}, {"sha": "181b3596243b364f72efb85574f45126c9177a69", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=f2ffecb11286fbe36b305bff8e8374214f6f9463", "patch": "@@ -241,7 +241,7 @@ namespace std\n       {\n         const size_type __old_size = size();\n         const size_type __len = __old_size != 0 ? 2 * __old_size : 1;\n-        iterator __new_start(_M_allocate(__len));\n+        iterator __new_start(this->_M_allocate(__len));\n         iterator __new_finish(__new_start);\n         try\n           {\n@@ -349,7 +349,7 @@ namespace std\n \t  {\n \t    const size_type __old_size = size();\n \t    const size_type __len = __old_size + std::max(__old_size, __n);\n-\t    iterator __new_start(_M_allocate(__len));\n+\t    iterator __new_start(this->_M_allocate(__len));\n \t    iterator __new_finish(__new_start);\n \t    try\n \t      {\n@@ -426,7 +426,7 @@ namespace std\n         {\n           const size_type __old_size = size();\n           const size_type __len = __old_size + std::max(__old_size, __n);\n-          iterator __new_start(_M_allocate(__len));\n+          iterator __new_start(this->_M_allocate(__len));\n           iterator __new_finish(__new_start);\n           try\n             {"}, {"sha": "e28d0b6e8cc94388645b3d528935cea2d51e30b8", "filename": "libstdc++-v3/include/ext/rope", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope?ref=f2ffecb11286fbe36b305bff8e8374214f6f9463", "patch": "@@ -606,9 +606,9 @@ struct _Rope_RopeLeaf : public _Rope_RopeRep<_CharT,_Alloc> {\n # ifndef __GC\n     ~_Rope_RopeLeaf() {\n         if (_M_data != this->_M_c_string) {\n-            _M_free_c_string();\n+\t  this->_M_free_c_string();\n         }\n-        __STL_FREE_STRING(_M_data, this->_M_size, get_allocator());\n+        __STL_FREE_STRING(_M_data, this->_M_size, this->get_allocator());\n     }\n # endif\n };\n@@ -632,9 +632,9 @@ struct _Rope_RopeConcatenation : public _Rope_RopeRep<_CharT,_Alloc> {\n       {}\n # ifndef __GC\n     ~_Rope_RopeConcatenation() {\n-        _M_free_c_string();\n-        _M_left->_M_unref_nonnil();\n-        _M_right->_M_unref_nonnil();\n+      this->_M_free_c_string();\n+      _M_left->_M_unref_nonnil();\n+      _M_right->_M_unref_nonnil();\n     }\n # endif\n };\n@@ -678,7 +678,7 @@ struct _Rope_RopeFunction : public _Rope_RopeRep<_CharT,_Alloc> {\n     }\n # ifndef __GC\n     ~_Rope_RopeFunction() {\n-          _M_free_c_string();\n+          this->_M_free_c_string();\n           if (_M_delete_when_done) {\n               delete _M_fn;\n           }\n@@ -979,41 +979,41 @@ class _Rope_const_iterator : public _Rope_iterator_base<_CharT,_Alloc> {\n             this->_M_buf_ptr = __next;\n             ++this->_M_current_pos;\n         } else {\n-            _M_incr(1);\n+            this->_M_incr(1);\n         }\n         return *this;\n     }\n     _Rope_const_iterator& operator+=(ptrdiff_t __n) {\n         if (__n >= 0) {\n-            _M_incr(__n);\n+            this->_M_incr(__n);\n         } else {\n-            _M_decr(-__n);\n+\t    this->_M_decr(-__n);\n         }\n         return *this;\n     }\n     _Rope_const_iterator& operator--() {\n-        _M_decr(1);\n+        this->_M_decr(1);\n         return *this;\n     }\n     _Rope_const_iterator& operator-=(ptrdiff_t __n) {\n         if (__n >= 0) {\n-            _M_decr(__n);\n+            this->_M_decr(__n);\n         } else {\n-            _M_incr(-__n);\n+            this->_M_incr(-__n);\n         }\n         return *this;\n     }\n     _Rope_const_iterator operator++(int) {\n         size_t __old_pos = this->_M_current_pos;\n-        _M_incr(1);\n+        this->_M_incr(1);\n         return _Rope_const_iterator<_CharT,_Alloc>(this->_M_root, __old_pos);\n         // This makes a subsequent dereference expensive.\n         // Perhaps we should instead copy the iterator\n         // if it has a valid cache?\n     }\n     _Rope_const_iterator operator--(int) {\n         size_t __old_pos = this->_M_current_pos;\n-        _M_decr(1);\n+        this->_M_decr(1);\n         return _Rope_const_iterator<_CharT,_Alloc>(this->_M_root, __old_pos);\n     }\n     template<class _CharT2, class _Alloc2>\n@@ -1112,37 +1112,37 @@ class _Rope_iterator : public _Rope_iterator_base<_CharT,_Alloc> {\n         }\n     }\n     _Rope_iterator& operator++() {\n-        _M_incr(1);\n+        this->_M_incr(1);\n         return *this;\n     }\n     _Rope_iterator& operator+=(ptrdiff_t __n) {\n         if (__n >= 0) {\n-            _M_incr(__n);\n+            this->_M_incr(__n);\n         } else {\n-            _M_decr(-__n);\n+            this->_M_decr(-__n);\n         }\n         return *this;\n     }\n     _Rope_iterator& operator--() {\n-        _M_decr(1);\n+        this->_M_decr(1);\n         return *this;\n     }\n     _Rope_iterator& operator-=(ptrdiff_t __n) {\n         if (__n >= 0) {\n-            _M_decr(__n);\n+            this->_M_decr(__n);\n         } else {\n-            _M_incr(-__n);\n+            this->_M_incr(-__n);\n         }\n         return *this;\n     }\n     _Rope_iterator operator++(int) {\n         size_t __old_pos = this->_M_current_pos;\n-        _M_incr(1);\n+        this->_M_incr(1);\n         return _Rope_iterator<_CharT,_Alloc>(_M_root_rope, __old_pos);\n     }\n     _Rope_iterator operator--(int) {\n         size_t __old_pos = this->_M_current_pos;\n-        _M_decr(1);\n+        this->_M_decr(1);\n         return _Rope_iterator<_CharT,_Alloc>(_M_root_rope, __old_pos);\n     }\n     reference operator[](ptrdiff_t __n) {\n@@ -1650,7 +1650,7 @@ class rope : public _Rope_base<_CharT,_Alloc> {\n         {\n             _RopeRep* __old = this->_M_tree_ptr;\n             _RopeRep* __left =\n-              __STL_ROPE_FROM_UNOWNED_CHAR_PTR(&__x, 1, get_allocator());\n+              __STL_ROPE_FROM_UNOWNED_CHAR_PTR(&__x, 1, this->get_allocator());\n             try {\n               this->_M_tree_ptr = _S_concat(__left, this->_M_tree_ptr);\n               _S_unref(__old);"}, {"sha": "3c8b86735976dfab66ed9edd104e0400a921ada5", "filename": "libstdc++-v3/include/ext/ropeimpl.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h?ref=f2ffecb11286fbe36b305bff8e8374214f6f9463", "patch": "@@ -1455,7 +1455,7 @@ const _CharT* rope<_CharT,_Alloc>::c_str() const {\n     if (0 == __result)\n       {\n \tsize_t __s = size();\n-\t__result = _Data_allocate(__s + 1);\n+\t__result = this->_Data_allocate(__s + 1);\n \t_S_flatten(this->_M_tree_ptr, __result);\n \t__result[__s] = _S_eos((_CharT*)0);\n \tthis->_M_tree_ptr->_M_c_string = __result;\n@@ -1480,7 +1480,7 @@ const _CharT* rope<_CharT,_Alloc>::replace_with_c_str() {\n     _S_flatten(this->_M_tree_ptr, __result);\n     __result[__s] = _S_eos((_CharT*)0);\n     this->_M_tree_ptr->_M_unref_nonnil();\n-    this->_M_tree_ptr = _S_new_RopeLeaf(__result, __s, get_allocator());\n+    this->_M_tree_ptr = _S_new_RopeLeaf(__result, __s, this->get_allocator());\n     return(__result);\n }\n "}, {"sha": "8750f5801e3662153faae4a546d900bbe1956f1e", "filename": "libstdc++-v3/include/ext/stdio_filebuf.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ffecb11286fbe36b305bff8e8374214f6f9463/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h?ref=f2ffecb11286fbe36b305bff8e8374214f6f9463", "patch": "@@ -126,10 +126,10 @@ namespace __gnu_cxx\n \t{\n \t  this->_M_mode = __mode;\n \t  this->_M_buf_size = __size;\n-\t  _M_allocate_internal_buffer();\n+\t  this->_M_allocate_internal_buffer();\n \t  this->_M_reading = false;\n \t  this->_M_writing = false;\n-\t  _M_set_buffer(-1);\n+\t  this->_M_set_buffer(-1);\n \t}\n     }\n \n@@ -143,10 +143,10 @@ namespace __gnu_cxx\n \t{\n \t  this->_M_mode = __mode;\n \t  this->_M_buf_size = __size;\n-\t  _M_allocate_internal_buffer();\n+\t  this->_M_allocate_internal_buffer();\n \t  this->_M_reading = false;\n \t  this->_M_writing = false;\n-\t  _M_set_buffer(-1);\n+\t  this->_M_set_buffer(-1);\n \t}\n     }\n } // namespace __gnu_cxx"}]}