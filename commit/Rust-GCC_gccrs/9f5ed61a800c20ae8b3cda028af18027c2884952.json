{"sha": "9f5ed61a800c20ae8b3cda028af18027c2884952", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY1ZWQ2MWE4MDBjMjBhZThiM2NkYTAyOGFmMTgwMjdjMjg4NDk1Mg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2007-02-03T16:47:06Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2007-02-03T16:47:06Z"}, "message": "c-decl.c, [...]: Fix comment typos.\n\n\t* c-decl.c, config/avr/avr.c, config/avr/avr.h,\n\tconfig/m68k/m68k.c, config/m68k/netbsd-elf.h,\n\tconfig/mn10300/mn10300.c, config/pdp11/pdp11.h,\n\tconfig/rs6000/cell.md, config/rs6000/darwin.h,\n\tconfig/sh/sh.md, config/sh/sh4-300.md, config/spu/spu.c,\n\tconfig/spu/spu.md, cselib.c, expr.c, haifa-sched.c, hwint.h,\n\tjump.c, reload.c, sched-deps.c, sched-int.h, tree-inline.c,\n\ttree-profile.c, tree-ssa-live.h, tree-vrp.c: Fix comment\n\ttypos.  Follow spelling conventions.\n\t* doc/invoke.texi: Follow spelling conventions.\n\nFrom-SVN: r121546", "tree": {"sha": "7d5ae4d34a02f1aacaa42fef20a4ac1e04e7dc2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d5ae4d34a02f1aacaa42fef20a4ac1e04e7dc2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f5ed61a800c20ae8b3cda028af18027c2884952", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f5ed61a800c20ae8b3cda028af18027c2884952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f5ed61a800c20ae8b3cda028af18027c2884952", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f5ed61a800c20ae8b3cda028af18027c2884952/comments", "author": null, "committer": null, "parents": [{"sha": "735dfed7f66e07eed1d85e28ccb7e9277db3bd00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/735dfed7f66e07eed1d85e28ccb7e9277db3bd00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/735dfed7f66e07eed1d85e28ccb7e9277db3bd00"}], "stats": {"total": 69, "additions": 41, "deletions": 28}, "files": [{"sha": "ad45886348ee52fafb1681901368703301533c4c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f5ed61a800c20ae8b3cda028af18027c2884952", "patch": "@@ -1,3 +1,16 @@\n+2007-02-03  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* c-decl.c, config/avr/avr.c, config/avr/avr.h,\n+\tconfig/m68k/m68k.c, config/m68k/netbsd-elf.h,\n+\tconfig/mn10300/mn10300.c, config/pdp11/pdp11.h,\n+\tconfig/rs6000/cell.md, config/rs6000/darwin.h,\n+\tconfig/sh/sh.md, config/sh/sh4-300.md, config/spu/spu.c,\n+\tconfig/spu/spu.md, cselib.c, expr.c, haifa-sched.c, hwint.h,\n+\tjump.c, reload.c, sched-deps.c, sched-int.h, tree-inline.c,\n+\ttree-profile.c, tree-ssa-live.h, tree-vrp.c: Fix comment\n+\ttypos.  Follow spelling conventions.\n+\t* doc/invoke.texi: Follow spelling conventions.\n+\n 2007-02-03  Roger Sayle  <roger@eyesopen.com>\n \n \t* simplify-rtx.c (simplify_relational_operation_1): Implement some"}, {"sha": "3bdf70e12bae42ca20aa6ce4567604da415b65ee", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=9f5ed61a800c20ae8b3cda028af18027c2884952", "patch": "@@ -64,7 +64,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n \n /* Set this to 1 if you want the standard ISO C99 semantics of 'inline'\n    when you specify -std=c99 or -std=gnu99, and to 0 if you want\n-   behaviour compatible with the nonstandard semantics implemented by\n+   behavior compatible with the nonstandard semantics implemented by\n    GCC 2.95 through 4.2.  */\n #define WANT_C99_INLINE_SEMANTICS 1\n "}, {"sha": "efe7b86e3e603b7794c5fc39fab498cfb561552f", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=9f5ed61a800c20ae8b3cda028af18027c2884952", "patch": "@@ -5527,7 +5527,7 @@ avr_ret_register (void)\n   return 24;\n }\n \n-/* Ceate an RTX representing the place where a\n+/* Create an RTX representing the place where a\n    library function returns a value of mode MODE.  */\n \n rtx"}, {"sha": "0c8a800dec33b7d5b36012b485048f764d8ce1d6", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=9f5ed61a800c20ae8b3cda028af18027c2884952", "patch": "@@ -725,7 +725,7 @@ extern int avr_case_values_threshold;\n #define CC1PLUS_SPEC \"%{!frtti:-fno-rtti} \\\n     %{!fenforce-eh-specs:-fno-enforce-eh-specs} \\\n     %{!fexceptions:-fno-exceptions}\"\n-/* A C string constant that tells the GCC drvier program options to\n+/* A C string constant that tells the GCC driver program options to\n    pass to `cc1plus'.  */\n \n #define ASM_SPEC \"%{mmcu=avr25:-mmcu=avr2;\\"}, {"sha": "225baed5ac62012cb61ec5daa5c8fbe3aad61225", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=9f5ed61a800c20ae8b3cda028af18027c2884952", "patch": "@@ -462,7 +462,7 @@ override_options (void)\n      implementing architecture ARCH.  -mcpu=CPU should override -march\n      and should generate code that runs on processor CPU, making free\n      use of any instructions that CPU understands.  -mtune=UARCH applies\n-     on top of -mcpu or -march and optimises the code for UARCH.  It does\n+     on top of -mcpu or -march and optimizes the code for UARCH.  It does\n      not change the target architecture.  */\n   if (m68k_cpu_entry)\n     {"}, {"sha": "2d4012f8ba9104cac8aeae79af443de2e341269b", "filename": "gcc/config/m68k/netbsd-elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h?ref=9f5ed61a800c20ae8b3cda028af18027c2884952", "patch": "@@ -69,7 +69,7 @@ Boston, MA 02110-1301, USA.  */\n \n \n /* Provide an ASM_SPEC appropriate for NetBSD m68k ELF targets.  We need\n-   to passn PIC code generation options.  */\n+   to pass PIC code generation options.  */\n \n #undef ASM_SPEC\n #define ASM_SPEC \"%(asm_cpu_spec) %{fpic|fpie:-k} %{fPIC|fPIE:-k -K}\""}, {"sha": "ae10f82aa41fd602e3b3ff4d360b00600af4f1c0", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=9f5ed61a800c20ae8b3cda028af18027c2884952", "patch": "@@ -546,7 +546,7 @@ fp_regs_to_save (void)\n /* Print a set of registers in the format required by \"movm\" and \"ret\".\n    Register K is saved if bit K of MASK is set.  The data and address\n    registers can be stored individually, but the extended registers cannot.\n-   We assume that the mask alread takes that into account.  For instance,\n+   We assume that the mask already takes that into account.  For instance,\n    bits 14 to 17 must have the same value.  */\n \n void"}, {"sha": "a8e8d4d58bf17c06be0a9373fa7387b763e065d0", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=9f5ed61a800c20ae8b3cda028af18027c2884952", "patch": "@@ -441,7 +441,7 @@ extern int current_first_parm_offset;\n    For the pdp11, this is nonzero to account for the return address.\n \t1 - return address\n \t2 - frame pointer (always saved, even when not used!!!!)\n-\t\t-- chnage some day !!!:q!\n+\t\t-- change some day !!!:q!\n \n */\n #define FIRST_PARM_OFFSET(FNDECL) 4"}, {"sha": "8b3a5a888ad1b6930b9a920b1ec7f351bee30f1e", "filename": "gcc/config/rs6000/cell.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fconfig%2Frs6000%2Fcell.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fconfig%2Frs6000%2Fcell.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fcell.md?ref=9f5ed61a800c20ae8b3cda028af18027c2884952", "patch": "@@ -25,7 +25,7 @@\n ;; This file simulate PPU processor unit backend of pipeline, maualP24. \n ;; manual P27, stall and flush points\n ;; IU, XU, VSU, dispatcher decodes and dispatch 2 insns per cycle in program\n-;;  order, the grouped adress are aligned by 8\n+;;  order, the grouped address are aligned by 8\n ;; This file only simulate one thread situation\n ;; XU executes all fixed point insns(3 units, a simple alu, a complex unit,\n ;;   and load/store unit)"}, {"sha": "158b1be87f0293622789e739d074abbc0b346a89", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=9f5ed61a800c20ae8b3cda028af18027c2884952", "patch": "@@ -401,7 +401,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    macro in the Apple version of GCC, except that version supports\n    'mac68k' alignment, and that version uses the computed alignment\n    always for the first field of a structure.  The first-field\n-   behaviour is dealt with by\n+   behavior is dealt with by\n    darwin_rs6000_special_round_type_align.  */\n #define ADJUST_FIELD_ALIGN(FIELD, COMPUTED)\t\\\n   (TARGET_ALIGN_NATURAL ? (COMPUTED)\t\t\\"}, {"sha": "c675478140b2ea24b8f465c79a8c5205bf7dafee", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=9f5ed61a800c20ae8b3cda028af18027c2884952", "patch": "@@ -4771,7 +4771,7 @@ label:\n \n ; N.B. This should agree with LOAD_EXTEND_OP and movqi.\n ; Because we use zero extension, we can't provide signed QImode compares\n-; using a simple compare or conditional banch insn.\n+; using a simple compare or conditional branch insn.\n (define_insn \"truncdiqi2\"\n   [(set (match_operand:QI 0 \"general_movdst_operand\" \"=r,m\")\n \t(truncate:QI (match_operand:DI 1 \"register_operand\" \"r,r\")))]"}, {"sha": "02cd8fd09e0a6a64acc8d880e7dbccb34865e810", "filename": "gcc/config/sh/sh4-300.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fconfig%2Fsh%2Fsh4-300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fconfig%2Fsh%2Fsh4-300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh4-300.md?ref=9f5ed61a800c20ae8b3cda028af18027c2884952", "patch": "@@ -187,7 +187,7 @@\n ;; Scheduling runs before reorg, so we approximate this by saying that we\n ;; want the call to be paired with a preceding insn.\n ;; In most cases, the insn that loads the address of the call should have\n-;; a non-zero latency (mov rn,rm doesn't make sense since we could use rn\n+;; a nonzero latency (mov rn,rm doesn't make sense since we could use rn\n ;; for the address then).  Thus, a preceding insn that can be paired with\n ;; a call should be eligible for the delay slot.\n ;;"}, {"sha": "5297a7b95504c7d36468f30b5f96acf16a731d25", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=9f5ed61a800c20ae8b3cda028af18027c2884952", "patch": "@@ -2792,7 +2792,7 @@ spu_handle_vector_attribute (tree * node, tree name,\n   return NULL_TREE;\n }\n \n-/* Return non-zero if FUNC is a naked function.  */\n+/* Return nonzero if FUNC is a naked function.  */\n static int\n spu_naked_function_p (tree func)\n {"}, {"sha": "8dbeadff09862b8dcd7655df9fb386f744ea5d3b", "filename": "gcc/config/spu/spu.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fconfig%2Fspu%2Fspu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fconfig%2Fspu%2Fspu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.md?ref=9f5ed61a800c20ae8b3cda028af18027c2884952", "patch": "@@ -55,7 +55,7 @@\n (define_insn_reservation \"FP7\" 7 (eq_attr \"type\" \"fp7\")\n     \"pipe0, fp, nothing*5\")\n \n-;; The behaviour of the double precision is that both pipes stall\n+;; The behavior of the double precision is that both pipes stall\n ;; for 6 cycles and the the rest of the operation pipelines for\n ;; 7 cycles.  The simplest way to model this is to simply ignore\n ;; the 6 cyle stall."}, {"sha": "d821bcf90481fafef105190798968856aecfb413", "filename": "gcc/cselib.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=9f5ed61a800c20ae8b3cda028af18027c2884952", "patch": "@@ -1453,7 +1453,7 @@ cselib_process_insn (rtx insn)\n \n   if (n_useless_values > MAX_USELESS_VALUES\n       /* remove_useless_values is linear in the hash table size.  Avoid\n-         quadratic behaviour for very large hashtables with very few\n+         quadratic behavior for very large hashtables with very few\n \t useless elements.  */\n       && (unsigned int)n_useless_values > cselib_hash_table->n_elements / 4)\n     remove_useless_values ();"}, {"sha": "4be7de1022bb26de7bffb67054d61cf9d443fbae", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9f5ed61a800c20ae8b3cda028af18027c2884952", "patch": "@@ -1658,7 +1658,7 @@ when used within the DSO@.  Enabling this option can have a dramatic effect\n on load and link times of a DSO as it massively reduces the size of the\n dynamic export table when the library makes heavy use of templates.\n \n-The behaviour of this switch is not quite the same as marking the\n+The behavior of this switch is not quite the same as marking the\n methods as hidden directly, because it does not affect static variables\n local to the function or cause the compiler to deduce that\n the function is defined in only one shared object."}, {"sha": "b49813ab2a94d105349442b8b446dbca59ffcb8c", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=9f5ed61a800c20ae8b3cda028af18027c2884952", "patch": "@@ -8988,7 +8988,7 @@ string_constant (tree arg, tree *ptr_offset)\n \t      && TREE_CODE (array) != VAR_DECL)\n \t    return 0;\n \n-\t  /* Check if the array has a non-zero lower bound.  */\n+\t  /* Check if the array has a nonzero lower bound.  */\n \t  lower_bound = array_ref_low_bound (TREE_OPERAND (arg, 0));\n \t  if (!integer_zerop (lower_bound))\n \t    {"}, {"sha": "ed3545999695b786dafa0ed53f75559d9f855e98", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=9f5ed61a800c20ae8b3cda028af18027c2884952", "patch": "@@ -684,7 +684,7 @@ dep_cost (dep_t link)\n \t  rtx dep_cost_rtx_link = alloc_INSN_LIST (NULL_RTX, NULL_RTX);\n \n \t  /* Make it self-cycled, so that if some tries to walk over this\n-\t     incomplete list he/she will be cought in an endless loop.  */\n+\t     incomplete list he/she will be caught in an endless loop.  */\n \t  XEXP (dep_cost_rtx_link, 1) = dep_cost_rtx_link;\n \n \t  /* Targets use only REG_NOTE_KIND of the link.  */"}, {"sha": "2f3fe4cb0b817440cc53e4be2e591038b08d5c4b", "filename": "gcc/hwint.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fhwint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fhwint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhwint.h?ref=9f5ed61a800c20ae8b3cda028af18027c2884952", "patch": "@@ -128,7 +128,7 @@ extern char sizeof_long_long_must_be_8[sizeof(long long) == 8 ? 1 : -1];\n    efficiently in hardware.  (That is, the widest integer type that fits\n    in a hardware register.)  Normally this is \"long\" but on some hosts it\n    should be \"long long\" or \"__int64\".  This is no convenient way to\n-   autodect this, so such systems must set a flag in config.host; see there\n+   autodetect this, so such systems must set a flag in config.host; see there\n    for details.  */\n \n #ifdef USE_LONG_LONG_FOR_WIDEST_FAST_INT"}, {"sha": "d2a905bbbee407db6b090b6a8e3a731e04dab067", "filename": "gcc/jump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=9f5ed61a800c20ae8b3cda028af18027c2884952", "patch": "@@ -1639,7 +1639,7 @@ redirect_jump_2 (rtx jump, rtx olabel, rtx nlabel, int delete_unused,\n {\n   rtx note;\n \n-  /* negative DELETE_UNUSED used to be used to signalize behaviour on\n+  /* Negative DELETE_UNUSED used to be used to signalize behavior on\n      moving FUNCTION_END note.  Just sanity check that no user still worry\n      about this.  */\n   gcc_assert (delete_unused >= 0);"}, {"sha": "21c5ed20026c7f9e4773e0a5475b353506abe50e", "filename": "gcc/reload.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=9f5ed61a800c20ae8b3cda028af18027c2884952", "patch": "@@ -1717,7 +1717,7 @@ combine_reloads (void)\n     return;\n \n   /* If there is a reload for part of the address of this operand, we would\n-     need to chnage it to RELOAD_FOR_OTHER_ADDRESS.  But that would extend\n+     need to change it to RELOAD_FOR_OTHER_ADDRESS.  But that would extend\n      its life to the point where doing this combine would not lower the\n      number of spill registers needed.  */\n   for (i = 0; i < n_reloads; i++)"}, {"sha": "72d8e4f04cfc5462fc79808cf8521f195570feb0", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=9f5ed61a800c20ae8b3cda028af18027c2884952", "patch": "@@ -97,7 +97,7 @@ init_dep_1 (dep_t dep, rtx pro, rtx con, enum reg_note kind, ds_t ds)\n \n /* Init DEP with the arguments.\n    While most of the scheduler (including targets) only need the major type\n-   of the dependency, it is convinient to hide full dep_status from them.  */\n+   of the dependency, it is convenient to hide full dep_status from them.  */\n void\n init_dep (dep_t dep, rtx pro, rtx con, enum reg_note kind)\n {\n@@ -2425,7 +2425,7 @@ add_back_forw_dep (rtx insn, rtx elem, enum reg_note dep_type, ds_t ds)\n     gcc_assert (deps_list_consistent_p (INSN_BACK_DEPS (insn)));\n }\n \n-/* Remove a dependency refered by L.  */\n+/* Remove a dependency referred to by L.  */\n void\n delete_back_forw_dep (dep_link_t l)\n {"}, {"sha": "61b9cf259c04cdf843585fc36d61171f0485df62", "filename": "gcc/sched-int.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=9f5ed61a800c20ae8b3cda028af18027c2884952", "patch": "@@ -142,8 +142,8 @@ void copy_deps_list_change_con (deps_list_t, deps_list_t, rtx);\n \n void move_dep_link (dep_link_t, deps_list_t);\n \n-/* Suppose we have a depedence Y between insn pro1 and con1, where pro1 has\n-   additional dependants con0 and con2, and con1 is dependant on additional\n+/* Suppose we have a dependence Y between insn pro1 and con1, where pro1 has\n+   additional dependents con0 and con2, and con1 is dependent on additional\n    insns pro0 and pro1:\n \n    .con0      pro0"}, {"sha": "def3af4ccdbb1625263453ede364ca3a40185473", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=9f5ed61a800c20ae8b3cda028af18027c2884952", "patch": "@@ -2223,7 +2223,7 @@ estimate_num_insns_1 (tree *tp, int *walk_subtrees, void *data)\n }\n \n /* Estimate number of instructions that will be created by expanding EXPR.\n-   WEIGHTS contains weigths attributed to various constructs.  */\n+   WEIGHTS contains weights attributed to various constructs.  */\n \n int\n estimate_num_insns (tree expr, eni_weights *weights)"}, {"sha": "bd7556a074a77331919dc3709803806802a18b84", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=9f5ed61a800c20ae8b3cda028af18027c2884952", "patch": "@@ -64,7 +64,7 @@ static GTY(()) tree ptr_void;\n \n /* Add code:\n    static gcov*\t__gcov_indirect_call_counters; // pointer to actual counter\n-   static void*\t__gcov_indirect_call_callee; // actual callee address\n+   static void*\t__gcov_indirect_call_callee; // actual callee addres\n */\n static void\n tree_init_ic_make_global_vars (void)"}, {"sha": "d0aeedf08df8c88199c227817527d789239c468c", "filename": "gcc/tree-ssa-live.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Ftree-ssa-live.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Ftree-ssa-live.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.h?ref=9f5ed61a800c20ae8b3cda028af18027c2884952", "patch": "@@ -46,7 +46,7 @@ Boston, MA 02110-1301, USA.  */\n    change. (ie, it is truly a view since it doesn't change anything)\n \n    The final component of the data structure is the basevar map.  This provides\n-   a list of all the different base variables which occue in a partition view,\n+   a list of all the different base variables which occur in a partition view,\n    and a unique index for each one. Routines are provided to quickly produce\n    the base variable of a partition.\n "}, {"sha": "2babe1a25b7cdaee2e6450cecd24977477c0a354", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5ed61a800c20ae8b3cda028af18027c2884952/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=9f5ed61a800c20ae8b3cda028af18027c2884952", "patch": "@@ -3481,7 +3481,7 @@ insert_range_assertions (void)\n \n /* Checks one ARRAY_REF in REF, located at LOCUS. Ignores flexible arrays\n    and \"struct\" hacks. If VRP can determine that the\n-   array subscript is a contant, check if it is outside valid\n+   array subscript is a constant, check if it is outside valid\n    range. If the array subscript is a RANGE, warn if it is\n    non-overlapping with valid range.\n    IGNORE_OFF_BY_ONE is true if the ARRAY_REF is inside a ADDR_EXPR.  */"}]}