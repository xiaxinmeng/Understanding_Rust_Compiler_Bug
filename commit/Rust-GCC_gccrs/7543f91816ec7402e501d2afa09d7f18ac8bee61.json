{"sha": "7543f91816ec7402e501d2afa09d7f18ac8bee61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU0M2Y5MTgxNmVjNzQwMmU1MDFkMmFmYTA5ZDdmMThhYzhiZWU2MQ==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2011-12-09T12:57:24Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2011-12-09T12:57:24Z"}, "message": "re PR middle-end/40154 (internal compiler error: in do_SUBST, at combine.c:681)\n\n        PR middle-end/40154\n        * emit-rtl.c (set_dst_reg_note): New function.\n        * rtl.h (set_dst_reg_note): Declare.\n        * optabs.c (expand_binop, expand_absneg_bit): Use set_dst_reg_note.\n        (emit_libcall_block, expand_fix): Likewise.\n        * function.c (assign_parm_setup_reg, expand_function_start): Likewise.\n        * expmed.c (expand_mult_const, expand_divmod): Likewise.\n        * reload1.c (gen_reload): Likewise.\n\nFrom-SVN: r182162", "tree": {"sha": "29604d6a37d0c504c6bb80d0d28fbabc827412ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29604d6a37d0c504c6bb80d0d28fbabc827412ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7543f91816ec7402e501d2afa09d7f18ac8bee61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7543f91816ec7402e501d2afa09d7f18ac8bee61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7543f91816ec7402e501d2afa09d7f18ac8bee61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7543f91816ec7402e501d2afa09d7f18ac8bee61/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fb5503484f7463c2a523fed993f58e58289ba59b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb5503484f7463c2a523fed993f58e58289ba59b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb5503484f7463c2a523fed993f58e58289ba59b"}], "stats": {"total": 129, "additions": 73, "deletions": 56}, "files": [{"sha": "8f56fbb9ba6ecfb0b7e8ae35029342c9519d45a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7543f91816ec7402e501d2afa09d7f18ac8bee61/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7543f91816ec7402e501d2afa09d7f18ac8bee61/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7543f91816ec7402e501d2afa09d7f18ac8bee61", "patch": "@@ -1,3 +1,14 @@\n+2011-12-09  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\tPR middle-end/40154\n+\t* emit-rtl.c (set_dst_reg_note): New function.\n+\t* rtl.h (set_dst_reg_note): Declare.\n+\t* optabs.c (expand_binop, expand_absneg_bit): Use set_dst_reg_note.\n+\t(emit_libcall_block, expand_fix): Likewise.\n+\t* function.c (assign_parm_setup_reg, expand_function_start): Likewise.\n+\t* expmed.c (expand_mult_const, expand_divmod): Likewise.\n+\t* reload1.c (gen_reload): Likewise.\n+\n 2011-12-09  Kai Tietz  <ktietz@redhat.com>\n \n \t* ira-color.c (print_hard_regs_subforest): Use"}, {"sha": "a537374fbad656a5fe1eeae6c333c887dced6f9f", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7543f91816ec7402e501d2afa09d7f18ac8bee61/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7543f91816ec7402e501d2afa09d7f18ac8bee61/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=7543f91816ec7402e501d2afa09d7f18ac8bee61", "patch": "@@ -5004,6 +5004,17 @@ set_unique_reg_note (rtx insn, enum reg_note kind, rtx datum)\n \n   return REG_NOTES (insn);\n }\n+\n+/* Like set_unique_reg_note, but don't do anything unless INSN sets DST.  */\n+rtx\n+set_dst_reg_note (rtx insn, enum reg_note kind, rtx datum, rtx dst)\n+{\n+  rtx set = single_set (insn);\n+\n+  if (set && SET_DEST (set) == dst)\n+    return set_unique_reg_note (insn, kind, datum);\n+  return NULL_RTX;\n+}\n \f\n /* Return an indication of which type of insn should have X as a body.\n    The value is CODE_LABEL, INSN, CALL_INSN or JUMP_INSN.  */"}, {"sha": "cfa045bf71e23a72c05e995b3757bf928bb54fe9", "filename": "gcc/expmed.c", "status": "modified", "additions": 26, "deletions": 31, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7543f91816ec7402e501d2afa09d7f18ac8bee61/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7543f91816ec7402e501d2afa09d7f18ac8bee61/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=7543f91816ec7402e501d2afa09d7f18ac8bee61", "patch": "@@ -2939,6 +2939,7 @@ expand_mult_const (enum machine_mode mode, rtx op0, HOST_WIDE_INT val,\n \t   && !optimize)\n \t  ? target : 0;\n       rtx accum_target = optimize ? 0 : accum;\n+      rtx accum_inner;\n \n       switch (alg->op[opno])\n \t{\n@@ -3004,16 +3005,18 @@ expand_mult_const (enum machine_mode mode, rtx op0, HOST_WIDE_INT val,\n \t that.  */\n \n       tem = op0, nmode = mode;\n+      accum_inner = accum;\n       if (GET_CODE (accum) == SUBREG)\n \t{\n-\t  nmode = GET_MODE (SUBREG_REG (accum));\n+\t  accum_inner = SUBREG_REG (accum);\n+\t  nmode = GET_MODE (accum_inner);\n \t  tem = gen_lowpart (nmode, op0);\n \t}\n \n       insn = get_last_insn ();\n-      set_unique_reg_note (insn, REG_EQUAL,\n-\t\t\t   gen_rtx_MULT (nmode, tem,\n-\t\t\t\t\t GEN_INT (val_so_far)));\n+      set_dst_reg_note (insn, REG_EQUAL,\n+\t\t\tgen_rtx_MULT (nmode, tem, GEN_INT (val_so_far)),\n+\t\t\taccum_inner);\n     }\n \n   if (variant == negate_variant)\n@@ -3823,7 +3826,7 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n   rtx quotient = 0, remainder = 0;\n   rtx last;\n   int size;\n-  rtx insn, set;\n+  rtx insn;\n   optab optab1, optab2;\n   int op1_is_constant, op1_is_pow2 = 0;\n   int max_cost, extra_cost;\n@@ -4127,12 +4130,10 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t\t  break;\n \n \t\tinsn = get_last_insn ();\n-\t\tif (insn != last\n-\t\t    && (set = single_set (insn)) != 0\n-\t\t    && SET_DEST (set) == quotient)\n-\t\t  set_unique_reg_note (insn,\n-\t\t\t\t       REG_EQUAL,\n-\t\t\t\t       gen_rtx_UDIV (compute_mode, op0, op1));\n+\t\tif (insn != last)\n+\t\t  set_dst_reg_note (insn, REG_EQUAL,\n+\t\t\t\t    gen_rtx_UDIV (compute_mode, op0, op1),\n+\t\t\t\t    quotient);\n \t      }\n \t    else\t\t/* TRUNC_DIV, signed */\n \t      {\n@@ -4211,18 +4212,15 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t\t      {\n \t\t\tinsn = get_last_insn ();\n \t\t\tif (insn != last\n-\t\t\t    && (set = single_set (insn)) != 0\n-\t\t\t    && SET_DEST (set) == quotient\n \t\t\t    && abs_d < ((unsigned HOST_WIDE_INT) 1\n \t\t\t\t\t<< (HOST_BITS_PER_WIDE_INT - 1)))\n-\t\t\t  set_unique_reg_note (insn,\n-\t\t\t\t\t       REG_EQUAL,\n-\t\t\t\t\t       gen_rtx_DIV (compute_mode,\n-\t\t\t\t\t\t\t    op0,\n-\t\t\t\t\t\t\t    GEN_INT\n-\t\t\t\t\t\t\t    (trunc_int_for_mode\n+\t\t\t  set_dst_reg_note (insn, REG_EQUAL,\n+\t\t\t\t\t    gen_rtx_DIV (compute_mode, op0,\n+\t\t\t\t\t\t\t GEN_INT\n+\t\t\t\t\t\t\t   (trunc_int_for_mode\n \t\t\t\t\t\t\t     (abs_d,\n-\t\t\t\t\t\t\t      compute_mode))));\n+\t\t\t\t\t\t\t      compute_mode))),\n+\t\t\t\t\t    quotient);\n \n \t\t\tquotient = expand_unop (compute_mode, neg_optab,\n \t\t\t\t\t\tquotient, quotient, 0);\n@@ -4309,12 +4307,10 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t\t  break;\n \n \t\tinsn = get_last_insn ();\n-\t\tif (insn != last\n-\t\t    && (set = single_set (insn)) != 0\n-\t\t    && SET_DEST (set) == quotient)\n-\t\t  set_unique_reg_note (insn,\n-\t\t\t\t       REG_EQUAL,\n-\t\t\t\t       gen_rtx_DIV (compute_mode, op0, op1));\n+\t\tif (insn != last)\n+\t\t  set_dst_reg_note (insn, REG_EQUAL,\n+\t\t\t\t    gen_rtx_DIV (compute_mode, op0, op1),\n+\t\t\t\t    quotient);\n \t      }\n \t    break;\n \t  }\n@@ -4732,11 +4728,10 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t\t\t\t    NULL_RTX, 1);\n \n \t    insn = get_last_insn ();\n-\t    set_unique_reg_note (insn,\n-\t\t\t\t REG_EQUAL,\n-\t\t\t\t gen_rtx_fmt_ee (unsignedp ? UDIV : DIV,\n-\t\t\t\t\t\t compute_mode,\n-\t\t\t\t\t\t op0, op1));\n+\t    set_dst_reg_note (insn, REG_EQUAL,\n+\t\t\t      gen_rtx_fmt_ee (unsignedp ? UDIV : DIV,\n+\t\t\t\t\t      compute_mode, op0, op1),\n+\t\t\t      quotient);\n \t  }\n \tbreak;\n "}, {"sha": "a081b270ec05e3e6ef461e7f9f12ad0d04922ca5", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7543f91816ec7402e501d2afa09d7f18ac8bee61/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7543f91816ec7402e501d2afa09d7f18ac8bee61/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=7543f91816ec7402e501d2afa09d7f18ac8bee61", "patch": "@@ -3140,9 +3140,8 @@ assign_parm_setup_reg (struct assign_parm_data_all *all, tree parm,\n \t\tset_unique_reg_note (sinsn, REG_EQUIV, stackr);\n \t    }\n \t}\n-      else if ((set = single_set (linsn)) != 0\n-\t       && SET_DEST (set) == parmreg)\n-\tset_unique_reg_note (linsn, REG_EQUIV, equiv_stack_parm);\n+      else \n+\tset_dst_reg_note (linsn, REG_EQUIV, equiv_stack_parm, parmreg);\n     }\n \n   /* For pointer data type, suggest pointer register.  */\n@@ -4757,7 +4756,7 @@ expand_function_start (tree subr)\n       /* Mark the register as eliminable, similar to parameters.  */\n       if (MEM_P (chain)\n \t  && reg_mentioned_p (arg_pointer_rtx, XEXP (chain, 0)))\n-\tset_unique_reg_note (insn, REG_EQUIV, chain);\n+\tset_dst_reg_note (insn, REG_EQUIV, chain, local);\n     }\n \n   /* If the function receives a non-local goto, then store the"}, {"sha": "3f50177aea83db06dcd9d4642bf42df440af5c25", "filename": "gcc/optabs.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7543f91816ec7402e501d2afa09d7f18ac8bee61/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7543f91816ec7402e501d2afa09d7f18ac8bee61/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=7543f91816ec7402e501d2afa09d7f18ac8bee61", "patch": "@@ -2052,11 +2052,11 @@ expand_binop (enum machine_mode mode, optab binoptab, rtx op0, rtx op1,\n \t    {\n \t      rtx temp = emit_move_insn (target, xtarget);\n \n-\t      set_unique_reg_note (temp,\n-\t\t\t\t   REG_EQUAL,\n-\t\t\t\t   gen_rtx_fmt_ee (binoptab->code, mode,\n-\t\t\t\t\t\t   copy_rtx (xop0),\n-\t\t\t\t\t\t   copy_rtx (xop1)));\n+\t      set_dst_reg_note (temp, REG_EQUAL,\n+\t\t\t\tgen_rtx_fmt_ee (binoptab->code, mode,\n+\t\t\t\t\t\tcopy_rtx (xop0),\n+\t\t\t\t\t\tcopy_rtx (xop1)),\n+\t\t\t\ttarget);\n \t    }\n \t  else\n \t    target = xtarget;\n@@ -2104,11 +2104,12 @@ expand_binop (enum machine_mode mode, optab binoptab, rtx op0, rtx op1,\n \t  if (optab_handler (mov_optab, mode) != CODE_FOR_nothing)\n \t    {\n \t      temp = emit_move_insn (target ? target : product, product);\n-\t      set_unique_reg_note (temp,\n-\t\t\t\t   REG_EQUAL,\n-\t\t\t\t   gen_rtx_fmt_ee (MULT, mode,\n-\t\t\t\t\t\t   copy_rtx (op0),\n-\t\t\t\t\t\t   copy_rtx (op1)));\n+\t      set_dst_reg_note (temp,\n+\t\t\t\tREG_EQUAL,\n+\t\t\t\tgen_rtx_fmt_ee (MULT, mode,\n+\t\t\t\t\t\tcopy_rtx (op0),\n+\t\t\t\t\t\tcopy_rtx (op1)),\n+\t\t\t\ttarget ? target : product);\n \t    }\n \t  return product;\n \t}\n@@ -2966,8 +2967,9 @@ expand_absneg_bit (enum rtx_code code, enum machine_mode mode,\n \t\t           gen_lowpart (imode, target), 1, OPTAB_LIB_WIDEN);\n       target = lowpart_subreg_maybe_copy (mode, temp, imode);\n \n-      set_unique_reg_note (get_last_insn (), REG_EQUAL,\n-\t\t\t   gen_rtx_fmt_e (code, mode, copy_rtx (op0)));\n+      set_dst_reg_note (get_last_insn (), REG_EQUAL,\n+\t\t\tgen_rtx_fmt_e (code, mode, copy_rtx (op0)),\n+\t\t\ttarget);\n     }\n \n   return target;\n@@ -3899,8 +3901,7 @@ emit_libcall_block (rtx insns, rtx target, rtx result, rtx equiv)\n     }\n \n   last = emit_move_insn (target, result);\n-  if (optab_handler (mov_optab, GET_MODE (target)) != CODE_FOR_nothing)\n-    set_unique_reg_note (last, REG_EQUAL, copy_rtx (equiv));\n+  set_dst_reg_note (last, REG_EQUAL, copy_rtx (equiv), target);\n \n   if (final_dest != target)\n     emit_move_insn (final_dest, target);\n@@ -5213,11 +5214,10 @@ expand_fix (rtx to, rtx from, int unsignedp)\n \t    {\n \t      /* Make a place for a REG_NOTE and add it.  */\n \t      insn = emit_move_insn (to, to);\n-\t      set_unique_reg_note (insn,\n-\t                           REG_EQUAL,\n-\t\t\t\t   gen_rtx_fmt_e (UNSIGNED_FIX,\n-\t\t\t\t\t\t  GET_MODE (to),\n-\t\t\t\t\t\t  copy_rtx (from)));\n+\t      set_dst_reg_note (insn, REG_EQUAL,\n+\t\t\t\tgen_rtx_fmt_e (UNSIGNED_FIX, GET_MODE (to),\n+\t\t\t\t\t       copy_rtx (from)),\n+\t\t\t\tto);\n \t    }\n \n \t  return;"}, {"sha": "7852566190411d77fe628ffe954b586090c7f573", "filename": "gcc/reload1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7543f91816ec7402e501d2afa09d7f18ac8bee61/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7543f91816ec7402e501d2afa09d7f18ac8bee61/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=7543f91816ec7402e501d2afa09d7f18ac8bee61", "patch": "@@ -8574,7 +8574,7 @@ gen_reload (rtx out, rtx in, int opnum, enum reload_type type)\n       if (insn)\n \t{\n \t  /* Add a REG_EQUIV note so that find_equiv_reg can find it.  */\n-\t  set_unique_reg_note (insn, REG_EQUIV, in);\n+\t  set_dst_reg_note (insn, REG_EQUIV, in, out);\n \t  return insn;\n \t}\n \n@@ -8584,7 +8584,7 @@ gen_reload (rtx out, rtx in, int opnum, enum reload_type type)\n       gcc_assert (!reg_overlap_mentioned_p (out, op0));\n       gen_reload (out, op1, opnum, type);\n       insn = emit_insn (gen_add2_insn (out, op0));\n-      set_unique_reg_note (insn, REG_EQUIV, in);\n+      set_dst_reg_note (insn, REG_EQUIV, in, out);\n     }\n \n #ifdef SECONDARY_MEMORY_NEEDED"}, {"sha": "bd09cbfa12508a8d3b9c27d5cbaefdf67dfae300", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7543f91816ec7402e501d2afa09d7f18ac8bee61/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7543f91816ec7402e501d2afa09d7f18ac8bee61/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=7543f91816ec7402e501d2afa09d7f18ac8bee61", "patch": "@@ -1893,6 +1893,7 @@ extern enum machine_mode choose_hard_reg_mode (unsigned int, unsigned int,\n \n /* In emit-rtl.c  */\n extern rtx set_unique_reg_note (rtx, enum reg_note, rtx);\n+extern rtx set_dst_reg_note (rtx, enum reg_note, rtx, rtx);\n extern void set_insn_deleted (rtx);\n \n /* Functions in rtlanal.c */"}]}