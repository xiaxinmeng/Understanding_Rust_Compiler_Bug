{"sha": "d1011a41efd121ede2f427c1dffd6ac62f92962e", "node_id": "C_kwDOANBUbNoAKGQxMDExYTQxZWZkMTIxZWRlMmY0MjdjMWRmZmQ2YWM2MmY5Mjk2MmU", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-11-30T05:50:11Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-12-06T10:15:42Z"}, "message": "Prefer INT_SSE_REGS for SSE_FLOAT_MODE_P in preferred_reload_class.\n\nWhen moves between integer and sse registers are cheap.\n\n2021-12-06  Hongtao Liu  <Hongtao.liu@intel.com>\n\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\ngcc/ChangeLog:\n\n\tPR target/95740\n\t* config/i386/i386.c (ix86_preferred_reload_class): Allow\n\tinteger regs when moves between register units are cheap.\n\t* config/i386/i386.h (INT_SSE_CLASS_P): New.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr95740.c: New test.", "tree": {"sha": "94729c2f3fe0ae8c9611fb0e94632cd8d849a1f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94729c2f3fe0ae8c9611fb0e94632cd8d849a1f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1011a41efd121ede2f427c1dffd6ac62f92962e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1011a41efd121ede2f427c1dffd6ac62f92962e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1011a41efd121ede2f427c1dffd6ac62f92962e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1011a41efd121ede2f427c1dffd6ac62f92962e/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45116f342057b7facecd3d05c2091ce3a77eda59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45116f342057b7facecd3d05c2091ce3a77eda59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45116f342057b7facecd3d05c2091ce3a77eda59"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "52547b0f0570fccd8faf9eabafb98607253bfc43", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1011a41efd121ede2f427c1dffd6ac62f92962e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1011a41efd121ede2f427c1dffd6ac62f92962e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d1011a41efd121ede2f427c1dffd6ac62f92962e", "patch": "@@ -19214,9 +19214,17 @@ ix86_preferred_reload_class (rtx x, reg_class_t regclass)\n       return NO_REGS;\n     }\n \n-  /* Prefer SSE regs only, if we can use them for math.  */\n+  /* Prefer SSE if we can use them for math.  Also allow integer regs\n+     when moves between register units are cheap.  */\n   if (SSE_FLOAT_MODE_P (mode) && TARGET_SSE_MATH)\n-    return SSE_CLASS_P (regclass) ? regclass : NO_REGS;\n+    {\n+      if (TARGET_INTER_UNIT_MOVES_FROM_VEC\n+\t  && TARGET_INTER_UNIT_MOVES_TO_VEC\n+\t  && GET_MODE_SIZE (mode) <= GET_MODE_SIZE (word_mode))\n+\treturn INT_SSE_CLASS_P (regclass) ? regclass : NO_REGS;\n+      else\n+\treturn SSE_CLASS_P (regclass) ? regclass : NO_REGS;\n+    }\n \n   /* Generally when we see PLUS here, it's the function invariant\n      (plus soft-fp const_int).  Which can only be computed into general"}, {"sha": "46fdd6e1088ffacf2567d06eaee6a3c8abd010cb", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1011a41efd121ede2f427c1dffd6ac62f92962e/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1011a41efd121ede2f427c1dffd6ac62f92962e/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=d1011a41efd121ede2f427c1dffd6ac62f92962e", "patch": "@@ -1279,6 +1279,8 @@ enum reg_class\n   reg_class_subset_p ((CLASS), FLOAT_REGS)\n #define SSE_CLASS_P(CLASS) \\\n   reg_class_subset_p ((CLASS), ALL_SSE_REGS)\n+#define INT_SSE_CLASS_P(CLASS) \\\n+  reg_class_subset_p ((CLASS), INT_SSE_REGS)\n #define MMX_CLASS_P(CLASS) \\\n   ((CLASS) == MMX_REGS)\n #define MASK_CLASS_P(CLASS) \\"}, {"sha": "7ecd71ba8c16d5d46a896b477456b8a88b84558b", "filename": "gcc/testsuite/gcc.target/i386/pr95740.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1011a41efd121ede2f427c1dffd6ac62f92962e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95740.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1011a41efd121ede2f427c1dffd6ac62f92962e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95740.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95740.c?ref=d1011a41efd121ede2f427c1dffd6ac62f92962e", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-msse2 -O2 -mtune=generic -mtune-ctrl=use_incdec -masm=att -mfpmath=sse\" } */\n+/* { dg-final { scan-assembler-times {(?n)movd[\\t ]*%xmm0.*%eax} 1 } } */\n+/* { dg-final { scan-assembler-times {(?n)incl[\\t ]*%eax} 1 } } */\n+/* { dg-final { scan-assembler-times {(?n)movq[\\t ]*%xmm0.*%rax} 1 } } */\n+/* { dg-final { scan-assembler-times {(?n)incq[\\t ]*%rax} 1 } } */\n+\n+int\n+foo (float a)\n+{\n+  union{\n+    int b;\n+    float a;}u;\n+  u.a = a;\n+  return u.b + 1;\n+}\n+\n+long long\n+foo1 (double a)\n+{\n+  union{\n+    long long b;\n+    double a;}u;\n+  u.a = a;\n+  return u.b + 1;\n+}"}]}