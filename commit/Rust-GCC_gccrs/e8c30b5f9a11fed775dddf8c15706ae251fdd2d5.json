{"sha": "e8c30b5f9a11fed775dddf8c15706ae251fdd2d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThjMzBiNWY5YTExZmVkNzc1ZGRkZjhjMTU3MDZhZTI1MWZkZDJkNQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-02-12T23:39:51Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-02-12T23:39:51Z"}, "message": "[multiple changes]\n\n2007-02-13  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/30554\n\t* module.c (read_module): Set pointer_info to referenced if the\n\tsymbol has no namespace.\n\n2007-02-12  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/30554\n\t* gfortran.dg/used_dummy_types_7.f90: New test.\n\nFrom-SVN: r121865", "tree": {"sha": "80aed157475351f59b91ab984cb2a2c6db54191f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80aed157475351f59b91ab984cb2a2c6db54191f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8c30b5f9a11fed775dddf8c15706ae251fdd2d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8c30b5f9a11fed775dddf8c15706ae251fdd2d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8c30b5f9a11fed775dddf8c15706ae251fdd2d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8c30b5f9a11fed775dddf8c15706ae251fdd2d5/comments", "author": null, "committer": null, "parents": [{"sha": "8ea6dfaef4e67c1a505b1d7760a4fbac5f57bc36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ea6dfaef4e67c1a505b1d7760a4fbac5f57bc36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ea6dfaef4e67c1a505b1d7760a4fbac5f57bc36"}], "stats": {"total": 71, "additions": 65, "deletions": 6}, "files": [{"sha": "34a470d6c128aa4864a44eccb813247e0bbd2cf1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8c30b5f9a11fed775dddf8c15706ae251fdd2d5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8c30b5f9a11fed775dddf8c15706ae251fdd2d5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e8c30b5f9a11fed775dddf8c15706ae251fdd2d5", "patch": "@@ -1,3 +1,9 @@\n+2007-02-13  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/30554\n+\t* module.c (read_module): Set pointer_info to referenced if the\n+\tsymbol has no namespace.\n+\n 2007-02-12  Nick Clifton  <nickc@redhat.com>\n \n \t* lang.opt:  Add Warning attribute to warning options."}, {"sha": "efb27e33fd34d215eb2dee1b941f21121c350966", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8c30b5f9a11fed775dddf8c15706ae251fdd2d5/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8c30b5f9a11fed775dddf8c15706ae251fdd2d5/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=e8c30b5f9a11fed775dddf8c15706ae251fdd2d5", "patch": "@@ -3339,7 +3339,7 @@ read_module (void)\n   char name[GFC_MAX_SYMBOL_LEN + 1];\n   gfc_intrinsic_op i;\n   int ambiguous, j, nuse, symbol;\n-  pointer_info *info;\n+  pointer_info *info, *q;\n   gfc_use_rename *u;\n   gfc_symtree *st;\n   gfc_symbol *sym;\n@@ -3390,6 +3390,16 @@ read_module (void)\n       info->u.rsym.state = USED;\n       info->u.rsym.sym = sym;\n \n+      /* Some symbols do not have a namespace (eg. formal arguments),\n+\t so the automatic \"unique symtree\" mechanism must be suppressed\n+\t by marking them as referenced.  */\n+      q = get_integer (info->u.rsym.ns);\n+      if (q->u.pointer == NULL)\n+\t{\n+\t  info->u.rsym.referenced = 1;\n+\t  continue;\n+\t}\n+\n       /* If possible recycle the symtree that references the symbol.\n \t If a symtree is not found and the module does not import one,\n \t a unique-name symtree is found by read_cleanup.  */"}, {"sha": "12555562b89413f533d6565caf273d32f4652f31", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8c30b5f9a11fed775dddf8c15706ae251fdd2d5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8c30b5f9a11fed775dddf8c15706ae251fdd2d5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e8c30b5f9a11fed775dddf8c15706ae251fdd2d5", "patch": "@@ -1,9 +1,7 @@\n-2007-02-12  Simon Martin  <simartin@users.sourceforge.net>\n+2007-02-13  Paul Thomas  <pault@gcc.gnu.org>\n \n-\tPR c++/14622\n-\t* g++.dg/template/instantiate9.C: New test.\n-\t* g++.old-deja/g++.pt/instantiate12.C: Fixed type mismatches in explicit\n-\tinstantiations.\n+\tPR fortran/30554\n+\t* gfortran.dg/used_dummy_types_7.f90: New test..\n \n 2007-02-12  Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "9e591b23ea385efb10011de8870c9ad8ec75e882", "filename": "gcc/testsuite/gfortran.dg/used_dummy_types_7.f90", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8c30b5f9a11fed775dddf8c15706ae251fdd2d5/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_dummy_types_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8c30b5f9a11fed775dddf8c15706ae251fdd2d5/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_dummy_types_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_dummy_types_7.f90?ref=e8c30b5f9a11fed775dddf8c15706ae251fdd2d5", "patch": "@@ -0,0 +1,45 @@\n+! { dg-do compile }\n+! This tests a patch for a regression caused by the second part of\n+! the fix for PR30554.  The linked derived types dummy_atom and\n+! dummy_atom_list caused a segment fault because they do not have\n+! a namespace.\n+!\n+! Contributed by Daniel Franke <franke.daniel@gmail.com>\n+! \n+MODULE types\n+TYPE :: dummy_atom_list\n+  TYPE(dummy_atom), DIMENSION(:), POINTER :: table => null()\n+END TYPE\n+\n+TYPE :: dummy_atom\n+  TYPE(dummy_atom_private), POINTER :: p => null()\n+END TYPE\n+\n+TYPE :: dummy_atom_private\n+  INTEGER                     :: id\n+END TYPE\n+END MODULE\n+\n+MODULE atom\n+USE types, ONLY: dummy_atom\n+INTERFACE\n+  SUBROUTINE dummy_atom_insert_symmetry_mate(this, other)\n+    USE types, ONLY: dummy_atom\n+    TYPE(dummy_atom), INTENT(inout) :: this\n+    TYPE(dummy_atom), INTENT(in)    :: other\n+  END SUBROUTINE\n+END INTERFACE\n+END MODULE\n+\n+MODULE list\n+INTERFACE\n+  SUBROUTINE dummy_atom_list_insert(this, atom)\n+    USE types, ONLY: dummy_atom_list\n+    USE atom, ONLY: dummy_atom\n+\n+    TYPE(dummy_atom_list), INTENT(inout) :: this\n+    TYPE(dummy_atom), INTENT(in)         :: atom\n+  END SUBROUTINE\n+END INTERFACE\n+END MODULE\n+! { dg-final { cleanup-modules \"atom types list\" } }"}]}