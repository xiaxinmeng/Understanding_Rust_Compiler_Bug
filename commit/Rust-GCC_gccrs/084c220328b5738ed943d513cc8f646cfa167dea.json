{"sha": "084c220328b5738ed943d513cc8f646cfa167dea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg0YzIyMDMyOGI1NzM4ZWQ5NDNkNTEzY2M4ZjY0NmNmYTE2N2RlYQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-01-21T16:13:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-21T16:13:56Z"}, "message": "sem_prag.adb (Analyze_Pragma, [...]): Fix problem with pragma or aspect that applies to package spec or subprogram spec.\n\n2014-01-21  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma, case SPARK_Mode): Fix problem\n\twith pragma or aspect that applies to package spec or subprogram\n\tspec.\n\nFrom-SVN: r206885", "tree": {"sha": "305c53c5ee27e210d3e0813f8806a082260595c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/305c53c5ee27e210d3e0813f8806a082260595c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/084c220328b5738ed943d513cc8f646cfa167dea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/084c220328b5738ed943d513cc8f646cfa167dea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/084c220328b5738ed943d513cc8f646cfa167dea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/084c220328b5738ed943d513cc8f646cfa167dea/comments", "author": null, "committer": null, "parents": [{"sha": "d2d21de9dc8d2fb57be7c3c95f48679f19673702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2d21de9dc8d2fb57be7c3c95f48679f19673702", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2d21de9dc8d2fb57be7c3c95f48679f19673702"}], "stats": {"total": 60, "additions": 34, "deletions": 26}, "files": [{"sha": "dacb96845f4f98f6c9d78d007e4d449797b7d160", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084c220328b5738ed943d513cc8f646cfa167dea/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084c220328b5738ed943d513cc8f646cfa167dea/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=084c220328b5738ed943d513cc8f646cfa167dea", "patch": "@@ -1,3 +1,9 @@\n+2014-01-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma, case SPARK_Mode): Fix problem\n+\twith pragma or aspect that applies to package spec or subprogram\n+\tspec.\n+\n 2014-01-21  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_aggr.adb: Minor reformatting."}, {"sha": "0633f72406df43e52f2ed636dd9e25fa2e8238ac", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084c220328b5738ed943d513cc8f646cfa167dea/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084c220328b5738ed943d513cc8f646cfa167dea/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=084c220328b5738ed943d513cc8f646cfa167dea", "patch": "@@ -18055,7 +18055,7 @@ package body Sem_Prag is\n \n          --  pragma SPARK_Mode [(On | Off | Auto)];\n \n-         when Pragma_SPARK_Mode => SPARK_Mod : declare\n+         when Pragma_SPARK_Mode => Do_SPARK_Mode : declare\n             Body_Id : Entity_Id;\n             Context : Node_Id;\n             Mode    : Name_Id;\n@@ -18070,8 +18070,7 @@ package body Sem_Prag is\n             --  verify that the new mode is less restrictive than the old mode.\n             --  For example, if the old mode is ON, then the new mode can be\n             --  anything. But if the old mode is OFF, then the only allowed\n-            --  new mode is also OFF. If there is no error, this routine also\n-            --  sets SPARK_Mode_Pragma to N, and SPARK_Mode to Mode_Id.\n+            --  new mode is also OFF.\n \n             function Get_SPARK_Mode_Name (Id : SPARK_Mode_Type) return Name_Id;\n             --  Convert a value of type SPARK_Mode_Type to corresponding name\n@@ -18085,29 +18084,20 @@ package body Sem_Prag is\n                if Present (Old_Pragma) then\n                   pragma Assert (Nkind (Old_Pragma) = N_Pragma);\n \n-                  declare\n-                     Gov_M : constant SPARK_Mode_Type :=\n-                                Get_SPARK_Mode_From_Pragma (Old_Pragma);\n-\n-                  begin\n-                     --  New mode less restrictive than the established mode\n+                  --  New mode less restrictive than the established mode\n \n-                     if Gov_M < Mode_Id then\n-                        Error_Msg_Name_1 := Mode;\n-                        Error_Msg_N (\"cannot define 'S'P'A'R'K mode %\", Arg1);\n+                  if Get_SPARK_Mode_From_Pragma (Old_Pragma) < Mode_Id then\n+                     Error_Msg_Name_1 := Mode;\n+                     Error_Msg_N (\"cannot define 'S'P'A'R'K mode %\", Arg1);\n \n-                        Error_Msg_Name_1 := Get_SPARK_Mode_Name (SPARK_Mode);\n-                        Error_Msg_Sloc   := Sloc (SPARK_Mode_Pragma);\n-                        Error_Msg_N\n-                          (\"\\mode is less restrictive than mode \"\n-                           & \"% defined #\", Arg1);\n-                        raise Pragma_Exit;\n-                     end if;\n-                  end;\n+                     Error_Msg_Name_1 := Get_SPARK_Mode_Name (SPARK_Mode);\n+                     Error_Msg_Sloc   := Sloc (SPARK_Mode_Pragma);\n+                     Error_Msg_N\n+                       (\"\\mode is less restrictive than mode \"\n+                        & \"% defined #\", Arg1);\n+                     raise Pragma_Exit;\n+                  end if;\n                end if;\n-\n-               SPARK_Mode_Pragma := N;\n-               SPARK_Mode := Mode_Id;\n             end Check_Pragma_Conformance;\n \n             -------------------------\n@@ -18132,7 +18122,7 @@ package body Sem_Prag is\n                end if;\n             end Get_SPARK_Mode_Name;\n \n-         --  Start of processing for SPARK_Mod\n+         --  Start of processing for Do_SPARK_Mode\n \n          begin\n             GNAT_Pragma;\n@@ -18177,7 +18167,7 @@ package body Sem_Prag is\n             --  The pragma applies to a [library unit] subprogram or package\n \n             else\n-               --  Mode \"Auto\" cannot be used in nested subprograms or packages\n+               --  Mode \"Auto\" can only be used in a configuration pragma\n \n                if Mode_Id = Auto then\n                   Error_Pragma_Arg\n@@ -18283,13 +18273,19 @@ package body Sem_Prag is\n \n                   if List_Containing (N) = Private_Declarations (Context) then\n                      Check_Pragma_Conformance (SPARK_Aux_Pragma (Spec_Id));\n+                     SPARK_Mode_Pragma := N;\n+                     SPARK_Mode := Mode_Id;\n+\n                      Set_SPARK_Aux_Pragma           (Spec_Id, N);\n                      Set_SPARK_Aux_Pragma_Inherited (Spec_Id, False);\n \n                   --  Pragma applies to public part\n \n                   else\n                      Check_Pragma_Conformance (SPARK_Pragma (Spec_Id));\n+                     SPARK_Mode_Pragma := N;\n+                     SPARK_Mode := Mode_Id;\n+\n                      Set_SPARK_Pragma               (Spec_Id, N);\n                      Set_SPARK_Pragma_Inherited     (Spec_Id, False);\n                      Set_SPARK_Aux_Pragma           (Spec_Id, N);\n@@ -18318,6 +18314,8 @@ package body Sem_Prag is\n                   Spec_Id := Corresponding_Spec (Context);\n                   Body_Id := Defining_Entity (Context);\n                   Check_Pragma_Conformance (SPARK_Pragma (Body_Id));\n+                  SPARK_Mode_Pragma := N;\n+                  SPARK_Mode := Mode_Id;\n \n                   Set_SPARK_Pragma               (Body_Id, N);\n                   Set_SPARK_Pragma_Inherited     (Body_Id, False);\n@@ -18334,6 +18332,8 @@ package body Sem_Prag is\n                   Context := Specification (Context);\n                   Body_Id := Defining_Entity (Context);\n                   Check_Pragma_Conformance (SPARK_Pragma (Body_Id));\n+                  SPARK_Mode_Pragma := N;\n+                  SPARK_Mode := Mode_Id;\n \n                   Set_SPARK_Pragma           (Body_Id, N);\n                   Set_SPARK_Pragma_Inherited (Body_Id, False);\n@@ -18351,6 +18351,8 @@ package body Sem_Prag is\n                   Spec_Id := Corresponding_Spec (Context);\n                   Body_Id := Defining_Unit_Name (Context);\n                   Check_Pragma_Conformance (SPARK_Aux_Pragma (Body_Id));\n+                  SPARK_Mode_Pragma := N;\n+                  SPARK_Mode := Mode_Id;\n \n                   Set_SPARK_Aux_Pragma           (Body_Id, N);\n                   Set_SPARK_Aux_Pragma_Inherited (Body_Id, False);\n@@ -18361,7 +18363,7 @@ package body Sem_Prag is\n                   Pragma_Misplaced;\n                end if;\n             end if;\n-         end SPARK_Mod;\n+         end Do_SPARK_Mode;\n \n          --------------------------------\n          -- Static_Elaboration_Desired --"}]}