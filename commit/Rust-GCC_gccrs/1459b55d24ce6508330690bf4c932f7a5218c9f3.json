{"sha": "1459b55d24ce6508330690bf4c932f7a5218c9f3", "node_id": "C_kwDOANBUbNoAKDE0NTliNTVkMjRjZTY1MDgzMzA2OTBiZjRjOTMyZjdhNTIxOGM5ZjM", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-05-12T20:46:40Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-06-10T15:08:57Z"}, "message": "libgomp nvptx plugin: Remove '--with-cuda-driver=[...]' etc. configuration option\n\nThat means, exposing to the user only the '--without-cuda-driver' behavior:\nincluding the GCC-shipped 'include/cuda/cuda.h' (not system <cuda.h>), and\n'dlopen'ing the CUDA Driver library (not linking it).\n\nFor development purposes, the libgomp nvptx plugin developer may still manually\noverride that, to get the previous '--with-cuda-driver' behavior.\n\n\tlibgomp/\n\t* plugin/Makefrag.am: Evaluate 'if PLUGIN_NVPTX_DYNAMIC' to true.\n\t* plugin/configfrag.ac (--with-cuda-driver)\n\t(--with-cuda-driver-include, --with-cuda-driver-lib)\n\t(CUDA_DRIVER_INCLUDE, CUDA_DRIVER_LIB, PLUGIN_NVPTX_CPPFLAGS)\n\t(PLUGIN_NVPTX_LDFLAGS, PLUGIN_NVPTX_LIBS, PLUGIN_NVPTX_DYNAMIC):\n\tRemove.\n\t* testsuite/libgomp-test-support.exp.in (cuda_driver_include)\n\t(cuda_driver_lib): Remove.\n\t* testsuite/lib/libgomp.exp (libgomp_init): Don't consider these.\n\t* Makefile.in: Regenerate.\n\t* configure: Likewise.\n\t* testsuite/Makefile.in: Likewise.", "tree": {"sha": "aaecd91842f169775b3c6204cbe1d6a0c27862de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aaecd91842f169775b3c6204cbe1d6a0c27862de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1459b55d24ce6508330690bf4c932f7a5218c9f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1459b55d24ce6508330690bf4c932f7a5218c9f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1459b55d24ce6508330690bf4c932f7a5218c9f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1459b55d24ce6508330690bf4c932f7a5218c9f3/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "671970a5621e18e7079b4ca113e56434c858db66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/671970a5621e18e7079b4ca113e56434c858db66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/671970a5621e18e7079b4ca113e56434c858db66"}], "stats": {"total": 329, "additions": 37, "deletions": 292}, "files": [{"sha": "8f6255f2d706677a7645eb61190bd1d1c6b1b43b", "filename": "libgomp/Makefile.in", "status": "modified", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1459b55d24ce6508330690bf4c932f7a5218c9f3/libgomp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1459b55d24ce6508330690bf4c932f7a5218c9f3/libgomp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FMakefile.in?ref=1459b55d24ce6508330690bf4c932f7a5218c9f3", "patch": "@@ -119,18 +119,8 @@ build_triplet = @build@\n host_triplet = @host@\n target_triplet = @target@\n @PLUGIN_NVPTX_TRUE@am__append_1 = libgomp-plugin-nvptx.la\n-\n-# Including the GCC-shipped 'include/cuda/cuda.h' vs. system <cuda.h>.\n-@PLUGIN_NVPTX_DYNAMIC_FALSE@@PLUGIN_NVPTX_TRUE@am__append_2 = -DPLUGIN_NVPTX_INCLUDE_SYSTEM_CUDA_H \\\n-@PLUGIN_NVPTX_DYNAMIC_FALSE@@PLUGIN_NVPTX_TRUE@\t$(PLUGIN_NVPTX_CPPFLAGS) \\\n-@PLUGIN_NVPTX_DYNAMIC_FALSE@@PLUGIN_NVPTX_TRUE@\t-DPLUGIN_NVPTX_LINK_LIBCUDA\n-\n-# 'dlopen'ing the CUDA Driver library vs. linking it.\n-@PLUGIN_NVPTX_DYNAMIC_TRUE@@PLUGIN_NVPTX_TRUE@am__append_3 = $(DL_LIBS)\n-@PLUGIN_NVPTX_DYNAMIC_FALSE@@PLUGIN_NVPTX_TRUE@am__append_4 = $(PLUGIN_NVPTX_LDFLAGS)\n-@PLUGIN_NVPTX_DYNAMIC_FALSE@@PLUGIN_NVPTX_TRUE@am__append_5 = $(PLUGIN_NVPTX_LIBS)\n-@PLUGIN_GCN_TRUE@am__append_6 = libgomp-plugin-gcn.la\n-@USE_FORTRAN_TRUE@am__append_7 = openacc.f90\n+@PLUGIN_GCN_TRUE@am__append_2 = libgomp-plugin-gcn.la\n+@USE_FORTRAN_TRUE@am__append_3 = openacc.f90\n subdir = .\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n@@ -207,10 +197,8 @@ libgomp_plugin_gcn_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC \\\n \t$(libgomp_plugin_gcn_la_LDFLAGS) $(LDFLAGS) -o $@\n @PLUGIN_GCN_TRUE@am_libgomp_plugin_gcn_la_rpath = -rpath \\\n @PLUGIN_GCN_TRUE@\t$(toolexeclibdir)\n-@PLUGIN_NVPTX_DYNAMIC_TRUE@@PLUGIN_NVPTX_TRUE@am__DEPENDENCIES_2 = $(am__DEPENDENCIES_1)\n-@PLUGIN_NVPTX_DYNAMIC_FALSE@@PLUGIN_NVPTX_TRUE@am__DEPENDENCIES_3 = $(am__DEPENDENCIES_1)\n @PLUGIN_NVPTX_TRUE@libgomp_plugin_nvptx_la_DEPENDENCIES = libgomp.la \\\n-@PLUGIN_NVPTX_TRUE@\t$(am__DEPENDENCIES_2) $(am__DEPENDENCIES_3)\n+@PLUGIN_NVPTX_TRUE@\t$(am__DEPENDENCIES_1)\n @PLUGIN_NVPTX_TRUE@am_libgomp_plugin_nvptx_la_OBJECTS =  \\\n @PLUGIN_NVPTX_TRUE@\tlibgomp_plugin_nvptx_la-plugin-nvptx.lo\n libgomp_plugin_nvptx_la_OBJECTS =  \\\n@@ -380,8 +368,6 @@ CFLAGS = @CFLAGS@\n CPP = @CPP@\n CPPFLAGS = @CPPFLAGS@\n CPU_COUNT = @CPU_COUNT@\n-CUDA_DRIVER_INCLUDE = @CUDA_DRIVER_INCLUDE@\n-CUDA_DRIVER_LIB = @CUDA_DRIVER_LIB@\n CYGPATH_W = @CYGPATH_W@\n DEFS = @DEFS@\n DEPDIR = @DEPDIR@\n@@ -443,9 +429,6 @@ PACKAGE_URL = @PACKAGE_URL@\n PACKAGE_VERSION = @PACKAGE_VERSION@\n PATH_SEPARATOR = @PATH_SEPARATOR@\n PERL = @PERL@\n-PLUGIN_NVPTX_CPPFLAGS = @PLUGIN_NVPTX_CPPFLAGS@\n-PLUGIN_NVPTX_LDFLAGS = @PLUGIN_NVPTX_LDFLAGS@\n-PLUGIN_NVPTX_LIBS = @PLUGIN_NVPTX_LIBS@\n RANLIB = @RANLIB@\n SECTION_LDFLAGS = @SECTION_LDFLAGS@\n SED = @SED@\n@@ -538,7 +521,7 @@ libsubincludedir = $(libdir)/gcc/$(target_alias)/$(gcc_version)/include\n AM_CPPFLAGS = $(addprefix -I, $(search_path))\n AM_CFLAGS = $(XCFLAGS)\n AM_LDFLAGS = $(XLDFLAGS) $(SECTION_LDFLAGS) $(OPT_LDFLAGS)\n-toolexeclib_LTLIBRARIES = libgomp.la $(am__append_1) $(am__append_6)\n+toolexeclib_LTLIBRARIES = libgomp.la $(am__append_1) $(am__append_2)\n nodist_toolexeclib_HEADERS = libgomp.spec\n \n # -Wc is only a libtool option.\n@@ -565,19 +548,30 @@ libgomp_la_SOURCES = alloc.c atomic.c barrier.c critical.c env.c \\\n \toacc-parallel.c oacc-host.c oacc-init.c oacc-mem.c \\\n \toacc-async.c oacc-plugin.c oacc-cuda.c priority_queue.c \\\n \taffinity-fmt.c teams.c allocator.c oacc-profiling.c \\\n-\toacc-target.c $(am__append_7)\n+\toacc-target.c $(am__append_3)\n \n # Nvidia PTX OpenACC plugin.\n @PLUGIN_NVPTX_TRUE@libgomp_plugin_nvptx_version_info = -version-info $(libtool_VERSION)\n @PLUGIN_NVPTX_TRUE@libgomp_plugin_nvptx_la_SOURCES = plugin/plugin-nvptx.c\n-@PLUGIN_NVPTX_TRUE@libgomp_plugin_nvptx_la_CPPFLAGS = $(AM_CPPFLAGS) \\\n-@PLUGIN_NVPTX_TRUE@\t$(am__append_2)\n-@PLUGIN_NVPTX_TRUE@libgomp_plugin_nvptx_la_LDFLAGS =  \\\n-@PLUGIN_NVPTX_TRUE@\t$(libgomp_plugin_nvptx_version_info) \\\n-@PLUGIN_NVPTX_TRUE@\t$(lt_host_flags) $(am__append_4)\n+@PLUGIN_NVPTX_TRUE@libgomp_plugin_nvptx_la_CPPFLAGS = $(AM_CPPFLAGS)\n+@PLUGIN_NVPTX_TRUE@libgomp_plugin_nvptx_la_LDFLAGS = $(libgomp_plugin_nvptx_version_info) \\\n+@PLUGIN_NVPTX_TRUE@\t$(lt_host_flags)\n+\n+\n+# libgomp nvptx plugin developer's section.\n+#\n+# Including the GCC-shipped 'include/cuda/cuda.h' (default) vs. system <cuda.h>:\n+#libgomp_plugin_nvptx_la_CPPFLAGS += -DPLUGIN_NVPTX_INCLUDE_SYSTEM_CUDA_H\n+#libgomp_plugin_nvptx_la_CPPFLAGS += -I[CUDA]/include\n+#\n+# 'dlopen'ing the CUDA Driver library (default):\n @PLUGIN_NVPTX_TRUE@libgomp_plugin_nvptx_la_LIBADD = libgomp.la \\\n-@PLUGIN_NVPTX_TRUE@\t$(am__append_3) $(am__append_5)\n+@PLUGIN_NVPTX_TRUE@\t$(DL_LIBS)\n @PLUGIN_NVPTX_TRUE@libgomp_plugin_nvptx_la_LIBTOOLFLAGS = --tag=disable-static\n+# ... vs. linking it:\n+#libgomp_plugin_nvptx_la_CPPFLAGS += -DPLUGIN_NVPTX_LINK_LIBCUDA\n+#libgomp_plugin_nvptx_la_LDFLAGS += -L[CUDA]/lib64/stubs\n+#libgomp_plugin_nvptx_la_LIBADD += -lcuda\n \n # AMD GCN plugin\n @PLUGIN_GCN_TRUE@libgomp_plugin_gcn_version_info = -version-info $(libtool_VERSION)"}, {"sha": "89f14e441f2e6619fadd8bf7100679bd2cb0b95e", "filename": "libgomp/configure", "status": "modified", "additions": 3, "deletions": 140, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1459b55d24ce6508330690bf4c932f7a5218c9f3/libgomp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1459b55d24ce6508330690bf4c932f7a5218c9f3/libgomp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure?ref=1459b55d24ce6508330690bf4c932f7a5218c9f3", "patch": "@@ -667,19 +667,12 @@ OPT_LDFLAGS\n SECTION_LDFLAGS\n PLUGIN_GCN_FALSE\n PLUGIN_GCN_TRUE\n-PLUGIN_NVPTX_DYNAMIC_FALSE\n-PLUGIN_NVPTX_DYNAMIC_TRUE\n PLUGIN_NVPTX_FALSE\n PLUGIN_NVPTX_TRUE\n offload_additional_lib_paths\n offload_additional_options\n offload_targets\n offload_plugins\n-PLUGIN_NVPTX_LIBS\n-PLUGIN_NVPTX_LDFLAGS\n-PLUGIN_NVPTX_CPPFLAGS\n-CUDA_DRIVER_LIB\n-CUDA_DRIVER_INCLUDE\n DL_LIBS\n libtool_VERSION\n ac_ct_FC\n@@ -829,9 +822,6 @@ enable_fast_install\n with_gnu_ld\n enable_libtool_lock\n enable_maintainer_mode\n-with_cuda_driver\n-with_cuda_driver_include\n-with_cuda_driver_lib\n enable_linux_futex\n enable_tls\n enable_symvers\n@@ -1504,16 +1494,6 @@ Optional Packages:\n   --with-pic              try to use only PIC/non-PIC objects [default=use\n                           both]\n   --with-gnu-ld           assume the C compiler uses GNU ld [default=no]\n-  --with-cuda-driver=PATH specify prefix directory for installed CUDA driver\n-                          package. Equivalent to\n-                          --with-cuda-driver-include=PATH/include plus\n-                          --with-cuda-driver-lib=PATH/lib\n-  --with-cuda-driver-include=PATH\n-                          specify directory for installed CUDA driver include\n-                          files\n-  --with-cuda-driver-lib=PATH\n-                          specify directory for the installed CUDA driver\n-                          library\n   --with-gcc-major-version-only\n                           use only GCC major number in filesystem paths\n \n@@ -11414,7 +11394,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11417 \"configure\"\n+#line 11397 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11520,7 +11500,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11523 \"configure\"\n+#line 11503 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15158,67 +15138,8 @@ done\n \n \n \n-# Look for the CUDA driver package.\n-CUDA_DRIVER_INCLUDE=\n-CUDA_DRIVER_LIB=\n-\n-\n-CUDA_DRIVER_CPPFLAGS=\n-CUDA_DRIVER_LDFLAGS=\n-\n-# Check whether --with-cuda-driver was given.\n-if test \"${with_cuda_driver+set}\" = set; then :\n-  withval=$with_cuda_driver;\n-fi\n-\n-\n-# Check whether --with-cuda-driver-include was given.\n-if test \"${with_cuda_driver_include+set}\" = set; then :\n-  withval=$with_cuda_driver_include;\n-fi\n-\n-\n-# Check whether --with-cuda-driver-lib was given.\n-if test \"${with_cuda_driver_lib+set}\" = set; then :\n-  withval=$with_cuda_driver_lib;\n-fi\n-\n-case \"x$with_cuda_driver\" in\n-  x) ;;\n-  xno)\n-    CUDA_DRIVER_INCLUDE=no\n-    CUDA_DRIVER_LIB=no\n-    ;;\n-  *) CUDA_DRIVER_INCLUDE=$with_cuda_driver/include\n-     CUDA_DRIVER_LIB=$with_cuda_driver/lib\n-     ;;\n-esac\n-if test \"x$with_cuda_driver_include\" != x; then\n-  CUDA_DRIVER_INCLUDE=$with_cuda_driver_include\n-fi\n-if test \"x$with_cuda_driver_lib\" != x; then\n-  CUDA_DRIVER_LIB=$with_cuda_driver_lib\n-fi\n-if test \"x$CUDA_DRIVER_INCLUDE\" != x \\\n-   && test \"x$CUDA_DRIVER_INCLUDE\" != xno; then\n-  CUDA_DRIVER_CPPFLAGS=-I$CUDA_DRIVER_INCLUDE\n-fi\n-if test \"x$CUDA_DRIVER_LIB\" != x \\\n-   && test \"x$CUDA_DRIVER_LIB\" != xno; then\n-  CUDA_DRIVER_LDFLAGS=-L$CUDA_DRIVER_LIB\n-fi\n-\n PLUGIN_NVPTX=0\n-PLUGIN_NVPTX_CPPFLAGS=\n-PLUGIN_NVPTX_LDFLAGS=\n-PLUGIN_NVPTX_LIBS=\n-PLUGIN_NVPTX_DYNAMIC=0\n-\n-\n-\n-\n PLUGIN_GCN=0\n-\n # Parse '--enable-offload-targets', figure out the corresponding libgomp\n # plugins, and configure to find the corresponding offload compilers.\n # 'offload_plugins' and 'offload_targets' will be populated in the same order.\n@@ -15250,53 +15171,7 @@ if test x\"$enable_offload_targets\" != x; then\n \t\t;;\n \t      *)\n \t\ttgt_plugin=nvptx\n-\t\tPLUGIN_NVPTX=$tgt\n-\t\tif test \"x$CUDA_DRIVER_LIB\" != xno \\\n-\t\t   && test \"x$CUDA_DRIVER_LIB\" != xno; then\n-\t\t  PLUGIN_NVPTX_CPPFLAGS=$CUDA_DRIVER_CPPFLAGS\n-\t\t  PLUGIN_NVPTX_LDFLAGS=$CUDA_DRIVER_LDFLAGS\n-\t\t  PLUGIN_NVPTX_LIBS='-lcuda'\n-\n-\t\t  PLUGIN_NVPTX_save_CPPFLAGS=$CPPFLAGS\n-\t\t  CPPFLAGS=\"$PLUGIN_NVPTX_CPPFLAGS $CPPFLAGS\"\n-\t\t  PLUGIN_NVPTX_save_LDFLAGS=$LDFLAGS\n-\t\t  LDFLAGS=\"$PLUGIN_NVPTX_LDFLAGS $LDFLAGS\"\n-\t\t  PLUGIN_NVPTX_save_LIBS=$LIBS\n-\t\t  LIBS=\"$PLUGIN_NVPTX_LIBS $LIBS\"\n-\t\t  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-#include \"cuda.h\"\n-int\n-main ()\n-{\n-CUresult r = cuCtxPushCurrent (NULL);\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-if ac_fn_c_try_link \"$LINENO\"; then :\n-  PLUGIN_NVPTX=1\n-fi\n-rm -f core conftest.err conftest.$ac_objext \\\n-    conftest$ac_exeext conftest.$ac_ext\n-\t\t  CPPFLAGS=$PLUGIN_NVPTX_save_CPPFLAGS\n-\t\t  LDFLAGS=$PLUGIN_NVPTX_save_LDFLAGS\n-\t\t  LIBS=$PLUGIN_NVPTX_save_LIBS\n-\t\tfi\n-\t\tcase $PLUGIN_NVPTX in\n-\t\t  nvptx*)\n-\t\t    if (test \"x$CUDA_DRIVER_INCLUDE\" = x \\\n-\t\t\t|| test \"x$CUDA_DRIVER_INCLUDE\" = xno) \\\n-\t\t       && (test \"x$CUDA_DRIVER_LIB\" = x \\\n-\t\t\t   || test \"x$CUDA_DRIVER_LIB\" = xno); then\n-\t\t      PLUGIN_NVPTX=1\n-\t\t      PLUGIN_NVPTX_DYNAMIC=1\n-\t\t    else\n-\t\t      PLUGIN_NVPTX=0\n-\t\t      as_fn_error $? \"CUDA driver package required for nvptx support\" \"$LINENO\" 5\n-\t\t    fi\n-\t\t    ;;\n-\t\tesac\n+\t\tPLUGIN_NVPTX=1\n \t\t;;\n \t    esac\n \t    ;;\n@@ -15362,14 +15237,6 @@ else\n   PLUGIN_NVPTX_FALSE=\n fi\n \n- if test $PLUGIN_NVPTX_DYNAMIC = 1; then\n-  PLUGIN_NVPTX_DYNAMIC_TRUE=\n-  PLUGIN_NVPTX_DYNAMIC_FALSE='#'\n-else\n-  PLUGIN_NVPTX_DYNAMIC_TRUE='#'\n-  PLUGIN_NVPTX_DYNAMIC_FALSE=\n-fi\n-\n  if test $PLUGIN_GCN = 1; then\n   PLUGIN_GCN_TRUE=\n   PLUGIN_GCN_FALSE='#'\n@@ -17137,10 +17004,6 @@ if test -z \"${PLUGIN_NVPTX_TRUE}\" && test -z \"${PLUGIN_NVPTX_FALSE}\"; then\n   as_fn_error $? \"conditional \\\"PLUGIN_NVPTX\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n-if test -z \"${PLUGIN_NVPTX_DYNAMIC_TRUE}\" && test -z \"${PLUGIN_NVPTX_DYNAMIC_FALSE}\"; then\n-  as_fn_error $? \"conditional \\\"PLUGIN_NVPTX_DYNAMIC\\\" was never defined.\n-Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n-fi\n if test -z \"${PLUGIN_GCN_TRUE}\" && test -z \"${PLUGIN_GCN_FALSE}\"; then\n   as_fn_error $? \"conditional \\\"PLUGIN_GCN\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"}, {"sha": "5aad9ab5d8bc81d5b9829dcfe73019570f366ad6", "filename": "libgomp/plugin/Makefrag.am", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1459b55d24ce6508330690bf4c932f7a5218c9f3/libgomp%2Fplugin%2FMakefrag.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1459b55d24ce6508330690bf4c932f7a5218c9f3/libgomp%2Fplugin%2FMakefrag.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2FMakefrag.am?ref=1459b55d24ce6508330690bf4c932f7a5218c9f3", "patch": "@@ -39,21 +39,18 @@ libgomp_plugin_nvptx_la_LDFLAGS = $(libgomp_plugin_nvptx_version_info) \\\n libgomp_plugin_nvptx_la_LIBADD = libgomp.la\n libgomp_plugin_nvptx_la_LIBTOOLFLAGS = --tag=disable-static\n \n-# Including the GCC-shipped 'include/cuda/cuda.h' vs. system <cuda.h>.\n-if PLUGIN_NVPTX_DYNAMIC\n-else\n-libgomp_plugin_nvptx_la_CPPFLAGS += -DPLUGIN_NVPTX_INCLUDE_SYSTEM_CUDA_H\n-libgomp_plugin_nvptx_la_CPPFLAGS += $(PLUGIN_NVPTX_CPPFLAGS)\n-endif\n-\n-# 'dlopen'ing the CUDA Driver library vs. linking it.\n-if PLUGIN_NVPTX_DYNAMIC\n+# libgomp nvptx plugin developer's section.\n+#\n+# Including the GCC-shipped 'include/cuda/cuda.h' (default) vs. system <cuda.h>:\n+#libgomp_plugin_nvptx_la_CPPFLAGS += -DPLUGIN_NVPTX_INCLUDE_SYSTEM_CUDA_H\n+#libgomp_plugin_nvptx_la_CPPFLAGS += -I[CUDA]/include\n+#\n+# 'dlopen'ing the CUDA Driver library (default):\n libgomp_plugin_nvptx_la_LIBADD += $(DL_LIBS)\n-else\n-libgomp_plugin_nvptx_la_CPPFLAGS += -DPLUGIN_NVPTX_LINK_LIBCUDA\n-libgomp_plugin_nvptx_la_LDFLAGS += $(PLUGIN_NVPTX_LDFLAGS)\n-libgomp_plugin_nvptx_la_LIBADD += $(PLUGIN_NVPTX_LIBS)\n-endif\n+# ... vs. linking it:\n+#libgomp_plugin_nvptx_la_CPPFLAGS += -DPLUGIN_NVPTX_LINK_LIBCUDA\n+#libgomp_plugin_nvptx_la_LDFLAGS += -L[CUDA]/lib64/stubs\n+#libgomp_plugin_nvptx_la_LIBADD += -lcuda\n endif\n \n if PLUGIN_GCN"}, {"sha": "ab03f94adac7aa2b3868eb04028559124d2fcae8", "filename": "libgomp/plugin/configfrag.ac", "status": "modified", "additions": 1, "deletions": 89, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1459b55d24ce6508330690bf4c932f7a5218c9f3/libgomp%2Fplugin%2Fconfigfrag.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1459b55d24ce6508330690bf4c932f7a5218c9f3/libgomp%2Fplugin%2Fconfigfrag.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fconfigfrag.ac?ref=1459b55d24ce6508330690bf4c932f7a5218c9f3", "patch": "@@ -40,60 +40,8 @@ AC_CHECK_HEADERS_ONCE(unistd.h)\n AC_CHECK_FUNCS_ONCE(secure_getenv __secure_getenv getuid geteuid getgid getegid)\n \n \n-# Look for the CUDA driver package.\n-CUDA_DRIVER_INCLUDE=\n-CUDA_DRIVER_LIB=\n-AC_SUBST(CUDA_DRIVER_INCLUDE)\n-AC_SUBST(CUDA_DRIVER_LIB)\n-CUDA_DRIVER_CPPFLAGS=\n-CUDA_DRIVER_LDFLAGS=\n-AC_ARG_WITH(cuda-driver,\n-\t[AS_HELP_STRING([--with-cuda-driver=PATH],\n-\t\t[specify prefix directory for installed CUDA driver package.\n-\t\t Equivalent to --with-cuda-driver-include=PATH/include\n-\t\t plus --with-cuda-driver-lib=PATH/lib])])\n-AC_ARG_WITH(cuda-driver-include,\n-\t[AS_HELP_STRING([--with-cuda-driver-include=PATH],\n-\t\t[specify directory for installed CUDA driver include files])])\n-AC_ARG_WITH(cuda-driver-lib,\n-\t[AS_HELP_STRING([--with-cuda-driver-lib=PATH],\n-\t\t[specify directory for the installed CUDA driver library])])\n-case \"x$with_cuda_driver\" in\n-  x) ;;\n-  xno)\n-    CUDA_DRIVER_INCLUDE=no\n-    CUDA_DRIVER_LIB=no\n-    ;;\n-  *) CUDA_DRIVER_INCLUDE=$with_cuda_driver/include\n-     CUDA_DRIVER_LIB=$with_cuda_driver/lib\n-     ;;\n-esac\n-if test \"x$with_cuda_driver_include\" != x; then\n-  CUDA_DRIVER_INCLUDE=$with_cuda_driver_include\n-fi\n-if test \"x$with_cuda_driver_lib\" != x; then\n-  CUDA_DRIVER_LIB=$with_cuda_driver_lib\n-fi\n-if test \"x$CUDA_DRIVER_INCLUDE\" != x \\\n-   && test \"x$CUDA_DRIVER_INCLUDE\" != xno; then\n-  CUDA_DRIVER_CPPFLAGS=-I$CUDA_DRIVER_INCLUDE\n-fi\n-if test \"x$CUDA_DRIVER_LIB\" != x \\\n-   && test \"x$CUDA_DRIVER_LIB\" != xno; then\n-  CUDA_DRIVER_LDFLAGS=-L$CUDA_DRIVER_LIB\n-fi\n-\n PLUGIN_NVPTX=0\n-PLUGIN_NVPTX_CPPFLAGS=\n-PLUGIN_NVPTX_LDFLAGS=\n-PLUGIN_NVPTX_LIBS=\n-PLUGIN_NVPTX_DYNAMIC=0\n-AC_SUBST(PLUGIN_NVPTX_CPPFLAGS)\n-AC_SUBST(PLUGIN_NVPTX_LDFLAGS)\n-AC_SUBST(PLUGIN_NVPTX_LIBS)\n-\n PLUGIN_GCN=0\n-\n # Parse '--enable-offload-targets', figure out the corresponding libgomp\n # plugins, and configure to find the corresponding offload compilers.\n # 'offload_plugins' and 'offload_targets' will be populated in the same order.\n@@ -125,42 +73,7 @@ if test x\"$enable_offload_targets\" != x; then\n \t\t;;\n \t      *)\n \t\ttgt_plugin=nvptx\n-\t\tPLUGIN_NVPTX=$tgt\n-\t\tif test \"x$CUDA_DRIVER_LIB\" != xno \\\n-\t\t   && test \"x$CUDA_DRIVER_LIB\" != xno; then\n-\t\t  PLUGIN_NVPTX_CPPFLAGS=$CUDA_DRIVER_CPPFLAGS\n-\t\t  PLUGIN_NVPTX_LDFLAGS=$CUDA_DRIVER_LDFLAGS\n-\t\t  PLUGIN_NVPTX_LIBS='-lcuda'\n-\n-\t\t  PLUGIN_NVPTX_save_CPPFLAGS=$CPPFLAGS\n-\t\t  CPPFLAGS=\"$PLUGIN_NVPTX_CPPFLAGS $CPPFLAGS\"\n-\t\t  PLUGIN_NVPTX_save_LDFLAGS=$LDFLAGS\n-\t\t  LDFLAGS=\"$PLUGIN_NVPTX_LDFLAGS $LDFLAGS\"\n-\t\t  PLUGIN_NVPTX_save_LIBS=$LIBS\n-\t\t  LIBS=\"$PLUGIN_NVPTX_LIBS $LIBS\"\n-\t\t  AC_LINK_IFELSE(\n-\t\t    [AC_LANG_PROGRAM(\n-\t\t      [#include \"cuda.h\"],\n-\t\t\t[CUresult r = cuCtxPushCurrent (NULL);])],\n-\t\t    [PLUGIN_NVPTX=1])\n-\t\t  CPPFLAGS=$PLUGIN_NVPTX_save_CPPFLAGS\n-\t\t  LDFLAGS=$PLUGIN_NVPTX_save_LDFLAGS\n-\t\t  LIBS=$PLUGIN_NVPTX_save_LIBS\n-\t\tfi\n-\t\tcase $PLUGIN_NVPTX in\n-\t\t  nvptx*)\n-\t\t    if (test \"x$CUDA_DRIVER_INCLUDE\" = x \\\n-\t\t\t|| test \"x$CUDA_DRIVER_INCLUDE\" = xno) \\\n-\t\t       && (test \"x$CUDA_DRIVER_LIB\" = x \\\n-\t\t\t   || test \"x$CUDA_DRIVER_LIB\" = xno); then\n-\t\t      PLUGIN_NVPTX=1\n-\t\t      PLUGIN_NVPTX_DYNAMIC=1\n-\t\t    else\n-\t\t      PLUGIN_NVPTX=0\n-\t\t      AC_MSG_ERROR([CUDA driver package required for nvptx support])\n-\t\t    fi\n-\t\t    ;;\n-\t\tesac\n+\t\tPLUGIN_NVPTX=1\n \t\t;;\n \t    esac\n \t    ;;\n@@ -216,5 +129,4 @@ fi\n AC_DEFINE_UNQUOTED(OFFLOAD_PLUGINS, \"$offload_plugins\",\n   [Define to offload plugins, separated by commas.])\n AM_CONDITIONAL([PLUGIN_NVPTX], [test $PLUGIN_NVPTX = 1])\n-AM_CONDITIONAL([PLUGIN_NVPTX_DYNAMIC], [test $PLUGIN_NVPTX_DYNAMIC = 1])\n AM_CONDITIONAL([PLUGIN_GCN], [test $PLUGIN_GCN = 1])"}, {"sha": "7a88f0fe5c6dc7de0326d2572bc00f42c1c174c2", "filename": "libgomp/testsuite/Makefile.in", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1459b55d24ce6508330690bf4c932f7a5218c9f3/libgomp%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1459b55d24ce6508330690bf4c932f7a5218c9f3/libgomp%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2FMakefile.in?ref=1459b55d24ce6508330690bf4c932f7a5218c9f3", "patch": "@@ -147,8 +147,6 @@ CFLAGS = @CFLAGS@\n CPP = @CPP@\n CPPFLAGS = @CPPFLAGS@\n CPU_COUNT = @CPU_COUNT@\n-CUDA_DRIVER_INCLUDE = @CUDA_DRIVER_INCLUDE@\n-CUDA_DRIVER_LIB = @CUDA_DRIVER_LIB@\n CYGPATH_W = @CYGPATH_W@\n DEFS = @DEFS@\n DEPDIR = @DEPDIR@\n@@ -210,9 +208,6 @@ PACKAGE_URL = @PACKAGE_URL@\n PACKAGE_VERSION = @PACKAGE_VERSION@\n PATH_SEPARATOR = @PATH_SEPARATOR@\n PERL = @PERL@\n-PLUGIN_NVPTX_CPPFLAGS = @PLUGIN_NVPTX_CPPFLAGS@\n-PLUGIN_NVPTX_LDFLAGS = @PLUGIN_NVPTX_LDFLAGS@\n-PLUGIN_NVPTX_LIBS = @PLUGIN_NVPTX_LIBS@\n RANLIB = @RANLIB@\n SECTION_LDFLAGS = @SECTION_LDFLAGS@\n SED = @SED@"}, {"sha": "891f90929d2201ccc552bc477021f0c5ac9293d3", "filename": "libgomp/testsuite/lib/libgomp.exp", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1459b55d24ce6508330690bf4c932f7a5218c9f3/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1459b55d24ce6508330690bf4c932f7a5218c9f3/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp?ref=1459b55d24ce6508330690bf4c932f7a5218c9f3", "patch": "@@ -190,19 +190,6 @@ proc libgomp_init { args } {\n \t\tappend always_ld_library_path \":${atomic_library_path}\"\n \t    }\n \t}\n-\tglobal cuda_driver_include\n-\tglobal cuda_driver_lib\n-\tif { $cuda_driver_include != \"\" } {\n-\t    # Stop gfortran from freaking out:\n-\t    # Warning: Nonexistent include directory \"[...]\"\n-\t    if {[file exists $cuda_driver_include]} {\n-\t\tlappend ALWAYS_CFLAGS \"additional_flags=-I$cuda_driver_include\"\n-\t    }\n-\t}\n-\tif { $cuda_driver_lib != \"\" } {\n-\t    lappend ALWAYS_CFLAGS \"additional_flags=-L$cuda_driver_lib\"\n-\t    append always_ld_library_path \":$cuda_driver_lib\"\n-\t}\n     }\n \n     # We use atomic operations in the testcases to validate results."}, {"sha": "36615b353aa2fec290096394c52ca151181a28da", "filename": "libgomp/testsuite/libgomp-test-support.exp.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1459b55d24ce6508330690bf4c932f7a5218c9f3/libgomp%2Ftestsuite%2Flibgomp-test-support.exp.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1459b55d24ce6508330690bf4c932f7a5218c9f3/libgomp%2Ftestsuite%2Flibgomp-test-support.exp.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp-test-support.exp.in?ref=1459b55d24ce6508330690bf4c932f7a5218c9f3", "patch": "@@ -1,5 +1,2 @@\n-set cuda_driver_include \"@CUDA_DRIVER_INCLUDE@\"\n-set cuda_driver_lib \"@CUDA_DRIVER_LIB@\"\n-\n set offload_plugins \"@offload_plugins@\"\n set offload_targets \"@offload_targets@\""}]}