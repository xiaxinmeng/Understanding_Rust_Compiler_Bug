{"sha": "d0e2a1f832689d16161b2db826475ad6ef8a2950", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBlMmExZjgzMjY4OWQxNjE2MWIyZGI4MjY0NzVhZDZlZjhhMjk1MA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-10-11T21:33:24Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-10-11T21:33:24Z"}, "message": "re PR target/49965 (libgomp.c++/reduction-4.C and libgomp.c++/task-8.C FAIL on Solaris 11/SPARC)\n\n\tPR target/49965\n\t* config/sparc/sparc.md (mov<I:mode>cc): Do not save comparison code.\n\t(mov<F:mode>cc): Likewise.\n\nFrom-SVN: r179827", "tree": {"sha": "3996c8d3b68795d47aacefa2268d08931471e74d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3996c8d3b68795d47aacefa2268d08931471e74d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0e2a1f832689d16161b2db826475ad6ef8a2950", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e2a1f832689d16161b2db826475ad6ef8a2950", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0e2a1f832689d16161b2db826475ad6ef8a2950", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e2a1f832689d16161b2db826475ad6ef8a2950/comments", "author": null, "committer": null, "parents": [{"sha": "60ca0fe6974aec0d7f9ec1defd30f214e768b3a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60ca0fe6974aec0d7f9ec1defd30f214e768b3a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60ca0fe6974aec0d7f9ec1defd30f214e768b3a3"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "cd33d10994a6084e92e6beb64238a3e539c18ec1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e2a1f832689d16161b2db826475ad6ef8a2950/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e2a1f832689d16161b2db826475ad6ef8a2950/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0e2a1f832689d16161b2db826475ad6ef8a2950", "patch": "@@ -1,3 +1,9 @@\n+2011-10-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/49965\n+\t* config/sparc/sparc.md (mov<I:mode>cc): Do not save comparison code.\n+\t(mov<F:mode>cc): Likewise.\n+\n 2011-10-11  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* tree-ssa-address.c (copy_ref_info): Remove copy of TREE_THIS_NOTRAP."}, {"sha": "24993fb18210f8ca2455b062f987641098ca6416", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e2a1f832689d16161b2db826475ad6ef8a2950/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e2a1f832689d16161b2db826475ad6ef8a2950/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=d0e2a1f832689d16161b2db826475ad6ef8a2950", "patch": "@@ -2614,11 +2614,9 @@\n \t\t\t(match_operand:I 3 \"arith10_operand\" \"\")))]\n   \"TARGET_V9 && !(<I:MODE>mode == DImode && TARGET_ARCH32)\"\n {\n-  enum rtx_code code = GET_CODE (operands[1]);\n   rtx cc_reg;\n \n-  if (GET_MODE (XEXP (operands[1], 0)) == DImode\n-      && ! TARGET_ARCH64)\n+  if (GET_MODE (XEXP (operands[1], 0)) == DImode && !TARGET_ARCH64)\n     FAIL;\n \n   if (GET_MODE (XEXP (operands[1], 0)) == TFmode && !TARGET_HARD_QUAD)\n@@ -2629,12 +2627,14 @@\n   if (XEXP (operands[1], 1) == const0_rtx\n       && GET_CODE (XEXP (operands[1], 0)) == REG\n       && GET_MODE (XEXP (operands[1], 0)) == DImode\n-      && v9_regcmp_p (code))\n+      && v9_regcmp_p (GET_CODE (operands[1])))\n     cc_reg = XEXP (operands[1], 0);\n   else\n     cc_reg = gen_compare_reg (operands[1]);\n \n-  operands[1] = gen_rtx_fmt_ee (code, GET_MODE (cc_reg), cc_reg, const0_rtx);\n+  operands[1]\n+    = gen_rtx_fmt_ee (GET_CODE (operands[1]), GET_MODE (cc_reg), cc_reg,\n+\t\t      const0_rtx);\n })\n \n (define_expand \"mov<F:mode>cc\"\n@@ -2644,11 +2644,9 @@\n \t\t\t(match_operand:F 3 \"register_operand\" \"\")))]\n   \"TARGET_V9 && TARGET_FPU\"\n {\n-  enum rtx_code code = GET_CODE (operands[1]);\n   rtx cc_reg;\n \n-  if (GET_MODE (XEXP (operands[1], 0)) == DImode\n-      && ! TARGET_ARCH64)\n+  if (GET_MODE (XEXP (operands[1], 0)) == DImode && !TARGET_ARCH64)\n     FAIL;\n \n   if (GET_MODE (XEXP (operands[1], 0)) == TFmode && !TARGET_HARD_QUAD)\n@@ -2659,12 +2657,14 @@\n   if (XEXP (operands[1], 1) == const0_rtx\n       && GET_CODE (XEXP (operands[1], 0)) == REG\n       && GET_MODE (XEXP (operands[1], 0)) == DImode\n-      && v9_regcmp_p (code))\n+      && v9_regcmp_p (GET_CODE (operands[1])))\n     cc_reg = XEXP (operands[1], 0);\n   else\n     cc_reg = gen_compare_reg (operands[1]);\n \n-  operands[1] = gen_rtx_fmt_ee (code, GET_MODE (cc_reg), cc_reg, const0_rtx);\n+  operands[1]\n+    = gen_rtx_fmt_ee (GET_CODE (operands[1]), GET_MODE (cc_reg), cc_reg,\n+\t\t      const0_rtx);\n })\n \n ;; Conditional move define_insns"}]}