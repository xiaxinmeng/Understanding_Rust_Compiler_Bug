{"sha": "41e4e5edce30e6340a8e42e26a19adb2418055c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFlNGU1ZWRjZTMwZTYzNDBhOGU0MmUyNmExOWFkYjI0MTgwNTVjNQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2015-08-24T20:21:57Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2015-08-24T20:21:57Z"}, "message": "formatter.h (_Debug_msg_id::__msg_irreflexive_ordering): New enum entry.\n\n2015-08-24  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/debug/formatter.h (_Debug_msg_id::__msg_irreflexive_ordering):\n\tNew enum entry.\n\t* include/debug/functions.h (_Irreflexive_checker): New.\n\t(__is_irreflexive, __is_irreflexive_pred): New.\n\t* include/debug/macros.h\n\t(__glibcxx_check_irreflexive, __glibcxx_check_irreflexive_pred): New\n\tmacros.\n\t(__glibcxx_check_irreflexive2, __glibcxx_check_irreflexive_pred2): New\n\tmacros limited to post-C++11 mode.\n\t* include/debug/debug.h\n\t(__glibcxx_requires_irreflexive, __glibcxx_requires_irreflexive_pred):\n\tNew macros, use latter.\n\t(__glibcxx_requires_irreflexive2, __glibcxx_requires_irreflexive_pred2):\n\tLikewise.\n\t* include/bits/stl_algo.h\n\t(partial_sort_copy): Add irreflexive debug check.\n\t(partial_sort_copy): Likewise.\n\t(lower_bound): Likewise.\n\t(upper_bound): Likewise.\n\t(equal_range): Likewise.\n\t(binary_search): Likewise.\n\t(inplace_merge): Likewise.\n\t(includes): Likewise.\n\t(next_permutation): Likewise.\n\t(prev_permutation): Likewise.\n\t(is_sorted_until): Likewise.\n\t(minmax_element): Likewise.\n\t(partial_sort): Likewise.\n\t(nth_element): Likewise.\n\t(sort): Likewise.\n\t(merge): Likewise.\n\t(stable_sort): Likewise.\n\t(set_union): Likewise.\n\t(set_intersection): Likewise.\n\t(set_difference): Likewise.\n\t(set_symmetric_difference): Likewise.\n\t(min_element): Likewise.\n\t(max_element): Likewise.\n\t* include/bits/stl_algobase.h\n\t(lower_bound): Likewise.\n\t(lexicographical_compare): Likewise.\n\t* include/bits/stl_heap.h\n\t(push_heap): Likewise.\n\t(pop_heap): Likewise.\n\t(make_heap): Likewise.\n\t(sort_heap): Likewise.\n\t(is_heap_until): Likewise.\n\t* testsuite/25_algorithms/lexicographical_compare/debug/\n\tirreflexive_neg.cc: New.\n\t* testsuite/25_algorithms/lower_bound/debug/irreflexive.cc: New.\n\t* testsuite/25_algorithms/partial_sort_copy/debug/irreflexive_neg.cc:\n\tNew.\n\nFrom-SVN: r227147", "tree": {"sha": "89b7c956187aa4685806c80203e0548bf6a7c7aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89b7c956187aa4685806c80203e0548bf6a7c7aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41e4e5edce30e6340a8e42e26a19adb2418055c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e4e5edce30e6340a8e42e26a19adb2418055c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41e4e5edce30e6340a8e42e26a19adb2418055c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e4e5edce30e6340a8e42e26a19adb2418055c5/comments", "author": null, "committer": null, "parents": [{"sha": "1b533361dae91d9a13679b8377111b91cf554217", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b533361dae91d9a13679b8377111b91cf554217", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b533361dae91d9a13679b8377111b91cf554217"}], "stats": {"total": 428, "additions": 404, "deletions": 24}, "files": [{"sha": "11f510228b4b3ba791400f760f3834e6723e6f63", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e4e5edce30e6340a8e42e26a19adb2418055c5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e4e5edce30e6340a8e42e26a19adb2418055c5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=41e4e5edce30e6340a8e42e26a19adb2418055c5", "patch": "@@ -1,3 +1,58 @@\n+2015-08-24  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/debug/formatter.h (_Debug_msg_id::__msg_irreflexive_ordering):\n+\tNew enum entry.\n+\t* include/debug/functions.h (_Irreflexive_checker): New.\n+\t(__is_irreflexive, __is_irreflexive_pred): New.\n+\t* include/debug/macros.h\n+\t(__glibcxx_check_irreflexive, __glibcxx_check_irreflexive_pred): New\n+\tmacros.\n+\t(__glibcxx_check_irreflexive2, __glibcxx_check_irreflexive_pred2): New\n+\tmacros limited to post-C++11 mode.\n+\t* include/debug/debug.h\n+\t(__glibcxx_requires_irreflexive, __glibcxx_requires_irreflexive_pred):\n+\tNew macros, use latter.\n+\t(__glibcxx_requires_irreflexive2, __glibcxx_requires_irreflexive_pred2):\n+\tLikewise.\n+\t* include/bits/stl_algo.h\n+\t(partial_sort_copy): Add irreflexive debug check.\n+\t(partial_sort_copy): Likewise.\n+\t(lower_bound): Likewise.\n+\t(upper_bound): Likewise.\n+\t(equal_range): Likewise.\n+\t(binary_search): Likewise.\n+\t(inplace_merge): Likewise.\n+\t(includes): Likewise.\n+\t(next_permutation): Likewise.\n+\t(prev_permutation): Likewise.\n+\t(is_sorted_until): Likewise.\n+\t(minmax_element): Likewise.\n+\t(partial_sort): Likewise.\n+\t(nth_element): Likewise.\n+\t(sort): Likewise.\n+\t(merge): Likewise.\n+\t(stable_sort): Likewise.\n+\t(set_union): Likewise.\n+\t(set_intersection): Likewise.\n+\t(set_difference): Likewise.\n+\t(set_symmetric_difference): Likewise.\n+\t(min_element): Likewise.\n+\t(max_element): Likewise.\n+\t* include/bits/stl_algobase.h\n+\t(lower_bound): Likewise.\n+\t(lexicographical_compare): Likewise.\n+\t* include/bits/stl_heap.h\n+\t(push_heap): Likewise.\n+\t(pop_heap): Likewise.\n+\t(make_heap): Likewise.\n+\t(sort_heap): Likewise.\n+\t(is_heap_until): Likewise.\n+\t* testsuite/25_algorithms/lexicographical_compare/debug/\n+\tirreflexive_neg.cc: New.\n+\t* testsuite/25_algorithms/lower_bound/debug/irreflexive.cc: New.\n+\t* testsuite/25_algorithms/partial_sort_copy/debug/irreflexive_neg.cc:\n+\tNew.\n+\n 2015-08-24  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/65049"}, {"sha": "f7f3e84dc821bfb13a54a666573ada884bd4ea60", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e4e5edce30e6340a8e42e26a19adb2418055c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e4e5edce30e6340a8e42e26a19adb2418055c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=41e4e5edce30e6340a8e42e26a19adb2418055c5", "patch": "@@ -1750,6 +1750,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t                     _OutputValueType>)\n       __glibcxx_function_requires(_LessThanComparableConcept<_OutputValueType>)\n       __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_irreflexive(__first, __last);\n       __glibcxx_requires_valid_range(__result_first, __result_last);\n \n       return std::__partial_sort_copy(__first, __last,\n@@ -1803,6 +1804,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,\n \t\t\t\t  _OutputValueType, _OutputValueType>)\n       __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n       __glibcxx_requires_valid_range(__result_first, __result_last);\n \n       return std::__partial_sort_copy(__first, __last,\n@@ -2027,6 +2029,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t  _ValueType, _Tp>)\n       __glibcxx_requires_partitioned_lower_pred(__first, __last,\n \t\t\t\t\t\t__val, __comp);\n+      __glibcxx_requires_irreflexive_pred2(__first, __last, __comp);\n \n       return std::__lower_bound(__first, __last, __val,\n \t\t\t\t__gnu_cxx::__ops::__iter_comp_val(__comp));\n@@ -2082,6 +2085,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n       __glibcxx_function_requires(_LessThanOpConcept<_Tp, _ValueType>)\n       __glibcxx_requires_partitioned_upper(__first, __last, __val);\n+      __glibcxx_requires_irreflexive2(__first, __last);\n \n       return std::__upper_bound(__first, __last, __val,\n \t\t\t\t__gnu_cxx::__ops::__val_less_iter());\n@@ -2116,6 +2120,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t  _Tp, _ValueType>)\n       __glibcxx_requires_partitioned_upper_pred(__first, __last,\n \t\t\t\t\t\t__val, __comp);\n+      __glibcxx_requires_irreflexive_pred2(__first, __last, __comp);\n \n       return std::__upper_bound(__first, __last, __val,\n \t\t\t\t__gnu_cxx::__ops::__val_comp_iter(__comp));\n@@ -2189,7 +2194,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_LessThanOpConcept<_ValueType, _Tp>)\n       __glibcxx_function_requires(_LessThanOpConcept<_Tp, _ValueType>)\n       __glibcxx_requires_partitioned_lower(__first, __last, __val);\n-      __glibcxx_requires_partitioned_upper(__first, __last, __val);      \n+      __glibcxx_requires_partitioned_upper(__first, __last, __val);\n+      __glibcxx_requires_irreflexive2(__first, __last);\n \n       return std::__equal_range(__first, __last, __val,\n \t\t\t\t__gnu_cxx::__ops::__iter_less_val(),\n@@ -2231,6 +2237,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t\t__val, __comp);\n       __glibcxx_requires_partitioned_upper_pred(__first, __last,\n \t\t\t\t\t\t__val, __comp);\n+      __glibcxx_requires_irreflexive_pred2(__first, __last, __comp);\n \n       return std::__equal_range(__first, __last, __val,\n \t\t\t\t__gnu_cxx::__ops::__iter_comp_val(__comp),\n@@ -2262,6 +2269,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_LessThanOpConcept<_Tp, _ValueType>)\n       __glibcxx_requires_partitioned_lower(__first, __last, __val);\n       __glibcxx_requires_partitioned_upper(__first, __last, __val);\n+      __glibcxx_requires_irreflexive2(__first, __last);\n \n       _ForwardIterator __i\n \t= std::__lower_bound(__first, __last, __val,\n@@ -2300,6 +2308,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t\t__val, __comp);\n       __glibcxx_requires_partitioned_upper_pred(__first, __last,\n \t\t\t\t\t\t__val, __comp);\n+      __glibcxx_requires_irreflexive_pred2(__first, __last, __comp);\n \n       _ForwardIterator __i\n \t= std::__lower_bound(__first, __last, __val,\n@@ -2594,6 +2603,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    typename iterator_traits<_BidirectionalIterator>::value_type>)\n       __glibcxx_requires_sorted(__first, __middle);\n       __glibcxx_requires_sorted(__middle, __last);\n+      __glibcxx_requires_irreflexive(__first, __last);\n \n       std::__inplace_merge(__first, __middle, __last,\n \t\t\t   __gnu_cxx::__ops::__iter_less_iter());\n@@ -2636,6 +2646,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    typename iterator_traits<_BidirectionalIterator>::value_type>)\n       __glibcxx_requires_sorted_pred(__first, __middle, __comp);\n       __glibcxx_requires_sorted_pred(__middle, __last, __comp);\n+      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n \n       std::__inplace_merge(__first, __middle, __last,\n \t\t\t   __gnu_cxx::__ops::__iter_comp_iter(__comp));\n@@ -2847,6 +2858,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n       __glibcxx_requires_sorted_set(__first1, __last1, __first2);\n       __glibcxx_requires_sorted_set(__first2, __last2, __first1);\n+      __glibcxx_requires_irreflexive2(__first1, __last1);\n+      __glibcxx_requires_irreflexive2(__first2, __last2);\n \n       return std::__includes(__first1, __last1, __first2, __last2,\n \t\t\t     __gnu_cxx::__ops::__iter_less_iter());\n@@ -2891,6 +2904,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n       __glibcxx_requires_sorted_set_pred(__first1, __last1, __first2, __comp);\n       __glibcxx_requires_sorted_set_pred(__first2, __last2, __first1, __comp);\n+      __glibcxx_requires_irreflexive_pred2(__first1, __last1, __comp);\n+      __glibcxx_requires_irreflexive_pred2(__first2, __last2, __comp);\n \n       return std::__includes(__first1, __last1, __first2, __last2,\n \t\t\t     __gnu_cxx::__ops::__iter_comp_iter(__comp));\n@@ -2966,6 +2981,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_BidirectionalIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_irreflexive(__first, __last);\n \n       return std::__next_permutation\n \t(__first, __last, __gnu_cxx::__ops::__iter_less_iter());\n@@ -2998,6 +3014,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    typename iterator_traits<_BidirectionalIterator>::value_type,\n \t    typename iterator_traits<_BidirectionalIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n \n       return std::__next_permutation\n \t(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));\n@@ -3064,6 +3081,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_BidirectionalIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_irreflexive(__first, __last);\n \n       return std::__prev_permutation(__first, __last,\n \t\t\t\t     __gnu_cxx::__ops::__iter_less_iter());\n@@ -3096,6 +3114,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    typename iterator_traits<_BidirectionalIterator>::value_type,\n \t    typename iterator_traits<_BidirectionalIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n \n       return std::__prev_permutation(__first, __last,\n \t\t\t\t__gnu_cxx::__ops::__iter_comp_iter(__comp));\n@@ -3258,6 +3277,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_irreflexive(__first, __last);\n \n       return std::__is_sorted_until(__first, __last,\n \t\t\t\t    __gnu_cxx::__ops::__iter_less_iter());\n@@ -3283,6 +3303,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    typename iterator_traits<_ForwardIterator>::value_type,\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n \n       return std::__is_sorted_until(__first, __last,\n \t\t\t\t    __gnu_cxx::__ops::__iter_comp_iter(__comp));\n@@ -3407,6 +3428,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_irreflexive(__first, __last);\n \n       return std::__minmax_element(__first, __last,\n \t\t\t\t   __gnu_cxx::__ops::__iter_less_iter());\n@@ -3436,6 +3458,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    typename iterator_traits<_ForwardIterator>::value_type,\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n \n       return std::__minmax_element(__first, __last,\n \t\t\t\t   __gnu_cxx::__ops::__iter_comp_iter(__comp));\n@@ -4556,6 +4579,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __middle);\n       __glibcxx_requires_valid_range(__middle, __last);\n+      __glibcxx_requires_irreflexive(__first, __last);\n \n       std::__partial_sort(__first, __middle, __last,\n \t\t\t  __gnu_cxx::__ops::__iter_less_iter());\n@@ -4595,6 +4619,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __middle);\n       __glibcxx_requires_valid_range(__middle, __last);\n+      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n \n       std::__partial_sort(__first, __middle, __last,\n \t\t\t  __gnu_cxx::__ops::__iter_comp_iter(__comp));\n@@ -4627,6 +4652,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __nth);\n       __glibcxx_requires_valid_range(__nth, __last);\n+      __glibcxx_requires_irreflexive(__first, __last);\n \n       if (__first == __last || __nth == __last)\n \treturn;\n@@ -4666,6 +4692,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __nth);\n       __glibcxx_requires_valid_range(__nth, __last);\n+      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n \n       if (__first == __last || __nth == __last)\n \treturn;\n@@ -4699,6 +4726,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_irreflexive(__first, __last);\n \n       std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());\n     }\n@@ -4730,6 +4758,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_RandomAccessIterator>::value_type,\n \t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n \n       std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));\n     }\n@@ -4797,6 +4826,8 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_InputIterator1>::value_type>)\t\n       __glibcxx_requires_sorted_set(__first1, __last1, __first2);\n       __glibcxx_requires_sorted_set(__first2, __last2, __first1);\n+      __glibcxx_requires_irreflexive2(__first1, __last1);\n+      __glibcxx_requires_irreflexive2(__first2, __last2);\n \n       return _GLIBCXX_STD_A::__merge(__first1, __last1,\n \t\t\t\t     __first2, __last2, __result,\n@@ -4845,6 +4876,8 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n       __glibcxx_requires_sorted_set_pred(__first1, __last1, __first2, __comp);\n       __glibcxx_requires_sorted_set_pred(__first2, __last2, __first1, __comp);\n+      __glibcxx_requires_irreflexive_pred2(__first1, __last1, __comp);\n+      __glibcxx_requires_irreflexive_pred2(__first2, __last2, __comp);\n \n       return _GLIBCXX_STD_A::__merge(__first1, __last1,\n \t\t\t\t__first2, __last2, __result,\n@@ -4898,6 +4931,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_irreflexive(__first, __last);\n \n       _GLIBCXX_STD_A::__stable_sort(__first, __last,\n \t\t\t\t    __gnu_cxx::__ops::__iter_less_iter());\n@@ -4933,6 +4967,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_RandomAccessIterator>::value_type,\n \t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n \n       _GLIBCXX_STD_A::__stable_sort(__first, __last,\n \t\t\t\t    __gnu_cxx::__ops::__iter_comp_iter(__comp));\n@@ -5010,6 +5045,8 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n       __glibcxx_requires_sorted_set(__first1, __last1, __first2);\n       __glibcxx_requires_sorted_set(__first2, __last2, __first1);\n+      __glibcxx_requires_irreflexive2(__first1, __last1);\n+      __glibcxx_requires_irreflexive2(__first2, __last2);\n \n       return _GLIBCXX_STD_A::__set_union(__first1, __last1,\n \t\t\t\t__first2, __last2, __result,\n@@ -5057,6 +5094,8 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n       __glibcxx_requires_sorted_set_pred(__first1, __last1, __first2, __comp);\n       __glibcxx_requires_sorted_set_pred(__first2, __last2, __first1, __comp);\n+      __glibcxx_requires_irreflexive_pred2(__first1, __last1, __comp);\n+      __glibcxx_requires_irreflexive_pred2(__first2, __last2, __comp);\n \n       return _GLIBCXX_STD_A::__set_union(__first1, __last1,\n \t\t\t\t__first2, __last2, __result,\n@@ -5123,6 +5162,8 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n       __glibcxx_requires_sorted_set(__first1, __last1, __first2);\n       __glibcxx_requires_sorted_set(__first2, __last2, __first1);\n+      __glibcxx_requires_irreflexive2(__first1, __last1);\n+      __glibcxx_requires_irreflexive2(__first2, __last2);\n \n       return _GLIBCXX_STD_A::__set_intersection(__first1, __last1,\n \t\t\t\t     __first2, __last2, __result,\n@@ -5169,6 +5210,8 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n       __glibcxx_requires_sorted_set_pred(__first1, __last1, __first2, __comp);\n       __glibcxx_requires_sorted_set_pred(__first2, __last2, __first1, __comp);\n+      __glibcxx_requires_irreflexive_pred2(__first1, __last1, __comp);\n+      __glibcxx_requires_irreflexive_pred2(__first2, __last2, __comp);\n \n       return _GLIBCXX_STD_A::__set_intersection(__first1, __last1,\n \t\t\t\t__first2, __last2, __result,\n@@ -5239,6 +5282,8 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_InputIterator1>::value_type>)\t\n       __glibcxx_requires_sorted_set(__first1, __last1, __first2);\n       __glibcxx_requires_sorted_set(__first2, __last2, __first1);\n+      __glibcxx_requires_irreflexive2(__first1, __last1);\n+      __glibcxx_requires_irreflexive2(__first2, __last2);\n \n       return _GLIBCXX_STD_A::__set_difference(__first1, __last1,\n \t\t\t\t   __first2, __last2, __result,\n@@ -5287,6 +5332,8 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n       __glibcxx_requires_sorted_set_pred(__first1, __last1, __first2, __comp);\n       __glibcxx_requires_sorted_set_pred(__first2, __last2, __first1, __comp);\n+      __glibcxx_requires_irreflexive_pred2(__first1, __last1, __comp);\n+      __glibcxx_requires_irreflexive_pred2(__first2, __last2, __comp);\n \n       return _GLIBCXX_STD_A::__set_difference(__first1, __last1,\n \t\t\t\t   __first2, __last2, __result,\n@@ -5365,6 +5412,8 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_InputIterator1>::value_type>)\t\n       __glibcxx_requires_sorted_set(__first1, __last1, __first2);\n       __glibcxx_requires_sorted_set(__first2, __last2, __first1);\n+      __glibcxx_requires_irreflexive2(__first1, __last1);\n+      __glibcxx_requires_irreflexive2(__first2, __last2);\n \n       return _GLIBCXX_STD_A::__set_symmetric_difference(__first1, __last1,\n \t\t\t\t\t__first2, __last2, __result,\n@@ -5414,6 +5463,8 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_InputIterator1>::value_type>)\n       __glibcxx_requires_sorted_set_pred(__first1, __last1, __first2, __comp);\n       __glibcxx_requires_sorted_set_pred(__first2, __last2, __first1, __comp);\n+      __glibcxx_requires_irreflexive_pred2(__first1, __last1, __comp);\n+      __glibcxx_requires_irreflexive_pred2(__first2, __last2, __comp);\n \n       return _GLIBCXX_STD_A::__set_symmetric_difference(__first1, __last1,\n \t\t\t\t__first2, __last2, __result,\n@@ -5452,6 +5503,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_irreflexive(__first, __last);\n \n       return _GLIBCXX_STD_A::__min_element(__first, __last,\n \t\t\t\t__gnu_cxx::__ops::__iter_less_iter());\n@@ -5478,6 +5530,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_ForwardIterator>::value_type,\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n \n       return _GLIBCXX_STD_A::__min_element(__first, __last,\n \t\t\t\t__gnu_cxx::__ops::__iter_comp_iter(__comp));\n@@ -5514,6 +5567,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_irreflexive(__first, __last);\n \n       return _GLIBCXX_STD_A::__max_element(__first, __last,\n \t\t\t\t__gnu_cxx::__ops::__iter_less_iter());\n@@ -5540,6 +5594,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t    typename iterator_traits<_ForwardIterator>::value_type,\n \t    typename iterator_traits<_ForwardIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n \n       return _GLIBCXX_STD_A::__max_element(__first, __last,\n \t\t\t\t__gnu_cxx::__ops::__iter_comp_iter(__comp));"}, {"sha": "99f3cc4cfe93fd517278e91fde6b82b290d0cb64", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e4e5edce30e6340a8e42e26a19adb2418055c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e4e5edce30e6340a8e42e26a19adb2418055c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=41e4e5edce30e6340a8e42e26a19adb2418055c5", "patch": "@@ -985,6 +985,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_LessThanOpConcept<\n \t    typename iterator_traits<_ForwardIterator>::value_type, _Tp>)\n       __glibcxx_requires_partitioned_lower(__first, __last, __val);\n+      __glibcxx_requires_irreflexive2(__first, __last);\n \n       return std::__lower_bound(__first, __last, __val,\n \t\t\t\t__gnu_cxx::__ops::__iter_less_val());\n@@ -1209,7 +1210,9 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       __glibcxx_function_requires(_LessThanOpConcept<_ValueType1, _ValueType2>)\n       __glibcxx_function_requires(_LessThanOpConcept<_ValueType2, _ValueType1>)\n       __glibcxx_requires_valid_range(__first1, __last1);\n+      __glibcxx_requires_irreflexive2(__first1, __last1);\n       __glibcxx_requires_valid_range(__first2, __last2);\n+      __glibcxx_requires_irreflexive2(__first2, __last2);\n \n       return std::__lexicographical_compare_aux(std::__niter_base(__first1),\n \t\t\t\t\t\tstd::__niter_base(__last1),\n@@ -1239,7 +1242,9 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       __glibcxx_function_requires(_InputIteratorConcept<_II1>)\n       __glibcxx_function_requires(_InputIteratorConcept<_II2>)\n       __glibcxx_requires_valid_range(__first1, __last1);\n+      __glibcxx_requires_irreflexive_pred2(__first1, __last1, __comp);\n       __glibcxx_requires_valid_range(__first2, __last2);\n+      __glibcxx_requires_irreflexive_pred2(__first2, __last2, __comp);\n \n       return std::__lexicographical_compare_impl\n \t(__first1, __last1, __first2, __last2,"}, {"sha": "e13b6bed9aea32a3abba7291bc3af3c6665e8e64", "filename": "libstdc++-v3/include/bits/stl_heap.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e4e5edce30e6340a8e42e26a19adb2418055c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e4e5edce30e6340a8e42e26a19adb2418055c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h?ref=41e4e5edce30e6340a8e42e26a19adb2418055c5", "patch": "@@ -159,6 +159,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    _RandomAccessIterator>)\n       __glibcxx_function_requires(_LessThanComparableConcept<_ValueType>)\n       __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_irreflexive(__first, __last);\n       __glibcxx_requires_heap(__first, __last - 1);\n \n       _ValueType __value = _GLIBCXX_MOVE(*(__last - 1));\n@@ -193,6 +194,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n       __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n       __glibcxx_requires_heap_pred(__first, __last - 1, __comp);\n \n       _ValueType __value = _GLIBCXX_MOVE(*(__last - 1));\n@@ -271,6 +273,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_LessThanComparableConcept<_ValueType>)\n       __glibcxx_requires_non_empty_range(__first, __last);\n       __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_irreflexive(__first, __last);\n       __glibcxx_requires_heap(__first, __last);\n \n       if (__last - __first > 1)\n@@ -301,6 +304,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n       __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n       __glibcxx_requires_non_empty_range(__first, __last);\n       __glibcxx_requires_heap_pred(__first, __last, __comp);\n \n@@ -356,6 +360,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_irreflexive(__first, __last);\n \n       std::__make_heap(__first, __last,\n \t\t       __gnu_cxx::__ops::__iter_less_iter());\n@@ -380,6 +385,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n       __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n \n       std::__make_heap(__first, __last,\n \t\t       __gnu_cxx::__ops::__iter_comp_iter(__comp));\n@@ -415,6 +421,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_irreflexive(__first, __last);\n       __glibcxx_requires_heap(__first, __last);\n \n       std::__sort_heap(__first, __last,\n@@ -440,6 +447,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n       __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n       __glibcxx_requires_heap_pred(__first, __last, __comp);\n \n       std::__sort_heap(__first, __last,\n@@ -467,6 +475,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_RandomAccessIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_irreflexive(__first, __last);\n \n       return __first + \n \tstd::__is_heap_until(__first, std::distance(__first, __last),\n@@ -493,6 +502,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __glibcxx_function_requires(_RandomAccessIteratorConcept<\n \t    _RandomAccessIterator>)\n       __glibcxx_requires_valid_range(__first, __last);\n+      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);\n \n       return __first\n \t+ std::__is_heap_until(__first, std::distance(__first, __last),"}, {"sha": "6b52b0ab3128b82a0e0302f9f4d50b3043a3f948", "filename": "libstdc++-v3/include/debug/debug.h", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e4e5edce30e6340a8e42e26a19adb2418055c5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e4e5edce30e6340a8e42e26a19adb2418055c5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h?ref=41e4e5edce30e6340a8e42e26a19adb2418055c5", "patch": "@@ -77,41 +77,53 @@ namespace __gnu_debug\n # define __glibcxx_requires_string(_String)\n # define __glibcxx_requires_string_len(_String,_Len)\n # define __glibcxx_requires_subscript(_N)\n+# define __glibcxx_requires_irreflexive(_First,_Last)\n+# define __glibcxx_requires_irreflexive2(_First,_Last)\n+# define __glibcxx_requires_irreflexive_pred(_First,_Last,_Pred)\n+# define __glibcxx_requires_irreflexive_pred2(_First,_Last,_Pred)\n \n #else\n \n # include <debug/macros.h>\n \n # define __glibcxx_requires_cond(_Cond,_Msg) _GLIBCXX_DEBUG_VERIFY(_Cond,_Msg)\n-# define __glibcxx_requires_valid_range(_First,_Last) \\\n-     __glibcxx_check_valid_range(_First,_Last)\n-# define __glibcxx_requires_non_empty_range(_First,_Last) \\\n-     __glibcxx_check_non_empty_range(_First,_Last)\n-# define __glibcxx_requires_sorted(_First,_Last) \\\n-     __glibcxx_check_sorted(_First,_Last)\n-# define __glibcxx_requires_sorted_pred(_First,_Last,_Pred) \\\n-     __glibcxx_check_sorted_pred(_First,_Last,_Pred)\n-# define __glibcxx_requires_sorted_set(_First1,_Last1,_First2) \\\n-     __glibcxx_check_sorted_set(_First1,_Last1,_First2)\n+# define __glibcxx_requires_valid_range(_First,_Last)\t\\\n+  __glibcxx_check_valid_range(_First,_Last)\n+# define __glibcxx_requires_non_empty_range(_First,_Last)\t\\\n+  __glibcxx_check_non_empty_range(_First,_Last)\n+# define __glibcxx_requires_sorted(_First,_Last)\t\\\n+  __glibcxx_check_sorted(_First,_Last)\n+# define __glibcxx_requires_sorted_pred(_First,_Last,_Pred)\t\\\n+  __glibcxx_check_sorted_pred(_First,_Last,_Pred)\n+# define __glibcxx_requires_sorted_set(_First1,_Last1,_First2)\t\\\n+  __glibcxx_check_sorted_set(_First1,_Last1,_First2)\n # define __glibcxx_requires_sorted_set_pred(_First1,_Last1,_First2,_Pred) \\\n-     __glibcxx_check_sorted_set_pred(_First1,_Last1,_First2,_Pred)\n+  __glibcxx_check_sorted_set_pred(_First1,_Last1,_First2,_Pred)\n # define __glibcxx_requires_partitioned_lower(_First,_Last,_Value)\t\\\n-     __glibcxx_check_partitioned_lower(_First,_Last,_Value)\n+  __glibcxx_check_partitioned_lower(_First,_Last,_Value)\n # define __glibcxx_requires_partitioned_upper(_First,_Last,_Value)\t\\\n-     __glibcxx_check_partitioned_upper(_First,_Last,_Value)\n+  __glibcxx_check_partitioned_upper(_First,_Last,_Value)\n # define __glibcxx_requires_partitioned_lower_pred(_First,_Last,_Value,_Pred) \\\n-     __glibcxx_check_partitioned_lower_pred(_First,_Last,_Value,_Pred)\n+  __glibcxx_check_partitioned_lower_pred(_First,_Last,_Value,_Pred)\n # define __glibcxx_requires_partitioned_upper_pred(_First,_Last,_Value,_Pred) \\\n-     __glibcxx_check_partitioned_upper_pred(_First,_Last,_Value,_Pred)\n-# define __glibcxx_requires_heap(_First,_Last) \\\n-     __glibcxx_check_heap(_First,_Last)\n-# define __glibcxx_requires_heap_pred(_First,_Last,_Pred) \\\n-     __glibcxx_check_heap_pred(_First,_Last,_Pred)\n+  __glibcxx_check_partitioned_upper_pred(_First,_Last,_Value,_Pred)\n+# define __glibcxx_requires_heap(_First,_Last)\t\\\n+  __glibcxx_check_heap(_First,_Last)\n+# define __glibcxx_requires_heap_pred(_First,_Last,_Pred)\t\\\n+  __glibcxx_check_heap_pred(_First,_Last,_Pred)\n # define __glibcxx_requires_nonempty() __glibcxx_check_nonempty()\n # define __glibcxx_requires_string(_String) __glibcxx_check_string(_String)\n # define __glibcxx_requires_string_len(_String,_Len)\t\\\n-     __glibcxx_check_string_len(_String,_Len)\n+  __glibcxx_check_string_len(_String,_Len)\n # define __glibcxx_requires_subscript(_N) __glibcxx_check_subscript(_N)\n+# define __glibcxx_requires_irreflexive(_First,_Last)\t\\\n+  __glibcxx_check_irreflexive(_First,_Last)\n+# define __glibcxx_requires_irreflexive2(_First,_Last)\t\\\n+  __glibcxx_check_irreflexive2(_First,_Last)\n+# define __glibcxx_requires_irreflexive_pred(_First,_Last,_Pred)\t\\\n+  __glibcxx_check_irreflexive_pred(_First,_Last,_Pred)\n+# define __glibcxx_requires_irreflexive_pred2(_First,_Last,_Pred)\t\\\n+  __glibcxx_check_irreflexive_pred2(_First,_Last,_Pred)\n \n # include <debug/functions.h>\n "}, {"sha": "9fc23c828fc17ad6c143040721c7449ce225ab88", "filename": "libstdc++-v3/include/debug/formatter.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e4e5edce30e6340a8e42e26a19adb2418055c5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e4e5edce30e6340a8e42e26a19adb2418055c5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h?ref=41e4e5edce30e6340a8e42e26a19adb2418055c5", "patch": "@@ -126,7 +126,8 @@ namespace __gnu_debug\n     __msg_valid_load_factor,\n     // others\n     __msg_equal_allocs,\n-    __msg_insert_range_from_self\n+    __msg_insert_range_from_self,\n+    __msg_irreflexive_ordering\n   };\n \n   class _Error_formatter"}, {"sha": "218092af86a2a8cffdcb0f1b044ebad7d2f2ddb8", "filename": "libstdc++-v3/include/debug/functions.h", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e4e5edce30e6340a8e42e26a19adb2418055c5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e4e5edce30e6340a8e42e26a19adb2418055c5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h?ref=41e4e5edce30e6340a8e42e26a19adb2418055c5", "patch": "@@ -445,6 +445,49 @@ namespace __gnu_debug\n       return __first == __last;\n     }\n \n+#if __cplusplus >= 201103L\n+  struct _Irreflexive_checker\n+  {\n+    template<typename _It>\n+      static typename std::iterator_traits<_It>::reference\n+      __deref();\n+\n+    template<typename _It,\n+\t     typename = decltype(__deref<_It>() < __deref<_It>())>\n+      static bool\n+      _S_is_valid(_It __it)\n+      { return !(*__it < *__it); }\n+\n+    // Fallback method if operator doesn't exist.\n+    template<typename... _Args>\n+      static bool\n+      _S_is_valid(_Args...)\n+      { return true; }\n+\n+    template<typename _It, typename _Pred, typename\n+\t= decltype(std::declval<_Pred>()(__deref<_It>(), __deref<_It>()))>\n+      static bool\n+      _S_is_valid_pred(_It __it, _Pred __pred)\n+      { return !__pred(*__it, *__it); }\n+\n+    // Fallback method if predicate can't be invoked.\n+    template<typename... _Args>\n+      static bool\n+      _S_is_valid_pred(_Args...)\n+      { return true; }\n+  };\n+\n+  template<typename _Iterator>\n+    inline bool\n+    __is_irreflexive(_Iterator __it)\n+    { return _Irreflexive_checker::_S_is_valid(__it); }\n+\n+  template<typename _Iterator, typename _Pred>\n+    inline bool\n+    __is_irreflexive_pred(_Iterator __it, _Pred __pred)\n+    { return _Irreflexive_checker::_S_is_valid_pred(__it, __pred); }\n+#endif\n+\n } // namespace __gnu_debug\n \n #endif"}, {"sha": "c6366636ce378f520704fff1bcd5d2ba17e06887", "filename": "libstdc++-v3/include/debug/macros.h", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e4e5edce30e6340a8e42e26a19adb2418055c5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e4e5edce30e6340a8e42e26a19adb2418055c5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h?ref=41e4e5edce30e6340a8e42e26a19adb2418055c5", "patch": "@@ -362,4 +362,37 @@ _GLIBCXX_DEBUG_VERIFY(_This.get_allocator() == _Other.get_allocator(),\t\\\n #define __glibcxx_check_string_len(_String,_Len) \\\n   _GLIBCXX_DEBUG_PEDASSERT(_String != 0 || _Len == 0)\n \n+// Verify that a predicate is irreflexive\n+#define __glibcxx_check_irreflexive(_First,_Last)\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY(_First == _Last || !(*_First < *_First),\t\\\n+\t\t\t_M_message(__gnu_debug::__msg_irreflexive_ordering) \\\n+\t\t\t._M_iterator_value_type(_First, \"< operator type\"))\n+\n+#if __cplusplus >= 201103L\n+# define __glibcxx_check_irreflexive2(_First,_Last)\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY(_First == _Last\t\t\t\t\t\\\n+\t\t\t|| __gnu_debug::__is_irreflexive(_First),\t\\\n+\t\t\t_M_message(__gnu_debug::__msg_irreflexive_ordering) \\\n+\t\t\t._M_iterator_value_type(_First, \"< operator type\"))\n+#else\n+# define __glibcxx_check_irreflexive2(_First,_Last)\n+#endif\n+\n+#define __glibcxx_check_irreflexive_pred(_First,_Last,_Pred)\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY(_First == _Last\t|| !_Pred(*_First, *_First),\t\t\\\n+\t\t\t_M_message(__gnu_debug::__msg_irreflexive_ordering) \\\n+\t\t\t._M_instance(_Pred, \"functor\")\t\t\t\\\n+\t\t\t._M_iterator_value_type(_First, \"ordered type\"))\n+\n+#if __cplusplus >= 201103L\n+# define __glibcxx_check_irreflexive_pred2(_First,_Last,_Pred)\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY(_First == _Last\t\t\t\t\t\\\n+\t\t\t||__gnu_debug::__is_irreflexive_pred(_First, _Pred), \\\n+\t\t\t_M_message(__gnu_debug::__msg_irreflexive_ordering) \\\n+\t\t\t._M_instance(_Pred, \"functor\")\t\t\t\\\n+\t\t\t._M_iterator_value_type(_First, \"ordered type\"))\n+#else\n+# define __glibcxx_check_irreflexive_pred2(_First,_Last,_Pred)\n+#endif\n+\n #endif"}, {"sha": "997c0f33de06ef8a3080124f2d263c84542610c2", "filename": "libstdc++-v3/src/c++11/debug.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e4e5edce30e6340a8e42e26a19adb2418055c5/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e4e5edce30e6340a8e42e26a19adb2418055c5/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc?ref=41e4e5edce30e6340a8e42e26a19adb2418055c5", "patch": "@@ -185,7 +185,8 @@ namespace __gnu_debug\n     \"load factor shall be positive\",\n     \"allocators must be equal\",\n     \"attempt to insert with an iterator range [%1.name;, %2.name;) from this\"\n-    \" container\"\n+    \" container\",\n+    \"comparison doesn't meet irreflexive requirements, assert(!(a < a))\"\n   };\n \n   void\n@@ -592,11 +593,13 @@ namespace\n       {\n \tconst int __bufsize = 64;\n \tchar __buf[__bufsize];\n-\t__formatter->_M_format_word(__buf, __bufsize, \"\\\"%s\\\" \",\n+\t__formatter->_M_format_word(__buf, __bufsize, \"\\\"%s\\\"\",\n \t\t\t\t    __variant._M_name);\n \t__formatter->_M_print_word(__buf);\n       }\n \n+    __formatter->_M_print_word(\" {\\n\");\n+\n     if (__variant._M_type)\n       {\n \t__formatter->_M_print_word(\"  type = \");\n@@ -768,6 +771,7 @@ namespace __gnu_debug\n \t\t\t\t\t_M_variant._M_iterator._M_sequence);\n \t    __formatter->_M_print_word(__buf);\n \t  }\n+\n \t__formatter->_M_print_word(\"}\\n\");\n \tbreak;\n       case __sequence:\n@@ -786,10 +790,12 @@ namespace __gnu_debug\n \tif (_M_variant._M_instance._M_type)\n \t  __formatter->_M_print_word(\";\\n\");\n \n+\t__formatter->_M_print_word(\"}\\n\");\n \tbreak;\n       case __iterator_value_type:\n \t__formatter->_M_print_word(\"iterator::value_type \");\n \tprint_description(__formatter, _M_variant._M_iterator_value_type);\n+\t__formatter->_M_print_word(\"}\\n\");\n \tbreak;\n       default:\n \tbreak;"}, {"sha": "07ee8bef6deed1844289c398c8c46f8cd679488c", "filename": "libstdc++-v3/testsuite/25_algorithms/lexicographical_compare/debug/irreflexive_neg.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e4e5edce30e6340a8e42e26a19adb2418055c5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flexicographical_compare%2Fdebug%2Firreflexive_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e4e5edce30e6340a8e42e26a19adb2418055c5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flexicographical_compare%2Fdebug%2Firreflexive_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flexicographical_compare%2Fdebug%2Firreflexive_neg.cc?ref=41e4e5edce30e6340a8e42e26a19adb2418055c5", "patch": "@@ -0,0 +1,70 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-debug-mode \"\" }\n+// { dg-do run { xfail *-*-* } }\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+struct A\n+{\n+  A(int i) : _i(i)\n+  { }\n+\n+  int _i;\n+};\n+\n+bool\n+operator<(A a, int i)\n+{ return a._i < i; }\n+\n+bool\n+operator<(int i, A a)\n+{ return i < a._i; }\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  A as[] { 0, 1, 2, 3 };\n+  int is[] { 0, 1, 2, 3 };\n+  VERIFY( !std::lexicographical_compare(as, as + 4, is, is + 4) );\n+}\n+\n+bool\n+bad_lower(int lhs, int rhs)\n+{\n+  if (lhs == 0)\n+    return true;\n+\n+  return lhs < rhs;\n+}\n+\n+void test02()\n+{\n+  int is[] { 0, 1, 2, 3 };\n+  std::lexicographical_compare(is, is + 4, is, is + 4, bad_lower);\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "c87b3e17dbd9feb289e0ad855302012b724496ca", "filename": "libstdc++-v3/testsuite/25_algorithms/lower_bound/debug/irreflexive.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e4e5edce30e6340a8e42e26a19adb2418055c5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fdebug%2Firreflexive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e4e5edce30e6340a8e42e26a19adb2418055c5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fdebug%2Firreflexive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fdebug%2Firreflexive.cc?ref=41e4e5edce30e6340a8e42e26a19adb2418055c5", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-require-debug-mode \"\" }\n+// { dg-do compile }\n+\n+#include <algorithm>\n+\n+struct A\n+{\n+  A(int i) : _i(i)\n+  { }\n+\n+  int _i;\n+};\n+\n+// Only knowns how to compare an A with an int.\n+struct A_int_comparer\n+{\n+  bool\n+  operator()(A a, int i) const\n+  { return a._i < i; }\n+\n+  bool\n+  operator()(int i, A a) const\n+  { return i < a._i; }\n+};\n+\n+void test01()\n+{\n+  A as[] { 0, 1, 2, 3 };\n+  std::lower_bound(as, as + 4, 1, A_int_comparer());\n+}"}, {"sha": "0218a269e19ea827259100a1d4f7eed18611b692", "filename": "libstdc++-v3/testsuite/25_algorithms/partial_sort_copy/debug/irreflexive_neg.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e4e5edce30e6340a8e42e26a19adb2418055c5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2Fdebug%2Firreflexive_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e4e5edce30e6340a8e42e26a19adb2418055c5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2Fdebug%2Firreflexive_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2Fdebug%2Firreflexive_neg.cc?ref=41e4e5edce30e6340a8e42e26a19adb2418055c5", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-require-debug-mode \"\" }\n+// { dg-do run { xfail *-*-* } }\n+\n+#include <algorithm>\n+\n+bool\n+bad_lower(int lhs, int rhs)\n+{\n+  if (lhs == 0)\n+    return true;\n+\n+  return lhs < rhs;\n+}\n+\n+void test01()\n+{\n+  int ins[] { 0, 1, 2, 3 };\n+  int outs[] { 9, 9 };\n+  std::partial_sort_copy(ins, ins + 4, outs, outs + 2, bad_lower);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}