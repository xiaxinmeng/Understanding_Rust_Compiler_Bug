{"sha": "a306451c69c32c01b8c498d321502a5a595fdd41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMwNjQ1MWM2OWMzMmMwMWI4YzQ5OGQzMjE1MDJhNWE1OTVmZGQ0MQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-07-18T10:51:46Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-07-18T10:51:46Z"}, "message": "typeck.c (comp_target_parms): Remove obsolete parameter.\n\n\t* typeck.c (comp_target_parms): Remove obsolete parameter.\n\t(comp_target_types): Adjust.\n\nFrom-SVN: r35118", "tree": {"sha": "5deeac2d02bcf3d621dad304deb63176e3842216", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5deeac2d02bcf3d621dad304deb63176e3842216"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a306451c69c32c01b8c498d321502a5a595fdd41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a306451c69c32c01b8c498d321502a5a595fdd41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a306451c69c32c01b8c498d321502a5a595fdd41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a306451c69c32c01b8c498d321502a5a595fdd41/comments", "author": null, "committer": null, "parents": [{"sha": "4c6b3b2af062645c2e744010d4fc2b3c6a4af035", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c6b3b2af062645c2e744010d4fc2b3c6a4af035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c6b3b2af062645c2e744010d4fc2b3c6a4af035"}], "stats": {"total": 28, "additions": 10, "deletions": 18}, "files": [{"sha": "4aa940379a7dfb09bdae6d72696e3197c86c576e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a306451c69c32c01b8c498d321502a5a595fdd41/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a306451c69c32c01b8c498d321502a5a595fdd41/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a306451c69c32c01b8c498d321502a5a595fdd41", "patch": "@@ -1,3 +1,8 @@\n+2000-07-18  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* typeck.c (comp_target_parms): Remove obsolete parameter.\n+\t(comp_target_types): Adjust.\n+\n 2000-07-17  Jason Merrill  <jason@redhat.com>\n \n \t* typeck.c (mark_addressable): Never set TREE_USED."}, {"sha": "16a50c37bbfa0cdc211494ddaa0fd7da7982eb7d", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a306451c69c32c01b8c498d321502a5a595fdd41/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a306451c69c32c01b8c498d321502a5a595fdd41/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=a306451c69c32c01b8c498d321502a5a595fdd41", "patch": "@@ -46,7 +46,7 @@ static tree convert_for_assignment PARAMS ((tree, tree, const char *, tree,\n \t\t\t\t\t  int));\n static tree pointer_int_sum PARAMS ((enum tree_code, tree, tree));\n static tree rationalize_conditional_expr PARAMS ((enum tree_code, tree));\n-static int comp_target_parms PARAMS ((tree, tree, int));\n+static int comp_target_parms PARAMS ((tree, tree));\n static int comp_ptr_ttypes_real PARAMS ((tree, tree, int));\n static int comp_ptr_ttypes_const PARAMS ((tree, tree));\n static int comp_ptr_ttypes_reinterpret PARAMS ((tree, tree));\n@@ -1251,7 +1251,7 @@ comp_target_types (ttl, ttr, nptrs)\n \t  argsr = TREE_CHAIN (argsr);\n \t}\n \n-\tswitch (comp_target_parms (argsl, argsr, 1))\n+\tswitch (comp_target_parms (argsl, argsr))\n \t  {\n \t  case 0:\n \t    return 0;\n@@ -1472,9 +1472,8 @@ compparms (parms1, parms2)\n    (jason 17 Apr 1997)  */\n \n static int\n-comp_target_parms (parms1, parms2, strict)\n+comp_target_parms (parms1, parms2)\n      tree parms1, parms2;\n-     int strict;\n {\n   register tree t1 = parms1, t2 = parms2;\n   int warn_contravariance = 0;\n@@ -1504,13 +1503,7 @@ comp_target_parms (parms1, parms2, strict)\n       /* If one parmlist is shorter than the other,\n \t they fail to match, unless STRICT is <= 0.  */\n       if (t1 == 0 || t2 == 0)\n-\t{\n-\t  if (strict > 0)\n-\t    return 0;\n-\t  if (strict < 0)\n-\t    return 1 + warn_contravariance;\n-\t  return ((t1 && TREE_PURPOSE (t1)) + warn_contravariance);\n-\t}\n+\treturn 0;\n       p1 = TREE_VALUE (t1);\n       p2 = TREE_VALUE (t2);\n       if (same_type_p (p1, p2))\n@@ -1523,11 +1516,6 @@ comp_target_parms (parms1, parms2, strict)\n \t  || (TREE_CODE (p1) == REFERENCE_TYPE\n \t      && TREE_CODE (p2) == REFERENCE_TYPE))\n \t{\n-\t  if (strict <= 0\n-\t      && (TYPE_MAIN_VARIANT (TREE_TYPE (p1))\n-\t\t  == TYPE_MAIN_VARIANT (TREE_TYPE (p2))))\n-\t    continue;\n-\n \t  /* The following is wrong for contravariance,\n \t     but many programs depend on it.  */\n \t  if (TREE_TYPE (p1) == void_type_node)\n@@ -1550,8 +1538,7 @@ comp_target_parms (parms1, parms2, strict)\n \t      warn_contravariance = 1;\n \t      continue;\n \t    }\n-\t  if (strict != 0)\n-\t    return 0;\n+\t  return 0;\n \t}\n     }\n   return warn_contravariance ? -1 : 1;"}]}