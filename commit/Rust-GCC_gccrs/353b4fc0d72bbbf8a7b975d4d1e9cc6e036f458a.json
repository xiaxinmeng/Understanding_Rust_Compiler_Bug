{"sha": "353b4fc0d72bbbf8a7b975d4d1e9cc6e036f458a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUzYjRmYzBkNzJiYmJmOGE3Yjk3NWQ0ZDFlOWNjNmUwMzZmNDU4YQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-02-24T21:52:00Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-02-24T21:52:00Z"}, "message": "re PR c++/9836 (Error with typdefs in partial specializations of classes)\n\n\tPR c++/9836\n\t* cp-tree.h (CLASSTYPE_PRIMARY_TEMPLATE): Do not skip from\n\tspecializations back to the main template.\n\t* parser.c (cp_parser_diagnose_invalid_type_name):Adjust use.\n\t* pt.c (resolve_typename_type): Likewise.\n\n\tPR c++/9836\n\t* g++.dg/template/spec6.C: New test.\n\nFrom-SVN: r63383", "tree": {"sha": "aea7c328c45ca231ae6c3de7a76a3787a6f4bbc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aea7c328c45ca231ae6c3de7a76a3787a6f4bbc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/353b4fc0d72bbbf8a7b975d4d1e9cc6e036f458a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/353b4fc0d72bbbf8a7b975d4d1e9cc6e036f458a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/353b4fc0d72bbbf8a7b975d4d1e9cc6e036f458a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/353b4fc0d72bbbf8a7b975d4d1e9cc6e036f458a/comments", "author": null, "committer": null, "parents": [{"sha": "2afced11918b76955f3262608cb4c5f66350fcdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2afced11918b76955f3262608cb4c5f66350fcdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2afced11918b76955f3262608cb4c5f66350fcdc"}], "stats": {"total": 39, "additions": 31, "deletions": 8}, "files": [{"sha": "e793ab10893322f61069a251840e14178d5a5908", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/353b4fc0d72bbbf8a7b975d4d1e9cc6e036f458a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/353b4fc0d72bbbf8a7b975d4d1e9cc6e036f458a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=353b4fc0d72bbbf8a7b975d4d1e9cc6e036f458a", "patch": "@@ -1,3 +1,11 @@\n+2003-02-24  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/9836\n+\t* cp-tree.h (CLASSTYPE_PRIMARY_TEMPLATE): Do not skip from\n+\tspecializations back to the main template.\n+\t* parser.c (cp_parser_diagnose_invalid_type_name):Adjust use.\n+\t* pt.c (resolve_typename_type): Likewise.\n+\n 2003-02-24  Jeffrey D. Oldham  <oldham@codesourcery.com>\n \n \tPR c++/9778"}, {"sha": "8e44bbb9efc97984625b45cb57cbc245c5780f51", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/353b4fc0d72bbbf8a7b975d4d1e9cc6e036f458a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/353b4fc0d72bbbf8a7b975d4d1e9cc6e036f458a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=353b4fc0d72bbbf8a7b975d4d1e9cc6e036f458a", "patch": "@@ -2317,10 +2317,12 @@ struct lang_decl GTY(())\n   TI_ARGS (ENUM_TEMPLATE_INFO (NODE))\n \n /* For a template instantiation TYPE, returns the TYPE corresponding\n-   to the primary template.  */\n-#define CLASSTYPE_PRIMARY_TEMPLATE_TYPE(TYPE)\t\t\t\t\\\n-  TREE_TYPE (DECL_TEMPLATE_RESULT (DECL_PRIMARY_TEMPLATE\t\t\\\n-\t\t\t\t   (CLASSTYPE_TI_TEMPLATE ((TYPE)))))\n+   to the primary template.  Otherwise returns TYPE itself.  */\n+#define CLASSTYPE_PRIMARY_TEMPLATE_TYPE(TYPE)\t\t\t\t\t\t\\\n+  ((CLASSTYPE_USE_TEMPLATE ((TYPE)) && !CLASSTYPE_TEMPLATE_SPECIALIZATION ((TYPE)))\t\\\n+   ? TREE_TYPE (DECL_TEMPLATE_RESULT (DECL_PRIMARY_TEMPLATE\t\t\t\t\\\n+\t\t\t\t      (CLASSTYPE_TI_TEMPLATE ((TYPE)))))\t\t\\\n+   : (TYPE))\n \n /* Like DECL_TI_TEMPLATE, but for an ENUMERAL_, RECORD_, or UNION_TYPE.  */\n #define TYPE_TI_TEMPLATE(NODE)\t\t\t\\"}, {"sha": "17b7224cb6e1609d23942139be3df8ef656a7524", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/353b4fc0d72bbbf8a7b975d4d1e9cc6e036f458a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/353b4fc0d72bbbf8a7b975d4d1e9cc6e036f458a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=353b4fc0d72bbbf8a7b975d4d1e9cc6e036f458a", "patch": "@@ -1953,8 +1953,7 @@ cp_parser_diagnose_invalid_type_name (cp_parser *parser)\n \t\t  /* Go from a particular instantiation of the\n \t\t     template (which will have an empty TYPE_FIELDs),\n \t\t     to the main version.  */\n-\t\t  if (CLASSTYPE_USE_TEMPLATE (base_type))\n-\t\t    base_type = CLASSTYPE_PRIMARY_TEMPLATE_TYPE (base_type);\n+\t\t  base_type = CLASSTYPE_PRIMARY_TEMPLATE_TYPE (base_type);\n \t\t  for (field = TYPE_FIELDS (base_type);\n \t\t       field;\n \t\t       field = TREE_CHAIN (field))"}, {"sha": "a5425f34b4ab7cc1a5df9af0196197ba31bafa72", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/353b4fc0d72bbbf8a7b975d4d1e9cc6e036f458a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/353b4fc0d72bbbf8a7b975d4d1e9cc6e036f458a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=353b4fc0d72bbbf8a7b975d4d1e9cc6e036f458a", "patch": "@@ -11530,8 +11530,7 @@ resolve_typename_type (tree type, bool only_current_p)\n     return error_mark_node;\n   /* If SCOPE is a partial instantiation, it will not have a valid\n      TYPE_FIELDS list, so use the original template.  */\n-  if (CLASSTYPE_USE_TEMPLATE (scope))\n-    scope = CLASSTYPE_PRIMARY_TEMPLATE_TYPE (scope);\n+  scope = CLASSTYPE_PRIMARY_TEMPLATE_TYPE (scope);\n   /* Enter the SCOPE so that name lookup will be resolved as if we\n      were in the class definition.  In particular, SCOPE will no\n      longer be considered a dependent type.  */"}, {"sha": "b88756febc79343b2646256566f148f7c2e7506b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/353b4fc0d72bbbf8a7b975d4d1e9cc6e036f458a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/353b4fc0d72bbbf8a7b975d4d1e9cc6e036f458a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=353b4fc0d72bbbf8a7b975d4d1e9cc6e036f458a", "patch": "@@ -1,3 +1,8 @@\n+2003-02-24  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/9836\n+\t* g++.dg/template/spec6.C: New test.\n+\n 2003-02-24  Jeff Law  <law@redhat.com>\n \n \t* gcc.c-torture/compile/20030224-1.c: New test for ia32 backend bug."}, {"sha": "915b8331252140d952ea44f7ae2d12e7588f1bb5", "filename": "gcc/testsuite/g++.dg/template/spec6.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/353b4fc0d72bbbf8a7b975d4d1e9cc6e036f458a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/353b4fc0d72bbbf8a7b975d4d1e9cc6e036f458a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec6.C?ref=353b4fc0d72bbbf8a7b975d4d1e9cc6e036f458a", "patch": "@@ -0,0 +1,10 @@\n+template <bool, int> struct X {};\n+\n+template <bool C>    struct X<C,1> {\n+    typedef double* type;\n+    type foo () const;\n+};\n+\n+template <bool C>\n+typename X<C,1>::type\n+X<C,1>::foo () const {}"}]}