{"sha": "e49ceff2d177870795b5f65b9e0c62821465481f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ5Y2VmZjJkMTc3ODcwNzk1YjVmNjViOWUwYzYyODIxNDY1NDgxZg==", "commit": {"author": {"name": "Laurynas Biveinis", "email": "lauras@softhome.net", "date": "2001-03-05T04:44:16Z"}, "committer": {"name": "Laurynas Biveinis", "email": "lauras@gcc.gnu.org", "date": "2001-03-05T04:44:16Z"}, "message": "ctype_base.h (ctype_base): fix __to_type definition.\n\n\n        * config/os/djgpp/ctype_base.h (ctype_base): fix __to_type\n        definition. Replace enum with static const variables.\n\n        * config/os/djgpp/ctype_inline.h (ctype<char>::is): remove\n        throw specification, fix typos, use <static_cast>.\n        (ctype<char>::scan_is): remove throw specification.\n        (ctype<char>::scan_not): likewise.\n\n        * config/os/djgpp/ctype_noninline.h (ctype<char>::ctype): fix typo.\n        (ctype<char>::do_toupper(char)): use <static_cast>.\n        (ctype<char>::do_toupper(char *, const char *)): likewise.\n        (ctype<char>::do_tolower(char)): likewise.\n        (ctype<char>::do_tolower(char *, const char *)): likewise.\n\nFrom-SVN: r40243", "tree": {"sha": "6dac6cd09de97d420090c14fee35bcc0b408897a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dac6cd09de97d420090c14fee35bcc0b408897a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e49ceff2d177870795b5f65b9e0c62821465481f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e49ceff2d177870795b5f65b9e0c62821465481f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e49ceff2d177870795b5f65b9e0c62821465481f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e49ceff2d177870795b5f65b9e0c62821465481f/comments", "author": null, "committer": null, "parents": [{"sha": "d9fd5aae76841f6eb601ef0f7fd9ae9869355473", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9fd5aae76841f6eb601ef0f7fd9ae9869355473", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9fd5aae76841f6eb601ef0f7fd9ae9869355473"}], "stats": {"total": 69, "additions": 42, "deletions": 27}, "files": [{"sha": "05aef915a81939ca4f46552ca9f2bbc7f4cdb3be", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49ceff2d177870795b5f65b9e0c62821465481f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49ceff2d177870795b5f65b9e0c62821465481f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e49ceff2d177870795b5f65b9e0c62821465481f", "patch": "@@ -1,3 +1,19 @@\n+2001-03-05  Laurynas Biveinis  <lauras@softhome.net>\n+\n+        * config/os/djgpp/ctype_base.h (ctype_base): fix __to_type\n+\tdefinition. Replace enum with static const variables.\n+\t\t\n+\t* config/os/djgpp/ctype_inline.h (ctype<char>::is): remove\n+\tthrow specification, fix typos, use <static_cast>.\n+\t(ctype<char>::scan_is): remove throw specification.\n+\t(ctype<char>::scan_not): likewise.\n+\t\t\t\t\t\t\n+\t* config/os/djgpp/ctype_noninline.h (ctype<char>::ctype): fix typo.\n+\t(ctype<char>::do_toupper(char)): use <static_cast>.\n+\t(ctype<char>::do_toupper(char *, const char *)): likewise.\n+\t(ctype<char>::do_tolower(char)): likewise.\n+\t(ctype<char>::do_tolower(char *, const char *)): likewise.\n+\t\t\t\t\t\t\t\t\t\t\t\n 2001-03-04  Phil Edwards  <pme@sources.redhat.com>\n \n \thttp://gcc.gnu.org/ml/libstdc++/2001-03/msg00015.html"}, {"sha": "018e20e4a4ab805d56a5087c23927f6cf0c706e7", "filename": "libstdc++-v3/config/os/djgpp/bits/ctype_base.h", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49ceff2d177870795b5f65b9e0c62821465481f/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fbits%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49ceff2d177870795b5f65b9e0c62821465481f/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fbits%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fbits%2Fctype_base.h?ref=e49ceff2d177870795b5f65b9e0c62821465481f", "patch": "@@ -36,22 +36,21 @@\n     typedef unsigned short \tmask;\n     \n     // Non-standard typedefs.\n-    typedef unsigned char\t__to_type;\n-\n-    enum\n-    {\n-      space = __dj_ISSPACE,\t// Whitespace\n-      print = __dj_ISPRINT,\t// Printing\n-      cntrl = __dj_ISCNTRL,\t// Control character\n-      upper = __dj_ISUPPER,\t// UPPERCASE\n-      lower = __dj_ISLOWER,\t// lowercase\n-      alpha = __dj_ISALPHA,\t// Alphabetic\n-      digit = __dj_ISDIGIT,\t// Numeric\n-      punct = __dj_ISPUNCT,     // Punctuation\n-      xdigit = __dj_ISXDIGIT,   // Hexadecimal numeric\n-      alnum = __dj_ISAL,        // Alphanumeric\n-      graph = __dj_ISGRAPH\t// Graphical\n-    };\n+    typedef unsigned char *     __to_type;\n+\n+    // NB: Offsets into ctype<char>::_M_table force a particular size\n+    // on the mask type. Because of this, we don't use an enum.\n+    static const mask space = __dj_ISSPACE;\t// Whitespace\n+    static const mask print = __dj_ISPRINT;\t// Printing\n+    static const mask cntrl = __dj_ISCNTRL;\t// Control character\n+    static const mask upper = __dj_ISUPPER;\t// UPPERCASE\n+    static const mask lower = __dj_ISLOWER;\t// lowercase\n+    static const mask alpha = __dj_ISALPHA;\t// Alphabetic\n+    static const mask digit = __dj_ISDIGIT;\t// Numeric\n+    static const mask punct = __dj_ISPUNCT;     // Punctuation\n+    static const mask xdigit = __dj_ISXDIGIT;   // Hexadecimal numeric\n+    static const mask alnum = __dj_ISALPHA;     // Alphanumeric\n+    static const mask graph = __dj_ISGRAPH;\t// Graphical\n   };\n \n "}, {"sha": "21958c43641c3f8ef132a548cc656db8c0e0f2a8", "filename": "libstdc++-v3/config/os/djgpp/bits/ctype_inline.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49ceff2d177870795b5f65b9e0c62821465481f/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49ceff2d177870795b5f65b9e0c62821465481f/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fbits%2Fctype_inline.h?ref=e49ceff2d177870795b5f65b9e0c62821465481f", "patch": "@@ -36,21 +36,21 @@\n   \n   bool\n   ctype<char>::\n-  is(mask __m, char __c) const throw()\n-  { return _M_table[(unsigned char)(__c + 1)] & __m; }\n+  is(mask __m, char __c) const \n+  { return _M_table[static_cast<unsigned char>(__c + 1)] & __m; }\n \n   const char*\n   ctype<char>::\n-  is(const char* __low, const char* __high, mask* __vec) const throw()\n+  is(const char* __low, const char* __high, mask* __vec) const \n   {\n     while (__low < __high)\n-      *__vec++ = _M_table[(unsigned char)(*__low++)];\n+      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];\n     return __high;\n   }\n \n   const char*\n   ctype<char>::\n-  scan_is(mask __m, const char* __low, const char* __high) const throw()\n+  scan_is(mask __m, const char* __low, const char* __high) const\n   {\n     while (__low < __high && !this->is(__m, *__low))\n       ++__low;\n@@ -59,7 +59,7 @@\n \n   const char*\n   ctype<char>::\n-  scan_not(mask __m, const char* __low, const char* __high) const throw()\n+  scan_not(mask __m, const char* __low, const char* __high) const\n   {\n     while (__low < __high && this->is(__m, *__low) != 0)\n       ++__low;"}, {"sha": "efc7958fe01358d1b360520dd963db6ae8f6e0df", "filename": "libstdc++-v3/config/os/djgpp/bits/ctype_noninline.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49ceff2d177870795b5f65b9e0c62821465481f/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49ceff2d177870795b5f65b9e0c62821465481f/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fbits%2Fctype_noninline.h?ref=e49ceff2d177870795b5f65b9e0c62821465481f", "patch": "@@ -40,7 +40,7 @@ extern unsigned char __dj_ctype_tolower[];\n   \n   ctype<char>::ctype(const mask* __table = 0, bool __del = false, \n \tsize_t __refs = 0) \n-    : _Ctype_nois<char>(__refs), \n+    : __ctype_abstract_base<char>(__refs), \n       _M_del(__table != 0 && __del), \n       _M_toupper(__dj_ctype_toupper), \n       _M_tolower(__dj_ctype_tolower),\n@@ -50,29 +50,29 @@ extern unsigned char __dj_ctype_tolower[];\n \n   char\n   ctype<char>::do_toupper(char __c) const\n-  { return _M_toupper[(int)(__c)+1]) }\n+  { return _M_toupper[static_cast<int>(__c)+1]; }\n \n   const char*\n   ctype<char>::do_toupper(char* __low, const char* __high) const\n   {\n     while (__low < __high)\n       {\n-\t*__low = ::toupper((int) *__low);\n+\t*__low = ::toupper(static_cast<int> (*__low));\n \t++__low;\n       }\n     return __high;\n   }\n \n   char\n   ctype<char>::do_tolower(char __c) const\n-  { return _M_tolower[(int)(__c)+1]) }\n+  { return _M_tolower[static_cast<int>(__c)+1]; }\n \n   const char* \n   ctype<char>::do_tolower(char* __low, const char* __high) const\n   {\n     while (__low < __high)\n       {\n-\t*__low = ::tolower((int) *__low);\n+\t*__low = ::tolower(static_cast<int> (*__low));\n \t++__low;\n       }\n     return __high;"}]}