{"sha": "ff825b8158394a01a43359efd91d0b6b8c4fa21b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY4MjViODE1ODM5NGEwMWE0MzM1OWVmZDkxZDBiNmI4YzRmYTIxYg==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-04-02T09:23:47Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-04-02T09:55:54Z"}, "message": "[ARM]: Fix for MVE ACLE intrinsics with writeback (PR94317).\n\nFollowing MVE ACLE intrinsics have an issue with writeback to the base address.\n\nvldrdq_gather_base_wb_s64, vldrdq_gather_base_wb_u64, vldrdq_gather_base_wb_z_s64, vldrdq_gather_base_wb_z_u64, vldrwq_gather_base_wb_s32, vldrwq_gather_base_wb_u32, vldrwq_gather_base_wb_z_s32, vldrwq_gather_base_wb_z_u32, vldrwq_gather_base_wb_f32, vldrwq_gather_base_wb_z_f32.\n\nThis patch fixes the bug reported in PR94317 by adding separate builtin calls to update the result and writeback to base address for the above intrinsics.\n\n2020-04-02  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\tPR target/94317\n\t* config/arm/arm-builtins.c (LDRGBWBXU_QUALIFIERS): Define.\n\t(LDRGBWBXU_Z_QUALIFIERS): Likewise.\n\t* config/arm/arm_mve.h (__arm_vldrdq_gather_base_wb_s64): Modify\n\tintrinsic defintion by adding a new builtin call to writeback into base\n\taddress.\n\t(__arm_vldrdq_gather_base_wb_u64): Likewise.\n\t(__arm_vldrdq_gather_base_wb_z_s64): Likewise.\n\t(__arm_vldrdq_gather_base_wb_z_u64): Likewise.\n\t(__arm_vldrwq_gather_base_wb_s32): Likewise.\n\t(__arm_vldrwq_gather_base_wb_u32): Likewise.\n\t(__arm_vldrwq_gather_base_wb_z_s32): Likewise.\n\t(__arm_vldrwq_gather_base_wb_z_u32): Likewise.\n\t(__arm_vldrwq_gather_base_wb_f32): Likewise.\n\t(__arm_vldrwq_gather_base_wb_z_f32): Likewise.\n\t* config/arm/arm_mve_builtins.def (vldrwq_gather_base_wb_z_u): Modify\n\tbuiltin's qualifier.\n\t(vldrdq_gather_base_wb_z_u): Likewise.\n\t(vldrwq_gather_base_wb_u): Likewise.\n\t(vldrdq_gather_base_wb_u): Likewise.\n\t(vldrwq_gather_base_wb_z_s): Likewise.\n\t(vldrwq_gather_base_wb_z_f): Likewise.\n\t(vldrdq_gather_base_wb_z_s): Likewise.\n\t(vldrwq_gather_base_wb_s): Likewise.\n\t(vldrwq_gather_base_wb_f): Likewise.\n\t(vldrdq_gather_base_wb_s): Likewise.\n\t(vldrwq_gather_base_nowb_z_u): Define builtin.\n\t(vldrdq_gather_base_nowb_z_u): Likewise.\n\t(vldrwq_gather_base_nowb_u): Likewise.\n\t(vldrdq_gather_base_nowb_u): Likewise.\n\t(vldrwq_gather_base_nowb_z_s): Likewise.\n\t(vldrwq_gather_base_nowb_z_f): Likewise.\n\t(vldrdq_gather_base_nowb_z_s): Likewise.\n\t(vldrwq_gather_base_nowb_s): Likewise.\n\t(vldrwq_gather_base_nowb_f): Likewise.\n\t(vldrdq_gather_base_nowb_s): Likewise.\n\t* config/arm/mve.md (mve_vldrwq_gather_base_nowb_<supf>v4si): Define RTL\n\tpattern.\n\t(mve_vldrwq_gather_base_wb_<supf>v4si): Modify RTL pattern.\n\t(mve_vldrwq_gather_base_nowb_z_<supf>v4si): Define RTL pattern.\n\t(mve_vldrwq_gather_base_wb_z_<supf>v4si): Modify RTL pattern.\n\t(mve_vldrwq_gather_base_wb_fv4sf): Modify RTL pattern.\n\t(mve_vldrwq_gather_base_nowb_fv4sf): Define RTL pattern.\n\t(mve_vldrwq_gather_base_wb_z_fv4sf): Modify RTL pattern.\n\t(mve_vldrwq_gather_base_nowb_z_fv4sf): Define RTL pattern.\n\t(mve_vldrdq_gather_base_nowb_<supf>v4di): Define RTL pattern.\n\t(mve_vldrdq_gather_base_wb_<supf>v4di):  Modify RTL pattern.\n\t(mve_vldrdq_gather_base_nowb_z_<supf>v4di): Define RTL pattern.\n\t(mve_vldrdq_gather_base_wb_z_<supf>v4di):  Modify RTL pattern.\n\ngcc/testsuite/ChangeLog:\n\n2020-04-02  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\tPR target/94317\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_s64.c: Modify.\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_z_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_z_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_u32.c: Likewise.", "tree": {"sha": "b8cc5a5426af87ba3cbcd7c235a5ce72a3777a2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8cc5a5426af87ba3cbcd7c235a5ce72a3777a2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff825b8158394a01a43359efd91d0b6b8c4fa21b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff825b8158394a01a43359efd91d0b6b8c4fa21b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff825b8158394a01a43359efd91d0b6b8c4fa21b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff825b8158394a01a43359efd91d0b6b8c4fa21b/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1effaa209f9f9b4bcf4cd7c6fcfccaf5e59a2b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1effaa209f9f9b4bcf4cd7c6fcfccaf5e59a2b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1effaa209f9f9b4bcf4cd7c6fcfccaf5e59a2b2"}], "stats": {"total": 293, "additions": 250, "deletions": 43}, "files": [{"sha": "6df3a17a645c4c0abbddc1816aa1ed6aa7e3b507", "filename": "gcc/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff825b8158394a01a43359efd91d0b6b8c4fa21b", "patch": "@@ -1,3 +1,55 @@\n+2020-04-02  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\tPR target/94317\n+\t* config/arm/arm-builtins.c (LDRGBWBXU_QUALIFIERS): Define.\n+\t(LDRGBWBXU_Z_QUALIFIERS): Likewise.\n+\t* config/arm/arm_mve.h (__arm_vldrdq_gather_base_wb_s64): Modify\n+\tintrinsic defintion by adding a new builtin call to writeback into base\n+\taddress.\n+\t(__arm_vldrdq_gather_base_wb_u64): Likewise.\n+\t(__arm_vldrdq_gather_base_wb_z_s64): Likewise.\n+\t(__arm_vldrdq_gather_base_wb_z_u64): Likewise.\n+\t(__arm_vldrwq_gather_base_wb_s32): Likewise.\n+\t(__arm_vldrwq_gather_base_wb_u32): Likewise.\n+\t(__arm_vldrwq_gather_base_wb_z_s32): Likewise.\n+\t(__arm_vldrwq_gather_base_wb_z_u32): Likewise.\n+\t(__arm_vldrwq_gather_base_wb_f32): Likewise.\n+\t(__arm_vldrwq_gather_base_wb_z_f32): Likewise.\n+\t* config/arm/arm_mve_builtins.def (vldrwq_gather_base_wb_z_u): Modify\n+\tbuiltin's qualifier.\n+\t(vldrdq_gather_base_wb_z_u): Likewise.\n+\t(vldrwq_gather_base_wb_u): Likewise.\n+\t(vldrdq_gather_base_wb_u): Likewise.\n+\t(vldrwq_gather_base_wb_z_s): Likewise.\n+\t(vldrwq_gather_base_wb_z_f): Likewise.\n+\t(vldrdq_gather_base_wb_z_s): Likewise.\n+\t(vldrwq_gather_base_wb_s): Likewise.\n+\t(vldrwq_gather_base_wb_f): Likewise.\n+\t(vldrdq_gather_base_wb_s): Likewise.\n+\t(vldrwq_gather_base_nowb_z_u): Define builtin.\n+\t(vldrdq_gather_base_nowb_z_u): Likewise.\n+\t(vldrwq_gather_base_nowb_u): Likewise.\n+\t(vldrdq_gather_base_nowb_u): Likewise.\n+\t(vldrwq_gather_base_nowb_z_s): Likewise.\n+\t(vldrwq_gather_base_nowb_z_f): Likewise.\n+\t(vldrdq_gather_base_nowb_z_s): Likewise.\n+\t(vldrwq_gather_base_nowb_s): Likewise.\n+\t(vldrwq_gather_base_nowb_f): Likewise.\n+\t(vldrdq_gather_base_nowb_s): Likewise.\n+\t* config/arm/mve.md (mve_vldrwq_gather_base_nowb_<supf>v4si): Define RTL\n+\tpattern.\n+\t(mve_vldrwq_gather_base_wb_<supf>v4si): Modify RTL pattern.\n+\t(mve_vldrwq_gather_base_nowb_z_<supf>v4si): Define RTL pattern.\n+\t(mve_vldrwq_gather_base_wb_z_<supf>v4si): Modify RTL pattern.\n+\t(mve_vldrwq_gather_base_wb_fv4sf): Modify RTL pattern.\n+\t(mve_vldrwq_gather_base_nowb_fv4sf): Define RTL pattern.\n+\t(mve_vldrwq_gather_base_wb_z_fv4sf): Modify RTL pattern.\n+\t(mve_vldrwq_gather_base_nowb_z_fv4sf): Define RTL pattern.\n+\t(mve_vldrdq_gather_base_nowb_<supf>v4di): Define RTL pattern.\n+\t(mve_vldrdq_gather_base_wb_<supf>v4di):  Modify RTL pattern.\n+\t(mve_vldrdq_gather_base_nowb_z_<supf>v4di): Define RTL pattern.\n+\t(mve_vldrdq_gather_base_wb_z_<supf>v4di):  Modify RTL pattern.\n+\n 2020-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* config/s390/vector.md (\"<ti*>add<mode>3\", \"mul<mode>3\")"}, {"sha": "832b9107424fd9a4a0ee272b773b3d0929172370", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=ff825b8158394a01a43359efd91d0b6b8c4fa21b", "patch": "@@ -718,6 +718,17 @@ arm_quinop_unone_unone_unone_unone_imm_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n #define QUINOP_UNONE_UNONE_UNONE_UNONE_IMM_UNONE_QUALIFIERS \\\n   (arm_quinop_unone_unone_unone_unone_imm_unone_qualifiers)\n \n+static enum arm_type_qualifiers\n+arm_ldrgbwbxu_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_immediate};\n+#define LDRGBWBXU_QUALIFIERS (arm_ldrgbwbxu_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_ldrgbwbxu_z_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_immediate,\n+      qualifier_unsigned};\n+#define LDRGBWBXU_Z_QUALIFIERS (arm_ldrgbwbxu_z_qualifiers)\n+\n static enum arm_type_qualifiers\n arm_ldrgbwbs_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_none, qualifier_unsigned, qualifier_immediate};"}, {"sha": "47a6268e0800958f49d46238fe34ec749d243929", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=ff825b8158394a01a43359efd91d0b6b8c4fa21b", "patch": "@@ -13903,8 +13903,8 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vldrdq_gather_base_wb_s64 (uint64x2_t * __addr, const int __offset)\n {\n   int64x2_t\n-  result = __builtin_mve_vldrdq_gather_base_wb_sv2di (*__addr, __offset);\n-  __addr += __offset;\n+  result = __builtin_mve_vldrdq_gather_base_nowb_sv2di (*__addr, __offset);\n+  *__addr = __builtin_mve_vldrdq_gather_base_wb_sv2di (*__addr, __offset);\n   return result;\n }\n \n@@ -13913,8 +13913,8 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vldrdq_gather_base_wb_u64 (uint64x2_t * __addr, const int __offset)\n {\n   uint64x2_t\n-  result = __builtin_mve_vldrdq_gather_base_wb_uv2di (*__addr, __offset);\n-  __addr += __offset;\n+  result = __builtin_mve_vldrdq_gather_base_nowb_uv2di (*__addr, __offset);\n+  *__addr = __builtin_mve_vldrdq_gather_base_wb_uv2di (*__addr, __offset);\n   return result;\n }\n \n@@ -13923,8 +13923,8 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vldrdq_gather_base_wb_z_s64 (uint64x2_t * __addr, const int __offset, mve_pred16_t __p)\n {\n   int64x2_t\n-  result = __builtin_mve_vldrdq_gather_base_wb_z_sv2di (*__addr, __offset, __p);\n-  __addr += __offset;\n+  result = __builtin_mve_vldrdq_gather_base_nowb_z_sv2di (*__addr, __offset, __p);\n+  *__addr = __builtin_mve_vldrdq_gather_base_wb_z_sv2di (*__addr, __offset, __p);\n   return result;\n }\n \n@@ -13933,8 +13933,8 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vldrdq_gather_base_wb_z_u64 (uint64x2_t * __addr, const int __offset, mve_pred16_t __p)\n {\n   uint64x2_t\n-  result = __builtin_mve_vldrdq_gather_base_wb_z_uv2di (*__addr, __offset, __p);\n-  __addr += __offset;\n+  result = __builtin_mve_vldrdq_gather_base_nowb_z_uv2di (*__addr, __offset, __p);\n+  *__addr = __builtin_mve_vldrdq_gather_base_wb_z_uv2di (*__addr, __offset, __p);\n   return result;\n }\n \n@@ -13943,8 +13943,8 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vldrwq_gather_base_wb_s32 (uint32x4_t * __addr, const int __offset)\n {\n   int32x4_t\n-  result = __builtin_mve_vldrwq_gather_base_wb_sv4si (*__addr, __offset);\n-  __addr += __offset;\n+  result = __builtin_mve_vldrwq_gather_base_nowb_sv4si (*__addr, __offset);\n+  *__addr = __builtin_mve_vldrwq_gather_base_wb_sv4si (*__addr, __offset);\n   return result;\n }\n \n@@ -13953,8 +13953,8 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vldrwq_gather_base_wb_u32 (uint32x4_t * __addr, const int __offset)\n {\n   uint32x4_t\n-  result = __builtin_mve_vldrwq_gather_base_wb_uv4si (*__addr, __offset);\n-  __addr += __offset;\n+  result = __builtin_mve_vldrwq_gather_base_nowb_uv4si (*__addr, __offset);\n+  *__addr = __builtin_mve_vldrwq_gather_base_wb_uv4si (*__addr, __offset);\n   return result;\n }\n \n@@ -13963,8 +13963,8 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vldrwq_gather_base_wb_z_s32 (uint32x4_t * __addr, const int __offset, mve_pred16_t __p)\n {\n   int32x4_t\n-  result = __builtin_mve_vldrwq_gather_base_wb_z_sv4si (*__addr, __offset, __p);\n-  __addr += __offset;\n+  result = __builtin_mve_vldrwq_gather_base_nowb_z_sv4si (*__addr, __offset, __p);\n+  *__addr = __builtin_mve_vldrwq_gather_base_wb_z_sv4si (*__addr, __offset, __p);\n   return result;\n }\n \n@@ -13973,8 +13973,8 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vldrwq_gather_base_wb_z_u32 (uint32x4_t * __addr, const int __offset, mve_pred16_t __p)\n {\n   uint32x4_t\n-  result = __builtin_mve_vldrwq_gather_base_wb_z_uv4si (*__addr, __offset, __p);\n-  __addr += __offset;\n+  result = __builtin_mve_vldrwq_gather_base_nowb_z_uv4si (*__addr, __offset, __p);\n+  *__addr = __builtin_mve_vldrwq_gather_base_wb_z_uv4si (*__addr, __offset, __p);\n   return result;\n }\n \n@@ -19372,8 +19372,8 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vldrwq_gather_base_wb_f32 (uint32x4_t * __addr, const int __offset)\n {\n   float32x4_t\n-  result = __builtin_mve_vldrwq_gather_base_wb_fv4sf (*__addr, __offset);\n-  __addr += __offset;\n+  result = __builtin_mve_vldrwq_gather_base_nowb_fv4sf (*__addr, __offset);\n+  *__addr = __builtin_mve_vldrwq_gather_base_wb_fv4sf (*__addr, __offset);\n   return result;\n }\n \n@@ -19382,8 +19382,8 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vldrwq_gather_base_wb_z_f32 (uint32x4_t * __addr, const int __offset, mve_pred16_t __p)\n {\n   float32x4_t\n-  result = __builtin_mve_vldrwq_gather_base_wb_z_fv4sf (*__addr, __offset, __p);\n-  __addr += __offset;\n+  result = __builtin_mve_vldrwq_gather_base_nowb_z_fv4sf (*__addr, __offset, __p);\n+  *__addr = __builtin_mve_vldrwq_gather_base_wb_z_fv4sf (*__addr, __offset, __p);\n   return result;\n }\n "}, {"sha": "753e40a951d071c1ab77476a1cc4779e91689178", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=ff825b8158394a01a43359efd91d0b6b8c4fa21b", "patch": "@@ -847,16 +847,26 @@ VAR1 (STRSBWBS, vstrdq_scatter_base_wb_s, v2di)\n VAR1 (STRSBWBS_P, vstrwq_scatter_base_wb_p_s, v4si)\n VAR1 (STRSBWBS_P, vstrwq_scatter_base_wb_p_f, v4sf)\n VAR1 (STRSBWBS_P, vstrdq_scatter_base_wb_p_s, v2di)\n-VAR1 (LDRGBWBU_Z, vldrwq_gather_base_wb_z_u, v4si)\n-VAR1 (LDRGBWBU_Z, vldrdq_gather_base_wb_z_u, v2di)\n-VAR1 (LDRGBWBU, vldrwq_gather_base_wb_u, v4si)\n-VAR1 (LDRGBWBU, vldrdq_gather_base_wb_u, v2di)\n-VAR1 (LDRGBWBS_Z, vldrwq_gather_base_wb_z_s, v4si)\n-VAR1 (LDRGBWBS_Z, vldrwq_gather_base_wb_z_f, v4sf)\n-VAR1 (LDRGBWBS_Z, vldrdq_gather_base_wb_z_s, v2di)\n-VAR1 (LDRGBWBS, vldrwq_gather_base_wb_s, v4si)\n-VAR1 (LDRGBWBS, vldrwq_gather_base_wb_f, v4sf)\n-VAR1 (LDRGBWBS, vldrdq_gather_base_wb_s, v2di)\n+VAR1 (LDRGBWBU_Z, vldrwq_gather_base_nowb_z_u, v4si)\n+VAR1 (LDRGBWBU_Z, vldrdq_gather_base_nowb_z_u, v2di)\n+VAR1 (LDRGBWBU, vldrwq_gather_base_nowb_u, v4si)\n+VAR1 (LDRGBWBU, vldrdq_gather_base_nowb_u, v2di)\n+VAR1 (LDRGBWBS_Z, vldrwq_gather_base_nowb_z_s, v4si)\n+VAR1 (LDRGBWBS_Z, vldrwq_gather_base_nowb_z_f, v4sf)\n+VAR1 (LDRGBWBS_Z, vldrdq_gather_base_nowb_z_s, v2di)\n+VAR1 (LDRGBWBS, vldrwq_gather_base_nowb_s, v4si)\n+VAR1 (LDRGBWBS, vldrwq_gather_base_nowb_f, v4sf)\n+VAR1 (LDRGBWBS, vldrdq_gather_base_nowb_s, v2di)\n+VAR1 (LDRGBWBXU_Z, vldrdq_gather_base_wb_z_s, v2di)\n+VAR1 (LDRGBWBXU_Z, vldrdq_gather_base_wb_z_u, v2di)\n+VAR1 (LDRGBWBXU, vldrdq_gather_base_wb_s, v2di)\n+VAR1 (LDRGBWBXU, vldrdq_gather_base_wb_u, v2di)\n+VAR1 (LDRGBWBXU_Z, vldrwq_gather_base_wb_z_s, v4si)\n+VAR1 (LDRGBWBXU_Z, vldrwq_gather_base_wb_z_f, v4sf)\n+VAR1 (LDRGBWBXU_Z, vldrwq_gather_base_wb_z_u, v4si)\n+VAR1 (LDRGBWBXU, vldrwq_gather_base_wb_s, v4si)\n+VAR1 (LDRGBWBXU, vldrwq_gather_base_wb_f, v4sf)\n+VAR1 (LDRGBWBXU, vldrwq_gather_base_wb_u, v4si)\n VAR1 (BINOP_NONE_NONE_NONE, vadciq_s, v4si)\n VAR1 (BINOP_UNONE_UNONE_UNONE, vadciq_u, v4si)\n VAR1 (BINOP_NONE_NONE_NONE, vadcq_s, v4si)"}, {"sha": "d1028f4542b4972b4080e46544c86d625d77383a", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 93, "deletions": 3, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=ff825b8158394a01a43359efd91d0b6b8c4fa21b", "patch": "@@ -10419,6 +10419,20 @@\n    (match_operand:SI 2 \"mve_vldrd_immediate\")\n    (unspec:V4SI [(const_int 0)] VLDRWGBWBQ)]\n   \"TARGET_HAVE_MVE\"\n+{\n+  rtx ignore_result = gen_reg_rtx (V4SImode);\n+  emit_insn (\n+  gen_mve_vldrwq_gather_base_wb_<supf>v4si_insn (ignore_result, operands[0],\n+\t\t\t\t\t\t operands[1], operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"mve_vldrwq_gather_base_nowb_<supf>v4si\"\n+  [(match_operand:V4SI 0 \"s_register_operand\")\n+   (match_operand:V4SI 1 \"s_register_operand\")\n+   (match_operand:SI 2 \"mve_vldrd_immediate\")\n+   (unspec:V4SI [(const_int 0)] VLDRWGBWBQ)]\n+  \"TARGET_HAVE_MVE\"\n {\n   rtx ignore_wb = gen_reg_rtx (V4SImode);\n   emit_insn (\n@@ -10458,6 +10472,21 @@\n    (match_operand:HI 3 \"vpr_register_operand\")\n    (unspec:V4SI [(const_int 0)] VLDRWGBWBQ)]\n   \"TARGET_HAVE_MVE\"\n+{\n+  rtx ignore_result = gen_reg_rtx (V4SImode);\n+  emit_insn (\n+  gen_mve_vldrwq_gather_base_wb_z_<supf>v4si_insn (ignore_result, operands[0],\n+\t\t\t\t\t\t   operands[1], operands[2],\n+\t\t\t\t\t\t   operands[3]));\n+  DONE;\n+})\n+(define_expand \"mve_vldrwq_gather_base_nowb_z_<supf>v4si\"\n+  [(match_operand:V4SI 0 \"s_register_operand\")\n+   (match_operand:V4SI 1 \"s_register_operand\")\n+   (match_operand:SI 2 \"mve_vldrd_immediate\")\n+   (match_operand:HI 3 \"vpr_register_operand\")\n+   (unspec:V4SI [(const_int 0)] VLDRWGBWBQ)]\n+  \"TARGET_HAVE_MVE\"\n {\n   rtx ignore_wb = gen_reg_rtx (V4SImode);\n   emit_insn (\n@@ -10487,12 +10516,26 @@\n    ops[0] = operands[0];\n    ops[1] = operands[2];\n    ops[2] = operands[3];\n-   output_asm_insn (\"vpst\\;\\tvldrwt.u32\\t%q0, [%q1, %2]!\",ops);\n+   output_asm_insn (\"vpst\\;vldrwt.u32\\t%q0, [%q1, %2]!\",ops);\n    return \"\";\n }\n   [(set_attr \"length\" \"8\")])\n \n (define_expand \"mve_vldrwq_gather_base_wb_fv4sf\"\n+  [(match_operand:V4SI 0 \"s_register_operand\")\n+   (match_operand:V4SI 1 \"s_register_operand\")\n+   (match_operand:SI 2 \"mve_vldrd_immediate\")\n+   (unspec:V4SI [(const_int 0)] VLDRWQGBWB_F)]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+  rtx ignore_result = gen_reg_rtx (V4SFmode);\n+  emit_insn (\n+  gen_mve_vldrwq_gather_base_wb_fv4sf_insn (ignore_result, operands[0],\n+\t\t\t\t\t    operands[1], operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"mve_vldrwq_gather_base_nowb_fv4sf\"\n   [(match_operand:V4SF 0 \"s_register_operand\")\n    (match_operand:V4SI 1 \"s_register_operand\")\n    (match_operand:SI 2 \"mve_vldrd_immediate\")\n@@ -10531,6 +10574,22 @@\n   [(set_attr \"length\" \"4\")])\n \n (define_expand \"mve_vldrwq_gather_base_wb_z_fv4sf\"\n+  [(match_operand:V4SI 0 \"s_register_operand\")\n+   (match_operand:V4SI 1 \"s_register_operand\")\n+   (match_operand:SI 2 \"mve_vldrd_immediate\")\n+   (match_operand:HI 3 \"vpr_register_operand\")\n+   (unspec:V4SI [(const_int 0)] VLDRWQGBWB_F)]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+  rtx ignore_result = gen_reg_rtx (V4SFmode);\n+  emit_insn (\n+  gen_mve_vldrwq_gather_base_wb_z_fv4sf_insn (ignore_result, operands[0],\n+\t\t\t\t\t      operands[1], operands[2],\n+\t\t\t\t\t      operands[3]));\n+  DONE;\n+})\n+\n+(define_expand \"mve_vldrwq_gather_base_nowb_z_fv4sf\"\n   [(match_operand:V4SF 0 \"s_register_operand\")\n    (match_operand:V4SI 1 \"s_register_operand\")\n    (match_operand:SI 2 \"mve_vldrd_immediate\")\n@@ -10566,7 +10625,7 @@\n    ops[0] = operands[0];\n    ops[1] = operands[2];\n    ops[2] = operands[3];\n-   output_asm_insn (\"vpst\\;\\tvldrwt.u32\\t%q0, [%q1, %2]!\",ops);\n+   output_asm_insn (\"vpst\\;vldrwt.u32\\t%q0, [%q1, %2]!\",ops);\n    return \"\";\n }\n   [(set_attr \"length\" \"8\")])\n@@ -10577,6 +10636,20 @@\n    (match_operand:SI 2 \"mve_vldrd_immediate\")\n    (unspec:V2DI [(const_int 0)] VLDRDGBWBQ)]\n   \"TARGET_HAVE_MVE\"\n+{\n+  rtx ignore_result = gen_reg_rtx (V2DImode);\n+  emit_insn (\n+  gen_mve_vldrdq_gather_base_wb_<supf>v2di_insn (ignore_result, operands[0],\n+\t\t\t\t\t\t operands[1], operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"mve_vldrdq_gather_base_nowb_<supf>v2di\"\n+  [(match_operand:V2DI 0 \"s_register_operand\")\n+   (match_operand:V2DI 1 \"s_register_operand\")\n+   (match_operand:SI 2 \"mve_vldrd_immediate\")\n+   (unspec:V2DI [(const_int 0)] VLDRDGBWBQ)]\n+  \"TARGET_HAVE_MVE\"\n {\n   rtx ignore_wb = gen_reg_rtx (V2DImode);\n   emit_insn (\n@@ -10585,6 +10658,7 @@\n   DONE;\n })\n \n+\n ;;\n ;; [vldrdq_gather_base_wb_s vldrdq_gather_base_wb_u]\n ;;\n@@ -10616,6 +10690,22 @@\n    (match_operand:HI 3 \"vpr_register_operand\")\n    (unspec:V2DI [(const_int 0)] VLDRDGBWBQ)]\n   \"TARGET_HAVE_MVE\"\n+{\n+  rtx ignore_result = gen_reg_rtx (V2DImode);\n+  emit_insn (\n+  gen_mve_vldrdq_gather_base_wb_z_<supf>v2di_insn (ignore_result, operands[0],\n+\t\t\t\t\t\t   operands[1], operands[2],\n+\t\t\t\t\t\t   operands[3]));\n+  DONE;\n+})\n+\n+(define_expand \"mve_vldrdq_gather_base_nowb_z_<supf>v2di\"\n+  [(match_operand:V2DI 0 \"s_register_operand\")\n+   (match_operand:V2DI 1 \"s_register_operand\")\n+   (match_operand:SI 2 \"mve_vldrd_immediate\")\n+   (match_operand:HI 3 \"vpr_register_operand\")\n+   (unspec:V2DI [(const_int 0)] VLDRDGBWBQ)]\n+  \"TARGET_HAVE_MVE\"\n {\n   rtx ignore_wb = gen_reg_rtx (V2DImode);\n   emit_insn (\n@@ -10660,7 +10750,7 @@\n    ops[0] = operands[0];\n    ops[1] = operands[2];\n    ops[2] = operands[3];\n-   output_asm_insn (\"vpst\\;\\tvldrdt.u64\\t%q0, [%q1, %2]!\",ops);\n+   output_asm_insn (\"vpst\\;vldrdt.u64\\t%q0, [%q1, %2]!\",ops);\n    return \"\";\n }\n   [(set_attr \"length\" \"8\")])"}, {"sha": "1249f46ed8842c5a352d2528526c837501db0267", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ff825b8158394a01a43359efd91d0b6b8c4fa21b", "patch": "@@ -1,3 +1,17 @@\n+2020-04-02  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\tPR target/94317\n+\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_s64.c: Modify.\n+\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_u64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_z_s64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_z_u64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_u32.c: Likewise.\n+\n 2020-04-02  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/93522"}, {"sha": "0d1ee769ec64b55c7559ce9dc14f8a6ae2e43e34", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_s64.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_s64.c?ref=ff825b8158394a01a43359efd91d0b6b8c4fa21b", "patch": "@@ -10,4 +10,6 @@ foo (uint64x2_t * addr)\n   return vldrdq_gather_base_wb_s64 (addr, 8);\n }\n \n-/* { dg-final { scan-assembler \"vldrd.64\"  }  } */\n+/* { dg-final { scan-assembler \"vldrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"vldrd.64\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" } } */\n+/* { dg-final { scan-assembler \"vstrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */"}, {"sha": "cb2a41bdcd32b553a93d3bcc4787d506f1b54f74", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_u64.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_u64.c?ref=ff825b8158394a01a43359efd91d0b6b8c4fa21b", "patch": "@@ -10,4 +10,6 @@ foo (uint64x2_t * addr)\n   return vldrdq_gather_base_wb_u64 (addr, 8);\n }\n \n-/* { dg-final { scan-assembler \"vldrd.64\"  }  } */\n+/* { dg-final { scan-assembler \"vldrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"vldrd.64\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" } } */\n+/* { dg-final { scan-assembler \"vstrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */"}, {"sha": "243fbeacc3429025202da2ff157ade38a472e123", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_z_s64.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_z_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_z_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_z_s64.c?ref=ff825b8158394a01a43359efd91d0b6b8c4fa21b", "patch": "@@ -8,4 +8,8 @@ int64x2_t foo (uint64x2_t * addr, mve_pred16_t p)\n     return vldrdq_gather_base_wb_z_s64 (addr, 1016, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrdt.u64\"  }  } */\n+/* { dg-final { scan-assembler \"vldrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"vmsr\\t P0, r\\[0-9\\]+.*$\" } } */\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vldrdt.u64\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" } } */\n+/* { dg-final { scan-assembler \"vstrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */"}, {"sha": "10ba42405fe8fde9d4f8993b20e41a59c7bb2e77", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_z_u64.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_z_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_z_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_z_u64.c?ref=ff825b8158394a01a43359efd91d0b6b8c4fa21b", "patch": "@@ -8,4 +8,8 @@ uint64x2_t foo (uint64x2_t * addr, mve_pred16_t p)\n     return vldrdq_gather_base_wb_z_u64 (addr, 8, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrdt.u64\"  }  } */\n+/* { dg-final { scan-assembler \"vldrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"vmsr\\t P0, r\\[0-9\\]+.*\" } } */\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vldrdt.u64\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" } } */\n+/* { dg-final { scan-assembler \"vstrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */"}, {"sha": "db8108e37325c4e1fafd2293d48eba0c33309073", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_f32.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_f32.c?ref=ff825b8158394a01a43359efd91d0b6b8c4fa21b", "patch": "@@ -10,4 +10,6 @@ foo (uint32x4_t * addr)\n   return vldrwq_gather_base_wb_f32 (addr, 8);\n }\n \n-/* { dg-final { scan-assembler \"vldrw.u32\"  }  } */\n+/* { dg-final { scan-assembler \"vldrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"vldrw.u32\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" } } */\n+/* { dg-final { scan-assembler \"vstrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */"}, {"sha": "3da64e218e2c0789e996be551650033567eba4e5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_s32.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_s32.c?ref=ff825b8158394a01a43359efd91d0b6b8c4fa21b", "patch": "@@ -10,4 +10,6 @@ foo (uint32x4_t * addr)\n   return vldrwq_gather_base_wb_s32 (addr, 8);\n }\n \n-/* { dg-final { scan-assembler \"vldrw.u32\"  }  } */\n+/* { dg-final { scan-assembler \"vldrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"vldrw.u32\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" } } */\n+/* { dg-final { scan-assembler \"vstrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */"}, {"sha": "2597ee11608bfe21d697f2250bee7e69c0cc7aec", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_u32.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_u32.c?ref=ff825b8158394a01a43359efd91d0b6b8c4fa21b", "patch": "@@ -10,4 +10,6 @@ foo (uint32x4_t * addr)\n   return vldrwq_gather_base_wb_u32 (addr, 8);\n }\n \n-/* { dg-final { scan-assembler \"vldrw.u32\"  }  } */\n+/* { dg-final { scan-assembler \"vldrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"vldrw.u32\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" } } */\n+/* { dg-final { scan-assembler \"vstrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */"}, {"sha": "f1ba63855be254d96806c163177e32856294c106", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_f32.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_f32.c?ref=ff825b8158394a01a43359efd91d0b6b8c4fa21b", "patch": "@@ -10,4 +10,8 @@ foo (uint32x4_t * addr, mve_pred16_t p)\n   return vldrwq_gather_base_wb_z_f32 (addr, 8, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrwt.u32\"  }  } */\n+/* { dg-final { scan-assembler \"vldrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"vmsr\\tP0, r\\[0-9\\]+.*\" } } */\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vldrwt.u32\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" } } */\n+/* { dg-final { scan-assembler \"vstrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */"}, {"sha": "56da5a46c64d2946ceade8689105048e19efdc6a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_s32.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_s32.c?ref=ff825b8158394a01a43359efd91d0b6b8c4fa21b", "patch": "@@ -10,4 +10,8 @@ foo (uint32x4_t * addr, mve_pred16_t p)\n   return vldrwq_gather_base_wb_z_s32 (addr, 8, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrwt.u32\"  }  } */\n+/* { dg-final { scan-assembler \"vldrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"vmsr\\t P0, r\\[0-9\\]+.*\" } } */\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vldrwt.u32\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" } } */\n+/* { dg-final { scan-assembler \"vstrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */"}, {"sha": "63165d97c1a7b4120be036348a09b73afddd36d1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_u32.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff825b8158394a01a43359efd91d0b6b8c4fa21b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_u32.c?ref=ff825b8158394a01a43359efd91d0b6b8c4fa21b", "patch": "@@ -10,4 +10,8 @@ foo (uint32x4_t * addr, mve_pred16_t p)\n   return vldrwq_gather_base_wb_z_u32 (addr, 8, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrwt.u32\"  }  } */\n+/* { dg-final { scan-assembler \"vldrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"vmsr\\t P0, r\\[0-9\\]+.*\" } } */\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vldrwt.u32\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" } } */\n+/* { dg-final { scan-assembler \"vstrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */"}]}