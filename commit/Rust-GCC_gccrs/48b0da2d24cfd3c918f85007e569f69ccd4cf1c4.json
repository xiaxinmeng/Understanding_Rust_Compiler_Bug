{"sha": "48b0da2d24cfd3c918f85007e569f69ccd4cf1c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhiMGRhMmQyNGNmZDNjOTE4Zjg1MDA3ZTU2OWY2OWNjZDRjZjFjNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-01-30T14:59:21Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-01-30T14:59:21Z"}, "message": "[multiple changes]\n\n2015-01-30  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_attr.adb (Analyze_Attribute): Ensure that\n\tthe check concerning Refined_Post takes precedence over the\n\tother cases.\n\n2015-01-30  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_prag.adb: Minor typo fixes and reformatting.\n\nFrom-SVN: r220282", "tree": {"sha": "e0ba84fc74ec8b2a7354130d6403f4cdf0c82746", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0ba84fc74ec8b2a7354130d6403f4cdf0c82746"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48b0da2d24cfd3c918f85007e569f69ccd4cf1c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48b0da2d24cfd3c918f85007e569f69ccd4cf1c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48b0da2d24cfd3c918f85007e569f69ccd4cf1c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48b0da2d24cfd3c918f85007e569f69ccd4cf1c4/comments", "author": null, "committer": null, "parents": [{"sha": "95d0610c1730425dae8bfcb5a685bdc3c29c8ced", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95d0610c1730425dae8bfcb5a685bdc3c29c8ced", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95d0610c1730425dae8bfcb5a685bdc3c29c8ced"}], "stats": {"total": 70, "additions": 40, "deletions": 30}, "files": [{"sha": "c703eb928c5d69713a23e65b923f1f03241c8708", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b0da2d24cfd3c918f85007e569f69ccd4cf1c4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b0da2d24cfd3c918f85007e569f69ccd4cf1c4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=48b0da2d24cfd3c918f85007e569f69ccd4cf1c4", "patch": "@@ -1,3 +1,13 @@\n+2015-01-30  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Ensure that\n+\tthe check concerning Refined_Post takes precedence over the\n+\tother cases.\n+\n+2015-01-30  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_prag.adb: Minor typo fixes and reformatting.\n+\n 2015-01-30  Yannick Moy  <moy@adacore.com>\n \n \t* sem_attr.adb: Code clean up."}, {"sha": "36ee0d2a4ce004eeaeb10e56b95dae8321920d46", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b0da2d24cfd3c918f85007e569f69ccd4cf1c4/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b0da2d24cfd3c918f85007e569f69ccd4cf1c4/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=48b0da2d24cfd3c918f85007e569f69ccd4cf1c4", "patch": "@@ -4572,14 +4572,40 @@ package body Sem_Attr is\n             CS := Scope (CS);\n          end loop;\n \n+         --  Check the legality of attribute 'Old when it appears inside pragma\n+         --  Refined_Post. These specialized checks are required only when code\n+         --  generation is disabled. In the general case pragma Refined_Post is\n+         --  transformed into pragma Check by Process_PPCs which in turn is\n+         --  relocated to procedure _Postconditions. From then on the legality\n+         --  of 'Old is determined as usual.\n+\n+         if not Expander_Active and then In_Refined_Post then\n+            Preanalyze_And_Resolve (P);\n+            Check_References_In_Prefix (CS);\n+            P_Type := Etype (P);\n+            Set_Etype (N, P_Type);\n+\n+            if Is_Limited_Type (P_Type) then\n+               Error_Attr (\"attribute % cannot apply to limited objects\", P);\n+            end if;\n+\n+            if Is_Entity_Name (P)\n+              and then Is_Constant_Object (Entity (P))\n+            then\n+               Error_Msg_N\n+                 (\"??attribute Old applied to constant has no effect\", P);\n+            end if;\n+\n+            return;\n+\n          --  A Contract_Cases, Postcondition or Test_Case pragma is in the\n          --  process of being preanalyzed. Perform the semantic checks now\n          --  before the pragma is relocated and/or expanded.\n \n          --  For a generic subprogram, postconditions are preanalyzed as well\n          --  for name capture, and still appear within an aspect spec.\n \n-         if In_Spec_Expression or Inside_A_Generic then\n+         elsif In_Spec_Expression or Inside_A_Generic then\n             Prag := N;\n             while Present (Prag)\n                and then not Nkind_In (Prag, N_Aspect_Specification,\n@@ -4625,32 +4651,6 @@ package body Sem_Attr is\n                end case;\n             end if;\n \n-         --  Check the legality of attribute 'Old when it appears inside pragma\n-         --  Refined_Post. These specialized checks are required only when code\n-         --  generation is disabled. In the general case pragma Refined_Post is\n-         --  transformed into pragma Check by Process_PPCs which in turn is\n-         --  relocated to procedure _Postconditions. From then on the legality\n-         --  of 'Old is determined as usual.\n-\n-         elsif not Expander_Active and then In_Refined_Post then\n-            Preanalyze_And_Resolve (P);\n-            Check_References_In_Prefix (CS);\n-            P_Type := Etype (P);\n-            Set_Etype (N, P_Type);\n-\n-            if Is_Limited_Type (P_Type) then\n-               Error_Attr (\"attribute % cannot apply to limited objects\", P);\n-            end if;\n-\n-            if Is_Entity_Name (P)\n-              and then Is_Constant_Object (Entity (P))\n-            then\n-               Error_Msg_N\n-                 (\"??attribute Old applied to constant has no effect\", P);\n-            end if;\n-\n-            return;\n-\n          --  Body case, where we must be inside a generated _Postconditions\n          --  procedure, or else the attribute use is definitely misplaced. The\n          --  postcondition itself may have generated transient scopes, and is"}, {"sha": "4a3bb2172c55f520a7c0d81146640cd69b44a96a", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b0da2d24cfd3c918f85007e569f69ccd4cf1c4/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b0da2d24cfd3c918f85007e569f69ccd4cf1c4/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=48b0da2d24cfd3c918f85007e569f69ccd4cf1c4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -17846,8 +17846,8 @@ package body Sem_Prag is\n               or else (Is_Generic_Type (Ent) and then Is_Derived_Type (Ent))\n \n               --  AI05-0028: The pragma applies to all composite types. Note\n-              --  that we apply this binding intepretation to previous verions\n-              --  of Ada so there is no Ada 2012 guard. Seems a reasonable\n+              --  that we apply this binding interpretation to earlier versions\n+              --  of Ada, so there is no Ada 2012 guard. Seems a reasonable\n               --  choice since there are other compilers that do the same.\n \n               or else Is_Composite_Type (Ent)"}]}