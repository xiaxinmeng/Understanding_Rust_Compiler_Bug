{"sha": "049d0cba8ed274fb8fc67b4c343505bf06e9c57c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ5ZDBjYmE4ZWQyNzRmYjhmYzY3YjRjMzQzNTA1YmYwNmU5YzU3Yw==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-03-09T17:16:35Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-03-09T18:18:35Z"}, "message": "Cleanup HIR::Function to make fields private\n\nThis is a refactoring/cleanup effort to stop using raw fields of\nHIR::Items. It also removes an old set of locals since before the TyTy\nmodule and move to HIR from the AST::Function.", "tree": {"sha": "82db28c43dde6c02f4095ebd1e5ba46c7e345d4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82db28c43dde6c02f4095ebd1e5ba46c7e345d4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/049d0cba8ed274fb8fc67b4c343505bf06e9c57c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/049d0cba8ed274fb8fc67b4c343505bf06e9c57c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/049d0cba8ed274fb8fc67b4c343505bf06e9c57c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/049d0cba8ed274fb8fc67b4c343505bf06e9c57c/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01898e7cf2746e4dae0bee81ff5adfc1c00ae635", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01898e7cf2746e4dae0bee81ff5adfc1c00ae635", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01898e7cf2746e4dae0bee81ff5adfc1c00ae635"}], "stats": {"total": 148, "additions": 111, "deletions": 37}, "files": [{"sha": "773bcaf3284457a4ff6b55f4a620d7cd9bbd9cd9", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049d0cba8ed274fb8fc67b4c343505bf06e9c57c/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049d0cba8ed274fb8fc67b4c343505bf06e9c57c/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=049d0cba8ed274fb8fc67b4c343505bf06e9c57c", "patch": "@@ -1447,8 +1447,6 @@ class Function : public VisItem, public InherentImplItem, public TraitImplItem\n   Location locus;\n \n public:\n-  std::vector<LetStmt *> locals;\n-\n   std::string as_string () const override;\n \n   // Returns whether function has generic parameters.\n@@ -1550,7 +1548,6 @@ class Function : public VisItem, public InherentImplItem, public TraitImplItem\n     return function_body == nullptr;\n   }\n \n-  // TODO: this mutable getter seems really dodgy. Think up better way.\n   std::vector<FunctionParam> &get_function_params () { return function_params; }\n   const std::vector<FunctionParam> &get_function_params () const\n   {"}, {"sha": "9370e9cf5231a38679ff111554fef52e1d776c7a", "filename": "gcc/rust/backend/rust-compile-implitem.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049d0cba8ed274fb8fc67b4c343505bf06e9c57c/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049d0cba8ed274fb8fc67b4c343505bf06e9c57c/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h?ref=049d0cba8ed274fb8fc67b4c343505bf06e9c57c", "patch": "@@ -95,7 +95,7 @@ class CompileInherentImplItem : public HIRCompileBase\n \n     unsigned int flags = 0;\n     std::string fn_identifier\n-      = self->get_name () + \"_\" + function.function_name;\n+      = self->get_name () + \"_\" + function.get_function_name ();\n \n     // if its the main fn or pub visibility mark its as DECL_PUBLIC\n     // please see https://github.com/Rust-GCC/gccrs/pull/137\n@@ -116,7 +116,8 @@ class CompileInherentImplItem : public HIRCompileBase\n     size_t i = 0;\n     for (auto &it : fntype->get_params ())\n       {\n-\tHIR::FunctionParam &referenced_param = function.function_params.at (i);\n+\tHIR::FunctionParam &referenced_param\n+\t  = function.get_function_params ().at (i);\n \tauto param_tyty = it.second;\n \tauto compiled_param_type\n \t  = TyTyResolveCompile::compile (ctx, param_tyty);\n@@ -147,7 +148,7 @@ class CompileInherentImplItem : public HIRCompileBase\n       }\n \n     // lookup locals\n-    auto block_expr = function.function_body.get ();\n+    auto block_expr = function.get_definition ().get ();\n     auto body_mappings = block_expr->get_mappings ();\n \n     Resolver::Rib *rib = nullptr;\n@@ -180,7 +181,7 @@ class CompileInherentImplItem : public HIRCompileBase\n     Bblock *enclosing_scope\n       = toplevel_item ? NULL : ctx->peek_enclosing_scope ();\n \n-    HIR::BlockExpr *function_body = function.function_body.get ();\n+    HIR::BlockExpr *function_body = function.get_definition ().get ();\n     Location start_location = function_body->get_locus ();\n     Location end_location = function_body->get_closing_locus ();\n \n@@ -206,7 +207,7 @@ class CompileInherentImplItem : public HIRCompileBase\n \n     ctx->push_fn (fndecl, return_address);\n \n-    compile_function_body (fndecl, function.function_body,\n+    compile_function_body (fndecl, function.get_definition (),\n \t\t\t   function.has_function_return_type ());\n \n     ctx->pop_block ();"}, {"sha": "384bf94751b4614cd05cd166af748b02a0eb7453", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049d0cba8ed274fb8fc67b4c343505bf06e9c57c/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049d0cba8ed274fb8fc67b4c343505bf06e9c57c/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=049d0cba8ed274fb8fc67b4c343505bf06e9c57c", "patch": "@@ -105,7 +105,8 @@ class CompileItem : public HIRCompileBase\n     if (!ctx->get_tyctx ()->lookup_type (function.get_mappings ().get_hirid (),\n \t\t\t\t\t &fntype_tyty))\n       {\n-\trust_fatal_error (function.locus, \"failed to lookup function type\");\n+\trust_fatal_error (function.get_locus (),\n+\t\t\t  \"failed to lookup function type\");\n \treturn;\n       }\n \n@@ -120,23 +121,24 @@ class CompileItem : public HIRCompileBase\n     ::Btype *compiled_fn_type = TyTyResolveCompile::compile (ctx, fntype);\n \n     unsigned int flags = 0;\n-    bool is_main_fn = function.function_name.compare (\"main\") == 0;\n+    bool is_main_fn = function.get_function_name ().compare (\"main\") == 0;\n \n     // if its the main fn or pub visibility mark its as DECL_PUBLIC\n     // please see https://github.com/Rust-GCC/gccrs/pull/137\n     if (is_main_fn || function.has_visibility ())\n       flags |= Backend::function_is_visible;\n \n-    std::string asm_name = function.function_name;\n+    std::string asm_name = function.get_function_name ();\n     if (!is_main_fn)\n       {\n \t// FIXME need name mangling\n-\tasm_name = \"__\" + function.function_name;\n+\tasm_name = \"__\" + function.get_function_name ();\n       }\n \n     Bfunction *fndecl\n-      = ctx->get_backend ()->function (compiled_fn_type, function.function_name,\n-\t\t\t\t       asm_name, flags, function.get_locus ());\n+      = ctx->get_backend ()->function (compiled_fn_type,\n+\t\t\t\t       function.get_function_name (), asm_name,\n+\t\t\t\t       flags, function.get_locus ());\n     ctx->insert_function_decl (function.get_mappings ().get_hirid (), fndecl);\n \n     // setup the params\n@@ -147,7 +149,8 @@ class CompileItem : public HIRCompileBase\n     size_t i = 0;\n     for (auto &it : fntype->get_params ())\n       {\n-\tHIR::FunctionParam &referenced_param = function.function_params.at (i);\n+\tHIR::FunctionParam &referenced_param\n+\t  = function.get_function_params ().at (i);\n \tauto param_tyty = it.second;\n \tauto compiled_param_type\n \t  = TyTyResolveCompile::compile (ctx, param_tyty);\n@@ -178,7 +181,7 @@ class CompileItem : public HIRCompileBase\n       }\n \n     // lookup locals\n-    auto block_expr = function.function_body.get ();\n+    auto block_expr = function.get_definition ().get ();\n     auto body_mappings = block_expr->get_mappings ();\n \n     Resolver::Rib *rib = nullptr;\n@@ -211,7 +214,7 @@ class CompileItem : public HIRCompileBase\n     Bblock *enclosing_scope\n       = toplevel_item ? NULL : ctx->peek_enclosing_scope ();\n \n-    HIR::BlockExpr *function_body = function.function_body.get ();\n+    HIR::BlockExpr *function_body = function.get_definition ().get ();\n     Location start_location = function_body->get_locus ();\n     Location end_location = function_body->get_closing_locus ();\n \n@@ -237,7 +240,7 @@ class CompileItem : public HIRCompileBase\n \n     ctx->push_fn (fndecl, return_address);\n \n-    compile_function_body (fndecl, function.function_body,\n+    compile_function_body (fndecl, function.get_definition (),\n \t\t\t   function.has_function_return_type ());\n \n     ctx->pop_block ();"}, {"sha": "8a7fc36f6cab89e1c35a1916cb29ebbe8f4bc603", "filename": "gcc/rust/hir/rust-ast-lower-implitem.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049d0cba8ed274fb8fc67b4c343505bf06e9c57c/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049d0cba8ed274fb8fc67b4c343505bf06e9c57c/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h?ref=049d0cba8ed274fb8fc67b4c343505bf06e9c57c", "patch": "@@ -147,7 +147,7 @@ class ASTLowerImplItem : public ASTLoweringBase\n \t\t\t       function.get_locus ());\n \n     // add the mappings for the function params at the end\n-    for (auto &param : fn->function_params)\n+    for (auto &param : fn->get_function_params ())\n       {\n \tmappings->insert_hir_param (mapping.get_crate_num (),\n \t\t\t\t    param.get_mappings ().get_hirid (), &param);"}, {"sha": "e19e9f6a9788bdac480041964438bcf7e7d51b35", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049d0cba8ed274fb8fc67b4c343505bf06e9c57c/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049d0cba8ed274fb8fc67b4c343505bf06e9c57c/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=049d0cba8ed274fb8fc67b4c343505bf06e9c57c", "patch": "@@ -218,7 +218,6 @@ class ASTLoweringItem : public ASTLoweringBase\n   void visit (AST::Function &function)\n   {\n     // ignore for now and leave empty\n-    std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n     std::vector<HIR::Attribute> outer_attrs;\n     std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n     HIR::WhereClause where_clause (std::move (where_clause_items));\n@@ -227,6 +226,12 @@ class ASTLoweringItem : public ASTLoweringBase\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n \n     // need\n+    std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n+    if (function.has_generics ())\n+      {\n+\tgeneric_params = lower_generic_params (function.get_generic_params ());\n+      }\n+\n     Identifier function_name = function.get_function_name ();\n     Location locus = function.get_locus ();\n \n@@ -284,7 +289,7 @@ class ASTLoweringItem : public ASTLoweringBase\n \t\t\t       function.get_locus ());\n \n     // add the mappings for the function params at the end\n-    for (auto &param : fn->function_params)\n+    for (auto &param : fn->get_function_params ())\n       {\n \tmappings->insert_hir_param (mapping.get_crate_num (),\n \t\t\t\t    param.get_mappings ().get_hirid (), &param);"}, {"sha": "34ea2c3e327a16116aaaadf58cd32e3664157e32", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049d0cba8ed274fb8fc67b4c343505bf06e9c57c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049d0cba8ed274fb8fc67b4c343505bf06e9c57c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=049d0cba8ed274fb8fc67b4c343505bf06e9c57c", "patch": "@@ -1255,7 +1255,6 @@ class LetStmt;\n // Rust function declaration HIR node\n class Function : public VisItem, public InherentImplItem, public TraitImplItem\n {\n-public:\n   FunctionQualifiers qualifiers;\n   Identifier function_name;\n \n@@ -1277,6 +1276,7 @@ class Function : public VisItem, public InherentImplItem, public TraitImplItem\n \n   Location locus;\n \n+public:\n   std::string as_string () const override;\n \n   // Returns whether function has generic parameters.\n@@ -1361,6 +1361,48 @@ class Function : public VisItem, public InherentImplItem, public TraitImplItem\n     return get_mappings ();\n   };\n \n+  std::vector<FunctionParam> &get_function_params () { return function_params; }\n+  const std::vector<FunctionParam> &get_function_params () const\n+  {\n+    return function_params;\n+  }\n+\n+  std::vector<std::unique_ptr<GenericParam> > &get_generic_params ()\n+  {\n+    return generic_params;\n+  }\n+  const std::vector<std::unique_ptr<GenericParam> > &get_generic_params () const\n+  {\n+    return generic_params;\n+  }\n+\n+  // TODO: is this better? Or is a \"vis_block\" better?\n+  std::unique_ptr<BlockExpr> &get_definition ()\n+  {\n+    rust_assert (function_body != nullptr);\n+    return function_body;\n+  }\n+\n+  FunctionQualifiers get_qualifiers () const { return qualifiers; }\n+\n+  Identifier get_function_name () const { return function_name; }\n+\n+  // TODO: is this better? Or is a \"vis_block\" better?\n+  WhereClause &get_where_clause ()\n+  {\n+    rust_assert (has_where_clause ());\n+    return where_clause;\n+  }\n+\n+  bool has_return_type () const { return return_type != nullptr; }\n+\n+  // TODO: is this better? Or is a \"vis_block\" better?\n+  std::unique_ptr<Type> &get_return_type ()\n+  {\n+    rust_assert (has_return_type ());\n+    return return_type;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */"}, {"sha": "1e98232f9e6b29ddc0bc1f69bf062a0acb7c5e92", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049d0cba8ed274fb8fc67b4c343505bf06e9c57c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049d0cba8ed274fb8fc67b4c343505bf06e9c57c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=049d0cba8ed274fb8fc67b4c343505bf06e9c57c", "patch": "@@ -107,10 +107,6 @@ class ResolveItem : public ResolverBase\n \n   void visit (AST::Function &function)\n   {\n-    if (function.has_return_type ())\n-      ResolveType::go (function.get_return_type ().get (),\n-\t\t       function.get_node_id ());\n-\n     NodeId scope_node_id = function.get_node_id ();\n     resolver->get_name_scope ().push (scope_node_id);\n     resolver->get_type_scope ().push (scope_node_id);\n@@ -119,6 +115,16 @@ class ResolveItem : public ResolverBase\n     resolver->push_new_type_rib (resolver->get_type_scope ().peek ());\n     resolver->push_new_label_rib (resolver->get_type_scope ().peek ());\n \n+    if (function.has_generics ())\n+      {\n+\tfor (auto &generic : function.get_generic_params ())\n+\t  ResolveGenericParam::go (generic.get (), function.get_node_id ());\n+      }\n+\n+    if (function.has_return_type ())\n+      ResolveType::go (function.get_return_type ().get (),\n+\t\t       function.get_node_id ());\n+\n     // we make a new scope so the names of parameters are resolved and shadowed\n     // correctly\n     for (auto &param : function.get_function_params ())"}, {"sha": "0bc45c3180aab4fdac5aca86ea48e7c12e5e0b1a", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049d0cba8ed274fb8fc67b4c343505bf06e9c57c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049d0cba8ed274fb8fc67b4c343505bf06e9c57c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=049d0cba8ed274fb8fc67b4c343505bf06e9c57c", "patch": "@@ -53,7 +53,8 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n       ret_type = new TyTy::UnitType (function.get_mappings ().get_hirid ());\n     else\n       {\n-\tauto resolved = TypeCheckType::Resolve (function.return_type.get ());\n+\tauto resolved\n+\t  = TypeCheckType::Resolve (function.get_return_type ().get ());\n \tif (resolved == nullptr)\n \t  {\n \t    rust_error_at (function.get_locus (),\n@@ -62,11 +63,12 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n \t  }\n \n \tret_type = resolved->clone ();\n-\tret_type->set_ref (function.return_type->get_mappings ().get_hirid ());\n+\tret_type->set_ref (\n+\t  function.get_return_type ()->get_mappings ().get_hirid ());\n       }\n \n     std::vector<std::pair<HIR::Pattern *, TyTy::BaseType *> > params;\n-    for (auto &param : function.function_params)\n+    for (auto &param : function.get_function_params ())\n       {\n \t// get the name as well required for later on\n \tauto param_tyty = TypeCheckType::Resolve (param.get_type ());\n@@ -173,7 +175,8 @@ class TypeCheckImplItem : public TypeCheckBase\n     auto expected_ret_tyty = resolve_fn_type->get_return_type ();\n     context->push_return_type (expected_ret_tyty);\n \n-    auto result = TypeCheckExpr::Resolve (function.function_body.get (), false);\n+    auto result\n+      = TypeCheckExpr::Resolve (function.get_definition ().get (), false);\n     auto ret_resolved = expected_ret_tyty->unify (result);\n     if (ret_resolved == nullptr)\n       return;"}, {"sha": "6b1a8c49c4d88c78b7240639a6332d5f498194f7", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049d0cba8ed274fb8fc67b4c343505bf06e9c57c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049d0cba8ed274fb8fc67b4c343505bf06e9c57c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h?ref=049d0cba8ed274fb8fc67b4c343505bf06e9c57c", "patch": "@@ -58,7 +58,7 @@ class TypeCheckItem : public TypeCheckBase\n     TyTy::BaseType *lookup;\n     if (!context->lookup_type (function.get_mappings ().get_hirid (), &lookup))\n       {\n-\trust_error_at (function.locus, \"failed to lookup function type\");\n+\trust_error_at (function.get_locus (), \"failed to lookup function type\");\n \treturn;\n       }\n \n@@ -75,7 +75,8 @@ class TypeCheckItem : public TypeCheckBase\n     auto expected_ret_tyty = resolve_fn_type->get_return_type ();\n     context->push_return_type (expected_ret_tyty);\n \n-    auto result = TypeCheckExpr::Resolve (function.function_body.get (), false);\n+    auto result\n+      = TypeCheckExpr::Resolve (function.get_definition ().get (), false);\n     auto ret_resolved = expected_ret_tyty->unify (result);\n     if (ret_resolved == nullptr)\n       return;"}, {"sha": "893424f041b10eb7df7088f72f126168a461ca24", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049d0cba8ed274fb8fc67b4c343505bf06e9c57c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049d0cba8ed274fb8fc67b4c343505bf06e9c57c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=049d0cba8ed274fb8fc67b4c343505bf06e9c57c", "patch": "@@ -134,12 +134,27 @@ class TypeCheckTopLevel : public TypeCheckBase\n \n   void visit (HIR::Function &function)\n   {\n+    std::vector<TyTy::SubstitionMapping> substitions;\n+    if (function.has_generics ())\n+      {\n+\tfor (auto &generic_param : function.get_generic_params ())\n+\t  {\n+\t    auto param_type\n+\t      = TypeResolveGenericParam::Resolve (generic_param.get ());\n+\t    context->insert_type (generic_param->get_mappings (), param_type);\n+\n+\t    substitions.push_back (\n+\t      TyTy::SubstitionMapping (generic_param, param_type));\n+\t  }\n+      }\n+\n     TyTy::BaseType *ret_type = nullptr;\n     if (!function.has_function_return_type ())\n       ret_type = new TyTy::UnitType (function.get_mappings ().get_hirid ());\n     else\n       {\n-\tauto resolved = TypeCheckType::Resolve (function.return_type.get ());\n+\tauto resolved\n+\t  = TypeCheckType::Resolve (function.get_return_type ().get ());\n \tif (resolved == nullptr)\n \t  {\n \t    rust_error_at (function.get_locus (),\n@@ -148,11 +163,12 @@ class TypeCheckTopLevel : public TypeCheckBase\n \t  }\n \n \tret_type = resolved->clone ();\n-\tret_type->set_ref (function.return_type->get_mappings ().get_hirid ());\n+\tret_type->set_ref (\n+\t  function.get_return_type ()->get_mappings ().get_hirid ());\n       }\n \n     std::vector<std::pair<HIR::Pattern *, TyTy::BaseType *> > params;\n-    for (auto &param : function.function_params)\n+    for (auto &param : function.get_function_params ())\n       {\n \t// get the name as well required for later on\n \tauto param_tyty = TypeCheckType::Resolve (param.get_type ());"}, {"sha": "c6dabe22df9835ee388e8ed69e3fd3c3e9791b78", "filename": "gcc/rust/typecheck/rust-tycheck-dump.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049d0cba8ed274fb8fc67b4c343505bf06e9c57c/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049d0cba8ed274fb8fc67b4c343505bf06e9c57c/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h?ref=049d0cba8ed274fb8fc67b4c343505bf06e9c57c", "patch": "@@ -72,11 +72,11 @@ class TypeResolverDump : public TypeCheckBase\n \n   void visit (HIR::Function &function) override\n   {\n-    dump += indent () + \"fn \" + function.function_name + \" \"\n+    dump += indent () + \"fn \" + function.get_function_name () + \" \"\n \t    + type_string (function.get_mappings ()) + \"\\n\";\n     dump += indent () + \"{\\n\";\n \n-    HIR::BlockExpr *function_body = function.function_body.get ();\n+    HIR::BlockExpr *function_body = function.get_definition ().get ();\n     function_body->accept_vis (*this);\n \n     dump += indent () + \"}\\n\";"}]}