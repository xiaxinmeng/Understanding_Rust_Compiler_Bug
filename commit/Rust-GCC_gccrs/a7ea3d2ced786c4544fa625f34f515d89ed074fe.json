{"sha": "a7ea3d2ced786c4544fa625f34f515d89ed074fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdlYTNkMmNlZDc4NmM0NTQ0ZmE2MjVmMzRmNTE1ZDg5ZWQwNzRmZQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-03-28T12:56:59Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-03-28T12:56:59Z"}, "message": "c++: requires-expression outside of a template is misevaluated [PR94252]\n\nThis PR shows that a REQUIRES_EXPR outside of a template can sometimes be\nmisevaluated.  This happens because the evaluation routine tsubst_requires_expr\n(and diagnose_requires_expr) assumes the REQUIRES_EXPR's subtrees are templated\ntrees and that therefore it's safe to call tsubst_expr on them.  But this\nassumption isn't valid when we've parsed a REQUIRES_EXPR outside of a template\ncontext.  In order to make this assumption valid here, this patch sets\nprocessing_template_decl to non-zero before parsing the body of a REQUIRES_EXPR\nso that its subtrees are indeed always templated trees.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/94252\n\t* constraint.cc (tsubst_compound_requirement): Always suppress errors\n\tfrom type_deducible_p and expression_convertible_p, as they're not\n\tsubstitution errors.\n\t(diagnose_atomic_constraint) <case INTEGER_CST>: Remove this case so\n\tthat we diagnose INTEGER_CST expressions of non-bool type via the\n\tdefault case.\n\t* cp-gimplify.c (cp_genericize_r) <case REQUIRES_EXPR>: New case.\n\t* parser.c (cp_parser_requires_expression): Always parse the requirement\n\tbody as if we're processing a template, by temporarily incrementing\n\tprocessing_template_decl.  Afterwards, if we're not actually in a\n\ttemplate context, perform semantic processing to diagnose any invalid\n\ttypes and expressions.\n\t* pt.c (tsubst_copy_and_build) <case REQUIRES_EXPR>: Remove dead code.\n\t* semantics.c (finish_static_assert): Explain an assertion failure\n\twhen the condition is a REQUIRES_EXPR like we do when it is a concept\n\tcheck.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/94252\n\t* g++.dg/concepts/diagnostic7.C: New test.\n\t* g++.dg/concepts/pr94252.C: New test.\n\t* g++.dg/cpp2a/concepts-requires18.C: Adjust to expect an additional\n\tdiagnostic.", "tree": {"sha": "5d72578ca8e5a5be0fbb57cbd820e4bb2f1a175b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d72578ca8e5a5be0fbb57cbd820e4bb2f1a175b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7ea3d2ced786c4544fa625f34f515d89ed074fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7ea3d2ced786c4544fa625f34f515d89ed074fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7ea3d2ced786c4544fa625f34f515d89ed074fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7ea3d2ced786c4544fa625f34f515d89ed074fe/comments", "author": null, "committer": null, "parents": [{"sha": "cd68edf894d6b72e5bc37ac205deef9d237ab70b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd68edf894d6b72e5bc37ac205deef9d237ab70b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd68edf894d6b72e5bc37ac205deef9d237ab70b"}], "stats": {"total": 103, "additions": 91, "deletions": 12}, "files": [{"sha": "a197c7d14e230966858012deb82681c8bf1bac43", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ea3d2ced786c4544fa625f34f515d89ed074fe/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ea3d2ced786c4544fa625f34f515d89ed074fe/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a7ea3d2ced786c4544fa625f34f515d89ed074fe", "patch": "@@ -1,5 +1,23 @@\n 2020-03-28  Patrick Palka  <ppalka@redhat.com>\n \n+\tPR c++/94252\n+\t* constraint.cc (tsubst_compound_requirement): Always suppress errors\n+\tfrom type_deducible_p and expression_convertible_p, as they're not\n+\tsubstitution errors.\n+\t(diagnose_atomic_constraint) <case INTEGER_CST>: Remove this case so\n+\tthat we diagnose INTEGER_CST expressions of non-bool type via the\n+\tdefault case.\n+\t* cp-gimplify.c (cp_genericize_r) <case REQUIRES_EXPR>: New case.\n+\t* parser.c (cp_parser_requires_expression): Always parse the requirement\n+\tbody as if we're processing a template, by temporarily incrementing\n+\tprocessing_template_decl.  Afterwards, if we're not actually in a\n+\ttemplate context, perform semantic processing to diagnose any invalid\n+\ttypes and expressions.\n+\t* pt.c (tsubst_copy_and_build) <case REQUIRES_EXPR>: Remove dead code.\n+\t* semantics.c (finish_static_assert): Explain an assertion failure\n+\twhen the condition is a REQUIRES_EXPR like we do when it is a concept\n+\tcheck.\n+\n \t* constraint.cc (diagnose_compound_requirement): When diagnosing a\n \tcompound requirement, maybe replay the satisfaction failure, subject to\n \tthe current diagnosis depth."}, {"sha": "9c21ce80256d6a638f4bcc48e5c966c143bc66d7", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ea3d2ced786c4544fa625f34f515d89ed074fe/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ea3d2ced786c4544fa625f34f515d89ed074fe/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=a7ea3d2ced786c4544fa625f34f515d89ed074fe", "patch": "@@ -1981,15 +1981,17 @@ tsubst_compound_requirement (tree t, tree args, subst_info info)\n   if (type == error_mark_node)\n     return error_mark_node;\n \n+  subst_info quiet (tf_none, info.in_decl);\n+\n   /* Check expression against the result type.  */\n   if (type)\n     {\n       if (tree placeholder = type_uses_auto (type))\n \t{\n-\t  if (!type_deducible_p (expr, type, placeholder, args, info))\n+\t  if (!type_deducible_p (expr, type, placeholder, args, quiet))\n \t    return error_mark_node;\n \t}\n-      else if (!expression_convertible_p (expr, type, info))\n+      else if (!expression_convertible_p (expr, type, quiet))\n \treturn error_mark_node;\n     }\n \n@@ -3443,10 +3445,6 @@ diagnose_atomic_constraint (tree t, tree map, tree result, subst_info info)\n     case REQUIRES_EXPR:\n       diagnose_requires_expr (expr, map, info.in_decl);\n       break;\n-    case INTEGER_CST:\n-      /* This must be either 0 or false.  */\n-      inform (loc, \"%qE is never satisfied\", expr);\n-      break;\n     default:\n       tree a = copy_node (t);\n       ATOMIC_CONSTR_MAP (a) = map;"}, {"sha": "3999695ae93ea6c98dfd9d2f8fa4b3bb70c7f2a6", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ea3d2ced786c4544fa625f34f515d89ed074fe/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ea3d2ced786c4544fa625f34f515d89ed074fe/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=a7ea3d2ced786c4544fa625f34f515d89ed074fe", "patch": "@@ -1747,6 +1747,13 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n \tTARGET_EXPR_NO_ELIDE (stmt) = 1;\n       break;\n \n+    case REQUIRES_EXPR:\n+      /* Emit the value of the requires-expression.  */\n+      *stmt_p = constant_boolean_node (constraints_satisfied_p (stmt),\n+\t\t\t\t       boolean_type_node);\n+      *walk_subtrees = 0;\n+      break;\n+\n     case TEMPLATE_ID_EXPR:\n       gcc_assert (concept_check_p (stmt));\n       /* Emit the value of the concept check.  */"}, {"sha": "bf7387dd1495003e6e8e3e2e9f45a1df6c61411c", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ea3d2ced786c4544fa625f34f515d89ed074fe/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ea3d2ced786c4544fa625f34f515d89ed074fe/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a7ea3d2ced786c4544fa625f34f515d89ed074fe", "patch": "@@ -27762,7 +27762,9 @@ cp_parser_requires_expression (cp_parser *parser)\n       parms = NULL_TREE;\n \n     /* Parse the requirement body. */\n+    ++processing_template_decl;\n     reqs = cp_parser_requirement_body (parser);\n+    --processing_template_decl;\n     if (reqs == error_mark_node)\n       return error_mark_node;\n   }\n@@ -27771,7 +27773,17 @@ cp_parser_requires_expression (cp_parser *parser)\n      the parm chain.  */\n   grokparms (parms, &parms);\n   loc = make_location (loc, loc, parser->lexer);\n-  return finish_requires_expr (loc, parms, reqs);\n+  tree expr = finish_requires_expr (loc, parms, reqs);\n+  if (!processing_template_decl)\n+    {\n+      /* Perform semantic processing now to diagnose any invalid types and\n+\t expressions.  */\n+      int saved_errorcount = errorcount;\n+      tsubst_requires_expr (expr, NULL_TREE, tf_warning_or_error, NULL_TREE);\n+      if (errorcount > saved_errorcount)\n+\treturn error_mark_node;\n+    }\n+  return expr;\n }\n \n /* Parse a parameterized requirement."}, {"sha": "bd30c96a12a1876b2901baccb355d62aa095b9ae", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ea3d2ced786c4544fa625f34f515d89ed074fe/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ea3d2ced786c4544fa625f34f515d89ed074fe/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a7ea3d2ced786c4544fa625f34f515d89ed074fe", "patch": "@@ -20319,8 +20319,6 @@ tsubst_copy_and_build (tree t,\n     case REQUIRES_EXPR:\n       {\n \ttree r = tsubst_requires_expr (t, args, tf_none, in_decl);\n-\tif (r == error_mark_node && (complain & tf_error))\n-\t  tsubst_requires_expr (t, args, complain, in_decl);\n \tRETURN (r);\n       }\n "}, {"sha": "38637bdf3f365774cdf7cd469a82052f4998f2f6", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ea3d2ced786c4544fa625f34f515d89ed074fe/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ea3d2ced786c4544fa625f34f515d89ed074fe/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=a7ea3d2ced786c4544fa625f34f515d89ed074fe", "patch": "@@ -9687,8 +9687,10 @@ finish_static_assert (tree condition, tree message, location_t location,\n             error (\"static assertion failed: %s\",\n \t\t   TREE_STRING_POINTER (message));\n \n-\t  /* Actually explain the failure if this is a concept check.  */\n-\t  if (concept_check_p (orig_condition))\n+\t  /* Actually explain the failure if this is a concept check or a\n+\t     requires-expression.  */\n+\t  if (concept_check_p (orig_condition)\n+\t      || TREE_CODE (orig_condition) == REQUIRES_EXPR)\n \t    diagnose_constraints (location, orig_condition, NULL_TREE);\n \t}\n       else if (condition && condition != error_mark_node)"}, {"sha": "8c8eee014fd7f8b6315c17bf79dbeab651872481", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ea3d2ced786c4544fa625f34f515d89ed074fe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ea3d2ced786c4544fa625f34f515d89ed074fe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a7ea3d2ced786c4544fa625f34f515d89ed074fe", "patch": "@@ -1,5 +1,11 @@\n 2020-03-28  Patrick Palka  <ppalka@redhat.com>\n \n+\tPR c++/94252\n+\t* g++.dg/concepts/diagnostic7.C: New test.\n+\t* g++.dg/concepts/pr94252.C: New test.\n+\t* g++.dg/cpp2a/concepts-requires18.C: Adjust to expect an additional\n+\tdiagnostic.\n+\n \t* g++.dg/concepts/diagnostic1.C: Pass -fconcepts-diagnostics-depth=2.\n \t* g++.dg/concepts/diagnostic5.C: Adjust expected diagnostics.\n \t* g++.dg/cpp2a/concepts-iconv1.C: Pass -fconcepts-diagnostics-depth=2."}, {"sha": "3761b2b8f06f9d00c9d620f725ad08f2959cf42b", "filename": "gcc/testsuite/g++.dg/concepts/diagnostic7.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ea3d2ced786c4544fa625f34f515d89ed074fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ea3d2ced786c4544fa625f34f515d89ed074fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic7.C?ref=a7ea3d2ced786c4544fa625f34f515d89ed074fe", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile { target c++2a } }\n+\n+template<typename A, typename B>\n+  concept same_as = __is_same(A, B);\n+\n+void f();\n+\n+static_assert(requires { { f() } noexcept -> same_as<int>; });\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } .-1 }\n+// { dg-message \"not .noexcept.\" \"\" { target *-*-* } .-2 }\n+// { dg-message \"return-type-requirement\" \"\" { target *-*-* } .-3 }"}, {"sha": "56ce5f88bad1fe13139661cc398d86628ab19e0e", "filename": "gcc/testsuite/g++.dg/concepts/pr94252.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ea3d2ced786c4544fa625f34f515d89ed074fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr94252.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ea3d2ced786c4544fa625f34f515d89ed074fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr94252.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr94252.C?ref=a7ea3d2ced786c4544fa625f34f515d89ed074fe", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/94252\n+// { dg-do compile { target c++2a } }\n+\n+auto f = []{ return 0; };\n+static_assert(requires { f(); });\n+static_assert(requires { requires requires { f(); }; });\n+\n+template<typename A, typename B>\n+  concept same_as = __is_same(A, B);\n+\n+struct S { int f(int) noexcept; };\n+static_assert(requires(S o, int i) {\n+  o.f(i);\n+  { o.f(i) } noexcept -> same_as<int>;\n+});\n+\n+template<typename T>\n+  concept c = requires (T t) { requires (T)5; }; // { dg-error \"has type .int.\" }\n+\n+int\n+foo()\n+{\n+  requires { requires c<int>; };\n+  requires { { 5 } -> same_as<bool>; };\n+  requires { requires !requires { { 5 } -> same_as<bool>; }; };\n+  return requires { requires 5; }; // { dg-error \"has type .int.\" }\n+}"}, {"sha": "c97704565a1bd9186333e741601c6022b1c340b1", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires18.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ea3d2ced786c4544fa625f34f515d89ed074fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ea3d2ced786c4544fa625f34f515d89ed074fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires18.C?ref=a7ea3d2ced786c4544fa625f34f515d89ed074fe", "patch": "@@ -4,7 +4,7 @@ template<typename T>\n concept integer = __is_same_as(T, int);\n \n template<typename T>\n-concept subst = requires (T x) { requires true; };\n+concept subst = requires (T x) { requires true; }; // { dg-error \"parameter type .void.\" }\n \n template<typename T>\n concept c1 = requires { requires integer<T> || subst<T&>; }; // { dg-message \"in requirements\" }"}]}