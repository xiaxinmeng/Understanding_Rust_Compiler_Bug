{"sha": "8db2ba4032d683b70d21d443f519c79362db8593", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRiMmJhNDAzMmQ2ODNiNzBkMjFkNDQzZjUxOWM3OTM2MmRiODU5Mw==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargls@comcast.net", "date": "2005-03-24T18:16:33Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2005-03-24T18:16:33Z"}, "message": "intrinsic.texi: New file.\n\ngfortran.texi: Include it; white space change; fix typo.\n\nFrom-SVN: r97000", "tree": {"sha": "4f3db6fca3aceddeb0e33b50acf831d209015d19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f3db6fca3aceddeb0e33b50acf831d209015d19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8db2ba4032d683b70d21d443f519c79362db8593", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8db2ba4032d683b70d21d443f519c79362db8593", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8db2ba4032d683b70d21d443f519c79362db8593", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8db2ba4032d683b70d21d443f519c79362db8593/comments", "author": null, "committer": null, "parents": [{"sha": "ee4b41afc740e51c09cbb71097ff33a950d26ae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee4b41afc740e51c09cbb71097ff33a950d26ae0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee4b41afc740e51c09cbb71097ff33a950d26ae0"}], "stats": {"total": 740, "additions": 726, "deletions": 14}, "files": [{"sha": "2018a4adca2de7f03adc43ba16e17c139f66d34f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db2ba4032d683b70d21d443f519c79362db8593/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db2ba4032d683b70d21d443f519c79362db8593/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8db2ba4032d683b70d21d443f519c79362db8593", "patch": "@@ -1,3 +1,8 @@\n+2005-03-34  Steven G. Kargl  <kargls@comcast.net>\n+\n+\t* intrinsic.texi: New file.\n+\t* gfortran.texi: Include it; white space change; fix typo.\n+\n 2005-03-23  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* f95-lang.c (LANG_HOOKS_TRUTHVALUE_CONVERSION): Remove."}, {"sha": "9068cffdc76a5702bfdf059f77b1a7e87b29c6a7", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db2ba4032d683b70d21d443f519c79362db8593/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db2ba4032d683b70d21d443f519c79362db8593/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=8db2ba4032d683b70d21d443f519c79362db8593", "patch": "@@ -109,25 +109,31 @@ the GNU Fortran 95 compiler. You can find in this manual how to invoke\n \n @ifset DEVELOPMENT\n @emph{Warning:} This document, and the compiler it describes, are still\n-under development.  While efforts are made too keep it up-to-date it might\n+under development.  While efforts are made to keep it up-to-date, it might\n not accurately reflect the status of the most recent @command{gfortran}.\n @end ifset\n \n+@comment\n+@comment  When you add a new menu item, please keep the right hand\n+@comment  aligned to the same column.  Do not use tabs.  This provides\n+@comment  better formatting.\n+@comment\n @menu\n-* Copying::         GNU General Public License says\n-                    how you can copy and share GNU Fortran.\n+* Copying::              GNU General Public License says\n+                         how you can copy and share GNU Fortran.\n * GNU Free Documentation License::\n-\t\t    How you can copy and share this manual.\n-* Funding::         How to help assure continued work for free software.\n-* Getting Started:: What you should know about @command{gfortran}.\n-* GFORTRAN and GCC::\t    You can compile Fortran, C, or other programs.\n-* GFORTRAN and G77::     Why we choose to start from scratch.\n+\t\t         How you can copy and share this manual.\n+* Funding::              How to help assure continued work for free software.\n+* Getting Started::      What you should know about @command{gfortran}.\n+* GFORTRAN and GCC::     You can compile Fortran, C, or other programs.\n+* GFORTRAN and G77::     Why we chose to start from scratch.\n * Invoking GFORTRAN::    Command options supported by @command{gfortran}.\n-* Project Status::  Status of @command{gfortran}, Roadmap, proposed extensions.\n-* Contributing::    Helping you can help.\n-* Standards::\t    Standards supported by @command{gfortran}\n-* Extensions::      Language extensions implemented by @command{gfortran}\n-* Index::\t    Index of this documentation.\n+* Project Status::       Status of @command{gfortran}, roadmap, proposed extensions.\n+* Contributing::         How you can help.\n+* Standards::\t         Standards supported by @command{gfortran}\n+* Extensions::           Language extensions implemented by @command{gfortran}\n+* Intrinsic Procedures:: Intrinsic procedures supported by @command{gfortran}\n+* Index::                Index of this documentation.\n @end menu\n \n \n@@ -369,7 +375,6 @@ because it was expected to be easier to maintain code we\n develop ourselves than to do a major overhaul of @command{g77} first,\n and then build a Fortran 95 compiler out of it.\n \n-\n @include invoke.texi\n \n @c ---------------------------------------------------------------------\n@@ -670,6 +675,7 @@ Examples of standard conforming code equivalent to the above example, are:\n       DATA i,j,x /1,2,3*0.,1./\n @end smallexample\n \n+@include intrinsic.texi\n @c ---------------------------------------------------------------------\n @c Contributing\n @c ---------------------------------------------------------------------"}, {"sha": "c40cfed52a185ed084c17a220b8a4ddbfa305ee1", "filename": "gcc/fortran/intrinsic.texi", "status": "added", "additions": 701, "deletions": 0, "changes": 701, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db2ba4032d683b70d21d443f519c79362db8593/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db2ba4032d683b70d21d443f519c79362db8593/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=8db2ba4032d683b70d21d443f519c79362db8593", "patch": "@@ -0,0 +1,701 @@\n+@ignore\n+Copyright (C) 2005\n+Free Software Foundation, Inc.\n+This is part of the GFORTRAN manual.   \n+For copying conditions, see the file gfortran.texi.\n+\n+Permission is granted to copy, distribute and/or modify this document\n+under the terms of the GNU Free Documentation License, Version 1.2 or\n+any later version published by the Free Software Foundation; with the\n+Invariant Sections being ``GNU General Public License'' and ``Funding\n+Free Software'', the Front-Cover texts being (a) (see below), and with\n+the Back-Cover Texts being (b) (see below).  A copy of the license is\n+included in the gfdl(7) man page.\n+\n+\n+Some basic guidelines for editing this document:\n+\n+  (1) The intrinsic procedures are to be listed in alphabetical order.\n+  (2) The generic name is to be use.\n+  (3) The specific names are included in the function index and in a\n+      table at the end of the node (See ABS entry).\n+  (4) Try to maintain the same style for each entry.\n+\n+\n+@end ignore\n+\n+\n+@node Intrinsic Procedures\n+@chapter Intrinsic Procedures\n+@cindex Intrinsic Procedures\n+\n+This portion of the document is incomplete and undergoing massive expansion \n+and editing.  All contributions and corrections are strongly encouraged. \n+\n+@menu\n+* Introduction:   Introduction\n+* @code{ABORT}:        @code{ABORT},    Abort the program     \n+* @code{ABS}:          @code{ABS},      Absolute value     \n+* @code{ACHAR}:        @code{ACHAR},    Character in @acronym{ASCII} collating sequence\n+* @code{ACOS}:         @code{ACOS},     Arccosine function\n+* @code{ADJUSTL}:      @code{ADJUSTL},  Left adjust a string\n+* @code{ADJUSTR}:      @code{ADJUSTR},  Right adjust a string\n+@end menu\n+\n+@node Introduction\n+@section Introduction to intrinsic procedures\n+\n+Gfortran provides a rich set of intrinsic procedures that includes all\n+the intrinsic procedures required by the Fortran 95 standard, a set of\n+intrinsic procedures for backwards compatibility with Gnu Fortran 77\n+(i.e., @command{g77}), and a small selection of intrinsic procedures\n+from the Fortran 2003 standard.  Any description here, which conflicts with a \n+description in either the Fortran 95 standard or the Fortran 2003 standard,\n+is unintentional and the standard(s) should be considered authoritative.\n+\n+The enumeration of the @code{KIND} type parameter is processor defined in\n+the Fortran 95 standard.  Gfortran defines the default integer type and\n+default real type by @code{INTEGER(KIND=4)} and @code{REAL(KIND=4)},\n+respectively.  The standard mandates that both data types shall have\n+another kind, which have more precision.  On typical target architectures\n+supports by @command{gfortran}, this kind type parameter is @code{KIND=8}.\n+Hence, @code{REAL(KIND=8)} and @code{DOUBLE PRECISION} are equivalent.\n+In the description of generic intrinsic procedures, the kind type parameter\n+will be specified by @code{KIND=*}, and in the description of specific\n+names for an intrinsic procedure the kind type parameter will be explicitly\n+given (e.g., @code{REAL(KIND=4)} or @code{REAL(KIND=8)}).  Finally, for\n+brevity the optional @code{KIND=} syntax will be omitted.\n+\n+Many of the intrinsics procedures take one or more optional arguments.\n+This document follows the convention used in the Fortran 95 standard,\n+and denotes such arguments by square brackets.\n+\n+@command{Gfortran} offers the @option{-std=f95} and @option{-std=gnu} options,\n+which can be used to restrict the set of intrinsic procedures to a \n+given standard.  By default, @command{gfortran} sets the @option{-std=gnu}\n+option, and so all intrinsic procedures describe here are accepted.  There\n+is one caveat.  For a select group of intrinsic procedures, @command{g77}\n+implemented both a function and a subroutine.  Both classes \n+have been implemented in @command{gfortran} for backwards compatibility\n+with @command{g77}.  It is noted here that these functions and subroutines\n+cannot be intermixed in a given subprogram.  In the descriptions that follow,\n+the applicable option(s) is noted.\n+\n+\n+\n+@node @code{ABORT}\n+@section @code{ABORT} --- Abort the program  \n+@findex @code{ABORT}\n+@cindex abort\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{ABORT} causes immediate termination of the program.  On operating\n+systems that support a core dump, @code{ABORT} will produce a core dump,\n+which is suitable for debugging purposes.\n+\n+@item @emph{Option}:\n+gnu\n+\n+@item @emph{Type}:\n+non-elemental subroutine\n+\n+@item @emph{Syntax}:\n+@code{CALL ABORT}\n+\n+@item @emph{Return value}:\n+Does not return.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_abort\n+  integer :: i = 1, j = 2\n+  if (i /= j) call abort\n+end program test_abort\n+@end smallexample\n+@end table\n+\n+\n+\n+@node @code{ABS}\n+@section @code{ABS} --- Absolute value  \n+@findex @code{ABS} intrinsic\n+@findex @code{CABS} intrinsic\n+@findex @code{DABS} intrinsic\n+@findex @code{IABS} intrinsic\n+@findex @code{ZABS} intrinsic\n+@findex @code{CDABS} intrinsic\n+@cindex absolute value\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{ABS(X)} computes the absolute value of @code{X}.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Type}:\n+elemental function\n+\n+@item @emph{Syntax}:\n+@code{X = ABS(X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X} @tab The type of the argument shall be an @code{INTEGER(*)},\n+@code{REAL(*)}, or @code{COMPLEX(*)}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of the same type and\n+kind as the argument except the return value is @code{REAL(*)} for a\n+@code{COMPLEX(*)} argument.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_abort\n+  integer :: i = -1\n+  real :: x = -1.e0\n+  complex :: z = (-1.e0,0.e0)\n+  i = abs(i)\n+  x = abs(x)\n+  x = abs(z)\n+end program test_abort\n+@end smallexample\n+\n+@item @emph{Specific names}:\n+@multitable @columnfractions .24 .24 .24 .24\n+@item Name            @tab Argument            @tab Return type       @tab Option\n+@item @code{CABS(Z)}  @tab @code{COMPLEX(4) Z} @tab @code{REAL(4)}    @tab f95, gnu\n+@item @code{DABS(X)}  @tab @code{REAL(8) X}    @tab @code{REAL(8)}    @tab f95, gnu\n+@item @code{IABS(I)}  @tab @code{INTEGER(4) I} @tab @code{INTEGER(4)} @tab f95, gnu\n+@item @code{ZABS(Z)}  @tab @code{COMPLEX(8) Z} @tab @code{COMPLEX(8)} @tab gnu\n+@item @code{CDABS(Z)} @tab @code{COMPLEX(8) Z} @tab @code{COMPLEX(8)} @tab gnu\n+@end multitable\n+@end table\n+\n+\n+\n+@node @code{ACHAR}\n+@section @code{ACHAR} --- Character in @acronym{ASCII} collating sequence \n+@findex @code{ACHAR} intrinsic\n+@cindex @acronym{ASCII} collating sequence\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{ACHAR(I)} returns the character located at position @code{I}\n+in the @acronym{ASCII} collating sequence.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Type}:\n+elemental function\n+\n+@item @emph{Syntax}:\n+@code{C = ACHAR(I)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{I} @tab The type shall be an @code{INTEGER(*)}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of type @code{CHARACTER} with a length of one.  The\n+kind type parameter is the same as  @code{KIND('A')}.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_achar\n+  character c\n+  c = achar(32)\n+end program test_abort\n+@end smallexample\n+@end table\n+\n+\n+\n+@node @code{ACOS}\n+@section @code{ACOS} --- Arccosine function \n+@findex @code{ACOS} intrinsic\n+@findex @code{DACOS} intrinsic\n+@cindex arccosine\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{ACOS(X)} computes the arccosine of its @var{X}.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Type}:\n+elemental function\n+\n+@item @emph{Syntax}:\n+@code{X = ACOS(X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X} @tab The type shall be an @code{REAL(*)}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of type @code{REAL(*)} and it lies in the\n+range @math{ 0 \\leq \\arccos (x) \\leq \\pi}.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_acos\n+  real(8) :: x = 0.866_8\n+  x = achar(x)\n+end program test_acos\n+@end smallexample\n+\n+@item @emph{Specific names}:\n+@multitable @columnfractions .24 .24 .24 .24\n+@item Name            @tab Argument          @tab Return type       @tab Option\n+@item @code{DACOS(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab f95, gnu\n+@end multitable\n+@end table\n+\n+@node @code{ADJUSTL}\n+@section @code{ADJUSTL} --- Left adjust a string \n+@findex @code{ADJUSTL} intrinsic\n+@cindex adjust string\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{ADJUSTL(STR)} will left adjust a string by removing leading spaces.\n+Spaces are inserted at the end of the string as needed.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Type}:\n+elemental function\n+\n+@item @emph{Syntax}:\n+@code{STR = ADJUSTL(STR)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{STR} @tab The type shall be @code{CHARACTER}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of type @code{CHARACTER} where leading spaces \n+are removed and the same number of spaces are inserted on the end\n+of @var{STR}.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_adjustl\n+  character(len=20) :: str = '   gfortran'\n+  str = adjustl(str)\n+  print *, str\n+end program test_adjustl\n+@end smallexample\n+@end table\n+\n+\n+@node @code{ADJUSTR}\n+@section @code{ADJUSTR} --- Right adjust a string \n+@findex @code{ADJUSTR} intrinsic\n+@cindex adjust string\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{ADJUSTR(STR)} will right adjust a string by removing trailing spaces.\n+Spaces are inserted at the start of the string as needed.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Type}:\n+elemental function\n+\n+@item @emph{Syntax}:\n+@code{STR = ADJUSTR(STR)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{STR} @tab The type shall be @code{CHARACTER}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of type @code{CHARACTER} where trailing spaces \n+are removed and the same number of spaces are inserted at the start\n+of @var{STR}.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_adjustr\n+  character(len=20) :: str = 'gfortran'\n+  str = adjustr(str)\n+  print *, str\n+end program test_adjustr\n+@end smallexample\n+@end table\n+\n+\n+\n+@comment gen   aimag\n+@comment       dimag \n+@comment \n+@comment gen   aint\n+@comment       dint\n+@comment \n+@comment gen   all\n+@comment \n+@comment gen   allocated \n+@comment \n+@comment gen   anint\n+@comment       dnint\n+@comment \n+@comment gen   any\n+@comment \n+@comment gen   asin\n+@comment       dasin\n+@comment \n+@comment gen   associated\n+@comment \n+@comment gen   atan\n+@comment       datan\n+@comment \n+@comment gen   atan2\n+@comment       datan2\n+@comment \n+@comment gen   besj0\n+@comment       dbesj0 \n+@comment \n+@comment gen   besj1\n+@comment       dbesj1\n+@comment \n+@comment gen   besjn\n+@comment       dbesjn\n+@comment \n+@comment gen   besy0\n+@comment       dbesy0\n+@comment \n+@comment gen   besy1\n+@comment       dbesy1\n+@comment \n+@comment gen   besyn\n+@comment       dbesyn\n+@comment \n+@comment gen   bit_size \n+@comment \n+@comment gen   btest\n+@comment \n+@comment gen   ceiling\n+@comment \n+@comment gen   char\n+@comment \n+@comment gen   cmplx \n+@comment \n+@comment gen   command_argument_count\n+@comment \n+@comment gen   conjg\n+@comment       dconjg\n+@comment \n+@comment gen   cos\n+@comment       dcos\n+@comment       ccos\n+@comment       zcos,cdcos\n+@comment \n+@comment gen   cosh\n+@comment       dcosh\n+@comment \n+@comment gen   count\n+@comment \n+@comment sub   cpu_time\n+@comment \n+@comment gen   cshift\n+@comment \n+@comment sub   date_and_time\n+@comment \n+@comment gen   dble \n+@comment       dfloat\n+@comment \n+@comment gen   dcmplx\n+@comment \n+@comment gen   digits\n+@comment \n+@comment gen   dim\n+@comment       idim\n+@comment       ddim\n+@comment \n+@comment gen   dot_product\n+@comment \n+@comment gen   dprod\n+@comment \n+@comment gen   dreal \n+@comment \n+@comment sub   dtime\n+@comment \n+@comment gen   eoshift\n+@comment \n+@comment gen   epsilon\n+@comment \n+@comment gen   erf\n+@comment       derf\n+@comment \n+@comment gen   erfc\n+@comment       derfc\n+@comment \n+@comment gen   etime\n+@comment sub   etime\n+@comment \n+@comment sub   exit\n+@comment \n+@comment gen   exp\n+@comment       dexp\n+@comment       cexp\n+@comment       zexp,cdexp\n+@comment \n+@comment gen   exponent\n+@comment \n+@comment gen   floor\n+@comment \n+@comment sub   flush\n+@comment \n+@comment gen   fnum\n+@comment \n+@comment gen   fraction\n+@comment \n+@comment gen   fstat\n+@comment sub   fstat\n+@comment \n+@comment sub   getarg\n+@comment \n+@comment gen   getcwd\n+@comment sub   getcwd\n+@comment \n+@comment sub   getenv\n+@comment \n+@comment gen   getgid\n+@comment \n+@comment gen   getpid\n+@comment \n+@comment gen   getuid\n+@comment \n+@comment sub   get_command\n+@comment \n+@comment sub   get_command_argument\n+@comment \n+@comment sub   get_environment_variable\n+@comment \n+@comment gen   huge\n+@comment \n+@comment gen   iachar\n+@comment \n+@comment gen   iand\n+@comment \n+@comment gen   iargc\n+@comment \n+@comment gen   ibclr\n+@comment \n+@comment gen   ibits\n+@comment \n+@comment gen   ibset\n+@comment \n+@comment gen   ichar\n+@comment \n+@comment gen   ieor\n+@comment \n+@comment gen   index\n+@comment \n+@comment gen   int\n+@comment       ifix\n+@comment       idint\n+@comment \n+@comment gen   ior\n+@comment \n+@comment gen   irand\n+@comment \n+@comment gen   ishft\n+@comment \n+@comment gen   ishftc\n+@comment \n+@comment gen   kind\n+@comment \n+@comment gen   lbound\n+@comment \n+@comment gen   len\n+@comment \n+@comment gen   len_trim\n+@comment \n+@comment gen   lge\n+@comment \n+@comment gen   lgt\n+@comment \n+@comment gen   lle\n+@comment \n+@comment gen   llt\n+@comment \n+@comment gen   log\n+@comment       alog\n+@comment       dlog\n+@comment       clog\n+@comment       zlog, cdlog\n+@comment \n+@comment gen   log10\n+@comment       alog10\n+@comment       dlog10\n+@comment \n+@comment gen   logical\n+@comment \n+@comment gen   matmul\n+@comment \n+@comment gen   max\n+@comment       max0\n+@comment       amax0\n+@comment       amax1\n+@comment       max1\n+@comment       dmax1\n+@comment \n+@comment gen   maxexponent\n+@comment \n+@comment gen   maxloc\n+@comment\n+@comment gen   maxval\n+@comment \n+@comment gen   merge\n+@comment \n+@comment gen   min\n+@comment       min0\n+@comment       amin0\n+@comment       amin1\n+@comment       min1\n+@comment       dmin1\n+@comment \n+@comment gen   minexponent\n+@comment \n+@comment gen   minloc\n+@comment \n+@comment gen   minval\n+@comment \n+@comment gen   mod\n+@comment       amod\n+@comment       dmod\n+@comment \n+@comment gen   modulo\n+@comment \n+@comment sub   mvbits\n+@comment \n+@comment gen   nearest\n+@comment \n+@comment gen   nint\n+@comment       idnint\n+@comment \n+@comment gen   not\n+@comment \n+@comment gen   null\n+@comment \n+@comment gen   pack\n+@comment \n+@comment gen   precision\n+@comment \n+@comment gen   present\n+@comment \n+@comment gen   product\n+@comment \n+@comment gen   radix\n+@comment \n+@comment gen   rand\n+@comment       ran \n+@comment \n+@comment sub   random_number\n+@comment \n+@comment sub   random_seed\n+@comment \n+@comment gen   range\n+@comment \n+@comment gen   real\n+@comment       float\n+@comment       sngl\n+@comment \n+@comment gen   repeat\n+@comment \n+@comment gen   reshape\n+@comment \n+@comment gen   rrspacing\n+@comment \n+@comment gen   scale\n+@comment \n+@comment gen   scan\n+@comment \n+@comment gen   second\n+@comment sub   second\n+@comment \n+@comment gen   selected_int_kind\n+@comment \n+@comment gen   selected_real_kind\n+@comment \n+@comment gen   set_exponent\n+@comment \n+@comment gen   shape\n+@comment \n+@comment gen   sign\n+@comment       isign\n+@comment       dsign\n+@comment \n+@comment gen   sin\n+@comment       dsin\n+@comment       csin\n+@comment       zsin,cdsin\n+@comment \n+@comment gen   sinh\n+@comment       dsinh\n+@comment \n+@comment gen   size\n+@comment \n+@comment gen   spacing\n+@comment \n+@comment gen   spread\n+@comment \n+@comment gen   sqrt\n+@comment       dsqrt\n+@comment       csqrt\n+@comment       zsqrt,cdsqrt\n+@comment \n+@comment sub   srand\n+@comment \n+@comment gen   stat\n+@comment sub   stat\n+@comment \n+@comment gen   sum\n+@comment \n+@comment gen   system\n+@comment sub   system\n+@comment \n+@comment sub system_clock\n+@comment \n+@comment gen   tan\n+@comment       dtan\n+@comment \n+@comment gen   tanh\n+@comment       dtanh\n+@comment \n+@comment gen   tiny\n+@comment \n+@comment gen   transfer\n+@comment \n+@comment gen   transpose\n+@comment \n+@comment gen   trim\n+@comment \n+@comment gen   ubound\n+@comment \n+@comment gen   umask\n+@comment sub   umask\n+@comment \n+@comment gen   unlink\n+@comment sub   unlink\n+@comment \n+@comment gen   unpack\n+@comment \n+@comment gen   verify\n+\n+ \n+"}]}