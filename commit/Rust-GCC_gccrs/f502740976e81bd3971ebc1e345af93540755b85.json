{"sha": "f502740976e81bd3971ebc1e345af93540755b85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUwMjc0MDk3NmU4MWJkMzk3MWViYzFlMzQ1YWY5MzU0MDc1NWI4NQ==", "commit": {"author": {"name": "Revital Eres", "email": "eres@il.ibm.com", "date": "2007-10-02T09:22:17Z"}, "committer": {"name": "Revital Eres", "email": "revitale@gcc.gnu.org", "date": "2007-10-02T09:22:17Z"}, "message": "Add vec_init support for 750CL paired vectors and fix movv2sf_paired\n\nFrom-SVN: r128952", "tree": {"sha": "b6943adaff05cd744724e4661c974a2378355cf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6943adaff05cd744724e4661c974a2378355cf2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f502740976e81bd3971ebc1e345af93540755b85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f502740976e81bd3971ebc1e345af93540755b85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f502740976e81bd3971ebc1e345af93540755b85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f502740976e81bd3971ebc1e345af93540755b85/comments", "author": {"login": "revit13", "id": 16211463, "node_id": "MDQ6VXNlcjE2MjExNDYz", "avatar_url": "https://avatars.githubusercontent.com/u/16211463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/revit13", "html_url": "https://github.com/revit13", "followers_url": "https://api.github.com/users/revit13/followers", "following_url": "https://api.github.com/users/revit13/following{/other_user}", "gists_url": "https://api.github.com/users/revit13/gists{/gist_id}", "starred_url": "https://api.github.com/users/revit13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/revit13/subscriptions", "organizations_url": "https://api.github.com/users/revit13/orgs", "repos_url": "https://api.github.com/users/revit13/repos", "events_url": "https://api.github.com/users/revit13/events{/privacy}", "received_events_url": "https://api.github.com/users/revit13/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "927171bfea8858306c990c51a61dd413006141d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/927171bfea8858306c990c51a61dd413006141d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/927171bfea8858306c990c51a61dd413006141d2"}], "stats": {"total": 171, "additions": 169, "deletions": 2}, "files": [{"sha": "7cc7fffdde19852bfca708c1ce284e40d30a030c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f502740976e81bd3971ebc1e345af93540755b85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f502740976e81bd3971ebc1e345af93540755b85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f502740976e81bd3971ebc1e345af93540755b85", "patch": "@@ -1,3 +1,13 @@\n+2007-10-02  Revital Eres  <eres@il.ibm.com>\n+\n+\t* config/rs6000/predicates.md (easy_vector_constant): Return false\n+\tfor 750CL paired vectors.\n+\t* config/rs6000/paired.md (movv2sf_paired): Fix move of easy\n+\tvector constant.\n+\t(vec_initv2sf): Add new description.\n+\t(vconcatsf): Likewise.\n+\t* config/rs6000/rs6000-protos.h: Declare paired_expand_vector_init.\n+\n 2007-10-01  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* tree-ssa-sink.c (sink_code_in_bb): Don't stop sinking after"}, {"sha": "67eee233c5e433d6c7ce7e89e679191053dca760", "filename": "gcc/config/rs6000/paired.md", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f502740976e81bd3971ebc1e345af93540755b85/gcc%2Fconfig%2Frs6000%2Fpaired.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f502740976e81bd3971ebc1e345af93540755b85/gcc%2Fconfig%2Frs6000%2Fpaired.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpaired.md?ref=f502740976e81bd3971ebc1e345af93540755b85", "patch": "@@ -188,7 +188,7 @@\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"*movv2sf_paired\"\n-  [(set (match_operand:V2SF 0 \"nonimmediate_operand\" \"=Z,f,f,o,r,r,v\")\n+  [(set (match_operand:V2SF 0 \"nonimmediate_operand\" \"=Z,f,f,o,r,r,f\")\n \t\t (match_operand:V2SF 1 \"input_operand\" \"f,Z,f,r,o,r,W\"))]\n   \"TARGET_PAIRED_FLOAT\n    && (register_operand (operands[0], V2SFmode) \n@@ -202,7 +202,7 @@\n     case 3: return \"#\";\n     case 4: return \"#\";\n     case 5: return \"#\";\n-    case 6: return output_vec_const_move (operands);\n+    case 6: return \"#\"; \n     default: gcc_unreachable ();\n     }\n }\n@@ -352,4 +352,21 @@\n   \"ps_muls1 %0, %1, %2\"\n   [(set_attr \"type\" \"fp\")])\n \n+(define_expand \"vec_initv2sf\"\n+  [(match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+   (match_operand 1 \"\" \"\")]\n+  \"TARGET_PAIRED_FLOAT\"\n+{\n+  paired_expand_vector_init (operands[0], operands[1]);\n+  DONE;\n+})\n+\n+(define_insn \"*vconcatsf\"\n+  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n+        (vec_concat:V2SF\n+         (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n+         (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_PAIRED_FLOAT\"\n+  \"ps_merge00 %0, %1, %2\"\n+  [(set_attr \"type\" \"fp\")])\n "}, {"sha": "3dd4bf560d73d9f94b048ff3029c0af36baad488", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f502740976e81bd3971ebc1e345af93540755b85/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f502740976e81bd3971ebc1e345af93540755b85/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=f502740976e81bd3971ebc1e345af93540755b85", "patch": "@@ -275,6 +275,11 @@\n (define_predicate \"easy_vector_constant\"\n   (match_code \"const_vector\")\n {\n+  /* As the paired vectors are actually FPRs it seems that there is\n+     no easy way to load a CONST_VECTOR without using memory.  */\n+  if (TARGET_PAIRED_FLOAT)\n+    return false;\n+\n   if (ALTIVEC_VECTOR_MODE (mode))\n     {\n       if (zero_constant (op, mode))"}, {"sha": "8c9eb0696c14b823b29a59d7a3d8273f6a4cef92", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f502740976e81bd3971ebc1e345af93540755b85/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f502740976e81bd3971ebc1e345af93540755b85/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=f502740976e81bd3971ebc1e345af93540755b85", "patch": "@@ -48,6 +48,7 @@ extern rtx find_addr_reg (rtx);\n extern rtx gen_easy_altivec_constant (rtx);\n extern const char *output_vec_const_move (rtx *);\n extern void rs6000_expand_vector_init (rtx, rtx);\n+extern void paired_expand_vector_init (rtx, rtx);\n extern void rs6000_expand_vector_set (rtx, rtx, int);\n extern void rs6000_expand_vector_extract (rtx, rtx, int);\n extern void build_mask64_2_operands (rtx, rtx *);"}, {"sha": "0f2617fd82bbd0d50073f922801fd52705b36f0b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f502740976e81bd3971ebc1e345af93540755b85/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f502740976e81bd3971ebc1e345af93540755b85/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=f502740976e81bd3971ebc1e345af93540755b85", "patch": "@@ -2716,6 +2716,59 @@ output_vec_const_move (rtx *operands)\n     return \"li %0,%1\\n\\tevmergelo %0,%0,%0\\n\\tli %0,%2\";\n }\n \n+/* Initialize TARGET of vector PAIRED to VALS.  */\n+\n+void\n+paired_expand_vector_init (rtx target, rtx vals)\n+{\n+  enum machine_mode mode = GET_MODE (target);\n+  int n_elts = GET_MODE_NUNITS (mode);\n+  int n_var = 0;\n+  rtx x, new, tmp, constant_op, op1, op2;\n+  int i;\n+\n+  for (i = 0; i < n_elts; ++i)\n+    {\n+      x = XVECEXP (vals, 0, i);\n+      if (!CONSTANT_P (x))\n+\t++n_var;\n+    }\n+  if (n_var == 0)\n+    {\n+      /* Load from constant pool.  */\n+      emit_move_insn (target, gen_rtx_CONST_VECTOR (mode, XVEC (vals, 0)));\n+      return;\n+    }\n+\n+  if (n_var == 2)\n+    {\n+      /* The vector is initialized only with non-constants.  */\n+      new = gen_rtx_VEC_CONCAT (V2SFmode, XVECEXP (vals, 0, 0),\n+\t\t\t\tXVECEXP (vals, 0, 1));\n+\n+      emit_move_insn (target, new);\n+      return;\n+    }\n+  \n+  /* One field is non-constant and the other one is a constant.  Load the\n+     constant from the constant pool and use ps_merge instruction to\n+     construct the whole vector.  */\n+  op1 = XVECEXP (vals, 0, 0);\n+  op2 = XVECEXP (vals, 0, 1);\n+\n+  constant_op = (CONSTANT_P (op1)) ? op1 : op2;\n+\n+  tmp = gen_reg_rtx (GET_MODE (constant_op));\n+  emit_move_insn (tmp, constant_op);\n+\n+  if (CONSTANT_P (op1))\n+    new = gen_rtx_VEC_CONCAT (V2SFmode, tmp, op2);\n+  else\n+    new = gen_rtx_VEC_CONCAT (V2SFmode, op1, tmp);\n+\n+  emit_move_insn (target, new);\n+}\n+\n /* Initialize vector TARGET to VALS.  */\n \n void"}, {"sha": "a28ce7bb49d7fb249f801cbc4b4a780654a46c78", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f502740976e81bd3971ebc1e345af93540755b85/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f502740976e81bd3971ebc1e345af93540755b85/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f502740976e81bd3971ebc1e345af93540755b85", "patch": "@@ -1,3 +1,9 @@\n+2007-10-02  Revital Eres  <eres@il.ibm.com>\n+\n+\t* gcc.target/powerpc/paired-8.c: New test.\n+\t* gcc.target/powerpc/paired-9.c: New test.\n+\t* gcc.target/powerpc/paired-10.c: New test.\n+\n 2007-10-02  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/33566"}, {"sha": "114f5f74bf98c52786fc43915864da5e3eac55ab", "filename": "gcc/testsuite/gcc.target/powerpc/paired-10.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f502740976e81bd3971ebc1e345af93540755b85/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f502740976e81bd3971ebc1e345af93540755b85/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-10.c?ref=f502740976e81bd3971ebc1e345af93540755b85", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile { target powerpc-*-linux*paired* } } */\n+/* { dg-options \"-mpaired -m32 -ffinite-math-only \" } */\n+\n+/* Test PowerPC PAIRED extensions.  */\n+\n+#include <paired.h>\n+\n+static float out[2] __attribute__ ((aligned (8)));\n+void\n+test_api (float y, float x)\n+{\n+  vector float c = {x, y};\n+  vector float b = {0.0, 8.0};\n+  vector float a;\n+\n+  a = paired_sub (b, c);\n+  paired_stx (a, 0, out);\n+}\n+\n+\n+int main ()\n+{\n+  test_api (6, 7);\n+  return (0); \n+}"}, {"sha": "03e4da29eb296e0a91fadb79897d785533b1e289", "filename": "gcc/testsuite/gcc.target/powerpc/paired-8.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f502740976e81bd3971ebc1e345af93540755b85/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f502740976e81bd3971ebc1e345af93540755b85/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-8.c?ref=f502740976e81bd3971ebc1e345af93540755b85", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile { target powerpc-*-linux*paired* } } */\n+/* { dg-options \"-mpaired -m32 -ffinite-math-only \" } */\n+\n+/* Test PowerPC PAIRED extensions.  */\n+\n+#include <paired.h>\n+\n+static float out[2] __attribute__ ((aligned (8)));\n+void\n+test_api (float x)\n+{\n+  vector float c = {x, x};\n+  vector float b = {60.0, 88.0};\n+  vector float a;\n+\n+  a = paired_sub (b, c);\n+  paired_stx (a, 0, out);\n+}\n+\n+\n+int main ()\n+{\n+  test_api (6);\n+  return (0); \n+}"}, {"sha": "2d96cd4f7d3028692cfa5683d555af0187e6a492", "filename": "gcc/testsuite/gcc.target/powerpc/paired-9.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f502740976e81bd3971ebc1e345af93540755b85/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f502740976e81bd3971ebc1e345af93540755b85/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpaired-9.c?ref=f502740976e81bd3971ebc1e345af93540755b85", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile { target powerpc-*-linux*paired* } } */\n+/* { dg-options \"-mpaired -m32 -ffinite-math-only \" } */\n+\n+/* Test PowerPC PAIRED extensions.  */\n+\n+#include <paired.h>\n+\n+static float out[2] __attribute__ ((aligned (8)));\n+void\n+test_api (float y, float x)\n+{\n+  vector float c = {x, 7.0};\n+  vector float b = {0.0, 8.0};\n+  vector float a;\n+\n+  a = paired_sub (b, c);\n+  paired_stx (a, 0, out);\n+}\n+\n+\n+int main ()\n+{\n+  test_api (6, 7);\n+  return (0); \n+}"}]}