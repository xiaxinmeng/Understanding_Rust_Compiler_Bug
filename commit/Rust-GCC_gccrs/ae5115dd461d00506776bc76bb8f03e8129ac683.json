{"sha": "ae5115dd461d00506776bc76bb8f03e8129ac683", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU1MTE1ZGQ0NjFkMDA1MDY3NzZiYzc2YmI4ZjAzZTgxMjlhYzY4Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-08T10:15:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-08T10:15:44Z"}, "message": "[multiple changes]\n\n2017-09-08  Gary Dismukes  <dismukes@adacore.com>\n\n\t* par-ch4.adb: Reformatting of an error message.\n\n2017-09-08  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch3.adb (Resolve_Name): Under ASIS mode analyze overloaded\n\tidentifiers to ensure their correct decoration of names on\n\taspect expressions.\n\n2017-09-08  Yannick Moy  <moy@adacore.com>\n\n\t* exp_attr.adb (Expand_Loop_Entry_Attribute): Do\n\tnot skip a loop coming from source which is rewritten into a loop.\n\n2017-09-08  Ed Schonberg  <schonberg@adacore.com>\n\n\t* freeze.adb (Wrap_Imported_Subprogram): Indicate that the\n\twrapper has convention Ada, to prevent spurious warnings on\n\tunconstrained array parameters.\n\n2017-09-08  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sem_prag.adb (Check_Variant): Use First_Non_Pragma/Next_Non_Pragma.\n\t(Analyze_Pragma) <Pragma_Unchecked_Union>: Likewise.\n\n2017-09-08  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sem_ch6.adb (Freeze_Expr_Types): Rename Spec_Id into Def_Id.\n\nFrom-SVN: r251884", "tree": {"sha": "4fd135698f45d9f538f86b707e5d96f7a2eb3e88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fd135698f45d9f538f86b707e5d96f7a2eb3e88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae5115dd461d00506776bc76bb8f03e8129ac683", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5115dd461d00506776bc76bb8f03e8129ac683", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae5115dd461d00506776bc76bb8f03e8129ac683", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5115dd461d00506776bc76bb8f03e8129ac683/comments", "author": null, "committer": null, "parents": [{"sha": "72a266372b5f4ce60568c0741b8c99415cf9cb6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72a266372b5f4ce60568c0741b8c99415cf9cb6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72a266372b5f4ce60568c0741b8c99415cf9cb6e"}], "stats": {"total": 90, "additions": 66, "deletions": 24}, "files": [{"sha": "52e46c63d2e1e8247b0974b67f8ec46a924b73e2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5115dd461d00506776bc76bb8f03e8129ac683/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5115dd461d00506776bc76bb8f03e8129ac683/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ae5115dd461d00506776bc76bb8f03e8129ac683", "patch": "@@ -1,3 +1,33 @@\n+2017-09-08  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* par-ch4.adb: Reformatting of an error message.\n+\n+2017-09-08  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch3.adb (Resolve_Name): Under ASIS mode analyze overloaded\n+\tidentifiers to ensure their correct decoration of names on\n+\taspect expressions.\n+\n+2017-09-08  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_attr.adb (Expand_Loop_Entry_Attribute): Do\n+\tnot skip a loop coming from source which is rewritten into a loop.\n+\n+2017-09-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* freeze.adb (Wrap_Imported_Subprogram): Indicate that the\n+\twrapper has convention Ada, to prevent spurious warnings on\n+\tunconstrained array parameters.\n+\n+2017-09-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_prag.adb (Check_Variant): Use First_Non_Pragma/Next_Non_Pragma.\n+\t(Analyze_Pragma) <Pragma_Unchecked_Union>: Likewise.\n+\n+2017-09-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch6.adb (Freeze_Expr_Types): Rename Spec_Id into Def_Id.\n+\n 2017-09-08  Arnaud Charlet  <charlet@adacore.com>\n \n \t* exp_intr.adb (Append_Entity_Name): Move to ..."}, {"sha": "b7b35eb632a0daa78a1ebf8aaa54996c641c0b7d", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5115dd461d00506776bc76bb8f03e8129ac683/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5115dd461d00506776bc76bb8f03e8129ac683/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=ae5115dd461d00506776bc76bb8f03e8129ac683", "patch": "@@ -1086,7 +1086,8 @@ package body Exp_Attr is\n          Loop_Stmt := N;\n          while Present (Loop_Stmt) loop\n             if Nkind (Loop_Stmt) = N_Loop_Statement\n-              and then Comes_From_Source (Loop_Stmt)\n+              and then Nkind (Original_Node (Loop_Stmt)) = N_Loop_Statement\n+              and then Comes_From_Source (Original_Node (Loop_Stmt))\n             then\n                exit;\n             end if;"}, {"sha": "c4cc6a32bd5f6c421308a5fca36d874965b33337", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5115dd461d00506776bc76bb8f03e8129ac683/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5115dd461d00506776bc76bb8f03e8129ac683/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=ae5115dd461d00506776bc76bb8f03e8129ac683", "patch": "@@ -5122,12 +5122,13 @@ package body Freeze is\n \n             Prag := Copy_Import_Pragma;\n \n-            --  Fix up spec to be not imported any more\n+            --  Fix up spec so it is no longer imported and has convention Ada\n \n             Set_Has_Completion (E, False);\n             Set_Import_Pragma  (E, Empty);\n             Set_Interface_Name (E, Empty);\n             Set_Is_Imported    (E, False);\n+            Set_Convention     (E, Convention_Ada);\n \n             --  Grab the subprogram declaration and specification\n "}, {"sha": "00c7e6178f0baaa6c6b171ebcfbec352bff3b23f", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5115dd461d00506776bc76bb8f03e8129ac683/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5115dd461d00506776bc76bb8f03e8129ac683/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=ae5115dd461d00506776bc76bb8f03e8129ac683", "patch": "@@ -3319,7 +3319,7 @@ package body Ch4 is\n       Set_Expression (Assoc_Node, P_Expression);\n \n       if Ada_Version < Ada_2020 then\n-         Error_Msg_SC (\"Iterated component  is an Ada 2020 extension\");\n+         Error_Msg_SC (\"iterated component is an Ada 2020 extension\");\n          Error_Msg_SC (\"\\compile with -gnatX\");\n       end if;\n "}, {"sha": "ecfc49e5cc325bc1cfc0d8611fc23a2dd708b98c", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5115dd461d00506776bc76bb8f03e8129ac683/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5115dd461d00506776bc76bb8f03e8129ac683/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=ae5115dd461d00506776bc76bb8f03e8129ac683", "patch": "@@ -12704,7 +12704,16 @@ package body Sem_Ch13 is\n          elsif Nkind (N) = N_Identifier and then Chars (N) /= Chars (E) then\n             Find_Direct_Name (N);\n \n-            if not ASIS_Mode then\n+            --  In ASIS mode we must analyze overloaded identifiers to ensure\n+            --  their correct decoration because expansion is disabled (and\n+            --  the expansion of freeze nodes takes care of resolving aspect\n+            --  expressions).\n+\n+            if ASIS_Mode then\n+               if Is_Overloaded (N) then\n+                  Analyze (Parent (N));\n+               end if;\n+            else\n                Set_Entity (N, Empty);\n             end if;\n "}, {"sha": "f1d51020fa0494676bfbac6187cae5b7751aa82e", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5115dd461d00506776bc76bb8f03e8129ac683/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5115dd461d00506776bc76bb8f03e8129ac683/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=ae5115dd461d00506776bc76bb8f03e8129ac683", "patch": "@@ -267,16 +267,16 @@ package body Sem_Ch6 is\n       LocX : constant Source_Ptr := Sloc (Expr);\n       Spec : constant Node_Id    := Specification (N);\n \n-      procedure Freeze_Expr_Types (Spec_Id : Entity_Id);\n-      --  N is an expression function that is a completion and Spec_Id its\n+      procedure Freeze_Expr_Types (Def_Id : Entity_Id);\n+      --  N is an expression function that is a completion and Def_Id its\n       --  defining entity. Freeze before N all the types referenced by the\n       --  expression of the function.\n \n       -----------------------\n       -- Freeze_Expr_Types --\n       -----------------------\n \n-      procedure Freeze_Expr_Types (Spec_Id : Entity_Id) is\n+      procedure Freeze_Expr_Types (Def_Id : Entity_Id) is\n          function Cloned_Expression return Node_Id;\n          --  Build a duplicate of the expression of the return statement that\n          --  has no defining entities shared with the original expression.\n@@ -355,7 +355,7 @@ package body Sem_Ch6 is\n                --  Skip Itypes created by the preanalysis\n \n                if Is_Itype (Typ)\n-                 and then Scope_Within_Or_Same (Scope (Typ), Spec_Id)\n+                 and then Scope_Within_Or_Same (Scope (Typ), Def_Id)\n                then\n                   return;\n                end if;\n@@ -419,8 +419,8 @@ package body Sem_Ch6 is\n \n          --  Local variables\n \n-         Saved_First_Entity : constant Entity_Id := First_Entity (Spec_Id);\n-         Saved_Last_Entity  : constant Entity_Id := Last_Entity  (Spec_Id);\n+         Saved_First_Entity : constant Entity_Id := First_Entity (Def_Id);\n+         Saved_Last_Entity  : constant Entity_Id := Last_Entity  (Def_Id);\n          Dup_Expr           : constant Node_Id   := Cloned_Expression;\n \n       --  Start of processing for Freeze_Expr_Types\n@@ -433,24 +433,24 @@ package body Sem_Ch6 is\n          --  spurious errors on Ghost entities (since the expression is not\n          --  fully analyzed).\n \n-         Push_Scope (Spec_Id);\n-         Install_Formals (Spec_Id);\n+         Push_Scope (Def_Id);\n+         Install_Formals (Def_Id);\n          Ignore_Errors_Enable := Ignore_Errors_Enable + 1;\n \n-         Preanalyze_Spec_Expression (Dup_Expr, Etype (Spec_Id));\n+         Preanalyze_Spec_Expression (Dup_Expr, Etype (Def_Id));\n \n          Ignore_Errors_Enable := Ignore_Errors_Enable - 1;\n          End_Scope;\n \n-         --  Restore certain attributes of Spec_Id since the preanalysis may\n+         --  Restore certain attributes of Def_Id since the preanalysis may\n          --  have introduced itypes to this scope, thus modifying attributes\n          --  First_Entity and Last_Entity.\n \n-         Set_First_Entity (Spec_Id, Saved_First_Entity);\n-         Set_Last_Entity  (Spec_Id, Saved_Last_Entity);\n+         Set_First_Entity (Def_Id, Saved_First_Entity);\n+         Set_Last_Entity  (Def_Id, Saved_Last_Entity);\n \n-         if Present (Last_Entity (Spec_Id)) then\n-            Set_Next_Entity (Last_Entity (Spec_Id), Empty);\n+         if Present (Last_Entity (Def_Id)) then\n+            Set_Next_Entity (Last_Entity (Def_Id), Empty);\n          end if;\n \n          --  Freeze all types referenced in the expression"}, {"sha": "e7a010d584fb2cdc64fb2a6ca4d8ed8a4db69f54", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5115dd461d00506776bc76bb8f03e8129ac683/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5115dd461d00506776bc76bb8f03e8129ac683/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=ae5115dd461d00506776bc76bb8f03e8129ac683", "patch": "@@ -6350,10 +6350,10 @@ package body Sem_Prag is\n          Comp  : Node_Id;\n \n       begin\n-         Comp := First (Component_Items (Clist));\n+         Comp := First_Non_Pragma (Component_Items (Clist));\n          while Present (Comp) loop\n             Check_Component (Comp, UU_Typ, In_Variant_Part => True);\n-            Next (Comp);\n+            Next_Non_Pragma (Comp);\n          end loop;\n       end Check_Variant;\n \n@@ -23316,20 +23316,20 @@ package body Sem_Prag is\n \n                --  Check components\n \n-               Comp := First (Component_Items (Clist));\n+               Comp := First_Non_Pragma (Component_Items (Clist));\n                while Present (Comp) loop\n                   Check_Component (Comp, Typ);\n-                  Next (Comp);\n+                  Next_Non_Pragma (Comp);\n                end loop;\n \n                --  Check variant part\n \n                Vpart := Variant_Part (Clist);\n \n-               Variant := First (Variants (Vpart));\n+               Variant := First_Non_Pragma (Variants (Vpart));\n                while Present (Variant) loop\n                   Check_Variant (Variant, Typ);\n-                  Next (Variant);\n+                  Next_Non_Pragma (Variant);\n                end loop;\n             end if;\n "}, {"sha": "2fda6b916bbb9910c2b8e2fc3a72229e9567e706", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5115dd461d00506776bc76bb8f03e8129ac683/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5115dd461d00506776bc76bb8f03e8129ac683/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=ae5115dd461d00506776bc76bb8f03e8129ac683", "patch": "@@ -9375,6 +9375,7 @@ package body Sem_Res is\n             return;\n \n          elsif Nkind (Parent (N)) in N_Op\n+           and then Present (Etype (Parent (N)))\n            and then Is_Fixed_Point_Type (Etype (Parent (N)))\n            and then Etype (N) = Universal_Real\n            and then Comes_From_Source (N)"}]}