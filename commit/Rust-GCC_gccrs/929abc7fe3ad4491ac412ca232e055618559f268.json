{"sha": "929abc7fe3ad4491ac412ca232e055618559f268", "node_id": "C_kwDOANBUbNoAKDkyOWFiYzdmZTNhZDQ0OTFhYzQxMmNhMjMyZTA1NTYxODU1OWYyNjg", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-15T21:01:25Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-15T23:44:16Z"}, "message": "libstdc++: Define std::basic_string::resize_and_overwrite for C++23 (P1072R10)\n\nA recently approved change for the C++23 working draft.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/basic_string.h (__cpp_lib_string_resize_and_overwrite):\n\tDefine for C++23.\n\t(basic_string::resize_and_overwrite): Declare.\n\t* include/bits/basic_string.tcc (basic_string::resize_and_overwrite):\n\tDefine.\n\t* include/std/version (__cpp_lib_resize_and_overwrite): Define\n\tfor C++23.\n\t* testsuite/21_strings/basic_string/capacity/char/resize_and_overwrite.cc:\n\tNew test.", "tree": {"sha": "09aebd2745d678c5c9bf09241b6b43e6cae3714a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09aebd2745d678c5c9bf09241b6b43e6cae3714a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/929abc7fe3ad4491ac412ca232e055618559f268", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/929abc7fe3ad4491ac412ca232e055618559f268", "html_url": "https://github.com/Rust-GCC/gccrs/commit/929abc7fe3ad4491ac412ca232e055618559f268", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/929abc7fe3ad4491ac412ca232e055618559f268/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79802c5dcc043a515f429bb2bec7573b8537c32a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79802c5dcc043a515f429bb2bec7573b8537c32a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79802c5dcc043a515f429bb2bec7573b8537c32a"}], "stats": {"total": 155, "additions": 155, "deletions": 0}, "files": [{"sha": "a6575fa9e2625c25871019d89c10b3219991c2fb", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929abc7fe3ad4491ac412ca232e055618559f268/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929abc7fe3ad4491ac412ca232e055618559f268/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=929abc7fe3ad4491ac412ca232e055618559f268", "patch": "@@ -971,6 +971,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #pragma GCC diagnostic pop\n #endif\n \n+#if __cplusplus > 202002L\n+#define __cpp_lib_string_resize_and_overwrite 202110L\n+      template<typename _Operation>\n+\tconstexpr void\n+\tresize_and_overwrite(size_type __n, _Operation __op);\n+#endif\n+\n       /**\n        *  Returns the total number of characters that the %string can hold\n        *  before needing to allocate more memory."}, {"sha": "98c386239f97765b95c654cc417bbed9be3dacdc", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929abc7fe3ad4491ac412ca232e055618559f268/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929abc7fe3ad4491ac412ca232e055618559f268/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=929abc7fe3ad4491ac412ca232e055618559f268", "patch": "@@ -515,6 +515,37 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __n;\n     }\n \n+#if __cplusplus > 202002L\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+  template<typename _Operation>\n+    constexpr void\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    resize_and_overwrite(size_type __n, _Operation __op)\n+    {\n+      const size_type __capacity = capacity();\n+      _CharT* __p;\n+      if (__n > __capacity)\n+\t{\n+\t  __p = _M_create(__n, __capacity);\n+\t  this->_S_copy(__p, _M_data(), length()); // exclude trailing null\n+\t  _M_dispose();\n+\t  _M_data(__p);\n+\t  _M_capacity(__n);\n+\t}\n+      else\n+\t__p = _M_data();\n+      struct _Terminator {\n+\t~_Terminator() { _M_this->_M_set_length(_M_r); }\n+\tbasic_string* _M_this;\n+\tsize_type _M_r;\n+      };\n+      _Terminator __term{this};\n+      const size_type __n2 [[maybe_unused]] = __n;\n+      __term._M_r = std::move(__op)(__p, __n);\n+      _GLIBCXX_DEBUG_ASSERT(__term._M_r >= 0 && __term._M_r <= __n2);\n+    }\n+#endif // C++23\n+\n #endif  // _GLIBCXX_USE_CXX11_ABI\n    \n   template<typename _CharT, typename _Traits, typename _Alloc>"}, {"sha": "2b118301da70af12751427af11a1959560d15fc5", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929abc7fe3ad4491ac412ca232e055618559f268/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929abc7fe3ad4491ac412ca232e055618559f268/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=929abc7fe3ad4491ac412ca232e055618559f268", "patch": "@@ -294,6 +294,9 @@\n #define __cpp_lib_is_scoped_enum 202011L\n #define __cpp_lib_move_only_function 202110L\n #define __cpp_lib_string_contains 202011L\n+#if _GLIBCXX_USE_CXX11_ABI // Only supported with cxx11-abi\n+# define __cpp_lib_string_resize_and_overwrite 202110L\n+#endif\n #define __cpp_lib_to_underlying 202102L\n #endif // C++2b\n #endif // C++20"}, {"sha": "f0e81126a41d1e5cdf74dbbf696d74ee400b6e64", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/capacity/char/resize_and_overwrite.cc", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/929abc7fe3ad4491ac412ca232e055618559f268/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2Fresize_and_overwrite.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/929abc7fe3ad4491ac412ca232e055618559f268/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2Fresize_and_overwrite.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcapacity%2Fchar%2Fresize_and_overwrite.cc?ref=929abc7fe3ad4491ac412ca232e055618559f268", "patch": "@@ -0,0 +1,114 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do run { target { c++23 && cxx11-abi } } }\n+\n+#include <string>\n+\n+#ifndef __cpp_lib_string_resize_and_overwrite\n+#error \"Feature test macro for resize_and_overwrite is missing in <string>\"\n+#elif __cpp_lib_string_resize_and_overwrite != 202110L\n+# error \"Feature test macro for resize_and_overwrite has wrong value in <string>\"\n+#endif\n+\n+\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+\n+// P1072R10 basic_string::resize_and_overwrite\n+\n+void\n+test01()\n+{\n+  std::string s = \"foo\";\n+  s.resize_and_overwrite(99, [](char* p, int n) {\n+    VERIFY( n == 99 );\n+    VERIFY( !std::strncmp(p, \"foo\", 3) );\n+    std::strcpy(p, \"monkey tennis\");\n+    return 6;\n+  });\n+  VERIFY( s == \"monkey\" );\n+  VERIFY( s.size() == 6 );\n+  VERIFY( s.capacity() >= 99 );\n+  VERIFY( s[6] == '\\0' );\n+\n+  const auto str = s.data();\n+\n+  s.resize_and_overwrite(50, [](char* p, int n) -> unsigned {\n+    VERIFY( n == 50 );\n+    VERIFY( !std::strncmp(p, \"monkey\", 3) );\n+    std::strcpy(p, \"Partridge among the pidgeons\");\n+    return 9;\n+  });\n+  VERIFY( s.data() == str ); // No reallocation\n+  VERIFY( s == \"Partridge\" );\n+  VERIFY( s[9] == '\\0' );\n+}\n+\n+void\n+test02()\n+{\n+  std::string s;\n+  auto p = s.data();\n+  s.resize_and_overwrite(0, [](auto...) { return 0; });\n+  VERIFY( s.empty() );\n+  VERIFY( s[0] == '\\0' );\n+  VERIFY( s.data() == p );\n+\n+  s = \"short string\";\n+  p = s.data();\n+  s.resize_and_overwrite(0, [](auto...) { return 0; });\n+  VERIFY( s.empty() );\n+  VERIFY( s[0] == '\\0' );\n+  VERIFY( s.data() == p );\n+\n+  s = \"a string that is long enough to not be a short string\";\n+  p = s.data();\n+  s.resize_and_overwrite(0, [](auto...) { return 0; });\n+  VERIFY( s.empty() );\n+  VERIFY( s[0] == '\\0' );\n+  VERIFY( s.data() == p );\n+}\n+\n+void\n+test03()\n+{\n+  struct Op\n+  {\n+    int operator()(char*, int) & = delete;\n+    int operator()(char*, int) const & = delete;\n+    int operator()(char* p, int n) && { std::memset(p, 'a', n+1); return n; }\n+    int operator()(char*, int) const && = delete;\n+  };\n+  std::string s;\n+  s.resize_and_overwrite(42, Op{});\n+  VERIFY( s.size() == 42 );\n+  VERIFY( s == std::string(42, 'a') );\n+  VERIFY( s[42] == '\\0' );\n+\n+  s.resize_and_overwrite(0, [](auto&& p, auto&& n) {\n+    static_assert( std::is_same_v<decltype(p), char*&> );\n+    static_assert( std::is_same_v<decltype(n), std::string::size_type&> );\n+    return 0;\n+  });\n+}\n+\n+void\n+test04()\n+{\n+  std::string s = \"this tests how the library copes with undefined behaviour\";\n+\n+  try {\n+    s.resize_and_overwrite(13, [](auto...) -> int { throw \"undefined\"; });\n+  } catch (...) {\n+    // The standard doesn't require this, but we leave the string empty:\n+    VERIFY( s.size() == 0 );\n+    VERIFY( s[0] == '\\0' );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+}"}]}