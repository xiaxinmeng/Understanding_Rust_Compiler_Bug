{"sha": "d002ededd6b3816b91e8125804dc31e600c34c55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAwMmVkZWRkNmIzODE2YjkxZTgxMjU4MDRkYzMxZTYwMGMzNGM1NQ==", "commit": {"author": {"name": "Martin v. L\u00f6wis", "email": "loewis@informatik.hu-berlin.de", "date": "2000-05-18T07:17:15Z"}, "committer": {"name": "Martin v. L\u00f6wis", "email": "loewis@gcc.gnu.org", "date": "2000-05-18T07:17:15Z"}, "message": "* standards.texi, make-stds.texi: Update to FSF version of May 13.\n\nFrom-SVN: r33977", "tree": {"sha": "55fe30fb5403b7113df3463f8626cc3d11ab1efe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55fe30fb5403b7113df3463f8626cc3d11ab1efe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d002ededd6b3816b91e8125804dc31e600c34c55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d002ededd6b3816b91e8125804dc31e600c34c55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d002ededd6b3816b91e8125804dc31e600c34c55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d002ededd6b3816b91e8125804dc31e600c34c55/comments", "author": null, "committer": null, "parents": [{"sha": "f65741dd0d3fcd39eb29962eb478042c83710d06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f65741dd0d3fcd39eb29962eb478042c83710d06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f65741dd0d3fcd39eb29962eb478042c83710d06"}], "stats": {"total": 567, "additions": 411, "deletions": 156}, "files": [{"sha": "462e5c4a28e6f62f3284434357cb7c9a5a2f4b5d", "filename": "etc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d002ededd6b3816b91e8125804dc31e600c34c55/etc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d002ededd6b3816b91e8125804dc31e600c34c55/etc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/etc%2FChangeLog?ref=d002ededd6b3816b91e8125804dc31e600c34c55", "patch": "@@ -1,3 +1,7 @@\n+2000-05-18  Martin von Loewis  <loewis@informatik.hu-berlin.de>\n+\n+\t* standards.texi, make-stds.texi: Update to FSF version of May 13.\n+\n Mon Nov 23 16:46:10 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t*  configure.in: Use AC_PREREQ(2.12.1)."}, {"sha": "b655ea587507e7a24c0ac9f23b7c86983cbeced3", "filename": "etc/make-stds.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d002ededd6b3816b91e8125804dc31e600c34c55/etc%2Fmake-stds.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d002ededd6b3816b91e8125804dc31e600c34c55/etc%2Fmake-stds.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/etc%2Fmake-stds.texi?ref=d002ededd6b3816b91e8125804dc31e600c34c55", "patch": "@@ -21,6 +21,8 @@ chapter\n @end ifclear\n @end iftex\n describes conventions for writing the Makefiles for GNU programs.\n+Using Automake will help you write a Makefile that follows these\n+conventions.\n \n @menu\n * Makefile Basics::\t\tGeneral Conventions for Makefiles\n@@ -280,8 +282,8 @@ installed.\n Installation directories should always be named by variables, so it is\n easy to install in a nonstandard place.  The standard names for these\n variables are described below.  They are based on a standard filesystem\n-layout; variants of it are used in SVR4, 4.4BSD, Linux, Ultrix v4, and\n-other modern operating systems.\n+layout; variants of it are used in SVR4, 4.4BSD, GNU/Linux, Ultrix v4,\n+and other modern operating systems.\n \n These two variables set the root for the installation.  All the other\n installation directories should be subdirectories of one of these two,"}, {"sha": "8970dad7dfdf5ca6092c8feba46cff699ca6ae4c", "filename": "etc/standards.texi", "status": "modified", "additions": 403, "deletions": 154, "changes": 557, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d002ededd6b3816b91e8125804dc31e600c34c55/etc%2Fstandards.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d002ededd6b3816b91e8125804dc31e600c34c55/etc%2Fstandards.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/etc%2Fstandards.texi?ref=d002ededd6b3816b91e8125804dc31e600c34c55", "patch": "@@ -3,7 +3,7 @@\n @setfilename standards.info\n @settitle GNU Coding Standards\n @c This date is automagically updated when you save this file:\n-@set lastupdate March 13, 1998\n+@set lastupdate May 13, 2000\n @c %**end of header\n \n @ifinfo\n@@ -28,7 +28,7 @@ END-INFO-DIR-ENTRY\n \n @ifinfo\n GNU Coding Standards\n-Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998 Free Software Foundation, Inc.\n+Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999 Free Software Foundation, Inc.\n \n Permission is granted to make and distribute verbatim copies of\n this manual provided the copyright notice and this permission notice\n@@ -84,13 +84,14 @@ Last updated @value{lastupdate}.\n @end ifinfo\n \n @menu\n-* Preface::                     About the GNU Coding Standards\n-* Intellectual Property::       Keeping Free Software Free\n-* Design Advice::               General Program Design\n-* Program Behavior::            Program Behavior for All Programs\n-* Writing C::                   Making The Best Use of C\n-* Documentation::               Documenting Programs\n-* Managing Releases::           The Release Process\n+* Preface::                 About the GNU Coding Standards\n+* Legal Issues::            Keeping Free Software Free\n+* Design Advice::           General Program Design\n+* Program Behavior::        Program Behavior for All Programs\n+* Writing C::               Making The Best Use of C\n+* Documentation::           Documenting Programs\n+* Managing Releases::       The Release Process\n+* References::              References to Non-Free Software or Documentation\n @end menu\n \n @node Preface\n@@ -113,15 +114,16 @@ you don't have those files, please mail your suggestion anyway.\n This release of the GNU Coding Standards was last updated\n @value{lastupdate}.\n \n-@node Intellectual Property\n+@node Legal Issues\n @chapter Keeping Free Software Free\n \n This @value{CHAPTER} discusses how you can make sure that GNU software\n-remains unencumbered.\n+avoids legal difficulties, and other related issues.\n \n @menu\n * Reading Non-Free Code::       Referring to Proprietary Programs\n * Contributions::               Accepting Contributions\n+* Trademarks::                  How We Deal with Trademark Issues\n @end menu\n \n @node Reading Non-Free Code\n@@ -157,15 +159,15 @@ Or turn some parts of the program into independently usable libraries.\n Or use a simple garbage collector instead of tracking precisely when\n to free memory, or use a new GNU facility such as obstacks.\n \n-\n @node Contributions\n @section Accepting Contributions\n \n-If someone else sends you a piece of code to add to the program you are\n-working on, we need legal papers to use it---the same sort of legal\n-papers we will need to get from you.  @emph{Each} significant\n-contributor to a program must sign some sort of legal papers in order\n-for us to have clear title to the program.  The main author alone is not\n+If the program you are working on is copyrighted by the Free Software\n+Foundation, then when someone else sends you a piece of code to add to\n+the program, we need legal papers to use it---just as we asked you to\n+sign papers initially.  @emph{Each} person who makes a nontrivial\n+contribution to a program must sign some sort of legal papers in order\n+for us to have clear title to the program; the main author alone is not\n enough.\n \n So, before adding in any contributions from other people, please tell\n@@ -181,16 +183,17 @@ This also applies to comments and documentation files.  For copyright\n law, comments and code are just text.  Copyright applies to all kinds of\n text, so we need legal papers for all kinds.\n \n+We know it is frustrating to ask for legal papers; it's frustrating for\n+us as well.  But if you don't wait, you are going out on a limb---for\n+example, what if the contributor's employer won't sign a disclaimer?\n+You might have to take that code out again!\n+\n You don't need papers for changes of a few lines here or there, since\n they are not significant for copyright purposes.  Also, you don't need\n papers if all you get from the suggestion is some ideas, not actual code\n-which you use.  For example, if you write a different solution to the\n-problem, you don't need to get papers.\n-\n-We know this is frustrating; it's frustrating for us as well.  But if\n-you don't wait, you are going out on a limb---for example, what if the\n-contributor's employer won't sign a disclaimer?  You might have to take\n-that code out again!\n+which you use.  For example, if someone send you one implementation, but\n+you write a different implementation of the same idea, you don't need to\n+get papers.\n \n The very worst thing is if you forget to tell us about the other\n contributor.  We could be very embarrassed in court some day as a\n@@ -200,39 +203,113 @@ We have more detailed advice for maintainers of programs; if you have\n reached the stage of actually maintaining a program for GNU (whether\n released or not), please ask us for a copy.\n \n+@node Trademarks\n+@section Trademarks\n+\n+Please do not include any trademark acknowledgements in GNU software\n+packages or documentation.\n+\n+Trademark acknowledgements are the statements that such-and-such is a\n+trademark of so-and-so.  The GNU Project has no objection to the basic\n+idea of trademarks, but these acknowledgements feel like kowtowing, so\n+we don't use them.  There is no legal requirement for them.\n+\n+What is legally required, as regards other people's trademarks, is to\n+avoid using them in ways which a reader might read as naming or labeling\n+our own programs or activities.  For example, since ``Objective C'' is\n+(or at least was) a trademark, we made sure to say that we provide a\n+``compiler for the Objective C language'' rather than an ``Objective C\n+compiler''.  The latter is meant to be short for the former, but it does\n+not explicitly state the relationship, so it could be misinterpreted as\n+using ``Objective C'' as a label for the compiler rather than for the\n+language.\n+\n @node Design Advice\n @chapter General Program Design\n \n This @value{CHAPTER} discusses some of the issues you should take into\n account when designing your program.\n \n+@c                         Standard or ANSI C\n+@c\n+@c In 1989 the American National Standards Institute (ANSI) standardized\n+@c C   as  standard  X3.159-1989.    In  December   of  that   year  the\n+@c International Standards Organization ISO  adopted the ANSI C standard\n+@c making  minor changes.   In 1990  ANSI then  re-adopted  ISO standard\n+@c C. This version of C is known as either ANSI C or Standard C.\n+\n @menu\n+* Source Language::             Which languges to use.\n * Compatibility::               Compatibility with other implementations\n * Using Extensions::            Using non-standard features\n-* ANSI C::                      Using ANSI C features\n-* Source Language::             Using languages other than C\n+* Standard C::                  Using Standard (ANSI 1989) C features\n @end menu\n \n+@node Source Language\n+@section Which Languages to Use\n+\n+When you want to use a language that gets compiled and runs at high\n+speed, the best language to use is C.  Using another language is like\n+using a non-standard feature: it will cause trouble for users.  Even if\n+GCC supports the other language, users may find it inconvenient to have\n+to install the compiler for that other language in order to build your\n+program.  For example, if you write your program in C++, people will\n+have to install the GNU C++ compiler in order to compile your program.\n+\n+C has one other advantage over C++ and other compiled languages: more\n+people know C, so more people will find it easy to read and modify the\n+program if it is written in C.\n+\n+So in general it is much better to use use C, rather than the\n+comparable alternatives.\n+\n+But there are two exceptions to that conclusion:\n+\n+@itemize @bullet\n+@item\n+It is no problem to use another language to write a tool specifically\n+intended for use with that language.  That is because the only people\n+who want to build the tool will be those who have installed the other\n+language anyway.\n+\n+@item\n+If an application is of interest only to a narrow part of the community,\n+then the question of which language it is written in has less effect on\n+other people, so you may as well please yourself.\n+@end itemize\n+\n+Many programs are designed to be extensible: they include an interpreter\n+for a language that is higher level than C.  Often much of the program\n+is written in that language, too.  The Emacs editor pioneered this\n+technique.\n+\n+The standard extensibility interpreter for GNU software is GUILE, which\n+implements the language Scheme (an especially clean and simple dialect\n+of Lisp).  @uref{http://www.gnu.org/software/guile/}.  We don't reject\n+programs written in other ``scripting languages'' such as Perl and\n+Python, but using GUILE is very important for the overall consistency of\n+the GNU system.\n+\n @node Compatibility\n @section Compatibility with Other Implementations\n \n With occasional exceptions, utility programs and libraries for GNU\n should be upward compatible with those in Berkeley Unix, and upward\n-compatible with @sc{ansi} C if @sc{ansi} C specifies their behavior, and\n-upward compatible with @sc{POSIX} if @sc{POSIX} specifies their\n-behavior.\n+compatible with 1989 Standard C if 1989 Standard C specifies their\n+behavior, and upward compatible with @sc{posix} if @sc{posix} specifies\n+their behavior.\n \n When these standards conflict, it is useful to offer compatibility\n modes for each of them.\n \n-@sc{ansi} C and @sc{POSIX} prohibit many kinds of extensions.  Feel free\n-to make the extensions anyway, and include a @samp{--ansi},\n+1989 Standard C and @sc{posix} prohibit many kinds of extensions.  Feel\n+free to make the extensions anyway, and include a @samp{--ansi},\n @samp{--posix}, or @samp{--compatible} option to turn them off.\n However, if the extension has a significant chance of breaking any real\n-programs or scripts, then it is not really upward compatible.  Try to\n-redesign its interface.\n+programs or scripts, then it is not really upward compatible.  So you\n+should try to redesign its interface to make it upward compatible.\n \n-Many GNU programs suppress extensions that conflict with POSIX if the\n+Many GNU programs suppress extensions that conflict with @sc{posix} if the\n environment variable @code{POSIXLY_CORRECT} is defined (even if it is\n defined with a null value).  Please make your program recognize this\n variable if appropriate.\n@@ -243,7 +320,8 @@ completely with something totally different and better.  (For example,\n @code{vi} is replaced with Emacs.)  But it is nice to offer a compatible\n feature as well.  (There is a free @code{vi} clone, so we offer it.)\n \n-Additional useful features not in Berkeley Unix are welcome.\n+Additional useful features are welcome regardless of whether\n+there is any precedent for them.\n \n @node Using Extensions\n @section Using Non-standard Features\n@@ -267,29 +345,28 @@ straightforwardly do without them, but to use the extensions if they\n are a big improvement.\n \n An exception to this rule are the large, established programs (such as\n-Emacs) which run on a great variety of systems.  Such programs would\n-be broken by use of GNU extensions.\n+Emacs) which run on a great variety of systems.  Using GNU extensions in\n+such programs would make many users unhappy, so we don't do that.\n \n-Another exception is for programs that are used as part of\n-compilation: anything that must be compiled with other compilers in\n-order to bootstrap the GNU compilation facilities.  If these require\n-the GNU compiler, then no one can compile them without having them\n-installed already.  That would be no good.\n+Another exception is for programs that are used as part of compilation:\n+anything that must be compiled with other compilers in order to\n+bootstrap the GNU compilation facilities.  If these require the GNU\n+compiler, then no one can compile them without having them installed\n+already.  That would be extremely troublesome in certain cases.\n \n-@node ANSI C\n-@section @sc{ansi} C and pre-@sc{ansi} C\n+@node Standard C\n+@section 1989 Standard C and Pre-Standard C\n \n-Do not ever use the ``trigraph'' feature of @sc{ansi} C.\n+1989 Standard C is widespread enough now that it is ok to use its\n+features in new programs.  There is one exception: do not ever use the\n+``trigraph'' feature of 1989 Standard C.\n \n-@sc{ansi} C is widespread enough now that it is ok to write new programs\n-that use @sc{ansi} C features (and therefore will not work in\n-non-@sc{ansi} compilers).  And if a program is already written in\n-@sc{ansi} C, there's no need to convert it to support non-@sc{ansi}\n-compilers.\n+However, it is easy to support pre-standard compilers in most programs,\n+so if you know how to do that, feel free.  If a program you are\n+maintaining has such support, you should try to keep it working.\n \n-However, it is easy to support non-@sc{ansi} compilers in most programs,\n-so you might still consider doing so when you write a program.  Instead\n-of writing function definitions in @sc{ansi} prototype form,\n+To support pre-standard C, instead of writing function definitions in\n+standard prototype form,\n \n @example\n int\n@@ -298,7 +375,7 @@ foo (int x, int y)\n @end example\n \n @noindent\n-write the definition in pre-@sc{ansi} style like this,\n+write the definition in pre-standard style like this,\n \n @example\n int\n@@ -315,56 +392,42 @@ int foo (int, int);\n @end example\n \n You need such a declaration anyway, in a header file, to get the benefit\n-of @sc{ansi} C prototypes in all the files where the function is called.\n-And once you have it, you lose nothing by writing the function\n-definition in the pre-@sc{ansi} style.\n-\n-If you don't know non-@sc{ansi} C, there's no need to learn it; just\n-write in @sc{ansi} C.\n-\n-@node Source Language\n-@section Using Languages Other Than C\n-\n-Using a language other than C is like using a non-standard feature: it\n-will cause trouble for users.  Even if GCC supports the other language,\n-users may find it inconvenient to have to install the compiler for that\n-other language in order to build your program.  For example, if you\n-write your program in C++, people will have to install the C++ compiler\n-in order to compile your program.  Thus, it is better if you write in C.\n-\n-But there are three situations when there is no disadvantage in using\n-some other language:\n-\n-@itemize @bullet\n-@item\n-It is okay to use another language if your program contains an\n-interpreter for that language.\n-\n-For example, if your program links with GUILE, it is ok to write part of\n-the program in Scheme or another language supported by GUILE.\n-\n-@item\n-It is okay to use another language in a tool specifically intended for\n-use with that language.\n-\n-This is okay because the only people who want to build the tool will be\n-those who have installed the other language anyway.\n-\n-@item\n-If an application is of interest to a narrow community, then perhaps\n-it's not important if the application is inconvenient to install.\n-@end itemize\n+of prototypes in all the files where the function is called.  And once\n+you have the declaration, you normally lose nothing by writing the\n+function definition in the pre-standard style.\n+\n+This technique does not work for integer types narrower than @code{int}.\n+If you think of an argument as being of a type narrower than @code{int},\n+declare it as @code{int} instead.\n+\n+There are a few special cases where this technique is hard to use.  For\n+example, if a function argument needs to hold the system type\n+@code{dev_t}, you run into trouble, because @code{dev_t} is shorter than\n+@code{int} on some machines; but you cannot use @code{int} instead,\n+because @code{dev_t} is wider than @code{int} on some machines.  There\n+is no type you can safely use on all machines in a non-standard\n+definition.  The only way to support non-standard C and pass such an\n+argument is to check the width of @code{dev_t} using Autoconf and choose\n+the argument type accordingly.  This may not be worth the trouble.\n+\n+In order to support pre-standard compilers that do not recognize\n+prototypes, you may want to use a preprocessor macro like this:\n \n-C has one other advantage over C++ and other compiled languages: more\n-people know C, so more people will find it easy to read and modify the\n-program if it is written in C.\n+@example\n+/* Declare the prototype for a general external function.  */\n+#if defined (__STDC__) || defined (WINDOWSNT)\n+#define P_(proto) proto\n+#else\n+#define P_(proto) ()\n+#endif\n+@end example\n \n @node Program Behavior\n @chapter Program Behavior for All Programs\n \n-This @value{CHAPTER} describes how to write robust software. It also\n-describes general standards for error messages, the command line interface,\n-and how libraries should behave.\n+This @value{CHAPTER} describes conventions for writing robust\n+software.  It also describes general standards for error messages, the\n+command line interface, and how libraries should behave.\n \n @menu\n * Semantics::                   Writing robust programs\n@@ -384,9 +447,13 @@ all data structures dynamically.  In most Unix utilities, ``long lines\n are silently truncated''.  This is not acceptable in a GNU utility.\n \n Utilities reading files should not drop NUL characters, or any other\n-nonprinting characters @emph{including those with codes above 0177}.  The\n-only sensible exceptions would be utilities specifically intended for\n-interface to certain types of printers that can't handle those characters.\n+nonprinting characters @emph{including those with codes above 0177}.\n+The only sensible exceptions would be utilities specifically intended\n+for interface to certain types of terminals or printers\n+that can't handle those characters.\n+Whenever possible, try to make programs work properly with\n+sequences of bytes that represent multibyte characters, using encodings\n+such as UTF-8 and others.\n \n Check every system call for an error return, unless you know you wish to\n ignore errors.  Include the system error text (from @code{perror} or\n@@ -428,11 +495,18 @@ Try to avoid low-level interfaces to obscure Unix data structures (such\n as file directories, utmp, or the layout of kernel memory), since these\n are less likely to work compatibly.  If you need to find all the files\n in a directory, use @code{readdir} or some other high-level interface.\n-These will be supported compatibly by GNU.\n+These are supported compatibly by GNU.\n+\n+The preferred signal handling facilities are the BSD variant of\n+@code{signal}, and the @sc{posix} @code{sigaction} function; the\n+alternative USG @code{signal} interface is an inferior design.\n \n-By default, the GNU system will provide the signal handling functions of\n-@sc{BSD} and of @sc{POSIX}.  So GNU software should be written to use\n-these.\n+Nowadays, using the @sc{posix} signal functions may be the easiest way\n+to make a program portable.  If you use @code{signal}, then on GNU/Linux\n+systems running GNU libc version 1, you should include\n+@file{bsd/signal.h} instead of @file{signal.h}, so as to get BSD\n+behavior.  It is up to you whether to support systems where\n+@code{signal} has only the USG behavior, or give up on them.\n \n In error checks that detect ``impossible'' conditions, just abort.\n There is usually no point in printing any message.  These checks\n@@ -452,6 +526,20 @@ If you make temporary files, check the @code{TMPDIR} environment\n variable; if that variable is defined, use the specified directory\n instead of @file{/tmp}.\n \n+In addition, be aware that there is a possible security problem when\n+creating temporary files in directories world-writable directories.  In\n+C, you can avoid this problem by creating temporary files in this\n+manner:\n+\n+@example\n+fd = open(filename, O_WRONLY | O_CREAT | O_EXCL, 0600);\n+@end example\n+\n+@noindent\n+or by using the @code{mkstemps} function from libiberty.\n+\n+In bash, use @code{set -C} to avoid this problem.\n+\n @node Libraries\n @section Library Behavior\n \n@@ -490,6 +578,20 @@ Error messages from compilers should look like this:\n @var{source-file-name}:@var{lineno}: @var{message}\n @end example\n \n+@noindent\n+If you want to mention the column number, use this format:\n+\n+@example\n+@var{source-file-name}:@var{lineno}:@var{column}: @var{message}\n+@end example\n+\n+@noindent\n+Line numbers should start from 1 at the beginning of the file, and\n+column numbers should start from 1 at the beginning of the line.  (Both\n+of these conventions are chosen for compatibility.)  Calculate column\n+numbers assuming that space and all ASCII printing characters have\n+equal width, and assuming tab stops every 8 columns.\n+\n Error messages from other noninteractive programs should look like this:\n \n @example\n@@ -506,6 +608,12 @@ when there is an appropriate source file, or like this:\n @noindent\n when there is no relevant source file.\n \n+If you want to mention the column number, use this format:\n+\n+@example\n+@var{program}:@var{source-file-name}:@var{lineno}:@var{column}: @var{message}\n+@end example\n+\n In an interactive program (one that is reading commands from a\n terminal), it is better not to include the program name in an error\n message.  The place to indicate which program is running is in the\n@@ -533,8 +641,10 @@ to select among the alternate behaviors.\n \n Likewise, please don't make the behavior of the program depend on the\n type of output device it is used with.  Device independence is an\n-important principle of the system's design; do not compromise it\n-merely to save someone from typing an option now and then.\n+important principle of the system's design; do not compromise it merely\n+to save someone from typing an option now and then.  (Variation in error\n+message syntax when using a terminal is ok, because that is a side issue\n+that people do not depend on.)\n \n If you think one behavior is most useful when the output is to a\n terminal, and another is most useful when the output is a file or a\n@@ -550,11 +660,11 @@ output device type.  For example, we provide a @code{dir} program much\n like @code{ls} except that its default output format is always\n multi-column format.\n \n-It is a good idea to follow the @sc{POSIX} guidelines for the\n+It is a good idea to follow the @sc{posix} guidelines for the\n command-line options of a program.  The easiest way to do this is to use\n @code{getopt} to parse them.  Note that the GNU version of @code{getopt}\n will normally permit options anywhere among the arguments unless the\n-special argument @samp{--} is used.  This is not what @sc{POSIX}\n+special argument @samp{--} is used.  This is not what @sc{posix}\n specifies; it is a GNU extension.\n \n Please define long-named options that are equivalent to the\n@@ -581,7 +691,7 @@ and @samp{--help}.\n \n @table @code\n @item --version\n-This option should direct the program to information about its name,\n+This option should direct the program to print information about its name,\n version, origin and legal status, all on standard output, and then exit\n successfully.  Other options and arguments should be ignored once this\n is seen, and the program should not perform its normal function.\n@@ -738,6 +848,9 @@ and @code{unexpand}.\n @item avoid-wraps\n @samp{-n} in @code{wdiff}.\n \n+@item background\n+For server programs, run in the background.\n+\n @item backward-search\n @samp{-B} in @code{ctags}.\n \n@@ -862,6 +975,9 @@ Used in @code{tar} and @code{cpio}.\n @item dereference-args\n @samp{-D} in @code{du}.\n \n+@item device\n+Specify an I/O device (special file name).\n+\n @item diacritics\n @samp{-d} in @code{recode}.\n \n@@ -994,6 +1110,11 @@ Used in @code{makeinfo}.\n @item force-prefix\n @samp{-F} in @code{shar}.\n \n+@item foreground\n+For server programs, run in the foreground;\n+in other words, don't do anything special to run the server\n+in the background.\n+\n @item format\n Used in @code{ls}, @code{time}, and @code{ptx}.\n \n@@ -1039,6 +1160,9 @@ Used to ask for brief usage information.\n @item hide-control-chars\n @samp{-q} in @code{ls}.\n \n+@item html\n+In @code{makeinfo}, output HTML.  \n+\n @item idle\n @samp{-u} in @code{who}.\n \n@@ -1099,6 +1223,10 @@ Used to ask for brief usage information.\n @item info\n @samp{-i}, @samp{-l}, and @samp{-m} in Finger.\n \n+@item init-file\n+In some programs, specify the name of the file to read as the user's\n+init file.\n+\n @item initial\n @samp{-i} in @code{expand}.\n \n@@ -1117,6 +1245,9 @@ Used to ask for brief usage information.\n @item intermix-type\n @samp{-p} in @code{shar}.\n \n+@item iso-8601\n+Used in @code{date}\n+\n @item jobs\n @samp{-j} in Make.\n \n@@ -1352,6 +1483,10 @@ Used in GDB.\n @item only-time\n @samp{-F} in @code{gprof}.\n \n+@item options\n+@samp{-o} in @code{getopt}, @code{fdlist}, @code{fdmount},\n+@code{fdmountd}, and @code{fdumount}.\n+\n @item output\n In various programs, specify the output file name.\n \n@@ -1436,6 +1571,9 @@ Used in @code{tar} and @code{cp}.\n @item prompt\n @samp{-p} in @code{ed}.\n \n+@item proxy\n+Specify an HTTP proxy.\n+\n @item query-user\n @samp{-X} in @code{shar}.\n \n@@ -1564,6 +1702,12 @@ Used in many programs to inhibit the usual output.\n @item size\n @samp{-s} in @code{ls}.\n \n+@item socket\n+Specify a file descriptor for a network server to use for its socket,\n+instead of opening and binding a new socket.  This provides a way to\n+run, in a nonpriveledged process, a server that normally needs a\n+reserved port number.\n+\n @item sort\n Used in @code{ls}.\n \n@@ -1662,6 +1806,9 @@ Used in GDB and @code{objdump}.\n @item time\n Used in @code{ls} and @code{touch}.\n \n+@item timeout\n+Specify how long to wait before giving up on some operation.\n+\n @item to-stdout\n @samp{-O} in @code{tar}.\n \n@@ -1813,7 +1960,8 @@ concat (s1, s2)        /* Name starts in column zero here */\n @end example\n \n @noindent\n-or, if you want to use @sc{ansi} C, format the definition like this:\n+or, if you want to use Standard C syntax, format the definition like\n+this:\n \n @example\n static char *\n@@ -1823,7 +1971,7 @@ concat (char *s1, char *s2)\n @}\n @end example\n \n-In @sc{ansi} C, if the arguments don't fit nicely on one line,\n+In Standard C, if the arguments don't fit nicely on one line,\n split it like this:\n \n @example\n@@ -1833,7 +1981,17 @@ lots_of_args (int an_integer, long a_long, short a_short,\n @dots{}\n @end example\n \n-For the body of the function, we prefer code formatted like this:\n+The rest of this section gives our recommendations for other aspects of\n+C formatting style.  We don't think of them as requirements, because it\n+causes no problems for users if two different programs have different\n+formatting styles.\n+\n+But whatever style you use, please use it consistently, since a mixture\n+of styles within one program tends to look ugly.  If you are\n+contributing changes to an existing program, please follow the style of\n+that program.\n+\n+For the body of the function, our recommended style looks like this:\n \n @example\n if (x < foo (y, z))\n@@ -1879,14 +2037,15 @@ mode = ((inmode[j] == VOIDmode\n \n Insert extra parentheses so that Emacs will indent the code properly.\n For example, the following indentation looks nice if you do it by hand,\n-but Emacs would mess it up:\n \n @example\n v = rup->ru_utime.tv_sec*1000 + rup->ru_utime.tv_usec/1000\n     + rup->ru_stime.tv_sec*1000 + rup->ru_stime.tv_usec/1000;\n @end example\n \n-But adding a set of parentheses solves the problem:\n+@noindent\n+but Emacs would alter it.  Adding a set of parentheses produces\n+something that looks equally nice, and which Emacs will preserve:\n \n @example\n v = (rup->ru_utime.tv_sec*1000 + rup->ru_utime.tv_usec/1000\n@@ -1908,7 +2067,6 @@ pages at logical places (but not within a function).  It does not matter\n just how long the pages are, since they do not have to fit on a printed\n page.  The formfeeds should appear alone on lines by themselves.\n \n-\n @node Comments\n @section Commenting Your Work\n \n@@ -2007,6 +2165,13 @@ but, by contrast, write the comments this way for a @samp{#ifndef}:\n Please explicitly declare all arguments to functions.\n Don't omit them just because they are @code{int}s.\n \n+Some programmers like to use the GCC @samp{-Wall} option, and change the\n+code whenever it issues a warning.  If you want to do this, then do.\n+Other programmers prefer not to use @samp{-Wall}, because it gives\n+warnings for valid and legitimate code which they do not want to change.\n+If you want to do this, then do.  The compiler should be your servant,\n+not your master.\n+\n Declarations of external functions and functions to appear later in the\n source file should all go in one place near the beginning of the file\n (somewhere before the first function definition in the file), or else\n@@ -2128,7 +2293,7 @@ Don't make the program ugly to placate @code{lint}.  Please don't insert any\n casts to @code{void}.  Zero without a cast is perfectly fine as a null\n pointer constant, except when calling a varargs function.\n \n-@node  Names\n+@node Names\n @section Naming Variables and Functions\n \n The names of global variables and functions in a program serve as\n@@ -2140,6 +2305,10 @@ comments.\n Local variable names can be shorter, because they are used only within\n one context, where (presumably) comments explain their purpose.\n \n+Try to limit your use of abbreviations in symbol names.  It is ok to\n+make a few abbreviations, explain what they mean, and then use them\n+frequently, but don't use lots of obscure abbreviations.\n+\n Please use underscores to separate words in a name, so that the Emacs\n word commands can be useful within them.  Stick to lower case; reserve\n upper case for macros and @code{enum} constants, and for name-prefixes\n@@ -2198,14 +2367,22 @@ Avoid using the format of semi-internal data bases (e.g., directories)\n when there is a higher-level alternative (@code{readdir}).\n \n As for systems that are not like Unix, such as MSDOS, Windows, the\n-Macintosh, VMS, and MVS, supporting them is usually so much work that it\n-is better if you don't.\n-\n-The planned GNU kernel is not finished yet, but you can tell which\n-facilities it will provide by looking at the GNU C Library Manual.  The\n-GNU kernel is based on Mach, so the features of Mach will also be\n-available.  However, if you use Mach features, you'll probably have\n-trouble debugging your program today.\n+Macintosh, VMS, and MVS, supporting them is often a lot of work.  When\n+that is the case, it is better to spend your time adding features that\n+will be useful on GNU and GNU/Linux, rather than on supporting other\n+incompatible systems.\n+\n+It is a good idea to define the ``feature test macro''\n+@code{_GNU_SOURCE} when compiling your C files.  When you compile on GNU\n+or GNU/Linux, this will enable the declarations of GNU library extension\n+functions, and that will usually give you a compiler error message if\n+you define the same function names in some other way in your program.\n+(You don't have to actually @emph{use} these functions, if you prefer\n+to make the program more portable to other systems.)\n+\n+But whether or not you use these GNU extensions, you should avoid\n+using their names for any other meanings.  Doing so would make it hard\n+to move your code into other GNU programs.\n \n @node CPU Portability\n @section Portability between @sc{cpu}s\n@@ -2231,9 +2408,9 @@ while ((c = getchar()) != EOF)\n When calling functions, you need not worry about the difference between\n pointers of various types, or between pointers and integers.  On most\n machines, there's no difference anyway.  As for the few machines where\n-there is a difference, all of them support @sc{ansi} C, so you can use\n-prototypes (conditionalized to be active only in @sc{ansi} C) to make\n-the code work on those systems.\n+there is a difference, all of them support 1989 Standard C, so you can\n+use prototypes (perhaps conditionalized to be active only in Standard C)\n+to make the code work on those systems.\n \n In certain cases, it is ok to pass integer and pointer arguments\n indiscriminately to the same function, and use no prototype on any\n@@ -2243,39 +2420,49 @@ that pass their arguments along to @code{printf} and friends:\n @example\n error (s, a1, a2, a3)\n      char *s;\n-     int a1, a2, a3;\n+     char *a1, *a2, *a3;\n @{\n   fprintf (stderr, \"error: \");\n   fprintf (stderr, s, a1, a2, a3);\n @}\n @end example\n \n @noindent\n-In practice, this works on all machines, and it is much simpler than any\n-``correct'' alternative.  Be sure @emph{not} to use a prototype\n-for such functions.\n+In practice, this works on all machines, since a pointer is generally\n+the widest possible kind of argument; it is much simpler than any\n+``correct'' alternative.  Be sure @emph{not} to use a prototype for such\n+functions.\n+\n+If you have decided to use 1989 Standard C, then you can instead define\n+@code{error} using @file{stdarg.h}, and pass the arguments along to\n+@code{vfprintf}.\n \n-However, avoid casting pointers to integers unless you really need to.\n-These assumptions really reduce portability, and in most programs they\n-are easy to avoid.  In the cases where casting pointers to integers is\n-essential---such as, a Lisp interpreter which stores type information as\n-well as an address in one word---it is ok to do so, but you'll have to\n-make explicit provisions to handle different word sizes.\n+Avoid casting pointers to integers if you can.  Such casts greatly\n+reduce portability, and in most programs they are easy to avoid.  In the\n+cases where casting pointers to integers is essential---such as, a Lisp\n+interpreter which stores type information as well as an address in one\n+word---you'll have to make explicit provisions to handle different word\n+sizes.  You will also need to make provision for systems in which the\n+normal range of addresses you can get from @code{malloc} starts far away\n+from zero.\n \n @node System Functions\n @section Calling System Functions\n \n-C implementations differ substantially.  @sc{ansi} C reduces but does not\n-eliminate the incompatibilities; meanwhile, many users wish to compile\n-GNU software with pre-@sc{ansi} compilers.  This chapter gives\n-recommendations for how to use the more or less standard C library\n-functions to avoid unnecessary loss of portability.\n+C implementations differ substantially.  1989 Standard C reduces but does\n+not eliminate the incompatibilities; meanwhile, many GNU packages still\n+support pre-standard compilers because this is not hard to do.  This\n+chapter gives recommendations for how to use the more-or-less standard C\n+library functions to avoid unnecessary loss of portability.\n \n @itemize @bullet\n @item\n-Don't use the value of @code{sprintf}.  It returns the number of\n+Don't use the return value of @code{sprintf}.  It returns the number of\n characters written on some systems, but not on all systems.\n \n+@item\n+Be aware that @code{vfprintf} is not always available.\n+\n @item\n @code{main} should be declared to return type @code{int}.  It should\n terminate either by calling @code{exit} or by returning the integer\n@@ -2297,7 +2484,7 @@ actual conflicts.\n \n @item\n If you must declare a system function, don't specify the argument types.\n-Use an old-style declaration, not an @sc{ansi} prototype.  The more you\n+Use an old-style declaration, not a Standard C prototype.  The more you\n specify about the function, the more likely a conflict.\n \n @item\n@@ -2329,7 +2516,7 @@ figure out which file to include, or don't include either file.\n If you don't include either strings file, you can't get declarations for\n the string functions from the header file in the usual way.\n \n-That causes less of a problem than you might think.  The newer @sc{ansi}\n+That causes less of a problem than you might think.  The newer standard\n string functions should be avoided anyway because many systems still\n don't support them.  The string functions you can use are these:\n \n@@ -2359,7 +2546,7 @@ names, but neither pair works on all systems.\n \n You should pick a single pair of names and use it throughout your\n program.  (Nowadays, it is better to choose @code{strchr} and\n-@code{strrchr} for new programs, since those are the standard @sc{ansi}\n+@code{strrchr} for new programs, since those are the standard\n names.)  Declare both of those names as functions returning @code{char\n *}.  On systems which don't support those names, define them as macros\n in terms of the other pair.  For example, here is what to put at the\n@@ -2503,6 +2690,7 @@ all these kinds of files.\n @menu\n * GNU Manuals::                 Writing proper manuals.\n * Manual Structure Details::    Specific structure conventions.\n+* License for Manuals::         Writing the distribution terms for a manual.\n * NEWS File::                   NEWS files supplement manuals.\n * Change Logs::                 Recording Changes\n * Man Pages::                   Man pages are secondary.\n@@ -2514,9 +2702,12 @@ all these kinds of files.\n @section GNU Manuals\n \n The preferred way to document part of the GNU system is to write a\n-manual in the Texinfo formatting language.  See the Texinfo manual,\n-either the hardcopy, or the on-line version available through\n-@code{info} or the Emacs Info subsystem (@kbd{C-h i}).\n+manual in the Texinfo formatting language.  This makes it possible to\n+produce a good quality formatted book, using @TeX{}, and to generate an\n+Info file.  It is also possible to generate HTML output from Texinfo\n+source.  See the Texinfo manual, either the hardcopy, or the on-line\n+version available through @code{info} or the Emacs Info subsystem\n+(@kbd{C-h i}).\n \n Programmers often find it most natural to structure the documentation\n following the structure of the implementation, which they know.  But\n@@ -2557,6 +2748,8 @@ It should be set up for convenient access to each topic through Info,\n and for reading straight through (appendixes aside).  A GNU manual\n should give a good introduction to a beginner reading through from the\n start, and should also provide all the details that hackers want.\n+The Bison manual is a good example of this---please take a look at it\n+to see what we mean.\n \n That is not as hard as it first sounds.  Arrange each chapter as a\n logical breakdown of its topic, but order the sections, and write their\n@@ -2576,9 +2769,12 @@ explanation of the underlying concepts.  (There are, of course\n exceptions.)  Also Unix man pages use a particular format which is\n different from what we use in GNU manuals.\n \n+Please include an email address in the manual for where to report\n+bugs @emph{in the manual}.\n+\n Please do not use the term ``pathname'' that is used in Unix\n documentation; use ``file name'' (two words) instead.  We use the term\n-``path'' only for search paths, which are lists of file names.\n+``path'' only for search paths, which are lists of directory names.\n \n Please do not use the term ``illegal'' to refer to erroneous input to a\n computer program.  Please use ``invalid'' for this, and reserve the term\n@@ -2611,6 +2807,18 @@ quickly reading just this part of its manual.\n If one manual describes several programs, it should have such a node for\n each program described.\n \n+@node License for Manuals\n+@section License for Manuals\n+\n+If the manual contains a copy of the GNU GPL or GNU LGPL, or if it\n+contains chapters that make political or personal statements, please\n+copy the distribution terms of the GNU Emacs Manual, and adapt it by\n+modifying appropriately the list of special chapters that may not be\n+modified or deleted.\n+\n+If the manual does not contain any such chapters, then imitate the\n+simpler distribution terms of the Texinfo manual.\n+\n @node NEWS File\n @section The NEWS File\n \n@@ -2659,7 +2867,8 @@ you.\n \n Another alternative is to record change log information with a version\n control system such as RCS or CVS.  This can be converted automatically\n-to a @file{ChangeLog} file.\n+to a @file{ChangeLog} file using @code{rcs2log}; in Emacs, the command\n+@kbd{C-x v a} (@code{vc-update-change-log}) does the job.\n \n There's no need to describe the full purpose of the changes or how they\n work together.  If you think that a change calls for explanation, you're\n@@ -3030,6 +3239,21 @@ files} and @dfn{non-source files}.  Source files are written by humans\n and never changed automatically; non-source files are produced from\n source files by programs under the control of the Makefile.\n \n+The distribution should contain a file named @file{README} which gives\n+the name of the package, and a general description of what it does.  It\n+is also good to explain the purpose of each of the first-level\n+subdirectories in the package, if there are any.  The @file{README} file\n+should either state the version number of the package, or refer to where\n+in the package it can be found.\n+\n+The @file{README} file should refer to the file @file{INSTALL}, which\n+should contain an explanation of the installation procedure.\n+\n+The @file{README} file should also refer to the file which contains the\n+copying conditions.  The GNU GPL, if used, should be in a file called\n+@file{COPYING}.  If the GNU LGPL is used, it should be in a file called\n+@file{COPYING.LIB}.\n+\n Naturally, all the source files must be in the distribution.  It is okay\n to include non-source files in the distribution, provided they are\n up-to-date and machine-independent, so that building the distribution\n@@ -3054,7 +3278,7 @@ Make sure that all the files in the distribution are world-readable.\n Make sure that no file name in the distribution is more than 14\n characters long.  Likewise, no file created by building the program\n should have a name longer than 14 characters.  The reason for this is\n-that some systems adhere to a foolish interpretation of the POSIX\n+that some systems adhere to a foolish interpretation of the @sc{posix}\n standard, and refuse to open a longer name, rather than truncating as\n they did in the past.\n \n@@ -3082,6 +3306,31 @@ Leaving them out would make the distribution file a little smaller at\n the expense of possible inconvenience to a user who doesn't know what\n other files to get.\n \n+@node References\n+@chapter References to Non-Free Software and Documentation\n+\n+A GNU program should not recommend use of any non-free program.  We\n+can't stop some people from writing proprietary programs, or stop other\n+people from using them.  But we can and should avoid helping to\n+advertise them to new customers.\n+\n+Sometimes it is important to mention how to build your package on top of\n+some non-free operating system or other non-free base package.  In such\n+cases, please mention the name of the non-free package or system in the\n+briefest possible way.  Don't include any references for where to find\n+more information about the proprietary program.  The goal should be that\n+people already using the proprietary program will get the advice they\n+need about how to use your free program, while people who don't already\n+use the proprietary program will not see anything to encourage them to\n+take an interest in it.\n+\n+Likewise, a GNU package should not refer the user to any non-free\n+documentation for free software.  The need for free documentation to go\n+with free software is now a major focus of the GNU project; to show that\n+we are serious about the need for free documentation, we must not\n+undermine our position by recommending use of documentation that isn't\n+free.\n+\n @contents\n \n @bye"}]}