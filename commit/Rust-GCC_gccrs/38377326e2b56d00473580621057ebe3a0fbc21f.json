{"sha": "38377326e2b56d00473580621057ebe3a0fbc21f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgzNzczMjZlMmI1NmQwMDQ3MzU4MDYyMTA1N2ViZTNhMGZiYzIxZg==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-12-30T19:11:42Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-12-30T19:11:42Z"}, "message": "re PR target/49263 (SH Target: underutilized \"TST #imm, R0\" instruction)\n\ngcc/testsuite/\n\tPR target/49263\n\t* gcc.target/sh/sh.exp (check_effective_target_sh2a): New.\n\t* gcc.target/sh/pr49263-3.c: New.\n\nFrom-SVN: r219113", "tree": {"sha": "2736b4eecfbc8451fa724ce21446edec5c6d9c69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2736b4eecfbc8451fa724ce21446edec5c6d9c69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38377326e2b56d00473580621057ebe3a0fbc21f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38377326e2b56d00473580621057ebe3a0fbc21f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38377326e2b56d00473580621057ebe3a0fbc21f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38377326e2b56d00473580621057ebe3a0fbc21f/comments", "author": null, "committer": null, "parents": [{"sha": "73d706062e3c180ceeae33fc412ef3af4b012f1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73d706062e3c180ceeae33fc412ef3af4b012f1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73d706062e3c180ceeae33fc412ef3af4b012f1a"}], "stats": {"total": 191, "additions": 191, "deletions": 0}, "files": [{"sha": "667b95d23f490d91c8b7bd7d57df903b54fda10f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38377326e2b56d00473580621057ebe3a0fbc21f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38377326e2b56d00473580621057ebe3a0fbc21f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=38377326e2b56d00473580621057ebe3a0fbc21f", "patch": "@@ -1,3 +1,9 @@\n+2014-12-30  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/49263\n+\t* gcc.target/sh/sh.exp (check_effective_target_sh2a): New.\n+\t* gcc.target/sh/pr49263-3.c: New.\n+\n 2014-12-30  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/49263"}, {"sha": "1edfe8767154547a1220184c252b0c347b1a5d4b", "filename": "gcc/testsuite/gcc.target/sh/pr49263-3.c", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38377326e2b56d00473580621057ebe3a0fbc21f/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49263-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38377326e2b56d00473580621057ebe3a0fbc21f/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49263-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49263-3.c?ref=38377326e2b56d00473580621057ebe3a0fbc21f", "patch": "@@ -0,0 +1,176 @@\n+/* Verify that TST #imm, R0 instruction is generated when the tested reg\n+   is shifted by a constant amount.  */\n+/* { dg-do compile }  */\n+/* { dg-options \"-O2\" }  */\n+/* { dg-final { scan-assembler-not \"and|shl|sha|exts\" { xfail *-*-* } } }  */\n+\n+/* { dg-final { scan-assembler-times \"tst\\t#7,r0\" 3 { xfail *-*-* } } }  */\n+/* { dg-final { scan-assembler-times \"tst\\t#12,r0\" 1 { xfail *-*-* } } }  */\n+/* { dg-final { scan-assembler-times \"tst\\t#24,r0\" 6 { xfail *-*-* } } }  */\n+/* { dg-final { scan-assembler-times \"tst\\t#13,r0\" 3 { xfail *-*-* } } }  */\n+/* { dg-final { scan-assembler-times \"tst\\t#242,r0\" 3 { xfail *-*-* } } }  */\n+/* { dg-final { scan-assembler-times \"tst\\t#252,r0\" 1 } }  */\n+\n+/* { dg-final { scan-assembler-times \"tst\\t#64,r0\" 6 { target { ! sh2a } xfail *-*-* } } }  */\n+/* { dg-final { scan-assembler-times \"tst\\t#64,r0\" 4 { target { sh2a } xfail *-*-* } } }  */\n+/* { dg-final { scan-assembler-times \"bld\\t#6\" 2 { target { sh2a } xfail *-*-* } } }  */\n+\n+int\n+test_00 (unsigned char* x, int y, int z)\n+{\n+  /* 1x tst #12  */\n+  return (x[0] << 4) & 192 ? y : z;\n+}\n+\n+int\n+test_01 (unsigned char* x, int y, int z)\n+{\n+  /* 1x tst #24  */\n+  return (x[0] << 3) & 192 ? y : z;\n+}\n+\n+int\n+test_02 (unsigned char* x, int y, int z)\n+{\n+  /* 1x tst #24  */\n+  return ((x[0] << 3) & 192) != 0;\n+}\n+\n+int\n+test_03 (unsigned char* x, int y, int z)\n+{\n+  /* 1x tst #24  */\n+  return ((x[0] << 3) & 192) == 0;\n+}\n+\n+int\n+test_04 (unsigned char x, int y, int z)\n+{\n+  /* 1x tst #24  */\n+  return (x << 3) & 192 ? y : z;\n+}\n+\n+int\n+test_05 (unsigned char x, int y, int z)\n+{\n+  /* 1x tst #24  */\n+  return ((x << 3) & 192) != 0;\n+}\n+\n+int\n+test_06 (unsigned char x, int y, int z)\n+{\n+  /* 1x tst #24  */\n+  return ((x << 3) & 192) == 0;\n+}\n+\n+int\n+test_07 (unsigned char x, int y, int z)\n+{\n+  /* 1x tst #13  */\n+  return (x << 3) & 111 ? y : z;\n+}\n+\n+int\n+test_08 (unsigned char x, int y, int z)\n+{\n+  /* 1x tst #13  */\n+  return ((x << 3) & 111) != 0;\n+}\n+\n+int\n+test_09 (unsigned char x, int y, int z)\n+{\n+  /* 1x tst #13  */\n+  return ((x << 3) & 111) == 0;\n+}\n+\n+int\n+test_10 (unsigned char x, int y, int z)\n+{\n+  /* 1x tst #242  */\n+  return (x << 3) & -111 ? y : z;\n+}\n+\n+int\n+test_11 (unsigned char x, int y, int z)\n+{\n+  /* 1x tst #242  */\n+  return ((x << 3) & -111) != 0;\n+}\n+\n+int\n+test_12 (unsigned char x, int y, int z)\n+{\n+  /* 1x tst #242  */\n+  return ((x << 3) & -111) == 0;\n+}\n+\n+int\n+test_13 (unsigned char* x, int y, int z)\n+{\n+  /* 1x tst #64  */\n+  return (x[0] >> 2) & 16 ? y : z;\n+}\n+\n+int\n+test_14 (unsigned char* x, int y, int z)\n+{\n+  /* 1x tst #64  / 1x bld #6*/\n+  return ((x[0] >> 2) & 16) != 0;\n+}\n+int\n+test_15 (unsigned char* x, int y, int z)\n+{\n+  /* 1x tst #64  */\n+  return ((x[0] >> 2) & 16) == 0;\n+}\n+\n+int\n+test_16 (unsigned char x, int y, int z)\n+{\n+  /* 1x tst #64  */\n+  return (x >> 2) & 16 ? y : z;\n+}\n+\n+int\n+test_17 (unsigned char x, int y, int z)\n+{\n+  /* 1x tst #64  / 1x bld #6*/\n+  return ((x >> 2) & 16) != 0;\n+}\n+\n+int\n+test_18 (unsigned char x, int y, int z)\n+{\n+  /* 1x tst #64  */\n+  return ((x >> 2) & 16) == 0;\n+}\n+\n+int\n+test_19 (signed char x, int y, int z)\n+{\n+  /* 1x tst #7  */\n+  return (x << 1) & 0x0F ? y : z;\n+}\n+\n+int\n+test_20 (signed char x, int y, int z)\n+{\n+  /* 1x tst #7  */\n+  return ((x << 1) & 0x0F) != 0;\n+}\n+\n+int\n+test_21 (signed char x, int y, int z)\n+{\n+  /* 1x tst #7  */\n+  return ((x << 1) & 0x0F) == 0;\n+}\n+\n+int\n+test_22 (unsigned char* x, int y, int z)\n+{\n+  /* 1x tst #252  */\n+  return (x[0] >> 2) ? y : z;\n+}"}, {"sha": "6f7d35d61bbaab000a51eab6792623605314003f", "filename": "gcc/testsuite/gcc.target/sh/sh.exp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38377326e2b56d00473580621057ebe3a0fbc21f/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38377326e2b56d00473580621057ebe3a0fbc21f/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh.exp?ref=38377326e2b56d00473580621057ebe3a0fbc21f", "patch": "@@ -24,6 +24,15 @@ if ![istarget sh*-*-*] then {\n # Load support procs.\n load_lib gcc-dg.exp\n \n+# Return 1 if target is SH2A\n+proc check_effective_target_sh2a { } {\n+    return [check_no_compiler_messages sh2a object {\n+\t     #ifndef __SH2A__\n+\t     #error \"\"\n+\t     #endif\n+    } \"\"]\n+}\n+\n # If a testcase doesn't have special options, use these.\n global DEFAULT_CFLAGS\n if ![info exists DEFAULT_CFLAGS] then {"}]}