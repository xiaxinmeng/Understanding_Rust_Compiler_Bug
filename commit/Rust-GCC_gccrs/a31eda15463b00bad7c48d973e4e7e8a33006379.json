{"sha": "a31eda15463b00bad7c48d973e4e7e8a33006379", "node_id": "C_kwDOANBUbNoAKGEzMWVkYTE1NDYzYjAwYmFkN2M0OGQ5NzNlNGU3ZThhMzMwMDYzNzk", "commit": {"author": {"name": "Joffrey Huguet", "email": "huguet@adacore.com", "date": "2022-06-13T09:44:51Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-12T12:24:11Z"}, "message": "[Ada] Annotate libraries with returning annotation\n\nThis patch annotates SPARK-annotated libraries with returning\nannotations (Always_Return, Might_Not_Return) to remove the warnings\nraised by GNATprove about missing annotations.\n\ngcc/ada/\n\n\t* libgnarl/a-reatim.ads, libgnat/a-cfdlli.ads,\n\tlibgnat/a-cfhama.ads, libgnat/a-cfhase.ads,\n\tlibgnat/a-cfinse.ads, libgnat/a-cfinve.ads,\n\tlibgnat/a-cforma.ads, libgnat/a-cforse.ads,\n\tlibgnat/a-chahan.ads, libgnat/a-cofove.ads,\n\tlibgnat/a-cofuma.ads, libgnat/a-cofuse.ads,\n\tlibgnat/a-cofuve.ads, libgnat/a-nbnbin.ads,\n\tlibgnat/a-nbnbre.ads, libgnat/a-ngelfu.ads,\n\tlibgnat/a-nlelfu.ads, libgnat/a-nllefu.ads,\n\tlibgnat/a-nselfu.ads, libgnat/a-nuelfu.ads,\n\tlibgnat/a-strbou.ads, libgnat/a-strfix.ads,\n\tlibgnat/a-strmap.ads, libgnat/a-strunb.ads,\n\tlibgnat/a-strunb__shared.ads,  libgnat/a-strsea.ads,\n\tlibgnat/a-textio.ads, libgnat/a-tideio.ads,\n\tlibgnat/a-tienio.ads, libgnat/a-tifiio.ads,\n\tlibgnat/a-tiflio.ads, libgnat/a-tiinio.ads,\n\tlibgnat/a-timoio.ads, libgnat/i-c.ads, libgnat/interfac.ads,\n\tlibgnat/interfac__2020.ads, libgnat/s-atacco.ads,\n\tlibgnat/s-stoele.ads: Annotate packages and subprograms with\n\treturning annotations.", "tree": {"sha": "e351ff913a65f922df4f5ddc8528c8620f971b68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e351ff913a65f922df4f5ddc8528c8620f971b68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a31eda15463b00bad7c48d973e4e7e8a33006379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a31eda15463b00bad7c48d973e4e7e8a33006379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a31eda15463b00bad7c48d973e4e7e8a33006379", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a31eda15463b00bad7c48d973e4e7e8a33006379/comments", "author": {"login": "joffreyhuguet", "id": 36951399, "node_id": "MDQ6VXNlcjM2OTUxMzk5", "avatar_url": "https://avatars.githubusercontent.com/u/36951399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joffreyhuguet", "html_url": "https://github.com/joffreyhuguet", "followers_url": "https://api.github.com/users/joffreyhuguet/followers", "following_url": "https://api.github.com/users/joffreyhuguet/following{/other_user}", "gists_url": "https://api.github.com/users/joffreyhuguet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joffreyhuguet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joffreyhuguet/subscriptions", "organizations_url": "https://api.github.com/users/joffreyhuguet/orgs", "repos_url": "https://api.github.com/users/joffreyhuguet/repos", "events_url": "https://api.github.com/users/joffreyhuguet/events{/privacy}", "received_events_url": "https://api.github.com/users/joffreyhuguet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01bf0d6cf53c8c5909f07d89a188b8b1a7a8f179", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01bf0d6cf53c8c5909f07d89a188b8b1a7a8f179", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01bf0d6cf53c8c5909f07d89a188b8b1a7a8f179"}], "stats": {"total": 701, "additions": 443, "deletions": 258}, "files": [{"sha": "dee20e99f4bca64b33ae0d3d38bcd6a6224bc466", "filename": "gcc/ada/libgnarl/a-reatim.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnarl%2Fa-reatim.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnarl%2Fa-reatim.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fa-reatim.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -41,6 +41,7 @@ package Ada.Real_Time with\n   Abstract_State => (Clock_Time with Synchronous),\n   Initializes    => Clock_Time\n is\n+   pragma Annotate (GNATprove, Always_Return, Real_Time);\n \n    pragma Compile_Time_Error\n      (Duration'Size /= 64,"}, {"sha": "01e7db29132d1fd62139390928643287be9c364c", "filename": "gcc/ada/libgnat/a-cfdlli.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-cfdlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-cfdlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cfdlli.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -37,8 +37,10 @@ generic\n    with function \"=\" (Left, Right : Element_Type) return Boolean is <>;\n \n package Ada.Containers.Formal_Doubly_Linked_Lists with\n-  SPARK_Mode\n+  SPARK_Mode,\n+  Annotate => (GNATprove, Always_Return)\n is\n+\n    --  Contracts in this unit are meant for analysis only, not for run-time\n    --  checking.\n "}, {"sha": "8cb7488f1830dd9a278179d968509a9c36c9992c", "filename": "gcc/ada/libgnat/a-cfhama.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-cfhama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-cfhama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cfhama.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -62,8 +62,10 @@ generic\n    with function \"=\" (Left, Right : Element_Type) return Boolean is <>;\n \n package Ada.Containers.Formal_Hashed_Maps with\n-  SPARK_Mode\n+  SPARK_Mode,\n+  Annotate => (GNATprove, Always_Return)\n is\n+\n    --  Contracts in this unit are meant for analysis only, not for run-time\n    --  checking.\n "}, {"sha": "248a0ac9234bd228aedc9ffd0ade2be84b65cc29", "filename": "gcc/ada/libgnat/a-cfhase.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-cfhase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-cfhase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cfhase.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -62,8 +62,10 @@ generic\n       Right : Element_Type) return Boolean is \"=\";\n \n package Ada.Containers.Formal_Hashed_Sets with\n-  SPARK_Mode\n+  SPARK_Mode,\n+  Annotate => (GNATprove, Always_Return)\n is\n+\n    --  Contracts in this unit are meant for analysis only, not for run-time\n    --  checking.\n "}, {"sha": "d7fdb0426cc69fac286e457b5ca331401c2a4ef3", "filename": "gcc/ada/libgnat/a-cfinse.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-cfinse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-cfinse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cfinse.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -38,7 +38,10 @@ generic\n    type Element_Type (<>) is private;\n    with function \"=\" (Left, Right : Element_Type) return Boolean is <>;\n \n-package Ada.Containers.Functional_Infinite_Sequences with SPARK_Mode is\n+package Ada.Containers.Functional_Infinite_Sequences with\n+  SPARK_Mode,\n+  Annotate => (GNATprove, Always_Return)\n+is\n \n    type Sequence is private\n      with Default_Initial_Condition => Length (Sequence) = 0,"}, {"sha": "f44e45b81718bc9f31c26031c1799f32f77dfbd8", "filename": "gcc/ada/libgnat/a-cfinve.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-cfinve.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-cfinve.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cfinve.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -53,8 +53,10 @@ generic\n    --  grow via heap allocation.\n \n package Ada.Containers.Formal_Indefinite_Vectors with\n-  SPARK_Mode => On\n+  SPARK_Mode,\n+  Annotate => (GNATprove, Always_Return)\n is\n+\n    --  Contracts in this unit are meant for analysis only, not for run-time\n    --  checking.\n "}, {"sha": "7be2eec4ae78b9637c9be76b7f3f1addf153c858", "filename": "gcc/ada/libgnat/a-cforma.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-cforma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-cforma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cforma.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -61,8 +61,10 @@ generic\n    with function \"=\" (Left, Right : Element_Type) return Boolean is <>;\n \n package Ada.Containers.Formal_Ordered_Maps with\n-  SPARK_Mode\n+  SPARK_Mode,\n+  Annotate => (GNATprove, Always_Return)\n is\n+\n    --  Contracts in this unit are meant for analysis only, not for run-time\n    --  checking.\n "}, {"sha": "ff96d8e7547b84b0dbdef1f71a110b49ed7afba0", "filename": "gcc/ada/libgnat/a-cforse.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-cforse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-cforse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cforse.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -59,8 +59,10 @@ generic\n    with function \"<\" (Left, Right : Element_Type) return Boolean is <>;\n \n package Ada.Containers.Formal_Ordered_Sets with\n-  SPARK_Mode\n+  SPARK_Mode,\n+  Annotate => (GNATprove, Always_Return)\n is\n+\n    --  Contracts in this unit are meant for analysis only, not for run-time\n    --  checking.\n "}, {"sha": "dc1a629cf2adf4a64158616c3c42068f784deb5a", "filename": "gcc/ada/libgnat/a-chahan.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-chahan.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-chahan.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-chahan.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -46,6 +46,8 @@ is\n    pragma Pure;\n    --  In accordance with Ada 2005 AI-362\n \n+   pragma Annotate (GNATprove, Always_Return, Handling);\n+\n    ----------------------------------------\n    -- Character Classification Functions --\n    ----------------------------------------"}, {"sha": "64133750f2930e184e0f2f4329bee9cd941bfee5", "filename": "gcc/ada/libgnat/a-cofove.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-cofove.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-cofove.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cofove.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -45,6 +45,8 @@ generic\n package Ada.Containers.Formal_Vectors with\n   SPARK_Mode\n is\n+   pragma Annotate (GNATprove, Always_Return, Formal_Vectors);\n+\n    --  Contracts in this unit are meant for analysis only, not for run-time\n    --  checking.\n "}, {"sha": "f863cdc979f5a217dc530ae7037ddd51127d2118", "filename": "gcc/ada/libgnat/a-cofuma.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-cofuma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-cofuma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cofuma.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -49,7 +49,10 @@ generic\n    --  of equivalence over keys is needed, that is, Equivalent_Keys defines a\n    --  key uniquely.\n \n-package Ada.Containers.Functional_Maps with SPARK_Mode is\n+package Ada.Containers.Functional_Maps with\n+  SPARK_Mode,\n+  Annotate => (GNATprove, Always_Return)\n+is\n \n    type Map is private with\n      Default_Initial_Condition => Is_Empty (Map) and Length (Map) = 0,"}, {"sha": "ce52f613f075e56f474272caa685ef21a437e30c", "filename": "gcc/ada/libgnat/a-cofuse.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-cofuse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-cofuse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cofuse.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -47,7 +47,10 @@ generic\n    --  of equivalence over elements is needed, that is, Equivalent_Elements\n    --  defines an element uniquely.\n \n-package Ada.Containers.Functional_Sets with SPARK_Mode is\n+package Ada.Containers.Functional_Sets with\n+  SPARK_Mode,\n+  Annotate => (GNATprove, Always_Return)\n+is\n \n    type Set is private with\n      Default_Initial_Condition => Is_Empty (Set),"}, {"sha": "86222217af5b490e4ca9a68b4d051c43d04af1a3", "filename": "gcc/ada/libgnat/a-cofuve.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-cofuve.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-cofuve.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cofuve.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -40,7 +40,10 @@ generic\n    type Element_Type (<>) is private;\n    with function \"=\" (Left, Right : Element_Type) return Boolean is <>;\n \n-package Ada.Containers.Functional_Vectors with SPARK_Mode is\n+package Ada.Containers.Functional_Vectors with\n+  SPARK_Mode,\n+  Annotate => (GNATprove, Always_Return)\n+is\n \n    subtype Extended_Index is Index_Type'Base range\n      Index_Type'Pred (Index_Type'First) .. Index_Type'Last;"}, {"sha": "ffb96d4d98be75384d80059dec8910d4af8989af", "filename": "gcc/ada/libgnat/a-nbnbin.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-nbnbin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-nbnbin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nbnbin.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -21,6 +21,8 @@ private with System;\n package Ada.Numerics.Big_Numbers.Big_Integers\n   with Preelaborate\n is\n+   pragma Annotate (GNATprove, Always_Return, Big_Integers);\n+\n    type Big_Integer is private\n      with Integer_Literal => From_Universal_Image,\n           Put_Image       => Put_Image;"}, {"sha": "350d0497ed490b207bd8c1c9e11b9a66949532c1", "filename": "gcc/ada/libgnat/a-nbnbre.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-nbnbre.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-nbnbre.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nbnbre.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -20,6 +20,8 @@ with Ada.Strings.Text_Buffers; use Ada.Strings.Text_Buffers;\n package Ada.Numerics.Big_Numbers.Big_Reals\n   with Preelaborate\n is\n+   pragma Annotate (GNATprove, Always_Return, Big_Reals);\n+\n    type Big_Real is private with\n      Real_Literal => From_Universal_Image,\n      Put_Image    => Put_Image;"}, {"sha": "75783ef44a47d12d361bef10260f8fa7682ff03f", "filename": "gcc/ada/libgnat/a-ngelfu.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-ngelfu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-ngelfu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ngelfu.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -40,6 +40,7 @@ package Ada.Numerics.Generic_Elementary_Functions with\n   SPARK_Mode => On\n is\n    pragma Pure;\n+   pragma Annotate (GNATprove, Always_Return, Generic_Elementary_Functions);\n \n    --  Preconditions in this unit are meant for analysis only, not for run-time\n    --  checking, so that the expected exceptions are raised when calling"}, {"sha": "b3afd1fc997cb7e8811d4597a0cd8fa043c0c671", "filename": "gcc/ada/libgnat/a-nlelfu.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-nlelfu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-nlelfu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nlelfu.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -19,3 +19,4 @@ package Ada.Numerics.Long_Elementary_Functions is\n   new Ada.Numerics.Generic_Elementary_Functions (Long_Float);\n \n pragma Pure (Long_Elementary_Functions);\n+pragma Annotate (GNATprove, Always_Return, Long_Elementary_Functions);"}, {"sha": "e137c67e78641b23fa75574c3da78c27f0869c2f", "filename": "gcc/ada/libgnat/a-nllefu.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-nllefu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-nllefu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nllefu.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -19,3 +19,4 @@ package Ada.Numerics.Long_Long_Elementary_Functions is\n   new Ada.Numerics.Generic_Elementary_Functions (Long_Long_Float);\n \n pragma Pure (Long_Long_Elementary_Functions);\n+pragma Annotate (GNATprove, Always_Return, Long_Long_Elementary_Functions);"}, {"sha": "6797efd70e98e2352866613e4d127e6e430a9dae", "filename": "gcc/ada/libgnat/a-nselfu.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-nselfu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-nselfu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nselfu.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -19,3 +19,4 @@ package Ada.Numerics.Short_Elementary_Functions is\n   new Ada.Numerics.Generic_Elementary_Functions (Short_Float);\n \n pragma Pure (Short_Elementary_Functions);\n+pragma Annotate (GNATprove, Always_Return, Short_Elementary_Functions);"}, {"sha": "d4fe74572f686d2038951fe0865d3b5b73adb2a1", "filename": "gcc/ada/libgnat/a-nuelfu.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-nuelfu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-nuelfu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nuelfu.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -19,3 +19,4 @@ package Ada.Numerics.Elementary_Functions is\n   new Ada.Numerics.Generic_Elementary_Functions (Float);\n \n pragma Pure (Elementary_Functions);\n+pragma Annotate (GNATprove, Always_Return, Elementary_Functions);"}, {"sha": "678c3454e4e04fff14b452db7632b0959ce706d2", "filename": "gcc/ada/libgnat/a-strbou.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-strbou.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-strbou.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-strbou.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -49,6 +49,7 @@ with Ada.Strings.Search;\n \n package Ada.Strings.Bounded with SPARK_Mode is\n    pragma Preelaborate;\n+   pragma Annotate (GNATprove, Always_Return, Bounded);\n \n    generic\n       Max : Positive;\n@@ -68,6 +69,7 @@ package Ada.Strings.Bounded with SPARK_Mode is\n                                Post           => Ignore,\n                                Contract_Cases => Ignore,\n                                Ghost          => Ignore);\n+      pragma Annotate (GNATprove, Always_Return, Generic_Bounded_Length);\n \n       Max_Length : constant Positive := Max;\n "}, {"sha": "dee64ab9e0e18ece36fa1e075cc34126566b8cc4", "filename": "gcc/ada/libgnat/a-strfix.ads", "status": "modified", "additions": 87, "deletions": 51, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-strfix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-strfix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-strfix.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -63,7 +63,8 @@ package Ada.Strings.Fixed with SPARK_Mode is\n \n      --  Incomplete contract\n \n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Might_Not_Return);\n    --  The Move procedure copies characters from Source to Target. If Source\n    --  has the same length as Target, then the effect is to assign Source to\n    --  Target. If Source is shorter than Target then:\n@@ -168,7 +169,8 @@ package Ada.Strings.Fixed with SPARK_Mode is\n         others\n         =>\n           Index'Result = 0),\n-     Global         => null;\n+     Global         => null,\n+     Annotate       => (GNATprove, Always_Return);\n    pragma Ada_05 (Index);\n \n    function Index\n@@ -231,7 +233,8 @@ package Ada.Strings.Fixed with SPARK_Mode is\n         others\n         =>\n           Index'Result = 0),\n-     Global         => null;\n+     Global         => null,\n+     Annotate       => (GNATprove, Always_Return);\n    pragma Ada_05 (Index);\n \n    --  Each Index function searches, starting from From, for a slice of\n@@ -300,7 +303,8 @@ package Ada.Strings.Fixed with SPARK_Mode is\n         others\n         =>\n           Index'Result = 0),\n-     Global         => null;\n+     Global         => null,\n+     Annotate       => (GNATprove, Always_Return);\n \n    function Index\n      (Source  : String;\n@@ -355,7 +359,8 @@ package Ada.Strings.Fixed with SPARK_Mode is\n         others\n         =>\n           Index'Result = 0),\n-     Global         => null;\n+     Global         => null,\n+     Annotate       => (GNATprove, Always_Return);\n \n    --  If Going = Forward, returns:\n    --\n@@ -408,7 +413,8 @@ package Ada.Strings.Fixed with SPARK_Mode is\n                        and then (J < Index'Result) = (Going = Forward)\n                   then (Test = Inside)\n                        /= Ada.Strings.Maps.Is_In (Source (J), Set)))),\n-     Global         => null;\n+     Global         => null,\n+     Annotate       => (GNATprove, Always_Return);\n \n    function Index\n      (Source  : String;\n@@ -464,7 +470,8 @@ package Ada.Strings.Fixed with SPARK_Mode is\n                                 or else (J > From) = (Going = Forward))\n                   then (Test = Inside)\n                        /= Ada.Strings.Maps.Is_In (Source (J), Set)))),\n-     Global         => null;\n+     Global         => null,\n+     Annotate       => (GNATprove, Always_Return);\n    pragma Ada_05 (Index);\n    --  Index searches for the first or last occurrence of any of a set of\n    --  characters (when Test=Inside), or any of the complement of a set of\n@@ -524,7 +531,8 @@ package Ada.Strings.Fixed with SPARK_Mode is\n                        and then (J = From or else (J > From)\n                                 = (Going = Forward))\n                   then Source (J) = ' '))),\n-     Global         => null;\n+     Global         => null,\n+     Annotate       => (GNATprove, Always_Return);\n    pragma Ada_05 (Index_Non_Blank);\n    --  Returns Index (Source, Maps.To_Set(Space), From, Outside, Going)\n \n@@ -562,24 +570,27 @@ package Ada.Strings.Fixed with SPARK_Mode is\n                        and then (J < Index_Non_Blank'Result)\n                               = (Going = Forward)\n                   then Source (J) = ' '))),\n-     Global         => null;\n+     Global         => null,\n+     Annotate       => (GNATprove, Always_Return);\n    --  Returns Index (Source, Maps.To_Set(Space), Outside, Going)\n \n    function Count\n      (Source  : String;\n       Pattern : String;\n       Mapping : Maps.Character_Mapping := Maps.Identity) return Natural\n    with\n-     Pre    => Pattern'Length /= 0,\n-     Global => null;\n+     Pre      => Pattern'Length /= 0,\n+     Global   => null,\n+     Annotate => (GNATprove, Always_Return);\n \n    function Count\n      (Source  : String;\n       Pattern : String;\n       Mapping : Maps.Character_Mapping_Function) return Natural\n    with\n-     Pre    => Pattern'Length /= 0 and then Mapping /= null,\n-     Global => null;\n+     Pre      => Pattern'Length /= 0 and then Mapping /= null,\n+     Global   => null,\n+     Annotate => (GNATprove, Always_Return);\n \n    --  Returns the maximum number of nonoverlapping slices of Source that match\n    --  Pattern with respect to Mapping. If Pattern is the null string then\n@@ -589,7 +600,8 @@ package Ada.Strings.Fixed with SPARK_Mode is\n      (Source : String;\n       Set    : Maps.Character_Set) return Natural\n    with\n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Always_Return);\n    --  Returns the number of occurrences in Source of characters that are in\n    --  Set.\n \n@@ -647,7 +659,8 @@ package Ada.Strings.Fixed with SPARK_Mode is\n                then\n                  (Test = Inside)\n                  /= Ada.Strings.Maps.Is_In (Source (Last + 1), Set))),\n-     Global         => null;\n+     Global         => null,\n+     Annotate       => (GNATprove, Always_Return);\n    pragma Ada_2012 (Find_Token);\n    --  If Source is not the null string and From is not in Source'Range, then\n    --  Index_Error is raised. Otherwise, First is set to the index of the first\n@@ -709,7 +722,8 @@ package Ada.Strings.Fixed with SPARK_Mode is\n                then\n                  (Test = Inside)\n                  /= Ada.Strings.Maps.Is_In (Source (Last + 1), Set))),\n-     Global => null;\n+     Global         => null,\n+     Annotate       => (GNATprove, Always_Return);\n    --  Equivalent to Find_Token (Source, Set, Source'First, Test, First, Last)\n \n    ------------------------------------\n@@ -738,7 +752,8 @@ package Ada.Strings.Fixed with SPARK_Mode is\n            (for all J in Source'Range =>\n               Translate'Result (J - Source'First + 1)\n               = Mapping (Source (J))),\n-     Global => null;\n+     Global         => null,\n+     Annotate       => (GNATprove, Always_Return);\n \n    function Translate\n      (Source  : String;\n@@ -761,7 +776,8 @@ package Ada.Strings.Fixed with SPARK_Mode is\n            (for all J in Source'Range =>\n               Translate'Result (J - Source'First + 1)\n               = Ada.Strings.Maps.Value (Mapping, Source (J))),\n-     Global => null;\n+     Global         => null,\n+     Annotate       => (GNATprove, Always_Return);\n \n    --  Returns the string S whose length is Source'Length and such that S (I)\n    --  is the character to which Mapping maps the corresponding element of\n@@ -771,27 +787,29 @@ package Ada.Strings.Fixed with SPARK_Mode is\n      (Source  : in out String;\n       Mapping : Maps.Character_Mapping_Function)\n    with\n-     Pre    => Mapping /= null,\n-     Post   =>\n+     Pre      => Mapping /= null,\n+     Post     =>\n \n        --  Each character in Source after the call is the translation of the\n        --  character at the same position before the call, through Mapping.\n \n        (for all J in Source'Range => Source (J) = Mapping (Source'Old (J))),\n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Always_Return);\n \n    procedure Translate\n      (Source  : in out String;\n       Mapping : Maps.Character_Mapping)\n    with\n-     Post   =>\n+     Post     =>\n \n        --  Each character in Source after the call is the translation of the\n        --  character at the same position before the call, through Mapping.\n \n        (for all J in Source'Range =>\n           Source (J) = Ada.Strings.Maps.Value (Mapping, Source'Old (J))),\n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Always_Return);\n \n    --  Equivalent to Source := Translate(Source, Mapping)\n \n@@ -884,7 +902,8 @@ package Ada.Strings.Fixed with SPARK_Mode is\n                   (Low - Source'First + By'Length + 1\n                    .. Replace_Slice'Result'Last)\n                 = Source (Low .. Source'Last))),\n-     Global         => null;\n+     Global         => null,\n+     Annotate       => (GNATprove, Always_Return);\n    --  If Low > Source'Last + 1, or High < Source'First - 1, then Index_Error\n    --  is propagated. Otherwise:\n    --\n@@ -904,7 +923,7 @@ package Ada.Strings.Fixed with SPARK_Mode is\n       Justify : Alignment  := Left;\n       Pad     : Character  := Space)\n    with\n-     Pre    =>\n+     Pre      =>\n        Low - 1 <= Source'Last\n          and then High >= Source'First - 1\n          and then (if High >= Low\n@@ -916,7 +935,8 @@ package Ada.Strings.Fixed with SPARK_Mode is\n \n    --  Incomplete contract\n \n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Might_Not_Return);\n    --  Equivalent to:\n    --\n    --    Move (Replace_Slice (Source, Low, High, By),\n@@ -962,7 +982,8 @@ package Ada.Strings.Fixed with SPARK_Mode is\n                 (Before - Source'First + New_Item'Length + 1\n                  .. Insert'Result'Last)\n               = Source (Before .. Source'Last)),\n-     Global => null;\n+     Global         => null,\n+     Annotate       => (GNATprove, Always_Return);\n    --  Propagates Index_Error if Before is not in\n    --  Source'First .. Source'Last + 1; otherwise, returns\n    --  Source (Source'First .. Before - 1)\n@@ -974,27 +995,28 @@ package Ada.Strings.Fixed with SPARK_Mode is\n       New_Item : String;\n       Drop     : Truncation := Error)\n    with\n-     Pre    =>\n+     Pre      =>\n        Before - 1 in Source'First - 1 .. Source'Last\n          and then Source'Length <= Natural'Last - New_Item'Length,\n \n      --  Incomplete contract\n \n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Might_Not_Return);\n    --  Equivalent to Move (Insert (Source, Before, New_Item), Source, Drop)\n \n    function Overwrite\n      (Source   : String;\n       Position : Positive;\n       New_Item : String) return String\n    with\n-     Pre    =>\n+     Pre      =>\n        Position - 1 in Source'First - 1 .. Source'Last\n          and then\n            (if Position - Source'First >= Source'Length - New_Item'Length\n             then Position - Source'First <= Natural'Last - New_Item'Length),\n \n-     Post   =>\n+     Post     =>\n \n        --  Lower bound of the returned string is 1\n \n@@ -1029,7 +1051,8 @@ package Ada.Strings.Fixed with SPARK_Mode is\n                 (Position - Source'First + New_Item'Length + 1\n                  .. Overwrite'Result'Last)\n               = Source (Position + New_Item'Length .. Source'Last)),\n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Always_Return);\n    --  Propagates Index_Error if Position is not in\n    --  Source'First .. Source'Last + 1; otherwise, returns the string obtained\n    --  from Source by consecutively replacing characters starting at Position\n@@ -1043,15 +1066,16 @@ package Ada.Strings.Fixed with SPARK_Mode is\n       New_Item : String;\n       Drop     : Truncation := Right)\n    with\n-     Pre    =>\n+     Pre      =>\n        Position - 1 in Source'First - 1 .. Source'Last\n          and then\n            (if Position - Source'First >= Source'Length - New_Item'Length\n             then Position - Source'First <= Natural'Last - New_Item'Length),\n \n      --  Incomplete contract\n \n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Might_Not_Return);\n    --  Equivalent to Move(Overwrite(Source, Position, New_Item), Source, Drop)\n \n    function Delete\n@@ -1099,7 +1123,8 @@ package Ada.Strings.Fixed with SPARK_Mode is\n         others          =>\n           Delete'Result'Length = Source'Length\n             and then Delete'Result = Source),\n-     Global         => null;\n+     Global         => null,\n+     Annotate       => (GNATprove, Always_Return);\n    --  If From <= Through, the returned string is\n    --  Replace_Slice(Source, From, Through, \"\"); otherwise, it is Source with\n    --  lower bound 1.\n@@ -1111,13 +1136,14 @@ package Ada.Strings.Fixed with SPARK_Mode is\n       Justify : Alignment := Left;\n       Pad     : Character := Space)\n    with\n-     Pre    => (if From <= Through\n-                then (From in Source'Range\n-                        and then Through <= Source'Last)),\n+     Pre      => (if From <= Through\n+                  then (From in Source'Range\n+                          and then Through <= Source'Last)),\n \n      --  Incomplete contract\n \n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Might_Not_Return);\n    --  Equivalent to:\n    --\n    --     Move (Delete (Source, From, Through),\n@@ -1131,7 +1157,7 @@ package Ada.Strings.Fixed with SPARK_Mode is\n      (Source : String;\n       Side   : Trim_End) return String\n    with\n-     Post   =>\n+     Post     =>\n \n        --  Lower bound of the returned string is 1\n \n@@ -1156,7 +1182,8 @@ package Ada.Strings.Fixed with SPARK_Mode is\n                     else Index_Non_Blank (Source, Backward));\n                begin\n                  Trim'Result = Source (Low .. High))),\n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Always_Return);\n    --  Returns the string obtained by removing from Source all leading Space\n    --  characters (if Side = Left), all trailing Space characters (if\n    --  Side = Right), or all leading and trailing Space characters (if\n@@ -1171,7 +1198,8 @@ package Ada.Strings.Fixed with SPARK_Mode is\n \n      --  Incomplete contract\n \n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Might_Not_Return);\n    --  Equivalent to:\n    --\n    --     Move (Trim (Source, Side), Source, Justify=>Justify, Pad=>Pad).\n@@ -1208,7 +1236,8 @@ package Ada.Strings.Fixed with SPARK_Mode is\n                 Index (Source, Right, Outside, Backward);\n             begin\n               Trim'Result = Source (Low .. High))),\n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Always_Return);\n    --  Returns the string obtained by removing from Source all leading\n    --  characters in Left and all trailing characters in Right.\n \n@@ -1222,7 +1251,8 @@ package Ada.Strings.Fixed with SPARK_Mode is\n \n      --  Incomplete contract\n \n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Might_Not_Return);\n    --  Equivalent to:\n    --\n    --     Move (Trim (Source, Left, Right),\n@@ -1259,7 +1289,8 @@ package Ada.Strings.Fixed with SPARK_Mode is\n             and then\n               Head'Result (Source'Length + 1 .. Count)\n               = [1 .. Count - Source'Length => Pad]),\n-     Global         => null;\n+     Global         => null,\n+     Annotate       => (GNATprove, Always_Return);\n    --  Returns a string of length Count. If Count <= Source'Length, the string\n    --  comprises the first Count characters of Source. Otherwise, its contents\n    --  are Source concatenated with Count - Source'Length Pad characters.\n@@ -1273,7 +1304,8 @@ package Ada.Strings.Fixed with SPARK_Mode is\n \n      --  Incomplete contract\n \n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Might_Not_Return);\n    --  Equivalent to:\n    --\n    --     Move (Head (Source, Count, Pad),\n@@ -1322,7 +1354,8 @@ package Ada.Strings.Fixed with SPARK_Mode is\n                and then\n                  Tail'Result (Count - Source'Length + 1 .. Tail'Result'Last)\n                  = Source)),\n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Always_Return);\n    --  Returns a string of length Count. If Count <= Source'Length, the string\n    --  comprises the last Count characters of Source. Otherwise, its contents\n    --  are Count-Source'Length Pad characters concatenated with Source.\n@@ -1336,7 +1369,8 @@ package Ada.Strings.Fixed with SPARK_Mode is\n \n      --  Incomplete contract\n \n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Might_Not_Return);\n    --  Equivalent to:\n    --\n    --     Move (Tail (Source, Count, Pad),\n@@ -1350,7 +1384,7 @@ package Ada.Strings.Fixed with SPARK_Mode is\n      (Left  : Natural;\n       Right : Character) return String\n    with\n-     Post   =>\n+     Post     =>\n \n        --  Lower bound of the returned string is 1\n \n@@ -1363,7 +1397,8 @@ package Ada.Strings.Fixed with SPARK_Mode is\n          --  All characters of the returned string are Right\n \n          and then (for all C of \"*\"'Result => C = Right),\n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Always_Return);\n \n    function \"*\"\n      (Left  : Natural;\n@@ -1386,7 +1421,8 @@ package Ada.Strings.Fixed with SPARK_Mode is\n          and then\n            (for all K in \"*\"'Result'Range =>\n               \"*\"'Result (K) = Right (Right'First + (K - 1) mod Right'Length)),\n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Always_Return);\n \n    --  These functions replicate a character or string a specified number of\n    --  times. The first function returns a string whose length is Left and each"}, {"sha": "1f228830527093e364fe74374eed1d380de86b1c", "filename": "gcc/ada/libgnat/a-strmap.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-strmap.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-strmap.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-strmap.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -54,6 +54,8 @@ is\n    pragma Pure;\n    --  In accordance with Ada 2005 AI-362\n \n+   pragma Annotate (GNATprove, Always_Return, Maps);\n+\n    --------------------------------\n    -- Character Set Declarations --\n    --------------------------------"}, {"sha": "22a049247edb1f476156d0de0145a8303555b50b", "filename": "gcc/ada/libgnat/a-strsea.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-strsea.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-strsea.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-strsea.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -52,6 +52,7 @@ with Ada.Strings.Maps; use type Ada.Strings.Maps.Character_Mapping_Function;\n \n package Ada.Strings.Search with SPARK_Mode is\n    pragma Preelaborate;\n+   pragma Annotate (GNATprove, Always_Return, Search);\n \n    --  The ghost function Match tells whether the slice of Source starting at\n    --  From and of length Pattern'Length matches with Pattern with respect to"}, {"sha": "6997594e7bc534a2a60d3a0da6723bf4e3727b5a", "filename": "gcc/ada/libgnat/a-strunb.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-strunb.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-strunb.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-strunb.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -57,6 +57,7 @@ package Ada.Strings.Unbounded with\n   Initial_Condition => Length (Null_Unbounded_String) = 0\n is\n    pragma Preelaborate;\n+   pragma Annotate (GNATprove, Always_Return, Unbounded);\n \n    type Unbounded_String is private with\n      Default_Initial_Condition => Length (Unbounded_String) = 0;"}, {"sha": "e5be4540ad487f0ae1028da034aa785cc0714255", "filename": "gcc/ada/libgnat/a-strunb__shared.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-strunb__shared.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-strunb__shared.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-strunb__shared.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -86,6 +86,7 @@ package Ada.Strings.Unbounded with\n   Initial_Condition => Length (Null_Unbounded_String) = 0\n is\n    pragma Preelaborate;\n+   pragma Annotate (GNATprove, Always_Return, Unbounded);\n \n    type Unbounded_String is private with\n      Default_Initial_Condition => Length (Unbounded_String) = 0;"}, {"sha": "447023d0c3ff347cfbfa11d536c758f47570e663", "filename": "gcc/ada/libgnat/a-textio.ads", "status": "modified", "additions": 189, "deletions": 129, "changes": 318, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-textio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-textio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-textio.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -101,69 +101,79 @@ is\n       Name : String := \"\";\n       Form : String := \"\")\n    with\n-     Pre    => not Is_Open (File),\n-     Post   =>\n+     Pre      => not Is_Open (File),\n+     Post     =>\n        Is_Open (File)\n        and then Ada.Text_IO.Mode (File) = Mode\n        and then (if Mode /= In_File\n                    then (Line_Length (File) = 0\n                          and then Page_Length (File) = 0)),\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Open\n      (File : in out File_Type;\n       Mode : File_Mode;\n       Name : String;\n       Form : String := \"\")\n    with\n-     Pre    => not Is_Open (File),\n-     Post   =>\n+     Pre      => not Is_Open (File),\n+     Post     =>\n       Is_Open (File)\n       and then Ada.Text_IO.Mode (File) = Mode\n       and then (if Mode /= In_File\n                   then (Line_Length (File) = 0\n                         and then Page_Length (File) = 0)),\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Close  (File : in out File_Type) with\n-     Pre    => Is_Open (File),\n-     Post   => not Is_Open (File),\n-     Global => (In_Out => File_System);\n+     Pre      => Is_Open (File),\n+     Post     => not Is_Open (File),\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Always_Return);\n    procedure Delete (File : in out File_Type) with\n-     Pre    => Is_Open (File),\n-     Post   => not Is_Open (File),\n-     Global => (In_Out => File_System);\n+     Pre      => Is_Open (File),\n+     Post     => not Is_Open (File),\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n    procedure Reset  (File : in out File_Type; Mode : File_Mode) with\n-     Pre    => Is_Open (File),\n-     Post   =>\n+     Pre      => Is_Open (File),\n+     Post     =>\n        Is_Open (File)\n        and then Ada.Text_IO.Mode (File) = Mode\n        and then (if Mode /= In_File\n                    then (Line_Length (File) = 0\n                          and then Page_Length (File) = 0)),\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n    procedure Reset  (File : in out File_Type) with\n-     Pre    => Is_Open (File),\n-     Post   =>\n+     Pre      => Is_Open (File),\n+     Post     =>\n        Is_Open (File)\n        and Mode (File)'Old = Mode (File)\n        and (if Mode (File) /= In_File\n                 then (Line_Length (File) = 0\n                       and then Page_Length (File) = 0)),\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    function Mode (File : File_Type) return File_Mode with\n-     Pre    => Is_Open (File),\n-     Global => null;\n+     Pre      => Is_Open (File),\n+     Global   => null,\n+     Annotate => (GNATprove, Always_Return);\n    function Name (File : File_Type) return String with\n-     Pre    => Is_Open (File),\n-     Global => null;\n+     Pre      => Is_Open (File),\n+     Global   => null,\n+     Annotate => (GNATprove, Always_Return);\n    function Form (File : File_Type) return String with\n-     Pre    => Is_Open (File),\n-     Global => null;\n+     Pre      => Is_Open (File),\n+     Global   => null,\n+     Annotate => (GNATprove, Always_Return);\n \n    function Is_Open (File : File_Type) return Boolean with\n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Always_Return);\n \n    ------------------------------------------------------\n    -- Control of default input, output and error files --\n@@ -199,120 +209,142 @@ is\n    --  an oversight, and was intended to be IN, see AI95-00057.\n \n    procedure Flush (File : File_Type) with\n-     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n-     Post   =>\n+     Pre      => Is_Open (File) and then Mode (File) /= In_File,\n+     Post     =>\n        Line_Length (File)'Old = Line_Length (File)\n        and Page_Length (File)'Old = Page_Length (File),\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Always_Return);\n    procedure Flush with\n-     Post   =>\n+     Post     =>\n        Line_Length'Old = Line_Length\n        and Page_Length'Old = Page_Length,\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Always_Return);\n \n    --------------------------------------------\n    -- Specification of line and page lengths --\n    --------------------------------------------\n \n    procedure Set_Line_Length (File : File_Type; To : Count) with\n-     Pre    => Is_Open (File)  and then Mode (File) /= In_File,\n-     Post   =>\n+     Pre      => Is_Open (File)  and then Mode (File) /= In_File,\n+     Post     =>\n        Line_Length (File) = To\n        and Page_Length (File)'Old = Page_Length (File),\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n    procedure Set_Line_Length (To : Count) with\n-     Post   =>\n+     Post     =>\n        Line_Length = To\n        and Page_Length'Old = Page_Length,\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Set_Page_Length (File : File_Type; To : Count) with\n-     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n-     Post   =>\n+     Pre      => Is_Open (File) and then Mode (File) /= In_File,\n+     Post     =>\n        Page_Length (File) = To\n        and Line_Length (File)'Old = Line_Length (File),\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n    procedure Set_Page_Length (To : Count) with\n-     Post   =>\n+     Post     =>\n        Page_Length = To\n        and Line_Length'Old = Line_Length,\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    function Line_Length (File : File_Type) return Count with\n-     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n-     Global => (Input => File_System);\n+     Pre      => Is_Open (File) and then Mode (File) /= In_File,\n+     Global   => (Input => File_System);\n    function Line_Length return Count with\n-     Global => (Input => File_System);\n+     Global   => (Input => File_System),\n+     Annotate => (GNATprove, Always_Return);\n \n    function Page_Length (File : File_Type) return Count with\n-     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n-     Global => (Input => File_System);\n+     Pre      => Is_Open (File) and then Mode (File) /= In_File,\n+     Global   => (Input => File_System);\n    function Page_Length return Count with\n-     Global => (Input => File_System);\n+     Global   => (Input => File_System),\n+     Annotate => (GNATprove, Always_Return);\n \n    ------------------------------------\n    -- Column, Line, and Page Control --\n    ------------------------------------\n \n    procedure New_Line (File : File_Type; Spacing : Positive_Count := 1) with\n-     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n-     Post   =>\n+     Pre      => Is_Open (File) and then Mode (File) /= In_File,\n+     Post     =>\n        Line_Length (File)'Old = Line_Length (File)\n        and Page_Length (File)'Old = Page_Length (File),\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Always_Return);\n    procedure New_Line (Spacing : Positive_Count := 1) with\n-     Post   =>\n+     Post     =>\n        Line_Length'Old = Line_Length\n        and Page_Length'Old = Page_Length,\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Always_Return);\n \n    procedure Skip_Line (File : File_Type; Spacing : Positive_Count := 1) with\n-     Pre    => Is_Open (File) and then Mode (File) = In_File,\n-     Global => (In_Out => File_System);\n+     Pre      => Is_Open (File) and then Mode (File) = In_File,\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n    procedure Skip_Line (Spacing : Positive_Count := 1) with\n-     Post   =>\n+     Post     =>\n        Line_Length'Old = Line_Length\n        and Page_Length'Old = Page_Length,\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    function End_Of_Line (File : File_Type) return Boolean with\n-     Pre    => Is_Open (File) and then Mode (File) = In_File,\n-     Global => (Input => File_System);\n+     Pre      => Is_Open (File) and then Mode (File) = In_File,\n+     Global   => (Input => File_System),\n+     Annotate => (GNATprove, Always_Return);\n    function End_Of_Line return Boolean with\n-     Global => (Input => File_System);\n+     Global   => (Input => File_System),\n+     Annotate => (GNATprove, Always_Return);\n \n    procedure New_Page (File : File_Type) with\n-     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n-     Post   =>\n+     Pre      => Is_Open (File) and then Mode (File) /= In_File,\n+     Post     =>\n        Line_Length (File)'Old = Line_Length (File)\n        and Page_Length (File)'Old = Page_Length (File),\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Always_Return);\n    procedure New_Page with\n-     Post   =>\n+     Post     =>\n        Line_Length'Old = Line_Length\n        and Page_Length'Old = Page_Length,\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Always_Return);\n \n    procedure Skip_Page (File : File_Type) with\n-     Pre    => Is_Open (File) and then Mode (File) = In_File,\n-     Global => (In_Out => File_System);\n+     Pre      => Is_Open (File) and then Mode (File) = In_File,\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n    procedure Skip_Page with\n-     Post   =>\n+     Post     =>\n        Line_Length'Old = Line_Length\n        and Page_Length'Old = Page_Length,\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    function End_Of_Page (File : File_Type) return Boolean with\n-     Pre    => Is_Open (File) and then Mode (File) = In_File,\n-     Global => (Input => File_System);\n+     Pre      => Is_Open (File) and then Mode (File) = In_File,\n+     Global   => (Input => File_System),\n+     Annotate => (GNATprove, Always_Return);\n    function End_Of_Page return Boolean with\n-     Global => (Input => File_System);\n+     Global   => (Input => File_System),\n+     Annotate => (GNATprove, Always_Return);\n \n    function End_Of_File (File : File_Type) return Boolean with\n-     Pre    => Is_Open (File) and then Mode (File) = In_File,\n-     Global => (Input => File_System);\n+     Pre      => Is_Open (File) and then Mode (File) = In_File,\n+     Global   => (Input => File_System),\n+     Annotate => (GNATprove, Always_Return);\n    function End_Of_File return Boolean with\n-     Global => (Input => File_System);\n+     Global   => (Input => File_System),\n+     Annotate => (GNATprove, Always_Return);\n \n    procedure Set_Col (File : File_Type;  To : Positive_Count) with\n      Pre            =>\n@@ -325,13 +357,15 @@ is\n               Line_Length (File)'Old = Line_Length (File)\n               and Page_Length (File)'Old = Page_Length (File),\n         others                 => True),\n-     Global         => (In_Out => File_System);\n+     Global         => (In_Out => File_System),\n+     Annotate       => (GNATprove, Might_Not_Return);\n    procedure Set_Col (To : Positive_Count) with\n-     Pre    => Line_Length = 0 or To <= Line_Length,\n-     Post   =>\n+     Pre      => Line_Length = 0 or To <= Line_Length,\n+     Post     =>\n        Line_Length'Old = Line_Length\n        and Page_Length'Old = Page_Length,\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Set_Line (File : File_Type; To : Positive_Count) with\n      Pre            =>\n@@ -344,149 +378,173 @@ is\n               Line_Length (File)'Old = Line_Length (File)\n               and Page_Length (File)'Old = Page_Length (File),\n         others                 => True),\n-     Global         => (In_Out => File_System);\n+     Global         => (In_Out => File_System),\n+     Annotate       => (GNATprove, Might_Not_Return);\n    procedure Set_Line (To : Positive_Count) with\n-     Pre    => Page_Length = 0 or To <= Page_Length,\n-     Post   =>\n+     Pre      => Page_Length = 0 or To <= Page_Length,\n+     Post     =>\n        Line_Length'Old = Line_Length\n        and Page_Length'Old = Page_Length,\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    function Col (File : File_Type) return Positive_Count with\n-     Pre    => Is_Open (File),\n-     Global => (Input => File_System);\n+     Pre      => Is_Open (File),\n+     Global   => (Input => File_System),\n+     Annotate => (GNATprove, Always_Return);\n    function Col return Positive_Count with\n-     Global => (Input => File_System);\n+     Global   => (Input => File_System),\n+     Annotate => (GNATprove, Always_Return);\n \n    function Line (File : File_Type) return Positive_Count with\n-     Pre    => Is_Open (File),\n-     Global => (Input => File_System);\n+     Pre      => Is_Open (File),\n+     Global   => (Input => File_System),\n+     Annotate => (GNATprove, Always_Return);\n    function Line return Positive_Count with\n-     Global => (Input => File_System);\n+     Global   => (Input => File_System),\n+     Annotate => (GNATprove, Always_Return);\n \n    function Page (File : File_Type) return Positive_Count with\n-     Pre => Is_Open (File),\n-     Global => (Input => File_System);\n+     Pre      => Is_Open (File),\n+     Global   => (Input => File_System),\n+     Annotate => (GNATprove, Always_Return);\n    function Page return Positive_Count with\n-     Global => (Input => File_System);\n+     Global   => (Input => File_System),\n+     Annotate => (GNATprove, Always_Return);\n \n    ----------------------------\n    -- Character Input-Output --\n    ----------------------------\n \n    procedure Get (File : File_Type; Item : out Character) with\n-     Pre    => Is_Open (File) and then Mode (File) = In_File,\n-     Global => (In_Out => File_System);\n+     Pre      => Is_Open (File) and then Mode (File) = In_File,\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n    procedure Get (Item : out Character) with\n      Post   =>\n        Line_Length'Old = Line_Length\n        and Page_Length'Old = Page_Length,\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n    procedure Put (File : File_Type; Item : Character) with\n-     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n-     Post   =>\n+     Pre      => Is_Open (File) and then Mode (File) /= In_File,\n+     Post     =>\n        Line_Length (File)'Old = Line_Length (File)\n        and Page_Length (File)'Old = Page_Length (File),\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Always_Return);\n    procedure Put (Item : Character) with\n-     Post   =>\n+     Post     =>\n        Line_Length'Old = Line_Length\n        and Page_Length'Old = Page_Length,\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Always_Return);\n \n    procedure Look_Ahead\n      (File        : File_Type;\n       Item        : out Character;\n       End_Of_Line : out Boolean)\n    with\n-     Pre    => Is_Open (File) and then Mode (File) = In_File,\n-     Global => (Input => File_System);\n+     Pre      => Is_Open (File) and then Mode (File) = In_File,\n+     Global   => (Input => File_System),\n+     Annotate => (GNATprove, Always_Return);\n \n    procedure Look_Ahead\n      (Item        : out Character;\n       End_Of_Line : out Boolean)\n    with\n-     Post   =>\n+     Post     =>\n        Line_Length'Old = Line_Length\n        and Page_Length'Old = Page_Length,\n-     Global => (Input => File_System);\n+     Global   => (Input => File_System),\n+     Annotate => (GNATprove, Always_Return);\n \n    procedure Get_Immediate\n      (File : File_Type;\n       Item : out Character)\n    with\n-     Pre    => Is_Open (File) and then Mode (File) = In_File,\n-     Global => (In_Out => File_System);\n+     Pre      => Is_Open (File) and then Mode (File) = In_File,\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Get_Immediate\n      (Item : out Character)\n    with\n-     Post   =>\n+     Post     =>\n        Line_Length'Old = Line_Length\n        and Page_Length'Old = Page_Length,\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Get_Immediate\n      (File      : File_Type;\n       Item      : out Character;\n       Available : out Boolean)\n    with\n-     Pre    => Is_Open (File) and then Mode (File) = In_File,\n-     Global => (In_Out => File_System);\n+     Pre      => Is_Open (File) and then Mode (File) = In_File,\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Get_Immediate\n      (Item      : out Character;\n       Available : out Boolean)\n    with\n-     Post   =>\n+     Post     =>\n        Line_Length'Old = Line_Length\n        and Page_Length'Old = Page_Length,\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    -------------------------\n    -- String Input-Output --\n    -------------------------\n \n    procedure Get (File : File_Type; Item : out String) with\n-     Pre    => Is_Open (File) and then Mode (File) = In_File,\n-     Global => (In_Out => File_System);\n+     Pre      => Is_Open (File) and then Mode (File) = In_File,\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n    procedure Get (Item : out String) with\n-     Post   =>\n+     Post     =>\n        Line_Length'Old = Line_Length\n        and Page_Length'Old = Page_Length,\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n    procedure Put (File : File_Type; Item : String) with\n-     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n-     Post   =>\n+     Pre      => Is_Open (File) and then Mode (File) /= In_File,\n+     Post     =>\n        Line_Length (File)'Old = Line_Length (File)\n        and Page_Length (File)'Old = Page_Length (File),\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Always_Return);\n    procedure Put (Item : String) with\n-     Post   =>\n+     Post     =>\n        Line_Length'Old = Line_Length\n        and Page_Length'Old = Page_Length,\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Always_Return);\n \n    procedure Get_Line\n      (File : File_Type;\n       Item : out String;\n       Last : out Natural)\n    with\n-     Pre    => Is_Open (File) and then Mode (File) = In_File,\n-     Post   => (if Item'Length > 0 then Last in Item'First - 1 .. Item'Last\n+     Pre      => Is_Open (File) and then Mode (File) = In_File,\n+     Post     => (if Item'Length > 0 then Last in Item'First - 1 .. Item'Last\n                else Last = Item'First - 1),\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Get_Line\n      (Item : out String;\n       Last : out Natural)\n    with\n-     Post   =>\n+     Post     =>\n        Line_Length'Old = Line_Length\n        and Page_Length'Old = Page_Length\n        and (if Item'Length > 0 then Last in Item'First - 1 .. Item'Last\n             else Last = Item'First - 1),\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    function Get_Line (File : File_Type) return String with SPARK_Mode => Off;\n    pragma Ada_05 (Get_Line);\n@@ -498,19 +556,21 @@ is\n      (File : File_Type;\n       Item : String)\n    with\n-     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n-     Post   =>\n+     Pre      => Is_Open (File) and then Mode (File) /= In_File,\n+     Post     =>\n        Line_Length (File)'Old = Line_Length (File)\n        and Page_Length (File)'Old = Page_Length (File),\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Always_Return);\n \n    procedure Put_Line\n      (Item : String)\n    with\n-     Post   =>\n+     Post     =>\n        Line_Length'Old = Line_Length\n        and Page_Length'Old = Page_Length,\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Always_Return);\n \n    ---------------------------------------\n    -- Generic packages for Input-Output --"}, {"sha": "4a2536d3cb1c3504ade967419f39c011fddb7eb4", "filename": "gcc/ada/libgnat/a-tideio.ads", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-tideio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-tideio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-tideio.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -54,17 +54,19 @@ package Ada.Text_IO.Decimal_IO is\n       Item  : out Num;\n       Width : Field := 0)\n    with\n-     Pre    => Is_Open (File) and then Mode (File) = In_File,\n-     Global => (In_Out => File_System);\n+     Pre      => Is_Open (File) and then Mode (File) = In_File,\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Get\n      (Item  : out Num;\n       Width : Field := 0)\n    with\n-     Post   =>\n+     Post     =>\n        Line_Length'Old = Line_Length\n        and Page_Length'Old = Page_Length,\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Put\n      (File : File_Type;\n@@ -73,37 +75,41 @@ package Ada.Text_IO.Decimal_IO is\n       Aft  : Field := Default_Aft;\n       Exp  : Field := Default_Exp)\n    with\n-     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n-     Post   =>\n+     Pre      => Is_Open (File) and then Mode (File) /= In_File,\n+     Post     =>\n        Line_Length (File)'Old = Line_Length (File)\n        and Page_Length (File)'Old = Page_Length (File),\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Put\n      (Item : Num;\n       Fore : Field := Default_Fore;\n       Aft  : Field := Default_Aft;\n       Exp  : Field := Default_Exp)\n    with\n-     Post   =>\n+     Post     =>\n        Line_Length'Old = Line_Length\n        and Page_Length'Old = Page_Length,\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Get\n      (From : String;\n       Item : out Num;\n       Last : out Positive)\n    with\n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Put\n      (To   : out String;\n       Item : Num;\n       Aft  : Field := Default_Aft;\n       Exp  : Field := Default_Exp)\n    with\n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Might_Not_Return);\n \n private\n    pragma Inline (Get);"}, {"sha": "aac90f767ba6804e95fd7c599f8d3cba5153ba1d", "filename": "gcc/ada/libgnat/a-tienio.ads", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-tienio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-tienio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-tienio.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -29,48 +29,54 @@ package Ada.Text_IO.Enumeration_IO is\n    Default_Setting : Type_Set := Upper_Case;\n \n    procedure Get (File : File_Type; Item : out Enum) with\n-     Pre    => Is_Open (File) and then Mode (File) = In_File,\n-     Global => (In_Out => File_System);\n+     Pre      => Is_Open (File) and then Mode (File) = In_File,\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n    procedure Get (Item : out Enum) with\n-     Post   =>\n+     Post     =>\n        Line_Length'Old = Line_Length\n        and Page_Length'Old = Page_Length,\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Put\n      (File  : File_Type;\n       Item  : Enum;\n       Width : Field := Default_Width;\n       Set   : Type_Set := Default_Setting)\n    with\n-     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n-     Post   =>\n+     Pre      => Is_Open (File) and then Mode (File) /= In_File,\n+     Post     =>\n        Line_Length (File)'Old = Line_Length (File)\n        and Page_Length (File)'Old = Page_Length (File),\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Put\n      (Item  : Enum;\n       Width : Field := Default_Width;\n       Set   : Type_Set := Default_Setting)\n    with\n-     Post   =>\n+     Post     =>\n        Line_Length'Old = Line_Length\n        and Page_Length'Old = Page_Length,\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Get\n      (From : String;\n       Item : out Enum;\n       Last : out Positive)\n    with\n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Put\n      (To   : out String;\n       Item : Enum;\n       Set  : Type_Set := Default_Setting)\n    with\n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Might_Not_Return);\n \n end Ada.Text_IO.Enumeration_IO;"}, {"sha": "bbf8e90ffef8caff16c43ffef779f59c48420bc0", "filename": "gcc/ada/libgnat/a-tifiio.ads", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-tifiio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-tifiio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-tifiio.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -34,17 +34,19 @@ package Ada.Text_IO.Fixed_IO with SPARK_Mode => On is\n       Item  : out Num;\n       Width : Field := 0)\n    with\n-     Pre    => Is_Open (File) and then Mode (File) = In_File,\n-     Global => (In_Out => File_System);\n+     Pre      => Is_Open (File) and then Mode (File) = In_File,\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Get\n      (Item  : out Num;\n       Width : Field := 0)\n    with\n-     Post   =>\n+     Post     =>\n        Line_Length'Old = Line_Length\n        and Page_Length'Old = Page_Length,\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Put\n      (File : File_Type;\n@@ -53,37 +55,41 @@ package Ada.Text_IO.Fixed_IO with SPARK_Mode => On is\n       Aft  : Field := Default_Aft;\n       Exp  : Field := Default_Exp)\n    with\n-     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n-     Post   =>\n+     Pre      => Is_Open (File) and then Mode (File) /= In_File,\n+     Post     =>\n        Line_Length (File)'Old = Line_Length (File)\n        and Page_Length (File)'Old = Page_Length (File),\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Put\n      (Item : Num;\n       Fore : Field := Default_Fore;\n       Aft  : Field := Default_Aft;\n       Exp  : Field := Default_Exp)\n    with\n-     Post   =>\n+     Post     =>\n        Line_Length'Old = Line_Length\n        and Page_Length'Old = Page_Length,\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Get\n      (From : String;\n       Item : out Num;\n       Last : out Positive)\n    with\n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Put\n      (To   : out String;\n       Item : Num;\n       Aft  : Field := Default_Aft;\n       Exp  : Field := Default_Exp)\n    with\n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Might_Not_Return);\n \n private\n    pragma Inline (Get);"}, {"sha": "032c6b2f1621e5714957dcb1f870f9bbec484694", "filename": "gcc/ada/libgnat/a-tiflio.ads", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-tiflio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-tiflio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-tiflio.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -54,17 +54,19 @@ package Ada.Text_IO.Float_IO with SPARK_Mode => On is\n       Item  : out Num;\n       Width : Field := 0)\n    with\n-     Pre    => Is_Open (File) and then Mode (File) = In_File,\n-     Global => (In_Out => File_System);\n+     Pre      => Is_Open (File) and then Mode (File) = In_File,\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Get\n      (Item  : out Num;\n       Width : Field := 0)\n    with\n-     Post   =>\n+     Post     =>\n        Line_Length'Old = Line_Length\n        and Page_Length'Old = Page_Length,\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Put\n      (File : File_Type;\n@@ -73,37 +75,41 @@ package Ada.Text_IO.Float_IO with SPARK_Mode => On is\n       Aft  : Field := Default_Aft;\n       Exp  : Field := Default_Exp)\n    with\n-     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n-     Post   =>\n+     Pre      => Is_Open (File) and then Mode (File) /= In_File,\n+     Post     =>\n        Line_Length (File)'Old = Line_Length (File)\n        and Page_Length (File)'Old = Page_Length (File),\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Put\n      (Item : Num;\n       Fore : Field := Default_Fore;\n       Aft  : Field := Default_Aft;\n       Exp  : Field := Default_Exp)\n    with\n-     Post   =>\n+     Post     =>\n        Line_Length'Old = Line_Length\n        and Page_Length'Old = Page_Length,\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Get\n      (From : String;\n       Item : out Num;\n       Last : out Positive)\n    with\n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Put\n      (To   : out String;\n       Item : Num;\n       Aft  : Field := Default_Aft;\n       Exp  : Field := Default_Exp)\n    with\n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Might_Not_Return);\n \n private\n    pragma Inline (Get);"}, {"sha": "491bc2f32d8d8f412c3253303028e68a8888c18c", "filename": "gcc/ada/libgnat/a-tiinio.ads", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-tiinio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-tiinio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-tiinio.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -53,53 +53,59 @@ package Ada.Text_IO.Integer_IO is\n       Item  : out Num;\n       Width : Field := 0)\n    with\n-     Pre    => Is_Open (File) and then Mode (File) = In_File,\n-     Global => (In_Out => File_System);\n+     Pre      => Is_Open (File) and then Mode (File) = In_File,\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Get\n      (Item  : out Num;\n       Width : Field := 0)\n    with\n-     Post   =>\n+     Post     =>\n        Line_Length'Old = Line_Length\n        and Page_Length'Old = Page_Length,\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Put\n      (File  : File_Type;\n       Item  : Num;\n       Width : Field := Default_Width;\n       Base  : Number_Base := Default_Base)\n    with\n-     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n-     Post   =>\n+     Pre      => Is_Open (File) and then Mode (File) /= In_File,\n+     Post     =>\n        Line_Length (File)'Old = Line_Length (File)\n        and Page_Length (File)'Old = Page_Length (File),\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Put\n      (Item  : Num;\n       Width : Field := Default_Width;\n       Base  : Number_Base := Default_Base)\n    with\n-     Post   =>\n+     Post     =>\n        Line_Length'Old = Line_Length\n        and Page_Length'Old = Page_Length,\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Get\n      (From : String;\n       Item : out Num;\n       Last : out Positive)\n    with\n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Put\n      (To   : out String;\n       Item : Num;\n       Base : Number_Base := Default_Base)\n    with\n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Might_Not_Return);\n \n private\n    pragma Inline (Get);"}, {"sha": "67ff7c6ba28401267520ce42567e86981326878e", "filename": "gcc/ada/libgnat/a-timoio.ads", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-timoio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fa-timoio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-timoio.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -53,53 +53,59 @@ package Ada.Text_IO.Modular_IO is\n       Item  : out Num;\n       Width : Field := 0)\n    with\n-     Pre    => Is_Open (File) and then Mode (File) = In_File,\n-     Global => (In_Out => File_System);\n+     Pre      => Is_Open (File) and then Mode (File) = In_File,\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Get\n      (Item  : out Num;\n       Width : Field := 0)\n    with\n-     Post   =>\n+     Post     =>\n        Line_Length'Old = Line_Length\n        and Page_Length'Old = Page_Length,\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Put\n      (File  : File_Type;\n       Item  : Num;\n       Width : Field := Default_Width;\n       Base  : Number_Base := Default_Base)\n    with\n-     Pre    => Is_Open (File) and then Mode (File) /= In_File,\n-     Post   =>\n+     Pre      => Is_Open (File) and then Mode (File) /= In_File,\n+     Post     =>\n        Line_Length (File)'Old = Line_Length (File)\n        and Page_Length (File)'Old = Page_Length (File),\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Put\n      (Item  : Num;\n       Width : Field := Default_Width;\n       Base  : Number_Base := Default_Base)\n    with\n-     Post   =>\n+     Post     =>\n        Line_Length'Old = Line_Length\n        and Page_Length'Old = Page_Length,\n-     Global => (In_Out => File_System);\n+     Global   => (In_Out => File_System),\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Get\n      (From : String;\n       Item : out Num;\n       Last : out Positive)\n    with\n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Might_Not_Return);\n \n    procedure Put\n      (To   : out String;\n       Item : Num;\n       Base : Number_Base := Default_Base)\n    with\n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Might_Not_Return);\n \n private\n    pragma Inline (Get);"}, {"sha": "70139023dc3251f032a55b3bcc8039d3081dd355", "filename": "gcc/ada/libgnat/i-c.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fi-c.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fi-c.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fi-c.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -29,6 +29,8 @@ with System.Parameters;\n package Interfaces.C\n   with SPARK_Mode, Pure\n is\n+   pragma Annotate (GNATprove, Always_Return, C);\n+\n    --  Each of the types declared in Interfaces.C is C-compatible.\n \n    --  The types int, short, long, unsigned, ptrdiff_t, size_t, double,"}, {"sha": "b269869fd4ec52ed0a88f81f4b49cfa340d13f4d", "filename": "gcc/ada/libgnat/interfac.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Finterfac.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Finterfac.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Finterfac.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -38,6 +38,7 @@\n package Interfaces is\n    pragma No_Elaboration_Code_All;\n    pragma Pure;\n+   pragma Annotate (GNATprove, Always_Return, Interfaces);\n \n    --  All identifiers in this unit are implementation defined\n "}, {"sha": "becd18069eb8ebdf7ddde5025798d21ac772fd2d", "filename": "gcc/ada/libgnat/interfac__2020.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Finterfac__2020.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Finterfac__2020.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Finterfac__2020.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -38,6 +38,7 @@\n package Interfaces is\n    pragma No_Elaboration_Code_All;\n    pragma Pure;\n+   pragma Annotate (GNATprove, Always_Return, Interfaces);\n \n    --  All identifiers in this unit are implementation defined\n "}, {"sha": "a928d47ef466aef5aa29ba6b7748424fa18c0f6d", "filename": "gcc/ada/libgnat/s-atacco.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fs-atacco.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fs-atacco.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-atacco.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -55,9 +55,11 @@ package System.Address_To_Access_Conversions is\n    --  of no strict aliasing.\n \n    function To_Pointer (Value : Address)        return Object_Pointer with\n-     Global => null;\n+     Global   => null,\n+     Annotate => (GNATprove, Always_Return);\n    function To_Address (Value : Object_Pointer) return Address with\n-     SPARK_Mode => Off;\n+     SPARK_Mode => Off,\n+     Annotate => (GNATprove, Always_Return);\n \n    pragma Import (Intrinsic, To_Pointer);\n    pragma Import (Intrinsic, To_Address);"}, {"sha": "d0473682f7e86cedb1f9d591eeb22537a23e6d38", "filename": "gcc/ada/libgnat/s-stoele.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fs-stoele.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31eda15463b00bad7c48d973e4e7e8a33006379/gcc%2Fada%2Flibgnat%2Fs-stoele.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-stoele.ads?ref=a31eda15463b00bad7c48d973e4e7e8a33006379", "patch": "@@ -43,6 +43,8 @@ package System.Storage_Elements is\n    --  this unit Pure instead of Preelaborable; see RM 13.7.1(15). In Ada 2005,\n    --  this is Pure in any case (AI-362).\n \n+   pragma Annotate (GNATprove, Always_Return, Storage_Elements);\n+\n    --  We also add the pragma Pure_Function to the operations in this package,\n    --  because otherwise functions with parameters derived from Address are\n    --  treated as non-pure by the back-end (see exp_ch6.adb). This is because"}]}