{"sha": "513686a6a7780225692162d9d5ae31c618c503e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTEzNjg2YTZhNzc4MDIyNTY5MjE2MmQ5ZDVhZTMxYzYxOGM1MDNlMQ==", "commit": {"author": {"name": "Gregor Richards", "email": "gregor.richards@uwaterloo.ca", "date": "2015-04-22T14:16:41Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-04-22T14:16:41Z"}, "message": "config changes for musl libc support\n\nOn behalf of Szabolcs.Nagy@arm.com\n\n2015-04-22  Gregor Richards  <gregor.richards@uwaterloo.ca>\n\n\t* config.gcc (LIBC_MUSL): New tm_defines macro.\n\t* config/linux.h (OPTION_MUSL): Define.\n\t(INCLUDE_DEFAULTS_MUSL_GPP, INCLUDE_DEFAULTS_MUSL_LOCAL,)\n\t(INCLUDE_DEFAULTS_MUSL_PREFIX, INCLUDE_DEFAULTS_MUSL_CROSS,)\n\t(INCLUDE_DEFAULTS_MUSL_TOOL, INCLUDE_DEFAULTS_MUSL_NATIVE): Define.\n\n\t* config/linux.opt (mmusl): New option.\n\t* configure.ac (gcc_cv_libc_provides_ssp): Add *-*-musl*.\n\t(gcc_cv_target_dl_iterate_phdr): Add *-linux-musl*.\n\n\t* configure: Regenerate.\n\nFrom-SVN: r222326", "tree": {"sha": "7dc2b7d7f0eaecfa789b2f5b8f781e385c6dca7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7dc2b7d7f0eaecfa789b2f5b8f781e385c6dca7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/513686a6a7780225692162d9d5ae31c618c503e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/513686a6a7780225692162d9d5ae31c618c503e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/513686a6a7780225692162d9d5ae31c618c503e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/513686a6a7780225692162d9d5ae31c618c503e1/comments", "author": null, "committer": null, "parents": [{"sha": "96ce40cbce449cb5f434425d148a9bcf02270c96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96ce40cbce449cb5f434425d148a9bcf02270c96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96ce40cbce449cb5f434425d148a9bcf02270c96"}], "stats": {"total": 142, "additions": 127, "deletions": 15}, "files": [{"sha": "de916806285e40314b60489dcaaaa7eb826e4adc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/513686a6a7780225692162d9d5ae31c618c503e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/513686a6a7780225692162d9d5ae31c618c503e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=513686a6a7780225692162d9d5ae31c618c503e1", "patch": "@@ -1,3 +1,17 @@\n+2015-04-22  Gregor Richards  <gregor.richards@uwaterloo.ca>\n+\n+\t* config.gcc (LIBC_MUSL): New tm_defines macro.\n+\t* config/linux.h (OPTION_MUSL): Define.\n+\t(INCLUDE_DEFAULTS_MUSL_GPP, INCLUDE_DEFAULTS_MUSL_LOCAL,)\n+\t(INCLUDE_DEFAULTS_MUSL_PREFIX, INCLUDE_DEFAULTS_MUSL_CROSS,)\n+\t(INCLUDE_DEFAULTS_MUSL_TOOL, INCLUDE_DEFAULTS_MUSL_NATIVE): Define.\n+\n+\t* config/linux.opt (mmusl): New option.\n+\t* configure.ac (gcc_cv_libc_provides_ssp): Add *-*-musl*.\n+\t(gcc_cv_target_dl_iterate_phdr): Add *-linux-musl*.\n+\n+\t* configure: Regenerate.\n+\n 2015-04-22  Yury Gribov  <y.gribov@samsung.com>\n \n \t* doc/invoke.texi (-fsanitize-sections): Update description."}, {"sha": "0176ca2386dfa40e47b0516ed24308f3aa35205f", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/513686a6a7780225692162d9d5ae31c618c503e1/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/513686a6a7780225692162d9d5ae31c618c503e1/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=513686a6a7780225692162d9d5ae31c618c503e1", "patch": "@@ -575,7 +575,7 @@ case ${target} in\n esac\n \n # Common C libraries.\n-tm_defines=\"$tm_defines LIBC_GLIBC=1 LIBC_UCLIBC=2 LIBC_BIONIC=3\"\n+tm_defines=\"$tm_defines LIBC_GLIBC=1 LIBC_UCLIBC=2 LIBC_BIONIC=3 LIBC_MUSL=4\"\n \n # 32-bit x86 processors supported by --with-arch=.  Each processor\n # MUST be separated by exactly one space.\n@@ -725,6 +725,9 @@ case ${target} in\n     *-*-*uclibc*)\n       tm_defines=\"$tm_defines DEFAULT_LIBC=LIBC_UCLIBC\"\n       ;;\n+    *-*-*musl*)\n+      tm_defines=\"$tm_defines DEFAULT_LIBC=LIBC_MUSL\"\n+      ;;\n     *)\n       tm_defines=\"$tm_defines DEFAULT_LIBC=LIBC_GLIBC\"\n       ;;"}, {"sha": "cda87bfe2b8497a6b5fb9400d551329296243d81", "filename": "gcc/config/linux.h", "status": "modified", "additions": 91, "deletions": 14, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/513686a6a7780225692162d9d5ae31c618c503e1/gcc%2Fconfig%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/513686a6a7780225692162d9d5ae31c618c503e1/gcc%2Fconfig%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux.h?ref=513686a6a7780225692162d9d5ae31c618c503e1", "patch": "@@ -32,10 +32,12 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define OPTION_GLIBC  (DEFAULT_LIBC == LIBC_GLIBC)\n #define OPTION_UCLIBC (DEFAULT_LIBC == LIBC_UCLIBC)\n #define OPTION_BIONIC (DEFAULT_LIBC == LIBC_BIONIC)\n+#define OPTION_MUSL   (DEFAULT_LIBC == LIBC_MUSL)\n #else\n #define OPTION_GLIBC  (linux_libc == LIBC_GLIBC)\n #define OPTION_UCLIBC (linux_libc == LIBC_UCLIBC)\n #define OPTION_BIONIC (linux_libc == LIBC_BIONIC)\n+#define OPTION_MUSL   (linux_libc == LIBC_MUSL)\n #endif\n \n #define GNU_USER_TARGET_OS_CPP_BUILTINS()\t\t\t\\\n@@ -50,21 +52,25 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n     } while (0)\n \n /* Determine which dynamic linker to use depending on whether GLIBC or\n-   uClibc or Bionic is the default C library and whether\n-   -muclibc or -mglibc or -mbionic has been passed to change the default.  */\n+   uClibc or Bionic or musl is the default C library and whether\n+   -muclibc or -mglibc or -mbionic or -mmusl has been passed to change\n+   the default.  */\n \n-#define CHOOSE_DYNAMIC_LINKER1(LIBC1, LIBC2, LIBC3, LD1, LD2, LD3)\t\\\n-  \"%{\" LIBC2 \":\" LD2 \";:%{\" LIBC3 \":\" LD3 \";:\" LD1 \"}}\"\n+#define CHOOSE_DYNAMIC_LINKER1(LIBC1, LIBC2, LIBC3, LIBC4, LD1, LD2, LD3, LD4)\t\\\n+  \"%{\" LIBC2 \":\" LD2 \";:%{\" LIBC3 \":\" LD3 \";:%{\" LIBC4 \":\" LD4 \";:\" LD1 \"}}}\"\n \n #if DEFAULT_LIBC == LIBC_GLIBC\n-#define CHOOSE_DYNAMIC_LINKER(G, U, B) \\\n-  CHOOSE_DYNAMIC_LINKER1 (\"mglibc\", \"muclibc\", \"mbionic\", G, U, B)\n+#define CHOOSE_DYNAMIC_LINKER(G, U, B, M) \\\n+  CHOOSE_DYNAMIC_LINKER1 (\"mglibc\", \"muclibc\", \"mbionic\", \"mmusl\", G, U, B, M)\n #elif DEFAULT_LIBC == LIBC_UCLIBC\n-#define CHOOSE_DYNAMIC_LINKER(G, U, B) \\\n-  CHOOSE_DYNAMIC_LINKER1 (\"muclibc\", \"mglibc\", \"mbionic\", U, G, B)\n+#define CHOOSE_DYNAMIC_LINKER(G, U, B, M) \\\n+  CHOOSE_DYNAMIC_LINKER1 (\"muclibc\", \"mglibc\", \"mbionic\", \"mmusl\", U, G, B, M)\n #elif DEFAULT_LIBC == LIBC_BIONIC\n-#define CHOOSE_DYNAMIC_LINKER(G, U, B) \\\n-  CHOOSE_DYNAMIC_LINKER1 (\"mbionic\", \"mglibc\", \"muclibc\", B, G, U)\n+#define CHOOSE_DYNAMIC_LINKER(G, U, B, M) \\\n+  CHOOSE_DYNAMIC_LINKER1 (\"mbionic\", \"mglibc\", \"muclibc\", \"mmusl\", B, G, U, M)\n+#elif DEFAULT_LIBC == LIBC_MUSL\n+#define CHOOSE_DYNAMIC_LINKER(G, U, B, M) \\\n+  CHOOSE_DYNAMIC_LINKER1 (\"mmusl\", \"mglibc\", \"muclibc\", \"mbionic\", M, G, U, B)\n #else\n #error \"Unsupported DEFAULT_LIBC\"\n #endif /* DEFAULT_LIBC */\n@@ -84,21 +90,92 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #define GNU_USER_DYNAMIC_LINKER\t\t\t\t\t\t\\\n   CHOOSE_DYNAMIC_LINKER (GLIBC_DYNAMIC_LINKER, UCLIBC_DYNAMIC_LINKER,\t\\\n-\t\t\t BIONIC_DYNAMIC_LINKER)\n+\t\t\t BIONIC_DYNAMIC_LINKER, MUSL_DYNAMIC_LINKER)\n #define GNU_USER_DYNAMIC_LINKER32\t\t\t\t\t\\\n   CHOOSE_DYNAMIC_LINKER (GLIBC_DYNAMIC_LINKER32, UCLIBC_DYNAMIC_LINKER32, \\\n-\t\t\t BIONIC_DYNAMIC_LINKER32)\n+\t\t\t BIONIC_DYNAMIC_LINKER32, MUSL_DYNAMIC_LINKER32)\n #define GNU_USER_DYNAMIC_LINKER64\t\t\t\t\t\\\n   CHOOSE_DYNAMIC_LINKER (GLIBC_DYNAMIC_LINKER64, UCLIBC_DYNAMIC_LINKER64, \\\n-\t\t\t BIONIC_DYNAMIC_LINKER64)\n+\t\t\t BIONIC_DYNAMIC_LINKER64, MUSL_DYNAMIC_LINKER64)\n #define GNU_USER_DYNAMIC_LINKERX32\t\t\t\t\t\\\n   CHOOSE_DYNAMIC_LINKER (GLIBC_DYNAMIC_LINKERX32, UCLIBC_DYNAMIC_LINKERX32, \\\n-\t\t\t BIONIC_DYNAMIC_LINKERX32)\n+\t\t\t BIONIC_DYNAMIC_LINKERX32, MUSL_DYNAMIC_LINKERX32)\n \n /* Whether we have Bionic libc runtime */\n #undef TARGET_HAS_BIONIC\n #define TARGET_HAS_BIONIC (OPTION_BIONIC)\n \n+/* musl avoids problematic includes by rearranging the include directories.\n+ * Unfortunately, this is mostly duplicated from cppdefault.c */\n+#if DEFAULT_LIBC == LIBC_MUSL\n+#define INCLUDE_DEFAULTS_MUSL_GPP\t\t\t\\\n+    { GPLUSPLUS_INCLUDE_DIR, \"G++\", 1, 1,\t\t\\\n+      GPLUSPLUS_INCLUDE_DIR_ADD_SYSROOT, 0 },\t\t\\\n+    { GPLUSPLUS_TOOL_INCLUDE_DIR, \"G++\", 1, 1,\t\t\\\n+      GPLUSPLUS_INCLUDE_DIR_ADD_SYSROOT, 1 },\t\t\\\n+    { GPLUSPLUS_BACKWARD_INCLUDE_DIR, \"G++\", 1, 1,\t\\\n+      GPLUSPLUS_INCLUDE_DIR_ADD_SYSROOT, 0 },\n+\n+#ifdef LOCAL_INCLUDE_DIR\n+#define INCLUDE_DEFAULTS_MUSL_LOCAL\t\t\t\\\n+    { LOCAL_INCLUDE_DIR, 0, 0, 1, 1, 2 },\t\t\\\n+    { LOCAL_INCLUDE_DIR, 0, 0, 1, 1, 0 },\n+#else\n+#define INCLUDE_DEFAULTS_MUSL_LOCAL\n+#endif\n+\n+#ifdef PREFIX_INCLUDE_DIR\n+#define INCLUDE_DEFAULTS_MUSL_PREFIX\t\t\t\\\n+    { PREFIX_INCLUDE_DIR, 0, 0, 1, 0, 0},\n+#else\n+#define INCLUDE_DEFAULTS_MUSL_PREFIX\n+#endif\n+\n+#ifdef CROSS_INCLUDE_DIR\n+#define INCLUDE_DEFAULTS_MUSL_CROSS\t\t\t\\\n+    { CROSS_INCLUDE_DIR, \"GCC\", 0, 0, 0, 0},\n+#else\n+#define INCLUDE_DEFAULTS_MUSL_CROSS\n+#endif\n+\n+#ifdef TOOL_INCLUDE_DIR\n+#define INCLUDE_DEFAULTS_MUSL_TOOL\t\t\t\\\n+    { TOOL_INCLUDE_DIR, \"BINUTILS\", 0, 1, 0, 0},\n+#else\n+#define INCLUDE_DEFAULTS_MUSL_TOOL\n+#endif\n+\n+#ifdef NATIVE_SYSTEM_HEADER_DIR\n+#define INCLUDE_DEFAULTS_MUSL_NATIVE\t\t\t\\\n+    { NATIVE_SYSTEM_HEADER_DIR, 0, 0, 0, 1, 2 },\t\\\n+    { NATIVE_SYSTEM_HEADER_DIR, 0, 0, 0, 1, 0 },\n+#else\n+#define INCLUDE_DEFAULTS_MUSL_NATIVE\n+#endif\n+\n+#if defined (CROSS_DIRECTORY_STRUCTURE) && !defined (TARGET_SYSTEM_ROOT)\n+# undef INCLUDE_DEFAULTS_MUSL_LOCAL\n+# define INCLUDE_DEFAULTS_MUSL_LOCAL\n+# undef INCLUDE_DEFAULTS_MUSL_NATIVE\n+# define INCLUDE_DEFAULTS_MUSL_NATIVE\n+#else\n+# undef INCLUDE_DEFAULTS_MUSL_CROSS\n+# define INCLUDE_DEFAULTS_MUSL_CROSS\n+#endif\n+\n+#undef INCLUDE_DEFAULTS\n+#define INCLUDE_DEFAULTS\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    INCLUDE_DEFAULTS_MUSL_GPP\t\t\t\t\\\n+    INCLUDE_DEFAULTS_MUSL_PREFIX\t\t\t\\\n+    INCLUDE_DEFAULTS_MUSL_CROSS\t\t\t\t\\\n+    INCLUDE_DEFAULTS_MUSL_TOOL\t\t\t\t\\\n+    INCLUDE_DEFAULTS_MUSL_NATIVE\t\t\t\\\n+    { GCC_INCLUDE_DIR, \"GCC\", 0, 1, 0, 0 },\t\t\\\n+    { 0, 0, 0, 0, 0, 0 }\t\t\t\t\\\n+  }\n+#endif\n+\n #if (DEFAULT_LIBC == LIBC_UCLIBC) && defined (SINGLE_LIBC) /* uClinux */\n /* This is a *uclinux* target.  We don't define below macros to normal linux\n    versions, because doing so would require *uclinux* targets to include"}, {"sha": "9334f747332972745ba9f79dad0983e9093caae6", "filename": "gcc/config/linux.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/513686a6a7780225692162d9d5ae31c618c503e1/gcc%2Fconfig%2Flinux.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/513686a6a7780225692162d9d5ae31c618c503e1/gcc%2Fconfig%2Flinux.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux.opt?ref=513686a6a7780225692162d9d5ae31c618c503e1", "patch": "@@ -30,3 +30,7 @@ Use GNU C library\n muclibc\n Target Report RejectNegative Var(linux_libc,LIBC_UCLIBC) Negative(mbionic)\n Use uClibc C library\n+\n+mmusl\n+Target Report RejectNegative Var(linux_libc,LIBC_MUSL) Negative(mglibc)\n+Use musl C library"}, {"sha": "5345f695404d1c5ceeb4d67c806e647695df72f2", "filename": "gcc/configure", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/513686a6a7780225692162d9d5ae31c618c503e1/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/513686a6a7780225692162d9d5ae31c618c503e1/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=513686a6a7780225692162d9d5ae31c618c503e1", "patch": "@@ -27678,6 +27678,9 @@ if test \"${gcc_cv_libc_provides_ssp+set}\" = set; then :\n else\n   gcc_cv_libc_provides_ssp=no\n     case \"$target\" in\n+       *-*-musl*)\n+\t # All versions of musl provide stack protector\n+\t gcc_cv_libc_provides_ssp=yes;;\n        *-*-linux* | *-*-kfreebsd*-gnu | *-*-knetbsd*-gnu)\n       # glibc 2.4 and later provides __stack_chk_fail and\n       # either __stack_chk_guard, or TLS access to stack guard canary.\n@@ -27710,6 +27713,7 @@ fi\n \t # <http://gcc.gnu.org/ml/gcc/2008-10/msg00130.html>) and for now\n \t # simply assert that glibc does provide this, which is true for all\n \t # realistically usable GNU/Hurd configurations.\n+\t # All supported versions of musl provide it as well\n \t gcc_cv_libc_provides_ssp=yes;;\n        *-*-darwin* | *-*-freebsd*)\n \t ac_fn_c_check_func \"$LINENO\" \"__stack_chk_fail\" \"ac_cv_func___stack_chk_fail\"\n@@ -27806,6 +27810,9 @@ case \"$target\" in\n       gcc_cv_target_dl_iterate_phdr=no\n     fi\n     ;;\n+  *-linux-musl*)\n+    gcc_cv_target_dl_iterate_phdr=yes\n+    ;;\n esac\n \n if test x$gcc_cv_target_dl_iterate_phdr = xyes; then"}, {"sha": "27ecdcda6c0bcd6043a00d6ceff03afbdec0da46", "filename": "gcc/configure.ac", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/513686a6a7780225692162d9d5ae31c618c503e1/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/513686a6a7780225692162d9d5ae31c618c503e1/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=513686a6a7780225692162d9d5ae31c618c503e1", "patch": "@@ -5199,6 +5199,9 @@ AC_CACHE_CHECK(__stack_chk_fail in target C library,\n       gcc_cv_libc_provides_ssp,\n       [gcc_cv_libc_provides_ssp=no\n     case \"$target\" in\n+       *-*-musl*)\n+\t # All versions of musl provide stack protector\n+\t gcc_cv_libc_provides_ssp=yes;;\n        *-*-linux* | *-*-kfreebsd*-gnu | *-*-knetbsd*-gnu)\n       # glibc 2.4 and later provides __stack_chk_fail and\n       # either __stack_chk_guard, or TLS access to stack guard canary.\n@@ -5225,6 +5228,7 @@ AC_CACHE_CHECK(__stack_chk_fail in target C library,\n \t # <http://gcc.gnu.org/ml/gcc/2008-10/msg00130.html>) and for now\n \t # simply assert that glibc does provide this, which is true for all\n \t # realistically usable GNU/Hurd configurations.\n+\t # All supported versions of musl provide it as well\n \t gcc_cv_libc_provides_ssp=yes;;\n        *-*-darwin* | *-*-freebsd*)\n \t AC_CHECK_FUNC(__stack_chk_fail,[gcc_cv_libc_provides_ssp=yes],\n@@ -5298,6 +5302,9 @@ case \"$target\" in\n       gcc_cv_target_dl_iterate_phdr=no\n     fi\n     ;;\n+  *-linux-musl*)\n+    gcc_cv_target_dl_iterate_phdr=yes\n+    ;;\n esac\n GCC_TARGET_TEMPLATE([TARGET_DL_ITERATE_PHDR])\n if test x$gcc_cv_target_dl_iterate_phdr = xyes; then"}]}