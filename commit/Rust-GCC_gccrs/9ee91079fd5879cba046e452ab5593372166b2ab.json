{"sha": "9ee91079fd5879cba046e452ab5593372166b2ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVlOTEwNzlmZDU4NzljYmEwNDZlNDUyYWI1NTkzMzcyMTY2YjJhYg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-02-15T17:11:31Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-03-05T16:56:19Z"}, "message": "coroutines : Do not accept throwing final await expressions [PR95616].\n\nFrom the PR:\n\nThe wording of [dcl.fct.def.coroutine]/15 states:\n * The expression co_await promise.final_suspend() shall not be\n   potentially-throwing ([except.spec]).\n\nSee http://eel.is/c++draft/dcl.fct.def.coroutine#15\nand http://eel.is/c++draft/except.spec#6\n\nie. all of the following must be declared noexcept (if they form part of the await-expression):\n- promise_type::final_suspend()\n- finalSuspendObj.operator co_await()\n- finalSuspendAwaiter.await_ready()\n- finalSuspendAwaiter.await_suspend()\n- finalSuspendAwaiter.await_resume()\n- finalSuspedObj destructor\n- finalSuspendAwaiter destructor\n\nThis implements the checks for these cases and rejects such code with\na diagnostic if exceptions are enabled.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95616\n\t* coroutines.cc (coro_diagnose_throwing_fn): New helper.\n\t(coro_diagnose_throwing_final_aw_expr): New helper.\n\t(build_co_await): Diagnose throwing final await expression\n\tcomponents.\n\t(build_init_or_final_await): Diagnose a throwing promise\n\tfinal_suspend() call.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95616\n\t* g++.dg/coroutines/pr95616-0-no-exceptions.C: New test.\n\t* g++.dg/coroutines/pr95616-0.C: New test.\n\t* g++.dg/coroutines/pr95616-1-no-exceptions.C: New test.\n\t* g++.dg/coroutines/pr95616-1.C: New test.\n\t* g++.dg/coroutines/pr95616-2.C: New test.\n\t* g++.dg/coroutines/pr95616-3-no-exceptions.C: New test.\n\t* g++.dg/coroutines/pr95616-3.C: New test.\n\t* g++.dg/coroutines/pr95616-4.C: New test.\n\t* g++.dg/coroutines/pr95616-5.C: New test.\n\t* g++.dg/coroutines/pr95616-6.C: New test.", "tree": {"sha": "85fa95e658d91ee2e9f40e1953bceabf37d55039", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85fa95e658d91ee2e9f40e1953bceabf37d55039"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ee91079fd5879cba046e452ab5593372166b2ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ee91079fd5879cba046e452ab5593372166b2ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ee91079fd5879cba046e452ab5593372166b2ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ee91079fd5879cba046e452ab5593372166b2ab/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe55086547c9360b530e040a6673dae10ac77847", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe55086547c9360b530e040a6673dae10ac77847", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe55086547c9360b530e040a6673dae10ac77847"}], "stats": {"total": 593, "additions": 593, "deletions": 0}, "files": [{"sha": "ef50a5f5fa30872727f1e0966d0f6dd6a4e28b62", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee91079fd5879cba046e452ab5593372166b2ab/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee91079fd5879cba046e452ab5593372166b2ab/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=9ee91079fd5879cba046e452ab5593372166b2ab", "patch": "@@ -793,6 +793,43 @@ get_awaitable_var (suspend_point_kind suspend_kind, tree v_type)\n   return ret;\n }\n \n+/* Helpers to diagnose missing noexcept on final await expressions.  */\n+\n+static bool\n+coro_diagnose_throwing_fn (tree fndecl)\n+{\n+  if (!TYPE_NOTHROW_P (TREE_TYPE (fndecl)))\n+    {\n+      location_t f_loc = cp_expr_loc_or_loc (fndecl,\n+\t\t\t\t\t     DECL_SOURCE_LOCATION (fndecl));\n+      error_at (f_loc, \"the expression %qE is required to be non-throwing\",\n+\t\tfndecl);\n+      inform (f_loc, \"must be declared with %<noexcept(true)%>\");\n+      return true;\n+    }\n+  return false;\n+}\n+\n+static bool\n+coro_diagnose_throwing_final_aw_expr (tree expr)\n+{\n+  tree t = TARGET_EXPR_INITIAL (expr);\n+  tree fn = NULL_TREE;\n+  if (TREE_CODE (t) == CALL_EXPR)\n+    fn = CALL_EXPR_FN(t);\n+  else if (TREE_CODE (t) == AGGR_INIT_EXPR)\n+    fn = AGGR_INIT_EXPR_FN (t);\n+  else if (TREE_CODE (t) == CONSTRUCTOR)\n+    return false;\n+  else\n+    {\n+      gcc_checking_assert (0 && \"unhandled expression type\");\n+      return false;\n+    }\n+  fn = TREE_OPERAND (fn, 0);\n+  return coro_diagnose_throwing_fn (fn);\n+}\n+\n /*  This performs [expr.await] bullet 3.3 and validates the interface obtained.\n     It is also used to build the initial and final suspend points.\n \n@@ -815,6 +852,28 @@ build_co_await (location_t loc, tree a, suspend_point_kind suspend_kind)\n       /* If no viable functions are found, o is a.  */\n       if (!o || o == error_mark_node)\n \to = a;\n+      else if (flag_exceptions && suspend_kind == FINAL_SUSPEND_POINT)\n+\t{\n+\t  /* We found an overload for co_await(), diagnose throwing cases.  */\n+\t  if (TREE_CODE (o) == TARGET_EXPR\n+\t      && coro_diagnose_throwing_final_aw_expr (o))\n+\t    return error_mark_node;\n+\n+\t  /* We now know that the final suspend object is distinct from the\n+\t     final awaiter, so check for a non-throwing DTOR where needed.  */\n+\t  tree a_type = TREE_TYPE (a);\n+\t  if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (a_type))\n+\t    {\n+\t      tree dummy\n+\t\t= build_special_member_call (a, complete_dtor_identifier,\n+\t\t\t\t\t     NULL, a_type, LOOKUP_NORMAL,\n+\t\t\t\t\t     tf_none);\n+\t      dummy = dummy ? TREE_OPERAND (CALL_EXPR_FN (dummy), 0)\n+\t\t\t    : NULL_TREE;\n+\t      if (dummy && coro_diagnose_throwing_fn (dummy))\n+\t\treturn error_mark_node;\n+\t    }\n+\t}\n     }\n   else\n     o = a; /* This is most likely about to fail anyway.  */\n@@ -958,6 +1017,27 @@ build_co_await (location_t loc, tree a, suspend_point_kind suspend_kind)\n   if (!awrs_func || !awrs_call || awrs_call == error_mark_node)\n     return error_mark_node;\n \n+  if (flag_exceptions && suspend_kind == FINAL_SUSPEND_POINT)\n+    {\n+      if (coro_diagnose_throwing_fn (awrd_func))\n+\treturn error_mark_node;\n+      if (coro_diagnose_throwing_fn (awsp_func))\n+\treturn error_mark_node;\n+      if (coro_diagnose_throwing_fn (awrs_func))\n+\treturn error_mark_node;\n+      if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (o_type))\n+\t{\n+\t  tree dummy\n+\t    = build_special_member_call (e_proxy, complete_dtor_identifier,\n+\t\t\t\t\t NULL, o_type, LOOKUP_NORMAL,\n+\t\t\t\t\t tf_none);\n+\t  dummy = dummy ? TREE_OPERAND (CALL_EXPR_FN (dummy), 0)\n+\t\t\t: NULL_TREE;\n+\t  if (dummy && coro_diagnose_throwing_fn (dummy))\n+\t    return error_mark_node;\n+\t}\n+    }\n+\n   /* We now have three call expressions, in terms of the promise, handle and\n      'e' proxies.  Save them in the await expression for later expansion.  */\n \n@@ -2538,6 +2618,11 @@ build_init_or_final_await (location_t loc, bool is_final)\n     = coro_build_promise_expression (current_function_decl, NULL, suspend_alt,\n \t\t\t\t     loc, NULL, /*musthave=*/true);\n \n+  /* Check for noexcept on the final_suspend call.  */\n+  if (flag_exceptions && is_final && setup_call != error_mark_node\n+      && coro_diagnose_throwing_final_aw_expr (setup_call))\n+    return error_mark_node;\n+\n   /* So build the co_await for this */\n   /* For initial/final suspends the call is \"a\" per [expr.await] 3.2.  */\n   return build_co_await (loc, setup_call, (is_final ? FINAL_SUSPEND_POINT"}, {"sha": "7ce811dc5697d8059204554964c311569f69a8bf", "filename": "gcc/testsuite/g++.dg/coroutines/pr95616-0-no-exceptions.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee91079fd5879cba046e452ab5593372166b2ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-0-no-exceptions.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee91079fd5879cba046e452ab5593372166b2ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-0-no-exceptions.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-0-no-exceptions.C?ref=9ee91079fd5879cba046e452ab5593372166b2ab", "patch": "@@ -0,0 +1,50 @@\n+//  { dg-additional-options \"-fsyntax-only -fno-exceptions\" }\n+\n+#if __has_include(<coroutine>)\n+#include <coroutine>\n+#else\n+#include <experimental/coroutine>\n+namespace std {\n+  using namespace std::experimental;\n+}\n+#endif\n+\n+class promise;\n+\n+struct finalSuspendAwaiter {\n+  int x;\n+  finalSuspendAwaiter () : x(0) { }\n+  finalSuspendAwaiter (int _x) : x(_x) { }\n+  ~finalSuspendAwaiter() noexcept(true) { }\n+  bool await_ready() const noexcept(true) { return false; }\n+  void await_suspend(std::coroutine_handle<>) const noexcept(true) { }\n+  int await_resume() const noexcept(true) { return x; }\n+};\n+\n+struct finalSuspendObj {\n+  int x;\n+  finalSuspendObj () : x(0) { }\n+  finalSuspendObj (int _x) : x(_x) { }\n+  ~finalSuspendObj () noexcept(true) {} \n+\n+  finalSuspendAwaiter operator co_await() const & noexcept(true) { \n+    return {x};\n+  }\n+};\n+\n+struct task {\n+  struct promise_type {\n+  task get_return_object() noexcept { return {}; }\n+  std::suspend_never initial_suspend() noexcept { return {}; }\n+  \n+  finalSuspendObj final_suspend() { return {3}; } // NOTE: not declared noexcept\n+\n+  void return_void() noexcept {}\n+  void unhandled_exception() noexcept {}\n+  };\n+};\n+\n+// OK when exceptions are disabled\n+task f() {  \n+  co_return;\n+}"}, {"sha": "e500b6ea636f729f3869bdbf679941661b4f64e8", "filename": "gcc/testsuite/g++.dg/coroutines/pr95616-0.C", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee91079fd5879cba046e452ab5593372166b2ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee91079fd5879cba046e452ab5593372166b2ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-0.C?ref=9ee91079fd5879cba046e452ab5593372166b2ab", "patch": "@@ -0,0 +1,51 @@\n+//  { dg-additional-options \"-fsyntax-only\" }\n+\n+#if __has_include(<coroutine>)\n+#include <coroutine>\n+#else\n+#include <experimental/coroutine>\n+namespace std {\n+  using namespace std::experimental;\n+}\n+#endif\n+\n+class promise;\n+\n+struct finalSuspendAwaiter {\n+  int x;\n+  finalSuspendAwaiter () : x(0) { }\n+  finalSuspendAwaiter (int _x) : x(_x) { }\n+  ~finalSuspendAwaiter() noexcept(true) { }\n+  bool await_ready() const noexcept(true) { return false; }\n+  void await_suspend(std::coroutine_handle<>) const noexcept(true) { }\n+  int await_resume() const noexcept(true) { return x; }\n+};\n+\n+struct finalSuspendObj {\n+  int x;\n+  finalSuspendObj () : x(0) { }\n+  finalSuspendObj (int _x) : x(_x) { }\n+  ~finalSuspendObj () noexcept(true) {} \n+\n+  finalSuspendAwaiter operator co_await() const & noexcept(true) { \n+    return {x};\n+  }\n+};\n+\n+struct task {\n+  struct promise_type {\n+  task get_return_object() noexcept { return {}; }\n+  std::suspend_never initial_suspend() noexcept { return {}; }\n+  \n+  finalSuspendObj final_suspend() { return {3}; } // NOTE: not declared noexcept\n+  // { dg-error {the expression 'task::promise_type::final_suspend' is required to be non-throwing} \"\" { target *-*-* } .-1 }\n+\n+  void return_void() noexcept {}\n+  void unhandled_exception() noexcept {}\n+  };\n+};\n+\n+// This should be ill-formed since final_suspend() is potentially throwing.\n+task f() {  \n+  co_return;\n+}"}, {"sha": "48981e6e51d74581a0f3872c20863e61970f695c", "filename": "gcc/testsuite/g++.dg/coroutines/pr95616-1-no-exceptions.C", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee91079fd5879cba046e452ab5593372166b2ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-1-no-exceptions.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee91079fd5879cba046e452ab5593372166b2ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-1-no-exceptions.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-1-no-exceptions.C?ref=9ee91079fd5879cba046e452ab5593372166b2ab", "patch": "@@ -0,0 +1,51 @@\n+//  { dg-additional-options \"-fsyntax-only -fno-exceptions\" }\n+\n+#if __has_include(<coroutine>)\n+#include <coroutine>\n+#else\n+#include <experimental/coroutine>\n+namespace std {\n+  using namespace std::experimental;\n+}\n+#endif\n+\n+class promise;\n+\n+struct finalSuspendAwaiter {\n+  int x;\n+  finalSuspendAwaiter () : x(0) { }\n+  finalSuspendAwaiter (int _x) : x(_x) { }\n+  ~finalSuspendAwaiter() noexcept(true) { }\n+  bool await_ready() const noexcept(true) { return false; }\n+  void await_suspend(std::coroutine_handle<>) const noexcept(true) { }\n+  int await_resume() const noexcept(true) { return x; }\n+};\n+\n+struct finalSuspendObj {\n+  int x;\n+  finalSuspendObj () : x(0) { }\n+  finalSuspendObj (int _x) : x(_x) { }\n+  ~finalSuspendObj () noexcept(true) {} \n+\n+  finalSuspendAwaiter operator co_await() const & noexcept(false) // NOTE: not declared noexcept\n+   { \n+    return {x};\n+  }\n+};\n+\n+struct task {\n+  struct promise_type {\n+  task get_return_object() noexcept { return {}; }\n+  std::suspend_never initial_suspend() noexcept { return {}; }\n+  \n+  finalSuspendObj final_suspend() noexcept { return {3}; }\n+\n+  void return_void() noexcept {}\n+  void unhandled_exception() noexcept {}\n+  };\n+};\n+\n+// OK when exceptions are disabled.\n+task f() {  \n+  co_return;\n+}"}, {"sha": "c3989804e6b8dc0753a276cbc03e07a3e5a6c19d", "filename": "gcc/testsuite/g++.dg/coroutines/pr95616-1.C", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee91079fd5879cba046e452ab5593372166b2ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee91079fd5879cba046e452ab5593372166b2ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-1.C?ref=9ee91079fd5879cba046e452ab5593372166b2ab", "patch": "@@ -0,0 +1,51 @@\n+//  { dg-additional-options \"-fsyntax-only\" }\n+\n+#if __has_include(<coroutine>)\n+#include <coroutine>\n+#else\n+#include <experimental/coroutine>\n+namespace std {\n+  using namespace std::experimental;\n+}\n+#endif\n+\n+class promise;\n+\n+struct finalSuspendAwaiter {\n+  int x;\n+  finalSuspendAwaiter () : x(0) { }\n+  finalSuspendAwaiter (int _x) : x(_x) { }\n+  ~finalSuspendAwaiter() noexcept(true) { }\n+  bool await_ready() const noexcept(true) { return false; }\n+  void await_suspend(std::coroutine_handle<>) const noexcept(true) { }\n+  int await_resume() const noexcept(true) { return x; }\n+};\n+\n+struct finalSuspendObj {\n+  int x;\n+  finalSuspendObj () : x(0) { }\n+  finalSuspendObj (int _x) : x(_x) { }\n+  ~finalSuspendObj () noexcept(true) {} \n+\n+  finalSuspendAwaiter operator co_await() const & noexcept(false) { \n+  // { dg-error {the expression 'finalSuspendObj::operator co_await' is required to be non-throwing} \"\" { target *-*-* } .-1 }\n+    return {x};\n+  }\n+};\n+\n+struct task {\n+  struct promise_type {\n+  task get_return_object() noexcept { return {}; }\n+  std::suspend_never initial_suspend() noexcept { return {}; }\n+  \n+  finalSuspendObj final_suspend() noexcept { return {3}; }\n+\n+  void return_void() noexcept {}\n+  void unhandled_exception() noexcept {}\n+  };\n+};\n+\n+// This should be ill-formed since final_suspend() is potentially throwing.\n+task f() {  \n+  co_return;\n+}"}, {"sha": "6ad251986ec0695dc9c09bb51f09daf0a87edd4c", "filename": "gcc/testsuite/g++.dg/coroutines/pr95616-2.C", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee91079fd5879cba046e452ab5593372166b2ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee91079fd5879cba046e452ab5593372166b2ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-2.C?ref=9ee91079fd5879cba046e452ab5593372166b2ab", "patch": "@@ -0,0 +1,51 @@\n+//  { dg-additional-options \"-fsyntax-only\" }\n+\n+#if __has_include(<coroutine>)\n+#include <coroutine>\n+#else\n+#include <experimental/coroutine>\n+namespace std {\n+  using namespace std::experimental;\n+}\n+#endif\n+\n+class promise;\n+\n+struct finalSuspendAwaiter {\n+  int x;\n+  finalSuspendAwaiter () : x(0) { }\n+  finalSuspendAwaiter (int _x) : x(_x) { }\n+  ~finalSuspendAwaiter() noexcept(false) { }\n+  bool await_ready() const noexcept(false) { return false; }\n+  void await_suspend(std::coroutine_handle<>) const noexcept(false) { }\n+  int await_resume() const noexcept(false) { return x; }\n+};\n+\n+struct finalSuspendObj {\n+  int x;\n+  finalSuspendObj () : x(0) { }\n+  finalSuspendObj (int _x) : x(_x) { }\n+  ~finalSuspendObj () noexcept(false) {} \n+  // { dg-error {the expression 'finalSuspendObj::~finalSuspendObj' is required to be non-throwing} \"\" { target *-*-* } .-1 }\n+\n+  finalSuspendAwaiter operator co_await() const & noexcept(true) { \n+    return {x};\n+  }\n+};\n+\n+struct task {\n+  struct promise_type {\n+  task get_return_object() noexcept { return {}; }\n+  std::suspend_never initial_suspend() noexcept { return {}; }\n+  \n+  finalSuspendObj final_suspend() noexcept { return {3}; } // NOTE: not declared noexcept\n+\n+  void return_void() noexcept {}\n+  void unhandled_exception() noexcept {}\n+  };\n+};\n+\n+// This should be ill-formed since final_suspend() is potentially throwing.\n+task f() {  \n+  co_return;\n+}"}, {"sha": "1dcd426c6083b0d875971bf29ee2b77de4451f11", "filename": "gcc/testsuite/g++.dg/coroutines/pr95616-3-no-exceptions.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee91079fd5879cba046e452ab5593372166b2ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-3-no-exceptions.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee91079fd5879cba046e452ab5593372166b2ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-3-no-exceptions.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-3-no-exceptions.C?ref=9ee91079fd5879cba046e452ab5593372166b2ab", "patch": "@@ -0,0 +1,50 @@\n+//  { dg-additional-options \"-fsyntax-only -fno-exceptions\" }\n+\n+#if __has_include(<coroutine>)\n+#include <coroutine>\n+#else\n+#include <experimental/coroutine>\n+namespace std {\n+  using namespace std::experimental;\n+}\n+#endif\n+\n+class promise;\n+\n+struct finalSuspendAwaiter {\n+  int x;\n+  finalSuspendAwaiter () : x(0) { }\n+  finalSuspendAwaiter (int _x) : x(_x) { }\n+  ~finalSuspendAwaiter() noexcept(false) { }\n+  bool await_ready() const noexcept(false) { return false; }\n+  void await_suspend(std::coroutine_handle<>) const noexcept(false) { }\n+  int await_resume() const noexcept(false) { return x; }  // NOTE: not declared noexcept\n+};\n+\n+struct finalSuspendObj {\n+  int x;\n+  finalSuspendObj () : x(0) { }\n+  finalSuspendObj (int _x) : x(_x) { }\n+  ~finalSuspendObj () noexcept(true) {} \n+\n+  finalSuspendAwaiter operator co_await() const & noexcept(true) { \n+    return {x};\n+  }\n+};\n+\n+struct task {\n+  struct promise_type {\n+  task get_return_object() noexcept { return {}; }\n+  std::suspend_never initial_suspend() noexcept { return {}; }\n+  \n+  finalSuspendObj final_suspend() noexcept { return {3}; }\n+\n+  void return_void() noexcept {}\n+  void unhandled_exception() noexcept {}\n+  };\n+};\n+\n+// OK when exceptions are disabled\n+task f() {  \n+  co_return;\n+}"}, {"sha": "7da1f6a96589f7be8b74ce7b0e0e2df76e2b4b5b", "filename": "gcc/testsuite/g++.dg/coroutines/pr95616-3.C", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee91079fd5879cba046e452ab5593372166b2ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee91079fd5879cba046e452ab5593372166b2ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-3.C?ref=9ee91079fd5879cba046e452ab5593372166b2ab", "patch": "@@ -0,0 +1,51 @@\n+//  { dg-additional-options \"-fsyntax-only\" }\n+\n+#if __has_include(<coroutine>)\n+#include <coroutine>\n+#else\n+#include <experimental/coroutine>\n+namespace std {\n+  using namespace std::experimental;\n+}\n+#endif\n+\n+class promise;\n+\n+struct finalSuspendAwaiter {\n+  int x;\n+  finalSuspendAwaiter () : x(0) { }\n+  finalSuspendAwaiter (int _x) : x(_x) { }\n+  ~finalSuspendAwaiter() noexcept(false) { }\n+  bool await_ready() const noexcept(false) { return false; }\n+  // { dg-error {the expression 'finalSuspendAwaiter::await_ready' is required to be non-throwing} \"\" { target *-*-* } .-1 }\n+  void await_suspend(std::coroutine_handle<>) const noexcept(false) { }\n+  int await_resume() const noexcept(false) { return x; }\n+};\n+\n+struct finalSuspendObj {\n+  int x;\n+  finalSuspendObj () : x(0) { }\n+  finalSuspendObj (int _x) : x(_x) { }\n+  ~finalSuspendObj () noexcept(true) {} \n+\n+  finalSuspendAwaiter operator co_await() const & noexcept(true) { \n+    return {x};\n+  }\n+};\n+\n+struct task {\n+  struct promise_type {\n+  task get_return_object() noexcept { return {}; }\n+  std::suspend_never initial_suspend() noexcept { return {}; }\n+  \n+  finalSuspendObj final_suspend() noexcept { return {3}; }\n+\n+  void return_void() noexcept {}\n+  void unhandled_exception() noexcept {}\n+  };\n+};\n+\n+// This should be ill-formed since final_suspend() is potentially throwing.\n+task f() {  \n+  co_return;\n+}"}, {"sha": "ef6a160a5c49e2b981a5588a93ec0e8b57a1843e", "filename": "gcc/testsuite/g++.dg/coroutines/pr95616-4.C", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee91079fd5879cba046e452ab5593372166b2ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee91079fd5879cba046e452ab5593372166b2ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-4.C?ref=9ee91079fd5879cba046e452ab5593372166b2ab", "patch": "@@ -0,0 +1,51 @@\n+//  { dg-additional-options \"-fsyntax-only\" }\n+\n+#if __has_include(<coroutine>)\n+#include <coroutine>\n+#else\n+#include <experimental/coroutine>\n+namespace std {\n+  using namespace std::experimental;\n+}\n+#endif\n+\n+class promise;\n+\n+struct finalSuspendAwaiter {\n+  int x;\n+  finalSuspendAwaiter () : x(0) { }\n+  finalSuspendAwaiter (int _x) : x(_x) { }\n+  ~finalSuspendAwaiter() noexcept(false) { }\n+  bool await_ready() const noexcept(true) { return false; }\n+  void await_suspend(std::coroutine_handle<>) const noexcept(false) { }\n+  // { dg-error {the expression 'finalSuspendAwaiter::await_suspend' is required to be non-throwing} \"\" { target *-*-* } .-1 }\n+  int await_resume() const noexcept(false) { return x; }\n+};\n+\n+struct finalSuspendObj {\n+  int x;\n+  finalSuspendObj () : x(0) { }\n+  finalSuspendObj (int _x) : x(_x) { }\n+  ~finalSuspendObj () noexcept(true) {} \n+\n+  finalSuspendAwaiter operator co_await() const & noexcept(true) { \n+    return {x};\n+  }\n+};\n+\n+struct task {\n+  struct promise_type {\n+  task get_return_object() noexcept { return {}; }\n+  std::suspend_never initial_suspend() noexcept { return {}; }\n+  \n+  finalSuspendObj final_suspend() noexcept { return {3}; }\n+\n+  void return_void() noexcept {}\n+  void unhandled_exception() noexcept {}\n+  };\n+};\n+\n+// This should be ill-formed since final_suspend() is potentially throwing.\n+task f() {  \n+  co_return;\n+}"}, {"sha": "930c1a7e6a171409d08909fa66760f73c6637378", "filename": "gcc/testsuite/g++.dg/coroutines/pr95616-5.C", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee91079fd5879cba046e452ab5593372166b2ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee91079fd5879cba046e452ab5593372166b2ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-5.C?ref=9ee91079fd5879cba046e452ab5593372166b2ab", "patch": "@@ -0,0 +1,51 @@\n+//  { dg-additional-options \"-fsyntax-only\" }\n+\n+#if __has_include(<coroutine>)\n+#include <coroutine>\n+#else\n+#include <experimental/coroutine>\n+namespace std {\n+  using namespace std::experimental;\n+}\n+#endif\n+\n+class promise;\n+\n+struct finalSuspendAwaiter {\n+  int x;\n+  finalSuspendAwaiter () : x(0) { }\n+  finalSuspendAwaiter (int _x) : x(_x) { }\n+  ~finalSuspendAwaiter() noexcept(false) { }\n+  bool await_ready() const noexcept(true) { return false; }\n+  void await_suspend(std::coroutine_handle<>) const noexcept(true) { }\n+  int await_resume() const noexcept(false) { return x; }\n+  // { dg-error {the expression 'finalSuspendAwaiter::await_resume' is required to be non-throwing} \"\" { target *-*-* } .-1 }\n+};\n+\n+struct finalSuspendObj {\n+  int x;\n+  finalSuspendObj () : x(0) { }\n+  finalSuspendObj (int _x) : x(_x) { }\n+  ~finalSuspendObj () noexcept(true) {} \n+\n+  finalSuspendAwaiter operator co_await() const & noexcept(true) { \n+    return {x};\n+  }\n+};\n+\n+struct task {\n+  struct promise_type {\n+  task get_return_object() noexcept { return {}; }\n+  std::suspend_never initial_suspend() noexcept { return {}; }\n+  \n+  finalSuspendObj final_suspend() noexcept { return {3}; }\n+\n+  void return_void() noexcept {}\n+  void unhandled_exception() noexcept {}\n+  };\n+};\n+\n+// This should be ill-formed since final_suspend() is potentially throwing.\n+task f() {  \n+  co_return;\n+}"}, {"sha": "e7481711c5e04cbf43fab1d25b883c386bd24f5c", "filename": "gcc/testsuite/g++.dg/coroutines/pr95616-6.C", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee91079fd5879cba046e452ab5593372166b2ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee91079fd5879cba046e452ab5593372166b2ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95616-6.C?ref=9ee91079fd5879cba046e452ab5593372166b2ab", "patch": "@@ -0,0 +1,51 @@\n+//  { dg-additional-options \"-fsyntax-only\" }\n+\n+#if __has_include(<coroutine>)\n+#include <coroutine>\n+#else\n+#include <experimental/coroutine>\n+namespace std {\n+  using namespace std::experimental;\n+}\n+#endif\n+\n+class promise;\n+\n+struct finalSuspendAwaiter {\n+  int x;\n+  finalSuspendAwaiter () : x(0) { }\n+  finalSuspendAwaiter (int _x) : x(_x) { }\n+  ~finalSuspendAwaiter() noexcept(false) { }\n+  // { dg-error {the expression 'finalSuspendAwaiter::~finalSuspendAwaiter' is required to be non-throwing} \"\" { target *-*-* } .-1 }\n+  bool await_ready() const noexcept(true) { return false; }\n+  void await_suspend(std::coroutine_handle<>) const noexcept(true) { }\n+  int await_resume() const noexcept(true) { return x; }\n+};\n+\n+struct finalSuspendObj {\n+  int x;\n+  finalSuspendObj () : x(0) { }\n+  finalSuspendObj (int _x) : x(_x) { }\n+  ~finalSuspendObj () noexcept(true) {} \n+\n+  finalSuspendAwaiter operator co_await() const & noexcept(true) { \n+    return {x};\n+  }\n+};\n+\n+struct task {\n+  struct promise_type {\n+  task get_return_object() noexcept { return {}; }\n+  std::suspend_never initial_suspend() noexcept { return {}; }\n+  \n+  finalSuspendObj final_suspend() noexcept { return {3}; } \n+\n+  void return_void() noexcept {}\n+  void unhandled_exception() noexcept {}\n+  };\n+};\n+\n+// This should be ill-formed since final_suspend() is potentially throwing.\n+task f() {  \n+  co_return;\n+}"}]}