{"sha": "fe42e7fe119159f7443dbe68189e52891dc0148e", "node_id": "C_kwDOANBUbNoAKGZlNDJlN2ZlMTE5MTU5Zjc0NDNkYmU2ODE4OWU1Mjg5MWRjMDE0OGU", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2023-03-30T07:43:25Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2023-03-31T01:02:56Z"}, "message": "Rename ufix_trunc/ufloat* patterns to fixuns_trunc/floatuns* to align with standard pattern name.\n\nThere's some typo for the standard pattern name for unsigned_{float,fix},\nit should be floatunsmn2/fixuns_truncmn2, not ufloatmn2/ufix_truncmn2\nin current trunk, the patch fix the typo, also change all though\nufix_trunc/ufloat patterns.\n\nAlso vcvttps2udq is available under AVX512VL, so it can be generated\ndirectly instead of being emulated via vcvttps2dq.\n\ngcc/ChangeLog:\n\n\tPR target/85048\n\t* config/i386/i386-builtin.def (BDESC): Adjust icode name from\n\tufloat/ufix to floatuns/fixuns.\n\t* config/i386/i386-expand.cc\n\t(ix86_expand_vector_convert_uns_vsivsf): Adjust comments.\n\t* config/i386/sse.md\n\t(ufloat<sseintvecmodelower><mode>2<mask_name><round_name>):\n\tRenamed\tto ..\n\t(<mask_codefor>floatuns<sseintvecmodelower><mode>2<mask_name><round_name>):.. this.\n\t(<mask_codefor><avx512>_ufix_notrunc<sf2simodelower><mode><mask_name><round_name>):\n\tRenamed to ..\n\t(<mask_codefor><avx512>_fixuns_notrunc<sf2simodelower><mode><mask_name><round_name>):\n\t.. this.\n\t(<fixsuffix>fix_truncv16sfv16si2<mask_name><round_saeonly_name>):\n\tRenamed to ..\n\t(fix<fixunssuffix>_truncv16sfv16si2<mask_name><round_saeonly_name>):.. this.\n\t(ufloat<si2dfmodelower><mode>2<mask_name>): Renamed to ..\n\t(floatuns<si2dfmodelower><mode>2<mask_name>): .. this.\n\t(ufloatv2siv2df2<mask_name>): Renamed to ..\n\t(<mask_codefor>floatunsv2siv2df2<mask_name>): .. this.\n\t(ufix_notrunc<mode><si2dfmodelower>2<mask_name><round_name>):\n\tRenamed to ..\n\t(fixuns_notrunc<mode><si2dfmodelower>2<mask_name><round_name>):\n\t.. this.\n\t(ufix_notruncv2dfv2si2): Renamed to ..\n\t(fixuns_notruncv2dfv2si2):.. this.\n\t(ufix_notruncv2dfv2si2_mask): Renamed to ..\n\t(fixuns_notruncv2dfv2si2_mask): .. this.\n\t(*ufix_notruncv2dfv2si2_mask_1): Renamed to ..\n\t(*fixuns_notruncv2dfv2si2_mask_1): .. this.\n\t(ufix_truncv2dfv2si2): Renamed to ..\n\t(*fixuns_truncv2dfv2si2): .. this.\n\t(ufix_truncv2dfv2si2_mask): Renamed to ..\n\t(fixuns_truncv2dfv2si2_mask): .. this.\n\t(*ufix_truncv2dfv2si2_mask_1): Renamed to ..\n\t(*fixuns_truncv2dfv2si2_mask_1): .. this.\n\t(ufix_truncv4dfv4si2<mask_name>): Renamed to ..\n\t(fixuns_truncv4dfv4si2<mask_name>): .. this.\n\t(ufix_notrunc<mode><sseintvecmodelower>2<mask_name><round_name>):\n\tRenamed to ..\n\t(fixuns_notrunc<mode><sseintvecmodelower>2<mask_name><round_name>):\n\t.. this.\n\t(ufix_trunc<mode><sseintvecmodelower>2<mask_name>): Renamed to ..\n\t(<mask_codefor>fixuns_trunc<mode><sseintvecmodelower>2<mask_name>):\n\t.. this.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/i386/pr85048.C: New test.", "tree": {"sha": "661e6823e6495ce80ad527997ce7103c11c19141", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/661e6823e6495ce80ad527997ce7103c11c19141"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe42e7fe119159f7443dbe68189e52891dc0148e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe42e7fe119159f7443dbe68189e52891dc0148e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe42e7fe119159f7443dbe68189e52891dc0148e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe42e7fe119159f7443dbe68189e52891dc0148e/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d20a6a3311b783482fa98194a0995a7f002d1c1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d20a6a3311b783482fa98194a0995a7f002d1c1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d20a6a3311b783482fa98194a0995a7f002d1c1b"}], "stats": {"total": 144, "additions": 84, "deletions": 60}, "files": [{"sha": "6dae6972d81f292527529300da65a5f4291294f0", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe42e7fe119159f7443dbe68189e52891dc0148e/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe42e7fe119159f7443dbe68189e52891dc0148e/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=fe42e7fe119159f7443dbe68189e52891dc0148e", "patch": "@@ -1384,7 +1384,7 @@ BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_compressv8df_mask, \"__builti\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_compressv16sf_mask, \"__builtin_ia32_compresssf512_mask\", IX86_BUILTIN_COMPRESSPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_UHI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_floatv8siv8df2_mask, \"__builtin_ia32_cvtdq2pd512_mask\", IX86_BUILTIN_CVTDQ2PD512, UNKNOWN, (int) V8DF_FTYPE_V8SI_V8DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_vcvtps2ph512_mask_sae,  \"__builtin_ia32_vcvtps2ph512_mask\", IX86_BUILTIN_CVTPS2PH512, UNKNOWN, (int) V16HI_FTYPE_V16SF_INT_V16HI_UHI)\n-BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_ufloatv8siv8df2_mask, \"__builtin_ia32_cvtudq2pd512_mask\", IX86_BUILTIN_CVTUDQ2PD512, UNKNOWN, (int) V8DF_FTYPE_V8SI_V8DF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_floatunsv8siv8df2_mask, \"__builtin_ia32_cvtudq2pd512_mask\", IX86_BUILTIN_CVTUDQ2PD512, UNKNOWN, (int) V8DF_FTYPE_V8SI_V8DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_cvtusi2sd32, \"__builtin_ia32_cvtusi2sd32\", IX86_BUILTIN_CVTUSI2SD32, UNKNOWN, (int) V2DF_FTYPE_V2DF_UINT)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_expandv8df_mask, \"__builtin_ia32_expanddf512_mask\", IX86_BUILTIN_EXPANDPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_expandv8df_maskz, \"__builtin_ia32_expanddf512_maskz\", IX86_BUILTIN_EXPANDPD512Z, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_UQI)\n@@ -1719,32 +1719,32 @@ BDESC (OPTION_MASK_ISA_AVX512DQ | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_fixuns_t\n BDESC (OPTION_MASK_ISA_AVX512DQ | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_fixuns_truncv2dfv2di2_mask, \"__builtin_ia32_cvttpd2uqq128_mask\", IX86_BUILTIN_CVTTPD2UQQ128, UNKNOWN, (int) V2DI_FTYPE_V2DF_V2DI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512DQ | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_fix_notruncv4dfv4di2_mask, \"__builtin_ia32_cvtpd2qq256_mask\", IX86_BUILTIN_CVTPD2QQ256, UNKNOWN, (int) V4DI_FTYPE_V4DF_V4DI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512DQ | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_fix_notruncv2dfv2di2_mask, \"__builtin_ia32_cvtpd2qq128_mask\", IX86_BUILTIN_CVTPD2QQ128, UNKNOWN, (int) V2DI_FTYPE_V2DF_V2DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512DQ | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_ufix_notruncv4dfv4di2_mask, \"__builtin_ia32_cvtpd2uqq256_mask\", IX86_BUILTIN_CVTPD2UQQ256, UNKNOWN, (int) V4DI_FTYPE_V4DF_V4DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512DQ | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_ufix_notruncv2dfv2di2_mask, \"__builtin_ia32_cvtpd2uqq128_mask\", IX86_BUILTIN_CVTPD2UQQ128, UNKNOWN, (int) V2DI_FTYPE_V2DF_V2DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_ufix_notruncv4dfv4si2_mask, \"__builtin_ia32_cvtpd2udq256_mask\", IX86_BUILTIN_CVTPD2UDQ256_MASK, UNKNOWN, (int) V4SI_FTYPE_V4DF_V4SI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_ufix_notruncv2dfv2si2_mask, \"__builtin_ia32_cvtpd2udq128_mask\", IX86_BUILTIN_CVTPD2UDQ128_MASK, UNKNOWN, (int) V4SI_FTYPE_V2DF_V4SI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512DQ | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_fixuns_notruncv4dfv4di2_mask, \"__builtin_ia32_cvtpd2uqq256_mask\", IX86_BUILTIN_CVTPD2UQQ256, UNKNOWN, (int) V4DI_FTYPE_V4DF_V4DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512DQ | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_fixuns_notruncv2dfv2di2_mask, \"__builtin_ia32_cvtpd2uqq128_mask\", IX86_BUILTIN_CVTPD2UQQ128, UNKNOWN, (int) V2DI_FTYPE_V2DF_V2DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_fixuns_notruncv4dfv4si2_mask, \"__builtin_ia32_cvtpd2udq256_mask\", IX86_BUILTIN_CVTPD2UDQ256_MASK, UNKNOWN, (int) V4SI_FTYPE_V4DF_V4SI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_fixuns_notruncv2dfv2si2_mask, \"__builtin_ia32_cvtpd2udq128_mask\", IX86_BUILTIN_CVTPD2UDQ128_MASK, UNKNOWN, (int) V4SI_FTYPE_V2DF_V4SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512DQ | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_fix_truncv4sfv4di2_mask, \"__builtin_ia32_cvttps2qq256_mask\", IX86_BUILTIN_CVTTPS2QQ256, UNKNOWN, (int) V4DI_FTYPE_V4SF_V4DI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512DQ | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512dq_fix_truncv2sfv2di2_mask, \"__builtin_ia32_cvttps2qq128_mask\", IX86_BUILTIN_CVTTPS2QQ128, UNKNOWN, (int) V2DI_FTYPE_V4SF_V2DI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512DQ | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_fixuns_truncv4sfv4di2_mask, \"__builtin_ia32_cvttps2uqq256_mask\", IX86_BUILTIN_CVTTPS2UQQ256, UNKNOWN, (int) V4DI_FTYPE_V4SF_V4DI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512DQ | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512dq_fixuns_truncv2sfv2di2_mask, \"__builtin_ia32_cvttps2uqq128_mask\", IX86_BUILTIN_CVTTPS2UQQ128, UNKNOWN, (int) V2DI_FTYPE_V4SF_V2DI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_fix_truncv8sfv8si2_mask, \"__builtin_ia32_cvttps2dq256_mask\", IX86_BUILTIN_CVTTPS2DQ256_MASK, UNKNOWN, (int) V8SI_FTYPE_V8SF_V8SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_fix_truncv4sfv4si2_mask, \"__builtin_ia32_cvttps2dq128_mask\", IX86_BUILTIN_CVTTPS2DQ128_MASK, UNKNOWN, (int) V4SI_FTYPE_V4SF_V4SI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_ufix_truncv8sfv8si2_mask, \"__builtin_ia32_cvttps2udq256_mask\", IX86_BUILTIN_CVTTPS2UDQ256, UNKNOWN, (int) V8SI_FTYPE_V8SF_V8SI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_ufix_truncv4sfv4si2_mask, \"__builtin_ia32_cvttps2udq128_mask\", IX86_BUILTIN_CVTTPS2UDQ128, UNKNOWN, (int) V4SI_FTYPE_V4SF_V4SI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_fixuns_truncv8sfv8si2_mask, \"__builtin_ia32_cvttps2udq256_mask\", IX86_BUILTIN_CVTTPS2UDQ256, UNKNOWN, (int) V8SI_FTYPE_V8SF_V8SI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_fixuns_truncv4sfv4si2_mask, \"__builtin_ia32_cvttps2udq128_mask\", IX86_BUILTIN_CVTTPS2UDQ128, UNKNOWN, (int) V4SI_FTYPE_V4SF_V4SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_fix_truncv4dfv4si2_mask, \"__builtin_ia32_cvttpd2dq256_mask\", IX86_BUILTIN_CVTTPD2DQ256_MASK, UNKNOWN, (int) V4SI_FTYPE_V4DF_V4SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_sse2_cvttpd2dq_mask, \"__builtin_ia32_cvttpd2dq128_mask\", IX86_BUILTIN_CVTTPD2DQ128_MASK, UNKNOWN, (int) V4SI_FTYPE_V2DF_V4SI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_ufix_truncv4dfv4si2_mask, \"__builtin_ia32_cvttpd2udq256_mask\", IX86_BUILTIN_CVTTPD2UDQ256_MASK, UNKNOWN, (int) V4SI_FTYPE_V4DF_V4SI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_ufix_truncv2dfv2si2_mask, \"__builtin_ia32_cvttpd2udq128_mask\", IX86_BUILTIN_CVTTPD2UDQ128_MASK, UNKNOWN, (int) V4SI_FTYPE_V2DF_V4SI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_fixuns_truncv4dfv4si2_mask, \"__builtin_ia32_cvttpd2udq256_mask\", IX86_BUILTIN_CVTTPD2UDQ256_MASK, UNKNOWN, (int) V4SI_FTYPE_V4DF_V4SI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_fixuns_truncv2dfv2si2_mask, \"__builtin_ia32_cvttpd2udq128_mask\", IX86_BUILTIN_CVTTPD2UDQ128_MASK, UNKNOWN, (int) V4SI_FTYPE_V2DF_V4SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx_cvtpd2dq256_mask, \"__builtin_ia32_cvtpd2dq256_mask\", IX86_BUILTIN_CVTPD2DQ256_MASK, UNKNOWN, (int) V4SI_FTYPE_V4DF_V4SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_sse2_cvtpd2dq_mask, \"__builtin_ia32_cvtpd2dq128_mask\", IX86_BUILTIN_CVTPD2DQ128_MASK, UNKNOWN, (int) V4SI_FTYPE_V2DF_V4SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_floatv4siv4df2_mask, \"__builtin_ia32_cvtdq2pd256_mask\", IX86_BUILTIN_CVTDQ2PD256_MASK, UNKNOWN, (int) V4DF_FTYPE_V4SI_V4DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_sse2_cvtdq2pd_mask, \"__builtin_ia32_cvtdq2pd128_mask\", IX86_BUILTIN_CVTDQ2PD128_MASK, UNKNOWN, (int) V2DF_FTYPE_V4SI_V2DF_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_ufloatv4siv4df2_mask, \"__builtin_ia32_cvtudq2pd256_mask\", IX86_BUILTIN_CVTUDQ2PD256_MASK, UNKNOWN, (int) V4DF_FTYPE_V4SI_V4DF_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_ufloatv2siv2df2_mask, \"__builtin_ia32_cvtudq2pd128_mask\", IX86_BUILTIN_CVTUDQ2PD128_MASK, UNKNOWN, (int) V2DF_FTYPE_V4SI_V2DF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_floatunsv4siv4df2_mask, \"__builtin_ia32_cvtudq2pd256_mask\", IX86_BUILTIN_CVTUDQ2PD256_MASK, UNKNOWN, (int) V4DF_FTYPE_V4SI_V4DF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_floatunsv2siv2df2_mask, \"__builtin_ia32_cvtudq2pd128_mask\", IX86_BUILTIN_CVTUDQ2PD128_MASK, UNKNOWN, (int) V2DF_FTYPE_V4SI_V2DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_floatv8siv8sf2_mask, \"__builtin_ia32_cvtdq2ps256_mask\", IX86_BUILTIN_CVTDQ2PS256_MASK, UNKNOWN, (int) V8SF_FTYPE_V8SI_V8SF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_floatv4siv4sf2_mask, \"__builtin_ia32_cvtdq2ps128_mask\", IX86_BUILTIN_CVTDQ2PS128_MASK, UNKNOWN, (int) V4SF_FTYPE_V4SI_V4SF_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_ufloatv8siv8sf2_mask, \"__builtin_ia32_cvtudq2ps256_mask\", IX86_BUILTIN_CVTUDQ2PS256_MASK, UNKNOWN, (int) V8SF_FTYPE_V8SI_V8SF_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_ufloatv4siv4sf2_mask, \"__builtin_ia32_cvtudq2ps128_mask\", IX86_BUILTIN_CVTUDQ2PS128_MASK, UNKNOWN, (int) V4SF_FTYPE_V4SI_V4SF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_floatunsv8siv8sf2_mask, \"__builtin_ia32_cvtudq2ps256_mask\", IX86_BUILTIN_CVTUDQ2PS256_MASK, UNKNOWN, (int) V8SF_FTYPE_V8SI_V8SF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_floatunsv4siv4sf2_mask, \"__builtin_ia32_cvtudq2ps128_mask\", IX86_BUILTIN_CVTUDQ2PS128_MASK, UNKNOWN, (int) V4SF_FTYPE_V4SI_V4SF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx_cvtps2pd256_mask, \"__builtin_ia32_cvtps2pd256_mask\", IX86_BUILTIN_CVTPS2PD256_MASK, UNKNOWN, (int) V4DF_FTYPE_V4SF_V4DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_sse2_cvtps2pd_mask, \"__builtin_ia32_cvtps2pd128_mask\", IX86_BUILTIN_CVTPS2PD128_MASK, UNKNOWN, (int) V2DF_FTYPE_V4SF_V2DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512BW | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_vec_dupv32qi_mask, \"__builtin_ia32_pbroadcastb256_mask\", IX86_BUILTIN_PBROADCASTB256_MASK, UNKNOWN, (int) V32QI_FTYPE_V16QI_V32QI_USI)\n@@ -2072,8 +2072,8 @@ BDESC (OPTION_MASK_ISA_AVX512BW | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl\n BDESC (OPTION_MASK_ISA_AVX512BW | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_lshrvv8hi_mask, \"__builtin_ia32_psrlv8hi_mask\", IX86_BUILTIN_PSRLVV8HI, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_V8HI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx_fix_notruncv8sfv8si_mask, \"__builtin_ia32_cvtps2dq256_mask\", IX86_BUILTIN_CVTPS2DQ256_MASK, UNKNOWN, (int) V8SI_FTYPE_V8SF_V8SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_sse2_fix_notruncv4sfv4si_mask, \"__builtin_ia32_cvtps2dq128_mask\", IX86_BUILTIN_CVTPS2DQ128_MASK, UNKNOWN, (int) V4SI_FTYPE_V4SF_V4SI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_ufix_notruncv8sfv8si_mask, \"__builtin_ia32_cvtps2udq256_mask\", IX86_BUILTIN_CVTPS2UDQ256, UNKNOWN, (int) V8SI_FTYPE_V8SF_V8SI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_ufix_notruncv4sfv4si_mask, \"__builtin_ia32_cvtps2udq128_mask\", IX86_BUILTIN_CVTPS2UDQ128, UNKNOWN, (int) V4SI_FTYPE_V4SF_V4SI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_fixuns_notruncv8sfv8si_mask, \"__builtin_ia32_cvtps2udq256_mask\", IX86_BUILTIN_CVTPS2UDQ256, UNKNOWN, (int) V8SI_FTYPE_V8SF_V8SI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_fixuns_notruncv4sfv4si_mask, \"__builtin_ia32_cvtps2udq128_mask\", IX86_BUILTIN_CVTPS2UDQ128, UNKNOWN, (int) V4SI_FTYPE_V4SF_V4SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512DQ | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512dq_cvtps2qqv4di_mask, \"__builtin_ia32_cvtps2qq256_mask\", IX86_BUILTIN_CVTPS2QQ256, UNKNOWN, (int) V4DI_FTYPE_V4SF_V4DI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512DQ | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512dq_cvtps2qqv2di_mask, \"__builtin_ia32_cvtps2qq128_mask\", IX86_BUILTIN_CVTPS2QQ128, UNKNOWN, (int) V2DI_FTYPE_V4SF_V2DI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512DQ | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512dq_cvtps2uqqv4di_mask, \"__builtin_ia32_cvtps2uqq256_mask\", IX86_BUILTIN_CVTPS2UQQ256, UNKNOWN, (int) V4DI_FTYPE_V4SF_V4DI_UQI)\n@@ -3019,11 +3019,11 @@ BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_sse_comi_round, \"__builtin_ia32_vcom\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_floatv16siv16sf2_mask_round, \"__builtin_ia32_cvtdq2ps512_mask\", IX86_BUILTIN_CVTDQ2PS512, UNKNOWN, (int) V16SF_FTYPE_V16SI_V16SF_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_cvtpd2dq512_mask_round, \"__builtin_ia32_cvtpd2dq512_mask\", IX86_BUILTIN_CVTPD2DQ512, UNKNOWN, (int) V8SI_FTYPE_V8DF_V8SI_QI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_cvtpd2ps512_mask_round,  \"__builtin_ia32_cvtpd2ps512_mask\", IX86_BUILTIN_CVTPD2PS512, UNKNOWN, (int) V8SF_FTYPE_V8DF_V8SF_QI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_ufix_notruncv8dfv8si2_mask_round, \"__builtin_ia32_cvtpd2udq512_mask\", IX86_BUILTIN_CVTPD2UDQ512, UNKNOWN, (int) V8SI_FTYPE_V8DF_V8SI_QI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_fixuns_notruncv8dfv8si2_mask_round, \"__builtin_ia32_cvtpd2udq512_mask\", IX86_BUILTIN_CVTPD2UDQ512, UNKNOWN, (int) V8SI_FTYPE_V8DF_V8SI_QI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_vcvtph2ps512_mask_round,  \"__builtin_ia32_vcvtph2ps512_mask\", IX86_BUILTIN_CVTPH2PS512, UNKNOWN, (int) V16SF_FTYPE_V16HI_V16SF_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_fix_notruncv16sfv16si_mask_round, \"__builtin_ia32_cvtps2dq512_mask\", IX86_BUILTIN_CVTPS2DQ512_MASK, UNKNOWN, (int) V16SI_FTYPE_V16SF_V16SI_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_cvtps2pd512_mask_round, \"__builtin_ia32_cvtps2pd512_mask\", IX86_BUILTIN_CVTPS2PD512, UNKNOWN, (int) V8DF_FTYPE_V8SF_V8DF_QI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_ufix_notruncv16sfv16si_mask_round, \"__builtin_ia32_cvtps2udq512_mask\", IX86_BUILTIN_CVTPS2UDQ512, UNKNOWN, (int) V16SI_FTYPE_V16SF_V16SI_HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_fixuns_notruncv16sfv16si_mask_round, \"__builtin_ia32_cvtps2udq512_mask\", IX86_BUILTIN_CVTPS2UDQ512, UNKNOWN, (int) V16SI_FTYPE_V16SF_V16SI_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_sse2_cvtsd2ss_round, \"__builtin_ia32_cvtsd2ss_round\", IX86_BUILTIN_CVTSD2SS_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V2DF_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_sse2_cvtsd2ss_mask_round, \"__builtin_ia32_cvtsd2ss_mask_round\", IX86_BUILTIN_CVTSD2SS_MASK_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V2DF_V4SF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F | OPTION_MASK_ISA_64BIT, 0, CODE_FOR_sse2_cvtsi2sdq_round, \"__builtin_ia32_cvtsi2sd64\", IX86_BUILTIN_CVTSI2SD64, UNKNOWN, (int) V2DF_FTYPE_V2DF_INT64_INT)\n@@ -3034,8 +3034,8 @@ BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_sse2_cvtss2sd_mask_round, \"__builtin\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_fix_truncv8dfv8si2_mask_round, \"__builtin_ia32_cvttpd2dq512_mask\", IX86_BUILTIN_CVTTPD2DQ512, UNKNOWN, (int) V8SI_FTYPE_V8DF_V8SI_QI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_fixuns_truncv8dfv8si2_mask_round, \"__builtin_ia32_cvttpd2udq512_mask\", IX86_BUILTIN_CVTTPD2UDQ512, UNKNOWN, (int) V8SI_FTYPE_V8DF_V8SI_QI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_fix_truncv16sfv16si2_mask_round, \"__builtin_ia32_cvttps2dq512_mask\", IX86_BUILTIN_CVTTPS2DQ512, UNKNOWN, (int) V16SI_FTYPE_V16SF_V16SI_HI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_ufix_truncv16sfv16si2_mask_round, \"__builtin_ia32_cvttps2udq512_mask\", IX86_BUILTIN_CVTTPS2UDQ512, UNKNOWN, (int) V16SI_FTYPE_V16SF_V16SI_HI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_ufloatv16siv16sf2_mask_round, \"__builtin_ia32_cvtudq2ps512_mask\", IX86_BUILTIN_CVTUDQ2PS512, UNKNOWN, (int) V16SF_FTYPE_V16SI_V16SF_HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_fixuns_truncv16sfv16si2_mask_round, \"__builtin_ia32_cvttps2udq512_mask\", IX86_BUILTIN_CVTTPS2UDQ512, UNKNOWN, (int) V16SI_FTYPE_V16SF_V16SI_HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_floatunsv16siv16sf2_mask_round, \"__builtin_ia32_cvtudq2ps512_mask\", IX86_BUILTIN_CVTUDQ2PS512, UNKNOWN, (int) V16SF_FTYPE_V16SI_V16SF_HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512F | OPTION_MASK_ISA_64BIT, 0, CODE_FOR_cvtusi2sd64_round, \"__builtin_ia32_cvtusi2sd64\", IX86_BUILTIN_CVTUSI2SD64, UNKNOWN, (int) V2DF_FTYPE_V2DF_UINT64_INT)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_cvtusi2ss32_round, \"__builtin_ia32_cvtusi2ss32\", IX86_BUILTIN_CVTUSI2SS32, UNKNOWN, (int) V4SF_FTYPE_V4SF_UINT_INT)\n BDESC (OPTION_MASK_ISA_AVX512F | OPTION_MASK_ISA_64BIT, 0, CODE_FOR_cvtusi2ss64_round, \"__builtin_ia32_cvtusi2ss64\", IX86_BUILTIN_CVTUSI2SS64, UNKNOWN, (int) V4SF_FTYPE_V4SF_UINT64_INT)\n@@ -3185,7 +3185,7 @@ BDESC (OPTION_MASK_ISA_AVX512DQ, 0, CODE_FOR_avx512dq_rangesv2df_mask_round, \"__\n BDESC (OPTION_MASK_ISA_AVX512DQ, 0, CODE_FOR_avx512dq_rangesv4sf_mask_round, \"__builtin_ia32_rangess128_mask_round\", IX86_BUILTIN_RANGESS128, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT_V4SF_UQI_INT)\n BDESC (OPTION_MASK_ISA_AVX512DQ, 0, CODE_FOR_fix_notruncv8dfv8di2_mask_round, \"__builtin_ia32_cvtpd2qq512_mask\", IX86_BUILTIN_CVTPD2QQ512, UNKNOWN, (int) V8DI_FTYPE_V8DF_V8DI_QI_INT)\n BDESC (OPTION_MASK_ISA_AVX512DQ, 0, CODE_FOR_avx512dq_cvtps2qqv8di_mask_round, \"__builtin_ia32_cvtps2qq512_mask\", IX86_BUILTIN_CVTPS2QQ512, UNKNOWN, (int) V8DI_FTYPE_V8SF_V8DI_QI_INT)\n-BDESC (OPTION_MASK_ISA_AVX512DQ, 0, CODE_FOR_ufix_notruncv8dfv8di2_mask_round, \"__builtin_ia32_cvtpd2uqq512_mask\", IX86_BUILTIN_CVTPD2UQQ512, UNKNOWN, (int) V8DI_FTYPE_V8DF_V8DI_QI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512DQ, 0, CODE_FOR_fixuns_notruncv8dfv8di2_mask_round, \"__builtin_ia32_cvtpd2uqq512_mask\", IX86_BUILTIN_CVTPD2UQQ512, UNKNOWN, (int) V8DI_FTYPE_V8DF_V8DI_QI_INT)\n BDESC (OPTION_MASK_ISA_AVX512DQ, 0, CODE_FOR_avx512dq_cvtps2uqqv8di_mask_round, \"__builtin_ia32_cvtps2uqq512_mask\", IX86_BUILTIN_CVTPS2UQQ512, UNKNOWN, (int) V8DI_FTYPE_V8SF_V8DI_QI_INT)\n BDESC (OPTION_MASK_ISA_AVX512DQ, 0, CODE_FOR_floatv8div8sf2_mask_round, \"__builtin_ia32_cvtqq2ps512_mask\", IX86_BUILTIN_CVTQQ2PS512, UNKNOWN, (int) V8SF_FTYPE_V8DI_V8SF_QI_INT)\n BDESC (OPTION_MASK_ISA_AVX512DQ, 0, CODE_FOR_floatunsv8div8sf2_mask_round, \"__builtin_ia32_cvtuqq2ps512_mask\", IX86_BUILTIN_CVTUQQ2PS512, UNKNOWN, (int) V8SF_FTYPE_V8DI_V8SF_QI_INT)"}, {"sha": "0d817fc3f3b87adfeef4af9bca2147eeb000ce89", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe42e7fe119159f7443dbe68189e52891dc0148e/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe42e7fe119159f7443dbe68189e52891dc0148e/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=fe42e7fe119159f7443dbe68189e52891dc0148e", "patch": "@@ -2033,7 +2033,7 @@ ix86_expand_vector_convert_uns_vsivsf (rtx target, rtx val)\n }\n \n /* Adjust a V*SFmode/V*DFmode value VAL so that *sfix_trunc* resp. fix_trunc*\n-   pattern can be used on it instead of *ufix_trunc* resp. fixuns_trunc*.\n+   pattern can be used on it instead of fixuns_trunc*.\n    This is done by doing just signed conversion if < 0x1p31, and otherwise by\n    subtracting 0x1p31 first and xoring in 0x80000000 from *XORP afterwards.  */\n "}, {"sha": "513960e8f33ce5cdb5826841bf50a9453717f75b", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 30, "deletions": 39, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe42e7fe119159f7443dbe68189e52891dc0148e/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe42e7fe119159f7443dbe68189e52891dc0148e/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=fe42e7fe119159f7443dbe68189e52891dc0148e", "patch": "@@ -7850,7 +7850,7 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"ufloat<sseintvecmodelower><mode>2<mask_name><round_name>\"\n+(define_insn \"<mask_codefor>floatuns<sseintvecmodelower><mode>2<mask_name><round_name>\"\n   [(set (match_operand:VF1_AVX512VL 0 \"register_operand\" \"=v\")\n \t(unsigned_float:VF1_AVX512VL\n \t  (match_operand:<sseintvecmode> 1 \"nonimmediate_operand\" \"<round_constraint>\")))]\n@@ -7861,24 +7861,16 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_expand \"floatuns<sseintvecmodelower><mode>2\"\n-  [(match_operand:VF1 0 \"register_operand\")\n-   (match_operand:<sseintvecmode> 1 \"register_operand\")]\n+  [(set (match_operand:VF1 0 \"register_operand\")\n+\t(unsigned_float:VF1\n+\t  (match_operand:<sseintvecmode> 1 \"register_operand\")))]\n   \"TARGET_SSE2 && (<MODE>mode == V4SFmode || TARGET_AVX2)\"\n {\n-  if (<MODE>mode == V16SFmode)\n-    emit_insn (gen_ufloatv16siv16sf2 (operands[0], operands[1]));\n-  else\n-    if (TARGET_AVX512VL)\n-      {\n-\tif (<MODE>mode == V4SFmode)\n-\t  emit_insn (gen_ufloatv4siv4sf2 (operands[0], operands[1]));\n-\telse\n-\t  emit_insn (gen_ufloatv8siv8sf2 (operands[0], operands[1]));\n-      }\n-  else\n-    ix86_expand_vector_convert_uns_vsivsf (operands[0], operands[1]);\n-\n-  DONE;\n+  if (<MODE>mode != V16SFmode && !TARGET_AVX512VL)\n+    {\n+      ix86_expand_vector_convert_uns_vsivsf (operands[0], operands[1]);\n+      DONE;\n+    }\n })\n \n \n@@ -7913,7 +7905,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n-(define_insn \"<mask_codefor><avx512>_ufix_notrunc<sf2simodelower><mode><mask_name><round_name>\"\n+(define_insn \"<mask_codefor><avx512>_fixuns_notrunc<sf2simodelower><mode><mask_name><round_name>\"\n   [(set (match_operand:VI4_AVX512VL 0 \"register_operand\" \"=v\")\n \t(unspec:VI4_AVX512VL\n \t  [(match_operand:<ssePSmode> 1 \"nonimmediate_operand\" \"<round_constraint>\")]\n@@ -7970,7 +7962,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"<fixsuffix>fix_truncv16sfv16si2<mask_name><round_saeonly_name>\"\n+(define_insn \"fix<fixunssuffix>_truncv16sfv16si2<mask_name><round_saeonly_name>\"\n   [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n \t(any_fix:V16SI\n \t  (match_operand:V16SF 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")))]\n@@ -8010,22 +8002,21 @@\n    (set_attr \"mode\" \"TI\")])\n \n (define_expand \"fixuns_trunc<mode><sseintvecmodelower>2\"\n-  [(match_operand:<sseintvecmode> 0 \"register_operand\")\n-   (match_operand:VF1 1 \"register_operand\")]\n+  [(set (match_operand:<sseintvecmode> 0 \"register_operand\")\n+\t  (unsigned_fix:<sseintvecmode>\n+\t    (match_operand:VF1_128_256 1 \"register_operand\")))]\n   \"TARGET_SSE2\"\n {\n-  if (<MODE>mode == V16SFmode)\n-    emit_insn (gen_ufix_truncv16sfv16si2 (operands[0],\n-\t\t\t\t\t  operands[1]));\n-  else\n+  /* AVX512 support vcvttps2udq for all 128/256/512-bit vectors.  */\n+  if (!TARGET_AVX512VL)\n     {\n       rtx tmp[3];\n       tmp[0] = ix86_expand_adjust_ufix_to_sfix_si (operands[1], &tmp[2]);\n       tmp[1] = gen_reg_rtx (<sseintvecmode>mode);\n       emit_insn (gen_fix_trunc<mode><sseintvecmodelower>2 (tmp[1], tmp[0]));\n       emit_insn (gen_xor<sseintvecmodelower>3 (operands[0], tmp[1], tmp[2]));\n+      DONE;\n     }\n-  DONE;\n })\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n@@ -8413,7 +8404,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"V4SF\")])\n \n-(define_insn \"ufloat<si2dfmodelower><mode>2<mask_name>\"\n+(define_insn \"floatuns<si2dfmodelower><mode>2<mask_name>\"\n   [(set (match_operand:VF2_512_256VL 0 \"register_operand\" \"=v\")\n \t(unsigned_float:VF2_512_256VL\n \t  (match_operand:<si2dfmode> 1 \"nonimmediate_operand\" \"vm\")))]\n@@ -8423,7 +8414,7 @@\n     (set_attr \"prefix\" \"evex\")\n     (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"ufloatv2siv2df2<mask_name>\"\n+(define_insn \"<mask_codefor>floatunsv2siv2df2<mask_name>\"\n   [(set (match_operand:V2DF 0 \"register_operand\" \"=v\")\n \t(unsigned_float:V2DF\n \t  (vec_select:V2SI\n@@ -8572,11 +8563,11 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n-;; For ufix_notrunc* insn patterns\n+;; For fixuns_notrunc* insn patterns\n (define_mode_attr pd2udqsuff\n   [(V8DF \"\") (V4DF \"{y}\")])\n \n-(define_insn \"ufix_notrunc<mode><si2dfmodelower>2<mask_name><round_name>\"\n+(define_insn \"fixuns_notrunc<mode><si2dfmodelower>2<mask_name><round_name>\"\n   [(set (match_operand:<si2dfmode> 0 \"register_operand\" \"=v\")\n \t(unspec:<si2dfmode>\n \t  [(match_operand:VF2_512_256VL 1 \"nonimmediate_operand\" \"<round_constraint>\")]\n@@ -8587,7 +8578,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"ufix_notruncv2dfv2si2\"\n+(define_insn \"fixuns_notruncv2dfv2si2\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n \t(vec_concat:V4SI\n \t  (unspec:V2SI\n@@ -8600,7 +8591,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"ufix_notruncv2dfv2si2_mask\"\n+(define_insn \"fixuns_notruncv2dfv2si2_mask\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n \t(vec_concat:V4SI\n \t  (vec_merge:V2SI\n@@ -8618,7 +8609,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*ufix_notruncv2dfv2si2_mask_1\"\n+(define_insn \"*fixuns_notruncv2dfv2si2_mask_1\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n \t(vec_concat:V4SI\n \t  (vec_merge:V2SI\n@@ -8644,7 +8635,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"OI\")])\n \n-(define_insn \"ufix_truncv2dfv2si2\"\n+(define_insn \"*fixuns_truncv2dfv2si2\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n \t(vec_concat:V4SI\n \t  (unsigned_fix:V2SI (match_operand:V2DF 1 \"nonimmediate_operand\" \"vm\"))\n@@ -8655,7 +8646,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"ufix_truncv2dfv2si2_mask\"\n+(define_insn \"fixuns_truncv2dfv2si2_mask\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n \t(vec_concat:V4SI\n \t  (vec_merge:V2SI\n@@ -8671,7 +8662,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*ufix_truncv2dfv2si2_mask_1\"\n+(define_insn \"*fixuns_truncv2dfv2si2_mask_1\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n \t(vec_concat:V4SI\n \t  (vec_merge:V2SI\n@@ -8694,7 +8685,7 @@\n    (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"OI\")])\n \n-(define_insn \"ufix_truncv4dfv4si2<mask_name>\"\n+(define_insn \"fixuns_truncv4dfv4si2<mask_name>\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n \t(unsigned_fix:V4SI (match_operand:V4DF 1 \"nonimmediate_operand\" \"vm\")))]\n   \"TARGET_AVX512VL && TARGET_AVX512F\"\n@@ -8724,7 +8715,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseintvecmode2>\")])\n \n-(define_insn \"ufix_notrunc<mode><sseintvecmodelower>2<mask_name><round_name>\"\n+(define_insn \"fixuns_notrunc<mode><sseintvecmodelower>2<mask_name><round_name>\"\n   [(set (match_operand:<sseintvecmode> 0 \"register_operand\" \"=v\")\n \t(unspec:<sseintvecmode>\n \t  [(match_operand:VF2_AVX512VL 1 \"nonimmediate_operand\" \"<round_constraint>\")]\n@@ -8827,7 +8818,7 @@\n   DONE;\n })\n \n-(define_insn \"ufix_trunc<mode><sseintvecmodelower>2<mask_name>\"\n+(define_insn \"<mask_codefor>fixuns_trunc<mode><sseintvecmodelower>2<mask_name>\"\n   [(set (match_operand:<sseintvecmode> 0 \"register_operand\" \"=v\")\n \t(unsigned_fix:<sseintvecmode>\n \t  (match_operand:VF1_128_256VL 1 \"nonimmediate_operand\" \"vm\")))]"}, {"sha": "52973c18ebdd05e06e3d8752bfd2b8dbf97ebf34", "filename": "gcc/testsuite/g++.target/i386/pr85048.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe42e7fe119159f7443dbe68189e52891dc0148e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr85048.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe42e7fe119159f7443dbe68189e52891dc0148e/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr85048.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr85048.C?ref=fe42e7fe119159f7443dbe68189e52891dc0148e", "patch": "@@ -0,0 +1,33 @@\n+/* PR target/85048 */\n+/* { dg-do compile }  */\n+/* { dg-options \"-std=c++17 -O2 -mavx512vl -mavx512dq -mprefer-vector-width=512\" } */\n+/* { dg-final { scan-assembler-times {(?n)vcvtudq2pd[ \\t]+} 2 } } */\n+/* { dg-final { scan-assembler-times {(?n)vcvttps2udq[ \\t]+} 2 } } */\n+/* { dg-final { scan-assembler-times {(?n)vcvttpd2udqy?[ \\t]+} 1 } } */\n+\n+#include <cstdint>\n+\n+template <class T, int N, int Size = N * sizeof(T)>\n+using V [[gnu::vector_size(Size)]] = T;\n+\n+template <class From, class To> V<To, 4> cvt4(V<From, 4> x) {\n+    return V<To, 4>{To(x[0]), To(x[1]), To(x[2]), To(x[3])};\n+}\n+template <class From, class To> V<To, 8> cvt8(V<From, 8> x) {\n+    return V<To, 8>{\n+        To(x[0]), To(x[1]), To(x[2]), To(x[3]),\n+        To(x[4]), To(x[5]), To(x[6]), To(x[7])\n+    };\n+}\n+\n+#define _(name, from, to, size) \\\n+auto name(V<from, size> x) { return cvt##size<from, to>(x); }\n+// integral -> double\n+_(vcvtudq2pd, uint32_t, double, 4)\n+_(vcvtudq2pd, uint32_t, double, 8)\n+\n+_( cvttps2udq, float, uint32_t,  4)\n+_(vcvttps2udq, float, uint32_t,  8)\n+\n+// double -> integral\n+_(vcvttpd2udq, double, uint32_t, 4)"}]}