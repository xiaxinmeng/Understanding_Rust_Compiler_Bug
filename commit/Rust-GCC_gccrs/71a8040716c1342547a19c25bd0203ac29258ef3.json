{"sha": "71a8040716c1342547a19c25bd0203ac29258ef3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFhODA0MDcxNmMxMzQyNTQ3YTE5YzI1YmQwMjAzYWMyOTI1OGVmMw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-11-09T23:12:42Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-11-09T23:12:42Z"}, "message": "c++: Fix ICE with variadic concepts and aliases [PR93907]\n\nThis patch (naively) extends the PR93907 fix to also apply to variadic\nconcepts invoked with a type argument pack.  Without this, we ICE on\nthe below testcase (a variadic version of concepts-using2.C) in the same\nmanner as we used to on concepts-using2.C before r10-7133.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/93907\n\t* constraint.cc (tsubst_parameter_mapping): Also canonicalize\n\tthe type arguments of a TYPE_ARGUMENT_PACk.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/93907\n\t* g++.dg/cpp2a/concepts-using3.C: New test, based off of\n\tconcepts-using2.C.", "tree": {"sha": "edadddaaefefcc9e7f9be09b28e6b71849d1dee3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edadddaaefefcc9e7f9be09b28e6b71849d1dee3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71a8040716c1342547a19c25bd0203ac29258ef3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71a8040716c1342547a19c25bd0203ac29258ef3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71a8040716c1342547a19c25bd0203ac29258ef3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71a8040716c1342547a19c25bd0203ac29258ef3/comments", "author": null, "committer": null, "parents": [{"sha": "32ff3309ae5a17b3a504aef3361a8c1c30e49f2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32ff3309ae5a17b3a504aef3361a8c1c30e49f2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32ff3309ae5a17b3a504aef3361a8c1c30e49f2c"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "c871a8ab86a807420a8f0a6c48662cfaf16440dc", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a8040716c1342547a19c25bd0203ac29258ef3/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a8040716c1342547a19c25bd0203ac29258ef3/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=71a8040716c1342547a19c25bd0203ac29258ef3", "patch": "@@ -2252,6 +2252,16 @@ tsubst_parameter_mapping (tree map, tree args, subst_info info)\n \t  new_arg = tsubst_template_arg (arg, args, complain, in_decl);\n \t  if (TYPE_P (new_arg))\n \t    new_arg = canonicalize_type_argument (new_arg, complain);\n+\t  if (TREE_CODE (new_arg) == TYPE_ARGUMENT_PACK)\n+\t    {\n+\t      tree pack_args = ARGUMENT_PACK_ARGS (new_arg);\n+\t      for (int i = 0; i < TREE_VEC_LENGTH (pack_args); i++)\n+\t\t{\n+\t\t  tree& pack_arg = TREE_VEC_ELT (pack_args, i);\n+\t\t  if (TYPE_P (pack_arg))\n+\t\t    pack_arg = canonicalize_type_argument (pack_arg, complain);\n+\t\t}\n+\t    }\n \t}\n       if (new_arg == error_mark_node)\n \treturn error_mark_node;"}, {"sha": "2c8ad40d10430bb54145f0b0713167af31d05e8e", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-using3.C", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a8040716c1342547a19c25bd0203ac29258ef3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-using3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a8040716c1342547a19c25bd0203ac29258ef3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-using3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-using3.C?ref=71a8040716c1342547a19c25bd0203ac29258ef3", "patch": "@@ -0,0 +1,52 @@\n+// PR c++/93907\n+// { dg-options -std=gnu++20 }\n+\n+// This testcase is a variadic version of concepts-using2.C; the only\n+// difference is that 'cd' and 'ce' are now variadic concepts.\n+\n+template <int a> struct c {\n+  static constexpr int d = a;\n+  typedef c e;\n+};\n+template <typename> struct f;\n+template <typename b> using g = typename f<b>::e;\n+struct b;\n+template <typename b> struct f { using e = b; };\n+template <typename ai> struct m { typedef g<ai> aj; };\n+template <typename b> struct n { typedef typename m<b>::aj e; };\n+template <typename b> using an = typename n<b>::e;\n+template <typename> constexpr bool ao = c<true>::d;\n+template <typename> constexpr bool i = c<1>::d;\n+template <typename> concept bb = i<b>;\n+#ifdef __SIZEOF_INT128__\n+using cc = __int128;\n+#else\n+using cc = long long;\n+#endif\n+template <typename...> concept cd = bb<cc>;\n+template <typename... bt> concept ce = requires { requires cd<bt...>; };\n+template <typename bt> concept h = ce<bt>;\n+template <typename bt> concept l = h<bt>;\n+template <typename> concept cl = ao<b>;\n+template <typename b> concept cp = requires(b j) {\n+  requires h<an<decltype(j.begin())>>;\n+};\n+struct o {\n+  template <cl b> requires cp<b> auto operator()(b) {}\n+};\n+template <typename b> using cm = decltype(o{}(b()));\n+template <typename bt> concept ct = l<bt>;\n+template <typename da> concept dd = ct<cm<da>>;\n+template <typename da> concept de = dd<da>;\n+struct {\n+  template <de da, typename b> void operator()(da, b);\n+} di;\n+struct p {\n+  void begin();\n+};\n+template <typename> using df = p;\n+template <int> void q() {\n+  df<int> k;\n+  int d;\n+  di(k, d);\n+}"}]}