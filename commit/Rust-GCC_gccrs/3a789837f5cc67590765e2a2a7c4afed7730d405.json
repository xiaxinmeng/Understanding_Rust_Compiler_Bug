{"sha": "3a789837f5cc67590765e2a2a7c4afed7730d405", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E3ODk4MzdmNWNjNjc1OTA3NjVlMmEyYTdjNGFmZWQ3NzMwZDQwNQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-11-12T03:38:15Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-11-12T03:38:15Z"}, "message": "re PR c/44782 (implement -ferror-limit=)\n\ngcc/\n\tPR c/44782\n\t* common.opt (fmax-errors=): New option.\n\t* opts.c (common_handle_option) [OPT_fmax_errors_]: Handle it.\n\t* diagnostic.h (struct diagnostic_context): Add max_errors field.\n\t* diagnostic.c (diagnostic_initialize): Initialize it.\n\t(diagnostic_action_after_output): Exit if more than max_errors\n\thave been output.\n\t* doc/invoke.texi (Warning Options): Add -fmax-errors.\n\t(-fmax-errors): Document.\n\ngcc/fortran/\n\tPR c/44782\n\t* options.c (gfc_post_options): Initialize gfc_option.max_errors.\n\t(gfc_handle_option) [OPT_fmax_errors_]: Remove.\n\t* lang.opt (fmax-errors=): Remove.\n\ngcc/testsuite/\n\tPR c/44782\n\t* c-c++-common/fmax-errors.c: New test.\n\nFrom-SVN: r166644", "tree": {"sha": "c56e28b52155f9b2ee4a677a9f4053bfc8c50f83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c56e28b52155f9b2ee4a677a9f4053bfc8c50f83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a789837f5cc67590765e2a2a7c4afed7730d405", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a789837f5cc67590765e2a2a7c4afed7730d405", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a789837f5cc67590765e2a2a7c4afed7730d405", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a789837f5cc67590765e2a2a7c4afed7730d405/comments", "author": null, "committer": null, "parents": [{"sha": "f03d897af30c62fe6e8e53c582cebefb1c35cd25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f03d897af30c62fe6e8e53c582cebefb1c35cd25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f03d897af30c62fe6e8e53c582cebefb1c35cd25"}], "stats": {"total": 82, "additions": 73, "deletions": 9}, "files": [{"sha": "b26c6e2dc08baaa33a72c0a9b9176b0d9044b1c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a789837f5cc67590765e2a2a7c4afed7730d405/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a789837f5cc67590765e2a2a7c4afed7730d405/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a789837f5cc67590765e2a2a7c4afed7730d405", "patch": "@@ -1,3 +1,15 @@\n+2010-11-11  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\tPR c/44782\n+\t* common.opt (fmax-errors=): New option.\n+\t* opts.c (common_handle_option) [OPT_fmax_errors_]: Handle it.\n+\t* diagnostic.h (struct diagnostic_context): Add max_errors field.\n+\t* diagnostic.c (diagnostic_initialize): Initialize it.\n+\t(diagnostic_action_after_output): Exit if more than max_errors\n+\thave been output.\n+\t* doc/invoke.texi (Warning Options): Add -fmax-errors.\n+\t(-fmax-errors): Document.\n+\n 2010-11-11  Richard Henderson  <rth@redhat.com>\n \n         * optabs.c (init_optabs): Init {fma,fms,fnma,fnms}_optab properly."}, {"sha": "d9006eec4031b85ae22e93dedbc799fac09bd904", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a789837f5cc67590765e2a2a7c4afed7730d405/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a789837f5cc67590765e2a2a7c4afed7730d405/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=3a789837f5cc67590765e2a2a7c4afed7730d405", "patch": "@@ -1170,6 +1170,10 @@ fmath-errno\n Common Report Var(flag_errno_math) Init(1) Optimization\n Set errno after built-in math functions\n \n+fmax-errors=\n+Common Joined RejectNegative UInteger Var(flag_max_errors)\n+-fmax-errors=<number>\tMaximum number of errors to report\n+\n fmem-report\n Common Report Var(mem_report)\n Report on permanent memory allocation"}, {"sha": "d297cdda0ca857c2de8ae49ac56a35a169099b4c", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a789837f5cc67590765e2a2a7c4afed7730d405/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a789837f5cc67590765e2a2a7c4afed7730d405/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=3a789837f5cc67590765e2a2a7c4afed7730d405", "patch": "@@ -109,6 +109,7 @@ diagnostic_initialize (diagnostic_context *context, int n_opts)\n   context->fatal_errors = false;\n   context->dc_inhibit_warnings = false;\n   context->dc_warn_system_headers = false;\n+  context->max_errors = 0;\n   context->internal_error = NULL;\n   diagnostic_starter (context) = default_diagnostic_starter;\n   diagnostic_finalizer (context) = default_diagnostic_finalizer;\n@@ -219,6 +220,17 @@ diagnostic_action_after_output (diagnostic_context *context,\n \t  diagnostic_finish (context);\n \t  exit (FATAL_EXIT_CODE);\n \t}\n+      if (context->max_errors != 0\n+\t  && ((unsigned) (diagnostic_kind_count (context, DK_ERROR)\n+\t\t\t  + diagnostic_kind_count (context, DK_SORRY))\n+\t      >= context->max_errors))\n+\t{\n+\t  fnotice (stderr,\n+\t\t   \"compilation terminated due to -fmax-errors=%u.\\n\",\n+\t\t   context->max_errors);\n+\t  diagnostic_finish (context);\n+\t  exit (FATAL_EXIT_CODE);\n+\t}\n       break;\n \n     case DK_ICE:"}, {"sha": "80743549a35b1cb24238b295ad5df7c3a68fa94d", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a789837f5cc67590765e2a2a7c4afed7730d405/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a789837f5cc67590765e2a2a7c4afed7730d405/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=3a789837f5cc67590765e2a2a7c4afed7730d405", "patch": "@@ -128,6 +128,9 @@ struct diagnostic_context\n   /* True if warnings should be given in system headers.  */\n   bool dc_warn_system_headers;\n \n+  /* Maximum number of errors to report.  */\n+  unsigned int max_errors;\n+\n   /* This function is called before any message is printed out.  It is\n      responsible for preparing message prefix and such.  For example, it\n      might say:"}, {"sha": "1a658acbb4cd6c29c0f68f7971f638cc1e528062", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a789837f5cc67590765e2a2a7c4afed7730d405/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a789837f5cc67590765e2a2a7c4afed7730d405/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3a789837f5cc67590765e2a2a7c4afed7730d405", "patch": "@@ -229,7 +229,8 @@ Objective-C and Objective-C++ Dialects}.\n \n @item Warning Options\n @xref{Warning Options,,Options to Request or Suppress Warnings}.\n-@gccoptlist{-fsyntax-only  -pedantic  -pedantic-errors @gol\n+@gccoptlist{-fsyntax-only  fmax-errors=@var{n}  -pedantic @gol\n+-pedantic-errors @gol\n -w  -Wextra  -Wall  -Waddress  -Waggregate-return  -Warray-bounds @gol\n -Wno-attributes -Wno-builtin-macro-redefined @gol\n -Wc++-compat -Wc++0x-compat -Wcast-align  -Wcast-qual  @gol\n@@ -2775,6 +2776,15 @@ warnings but control the kinds of diagnostics produced by GCC.\n @opindex fsyntax-only\n Check the code for syntax errors, but don't do anything beyond that.\n \n+@item -fmax-errors=@var{n}\n+@opindex fmax-errors\n+Limits the maximum number of error messages to @var{n}, at which point\n+GCC bails out rather than attempting to continue processing the source\n+code.  If @var{n} is 0 (the default), there is no limit on the number\n+of error messages produced.  If @option{-Wfatal-errors} is also\n+specified, then @option{-Wfatal-errors} takes precedence over this\n+option.\n+\n @item -w\n @opindex w\n Inhibit all warning messages."}, {"sha": "55e5058232949fe1641bfab84f415effde95fd5e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a789837f5cc67590765e2a2a7c4afed7730d405/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a789837f5cc67590765e2a2a7c4afed7730d405/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3a789837f5cc67590765e2a2a7c4afed7730d405", "patch": "@@ -1,3 +1,10 @@\n+2010-11-11  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\tPR c/44782\n+\t* options.c (gfc_post_options): Initialize gfc_option.max_errors.\n+\t(gfc_handle_option) [OPT_fmax_errors_]: Remove.\n+\t* lang.opt (fmax-errors=): Remove.\n+\n 2010-11-11  Steven G. Kargl <kargl@gcc.gnu.org>\n \n \t* symbol.c (verify_bind_c_derived_type):  Accept BIND(C) on an empty"}, {"sha": "371b71d809f37f27602ec0cf8378a2987324ee7b", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a789837f5cc67590765e2a2a7c4afed7730d405/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a789837f5cc67590765e2a2a7c4afed7730d405/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=3a789837f5cc67590765e2a2a7c4afed7730d405", "patch": "@@ -438,10 +438,6 @@ fmax-array-constructor=\n Fortran RejectNegative Joined UInteger\n -fmax-array-constructor=<n>\tMaximum number of objects in an array constructor\n \n-fmax-errors=\n-Fortran RejectNegative Joined UInteger\n--fmax-errors=<n>\tMaximum number of errors to report\n-\n fmax-identifier-length=\n Fortran RejectNegative Joined UInteger\n -fmax-identifier-length=<n>\tMaximum identifier length"}, {"sha": "dd54a7d66efa84b8bd88a76e2cda13134e712083", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a789837f5cc67590765e2a2a7c4afed7730d405/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a789837f5cc67590765e2a2a7c4afed7730d405/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=3a789837f5cc67590765e2a2a7c4afed7730d405", "patch": "@@ -273,6 +273,10 @@ gfc_post_options (const char **pfilename)\n   if (flag_compare_debug)\n     gfc_option.dump_fortran_original = 0;\n \n+  /* Make -fmax-errors visible to gfortran's diagnostic machinery.  */\n+  if (global_options_set.x_flag_max_errors)\n+    gfc_option.max_errors = flag_max_errors;\n+\n   /* Verify the input file name.  */\n   if (!filename || strcmp (filename, \"-\") == 0)\n     {\n@@ -760,10 +764,6 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_option.flag_max_array_constructor = value > 65535 ? value : 65535;\n       break;\n \n-    case OPT_fmax_errors_:\n-      gfc_option.max_errors = value;\n-      break;\n-\n     case OPT_fmax_stack_var_size_:\n       gfc_option.flag_max_stack_var_size = value;\n       break;"}, {"sha": "f42ac53e3026fc82beb99b8eabf89d27542a9134", "filename": "gcc/opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a789837f5cc67590765e2a2a7c4afed7730d405/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a789837f5cc67590765e2a2a7c4afed7730d405/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=3a789837f5cc67590765e2a2a7c4afed7730d405", "patch": "@@ -2155,6 +2155,10 @@ common_handle_option (struct gcc_options *opts,\n       dc->dc_inhibit_warnings = true;\n       break;\n \n+    case OPT_fmax_errors_:\n+      dc->max_errors = value;\n+      break;\n+\n     case OPT_fuse_linker_plugin:\n       /* No-op. Used by the driver and passed to us because it starts with f.*/\n       break;"}, {"sha": "e67a2964eee576961d2966022048eb4c2aa53df7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a789837f5cc67590765e2a2a7c4afed7730d405/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a789837f5cc67590765e2a2a7c4afed7730d405/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3a789837f5cc67590765e2a2a7c4afed7730d405", "patch": "@@ -1,3 +1,8 @@\n+2010-11-11  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\tPR c/44782\n+\t* c-c++-common/fmax-errors.c: New test.\n+\n 2010-11-11  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.target/i386/sse-24.c: Use -ffp-contract."}, {"sha": "1ef78eb9eb8ff870bd0baf866a86340808f4df7a", "filename": "gcc/testsuite/c-c++-common/fmax-errors.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a789837f5cc67590765e2a2a7c4afed7730d405/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffmax-errors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a789837f5cc67590765e2a2a7c4afed7730d405/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffmax-errors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffmax-errors.c?ref=3a789837f5cc67590765e2a2a7c4afed7730d405", "patch": "@@ -0,0 +1,11 @@\n+/* PR c/44782 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fmax-errors=3\" } */\n+\n+void foo (unsigned int i, unsigned int j)\n+{\n+  (i) ();\t\t\t/* { dg-error \"\" } */\n+  (j) ();\t\t\t/* { dg-error \"\" } */\n+  (i+j) ();\t\t\t/* { dg-error \"\" } */\n+  (i*j) ();\t\t\t/* no error here due to -fmax-errors */\n+} /* { dg-prune-output \"compilation terminated\" } */"}]}