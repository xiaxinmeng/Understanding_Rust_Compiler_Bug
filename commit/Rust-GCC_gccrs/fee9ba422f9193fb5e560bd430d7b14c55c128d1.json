{"sha": "fee9ba422f9193fb5e560bd430d7b14c55c128d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVlOWJhNDIyZjkxOTNmYjVlNTYwYmQ0MzBkN2IxNGM1NWMxMjhkMQ==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2014-05-23T12:13:56Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2014-05-23T12:13:56Z"}, "message": "[AARCH64] Support tail indirect function call.\n\nFrom-SVN: r210861", "tree": {"sha": "328b22ad3f498f9acde8e193b6397702b1e9f4a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/328b22ad3f498f9acde8e193b6397702b1e9f4a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fee9ba422f9193fb5e560bd430d7b14c55c128d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fee9ba422f9193fb5e560bd430d7b14c55c128d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fee9ba422f9193fb5e560bd430d7b14c55c128d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fee9ba422f9193fb5e560bd430d7b14c55c128d1/comments", "author": null, "committer": null, "parents": [{"sha": "09af4b4c423bf47d4b7dbcf1fc8ebd31a3a1769d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09af4b4c423bf47d4b7dbcf1fc8ebd31a3a1769d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09af4b4c423bf47d4b7dbcf1fc8ebd31a3a1769d"}], "stats": {"total": 94, "additions": 74, "deletions": 20}, "files": [{"sha": "ec102fe4bbf9a233f1f4befe70acb1d8fdff5e62", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee9ba422f9193fb5e560bd430d7b14c55c128d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee9ba422f9193fb5e560bd430d7b14c55c128d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fee9ba422f9193fb5e560bd430d7b14c55c128d1", "patch": "@@ -1,3 +1,17 @@\n+2014-05-23  Jiong Wang   <jiong.wang@arm.com>\n+\n+\t* config/aarch64/predicates.md (aarch64_call_insn_operand): New\n+\tpredicate.\n+\t* config/aarch64/constraints.md (\"Ucs\", \"Usf\"):  New constraints.\n+\t* config/aarch64/aarch64.md (*sibcall_insn, *sibcall_value_insn):\n+\tAdjust for tailcalling through registers.\n+\t* config/aarch64/aarch64.h (enum reg_class): New caller save\n+\tregister class.\n+\t(REG_CLASS_NAMES): Likewise.\n+\t(REG_CLASS_CONTENTS): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_function_ok_for_sibcall):\n+\tAllow tailcalling without decls.\n+\n 2014-05-23  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* gimplify.c (omp_notice_variable) <case OMP_CLAUSE_DEFAULT_NONE>:"}, {"sha": "c2f6c4f483b33aeb80102bd019c363e6b96f6b6d", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee9ba422f9193fb5e560bd430d7b14c55c128d1/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee9ba422f9193fb5e560bd430d7b14c55c128d1/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=fee9ba422f9193fb5e560bd430d7b14c55c128d1", "patch": "@@ -1268,18 +1268,10 @@ aarch64_expand_mov_immediate (rtx dest, rtx imm)\n }\n \n static bool\n-aarch64_function_ok_for_sibcall (tree decl, tree exp ATTRIBUTE_UNUSED)\n+aarch64_function_ok_for_sibcall (tree decl ATTRIBUTE_UNUSED,\n+\t\t\t\t tree exp ATTRIBUTE_UNUSED)\n {\n-  /* Indirect calls are not currently supported.  */\n-  if (decl == NULL)\n-    return false;\n-\n-  /* Cannot tail-call to long-calls, since these are outside of the\n-     range of a branch instruction (we could handle this if we added\n-     support for indirect tail-calls.  */\n-  if (aarch64_decl_is_long_call_p (decl))\n-    return false;\n-\n+  /* Currently, always true.  */\n   return true;\n }\n \n@@ -4360,6 +4352,7 @@ aarch64_class_max_nregs (reg_class_t regclass, enum machine_mode mode)\n {\n   switch (regclass)\n     {\n+    case CALLER_SAVE_REGS:\n     case POINTER_REGS:\n     case GENERAL_REGS:\n     case ALL_REGS:"}, {"sha": "ced5a5e92521a5791188269169c81b23788c8c1c", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee9ba422f9193fb5e560bd430d7b14c55c128d1/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee9ba422f9193fb5e560bd430d7b14c55c128d1/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=fee9ba422f9193fb5e560bd430d7b14c55c128d1", "patch": "@@ -408,6 +408,7 @@ extern unsigned long aarch64_tune_flags;\n enum reg_class\n {\n   NO_REGS,\n+  CALLER_SAVE_REGS,\n   GENERAL_REGS,\n   STACK_REG,\n   POINTER_REGS,\n@@ -422,6 +423,7 @@ enum reg_class\n #define REG_CLASS_NAMES\t\t\t\t\\\n {\t\t\t\t\t\t\\\n   \"NO_REGS\",\t\t\t\t\t\\\n+  \"CALLER_SAVE_REGS\",\t\t\t\t\\\n   \"GENERAL_REGS\",\t\t\t\t\\\n   \"STACK_REG\",\t\t\t\t\t\\\n   \"POINTER_REGS\",\t\t\t\t\\\n@@ -433,6 +435,7 @@ enum reg_class\n #define REG_CLASS_CONTENTS\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   { 0x00000000, 0x00000000, 0x00000000 },\t/* NO_REGS */\t\t\\\n+  { 0x0007ffff, 0x00000000, 0x00000000 },\t/* CALLER_SAVE_REGS */\t\\\n   { 0x7fffffff, 0x00000000, 0x00000003 },\t/* GENERAL_REGS */\t\\\n   { 0x80000000, 0x00000000, 0x00000000 },\t/* STACK_REG */\t\t\\\n   { 0xffffffff, 0x00000000, 0x00000003 },\t/* POINTER_REGS */\t\\"}, {"sha": "c3783149dd272e4112f64983b8179649bd19a1f0", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee9ba422f9193fb5e560bd430d7b14c55c128d1/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee9ba422f9193fb5e560bd430d7b14c55c128d1/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=fee9ba422f9193fb5e560bd430d7b14c55c128d1", "patch": "@@ -523,6 +523,10 @@\n \t      (use (match_operand 2 \"\" \"\"))])]\n   \"\"\n   {\n+    if (!REG_P (XEXP (operands[0], 0))\n+       && (GET_CODE (XEXP (operands[0], 0)) != SYMBOL_REF))\n+     XEXP (operands[0], 0) = force_reg (Pmode, XEXP (operands[0], 0));\n+\n     if (operands[2] == NULL_RTX)\n       operands[2] = const0_rtx;\n   }\n@@ -536,31 +540,38 @@\n \t      (use (match_operand 3 \"\" \"\"))])]\n   \"\"\n   {\n+    if (!REG_P (XEXP (operands[1], 0))\n+       && (GET_CODE (XEXP (operands[1], 0)) != SYMBOL_REF))\n+     XEXP (operands[1], 0) = force_reg (Pmode, XEXP (operands[1], 0));\n+\n     if (operands[3] == NULL_RTX)\n       operands[3] = const0_rtx;\n   }\n )\n \n (define_insn \"*sibcall_insn\"\n-  [(call (mem:DI (match_operand:DI 0 \"\" \"X\"))\n+  [(call (mem:DI (match_operand:DI 0 \"aarch64_call_insn_operand\" \"Ucs, Usf\"))\n \t (match_operand 1 \"\" \"\"))\n    (return)\n    (use (match_operand 2 \"\" \"\"))]\n-  \"GET_CODE (operands[0]) == SYMBOL_REF\"\n-  \"b\\\\t%a0\"\n-  [(set_attr \"type\" \"branch\")]\n-\n+  \"SIBLING_CALL_P (insn)\"\n+  \"@\n+   br\\\\t%0\n+   b\\\\t%a0\"\n+  [(set_attr \"type\" \"branch, branch\")]\n )\n \n (define_insn \"*sibcall_value_insn\"\n   [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:DI (match_operand 1 \"\" \"X\"))\n+\t(call (mem:DI (match_operand 1 \"aarch64_call_insn_operand\" \"Ucs, Usf\"))\n \t      (match_operand 2 \"\" \"\")))\n    (return)\n    (use (match_operand 3 \"\" \"\"))]\n-  \"GET_CODE (operands[1]) == SYMBOL_REF\"\n-  \"b\\\\t%a1\"\n-  [(set_attr \"type\" \"branch\")]\n+  \"SIBLING_CALL_P (insn)\"\n+  \"@\n+   br\\\\t%1\n+   b\\\\t%a1\"\n+  [(set_attr \"type\" \"branch, branch\")]\n )\n \n ;; Call subroutine returning any type."}, {"sha": "807d0b172c883af48bed04ae3f03224983d7cec6", "filename": "gcc/config/aarch64/constraints.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee9ba422f9193fb5e560bd430d7b14c55c128d1/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee9ba422f9193fb5e560bd430d7b14c55c128d1/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fconstraints.md?ref=fee9ba422f9193fb5e560bd430d7b14c55c128d1", "patch": "@@ -21,6 +21,9 @@\n (define_register_constraint \"k\" \"STACK_REG\"\n   \"@internal The stack register.\")\n \n+(define_register_constraint \"Ucs\" \"CALLER_SAVE_REGS\"\n+  \"@internal The caller save registers.\")\n+\n (define_register_constraint \"w\" \"FP_REGS\"\n   \"Floating point and SIMD vector registers.\")\n \n@@ -92,6 +95,10 @@\n   (and (match_code \"const_int\")\n        (match_test \"(unsigned HOST_WIDE_INT) ival < 64\")))\n \n+(define_constraint \"Usf\"\n+  \"@internal Usf is a symbol reference.\"\n+  (match_code \"symbol_ref\"))\n+\n (define_constraint \"UsM\"\n   \"@internal\n   A constraint that matches the immediate constant -1.\""}, {"sha": "2702a3c8d830963197a933eac3c0cf3869ef29db", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee9ba422f9193fb5e560bd430d7b14c55c128d1/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee9ba422f9193fb5e560bd430d7b14c55c128d1/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=fee9ba422f9193fb5e560bd430d7b14c55c128d1", "patch": "@@ -26,6 +26,10 @@\n \t\t\t      && GET_MODE_CLASS (GET_MODE (op)) == MODE_CC\"))))\n )\n \n+(define_predicate \"aarch64_call_insn_operand\"\n+  (ior (match_code \"symbol_ref\")\n+       (match_operand 0 \"register_operand\")))\n+\n (define_predicate \"aarch64_simd_register\"\n   (and (match_code \"reg\")\n        (ior (match_test \"REGNO_REG_CLASS (REGNO (op)) == FP_LO_REGS\")"}, {"sha": "a765cb88a5232eff3735eaa634bdc23c77c06c8d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee9ba422f9193fb5e560bd430d7b14c55c128d1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee9ba422f9193fb5e560bd430d7b14c55c128d1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fee9ba422f9193fb5e560bd430d7b14c55c128d1", "patch": "@@ -1,3 +1,7 @@\n+2014-05-23  Jiong Wang   <jiong.wang@arm.com>\n+\n+\t* gcc.target/aarch64/tail_indirect_call_1.c: New.\n+\n 2014-05-23  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/cpp1y/lambda-init9.C: New."}, {"sha": "4759d20df9cfe8fffad17c47959115656a7bc89e", "filename": "gcc/testsuite/gcc.target/aarch64/tail_indirect_call_1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee9ba422f9193fb5e560bd430d7b14c55c128d1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftail_indirect_call_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee9ba422f9193fb5e560bd430d7b14c55c128d1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftail_indirect_call_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftail_indirect_call_1.c?ref=fee9ba422f9193fb5e560bd430d7b14c55c128d1", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef void FP (int);\n+\n+/* { dg-final { scan-assembler \"br\" } } */\n+/* { dg-final { scan-assembler-not \"blr\" } } */\n+void\n+f1 (FP fp, int n)\n+{\n+  (fp) (n);\n+}\n+\n+void\n+f2 (int n, FP fp)\n+{\n+  (fp) (n);\n+}"}]}