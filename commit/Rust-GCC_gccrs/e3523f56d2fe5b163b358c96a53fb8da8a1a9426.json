{"sha": "e3523f56d2fe5b163b358c96a53fb8da8a1a9426", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM1MjNmNTZkMmZlNWIxNjNiMzU4Yzk2YTUzZmI4ZGE4YTFhOTQyNg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2005-01-04T21:42:52Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2005-01-04T21:42:52Z"}, "message": "fold-const.c (fold_single_bit_test): Delete unreachable handling of TRUTH_NOT_EXPR.\n\n\n\t* fold-const.c (fold_single_bit_test): Delete unreachable handling\n\tof TRUTH_NOT_EXPR.\n\t(fold): Don't call fold_single_bit_test with a TRUTH_NOT_EXPR, as\n\tall the cases handled by it are inverted by invert_truthvalue.\n\nFrom-SVN: r92909", "tree": {"sha": "faa498a0ab57d1aac5113d7815e952b693d5d311", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/faa498a0ab57d1aac5113d7815e952b693d5d311"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3523f56d2fe5b163b358c96a53fb8da8a1a9426", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3523f56d2fe5b163b358c96a53fb8da8a1a9426", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3523f56d2fe5b163b358c96a53fb8da8a1a9426", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3523f56d2fe5b163b358c96a53fb8da8a1a9426/comments", "author": null, "committer": null, "parents": [{"sha": "242746f19751e1942bc851c5eee9b8bfca16169c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/242746f19751e1942bc851c5eee9b8bfca16169c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/242746f19751e1942bc851c5eee9b8bfca16169c"}], "stats": {"total": 30, "additions": 8, "deletions": 22}, "files": [{"sha": "96b0483a8f930298df844fb29b87ad9e60f3c1aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3523f56d2fe5b163b358c96a53fb8da8a1a9426/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3523f56d2fe5b163b358c96a53fb8da8a1a9426/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3523f56d2fe5b163b358c96a53fb8da8a1a9426", "patch": "@@ -1,3 +1,10 @@\n+2005-01-04  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (fold_single_bit_test): Delete unreachable handling\n+\tof TRUTH_NOT_EXPR.\n+\t(fold): Don't call fold_single_bit_test with a TRUTH_NOT_EXPR, as\n+\tall the cases handled by it are inverted by invert_truthvalue.\n+\n 2005-01-04  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* config/sparc/sparc.md (save_register_windowdi): Add missing mode."}, {"sha": "a3d1f1d5350b64e24469ed07047104ed30bb741e", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3523f56d2fe5b163b358c96a53fb8da8a1a9426/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3523f56d2fe5b163b358c96a53fb8da8a1a9426/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e3523f56d2fe5b163b358c96a53fb8da8a1a9426", "patch": "@@ -5829,22 +5829,6 @@ tree\n fold_single_bit_test (enum tree_code code, tree arg0, tree arg1,\n \t\t      tree result_type)\n {\n-  /* If this is a TRUTH_NOT_EXPR, it may have a single bit test inside\n-     operand 0.  */\n-  if (code == TRUTH_NOT_EXPR)\n-    {\n-      code = TREE_CODE (arg0);\n-      if (code != NE_EXPR && code != EQ_EXPR)\n-\treturn NULL_TREE;\n-\n-      /* Extract the arguments of the EQ/NE.  */\n-      arg1 = TREE_OPERAND (arg0, 1);\n-      arg0 = TREE_OPERAND (arg0, 0);\n-\n-      /* This requires us to invert the code.  */\n-      code = (code == EQ_EXPR ? NE_EXPR : EQ_EXPR);\n-    }\n-\n   /* If this is testing a single bit, we can optimize the test.  */\n   if ((code == NE_EXPR || code == EQ_EXPR)\n       && TREE_CODE (arg0) == BIT_AND_EXPR && integer_zerop (arg1)\n@@ -8043,12 +8027,7 @@ fold (tree expr)\n       tem = invert_truthvalue (arg0);\n       /* Avoid infinite recursion.  */\n       if (TREE_CODE (tem) == TRUTH_NOT_EXPR)\n-\t{\n-\t  tem = fold_single_bit_test (code, arg0, arg1, type);\n-\t  if (tem)\n-\t    return tem;\n-\t  return t;\n-\t}\n+\treturn t;\n       return fold_convert (type, tem);\n \n     case TRUTH_ANDIF_EXPR:"}]}