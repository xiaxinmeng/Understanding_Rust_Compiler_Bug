{"sha": "eef4632c6b3c95aadf73a46ace6aba263c10e709", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVmNDYzMmM2YjNjOTVhYWRmNzNhNDZhY2U2YWJhMjYzYzEwZTcwOQ==", "commit": {"author": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2018-04-13T23:13:40Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2018-04-13T23:13:40Z"}, "message": "rs6000: Fix _mm_slli_epi{32,64} for shift values 16 through 31 and negative (PR84302)\n\nThe powerpc versions of _mm_slli_epi32 and __mm_slli_epi64 in emmintrin.h\ndo not properly handle shift values between 16 and 31, inclusive.\nThese are setting up the shift with vec_splat_s32, which only accepts\n*5 bit signed* shift values, or a range of -16 to 15.  Values above 15\nproduce an error:\n\n  error: argument 1 must be a 5-bit signed literal\n\nFix is to effectively reduce the range for which vec_splat_s32 is used\nto < 32 and use vec_splats otherwise.\n\nAlso, __mm_slli_epi{16,32,64}, when given a negative shift value,\nshould always return a vector of {0}.\n\n\n\tPR target/83402\n\t* config/rs6000/emmintrin.h (_mm_slli_epi{16,32,64}):\n\tEnsure that vec_splat_s32 is only called with 0 <= shift < 16.\n\tEnsure negative shifts result in {0}.\n\ngcc/testsuite/\n\tPR target/83402\n\t* gcc.target/powerpc/sse2-psllw-1.c: Refactor and add tests for\n\tseveral values:  positive, negative, and zero.\n\t* gcc.target/powerpc/sse2-pslld-1.c: Same.\n\t* gcc.target/powerpc/sse2-psllq-1.c: Same.\n\nFrom-SVN: r259380", "tree": {"sha": "9b216126cd5cafcb739ed60ff7f646c443283efa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b216126cd5cafcb739ed60ff7f646c443283efa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eef4632c6b3c95aadf73a46ace6aba263c10e709", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eef4632c6b3c95aadf73a46ace6aba263c10e709", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eef4632c6b3c95aadf73a46ace6aba263c10e709", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eef4632c6b3c95aadf73a46ace6aba263c10e709/comments", "author": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "53bdbcbc1265cd2a35bc24d5d4f36510e34174fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53bdbcbc1265cd2a35bc24d5d4f36510e34174fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53bdbcbc1265cd2a35bc24d5d4f36510e34174fe"}], "stats": {"total": 224, "additions": 144, "deletions": 80}, "files": [{"sha": "bbd731bc4151ccc3b7b76eb88aab47845434306d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eef4632c6b3c95aadf73a46ace6aba263c10e709/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eef4632c6b3c95aadf73a46ace6aba263c10e709/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eef4632c6b3c95aadf73a46ace6aba263c10e709", "patch": "@@ -1,3 +1,10 @@\n+2018-04-13  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\tPR target/83402\n+\t* config/rs6000/emmintrin.h (_mm_slli_epi{16,32,64}):\n+\tEnsure that vec_splat_s32 is only called with 0 <= shift < 16.\n+\tEnsure negative shifts result in {0}.\n+\n 2018-04-13  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/79916"}, {"sha": "5d27a80339cee2b53ef2e5f377731250b48d5263", "filename": "gcc/config/rs6000/emmintrin.h", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eef4632c6b3c95aadf73a46ace6aba263c10e709/gcc%2Fconfig%2Frs6000%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eef4632c6b3c95aadf73a46ace6aba263c10e709/gcc%2Fconfig%2Frs6000%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Femmintrin.h?ref=eef4632c6b3c95aadf73a46ace6aba263c10e709", "patch": "@@ -1488,12 +1488,12 @@ _mm_slli_epi16 (__m128i __A, int __B)\n   __v8hu lshift;\n   __v8hi result = { 0, 0, 0, 0, 0, 0, 0, 0 };\n \n-  if (__B < 16)\n+  if (__B >= 0 && __B < 16)\n     {\n       if (__builtin_constant_p(__B))\n-\t  lshift = (__v8hu) vec_splat_s16(__B);\n+\tlshift = (__v8hu) vec_splat_s16(__B);\n       else\n-\t  lshift = vec_splats ((unsigned short) __B);\n+\tlshift = vec_splats ((unsigned short) __B);\n \n       result = vec_vslh ((__v8hi) __A, lshift);\n     }\n@@ -1507,9 +1507,9 @@ _mm_slli_epi32 (__m128i __A, int __B)\n   __v4su lshift;\n   __v4si result = { 0, 0, 0, 0 };\n \n-  if (__B < 32)\n+  if (__B >= 0 && __B < 32)\n     {\n-      if (__builtin_constant_p(__B))\n+      if (__builtin_constant_p(__B) && __B < 16)\n \tlshift = (__v4su) vec_splat_s32(__B);\n       else\n \tlshift = vec_splats ((unsigned int) __B);\n@@ -1527,17 +1527,12 @@ _mm_slli_epi64 (__m128i __A, int __B)\n   __v2du lshift;\n   __v2di result = { 0, 0 };\n \n-  if (__B < 64)\n+  if (__B >= 0 && __B < 64)\n     {\n-      if (__builtin_constant_p(__B))\n-\t{\n-\t  if (__B < 32)\n-\t      lshift = (__v2du) vec_splat_s32(__B);\n-\t    else\n-\t      lshift = (__v2du) vec_splats((unsigned long long)__B);\n-\t}\n+      if (__builtin_constant_p(__B) && __B < 16)\n+\tlshift = (__v2du) vec_splat_s32(__B);\n       else\n-\t  lshift = (__v2du) vec_splats ((unsigned int) __B);\n+\tlshift = (__v2du) vec_splats ((unsigned int) __B);\n \n       result = vec_vsld ((__v2di) __A, lshift);\n     }"}, {"sha": "13bb25b5b2a5796c22513070c9be5d585ddbda9a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eef4632c6b3c95aadf73a46ace6aba263c10e709/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eef4632c6b3c95aadf73a46ace6aba263c10e709/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eef4632c6b3c95aadf73a46ace6aba263c10e709", "patch": "@@ -1,3 +1,11 @@\n+2018-04-13  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\tPR target/83402\n+\t* gcc.target/powerpc/sse2-psllw-1.c: Refactor and add tests for\n+\tseveral values:  positive, negative, and zero.\n+\t* gcc.target/powerpc/sse2-pslld-1.c: Same.\n+\t* gcc.target/powerpc/sse2-psllq-1.c: Same.\n+\n 2018-04-13  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/79916"}, {"sha": "835948bcb93b98d8c6f159214f148e0d612cb917", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pslld-1.c", "status": "modified", "additions": 40, "deletions": 22, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eef4632c6b3c95aadf73a46ace6aba263c10e709/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pslld-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eef4632c6b3c95aadf73a46ace6aba263c10e709/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pslld-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pslld-1.c?ref=eef4632c6b3c95aadf73a46ace6aba263c10e709", "patch": "@@ -13,32 +13,50 @@\n #define TEST sse2_test_pslld_1\n #endif\n \n-#define N 0xf\n-\n #include <emmintrin.h>\n \n-static __m128i\n-__attribute__((noinline, unused))\n-test (__m128i s1)\n-{\n-  return _mm_slli_epi32 (s1, N); \n-}\n+#define TEST_FUNC(id, N) \\\n+  static __m128i \\\n+  __attribute__((noinline, unused)) \\\n+  test##id (__m128i s1) \\\n+  { \\\n+    return _mm_slli_epi32 (s1, N);  \\\n+  }\n+\n+TEST_FUNC(0, 0)\n+TEST_FUNC(15, 15)\n+TEST_FUNC(16, 16)\n+TEST_FUNC(31, 31)\n+TEST_FUNC(neg1, -1)\n+TEST_FUNC(neg16, -16)\n+TEST_FUNC(neg32, -32)\n+TEST_FUNC(neg64, -64)\n+TEST_FUNC(neg128, -128)\n+\n+#define TEST_CODE(id, N) \\\n+  { \\\n+    int e[4] = {0}; \\\n+    union128i_d u, s; \\\n+    int i; \\\n+    s.x = _mm_set_epi32 (1, -2, 3, 4); \\\n+    u.x = test##id (s.x); \\\n+    if (N >= 0 && N < 32) \\\n+      for (i = 0; i < 4; i++) \\\n+        e[i] = s.a[i] << (N * (N >= 0)); \\\n+    if (check_union128i_d (u, e)) \\\n+      abort (); \\\n+  }\n \n static void\n TEST (void)\n {\n-  union128i_d u, s;\n-  int e[4] = {0};\n-  int i;\n- \n-  s.x = _mm_set_epi32 (1, -2, 3, 4);\n-\n-  u.x = test (s.x);\n-\n-  if (N < 32)\n-    for (i = 0; i < 4; i++)\n-      e[i] = s.a[i] << N; \n-\n-  if (check_union128i_d (u, e))\n-    abort (); \n+  TEST_CODE(0, 0);\n+  TEST_CODE(15, 15);\n+  TEST_CODE(16, 16);\n+  TEST_CODE(31, 31);\n+  TEST_CODE(neg1, -1);\n+  TEST_CODE(neg16, -16);\n+  TEST_CODE(neg32, -32);\n+  TEST_CODE(neg64, -64);\n+  TEST_CODE(neg128, -128);\n }"}, {"sha": "c89746f54ae6a2fde2d207329713b6316dbd3429", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-psllq-1.c", "status": "modified", "additions": 42, "deletions": 22, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eef4632c6b3c95aadf73a46ace6aba263c10e709/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psllq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eef4632c6b3c95aadf73a46ace6aba263c10e709/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psllq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psllq-1.c?ref=eef4632c6b3c95aadf73a46ace6aba263c10e709", "patch": "@@ -13,36 +13,56 @@\n #define TEST sse2_test_psllq_1\n #endif\n \n-#define N 60\n-\n #include <emmintrin.h>\n \n #ifdef _ARCH_PWR8\n-static __m128i\n-__attribute__((noinline, unused))\n-test (__m128i s1)\n-{\n-  return _mm_slli_epi64 (s1, N); \n-}\n+#define TEST_FUNC(id, N) \\\n+  static __m128i \\\n+  __attribute__((noinline, unused)) \\\n+  test##id (__m128i s1) \\\n+  { \\\n+    return _mm_slli_epi64 (s1, N);  \\\n+  }\n+\n+TEST_FUNC(0, 0)\n+TEST_FUNC(15, 15)\n+TEST_FUNC(16, 16)\n+TEST_FUNC(31, 31)\n+TEST_FUNC(63, 63)\n+TEST_FUNC(neg1, -1)\n+TEST_FUNC(neg16, -16)\n+TEST_FUNC(neg32, -32)\n+TEST_FUNC(neg64, -64)\n+TEST_FUNC(neg128, -128)\n #endif\n \n+#define TEST_CODE(id, N) \\\n+  { \\\n+    union128i_q u, s; \\\n+    long long e[2] = {0}; \\\n+    int i; \\\n+    s.x = _mm_set_epi64x (-1, 0xf); \\\n+    u.x = test##id (s.x); \\\n+    if (N >= 0 && N < 64) \\\n+      for (i = 0; i < 2; i++) \\\n+        e[i] = s.a[i] << (N * (N >= 0)); \\\n+    if (check_union128i_q (u, e)) \\\n+      abort (); \\\n+  }\n+\n static void\n TEST (void)\n {\n #ifdef _ARCH_PWR8\n-  union128i_q u, s;\n-  long long e[2] = {0};\n-  int i;\n- \n-  s.x = _mm_set_epi64x (-1, 0xf);\n-\n-  u.x = test (s.x);\n-\n-  if (N < 64)\n-    for (i = 0; i < 2; i++)\n-      e[i] = s.a[i] << N; \n-\n-  if (check_union128i_q (u, e))\n-    abort (); \n+  TEST_CODE(0, 0);\n+  TEST_CODE(15, 15);\n+  TEST_CODE(16, 16);\n+  TEST_CODE(31, 31);\n+  TEST_CODE(63, 63);\n+  TEST_CODE(neg1, -1);\n+  TEST_CODE(neg16, -16);\n+  TEST_CODE(neg32, -32);\n+  TEST_CODE(neg64, -64);\n+  TEST_CODE(neg128, -128);\n #endif\n }"}, {"sha": "4a0d6719ca38dd9a23021a49bbb7e5b864895f72", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-psllw-1.c", "status": "modified", "additions": 38, "deletions": 22, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eef4632c6b3c95aadf73a46ace6aba263c10e709/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psllw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eef4632c6b3c95aadf73a46ace6aba263c10e709/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psllw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-psllw-1.c?ref=eef4632c6b3c95aadf73a46ace6aba263c10e709", "patch": "@@ -13,32 +13,48 @@\n #define TEST sse2_test_psllw_1\n #endif\n \n-#define N 0xb\n-\n #include <emmintrin.h>\n \n-static __m128i\n-__attribute__((noinline, unused))\n-test (__m128i s1)\n-{\n-  return _mm_slli_epi16 (s1, N); \n-}\n+#define TEST_FUNC(id, N) \\\n+  static __m128i \\\n+  __attribute__((noinline, unused)) \\\n+  test##id (__m128i s1) \\\n+  { \\\n+    return _mm_slli_epi16 (s1, N);  \\\n+  }\n+\n+TEST_FUNC(0, 0)\n+TEST_FUNC(15, 15)\n+TEST_FUNC(16, 16)\n+TEST_FUNC(neg1, -1)\n+TEST_FUNC(neg16, -16)\n+TEST_FUNC(neg32, -32)\n+TEST_FUNC(neg64, -64)\n+TEST_FUNC(neg128, -128)\n+\n+#define TEST_CODE(id, N) \\\n+  { \\\n+    short e[8] = {0}; \\\n+    union128i_w u, s; \\\n+    int i; \\\n+    s.x = _mm_set_epi16 (1, 2, 3, 4, 5, 6, 0x7000, 0x9000); \\\n+    u.x = test##id (s.x); \\\n+    if (N >= 0 && N < 16) \\\n+      for (i = 0; i < 8; i++) \\\n+        e[i] = s.a[i] << (N * (N >= 0)); \\\n+    if (check_union128i_w (u, e)) \\\n+      abort (); \\\n+  }\n \n static void\n TEST (void)\n {\n-  union128i_w u, s;\n-  short e[8] = {0};\n-  int i;\n- \n-  s.x = _mm_set_epi16 (1, 2, 3, 4, 5, 6, 0x7000, 0x9000);\n-\n-  u.x = test (s.x);\n-\n-  if (N < 16)\n-    for (i = 0; i < 8; i++)\n-      e[i] = s.a[i] << N; \n-\n-  if (check_union128i_w (u, e))\n-    abort (); \n+  TEST_CODE(0, 0);\n+  TEST_CODE(15, 15);\n+  TEST_CODE(16, 16);\n+  TEST_CODE(neg1, -1);\n+  TEST_CODE(neg16, -16);\n+  TEST_CODE(neg32, -32);\n+  TEST_CODE(neg64, -64);\n+  TEST_CODE(neg128, -128);\n }"}]}