{"sha": "2c0accc920f19896d91fc0afb8cb8825a5147dbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmMwYWNjYzkyMGYxOTg5NmQ5MWZjMGFmYjhjYjg4MjVhNTE0N2RiZQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-07-15T19:29:14Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-07-15T19:29:14Z"}, "message": "cpphash.c (save_expansion): Clear PREV_WHITE on tokens immediately following a paste operator.\n\n\t* cpphash.c (save_expansion): Clear PREV_WHITE on tokens\n\timmediately following a paste operator.\n\t* cppinit.c (sort_options): New function (only for HOST_EBCDIC).\n\t(cpp_reader_init): Call it, if HOST_EBCDIC.\n\t(cpp_handle_options): Do not sort option list here.\n\t(handle_option): Rename to cpp_handle_option and export.\n\t* cpplex.c (cpp_scan_buffer_nooutput, cpp_scan_buffer): Use\n\t_cpp_get_token directly.\n\t(cpp_scan_line): Return 0 at EOF, 1 otherwise.\n\t* cpplib.c (cpp_push_buffer): Don't set new->lineno to 1.\n\t* cpplib.h: Prototype cpp_handle_option.  Update prototype of\n\tcpp_scan_line.\n\nFrom-SVN: r35052", "tree": {"sha": "13e7a6035db05f91cea3851df746122575c0e6a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13e7a6035db05f91cea3851df746122575c0e6a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c0accc920f19896d91fc0afb8cb8825a5147dbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c0accc920f19896d91fc0afb8cb8825a5147dbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c0accc920f19896d91fc0afb8cb8825a5147dbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c0accc920f19896d91fc0afb8cb8825a5147dbe/comments", "author": null, "committer": null, "parents": [{"sha": "a8c12308a05ef399cf985d3c9382207a801c310c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8c12308a05ef399cf985d3c9382207a801c310c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8c12308a05ef399cf985d3c9382207a801c310c"}], "stats": {"total": 108, "additions": 83, "deletions": 25}, "files": [{"sha": "de601425437bdf369e51129a1a1d2445c9f77b6b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c0accc920f19896d91fc0afb8cb8825a5147dbe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c0accc920f19896d91fc0afb8cb8825a5147dbe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c0accc920f19896d91fc0afb8cb8825a5147dbe", "patch": "@@ -1,3 +1,18 @@\n+2000-07-15  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cpphash.c (save_expansion): Clear PREV_WHITE on tokens\n+\timmediately following a paste operator.\n+\t* cppinit.c (sort_options): New function (only for HOST_EBCDIC).\n+\t(cpp_reader_init): Call it, if HOST_EBCDIC.\n+\t(cpp_handle_options): Do not sort option list here.\n+\t(handle_option): Rename to cpp_handle_option and export.\n+\t* cpplex.c (cpp_scan_buffer_nooutput, cpp_scan_buffer): Use\n+\t_cpp_get_token directly.\n+\t(cpp_scan_line): Return 0 at EOF, 1 otherwise.\n+\t* cpplib.c (cpp_push_buffer): Don't set new->lineno to 1.\n+\t* cpplib.h: Prototype cpp_handle_option.  Update prototype of\n+\tcpp_scan_line.\n+\n 2000-07-15  Richard Henderson  <rth@cygnus.com>\n \n \t* fold-const.c (extract_muldiv): Don't optimize past an unsigned"}, {"sha": "b7f3944c4e5b8e9b0a8c29ca9eb88e80d59dc3eb", "filename": "gcc/cpphash.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c0accc920f19896d91fc0afb8cb8825a5147dbe/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c0accc920f19896d91fc0afb8cb8825a5147dbe/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=2c0accc920f19896d91fc0afb8cb8825a5147dbe", "patch": "@@ -576,6 +576,11 @@ save_expansion (pfile, info)\n \t    dest->flags = token[-1].flags | STRINGIFY_ARG;\n \t  else\n \t    dest->flags = token->flags;  /* Particularly PREV_WHITE.  */\n+\t  /* Turn off PREV_WHITE if we immediately follow a paste.\n+\t     That way, even if the paste turns out to be illegal, there\n+\t     will be no space between the two tokens in the output.  */\n+\t  if (token[-1].type == CPP_PASTE)\n+\t    dest->flags &= ~PREV_WHITE;\n \t  dest++;\n \t  continue;\n \n@@ -602,6 +607,8 @@ save_expansion (pfile, info)\n \t  dest->val.str.text = buf;\n \t  buf += dest->val.str.len;\n \t}\n+      if (token[-1].type == CPP_PASTE)\n+\tdest->flags &= ~PREV_WHITE;\n       dest++;\n     }\n "}, {"sha": "c31b2fda3663e0a90d15fc20155d15455209d3c0", "filename": "gcc/cppinit.c", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c0accc920f19896d91fc0afb8cb8825a5147dbe/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c0accc920f19896d91fc0afb8cb8825a5147dbe/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=2c0accc920f19896d91fc0afb8cb8825a5147dbe", "patch": "@@ -106,14 +106,14 @@ static void merge_include_chains\tPARAMS ((cpp_reader *));\n \n static void initialize_dependency_output PARAMS ((cpp_reader *));\n static void initialize_standard_includes PARAMS ((cpp_reader *));\n-static void new_pending_directive\t\tPARAMS ((struct cpp_pending *,\n+static void new_pending_directive\tPARAMS ((struct cpp_pending *,\n \t\t\t\t\t\t const char *,\n \t\t\t\t\t\t cl_directive_handler));\n #ifdef HOST_EBCDIC\n static int opt_comp\t\t\tPARAMS ((const void *, const void *));\n+static void sort_options\t\tPARAMS ((void));\n #endif\n static int parse_option\t\t\tPARAMS ((const char *));\n-static int handle_option\t\tPARAMS ((cpp_reader *, int, char **));\n \n /* Fourth argument to append_include_chain: chain to use */\n enum { QUOTE = 0, BRACKET, SYSTEM, AFTER };\n@@ -408,6 +408,10 @@ void\n cpp_reader_init (pfile)\n      cpp_reader *pfile;\n {\n+#ifdef HOST_EBCDIC\n+  sort_options ();\n+#endif\n+\n   memset ((char *) pfile, 0, sizeof (cpp_reader));\n \n   pfile->token_buffer_size = 200;\n@@ -1063,6 +1067,22 @@ static const struct cl_option cl_options[] =\n #undef DEF_OPT\n #undef COMMAND_LINE_OPTIONS\n \n+#ifdef HOST_EBCDIC\n+static void\n+sort_options (void)\n+{\n+  static int opts_sorted = 0;\n+\n+  if (!opts_sorted)\n+    {\n+      opts_sorted = 1;\n+      /* For non-ASCII hosts, the array needs to be sorted at runtime */\n+      qsort (cl_options, N_OPTS, sizeof (struct cl_option), opt_comp);\n+    }\n+}\n+#endif\n+\n+\n /* Perform a binary search to find which, if any, option the given\n    command-line matches.  Returns its index in the option array,\n    negative on failure.  Complications arise since some options can be\n@@ -1131,8 +1151,8 @@ parse_option (input)\n    Can be called multiple times, to handle multiple sets of options.\n    Returns number of strings consumed.  */\n \n-static int\n-handle_option (pfile, argc, argv)\n+int\n+cpp_handle_option (pfile, argc, argv)\n      cpp_reader *pfile;\n      int argc;\n      char **argv;\n@@ -1637,20 +1657,9 @@ cpp_handle_options (pfile, argc, argv)\n   int i;\n   int strings_processed;\n \n-#ifdef HOST_EBCDIC\n-  static int opts_sorted = 0;\n-\n-  if (!opts_sorted)\n-    {\n-      opts_sorted = 1;\n-      /* For non-ASCII hosts, the array needs to be sorted at runtime */\n-      qsort (cl_options, N_OPTS, sizeof (struct cl_option), opt_comp);\n-    }\n-#endif\n-\n   for (i = 0; i < argc; i += strings_processed)\n     {\n-      strings_processed = handle_option (pfile, argc - i, argv + i);\n+      strings_processed = cpp_handle_option (pfile, argc - i, argv + i);\n       if (strings_processed == 0)\n \tbreak;\n     }"}, {"sha": "32aaaab3e70c78900ffd757823e95bafb7976402", "filename": "gcc/cpplex.c", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c0accc920f19896d91fc0afb8cb8825a5147dbe/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c0accc920f19896d91fc0afb8cb8825a5147dbe/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=2c0accc920f19896d91fc0afb8cb8825a5147dbe", "patch": "@@ -412,22 +412,30 @@ void\n cpp_scan_buffer_nooutput (pfile)\n      cpp_reader *pfile;\n {\n-  unsigned int old_written = CPP_WRITTEN (pfile);\n   cpp_buffer *stop = CPP_PREV_BUFFER (CPP_BUFFER (pfile));\n+  const cpp_token *token;\n \n+  /* In no-output mode, we can ignore everything but directives.  */\n   for (;;)\n     {\n-      /* In no-output mode, we can ignore everything but directives.  */\n-      const cpp_token *token = cpp_get_token (pfile);\n+      token = _cpp_get_token (pfile);\n+\n       if (token->type == CPP_EOF)\n \t{\n \t  cpp_pop_buffer (pfile);\n \t  if (CPP_BUFFER (pfile) == stop)\n \t    break;\n \t}\n+\n+      if (token->type == CPP_HASH && token->flags & BOL\n+\t  && pfile->token_list.directive)\n+\t{\n+\t  process_directive (pfile, token);\n+\t  continue;\n+\t}\n+\n       _cpp_skip_rest_of_line (pfile);\n     }\n-  CPP_SET_WRITTEN (pfile, old_written);\n }\n \n /* Scan until CPP_BUFFER (pfile) is exhausted, writing output to PRINT.  */\n@@ -441,35 +449,47 @@ cpp_scan_buffer (pfile, print)\n \n   for (;;)\n     {\n-      token = cpp_get_token (pfile);\n+      token = _cpp_get_token (pfile);\n       if (token->type == CPP_EOF)\n \t{\n \t  cpp_pop_buffer (pfile);\n \t  if (CPP_BUFFER (pfile) == stop)\n \t    return;\n+\n \t  cpp_output_tokens (pfile, print, CPP_BUF_LINE (CPP_BUFFER (pfile)));\n \t  prev = 0;\n \t  continue;\n \t}\n \n       if (token->flags & BOL)\n \t{\n+\t  if (token->type == CPP_HASH && pfile->token_list.directive)\n+\t    {\n+\t      process_directive (pfile, token);\n+\t      continue;\n+\t    }\n+\n \t  cpp_output_tokens (pfile, print, pfile->token_list.line);\n \t  prev = 0;\n \t}\n \n-      output_token (pfile, token, prev);\n+      if (token->type != CPP_PLACEMARKER)\n+\toutput_token (pfile, token, prev);\n+\n       prev = token;\n     }\n }\n \n /* Scan a single line of the input into the token_buffer.  */\n-void\n+int\n cpp_scan_line (pfile)\n      cpp_reader *pfile;\n {\n   const cpp_token *token, *prev = 0;\n \n+  if (pfile->buffer == NULL)\n+    return 0;\n+\n   do\n     {\n       token = cpp_get_token (pfile);\n@@ -479,11 +499,18 @@ cpp_scan_line (pfile)\n \t  break;\n \t}\n \n+      /* If the last token on a line results from a macro expansion,\n+\t the check below will fail to stop us from proceeding to the\n+\t next line - so make sure we stick in a newline, at least.  */\n+      if (token->flags & BOL)\n+\tCPP_PUTC (pfile, '\\n');\n+\n       output_token (pfile, token, prev);\n       prev = token;\n     }\n   while (pfile->cur_context > 0\n \t || pfile->contexts[0].posn < pfile->contexts[0].count);\n+  return 1;\n }\n \n /* Helper routine used by parse_include, which can't see spell_token."}, {"sha": "aaf55a0d3c522a96066d57b83b0d0f303e56d61b", "filename": "gcc/cpplib.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c0accc920f19896d91fc0afb8cb8825a5147dbe/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c0accc920f19896d91fc0afb8cb8825a5147dbe/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=2c0accc920f19896d91fc0afb8cb8825a5147dbe", "patch": "@@ -1520,7 +1520,6 @@ cpp_push_buffer (pfile, buffer, length)\n   new->line_base = new->buf = new->cur = buffer;\n   new->rlimit = buffer + length;\n   new->prev = buf;\n-  new->lineno = 1;\n \n   CPP_BUFFER (pfile) = new;\n   return new;"}, {"sha": "500b5e25a0ef22ef652e8be800a2f6fe59b851bc", "filename": "gcc/cpplib.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c0accc920f19896d91fc0afb8cb8825a5147dbe/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c0accc920f19896d91fc0afb8cb8825a5147dbe/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=2c0accc920f19896d91fc0afb8cb8825a5147dbe", "patch": "@@ -636,6 +636,7 @@ struct cpp_hashnode\n };\n \n extern int cpp_handle_options PARAMS ((cpp_reader *, int, char **));\n+extern int cpp_handle_option PARAMS ((cpp_reader *, int, char **));\n extern void cpp_reader_init PARAMS ((cpp_reader *));\n extern cpp_printer *cpp_printer_init PARAMS ((cpp_reader *, cpp_printer *));\n extern int cpp_start_read PARAMS ((cpp_reader *, cpp_printer *, const char *));\n@@ -688,7 +689,7 @@ extern cpp_buffer *cpp_push_buffer\tPARAMS ((cpp_reader *,\n extern cpp_buffer *cpp_pop_buffer\tPARAMS ((cpp_reader *));\n extern void cpp_scan_buffer\t\tPARAMS ((cpp_reader *, cpp_printer *));\n extern void cpp_scan_buffer_nooutput\tPARAMS ((cpp_reader *));\n-extern void cpp_scan_line\t\tPARAMS ((cpp_reader *));\n+extern int cpp_scan_line\t\tPARAMS ((cpp_reader *));\n extern int cpp_ideq\t\t\tPARAMS ((const cpp_token *,\n \t\t\t\t\t\t const char *));\n "}]}