{"sha": "3ed8294e3200bbc003211f9b7eeb64a9c407a626", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VkODI5NGUzMjAwYmJjMDAzMjExZjliN2VlYjY0YTljNDA3YTYyNg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-23T03:45:33Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-23T03:45:33Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r574", "tree": {"sha": "d971a969518fd5cd9a630a59db3007657ad1d268", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d971a969518fd5cd9a630a59db3007657ad1d268"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ed8294e3200bbc003211f9b7eeb64a9c407a626", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ed8294e3200bbc003211f9b7eeb64a9c407a626", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ed8294e3200bbc003211f9b7eeb64a9c407a626", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ed8294e3200bbc003211f9b7eeb64a9c407a626/comments", "author": null, "committer": null, "parents": [{"sha": "36d747f619192d604ccb56d9dbf34bc31719cc50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36d747f619192d604ccb56d9dbf34bc31719cc50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36d747f619192d604ccb56d9dbf34bc31719cc50"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "54a95d27c29b9196101848cbc7647a13273aff0f", "filename": "gcc/cccp.c", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ed8294e3200bbc003211f9b7eeb64a9c407a626/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ed8294e3200bbc003211f9b7eeb64a9c407a626/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=3ed8294e3200bbc003211f9b7eeb64a9c407a626", "patch": "@@ -201,6 +201,7 @@ static void pfatal_with_name ();\n static void perror_with_name ();\n static void print_containing_files ();\n static int lookup_import ();\n+static int lookup_include ();\n static int check_preconditions ();\n static void pcfinclude ();\n static void pcstring_used ();\n@@ -3730,25 +3731,13 @@ do_include (buf, limit, op, keyword)\n   fname = (char *) xmalloc (max_include_len + flen + 2);\n   /* + 2 above for slash and terminating null.  */\n \n-  /* See if we already included this file and we can tell in advance\n-     (from a #ifndef around its contents last time)\n-     that there is no need to include it again.  */\n-  {\n-    struct file_name_list *l = all_include_files;\n-    strncpy (fname, fbeg, flen);\n-    fname[flen] = 0;\n-    for (; l; l = l->next)\n-      if (! strcmp (fname, l->fname)\n-\t  && l->control_macro\n-\t  && lookup (l->control_macro, -1, -1))\n-\treturn 0;\n-  }\n-\n   /* If specified file name is absolute, just open it.  */\n \n   if (*fbeg == '/') {\n     strncpy (fname, fbeg, flen);\n     fname[flen] = 0;\n+    if (lookup_include (fname))\n+      return 0;\n     if (importing)\n       f = lookup_import (fname);\n     else\n@@ -3791,6 +3780,10 @@ do_include (buf, limit, op, keyword)\n \tf = open (fname, O_RDONLY, 0666);\n       if (f == -2)\n \treturn 0;\t\t\t/* Already included this file */\n+      if (lookup_include (fname)) {\n+\tclose (f);\n+\treturn 0;\n+      }\n       if (f >= 0)\n \tbreak;\n     }\n@@ -3921,6 +3914,23 @@ do_include (buf, limit, op, keyword)\n   return 0;\n }\n \n+/* Return nonzero if there is no need to include file NAME\n+   because it has already been included and it contains a conditional\n+   to make a repeated include do nothing.  */\n+\n+static int\n+lookup_include (name)\n+     char *name;\n+{\n+  struct file_name_list *l = all_include_files;\n+  for (; l; l = l->next)\n+    if (! strcmp (name, l->fname)\n+\t&& l->control_macro\n+\t&& lookup (l->control_macro, -1, -1))\n+      return 1;\n+  return 0;\n+}\n+\n /* Process the contents of include file FNAME, already open on descriptor F,\n    with output to OP.\n    SYSTEM_HEADER_P is 1 if this file was specified using <...>."}]}