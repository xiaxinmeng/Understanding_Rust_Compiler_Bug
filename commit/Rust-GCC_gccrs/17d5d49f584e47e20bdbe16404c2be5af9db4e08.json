{"sha": "17d5d49f584e47e20bdbe16404c2be5af9db4e08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdkNWQ0OWY1ODRlNDdlMjBiZGJlMTY0MDRjMmJlNWFmOWRiNGUwOA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2014-11-25T22:37:54Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-11-25T22:37:54Z"}, "message": "error.c (gfc_internal_error): Convert to common diagnostics.\n\n2014-11-25  Tobias Burnus  <burnus@net-b.de>\n\n        * error.c (gfc_internal_error): Convert to common diagnostics.\n        * interface.c (gfc_find_sym_in_symtree): Use %qs.\n        * intrinsic.c (make_generic, gfc_check_intrinsic_standard,\n        gfc_convert_type_warn): Ditto.\n        * module.c (write_symbol): Ditto.\n        * symbol.c (gfc_get_default_type): Ditto; use fatal instead\n        of internal error.\n        * trans-array.c (gfc_walk_subexpr): Replace internal_error by\n        gfc_internal_error.\n        * trans-decl.c (gfc_get_symbol_decl,\n        (gfc_create_module_variable): Ditto. Use %qs.\n        * trans-intrinsic.c (gfc_conv_intrinsic_lib_function): Ditto.\n        * trans-io.c (transfer_expr): Ditto.\n        * trans-openmp.c (gfc_trans_omp_workshare): Ditto.\n        * trans.c (trans_code): Ditto.\n\nFrom-SVN: r218068", "tree": {"sha": "bfcb1c853b89254b45c6ed5d2d51b7c3c0980f62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfcb1c853b89254b45c6ed5d2d51b7c3c0980f62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17d5d49f584e47e20bdbe16404c2be5af9db4e08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17d5d49f584e47e20bdbe16404c2be5af9db4e08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17d5d49f584e47e20bdbe16404c2be5af9db4e08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17d5d49f584e47e20bdbe16404c2be5af9db4e08/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4daa149b86a42d1d10a735889c5f9cd6a0bca09e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4daa149b86a42d1d10a735889c5f9cd6a0bca09e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4daa149b86a42d1d10a735889c5f9cd6a0bca09e"}], "stats": {"total": 70, "additions": 42, "deletions": 28}, "files": [{"sha": "68c941654f6d832a510470d6930047740f1dc482", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d5d49f584e47e20bdbe16404c2be5af9db4e08/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d5d49f584e47e20bdbe16404c2be5af9db4e08/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=17d5d49f584e47e20bdbe16404c2be5af9db4e08", "patch": "@@ -1,3 +1,21 @@\n+2014-11-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* error.c (gfc_internal_error): Convert to common diagnostics.\n+\t* interface.c (gfc_find_sym_in_symtree): Use %qs.\n+\t* intrinsic.c (make_generic, gfc_check_intrinsic_standard,\n+\tgfc_convert_type_warn): Ditto.\n+\t* module.c (write_symbol): Ditto.\n+\t* symbol.c (gfc_get_default_type): Ditto; use fatal instead\n+\tof internal error.\n+\t* trans-array.c (gfc_walk_subexpr): Replace internal_error by\n+\tgfc_internal_error.\n+\t* trans-decl.c (gfc_get_symbol_decl,\n+\t(gfc_create_module_variable): Ditto. Use %qs.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_lib_function): Ditto.\n+\t* trans-io.c (transfer_expr): Ditto.\n+\t* trans-openmp.c (gfc_trans_omp_workshare): Ditto.\n+\t* trans.c (trans_code): Ditto.\n+\n 2014-11-25  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.h (gfc_option_t): Remove flags moved as Var to .opt."}, {"sha": "00e92280ce3b830f63f257f8c4c3c3c62adb9e27", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d5d49f584e47e20bdbe16404c2be5af9db4e08/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d5d49f584e47e20bdbe16404c2be5af9db4e08/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=17d5d49f584e47e20bdbe16404c2be5af9db4e08", "patch": "@@ -1282,21 +1282,17 @@ gfc_error_now_1 (const char *gmsgid, ...)\n /* This shouldn't happen... but sometimes does.  */\n \n void\n-gfc_internal_error (const char *format, ...)\n+gfc_internal_error (const char *gmsgid, ...)\n {\n   va_list argp;\n+  diagnostic_info diagnostic;\n \n-  buffer_flag = 0;\n-\n-  va_start (argp, format);\n-\n-  show_loci (&gfc_current_locus, NULL);\n-  error_printf (\"Internal Error at (1):\");\n-\n-  error_print (\"\", format, argp);\n+  va_start (argp, gmsgid);\n+  diagnostic_set_info (&diagnostic, gmsgid, &argp, UNKNOWN_LOCATION, DK_ICE);\n+  report_diagnostic (&diagnostic);\n   va_end (argp);\n \n-  exit (ICE_EXIT_CODE);\n+  gcc_unreachable ();\n }\n \n "}, {"sha": "1980ddf662e8ddb42ee924096a3cddf771345889", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d5d49f584e47e20bdbe16404c2be5af9db4e08/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d5d49f584e47e20bdbe16404c2be5af9db4e08/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=17d5d49f584e47e20bdbe16404c2be5af9db4e08", "patch": "@@ -3542,7 +3542,7 @@ gfc_find_sym_in_symtree (gfc_symbol *sym)\n       if (st)\n \treturn st;\n     }\n-  gfc_internal_error (\"Unable to find symbol %s\", sym->name);\n+  gfc_internal_error (\"Unable to find symbol %qs\", sym->name);\n   /* Not reached.  */\n }\n "}, {"sha": "6b874a4092f8482e85fe47619a32f2dbf60b7d93", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d5d49f584e47e20bdbe16404c2be5af9db4e08/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d5d49f584e47e20bdbe16404c2be5af9db4e08/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=17d5d49f584e47e20bdbe16404c2be5af9db4e08", "patch": "@@ -1086,7 +1086,7 @@ make_generic (const char *name, gfc_isym_id id, int standard ATTRIBUTE_UNUSED)\n \n   g = gfc_find_function (name);\n   if (g == NULL)\n-    gfc_internal_error (\"make_generic(): Can't find generic symbol '%s'\",\n+    gfc_internal_error (\"make_generic(): Can't find generic symbol %qs\",\n \t\t\tname);\n \n   gcc_assert (g->id == id);\n@@ -4307,7 +4307,7 @@ gfc_check_intrinsic_standard (const gfc_intrinsic_sym* isym,\n       break;\n \n     default:\n-      gfc_internal_error (\"Invalid standard code on intrinsic '%s' (%d)\",\n+      gfc_internal_error (\"Invalid standard code on intrinsic %qs (%d)\",\n \t\t\t  isym->name, isym->standard);\n     }\n \n@@ -4735,7 +4735,7 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n       return false;\n     }\n \n-  gfc_internal_error (\"Can't convert %s to %s at %L\",\n+  gfc_internal_error (\"Can't convert %qs to %qs at %L\",\n \t\t      gfc_typename (&from_ts), gfc_typename (ts),\n \t\t      &expr->where);\n   /* Not reached */"}, {"sha": "3adbe1a5bbd7525c5efd338991f571c443e70928", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d5d49f584e47e20bdbe16404c2be5af9db4e08/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d5d49f584e47e20bdbe16404c2be5af9db4e08/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=17d5d49f584e47e20bdbe16404c2be5af9db4e08", "patch": "@@ -5496,7 +5496,7 @@ write_symbol (int n, gfc_symbol *sym)\n   const char *label;\n \n   if (sym->attr.flavor == FL_UNKNOWN || sym->attr.flavor == FL_LABEL)\n-    gfc_internal_error (\"write_symbol(): bad module symbol '%s'\", sym->name);\n+    gfc_internal_error (\"write_symbol(): bad module symbol %qs\", sym->name);\n \n   mio_integer (&n);\n "}, {"sha": "fa0ffe06818e347f922b85fdb11c1cb032402644", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d5d49f584e47e20bdbe16404c2be5af9db4e08/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d5d49f584e47e20bdbe16404c2be5af9db4e08/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=17d5d49f584e47e20bdbe16404c2be5af9db4e08", "patch": "@@ -221,12 +221,12 @@ gfc_get_default_type (const char *name, gfc_namespace *ns)\n   letter = name[0];\n \n   if (gfc_option.flag_allow_leading_underscore && letter == '_')\n-    gfc_internal_error (\"Option -fallow-leading-underscore is for use only by \"\n-\t\t\t\"gfortran developers, and should not be used for \"\n-\t\t\t\"implicitly typed variables\");\n+    gfc_fatal_error (\"Option %<-fallow-leading-underscore%> is for use only by \"\n+\t\t     \"gfortran developers, and should not be used for \"\n+\t\t     \"implicitly typed variables\");\n \n   if (letter < 'a' || letter > 'z')\n-    gfc_internal_error (\"gfc_get_default_type(): Bad symbol '%s'\", name);\n+    gfc_internal_error (\"gfc_get_default_type(): Bad symbol %qs\", name);\n \n   if (ns == NULL)\n     ns = gfc_current_ns;"}, {"sha": "a70aa0783ebac4f4470d4cced7da640cab6c725a", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d5d49f584e47e20bdbe16404c2be5af9db4e08/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d5d49f584e47e20bdbe16404c2be5af9db4e08/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=17d5d49f584e47e20bdbe16404c2be5af9db4e08", "patch": "@@ -9093,7 +9093,7 @@ gfc_walk_subexpr (gfc_ss * ss, gfc_expr * expr)\n       break;\n \n     default:\n-      internal_error (\"bad expression type during walk (%d)\",\n+      gfc_internal_error (\"bad expression type during walk (%d)\",\n \t\t      expr->expr_type);\n     }\n   return ss;"}, {"sha": "eefd9bc696ec218a804ca204c5e9f6b2a194f085", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d5d49f584e47e20bdbe16404c2be5af9db4e08/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d5d49f584e47e20bdbe16404c2be5af9db4e08/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=17d5d49f584e47e20bdbe16404c2be5af9db4e08", "patch": "@@ -1435,7 +1435,7 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n     }\n \n   if (sym->attr.intrinsic)\n-    internal_error (\"intrinsic variable which isn't a procedure\");\n+    gfc_internal_error (\"intrinsic variable which isn't a procedure\");\n \n   /* Create string length decl first so that they can be used in the\n      type declaration.  */\n@@ -4418,8 +4418,8 @@ gfc_create_module_variable (gfc_symbol * sym)\n     return;\n \n   if (sym->backend_decl && !sym->attr.vtab && !sym->attr.target)\n-    internal_error (\"backend decl for module variable %s already exists\",\n-\t\t    sym->name);\n+    gfc_internal_error (\"backend decl for module variable %qs already exists\",\n+\t\t\tsym->name);\n \n   if (sym->module && !sym->attr.result && !sym->attr.dummy\n       && (sym->attr.access == ACCESS_UNKNOWN"}, {"sha": "6bf1f7439c59ce89c5b2b0d9a46a4437fd321da1", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d5d49f584e47e20bdbe16404c2be5af9db4e08/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d5d49f584e47e20bdbe16404c2be5af9db4e08/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=17d5d49f584e47e20bdbe16404c2be5af9db4e08", "patch": "@@ -856,8 +856,8 @@ gfc_conv_intrinsic_lib_function (gfc_se * se, gfc_expr * expr)\n \n   if (m->id == GFC_ISYM_NONE)\n     {\n-      internal_error (\"Intrinsic function %s(%d) not recognized\",\n-\t\t      expr->value.function.name, id);\n+      gfc_internal_error (\"Intrinsic function %qs (%d) not recognized\",\n+\t\t\t  expr->value.function.name, id);\n     }\n \n   /* Get the decl and generate the call.  */"}, {"sha": "e1b7eb9d10e606f6ad1b1a46d2a95eea02c6f493", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d5d49f584e47e20bdbe16404c2be5af9db4e08/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d5d49f584e47e20bdbe16404c2be5af9db4e08/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=17d5d49f584e47e20bdbe16404c2be5af9db4e08", "patch": "@@ -2192,7 +2192,7 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr, gfc_code * code)\n       return;\n \n     default:\n-      internal_error (\"Bad IO basetype (%d)\", ts->type);\n+      gfc_internal_error (\"Bad IO basetype (%d)\", ts->type);\n     }\n \n   tmp = gfc_build_addr_expr (NULL_TREE, dt_parm);"}, {"sha": "d1fad30ef79e0aaa8a7a8dadffc25f41394cdd79", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d5d49f584e47e20bdbe16404c2be5af9db4e08/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d5d49f584e47e20bdbe16404c2be5af9db4e08/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=17d5d49f584e47e20bdbe16404c2be5af9db4e08", "patch": "@@ -3933,7 +3933,7 @@ gfc_trans_omp_workshare (gfc_code *code, gfc_omp_clauses *clauses)\n \t  break;\n \t\n \tdefault:\n-\t  internal_error (\"gfc_trans_omp_workshare(): Bad statement code\");\n+\t  gfc_internal_error (\"gfc_trans_omp_workshare(): Bad statement code\");\n \t}\n \n       gfc_set_backend_locus (&code->loc);"}, {"sha": "76fe7fd6e0381efee0ba115b6ed53959bc0a4d34", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d5d49f584e47e20bdbe16404c2be5af9db4e08/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d5d49f584e47e20bdbe16404c2be5af9db4e08/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=17d5d49f584e47e20bdbe16404c2be5af9db4e08", "patch": "@@ -1890,7 +1890,7 @@ trans_code (gfc_code * code, tree cond)\n \t  break;\n \n \tdefault:\n-\t  internal_error (\"gfc_trans_code(): Bad statement code\");\n+\t  gfc_internal_error (\"gfc_trans_code(): Bad statement code\");\n \t}\n \n       gfc_set_backend_locus (&code->loc);"}]}