{"sha": "5e97d404553157c7d74c399907b60125111f130f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU5N2Q0MDQ1NTMxNTdjN2Q3NGMzOTk5MDdiNjAxMjUxMTFmMTMwZg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2005-06-06T17:29:41Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-06-06T17:29:41Z"}, "message": "re PR c++/21903 (Default argument of template function causes a compile-time error)\n\ncp:\nPR 21903\n\t* cp-tree.def (DEFAULT_ARG): Document TREE_CHAIN use.\n\t* parser.c (cp_parser_late_parsing_default_args): Propagate parsed\n\targument to any early instantiations.\n\t* pt.c (tsubst_arg_types): Chain early instantiation of default arg.\ntestsuite:\n\tPR 21903\n\t* g++.dg/parse/defarg9.C: New.\n\nFrom-SVN: r100669", "tree": {"sha": "d1edb6ce6bd660310edc4d54628d90e79e651a0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1edb6ce6bd660310edc4d54628d90e79e651a0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e97d404553157c7d74c399907b60125111f130f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e97d404553157c7d74c399907b60125111f130f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e97d404553157c7d74c399907b60125111f130f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e97d404553157c7d74c399907b60125111f130f/comments", "author": null, "committer": null, "parents": [{"sha": "2fecaef4af7206fbae14906000e8c81007514706", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fecaef4af7206fbae14906000e8c81007514706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fecaef4af7206fbae14906000e8c81007514706"}], "stats": {"total": 82, "additions": 69, "deletions": 13}, "files": [{"sha": "e493e10b0f7a2be5ded42d21e2cbcb92c4ea2bf6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e97d404553157c7d74c399907b60125111f130f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e97d404553157c7d74c399907b60125111f130f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5e97d404553157c7d74c399907b60125111f130f", "patch": "@@ -1,5 +1,11 @@\n 2005-06-06  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\tPR 21903\n+\t* cp-tree.def (DEFAULT_ARG): Document TREE_CHAIN use.\n+\t* parser.c (cp_parser_late_parsing_default_args): Propagate parsed\n+\targument to any early instantiations.\n+\t* pt.c (tsubst_arg_types): Chain early instantiation of default arg.\n+\n \tPR c++/20637\n \t* cp-tree.h (add_method): Add using_decl parameter.\n \t* class.c (add_method): Add using_decl parameter.  Adjust error"}, {"sha": "27284675e61fa46a8e77d6057c9e566d7b0e6fb8", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e97d404553157c7d74c399907b60125111f130f/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e97d404553157c7d74c399907b60125111f130f/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=5e97d404553157c7d74c399907b60125111f130f", "patch": "@@ -206,7 +206,9 @@ DEFTREECODE (USING_DECL, \"using_decl\", tcc_declaration, 0)\n /* A using directive. The operand is USING_STMT_NAMESPACE.  */     \n DEFTREECODE (USING_STMT, \"using_directive\", tcc_statement, 1)\n \n-/* An un-parsed default argument.  Looks like an IDENTIFIER_NODE.  */\n+/* An un-parsed default argument.  Looks like an IDENTIFIER_NODE.\n+   TREE_CHAIN is used to hold instantiations of functions that had to\n+   be instantiated before the argument was parsed.  */\n DEFTREECODE (DEFAULT_ARG, \"default_arg\", tcc_exceptional, 0)\n \n /* A template-id, like foo<int>.  The first operand is the template."}, {"sha": "c0059d055f64bfa0d7dd560785c55ece9baf71ff", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e97d404553157c7d74c399907b60125111f130f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e97d404553157c7d74c399907b60125111f130f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5e97d404553157c7d74c399907b60125111f130f", "patch": "@@ -15593,19 +15593,29 @@ cp_parser_late_parsing_default_args (cp_parser *parser, tree fn)\n        parm = TREE_CHAIN (parm))\n     {\n       cp_token_cache *tokens;\n-\n-      if (!TREE_PURPOSE (parm)\n-\t  || TREE_CODE (TREE_PURPOSE (parm)) != DEFAULT_ARG)\n+      tree default_arg = TREE_PURPOSE (parm);\n+      tree parsed_arg;\n+      \n+      if (!default_arg)\n \tcontinue;\n \n+      gcc_assert (TREE_CODE (default_arg) == DEFAULT_ARG);\n+\n        /* Push the saved tokens for the default argument onto the parser's\n \t  lexer stack.  */\n-      tokens = DEFARG_TOKENS (TREE_PURPOSE (parm));\n+      tokens = DEFARG_TOKENS (default_arg);\n       cp_parser_push_lexer_for_tokens (parser, tokens);\n \n       /* Parse the assignment-expression.  */\n-      TREE_PURPOSE (parm) = cp_parser_assignment_expression (parser,\n-\t\t\t\t\t\t\t     /*cast_p=*/false);\n+      parsed_arg = cp_parser_assignment_expression (parser, /*cast_p=*/false);\n+\n+      TREE_PURPOSE (parm) = parsed_arg;\n+\n+      /* Update any instantiations we've already created.  */\n+      for (default_arg = TREE_CHAIN (default_arg);\n+\t   default_arg;\n+\t   default_arg = TREE_CHAIN (default_arg))\n+\tTREE_PURPOSE (TREE_PURPOSE (default_arg)) = parsed_arg;\n \n       /* If the token stream has not been completely used up, then\n \t there was extra junk after the end of the default"}, {"sha": "7924bbee97568f0558a14189ae3bf6a91bc6be52", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e97d404553157c7d74c399907b60125111f130f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e97d404553157c7d74c399907b60125111f130f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5e97d404553157c7d74c399907b60125111f130f", "patch": "@@ -6704,6 +6704,8 @@ tsubst_arg_types (tree arg_types,\n {\n   tree remaining_arg_types;\n   tree type;\n+  tree default_arg;\n+  tree result = NULL_TREE;\n \n   if (!arg_types || arg_types == void_list_node)\n     return arg_types;\n@@ -6731,12 +6733,25 @@ tsubst_arg_types (tree arg_types,\n      top-level qualifiers as required.  */\n   type = TYPE_MAIN_VARIANT (type_decays_to (type));\n \n-  /* Note that we do not substitute into default arguments here.  The\n-     standard mandates that they be instantiated only when needed,\n-     which is done in build_over_call.  */\n-  return hash_tree_cons (TREE_PURPOSE (arg_types), type,\n-\t\t\t remaining_arg_types);\n-\t\t\t \n+  /* We do not substitute into default arguments here.  The standard\n+     mandates that they be instantiated only when needed, which is\n+     done in build_over_call.  */\n+  default_arg = TREE_PURPOSE (arg_types);\n+  \n+  if (default_arg && TREE_CODE (default_arg) == DEFAULT_ARG)\n+    {\n+      /* We've instantiated a template before its default arguments\n+ \t have been parsed.  This can happen for a nested template\n+ \t class, and is not an error unless we require the default\n+ \t argument in a call of this function.  */\n+      result = tree_cons (default_arg, type, remaining_arg_types);\n+      TREE_CHAIN (default_arg) = tree_cons (result, NULL_TREE,\n+\t\t\t\t\t    TREE_CHAIN (default_arg));\n+    }\n+  else\n+    result = hash_tree_cons (default_arg, type, remaining_arg_types);\n+  \n+  return result;\n }\n \n /* Substitute into a FUNCTION_TYPE or METHOD_TYPE.  This routine does"}, {"sha": "a89b7fef961fcbf08b110290bc1d3502b8becd57", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e97d404553157c7d74c399907b60125111f130f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e97d404553157c7d74c399907b60125111f130f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5e97d404553157c7d74c399907b60125111f130f", "patch": "@@ -1,5 +1,8 @@\n 2005-06-06  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\tPR 21903\n+\t* g++.dg/parse/defarg9.C: New.\n+\n \tPR c++/20637\n \t* g++.dg/inherit/using4.C: New.\n \t* g++.dg/overload/error1.C: Adjust expected errors."}, {"sha": "8496cfb26c1040e9738afd83b4fd9f5fbccea317", "filename": "gcc/testsuite/g++.dg/parse/defarg9.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e97d404553157c7d74c399907b60125111f130f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e97d404553157c7d74c399907b60125111f130f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg9.C?ref=5e97d404553157c7d74c399907b60125111f130f", "patch": "@@ -0,0 +1,20 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 6 Jun 2005 <nathan@codesourcery.com>\n+\n+// PR 21903:Reject legal with default arg confusion\n+// Origin:  Wolfgang Bangerth <bangerth@dealii.org>\n+\n+\n+struct O { \n+  template<typename T> struct B { \n+    void set (T, bool=true); \n+  }; \n+  \n+  struct D : public B<int> {}; \n+}; \n+\n+void x () \n+{ \n+  O::D d; \n+  d.set(1); \n+}"}]}