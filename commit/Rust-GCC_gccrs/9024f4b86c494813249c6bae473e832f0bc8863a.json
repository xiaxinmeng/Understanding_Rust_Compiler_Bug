{"sha": "9024f4b86c494813249c6bae473e832f0bc8863a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAyNGY0Yjg2YzQ5NDgxMzI0OWM2YmFlNDczZTgzMmYwYmM4ODYzYQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2005-12-07T16:07:08Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2005-12-07T16:07:08Z"}, "message": "re PR target/25212 (unrecognizable insn for facerec with odd optimization set)\n\n\tPR target/25212\n\t* config/rs6000/rs6000.c (legitimate_indexed_address_p): Relax\n\ttests further when !strict && reload_in_progress.\n\t(print_operand): Check that both operands of indexed address are regs.\n\t(print_operand_address): Likewise.\n\t* config/rs6000/rs6000.h (INT_REG_OK_FOR_INDEX_P): Simplify.\n\t(INT_REG_OK_FOR_BASE_P): Correct.\n\nFrom-SVN: r108167", "tree": {"sha": "9a1da90404694330260b4549252d0b6db2047fe4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a1da90404694330260b4549252d0b6db2047fe4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9024f4b86c494813249c6bae473e832f0bc8863a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9024f4b86c494813249c6bae473e832f0bc8863a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9024f4b86c494813249c6bae473e832f0bc8863a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9024f4b86c494813249c6bae473e832f0bc8863a/comments", "author": null, "committer": null, "parents": [{"sha": "8a39029d19e1f7ec50a7203d53137940f447314e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a39029d19e1f7ec50a7203d53137940f447314e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a39029d19e1f7ec50a7203d53137940f447314e"}], "stats": {"total": 53, "additions": 29, "deletions": 24}, "files": [{"sha": "e40ffd983ffc5d1463a4c6bfeae41bf311962d22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9024f4b86c494813249c6bae473e832f0bc8863a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9024f4b86c494813249c6bae473e832f0bc8863a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9024f4b86c494813249c6bae473e832f0bc8863a", "patch": "@@ -1,3 +1,13 @@\n+2005-12-08  Alan Modra  <amodra@bigpond.net.au>\n+\n+\tPR target/25212\n+\t* config/rs6000/rs6000.c (legitimate_indexed_address_p): Relax\n+\ttests further when !strict && reload_in_progress.\n+\t(print_operand): Check that both operands of indexed address are regs.\n+\t(print_operand_address): Likewise.\n+\t* config/rs6000/rs6000.h (INT_REG_OK_FOR_INDEX_P): Simplify.\n+\t(INT_REG_OK_FOR_BASE_P): Correct.\n+\n 2005-12-07  J\"orn Rennecke <joern.rennecke@st.com>\n \n \tPreparation for PR rtl-optimization/20070 / part1"}, {"sha": "609de947d3e0f5fc5ce43576dcd6c1becbb2c4ae", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9024f4b86c494813249c6bae473e832f0bc8863a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9024f4b86c494813249c6bae473e832f0bc8863a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=9024f4b86c494813249c6bae473e832f0bc8863a", "patch": "@@ -2735,23 +2735,19 @@ legitimate_indexed_address_p (rtx x, int strict)\n   op0 = XEXP (x, 0);\n   op1 = XEXP (x, 1);\n \n-  if (REG_P (op0) && REG_P (op1))\n-    return ((INT_REG_OK_FOR_BASE_P (op0, strict)\n-\t     && INT_REG_OK_FOR_INDEX_P (op1, strict))\n-\t    || (INT_REG_OK_FOR_BASE_P (op1, strict)\n-\t\t&& INT_REG_OK_FOR_INDEX_P (op0, strict)));\n-\n   /* Recognize the rtl generated by reload which we know will later be\n-     replaced by a base reg.  We rely on nothing but reload generating\n-     this particular pattern, a reasonable assumption because it is not\n-     canonical.  */\n-  else if (reload_in_progress\n-\t   && GET_CODE (op0) == PLUS\n-\t   && REG_P (XEXP (op0, 0))\n-\t   && GET_CODE (XEXP (op0, 1)) == CONST_INT\n-\t   && REG_P (op1))\n-    return INT_REG_OK_FOR_INDEX_P (op1, strict);\n-  return false;\n+     replaced with proper base and index regs.  */\n+  if (!strict\n+      && reload_in_progress\n+      && (REG_P (op0) || GET_CODE (op0) == PLUS)\n+      && REG_P (op1))\n+    return true;\n+\n+  return (REG_P (op0) && REG_P (op1)\n+\t  && ((INT_REG_OK_FOR_BASE_P (op0, strict)\n+\t       && INT_REG_OK_FOR_INDEX_P (op1, strict))\n+\t      || (INT_REG_OK_FOR_BASE_P (op1, strict)\n+\t\t  && INT_REG_OK_FOR_INDEX_P (op0, strict))));\n }\n \n inline bool\n@@ -10676,7 +10672,8 @@ print_operand (FILE *file, rtx x, int code)\n \telse\n \t  {\n \t    gcc_assert (GET_CODE (tmp) == PLUS\n-\t\t\t&& GET_CODE (XEXP (tmp, 1)) == REG);\n+\t\t\t&& REG_P (XEXP (tmp, 0))\n+\t\t\t&& REG_P (XEXP (tmp, 1)));\n \n \t    if (REGNO (XEXP (tmp, 0)) == 0)\n \t      fprintf (file, \"%s,%s\", reg_names[ REGNO (XEXP (tmp, 1)) ],\n@@ -10736,6 +10733,7 @@ print_operand_address (FILE *file, rtx x)\n     }\n   else if (GET_CODE (x) == PLUS && GET_CODE (XEXP (x, 1)) == REG)\n     {\n+      gcc_assert (REG_P (XEXP (x, 0)));\n       if (REGNO (XEXP (x, 0)) == 0)\n \tfprintf (file, \"%s,%s\", reg_names[ REGNO (XEXP (x, 1)) ],\n \t\t reg_names[ REGNO (XEXP (x, 0)) ]);"}, {"sha": "a77be1292fb24596f57ab2999a47dc9b0b5c4065", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9024f4b86c494813249c6bae473e832f0bc8863a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9024f4b86c494813249c6bae473e832f0bc8863a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=9024f4b86c494813249c6bae473e832f0bc8863a", "patch": "@@ -1723,17 +1723,14 @@ typedef struct rs6000_args\n /* Nonzero if X is a hard reg that can be used as an index\n    or if it is a pseudo reg in the non-strict case.  */\n #define INT_REG_OK_FOR_INDEX_P(X, STRICT)\t\t\t\\\n-  ((! (STRICT)\t\t\t\t\t\t\t\\\n-    && (REGNO (X) <= 31\t\t\t\t\t\t\\\n-\t|| REGNO (X) == ARG_POINTER_REGNUM\t\t\t\\\n-\t|| REGNO (X) == FRAME_POINTER_REGNUM\t\t\t\\\n-\t|| REGNO (X) >= FIRST_PSEUDO_REGISTER))\t\t\t\\\n-   || ((STRICT) && REGNO_OK_FOR_INDEX_P (REGNO (X))))\n+  ((!(STRICT) && REGNO (X) >= FIRST_PSEUDO_REGISTER)\t\t\\\n+   || REGNO_OK_FOR_INDEX_P (REGNO (X)))\n \n /* Nonzero if X is a hard reg that can be used as a base reg\n    or if it is a pseudo reg in the non-strict case.  */\n #define INT_REG_OK_FOR_BASE_P(X, STRICT)\t\t\t\\\n-  (REGNO (X) > 0 && INT_REG_OK_FOR_INDEX_P (X, (STRICT)))\n+  ((!(STRICT) && REGNO (X) >= FIRST_PSEUDO_REGISTER)\t\t\\\n+   || REGNO_OK_FOR_BASE_P (REGNO (X)))\n \n #define REG_OK_FOR_INDEX_P(X) INT_REG_OK_FOR_INDEX_P (X, REG_OK_STRICT_FLAG)\n #define REG_OK_FOR_BASE_P(X)  INT_REG_OK_FOR_BASE_P (X, REG_OK_STRICT_FLAG)"}]}