{"sha": "4a29b8d62726d100e1c5ea1e3401309a1437c6be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGEyOWI4ZDYyNzI2ZDEwMGUxYzVlYTFlMzQwMTMwOWExNDM3YzZiZQ==", "commit": {"author": {"name": "Ghjuvan Lacambre", "email": "lacambre@adacore.com", "date": "2021-05-21T09:14:13Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-05-21T09:14:13Z"}, "message": "Replace ? with ?? in warning messages\n\nThe former has been deprecated in favor of the latter.\n\ngcc/ada/\n\t* gcc-interface/decl.c (gnat_to_gnu_entity): Replace ? with ??.\n\t(gnat_to_gnu_param): Likewise.\n\t(gnat_to_gnu_subprog_type): Likewise.\n\t(warn_on_field_placement): Likewise.\n\t(intrin_arglists_compatible_p): Likewise.\n\t* gcc-interface/trans.c (Pragma_to_gnu): Likewise.\n\t(gnat_to_gnu): Likewise.\n\t(validate_unchecked_conversion): Likewise.\n\t* gcc-interface/utils.c (maybe_pad_type): Likewise.", "tree": {"sha": "39abbe1e89fe0212f618e7b8fc1c295a51bde681", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39abbe1e89fe0212f618e7b8fc1c295a51bde681"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a29b8d62726d100e1c5ea1e3401309a1437c6be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a29b8d62726d100e1c5ea1e3401309a1437c6be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a29b8d62726d100e1c5ea1e3401309a1437c6be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a29b8d62726d100e1c5ea1e3401309a1437c6be/comments", "author": {"login": "glacambre", "id": 11534587, "node_id": "MDQ6VXNlcjExNTM0NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/11534587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glacambre", "html_url": "https://github.com/glacambre", "followers_url": "https://api.github.com/users/glacambre/followers", "following_url": "https://api.github.com/users/glacambre/following{/other_user}", "gists_url": "https://api.github.com/users/glacambre/gists{/gist_id}", "starred_url": "https://api.github.com/users/glacambre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glacambre/subscriptions", "organizations_url": "https://api.github.com/users/glacambre/orgs", "repos_url": "https://api.github.com/users/glacambre/repos", "events_url": "https://api.github.com/users/glacambre/events{/privacy}", "received_events_url": "https://api.github.com/users/glacambre/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dd9a8fff14eda90fcaa3ac4b6b68ceded72a6af5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd9a8fff14eda90fcaa3ac4b6b68ceded72a6af5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd9a8fff14eda90fcaa3ac4b6b68ceded72a6af5"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "c7d61763db10e6f5f72c29e299bc1c6862bf171e", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a29b8d62726d100e1c5ea1e3401309a1437c6be/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a29b8d62726d100e1c5ea1e3401309a1437c6be/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=4a29b8d62726d100e1c5ea1e3401309a1437c6be", "patch": "@@ -1392,7 +1392,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \n \t\tif (TREE_CODE (TYPE_SIZE_UNIT (gnu_alloc_type)) == INTEGER_CST\n \t\t    && !valid_constant_size_p (TYPE_SIZE_UNIT (gnu_alloc_type)))\n-\t\t  post_error (\"?`Storage_Error` will be raised at run time!\",\n+\t\t  post_error (\"??`Storage_Error` will be raised at run time!\",\n \t\t\t      gnat_entity);\n \n \t\tgnu_expr\n@@ -4328,7 +4328,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t\t ratio is greater or equal to the byte/bit ratio.  */\n \t      if (tree_fits_uhwi_p (size)\n \t\t  && align >= tree_to_uhwi (size) * BITS_PER_UNIT)\n-\t\tpost_error_ne (\"?suspiciously large alignment specified for&\",\n+\t\tpost_error_ne (\"??suspiciously large alignment specified for&\",\n \t\t\t       Expression (Alignment_Clause (gnat_entity)),\n \t\t\t       gnat_entity);\n \t    }\n@@ -5443,7 +5443,7 @@ gnat_to_gnu_param (Entity_Id gnat_param, tree gnu_param_type, bool first,\n   input_location = saved_location;\n \n   if (mech == By_Copy && (by_ref || by_component_ptr))\n-    post_error (\"?cannot pass & by copy\", gnat_param);\n+    post_error (\"??cannot pass & by copy\", gnat_param);\n \n   /* If this is an Out parameter that isn't passed by reference and whose\n      type doesn't require the initialization of formals, we don't make a\n@@ -6271,7 +6271,7 @@ gnat_to_gnu_subprog_type (Entity_Id gnat_subprog, bool definition,\n \n \t      if (!intrin_profiles_compatible_p (&inb))\n \t\tpost_error\n-\t\t  (\"?profile of& doesn''t match the builtin it binds!\",\n+\t\t  (\"??profile of& doesn''t match the builtin it binds!\",\n \t\t   gnat_subprog);\n \n \t      return gnu_builtin_decl;\n@@ -6284,7 +6284,7 @@ gnat_to_gnu_subprog_type (Entity_Id gnat_subprog, bool definition,\n \t     on demand without risking false positives with common default sets\n \t     of options.  */\n \t  if (warn_shadow)\n-\t    post_error (\"?gcc intrinsic not found for&!\", gnat_subprog);\n+\t    post_error (\"??gcc intrinsic not found for&!\", gnat_subprog);\n \t}\n     }\n \n@@ -7597,20 +7597,20 @@ warn_on_field_placement (tree gnu_field, Node_Id gnat_component_list,\n \n   const char *msg1\n     = in_variant\n-      ? \"?variant layout may cause performance issues\"\n-      : \"?record layout may cause performance issues\";\n+      ? \"??variant layout may cause performance issues\"\n+      : \"??record layout may cause performance issues\";\n   const char *msg2\n     = Ekind (gnat_field) == E_Discriminant\n-      ? \"?discriminant & whose length is not multiple of a byte\"\n+      ? \"??discriminant & whose length is not multiple of a byte\"\n       : field_has_self_size (gnu_field)\n-\t? \"?component & whose length depends on a discriminant\"\n+\t? \"??component & whose length depends on a discriminant\"\n \t: field_has_variable_size (gnu_field)\n-\t  ? \"?component & whose length is not fixed\"\n-\t  : \"?component & whose length is not multiple of a byte\";\n+\t  ? \"??component & whose length is not fixed\"\n+\t  : \"??component & whose length is not multiple of a byte\";\n   const char *msg3\n     = do_reorder\n-      ? \"?comes too early and was moved down\"\n-      : \"?comes too early and ought to be moved down\";\n+      ? \"??comes too early and was moved down\"\n+      : \"??comes too early and ought to be moved down\";\n \n   post_error (msg1, gnat_field);\n   post_error_ne (msg2, gnat_field, gnat_field);\n@@ -9481,14 +9481,14 @@ intrin_arglists_compatible_p (intrin_binding_t * inb)\n       if (ada_type == void_type_node\n \t  && btin_type != void_type_node)\n \t{\n-\t  post_error (\"?Ada arguments list too short!\", inb->gnat_entity);\n+\t  post_error (\"??Ada arguments list too short!\", inb->gnat_entity);\n \t  return false;\n \t}\n \n       if (btin_type == void_type_node\n \t  && ada_type != void_type_node)\n \t{\n-\t  post_error_ne_num (\"?Ada arguments list too long ('> ^)!\",\n+\t  post_error_ne_num (\"??Ada arguments list too long ('> ^)!\",\n \t\t\t     inb->gnat_entity, inb->gnat_entity, argpos);\n \t  return false;\n \t}\n@@ -9497,7 +9497,7 @@ intrin_arglists_compatible_p (intrin_binding_t * inb)\n       argpos ++;\n       if (intrin_types_incompatible_p (ada_type, btin_type))\n \t{\n-\t  post_error_ne_num (\"?intrinsic binding type mismatch on argument ^!\",\n+\t  post_error_ne_num (\"??intrinsic binding type mismatch on argument ^!\",\n \t\t\t     inb->gnat_entity, inb->gnat_entity, argpos);\n \t  return false;\n \t}\n@@ -9528,7 +9528,7 @@ intrin_return_compatible_p (intrin_binding_t * inb)\n      handles void/void as well.  */\n   if (intrin_types_incompatible_p (btin_return_type, ada_return_type))\n     {\n-      post_error (\"?intrinsic binding type mismatch on return value!\",\n+      post_error (\"??intrinsic binding type mismatch on return value!\",\n \t\t  inb->gnat_entity);\n       return false;\n     }"}, {"sha": "289a2efcaf1f09250be6f940f1635d71babeb342", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a29b8d62726d100e1c5ea1e3401309a1437c6be/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a29b8d62726d100e1c5ea1e3401309a1437c6be/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=4a29b8d62726d100e1c5ea1e3401309a1437c6be", "patch": "@@ -1453,17 +1453,17 @@ Pragma_to_gnu (Node_Id gnat_node)\n \t{\n \tcase Name_Off:\n \t  if (optimize)\n-\t    post_error (\"must specify -O0?\", gnat_node);\n+\t    post_error (\"must specify -O0??\", gnat_node);\n \t  break;\n \n \tcase Name_Space:\n \t  if (!optimize_size)\n-\t    post_error (\"must specify -Os?\", gnat_node);\n+\t    post_error (\"must specify -Os??\", gnat_node);\n \t  break;\n \n \tcase Name_Time:\n \t  if (!optimize)\n-\t    post_error (\"insufficient -O value?\", gnat_node);\n+\t    post_error (\"insufficient -O value??\", gnat_node);\n \t  break;\n \n \tdefault:\n@@ -1473,7 +1473,7 @@ Pragma_to_gnu (Node_Id gnat_node)\n \n     case Pragma_Reviewable:\n       if (write_symbols == NO_DEBUG)\n-\tpost_error (\"must specify -g?\", gnat_node);\n+\tpost_error (\"must specify -g??\", gnat_node);\n       break;\n \n     case Pragma_Warning_As_Error:\n@@ -1574,17 +1574,17 @@ Pragma_to_gnu (Node_Id gnat_node)\n \t    option_index = find_opt (option_string + 1, lang_mask);\n \t    if (option_index == OPT_SPECIAL_unknown)\n \t      {\n-\t\tpost_error (\"?unknown -W switch\", gnat_node);\n+\t\tpost_error (\"unknown -W switch??\", gnat_node);\n \t\tbreak;\n \t      }\n \t    else if (!(cl_options[option_index].flags & CL_WARNING))\n \t      {\n-\t\tpost_error (\"?-W switch does not control warning\", gnat_node);\n+\t\tpost_error (\"-W switch does not control warning??\", gnat_node);\n \t\tbreak;\n \t      }\n \t    else if (!(cl_options[option_index].flags & lang_mask))\n \t      {\n-\t\tpost_error (\"?-W switch not valid for Ada\", gnat_node);\n+\t\tpost_error (\"-W switch not valid for Ada??\", gnat_node);\n \t\tbreak;\n \t      }\n \t    if (cl_options[option_index].flags & CL_JOINED)\n@@ -6970,7 +6970,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \n \t  if (align != 0 && align < oalign && !TYPE_ALIGN_OK (gnu_obj_type))\n \t    post_error_ne_tree_2\n-\t      (\"?source alignment (^) '< alignment of & (^)\",\n+\t      (\"??source alignment (^) '< alignment of & (^)\",\n \t       gnat_node, Designated_Type (Etype (gnat_node)),\n \t       size_int (align / BITS_PER_UNIT), oalign / BITS_PER_UNIT);\n \t}\n@@ -8285,7 +8285,7 @@ gnat_to_gnu (Node_Id gnat_node)\n   /* If the result is a constant that overflowed, raise Constraint_Error.  */\n   if (TREE_CODE (gnu_result) == INTEGER_CST && TREE_OVERFLOW (gnu_result))\n     {\n-      post_error (\"?`Constraint_Error` will be raised at run time\", gnat_node);\n+      post_error (\"??`Constraint_Error` will be raised at run time\", gnat_node);\n       gnu_result\n \t= build1 (NULL_EXPR, gnu_result_type,\n \t\t  build_call_raise (CE_Overflow_Check_Failed, gnat_node,\n@@ -10322,7 +10322,7 @@ validate_unchecked_conversion (Node_Id gnat_node)\n \t      || !alias_sets_conflict_p (get_alias_set (gnu_source_desig_type),\n \t\t\t\t\t target_alias_set)))\n \t{\n-\t  post_error_ne (\"?possible aliasing problem for type&\",\n+\t  post_error_ne (\"??possible aliasing problem for type&\",\n \t\t\t gnat_node, Target_Type (gnat_node));\n \t  post_error (\"\\\\?use -fno-strict-aliasing switch for references\",\n \t\t      gnat_node);\n@@ -10348,7 +10348,7 @@ validate_unchecked_conversion (Node_Id gnat_node)\n \t      || !alias_sets_conflict_p (get_alias_set (gnu_source_desig_type),\n \t\t\t\t\t target_alias_set)))\n \t{\n-\t  post_error_ne (\"?possible aliasing problem for type&\",\n+\t  post_error_ne (\"??possible aliasing problem for type&\",\n \t\t\t gnat_node, Target_Type (gnat_node));\n \t  post_error (\"\\\\?use -fno-strict-aliasing switch for references\",\n \t\t      gnat_node);"}, {"sha": "8de85991663d0f309214985d9c58026aa008fe14", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a29b8d62726d100e1c5ea1e3401309a1437c6be/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a29b8d62726d100e1c5ea1e3401309a1437c6be/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=4a29b8d62726d100e1c5ea1e3401309a1437c6be", "patch": "@@ -1721,11 +1721,11 @@ maybe_pad_type (tree type, tree size, unsigned int align,\n       if (Comes_From_Source (gnat_entity))\n \t{\n \t  if (is_component_type)\n-\t    post_error_ne_tree (\"component of& padded{ by ^ bits}?\",\n+\t    post_error_ne_tree (\"component of& padded{ by ^ bits}??\",\n \t\t\t\tgnat_entity, gnat_entity,\n \t\t\t\tsize_diffop (size, orig_size));\n \t  else if (Present (gnat_error_node))\n-\t    post_error_ne_tree (\"{^ }bits of & unused?\",\n+\t    post_error_ne_tree (\"{^ }bits of & unused??\",\n \t\t\t\tgnat_error_node, gnat_entity,\n \t\t\t\tsize_diffop (size, orig_size));\n \t}"}]}