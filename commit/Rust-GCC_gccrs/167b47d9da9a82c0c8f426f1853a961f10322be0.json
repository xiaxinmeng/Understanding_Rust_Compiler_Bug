{"sha": "167b47d9da9a82c0c8f426f1853a961f10322be0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY3YjQ3ZDlkYTlhODJjMGM4ZjQyNmYxODUzYTk2MWYxMDMyMmJlMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-22T12:42:05Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-22T12:42:05Z"}, "message": "[multiple changes]\n\n2015-05-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* einfo.ads, einfo.adb (Incomplete_Actuals): New attribute of\n\tpackage instantiations. Holds the list of actuals in the instance\n\tthat are incomplete types, to determine where the corresponding\n\tinstance body must be placed.\n\t* sem_ch6.adb (Conforming_Types): An incomplete type used as an\n\tactual in an instance matches an incomplete formal.\n\t* sem_disp.adb (Check_Dispatching_Call): Handle missing case of\n\texplicit dereference.\n\t(Inherited_Subprograms): In the presence of a limited view there\n\tare no subprograms to inherit.\n\t* sem_ch12.adb (Preanalyze_Actuals): Build list of incomplete\n\tactuals of instance, for later placement of instance body and\n\tfreeze nodes for actuals.\n\t(Install_Body): In the presence of actuals that incomplete types\n\tfrom a limited view, the instance body cannot be placed after\n\tthe declaration because full views have not been seen yet. Any\n\tuse of the non-limited views in the instance body requires\n\tthe presence of a regular with_clause in the enclosing unit,\n\tand will fail if this with_clause is missing.  We place the\n\tinstance body at the beginning of the enclosing body, which is\n\tthe unit being compiled, and ensure that freeze nodes for the\n\tfull views of the incomplete types appear before the instance.\n\n2015-05-22  Pascal Obry  <obry@adacore.com>\n\n\t* makeutl.ads, prj-conf.adb, prj-nmsc.adb, prj.ads\n\t(In_Place_Option): Removed.\n\t(Relocate_Build_Tree_Option): New constant.\n\t(Root_Dir_Option): New constant.\n\t(Obj_Root_Dir): Removed.\n\t(Build_Tree_Dir): New variable.\n\t(Root_Src_Tree): Removed.\n\t(Root_Dir): New variable.\n\t* prj-conf.adb (Get_Or_Create_Configuration_File): Add check\n\tfor improper relocation.\n\t* prj-nmsc.adb (Locate_Directory): Add check for improper\n\trelocation.\n\nFrom-SVN: r223553", "tree": {"sha": "35d7ac1037a5211f5a217b67c5f16e70ebeb113c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35d7ac1037a5211f5a217b67c5f16e70ebeb113c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/167b47d9da9a82c0c8f426f1853a961f10322be0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/167b47d9da9a82c0c8f426f1853a961f10322be0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/167b47d9da9a82c0c8f426f1853a961f10322be0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/167b47d9da9a82c0c8f426f1853a961f10322be0/comments", "author": null, "committer": null, "parents": [{"sha": "7ac5a14092e76fe71a3d8660a30079e35d2618f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ac5a14092e76fe71a3d8660a30079e35d2618f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ac5a14092e76fe71a3d8660a30079e35d2618f5"}], "stats": {"total": 271, "additions": 241, "deletions": 30}, "files": [{"sha": "3777b63b0f0e09b5fb9494e12521d0eb835198f4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167b47d9da9a82c0c8f426f1853a961f10322be0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167b47d9da9a82c0c8f426f1853a961f10322be0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=167b47d9da9a82c0c8f426f1853a961f10322be0", "patch": "@@ -1,3 +1,43 @@\n+2015-05-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* einfo.ads, einfo.adb (Incomplete_Actuals): New attribute of\n+\tpackage instantiations. Holds the list of actuals in the instance\n+\tthat are incomplete types, to determine where the corresponding\n+\tinstance body must be placed.\n+\t* sem_ch6.adb (Conforming_Types): An incomplete type used as an\n+\tactual in an instance matches an incomplete formal.\n+\t* sem_disp.adb (Check_Dispatching_Call): Handle missing case of\n+\texplicit dereference.\n+\t(Inherited_Subprograms): In the presence of a limited view there\n+\tare no subprograms to inherit.\n+\t* sem_ch12.adb (Preanalyze_Actuals): Build list of incomplete\n+\tactuals of instance, for later placement of instance body and\n+\tfreeze nodes for actuals.\n+\t(Install_Body): In the presence of actuals that incomplete types\n+\tfrom a limited view, the instance body cannot be placed after\n+\tthe declaration because full views have not been seen yet. Any\n+\tuse of the non-limited views in the instance body requires\n+\tthe presence of a regular with_clause in the enclosing unit,\n+\tand will fail if this with_clause is missing.  We place the\n+\tinstance body at the beginning of the enclosing body, which is\n+\tthe unit being compiled, and ensure that freeze nodes for the\n+\tfull views of the incomplete types appear before the instance.\n+\n+2015-05-22  Pascal Obry  <obry@adacore.com>\n+\n+\t* makeutl.ads, prj-conf.adb, prj-nmsc.adb, prj.ads\n+\t(In_Place_Option): Removed.\n+\t(Relocate_Build_Tree_Option): New constant.\n+\t(Root_Dir_Option): New constant.\n+\t(Obj_Root_Dir): Removed.\n+\t(Build_Tree_Dir): New variable.\n+\t(Root_Src_Tree): Removed.\n+\t(Root_Dir): New variable.\n+\t* prj-conf.adb (Get_Or_Create_Configuration_File): Add check\n+\tfor improper relocation.\n+\t* prj-nmsc.adb (Locate_Directory): Add check for improper\n+\trelocation.\n+\n 2015-05-22  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* einfo.adb (Default_Init_Cond_Procedure): Code cleanup. The"}, {"sha": "bcbf20f54094ef657da5e9a97ca3993f8d910fcf", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167b47d9da9a82c0c8f426f1853a961f10322be0/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167b47d9da9a82c0c8f426f1853a961f10322be0/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=167b47d9da9a82c0c8f426f1853a961f10322be0", "patch": "@@ -212,6 +212,7 @@ package body Einfo is\n    --    Protection_Object               Node23\n    --    Stored_Constraint               Elist23\n \n+   --    Incomplete_Actuals              Elist24\n    --    Related_Expression              Node24\n    --    Subps_Index                     Uint24\n \n@@ -1878,6 +1879,12 @@ package body Einfo is\n       return Node35 (Id);\n    end Import_Pragma;\n \n+   function Incomplete_Actuals (Id : E) return L is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Package);\n+      return Elist24 (Id);\n+   end Incomplete_Actuals;\n+\n    function Interface_Alias (Id : E) return E is\n    begin\n       pragma Assert (Is_Subprogram (Id));\n@@ -4765,6 +4772,12 @@ package body Einfo is\n       Set_Node4 (Id, V);\n    end Set_Homonym;\n \n+   procedure Set_Incomplete_Actuals (Id : E; V : L) is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Package);\n+      Set_Elist24 (Id, V);\n+   end Set_Incomplete_Actuals;\n+\n    procedure Set_Import_Pragma (Id : E; V : E) is\n    begin\n       pragma Assert (Is_Subprogram (Id));\n@@ -9801,6 +9814,9 @@ package body Einfo is\n               E_Procedure                                  =>\n             Write_Str (\"Subps_Index\");\n \n+         when E_Package                                    =>\n+            Write_Str (\"Incomplete_Actuals\");\n+\n          when others                                       =>\n             Write_Str (\"Field24???\");\n       end case;"}, {"sha": "550294f1c15092f16f8538f33273c08e04aa52cb", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167b47d9da9a82c0c8f426f1853a961f10322be0/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167b47d9da9a82c0c8f426f1853a961f10322be0/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=167b47d9da9a82c0c8f426f1853a961f10322be0", "patch": "@@ -2090,6 +2090,13 @@ package Einfo is\n --       Rep_Item chain mechanism, because a single pragma Import can apply\n --       to multiple subprogram entities).\n \n+--    Incomplete_Actuals (Elist24)\n+--       Defined on package entities that are instances. Indicates the actusl\n+--       types in the instantiation that are limited views. IF this list is\n+--       not empty, the instantiation, which appears in a package declaration,\n+--       is relocated to the corresponding package body, which must have a\n+--       corresponding non-limited with_clause.\n+\n --    In_Package_Body (Flag48)\n --       Defined in package entities. Set on the entity that denotes the\n --       package (the defining occurrence of the package declaration) while\n@@ -4028,7 +4035,9 @@ package Einfo is\n --       length objects). It is set conservatively (i.e. if it is True, the\n --       size is certainly known at compile time, if it is False, then the\n --       size may or may not be known at compile time, but the code will\n---       assume that it is not known).\n+--       assume that it is not known). Note that the value may be known only\n+--       to the back end, so the fact that this flag is set does not mean that\n+--       the front end can access the value.\n \n --    Small_Value (Ureal21)\n --       Defined in fixed point types. Points to the universal real for the\n@@ -6042,6 +6051,7 @@ package Einfo is\n    --    Generic_Renamings                   (Elist23)  (for an instance)\n    --    Inner_Instances                     (Elist23)  (generic case only)\n    --    Limited_View                        (Node23)   (non-generic/instance)\n+   --    Incomplete_Actuals                  (Elist24)  (for an instance)\n    --    Abstract_States                     (Elist25)\n    --    Package_Instantiation               (Node26)\n    --    Current_Use_Clause                  (Node27)\n@@ -6840,6 +6850,7 @@ package Einfo is\n    function Hiding_Loop_Variable                (Id : E) return E;\n    function Homonym                             (Id : E) return E;\n    function Import_Pragma                       (Id : E) return E;\n+   function Incomplete_Actuals                  (Id : E) return L;\n    function In_Package_Body                     (Id : E) return B;\n    function In_Private_Part                     (Id : E) return B;\n    function In_Use                              (Id : E) return B;\n@@ -7492,6 +7503,7 @@ package Einfo is\n    procedure Set_Hiding_Loop_Variable            (Id : E; V : E);\n    procedure Set_Homonym                         (Id : E; V : E);\n    procedure Set_Import_Pragma                   (Id : E; V : E);\n+   procedure Set_Incomplete_Actuals              (Id : E; V : L);\n    procedure Set_In_Package_Body                 (Id : E; V : B := True);\n    procedure Set_In_Private_Part                 (Id : E; V : B := True);\n    procedure Set_In_Use                          (Id : E; V : B := True);\n@@ -8265,6 +8277,7 @@ package Einfo is\n    pragma Inline (Hiding_Loop_Variable);\n    pragma Inline (Homonym);\n    pragma Inline (Import_Pragma);\n+   pragma Inline (Incomplete_Actuals);\n    pragma Inline (In_Package_Body);\n    pragma Inline (In_Private_Part);\n    pragma Inline (In_Use);\n@@ -8763,6 +8776,7 @@ package Einfo is\n    pragma Inline (Set_Hiding_Loop_Variable);\n    pragma Inline (Set_Homonym);\n    pragma Inline (Set_Import_Pragma);\n+   pragma Inline (Set_Incomplete_Actuals);\n    pragma Inline (Set_In_Package_Body);\n    pragma Inline (Set_In_Private_Part);\n    pragma Inline (Set_In_Use);"}, {"sha": "45442c85c264d4fc0adfc343434e8e02d0140c43", "filename": "gcc/ada/makeutl.ads", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167b47d9da9a82c0c8f426f1853a961f10322be0/gcc%2Fada%2Fmakeutl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167b47d9da9a82c0c8f426f1853a961f10322be0/gcc%2Fada%2Fmakeutl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.ads?ref=167b47d9da9a82c0c8f426f1853a961f10322be0", "patch": "@@ -66,9 +66,17 @@ package Makeutl is\n    --  Switch used to indicate that the real directories (object, exec,\n    --  library, ...) are subdirectories of those in the project file.\n \n-   In_Place_Option : constant String := \"--in-place\";\n+   Relocate_Build_Tree_Option : constant String := \"--relocate-build-tree\";\n    --  Switch to build out-of-tree. In this context the object, exec and\n-   --  library directories are relocated to the current working directory.\n+   --  library directories are relocated to the current working directory\n+   --  or the directory specified as parameter to this option.\n+\n+   Root_Dir_Option : constant String := \"--root-dir\";\n+   --  The root directory under which all artifacts (objects, library, ali)\n+   --  directory are to be found for the current compilation. This directory\n+   --  will be use to relocate artifacts based on this directory. If this\n+   --  option is not specificed the default value is the directory of the\n+   --  main project.\n \n    Unchecked_Shared_Lib_Imports : constant String :=\n                                     \"--unchecked-shared-lib-imports\";"}, {"sha": "8c55f2a515b5dce14a967f0484ac81db929d3e58", "filename": "gcc/ada/prj-conf.adb", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167b47d9da9a82c0c8f426f1853a961f10322be0/gcc%2Fada%2Fprj-conf.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167b47d9da9a82c0c8f426f1853a961f10322be0/gcc%2Fada%2Fprj-conf.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-conf.adb?ref=167b47d9da9a82c0c8f426f1853a961f10322be0", "patch": "@@ -962,19 +962,27 @@ package body Prj.Conf is\n \n          --  First, find the object directory of the Conf_Project\n \n-         --  If the object directory is a relative one and Obj_Root_Dir is set,\n-         --  first add it.\n+         --  If the object directory is a relative one and Build_Tree_Dir is\n+         --  set, first add it.\n \n          Name_Len := 0;\n \n          if Obj_Dir = Nil_Variable_Value or else Obj_Dir.Default then\n \n-            if Obj_Root_Dir /= null then\n-               Add_Str_To_Name_Buffer (Obj_Root_Dir.all);\n+            if Build_Tree_Dir /= null then\n+               Add_Str_To_Name_Buffer (Build_Tree_Dir.all);\n+\n+               if Get_Name_String (Conf_Project.Directory.Display_Name)'Length\n+                 < Root_Dir'Length\n+               then\n+                  Raise_Invalid_Config\n+                    (\"cannot relocate deeper than object directory\");\n+               end if;\n+\n                Add_Str_To_Name_Buffer\n                  (Relative_Path\n                     (Get_Name_String (Conf_Project.Directory.Display_Name),\n-                     Root_Src_Tree.all));\n+                     Root_Dir.all));\n             else\n                Get_Name_String (Conf_Project.Directory.Display_Name);\n             end if;\n@@ -984,12 +992,20 @@ package body Prj.Conf is\n                Get_Name_String (Obj_Dir.Value);\n \n             else\n-               if Obj_Root_Dir /= null then\n-                  Add_Str_To_Name_Buffer (Obj_Root_Dir.all);\n+               if Build_Tree_Dir /= null then\n+                  if Get_Name_String\n+                    (Conf_Project.Directory.Display_Name)'Length\n+                    < Root_Dir'Length\n+                  then\n+                     Raise_Invalid_Config\n+                       (\"cannot relocate deeper than object directory\");\n+                  end if;\n+\n+                  Add_Str_To_Name_Buffer (Build_Tree_Dir.all);\n                   Add_Str_To_Name_Buffer\n                     (Relative_Path\n                        (Get_Name_String (Conf_Project.Directory.Display_Name),\n-                        Root_Src_Tree.all));\n+                        Root_Dir.all));\n                else\n                   Add_Str_To_Name_Buffer\n                     (Get_Name_String (Conf_Project.Directory.Display_Name));"}, {"sha": "a34b5a1b4b99aaef35c83247f1794cfd7fc21bb5", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167b47d9da9a82c0c8f426f1853a961f10322be0/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167b47d9da9a82c0c8f426f1853a961f10322be0/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=167b47d9da9a82c0c8f426f1853a961f10322be0", "patch": "@@ -5589,8 +5589,8 @@ package body Prj.Nmsc is\n             end if;\n          end if;\n \n-      elsif not No_Sources\n-        and then (Subdirs /= null or else Obj_Root_Dir /= null)\n+      elsif not No_Sources and then\n+        (Subdirs /= null or else Build_Tree_Dir /= null)\n       then\n          Name_Len := 1;\n          Name_Buffer (1) := '.';\n@@ -6209,21 +6209,29 @@ package body Prj.Nmsc is\n       --  Check if we have a root-object dir specified, if so relocate all\n       --  artefact directories to it.\n \n-      if Obj_Root_Dir /= null\n+      if Build_Tree_Dir /= null\n         and then Create /= \"\"\n         and then not Is_Absolute_Path (Get_Name_String (Name))\n       then\n          Name_Len := 0;\n-         Add_Str_To_Name_Buffer (Obj_Root_Dir.all);\n+         Add_Str_To_Name_Buffer (Build_Tree_Dir.all);\n+\n+         if The_Parent_Last - The_Parent'First  + 1 < Root_Dir'Length then\n+            Err_Vars.Error_Msg_File_1 := Name;\n+            Error_Or_Warning\n+              (Data.Flags, Error,\n+               \"{ cannot relocate deeper than \" & Create & \" directory\",\n+               No_Location, Project);\n+         end if;\n+\n          Add_Str_To_Name_Buffer\n            (Relative_Path\n               (The_Parent (The_Parent'First .. The_Parent_Last),\n-               Root_Src_Tree.all));\n+               Root_Dir.all));\n          Add_Str_To_Name_Buffer (Get_Name_String (Name));\n \n       else\n-         if Obj_Root_Dir /= null and then Create /= \"\" then\n-\n+         if Build_Tree_Dir /= null and then Create /= \"\" then\n             --  Issue a warning that we cannot relocate absolute obj dir\n \n             Err_Vars.Error_Msg_File_1 := Name;"}, {"sha": "29a718eb04bee2f3ada20c89adb4b5901ffb5879", "filename": "gcc/ada/prj.ads", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167b47d9da9a82c0c8f426f1853a961f10322be0/gcc%2Fada%2Fprj.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167b47d9da9a82c0c8f426f1853a961f10322be0/gcc%2Fada%2Fprj.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.ads?ref=167b47d9da9a82c0c8f426f1853a961f10322be0", "patch": "@@ -61,16 +61,14 @@ package Prj is\n    --  The value after the equal sign in switch --subdirs=...\n    --  Contains the relative subdirectory.\n \n-   Obj_Root_Dir : String_Ptr := null;\n+   Build_Tree_Dir : String_Ptr := null;\n    --  A root directory for building out-of-tree projects. All relative object\n-   --  directories will be rooted at this location. If Subdirs is also set it\n-   --  will be added at the end too.\n+   --  directories will be rooted at this location.\n \n-   Root_Src_Tree : String_Ptr := null;\n+   Root_Dir : String_Ptr := null;\n    --  When using out-of-tree build we need to keep information about the root\n-   --  directory source tree to properly relocate all projects to this root\n-   --  directory. Note that the root source directory is not necessary the\n-   --  directory of the main project.\n+   --  directory of artifacts to properly relocate them. Note that the root\n+   --  directory is not necessary the directory of the main project.\n \n    type Library_Support is (None, Static_Only, Full);\n    --  Support for Library Project File."}, {"sha": "12f76b3af46afd1bdee430c01222dc6342d7acfe", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 78, "deletions": 3, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167b47d9da9a82c0c8f426f1853a961f10322be0/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167b47d9da9a82c0c8f426f1853a961f10322be0/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=167b47d9da9a82c0c8f426f1853a961f10322be0", "patch": "@@ -825,11 +825,14 @@ package body Sem_Ch12 is\n    --  at the end of the enclosing generic package, which is semantically\n    --  neutral.\n \n-   procedure Preanalyze_Actuals (N : Node_Id);\n+   procedure Preanalyze_Actuals (N : Node_Id; Inst : Entity_Id := Empty);\n    --  Analyze actuals to perform name resolution. Full resolution is done\n    --  later, when the expected types are known, but names have to be captured\n    --  before installing parents of generics, that are not visible for the\n    --  actuals themselves.\n+   --  If Inst is present, it is the entity of the package instance. This\n+   --  entity is marked as having a limited_view actual when some actual is\n+   --  a limited view. This is used to place the instance body properly..\n \n    procedure Remove_Parent (In_Body : Boolean := False);\n    --  Reverse effect after instantiation of child is complete\n@@ -3596,7 +3599,12 @@ package body Sem_Ch12 is\n       end if;\n \n       Generate_Definition (Act_Decl_Id);\n-      Preanalyze_Actuals (N);\n+      Set_Ekind (Act_Decl_Id, E_Package);\n+\n+      --  Initialize list of incomplete actuals before analysis.\n+      Set_Incomplete_Actuals (Act_Decl_Id, New_Elmt_List);\n+\n+      Preanalyze_Actuals (N, Act_Decl_Id);\n \n       Init_Env;\n       Env_Installed := True;\n@@ -8845,6 +8853,66 @@ package body Sem_Ch12 is\n    --  Start of processing for Install_Body\n \n    begin\n+      --  Handle first the case of an instance with incomplete actual types.\n+      --  The instance body cannot be placed after the declaration because\n+      --  full views have not been seen yet. Any use of the non-limited views\n+      --  in the instance body requires the presence of a regular with_clause\n+      --  in the enclosing unit, and will fail if this with_clause is missing.\n+      --  We place the instance body at the beginning of the enclosing body,\n+      --  which is the unit being compiled, and ensure that freeze nodes for\n+      --  the full views of the incomplete types appear before the instance.\n+\n+      if not Is_Empty_Elmt_List (Incomplete_Actuals (Act_Id))\n+        and then Expander_Active\n+        and then Ekind (Scope (Act_Id)) = E_Package\n+      then\n+         declare\n+            Scop    : constant Entity_Id := Scope (Act_Id);\n+            Body_Id : constant Node_Id :=\n+                         Corresponding_Body (Unit_Declaration_Node (Scop));\n+\n+         begin\n+            Ensure_Freeze_Node (Act_Id);\n+            F_Node := Freeze_Node (Act_Id);\n+            if Present (Body_Id) then\n+               Set_Is_Frozen (Act_Id);\n+               Prepend (Act_Body, Declarations (Parent (Body_Id)));\n+            end if;\n+\n+            --  Add freeze nodes of formerly incomplete types ahead of\n+            --  the instance body.\n+\n+            declare\n+               Elmt    : Elmt_Id;\n+               F_T     : Node_Id;\n+               Typ     : Entity_Id;\n+\n+            begin\n+               Elmt := First_Elmt (Incomplete_Actuals (Act_Id));\n+               while Present (Elmt) loop\n+                  Typ := Node (Elmt);\n+                  if From_Limited_With (Typ) then\n+                     Typ := Non_Limited_View (Typ);\n+                  end if;\n+                  Ensure_Freeze_Node (Typ);\n+                  F_T := Freeze_Node (Typ);\n+\n+                  --  If freeze node is already in the tree, remove it\n+                  --  and place ahead of instance body.\n+\n+                  if Is_List_Member (F_T) then\n+                     Remove (F_T);\n+                  end if;\n+\n+                  Prepend (F_T, Declarations (Parent (Body_Id)));\n+                  Next_Elmt (Elmt);\n+               end loop;\n+            end;\n+         end;\n+\n+         return;\n+      end if;\n+\n       --  If the body is a subunit, the freeze point is the corresponding stub\n       --  in the current compilation, not the subunit itself.\n \n@@ -13195,7 +13263,7 @@ package body Sem_Ch12 is\n    -- Preanalyze_Actuals --\n    ------------------------\n \n-   procedure Preanalyze_Actuals (N : Node_Id) is\n+   procedure Preanalyze_Actuals (N : Node_Id; Inst : Entity_Id := Empty) is\n       Assoc : Node_Id;\n       Act   : Node_Id;\n       Errs  : constant Int := Serious_Errors_Detected;\n@@ -13286,6 +13354,13 @@ package body Sem_Ch12 is\n \n             elsif Nkind (Act) /= N_Operator_Symbol then\n                Analyze (Act);\n+\n+               if Is_Entity_Name (Act)\n+                 and then  Is_Type (Entity (Act))\n+                 and then From_Limited_With (Entity (Act))\n+               then\n+                  Append_Elmt (Entity (Act), Incomplete_Actuals (Inst));\n+               end if;\n             end if;\n \n             if Errs /= Serious_Errors_Detected then"}, {"sha": "e851346a50896e9953c61e2ce46c102cb2d06075", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167b47d9da9a82c0c8f426f1853a961f10322be0/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167b47d9da9a82c0c8f426f1853a961f10322be0/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=167b47d9da9a82c0c8f426f1853a961f10322be0", "patch": "@@ -2822,7 +2822,7 @@ package body Sem_Ch6 is\n          procedure Detect_And_Exchange (Id : Entity_Id);\n          --  Determine whether Id's type denotes an incomplete type associated\n          --  with a limited with clause and exchange the limited view with the\n-         --  non-limited one.\n+         --  non-limited one when available.\n \n          -------------------------\n          -- Detect_And_Exchange --\n@@ -2831,7 +2831,9 @@ package body Sem_Ch6 is\n          procedure Detect_And_Exchange (Id : Entity_Id) is\n             Typ : constant Entity_Id := Etype (Id);\n          begin\n-            if From_Limited_With (Typ) and then Has_Non_Limited_View (Typ) then\n+            if From_Limited_With (Typ)\n+              and then Has_Non_Limited_View (Typ)\n+            then\n                Set_Etype (Id, Non_Limited_View (Typ));\n             end if;\n          end Detect_And_Exchange;\n@@ -6520,6 +6522,16 @@ package body Sem_Ch6 is\n       then\n          return Ctype <= Mode_Conformant\n            or else Subtypes_Statically_Match (Type_1, Full_View (Type_2));\n+\n+      --  In Ada2012, incomplete types (including limited views) can appear\n+      --  as actuals in instantiations.\n+\n+      elsif Is_Incomplete_Type (Type_1)\n+        and then Is_Incomplete_Type (Type_2)\n+        and then (Used_As_Generic_Actual (Type_1)\n+                   or else Used_As_Generic_Actual (Type_2))\n+      then\n+         return True;\n       end if;\n \n       --  Ada 2005 (AI-254): Anonymous access-to-subprogram types must be\n@@ -6610,6 +6622,15 @@ package body Sem_Ch6 is\n                   end;\n                end if;\n \n+            --  A limited view of an actual matches the corresponding\n+            --  incomplete formal.\n+\n+            elsif Ekind (Desig_2) = E_Incomplete_Subtype\n+              and then From_Limited_With (Desig_2)\n+              and then Used_As_Generic_Actual (Etype (Desig_2))\n+            then\n+               return True;\n+\n             else\n                return Base_Type (Desig_1) = Base_Type (Desig_2)\n                 and then (Ctype = Type_Conformant"}, {"sha": "273b0cd93d02b1ff713c2aad70c0bc444dd47bcd", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167b47d9da9a82c0c8f426f1853a961f10322be0/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167b47d9da9a82c0c8f426f1853a961f10322be0/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=167b47d9da9a82c0c8f426f1853a961f10322be0", "patch": "@@ -823,6 +823,13 @@ package body Sem_Disp is\n                   then\n                      Func := Empty;\n \n+                  --  Ditto if it is an explicit dereference.\n+\n+                  elsif\n+                    Nkind (Original_Node (Actual)) = N_Explicit_Dereference\n+                  then\n+                     Func := Empty;\n+\n                   --  Only other possibility is a qualified expression whose\n                   --  constituent expression is itself a call.\n \n@@ -2125,6 +2132,14 @@ package body Sem_Disp is\n             begin\n                Tag_Typ := Find_Dispatching_Type (S);\n \n+               --  In the presence of limited views there may be no visible\n+               --  dispatching type. Primitives will be inherited when non-\n+               --  limited view is frozen.\n+\n+               if No (Tag_Typ) then\n+                  return Result (1 .. 0);\n+               end if;\n+\n                if Is_Concurrent_Type (Tag_Typ) then\n                   Tag_Typ := Corresponding_Record_Type (Tag_Typ);\n                end if;"}]}