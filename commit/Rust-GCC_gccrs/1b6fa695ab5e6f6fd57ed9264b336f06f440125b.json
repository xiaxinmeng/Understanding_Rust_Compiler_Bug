{"sha": "1b6fa695ab5e6f6fd57ed9264b336f06f440125b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI2ZmE2OTVhYjVlNmY2ZmQ1N2VkOTI2NGIzMzZmMDZmNDQwMTI1Yg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-11-06T09:02:15Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-11-06T09:02:15Z"}, "message": "Instrument function exit with __builtin_unreachable in C++\n\n2017-11-06  Martin Liska  <mliska@suse.cz>\n\n\tPR middle-end/82404\n\t* c-opts.c (c_common_post_options): Set -Wreturn-type for C++\n\tFE.\n\t* c.opt: Set default value of warn_return_type.\n2017-11-06  Martin Liska  <mliska@suse.cz>\n\n\tPR middle-end/82404\n\t* constexpr.c (cxx_eval_builtin_function_call): Handle\n\t__builtin_unreachable call.\n\t(get_function_named_in_call): Declare function earlier.\n\t(constexpr_fn_retval): Skip __builtin_unreachable.\n\t* cp-gimplify.c (cp_ubsan_maybe_instrument_return): Rename to\n\t...\n\t(cp_maybe_instrument_return): ... this.\n\t(cp_genericize): Call the function unconditionally.\n2017-11-06  Martin Liska  <mliska@suse.cz>\n\n\tPR middle-end/82404\n\t* options.c (gfc_post_options): Set default value of\n\t-Wreturn-type to false.\n\nFrom-SVN: r254437", "tree": {"sha": "34f2706dd509a58f25ed69fda30793e918703da2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34f2706dd509a58f25ed69fda30793e918703da2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b6fa695ab5e6f6fd57ed9264b336f06f440125b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b6fa695ab5e6f6fd57ed9264b336f06f440125b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b6fa695ab5e6f6fd57ed9264b336f06f440125b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b6fa695ab5e6f6fd57ed9264b336f06f440125b/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3232f0521cda16efeff012f65bc4d0b15d02a7e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3232f0521cda16efeff012f65bc4d0b15d02a7e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3232f0521cda16efeff012f65bc4d0b15d02a7e2"}], "stats": {"total": 105, "additions": 81, "deletions": 24}, "files": [{"sha": "373db2d1994253aefe9741e1d362e9a78767486b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b6fa695ab5e6f6fd57ed9264b336f06f440125b/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b6fa695ab5e6f6fd57ed9264b336f06f440125b/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=1b6fa695ab5e6f6fd57ed9264b336f06f440125b", "patch": "@@ -1,3 +1,10 @@\n+2017-11-06  Martin Liska  <mliska@suse.cz>\n+\n+\tPR middle-end/82404\n+\t* c-opts.c (c_common_post_options): Set -Wreturn-type for C++\n+\tFE.\n+\t* c.opt: Set default value of warn_return_type.\n+\n 2017-10-31  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-common.c (binary_op_error): Update for renaming of"}, {"sha": "cead15e7a63524504678f5e4e389a86bd3674460", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b6fa695ab5e6f6fd57ed9264b336f06f440125b/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b6fa695ab5e6f6fd57ed9264b336f06f440125b/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=1b6fa695ab5e6f6fd57ed9264b336f06f440125b", "patch": "@@ -989,6 +989,9 @@ c_common_post_options (const char **pfilename)\n \tflag_extern_tls_init = 1;\n     }\n \n+  if (warn_return_type == -1)\n+    warn_return_type = c_dialect_cxx ();\n+\n   if (num_in_fnames > 1)\n     error (\"too many filenames given.  Type %s --help for usage\",\n \t   progname);"}, {"sha": "9ab31f0e15364c82cac5f6782d674a8c9f1fddf9", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b6fa695ab5e6f6fd57ed9264b336f06f440125b/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b6fa695ab5e6f6fd57ed9264b336f06f440125b/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=1b6fa695ab5e6f6fd57ed9264b336f06f440125b", "patch": "@@ -960,7 +960,7 @@ C++ ObjC++ Var(warn_reorder) Warning LangEnabledBy(C++ ObjC++,Wall)\n Warn when the compiler reorders code.\n \n Wreturn-type\n-C ObjC C++ ObjC++ Var(warn_return_type) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n+C ObjC C++ ObjC++ Var(warn_return_type) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall) Init(-1)\n Warn whenever a function's return type defaults to \\\"int\\\" (C), or about inconsistent return types (C++).\n \n Wscalar-storage-order"}, {"sha": "bb90b5ac4da75f993f24228e0aba014dd5c5fdb3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b6fa695ab5e6f6fd57ed9264b336f06f440125b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b6fa695ab5e6f6fd57ed9264b336f06f440125b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1b6fa695ab5e6f6fd57ed9264b336f06f440125b", "patch": "@@ -1,3 +1,15 @@\n+2017-11-06  Martin Liska  <mliska@suse.cz>\n+\n+\tPR middle-end/82404\n+\t* constexpr.c (cxx_eval_builtin_function_call): Handle\n+\t__builtin_unreachable call.\n+\t(get_function_named_in_call): Declare function earlier.\n+\t(constexpr_fn_retval): Skip __builtin_unreachable.\n+\t* cp-gimplify.c (cp_ubsan_maybe_instrument_return): Rename to\n+\t...\n+\t(cp_maybe_instrument_return): ... this.\n+\t(cp_genericize): Call the function unconditionally.\n+\n 2017-11-03  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/82710"}, {"sha": "670aae22dd66db961dfa58d06ba777ec11b76ca7", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b6fa695ab5e6f6fd57ed9264b336f06f440125b/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b6fa695ab5e6f6fd57ed9264b336f06f440125b/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=1b6fa695ab5e6f6fd57ed9264b336f06f440125b", "patch": "@@ -628,6 +628,20 @@ build_constexpr_constructor_member_initializers (tree type, tree body)\n     return error_mark_node;\n }\n \n+/* We have an expression tree T that represents a call, either CALL_EXPR\n+   or AGGR_INIT_EXPR.  If the call is lexically to a named function,\n+   retrun the _DECL for that function.  */\n+\n+static tree\n+get_function_named_in_call (tree t)\n+{\n+  tree fun = cp_get_callee (t);\n+  if (fun && TREE_CODE (fun) == ADDR_EXPR\n+      && TREE_CODE (TREE_OPERAND (fun, 0)) == FUNCTION_DECL)\n+    fun = TREE_OPERAND (fun, 0);\n+  return fun;\n+}\n+\n /* Subroutine of register_constexpr_fundef.  BODY is the body of a function\n    declared to be constexpr, or a sub-statement thereof.  Returns the\n    return value if suitable, error_mark_node for a statement not allowed in\n@@ -682,6 +696,15 @@ constexpr_fn_retval (tree body)\n     case USING_STMT:\n       return NULL_TREE;\n \n+    case CALL_EXPR:\n+\t{\n+\t  tree fun = get_function_named_in_call (body);\n+\t  if (fun != NULL_TREE\n+\t      && DECL_FUNCTION_CODE (fun) == BUILT_IN_UNREACHABLE)\n+\t    return NULL_TREE;\n+\t}\n+      /* Fallthru.  */\n+\n     default:\n       return error_mark_node;\n     }\n@@ -1097,20 +1120,6 @@ save_fundef_copy (tree fun, tree copy)\n   *slot = copy;\n }\n \n-/* We have an expression tree T that represents a call, either CALL_EXPR\n-   or AGGR_INIT_EXPR.  If the call is lexically to a named function,\n-   retrun the _DECL for that function.  */\n-\n-static tree\n-get_function_named_in_call (tree t)\n-{\n-  tree fun = cp_get_callee (t);\n-  if (fun && TREE_CODE (fun) == ADDR_EXPR\n-      && TREE_CODE (TREE_OPERAND (fun, 0)) == FUNCTION_DECL)\n-    fun = TREE_OPERAND (fun, 0);\n-  return fun;\n-}\n-\n /* We have an expression tree T that represents a call, either CALL_EXPR\n    or AGGR_INIT_EXPR.  Return the Nth argument.  */\n \n@@ -1180,9 +1189,18 @@ cxx_eval_builtin_function_call (const constexpr_ctx *ctx, tree t, tree fun,\n     {\n       if (!*non_constant_p && !ctx->quiet)\n \t{\n-\t  new_call = build_call_array_loc (EXPR_LOCATION (t), TREE_TYPE (t),\n-\t\t\t\t\t   CALL_EXPR_FN (t), nargs, args);\n-\t  error (\"%q+E is not a constant expression\", new_call);\n+\t  /* Do not allow__builtin_unreachable in constexpr function.\n+\t     The __builtin_unreachable call with BUILTINS_LOCATION\n+\t     comes from cp_maybe_instrument_return.  */\n+\t  if (DECL_FUNCTION_CODE (fun) == BUILT_IN_UNREACHABLE\n+\t      && EXPR_LOCATION (t) == BUILTINS_LOCATION)\n+\t    error (\"constexpr call flows off the end of the function\");\n+\t  else\n+\t    {\n+\t      new_call = build_call_array_loc (EXPR_LOCATION (t), TREE_TYPE (t),\n+\t\t\t\t\t       CALL_EXPR_FN (t), nargs, args);\n+\t      error (\"%q+E is not a constant expression\", new_call);\n+\t    }\n \t}\n       *non_constant_p = true;\n       return t;"}, {"sha": "014c1ee7231f7889e3bac40b1e6e755a3175ce30", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b6fa695ab5e6f6fd57ed9264b336f06f440125b/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b6fa695ab5e6f6fd57ed9264b336f06f440125b/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=1b6fa695ab5e6f6fd57ed9264b336f06f440125b", "patch": "@@ -1556,10 +1556,11 @@ cp_genericize_tree (tree* t_p, bool handle_invisiref_parm_p)\n \n /* If a function that should end with a return in non-void\n    function doesn't obviously end with return, add ubsan\n-   instrumentation code to verify it at runtime.  */\n+   instrumentation code to verify it at runtime.  If -fsanitize=return\n+   is not enabled, instrument __builtin_unreachable.  */\n \n static void\n-cp_ubsan_maybe_instrument_return (tree fndecl)\n+cp_maybe_instrument_return (tree fndecl)\n {\n   if (VOID_TYPE_P (TREE_TYPE (TREE_TYPE (fndecl)))\n       || DECL_CONSTRUCTOR_P (fndecl)\n@@ -1600,7 +1601,16 @@ cp_ubsan_maybe_instrument_return (tree fndecl)\n   tree *p = &DECL_SAVED_TREE (fndecl);\n   if (TREE_CODE (*p) == BIND_EXPR)\n     p = &BIND_EXPR_BODY (*p);\n-  t = ubsan_instrument_return (DECL_SOURCE_LOCATION (fndecl));\n+\n+  location_t loc = DECL_SOURCE_LOCATION (fndecl);\n+  if (sanitize_flags_p (SANITIZE_RETURN, fndecl))\n+    t = ubsan_instrument_return (loc);\n+  else\n+    {\n+      tree fndecl = builtin_decl_explicit (BUILT_IN_UNREACHABLE);\n+      t = build_call_expr_loc (BUILTINS_LOCATION, fndecl, 0);\n+    }\n+\n   append_to_statement_list (t, p);\n }\n \n@@ -1674,9 +1684,7 @@ cp_genericize (tree fndecl)\n      walk_tree's hash functionality.  */\n   cp_genericize_tree (&DECL_SAVED_TREE (fndecl), true);\n \n-  if (sanitize_flags_p (SANITIZE_RETURN)\n-      && current_function_decl != NULL_TREE)\n-    cp_ubsan_maybe_instrument_return (fndecl);\n+  cp_maybe_instrument_return (fndecl);\n \n   /* Do everything else.  */\n   c_genericize (fndecl);"}, {"sha": "1e40336665643b27340ffdd5cf530102bc98dbfe", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b6fa695ab5e6f6fd57ed9264b336f06f440125b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b6fa695ab5e6f6fd57ed9264b336f06f440125b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1b6fa695ab5e6f6fd57ed9264b336f06f440125b", "patch": "@@ -1,3 +1,9 @@\n+2017-11-06  Martin Liska  <mliska@suse.cz>\n+\n+\tPR middle-end/82404\n+\t* options.c (gfc_post_options): Set default value of\n+\t-Wreturn-type to false.\n+\n 2017-11-05  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/82471"}, {"sha": "c584a19e5596fc3e7506fc37d10c4a874ef4e25a", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b6fa695ab5e6f6fd57ed9264b336f06f440125b/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b6fa695ab5e6f6fd57ed9264b336f06f440125b/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=1b6fa695ab5e6f6fd57ed9264b336f06f440125b", "patch": "@@ -435,6 +435,9 @@ gfc_post_options (const char **pfilename)\n     gfc_fatal_error (\"Maximum subrecord length cannot exceed %d\",\n \t\t     MAX_SUBRECORD_LENGTH);\n \n+  if (warn_return_type == -1)\n+    warn_return_type = 0;\n+\n   gfc_cpp_post_options ();\n \n   if (gfc_option.allow_std & GFC_STD_F2008)"}]}