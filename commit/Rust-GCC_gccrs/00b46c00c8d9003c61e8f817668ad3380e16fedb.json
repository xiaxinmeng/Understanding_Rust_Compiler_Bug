{"sha": "00b46c00c8d9003c61e8f817668ad3380e16fedb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBiNDZjMDBjOGQ5MDAzYzYxZThmODE3NjY4YWQzMzgwZTE2ZmVkYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-03-22T15:15:12Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-03-22T15:56:49Z"}, "message": "libstdc++: Add noexcept to std::begin etc as per LWG 2280 and 3537\n\nThis implements the proposed changes for LWG 3537 (which we're allowed\nto do as an extension whatever the outcome of the issue). I noticed we\ndidn't implement LWG 2280 completely, as the std::begin and std::end\noverloads for arrays were not noexcept.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/range_access.h (begin(T (&)[N]), end(T (&)[N])):\n\tAdd missing 'noexcept' as per LWG 2280.\n\t(rbegin(T (&)[N]), rend(T (&)[N]), rbegin(initializer_list<T>))\n\t(rend(initializer_list<T>)): Add 'noexcept' as per LWG 3537.\n\t* testsuite/24_iterators/range_access/range_access.cc: Check for\n\texpected noexcept specifiers. Check result types of generic\n\tstd::begin and std::end overloads.\n\t* testsuite/24_iterators/range_access/range_access_cpp14.cc:\n\tCheck for expected noexcept specifiers.\n\t* testsuite/24_iterators/range_access/range_access_cpp17.cc:\n\tLikewise.", "tree": {"sha": "44e489704c82932669387f011fdc5be1f22a17ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44e489704c82932669387f011fdc5be1f22a17ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00b46c00c8d9003c61e8f817668ad3380e16fedb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00b46c00c8d9003c61e8f817668ad3380e16fedb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00b46c00c8d9003c61e8f817668ad3380e16fedb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00b46c00c8d9003c61e8f817668ad3380e16fedb/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87e3c2ef682e2ba7692ee56142a4eb5b6441c4d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87e3c2ef682e2ba7692ee56142a4eb5b6441c4d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87e3c2ef682e2ba7692ee56142a4eb5b6441c4d3"}], "stats": {"total": 71, "additions": 65, "deletions": 6}, "files": [{"sha": "71ad28c3ab0feb38be7ad02b6929520b0fe8f153", "filename": "libstdc++-v3/include/bits/range_access.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b46c00c8d9003c61e8f817668ad3380e16fedb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b46c00c8d9003c61e8f817668ad3380e16fedb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h?ref=00b46c00c8d9003c61e8f817668ad3380e16fedb", "patch": "@@ -87,7 +87,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _Tp, size_t _Nm>\n     inline _GLIBCXX14_CONSTEXPR _Tp*\n-    begin(_Tp (&__arr)[_Nm])\n+    begin(_Tp (&__arr)[_Nm]) noexcept\n     { return __arr; }\n \n   /**\n@@ -97,7 +97,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _Tp, size_t _Nm>\n     inline _GLIBCXX14_CONSTEXPR _Tp*\n-    end(_Tp (&__arr)[_Nm])\n+    end(_Tp (&__arr)[_Nm]) noexcept\n     { return __arr + _Nm; }\n \n #if __cplusplus >= 201402L\n@@ -178,7 +178,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _Tp, size_t _Nm>\n     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Tp*>\n-    rbegin(_Tp (&__arr)[_Nm])\n+    rbegin(_Tp (&__arr)[_Nm]) noexcept\n     { return reverse_iterator<_Tp*>(__arr + _Nm); }\n \n   /**\n@@ -188,7 +188,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _Tp, size_t _Nm>\n     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Tp*>\n-    rend(_Tp (&__arr)[_Nm])\n+    rend(_Tp (&__arr)[_Nm]) noexcept\n     { return reverse_iterator<_Tp*>(__arr); }\n \n   /**\n@@ -198,7 +198,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _Tp>\n     inline _GLIBCXX17_CONSTEXPR reverse_iterator<const _Tp*>\n-    rbegin(initializer_list<_Tp> __il)\n+    rbegin(initializer_list<_Tp> __il) noexcept\n     { return reverse_iterator<const _Tp*>(__il.end()); }\n \n   /**\n@@ -208,7 +208,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _Tp>\n     inline _GLIBCXX17_CONSTEXPR reverse_iterator<const _Tp*>\n-    rend(initializer_list<_Tp> __il)\n+    rend(initializer_list<_Tp> __il) noexcept\n     { return reverse_iterator<const _Tp*>(__il.begin()); }\n \n   /**"}, {"sha": "b0b379c6ea55d69588a935ba4f2e19f12c05296b", "filename": "libstdc++-v3/testsuite/24_iterators/range_access/range_access.cc", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b46c00c8d9003c61e8f817668ad3380e16fedb/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_access%2Frange_access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b46c00c8d9003c61e8f817668ad3380e16fedb/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_access%2Frange_access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_access%2Frange_access.cc?ref=00b46c00c8d9003c61e8f817668ad3380e16fedb", "patch": "@@ -27,4 +27,34 @@ test01()\n   int arr[3] = {1, 2, 3};\n   std::begin(arr);\n   std::end(arr);\n+\n+  static_assert( noexcept(std::begin(arr)), \"LWG 2280\" );\n+  static_assert( noexcept(std::end(arr)), \"LWG 2280\" );\n+}\n+\n+void\n+test02()\n+{\n+  extern void require_int(int*);\n+  extern void require_long(long*);\n+\n+  struct B\n+  {\n+    int* begin() { return nullptr; }\n+    long* begin() const { return nullptr; }\n+  };\n+\n+  B b;\n+  require_int( std::begin(b) );\n+  require_long( std::begin(const_cast<const B&>(b)) );\n+\n+  struct E\n+  {\n+    int* end() { return nullptr; }\n+    long* end() const { return nullptr; }\n+  };\n+\n+  E e;\n+  require_int( std::end(e) );\n+  require_long( std::end(const_cast<const E&>(e)) );\n }"}, {"sha": "75531719eeb359a5f0d7521c4edfceecac77cbb0", "filename": "libstdc++-v3/testsuite/24_iterators/range_access/range_access_cpp14.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b46c00c8d9003c61e8f817668ad3380e16fedb/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_access%2Frange_access_cpp14.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b46c00c8d9003c61e8f817668ad3380e16fedb/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_access%2Frange_access_cpp14.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_access%2Frange_access_cpp14.cc?ref=00b46c00c8d9003c61e8f817668ad3380e16fedb", "patch": "@@ -39,10 +39,21 @@ void\n test02()\n {\n   static int i[1];\n+  // LWG 2280\n   constexpr auto b  __attribute__((unused)) = std::begin(i);\n   constexpr auto e  __attribute__((unused)) = std::end(i);\n   constexpr auto cb __attribute__((unused)) = std::cbegin(i);\n   constexpr auto ce __attribute__((unused)) = std::cend(i);\n+\n+  // LWG 2280\n+  static_assert( noexcept(std::begin(i)),  \"LWG 2280\" );\n+  static_assert( noexcept(std::end(i)),    \"LWG 2280\" );\n+  static_assert( noexcept(std::cbegin(i)), \"LWG 2280\" );\n+  static_assert( noexcept(std::cend(i)),   \"LWG 2280\" );\n+\n+  // LWG 3537\n+  static_assert( noexcept(std::rbegin(i)),  \"LWG 3537\" );\n+  static_assert( noexcept(std::rend(i)),    \"LWG 3537\" );\n }\n \n void\n@@ -55,6 +66,10 @@ test03()\n   VERIFY(std::rend(il) == std::reverse_iterator<const int*>(il.begin()));\n   VERIFY(std::crbegin(il) == std::reverse_iterator<const int*>(il.end()));\n   VERIFY(std::crend(il) == std::reverse_iterator<const int*>(il.begin()));\n+\n+  // LWG 3537\n+  static_assert( noexcept(std::rbegin(il)),  \"LWG 3537\" );\n+  static_assert( noexcept(std::rend(il)),    \"LWG 3537\" );\n }\n \n void"}, {"sha": "358e19345e12893a71435d4c6edd8334c53e588f", "filename": "libstdc++-v3/testsuite/24_iterators/range_access/range_access_cpp17.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b46c00c8d9003c61e8f817668ad3380e16fedb/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_access%2Frange_access_cpp17.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b46c00c8d9003c61e8f817668ad3380e16fedb/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_access%2Frange_access_cpp17.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_access%2Frange_access_cpp17.cc?ref=00b46c00c8d9003c61e8f817668ad3380e16fedb", "patch": "@@ -41,6 +41,16 @@ test02()\n   static int i[] = { 1, 2 };\n   static_assert(std::distance(std::begin(i), std::end(i)) == 2);\n   static_assert(std::distance(std::cbegin(i), std::cend(i)) == 2);\n+\n+  // LWG 2280\n+  static_assert( noexcept(std::begin(i)),  \"LWG 2280\" );\n+  static_assert( noexcept(std::end(i)),    \"LWG 2280\" );\n+  static_assert( noexcept(std::cbegin(i)), \"LWG 2280\" );\n+  static_assert( noexcept(std::cend(i)),   \"LWG 2280\" );\n+\n+  // LWG 3537\n+  static_assert( noexcept(std::rbegin(i)),  \"LWG 3537\" );\n+  static_assert( noexcept(std::rend(i)),    \"LWG 3537\" );\n }\n \n void\n@@ -54,4 +64,8 @@ test03()\n   static_assert(std::rend(il) == reverse_iterator<const int*>(il.begin()));\n   static_assert(std::crbegin(il) == reverse_iterator<const int*>(il.end()));\n   static_assert(std::crend(il) == reverse_iterator<const int*>(il.begin()));\n+\n+  // LWG 3537\n+  static_assert( noexcept(std::rbegin(il)),  \"LWG 3537\" );\n+  static_assert( noexcept(std::rend(il)),    \"LWG 3537\" );\n }"}]}