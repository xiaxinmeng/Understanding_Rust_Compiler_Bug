{"sha": "fdf1b60d2b57031da4af9856d0d635bede588bcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRmMWI2MGQyYjU3MDMxZGE0YWY5ODU2ZDBkNjM1YmVkZTU4OGJjZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-06-04T19:25:41Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-06-04T19:25:41Z"}, "message": "locale_facets.h (ctype<_CharT>): Add definitions for generic ctype virtuals.\n\n\n2001-06-04  Brendan Kehoe  <brendan@zen.org>\n\t    Benjamin Kosnik  <bkoz@redhat.com>\n\n\tlibstdc++/3017\n\t* include/bits/locale_facets.h (ctype<_CharT>): Add definitions\n\tfor generic ctype virtuals.\n\t* src/locale.cc: Minor tweaks, naming consistency.\n\t* testsuite/22_locale/ctype.cc: Add test.\n\nFrom-SVN: r42872", "tree": {"sha": "bf7b8359ce5014ba3fd546029445a8ac21ebe21f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf7b8359ce5014ba3fd546029445a8ac21ebe21f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdf1b60d2b57031da4af9856d0d635bede588bcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdf1b60d2b57031da4af9856d0d635bede588bcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdf1b60d2b57031da4af9856d0d635bede588bcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdf1b60d2b57031da4af9856d0d635bede588bcd/comments", "author": null, "committer": null, "parents": [{"sha": "4aef4f331f857046f164896cd0ebdbdbbb05a4c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aef4f331f857046f164896cd0ebdbdbbb05a4c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aef4f331f857046f164896cd0ebdbdbbb05a4c4"}], "stats": {"total": 207, "additions": 136, "deletions": 71}, "files": [{"sha": "c9bac6cfb18bfea363eff5bfc225bcf0cf2de395", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf1b60d2b57031da4af9856d0d635bede588bcd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf1b60d2b57031da4af9856d0d635bede588bcd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fdf1b60d2b57031da4af9856d0d635bede588bcd", "patch": "@@ -1,3 +1,12 @@\n+2001-06-04  Brendan Kehoe  <brendan@zen.org>\n+\t    Benjamin Kosnik  <bkoz@redhat.com>\n+\t\n+\tlibstdc++/3017\n+\t* include/bits/locale_facets.h (ctype<_CharT>): Add definitions\n+\tfor generic ctype virtuals.\n+\t* src/locale.cc: Minor tweaks, naming consistency.\n+\t* testsuite/22_locale/ctype.cc: Add test.\n+\t\n 2001-06-04  Kenny Simpson <theonetruekenny@yahoo.com>\n             Phil Edwards  <pme@sources.redhat.com>\n \n@@ -57,7 +66,7 @@\n \tmake isn't found.\n \t* configure: Regenerate.\n \n-2001-05-27  scott snyder  <snyder@fnal.gov>\n+2001-05-31  scott snyder  <snyder@fnal.gov>\n \n \tlibstdc++/2976\n \t* include/bits/istream.tcc: Include std_ostream.h."}, {"sha": "cb249f8c51cafc9facb97b837de84b30ccdc4679", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 78, "deletions": 34, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf1b60d2b57031da4af9856d0d635bede588bcd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf1b60d2b57031da4af9856d0d635bede588bcd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=fdf1b60d2b57031da4af9856d0d635bede588bcd", "patch": "@@ -81,33 +81,33 @@ namespace std\n       { return this->do_toupper(__c); }\n \n       const char_type*\n-      toupper(char_type *__low, const char_type* __high) const\n-      { return this->do_toupper(__low, __high); }\n+      toupper(char_type *__lo, const char_type* __hi) const\n+      { return this->do_toupper(__lo, __hi); }\n \n       char_type \n       tolower(char_type __c) const\n       { return this->do_tolower(__c); }\n \n       const char_type*\n-      tolower(char_type* __low, const char_type* __high) const\n-      { return this->do_tolower(__low, __high); }\n+      tolower(char_type* __lo, const char_type* __hi) const\n+      { return this->do_tolower(__lo, __hi); }\n \n       char_type \n       widen(char __c) const\n       { return this->do_widen(__c); }\n \n       const char*\n-      widen(const char* __low, const char* __high, char_type* __to) const\n-      { return this->do_widen(__low, __high, __to); }\n+      widen(const char* __lo, const char* __hi, char_type* __to) const\n+      { return this->do_widen(__lo, __hi, __to); }\n \n       char \n       narrow(char_type __c, char __dfault) const\n       { return this->do_narrow(__c, __dfault); }\n \n       const char_type*\n-      narrow(const char_type* __low, const char_type* __high,\n+      narrow(const char_type* __lo, const char_type* __hi,\n \t      char __dfault, char *__to) const\n-      { return this->do_narrow(__low, __high, __dfault, __to); }\n+      { return this->do_narrow(__lo, __hi, __dfault, __to); }\n \n     protected:\n       explicit \n@@ -124,7 +124,7 @@ namespace std\n \t    mask* __vec) const = 0;\n \n       virtual const char_type*\n-      do_scan_is(mask __m, const char_type* __lo, \n+      do_scan_is(mask __m, const char_type* __lo,\n \t\t const char_type* __hi) const = 0;\n \n       virtual const char_type*\n@@ -135,26 +135,26 @@ namespace std\n       do_toupper(char_type) const = 0;\n \n       virtual const char_type*\n-      do_toupper(char_type* __low, const char_type* __high) const = 0;\n+      do_toupper(char_type* __lo, const char_type* __hi) const = 0;\n \n       virtual char_type \n       do_tolower(char_type) const = 0;\n \n       virtual const char_type*\n-      do_tolower(char_type* __low, const char_type* __high) const = 0;\n+      do_tolower(char_type* __lo, const char_type* __hi) const = 0;\n       \n       virtual char_type \n       do_widen(char) const = 0;\n \n       virtual const char*\n-      do_widen(const char* __low, const char* __high,\n+      do_widen(const char* __lo, const char* __hi, \n \t       char_type* __dest) const = 0;\n \n       virtual char \n       do_narrow(char_type, char __dfault) const = 0;\n \n       virtual const char_type*\n-      do_narrow(const char_type* __low, const char_type* __high,\n+      do_narrow(const char_type* __lo, const char_type* __hi,\n \t\t char __dfault, char* __dest) const = 0;\n     };\n \n@@ -175,6 +175,56 @@ namespace std\n    protected:\n       virtual \n       ~ctype() { }\n+\n+      virtual bool \n+      do_is(mask __m, char_type __c) const\n+      { return false; }\n+\n+      virtual const char_type*\n+      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const\n+      { return __hi; }\n+\n+      virtual const char_type*\n+      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const\n+      { return __hi; }\n+\n+      virtual const char_type*\n+      do_scan_not(mask __m, const char_type* __lo,\n+\t\t  const char_type* __hi) const\n+      { return __hi; }\n+\n+      virtual char_type \n+      do_toupper(char_type __c) const\n+      { return __c; }\n+\n+      virtual const char_type*\n+      do_toupper(char_type* __lo, const char_type* __hi) const\n+      { return __hi; }\n+\n+      virtual char_type \n+      do_tolower(char_type __c) const\n+      { return __c; }\n+\n+      virtual const char_type*\n+      do_tolower(char_type* __lo, const char_type* __hi) const\n+      { return __hi; }\n+      \n+      virtual char_type \n+      do_widen(char __c) const\n+      { return char_type(); }\n+\n+      virtual const char*\n+      do_widen(const char* __lo, const char* __hi, char_type* __dest) const\n+      { return __hi; }\n+\n+      virtual char \n+      do_narrow(char_type, char __dfault) const\n+      { return __dfault; }\n+\n+      virtual const char_type*\n+      do_narrow(const char_type* __lo, const char_type* __hi,\n+\t\tchar __dfault, char* __dest) const\n+      { return __hi; }\n     };\n \n   template<typename _CharT>\n@@ -207,13 +257,13 @@ namespace std\n       is(mask __m, char __c) const;\n  \n       inline const char*\n-      is(const char* __low, const char* __high, mask* __vec) const;\n+      is(const char* __lo, const char* __hi, mask* __vec) const;\n  \n       inline const char*\n-      scan_is(mask __m, const char* __low, const char* __high) const;\n+      scan_is(mask __m, const char* __lo, const char* __hi) const;\n \n       inline const char*\n-      scan_not(mask __m, const char* __low, const char* __high) const;\n+      scan_not(mask __m, const char* __lo, const char* __hi) const;\n      \n     protected:\n       virtual \n@@ -231,12 +281,10 @@ namespace std\n       do_is(mask __m, char_type __c) const;\n \n       virtual const char_type*\n-      do_is(const char_type* __lo, const char_type* __hi, \n-\t    mask* __vec) const;\n+      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;\n \n       virtual const char_type*\n-      do_scan_is(mask __m, const char_type* __lo, \n-\t\t const char_type* __hi) const;\n+      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;\n \n       virtual const char_type*\n       do_scan_not(mask __m, const char_type* __lo, \n@@ -246,26 +294,25 @@ namespace std\n       do_toupper(char_type) const;\n \n       virtual const char_type*\n-      do_toupper(char_type* __low, const char_type* __high) const;\n+      do_toupper(char_type* __lo, const char_type* __hi) const;\n \n       virtual char_type \n       do_tolower(char_type) const;\n \n       virtual const char_type*\n-      do_tolower(char_type* __low, const char_type* __high) const;\n+      do_tolower(char_type* __lo, const char_type* __hi) const;\n       \n       virtual char_type \n       do_widen(char) const;\n \n       virtual const char*\n-      do_widen(const char* __low, const char* __high,\n-\t       char_type* __dest) const;\n+      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;\n \n       virtual char \n       do_narrow(char_type, char __dfault) const;\n \n       virtual const char_type*\n-      do_narrow(const char_type* __low, const char_type* __high,\n+      do_narrow(const char_type* __lo, const char_type* __hi,\n \t\t char __dfault, char* __dest) const;\n     };\n  \n@@ -300,12 +347,10 @@ namespace std\n       do_is(mask __m, char_type __c) const;\n \n       virtual const char_type*\n-      do_is(const char_type* __lo, const char_type* __hi, \n-\t    mask* __vec) const;\n+      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;\n \n       virtual const char_type*\n-      do_scan_is(mask __m, const char_type* __lo, \n-\t\t const char_type* __hi) const;\n+      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;\n \n       virtual const char_type*\n       do_scan_not(mask __m, const char_type* __lo, \n@@ -315,26 +360,25 @@ namespace std\n       do_toupper(char_type) const;\n \n       virtual const char_type*\n-      do_toupper(char_type* __low, const char_type* __high) const;\n+      do_toupper(char_type* __lo, const char_type* __hi) const;\n \n       virtual char_type \n       do_tolower(char_type) const;\n \n       virtual const char_type*\n-      do_tolower(char_type* __low, const char_type* __high) const;\n+      do_tolower(char_type* __lo, const char_type* __hi) const;\n       \n       virtual char_type \n       do_widen(char) const;\n \n       virtual const char*\n-      do_widen(const char* __low, const char* __high,\n-\t       char_type* __dest) const;\n+      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;\n \n       virtual char \n       do_narrow(char_type, char __dfault) const;\n \n       virtual const char_type*\n-      do_narrow(const char_type* __low, const char_type* __high,\n+      do_narrow(const char_type* __lo, const char_type* __hi,\n \t\t char __dfault, char* __dest) const;\n \n     };"}, {"sha": "b72d7ffe0b6d85ee1e813099c4fb6c084bafeba0", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 35, "deletions": 36, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf1b60d2b57031da4af9856d0d635bede588bcd/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf1b60d2b57031da4af9856d0d635bede588bcd/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=fdf1b60d2b57031da4af9856d0d635bede588bcd", "patch": "@@ -583,23 +583,22 @@ namespace std\n   { return __c; }\n   \n   const char* \n-  ctype<char>::do_widen(const char* __low, const char* __high, \n-\t\t\tchar* __dest) const\n+  ctype<char>::do_widen(const char* __lo, const char* __hi, char* __dest) const\n   {\n-    memcpy(__dest, __low, __high - __low);\n-    return __high;\n+    memcpy(__dest, __lo, __hi - __lo);\n+    return __hi;\n   }\n   \n   char\n   ctype<char>::do_narrow(char __c, char /*__dfault*/) const\n   { return __c; }\n   \n   const char* \n-  ctype<char>::do_narrow(const char* __low, const char* __high, \n+  ctype<char>::do_narrow(const char* __lo, const char* __hi, \n \t\t\t char /*__dfault*/, char* __dest) const\n   {\n-    memcpy(__dest, __low, __high - __low);\n-    return __high;\n+    memcpy(__dest, __lo, __hi - __lo);\n+    return __hi;\n   }\n \n   ctype_byname<char>::ctype_byname(const char* /*__s*/, size_t __refs)\n@@ -1110,29 +1109,29 @@ namespace std\n   { return towupper(__c); }\n \n   const wchar_t*\n-  ctype<wchar_t>::do_toupper(wchar_t* __low, const wchar_t* __high) const\n+  ctype<wchar_t>::do_toupper(wchar_t* __lo, const wchar_t* __hi) const\n   {\n-    while (__low < __high)\n+    while (__lo < __hi)\n       {\n-        *__low = towupper(*__low);\n-        ++__low;\n+        *__lo = towupper(*__lo);\n+        ++__lo;\n       }\n-    return __high;\n+    return __hi;\n   }\n   \n   wchar_t\n   ctype<wchar_t>::do_tolower(wchar_t __c) const\n   { return towlower(__c); }\n   \n   const wchar_t*\n-  ctype<wchar_t>::do_tolower(wchar_t* __low, const wchar_t* __high) const\n+  ctype<wchar_t>::do_tolower(wchar_t* __lo, const wchar_t* __hi) const\n   {\n-    while (__low < __high)\n+    while (__lo < __hi)\n       {\n-        *__low = towlower(*__low);\n-        ++__low;\n+        *__lo = towlower(*__lo);\n+        ++__lo;\n       }\n-    return __high;\n+    return __hi;\n   }\n \n   bool\n@@ -1142,29 +1141,29 @@ namespace std\n   \n   const wchar_t* \n   ctype<wchar_t>::\n-  do_is(const wchar_t* __low, const wchar_t* __high, mask* __m) const\n+  do_is(const wchar_t* __lo, const wchar_t* __hi, mask* __m) const\n   {\n-    while (__low < __high && !this->is(*__m, *__low))\n-      ++__low;\n-    return __low;\n+    while (__lo < __hi && !this->is(*__m, *__lo))\n+      ++__lo;\n+    return __lo;\n   }\n   \n   const wchar_t* \n   ctype<wchar_t>::\n-  do_scan_is(mask __m, const wchar_t* __low, const wchar_t* __high) const\n+  do_scan_is(mask __m, const wchar_t* __lo, const wchar_t* __hi) const\n   {\n-    while (__low < __high && !this->is(__m, *__low))\n-      ++__low;\n-    return __low;\n+    while (__lo < __hi && !this->is(__m, *__lo))\n+      ++__lo;\n+    return __lo;\n   }\n \n   const wchar_t*\n   ctype<wchar_t>::\n-  do_scan_not(mask __m, const char_type* __low, const char_type* __high) const\n+  do_scan_not(mask __m, const char_type* __lo, const char_type* __hi) const\n   {\n-    while (__low < __high && this->is(__m, *__low) != 0)\n-      ++__low;\n-    return __low;\n+    while (__lo < __hi && this->is(__m, *__lo) != 0)\n+      ++__lo;\n+    return __lo;\n   }\n \n   wchar_t\n@@ -1174,12 +1173,12 @@ namespace std\n   \n   const char* \n   ctype<wchar_t>::\n-  do_widen(const char* __low, const char* __high, wchar_t* __dest) const\n+  do_widen(const char* __lo, const char* __hi, wchar_t* __dest) const\n   {\n     mbstate_t __state;\n     memset(static_cast<void*>(&__state), 0, sizeof(mbstate_t));\n-    mbsrtowcs(__dest, &__low, __high - __low, &__state);\n-    return __high;\n+    mbsrtowcs(__dest, &__lo, __hi - __lo, &__state);\n+    return __hi;\n   }\n \n   char\n@@ -1192,16 +1191,16 @@ namespace std\n \n   const wchar_t*\n   ctype<wchar_t>::\n-  do_narrow(const wchar_t* __low, const wchar_t* __high, char __dfault, \n+  do_narrow(const wchar_t* __lo, const wchar_t* __hi, char __dfault, \n \t    char* __dest) const\n   {\n     mbstate_t __state;\n     memset(static_cast<void*>(&__state), 0, sizeof(mbstate_t));\n-    size_t __len = __high - __low;\n-    size_t __conv = wcsrtombs(__dest, &__low, __len, &__state);\n+    size_t __len = __hi - __lo;\n+    size_t __conv = wcsrtombs(__dest, &__lo, __len, &__state);\n     if (__conv == __len)\n       *__dest = __dfault;\n-    return __high;\n+    return __hi;\n   }\n \n   ctype_byname<wchar_t>::"}, {"sha": "54a6a4e2e03e40d72cc57461abda30f05ebaf14a", "filename": "libstdc++-v3/testsuite/22_locale/ctype.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf1b60d2b57031da4af9856d0d635bede588bcd/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf1b60d2b57031da4af9856d0d635bede588bcd/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype.cc?ref=fdf1b60d2b57031da4af9856d0d635bede588bcd", "patch": "@@ -153,8 +153,21 @@ test01()\n   m01 ^= m02;\n }\n \n+class gnu_obj \n+{ };\n+\n+class gnu_ctype2: public std::ctype<gnu_obj> \n+{ };\n+\n+// libstdc++/3017\n+void test02()\n+{\n+  gnu_ctype2 obj;\n+}\n+\n int main() \n { \n   test01();\n+  test02();\n   return 0;\n }"}]}