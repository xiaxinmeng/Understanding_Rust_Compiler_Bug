{"sha": "e50126e8585814786271a772cb5a1704e3881f6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUwMTI2ZTg1ODU4MTQ3ODYyNzFhNzcyY2I1YTE3MDRlMzg4MWY2Yg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2002-06-08T01:51:22Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2002-06-08T01:51:22Z"}, "message": "emit-rtl.c (init_emit): Add hard registers to regno_reg_rtx.\n\n\n\t* emit-rtl.c (init_emit): Add hard registers to regno_reg_rtx.\n\t* combine.c (move_deaths): Use regno_reg_rtx for hard regs rather\n\tthan creating a new register.\n\t(distribute_notes): Likewise.\n\t* df.c (df_reg_use_gen): Likewise.\n\t(df_reg_clobber_gen): Likewise.\n\t(df_ref_record): Likewise.\n\t* expr.c (use_regs): Likewise.\n\t* flow.c (propagate_one_insn): Likewise.\n\t(mark_set_1): Likewise.\n\t(mark_used_reg): Likewise.\n\t* reload.c (emit_reload_insns): Likewise.\n\nFrom-SVN: r54358", "tree": {"sha": "d5140874e00788f4ea16817667322896a2a7a2b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5140874e00788f4ea16817667322896a2a7a2b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e50126e8585814786271a772cb5a1704e3881f6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e50126e8585814786271a772cb5a1704e3881f6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e50126e8585814786271a772cb5a1704e3881f6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e50126e8585814786271a772cb5a1704e3881f6b/comments", "author": null, "committer": null, "parents": [{"sha": "bc9c18c3193347c70989e21c036cc5c298021569", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc9c18c3193347c70989e21c036cc5c298021569", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc9c18c3193347c70989e21c036cc5c298021569"}], "stats": {"total": 47, "additions": 32, "deletions": 15}, "files": [{"sha": "bb8e9dfc545a1b7a20329841dec886df85a0b66b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e50126e8585814786271a772cb5a1704e3881f6b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e50126e8585814786271a772cb5a1704e3881f6b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e50126e8585814786271a772cb5a1704e3881f6b", "patch": "@@ -1,3 +1,18 @@\n+2002-06-07  Jeff Law <law@redhat.com\n+\n+\t* emit-rtl.c (init_emit): Add hard registers to regno_reg_rtx.\n+\t* combine.c (move_deaths): Use regno_reg_rtx for hard regs rather       \n+\tthan creating a new register.\n+\t(distribute_notes): Likewise.\n+\t* df.c (df_reg_use_gen): Likewise.\n+\t(df_reg_clobber_gen): Likewise.\n+\t(df_ref_record): Likewise.\n+\t* expr.c (use_regs): Likewise.\n+\t* flow.c (propagate_one_insn): Likewise.\n+\t(mark_set_1): Likewise.\n+\t(mark_used_reg): Likewise.\n+\t* reload.c (emit_reload_insns): Likewise.\n+\n 2002-06-07  Roger Sayle  <roger@eyesopen.com>\n \n \t* simplify-rtx.c (simplify_gen_relational): Simplify RTL of the form"}, {"sha": "11de1c7850033115004ef1fac7a8831ef7e70427", "filename": "gcc/combine.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e50126e8585814786271a772cb5a1704e3881f6b/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e50126e8585814786271a772cb5a1704e3881f6b/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=e50126e8585814786271a772cb5a1704e3881f6b", "patch": "@@ -11944,7 +11944,7 @@ move_deaths (x, maybe_kill_insn, from_cuid, to_insn, pnotes)\n \t\tif (i < regno || i >= ourend)\n \t\t  REG_NOTES (where_dead)\n \t\t    = gen_rtx_EXPR_LIST (REG_DEAD,\n-\t\t\t\t\t gen_rtx_REG (reg_raw_mode[i], i),\n+\t\t\t\t\t regno_reg_rtx[i],\n \t\t\t\t\t REG_NOTES (where_dead));\n \t    }\n \n@@ -11971,7 +11971,7 @@ move_deaths (x, maybe_kill_insn, from_cuid, to_insn, pnotes)\n \t\toffset = 1;\n \n \t      for (i = regno + offset; i < ourend; i++)\n-\t\tmove_deaths (gen_rtx_REG (reg_raw_mode[i], i),\n+\t\tmove_deaths (regno_reg_rtx[i],\n \t\t\t     maybe_kill_insn, from_cuid, to_insn, &oldnotes);\n \t    }\n \n@@ -12593,7 +12593,7 @@ distribute_notes (notes, from_insn, i3, i2, elim_i2, elim_i1)\n \t\t      for (i = regno; i < endregno;\n \t\t\t   i += HARD_REGNO_NREGS (i, reg_raw_mode[i]))\n \t\t\t{\n-\t\t\t  rtx piece = gen_rtx_REG (reg_raw_mode[i], i);\n+\t\t\t  rtx piece = regno_reg_rtx[i];\n \t\t\t  basic_block bb = this_basic_block;\n \n \t\t\t  if (! dead_or_set_p (place, piece)"}, {"sha": "d7131683c48a5027c21a061e09b1c493e59ba6f1", "filename": "gcc/df.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e50126e8585814786271a772cb5a1704e3881f6b/gcc%2Fdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e50126e8585814786271a772cb5a1704e3881f6b/gcc%2Fdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.c?ref=e50126e8585814786271a772cb5a1704e3881f6b", "patch": "@@ -625,8 +625,7 @@ static rtx df_reg_use_gen (regno)\n   rtx reg;\n   rtx use;\n \n-  reg = regno >= FIRST_PSEUDO_REGISTER\n-    ? regno_reg_rtx[regno] : gen_rtx_REG (reg_raw_mode[regno], regno);\n+  reg = regno_reg_rtx[regno];\n \n   use = gen_rtx_USE (GET_MODE (reg), reg);\n   return use;\n@@ -640,8 +639,7 @@ static rtx df_reg_clobber_gen (regno)\n   rtx reg;\n   rtx use;\n \n-  reg = regno >= FIRST_PSEUDO_REGISTER\n-    ? regno_reg_rtx[regno] : gen_rtx_REG (reg_raw_mode[regno], regno);\n+  reg = regno_reg_rtx[regno];\n \n   use = gen_rtx_CLOBBER (GET_MODE (reg), reg);\n   return use;\n@@ -897,7 +895,7 @@ df_ref_record (df, reg, loc, insn, ref_type, ref_flags)\n       endregno = regno + HARD_REGNO_NREGS (regno, GET_MODE (reg));\n \n       for (i = regno; i < endregno; i++)\n-\tdf_ref_record_1 (df, gen_rtx_REG (reg_raw_mode[i], i),\n+\tdf_ref_record_1 (df, regno_reg_rtx[i],\n \t\t\t loc, insn, ref_type, ref_flags);\n     }\n   else"}, {"sha": "7df9f23bdbaf2e57ff5e2c7105d51f53f36438f6", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e50126e8585814786271a772cb5a1704e3881f6b/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e50126e8585814786271a772cb5a1704e3881f6b/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=e50126e8585814786271a772cb5a1704e3881f6b", "patch": "@@ -4913,6 +4913,7 @@ void\n init_emit ()\n {\n   struct function *f = cfun;\n+  int i;\n \n   f->emit = (struct emit_status *) ggc_alloc (sizeof (struct emit_status));\n   first_insn = NULL;\n@@ -4942,9 +4943,14 @@ init_emit ()\n     = (tree *) ggc_alloc_cleared (f->emit->regno_pointer_align_length\n \t\t\t\t  * sizeof (tree));\n \n+  /* Put copies of all the hard registers into regno_reg_rtx.  */\n+  for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+    regno_reg_rtx[i] = gen_raw_REG (reg_raw_mode[i], i);\n+\n   /* Put copies of all the virtual register rtx into regno_reg_rtx.  */\n   init_virtual_regs (f->emit);\n \n+\n   /* Indicate that the virtual registers and stack locations are\n      all pointers.  */\n   REG_POINTER (stack_pointer_rtx) = 1;"}, {"sha": "b719956ce8759706fc1cb432cf240c2c5cbdcca5", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e50126e8585814786271a772cb5a1704e3881f6b/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e50126e8585814786271a772cb5a1704e3881f6b/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=e50126e8585814786271a772cb5a1704e3881f6b", "patch": "@@ -2293,7 +2293,7 @@ use_regs (call_fusage, regno, nregs)\n     abort ();\n \n   for (i = 0; i < nregs; i++)\n-    use_reg (call_fusage, gen_rtx_REG (reg_raw_mode[regno + i], regno + i));\n+    use_reg (call_fusage, regno_reg_rtx[regno + i]);\n }\n \n /* Add USE expressions to *CALL_FUSAGE for each REG contained in the"}, {"sha": "60170b16e94b0ae2706e1d5aade6a878ef010832", "filename": "gcc/flow.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e50126e8585814786271a772cb5a1704e3881f6b/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e50126e8585814786271a772cb5a1704e3881f6b/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=e50126e8585814786271a772cb5a1704e3881f6b", "patch": "@@ -1767,8 +1767,7 @@ propagate_one_insn (pbi, insn)\n \t    if (TEST_HARD_REG_BIT (regs_invalidated_by_call, i))\n \t      {\n \t\t/* We do not want REG_UNUSED notes for these registers.  */\n-\t\tmark_set_1 (pbi, CLOBBER, gen_rtx_REG (reg_raw_mode[i], i),\n-\t\t\t    cond, insn,\n+\t\tmark_set_1 (pbi, CLOBBER, regno_reg_rtx[i], cond, insn,\n \t\t\t    pbi->flags & ~(PROP_DEATH_NOTES | PROP_REG_INFO));\n \t      }\n \t}\n@@ -1816,8 +1815,7 @@ propagate_one_insn (pbi, insn)\n \t     so they are made live.  */\n \t  for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n \t    if (global_regs[i])\n-\t      mark_used_reg (pbi, gen_rtx_REG (reg_raw_mode[i], i),\n-\t\t\t     cond, insn);\n+\t      mark_used_reg (pbi, regno_reg_rtx[i], cond, insn);\n \t}\n     }\n \n@@ -2817,7 +2815,7 @@ mark_set_1 (pbi, code, reg, cond, insn, flags)\n \t\t    if (! REGNO_REG_SET_P (pbi->reg_live, i))\n \t\t      REG_NOTES (insn)\n \t\t\t= alloc_EXPR_LIST (REG_UNUSED,\n-\t\t\t\t\t   gen_rtx_REG (reg_raw_mode[i], i),\n+\t\t\t\t\t   regno_reg_rtx[i],\n \t\t\t\t\t   REG_NOTES (insn));\n \t\t}\n \t    }\n@@ -3625,7 +3623,7 @@ mark_used_reg (pbi, reg, cond, insn)\n \t\t&& ! dead_or_set_regno_p (insn, i))\n \t      REG_NOTES (insn)\n \t\t= alloc_EXPR_LIST (REG_DEAD,\n-\t\t\t\t   gen_rtx_REG (reg_raw_mode[i], i),\n+\t\t\t\t   regno_reg_rtx[i],\n \t\t\t\t   REG_NOTES (insn));\n \t}\n     }"}]}