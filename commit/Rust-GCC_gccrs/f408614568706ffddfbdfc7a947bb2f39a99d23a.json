{"sha": "f408614568706ffddfbdfc7a947bb2f39a99d23a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQwODYxNDU2ODcwNmZmZGRmYmRmYzdhOTQ3YmIyZjM5YTk5ZDIzYQ==", "commit": {"author": {"name": "Bernardo Innocenti", "email": "bernie@develer.com", "date": "2004-07-26T00:29:41Z"}, "committer": {"name": "Bernardo Innocenti", "email": "bernie@gcc.gnu.org", "date": "2004-07-26T00:29:41Z"}, "message": "Makefile.in (C_PRAGMA_H): New variable to track dependencies of c-pragma.h.\n\n\t* Makefile.in (C_PRAGMA_H): New variable to track dependencies\n\tof c-pragma.h.\n\t* c-pragma.h (c_lex, c_lex_with_flags): Change returntype to\n\tenum cpp_ttype.\n\t* c-lex.c: Likewise.\n\nFrom-SVN: r85174", "tree": {"sha": "39e65b533b3cd7a2843f3414e21c6d0d7ea6320e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39e65b533b3cd7a2843f3414e21c6d0d7ea6320e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f408614568706ffddfbdfc7a947bb2f39a99d23a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f408614568706ffddfbdfc7a947bb2f39a99d23a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f408614568706ffddfbdfc7a947bb2f39a99d23a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f408614568706ffddfbdfc7a947bb2f39a99d23a/comments", "author": {"login": "codewiz", "id": 1184492, "node_id": "MDQ6VXNlcjExODQ0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1184492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codewiz", "html_url": "https://github.com/codewiz", "followers_url": "https://api.github.com/users/codewiz/followers", "following_url": "https://api.github.com/users/codewiz/following{/other_user}", "gists_url": "https://api.github.com/users/codewiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/codewiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codewiz/subscriptions", "organizations_url": "https://api.github.com/users/codewiz/orgs", "repos_url": "https://api.github.com/users/codewiz/repos", "events_url": "https://api.github.com/users/codewiz/events{/privacy}", "received_events_url": "https://api.github.com/users/codewiz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d07a70e45d1c26f1b9b569d9faba6e793663cc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d07a70e45d1c26f1b9b569d9faba6e793663cc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d07a70e45d1c26f1b9b569d9faba6e793663cc5"}], "stats": {"total": 43, "additions": 27, "deletions": 16}, "files": [{"sha": "244915a8317980ec96ce9c01acc70b9e420ba739", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f408614568706ffddfbdfc7a947bb2f39a99d23a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f408614568706ffddfbdfc7a947bb2f39a99d23a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f408614568706ffddfbdfc7a947bb2f39a99d23a", "patch": "@@ -1,3 +1,11 @@\n+2004-07-26  Bernardo Innocenti  <bernie@develer.com>\n+\n+\t* Makefile.in (C_PRAGMA_H): New variable to track dependencies\n+\tof c-pragma.h.\n+\t* c-pragma.h (c_lex, c_lex_with_flags): Change returntype to\n+\tenum cpp_ttype.\n+\t* c-lex.c: Likewise.\n+\n 2004-07-25  Roger Sayle  <roger@eyesopen.com>\n \n \t* fold-const.c (constant_boolean_node): Make extern."}, {"sha": "e16b1c90d74564bd9922ccca107f8a9014a1f299", "filename": "gcc/Makefile.in", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f408614568706ffddfbdfc7a947bb2f39a99d23a/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f408614568706ffddfbdfc7a947bb2f39a99d23a/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=f408614568706ffddfbdfc7a947bb2f39a99d23a", "patch": "@@ -712,6 +712,7 @@ GGC_H = ggc.h gtype-desc.h\n TIMEVAR_H = timevar.h timevar.def\n INSN_ATTR_H = insn-attr.h $(srcdir)/insn-addr.h $(srcdir)/varray.h\n C_COMMON_H = c-common.h $(SPLAY_TREE_H) $(CPPLIB_H)\n+C_PRAGMA_H = c-pragma.h $(CPPLIB_H)\n C_TREE_H = c-tree.h $(C_COMMON_H)\n SYSTEM_H = system.h hwint.h $(srcdir)/../include/libiberty.h\n PREDICT_H = predict.h predict.def\n@@ -1362,7 +1363,7 @@ c-incpath.o: c-incpath.c c-incpath.h $(CONFIG_H) $(SYSTEM_H) $(CPPLIB_H) \\\n c-decl.o : c-decl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(RTL_H) $(C_TREE_H) $(GGC_H) $(TARGET_H) $(FLAGS_H) function.h output.h \\\n     $(EXPR_H) debug.h toplev.h intl.h $(TM_P_H) tree-inline.h $(TIMEVAR_H) \\\n-    opts.h c-pragma.h gt-c-decl.h cgraph.h $(HASHTAB_H) libfuncs.h except.h \\\n+    opts.h $(C_PRAGMA_H) gt-c-decl.h cgraph.h $(HASHTAB_H) libfuncs.h except.h \\\n     $(LANGHOOKS_DEF_H) $(TREE_DUMP_H)\n c-typeck.o : c-typeck.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_TREE_H) \\\n     $(TARGET_H) $(FLAGS_H) intl.h output.h $(EXPR_H) $(RTL_H) toplev.h $(TM_P_H) \\\n@@ -1374,10 +1375,10 @@ stub-objc.o : stub-objc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n     $(GGC_H) $(C_COMMON_H)\n c-lex.o : c-lex.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(RTL_H) debug.h $(C_TREE_H) $(C_COMMON_H) real.h c-incpath.h cppdefault.h \\\n-    c-pragma.h input.h intl.h $(FLAGS_H) toplev.h output.h \\\n+    $(C_PRAGMA_H) input.h intl.h $(FLAGS_H) toplev.h output.h \\\n     $(CPPLIB_H) $(EXPR_H) $(TM_P_H)\n c-ppoutput.o : c-ppoutput.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-    $(C_COMMON_H) $(TREE_H) $(CPPLIB_H) $(srcdir)/../libcpp/internal.h $(TM_P_H) c-pragma.h\n+    $(C_COMMON_H) $(TREE_H) $(CPPLIB_H) $(srcdir)/../libcpp/internal.h $(TM_P_H) $(C_PRAGMA_H)\n c-objc-common.o : c-objc-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(C_TREE_H) $(RTL_H) insn-config.h $(INTEGRATE_H) $(EXPR_H) $(C_TREE_H) \\\n     $(FLAGS_H) toplev.h tree-inline.h $(DIAGNOSTIC_H) $(VARRAY_H) \\\n@@ -1387,7 +1388,7 @@ c-aux-info.o : c-aux-info.c  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_\n c-convert.o : c-convert.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(FLAGS_H) toplev.h $(C_COMMON_H) real.h\n c-pragma.o: c-pragma.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-    $(TREE_H) function.h c-pragma.h toplev.h output.h $(GGC_H) $(TM_P_H) \\\n+    $(TREE_H) function.h $(C_PRAGMA_H) toplev.h output.h $(GGC_H) $(TM_P_H) \\\n     $(C_COMMON_H) $(TARGET_H) gt-c-pragma.h\n graph.o: graph.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) toplev.h $(FLAGS_H) output.h \\\n     $(RTL_H) function.h hard-reg-set.h $(BASIC_BLOCK_H) graph.h\n@@ -1414,7 +1415,7 @@ tlink.o: tlink.c $(DEMANGLE_H) $(HASHTAB_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h\n # A file used by all variants of C.\n \n c-common.o : c-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-\t$(OBSTACK_H) $(C_COMMON_H) $(FLAGS_H) toplev.h output.h c-pragma.h intl.h \\\n+\t$(OBSTACK_H) $(C_COMMON_H) $(FLAGS_H) toplev.h output.h $(C_PRAGMA_H) intl.h \\\n \t$(GGC_H) $(EXPR_H) $(TM_P_H) builtin-types.def builtin-attrs.def \\\n \t$(DIAGNOSTIC_H) gt-c-common.h langhooks.h varray.h $(RTL_H) \\\n \t$(TARGET_H) $(C_TREE_H) tree-iterator.h langhooks.h tree-mudflap.h\n@@ -1423,34 +1424,34 @@ c-pretty-print.o : c-pretty-print.c $(C_PRETTY_PRINT_H) \\\n \t$(DIAGNOSTIC_H)\n \n c-opts.o : c-opts.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\t\t\\\n-        $(TREE_H) c-pragma.h $(FLAGS_H) toplev.h langhooks.h\t\t\\\n+        $(TREE_H) $(C_PRAGMA_H) $(FLAGS_H) toplev.h langhooks.h\t\t\\\n         tree-inline.h $(DIAGNOSTIC_H) intl.h debug.h $(C_COMMON_H)\t\\\n         opts.h options.h $(PARAMS_H) $(MKDEPS_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$< $(OUTPUT_OPTION) @TARGET_SYSTEM_ROOT_DEFINE@\n \n c-cppbuiltin.o : c-cppbuiltin.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-\t$(TREE_H) version.h $(C_COMMON_H) c-pragma.h $(FLAGS_H) toplev.h \\\n+\t$(TREE_H) version.h $(C_COMMON_H) $(C_PRAGMA_H) $(FLAGS_H) toplev.h \\\n \tlanghooks.h output.h except.h real.h $(TARGET_H) $(TM_P_H)\n \n # A file used by all variants of C and some other languages.\n \n attribs.o : attribs.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(FLAGS_H) \\\n-\ttoplev.h output.h c-pragma.h $(RTL_H) $(GGC_H) $(EXPR_H) $(TM_P_H) \\\n+\ttoplev.h output.h $(C_PRAGMA_H) $(RTL_H) $(GGC_H) $(EXPR_H) $(TM_P_H) \\\n \tbuiltin-types.def $(TARGET_H) langhooks.h\n \n c-format.o : c-format.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) langhooks.h \\\n \t$(C_COMMON_H) $(FLAGS_H) toplev.h intl.h $(DIAGNOSTIC_H) c-format.h\n \n c-semantics.o : c-semantics.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-\t$(C_TREE_H) $(FLAGS_H) toplev.h output.h c-pragma.h $(RTL_H) $(GGC_H) \\\n+\t$(C_TREE_H) $(FLAGS_H) toplev.h output.h $(C_PRAGMA_H) $(RTL_H) $(GGC_H) \\\n \t$(EXPR_H) $(PREDICT_H) tree-inline.h\n \n c-dump.o : c-dump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n \t$(C_TREE_H) $(TREE_DUMP_H)\n \n c-pch.o : c-pch.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(CPPLIB_H) $(TREE_H) \\\n-\t$(C_COMMON_H) output.h toplev.h c-pragma.h $(GGC_H) debug.h \\\n+\t$(C_COMMON_H) output.h toplev.h $(C_PRAGMA_H) $(GGC_H) debug.h \\\n \tlanghooks.h $(FLAGS_H) hosthooks.h version.h $(TARGET_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t  -DHOST_MACHINE=\\\"$(host)\\\" -DTARGET_MACHINE=\\\"$(target)\\\" \\\n@@ -1574,7 +1575,7 @@ tree.o : tree.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(FLAGS_H)\n    toplev.h $(GGC_H) $(HASHTAB_H) $(TARGET_H) output.h $(TM_P_H) langhooks.h \\\n    real.h gt-tree.h tree-iterator.h $(BASIC_BLOCK_H) $(TREE_FLOW_H)\n tree-dump.o: tree-dump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-   $(C_TREE_H) $(FLAGS_H) langhooks.h toplev.h output.h c-pragma.h $(RTL_H) \\\n+   $(C_TREE_H) $(FLAGS_H) langhooks.h toplev.h output.h $(C_PRAGMA_H) $(RTL_H) \\\n    $(GGC_H) $(EXPR_H) $(SPLAY_TREE_H) $(TREE_DUMP_H) tree-iterator.h\n tree-inline.o : tree-inline.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(RTL_H) $(EXPR_H) $(FLAGS_H) $(PARAMS_H) input.h insn-config.h \\\n@@ -1800,7 +1801,7 @@ errors.o : errors.c $(CONFIG_H) $(SYSTEM_H) errors.h\n \n varasm.o : varasm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) \\\n    $(FLAGS_H) function.h $(EXPR_H) hard-reg-set.h $(REGS_H) \\\n-   output.h c-pragma.h toplev.h xcoffout.h debug.h $(GGC_H) $(TM_P_H) \\\n+   output.h $(C_PRAGMA_H) toplev.h xcoffout.h debug.h $(GGC_H) $(TM_P_H) \\\n    $(HASHTAB_H) $(TARGET_H) langhooks.h gt-varasm.h real.h\n function.o : function.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(CFGLAYOUT_H) \\"}, {"sha": "a730652d1fa139449e0329c4f4fc9384eda84c32", "filename": "gcc/c-lex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f408614568706ffddfbdfc7a947bb2f39a99d23a/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f408614568706ffddfbdfc7a947bb2f39a99d23a/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=f408614568706ffddfbdfc7a947bb2f39a99d23a", "patch": "@@ -336,7 +336,7 @@ get_nonpadding_token (void)\n   return tok;\n }\n \n-int\n+enum cpp_ttype\n c_lex_with_flags (tree *value, unsigned char *cpp_flags)\n {\n   const cpp_token *tok;\n@@ -454,7 +454,7 @@ c_lex_with_flags (tree *value, unsigned char *cpp_flags)\n   return tok->type;\n }\n \n-int\n+enum cpp_ttype\n c_lex (tree *value)\n {\n   return c_lex_with_flags (value, NULL);"}, {"sha": "8e4aeccb09c9fe86409015cc16a9ce5f21a36d5f", "filename": "gcc/c-pragma.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f408614568706ffddfbdfc7a947bb2f39a99d23a/gcc%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f408614568706ffddfbdfc7a947bb2f39a99d23a/gcc%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.h?ref=f408614568706ffddfbdfc7a947bb2f39a99d23a", "patch": "@@ -22,6 +22,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #ifndef GCC_C_PRAGMA_H\n #define GCC_C_PRAGMA_H\n \n+#include <cpplib.h> /* For enum cpp_ttype.  */\n+\n /* Cause the `yydebug' variable to be defined.  */\n #define YYDEBUG 1\n extern int yydebug;\n@@ -59,8 +61,8 @@ extern void maybe_apply_pragma_weak (tree);\n extern tree maybe_apply_renaming_pragma (tree, tree);\n extern void add_to_renaming_pragma_list (tree, tree);\n \n-extern int c_lex (tree *);\n-extern int c_lex_with_flags (tree *, unsigned char *);\n+extern enum cpp_ttype c_lex (tree *);\n+extern enum cpp_ttype c_lex_with_flags (tree *, unsigned char *);\n \n /* If 1, then lex strings into the execution character set.  \n    If 0, lex strings into the host character set."}]}