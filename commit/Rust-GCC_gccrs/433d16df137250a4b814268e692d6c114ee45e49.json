{"sha": "433d16df137250a4b814268e692d6c114ee45e49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMzZDE2ZGYxMzcyNTBhNGI4MTQyNjhlNjkyZDZjMTE0ZWU0NWU0OQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-01-07T19:19:10Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-01-07T19:19:10Z"}, "message": "jit.exp: support C++ testcases\n\ngcc/jit/ChangeLog:\n\t* TODO.rst (Test suite): Remove item about running C++ testcases.\n\t* docs/internals/index.rst (Working on the JIT library): Add\n\t\"c++\" to the enabled languages in the suggested \"configure\"\n\tinvocation, and add a description of why this is necessary.\n\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n\ngcc/testsuite/ChangeLog:\n\t* jit.dg/jit.exp: Load wrapper.exp with %{tool} set to \"g++\"\n\trather than \"jit\".  Load g++.exp, and call g++_init.\n\tRun test-*.cc files within the testsuite and *.cc files within\n\tdocs/examples.\n\t(jit-dg-test): Drop the addition of -fgnu89-inline to\n\tDEFAULT_CFLAGS in favor of adding it to additional_flags, only\n\tdoing it when compiling C testcases (since g++ does not handle\n\tit).  Reset \"orig_environment_saved\" so that LD_LIBRARY_PATH\n\tis restored to the value after g++_init ran, rather than the\n\tvalue before g++_init ran.  Return a list of\n\t$comp_output $output_file, as dg-test assumes.\n\nFrom-SVN: r219318", "tree": {"sha": "79c842059b7d5daf9dc83d67a29a678e4d841ce2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79c842059b7d5daf9dc83d67a29a678e4d841ce2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/433d16df137250a4b814268e692d6c114ee45e49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/433d16df137250a4b814268e692d6c114ee45e49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/433d16df137250a4b814268e692d6c114ee45e49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/433d16df137250a4b814268e692d6c114ee45e49/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "23608da4dba98f09398d6a608c8f8a57c37f8280", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23608da4dba98f09398d6a608c8f8a57c37f8280", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23608da4dba98f09398d6a608c8f8a57c37f8280"}], "stats": {"total": 132, "additions": 115, "deletions": 17}, "files": [{"sha": "89ded0b98741018d3748965c8eac8838281b4851", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433d16df137250a4b814268e692d6c114ee45e49/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433d16df137250a4b814268e692d6c114ee45e49/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=433d16df137250a4b814268e692d6c114ee45e49", "patch": "@@ -1,3 +1,11 @@\n+2015-01-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* TODO.rst (Test suite): Remove item about running C++ testcases.\n+\t* docs/internals/index.rst (Working on the JIT library): Add\n+\t\"c++\" to the enabled languages in the suggested \"configure\"\n+\tinvocation, and add a description of why this is necessary.\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n+\n 2015-01-07  David Malcolm  <dmalcolm@redhat.com>\n \n \t* docs/internals/index.rst: Update to reflect that built"}, {"sha": "ca0ddbb821eddef728ac9284bc4e5efe3abfe9e4", "filename": "gcc/jit/TODO.rst", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433d16df137250a4b814268e692d6c114ee45e49/gcc%2Fjit%2FTODO.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433d16df137250a4b814268e692d6c114ee45e49/gcc%2Fjit%2FTODO.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FTODO.rst?ref=433d16df137250a4b814268e692d6c114ee45e49", "patch": "@@ -81,8 +81,6 @@ Bugs\n \n Test suite\n ==========\n-* get DejaGnu to build and run C++ testcases\n-\n * measure code coverage in testing of libgccjit.so\n \n Future milestones"}, {"sha": "f142491139ec259067f061b2c265b7c22fd2a206", "filename": "gcc/jit/docs/_build/texinfo/libgccjit.texi", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433d16df137250a4b814268e692d6c114ee45e49/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433d16df137250a4b814268e692d6c114ee45e49/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi?ref=433d16df137250a4b814268e692d6c114ee45e49", "patch": "@@ -11937,7 +11937,7 @@ PREFIX=$(pwd)/install\n cd build\n ../src/configure \\\n    --enable-host-shared \\\n-   --enable-languages=jit \\\n+   --enable-languages=jit,c++ \\\n    --disable-bootstrap \\\n    --enable-checking=release \\\n    --prefix=$PREFIX\n@@ -11968,12 +11968,23 @@ position-independent code, which incurs a slight performance hit,\n but it necessary for a shared library.\n @end deffn\n \n-@geindex command line option; --enable-languages=jit\n+@geindex command line option; --enable-languages=jit@comma{}c++\n @anchor{internals/index cmdoption--enable-languages}@anchor{177}\n-@deffn {Option} --enable-languages=jit\n+@deffn {Option} --enable-languages=jit,c++\n \n This specifies which frontends to build.  The JIT library looks like\n a frontend to the rest of the code.\n+\n+The C++ portion of the JIT test suite requires the C++ frontend to be\n+enabled at configure-time, or you may see errors like this when\n+running the test suite:\n+\n+@example\n+xgcc: error: /home/david/jit/src/gcc/testsuite/jit.dg/test-quadratic.cc: C++ compiler not installed on this system\n+c++: error trying to exec 'cc1plus': execvp: No such file or directory\n+@end example\n+\n+@noindent\n @end deffn\n \n @geindex command line option; --disable-bootstrap"}, {"sha": "694f058340c18efdf8503900012725aef3f86a07", "filename": "gcc/jit/docs/internals/index.rst", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433d16df137250a4b814268e692d6c114ee45e49/gcc%2Fjit%2Fdocs%2Finternals%2Findex.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433d16df137250a4b814268e692d6c114ee45e49/gcc%2Fjit%2Fdocs%2Finternals%2Findex.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Finternals%2Findex.rst?ref=433d16df137250a4b814268e692d6c114ee45e49", "patch": "@@ -31,7 +31,7 @@ the JIT library like this:\n   cd build\n   ../src/configure \\\n      --enable-host-shared \\\n-     --enable-languages=jit \\\n+     --enable-languages=jit,c++ \\\n      --disable-bootstrap \\\n      --enable-checking=release \\\n      --prefix=$PREFIX\n@@ -54,11 +54,20 @@ Here's what those configuration options mean:\n   position-independent code, which incurs a slight performance hit,\n   but it necessary for a shared library.\n \n-.. option:: --enable-languages=jit\n+.. option:: --enable-languages=jit,c++\n \n   This specifies which frontends to build.  The JIT library looks like\n   a frontend to the rest of the code.\n \n+  The C++ portion of the JIT test suite requires the C++ frontend to be\n+  enabled at configure-time, or you may see errors like this when\n+  running the test suite:\n+\n+  .. code-block:: console\n+\n+    xgcc: error: /home/david/jit/src/gcc/testsuite/jit.dg/test-quadratic.cc: C++ compiler not installed on this system\n+    c++: error trying to exec 'cc1plus': execvp: No such file or directory\n+\n .. option:: --disable-bootstrap\n \n   For hacking on the \"jit\" subdirectory, performing a full"}, {"sha": "e320af4bb5b83440e6c292f2e53c2c81a68d24ec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433d16df137250a4b814268e692d6c114ee45e49/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433d16df137250a4b814268e692d6c114ee45e49/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=433d16df137250a4b814268e692d6c114ee45e49", "patch": "@@ -1,3 +1,17 @@\n+2015-01-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* jit.dg/jit.exp: Load wrapper.exp with %{tool} set to \"g++\"\n+\trather than \"jit\".  Load g++.exp, and call g++_init.\n+\tRun test-*.cc files within the testsuite and *.cc files within\n+\tdocs/examples.\n+\t(jit-dg-test): Drop the addition of -fgnu89-inline to\n+\tDEFAULT_CFLAGS in favor of adding it to additional_flags, only\n+\tdoing it when compiling C testcases (since g++ does not handle\n+\tit).  Reset \"orig_environment_saved\" so that LD_LIBRARY_PATH\n+\tis restored to the value after g++_init ran, rather than the\n+\tvalue before g++_init ran.  Return a list of\n+\t$comp_output $output_file, as dg-test assumes.\n+\n 2015-01-07  David Malcolm  <dmalcolm@redhat.com>\n \n \t* jit.dg/harness.h (CHECK_NON_NULL): Add __func__ to output, to"}, {"sha": "098ce5e9e954aa0ef8a84b8afdb924141d700879", "filename": "gcc/testsuite/jit.dg/jit.exp", "status": "modified", "additions": 68, "deletions": 10, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433d16df137250a4b814268e692d6c114ee45e49/gcc%2Ftestsuite%2Fjit.dg%2Fjit.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433d16df137250a4b814268e692d6c114ee45e49/gcc%2Ftestsuite%2Fjit.dg%2Fjit.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fjit.exp?ref=433d16df137250a4b814268e692d6c114ee45e49", "patch": "@@ -14,13 +14,28 @@\n # up into the Tcl world, reporting a summary of all results\n # across all of the executables.\n \n+# Kludge alert:\n+# We need g++_init so that it can find the stdlib include path.\n+#\n+# g++_init (in lib/g++.exp) uses g++_maybe_build_wrapper,\n+# which normally comes from the definition of\n+# ${tool}_maybe_build_wrapper within lib/wrapper.exp.\n+#\n+# However, for us, ${tool} is \"jit\".\n+# Hence we load wrapper.exp with tool == \"g++\", so that\n+# g++_maybe_build_wrapper is defined.\n+set tool g++\n+load_lib wrapper.exp\n+set tool jit\n+\n load_lib dg.exp\n load_lib prune.exp\n load_lib target-supports.exp\n load_lib gcc-defs.exp\n load_lib timeout.exp\n load_lib target-libpath.exp\n load_lib gcc.exp\n+load_lib g++.exp\n load_lib dejagnu.exp\n \n # Look for lines of the form:\n@@ -264,17 +279,25 @@ if ![info exists GCC_UNDER_TEST] {\n     set GCC_UNDER_TEST \"[find_gcc]\"\n }\n \n+g++_init\n+\n # Initialize dg.\n dg-init\n \n # Gather a list of all tests.\n \n-# Tests within the testsuite: gcc/testsuite/jit.dg/test-*.c\n-set tests [lsort [find $srcdir/$subdir test-*.c]]\n+# C tests within the testsuite: gcc/testsuite/jit.dg/test-*.c\n+set tests [find $srcdir/$subdir test-*.c]\n+\n+# C++ tests within the testsuite: gcc/testsuite/jit.dg/test-*.cc\n+set tests [concat $tests [find $srcdir/$subdir test-*.cc]]\n \n # We also test the examples within the documentation, to ensure that\n # they compile:\n-set tests [lsort [concat $tests [find $srcdir/../jit/docs/examples *.c]]]\n+set tests [concat $tests [find $srcdir/../jit/docs/examples *.c]]\n+set tests [concat $tests [find $srcdir/../jit/docs/examples *.cc]]\n+\n+set tests [lsort $tests]\n \n verbose \"tests: $tests\"\n \n@@ -318,8 +341,24 @@ proc jit-dg-test { prog do_what extra_tool_flags } {\n     verbose \"output_file: $output_file\"\n \n     # Create the test executable:\n-    set comp_output [gcc_target_compile $prog $output_file $do_what \\\n-\t\t\t\"{additional_flags=$extra_tool_flags}\"]\n+    set extension [file extension $prog]\n+    if {$extension == \".cc\"} {\n+\tset compilation_function \"g++_target_compile\"\n+\tset options \"{additional_flags=$extra_tool_flags}\"\n+    } else {\n+\tset compilation_function \"gcc_target_compile\"\n+\t# Until recently, <dejagnu.h> assumed -fgnu89-inline\n+\t# Ideally we should fixincludes it (PR other/63613), but\n+\t# for now add -fgnu89-inline when compiling C JIT testcases.\n+\t# See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=63613\n+\t# and http://lists.gnu.org/archive/html/dejagnu/2014-10/msg00011.html\n+\tset options \"{additional_flags=$extra_tool_flags -fgnu89-inline}\"\n+    }\n+    verbose \"compilation_function=$compilation_function\"\n+    verbose \"options=$options\"\n+\n+    set comp_output [$compilation_function $prog $output_file \\\n+\t\t\t \"executable\" $options]\n     upvar 1 name name\n     if ![jit_check_compile \"$name\" \"initial compilation\" \\\n \t    $output_file $comp_output] then {\n@@ -332,6 +371,28 @@ proc jit-dg-test { prog do_what extra_tool_flags } {\n     # We need to set LD_LIBRARY_PATH so that the test files can find\n     # libgccjit.so\n     # Do this using set_ld_library_path_env_vars from target-libpath.exp\n+    # We will restore the old value later using\n+    # restore_ld_library_path_env_vars.\n+\n+    # Unfortunately this API only supports a single saved value, rather\n+    # than a stack, and g++_init has already called into this API,\n+    # injecting the appropriate value for LD_LIBRARY_PATH for finding\n+    # the built copy of libstdc++.\n+    # Hence the call to restore_ld_library_path_env_vars would restore\n+    # the *initial* value of LD_LIBRARY_PATH, and attempts to run\n+    # a C++ testcase after running any prior testcases would thus look\n+    # in the wrong place for libstdc++.  This led to failures at startup\n+    # of the form:\n+    #   ./tut01-hello-world.cc.exe: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.21' not found (required by ./tut01-hello-world.cc.exe)\n+    # when the built libstdc++ is more recent that the system libstdc++.\n+    #\n+    # As a workaround, reset the variable \"orig_environment_saved\" within\n+    # target-libpath.exp, so that the {set|restore}_ld_library_path_env_vars\n+    # API saves/restores the current value of LD_LIBRARY_PATH (as set up\n+    # by g++_init).\n+    global orig_environment_saved\n+    set orig_environment_saved 0\n+\n     global ld_library_path\n     global base_dir\n     set ld_library_path \"$base_dir/../../\"\n@@ -394,17 +455,14 @@ proc jit-dg-test { prog do_what extra_tool_flags } {\n     }\n \n     restore_ld_library_path_env_vars\n+\n+    return [list $comp_output $output_file]\n }\n \n # We need to link with --export-dynamic for test-calling-external-function.c\n # so that the JIT-built code can call into functions from the main program.\n set DEFAULT_CFLAGS \"-I$srcdir/../jit -lgccjit -g -Wall -Werror -Wl,--export-dynamic\"\n \n-# <dejagnu.h> assumes -fgnu89-inline\n-# See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=63613\n-# and http://lists.gnu.org/archive/html/dejagnu/2014-10/msg00011.html\n-append DEFAULT_CFLAGS \" -fgnu89-inline\"\n-\n # Main loop.  This will invoke jig-dg-test on each test-*.c file.\n dg-runtest $tests \"\" $DEFAULT_CFLAGS\n "}]}