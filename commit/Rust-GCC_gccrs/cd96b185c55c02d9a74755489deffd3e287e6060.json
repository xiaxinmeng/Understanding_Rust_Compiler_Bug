{"sha": "cd96b185c55c02d9a74755489deffd3e287e6060", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q5NmIxODVjNTVjMDJkOWE3NDc1NTQ4OWRlZmZkM2UyODdlNjA2MA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-05-07T12:48:58Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-05-07T12:48:58Z"}, "message": "std_fstream.h (_M_is_indeterminate): Remove.\n\n2003-05-07  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/std/std_fstream.h (_M_is_indeterminate): Remove.\n\t* src/fstream.cc\n\t(basic_filebuf<char/wchar_t>::_M_underflow): Simplify: either\n\tthere is no buffer or __testget == !__testinit.\n\n\t* src/fstream.cc\n\t(basic_filebuf<char/wchar_t>::_M_underflow): _M_set_determinate()\n\tautomatically sets, if appropriate, _M_out_cur == _M_in_cur.\n\n\t* include/std/std_fstream.h (_M_destroy_pback): Don't set\n\tunnecessarily _M_pback_cur_save and _M_pback_end_save.\n\n\t* include/std/std_fstream.h (_M_set_determinate): Minor tweak.\n\n\t* include/std/std_sstream.h (_M_sync): Minor tweak.\n\n\t* include/bits/fstream.tcc (close): No need to call\n\t_M_destroy_pback, setting _M_pback_init to false suffices\n\tto clean up.\n\nFrom-SVN: r66557", "tree": {"sha": "d5347de6279f2d770da10bdb7d098bea9e9da6de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5347de6279f2d770da10bdb7d098bea9e9da6de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd96b185c55c02d9a74755489deffd3e287e6060", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd96b185c55c02d9a74755489deffd3e287e6060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd96b185c55c02d9a74755489deffd3e287e6060", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd96b185c55c02d9a74755489deffd3e287e6060/comments", "author": null, "committer": null, "parents": [{"sha": "da635858a526e75936c13622baa93d2e23344daa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da635858a526e75936c13622baa93d2e23344daa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da635858a526e75936c13622baa93d2e23344daa"}], "stats": {"total": 66, "additions": 28, "deletions": 38}, "files": [{"sha": "6ee16c2cb9b006fc3a80d1c9b32be717b6d5d900", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd96b185c55c02d9a74755489deffd3e287e6060/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd96b185c55c02d9a74755489deffd3e287e6060/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cd96b185c55c02d9a74755489deffd3e287e6060", "patch": "@@ -1,3 +1,25 @@\n+2003-05-07  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/std/std_fstream.h (_M_is_indeterminate): Remove.\n+\t* src/fstream.cc\n+\t(basic_filebuf<char/wchar_t>::_M_underflow): Simplify: either\n+\tthere is no buffer or __testget == !__testinit.\n+\n+\t* src/fstream.cc\n+\t(basic_filebuf<char/wchar_t>::_M_underflow): _M_set_determinate()\n+\tautomatically sets, if appropriate, _M_out_cur == _M_in_cur.\n+\n+\t* include/std/std_fstream.h (_M_destroy_pback): Don't set\n+\tunnecessarily _M_pback_cur_save and _M_pback_end_save.\n+\n+\t* include/std/std_fstream.h (_M_set_determinate): Minor tweak.\n+\n+\t* include/std/std_sstream.h (_M_sync): Minor tweak.\n+\n+\t* include/bits/fstream.tcc (close): No need to call\n+\t_M_destroy_pback, setting _M_pback_init to false suffices\n+\tto clean up.\n+\n 2003-05-06  Benjamin Kosnik  <bkoz@redhat.com>\n \t\n \t* include/bits/stl_algo.h: Enums as _S_."}, {"sha": "c15d6ded4d244461c4cb39685935dee0f7419cf1", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd96b185c55c02d9a74755489deffd3e287e6060/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd96b185c55c02d9a74755489deffd3e287e6060/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=cd96b185c55c02d9a74755489deffd3e287e6060", "patch": "@@ -143,8 +143,8 @@ namespace std\n \t      \n \t  // NB: Do this here so that re-opened filebufs will be cool...\n \t  this->_M_mode = ios_base::openmode(0);\n+\t  this->_M_pback_init = false;\n \t  _M_destroy_internal_buffer();\n-\t  _M_destroy_pback();\n \t  \n \t  if (!_M_file.close())\n \t    __testfail = true;"}, {"sha": "b8704f4e0d4c16b6dca8acbe94c4ccbd92ca3781", "filename": "libstdc++-v3/include/std/std_fstream.h", "status": "modified", "additions": 2, "deletions": 28, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd96b185c55c02d9a74755489deffd3e287e6060/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd96b185c55c02d9a74755489deffd3e287e6060/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h?ref=cd96b185c55c02d9a74755489deffd3e287e6060", "patch": "@@ -201,8 +201,6 @@ namespace std\n \n \t    this->setg(this->_M_buf, _M_pback_cur_save + __off_cur, \n \t\t       _M_pback_end_save + __off_end);\n-\t    _M_pback_cur_save = NULL;\n-\t    _M_pback_end_save = NULL;\n \t    _M_pback_init = false;\n \t  }\n       }\n@@ -452,7 +450,7 @@ namespace std\n       void\n       _M_output_unshift();\n \n-      // These three functions are used to clarify internal buffer\n+      // These two functions are used to clarify internal buffer\n       // maintenance. After an overflow, or after a seekoff call that\n       // started at beg or end, or possibly when the stream becomes\n       // unbuffered, and a myrid other obscure corner cases, the\n@@ -483,34 +481,10 @@ namespace std\n \tif (__testout)\n \t  {\n \t    this->setp(this->_M_buf, this->_M_buf + this->_M_buf_size);\n-\t    this->_M_out_lim = this->_M_buf + __off;\n+\t    this->_M_out_lim += __off;\n \t  }\n \t_M_filepos = this->_M_buf + __off;\n       }\n-\n-      /**\n-       *  @if maint\n-       *  @doctodo\n-       *  @endif\n-      */\n-      bool\n-      _M_is_indeterminate(void)\n-      { \n-\tconst bool __testin = this->_M_mode & ios_base::in;\n-\tconst bool __testout = this->_M_mode & ios_base::out;\n-\tbool __ret = false;\n-\t// Don't return true if unbuffered.\n-\tif (this->_M_buf)\n-\t  {\n-\t    if (__testin)\n-\t      __ret = this->_M_in_beg == this->_M_in_cur\n-\t\t&& this->_M_in_cur == this->_M_in_end;\n-\t    if (__testout)\n-\t      __ret = this->_M_out_beg == this->_M_out_cur\n-\t\t&& this->_M_out_cur == this->_M_out_lim;\n-\t  }\n-\treturn __ret;\n-      }\n     };\n \n   // Explicit specialization declarations, defined in src/fstream.cc."}, {"sha": "ca7b1e5484b81e68452b8e28dc7d34c49540a358", "filename": "libstdc++-v3/include/std/std_sstream.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd96b185c55c02d9a74755489deffd3e287e6060/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd96b185c55c02d9a74755489deffd3e287e6060/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h?ref=cd96b185c55c02d9a74755489deffd3e287e6060", "patch": "@@ -258,7 +258,7 @@ namespace std\n \t  {\n \t    this->setp(__base, __base + _M_string.capacity());\n \t    // _M_out_lim points to the string end.\n-\t    this->_M_out_lim = __base + __len;\n+\t    this->_M_out_lim += __len;\n \t    this->_M_out_cur += __o;\n \t  }\n       }"}, {"sha": "41ca7702233be192e4cb9f0ede5e8f7e8ca834a6", "filename": "libstdc++-v3/src/fstream.cc", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd96b185c55c02d9a74755489deffd3e287e6060/libstdc%2B%2B-v3%2Fsrc%2Ffstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd96b185c55c02d9a74755489deffd3e287e6060/libstdc%2B%2B-v3%2Fsrc%2Ffstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffstream.cc?ref=cd96b185c55c02d9a74755489deffd3e287e6060", "patch": "@@ -64,7 +64,6 @@ namespace std\n \t  // Sync internal and external buffers.\n \t  // NB: __testget -> __testput as _M_buf_unified here.\n \t  const bool __testget = _M_in_beg < _M_in_cur;\n-\t  const bool __testinit = _M_is_indeterminate();\n \t  if (__testget)\n \t    {\n \t      if (__testout)\n@@ -74,7 +73,7 @@ namespace std\n \t\t\t\tios_base::cur, __testsync, ios_base::in);\n \t    }\n \n-\t  if (__testinit || __testget)\n+\t  if (_M_buf_size)\n \t    {\n \t      streamsize __elen = 0;\n \t      streamsize __ilen = 0;\n@@ -86,8 +85,6 @@ namespace std\n \t      if (0 < __ilen)\n \t\t{\n \t\t  _M_set_determinate(__ilen);\n-\t\t  if (__testout)\n-\t\t    _M_out_cur = _M_in_cur;\n \t\t  __ret = traits_type::to_int_type(*_M_in_cur);\n \t\t  if (__bump)\n \t\t    _M_move_in_cur(1);\n@@ -145,7 +142,6 @@ namespace std\n \t  // Sync internal and external buffers.\n \t  // NB: __testget -> __testput as _M_buf_unified here.\n \t  const bool __testget = _M_in_beg < _M_in_cur;\n-\t  const bool __testinit = _M_is_indeterminate();\n \t  if (__testget)\n \t    {\n \t      if (__testout)\n@@ -155,7 +151,7 @@ namespace std\n \t\t\t\tios_base::cur, __testsync, ios_base::in);\n \t    }\n \n-\t  if (__testinit || __testget)\n+\t  if (_M_buf_size)\n \t    {\n \t      streamsize __elen = 0;\n \t      streamsize __ilen = 0;\n@@ -191,8 +187,6 @@ namespace std\n \t      if (0 < __ilen)\n \t\t{\n \t\t  _M_set_determinate(__ilen);\n-\t\t  if (__testout)\n-\t\t    _M_out_cur = _M_in_cur;\n \t\t  __ret = traits_type::to_int_type(*_M_in_cur);\n \t\t  if (__bump)\n \t\t    _M_move_in_cur(1);"}]}