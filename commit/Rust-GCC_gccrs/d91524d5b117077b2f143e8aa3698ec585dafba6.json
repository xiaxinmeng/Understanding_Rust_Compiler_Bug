{"sha": "d91524d5b117077b2f143e8aa3698ec585dafba6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkxNTI0ZDViMTE3MDc3YjJmMTQzZThhYTM2OThlYzU4NWRhZmJhNg==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-05-20T09:17:22Z"}, "committer": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-05-20T09:39:11Z"}, "message": "[ARM]: Fix the wrong code-gen generated by MVE vector load/store intrinsics (PR94959).\n\nFew MVE intrinsics like vldrbq_s32, vldrhq_s32 etc., the assembler instructions\ngenerated by current compiler are wrong.\neg: vldrbq_s32 generates an assembly instructions `vldrb.s32 q0,[ip]`.\nBut as per Arm-arm second argument in above instructions must also be a low\nregister (<= r7). This patch fixes this issue by creating a new predicate\n\"mve_memory_operand\" and constraint \"Ux\" which allows low registers as arguments\nto the generated instructions depending on the mode of the argument. A new constraint\n\"Ul\" is created to handle loading to PC-relative addressing modes for vector\nstore/load intrinsiscs.\nAll the corresponding MVE intrinsic generating wrong code-gen as vldrbq_s32\nare modified in this patch.\n\ngcc/ChangeLog:\n\n2020-05-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\t    Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\tPR target/94959\n\t* config/arm/arm-protos.h (arm_mode_base_reg_class): Function\n\tdeclaration.\n\t(mve_vector_mem_operand): Likewise.\n\t* config/arm/arm.c (thumb2_legitimate_address_p): For MVE target check\n\tthe load from memory to a core register is legitimate for give mode.\n\t(mve_vector_mem_operand): Define function.\n\t(arm_print_operand): Modify comment.\n\t(arm_mode_base_reg_class): Define.\n\t* config/arm/arm.h (MODE_BASE_REG_CLASS): Modify to add check for\n\tTARGET_HAVE_MVE and expand to arm_mode_base_reg_class on TRUE.\n\t* config/arm/constraints.md (Ux): Likewise.\n\t(Ul): Likewise.\n\t* config/arm/mve.md (mve_mov): Replace constraint Us with Ux and also\n\tadd support for missing Vector Store Register and Vector Load Register.\n\tAdd a new alternative to support load from memory to PC (or label) in\n\tvector store/load.\n\t(mve_vstrbq_<supf><mode>): Modify constraint Us to Ux.\n\t(mve_vldrbq_<supf><mode>): Modify constriant Us to Ux, predicate to\n\tmve_memory_operand and also modify the MVE instructions to emit.\n\t(mve_vldrbq_z_<supf><mode>): Modify constraint Us to Ux.\n\t(mve_vldrhq_fv8hf): Modify constriant Us to Ux, predicate to\n\tmve_memory_operand and also modify the MVE instructions to emit.\n\t(mve_vldrhq_<supf><mode>): Modify constriant Us to Ux, predicate to\n\tmve_memory_operand and also modify the MVE instructions to emit.\n\t(mve_vldrhq_z_fv8hf): Likewise.\n\t(mve_vldrhq_z_<supf><mode>): Likewise.\n\t(mve_vldrwq_fv4sf): Likewise.\n\t(mve_vldrwq_<supf>v4si): Likewise.\n\t(mve_vldrwq_z_fv4sf): Likewise.\n\t(mve_vldrwq_z_<supf>v4si): Likewise.\n\t(mve_vld1q_f<mode>): Modify constriant Us to Ux.\n\t(mve_vld1q_<supf><mode>): Likewise.\n\t(mve_vstrhq_fv8hf): Modify constriant Us to Ux, predicate to\n\tmve_memory_operand.\n\t(mve_vstrhq_p_fv8hf): Modify constriant Us to Ux, predicate to\n\tmve_memory_operand and also modify the MVE instructions to emit.\n\t(mve_vstrhq_p_<supf><mode>): Likewise.\n\t(mve_vstrhq_<supf><mode>): Modify constriant Us to Ux, predicate to\n\tmve_memory_operand.\n\t(mve_vstrwq_fv4sf): Modify constriant Us to Ux.\n\t(mve_vstrwq_p_fv4sf): Modify constriant Us to Ux and also modify the MVE\n\tinstructions to emit.\n\t(mve_vstrwq_p_<supf>v4si): Likewise.\n\t(mve_vstrwq_<supf>v4si): Likewise.Modify constriant Us to Ux.\n\t* config/arm/predicates.md (mve_memory_operand): Define.\n\ngcc/testsuite/ChangeLog:\n\n2020-05-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\tPR target/94959\n\t* gcc.target/arm/mve/intrinsics/mve_vector_float2.c: Modify.\n\t* gcc.target/arm/mve/intrinsics/mve_vldr.c: New test.\n\t* gcc.target/arm/mve/intrinsics/mve_vldr_z.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vstr.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/mve_vstr_p.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_f16.c: Modify.\n\t* gcc.target/arm/mve/intrinsics/vld1q_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_z_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_z_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_z_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_z_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_z_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_z_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_z_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_z_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_z_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrbq_z_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_z_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_z_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_z_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_z_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_z_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_z_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_z_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_z_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_z_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_z_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vuninitializedq_float.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vuninitializedq_float1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vuninitializedq_int.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vuninitializedq_int1.c: Likewise.", "tree": {"sha": "669b930087283e47ea5a5ee25a57698c25e0757a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/669b930087283e47ea5a5ee25a57698c25e0757a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d91524d5b117077b2f143e8aa3698ec585dafba6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d91524d5b117077b2f143e8aa3698ec585dafba6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d91524d5b117077b2f143e8aa3698ec585dafba6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d91524d5b117077b2f143e8aa3698ec585dafba6/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29c34351be83bc84238cbc8c3c8818c0f46cef38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29c34351be83bc84238cbc8c3c8818c0f46cef38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29c34351be83bc84238cbc8c3c8818c0f46cef38"}], "stats": {"total": 818, "additions": 645, "deletions": 173}, "files": [{"sha": "21070e0574338b1896a0151220b71097fd23177f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -1,3 +1,55 @@\n+gcc/ChangeLog:\n+\n+2020-05-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\t    Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\tPR target/94959\n+\t* config/arm/arm-protos.h (arm_mode_base_reg_class): Function\n+\tdeclaration.\n+\t(mve_vector_mem_operand): Likewise.\n+\t* config/arm/arm.c (thumb2_legitimate_address_p): For MVE target check\n+\tthe load from memory to a core register is legitimate for give mode.\n+\t(mve_vector_mem_operand): Define function.\n+\t(arm_print_operand): Modify comment.\n+\t(arm_mode_base_reg_class): Define.\n+\t* config/arm/arm.h (MODE_BASE_REG_CLASS): Modify to add check for\n+\tTARGET_HAVE_MVE and expand to arm_mode_base_reg_class on TRUE.\n+\t* config/arm/constraints.md (Ux): Likewise.\n+\t(Ul): Likewise.\n+\t* config/arm/mve.md (mve_mov): Replace constraint Us with Ux and also\n+\tadd support for missing Vector Store Register and Vector Load Register.\n+\tAdd a new alternative to support load from memory to PC (or label) in\n+\tvector store/load.\n+\t(mve_vstrbq_<supf><mode>): Modify constraint Us to Ux.\n+\t(mve_vldrbq_<supf><mode>): Modify constriant Us to Ux, predicate to\n+\tmve_memory_operand and also modify the MVE instructions to emit.\n+\t(mve_vldrbq_z_<supf><mode>): Modify constraint Us to Ux.\n+\t(mve_vldrhq_fv8hf): Modify constriant Us to Ux, predicate to\n+\tmve_memory_operand and also modify the MVE instructions to emit.\n+\t(mve_vldrhq_<supf><mode>): Modify constriant Us to Ux, predicate to\n+\tmve_memory_operand and also modify the MVE instructions to emit.\n+\t(mve_vldrhq_z_fv8hf): Likewise.\n+\t(mve_vldrhq_z_<supf><mode>): Likewise.\n+\t(mve_vldrwq_fv4sf): Likewise.\n+\t(mve_vldrwq_<supf>v4si): Likewise.\n+\t(mve_vldrwq_z_fv4sf): Likewise.\n+\t(mve_vldrwq_z_<supf>v4si): Likewise.\n+\t(mve_vld1q_f<mode>): Modify constriant Us to Ux.\n+\t(mve_vld1q_<supf><mode>): Likewise.\n+\t(mve_vstrhq_fv8hf): Modify constriant Us to Ux, predicate to\n+\tmve_memory_operand.\n+\t(mve_vstrhq_p_fv8hf): Modify constriant Us to Ux, predicate to\n+\tmve_memory_operand and also modify the MVE instructions to emit.\n+\t(mve_vstrhq_p_<supf><mode>): Likewise.\n+\t(mve_vstrhq_<supf><mode>): Modify constriant Us to Ux, predicate to\n+\tmve_memory_operand.\n+\t(mve_vstrwq_fv4sf): Modify constriant Us to Ux.\n+\t(mve_vstrwq_p_fv4sf): Modify constriant Us to Ux and also modify the MVE\n+\tinstructions to emit.\n+\t(mve_vstrwq_p_<supf>v4si): Likewise.\n+\t(mve_vstrwq_<supf>v4si): Likewise.Modify constriant Us to Ux.\n+\t* config/arm/predicates.md (mve_memory_operand): Define.\n+\n 2020-05-30  Richard Biener  <rguenther@suse.de>\n \n \tPR c/95141"}, {"sha": "33d162c3e00590ab96de56f20380f4ae4f200849", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -64,6 +64,8 @@ extern bool arm_q_bit_access (void);\n extern bool arm_ge_bits_access (void);\n \n #ifdef RTX_CODE\n+enum reg_class\n+arm_mode_base_reg_class (machine_mode);\n extern void arm_gen_unlikely_cbranch (enum rtx_code, machine_mode cc_mode,\n \t\t\t\t      rtx label_ref);\n extern bool arm_vector_mode_supported_p (machine_mode);\n@@ -114,6 +116,7 @@ extern bool arm_tls_referenced_p (rtx);\n \n extern int arm_coproc_mem_operand (rtx, bool);\n extern int neon_vector_mem_operand (rtx, int, bool);\n+extern int mve_vector_mem_operand (machine_mode, rtx, bool);\n extern int neon_struct_mem_operand (rtx);\n \n extern rtx *neon_vcmla_lane_prepare_operands (rtx *);"}, {"sha": "c396b5b28e3e4bb9a907fa7b667ab9136e6417be", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 90, "deletions": 10, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -8468,6 +8468,10 @@ thumb2_legitimate_address_p (machine_mode mode, rtx x, int strict_p)\n   bool use_ldrd;\n   enum rtx_code code = GET_CODE (x);\n \n+  if (TARGET_HAVE_MVE\n+      && (mode == V8QImode || mode == E_V4QImode || mode == V4HImode))\n+    return mve_vector_mem_operand (mode, x, strict_p);\n+\n   if (arm_address_register_rtx_p (x, strict_p))\n     return 1;\n \n@@ -13283,6 +13287,79 @@ arm_coproc_mem_operand (rtx op, bool wb)\n   return FALSE;\n }\n \n+/* This function returns TRUE on matching mode and op.\n+1. For given modes, check for [Rn], return TRUE for Rn <= LO_REGS.\n+2. For other modes, check for [Rn], return TRUE for Rn < R15 (expect R13).  */\n+int\n+mve_vector_mem_operand (machine_mode mode, rtx op, bool strict)\n+{\n+  enum rtx_code code;\n+  int val, reg_no;\n+\n+  /* Match: (mem (reg)).  */\n+  if (REG_P (op))\n+    {\n+      int reg_no = REGNO (op);\n+      return (((mode == E_V8QImode || mode == E_V4QImode || mode == E_V4HImode)\n+\t       ? reg_no <= LAST_LO_REGNUM\n+\t       :(reg_no < LAST_ARM_REGNUM && reg_no != SP_REGNUM))\n+\t      || (!strict && reg_no >= FIRST_PSEUDO_REGISTER));\n+    }\n+  code = GET_CODE (op);\n+\n+  if (code == POST_INC || code == PRE_DEC\n+      || code == PRE_INC || code == POST_DEC)\n+    {\n+      reg_no = REGNO (XEXP (op, 0));\n+      return (((mode == E_V8QImode || mode == E_V4QImode || mode == E_V4HImode)\n+\t       ? reg_no <= LAST_LO_REGNUM\n+\t       :(reg_no < LAST_ARM_REGNUM && reg_no != SP_REGNUM))\n+\t      || (!strict && reg_no >= FIRST_PSEUDO_REGISTER));\n+    }\n+  else if ((code == POST_MODIFY || code == PRE_MODIFY)\n+\t   && GET_CODE (XEXP (op, 1)) == PLUS && REG_P (XEXP (XEXP (op, 1), 1)))\n+    {\n+      reg_no = REGNO (XEXP (op, 0));\n+      val = INTVAL (XEXP ( XEXP (op, 1), 1));\n+      switch (mode)\n+\t{\n+\t  case E_V16QImode:\n+\t    if (abs (val) <= 127)\n+\t      return ((reg_no < LAST_ARM_REGNUM && reg_no != SP_REGNUM)\n+\t\t      || (!strict && reg_no >= FIRST_PSEUDO_REGISTER));\n+\t  case E_V8HImode:\n+\t  case E_V8HFmode:\n+\t    if (abs (val) <= 255)\n+\t      return ((reg_no < LAST_ARM_REGNUM && reg_no != SP_REGNUM)\n+\t\t      || (!strict && reg_no >= FIRST_PSEUDO_REGISTER));\n+\t  case E_V8QImode:\n+\t  case E_V4QImode:\n+\t    if (abs (val) <= 127)\n+\t      return (reg_no <= LAST_LO_REGNUM\n+\t\t      || (!strict && reg_no >= FIRST_PSEUDO_REGISTER));\n+\t  case E_V4HImode:\n+\t  case E_V4HFmode:\n+\t    if (val % 2 == 0 && abs (val) <= 254)\n+\t      return (reg_no <= LAST_LO_REGNUM\n+\t\t      || (!strict && reg_no >= FIRST_PSEUDO_REGISTER));\n+\t  case E_V4SImode:\n+\t  case E_V4SFmode:\n+\t    if (val % 4 == 0 && abs (val) <= 508)\n+\t      return ((reg_no < LAST_ARM_REGNUM && reg_no != SP_REGNUM)\n+\t\t      || (!strict && reg_no >= FIRST_PSEUDO_REGISTER));\n+\t  case E_V2DImode:\n+\t  case E_V2DFmode:\n+\t  case E_TImode:\n+\t    if (val % 4 == 0 && val >= 0 && val <= 1020)\n+\t      return ((reg_no < LAST_ARM_REGNUM && reg_no != SP_REGNUM)\n+\t\t      || (!strict && reg_no >= FIRST_PSEUDO_REGISTER));\n+\t  default:\n+\t    return FALSE;\n+\t}\n+    }\n+  return FALSE;\n+}\n+\n /* Return TRUE if OP is a memory operand which we can load or store a vector\n    to/from. TYPE is one of the following values:\n     0 - Vector load/stor (vldr)\n@@ -13350,15 +13427,6 @@ neon_vector_mem_operand (rtx op, int type, bool strict)\n       && (INTVAL (XEXP (ind, 1)) & 3) == 0)\n     return TRUE;\n \n-  if (type == 1 && TARGET_HAVE_MVE\n-      && (GET_CODE (ind) == POST_INC || GET_CODE (ind) == PRE_DEC))\n-    {\n-      rtx ind1 = XEXP (ind, 0);\n-      if (!REG_P (ind1))\n-\treturn 0;\n-      return VFP_REGNO_OK_FOR_SINGLE (REGNO (ind1));\n-    }\n-\n   return FALSE;\n }\n \n@@ -24042,7 +24110,7 @@ arm_print_operand (FILE *stream, rtx x, int code)\n       }\n       return;\n \n-    /* To print the memory operand with \"Us\" constraint.  Based on the rtx_code\n+    /* To print the memory operand with \"Ux\" constraint.  Based on the rtx_code\n        the memory operands output looks like following.\n        1. [Rn], #+/-<imm>\n        2. [Rn, #+/-<imm>]!\n@@ -33408,6 +33476,18 @@ arm_gen_far_branch (rtx * operands, int pos_label, const char * dest,\n   return \"\";\n }\n \n+/* If given mode matches, load from memory to LO_REGS.\n+   (i.e [Rn], Rn <= LO_REGS).  */\n+enum reg_class\n+arm_mode_base_reg_class (machine_mode mode)\n+{\n+  if (TARGET_HAVE_MVE\n+      && (mode == E_V8QImode || mode == E_V4QImode || mode == E_V4HImode))\n+    return LO_REGS;\n+\n+  return MODE_BASE_REG_REG_CLASS (mode);\n+}\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-arm.h\""}, {"sha": "30e1d6dc994e18012fd2e5a1bbd7c69134ee100c", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -1292,11 +1292,13 @@ extern const char *fp_sysreg_names[NB_FP_SYSREGS];\n \n /* For the Thumb the high registers cannot be used as base registers\n    when addressing quantities in QI or HI mode; if we don't know the\n-   mode, then we must be conservative.  */\n+   mode, then we must be conservative. For MVE we need to load from\n+   memory to low regs based on given modes i.e [Rn], Rn <= LO_REGS.  */\n #define MODE_BASE_REG_CLASS(MODE)\t\t\t\t\\\n-  (TARGET_32BIT ? CORE_REGS\t\t\t\t\t\\\n+   (TARGET_HAVE_MVE ? arm_mode_base_reg_class (MODE)\t\t\\\n+   :(TARGET_32BIT ? CORE_REGS\t\t\t\t\t\\\n    : GET_MODE_SIZE (MODE) >= 4 ? BASE_REGS\t\t\t\\\n-   : LO_REGS)\n+   : LO_REGS))\n \n /* For Thumb we cannot support SP+reg addressing, so we return LO_REGS\n    instead of BASE_REGS.  */"}, {"sha": "011badc9957655a0fba67946c1db6fa6334b2bbb", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -39,14 +39,26 @@\n ;; in all states: Pf, Pg\n \n ;; The following memory constraints have been used:\n-;; in ARM/Thumb-2 state: Uh, Ut, Uv, Uy, Un, Um, Us, Up, Uf\n+;; in ARM/Thumb-2 state: Uh, Ut, Uv, Uy, Un, Um, Us, Up, Uf, Ux, Ul\n ;; in ARM state: Uq\n ;; in Thumb state: Uu, Uw\n ;; in all states: Q\n \n (define_register_constraint \"Up\" \"TARGET_HAVE_MVE ? VPR_REG : NO_REGS\"\n   \"MVE VPR register\")\n \n+(define_memory_constraint \"Ul\"\n+ \"@internal\n+  In ARM/Thumb-2 state a valid address for load instruction with XEXP (op, 0)\n+  being label of the literal data item to be loaded.\"\n+ (and (match_code \"mem\")\n+      (match_test \"TARGET_HAVE_MVE && reload_completed\n+\t\t   && (GET_CODE (XEXP (op, 0)) == LABEL_REF\n+\t\t       || (GET_CODE (XEXP (op, 0)) == CONST\n+\t\t\t   && GET_CODE (XEXP (XEXP (op, 0), 0)) == PLUS\n+\t\t\t   && GET_CODE (XEXP (XEXP (XEXP (op, 0), 0), 0)) == LABEL_REF\n+\t\t\t   && CONST_INT_P (XEXP (XEXP (XEXP (op, 0), 0), 1))))\")))\n+\n (define_register_constraint \"Uf\" \"TARGET_HAVE_MVE ? VFPCC_REG : NO_REGS\"\n   \"MVE FPCCR register\")\n \n@@ -467,6 +479,15 @@\n  (and (match_code \"mem\")\n       (match_test \"TARGET_32BIT && neon_vector_mem_operand (op, 1, true)\")))\n \n+(define_memory_constraint \"Ux\"\n+ \"@internal\n+  In ARM/Thumb-2 state a valid address and load into CORE regs or only to\n+  LO_REGS based on mode of op.\"\n+ (and (match_code \"mem\")\n+      (match_test \"(TARGET_HAVE_MVE || TARGET_HAVE_MVE_FLOAT)\n+\t\t   && mve_vector_mem_operand (GET_MODE (op),\n+\t\t\t\t\t      XEXP (op, 0), true)\")))\n+\n (define_memory_constraint \"Uq\"\n  \"@internal\n   In ARM state an address valid in ldrsb instructions.\""}, {"sha": "986fbfe2abae5f1e91e65f1ff5c84709c43c4617", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 102, "deletions": 54, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -666,8 +666,8 @@\n (define_int_iterator VSHLCQ_M [VSHLCQ_M_S VSHLCQ_M_U])\n \n (define_insn \"*mve_mov<mode>\"\n-  [(set (match_operand:MVE_types 0 \"nonimmediate_operand\" \"=w,w,r,w,w,r,w,Us\")\n-\t(match_operand:MVE_types 1 \"general_operand\" \"w,r,w,Dn,Usi,r,Dm,w\"))]\n+  [(set (match_operand:MVE_types 0 \"nonimmediate_operand\" \"=w,w,r,w,w,r,w,Ux,w\")\n+\t(match_operand:MVE_types 1 \"general_operand\" \"w,r,w,Dn,Uxi,r,Dm,w,Ul\"))]\n   \"TARGET_HAVE_MVE || TARGET_HAVE_MVE_FLOAT\"\n {\n   if (which_alternative == 3 || which_alternative == 6)\n@@ -686,6 +686,50 @@\n \tsprintf (templ, \"vmov.i%d\\t%%q0, %%x1  @ <mode>\", width);\n       return templ;\n     }\n+\n+  if (which_alternative == 4 || which_alternative == 7)\n+    {\n+      rtx ops[2];\n+      int regno = (which_alternative == 7)\n+\t\t  ? REGNO (operands[1]) : REGNO (operands[0]);\n+\n+      ops[0] = operands[0];\n+      ops[1] = operands[1];\n+      if (<MODE>mode == V2DFmode || <MODE>mode == V2DImode)\n+\t{\n+\t  if (which_alternative == 7)\n+\t    {\n+\t      ops[1] = gen_rtx_REG (DImode, regno);\n+\t      output_asm_insn (\"vstr.64\\t%P1, %E0\",ops);\n+\t    }\n+\t  else\n+\t    {\n+\t      ops[0] = gen_rtx_REG (DImode, regno);\n+\t      output_asm_insn (\"vldr.64\\t%P0, %E1\",ops);\n+\t    }\n+\t}\n+      else if (<MODE>mode == TImode)\n+\t{\n+\t  if (which_alternative == 7)\n+\t    output_asm_insn (\"vstr.64\\t%q1, %E0\",ops);\n+\t  else\n+\t    output_asm_insn (\"vldr.64\\t%q0, %E1\",ops);\n+\t}\n+      else\n+\t{\n+\t  if (which_alternative == 7)\n+\t    {\n+\t      ops[1] = gen_rtx_REG (TImode, regno);\n+\t      output_asm_insn (\"vstr<V_sz_elem1>.<V_sz_elem>\\t%q1, %E0\",ops);\n+\t    }\n+\t  else\n+\t    {\n+\t      ops[0] = gen_rtx_REG (TImode, regno);\n+\t      output_asm_insn (\"vldr<V_sz_elem1>.<V_sz_elem>\\t%q0, %E1\",ops);\n+\t    }\n+\t}\n+      return \"\";\n+    }\n   switch (which_alternative)\n     {\n     case 0:\n@@ -694,26 +738,19 @@\n       return \"vmov\\t%e0, %Q1, %R1  @ <mode>\\;vmov\\t%f0, %J1, %K1\";\n     case 2:\n       return \"vmov\\t%Q0, %R0, %e1  @ <mode>\\;vmov\\t%J0, %K0, %f1\";\n-    case 4:\n-      if (MEM_P (operands[1])\n-\t  && (GET_CODE (XEXP (operands[1], 0)) == LABEL_REF\n-\t      || GET_CODE (XEXP (operands[1], 0)) == CONST))\n-\treturn output_move_neon (operands);\n-      else\n-\treturn \"vldrb.8 %q0, %E1\";\n     case 5:\n       return output_move_quad (operands);\n-    case 7:\n-      return \"vstrb.8 %q1, %E0\";\n+    case 8:\n+\treturn output_move_neon (operands);\n     default:\n       gcc_unreachable ();\n       return \"\";\n     }\n }\n-  [(set_attr \"type\" \"mve_move,mve_move,mve_move,mve_move,mve_load,multiple,mve_move,mve_store\")\n-   (set_attr \"length\" \"4,8,8,4,8,8,4,4\")\n-   (set_attr \"thumb2_pool_range\" \"*,*,*,*,1018,*,*,*\")\n-   (set_attr \"neg_pool_range\" \"*,*,*,*,996,*,*,*\")])\n+  [(set_attr \"type\" \"mve_move,mve_move,mve_move,mve_move,mve_load,multiple,mve_move,mve_store,mve_load\")\n+   (set_attr \"length\" \"4,8,8,4,8,8,4,4,4\")\n+   (set_attr \"thumb2_pool_range\" \"*,*,*,*,1018,*,*,*,*\")\n+   (set_attr \"neg_pool_range\" \"*,*,*,*,996,*,*,*,*\")])\n \n (define_insn \"*mve_mov<mode>\"\n   [(set (match_operand:MVE_types 0 \"s_register_operand\" \"=w,w\")\n@@ -8047,7 +8084,7 @@\n ;; [vstrbq_s vstrbq_u]\n ;;\n (define_insn \"mve_vstrbq_<supf><mode>\"\n-  [(set (match_operand:<MVE_B_ELEM> 0 \"memory_operand\" \"=Us\")\n+  [(set (match_operand:<MVE_B_ELEM> 0 \"mve_memory_operand\" \"=Ux\")\n \t(unspec:<MVE_B_ELEM> [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")]\n \t VSTRBQ))\n   ]\n@@ -8133,7 +8170,7 @@\n ;;\n (define_insn \"mve_vldrbq_<supf><mode>\"\n   [(set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_2 [(match_operand:<MVE_B_ELEM> 1 \"memory_operand\" \"Us\")]\n+\t(unspec:MVE_2 [(match_operand:<MVE_B_ELEM> 1 \"mve_memory_operand\" \"Ux\")]\n \t VLDRBQ))\n   ]\n   \"TARGET_HAVE_MVE\"\n@@ -8142,7 +8179,10 @@\n    int regno = REGNO (operands[0]);\n    ops[0] = gen_rtx_REG (TImode, regno);\n    ops[1]  = operands[1];\n-   output_asm_insn (\"vldrb.<supf><V_sz_elem>\\t%q0, %E1\",ops);\n+   if (<V_sz_elem> == 8)\n+     output_asm_insn (\"vldrb.<V_sz_elem>\\t%q0, %E1\",ops);\n+   else\n+     output_asm_insn (\"vldrb.<supf><V_sz_elem>\\t%q0, %E1\",ops);\n    return \"\";\n }\n   [(set_attr \"length\" \"4\")])\n@@ -8216,7 +8256,7 @@\n ;; [vstrbq_p_s vstrbq_p_u]\n ;;\n (define_insn \"mve_vstrbq_p_<supf><mode>\"\n-  [(set (match_operand:<MVE_B_ELEM> 0 \"memory_operand\" \"=Us\")\n+  [(set (match_operand:<MVE_B_ELEM> 0 \"mve_memory_operand\" \"=Ux\")\n \t(unspec:<MVE_B_ELEM> [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n \t\t\t      (match_operand:HI 2 \"vpr_register_operand\" \"Up\")]\n \t VSTRBQ))\n@@ -8227,7 +8267,7 @@\n    int regno = REGNO (operands[1]);\n    ops[1] = gen_rtx_REG (TImode, regno);\n    ops[0]  = operands[0];\n-   output_asm_insn (\"vpst\\n\\tvstrbt.<V_sz_elem>\\t%q1, %E0\",ops);\n+   output_asm_insn (\"vpst\\;vstrbt.<V_sz_elem>\\t%q1, %E0\",ops);\n    return \"\";\n }\n   [(set_attr \"length\" \"8\")])\n@@ -8262,7 +8302,7 @@\n ;;\n (define_insn \"mve_vldrbq_z_<supf><mode>\"\n   [(set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_2 [(match_operand:<MVE_B_ELEM> 1 \"memory_operand\" \"Us\")\n+\t(unspec:MVE_2 [(match_operand:<MVE_B_ELEM> 1 \"mve_memory_operand\" \"Ux\")\n \t\t       (match_operand:HI 2 \"vpr_register_operand\" \"Up\")]\n \t VLDRBQ))\n   ]\n@@ -8272,7 +8312,10 @@\n    int regno = REGNO (operands[0]);\n    ops[0] = gen_rtx_REG (TImode, regno);\n    ops[1]  = operands[1];\n-   output_asm_insn (\"vpst\\n\\tvldrbt.<supf><V_sz_elem>\\t%q0, %E1\",ops);\n+   if (<V_sz_elem> == 8)\n+     output_asm_insn (\"vpst\\;vldrbt.<V_sz_elem>\\t%q0, %E1\",ops);\n+   else\n+     output_asm_insn (\"vpst\\;vldrbt.<supf><V_sz_elem>\\t%q0, %E1\",ops);\n    return \"\";\n }\n   [(set_attr \"length\" \"8\")])\n@@ -8303,7 +8346,7 @@\n ;;\n (define_insn \"mve_vldrhq_fv8hf\"\n   [(set (match_operand:V8HF 0 \"s_register_operand\" \"=w\")\n-\t(unspec:V8HF [(match_operand:V8HI 1 \"memory_operand\" \"Us\")]\n+\t(unspec:V8HF [(match_operand:V8HI 1 \"mve_memory_operand\" \"Ux\")]\n \t VLDRHQ_F))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n@@ -8312,7 +8355,7 @@\n    int regno = REGNO (operands[0]);\n    ops[0] = gen_rtx_REG (TImode, regno);\n    ops[1]  = operands[1];\n-   output_asm_insn (\"vldrh.f16\\t%q0, %E1\",ops);\n+   output_asm_insn (\"vldrh.16\\t%q0, %E1\",ops);\n    return \"\";\n }\n   [(set_attr \"length\" \"4\")])\n@@ -8413,13 +8456,12 @@\n }\n   [(set_attr \"length\" \"8\")])\n \n-;;\n ;;\n ;; [vldrhq_s, vldrhq_u]\n ;;\n (define_insn \"mve_vldrhq_<supf><mode>\"\n   [(set (match_operand:MVE_6 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_6 [(match_operand:<MVE_H_ELEM> 1 \"memory_operand\" \"Us\")]\n+\t(unspec:MVE_6 [(match_operand:<MVE_H_ELEM> 1 \"mve_memory_operand\" \"Ux\")]\n \t VLDRHQ))\n   ]\n   \"TARGET_HAVE_MVE\"\n@@ -8428,7 +8470,10 @@\n    int regno = REGNO (operands[0]);\n    ops[0] = gen_rtx_REG (TImode, regno);\n    ops[1]  = operands[1];\n-   output_asm_insn (\"vldrh.<supf><V_sz_elem>\\t%q0, %E1\",ops);\n+   if (<V_sz_elem> == 16)\n+     output_asm_insn (\"vldrh.16\\t%q0, %E1\",ops);\n+   else\n+     output_asm_insn (\"vldrh.<supf><V_sz_elem>\\t%q0, %E1\",ops);\n    return \"\";\n }\n   [(set_attr \"length\" \"4\")])\n@@ -8438,7 +8483,7 @@\n ;;\n (define_insn \"mve_vldrhq_z_fv8hf\"\n   [(set (match_operand:V8HF 0 \"s_register_operand\" \"=w\")\n-\t(unspec:V8HF [(match_operand:V8HI 1 \"memory_operand\" \"Us\")\n+\t(unspec:V8HF [(match_operand:V8HI 1 \"mve_memory_operand\" \"Ux\")\n \t(match_operand:HI 2 \"vpr_register_operand\" \"Up\")]\n \t VLDRHQ_F))\n   ]\n@@ -8448,7 +8493,7 @@\n    int regno = REGNO (operands[0]);\n    ops[0] = gen_rtx_REG (TImode, regno);\n    ops[1]  = operands[1];\n-   output_asm_insn (\"vpst\\n\\tvldrht.f16\\t%q0, %E1\",ops);\n+   output_asm_insn (\"vpst\\;vldrht.16\\t%q0, %E1\",ops);\n    return \"\";\n }\n   [(set_attr \"length\" \"8\")])\n@@ -8458,7 +8503,7 @@\n ;;\n (define_insn \"mve_vldrhq_z_<supf><mode>\"\n   [(set (match_operand:MVE_6 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_6 [(match_operand:<MVE_H_ELEM> 1 \"memory_operand\" \"Us\")\n+\t(unspec:MVE_6 [(match_operand:<MVE_H_ELEM> 1 \"mve_memory_operand\" \"Ux\")\n \t(match_operand:HI 2 \"vpr_register_operand\" \"Up\")]\n \t VLDRHQ))\n   ]\n@@ -8468,7 +8513,10 @@\n    int regno = REGNO (operands[0]);\n    ops[0] = gen_rtx_REG (TImode, regno);\n    ops[1]  = operands[1];\n-   output_asm_insn (\"vpst\\n\\tvldrht.<supf><V_sz_elem>\\t%q0, %E1\",ops);\n+   if (<V_sz_elem> == 16)\n+     output_asm_insn (\"vpst\\;vldrht.16\\t%q0, %E1\",ops);\n+   else\n+     output_asm_insn (\"vpst\\;vldrht.<supf><V_sz_elem>\\t%q0, %E1\",ops);\n    return \"\";\n }\n   [(set_attr \"length\" \"8\")])\n@@ -8478,7 +8526,7 @@\n ;;\n (define_insn \"mve_vldrwq_fv4sf\"\n   [(set (match_operand:V4SF 0 \"s_register_operand\" \"=w\")\n-\t(unspec:V4SF [(match_operand:V4SI 1 \"memory_operand\" \"Us\")]\n+\t(unspec:V4SF [(match_operand:V4SI 1 \"memory_operand\" \"Ux\")]\n \t VLDRWQ_F))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n@@ -8487,7 +8535,7 @@\n    int regno = REGNO (operands[0]);\n    ops[0] = gen_rtx_REG (TImode, regno);\n    ops[1]  = operands[1];\n-   output_asm_insn (\"vldrw.f32\\t%q0, %E1\",ops);\n+   output_asm_insn (\"vldrw.32\\t%q0, %E1\",ops);\n    return \"\";\n }\n   [(set_attr \"length\" \"4\")])\n@@ -8497,7 +8545,7 @@\n ;;\n (define_insn \"mve_vldrwq_<supf>v4si\"\n   [(set (match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n-\t(unspec:V4SI [(match_operand:V4SI 1 \"memory_operand\" \"Us\")]\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"memory_operand\" \"Ux\")]\n \t VLDRWQ))\n   ]\n   \"TARGET_HAVE_MVE\"\n@@ -8506,7 +8554,7 @@\n    int regno = REGNO (operands[0]);\n    ops[0] = gen_rtx_REG (TImode, regno);\n    ops[1]  = operands[1];\n-   output_asm_insn (\"vldrw.<supf>32\\t%q0, %E1\",ops);\n+   output_asm_insn (\"vldrw.32\\t%q0, %E1\",ops);\n    return \"\";\n }\n   [(set_attr \"length\" \"4\")])\n@@ -8516,7 +8564,7 @@\n ;;\n (define_insn \"mve_vldrwq_z_fv4sf\"\n   [(set (match_operand:V4SF 0 \"s_register_operand\" \"=w\")\n-\t(unspec:V4SF [(match_operand:V4SI 1 \"memory_operand\" \"Us\")\n+\t(unspec:V4SF [(match_operand:V4SI 1 \"memory_operand\" \"Ux\")\n \t(match_operand:HI 2 \"vpr_register_operand\" \"Up\")]\n \t VLDRWQ_F))\n   ]\n@@ -8526,7 +8574,7 @@\n    int regno = REGNO (operands[0]);\n    ops[0] = gen_rtx_REG (TImode, regno);\n    ops[1]  = operands[1];\n-   output_asm_insn (\"vpst\\n\\tvldrwt.f32\\t%q0, %E1\",ops);\n+   output_asm_insn (\"vpst\\;vldrwt.32\\t%q0, %E1\",ops);\n    return \"\";\n }\n   [(set_attr \"length\" \"8\")])\n@@ -8536,7 +8584,7 @@\n ;;\n (define_insn \"mve_vldrwq_z_<supf>v4si\"\n   [(set (match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n-\t(unspec:V4SI [(match_operand:V4SI 1 \"memory_operand\" \"Us\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"memory_operand\" \"Ux\")\n \t(match_operand:HI 2 \"vpr_register_operand\" \"Up\")]\n \t VLDRWQ))\n   ]\n@@ -8546,14 +8594,14 @@\n    int regno = REGNO (operands[0]);\n    ops[0] = gen_rtx_REG (TImode, regno);\n    ops[1]  = operands[1];\n-   output_asm_insn (\"vpst\\n\\tvldrwt.<supf>32\\t%q0, %E1\",ops);\n+   output_asm_insn (\"vpst\\;vldrwt.32\\t%q0, %E1\",ops);\n    return \"\";\n }\n   [(set_attr \"length\" \"8\")])\n \n (define_expand \"mve_vld1q_f<mode>\"\n   [(match_operand:MVE_0 0 \"s_register_operand\")\n-   (unspec:MVE_0 [(match_operand:<MVE_CNVT> 1 \"memory_operand\")] VLD1Q_F)\n+   (unspec:MVE_0 [(match_operand:<MVE_CNVT> 1 \"mve_memory_operand\")] VLD1Q_F)\n   ]\n   \"TARGET_HAVE_MVE || TARGET_HAVE_MVE_FLOAT\"\n {\n@@ -8563,7 +8611,7 @@\n \n (define_expand \"mve_vld1q_<supf><mode>\"\n   [(match_operand:MVE_2 0 \"s_register_operand\")\n-   (unspec:MVE_2 [(match_operand:MVE_2 1 \"memory_operand\")] VLD1Q)\n+   (unspec:MVE_2 [(match_operand:MVE_2 1 \"mve_memory_operand\")] VLD1Q)\n   ]\n   \"TARGET_HAVE_MVE\"\n {\n@@ -8991,7 +9039,7 @@\n ;; [vstrhq_f]\n ;;\n (define_insn \"mve_vstrhq_fv8hf\"\n-  [(set (match_operand:V8HI 0 \"memory_operand\" \"=Us\")\n+  [(set (match_operand:V8HI 0 \"mve_memory_operand\" \"=Ux\")\n \t(unspec:V8HI [(match_operand:V8HF 1 \"s_register_operand\" \"w\")]\n \t VSTRHQ_F))\n   ]\n@@ -9010,7 +9058,7 @@\n ;; [vstrhq_p_f]\n ;;\n (define_insn \"mve_vstrhq_p_fv8hf\"\n-  [(set (match_operand:V8HI 0 \"memory_operand\" \"=Us\")\n+  [(set (match_operand:V8HI 0 \"mve_memory_operand\" \"=Ux\")\n \t(unspec:V8HI [(match_operand:V8HF 1 \"s_register_operand\" \"w\")\n \t\t      (match_operand:HI 2 \"vpr_register_operand\" \"Up\")]\n \t VSTRHQ_F))\n@@ -9021,7 +9069,7 @@\n    int regno = REGNO (operands[1]);\n    ops[1] = gen_rtx_REG (TImode, regno);\n    ops[0]  = operands[0];\n-   output_asm_insn (\"vpst\\n\\tvstrht.16\\t%q1, %E0\",ops);\n+   output_asm_insn (\"vpst\\;vstrht.16\\t%q1, %E0\",ops);\n    return \"\";\n }\n   [(set_attr \"length\" \"8\")])\n@@ -9030,7 +9078,7 @@\n ;; [vstrhq_p_s vstrhq_p_u]\n ;;\n (define_insn \"mve_vstrhq_p_<supf><mode>\"\n-  [(set (match_operand:<MVE_H_ELEM> 0 \"memory_operand\" \"=Us\")\n+  [(set (match_operand:<MVE_H_ELEM> 0 \"mve_memory_operand\" \"=Ux\")\n \t(unspec:<MVE_H_ELEM> [(match_operand:MVE_6 1 \"s_register_operand\" \"w\")\n \t\t\t      (match_operand:HI 2 \"vpr_register_operand\" \"Up\")]\n \t VSTRHQ))\n@@ -9041,7 +9089,7 @@\n    int regno = REGNO (operands[1]);\n    ops[1] = gen_rtx_REG (TImode, regno);\n    ops[0]  = operands[0];\n-   output_asm_insn (\"vpst\\n\\tvstrht.<V_sz_elem>\\t%q1, %E0\",ops);\n+   output_asm_insn (\"vpst\\;vstrht.<V_sz_elem>\\t%q1, %E0\",ops);\n    return \"\";\n }\n   [(set_attr \"length\" \"8\")])\n@@ -9093,7 +9141,7 @@\n ;; [vstrhq_scatter_shifted_offset_p_s vstrhq_scatter_shifted_offset_p_u]\n ;;\n (define_insn \"mve_vstrhq_scatter_shifted_offset_p_<supf><mode>\"\n-  [(set (match_operand:<MVE_H_ELEM> 0 \"memory_operand\" \"=Us\")\n+  [(set (match_operand:<MVE_H_ELEM> 0 \"memory_operand\" \"=Ux\")\n \t(unspec:<MVE_H_ELEM>\n \t\t[(match_operand:MVE_6 1 \"s_register_operand\" \"w\")\n \t\t (match_operand:MVE_6 2 \"s_register_operand\" \"w\")\n@@ -9136,7 +9184,7 @@\n ;; [vstrhq_s, vstrhq_u]\n ;;\n (define_insn \"mve_vstrhq_<supf><mode>\"\n-  [(set (match_operand:<MVE_H_ELEM> 0 \"memory_operand\" \"=Us\")\n+  [(set (match_operand:<MVE_H_ELEM> 0 \"mve_memory_operand\" \"=Ux\")\n \t(unspec:<MVE_H_ELEM> [(match_operand:MVE_6 1 \"s_register_operand\" \"w\")]\n \t VSTRHQ))\n   ]\n@@ -9155,7 +9203,7 @@\n ;; [vstrwq_f]\n ;;\n (define_insn \"mve_vstrwq_fv4sf\"\n-  [(set (match_operand:V4SI 0 \"memory_operand\" \"=Us\")\n+  [(set (match_operand:V4SI 0 \"memory_operand\" \"=Ux\")\n \t(unspec:V4SI [(match_operand:V4SF 1 \"s_register_operand\" \"w\")]\n \t VSTRWQ_F))\n   ]\n@@ -9174,7 +9222,7 @@\n ;; [vstrwq_p_f]\n ;;\n (define_insn \"mve_vstrwq_p_fv4sf\"\n-  [(set (match_operand:V4SI 0 \"memory_operand\" \"=Us\")\n+  [(set (match_operand:V4SI 0 \"memory_operand\" \"=Ux\")\n \t(unspec:V4SI [(match_operand:V4SF 1 \"s_register_operand\" \"w\")\n \t\t      (match_operand:HI 2 \"vpr_register_operand\" \"Up\")]\n \t VSTRWQ_F))\n@@ -9185,7 +9233,7 @@\n    int regno = REGNO (operands[1]);\n    ops[1] = gen_rtx_REG (TImode, regno);\n    ops[0]  = operands[0];\n-   output_asm_insn (\"vpst\\n\\tvstrwt.32\\t%q1, %E0\",ops);\n+   output_asm_insn (\"vpst\\;vstrwt.32\\t%q1, %E0\",ops);\n    return \"\";\n }\n   [(set_attr \"length\" \"8\")])\n@@ -9194,7 +9242,7 @@\n ;; [vstrwq_p_s vstrwq_p_u]\n ;;\n (define_insn \"mve_vstrwq_p_<supf>v4si\"\n-  [(set (match_operand:V4SI 0 \"memory_operand\" \"=Us\")\n+  [(set (match_operand:V4SI 0 \"memory_operand\" \"=Ux\")\n \t(unspec:V4SI [(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n \t\t      (match_operand:HI 2 \"vpr_register_operand\" \"Up\")]\n \t VSTRWQ))\n@@ -9205,7 +9253,7 @@\n    int regno = REGNO (operands[1]);\n    ops[1] = gen_rtx_REG (TImode, regno);\n    ops[0]  = operands[0];\n-   output_asm_insn (\"vpst\\n\\tvstrwt.32\\t%q1, %E0\",ops);\n+   output_asm_insn (\"vpst\\;vstrwt.32\\t%q1, %E0\",ops);\n    return \"\";\n }\n   [(set_attr \"length\" \"8\")])\n@@ -9214,7 +9262,7 @@\n ;; [vstrwq_s vstrwq_u]\n ;;\n (define_insn \"mve_vstrwq_<supf>v4si\"\n-  [(set (match_operand:V4SI 0 \"memory_operand\" \"=Us\")\n+  [(set (match_operand:V4SI 0 \"memory_operand\" \"=Ux\")\n \t(unspec:V4SI [(match_operand:V4SI 1 \"s_register_operand\" \"w\")]\n \t VSTRWQ))\n   ]"}, {"sha": "c57ad73577e1eebebc8951ed5b4fb544dd3381f8", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -31,6 +31,12 @@\n \t      || REGNO_REG_CLASS (REGNO (op)) != NO_REGS));\n })\n \n+(define_predicate \"mve_memory_operand\"\n+  (and (match_code \"mem\")\n+       (match_test \"TARGET_32BIT\n+\t\t    && mve_vector_mem_operand (GET_MODE (op), XEXP (op, 0),\n+\t\t\t\t\t       false)\")))\n+\n ;; True for immediates in the range of 1 to 16 for MVE.\n (define_predicate \"mve_imm_16\"\n   (match_test \"satisfies_constraint_Rd (op)\"))"}, {"sha": "35f83c6b298aaf2b8093713159b32de17ff96bd2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vector_float2.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vector_float2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vector_float2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vector_float2.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -11,17 +11,16 @@ foo32 ()\n   return b;\n }\n \n-/* { dg-final { scan-assembler \"vmov\\\\tq\\[0-7\\], q\\[0-7\\]\"  }  } */\n-/* { dg-final { scan-assembler \"vstrb.*\" }  } */\n-/* { dg-final { scan-assembler \"vldr.64*\" }  } */\n-\n float16x8_t\n foo16 ()\n {\n   float16x8_t b = {32.01};\n   return b;\n }\n \n-/* { dg-final { scan-assembler \"vmov\\\\tq\\[0-7\\], q\\[0-7\\]\"  }  } */\n-/* { dg-final { scan-assembler \"vstrb.*\" }  } */\n-/* { dg-final { scan-assembler \"vldr.64.*\" }  } */\n+/* { dg-final { scan-assembler-times \"vmov\\\\tq\\[0-7\\], q\\[0-7\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vstrw.32*\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vstrh.16*\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vldrw.32*\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vldrh.16*\" 1 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "15656ed8c3c8c3ab95bbb5de59dafdab864b28db", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldr.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldr.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+void\n+foo (uint16_t row_x_col, int8_t *out)\n+{\n+  for (;;)\n+   {\n+     int32x4_t out_3;\n+     int8_t *rhs_0;\n+     int8_t *lhs_3;\n+     int i_row_x_col;\n+     for (;i_row_x_col < row_x_col; i_row_x_col++)\n+      {\n+\tint32x4_t ker_0 = vldrbq_s32(rhs_0);\n+\tint32x4_t ip_3 = vldrbq_s32(lhs_3);\n+\tout_3 = vmulq_s32(ip_3, ker_0);\n+      }\n+     vstrbq_s32(out, out_3);\n+   }\n+}\n+\n+void\n+foo1 (uint16_t row_x_col, int8_t *out)\n+{\n+  for (;;)\n+   {\n+     int16x8_t out_3;\n+     int8_t *rhs_0;\n+     int8_t *lhs_3;\n+     int i_row_x_col;\n+     for (; i_row_x_col < row_x_col; i_row_x_col++)\n+      {\n+\tint16x8_t ker_0 = vldrbq_s16(rhs_0);\n+\tint16x8_t ip_3 = vldrbq_s16(lhs_3);\n+\tout_3 = vmulq_s16(ip_3, ker_0);\n+      }\n+     vstrbq_s16(out, out_3);\n+   }\n+}\n+\n+void\n+foo2 (uint16_t row_x_col, int16_t *out)\n+{\n+  for (;;)\n+   {\n+     int32x4_t out_3;\n+     int16_t *rhs_0;\n+     int16_t *lhs_3;\n+     int i_row_x_col;\n+     for (; i_row_x_col < row_x_col; i_row_x_col++)\n+      {\n+\tint32x4_t ker_0 = vldrhq_s32(rhs_0);\n+\tint32x4_t ip_3 = vldrhq_s32(lhs_3);\n+\tout_3 = vmulq_s32(ip_3, ker_0);\n+      }\n+     vstrhq_s32(out, out_3);\n+   }\n+}"}, {"sha": "ae640837d14f41cc617ac56c57ca120be615ac31", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vldr_z.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldr_z.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldr_z.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vldr_z.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -0,0 +1,73 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+void\n+foo (uint16_t row_len, const int32_t *bias, int8_t *out)\n+{\n+  int i_out_ch;\n+  for (;;)\n+   {\n+     int8_t *ip_c3;\n+     int32_t acc_3;\n+     int32_t row_loop_cnt = row_len;\n+     int32x4_t res = {acc_3};\n+     uint32x4_t scatter_offset;\n+     int i_row_loop;\n+     for (; i_row_loop < row_loop_cnt; i_row_loop++)\n+      {\n+\tmve_pred16_t p;\n+\tint16x8_t r0;\n+\tint16x8_t c3 = vldrbq_z_s16(ip_c3, p);\n+\tacc_3 = vmladavaq_p_s16(acc_3, r0, c3, p);\n+      }\n+     vstrbq_scatter_offset_s32(&out[i_out_ch], scatter_offset, res);\n+   }\n+}\n+\n+void\n+foo1 (uint16_t row_len, const int32_t *bias, int8_t *out)\n+{\n+  int i_out_ch;\n+  for (;;)\n+   {\n+     int8_t *ip_c3;\n+     int32_t acc_3;\n+     int32_t row_loop_cnt = row_len;\n+     int i_row_loop;\n+     int32x4_t res = {acc_3};\n+     uint32x4_t scatter_offset;\n+     for (; i_row_loop < row_loop_cnt; i_row_loop++)\n+      {\n+\tmve_pred16_t p;\n+\tint32x4_t r0;\n+\tint32x4_t c3 = vldrbq_z_s32(ip_c3, p);\n+\tacc_3 = vmladavaq_p_s32(acc_3, r0, c3, p);\n+      }\n+     vstrbq_scatter_offset_s32(&out[i_out_ch], scatter_offset, res);\n+   }\n+}\n+\n+void\n+foo2 (uint16_t row_len, const int32_t *bias, int8_t *out)\n+{\n+  int i_out_ch;\n+  for (;;)\n+   {\n+     int16_t *ip_c3;\n+     int32_t acc_3;\n+     int32_t row_loop_cnt = row_len;\n+     int i_row_loop;\n+     int32x4_t res = {acc_3};\n+     uint32x4_t scatter_offset;\n+     for (; i_row_loop < row_loop_cnt; i_row_loop++)\n+      {\n+\tmve_pred16_t p;\n+\tint32x4_t r0;\n+\tint32x4_t c3 = vldrhq_z_s32(ip_c3, p);\n+\tacc_3 = vmladavaq_p_s32(acc_3, r0, c3, p);\n+      }\n+     vstrbq_scatter_offset_s32(&out[i_out_ch], scatter_offset, res);\n+   }\n+}"}, {"sha": "dd785f28bc02beae828a6486fdcf3a374829ac0d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vstr.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vstr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vstr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vstr.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+void\n+foo (const int32_t *output_bias, int8_t *out, uint16_t num_ch)\n+{\n+  int32_t loop_count = num_ch;\n+  const int32_t *bias = output_bias;\n+  int i_loop_cnt;\n+  for (; i_loop_cnt < loop_count; out += 4, i_loop_cnt++)\n+   {\n+     int32x4_t out_0 = vldrwq_s32(bias);\n+     vstrbq_s32(out, out_0);\n+   }\n+}\n+\n+void\n+foo1 (const int16_t *output_bias, int8_t *out, uint16_t num_ch)\n+{\n+  int32_t loop_count = num_ch;\n+  const int16_t *bias = output_bias;\n+  int i_loop_cnt;\n+  for (; i_loop_cnt < loop_count; out += 4, i_loop_cnt++)\n+   {\n+     int16x8_t out_0 = vldrhq_s16(bias);\n+     vstrbq_s16(out, out_0);\n+   }\n+}\n+\n+void\n+foo2 (const int32_t *output_bias, int16_t *out, uint16_t num_ch)\n+{\n+  int32_t loop_count = num_ch;\n+  const int32_t *bias = output_bias;\n+  int i_loop_cnt;\n+  for (; i_loop_cnt < loop_count; out += 4, i_loop_cnt++)\n+   {\n+     int32x4_t out_0 = vldrwq_s32(bias);\n+     vstrhq_s32(out, out_0);\n+   }\n+}"}, {"sha": "8b222f1be0a95031189e792bf9afa22411fa867a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vstr_p.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vstr_p.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vstr_p.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vstr_p.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+void\n+foo1 (int8_t *x, int32_t * i1)\n+{\n+  mve_pred16_t p;\n+  int32x4_t x_0;\n+  int32_t * bias1 = i1;\n+  for (;; x++)\n+  {\n+    x_0 = vldrwq_s32(bias1);\n+    vstrbq_p_s32(x, x_0, p);\n+  }\n+}\n+void\n+foo2 (int8_t *x, int16_t * i1)\n+{\n+  mve_pred16_t p;\n+  int16x8_t x_0;\n+  int16_t * bias1 = i1;\n+  for (;; x++)\n+  {\n+    x_0 = vldrhq_s16(bias1);\n+    vstrbq_p_s16(x, x_0, p);\n+  }\n+}\n+\n+void\n+foo3 (int16_t *x, int32_t * i1)\n+{\n+  mve_pred16_t p;\n+  int32x4_t x_0;\n+  int32_t * bias1 = i1;\n+  for (;; x++)\n+  {\n+    x_0 = vldrwq_s32(bias1);\n+    vstrhq_p_s32(x, x_0, p);\n+  }\n+}"}, {"sha": "699e40d0e3b503f6c02abaa3f4f976343081f108", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_f16.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_f16.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,12 +10,11 @@ foo (float16_t const * base)\n   return vld1q_f16 (base);\n }\n \n-/* { dg-final { scan-assembler \"vldrh.f16\"  }  } */\n-\n float16x8_t\n foo1 (float16_t const * base)\n {\n   return vld1q (base);\n }\n \n-/* { dg-final { scan-assembler \"vldrh.f16\"  }  } */\n+/* { dg-final { scan-assembler-times \"vldrh.16\" 2 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "865923033629c273b1a31f57c0589e0ab1e6fc24", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_f32.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_f32.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,12 +10,11 @@ foo (float32_t const * base)\n   return vld1q_f32 (base);\n }\n \n-/* { dg-final { scan-assembler \"vldrw.f32\"  }  } */\n-\n float32x4_t\n foo1 (float32_t const * base)\n {\n   return vld1q (base);\n }\n \n-/* { dg-final { scan-assembler \"vldrw.f32\"  }  } */\n+/* { dg-final { scan-assembler-times \"vldrw.32\" 2 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "f4f04f534db63c5b77927d8e2ea967bb705012cc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_s16.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_s16.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,12 +10,11 @@ foo (int16_t const * base)\n   return vld1q_s16 (base);\n }\n \n-/* { dg-final { scan-assembler \"vldrh.s16\"  }  } */\n-\n int16x8_t\n foo1 (int16_t const * base)\n {\n   return vld1q (base);\n }\n \n-/* { dg-final { scan-assembler \"vldrh.s16\"  }  } */\n+/* { dg-final { scan-assembler-times \"vldrh.16\" 2 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "e0f661667515f3d3e94cd052b4bbdef9c33c06dc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_s32.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_s32.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,12 +10,11 @@ foo (int32_t const * base)\n   return vld1q_s32 (base);\n }\n \n-/* { dg-final { scan-assembler \"vldrw.s32\"  }  } */\n-\n int32x4_t\n foo1 (int32_t const * base)\n {\n   return vld1q (base);\n }\n \n-/* { dg-final { scan-assembler \"vldrw.s32\"  }  } */\n+/* { dg-final { scan-assembler-times \"vldrw.32\" 2 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "1b7edead6b1a5489f2c668a69136b5fed463c703", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_s8.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_s8.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,12 +10,11 @@ foo (int8_t const * base)\n   return vld1q_s8 (base);\n }\n \n-/* { dg-final { scan-assembler \"vldrb.s8\"  }  } */\n-\n int8x16_t\n foo1 (int8_t const * base)\n {\n   return vld1q (base);\n }\n \n-/* { dg-final { scan-assembler \"vldrb.s8\"  }  } */\n+/* { dg-final { scan-assembler-times \"vldrb.8\" 2 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "50e1f5cedcbe42d7f63255359795007bfe5ffc0e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_u16.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_u16.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,12 +10,11 @@ foo (uint16_t const * base)\n   return vld1q_u16 (base);\n }\n \n-/* { dg-final { scan-assembler \"vldrh.u16\"  }  } */\n-\n uint16x8_t\n foo1 (uint16_t const * base)\n {\n   return vld1q (base);\n }\n \n-/* { dg-final { scan-assembler \"vldrh.u16\"  }  } */\n+/* { dg-final { scan-assembler-times \"vldrh.16\" 2 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "a13fe824382f825a32f865fc5937712a2f278faf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_u32.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_u32.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,12 +10,11 @@ foo (uint32_t const * base)\n   return vld1q_u32 (base);\n }\n \n-/* { dg-final { scan-assembler \"vldrw.u32\"  }  } */\n-\n uint32x4_t\n foo1 (uint32_t const * base)\n {\n   return vld1q (base);\n }\n \n-/* { dg-final { scan-assembler \"vldrw.u32\"  }  } */\n+/* { dg-final { scan-assembler-times \"vldrw.32\" 2 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "dfd1deb93f0f485fb2491a3b21821c284c0da437", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_u8.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_u8.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,12 +10,11 @@ foo (uint8_t const * base)\n   return vld1q_u8 (base);\n }\n \n-/* { dg-final { scan-assembler \"vldrb.u8\"  }  } */\n-\n uint8x16_t\n foo1 (uint8_t const * base)\n {\n   return vld1q (base);\n }\n \n-/* { dg-final { scan-assembler \"vldrb.u8\"  }  } */\n+/* { dg-final { scan-assembler-times \"vldrb.8\" 2 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "3c32e408e420e2d393b5abcc96bd59e5d048ec34", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_z_f16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_f16.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,12 +10,12 @@ foo (float16_t const * base, mve_pred16_t p)\n   return vld1q_z_f16 (base, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrht.f16\"  }  } */\n-\n float16x8_t\n foo1 (float16_t const * base, mve_pred16_t p)\n {\n   return vld1q_z (base, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrht.f16\"  }  } */\n+/* { dg-final { scan-assembler-times \"vpst\" 2 }  } */\n+/* { dg-final { scan-assembler-times \"vldrht.16\" 2 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "3fc935c889bea0fec7858e034002b4a521afab65", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_z_f32.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_f32.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,12 +10,12 @@ foo (float32_t const * base, mve_pred16_t p)\n   return vld1q_z_f32 (base, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrwt.f32\"  }  } */\n-\n float32x4_t\n foo1 (float32_t const * base, mve_pred16_t p)\n {\n   return vld1q_z (base, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrwt.f32\"  }  } */\n+/* { dg-final { scan-assembler-times \"vpst\" 2 }  } */\n+/* { dg-final { scan-assembler-times \"vldrwt.32\" 2 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "49cc81092f359249c5178332c1ca6e18076eabdb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_z_s16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_s16.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,12 +10,12 @@ foo (int16_t const * base, mve_pred16_t p)\n   return vld1q_z_s16 (base, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrht.s16\"  }  } */\n-\n int16x8_t\n foo1 (int16_t const * base, mve_pred16_t p)\n {\n   return vld1q_z (base, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrht.s16\"  }  } */\n+/* { dg-final { scan-assembler-times \"vpst\" 2 }  } */\n+/* { dg-final { scan-assembler-times \"vldrht.16\" 2 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "ec317cd70e8f5cb2a5f83bbdcaf90b18ae148615", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_z_s32.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_s32.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,12 +10,12 @@ foo (int32_t const * base, mve_pred16_t p)\n   return vld1q_z_s32 (base, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrwt.s32\"  }  } */\n-\n int32x4_t\n foo1 (int32_t const * base, mve_pred16_t p)\n {\n   return vld1q_z (base, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrwt.s32\"  }  } */\n+/* { dg-final { scan-assembler-times \"vpst\" 2 }  } */\n+/* { dg-final { scan-assembler-times \"vldrwt.32\" 2 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "538c140e78e8d858fe1b42d73ca06ad774f3f4da", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_z_s8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_s8.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,12 +10,12 @@ foo (int8_t const * base, mve_pred16_t p)\n   return vld1q_z_s8 (base, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrbt.s8\"  }  } */\n-\n int8x16_t\n foo1 (int8_t const * base, mve_pred16_t p)\n {\n   return vld1q_z (base, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrbt.s8\"  }  } */\n+/* { dg-final { scan-assembler-times \"vpst\" 2 }  } */\n+/* { dg-final { scan-assembler-times \"vldrbt.8\" 2 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "e5e588a187e9524a76d9d9b3a2c799338989d7f6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_z_u16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_u16.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,12 +10,12 @@ foo (uint16_t const * base, mve_pred16_t p)\n   return vld1q_z_u16 (base, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrht.u16\"  }  } */\n-\n uint16x8_t\n foo1 (uint16_t const * base, mve_pred16_t p)\n {\n   return vld1q_z (base, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrht.u16\"  }  } */\n+/* { dg-final { scan-assembler-times \"vpst\" 2 }  } */\n+/* { dg-final { scan-assembler-times \"vldrht.16\" 2 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "999beefa7e8669dc15b70f4841adfbc08d018622", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_z_u32.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_u32.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,12 +10,12 @@ foo (uint32_t const * base, mve_pred16_t p)\n   return vld1q_z_u32 (base, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrwt.u32\"  }  } */\n-\n uint32x4_t\n foo1 (uint32_t const * base, mve_pred16_t p)\n {\n   return vld1q_z (base, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrwt.u32\"  }  } */\n+/* { dg-final { scan-assembler-times \"vpst\" 2 }  } */\n+/* { dg-final { scan-assembler-times \"vldrwt.32\" 2 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "172053c71422f5daad1555932c9af84deee0c8d9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_z_u8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_z_u8.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,12 +10,12 @@ foo (uint8_t const * base, mve_pred16_t p)\n   return vld1q_z_u8 (base, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrbt.u8\"  }  } */\n-\n uint8x16_t\n foo1 (uint8_t const * base, mve_pred16_t p)\n {\n   return vld1q_z (base, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrbt.u8\"  }  } */\n+/* { dg-final { scan-assembler-times \"vpst\" 2 }  } */\n+/* { dg-final { scan-assembler-times \"vldrbt.8\" 2 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "ec2f2176ccfebbef00447aed153069ce3be9491c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrbq_s8.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_s8.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,4 +10,5 @@ foo (int8_t const * base)\n   return vldrbq_s8 (base);\n }\n \n-/* { dg-final { scan-assembler \"vldrb.s8\"  }  } */\n+/* { dg-final { scan-assembler-times \"vldrb.8\" 1 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "d07b472a4ffe79d4615ae2a1e15606a34b9ac765", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrbq_u8.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_u8.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,4 +10,5 @@ foo (uint8_t const * base)\n   return vldrbq_u8 (base);\n }\n \n-/* { dg-final { scan-assembler \"vldrb.u8\"  }  } */\n+/* { dg-final { scan-assembler-times \"vldrb.8\" 1 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "aed3c9100638a2e86b91b3bf42040b4b728fd725", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrbq_z_s8.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_z_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_z_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_z_s8.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,4 +10,6 @@ foo (int8_t const * base, mve_pred16_t p)\n   return vldrbq_z_s8 (base, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrbt.s8\"  }  } */\n+/* { dg-final { scan-assembler-times \"vpst\" 1 }  } */\n+/* { dg-final { scan-assembler-times \"vldrbt.8\" 1 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "54c61e744543d5bba03dfdd23e1ceb1e8f398a1a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrbq_z_u8.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_z_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_z_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrbq_z_u8.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,4 +10,6 @@ foo (uint8_t const * base, mve_pred16_t p)\n   return vldrbq_z_u8 (base, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrbt.u8\"  }  } */\n+/* { dg-final { scan-assembler-times \"vpst\" 1 }  } */\n+/* { dg-final { scan-assembler-times \"vldrbt.8\" 1 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "7420d0198e7450f566644a74bac925170b49d688", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_s64.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_s64.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,6 +10,7 @@ foo (uint64x2_t * addr)\n   return vldrdq_gather_base_wb_s64 (addr, 8);\n }\n \n-/* { dg-final { scan-assembler \"vldrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n /* { dg-final { scan-assembler \"vldrd.64\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" } } */\n-/* { dg-final { scan-assembler \"vstrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler-times \"vldr.64\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vstr.64\" 1 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "ebe5b2fd70c7e9c1ebe6e2eedb185975afea36b9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_u64.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_u64.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,6 +10,7 @@ foo (uint64x2_t * addr)\n   return vldrdq_gather_base_wb_u64 (addr, 8);\n }\n \n-/* { dg-final { scan-assembler \"vldrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n /* { dg-final { scan-assembler \"vldrd.64\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" } } */\n-/* { dg-final { scan-assembler \"vstrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler-times \"vldr.64\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vstr.64\" 1 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "231a24a1e5550b444c5476bfc0d1f6802a4952c8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_z_s64.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_z_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_z_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_z_s64.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -8,8 +8,8 @@ int64x2_t foo (uint64x2_t * addr, mve_pred16_t p)\n     return vldrdq_gather_base_wb_z_s64 (addr, 1016, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n-/* { dg-final { scan-assembler \"vmsr\\t P0, r\\[0-9\\]+.*$\" } } */\n /* { dg-final { scan-assembler \"vpst\" } } */\n /* { dg-final { scan-assembler \"vldrdt.u64\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" } } */\n-/* { dg-final { scan-assembler \"vstrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler-times \"vldr.64\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vstr.64\" 1 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "b8d9b5c139150536721b1a66636ce9b5a86bf093", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrdq_gather_base_wb_z_u64.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_z_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_z_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrdq_gather_base_wb_z_u64.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -8,8 +8,8 @@ uint64x2_t foo (uint64x2_t * addr, mve_pred16_t p)\n     return vldrdq_gather_base_wb_z_u64 (addr, 8, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n-/* { dg-final { scan-assembler \"vmsr\\t P0, r\\[0-9\\]+.*\" } } */\n /* { dg-final { scan-assembler \"vpst\" } } */\n /* { dg-final { scan-assembler \"vldrdt.u64\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" } } */\n-/* { dg-final { scan-assembler \"vstrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler-times \"vldr.64\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vstr.64\" 1 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "05bef418d822a7a994002f4073b65178e42346a2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_f16.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_f16.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,4 +10,5 @@ foo (float16_t const * base)\n   return vldrhq_f16 (base);\n }\n \n-/* { dg-final { scan-assembler \"vldrh.f16\"  }  } */\n+/* { dg-final { scan-assembler-times \"vldrh.16\" 1 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "7c977b6a6995f11cd03380ba11585452bdddbe89", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_s16.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_s16.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,4 +10,5 @@ foo (int16_t const * base)\n   return vldrhq_s16 (base);\n }\n \n-/* { dg-final { scan-assembler \"vldrh.s16\"  }  } */\n+/* { dg-final { scan-assembler-times \"vldrh.16\" 1 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "229b52163faa2566e17f1320940a066313d2c853", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_s32.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_s32.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,4 +10,5 @@ foo (int16_t const * base)\n   return vldrhq_s32 (base);\n }\n \n-/* { dg-final { scan-assembler \"vldrh.s32\"  }  } */\n+/* { dg-final { scan-assembler-times \"vldrh.s32\" 1 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "07f6d9e3944a976886b35f3c7a042046f3c7498a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_u16.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_u16.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,4 +10,5 @@ foo (uint16_t const * base)\n   return vldrhq_u16 (base);\n }\n \n-/* { dg-final { scan-assembler \"vldrh.u16\"  }  } */\n+/* { dg-final { scan-assembler-times \"vldrh.16\" 1 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "cd24f01831f77d1da50ca624a7b6c800a9b616fd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_u32.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_u32.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,4 +10,5 @@ foo (uint16_t const * base)\n   return vldrhq_u32 (base);\n }\n \n-/* { dg-final { scan-assembler \"vldrh.u32\"  }  } */\n+/* { dg-final { scan-assembler-times \"vldrh.u32\" 1 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "dd0fc9c7b733114f6e229f78155afe53cca675b7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_z_f16.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_f16.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,4 +10,6 @@ foo (float16_t const * base, mve_pred16_t p)\n   return vldrhq_z_f16 (base, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrht.f16\"  }  } */\n+/* { dg-final { scan-assembler-times \"vpst\" 1 }  } */\n+/* { dg-final { scan-assembler-times \"vldrht.16\" 1 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "36d3458d95c91d13631e511ac1294e544791336a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_z_s16.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_s16.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,4 +10,6 @@ foo (int16_t const * base, mve_pred16_t p)\n   return vldrhq_z_s16 (base, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrht.s16\"  }  } */\n+/* { dg-final { scan-assembler-times \"vpst\" 1 }  } */\n+/* { dg-final { scan-assembler-times \"vldrht.16\" 1 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "9c67b479be79c8377682a4488d365cd853df7a2c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_z_s32.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_s32.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,4 +10,6 @@ foo (int16_t const * base, mve_pred16_t p)\n   return vldrhq_z_s32 (base, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrht.s32\"  }  } */\n+/* { dg-final { scan-assembler-times \"vpst\" 1 }  } */\n+/* { dg-final { scan-assembler-times \"vldrht.s32\" 1 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "26354b5971aca3c9f003559d5261866a019a70ef", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_z_u16.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_u16.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,4 +10,6 @@ foo (uint16_t const * base, mve_pred16_t p)\n   return vldrhq_z_u16 (base, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrht.u16\"  }  } */\n+/* { dg-final { scan-assembler-times \"vpst\" 1 }  } */\n+/* { dg-final { scan-assembler-times \"vldrht.16\" 1 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "948fe5ee5b46701ce6a7e80d4b6a3d54690d921f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_z_u32.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_u32.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,4 +10,6 @@ foo (uint16_t const * base, mve_pred16_t p)\n   return vldrhq_z_u32 (base, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrht.u32\"  }  } */\n+/* { dg-final { scan-assembler-times \"vpst\" 1 }  } */\n+/* { dg-final { scan-assembler-times \"vldrht.u32\" 1 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "143079aa23fe8a45c381e33e20adbd4bb91a539c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_f32.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_f32.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,4 +10,5 @@ foo (float32_t const * base)\n   return vldrwq_f32 (base);\n }\n \n-/* { dg-final { scan-assembler \"vldrw.f32\"  }  } */\n+/* { dg-final { scan-assembler-times \"vldrw.32\" 1 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "8e2994f75d7d488e968dd9cd4847900d2438475a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_f32.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_f32.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,6 +10,7 @@ foo (uint32x4_t * addr)\n   return vldrwq_gather_base_wb_f32 (addr, 8);\n }\n \n-/* { dg-final { scan-assembler \"vldrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"vldrw.32\\tq\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n /* { dg-final { scan-assembler \"vldrw.u32\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" } } */\n-/* { dg-final { scan-assembler \"vstrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"vstrw.32\\tq\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "e5054738b75ec7378a6a289e9c071721f9a6a4d0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_s32.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_s32.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,6 +10,7 @@ foo (uint32x4_t * addr)\n   return vldrwq_gather_base_wb_s32 (addr, 8);\n }\n \n-/* { dg-final { scan-assembler \"vldrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"vldrw.32\\tq\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n /* { dg-final { scan-assembler \"vldrw.u32\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" } } */\n-/* { dg-final { scan-assembler \"vstrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"vstrw.32\\tq\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "7f39414143bdfb3bcbc059dcdcba0472c0a63459", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_u32.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_u32.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,6 +10,7 @@ foo (uint32x4_t * addr)\n   return vldrwq_gather_base_wb_u32 (addr, 8);\n }\n \n-/* { dg-final { scan-assembler \"vldrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"vldrw.32\\tq\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n /* { dg-final { scan-assembler \"vldrw.u32\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" } } */\n-/* { dg-final { scan-assembler \"vstrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"vstrw.32\\tq\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "f3219e2e8254f542916b1fdc6d633e5512c08cfe", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_f32.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_f32.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,8 +10,9 @@ foo (uint32x4_t * addr, mve_pred16_t p)\n   return vldrwq_gather_base_wb_z_f32 (addr, 8, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"vldrw.32\\tq\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n /* { dg-final { scan-assembler \"vmsr\\t P0, r\\[0-9\\]+.*\" } } */\n /* { dg-final { scan-assembler \"vpst\" } } */\n /* { dg-final { scan-assembler \"vldrwt.u32\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" } } */\n-/* { dg-final { scan-assembler \"vstrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"vstrw.32\\tq\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "4d093d243fe63e3f98cffaf15fcb41fa4611b41e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_s32.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_s32.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,8 +10,9 @@ foo (uint32x4_t * addr, mve_pred16_t p)\n   return vldrwq_gather_base_wb_z_s32 (addr, 8, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"vldrw.32\\tq\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n /* { dg-final { scan-assembler \"vmsr\\t P0, r\\[0-9\\]+.*\" } } */\n /* { dg-final { scan-assembler \"vpst\" } } */\n /* { dg-final { scan-assembler \"vldrwt.u32\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" } } */\n-/* { dg-final { scan-assembler \"vstrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"vstrw.32\\tq\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "e796522a49c6c1929f2f64ee27e36eda9a1a95d3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_gather_base_wb_z_u32.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_gather_base_wb_z_u32.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,8 +10,9 @@ foo (uint32x4_t * addr, mve_pred16_t p)\n   return vldrwq_gather_base_wb_z_u32 (addr, 8, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"vldrw.32\\tq\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n /* { dg-final { scan-assembler \"vmsr\\t P0, r\\[0-9\\]+.*\" } } */\n /* { dg-final { scan-assembler \"vpst\" } } */\n /* { dg-final { scan-assembler \"vldrwt.u32\\tq\\[0-9\\]+, \\\\\\[q\\[0-9\\]+, #\\[0-9\\]+\\\\\\]!\" } } */\n-/* { dg-final { scan-assembler \"vstrb.8 q\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"vstrw.32\\tq\\[0-9\\]+, \\\\\\[r\\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "860dd324d256511a5802a097019f1a9a7cd52e9b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_s32.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_s32.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,4 +10,5 @@ foo (int32_t const * base)\n   return vldrwq_s32 (base);\n }\n \n-/* { dg-final { scan-assembler \"vldrw.s32\"  }  } */\n+/* { dg-final { scan-assembler-times \"vldrw.32\" 1 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "513ed49fb6eb7a88a51df58a521ff0669af89ad1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_u32.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_u32.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,4 +10,5 @@ foo (uint32_t const * base)\n   return vldrwq_u32 (base);\n }\n \n-/* { dg-final { scan-assembler \"vldrw.u32\"  }  } */\n+/* { dg-final { scan-assembler-times \"vldrw.32\" 1 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "3e0a6a60bcf4374ec09f336001b04e6fda524913", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_z_f32.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_z_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_z_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_z_f32.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,4 +10,6 @@ foo (float32_t const * base, mve_pred16_t p)\n   return vldrwq_z_f32 (base, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrwt.f32\"  }  } */\n+/* { dg-final { scan-assembler-times \"vpst\" 1 }  } */\n+/* { dg-final { scan-assembler-times \"vldrwt.32\" 1 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "82b914885b55d7b7d076500726ac9e174f8c0ece", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_z_s32.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_z_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_z_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_z_s32.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,4 +10,6 @@ foo (int32_t const * base, mve_pred16_t p)\n   return vldrwq_z_s32 (base, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrwt.s32\"  }  } */\n+/* { dg-final { scan-assembler-times \"vpst\" 1 }  } */\n+/* { dg-final { scan-assembler-times \"vldrwt.32\" 1 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "6a66e1678815b7b4984ed011d108bc48ab44c963", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_z_u32.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_z_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_z_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_z_u32.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -10,4 +10,6 @@ foo (uint32_t const * base, mve_pred16_t p)\n   return vldrwq_z_u32 (base, p);\n }\n \n-/* { dg-final { scan-assembler \"vldrwt.u32\"  }  } */\n+/* { dg-final { scan-assembler-times \"vpst\" 1 }  } */\n+/* { dg-final { scan-assembler-times \"vldrwt.32\" 1 }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "739f282c476f2611245a20dfc0d121eba289a788", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vuninitializedq_float.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_float.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -1,6 +1,6 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n-/* { dg-additional-options \"-O0\" } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n \n@@ -14,4 +14,6 @@ foo ()\n   fb = vuninitializedq_f32 ();\n }\n \n-/* { dg-final { scan-assembler-times \"vstrb.8\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vstrh.16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vstrw.32\" 1 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "a9130607f26915af39e41d9f1181131bcbd1ef32", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vuninitializedq_float1.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_float1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_float1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_float1.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -1,6 +1,6 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n-/* { dg-additional-options \"-O0\" } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n \n@@ -14,4 +14,6 @@ foo ()\n   fb = vuninitializedq (fbb);\n }\n \n-/* { dg-final { scan-assembler-times \"vstrb.8\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vstrh.16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vstrw.32\" 1 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "bf6692fe57322ac9ed5c949a9697d3ed7a565acc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vuninitializedq_int.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_int.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -1,6 +1,6 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n-/* { dg-additional-options \"-O0\" } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n int8x16_t a;\n@@ -25,4 +25,8 @@ foo ()\n   ud = vuninitializedq_u64 ();\n }\n \n-/* { dg-final { scan-assembler-times \"vstrb.8\" 16 } } */\n+/* { dg-final { scan-assembler-times \"vstrb.8\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vstrh.16\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vstrw.32\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vstr.64\" 2 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "4f66a07ac29030482a2643e10907d0dae24743af", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vuninitializedq_int1.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_int1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d91524d5b117077b2f143e8aa3698ec585dafba6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_int1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_int1.c?ref=d91524d5b117077b2f143e8aa3698ec585dafba6", "patch": "@@ -1,6 +1,6 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n-/* { dg-additional-options \"-O0\" } */\n+/* { dg-additional-options \"-O2\" } */\n \n #include \"arm_mve.h\"\n \n@@ -26,4 +26,8 @@ foo ()\n   ud = vuninitializedq (udd);\n }\n \n-/* { dg-final { scan-assembler-times \"vstrb.8\" 24 } } */\n+/* { dg-final { scan-assembler-times \"vstrb.8\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vstrh.16\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vstrw.32\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vstr.64\" 2 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}]}