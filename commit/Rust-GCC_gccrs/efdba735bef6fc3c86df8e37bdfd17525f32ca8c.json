{"sha": "efdba735bef6fc3c86df8e37bdfd17525f32ca8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZkYmE3MzViZWY2ZmMzYzg2ZGY4ZTM3YmRmZDE3NTI1ZjMyY2E4Yw==", "commit": {"author": {"name": "Stuart Hastings", "email": "stuart@apple.com", "date": "2003-12-05T00:44:57Z"}, "committer": {"name": "Stuart Hastings", "email": "stuart@gcc.gnu.org", "date": "2003-12-05T00:44:57Z"}, "message": "2003-12-04  Stuart Hastings  <stuart@apple.com>\n\n        * rs6000.c (output_call, macho_branch_islands,\n        add_compiler_branch_island, no_previous_def, get_previous_label)\n        Revisions of xx_stub functions for branch islands,\n        add -fPIC support for Darwin.\n        * rs6000-protos.h (output_call) Prototype.\n        * rs6000.md Use output_call.\n        * invoke.texi Explain Darwin semantics of -longcall.\n        * testsuite/gcc.dg/darwin-abi-1.c Revise testcase for -longcall/jbsr.\n\nFrom-SVN: r74302", "tree": {"sha": "622358f56d81ef04c32427df0947d574667e7522", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/622358f56d81ef04c32427df0947d574667e7522"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efdba735bef6fc3c86df8e37bdfd17525f32ca8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efdba735bef6fc3c86df8e37bdfd17525f32ca8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efdba735bef6fc3c86df8e37bdfd17525f32ca8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efdba735bef6fc3c86df8e37bdfd17525f32ca8c/comments", "author": null, "committer": null, "parents": [{"sha": "22c3768c40ca78ee453874b0831ee30340563b27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22c3768c40ca78ee453874b0831ee30340563b27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22c3768c40ca78ee453874b0831ee30340563b27"}], "stats": {"total": 241, "additions": 158, "deletions": 83}, "files": [{"sha": "428e95474ed0346abcc906b9ff8cb1594e6430a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efdba735bef6fc3c86df8e37bdfd17525f32ca8c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efdba735bef6fc3c86df8e37bdfd17525f32ca8c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=efdba735bef6fc3c86df8e37bdfd17525f32ca8c", "patch": "@@ -1,3 +1,14 @@\n+2003-12-04  Stuart Hastings  <stuart@apple.com>\n+\n+        * rs6000.c (output_call, macho_branch_islands,\n+        add_compiler_branch_island, no_previous_def, get_previous_label)\n+        Revisions of xx_stub functions for branch islands,\n+        add -fPIC support for Darwin.\n+        * rs6000-protos.h (output_call) Prototype.\n+        * rs6000.md Use output_call.\n+        * invoke.texi Explain Darwin semantics of -longcall.\n+        * testsuite/gcc.dg/darwin-abi-1.c Revise testcase for -longcall/jbsr.\n+\n 2003-12-04  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/i386.md (addqi3_carry): Use q not r constraints."}, {"sha": "57fca197fc1127d437cb202447a732fa8b789193", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efdba735bef6fc3c86df8e37bdfd17525f32ca8c/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efdba735bef6fc3c86df8e37bdfd17525f32ca8c/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=efdba735bef6fc3c86df8e37bdfd17525f32ca8c", "patch": "@@ -201,4 +201,8 @@ extern int rs6000_tls_symbol_ref (rtx, enum machine_mode);\n extern void rs6000_pragma_longcall (struct cpp_reader *);\n extern void rs6000_cpu_cpp_builtins (struct cpp_reader *);\n \n+#if TARGET_MACHO\n+char *output_call (rtx, rtx *, int, int);\n+#endif\n+\n #endif  /* rs6000-protos.h */"}, {"sha": "cc62bc5df621abae0362d6cd2199d103a9d77258", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 122, "deletions": 74, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efdba735bef6fc3c86df8e37bdfd17525f32ca8c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efdba735bef6fc3c86df8e37bdfd17525f32ca8c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=efdba735bef6fc3c86df8e37bdfd17525f32ca8c", "patch": "@@ -399,6 +399,13 @@ static void rs6000_move_block_from_reg(int regno, rtx x, int nregs);\n static void setup_incoming_varargs (CUMULATIVE_ARGS *,\n \t\t\t\t    enum machine_mode, tree,\n \t\t\t\t    int *, int);\n+#if TARGET_MACHO\n+static void macho_branch_islands (void);\n+static void add_compiler_branch_island (tree, tree, int);\n+static int no_previous_def (tree function_name);\n+static tree get_prev_label (tree function_name);\n+#endif\n+\n static tree rs6000_build_builtin_va_list (void);\n \n /* Hash table stuff for keeping track of TOC entries.  */\n@@ -12432,7 +12439,8 @@ rs6000_output_function_epilogue (FILE *file,\n \t}\n     }\n \n-#if TARGET_OBJECT_FORMAT == OBJECT_MACHO\n+#if TARGET_MACHO\n+  macho_branch_islands ();\n   /* Mach-O doesn't support labels at the end of objects, so if\n      it looks like we might want one, insert a NOP.  */\n   {\n@@ -14719,97 +14727,134 @@ symbolic_operand (rtx op)\n }\n #endif\n \n-#ifdef RS6000_LONG_BRANCH\n+#if TARGET_MACHO\n \n-static tree stub_list = 0;\n+static tree branch_island_list = 0;\n \n-/* ADD_COMPILER_STUB adds the compiler generated stub for handling \n-   procedure calls to the linked list.  */\n+/* Remember to generate a branch island for far calls to the given\n+   function.  */\n \n-void \n-add_compiler_stub (tree label_name, tree function_name, int line_number)\n+static void \n+add_compiler_branch_island (tree label_name, tree function_name, int line_number)\n {\n-  tree stub = build_tree_list (function_name, label_name);\n-  TREE_TYPE (stub) = build_int_2 (line_number, 0);\n-  TREE_CHAIN (stub) = stub_list;\n-  stub_list = stub;\n+  tree branch_island = build_tree_list (function_name, label_name);\n+  TREE_TYPE (branch_island) = build_int_2 (line_number, 0);\n+  TREE_CHAIN (branch_island) = branch_island_list;\n+  branch_island_list = branch_island;\n }\n \n-#define STUB_LABEL_NAME(STUB)     TREE_VALUE (STUB)\n-#define STUB_FUNCTION_NAME(STUB)  TREE_PURPOSE (STUB)\n-#define STUB_LINE_NUMBER(STUB)    TREE_INT_CST_LOW (TREE_TYPE (STUB))\n-\n-/* OUTPUT_COMPILER_STUB outputs the compiler generated stub for\n-   handling procedure calls from the linked list and initializes the\n-   linked list.  */\n-\n-void\n-output_compiler_stub (void)\n-{\n-  char tmp_buf[256];\n-  char label_buf[256];\n-  tree stub;\n+#define BRANCH_ISLAND_LABEL_NAME(BRANCH_ISLAND)     TREE_VALUE (BRANCH_ISLAND)\n+#define BRANCH_ISLAND_FUNCTION_NAME(BRANCH_ISLAND)  TREE_PURPOSE (BRANCH_ISLAND)\n+#define BRANCH_ISLAND_LINE_NUMBER(BRANCH_ISLAND)    \\\n+\t\tTREE_INT_CST_LOW (TREE_TYPE (BRANCH_ISLAND))\n \n-  if (!flag_pic)\n-    for (stub = stub_list; stub; stub = TREE_CHAIN (stub))\n-      {\n-\tfprintf (asm_out_file,\n-\t\t \"%s:\\n\", IDENTIFIER_POINTER(STUB_LABEL_NAME(stub)));\n+/* Generate far-jump branch islands for everything on the\n+   branch_island_list.  Invoked immediately after the last instruction\n+   of the epilogue has been emitted; the branch-islands must be\n+   appended to, and contiguous with, the function body.  Mach-O stubs\n+   are generated in machopic_output_stub().  */\n \n+static void\n+macho_branch_islands (void)\n+{\n+  char tmp_buf[512];\n+  tree branch_island;\n+\n+  for (branch_island = branch_island_list;\n+       branch_island;\n+       branch_island = TREE_CHAIN (branch_island))\n+    {\n+      const char *label =\n+\tIDENTIFIER_POINTER (BRANCH_ISLAND_LABEL_NAME (branch_island));\n+      const char *name  =\n+\tdarwin_strip_name_encoding (\n+\t  IDENTIFIER_POINTER (BRANCH_ISLAND_FUNCTION_NAME (branch_island)));\n+      char name_buf[512];\n+      /* Cheap copy of the details from the Darwin ASM_OUTPUT_LABELREF().  */\n+      if (name[0] == '*' || name[0] == '&')\n+\tstrcpy (name_buf, name+1);\n+      else\n+\t{\n+\t  name_buf[0] = '_';\n+\t  strcpy (name_buf+1, name);\n+\t}\n+      strcpy (tmp_buf, \"\\n\");\n+      strcat (tmp_buf, label);\n #if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\n-\tif (write_symbols == DBX_DEBUG || write_symbols == XCOFF_DEBUG)\n-\t  fprintf (asm_out_file, \"\\t.stabd 68,0,%d\\n\", STUB_LINE_NUMBER(stub));\n+      if (write_symbols == DBX_DEBUG || write_symbols == XCOFF_DEBUG)\n+\tfprintf (asm_out_file, \"\\t.stabd 68,0,%lu\\n\",\n+\t\t BRANCH_ISLAND_LINE_NUMBER(branch_island));\n #endif /* DBX_DEBUGGING_INFO || XCOFF_DEBUGGING_INFO */\n-\n-\tif (IDENTIFIER_POINTER (STUB_FUNCTION_NAME (stub))[0] == '*')\n-\t  strcpy (label_buf,\n-\t\t  IDENTIFIER_POINTER (STUB_FUNCTION_NAME (stub))+1);\n-\telse\n-\t  {\n-\t    label_buf[0] = '_';\n-\t    strcpy (label_buf+1,\n-\t\t    IDENTIFIER_POINTER (STUB_FUNCTION_NAME (stub)));\n-\t  }\n-\n-\tstrcpy (tmp_buf, \"lis r12,hi16(\");\n-\tstrcat (tmp_buf, label_buf);\n-\tstrcat (tmp_buf, \")\\n\\tori r12,r12,lo16(\");\n-\tstrcat (tmp_buf, label_buf);\n-\tstrcat (tmp_buf, \")\\n\\tmtctr r12\\n\\tbctr\");\n-\toutput_asm_insn (tmp_buf, 0);\n-\n+      if (flag_pic)\n+\t{\n+\t  strcat (tmp_buf, \":\\n\\tmflr r0\\n\\tbcl 20,31,\");\n+\t  strcat (tmp_buf, label);\n+\t  strcat (tmp_buf, \"_pic\\n\");\n+\t  strcat (tmp_buf, label);\n+\t  strcat (tmp_buf, \"_pic:\\n\\tmflr r11\\n\");\n+ \n+\t  strcat (tmp_buf, \"\\taddis r11,r11,ha16(\");\n+\t  strcat (tmp_buf, name_buf);\n+\t  strcat (tmp_buf, \" - \");\n+\t  strcat (tmp_buf, label);\n+\t  strcat (tmp_buf, \"_pic)\\n\");\n+ \t\t   \n+\t  strcat (tmp_buf, \"\\tmtlr r0\\n\");\n+  \n+\t  strcat (tmp_buf, \"\\taddi r12,r11,lo16(\");\n+\t  strcat (tmp_buf, name_buf);\n+\t  strcat (tmp_buf, \" - \");\n+\t  strcat (tmp_buf, label);\n+\t  strcat (tmp_buf, \"_pic)\\n\");\n+ \n+\t  strcat (tmp_buf, \"\\tmtctr r12\\n\\tbctr\\n\");\n+\t}\n+      else\n+\t{\n+\t  strcat (tmp_buf, \":\\nlis r12,hi16(\");\n+\t  strcat (tmp_buf, name_buf);\n+\t  strcat (tmp_buf, \")\\n\\tori r12,r12,lo16(\");\n+\t  strcat (tmp_buf, name_buf);\n+\t  strcat (tmp_buf, \")\\n\\tmtctr r12\\n\\tbctr\");\n+\t}\n+      output_asm_insn (tmp_buf, 0);\n #if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\n-\tif (write_symbols == DBX_DEBUG || write_symbols == XCOFF_DEBUG)\n-\t  fprintf(asm_out_file, \"\\t.stabd 68,0,%d\\n\", STUB_LINE_NUMBER (stub));\n+      if (write_symbols == DBX_DEBUG || write_symbols == XCOFF_DEBUG)\n+\tfprintf(asm_out_file, \"\\t.stabd 68,0,%lu\\n\",\n+\t\tBRANCH_ISLAND_LINE_NUMBER (branch_island));\n #endif /* DBX_DEBUGGING_INFO || XCOFF_DEBUGGING_INFO */\n-      }\n+    }\n \n-  stub_list = 0;\n+  branch_island_list = 0;\n }\n \n /* NO_PREVIOUS_DEF checks in the link list whether the function name is\n    already there or not.  */\n \n-int\n+static int\n no_previous_def (tree function_name)\n {\n-  tree stub;\n-  for (stub = stub_list; stub; stub = TREE_CHAIN (stub))\n-    if (function_name == STUB_FUNCTION_NAME (stub))\n+  tree branch_island;\n+  for (branch_island = branch_island_list;\n+       branch_island;\n+       branch_island = TREE_CHAIN (branch_island))\n+    if (function_name == BRANCH_ISLAND_FUNCTION_NAME (branch_island))\n       return 0;\n   return 1;\n }\n \n /* GET_PREV_LABEL gets the label name from the previous definition of\n    the function.  */\n \n-tree\n+static tree\n get_prev_label (tree function_name)\n {\n-  tree stub;\n-  for (stub = stub_list; stub; stub = TREE_CHAIN (stub))\n-    if (function_name == STUB_FUNCTION_NAME (stub))\n-      return STUB_LABEL_NAME (stub);\n+  tree branch_island;\n+  for (branch_island = branch_island_list;\n+       branch_island;\n+       branch_island = TREE_CHAIN (branch_island))\n+    if (function_name == BRANCH_ISLAND_FUNCTION_NAME (branch_island))\n+      return BRANCH_ISLAND_LABEL_NAME (branch_island);\n   return 0;\n }\n \n@@ -14819,13 +14864,14 @@ get_prev_label (tree function_name)\n    CALL_DEST is the routine we are calling.  */\n \n char *\n-output_call (rtx insn, rtx call_dest, int operand_number)\n+output_call (rtx insn, rtx *operands, int dest_operand_number, int cookie_operand_number)\n {\n   static char buf[256];\n-  if (GET_CODE (call_dest) == SYMBOL_REF && TARGET_LONG_BRANCH && !flag_pic)\n+  if (GET_CODE (operands[dest_operand_number]) == SYMBOL_REF\n+      && (INTVAL (operands[cookie_operand_number]) & CALL_LONG))\n     {\n       tree labelname;\n-      tree funname = get_identifier (XSTR (call_dest, 0));\n+      tree funname = get_identifier (XSTR (operands[dest_operand_number], 0));\n       \n       if (no_previous_def (funname))\n \t{\n@@ -14839,23 +14885,25 @@ output_call (rtx insn, rtx call_dest, int operand_number)\n \t  for (; insn && GET_CODE (insn) != NOTE; insn = PREV_INSN (insn));\n \t  if (insn)\n \t    line_number = NOTE_LINE_NUMBER (insn);\n-\t  add_compiler_stub (labelname, funname, line_number);\n+\t  add_compiler_branch_island (labelname, funname, line_number);\n \t}\n       else\n \tlabelname = get_prev_label (funname);\n \n+      /* \"jbsr foo, L42\" is Mach-O for \"Link as 'bl foo' if a 'bl'\n+\t instruction will reach 'foo', otherwise link as 'bl L42'\".\n+\t \"L42\" should be a 'branch island', that will do a far jump to\n+\t 'foo'.  Branch islands are generated in\n+\t macho_branch_islands().  */\n       sprintf (buf, \"jbsr %%z%d,%.246s\",\n-\t       operand_number, IDENTIFIER_POINTER (labelname));\n-      return buf;\n+\t       dest_operand_number, IDENTIFIER_POINTER (labelname));\n     }\n   else\n-    {\n-      sprintf (buf, \"bl %%z%d\", operand_number);\n-      return buf;\n-    }\n+    sprintf (buf, \"bl %%z%d\", dest_operand_number);\n+  return buf;\n }\n \n-#endif /* RS6000_LONG_BRANCH */\n+#endif /* TARGET_MACHO */\n \n /* Generate PIC and indirect symbol stubs.  */\n "}, {"sha": "14a42c9ce599d44cdbba0c485019dd19ffb03dac", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efdba735bef6fc3c86df8e37bdfd17525f32ca8c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efdba735bef6fc3c86df8e37bdfd17525f32ca8c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=efdba735bef6fc3c86df8e37bdfd17525f32ca8c", "patch": "@@ -10273,7 +10273,7 @@\n \n   if (GET_CODE (operands[0]) != SYMBOL_REF\n       || (DEFAULT_ABI == ABI_AIX && !SYMBOL_REF_FUNCTION_P (operands[0]))\n-      || (INTVAL (operands[2]) & CALL_LONG) != 0)\n+      || (DEFAULT_ABI != ABI_DARWIN && (INTVAL (operands[2]) & CALL_LONG) != 0))\n     {\n       if (INTVAL (operands[2]) & CALL_LONG)\n \toperands[0] = rs6000_longcall_ref (operands[0]);\n@@ -10321,7 +10321,7 @@\n \n   if (GET_CODE (operands[1]) != SYMBOL_REF\n       || (DEFAULT_ABI == ABI_AIX && !SYMBOL_REF_FUNCTION_P (operands[1]))\n-      || (INTVAL (operands[3]) & CALL_LONG) != 0)\n+      || (DEFAULT_ABI != ABI_DARWIN && (INTVAL (operands[3]) & CALL_LONG) != 0))\n     {\n       if (INTVAL (operands[3]) & CALL_LONG)\n \toperands[1] = rs6000_longcall_ref (operands[1]);\n@@ -10576,17 +10576,21 @@\n \t (match_operand 1 \"\" \"g,g\"))\n    (use (match_operand:SI 2 \"immediate_operand\" \"O,n\"))\n    (clobber (match_scratch:SI 3 \"=l,l\"))]\n-  \"(DEFAULT_ABI == ABI_V4\n-    || DEFAULT_ABI == ABI_DARWIN)\n-   && (INTVAL (operands[2]) & CALL_LONG) == 0\"\n+  \"(DEFAULT_ABI == ABI_DARWIN\n+   || (DEFAULT_ABI == ABI_V4\n+       && (INTVAL (operands[2]) & CALL_LONG) == 0))\"\n {\n   if (INTVAL (operands[2]) & CALL_V4_SET_FP_ARGS)\n     output_asm_insn (\"crxor 6,6,6\", operands);\n \n   else if (INTVAL (operands[2]) & CALL_V4_CLEAR_FP_ARGS)\n     output_asm_insn (\"creqv 6,6,6\", operands);\n \n+#ifdef TARGET_MACHO\n+  return output_call(insn, operands, 0, 2);\n+#else\n   return (DEFAULT_ABI == ABI_V4 && flag_pic) ? \"bl %z0@plt\" : \"bl %z0\";\n+#endif     \n }\n   [(set_attr \"type\" \"branch,branch\")\n    (set_attr \"length\" \"4,8\")])\n@@ -10617,17 +10621,21 @@\n \t      (match_operand 2 \"\" \"g,g\")))\n    (use (match_operand:SI 3 \"immediate_operand\" \"O,n\"))\n    (clobber (match_scratch:SI 4 \"=l,l\"))]\n-  \"(DEFAULT_ABI == ABI_V4\n-    || DEFAULT_ABI == ABI_DARWIN)\n-   && (INTVAL (operands[3]) & CALL_LONG) == 0\"\n+  \"(DEFAULT_ABI == ABI_DARWIN\n+   || (DEFAULT_ABI == ABI_V4\n+       && (INTVAL (operands[3]) & CALL_LONG) == 0))\"\n {\n   if (INTVAL (operands[3]) & CALL_V4_SET_FP_ARGS)\n     output_asm_insn (\"crxor 6,6,6\", operands);\n \n   else if (INTVAL (operands[3]) & CALL_V4_CLEAR_FP_ARGS)\n     output_asm_insn (\"creqv 6,6,6\", operands);\n \n+#ifdef TARGET_MACHO\n+  return output_call(insn, operands, 1, 3);\n+#else\n   return (DEFAULT_ABI == ABI_V4 && flag_pic) ? \"bl %z1@plt\" : \"bl %z1\";\n+#endif     \n }\n   [(set_attr \"type\" \"branch,branch\")\n    (set_attr \"length\" \"4,8\")])"}, {"sha": "d8e63fb3e302fa72ca489317cd843b2483712ec6", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efdba735bef6fc3c86df8e37bdfd17525f32ca8c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efdba735bef6fc3c86df8e37bdfd17525f32ca8c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=efdba735bef6fc3c86df8e37bdfd17525f32ca8c", "patch": "@@ -7784,6 +7784,10 @@ generate slower code.  As of this writing, the AIX linker can do this,\n as can the GNU linker for PowerPC/64.  It is planned to add this feature\n to the GNU linker for 32-bit PowerPC systems as well.\n \n+On Mach-O (Darwin) systems, this option directs the compiler emit to\n+the glue for every direct call, and the Darwin linker decides whether\n+to use or discard it.\n+\n In the future, we may cause GCC to ignore all longcall specifications\n when the linker is known to generate glue.\n "}, {"sha": "3b13c6236b16139de4aec70c5e8eb808f342e3ca", "filename": "gcc/testsuite/gcc.dg/darwin-abi-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efdba735bef6fc3c86df8e37bdfd17525f32ca8c/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-abi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efdba735bef6fc3c86df8e37bdfd17525f32ca8c/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-abi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-abi-1.c?ref=efdba735bef6fc3c86df8e37bdfd17525f32ca8c", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile { target powerpc*-*-darwin* } } */\n /* { dg-options \"-O\" } */\n-/* { dg-final { scan-assembler \"li r3,12345\\n\\tbl \" } } */\n+/* { dg-final { scan-assembler \"li r3,12345\\n\\t(bl|jbsr) \" } } */\n \n /* Check that zero-size structures don't affect parameter passing.  */\n "}]}