{"sha": "0846336de56119777861e02bf68f92a6af466000", "node_id": "C_kwDOANBUbNoAKDA4NDYzMzZkZTU2MTE5Nzc3ODYxZTAyYmY2OGY5MmE2YWY0NjYwMDA", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-01-20T00:17:40Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-01-20T00:17:40Z"}, "message": "Daily bump.", "tree": {"sha": "a3c095745fd71b4e437c1e60fa5c65f330164c77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3c095745fd71b4e437c1e60fa5c65f330164c77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0846336de56119777861e02bf68f92a6af466000", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0846336de56119777861e02bf68f92a6af466000", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0846336de56119777861e02bf68f92a6af466000", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0846336de56119777861e02bf68f92a6af466000/comments", "author": null, "committer": null, "parents": [{"sha": "86caab6c5d1e26e1c54c3dceacc873d6e27bfc09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86caab6c5d1e26e1c54c3dceacc873d6e27bfc09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86caab6c5d1e26e1c54c3dceacc873d6e27bfc09"}], "stats": {"total": 231, "additions": 230, "deletions": 1}, "files": [{"sha": "772dfbe5bb629581738d48eb4f1c20779f062699", "filename": "contrib/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0846336de56119777861e02bf68f92a6af466000/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0846336de56119777861e02bf68f92a6af466000/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=0846336de56119777861e02bf68f92a6af466000", "patch": "@@ -1,3 +1,12 @@\n+2023-01-19  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\t* gcc_update (files_and_dependencies): Add dependencies for\n+\tgcc/m2/gm2config.h.in, gcc/m2/configure,\n+\tgcc/m2/gm2-libs/config-host, libgm2/Makefile.in,\n+\tlibgm2/aclocal.m4, libgm2/libm2cor/Makefile.in,\n+\tlibgm2/libm2pim/Makefile.in, libgm2/libm2iso/Makefile.in,\n+\tlibgm2/libm2log/Makefile.in and libgm2/libm2min/Makefile.in.\n+\n 2023-01-17  Martin Liska  <mliska@suse.cz>\n \n \t* update-copyright.py: Ignore test_patches.txt."}, {"sha": "707456b6adbe97873e004c32eb4bb71b416f4420", "filename": "gcc/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0846336de56119777861e02bf68f92a6af466000/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0846336de56119777861e02bf68f92a6af466000/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0846336de56119777861e02bf68f92a6af466000", "patch": "@@ -1,3 +1,58 @@\n+2023-01-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/108447\n+\t* value-relation.cc (rr_union_table): Fix VREL_UNDEFINED row order.\n+\t(relation_tests): Add self-tests for relation_{intersect,union}\n+\tcommutativity.\n+\t* selftest.h (relation_tests): Declare.\n+\t* function-tests.cc (test_ranges): Call it.\n+\n+2023-01-19  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/108436\n+\t* config/i386/i386-expand.cc (ix86_expand_builtin): Check\n+\tinvalid third argument to __builtin_ia32_prefetch.\n+\n+2023-01-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/108459\n+\t* omp-expand.cc (expand_omp_for_init_counts): Use fold_build1 rather\n+\tthan fold_unary for NEGATE_EXPR.\n+\n+2023-01-19  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\tPR target/108411\n+\t* config/aarch64/aarch64.cc (aarch64_layout_arg): Improve\n+\tcomment. Move assert about alignment a bit later.\n+\n+2023-01-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/108440\n+\t* tree-ssa-forwprop.cc: Include gimple-range.h.\n+\t(simplify_rotate): For the forms with T2 wider than T and shift counts of\n+\tY and B - Y add & (B - 1) masking for the rotate count if Y could be equal\n+\tto B.  For the forms with T2 wider than T and shift counts of\n+\tY and (-Y) & (B - 1), don't punt if range could be [B, B2], but only if\n+\trange doesn't guarantee Y < B or Y = N * B.  If range doesn't guarantee\n+\tY < B, also add & (B - 1) masking for the rotate count.  Use lazily created\n+\tpass specific ranger instead of get_global_range_query.\n+\t(pass_forwprop::execute): Disable that ranger at the end of pass if it has\n+\tbeen created.\n+\n+2023-01-19  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_simd_vec_set<mode>): Use\n+\texact_log2 (INTVAL (operands[2])) >= 0 as condition for gating\n+\tthe pattern.\n+\t(aarch64_simd_vec_copy_lane<mode>): Likewise.\n+\t(aarch64_simd_vec_copy_lane_<vswap_width_name><mode>): Likewise.\n+\n+2023-01-19  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR debug/106746\n+\t* sched-deps.cc (sched_analyze_2): Skip cselib address lookup\n+\twithin debug insns.\n+\n 2023-01-18  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/107944"}, {"sha": "c8519a7a377a256b97bb973691a0827ab00c955d", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0846336de56119777861e02bf68f92a6af466000/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0846336de56119777861e02bf68f92a6af466000/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=0846336de56119777861e02bf68f92a6af466000", "patch": "@@ -1 +1 @@\n-20230119\n+20230120"}, {"sha": "c489ee876906251913ca5bd63a71961fd1bc5d1d", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0846336de56119777861e02bf68f92a6af466000/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0846336de56119777861e02bf68f92a6af466000/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=0846336de56119777861e02bf68f92a6af466000", "patch": "@@ -1,3 +1,45 @@\n+2023-01-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/108455\n+\t* analyzer.h (class checker_event): New forward decl.\n+\t(class state_change_event): Indent.\n+\t(class warning_event): New forward decl.\n+\t* checker-event.cc (state_change_event::state_change_event): Add\n+\t\"enode\" param.\n+\t(warning_event::get_desc): Update for new param of\n+\tevdesc::final_event ctor.\n+\t* checker-event.h (state_change_event::state_change_event): Add\n+\t\"enode\" param.\n+\t(state_change_event::get_exploded_node): New accessor.\n+\t(state_change_event::m_enode): New field.\n+\t(warning_event::warning_event): New \"enode\" param.\n+\t(warning_event::get_exploded_node): New accessor.\n+\t(warning_event::m_enode): New field.\n+\t* diagnostic-manager.cc\n+\t(state_change_event_creator::on_global_state_change): Pass\n+\tsrc_node to state_change_event ctor.\n+\t(state_change_event_creator::on_state_change): Likewise.\n+\t(null_assignment_sm_context::set_next_state): Pass NULL for\n+\tnew param of state_change_event ctor.\n+\t* infinite-recursion.cc\n+\t(infinite_recursion_diagnostic::add_final_event): Update for new\n+\tparam of warning_event ctor.\n+\t* pending-diagnostic.cc (pending_diagnostic::add_final_event):\n+\tPass enode to warning_event ctor.\n+\t* pending-diagnostic.h (evdesc::final_event): Add reference to\n+\twarning_event.\n+\t* sm-malloc.cc: Include \"analyzer/checker-event.h\" and\n+\t\"analyzer/exploded-graph.h\".\n+\t(deref_before_check::deref_before_check): Initialize new fields.\n+\t(deref_before_check::emit): Reject warnings in which we were\n+\tunable to determine the enodes of the dereference and the check.\n+\tReject warnings interprocedural warnings. Reject warnings in which\n+\tthe dereference doesn't dominate the check.\n+\t(deref_before_check::describe_state_change): Set m_deref_enode.\n+\t(deref_before_check::describe_final_event): Set m_check_enode.\n+\t(deref_before_check::m_deref_enode): New field.\n+\t(deref_before_check::m_check_enode): New field.\n+\n 2023-01-13  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/105273"}, {"sha": "e377041519f9464d23153fe266852887a31c25d3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0846336de56119777861e02bf68f92a6af466000/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0846336de56119777861e02bf68f92a6af466000/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0846336de56119777861e02bf68f92a6af466000", "patch": "@@ -1,3 +1,18 @@\n+2023-01-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/108437\n+\t* cp-tree.h (keep_unused_object_arg): Declare.\n+\t* call.cc (keep_unused_object_arg): No longer static.\n+\t* tree.cc (build_min_non_dep_op_overload): Handle ARRAY_REF\n+\twith overload being static member function.\n+\n+2023-01-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/53932\n+\t* cp-gimplify.cc (cp_fold_r): During cp_fully_fold_init replace\n+\tDECL_ANON_UNION_VAR_P VAR_DECLs with their corresponding\n+\tDECL_VALUE_EXPR.\n+\n 2023-01-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/105593"}, {"sha": "e30b9d524dca55de6aeb2ac3f9a6e49643014e89", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0846336de56119777861e02bf68f92a6af466000/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0846336de56119777861e02bf68f92a6af466000/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0846336de56119777861e02bf68f92a6af466000", "patch": "@@ -1,3 +1,10 @@\n+2023-01-19  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/108434\n+\t* expr.cc (class_allocatable): Prevent NULL pointer dereference\n+\tor invalid read.\n+\t(class_pointer): Likewise.\n+\n 2023-01-17  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/108421"}, {"sha": "c26a59fb048164a286031ee26e13b150c2479cd2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0846336de56119777861e02bf68f92a6af466000/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0846336de56119777861e02bf68f92a6af466000/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0846336de56119777861e02bf68f92a6af466000", "patch": "@@ -1,3 +1,80 @@\n+2023-01-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/108437\n+\t* g++.dg/cpp23/subscript12.C: New test.\n+\t* g++.dg/cpp23/subscript13.C: New test.\n+\n+2023-01-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/53932\n+\t* g++.dg/init/pr53932.C: New test.\n+\n+2023-01-19  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* gcc.target/i386/pr108436.c: New test.\n+\n+2023-01-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/108455\n+\t* gcc.dg/analyzer/deref-before-check-1.c: Add test coverage\n+\tinvolving dominance.\n+\t* gcc.dg/analyzer/deref-before-check-pr108455-1.c: New test.\n+\t* gcc.dg/analyzer/deref-before-check-pr108455-git-pack-revindex.c:\n+\tNew test.\n+\n+2023-01-19  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/108434\n+\t* gfortran.dg/pr108434.f90: New test.\n+\n+2023-01-19  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* gm2/complex/run/pass/complex-run-pass.exp: Remove gm2_link_lib.\n+\t* gm2/iso/run/pass/iso-run-pass.exp: Likewise.\n+\t* gm2/link/externalscaffold/pass/link-externalscaffold-pass.exp:\n+\t* gm2/pimlib/logitech/run/pass/pimlib-logitech-run-pass.exp: Likewise.\n+\t* gm2/pimlib/run/pass/pimlib-run-pass.exp: Likewise.\n+\t* gm2/projects/iso/run/pass/halma/projects-iso-run-pass-halma.exp:\n+\tLikewise.\n+\t* gm2/projects/iso/run/pass/hello/projects-iso-run-pass-hello.exp:\n+\tLikewise.\n+\t* gm2/projects/pim/run/pass/hello/projects-pim-run-pass-hello.exp:\n+\tLikewise.\n+\t* gm2/sets/run/pass/sets-run-pass.exp: Likewise.\n+\t* gm2/switches/none/run/pass/gm2-none.exp: Likewise.\n+\t* gm2/switches/pic/run/pass/switches-pic-run-pass.exp: Likewise.\n+\t* gm2/projects/pim/run/pass/random/projects-pim-run-pass-random.exp:\n+\tLikewise, and also ensure that the -g option is appended to avoid it\n+\tbeing taken as a path.\n+\t* lib/gm2.exp: Ensure for each gm2_init_xxxx function that the set of\n+\tlibraries added matches the set of -I and -L options.\n+\n+2023-01-19  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\tPR target/108411\n+\t* g++.target/aarch64/bitfield-abi-warning-align16-O2-extra.C: Add\n+\t-fno-stack-protector.\n+\t* g++.target/aarch64/bitfield-abi-warning-align16-O2.C: Likewise.\n+\t* g++.target/aarch64/bitfield-abi-warning-align32-O2-extra.C: Likewise.\n+\t* g++.target/aarch64/bitfield-abi-warning-align32-O2.C: Likewise.\n+\t* g++.target/aarch64/bitfield-abi-warning-align8-O2.C: Likewise.\n+\t* gcc.target/aarch64/bitfield-abi-warning-align16-O2-extra.c: Likewise.\n+\t* gcc.target/aarch64/bitfield-abi-warning-align16-O2.c: Likewise.\n+\t* gcc.target/aarch64/bitfield-abi-warning-align32-O2-extra.c: Likewise.\n+\t* gcc.target/aarch64/bitfield-abi-warning-align32-O2.c: Likewise.\n+\t* gcc.target/aarch64/bitfield-abi-warning-align8-O2.c: Likewise.\n+\n+2023-01-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/108440\n+\t* c-c++-common/rotate-10.c: New test.\n+\t* c-c++-common/rotate-11.c: New test.\n+\n+2023-01-19  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR debug/106746\n+\t* gcc.target/i386/pr106746.c: New.\n+\n 2023-01-18  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/108424"}, {"sha": "33576ddd5e393760a162bb082c6e2775d753e572", "filename": "libgm2/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0846336de56119777861e02bf68f92a6af466000/libgm2%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0846336de56119777861e02bf68f92a6af466000/libgm2%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgm2%2FChangeLog?ref=0846336de56119777861e02bf68f92a6af466000", "patch": "@@ -1,3 +1,22 @@\n+2023-01-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR modula2/108144\n+\t* configure.ac: Add GCC_BASE_VER.\n+\t* configure: Re-generate.\n+\t* Makefile.am: Use @get_gcc_base_ver@ for gcc_version.\n+\t* libm2cor/Makefile.am: Likewise.  Use gcc_version instead\n+\tof version.\n+\t* libm2iso/Makefile.am: Likewise.\n+\t* libm2log/Makefile.am: Likewise.\n+\t* libm2min/Makefile.am: Likewise.\n+\t* libm2pim/Makefile.am: Likewise.\n+\t* Makefile.in: Re-generate.\n+\t* libm2cor/Makefile.in: Likewise.\n+\t* libm2iso/Makefile.in: Likewise.\n+\t* libm2log/Makefile.in: Likewise.\n+\t* libm2min/Makefile.in: Likewise.\n+\t* libm2pim/Makefile.in: Likewise.\n+\n 2023-01-17  Gaius Mulley  <gaiusmod2@gmail.com>\n \n \t* libm2iso/RTco.cc (_M2_RTco_fini): Call M2RTS_HaltC."}, {"sha": "b0eb10ad361bd754451984ef33a70457cd3d7731", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0846336de56119777861e02bf68f92a6af466000/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0846336de56119777861e02bf68f92a6af466000/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=0846336de56119777861e02bf68f92a6af466000", "patch": "@@ -1,3 +1,8 @@\n+2023-01-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/108459\n+\t* testsuite/libgomp.c/pr108459.c: New test.\n+\n 2023-01-17  Martin Liska  <mliska@suse.cz>\n \n \t* Makefile.in: Regenerate."}]}