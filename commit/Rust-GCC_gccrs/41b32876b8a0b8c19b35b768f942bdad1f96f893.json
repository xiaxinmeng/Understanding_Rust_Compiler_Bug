{"sha": "41b32876b8a0b8c19b35b768f942bdad1f96f893", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFiMzI4NzZiOGEwYjhjMTliMzViNzY4Zjk0MmJkYWQxZjk2Zjg5Mw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-11-13T15:07:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-11-13T15:07:53Z"}, "message": "re PR tree-optimization/87931 (ICE in vectorizable_reduction, at tree-vect-loop.c:6193 since r265876)\n\n2018-11-13  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/87931\n\t* tree-vect-loop.c (vect_is_simple_reduction): Restrict\n\tnested cycles we support to latch computations vectorizable_reduction\n\thandles.\n\n\t* gcc.dg/graphite/pr87931.c: New testcase.\n\nFrom-SVN: r266075", "tree": {"sha": "95a01f415a6fb153248e65e4d99e7d4a42dfff37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95a01f415a6fb153248e65e4d99e7d4a42dfff37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41b32876b8a0b8c19b35b768f942bdad1f96f893", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41b32876b8a0b8c19b35b768f942bdad1f96f893", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41b32876b8a0b8c19b35b768f942bdad1f96f893", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41b32876b8a0b8c19b35b768f942bdad1f96f893/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "160576e1ac9bbee90af9e09e1507f64d58473358", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/160576e1ac9bbee90af9e09e1507f64d58473358", "html_url": "https://github.com/Rust-GCC/gccrs/commit/160576e1ac9bbee90af9e09e1507f64d58473358"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "f9b23f924ae8184d8b84a6925ead823ae933843e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b32876b8a0b8c19b35b768f942bdad1f96f893/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b32876b8a0b8c19b35b768f942bdad1f96f893/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41b32876b8a0b8c19b35b768f942bdad1f96f893", "patch": "@@ -1,3 +1,10 @@\n+2018-11-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/87931\n+\t* tree-vect-loop.c (vect_is_simple_reduction): Restrict\n+\tnested cycles we support to latch computations vectorizable_reduction\n+\thandles.\n+\n 2018-11-13  Martin Liska  <mliska@suse.cz>\n \n \tPR tree-optimization/87885"}, {"sha": "e61f978798ec64be3ed6a56e36df09f29fe3ca33", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b32876b8a0b8c19b35b768f942bdad1f96f893/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b32876b8a0b8c19b35b768f942bdad1f96f893/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=41b32876b8a0b8c19b35b768f942bdad1f96f893", "patch": "@@ -1,3 +1,8 @@\n+2018-11-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/87931\n+\t* gcc.dg/graphite/pr87931.c: New testcase.\n+\n 2018-11-13  Martin Liska  <mliska@suse.cz>\n \n \tPR sanitizer/87930"}, {"sha": "9ef8610ffa67794b7b4652cfbc1b48413e4a5b86", "filename": "gcc/testsuite/gcc.dg/graphite/pr87931.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b32876b8a0b8c19b35b768f942bdad1f96f893/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr87931.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b32876b8a0b8c19b35b768f942bdad1f96f893/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr87931.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr87931.c?ref=41b32876b8a0b8c19b35b768f942bdad1f96f893", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fno-tree-copy-prop -fgraphite-identity\" } */\n+\n+#define N 40\n+#define M 128\n+float in[N+M];\n+float coeff[M];\n+float fir_out[N];\n+\n+void fir ()\n+{\n+  int i,j,k;\n+  float diff;\n+\n+  for (i = 0; i < N; i++) {\n+    diff = 0;\n+    for (j = 0; j < M; j++) {\n+      diff += in[j+i]*coeff[j];\n+    }\n+    fir_out[i] = diff;\n+  }\n+}"}, {"sha": "1a39b3bb4e99585766b8f16fd0fefe8df83a5598", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41b32876b8a0b8c19b35b768f942bdad1f96f893/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41b32876b8a0b8c19b35b768f942bdad1f96f893/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=41b32876b8a0b8c19b35b768f942bdad1f96f893", "patch": "@@ -2976,6 +2976,22 @@ vect_is_simple_reduction (loop_vec_info loop_info, stmt_vec_info phi_info,\n \n   if (nested_in_vect_loop && !check_reduction)\n     {\n+      /* FIXME: Even for non-reductions code generation is funneled\n+\t through vectorizable_reduction for the stmt defining the\n+\t PHI latch value.  So we have to artificially restrict ourselves\n+\t for the supported operations.  */\n+      switch (get_gimple_rhs_class (code))\n+\t{\n+\tcase GIMPLE_BINARY_RHS:\n+\tcase GIMPLE_TERNARY_RHS:\n+\t  break;\n+\tdefault:\n+\t  /* Not supported by vectorizable_reduction.  */\n+\t  if (dump_enabled_p ())\n+\t    report_vect_op (MSG_MISSED_OPTIMIZATION, def_stmt,\n+\t\t\t    \"nested cycle: not handled operation: \");\n+\t  return NULL;\n+\t}\n       if (dump_enabled_p ())\n \treport_vect_op (MSG_NOTE, def_stmt, \"detected nested cycle: \");\n       return def_stmt_info;"}]}