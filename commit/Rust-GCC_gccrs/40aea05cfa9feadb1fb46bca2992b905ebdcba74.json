{"sha": "40aea05cfa9feadb1fb46bca2992b905ebdcba74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBhZWEwNWNmYTlmZWFkYjFmYjQ2YmNhMjk5MmI5MDVlYmRjYmE3NA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-10-28T20:52:42Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-10-28T20:52:42Z"}, "message": "varasm.c (function_section): If DECL is NULL_TREE, don't try to do anything else.\n\n\t* varasm.c (function_section): If DECL is NULL_TREE, don't try\n\tto do anything else.  Do not call get_insns if cfun or\n\tcfun->emit are NULL.\n\nFrom-SVN: r89777", "tree": {"sha": "34a3bffdf54aa9215852fd7c053771fd36167a5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34a3bffdf54aa9215852fd7c053771fd36167a5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40aea05cfa9feadb1fb46bca2992b905ebdcba74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40aea05cfa9feadb1fb46bca2992b905ebdcba74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40aea05cfa9feadb1fb46bca2992b905ebdcba74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40aea05cfa9feadb1fb46bca2992b905ebdcba74/comments", "author": null, "committer": null, "parents": [{"sha": "6571df13b4c1b52d50a7e297db59ec698c2220ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6571df13b4c1b52d50a7e297db59ec698c2220ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6571df13b4c1b52d50a7e297db59ec698c2220ee"}], "stats": {"total": 56, "additions": 35, "deletions": 21}, "files": [{"sha": "a0900041385f1549ae119f7af010a560efb994b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40aea05cfa9feadb1fb46bca2992b905ebdcba74/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40aea05cfa9feadb1fb46bca2992b905ebdcba74/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40aea05cfa9feadb1fb46bca2992b905ebdcba74", "patch": "@@ -1,6 +1,12 @@\n+2004-10-28  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* varasm.c (function_section): If DECL is NULL_TREE, don't try\n+\tto do anything else.  Do not call get_insns if cfun or\n+\tcfun->emit are NULL.\n+\n 2004-10-28  Adam Nemet  <anemet@lnxw.com>\n \n-\tPR middle-end/18160  \n+\tPR middle-end/18160\n \t* c-typeck.c (c_mark_addressable): Issue error if address of a\n \tregister variable is taken.  Use \"%qD\" to print DECL_NAME.\n \n@@ -206,9 +212,9 @@\n \t<GOTO_EXPR>: Don't let an explicit GOTO_EXPR slip through.\n \n 2004-10-27  Daniel Berlin <dberlin@dberlin.org>\n-\t\n+\n \tFix PR tree-optimization/17133\n-\t\n+\n \t* tree-cfg.c (rewrite_to_new_ssa_names_bb): Also rewrite must\n \tdef kill operand.\n \n@@ -236,13 +242,13 @@\n \n \t* tree-pass.h (TODO_fix_def_def_chains): New todo flag.\n \n-\t* tree-optimize.c (execute_todo): Handle TODO_fix_def_def_chains.\t\n+\t* tree-optimize.c (execute_todo): Handle TODO_fix_def_def_chains.\n \n \t* tree-pretty-print.c (dump_vops): Print out MUST_DEF's so that\n \tthey include the rhs now.\n \n \t* tree-ssa-ccp.c (visit_assignment): V_MUST_DEF_OP became\n-\tV_MUST_DEF_RESULT. \n+\tV_MUST_DEF_RESULT.\n \n \t* tree-ssa-dce.c (mark_operand_necessary): Add phionly argument.\n \tUpdate callers.\n@@ -265,17 +271,17 @@\n \tas setting the use portion as well.\n \t(copy_virtual_operands): Copy the kill operand as well.\n \t(create_ssa_artficial_load_stmt): V_MUST_DEF_OP became\n-\tV_MUST_DEF_RESULT. \n+\tV_MUST_DEF_RESULT.\n \n \t* tree-ssa-operands.h (v_may_def_operand_type): Renamed to\n-\tv_def_use_operand_type. \n+\tv_def_use_operand_type.\n \t(v_must_def_optype_d): Use v_def_use_operand_type.\n \t(V_MUST_DEF_OP_*): Renamed to V_MUST_DEF_RESULT_*\n \t(V_MUST_DEF_KILL_*): New macros.\n \t(struct ssa_operand_iterator_d): Add num_v_mustu and v_mustu_i\n \tmembers.\n \tRename existing must_i and num_v_must members to mustd_i and\n-\tnum_v_mustd. \n+\tnum_v_mustd.\n \t(SSA_OP_VMUSTDEFKILL): New flag.\n \t(SSA_OP_VIRTUAL_KILLS): New flag.\n \t(SSA_OP_ALL_OPERANDS): Add in SSA_OP_ALL_KILLS."}, {"sha": "bff916b55450c2eff840ec2308c0c766de57f61b", "filename": "gcc/varasm.c", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40aea05cfa9feadb1fb46bca2992b905ebdcba74/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40aea05cfa9feadb1fb46bca2992b905ebdcba74/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=40aea05cfa9feadb1fb46bca2992b905ebdcba74", "patch": "@@ -563,26 +563,34 @@ asm_output_aligned_bss (FILE *file, tree decl ATTRIBUTE_UNUSED,\n \n /* Switch to the section for function DECL.\n \n-   If DECL is NULL_TREE, switch to the text section.\n-   ??? It's not clear that we will ever be passed NULL_TREE, but it's\n-   safer to handle it.  */\n+   If DECL is NULL_TREE, switch to the text section.  We can be passed\n+   NULL_TREE under some circumstances by dbxout.c at least.  */\n \n void\n function_section (tree decl)\n {\n+  if (decl == NULL_TREE)\n+    text_section ();\n+  else\n+    {\n+      /* ??? Typical use of this function maybe shouldn't be looking\n+\t for unlikely blocks at all - in the event that an entire\n+\t function is going into the unlikely-execute section, that\n+\t should be reflected in its DECL_SECTION_NAME.  */\n+      rtx insns = cfun && cfun->emit ? get_insns () : 0;\n+      bool unlikely = insns && scan_ahead_for_unlikely_executed_note (insns);\n+\n #ifdef USE_SELECT_SECTION_FOR_FUNCTIONS\n-  bool unlikely = scan_ahead_for_unlikely_executed_note (get_insns());\n-  \n-  targetm.asm_out.select_section (decl, unlikely, DECL_ALIGN (decl));\n+      targetm.asm_out.select_section (decl, unlikely, DECL_ALIGN (decl));\n #else\n-  if (scan_ahead_for_unlikely_executed_note (get_insns()))\n-    unlikely_text_section ();\n-  else if (decl != NULL_TREE\n-\t   && DECL_SECTION_NAME (decl) != NULL_TREE)\n-    named_section (decl, (char *) 0, 0);\n-  else\n-    text_section ();\n+      if (unlikely)\n+\tunlikely_text_section ();\n+      else if (DECL_SECTION_NAME (decl))\n+\tnamed_section (decl, 0, 0);\n+      else\n+\ttext_section ();\n #endif\n+    }\n }\n \n /* Switch to read-only data section associated with function DECL.  */"}]}