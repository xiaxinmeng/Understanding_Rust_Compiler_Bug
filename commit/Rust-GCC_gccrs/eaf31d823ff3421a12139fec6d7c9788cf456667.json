{"sha": "eaf31d823ff3421a12139fec6d7c9788cf456667", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFmMzFkODIzZmYzNDIxYTEyMTM5ZmVjNmQ3Yzk3ODhjZjQ1NjY2Nw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2011-01-07T16:19:29Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-01-07T16:19:29Z"}, "message": "re PR fortran/41580 ([OOP] SAME_TYPE_AS and EXTENDS_TYPE_OF - add compile-time simplifcation)\n\n2011-01-07  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/41580\n        * class.c (gfc_build_class_symbol): Mark __vtab as attr.vtab.\n        * intrinsic.c (add_functions): Use simplify functions for\n        EXTENDS_TYPE_OF and SAME_TYPE_AS.\n        * intrinsic.h (gfc_simplify_extends_type_of,\n        gfc_simplify_same_type_as): New prototypes.\n        * simplify.c (is_last_ref_vtab, gfc_simplify_extends_type_of,\n        gfc_simplify_same_type_as): New functions.\n\n2011-01-07  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/41580\n        * gfortran.dg/extends_type_of_3.f90: New.\n\nFrom-SVN: r168579", "tree": {"sha": "85c2c6458a7dacec5f59009fd496c87e16d7732e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85c2c6458a7dacec5f59009fd496c87e16d7732e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eaf31d823ff3421a12139fec6d7c9788cf456667", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaf31d823ff3421a12139fec6d7c9788cf456667", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaf31d823ff3421a12139fec6d7c9788cf456667", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaf31d823ff3421a12139fec6d7c9788cf456667/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "138d831e9bec104b57e9d063f39ae000021c4360", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/138d831e9bec104b57e9d063f39ae000021c4360", "html_url": "https://github.com/Rust-GCC/gccrs/commit/138d831e9bec104b57e9d063f39ae000021c4360"}], "stats": {"total": 227, "additions": 222, "deletions": 5}, "files": [{"sha": "57b071007098d856a92ea4388d7912f20a19dcad", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf31d823ff3421a12139fec6d7c9788cf456667/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf31d823ff3421a12139fec6d7c9788cf456667/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=eaf31d823ff3421a12139fec6d7c9788cf456667", "patch": "@@ -1,3 +1,14 @@\n+2011-01-07  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/41580\n+\t* class.c (gfc_build_class_symbol): Mark __vtab as attr.vtab.\n+\t* intrinsic.c (add_functions): Use simplify functions for\n+\tEXTENDS_TYPE_OF and SAME_TYPE_AS.\n+\t* intrinsic.h (gfc_simplify_extends_type_of,\n+\tgfc_simplify_same_type_as): New prototypes.\n+\t* simplify.c (is_last_ref_vtab, gfc_simplify_extends_type_of,\n+\tgfc_simplify_same_type_as): New functions.\n+\n 2011-01-07  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/47189"}, {"sha": "9458ca948f167cbf195f672b03b532f2a8ac3f7f", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf31d823ff3421a12139fec6d7c9788cf456667/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf31d823ff3421a12139fec6d7c9788cf456667/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=eaf31d823ff3421a12139fec6d7c9788cf456667", "patch": "@@ -1,7 +1,7 @@\n /* Build up a list of intrinsic subroutines and functions for the\n    name-resolution stage.\n    Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n-   2009, 2010\n+   2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Andy Vaught & Katherine Holcomb\n \n@@ -1663,7 +1663,8 @@ add_functions (void)\n \n   add_sym_2 (\"extends_type_of\", GFC_ISYM_EXTENDS_TYPE_OF, CLASS_INQUIRY,\n \t     ACTUAL_NO, BT_LOGICAL, dl, GFC_STD_F2003,\n-\t     gfc_check_same_type_as, NULL, gfc_resolve_extends_type_of,\n+\t     gfc_check_same_type_as, gfc_simplify_extends_type_of,\n+\t     gfc_resolve_extends_type_of,\n \t     a, BT_UNKNOWN, 0, REQUIRED,\n \t     mo, BT_UNKNOWN, 0, REQUIRED);\n \n@@ -2481,7 +2482,7 @@ add_functions (void)\n \n   add_sym_2 (\"same_type_as\", GFC_ISYM_SAME_TYPE_AS, CLASS_INQUIRY, ACTUAL_NO,\n \t     BT_LOGICAL, dl, GFC_STD_F2003,\n-\t     gfc_check_same_type_as, NULL, NULL,\n+\t     gfc_check_same_type_as, gfc_simplify_same_type_as, NULL,\n \t     a, BT_UNKNOWN, 0, REQUIRED,\n \t     b, BT_UNKNOWN, 0, REQUIRED);\n "}, {"sha": "540cc8ebbf7ffff2a1f0c19e80f741d0c09e23f2", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf31d823ff3421a12139fec6d7c9788cf456667/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf31d823ff3421a12139fec6d7c9788cf456667/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=eaf31d823ff3421a12139fec6d7c9788cf456667", "patch": "@@ -1,7 +1,7 @@\n /* Header file for intrinsics check, resolve and simplify function\n    prototypes.\n    Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n-   2010 Free Software Foundation, Inc.\n+   2010, 2011 Free Software Foundation, Inc.\n    Contributed by Andy Vaught & Katherine Holcomb\n \n This file is part of GCC.\n@@ -267,6 +267,7 @@ gfc_expr *gfc_simplify_erfc (gfc_expr *);\n gfc_expr *gfc_simplify_erfc_scaled (gfc_expr *);\n gfc_expr *gfc_simplify_exp (gfc_expr *);\n gfc_expr *gfc_simplify_exponent (gfc_expr *);\n+gfc_expr *gfc_simplify_extends_type_of (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_float (gfc_expr *);\n gfc_expr *gfc_simplify_floor (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_fraction (gfc_expr *);\n@@ -351,6 +352,7 @@ gfc_expr *gfc_simplify_reshape (gfc_expr *, gfc_expr *, gfc_expr *,\n \t\t\t\tgfc_expr *);\n gfc_expr *gfc_simplify_rrspacing (gfc_expr *);\n gfc_expr *gfc_simplify_rshift (gfc_expr *, gfc_expr *);\n+gfc_expr *gfc_simplify_same_type_as (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_scale (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_scan (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_selected_char_kind (gfc_expr *);"}, {"sha": "3beac15177cb9a5f70691ebe70943155ccc41804", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 88, "deletions": 1, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf31d823ff3421a12139fec6d7c9788cf456667/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf31d823ff3421a12139fec6d7c9788cf456667/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=eaf31d823ff3421a12139fec6d7c9788cf456667", "patch": "@@ -1,6 +1,6 @@\n /* Simplify intrinsic functions at compile-time.\n    Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n-   2010 Free Software Foundation, Inc.\n+   2010, 2011 Free Software Foundation, Inc.\n    Contributed by Andy Vaught & Katherine Holcomb\n \n This file is part of GCC.\n@@ -2202,6 +2202,93 @@ gfc_simplify_float (gfc_expr *a)\n }\n \n \n+static bool\n+is_last_ref_vtab (gfc_expr *e)\n+{\n+  gfc_ref *ref;\n+  gfc_component *comp = NULL;\n+\n+  if (e->expr_type != EXPR_VARIABLE)\n+    return false;\n+\n+  for (ref = e->ref; ref; ref = ref->next)\n+    if (ref->type == REF_COMPONENT)\n+      comp = ref->u.c.component;\n+\n+  if (!e->ref || !comp)\n+    return e->symtree->n.sym->attr.vtab;\n+\n+  if (comp->name[0] == '_' && strcmp (comp->name, \"_vptr\") == 0)\n+    return true;\n+\n+  return false;\n+}\n+\n+\n+gfc_expr *\n+gfc_simplify_extends_type_of (gfc_expr *a, gfc_expr *mold)\n+{\n+  /* Avoid simplification of resolved symbols.  */\n+  if (is_last_ref_vtab (a) || is_last_ref_vtab (mold))\n+    return NULL;\n+\n+  if (a->ts.type == BT_DERIVED && mold->ts.type == BT_DERIVED)\n+    return gfc_get_logical_expr (gfc_default_logical_kind, &a->where,\n+\t\t\t\t gfc_type_is_extension_of (mold->ts.u.derived,\n+\t\t\t\t\t\t\t   a->ts.u.derived));\n+  /* Return .false. if the dynamic type can never be the same.  */\n+  if ((a->ts.type == BT_CLASS && mold->ts.type == BT_CLASS\n+       && !gfc_type_is_extension_of\n+\t\t\t(mold->ts.u.derived->components->ts.u.derived,\n+\t\t\t a->ts.u.derived->components->ts.u.derived)\n+       && !gfc_type_is_extension_of\n+\t\t\t(a->ts.u.derived->components->ts.u.derived,\n+\t\t\t mold->ts.u.derived->components->ts.u.derived))\n+      || (a->ts.type == BT_DERIVED && mold->ts.type == BT_CLASS\n+\t  && !gfc_type_is_extension_of\n+\t\t\t(a->ts.u.derived,\n+\t\t\t mold->ts.u.derived->components->ts.u.derived)\n+\t  && !gfc_type_is_extension_of\n+\t\t\t(mold->ts.u.derived->components->ts.u.derived,\n+\t\t\t a->ts.u.derived))\n+      || (a->ts.type == BT_CLASS && mold->ts.type == BT_DERIVED\n+\t  && !gfc_type_is_extension_of\n+\t\t\t(mold->ts.u.derived,\n+\t\t\t a->ts.u.derived->components->ts.u.derived)))\n+    return gfc_get_logical_expr (gfc_default_logical_kind, &a->where, false);\n+\n+  if (mold->ts.type == BT_DERIVED\n+      && gfc_type_is_extension_of (mold->ts.u.derived,\n+\t\t\t\t   a->ts.u.derived->components->ts.u.derived))\n+    return gfc_get_logical_expr (gfc_default_logical_kind, &a->where, true);\n+\n+  return NULL;\n+}\n+\n+\n+gfc_expr *\n+gfc_simplify_same_type_as (gfc_expr *a, gfc_expr *b)\n+{\n+  /* Avoid simplification of resolved symbols.  */\n+  if (is_last_ref_vtab (a) || is_last_ref_vtab (b))\n+    return NULL;\n+\n+  /* Return .false. if the dynamic type can never be the\n+     same.  */\n+  if ((a->ts.type == BT_CLASS || b->ts.type == BT_CLASS)\n+      && !gfc_type_compatible (&a->ts, &b->ts)\n+      && !gfc_type_compatible (&b->ts, &a->ts))\n+    return gfc_get_logical_expr (gfc_default_logical_kind, &a->where, false);\n+\n+  if (a->ts.type != BT_DERIVED || b->ts.type != BT_DERIVED)\n+     return NULL;\n+\n+  return gfc_get_logical_expr (gfc_default_logical_kind, &a->where,\n+\t\t\t       gfc_compare_derived_types (a->ts.u.derived,\n+\t\t\t\t\t\t\t  b->ts.u.derived));\n+}\n+\n+\n gfc_expr *\n gfc_simplify_floor (gfc_expr *e, gfc_expr *k)\n {"}, {"sha": "8ffb04983c42db07c4a162c7e3e29591acc43306", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf31d823ff3421a12139fec6d7c9788cf456667/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf31d823ff3421a12139fec6d7c9788cf456667/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eaf31d823ff3421a12139fec6d7c9788cf456667", "patch": "@@ -1,3 +1,8 @@\n+2011-01-07  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/41580\n+\t* gfortran.dg/extends_type_of_3.f90: New.\n+\n 2011-01-07  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* g++.dg/ext/dllexport-MI1.C: Adjust test."}, {"sha": "346542fe5c3649121909ee9fc32819f429ad2705", "filename": "gcc/testsuite/gfortran.dg/extends_type_of_3.f90", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaf31d823ff3421a12139fec6d7c9788cf456667/gcc%2Ftestsuite%2Fgfortran.dg%2Fextends_type_of_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaf31d823ff3421a12139fec6d7c9788cf456667/gcc%2Ftestsuite%2Fgfortran.dg%2Fextends_type_of_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fextends_type_of_3.f90?ref=eaf31d823ff3421a12139fec6d7c9788cf456667", "patch": "@@ -0,0 +1,111 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! PR fortran/41580\n+!\n+! Compile-time simplification of SAME_TYPE_AS\n+! and EXTENDS_TYPE_OF.\n+!\n+\n+implicit none\n+type t1\n+  integer :: a\n+end type t1\n+type, extends(t1):: t11\n+  integer :: b\n+end type t11\n+type, extends(t11):: t111\n+  integer :: c\n+end type t111\n+type t2\n+  integer :: a\n+end type t2\n+\n+type(t1) a1\n+type(t11) a11\n+type(t2) a2\n+class(t1), allocatable :: b1\n+class(t11), allocatable :: b11\n+class(t2), allocatable :: b2\n+\n+logical, parameter :: p1 = same_type_as(a1,a2)  ! F\n+logical, parameter :: p2 = same_type_as(a2,a1)  ! F\n+logical, parameter :: p3 = same_type_as(a1,a11) ! F\n+logical, parameter :: p4 = same_type_as(a11,a1) ! F\n+logical, parameter :: p5 = same_type_as(a11,a11)! T\n+logical, parameter :: p6 = same_type_as(a1,a1)  ! T\n+\n+if (p1 .or. p2 .or. p3 .or. p4 .or. .not. p5 .or. .not. p6) call should_not_exist()\n+\n+! Not (trivially) compile-time simplifiable:\n+if (same_type_as(b1,a1)  .neqv. .true.) call abort()\n+if (same_type_as(b1,a11) .neqv. .false.) call abort()\n+allocate(t1 :: b1)\n+if (same_type_as(b1,a1)  .neqv. .true.) call abort()\n+if (same_type_as(b1,a11) .neqv. .false.) call abort()\n+deallocate(b1)\n+allocate(t11 :: b1)\n+if (same_type_as(b1,a1)  .neqv. .false.) call abort()\n+if (same_type_as(b1,a11) .neqv. .true.) call abort()\n+deallocate(b1)\n+\n+! .true. -> same type\n+if (extends_type_of(a1,a1)   .neqv. .true.) call should_not_exist()\n+if (extends_type_of(a11,a11) .neqv. .true.) call should_not_exist()\n+if (extends_type_of(a2,a2)   .neqv. .true.) call should_not_exist()\n+\n+! .false. -> type compatibility possible\n+if (extends_type_of(a1,a2)  .neqv. .false.) call should_not_exist()\n+if (extends_type_of(a2,a1)  .neqv. .false.) call should_not_exist()\n+if (extends_type_of(a11,a2) .neqv. .false.) call should_not_exist()\n+if (extends_type_of(a2,a11) .neqv. .false.) call should_not_exist()\n+\n+if (extends_type_of(b1,b2)  .neqv. .false.) call should_not_exist()\n+if (extends_type_of(b2,b1)  .neqv. .false.) call should_not_exist()\n+if (extends_type_of(b11,b2) .neqv. .false.) call should_not_exist()\n+if (extends_type_of(b2,b11) .neqv. .false.) call should_not_exist()\n+\n+if (extends_type_of(b1,a2)  .neqv. .false.) call should_not_exist()\n+if (extends_type_of(b2,a1)  .neqv. .false.) call should_not_exist()\n+if (extends_type_of(b11,a2) .neqv. .false.) call should_not_exist()\n+if (extends_type_of(b2,a11) .neqv. .false.) call should_not_exist()\n+\n+if (extends_type_of(a1,b2)  .neqv. .false.) call should_not_exist()\n+if (extends_type_of(a2,b1)  .neqv. .false.) call should_not_exist()\n+if (extends_type_of(a11,b2) .neqv. .false.) call should_not_exist()\n+if (extends_type_of(a2,b11) .neqv. .false.) call should_not_exist()\n+\n+! type extension possible, compile-time checkable\n+if (extends_type_of(a1,a11) .neqv. .false.) call should_not_exist()\n+if (extends_type_of(a11,a1) .neqv. .true.) call should_not_exist()\n+if (extends_type_of(a1,a11) .neqv. .false.) call should_not_exist()\n+\n+if (extends_type_of(b1,a1)   .neqv. .true.) call should_not_exist()\n+if (extends_type_of(b11,a1)  .neqv. .true.) call should_not_exist()\n+if (extends_type_of(b11,a11) .neqv. .true.) call should_not_exist()\n+if (extends_type_of(b1,a11)  .neqv. .false.) call should_not_exist()\n+\n+if (extends_type_of(a1,b11)  .neqv. .false.) call abort()\n+\n+! Special case, simplified at tree folding:\n+if (extends_type_of(b1,b1)   .neqv. .true.) call abort()\n+\n+! All other possibilities are not compile-time checkable\n+if (extends_type_of(b11,b1)  .neqv. .true.) call abort()\n+!if (extends_type_of(b1,b11)  .neqv. .false.) call abort() ! FAILS due to PR 47189\n+if (extends_type_of(a11,b11) .neqv. .true.) call abort()\n+allocate(t11 :: b11)\n+if (extends_type_of(a11,b11) .neqv. .true.) call abort()\n+deallocate(b11)\n+allocate(t111 :: b11)\n+if (extends_type_of(a11,b11) .neqv. .false.) call abort()\n+deallocate(b11)\n+allocate(t11 :: b1)\n+if (extends_type_of(a11,b1) .neqv. .true.) call abort()\n+deallocate(b1)\n+\n+end\n+\n+! { dg-final { scan-tree-dump-times \"abort\" 13 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"should_not_exist\" 0 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}