{"sha": "6009801342e283463cc15fe9aa514d162df7c430", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAwOTgwMTM0MmUyODM0NjNjYzE1ZmU5YWE1MTRkMTYyZGY3YzQzMA==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2012-02-07T02:28:06Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2012-02-07T02:28:06Z"}, "message": "epiphany.h (ASM_DECLARE_FUNCTION_SIZE): Redefine...\n\n        * config/epiphany/epiphany.h (ASM_DECLARE_FUNCTION_SIZE): Redefine,\n        adding __forwarder_dst__ prefix if a forwarder_section attribute is\n        present.\n        (epiphany_function_type): Replace types for specific interrupts with\n        EPIPHANY_FUNCTION_INTERRUPT.\n        (EPIPHANY_INTERRUPT_P): Update.\n        * config/epiphany/epiphany.c (epiphany_handle_forwarder_attribute):\n        New static function.\n        (epiphany_attribute_table) <interrupt>: min_len is 0, max_len is 9.\n        <disinterrupt>: Affects type identity.\n        (epiphany_handle_interrupt_attribute): Handle variable number of\n        arguments.\n        (epiphany_compute_function_type): Update for new\n        epiphany_function_type definition.\n        (epiphany_expand_prologue): Don't save (reg:DI GPR_0) for interrupt\n        handlers with a longcall forwarder.\n        (epiphany_start_function): Handle multiple interrupt arguments and/or\n        forwarder_section attribute.\n\nFrom-SVN: r183953", "tree": {"sha": "e276fcf92c6b5974ac19a30c894e2084e1bb3684", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e276fcf92c6b5974ac19a30c894e2084e1bb3684"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6009801342e283463cc15fe9aa514d162df7c430", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6009801342e283463cc15fe9aa514d162df7c430", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6009801342e283463cc15fe9aa514d162df7c430", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6009801342e283463cc15fe9aa514d162df7c430/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "300f7e1640e8749ed9d0c9ca12bc5f9537b8237a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/300f7e1640e8749ed9d0c9ca12bc5f9537b8237a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/300f7e1640e8749ed9d0c9ca12bc5f9537b8237a"}], "stats": {"total": 205, "additions": 148, "deletions": 57}, "files": [{"sha": "2821874c007705bdafaf9dec22ada99946b0d0e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6009801342e283463cc15fe9aa514d162df7c430/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6009801342e283463cc15fe9aa514d162df7c430/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6009801342e283463cc15fe9aa514d162df7c430", "patch": "@@ -1,3 +1,24 @@\n+2012-02-07  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\t* config/epiphany/epiphany.h (ASM_DECLARE_FUNCTION_SIZE): Redefine,\n+\tadding __forwarder_dst__ prefix if a forwarder_section attribute is\n+\tpresent.\n+\t(epiphany_function_type): Replace types for specific interrupts with\n+\tEPIPHANY_FUNCTION_INTERRUPT.\n+\t(EPIPHANY_INTERRUPT_P): Update.\n+\t* config/epiphany/epiphany.c (epiphany_handle_forwarder_attribute):\n+\tNew static function.\n+\t(epiphany_attribute_table) <interrupt>: min_len is 0, max_len is 9.\n+\t<disinterrupt>: Affects type identity.\n+\t(epiphany_handle_interrupt_attribute): Handle variable number of\n+\targuments.\n+\t(epiphany_compute_function_type): Update for new\n+\tepiphany_function_type definition.\n+\t(epiphany_expand_prologue): Don't save (reg:DI GPR_0) for interrupt\n+\thandlers with a longcall forwarder.\n+\t(epiphany_start_function): Handle multiple interrupt arguments and/or\n+\tforwarder_section attribute.\n+\n 2012-02-07  Alan Modra  <amodra@gmail.com>\n \n \tPR target/52107"}, {"sha": "aff3d1cde6d043d649b62eef397889bd50e45d09", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 100, "deletions": 48, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6009801342e283463cc15fe9aa514d162df7c430/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6009801342e283463cc15fe9aa514d162df7c430/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=6009801342e283463cc15fe9aa514d162df7c430", "patch": "@@ -64,6 +64,8 @@ int epiphany_normal_fp_rounding;\n static void epiphany_init_reg_tables (void);\n static int get_epiphany_condition_code (rtx);\n static tree epiphany_handle_interrupt_attribute (tree *, tree, tree, int, bool *);\n+static tree epiphany_handle_forwarder_attribute (tree *, tree, tree, int,\n+\t\t\t\t\t\t bool *);\n static bool epiphany_pass_by_reference (cumulative_args_t, enum machine_mode,\n \t\t\t\t\tconst_tree, bool);\n static rtx frame_insn (rtx);\n@@ -410,10 +412,11 @@ epiphany_init_reg_tables (void)\n static const struct attribute_spec epiphany_attribute_table[] =\n {\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n-  { \"interrupt\",  1, 1, true,  false, false, epiphany_handle_interrupt_attribute, true },\n+  { \"interrupt\",  0, 9, true,  false, false, epiphany_handle_interrupt_attribute, true },\n+  { \"forwarder_section\", 1, 1, true, false, false, epiphany_handle_forwarder_attribute, false },\n   { \"long_call\",  0, 0, false, true, true, NULL, false },\n   { \"short_call\", 0, 0, false, true, true, NULL, false },\n-  { \"disinterrupt\", 0, 0, false, true, true, NULL, false },\n+  { \"disinterrupt\", 0, 0, false, true, true, NULL, true },\n   { NULL,         0, 0, false, false, false, NULL, false }\n };\n \n@@ -425,7 +428,12 @@ epiphany_handle_interrupt_attribute (tree *node ATTRIBUTE_UNUSED,\n \t\t\t\t     int flags ATTRIBUTE_UNUSED,\n \t\t\t\t     bool *no_add_attrs)\n {\n-  tree value = TREE_VALUE (args);\n+  tree value;\n+\n+  if (!args)\n+    return NULL_TREE;\n+\n+  value = TREE_VALUE (args);\n \n   if (TREE_CODE (value) != STRING_CST)\n     {\n@@ -448,8 +456,31 @@ epiphany_handle_interrupt_attribute (tree *node ATTRIBUTE_UNUSED,\n \t       \"argument of %qE attribute is not \\\"reset\\\", \\\"software_exception\\\", \\\"page_miss\\\", \\\"timer0\\\", \\\"timer1\\\", \\\"message\\\", \\\"dma0\\\", \\\"dma1\\\", \\\"wand\\\" or \\\"swi\\\"\",\n \t       name);\n       *no_add_attrs = true;\n+      return NULL_TREE;\n     }\n \n+  return epiphany_handle_interrupt_attribute (node, name, TREE_CHAIN (args),\n+\t\t\t\t\t      flags, no_add_attrs);\n+}\n+\n+/* Handle a \"forwarder_section\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+static tree\n+epiphany_handle_forwarder_attribute (tree *node ATTRIBUTE_UNUSED,\n+\t\t\t\t     tree name, tree args,\n+\t\t\t\t     int flags ATTRIBUTE_UNUSED,\n+\t\t\t\t     bool *no_add_attrs)\n+{\n+  tree value;\n+\n+  value = TREE_VALUE (args);\n+\n+  if (TREE_CODE (value) != STRING_CST)\n+    {\n+      warning (OPT_Wattributes,\n+\t       \"argument of %qE attribute is not a string constant\", name);\n+      *no_add_attrs = true;\n+    }\n   return NULL_TREE;\n }\n \n@@ -883,38 +914,10 @@ epiphany_compute_function_type (tree decl)\n        a;\n        a = TREE_CHAIN (a))\n     {\n-      tree name = TREE_PURPOSE (a), args = TREE_VALUE (a);\n+      tree name = TREE_PURPOSE (a);\n \n-      if (name == get_identifier (\"interrupt\")\n-\t  && list_length (args) == 1\n-\t  && TREE_CODE (TREE_VALUE (args)) == STRING_CST)\n-\t{\n-\t  tree value = TREE_VALUE (args);\n-\n-\t  if (!strcmp (TREE_STRING_POINTER (value), \"reset\"))\n-\t    fn_type = EPIPHANY_FUNCTION_RESET;\n-\t  else if (!strcmp (TREE_STRING_POINTER (value), \"software_exception\"))\n-\t    fn_type = EPIPHANY_FUNCTION_SOFTWARE_EXCEPTION;\n-\t  else if (!strcmp (TREE_STRING_POINTER (value), \"page_miss\"))\n-\t    fn_type = EPIPHANY_FUNCTION_PAGE_MISS;\n-\t  else if (!strcmp (TREE_STRING_POINTER (value), \"timer0\"))\n-\t    fn_type = EPIPHANY_FUNCTION_TIMER0;\n-\t  else if (!strcmp (TREE_STRING_POINTER (value), \"timer1\"))\n-\t    fn_type = EPIPHANY_FUNCTION_TIMER1;\n-\t  else if (!strcmp (TREE_STRING_POINTER (value), \"message\"))\n-\t    fn_type = EPIPHANY_FUNCTION_MESSAGE;\n-\t  else if (!strcmp (TREE_STRING_POINTER (value), \"dma0\"))\n-\t    fn_type = EPIPHANY_FUNCTION_DMA0;\n-\t  else if (!strcmp (TREE_STRING_POINTER (value), \"dma1\"))\n-\t    fn_type = EPIPHANY_FUNCTION_DMA1;\n-\t  else if (!strcmp (TREE_STRING_POINTER (value), \"wand\"))\n-\t    fn_type = EPIPHANY_FUNCTION_WAND;\n-\t  else if (!strcmp (TREE_STRING_POINTER (value), \"swi\"))\n-\t    fn_type = EPIPHANY_FUNCTION_SWI;\n-\t  else\n-\t    gcc_unreachable ();\n-\t  break;\n-\t}\n+      if (name == get_identifier (\"interrupt\"))\n+\tfn_type = EPIPHANY_FUNCTION_INTERRUPT;\n     }\n \n   last_fn = decl;\n@@ -1645,8 +1648,12 @@ epiphany_expand_prologue (void)\n     {\n       addr = plus_constant (stack_pointer_rtx,\n \t\t\t    - (HOST_WIDE_INT) 2 * UNITS_PER_WORD);\n-      frame_move_insn (gen_frame_mem (DImode, addr),\n-\t\t       gen_rtx_REG (DImode, GPR_0));\n+      if (!lookup_attribute (\"forwarder_section\",\n+\t\t\t    DECL_ATTRIBUTES (current_function_decl))\n+\t  || !epiphany_is_long_call_p (XEXP (DECL_RTL (current_function_decl),\n+\t\t\t\t\t     0)))\n+        frame_move_insn (gen_frame_mem (DImode, addr),\n+\t\t\t gen_rtx_REG (DImode, GPR_0));\n       frame_move_insn (gen_rtx_REG (SImode, GPR_0),\n \t\t       gen_rtx_REG (word_mode, STATUS_REGNUM));\n       frame_move_insn (gen_rtx_REG (SImode, GPR_0+1),\n@@ -2760,24 +2767,69 @@ epiphany_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n void\n epiphany_start_function (FILE *file, const char *name, tree decl)\n {\n-  tree attrs, int_attr;\n+  /* If the function doesn't fit into the on-chip memory, it will have a\n+     section attribute - or lack of it - that denotes it goes somewhere else.\n+     But the architecture spec says that an interrupt vector still has to\n+     point to on-chip memory.  So we must place a jump there to get to the\n+     actual function implementation.  The forwarder_section attribute\n+     specifies the section where this jump goes.\n+     This mechanism can also be useful to have a shortcall destination for\n+     a function that is actually placed much farther away.  */\n+  tree attrs, int_attr, int_names, int_name, forwarder_attr;\n \n   attrs = DECL_ATTRIBUTES (decl);\n   int_attr = lookup_attribute (\"interrupt\", attrs);\n   if (int_attr)\n-    {\n-      char buf[99];\n-      const char *fname;\n+    for (int_names = TREE_VALUE (int_attr); int_names;\n+\t int_names = TREE_CHAIN (int_names))\n+      {\n+\tchar buf[99];\n+\n+\tint_name = TREE_VALUE (int_names);\n+\tsprintf (buf, \"ivt_entry_%.80s\", TREE_STRING_POINTER (int_name));\n+\tswitch_to_section (get_section (buf, SECTION_CODE, decl));\n+\tfputs (\"\\tb\\t\", file);\n+\tassemble_name (file, name);\n+\tfputc ('\\n', file);\n+      }\n+  forwarder_attr = lookup_attribute (\"forwarder_section\", attrs);\n+  if (forwarder_attr)\n+    {\n+      const char *prefix = \"__forwarder_dst_\";\n+      char *dst_name = (char *) alloca (strlen (prefix) + strlen (name) + 1);\n+\n+      strcpy (dst_name, prefix);\n+      strcat (dst_name, name);\n+      forwarder_attr = TREE_VALUE (TREE_VALUE (forwarder_attr));\n+      switch_to_section (get_section (TREE_STRING_POINTER (forwarder_attr),\n+\t\t\t SECTION_CODE, decl));\n+      ASM_OUTPUT_FUNCTION_LABEL (file, name, decl);\n+      if (epiphany_is_long_call_p (XEXP (DECL_RTL (decl), 0)))\n+\t{\n+\t  int tmp = GPR_0;\n \n-      int_attr = TREE_VALUE (TREE_VALUE (int_attr));\n-      sprintf (buf, \"ivt_entry_%.80s\", TREE_STRING_POINTER (int_attr));\n-      switch_to_section (get_section (buf, SECTION_CODE, decl));\n-      fname = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n-      fputs (\"\\tb\\t\", file);\n-      assemble_name (file, fname);\n-      fputc ('\\n', file);\n-      switch_to_section (function_section (decl));\n+\t  if (int_attr)\n+\t    fputs (\"\\tstrd r0,[sp,-1]\\n\", file);\n+\t  else\n+\t    tmp = GPR_16;\n+\t  gcc_assert (call_used_regs[tmp]);\n+\t  fprintf (file, \"\\tmov r%d,%%low(\", tmp);\n+\t  assemble_name (file, dst_name);\n+\t  fprintf (file, \")\\n\"\n+\t\t   \"\\tmovt r%d,%%high(\", tmp);\n+\t  assemble_name (file, dst_name);\n+\t  fprintf (file, \")\\n\"\n+\t\t \"\\tjr r%d\\n\", tmp);\n+\t}\n+      else\n+\t{\n+\t  fputs (\"\\tb\\t\", file);\n+\t  assemble_name (file, dst_name);\n+\t  fputc ('\\n', file);\n+\t}\n+      name = dst_name;\n     }\n+  switch_to_section (function_section (decl));\n   ASM_OUTPUT_FUNCTION_LABEL (file, name, decl);\n }\n "}, {"sha": "572ec7ecb3faf3bbc9476e93e5ebe54b75045b9f", "filename": "gcc/config/epiphany/epiphany.h", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6009801342e283463cc15fe9aa514d162df7c430/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6009801342e283463cc15fe9aa514d162df7c430/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.h?ref=6009801342e283463cc15fe9aa514d162df7c430", "patch": "@@ -778,6 +778,31 @@ do {\t\t\t\t\t\t\t\\\n    to a multiple of 2**LOG bytes.  */\n #define ASM_OUTPUT_ALIGN(FILE,LOG) \\\n do { if ((LOG) != 0) fprintf (FILE, \"\\t.balign %d\\n\", 1 << (LOG)); } while (0)\n+\n+/* This is how to declare the size of a function.  */\n+#undef ASM_DECLARE_FUNCTION_SIZE\n+#define ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      const char *__name = (FNAME);\t\t\t\t\t\\\n+      tree attrs = DECL_ATTRIBUTES ((DECL));\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      if (!flag_inhibit_size_directive)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  if (lookup_attribute (\"forwarder_section\", attrs))\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      const char *prefix = \"__forwarder_dst_\";\t\t\t\\\n+\t      char *dst_name\t\t\t\t\t\t\\\n+\t\t= (char *) alloca (strlen (prefix) + strlen (__name) + 1); \\\n+\t\t\t\t\t\t\t\t\t\\\n+\t      strcpy (dst_name, prefix);\t\t\t\t\\\n+\t      strcat (dst_name, __name);\t\t\t\t\\\n+\t      __name = dst_name;\t\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t  ASM_OUTPUT_MEASURED_SIZE ((FILE), __name);\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n \f\n /* Debugging information.  */\n \n@@ -831,17 +856,10 @@ do { if ((LOG) != 0) fprintf (FILE, \"\\t.balign %d\\n\", 1 << (LOG)); } while (0)\n enum epiphany_function_type\n {\n   EPIPHANY_FUNCTION_UNKNOWN, EPIPHANY_FUNCTION_NORMAL,\n-  /* These are interrupt handlers. The name corresponds to which type\n-     of interrupt handler we're dealing with. */\n-  EPIPHANY_FUNCTION_RESET, EPIPHANY_FUNCTION_SOFTWARE_EXCEPTION,\n-  EPIPHANY_FUNCTION_PAGE_MISS,\n-  EPIPHANY_FUNCTION_TIMER0, EPIPHANY_FUNCTION_TIMER1, EPIPHANY_FUNCTION_MESSAGE,\n-  EPIPHANY_FUNCTION_DMA0, EPIPHANY_FUNCTION_DMA1, EPIPHANY_FUNCTION_WAND,\n-  EPIPHANY_FUNCTION_SWI\n+  EPIPHANY_FUNCTION_INTERRUPT\n };\n \n-#define EPIPHANY_INTERRUPT_P(TYPE) \\\n-  ((TYPE) >= EPIPHANY_FUNCTION_RESET && (TYPE) <= EPIPHANY_FUNCTION_SWI)\n+#define EPIPHANY_INTERRUPT_P(TYPE) ((TYPE) == EPIPHANY_FUNCTION_INTERRUPT)\n \n /* Compute the type of a function from its DECL.  */\n "}]}