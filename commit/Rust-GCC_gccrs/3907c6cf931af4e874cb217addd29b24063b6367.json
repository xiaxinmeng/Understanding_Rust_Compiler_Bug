{"sha": "3907c6cf931af4e874cb217addd29b24063b6367", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkwN2M2Y2Y5MzFhZjRlODc0Y2IyMTdhZGRkMjliMjQwNjNiNjM2Nw==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2016-01-10T12:44:57Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2016-01-10T12:44:57Z"}, "message": "Don't parallelize loops containing phis with addr_exprs\n\n2016-01-10  Tom de Vries  <tom@codesourcery.com>\n\n\tPR tree-optimization/69062\n\t* tree-parloops.c (loop_has_phi_with_address_arg): New function.\n\t(parallelize_loops): Don't paralelize loop that has phi with address\n\targ.\n\n\t* gcc.dg/autopar/pr69062.c: New test.\n\nFrom-SVN: r232199", "tree": {"sha": "24f64fe4361e4575dd44f0faa922bd2078f8eb1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24f64fe4361e4575dd44f0faa922bd2078f8eb1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3907c6cf931af4e874cb217addd29b24063b6367", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3907c6cf931af4e874cb217addd29b24063b6367", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3907c6cf931af4e874cb217addd29b24063b6367", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3907c6cf931af4e874cb217addd29b24063b6367/comments", "author": null, "committer": null, "parents": [{"sha": "b07b236e84f8d171d0a59227f824429376cc536f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b07b236e84f8d171d0a59227f824429376cc536f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b07b236e84f8d171d0a59227f824429376cc536f"}], "stats": {"total": 135, "additions": 135, "deletions": 0}, "files": [{"sha": "dde501779f9c4bdcb99f8b380468e1d00a93cd24", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3907c6cf931af4e874cb217addd29b24063b6367/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3907c6cf931af4e874cb217addd29b24063b6367/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3907c6cf931af4e874cb217addd29b24063b6367", "patch": "@@ -1,3 +1,10 @@\n+2016-01-10  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/69062\n+\t* tree-parloops.c (loop_has_phi_with_address_arg): New function.\n+\t(parallelize_loops): Don't paralelize loop that has phi with address\n+\targ.\n+\n 2016-01-10  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/69039"}, {"sha": "f8c4ed5ccd758ac7b9e9c986624464b5405f63fa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3907c6cf931af4e874cb217addd29b24063b6367/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3907c6cf931af4e874cb217addd29b24063b6367/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3907c6cf931af4e874cb217addd29b24063b6367", "patch": "@@ -1,3 +1,8 @@\n+2016-01-10  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/69062\n+\t* gcc.dg/autopar/pr69062.c: New test.\n+\n 2016-01-10  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* gcc.dg/vect/slp-perm-1.c: Fix scan-tree-dump syntax."}, {"sha": "e039349467f0b45e4591a90d49c0a61c07382436", "filename": "gcc/testsuite/gcc.dg/autopar/pr69062.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3907c6cf931af4e874cb217addd29b24063b6367/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fpr69062.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3907c6cf931af4e874cb217addd29b24063b6367/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fpr69062.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fpr69062.c?ref=3907c6cf931af4e874cb217addd29b24063b6367", "patch": "@@ -0,0 +1,89 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-parallelize-loops=2\" } */\n+\n+#include <stdbool.h>\n+\n+typedef unsigned long HARD_REG_ELT_TYPE;\n+typedef HARD_REG_ELT_TYPE HARD_REG_SET[1];\n+struct target_ira\n+{\n+  HARD_REG_SET x_ira_prohibited_class_mode_regs[1][1];\n+};\n+extern struct target_ira *this_target_ira;\n+static inline bool\n+ira_object_conflict_iter_cond ()\n+{\n+}\n+\n+static inline bool\n+check_hard_reg_p (int num_objects, int hard_regno,\n+\t\t  HARD_REG_SET * conflict_regs, HARD_REG_SET profitable_regs)\n+{\n+  int j, nwords, nregs;\n+  if ((! !\n+       (((this_target_ira->\n+\t  x_ira_prohibited_class_mode_regs)[0][0])[(hard_regno) /\n+\t\t\t\t\t\t   ((unsigned) (8 * 8))] &\n+\t(((HARD_REG_ELT_TYPE) (1)) <<\n+\t ((hard_regno) % ((unsigned) (8 * 8)))))))\n+    return false;\n+  nwords = num_objects;\n+  for (j = 0; j < nregs; j++)\n+    {\n+      int k;\n+      int set_to_test_start = 0, set_to_test_end = nwords;\n+      if (nregs == nwords)\n+\t{\n+\t  if (0)\n+\t    set_to_test_start = nwords - j - 1;\n+\t  else\n+\t    set_to_test_start = j;\n+\t}\n+      for (k = set_to_test_start; k < set_to_test_end; k++)\n+\tif ((! !\n+\t     ((conflict_regs[k])[(hard_regno + j) / ((unsigned) (8 * 8))] &\n+\t      (((HARD_REG_ELT_TYPE) (1)) <<\n+\t       ((hard_regno + j) % ((unsigned) (8 * 8)))))))\n+\t  break;\n+      if (k != set_to_test_end)\n+\tbreak;\n+    }\n+  return j == nregs;\n+}\n+\n+void\n+improve_allocation (void)\n+{\n+  int j, k, n, hregno, conflict_hregno, base_cost, class_size, word, nwords;\n+  int check, spill_cost, min_cost, nregs, conflict_nregs, r, best;\n+  int costs[81];\n+  HARD_REG_SET conflicting_regs[2], profitable_hard_regs;\n+  int a;\n+  for (;;)\n+    {\n+      nwords = a;\n+      for (word = 0; word < nwords; word++)\n+\t{\n+\t  for (; ira_object_conflict_iter_cond ();)\n+\t    {\n+\t      for (r = conflict_hregno;\n+\t\t   r < conflict_hregno + conflict_nregs; r++)\n+\t\tif (check_hard_reg_p\n+\t\t    (a, r, conflicting_regs, profitable_hard_regs))\n+\t\t  costs[r] += spill_cost;\n+\t    }\n+\t  if (check_hard_reg_p\n+\t      (a, hregno, conflicting_regs, profitable_hard_regs)\n+\t      && min_cost > costs[hregno])\n+\t    {\n+\t      best = hregno;\n+\t    }\n+\t  for (; ira_object_conflict_iter_cond ();)\n+\t    {\n+\t      if (best + nregs <= conflict_hregno\n+\t\t  || conflict_hregno + conflict_nregs <= best)\n+\t\tcontinue;\n+\t    }\n+\t}\n+    }\n+}"}, {"sha": "5bd9c06f31542fa5e5a928a89754f7fad9997eea", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3907c6cf931af4e874cb217addd29b24063b6367/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3907c6cf931af4e874cb217addd29b24063b6367/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=3907c6cf931af4e874cb217addd29b24063b6367", "patch": "@@ -2640,6 +2640,37 @@ try_create_reduction_list (loop_p loop,\n   return true;\n }\n \n+/* Return true if LOOP contains phis with ADDR_EXPR in args.  */\n+\n+static bool\n+loop_has_phi_with_address_arg (struct loop *loop)\n+{\n+  basic_block *bbs = get_loop_body (loop);\n+  bool res = false;\n+\n+  unsigned i, j;\n+  gphi_iterator gsi;\n+  for (i = 0; i < loop->num_nodes; i++)\n+    for (gsi = gsi_start_phis (bbs[i]); !gsi_end_p (gsi); gsi_next (&gsi))\n+      {\n+\tgphi *phi = gsi.phi ();\n+\tfor (j = 0; j < gimple_phi_num_args (phi); j++)\n+\t  {\n+\t    tree arg = gimple_phi_arg_def (phi, j);\n+\t    if (TREE_CODE (arg) == ADDR_EXPR)\n+\t      {\n+\t\t/* This should be handled by eliminate_local_variables, but that\n+\t\t   function currently ignores phis.  */\n+\t\tres = true;\n+\t\tgoto end;\n+\t      }\n+\t  }\n+      }\n+ end:\n+  free (bbs);\n+  return res;\n+}\n+\n /* Detect parallel loops and generate parallel code using libgomp\n    primitives.  Returns true if some loop was parallelized, false\n    otherwise.  */\n@@ -2734,6 +2765,9 @@ parallelize_loops (void)\n       if (!try_create_reduction_list (loop, &reduction_list))\n \tcontinue;\n \n+      if (loop_has_phi_with_address_arg (loop))\n+\tcontinue;\n+\n       if (!flag_loop_parallelize_all\n \t  && !loop_parallel_p (loop, &parloop_obstack))\n \tcontinue;"}]}