{"sha": "6c06fbce5c77ffbb0be281d22780a919de4877fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMwNmZiY2U1Yzc3ZmZiYjBiZTI4MWQyMjc4MGE5MTlkZTQ4NzdmZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-10-13T23:59:57Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-10-13T23:59:57Z"}, "message": "re PR c++/20721 (crossing of a initialization left undetected on goto)\n\n\tPR c++/20721\n\t* cp-tree.h (DECL_NONTRIVIALLY_INITIALIZED_P): New macro.\n\t* decl.c (duplicate_decls): Merge it into new declarations.\n\t(decl_jump_unsafe): Use it, rather than DECL_INITIAL.\n\t(cp_finish_decl): Set it, when appropriate.\n\tPR c++/20721\n\t* g++.dg/init/goto2.C: New test.\n\nFrom-SVN: r105380", "tree": {"sha": "a4da9de28c6912e3768cb698ed0a81ac34281fd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4da9de28c6912e3768cb698ed0a81ac34281fd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c06fbce5c77ffbb0be281d22780a919de4877fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c06fbce5c77ffbb0be281d22780a919de4877fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c06fbce5c77ffbb0be281d22780a919de4877fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c06fbce5c77ffbb0be281d22780a919de4877fe/comments", "author": null, "committer": null, "parents": [{"sha": "02f3e085c7ba33279329aae728aaf42dc922add6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02f3e085c7ba33279329aae728aaf42dc922add6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02f3e085c7ba33279329aae728aaf42dc922add6"}], "stats": {"total": 48, "additions": 39, "deletions": 9}, "files": [{"sha": "ec812924c74cb4beabcbe1817e4542a16371d8e4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c06fbce5c77ffbb0be281d22780a919de4877fe/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c06fbce5c77ffbb0be281d22780a919de4877fe/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6c06fbce5c77ffbb0be281d22780a919de4877fe", "patch": "@@ -1,5 +1,11 @@\n 2005-10-13  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/20721\n+\t* cp-tree.h (DECL_NONTRIVIALLY_INITIALIZED_P): New macro.\n+\t* decl.c (duplicate_decls): Merge it into new declarations.\n+\t(decl_jump_unsafe): Use it, rather than DECL_INITIAL.\n+\t(cp_finish_decl): Set it, when appropriate.\n+\n \tPR c++/22180\n \t* call.c (build_new_method_call): Correct pretty-printing of\n \tdestructor names."}, {"sha": "42eed5f6fd491e8ee47b2432c5023889925cf4cc", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c06fbce5c77ffbb0be281d22780a919de4877fe/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c06fbce5c77ffbb0be281d22780a919de4877fe/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=6c06fbce5c77ffbb0be281d22780a919de4877fe", "patch": "@@ -69,6 +69,7 @@ struct diagnostic_context;\n       FN_TRY_BLOCK_P (in TRY_BLOCK)\n       IDENTIFIER_CTOR_OR_DTOR_P (in IDENTIFIER_NODE)\n       BIND_EXPR_BODY_BLOCK (in BIND_EXPR)\n+      DECL_NON_TRIVIALLY_INITIALIZED_P (in VAR_DECL)\n    4: TREE_HAS_CONSTRUCTOR (in INDIRECT_REF, SAVE_EXPR, CONSTRUCTOR,\n \t  or FIELD_DECL).\n       IDENTIFIER_TYPENAME_P (in IDENTIFIER_NODE)\n@@ -1784,11 +1785,17 @@ struct lang_decl GTY(())\n    should be allocated.  */\n #define DECL_IN_AGGR_P(NODE) (DECL_LANG_FLAG_3 (NODE))\n \n-/* Nonzero for a VAR_DECL means that the variable's initialization has\n-   been processed.  */\n+/* Nonzero for a VAR_DECL means that the variable's initialization (if\n+   any) has been processed.  (In general, DECL_INITIALIZED_P is\n+   !DECL_EXTERN, but static data members may be initialized even if\n+   not defined.)  */\n #define DECL_INITIALIZED_P(NODE) \\\n    (TREE_LANG_FLAG_1 (VAR_DECL_CHECK (NODE)))\n \n+/* Nonzero for a VAR_DECL iff an explicit initializer was provided.  */\n+#define DECL_NONTRIVIALLY_INITIALIZED_P(NODE)\t\\\n+   (TREE_LANG_FLAG_3 (VAR_DECL_CHECK (NODE)))\n+\n /* Nonzero for a VAR_DECL that was initialized with a\n    constant-expression.  */\n #define DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P(NODE) \\"}, {"sha": "7cc2fdedc4b72bdc006ede725c1ba14058224548", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c06fbce5c77ffbb0be281d22780a919de4877fe/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c06fbce5c77ffbb0be281d22780a919de4877fe/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=6c06fbce5c77ffbb0be281d22780a919de4877fe", "patch": "@@ -1542,6 +1542,8 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t{\n \t  DECL_THIS_EXTERN (newdecl) |= DECL_THIS_EXTERN (olddecl);\n \t  DECL_INITIALIZED_P (newdecl) |= DECL_INITIALIZED_P (olddecl);\n+\t  DECL_NONTRIVIALLY_INITIALIZED_P (newdecl) \n+\t    |= DECL_NONTRIVIALLY_INITIALIZED_P (olddecl);\n \t  DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (newdecl)\n \t    |= DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (olddecl);\n \t}\n@@ -2148,16 +2150,15 @@ decl_jump_unsafe (tree decl)\n   if (TREE_CODE (decl) != VAR_DECL || TREE_STATIC (decl))\n     return 0;\n \n-  if (DECL_INITIAL (decl) == NULL_TREE\n-      && pod_type_p (TREE_TYPE (decl)))\n+  if (TYPE_NEEDS_CONSTRUCTING (TREE_TYPE (decl))\n+      || DECL_NONTRIVIALLY_INITIALIZED_P (decl))\n+    return 2;\n+\n+  if (pod_type_p (TREE_TYPE (decl)))\n     return 0;\n \n-  /* This is really only important if we're crossing an initialization.\n-     The POD stuff is just pedantry; why should it matter if the class\n+  /* The POD stuff is just pedantry; why should it matter if the class\n      contains a field of pointer to member type?  */\n-  if (DECL_INITIAL (decl)\n-      || (TYPE_NEEDS_CONSTRUCTING (TREE_TYPE (decl))))\n-    return 2;\n   return 1;\n }\n \n@@ -4932,6 +4933,8 @@ cp_finish_decl (tree decl, tree init, tree asmspec_tree, int flags)\n \t     is *not* defined.  */\n \t  && (!DECL_EXTERNAL (decl) || init))\n \t{\n+\t  if (init)\n+\t    DECL_NONTRIVIALLY_INITIALIZED_P (decl) = 1;\n \t  init = check_initializer (decl, init, flags, &cleanup);\n \t  /* Thread-local storage cannot be dynamically initialized.  */\n \t  if (DECL_THREAD_LOCAL_P (decl) && init)"}, {"sha": "99f49d0729d319e9765a8ac26eaff6ff405b526c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c06fbce5c77ffbb0be281d22780a919de4877fe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c06fbce5c77ffbb0be281d22780a919de4877fe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6c06fbce5c77ffbb0be281d22780a919de4877fe", "patch": "@@ -1,5 +1,8 @@\n 2005-10-13  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/20721\n+\t* g++.dg/init/goto2.C: New test.\n+\n \tPR c++/22464\n \t* g++.dg/template/crash/41.C: New test.\n "}, {"sha": "3f4ecc04cf9a65c650fbaaa7765e13a025f3b688", "filename": "gcc/testsuite/g++.dg/init/goto2.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c06fbce5c77ffbb0be281d22780a919de4877fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fgoto2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c06fbce5c77ffbb0be281d22780a919de4877fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fgoto2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fgoto2.C?ref=6c06fbce5c77ffbb0be281d22780a919de4877fe", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/20721\n+\n+bool f();\n+void g(int i)\n+{\n+  if (i) goto bad; // { dg-error \"from\" }\n+  bool a = f(); // { dg-error \"initialization\" }\n+ bad: // { dg-error \"jump\" }\n+  ;\n+}\n+"}]}