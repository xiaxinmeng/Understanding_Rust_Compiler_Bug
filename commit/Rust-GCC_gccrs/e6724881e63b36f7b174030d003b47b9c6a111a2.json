{"sha": "e6724881e63b36f7b174030d003b47b9c6a111a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY3MjQ4ODFlNjNiMzZmN2IxNzQwMzBkMDAzYjQ3YjljNmExMTFhMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-12-28T09:23:05Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-12-28T09:23:05Z"}, "message": "real.c (etoe113, toe113): Ifndef INTEL_EXTENDED_IEEE_FORMAT.\n\n        * real.c (etoe113, toe113): Ifndef INTEL_EXTENDED_IEEE_FORMAT.\n        (endian): Clear word 3 for INTEL_EXTENDED_IEEE_FORMAT.\n        (etartdouble): Invoke etoe64 for INTEL_EXTENDED_IEEE_FORMAT.\n        * real.h (REAL_VALUE_TO_TARGET_LONG_DOUBLE): Don't special case\n        INTEL_EXTENDED_IEEE_FORMAT.\n\nFrom-SVN: r48342", "tree": {"sha": "d275d01dc5904078137c164bea348b4daae5e140", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d275d01dc5904078137c164bea348b4daae5e140"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6724881e63b36f7b174030d003b47b9c6a111a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6724881e63b36f7b174030d003b47b9c6a111a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6724881e63b36f7b174030d003b47b9c6a111a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6724881e63b36f7b174030d003b47b9c6a111a2/comments", "author": null, "committer": null, "parents": [{"sha": "9346c2fffd405990bb4c956006d16ec324447760", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9346c2fffd405990bb4c956006d16ec324447760", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9346c2fffd405990bb4c956006d16ec324447760"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "19958f4e5284b7c1eb3b50278c72aa070e412392", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6724881e63b36f7b174030d003b47b9c6a111a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6724881e63b36f7b174030d003b47b9c6a111a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6724881e63b36f7b174030d003b47b9c6a111a2", "patch": "@@ -1,3 +1,11 @@\n+2001-12-28  Richard Henderson  <rth@redhat.com>\n+\n+\t* real.c (etoe113, toe113): Ifndef INTEL_EXTENDED_IEEE_FORMAT.\n+\t(endian): Clear word 3 for INTEL_EXTENDED_IEEE_FORMAT.\n+\t(etartdouble): Invoke etoe64 for INTEL_EXTENDED_IEEE_FORMAT.\n+\t* real.h (REAL_VALUE_TO_TARGET_LONG_DOUBLE): Don't special case\n+\tINTEL_EXTENDED_IEEE_FORMAT.\n+\n 2001-12-27  Geoff Keating  <geoffk@redhat.com>\n \n \t* combine.c (try_combine): Mask off sign bits when combining"}, {"sha": "de737f67069a7fb734b49481af154121993415b3", "filename": "gcc/real.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6724881e63b36f7b174030d003b47b9c6a111a2/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6724881e63b36f7b174030d003b47b9c6a111a2/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=e6724881e63b36f7b174030d003b47b9c6a111a2", "patch": "@@ -425,8 +425,10 @@ static void e64toe\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n static void e113toe\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n #endif\n static void e24toe\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+#if (INTEL_EXTENDED_IEEE_FORMAT == 0)\n static void etoe113\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n static void toe113\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n+#endif\n static void etoe64\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n static void toe64\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n static void etoe53\tPARAMS ((UEMUSHORT *, UEMUSHORT *));\n@@ -524,23 +526,26 @@ endian (e, x, mode)\n \t  t = (unsigned long) e[7] & 0xffff;\n \t  t |= th << 16;\n \t  x[3] = (long) t;\n+#else\n+\t  x[3] = 0;\n #endif\n+\t  /* FALLTHRU */\n \n \tcase XFmode:\n \t  /* Swap halfwords in the third long.  */\n \t  th = (unsigned long) e[4] & 0xffff;\n \t  t = (unsigned long) e[5] & 0xffff;\n \t  t |= th << 16;\n \t  x[2] = (long) t;\n-\t  /* fall into the double case */\n+\t  /* FALLTHRU */\n \n \tcase DFmode:\n \t  /* Swap halfwords in the second word.  */\n \t  th = (unsigned long) e[2] & 0xffff;\n \t  t = (unsigned long) e[3] & 0xffff;\n \t  t |= th << 16;\n \t  x[1] = (long) t;\n-\t  /* fall into the float case */\n+\t  /* FALLTHRU */\n \n \tcase SFmode:\n \tcase HFmode:\n@@ -568,7 +573,10 @@ endian (e, x, mode)\n \t  t = (unsigned long) e[6] & 0xffff;\n \t  t |= th << 16;\n \t  x[3] = (long) t;\n+#else\n+\t  x[3] = 0;\n #endif\n+\t  /* FALLTHRU */\n \n \tcase XFmode:\n \t  /* Pack the third long.\n@@ -578,15 +586,15 @@ endian (e, x, mode)\n \t  t = (unsigned long) e[4] & 0xffff;\n \t  t |= th << 16;\n \t  x[2] = (long) t;\n-\t  /* fall into the double case */\n+\t  /* FALLTHRU */\n \n \tcase DFmode:\n \t  /* Pack the second long */\n \t  th = (unsigned long) e[3] & 0xffff;\n \t  t = (unsigned long) e[2] & 0xffff;\n \t  t |= th << 16;\n \t  x[1] = (long) t;\n-\t  /* fall into the float case */\n+\t  /* FALLTHRU */\n \n \tcase SFmode:\n \tcase HFmode:\n@@ -1256,7 +1264,11 @@ etartdouble (r, l)\n   UEMUSHORT e[NE];\n \n   GET_REAL (&r, e);\n+#if INTEL_EXTENDED_IEEE_FORMAT == 0\n   etoe113 (e, e);\n+#else\n+  etoe64 (e, e);\n+#endif\n   endian (e, l, TFmode);\n }\n \n@@ -3535,6 +3547,7 @@ e24toe (pe, y)\n #endif /* not IBM */\n }\n \n+#if (INTEL_EXTENDED_IEEE_FORMAT == 0)\n /* Convert e-type X to IEEE 128-bit long double format E.  */\n \n static void\n@@ -3627,6 +3640,7 @@ toe113 (a, b)\n \t*q-- = *p++;\n     }\n }\n+#endif\n \n /* Convert e-type X to IEEE double extended format E.  */\n \n@@ -5515,9 +5529,11 @@ asctoeg (ss, y, oprec)\n     case 64:\n       toe64 (yy, y);\n       break;\n+#if (INTEL_EXTENDED_IEEE_FORMAT == 0)\n     case 113:\n       toe113 (yy, y);\n       break;\n+#endif\n     case NBITS:\n       emovo (yy, y);\n       break;"}, {"sha": "b9ee36356f275363e0c1632c789511a3f310f423", "filename": "gcc/real.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6724881e63b36f7b174030d003b47b9c6a111a2/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6724881e63b36f7b174030d003b47b9c6a111a2/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=e6724881e63b36f7b174030d003b47b9c6a111a2", "patch": "@@ -208,15 +208,11 @@ extern REAL_VALUE_TYPE ereal_from_double PARAMS ((HOST_WIDE_INT *));\n   ereal_from_uint (&d, lo, hi, mode)\n \n /* IN is a REAL_VALUE_TYPE.  OUT is an array of longs.  */\n-#if (INTEL_EXTENDED_IEEE_FORMAT != 0) && (MAX_LONG_DOUBLE_TYPE_SIZE == 128)\n-#define REAL_VALUE_TO_TARGET_LONG_DOUBLE(IN, OUT) (etarldouble ((IN), (OUT)))\n-#else\n #define REAL_VALUE_TO_TARGET_LONG_DOUBLE(IN, OUT) \t\t\\\n    (LONG_DOUBLE_TYPE_SIZE == 64 ? etardouble ((IN), (OUT))\t\\\n     : LONG_DOUBLE_TYPE_SIZE == 96 ? etarldouble ((IN), (OUT))\t\\\n     : LONG_DOUBLE_TYPE_SIZE == 128 ? etartdouble ((IN), (OUT))  \\\n     : abort())\n-#endif\n #define REAL_VALUE_TO_TARGET_DOUBLE(IN, OUT) (etardouble ((IN), (OUT)))\n \n /* IN is a REAL_VALUE_TYPE.  OUT is a long.  */"}]}