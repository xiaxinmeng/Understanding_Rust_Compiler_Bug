{"sha": "918ed612a1b2328a11887b7166bc07a9efde130f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE4ZWQ2MTJhMWIyMzI4YTExODg3YjcxNjZiYzA3YTllZmRlMTMwZg==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "rakdver@atrey.karlin.mff.cuni.cz", "date": "2002-05-19T22:25:49Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2002-05-19T22:25:49Z"}, "message": "basic_block.h (struct basic_block_def): Added prev_bb and next_bb fields.\n\n\t* basic_block.h (struct basic_block_def): Added prev_bb and next_bb\n\tfields.\n\t(FOR_BB_BETWEEN, FOR_ALL_BB, FOR_ALL_BB_REVERSE): New macros for\n\ttraversing basic block chain.\n\t(create_basic_block_structure, create_basic_block): Declaration changed.\n\t(link_block, unlink_block): Declare.\n\t* cfg.c (entry_exit_blocks): Initialize new fields.\n\t(link_block, unlink_block): New.\n\t(expunge_block_nocompact): Unlink basic block.\n\t(dump_flow_info): Print prev_bb/next_bb fields.\n\t* cfgbuild.c (find_basic_blocks_1, find_basic_blocks): Modified.\n\t* cfgcleanup.c (merge_blocks_move_predecessor_nojumps): Modified.\n\t* cfglayout.c (fixup_reorder_chain, cfg_layout_duplicate_bb): Modified.\n\t* cfgrtl.c (create_basic_block_structure, create_basic_block,\n\tsplit_block, force_nonfallthru_and_redirect, split_edge): Modified.\n\t(verify_flow_info): Check that list agrees with numbering.\n\nFrom-SVN: r53642", "tree": {"sha": "da3145061eccb50182bb789146df5bbe4f748226", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da3145061eccb50182bb789146df5bbe4f748226"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/918ed612a1b2328a11887b7166bc07a9efde130f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/918ed612a1b2328a11887b7166bc07a9efde130f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/918ed612a1b2328a11887b7166bc07a9efde130f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/918ed612a1b2328a11887b7166bc07a9efde130f/comments", "author": null, "committer": null, "parents": [{"sha": "e0322d5ca59e5d8657799c2c5453319a89c7a5a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0322d5ca59e5d8657799c2c5453319a89c7a5a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0322d5ca59e5d8657799c2c5453319a89c7a5a5"}], "stats": {"total": 159, "additions": 139, "deletions": 20}, "files": [{"sha": "0aedfaae3c4e37ad67d04ee8d864cb8be2c6a57e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918ed612a1b2328a11887b7166bc07a9efde130f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918ed612a1b2328a11887b7166bc07a9efde130f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=918ed612a1b2328a11887b7166bc07a9efde130f", "patch": "@@ -1,3 +1,22 @@\n+2002-05-20  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n+\n+\t* basic_block.h (struct basic_block_def): Added prev_bb and next_bb\n+\tfields.\n+\t(FOR_BB_BETWEEN, FOR_ALL_BB, FOR_ALL_BB_REVERSE): New macros for\n+\ttraversing basic block chain.\n+\t(create_basic_block_structure, create_basic_block): Declaration changed.\n+\t(link_block, unlink_block): Declare.\n+\t* cfg.c (entry_exit_blocks): Initialize new fields.\n+\t(link_block, unlink_block): New.\n+\t(expunge_block_nocompact): Unlink basic block.\n+\t(dump_flow_info): Print prev_bb/next_bb fields.\n+\t* cfgbuild.c (find_basic_blocks_1, find_basic_blocks): Modified.\n+\t* cfgcleanup.c (merge_blocks_move_predecessor_nojumps): Modified.\n+\t* cfglayout.c (fixup_reorder_chain, cfg_layout_duplicate_bb): Modified.\n+\t* cfgrtl.c (create_basic_block_structure, create_basic_block,\n+\tsplit_block, force_nonfallthru_and_redirect, split_edge): Modified.\n+\t(verify_flow_info): Check that list agrees with numbering.\n+\n 2002-05-19  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* c-common.c (preprocessing_asm): New macro."}, {"sha": "cf0d13ad2d527e3fc6d7f99bce8072b31b4a3e05", "filename": "gcc/basic-block.h", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918ed612a1b2328a11887b7166bc07a9efde130f/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918ed612a1b2328a11887b7166bc07a9efde130f/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=918ed612a1b2328a11887b7166bc07a9efde130f", "patch": "@@ -206,6 +206,9 @@ typedef struct basic_block_def {\n   /* The index of this block.  */\n   int index;\n \n+  /* Previous and next blocks in the chain.  */\n+  struct basic_block_def *prev_bb, *next_bb;\n+\n   /* The loop depth of this block.  */\n   int loop_depth;\n \n@@ -240,6 +243,16 @@ extern varray_type basic_block_info;\n \n #define BASIC_BLOCK(N)  (VARRAY_BB (basic_block_info, (N)))\n \n+/* For iterating over basic blocks.  */\n+#define FOR_BB_BETWEEN(BB, FROM, TO, DIR) \\\n+  for (BB = FROM; BB != TO; BB = BB->DIR)\n+\n+#define FOR_EACH_BB(BB) \\\n+  FOR_BB_BETWEEN (BB, ENTRY_BLOCK_PTR->next_bb, EXIT_BLOCK_PTR, next_bb)\n+\n+#define FOR_EACH_BB_REVERSE(BB) \\\n+  FOR_BB_BETWEEN (BB, EXIT_BLOCK_PTR->prev_bb, ENTRY_BLOCK_PTR, prev_bb)\n+\n /* What registers are live at the setjmp call.  */\n \n extern regset regs_live_at_setjmp;\n@@ -314,8 +327,8 @@ extern void remove_edge\t\t\tPARAMS ((edge));\n extern void redirect_edge_succ\t\tPARAMS ((edge, basic_block));\n extern edge redirect_edge_succ_nodup\tPARAMS ((edge, basic_block));\n extern void redirect_edge_pred\t\tPARAMS ((edge, basic_block));\n-extern basic_block create_basic_block_structure PARAMS ((int, rtx, rtx, rtx));\n-extern basic_block create_basic_block\tPARAMS ((int, rtx, rtx));\n+extern basic_block create_basic_block_structure PARAMS ((int, rtx, rtx, rtx, basic_block));\n+extern basic_block create_basic_block\tPARAMS ((rtx, rtx, basic_block));\n extern int flow_delete_block\t\tPARAMS ((basic_block));\n extern int flow_delete_block_noexpunge\tPARAMS ((basic_block));\n extern void clear_bb_flags\t\tPARAMS ((void));\n@@ -644,6 +657,8 @@ extern void debug_regset\t\tPARAMS ((regset));\n extern void allocate_reg_life_data      PARAMS ((void));\n extern void allocate_bb_life_data\tPARAMS ((void));\n extern void expunge_block\t\tPARAMS ((basic_block));\n+extern void link_block\t\t\tPARAMS ((basic_block, basic_block));\n+extern void unlink_block\t\tPARAMS ((basic_block));\n extern void expunge_block_nocompact\tPARAMS ((basic_block));\n extern basic_block alloc_block\t\tPARAMS ((void));\n extern void find_unreachable_blocks\tPARAMS ((void));"}, {"sha": "d1045331e2b2cb89484c9389aeb23a71fc3265cb", "filename": "gcc/cfg.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918ed612a1b2328a11887b7166bc07a9efde130f/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918ed612a1b2328a11887b7166bc07a9efde130f/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=918ed612a1b2328a11887b7166bc07a9efde130f", "patch": "@@ -93,6 +93,8 @@ struct basic_block_def entry_exit_blocks[2]\n     NULL,\t\t\t/* global_live_at_end */\n     NULL,\t\t\t/* aux */\n     ENTRY_BLOCK,\t\t/* index */\n+    NULL,\t\t\t/* prev_bb */\n+    EXIT_BLOCK_PTR,\t\t/* next_bb */\n     0,\t\t\t\t/* loop_depth */\n     0,\t\t\t\t/* count */\n     0,\t\t\t\t/* frequency */\n@@ -111,6 +113,8 @@ struct basic_block_def entry_exit_blocks[2]\n     NULL,\t\t\t/* global_live_at_end */\n     NULL,\t\t\t/* aux */\n     EXIT_BLOCK,\t\t\t/* index */\n+    ENTRY_BLOCK_PTR,\t\t/* prev_bb */\n+    NULL,\t\t\t/* next_bb */\n     0,\t\t\t\t/* loop_depth */\n     0,\t\t\t\t/* count */\n     0,\t\t\t\t/* frequency */\n@@ -220,12 +224,35 @@ alloc_block ()\n   return bb;\n }\n \n+/* Link block B to chain after AFTER.  */\n+void\n+link_block (b, after)\n+     basic_block b, after;\n+{\n+  b->next_bb = after->next_bb;\n+  b->prev_bb = after;\n+  after->next_bb = b;\n+  b->next_bb->prev_bb = b;\n+}\n+  \n+/* Unlink block B from chain.  */\n+void\n+unlink_block (b)\n+     basic_block b;\n+{\n+  b->next_bb->prev_bb = b->prev_bb;\n+  b->prev_bb->next_bb = b->next_bb;\n+}\n+  \n+\n /* Remove block B from the basic block array and compact behind it.  */\n \n void\n expunge_block_nocompact (b)\n      basic_block b;\n {\n+  unlink_block (b);\n+\n   /* Invalidate data to make bughunting easier.  */\n   memset (b, 0, sizeof *b);\n   b->index = -3;\n@@ -521,6 +548,8 @@ dump_flow_info (file)\n \n       fprintf (file, \"\\nBasic block %d: first insn %d, last %d, \",\n \t       i, INSN_UID (bb->head), INSN_UID (bb->end));\n+      fprintf (file, \"prev %d, next %d, \",\n+\t       bb->prev_bb->index, bb->next_bb->index);\n       fprintf (file, \"loop_depth %d, count \", bb->loop_depth);\n       fprintf (file, HOST_WIDEST_INT_PRINT_DEC, bb->count);\n       fprintf (file, \", freq %i.\\n\", bb->frequency);"}, {"sha": "767b0dee0bc634b9a35f5c070dd430e8bbf1fa54", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918ed612a1b2328a11887b7166bc07a9efde130f/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918ed612a1b2328a11887b7166bc07a9efde130f/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=918ed612a1b2328a11887b7166bc07a9efde130f", "patch": "@@ -476,6 +476,7 @@ find_basic_blocks_1 (f)\n   rtx trll = NULL_RTX;\n   rtx head = NULL_RTX;\n   rtx end = NULL_RTX;\n+  basic_block prev = ENTRY_BLOCK_PTR;\n \n   /* We process the instructions in a slightly different way than we did\n      previously.  This is so that we see a NOTE_BASIC_BLOCK after we have\n@@ -492,7 +493,7 @@ find_basic_blocks_1 (f)\n       if ((GET_CODE (insn) == CODE_LABEL || GET_CODE (insn) == BARRIER)\n \t  && head)\n \t{\n-\t  create_basic_block_structure (i++, head, end, bb_note);\n+\t  prev = create_basic_block_structure (i++, head, end, bb_note, prev);\n \t  head = end = NULL_RTX;\n \t  bb_note = NULL_RTX;\n \t}\n@@ -506,7 +507,7 @@ find_basic_blocks_1 (f)\n \n       if (head && control_flow_insn_p (insn))\n \t{\n-\t  create_basic_block_structure (i++, head, end, bb_note);\n+\t  prev = create_basic_block_structure (i++, head, end, bb_note, prev);\n \t  head = end = NULL_RTX;\n \t  bb_note = NULL_RTX;\n \t}\n@@ -588,7 +589,7 @@ find_basic_blocks_1 (f)\n     }\n \n   if (head != NULL_RTX)\n-    create_basic_block_structure (i++, head, end, bb_note);\n+    create_basic_block_structure (i++, head, end, bb_note, prev);\n   else if (bb_note)\n     delete_insn (bb_note);\n \n@@ -633,6 +634,8 @@ find_basic_blocks (f, nregs, file)\n     }\n \n   n_basic_blocks = count_basic_blocks (f);\n+  ENTRY_BLOCK_PTR->next_bb = EXIT_BLOCK_PTR;\n+  EXIT_BLOCK_PTR->prev_bb = ENTRY_BLOCK_PTR;\n \n   /* Size the basic block table.  The actual structures will be allocated\n      by find_basic_blocks_1, since we want to keep the structure pointers"}, {"sha": "15dbec1f28b7b18f6bc292edd1f339d0f36b9df2", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918ed612a1b2328a11887b7166bc07a9efde130f/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918ed612a1b2328a11887b7166bc07a9efde130f/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=918ed612a1b2328a11887b7166bc07a9efde130f", "patch": "@@ -723,6 +723,9 @@ merge_blocks_move_predecessor_nojumps (a, b)\n   a->index = b->index;\n   b->index = index;\n \n+  unlink_block (a);\n+  link_block (a, b->prev_bb);\n+\n   /* Now blocks A and B are contiguous.  Merge them.  */\n   merge_blocks_nomove (a, b);\n }"}, {"sha": "b3cdf84b66a6ecd858ea749fd04a3015026e2046", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918ed612a1b2328a11887b7166bc07a9efde130f/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918ed612a1b2328a11887b7166bc07a9efde130f/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=918ed612a1b2328a11887b7166bc07a9efde130f", "patch": "@@ -357,7 +357,7 @@ scope_to_insns_finalize ()\n static void\n fixup_reorder_chain ()\n {\n-  basic_block bb;\n+  basic_block bb, prev_bb;\n   int index;\n   rtx insn = NULL;\n \n@@ -541,11 +541,20 @@ fixup_reorder_chain ()\n \t}\n     }\n \n-  for (bb = BASIC_BLOCK (0), index = 0; bb; bb = RBI (bb)->next, index ++)\n+  prev_bb = ENTRY_BLOCK_PTR;\n+  bb = BASIC_BLOCK (0);\n+  index = 0;\n+\n+  for (; bb; prev_bb = bb, bb = RBI (bb)->next, index ++)\n     {\n       bb->index = index;\n       BASIC_BLOCK (index) = bb;\n+\n+      bb->prev_bb = prev_bb;\n+      prev_bb->next_bb = bb;\n     }\n+  prev_bb->next_bb = EXIT_BLOCK_PTR;\n+  EXIT_BLOCK_PTR->prev_bb = prev_bb;\n }\n \f\n /* Perform sanity checks on the insn chain.\n@@ -871,8 +880,9 @@ cfg_layout_duplicate_bb (bb, e)\n #endif\n \n   insn = duplicate_insn_chain (bb->head, bb->end);\n-  new_bb = create_basic_block (n_basic_blocks, insn,\n-\t\t \t       insn ? get_last_insn () : NULL);\n+  new_bb = create_basic_block (insn,\n+\t\t \t       insn ? get_last_insn () : NULL,\n+\t\t\t       EXIT_BLOCK_PTR->prev_bb);\n   alloc_aux_for_block (new_bb, sizeof (struct reorder_block_def));\n \n   if (RBI (bb)->header)"}, {"sha": "1ce15ba8c6832cf7280d322dae8a09f8dee7c728", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 51, "deletions": 11, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918ed612a1b2328a11887b7166bc07a9efde130f/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918ed612a1b2328a11887b7166bc07a9efde130f/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=918ed612a1b2328a11887b7166bc07a9efde130f", "patch": "@@ -248,12 +248,14 @@ delete_insn_chain_and_edges (first, last)\n    the note and basic block struct in BB_NOTE, if any and do not grow\n    BASIC_BLOCK chain and should be used directly only by CFG construction code.\n    END can be NULL in to create new empty basic block before HEAD.  Both END\n-   and HEAD can be NULL to create basic block at the end of INSN chain.  */\n+   and HEAD can be NULL to create basic block at the end of INSN chain.\n+   AFTER is the basic block we should be put after.  */\n \n basic_block\n-create_basic_block_structure (index, head, end, bb_note)\n+create_basic_block_structure (index, head, end, bb_note, after)\n      int index;\n      rtx head, end, bb_note;\n+     basic_block after;\n {\n   basic_block bb;\n \n@@ -311,6 +313,7 @@ create_basic_block_structure (index, head, end, bb_note)\n   bb->end = end;\n   bb->index = index;\n   bb->flags = BB_NEW;\n+  link_block (bb, after);\n   BASIC_BLOCK (index) = bb;\n   if (basic_block_for_insn)\n     update_bb_for_insn (bb);\n@@ -323,17 +326,18 @@ create_basic_block_structure (index, head, end, bb_note)\n }\n \n /* Create new basic block consisting of instructions in between HEAD and END\n-   and place it to the BB chain at position INDEX.  END can be NULL in to\n+   and place it to the BB chain after block AFTER.  END can be NULL in to\n    create new empty basic block before HEAD.  Both END and HEAD can be NULL to\n    create basic block at the end of INSN chain.  */\n \n basic_block\n-create_basic_block (index, head, end)\n-     int index;\n+create_basic_block (head, end, after)\n      rtx head, end;\n+     basic_block after;\n {\n   basic_block bb;\n   int i;\n+  int index = after->index + 1;\n \n   /* Place the new block just after the block being split.  */\n   VARRAY_GROW (basic_block_info, ++n_basic_blocks);\n@@ -349,7 +353,7 @@ create_basic_block (index, head, end)\n       tmp->index = i;\n     }\n \n-  bb = create_basic_block_structure (index, head, end, NULL);\n+  bb = create_basic_block_structure (index, head, end, NULL, after);\n   bb->aux = NULL;\n   return bb;\n }\n@@ -537,7 +541,7 @@ split_block (bb, insn)\n     return 0;\n \n   /* Create the new basic block.  */\n-  new_bb = create_basic_block (bb->index + 1, NEXT_INSN (insn), bb->end);\n+  new_bb = create_basic_block (NEXT_INSN (insn), bb->end, bb);\n   new_bb->count = bb->count;\n   new_bb->frequency = bb->frequency;\n   new_bb->loop_depth = bb->loop_depth;\n@@ -998,7 +1002,7 @@ force_nonfallthru_and_redirect (e, target)\n       /* We can't redirect the entry block.  Create an empty block at the\n          start of the function which we use to add the new jump.  */\n       edge *pe1;\n-      basic_block bb = create_basic_block (0, e->dest->head, NULL);\n+      basic_block bb = create_basic_block (e->dest->head, NULL, ENTRY_BLOCK_PTR);\n \n       /* Change the existing edge's source to be the new block, and add\n \t a new edge from the entry block to the new block.  */\n@@ -1019,7 +1023,7 @@ force_nonfallthru_and_redirect (e, target)\n       /* Create the new structures.  */\n       note = last_loop_beg_note (e->src->end);\n       jump_block\n-\t= create_basic_block (e->src->index + 1, NEXT_INSN (note), NULL);\n+\t= create_basic_block (NEXT_INSN (note), NULL, e->src);\n       jump_block->count = e->count;\n       jump_block->frequency = EDGE_FREQUENCY (e);\n       jump_block->loop_depth = target->loop_depth;\n@@ -1286,8 +1290,7 @@ split_edge (edge_in)\n   else\n     before = NULL_RTX;\n \n-  bb = create_basic_block (edge_in->dest == EXIT_BLOCK_PTR ? n_basic_blocks\n-\t\t\t   : edge_in->dest->index, before, NULL);\n+  bb = create_basic_block (before, NULL, edge_in->dest->prev_bb);\n   bb->count = edge_in->count;\n   bb->frequency = EDGE_FREQUENCY (edge_in);\n \n@@ -1719,12 +1722,49 @@ verify_flow_info ()\n   size_t *edge_checksum;\n   rtx x;\n   int i, last_bb_num_seen, num_bb_notes, err = 0;\n+  basic_block bb, last_bb_seen;\n \n   bb_info = (basic_block *) xcalloc (max_uid, sizeof (basic_block));\n   last_visited = (basic_block *) xcalloc (n_basic_blocks + 2,\n \t\t\t\t\t  sizeof (basic_block));\n   edge_checksum = (size_t *) xcalloc (n_basic_blocks + 2, sizeof (size_t));\n \n+  /* Check bb chain & numbers.  */\n+  last_bb_seen = ENTRY_BLOCK_PTR;\n+  FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR->next_bb, NULL, next_bb)\n+    {\n+      if (bb != EXIT_BLOCK_PTR\n+\t  && bb != BASIC_BLOCK (bb->index))\n+\t{\n+\t  error (\"bb %d on wrong place\", bb->index);\n+\t  err = 1;\n+\t}\n+\n+      if (bb->prev_bb != last_bb_seen)\n+\t{\n+\t  error (\"prev_bb of %d should be %d, not %d\",\n+\t\t bb->index, last_bb_seen->index, bb->prev_bb->index);\n+\t  err = 1;\n+\t}\n+\n+      /* For now, also check that we didn't change the order.  */\n+      if (bb != EXIT_BLOCK_PTR && bb->index != last_bb_seen->index + 1)\n+\t{\n+\t  error (\"Wrong order of blocks %d and %d\",\n+\t\t last_bb_seen->index, bb->index);\n+\t  err = 1;\n+\t}\n+\n+      if (bb == EXIT_BLOCK_PTR && last_bb_seen->index != n_basic_blocks - 1)\n+\t{\n+\t  error (\"Only %d of %d blocks in chain\",\n+\t\t last_bb_seen->index + 1, n_basic_blocks);\n+\t  err = 1;\n+\t}\n+\n+      last_bb_seen = bb;\n+    }\n+\n   for (i = n_basic_blocks - 1; i >= 0; i--)\n     {\n       basic_block bb = BASIC_BLOCK (i);"}]}