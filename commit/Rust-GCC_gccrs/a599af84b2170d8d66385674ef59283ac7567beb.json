{"sha": "a599af84b2170d8d66385674ef59283ac7567beb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU5OWFmODRiMjE3MGQ4ZDY2Mzg1Njc0ZWY1OTI4M2FjNzU2N2JlYg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2018-09-20T01:56:58Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2018-09-20T01:56:58Z"}, "message": "Add -Wclass-conversion.\n\n\t* c.opt (Wclass-conversion): New.\n\n\t* decl.c (grok_op_properties): Change a warning from -Wconversion to\n\t-Wclass-conversion.  Make it print the types.\n\n\t* doc/invoke.texi: Document -Wclass-conversion.\n\n\t* g++.dg/conversion/op4.C: Add dg-warning.\n\t* g++.dg/warn/Wclass-conversion1.C: New test.\n\t* g++.dg/warn/Wclass-conversion2.C: New test.\n\t* g++.dg/warn/Wconversion5.C: Remove file.\n\t* g++.dg/warn/conversion-function-1.C: Use -Wno-class-converison.\n\t* g++.old-deja/g++.bugs/900215_01.C: Adjust dg-warning.\n\t* g++.old-deja/g++.jason/conversion5.C: Likewise.\n\nFrom-SVN: r264438", "tree": {"sha": "bf068ca7002b41bbcd5a22acbec77ab45d67f0ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf068ca7002b41bbcd5a22acbec77ab45d67f0ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a599af84b2170d8d66385674ef59283ac7567beb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a599af84b2170d8d66385674ef59283ac7567beb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a599af84b2170d8d66385674ef59283ac7567beb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a599af84b2170d8d66385674ef59283ac7567beb/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cf16d179d570e9a5535267b92e0f9e71756483b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf16d179d570e9a5535267b92e0f9e71756483b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf16d179d570e9a5535267b92e0f9e71756483b0"}], "stats": {"total": 129, "additions": 93, "deletions": 36}, "files": [{"sha": "728799d70a669dcc0205c5104b77699ae485dc4b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a599af84b2170d8d66385674ef59283ac7567beb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a599af84b2170d8d66385674ef59283ac7567beb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a599af84b2170d8d66385674ef59283ac7567beb", "patch": "@@ -1,3 +1,7 @@\n+2018-09-19  Marek Polacek  <polacek@redhat.com>\n+\n+\t* doc/invoke.texi: Document -Wclass-conversion.\n+\n 2018-09-19  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config/pa/pa.c (pa_adjust_priority): Delete."}, {"sha": "8fc773cac2ed8504cd711d1615db35f235520e33", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a599af84b2170d8d66385674ef59283ac7567beb/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a599af84b2170d8d66385674ef59283ac7567beb/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a599af84b2170d8d66385674ef59283ac7567beb", "patch": "@@ -1,3 +1,7 @@\n+2018-09-19  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c.opt (Wclass-conversion): New.\n+\n 2018-09-17  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-format.c (range_label_for_format_type_mismatch::get_text):"}, {"sha": "43d1d27ac00d496af6384a9b2b4cbdfdcf3933d9", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a599af84b2170d8d66385674ef59283ac7567beb/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a599af84b2170d8d66385674ef59283ac7567beb/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=a599af84b2170d8d66385674ef59283ac7567beb", "patch": "@@ -850,6 +850,10 @@ Wnon-template-friend\n C++ ObjC++ Var(warn_nontemplate_friend) Init(1) Warning\n Warn when non-templatized friend functions are declared within a template.\n \n+Wclass-conversion\n+C++ ObjC++ Var(warn_class_conversion) Init(1) Warning\n+Warn when a conversion function will never be called due to the type it converts to.\n+\n Wclass-memaccess\n C++ ObjC++ Var(warn_class_memaccess) Warning LangEnabledBy(C++ ObjC++, Wall)\n Warn for unsafe raw memory writes to objects of class types."}, {"sha": "75286d53fdba361d43849aaf643e7409b1f78958", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a599af84b2170d8d66385674ef59283ac7567beb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a599af84b2170d8d66385674ef59283ac7567beb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a599af84b2170d8d66385674ef59283ac7567beb", "patch": "@@ -1,3 +1,9 @@\n+2018-09-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tAdd -Wclass-conversion.\n+\t* decl.c (grok_op_properties): Change a warning from -Wconversion to\n+\t-Wclass-conversion.  Make it print the types.\n+\n 2018-09-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/87324"}, {"sha": "2d9d56ef6e1090dd043959bb66f1cb2efb3696f6", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a599af84b2170d8d66385674ef59283ac7567beb/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a599af84b2170d8d66385674ef59283ac7567beb/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a599af84b2170d8d66385674ef59283ac7567beb", "patch": "@@ -13544,7 +13544,7 @@ grok_op_properties (tree decl, bool complain)\n   /* Warn about conversion operators that will never be used.  */\n   if (IDENTIFIER_CONV_OP_P (name)\n       && ! DECL_TEMPLATE_INFO (decl)\n-      && warn_conversion)\n+      && warn_class_conversion)\n     {\n       tree t = TREE_TYPE (name);\n       int ref = TYPE_REF_P (t);\n@@ -13553,27 +13553,29 @@ grok_op_properties (tree decl, bool complain)\n \tt = TYPE_MAIN_VARIANT (TREE_TYPE (t));\n \n       if (VOID_TYPE_P (t))\n-\twarning_at (loc, OPT_Wconversion, \"conversion to void \"\n-\t\t    \"will never use a type conversion operator\");\n+\twarning_at (loc, OPT_Wclass_conversion, \"converting %qT to %<void%> \"\n+\t\t    \"will never use a type conversion operator\", class_type);\n       else if (class_type)\n \t{\n \t  if (same_type_ignoring_top_level_qualifiers_p (t, class_type))\n-\t    warning_at (loc, OPT_Wconversion,\n+\t    warning_at (loc, OPT_Wclass_conversion,\n \t\t\tref\n-\t\t\t? G_(\"conversion to a reference to the same type \"\n+\t\t\t? G_(\"converting %qT to a reference to the same type \"\n \t\t\t     \"will never use a type conversion operator\")\n-\t\t\t: G_(\"conversion to the same type \"\n-\t\t\t     \"will never use a type conversion operator\"));\n+\t\t\t: G_(\"converting %qT to the same type \"\n+\t\t\t     \"will never use a type conversion operator\"),\n+\t\t\tclass_type);\n \t  /* Don't force t to be complete here.  */\n \t  else if (MAYBE_CLASS_TYPE_P (t)\n \t\t   && COMPLETE_TYPE_P (t)\n \t\t   && DERIVED_FROM_P (t, class_type))\n-\t    warning_at (loc, OPT_Wconversion,\n+\t    warning_at (loc, OPT_Wclass_conversion,\n \t\t\tref\n-\t\t\t? G_(\"conversion to a reference to a base class \"\n-\t\t\t     \"will never use a type conversion operator\")\n-\t\t\t: G_(\"conversion to a base class \"\n-\t\t\t     \"will never use a type conversion operator\"));\n+\t\t\t? G_(\"converting %qT to a reference to a base class \"\n+\t\t\t     \"%qT will never use a type conversion operator\")\n+\t\t\t: G_(\"converting %qT to a base class %qT \"\n+\t\t\t     \"will never use a type conversion operator\"),\n+\t\t\tclass_type, t);\n \t}\n     }\n "}, {"sha": "aab5fcec35ae98daa5bffdddb8842ad41549fe96", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a599af84b2170d8d66385674ef59283ac7567beb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a599af84b2170d8d66385674ef59283ac7567beb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a599af84b2170d8d66385674ef59283ac7567beb", "patch": "@@ -237,6 +237,7 @@ in the following sections.\n -Weffc++  -Wstrict-null-sentinel  -Wtemplates @gol\n -Wno-non-template-friend  -Wold-style-cast @gol\n -Woverloaded-virtual  -Wno-pmf-conversions @gol\n+-Wno-class-conversion  -Wno-terminate @gol\n -Wsign-promo  -Wvirtual-inheritance}\n \n @item Objective-C and Objective-C++ Language Options\n@@ -3367,6 +3368,13 @@ use the STL.  One may also use using directives and qualified names.\n @opindex Wno-terminate\n Disable the warning about a throw-expression that will immediately\n result in a call to @code{terminate}.\n+\n+@item -Wno-class-conversion @r{(C++ and Objective-C++ only)}\n+@opindex Wno-class-conversion\n+@opindex Wclass-conversion\n+Disable the warning about the case when a conversion function converts an\n+object to the same type, to a base class of that type, or to void; such\n+a conversion function will never be called.\n @end table\n \n @node Objective-C and Objective-C++ Dialect Options"}, {"sha": "25f61d2f7f162ec0da3c6c39ac8a6fa73d1493f7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a599af84b2170d8d66385674ef59283ac7567beb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a599af84b2170d8d66385674ef59283ac7567beb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a599af84b2170d8d66385674ef59283ac7567beb", "patch": "@@ -1,3 +1,13 @@\n+2018-09-19  Marek Polacek  <polacek@redhat.com>\n+\n+\t* g++.dg/conversion/op4.C: Add dg-warning.\n+\t* g++.dg/warn/Wclass-conversion1.C: New test.\n+\t* g++.dg/warn/Wclass-conversion2.C: New test.\n+\t* g++.dg/warn/Wconversion5.C: Remove file.\n+\t* g++.dg/warn/conversion-function-1.C: Use -Wno-class-converison.\n+\t* g++.old-deja/g++.bugs/900215_01.C: Adjust dg-warning.\n+\t* g++.old-deja/g++.jason/conversion5.C: Likewise.\n+\n 2018-09-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/87324"}, {"sha": "3fb850cb8256bb0436a28c63c4f3f7f14b8dd13e", "filename": "gcc/testsuite/g++.dg/conversion/op4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a599af84b2170d8d66385674ef59283ac7567beb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fop4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a599af84b2170d8d66385674ef59283ac7567beb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fop4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fop4.C?ref=a599af84b2170d8d66385674ef59283ac7567beb", "patch": "@@ -4,7 +4,7 @@\n struct X {\n   int x;\n   X (int i = 0) : x (i) {}\n-  operator X& (void) const {\n+  operator X& (void) const { // { dg-warning \"will never use\" }\n     return *(new X);\n   }\n };"}, {"sha": "2599a53dbeb54c8e65f60443a8a893cec822e2e5", "filename": "gcc/testsuite/g++.dg/warn/Wclass-conversion1.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a599af84b2170d8d66385674ef59283ac7567beb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWclass-conversion1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a599af84b2170d8d66385674ef59283ac7567beb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWclass-conversion1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWclass-conversion1.C?ref=a599af84b2170d8d66385674ef59283ac7567beb", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/87357\n+// { dg-do compile }\n+\n+struct B { };\n+\n+struct X : public B {\n+  operator X(); // { dg-warning \"3:converting .X. to the same type will never use a type conversion operator\" }\n+  operator X&(); // { dg-warning \"3:converting .X. to a reference to the same type will never use a type conversion operator\" }\n+  operator X() const; // { dg-warning \"3:converting .X. to the same type will never use a type conversion operator\" }\n+  operator const X(); // { dg-warning \"3:converting .X. to the same type will never use a type conversion operator\" }\n+\n+  operator B(); // { dg-warning \"3:converting .X. to a base class .B. will never use a type conversion operator\" }\n+  operator B&(); // { dg-warning \"3:converting .X. to a reference to a base class .B. will never use a type conversion operator\" }\n+  operator B() const; // { dg-warning \"3:converting .X. to a base class .B. will never use a type conversion operator\" }\n+  operator const B(); // { dg-warning \"3:converting .X. to a base class .const B. will never use a type conversion operator\" }\n+\n+  operator void(); // { dg-warning \"3:converting .X. to .void. will never use a type conversion operator\" }\n+  operator void() const; // { dg-warning \"3:converting .X. to .void. will never use a type conversion operator\" }\n+};"}, {"sha": "b6919f0bfeaba0d67c8529a07b8819a772850f6b", "filename": "gcc/testsuite/g++.dg/warn/Wclass-conversion2.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a599af84b2170d8d66385674ef59283ac7567beb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWclass-conversion2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a599af84b2170d8d66385674ef59283ac7567beb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWclass-conversion2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWclass-conversion2.C?ref=a599af84b2170d8d66385674ef59283ac7567beb", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/87357\n+// { dg-do compile }\n+// { dg-options \"-Wno-class-conversion\" }\n+\n+struct B { };\n+\n+struct X : public B {\n+  operator X(); // { dg-bogus \"3:converting .X. to the same type will never use a type conversion operator\" }\n+  operator X&(); // { dg-bogus \"3:converting .X. to a reference to the same type will never use a type conversion operator\" }\n+  operator X() const; // { dg-bogus \"3:converting .X. to the same type will never use a type conversion operator\" }\n+  operator const X(); // { dg-bogus \"3:converting .X. to the same type will never use a type conversion operator\" }\n+\n+  operator B(); // { dg-bogus \"3:converting .X. to a base class .B. will never use a type conversion operator\" }\n+  operator B&(); // { dg-bogus \"3:converting .X. to a reference to a base class .B. will never use a type conversion operator\" }\n+  operator B() const; // { dg-bogus \"3:converting .X. to a base class .B. will never use a type conversion operator\" }\n+  operator const B(); // { dg-bogus \"3:converting .X. to a base class .const B. will never use a type conversion operator\" }\n+\n+  operator void(); // { dg-bogus \"3:converting .X. to .void. will never use a type conversion operator\" }\n+  operator void() const; // { dg-bogus \"3:converting .X. to .void. will never use a type conversion operator\" }\n+};"}, {"sha": "00b1ddab18831cf3954f34af40f5b0eeaac3ecaf", "filename": "gcc/testsuite/g++.dg/warn/Wconversion5.C", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf16d179d570e9a5535267b92e0f9e71756483b0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf16d179d570e9a5535267b92e0f9e71756483b0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion5.C?ref=cf16d179d570e9a5535267b92e0f9e71756483b0", "patch": "@@ -1,20 +0,0 @@\n-// PR c++/87357\n-// { dg-do compile }\n-// { dg-options \"-Wconversion\" }\n-\n-struct B { };\n-\n-struct X : public B {\n-  operator X(); // { dg-warning \"3:conversion to the same type will never use a type conversion operator\" }\n-  operator X&(); // { dg-warning \"3:conversion to a reference to the same type will never use a type conversion operator\" }\n-  operator X() const; // { dg-warning \"3:conversion to the same type will never use a type conversion operator\" }\n-  operator const X(); // { dg-warning \"3:conversion to the same type will never use a type conversion operator\" }\n-\n-  operator B(); // { dg-warning \"3:conversion to a base class will never use a type conversion operator\" }\n-  operator B&(); // { dg-warning \"3:conversion to a reference to a base class will never use a type conversion operator\" }\n-  operator B() const; // { dg-warning \"3:conversion to a base class will never use a type conversion operator\" }\n-  operator const B(); // { dg-warning \"3:conversion to a base class will never use a type conversion operator\" }\n-\n-  operator void(); // { dg-warning \"3:conversion to void will never use a type conversion operator\" }\n-  operator void() const; // { dg-warning \"3:conversion to void will never use a type conversion operator\" }\n-};"}, {"sha": "890719b347705dc4d92853f0e77069437b6d5a8e", "filename": "gcc/testsuite/g++.dg/warn/conversion-function-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a599af84b2170d8d66385674ef59283ac7567beb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fconversion-function-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a599af84b2170d8d66385674ef59283ac7567beb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fconversion-function-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fconversion-function-1.C?ref=a599af84b2170d8d66385674ef59283ac7567beb", "patch": "@@ -1,6 +1,6 @@\n // Copyright (C) 2003 Free Software Foundation\n // Contributed by Gabriel Dos Reis <gdr@integrable-solutions.net>\n-// { dg-options \"-Wno-conversion\" }\n+// { dg-options \"-Wno-class-conversion\" }\n \n struct A {\n    operator A&();"}, {"sha": "fd075685cec5ceae47b78401c329eb140f8658db", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900215_01.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a599af84b2170d8d66385674ef59283ac7567beb/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900215_01.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a599af84b2170d8d66385674ef59283ac7567beb/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900215_01.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900215_01.C?ref=a599af84b2170d8d66385674ef59283ac7567beb", "patch": "@@ -24,7 +24,7 @@\n \n struct struct0 {\n \n-  operator void ();  // { dg-warning \"3:conversion to void will never use a type conversion operator\" }\n+  operator void ();  // { dg-warning \"3:converting .struct0. to .void. will never use a type conversion operator\" }\n };\n \n int exit_status = 1;"}, {"sha": "7f04de48378a4b399f1c39701bf5eec856b4ee85", "filename": "gcc/testsuite/g++.old-deja/g++.jason/conversion5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a599af84b2170d8d66385674ef59283ac7567beb/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fconversion5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a599af84b2170d8d66385674ef59283ac7567beb/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fconversion5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fconversion5.C?ref=a599af84b2170d8d66385674ef59283ac7567beb", "patch": "@@ -3,7 +3,7 @@\n struct A { };\n struct B: public A {\n   A a;\n-  operator A () { return a; }  // { dg-warning \"3:conversion to a base class will never use a type conversion operator\" }\n+  operator A () { return a; }  // { dg-warning \"3:converting .B. to a base class .A. will never use a type conversion operator\" }\n };\n void f (const A&);\n void g()"}]}