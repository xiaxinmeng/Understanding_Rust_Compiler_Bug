{"sha": "300ef2fcc10e98359d14654be23bbb84a5d141e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAwZWYyZmNjMTBlOTgzNTlkMTQ2NTRiZTIzYmJiODRhNWQxNDFlMQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2020-08-20T17:17:59Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2020-08-20T17:17:59Z"}, "message": "This patch fixes PRs 96100 and 96101.\n\n2020-08-20  Paul Thomas  <pault@gcc.gnu.org>\n\ngcc/fortran\n\tPR fortran/96100\n\tPR fortran/96101\n\t* trans-array.c (get_array_charlen): Tidy up the evaluation of\n\tthe string length for array constructors. Avoid trailing array\n\treferences. Ensure string lengths of deferred length components\n\tare set. For parentheses operator apply string  length to both\n\tthe primary expression and the enclosed expression.\n\ngcc/testsuite/\n\tPR fortran/96100\n\tPR fortran/96101\n\t* gfortran.dg/char_length_23.f90: New test.", "tree": {"sha": "cd5bce5baae38b11019b71f7396d1ddafb5f1367", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd5bce5baae38b11019b71f7396d1ddafb5f1367"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/300ef2fcc10e98359d14654be23bbb84a5d141e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/300ef2fcc10e98359d14654be23bbb84a5d141e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/300ef2fcc10e98359d14654be23bbb84a5d141e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/300ef2fcc10e98359d14654be23bbb84a5d141e1/comments", "author": null, "committer": null, "parents": [{"sha": "d241134695a3a28da92ebdfcf35e7ee7385adaf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d241134695a3a28da92ebdfcf35e7ee7385adaf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d241134695a3a28da92ebdfcf35e7ee7385adaf4"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "0e3495d59cc6f96e82e89beace25fca1c3beb20b", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300ef2fcc10e98359d14654be23bbb84a5d141e1/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300ef2fcc10e98359d14654be23bbb84a5d141e1/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=300ef2fcc10e98359d14654be23bbb84a5d141e1", "patch": "@@ -7018,7 +7018,12 @@ get_array_charlen (gfc_expr *expr, gfc_se *se)\n       e = gfc_constructor_first (expr->value.constructor)->expr;\n \n       gfc_init_se (&tse, NULL);\n+\n+      /* Avoid evaluating trailing array references since all we need is\n+\t the string length.  */\n       if (e->rank)\n+\ttse.descriptor_only = 1;\n+      if (e->rank && e->expr_type != EXPR_VARIABLE)\n \tgfc_conv_expr_descriptor (&tse, e);\n       else\n \tgfc_conv_expr (&tse, e);\n@@ -7036,14 +7041,26 @@ get_array_charlen (gfc_expr *expr, gfc_se *se)\n       gfc_add_modify (&se->pre, expr->ts.u.cl->backend_decl,\n \t\t      tse.string_length);\n \n+      /* Make sure that deferred length components point to the hidden\n+\t string_length component.  */\n+      if (TREE_CODE (tse.expr) == COMPONENT_REF\n+\t  && TREE_CODE (tse.string_length) == COMPONENT_REF\n+\t  && TREE_OPERAND (tse.expr, 0) == TREE_OPERAND (tse.string_length, 0))\n+\te->ts.u.cl->backend_decl = expr->ts.u.cl->backend_decl;\n+\n       return;\n \n     case EXPR_OP:\n       get_array_charlen (expr->value.op.op1, se);\n \n-      /* For parentheses the expression ts.u.cl is identical.  */\n+      /* For parentheses the expression ts.u.cl should be identical.  */\n       if (expr->value.op.op == INTRINSIC_PARENTHESES)\n-\treturn;\n+\t{\n+\t  if (expr->value.op.op1->ts.u.cl != expr->ts.u.cl)\n+\t    expr->ts.u.cl->backend_decl\n+\t\t\t= expr->value.op.op1->ts.u.cl->backend_decl;\n+\t  return;\n+\t}\n \n       expr->ts.u.cl->backend_decl =\n \t\tgfc_create_var (gfc_charlen_type_node, \"sln\");"}, {"sha": "e9ddbc7b8fd51e4c2f8e49571d058389ab6de1e8", "filename": "gcc/testsuite/gfortran.dg/char_length_23.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/300ef2fcc10e98359d14654be23bbb84a5d141e1/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_length_23.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/300ef2fcc10e98359d14654be23bbb84a5d141e1/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_length_23.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_length_23.f90?ref=300ef2fcc10e98359d14654be23bbb84a5d141e1", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do compile }\n+!\n+! Test the fix for PRs 96100 and 96101.\n+!\n+! Contributed by Gerhardt Steinmetz  <gscfq@t-online.de>\n+!\n+program p\n+   type t\n+      character(:), allocatable :: c(:)\n+   end type\n+   type(t) :: x\n+   character(:), allocatable :: w\n+\n+! PR96100\n+   allocate(x%c(2), source = 'def')\n+   associate (y => [x%c(1:1)])       ! ICE\n+     print *,y\n+   end associate\n+\n+! PR96101\n+   associate (y => ([w(:)]))\n+      print *, y                     ! ICE\n+   end associate\n+\n+end"}]}