{"sha": "281e33e1bb62f77b7f999213da93db0088d08e1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgxZTMzZTFiYjYyZjc3YjdmOTk5MjEzZGE5M2RiMDA4OGQwOGUxZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-11-25T20:28:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-11-25T20:28:56Z"}, "message": "re PR fortran/42162 (OpenMP: ICE: tree check in omp_add_variable, at gimplify.c:5282)\n\n\tPR fortran/42162\n\t* trans-openmp.c (gfc_trans_omp_do): When dovar isn't a VAR_DECL,\n\tdon't use simple loop and handle clauses properly.\n\n\t* testsuite/libgomp.fortran/pr42162.f90: New test.\n\nFrom-SVN: r154654", "tree": {"sha": "e09f0b243a46a3ff9e7a5acdd73e3b23f01bee52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e09f0b243a46a3ff9e7a5acdd73e3b23f01bee52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/281e33e1bb62f77b7f999213da93db0088d08e1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/281e33e1bb62f77b7f999213da93db0088d08e1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/281e33e1bb62f77b7f999213da93db0088d08e1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/281e33e1bb62f77b7f999213da93db0088d08e1d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fc07d9e3cb53293002fde46afb834aa965bab195", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc07d9e3cb53293002fde46afb834aa965bab195", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc07d9e3cb53293002fde46afb834aa965bab195"}], "stats": {"total": 90, "additions": 81, "deletions": 9}, "files": [{"sha": "2ca0e243122131b0bfa99da354880ee27316f1e8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/281e33e1bb62f77b7f999213da93db0088d08e1d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/281e33e1bb62f77b7f999213da93db0088d08e1d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=281e33e1bb62f77b7f999213da93db0088d08e1d", "patch": "@@ -1,3 +1,9 @@\n+2009-11-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/42162\n+\t* trans-openmp.c (gfc_trans_omp_do): When dovar isn't a VAR_DECL,\n+\tdon't use simple loop and handle clauses properly.\n+\n 2009-11-24  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/42008"}, {"sha": "7343d1ad0da9d8b6b1972594b3851a0fb59bb45c", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/281e33e1bb62f77b7f999213da93db0088d08e1d/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/281e33e1bb62f77b7f999213da93db0088d08e1d/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=281e33e1bb62f77b7f999213da93db0088d08e1d", "patch": "@@ -1160,6 +1160,7 @@ gfc_trans_omp_do (gfc_code *code, stmtblock_t *pblock,\n     {\n       int simple = 0;\n       int dovar_found = 0;\n+      tree dovar_decl;\n \n       if (clauses)\n \t{\n@@ -1200,12 +1201,19 @@ gfc_trans_omp_do (gfc_code *code, stmtblock_t *pblock,\n       gfc_conv_expr_val (&se, code->ext.iterator->step);\n       gfc_add_block_to_block (pblock, &se.pre);\n       step = gfc_evaluate_now (se.expr, pblock);\n+      dovar_decl = dovar;\n \n       /* Special case simple loops.  */\n-      if (integer_onep (step))\n-\tsimple = 1;\n-      else if (tree_int_cst_equal (step, integer_minus_one_node))\n-\tsimple = -1;\n+      if (TREE_CODE (dovar) == VAR_DECL)\n+\t{\n+\t  if (integer_onep (step))\n+\t    simple = 1;\n+\t  else if (tree_int_cst_equal (step, integer_minus_one_node))\n+\t    simple = -1;\n+\t}\n+      else\n+\tdovar_decl\n+\t  = gfc_trans_omp_variable (code->ext.iterator->var->symtree->n.sym);\n \n       /* Loop body.  */\n       if (simple)\n@@ -1249,7 +1257,7 @@ gfc_trans_omp_do (gfc_code *code, stmtblock_t *pblock,\n       if (!dovar_found)\n \t{\n \t  tmp = build_omp_clause (input_location, OMP_CLAUSE_PRIVATE);\n-\t  OMP_CLAUSE_DECL (tmp) = dovar;\n+\t  OMP_CLAUSE_DECL (tmp) = dovar_decl;\n \t  omp_clauses = gfc_trans_add_clause (tmp, omp_clauses);\n \t}\n       else if (dovar_found == 2)\n@@ -1269,7 +1277,7 @@ gfc_trans_omp_do (gfc_code *code, stmtblock_t *pblock,\n \t      tmp = fold_build2 (MODIFY_EXPR, type, dovar, tmp);\n \t      for (c = omp_clauses; c ; c = OMP_CLAUSE_CHAIN (c))\n \t\tif (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_LASTPRIVATE\n-\t\t    && OMP_CLAUSE_DECL (c) == dovar)\n+\t\t    && OMP_CLAUSE_DECL (c) == dovar_decl)\n \t\t  {\n \t\t    OMP_CLAUSE_LASTPRIVATE_STMT (c) = tmp;\n \t\t    break;\n@@ -1279,11 +1287,11 @@ gfc_trans_omp_do (gfc_code *code, stmtblock_t *pblock,\n \t    {\n \t      for (c = par_clauses; c ; c = OMP_CLAUSE_CHAIN (c))\n \t\tif (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_LASTPRIVATE\n-\t\t    && OMP_CLAUSE_DECL (c) == dovar)\n+\t\t    && OMP_CLAUSE_DECL (c) == dovar_decl)\n \t\t  {\n \t\t    tree l = build_omp_clause (input_location,\n \t\t\t\t\t       OMP_CLAUSE_LASTPRIVATE);\n-\t\t    OMP_CLAUSE_DECL (l) = dovar;\n+\t\t    OMP_CLAUSE_DECL (l) = dovar_decl;\n \t\t    OMP_CLAUSE_CHAIN (l) = omp_clauses;\n \t\t    OMP_CLAUSE_LASTPRIVATE_STMT (l) = tmp;\n \t\t    omp_clauses = l;"}, {"sha": "070d82f2ac80bda597a3cc700542991619485e62", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/281e33e1bb62f77b7f999213da93db0088d08e1d/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/281e33e1bb62f77b7f999213da93db0088d08e1d/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=281e33e1bb62f77b7f999213da93db0088d08e1d", "patch": "@@ -1,7 +1,12 @@\n+2009-11-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/42162\n+\t* testsuite/libgomp.fortran/pr42162.f90: New test.\n+\n 2009-11-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/42029\n-\t* libgomp.c/pr42029.c: New test.\n+\t* testsuite/libgomp.c/pr42029.c: New test.\n \n 2009-10-26  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "dbcc3b71d9b4a0c06d7d1f7a50f9d1caf003a710", "filename": "libgomp/testsuite/libgomp.fortran/pr42162.f90", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/281e33e1bb62f77b7f999213da93db0088d08e1d/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr42162.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/281e33e1bb62f77b7f999213da93db0088d08e1d/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr42162.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr42162.f90?ref=281e33e1bb62f77b7f999213da93db0088d08e1d", "patch": "@@ -0,0 +1,53 @@\n+! PR fortran/42162\n+! { dg-do run }\n+\n+subroutine sub1(k, a)\n+  implicit none\n+  integer :: k, a(3)\n+  !$omp do\n+    do k=1,3\n+      a(k) = a(k) + 1\n+    enddo\n+  !$omp end do\n+end subroutine sub1\n+\n+subroutine sub2(k, a)\n+  implicit none\n+  integer :: k, a(3)\n+  !$omp do private (k)\n+    do k=1,3\n+      a(k) = a(k) + 1\n+    enddo\n+  !$omp end do\n+end subroutine sub2\n+\n+subroutine sub3(k, a)\n+  implicit none\n+  integer :: k, a(3)\n+  !$omp do lastprivate (k)\n+    do k=1,3\n+      a(k) = a(k) + 1\n+    enddo\n+  !$omp end do\n+end subroutine sub3\n+\n+program pr42162\n+  implicit none\n+  integer :: k, a(3), b(3), c(3)\n+  a = 1\n+  b = 2\n+  c = 3\n+  k = 3\n+  !$omp parallel num_threads(3)\n+  call sub1 (k, a)\n+  !$omp end parallel\n+  k = 4\n+  !$omp parallel num_threads(3)\n+  call sub2 (k, b)\n+  !$omp end parallel\n+  k = 10\n+  !$omp parallel num_threads(3)\n+  call sub3 (k, c)\n+  !$omp end parallel\n+  if (k.ne.4.or.any(a.ne.2).or.any(b.ne.3).or.any(c.ne.4)) call abort\n+end"}]}