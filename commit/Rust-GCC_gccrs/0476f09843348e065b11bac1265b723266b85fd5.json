{"sha": "0476f09843348e065b11bac1265b723266b85fd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ3NmYwOTg0MzM0OGUwNjViMTFiYWMxMjY1YjcyMzI2NmI4NWZkNQ==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@albatross.co.nz", "date": "2000-09-30T09:54:21Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2000-09-30T09:54:21Z"}, "message": "configure.in: Define GC_GCJ_SUPPORT.\n\n2000-09-30  Bryce McKinlay  <bryce@albatross.co.nz>\n\n\t* configure.in: Define GC_GCJ_SUPPORT. Define NO_DEBUGGING in\n\tcross-compile configuration only.\n\t* Makefile.am: Build gcj_mlc.c.\n\t* configure, Makefile.in: Rebuilt.\n\nFrom-SVN: r36678", "tree": {"sha": "1133075a0be1809dffe0389c81a85b2c4cab1143", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1133075a0be1809dffe0389c81a85b2c4cab1143"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0476f09843348e065b11bac1265b723266b85fd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0476f09843348e065b11bac1265b723266b85fd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0476f09843348e065b11bac1265b723266b85fd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0476f09843348e065b11bac1265b723266b85fd5/comments", "author": null, "committer": null, "parents": [{"sha": "1fba7553329dace8b58789ffcadcb6149d9bdc8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fba7553329dace8b58789ffcadcb6149d9bdc8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fba7553329dace8b58789ffcadcb6149d9bdc8e"}], "stats": {"total": 59, "additions": 40, "deletions": 19}, "files": [{"sha": "01d3926d995c3be005c41166315887f7e2f8a763", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0476f09843348e065b11bac1265b723266b85fd5/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0476f09843348e065b11bac1265b723266b85fd5/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=0476f09843348e065b11bac1265b723266b85fd5", "patch": "@@ -1,3 +1,10 @@\n+2000-09-30  Bryce McKinlay  <bryce@albatross.co.nz>\n+\n+\t* configure.in: Define GC_GCJ_SUPPORT. Define NO_DEBUGGING in \n+\tcross-compile configuration only.\n+\t* Makefile.am: Build gcj_mlc.c.\n+\t* configure, Makefile.in: Rebuilt.\n+\n 2000-09-10  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* acinclude.m4: Include libtool macros from the top level."}, {"sha": "263cdb6d096bd4c89d529f73da1cefc91b8eaf8f", "filename": "boehm-gc/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0476f09843348e065b11bac1265b723266b85fd5/boehm-gc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0476f09843348e065b11bac1265b723266b85fd5/boehm-gc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FMakefile.am?ref=0476f09843348e065b11bac1265b723266b85fd5", "patch": "@@ -27,7 +27,7 @@ toolexeclib_LTLIBRARIES = $(target_all)\n EXTRA_LTLIBRARIES = libgcjgc.la\n libgcjgc_la_SOURCES = allchblk.c alloc.c blacklst.c checksums.c\t\\\n gcconfig.h dbg_mlc.c dyn_load.c finalize.c gc.h gc_alloc.h gc_cpp.h \\\n-gc_hdrs.h gc_mark.h gc_priv.h gc_private.h gc_typed.h headers.c\t\\\n+gc_hdrs.h gc_mark.h gc_priv.h gc_private.h gc_typed.h gcj_mlc.c headers.c \\\n hpux_irix_threads.c linux_threads.c malloc.c mallocx.c mark.c mark_rts.c \\\n misc.c new_hblk.c obj_map.c os_dep.c pcr_interface.c ptr_chck.c\t\\\n real_malloc.c reclaim.c solaris_pthreads.c solaris_threads.c \\"}, {"sha": "c5f30936c5b9c10f05830ef4dfec23c8660b4b26", "filename": "boehm-gc/Makefile.in", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0476f09843348e065b11bac1265b723266b85fd5/boehm-gc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0476f09843348e065b11bac1265b723266b85fd5/boehm-gc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FMakefile.in?ref=0476f09843348e065b11bac1265b723266b85fd5", "patch": "@@ -73,15 +73,19 @@ CXXCPP = @CXXCPP@\n CXXINCLUDES = @CXXINCLUDES@\n DLLTOOL = @DLLTOOL@\n EXEEXT = @EXEEXT@\n+GCJ = @GCJ@\n+GCJFLAGS = @GCJFLAGS@\n INCLUDES = @INCLUDES@\n LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@\n MY_CFLAGS = @MY_CFLAGS@\n OBJDUMP = @OBJDUMP@\n+OBJEXT = @OBJEXT@\n PACKAGE = @PACKAGE@\n RANLIB = @RANLIB@\n+STRIP = @STRIP@\n THREADLIB = @THREADLIB@\n VERSION = @VERSION@\n addobjs = @addobjs@\n@@ -97,18 +101,15 @@ MULTIDIRS =\n MULTISUBDIR = \n MULTIDO = true\n MULTICLEAN = true\n-@USE_LIBDIR_TRUE@toolexeclibdir = \\\n-@USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = \\\n-@USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexecdir = \\\n-@USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n+@USE_LIBDIR_TRUE@toolexeclibdir = @USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = @USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexecdir = @USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n \n toolexeclib_LTLIBRARIES = $(target_all)\n EXTRA_LTLIBRARIES = libgcjgc.la\n libgcjgc_la_SOURCES = allchblk.c alloc.c blacklst.c checksums.c\t\\\n gcconfig.h dbg_mlc.c dyn_load.c finalize.c gc.h gc_alloc.h gc_cpp.h \\\n-gc_hdrs.h gc_mark.h gc_priv.h gc_private.h gc_typed.h headers.c\t\\\n+gc_hdrs.h gc_mark.h gc_priv.h gc_private.h gc_typed.h gcj_mlc.c headers.c \\\n hpux_irix_threads.c linux_threads.c malloc.c mallocx.c mark.c mark_rts.c \\\n misc.c new_hblk.c obj_map.c os_dep.c pcr_interface.c ptr_chck.c\t\\\n real_malloc.c reclaim.c solaris_pthreads.c solaris_threads.c \\\n@@ -197,13 +198,13 @@ CPPFLAGS = @CPPFLAGS@\n LDFLAGS = @LDFLAGS@\n LIBS = @LIBS@\n libgcjgc_la_OBJECTS =  allchblk.lo alloc.lo blacklst.lo checksums.lo \\\n-dbg_mlc.lo dyn_load.lo finalize.lo headers.lo hpux_irix_threads.lo \\\n-linux_threads.lo malloc.lo mallocx.lo mark.lo mark_rts.lo misc.lo \\\n-new_hblk.lo obj_map.lo os_dep.lo pcr_interface.lo ptr_chck.lo \\\n-real_malloc.lo reclaim.lo solaris_pthreads.lo solaris_threads.lo \\\n-stubborn.lo typd_mlc.lo\n+dbg_mlc.lo dyn_load.lo finalize.lo gcj_mlc.lo headers.lo \\\n+hpux_irix_threads.lo linux_threads.lo malloc.lo mallocx.lo mark.lo \\\n+mark_rts.lo misc.lo new_hblk.lo obj_map.lo os_dep.lo pcr_interface.lo \\\n+ptr_chck.lo real_malloc.lo reclaim.lo solaris_pthreads.lo \\\n+solaris_threads.lo stubborn.lo typd_mlc.lo\n check_PROGRAMS =  gctest$(EXEEXT)\n-gctest_OBJECTS =  test.o\n+gctest_OBJECTS =  test.$(OBJEXT)\n gctest_DEPENDENCIES =  ./libgcjgc.la\n gctest_LDFLAGS = \n CXXFLAGS = @CXXFLAGS@\n@@ -227,7 +228,7 @@ OBJECTS = $(libgcjgc_la_OBJECTS) $(gctest_OBJECTS)\n \n all: all-redirect\n .SUFFIXES:\n-.SUFFIXES: .S .c .cc .lo .o .s\n+.SUFFIXES: .S .c .cc .lo .o .obj .s\n $(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4) \n \tcd $(top_srcdir) && $(AUTOMAKE) --cygnus Makefile\n \n@@ -271,6 +272,11 @@ uninstall-toolexeclibLTLIBRARIES:\n .c.o:\n \t$(COMPILE) -c $<\n \n+# FIXME: We should only use cygpath when building on Windows,\n+# and only if it is available.\n+.c.obj:\n+\t$(COMPILE) -c `cygpath -w $<`\n+\n .s.o:\n \t$(COMPILE) -c $<\n \n@@ -279,6 +285,7 @@ uninstall-toolexeclibLTLIBRARIES:\n \n mostlyclean-compile:\n \t-rm -f *.o core *.core\n+\t-rm -f *.$(OBJEXT)\n \n clean-compile:\n \n@@ -320,6 +327,8 @@ gctest$(EXEEXT): $(gctest_OBJECTS) $(gctest_DEPENDENCIES)\n \t$(LINK) $(gctest_LDFLAGS) $(gctest_OBJECTS) $(gctest_LDADD) $(LIBS)\n .cc.o:\n \t$(CXXCOMPILE) -c $<\n+.cc.obj:\n+\t$(CXXCOMPILE) -c `cygpath -w $<`\n .cc.lo:\n \t$(LTCXXCOMPILE) -c $<\n \n@@ -393,7 +402,7 @@ distdir: $(DISTFILES)\n \t@for file in $(DISTFILES); do \\\n \t  if test -f $$file; then d=.; else d=$(srcdir); fi; \\\n \t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$/$$file $(distdir)/$$file; \\\n+\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n \t  else \\\n \t    test -f $(distdir)/$$file \\\n \t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\"}, {"sha": "edf9a4b043c36d7e32b3057fa966825666f1a5b1", "filename": "boehm-gc/configure", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0476f09843348e065b11bac1265b723266b85fd5/boehm-gc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0476f09843348e065b11bac1265b723266b85fd5/boehm-gc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure?ref=0476f09843348e065b11bac1265b723266b85fd5", "patch": "@@ -2770,11 +2770,11 @@ cat >> confdefs.h <<\\EOF\n EOF\n \n cat >> confdefs.h <<\\EOF\n-#define NO_DEBUGGING 1\n+#define JAVA_FINALIZATION 1\n EOF\n \n cat >> confdefs.h <<\\EOF\n-#define JAVA_FINALIZATION 1\n+#define GC_GCJ_SUPPORT 1\n EOF\n \n \n@@ -2789,6 +2789,10 @@ EOF\n \n    cat >> confdefs.h <<\\EOF\n #define SMALL_CONFIG 1\n+EOF\n+\n+   cat >> confdefs.h <<\\EOF\n+#define NO_DEBUGGING 1\n EOF\n \n fi"}, {"sha": "70764c47343a88b4471f1c5cd3d2f77f4e685d28", "filename": "boehm-gc/configure.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0476f09843348e065b11bac1265b723266b85fd5/boehm-gc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0476f09843348e065b11bac1265b723266b85fd5/boehm-gc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure.in?ref=0476f09843348e065b11bac1265b723266b85fd5", "patch": "@@ -193,8 +193,8 @@ dnl Define a few things to retarget the library towards\n dnl embedded Java.\n AC_DEFINE(SILENT)\n AC_DEFINE(NO_SIGNALS)\n-AC_DEFINE(NO_DEBUGGING)\n AC_DEFINE(JAVA_FINALIZATION)\n+AC_DEFINE(GC_GCJ_SUPPORT)\n \n dnl This is something of a hack.  When cross-compiling we turn off\n dnl some functionality.  We also enable the \"small\" configuration.\n@@ -203,6 +203,7 @@ if test -n \"${with_cross_host}\"; then\n    AC_DEFINE(NO_SIGSET)\n    AC_DEFINE(NO_CLOCK)\n    AC_DEFINE(SMALL_CONFIG)\n+   AC_DEFINE(NO_DEBUGGING)\n fi\n \n AM_CONDITIONAL(USE_LIBDIR, test -z \"$with_cross_host\")"}]}