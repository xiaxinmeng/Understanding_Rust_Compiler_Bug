{"sha": "1d300e19b61d11e3a2321a098b7949f6c2058be2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQzMDBlMTliNjFkMTFlM2EyMzIxYTA5OGI3OTQ5ZjZjMjA1OGJlMg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@tragg.rutgers.edu", "date": "1997-12-20T11:31:54Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-12-20T11:31:54Z"}, "message": "bitmap.c (bitmap_clear): Ensure `inline' is at the beginning of the declaration.\n\n        * bitmap.c (bitmap_clear): Ensure `inline' is at the beginning\n        of the declaration.\n        * c-decl.c (finish_decl): Use parentheses around && within ||.\n        * rtl.c: Include stdlib.h.\n        (read_skip_spaces): Add parentheses around assignments used as\n        truth values.\n        (read_rtx): Initialize list_rtx.\n        * cppexp.c (parse_number): Use || when operands are truth values.\n        * alias.c (find_base_value): Add default case.\n        (memrefs_conflict): Likewise.\n        * combine.c (sets_function_arg_p): Likewise.\n        * genemit.c (gen_exp): Likewise.\n        * local-alloc.c (contains_replace_regs): Likewise.\n        * rtlanal.c (jmp_uses_reg_or_mem): Likewise.\n        * fold-const.c (fold_convert): Use \"&&\" for truth values.\n        (fold): Add default case.\n        * sdbout.c (sdbout_field_types): Fix typo in declaration.\n        (sdbout_one_type): Add default case.\n        * alpha.c (alpha_sa_mask): Prototype only if OPEN_VMS.\n        (some_operand): Add default case.\n        (input_operand): Likewise.\n        (signed_comparison_operator): Likewise.\n        (divmod_operator): Likewise.\n        (alpha_set_memflags_1): Likewise.\n        * reload1.c (reload_cse_simplify_operands): Ensure function\n        always returns a value.\n        * scan-decls.c (scan_decls): Likewise.\n        * c-lex.c (skip_white_space): Fix typo in declaraion.\n        * c-typeck.c (comp_target_types): Add parentheses around assignment\n        used as truth value.\n        (print_spelling): Likewise.\n        (constructor_implicit, constructor_result): Remove unused variables.\n        * collect2.c (scan_library): Protect prototype with\n        #ifdef SCAN_LIBRARIES.\n        * emit-rtl.c (find_line_note): Fix typo in declaration.\n        * final.c (asm_insn_count): Protect prototype with\n        #ifdef HAVE_ATTR_length.\n        * flow.c (find_auto_inc): Protect prototype with #ifdef AUTO_INC_DEC.\n        (try_pre_increment_1, try_pre_increment): Likewise.\n        * regclass.c (auto_inc_dec_reg_p): Protect prototype with\n        #ifdef FORBIDDEN_INC_DEC_CLASSES.  Make return type explicit.\n        * gcov-io.h (__store_long, __write_long, __read_long): Fix\n        unsigned/signed comparisons.\n        * gcov.c (read_files): Remove unused \"first_type\" variable.\n        (scan _for_source_files): Initialize s_ptr.\n        (function_summary): Eliminate \"%lf\" formatting, use %ld for\n        longs.\n        (output_data): Initialize branch_probs and last_line_num.\n        Eliminate \"%lf\" formatting, use \"%ld\" for longs.\n\nCo-Authored-By: Jeffrey A Law <law@cygnus.com>\n\nFrom-SVN: r17158", "tree": {"sha": "fb640fe4c8c99759602e3a82e0ed835789f267eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb640fe4c8c99759602e3a82e0ed835789f267eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d300e19b61d11e3a2321a098b7949f6c2058be2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d300e19b61d11e3a2321a098b7949f6c2058be2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d300e19b61d11e3a2321a098b7949f6c2058be2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d300e19b61d11e3a2321a098b7949f6c2058be2/comments", "author": null, "committer": null, "parents": [{"sha": "afba61d1421cd6bc16d20fb4e5d8a10bf48a0b79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afba61d1421cd6bc16d20fb4e5d8a10bf48a0b79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afba61d1421cd6bc16d20fb4e5d8a10bf48a0b79"}], "stats": {"total": 280, "additions": 211, "deletions": 69}, "files": [{"sha": "0228bc631075f5208143571f270858e40d92f198", "filename": "gcc/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d300e19b61d11e3a2321a098b7949f6c2058be2", "patch": "@@ -1,3 +1,56 @@\n+Sat Dec 20 11:26:47 1997  Kaveh R. Ghazi  <ghazi@tragg.rutgers.edu>\n+\t\t\t  Jeff Law  <law@cygnus.com>\n+\n+\t* bitmap.c (bitmap_clear): Ensure `inline' is at the beginning\n+\tof the declaration.\n+\t* c-decl.c (finish_decl): Use parentheses around && within ||.\n+\t* rtl.c: Include stdlib.h.\n+\t(read_skip_spaces): Add parentheses around assignments used as\n+\ttruth values.\n+\t(read_rtx): Initialize list_rtx.\n+        * cppexp.c (parse_number): Use || when operands are truth values.\n+        * alias.c (find_base_value): Add default case.\n+\t(memrefs_conflict): Likewise.\n+        * combine.c (sets_function_arg_p): Likewise.\n+        * genemit.c (gen_exp): Likewise.\n+        * local-alloc.c (contains_replace_regs): Likewise.\n+        * rtlanal.c (jmp_uses_reg_or_mem): Likewise.\n+        * fold-const.c (fold_convert): Use \"&&\" for truth values.\n+\t(fold): Add default case.\n+        * sdbout.c (sdbout_field_types): Fix typo in declaration.\n+\t(sdbout_one_type): Add default case.\n+        * alpha.c (alpha_sa_mask): Prototype only if OPEN_VMS.\n+\t(some_operand): Add default case.\n+\t(input_operand): Likewise.\n+\t(signed_comparison_operator): Likewise.\n+\t(divmod_operator): Likewise.\n+\t(alpha_set_memflags_1): Likewise.\n+\t* reload1.c (reload_cse_simplify_operands): Ensure function\n+\talways returns a value.\n+\t* scan-decls.c (scan_decls): Likewise.\n+\t* c-lex.c (skip_white_space): Fix typo in declaraion.\n+\t* c-typeck.c (comp_target_types): Add parentheses around assignment\n+\tused as truth value.\n+\t(print_spelling): Likewise.\n+\t(constructor_implicit, constructor_result): Remove unused variables.\n+\t* collect2.c (scan_library): Protect prototype with\n+\t#ifdef SCAN_LIBRARIES.\n+\t* emit-rtl.c (find_line_note): Fix typo in declaration.\n+\t* final.c (asm_insn_count): Protect prototype with \n+\t#ifdef HAVE_ATTR_length.\n+\t* flow.c (find_auto_inc): Protect prototype with #ifdef AUTO_INC_DEC.\n+\t(try_pre_increment_1, try_pre_increment): Likewise.\n+\t* regclass.c (auto_inc_dec_reg_p): Protect prototype with\n+\t#ifdef FORBIDDEN_INC_DEC_CLASSES.  Make return type explicit.\n+        * gcov-io.h (__store_long, __write_long, __read_long): Fix\n+        unsigned/signed comparisons.\n+        * gcov.c (read_files): Remove unused \"first_type\" variable.\n+\t(scan _for_source_files): Initialize s_ptr.\n+\t(function_summary): Eliminate \"%lf\" formatting, use %ld for\n+\tlongs.\n+\t(output_data): Initialize branch_probs and last_line_num.\n+\tEliminate \"%lf\" formatting, use \"%ld\" for longs.\n+\n Fri Dec 19 17:31:11 1997  Ian Lance Taylor  <ian@cygnus.com>\n \n         * mips16.S: New file."}, {"sha": "1363cfe81532b455f28e53b32014b0e3380c7c03", "filename": "gcc/alias.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=1d300e19b61d11e3a2321a098b7949f6c2058be2", "patch": "@@ -202,6 +202,9 @@ find_base_value (src)\n \n     case HIGH:\n       return find_base_value (XEXP (src, 0));\n+\n+    default:\n+      break;\n     }\n \n   return 0;\n@@ -759,6 +762,9 @@ memrefs_conflict_p (xsize, x, ysize, y, c)\n \t  c /= INTVAL (x1);\n \t  return memrefs_conflict_p (xsize, x0, ysize, y0, c);\n \t}\n+\n+      default:\n+\tbreak;\n       }\n \n   /* Treat an access through an AND (e.g. a subword access on an Alpha)"}, {"sha": "f3c9a91e0270228d1aaff5d4c0a1f08f9b8d423c", "filename": "gcc/bitmap.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=1d300e19b61d11e3a2321a098b7949f6c2058be2", "patch": "@@ -222,7 +222,7 @@ bitmap_element_link (head, element)\n \f\n /* Clear a bitmap by freeing the linked list.  */\n \n-void INLINE\n+INLINE void\n bitmap_clear (head)\n      bitmap head;\n {"}, {"sha": "895ce368bbe465b05553e949756e83c1785132ca", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=1d300e19b61d11e3a2321a098b7949f6c2058be2", "patch": "@@ -3888,7 +3888,7 @@ finish_decl (decl, init, asmspec_tree)\n \t\t declaration into a file scope one.  This can be detected\n \t\t by TREE_ASM_WRITTEN being set.  */\n \t\t(DECL_INITIAL (decl) != 0\n-\t\t || DECL_CONTEXT (decl) != 0 && ! TREE_ASM_WRITTEN (decl))\n+\t\t || (DECL_CONTEXT (decl) != 0 && ! TREE_ASM_WRITTEN (decl)))\n \t      :\n \t\t/* An automatic variable with an incomplete type\n \t\t   is an error.  */"}, {"sha": "1b5b48437424464db017e8fdc24bf22cc1cea68c", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=1d300e19b61d11e3a2321a098b7949f6c2058be2", "patch": "@@ -135,7 +135,7 @@ static int end_of_file;\n static int nextchar = -1;\n #endif\n \n-static int skip_which_space\t\tPROTO((int));\n+static int skip_white_space\t\tPROTO((int));\n static char *extend_token_buffer\tPROTO((char *));\n static int readescape\t\t\tPROTO((int *));\n int check_newline ();"}, {"sha": "5bf265ac2083e4ea87b7d1048038d50103cd973c", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=1d300e19b61d11e3a2321a098b7949f6c2058be2", "patch": "@@ -547,7 +547,7 @@ comp_target_types (ttl, ttr)\n   int val;\n \n   /* Give maybe_objc_comptypes a crack at letting these types through.  */\n-  if (val = maybe_objc_comptypes (ttl, ttr, 1) >= 0)\n+  if ((val = maybe_objc_comptypes (ttl, ttr, 1)) >= 0)\n     return val;\n \n   val = comptypes (TYPE_MAIN_VARIANT (TREE_TYPE (ttl)),\n@@ -4700,7 +4700,7 @@ print_spelling (buffer)\n       {\n \tif (p->kind == SPELLING_MEMBER)\n \t  *d++ = '.';\n-\tfor (s = p->u.s; *d = *s++; d++)\n+\tfor (s = p->u.s; (*d = *s++); d++)\n \t  ;\n       }\n   *d++ = '\\0';\n@@ -5106,9 +5106,6 @@ static int constructor_depth;\n /* 0 if implicitly pushing constructor levels is allowed.  */\n int constructor_no_implicit = 0; /* 0 for C; 1 for some other languages.  */\n \n-/* 1 if this constructor level was entered implicitly.  */\n-static int constructor_implicit;\n-\n static int require_constant_value;\n static int require_constant_elements;\n \n@@ -5127,9 +5124,6 @@ static char *constructor_asmspec;\n /* Nonzero if this is an initializer for a top-level decl.  */\n static int constructor_top_level;\n \n-/* When we finish reading a constructor expression\n-   (constructor_decl is 0), the CONSTRUCTOR goes here.  */\n-static tree constructor_result;\n \f\n /* This stack has a level for each implicit or explicit level of\n    structuring in the initializer, including the outermost one.  It"}, {"sha": "d3627358a7d02774c2f69b3010c807af9cfebca4", "filename": "gcc/collect2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=1d300e19b61d11e3a2321a098b7949f6c2058be2", "patch": "@@ -299,7 +299,9 @@ static void write_list_with_asm PROTO((FILE *, char *, struct id *));\n static void write_c_file\tPROTO((FILE *, char *));\n static void write_export_file\tPROTO((FILE *));\n static void scan_prog_file\tPROTO((char *, enum pass));\n+#ifdef SCAN_LIBRARIES\n static void scan_libraries\tPROTO((char *));\n+#endif\n \n char *xcalloc ();\n char *xmalloc ();"}, {"sha": "1546ec64845f19f880a1112ccb9610fa6e149ad5", "filename": "gcc/combine.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=1d300e19b61d11e3a2321a098b7949f6c2058be2", "patch": "@@ -1087,6 +1087,9 @@ sets_function_arg_p (pat)\n       return (GET_CODE (inner_dest) == REG\n \t      && REGNO (inner_dest) < FIRST_PSEUDO_REGISTER\n \t      && FUNCTION_ARG_REGNO_P (REGNO (inner_dest)));\n+\n+    default:\n+      break;\n     }\n \n   return 0;"}, {"sha": "b28673c09d7cc26268b5bd79aed6da7ba12dd101", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=1d300e19b61d11e3a2321a098b7949f6c2058be2", "patch": "@@ -108,8 +108,10 @@ static rtx alpha_emit_set_const_1 PROTO((rtx, enum machine_mode,\n static void add_long_const\tPROTO((FILE *, HOST_WIDE_INT, int, int, int));\n \n /* Compute the size of the save area in the stack.  */\n+#if OPEN_VMS\n static void alpha_sa_mask\tPROTO((unsigned long *imaskP,\n \t\t\t\t       unsigned long *fmaskP));\n+#endif\n /* Get the number of args of a function in one of two ways.  */\n #ifdef OPEN_VMS\n #define NUM_ARGS current_function_args_info.num_args\n@@ -536,6 +538,9 @@ some_operand (op, mode)\n \n     case SUBREG:\n       return some_operand (SUBREG_REG (op), VOIDmode);\n+\n+    default:\n+      break;\n     }\n \n   return 0;\n@@ -578,6 +583,9 @@ input_operand (op, mode)\n \n     case CONST_INT:\n       return mode == QImode || mode == HImode || add_operand (op, mode);\n+\n+    default:\n+      break;\n     }\n \n   return 0;\n@@ -657,6 +665,9 @@ signed_comparison_operator (op, mode)\n     {\n     case EQ:  case NE:  case LE:  case LT:  case GE:   case GT:\n       return 1;\n+\n+    default:\n+      break;\n     }\n \n   return 0;\n@@ -673,6 +684,9 @@ divmod_operator (op, mode)\n     {\n     case DIV:  case MOD:  case UDIV:  case UMOD:\n       return 1;\n+\n+    default:\n+      break;\n     }\n \n   return 0;\n@@ -891,6 +905,9 @@ alpha_set_memflags_1 (x, in_struct_p, volatile_p, unchanging_p)\n       MEM_VOLATILE_P (x) = volatile_p;\n       RTX_UNCHANGING_P (x) = unchanging_p;\n       break;\n+\n+    default:\n+      break;\n     }\n }\n "}, {"sha": "0a68df4c3e1b87988dc4e9288c1f73446eac184b", "filename": "gcc/cppexp.c", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=1d300e19b61d11e3a2321a098b7949f6c2058be2", "patch": "@@ -28,13 +28,17 @@ Written by Per Bothner 1994.  */\n #include \"cpplib.h\"\n \n extern char *xmalloc PARAMS ((unsigned));\n-extern char *xrealloc PARAMS ((char *, unsigned));\n+extern char *xrealloc PARAMS ((void *, unsigned));\n \n #ifdef MULTIBYTE_CHARS\n #include <stdlib.h>\n #include <locale.h>\n #endif\n \n+#if HAVE_LIMITS_H\n+# include <limits.h>\n+#endif\n+\n #include <stdio.h>\n \n /* This is used for communicating lists of keywords with cccp.c.  */\n@@ -126,16 +130,34 @@ static long right_shift ();\n #define SKIP_OPERAND 8\n /*#define UNSIGNEDP 16*/\n \n-#ifndef HOST_BITS_PER_WIDE_INT\n+/* Find the largest host integer type and set its size and type.\n+   Watch out: on some crazy hosts `long' is shorter than `int'.  */\n+\n+#ifndef HOST_WIDE_INT\n+# if HAVE_INTTYPES_H\n+#  include <inttypes.h>\n+#  define HOST_WIDE_INT intmax_t\n+# else\n+#  if (HOST_BITS_PER_LONG <= HOST_BITS_PER_INT \\\n+       && HOST_BITS_PER_LONGLONG <= HOST_BITS_PER_INT)\n+#   define HOST_WIDE_INT int\n+#  else\n+#  if (HOST_BITS_PER_LONGLONG <= HOST_BITS_PER_LONG \\\n+       || ! (defined LONG_LONG_MAX || defined LLONG_MAX))\n+#   define HOST_WIDE_INT long\n+#  else\n+#   define HOST_WIDE_INT long long\n+#  endif\n+#  endif\n+# endif\n+#endif\n \n-#if HOST_BITS_PER_LONG > HOST_BITS_PER_INT\n-#define HOST_BITS_PER_WIDE_INT HOST_BITS_PER_LONG\n-#define HOST_WIDE_INT long\n-#else\n-#define HOST_BITS_PER_WIDE_INT HOST_BITS_PER_INT\n-#define HOST_WIDE_INT int\n+#ifndef CHAR_BIT\n+#define CHAR_BIT 8\n #endif\n \n+#ifndef HOST_BITS_PER_WIDE_INT\n+#define HOST_BITS_PER_WIDE_INT (CHAR_BIT * sizeof (HOST_WIDE_INT))\n #endif\n \n struct operation {\n@@ -226,7 +248,7 @@ parse_number (pfile, start, olen)\n     if (largest_digit < digit)\n       largest_digit = digit;\n     nd = n * base + digit;\n-    overflow |= ULONG_MAX_over_base < n | nd < n;\n+    overflow |= ULONG_MAX_over_base < n || nd < n;\n     n = nd;\n   }\n \n@@ -367,7 +389,7 @@ cpp_lex (pfile, skip_evaluation)\n \t  {\n \t    if (c == '\\\\')\n \t      {\n-\t\tc = cpp_parse_escape (pfile, &ptr);\n+\t\tc = cpp_parse_escape (pfile, (char **) &ptr);\n \t\tif (width < HOST_BITS_PER_INT\n \t\t  && (unsigned) c >= (1 << width))\n \t\t    cpp_pedwarn (pfile,\n@@ -406,7 +428,7 @@ cpp_lex (pfile, skip_evaluation)\n \t  {\n \t    int num_bits = num_chars * width;\n \n-\t    if (cpp_lookup (pfile, \"__CHAR_UNSIGNED__\",\n+\t    if (cpp_lookup (pfile, (U_CHAR *)\"__CHAR_UNSIGNED__\",\n \t\t\t    sizeof (\"__CHAR_UNSIGNED__\")-1, -1)\n \t\t|| ((result >> (num_bits - 1)) & 1) == 0)\n \t\top.value"}, {"sha": "c93c3eadf18201cbea0a31dac443d584c89c5b64", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=1d300e19b61d11e3a2321a098b7949f6c2058be2", "patch": "@@ -257,7 +257,7 @@ extern int emit_lineno;\n \n static rtx make_jump_insn_raw\t\tPROTO((rtx));\n static rtx make_call_insn_raw\t\tPROTO((rtx));\n-static rtx find_line_node\t\tPROTO((rtx));\n+static rtx find_line_note\t\tPROTO((rtx));\n \f\n /* rtx gen_rtx (code, mode, [element1, ..., elementn])\n **"}, {"sha": "924c29b34d84a6aa23cb6cca020d4fc6afa0e68b", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=1d300e19b61d11e3a2321a098b7949f6c2058be2", "patch": "@@ -277,7 +277,9 @@ static struct bb_str *sbb_head\t= 0;\t\t/* Head of string list.  */\n static struct bb_str **sbb_tail\t= &sbb_head;\t/* Ptr to store next bb str */\n static int sbb_label_num\t= 0;\t\t/* Last label used */\n \n+#ifdef HAVE_ATTR_length\n static int asm_insn_count\tPROTO((rtx));\n+#endif\n static void profile_function\tPROTO((FILE *));\n static void profile_after_prologue PROTO((FILE *));\n static void add_bb\t\tPROTO((FILE *));"}, {"sha": "69c7d6b48053c8dd59a536a12301c3cb0989a2f5", "filename": "gcc/flow.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=1d300e19b61d11e3a2321a098b7949f6c2058be2", "patch": "@@ -263,10 +263,12 @@ static void mark_set_regs\t\tPROTO((regset, regset, rtx,\n \t\t\t\t\t       rtx, regset));\n static void mark_set_1\t\t\tPROTO((regset, regset, rtx,\n \t\t\t\t\t       rtx, regset));\n+#ifdef AUTO_INC_DEC\n static void find_auto_inc\t\tPROTO((regset, rtx, rtx));\n-static void mark_used_regs\t\tPROTO((regset, regset, rtx, int, rtx));\n static int try_pre_increment_1\t\tPROTO((rtx));\n static int try_pre_increment\t\tPROTO((rtx, rtx, HOST_WIDE_INT));\n+#endif\n+static void mark_used_regs\t\tPROTO((regset, regset, rtx, int, rtx));\n void dump_flow_info\t\t\tPROTO((FILE *));\n \f\n /* Find basic blocks of the current function and perform data flow analysis."}, {"sha": "4a32656d83beee2bfe5d7b04a393ff1b5212e32e", "filename": "gcc/fold-const.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=1d300e19b61d11e3a2321a098b7949f6c2058be2", "patch": "@@ -1519,7 +1519,7 @@ fold_convert (t, arg1)\n \t    = (TREE_OVERFLOW (arg1)\n \t       || (force_fit_type (t,\n \t\t\t\t  (TREE_INT_CST_HIGH (arg1) < 0\n-\t\t\t\t   & (TREE_UNSIGNED (type)\n+\t\t\t\t   && (TREE_UNSIGNED (type)\n \t\t\t\t     < TREE_UNSIGNED (TREE_TYPE (arg1)))))\n \t\t   && TREE_CODE (TREE_TYPE (arg1)) != POINTER_TYPE));\n \t  TREE_CONSTANT_OVERFLOW (t)\n@@ -5391,6 +5391,8 @@ fold (expr)\n \t\t\t\t\t     arg0),\n \t\t\t\t    convert (signed_type (TREE_TYPE (arg1)),\n \t\t\t\t\t     integer_zero_node)));\n+\t      default:\n+\t\tbreak;\n \t      }\n \t  }\n       }"}, {"sha": "02bf917765f9b77a82253a2bcbf233b984726d13", "filename": "gcc/gcov-io.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fgcov-io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fgcov-io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.h?ref=1d300e19b61d11e3a2321a098b7949f6c2058be2", "patch": "@@ -33,10 +33,10 @@ static int\n __store_long (value, dest, bytes)\n      long value;\n      char *dest;\n-     int bytes;\n+     size_t bytes;\n {\n   int upper_bit = (value < 0 ? 128 : 0);\n-  int i;\n+  size_t i;\n \n   if (value < 0)\n     {\n@@ -100,7 +100,7 @@ static int\n __write_long (value, file, bytes)\n      long value;\n      FILE *file;\n-     int bytes;\n+     size_t bytes;\n {\n   char c[10];\n \n@@ -123,7 +123,7 @@ static int\n __read_long (dest, file, bytes)\n      long *dest;\n      FILE *file;\n-     int bytes;\n+     size_t bytes;\n {\n   char c[10];\n "}, {"sha": "69f0f56d706e187e46352dc07b6c3171cd6018c0", "filename": "gcc/gcov.c", "status": "modified", "additions": 38, "deletions": 26, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=1d300e19b61d11e3a2321a098b7949f6c2058be2", "patch": "@@ -2,7 +2,7 @@\n    source file.\n    Copyright (C) 1990, 91, 92, 93, 94, 96, 1997 Free Software Foundation, Inc.\n    Contributed by James E. Wilson of Cygnus Support.\n-   Mongled by Bob Manson of Cygnus Support.\n+   Mangled by Bob Manson of Cygnus Support.\n \n Gcov is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n@@ -41,17 +41,29 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    is no way to get the total execution counts for the included file, can\n    only get execution counts for one or the other of the including files.  */\n \n+#include \"config.h\"\n #include <stdio.h>\n+#include \"gansidecl.h\"\n #include <sys/types.h>\n #include <sys/stat.h>\n \n-/* The only need for this is so that we get macro definitions for rindex\n-   if necessary.  */\n-#include \"config.h\"\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#else\n+#ifdef HAVE_STRINGS_H\n+#include <strings.h>\n+#endif\n+#endif\n \n #include \"gcov-io.h\"\n \n-extern char * rindex ();\n+#ifdef NEED_DECLARATION_RINDEX\n+extern char *rindex ();\n+#endif\n \n /* The .bb file format consists of several lists of 4-byte integers\n    which are the line numbers of each basic block in the file.  Each\n@@ -686,7 +698,7 @@ read_files ()\n   struct stat buf;\n   struct bb_info_list *list_end = 0;\n   struct bb_info_list *b_ptr;\n-  long total, first_time;\n+  long total;\n \n   /* Read and ignore the first word of the .da file, which is the count of\n      how many numbers follow.  */\n@@ -706,7 +718,7 @@ read_files ()\n \n       /* Read in the data in the .bbg file and reconstruct the program flow\n \t graph for one function.  */\n-      create_program_flow_graph (b_ptr, first_time);\n+      create_program_flow_graph (b_ptr);\n \n       /* Set the EOF condition if at the end of file.  */\n       ungetc (getc (bbg_file), bbg_file);\n@@ -734,7 +746,7 @@ read_files ()\n   stat (bb_file_name, &buf);\n   bb_data_size = buf.st_size / 4;\n \n-  bb_data = (char *) xmalloc (buf.st_size);\n+  bb_data = (char *) xmalloc ((unsigned) buf.st_size);\n   fread (bb_data, sizeof (char), buf.st_size, bb_file);\n   \n   fclose (bb_file);\n@@ -750,7 +762,7 @@ read_files ()\n static void\n scan_for_source_files ()\n {\n-  struct sourcefile *s_ptr;\n+  struct sourcefile *s_ptr = NULL;\n   char *ptr;\n   int count;\n   long line_num;\n@@ -901,7 +913,7 @@ static void\n function_summary ()\n {\n   if (function_source_lines)\n-    fprintf (stdout, \"%6.2lf%% of %d source lines executed in function %s\\n\",\n+    fprintf (stdout, \"%6.2f%% of %d source lines executed in function %s\\n\",\n \t     (((double) function_source_lines_executed / function_source_lines)\n \t      * 100), function_source_lines, function_name);\n   else\n@@ -912,18 +924,18 @@ function_summary ()\n     {\n       if (function_branches)\n \t{\n-\t  fprintf (stdout, \"%6.2lf%% of %d branches executed in funcion %s\\n\",\n+\t  fprintf (stdout, \"%6.2f%% of %d branches executed in function %s\\n\",\n \t\t   (((double) function_branches_executed / function_branches)\n \t\t    * 100), function_branches, function_name);\n \t  fprintf (stdout,\n-\t\t\"%6.2lf%% of %d branches taken at least once in function %s\\n\",\n+\t\t\"%6.2f%% of %d branches taken at least once in function %s\\n\",\n \t\t   (((double) function_branches_taken / function_branches)\n \t\t    * 100), function_branches, function_name);\n \t}\n       else\n \tfprintf (stdout, \"No branches in function %s\\n\", function_name);\n       if (function_calls)\n-\tfprintf (stdout, \"%6.2lf%% of %d calls executed in function %s\\n\",\n+\tfprintf (stdout, \"%6.2f%% of %d calls executed in function %s\\n\",\n \t\t (((double) function_calls_executed / function_calls)\n \t\t  * 100), function_calls, function_name);\n       else\n@@ -949,7 +961,7 @@ output_data ()\n   char *line_exists;\n   /* An array indexed by line number, which contains a list of branch\n      probabilities, one for each branch on that line.  */\n-  struct arcdata **branch_probs;\n+  struct arcdata **branch_probs = NULL;\n   struct sourcefile *s_ptr;\n   char *source_file_name;\n   FILE *source_file;\n@@ -958,7 +970,7 @@ output_data ()\n   char *cptr;\n   long block_num;\n   long line_num;\n-  long last_line_num;\n+  long last_line_num = 0;\n   int i;\n   struct arcdata *a_ptr;\n   /* Buffer used for reading in lines from the source file.  */\n@@ -1061,7 +1073,7 @@ output_data ()\n \t\t\tfprintf (stderr,\n \t\t\t\t \"didn't use all bb entries of graph, function %s\\n\",\n \t\t\t\t function_name);\n-\t\t\tfprintf (stderr, \"block_num = %d, num_blocks = %d\\n\",\n+\t\t\tfprintf (stderr, \"block_num = %ld, num_blocks = %d\\n\",\n \t\t\t\t block_num, current_graph->num_blocks);\n \t\t      }\n \n@@ -1176,7 +1188,7 @@ output_data ()\n \n       if (total_source_lines)\n \tfprintf (stdout,\n-\t\t \"%6.2lf%% of %d source lines executed in file %s\\n\",\n+\t\t \"%6.2f%% of %d source lines executed in file %s\\n\",\n \t\t (((double) total_source_lines_executed / total_source_lines)\n \t\t  * 100), total_source_lines, source_file_name);\n       else\n@@ -1187,18 +1199,18 @@ output_data ()\n \t{\n \t  if (total_branches)\n \t    {\n-\t      fprintf (stdout, \"%6.2lf%% of %d branches executed in file %s\\n\",\n+\t      fprintf (stdout, \"%6.2f%% of %d branches executed in file %s\\n\",\n \t\t       (((double) total_branches_executed / total_branches)\n \t\t\t* 100), total_branches, source_file_name);\n \t      fprintf (stdout,\n-\t\t    \"%6.2lf%% of %d branches taken at least once in file %s\\n\",\n+\t\t    \"%6.2f%% of %d branches taken at least once in file %s\\n\",\n \t\t       (((double) total_branches_taken / total_branches)\n \t\t\t* 100), total_branches, source_file_name);\n \t    }\n \t  else\n \t    fprintf (stdout, \"No branches in file %s\\n\", source_file_name);\n \t  if (total_calls)\n-\t    fprintf (stdout, \"%6.2lf%% of %d calls executed in file %s\\n\",\n+\t    fprintf (stdout, \"%6.2f%% of %d calls executed in file %s\\n\",\n \t\t     (((double) total_calls_executed / total_calls)\n \t\t      * 100), total_calls, source_file_name);\n \t  else\n@@ -1208,7 +1220,7 @@ output_data ()\n       if (output_gcov_file)\n \t{\n \t  /* Now the statistics are ready.  Read in the source file one line\n-\t     at a time, and output that line to the gcov file preceeded by\n+\t     at a time, and output that line to the gcov file preceded by\n \t     its execution count if non zero.  */\n       \n \t  source_file = fopen (source_file_name, \"r\");\n@@ -1285,12 +1297,12 @@ output_data ()\n \t\t before the source line.  For lines which exist but were never\n \t\t executed, print ###### before the source line.  Otherwise,\n \t\t print the execution count before the source line.  */\n-\t      /* There are 16 spaces of identation added before the source line\n-\t\t so that tabs won't be messed up.  */\n+\t      /* There are 16 spaces of indentation added before the source\n+\t\t line so that tabs won't be messed up.  */\n \t      if (line_exists[count])\n \t\t{\n \t\t  if (line_counts[count])\n-\t\t    fprintf (gcov_file, \"%12d    %s\", line_counts[count],\n+\t\t    fprintf (gcov_file, \"%12ld    %s\", line_counts[count],\n \t\t\t     string);\n \t\t  else\n \t\t    fprintf (gcov_file, \"      ######    %s\", string);\n@@ -1299,7 +1311,7 @@ output_data ()\n \t\tfprintf (gcov_file, \"\\t\\t%s\", string);\n \n \t      /* In case the source file line is larger than our buffer, keep\n-\t\t reading and outputing lines until we get a newline.  */\n+\t\t reading and outputting lines until we get a newline.  */\n \t      len = strlen (string);\n \t      while ((len == 0 || string[strlen (string) - 1] != '\\n')\n \t\t     && retval != NULL)\n@@ -1356,7 +1368,7 @@ output_data ()\n \t\tfprintf (gcov_file, \"\\t\\t%s\", string);\n \n \t\t/* In case the source file line is larger than our buffer, keep\n-\t\t   reading and outputing lines until we get a newline.  */\n+\t\t   reading and outputting lines until we get a newline.  */\n \t\tlen = strlen (string);\n \t\twhile ((len == 0 || string[strlen (string) - 1] != '\\n')\n \t\t       && retval != NULL)"}, {"sha": "4b8485242a305a99fc98c60d86019621b7c6b4d2", "filename": "gcc/genemit.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=1d300e19b61d11e3a2321a098b7949f6c2058be2", "patch": "@@ -1,5 +1,5 @@\n /* Generate code from machine description to emit insns as rtl.\n-   Copyright (C) 1987, 1988, 1991, 1994, 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 91, 94, 95, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -225,6 +225,9 @@ gen_exp (x)\n       /* These shouldn't be written in MD files.  Instead, the appropriate\n \t routines in varasm.c should be called.  */\n       abort ();\n+\n+    default:\n+      break;\n     }\n \n   printf (\"gen_rtx (\");\n@@ -743,9 +746,11 @@ main (argc, argv)\n from the machine description file `md'.  */\\n\\n\");\n \n   printf (\"#include \\\"config.h\\\"\\n\");\n+  printf (\"#include <stdio.h>\\n\");\n   printf (\"#include \\\"rtl.h\\\"\\n\");\n   printf (\"#include \\\"expr.h\\\"\\n\");\n   printf (\"#include \\\"real.h\\\"\\n\");\n+  printf (\"#include \\\"flags.h\\\"\\n\");\n   printf (\"#include \\\"output.h\\\"\\n\");\n   printf (\"#include \\\"insn-config.h\\\"\\n\\n\");\n   printf (\"#include \\\"insn-flags.h\\\"\\n\\n\");"}, {"sha": "3235172b4e4bf820f747eaf12a86ae37cd627f0c", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=1d300e19b61d11e3a2321a098b7949f6c2058be2", "patch": "@@ -628,6 +628,9 @@ contains_replace_regs (x, reg_equiv_replace)\n \n     case REG:\n       return reg_equiv_replace[REGNO (x)];\n+\n+    default:\n+      break;\n     }\n \n   fmt = GET_RTX_FORMAT (code);"}, {"sha": "16f886ed41ee8299a978770e37794366b3d4241a", "filename": "gcc/regclass.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=1d300e19b61d11e3a2321a098b7949f6c2058be2", "patch": "@@ -587,7 +587,9 @@ static void record_reg_classes\tPROTO((int, int, rtx *, enum machine_mode *,\n static int copy_cost\t\tPROTO((rtx, enum machine_mode, \n \t\t\t\t       enum reg_class, int));\n static void record_address_regs\tPROTO((rtx, enum reg_class, int));\n-static auto_inc_dec_reg_p\tPROTO((rtx, enum machine_mode));\n+#ifdef FORBIDDEN_INC_DEC_CLASSES\n+static int auto_inc_dec_reg_p\tPROTO((rtx, enum machine_mode));\n+#endif\n static void reg_scan_mark_refs\tPROTO((rtx, rtx, int));\n \n /* Return the reg_class in which pseudo reg number REGNO is best allocated.\n@@ -1635,7 +1637,7 @@ record_address_regs (x, class, scale)\n /* Return 1 if REG is valid as an auto-increment memory reference\n    to an object of MODE.  */\n \n-static \n+static int\n auto_inc_dec_reg_p (reg, mode)\n      rtx reg;\n      enum machine_mode mode;"}, {"sha": "778801dc69bd05da6f9b16c685d2b797705843a3", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=1d300e19b61d11e3a2321a098b7949f6c2058be2", "patch": "@@ -8273,7 +8273,7 @@ reload_cse_simplify_operands (insn)\n   n_alternatives = insn_n_alternatives[insn_code_number];\n   \n   if (n_alternatives == 0 || n_operands == 0)\n-    return;\n+    return 0;\n   insn_extract (insn);\n \n   /* Figure out which alternative currently matches.  */"}, {"sha": "063ce79489d6f4de54edf2b99d8fccb4ac6b6720", "filename": "gcc/rtl.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=1d300e19b61d11e3a2321a098b7949f6c2058be2", "patch": "@@ -22,6 +22,9 @@ Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n #include <ctype.h>\n #include <stdio.h>\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n #include \"rtl.h\"\n #include \"real.h\"\n \n@@ -491,7 +494,7 @@ read_skip_spaces (infile)\n      FILE *infile;\n {\n   register int c;\n-  while (c = getc (infile))\n+  while ((c = getc (infile)))\n     {\n       if (c == ' ' || c == '\\n' || c == '\\t' || c == '\\f')\n \t;\n@@ -507,7 +510,7 @@ read_skip_spaces (infile)\n \t    dump_and_abort ('*', c, infile);\n \t  \n \t  prevc = 0;\n-\t  while (c = getc (infile))\n+\t  while ((c = getc (infile)))\n \t    {\n \t      if (prevc == '*' && c == '/')\n \t\tbreak;\n@@ -662,7 +665,7 @@ read_rtx (infile)\n       case 'E':\n \t{\n \t  register struct rtx_list *next_rtx, *rtx_list_link;\n-\t  struct rtx_list *list_rtx;\n+\t  struct rtx_list *list_rtx = NULL_RTX;\n \n \t  c = read_skip_spaces (infile);\n \t  if (c != '[')"}, {"sha": "bff2b6ea2e8a988d2c2bb7a1c22492807d847ed1", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=1d300e19b61d11e3a2321a098b7949f6c2058be2", "patch": "@@ -1922,6 +1922,9 @@ jmp_uses_reg_or_mem (x)\n     case PLUS:  case MINUS:  case MULT:\n       return (jmp_uses_reg_or_mem (XEXP (x, 0))\n \t      || jmp_uses_reg_or_mem (XEXP (x, 1)));\n+\n+    default:\n+      break;\n     }\n \n   fmt = GET_RTX_FORMAT (code);"}, {"sha": "00dc83869ac9b70b2e22ddd6b2c77f846bf901ac", "filename": "gcc/scan-decls.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fscan-decls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fscan-decls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fscan-decls.c?ref=1d300e19b61d11e3a2321a098b7949f6c2058be2", "patch": "@@ -1,5 +1,5 @@\n /* scan-decls.c - Extracts declarations from cpp output.\n-   Copyright (C) 1993, 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1995, 1997 Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -81,6 +81,7 @@ scan_decls (pfile, argc, argv)\n      char **argv;\n {\n   int saw_extern, saw_inline;\n+  int start_written;\n   int old_written;\n   /* If declarator_start is non-zero, it marks the start of the current\n      declarator.  If it is zero, we are either still parsing the\n@@ -91,6 +92,7 @@ scan_decls (pfile, argc, argv)\n \n  new_statement:\n   CPP_SET_WRITTEN (pfile, 0);\n+  start_written = 0;\n   token = cpp_get_token (pfile);\n \n  handle_statement:\n@@ -122,9 +124,6 @@ scan_decls (pfile, argc, argv)\n   declarator_start = 0;\n   for (;;)\n     {\n-      int start_written = CPP_WRITTEN (pfile);\n-      token = cpp_get_token (pfile);\n-    handle_token:\n       switch (token)\n \t{\n \tcase CPP_LPAREN:\n@@ -225,7 +224,7 @@ scan_decls (pfile, argc, argv)\n \t\t    }\n \t\t}\n \t      else\n-\t\tgoto handle_token;\n+\t\tcontinue;\n \t      break;\n \t    }\n \t  /* This may be the name of a variable or function.  */\n@@ -234,7 +233,7 @@ scan_decls (pfile, argc, argv)\n \t  break;\n \n \tcase CPP_EOF:\n-\t  return;  /* ??? FIXME */\n+\t  return 0;\n \n \tcase CPP_LBRACE:  case CPP_RBRACE:  case CPP_DIRECTIVE:\n \t  goto new_statement;  /* handle_statement? */\n@@ -248,5 +247,8 @@ scan_decls (pfile, argc, argv)\n \t default:\n \t  prev_id_start = 0;\n \t}\n+\n+      start_written = CPP_WRITTEN (pfile);\n+      token = cpp_get_token (pfile);\n     }\n }"}, {"sha": "d95945e635b7526749071177cad10d9fcc7ff01d", "filename": "gcc/sdbout.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d300e19b61d11e3a2321a098b7949f6c2058be2/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=1d300e19b61d11e3a2321a098b7949f6c2058be2", "patch": "@@ -114,7 +114,7 @@ static void sdbout_syms\t\t\tPROTO((tree));\n static void sdbout_queue_anonymous_type\tPROTO((tree));\n static void sdbout_dequeue_anonymous_types PROTO((void));\n static void sdbout_type\t\t\tPROTO((tree));\n-static void sbdout_field_types\t\tPROTO((tree));\n+static void sdbout_field_types\t\tPROTO((tree));\n static void sdbout_one_type\t\tPROTO((tree));\n static void sdbout_parms\t\tPROTO((tree));\n static void sdbout_reg_parms\t\tPROTO((tree));\n@@ -951,6 +951,9 @@ sdbout_symbol (decl, local)\n \t  return;\n \t}\n       break;\n+\n+    default:\n+      break;\n     }\n   PUT_SDB_TYPE (plain_type (type));\n   PUT_SDB_ENDEF;\n@@ -1166,6 +1169,9 @@ sdbout_one_type (type)\n \t    PUT_SDB_TYPE (T_ENUM);\n \t    member_scl = C_MOE;\n \t    break;\n+\n+\t  default:\n+\t    break;\n \t  }\n \n \tPUT_SDB_SIZE (size);\n@@ -1258,6 +1264,9 @@ sdbout_one_type (type)\n \tPUT_SDB_SIZE (size);\n \tPUT_SDB_ENDEF;\n \tbreak;\n+\n+      default:\n+\tbreak;\n       }\n     }\n }"}]}