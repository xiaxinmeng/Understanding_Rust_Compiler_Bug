{"sha": "561078480ffb5adb68577276c6b23e4ee7b39272", "node_id": "C_kwDOANBUbNoAKDU2MTA3ODQ4MGZmYjVhZGI2ODU3NzI3NmM2YjIzZTRlZTdiMzkyNzI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-07T13:40:26Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-07T16:52:04Z"}, "message": "libstdc++: Avoid debug checks in uniform container erasure functions\n\nIn commit r12-4083 I tried to make the std::erase and std::erase_if\nfunction avoid the unnecessary overhead of safe iterators. It didn't\nwork, for two reasons. Firstly, for the RB tree containers the\n__niter_base function is a no-op (because the iterators aren't\nrandom access) so the safe iterators were still used. Secondly, for the\ncases where __niter_base did remove the safe iterator layer, there was\nstill unnecessary overhead to create a new safe iterator and link it to\nthe container.\n\nThis solves the problem by simply binding a reference to the non-debug\nversion of the conainer. For normal mode this is a no-op, and for debug\nmode it binds a reference to the debug container's base class. That\nmeans the rest of the function operates directly on the non-debug\ncontainer, and avoids all checking.\n\nFor std::basic_string there's no need to unwrap anything, because we use\nstd::basic_string directly in debug mode anyway.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/erase_if.h (__erase_nodes_if): Remove redundant\n\t__niter_base calls.\n\t* include/std/string (erase, erase_if): Likewise.\n\t* include/std/deque (erase, erase_if): Access non-debug\n\tcontainer directly.\n\t* include/std/map (erase, erase_if): Likewise.\n\t* include/std/set (erase, erase_if): Likewise.\n\t* include/std/unordered_map (erase, erase_if): Likewise.\n\t* include/std/unordered_set (erase, erase_if): Likewise.\n\t* include/std/vector (erase, erase_if): Likewise.\n\t* include/experimental/deque (erase, erase_if): Likewise.\n\t* include/experimental/map (erase, erase_if): Likewise.\n\t* include/experimental/set (erase, erase_if): Likewise.\n\t* include/experimental/unordered_map (erase, erase_if):\n\tLikewise.\n\t* include/experimental/unordered_set (erase, erase_if):\n\tLikewise.\n\t* include/experimental/vector (erase, erase_if): Likewise.", "tree": {"sha": "0b8d2e4bfc2da06b79c03be3e05a28e01dac546e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b8d2e4bfc2da06b79c03be3e05a28e01dac546e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/561078480ffb5adb68577276c6b23e4ee7b39272", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/561078480ffb5adb68577276c6b23e4ee7b39272", "html_url": "https://github.com/Rust-GCC/gccrs/commit/561078480ffb5adb68577276c6b23e4ee7b39272", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/561078480ffb5adb68577276c6b23e4ee7b39272/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c1838c01652a403498e27024cb0e5ea66376353", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c1838c01652a403498e27024cb0e5ea66376353", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c1838c01652a403498e27024cb0e5ea66376353"}], "stats": {"total": 177, "additions": 114, "deletions": 63}, "files": [{"sha": "8d1d23168fa90838c6d51782d46346fb76317eb2", "filename": "libstdc++-v3/include/bits/erase_if.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561078480ffb5adb68577276c6b23e4ee7b39272/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ferase_if.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561078480ffb5adb68577276c6b23e4ee7b39272/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ferase_if.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ferase_if.h?ref=561078480ffb5adb68577276c6b23e4ee7b39272", "patch": "@@ -51,8 +51,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __erase_nodes_if(_Container& __cont, _Predicate __pred)\n       {\n \ttypename _Container::size_type __num = 0;\n-\tfor (auto __iter = std::__niter_base(__cont.begin()),\n-\t     __last = std::__niter_base(__cont.end());\n+\tfor (auto __iter = __cont.begin(), __last = __cont.end();\n \t     __iter != __last;)\n \t  {\n \t    if (__pred(*__iter))"}, {"sha": "710833ebcaded99b557ad800e7d6121f003229a2", "filename": "libstdc++-v3/include/experimental/deque", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561078480ffb5adb68577276c6b23e4ee7b39272/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561078480ffb5adb68577276c6b23e4ee7b39272/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fdeque?ref=561078480ffb5adb68577276c6b23e4ee7b39272", "patch": "@@ -50,16 +50,16 @@ inline namespace fundamentals_v2\n     inline void\n     erase_if(deque<_Tp, _Alloc>& __cont, _Predicate __pred)\n     {\n-      __cont.erase(std::remove_if(__cont.begin(), __cont.end(), __pred),\n-\t\t   __cont.end());\n+      _GLIBCXX_STD_C::deque<_Tp, _Alloc>& __c = __cont;\n+      __c.erase(std::remove_if(__c.begin(), __c.end(), __pred), __c.end());\n     }\n \n   template<typename _Tp, typename _Alloc, typename _Up>\n     inline void\n     erase(deque<_Tp, _Alloc>& __cont, const _Up& __value)\n     {\n-      __cont.erase(std::remove(__cont.begin(), __cont.end(), __value),\n-\t\t   __cont.end());\n+      _GLIBCXX_STD_C::deque<_Tp, _Alloc>& __c = __cont;\n+      __c.erase(std::remove(__c.begin(), __c.end(), __value), __c.end());\n     }\n \n   namespace pmr {"}, {"sha": "ef69fadf9441ac0332ab227c1135572cf5262035", "filename": "libstdc++-v3/include/experimental/map", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561078480ffb5adb68577276c6b23e4ee7b39272/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmap", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561078480ffb5adb68577276c6b23e4ee7b39272/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmap", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmap?ref=561078480ffb5adb68577276c6b23e4ee7b39272", "patch": "@@ -50,13 +50,19 @@ inline namespace fundamentals_v2\n \t   typename _Predicate>\n     inline void\n     erase_if(map<_Key, _Tp, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    { std::__detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      _GLIBCXX_STD_C::map<_Key, _Tp, _Compare, _Alloc>& __c = __cont;\n+      std::__detail::__erase_nodes_if(__c, __pred);\n+    }\n \n   template<typename _Key, typename _Tp, typename _Compare, typename _Alloc,\n \t   typename _Predicate>\n     inline void\n     erase_if(multimap<_Key, _Tp, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    { std::__detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      _GLIBCXX_STD_C::multimap<_Key, _Tp, _Compare, _Alloc>& __c = __cont;\n+      std::__detail::__erase_nodes_if(__c, __pred);\n+    }\n \n   namespace pmr {\n     template<typename _Key, typename _Tp, typename _Compare = less<_Key>>"}, {"sha": "7a5986aec0e9b03b5f46b6be2ff21590fe816ca1", "filename": "libstdc++-v3/include/experimental/set", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561078480ffb5adb68577276c6b23e4ee7b39272/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561078480ffb5adb68577276c6b23e4ee7b39272/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fset?ref=561078480ffb5adb68577276c6b23e4ee7b39272", "patch": "@@ -50,13 +50,19 @@ inline namespace fundamentals_v2\n \t   typename _Predicate>\n     inline void\n     erase_if(set<_Key, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    { std::__detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      _GLIBCXX_STD_C::set<_Key, _Compare, _Alloc>& __c = __cont;\n+      std::__detail::__erase_nodes_if(__c, __pred);\n+    }\n \n   template<typename _Key, typename _Compare, typename _Alloc,\n \t   typename _Predicate>\n     inline void\n     erase_if(multiset<_Key, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    { std::__detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      _GLIBCXX_STD_C::multiset<_Key, _Compare, _Alloc>& __c = __cont;\n+      std::__detail::__erase_nodes_if(__c, __pred);\n+    }\n \n   namespace pmr {\n     template<typename _Key, typename _Compare = less<_Key>>"}, {"sha": "eba989713fa096601ed6ec1bda067187284fd865", "filename": "libstdc++-v3/include/experimental/unordered_map", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561078480ffb5adb68577276c6b23e4ee7b39272/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561078480ffb5adb68577276c6b23e4ee7b39272/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_map?ref=561078480ffb5adb68577276c6b23e4ee7b39272", "patch": "@@ -51,14 +51,22 @@ inline namespace fundamentals_v2\n     inline void\n     erase_if(unordered_map<_Key, _Tp, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    { std::__detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      _GLIBCXX_STD_C::unordered_map<_Key, _Tp, _Hash, _CPred, _Alloc>& __c\n+\t= __cont;\n+      std::__detail::__erase_nodes_if(__c, __pred);\n+    }\n \n   template<typename _Key, typename _Tp, typename _Hash, typename _CPred,\n \t   typename _Alloc, typename _Predicate>\n     inline void\n     erase_if(unordered_multimap<_Key, _Tp, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    { std::__detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      _GLIBCXX_STD_C::unordered_multimap<_Key, _Tp, _Hash, _CPred, _Alloc>& __c\n+\t= __cont;\n+      std::__detail::__erase_nodes_if(__c, __pred);\n+    }\n \n   namespace pmr {\n     template<typename _Key, typename _Tp, typename _Hash = hash<_Key>,"}, {"sha": "bc5cc11419e091e0da772a54fbd2e9282c8868c5", "filename": "libstdc++-v3/include/experimental/unordered_set", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561078480ffb5adb68577276c6b23e4ee7b39272/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561078480ffb5adb68577276c6b23e4ee7b39272/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_set?ref=561078480ffb5adb68577276c6b23e4ee7b39272", "patch": "@@ -51,14 +51,21 @@ inline namespace fundamentals_v2\n     inline void\n     erase_if(unordered_set<_Key, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    { std::__detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      _GLIBCXX_STD_C::unordered_set<_Key, _Hash, _CPred, _Alloc>& __c = __cont;\n+      std::__detail::__erase_nodes_if(__c, __pred);\n+    }\n \n   template<typename _Key, typename _Hash, typename _CPred, typename _Alloc,\n \t   typename _Predicate>\n     inline void\n     erase_if(unordered_multiset<_Key, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    { std::__detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      _GLIBCXX_STD_C::unordered_multiset<_Key, _Hash, _CPred, _Alloc>& __c\n+\t= __cont;\n+      std::__detail::__erase_nodes_if(__c, __pred);\n+    }\n \n   namespace pmr {\n     template<typename _Key, typename _Hash = hash<_Key>,"}, {"sha": "c45a500ef5e676990f5101a516d0e5ad8676a230", "filename": "libstdc++-v3/include/experimental/vector", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561078480ffb5adb68577276c6b23e4ee7b39272/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561078480ffb5adb68577276c6b23e4ee7b39272/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fvector?ref=561078480ffb5adb68577276c6b23e4ee7b39272", "patch": "@@ -52,16 +52,16 @@ inline namespace fundamentals_v2\n     inline void\n     erase_if(vector<_Tp, _Alloc>& __cont, _Predicate __pred)\n     {\n-      __cont.erase(std::remove_if(__cont.begin(), __cont.end(), __pred),\n-\t\t   __cont.end());\n+      _GLIBCXX_STD_C::vector<_Tp, _Alloc>& __c = __cont;\n+      __c.erase(std::remove_if(__c.begin(), __c.end(), __pred), __c.end());\n     }\n \n   template<typename _Tp, typename _Alloc, typename _Up>\n     inline void\n     erase(vector<_Tp, _Alloc>& __cont, const _Up& __value)\n     {\n-      __cont.erase(std::remove(__cont.begin(), __cont.end(), __value),\n-\t\t   __cont.end());\n+      _GLIBCXX_STD_C::vector<_Tp, _Alloc>& __c = __cont;\n+      __c.erase(std::remove(__c.begin(), __c.end(), __value), __c.end());\n     }\n \n   namespace pmr {"}, {"sha": "71993e757a516ad2c12de8602d5ac876093e5830", "filename": "libstdc++-v3/include/std/deque", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561078480ffb5adb68577276c6b23e4ee7b39272/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561078480ffb5adb68577276c6b23e4ee7b39272/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fdeque?ref=561078480ffb5adb68577276c6b23e4ee7b39272", "patch": "@@ -95,28 +95,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline typename deque<_Tp, _Alloc>::size_type\n     erase_if(deque<_Tp, _Alloc>& __cont, _Predicate __pred)\n     {\n+      _GLIBCXX_STD_C::deque<_Tp, _Alloc>& __c = __cont;\n       using namespace __gnu_cxx;\n-      const auto __osz = __cont.size();\n-      const auto __end = __cont.end();\n-      auto __removed(std::__remove_if(std::__niter_base(__cont.begin()),\n-\t\t\t\t      std::__niter_base(__end),\n-\t\t\t\t      __ops::__pred_iter(std::ref(__pred))));\n-      __cont.erase(std::__niter_wrap(__end, __removed), __end);\n-      return __osz - __cont.size();\n+      const auto __osz = __c.size();\n+      const auto __end = __c.end();\n+      auto __removed = std::__remove_if(__c.begin(), __end,\n+\t\t\t\t\t__ops::__pred_iter(std::ref(__pred)));\n+      __c.erase(__removed, __end);\n+      return __osz - __c.size();\n     }\n \n   template<typename _Tp, typename _Alloc, typename _Up>\n     inline typename deque<_Tp, _Alloc>::size_type\n     erase(deque<_Tp, _Alloc>& __cont, const _Up& __value)\n     {\n+      _GLIBCXX_STD_C::deque<_Tp, _Alloc>& __c = __cont;\n       using namespace __gnu_cxx;\n-      const auto __osz = __cont.size();\n-      const auto __end = __cont.end();\n-      auto __removed(std::__remove_if(std::__niter_base(__cont.begin()),\n-\t\t\t\t      std::__niter_base(__end),\n-\t\t\t\t      __ops::__iter_equals_val(__value)));\n-      __cont.erase(std::__niter_wrap(__end, __removed), __end);\n-      return __osz - __cont.size();\n+      const auto __osz = __c.size();\n+      const auto __end = __c.end();\n+      auto __removed = std::__remove_if(__c.begin(), __end,\n+\t\t\t\t\t__ops::__iter_equals_val(__value));\n+      __c.erase(__removed, __end);\n+      return __osz - __c.size();\n     }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "29265580995f6636e23a8be5cec0962c5a178bc9", "filename": "libstdc++-v3/include/std/map", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561078480ffb5adb68577276c6b23e4ee7b39272/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmap", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561078480ffb5adb68577276c6b23e4ee7b39272/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmap", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmap?ref=561078480ffb5adb68577276c6b23e4ee7b39272", "patch": "@@ -95,13 +95,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _Predicate>\n     inline typename map<_Key, _Tp, _Compare, _Alloc>::size_type\n     erase_if(map<_Key, _Tp, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    { return __detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      _GLIBCXX_STD_C::map<_Key, _Tp, _Compare, _Alloc>& __c = __cont;\n+      return __detail::__erase_nodes_if(__c, __pred);\n+    }\n \n   template<typename _Key, typename _Tp, typename _Compare, typename _Alloc,\n \t   typename _Predicate>\n     inline typename multimap<_Key, _Tp, _Compare, _Alloc>::size_type\n     erase_if(multimap<_Key, _Tp, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    { return __detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      _GLIBCXX_STD_C::multimap<_Key, _Tp, _Compare, _Alloc>& __c = __cont;\n+      return __detail::__erase_nodes_if(__c, __pred);\n+    }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++20"}, {"sha": "24e6e6336248383e50ec668a4075393d3cff6dd4", "filename": "libstdc++-v3/include/std/set", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561078480ffb5adb68577276c6b23e4ee7b39272/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561078480ffb5adb68577276c6b23e4ee7b39272/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fset?ref=561078480ffb5adb68577276c6b23e4ee7b39272", "patch": "@@ -91,13 +91,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _Predicate>\n     inline typename set<_Key, _Compare, _Alloc>::size_type\n     erase_if(set<_Key, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    { return __detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      _GLIBCXX_STD_C::set<_Key, _Compare, _Alloc>& __c = __cont;\n+      return __detail::__erase_nodes_if(__c, __pred);\n+    }\n \n   template<typename _Key, typename _Compare, typename _Alloc,\n \t   typename _Predicate>\n     inline typename multiset<_Key, _Compare, _Alloc>::size_type\n     erase_if(multiset<_Key, _Compare, _Alloc>& __cont, _Predicate __pred)\n-    { return __detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      _GLIBCXX_STD_C::multiset<_Key, _Compare, _Alloc>& __c = __cont;\n+      return __detail::__erase_nodes_if(__c, __pred);\n+    }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++20"}, {"sha": "95412b6f7a3fb1010b77784a32902895366644ae", "filename": "libstdc++-v3/include/std/string", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561078480ffb5adb68577276c6b23e4ee7b39272/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561078480ffb5adb68577276c6b23e4ee7b39272/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring?ref=561078480ffb5adb68577276c6b23e4ee7b39272", "patch": "@@ -124,12 +124,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     erase_if(basic_string<_CharT, _Traits, _Alloc>& __cont, _Predicate __pred)\n     {\n       using namespace __gnu_cxx;\n-      using _It = typename basic_string<_CharT, _Traits, _Alloc>::iterator;\n       const auto __osz = __cont.size();\n-      _It __removed(std::__remove_if(std::__niter_base(__cont.begin()),\n-\t\t\t\t      std::__niter_base(__cont.end()),\n-\t\t\t\t      __ops::__pred_iter(std::ref(__pred))));\n-      __cont.erase(__removed, __cont.end());\n+      const auto __end = __cont.end();\n+      auto __removed = std::__remove_if(__cont.begin(), __end,\n+\t\t\t\t\t__ops::__pred_iter(std::ref(__pred)));\n+      __cont.erase(__removed, __end);\n       return __osz - __cont.size();\n     }\n \n@@ -138,12 +137,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     erase(basic_string<_CharT, _Traits, _Alloc>& __cont, const _Up& __value)\n     {\n       using namespace __gnu_cxx;\n-      using _It = typename basic_string<_CharT, _Traits, _Alloc>::iterator;\n       const auto __osz = __cont.size();\n-      _It __removed(std::__remove_if(std::__niter_base(__cont.begin()),\n-\t\t\t\t      std::__niter_base(__cont.end()),\n-\t\t\t\t      __ops::__iter_equals_val(__value)));\n-      __cont.erase(__removed, __cont.end());\n+      const auto __end = __cont.end();\n+      auto __removed = std::__remove_if(__cont.begin(), __end,\n+\t\t\t\t\t__ops::__iter_equals_val(__value));\n+      __cont.erase(__removed, __end);\n       return __osz - __cont.size();\n     }\n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "774c21fc28b207d9e7465b136891b8b3b763b69f", "filename": "libstdc++-v3/include/std/unordered_map", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561078480ffb5adb68577276c6b23e4ee7b39272/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561078480ffb5adb68577276c6b23e4ee7b39272/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map?ref=561078480ffb5adb68577276c6b23e4ee7b39272", "patch": "@@ -83,15 +83,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline typename unordered_map<_Key, _Tp, _Hash, _CPred, _Alloc>::size_type\n     erase_if(unordered_map<_Key, _Tp, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    { return __detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      _GLIBCXX_STD_C::unordered_map<_Key, _Tp, _Hash, _CPred, _Alloc>& __c\n+\t= __cont;\n+      return __detail::__erase_nodes_if(__c, __pred);\n+    }\n \n   template<typename _Key, typename _Tp, typename _Hash, typename _CPred,\n \t   typename _Alloc, typename _Predicate>\n     inline typename unordered_multimap<_Key, _Tp, _Hash, _CPred, _Alloc>::\n \t\t    size_type\n     erase_if(unordered_multimap<_Key, _Tp, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    { return __detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      _GLIBCXX_STD_C::unordered_multimap<_Key, _Tp, _Hash, _CPred, _Alloc>& __c\n+\t= __cont;\n+      return __detail::__erase_nodes_if(__c, __pred);\n+    }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++20"}, {"sha": "3859eeaebd09732a579c4d218b38799cb9498695", "filename": "libstdc++-v3/include/std/unordered_set", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561078480ffb5adb68577276c6b23e4ee7b39272/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561078480ffb5adb68577276c6b23e4ee7b39272/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set?ref=561078480ffb5adb68577276c6b23e4ee7b39272", "patch": "@@ -83,14 +83,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline typename unordered_set<_Key, _Hash, _CPred, _Alloc>::size_type\n     erase_if(unordered_set<_Key, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    { return __detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      _GLIBCXX_STD_C::unordered_set<_Key, _Hash, _CPred, _Alloc>& __c = __cont;\n+      return __detail::__erase_nodes_if(__c, __pred);\n+    }\n \n   template<typename _Key, typename _Hash, typename _CPred, typename _Alloc,\n \t   typename _Predicate>\n     inline typename unordered_multiset<_Key, _Hash, _CPred, _Alloc>::size_type\n     erase_if(unordered_multiset<_Key, _Hash, _CPred, _Alloc>& __cont,\n \t     _Predicate __pred)\n-    { return __detail::__erase_nodes_if(__cont, __pred); }\n+    {\n+      _GLIBCXX_STD_C::unordered_multiset<_Key, _Hash, _CPred, _Alloc>& __c\n+\t= __cont;\n+      return __detail::__erase_nodes_if(__c, __pred);\n+    }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++20"}, {"sha": "835fa8aeb691f28ebbb41545ba07ee21727ba853", "filename": "libstdc++-v3/include/std/vector", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561078480ffb5adb68577276c6b23e4ee7b39272/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561078480ffb5adb68577276c6b23e4ee7b39272/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector?ref=561078480ffb5adb68577276c6b23e4ee7b39272", "patch": "@@ -105,28 +105,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline typename vector<_Tp, _Alloc>::size_type\n     erase_if(vector<_Tp, _Alloc>& __cont, _Predicate __pred)\n     {\n+      _GLIBCXX_STD_C::vector<_Tp, _Alloc>& __c = __cont;\n       using namespace __gnu_cxx;\n-      const auto __osz = __cont.size();\n-      const auto __end = __cont.end();\n-      auto __removed(std::__remove_if(std::__niter_base(__cont.begin()),\n-\t\t\t\t      std::__niter_base(__end),\n+      const auto __osz = __c.size();\n+      const auto __end = __c.end();\n+      auto __removed(std::__remove_if(__c.begin(), __end,\n \t\t\t\t      __ops::__pred_iter(std::ref(__pred))));\n-      __cont.erase(std::__niter_wrap(__end, __removed), __end);\n-      return __osz - __cont.size();\n+      __c.erase(__removed, __end);\n+      return __osz - __c.size();\n     }\n \n   template<typename _Tp, typename _Alloc, typename _Up>\n     inline typename vector<_Tp, _Alloc>::size_type\n     erase(vector<_Tp, _Alloc>& __cont, const _Up& __value)\n     {\n+      _GLIBCXX_STD_C::vector<_Tp, _Alloc>& __c = __cont;\n       using namespace __gnu_cxx;\n-      const auto __osz = __cont.size();\n-      const auto __end = __cont.end();\n-      auto __removed(std::__remove_if(std::__niter_base(__cont.begin()),\n-\t\t\t\t      std::__niter_base(__end),\n-\t\t\t\t      __ops::__iter_equals_val(__value)));\n-      __cont.erase(std::__niter_wrap(__end, __removed), __end);\n-      return __osz - __cont.size();\n+      const auto __osz = __c.size();\n+      const auto __end = __c.end();\n+      auto __removed = std::__remove_if(__c.begin(), __end,\n+\t\t\t\t\t__ops::__iter_equals_val(__value));\n+      __c.erase(__removed, __end);\n+      return __osz - __c.size();\n     }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}]}