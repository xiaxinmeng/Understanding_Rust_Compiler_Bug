{"sha": "6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ0NWY0NTk3NWJhODg3ZGMxNGY0YWEzYzI1YzE3ZjlkMWJlYzVmOQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-03-02T10:04:45Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-16T05:09:30Z"}, "message": "AVX512FP16: Add testcase for vmovsh/vmovw.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-vmovsh-1a.c: New test.\n\t* gcc.target/i386/avx512fp16-vmovsh-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vmovw-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vmovw-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vmovw-2a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vmovw-2b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vmovw-3a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vmovw-3b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vmovw-4a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vmovw-4b.c: Ditto.", "tree": {"sha": "fc110d65138f65edea25f958789ba5e2b6498be1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc110d65138f65edea25f958789ba5e2b6498be1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4d423c74abd470d0161ec2a428fd01de5e1ed76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d423c74abd470d0161ec2a428fd01de5e1ed76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4d423c74abd470d0161ec2a428fd01de5e1ed76"}], "stats": {"total": 411, "additions": 411, "deletions": 0}, "files": [{"sha": "e35be10fcd0ec1a52e46ea7c760593e3aae036b3", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vmovsh-1a.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovsh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovsh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovsh-1a.c?ref=6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vmovsh\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r\\]*%\\[er\\]ax+\\[^\\n\\r]*\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovsh\\[ \\\\t\\]+\\[^\\n\\r\\]*%\\[er\\]ax+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovsh\\[ \\\\t\\]+\\[^\\n\\r\\]*%\\[er\\]ax+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovsh\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovsh\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^z\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovsh\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+extern _Float16 const* p;\n+volatile __m128h x1, x2, res;\n+volatile __mmask8 m8;\n+\n+void\n+avx512f_test (void)\n+{\n+  x2 = _mm_mask_load_sh (x1, m8, p);\n+  x2 = _mm_maskz_load_sh (m8, p);\n+  _mm_mask_store_sh (p, m8, x1);\n+\n+  res = _mm_move_sh (x1, x2);\n+  res = _mm_mask_move_sh (res, m8, x1, x2);\n+  res = _mm_maskz_move_sh (m8, x1, x2);\n+}"}, {"sha": "cea224a62e6e0a02d9cb77b35410d8372b7d0b86", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vmovsh-1b.c", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovsh-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovsh-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovsh-1b.c?ref=6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9", "patch": "@@ -0,0 +1,115 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+void NOINLINE\n+emulate_mov2_load_sh(V512 * dest, V512 op1,\n+\t\t     __mmask8 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  unpack_ph_2twops(*dest, &v7, &v8);\n+\n+  if ((k&1) || !k)\n+    v5.f32[0] = v1.f32[0];\n+  else if (zero_mask)\n+    v5.f32[0] = 0;\n+  else\n+    v5.f32[0] = v7.f32[0]; //remains unchanged\n+\n+  for (i = 1; i < 8; i++)\n+    v5.f32[i] = 0;\n+\n+  *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void NOINLINE\n+emulate_mov3_load_sh(V512 * dest, V512 op1, V512 op2,\n+\t\t     __mmask8 k, int zero_mask)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  unpack_ph_2twops(op2, &v3, &v4);\n+  unpack_ph_2twops(*dest, &v7, &v8);\n+\n+  if ((k&1) || !k)\n+    v5.f32[0] = v3.f32[0];\n+  else if (zero_mask)\n+    v5.f32[0] = 0;\n+  else\n+    v5.f32[0] = v7.f32[0]; //remains unchanged\n+\n+  for (i = 1; i < 8; i++)\n+    v5.f32[i] = v1.f32[i];\n+\n+  *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void NOINLINE\n+emulate_mov2_store_sh(V512 * dest, V512 op1, __mmask8 k)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  unpack_ph_2twops(*dest, &v7, &v8);\n+\n+  if ((k&1) || !k)\n+    v5.f32[0] = v1.f32[0];\n+  else\n+    v5.f32[0] = v7.f32[0]; //remains unchanged\n+\n+  *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  // no mask\n+  emulate_mov2_load_sh (&exp, src1, 0x0, 0);\n+  res.xmmh[0] = _mm_load_sh((const void *)&(src1.u16[0]));\n+  check_results(&res, &exp, 8, \"_mm_load_sh\");\n+\n+  // with mask and mask bit is set\n+  emulate_mov2_load_sh (&exp, src1, 0x1, 0);\n+  res.xmmh[0] = _mm_mask_load_sh(res.xmmh[0], 0x1, (const void *)&(src1.u16[0]));\n+  check_results(&res, &exp, 8, \"_mm__mask_load_sh\");\n+\n+  // with zero-mask\n+  emulate_mov2_load_sh (&exp, src1, 0x0, 1);\n+  res.xmmh[0] = _mm_maskz_load_sh(0x1, (const void *)&(src1.u16[0]));\n+  check_results(&res, &exp, 8, \"_mm_maskz_load_sh\");\n+\n+  emulate_mov3_load_sh (&exp, src1, src2, 0x1, 0);\n+  res.xmmh[0] = _mm_mask_move_sh(res.xmmh[0], 0x1, src1.xmmh[0], src2.xmmh[0]);\n+  check_results(&res, &exp, 8, \"_mm_mask_move_sh\");\n+\n+  emulate_mov3_load_sh (&exp, src1, src2, 0x1, 1);\n+  res.xmmh[0] = _mm_maskz_move_sh(0x1, src1.xmmh[0], src2.xmmh[0]);\n+  check_results(&res, &exp, 8, \"_mm_maskz_move_sh\");\n+\n+  // no mask\n+  emulate_mov2_store_sh (&exp, src1, 0x0);\n+  _mm_store_sh((void *)&(res.u16[0]), src1.xmmh[0]);\n+  check_results(&exp, &res, 1, \"_mm_store_sh\");\n+\n+  // with mask\n+  emulate_mov2_store_sh (&exp, src1, 0x1);\n+  _mm_mask_store_sh((void *)&(res.u16[0]), 0x1, src1.xmmh[0]);\n+  check_results(&exp, &res, 1, \"_mm_mask_store_sh\");\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}"}, {"sha": "177802c6dcb3304518d8d71f77c14fb15cfd40c6", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vmovw-1a.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovw-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovw-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovw-1a.c?ref=6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vmovw\\[^-]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpextrw\" 1 } } */\n+#include <immintrin.h>\n+\n+volatile __m128i x1;\n+volatile short x2;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm_cvtsi16_si128 (x2);\n+  x2 = _mm_cvtsi128_si16 (x1);\n+}"}, {"sha": "a96007d6fd878751d1eb95e620bf992519b7c235", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vmovw-1b.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovw-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovw-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovw-1b.c?ref=6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run {target avx512fp16} } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+\n+static void\n+do_test (void)\n+{\n+  union128i_w u;\n+  short b = 128;\n+  short e[8] = {0,0,0,0,0,0,0,0};\n+\n+  u.x = _mm_cvtsi16_si128 (b);\n+\n+  e[0] = b;\n+\n+  if (check_union128i_w (u, e))\n+    abort ();\n+  u.a[0] = 123;\n+  b = _mm_cvtsi128_si16 (u.x);\n+  if (u.a[0] != b)\n+    abort();  \n+}"}, {"sha": "efa24e5523c5c5543825a3690e457aa8f3cded60", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vmovw-2a.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovw-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovw-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovw-2a.c?ref=6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+typedef short __v8hi __attribute__ ((__vector_size__ (16)));\n+typedef long long __m128i __attribute__ ((__vector_size__ (16), __may_alias__));\n+\n+__m128i\n+__attribute__ ((noinline, noclone))\n+foo1 (short x)\n+{\n+  return __extension__ (__m128i)(__v8hi) { x, 0, 0, 0, 0, 0, 0, 0 };\n+}\n+\n+__m128i\n+__attribute__ ((noinline, noclone))\n+foo2 (short *x)\n+{\n+  return __extension__ (__m128i)(__v8hi) { *x, 0, 0, 0, 0, 0, 0, 0 };\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovw\\[^-\\n\\r]*xmm0\" 2  } } */"}, {"sha": "b680a16945f99bc2a25697547eebc113d98d5120", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vmovw-2b.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovw-2b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovw-2b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovw-2b.c?ref=6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+#include <string.h>\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+#include \"avx512fp16-vmovw-2a.c\"\n+\n+__m128i\n+__attribute__ ((noinline,noclone))\n+foo3 (__m128i x)\n+{\n+  return foo1 (((__v8hi) x)[0]);\n+}\n+\n+static void\n+do_test (void)\n+{\n+  short x;\n+  union128i_w u = { -1, -1,};\n+  union128i_w exp = { 0, 0};\n+  __m128i v;\n+  union128i_w a;\n+\n+  x = 25;\n+  exp.a[0] = x;\n+  memset (&v, -1, sizeof (v));\n+  v = foo1 (x);\n+  a.x = v;\n+  if (check_union128i_w (a, exp.a))\n+    abort ();\n+\n+  x = 33;\n+  exp.a[0] = x;\n+  memset (&v, -1, sizeof (v));\n+  v = foo2 (&x);\n+  a.x = v;\n+  if (check_union128i_w (a, exp.a))\n+    abort ();\n+\n+  x = -33;\n+  u.a[0] = x;\n+  exp.a[0] = x;\n+  memset (&v, -1, sizeof (v));\n+  v = foo3 (u.x);\n+  a.x = v;\n+  if (check_union128i_w (a, exp.a))\n+    abort ();\n+}"}, {"sha": "c60310710a4169e42f24b5e38f97605f03c0b064", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vmovw-3a.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovw-3a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovw-3a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovw-3a.c?ref=6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+typedef short __v16hi __attribute__ ((__vector_size__ (32)));\n+typedef long long __m256i __attribute__ ((__vector_size__ (32), __may_alias__));\n+\n+__m256i\n+__attribute__ ((noinline, noclone))\n+foo1 (short x)\n+{\n+  return __extension__ (__m256i)(__v16hi) { x, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t     0, 0, 0, 0, 0, 0, 0, 0 };\n+}\n+\n+__m256i\n+__attribute__ ((noinline, noclone))\n+foo2 (short *x)\n+{\n+  return __extension__ (__m256i)(__v16hi) { *x, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t     0, 0, 0, 0, 0, 0, 0, 0 };\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovw\\[^-\\n\\r]*xmm0\" 2 } } */"}, {"sha": "13c1f6518f2544e96fec172b4d2df9f95dde3c4f", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vmovw-3b.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovw-3b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovw-3b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovw-3b.c?ref=6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+#include <string.h>\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+#include \"avx512fp16-vmovw-3a.c\"\n+\n+__m256i\n+__attribute__ ((noinline,noclone))\n+foo3 (__m256i x)\n+{\n+  return foo1 (((__v16hi) x)[0]);\n+}\n+\n+static void\n+do_test (void)\n+{\n+  short x;\n+  union256i_w u = { -1, -1, -1, -1 };\n+  union256i_w exp = { 0, 0, 0, 0 };\n+\n+  __m256i v;\n+  union256i_w a;\n+  exp.a[0] = x;\n+  memset (&v, -1, sizeof (v));\n+  v = foo1 (x);\n+  a.x = v;\n+  if (check_union256i_w (a, exp.a))\n+    abort ();\n+\n+  x = 33;\n+  exp.a[0] = x;\n+  memset (&v, -1, sizeof (v));\n+  v = foo2 (&x);\n+  a.x = v;\n+  if (check_union256i_w (a, exp.a))\n+    abort ();\n+\n+  x = -23;\n+  u.a[0] = x;\n+  exp.a[0] = x;\n+  memset (&v, -1, sizeof (v));\n+  v = foo3 (u.x);\n+  a.x = v;\n+  if (check_union256i_w (a, exp.a))\n+    abort ();\n+}"}, {"sha": "2ba198dd7fc9b6a3249f17c39b96bcc78eae05f6", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vmovw-4a.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovw-4a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovw-4a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovw-4a.c?ref=6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+typedef short __v32hi __attribute__ ((__vector_size__ (64)));\n+typedef long long __m512i __attribute__ ((__vector_size__ (64), __may_alias__));\n+\n+__m512i\n+__attribute__ ((noinline, noclone))\n+foo1 (short x)\n+{\n+  return __extension__ (__m512i)(__v32hi) { x, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t     0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t     0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t     0, 0, 0, 0, 0, 0, 0, 0 };\n+}\n+\n+__m512i\n+__attribute__ ((noinline, noclone))\n+foo2 (short *x)\n+{\n+  return __extension__ (__m512i)(__v32hi) { *x, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t     0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t     0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t     0, 0, 0, 0, 0, 0, 0, 0 };\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovw\\[^-\\n\\r]*xmm0\" 2 } } */"}, {"sha": "ec6477b793fdbbcd6f55dd69f132acf2b3d2ee39", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vmovw-4b.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovw-4b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovw-4b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmovw-4b.c?ref=6d45f45975ba887dc14f4aa3c25c17f9d1bec5f9", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+#include <string.h>\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+#include \"avx512fp16-vmovw-4a.c\"\n+\n+__m512i\n+__attribute__ ((noinline,noclone))\n+foo3 (__m512i x)\n+{\n+  return foo1 (((__v32hi) x)[0]);\n+}\n+\n+static void\n+do_test (void)\n+{\n+  short x = 25;\n+  union512i_w u = { -1, -1, -1, -1, -1, -1, -1, -1 };\n+  union512i_w exp = { 0, 0, 0, 0, 0, 0, 0, 0 };\n+\n+  __m512i v;\n+  union512i_w a;\n+  exp.a[0] = x;\n+  memset (&v, -1, sizeof (v));\n+  v = foo1 (x);\n+  a.x = v;\n+  if (check_union512i_w (a, exp.a))\n+    abort ();\n+\n+  x = 55;\n+  exp.a[0] = x;\n+  memset (&v, -1, sizeof (v));\n+  v = foo2 (&x);\n+  a.x = v;\n+  if (check_union512i_w (a, exp.a))\n+    abort ();\n+\n+  x = 33;\n+  u.a[0] = x;\n+  exp.a[0] = x;\n+  memset (&v, -1, sizeof (v));\n+  v = foo3 (u.x);\n+  a.x = v;\n+  if (check_union512i_w (a, exp.a))\n+    abort ();\n+}"}]}