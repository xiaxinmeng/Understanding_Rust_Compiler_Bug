{"sha": "3a0462b3e6dd2c22843f7715dd49d2ce28883835", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EwNDYyYjNlNmRkMmMyMjg0M2Y3NzE1ZGQ0OWQyY2UyODg4MzgzNQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2006-02-15T09:36:02Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-15T09:36:02Z"}, "message": "err_vars.ads: Suppress range checks for a couple of assignments which otherwise cause...\n\n2006-02-13  Robert Dewar  <dewar@adacore.com>\n\t    Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* err_vars.ads: Suppress range checks for a couple of assignments\n\twhich otherwise cause validity checks with validity checking turned on.\n\tUpdate comments.\n\n\t* errout.adb (Error_Msg_Internal): Do not suppress warning messages.\n\tMake message unconditional if it is a warning.\n\t(Error_Msg_NEL): Always output warning messages.\n\tSuppress range checks for a couple of assignments which otherwise\n\tcause validity checks with validity checking turned on.\n\n\t* errout.ads (Message Insertion Characters): Document that '!' is\n\timplied by '?' in error messages.\n\n\t* gnat1drv.adb: (Bad_Body): Remove '!' in warning message.\n\t(Gnat1drv): Use a goto to end of main subprogram instead of\n\tExit_Program (E_Success) so that finalization can occur normally.\n\nFrom-SVN: r111049", "tree": {"sha": "105ad500b107811fbbfd7ea9e65b8eda6afed5b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/105ad500b107811fbbfd7ea9e65b8eda6afed5b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a0462b3e6dd2c22843f7715dd49d2ce28883835", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a0462b3e6dd2c22843f7715dd49d2ce28883835", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a0462b3e6dd2c22843f7715dd49d2ce28883835", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a0462b3e6dd2c22843f7715dd49d2ce28883835/comments", "author": null, "committer": null, "parents": [{"sha": "7a5cf1d56ac04081e82e04e4b89e1934c43ddf1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a5cf1d56ac04081e82e04e4b89e1934c43ddf1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a5cf1d56ac04081e82e04e4b89e1934c43ddf1b"}], "stats": {"total": 172, "additions": 106, "deletions": 66}, "files": [{"sha": "66a33fa9d107d0a1d5ef6de3239e424d2a8911be", "filename": "gcc/ada/err_vars.ads", "status": "modified", "additions": 53, "deletions": 36, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0462b3e6dd2c22843f7715dd49d2ce28883835/gcc%2Fada%2Ferr_vars.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0462b3e6dd2c22843f7715dd49d2ce28883835/gcc%2Fada%2Ferr_vars.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferr_vars.ads?ref=3a0462b3e6dd2c22843f7715dd49d2ce28883835", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,28 +32,50 @@ with Uintp; use Uintp;\n \n package Err_Vars is\n \n+   ------------------\n+   -- Error Counts --\n+   ------------------\n+\n    Serious_Errors_Detected : Nat;\n    --  This is a count of errors that are serious enough to stop expansion,\n    --  and hence to prevent generation of an object file even if the\n-   --  switch -gnatQ is set.\n+   --  switch -gnatQ is set. Initialized to zero at the start of compilation.\n \n    Total_Errors_Detected : Nat;\n-   --  Number of errors detected so far. Includes count of serious errors\n-   --  and non-serious errors, so this value is always greater than or\n-   --  equal to the Serious_Errors_Detected value.\n+   --  Number of errors detected so far. Includes count of serious errors and\n+   --  non-serious errors, so this value is always greater than or equal to the\n+   --  Serious_Errors_Detected value. Initialized to zero at the start of\n+   --  compilation.\n \n    Warnings_Detected : Nat;\n-   --  Number of warnings detected\n+   --  Number of warnings detected. Initialized to zero at the start of\n+   --  compilation.\n \n-   Current_Error_Source_File : Source_File_Index;\n-   --  Id of current messages. Used to post file name when unit changes. This\n-   --  is initialized to Main_Source_File at the start of a compilation, which\n-   --  means that no file names will be output unless there are errors in units\n-   --  other than the main unit. However, if the main unit has a pragma\n-   --  Source_Reference line, then this is initialized to No_Source_File,\n-   --  to force an initial reference to the real source file name.\n+   ----------------------------------\n+   -- Error Message Mode Variables --\n+   ----------------------------------\n+\n+   --  These variables control special error message modes. The initialized\n+   --  values below give the normal default behavior, but they can be reset\n+   --  by the caller to get different behavior as noted in the comments. These\n+   --  variables are not reset by calls to the error message routines, so the\n+   --  caller is responsible for resetting the default behavior after use.\n+\n+   Error_Msg_Qual_Level : Int;\n+   --  Number of levels of qualification required for type name (see the\n+   --  description of the } insertion character. Note that this value does\n+   --  note get reset by any Error_Msg call, so the caller is responsible\n+   --  for resetting it.\n+\n+   Warn_On_Instance : Boolean;\n+   --  Normally if a warning is generated in a generic template from the\n+   --  analysis of the template, then the warning really belongs in the\n+   --  template, and the default value of False for this Boolean achieves\n+   --  that effect. If Warn_On_Instance is set True, then the warnings are\n+   --  generated on the instantiation (referring to the template) rather\n+   --  than on the template itself.\n \n-   Raise_Exception_On_Error : Nat := 0;\n+   Raise_Exception_On_Error : Nat;\n    --  If this value is non-zero, then any attempt to generate an error\n    --  message raises the exception Error_Msg_Exception, and the error\n    --  message is not output. This is used for defending against junk\n@@ -64,15 +86,24 @@ package Err_Vars is\n    Error_Msg_Exception : exception;\n    --  Exception raised if Raise_Exception_On_Error is true\n \n-   -----------------------------------------------------\n-   -- Global Values Used for Error Message Insertions --\n-   -----------------------------------------------------\n+   Current_Error_Source_File : Source_File_Index := Internal_Source_File;\n+   --  Id of current messages. Used to post file name when unit changes. This\n+   --  is initialized to Main_Source_File at the start of a compilation, which\n+   --  means that no file names will be output unless there are errors in units\n+   --  other than the main unit. However, if the main unit has a pragma\n+   --  Source_Reference line, then this is initialized to No_Source_File,\n+   --  to force an initial reference to the real source file name.\n+\n+   ----------------------------------------\n+   -- Error Message Insertion Parameters --\n+   ----------------------------------------\n \n-   --  The following global variables are essentially additional parameters\n-   --  passed to the error message routine for insertion sequences described\n-   --  above. The reason these are passed globally is that the insertion\n-   --  mechanism is essentially an untyped one in which the appropriate\n-   --  variables are set dependingon the specific insertion characters used.\n+   --  The error message routines work with strings that contain insertion\n+   --  sequences that result in the insertion of variable data. The following\n+   --  variables contain the required data. The procedure is to set one or more\n+   --  of the following global variables to appropriate values before making a\n+   --  call to one of the error message routines with a string containing the\n+   --  insertion character to get the value inserted in an appropriate format.\n \n    Error_Msg_Col : Column_Number;\n    --  Column for @ insertion character in message\n@@ -97,22 +128,8 @@ package Err_Vars is\n    Error_Msg_Node_2 : Node_Id;\n    --  Node_Id values for & insertion characters in message\n \n-   Error_Msg_Qual_Level : Int := 0;\n-   --  Number of levels of qualification required for type name (see the\n-   --  description of the } insertion character. Note that this value does\n-   --  note get reset by any Error_Msg call, so the caller is responsible\n-   --  for resetting it.\n-\n    Error_Msg_Warn : Boolean;\n    --  Used if current message contains a < insertion character to indicate\n    --  if the current message is a warning message.\n \n-   Warn_On_Instance : Boolean := False;\n-   --  Normally if a warning is generated in a generic template from the\n-   --  analysis of the template, then the warning really belongs in the\n-   --  template, and the default value of False for this Boolean achieves\n-   --  that effect. If Warn_On_Instance is set True, then the warnings are\n-   --  generated on the instantiation (referring to the template) rather\n-   --  than on the template itself.\n-\n end Err_Vars;"}, {"sha": "889c0e5cee2870b6a619f84d83960c5e0f0278b6", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0462b3e6dd2c22843f7715dd49d2ce28883835/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0462b3e6dd2c22843f7715dd49d2ce28883835/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=3a0462b3e6dd2c22843f7715dd49d2ce28883835", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -691,6 +691,7 @@ package body Errout is\n       if Suppress_Message\n         and not All_Errors_Mode\n         and not (Msg (Msg'Last) = '!')\n+        and not Is_Warning_Msg\n       then\n          if not Continuation then\n             Last_Killed := True;\n@@ -780,7 +781,8 @@ package body Errout is\n       Errors.Table (Cur_Msg).Warn     := Is_Warning_Msg;\n       Errors.Table (Cur_Msg).Style    := Is_Style_Msg;\n       Errors.Table (Cur_Msg).Serious  := Is_Serious_Error;\n-      Errors.Table (Cur_Msg).Uncond   := Is_Unconditional_Msg;\n+      Errors.Table (Cur_Msg).Uncond\n+        := Is_Unconditional_Msg or Is_Warning_Msg;\n       Errors.Table (Cur_Msg).Msg_Cont := Continuation;\n       Errors.Table (Cur_Msg).Deleted  := False;\n \n@@ -1005,6 +1007,7 @@ package body Errout is\n \n       if All_Errors_Mode\n         or else Msg (Msg'Last) = '!'\n+        or else Is_Warning_Msg\n         or else OK_Node (N)\n         or else (Msg (Msg'First) = '\\' and not Last_Killed)\n       then\n@@ -1431,12 +1434,6 @@ package body Errout is\n          Warnings.Table (Warnings.Last).Start := Source_Ptr'First;\n          Warnings.Table (Warnings.Last).Stop  := Source_Ptr'Last;\n       end if;\n-\n-      --  Set the error nodes to Empty to avoid uninitialized variable\n-      --  references for saves/restores/moves.\n-\n-      Error_Msg_Node_1 := Empty;\n-      Error_Msg_Node_2 := Empty;\n    end Initialize;\n \n    -----------------\n@@ -1867,9 +1864,15 @@ package body Errout is\n       end if;\n \n       --  The following assignment ensures that a second ampersand insertion\n-      --  character will correspond to the Error_Msg_Node_2 parameter.\n+      --  character will correspond to the Error_Msg_Node_2 parameter. We\n+      --  suppress possible validity checks in case operating in -gnatVa mode,\n+      --  and Error_Msg_Node_2 is not needed and has not been set.\n \n-      Error_Msg_Node_1 := Error_Msg_Node_2;\n+      declare\n+         pragma Suppress (Range_Check);\n+      begin\n+         Error_Msg_Node_1 := Error_Msg_Node_2;\n+      end;\n    end Set_Msg_Insertion_Node;\n \n    --------------------------------------\n@@ -2042,9 +2045,15 @@ package body Errout is\n       end if;\n \n       --  The following assignment ensures that a second percent insertion\n-      --  character will correspond to the Error_Msg_Unit_2 parameter.\n+      --  character will correspond to the Error_Msg_Unit_2 parameter. We\n+      --  suppress possible validity checks in case operating in -gnatVa mode,\n+      --  and Error_Msg_Unit_2 is not needed and has not been set.\n \n-      Error_Msg_Unit_1 := Error_Msg_Unit_2;\n+      declare\n+         pragma Suppress (Range_Check);\n+      begin\n+         Error_Msg_Unit_1 := Error_Msg_Unit_2;\n+      end;\n    end Set_Msg_Insertion_Unit_Name;\n \n    ------------------"}, {"sha": "62556d8412bb99ea8a6a13cb3bbae09cf1698ee7", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0462b3e6dd2c22843f7715dd49d2ce28883835/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0462b3e6dd2c22843f7715dd49d2ce28883835/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=3a0462b3e6dd2c22843f7715dd49d2ce28883835", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -118,6 +118,9 @@ package Errout is\n    --    5.  If a message attempts to insert an Error node, or a direct\n    --        reference to the Any_Type node, then the message is suppressed.\n \n+   --    6.  Note that cases 2-5 only apply to error messages, not warning\n+   --        messages. Warning messages are only suppressed for case 1.\n+\n    --  This normal suppression action may be overridden in cases 2-5 (but not\n    --  in case 1) by setting All_Errors mode, or by setting the special\n    --  unconditional message insertion character (!) at the end of the message\n@@ -229,19 +232,21 @@ package Errout is\n    --      The character ! appearing as the last character of a message makes\n    --      the message unconditional which means that it is output even if it\n    --      would normally be suppressed. See section above for a description\n-   --      of the cases in which messages are normally suppressed.\n+   --      of the cases in which messages are normally suppressed. Note that\n+   --      warnings are never suppressed, so the use of the ! character in a\n+   --      warning message is never useful.\n \n    --    Insertion character ? (Question: warning message)\n-   --      The character ? appearing anywhere in a message makes the message\n-   --      a warning instead of a normal error message, and the text of the\n-   --      message will be preceded by \"Warning:\" instead of \"Error:\" The\n-   --      handling of warnings if further controlled by the Warning_Mode\n-   --      option (-w switch), see package Opt for further details, and also\n-   --      by the current setting from pragma Warnings. This pragma applies\n-   --      only to warnings issued from the semantic phase (not the parser),\n-   --      but currently all relevant warnings are posted by the semantic\n-   --      phase anyway. Messages starting with (style) are also treated as\n-   --      warning messages.\n+   --      The character ? appearing anywhere in a message makes the message a\n+   --      warning instead of a normal error message, and the text of the\n+   --      message will be preceded by \"Warning:\" instead of \"Error:\" in the\n+   --      normal case. The handling of warnings if further controlled by the\n+   --      Warning_Mode option (-w switch), see package Opt for further\n+   --      details, and also by the current setting from pragma Warnings. This\n+   --      pragma applies only to warnings issued from the semantic phase (not\n+   --      the parser), but currently all relevant warnings are posted by the\n+   --      semantic phase anyway. Messages starting with (style) are also\n+   --      treated as warning messages.\n \n    --    Insertion character < (Less Than: conditional warning message)\n    --      The character < appearing anywhere in a message is used for a"}, {"sha": "44c58d0fcace080971bcb29b14949be34fec19e2", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0462b3e6dd2c22843f7715dd49d2ce28883835/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0462b3e6dd2c22843f7715dd49d2ce28883835/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=3a0462b3e6dd2c22843f7715dd49d2ce28883835", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2006 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -179,7 +179,9 @@ begin\n          Write_Str (\"GNAT \");\n          Write_Str (Gnat_Version_String);\n          Write_Eol;\n-         Write_Str (\"Copyright 1992-2005 Free Software Foundation, Inc.\");\n+         Write_Str (\"Copyright 1992-\" &\n+                    Current_Year &\n+                    \", Free Software Foundation, Inc.\");\n          Write_Eol;\n       end if;\n \n@@ -330,10 +332,10 @@ begin\n                  and then not Compilation_Errors\n                then\n                   Error_Msg_N\n-                    (\"package % does not require a body?!\", Main_Unit_Node);\n+                    (\"package % does not require a body?\", Main_Unit_Node);\n                   Error_Msg_Name_1 := Fname;\n                   Error_Msg_N\n-                    (\"body in file{?! will be ignored\", Main_Unit_Node);\n+                    (\"body in file{? will be ignored\", Main_Unit_Node);\n \n                --  Ada 95 cases of a body file present when no body is\n                --  permitted. This we consider to be an error.\n@@ -416,7 +418,11 @@ begin\n          Errout.Finalize;\n          Tree_Gen;\n          Namet.Finalize;\n-         Exit_Program (E_Success);\n+\n+         --  Use a goto instead of calling Exit_Program so that finalization\n+         --  occurs normally.\n+\n+         goto End_Of_Program;\n \n       elsif Original_Operating_Mode = Check_Semantics then\n          Back_End_Mode := Declarations_Only;\n@@ -683,7 +689,10 @@ begin\n          Comperr.Compiler_Abort (\"Storage_Error\");\n    end;\n \n---  The outer exception handles an unrecoverable error\n+   <<End_Of_Program>>\n+   null;\n+\n+   --  The outer exception handles an unrecoverable error\n \n exception\n    when Unrecoverable_Error =>"}]}