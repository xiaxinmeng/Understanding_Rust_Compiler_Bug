{"sha": "2dda89a89839310c852c5c1c77de7db59df5b113", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRkYTg5YTg5ODM5MzEwYzg1MmM1YzFjNzdkZTdkYjU5ZGY1YjExMw==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2012-07-30T19:55:41Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2012-07-30T19:55:41Z"}, "message": "re PR fortran/51081 ([F03] Proc-pointer assignment: Rejects valid internal proc)\n\n2012-07-30  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/51081\n\t* gfortran.h (gfc_resolve_intrinsic): Add prototype.\n\t* expr.c (gfc_check_pointer_assign): Set INTRINSIC attribute if needed.\n\tCheck for invalid intrinsics.\n\t* primary.c (gfc_match_rvalue): Check for intrinsics came too early.\n\tSet procedure flavor if appropriate.\n\t* resolve.c (resolve_intrinsic): Renamed to gfc_resolve_intrinsic.\n\t(resolve_procedure_interface,resolve_procedure_expression,\n\tresolve_function,resolve_fl_derived0,resolve_symbol): Ditto.\n\n2012-07-30  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/51081\n\t* gfortran.dg/proc_ptr_37.f90: New.\n\nFrom-SVN: r189985", "tree": {"sha": "967f294cebb894be86bd2873e725cb5adf332b9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/967f294cebb894be86bd2873e725cb5adf332b9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dda89a89839310c852c5c1c77de7db59df5b113", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dda89a89839310c852c5c1c77de7db59df5b113", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dda89a89839310c852c5c1c77de7db59df5b113", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dda89a89839310c852c5c1c77de7db59df5b113/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caf624554c8dd1bc1bf582a9ff38dec033fba5b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caf624554c8dd1bc1bf582a9ff38dec033fba5b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caf624554c8dd1bc1bf582a9ff38dec033fba5b3"}], "stats": {"total": 83, "additions": 71, "deletions": 12}, "files": [{"sha": "4974cb34d6b43281d113360eb838b60f31a30563", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dda89a89839310c852c5c1c77de7db59df5b113/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dda89a89839310c852c5c1c77de7db59df5b113/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2dda89a89839310c852c5c1c77de7db59df5b113", "patch": "@@ -1,3 +1,15 @@\n+2012-07-30  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/51081\n+\t* gfortran.h (gfc_resolve_intrinsic): Add prototype.\n+\t* expr.c (gfc_check_pointer_assign): Set INTRINSIC attribute if needed.\n+\tCheck for invalid intrinsics.\n+\t* primary.c (gfc_match_rvalue): Check for intrinsics came too early.\n+\tSet procedure flavor if appropriate.\n+\t* resolve.c (resolve_intrinsic): Renamed to gfc_resolve_intrinsic.\n+\t(resolve_procedure_interface,resolve_procedure_expression,\n+\tresolve_function,resolve_fl_derived0,resolve_symbol): Ditto.\n+\n 2012-07-26  Mikael Morin  <mikael@gcc.gnu.org>\n \n \tPR fortran/44354"}, {"sha": "f43bc6f8a99b277a1cb18d6900052476dc8ac68d", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dda89a89839310c852c5c1c77de7db59df5b113/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dda89a89839310c852c5c1c77de7db59df5b113/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=2dda89a89839310c852c5c1c77de7db59df5b113", "patch": "@@ -3421,6 +3421,21 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n \t\t     &rvalue->where);\n \t  return FAILURE;\n \t}\n+      if (rvalue->expr_type == EXPR_VARIABLE && !attr.proc_pointer)\n+\t{\n+      \t  /* Check for intrinsics.  */\n+\t  gfc_symbol *sym = rvalue->symtree->n.sym;\n+\t  if (!sym->attr.intrinsic\n+\t      && !(sym->attr.contained || sym->attr.use_assoc\n+\t\t   || sym->attr.external || sym->attr.if_source == IFSRC_IFBODY)\n+\t      && (gfc_is_intrinsic (sym, 0, sym->declared_at)\n+\t\t  || gfc_is_intrinsic (sym, 1, sym->declared_at)))\n+\t    {\n+\t      sym->attr.intrinsic = 1;\n+\t      gfc_resolve_intrinsic (sym, &rvalue->where);\n+\t      attr = gfc_expr_attr (rvalue);\n+\t    }\n+\t}\n       if (attr.abstract)\n \t{\n \t  gfc_error (\"Abstract interface '%s' is invalid \"\n@@ -3444,6 +3459,13 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n \t\t\t      \"at %L\", rvalue->symtree->name, &rvalue->where)\n \t\t\t      == FAILURE)\n \t    return FAILURE;\n+\t  if (attr.intrinsic && gfc_intrinsic_actual_ok (rvalue->symtree->name,\n+\t\t\t\t\t\t\t attr.subroutine) == 0)\n+\t    {\n+\t      gfc_error (\"Intrinsic '%s' at %L is invalid in procedure pointer \"\n+\t\t\t \"assignment\", rvalue->symtree->name, &rvalue->where);\n+\t      return FAILURE;\n+\t    }\n \t}\n       /* Check for F08:C730.  */\n       if (attr.elemental && !attr.intrinsic)"}, {"sha": "063959a8df986d8722dac5b06cdae78b6e1075a7", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dda89a89839310c852c5c1c77de7db59df5b113/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dda89a89839310c852c5c1c77de7db59df5b113/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=2dda89a89839310c852c5c1c77de7db59df5b113", "patch": "@@ -2805,7 +2805,8 @@ int gfc_is_formal_arg (void);\n void gfc_resolve_substring_charlen (gfc_expr *);\n match gfc_iso_c_sub_interface(gfc_code *, gfc_symbol *);\n gfc_expr *gfc_expr_to_initialize (gfc_expr *);\n-bool gfc_type_is_extensible (gfc_symbol *sym);\n+bool gfc_type_is_extensible (gfc_symbol *);\n+gfc_try gfc_resolve_intrinsic (gfc_symbol *, locus *);\n \n \n /* array.c */"}, {"sha": "29d278911cd0d6ecb158e5cd9e7f3be59f132c28", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dda89a89839310c852c5c1c77de7db59df5b113/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dda89a89839310c852c5c1c77de7db59df5b113/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=2dda89a89839310c852c5c1c77de7db59df5b113", "patch": "@@ -2843,13 +2843,18 @@ gfc_match_rvalue (gfc_expr **result)\n \t    /* Parse functions returning a procptr.  */\n \t    goto function0;\n \n-\t  if (gfc_is_intrinsic (sym, 0, gfc_current_locus)\n-\t      || gfc_is_intrinsic (sym, 1, gfc_current_locus))\n-\t    sym->attr.intrinsic = 1;\n \t  e = gfc_get_expr ();\n \t  e->expr_type = EXPR_VARIABLE;\n \t  e->symtree = symtree;\n \t  m = gfc_match_varspec (e, 0, false, true);\n+\t  if (!e->ref && sym->attr.flavor == FL_UNKNOWN\n+\t      && sym->ts.type == BT_UNKNOWN\n+\t      && gfc_add_flavor (&sym->attr, FL_PROCEDURE,\n+\t\t\t\t sym->name, NULL) == FAILURE)\n+\t    {\n+\t      m = MATCH_ERROR;\n+\t      break;\n+\t    }\n \t  break;\n \t}\n "}, {"sha": "25c6c8ec00d60baca488103bbf91618c4f7dd3cd", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dda89a89839310c852c5c1c77de7db59df5b113/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dda89a89839310c852c5c1c77de7db59df5b113/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=2dda89a89839310c852c5c1c77de7db59df5b113", "patch": "@@ -139,7 +139,6 @@ resolve_typespec_used (gfc_typespec* ts, locus* where, const char* name)\n \n \n static void resolve_symbol (gfc_symbol *sym);\n-static gfc_try resolve_intrinsic (gfc_symbol *sym, locus *loc);\n \n \n /* Resolve the interface for a PROCEDURE declaration or procedure pointer.  */\n@@ -168,7 +167,7 @@ resolve_procedure_interface (gfc_symbol *sym)\n       resolve_symbol (ifc);\n \n       if (ifc->attr.intrinsic)\n-\tresolve_intrinsic (ifc, &ifc->declared_at);\n+\tgfc_resolve_intrinsic (ifc, &ifc->declared_at);\n \n       if (ifc->result)\n \t{\n@@ -1499,8 +1498,8 @@ is_illegal_recursion (gfc_symbol* sym, gfc_namespace* context)\n /* Resolve an intrinsic procedure: Set its function/subroutine attribute,\n    its typespec and formal argument list.  */\n \n-static gfc_try\n-resolve_intrinsic (gfc_symbol *sym, locus *loc)\n+gfc_try\n+gfc_resolve_intrinsic (gfc_symbol *sym, locus *loc)\n {\n   gfc_intrinsic_sym* isym = NULL;\n   const char* symstd;\n@@ -1588,7 +1587,7 @@ resolve_procedure_expression (gfc_expr* expr)\n   sym = expr->symtree->n.sym;\n \n   if (sym->attr.intrinsic)\n-    resolve_intrinsic (sym, &expr->where);\n+    gfc_resolve_intrinsic (sym, &expr->where);\n \n   if (sym->attr.flavor != FL_PROCEDURE\n       || (sym->attr.function && sym->result == sym))\n@@ -3064,7 +3063,7 @@ resolve_function (gfc_expr *expr)\n     return SUCCESS;\n   \n   if (sym && sym->attr.intrinsic\n-      && resolve_intrinsic (sym, &expr->where) == FAILURE)\n+      && gfc_resolve_intrinsic (sym, &expr->where) == FAILURE)\n     return FAILURE;\n \n   if (sym && (sym->attr.flavor == FL_VARIABLE || sym->attr.subroutine))\n@@ -11884,7 +11883,7 @@ resolve_fl_derived0 (gfc_symbol *sym)\n \t\tresolve_symbol (ifc);\n \n \t      if (ifc->attr.intrinsic)\n-\t\tresolve_intrinsic (ifc, &ifc->declared_at);\n+\t\tgfc_resolve_intrinsic (ifc, &ifc->declared_at);\n \n \t      if (ifc->result)\n \t\t{\n@@ -12519,7 +12518,7 @@ resolve_symbol (gfc_symbol *sym)\n      representation. This needs to be done before assigning a default \n      type to avoid spurious warnings.  */\n   if (sym->attr.flavor != FL_MODULE && sym->attr.intrinsic\n-      && resolve_intrinsic (sym, &sym->declared_at) == FAILURE)\n+      && gfc_resolve_intrinsic (sym, &sym->declared_at) == FAILURE)\n     return;\n \n   /* Resolve associate names.  */"}, {"sha": "1ee69471d29ad2b097a721d337c4946c52d5c9ae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dda89a89839310c852c5c1c77de7db59df5b113/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dda89a89839310c852c5c1c77de7db59df5b113/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2dda89a89839310c852c5c1c77de7db59df5b113", "patch": "@@ -1,3 +1,8 @@\n+2012-07-30  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/51081\n+\t* gfortran.dg/proc_ptr_37.f90: New.\n+\n 2012-07-30  Ulrich Weigand  <ulrich.weigand@linaro.org>\n \n \t* lib/target-supports.exp"}, {"sha": "485e76f66486af414f7750f59eed45837521639c", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_37.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dda89a89839310c852c5c1c77de7db59df5b113/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_37.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dda89a89839310c852c5c1c77de7db59df5b113/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_37.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_37.f90?ref=2dda89a89839310c852c5c1c77de7db59df5b113", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+!\n+! PR 51081: [F03] Proc-pointer assignment: Rejects valid internal proc\n+!\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n+\n+procedure(), pointer :: p1\n+procedure(real), pointer :: p2\n+p1 => int2\n+p2 => scale   ! { dg-error \"is invalid in procedure pointer assignment\" }\n+contains\n+  subroutine int2()\n+    print *,\"...\"\n+  end subroutine\n+end"}]}