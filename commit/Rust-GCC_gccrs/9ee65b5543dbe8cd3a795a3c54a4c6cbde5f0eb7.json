{"sha": "9ee65b5543dbe8cd3a795a3c54a4c6cbde5f0eb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVlNjViNTU0M2RiZThjZDNhNzk1YTNjNTRhNGM2Y2JkZTVmMGViNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-06-11T11:08:41Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-06-11T11:08:41Z"}, "message": "sse.md (vec_dupv4sf): Correct mode of forced register.\n\n\t* config/i386/sse.md (vec_dupv4sf): Correct mode of forced register.\n\t(*vec_dupv2df): Rename from vec_dupv2df.\n\t(vec_dupv2df): New expander.\n\n\t* config/i386/sse.md (AVX_VEC_DUP_MODE): Rename from AVX256MODE24P.\n\nFrom-SVN: r174948", "tree": {"sha": "9e294170a2a9bd9493b2ec2cbf78b3c4f3c5a6fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e294170a2a9bd9493b2ec2cbf78b3c4f3c5a6fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ee65b5543dbe8cd3a795a3c54a4c6cbde5f0eb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ee65b5543dbe8cd3a795a3c54a4c6cbde5f0eb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ee65b5543dbe8cd3a795a3c54a4c6cbde5f0eb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ee65b5543dbe8cd3a795a3c54a4c6cbde5f0eb7/comments", "author": null, "committer": null, "parents": [{"sha": "09ad57ec8fa24e40b2364d1d67218c65acedaf4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09ad57ec8fa24e40b2364d1d67218c65acedaf4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09ad57ec8fa24e40b2364d1d67218c65acedaf4d"}], "stats": {"total": 94, "additions": 64, "deletions": 30}, "files": [{"sha": "1a141e3c160a4bef998d3e7c7c265c6dc851dc17", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 21, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee65b5543dbe8cd3a795a3c54a4c6cbde5f0eb7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee65b5543dbe8cd3a795a3c54a4c6cbde5f0eb7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ee65b5543dbe8cd3a795a3c54a4c6cbde5f0eb7", "patch": "@@ -1,3 +1,19 @@\n+2011-06-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (vec_dupv4sf): Correct mode of forced register.\n+\t(*vec_dupv2df): Rename from vec_dupv2df.\n+\t(vec_dupv2df): New expander.\n+\n+2011-06-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (AVX_VEC_DUP_MODE): Rename from AVX256MODE24P.\n+\n+2011-06-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md: Use default value in \"isa\" attribute.\n+\t* config/i386/sse.md: Ditto.\n+\t* config/i386/mmx.md: Ditto.\n+\n 2011-06-10  Wei Guozhi  <carrot@google.com>\n \n \tPR target/45335\n@@ -44,19 +60,20 @@\n 2011-06-10  Jan Hubicka  <jh@suse.cz>\n \n \t* opts.c (default_options): Enlist OPT_finline_functions_called_once.\n-\t* common.opt (flag_inline_functions_called_once):Do not initialize to 1.\n+\t* common.opt (flag_inline_functions_called_once): Do not\n+\tinitialize to 1.\n \n 2011-06-10  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-cp.c (ipcp_versionable_function_p): Thunks are not versionable.\n-\t(ipcp_initialize_node_lattices): Do not deal with aliases; Do not try to\n-\tpropagate through thunks.\n+\t(ipcp_initialize_node_lattices): Do not deal with aliases;\n+\tDo not try to propagate through thunks.\n \t(ipcp_change_tops_to_bottom): Do not deal with aliases.\n \n 2011-06-10  Jan Hubicka  <jh@suse.cz>\n \n-\t* ipa-prop.c (ipa_write_node_info): Stream jump functions for indirect\n-\tcalls.\n+\t* ipa-prop.c (ipa_write_node_info): Stream jump functions\n+\tfor indirect calls.\n \t(ipa_read_node_info): Likewise.\n \n 2011-06-10  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n@@ -68,7 +85,7 @@\n \t(gimple_expand_builtin_pow): Minor cleanup.\n \t(gimple_expand_builtin_cabs): New.\n \t(execute_cse_sincos): Add case for BUILT_IN_CABS.\n-\t\n+\n 2011-06-10  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-cp.c (ipcp_versionable_function_p): Aliases are not versionable.\n@@ -145,9 +162,8 @@\n \n 2011-06-10  Richard Guenther  <rguenther@suse.de>\n \n-\t* tree-ssa-forwprop.c (ssa_forward_propagate_and_combine):\n-\tScan stmts forward when combining, visit inserted stmts when\n-\ta stmt was changed.\n+\t* tree-ssa-forwprop.c (ssa_forward_propagate_and_combine): Scan stmts\n+\tforward when combining, visit inserted stmts when a stmt was changed.\n \n 2011-06-10  Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -267,8 +283,7 @@\n 2011-06-10  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n \t    Richard Earnshaw  <rearnsha@arm.com>\n \n-\t* config/arm/arm.c (const_ok_for_op): Check to see\n-\tif mvn can be used.\n+\t* config/arm/arm.c (const_ok_for_op): Check to see if mvn can be used.\n \t* config/arm/vfp.md (*arm_movdi_vfp): Delete.\n \t(*thumb2_movdi_vfp): Delete.\n \t(*arm_movdi_vfp_cortexa8): Delete.\n@@ -317,17 +332,23 @@\n \t(cgraph_for_node_thunks_and_aliases): New function.\n \t(cgraph_for_node_and_aliases): New function.\n \t(cgraph_make_node_local_1): Break out from ...\n-\t(cgraph_make_node_local) ... here; use cgraph_for_node_thunks_and_aliases.\n+\t(cgraph_make_node_local) ... here; use\n+\tcgraph_for_node_thunks_and_aliases.\n \t(cgraph_set_nothrow_flag_1): Break out from ...\n-\t(cgraph_set_nothrow_flag) ... here; use cgraph_for_node_thunks_and_aliases.\n+\t(cgraph_set_nothrow_flag) ... here;\n+\tuse cgraph_for_node_thunks_and_aliases.\n \t(cgraph_set_const_flag_1): Break out from ...\n-\t(cgraph_set_const_flag) ... here; use cgraph_for_node_thunks_and_aliases.\n+\t(cgraph_set_const_flag) ... here;\n+\tuse cgraph_for_node_thunks_and_aliases.\n \t(cgraph_set_pure_flag_1): Break out from ...\n-\t(cgraph_set_pure_flag) ... here; use cgraph_for_node_thunks_and_aliases.\n+\t(cgraph_set_pure_flag) ... here;\n+\tuse cgraph_for_node_thunks_and_aliases.\n \t(cgraph_propagate_frequency_1): Break out from ...\n-\t(cgraph_propagate_frequency) ... here; use cgraph_for_node_thunks_and_aliases.\n+\t(cgraph_propagate_frequency) ... here; use\n+\tcgraph_for_node_thunks_and_aliases.\n \t(cgraph_used_from_object_file_p): Do not care about aliases.\n-\t(cgraph_not_only_called_directly_p_1, cgraph_only_called_directly_p): New functions.\n+\t(cgraph_not_only_called_directly_p_1, cgraph_only_called_directly_p):\n+\tNew functions.\n \t(collect_callers_of_node_1, collect_callers_of_node): New functions.\n \n 2011-06-10  Hans-Peter Nilsson  <hp@axis.com>\n@@ -348,16 +369,14 @@\n 2011-06-10  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR rtl-optimization/49154\n-\t* ira-costs.c (setup_regno_cost_classes_by_mode): If there\n-\talready is a matching slot in the hashtable, assign it to\n-\tclasses_ptr.\n+\t* ira-costs.c (setup_regno_cost_classes_by_mode): If there already\n+\tis a matching slot in the hashtable, assign it to classes_ptr.\n \n \tPR rtl-optimization/49154\n \t* doc/tm.texi.in (Register Classes): Document rule for the narrowest\n \tregister classes.\n \t* doc/tm.texi: Regenerate.\n \n->>>>>>> .r174929\n 2011-06-09  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \tPR target/49307"}, {"sha": "9ede7700aa6637af1cf369425deff000bd2e9346", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee65b5543dbe8cd3a795a3c54a4c6cbde5f0eb7/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee65b5543dbe8cd3a795a3c54a4c6cbde5f0eb7/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=9ee65b5543dbe8cd3a795a3c54a4c6cbde5f0eb7", "patch": "@@ -185,7 +185,6 @@\n \n ;; Mix-n-match\n (define_mode_iterator AVX256MODE2P [V8SI V8SF V4DF])\n-(define_mode_iterator AVX256MODE24P [V8SI V8SF V4DI V4DF])\n \n (define_mode_iterator FMAMODE [SF DF V4SF V2DF V8SF V4DF])\n \n@@ -3281,7 +3280,7 @@\n   \"TARGET_SSE\"\n {\n   if (!TARGET_AVX)\n-    operands[1] = force_reg (V4SFmode, operands[1]);\n+    operands[1] = force_reg (SFmode, operands[1]);\n })\n \n (define_insn \"*vec_dupv4sf_avx\"\n@@ -4378,6 +4377,16 @@\n    (set_attr \"prefix\" \"orig,vex,orig,vex,maybe_vex,orig,orig,vex,maybe_vex\")\n    (set_attr \"mode\" \"DF,DF,V1DF,V1DF,V1DF,V2DF,V1DF,V1DF,V1DF\")])\n \n+(define_expand \"vec_dupv2df\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"\")\n+\t(vec_duplicate:V2DF\n+\t  (match_operand:DF 1 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_SSE2\"\n+{\n+  if (!TARGET_SSE3)\n+    operands[1] = force_reg (DFmode, operands[1]);\n+})\n+\n (define_insn \"*vec_dupv2df_sse3\"\n   [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n \t(vec_duplicate:V2DF\n@@ -4388,7 +4397,7 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"DF\")])\n \n-(define_insn \"vec_dupv2df\"\n+(define_insn \"*vec_dupv2df\"\n   [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n \t(vec_duplicate:V2DF\n \t  (match_operand:DF 1 \"register_operand\" \"0\")))]\n@@ -9757,9 +9766,13 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"OI\")])\n \n+;; Modes handled by AVX vec_dup patterns.\n+(define_mode_iterator AVX_VEC_DUP_MODE\n+  [V8SI V8SF V4DI V4DF])\n+\n (define_insn \"vec_dup<mode>\"\n-  [(set (match_operand:AVX256MODE24P 0 \"register_operand\" \"=x,x\")\n-\t(vec_duplicate:AVX256MODE24P\n+  [(set (match_operand:AVX_VEC_DUP_MODE 0 \"register_operand\" \"=x,x\")\n+\t(vec_duplicate:AVX_VEC_DUP_MODE\n \t  (match_operand:<ssescalarmode> 1 \"nonimmediate_operand\" \"m,?x\")))]\n   \"TARGET_AVX\"\n   \"@\n@@ -9771,12 +9784,14 @@\n    (set_attr \"mode\" \"V8SF\")])\n \n (define_split\n-  [(set (match_operand:AVX256MODE24P 0 \"register_operand\" \"\")\n-\t(vec_duplicate:AVX256MODE24P\n+  [(set (match_operand:AVX_VEC_DUP_MODE 0 \"register_operand\" \"\")\n+\t(vec_duplicate:AVX_VEC_DUP_MODE\n \t  (match_operand:<ssescalarmode> 1 \"register_operand\" \"\")))]\n   \"TARGET_AVX && reload_completed\"\n-  [(set (match_dup 2) (vec_duplicate:<ssehalfvecmode> (match_dup 1)))\n-   (set (match_dup 0) (vec_concat:AVX256MODE24P (match_dup 2) (match_dup 2)))]\n+  [(set (match_dup 2)\n+\t(vec_duplicate:<ssehalfvecmode> (match_dup 1)))\n+   (set (match_dup 0)\n+\t(vec_concat:AVX_VEC_DUP_MODE (match_dup 2) (match_dup 2)))]\n   \"operands[2] = gen_rtx_REG (<ssehalfvecmode>mode, REGNO (operands[0]));\")\n \n (define_insn \"avx_vbroadcastf128_<mode>\""}]}