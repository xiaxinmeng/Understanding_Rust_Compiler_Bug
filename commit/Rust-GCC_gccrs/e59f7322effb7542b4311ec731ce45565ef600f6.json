{"sha": "e59f7322effb7542b4311ec731ce45565ef600f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU5ZjczMjJlZmZiNzU0MmI0MzExZWM3MzFjZTQ1NTY1ZWY2MDBmNg==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2004-08-24T14:13:50Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2004-08-24T14:13:50Z"}, "message": "re PR c++/16706 (ICE in finish_member_declaration, at cp/semantics.c:2126)\n\n\tPR c++/16706\n\t* search.c (friend_accessible_p): Increment processing_template_decl\n\twhen deal with TEMPLATE_DECL of SCOPE.\n\n\t* g++.dg/template/crash21.C: New test.\n\t* g++.dg/template/crash22.C: Likewise.\n\nFrom-SVN: r86482", "tree": {"sha": "6ae9210737b086cc8b633394372bbf40e57e713a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ae9210737b086cc8b633394372bbf40e57e713a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e59f7322effb7542b4311ec731ce45565ef600f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e59f7322effb7542b4311ec731ce45565ef600f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e59f7322effb7542b4311ec731ce45565ef600f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e59f7322effb7542b4311ec731ce45565ef600f6/comments", "author": null, "committer": null, "parents": [{"sha": "a1a28bb5826211ea2253231186417fb3cb6de6dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1a28bb5826211ea2253231186417fb3cb6de6dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1a28bb5826211ea2253231186417fb3cb6de6dd"}], "stats": {"total": 98, "additions": 96, "deletions": 2}, "files": [{"sha": "9ac0c74dfc4f9649d72648aab01416b9ec080bc4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7322effb7542b4311ec731ce45565ef600f6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7322effb7542b4311ec731ce45565ef600f6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e59f7322effb7542b4311ec731ce45565ef600f6", "patch": "@@ -1,3 +1,9 @@\n+2004-08-24  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/16706\n+\t* search.c (friend_accessible_p): Increment processing_template_decl\n+\twhen deal with TEMPLATE_DECL of SCOPE.\n+\n 2004-08-24  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/17149"}, {"sha": "81226d13d33ae34b37fc7393f139d14966433c3a", "filename": "gcc/cp/search.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7322effb7542b4311ec731ce45565ef600f6/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7322effb7542b4311ec731ce45565ef600f6/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=e59f7322effb7542b4311ec731ce45565ef600f6", "patch": "@@ -835,10 +835,26 @@ friend_accessible_p (tree scope, tree decl, tree binfo)\n \n       /* Or an instantiation of something which is a friend.  */\n       if (DECL_TEMPLATE_INFO (scope))\n-\treturn friend_accessible_p (DECL_TI_TEMPLATE (scope), decl, binfo);\n+\t{\n+\t  int ret;\n+\t  /* Increment processing_template_decl to make sure that\n+\t     dependent_type_p works correctly.  */\n+\t  ++processing_template_decl;\n+\t  ret = friend_accessible_p (DECL_TI_TEMPLATE (scope), decl, binfo);\n+\t  --processing_template_decl;\n+\t  return ret;\n+\t}\n     }\n   else if (CLASSTYPE_TEMPLATE_INFO (scope))\n-    return friend_accessible_p (CLASSTYPE_TI_TEMPLATE (scope), decl, binfo);\n+    {\n+      int ret;\n+      /* Increment processing_template_decl to make sure that\n+\t dependent_type_p works correctly.  */\n+      ++processing_template_decl;\n+      ret = friend_accessible_p (CLASSTYPE_TI_TEMPLATE (scope), decl, binfo);\n+      --processing_template_decl;\n+      return ret;\n+    }\n \n   return 0;\n }"}, {"sha": "7264db71fe6bfe0412e8fdb5bfaf1ca004828cd7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7322effb7542b4311ec731ce45565ef600f6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7322effb7542b4311ec731ce45565ef600f6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e59f7322effb7542b4311ec731ce45565ef600f6", "patch": "@@ -1,3 +1,9 @@\n+2004-08-24  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/16706\n+\t* g++.dg/template/crash21.C: New test.\n+\t* g++.dg/template/crash22.C: Likewise.\n+\n 2004-08-24  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/17149"}, {"sha": "8b674910e52280a67b6aa40c2ba33dd2b05b6473", "filename": "gcc/testsuite/g++.dg/template/crash21.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7322effb7542b4311ec731ce45565ef600f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7322effb7542b4311ec731ce45565ef600f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash21.C?ref=e59f7322effb7542b4311ec731ce45565ef600f6", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+\n+// Origin: Debian GCC maintainers <debian-gcc@lists.debian.org>\n+//\t   Wolfgang Bangerth <bangerth@dealii.org>\n+\n+// PR c++/16706: Dependent type calculation during access checking\n+\n+template <typename> struct B { \n+    B() throw() {} \n+    struct S { }; \n+    static int i; \n+    typedef unsigned short int dummy; \n+}; \n+ \n+template <typename _Tp> \n+struct allocator: B<_Tp> { \n+    template<typename _Tp1> struct rebind \n+    { typedef allocator<_Tp1> other; }; \n+}; \n+ \n+template<typename T, typename> \n+struct X { \n+    typename allocator<T>::template rebind<int>::other i; \n+    typedef int* dummy; \n+}; \n+ \n+template <class T> class A { \n+    typedef typename X<T,allocator<T> >::dummy dummy; \n+    template <class TP> class XWrapper; \n+}; \n+ \n+ \n+template <class T> \n+template <class TP> struct A<T>::XWrapper<TP *> \n+{ \n+    XWrapper() {} \n+    X<int,allocator<int> > x; \n+}; \n+ \n+template class A<int>::XWrapper<int *>;"}, {"sha": "4d0cfaa999e7ed62023c97d81b96faeb6d64d2dd", "filename": "gcc/testsuite/g++.dg/template/crash22.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59f7322effb7542b4311ec731ce45565ef600f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59f7322effb7542b4311ec731ce45565ef600f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash22.C?ref=e59f7322effb7542b4311ec731ce45565ef600f6", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+\n+// Origin: Debian GCC maintainers <debian-gcc@lists.debian.org>\n+//\t   Volker Reichelt <reichelt@gcc.gnu.org>\n+\n+// PR c++/16706: Dependent type calculation during access checking\n+\n+template<typename> struct A \n+{\n+    A();\n+    template<typename> struct X {};\n+};\n+\n+template<typename T> struct B\n+{\n+    typename A<T>::template X<int> x;\n+    template<typename> struct C;\n+};\n+\n+template<typename T> template<typename U> struct B<T>::C<U*>\n+{\n+    C() {}\n+    A<int> a;\n+};\n+\n+template struct B<int>::C<int*>;"}]}