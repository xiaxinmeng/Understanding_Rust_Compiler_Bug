{"sha": "bc3518da23383b0e173020a46334fe22b6b67891", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmMzNTE4ZGEyMzM4M2IwZTE3MzAyMGE0NjMzNGZlMjJiNmI2Nzg5MQ==", "commit": {"author": {"name": "Mark Wielaard", "email": "mjw@redhat.com", "date": "2014-12-08T22:32:23Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2014-12-08T22:32:23Z"}, "message": "DWARFv5 Emit DW_TAG_atomic_type for C11 _Atomic.\n\nThis implements the DW_TAG_atomic_type for C11 _Atomic proposal as adopted\nin the latest DWARF5 draft. http://dwarfstd.org/ShowIssue.php?issue=131112.1\n\ngcc/ChangeLog\n\n\tPR debug/60782\n\t* dwarf2out.c (modified_type_die): Handle TYPE_QUAL_ATOMIC.\n\ngcc/testsuite/ChangeLog\n\n\tPR debug/60782\n\t* gcc.dg/debug/dwarf2/atomic.c: New test.\n\t* gcc.dg/debug/dwarf2/stacked-qualified-types-3.c: Likewise.\n\ninclude/ChangeLog\n\n\tPR debug/60782\n\t* dwarf2.def: Add DWARFv5 DW_TAG_atomic_type.\n\nFrom-SVN: r218496", "tree": {"sha": "531ce47029cd14edfcc8e5647401475bb0f0b787", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/531ce47029cd14edfcc8e5647401475bb0f0b787"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc3518da23383b0e173020a46334fe22b6b67891", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc3518da23383b0e173020a46334fe22b6b67891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc3518da23383b0e173020a46334fe22b6b67891", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc3518da23383b0e173020a46334fe22b6b67891/comments", "author": null, "committer": null, "parents": [{"sha": "009a34807ec71e18107582878b61096a584110a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/009a34807ec71e18107582878b61096a584110a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/009a34807ec71e18107582878b61096a584110a2"}], "stats": {"total": 74, "additions": 73, "deletions": 1}, "files": [{"sha": "8e8de749a6abc89de80c8d51975f6c96d68a7b49", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc3518da23383b0e173020a46334fe22b6b67891/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc3518da23383b0e173020a46334fe22b6b67891/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc3518da23383b0e173020a46334fe22b6b67891", "patch": "@@ -1,3 +1,8 @@\n+2014-12-08  Mark Wielaard  <mjw@redhat.com>\n+\n+\tPR debug/60782\n+\t* dwarf2out.c (modified_type_die): Handle TYPE_QUAL_ATOMIC.\n+\n 2014-11-15  David Wohlferd <dw@LimeGreenSocks.com>\n \n         PR target/61692"}, {"sha": "34b327e7514610a70450cdbbb909cc16a17ef3bf", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc3518da23383b0e173020a46334fe22b6b67891/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc3518da23383b0e173020a46334fe22b6b67891/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=bc3518da23383b0e173020a46334fe22b6b67891", "patch": "@@ -10551,7 +10551,7 @@ modified_type_die (tree type, int cv_quals, dw_die_ref context_die)\n   dw_die_ref mod_scope;\n   /* Only these cv-qualifiers are currently handled.  */\n   const int cv_qual_mask = (TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE\n-\t\t\t    | TYPE_QUAL_RESTRICT);\n+\t\t\t    | TYPE_QUAL_RESTRICT | TYPE_QUAL_ATOMIC);\n \n   if (code == ERROR_MARK)\n     return NULL;\n@@ -10564,6 +10564,10 @@ modified_type_die (tree type, int cv_quals, dw_die_ref context_die)\n   if (dwarf_version < 3)\n     cv_quals &= ~TYPE_QUAL_RESTRICT;\n \n+  /* Likewise for DW_TAG_atomic_type for DWARFv5.  */\n+  if (dwarf_version < 5)\n+    cv_quals &= ~TYPE_QUAL_ATOMIC;\n+\n   /* See if we already have the appropriately qualified variant of\n      this type.  */\n   qualified_type = get_qualified_type (type, cv_quals);\n@@ -10625,6 +10629,7 @@ modified_type_die (tree type, int cv_quals, dw_die_ref context_die)\n       struct qual_info { int q; enum dwarf_tag t; };\n       static const struct qual_info qual_info[] =\n \t{\n+\t  { TYPE_QUAL_ATOMIC, DW_TAG_atomic_type },\n \t  { TYPE_QUAL_RESTRICT, DW_TAG_restrict_type },\n \t  { TYPE_QUAL_VOLATILE, DW_TAG_volatile_type },\n \t  { TYPE_QUAL_CONST, DW_TAG_const_type },"}, {"sha": "08ddd7b95181d69c71c7fa2a1ce11315a85b342a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc3518da23383b0e173020a46334fe22b6b67891/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc3518da23383b0e173020a46334fe22b6b67891/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bc3518da23383b0e173020a46334fe22b6b67891", "patch": "@@ -1,3 +1,9 @@\n+2014-12-08  Mark Wielaard  <mjw@redhat.com>\n+\n+\tPR debug/60782\n+\t* gcc.dg/debug/dwarf2/atomic.c: New test.\n+\t* gcc.dg/debug/dwarf2/stacked-qualified-types-3.c: Likewise.\n+\n 2014-11-15  David Wohlferd <dw@LimeGreenSocks.com> \n \n \tPR target/61692"}, {"sha": "187e69548dfcbf9969a095dc44189e91bd55dd26", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/atomic.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc3518da23383b0e173020a46334fe22b6b67891/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fatomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc3518da23383b0e173020a46334fe22b6b67891/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fatomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fatomic.c?ref=bc3518da23383b0e173020a46334fe22b6b67891", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -gdwarf-5 -dA\" } */\n+\n+struct Atomics\n+{\n+  _Atomic(int) counter;\n+  struct Pointer\n+  {\n+    _Atomic volatile char *p;\n+  } p;\n+};\n+\n+struct Atomics a;\n+\n+/* { dg-final { scan-assembler-times \"DIE \\\\(\\[^\\n\\]*\\\\) DW_TAG_atomic_type\" 2 } } */"}, {"sha": "efa3fa0b1f21a49f436872f81b75d68f6486e20a", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/stacked-qualified-types-3.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc3518da23383b0e173020a46334fe22b6b67891/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fstacked-qualified-types-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc3518da23383b0e173020a46334fe22b6b67891/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fstacked-qualified-types-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fstacked-qualified-types-3.c?ref=bc3518da23383b0e173020a46334fe22b6b67891", "patch": "@@ -0,0 +1,34 @@\n+/* make sure we don't duplicate type qualifiers unneeded.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -gdwarf-5 -dA\" } */\n+\n+/* This should give us:\n+   - One const type pointing to a char\n+   - One volatile type pointing to a char\n+   - One atomic type pointing to a char\n+   - Either one const type pointing to the volatile type pointing to a char\n+     or one volatile type pointing to the const type pointing to a char.\n+     But not both.\n+   - Either one volatile type pointing to an atomic type pointing to a char\n+     or one atomic type pointing to a volatile type pointing to a char.\n+     But not both.\n+   - One restrict type pointing to a char pointer.\n+   - One atomic type pointing to a char pointer.\n+   - Either one restrict type pointing to an atomic type pointing to a char\n+     pointer or one atomic type pointing to a restrict type pointing to a\n+     char pointer.\n+     But not both.  */\n+\n+\n+char a;\n+const char b;\n+volatile const char c;\n+volatile char d;\n+const volatile char e;\n+_Atomic char f;\n+_Atomic volatile char g;\n+char * _Atomic restrict h;\n+char * _Atomic i;\n+char * restrict j;\n+\n+/* { dg-final { scan-assembler-times \"DIE \\\\(\\[^\\n\\]*\\\\) DW_TAG_(?:const|volatile|atomic|restrict)_type\" 8 } } */"}, {"sha": "632420c7699eea77642a43d7becc6558231f6c4e", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc3518da23383b0e173020a46334fe22b6b67891/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc3518da23383b0e173020a46334fe22b6b67891/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=bc3518da23383b0e173020a46334fe22b6b67891", "patch": "@@ -1,3 +1,8 @@\n+2014-12-08  Mark Wielaard  <mjw@redhat.com>\n+\n+\tPR debug/60782\n+\t* dwarf2.def: Add DWARFv5 DW_TAG_atomic_type.\n+\n 2014-11-21  Mark Wielaard  <mjw@redhat.com>\n \n \t* dwarf2.h: Add DW_LANG_C_plus_plus_11, DW_LANG_C11 and"}, {"sha": "ea8127c8b1d626dd3da88a0f6d5cbab2992d3bd4", "filename": "include/dwarf2.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc3518da23383b0e173020a46334fe22b6b67891/include%2Fdwarf2.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc3518da23383b0e173020a46334fe22b6b67891/include%2Fdwarf2.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fdwarf2.def?ref=bc3518da23383b0e173020a46334fe22b6b67891", "patch": "@@ -133,6 +133,8 @@ DW_TAG (DW_TAG_shared_type, 0x40)\n DW_TAG (DW_TAG_type_unit, 0x41)\n DW_TAG (DW_TAG_rvalue_reference_type, 0x42)\n DW_TAG (DW_TAG_template_alias, 0x43)\n+/* DWARF 5.  */\n+DW_TAG (DW_TAG_atomic_type, 0x47)\n \n DW_TAG_DUP (DW_TAG_lo_user, 0x4080)\n DW_TAG_DUP (DW_TAG_hi_user, 0xffff)"}]}