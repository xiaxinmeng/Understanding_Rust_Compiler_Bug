{"sha": "e150da383346adc762bc904342f9877f2f071265", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE1MGRhMzgzMzQ2YWRjNzYyYmM5MDQzNDJmOTg3N2YyZjA3MTI2NQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-12-06T11:44:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-12-06T11:44:27Z"}, "message": "match.pd (nop_convert): Remove empty match.\n\n2019-12-06  Richard Biener  <rguenther@suse.de>\n\n\t* match.pd (nop_convert): Remove empty match.  Use nop_convert?\n\teverywhere.\n\nFrom-SVN: r279040", "tree": {"sha": "17ed5664740d5e326cf5c734aa21ef7617000bd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17ed5664740d5e326cf5c734aa21ef7617000bd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e150da383346adc762bc904342f9877f2f071265", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e150da383346adc762bc904342f9877f2f071265", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e150da383346adc762bc904342f9877f2f071265", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e150da383346adc762bc904342f9877f2f071265/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "998d6381ac0082903b1c72e75517a41077c57f84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/998d6381ac0082903b1c72e75517a41077c57f84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/998d6381ac0082903b1c72e75517a41077c57f84"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "1f0c2d17da7e610fc3bbdb9f29cc9525eb612577", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e150da383346adc762bc904342f9877f2f071265/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e150da383346adc762bc904342f9877f2f071265/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e150da383346adc762bc904342f9877f2f071265", "patch": "@@ -1,3 +1,8 @@\n+2019-12-06  Richard Biener  <rguenther@suse.de>\n+\n+\t* match.pd (nop_convert): Remove empty match.  Use nop_convert?\n+\teverywhere.\n+\n 2019-12-06  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-data-ref.c (prune_runtime_alias_test_list): Exit early"}, {"sha": "58c57a573e26a45e180f6349502e2ad9a498687d", "filename": "gcc/match.pd", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e150da383346adc762bc904342f9877f2f071265/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e150da383346adc762bc904342f9877f2f071265/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=e150da383346adc762bc904342f9877f2f071265", "patch": "@@ -98,8 +98,8 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n (define_operator_list COND_TERNARY\n   IFN_COND_FMA IFN_COND_FMS IFN_COND_FNMA IFN_COND_FNMS)\n \n-/* As opposed to convert?, this still creates a single pattern, so\n-   it is not a suitable replacement for convert? in all cases.  */\n+/* With nop_convert? combine convert? and view_convert? in one pattern\n+   plus conditionalize on tree_nop_conversion_p conversions.  */\n (match (nop_convert @0)\n  (convert @0)\n  (if (tree_nop_conversion_p (type, TREE_TYPE (@0)))))\n@@ -109,9 +109,6 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n       && known_eq (TYPE_VECTOR_SUBPARTS (type),\n \t\t   TYPE_VECTOR_SUBPARTS (TREE_TYPE (@0)))\n       && tree_nop_conversion_p (TREE_TYPE (type), TREE_TYPE (TREE_TYPE (@0))))))\n-/* This one has to be last, or it shadows the others.  */\n-(match (nop_convert @0)\n- @0)\n \n /* Transform likes of (char) ABS_EXPR <(int) x> into (char) ABSU_EXPR <x>\n    ABSU_EXPR returns unsigned absolute value of the operand and the operand\n@@ -1428,7 +1425,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \n /* Convert - (~A) to A + 1.  */\n (simplify\n- (negate (nop_convert (bit_not @0)))\n+ (negate (nop_convert? (bit_not @0)))\n  (plus (view_convert @0) { build_each_one_cst (type); }))\n \n /* Convert ~ (A - 1) or ~ (A + -1) to -A.  */\n@@ -1455,7 +1452,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \n /* Otherwise prefer ~(X ^ Y) to ~X ^ Y as more canonical.  */\n (simplify\n- (bit_xor:c (nop_convert:s (bit_not:s @0)) @1)\n+ (bit_xor:c (nop_convert?:s (bit_not:s @0)) @1)\n  (if (tree_nop_conversion_p (type, TREE_TYPE (@0)))\n   (bit_not (bit_xor (view_convert @0) @1))))\n \n@@ -1684,7 +1681,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n /* For equality, this is also true with wrapping overflow.  */\n (for op (eq ne)\n  (simplify\n-  (op:c (nop_convert@3 (plus:c@2 @0 (convert1? @1))) (convert2? @1))\n+  (op:c (nop_convert?@3 (plus:c@2 @0 (convert1? @1))) (convert2? @1))\n   (if (ANY_INTEGRAL_TYPE_P (TREE_TYPE (@0))\n        && (TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (@0))\n \t   || TYPE_OVERFLOW_WRAPS (TREE_TYPE (@0)))\n@@ -1693,7 +1690,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n        && tree_nop_conversion_p (TREE_TYPE (@3), TREE_TYPE (@1)))\n    (op @0 { build_zero_cst (TREE_TYPE (@0)); })))\n  (simplify\n-  (op:c (nop_convert@3 (pointer_plus@2 (convert1? @0) @1)) (convert2? @0))\n+  (op:c (nop_convert?@3 (pointer_plus@2 (convert1? @0) @1)) (convert2? @0))\n   (if (tree_nop_conversion_p (TREE_TYPE (@2), TREE_TYPE (@0))\n        && tree_nop_conversion_p (TREE_TYPE (@3), TREE_TYPE (@0))\n        && (CONSTANT_CLASS_P (@1) || (single_use (@2) && single_use (@3))))\n@@ -2142,7 +2139,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t   || !HONOR_SIGN_DEPENDENT_ROUNDING (type)))\n    (convert (negate @1))))\n  (simplify\n-  (negate (nop_convert (negate @1)))\n+  (negate (nop_convert? (negate @1)))\n   (if (!TYPE_OVERFLOW_SANITIZED (type)\n        && !TYPE_OVERFLOW_SANITIZED (TREE_TYPE (@1)))\n    (view_convert @1)))\n@@ -2159,25 +2156,25 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   /* A - (A +- B)       -> -+ B */\n   /* A +- (B -+ A)      ->  +- B */\n   (simplify\n-   (minus (nop_convert (plus:c (nop_convert @0) @1)) @0)\n+   (minus (nop_convert1? (plus:c (nop_convert2? @0) @1)) @0)\n    (view_convert @1))\n   (simplify\n-   (minus (nop_convert (minus (nop_convert @0) @1)) @0)\n+   (minus (nop_convert1? (minus (nop_convert2? @0) @1)) @0)\n    (if (!ANY_INTEGRAL_TYPE_P (type)\n \t|| TYPE_OVERFLOW_WRAPS (type))\n    (negate (view_convert @1))\n    (view_convert (negate @1))))\n   (simplify\n-   (plus:c (nop_convert (minus @0 (nop_convert @1))) @1)\n+   (plus:c (nop_convert1? (minus @0 (nop_convert2? @1))) @1)\n    (view_convert @0))\n   (simplify\n-   (minus @0 (nop_convert (plus:c (nop_convert @0) @1)))\n+   (minus @0 (nop_convert1? (plus:c (nop_convert2? @0) @1)))\n     (if (!ANY_INTEGRAL_TYPE_P (type)\n \t || TYPE_OVERFLOW_WRAPS (type))\n      (negate (view_convert @1))\n      (view_convert (negate @1))))\n   (simplify\n-   (minus @0 (nop_convert (minus (nop_convert @0) @1)))\n+   (minus @0 (nop_convert1? (minus (nop_convert2? @0) @1)))\n    (view_convert @1))\n   /* (A +- B) + (C - A)   -> C +- B */\n   /* (A +  B) - (A - C)   -> B + C */\n@@ -2204,7 +2201,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    (for inner_op (plus minus)\n \tneg_inner_op (minus plus)\n     (simplify\n-     (outer_op (nop_convert (inner_op @0 CONSTANT_CLASS_P@1))\n+     (outer_op (nop_convert? (inner_op @0 CONSTANT_CLASS_P@1))\n \t       CONSTANT_CLASS_P@2)\n      /* If one of the types wraps, use that one.  */\n      (if (!ANY_INTEGRAL_TYPE_P (type) || TYPE_OVERFLOW_WRAPS (type))\n@@ -2243,7 +2240,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   /* (CST1 - A) +- CST2 -> CST3 - A  */\n   (for outer_op (plus minus)\n    (simplify\n-    (outer_op (nop_convert (minus CONSTANT_CLASS_P@1 @0)) CONSTANT_CLASS_P@2)\n+    (outer_op (nop_convert? (minus CONSTANT_CLASS_P@1 @0)) CONSTANT_CLASS_P@2)\n     /* If one of the types wraps, use that one.  */\n     (if (!ANY_INTEGRAL_TYPE_P (type) || TYPE_OVERFLOW_WRAPS (type))\n      /* If all 3 captures are CONSTANT_CLASS_P, punt, as we might recurse\n@@ -2262,7 +2259,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n      Use view_convert because it is safe for vectors and equivalent for\n      scalars.  */\n   (simplify\n-   (minus CONSTANT_CLASS_P@1 (nop_convert (minus CONSTANT_CLASS_P@2 @0)))\n+   (minus CONSTANT_CLASS_P@1 (nop_convert? (minus CONSTANT_CLASS_P@2 @0)))\n    /* If one of the types wraps, use that one.  */\n    (if (!ANY_INTEGRAL_TYPE_P (type) || TYPE_OVERFLOW_WRAPS (type))\n     /* If all 3 captures are CONSTANT_CLASS_P, punt, as we might recurse"}]}