{"sha": "e3a682f4197f9f39808febfd1862e722d7675d34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNhNjgyZjQxOTdmOWYzOTgwOGZlYmZkMTg2MmU3MjJkNzY3NWQzNA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-04-20T14:56:07Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-05-10T07:13:46Z"}, "message": "Use genversion to generate version.h.\n\nc++tools/ChangeLog:\n\n\t* Makefile.in: Include also ../gcc folder.\n\ngcc/ChangeLog:\n\n\t* Makefile.in: Rename gcov-iov to genversion and depend\n\ton version.h (instead of gcov-iov.h).\n\t* gcov-io.h: Include version.h instread of gcov-iov.h.\n\t* gengtype-state.c (read_state_version): Likewise.\n\t* gcov-iov.c: Moved to...\n\t* genversion.c: ...here.\n\t* lto-streamer.h (LTO_major_version): Define it with\n\tGCC_major_version.\n\t* version.c: Removed.\n\t* version.h: Removed.\n\nlibgcc/ChangeLog:\n\n\t* libgcov-driver.c (gcov_version): Use different name that does\n\tnot clash with newly introduced macro.", "tree": {"sha": "f4b4f7c6d8d8a37e96e0f2bde7e6f511619567ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4b4f7c6d8d8a37e96e0f2bde7e6f511619567ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3a682f4197f9f39808febfd1862e722d7675d34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3a682f4197f9f39808febfd1862e722d7675d34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3a682f4197f9f39808febfd1862e722d7675d34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3a682f4197f9f39808febfd1862e722d7675d34/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79a27f32df8eab0add722f75332f78fe20d94da3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79a27f32df8eab0add722f75332f78fe20d94da3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79a27f32df8eab0add722f75332f78fe20d94da3"}], "stats": {"total": 159, "additions": 55, "deletions": 104}, "files": [{"sha": "afc87d07ad97df55ee4b52650223b9e9825ba05e", "filename": "c++tools/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a682f4197f9f39808febfd1862e722d7675d34/c%2B%2Btools%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a682f4197f9f39808febfd1862e722d7675d34/c%2B%2Btools%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/c%2B%2Btools%2FMakefile.in?ref=e3a682f4197f9f39808febfd1862e722d7675d34", "patch": "@@ -89,9 +89,9 @@ all::g++-mapper-server$(exeext)\n \n MAPPER.O := server.o resolver.o\n CODYLIB = ../libcody/libcody.a\n-CXXINC += -I$(srcdir)/../libcody -I$(srcdir)/../include -I$(srcdir)/../gcc -I.\n+CXXINC += -I$(srcdir)/../libcody -I$(srcdir)/../include -I$(srcdir)/../gcc -I. -I../gcc\n g++-mapper-server$(exeext): $(MAPPER.O) $(CODYLIB)\n-\t+$(CXX) $(LDFLAGS) $(PIEFLAG) -o $@ $^ $(VERSION.O) $(LIBIBERTY) $(NETLIBS)\n+\t+$(CXX) $(LDFLAGS) $(PIEFLAG) -o $@ $^ $(LIBIBERTY) $(NETLIBS)\n \n # copy to gcc dir so tests there can run\n all::../gcc/g++-mapper-server$(exeext)"}, {"sha": "8091057a8a3e716b139b7619f7d4be17607ae94a", "filename": "gcc/Makefile.in", "status": "modified", "additions": 18, "deletions": 35, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a682f4197f9f39808febfd1862e722d7675d34/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a682f4197f9f39808febfd1862e722d7675d34/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=e3a682f4197f9f39808febfd1862e722d7675d34", "patch": "@@ -960,7 +960,7 @@ BASIC_BLOCK_H = basic-block.h $(PREDICT_H) $(VEC_H) $(FUNCTION_H) \\\n GIMPLE_H = gimple.h gimple.def gsstruct.def $(VEC_H) \\\n \t$(GGC_H) $(BASIC_BLOCK_H) $(TREE_H) tree-ssa-operands.h \\\n \ttree-ssa-alias.h $(INTERNAL_FN_H) $(HASH_TABLE_H) is-a.h\n-GCOV_IO_H = gcov-io.h gcov-iov.h auto-host.h gcov-counter.def\n+GCOV_IO_H = gcov-io.h version.h auto-host.h gcov-counter.def\n RECOG_H = recog.h\n EMIT_RTL_H = emit-rtl.h\n FLAGS_H = flags.h flag-types.h $(OPTIONS_H)\n@@ -1712,7 +1712,7 @@ OBJS-libcommon = diagnostic.o diagnostic-color.o diagnostic-show-locus.o \\\n \tedit-context.o \\\n \tpretty-print.o intl.o \\\n \tsbitmap.o \\\n-\tvec.o input.o version.o hash-table.o ggc-none.o memory-block.o \\\n+\tvec.o input.o hash-table.o ggc-none.o memory-block.o \\\n \tselftest.o selftest-diagnostic.o sort.o\n \n # Objects in libcommon-target.a, used by drivers and by the core\n@@ -1764,7 +1764,7 @@ MOSTLYCLEANFILES = insn-flags.h insn-config.h insn-codes.h \\\n  $(EXTRA_PROGRAMS) gcc-cross$(exeext) \\\n  $(SPECS) collect2$(exeext) gcc-ar$(exeext) gcc-nm$(exeext) \\\n  gcc-ranlib$(exeext) \\\n- gcov-iov$(build_exeext) gcov$(exeext) gcov-dump$(exeext) \\\n+ genversion$(build_exeext) gcov$(exeext) gcov-dump$(exeext) \\\n  gcov-tool$(exeect) \\\n  gengtype$(exeext) *.[0-9][0-9].* *.[si] *-checksum.c libbackend.a \\\n  libcommon-target.a libcommon.a libgcc.mk perf.data\n@@ -2145,7 +2145,7 @@ checksum-options:\n # Build libgcc.a.\n \n libgcc-support: libgcc.mvars stmp-int-hdrs $(TCONFIG_H) \\\n-\t$(MACHMODE_H) gcov-iov.h\n+\t$(MACHMODE_H) version.h\n \n libgcc.mvars: config.status Makefile specs xgcc$(exeext)\n \t: > tmp-libgcc.mvars\n@@ -2334,12 +2334,6 @@ s-options-h: optionlist $(srcdir)/opt-functions.awk $(srcdir)/opt-read.awk \\\n \n dumpvers: dumpvers.c\n \n-CFLAGS-version.o += -DBASEVER=$(BASEVER_s) -DDATESTAMP=$(DATESTAMP_s) \\\n-\t-DREVISION=$(REVISION_s) \\\n-\t-DDEVPHASE=$(DEVPHASE_s) -DPKGVERSION=$(PKGVERSION_s) \\\n-\t-DBUGURL=$(BUGURL_s)\n-version.o: $(REVISION) $(DATESTAMP) $(BASEVER) $(DEVPHASE)\n-\n # lto-compress.o needs $(ZLIBINC) added to the include flags.\n CFLAGS-lto-compress.o += $(ZLIBINC) $(ZSTD_INC)\n \n@@ -2756,7 +2750,7 @@ generated_files = config.h tm.h $(TM_P_H) $(TM_D_H) $(TM_H) multilib.h \\\n        $(simple_generated_h) specs.h \\\n        tree-check.h genrtl.h insn-modes.h insn-modes-inline.h \\\n        tm-preds.h tm-constrs.h \\\n-       $(ALL_GTFILES_H) gtype-desc.c gtype-desc.h gcov-iov.h \\\n+       $(ALL_GTFILES_H) gtype-desc.c gtype-desc.h version.h \\\n        options.h target-hooks-def.h insn-opinit.h \\\n        common/common-target-hooks-def.h pass-instances.def \\\n        c-family/c-target-hooks-def.h d/d-target-hooks-def.h \\\n@@ -2770,16 +2764,6 @@ build/%.o :  # dependencies provided by explicit rule later\n \t$(COMPILER_FOR_BUILD) -c $(BUILD_COMPILERFLAGS) $(BUILD_CPPFLAGS) \\\n \t\t-o $@ $<\n \n-## build/version.o is compiled by the $(COMPILER_FOR_BUILD) but needs\n-## several C macro definitions, just like version.o\n-build/version.o:  version.c version.h \\\n-                  $(REVISION) $(DATESTAMP) $(BASEVER) $(DEVPHASE)\n-\t$(COMPILER_FOR_BUILD) -c $(BUILD_COMPILERFLAGS) $(BUILD_CPPFLAGS) \\\n-\t-DBASEVER=$(BASEVER_s) -DDATESTAMP=$(DATESTAMP_s) \\\n-\t-DREVISION=$(REVISION_s) \\\n-\t-DDEVPHASE=$(DEVPHASE_s) -DPKGVERSION=$(PKGVERSION_s) \\\n-\t-DBUGURL=$(BUGURL_s) -o $@ $<\n-\n # Header dependencies for the programs that generate source code.\n # These are library modules...\n build/errors.o : errors.c $(BCONFIG_H) $(SYSTEM_H) errors.h\n@@ -2958,10 +2942,10 @@ build/genmatch$(build_exeext) : $(BUILD_CPPLIB) \\\n \n # These programs are not linked with the MD reader.\n build/gengtype$(build_exeext) : build/gengtype-lex.o build/gengtype-parse.o \\\n-              build/gengtype-state.o build/version.o build/errors.o\n+              build/gengtype-state.o version.h build/errors.o\n \n gengtype$(exeext) : gengtype.o gengtype-lex.o gengtype-parse.o \\\n-              gengtype-state.o version.o errors.o $(LIBDEPS)\n+              gengtype-state.o version.h errors.o $(LIBDEPS)\n \t+$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n \t    $(filter-out ($LIBDEPS), $^) $(LIBS)\n \n@@ -3040,20 +3024,19 @@ CFLAGS-cppdefault.o += $(PREPROCESSOR_DEFINES)\n # Note for the stamp targets, we run the program `true' instead of\n # having an empty command (nothing following the semicolon).\n \n-# gcov-iov.c is run on the build machine to generate gcov-iov.h from version.c\n-build/gcov-iov.o: gcov-iov.c $(BCONFIG_H) $(CORETYPES_H) $(GTM_H) \\\n-  $(SYSTEM_H) $(CORETYPES_H) $(TM_H)\n+# genversion.c is run on the build machine to generate version.h\n+CFLAGS-build/genversion.o += -DBASEVER=$(BASEVER_s) -DDATESTAMP=$(DATESTAMP_s) \\\n+\t-DREVISION=$(REVISION_s) \\\n+\t-DDEVPHASE=$(DEVPHASE_s) -DPKGVERSION=$(PKGVERSION_s) \\\n+\t-DBUGURL=$(BUGURL_s)\n \n-build/gcov-iov$(build_exeext): build/gcov-iov.o\n-\t+$(LINKER_FOR_BUILD) $(BUILD_LINKERFLAGS) $(BUILD_LDFLAGS) \\\n-\t\tbuild/gcov-iov.o -o $@\n+build/genversion.o: genversion.c $(BCONFIG_H) $(SYSTEM_H)\n \n-gcov-iov.h: s-iov; @true\n-s-iov: build/gcov-iov$(build_exeext) $(BASEVER) $(DEVPHASE)\n-\tbuild/gcov-iov$(build_exeext) '$(BASEVER_c)' '$(DEVPHASE_c)' \\\n-\t    > tmp-gcov-iov.h\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-gcov-iov.h gcov-iov.h\n-\t$(STAMP) s-iov\n+version.h: s-version; @true\n+s-version: build/genversion$(build_exeext)\n+\tbuild/genversion$(build_exeext) > tmp-version.h\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-version.h version.h\n+\t$(STAMP) s-version\n \n # gcov.o needs $(ZLIBINC) added to the include flags.\n CFLAGS-gcov.o += $(ZLIBINC)"}, {"sha": "c53655410bb382beda558449fe3fced804a76696", "filename": "gcc/gcov-io.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a682f4197f9f39808febfd1862e722d7675d34/gcc%2Fgcov-io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a682f4197f9f39808febfd1862e722d7675d34/gcc%2Fgcov-io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.h?ref=e3a682f4197f9f39808febfd1862e722d7675d34", "patch": "@@ -231,11 +231,7 @@ typedef uint64_t gcov_type_unsigned;\n #define GCOV_DATA_MAGIC ((gcov_unsigned_t)0x67636461) /* \"gcda\" */\n #define GCOV_NOTE_MAGIC ((gcov_unsigned_t)0x67636e6f) /* \"gcno\" */\n \n-/* gcov-iov.h is automatically generated by the makefile from\n-   version.c, it looks like\n-   \t#define GCOV_VERSION ((gcov_unsigned_t)0x89abcdef)\n-*/\n-#include \"gcov-iov.h\"\n+#include \"version.h\"\n \n /* Convert a magic or version number to a 4 character string.  */\n #define GCOV_UNSIGNED2STRING(ARRAY,VALUE)\t\\"}, {"sha": "e9775ed633e6726b42b8db839a25363243ffa7d2", "filename": "gcc/gengtype-state.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a682f4197f9f39808febfd1862e722d7675d34/gcc%2Fgengtype-state.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a682f4197f9f39808febfd1862e722d7675d34/gcc%2Fgengtype-state.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype-state.c?ref=e3a682f4197f9f39808febfd1862e722d7675d34", "patch": "@@ -2150,7 +2150,7 @@ read_state_options (options_p *opt)\n \n /* Read a version, and check against the version of the gengtype.  */\n static void\n-read_state_version (const char *version_string)\n+read_state_version (const char *ver_string)\n {\n   struct state_token_st *t0 = peek_state_token (0);\n   struct state_token_st *t1 = peek_state_token (1);\n@@ -2166,10 +2166,10 @@ read_state_version (const char *version_string)\n \t{\n \t  /* Check that the read version string is the same as current\n \t     version.  */\n-\t  if (strcmp (version_string, t0->stok_un.stok_string))\n+\t  if (strcmp (ver_string, t0->stok_un.stok_string))\n \t    fatal_reading_state_printf (t0,\n \t\t\t\t\t\"version string mismatch; expecting %s but got %s\",\n-\t\t\t\t\tversion_string,\n+\t\t\t\t\tver_string,\n \t\t\t\t\tt0->stok_un.stok_string);\n \t  next_state_tokens (2);\n \t}"}, {"sha": "22d8e349de54ff60f7faf5f74a9f3d95b54fb753", "filename": "gcc/genversion.c", "status": "renamed", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a682f4197f9f39808febfd1862e722d7675d34/gcc%2Fgenversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a682f4197f9f39808febfd1862e722d7675d34/gcc%2Fgenversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenversion.c?ref=e3a682f4197f9f39808febfd1862e722d7675d34", "patch": "@@ -1,4 +1,4 @@\n-/* Generate gcov version string from version.c. See gcov-io.h for\n+/* Generate version strings. See gcov-io.h for\n    description of how the version string is generated.\n    Copyright (C) 2002-2021 Free Software Foundation, Inc.\n    Contributed by Nathan Sidwell <nathan@codesourcery.com>\n@@ -26,23 +26,17 @@ along with GCC; see the file COPYING3.  If not see\n    phase (the latter may be an empty string).  */\n \n int\n-main (int argc, char **argv)\n+main (void)\n {\n   unsigned int version = 0;\n   unsigned char v[4];\n   unsigned int ix;\n   unsigned long major;\n   unsigned long minor = 0;\n   char phase = 0;\n-  char *ptr;\n+  char basever[] = BASEVER;\n+  char *ptr = basever;\n \n-  if (argc != 3)\n-    {\n-      fprintf (stderr, \"usage: %s 'version' 'phase'\\n\", argv[0]);\n-      return 1;\n-    }\n-\n-  ptr = argv[1];\n   major = strtoul (ptr, &ptr, 10);\n \n   if (*ptr == '.')\n@@ -53,9 +47,9 @@ main (int argc, char **argv)\n      Consider both equal as patch-level releases do not change\n      the GCOV version either.\n      On the trunk the development phase is \"experimental\".  */\n-  phase = argv[2][0];\n+  phase = DEVPHASE[0];\n   if (phase == '\\0'\n-      || strcmp (argv[2], \"prerelease\") == 0)\n+      || strcmp (DEVPHASE, \"prerelease\") == 0)\n     phase = '*';\n \n   v[0] = (major / 10) + 'A';\n@@ -66,12 +60,30 @@ main (int argc, char **argv)\n   for (ix = 0; ix != 4; ix++)\n     version = (version << 8) | v[ix];\n \n-  printf (\"/* Generated automatically by the program `%s'\\n\", argv[0]);\n-  printf (\"   from `%s (%lu %lu) and %s (%c)'.  */\\n\",\n-\t  argv[1], major, minor, argv[2], phase);\n+  printf (\"#ifndef VERSION_H\\n\");\n+  printf (\"#define VERSION_H\\n\\n\");\n+  printf (\"/* Generated automatically by genversion.  */\\n\");\n   printf (\"\\n\");\n+  printf (\"#define GCC_major_version %lu\\n\\n\", major);\n+\n+  printf (\"/* The complete version string, assembled from several pieces.\\n\"\n+\t  \"BASEVER, DATESTAMP, DEVPHASE, and REVISION are defined by the\\n\"\n+\t  \"Makefile.  */\\n\\n\");\n+\n+  printf (\"#define version_string \\\"\" BASEVER DATESTAMP DEVPHASE REVISION \"\\\"\\n\");\n+  printf (\"#define pkgversion_string \\\"\" PKGVERSION \"\\\"\\n\\n\");\n+\n+  printf (\"/* This is the location of the online document giving instructions for\\n\"\n+     \"reporting bugs.  If you distribute a modified version of GCC,\\n\"\n+     \"please configure with --with-bugurl pointing to a document giving\\n\"\n+     \"instructions for reporting bugs to you, not us.  (You are of course\\n\"\n+     \"welcome to forward us bugs reported to you, if you determine that\\n\"\n+     \"they are not bugs in your modifications.)  */\\n\\n\");\n+  printf (\"#define bug_report_url \\\"\" BUGURL \"\\\"\\n\\n\");\n+\n   printf (\"#define GCOV_VERSION ((gcov_unsigned_t)0x%08x)  /* %.4s */\\n\",\n \t  version, v);\n+  printf (\"\\n#endif /* VERSION_H */\\n\");\n \n   return 0;\n }", "previous_filename": "gcc/gcov-iov.c"}, {"sha": "5f0335eb76cd14c33f32aaa69ef19c7eb8005669", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a682f4197f9f39808febfd1862e722d7675d34/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a682f4197f9f39808febfd1862e722d7675d34/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=e3a682f4197f9f39808febfd1862e722d7675d34", "patch": "@@ -26,6 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"plugin-api.h\"\n #include \"gcov-io.h\"\n #include \"diagnostic.h\"\n+#include \"version.h\"\n \n /* The encoding for a function consists of the following sections:\n \n@@ -120,7 +121,7 @@ along with GCC; see the file COPYING3.  If not see\n      String are represented in the table as pairs, a length in ULEB128\n      form followed by the data for the string.  */\n \n-#define LTO_major_version 9\n+#define LTO_major_version GCC_major_version\n #define LTO_minor_version 0\n \n typedef unsigned char\tlto_decl_flags_t;"}, {"sha": "9415bb692ec1d323eb9212510b93e5cac4f5778e", "filename": "gcc/version.c", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a27f32df8eab0add722f75332f78fe20d94da3/gcc%2Fversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a27f32df8eab0add722f75332f78fe20d94da3/gcc%2Fversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fversion.c?ref=79a27f32df8eab0add722f75332f78fe20d94da3", "patch": "@@ -1,35 +0,0 @@\n-/* Copyright (C) 1997-2021 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#include \"version.h\"\n-\n-/* This is the location of the online document giving instructions for\n-   reporting bugs.  If you distribute a modified version of GCC,\n-   please configure with --with-bugurl pointing to a document giving\n-   instructions for reporting bugs to you, not us.  (You are of course\n-   welcome to forward us bugs reported to you, if you determine that\n-   they are not bugs in your modifications.)  */\n-\n-const char bug_report_url[] = BUGURL;\n-\n-/* The complete version string, assembled from several pieces.\n-   BASEVER, DATESTAMP, DEVPHASE, and REVISION are defined by the\n-   Makefile.  */\n-\n-const char version_string[] = BASEVER DATESTAMP DEVPHASE REVISION;\n-const char pkgversion_string[] = PKGVERSION;"}, {"sha": "88919039d9640a4c81fe53190750fef3ab2790d9", "filename": "gcc/version.h", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a27f32df8eab0add722f75332f78fe20d94da3/gcc%2Fversion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a27f32df8eab0add722f75332f78fe20d94da3/gcc%2Fversion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fversion.h?ref=79a27f32df8eab0add722f75332f78fe20d94da3", "patch": "@@ -1,6 +0,0 @@\n-#ifndef GCC_VERSION_H\n-#define GCC_VERSION_H\n-extern const char version_string[];\n-extern const char pkgversion_string[];\n-extern const char bug_report_url[];\n-#endif /* ! GCC_VERSION_H */"}, {"sha": "cbdf2ca2e89ccd37b86b58b83f812a2a00e9ee4b", "filename": "libgcc/libgcov-driver.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a682f4197f9f39808febfd1862e722d7675d34/libgcc%2Flibgcov-driver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a682f4197f9f39808febfd1862e722d7675d34/libgcc%2Flibgcov-driver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-driver.c?ref=e3a682f4197f9f39808febfd1862e722d7675d34", "patch": "@@ -201,7 +201,7 @@ gcov_version (struct gcov_info *ptr, gcov_unsigned_t version,\n   if (version != GCOV_VERSION)\n     {\n       char v[4], e[4];\n-      char version_string[128], expected_string[128];\n+      char ver_string[128], expected_string[128];\n \n       GCOV_UNSIGNED2STRING (v, version);\n       GCOV_UNSIGNED2STRING (e, GCOV_VERSION);\n@@ -210,7 +210,7 @@ gcov_version (struct gcov_info *ptr, gcov_unsigned_t version,\n \t\t  \"got %s (%.4s)\\n\",\n \t\t  filename? filename : ptr->filename,\n \t\t  gcov_version_string (expected_string, e), e,\n-\t\t  gcov_version_string (version_string, v), v);\n+\t\t  gcov_version_string (ver_string, v), v);\n       return 0;\n     }\n   return 1;"}]}