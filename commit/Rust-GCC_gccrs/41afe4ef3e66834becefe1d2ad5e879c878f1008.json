{"sha": "41afe4ef3e66834becefe1d2ad5e879c878f1008", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFhZmU0ZWYzZTY2ODM0YmVjZWZlMWQyYWQ1ZTg3OWM4NzhmMTAwOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-12-21T16:46:04Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-12-21T16:46:04Z"}, "message": "i386.c (x86_sse_split_regs): Rename from x86_sse_partial_regs.\n\n        * config/i386/i386.c (x86_sse_split_regs): Rename from\n        x86_sse_partial_regs.\n        * config/i386/i386.h (x86_sse_split_regs): Likewise.\n        (TARGET_SSE_SPLIT_REGS): Rename from TARGET_SSE_PARTIAL_REGS.\n        * config/i386/i386.md (*): Update to match.  Remove two\n        floatsisf splitters that use it.\n\nFrom-SVN: r92458", "tree": {"sha": "d4da5fcb696eefb7d6fd84c280a3166ead2ee1da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4da5fcb696eefb7d6fd84c280a3166ead2ee1da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41afe4ef3e66834becefe1d2ad5e879c878f1008", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41afe4ef3e66834becefe1d2ad5e879c878f1008", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41afe4ef3e66834becefe1d2ad5e879c878f1008", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41afe4ef3e66834becefe1d2ad5e879c878f1008/comments", "author": null, "committer": null, "parents": [{"sha": "1db70317b32b43109e0acb578036b00b033a8466", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1db70317b32b43109e0acb578036b00b033a8466", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1db70317b32b43109e0acb578036b00b033a8466"}], "stats": {"total": 72, "additions": 23, "deletions": 49}, "files": [{"sha": "f65773c70c0f1b69951492bce2b9e143b4d35ce3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41afe4ef3e66834becefe1d2ad5e879c878f1008/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41afe4ef3e66834becefe1d2ad5e879c878f1008/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41afe4ef3e66834becefe1d2ad5e879c878f1008", "patch": "@@ -1,5 +1,14 @@\n 2004-12-21  Richard Henderson  <rth@redhat.com>\n \n+\t* config/i386/i386.c (x86_sse_split_regs): Rename from\n+\tx86_sse_partial_regs.\n+\t* config/i386/i386.h (x86_sse_split_regs): Likewise.\n+\t(TARGET_SSE_SPLIT_REGS): Rename from TARGET_SSE_PARTIAL_REGS.\n+\t* config/i386/i386.md (*): Update to match.  Remove two\n+\tfloatsisf splitters that use it.\n+\n+\t* config/i386/i386.h (x86_sse_partial_regs_for_cvtsd2ss): Remove.\n+\n \t* config/i386/i386.c (x86_sse_partial_regs_for_cvtsd2ss): Remove.\n \t* config/i386/i386.h (TARGET_SSE_PARTIAL_REGS_FOR_CVTSD2SS): Remove.\n \t* config/i386/i386.md (truncdfsf2_1_sse): Don't test it."}, {"sha": "a6273cadd6b8cec7cb662588f6d9b57aaec6c04a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41afe4ef3e66834becefe1d2ad5e879c878f1008/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41afe4ef3e66834becefe1d2ad5e879c878f1008/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=41afe4ef3e66834becefe1d2ad5e879c878f1008", "patch": "@@ -562,10 +562,11 @@ const int x86_decompose_lea = m_PENT4 | m_NOCONA;\n const int x86_shift1 = ~m_486;\n const int x86_arch_always_fancy_math_387 = m_PENT | m_PPRO | m_ATHLON_K8 | m_PENT4 | m_NOCONA;\n const int x86_sse_partial_reg_dependency = m_PENT4 | m_NOCONA | m_PPRO;\n-/* Set for machines where the type and dependencies are resolved on SSE register\n-   parts instead of whole registers, so we may maintain just lower part of\n-   scalar values in proper format leaving the upper part undefined.  */\n-const int x86_sse_partial_regs = m_ATHLON_K8;\n+/* Set for machines where the type and dependencies are resolved on SSE\n+   register parts instead of whole registers, so we may maintain just\n+   lower part of scalar values in proper format leaving the upper part\n+   undefined.  */\n+const int x86_sse_split_regs = m_ATHLON_K8;\n const int x86_sse_typeless_stores = m_ATHLON_K8;\n const int x86_sse_load0_by_pxor = m_PPRO | m_PENT4 | m_NOCONA;\n const int x86_use_ffreep = m_ATHLON_K8;"}, {"sha": "383617214ddfc432dcfb58c41f86fbf6f3629b56", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41afe4ef3e66834becefe1d2ad5e879c878f1008/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41afe4ef3e66834becefe1d2ad5e879c878f1008/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=41afe4ef3e66834becefe1d2ad5e879c878f1008", "patch": "@@ -243,9 +243,9 @@ extern const int x86_partial_reg_dependency, x86_memory_mismatch_stall;\n extern const int x86_accumulate_outgoing_args, x86_prologue_using_move;\n extern const int x86_epilogue_using_move, x86_decompose_lea;\n extern const int x86_arch_always_fancy_math_387, x86_shift1;\n-extern const int x86_sse_partial_reg_dependency, x86_sse_partial_regs;\n+extern const int x86_sse_partial_reg_dependency, x86_sse_split_regs;\n extern const int x86_sse_typeless_stores, x86_sse_load0_by_pxor;\n-extern const int x86_use_ffreep, x86_sse_partial_regs_for_cvtsd2ss;\n+extern const int x86_use_ffreep;\n extern const int x86_inter_unit_moves, x86_schedule;\n extern const int x86_use_bt;\n extern int x86_prefetch_sse;\n@@ -286,7 +286,7 @@ extern int x86_prefetch_sse;\n #define TARGET_PARTIAL_REG_DEPENDENCY (x86_partial_reg_dependency & TUNEMASK)\n #define TARGET_SSE_PARTIAL_REG_DEPENDENCY \\\n \t\t\t\t      (x86_sse_partial_reg_dependency & TUNEMASK)\n-#define TARGET_SSE_PARTIAL_REGS (x86_sse_partial_regs & TUNEMASK)\n+#define TARGET_SSE_SPLIT_REGS (x86_sse_split_regs & TUNEMASK)\n #define TARGET_SSE_TYPELESS_STORES (x86_sse_typeless_stores & TUNEMASK)\n #define TARGET_SSE_LOAD0_BY_PXOR (x86_sse_load0_by_pxor & TUNEMASK)\n #define TARGET_MEMORY_MISMATCH_STALL (x86_memory_mismatch_stall & TUNEMASK)"}, {"sha": "285df847f56932fd529054975e39bcfaa3380301", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 6, "deletions": 42, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41afe4ef3e66834becefe1d2ad5e879c878f1008/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41afe4ef3e66834becefe1d2ad5e879c878f1008/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=41afe4ef3e66834becefe1d2ad5e879c878f1008", "patch": "@@ -2268,7 +2268,7 @@\n \t\t (if_then_else\n \t\t   (ior (ne (symbol_ref \"TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n \t\t\t    (const_int 0))\n-\t\t\t(ne (symbol_ref \"TARGET_SSE_PARTIAL_REGS\")\n+\t\t\t(ne (symbol_ref \"TARGET_SSE_SPLIT_REGS\")\n \t\t\t    (const_int 0)))\n \t\t   (const_string \"V4SF\")\n \t\t   (const_string \"SF\"))\n@@ -2358,7 +2358,7 @@\n \t\t (if_then_else\n \t\t   (ior (ne (symbol_ref \"TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n \t\t\t    (const_int 0))\n-\t\t\t(ne (symbol_ref \"TARGET_SSE_PARTIAL_REGS\")\n+\t\t\t(ne (symbol_ref \"TARGET_SSE_SPLIT_REGS\")\n \t\t\t    (const_int 0)))\n \t\t   (const_string \"V4SF\")\n \t\t   (const_string \"SF\"))\n@@ -2554,7 +2554,7 @@\n \t\t  of register.  */\n \t       (eq_attr \"alternative\" \"7\")\n \t\t (if_then_else\n-\t\t   (ne (symbol_ref \"TARGET_SSE_PARTIAL_REGS\")\n+\t\t   (ne (symbol_ref \"TARGET_SSE_SPLIT_REGS\")\n \t\t       (const_int 0))\n \t\t   (const_string \"V1DF\")\n \t\t   (const_string \"DF\"))\n@@ -2674,7 +2674,7 @@\n \t\t  of register.  */\n \t       (eq_attr \"alternative\" \"7\")\n \t\t (if_then_else\n-\t\t   (ne (symbol_ref \"TARGET_SSE_PARTIAL_REGS\")\n+\t\t   (ne (symbol_ref \"TARGET_SSE_SPLIT_REGS\")\n \t\t       (const_int 0))\n \t\t   (const_string \"V1DF\")\n \t\t   (const_string \"DF\"))\n@@ -4480,23 +4480,6 @@\n    (set_attr \"athlon_decode\" \"vector,double\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n-; Avoid possible reformatting penalty on the destination by first\n-; zeroing it out\n-(define_split\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t(float:SF (match_operand:SI 1 \"nonimmediate_operand\" \"\")))]\n-  \"reload_completed\n-   && TARGET_SSE_MATH && TARGET_SSE_PARTIAL_REGS\n-   && SSE_REG_P (operands[0])\"\n-  [(const_int 0)]\n-{\n-  rtx dest;\n-  dest = simplify_gen_subreg (V4SFmode, operands[0], SFmode, 0);\n-  emit_insn (gen_sse_clrv4sf (dest, CONST0_RTX (V4SFmode)));\n-  emit_insn (gen_cvtsi2ss (dest, dest, operands[1]));\n-  DONE;\n-})\n-\n (define_insn \"*floatsisf2_i387\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n \t(float:SF (match_operand:SI 1 \"nonimmediate_operand\" \"m,?r\")))]\n@@ -4538,23 +4521,6 @@\n    (set_attr \"athlon_decode\" \"vector,double\")\n    (set_attr \"fp_int_src\" \"true\")])\n \n-; Avoid possible reformatting penalty on the destination by first\n-; zeroing it out\n-(define_split\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t(float:SF (match_operand:DI 1 \"nonimmediate_operand\" \"\")))]\n-  \"reload_completed\n-   && TARGET_64BIT && TARGET_SSE_MATH && TARGET_SSE_PARTIAL_REGS\n-   && SSE_REG_P (operands[0])\"\n-  [(const_int 0)]\n-{\n-  rtx dest;\n-  dest = simplify_gen_subreg (V4SFmode, operands[0], SFmode, 0);\n-  emit_insn (gen_sse_clrv4sf (dest, CONST0_RTX (V4SFmode)));\n-  emit_insn (gen_cvtsi2ssq (dest, dest, operands[1]));\n-  DONE;\n-})\n-\n (define_insn \"*floatdisf2_i387\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n \t(float:SF (match_operand:DI 1 \"nonimmediate_operand\" \"m,?r\")))]\n@@ -18266,8 +18232,7 @@\n    (set (match_dup 0) (ior:V2DF (match_dup 6)\n \t\t\t        (match_dup 7)))]\n {\n-  if (GET_MODE (operands[2]) == DFmode\n-      && TARGET_SSE_PARTIAL_REGS && !optimize_size)\n+  if (TARGET_SSE_SPLIT_REGS && !optimize_size)\n     {\n       rtx op = simplify_gen_subreg (V2DFmode, operands[2], DFmode, 0);\n       emit_insn (gen_sse2_unpcklpd (op, op, op));\n@@ -18429,8 +18394,7 @@\n   [(set (match_dup 0) (match_op_dup 1 [(match_dup 0) (match_dup 5)]))\n    (set (match_dup 8) (and:V2DF (match_dup 6) (match_dup 7)))]\n {\n-  if (TARGET_SSE_PARTIAL_REGS && !optimize_size\n-      && GET_MODE (operands[2]) == DFmode)\n+  if (TARGET_SSE_SPLIT_REGS && !optimize_size)\n     {\n       if (REG_P (operands[2]))\n \t{"}]}