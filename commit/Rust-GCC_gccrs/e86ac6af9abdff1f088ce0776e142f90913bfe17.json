{"sha": "e86ac6af9abdff1f088ce0776e142f90913bfe17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg2YWM2YWY5YWJkZmYxZjA4OGNlMDc3NmUxNDJmOTA5MTNiZmUxNw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-09-06T00:22:49Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-09-06T00:22:49Z"}, "message": "i860.c: Follow spelling conventions.\n\n\t* config/i860/i860.c: Follow spelling conventions.\n\t* config/i860/i860.h: Likewise.\n\t* config/sh/sh.h: Likewise.\n\nFrom-SVN: r71126", "tree": {"sha": "14b1d13d33ed0562d77482133967256dbd6b2d59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14b1d13d33ed0562d77482133967256dbd6b2d59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e86ac6af9abdff1f088ce0776e142f90913bfe17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e86ac6af9abdff1f088ce0776e142f90913bfe17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e86ac6af9abdff1f088ce0776e142f90913bfe17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e86ac6af9abdff1f088ce0776e142f90913bfe17/comments", "author": null, "committer": null, "parents": [{"sha": "5c30494db4c8b8194ee9897cd7498188d87a7970", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c30494db4c8b8194ee9897cd7498188d87a7970", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c30494db4c8b8194ee9897cd7498188d87a7970"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "a2af1cd5c4c8472afb472efde4cebd0bc021c325", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86ac6af9abdff1f088ce0776e142f90913bfe17/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86ac6af9abdff1f088ce0776e142f90913bfe17/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e86ac6af9abdff1f088ce0776e142f90913bfe17", "patch": "@@ -1,3 +1,9 @@\n+2003-09-05  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/i860/i860.c: Follow spelling conventions.\n+\t* config/i860/i860.h: Likewise.\n+\t* config/sh/sh.h: Likewise.\n+\n 2003-09-05  Nitin Yewale  <NitinY@KPITCummins.com>\n \n \t* config/h8300/h8300-protos.h: Declare h8300_hard_regno_rename_ok"}, {"sha": "f56de2881d54e56e00560a88c520fdb30de61282", "filename": "gcc/config/i860/i860.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86ac6af9abdff1f088ce0776e142f90913bfe17/gcc%2Fconfig%2Fi860%2Fi860.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86ac6af9abdff1f088ce0776e142f90913bfe17/gcc%2Fconfig%2Fi860%2Fi860.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.c?ref=e86ac6af9abdff1f088ce0776e142f90913bfe17", "patch": "@@ -61,7 +61,7 @@ const char *i860_reg_prefix = I860_REG_PREFIX;\n \n rtx i860_compare_op0, i860_compare_op1;\n \f\n-/* Return non-zero if this pattern, can be evaluated safely, even if it\n+/* Return nonzero if this pattern, can be evaluated safely, even if it\n    was not asked for.  */\n int\n safe_insn_src_p (rtx op, enum machine_mode mode)\n@@ -187,7 +187,7 @@ reg_clobbered_p (rtx reg, rtx in)\n   return 0;\n }\n \n-/* Return non-zero if OP can be written to without screwing up\n+/* Return nonzero if OP can be written to without screwing up\n    GCC's model of what's going on.  It is assumed that this operand\n    appears in the dest position of a SET insn in a conditional\n    branch's delay slot.  AFTER is the label to start looking from.  */\n@@ -256,7 +256,7 @@ operand_clobbered_before_used_after (rtx op, rtx after)\n }\n \n \f\n-/* Return non-zero only if OP is a register of mode MODE,\n+/* Return nonzero only if OP is a register of mode MODE,\n    or const0_rtx.  */\n int\n reg_or_0_operand (rtx op, enum machine_mode mode)"}, {"sha": "f5ce0b17c712dea299d2abfe6908dd268c549c1d", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86ac6af9abdff1f088ce0776e142f90913bfe17/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86ac6af9abdff1f088ce0776e142f90913bfe17/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=e86ac6af9abdff1f088ce0776e142f90913bfe17", "patch": "@@ -330,7 +330,7 @@ enum reg_class { NO_REGS, GENERAL_REGS, FP_REGS, ALL_REGS, LIM_REG_CLASSES };\n    : (C) == 'L' ? (unsigned) (VALUE) < 0x10000\t\\\n    : 0)\n \n-/* Return non-zero if the given VALUE is acceptable for the\n+/* Return nonzero if the given VALUE is acceptable for the\n    constraint letter C.  For the i860, constraint letter 'G'\n    permits only a floating-point zero value.  */\n #define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C)  \t\\\n@@ -344,7 +344,7 @@ enum reg_class { NO_REGS, GENERAL_REGS, FP_REGS, ALL_REGS, LIM_REG_CLASSES };\n \n    If we are trying to put an integer constant into some register, prefer an\n    integer register to an FP register.  If we are trying to put a \n-   non-zero floating-point constant into some register, use an integer\n+   nonzero floating-point constant into some register, use an integer\n    register if the constant is SFmode and GENERAL_REGS is one of our options.\n    Otherwise, put the constant into memory.\n "}, {"sha": "3ccfdf9c898535c2e43bbfad5e667c43bdc14a3a", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86ac6af9abdff1f088ce0776e142f90913bfe17/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86ac6af9abdff1f088ce0776e142f90913bfe17/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=e86ac6af9abdff1f088ce0776e142f90913bfe17", "patch": "@@ -1776,7 +1776,7 @@ struct sh_args {\n   (((COOKIE) >> CALL_COOKIE_INT_REG_SHIFT (REG)) & ((REG) < 4 ? 7 : 15))\n     long call_cookie;\n \n-  /* This is set to non-zero when the call in question must use the Renesas ABI,\n+  /* This is set to nonzero when the call in question must use the Renesas ABI,\n      even without the -mrenesas option.  */\n     int renesas_abi;\n };"}]}