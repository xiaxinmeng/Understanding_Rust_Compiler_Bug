{"sha": "89afb2e86fcb29c559b2957fdcbea0d01740c49b", "node_id": "C_kwDOANBUbNoAKDg5YWZiMmU4NmZjYjI5YzU1OWIyOTU3ZmRjYmVhMGQwMTc0MGM0OWI", "commit": {"author": {"name": "Takayuki 'January June' Suwa", "email": "jjsuwa_sys3175@yahoo.co.jp", "date": "2022-09-01T05:49:13Z"}, "committer": {"name": "Max Filippov", "email": "jcmvbkbc@gmail.com", "date": "2022-09-09T22:19:51Z"}, "message": "xtensa: Make complex hard register clobber elimination more robust and accurate\n\nThis patch eliminates all clobbers for complex hard registers that will\nbe overwritten entirely afterwards (supersedence of\n3867d414bd7d9e5b6fb2a51b1fb3d9e9e1eae9).\n\ngcc/ChangeLog:\n\n\t* config/xtensa/xtensa.md: Rewrite the split pattern that performs\n\tthe abovementioned process so that insns that overwrite clobbered\n\tregister no longer need to be contiguous.\n\t(DSC): Remove as no longer needed.", "tree": {"sha": "a69e58b8eff56926b6e75f4585767947d2f1e44b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a69e58b8eff56926b6e75f4585767947d2f1e44b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89afb2e86fcb29c559b2957fdcbea0d01740c49b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89afb2e86fcb29c559b2957fdcbea0d01740c49b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89afb2e86fcb29c559b2957fdcbea0d01740c49b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89afb2e86fcb29c559b2957fdcbea0d01740c49b/comments", "author": {"login": "jjsuwa-sys3175", "id": 73290592, "node_id": "MDQ6VXNlcjczMjkwNTky", "avatar_url": "https://avatars.githubusercontent.com/u/73290592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jjsuwa-sys3175", "html_url": "https://github.com/jjsuwa-sys3175", "followers_url": "https://api.github.com/users/jjsuwa-sys3175/followers", "following_url": "https://api.github.com/users/jjsuwa-sys3175/following{/other_user}", "gists_url": "https://api.github.com/users/jjsuwa-sys3175/gists{/gist_id}", "starred_url": "https://api.github.com/users/jjsuwa-sys3175/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jjsuwa-sys3175/subscriptions", "organizations_url": "https://api.github.com/users/jjsuwa-sys3175/orgs", "repos_url": "https://api.github.com/users/jjsuwa-sys3175/repos", "events_url": "https://api.github.com/users/jjsuwa-sys3175/events{/privacy}", "received_events_url": "https://api.github.com/users/jjsuwa-sys3175/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jcmvbkbc", "id": 166731, "node_id": "MDQ6VXNlcjE2NjczMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmvbkbc", "html_url": "https://github.com/jcmvbkbc", "followers_url": "https://api.github.com/users/jcmvbkbc/followers", "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}", "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions", "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs", "repos_url": "https://api.github.com/users/jcmvbkbc/repos", "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06c2756e824cfe409d280fc78a0c4f68a9123e49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06c2756e824cfe409d280fc78a0c4f68a9123e49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06c2756e824cfe409d280fc78a0c4f68a9123e49"}], "stats": {"total": 67, "additions": 45, "deletions": 22}, "files": [{"sha": "f722ea562891d9ecfe9919f438a3fa315c9555d0", "filename": "gcc/config/xtensa/xtensa.md", "status": "modified", "additions": 45, "deletions": 22, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89afb2e86fcb29c559b2957fdcbea0d01740c49b/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89afb2e86fcb29c559b2957fdcbea0d01740c49b/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.md?ref=89afb2e86fcb29c559b2957fdcbea0d01740c49b", "patch": "@@ -86,10 +86,6 @@\n ;; This code iterator is for *shlrd and its variants.\n (define_code_iterator ior_op [ior plus])\n \n-;; This mode iterator allows the DC and SC patterns to be defined from\n-;; the same template.\n-(define_mode_iterator DSC [DC SC])\n-\n \f\n ;; Attributes.\n \n@@ -2843,27 +2839,54 @@\n })\n \n (define_split\n-  [(clobber (match_operand:DSC 0 \"register_operand\"))]\n-  \"GP_REG_P (REGNO (operands[0]))\"\n+  [(clobber (match_operand 0 \"register_operand\"))]\n+  \"HARD_REGISTER_P (operands[0])\n+   && COMPLEX_MODE_P (GET_MODE (operands[0]))\"\n   [(const_int 0)]\n {\n-  unsigned int regno = REGNO (operands[0]);\n-  machine_mode inner_mode = GET_MODE_INNER (<MODE>mode);\n+  auto_sbitmap bmp (FIRST_PSEUDO_REGISTER);\n   rtx_insn *insn;\n-  rtx x;\n-  if (! ((insn = next_nonnote_nondebug_insn (curr_insn))\n-\t && NONJUMP_INSN_P (insn)\n-\t && GET_CODE (x = PATTERN (insn)) == SET\n-\t && REG_P (x = XEXP (x, 0))\n-\t && GET_MODE (x) == inner_mode\n-\t && REGNO (x) == regno\n-\t && (insn = next_nonnote_nondebug_insn (insn))\n-\t && NONJUMP_INSN_P (insn)\n-\t && GET_CODE (x = PATTERN (insn)) == SET\n-\t && REG_P (x = XEXP (x, 0))\n-\t && GET_MODE (x) == inner_mode\n-\t && REGNO (x) == regno + REG_NREGS (operands[0]) / 2))\n-    FAIL;\n+  rtx reg = gen_rtx_REG (SImode, 0);\n+  bitmap_set_range (bmp, REGNO (operands[0]), REG_NREGS (operands[0]));\n+  for (insn = next_nonnote_nondebug_insn_bb (curr_insn);\n+       insn; insn = next_nonnote_nondebug_insn_bb (insn))\n+    {\n+      sbitmap_iterator iter;\n+      unsigned int regno;\n+      if (NONJUMP_INSN_P (insn))\n+\t{\n+\t  EXECUTE_IF_SET_IN_BITMAP (bmp, 2, regno, iter)\n+\t    {\n+\t      set_regno_raw (reg, regno, REG_NREGS (reg));\n+\t      if (reg_overlap_mentioned_p (reg, PATTERN (insn)))\n+\t\tbreak;\n+\t    }\n+\t  if (GET_CODE (PATTERN (insn)) == SET)\n+\t    {\n+\t      rtx x = SET_DEST (PATTERN (insn));\n+\t      if (REG_P (x) && HARD_REGISTER_P (x))\n+\t\tbitmap_clear_range (bmp, REGNO (x), REG_NREGS (x));\n+\t      else if (SUBREG_P (x) && HARD_REGISTER_P (SUBREG_REG (x)))\n+\t\t{\n+\t\t  struct subreg_info info;\n+\t\t  subreg_get_info (regno = REGNO (SUBREG_REG (x)),\n+\t\t\t\t   GET_MODE (SUBREG_REG (x)),\n+\t\t\t\t   SUBREG_BYTE (x), GET_MODE (x), &info);\n+\t\t  if (!info.representable_p)\n+\t\t    break;\n+\t\t  bitmap_clear_range (bmp, regno + info.offset, info.nregs);\n+\t\t}\n+\t    }\n+\t  if (bitmap_empty_p (bmp))\n+\t    goto FALLTHRU;\n+\t}\n+      else if (CALL_P (insn))\n+\tEXECUTE_IF_SET_IN_BITMAP (bmp, 2, regno, iter)\n+\t if (call_used_or_fixed_reg_p (regno))\n+\t   break;\n+    }\n+  FAIL;\n+FALLTHRU:;\n })\n \n (define_peephole2"}]}