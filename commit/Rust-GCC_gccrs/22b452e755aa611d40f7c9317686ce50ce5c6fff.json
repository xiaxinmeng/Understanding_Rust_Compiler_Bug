{"sha": "22b452e755aa611d40f7c9317686ce50ce5c6fff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJiNDUyZTc1NWFhNjExZDQwZjdjOTMxNzY4NmNlNTBjZTVjNmZmZg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@cygnus.co.uk", "date": "1999-07-09T03:34:26Z"}, "committer": {"name": "Bernd Schmidt", "email": "crux@gcc.gnu.org", "date": "1999-07-09T03:34:26Z"}, "message": "loop.c (check_dbra_loop): When reversing a loop...\n\n\t* loop.c (check_dbra_loop): When reversing a loop, delete all\n\tREG_EQUAL notes referencing the reversed biv except those which are\n\tfor a giv based on it.\n\nFrom-SVN: r28043", "tree": {"sha": "5d92a5c589eaa63f98f1803b49166ef740fe7116", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d92a5c589eaa63f98f1803b49166ef740fe7116"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22b452e755aa611d40f7c9317686ce50ce5c6fff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22b452e755aa611d40f7c9317686ce50ce5c6fff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22b452e755aa611d40f7c9317686ce50ce5c6fff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22b452e755aa611d40f7c9317686ce50ce5c6fff/comments", "author": null, "committer": null, "parents": [{"sha": "4470c3998c2c00f7e6cff775cb2c6e332610ae8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4470c3998c2c00f7e6cff775cb2c6e332610ae8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4470c3998c2c00f7e6cff775cb2c6e332610ae8d"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "4632ffc58384dac8299407ada0420ddccc6c48c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22b452e755aa611d40f7c9317686ce50ce5c6fff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22b452e755aa611d40f7c9317686ce50ce5c6fff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22b452e755aa611d40f7c9317686ce50ce5c6fff", "patch": "@@ -1,3 +1,9 @@\n+Fri Jul  9 10:48:28 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n+\n+\t* loop.c (check_dbra_loop): When reversing a loop, delete all\n+\tREG_EQUAL notes referencing the reversed biv except those which are\n+\tfor a giv based on it.\n+\n Fri Jul  9 03:51:52 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* version.c: Drop \"gcc-\" prefix from version #."}, {"sha": "db50a1862e56a824b7ef3a76ce7d23c58933a307", "filename": "gcc/loop.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22b452e755aa611d40f7c9317686ce50ce5c6fff/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22b452e755aa611d40f7c9317686ce50ce5c6fff/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=22b452e755aa611d40f7c9317686ce50ce5c6fff", "patch": "@@ -8107,6 +8107,40 @@ check_dbra_loop (loop_end, insn_count, loop_start, loop_info)\n \t\t  bl->nonneg = 1;\n \t\t}\n \n+\t      /* No insn may reference both the reversed and another biv or it\n+\t\t will fail (see comment near the top of the loop reversal\n+\t\t code).\n+\t\t Earlier on, we have verified that the biv has no use except\n+\t\t counting, or it is the only biv in this function.\n+\t\t However, the code that computes no_use_except_counting does\n+\t\t not verify reg notes.  It's possible to have an insn that\n+\t\t references another biv, and has a REG_EQUAL note with an\n+\t\t expression based on the reversed biv.  To avoid this case,\n+\t\t remove all REG_EQUAL notes based on the reversed biv\n+\t\t here.  */\n+\t      for (p = loop_start; p != loop_end; p = NEXT_INSN (p))\n+\t\tif (GET_RTX_CLASS (GET_CODE (p)) == 'i')\n+\t\t  {\n+\t\t    rtx *pnote;\n+\t\t    rtx set = single_set (p);\n+\t\t    /* If this is a set of a GIV based on the reversed biv, any\n+\t\t       REG_EQUAL notes should still be correct.  */\n+\t\t    if (! set\n+\t\t\t|| GET_CODE (SET_DEST (set)) != REG\n+\t\t\t|| REGNO (SET_DEST (set)) >= reg_iv_type->num_elements\n+\t\t\t|| REG_IV_TYPE (REGNO (SET_DEST (set))) != GENERAL_INDUCT\n+\t\t\t|| REG_IV_INFO (REGNO (SET_DEST (set)))->src_reg != bl->biv->src_reg)\n+\t\t      for (pnote = &REG_NOTES (p); *pnote;)\n+\t\t\t{\n+\t\t\t  if (REG_NOTE_KIND (*pnote) == REG_EQUAL\n+\t\t\t      && reg_mentioned_p (regno_reg_rtx[bl->regno],\n+\t\t\t\t\t\t  XEXP (*pnote, 0)))\n+\t\t\t    *pnote = XEXP (*pnote, 1);\n+\t\t\t  else\n+\t\t\t    pnote = &XEXP (*pnote, 1);\n+\t\t\t}\n+\t\t  }\n+\n \t      /* Mark that this biv has been reversed.  Each giv which depends\n \t\t on this biv, and which is also live past the end of the loop\n \t\t will have to be fixed up.  */"}]}