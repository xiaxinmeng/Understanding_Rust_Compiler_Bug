{"sha": "85c143d002a31bebb675161315c8e62db240b636", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVjMTQzZDAwMmEzMWJlYmI2NzUxNjEzMTVjOGU2MmRiMjQwYjYzNg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-02-24T12:59:08Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-02-24T15:09:52Z"}, "message": "libstdc++: Add missing bits of P0896R4 pertaining to [back|front]_insert_iterator\n\nThis adds some missing pieces of the Ranges TS that make back_insert_iterator and\nfront_insert_iterator conform to the new output_iterator requirements.\n\nIt also fixes a bug in ranges::__copy_or_move and\nranges::__copy_or_move_backward in which we were inspecting the iter_value_t of\nthe output iterator, but output iterators such as back_insert_iterator and\nfront_insert_iterator whose value_type = void do not have an iter_value_t\naccording to [readable.traits] p4.  The entire __use_memmove condition should\nprobably be rewritten, but the simplest fix for now is to inspect the\niterator_traits of the output iterator instead.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/93884\n\t* include/bits/ranges_algobase.h (__copy_or_move,\n\t__copy_or_move_backward): Don't inspect the iter_value_t of the output\n\titerator, instead inspect its iterator_traits directly.\n\t* include/bits/stl_iterator.h (back_insert_iterator::container):\n\tConditionally initialize.\n\t(back_insert_iterator::difference_type): Conditionally define.\n\t(back_insert_iterator::back_insert_iterator): Conditionally define this\n\tdefault constructor.\n\t(front_insert_iterator::container): Conditionally initialize.\n\t(front_insert_iterator::difference_type): Conditionally define.\n\t(front_insert_iterator::front_insert_iterator): Conditionally define\n\tthis default constructor.\n\t* 24_iterators/back_insert_iterator/pr93884.cc: New test.\n\t* 24_iterators/front_insert_iterator/pr93884.cc: New test.", "tree": {"sha": "e3150cb35e03a6126eaf935bcf0020859f8f9eb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3150cb35e03a6126eaf935bcf0020859f8f9eb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85c143d002a31bebb675161315c8e62db240b636", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85c143d002a31bebb675161315c8e62db240b636", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85c143d002a31bebb675161315c8e62db240b636", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85c143d002a31bebb675161315c8e62db240b636/comments", "author": null, "committer": null, "parents": [{"sha": "c5eab4ed45e9762dfb8a58d2b5672d358467ad89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5eab4ed45e9762dfb8a58d2b5672d358467ad89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5eab4ed45e9762dfb8a58d2b5672d358467ad89"}], "stats": {"total": 130, "additions": 128, "deletions": 2}, "files": [{"sha": "5da5c22775cfcf284ee14d1af744b5e38d221745", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c143d002a31bebb675161315c8e62db240b636/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c143d002a31bebb675161315c8e62db240b636/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=85c143d002a31bebb675161315c8e62db240b636", "patch": "@@ -1,5 +1,21 @@\n 2020-02-24  Patrick Palka  <ppalka@redhat.com>\n \n+\tPR libstdc++/93884\n+\t* include/bits/ranges_algobase.h (__copy_or_move,\n+\t__copy_or_move_backward): Don't inspect the iter_value_t of the output\n+\titerator, instead inspect its iterator_traits directly.\n+\t* include/bits/stl_iterator.h (back_insert_iterator::container):\n+\tConditionally initialize.\n+\t(back_insert_iterator::difference_type): Conditionally define.\n+\t(back_insert_iterator::back_insert_iterator): Conditionally define this\n+\tdefault constructor.\n+\t(front_insert_iterator::container): Conditionally initialize.\n+\t(front_insert_iterator::difference_type): Conditionally define.\n+\t(front_insert_iterator::front_insert_iterator): Conditionally define\n+\tthis default constructor.\n+\t* 24_iterators/back_insert_iterator/pr93884.cc: New test.\n+\t* 24_iterators/front_insert_iterator/pr93884.cc: New test.\n+\n \tP0769R2 Add shift to <algorithm>\n \t* include/bits/ranges_algo.h (shift_left, shift_right): New.\n \t* testsuite/25_algorithms/shift_left/1.cc: New test."}, {"sha": "73f0205ba7f9b8f225cfb091049e4aa39b07bf8e", "filename": "libstdc++-v3/include/bits/ranges_algobase.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c143d002a31bebb675161315c8e62db240b636/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c143d002a31bebb675161315c8e62db240b636/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h?ref=85c143d002a31bebb675161315c8e62db240b636", "patch": "@@ -249,7 +249,7 @@ namespace ranges\n       else if constexpr (sized_sentinel_for<_Sent, _Iter>)\n \t{\n \t  using _ValueTypeI = iter_value_t<_Iter>;\n-\t  using _ValueTypeO = iter_value_t<_Out>;\n+\t  using _ValueTypeO = typename iterator_traits<_Out>::value_type;\n \t  constexpr bool __use_memmove\n \t    = (is_trivially_copyable_v<_ValueTypeI>\n \t       && is_same_v<_ValueTypeI, _ValueTypeO>\n@@ -386,7 +386,7 @@ namespace ranges\n       else if constexpr (sized_sentinel_for<_Sent, _Iter>)\n \t{\n \t  using _ValueTypeI = iter_value_t<_Iter>;\n-\t  using _ValueTypeO = iter_value_t<_Out>;\n+\t  using _ValueTypeO = typename iterator_traits<_Out>::value_type;\n \t  constexpr bool __use_memmove\n \t    = (is_trivially_copyable_v<_ValueTypeI>\n \t       && is_same_v<_ValueTypeI, _ValueTypeO>"}, {"sha": "caaa8c483b8b23d9e3772b6b702422a47e3d690c", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c143d002a31bebb675161315c8e62db240b636/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c143d002a31bebb675161315c8e62db240b636/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=85c143d002a31bebb675161315c8e62db240b636", "patch": "@@ -496,11 +496,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public iterator<output_iterator_tag, void, void, void, void>\n     {\n     protected:\n+#if __cplusplus <= 201703L\n       _Container* container;\n+#else\n+      _Container* container = nullptr;\n+#endif\n \n     public:\n       /// A nested typedef for the type of whatever container you used.\n       typedef _Container          container_type;\n+#if __cplusplus > 201703L\n+      using difference_type = ptrdiff_t;\n+#endif\n+\n+#if __cplusplus > 201703L\n+      constexpr back_insert_iterator() noexcept = default;\n+#endif\n \n       /// The only way to create this %iterator is with a container.\n       explicit\n@@ -588,11 +599,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public iterator<output_iterator_tag, void, void, void, void>\n     {\n     protected:\n+#if __cplusplus <= 201703L\n       _Container* container;\n+#else\n+      _Container* container = nullptr;\n+#endif\n \n     public:\n       /// A nested typedef for the type of whatever container you used.\n       typedef _Container          container_type;\n+#if __cplusplus > 201703L\n+      using difference_type = ptrdiff_t;\n+#endif\n+\n+#if __cplusplus > 201703L\n+      constexpr front_insert_iterator() noexcept = default;\n+#endif\n \n       /// The only way to create this %iterator is with a container.\n       explicit front_insert_iterator(_Container& __x)"}, {"sha": "5a6287ddd404dd652b5a57278a2c5cffa6a6ce99", "filename": "libstdc++-v3/testsuite/24_iterators/back_insert_iterator/pr93884.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c143d002a31bebb675161315c8e62db240b636/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator%2Fpr93884.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c143d002a31bebb675161315c8e62db240b636/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator%2Fpr93884.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator%2Fpr93884.cc?ref=85c143d002a31bebb675161315c8e62db240b636", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <iterator>\n+#include <algorithm>\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+namespace ranges = std::ranges;\n+namespace views = std::views;\n+\n+void\n+test01()\n+{\n+  auto v = std::vector<int>{};\n+  auto i = views::iota(0, 10);\n+  auto o = std::back_inserter(v);\n+  static_assert(std::output_iterator<decltype(o), int>);\n+  ranges::copy(i, o);\n+  VERIFY( ranges::equal(v, i) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "eaf4e9a187f32f441dfa81b5c9ebf52d189e65f9", "filename": "libstdc++-v3/testsuite/24_iterators/front_insert_iterator/pr93884.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85c143d002a31bebb675161315c8e62db240b636/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator%2Fpr93884.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85c143d002a31bebb675161315c8e62db240b636/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator%2Fpr93884.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator%2Fpr93884.cc?ref=85c143d002a31bebb675161315c8e62db240b636", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <iterator>\n+#include <algorithm>\n+#include <deque>\n+#include <testsuite_hooks.h>\n+\n+namespace ranges = std::ranges;\n+namespace views = std::views;\n+\n+void\n+test01()\n+{\n+  auto v = std::deque<int>{};\n+  auto i = views::iota(0, 10);\n+  auto o = std::front_inserter(v);\n+  static_assert(std::output_iterator<decltype(o), int>);\n+  ranges::copy(i, o);\n+  VERIFY( ranges::equal(v | views::reverse, i) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}