{"sha": "40d05429503044c2cd3d10317ae1cff1b06d21ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBkMDU0Mjk1MDMwNDRjMmNkM2QxMDMxN2FlMWNmZjFiMDZkMjFjZQ==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@apple.com", "date": "2004-11-01T19:01:15Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2004-11-01T19:01:15Z"}, "message": "inclhack.def (stdio_va_list): Break out clients from here...\n\n        * inclhack.def (stdio_va_list): Break out clients from here...\n        (stdio_va_list_clients): ...to here.  Also, don't fix if stdarg.h is\n        included or ifdef va_start.\n\nFrom-SVN: r89954", "tree": {"sha": "7c85ef93d3c444f71719615c6b86576ffd612241", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c85ef93d3c444f71719615c6b86576ffd612241"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40d05429503044c2cd3d10317ae1cff1b06d21ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40d05429503044c2cd3d10317ae1cff1b06d21ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40d05429503044c2cd3d10317ae1cff1b06d21ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40d05429503044c2cd3d10317ae1cff1b06d21ce/comments", "author": null, "committer": null, "parents": [{"sha": "9dc62c00e4474defce0b20cf17188f094f06f118", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dc62c00e4474defce0b20cf17188f094f06f118", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dc62c00e4474defce0b20cf17188f094f06f118"}], "stats": {"total": 117, "additions": 111, "deletions": 6}, "files": [{"sha": "5a6ab70e50a6af92d0ef6862245b2367dfdccf77", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40d05429503044c2cd3d10317ae1cff1b06d21ce/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40d05429503044c2cd3d10317ae1cff1b06d21ce/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=40d05429503044c2cd3d10317ae1cff1b06d21ce", "patch": "@@ -1,3 +1,10 @@\n+2004-11-01  Mike Stump  <mrs@apple.com>\n+\n+\t* inclhack.def (stdio_va_list): Break out clients from here...\n+\t(stdio_va_list_clients): ...to here.  Also, don't fix if stdarg.h is\n+        included or ifdef va_start.\n+\t* fixincl.x: Regenerate.\n+\n 2004-10-28  Mike Stump  <mrs@apple.com>\n \n \t* inclhack.def (void_null): Avoid changing NULL on C++ friendly"}, {"sha": "9e6c3868e6ccc1f7fa9ada959c06a68f2e32fd2f", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 62, "deletions": 6, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40d05429503044c2cd3d10317ae1cff1b06d21ce/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40d05429503044c2cd3d10317ae1cff1b06d21ce/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=40d05429503044c2cd3d10317ae1cff1b06d21ce", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Friday October 29, 2004 at 02:14:23 PM PDT\n+ * It has been AutoGen-ed  Friday October 29, 2004 at 02:26:49 PM PDT\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT CVS-MERGE THIS FILE, EITHER Fri Oct 29 14:14:23 PDT 2004\n+/* DO NOT CVS-MERGE THIS FILE, EITHER Fri Oct 29 14:26:49 PDT 2004\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 180 fixup descriptions.\n+ * This file contains 181 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -4916,7 +4916,7 @@ tSCC zStdio_Va_ListName[] =\n  *  File name selection pattern\n  */\n tSCC zStdio_Va_ListList[] =\n-  \"|stdio.h|internal/stdio_core.h|internal/wchar_core.h|com_err.h|cps.h|curses.h|krb5.h|lc_core.h|pfmt.h|wchar.h|curses_colr/curses.h|\";\n+  \"|stdio.h|internal/stdio_core.h|internal/wchar_core.h|\";\n /*\n  *  Machine/OS name selection pattern\n  */\n@@ -4952,6 +4952,56 @@ s@VA_LIST@DUMMY_VA_LIST@\\n\\\n s@_Va_LIST@_VA_LIST@\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Stdio_Va_List_Clients fix\n+ */\n+tSCC zStdio_Va_List_ClientsName[] =\n+     \"stdio_va_list_clients\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zStdio_Va_List_ClientsList[] =\n+  \"|com_err.h|cps.h|curses.h|krb5.h|lc_core.h|pfmt.h|wchar.h|curses_colr/curses.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzStdio_Va_List_ClientsMachs (const char**)NULL\n+\n+/*\n+ *  content bypass pattern - skip fix if pattern found\n+ */\n+tSCC zStdio_Va_List_ClientsBypass0[] =\n+       \"__gnuc_va_list|_BSD_VA_LIST_|__DJ_va_list|_G_va_list\";\n+tSCC zStdio_Va_List_ClientsBypass1[] =\n+       \"include <stdarg\\\\.h>|#ifdef va_start\";\n+\n+#define    STDIO_VA_LIST_CLIENTS_TEST_CT  2\n+static tTestDesc aStdio_Va_List_ClientsTests[] = {\n+  { TT_NEGREP,   zStdio_Va_List_ClientsBypass0, (regex_t*)NULL },\n+  { TT_NEGREP,   zStdio_Va_List_ClientsBypass1, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Stdio_Va_List_Clients\n+ */\n+static const char* apzStdio_Va_List_ClientsPatch[] = { \"sed\",\n+    \"-e\", \"s@[ \\t]va_list\\\\([ \\t)]\\\\)@ __gnuc_va_list\\\\1@\\n\\\n+s@(va_list)&@(__gnuc_va_list)\\\\&@\\n\\\n+s@ _VA_LIST_));@ __gnuc_va_list));@\\n\\\n+s@ __VA_LIST__));@ __gnuc_va_list));@\\n\\\n+s@ va_list@ __not_va_list__@\\n\\\n+s@\\\\*va_list@*__not_va_list__@\\n\\\n+s@ __va_list)@ __gnuc_va_list)@\\n\\\n+s@typedef[ \\t]\\\\(.*\\\\)[ \\t]va_list[ \\t]*;@typedef \\\\1 __not_va_list__;@\\n\\\n+s@typedef[ \\t]*__va_list__@typedef __gnuc_va_list@\\n\\\n+s@GNUC_VA_LIST@GNUC_Va_LIST@\\n\\\n+s@_VA_LIST_DEFINED@_Va_LIST_DEFINED@\\n\\\n+s@_NEED___VA_LIST@_NEED___Va_LIST@\\n\\\n+s@VA_LIST@DUMMY_VA_LIST@\\n\\\n+s@_Va_LIST@_VA_LIST@\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Strict_Ansi_Not fix\n@@ -7146,9 +7196,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          204\n+#define REGEX_COUNT          206\n #define MACH_LIST_SIZE_LIMIT 261\n-#define FIX_COUNT            180\n+#define FIX_COUNT            181\n \n /*\n  *  Enumerate the fixes\n@@ -7277,6 +7327,7 @@ typedef enum {\n     STATSSWTCH_FIXIDX,\n     STDIO_STDARG_H_FIXIDX,\n     STDIO_VA_LIST_FIXIDX,\n+    STDIO_VA_LIST_CLIENTS_FIXIDX,\n     STRICT_ANSI_NOT_FIXIDX,\n     STRICT_ANSI_NOT_CTD_FIXIDX,\n     STRICT_ANSI_ONLY_FIXIDX,\n@@ -7952,6 +8003,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      STDIO_VA_LIST_TEST_CT, FD_MACH_ONLY,\n      aStdio_Va_ListTests,   apzStdio_Va_ListPatch, 0 },\n \n+  {  zStdio_Va_List_ClientsName,    zStdio_Va_List_ClientsList,\n+     apzStdio_Va_List_ClientsMachs,\n+     STDIO_VA_LIST_CLIENTS_TEST_CT, FD_MACH_ONLY,\n+     aStdio_Va_List_ClientsTests,   apzStdio_Va_List_ClientsPatch, 0 },\n+\n   {  zStrict_Ansi_NotName,    zStrict_Ansi_NotList,\n      apzStrict_Ansi_NotMachs,\n      STRICT_ANSI_NOT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "568600cc652b4e50301b8a90f43eb28c49963cff", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40d05429503044c2cd3d10317ae1cff1b06d21ce/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40d05429503044c2cd3d10317ae1cff1b06d21ce/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=40d05429503044c2cd3d10317ae1cff1b06d21ce", "patch": "@@ -2706,6 +2706,45 @@ fix = {\n     files    = stdio.h;\n     files    = internal/stdio_core.h;\n     files    = internal/wchar_core.h;\n+    bypass   = '__gnuc_va_list|_BSD_VA_LIST_|__DJ_va_list|_G_va_list';\n+\n+    /*\n+     * Use __gnuc_va_list in arg types in place of va_list.\n+     * On 386BSD use __gnuc_va_list instead of _VA_LIST_.  On Tru64 UNIX V5.1A\n+     * use __gnuc_va_list instead of __VA_LIST__.  We're hoping the\n+     * trailing parentheses and semicolon save all other systems from this.\n+     * Define __not_va_list__ (something harmless and unused)\n+     * instead of va_list.\n+     * Don't claim to have defined va_list.\n+     */\n+    sed = \"s@[ \\t]va_list\\\\([ \\t)]\\\\)@ __gnuc_va_list\\\\1@\\n\"\n+\t  \"s@(va_list)&@(__gnuc_va_list)\\\\&@\\n\"\n+          \"s@ _VA_LIST_));@ __gnuc_va_list));@\\n\"\n+          \"s@ __VA_LIST__));@ __gnuc_va_list));@\\n\"\n+          \"s@ va_list@ __not_va_list__@\\n\"\n+          \"s@\\\\*va_list@*__not_va_list__@\\n\"\n+          \"s@ __va_list)@ __gnuc_va_list)@\\n\"\n+          \"s@typedef[ \\t]\\\\(.*\\\\)[ \\t]va_list[ \\t]*;\"\n+           \"@typedef \\\\1 __not_va_list__;@\\n\"\n+\t  \"s@typedef[ \\t]*__va_list__@typedef __gnuc_va_list@\\n\"\n+          \"s@GNUC_VA_LIST@GNUC_Va_LIST@\\n\"\n+          \"s@_VA_LIST_DEFINED@_Va_LIST_DEFINED@\\n\"\n+          \"s@_NEED___VA_LIST@_NEED___Va_LIST@\\n\"\n+          \"s@VA_LIST@DUMMY_VA_LIST@\\n\"\n+          \"s@_Va_LIST@_VA_LIST@\";\n+    test_text = \"extern void mumble( va_list);\";\n+};\n+\n+\n+/*\n+ *  Fix headers that use va_list from stdio.h to use the updated\n+ *  va_list from the stdio_va_list change.  Note _BSD_VA_LIST_ is\n+ *  dealt with elsewhere.  The presence of __gnuc_va_list,\n+ *  __DJ_va_list, or _G_va_list is taken to indicate that the header\n+ *  knows what it's doing.\n+ */\n+fix = {\n+    hackname = stdio_va_list_clients;\n     files    = com_err.h;\n     files    = cps.h;\n     files    = curses.h;\n@@ -2715,6 +2754,9 @@ fix = {\n     files    = wchar.h;\n     files    = curses_colr/curses.h;\n     bypass   = '__gnuc_va_list|_BSD_VA_LIST_|__DJ_va_list|_G_va_list';\n+    /* Don't fix, if we use va_list from stdarg.h, or if the use is\n+       otherwise protected.  */\n+    bypass   = 'include <stdarg\\.h>|#ifdef va_start';\n \n     /*\n      * Use __gnuc_va_list in arg types in place of va_list."}]}