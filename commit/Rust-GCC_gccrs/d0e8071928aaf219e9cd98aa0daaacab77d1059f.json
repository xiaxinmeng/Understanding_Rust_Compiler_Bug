{"sha": "d0e8071928aaf219e9cd98aa0daaacab77d1059f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBlODA3MTkyOGFhZjIxOWU5Y2Q5OGFhMGRhYWFjYWI3N2QxMDU5Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-08-07T18:36:15Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-08-07T18:36:15Z"}, "message": "jump.c (onlyjump_p): New function.\n\n        * jump.c (onlyjump_p): New function.\n        * rtl.h: Declare it.\n        * flow.c (delete_unreachable_blocks): Use onlyjump_p instead\n        of condjump_p in calling tidy_fallthru_edge and merge_blocks.\n\nFrom-SVN: r28584", "tree": {"sha": "b557a9b19a9ed1f213210bf2c9904a6e1079c631", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b557a9b19a9ed1f213210bf2c9904a6e1079c631"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0e8071928aaf219e9cd98aa0daaacab77d1059f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e8071928aaf219e9cd98aa0daaacab77d1059f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0e8071928aaf219e9cd98aa0daaacab77d1059f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e8071928aaf219e9cd98aa0daaacab77d1059f/comments", "author": null, "committer": null, "parents": [{"sha": "021d1677821665d83eee8026b244465087169435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/021d1677821665d83eee8026b244465087169435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/021d1677821665d83eee8026b244465087169435"}], "stats": {"total": 47, "additions": 37, "deletions": 10}, "files": [{"sha": "2a6b9b6d3a254d1eb889b1b9c0c87d49ef978b1e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e8071928aaf219e9cd98aa0daaacab77d1059f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e8071928aaf219e9cd98aa0daaacab77d1059f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0e8071928aaf219e9cd98aa0daaacab77d1059f", "patch": "@@ -1,3 +1,10 @@\n+Sat Aug  7 19:32:16 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* jump.c (onlyjump_p): New function.\n+\t* rtl.h: Declare it.\n+\t* flow.c (delete_unreachable_blocks): Use onlyjump_p instead\n+\tof condjump_p in calling tidy_fallthru_edge and merge_blocks.\n+\n Sat Aug  7 17:09:36 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* global.c (build_insn_chain): Use EXECUTE_IF_SET_IN_REG_SET"}, {"sha": "0fbe5517a597f36001244d532163daa2b1b620af", "filename": "gcc/flow.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e8071928aaf219e9cd98aa0daaacab77d1059f/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e8071928aaf219e9cd98aa0daaacab77d1059f/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=d0e8071928aaf219e9cd98aa0daaacab77d1059f", "patch": "@@ -1564,11 +1564,9 @@ delete_unreachable_blocks ()\n       if ((s = b->succ) != NULL\n \t  && s->succ_next == NULL\n \t  && s->dest == c\n-\t  /* If the last insn is not a normal conditional jump\n-\t     (or an unconditional jump), then we can not tidy the\n-\t     fallthru edge because we can not delete the jump.  */\n-\t  && GET_CODE (b->end) == JUMP_INSN\n-\t  && condjump_p (b->end))\n+\t  /* If the jump insn has side effects, we can't tidy the edge.  */\n+\t  && (GET_CODE (b->end) != JUMP_INSN\n+\t      || onlyjump_p (b->end)))\n \ttidy_fallthru_edge (s, b, c);\n     }\n \n@@ -1587,11 +1585,9 @@ delete_unreachable_blocks ()\n \t     && (s->flags & EDGE_EH) == 0\n \t     && (c = s->dest) != EXIT_BLOCK_PTR\n \t     && c->pred->pred_next == NULL\n-\t     /* If the last insn is not a normal conditional jump\n-\t\t(or an unconditional jump), then we can not merge\n-\t\tthe blocks because we can not delete the jump.  */\n-\t     && GET_CODE (b->end) == JUMP_INSN\n-\t     && condjump_p (b->end)\n+\t     /* If the jump insn has side effects, we can't kill the edge.  */\n+\t     && (GET_CODE (b->end) != JUMP_INSN\n+\t\t || onlyjump_p (b->end))\n \t     && merge_blocks (s, b, c))\n \tcontinue;\n "}, {"sha": "71811bb9f8b6217f5c09db963cca674d739cfbfc", "filename": "gcc/jump.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e8071928aaf219e9cd98aa0daaacab77d1059f/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e8071928aaf219e9cd98aa0daaacab77d1059f/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=d0e8071928aaf219e9cd98aa0daaacab77d1059f", "patch": "@@ -3528,6 +3528,29 @@ returnjump_p (insn)\n   return for_each_rtx (&PATTERN (insn), returnjump_p_1, NULL);\n }\n \n+/* Return true if INSN is a jump that only transfers control and\n+   nothing more.  */\n+\n+int\n+onlyjump_p (insn)\n+     rtx insn;\n+{\n+  rtx set;\n+\n+  if (GET_CODE (insn) != JUMP_INSN)\n+    return 0;\n+\n+  set = single_set (insn);\n+  if (set == NULL)\n+    return 0;\n+  if (GET_CODE (SET_DEST (set)) != PC)\n+    return 0;\n+  if (side_effects_p (SET_SRC (set)))\n+    return 0;\n+\n+  return 1;\n+}\n+\n #ifdef HAVE_cc0\n \n /* Return 1 if X is an RTX that does nothing but set the condition codes"}, {"sha": "a0bd720e2fbdd3b1cc3143fc2d97c7e399b563ba", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e8071928aaf219e9cd98aa0daaacab77d1059f/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e8071928aaf219e9cd98aa0daaacab77d1059f/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=d0e8071928aaf219e9cd98aa0daaacab77d1059f", "patch": "@@ -1352,6 +1352,7 @@ extern int condjump_p\t\t\tPROTO ((rtx));\n extern rtx condjump_label\t\tPROTO ((rtx));\n extern int simplejump_p\t\t\tPROTO ((rtx));\n extern int returnjump_p\t\t\tPROTO ((rtx));\n+extern int onlyjump_p\t\t\tPROTO ((rtx));\n extern int sets_cc0_p\t\t\tPROTO ((rtx));\n extern int invert_jump\t\t\tPROTO ((rtx, rtx));\n extern int rtx_renumbered_equal_p\tPROTO ((rtx, rtx));"}]}