{"sha": "2f187e9893916796992b60b278e743ec865f7418", "node_id": "C_kwDOANBUbNoAKDJmMTg3ZTk4OTM5MTY3OTY5OTJiNjBiMjc4ZTc0M2VjODY1Zjc0MTg", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-08T09:34:26Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-08T09:34:26Z"}, "message": "range-op-float: Fix up frange_arithmetic [PR107967]\n\nThe addition of PLUS/MINUS/MULT/RDIV_EXPR frange handlers causes\nmiscompilation of some of the libm routines, resulting in lots of\nglibc test failures.  A part of them is purely PR107608 fold-overflow-1.c\netc. issues, say when the code does\n  return -0.5 / 0.0;\nand expects division by zero to be emitted, but we propagate -Inf\nand avoid the operation.\nBut there are also various tests where we end up with different computed\nvalue from the expected ones.  All those cases are like:\n is:          inf   inf\n should be:   1.18973149535723176502e+4932   0xf.fffffffffffffff0p+16380\n is:          inf   inf\n should be:   1.18973149535723176508575932662800701e+4932   0x1.ffffffffffffffffffffffffffffp+16383\n is:          inf   inf\n should be:   1.7976931348623157e+308   0x1.fffffffffffffp+1023\n is:          inf   inf\n should be:   3.40282346e+38   0x1.fffffep+127\nand the corresponding source looks like:\nstatic const double huge = 1.0e+300;\ndouble whatever (...) {\n...\n  return huge * huge;\n...\n}\nwhich for rounding to nearest or +inf should and does return +inf, but\nfor rounding to -inf or 0 should instead return nextafter (inf, -inf);\nThe rules IEEE754 has are that operations on +-Inf operands are exact\nand produce +-Inf (except for the invalid ones that produce NaN) regardless\nof rounding mode, while overflows:\n\"a) roundTiesToEven and roundTiesToAway carry all overflows to \u221e with the\nsign of the intermediate result.\nb) roundTowardZero carries all overflows to the format\u2019s largest finite\nnumber with the sign of the intermediate result.\nc) roundTowardNegative carries positive overflows to the format\u2019s largest\nfinite number, and carries negative overflows to \u2212\u221e.\nd) roundTowardPositive carries negative overflows to the format\u2019s most\nnegative finite number, and carries positive overflows to +\u221e.\"\n\nThe behavior around overflows to -Inf or nextafter (-inf, inf) was actually\nhandled correctly, we'd construct [-INF, -MAX] ranges in those cases\nbecause !real_less (&value, &result) in that case - value is finite\nbut larger in magnitude than what the format can represent (but GCC\ninternal's format can), while result is -INF in that case.\nBut for the overflows to +Inf or nextafter (inf, -inf) was handled\nincorrectly, it tested real_less (&result, &value) rather than\n!real_less (&result, &value), the former test is true when already the\nrounding value -> result rounded down and in that case we shouldn't\nround again, we should round down when it didn't.\n\nSo, in theory this could be fixed just by adding one ! character,\n-  if ((mode_composite || (real_isneg (&inf) ? real_less (&result, &value)\n+  if ((mode_composite || (real_isneg (&inf) ? !real_less (&result, &value)\n                          : !real_less (&value, &result)))\nbut the following patch goes further.  The distance between\nnextafter (inf, -inf) and inf is large (infinite) and expressions like\n1.0e+300 * 1.0e+300 always produce +inf in round to nearest mode by far,\nso I think having low bound of nextafter (inf, -inf) in that case is\nunnecessary.  But if it isn't multiplication but say addition and we are\ninexact and very close to the boundary between rounding to nearest\nmaximum representable vs. rounding to nearest +inf, still using [MAX, +INF]\netc. ranges seems safer because we don't know exactly what we lost in the\ninexact computation.\n\nThe following patch implements that.\n\n2022-12-08  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/107967\n\t* range-op-float.cc (frange_arithmetic): Fix a thinko - if\n\tinf is negative, use nextafter if !real_less (&result, &value)\n\trather than if real_less (&result, &value).  If result is +-INF\n\twhile value is finite and -fno-rounding-math, don't do rounding\n\tif !inexact or if result is significantly above max representable\n\tvalue or below min representable value.\n\n\t* gcc.dg/pr107967-1.c: New test.\n\t* gcc.dg/pr107967-2.c: New test.\n\t* gcc.dg/pr107967-3.c: New test.", "tree": {"sha": "0dd320e996a20faed7d1fe5001f218b40acbd29a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dd320e996a20faed7d1fe5001f218b40acbd29a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f187e9893916796992b60b278e743ec865f7418", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f187e9893916796992b60b278e743ec865f7418", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f187e9893916796992b60b278e743ec865f7418", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f187e9893916796992b60b278e743ec865f7418/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab9fc70149d217a4631822d3db956f45b7c43ecb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab9fc70149d217a4631822d3db956f45b7c43ecb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab9fc70149d217a4631822d3db956f45b7c43ecb"}], "stats": {"total": 162, "additions": 159, "deletions": 3}, "files": [{"sha": "2c6026d48fad2a90ab9a8dc10a51e8e50dd89530", "filename": "gcc/range-op-float.cc", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f187e9893916796992b60b278e743ec865f7418/gcc%2Frange-op-float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f187e9893916796992b60b278e743ec865f7418/gcc%2Frange-op-float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op-float.cc?ref=2f187e9893916796992b60b278e743ec865f7418", "patch": "@@ -287,9 +287,42 @@ frange_arithmetic (enum tree_code code, tree type,\n \n   // Be extra careful if there may be discrepancies between the\n   // compile and runtime results.\n-  if ((mode_composite || (real_isneg (&inf) ? real_less (&result, &value)\n-\t\t\t  : !real_less (&value, &result)))\n-      && (inexact || !real_identical (&result, &value)))\n+  bool round = false;\n+  if (mode_composite)\n+    round = true;\n+  else\n+    {\n+      bool low = real_isneg (&inf);\n+      round = (low ? !real_less (&result, &value)\n+\t\t   : !real_less (&value, &result));\n+      if (real_isinf (&result, !low)\n+\t  && !real_isinf (&value)\n+\t  && !flag_rounding_math)\n+\t{\n+\t  // Use just [+INF, +INF] rather than [MAX, +INF]\n+\t  // even if value is larger than MAX and rounds to\n+\t  // nearest to +INF.  Similarly just [-INF, -INF]\n+\t  // rather than [-INF, +MAX] even if value is smaller\n+\t  // than -MAX and rounds to nearest to -INF.\n+\t  // Unless INEXACT is true, in that case we need some\n+\t  // extra buffer.\n+\t  if (!inexact)\n+\t    round = false;\n+\t  else\n+\t    {\n+\t      REAL_VALUE_TYPE tmp = result, tmp2;\n+\t      frange_nextafter (mode, tmp, inf);\n+\t      // TMP is at this point the maximum representable\n+\t      // number.\n+\t      real_arithmetic (&tmp2, MINUS_EXPR, &value, &tmp);\n+\t      if (real_isneg (&tmp2) != low\n+\t\t  && (REAL_EXP (&tmp2) - REAL_EXP (&tmp)\n+\t\t      >= 2 - REAL_MODE_FORMAT (mode)->p))\n+\t\tround = false;\n+\t    }\n+\t}\n+    }\n+  if (round && (inexact || !real_identical (&result, &value)))\n     {\n       if (mode_composite)\n \t{"}, {"sha": "d099231024c8e890b61d5097e8e58c4344b299c2", "filename": "gcc/testsuite/gcc.dg/pr107967-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f187e9893916796992b60b278e743ec865f7418/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107967-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f187e9893916796992b60b278e743ec865f7418/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107967-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107967-1.c?ref=2f187e9893916796992b60b278e743ec865f7418", "patch": "@@ -0,0 +1,35 @@\n+/* PR tree-optimization/107967 */\n+/* { dg-do compile { target float64 } } */\n+/* { dg-options \"-O2 -frounding-math -fno-trapping-math -fdump-tree-optimized\" } */\n+/* { dg-add-options float64 } */\n+/* { dg-final { scan-tree-dump-not \"return\\[ \\t]\\*-?Inf;\" \"optimized\" } } */\n+\n+_Float64\n+foo (void)\n+{\n+  const _Float64 huge = 1.0e+300f64;\n+  return huge * huge;\n+}\n+\n+_Float64\n+bar (void)\n+{\n+  const _Float64 huge = 1.0e+300f64;\n+  return huge * -huge;\n+}\n+\n+_Float64\n+baz (void)\n+{\n+  const _Float64 a = 0x1.fffffffffffffp+1023f64;\n+  const _Float64 b = 0x1.fffffffffffffp+970f64;\n+  return a + b;\n+}\n+\n+_Float64\n+qux (void)\n+{\n+  const _Float64 a = 0x1.fffffffffffffp+1023f64;\n+  const _Float64 b = 0x1.fffffffffffffp+969f64;\n+  return a + b;\n+}"}, {"sha": "554000cbac05e8bb4bc519a350c4effb59c2a1ad", "filename": "gcc/testsuite/gcc.dg/pr107967-2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f187e9893916796992b60b278e743ec865f7418/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107967-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f187e9893916796992b60b278e743ec865f7418/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107967-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107967-2.c?ref=2f187e9893916796992b60b278e743ec865f7418", "patch": "@@ -0,0 +1,35 @@\n+/* PR tree-optimization/107967 */\n+/* { dg-do compile { target float64 } } */\n+/* { dg-options \"-O2 -fno-rounding-math -fno-trapping-math -fdump-tree-optimized\" } */\n+/* { dg-add-options float64 } */\n+/* { dg-final { scan-tree-dump-times \"return\\[ \\t]\\*-?Inf;\" 3 \"optimized\" } } */\n+\n+_Float64\n+foo (void)\n+{\n+  const _Float64 huge = 1.0e+300f64;\n+  return huge * huge;\n+}\n+\n+_Float64\n+bar (void)\n+{\n+  const _Float64 huge = 1.0e+300f64;\n+  return huge * -huge;\n+}\n+\n+_Float64\n+baz (void)\n+{\n+  const _Float64 a = 0x1.fffffffffffffp+1023f64;\n+  const _Float64 b = 0x1.fffffffffffffp+970f64;\n+  return a + b;\n+}\n+\n+_Float64\n+qux (void)\n+{\n+  const _Float64 a = 0x1.fffffffffffffp+1023f64;\n+  const _Float64 b = 0x1.fffffffffffffp+969f64;\n+  return a + b;\n+}"}, {"sha": "9b36a1f7853a50678b401a45d947f77c78a33b3d", "filename": "gcc/testsuite/gcc.dg/pr107967-3.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f187e9893916796992b60b278e743ec865f7418/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107967-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f187e9893916796992b60b278e743ec865f7418/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107967-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107967-3.c?ref=2f187e9893916796992b60b278e743ec865f7418", "patch": "@@ -0,0 +1,53 @@\n+/* PR tree-optimization/107967 */\n+/* { dg-do compile { target float64 } } */\n+/* { dg-options \"-O2 -fno-rounding-math -fno-trapping-math -fdump-tree-optimized\" } */\n+/* { dg-add-options float64 } */\n+/* { dg-final { scan-tree-dump-times \"return\\[ \\t]\\*-?Inf;\" 3 \"optimized\" } } */\n+\n+_Float64\n+foo (_Float64 x)\n+{\n+  if (x >= 1.0e+300f64)\n+    ;\n+  else\n+    __builtin_unreachable ();\n+  return x * x;\n+}\n+\n+_Float64\n+bar (_Float64 x)\n+{\n+  if (x >= 1.0e+300f64)\n+    ;\n+  else\n+    __builtin_unreachable ();\n+  return x * -x;\n+}\n+\n+_Float64\n+baz (_Float64 a, _Float64 b)\n+{\n+  if (a >= 0x1.fffffffffffffp+1023f64)\n+    ;\n+  else\n+    __builtin_unreachable ();\n+  if (b >= 0x1.p+972f64)\n+    ;\n+  else\n+    __builtin_unreachable ();\n+  return a + b;\n+}\n+\n+_Float64\n+qux (_Float64 a, _Float64 b)\n+{\n+  if (a >= 0x1.fffffffffffffp+1023f64)\n+    ;\n+  else\n+    __builtin_unreachable ();\n+  if (b >= 0x1.fffffffffffffp+969f64)\n+    ;\n+  else\n+    __builtin_unreachable ();\n+  return a + b;\n+}"}]}