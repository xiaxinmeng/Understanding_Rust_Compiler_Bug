{"sha": "a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c", "node_id": "C_kwDOANBUbNoAKGExYWZkYzZlMmFhNzdkMGE5OTBlMWE4MmFjZWVmZmM4MzdiN2U1MGM", "commit": {"author": {"name": "Gaius Mulley", "email": "gaiusmod2@gmail.com", "date": "2023-04-13T16:02:48Z"}, "committer": {"name": "Gaius Mulley", "email": "gaiusmod2@gmail.com", "date": "2023-04-13T16:02:48Z"}, "message": "PR modula2/109496 Fix constant char parameter passing to an array of char\n\nThis patch fixes PR modula2/109496 and PR modula2/109497.  The fix for\nPR modula2/109496 promotes a char constant to a string.  The PR\nmodula2/109497 allows for constant chars to be added to form a string.\nThe fixes for both PR's occur in M2GenGCC.mod and M2GCCDeclare.mod\nafter the resolving of constant declarations.\n\ngcc/m2/ChangeLog:\n\n\t* gm2-compiler/M2ALU.def (PopChar): New procedure function.\n\t* gm2-compiler/M2ALU.mod (PopChar): New procedure function.\n\t* gm2-compiler/M2GCCDeclare.mod (PromoteToString): Detect\n\ta single constant char and build a C string.\n\t* gm2-compiler/M2GenGCC.mod (IsConstStr): New procedure\n\tfunction.\n\t(GetStr): New procedure function.\n\t(FoldAdd): Use IsConstStr.\n\t* gm2-compiler/M2Quads.mod: Formatting changes.\n\t* gm2-gcc/m2expr.cc (m2expr_GetCstInteger): New function.\n\t* gm2-gcc/m2expr.def (GetCstInteger): New procedure function.\n\t* gm2-gcc/m2expr.h (m2expr_GetCstInteger): New prototype.\n\ngcc/testsuite/ChangeLog:\n\n\tPR modula2/109497\n\t* gm2/pim/run/pass/addcharconst.mod: New test.\n\tPR modula2/109496\n\t* gm2/pim/run/pass/singlechar.mod: New test.\n\nSigned-off-by: Gaius Mulley <gaiusmod2@gmail.com>", "tree": {"sha": "914badeca002aff6b9ecf223c05cb749804e7f4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/914badeca002aff6b9ecf223c05cb749804e7f4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c/comments", "author": null, "committer": null, "parents": [{"sha": "66946624b96b762985de56444d726a0ebd4e0df5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66946624b96b762985de56444d726a0ebd4e0df5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66946624b96b762985de56444d726a0ebd4e0df5"}], "stats": {"total": 182, "additions": 157, "deletions": 25}, "files": [{"sha": "91e4c2404f01f2172a706ae59e39962d02e1e39e", "filename": "gcc/m2/gm2-compiler/M2ALU.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c/gcc%2Fm2%2Fgm2-compiler%2FM2ALU.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c/gcc%2Fm2%2Fgm2-compiler%2FM2ALU.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-compiler%2FM2ALU.def?ref=a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c", "patch": "@@ -51,6 +51,7 @@ EXPORT QUALIFIED PtrToValue,\n                  PushRealTree, PopRealTree,\n                  PushComplexTree, PopComplexTree,\n                  PopConstructorTree,\n+                 PopChar,\n                  PushCard,\n                  PushInt,\n                  PushChar,\n@@ -260,6 +261,13 @@ PROCEDURE PushInt (i: INTEGER) ;\n PROCEDURE PushChar (c: CHAR) ;\n \n \n+(*\n+   PopChar - returns the value from the stack in a character.\n+*)\n+\n+PROCEDURE PopChar (tokenno: CARDINAL) : CHAR ;\n+\n+\n (*\n    PushString - pushes the numerical value of the string onto the stack.\n *)"}, {"sha": "caa66fc42cc00b37a9271e7722b1a9f7c0a1d134", "filename": "gcc/m2/gm2-compiler/M2ALU.mod", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c/gcc%2Fm2%2Fgm2-compiler%2FM2ALU.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c/gcc%2Fm2%2Fgm2-compiler%2FM2ALU.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-compiler%2FM2ALU.mod?ref=a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c", "patch": "@@ -67,7 +67,8 @@ FROM m2expr IMPORT BuildAdd, BuildSub, BuildMult,\n                    BuildDivTrunc, BuildModTrunc, BuildDivFloor, BuildModFloor,\n                    BuildLSL, BuildLSR,\n                    BuildLogicalOr, BuildLogicalAnd, BuildSymmetricDifference,\n-                   GetWordOne, GetCardinalZero, TreeOverflow, RemoveOverflow ;\n+                   GetWordOne, GetCardinalZero, TreeOverflow, RemoveOverflow,\n+                   GetCstInteger ;\n \n FROM m2decl IMPORT GetBitsPerBitset, BuildIntegerConstant, BuildConstLiteralNumber ;\n FROM m2misc IMPORT DebugTree ;\n@@ -1157,6 +1158,30 @@ BEGIN\n END PushChar ;\n \n \n+(*\n+   PopChar - pops a char from the stack.\n+*)\n+\n+PROCEDURE PopChar (tokenno: CARDINAL) : CHAR ;\n+VAR\n+   v : PtrToValue ;\n+   ch: CHAR ;\n+BEGIN\n+   v := Pop () ;\n+   ch := 0C ;\n+   WITH v^ DO\n+      IF type = integer\n+      THEN\n+         ch := VAL (CHAR, GetCstInteger (numberValue))\n+      ELSE\n+         MetaErrorT0 (tokenno, '{%E}cannot convert constant to a CHAR')\n+      END\n+   END ;\n+   Push (v) ;\n+   RETURN ch\n+END PopChar ;\n+\n+\n (*\n    IsReal - returns TRUE if a is a REAL number.\n *)"}, {"sha": "5c171f728ac2d07c0045bc023ab19eaebb0ce2fd", "filename": "gcc/m2/gm2-compiler/M2GCCDeclare.mod", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c/gcc%2Fm2%2Fgm2-compiler%2FM2GCCDeclare.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c/gcc%2Fm2%2Fgm2-compiler%2FM2GCCDeclare.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-compiler%2FM2GCCDeclare.mod?ref=a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c", "patch": "@@ -47,7 +47,7 @@ FROM M2AsmUtil IMPORT GetFullSymName, GetFullScopeAsmName ;\n FROM M2Batch IMPORT MakeDefinitionSource ;\n FROM NameKey IMPORT Name, MakeKey, NulName, KeyToCharStar, makekey ;\n FROM M2FileName IMPORT CalculateFileName ;\n-FROM DynamicStrings IMPORT String, string, InitString, KillString, InitStringCharStar, Mark ;\n+FROM DynamicStrings IMPORT String, string, InitString, KillString, InitStringCharStar, InitStringChar, Mark ;\n FROM FormatStrings IMPORT Sprintf1 ;\n FROM M2LexBuf IMPORT TokenToLineNo, FindFileNameFromToken, TokenToLocation, UnknownTokenNo, BuiltinTokenNo ;\n FROM M2MetaError IMPORT MetaError1, MetaError3 ;\n@@ -143,6 +143,7 @@ FROM M2Scope IMPORT ScopeBlock, InitScopeBlock, KillScopeBlock, ForeachScopeBloc\n \n FROM M2ALU IMPORT Addn, Sub, Equ, GreEqu, Gre, Less, PushInt, PushCard, ConvertToType,\n                   PushIntegerTree, PopIntegerTree, PopRealTree, ConvertToInt, PopSetTree,\n+                  PopChar,\n                   IsConstructorDependants, WalkConstructorDependants,\n                   PopConstructorTree, PopComplexTree, PutConstructorSolved,\n                   ChangeToConstructor, EvaluateValue, TryEvaluateValue ;\n@@ -1562,16 +1563,24 @@ END DeclareStringConstant ;\n PROCEDURE PromoteToString (tokenno: CARDINAL; sym: CARDINAL) : Tree ;\n VAR\n    size: CARDINAL ;\n+   ch  : CHAR ;\n BEGIN\n    DeclareConstant (tokenno, sym) ;\n-   size := GetStringLength (sym) ;\n-   IF size > 1\n+   IF IsConst (sym) AND (GetSType (sym) = Char)\n    THEN\n-      (* will be a string anyway *)\n-      RETURN Tree (Mod2Gcc (sym))\n+      PushValue (sym) ;\n+      ch := PopChar (tokenno) ;\n+      RETURN BuildCStringConstant (string (InitStringChar (ch)), 1)\n    ELSE\n-      RETURN BuildStringConstant (KeyToCharStar (GetString (sym)),\n-                                  GetStringLength (sym))\n+      size := GetStringLength (sym) ;\n+      IF size > 1\n+      THEN\n+         (* will be a string anyway *)\n+         RETURN Tree (Mod2Gcc (sym))\n+      ELSE\n+         RETURN BuildStringConstant (KeyToCharStar (GetString (sym)),\n+                                     GetStringLength (sym))\n+      END\n    END\n END PromoteToString ;\n "}, {"sha": "1f593cf6939b40a5682f49398908e5e730bb9975", "filename": "gcc/m2/gm2-compiler/M2GenGCC.mod", "status": "modified", "additions": 47, "deletions": 15, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c/gcc%2Fm2%2Fgm2-compiler%2FM2GenGCC.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c/gcc%2Fm2%2Fgm2-compiler%2FM2GenGCC.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-compiler%2FM2GenGCC.mod?ref=a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c", "patch": "@@ -109,7 +109,8 @@ FROM M2Bitset IMPORT Bitset ;\n FROM NameKey IMPORT Name, MakeKey, KeyToCharStar, LengthKey, makekey, NulName ;\n \n FROM DynamicStrings IMPORT string, InitString, KillString, String,\n-                           InitStringCharStar, Mark, Slice, ConCat, ConCatChar ;\n+                           InitStringCharStar, Mark, Slice, ConCat, ConCatChar,\n+                           InitStringChar, Dup ;\n \n FROM FormatStrings IMPORT Sprintf0, Sprintf1, Sprintf2, Sprintf3, Sprintf4 ;\n FROM M2System IMPORT Address, Word, System, TBitSize, MakeAdr, IsSystemType, IsGenericSystemType, IsRealN, IsComplexN, IsSetN, IsWordN, Loc, Byte ;\n@@ -132,7 +133,7 @@ FROM M2ALU IMPORT PtrToValue,\n                   PushSetTree, PopSetTree,\n                   PopRealTree, PushCard,\n                   PushRealTree,\n-                  PopComplexTree,\n+                  PopComplexTree, PopChar,\n                   Gre, Sub, Equ, NotEqu, LessEqu,\n                   BuildRange, SetOr, SetAnd, SetNegate,\n                   SetSymmetricDifference, SetDifference,\n@@ -3589,6 +3590,38 @@ BEGIN\n END BinaryOperands ;\n \n \n+(*\n+   IsConstStr - returns TRUE if sym is a constant string or a char constant.\n+*)\n+\n+PROCEDURE IsConstStr (sym: CARDINAL) : BOOLEAN ;\n+BEGIN\n+   RETURN IsConstString (sym) OR (IsConst (sym) AND (GetSType (sym) = Char))\n+END IsConstStr ;\n+\n+\n+(*\n+   GetStr - return a string containing a constant string value associated with sym.\n+            A nul char constant will return an empty string.\n+*)\n+\n+PROCEDURE GetStr (tokenno: CARDINAL; sym: CARDINAL) : String ;\n+VAR\n+   ch: CHAR ;\n+BEGIN\n+   Assert (IsConst (sym)) ;\n+   IF IsConstString (sym)\n+   THEN\n+      RETURN InitStringCharStar (KeyToCharStar (GetString (sym)))\n+   ELSE\n+      Assert (GetSType (sym) = Char) ;\n+      PushValue (sym) ;\n+      ch := PopChar (tokenno) ;\n+      RETURN InitStringChar (ch)\n+   END\n+END GetStr ;\n+\n+\n (*\n    FoldAdd - check addition for constant folding.\n *)\n@@ -3598,18 +3631,17 @@ PROCEDURE FoldAdd (tokenno: CARDINAL; p: WalkAction;\n VAR\n    s: String ;\n BEGIN\n-   IF IsConst(op2) AND IsConst(op3) AND IsConst(op3) AND\n-      IsConstString(op2) AND IsConstString(op3)\n+   IF IsConstStr (op2) AND IsConstStr (op3)\n    THEN\n-      (* handle special addition for constant strings *)\n-      s := InitStringCharStar(KeyToCharStar(GetString(op2))) ;\n-      s := ConCat(s, Mark(InitStringCharStar(KeyToCharStar(GetString(op3))))) ;\n-      PutConstString(tokenno, op1, makekey(string(s))) ;\n-      TryDeclareConstant(tokenno, op1) ;\n-      p(op1) ;\n+      (* Handle special addition for constant strings.  *)\n+      s := Dup (GetStr (tokenno, op2)) ;\n+      s := ConCat (s, GetStr (tokenno, op3)) ;\n+      PutConstString (tokenno, op1, makekey (string (s))) ;\n+      TryDeclareConstant (tokenno, op1) ;\n+      p (op1) ;\n       NoChange := FALSE ;\n-      SubQuad(quad) ;\n-      s := KillString(s)\n+      SubQuad (quad) ;\n+      s := KillString (s)\n    ELSE\n       IF BinaryOperands (quad, op2, op3)\n       THEN\n@@ -5675,11 +5707,11 @@ VAR\n BEGIN\n    location := TokenToLocation (CurrentQuadToken) ;\n \n-   DeclareConstant(CurrentQuadToken, array) ;\n-   IF IsConstString(array)\n+   DeclareConstant (CurrentQuadToken, array) ;\n+   IF IsConstString (array) OR (IsConst (array) AND (GetSType (array) = Char))\n    THEN\n       BuildAssignmentStatement (location, Mod2Gcc (result), BuildAddr (location, PromoteToString (CurrentQuadToken, array), FALSE))\n-   ELSIF IsConstructor(array)\n+   ELSIF IsConstructor (array)\n    THEN\n       BuildAssignmentStatement (location, Mod2Gcc (result), BuildAddr (location, Mod2Gcc (array), TRUE))\n    ELSIF IsUnbounded (GetType (array))"}, {"sha": "2380efb70417bc7ed39ccce901ee24817202ddfb", "filename": "gcc/m2/gm2-compiler/M2Quads.mod", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c/gcc%2Fm2%2Fgm2-compiler%2FM2Quads.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c/gcc%2Fm2%2Fgm2-compiler%2FM2Quads.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-compiler%2FM2Quads.mod?ref=a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c", "patch": "@@ -585,7 +585,7 @@ BEGIN\n                        END\n \n       END ;\n-      i := GetNextQuad(i)\n+      i := GetNextQuad (i)\n    END ;\n    InternalError ('fix this for the sake of efficiency..')\n END IsBackReference ;\n@@ -686,7 +686,7 @@ BEGIN\n                        END\n \n       END ;\n-      i := GetNextQuad(i)\n+      i := GetNextQuad (i)\n    END ;\n    InternalError ('fix this for the sake of efficiency..')\n END IsBackReferenceConditional ;"}, {"sha": "a319960aa3372b743f2b7d2a2878326d8f48b2c0", "filename": "gcc/m2/gm2-gcc/m2expr.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c/gcc%2Fm2%2Fgm2-gcc%2Fm2expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c/gcc%2Fm2%2Fgm2-gcc%2Fm2expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-gcc%2Fm2expr.cc?ref=a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c", "patch": "@@ -4283,6 +4283,16 @@ build_set_full_complement (location_t location)\n   return value;\n }\n \n+\n+/* GetCstInteger return the integer value of the cst tree.  */\n+\n+int\n+m2expr_GetCstInteger (tree cst)\n+{\n+  return TREE_INT_CST_LOW (cst);\n+}\n+\n+\n /* init initialise this module.  */\n \n void"}, {"sha": "cc80ded15475599d77c491d85ec6ae5205a7deb5", "filename": "gcc/m2/gm2-gcc/m2expr.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c/gcc%2Fm2%2Fgm2-gcc%2Fm2expr.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c/gcc%2Fm2%2Fgm2-gcc%2Fm2expr.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-gcc%2Fm2expr.def?ref=a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c", "patch": "@@ -583,6 +583,13 @@ PROCEDURE IsTrue (t: Tree) : BOOLEAN ;\n PROCEDURE IsFalse (t: Tree) : BOOLEAN ;\n \n \n+(*\n+    GetCstInteger - return the integer value of the cst tree.\n+*)\n+\n+PROCEDURE GetCstInteger (cst: Tree) : INTEGER ;\n+\n+\n (*\n     AreConstantsEqual - maps onto tree.c (tree_int_cst_equal). It returns\n                         TRUE if the value of e1 is the same as e2."}, {"sha": "86e3bab1cded9bf49179d52e1ec88250e045bf4b", "filename": "gcc/m2/gm2-gcc/m2expr.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c/gcc%2Fm2%2Fgm2-gcc%2Fm2expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c/gcc%2Fm2%2Fgm2-gcc%2Fm2expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-gcc%2Fm2expr.h?ref=a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c", "patch": "@@ -234,6 +234,7 @@ EXTERN void m2expr_ConstantExpressionWarning (tree value);\n EXTERN tree m2expr_BuildAddAddress (location_t location, tree op1, tree op2);\n EXTERN tree m2expr_BuildRDiv (location_t location, tree op1, tree op2,\n                               bool needconvert);\n+EXTERN int m2expr_GetCstInteger (tree cst);\n \n EXTERN void m2expr_init (location_t location);\n "}, {"sha": "527a3048c4868d5d510cc91c913110c41c15f1ce", "filename": "gcc/testsuite/gm2/pim/run/pass/addcharconst.mod", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c/gcc%2Ftestsuite%2Fgm2%2Fpim%2Frun%2Fpass%2Faddcharconst.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c/gcc%2Ftestsuite%2Fgm2%2Fpim%2Frun%2Fpass%2Faddcharconst.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgm2%2Fpim%2Frun%2Fpass%2Faddcharconst.mod?ref=a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c", "patch": "@@ -0,0 +1,20 @@\n+MODULE addcharconst ;\n+\n+FROM libc IMPORT printf, exit ;\n+FROM StrLib IMPORT StrLen ;\n+\n+\n+PROCEDURE input (a: ARRAY OF CHAR) ;\n+BEGIN\n+   IF StrLen (a) # 2\n+   THEN\n+      printf (\"string length is not 2, but %d\\n\", StrLen (a)) ;\n+      exit (1)\n+   END\n+END input ;\n+\n+\n+BEGIN\n+   input (015C + 012C) ;\n+   printf (\"successful test, finishing\\n\")\n+END addcharconst."}, {"sha": "992049d76e2e4cfdf6d14b3e6bcfcb2a6715451e", "filename": "gcc/testsuite/gm2/pim/run/pass/singlechar.mod", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c/gcc%2Ftestsuite%2Fgm2%2Fpim%2Frun%2Fpass%2Fsinglechar.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c/gcc%2Ftestsuite%2Fgm2%2Fpim%2Frun%2Fpass%2Fsinglechar.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgm2%2Fpim%2Frun%2Fpass%2Fsinglechar.mod?ref=a1afdc6e2aa77d0a990e1a82aceeffc837b7e50c", "patch": "@@ -0,0 +1,20 @@\n+MODULE singlechar ;\n+\n+FROM libc IMPORT printf, exit ;\n+FROM StrLib IMPORT StrLen ;\n+\n+\n+PROCEDURE input (a: ARRAY OF CHAR) ;\n+BEGIN\n+   IF StrLen (a) # 1\n+   THEN\n+      printf (\"string length is not 1, but %d\\n\", StrLen (a)) ;\n+      exit (1)\n+   END\n+END input ;\n+\n+\n+BEGIN\n+   input (015C) ;\n+   printf (\"successful test, finishing\\n\")\n+END singlechar."}]}