{"sha": "541fb4d9bc40ec95eaba46fc2474067b296f1680", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQxZmI0ZDliYzQwZWM5NWVhYmE0NmZjMjQ3NDA2N2IyOTZmMTY4MA==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2013-04-22T10:38:57Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-22T10:38:57Z"}, "message": "aspects.ads, [...]: Removal of references to Contract_Case.\n\n2013-04-22  Yannick Moy  <moy@adacore.com>\n\n\t* aspects.ads, aspects.adb, sem_ch13.adb: Removal of references to\n\tContract_Case.\n\t* gnat_ugn.texi, gnat_rm.texi Description of Contract_Case replaced by\n\tdescription of Contract_Cases.\n\nFrom-SVN: r198127", "tree": {"sha": "113066377f890ebe15d69d67e33bbc38b6868188", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/113066377f890ebe15d69d67e33bbc38b6868188"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/541fb4d9bc40ec95eaba46fc2474067b296f1680", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/541fb4d9bc40ec95eaba46fc2474067b296f1680", "html_url": "https://github.com/Rust-GCC/gccrs/commit/541fb4d9bc40ec95eaba46fc2474067b296f1680", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/541fb4d9bc40ec95eaba46fc2474067b296f1680/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "177d2b74b56c0f67c2746a270d86ceb58f7fbeca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/177d2b74b56c0f67c2746a270d86ceb58f7fbeca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/177d2b74b56c0f67c2746a270d86ceb58f7fbeca"}], "stats": {"total": 251, "additions": 113, "deletions": 138}, "files": [{"sha": "e1d5a5f56970248e9be412e0cc5ea2af8f7eeadd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/541fb4d9bc40ec95eaba46fc2474067b296f1680/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/541fb4d9bc40ec95eaba46fc2474067b296f1680/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=541fb4d9bc40ec95eaba46fc2474067b296f1680", "patch": "@@ -1,3 +1,10 @@\n+2013-04-22  Yannick Moy  <moy@adacore.com>\n+\n+\t* aspects.ads, aspects.adb, sem_ch13.adb: Removal of references to\n+\tContract_Case.\n+\t* gnat_ugn.texi, gnat_rm.texi Description of Contract_Case replaced by\n+\tdescription of Contract_Cases.\n+\n 2013-04-12  Robert Dewar  <dewar@adacore.com>\n \n \t* makeutl.adb, prj-nmsc.adb: Minor reformatting."}, {"sha": "fc2b3ad55b6d93ea6080a661b06cf95e78bc9718", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/541fb4d9bc40ec95eaba46fc2474067b296f1680/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/541fb4d9bc40ec95eaba46fc2474067b296f1680/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=541fb4d9bc40ec95eaba46fc2474067b296f1680", "patch": "@@ -301,7 +301,6 @@ package body Aspects is\n     Aspect_Compiler_Unit                => Aspect_Compiler_Unit,\n     Aspect_Component_Size               => Aspect_Component_Size,\n     Aspect_Constant_Indexing            => Aspect_Constant_Indexing,\n-    Aspect_Contract_Case                => Aspect_Contract_Case,\n     Aspect_Contract_Cases               => Aspect_Contract_Cases,\n     Aspect_Convention                   => Aspect_Convention,\n     Aspect_CPU                          => Aspect_CPU,"}, {"sha": "690b7b1ecadce29d6703fbce5e6bbcf57b12ad12", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/541fb4d9bc40ec95eaba46fc2474067b296f1680/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/541fb4d9bc40ec95eaba46fc2474067b296f1680/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=541fb4d9bc40ec95eaba46fc2474067b296f1680", "patch": "@@ -81,7 +81,6 @@ package Aspects is\n       Aspect_Bit_Order,\n       Aspect_Component_Size,\n       Aspect_Constant_Indexing,\n-      Aspect_Contract_Case,                 -- GNAT\n       Aspect_Contract_Cases,                -- GNAT\n       Aspect_Convention,\n       Aspect_CPU,\n@@ -229,7 +228,6 @@ package Aspects is\n                              Aspect_Ada_2005                 => True,\n                              Aspect_Ada_2012                 => True,\n                              Aspect_Compiler_Unit            => True,\n-                             Aspect_Contract_Case            => True,\n                              Aspect_Contract_Cases           => True,\n                              Aspect_Depends                  => True,\n                              Aspect_Dimension                => True,\n@@ -267,8 +265,7 @@ package Aspects is\n    --  the same aspect attached to the same declaration are allowed.\n \n    No_Duplicates_Allowed : constant array (Aspect_Id) of Boolean :=\n-                             (Aspect_Contract_Case  => False,\n-                              Aspect_Test_Case      => False,\n+                             (Aspect_Test_Case      => False,\n                               others                => True);\n \n    --  The following array indicates type aspects that are inherited and apply\n@@ -322,7 +319,6 @@ package Aspects is\n                         Aspect_Bit_Order               => Expression,\n                         Aspect_Component_Size          => Expression,\n                         Aspect_Constant_Indexing       => Name,\n-                        Aspect_Contract_Case           => Expression,\n                         Aspect_Contract_Cases          => Expression,\n                         Aspect_Convention              => Name,\n                         Aspect_CPU                     => Expression,\n@@ -397,7 +393,6 @@ package Aspects is\n      Aspect_Compiler_Unit                => Name_Compiler_Unit,\n      Aspect_Component_Size               => Name_Component_Size,\n      Aspect_Constant_Indexing            => Name_Constant_Indexing,\n-     Aspect_Contract_Case                => Name_Contract_Case,\n      Aspect_Contract_Cases               => Name_Contract_Cases,\n      Aspect_Convention                   => Name_Convention,\n      Aspect_CPU                          => Name_CPU,"}, {"sha": "9c063c63f832443b4226aedaa64983b0cee0549b", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 46, "deletions": 67, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/541fb4d9bc40ec95eaba46fc2474067b296f1680/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/541fb4d9bc40ec95eaba46fc2474067b296f1680/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=541fb4d9bc40ec95eaba46fc2474067b296f1680", "patch": "@@ -122,7 +122,7 @@ Implementation Defined Pragmas\n * Pragma Complete_Representation::\n * Pragma Complex_Representation::\n * Pragma Component_Alignment::\n-* Pragma Contract_Case::\n+* Pragma Contract_Cases::\n * Pragma Convention_Identifier::\n * Pragma CPP_Class::\n * Pragma CPP_Constructor::\n@@ -877,7 +877,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Complete_Representation::\n * Pragma Complex_Representation::\n * Pragma Component_Alignment::\n-* Pragma Contract_Case::\n+* Pragma Contract_Cases::\n * Pragma Convention_Identifier::\n * Pragma CPP_Class::\n * Pragma CPP_Constructor::\n@@ -1856,107 +1856,88 @@ If the alignment for a record or array type is not specified (using\n pragma @code{Pack}, pragma @code{Component_Alignment}, or a record rep\n clause), the GNAT uses the default alignment as described previously.\n \n-@node Pragma Contract_Case\n-@unnumberedsec Pragma Contract_Case\n+@node Pragma Contract_Cases\n+@unnumberedsec Pragma Contract_Cases\n @cindex Contract cases\n-@findex Contract_Case\n+@findex Contract_Cases\n @noindent\n Syntax:\n \n @smallexample @c ada\n-pragma Contract_Case (\n-   [Name     =>] static_string_Expression\n-  ,[Mode     =>] (Nominal | Robustness)\n- [, Requires =>  Boolean_Expression]\n- [, Ensures  =>  Boolean_Expression]);\n+pragma Contract_Cases (\n+   Condition => Consequence\n+ @{,Condition => Consequence@});\n @end smallexample\n \n @noindent\n-The @code{Contract_Case} pragma allows defining fine-grain specifications\n+The @code{Contract_Cases} pragma allows defining fine-grain specifications\n that can complement or replace the contract given by a precondition and a\n-postcondition. Additionally, the @code{Contract_Case} pragma can be used\n+postcondition. Additionally, the @code{Contract_Cases} pragma can be used\n by testing and formal verification tools. The compiler checks its validity and,\n depending on the assertion policy at the point of declaration of the pragma,\n it may insert a check in the executable. For code generation, the contract\n-case\n-\n-@smallexample @c ada\n-pragma Contract_Case (\n-   Name     => ...\n-   Mode     => ...\n-   Requires => R,\n-   Ensures  => E);\n-@end smallexample\n-\n-@noindent\n-is equivalent to\n+cases\n \n @smallexample @c ada\n-pragma Postcondition (not R'Old or else E);\n+pragma Contract_Cases (\n+  Cond1 => Pred1,\n+  Cond2 => Pred2);\n @end smallexample\n \n @noindent\n-which is also equivalent to (in Ada 2012)\n+are equivalent to\n \n @smallexample @c ada\n-pragma Postcondition (if R'Old then E);\n+C1 : constant Boolean := Cond1;  --  evaluated at subprogram entry\n+C2 : constant Boolean := Cond2;  --  evaluated at subprogram entry\n+pragma Precondition ((C1 and not C2) or (C2 and not C1));\n+pragma Postcondition (if C1 then Pred1);\n+pragma Postcondition (if C2 then Pred2);\n @end smallexample\n \n @noindent\n-expressing that, whenever condition @code{R} is satisfied on entry to the\n-subprogram, condition @code{E} should be fulfilled on exit to the subprogram.\n+The precondition expresses that one and only one of the conditions is\n+satisfied on entry to the subprogram.\n+The postcondition expresses that, whenever condition @code{Ci} is satisfied\n+on entry to the subprogram, consequence @code{Predi} should be fulfilled on\n+exit to the subprogram.\n \n A precondition @code{P} and postcondition @code{Q} can also be\n expressed as contract cases:\n \n @smallexample @c ada\n-pragma Contract_Case (\n-   Name     => \"Replace precondition\",\n-   Mode     => Nominal,\n-   Requires => not P,\n-   Ensures  => False);\n-pragma Contract_Case (\n-   Name     => \"Replace postcondition\",\n-   Mode     => Nominal,\n-   Requires => P,\n-   Ensures  => Q);\n+pragma Contract_Cases (P => Q);\n @end smallexample\n \n-@code{Contract_Case} pragmas may only appear immediately following the\n-(separate) declaration of a subprogram in a package declaration, inside\n-a package spec unit. Only other pragmas may intervene (that is appear\n-between the subprogram declaration and a contract case).\n+The placement and visibility rules for @code{Contract_Cases} pragmas are\n+identical to those described for preconditions and postconditions.\n \n-The compiler checks that boolean expressions given in @code{Requires} and\n-@code{Ensures} are valid, where the rules for @code{Requires} are the\n-same as the rule for an expression in @code{Precondition} and the rules\n-for @code{Ensures} are the same as the rule for an expression in\n+The compiler checks that boolean expressions given in conditions and\n+consequences are valid, where the rules for conditions are the same as\n+the rule for an expression in @code{Precondition} and the rules for\n+consequences are the same as the rule for an expression in\n @code{Postcondition}. In particular, attributes @code{'Old} and\n-@code{'Result} can only be used within the @code{Ensures}\n-expression. The following is an example of use within a package spec:\n+@code{'Result} can only be used within consequence expressions.\n+The condition for the last contract case may be @code{others}, to denote\n+any case not captured by the previous cases. The\n+following is an example of use within a package spec:\n \n @smallexample @c ada\n package Math_Functions is\n    ...\n    function Sqrt (Arg : Float) return Float;\n-   pragma Contract_Case (Name     => \"Small argument\",\n-                         Mode     => Nominal,\n-                         Requires => Arg < 100,\n-                         Ensures  => Sqrt'Result < 10);\n+   pragma Contract_Cases ((Arg in 0 .. 99) => Sqrt'Result < 10,\n+                          Arg >= 100       => Sqrt'Result >= 10,\n+                          others           => Sqrt'Result = 0);\n    ...\n end Math_Functions;\n @end smallexample\n \n @noindent\n-The meaning of a contract case is that, whenever the associated subprogram is\n-executed in a context where @code{Requires} holds, then @code{Ensures}\n-should hold when the subprogram returns. Mode @code{Nominal} indicates\n-that the input context should also satisfy the precondition of the\n-subprogram, and the output context should also satisfy its\n-postcondition. More @code{Robustness} indicates that the precondition and\n-postcondition of the subprogram should be ignored for this contract case,\n-which is mostly useful when testing such a contract using a testing tool\n-that understands contract cases.\n+The meaning of contract cases is that only one case should apply at each\n+call, as determined by the corresponding condition evaluating to True,\n+and that the consequence for this case should hold when the subprogram\n+returns.\n \n @node Pragma Convention_Identifier\n @unnumberedsec Pragma Convention_Identifier\n@@ -5818,12 +5799,10 @@ pragma Test_Case (\n \n @noindent\n The @code{Test_Case} pragma allows defining fine-grain specifications\n-for use by testing tools. Its syntax is similar to the syntax of the\n-@code{Contract_Case} pragma, which is used for both testing and\n-formal verification.\n+for use by testing tools.\n The compiler checks the validity of the @code{Test_Case} pragma, but its\n presence does not lead to any modification of the code generated by the\n-compiler, contrary to the treatment of the @code{Contract_Case} pragma.\n+compiler.\n \n @code{Test_Case} pragmas may only appear immediately following the\n (separate) declaration of a subprogram in a package declaration, inside\n@@ -18138,7 +18117,7 @@ A complete description of the AIs may be found in\n @item @code{Atomic_Components} @tab\n @item @code{Bit_Order} @tab\n @item @code{Component_Size} @tab\n-@item @code{Contract_Case} @tab                 -- GNAT\n+@item @code{Contract_Cases} @tab                 -- GNAT\n @item @code{Discard_Names} @tab\n @item @code{External_Tag} @tab\n @item @code{Favor_Top_Level} @tab               -- GNAT"}, {"sha": "17f0f843748ae5184757aef5d111a23f04206084", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/541fb4d9bc40ec95eaba46fc2474067b296f1680/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/541fb4d9bc40ec95eaba46fc2474067b296f1680/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=541fb4d9bc40ec95eaba46fc2474067b296f1680", "patch": "@@ -5413,7 +5413,7 @@ This switch suppresses warnings for tracking of deleted conditional code.\n @cindex @option{-gnatw.t} (@command{gcc})\n This switch activates warnings on suspicious postconditions (whether a\n pragma @code{Postcondition} or a @code{Post} aspect in Ada 2012)\n-and suspicious contract cases (pragma @code{Contract_Case}). A\n+and suspicious contract cases (pragma @code{Contract_Cases}). A\n function postcondition or contract case is suspicious when no postcondition\n or contract case for this function mentions the result of the function.\n A procedure postcondition or contract case is suspicious when it only"}, {"sha": "1eaaf5d650e49cc78cac22dad11e0be937cd4224", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 58, "deletions": 62, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/541fb4d9bc40ec95eaba46fc2474067b296f1680/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/541fb4d9bc40ec95eaba46fc2474067b296f1680/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=541fb4d9bc40ec95eaba46fc2474067b296f1680", "patch": "@@ -949,7 +949,7 @@ package body Sem_Ch13 is\n       --  analyzed right now.\n \n       --  Note that there is a special handling for Pre, Post, Test_Case,\n-      --  Contract_Case aspects. In these cases, we do not have to worry\n+      --  Contract_Cases aspects. In these cases, we do not have to worry\n       --  about delay issues, since the pragmas themselves deal with delay\n       --  of visibility for the expression analysis. Thus, we just insert\n       --  the pragma after the node N.\n@@ -1593,8 +1593,8 @@ package body Sem_Ch13 is\n \n                --  Case 4: Special handling for aspects\n \n-               --  Pre/Post/Test_Case/Contract_Case whose corresponding pragmas\n-               --  take care of the delay.\n+               --  Pre/Post/Test_Case/Contract_Cases whose corresponding\n+               --  pragmas take care of the delay.\n \n                --  Aspects Pre/Post generate Precondition/Postcondition pragmas\n                --  with a first argument that is the expression, and a second\n@@ -1727,77 +1727,74 @@ package body Sem_Ch13 is\n                   goto Continue;\n                end;\n \n-               when Aspect_Contract_Case |\n-                    Aspect_Test_Case     =>\n+               when Aspect_Test_Case => Test_Case : declare\n+                  Args      : List_Id;\n+                  Comp_Expr : Node_Id;\n+                  Comp_Assn : Node_Id;\n+                  New_Expr  : Node_Id;\n \n-                  declare\n-                     Args      : List_Id;\n-                     Comp_Expr : Node_Id;\n-                     Comp_Assn : Node_Id;\n-                     New_Expr  : Node_Id;\n+               begin\n+                  Args := New_List;\n \n-                  begin\n-                     Args := New_List;\n+                  if Nkind (Parent (N)) = N_Compilation_Unit then\n+                     Error_Msg_Name_1 := Nam;\n+                     Error_Msg_N (\"incorrect placement of aspect `%`\", E);\n+                     goto Continue;\n+                  end if;\n \n-                     if Nkind (Parent (N)) = N_Compilation_Unit then\n-                        Error_Msg_Name_1 := Nam;\n-                        Error_Msg_N (\"incorrect placement of aspect `%`\", E);\n-                        goto Continue;\n-                     end if;\n+                  if Nkind (Expr) /= N_Aggregate then\n+                     Error_Msg_Name_1 := Nam;\n+                     Error_Msg_NE\n+                       (\"wrong syntax for aspect `%` for &\", Id, E);\n+                     goto Continue;\n+                  end if;\n \n-                     if Nkind (Expr) /= N_Aggregate then\n+                  --  Make pragma expressions refer to the original aspect\n+                  --  expressions through the Original_Node link. This is\n+                  --  used in semantic analysis for ASIS mode, so that the\n+                  --  original expression also gets analyzed.\n+\n+                  Comp_Expr := First (Expressions (Expr));\n+                  while Present (Comp_Expr) loop\n+                     New_Expr := Relocate_Node (Comp_Expr);\n+                     Set_Original_Node (New_Expr, Comp_Expr);\n+                     Append_To (Args,\n+                       Make_Pragma_Argument_Association (Sloc (Comp_Expr),\n+                         Expression => New_Expr));\n+                     Next (Comp_Expr);\n+                  end loop;\n+\n+                  Comp_Assn := First (Component_Associations (Expr));\n+                  while Present (Comp_Assn) loop\n+                     if List_Length (Choices (Comp_Assn)) /= 1\n+                       or else\n+                         Nkind (First (Choices (Comp_Assn))) /= N_Identifier\n+                     then\n                         Error_Msg_Name_1 := Nam;\n                         Error_Msg_NE\n                           (\"wrong syntax for aspect `%` for &\", Id, E);\n                         goto Continue;\n                      end if;\n \n-                     --  Make pragma expressions refer to the original aspect\n-                     --  expressions through the Original_Node link. This is\n-                     --  used in semantic analysis for ASIS mode, so that the\n-                     --  original expression also gets analyzed.\n-\n-                     Comp_Expr := First (Expressions (Expr));\n-                     while Present (Comp_Expr) loop\n-                        New_Expr := Relocate_Node (Comp_Expr);\n-                        Set_Original_Node (New_Expr, Comp_Expr);\n-                        Append_To (Args,\n-                          Make_Pragma_Argument_Association (Sloc (Comp_Expr),\n-                            Expression => New_Expr));\n-                        Next (Comp_Expr);\n-                     end loop;\n-\n-                     Comp_Assn := First (Component_Associations (Expr));\n-                     while Present (Comp_Assn) loop\n-                        if List_Length (Choices (Comp_Assn)) /= 1\n-                          or else\n-                            Nkind (First (Choices (Comp_Assn))) /= N_Identifier\n-                        then\n-                           Error_Msg_Name_1 := Nam;\n-                           Error_Msg_NE\n-                             (\"wrong syntax for aspect `%` for &\", Id, E);\n-                           goto Continue;\n-                        end if;\n-\n-                        New_Expr := Relocate_Node (Expression (Comp_Assn));\n-                        Set_Original_Node (New_Expr, Expression (Comp_Assn));\n-                        Append_To (Args,\n-                          Make_Pragma_Argument_Association (Sloc (Comp_Assn),\n-                          Chars      => Chars (First (Choices (Comp_Assn))),\n-                          Expression => New_Expr));\n-                        Next (Comp_Assn);\n-                     end loop;\n+                     New_Expr := Relocate_Node (Expression (Comp_Assn));\n+                     Set_Original_Node (New_Expr, Expression (Comp_Assn));\n+                     Append_To (Args,\n+                       Make_Pragma_Argument_Association (Sloc (Comp_Assn),\n+                       Chars      => Chars (First (Choices (Comp_Assn))),\n+                       Expression => New_Expr));\n+                     Next (Comp_Assn);\n+                  end loop;\n \n-                     --  Build the contract-case or test-case pragma\n+                  --  Build the test-case pragma\n \n-                     Aitem :=\n-                       Make_Pragma (Loc,\n-                         Pragma_Identifier            =>\n-                           Make_Identifier (Sloc (Id), Nam),\n-                         Pragma_Argument_Associations => Args);\n+                  Aitem :=\n+                    Make_Pragma (Loc,\n+                      Pragma_Identifier            =>\n+                        Make_Identifier (Sloc (Id), Nam),\n+                      Pragma_Argument_Associations => Args);\n \n-                     Delay_Required := False;\n-                  end;\n+                  Delay_Required := False;\n+               end Test_Case;\n \n                when Aspect_Contract_Cases => Contract_Cases : declare\n                   Case_Guard  : Node_Id;\n@@ -7312,7 +7309,6 @@ package body Sem_Ch13 is\n          --  Here is the list of aspects that don't require delay analysis\n \n          when Aspect_Abstract_State       |\n-              Aspect_Contract_Case        |\n               Aspect_Contract_Cases       |\n               Aspect_Dimension            |\n               Aspect_Dimension_System     |"}, {"sha": "700de0cf49cef0e5ca365c7c574024341a78e9a6", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/541fb4d9bc40ec95eaba46fc2474067b296f1680/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/541fb4d9bc40ec95eaba46fc2474067b296f1680/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=541fb4d9bc40ec95eaba46fc2474067b296f1680", "patch": "@@ -8701,7 +8701,6 @@ package body Sem_Prag is\n \n          begin\n             GNAT_Pragma;\n-            S14_Pragma;\n             Check_Arg_Count (1);\n \n             --  Completely ignore if not enabled"}]}