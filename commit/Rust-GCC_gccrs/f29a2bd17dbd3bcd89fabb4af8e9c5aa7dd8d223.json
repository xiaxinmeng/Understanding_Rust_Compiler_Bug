{"sha": "f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI5YTJiZDE3ZGJkM2JjZDg5ZmFiYjRhZjhlOWM1YWE3ZGQ4ZDIyMw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-03-24T08:31:36Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-03-24T08:31:36Z"}, "message": "re PR c++/7086 (compile time regression)\n\n\tPR c++/7086\n\t* c-typeck.c (c_mark_addressable): Adjust calls to\n\tput_var_into_stack.\n\t* expr.c (expand_expr): Likewise.\n\t* function.c (put_var_into_stack): Add rescan parameter.  Do not\n\tcall fixup_var_refs when rescan is false.\n\t(gen_mem_addressof): Likewise.\n\t(assign_parms): Adjust calls to put_var_into_stack.\n\t(setjmp_protect): Likewise.\n\t(setjmp_protect_args): Likewise.\n\t* rtl.h (gen_mem_addressof): Change prototype.\n\t* stmt.c (expand_decl): Adjust calls to put_var_into_stack.\n\t* tree.h (put_var_into_stack): Change prototype.\n\n\tPR c++/7086\n\t* utils2.c: Adjust calls to put_var_into_stack.\n\n\tPR c++/7086\n\t* semantics.c (genrtl_named_return_value): Adjust calls to\n\tput_var_into_stack.\n\t* typeck.c (cxx_mark_addressable): Likewise.\n\n\tPR c++/7086\n\t* com.c (ffecom_sym_transform_): Adjust calls to\n\tput_var_into_stack.\n\t(ffe_mark_addressable): Likewise.\n\nFrom-SVN: r64781", "tree": {"sha": "85eda9fd606f02112ed55c3f9d9703201269055d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85eda9fd606f02112ed55c3f9d9703201269055d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223/comments", "author": null, "committer": null, "parents": [{"sha": "ffe4ebba87d78d4da242adb6e95d2976bd796d91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffe4ebba87d78d4da242adb6e95d2976bd796d91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffe4ebba87d78d4da242adb6e95d2976bd796d91"}], "stats": {"total": 100, "additions": 72, "deletions": 28}, "files": [{"sha": "aea37fbd8b8a3bcb91d5858b297fc78a2f3d3666", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223", "patch": "@@ -1,3 +1,19 @@\n+2003-03-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/7086\n+\t* c-typeck.c (c_mark_addressable): Adjust calls to\n+\tput_var_into_stack.\n+\t* expr.c (expand_expr): Likewise.\n+\t* function.c (put_var_into_stack): Add rescan parameter.  Do not\n+\tcall fixup_var_refs when rescan is false.\n+\t(gen_mem_addressof): Likewise.\n+\t(assign_parms): Adjust calls to put_var_into_stack.\n+\t(setjmp_protect): Likewise.\n+\t(setjmp_protect_args): Likewise.\n+\t* rtl.h (gen_mem_addressof): Change prototype.\n+\t* stmt.c (expand_decl): Adjust calls to put_var_into_stack.\n+\t* tree.h (put_var_into_stack): Change prototype.\n+\n 2003-03-23  Arpad Beszedes <beszedes@cc.u-szeged.hu>\n \n \tPR middle-end/9967"}, {"sha": "dfca13876acc05abef087b6ec841480ecaf4baf0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223", "patch": "@@ -1,3 +1,8 @@\n+2003-03-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/7086\n+\t* utils2.c: Adjust calls to put_var_into_stack.\n+\n 2003-03-12  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* Make-lang.in, Makefile.in, config-lang.in: GCC, not GNU CC."}, {"sha": "131aeec4d7e451a158d4046265c49f3987ea985d", "filename": "gcc/ada/utils2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223/gcc%2Fada%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223/gcc%2Fada%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils2.c?ref=f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223", "patch": "@@ -2038,7 +2038,7 @@ gnat_mark_addressable (expr_node)\n       case VAR_DECL:\n       case PARM_DECL:\n       case RESULT_DECL:\n-\tput_var_into_stack (expr_node);\n+\tput_var_into_stack (expr_node, /*rescan=*/true);\n \tTREE_ADDRESSABLE (expr_node) = 1;\n \treturn true;\n "}, {"sha": "8fbcd861d2b3ce29ce3eec0d28f53378f419b3fd", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223", "patch": "@@ -3346,7 +3346,7 @@ c_mark_addressable (exp)\n \t    pedwarn (\"address of register variable `%s' requested\",\n \t\t     IDENTIFIER_POINTER (DECL_NAME (x)));\n \t  }\n-\tput_var_into_stack (x);\n+\tput_var_into_stack (x, /*rescan=*/true);\n \n \t/* drops in */\n       case FUNCTION_DECL:"}, {"sha": "68c17169265e7890ed302cdf9c8b10693db725fb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223", "patch": "@@ -1,3 +1,8 @@\n+2003-03-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/7086\n+\t* typeck.c (cxx_mark_addressable): Likewise.\n+\n 2003-03-22  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/9978, c++/9708"}, {"sha": "45d528ffb1341795331381f900c135bd5f416f16", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223", "patch": "@@ -4744,7 +4744,7 @@ cxx_mark_addressable (exp)\n \t  warning (\"address requested for `%D', which is declared `register'\",\n \t\t      x);\n \tTREE_ADDRESSABLE (x) = 1;\n-\tput_var_into_stack (x);\n+\tput_var_into_stack (x, /*rescan=*/true);\n \treturn true;\n \n       case FUNCTION_DECL:"}, {"sha": "a957dd70becb7452acdb052dbc0195658135fb74", "filename": "gcc/expr.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223", "patch": "@@ -6919,7 +6919,7 @@ expand_expr (exp, target, tmode, modifier)\n \t  temp = SAVE_EXPR_RTL (exp);\n \t  if (temp && GET_CODE (temp) == REG)\n \t    {\n-\t      put_var_into_stack (exp);\n+\t      put_var_into_stack (exp, /*rescan=*/true);\n \t      temp = SAVE_EXPR_RTL (exp);\n \t    }\n \t  if (temp == 0 || GET_CODE (temp) != MEM)\n@@ -7413,7 +7413,8 @@ expand_expr (exp, target, tmode, modifier)\n \t\t   forcing the SAVE_EXPR into memory.  */\n \t\tif (TREE_CODE (TREE_OPERAND (exp, 0)) == SAVE_EXPR)\n \t\t  {\n-\t\t    put_var_into_stack (TREE_OPERAND (exp, 0));\n+\t\t    put_var_into_stack (TREE_OPERAND (exp, 0), \n+\t\t\t\t\t/*rescan=*/true);\n \t\t    op0 = SAVE_EXPR_RTL (TREE_OPERAND (exp, 0));\n \t\t  }\n \t\telse\n@@ -9001,7 +9002,7 @@ expand_expr (exp, target, tmode, modifier)\n \t\tpreserve_temp_slots (target);\n \t\tSET_DECL_RTL (slot, target);\n \t\tif (TREE_ADDRESSABLE (slot))\n-\t\t  put_var_into_stack (slot);\n+\t\t  put_var_into_stack (slot, /*rescan=*/false);\n \n \t\t/* Since SLOT is not known to the called function\n \t\t   to belong to its stack frame, we must build an explicit\n@@ -9040,7 +9041,7 @@ expand_expr (exp, target, tmode, modifier)\n \t\t/* If we must have an addressable slot, then make sure that\n \t\t   the RTL that we just stored in slot is OK.  */\n \t\tif (TREE_ADDRESSABLE (slot))\n-\t\t  put_var_into_stack (slot);\n+\t\t  put_var_into_stack (slot, /*rescan=*/true);\n \t      }\n \t  }\n \n@@ -9190,7 +9191,8 @@ expand_expr (exp, target, tmode, modifier)\n \t\t forcing the SAVE_EXPR into memory.  */\n \t      if (TREE_CODE (TREE_OPERAND (exp, 0)) == SAVE_EXPR)\n \t\t{\n-\t\t  put_var_into_stack (TREE_OPERAND (exp, 0));\n+\t\t  put_var_into_stack (TREE_OPERAND (exp, 0),\n+\t\t\t\t      /*rescan=*/true);\n \t\t  op0 = SAVE_EXPR_RTL (TREE_OPERAND (exp, 0));\n \t\t}\n \t      else"}, {"sha": "46c3309ca2257de45e4ae51f87e0e03bc2e705f2", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223", "patch": "@@ -1,3 +1,10 @@\n+Sun Mar 23 23:43:45 2003  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/7086\n+\t* com.c (ffecom_sym_transform_): Adjust calls to\n+\tput_var_into_stack.\n+\t(ffe_mark_addressable): Likewise.\n+\n 2003-03-22  Bud Davis  <bdavis9659@comcast.net>\n \n \t* com.c (ffecom_constantunion_with_type): New function."}, {"sha": "b63e2eac9d61174555e62ae0bd563a7922f13f3a", "filename": "gcc/f/com.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223", "patch": "@@ -7443,7 +7443,7 @@ ffecom_sym_transform_ (ffesymbol s)\n \t\tassert (et != NULL_TREE);\n \n \t\tif (! TREE_STATIC (et))\n-\t\t  put_var_into_stack (et);\n+\t\t  put_var_into_stack (et, /*rescan=*/true);\n \n \t\toffset = ffestorag_modulo (est)\n \t\t  + ffestorag_offset (ffesymbol_storage (s))\n@@ -14294,7 +14294,7 @@ ffe_mark_addressable (tree exp)\n \t      }\n \t    assert (\"address of register var requested\" == NULL);\n \t  }\n-\tput_var_into_stack (x);\n+\tput_var_into_stack (x, /*rescan=*/true);\n \n \t/* drops in */\n       case FUNCTION_DECL:"}, {"sha": "2749c9ac5048c27e222fb02e3bcd609655b42a2e", "filename": "gcc/function.c", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223", "patch": "@@ -1304,12 +1304,16 @@ init_temp_slots ()\n   target_temp_slot_level = 0;\n }\n \f\n-/* Retroactively move an auto variable from a register to a stack slot.\n-   This is done when an address-reference to the variable is seen.  */\n+/* Retroactively move an auto variable from a register to a stack\n+   slot.  This is done when an address-reference to the variable is\n+   seen.  If RESCAN is true, all previously emitted instructions are\n+   examined and modified to handle the fact that DECL is now\n+   addressable.  */\n \n void\n-put_var_into_stack (decl)\n+put_var_into_stack (decl, rescan)\n      tree decl;\n+     bool rescan;\n {\n   rtx reg;\n   enum machine_mode promoted_mode, decl_mode;\n@@ -1384,7 +1388,7 @@ put_var_into_stack (decl)\n \t to put things in the stack for the sake of setjmp, try to keep it\n \t in a register until we know we actually need the address.  */\n       if (can_use_addressof)\n-\tgen_mem_addressof (reg, decl);\n+\tgen_mem_addressof (reg, decl, rescan);\n       else\n \tput_reg_into_stack (function, reg, TREE_TYPE (decl), promoted_mode,\n \t\t\t    decl_mode, volatilep, 0, usedp, 0);\n@@ -1431,7 +1435,7 @@ put_var_into_stack (decl)\n       /* Prevent sharing of rtl that might lose.  */\n       if (GET_CODE (XEXP (reg, 0)) == PLUS)\n \tXEXP (reg, 0) = copy_rtx (XEXP (reg, 0));\n-      if (usedp)\n+      if (usedp && rescan)\n \t{\n \t  schedule_fixup_var_refs (function, reg, TREE_TYPE (decl),\n \t\t\t\t   promoted_mode, 0);\n@@ -2871,15 +2875,19 @@ static int cfa_offset;\n #define ARG_POINTER_CFA_OFFSET(FNDECL) FIRST_PARM_OFFSET (FNDECL)\n #endif\n \n-/* Build up a (MEM (ADDRESSOF (REG))) rtx for a register REG that just had its\n-   address taken.  DECL is the decl or SAVE_EXPR for the object stored in the\n-   register, for later use if we do need to force REG into the stack.  REG is\n-   overwritten by the MEM like in put_reg_into_stack.  */\n+/* Build up a (MEM (ADDRESSOF (REG))) rtx for a register REG that just\n+   had its address taken.  DECL is the decl or SAVE_EXPR for the\n+   object stored in the register, for later use if we do need to force\n+   REG into the stack.  REG is overwritten by the MEM like in\n+   put_reg_into_stack.  RESCAN is true if previously emitted\n+   instructions must be rescanned and modified now that the REG has\n+   been transformed.  */\n \n rtx\n-gen_mem_addressof (reg, decl)\n+gen_mem_addressof (reg, decl, rescan)\n      rtx reg;\n      tree decl;\n+     bool rescan;\n {\n   rtx r = gen_rtx_ADDRESSOF (Pmode, gen_reg_rtx (GET_MODE (reg)),\n \t\t\t     REGNO (reg), decl);\n@@ -2917,10 +2925,11 @@ gen_mem_addressof (reg, decl)\n       if (DECL_P (decl) && decl_rtl == reg)\n \tSET_DECL_RTL (decl, reg);\n \n-      if (TREE_USED (decl) || (DECL_P (decl) && DECL_INITIAL (decl) != 0))\n+      if (rescan \n+\t  && (TREE_USED (decl) || (DECL_P (decl) && DECL_INITIAL (decl) != 0)))\n \tfixup_var_refs (reg, GET_MODE (reg), TREE_UNSIGNED (type), reg, 0);\n     }\n-  else\n+  else if (rescan)\n     fixup_var_refs (reg, GET_MODE (reg), 0, reg, 0);\n \n   return reg;\n@@ -4984,7 +4993,7 @@ assign_parms (fndecl)\n \t\t stack.  So, we go back to that sequence, just so that\n \t\t the fixups will happen.  */\n \t      push_to_sequence (conversion_insns);\n-\t      put_var_into_stack (parm);\n+\t      put_var_into_stack (parm, /*rescan=*/true);\n \t      conversion_insns = get_insns ();\n \t      end_sequence ();\n \t    }\n@@ -5513,7 +5522,7 @@ setjmp_protect (block)\n \t    ||\n #endif\n \t    ! DECL_REGISTER (decl)))\n-      put_var_into_stack (decl);\n+      put_var_into_stack (decl, /*rescan=*/true);\n   for (sub = BLOCK_SUBBLOCKS (block); sub; sub = TREE_CHAIN (sub))\n     setjmp_protect (sub);\n }\n@@ -5540,7 +5549,7 @@ setjmp_protect_args ()\n \t    ||\n #endif\n \t    ! DECL_REGISTER (decl)))\n-      put_var_into_stack (decl);\n+      put_var_into_stack (decl, /*rescan=*/true);\n }\n \f\n /* Return the context-pointer register corresponding to DECL,"}, {"sha": "0232c43f8add6827785d4dec5fc17d5ea411bc78", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223", "patch": "@@ -1577,7 +1577,7 @@ extern rtx simplify_rtx\t\t\tPARAMS ((rtx));\n extern rtx avoid_constant_pool_reference PARAMS ((rtx));\n \n /* In function.c  */\n-extern rtx gen_mem_addressof\t\tPARAMS ((rtx, tree));\n+extern rtx gen_mem_addressof\t\tPARAMS ((rtx, tree, bool));\n \n /* In regclass.c  */\n extern enum machine_mode choose_hard_reg_mode PARAMS ((unsigned int,"}, {"sha": "642a5b1ccfc43016efa65d75a912cfe8de8dfd52", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223", "patch": "@@ -3943,7 +3943,7 @@ expand_decl (decl)\n \n       /* If something wants our address, try to use ADDRESSOF.  */\n       if (TREE_ADDRESSABLE (decl))\n-\tput_var_into_stack (decl);\n+\tput_var_into_stack (decl, /*rescan=*/false);\n     }\n \n   else if (TREE_CODE (DECL_SIZE_UNIT (decl)) == INTEGER_CST"}, {"sha": "a55374dd1f33efab390f07e569b967639a6650b1", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=f29a2bd17dbd3bcd89fabb4af8e9c5aa7dd8d223", "patch": "@@ -2987,7 +2987,7 @@ extern void expand_dummy_function_end\tPARAMS ((void));\n extern void init_function_for_compilation\tPARAMS ((void));\n extern void init_function_start\t\tPARAMS ((tree, const char *, int));\n extern void assign_parms\t\tPARAMS ((tree));\n-extern void put_var_into_stack\t\tPARAMS ((tree));\n+extern void put_var_into_stack\t\tPARAMS ((tree, bool));\n extern void flush_addressof\t\tPARAMS ((tree));\n extern void uninitialized_vars_warning\tPARAMS ((tree));\n extern void setjmp_args_warning\t\tPARAMS ((void));"}]}