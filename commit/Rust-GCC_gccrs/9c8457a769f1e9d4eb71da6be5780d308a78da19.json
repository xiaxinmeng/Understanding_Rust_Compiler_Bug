{"sha": "9c8457a769f1e9d4eb71da6be5780d308a78da19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM4NDU3YTc2OWYxZTlkNGViNzFkYTZiZTU3ODBkMzA4YTc4ZGExOQ==", "commit": {"author": {"name": "Quentin Ochem", "email": "ochem@adacore.com", "date": "2005-12-09T17:22:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-12-09T17:22:09Z"}, "message": "gnat_ugn.texi: Created section \"Stack Related Tools\" Moved \"Stack Overflow Checking\"...\n\n2005-12-05  Quentin Ochem  <ochem@adacore.com>\n\t    Robert Dewar  <dewar@adacore.com>\n\t    Ed Falis  <falis@adacore.com>\n\t    Florian Villoing  <villoing@adacore.com>\n\t    Thomas Quinot  <quinot@adacore.com>\n\t    Arnaud Charlet  <charlet@adacore.com>\n\n\t* gnat_ugn.texi: Created section \"Stack Related Tools\"\n\tMoved \"Stack Overflow Checking\" subsection from \"Switches for gcc\" to\n\t\"Stack Related Tools\"\n\tAdded subsection \"Static Stack Usage Analysis\"\n\tAdded subsection \"Dynamic Stack Usage Analysis\"\n\tInclude documentation of itypes in sprint listing (-gnatG)\n\tDocumented gnatbind -D switch (default sec stack size for fixed sec\n\tstacks).\n\tAdded Interrupt_State and Persistent_BSS to list of configuration\n\tpragmas.\n\tAdd missing doc for maximum value of nnn in -gnatyMnnn\n\n\t* gnat_rm.texi: Document the AltiVec binding.\n\tAdd documentation for pragma Complete_Representation\n\tShortened an overly long line (> 79 chars)\n\tClarify documentation of unchecked conversion in implementation\n\tdefined cases.\n\tDocument two argument form of pragma Debug\n\n\t* types.ads (Column_Number): Update documentation.\n\n\t* exp_ch7.ads (Make_Adjust_Call): Document the special processing for\n\tlibrary level Finalize_Storage_Only objects (these are not attached to\n\tany finalization list).\n\n\t* system-mingw.ads: (Underlying_Priorities): Update comment.\n\nFrom-SVN: r108307", "tree": {"sha": "1c2ab1e1ac4e6f434ce32081d5cf00cc90ec206c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c2ab1e1ac4e6f434ce32081d5cf00cc90ec206c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c8457a769f1e9d4eb71da6be5780d308a78da19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c8457a769f1e9d4eb71da6be5780d308a78da19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c8457a769f1e9d4eb71da6be5780d308a78da19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c8457a769f1e9d4eb71da6be5780d308a78da19/comments", "author": {"login": "QuentinOchem", "id": 5612750, "node_id": "MDQ6VXNlcjU2MTI3NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5612750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuentinOchem", "html_url": "https://github.com/QuentinOchem", "followers_url": "https://api.github.com/users/QuentinOchem/followers", "following_url": "https://api.github.com/users/QuentinOchem/following{/other_user}", "gists_url": "https://api.github.com/users/QuentinOchem/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuentinOchem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuentinOchem/subscriptions", "organizations_url": "https://api.github.com/users/QuentinOchem/orgs", "repos_url": "https://api.github.com/users/QuentinOchem/repos", "events_url": "https://api.github.com/users/QuentinOchem/events{/privacy}", "received_events_url": "https://api.github.com/users/QuentinOchem/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "195b0505b23355a0466363b700be1a372a7e55eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/195b0505b23355a0466363b700be1a372a7e55eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/195b0505b23355a0466363b700be1a372a7e55eb"}], "stats": {"total": 430, "additions": 311, "deletions": 119}, "files": [{"sha": "125d9ea9143184310fc8af5ec37b7a1cdbcee0a8", "filename": "gcc/ada/exp_ch7.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c8457a769f1e9d4eb71da6be5780d308a78da19/gcc%2Fada%2Fexp_ch7.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c8457a769f1e9d4eb71da6be5780d308a78da19/gcc%2Fada%2Fexp_ch7.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.ads?ref=9c8457a769f1e9d4eb71da6be5780d308a78da19", "patch": "@@ -115,7 +115,9 @@ package Exp_Ch7 is\n    --  type (Is_Controlled) or a type with controlled components\n    --  (Has_Controlled).  With_Attach is an integer expression representing\n    --  the level of attachment, see Attach_To_Final_List's Nb_Link param\n-   --  documentation in s-finimp.ads.\n+   --  documentation in s-finimp.ads. Note: if Typ is Finalize_Storage_Only\n+   --  and the object is at library level, then With_Attach will be ignored,\n+   --  and a zero link level will be passed to Attach_To_Final_List.\n    --\n    --  This function will generate the appropriate calls to make\n    --  sure that the objects referenced by Ref are adjusted. The generated"}, {"sha": "8a2ad45b058e3b14186dd51ddd8623f4d97849e4", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 100, "deletions": 32, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c8457a769f1e9d4eb71da6be5780d308a78da19/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c8457a769f1e9d4eb71da6be5780d308a78da19/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=9c8457a769f1e9d4eb71da6be5780d308a78da19", "patch": "@@ -110,6 +110,7 @@ Implementation Defined Pragmas\n * Pragma Comment::\n * Pragma Common_Object::\n * Pragma Compile_Time_Warning::\n+* Pragma Complete_Representation::\n * Pragma Complex_Representation::\n * Pragma Component_Alignment::\n * Pragma Convention_Identifier::\n@@ -281,6 +282,11 @@ The GNAT Library\n * Ada.Text_IO.C_Streams (a-tiocst.ads)::\n * Ada.Wide_Text_IO.C_Streams (a-wtcstr.ads)::\n * Ada.Wide_Wide_Text_IO.C_Streams (a-ztcstr.ads)::\n+* GNAT.Altivec (g-altive.ads)::\n+* GNAT.Altivec.Conversions (g-altcon.ads)::\n+* GNAT.Altivec.Vector_Operations (g-alveop.ads)::\n+* GNAT.Altivec.Vector_Types (g-alvety.ads)::\n+* GNAT.Altivec.Vector_Views (g-alvevi.ads)::\n * GNAT.Array_Split (g-arrspl.ads)::\n * GNAT.AWK (g-awk.ads)::\n * GNAT.Bounded_Buffers (g-boubuf.ads)::\n@@ -644,6 +650,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Comment::\n * Pragma Common_Object::\n * Pragma Compile_Time_Warning::\n+* Pragma Complete_Representation::\n * Pragma Complex_Representation::\n * Pragma Component_Alignment::\n * Pragma Convention_Identifier::\n@@ -1039,6 +1046,25 @@ If these conditions are met, a warning message is generated using\n the value given as the second argument. This string value may contain\n embedded ASCII.LF characters to break the message into multiple lines.\n \n+@node Pragma Complete_Representation\n+@unnumberedsec Pragma Complete_Representation\n+@findex Complete_Representation\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Complete_Representation;\n+@end smallexample\n+\n+@noindent\n+This pragma must appear immediately within a record representation\n+clause. Typical placements are before the first component clause\n+or after the last component clause. The effect is to give an error\n+message if any component is missing a component clause. This pragma\n+may be used to ensure that a record representation clause is\n+complete, and that this invariant is maintained if fields are\n+added to the record in the future.\n+\n @node Pragma Complex_Representation\n @unnumberedsec Pragma Complex_Representation\n @findex Complex_Representation\n@@ -1356,26 +1382,25 @@ See @ref{Interfacing to C++} for related information.\n Syntax:\n \n @smallexample @c ada\n-pragma Debug (PROCEDURE_CALL_WITHOUT_SEMICOLON);\n+pragma Debug ([CONDITION, ]PROCEDURE_CALL_WITHOUT_SEMICOLON);\n \n PROCEDURE_CALL_WITHOUT_SEMICOLON ::=\n   PROCEDURE_NAME\n | PROCEDURE_PREFIX ACTUAL_PARAMETER_PART\n @end smallexample\n \n @noindent\n-The argument has the syntactic form of an expression, meeting the\n-syntactic requirements for pragmas.\n-\n-If debug pragmas are not enabled, this pragma has no\n-effect.  If debug pragmas are enabled, the semantics of the pragma is exactly\n-equivalent to the procedure call statement corresponding to the argument\n-with a terminating semicolon.  Pragmas are permitted in sequences of\n-declarations, so you can use pragma @code{Debug} to intersperse calls to\n-debug procedures in the middle of declarations.  Debug pragmas can be\n-enabled either by use of the command line switch @code{-gnata} or by use\n-of the configuration pragma @code{Debug_Policy}.\n+The procedure call argument has the syntactic form of an expression, meeting\n+the syntactic requirements for pragmas.\n \n+If debug pragmas are not enabled or if the condition is present and evaluates\n+to False, this pragma has no effect. If debug pragmas are enabled, the\n+semantics of the pragma is exactly equivalent to the procedure call statement\n+corresponding to the argument with a terminating semicolon. Pragmas are\n+permitted in sequences of declarations, so you can use pragma @code{Debug} to\n+intersperse calls to debug procedures in the middle of declarations. Debug\n+pragmas can be enabled either by use of the command line switch @code{-gnata}\n+or by use of the configuration pragma @code{Debug_Policy}.\n \n @node Pragma Debug_Policy\n @unnumberedsec Pragma Debug_Policy\n@@ -1393,20 +1418,6 @@ If the argument is @code{IGNORE}, then pragma @code{DEBUG} is ignored.\n This pragma overrides the effect of the @code{-gnata} switch on the\n command line.\n \n-If debug pragmas are not enabled, this pragma has no\n-effect.  If debug pragmas are enabled, the semantics of the pragma is exactly\n-equivalent to the procedure call statement corresponding to the argument\n-with a terminating semicolon.  Pragmas are permitted in sequences of\n-declarations, so you can use pragma @code{Debug} to intersperse calls to\n-debug procedures in the middle of declarations.  Debug pragmas can be\n-enabled either by use of the command line switch @code{-gnata} or by use\n-of the configuration pragma @code{Debug_Policy}.\n-\n-\n-\n-\n-\n-\n @node Pragma Detect_Blocking\n @unnumberedsec Pragma Detect_Blocking\n @findex Detect_Blocking\n@@ -7257,15 +7268,18 @@ See the definition and documentation in file @file{s-maccod.ads}.\n @end cartouche\n @noindent\n Unchecked conversion between types of the same size\n-and results in an uninterpreted transmission of the bits from one type\n+results in an uninterpreted transmission of the bits from one type\n to the other.  If the types are of unequal sizes, then in the case of\n discrete types, a shorter source is first zero or sign extended as\n necessary, and a shorter target is simply truncated on the left.\n For all non-discrete types, the source is first copied if necessary\n to ensure that the alignment requirements of the target are met, then\n a pointer is constructed to the source value, and the result is obtained\n by dereferencing this pointer after converting it to be a pointer to the\n-target type.\n+target type. Unchecked conversions where the target subtype is an\n+unconstrained array are not permitted. If the target alignment is\n+greater than the source alignment, then a copy of the result is\n+made with appropriate alignment\n \n @sp 1\n @cartouche\n@@ -8079,7 +8093,7 @@ of delay expirations for lower priority tasks.\n @noindent\n @c SGI info:\n @ignore\n-Tasks map to IRIX threads, and the dispatching policy is as defied by\n+Tasks map to IRIX threads, and the dispatching policy is as defined by\n the IRIX implementation of threads.\n @end ignore\n The policy is the same as that of the underlying threads implementation.\n@@ -11078,9 +11092,9 @@ streams by mixed language programs. Note though that system level buffering is\n explictly enabled at elaboration of the standard I/O packages and that can have\n an impact on mixed language programs, in particular those using I/O before\n calling the Ada elaboration routine (e.g. adainit). It is recommended to call\n-the Ada elaboration routine before performing any I/O or when impractical, flush\n-the common I/O streams and in particular Standard_Output before elaborating the\n-Ada code.\n+the Ada elaboration routine before performing any I/O or when impractical,\n+flush the common I/O streams and in particular Standard_Output before\n+elaborating the Ada code.\n \n @node FORM Strings\n @section FORM Strings\n@@ -12154,6 +12168,11 @@ of GNAT, and will generate a warning message.\n * Ada.Text_IO.C_Streams (a-tiocst.ads)::\n * Ada.Wide_Text_IO.C_Streams (a-wtcstr.ads)::\n * Ada.Wide_Wide_Text_IO.C_Streams (a-ztcstr.ads)::\n+* GNAT.Altivec (g-altive.ads)::\n+* GNAT.Altivec.Conversions (g-altcon.ads)::\n+* GNAT.Altivec.Vector_Operations (g-alveop.ads)::\n+* GNAT.Altivec.Vector_Types (g-alvety.ads)::\n+* GNAT.Altivec.Vector_Views (g-alvevi.ads)::\n * GNAT.Array_Split (g-arrspl.ads)::\n * GNAT.AWK (g-awk.ads)::\n * GNAT.Bounded_Buffers (g-boubuf.ads)::\n@@ -12451,6 +12470,55 @@ C streams and @code{Wide_Wide_Text_IO}.  The stream identifier can be\n extracted from a file opened on the Ada side, and an Ada file\n can be constructed from a stream opened on the C side.\n \n+@node GNAT.Altivec (g-altive.ads)\n+@section @code{GNAT.Altivec} (@file{g-altive.ads})\n+@cindex @code{GNAT.Altivec} (@file{g-altive.ads})\n+@cindex AltiVec\n+\n+@noindent\n+This is the root package of the GNAT AltiVec binding. It provides\n+definitions of constants and types common to all the versions of the\n+binding.\n+\n+@node GNAT.Altivec.Conversions (g-altcon.ads)\n+@section @code{GNAT.Altivec.Conversions} (@file{g-altcon.ads})\n+@cindex @code{GNAT.Altivec.Conversions} (@file{g-altcon.ads})\n+@cindex AltiVec\n+\n+@noindent\n+This package provides the Vector/View conversion routines.\n+\n+@node GNAT.Altivec.Vector_Operations (g-alveop.ads)\n+@section @code{GNAT.Altivec.Vector_Operations} (@file{g-alveop.ads})\n+@cindex @code{GNAT.Altivec.Vector_Operations} (@file{g-alveop.ads})\n+@cindex AltiVec\n+\n+@noindent\n+This package exposes the Ada interface to the AltiVec operations on\n+vector objects. A soft emulation is included by default in the GNAT\n+library. The hard binding is provided as a separate package. This unit\n+is common to both bindings.\n+\n+@node GNAT.Altivec.Vector_Types (g-alvety.ads)\n+@section @code{GNAT.Altivec.Vector_Types} (@file{g-alvety.ads})\n+@cindex @code{GNAT.Altivec.Vector_Types} (@file{g-alvety.ads})\n+@cindex AltiVec\n+\n+@noindent \n+This package exposes the various vector types part of the Ada binding\n+to AltiVec facilities.\n+\n+@node GNAT.Altivec.Vector_Views (g-alvevi.ads)\n+@section @code{GNAT.Altivec.Vector_Views} (@file{g-alvevi.ads})\n+@cindex @code{GNAT.Altivec.Vector_Views} (@file{g-alvevi.ads})\n+@cindex AltiVec\n+\n+@noindent\n+This package provides public 'View' data types from/to which private\n+vector representations can be converted via\n+GNAT.Altivec.Conversions. This allows convenient access to individual\n+vector elements and provides a simple way to initialize vector\n+objects.\n \n @node GNAT.Array_Split (g-arrspl.ads)\n @section @code{GNAT.Array_Split} (@file{g-arrspl.ads})"}, {"sha": "c49473b2cdb0deb32c41ff7faf9b0378f26db9fc", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 197, "deletions": 59, "changes": 256, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c8457a769f1e9d4eb71da6be5780d308a78da19/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c8457a769f1e9d4eb71da6be5780d308a78da19/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=9c8457a769f1e9d4eb71da6be5780d308a78da19", "patch": "@@ -191,6 +191,7 @@ AdaCore@*\n * Using the GNU make Utility::\n @end ifclear\n * Memory Management Issues::\n+* Stack Related Tools::\n * Creating Sample Bodies Using gnatstub::\n * Other Utility Programs::\n * Running and Debugging Ada Programs::\n@@ -272,7 +273,6 @@ Switches for gcc\n * Validity Checking::\n * Style Checking::\n * Run-Time Checks::\n-* Stack Overflow Checking::\n * Using gcc for Syntax Checking::\n * Using gcc for Semantic Checking::\n * Compiling Different Versions of Ada::\n@@ -461,6 +461,12 @@ Memory Management Issues\n * The gnatmem Tool::\n @end ifclear\n \n+Stack Related Tools\n+\n+* Stack Overflow Checking::\n+* Static Stack Usage Analysis::\n+* Dynamic Stack Usage Analysis::\n+\n Some Useful Memory Pools\n \n The GNAT Debug Pool Facility\n@@ -783,6 +789,10 @@ It also describes @command{gnatmem}, a utility that monitors dynamic\n allocation and deallocation and helps detect ``memory leaks''.\n @end ifclear\n \n+@item\n+@ref{Stack Related Tools}, describes some useful tools associated to stack.\n+In particular, dynamic and statick usage measurements.\n+\n @item\n @ref{Creating Sample Bodies Using gnatstub}, discusses @code{gnatstub},\n a utility that generates empty but compilable bodies for library units.\n@@ -3653,7 +3663,6 @@ compilation units.\n * Validity Checking::\n * Style Checking::\n * Run-Time Checks::\n-* Stack Overflow Checking::\n * Using gcc for Syntax Checking::\n * Using gcc for Semantic Checking::\n * Compiling Different Versions of Ada::\n@@ -5552,7 +5561,7 @@ a single character (however many bytes are needed in the encoding).\n @emph{Set maximum line length.}\n If the sequence ^M^MAX_LENGTH=^nnn, where nnn is a decimal number, appears in\n the string after @option{-gnaty} then the length of lines must not exceed the\n-given value.\n+given value. The maximum value that can be specified is 32767.\n \n @item ^n^STANDARD_CASING^\n @emph{Check casing of entities in Standard.}\n@@ -5841,62 +5850,6 @@ checks. You may modify them using either @code{Suppress} (to remove\n checks) or @code{Unsuppress} (to add back suppressed checks) pragmas in\n the program source.\n \n-@node Stack Overflow Checking\n-@subsection Stack Overflow Checking\n-@cindex Stack Overflow Checking\n-@cindex -fstack-check\n-\n-@noindent\n-For most operating systems, @command{gcc} does not perform stack overflow\n-checking by default. This means that if the main environment task or\n-some other task exceeds the available stack space, then unpredictable\n-behavior will occur.\n-\n-To activate stack checking, compile all units with the gcc option\n-@option{-fstack-check}. For example:\n-\n-@smallexample\n-gcc -c -fstack-check package1.adb\n-@end smallexample\n-\n-@noindent\n-Units compiled with this option will generate extra instructions to check\n-that any use of the stack (for procedure calls or for declaring local\n-variables in declare blocks) do not exceed the available stack space.\n-If the space is exceeded, then a @code{Storage_Error} exception is raised.\n-\n-For declared tasks, the stack size is always controlled by the size\n-given in an applicable @code{Storage_Size} pragma (or is set to\n-the default size if no pragma is used.\n-\n-For the environment task, the stack size depends on\n-system defaults and is unknown to the compiler. The stack\n-may even dynamically grow on some systems, precluding the\n-normal Ada semantics for stack overflow. In the worst case,\n-unbounded stack usage, causes unbounded stack expansion\n-resulting in the system running out of virtual memory.\n-\n-The stack checking may still work correctly if a fixed\n-size stack is allocated, but this cannot be guaranteed.\n-To ensure that a clean exception is signalled for stack\n-overflow, set the environment variable\n-@code{GNAT_STACK_LIMIT} to indicate the maximum\n-stack area that can be used, as in:\n-@cindex GNAT_STACK_LIMIT\n-\n-@smallexample\n-SET GNAT_STACK_LIMIT 1600\n-@end smallexample\n-\n-@noindent\n-The limit is given in kilobytes, so the above declaration would\n-set the stack limit of the environment task to 1.6 megabytes.\n-Note that the only purpose of this usage is to limit the amount\n-of stack used by the environment task. If it is necessary to\n-increase the amount of stack for the environment task, then this\n-is an operating systems issue, and must be addressed with the\n-appropriate operating systems commands.\n-\n @node Using gcc for Syntax Checking\n @subsection Using @command{gcc} for Syntax Checking\n @table @option\n@@ -6339,6 +6292,10 @@ integers without any kind of scaling.\n @item free @var{expr} [storage_pool = @var{xxx}]\n Shows the storage pool associated with a @code{free} statement.\n \n+@item [subtype or type declaration]\n+Used to list an equivalent declaration for an internally generated\n+type that is referenced elsewhere in the listing.\n+\n @item freeze @var{typename} [@var{actions}]\n Shows the point at which @var{typename} is frozen, with possible\n associated actions to be performed at the freeze point.\n@@ -7124,6 +7081,27 @@ Check only, no generation of binder output file.\n @cindex @option{^-C^/BIND_FILE=C^} (@command{gnatbind})\n Generate binder program in C\n \n+@item ^-D^/DEFAULT_SECONDARY_STACK_SIZE=nnnnn^\n+@cindex @option{^-D^/DEFAULT_SECONDARY_STACK_SIZE=nnnnn^} (@command{gnatbind})\n+This switch can be used to change the default secondary stack size value\n+to a specified size, where nnnnn is the size in bytes.\n+\n+The secondary stack is used to deal with functions that return a variable\n+sized result, for example a function returning an unconstrained\n+String. There are two ways in which this secondary stack is allocated.\n+\n+For most targets, the secondary stack is allocated as a chain of blocks\n+in the heap, and in this case the size of the chunk allocated is the minimum\n+of the default secondary stack size value,\n+and the actual size needed for the current allocation request.\n+\n+For certain targets, notably bare board targets and the VxWorks 653 target,\n+the secondary stack is allocated by carving off a fixed ratio chunk of the\n+primary task stack. For such targets, the environment task is special, and\n+in this case the default value is used to carve out a section of the\n+environment task stack.\n+\n+\n @item ^-e^/ELABORATION_DEPENDENCIES^\n @cindex @option{^-e^/ELABORATION_DEPENDENCIES^} (@command{gnatbind})\n Output complete list of elaboration-order dependencies.\n@@ -10182,10 +10160,12 @@ recognized by @code{GNAT}:\n    External_Name_Casing\n    Float_Representation\n    Initialize_Scalars\n+   Interrupt_State\n    License\n    Locking_Policy\n    Long_Float\n    Normalize_Scalars\n+   Persistent_BSS\n    Polling\n    Profile\n    Profile_Warnings\n@@ -18657,6 +18637,164 @@ and #3 thanks to the more precise associated backtrace.\n \n @end ifclear\n \n+@node Stack Related Tools\n+@chapter Stack Related Tools\n+\n+@noindent\n+This chapter describes some useful tools associated to stack. In\n+particular, dynamic and static usage measurements.\n+\n+@menu\n+* Stack Overflow Checking::\n+* Static Stack Usage Analysis::\n+* Dynamic Stack Usage Analysis::\n+@end menu\n+\n+@node Stack Overflow Checking\n+@section Stack Overflow Checking\n+@cindex Stack Overflow Checking\n+@cindex -fstack-check\n+\n+@noindent\n+For most operating systems, @command{gcc} does not perform stack overflow\n+checking by default. This means that if the main environment task or\n+some other task exceeds the available stack space, then unpredictable\n+behavior will occur.\n+\n+To activate stack checking, compile all units with the gcc option\n+@option{-fstack-check}. For example:\n+\n+@smallexample\n+gcc -c -fstack-check package1.adb\n+@end smallexample\n+\n+@noindent\n+Units compiled with this option will generate extra instructions to check\n+that any use of the stack (for procedure calls or for declaring local\n+variables in declare blocks) do not exceed the available stack space.\n+If the space is exceeded, then a @code{Storage_Error} exception is raised.\n+\n+For declared tasks, the stack size is always controlled by the size\n+given in an applicable @code{Storage_Size} pragma (or is set to\n+the default size if no pragma is used.\n+\n+For the environment task, the stack size depends on\n+system defaults and is unknown to the compiler. The stack\n+may even dynamically grow on some systems, precluding the\n+normal Ada semantics for stack overflow. In the worst case,\n+unbounded stack usage, causes unbounded stack expansion\n+resulting in the system running out of virtual memory.\n+\n+The stack checking may still work correctly if a fixed\n+size stack is allocated, but this cannot be guaranteed.\n+To ensure that a clean exception is signalled for stack\n+overflow, set the environment variable\n+@code{GNAT_STACK_LIMIT} to indicate the maximum\n+stack area that can be used, as in:\n+@cindex GNAT_STACK_LIMIT\n+\n+@smallexample\n+SET GNAT_STACK_LIMIT 1600\n+@end smallexample\n+\n+@noindent\n+The limit is given in kilobytes, so the above declaration would\n+set the stack limit of the environment task to 1.6 megabytes.\n+Note that the only purpose of this usage is to limit the amount\n+of stack used by the environment task. If it is necessary to\n+increase the amount of stack for the environment task, then this\n+is an operating systems issue, and must be addressed with the\n+appropriate operating systems commands.\n+\n+@node Static Stack Usage Analysis\n+@section Static Stack Usage Analysis\n+@cindex Static Stack Usage Analysis\n+@cindex -fstack-usage\n+\n+@noindent\n+Units compiled with -fstack-usage will generate an extra file containing\n+the maximum amount of stack used on a per-function basis. The filename for\n+the dump is made by appending\n+@file{.su} to the AUXNAME.  AUXNAME is generated from the name of\n+the output file, if explicitly specified and it is not an executable,\n+otherwise it is the basename of the source file.  An entry is made up\n+of three fields:\n+\n+@itemize\n+@item\n+The name of the function.\n+@item\n+A number of bytes.\n+@item\n+One or more qualifiers: @code{static}, @code{dynamic}, @code{bounded}.\n+@end itemize\n+\n+The qualifier @code{static} means that the function manipulates the stack\n+statically: a fixed number of bytes are allocated for the frame on function\n+entry and released on function exit; no stack adjustments are otherwise made\n+in the function.  The second field is this fixed number of bytes.\n+\n+The qualifier @code{dynamic} means that the function manipulates the stack\n+dynamically: in addition to the static allocation described above, stack\n+adjustments are made in the body of the function, for example to push/pop\n+arguments around function calls.  If the qualifier @code{bounded} is also\n+present, the amount of these adjustments is bounded at compile-time and\n+the second field is an upper bound of the total amount of stack used by\n+the function.  If it is not present, the amount of these adjustments is\n+not bounded at compile-time and the second field only represents the\n+bounded part.\n+\n+@node Dynamic Stack Usage Analysis\n+@section Dynamic Stack Usage Analysis\n+\n+@noindent\n+It is possible to measure the maximum amount of stack used by a task, by\n+adding a switch to @command{gnatbind}, as:\n+\n+@smallexample\n+$ gnatbind -u0 file\n+@end smallexample\n+\n+@noindent\n+Here, as soon as a task ends, its stack usage will be printed on stderr. It's\n+also possible to store a certain number of results to display them only at the\n+end of the execution. The following command will display the 100 first results\n+at the end of the programm, and others on the fly:\n+\n+@smallexample\n+$ gnatbind -u100 file\n+@end smallexample\n+\n+@noindent\n+Results are displayed in the folowing format:\n+\n+@noindent\n+INDEX | TASK NAME | STACK SIZE | MAX USAGE\n+\n+@noindent\n+where:\n+\n+@table @emph\n+@item INDEX\n+is a number associated with each task. Numbers before n parameter given\n+with -u flag correspond to stored results.\n+\n+@item TASK NAME\n+is the name of the task analyzed.\n+\n+@item STACK SIZE\n+is the maximum size for the stack. In order to prevent overflowed,\n+this value is a little smaller than the real limit.\n+\n+@item MAX USAGE\n+is the measure done by the stack analyzer.\n+\n+@end table\n+\n+@noindent\n+The environment task stack, e.g. the stack that contains the main unit, is\n+only processed when the environment variable GNAT_STACK_LIMIT is set.\n+\n @node Creating Sample Bodies Using gnatstub\n @chapter Creating Sample Bodies Using @command{gnatstub}\n @findex gnatstub"}, {"sha": "24ed0b44cc58adb6573a6215119b8ee1259fb022", "filename": "gcc/ada/system-mingw.ads", "status": "modified", "additions": 8, "deletions": 25, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c8457a769f1e9d4eb71da6be5780d308a78da19/gcc%2Fada%2Fsystem-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c8457a769f1e9d4eb71da6be5780d308a78da19/gcc%2Fada%2Fsystem-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-mingw.ads?ref=9c8457a769f1e9d4eb71da6be5780d308a78da19", "patch": "@@ -167,39 +167,22 @@ private\n    pragma Suppress_Initialization (Priorities_Mapping);\n    --  Suppress initialization in case gnat.adc specifies Normalize_Scalars\n \n-   --  On NT, the default mapping preserves the standard 31 priorities\n-   --  of the Ada model, but maps them using compression onto the 7\n-   --  priority levels available in NT.\n-\n-   --  To replace the default values of the Underlying_Priorities mapping,\n-   --  copy this source file into your build directory, edit the file to\n-   --  reflect your desired behavior, and recompile with the command:\n-\n-   --     $ gcc -c -O3 -gnatpgn system.ads\n-\n-   --  then recompile the run-time parts that depend on this package:\n-\n-   --     $ gnatmake -a -gnatn -O3 <your application>\n-\n-   --  then force rebuilding your application if you need different options:\n-\n-   --     $ gnatmake -f <your options> <your application>\n-\n    Underlying_Priorities : constant Priorities_Mapping :=\n-\n      (Priority'First .. 1        => -15,\n-\n       2 .. Default_Priority - 2  => -2,\n-\n       Default_Priority - 1       => -1,\n-\n       Default_Priority           => 0,\n-\n       Default_Priority + 1 .. 19 => 1,\n-\n       20 .. Priority'Last        => 2,\n-\n       Interrupt_Priority         => 15);\n+   --  On NT, the default mapping preserves the standard 31 priorities\n+   --  of the Ada model, but maps them using compression onto the 7\n+   --  priority levels available in NT.\n+\n+   --  To replace the default values of the Underlying_Priorities mapping,\n+   --  copy this source file into your build directory, edit the file to\n+   --  reflect your desired behavior, and recompile using Makefile.adalib\n+   --  which can be found under the adalib directory of your gnat installation\n \n    pragma Linker_Options (\"-Wl,--stack=0x2000000\");\n    --  This is used to change the default stack (32 MB) size for non tasking"}, {"sha": "a2a9927be0190dd0caafdaaf36db3c56043672f2", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c8457a769f1e9d4eb71da6be5780d308a78da19/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c8457a769f1e9d4eb71da6be5780d308a78da19/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=9c8457a769f1e9d4eb71da6be5780d308a78da19", "patch": "@@ -172,8 +172,9 @@ package Types is\n \n    type Column_Number is range 0 .. 32767;\n    for Column_Number'Size use 16;\n-   --  Column number (assume that 2**15 is large enough, see declaration of\n-   --  Hostparm.Max_Line_Length, and also processing for -gnatyM in Stylesw)\n+   --  Column number (assume that 2**15 - 1 is large enough). The range for\n+   --  this type is used to compute Hostparm.Max_Line_Length. See also the\n+   --  processing for -gnatyM in Stylesw).\n \n    No_Column_Number : constant Column_Number := 0;\n    --  Special value used to indicate no column number"}]}