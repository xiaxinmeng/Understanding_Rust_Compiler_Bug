{"sha": "852c6ec7ac379280e79ba706c60f2f1aad152f67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUyYzZlYzdhYzM3OTI4MGU3OWJhNzA2YzYwZjJmMWFhZDE1MmY2Nw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2002-06-10T22:33:08Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2002-06-10T22:33:08Z"}, "message": "cfgrtl.c (create_basic_block_structure): Remove index argument and use last_basic_block++ instead.\n\n2002-06-10  Roger Sayle  <roger@eyesopen.com>\n\t    Andreas Jaeger <aj@suse.de>\n\n\t* cfgrtl.c (create_basic_block_structure):  Remove index argument\n\tand use last_basic_block++ instead.  (create_basic_block): Update.\n\t* cfgbuild.c (find_basic_blocks_1): Likewise.\n\n\t* cfgrtl.c (compute_bb_for_insn): Remove unused \"max\" argument.\n\t* haifa-sched.c (sched_init): Update compute_bb_for_insn caller.\n\t* sched-ebb.c (schedule_ebbs): Likewise.\n\t* sched-rgn.c (schedule_insns): Likewise.\n\t* ssa-ccp.c (ssa_const_prop): Likewise.\n\t* ssa-dcs.c (ssa_eliminate_dead_code): Likewise.\n\t* toplev.c (rest_of_compilation): Likewise.\n\t* config/ia64/ia64.c (ia64_reorg): Likewise.\n\nCo-Authored-By: Andreas Jaeger <aj@suse.de>\n\nFrom-SVN: r54477", "tree": {"sha": "18f7b1f7e2568d85e0ef50e3fa0206d1d430b5f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18f7b1f7e2568d85e0ef50e3fa0206d1d430b5f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/852c6ec7ac379280e79ba706c60f2f1aad152f67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/852c6ec7ac379280e79ba706c60f2f1aad152f67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/852c6ec7ac379280e79ba706c60f2f1aad152f67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/852c6ec7ac379280e79ba706c60f2f1aad152f67/comments", "author": null, "committer": null, "parents": [{"sha": "60c86d4ee9e3256c02296b8953c5416decac0e1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60c86d4ee9e3256c02296b8953c5416decac0e1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60c86d4ee9e3256c02296b8953c5416decac0e1c"}], "stats": {"total": 72, "additions": 37, "deletions": 35}, "files": [{"sha": "f7cb2aa6fd40011254c80420d9bf42d8096a5899", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852c6ec7ac379280e79ba706c60f2f1aad152f67/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852c6ec7ac379280e79ba706c60f2f1aad152f67/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=852c6ec7ac379280e79ba706c60f2f1aad152f67", "patch": "@@ -1,3 +1,19 @@\n+2002-06-10  Roger Sayle  <roger@eyesopen.com>\n+\t    Andreas Jaeger <aj@suse.de>\n+\n+\t* cfgrtl.c (create_basic_block_structure):  Remove index argument\n+\tand use last_basic_block++ instead.  (create_basic_block): Update.\n+\t* cfgbuild.c (find_basic_blocks_1): Likewise.\n+\n+\t* cfgrtl.c (compute_bb_for_insn): Remove unused \"max\" argument.\n+\t* haifa-sched.c (sched_init): Update compute_bb_for_insn caller.\n+\t* sched-ebb.c (schedule_ebbs): Likewise.\n+\t* sched-rgn.c (schedule_insns): Likewise.\n+\t* ssa-ccp.c (ssa_const_prop): Likewise.\n+\t* ssa-dcs.c (ssa_eliminate_dead_code): Likewise.\n+\t* toplev.c (rest_of_compilation): Likewise.\n+\t* config/ia64/ia64.c (ia64_reorg): Likewise.\n+\n 2002-06-10  Roger Sayle  <roger@eyesopen.com>\n \n \t* simplify-rtx.c (simplify_replace_rtx): Allow replacement"}, {"sha": "e50c020dc55f5ad258cbb03de0c658d77cba33ef", "filename": "gcc/basic-block.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852c6ec7ac379280e79ba706c60f2f1aad152f67/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852c6ec7ac379280e79ba706c60f2f1aad152f67/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=852c6ec7ac379280e79ba706c60f2f1aad152f67", "patch": "@@ -306,7 +306,7 @@ extern struct basic_block_def entry_exit_blocks[2];\n #define BLOCK_NUM(INSN)\t      (BLOCK_FOR_INSN (INSN)->index + 0)\n #define set_block_for_insn(INSN, BB)  (BLOCK_FOR_INSN (INSN) = BB)\n \n-extern void compute_bb_for_insn\t\tPARAMS ((int));\n+extern void compute_bb_for_insn\t\tPARAMS ((void));\n extern void free_bb_for_insn\t\tPARAMS ((void));\n extern void update_bb_for_insn\t\tPARAMS ((basic_block));\n \n@@ -333,7 +333,7 @@ extern void remove_edge\t\t\tPARAMS ((edge));\n extern void redirect_edge_succ\t\tPARAMS ((edge, basic_block));\n extern edge redirect_edge_succ_nodup\tPARAMS ((edge, basic_block));\n extern void redirect_edge_pred\t\tPARAMS ((edge, basic_block));\n-extern basic_block create_basic_block_structure PARAMS ((int, rtx, rtx, rtx, basic_block));\n+extern basic_block create_basic_block_structure PARAMS ((rtx, rtx, rtx, basic_block));\n extern basic_block create_basic_block\tPARAMS ((rtx, rtx, basic_block));\n extern int flow_delete_block\t\tPARAMS ((basic_block));\n extern int flow_delete_block_noexpunge\tPARAMS ((basic_block));"}, {"sha": "0c9c279a30281335f09aaa3cd488a7b549d638f5", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852c6ec7ac379280e79ba706c60f2f1aad152f67/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852c6ec7ac379280e79ba706c60f2f1aad152f67/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=852c6ec7ac379280e79ba706c60f2f1aad152f67", "patch": "@@ -493,7 +493,7 @@ find_basic_blocks_1 (f)\n       if ((GET_CODE (insn) == CODE_LABEL || GET_CODE (insn) == BARRIER)\n \t  && head)\n \t{\n-\t  prev = create_basic_block_structure (last_basic_block++, head, end, bb_note, prev);\n+\t  prev = create_basic_block_structure (head, end, bb_note, prev);\n \t  head = end = NULL_RTX;\n \t  bb_note = NULL_RTX;\n \t}\n@@ -507,7 +507,7 @@ find_basic_blocks_1 (f)\n \n       if (head && control_flow_insn_p (insn))\n \t{\n-\t  prev = create_basic_block_structure (last_basic_block++, head, end, bb_note, prev);\n+\t  prev = create_basic_block_structure (head, end, bb_note, prev);\n \t  head = end = NULL_RTX;\n \t  bb_note = NULL_RTX;\n \t}\n@@ -589,7 +589,7 @@ find_basic_blocks_1 (f)\n     }\n \n   if (head != NULL_RTX)\n-    create_basic_block_structure (last_basic_block++, head, end, bb_note, prev);\n+    create_basic_block_structure (head, end, bb_note, prev);\n   else if (bb_note)\n     delete_insn (bb_note);\n \n@@ -612,7 +612,6 @@ find_basic_blocks (f, nregs, file)\n      int nregs ATTRIBUTE_UNUSED;\n      FILE *file ATTRIBUTE_UNUSED;\n {\n-  int max_uid;\n   basic_block bb;\n \n   timevar_push (TV_CFG);\n@@ -653,14 +652,7 @@ find_basic_blocks (f, nregs, file)\n      tagged directly with the basic block that it starts.  It is used for\n      more than that currently, but IMO that is the only valid use.  */\n \n-  max_uid = get_max_uid ();\n-#ifdef AUTO_INC_DEC\n-  /* Leave space for insns life_analysis makes in some cases for auto-inc.\n-     These cases are rare, so we don't need too much space.  */\n-  max_uid += max_uid / 10;\n-#endif\n-\n-  compute_bb_for_insn (max_uid);\n+  compute_bb_for_insn ();\n \n   /* Discover the edges of our cfg.  */\n   make_edges (label_value_list, ENTRY_BLOCK_PTR->next_bb, EXIT_BLOCK_PTR->prev_bb, 0);"}, {"sha": "70bf73b4f129e3f49404ad79d717d3dfe8a6502c", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852c6ec7ac379280e79ba706c60f2f1aad152f67/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852c6ec7ac379280e79ba706c60f2f1aad152f67/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=852c6ec7ac379280e79ba706c60f2f1aad152f67", "patch": "@@ -245,8 +245,7 @@ delete_insn_chain_and_edges (first, last)\n    AFTER is the basic block we should be put after.  */\n \n basic_block\n-create_basic_block_structure (index, head, end, bb_note, after)\n-     int index;\n+create_basic_block_structure (head, end, bb_note, after)\n      rtx head, end, bb_note;\n      basic_block after;\n {\n@@ -304,10 +303,10 @@ create_basic_block_structure (index, head, end, bb_note, after)\n \n   bb->head = head;\n   bb->end = end;\n-  bb->index = index;\n+  bb->index = last_basic_block++;\n   bb->flags = BB_NEW;\n   link_block (bb, after);\n-  BASIC_BLOCK (index) = bb;\n+  BASIC_BLOCK (bb->index) = bb;\n   update_bb_for_insn (bb);\n \n   /* Tag the block so that we know it has been used when considering\n@@ -328,14 +327,13 @@ create_basic_block (head, end, after)\n      basic_block after;\n {\n   basic_block bb;\n-  int index = last_basic_block++;\n \n   /* Place the new block just after the end.  */\n-  VARRAY_GROW (basic_block_info, last_basic_block);\n+  VARRAY_GROW (basic_block_info, last_basic_block+1);\n \n   n_basic_blocks++;\n \n-  bb = create_basic_block_structure (index, head, end, NULL, after);\n+  bb = create_basic_block_structure (head, end, NULL, after);\n   bb->aux = NULL;\n   return bb;\n }\n@@ -423,12 +421,10 @@ flow_delete_block (b)\n   return deleted_handler;\n }\n \f\n-/* Records the basic block struct in BB_FOR_INSN, for every instruction\n-   indexed by INSN_UID.  MAX is the size of the array.  */\n+/* Records the basic block struct in BLOCK_FOR_INSN for every insn.  */\n \n void\n-compute_bb_for_insn (max)\n-     int max;\n+compute_bb_for_insn ()\n {\n   basic_block bb;\n "}, {"sha": "7601d761847cadc4c319ad6d4a9e6c2b3f416a70", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852c6ec7ac379280e79ba706c60f2f1aad152f67/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852c6ec7ac379280e79ba706c60f2f1aad152f67/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=852c6ec7ac379280e79ba706c60f2f1aad152f67", "patch": "@@ -6933,7 +6933,7 @@ ia64_reorg (insns)\n {\n   /* We are freeing block_for_insn in the toplev to keep compatibility\n      with old MDEP_REORGS that are not CFG based.  Recompute it now.  */\n-  compute_bb_for_insn (get_max_uid ());\n+  compute_bb_for_insn ();\n \n   /* If optimizing, we'll have split before scheduling.  */\n   if (optimize == 0)"}, {"sha": "c39b0505111ddd30df200214eefcb9703182241b", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852c6ec7ac379280e79ba706c60f2f1aad152f67/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852c6ec7ac379280e79ba706c60f2f1aad152f67/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=852c6ec7ac379280e79ba706c60f2f1aad152f67", "patch": "@@ -2368,7 +2368,7 @@ sched_init (dump_file)\n \n   init_dependency_caches (luid);\n \n-  compute_bb_for_insn (old_max_uid);\n+  compute_bb_for_insn ();\n \n   init_alias_analysis ();\n "}, {"sha": "43bf9ab4ca4b6778b354cd21beed9175c3929234", "filename": "gcc/sched-ebb.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852c6ec7ac379280e79ba706c60f2f1aad152f67/gcc%2Fsched-ebb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852c6ec7ac379280e79ba706c60f2f1aad152f67/gcc%2Fsched-ebb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-ebb.c?ref=852c6ec7ac379280e79ba706c60f2f1aad152f67", "patch": "@@ -291,7 +291,7 @@ schedule_ebbs (dump_file)\n   current_sched_info = &ebb_sched_info;\n \n   allocate_reg_life_data ();\n-  compute_bb_for_insn (get_max_uid ());\n+  compute_bb_for_insn ();\n \n   /* Schedule every region in the subroutine.  */\n   FOR_EACH_BB (bb)"}, {"sha": "30b2cf0d8f5ea6090dddfe4182bbe72d401e5b26", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852c6ec7ac379280e79ba706c60f2f1aad152f67/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852c6ec7ac379280e79ba706c60f2f1aad152f67/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=852c6ec7ac379280e79ba706c60f2f1aad152f67", "patch": "@@ -3016,7 +3016,7 @@ schedule_insns (dump_file)\n      best way to test for this kind of thing...  */\n \n   allocate_reg_life_data ();\n-  compute_bb_for_insn (get_max_uid ());\n+  compute_bb_for_insn ();\n \n   any_large_regions = 0;\n   large_region_blocks = sbitmap_alloc (last_basic_block);"}, {"sha": "af4c59356dc7446ef770b656cad47a09c4258047", "filename": "gcc/ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852c6ec7ac379280e79ba706c60f2f1aad152f67/gcc%2Fssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852c6ec7ac379280e79ba706c60f2f1aad152f67/gcc%2Fssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa-ccp.c?ref=852c6ec7ac379280e79ba706c60f2f1aad152f67", "patch": "@@ -992,7 +992,7 @@ ssa_const_prop ()\n \t      DF_RD_CHAIN | DF_RU_CHAIN | DF_REG_INFO | DF_HARD_REGS);\n \n   /* We need mappings from insn to its containing block.  */\n-  compute_bb_for_insn (get_max_uid ());\n+  compute_bb_for_insn ();\n \n   /* Perform a quick and dirty dead code elimination pass.  This is not\n      as aggressive as it could be, but it's good enough to clean up a"}, {"sha": "db13b9ae7e8fe10ba7cc0ce430d7cbe075b2bba9", "filename": "gcc/ssa-dce.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852c6ec7ac379280e79ba706c60f2f1aad152f67/gcc%2Fssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852c6ec7ac379280e79ba706c60f2f1aad152f67/gcc%2Fssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa-dce.c?ref=852c6ec7ac379280e79ba706c60f2f1aad152f67", "patch": "@@ -500,8 +500,6 @@ ssa_eliminate_dead_code ()\n   int *pdom;\n   struct edge_list *el;\n \n-  int max_insn_uid = get_max_uid ();\n-\n   /* Initialize the data structures.  */\n   mark_all_insn_unnecessary ();\n   VARRAY_RTX_INIT (unprocessed_instructions, 64,\n@@ -511,7 +509,7 @@ ssa_eliminate_dead_code ()\n   /* Prepare for use of BLOCK_NUM ().  */\n   connect_infinite_loops_to_exit ();\n    /* Be careful not to clear the added edges.  */\n-  compute_bb_for_insn (max_insn_uid);\n+  compute_bb_for_insn ();\n \n   /* Compute control dependence.  */\n   pdom = (int *) xmalloc (last_basic_block * sizeof (int));"}, {"sha": "12be2b1e6ee8d13b15ede7f340cbb669379f6a3e", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852c6ec7ac379280e79ba706c60f2f1aad152f67/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852c6ec7ac379280e79ba706c60f2f1aad152f67/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=852c6ec7ac379280e79ba706c60f2f1aad152f67", "patch": "@@ -2746,7 +2746,7 @@ rest_of_compilation (decl)\n      we'll save big on memory.  */\n   renumber_insns (rtl_dump_file);\n   if (optimize)\n-    compute_bb_for_insn (get_max_uid ());\n+    compute_bb_for_insn ();\n   timevar_pop (TV_JUMP);\n \n   close_dump_file (DFI_jump, print_rtl_with_bb, insns);\n@@ -2794,7 +2794,7 @@ rest_of_compilation (decl)\n       /* The second pass of jump optimization is likely to have\n          removed a bunch more instructions.  */\n       renumber_insns (rtl_dump_file);\n-      compute_bb_for_insn (get_max_uid ());\n+      compute_bb_for_insn ();\n \n       timevar_pop (TV_CSE);\n       close_dump_file (DFI_cse, print_rtl_with_bb, insns);"}]}