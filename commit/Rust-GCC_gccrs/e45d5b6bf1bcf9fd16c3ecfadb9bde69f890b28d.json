{"sha": "e45d5b6bf1bcf9fd16c3ecfadb9bde69f890b28d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ1ZDViNmJmMWJjZjlmZDE2YzNlY2ZhZGI5YmRlNjlmODkwYjI4ZA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-08-31T17:13:29Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-08-31T17:13:29Z"}, "message": "Add attribute returns nonnull to get_range_query.\n\ngcc/ChangeLog:\n\t* function.h (function): Add comments.\n\t(get_range_query): Same.  Add attribute returns nonnull.", "tree": {"sha": "0cb54c17c2952c7238b02b5d5cfdc3f284fe29a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cb54c17c2952c7238b02b5d5cfdc3f284fe29a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e45d5b6bf1bcf9fd16c3ecfadb9bde69f890b28d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e45d5b6bf1bcf9fd16c3ecfadb9bde69f890b28d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e45d5b6bf1bcf9fd16c3ecfadb9bde69f890b28d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e45d5b6bf1bcf9fd16c3ecfadb9bde69f890b28d/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cacdef0d1a3f587691735d1822d584b68eba593", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cacdef0d1a3f587691735d1822d584b68eba593", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cacdef0d1a3f587691735d1822d584b68eba593"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "36003e7576a882b2d0e322bc509593dab4e0eb0f", "filename": "gcc/function.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45d5b6bf1bcf9fd16c3ecfadb9bde69f890b28d/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45d5b6bf1bcf9fd16c3ecfadb9bde69f890b28d/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=e45d5b6bf1bcf9fd16c3ecfadb9bde69f890b28d", "patch": "@@ -312,7 +312,8 @@ struct GTY(()) function {\n \n   /* Range query mechanism for functions.  The default is to pick up\n      global ranges.  If a pass wants on-demand ranges OTOH, it must\n-     call enable/disable_ranger().  */\n+     call enable/disable_ranger().  The pointer is never null.  It\n+     should be queried by calling get_range_query().  */\n   range_query * GTY ((skip)) x_range_query;\n \n   /* Last statement uid.  */\n@@ -719,10 +720,10 @@ extern const char *current_function_name (void);\n extern void used_types_insert (tree);\n \n /* Returns the currently active range access class.  When there is no active\n-   range class, global ranges are used.  */\n+   range class, global ranges are used.  Never returns null.  */\n \n-inline range_query *\n-get_range_query (struct function *fun)\n+ATTRIBUTE_RETURNS_NONNULL inline range_query *\n+get_range_query (const struct function *fun)\n {\n   return fun->x_range_query;\n }"}]}