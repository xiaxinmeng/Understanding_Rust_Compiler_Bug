{"sha": "15280699c13f799f25bfc95656415c0ec2c1b901", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUyODA2OTljMTNmNzk5ZjI1YmZjOTU2NTY0MTVjMGVjMmMxYjkwMQ==", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2020-06-13T19:28:28Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:16Z"}, "message": "Struct record compilation and type resolution", "tree": {"sha": "ab67df319d15d12a9c626a03a0cd9827b54c2a77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab67df319d15d12a9c626a03a0cd9827b54c2a77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15280699c13f799f25bfc95656415c0ec2c1b901", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15280699c13f799f25bfc95656415c0ec2c1b901", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15280699c13f799f25bfc95656415c0ec2c1b901", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15280699c13f799f25bfc95656415c0ec2c1b901/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84ed897a9b5dcb28cc0cf8a85296e3628b2f0e17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84ed897a9b5dcb28cc0cf8a85296e3628b2f0e17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84ed897a9b5dcb28cc0cf8a85296e3628b2f0e17"}], "stats": {"total": 62, "additions": 55, "deletions": 7}, "files": [{"sha": "b8baabb285f7c04cff7131946eef4dee8ce4a8de", "filename": "gcc/rust/analysis/rust-type-resolution.cc", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15280699c13f799f25bfc95656415c0ec2c1b901/gcc%2Frust%2Fanalysis%2Frust-type-resolution.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15280699c13f799f25bfc95656415c0ec2c1b901/gcc%2Frust%2Fanalysis%2Frust-type-resolution.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-type-resolution.cc?ref=15280699c13f799f25bfc95656415c0ec2c1b901", "patch": "@@ -690,9 +690,24 @@ TypeResolution::visit (AST::Function &function)\n void\n TypeResolution::visit (AST::TypeAlias &type_alias)\n {}\n+\n void\n TypeResolution::visit (AST::StructStruct &struct_item)\n-{}\n+{\n+  for (auto &field : struct_item.fields)\n+    {\n+      if (!isTypeInScope (field.field_type.get (),\n+\t\t\t  Linemap::unknown_location ()))\n+\t{\n+\t  rust_fatal_error (Linemap::unknown_location (),\n+\t\t\t    \"unknown type in struct field\");\n+\t  return;\n+\t}\n+    }\n+\n+  structsPerBlock.Insert (struct_item.struct_name, &struct_item);\n+}\n+\n void\n TypeResolution::visit (AST::TupleStruct &tuple_struct)\n {}"}, {"sha": "e9fec8322d7eae924815c1c8d198966f9abee3ba", "filename": "gcc/rust/analysis/rust-type-resolution.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15280699c13f799f25bfc95656415c0ec2c1b901/gcc%2Frust%2Fanalysis%2Frust-type-resolution.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15280699c13f799f25bfc95656415c0ec2c1b901/gcc%2Frust%2Fanalysis%2Frust-type-resolution.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-type-resolution.h?ref=15280699c13f799f25bfc95656415c0ec2c1b901", "patch": "@@ -224,6 +224,8 @@ class TypeResolution : public Resolution\n   bool isTypeInScope (AST::Type *type, Location locus);\n \n   Scope<AST::Function *> functionScope;\n+  Scope<AST::LetStmt *> localsPerBlock;\n+  Scope<AST::StructStruct *> structsPerBlock;\n };\n \n } // namespace Analysis"}, {"sha": "07d9a6c632a301a6e3e957ed03d6500d964f536b", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15280699c13f799f25bfc95656415c0ec2c1b901/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15280699c13f799f25bfc95656415c0ec2c1b901/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=15280699c13f799f25bfc95656415c0ec2c1b901", "patch": "@@ -1577,7 +1577,7 @@ class TypeAlias : public VisItem, public TraitImplItem\n // Rust base struct declaration AST node - abstract base class\n class Struct : public VisItem\n {\n-protected:\n+public:\n   // protected to enable access by derived classes - allows better as_string\n   Identifier struct_name;\n \n@@ -1590,7 +1590,6 @@ class Struct : public VisItem\n \n   Location locus;\n \n-public:\n   // Returns whether struct has generic parameters.\n   inline bool has_generics () const { return !generic_params.empty (); }\n \n@@ -1653,7 +1652,7 @@ class Struct : public VisItem\n // A single field in a struct\n struct StructField\n {\n-private:\n+public:\n   // bool has_outer_attributes;\n   ::std::vector<Attribute> outer_attrs;\n \n@@ -1666,7 +1665,6 @@ struct StructField\n \n   // should this store location info?\n \n-public:\n   // Returns whether struct field has any outer attributes.\n   inline bool has_outer_attributes () const { return !outer_attrs.empty (); }\n \n@@ -1725,10 +1723,10 @@ struct StructField\n // Rust struct declaration with true struct type AST node\n class StructStruct : public Struct\n {\n+public:\n   ::std::vector<StructField> fields;\n   bool is_unit;\n \n-public:\n   ::std::string as_string () const;\n \n   // Mega-constructor with all possible fields"}, {"sha": "3435f8f3329cc7da01d85f5c8a7a9beb04ac189b", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15280699c13f799f25bfc95656415c0ec2c1b901/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15280699c13f799f25bfc95656415c0ec2c1b901/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=15280699c13f799f25bfc95656415c0ec2c1b901", "patch": "@@ -1004,9 +1004,42 @@ Compilation::visit (AST::Function &function)\n void\n Compilation::visit (AST::TypeAlias &type_alias)\n {}\n+\n void\n Compilation::visit (AST::StructStruct &struct_item)\n-{}\n+{\n+  std::vector<Backend::Btyped_identifier> fields;\n+  for (auto &field : struct_item.fields)\n+    {\n+      translatedType = NULL;\n+      field.field_type->accept_vis (*this);\n+      if (translatedType == NULL)\n+\t{\n+\t  rust_fatal_error (\n+\t    struct_item.locus /* StructField is mi sing locus */,\n+\t    \"failed to compile struct field\");\n+\t  return;\n+\t}\n+\n+      fields.push_back (Backend::Btyped_identifier (\n+\tfield.field_name, translatedType,\n+\tstruct_item.locus /* StructField is mi sing locus */));\n+    }\n+\n+  auto compiledStruct\n+    = backend->placeholder_struct_type (struct_item.struct_name,\n+\t\t\t\t\tstruct_item.locus);\n+  bool ok = backend->set_placeholder_struct_type (compiledStruct, fields);\n+  if (!ok)\n+    {\n+      rust_fatal_error (struct_item.locus, \"failed to compile struct\");\n+      return;\n+    }\n+\n+  type_decls.push_back (compiledStruct);\n+  scope.InsertType (struct_item.struct_name, compiledStruct);\n+}\n+\n void\n Compilation::visit (AST::TupleStruct &tuple_struct)\n {}"}]}