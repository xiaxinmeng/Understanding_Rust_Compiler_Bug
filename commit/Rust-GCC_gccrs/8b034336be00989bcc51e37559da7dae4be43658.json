{"sha": "8b034336be00989bcc51e37559da7dae4be43658", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIwMzQzMzZiZTAwOTg5YmNjNTFlMzc1NTlkYTdkYWU0YmU0MzY1OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-18T09:44:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-18T09:44:45Z"}, "message": "[multiple changes]\n\n2014-07-18  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Replace_Type_References_Generic): Use type entity\n\tas a parameter, rather than its Chars field, in order to locate\n\tfreeze node of type. If the predicate or invariant has references\n\tto types other than the one to which the contract applies, these\n\ttypes must be frozen, and the corresponding predicate functions\n\tcreated, before that freeze node.\n\n2014-07-18  Robert Dewar  <dewar@adacore.com>\n\n\t* freeze.adb, einfo.ads, einfo.adb: Minor code reorganization.\n\t* par_sco.adb: Minor reformatting.\n\n2014-07-18  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_ch4.adb (Real_Range_Check): Turn off\n\tthe Do_Range_Check flag on the conversion's current Expression\n\targument rather than on the originally captured Operand node,\n\tas Expression may reflect a rewriting (as in conversions to a\n\tfixed-point type).\n\n2014-07-18  Vincent Celier  <celier@adacore.com>\n\n\t* ali.adb (Scan_ALI): Set Sdep_Record.Unit_Name, when the unit\n\tis not a subunit.\n\t* ali.ads (Sdep_Record): New component Unit_Name.\n\t* lib-writ.adb (Write_ALI): Write the unit name in D lines.\n\t* makeutl.adb (Check_Source_Info_In_ALI): Return False if a\n\tdependent unit is in a project and the source file name is not\n\tone of its sources.\n\nFrom-SVN: r212795", "tree": {"sha": "d355b5a341e9f34ee86e2ce0bd6eba032a30a100", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d355b5a341e9f34ee86e2ce0bd6eba032a30a100"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b034336be00989bcc51e37559da7dae4be43658", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b034336be00989bcc51e37559da7dae4be43658", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b034336be00989bcc51e37559da7dae4be43658", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b034336be00989bcc51e37559da7dae4be43658/comments", "author": null, "committer": null, "parents": [{"sha": "47a98b977df3ea48f658acfcce0f3cfb0d7db6b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47a98b977df3ea48f658acfcce0f3cfb0d7db6b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47a98b977df3ea48f658acfcce0f3cfb0d7db6b0"}], "stats": {"total": 155, "additions": 113, "deletions": 42}, "files": [{"sha": "f69a5704e635f8c262d73849e0e4e166183b3d1a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b034336be00989bcc51e37559da7dae4be43658/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b034336be00989bcc51e37559da7dae4be43658/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8b034336be00989bcc51e37559da7dae4be43658", "patch": "@@ -1,3 +1,35 @@\n+2014-07-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Replace_Type_References_Generic): Use type entity\n+\tas a parameter, rather than its Chars field, in order to locate\n+\tfreeze node of type. If the predicate or invariant has references\n+\tto types other than the one to which the contract applies, these\n+\ttypes must be frozen, and the corresponding predicate functions\n+\tcreated, before that freeze node.\n+\n+2014-07-18  Robert Dewar  <dewar@adacore.com>\n+\n+\t* freeze.adb, einfo.ads, einfo.adb: Minor code reorganization.\n+\t* par_sco.adb: Minor reformatting.\n+\n+2014-07-18  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch4.adb (Real_Range_Check): Turn off\n+\tthe Do_Range_Check flag on the conversion's current Expression\n+\targument rather than on the originally captured Operand node,\n+\tas Expression may reflect a rewriting (as in conversions to a\n+\tfixed-point type).\n+\n+2014-07-18  Vincent Celier  <celier@adacore.com>\n+\n+\t* ali.adb (Scan_ALI): Set Sdep_Record.Unit_Name, when the unit\n+\tis not a subunit.\n+\t* ali.ads (Sdep_Record): New component Unit_Name.\n+\t* lib-writ.adb (Write_ALI): Write the unit name in D lines.\n+\t* makeutl.adb (Check_Source_Info_In_ALI): Return False if a\n+\tdependent unit is in a project and the source file name is not\n+\tone of its sources.\n+\n 2014-07-18  Bob Duff  <duff@adacore.com>\n \n \t* s-addima.ads: Minor: add comment."}, {"sha": "73db0e88b507c961d4b7a59de4ab7af9217dae13", "filename": "gcc/ada/ali.adb", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b034336be00989bcc51e37559da7dae4be43658/gcc%2Fada%2Fali.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b034336be00989bcc51e37559da7dae4be43658/gcc%2Fada%2Fali.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.adb?ref=8b034336be00989bcc51e37559da7dae4be43658", "patch": "@@ -2317,29 +2317,37 @@ package body ALI is\n                end if;\n             end;\n \n-            --  Acquire subunit and reference file name entries\n+            --  Acquire (sub)unit and reference file name entries\n \n             Sdep.Table (Sdep.Last).Subunit_Name := No_Name;\n+            Sdep.Table (Sdep.Last).Unit_Name    := No_Name;\n             Sdep.Table (Sdep.Last).Rfile        :=\n               Sdep.Table (Sdep.Last).Sfile;\n             Sdep.Table (Sdep.Last).Start_Line   := 1;\n \n             if not At_Eol then\n                Skip_Space;\n \n-               --  Here for subunit name\n+               --  Here for (sub)unit name\n \n                if Nextc not in '0' .. '9' then\n                   Name_Len := 0;\n                   while not At_End_Of_Field loop\n                      Add_Char_To_Name_Buffer (Getc);\n                   end loop;\n \n-                  --  Set the subunit name. Note that we use Name_Find rather\n+                  --  Set the (sub)unit name. Note that we use Name_Find rather\n                   --  than Name_Enter here as the subunit name may already\n                   --  have been put in the name table by the Project Manager.\n \n-                  Sdep.Table (Sdep.Last).Subunit_Name := Name_Find;\n+                  if Name_Len <= 2\n+                    or else Name_Buffer (Name_Len - 1) /= '%'\n+                  then\n+                     Sdep.Table (Sdep.Last).Subunit_Name := Name_Find;\n+                  else\n+                     Name_Len := Name_Len - 2;\n+                     Sdep.Table (Sdep.Last).Unit_Name := Name_Find;\n+                  end if;\n \n                   Skip_Space;\n                end if;"}, {"sha": "be5f7932b5de3c432d923e9886f67b2a0a28e619", "filename": "gcc/ada/ali.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b034336be00989bcc51e37559da7dae4be43658/gcc%2Fada%2Fali.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b034336be00989bcc51e37559da7dae4be43658/gcc%2Fada%2Fali.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.ads?ref=8b034336be00989bcc51e37559da7dae4be43658", "patch": "@@ -767,6 +767,9 @@ package ALI is\n       Subunit_Name : Name_Id;\n       --  Name_Id for subunit name if present, else No_Name\n \n+      Unit_Name : Name_Id;\n+      --  Name_Id for the unit name, if not a subunit. No_Name for a subunit.\n+\n       Rfile : File_Name_Type;\n       --  Reference file name. Same as Sfile unless a Source_Reference pragma\n       --  was used, in which case it reflects the name used in the pragma."}, {"sha": "a2abb45775de028d26862564744412850cf78b92", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b034336be00989bcc51e37559da7dae4be43658/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b034336be00989bcc51e37559da7dae4be43658/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=8b034336be00989bcc51e37559da7dae4be43658", "patch": "@@ -7017,6 +7017,15 @@ package body Einfo is\n         Ekind (Id) = E_Abstract_State and then Nkind (Parent (Id)) = N_Null;\n    end Is_Null_State;\n \n+   ---------------------\n+   -- Is_Packed_Array --\n+   ---------------------\n+\n+   function Is_Packed_Array (Id : E) return B is\n+   begin\n+      return Is_Array_Type (Id) and then Is_Packed (Id);\n+   end Is_Packed_Array;\n+\n    -----------------------------------\n    -- Is_Package_Or_Generic_Package --\n    -----------------------------------"}, {"sha": "42439ad0ea7214046e69284b69250ec3d2d7f6c0", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b034336be00989bcc51e37559da7dae4be43658/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b034336be00989bcc51e37559da7dae4be43658/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=8b034336be00989bcc51e37559da7dae4be43658", "patch": "@@ -2703,6 +2703,9 @@ package Einfo is\n --       out that the component size is not suitable for bit packing, the\n --       Is_Packed flag gets turned off.\n \n+--    Is_Packed_Array (synth)\n+--       Applies to all entities, true if entity is for a packed array.\n+\n --    Is_Packed_Array_Type (Flag138)\n --       Defined in all entities. This flag is set on the entity for the type\n --       used to implement a packed array (either a modular type, or a subtype\n@@ -6874,6 +6877,7 @@ package Einfo is\n    function Is_Ghost_Subprogram                 (Id : E) return B;\n    function Is_Null_State                       (Id : E) return B;\n    function Is_Package_Or_Generic_Package       (Id : E) return B;\n+   function Is_Packed_Array                     (Id : E) return B;\n    function Is_Prival                           (Id : E) return B;\n    function Is_Protected_Component              (Id : E) return B;\n    function Is_Protected_Interface              (Id : E) return B;\n@@ -8634,6 +8638,7 @@ package Einfo is\n    pragma Inline (Base_Type);\n    pragma Inline (Is_Base_Type);\n    pragma Inline (Is_Package_Or_Generic_Package);\n+   pragma Inline (Is_Packed_Array);\n    pragma Inline (Is_Volatile);\n    pragma Inline (Is_Wrapper_Package);\n    pragma Inline (Known_RM_Size);"}, {"sha": "725efabd3bb57017e6dfa78c20ebe4f98344849f", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b034336be00989bcc51e37559da7dae4be43658/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b034336be00989bcc51e37559da7dae4be43658/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=8b034336be00989bcc51e37559da7dae4be43658", "patch": "@@ -10191,7 +10191,13 @@ package body Exp_Ch4 is\n                     and then S_Lov >= D_Lov\n                     and then S_Hiv <= D_Hiv\n                   then\n-                     Set_Do_Range_Check (Operand, False);\n+                     --  Unset the range check flag on the current value of\n+                     --  Expression (N), since the captured Operand may have\n+                     --  been rewritten (such as for the case of a conversion\n+                     --  to a fixed-point type).\n+\n+                     Set_Do_Range_Check (Expression (N), False);\n+\n                      return;\n                   end if;\n                end;"}, {"sha": "fb359420ec9c1ea2bedc4b256afb925c79919e9a", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b034336be00989bcc51e37559da7dae4be43658/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b034336be00989bcc51e37559da7dae4be43658/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=8b034336be00989bcc51e37559da7dae4be43658", "patch": "@@ -1095,20 +1095,6 @@ package body Freeze is\n \n       Component_Aliased : Boolean;\n \n-      function Is_Packed_Array (T : Entity_Id) return Boolean;\n-      --  True for a packed array type\n-\n-      ---------------------\n-      -- Is_Packed_Array --\n-      ---------------------\n-\n-      function Is_Packed_Array (T : Entity_Id) return Boolean is\n-      begin\n-         return Is_Array_Type (T) and then Is_Packed (T);\n-      end Is_Packed_Array;\n-\n-   --  Start of processing for Check_Component_Storage_Order\n-\n    begin\n       --  Record case\n \n@@ -1121,10 +1107,9 @@ package body Freeze is\n             Component_Aliased := False;\n \n          else\n-            --  If a component clause is present, check whether component\n-            --  starts on a storage element boundary. Otherwise conservatively\n-            --  assume it does so only in the case where the record is not\n-            --  packed.\n+            --  If a component clause is present, check if the component starts\n+            --  on a storage element boundary. Otherwise conservatively assume\n+            --  it does so only in the case where the record is not packed.\n \n             if Present (Component_Clause (Comp)) then\n                Comp_Byte_Aligned :="}, {"sha": "1240032bc45f1c9cfad0dd41598bc7e55411e53b", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b034336be00989bcc51e37559da7dae4be43658/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b034336be00989bcc51e37559da7dae4be43658/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=8b034336be00989bcc51e37559da7dae4be43658", "patch": "@@ -1429,12 +1429,15 @@ package body Lib.Writ is\n \n                --  If subunit, add unit name, omitting the %b at the end\n \n-               if Present (Cunit (Unum))\n-                 and then Nkind (Unit (Cunit (Unum))) = N_Subunit\n-               then\n+               if Present (Cunit (Unum)) then\n                   Get_Decoded_Name_String (Unit_Name (Unum));\n                   Write_Info_Char (' ');\n-                  Write_Info_Str (Name_Buffer (1 .. Name_Len - 2));\n+\n+                  if Nkind (Unit (Cunit (Unum))) = N_Subunit then\n+                     Write_Info_Str (Name_Buffer (1 .. Name_Len - 2));\n+                  else\n+                     Write_Info_Str (Name_Buffer (1 .. Name_Len));\n+                  end if;\n                end if;\n \n                --  If Source_Reference pragma used, output information"}, {"sha": "36b1c6a61304d552c567460ccd9ba50db85aa5bc", "filename": "gcc/ada/makeutl.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b034336be00989bcc51e37559da7dae4be43658/gcc%2Fada%2Fmakeutl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b034336be00989bcc51e37559da7dae4be43658/gcc%2Fada%2Fmakeutl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.adb?ref=8b034336be00989bcc51e37559da7dae4be43658", "patch": "@@ -320,6 +320,15 @@ package body Makeutl is\n                   end;\n                end if;\n \n+               Unit_Name := SD.Unit_Name;\n+\n+               if Unit_Name /= No_Name\n+                 and then not Fname.Is_Internal_File_Name (SD.Sfile)\n+                 and then File_Not_A_Source_Of (Tree, Unit_Name, SD.Sfile)\n+               then\n+                  return No_Name;\n+               end if;\n+\n             else\n                --  For separates, the file is no longer associated with the\n                --  unit (\"proc-sep.adb\" is not associated with unit \"proc.sep\")"}, {"sha": "15382acf6ce75f37bfa0e93fc64f27468e9bdd96", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b034336be00989bcc51e37559da7dae4be43658/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b034336be00989bcc51e37559da7dae4be43658/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=8b034336be00989bcc51e37559da7dae4be43658", "patch": "@@ -308,8 +308,8 @@ package body Par_SCO is\n \n       function Check_Node (N : Node_Id) return Traverse_Result;\n       --  Determine if Nkind (N) indicates the presence of a decision (i.e.\n-      --  N is a logical operator -- a decision in itelsf -- or an\n-      --  IF-expression -- whose Condition attribute is a decision).\n+      --  N is a logical operator, which is a decision in itself, or an\n+      --  IF-expression whose Condition attribute is a decision).\n \n       ----------------\n       -- Check_Node --"}, {"sha": "fe54f88240b05fe1a4a95180c0a4cb674d586644", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b034336be00989bcc51e37559da7dae4be43658/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b034336be00989bcc51e37559da7dae4be43658/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=8b034336be00989bcc51e37559da7dae4be43658", "patch": "@@ -33,6 +33,7 @@ with Errout;   use Errout;\n with Exp_Disp; use Exp_Disp;\n with Exp_Tss;  use Exp_Tss;\n with Exp_Util; use Exp_Util;\n+with Freeze;   use Freeze;\n with Lib;      use Lib;\n with Lib.Xref; use Lib.Xref;\n with Namet;    use Namet;\n@@ -155,14 +156,14 @@ package body Sem_Ch13 is\n \n    generic\n       with procedure Replace_Type_Reference (N : Node_Id);\n-   procedure Replace_Type_References_Generic (N : Node_Id; TName : Name_Id);\n+   procedure Replace_Type_References_Generic (N : Node_Id; T : Entity_Id);\n    --  This is used to scan an expression for a predicate or invariant aspect\n-   --  replacing occurrences of the name TName (the name of the subtype to\n-   --  which the aspect applies) with appropriate references to the parameter\n-   --  of the predicate function or invariant procedure. The procedure passed\n-   --  as a generic parameter does the actual replacement of node N, which is\n-   --  either a simple direct reference to TName, or a selected component that\n-   --  represents an appropriately qualified occurrence of TName.\n+   --  replacing occurrences of the name of the subtype to which the aspect\n+   --  applies with appropriate references to the parameter of the predicate\n+   --  function or invariant procedure. The procedure passed as a generic\n+   --  parameter does the actual replacement of node N, which is either a\n+   --  simple direct reference to T, or a selected component that represents\n+   --  an appropriately qualified occurrence of T.\n \n    procedure Resolve_Iterable_Operation\n      (N      : Node_Id;\n@@ -7216,7 +7217,7 @@ package body Sem_Ch13 is\n                --  with references to the object, converted to type'Class in\n                --  the case of Invariant'Class aspects.\n \n-               Replace_Type_References (Exp, Chars (T));\n+               Replace_Type_References (Exp, T);\n \n                --  If this invariant comes from an aspect, find the aspect\n                --  specification, and replace the saved expression because\n@@ -7268,7 +7269,7 @@ package body Sem_Ch13 is\n                      Inv : constant Node_Id :=\n                              Expression (Corresponding_Aspect (Ritem));\n                   begin\n-                     Replace_Type_References (Inv, Chars (T));\n+                     Replace_Type_References (Inv, T);\n                      Preanalyze_Assert_Expression (Inv, Standard_Boolean);\n                   end;\n                end if;\n@@ -7656,7 +7657,7 @@ package body Sem_Ch13 is\n                   --  We need to replace any occurrences of the name of the\n                   --  type with references to the object.\n \n-                  Replace_Type_References (Arg2, Chars (Typ));\n+                  Replace_Type_References (Arg2, Typ);\n \n                   --  If this predicate comes from an aspect, find the aspect\n                   --  specification, and replace the saved expression because\n@@ -10303,7 +10304,7 @@ package body Sem_Ch13 is\n       Replace (N, Make_Null_Statement (Sloc (N)));\n \n       --  The null statement must be marked as not coming from source. This is\n-      --  so that ASIS ignores if, and also the back end does not expect bogus\n+      --  so that ASIS ignores it, and also the back end does not expect bogus\n       --  \"from source\" null statements in weird places (e.g. in declarative\n       --  regions where such null statements are not allowed).\n \n@@ -10837,7 +10838,8 @@ package body Sem_Ch13 is\n    -- Replace_Type_References_Generic --\n    -------------------------------------\n \n-   procedure Replace_Type_References_Generic (N : Node_Id; TName : Name_Id) is\n+   procedure Replace_Type_References_Generic (N : Node_Id; T : Entity_Id) is\n+      TName : constant Name_Id := Chars (T);\n \n       function Replace_Node (N : Node_Id) return Traverse_Result;\n       --  Processes a single node in the traversal procedure below, checking\n@@ -10859,9 +10861,18 @@ package body Sem_Ch13 is\n \n          if Nkind (N) = N_Identifier then\n \n-            --  If not the type name, all done with this node\n+            --  If not the type name, check whether it is a reference to\n+            --  some other type, which must be frozen before the predicate\n+            --  function is analyzed, i.e. before the freeze node of the\n+            --  type to which the predicate applies.\n \n             if Chars (N) /= TName then\n+               if Present (Current_Entity (N))\n+                  and then Is_Type (Current_Entity (N))\n+               then\n+                  Freeze_Before (Freeze_Node (T), Current_Entity (N));\n+               end if;\n+\n                return Skip;\n \n             --  Otherwise do the replacement and we are done with this node"}]}