{"sha": "7451756f3107554b2f1c442e3dd1d53e6fc74d46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ1MTc1NmYzMTA3NTU0YjJmMWM0NDJlM2RkMWQ1M2U2ZmM3NGQ0Ng==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2003-10-21T23:28:05Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2003-10-21T23:28:05Z"}, "message": "c-pch.c: Add comments in various places.\n\n\t* c-pch.c: Add comments in various places.\n\t(struct c_pch_validity): Add the lengths of various strings.\n\t(host_machine): New static.\n\t(target_machine): New static.\n\t(get_ident): Bump version number.\n\t(pch_init): Write out version, host, target validity data.\n\t(c_common_valid_pch): Check version, host, target.\n\t* Makefile.in (c-pch.o): Add version.h; define HOST_MACHINE and\n\tTARGET_MACHINE.\n\nFrom-SVN: r72774", "tree": {"sha": "ba032d9576eb62aa283c0dba860fae6c88a6c8e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba032d9576eb62aa283c0dba860fae6c88a6c8e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7451756f3107554b2f1c442e3dd1d53e6fc74d46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7451756f3107554b2f1c442e3dd1d53e6fc74d46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7451756f3107554b2f1c442e3dd1d53e6fc74d46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7451756f3107554b2f1c442e3dd1d53e6fc74d46/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c25d44dd1cd23d53dad346ef7db1c00ea88333a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c25d44dd1cd23d53dad346ef7db1c00ea88333a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c25d44dd1cd23d53dad346ef7db1c00ea88333a4"}], "stats": {"total": 94, "additions": 91, "deletions": 3}, "files": [{"sha": "47bab50fb75b9a1c24d0ac1fe51369c61574b54b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7451756f3107554b2f1c442e3dd1d53e6fc74d46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7451756f3107554b2f1c442e3dd1d53e6fc74d46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7451756f3107554b2f1c442e3dd1d53e6fc74d46", "patch": "@@ -1,3 +1,15 @@\n+2003-10-21  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* c-pch.c: Add comments in various places.\n+\t(struct c_pch_validity): Add the lengths of various strings.\n+\t(host_machine): New static.\n+\t(target_machine): New static.\n+\t(get_ident): Bump version number.\n+\t(pch_init): Write out version, host, target validity data.\n+\t(c_common_valid_pch): Check version, host, target.\n+\t* Makefile.in (c-pch.o): Add version.h; define HOST_MACHINE and\n+\tTARGET_MACHINE.\n+\n 2003-10-21  Jason Merrill  <jason@redhat.com>\n \n \t* tree.h (IS_EXPR_CODE_CLASS): Use strchr."}, {"sha": "4f28e80fd0d4018f758defc0c20903b5cfe4cb61", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7451756f3107554b2f1c442e3dd1d53e6fc74d46/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7451756f3107554b2f1c442e3dd1d53e6fc74d46/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7451756f3107554b2f1c442e3dd1d53e6fc74d46", "patch": "@@ -1360,7 +1360,10 @@ c-dump.o : c-dump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n \n c-pch.o : c-pch.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(CPPLIB_H) $(TREE_H) \\\n \t$(C_COMMON_H) output.h toplev.h c-pragma.h $(GGC_H) debug.h \\\n-\tlanghooks.h flags.h hosthooks.h\n+\tlanghooks.h flags.h hosthooks.h version.h\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+\t  -DHOST_MACHINE=\\\"$(host)\\\" -DTARGET_MACHINE=\\\"$(target)\\\" \\\n+\t  $< $(OUTPUT_OPTION)\n \n # Language-independent files.\n "}, {"sha": "7fea10c5fe32e27ef7b062b1db11d29cc54e61ff", "filename": "gcc/c-pch.c", "status": "modified", "additions": 75, "deletions": 2, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7451756f3107554b2f1c442e3dd1d53e6fc74d46/gcc%2Fc-pch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7451756f3107554b2f1c442e3dd1d53e6fc74d46/gcc%2Fc-pch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pch.c?ref=7451756f3107554b2f1c442e3dd1d53e6fc74d46", "patch": "@@ -21,6 +21,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"version.h\"\n #include \"cpplib.h\"\n #include \"tree.h\"\n #include \"flags.h\"\n@@ -33,8 +34,19 @@ Boston, MA 02111-1307, USA.  */\n #include \"langhooks.h\"\n #include \"hosthooks.h\"\n \n+/* This structure is read very early when validating the PCH, and\n+   might be read for a PCH which is for a completely different compiler\n+   for a different operating system.  Thus, it should really only contain\n+   'unsigned char' entries, at least in the initial entries.  \n+\n+   If you add or change entries before version_length, you should increase\n+   the version number in get_ident().  */\n+\n struct c_pch_validity\n {\n+  unsigned char host_machine_length;\n+  unsigned char target_machine_length;\n+  unsigned char version_length;\n   unsigned char debug_info_type;\n };\n \n@@ -45,10 +57,16 @@ struct c_pch_header\n \n #define IDENT_LENGTH 8\n \n+/* The file we'll be writing the PCH to.  */\n static FILE *pch_outfile;\n \n+/* The position in the assembler output file when pch_init was called.  */\n static long asm_file_startpos;\n \n+/* The host and target machines.  */\n+static const char host_machine[] = HOST_MACHINE;\n+static const char target_machine[] = TARGET_MACHINE;\n+\n static const char *get_ident (void);\n \n /* Compute an appropriate 8-byte magic number for the PCH file, so that\n@@ -60,7 +78,7 @@ static const char *\n get_ident(void)\n {\n   static char result[IDENT_LENGTH];\n-  static const char template[IDENT_LENGTH] = \"gpch.011\";\n+  static const char template[IDENT_LENGTH] = \"gpch.012\";\n   static const char c_language_chars[] = \"Co+O\";\n   \n   memcpy (result, template, IDENT_LENGTH);\n@@ -86,9 +104,20 @@ pch_init (void)\n     fatal_error (\"can't open %s: %m\", pch_file);\n   pch_outfile = f;\n   \n+  if (strlen (host_machine) > 255 || strlen (target_machine) > 255\n+      || strlen (version_string) > 255)\n+    abort ();\n+  \n+  v.host_machine_length = strlen (host_machine);\n+  v.target_machine_length = strlen (target_machine);\n+  v.version_length = strlen (version_string);\n+  \n   v.debug_info_type = write_symbols;\n   if (fwrite (get_ident(), IDENT_LENGTH, 1, f) != 1\n-      || fwrite (&v, sizeof (v), 1, f) != 1)\n+      || fwrite (&v, sizeof (v), 1, f) != 1\n+      || fwrite (host_machine, v.host_machine_length, 1, f) != 1\n+      || fwrite (target_machine, v.target_machine_length, 1, f) != 1\n+      || fwrite (version_string, v.version_length, 1, f) != 1)\n     fatal_error (\"can't write to %s: %m\", pch_file);\n \n   /* We need to be able to re-read the output.  */\n@@ -162,6 +191,8 @@ c_common_valid_pch (cpp_reader *pfile, const char *name, int fd)\n   int sizeread;\n   int result;\n   char ident[IDENT_LENGTH];\n+  char short_strings[256 * 3];\n+  int strings_length;\n   const char *pch_ident;\n   struct c_pch_validity v;\n \n@@ -195,9 +226,51 @@ c_common_valid_pch (cpp_reader *pfile, const char *name, int fd)\n       return 2;\n     }\n \n+  /* At this point, we know it's a PCH file, so it ought to be long enough\n+     that we can read a c_pch_validity structure.  */\n   if (read (fd, &v, sizeof (v)) != sizeof (v))\n     fatal_error (\"can't read %s: %m\", name);\n \n+  strings_length = (v.host_machine_length + v.target_machine_length \n+\t\t    + v.version_length);\n+  if (read (fd, short_strings, strings_length) != strings_length)\n+    fatal_error (\"can't read %s: %m\", name);\n+  if (v.host_machine_length != strlen (host_machine)\n+      || memcmp (host_machine, short_strings, strlen (host_machine)) != 0)\n+    {\n+      if (cpp_get_options (pfile)->warn_invalid_pch)\n+\tcpp_error (pfile, DL_WARNING, \n+\t\t   \"%s: created on host `%.*s', but used on host `%s'\", name,\n+\t\t   v.host_machine_length, short_strings, host_machine);\n+      return 2;\n+    }\n+  if (v.target_machine_length != strlen (target_machine)\n+      || memcmp (target_machine, short_strings + v.host_machine_length,\n+\t\t strlen (target_machine)) != 0)\n+    {\n+      if (cpp_get_options (pfile)->warn_invalid_pch)\n+\tcpp_error (pfile, DL_WARNING, \n+\t\t   \"%s: created for target `%.*s', but used for target `%s'\", \n+\t\t   name, v.target_machine_length, \n+\t\t   short_strings + v.host_machine_length, target_machine);\n+      return 2;\n+    }\n+  if (v.version_length != strlen (version_string)\n+      || memcmp (version_string, \n+\t\t (short_strings + v.host_machine_length \n+\t\t  + v.target_machine_length),\n+\t\t v.version_length) != 0)\n+    {\n+      if (cpp_get_options (pfile)->warn_invalid_pch)\n+\tcpp_error (pfile, DL_WARNING,\n+\t\t   \"%s: created by version `%.*s', but this is version `%s'\", \n+\t\t   name, v.version_length, \n+\t\t   (short_strings + v.host_machine_length \n+\t\t    + v.target_machine_length), \n+\t\t   version_string);\n+      return 2;\n+    }\n+\n   /* The allowable debug info combinations are that either the PCH file\n      was built with the same as is being used now, or the PCH file was\n      built for some kind of debug info but now none is in use.  */"}]}