{"sha": "70ff9d9023430c399e931d9c12f5574db4a02941", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBmZjlkOTAyMzQzMGMzOTllOTMxZDljMTJmNTU3NGRiNGEwMjk0MQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-04-30T13:09:40Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-04-30T13:09:40Z"}, "message": "CollationElementIterator.java, [...]: Merged copyright and documentation from classpath and rearranged some code.\n\n2003-04-30  Michael Koch  <konqueror@gmx.de>\n\n\t* java/text/CollationElementIterator.java,\n\tjava/text/CollationKey.java,\n\tjava/text/RuleBasedCollator.java:\n\tMerged copyright and documentation from classpath and\n\trearranged some code. No code changes done.\n\nFrom-SVN: r66288", "tree": {"sha": "020d432ecb6395ab34142c7835a83fc049f4caf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/020d432ecb6395ab34142c7835a83fc049f4caf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70ff9d9023430c399e931d9c12f5574db4a02941", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70ff9d9023430c399e931d9c12f5574db4a02941", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70ff9d9023430c399e931d9c12f5574db4a02941", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70ff9d9023430c399e931d9c12f5574db4a02941/comments", "author": null, "committer": null, "parents": [{"sha": "10256cf5f62a636e4ceed09ff624edc3cb4fc52e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10256cf5f62a636e4ceed09ff624edc3cb4fc52e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10256cf5f62a636e4ceed09ff624edc3cb4fc52e"}], "stats": {"total": 394, "additions": 308, "deletions": 86}, "files": [{"sha": "d82f0a44fa64232f22e04998d67c71d5af5fab8c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70ff9d9023430c399e931d9c12f5574db4a02941/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70ff9d9023430c399e931d9c12f5574db4a02941/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=70ff9d9023430c399e931d9c12f5574db4a02941", "patch": "@@ -1,3 +1,11 @@\n+2003-04-30  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/text/CollationElementIterator.java,\n+\tjava/text/CollationKey.java,\n+\tjava/text/RuleBasedCollator.java:\n+\tMerged copyright and documentation from classpath and\n+\trearranged some code. No code changes done.\n+\n 2003-04-30  Michael Koch  <konqueror@gmx.de>\n \n \t* java/util/regex/Matcher.java"}, {"sha": "ba60f205f3c5bd3d843d0f5b9c9c211c15d03a7c", "filename": "libjava/java/text/CollationElementIterator.java", "status": "modified", "additions": 104, "deletions": 23, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70ff9d9023430c399e931d9c12f5574db4a02941/libjava%2Fjava%2Ftext%2FCollationElementIterator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70ff9d9023430c399e931d9c12f5574db4a02941/libjava%2Fjava%2Ftext%2FCollationElementIterator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FCollationElementIterator.java?ref=70ff9d9023430c399e931d9c12f5574db4a02941", "patch": "@@ -1,53 +1,145 @@\n-// CollationElementIterator.java - Iterate over decomposed characters.\n+/* CollationElementIterator.java -- Walks through collation elements\n \n /* Copyright (C) 1999, 2001  Free Software Foundation\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n \n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.text;\n \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date March 25, 1999\n- */\n /* Written using \"Java Class Libraries\", 2nd edition, plus online\n  * API docs for JDK 1.2 from http://www.javasoft.com.\n  * Status: Believed complete and correct to JDK 1.1.\n  */\n \n+/**\n+ * This class walks through the character collation elements of a \n+ * <code>String</code> as defined by the collation rules in an instance of \n+ * <code>RuleBasedCollator</code>.  There is no public constructor for\n+ * this class.  An instance is created by calling the\n+ * <code>getCollationElementIterator</code> method on \n+ * <code>RuleBasedCollator</code>.\n+ *\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ */\n public final class CollationElementIterator\n {\n+  /**\n+   * This is a constant value that is returned to indicate that the end of \n+   * the string was encountered.\n+   */\n   public static final int NULLORDER = 0xffffffff;\n \n+  /**\n+   * This is the RuleBasedCollator this object was created from.\n+   */\n+  RuleBasedCollator collator;\n+\n+  /**\n+   * This is the String that is being iterated over.\n+   */\n+  String text;\n+\n+  /**\n+   * This is the index into the String where we are currently scanning.\n+   */\n+  int index;\n+\n+  // A piece of lookahead.\n+  boolean lookahead_set;\n+  int lookahead;\n+\n+  /**\n+   * This method returns the collation ordering value of the next character\n+   * in the string.  This method will return <code>NULLORDER</code> if the\n+   * end of the string was reached.\n+   *\n+   * @return The collation ordering value.\n+   */\n   public int next ()\n   {\n     if (index == text.length())\n       return NULLORDER;\n     return collator.ceiNext(this);\n   }\n \n-  // This one returns int while the others return short.\n+  /**\n+   * This method returns the primary order value for the given collation\n+   * value.\n+   *\n+   * @param value The collation value returned from <code>next()</code> or <code>previous()</code>.\n+   *\n+   * @return The primary order value of the specified collation value.  This is the high 16 bits.\n+   */\n   public static final int primaryOrder (int order)\n   {\n     // From the JDK 1.2 spec.\n     return order >>> 16;\n   }\n \n+  /**\n+   * This method resets the internal position pointer to read from the\n+   * beginning of the <code>String again.\n+   */\n   public void reset ()\n   {\n     index = 0;\n   }\n \n+  /**\n+   * This method returns the secondary order value for the given collation\n+   * value.\n+   *\n+   * @param value The collation value returned from <code>next()</code> or <code>previous()</code>.\n+   *\n+   * @return The secondary order value of the specified collation value.  This is the bits 8-15.\n+   */\n   public static final short secondaryOrder (int order)\n   {\n     // From the JDK 1.2 spec.\n     return (short) ((order >>> 8) & 255);\n   }\n \n+  /**\n+   * This method returns the tertiary order value for the given collation\n+   * value.\n+   *\n+   * @param value The collation value returned from <code>next()</code> or <code>previous()</code>.\n+   *\n+   * @return The tertiary order value of the specified collation value.  This is the low eight bits.\n+   */\n   public static final short tertiaryOrder (int order)\n   {\n     // From the JDK 1.2 spec.\n@@ -64,16 +156,5 @@ public static final short tertiaryOrder (int order)\n     this.collator = collator;\n   }\n \n-  // Text over which we iterate.\n-  String text;\n-\n-  // Index of next character to examine in TEXT.\n-  int index;\n-\n-  // A piece of lookahead.\n-  boolean lookahead_set;\n-  int lookahead;\n+} // class CollationElementIterator\n \n-  // The RuleBasedCollator which created this object.\n-  RuleBasedCollator collator;\n-}"}, {"sha": "ff57446d80430b31cb4c6b10b9e82363ebf0a4b3", "filename": "libjava/java/text/CollationKey.java", "status": "modified", "additions": 142, "deletions": 41, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70ff9d9023430c399e931d9c12f5574db4a02941/libjava%2Fjava%2Ftext%2FCollationKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70ff9d9023430c399e931d9c12f5574db4a02941/libjava%2Fjava%2Ftext%2FCollationKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FCollationKey.java?ref=70ff9d9023430c399e931d9c12f5574db4a02941", "patch": "@@ -1,44 +1,150 @@\n-// CollationKey.java - Sort key for locale-sensitive String.\n+/* CollationKey.java -- Precomputed collation value\n \n /* Copyright (C) 1999, 2000  Free Software Foundation\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n \n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.text;\n \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date March 25, 1999\n- */\n /* Written using \"Java Class Libraries\", 2nd edition, plus online\n  * API docs for JDK 1.2 from http://www.javasoft.com.\n  * Status: Believed complete and correct.\n  */\n \n+/**\n+ * This class represents a pre-computed series of bits representing a\n+ * <code>String</code> for under a particular <code>Collator</code>.  This\n+ * value may be compared bitwise against another <code>CollationKey</code>\n+ * representing a different <code>String</code> under the same\n+ * <code>Collator</code> in a manner than is usually more efficient than\n+ * using the raw <code>Collator</code> compare methods.  There is overhead\n+ * associated with calculating this value, so it is generally not\n+ * advisable to compute <code>CollationKey</code>'s unless multiple \n+ * comparisons against a <code>String</code> will be done.  (For example,\n+ * in a sort routine).\n+ * <p>\n+ * This class cannot be instantiated directly.  Instead, a \n+ * <code>CollationKey</code> is created by calling the\n+ * <code>getCollationKey</code> method on an instance of <code>Collator</code>.\n+ *\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ */\n public final class CollationKey implements Comparable\n {\n-  public int compareTo (CollationKey target)\n+  /**\n+   * This is the <code>String</code> this object represents.\n+   */\n+  private String originalText;\n+\n+  /**\n+   * This is the bit value for this key.\n+   */\n+  private int[] key;\n+\n+  CollationKey (CollationElementIterator iter, String originalText,\n+\t\tint strength)\n+  {\n+    this.originalText = originalText;\n+\n+    // Compute size of required array.\n+    int size = 0;\n+    while (RuleBasedCollator.next(iter, strength)\n+\t   != CollationElementIterator.NULLORDER)\n+      ++size;\n+\n+    iter.reset();\n+    key = new int[size];\n+    for (int i = 0; i < size; i++)\n+      key[i] = RuleBasedCollator.next(iter, strength);\n+  }\n+\n+  /**\n+   * This method compares the specified object to this one.  An integer is \n+   * returned which indicates whether the specified object is less than, \n+   * greater than, or equal to this object.\n+   *\n+   * @param ck The <code>CollationKey</code> to compare against this one.\n+   *\n+   * @return A negative integer if this object is less than the specified object, 0 if it is equal or a positive integer if it is greater than the specified object.\n+   */\n+  public int compareTo (CollationKey ck)\n   {\n-    int max = Math.min(key.length, target.key.length);\n+    int max = Math.min (key.length, ck.key.length);\n \n     for (int i = 0; i < max; ++i)\n       {\n-\tif (key[i] != target.key[i])\n-\t  return key[i] - target.key[i];\n+\tif (key[i] != ck.key[i])\n+\t  return key[i] - ck.key[i];\n       }\n \n-    return key.length - target.key.length;\n+    return key.length - ck.key.length;\n   }\n \n-  public int compareTo (Object o)\n+  /**\n+   * This method compares the specified object to this one.  The specified\n+   * object must be an instance of <code>CollationKey</code> or an exception\n+   * will be thrown.  An integer is returned which indicates whether the\n+   * specified object is less than, greater than, or equal to this object.\n+   *\n+   * @param obj The <code>Object</code> to compare against this one.\n+   *\n+   * @return A negative integer if this object is less than the specified object, 0 if it is equal or a positive integer if it is greater than the specified object.\n+   */\n+  public int compareTo (Object obj)\n   {\n-    return compareTo ((CollationKey) o);\n+    return compareTo ((CollationKey) obj);\n   }\n \n+  /**\n+   * This method tests the specified <code>Object</code> for equality with\n+   * this object.  This will be true if and only if:\n+   * <p>\n+   * <ul>\n+   * <li>The specified object must not be <code>null</code>\n+   * <li>The specified object is an instance of <code>CollationKey</code>.\n+   * <li>The specified object was created from the same <code>Collator</code>\n+   * as this object.\n+   * <li>The specified object has the same source string and bit key as\n+   * this object.\n+   * </ul>\n+   *\n+   * @param obj The <code>Object</code> to test for equality.\n+   *\n+   * @return <code>true</code> if the specified object is equal to this one, <code>false</code> otherwise.\n+   */\n   public boolean equals (Object obj)\n   {\n     if (! (obj instanceof CollationKey))\n@@ -56,11 +162,24 @@ public boolean equals (Object obj)\n     return true;\n   }\n \n+  /**\n+   * This method returns the <code>String</code> that this object was created\n+   * from.\n+   *\n+   * @return The source <code>String</code> for this object.\n+   */\n   public String getSourceString ()\n   {\n     return originalText;\n   }\n \n+  /**\n+   * This method returns a hash value for this object.  The hash value\n+   * returned will be the hash code of the bit key so that identical bit\n+   * keys will return the same value.\n+   *\n+   * @return A hash value for this object.\n+   */\n   public int hashCode ()\n   {\n     // We just follow BitSet instead of thinking up something new.\n@@ -69,7 +188,12 @@ public int hashCode ()\n       h ^= key[i] * (i + 1);\n     return (int) ((h >> 32) ^ h);\n   }\n-\n+  \n+  /**\n+   * This method returns the collation bit sequence as a byte array.\n+   *\n+   * @param A byte array containing the collation bit sequence.\n+   */\n   public byte[] toByteArray ()\n   {\n     byte[] r = new byte[4 * key.length];\n@@ -83,27 +207,4 @@ public byte[] toByteArray ()\n       }\n     return r;\n   }\n-\n-  CollationKey (CollationElementIterator iter, String originalText,\n-\t\tint strength)\n-  {\n-    this.originalText = originalText;\n-\n-    // Compute size of required array.\n-    int size = 0;\n-    while (RuleBasedCollator.next(iter, strength)\n-\t   != CollationElementIterator.NULLORDER)\n-      ++size;\n-\n-    iter.reset();\n-    key = new int[size];\n-    for (int i = 0; i < size; i++)\n-      key[i] = RuleBasedCollator.next(iter, strength);\n-  }\n-\n-  // Original string.\n-  private String originalText;\n-\n-  // Collation key.\n-  private int[] key;\n }"}, {"sha": "799c3a2088f0f2437df98cc63904f195f8ca0bf5", "filename": "libjava/java/text/RuleBasedCollator.java", "status": "modified", "additions": 54, "deletions": 22, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70ff9d9023430c399e931d9c12f5574db4a02941/libjava%2Fjava%2Ftext%2FRuleBasedCollator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70ff9d9023430c399e931d9c12f5574db4a02941/libjava%2Fjava%2Ftext%2FRuleBasedCollator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FRuleBasedCollator.java?ref=70ff9d9023430c399e931d9c12f5574db4a02941", "patch": "@@ -1,28 +1,57 @@\n-// RuleBasedCollator.java - Concrete class for locale-based string compare.\n+/* RuleBasedCollator.java -- Concrete Collator Class\n \n /* Copyright (C) 1999, 2000, 2001  Free Software Foundation\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n \n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.text;\n \n import java.util.Enumeration;\n import java.util.Hashtable;\n import java.util.Vector;\n \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date March 25, 1999\n- */\n /* Written using \"Java Class Libraries\", 2nd edition, plus online\n  * API docs for JDK 1.2 from http://www.javasoft.com.\n  * Status: Believed complete and correct\n  */\n \n+/**\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date March 25, 1999\n+ */\n+\n final class RBCElement\n {\n   String key;\n@@ -37,6 +66,21 @@\n \n public class RuleBasedCollator extends Collator\n {\n+  // True if we are using French-style accent ordering.\n+  private boolean frenchAccents;\n+\n+  /**\n+   * This the the original rule string.\n+   */\n+  private String rules;\n+\n+  // This maps strings onto collation values.\n+  private Hashtable map;\n+  \n+  // An entry in this hash means that more lookahead is required for\n+  // the prefix string.\n+  private Hashtable prefixes;\n+  \n   public Object clone ()\n   {\n     RuleBasedCollator c = (RuleBasedCollator) super.clone ();\n@@ -354,16 +398,4 @@ public RuleBasedCollator (String rules) throws ParseException\n \t  prefixes.put(r.key.substring(0, i), Boolean.TRUE);\n       }\n   }\n-\n-  // True if we are using French-style accent ordering.\n-  private boolean frenchAccents;\n-\n-  // It's easier to just save the rules than to try to recreate them.\n-  private String rules;\n-\n-  // This maps strings onto collation values.\n-  private Hashtable map;\n-  // An entry in this hash means that more lookahead is required for\n-  // the prefix string.\n-  private Hashtable prefixes;\n }"}]}