{"sha": "561b58498765f443cf6905b7ee246af5a1a0f626", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYxYjU4NDk4NzY1ZjQ0M2NmNjkwNWI3ZWUyNDZhZjVhMWEwZjYyNg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2007-12-13T10:19:43Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-12-13T10:19:43Z"}, "message": "sem_ch5.adb, [...]: Update handling of assigned value/unreferenced warnings\n\n2007-12-06  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch5.adb, s-taskin.adb, a-ciorma.adb, a-coorma.adb, a-cohama.adb, \n\ta-cihama.adb, g-awk.adb, \n\ts-inmaop-posix.adb: Update handling of assigned value/unreferenced\n\twarnings\n\n\t* exp_smem.adb: Update handling of assigned value/unreferenced warnings\n\n\t* sem.adb: Update handling of assigned value/unreferenced warnings\n\n\t* a-exexpr-gcc.adb: Add a pragma warnings off for boolean return\n\n\t* lib-xref.ads: Improve documentation for k xref type\n\n\t* lib-xref.adb: \n\tUpdate handling of assigned value/unreferenced warnings\n\t(Generate_Reference): Warning for reference to entity for which a\n\tpragma Unreferenced has been given should be unconditional.\n\tIf the entity is a discriminal, mark the original\n\tdiscriminant as referenced.\n\n\t* sem_warn.ads, sem_warn.adb\n\t(Check_One_Unit): Test Renamed_In_Spec to control giving warning for\n\tno entities referenced in package\n\t(Check_One_Unit): Don't give message about no entities referenced in\n\ta package if a pragma Unreferenced has appeared.\n\tHandle new warning flag -gnatw.a/-gnatw.A\n\tUpdate handling of assigned value/unreferenced warnings\n\n\t* atree.h: Add flags up to Flag247\n\t(Flag231): New macro.\n\nFrom-SVN: r130815", "tree": {"sha": "1eff0c4702214edde615103bf7be7c328fafe364", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1eff0c4702214edde615103bf7be7c328fafe364"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/561b58498765f443cf6905b7ee246af5a1a0f626", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/561b58498765f443cf6905b7ee246af5a1a0f626", "html_url": "https://github.com/Rust-GCC/gccrs/commit/561b58498765f443cf6905b7ee246af5a1a0f626", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/561b58498765f443cf6905b7ee246af5a1a0f626/comments", "author": null, "committer": null, "parents": [{"sha": "0312b364242bc5d1f96d00d7228ede4a26730e0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0312b364242bc5d1f96d00d7228ede4a26730e0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0312b364242bc5d1f96d00d7228ede4a26730e0c"}], "stats": {"total": 488, "additions": 336, "deletions": 152}, "files": [{"sha": "0eb49b19d036f90b47b025140d2457b2f270c048", "filename": "gcc/ada/a-cihama.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Fa-cihama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Fa-cihama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihama.adb?ref=561b58498765f443cf6905b7ee246af5a1a0f626", "patch": "@@ -967,9 +967,7 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n \n          declare\n             K : Key_Type renames Position.Node.Key.all;\n-\n             E : Element_Type renames Position.Node.Element.all;\n-            pragma Unreferenced (E);\n \n          begin\n             Process (K, E);"}, {"sha": "7eb57d1434ab25c78624f4a34a21c4250fa7d1af", "filename": "gcc/ada/a-ciorma.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Fa-ciorma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Fa-ciorma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciorma.adb?ref=561b58498765f443cf6905b7ee246af5a1a0f626", "patch": "@@ -1302,9 +1302,7 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n \n          declare\n             K : Key_Type renames Position.Node.Key.all;\n-\n             E : Element_Type renames Position.Node.Element.all;\n-            pragma Unreferenced (E);\n \n          begin\n             Process (K, E);"}, {"sha": "8d14442f8d1e9fab7fdae7eedaeaea12a2148978", "filename": "gcc/ada/a-cohama.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Fa-cohama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Fa-cohama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohama.adb?ref=561b58498765f443cf6905b7ee246af5a1a0f626", "patch": "@@ -852,9 +852,10 @@ package body Ada.Containers.Hashed_Maps is\n          declare\n             K : Key_Type renames Position.Node.Key;\n             E : Element_Type renames Position.Node.Element;\n-            pragma Unreferenced (E);\n+\n          begin\n             Process (K, E);\n+\n          exception\n             when others =>\n                L := L - 1;"}, {"sha": "7924fcd7ebec469b7f720777591bc2cb00fdd2a9", "filename": "gcc/ada/a-coorma.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Fa-coorma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Fa-coorma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorma.adb?ref=561b58498765f443cf6905b7ee246af5a1a0f626", "patch": "@@ -1183,9 +1183,7 @@ package body Ada.Containers.Ordered_Maps is\n \n          declare\n             K : Key_Type renames Position.Node.Key;\n-\n             E : Element_Type renames Position.Node.Element;\n-            pragma Unreferenced (E);\n \n          begin\n             Process (K, E);"}, {"sha": "c27c31a21143b7fd39c1d3f4779eccec0bab1e3f", "filename": "gcc/ada/a-exexpr-gcc.adb", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Fa-exexpr-gcc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Fa-exexpr-gcc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exexpr-gcc.adb?ref=561b58498765f443cf6905b7ee246af5a1a0f626", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -242,18 +242,19 @@ package body Exception_Propagation is\n    --  Copy all the components of Source to Target as well as the\n    --  Private_Data pointer.\n \n-   ------------------------------------------------------------\n-   -- Accessors to basic components of a GNAT exception data --\n-   ------------------------------------------------------------\n+   --------------------------------------------------------------------\n+   -- Accessors to Basic Components of a GNAT Exception Data Pointer --\n+   --------------------------------------------------------------------\n \n-   --  As of today, these are only used by the C implementation of the\n-   --  GCC propagation personality routine to avoid having to rely on a C\n+   --  As of today, these are only used by the C implementation of the GCC\n+   --  propagation personality routine to avoid having to rely on a C\n    --  counterpart of the whole exception_data structure, which is both\n-   --  painful and error prone. These subprograms could be moved to a\n-   --  more widely visible location if need be.\n+   --  painful and error prone. These subprograms could be moved to a more\n+   --  widely visible location if need be.\n \n    function Is_Handled_By_Others (E : Exception_Data_Ptr) return Boolean;\n    pragma Export (C, Is_Handled_By_Others, \"__gnat_is_handled_by_others\");\n+   pragma Warnings (Off, Is_Handled_By_Others);\n \n    function Language_For (E : Exception_Data_Ptr) return Character;\n    pragma Export (C, Language_For, \"__gnat_language_for\");"}, {"sha": "9dda243499c614d9a43a963ebe138ce482b4fcaa", "filename": "gcc/ada/atree.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Fatree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Fatree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.h?ref=561b58498765f443cf6905b7ee246af5a1a0f626", "patch": "@@ -726,6 +726,7 @@ extern Node_Id Current_Error_Node;\n #define Flag213(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag213)\n #define Flag214(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag214)\n #define Flag215(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag215)\n+\n #define Flag216(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag216)\n #define Flag217(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag217)\n #define Flag218(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag218)\n@@ -741,3 +742,20 @@ extern Node_Id Current_Error_Node;\n #define Flag228(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag228)\n #define Flag229(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag229)\n #define Flag230(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag230)\n+#define Flag231(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag231)\n+#define Flag232(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag232)\n+#define Flag233(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag233)\n+#define Flag234(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag234)\n+#define Flag235(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag235)\n+#define Flag236(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag236)\n+#define Flag237(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag237)\n+#define Flag238(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag238)\n+#define Flag239(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag239)\n+#define Flag240(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag240)\n+#define Flag241(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag241)\n+#define Flag242(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag242)\n+#define Flag243(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag243)\n+#define Flag244(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag244)\n+#define Flag245(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag245)\n+#define Flag246(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag246)\n+#define Flag247(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag247)"}, {"sha": "e5889bfb9efaa0b7a3a8c716148d6765729895be", "filename": "gcc/ada/exp_smem.adb", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Fexp_smem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Fexp_smem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_smem.adb?ref=561b58498765f443cf6905b7ee246af5a1a0f626", "patch": "@@ -245,17 +245,25 @@ package body Exp_Smem is\n    -------------------\n \n    function Is_Out_Actual (N : Node_Id) return Boolean is\n-      Kind : Entity_Kind;\n-      Call : Node_Id;\n+      Formal : Entity_Id;\n+      Call   : Node_Id;\n \n    begin\n-      Find_Actual_Mode (N, Kind, Call);\n+      Find_Actual (N, Formal, Call);\n \n-      if Kind = E_Out_Parameter or else Kind = E_In_Out_Parameter then\n-         Insert_Node := Call;\n-         return True;\n-      else\n+      if No (Formal) then\n          return False;\n+\n+      else\n+         if Ekind (Formal) = E_Out_Parameter\n+              or else\n+            Ekind (Formal) = E_In_Out_Parameter\n+         then\n+            Insert_Node := Call;\n+            return True;\n+         else\n+            return False;\n+         end if;\n       end if;\n    end Is_Out_Actual;\n "}, {"sha": "4239bb38990febd9832f840aca928207669cf58d", "filename": "gcc/ada/g-awk.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Fg-awk.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Fg-awk.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-awk.adb?ref=561b58498765f443cf6905b7ee246af5a1a0f626", "patch": "@@ -1475,7 +1475,6 @@ package body GNAT.AWK is\n \n    procedure Split_Line (Session : Session_Type) is\n       Fields : Field_Table.Instance renames Session.Data.Fields;\n-      pragma Unreferenced (Fields);\n    begin\n       Field_Table.Init (Fields);\n       Split.Current_Line (Session.Data.Separators.all, Session);"}, {"sha": "931049335e86278e8227df302d84fac3a4b3da2c", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 90, "deletions": 50, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=561b58498765f443cf6905b7ee246af5a1a0f626", "patch": "@@ -167,8 +167,8 @@ package body Lib.Xref is\n       if Sloc (Entity (N)) /= Standard_Location then\n          Generate_Reference (Entity (N), N);\n \n-         --  A reference to an implicit inequality operator is a also a\n-         --  reference to the user-defined equality.\n+         --  A reference to an implicit inequality operator is also a reference\n+         --  to the user-defined equality.\n \n          if Nkind (N) = N_Op_Ne\n            and then not Comes_From_Source (Entity (N))\n@@ -200,21 +200,24 @@ package body Lib.Xref is\n    ------------------------\n \n    procedure Generate_Reference\n-     (E             : Entity_Id;\n-      N             : Node_Id;\n-      Typ           : Character := 'r';\n-      Set_Ref       : Boolean   := True;\n-      Force         : Boolean   := False)\n+     (E       : Entity_Id;\n+      N       : Node_Id;\n+      Typ     : Character := 'r';\n+      Set_Ref : Boolean   := True;\n+      Force   : Boolean   := False)\n    is\n       Indx : Nat;\n       Nod  : Node_Id;\n       Ref  : Source_Ptr;\n       Def  : Source_Ptr;\n       Ent  : Entity_Id;\n \n+      Call   : Node_Id;\n+      Formal : Entity_Id;\n+      --  Used for call to Find_Actual\n+\n       Kind : Entity_Kind;\n-      Call : Node_Id;\n-      --  Arguments used in call to Find_Actual_Mode\n+      --  If Formal is non-Empty, then its Ekind, otherwise E_Void\n \n       function Is_On_LHS (Node : Node_Id) return Boolean;\n       --  Used to check if a node is on the left hand side of an assignment.\n@@ -256,7 +259,7 @@ package body Lib.Xref is\n             return False;\n          end if;\n \n-         --  Immediat return if appeared as OUT parameter\n+         --  Immediate return if appeared as OUT parameter\n \n          if Kind = E_Out_Parameter then\n             return True;\n@@ -311,7 +314,13 @@ package body Lib.Xref is\n \n    begin\n       pragma Assert (Nkind (E) in N_Entity);\n-      Find_Actual_Mode (N, Kind, Call);\n+      Find_Actual (N, Formal, Call);\n+\n+      if Present (Formal) then\n+         Kind := Ekind (Formal);\n+      else\n+         Kind := E_Void;\n+      end if;\n \n       --  Check for obsolescent reference to package ASCII. GNAT treats this\n       --  element of annex J specially since in practice, programs make a lot\n@@ -407,25 +416,45 @@ package body Lib.Xref is\n \n       if Set_Ref then\n \n-         --  For a variable that appears on the left side of an assignment\n-         --  statement, we set the Referenced_As_LHS flag since this is indeed\n-         --  a left hand side. We also set the Referenced_As_LHS flag of a\n-         --  prefix of selected or indexed component.\n+         --  Assignable object appearing on left side of assignment or as\n+         --  an out parameter.\n \n-         if (Ekind (E) = E_Variable or else Is_Formal (E))\n+         if Is_Assignable (E)\n            and then Is_On_LHS (N)\n+           and then Ekind (E) /= E_In_Out_Parameter\n          then\n-            --  If we have the OUT parameter case and the warning mode for\n-            --  OUT parameters is not set, treat this as an ordinary reference\n-            --  since we don't want warnings about it being unset.\n+            --  For objects that are renamings, just set as simply referenced\n+            --  we do not try to do assignment type tracking in this case.\n \n-            if Kind = E_Out_Parameter and not Warn_On_Out_Parameter_Unread then\n+            if Present (Renamed_Object (E)) then\n                Set_Referenced (E);\n \n-            --  For other cases, set referenced on LHS\n+            --  Out parameter case\n+\n+            elsif Kind = E_Out_Parameter then\n+\n+               --  If warning mode for all out parameters is set, or this is\n+               --  the only warning parameter, then we want to mark this for\n+               --  later warning logic by setting Referenced_As_Out_Parameter\n+\n+               if Warn_On_Modified_As_Out_Parameter (Formal) then\n+                  Set_Referenced_As_Out_Parameter (E, True);\n+                  Set_Referenced_As_LHS (E, False);\n+\n+               --  For OUT parameter not covered by the above cases, we simply\n+               --  regard it as a normal reference (in this case we do not\n+               --  want any of the warning machinery for out parameters).\n+\n+               else\n+                  Set_Referenced (E);\n+               end if;\n+\n+            --  For the left hand of an assignment case, we do nothing here.\n+            --  The processing for Analyze_Assignment_Statement will set the\n+            --  Referenced_As_LHS flag.\n \n             else\n-               Set_Referenced_As_LHS (E);\n+               null;\n             end if;\n \n          --  Check for a reference in a pragma that should not count as a\n@@ -469,33 +498,33 @@ package body Lib.Xref is\n          --  All other cases\n \n          else\n-            --  Special processing for IN OUT and OUT parameters, where we\n-            --  have an implicit assignment to a simple variable.\n+            --  Special processing for IN OUT parameters, where we have an\n+            --  implicit assignment to a simple variable.\n \n-            if (Kind = E_Out_Parameter or else Kind = E_In_Out_Parameter)\n-              and then Is_Entity_Name (N)\n-              and then Present (Entity (N))\n-              and then Is_Assignable (Entity (N))\n+            if Kind = E_In_Out_Parameter\n+              and then Is_Assignable (E)\n             then\n-               --  Record implicit assignment unless we have an intrinsic\n-               --  subprogram, which is most likely an instantiation of\n-               --  Unchecked_Deallocation which we do not want to consider\n-               --  as an assignment since it generates false positives. We\n-               --  also exclude the case of an IN OUT parameter to a procedure\n-               --  called Free, since we suspect similar semantics.\n-\n-               if Is_Entity_Name (Name (Call))\n+               --  For sure this counts as a normal read reference\n+\n+               Set_Referenced (E);\n+               Set_Last_Assignment (E, Empty);\n+\n+               --  We count it as being referenced as an out parameter if the\n+               --  option is set to warn on all out parameters, except that we\n+               --  have a special exclusion for an intrinsic subprogram, which\n+               --  is most likely an instantiation of Unchecked_Deallocation\n+               --  which we do not want to consider as an assignment since it\n+               --  generates false positives. We also exclude the case of an\n+               --  IN OUT parameter if the name of the procedure is Free,\n+               --  since we suspect similar semantics.\n+\n+               if Warn_On_All_Unread_Out_Parameters\n+                 and then Is_Entity_Name (Name (Call))\n                  and then not Is_Intrinsic_Subprogram (Entity (Name (Call)))\n-                 and then (Kind /= E_In_Out_Parameter\n-                             or else Chars (Name (Call)) /= Name_Free)\n+                 and then Chars (Name (Call)) /= Name_Free\n                then\n-                  Set_Referenced_As_LHS (E);\n-               end if;\n-\n-               --  For IN OUT case, treat as also being normal reference\n-\n-               if Kind = E_In_Out_Parameter then\n-                  Set_Referenced (E);\n+                  Set_Referenced_As_Out_Parameter (E, True);\n+                  Set_Referenced_As_LHS (E, False);\n                end if;\n \n                --  Any other occurrence counts as referencing the entity\n@@ -549,7 +578,7 @@ package body Lib.Xref is\n                   while Present (BE) loop\n                      if Chars (BE) = Chars (E) then\n                         Error_Msg_NE\n-                          (\"?pragma Unreferenced given for&\", N, BE);\n+                          (\"?pragma Unreferenced given for&!\", N, BE);\n                         exit;\n                      end if;\n \n@@ -560,7 +589,7 @@ package body Lib.Xref is\n             --  Here we issue the warning, since this is a real reference\n \n             else\n-               Error_Msg_NE (\"?pragma Unreferenced given for&\", N, E);\n+               Error_Msg_NE (\"?pragma Unreferenced given for&!\", N, E);\n             end if;\n          end if;\n \n@@ -664,6 +693,15 @@ package body Lib.Xref is\n          then\n             Ent := Original_Record_Component (E);\n \n+         --  If this is an expanded reference to a discriminant, recover the\n+         --  original discriminant, which gets the reference.\n+\n+         elsif Ekind (E) = E_In_Parameter\n+           and then  Present (Discriminal_Link (E))\n+         then\n+            Ent := Discriminal_Link (E);\n+            Set_Referenced (Ent);\n+\n          --  Ignore reference to any other entity that is not from source\n \n          else\n@@ -1424,11 +1462,13 @@ package body Lib.Xref is\n                           (Int (Get_Logical_Line_Number (Sloc (Tref))));\n \n                         declare\n-                           Ent  : Entity_Id := Tref;\n-                           Kind : constant Entity_Kind := Ekind (Ent);\n-                           Ctyp : Character := Xref_Entity_Letters (Kind);\n+                           Ent  : Entity_Id;\n+                           Ctyp : Character;\n \n                         begin\n+                           Ent := Tref;\n+                           Ctyp := Xref_Entity_Letters (Ekind (Ent));\n+\n                            if Ctyp = '+'\n                              and then Present (Full_View (Ent))\n                            then"}, {"sha": "4d23773839ecd9b169b21ce7d1f794bf403c7485", "filename": "gcc/ada/lib-xref.ads", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Flib-xref.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Flib-xref.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.ads?ref=561b58498765f443cf6905b7ee246af5a1a0f626", "patch": "@@ -237,8 +237,33 @@ package Lib.Xref is\n    --           source node that generates the implicit reference, and it is\n    --           useful to record this one.\n \n-   --           k is used to denote a reference to the parent unit, in the\n-   --           cross-reference line for a child unit.\n+   --           k is another non-standard reference type, used to record a\n+   --           reference from a child unit to its parent. For various cross-\n+   --           referencing tools, we need a pointer from the xref entries for\n+   --           the child to the parent. This is the opposite way round from\n+   --           normal xref entries, since the reference is *from* the child\n+   --           unit *to* the parent unit, yet appears in the xref entries for\n+   --           the child. Consider this example:\n+   --\n+   --             package q is\n+   --             end;\n+   --             package q.r is\n+   --             end q.r;\n+   --\n+   --           The ali file for q-r.ads has these entries\n+   --\n+   --             D q.ads\n+   --             D q-r.ads\n+   --             D system.ads\n+   --             X 1 q.ads\n+   --             1K9*q 2e4 2|1r9 2r5\n+   --             X 2 q-r.ads\n+   --             1K11*r 1|1k9 2|2l7 2e8\n+   --\n+   --           Here the 2|1r9 entry appearing in the section for the parent\n+   --           is the normal reference from the child to the parent. The 1k9\n+   --           entry in the section for the child duplicates this information\n+   --           but appears in the child rather than the parent.\n \n    --           l is used to identify the occurrence in the source of the\n    --           name on an end line. This is just a syntactic reference\n@@ -568,11 +593,11 @@ package Lib.Xref is\n    --  a renaming of a predefined operator.\n \n    procedure Generate_Reference\n-     (E             : Entity_Id;\n-      N             : Node_Id;\n-      Typ           : Character := 'r';\n-      Set_Ref       : Boolean   := True;\n-      Force         : Boolean   := False);\n+     (E       : Entity_Id;\n+      N       : Node_Id;\n+      Typ     : Character := 'r';\n+      Set_Ref : Boolean   := True;\n+      Force   : Boolean   := False);\n    --  This procedure is called to record a reference. N is the location\n    --  of the reference and E is the referenced entity. Typ is one of:\n    --"}, {"sha": "2251c23d3c5a56c637b9413be0cdf0dbf0ac0341", "filename": "gcc/ada/s-inmaop-posix.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Fs-inmaop-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Fs-inmaop-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-inmaop-posix.adb?ref=561b58498765f443cf6905b7ee246af5a1a0f626", "patch": "@@ -60,8 +60,9 @@ package body System.Interrupt_Management.Operations is\n    Initial_Action : array (Signal) of aliased struct_sigaction;\n \n    Default_Action : aliased struct_sigaction;\n+   pragma Warnings (Off, Default_Action);\n \n-   Ignore_Action  : aliased struct_sigaction;\n+   Ignore_Action : aliased struct_sigaction;\n \n    ----------------------------\n    -- Thread_Block_Interrupt --\n@@ -136,11 +137,11 @@ package body System.Interrupt_Management.Operations is\n    --------------------\n \n    function Interrupt_Wait\n-     (Mask : access Interrupt_Mask)\n-      return Interrupt_ID\n+     (Mask : access Interrupt_Mask) return Interrupt_ID\n    is\n       Result : Interfaces.C.int;\n       Sig    : aliased Signal;\n+\n    begin\n       Result := sigwait (Mask, Sig'Access);\n "}, {"sha": "3a4cbe5594597bf4ecbc66a56463eaf62fd7085f", "filename": "gcc/ada/s-taskin.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Fs-taskin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Fs-taskin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.adb?ref=561b58498765f443cf6905b7ee246af5a1a0f626", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -160,9 +160,11 @@ package body System.Tasking is\n \n    procedure Initialize is\n       T             : Task_Id;\n-      Success       : Boolean;\n       Base_Priority : Any_Priority;\n \n+      Success : Boolean;\n+      pragma Warnings (Off, Success);\n+\n    begin\n       if Initialized then\n          return;"}, {"sha": "7fcf2dd2ac70c8345a8633446980dc7967e48ed3", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=561b58498765f443cf6905b7ee246af5a1a0f626", "patch": "@@ -727,6 +727,7 @@ package body Sem is\n       To   : Entity_Id)\n    is\n       Found : Boolean;\n+      pragma Warnings (Off, Found);\n \n       procedure Search_Stack\n         (Top   : Suppress_Stack_Entry_Ptr;\n@@ -1282,10 +1283,10 @@ package body Sem is\n       S_Sem_Unit         : constant Unit_Number_Type := Current_Sem_Unit;\n       S_GNAT_Mode        : constant Boolean          := GNAT_Mode;\n       S_Discard_Names    : constant Boolean          := Global_Discard_Names;\n-      Generic_Main       : constant Boolean :=\n-                             Nkind (Unit (Cunit (Main_Unit)))\n-                               in N_Generic_Declaration;\n \n+      Generic_Main : constant Boolean :=\n+                       Nkind (Unit (Cunit (Main_Unit)))\n+                         in N_Generic_Declaration;\n       --  If the main unit is generic, every compiled unit, including its\n       --  context, is compiled with expansion disabled.\n "}, {"sha": "3f39aca13078ff37b6ed8fa87683ba8e08a05825", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=561b58498765f443cf6905b7ee246af5a1a0f626", "patch": "@@ -220,9 +220,7 @@ package body Sem_Ch5 is\n          --  If assignment operand is a component reference, then we get the\n          --  actual subtype of the component for the unconstrained case.\n \n-         elsif\n-           (Nkind (Opnd) = N_Selected_Component\n-             or else Nkind (Opnd) = N_Explicit_Dereference)\n+         elsif Nkind_In (Opnd, N_Selected_Component, N_Explicit_Dereference)\n            and then not Is_Unchecked_Union (Opnd_Type)\n          then\n             Decl := Build_Actual_Subtype_Of_Component (Opnd_Type, Opnd);\n@@ -685,6 +683,17 @@ package body Sem_Ch5 is\n          Check_Elab_Assign (Lhs);\n       end if;\n \n+      --  Set Referenced_As_LHS if appropriate. We only set this flag if the\n+      --  assignment is a source assignment in the extended main source unit.\n+      --  We are not interested in any reference information outside this\n+      --  context, or in compiler generated assignment statements.\n+\n+      if Comes_From_Source (N)\n+        and then In_Extended_Main_Source_Unit (Lhs)\n+      then\n+         Set_Referenced_Modified (Lhs, Out_Param => False);\n+      end if;\n+\n       --  Final step. If left side is an entity, then we may be able to\n       --  reset the current tracked values to new safe values. We only have\n       --  something to do if the left side is an entity name, and expansion\n@@ -715,7 +724,7 @@ package body Sem_Ch5 is\n                  and then Comes_From_Source (N)\n                  and then In_Extended_Main_Source_Unit (Ent)\n                then\n-                  Warn_On_Useless_Assignment (Ent, Sloc (N));\n+                  Warn_On_Useless_Assignment (Ent, N);\n                   Set_Last_Assignment (Ent, Lhs);\n                end if;\n \n@@ -1458,8 +1467,8 @@ package body Sem_Ch5 is\n             if Analyzed (Original_Bound) then\n                return Original_Bound;\n \n-            elsif Nkind (Analyzed_Bound) = N_Integer_Literal\n-              or else Nkind (Analyzed_Bound) = N_Character_Literal\n+            elsif Nkind_In (Analyzed_Bound, N_Integer_Literal,\n+                                            N_Character_Literal)\n               or else Is_Entity_Name (Analyzed_Bound)\n             then\n                Analyze_And_Resolve (Original_Bound, Typ);"}, {"sha": "6621d66c324a7c1e4b46a2ef51fa439ce970199c", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 133, "deletions": 53, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=561b58498765f443cf6905b7ee246af5a1a0f626", "patch": "@@ -114,6 +114,13 @@ package body Sem_Warn is\n    --  formal, the setting of the flag in the corresponding spec is also\n    --  checked (and True returned if either flag is True).\n \n+   function Referenced_As_Out_Parameter_Check_Spec\n+     (E : Entity_Id) return Boolean;\n+   --  Tests Referenced_As_Out_Parameter status for entity E. If E is not a\n+   --  formal, this is simply the setting of Referenced_As_Out_Parameter. If E\n+   --  is a body formal, the setting of the flag in the corresponding spec is\n+   --  also checked (and True returned if either flag is True).\n+\n    procedure Warn_On_Unreferenced_Entity\n      (Spec_E : Entity_Id;\n       Body_E : Entity_Id := Empty);\n@@ -222,7 +229,7 @@ package body Sem_Warn is\n             Ref := N;\n             Var := Entity (Ref);\n \n-            --  Case of condition is a comparison with compile time known value\n+         --  Case of condition is a comparison with compile time known value\n \n          elsif Nkind (N) in N_Op_Compare then\n             if Compile_Time_Known_Value (Right_Opnd (N)) then\n@@ -237,12 +244,12 @@ package body Sem_Warn is\n                return;\n             end if;\n \n-            --  If condition is a negation, check its operand\n+         --  If condition is a negation, check its operand\n \n          elsif Nkind (N) = N_Op_Not then\n             Find_Var (Right_Opnd (N));\n \n-            --  Case of condition is function call\n+         --  Case of condition is function call\n \n          elsif Nkind (N) = N_Function_Call then\n \n@@ -252,7 +259,7 @@ package body Sem_Warn is\n             if not Is_Entity_Name (Name (N)) then\n                return;\n \n-               --  Forget it if warnings are suppressed on function entity\n+            --  Forget it if warnings are suppressed on function entity\n \n             elsif Warnings_Off (Entity (Name (N))) then\n                return;\n@@ -281,14 +288,14 @@ package body Sem_Warn is\n                      Find_Var (First (PA));\n                   end if;\n \n-                  --  Not one argument\n+               --  Not one argument\n \n                else\n                   return;\n                end if;\n             end;\n \n-            --  Any other kind of node is not something we warn for\n+         --  Any other kind of node is not something we warn for\n \n          else\n             return;\n@@ -374,7 +381,7 @@ package body Sem_Warn is\n             return False;\n          end Substring_Present;\n \n-         --  Start of processing for Is_Suspicious_Function_Name\n+      --  Start of processing for Is_Suspicious_Function_Name\n \n       begin\n          S := E;\n@@ -405,7 +412,7 @@ package body Sem_Warn is\n          if N = Iter then\n             return Skip;\n \n-            --  Direct reference to variable in question\n+         --  Direct reference to variable in question\n \n          elsif Is_Entity_Name (N)\n            and then Present (Entity (N))\n@@ -424,6 +431,7 @@ package body Sem_Warn is\n \n             declare\n                P : Node_Id;\n+\n             begin\n                P := N;\n                loop\n@@ -999,8 +1007,8 @@ package body Sem_Warn is\n                           (\"?variable& is never read and never assigned!\");\n                      end if;\n \n-                     --  Deal with special case where this variable is\n-                     --  hidden by a loop variable\n+                     --  Deal with special case where this variable is hidden\n+                     --  by a loop variable.\n \n                      if Ekind (E1) = E_Variable\n                        and then Present (Hiding_Loop_Variable (E1))\n@@ -1115,13 +1123,27 @@ package body Sem_Warn is\n \n                --  Check that warnings on unreferenced entities are enabled\n \n-              and then ((Check_Unreferenced and then not Is_Formal (E1))\n-                           or else\n-                        (Check_Unreferenced_Formals and then Is_Formal (E1))\n-                           or else\n-                        ((Warn_On_Modified_Unread\n-                             or Warn_On_Out_Parameter_Unread)\n-                           and then Referenced_As_LHS_Check_Spec (E1)))\n+              and then\n+                ((Check_Unreferenced and then not Is_Formal (E1))\n+\n+                     --  Case of warning on unreferenced formal\n+\n+                     or else\n+                      (Check_Unreferenced_Formals and then Is_Formal (E1))\n+\n+                     --  Case of warning on unread variables modified by an\n+                     --  assignment, or an out parameter if it is the only one.\n+\n+                     or else\n+                       (Warn_On_Modified_Unread\n+                          and then Referenced_As_LHS_Check_Spec (E1))\n+\n+                     --  Case of warning on any unread out parameter (note\n+                     --  such indications are only set if the appropriate\n+                     --  warning options were set, so no need to recheck here.\n+\n+                     or else\n+                       Referenced_As_Out_Parameter_Check_Spec (E1))\n \n                --  Labels, and enumeration literals, and exceptions. The\n                --  warnings are also placed on local packages that cannot be\n@@ -1939,10 +1961,13 @@ package body Sem_Warn is\n                --  are referenced. If none of the entities are referenced, we\n                --  still post a warning. This occurs if the only use of the\n                --  package is in a use clause, or in a package renaming\n-               --  declaration.\n-\n-               elsif Ekind (Lunit) = E_Package then\n+               --  declaration. This check is skipped for packages that are\n+               --  renamed in a spec, since the entities in such a package are\n+               --  visible to clients via the renaming.\n \n+               elsif Ekind (Lunit) = E_Package\n+                 and then not Renamed_In_Spec (Lunit)\n+               then\n                   --  If Is_Instantiated is set, it means that the package is\n                   --  implicitly instantiated (this is the case of parent\n                   --  instance or an actual for a generic package formal), and\n@@ -1987,9 +2012,13 @@ package body Sem_Warn is\n                            --  Else give the warning\n \n                            else\n-                              Error_Msg_N\n-                                (\"?no entities of & are referenced!\",\n-                                 Name (Item));\n+                              if not Has_Pragma_Unreferenced\n+                                       (Entity (Name (Item)))\n+                              then\n+                                 Error_Msg_N\n+                                   (\"?no entities of & are referenced!\",\n+                                    Name (Item));\n+                              end if;\n \n                               --  Look for renamings of this package, and flag\n                               --  them as well. If the original package has\n@@ -2000,11 +2029,12 @@ package body Sem_Warn is\n \n                               if Present (Pack)\n                                 and then not Warnings_Off (Lunit)\n+                                and then not Has_Pragma_Unreferenced (Pack)\n                               then\n                                  Error_Msg_NE\n                                    (\"?no entities of & are referenced!\",\n                                      Unit_Declaration_Node (Pack),\n-                                       Pack);\n+                                     Pack);\n                               end if;\n                            end if;\n \n@@ -2016,6 +2046,7 @@ package body Sem_Warn is\n \n                         elsif Referenced_Check_Spec (Ent)\n                           or else Referenced_As_LHS_Check_Spec (Ent)\n+                          or else Referenced_As_Out_Parameter_Check_Spec (Ent)\n                           or else\n                             (From_With_Type (Ent)\n                               and then Is_Incomplete_Type (Ent)\n@@ -2105,7 +2136,6 @@ package body Sem_Warn is\n \n             Next (Item);\n          end loop;\n-\n       end Check_One_Unit;\n \n    --  Start of processing for Check_Unused_Withs\n@@ -2517,24 +2547,46 @@ package body Sem_Warn is\n       end if;\n    end Referenced_As_LHS_Check_Spec;\n \n+   --------------------------------------------\n+   -- Referenced_As_Out_Parameter_Check_Spec --\n+   --------------------------------------------\n+\n+   function Referenced_As_Out_Parameter_Check_Spec\n+     (E : Entity_Id) return Boolean\n+   is\n+   begin\n+      if Is_Formal (E) and then Present (Spec_Entity (E)) then\n+         return Referenced_As_Out_Parameter (E)\n+           or else Referenced_As_Out_Parameter (Spec_Entity (E));\n+      else\n+         return Referenced_As_Out_Parameter (E);\n+      end if;\n+   end Referenced_As_Out_Parameter_Check_Spec;\n+\n    ----------------------------\n    -- Set_Dot_Warning_Switch --\n    ----------------------------\n \n    function Set_Dot_Warning_Switch (C : Character) return Boolean is\n    begin\n       case C is\n+         when 'a' =>\n+            Warn_On_Assertion_Failure           := True;\n+\n+         when 'A' =>\n+            Warn_On_Assertion_Failure           := False;\n+\n          when 'c' =>\n             Warn_On_Unrepped_Components         := True;\n \n          when 'C' =>\n             Warn_On_Unrepped_Components         := False;\n \n          when 'o' =>\n-            Warn_On_Out_Parameter_Unread        := True;\n+            Warn_On_All_Unread_Out_Parameters   := True;\n \n          when 'O' =>\n-            Warn_On_Out_Parameter_Unread        := False;\n+            Warn_On_All_Unread_Out_Parameters   := False;\n \n          when 'r' =>\n             Warn_On_Object_Renames_Function     := True;\n@@ -2570,6 +2622,7 @@ package body Sem_Warn is\n             Implementation_Unit_Warnings        := True;\n             Ineffective_Inline_Warnings         := True;\n             Warn_On_Ada_2005_Compatibility      := True;\n+            Warn_On_Assertion_Failure           := True;\n             Warn_On_Assumed_Low_Bound           := True;\n             Warn_On_Bad_Fixed_Value             := True;\n             Warn_On_Constant                    := True;\n@@ -2594,6 +2647,8 @@ package body Sem_Warn is\n             Implementation_Unit_Warnings        := False;\n             Ineffective_Inline_Warnings         := False;\n             Warn_On_Ada_2005_Compatibility      := False;\n+            Warn_On_Assertion_Failure           := False;\n+            Warn_On_Assumed_Low_Bound           := False;\n             Warn_On_Bad_Fixed_Value             := False;\n             Warn_On_Constant                    := False;\n             Warn_On_Deleted_Code                := False;\n@@ -2604,7 +2659,7 @@ package body Sem_Warn is\n             Warn_On_No_Value_Assigned           := False;\n             Warn_On_Non_Local_Exception         := False;\n             Warn_On_Obsolescent_Feature         := False;\n-            Warn_On_Out_Parameter_Unread        := False;\n+            Warn_On_All_Unread_Out_Parameters   := False;\n             Warn_On_Questionable_Missing_Parens := False;\n             Warn_On_Redundant_Constructs        := False;\n             Warn_On_Object_Renames_Function     := False;\n@@ -2914,6 +2969,17 @@ package body Sem_Warn is\n       end if;\n    end Warn_On_Known_Condition;\n \n+   ---------------------------------------\n+   -- Warn_On_Modified_As_Out_Parameter --\n+   ---------------------------------------\n+\n+   function Warn_On_Modified_As_Out_Parameter (E : Entity_Id) return Boolean is\n+   begin\n+      return\n+        (Warn_On_Modified_Unread and then Is_Only_Out_Parameter (E))\n+           or else Warn_On_All_Unread_Out_Parameters;\n+   end Warn_On_Modified_As_Out_Parameter;\n+\n    ------------------------------\n    -- Warn_On_Suspicious_Index --\n    ------------------------------\n@@ -3270,22 +3336,17 @@ package body Sem_Warn is\n          case Ekind (E) is\n             when E_Variable =>\n \n-               --  Case of variable that is assigned but not read. We\n-               --  suppress the message if the variable is volatile, has an\n-               --  address clause, or is imported.\n+               --  Case of variable that is assigned but not read. We suppress\n+               --  the message if the variable is volatile, has an address\n+               --  clause, is aliasied, or is a renaming, or is imported.\n \n                if Referenced_As_LHS_Check_Spec (E)\n                  and then No (Address_Clause (E))\n                  and then not Is_Volatile (E)\n                then\n-                  if (Warn_On_Modified_Unread or Warn_On_Out_Parameter_Unread)\n+                  if Warn_On_Modified_Unread\n                     and then not Is_Imported (E)\n                     and then not Is_Return_Object (E)\n-\n-                     --  Suppress message for aliased or renamed variables,\n-                     --  since there may be other entities that read the\n-                     --  same memory location.\n-\n                     and then not Is_Aliased (E)\n                     and then No (Renamed_Object (E))\n \n@@ -3295,9 +3356,12 @@ package body Sem_Warn is\n                      Set_Last_Assignment (E, Empty);\n                   end if;\n \n-               --  Normal case of neither assigned nor read\n+               --  Normal case of neither assigned nor read (exclude variables\n+               --  referenced as out parameters, since we already generated\n+               --  appropriate warnings at the call point in this case).\n+\n+               elsif not Referenced_As_Out_Parameter (E) then\n \n-               else\n                   --  We suppress the message for types for which a valid\n                   --  pragma Unreferenced_Objects has been given, otherwise\n                   --  we go ahead and give the message.\n@@ -3396,10 +3460,10 @@ package body Sem_Warn is\n \n    procedure Warn_On_Useless_Assignment\n      (Ent : Entity_Id;\n-      Loc : Source_Ptr := No_Location)\n+      N   : Node_Id := Empty)\n    is\n-      P : Node_Id;\n-      X : Node_Id;\n+      P    : Node_Id;\n+      X    : Node_Id;\n \n       function Check_Ref (N : Node_Id) return Traverse_Result;\n       --  Used to instantiate Traverse_Func. Returns Abandon if\n@@ -3430,9 +3494,11 @@ package body Sem_Warn is\n    --  Start of processing for Warn_On_Useless_Assignment\n \n    begin\n-      --  Check if this is a case we want to warn on, a variable with the\n-      --  last assignment field set, with warnings enabled, and which is\n-      --  not imported or exported.\n+      --  Check if this is a case we want to warn on, a scalar or access\n+      --  variable with the last assignment field set, with warnings enabled,\n+      --  and which is not imported or exported. We also check that it is OK\n+      --  to capture the value. We are not going to capture any value, but\n+      --  the warning messages depends on the same kind of conditions.\n \n       if Is_Assignable (Ent)\n         and then not Is_Return_Object (Ent)\n@@ -3441,6 +3507,7 @@ package body Sem_Warn is\n         and then not Has_Pragma_Unreferenced_Check_Spec (Ent)\n         and then not Is_Imported (Ent)\n         and then not Is_Exported (Ent)\n+        and then Safe_To_Capture_Value (N, Ent)\n       then\n          --  Before we issue the message, check covering exception handlers.\n          --  Search up tree for enclosing statement sequences and handlers\n@@ -3462,24 +3529,37 @@ package body Sem_Warn is\n             then\n                --  Case of assigned value never referenced\n \n-               if Loc = No_Location then\n+               if No (N) then\n \n                   --  Don't give this for OUT and IN OUT formals, since\n                   --  clearly caller may reference the assigned value.\n \n                   if Ekind (Ent) = E_Variable then\n-                     Error_Msg_NE\n-                       (\"?useless assignment to&, value never referenced!\",\n-                        Last_Assignment (Ent), Ent);\n+                     if Referenced_As_Out_Parameter (Ent) then\n+                        Error_Msg_NE\n+                          (\"?& modified by call, but value never referenced\",\n+                           Last_Assignment (Ent), Ent);\n+                     else\n+                        Error_Msg_NE\n+                          (\"?useless assignment to&, value never referenced!\",\n+                           Last_Assignment (Ent), Ent);\n+                     end if;\n                   end if;\n \n                --  Case of assigned value overwritten\n \n                else\n-                  Error_Msg_Sloc := Loc;\n-                  Error_Msg_NE\n-                    (\"?useless assignment to&, value overwritten #!\",\n-                     Last_Assignment (Ent), Ent);\n+                  Error_Msg_Sloc := Sloc (N);\n+\n+                  if Referenced_As_Out_Parameter (Ent) then\n+                     Error_Msg_NE\n+                       (\"?& modified by call, but value overwritten #!\",\n+                        Last_Assignment (Ent), Ent);\n+                  else\n+                     Error_Msg_NE\n+                       (\"?useless assignment to&, value overwritten #!\",\n+                        Last_Assignment (Ent), Ent);\n+                  end if;\n                end if;\n \n                --  Clear last assignment indication and we are done"}, {"sha": "ae93f5ada6a6d6d7a4ea78686b4650a1021af684", "filename": "gcc/ada/sem_warn.ads", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Fsem_warn.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561b58498765f443cf6905b7ee246af5a1a0f626/gcc%2Fada%2Fsem_warn.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.ads?ref=561b58498765f443cf6905b7ee246af5a1a0f626", "patch": "@@ -157,6 +157,11 @@ package Sem_Warn is\n    --  If all these conditions are met, the warning is issued noting that\n    --  the result of the test is always false or always true as appropriate.\n \n+   function Warn_On_Modified_As_Out_Parameter (E : Entity_Id) return Boolean;\n+   --  Returns True if we should activate warnings for entity E being modified\n+   --  as an out parameter. True if either Warn_On_Modified_Unread is set for\n+   --  an only OUT parameter, or if Warn_On_All_Unread_Out_Parameters is set.\n+\n    procedure Warn_On_Suspicious_Index (Name : Entity_Id; X : Node_Id);\n    --  This is called after resolving an indexed component or a slice. Name\n    --  is the entity for the name of the indexed array, and X is the subscript\n@@ -176,14 +181,14 @@ package Sem_Warn is\n \n    procedure Warn_On_Useless_Assignment\n      (Ent : Entity_Id;\n-      Loc : Source_Ptr := No_Location);\n+      N   : Node_Id := Empty);\n    --  Called to check if we have a case of a useless assignment to the given\n    --  entity Ent, as indicated by a non-empty Last_Assignment field. This call\n    --  should only be made if at least one of the flags Warn_On_Modified_Unread\n-   --  or Warn_On_Out_Parameter_Unread is True, and if Ent is in the extended\n-   --  main source unit. Loc is No_Location for the end of block call (warning\n-   --  message says value unreferenced), or the it is the location of an\n-   --  overwriting assignment (warning message points to this assignment).\n+   --  or Warn_On_All_Unread_Out_Parameters is True, and if Ent is in the\n+   --  extended main source unit. N is Empty for the end of block call\n+   --  (warning message says value unreferenced), or the it is the node for\n+   --  an overwriting assignment (warning message points to this assignment).\n \n    procedure Warn_On_Useless_Assignments (E : Entity_Id);\n    pragma Inline (Warn_On_Useless_Assignments);"}]}