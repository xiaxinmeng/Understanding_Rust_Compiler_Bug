{"sha": "9b69f523a7f34cf59eacda99f3678649b1eca52c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI2OWY1MjNhN2YzNGNmNTllYWNkYTk5ZjM2Nzg2NDliMWVjYTUyYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-10T12:56:49Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-10T12:56:49Z"}, "message": "(check_format_info): Support X/Open formats like \"%1$d\".\n\nFrom-SVN: r5707", "tree": {"sha": "98781958db715d32f89c4d0271e03e5327816d92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98781958db715d32f89c4d0271e03e5327816d92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b69f523a7f34cf59eacda99f3678649b1eca52c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b69f523a7f34cf59eacda99f3678649b1eca52c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b69f523a7f34cf59eacda99f3678649b1eca52c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b69f523a7f34cf59eacda99f3678649b1eca52c/comments", "author": null, "committer": null, "parents": [{"sha": "02490c738e2fa78912d202e20c16d07f677fcb69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02490c738e2fa78912d202e20c16d07f677fcb69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02490c738e2fa78912d202e20c16d07f677fcb69"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "b6bc0e47f79c1f30db86113b25c3c68f38e35d9e", "filename": "gcc/c-common.c", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b69f523a7f34cf59eacda99f3678649b1eca52c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b69f523a7f34cf59eacda99f3678649b1eca52c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=9b69f523a7f34cf59eacda99f3678649b1eca52c", "patch": "@@ -528,10 +528,12 @@ check_format_info (info, params)\n   tree cur_param;\n   tree cur_type;\n   tree wanted_type;\n+  tree first_fillin_param;\n   char *format_chars;\n   format_char_info *fci;\n   static char message[132];\n   char flag_chars[8];\n+  int has_operand_number = 0;\n \n   /* Skip to format argument.  If the argument isn't available, there's\n      no work for us to do; prototype checking will catch the problem.  */\n@@ -577,13 +579,15 @@ check_format_info (info, params)\n       params = TREE_CHAIN (params);\n       ++arg_num;\n     }\n+\n+  first_fillin_param = params;\n   while (1)\n     {\n       if (*format_chars == 0)\n \t{\n \t  if (format_chars - TREE_STRING_POINTER (format_tree) != format_length)\n \t    warning (\"embedded `\\\\0' in format\");\n-\t  if (info->first_arg_num != 0 && params != 0)\n+\t  if (info->first_arg_num != 0 && params != 0 && ! has_operand_number)\n \t    warning (\"too many arguments for format\");\n \t  return;\n \t}\n@@ -611,6 +615,34 @@ check_format_info (info, params)\n \t}\n       else\n \t{\n+\t  /* See if we have a number followed by a dollar sign.  If we do,\n+\t     it is an operand number, so set PARAMS to that operand.  */\n+\t  if (*format_chars >= '0' && *format_chars <= '9')\n+\t    {\n+\t      char *p = format_chars;\n+\n+\t      while (*p >= '0' && *p++ <= '9')\n+\t\t;\n+\n+\t      if (*p == '$')\n+\t\t{\n+\t\t  int opnum = atoi (format_chars);\n+\n+\t\t  params = first_fillin_param;\n+\t\t  format_chars = p + 1;\n+\t\t  has_operand_number = 1;\n+\n+\t\t  for (i = 1; i < opnum && params != 0; i++)\n+\t\t    params = TREE_CHAIN (params);\n+\n+\t\t  if (opnum == 0 || params == 0)\n+\t\t    {\n+\t\t      warning (\"operand number out of range in format\");\n+\t\t      return;\n+\t\t    }\n+\t\t}\n+\t    }\n+\n \t  while (*format_chars != 0 && index (\" +#0-\", *format_chars) != 0)\n \t    {\n \t      if (index (flag_chars, *format_chars) != 0)"}]}