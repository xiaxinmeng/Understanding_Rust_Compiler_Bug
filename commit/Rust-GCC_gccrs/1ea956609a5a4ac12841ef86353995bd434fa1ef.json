{"sha": "1ea956609a5a4ac12841ef86353995bd434fa1ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVhOTU2NjA5YTVhNGFjMTI4NDFlZjg2MzUzOTk1YmQ0MzRmYTFlZg==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2019-09-18T19:52:09Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2019-09-18T19:52:09Z"}, "message": "[ARM] Add logical DImode expanders\n\nWe currently use default mid-end expanders for logical DImode operations.\nThese split operations without first splitting off complex immediates or\nmemory operands.  The resulting expansions are non-optimal and allow for\nfewer LDRD/STRD opportunities.  So add back explicit expanders which ensure\nmemory operands and immediates are handled more efficiently.\n\n    gcc/\n\tPR target/91738\n\t* config/arm/arm.md (<logical_op>di3): Expand explicitly.\n\t(one_cmpldi2): Likewise.\n\t* config/arm/arm.c (const_ok_for_dimode_op): Return true if one\n\tof the constant parts is simple.\n\t* config/arm/iterators.md (LOGICAL): Add new code iterator.\n\t(logical_op): Add new code attribute.\n\t(logical_OP): Likewise.\n\t* config/arm/predicates.md (arm_anddi_operand): Add predicate.\n\t(arm_iordi_operand): Add predicate.\n\t(arm_xordi_operand): Add predicate.\n\nFrom-SVN: r275907", "tree": {"sha": "04a0a7e9b8668596a3050d3f99b2ce21094b21d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04a0a7e9b8668596a3050d3f99b2ce21094b21d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ea956609a5a4ac12841ef86353995bd434fa1ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ea956609a5a4ac12841ef86353995bd434fa1ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ea956609a5a4ac12841ef86353995bd434fa1ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ea956609a5a4ac12841ef86353995bd434fa1ef/comments", "author": null, "committer": null, "parents": [{"sha": "7706f2f312a87b0c8509cccc986d6372dcd2fbcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7706f2f312a87b0c8509cccc986d6372dcd2fbcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7706f2f312a87b0c8509cccc986d6372dcd2fbcf"}], "stats": {"total": 81, "additions": 79, "deletions": 2}, "files": [{"sha": "04715c146c80f19a7f2e26d796d1a5324b06a9f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea956609a5a4ac12841ef86353995bd434fa1ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea956609a5a4ac12841ef86353995bd434fa1ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ea956609a5a4ac12841ef86353995bd434fa1ef", "patch": "@@ -11,6 +11,20 @@\n \tpseudo register store cost from 3 to 6 to make it the same as\n \tQImode and HImode.\n \n+2019-09-18  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR target/91738\n+\t* config/arm/arm.md (<logical_op>di3): Expand explicitly.\n+\t(one_cmpldi2): Likewise.\n+\t* config/arm/arm.c (const_ok_for_dimode_op): Return true if one\n+\tof the constant parts is simple.\n+\t* config/arm/iterators.md (LOGICAL): Add new code iterator.\n+\t(logical_op): Add new code attribute.\n+\t(logical_OP): Likewise.\n+\t* config/arm/predicates.md (arm_anddi_operand): Add predicate.\n+\t(arm_iordi_operand): Add predicate.\n+\t(arm_xordi_operand): Add predicate.\n+\n 2019-09-18  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/arm/arm.md (maddsidi4): Remove expander."}, {"sha": "9f0975dc0710626ef46abecaa3a205e993821118", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea956609a5a4ac12841ef86353995bd434fa1ef/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea956609a5a4ac12841ef86353995bd434fa1ef/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=1ea956609a5a4ac12841ef86353995bd434fa1ef", "patch": "@@ -4390,8 +4390,8 @@ const_ok_for_dimode_op (HOST_WIDE_INT i, enum rtx_code code)\n     case AND:\n     case IOR:\n     case XOR:\n-      return (const_ok_for_op (hi_val, code) || hi_val == 0xFFFFFFFF)\n-              && (const_ok_for_op (lo_val, code) || lo_val == 0xFFFFFFFF);\n+      return const_ok_for_op (hi_val, code) || hi_val == 0xFFFFFFFF\n+\t     || const_ok_for_op (lo_val, code) || lo_val == 0xFFFFFFFF;\n     case PLUS:\n       return arm_not_operand (hi, SImode) && arm_add_operand (lo, SImode);\n "}, {"sha": "d54082b13dd702aa55a1465c0fbfa87baa89149a", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea956609a5a4ac12841ef86353995bd434fa1ef/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea956609a5a4ac12841ef86353995bd434fa1ef/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=1ea956609a5a4ac12841ef86353995bd434fa1ef", "patch": "@@ -2035,6 +2035,49 @@\n   \"\")\n \f\n \n+; Expand logical operations.  The mid-end expander does not split off memory\n+; operands or complex immediates, which leads to fewer LDRD/STRD instructions.\n+; So an explicit expander is needed to generate better code.\n+\n+(define_expand \"<logical_op>di3\"\n+  [(set (match_operand:DI\t  0 \"s_register_operand\")\n+\t(LOGICAL:DI (match_operand:DI 1 \"s_register_operand\")\n+\t\t    (match_operand:DI 2 \"arm_<logical_op>di_operand\")))]\n+  \"TARGET_32BIT\"\n+  {\n+      rtx low  = simplify_gen_binary (<logical_OP>, SImode,\n+\t\t\t\t      gen_lowpart (SImode, operands[1]),\n+\t\t\t\t      gen_lowpart (SImode, operands[2]));\n+      rtx high = simplify_gen_binary (<logical_OP>, SImode,\n+\t\t\t\t      gen_highpart (SImode, operands[1]),\n+\t\t\t\t      gen_highpart_mode (SImode, DImode,\n+\t\t\t\t\t\t\t operands[2]));\n+\n+      emit_insn (gen_rtx_SET (gen_lowpart (SImode, operands[0]), low));\n+      emit_insn (gen_rtx_SET (gen_highpart (SImode, operands[0]), high));\n+      DONE;\n+  }\n+)\n+\n+(define_expand \"one_cmpldi2\"\n+  [(set (match_operand:DI 0 \"s_register_operand\")\n+\t(not:DI (match_operand:DI 1 \"s_register_operand\")))]\n+  \"TARGET_32BIT\"\n+  {\n+      rtx low  = simplify_gen_unary (NOT, SImode,\n+\t\t\t\t     gen_lowpart (SImode, operands[1]),\n+\t\t\t\t     SImode);\n+      rtx high = simplify_gen_unary (NOT, SImode,\n+\t\t\t\t     gen_highpart_mode (SImode, DImode,\n+\t\t\t\t\t\t\toperands[1]),\n+\t\t\t\t     SImode);\n+\n+      emit_insn (gen_rtx_SET (gen_lowpart (SImode, operands[0]), low));\n+      emit_insn (gen_rtx_SET (gen_highpart (SImode, operands[0]), high));\n+      DONE;\n+  }\n+)\n+\n ;; Split DImode and, ior, xor operations.  Simply perform the logical\n ;; operation on the upper and lower halves of the registers.\n ;; This is needed for atomic operations in arm_split_atomic_op."}, {"sha": "5e3299e850813db2f3c0a25a6cde779d1d0d1d55", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea956609a5a4ac12841ef86353995bd434fa1ef/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea956609a5a4ac12841ef86353995bd434fa1ef/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=1ea956609a5a4ac12841ef86353995bd434fa1ef", "patch": "@@ -239,6 +239,8 @@\n ;; A list of ...\n (define_code_iterator IOR_XOR [ior xor])\n \n+(define_code_iterator LOGICAL [and ior xor])\n+\n ;; Operations on two halves of a quadword vector.\n (define_code_iterator VQH_OPS [plus smin smax umin umax])\n \n@@ -285,6 +287,9 @@\n \n (define_code_attr vfml_op [(plus \"a\") (minus \"s\")])\n \n+(define_code_attr logical_op [(ior \"ior\") (xor \"xor\") (and \"and\")])\n+(define_code_attr logical_OP [(ior \"IOR\") (xor \"XOR\") (and \"AND\")])\n+\n ;;----------------------------------------------------------------------------\n ;; Int iterators\n ;;----------------------------------------------------------------------------"}, {"sha": "8b36e7ee462235ad26e132f1ccf98d28c2487d67", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea956609a5a4ac12841ef86353995bd434fa1ef/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea956609a5a4ac12841ef86353995bd434fa1ef/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=1ea956609a5a4ac12841ef86353995bd434fa1ef", "patch": "@@ -206,6 +206,21 @@\n        (and (match_code \"const_int\")\n \t    (match_test \"const_ok_for_dimode_op (INTVAL (op), PLUS)\"))))\n \n+(define_predicate \"arm_anddi_operand\"\n+  (ior (match_operand 0 \"s_register_operand\")\n+       (and (match_code \"const_int\")\n+\t    (match_test \"const_ok_for_dimode_op (INTVAL (op), AND)\"))))\n+\n+(define_predicate \"arm_iordi_operand\"\n+  (ior (match_operand 0 \"s_register_operand\")\n+       (and (match_code \"const_int\")\n+\t    (match_test \"const_ok_for_dimode_op (INTVAL (op), IOR)\"))))\n+\n+(define_predicate \"arm_xordi_operand\"\n+  (ior (match_operand 0 \"s_register_operand\")\n+       (and (match_code \"const_int\")\n+\t    (match_test \"const_ok_for_dimode_op (INTVAL (op), XOR)\"))))\n+\n (define_predicate \"arm_addimm_operand\"\n   (ior (match_operand 0 \"arm_immediate_operand\")\n        (match_operand 0 \"arm_neg_immediate_operand\")))"}]}