{"sha": "6aa12274007bccbae2691a9d336c37fe167bb535", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFhMTIyNzQwMDdiY2NiYWUyNjkxYTlkMzM2YzM3ZmUxNjdiYjUzNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-12-01T14:14:18Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-12-01T14:14:18Z"}, "message": "libstdc++: Simplify detection of built-in functions\n\nThis fixes a regression affecting the Intel compiler. Because that\ncompiler defines __GNUC__ to match whatever version of GCC it finds on\nthe host system, it might claim to be a brand new GCC despite not\nactually supporting all the built-ins that the latest GCC supports. This\nmeans the config checks for __GNUC__ don't work. Most recently this\nbroke when r11-3569-g73ae6eb572515ad627b575a7fbdfdd47a4368e1c switched\nus from using __is_same_as to __is_same when __GNUC__ >= 11.\n\nBecause __has_builtin is supported by all of GCC, Clang, and Intel we can\nuse that to reliably detect whether a given built-in is supported,\ninstead of hardcoding anything based on __GNUC__. The big caveat is\nthat for versions of Clang <= 9.0.0 and for (as far as I can tell) all\nreleased versions of Intel icc, __has_builtin only evaluates to true for\nbuilt-ins with a name starting \"__builtin_\". For __is_aggregate,\n__is_same, and __has_unique_object_representations it's necessary to use\n__is_identifier to check if it's a valid identifeir token instead.\n\nThe solution used in this patch is to define _GLIBCXX_HAS_BUILTIN and\nuse that instead of using __has_builtin directly. For compilers that\ndefine __is_identifier as well as __has_builtin we use both, so that if\n__has_builtin evaluates to false we try again using !__is_identifier.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/c++config (_GLIBCXX_HAS_BUILTIN): Define macro to\n\twork around different implementations of __has_builtin.\n\t(_GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP)\n\t(_GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE)\n\t(_GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED)\n\t(_GLIBCXX_HAVE_BUILTIN_IS_SAME, _GLIBCXX_HAVE_BUILTIN_LAUNDER):\n\tDefine using _GLIBCXX_HAS_BUILTIN.", "tree": {"sha": "42f6cbab523c6bb2b6df78a69a4c1717e7f96160", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42f6cbab523c6bb2b6df78a69a4c1717e7f96160"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6aa12274007bccbae2691a9d336c37fe167bb535", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aa12274007bccbae2691a9d336c37fe167bb535", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aa12274007bccbae2691a9d336c37fe167bb535", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aa12274007bccbae2691a9d336c37fe167bb535/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ea5a23766b8077a503362c4fa6f51de92669c11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ea5a23766b8077a503362c4fa6f51de92669c11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ea5a23766b8077a503362c4fa6f51de92669c11"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "27302ed392eb163954c5a2d367831dbcb0ead3c3", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa12274007bccbae2691a9d336c37fe167bb535/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa12274007bccbae2691a9d336c37fe167bb535/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=6aa12274007bccbae2691a9d336c37fe167bb535", "patch": "@@ -653,35 +653,36 @@ namespace std\n #define _GLIBCXX_USE_FLOAT128\n #endif\n \n-#if __GNUC__ >= 7\n-// Assume these are available if the compiler claims to be a recent GCC:\n+#ifdef __has_builtin\n+# ifdef __is_identifier\n+// Intel and older Clang require !__is_identifier for some built-ins:\n+#  define _GLIBCXX_HAS_BUILTIN(B) __has_builtin(B) || ! __is_identifier(B)\n+# else\n+#  define _GLIBCXX_HAS_BUILTIN(B) __has_builtin(B)\n+# endif\n+#endif\n+\n+#if _GLIBCXX_HAS_BUILTIN(__has_unique_object_representations)\n # define _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP 1\n+#endif\n+\n+#if _GLIBCXX_HAS_BUILTIN(__is_aggregate)\n # define _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE 1\n-# define _GLIBCXX_HAVE_BUILTIN_LAUNDER 1\n-# if __GNUC__ >= 9\n-#  define _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED 1\n-# endif\n-# if __GNUC__ >= 11\n-#  define _GLIBCXX_HAVE_BUILTIN_IS_SAME 1\n-# endif\n-#elif defined(__is_identifier) && defined(__has_builtin)\n-// For non-GNU compilers:\n-# if ! __is_identifier(__has_unique_object_representations)\n-#  define _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP 1\n-# endif\n-# if ! __is_identifier(__is_aggregate)\n-#  define _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE 1\n-# endif\n-# if __has_builtin(__builtin_launder)\n-#  define _GLIBCXX_HAVE_BUILTIN_LAUNDER 1\n-# endif\n-# if __has_builtin(__builtin_is_constant_evaluated)\n+#endif\n+\n+#if _GLIBCXX_HAS_BUILTIN(__builtin_is_constant_evaluated)\n #  define _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED 1\n-# endif\n-# if ! __is_identifier(__is_same)\n+#endif\n+\n+#if _GLIBCXX_HAS_BUILTIN(__is_same)\n #  define _GLIBCXX_HAVE_BUILTIN_IS_SAME 1\n-# endif\n-#endif // GCC\n+#endif\n+\n+#if _GLIBCXX_HAS_BUILTIN(__builtin_launder)\n+# define _GLIBCXX_HAVE_BUILTIN_LAUNDER 1\n+#endif\n+\n+#undef _GLIBCXX_HAS_BUILTIN\n \n #if _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n # define __glibcxx_assert_1(_Condition)\t\t\\"}]}