{"sha": "7874b7c5b59923d8a56eaf41f7518c71b910355e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg3NGI3YzViNTk5MjNkOGE1NmVhZjQxZjc1MThjNzFiOTEwMzU1ZQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2018-02-22T21:17:51Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2018-02-22T21:17:51Z"}, "message": "re PR target/81572 (gcc-7 regression: unnecessary vector regmove on compare)\n\n2018-02-22  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR target/81572\n\t* lra-int.h (LRA_UNKNOWN_ALT, LRA_NON_CLOBBERED_ALT): New macros.\n\t* lra.c (lra_set_insn_recog_data, lra_update_insn_recog_data): Use\n\tLRA_UNKNOWN_ALT.\n\t* lra-constraints.c (curr_insn_transform): Set up\n\tLRA_NON_CLOBBERED_ALT for moves processed on the fast path.  Use\n\tLRA_UNKNOWN_ALT.\n\t(remove_inheritance_pseudos): Use LRA_UNKNOWN_ALT.\n\t* lra-eliminations.c (spill_pseudos): Ditto.\n\t(process_insn_for_elimination): Ditto.\n\t* lra-lives.c (reg_early_clobber_p): Use the new macros.\n\t* lra-spills.c (spill_pseudos): Use LRA_UNKNOWN_ALT and\n\tLRA_NON_CLOBBERED_ALT.\n\n2018-02-22  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR target/81572\n\t* gcc.target/powerpc/pr81572.c: New.\n\nFrom-SVN: r257915", "tree": {"sha": "7268aa9b5a8752e1ace59914f5238e43daa7a182", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7268aa9b5a8752e1ace59914f5238e43daa7a182"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7874b7c5b59923d8a56eaf41f7518c71b910355e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7874b7c5b59923d8a56eaf41f7518c71b910355e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7874b7c5b59923d8a56eaf41f7518c71b910355e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7874b7c5b59923d8a56eaf41f7518c71b910355e/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5"}], "stats": {"total": 75, "additions": 61, "deletions": 14}, "files": [{"sha": "fd0745d297a6760bce2f98310867456dc3d651bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7874b7c5b59923d8a56eaf41f7518c71b910355e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7874b7c5b59923d8a56eaf41f7518c71b910355e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7874b7c5b59923d8a56eaf41f7518c71b910355e", "patch": "@@ -1,3 +1,19 @@\n+2018-02-22  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/81572\n+\t* lra-int.h (LRA_UNKNOWN_ALT, LRA_NON_CLOBBERED_ALT): New macros.\n+\t* lra.c (lra_set_insn_recog_data, lra_update_insn_recog_data): Use\n+\tLRA_UNKNOWN_ALT.\n+\t* lra-constraints.c (curr_insn_transform): Set up\n+\tLRA_NON_CLOBBERED_ALT for moves processed on the fast path.  Use\n+\tLRA_UNKNOWN_ALT.\n+\t(remove_inheritance_pseudos): Use LRA_UNKNOWN_ALT.\n+\t* lra-eliminations.c (spill_pseudos): Ditto.\n+\t(process_insn_for_elimination): Ditto.\n+\t* lra-lives.c (reg_early_clobber_p): Use the new macros.\n+\t* lra-spills.c (spill_pseudos): Use LRA_UNKNOWN_ALT and\n+\tLRA_NON_CLOBBERED_ALT.\n+\n 2018-02-22  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/84480"}, {"sha": "59b97540d98fb7d0b040e629893e9cee01f75ad3", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7874b7c5b59923d8a56eaf41f7518c71b910355e/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7874b7c5b59923d8a56eaf41f7518c71b910355e/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=7874b7c5b59923d8a56eaf41f7518c71b910355e", "patch": "@@ -3730,7 +3730,13 @@ curr_insn_transform (bool check_only_p)\n \n   curr_insn_set = single_set (curr_insn);\n   if (curr_insn_set != NULL_RTX && simple_move_p ())\n-    return false;\n+    {\n+      /* We assume that the corresponding insn alternative has no\n+\t earlier clobbers.  If it is not the case, don't define move\n+\t cost equal to 2 for the corresponding register classes.  */\n+      lra_set_used_insn_alternative (curr_insn, LRA_NON_CLOBBERED_ALT);\n+      return false;\n+    }\n \n   no_input_reloads_p = no_output_reloads_p = false;\n   goal_alt_number = -1;\n@@ -3838,15 +3844,15 @@ curr_insn_transform (bool check_only_p)\n   if (change_p)\n     /* If we've changed the instruction then any alternative that\n        we chose previously may no longer be valid.  */\n-    lra_set_used_insn_alternative (curr_insn, -1);\n+    lra_set_used_insn_alternative (curr_insn, LRA_UNKNOWN_ALT);\n \n   if (! check_only_p && curr_insn_set != NULL_RTX\n       && check_and_process_move (&change_p, &sec_mem_p))\n     return change_p;\n \n  try_swapped:\n \n-  reused_alternative_num = check_only_p ? -1 : curr_id->used_insn_alternative;\n+  reused_alternative_num = check_only_p ? LRA_UNKNOWN_ALT : curr_id->used_insn_alternative;\n   if (lra_dump_file != NULL && reused_alternative_num >= 0)\n     fprintf (lra_dump_file, \"Reusing alternative %d for insn #%u\\n\",\n \t     reused_alternative_num, INSN_UID (curr_insn));\n@@ -6752,7 +6758,7 @@ remove_inheritance_pseudos (bitmap remove_pseudos)\n \t\t\t}\n \t\t      lra_push_insn_and_update_insn_regno_info (curr_insn);\n \t\t      lra_set_used_insn_alternative_by_uid\n-\t\t\t(INSN_UID (curr_insn), -1);\n+\t\t\t(INSN_UID (curr_insn), LRA_UNKNOWN_ALT);\n \t\t      done_p = true;\n \t\t      if (lra_dump_file != NULL)\n \t\t\t{\n@@ -6791,7 +6797,7 @@ remove_inheritance_pseudos (bitmap remove_pseudos)\n \t\t     constraints pass.  */\n \t\t  lra_push_insn_and_update_insn_regno_info (curr_insn);\n \t\t  lra_set_used_insn_alternative_by_uid\n-\t\t    (INSN_UID (curr_insn), -1);\n+\t\t    (INSN_UID (curr_insn), LRA_UNKNOWN_ALT);\n \t\t}\n \t      else if (restored_regs_p)\n \t\t/* The instruction has been restored to the form that"}, {"sha": "21d8d5f8018d696bf54fc315fc0639e14c1e1760", "filename": "gcc/lra-eliminations.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7874b7c5b59923d8a56eaf41f7518c71b910355e/gcc%2Flra-eliminations.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7874b7c5b59923d8a56eaf41f7518c71b910355e/gcc%2Flra-eliminations.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-eliminations.c?ref=7874b7c5b59923d8a56eaf41f7518c71b910355e", "patch": "@@ -1175,7 +1175,7 @@ spill_pseudos (HARD_REG_SET set)\n     if (bitmap_bit_p (&to_process, INSN_UID (insn)))\n       {\n \tlra_push_insn (insn);\n-\tlra_set_used_insn_alternative (insn, -1);\n+\tlra_set_used_insn_alternative (insn, LRA_UNKNOWN_ALT);\n       }\n   bitmap_clear (&to_process);\n }\n@@ -1408,7 +1408,7 @@ process_insn_for_elimination (rtx_insn *insn, bool final_p, bool first_p)\n \t}\n       lra_update_insn_regno_info (insn);\n       lra_push_insn (insn);\n-      lra_set_used_insn_alternative (insn, -1);\n+      lra_set_used_insn_alternative (insn, LRA_UNKNOWN_ALT);\n     }\n }\n "}, {"sha": "03839187cf6109f0c84e98e5be1158302264037e", "filename": "gcc/lra-int.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7874b7c5b59923d8a56eaf41f7518c71b910355e/gcc%2Flra-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7874b7c5b59923d8a56eaf41f7518c71b910355e/gcc%2Flra-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-int.h?ref=7874b7c5b59923d8a56eaf41f7518c71b910355e", "patch": "@@ -202,15 +202,20 @@ struct lra_static_insn_data\n   const struct operand_alternative *operand_alternative;\n };\n \n+/* Negative insn alternative numbers used for special cases.  */\n+#define LRA_UNKNOWN_ALT -1\n+#define LRA_NON_CLOBBERED_ALT -2\n+\n /* LRA internal info about an insn (LRA internal insn\n    representation).  */\n struct lra_insn_recog_data\n {\n   /* The insn code.  */\n   int icode;\n-  /* The alternative should be used for the insn, -1 if invalid, or we\n-     should try to use any alternative, or the insn is a debug\n-     insn.  */\n+  /* The alternative should be used for the insn, LRA_UNKNOWN_ALT if\n+     unknown, or we should assume any alternative, or the insn is a\n+     debug insn.  LRA_NON_CLOBBERED_ALT means ignoring any earlier\n+     clobbers for the insn.  */\n   int used_insn_alternative;\n   /* SP offset before the insn relative to one at the func start.  */\n   poly_int64 sp_offset;"}, {"sha": "ddc0a9bbcc5176b1fa3d09b6e8df9b9be2e34f1d", "filename": "gcc/lra-lives.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7874b7c5b59923d8a56eaf41f7518c71b910355e/gcc%2Flra-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7874b7c5b59923d8a56eaf41f7518c71b910355e/gcc%2Flra-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-lives.c?ref=7874b7c5b59923d8a56eaf41f7518c71b910355e", "patch": "@@ -598,7 +598,9 @@ static inline bool\n reg_early_clobber_p (const struct lra_insn_reg *reg, int n_alt)\n {\n   return (reg->early_clobber\n-\t  && (n_alt < 0 || TEST_BIT (reg->early_clobber_alts, n_alt)));\n+\t  && (n_alt == LRA_UNKNOWN_ALT\n+\t      || (n_alt != LRA_NON_CLOBBERED_ALT\n+\t\t  && TEST_BIT (reg->early_clobber_alts, n_alt))));\n }\n \n /* Process insns of the basic block BB to update pseudo live ranges,"}, {"sha": "8f6278acae42edabd78f5f188ce627d81e1acedc", "filename": "gcc/lra-spills.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7874b7c5b59923d8a56eaf41f7518c71b910355e/gcc%2Flra-spills.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7874b7c5b59923d8a56eaf41f7518c71b910355e/gcc%2Flra-spills.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-spills.c?ref=7874b7c5b59923d8a56eaf41f7518c71b910355e", "patch": "@@ -517,7 +517,7 @@ spill_pseudos (void)\n \t\t\t INSN_UID (insn));\n \t      lra_push_insn (insn);\n \t      if (lra_reg_spill_p || targetm.different_addr_displacement_p ())\n-\t\tlra_set_used_insn_alternative (insn, -1);\n+\t\tlra_set_used_insn_alternative (insn, LRA_UNKNOWN_ALT);\n \t    }\n \t  else if (CALL_P (insn)\n \t\t   /* Presence of any pseudo in CALL_INSN_FUNCTION_USAGE"}, {"sha": "08de09d14dd17c4a159cfe23b5f132333aa9391a", "filename": "gcc/lra.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7874b7c5b59923d8a56eaf41f7518c71b910355e/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7874b7c5b59923d8a56eaf41f7518c71b910355e/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=7874b7c5b59923d8a56eaf41f7518c71b910355e", "patch": "@@ -958,7 +958,7 @@ lra_set_insn_recog_data (rtx_insn *insn)\n   data = XNEW (struct lra_insn_recog_data);\n   lra_insn_recog_data[uid] = data;\n   data->insn = insn;\n-  data->used_insn_alternative = -1;\n+  data->used_insn_alternative = LRA_UNKNOWN_ALT;\n   data->icode = icode;\n   data->regs = NULL;\n   if (DEBUG_INSN_P (insn))\n@@ -1207,7 +1207,7 @@ lra_update_insn_recog_data (rtx_insn *insn)\n       return data;\n     }\n   insn_static_data = data->insn_static_data;\n-  data->used_insn_alternative = -1;\n+  data->used_insn_alternative = LRA_UNKNOWN_ALT;\n   if (DEBUG_INSN_P (insn))\n     return data;\n   if (data->icode < 0)"}, {"sha": "01ede00ba8549dc946e6781adec46e65a19aea44", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7874b7c5b59923d8a56eaf41f7518c71b910355e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7874b7c5b59923d8a56eaf41f7518c71b910355e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7874b7c5b59923d8a56eaf41f7518c71b910355e", "patch": "@@ -1,3 +1,8 @@\n+2018-02-22  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/81572\n+\t* gcc.target/powerpc/pr81572.c: New.\n+\n 2018-02-22  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* go.test/go-test.exp (go-set-goarch): Recognize riscv64-*-*."}, {"sha": "de00c187d6280108fa94b157cac6f828fbe6d88b", "filename": "gcc/testsuite/gcc.target/powerpc/pr81572.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7874b7c5b59923d8a56eaf41f7518c71b910355e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr81572.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7874b7c5b59923d8a56eaf41f7518c71b910355e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr81572.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr81572.c?ref=7874b7c5b59923d8a56eaf41f7518c71b910355e", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target powerpc64*-*-* } } */\n+/* { dg-options \"-O2 -mcpu=power7\" } */\n+/* { dg-final { scan-assembler-not \"xxlor\" } } */\n+\n+#include <altivec.h>\n+\n+typedef __vector unsigned char nvec_t;\n+\n+long testz_and(nvec_t a, nvec_t b)\n+{\n+  nvec_t c = vec_andc(a, b);\n+  return vec_all_eq(a, c);\n+}"}]}