{"sha": "7262646b3b02fd23eeeef75b9694bbcfbf43ef81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI2MjY0NmIzYjAyZmQyM2VlZWVmNzViOTY5NGJiY2ZiZjQzZWY4MQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-04-15T20:32:50Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-04-15T20:32:50Z"}, "message": "Backport PRs 90059, 90060, 90062\n\n\tPR d/90059\n\tPR d/90060\n\tPR d/90062\nlibphobos: Merge upstream druntime 70b9fea6\n\nBackports fixes in the extern(C) bindings for the Solaris/SPARC port.\n\nInitial patch by Rainer Orth.\n\nReviewed-on: https://github.com/dlang/druntime/pull/2555\n\nFrom-SVN: r270372", "tree": {"sha": "3f78fd5e93754a9a1861d29969e6ba67353631eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f78fd5e93754a9a1861d29969e6ba67353631eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7262646b3b02fd23eeeef75b9694bbcfbf43ef81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7262646b3b02fd23eeeef75b9694bbcfbf43ef81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7262646b3b02fd23eeeef75b9694bbcfbf43ef81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7262646b3b02fd23eeeef75b9694bbcfbf43ef81/comments", "author": null, "committer": null, "parents": [{"sha": "b7a9e9f4a275264b35e4422bd883c72c17aaba36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7a9e9f4a275264b35e4422bd883c72c17aaba36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7a9e9f4a275264b35e4422bd883c72c17aaba36"}], "stats": {"total": 162, "additions": 137, "deletions": 25}, "files": [{"sha": "dd5f621082ffd46fa044c0340479e77ce6fb6221", "filename": "libphobos/libdruntime/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7262646b3b02fd23eeeef75b9694bbcfbf43ef81/libphobos%2Flibdruntime%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7262646b3b02fd23eeeef75b9694bbcfbf43ef81/libphobos%2Flibdruntime%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMERGE?ref=7262646b3b02fd23eeeef75b9694bbcfbf43ef81", "patch": "@@ -1,4 +1,4 @@\n-175bf5fc69d26fec60d533ff77f7e915fd5bb468\n+70b9fea60246e63d936ad6826b1b48b6e0f1de8f\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/druntime repository."}, {"sha": "6200bfc3fe2721952b320121f62bc00b7549315b", "filename": "libphobos/libdruntime/core/sys/posix/ucontext.d", "status": "modified", "additions": 105, "deletions": 9, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7262646b3b02fd23eeeef75b9694bbcfbf43ef81/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fucontext.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7262646b3b02fd23eeeef75b9694bbcfbf43ef81/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fucontext.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fucontext.d?ref=7262646b3b02fd23eeeef75b9694bbcfbf43ef81", "patch": "@@ -25,6 +25,10 @@ nothrow:\n \n version (RISCV32) version = RISCV_Any;\n version (RISCV64) version = RISCV_Any;\n+version (SPARC)   version = SPARC_Any;\n+version (SPARC64) version = SPARC_Any;\n+version (X86)     version = X86_Any;\n+version (X86_64)  version = X86_Any;\n \n //\n // XOpen (XSI)\n@@ -1029,6 +1033,8 @@ else version (DragonFlyBSD)\n }\n else version (Solaris)\n {\n+    private import core.stdc.stdint;\n+\n     alias uint[4] upad128_t;\n \n     version (SPARC64)\n@@ -1127,10 +1133,13 @@ else version (Solaris)\n     }\n     else version (X86_64)\n     {\n-        union _u_st\n+        private\n         {\n-            ushort[5]   fpr_16;\n-            upad128_t   __fpr_pad;\n+            union _u_st\n+            {\n+                ushort[5]   fpr_16;\n+                upad128_t   __fpr_pad;\n+            }\n         }\n \n         struct fpregset_t\n@@ -1189,20 +1198,94 @@ else version (Solaris)\n     else\n         static assert(0, \"unimplemented\");\n \n-    struct mcontext_t\n+    version (SPARC_Any)\n     {\n-        gregset_t   gregs;\n-        fpregset_t  fpregs;\n+        private\n+        {\n+            struct rwindow\n+            {\n+                greg_t[8]     rw_local;\n+                greg_t[8]     rw_in;\n+            }\n+\n+            struct gwindows_t\n+            {\n+                int         wbcnt;\n+                greg_t[31] *spbuf;\n+                rwindow[31] wbuf;\n+            }\n+\n+            struct xrs_t\n+            {\n+                uint         xrs_id;\n+                caddr_t      xrs_ptr;\n+            }\n+\n+            struct cxrs_t\n+            {\n+                uint         cxrs_id;\n+                caddr_t      cxrs_ptr;\n+            }\n+\n+            alias int64_t[16] asrset_t;\n+        }\n+\n+        struct mcontext_t\n+        {\n+            gregset_t    gregs;\n+            gwindows_t   *gwins;\n+            fpregset_t   fpregs;\n+            xrs_t        xrs;\n+            version (SPARC64)\n+            {\n+                asrset_t asrs;\n+                cxrs_t   cxrs;\n+                c_long[2] filler;\n+            }\n+            else version (SPARC)\n+            {\n+                cxrs_t   cxrs;\n+                c_long[17] filler;\n+            }\n+        }\n+    }\n+    else version (X86_Any)\n+    {\n+        private\n+        {\n+            struct xrs_t\n+            {\n+                uint         xrs_id;\n+                caddr_t      xrs_ptr;\n+            }\n+        }\n+\n+        struct mcontext_t\n+        {\n+            gregset_t   gregs;\n+            fpregset_t  fpregs;\n+        }\n     }\n \n     struct ucontext_t\n     {\n-        c_ulong      uc_flags;\n+        version (SPARC_Any)\n+            uint    uc_flags;\n+        else version (X86_Any)\n+            c_ulong uc_flags;\n         ucontext_t  *uc_link;\n         sigset_t    uc_sigmask;\n         stack_t     uc_stack;\n         mcontext_t  uc_mcontext;\n-        c_long[5]   uc_filler;\n+        version (SPARC64)\n+            c_long[4]  uc_filler;\n+        else version (SPARC)\n+            c_long[23] uc_filler;\n+        else version (X86_Any)\n+        {\n+            xrs_t      uc_xrs;\n+            c_long[3]  uc_filler;\n+        }\n     }\n }\n else version (CRuntime_UClibc)\n@@ -1399,7 +1482,20 @@ int  swapcontext(ucontext_t*, in ucontext_t*);\n static if ( is( ucontext_t ) )\n {\n     int  getcontext(ucontext_t*);\n-    void makecontext(ucontext_t*, void function(), int, ...);\n+\n+    version (Solaris)\n+    {\n+        version (SPARC_Any)\n+        {\n+            void __makecontext_v2(ucontext_t*, void function(), int, ...);\n+            alias makecontext = __makecontext_v2;\n+        }\n+        else\n+            void makecontext(ucontext_t*, void function(), int, ...);\n+    }\n+    else\n+        void makecontext(ucontext_t*, void function(), int, ...);\n+\n     int  setcontext(in ucontext_t*);\n     int  swapcontext(ucontext_t*, in ucontext_t*);\n }"}, {"sha": "2d908b12184a9e8933d0b263784734b5431c57b9", "filename": "libphobos/libdruntime/core/sys/solaris/link.d", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7262646b3b02fd23eeeef75b9694bbcfbf43ef81/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fsolaris%2Flink.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7262646b3b02fd23eeeef75b9694bbcfbf43ef81/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fsolaris%2Flink.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fsolaris%2Flink.d?ref=7262646b3b02fd23eeeef75b9694bbcfbf43ef81", "patch": "@@ -27,12 +27,12 @@ void ld_section(in char*, Elf32_Shdr*, Elf32_Word, Elf_Data*, Elf*);\n \n version (D_LP64)\n {\n-void ld_start64(in char*, in Elf64_Half, in char*);\n-void ld_atexit64(int);\n-void ld_open64(in char**, in char**, int*, int, Elf**, Elf*, size_t, in Elf_Kind);\n-void ld_file64(in char*, in Elf_Kind, int, Elf*);\n-void ld_input_section64(in char*, Elf64_Shdr**, Elf64_Word, Elf_Data*, Elf*, uint*);\n-void ld_section64(in char*, Elf64_Shdr*, Elf64_Word, Elf_Data*, Elf*);\n+    void ld_start64(in char*, in Elf64_Half, in char*);\n+    void ld_atexit64(int);\n+    void ld_open64(in char**, in char**, int*, int, Elf**, Elf*, size_t, in Elf_Kind);\n+    void ld_file64(in char*, in Elf_Kind, int, Elf*);\n+    void ld_input_section64(in char*, Elf64_Shdr**, Elf64_Word, Elf_Data*, Elf*, uint*);\n+    void ld_section64(in char*, Elf64_Shdr*, Elf64_Word, Elf_Data*, Elf*);\n }\n \n enum LD_SUP_VNONE    = 0;\n@@ -137,17 +137,21 @@ int la_objfilter(uintptr_t*, in char*, uintptr_t*, uint);\n \n version (D_LP64)\n {\n-uintptr_t la_amd64_pltenter(Elf64_Sym*, uint, uintptr_t*, uintptr_t*, La_amd64_regs*, uint*, in char*);\n-uintptr_t la_symbind64(Elf64_Sym*, uint, uintptr_t*, uintptr_t*, uint*, in char*);\n-uintptr_t la_sparcv9_pltenter(Elf64_Sym*, uint, uintptr_t*, uintptr_t*, La_sparcv9_regs*, uint*, in char*);\n-uintptr_t la_pltexit64(Elf64_Sym*, uint, uintptr_t*, uintptr_t*, uintptr_t, in char*);\n+    uintptr_t la_amd64_pltenter(Elf64_Sym*, uint, uintptr_t*, uintptr_t*,\n+                                La_amd64_regs*, uint*, in char*);\n+    uintptr_t la_symbind64(Elf64_Sym*, uint, uintptr_t*, uintptr_t*, uint*, in char*);\n+    uintptr_t la_sparcv9_pltenter(Elf64_Sym*, uint, uintptr_t*, uintptr_t*,\n+                                  La_sparcv9_regs*, uint*, in char*);\n+    uintptr_t la_pltexit64(Elf64_Sym*, uint, uintptr_t*, uintptr_t*, uintptr_t, in char*);\n }\n else\n {\n-uintptr_t la_symbind32(Elf32_Sym*, uint, uintptr_t*, uintptr_t*, uint*);\n-uintptr_t la_sparcv8_pltenter(Elf32_Sym*, uint, uintptr_t*, uintptr_t*, La_sparcv8_regs*, uint*);\n-uintptr_t la_i86_pltenter(Elf32_Sym*, uint, uintptr_t*, uintptr_t*, La_i86_regs*, uint*);\n-uintptr_t la_pltexit(Elf32_Sym*, uint, uintptr_t*, uintptr_t*, uintptr_t);\n+    uintptr_t la_symbind32(Elf32_Sym*, uint, uintptr_t*, uintptr_t*, uint*);\n+    uintptr_t la_sparcv8_pltenter(Elf32_Sym*, uint, uintptr_t*, uintptr_t*,\n+                                  La_sparcv8_regs*, uint*);\n+    uintptr_t la_i86_pltenter(Elf32_Sym*, uint, uintptr_t*, uintptr_t*,\n+                              La_i86_regs*, uint*);\n+    uintptr_t la_pltexit(Elf32_Sym*, uint, uintptr_t*, uintptr_t*, uintptr_t);\n }\n \n template ElfW(string type)\n@@ -158,13 +162,16 @@ template ElfW(string type)\n         mixin(\"alias Elf32_\"~type~\" ElfW;\");\n }\n \n-struct dl_phdr_info {\n+struct dl_phdr_info\n+{\n     ElfW!\"Addr\"        dlpi_addr;\n     char*              dlpi_name;\n     ElfW!\"Phdr\"*       dlpi_phdr;\n     ElfW!\"Half\"        dlpi_phnum;\n     uint64_t           dlpi_adds;\n     uint64_t           dlpi_subs;\n+    size_t             dlpi_tls_modid;  // since Solaris 11.5\n+    void*              dlpi_tls_data;   // since Solaris 11.5\n };\n \n private alias extern(C) int function(dl_phdr_info*, size_t, void *) dl_iterate_phdr_cb;"}, {"sha": "0466e7ae6313b34581f03f12c84c53d97db9baba", "filename": "libphobos/libdruntime/core/thread.d", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7262646b3b02fd23eeeef75b9694bbcfbf43ef81/libphobos%2Flibdruntime%2Fcore%2Fthread.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7262646b3b02fd23eeeef75b9694bbcfbf43ef81/libphobos%2Flibdruntime%2Fcore%2Fthread.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fthread.d?ref=7262646b3b02fd23eeeef75b9694bbcfbf43ef81", "patch": "@@ -3615,6 +3615,15 @@ private\n             version = AsmExternal;\n         }\n     }\n+    else version (SPARC)\n+    {\n+        // NOTE: The SPARC ABI specifies only doubleword alignment.\n+        version = AlignFiberStackTo16Byte;\n+    }\n+    else version (SPARC64)\n+    {\n+        version = AlignFiberStackTo16Byte;\n+    }\n \n     version (Posix)\n     {"}]}