{"sha": "0d47cee6c4d1c2d1b3a0a4c22becde465660d6f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ0N2NlZTZjNGQxYzJkMWIzYTBhNGMyMmJlY2RlNDY1NjYwZDZmMQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-10-21T07:55:30Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-10-21T07:55:30Z"}, "message": "[ree] PR rtl-optimization/78038: Handle global register dataflow definitions in ree\n\n\tPR rtl-optimization/78038\n\t* ree.c (get_defs): Return NULL if a defining insn for REG cannot\n\tbe deduced to set REG through the RTL structure.\n\t(make_defs_and_copies_lists): Return false on a failing get_defs call.\n\n\t* gcc.target/aarch64/pr78038.c: New test.\n\nFrom-SVN: r241395", "tree": {"sha": "d995170944367b2434e3ebb81e4855452cf1ba8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d995170944367b2434e3ebb81e4855452cf1ba8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d47cee6c4d1c2d1b3a0a4c22becde465660d6f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d47cee6c4d1c2d1b3a0a4c22becde465660d6f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d47cee6c4d1c2d1b3a0a4c22becde465660d6f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d47cee6c4d1c2d1b3a0a4c22becde465660d6f1/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a20d03c88261b7d475db7c410c1018df326c67af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a20d03c88261b7d475db7c410c1018df326c67af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a20d03c88261b7d475db7c410c1018df326c67af"}], "stats": {"total": 50, "additions": 49, "deletions": 1}, "files": [{"sha": "bd7e9680d8c37237b398dc07c555e748ac137ef1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d47cee6c4d1c2d1b3a0a4c22becde465660d6f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d47cee6c4d1c2d1b3a0a4c22becde465660d6f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d47cee6c4d1c2d1b3a0a4c22becde465660d6f1", "patch": "@@ -1,3 +1,10 @@\n+2016-10-21  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR rtl-optimization/78038\n+\t* ree.c (get_defs): Return NULL if a defining insn for REG cannot\n+\tbe deduced to set REG through the RTL structure.\n+\t(make_defs_and_copies_lists): Return false on a failing get_defs call.\n+\n 2016-10-21  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/78051"}, {"sha": "374988e792e27fc342518e8e98af618bc595dbce", "filename": "gcc/ree.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d47cee6c4d1c2d1b3a0a4c22becde465660d6f1/gcc%2Free.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d47cee6c4d1c2d1b3a0a4c22becde465660d6f1/gcc%2Free.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Free.c?ref=0d47cee6c4d1c2d1b3a0a4c22becde465660d6f1", "patch": "@@ -482,6 +482,14 @@ get_defs (rtx_insn *insn, rtx reg, vec<rtx_insn *> *dest)\n         return NULL;\n       if (DF_REF_INSN_INFO (ref_link->ref) == NULL)\n         return NULL;\n+      /* As global regs are assumed to be defined at each function call\n+\t dataflow can report a call_insn as being a definition of REG.\n+\t But we can't do anything with that in this pass so proceed only\n+\t if the instruction really sets REG in a way that can be deduced\n+\t from the RTL structure.  */\n+      if (global_regs[REGNO (reg)]\n+\t  && !set_of (reg, DF_REF_INSN (ref_link->ref)))\n+\treturn NULL;\n     }\n \n   if (dest)\n@@ -580,7 +588,7 @@ make_defs_and_copies_lists (rtx_insn *extend_insn, const_rtx set_pat,\n \n   /* Initialize the work list.  */\n   if (!get_defs (extend_insn, src_reg, &state->work_list))\n-    gcc_unreachable ();\n+    return false;\n \n   is_insn_visited = XCNEWVEC (bool, max_insn_uid);\n "}, {"sha": "2f32252f91f0edc5291406126ea5fd793c03ae0a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d47cee6c4d1c2d1b3a0a4c22becde465660d6f1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d47cee6c4d1c2d1b3a0a4c22becde465660d6f1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0d47cee6c4d1c2d1b3a0a4c22becde465660d6f1", "patch": "@@ -1,3 +1,8 @@\n+2016-10-21  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR rtl-optimization/78038\n+\t* gcc.target/aarch64/pr78038.c: New test.\n+\n 2016-10-21  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/78051"}, {"sha": "76d97d3b0ad44cd75afa1e1e45434413421c5afa", "filename": "gcc/testsuite/gcc.target/aarch64/pr78038.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d47cee6c4d1c2d1b3a0a4c22becde465660d6f1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr78038.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d47cee6c4d1c2d1b3a0a4c22becde465660d6f1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr78038.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr78038.c?ref=0d47cee6c4d1c2d1b3a0a4c22becde465660d6f1", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+/* PR rtl-optimization/78038.\n+   Make sure ree can gracefully handle extensions of the global\n+   variable register after a call.  */\n+\n+typedef void (*test_fptr_t) (void);\n+void\n+test_f (void)\n+{\n+}\n+test_fptr_t test_fptr = test_f;\n+\n+struct test2_s\n+{\n+  int f;\n+};\n+\n+register struct test2_s *g __asm__(\"x28\");\n+\n+void\n+do_something ()\n+{\n+  test_fptr ();\n+  struct test2_s *p1 = 0;\n+  *p1 = *g;\n+}"}]}