{"sha": "ac294f0bbc8c83fb170f567c1032b7bf2cda829c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMyOTRmMGJiYzhjODNmYjE3MGY1NjdjMTAzMmI3YmYyY2RhODI5Yw==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2007-03-22T21:33:45Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2007-03-22T21:33:45Z"}, "message": "defaults.h (OUTGOING_REG_PARM_STACK_SPACE): Provide default.\n\n        * defaults.h (OUTGOING_REG_PARM_STACK_SPACE): Provide default.\n        * calls.c (compute_argument_block_size, expand_call,\n        emit_library_call_value_1): Don't ifdef OUTGOING_REG_PARM_STACK_SPACE.\n        * expr.c (block_move_libcall_safe_for_call_parm): Likewise.\n        * function.c (STACK_DYNAMIC_OFFSET): Likewise.\n        * doc/tm.texi (OUTGOING_REG_PARM_STACK_SPACE): Update.\n        * config/alpha/unicosmk.h, config/bfin/bfin.h, config/iq2000/iq2000.h,\n        config/mips/mips.h, config/mn10300/mn10300.h, config/mt/mt.h,\n        config/pa/pa.h, config/rs6000/rs6000.h, config/score/score.h,\n        config/spu/spu.h, config/v850/v850.h (OUTGOING_REG_PARM_STACK_SPACE):\n        Set to 1.\n\nCo-Authored-By: Richard Henderson <rth@redhat.com>\n\nFrom-SVN: r123135", "tree": {"sha": "ace680a722a0e53efec5b1c5ed875f52981efc95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ace680a722a0e53efec5b1c5ed875f52981efc95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac294f0bbc8c83fb170f567c1032b7bf2cda829c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac294f0bbc8c83fb170f567c1032b7bf2cda829c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac294f0bbc8c83fb170f567c1032b7bf2cda829c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/comments", "author": null, "committer": null, "parents": [{"sha": "9a200623651c1fe91e2377235e302da84dd47e18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a200623651c1fe91e2377235e302da84dd47e18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a200623651c1fe91e2377235e302da84dd47e18"}], "stats": {"total": 115, "additions": 62, "deletions": 53}, "files": [{"sha": "576cba8122cf5f668390c3ef8a6d878462a9cc53", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac294f0bbc8c83fb170f567c1032b7bf2cda829c", "patch": "@@ -1,3 +1,18 @@\n+2007-03-22  Kai Tietz  <kai.tietz@onevision.com>\n+\t    Richard Henderson  <rth@redhat.com>\n+\n+\t* defaults.h (OUTGOING_REG_PARM_STACK_SPACE): Provide default.\n+\t* calls.c (compute_argument_block_size, expand_call,\n+\temit_library_call_value_1): Don't ifdef OUTGOING_REG_PARM_STACK_SPACE.\n+\t* expr.c (block_move_libcall_safe_for_call_parm): Likewise.\n+\t* function.c (STACK_DYNAMIC_OFFSET): Likewise.\n+\t* doc/tm.texi (OUTGOING_REG_PARM_STACK_SPACE): Update.\n+\t* config/alpha/unicosmk.h, config/bfin/bfin.h, config/iq2000/iq2000.h,\n+\tconfig/mips/mips.h, config/mn10300/mn10300.h, config/mt/mt.h,\n+\tconfig/pa/pa.h, config/rs6000/rs6000.h, config/score/score.h,\n+\tconfig/spu/spu.h, config/v850/v850.h (OUTGOING_REG_PARM_STACK_SPACE):\n+\tSet to 1.\n+\n 2007-03-22  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-incpath.c (add_sysroot_to_chain): New."}, {"sha": "9ef3b0ed125fc7b52f29d03082ab2a8c128ea8ca", "filename": "gcc/calls.c", "status": "modified", "additions": 18, "deletions": 29, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=ac294f0bbc8c83fb170f567c1032b7bf2cda829c", "patch": "@@ -1222,13 +1222,12 @@ compute_argument_block_size (int reg_parm_stack_space,\n \t    = size_binop (MAX_EXPR, args_size->var,\n \t\t\t  ssize_int (reg_parm_stack_space));\n \n-#ifndef OUTGOING_REG_PARM_STACK_SPACE\n \t  /* The area corresponding to register parameters is not to count in\n \t     the size of the block we need.  So make the adjustment.  */\n-\t  args_size->var\n-\t    = size_binop (MINUS_EXPR, args_size->var,\n-\t\t\t  ssize_int (reg_parm_stack_space));\n-#endif\n+\t  if (!OUTGOING_REG_PARM_STACK_SPACE)\n+\t    args_size->var\n+\t      = size_binop (MINUS_EXPR, args_size->var,\n+\t\t\t    ssize_int (reg_parm_stack_space));\n \t}\n     }\n   else\n@@ -1246,9 +1245,8 @@ compute_argument_block_size (int reg_parm_stack_space,\n       args_size->constant = MAX (args_size->constant,\n \t\t\t\t reg_parm_stack_space);\n \n-#ifndef OUTGOING_REG_PARM_STACK_SPACE\n-      args_size->constant -= reg_parm_stack_space;\n-#endif\n+      if (!OUTGOING_REG_PARM_STACK_SPACE)\n+\targs_size->constant -= reg_parm_stack_space;\n     }\n   return unadjusted_args_size;\n }\n@@ -2026,10 +2024,8 @@ expand_call (tree exp, rtx target, int ignore)\n   reg_parm_stack_space = REG_PARM_STACK_SPACE (fndecl);\n #endif\n \n-#ifndef OUTGOING_REG_PARM_STACK_SPACE\n-  if (reg_parm_stack_space > 0 && PUSH_ARGS)\n+  if (!OUTGOING_REG_PARM_STACK_SPACE && reg_parm_stack_space > 0 && PUSH_ARGS)\n     must_preallocate = 1;\n-#endif\n \n   /* Set up a place to return a structure.  */\n \n@@ -2430,12 +2426,11 @@ expand_call (tree exp, rtx target, int ignore)\n \t\t     Another approach might be to try to reorder the argument\n \t\t     evaluations to avoid this conflicting stack usage.  */\n \n-#ifndef OUTGOING_REG_PARM_STACK_SPACE\n \t\t  /* Since we will be writing into the entire argument area,\n \t\t     the map must be allocated for its entire size, not just\n \t\t     the part that is the responsibility of the caller.  */\n-\t\t  needed += reg_parm_stack_space;\n-#endif\n+\t\t  if (!OUTGOING_REG_PARM_STACK_SPACE)\n+\t\t    needed += reg_parm_stack_space;\n \n #ifdef ARGS_GROW_DOWNWARD\n \t\t  highest_outgoing_arg_in_use = MAX (initial_highest_arg_in_use,\n@@ -2531,12 +2526,10 @@ expand_call (tree exp, rtx target, int ignore)\n \t     an argument.  */\n \t  if (stack_arg_under_construction)\n \t    {\n-#ifndef OUTGOING_REG_PARM_STACK_SPACE\n-\t      rtx push_size = GEN_INT (reg_parm_stack_space\n-\t\t\t\t       + adjusted_args_size.constant);\n-#else\n-\t      rtx push_size = GEN_INT (adjusted_args_size.constant);\n-#endif\n+\t      rtx push_size\n+\t\t= GEN_INT (adjusted_args_size.constant\n+\t\t\t   + (OUTGOING_REG_PARM_STACK_SPACE ? 0\n+\t\t\t      : reg_parm_stack_space));\n \t      if (old_stack_level == 0)\n \t\t{\n \t\t  emit_stack_save (SAVE_BLOCK, &old_stack_level,\n@@ -2706,11 +2699,9 @@ expand_call (tree exp, rtx target, int ignore)\n       /* If register arguments require space on the stack and stack space\n \t was not preallocated, allocate stack space here for arguments\n \t passed in registers.  */\n-#ifdef OUTGOING_REG_PARM_STACK_SPACE\n-      if (!ACCUMULATE_OUTGOING_ARGS\n+      if (OUTGOING_REG_PARM_STACK_SPACE && !ACCUMULATE_OUTGOING_ARGS\n \t  && must_preallocate == 0 && reg_parm_stack_space > 0)\n \tanti_adjust_stack (GEN_INT (reg_parm_stack_space));\n-#endif\n \n       /* Pass the function the address in which to return a\n \t structure value.  */\n@@ -3532,9 +3523,8 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n   args_size.constant = MAX (args_size.constant,\n \t\t\t    reg_parm_stack_space);\n \n-#ifndef OUTGOING_REG_PARM_STACK_SPACE\n-  args_size.constant -= reg_parm_stack_space;\n-#endif\n+  if (!OUTGOING_REG_PARM_STACK_SPACE)\n+    args_size.constant -= reg_parm_stack_space;\n \n   if (args_size.constant > current_function_outgoing_args_size)\n     current_function_outgoing_args_size = args_size.constant;\n@@ -3555,12 +3545,11 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n \n       needed = args_size.constant;\n \n-#ifndef OUTGOING_REG_PARM_STACK_SPACE\n       /* Since we will be writing into the entire argument area, the\n \t map must be allocated for its entire size, not just the part that\n \t is the responsibility of the caller.  */\n-      needed += reg_parm_stack_space;\n-#endif\n+      if (!OUTGOING_REG_PARM_STACK_SPACE)\n+\tneeded += reg_parm_stack_space;\n \n #ifdef ARGS_GROW_DOWNWARD\n       highest_outgoing_arg_in_use = MAX (initial_highest_arg_in_use,"}, {"sha": "9435e71a0c23780975b09fbea207346539de5b69", "filename": "gcc/config/alpha/unicosmk.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fconfig%2Falpha%2Funicosmk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fconfig%2Falpha%2Funicosmk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Funicosmk.h?ref=ac294f0bbc8c83fb170f567c1032b7bf2cda829c", "patch": "@@ -116,7 +116,7 @@ Boston, MA 02110-1301, USA.  */\n    in registers) are allocated.  */\n \n #define REG_PARM_STACK_SPACE(DECL) 48\n-#define OUTGOING_REG_PARM_STACK_SPACE\n+#define OUTGOING_REG_PARM_STACK_SPACE 1\n \n /* If an argument can't be passed in registers even though not all argument\n    registers have been used yet, it is passed on the stack in the space "}, {"sha": "b2ee26eeaaa7f6c97198c5f9ae3381b311f63d0c", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=ac294f0bbc8c83fb170f567c1032b7bf2cda829c", "patch": "@@ -180,7 +180,7 @@ extern const char *bfin_library_id_string;\n \n /* Define this if the above stack space is to be considered part of the\n  * space allocated by the caller.  */\n-#define OUTGOING_REG_PARM_STACK_SPACE\n+#define OUTGOING_REG_PARM_STACK_SPACE 1\n \t  \n /* Define this if the maximum size of all the outgoing args is to be\n    accumulated and pushed during the prologue.  The amount can be"}, {"sha": "5c61bef7bca39b0612da006ef0ac0e8980088fb8", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=ac294f0bbc8c83fb170f567c1032b7bf2cda829c", "patch": "@@ -375,7 +375,7 @@ enum reg_class\n \n #define REG_PARM_STACK_SPACE(FNDECL) 0\n \n-#define OUTGOING_REG_PARM_STACK_SPACE\n+#define OUTGOING_REG_PARM_STACK_SPACE 1\n \n #define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE) 0\n "}, {"sha": "641772a1a99203f630d6d31fea8cfbffb715a961", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=ac294f0bbc8c83fb170f567c1032b7bf2cda829c", "patch": "@@ -1807,7 +1807,7 @@ extern const enum reg_class mips_regno_to_class[];\n    If `ACCUMULATE_OUTGOING_ARGS' is also defined, the only effect\n    of this macro is to determine whether the space is included in\n    `current_function_outgoing_args_size'.  */\n-#define OUTGOING_REG_PARM_STACK_SPACE\n+#define OUTGOING_REG_PARM_STACK_SPACE 1\n \n #define STACK_BOUNDARY (TARGET_NEWABI ? 128 : 64)\n \f"}, {"sha": "b49518b355488ca1cd968eaac084799ed0c3c3d2", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=ac294f0bbc8c83fb170f567c1032b7bf2cda829c", "patch": "@@ -529,7 +529,7 @@ enum reg_class {\n /* We use d0/d1 for passing parameters, so allocate 8 bytes of space\n    for a register flushback area.  */\n #define REG_PARM_STACK_SPACE(DECL) 8\n-#define OUTGOING_REG_PARM_STACK_SPACE\n+#define OUTGOING_REG_PARM_STACK_SPACE 1\n #define ACCUMULATE_OUTGOING_ARGS 1\n \n /* So we can allocate space for return pointers once for the function"}, {"sha": "a4afb3c3051a193e37e9788590688b970afa74b1", "filename": "gcc/config/mt/mt.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fconfig%2Fmt%2Fmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fconfig%2Fmt%2Fmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmt%2Fmt.h?ref=ac294f0bbc8c83fb170f567c1032b7bf2cda829c", "patch": "@@ -533,7 +533,7 @@ extern struct mt_frame_info current_frame_info;\n \n /* Define this if it is the responsibility of the caller to\n    allocate the area reserved for arguments passed in registers.  */\n-#define OUTGOING_REG_PARM_STACK_SPACE\n+#define OUTGOING_REG_PARM_STACK_SPACE 1\n \n /* The number of register assigned to holding function arguments.  */\n #define MT_NUM_ARG_REGS        4"}, {"sha": "b7edfe18533518d02d40c1b6db07644675febe67", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=ac294f0bbc8c83fb170f567c1032b7bf2cda829c", "patch": "@@ -602,7 +602,7 @@ extern struct rtx_def *hppa_pic_save_rtx (void);\n \n /* Define this if the above stack space is to be considered part of the\n    space allocated by the caller.  */\n-#define OUTGOING_REG_PARM_STACK_SPACE\n+#define OUTGOING_REG_PARM_STACK_SPACE 1\n \n /* Keep the stack pointer constant throughout the function.\n    This is both an optimization and a necessity: longjmp"}, {"sha": "8aadc43a16a5443661c5c657c5da5dbb718524a4", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=ac294f0bbc8c83fb170f567c1032b7bf2cda829c", "patch": "@@ -1277,7 +1277,7 @@ extern enum rs6000_abi rs6000_current_abi;\t/* available for use by subtarget */\n \n /* Define this if the above stack space is to be considered part of the\n    space allocated by the caller.  */\n-#define OUTGOING_REG_PARM_STACK_SPACE\n+#define OUTGOING_REG_PARM_STACK_SPACE 1\n \n /* This is the difference between the logical top of stack and the actual sp.\n "}, {"sha": "3fd079221c11fe987cf83aabf12788919a2767ba", "filename": "gcc/config/score/score.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fconfig%2Fscore%2Fscore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fconfig%2Fscore%2Fscore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.h?ref=ac294f0bbc8c83fb170f567c1032b7bf2cda829c", "patch": "@@ -534,7 +534,7 @@ enum reg_class\n    If `ACCUMULATE_OUTGOING_ARGS' is also defined, the only effect\n    of this macro is to determine whether the space is included in\n    `current_function_outgoing_args_size'.  */\n-#define OUTGOING_REG_PARM_STACK_SPACE\n+#define OUTGOING_REG_PARM_STACK_SPACE 1\n \n #define RETURN_POPS_ARGS(FUNDECL, FUNTYPE, STACK_SIZE) 0\n "}, {"sha": "1f1547218a81c0564ca2206979a658e45604095b", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=ac294f0bbc8c83fb170f567c1032b7bf2cda829c", "patch": "@@ -337,7 +337,7 @@ targetm.resolve_overloaded_builtin = spu_resolve_overloaded_builtin;\t\\\n \n #define REG_PARM_STACK_SPACE(FNDECL) 0\n \n-#define OUTGOING_REG_PARM_STACK_SPACE \n+#define OUTGOING_REG_PARM_STACK_SPACE 1\n \n #define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE) (0)\n "}, {"sha": "b2c14cc95f379fe69dff632a846b527fdef7ab64", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=ac294f0bbc8c83fb170f567c1032b7bf2cda829c", "patch": "@@ -626,7 +626,7 @@ struct cum_arg { int nbytes; int anonymous_args; };\n \n /* Define this if the above stack space is to be considered part of the\n    space allocated by the caller.  */\n-#define OUTGOING_REG_PARM_STACK_SPACE\n+#define OUTGOING_REG_PARM_STACK_SPACE 1\n \n /* 1 if N is a possible register number for function argument passing.  */\n "}, {"sha": "ed1ae39b9d18474b84beaa31f0e7cd285cf565d8", "filename": "gcc/defaults.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=ac294f0bbc8c83fb170f567c1032b7bf2cda829c", "patch": "@@ -906,4 +906,8 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #define HARD_REGNO_NREGS_WITH_PADDING(REGNO, MODE) -1\n #endif\n \n+#ifndef OUTGOING_REG_PARM_STACK_SPACE\n+#define OUTGOING_REG_PARM_STACK_SPACE 0\n+#endif\n+\n #endif  /* ! GCC_DEFAULTS_H */"}, {"sha": "9cdc869198b839dd09572e2038c47519ffb991e4", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=ac294f0bbc8c83fb170f567c1032b7bf2cda829c", "patch": "@@ -3730,8 +3730,8 @@ which.\n @c something, not sure if it looks good.  --mew 10feb93\n \n @defmac OUTGOING_REG_PARM_STACK_SPACE\n-Define this if it is the responsibility of the caller to allocate the area\n-reserved for arguments passed in registers.\n+Define this to a non-zero value if it is the responsibility of the caller\n+to allocate the area reserved for arguments passed in registers.\n \n If @code{ACCUMULATE_OUTGOING_ARGS} is defined, this macro controls\n whether the space for these arguments counts in the value of"}, {"sha": "1e22c8ca3f82377cf4404ba7a906cc63ac146730", "filename": "gcc/expr.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=ac294f0bbc8c83fb170f567c1032b7bf2cda829c", "patch": "@@ -1237,13 +1237,14 @@ block_move_libcall_safe_for_call_parm (void)\n \n   /* If registers go on the stack anyway, any argument is sure to clobber\n      an outgoing argument.  */\n-#if defined (REG_PARM_STACK_SPACE) && defined (OUTGOING_REG_PARM_STACK_SPACE)\n-  {\n-    tree fn = emit_block_move_libcall_fn (false);\n-    (void) fn;\n-    if (REG_PARM_STACK_SPACE (fn) != 0)\n-      return false;\n-  }\n+#if defined (REG_PARM_STACK_SPACE)\n+  if (OUTGOING_REG_PARM_STACK_SPACE)\n+    {\n+      tree fn;\n+      fn = emit_block_move_libcall_fn (false);\n+      if (REG_PARM_STACK_SPACE (fn) != 0)\n+\treturn false;\n+    }\n #endif\n \n   /* If any argument goes in memory, then it might clobber an outgoing"}, {"sha": "f0a2dd613927519dfa14a79bdfea7f47ce9044f8", "filename": "gcc/function.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac294f0bbc8c83fb170f567c1032b7bf2cda829c/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=ac294f0bbc8c83fb170f567c1032b7bf2cda829c", "patch": "@@ -1211,12 +1211,12 @@ static int cfa_offset;\n    `current_function_outgoing_args_size'.  Nevertheless, we must allow\n    for it when allocating stack dynamic objects.  */\n \n-#if defined(REG_PARM_STACK_SPACE) && ! defined(OUTGOING_REG_PARM_STACK_SPACE)\n+#if defined(REG_PARM_STACK_SPACE)\n #define STACK_DYNAMIC_OFFSET(FNDECL)\t\\\n ((ACCUMULATE_OUTGOING_ARGS\t\t\t\t\t\t      \\\n-  ? (current_function_outgoing_args_size + REG_PARM_STACK_SPACE (FNDECL)) : 0)\\\n- + (STACK_POINTER_OFFSET))\t\t\t\t\t\t      \\\n-\n+  ? (current_function_outgoing_args_size\t\t\t\t      \\\n+     + (OUTGOING_REG_PARM_STACK_SPACE ? 0 : REG_PARM_STACK_SPACE (FNDECL)))   \\\n+  : 0) + (STACK_POINTER_OFFSET))\n #else\n #define STACK_DYNAMIC_OFFSET(FNDECL)\t\\\n ((ACCUMULATE_OUTGOING_ARGS ? current_function_outgoing_args_size : 0)\t      \\"}]}