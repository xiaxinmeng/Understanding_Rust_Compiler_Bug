{"sha": "854b494a9ef17692e2daabf8fa0c478161becd41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU0YjQ5NGE5ZWYxNzY5MmUyZGFhYmY4ZmEwYzQ3ODE2MWJlY2Q0MQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-01-16T14:20:21Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-01-16T14:20:21Z"}, "message": "pa.md (shadd): Create shadd insns, even if the result of the shift is needed without the addition.\n\n0\n        * pa.md (shadd): Create shadd insns, even if the result of the shift is\n        needed without the addition.\n\nFrom-SVN: r24700", "tree": {"sha": "1478417804bf129c77b6cb619e26614fcb3606c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1478417804bf129c77b6cb619e26614fcb3606c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/854b494a9ef17692e2daabf8fa0c478161becd41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/854b494a9ef17692e2daabf8fa0c478161becd41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/854b494a9ef17692e2daabf8fa0c478161becd41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/854b494a9ef17692e2daabf8fa0c478161becd41/comments", "author": null, "committer": null, "parents": [{"sha": "4fbf29af0241943f2649c27e052e116006f46954", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fbf29af0241943f2649c27e052e116006f46954", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fbf29af0241943f2649c27e052e116006f46954"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "ada7553d99f43c411c93c114cb2c5641a3b4227d", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/854b494a9ef17692e2daabf8fa0c478161becd41/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/854b494a9ef17692e2daabf8fa0c478161becd41/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=854b494a9ef17692e2daabf8fa0c478161becd41", "patch": "@@ -3627,6 +3627,42 @@\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"4\")])\n \n+;; This anonymous pattern and splitter wins because it reduces the latency\n+;; of the shadd sequence without increasing the latency of the shift.\n+;;\n+;; We want to make sure and split up the operations for the scheduler since\n+;; these instructions can (and should) schedule independently.\n+;;\n+;; It would be clearer if combine used the same operator for both expressions,\n+;; it's somewhat confusing to have a mult in ine operation and an ashift\n+;; in the other.\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(plus:SI (mult:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t  (match_operand:SI 3 \"shadd_operand\" \"\"))\n+\t\t (match_operand:SI 1 \"register_operand\" \"r\")))\n+   (set (match_operand:SI 4 \"register_operand\" \"=r\")\n+\t(ashift:SI (match_dup 2)\n+\t\t   (match_operand:SI 5 \"const_int_operand\" \"i\")))]\n+  \"INTVAL (operands[5]) == exact_log2 (INTVAL (operands[3]))\"\n+  \"#\"\n+  [(set_attr \"type\" \"binary\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(plus:SI (mult:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t  (match_operand:SI 3 \"shadd_operand\" \"\"))\n+\t\t (match_operand:SI 1 \"register_operand\" \"r\")))\n+   (set (match_operand:SI 4 \"register_operand\" \"=r\")\n+\t(ashift:SI (match_dup 2)\n+\t\t   (match_operand:SI 5 \"const_int_operand\" \"i\")))]\n+  \"INTVAL (operands[5]) == exact_log2 (INTVAL (operands[3]))\"\n+  [(set (match_dup 4) (ashift:SI (match_dup 2) (match_dup 5)))\n+   (set (match_dup 0) (plus:SI (mult:SI (match_dup 2) (match_dup 3))\n+\t\t\t       (match_dup 1)))]\n+  \"\")\n+\n ;; This variant of the above insn can occur if the first operand\n ;; is the frame pointer.  This is a kludge, but there doesn't\n ;; seem to be a way around it.  Only recognize it while reloading."}]}