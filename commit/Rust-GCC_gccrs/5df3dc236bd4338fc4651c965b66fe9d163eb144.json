{"sha": "5df3dc236bd4338fc4651c965b66fe9d163eb144", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRmM2RjMjM2YmQ0MzM4ZmM0NjUxYzk2NWI2NmZlOWQxNjNlYjE0NA==", "commit": {"author": {"name": "Gerald Pfeifer", "email": "pfeifer@dbai.tuwien.ac.at", "date": "2001-03-19T07:53:03Z"}, "committer": {"name": "Gerald Pfeifer", "email": "gerald@gcc.gnu.org", "date": "2001-03-19T07:53:03Z"}, "message": "* README.X11: Remove obsolete file.\n\nFrom-SVN: r40609", "tree": {"sha": "f5898d5ef07925d85fd9765450173eac65b4f871", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5898d5ef07925d85fd9765450173eac65b4f871"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5df3dc236bd4338fc4651c965b66fe9d163eb144", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5df3dc236bd4338fc4651c965b66fe9d163eb144", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5df3dc236bd4338fc4651c965b66fe9d163eb144", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5df3dc236bd4338fc4651c965b66fe9d163eb144/comments", "author": null, "committer": null, "parents": [{"sha": "ff9b0a494555fdeb4b9b1603616cdd28fd6157b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff9b0a494555fdeb4b9b1603616cdd28fd6157b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff9b0a494555fdeb4b9b1603616cdd28fd6157b5"}], "stats": {"total": 451, "additions": 4, "deletions": 447}, "files": [{"sha": "6f743eb71b87435b27ef93ac35a5d6b1416badab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5df3dc236bd4338fc4651c965b66fe9d163eb144/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5df3dc236bd4338fc4651c965b66fe9d163eb144/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5df3dc236bd4338fc4651c965b66fe9d163eb144", "patch": "@@ -1,3 +1,7 @@\n+2001-03-19  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n+\n+\t* README.X11: Remove obsolete file.\n+\n 2001-03-18  Anthony Green  <green@redhat.com>\n \n \t* config/pj/pj.h: Remove some trailing commas."}, {"sha": "aa68854b04dd3793e2695c22421ccb0dc69e8987", "filename": "gcc/README.X11", "status": "removed", "additions": 0, "deletions": 447, "changes": 447, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff9b0a494555fdeb4b9b1603616cdd28fd6157b5/gcc%2FREADME.X11", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff9b0a494555fdeb4b9b1603616cdd28fd6157b5/gcc%2FREADME.X11", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FREADME.X11?ref=ff9b0a494555fdeb4b9b1603616cdd28fd6157b5", "patch": "@@ -1,447 +0,0 @@\n-[This file contains two alternative recipes for compiling X11 with GCC.\n-The first alternative puts libgcc.a into the shared X library; the second\n-does not.  Neither alternative works on all kinds of systems.\n-It may be that when using GCC 2.4, both alternatives work okay on \n-relatively recent Sparc systems.  The first alternative is likely\n-not to work on a Sun 3 without hardware floating point.]\n-\n-How to compile X11R5 (patch level 11) with GCC version 2:\n-\n-The patches include support for building the shared libraries with GCC\n-2 on the Sparc and 68k machines.  This version includes the necessary\n-parts of libgcc.a in the shared library for X, in case functions in\n-that library need it.  Thus the default behavior is now to build\n-everything, including the libraries, with gcc.\n-\n-If you build the shared library this way, it may not work with \n-executables made with older versions of GCC (2.3.3 and earlier).\n-If that happens, relink those executables with the latest GCC.\n-IF YOU THINK YOU MIGHT COMPILE X FOR SOLARIS 2, then you really don't\n-need this patch: get /contrib/R5.SunOS5.patch.tar.Z from\n-export.lcs.mit.edu instead.  It has everything you need to do the\n-build for Solaris 2, sets you up to everything with GCC, and is\n-backward compatible with SunOS 4.*.  Get the README\n-(/contrib/R5.SunOS5.patch.README at export) for more info.\n-\n-If you see undefined symbols _dlopen, _dlsym, or _dlclose when linking\n-with -lX11, compile and link against the file mit/util/misc/dlsym.c in\n-the MIT X11R5 distribution.  Alternatively, do dynamic linking\n-by using a non-GNU ld.\n-\n-mit/config/Imake.tmpl -- Do not set -fstrength-reduce if we have GCC 2.\n-If -fstrength-reduce (or any other -f option) is a major win, then it\n-will most likely be turned on by -O2 optimization.\n-\n-mit/config/sunLib.rules -- If HasGcc and GccVersion > 1 are true, then\n-use gcc -fpic to generate PIC code.  Make sure that gcc does not use\n-gas (the GNU assembler) when compiling PIC code; gas does not assemble\n-it correctly.\n-\n-***If you have gas installed where gcc uses it by default, you might have\n-to add -B/bin/ to the PositionIndependentCFlags.***\n-\n-mit/config/site.def -- Define GccVersion to be 2.\n-\n-mit/config/sun.cf -- When compiling with GCC 2, use -O2 optimization.\n-\n-mit/config/sunLib.rules -- When compiling with GCC 2, use -fpic for\n-position independent code generation.\n-\n-mit/rgb/Imakefile -- No longer need to compile some modules with \n-cc on the Sparc since GCC 2 produces proper -fpcc-struct-return code.\n-\n-mit/server/os/Imakefile -- Likewise.\n-\n-mit/server/ddx/sun/Imakefile -- When compiling with GCC 2, some modules\n-should be compiled with -fvolatile.\n-\n-mit/clients/twm/Imakefile -- Fix bad decls of malloc, realloc in gram.c.\n-\n-mit/lib/X/Imakefile -- Make libgcc.a a required lib for libX11.so\n-\n-*** mit/clients/twm/Imakefile\tMon May 17 22:05:22 1993\n---- new/clients/twm/Imakefile\tMon May 17 22:28:46 1993\n-***************\n-*** 32,41 ****\n---- 32,48 ----\n-  ComplexProgramTarget(twm)\n-  InstallNonExecFile(system.twmrc,$(TWMDIR))\n-  \n-+ #if HasGcc && GccVersion > 1 && defined (SunArchitecture)\n-  gram.h gram.c: gram.y\n-  \tyacc $(YFLAGS) gram.y\n-+ \tsed -e 's/^extern char \\*malloc(), \\*realloc();//g' y.tab.c >gram.c\n-+ \t$(MV) y.tab.h gram.h\n-+ #else\n-+ gram.h gram.c: gram.y\n-+ \tyacc $(YFLAGS) gram.y\n-  \t$(MV) y.tab.c gram.c\n-  \t$(MV) y.tab.h gram.h\n-+ #endif\n-  \n-  clean::\n-  \t$(RM) y.tab.h y.tab.c lex.yy.c gram.h gram.c lex.c deftwmrc.c \n-*** mit/config/Imake.tmpl\tMon May 17 22:02:57 1993\n---- new/config/Imake.tmpl\tMon May 17 22:15:06 1993\n-***************\n-*** 500,506 ****\n---- 500,510 ----\n-  #endif\n-  #ifndef CcCmd\n-  #if HasGcc\n-+ #if GccVersion > 1\n-+ #define CcCmd gcc -fpcc-struct-return\n-+ #else\n-  #define CcCmd gcc -fstrength-reduce -fpcc-struct-return \n-+ #endif\n-  #else\n-  #define CcCmd cc\n-  #endif\n-*** mit/config/site.def\tMon May 17 22:02:44 1993\n---- new/config/site.def\tMon May 17 22:22:28 1993\n-***************\n-*** 25,31 ****\n-  \n-  #ifdef BeforeVendorCF\n-  \n-! /* #define HasGcc YES */\n-  \n-  #endif /* BeforeVendorCF */\n-  \n---- 25,33 ----\n-  \n-  #ifdef BeforeVendorCF\n-  \n-! #define HasGcc YES\n-! /* GccVersion > 1 implies building shared libraries with gcc */\n-! #define GccVersion 2\n-  \n-  #endif /* BeforeVendorCF */\n-  \n-*** mit/config/sun.cf\tMon May 17 22:03:02 1993\n---- new/config/sun.cf\tMon May 17 22:24:55 1993\n-***************\n-*** 41,49 ****\n---- 41,55 ----\n-  \n-  #if HasGcc\n-  \n-+ #if GccVersion > 1\n-+ #define OptimizedCDebugFlags -O2\n-+ #else\n-+ #define OptimizedCDebugFlags -O\n-  #define SharedLibraryCcCmd cc\n-  #define ExtraLoadFlags -B/usr/bin/\n-  #define AllocateLocalDefines /**/\n-+ #endif\n-+ \n-  \n-  .c.o:\n-  \t$(CC) -c $(CFLAGS) $*.c\n-*** mit/config/sunLib.rules\tMon May 17 22:02:46 1993\n---- new/config/sunLib.rules\tMon May 17 22:19:06 1993\n-***************\n-*** 23,29 ****\n---- 23,33 ----\n-  #define SharedLibraryLoadFlags -assert pure-text\n-  #endif\n-  #ifndef PositionIndependentCFlags\n-+ #if defined(HasGcc) && GccVersion > 1\n-+ #define PositionIndependentCFlags -fpic\n-+ #else\n-  #define PositionIndependentCFlags -pic\n-+ #endif\n-  #endif\n-  \n-  /*\n-*** mit/lib/X/Imakefile\tMon May 17 22:05:03 1993\n---- new/lib/X/Imakefile\tMon May 17 22:32:26 1993\n-***************\n-*** 9,14 ****\n---- 9,31 ----\n-  #define MotifBC NO\n-  #endif\n-  \n-+ #if defined(SunArchitecture)\n-+ #if SystemV4\n-+ #if HasGcc\n-+ REQUIREDLIBS= -lgcc -lc\n-+ #else\n-+ REQUIREDLIBS= -lc\n-+ #endif\n-+ #else\n-+ #if HasGcc && GccVersion > 1\n-+ XCOMM Hack to fix gcc 2 ``-nostdlib'' deficiency on SunOS 4.x\n-+ REQUIREDLIBS= `gcc -v 2>&1 | awk '{print $$4}' | sed -e 's/specs$$/libgcc.a/'`\n-+ #else\n-+ REQUIREDLIBS=\n-+ #endif\n-+ #endif\n-+ #endif\n-+ \n-  #ifndef BuildXimp\n-  #define BuildXimp NO\n-  #endif\n-*** mit/rgb/Imakefile\tMon May 17 22:05:31 1993\n---- new/rgb/Imakefile\tMon May 17 22:25:30 1993\n-***************\n-*** 17,23 ****\n-  #if !(defined(SGIArchitecture) || SystemV4)\n-         DBMLIB = -ldbm\n-  #endif\n-! #if defined(SparcArchitecture) && HasGcc\n-             CC = cc\n-      CCOPTIONS = /**/\n-      EXTRA_LOAD_FLAGS = /**/\n---- 17,23 ----\n-  #if !(defined(SGIArchitecture) || SystemV4)\n-         DBMLIB = -ldbm\n-  #endif\n-! #if defined(SparcArchitecture) && HasGcc && GccVersion <= 1\n-             CC = cc\n-      CCOPTIONS = /**/\n-      EXTRA_LOAD_FLAGS = /**/\n-*** mit/server/ddx/sun/Imakefile\tMon May 17 22:05:57 1993\n---- new/server/ddx/sun/Imakefile\tMon May 17 22:27:23 1993\n-***************\n-*** 43,48 ****\n---- 43,53 ----\n-  LinkFile(sunGX.o,sunGX.o.dist)\n-  #endif\n-  \n-+ #if HasGcc && GccVersion > 1\n-+ SpecialObjectRule(sunCG2C.o,sunCG2C.c,-fvolatile)\n-+ SpecialObjectRule(sunCG2M.o,sunCG2M.c,-fvolatile)\n-+ #endif\n-+ \n-  sunInitExtMono.o: $(ICONFIGFILES)\n-  ObjectFromSpecialSource(sunInitExtMono,../mi/miinitext,-UPEXEXT)\n-  ObjectFromSpecialSource(sunInitMono,sunInit,-DMONO_ONLY)\n-*** mit/server/os/Imakefile\tMon May 17 22:05:46 1993\n---- new/server/os/Imakefile\tMon May 17 22:26:02 1993\n-***************\n-*** 132,138 ****\n-  SpecialObjectRule(osinit.o,$(ICONFIGFILES),$(ADM_DEFINES))\n-  SpecialObjectRule(WaitFor.o,$(ICONFIGFILES),$(EXT_DEFINES))\n-  SpecialObjectRule(fonttype.o,$(ICONFIGFILES),$(FONT_DEFINES))\n-! #if defined(SparcArchitecture) && HasGcc\n-  oscolor.o: $(ICONFIGFILES)\n-  \t$(RM) $@\n-  \tcc -c $(DBM_DEFINES) $(CDEBUGFLAGS) $(ALLDEFINES) $*.c\n---- 132,138 ----\n-  SpecialObjectRule(osinit.o,$(ICONFIGFILES),$(ADM_DEFINES))\n-  SpecialObjectRule(WaitFor.o,$(ICONFIGFILES),$(EXT_DEFINES))\n-  SpecialObjectRule(fonttype.o,$(ICONFIGFILES),$(FONT_DEFINES))\n-! #if defined(SparcArchitecture) && HasGcc && GccVersion <= 1\n-  oscolor.o: $(ICONFIGFILES)\n-  \t$(RM) $@\n-  \tcc -c $(DBM_DEFINES) $(CDEBUGFLAGS) $(ALLDEFINES) $*.c\n-\n-\f\n-[This is the older version]\n-\n-How to compile X11R5 (patch level 11) with GCC version 2:\n-\n-The patches include support for building the shared libraries with GCC 2 on \n-the Sparc and 68k machines.\n-\n-NOTE: Such shared libraries built with GCC version 2.3 DID NOT WORK\n-with executables previously linked using Sun CC!  This is because\n-neither those executables nor the gcc-compiled shared libraries contain\n-libgcc.a.  The shared libraries did work with executables linked using\n-GCC (running the Sun linker, of course) because GCC tells the linker to\n-link in libgcc.a.  Because of these limitations the default behavior is\n-to NOT build the shared libraries with gcc.\n-\n-Changes in GCC 2.4 seem to have eliminated the problem, and such a\n-shared library now seems work with all executables.  If you want the\n-gcc-compiled shared libraries turn on \"Gcc2BuildLibs\" in site.def.  If\n-you try this, please tell bug-gcc@prep.ai.mit.edu whether it works.\n-\n-Sun forgot to include a static version of libdl.a with some versions\n-of SunOS (4.1 mainly).  If you see undefined symbols _dlopen, _dlsym,\n-or _dlclose when linking with -lX11, compile and link against the file\n-mit/util/misc/dlsym.c in the MIT X11R5 distribution.\n-\n-mit/config/Imake.tmpl -- Do not set -fstrength-reduce if we have GCC 2.  If\n--fstrength-reduce (or any other -f option) is a major win, then it will\n-most likely be turned on by -O2 optimization.\n-\n-mit/config/sunLib.rules -- If HasGcc2 and Gcc2BuildLibs are defined, then \n-use gcc -fpic to generate PIC code.  Make sure that gcc does not use gas (the \n-GNU assembler) when compiling PIC code; gas does not assemble it correctly.  \n-If you have gas installed where gcc uses it by default, you might have to add\n--B/bin/ to the PositionIndependentCFlags.\n-\n-mit/config/site.def -- Define HasGcc2 to be YES.\n-\n-mit/config/sun.cf -- When compiling with GCC 2, use -O2 optimization.\n-\n-mit/rgb/Imakefile -- No longer need to compile some modules with \n-cc on the Sparc since GCC 2 produces proper -fpcc-struct-return code.\n-\n-mit/server/os/Imakefile -- Likewise.\n-\n-mit/clients/twm/Imakefile -- fix bad decls of malloc, realloc in gram.c.\n-\n-*** mit/config/Imake.tmpl.ORIG\tTue Dec 31 11:07:56 1991\n---- mit/config/Imake.tmpl\tTue Dec 31 12:30:47 1991\n-***************\n-*** 499,508 ****\n---- 499,512 ----\n-  #define HasGcc NO\n-  #endif\n-  #ifndef CcCmd\n-+ #if HasGcc2\n-+ #define CcCmd gcc -fpcc-struct-return\n-+ #else\n-  #if HasGcc\n-  #define CcCmd gcc -fstrength-reduce -fpcc-struct-return \n-  #else\n-  #define CcCmd cc\n-+ #endif\n-  #endif\n-  #endif\n-  #if HasFortran\n-*** mit/config/sunLib.rules.ORIG\tTue Dec 31 11:11:24 1991\n---- mit/config/sunLib.rules\tTue May  5 12:26:12 1992\n-***************\n-*** 23,30 ****\n---- 23,34 ----\n-  #define SharedLibraryLoadFlags -assert pure-text\n-  #endif\n-  #ifndef PositionIndependentCFlags\n-+ #if defined(HasGcc2) && defined (Gcc2BuildLibs)\n-+ #define PositionIndependentCFlags -fpic\n-+ #else\n-  #define PositionIndependentCFlags -pic\n-  #endif\n-+ #endif\n-  \n-  /*\n-   * InstallSharedLibrary - generate rules to install the shared library.\n-*** mit/config/site.def.ORIG\tTue Dec 31 11:13:49 1991\n---- mit/config/site.def\tTue Dec 31 12:02:59 1991\n-***************\n-*** 25,31 ****\n-  \n-  #ifdef BeforeVendorCF\n-  \n-! /* #define HasGcc YES */\n-  \n-  #endif /* BeforeVendorCF */\n-  \n---- 25,33 ----\n-  \n-  #ifdef BeforeVendorCF\n-  \n-! #define HasGcc YES \n-! #define HasGcc2 YES\n-! /* #define Gcc2BuildLibs YES */\n-  \n-  #endif /* BeforeVendorCF */\n-  \n-*** mit/config/sun.cf.ORIG\tTue Dec 31 11:13:57 1991\n---- mit/config/sun.cf\tTue May  5 12:29:50 1992\n-***************\n-*** 34,42 ****\n---- 41,61 ----\n-  \n-  #if HasGcc\n-  \n-+ #if defined(HasGcc2) \n-+ #define OptimizedCDebugFlags -O2 \n-+ /* Leave Alone XXX */\n-+ #else \n-+ #define OptimizedCDebugFlags -O\n-  #define SharedLibraryCcCmd cc\n-  #define ExtraLoadFlags -B/usr/bin/\n-  #define AllocateLocalDefines /**/\n-+ #endif\n-+ \n-+ #if !defined(Gcc2BuildLibs)\n-+ #define SharedLibraryCcCmd cc\n-+ #define ExtraLoadFlags -B/usr/bin/\n-+ #define AllocateLocalDefines /**/\n-+ #endif\n-  \n-  .c.o:\n-  \t$(CC) -c $(CFLAGS) $*.c\n-*** mit/rgb/Imakefile.ORIG\tWed Jan 15 16:43:18 1992\n---- mit/rgb/Imakefile\tThu Jan  2 13:34:09 1992\n-***************\n-*** 17,23 ****\n-  #if !(defined(SGIArchitecture) || SystemV4)\n-         DBMLIB = -ldbm\n-  #endif\n-! #if defined(SparcArchitecture) && HasGcc\n-             CC = cc\n-      CCOPTIONS = /**/\n-      EXTRA_LOAD_FLAGS = /**/\n---- 17,23 ----\n-  #if !(defined(SGIArchitecture) || SystemV4)\n-         DBMLIB = -ldbm\n-  #endif\n-! #if defined(SparcArchitecture) && HasGcc && !defined(HasGcc2)\n-             CC = cc\n-      CCOPTIONS = /**/\n-      EXTRA_LOAD_FLAGS = /**/\n-*** mit/server/os/Imakefile.ORIG\tWed Jan 15 16:46:23 1992\n---- mit/server/os/Imakefile\tWed Jan 15 16:46:48 1992\n-***************\n-*** 132,138 ****\n-  SpecialObjectRule(osinit.o,$(ICONFIGFILES),$(ADM_DEFINES))\n-  SpecialObjectRule(WaitFor.o,$(ICONFIGFILES),$(EXT_DEFINES))\n-  SpecialObjectRule(fonttype.o,$(ICONFIGFILES),$(FONT_DEFINES))\n-! #if defined(SparcArchitecture) && HasGcc\n-  oscolor.o: $(ICONFIGFILES)\n-  \t$(RM) $@\n-  \tcc -c $(DBM_DEFINES) $(CDEBUGFLAGS) $(ALLDEFINES) $*.c\n---- 132,138 ----\n-  SpecialObjectRule(osinit.o,$(ICONFIGFILES),$(ADM_DEFINES))\n-  SpecialObjectRule(WaitFor.o,$(ICONFIGFILES),$(EXT_DEFINES))\n-  SpecialObjectRule(fonttype.o,$(ICONFIGFILES),$(FONT_DEFINES))\n-! #if defined(SparcArchitecture) && HasGcc && !defined(HasGcc2)\n-  oscolor.o: $(ICONFIGFILES)\n-  \t$(RM) $@\n-  \tcc -c $(DBM_DEFINES) $(CDEBUGFLAGS) $(ALLDEFINES) $*.c\n-*** 1.1 1992/09/08 19:52:07\n---- mit/server/ddx/sun/Imakefile        1992/09/08 21:10:22\n-***************\n-*** 43,48 ****\n---- 43,53 ----\n-  LinkFile(sunGX.o,sunGX.o.dist)\n-  #endif\n-\n-+ #if HasGcc2\n-+ SpecialObjectRule(sunCG2C.o,sunCG2C.c,-fvolatile)\n-+ SpecialObjectRule(sunCG2M.o,sunCG2M.c,-fvolatile)\n-+ #endif\n-+ \n-  sunInitExtMono.o: $(ICONFIGFILES)\n-  ObjectFromSpecialSource(sunInitExtMono,../mi/miinitext,-UPEXEXT)\n-  ObjectFromSpecialSource(sunInitMono,sunInit,-DMONO_ONLY)\n-\n-*** /tmp/RCSAa24446     Tue Sep 15 12:23:32 1992\n---- mit/clients/twm/Imakefile   Thu Aug 13 18:18:07 1992\n-***************\n-*** 32,41 ****\n---- 32,48 ----\n-  ComplexProgramTarget(twm)\n-  InstallNonExecFile(system.twmrc,$(TWMDIR))\n-  \n-+ #if HasGcc2 && defined (SunArchitecture)\n-  gram.h gram.c: gram.y\n-        yacc $(YFLAGS) gram.y\n-+       sed -e 's/^extern char \\*malloc(), \\*realloc();//g' y.tab.c >gram.c\n-+       $(MV) y.tab.h gram.h\n-+ #else\n-+ gram.h gram.c: gram.y\n-+       yacc $(YFLAGS) gram.y\n-        $(MV) y.tab.c gram.c\n-        $(MV) y.tab.h gram.h\n-+ #endif\n-  \n-  clean::\n-        $(RM) y.tab.h y.tab.c lex.yy.c gram.h gram.c lex.c deftwmrc.c \n-"}]}