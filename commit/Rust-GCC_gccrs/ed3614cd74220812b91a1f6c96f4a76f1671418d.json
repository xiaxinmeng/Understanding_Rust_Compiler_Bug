{"sha": "ed3614cd74220812b91a1f6c96f4a76f1671418d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQzNjE0Y2Q3NDIyMDgxMmI5MWExZjZjOTZmNGE3NmYxNjcxNDE4ZA==", "commit": {"author": {"name": "Herman A.J. ten Brugge", "email": "Haj.Ten.Brugge@net.HCC.nl", "date": "2000-01-29T03:01:24Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2000-01-29T03:01:24Z"}, "message": "c4x.h (PREFERRED_RELOAD_CLASS): Change to restrict the reloading of framepointer + constant to ADDR_REGS class.\n\n2000-01-27 Herman A.J. ten Brugge <Haj.Ten.Brugge@net.HCC.nl>\n\n\t* c4x.h (PREFERRED_RELOAD_CLASS): Change to restrict the reloading\n\tof framepointer + constant to ADDR_REGS class.\n\t* c4x.md (addqi3, addqi3_noclobber_reload): Update.\n\t* c4x.c (std_or_reg_operand): New function.\n\t* c4x-protos.h (std_or_reg_operand): Prototype it.\n\nFrom-SVN: r31681", "tree": {"sha": "3b56cd1552978a23f87a6f3bd50c5dc80ae4b775", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b56cd1552978a23f87a6f3bd50c5dc80ae4b775"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed3614cd74220812b91a1f6c96f4a76f1671418d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed3614cd74220812b91a1f6c96f4a76f1671418d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed3614cd74220812b91a1f6c96f4a76f1671418d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed3614cd74220812b91a1f6c96f4a76f1671418d/comments", "author": null, "committer": null, "parents": [{"sha": "29a963d3039558b1899522606bfad0abe81fa37a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29a963d3039558b1899522606bfad0abe81fa37a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29a963d3039558b1899522606bfad0abe81fa37a"}], "stats": {"total": 68, "additions": 43, "deletions": 25}, "files": [{"sha": "4a59caceeadd4d424db5d6d60ef611f0077d8006", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed3614cd74220812b91a1f6c96f4a76f1671418d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed3614cd74220812b91a1f6c96f4a76f1671418d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed3614cd74220812b91a1f6c96f4a76f1671418d", "patch": "@@ -1,3 +1,11 @@\n+2000-01-27 Herman A.J. ten Brugge <Haj.Ten.Brugge@net.HCC.nl>\n+\n+\t* c4x.h (PREFERRED_RELOAD_CLASS): Change to restrict the reloading\n+\tof framepointer + constant to ADDR_REGS class.\n+\t* c4x.md (addqi3, addqi3_noclobber_reload): Update.\n+\t* c4x.c (std_or_reg_operand): New function.\n+\t* c4x-protos.h (std_or_reg_operand): Prototype it.\n+\n 2000-01-29 Herman A.J. ten Brugge <Haj.Ten.Brugge@net.HCC.nl>\n \n \t* t-c4x: Change qi,qf,di,df into si,sf,hi,hf to generate same"}, {"sha": "f5ebd16dcb0b1e6950de8f4688f75d66f399c757", "filename": "gcc/config/c4x/c4x-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed3614cd74220812b91a1f6c96f4a76f1671418d/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed3614cd74220812b91a1f6c96f4a76f1671418d/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h?ref=ed3614cd74220812b91a1f6c96f4a76f1671418d", "patch": "@@ -126,6 +126,8 @@ extern int ext_reg_operand PARAMS ((rtx, enum machine_mode));\n \n extern int std_reg_operand PARAMS ((rtx, enum machine_mode));\n \n+extern int std_or_reg_operand PARAMS ((rtx, enum machine_mode));\n+\n extern int dst_operand PARAMS ((rtx, enum machine_mode));\n \n extern int src_operand PARAMS ((rtx, enum machine_mode));"}, {"sha": "e1071f2946593c3e24f03ff60a994fcff78405c1", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed3614cd74220812b91a1f6c96f4a76f1671418d/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed3614cd74220812b91a1f6c96f4a76f1671418d/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=ed3614cd74220812b91a1f6c96f4a76f1671418d", "patch": "@@ -2970,6 +2970,18 @@ std_reg_operand (op, mode)\n }\n \n \n+/* Standard precision or normal register.  */\n+\n+int\n+std_or_reg_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  if (reload_in_progress)\n+    return std_reg_operand (op, mode);\n+  return reg_operand (op, mode);\n+}\n+\n /* Address register.  */\n \n int"}, {"sha": "c450188d4a117acac1a8ffe6a76bdd2bfa4618f1", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed3614cd74220812b91a1f6c96f4a76f1671418d/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed3614cd74220812b91a1f6c96f4a76f1671418d/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=ed3614cd74220812b91a1f6c96f4a76f1671418d", "patch": "@@ -815,7 +815,17 @@ enum reg_class\n #define REGNO_OK_FOR_INDEX_P(REGNO) \\\n      (IS_INDEX_REGNO(REGNO) || IS_INDEX_REGNO((unsigned)reg_renumber[REGNO]))\n \n-#define PREFERRED_RELOAD_CLASS(X, CLASS) (CLASS)\n+/* If we have to generate framepointer + constant prefer an ADDR_REGS\n+   register. This avoids using EXT_REGS in addqi3_noclobber_reload.  */\n+\n+#define PREFERRED_RELOAD_CLASS(X, CLASS)\t\t\t\\\n+     (GET_CODE (X) == PLUS\t\t\t\t\t\\\n+      && GET_MODE (X) == Pmode\t\t\t\t\t\\\n+      && GET_CODE (XEXP ((X), 0)) == REG\t\t\t\\\n+      && GET_MODE (XEXP ((X), 0)) == Pmode\t\t\t\\\n+      && REGNO (XEXP ((X), 0)) == FRAME_POINTER_REGNUM\t\t\\\n+      && GET_CODE (XEXP ((X), 1)) == CONST_INT\t\t\t\\\n+\t? ADDR_REGS : (CLASS))\n \n #define LIMIT_RELOAD_CLASS(X, CLASS) (CLASS)\n \n@@ -2608,6 +2618,7 @@ if (final_sequence != NULL_RTX)\t\t\\\n   {\"ext_low_reg_operand\", {REG, SUBREG}},\t\t\t\\\n   {\"ext_reg_operand\", {REG, SUBREG}},\t\t\t\t\\\n   {\"std_reg_operand\", {REG, SUBREG}},\t\t\t\t\\\n+  {\"std_or_reg_operand\", {REG, SUBREG}},\t\t\t\\\n   {\"addr_reg_operand\", {REG, SUBREG}},\t\t\t\t\\\n   {\"index_reg_operand\", {REG, SUBREG}},\t\t\t\t\\\n   {\"dp_reg_operand\", {REG}},\t\t\t\t\t\\"}, {"sha": "98b989ab9934bacf78ec79a48be7a76ed2060dd3", "filename": "gcc/config/c4x/c4x.md", "status": "modified", "additions": 9, "deletions": 24, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed3614cd74220812b91a1f6c96f4a76f1671418d/gcc%2Fconfig%2Fc4x%2Fc4x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed3614cd74220812b91a1f6c96f4a76f1671418d/gcc%2Fconfig%2Fc4x%2Fc4x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.md?ref=ed3614cd74220812b91a1f6c96f4a76f1671418d", "patch": "@@ -1755,7 +1755,7 @@\n ; so we must emit the pattern that doesn't clobber CC.\n ;\n (define_expand \"addqi3\"\n-  [(parallel [(set (match_operand:QI 0 \"reg_operand\" \"\")\n+  [(parallel [(set (match_operand:QI 0 \"std_or_reg_operand\" \"\")\n                    (plus:QI (match_operand:QI 1 \"src_operand\" \"\")\n                             (match_operand:QI 2 \"src_operand\" \"\")))\n               (clobber (reg:CC_NOOV 21))])]\n@@ -1881,31 +1881,16 @@\n ; (set (mem (reg ar0)) (plus (reg ar3) (const_int 8))).\n ; This is an invalid C4x insn but if we don't provide a pattern\n ; for it, it will be considered to be a move insn for reloading.\n-; The nasty bit is that a GENERAL_REGS class register, say r0,\n-; may be allocated to reload the PLUS and thus gen_reload will\n-; emit an add insn that may clobber CC.\n (define_insn \"*addqi3_noclobber_reload\"\n-  [(set (match_operand:QI 0 \"reg_operand\" \"=a*c,a*c,a*c,!*d,!*d,!*d\")\n-        (plus:QI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>,%0,rR,rS<>\")\n-                 (match_operand:QI 2 \"src_operand\" \"rIm,JR,rS<>,rIm,JR,rS<>\")))]\n+  [(set (match_operand:QI 0 \"std_reg_operand\" \"=c,c,c\")\n+        (plus:QI (match_operand:QI 1 \"src_operand\" \"%0,rR,rS<>\")\n+                 (match_operand:QI 2 \"src_operand\" \"rIm,JR,rS<>\")))]\n   \"reload_in_progress\"\n-  \"*\n-   if (IS_STD_REG (operands[0]))\n-     {\n-       if (which_alternative == 0 || which_alternative == 3)\n-\t return \\\"addi\\\\t%2,%0\\\";\n-       else\n-\t return \\\"addi3\\\\t%2,%1,%0\\\";\n-     }\n-   else\n-     {\n-       if (which_alternative == 0 || which_alternative == 3)\n-\t return \\\"push\\\\tst\\\\n\\\\taddi\\\\t%2,%0\\\\n\\\\tpop\\\\tst\\\";\n-       else\n-\t return \\\"push\\\\tst\\\\n\\\\taddi3\\\\t%2,%1,%0\\\\n\\\\tpop\\\\tst\\\";\n-     }\n-   \"\n-  [(set_attr \"type\" \"binary,binary,binary,multi,multi,multi\")])\n+  \"@\n+   addi\\\\t%2,%0\n+   addi3\\\\t%2,%1,%0\n+   addi3\\\\t%2,%1,%0\"\n+  [(set_attr \"type\" \"binary,binary,binary\")])\n ; Default to int16 data attr.\n \n "}]}