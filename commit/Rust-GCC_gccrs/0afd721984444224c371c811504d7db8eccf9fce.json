{"sha": "0afd721984444224c371c811504d7db8eccf9fce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFmZDcyMTk4NDQ0NDIyNGMzNzFjODExNTA0ZDdkYjhlY2NmOWZjZQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2009-05-09T10:52:24Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2009-05-09T10:52:24Z"}, "message": "re PR middle-end/40043 (ICE with nested try/catch)\n\n\n\t* g++.dg/eh/nested-try.C: New test.\n\n\tPR middle-end/40043\n\t* except.c (copy_eh_region): Always set prev_try.\n\t(redirect_eh_edge_to_label): Find outer try.\n\t(foreach_reachable_handler): When looking for prev try\n\thandle case where previous try is not going to be taken.\n\nFrom-SVN: r147317", "tree": {"sha": "a32d4999485d8f15ac31567a5b4910e7ca7f29f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a32d4999485d8f15ac31567a5b4910e7ca7f29f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0afd721984444224c371c811504d7db8eccf9fce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0afd721984444224c371c811504d7db8eccf9fce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0afd721984444224c371c811504d7db8eccf9fce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0afd721984444224c371c811504d7db8eccf9fce/comments", "author": null, "committer": null, "parents": [{"sha": "7925c06c0b5cfd69e7b07581468006b1b3aa50a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7925c06c0b5cfd69e7b07581468006b1b3aa50a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7925c06c0b5cfd69e7b07581468006b1b3aa50a1"}], "stats": {"total": 61, "additions": 56, "deletions": 5}, "files": [{"sha": "2c5b52ee85cc455c28b03e053ff414a425b4c52a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0afd721984444224c371c811504d7db8eccf9fce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0afd721984444224c371c811504d7db8eccf9fce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0afd721984444224c371c811504d7db8eccf9fce", "patch": "@@ -1,3 +1,11 @@\n+2009-05-09  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/40043\n+\t* except.c (copy_eh_region): Always set prev_try.\n+\t(redirect_eh_edge_to_label): Find outer try.\n+\t(foreach_reachable_handler): When looking for prev try\n+\thandle case where previous try is not going to be taken.\n+\n 2009-05-07  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR tree-optimization/40049"}, {"sha": "df28a9831d9fdaf6575ce4cf378771f00cdef369", "filename": "gcc/except.c", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0afd721984444224c371c811504d7db8eccf9fce/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0afd721984444224c371c811504d7db8eccf9fce/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=0afd721984444224c371c811504d7db8eccf9fce", "patch": "@@ -1410,9 +1410,9 @@ copy_eh_region (struct eh_region *old, struct eh_region *new_outer,\n     {\n       gcc_assert (old->type != ERT_TRY);\n       r = copy_eh_region_1 (old, new_outer);\n-      if (r->type == ERT_CLEANUP && prev_try_map)\n+      if (r->type == ERT_CLEANUP)\n         {\n-\t  gcc_assert (r->u.cleanup.prev_try);\n+\t  gcc_assert (r->u.cleanup.prev_try || !prev_try_map);\n           r->u.cleanup.prev_try = prev_try_map;\n \t}\n       return r;\n@@ -1477,7 +1477,7 @@ struct eh_region *\n redirect_eh_edge_to_label (edge e, tree new_dest_label, bool is_resx,\n \t\t\t   bool inlinable_call, int region_number)\n {\n-  struct eh_region *outer, *prev_try_map = NULL;\n+  struct eh_region *outer, *prev_try_map;\n   struct eh_region *region;\n   VEC (eh_region, heap) * trace = NULL;\n   int i;\n@@ -1539,6 +1539,7 @@ redirect_eh_edge_to_label (edge e, tree new_dest_label, bool is_resx,\n \t}\n       outer = VEC_index (eh_region, trace, start_here)->outer;\n       gcc_assert (start_here >= 0);\n+      prev_try_map = find_prev_try (outer);\n \n       /* And now do the dirty job!  */\n       for (i = start_here; i >= 0; i--)\n@@ -3120,8 +3121,20 @@ foreach_reachable_handler (int region_number, bool is_resx, bool inlinable_call,\n \t to the next outer cleanup region, so the flow graph will be\n \t accurate.  */\n       if (region->type == ERT_CLEANUP)\n-\tregion = region->u.cleanup.prev_try;\n-      else\n+        {\n+\t  enum reachable_code code = RNL_NOT_CAUGHT;\n+\t  region = region->u.cleanup.prev_try;\n+\t  /* Continue looking for outer TRY region until we find one\n+\t     that might cath something.  */\n+          while (region\n+\t  \t && (code = reachable_next_level (region, type_thrown, &info,\n+      \t\t\t                          inlinable_call || is_resx))\n+\t\t     == RNL_NOT_CAUGHT)\n+\t    region = find_prev_try (region->outer);\n+\t  if (code >= RNL_CAUGHT)\n+\t    break;\n+\t}\n+      if (region)\n \tregion = region->outer;\n     }\n }"}, {"sha": "c2fb1d3ccae34770d263719b24b410063f871594", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0afd721984444224c371c811504d7db8eccf9fce/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0afd721984444224c371c811504d7db8eccf9fce/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0afd721984444224c371c811504d7db8eccf9fce", "patch": "@@ -1,3 +1,8 @@\n+2009-05-09  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/40043\n+\t* g++.dg/eh/nested-try.C: New test.\n+\n 2009-05-08  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR tree-optimization/40049"}, {"sha": "5796f9a28060ceffffd76dcf6a7ca07eae00cc02", "filename": "gcc/testsuite/g++.dg/eh/nested-try.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0afd721984444224c371c811504d7db8eccf9fce/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fnested-try.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0afd721984444224c371c811504d7db8eccf9fce/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fnested-try.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fnested-try.C?ref=0afd721984444224c371c811504d7db8eccf9fce", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do compile }\n+// Nested try statements shadowing each other was crashing in EH edge redirection.\n+// PR middle-end/40043\n+struct A\n+{\n+  ~A();\n+  void foo();\n+};\n+\n+void bar()\n+{\n+  A a;\n+\n+  try\n+  {\n+    A b;\n+\n+    try\n+    {\n+      b.foo();\n+    }\n+    catch (int) {}\n+  }\n+  catch (int) {}\n+}"}]}