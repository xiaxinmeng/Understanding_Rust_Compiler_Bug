{"sha": "7ee72796397f69400469213b1eea1dfabf91774b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VlNzI3OTYzOTdmNjk0MDA0NjkyMTNiMWVlYTFkZmFiZjkxNzc0Yg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "2001-02-27T23:48:38Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2001-02-27T23:48:38Z"}, "message": "pa.c (override_options): Promote -fpic to -fPIC.\n\n        * pa.c (override_options): Promote -fpic to -fPIC.\n        (legitimize_pic_address): Simplify due to removal of\n        small PIC as a code generation option.\n        (secondary_reload_class): Similarly.\n        * pa.h (GO_IF_LEGITIMATE_ADDRESS): Similarly.\n        (PRINT_OPERAND_ADDRESS): Similarly.\n        * pa.md (various patterns): Similarly.\n        (small pic lo_sum pattern): Remove.\n\nFrom-SVN: r40101", "tree": {"sha": "b06e250bec747bfd7268feaa3899bacdb5a12aa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b06e250bec747bfd7268feaa3899bacdb5a12aa5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ee72796397f69400469213b1eea1dfabf91774b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ee72796397f69400469213b1eea1dfabf91774b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ee72796397f69400469213b1eea1dfabf91774b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ee72796397f69400469213b1eea1dfabf91774b/comments", "author": null, "committer": null, "parents": [{"sha": "9dd3d53c9a16fe6f2374e532e2cec6d51ca454ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dd3d53c9a16fe6f2374e532e2cec6d51ca454ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dd3d53c9a16fe6f2374e532e2cec6d51ca454ed"}], "stats": {"total": 73, "additions": 28, "deletions": 45}, "files": [{"sha": "453fe02bfc8e4bb7ee05bd9244ebc1827a742c95", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee72796397f69400469213b1eea1dfabf91774b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee72796397f69400469213b1eea1dfabf91774b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ee72796397f69400469213b1eea1dfabf91774b", "patch": "@@ -1,3 +1,14 @@\n+Tue Feb 27 16:49:13 2001  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* pa.c (override_options): Promote -fpic to -fPIC.\n+\t(legitimize_pic_address): Simplify due to removal of\n+\tsmall PIC as a code generation option.\n+\t(secondary_reload_class): Similarly.\n+\t* pa.h (GO_IF_LEGITIMATE_ADDRESS): Similarly.\n+\t(PRINT_OPERAND_ADDRESS): Similarly.\n+\t* pa.md (various patterns): Similarly.\n+\t(small pic lo_sum pattern): Remove.\n+\n Tue Feb 27 16:01:13 CET 2001  Jan Hubicka  <jh@suse.cz>\n \t\t\t      Fergus Henderson\n "}, {"sha": "a938074397d30de10e723e0ccd8e8ed88743de0b", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee72796397f69400469213b1eea1dfabf91774b/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee72796397f69400469213b1eea1dfabf91774b/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=7ee72796397f69400469213b1eea1dfabf91774b", "patch": "@@ -183,8 +183,9 @@ override_options ()\n       write_symbols = NO_DEBUG;\n     }\n \n-  /* We always generate PIC code when in 64bit mode.  */\n-  if (TARGET_64BIT)\n+  /* We only support the \"big PIC\" model now.  And we always generate PIC\n+     code when in 64bit mode.  */\n+  if (flag_pic == 1 || TARGET_64BIT)\n     flag_pic = 2;\n \n   /* Register global variables with the garbage collector.  */\n@@ -713,22 +714,15 @@ legitimize_pic_address (orig, mode, reg)\n       if (reg == 0)\n \tabort ();\n \n-      if (flag_pic == 2)\n-\t{\n-\t  emit_move_insn (reg,\n-\t\t\t  gen_rtx_PLUS (word_mode, pic_offset_table_rtx,\n-\t\t\t\t\tgen_rtx_HIGH (word_mode, orig)));\n-\t  pic_ref\n-\t    = gen_rtx_MEM (Pmode,\n-\t\t\t   gen_rtx_LO_SUM (Pmode, reg,\n-\t\t\t\t\t   gen_rtx_UNSPEC (Pmode,\n-\t\t\t\t\t\t\t   gen_rtvec (1, orig),\n-\t\t\t\t\t\t\t   0)));\n-\t}\n-      else\n-\tpic_ref = gen_rtx_MEM (Pmode,\n-\t\t\t       gen_rtx_PLUS (Pmode, pic_offset_table_rtx,\n-\t\t\t\t\t     orig));\n+      emit_move_insn (reg,\n+\t\t      gen_rtx_PLUS (word_mode, pic_offset_table_rtx,\n+\t\t\t\t    gen_rtx_HIGH (word_mode, orig)));\n+      pic_ref\n+\t= gen_rtx_MEM (Pmode,\n+\t\t       gen_rtx_LO_SUM (Pmode, reg,\n+\t\t\t\t       gen_rtx_UNSPEC (Pmode,\n+\t\t\t\t\t\t       gen_rtvec (1, orig),\n+\t\t\t\t\t\t       0)));\n \n       current_function_uses_pic_offset_table = 1;\n       RTX_UNCHANGING_P (pic_ref) = 1;\n@@ -4564,7 +4558,7 @@ secondary_reload_class (class, mode, in)\n \n   /* Trying to load a constant into a FP register during PIC code\n      generation will require %r1 as a scratch register.  */\n-  if (flag_pic == 2\n+  if (flag_pic\n       && GET_MODE_CLASS (mode) == MODE_INT\n       && FP_REG_CLASS_P (class)\n       && (GET_CODE (in) == CONST_INT || GET_CODE (in) == CONST_DOUBLE))"}, {"sha": "e0c81669b073292298197d41fbbfa865e58614d6", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee72796397f69400469213b1eea1dfabf91774b/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee72796397f69400469213b1eea1dfabf91774b/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=7ee72796397f69400469213b1eea1dfabf91774b", "patch": "@@ -1269,16 +1269,7 @@ extern int may_call_alloca;\n   else if (GET_CODE (X) == PLUS)\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n       rtx base = 0, index = 0;\t\t\t\t\\\n-      if (flag_pic && XEXP (X, 0) == pic_offset_table_rtx)\\\n-\t{\t\t\t\t\t\t\\\n-\t  if (GET_CODE (XEXP (X, 1)) == REG\t\t\\\n-\t      && REG_OK_FOR_BASE_P (XEXP (X, 1)))\t\\\n-\t    goto ADDR;\t\t\t\t\t\\\n-\t  else if (flag_pic == 1\t\t\t\\\n-\t\t   && GET_CODE (XEXP (X, 1)) == SYMBOL_REF)\\\n-\t    goto ADDR;\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\\\n-      else if (REG_P (XEXP (X, 0))\t\t\t\\\n+      if (REG_P (XEXP (X, 0))\t\t\t\t\\\n \t  && REG_OK_FOR_BASE_P (XEXP (X, 0)))\t\t\\\n \tbase = XEXP (X, 0), index = XEXP (X, 1);\t\\\n       else if (REG_P (XEXP (X, 1))\t\t\t\\\n@@ -1970,9 +1961,7 @@ while (0)\n \tfputs (\"R'\", FILE);\t\t\t\t\t\t\\\n       else if (flag_pic == 0)\t\t\t\t\t\t\\\n \tfputs (\"RR'\", FILE);\t\t\t\t\t\t\\\n-      else if (flag_pic == 1)\t\t\t\t\t\t\\\n-\tabort ();\t\t\t\t\t\t\t\\\n-      else if (flag_pic == 2)\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n \tfputs (\"RT'\", FILE);\t\t\t\t\t\t\\\n       output_global_address (FILE, XEXP (addr, 1), 0);\t\t\t\\\n       fputs (\"(\", FILE);\t\t\t\t\t\t\\"}, {"sha": "9143a6bc6cbcaac2eb508512eed1643131b20671", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee72796397f69400469213b1eea1dfabf91774b/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee72796397f69400469213b1eea1dfabf91774b/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=7ee72796397f69400469213b1eea1dfabf91774b", "patch": "@@ -2085,17 +2085,6 @@\n   DONE;\n }\")\n \n-;;; pic symbol references\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(mem:SI (plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t (match_operand:SI 2 \"symbolic_operand\" \"\"))))]\n-  \"flag_pic && operands[1] == pic_offset_table_rtx\"\n-  \"ldw T'%2(%1),%0\"\n-  [(set_attr \"type\" \"load\")\n-   (set_attr \"length\" \"4\")])\n-\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"reg_or_nonsymb_mem_operand\"\n \t\t\t\t\"=r,r,r,r,r,r,Q,*q,!f,f,*TR\")\n@@ -2331,7 +2320,7 @@\n \t\t (high:SI (match_operand 2 \"\" \"\"))))]\n   \"symbolic_operand (operands[2], Pmode)\n    && ! function_label_operand (operands[2], Pmode)\n-   && flag_pic == 2\"\n+   && flag_pic\"\n   \"addil LT'%G2,%1\"\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"4\")])\n@@ -2343,7 +2332,7 @@\n   \"symbolic_operand (operands[2], Pmode)\n    && ! function_label_operand (operands[2], Pmode)\n    && TARGET_64BIT\n-   && flag_pic == 2\"\n+   && flag_pic\"\n   \"addil LT'%G2,%1\"\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"4\")])"}]}