{"sha": "c161b39d051553dc4e6c1de2616049c090a976bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE2MWIzOWQwNTE1NTNkYzRlNmMxZGUyNjE2MDQ5YzA5MGE5NzZiYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-11-08T11:34:28Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-11-30T14:16:16Z"}, "message": "[Ada] Small cleanup in System.Value_F\n\ngcc/ada/\n\n\t* libgnat/s-valuef.adb (Integer_To_Fixed): Do not modify numerator\n\tor denominator in order to reduce the exponent.", "tree": {"sha": "206a8b3c2d92892e26ce6ad3f961dad661189924", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/206a8b3c2d92892e26ce6ad3f961dad661189924"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c161b39d051553dc4e6c1de2616049c090a976bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c161b39d051553dc4e6c1de2616049c090a976bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c161b39d051553dc4e6c1de2616049c090a976bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c161b39d051553dc4e6c1de2616049c090a976bb/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b50706ef31414f90590e59186ac44c117d5fdc8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b50706ef31414f90590e59186ac44c117d5fdc8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b50706ef31414f90590e59186ac44c117d5fdc8a"}], "stats": {"total": 46, "additions": 16, "deletions": 30}, "files": [{"sha": "e3d254a1322b3dc3635c95e65c282efd063447b7", "filename": "gcc/ada/libgnat/s-valuef.adb", "status": "modified", "additions": 16, "deletions": 30, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c161b39d051553dc4e6c1de2616049c090a976bb/gcc%2Fada%2Flibgnat%2Fs-valuef.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c161b39d051553dc4e6c1de2616049c090a976bb/gcc%2Fada%2Flibgnat%2Fs-valuef.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuef.adb?ref=c161b39d051553dc4e6c1de2616049c090a976bb", "patch": "@@ -175,56 +175,42 @@ package body System.Value_F is\n \n       B : constant Int := Int (Base);\n \n-      V : Uns     := Val;\n-      S : Integer := ScaleB;\n-      E : Uns     := Uns (Extra);\n-      N : Int     := Num;\n-      D : Int     := Den;\n+      V : Uns := Val;\n+      E : Uns := Uns (Extra);\n \n       Y, Z, Q1, R1, Q2, R2 : Int;\n \n    begin\n       --  We will use a scaled divide operation for which we must control the\n       --  magnitude of operands so that an overflow exception is not unduly\n-      --  raised during the computation. The only real concern is the exponent\n-      --  ScaleB so first try to reduce its magnitude in an exact manner.\n+      --  raised during the computation. The only real concern is the exponent.\n \n-      while S < 0 and then (D rem B) = 0 loop\n-         D := D / B;\n-         S := S + 1;\n-      end loop;\n-\n-      while S > 0 and then (N rem B) = 0 loop\n-         N := N / B;\n-         S := S - 1;\n-      end loop;\n-\n-      --  If S is still too negative, then drop trailing digits, but preserve\n+      --  If ScaleB is too negative, then drop trailing digits, but preserve\n       --  the last dropped digit.\n \n-      if S < 0 then\n+      if ScaleB < 0 then\n          declare\n-            LS : Integer := -S;\n+            LS : Integer := -ScaleB;\n \n          begin\n-            Y := D;\n-            Z := Safe_Expont (B, LS, N);\n+            Y := Den;\n+            Z := Safe_Expont (B, LS, Num);\n \n             for J in 1 .. LS loop\n                E := V rem Uns (B);\n                V := V / Uns (B);\n             end loop;\n          end;\n \n-      --  If S is still too positive, then scale V up, which may then overflow\n+      --  If ScaleB is too positive, then scale V up, which may then overflow\n \n-      elsif S > 0 then\n+      elsif ScaleB > 0 then\n          declare\n-            LS  : Integer := S;\n+            LS  : Integer := ScaleB;\n \n          begin\n-            Y := Safe_Expont (B, LS, D);\n-            Z := N;\n+            Y := Safe_Expont (B, LS, Den);\n+            Z := Num;\n \n             for J in 1 .. LS loop\n                if V <= (Uns'Last - E) / Uns (B) then\n@@ -236,11 +222,11 @@ package body System.Value_F is\n             end loop;\n          end;\n \n-      --  If S is zero, then proceed directly\n+      --  If ScaleB is zero, then proceed directly\n \n       else\n-         Y := D;\n-         Z := N;\n+         Y := Den;\n+         Z := Num;\n       end if;\n \n       --  Perform a scaled divide operation with final rounding to match Image"}]}