{"sha": "10671e7affbf700ea0b10baa77901f0cf2b8e9ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA2NzFlN2FmZmJmNzAwZWEwYjEwYmFhNzc5MDFmMGNmMmI4ZTlhZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-01T13:32:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-01T13:32:40Z"}, "message": "[multiple changes]\n\n2014-08-01  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_res.adb (Resolve_Call): Do not perform\n\tGNATprove-specific inlining while within a generic.\n\n2014-08-01  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb (Analyze_Case_Expression): Handle properly a\n\tcase expression with incompatible alternatives, when the first\n\talternative is overloaded.\n\nFrom-SVN: r213460", "tree": {"sha": "a7b8a2e481a379903876167f720f50357eba8186", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7b8a2e481a379903876167f720f50357eba8186"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10671e7affbf700ea0b10baa77901f0cf2b8e9ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10671e7affbf700ea0b10baa77901f0cf2b8e9ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10671e7affbf700ea0b10baa77901f0cf2b8e9ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10671e7affbf700ea0b10baa77901f0cf2b8e9ad/comments", "author": null, "committer": null, "parents": [{"sha": "b80a2b4bcc7e4a7c5282c78d6d96df185137ae34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b80a2b4bcc7e4a7c5282c78d6d96df185137ae34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b80a2b4bcc7e4a7c5282c78d6d96df185137ae34"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "f829f8405968b6ca51cb40f2c8eee3523d075029", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10671e7affbf700ea0b10baa77901f0cf2b8e9ad/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10671e7affbf700ea0b10baa77901f0cf2b8e9ad/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=10671e7affbf700ea0b10baa77901f0cf2b8e9ad", "patch": "@@ -1,3 +1,14 @@\n+2014-08-01  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Call): Do not perform\n+\tGNATprove-specific inlining while within a generic.\n+\n+2014-08-01  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Case_Expression): Handle properly a\n+\tcase expression with incompatible alternatives, when the first\n+\talternative is overloaded.\n+\n 2014-08-01  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_res.adb (Check_Parameterless_Call): Use Relocate_Node"}, {"sha": "26496dfbba997f28d667a37e0d8d56ce1437bfe0", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10671e7affbf700ea0b10baa77901f0cf2b8e9ad/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10671e7affbf700ea0b10baa77901f0cf2b8e9ad/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=10671e7affbf700ea0b10baa77901f0cf2b8e9ad", "patch": "@@ -1363,6 +1363,9 @@ package body Sem_Ch4 is\n       Others_Present : Boolean;\n       --  Indicates if Others was present\n \n+      Wrong_Alt : Node_Id;\n+      --  For error reporting\n+\n    --  Start of processing for Analyze_Case_Expression\n \n    begin\n@@ -1415,6 +1418,9 @@ package body Sem_Ch4 is\n \n                if No (Alt) then\n                   Add_One_Interp (N, It.Typ, It.Typ);\n+\n+               else\n+                  Wrong_Alt := Alt;\n                end if;\n \n                Get_Next_Interp (I, It);\n@@ -1441,6 +1447,12 @@ package body Sem_Ch4 is\n          return;\n       end if;\n \n+      if Etype (N) = Any_Type and then Present (Wrong_Alt) then\n+         Error_Msg_N (\"type incompatible with that of previous alternatives\",\n+           Expression (Wrong_Alt));\n+         return;\n+      end if;\n+\n       --  If the case expression is a formal object of mode in out, then\n       --  treat it as having a nonstatic subtype by forcing use of the base\n       --  type (which has to get passed to Check_Case_Choices below).  Also"}, {"sha": "034ca5865f4f7359ddf82bf0f234745a4492ab96", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10671e7affbf700ea0b10baa77901f0cf2b8e9ad/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10671e7affbf700ea0b10baa77901f0cf2b8e9ad/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=10671e7affbf700ea0b10baa77901f0cf2b8e9ad", "patch": "@@ -6208,14 +6208,15 @@ package body Sem_Res is\n       Eval_Call (N);\n       Check_Elab_Call (N);\n \n-      --  In GNATprove mode, expansion is disabled, but we want to inline\n-      --  some subprograms to facilitate formal verification. Indirect calls,\n-      --  through a subprogram type, cannot be inlined. Inlining is only\n-      --  performed for calls for which SPARK_Mode is On.\n+      --  In GNATprove mode, expansion is disabled, but we want to inline some\n+      --  subprograms to facilitate formal verification. Indirect calls through\n+      --  a subprogram type or within a generic cannot be inlined. Inlining is\n+      --  performed only for calls subject to SPARK_Mode on.\n \n       if GNATprove_Mode\n-        and then Is_Overloadable (Nam)\n         and then SPARK_Mode = On\n+        and then Is_Overloadable (Nam)\n+        and then not Inside_A_Generic\n       then\n          --  Retrieve the body to inline from the ultimate alias of Nam, if\n          --  there is one, otherwise calls that should be inlined end up not"}]}