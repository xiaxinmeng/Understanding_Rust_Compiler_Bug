{"sha": "63501e9115d6fc0183adc9ed97efdf83ee47c724", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM1MDFlOTExNWQ2ZmMwMTgzYWRjOWVkOTdlZmRmODNlZTQ3YzcyNA==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@twcny.rr.com", "date": "2002-04-17T20:45:24Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2002-04-17T20:45:24Z"}, "message": "configure.in: Move default CC setting out of config/mh-* fragments directly into here.\n\n* configure.in:  Move default CC setting out of config/mh-* fragments\ndirectly into here.\n\nFrom-SVN: r52443", "tree": {"sha": "82830f5b4940fd40b4c691a25743117ffb23867c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82830f5b4940fd40b4c691a25743117ffb23867c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63501e9115d6fc0183adc9ed97efdf83ee47c724", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63501e9115d6fc0183adc9ed97efdf83ee47c724", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63501e9115d6fc0183adc9ed97efdf83ee47c724", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63501e9115d6fc0183adc9ed97efdf83ee47c724/comments", "author": null, "committer": null, "parents": [{"sha": "701afd4dd0b75c2f1bb1db5f80be2293d09ce4f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/701afd4dd0b75c2f1bb1db5f80be2293d09ce4f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/701afd4dd0b75c2f1bb1db5f80be2293d09ce4f6"}], "stats": {"total": 73, "additions": 68, "deletions": 5}, "files": [{"sha": "6dfcc61ed0f9b111563083b9930e25aed78e7f8f", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63501e9115d6fc0183adc9ed97efdf83ee47c724/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63501e9115d6fc0183adc9ed97efdf83ee47c724/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=63501e9115d6fc0183adc9ed97efdf83ee47c724", "patch": "@@ -1,3 +1,8 @@\n+2002-04-17  Nathanael Nerode  <neroden@twcny.rr.com>\n+\n+\t* configure.in:  Move default CC setting out of config/mh-* fragments\n+\tdirectly into here.\n+\n 2002-04-17  Nathanael Nerode  <neroden@twcny.rr.com>\n \n \t* configure.in: don't even try to configure or make a subdirectory"}, {"sha": "e93e9c1fea8f1c91073048b3be7e4c90fb909e12", "filename": "configure.in", "status": "modified", "additions": 63, "deletions": 5, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63501e9115d6fc0183adc9ed97efdf83ee47c724/configure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63501e9115d6fc0183adc9ed97efdf83ee47c724/configure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.in?ref=63501e9115d6fc0183adc9ed97efdf83ee47c724", "patch": "@@ -123,30 +123,47 @@ appdirs=\"\"\n # per-host:\n \n # Work in distributions that contain no compiler tools, like Autoconf.\n+tentative_cc=\"\"\n if [ -d ${srcdir}/config ]; then\n case \"${host}\" in\n   m68k-hp-hpux*)\n+    # Avoid \"too much defining\" errors from HPUX compiler.\n+    tentative_cc=\"cc -Wp,-H256000\"\n     host_makefile_frag=\"${host_makefile_frag} config/mh-hp300\"\n     ;;\n   m68k-apollo-sysv*)\n+    tentative_cc=\"cc -A ansi -A runtype,any -A systype,any -U__STDC__ -DUSG\"\n     host_makefile_frag=\"${host_makefile_frag} config/mh-apollo68\"\n     ;;\n   m68k-apollo-bsd*)\n+    #None of the Apollo compilers can compile gas or binutils.  The preprocessor\n+    # chokes on bfd, the compiler won't let you assign integers to enums, and\n+    # other problems.  Defining CC to gcc is a questionable way to say \"don't use\n+    # the apollo compiler\" (the preferred version of GCC could be called cc,\n+    # or whatever), but I'm not sure leaving CC as cc is any better...\n+    #CC=cc -A ansi -A runtype,any -A systype,any -U__STDC__ -DNO_STDARG\n+    tentative_cc=gcc\n     host_makefile_frag=\"${host_makefile_frag} config/mh-a68bsd\"\n     ;;\n   m88k-dg-dgux*)\n+    tentative_cc=\"gcc -Wall -ansi -D__using_DGUX\"\n     host_makefile_frag=\"${host_makefile_frag} config/mh-dgux\"\n     ;;\n   m88k-harris-cxux*)\n+    # Under CX/UX, we want to tell the compiler to use ANSI mode.\n+    tentative_cc=\"cc -Xa\"\n     host_makefile_frag=\"${host_makefile_frag} config/mh-cxux\"\n     ;;\n   m88k-motorola-sysv*)\n     host_makefile_frag=\"${host_makefile_frag} config/mh-delta88\"\n     ;;\n   mips*-dec-ultrix*)\n+    tentative_cc=\"cc -Wf,-XNg1000\"\n     host_makefile_frag=\"${host_makefile_frag} config/mh-decstation\"\n     ;;\n   mips*-nec-sysv4*)\n+    # The C compiler on NEC MIPS SVR4 needs bigger tables.\n+    tentative_cc=\"cc -ZXNd=5000 -ZXNg=1000\"\n     host_makefile_frag=\"${host_makefile_frag} config/mh-necv4\"\n     ;;\n   mips*-sgi-irix6*)\n@@ -156,6 +173,10 @@ case \"${host}\" in\n     host_makefile_frag=\"${host_makefile_frag} config/mh-irix5\"\n     ;;\n   mips*-sgi-irix4*)\n+    # Tell compiler to use K&R C.  We can't compile under the SGI Ansi\n+    # environment.  Also bump switch table size so that cp-parse will\n+    # compile.  Bump string length limit so linker builds.\n+    tentative_cc=\"cc -cckr -Wf,-XNg1500 -Wf,-XNk1000 -Wf,-XNh2000 -Wf,-XNl8192\"\n     host_makefile_frag=\"${host_makefile_frag} config/mh-irix4\"\n     ;;\n   mips*-sgi-irix3*)\n@@ -165,27 +186,54 @@ case \"${host}\" in\n     host_makefile_frag=\"${host_makefile_frag} config/mh-sysv4\"\n     ;;\n   mips*-*-sysv*)\n+    # This is for a MIPS running RISC/os 4.52C.\n+\n+    # This is needed for GDB, but needs to be in the top-level make because\n+    # if a library is compiled with the bsd headers and gets linked with the\n+    # sysv system libraries all hell can break loose (e.g. a jmp_buf might be\n+    # a different size).\n+    # ptrace(2) apparently has problems in the BSD environment.  No workaround is\n+    # known except to select the sysv environment.  Could we use /proc instead?\n+    # These \"sysv environments\" and \"bsd environments\" often end up being a pain.\n+    #\n+    # This is not part of CFLAGS because perhaps not all C compilers have this\n+    # option.\n+    tentative_cc=\"cc -systype sysv\"\n     host_makefile_frag=\"${host_makefile_frag} config/mh-riscos\"\n     ;;\n   i370-ibm-opened*)\n+    tentative_cc=\"c89\"\n     host_makefile_frag=\"${host_makefile_frag} config/mh-openedition\"\n     ;;\n   i[3456]86-*-sysv5*)\n     host_makefile_frag=\"${host_makefile_frag} config/mh-sysv5\"\n     ;;\n   i[3456]86-*-dgux*)\n+    tentative_cc=\"gcc -Wall -ansi -D__using_DGUX\"\n     host_makefile_frag=\"${host_makefile_frag} config/mh-dgux386\"\n     ;;\n   i[3456]86-ncr-sysv4.3*)\n+    # The MetaWare compiler will generate a copyright message unless you\n+    # turn it off by adding the -Hnocopyr flag.\n+    tentative_cc=\"cc -Hnocopyr\"\n     host_makefile_frag=\"${host_makefile_frag} config/mh-ncrsvr43\"\n     ;;\n   i[3456]86-ncr-sysv4*)\n+    # for an NCR 3000 (i486/SVR4) system.\n+    # The NCR 3000 ships with a MetaWare compiler installed as /bin/cc.\n+    # This compiler not only emits obnoxious copyright messages every time\n+    # you run it, but it chokes and dies on a whole bunch of GNU source\n+    # files.  Default to using the AT&T compiler installed in /usr/ccs/ATT/cc.\n+    tentative_cc=\"/usr/ccs/ATT/cc\"\n     host_makefile_frag=\"${host_makefile_frag} config/mh-ncr3000\"\n     ;;\n   i[3456]86-*-sco3.2v5*)\n     host_makefile_frag=\"${host_makefile_frag} config/mh-sysv\"\n     ;;\n   i[3456]86-*-sco*)\n+    # The native C compiler botches some simple uses of const.  Unfortunately,\n+    # it doesn't defined anything like \"__sco__\" for us to test for in ansidecl.h.\n+    tentative_cc=\"cc -Dconst=\"\n     host_makefile_frag=\"${host_makefile_frag} config/mh-sco\"\n     ;;\n   i[3456]86-*-udk*)\n@@ -216,27 +264,39 @@ case \"${host}\" in\n     host_makefile_frag=\"${host_makefile_frag} config/mh-windows\"\n     ;;\n   vax-*-ultrix2*)\n+    # The old BSD pcc isn't up to compiling parts of gdb so use gcc\n+    tentative_cc=gcc\n     host_makefile_frag=\"${host_makefile_frag} config/mh-vaxult2\"\n     ;;\n   *-*-solaris2*)\n     host_makefile_frag=\"${host_makefile_frag} config/mh-solaris\"\n     ;;\n   m68k-sun-sunos*)\n+    # Sun's C compiler needs the -J flag to be able to compile cp-parse.c\n+    # without overflowing the jump tables (-J says to use a 32 bit table)\n+    tentative_cc=\"cc -J\"\n     host_makefile_frag=\"${host_makefile_frag} config/mh-sun3\"\n     ;;\n   *-hp-hpux[78]*)\n+    tentative_cc=\"cc -Wp,-H256000\"\n     host_makefile_frag=\"${host_makefile_frag} config/mh-hpux8\"\n     ;;\n   *-hp-hpux*)\n+    tentative_cc=\"cc -Wp,-H256000\"\n     host_makefile_frag=\"${host_makefile_frag} config/mh-hpux\"\n     ;;\n   *-*-hiux*)\n+    tentative_cc=\"cc -Wp,-H256000\"\n     host_makefile_frag=\"${host_makefile_frag} config/mh-hpux\"\n     ;;\n   rs6000-*-lynxos*)\n+    # /bin/cc is less than useful for our purposes.  Always use GCC\n+    tentative_cc=\"/usr/cygnus/progressive/bin/gcc\"\n     host_makefile_frag=\"${host_makefile_frag} config/mh-lynxrs6k\"\n     ;;\n   *-*-lynxos*)\n+    # /bin/cc is less than useful for our purposes.  Always use GCC\n+    tentative_cc=\"/bin/gcc\"\n     host_makefile_frag=\"${host_makefile_frag} config/mh-lynxos\"\n     ;;\n   *-*-sysv4*)\n@@ -250,6 +310,7 @@ fi\n \n # If we aren't going to be using gcc, see if we can extract a definition\n # of CC from the fragment.\n+# Actually, use the 'pre-extracted' version above.\n if [ -z \"${CC}\" ] && [ \"${build}\" = \"${host}\" ]; then\n   IFS=\"${IFS= \t}\"; save_ifs=\"$IFS\"; IFS=\"${IFS}:\"\n   found=\n@@ -261,11 +322,8 @@ if [ -z \"${CC}\" ] && [ \"${build}\" = \"${host}\" ]; then\n     fi\n   done\n   IFS=\"$save_ifs\"\n-  if [ -z \"${found}\" ] && [ -n \"${host_makefile_frag}\" ] && [ -f \"${srcdir}/${host_makefile_frag}\" ]; then\n-    xx=`sed -n -e 's/^[ \t]*CC[ \t]*=[ \t]*\\(.*\\)$/\\1/p' < ${srcdir}/${host_makefile_frag}`\n-    if [ -n \"${xx}\" ] ; then\n-      CC=$xx\n-    fi\n+  if [ -z \"${found}\" ] && [ -n \"${tentative_cc}\" ] ; then\n+    CC=$tentative_cc\n   fi\n fi\n "}]}