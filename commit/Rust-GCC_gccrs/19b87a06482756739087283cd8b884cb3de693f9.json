{"sha": "19b87a06482756739087283cd8b884cb3de693f9", "node_id": "C_kwDOANBUbNoAKDE5Yjg3YTA2NDgyNzU2NzM5MDg3MjgzY2Q4Yjg4NGNiM2RlNjkzZjk", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-03-27T16:36:13Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-03-28T13:35:58Z"}, "message": "c++: low -faligned-new [PR102071]\n\nThis test ICEd after the constexpr new patch (r10-3661) because alloc_call\nhad a NOP_EXPR around it; fixed by moving the NOP_EXPR to alloc_expr.  And\nthe PR pointed out that the size_t cookie might need more alignment, so I\nfix that as well.\n\n\tPR c++/102071\n\ngcc/cp/ChangeLog:\n\n\t* init.cc (build_new_1): Include cookie in alignment.  Omit\n\tconstexpr wrapper from alloc_call.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1z/aligned-new9.C: New test.", "tree": {"sha": "58b0513fc73bd96d9ae2bb7fe9316f8bf89a322f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58b0513fc73bd96d9ae2bb7fe9316f8bf89a322f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19b87a06482756739087283cd8b884cb3de693f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19b87a06482756739087283cd8b884cb3de693f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19b87a06482756739087283cd8b884cb3de693f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19b87a06482756739087283cd8b884cb3de693f9/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8796eb27e24bd3340ebd393e96a94b91d09407e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8796eb27e24bd3340ebd393e96a94b91d09407e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8796eb27e24bd3340ebd393e96a94b91d09407e9"}], "stats": {"total": 41, "additions": 37, "deletions": 4}, "files": [{"sha": "91b5c2c0f692b5e0a8d2c8d2d93d054f3720d19d", "filename": "gcc/cp/init.cc", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19b87a06482756739087283cd8b884cb3de693f9/gcc%2Fcp%2Finit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19b87a06482756739087283cd8b884cb3de693f9/gcc%2Fcp%2Finit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.cc?ref=19b87a06482756739087283cd8b884cb3de693f9", "patch": "@@ -3284,7 +3284,13 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \n   tree align_arg = NULL_TREE;\n   if (type_has_new_extended_alignment (elt_type))\n-    align_arg = build_int_cst (align_type_node, TYPE_ALIGN_UNIT (elt_type));\n+    {\n+      unsigned align = TYPE_ALIGN_UNIT (elt_type);\n+      /* Also consider the alignment of the cookie, if any.  */\n+      if (TYPE_VEC_NEW_USES_COOKIE (elt_type))\n+\talign = MAX (align, TYPE_ALIGN_UNIT (size_type_node));\n+      align_arg = build_int_cst (align_type_node, align);\n+    }\n \n   alloc_fn = NULL_TREE;\n \n@@ -3473,18 +3479,19 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \t}\n     }\n \n+  alloc_expr = alloc_call;\n   if (cookie_size)\n-    alloc_call = maybe_wrap_new_for_constexpr (alloc_call, type,\n+    alloc_expr = maybe_wrap_new_for_constexpr (alloc_expr, type,\n \t\t\t\t\t       cookie_size);\n \n   /* In the simple case, we can stop now.  */\n   pointer_type = build_pointer_type (type);\n   if (!cookie_size && !is_initialized && !member_delete_p)\n-    return build_nop (pointer_type, alloc_call);\n+    return build_nop (pointer_type, alloc_expr);\n \n   /* Store the result of the allocation call in a variable so that we can\n      use it more than once.  */\n-  alloc_expr = get_target_expr (alloc_call);\n+  alloc_expr = get_target_expr (alloc_expr);\n   alloc_node = TARGET_EXPR_SLOT (alloc_expr);\n \n   /* Strip any COMPOUND_EXPRs from ALLOC_CALL.  */"}, {"sha": "7854299419a17803b725d5f3327e7afb2a81237c", "filename": "gcc/testsuite/g++.dg/cpp1z/aligned-new9.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19b87a06482756739087283cd8b884cb3de693f9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faligned-new9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19b87a06482756739087283cd8b884cb3de693f9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faligned-new9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faligned-new9.C?ref=19b87a06482756739087283cd8b884cb3de693f9", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/102071\n+// { dg-do run { target c++17 } }\n+// { dg-additional-options -faligned-new=2 }\n+\n+#include <new>\n+\n+int nalign;\n+void *operator new (std::size_t s, std::align_val_t a)\n+{\n+  nalign = (int)a;\n+  return operator new (s);\n+}\n+\n+struct X { ~X(); int c; };\n+\n+int align = (alignof (X) > alignof (std::size_t)\n+\t     ? alignof (X) : alignof (std::size_t));\n+\n+int n = 4;\n+\n+int main()\n+{\n+  X *p = new X[n];\n+  if (nalign != align)\n+    __builtin_abort ();\n+}"}]}