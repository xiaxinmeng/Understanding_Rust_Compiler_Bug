{"sha": "f4463ea86a4b9855d204b8e8e612567017f07228", "node_id": "C_kwDOANBUbNoAKGY0NDYzZWE4NmE0Yjk4NTVkMjA0YjhlOGU2MTI1NjcwMTdmMDcyMjg", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-31T12:58:20Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-31T16:47:41Z"}, "message": "RISC-V: Add vsrl.vv C++ API tests\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vsrl_vv-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsrl_vv-2.C: New test.\n\t* g++.target/riscv/rvv/base/vsrl_vv-3.C: New test.\n\t* g++.target/riscv/rvv/base/vsrl_vv_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsrl_vv_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vsrl_vv_mu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vsrl_vv_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsrl_vv_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vsrl_vv_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vsrl_vv_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsrl_vv_tum-2.C: New test.\n\t* g++.target/riscv/rvv/base/vsrl_vv_tum-3.C: New test.\n\t* g++.target/riscv/rvv/base/vsrl_vv_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsrl_vv_tumu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vsrl_vv_tumu-3.C: New test.", "tree": {"sha": "5223d0b1e8db47b04893f036174f0f98665bda4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5223d0b1e8db47b04893f036174f0f98665bda4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4463ea86a4b9855d204b8e8e612567017f07228", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4463ea86a4b9855d204b8e8e612567017f07228", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4463ea86a4b9855d204b8e8e612567017f07228", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4463ea86a4b9855d204b8e8e612567017f07228/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "768a8952539ca7dfb6a61f17595fa9f6ea1f27b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/768a8952539ca7dfb6a61f17595fa9f6ea1f27b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/768a8952539ca7dfb6a61f17595fa9f6ea1f27b2"}], "stats": {"total": 2862, "additions": 2862, "deletions": 0}, "files": [{"sha": "21b6f49eb75b3e9aaba76ca3e81f3191ba2738d1", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsrl_vv-1.C", "status": "added", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv-1.C?ref=f4463ea86a4b9855d204b8e8e612567017f07228", "patch": "@@ -0,0 +1,314 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsrl(vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsrl(vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsrl(vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsrl(vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsrl(vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsrl(vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsrl(vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsrl(vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsrl(vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsrl(vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsrl(vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsrl(vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsrl(vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsrl(vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsrl(vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsrl(vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsrl(vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsrl(vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsrl(vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsrl(vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsrl(vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsrl(vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsrl(vbool64_t mask,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsrl(vbool32_t mask,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsrl(vbool16_t mask,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsrl(vbool8_t mask,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsrl(vbool4_t mask,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsrl(vbool2_t mask,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsrl(vbool1_t mask,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsrl(vbool64_t mask,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsrl(vbool32_t mask,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsrl(vbool16_t mask,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsrl(vbool8_t mask,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsrl(vbool4_t mask,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsrl(vbool2_t mask,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsrl(vbool64_t mask,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsrl(vbool32_t mask,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsrl(vbool16_t mask,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsrl(vbool8_t mask,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsrl(vbool4_t mask,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsrl(vbool64_t mask,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsrl(vbool32_t mask,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsrl(vbool16_t mask,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsrl(vbool8_t mask,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "ce57b6c9e1d68c268aa5f9063ec63d99c455f52c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsrl_vv-2.C", "status": "added", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv-2.C?ref=f4463ea86a4b9855d204b8e8e612567017f07228", "patch": "@@ -0,0 +1,314 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsrl(vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsrl(vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsrl(vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsrl(vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsrl(vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsrl(vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsrl(vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsrl(vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsrl(vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsrl(vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsrl(vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsrl(vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsrl(vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsrl(vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsrl(vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsrl(vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsrl(vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsrl(vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsrl(vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsrl(vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsrl(vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsrl(vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsrl(vbool64_t mask,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsrl(vbool32_t mask,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsrl(vbool16_t mask,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsrl(vbool8_t mask,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsrl(vbool4_t mask,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsrl(vbool2_t mask,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsrl(vbool1_t mask,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsrl(vbool64_t mask,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsrl(vbool32_t mask,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsrl(vbool16_t mask,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsrl(vbool8_t mask,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsrl(vbool4_t mask,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsrl(vbool2_t mask,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsrl(vbool64_t mask,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsrl(vbool32_t mask,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsrl(vbool16_t mask,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsrl(vbool8_t mask,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsrl(vbool4_t mask,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsrl(vbool64_t mask,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsrl(vbool32_t mask,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsrl(vbool16_t mask,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsrl(vbool8_t mask,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "c44b6f75e69a03aa88e4122963c091af5481ef1c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsrl_vv-3.C", "status": "added", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv-3.C?ref=f4463ea86a4b9855d204b8e8e612567017f07228", "patch": "@@ -0,0 +1,314 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsrl(vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsrl(vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsrl(vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsrl(vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsrl(vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsrl(vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsrl(vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsrl(vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsrl(vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsrl(vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsrl(vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsrl(vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsrl(vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsrl(vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsrl(vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsrl(vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsrl(vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsrl(vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsrl(vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsrl(vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsrl(vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsrl(vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(op1,shift,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsrl(vbool64_t mask,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsrl(vbool32_t mask,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsrl(vbool16_t mask,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsrl(vbool8_t mask,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsrl(vbool4_t mask,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsrl(vbool2_t mask,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsrl(vbool1_t mask,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsrl(vbool64_t mask,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsrl(vbool32_t mask,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsrl(vbool16_t mask,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsrl(vbool8_t mask,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsrl(vbool4_t mask,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsrl(vbool2_t mask,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsrl(vbool64_t mask,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsrl(vbool32_t mask,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsrl(vbool16_t mask,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsrl(vbool8_t mask,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsrl(vbool4_t mask,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsrl(vbool64_t mask,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsrl(vbool32_t mask,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsrl(vbool16_t mask,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsrl(vbool8_t mask,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl(mask,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "4ae0bfda0468d289995078df67d67fc60310fc99", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsrl_vv_mu-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_mu-1.C?ref=f4463ea86a4b9855d204b8e8e612567017f07228", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsrl_mu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsrl_mu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsrl_mu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsrl_mu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsrl_mu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsrl_mu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsrl_mu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsrl_mu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsrl_mu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsrl_mu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsrl_mu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsrl_mu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsrl_mu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsrl_mu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsrl_mu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsrl_mu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsrl_mu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsrl_mu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsrl_mu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsrl_mu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsrl_mu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsrl_mu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "6780575dee44420fc2f3707b4890644c5ad0f57f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsrl_vv_mu-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_mu-2.C?ref=f4463ea86a4b9855d204b8e8e612567017f07228", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsrl_mu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsrl_mu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsrl_mu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsrl_mu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsrl_mu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsrl_mu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsrl_mu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsrl_mu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsrl_mu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsrl_mu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsrl_mu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsrl_mu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsrl_mu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsrl_mu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsrl_mu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsrl_mu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsrl_mu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsrl_mu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsrl_mu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsrl_mu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsrl_mu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsrl_mu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "8ba4c22d0a32542f3737b92d44070d241b125290", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsrl_vv_mu-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_mu-3.C?ref=f4463ea86a4b9855d204b8e8e612567017f07228", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsrl_mu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsrl_mu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsrl_mu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsrl_mu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsrl_mu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsrl_mu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsrl_mu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsrl_mu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsrl_mu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsrl_mu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsrl_mu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsrl_mu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsrl_mu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsrl_mu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsrl_mu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsrl_mu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsrl_mu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsrl_mu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsrl_mu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsrl_mu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsrl_mu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsrl_mu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "553965f9bf5567e4f131c73c2e5f37b01cea1d86", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsrl_vv_tu-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_tu-1.C?ref=f4463ea86a4b9855d204b8e8e612567017f07228", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsrl_tu(vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsrl_tu(vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsrl_tu(vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsrl_tu(vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsrl_tu(vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsrl_tu(vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsrl_tu(vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsrl_tu(vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsrl_tu(vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsrl_tu(vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsrl_tu(vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsrl_tu(vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsrl_tu(vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsrl_tu(vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsrl_tu(vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsrl_tu(vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsrl_tu(vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsrl_tu(vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsrl_tu(vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsrl_tu(vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsrl_tu(vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsrl_tu(vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "97a4acfd21d82aafb47e93cbafab02f889bd1fee", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsrl_vv_tu-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_tu-2.C?ref=f4463ea86a4b9855d204b8e8e612567017f07228", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsrl_tu(vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsrl_tu(vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsrl_tu(vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsrl_tu(vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsrl_tu(vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsrl_tu(vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsrl_tu(vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsrl_tu(vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsrl_tu(vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsrl_tu(vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsrl_tu(vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsrl_tu(vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsrl_tu(vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsrl_tu(vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsrl_tu(vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsrl_tu(vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsrl_tu(vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsrl_tu(vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsrl_tu(vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsrl_tu(vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsrl_tu(vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsrl_tu(vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "31c2f6f153051261feb0b9f86221582c4471421a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsrl_vv_tu-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_tu-3.C?ref=f4463ea86a4b9855d204b8e8e612567017f07228", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsrl_tu(vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsrl_tu(vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsrl_tu(vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsrl_tu(vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsrl_tu(vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsrl_tu(vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsrl_tu(vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsrl_tu(vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsrl_tu(vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsrl_tu(vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsrl_tu(vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsrl_tu(vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsrl_tu(vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsrl_tu(vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsrl_tu(vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsrl_tu(vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsrl_tu(vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsrl_tu(vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsrl_tu(vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsrl_tu(vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsrl_tu(vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsrl_tu(vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tu(merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "71732133e59c79c333a99f382a14f36014f965d7", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsrl_vv_tum-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_tum-1.C?ref=f4463ea86a4b9855d204b8e8e612567017f07228", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsrl_tum(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsrl_tum(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsrl_tum(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsrl_tum(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsrl_tum(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsrl_tum(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsrl_tum(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsrl_tum(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsrl_tum(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsrl_tum(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsrl_tum(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsrl_tum(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsrl_tum(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsrl_tum(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsrl_tum(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsrl_tum(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsrl_tum(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsrl_tum(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsrl_tum(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsrl_tum(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsrl_tum(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsrl_tum(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "bb9e446ee3ba214d4f7e3b2c64a1728a0464567a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsrl_vv_tum-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_tum-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_tum-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_tum-2.C?ref=f4463ea86a4b9855d204b8e8e612567017f07228", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsrl_tum(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsrl_tum(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsrl_tum(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsrl_tum(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsrl_tum(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsrl_tum(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsrl_tum(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsrl_tum(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsrl_tum(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsrl_tum(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsrl_tum(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsrl_tum(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsrl_tum(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsrl_tum(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsrl_tum(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsrl_tum(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsrl_tum(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsrl_tum(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsrl_tum(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsrl_tum(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsrl_tum(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsrl_tum(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "3fdb30cc9925ce243f18f0d023ab331d70e9bc6c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsrl_vv_tum-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_tum-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_tum-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_tum-3.C?ref=f4463ea86a4b9855d204b8e8e612567017f07228", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsrl_tum(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsrl_tum(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsrl_tum(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsrl_tum(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsrl_tum(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsrl_tum(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsrl_tum(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsrl_tum(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsrl_tum(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsrl_tum(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsrl_tum(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsrl_tum(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsrl_tum(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsrl_tum(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsrl_tum(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsrl_tum(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsrl_tum(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsrl_tum(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsrl_tum(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsrl_tum(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsrl_tum(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsrl_tum(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "0a807bae5106f9451d2d13e6ba27e4569a9819b8", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsrl_vv_tumu-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_tumu-1.C?ref=f4463ea86a4b9855d204b8e8e612567017f07228", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsrl_tumu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsrl_tumu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsrl_tumu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsrl_tumu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsrl_tumu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsrl_tumu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsrl_tumu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsrl_tumu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsrl_tumu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsrl_tumu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsrl_tumu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsrl_tumu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsrl_tumu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsrl_tumu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsrl_tumu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsrl_tumu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsrl_tumu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsrl_tumu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsrl_tumu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsrl_tumu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsrl_tumu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsrl_tumu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "cfb42441c9b0bbd594ffb1d1f7797db78adf294d", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsrl_vv_tumu-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_tumu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_tumu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_tumu-2.C?ref=f4463ea86a4b9855d204b8e8e612567017f07228", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsrl_tumu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsrl_tumu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsrl_tumu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsrl_tumu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsrl_tumu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsrl_tumu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsrl_tumu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsrl_tumu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsrl_tumu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsrl_tumu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsrl_tumu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsrl_tumu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsrl_tumu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsrl_tumu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsrl_tumu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsrl_tumu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsrl_tumu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsrl_tumu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsrl_tumu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsrl_tumu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsrl_tumu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsrl_tumu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "a53338291511ef1eaed1e10f5810e2a76f86a9e4", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsrl_vv_tumu-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_tumu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4463ea86a4b9855d204b8e8e612567017f07228/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_tumu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsrl_vv_tumu-3.C?ref=f4463ea86a4b9855d204b8e8e612567017f07228", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsrl_tumu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsrl_tumu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsrl_tumu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsrl_tumu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsrl_tumu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsrl_tumu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsrl_tumu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsrl_tumu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsrl_tumu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsrl_tumu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsrl_tumu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsrl_tumu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsrl_tumu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsrl_tumu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsrl_tumu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsrl_tumu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsrl_tumu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsrl_tumu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsrl_tumu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsrl_tumu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsrl_tumu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsrl_tumu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsrl_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vsrl\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}]}