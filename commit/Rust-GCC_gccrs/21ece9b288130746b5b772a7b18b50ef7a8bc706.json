{"sha": "21ece9b288130746b5b772a7b18b50ef7a8bc706", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFlY2U5YjI4ODEzMDc0NmI1Yjc3MmE3YjE4YjUwZWY3YThiYzcwNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-10-09T19:55:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-10-09T19:55:34Z"}, "message": "re PR preprocessor/41445 (Debug information is wrong with and without --save-temps.)\n\n\tPR preprocessor/41445\n\t* c-ppoutput.c (do_line_change): New function.\n\t(cb_line_change): Use it.\n\t(scan_translation_unit): Call do_line_change if\n\tavoid_paste or PREV_WHITE and token location is on a different line\n\tthan print.src_line.\n\n\t* gcc.dg/cpp/separate-1.c: Adjust.\n\t* gcc.dg/cpp/spacing1.c: Add -P to dg-options.\n\t* gcc.dg/debug/dwarf2/pr41445-1.c: New test.\n\t* gcc.dg/debug/dwarf2/pr41445-2.c: New test.\n\t* gcc.dg/debug/dwarf2/pr41445-3.c: New test.\n\t* gcc.dg/debug/dwarf2/pr41445-4.c: New test.\n\t* gcc.dg/debug/dwarf2/pr41445-5.c: New test.\n\t* gcc.dg/debug/dwarf2/pr41445-6.c: New test.\n\nFrom-SVN: r152599", "tree": {"sha": "452aec3d79b2f3dd4e31e09a6ab051223c1fe2a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/452aec3d79b2f3dd4e31e09a6ab051223c1fe2a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21ece9b288130746b5b772a7b18b50ef7a8bc706", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21ece9b288130746b5b772a7b18b50ef7a8bc706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21ece9b288130746b5b772a7b18b50ef7a8bc706", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21ece9b288130746b5b772a7b18b50ef7a8bc706/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c1e641ac128838ef78f1618a568ad4315a58e66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c1e641ac128838ef78f1618a568ad4315a58e66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c1e641ac128838ef78f1618a568ad4315a58e66"}], "stats": {"total": 163, "additions": 148, "deletions": 15}, "files": [{"sha": "51fd641773fb20885840707fa03101f7d2e9b9b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21ece9b288130746b5b772a7b18b50ef7a8bc706/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21ece9b288130746b5b772a7b18b50ef7a8bc706/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21ece9b288130746b5b772a7b18b50ef7a8bc706", "patch": "@@ -1,5 +1,12 @@\n 2009-10-09  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR preprocessor/41445\n+\t* c-ppoutput.c (do_line_change): New function.\n+\t(cb_line_change): Use it.\n+\t(scan_translation_unit): Call do_line_change if\n+\tavoid_paste or PREV_WHITE and token location is on a different line\n+\tthan print.src_line.\n+\n \tPR debug/40521\n \t* dwarf2out.c (dwarf2out_init): Test whether\n \tHAVE_GAS_CFI_SECTIONS_DIRECTIVE is non-zero instead of checking"}, {"sha": "bd9af2aa0f6c9a1bd557863007b312806f8d098c", "filename": "gcc/c-ppoutput.c", "status": "modified", "additions": 52, "deletions": 13, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21ece9b288130746b5b772a7b18b50ef7a8bc706/gcc%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21ece9b288130746b5b772a7b18b50ef7a8bc706/gcc%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-ppoutput.c?ref=21ece9b288130746b5b772a7b18b50ef7a8bc706", "patch": "@@ -61,6 +61,8 @@ static void dump_queued_macros (cpp_reader *);\n \n static void print_line (source_location, const char *);\n static void maybe_print_line (source_location);\n+static void do_line_change (cpp_reader *, const cpp_token *,\n+\t\t\t    source_location, int);\n \n /* Callback routines for the parser.   Most of these are active only\n    in specific modes.  */\n@@ -160,11 +162,16 @@ static void\n scan_translation_unit (cpp_reader *pfile)\n {\n   bool avoid_paste = false;\n+  bool do_line_adjustments\n+    = cpp_get_options (parse_in)->lang != CLK_ASM\n+      && !flag_no_line_commands;\n+  bool in_pragma = false;\n \n   print.source = NULL;\n   for (;;)\n     {\n-      const cpp_token *token = cpp_get_token (pfile);\n+      source_location loc;\n+      const cpp_token *token = cpp_get_token_with_location (pfile, &loc);\n \n       if (token->type == CPP_PADDING)\n \t{\n@@ -182,16 +189,38 @@ scan_translation_unit (cpp_reader *pfile)\n       /* Subtle logic to output a space if and only if necessary.  */\n       if (avoid_paste)\n \t{\n+\t  const struct line_map *map\n+\t    = linemap_lookup (line_table, loc);\n+\t  int src_line = SOURCE_LINE (map, loc);\n+\n \t  if (print.source == NULL)\n \t    print.source = token;\n-\t  if (print.source->flags & PREV_WHITE\n-\t      || (print.prev\n-\t\t  && cpp_avoid_paste (pfile, print.prev, token))\n-\t      || (print.prev == NULL && token->type == CPP_HASH))\n+\n+\t  if (src_line != print.src_line\n+\t      && do_line_adjustments\n+\t      && !in_pragma)\n+\t    {\n+\t      do_line_change (pfile, token, loc, false);\n+\t      putc (' ', print.outf);\n+\t    }\n+\t  else if (print.source->flags & PREV_WHITE\n+\t\t   || (print.prev\n+\t\t       && cpp_avoid_paste (pfile, print.prev, token))\n+\t\t   || (print.prev == NULL && token->type == CPP_HASH))\n \t    putc (' ', print.outf);\n \t}\n       else if (token->flags & PREV_WHITE)\n-\tputc (' ', print.outf);\n+\t{\n+\t  const struct line_map *map\n+\t    = linemap_lookup (line_table, loc);\n+\t  int src_line = SOURCE_LINE (map, loc);\n+\n+\t  if (src_line != print.src_line\n+\t      && do_line_adjustments\n+\t      && !in_pragma)\n+\t    do_line_change (pfile, token, loc, false);\n+\t  putc (' ', print.outf);\n+\t}\n \n       avoid_paste = false;\n       print.source = NULL;\n@@ -209,9 +238,13 @@ scan_translation_unit (cpp_reader *pfile)\n \t  else\n \t    fprintf (print.outf, \"%s\", name);\n \t  print.printed = 1;\n+\t  in_pragma = true;\n \t}\n       else if (token->type == CPP_PRAGMA_EOL)\n-\tmaybe_print_line (token->src_loc);\n+\t{\n+\t  maybe_print_line (token->src_loc);\n+\t  in_pragma = false;\n+\t}\n       else\n \tcpp_output_token (token, print.outf);\n \n@@ -331,14 +364,11 @@ print_line (source_location src_loc, const char *special_flags)\n     }\n }\n \n-/* Called when a line of output is started.  TOKEN is the first token\n-   of the line, and at end of file will be CPP_EOF.  */\n+/* Helper function for cb_line_change and scan_translation_unit.  */\n static void\n-cb_line_change (cpp_reader *pfile, const cpp_token *token,\n-\t\tint parsing_args)\n+do_line_change (cpp_reader *pfile, const cpp_token *token,\n+\t\tsource_location src_loc, int parsing_args)\n {\n-  source_location src_loc = token->src_loc;\n-\n   if (define_queue || undef_queue)\n     dump_queued_macros (pfile);\n \n@@ -365,6 +395,15 @@ cb_line_change (cpp_reader *pfile, const cpp_token *token,\n     }\n }\n \n+/* Called when a line of output is started.  TOKEN is the first token\n+   of the line, and at end of file will be CPP_EOF.  */\n+static void\n+cb_line_change (cpp_reader *pfile, const cpp_token *token,\n+\t\tint parsing_args)\n+{\n+  do_line_change (pfile, token, token->src_loc, parsing_args);\n+}\n+\n static void\n cb_ident (cpp_reader *pfile ATTRIBUTE_UNUSED, source_location line,\n \t  const cpp_string *str)"}, {"sha": "b971b7314022d7205a64ad309c32893cdfa8b0f1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21ece9b288130746b5b772a7b18b50ef7a8bc706/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21ece9b288130746b5b772a7b18b50ef7a8bc706/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=21ece9b288130746b5b772a7b18b50ef7a8bc706", "patch": "@@ -1,5 +1,15 @@\n 2009-10-09  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR preprocessor/41445\n+\t* gcc.dg/cpp/separate-1.c: Adjust.\n+\t* gcc.dg/cpp/spacing1.c: Add -P to dg-options.\n+\t* gcc.dg/debug/dwarf2/pr41445-1.c: New test.\n+\t* gcc.dg/debug/dwarf2/pr41445-2.c: New test.\n+\t* gcc.dg/debug/dwarf2/pr41445-3.c: New test.\n+\t* gcc.dg/debug/dwarf2/pr41445-4.c: New test.\n+\t* gcc.dg/debug/dwarf2/pr41445-5.c: New test.\n+\t* gcc.dg/debug/dwarf2/pr41445-6.c: New test.\n+\n \tPR rtl-optimization/41646\n \t* gcc.c-torture/compile/pr41646.c: New test.\n "}, {"sha": "33d910b3c005ad28e96462711ac266846999618f", "filename": "gcc/testsuite/gcc.dg/cpp/separate-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21ece9b288130746b5b772a7b18b50ef7a8bc706/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fseparate-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21ece9b288130746b5b772a7b18b50ef7a8bc706/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fseparate-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fseparate-1.c?ref=21ece9b288130746b5b772a7b18b50ef7a8bc706", "patch": "@@ -8,8 +8,8 @@\n \n #define FOO()\n \n-int FOO( /* { dg-error \"parse error|syntax error|expected\" \"error on this line\" } */\n-\t), bar;\n+int FOO( \n+\t), bar; /* { dg-error \"parse error|syntax error|expected\" \"error on this line\" } */\n \n int baz FOO /* { dg-error \"parse error|syntax error|expected\" \"error on this line\" } */\n ;"}, {"sha": "c21a6b5159bf273a260dcec521d9621278038729", "filename": "gcc/testsuite/gcc.dg/cpp/spacing1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21ece9b288130746b5b772a7b18b50ef7a8bc706/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fspacing1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21ece9b288130746b5b772a7b18b50ef7a8bc706/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fspacing1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fspacing1.c?ref=21ece9b288130746b5b772a7b18b50ef7a8bc706", "patch": "@@ -1,6 +1,7 @@\n /* Copyright (C) 2000, 2001, 2003 Free Software Foundation, Inc.  */\n \n /* { dg-do preprocess } */\n+/* { dg-options \"-P\" } */\n \n /* This tests correct spacing of macro expansion output, as well as\n    the line it falls on.  This is quite subtle; it involves newlines"}, {"sha": "452c0f6808fe91cf5d813ab4a3fd6d6ce05faead", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/pr41445-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21ece9b288130746b5b772a7b18b50ef7a8bc706/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21ece9b288130746b5b772a7b18b50ef7a8bc706/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-1.c?ref=21ece9b288130746b5b772a7b18b50ef7a8bc706", "patch": "@@ -0,0 +1,18 @@\n+/* PR preprocessor/41445 */\n+/* Test that token after multi-line function-like macro use\n+   gets correct locus even when preprocessing separately.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -g -O0 -dA -fno-merge-debug-strings\" } */\n+\n+#define A(a,b)\n+int varh;A(1,\n+\n+\n+\n+  2)int vari;\n+int varj;\n+\n+/* { dg-final { scan-assembler \"DW_TAG_variable\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\\"varh\\[^\\\\r\\\\n\\]*DW_AT_name(\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*DW_AT_)*\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\[^0-9a-fA-FxX](0x)?8\\[^0-9a-fA-FxX]\\[^\\\\r\\\\n\\]*DW_AT_decl_line\" } } */\n+/* { dg-final { scan-assembler \"DW_TAG_variable\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\\"vari\\[^\\\\r\\\\n\\]*DW_AT_name(\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*DW_AT_)*\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\[^0-9a-fA-FxX](0xc|12)\\[^0-9a-fA-FxX]\\[^\\\\r\\\\n\\]*DW_AT_decl_line\" } } */\n+/* { dg-final { scan-assembler \"DW_TAG_variable\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\\"varj\\[^\\\\r\\\\n\\]*DW_AT_name(\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*DW_AT_)*\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\[^0-9a-fA-FxX](0xd|13)\\[^0-9a-fA-FxX]\\[^\\\\r\\\\n\\]*DW_AT_decl_line\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "d2ee408ac9d220b906774246e24ca63ab22bd0a9", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/pr41445-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21ece9b288130746b5b772a7b18b50ef7a8bc706/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21ece9b288130746b5b772a7b18b50ef7a8bc706/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-2.c?ref=21ece9b288130746b5b772a7b18b50ef7a8bc706", "patch": "@@ -0,0 +1,9 @@\n+/* PR preprocessor/41445 */\n+/* { dg-do compile } */\n+/* { dg-options \"-g -O0 -dA -fno-merge-debug-strings\" } */\n+\n+#include \"pr41445-1.c\"\n+\n+/* { dg-final { scan-assembler \"DW_TAG_variable\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\\"varh\\[^\\\\r\\\\n\\]*DW_AT_name(\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*DW_AT_)*\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\[^0-9a-fA-FxX](0x)?8\\[^0-9a-fA-FxX]\\[^\\\\r\\\\n\\]*DW_AT_decl_line\" } } */\n+/* { dg-final { scan-assembler \"DW_TAG_variable\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\\"vari\\[^\\\\r\\\\n\\]*DW_AT_name(\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*DW_AT_)*\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\[^0-9a-fA-FxX](0xc|12)\\[^0-9a-fA-FxX]\\[^\\\\r\\\\n\\]*DW_AT_decl_line\" } } */\n+/* { dg-final { scan-assembler \"DW_TAG_variable\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\\"varj\\[^\\\\r\\\\n\\]*DW_AT_name(\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*DW_AT_)*\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\[^0-9a-fA-FxX](0xd|13)\\[^0-9a-fA-FxX]\\[^\\\\r\\\\n\\]*DW_AT_decl_line\" } } */"}, {"sha": "2a74dc5e3d4dba0a3337856152e271f879901587", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/pr41445-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21ece9b288130746b5b772a7b18b50ef7a8bc706/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21ece9b288130746b5b772a7b18b50ef7a8bc706/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-3.c?ref=21ece9b288130746b5b772a7b18b50ef7a8bc706", "patch": "@@ -0,0 +1,18 @@\n+/* PR preprocessor/41445 */\n+/* Test that token after multi-line function-like macro use\n+   gets correct locus even when preprocessing separately.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -g -O0 -dA -fno-merge-debug-strings\" } */\n+\n+#define A(a,b)\n+int varh;/*\n+\n+Some multi-line comment.\n+\n+  */int vari;\n+int varj;\n+\n+/* { dg-final { scan-assembler \"DW_TAG_variable\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\\"varh\\[^\\\\r\\\\n\\]*DW_AT_name(\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*DW_AT_)*\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\[^0-9a-fA-FxX](0x)?8\\[^0-9a-fA-FxX]\\[^\\\\r\\\\n\\]*DW_AT_decl_line\" } } */\n+/* { dg-final { scan-assembler \"DW_TAG_variable\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\\"vari\\[^\\\\r\\\\n\\]*DW_AT_name(\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*DW_AT_)*\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\[^0-9a-fA-FxX](0xc|12)\\[^0-9a-fA-FxX]\\[^\\\\r\\\\n\\]*DW_AT_decl_line\" } } */\n+/* { dg-final { scan-assembler \"DW_TAG_variable\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\\"varj\\[^\\\\r\\\\n\\]*DW_AT_name(\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*DW_AT_)*\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\[^0-9a-fA-FxX](0xd|13)\\[^0-9a-fA-FxX]\\[^\\\\r\\\\n\\]*DW_AT_decl_line\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "8aa92de5dd4b29f193b071df90fe7a03dfd79498", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/pr41445-4.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21ece9b288130746b5b772a7b18b50ef7a8bc706/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21ece9b288130746b5b772a7b18b50ef7a8bc706/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-4.c?ref=21ece9b288130746b5b772a7b18b50ef7a8bc706", "patch": "@@ -0,0 +1,9 @@\n+/* PR preprocessor/41445 */\n+/* { dg-do compile } */\n+/* { dg-options \"-g -O0 -dA -fno-merge-debug-strings\" } */\n+\n+#include \"pr41445-3.c\"\n+\n+/* { dg-final { scan-assembler \"DW_TAG_variable\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\\"varh\\[^\\\\r\\\\n\\]*DW_AT_name(\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*DW_AT_)*\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\[^0-9a-fA-FxX](0x)?8\\[^0-9a-fA-FxX]\\[^\\\\r\\\\n\\]*DW_AT_decl_line\" } } */\n+/* { dg-final { scan-assembler \"DW_TAG_variable\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\\"vari\\[^\\\\r\\\\n\\]*DW_AT_name(\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*DW_AT_)*\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\[^0-9a-fA-FxX](0xc|12)\\[^0-9a-fA-FxX]\\[^\\\\r\\\\n\\]*DW_AT_decl_line\" } } */\n+/* { dg-final { scan-assembler \"DW_TAG_variable\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\\"varj\\[^\\\\r\\\\n\\]*DW_AT_name(\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*DW_AT_)*\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\[^0-9a-fA-FxX](0xd|13)\\[^0-9a-fA-FxX]\\[^\\\\r\\\\n\\]*DW_AT_decl_line\" } } */"}, {"sha": "03af604a7c0a374225ba1cda7ca2ac61f33e85fe", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/pr41445-5.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21ece9b288130746b5b772a7b18b50ef7a8bc706/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21ece9b288130746b5b772a7b18b50ef7a8bc706/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-5.c?ref=21ece9b288130746b5b772a7b18b50ef7a8bc706", "patch": "@@ -0,0 +1,14 @@\n+/* PR preprocessor/41445 */\n+/* Test that token after multi-line function-like macro use\n+   gets correct locus even when preprocessing separately.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -g -O0 -dA -fno-merge-debug-strings\" } */\n+\n+#define A(x) vari x\n+#define vari(x)\n+#define B , varj\n+int A(B) ;\n+\n+/* { dg-final { scan-assembler \"DW_TAG_variable\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\\"vari\\[^\\\\r\\\\n\\]*DW_AT_name(\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*DW_AT_)*\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\[^0-9a-fA-FxX](0x)?7\\[^0-9a-fA-FxX]\\[^\\\\r\\\\n\\]*DW_AT_decl_line\" } } */\n+/* { dg-final { scan-assembler \"DW_TAG_variable\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\\"varj\\[^\\\\r\\\\n\\]*DW_AT_name(\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*DW_AT_)*\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\[^0-9a-fA-FxX](0xa|10)\\[^0-9a-fA-FxX]\\[^\\\\r\\\\n\\]*DW_AT_decl_line\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "8aa37d1c1a67cb164277944254b2c83df7befcb3", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/pr41445-6.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21ece9b288130746b5b772a7b18b50ef7a8bc706/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21ece9b288130746b5b772a7b18b50ef7a8bc706/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-6.c?ref=21ece9b288130746b5b772a7b18b50ef7a8bc706", "patch": "@@ -0,0 +1,8 @@\n+/* PR preprocessor/41445 */\n+/* { dg-do compile } */\n+/* { dg-options \"-g -O0 -dA -fno-merge-debug-strings\" } */\n+\n+#include \"pr41445-5.c\"\n+\n+/* { dg-final { scan-assembler \"DW_TAG_variable\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\\"vari\\[^\\\\r\\\\n\\]*DW_AT_name(\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*DW_AT_)*\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\[^0-9a-fA-FxX](0x)?7\\[^0-9a-fA-FxX]\\[^\\\\r\\\\n\\]*DW_AT_decl_line\" } } */\n+/* { dg-final { scan-assembler \"DW_TAG_variable\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\\"varj\\[^\\\\r\\\\n\\]*DW_AT_name(\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*DW_AT_)*\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\[^0-9a-fA-FxX](0xa|10)\\[^0-9a-fA-FxX]\\[^\\\\r\\\\n\\]*DW_AT_decl_line\" } } */"}]}