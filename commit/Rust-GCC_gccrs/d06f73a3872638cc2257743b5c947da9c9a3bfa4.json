{"sha": "d06f73a3872638cc2257743b5c947da9c9a3bfa4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA2ZjczYTM4NzI2MzhjYzIyNTc3NDNiNWM5NDdkYTljOWEzYmZhNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2019-01-05T18:16:55Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-01-05T18:16:55Z"}, "message": "invoke.texi: Document max-inline-insns-size...\n\n\n\t* doc/invoke.texi: Document max-inline-insns-size,\n\tuninlined-function-insns, uninlined-function-time,\n\tuninlined-thunk-insns and uninlined-thunk-time.\n\t* params.def: Add max-inline-insns-size,\n\tuninlined-function-insns, uninlined-function-time,\n\tuninlined-thunk-insns and uninlined-thunk-time.\n\t* ipa-fnsummary.c (compute_fn_summary, analyze_function_body): Use\n\tnew parameters.\n\t* ipa-inline.c (can_inline_edge_by_limits_p,\n\twant_inline_small_function_p): Use new parameters.\n\nFrom-SVN: r267601", "tree": {"sha": "cf8d7a5d59159ab6e53790c3e471634618dec2bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf8d7a5d59159ab6e53790c3e471634618dec2bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d06f73a3872638cc2257743b5c947da9c9a3bfa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d06f73a3872638cc2257743b5c947da9c9a3bfa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d06f73a3872638cc2257743b5c947da9c9a3bfa4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d06f73a3872638cc2257743b5c947da9c9a3bfa4/comments", "author": null, "committer": null, "parents": [{"sha": "121356b0175c6cf1cfc64502f73b35d54b5681a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/121356b0175c6cf1cfc64502f73b35d54b5681a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/121356b0175c6cf1cfc64502f73b35d54b5681a5"}], "stats": {"total": 76, "additions": 71, "deletions": 5}, "files": [{"sha": "1cf9aae3781af388f6457b51ac34c2ed191c3383", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d06f73a3872638cc2257743b5c947da9c9a3bfa4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d06f73a3872638cc2257743b5c947da9c9a3bfa4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d06f73a3872638cc2257743b5c947da9c9a3bfa4", "patch": "@@ -1,3 +1,16 @@\n+2019-01-05  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* doc/invoke.texi: Document max-inline-insns-size,\n+\tuninlined-function-insns, uninlined-function-time,\n+\tuninlined-thunk-insns and uninlined-thunk-time.\n+\t* params.def: Add max-inline-insns-size,\n+\tuninlined-function-insns, uninlined-function-time,\n+\tuninlined-thunk-insns and uninlined-thunk-time.\n+\t* ipa-fnsummary.c (compute_fn_summary, analyze_function_body): Use\n+\tnew parameters.\n+\t* ipa-inline.c (can_inline_edge_by_limits_p,\n+\twant_inline_small_function_p): Use new parameters.\n+\n 2019-01-05  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-fnsummary.c (analyze_function_body): Fix accounting of time."}, {"sha": "3501a62abb4bbb83f8124250b3cc808cd52587da", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d06f73a3872638cc2257743b5c947da9c9a3bfa4/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d06f73a3872638cc2257743b5c947da9c9a3bfa4/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d06f73a3872638cc2257743b5c947da9c9a3bfa4", "patch": "@@ -11007,6 +11007,23 @@ by the compiler are investigated.  To those functions, a different\n (more restrictive) limit compared to functions declared inline can\n be applied.\n \n+@item max-inline-insns-size\n+This is bound applied to calls which are optimized for size. Small growth\n+may be desirable to anticipate optimization oppurtunities exposed by inlining.\n+\n+@item uninlined-function-insns\n+Number of instructions accounted by inliner for function overhead such as\n+function prologue and epilogue.\n+\n+@item uninlined-function-time\n+Extra time accounted by inliner for function overhead such as time needed to\n+execute function prologue and epilogue\n+\n+@item uninlined-thunk-insns\n+@item uninlined-thunk-time\n+Same as @option{--param uninlined-function-insns} and\n+@option{--param uninlined-function-time} but applied to function thunks\n+\n @item inline-min-speedup\n When estimated performance improvement of caller + callee runtime exceeds this\n threshold (in percent), the function can be inlined regardless of the limit on"}, {"sha": "1f5ff98782573fcaff8a32a6493bbeab78c36ad8", "filename": "gcc/ipa-fnsummary.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d06f73a3872638cc2257743b5c947da9c9a3bfa4/gcc%2Fipa-fnsummary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d06f73a3872638cc2257743b5c947da9c9a3bfa4/gcc%2Fipa-fnsummary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.c?ref=d06f73a3872638cc2257743b5c947da9c9a3bfa4", "patch": "@@ -2034,7 +2034,10 @@ analyze_function_body (struct cgraph_node *node, bool early)\n   info->account_size_time (0, 0, bb_predicate, bb_predicate);\n \n   bb_predicate = predicate::not_inlined ();\n-  info->account_size_time (2 * ipa_fn_summary::size_scale, 0, bb_predicate,\n+  info->account_size_time (PARAM_VALUE (PARAM_UNINLINED_FUNCTION_INSNS)\n+\t\t\t   * ipa_fn_summary::size_scale,\n+\t\t\t   PARAM_VALUE (PARAM_UNINLINED_FUNCTION_TIME),\n+\t\t\t   bb_predicate,\n \t\t           bb_predicate);\n \n   if (fbi.info)\n@@ -2418,7 +2421,11 @@ compute_fn_summary (struct cgraph_node *node, bool early)\n       node->local.can_change_signature = false;\n       es->call_stmt_size = eni_size_weights.call_cost;\n       es->call_stmt_time = eni_time_weights.call_cost;\n-      info->account_size_time (ipa_fn_summary::size_scale * 2, 2, t, t);\n+      info->account_size_time (ipa_fn_summary::size_scale\n+\t\t\t       * PARAM_VALUE\n+\t\t\t\t (PARAM_UNINLINED_FUNCTION_THUNK_INSNS),\n+\t\t\t       PARAM_VALUE\n+\t\t\t\t (PARAM_UNINLINED_FUNCTION_THUNK_TIME), t, t);\n       t = predicate::not_inlined ();\n       info->account_size_time (2 * ipa_fn_summary::size_scale, 0, t, t);\n       ipa_update_overall_fn_summary (node);"}, {"sha": "b51e2282cc712fa3055f9df54c78aace6695bbd6", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d06f73a3872638cc2257743b5c947da9c9a3bfa4/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d06f73a3872638cc2257743b5c947da9c9a3bfa4/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=d06f73a3872638cc2257743b5c947da9c9a3bfa4", "patch": "@@ -523,7 +523,7 @@ can_inline_edge_by_limits_p (struct cgraph_edge *e, bool report,\n \t       > opt_for_fn (caller->decl, optimize_size))\n \t{\n \t  int growth = estimate_edge_growth (e);\n-\t  if (growth > 0\n+\t  if (growth > PARAM_VALUE (PARAM_MAX_INLINE_INSNS_SIZE)\n \t      && (!DECL_DECLARED_INLINE_P (callee->decl)\n \t\t  && growth >= MAX (MAX_INLINE_INSNS_SINGLE,\n \t\t\t\t    MAX_INLINE_INSNS_AUTO)))\n@@ -635,7 +635,7 @@ want_early_inline_function_p (struct cgraph_edge *e)\n       int growth = estimate_edge_growth (e);\n       int n;\n \n-      if (growth <= 0)\n+      if (growth <= PARAM_VALUE (PARAM_MAX_INLINE_INSNS_SIZE))\n \t;\n       else if (!e->maybe_hot_p ()\n \t       && growth > 0)\n@@ -791,7 +791,7 @@ want_inline_small_function_p (struct cgraph_edge *e, bool report)\n       ipa_hints hints = estimate_edge_hints (e);\n       int big_speedup = -1; /* compute this lazily */\n \n-      if (growth <= 0)\n+      if (growth <= PARAM_VALUE (PARAM_VALUE (PARAM_MAX_INLINE_INSNS_SIZE)))\n \t;\n       /* Apply MAX_INLINE_INSNS_SINGLE limit.  Do not do so when\n \t hints suggests that inlining given function is very profitable.  */\n@@ -809,6 +809,8 @@ want_inline_small_function_p (struct cgraph_edge *e, bool report)\n \t  want_inline = false;\n \t}\n       else if (!DECL_DECLARED_INLINE_P (callee->decl)\n+\t       && (in_lto_p\n+\t\t   && growth >= PARAM_VALUE (PARAM_EARLY_INLINING_INSNS))\n \t       && !opt_for_fn (e->caller->decl, flag_inline_functions))\n \t{\n \t  /* growth_likely_positive is expensive, always test it last.  */"}, {"sha": "b89b475ca96327193c4043ec18844cf49bb2b8f5", "filename": "gcc/params.def", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d06f73a3872638cc2257743b5c947da9c9a3bfa4/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d06f73a3872638cc2257743b5c947da9c9a3bfa4/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=d06f73a3872638cc2257743b5c947da9c9a3bfa4", "patch": "@@ -83,6 +83,33 @@ DEFPARAM (PARAM_MAX_INLINE_INSNS_AUTO,\n \t  \"The maximum number of instructions when automatically inlining.\",\n \t  30, 0, 0)\n \n+DEFPARAM (PARAM_MAX_INLINE_INSNS_SIZE,\n+\t  \"max-inline-insns-size\",\n+\t  \"The maximum number of instructions when inlining for size.\",\n+\t  0, 0, 0)\n+\n+DEFPARAM (PARAM_UNINLINED_FUNCTION_INSNS,\n+\t  \"uninlined-function-insns\",\n+\t  \"Instruction accounted for function prologue, epilogue and other\"\n+\t  \" overhead.\",\n+\t  2, 0, 0)\n+\n+DEFPARAM (PARAM_UNINLINED_FUNCTION_TIME,\n+\t  \"uninlined-function-time\",\n+\t  \"Time accounted for function prologue, epilogue and other\"\n+\t  \" overhead.\",\n+\t  0, 0, 0)\n+\n+DEFPARAM (PARAM_UNINLINED_FUNCTION_THUNK_INSNS,\n+\t  \"uninlined-thunk-insns\",\n+\t  \"Instruction accounted for function thunk overhead.\",\n+\t  2, 0, 0)\n+\n+DEFPARAM (PARAM_UNINLINED_FUNCTION_THUNK_TIME,\n+\t  \"uninlined-thunk-time\",\n+\t  \"Time accounted for function thunk overhead.\",\n+\t  2, 0, 0)\n+\n DEFPARAM (PARAM_MAX_INLINE_INSNS_RECURSIVE,\n \t  \"max-inline-insns-recursive\",\n \t  \"The maximum number of instructions inline function can grow to via recursive inlining.\","}]}