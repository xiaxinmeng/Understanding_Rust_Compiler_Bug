{"sha": "0cdf7b49f10deeba7d5ba2ab3cedd4625718efef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNkZjdiNDlmMTBkZWViYTdkNWJhMmFiM2NlZGQ0NjI1NzE4ZWZlZg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2010-08-25T14:14:59Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2010-08-25T14:14:59Z"}, "message": "combine.c (find_split_point): Undo canonicalization of multiply-add to (minus x (mult)) when...\n\n\t* combine.c (find_split_point): Undo canonicalization of multiply-add\n\tto (minus x (mult)) when it seems likely that this will increase the\n\tchances of a split.\n\n\t* gcc.target/i386/combine-mul.c: New test.\n\nFrom-SVN: r163547", "tree": {"sha": "fc7abd9a5867b5301f6c577a01296f62b18e5e16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc7abd9a5867b5301f6c577a01296f62b18e5e16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cdf7b49f10deeba7d5ba2ab3cedd4625718efef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cdf7b49f10deeba7d5ba2ab3cedd4625718efef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cdf7b49f10deeba7d5ba2ab3cedd4625718efef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cdf7b49f10deeba7d5ba2ab3cedd4625718efef/comments", "author": null, "committer": null, "parents": [{"sha": "4942fc569c5ba8ab9bebfad2d9cc9630a69c2579", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4942fc569c5ba8ab9bebfad2d9cc9630a69c2579", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4942fc569c5ba8ab9bebfad2d9cc9630a69c2579"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "551e93b9f610104c34f3057c27983b6156793f1e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdf7b49f10deeba7d5ba2ab3cedd4625718efef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdf7b49f10deeba7d5ba2ab3cedd4625718efef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0cdf7b49f10deeba7d5ba2ab3cedd4625718efef", "patch": "@@ -4,6 +4,10 @@\n \t* combine.c (try_combine): Use reg_overlap_mentioned_p rather than\n \tdead_or_set_p when computing i0_feeds_i2_n.\n \n+\t* combine.c (find_split_point): Undo canonicalization of multiply-add\n+\tto (minus x (mult)) when it seems likely that this will increase the\n+\tchances of a split.\n+\n 2010-08-25  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/44562"}, {"sha": "94e68392d98b74c3abaeb8864d0f3dc84000031b", "filename": "gcc/combine.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdf7b49f10deeba7d5ba2ab3cedd4625718efef/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdf7b49f10deeba7d5ba2ab3cedd4625718efef/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=0cdf7b49f10deeba7d5ba2ab3cedd4625718efef", "patch": "@@ -4771,6 +4771,23 @@ find_split_point (rtx *loc, rtx insn, bool set_src)\n \n     case PLUS:\n     case MINUS:\n+      /* Canonicalization can produce (minus A (mult B C)), where C is a\n+\t constant.  It may be better to try splitting (plus (mult B -C) A)\n+\t instead if this isn't a multiply by a power of two.  */\n+      if (set_src && code == MINUS && GET_CODE (XEXP (x, 1)) == MULT\n+\t  && GET_CODE (XEXP (XEXP (x, 1), 1)) == CONST_INT\n+\t  && exact_log2 (INTVAL (XEXP (XEXP (x, 1), 1))) < 0)\n+\t{\n+\t  enum machine_mode mode = GET_MODE (x);\n+\t  unsigned HOST_WIDE_INT this_int = INTVAL (XEXP (XEXP (x, 1), 1));\n+\t  HOST_WIDE_INT other_int = trunc_int_for_mode (-this_int, mode);\n+\t  SUBST (*loc, gen_rtx_PLUS (mode, gen_rtx_MULT (mode,\n+\t\t\t\t\t\t\t XEXP (XEXP (x, 1), 0),\n+\t\t\t\t\t\t\t GEN_INT (other_int)),\n+\t\t\t\t     XEXP (x, 0)));\n+\t  return find_split_point (loc, insn, set_src);\n+\t}\n+\n       /* Split at a multiply-accumulate instruction.  However if this is\n          the SET_SRC, we likely do not have such an instruction and it's\n          worthless to try this split.  */"}, {"sha": "a3153af2613c4d7bc795f647713067e6692500cb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdf7b49f10deeba7d5ba2ab3cedd4625718efef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdf7b49f10deeba7d5ba2ab3cedd4625718efef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0cdf7b49f10deeba7d5ba2ab3cedd4625718efef", "patch": "@@ -1,3 +1,7 @@\n+2010-08-25  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* gcc.target/i386/combine-mul.c: New test.\n+\n 2010-08-25  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/44562"}, {"sha": "4ef80e881340e9cc30d8ab2d6333e35858329b5f", "filename": "gcc/testsuite/gcc.target/i386/combine-mul.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdf7b49f10deeba7d5ba2ab3cedd4625718efef/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcombine-mul.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdf7b49f10deeba7d5ba2ab3cedd4625718efef/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcombine-mul.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcombine-mul.c?ref=0cdf7b49f10deeba7d5ba2ab3cedd4625718efef", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"12345\" } } */\n+\n+static inline unsigned int myrnd (void)\n+{\n+    static unsigned int s = 1388815473;\n+    s *= 1103515245;\n+    s += 12345;\n+}\n+\n+struct __attribute__ ((packed)) A {\n+    unsigned short i:1, l:1, j:3, k:11;\n+};\n+\n+struct A sA;\n+void testA (void)\n+{\n+    char *p = (char *) &sA;\n+    *p++ = myrnd ();\n+    *p++ = myrnd ();\n+    sA.k = -1;\n+}"}]}