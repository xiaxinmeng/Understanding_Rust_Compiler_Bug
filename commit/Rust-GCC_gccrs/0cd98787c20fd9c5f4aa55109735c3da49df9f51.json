{"sha": "0cd98787c20fd9c5f4aa55109735c3da49df9f51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNkOTg3ODdjMjBmZDljNWY0YWE1NTEwOTczNWMzZGE0OWRmOWY1MQ==", "commit": {"author": {"name": "Jie Zhang", "email": "jie@codesourcery.com", "date": "2011-01-29T03:20:57Z"}, "committer": {"name": "Jie Zhang", "email": "jiez@gcc.gnu.org", "date": "2011-01-29T03:20:57Z"}, "message": "arm.c (arm_legitimize_reload_address): New.\n\n\t* config/arm/arm.c (arm_legitimize_reload_address): New.\n\t* config/arm/arm.h (ARM_LEGITIMIZE_RELOAD_ADDRESS): Use\n\tarm_legitimize_reload_address.\n\t* config/arm/arm-protos.h (arm_legitimize_reload_address):\n\tDeclare.\n\nFrom-SVN: r169386", "tree": {"sha": "029218ccd0d6694da3f8506246050f821ca9aed1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/029218ccd0d6694da3f8506246050f821ca9aed1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cd98787c20fd9c5f4aa55109735c3da49df9f51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cd98787c20fd9c5f4aa55109735c3da49df9f51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cd98787c20fd9c5f4aa55109735c3da49df9f51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cd98787c20fd9c5f4aa55109735c3da49df9f51/comments", "author": null, "committer": null, "parents": [{"sha": "9b798ac5b869be5c30a4fa0b62cd18080b263c1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b798ac5b869be5c30a4fa0b62cd18080b263c1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b798ac5b869be5c30a4fa0b62cd18080b263c1a"}], "stats": {"total": 115, "additions": 68, "deletions": 47}, "files": [{"sha": "c293fd708af1839564bd6f9abe00874d3943eee3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd98787c20fd9c5f4aa55109735c3da49df9f51/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd98787c20fd9c5f4aa55109735c3da49df9f51/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0cd98787c20fd9c5f4aa55109735c3da49df9f51", "patch": "@@ -1,3 +1,11 @@\n+2011-01-29  Jie Zhang  <jie@codesourcery.com>\n+\n+\t* config/arm/arm.c (arm_legitimize_reload_address): New.\n+\t* config/arm/arm.h (ARM_LEGITIMIZE_RELOAD_ADDRESS): Use\n+\tarm_legitimize_reload_address.\n+\t* config/arm/arm-protos.h (arm_legitimize_reload_address):\n+\tDeclare.\n+\n 2011-01-28  Ian Lance Taylor  <iant@google.com>\n \n \t* godump.c (go_define): Ignore macros whose definitions include"}, {"sha": "f037a456a0602c2cb6bbfe21db01889a97435ff9", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd98787c20fd9c5f4aa55109735c3da49df9f51/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd98787c20fd9c5f4aa55109735c3da49df9f51/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=0cd98787c20fd9c5f4aa55109735c3da49df9f51", "patch": "@@ -54,6 +54,8 @@ extern rtx legitimize_pic_address (rtx, enum machine_mode, rtx);\n extern rtx legitimize_tls_address (rtx, rtx);\n extern int arm_legitimate_address_outer_p (enum machine_mode, rtx, RTX_CODE, int);\n extern int thumb_legitimate_offset_p (enum machine_mode, HOST_WIDE_INT);\n+extern bool arm_legitimize_reload_address (rtx *, enum machine_mode, int, int,\n+\t\t\t\t\t   int);\n extern rtx thumb_legitimize_reload_address (rtx *, enum machine_mode, int, int,\n \t\t\t\t\t    int);\n extern int arm_const_double_rtx (rtx);"}, {"sha": "85150027b9df5efc9cf34ccd7510993288a3adef", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd98787c20fd9c5f4aa55109735c3da49df9f51/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd98787c20fd9c5f4aa55109735c3da49df9f51/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=0cd98787c20fd9c5f4aa55109735c3da49df9f51", "patch": "@@ -6392,6 +6392,62 @@ thumb_legitimize_address (rtx x, rtx orig_x, enum machine_mode mode)\n   return x;\n }\n \n+bool\n+arm_legitimize_reload_address (rtx *p,\n+\t\t\t       enum machine_mode mode,\n+\t\t\t       int opnum, int type,\n+\t\t\t       int ind_levels ATTRIBUTE_UNUSED)\n+{\n+  if (GET_CODE (*p) == PLUS\n+      && GET_CODE (XEXP (*p, 0)) == REG\n+      && ARM_REGNO_OK_FOR_BASE_P (REGNO (XEXP (*p, 0)))\n+      && GET_CODE (XEXP (*p, 1)) == CONST_INT)\n+    {\n+      HOST_WIDE_INT val = INTVAL (XEXP (*p, 1));\n+      HOST_WIDE_INT low, high;\n+\n+      if (mode == DImode || (mode == DFmode && TARGET_SOFT_FLOAT))\n+\tlow = ((val & 0xf) ^ 0x8) - 0x8;\n+      else if (TARGET_MAVERICK && TARGET_HARD_FLOAT)\n+\t/* Need to be careful, -256 is not a valid offset.  */\n+\tlow = val >= 0 ? (val & 0xff) : -((-val) & 0xff);\n+      else if (mode == SImode\n+\t       || (mode == SFmode && TARGET_SOFT_FLOAT)\n+\t       || ((mode == HImode || mode == QImode) && ! arm_arch4))\n+\t/* Need to be careful, -4096 is not a valid offset.  */\n+\tlow = val >= 0 ? (val & 0xfff) : -((-val) & 0xfff);\n+      else if ((mode == HImode || mode == QImode) && arm_arch4)\n+\t/* Need to be careful, -256 is not a valid offset.  */\n+\tlow = val >= 0 ? (val & 0xff) : -((-val) & 0xff);\n+      else if (GET_MODE_CLASS (mode) == MODE_FLOAT\n+\t       && TARGET_HARD_FLOAT && TARGET_FPA)\n+\t/* Need to be careful, -1024 is not a valid offset.  */\n+\tlow = val >= 0 ? (val & 0x3ff) : -((-val) & 0x3ff);\n+      else\n+\treturn false;\n+\n+      high = ((((val - low) & (unsigned HOST_WIDE_INT) 0xffffffff)\n+\t       ^ (unsigned HOST_WIDE_INT) 0x80000000)\n+\t      - (unsigned HOST_WIDE_INT) 0x80000000);\n+      /* Check for overflow or zero */\n+      if (low == 0 || high == 0 || (high + low != val))\n+\treturn false;\n+\n+      /* Reload the high part into a base reg; leave the low part\n+\t in the mem.  */\n+      *p = gen_rtx_PLUS (GET_MODE (*p),\n+\t\t\t gen_rtx_PLUS (GET_MODE (*p), XEXP (*p, 0),\n+\t\t\t\t       GEN_INT (high)),\n+\t\t\t GEN_INT (low));\n+      push_reload (XEXP (*p, 0), NULL_RTX, &XEXP (*p, 0), NULL,\n+\t\t   MODE_BASE_REG_CLASS (mode), GET_MODE (*p),\n+\t\t   VOIDmode, 0, 0, opnum, (enum reload_type) type);\n+      return true;\n+    }\n+\n+  return false;\n+}\n+\n rtx\n thumb_legitimize_reload_address (rtx *x_p,\n \t\t\t\t enum machine_mode mode,"}, {"sha": "6abc8326ed533853353b84d9754412b62bcf11c0", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 2, "deletions": 47, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd98787c20fd9c5f4aa55109735c3da49df9f51/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd98787c20fd9c5f4aa55109735c3da49df9f51/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=0cd98787c20fd9c5f4aa55109735c3da49df9f51", "patch": "@@ -1273,53 +1273,8 @@ enum reg_class\n #define ARM_LEGITIMIZE_RELOAD_ADDRESS(X, MODE, OPNUM, TYPE, IND, WIN)\t   \\\n   do\t\t\t\t\t\t\t\t\t   \\\n     {\t\t\t\t\t\t\t\t\t   \\\n-      if (GET_CODE (X) == PLUS\t\t\t\t\t\t   \\\n-\t  && GET_CODE (XEXP (X, 0)) == REG\t\t\t\t   \\\n-\t  && REGNO (XEXP (X, 0)) < FIRST_PSEUDO_REGISTER\t\t   \\\n-\t  && REG_MODE_OK_FOR_BASE_P (XEXP (X, 0), MODE)\t\t\t   \\\n-\t  && GET_CODE (XEXP (X, 1)) == CONST_INT)\t\t\t   \\\n-\t{\t\t\t\t\t\t\t\t   \\\n-\t  HOST_WIDE_INT val = INTVAL (XEXP (X, 1));\t\t\t   \\\n-\t  HOST_WIDE_INT low, high;\t\t\t\t\t   \\\n-\t\t\t\t\t\t\t\t\t   \\\n-\t  if (MODE == DImode || (MODE == DFmode && TARGET_SOFT_FLOAT))\t   \\\n-\t    low = ((val & 0xf) ^ 0x8) - 0x8;\t\t\t\t   \\\n-\t  else if (TARGET_MAVERICK && TARGET_HARD_FLOAT)\t\t   \\\n-\t    /* Need to be careful, -256 is not a valid offset.  */\t   \\\n-\t    low = val >= 0 ? (val & 0xff) : -((-val) & 0xff);\t\t   \\\n-\t  else if (MODE == SImode\t\t\t\t\t   \\\n-\t\t   || (MODE == SFmode && TARGET_SOFT_FLOAT)\t\t   \\\n-\t\t   || ((MODE == HImode || MODE == QImode) && ! arm_arch4)) \\\n-\t    /* Need to be careful, -4096 is not a valid offset.  */\t   \\\n-\t    low = val >= 0 ? (val & 0xfff) : -((-val) & 0xfff);\t\t   \\\n-\t  else if ((MODE == HImode || MODE == QImode) && arm_arch4)\t   \\\n-\t    /* Need to be careful, -256 is not a valid offset.  */\t   \\\n-\t    low = val >= 0 ? (val & 0xff) : -((-val) & 0xff);\t\t   \\\n-\t  else if (GET_MODE_CLASS (MODE) == MODE_FLOAT\t\t\t   \\\n-\t\t   && TARGET_HARD_FLOAT && TARGET_FPA)\t\t\t   \\\n-\t    /* Need to be careful, -1024 is not a valid offset.  */\t   \\\n-\t    low = val >= 0 ? (val & 0x3ff) : -((-val) & 0x3ff);\t\t   \\\n-\t  else\t\t\t\t\t\t\t\t   \\\n-\t    break;\t\t\t\t\t\t\t   \\\n-\t\t\t\t\t\t\t\t\t   \\\n-\t  high = ((((val - low) & (unsigned HOST_WIDE_INT) 0xffffffff)\t   \\\n-\t\t   ^ (unsigned HOST_WIDE_INT) 0x80000000)\t\t   \\\n-\t\t  - (unsigned HOST_WIDE_INT) 0x80000000);\t\t   \\\n-\t  /* Check for overflow or zero */\t\t\t\t   \\\n-\t  if (low == 0 || high == 0 || (high + low != val))\t\t   \\\n-\t    break;\t\t\t\t\t\t\t   \\\n-\t\t\t\t\t\t\t\t\t   \\\n-\t  /* Reload the high part into a base reg; leave the low part\t   \\\n-\t     in the mem.  */\t\t\t\t\t\t   \\\n-\t  X = gen_rtx_PLUS (GET_MODE (X),\t\t\t\t   \\\n-\t\t\t    gen_rtx_PLUS (GET_MODE (X), XEXP (X, 0),\t   \\\n-\t\t\t\t\t  GEN_INT (high)),\t\t   \\\n-\t\t\t    GEN_INT (low));\t\t\t\t   \\\n-\t  push_reload (XEXP (X, 0), NULL_RTX, &XEXP (X, 0), NULL,\t   \\\n-\t\t       MODE_BASE_REG_CLASS (MODE), GET_MODE (X), \t   \\\n-\t\t       VOIDmode, 0, 0, OPNUM, TYPE);\t\t\t   \\\n-\t  goto WIN;\t\t\t\t\t\t\t   \\\n-\t}\t\t\t\t\t\t\t\t   \\\n+      if (arm_legitimize_reload_address (&X, MODE, OPNUM, TYPE, IND))\t   \\\n+\tgoto WIN;\t\t\t\t\t\t\t   \\\n     }\t\t\t\t\t\t\t\t\t   \\\n   while (0)\n "}]}