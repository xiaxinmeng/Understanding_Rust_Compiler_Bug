{"sha": "fdc49e10e69a5f250b6784c77c3617fb853e5634", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRjNDllMTBlNjlhNWYyNTBiNjc4NGM3N2MzNjE3ZmI4NTNlNTYzNA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-08-07T03:12:09Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-08-07T03:12:09Z"}, "message": "c-decl.c (builtin_decls): Replace with first_builtin_decl and last_builtin_decl.\n\n\t* c-decl.c (builtin_decls): Replace with first_builtin_decl\n\tand last_builtin_decl.\n\t(c_init_decl_processing): Initialize both.\n\t(c_reset_state): Iterate from first_builtin_decl to\n\tlast_builtin_decl inclusive to reintroduce builtins.\n\nFrom-SVN: r70218", "tree": {"sha": "cbd19b1bfbd1bc0e96fba027d2c31276bb28dfa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbd19b1bfbd1bc0e96fba027d2c31276bb28dfa6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdc49e10e69a5f250b6784c77c3617fb853e5634", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdc49e10e69a5f250b6784c77c3617fb853e5634", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdc49e10e69a5f250b6784c77c3617fb853e5634", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdc49e10e69a5f250b6784c77c3617fb853e5634/comments", "author": null, "committer": null, "parents": [{"sha": "7c6e92558c74d538f6790a81178b8cbe21f9dedc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c6e92558c74d538f6790a81178b8cbe21f9dedc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c6e92558c74d538f6790a81178b8cbe21f9dedc"}], "stats": {"total": 80, "additions": 46, "deletions": 34}, "files": [{"sha": "2aad0b387e461fcc0ebeace97afebd9fd4f02182", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 29, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc49e10e69a5f250b6784c77c3617fb853e5634/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc49e10e69a5f250b6784c77c3617fb853e5634/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fdc49e10e69a5f250b6784c77c3617fb853e5634", "patch": "@@ -1,34 +1,42 @@\n+2003-08-06  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* c-decl.c (builtin_decls): Replace with first_builtin_decl\n+\tand last_builtin_decl.\n+\t(c_init_decl_processing): Initialize both.\n+\t(c_reset_state): Iterate from first_builtin_decl to\n+\tlast_builtin_decl inclusive to reintroduce builtins.\n+\n 2003-08-06  David Mosberger  <davidm@hpl.hp.com>\n \n-        * doc/extend.texi (Function Attributes): Document the IA-64 version\n-        of the \"model\" attribute.\n-\n-        * config/ia64/ia64.h (SYMBOL_FLAG_SMALL_ADDR): New macro.\n-        (SYMBOL_REF_SMALL_ADDR_P): Ditto.\n-        (PREDICATE_CODES): Mention \"small_addr_symbolic_operand\".\n-\n-        * config/ia64/ia64.c (ia64_handle_model_attribute): New function.\n-        (ia64_encode_section_info): Likewise.\n-        (ia64_attribute_table): Add \"model\" attribute.\n-        (TARGET_ENCODE_SECTION_INFO): Define.\n-        (small_addr_symbolic_operand): New function.\n-        (got_symbolic_operand): Return 0 for a symbolref to an object\n-        in the small address area.\n-        (enum ia64_addr_area): New type.\n-        (small_ident1): New variable.\n-        (small_ident2): Likewise.\n-        (init_idents): New function.\n-        (ia64_get_addr_area): Likewise.\n-        (ia64_encode_addr_area): Likewise.\n-        (ia64_encode_section_info): Likewise.\n-        (ia64_expand_load_address): For symbolic references to objects in\n-        the small-address-area, load the address via gen_rtx_SET() (which,\n-        eventually, will expand into \"addl\").\n+\t* doc/extend.texi (Function Attributes): Document the IA-64 version\n+\tof the \"model\" attribute.\n+\n+\t* config/ia64/ia64.h (SYMBOL_FLAG_SMALL_ADDR): New macro.\n+\t(SYMBOL_REF_SMALL_ADDR_P): Ditto.\n+\t(PREDICATE_CODES): Mention \"small_addr_symbolic_operand\".\n+\n+\t* config/ia64/ia64.c (ia64_handle_model_attribute): New function.\n+\t(ia64_encode_section_info): Likewise.\n+\t(ia64_attribute_table): Add \"model\" attribute.\n+\t(TARGET_ENCODE_SECTION_INFO): Define.\n+\t(small_addr_symbolic_operand): New function.\n+\t(got_symbolic_operand): Return 0 for a symbolref to an object\n+\tin the small address area.\n+\t(enum ia64_addr_area): New type.\n+\t(small_ident1): New variable.\n+\t(small_ident2): Likewise.\n+\t(init_idents): New function.\n+\t(ia64_get_addr_area): Likewise.\n+\t(ia64_encode_addr_area): Likewise.\n+\t(ia64_encode_section_info): Likewise.\n+\t(ia64_expand_load_address): For symbolic references to objects in\n+\tthe small-address-area, load the address via gen_rtx_SET() (which,\n+\teventually, will expand into \"addl\").\n \n 2003-08-06  Per Bothner  <pbothner@apple.com>\n \n \t* line-map.h (fileline):  New typedef.\n-\t(struct line_map, linemap_add, linemap_lookup):  Use it.\t\n+\t(struct line_map, linemap_add, linemap_lookup):  Use it.\n \t* input.h (struct location_s):  Comment notes that long-term we want\n \tto replace it by fileline.\n \n@@ -133,7 +141,7 @@\n \t(pp_c_real_literal): Likewise.\n \t(pp_c_integer_literal): Likewise.\n \t* c-pretty-print.c (pp_c_char): Use pp_string in lieu of\n-\tpp_identifier. \n+\tpp_identifier.\n \t(pp_c_character_literal): Tidy.\n \t(pp_c_string_literal): Make public.\n \t(pp_c_bool_literal): Likewise.\n@@ -268,8 +276,8 @@\n \t* langhooks-def.h (lhd_initialize_diagnostics): Declare.\n \t(LANG_HOOKS_INITIALIZE_DIAGNOSTITCS): New macro.\n \t(LANG_HOOKS_INITIALIZER): Adjust.\n-\t* langhooks.h (struct lang_hooks): Add new field \n-\tinitialize_diagnostics. \n+\t* langhooks.h (struct lang_hooks): Add new field\n+\tinitialize_diagnostics.\n \t* langhooks.c (lhd_initialize_diagnostics): Define.\n \n 2003-08-03  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n@@ -410,7 +418,7 @@\n \n \t* varasm.c (lookup_constant_def): New function.\n \t* rtl.h (lookup_constant_def): Declare it.\n-\t* dwarf2out.c (loc_descriptor_from_tree): Use it.  \n+\t* dwarf2out.c (loc_descriptor_from_tree): Use it.\n \tUse targetm.delegitimize_address, not ASM_SIMPLIFY_DWARF_ADDR.\n \n 2003-08-01  Zack Weinberg  <zack@codesourcery.com>"}, {"sha": "b31686b4a5e301a9636bc70c71c4cf134931f4ba", "filename": "gcc/c-decl.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc49e10e69a5f250b6784c77c3617fb853e5634/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc49e10e69a5f250b6784c77c3617fb853e5634/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=fdc49e10e69a5f250b6784c77c3617fb853e5634", "patch": "@@ -130,9 +130,10 @@ static GTY(()) tree c_scope_stmt_stack;\n    some other global meaning for that identifier.  */\n static GTY(()) tree truly_local_externals;\n \n-/* A list of the builtin file-scope DECLs.  */\n+/* All the builtins; this is a subset of the entries of global_scope.  */\n \n-static GTY(()) tree builtin_decls;\n+static GTY(()) tree first_builtin_decl;\n+static GTY(()) tree last_builtin_decl;\n \n /* A DECL for the current file-scope context.  */\n \n@@ -2288,7 +2289,8 @@ c_init_decl_processing (void)\n   make_fname_decl = c_make_fname_decl;\n   start_fname_decls ();\n \n-  builtin_decls = global_scope->names;\n+  first_builtin_decl = global_scope->names;\n+  last_builtin_decl = global_scope->names_last;\n }\n \n /* Create the VAR_DECL for __FUNCTION__ etc. ID is the name to give the\n@@ -6869,8 +6871,10 @@ c_reset_state (void)\n   current_file_decl = build_decl (TRANSLATION_UNIT_DECL, NULL, NULL);\n   TREE_CHAIN (current_file_decl) = file_scope_decl;\n \n-  /* Reintroduce the global declarations.  */\n-  for (link = builtin_decls; link; link = TREE_CHAIN (link))\n+  /* Reintroduce the builtin declarations.  */\n+  for (link = first_builtin_decl;\n+       link != TREE_CHAIN (last_builtin_decl);\n+       link = TREE_CHAIN (link))\n     pushdecl (copy_node (link));\n }\n "}]}