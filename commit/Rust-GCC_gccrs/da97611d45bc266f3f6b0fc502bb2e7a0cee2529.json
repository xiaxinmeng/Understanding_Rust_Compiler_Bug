{"sha": "da97611d45bc266f3f6b0fc502bb2e7a0cee2529", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE5NzYxMWQ0NWJjMjY2ZjNmNmIwZmM1MDJiYjJlN2EwY2VlMjUyOQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-04-11T23:01:12Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-04-11T23:01:12Z"}, "message": "re PR target/50751 (SH Target: Displacement addressing does not work for QImode and HImode)\n\n\tPR target/50751\n\t* gcc/target/sh/pr50751-4.c: New.\n\t* gcc/target/sh/pr50751-5.c: New.\n\t* gcc/target/sh/pr50751-6.c: New.\n\t* gcc/target/sh/pr50751-7.c: New.\n\nFrom-SVN: r186365", "tree": {"sha": "6e228da6014acb3299397623cfe1c23a2d824bed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e228da6014acb3299397623cfe1c23a2d824bed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da97611d45bc266f3f6b0fc502bb2e7a0cee2529", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da97611d45bc266f3f6b0fc502bb2e7a0cee2529", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da97611d45bc266f3f6b0fc502bb2e7a0cee2529", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da97611d45bc266f3f6b0fc502bb2e7a0cee2529/comments", "author": null, "committer": null, "parents": [{"sha": "c7b57b22c5507d498c92702e0d73fa4b00049fac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7b57b22c5507d498c92702e0d73fa4b00049fac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7b57b22c5507d498c92702e0d73fa4b00049fac"}], "stats": {"total": 126, "additions": 126, "deletions": 0}, "files": [{"sha": "67c709983c39f5de34ab884d78611267f33c63f4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da97611d45bc266f3f6b0fc502bb2e7a0cee2529/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da97611d45bc266f3f6b0fc502bb2e7a0cee2529/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da97611d45bc266f3f6b0fc502bb2e7a0cee2529", "patch": "@@ -1,3 +1,11 @@\n+2012-04-12  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/50751\n+\t* gcc/target/sh/pr50751-4.c: New.\n+\t* gcc/target/sh/pr50751-5.c: New.\n+\t* gcc/target/sh/pr50751-6.c: New.\n+\t* gcc/target/sh/pr50751-7.c: New.\n+\n 2012-04-11  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n \n \tPR c++/52465"}, {"sha": "f3f0357707ac4ed96cfdcca909d3b9710ec221f2", "filename": "gcc/testsuite/gcc.target/sh/pr50751-4.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da97611d45bc266f3f6b0fc502bb2e7a0cee2529/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da97611d45bc266f3f6b0fc502bb2e7a0cee2529/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-4.c?ref=da97611d45bc266f3f6b0fc502bb2e7a0cee2529", "patch": "@@ -0,0 +1,30 @@\n+/* Check that the mov.w displacement addressing insn is generated.\n+   If the insn is generated as expected, there should be no address \n+   calculations outside the mov insns.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } } */\n+/* { dg-final { scan-assembler-not \"add|sub\" } } */\n+\n+void\n+testfunc_00 (const short* ap, short* bp, short val)\n+{\n+  bp[0] = ap[15];\n+  bp[2] = ap[5];\n+  bp[9] = ap[7];\n+  bp[0] = ap[15];\n+  bp[4] = val;\n+  bp[14] = val;\n+}\n+\n+void\n+testfunc_01 (volatile const short* ap, volatile short* bp, short val)\n+{\n+  bp[0] = ap[15];\n+  bp[2] = ap[5];\n+  bp[9] = ap[7];\n+  bp[0] = ap[15];\n+  bp[4] = val;\n+  bp[14] = val;\n+}\n+"}, {"sha": "48d5403b2d4d55718f3b18b0f09309cfe6721d88", "filename": "gcc/testsuite/gcc.target/sh/pr50751-5.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da97611d45bc266f3f6b0fc502bb2e7a0cee2529/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da97611d45bc266f3f6b0fc502bb2e7a0cee2529/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-5.c?ref=da97611d45bc266f3f6b0fc502bb2e7a0cee2529", "patch": "@@ -0,0 +1,27 @@\n+/* Check that the mov.w displacement addressing insn is generated and the \n+   base address is adjusted only once.  On SH2A this test is skipped because\n+   there is a 4 byte mov.w insn that can handle larger displacements.  Thus\n+   on SH2A the base address will not be adjusted in this case.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" \"-m2a*\" } { \"\" } } */\n+/* { dg-final { scan-assembler-times \"add\" 2 } } */\n+\n+void\n+testfunc_00 (const short* ap, short* bp)\n+{\n+  bp[0] = ap[15];\n+  bp[2] = ap[5];\n+  bp[9] = ap[7];\n+  bp[0] = ap[25];\n+}\n+\n+void\n+testfunc_01 (volatile const short* ap, volatile short* bp)\n+{\n+  bp[0] = ap[15];\n+  bp[2] = ap[5];\n+  bp[9] = ap[7];\n+  bp[0] = ap[25];\n+}\n+"}, {"sha": "83fb5abeafe1776e78eef2468e677fb15ae89726", "filename": "gcc/testsuite/gcc.target/sh/pr50751-6.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da97611d45bc266f3f6b0fc502bb2e7a0cee2529/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da97611d45bc266f3f6b0fc502bb2e7a0cee2529/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-6.c?ref=da97611d45bc266f3f6b0fc502bb2e7a0cee2529", "patch": "@@ -0,0 +1,26 @@\n+/* Check that on SH2A the 4 byte mov.w displacement insn is generated to\n+   handle larger displacements.  If it is generated correctly, there should\n+   be no base address adjustments outside the mov.w insns.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m2a*\" } } */\n+/* { dg-final { scan-assembler-not \"add|sub\" } } */\n+\n+void\n+testfunc_00 (const short* ap, short* bp)\n+{\n+  bp[100] = ap[15];\n+  bp[200] = ap[50];\n+  bp[900] = ap[71];\n+  bp[0] = ap[25];\n+}\n+\n+void\n+testfunc_01 (volatile const short* ap, volatile short* bp)\n+{\n+  bp[100] = ap[15];\n+  bp[200] = ap[50];\n+  bp[900] = ap[71];\n+  bp[0] = ap[25];\n+}\n+"}, {"sha": "859cba42f61b8cf2186bc466c78a80e10619c895", "filename": "gcc/testsuite/gcc.target/sh/pr50751-7.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da97611d45bc266f3f6b0fc502bb2e7a0cee2529/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da97611d45bc266f3f6b0fc502bb2e7a0cee2529/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-7.c?ref=da97611d45bc266f3f6b0fc502bb2e7a0cee2529", "patch": "@@ -0,0 +1,35 @@\n+/* Check that mov.b and mov.w displacement insns are generated.\n+   If this is working properly, there should be no base address adjustments\n+   outside the mov insns.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } } */\n+/* { dg-final { scan-assembler-not \"add|sub\" } } */\n+\n+typedef struct \n+{\n+  char\ta;\n+  char\tb;\n+  char\tc;\n+  char\td;\n+\n+  short e;\n+  short f;\n+\n+  int g;\n+  int h;\n+} X;\n+\n+void\n+testfunc_00 (X* x)\n+{\n+  x->g = x->b | x->c;\n+  x->h = x->e | x->f;\n+  x->d = x->g;\n+  x->f = x->h;\n+}\n+\n+int testfunc_01 (X* x)\n+{\n+  return x->b | x->e | x->g;\n+}"}]}