{"sha": "ce7d4645bb1e1610a0f2a34928f22f277d1f5d24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U3ZDQ2NDViYjFlMTYxMGEwZjJhMzQ5MjhmMjJmMjc3ZDFmNWQyNA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2006-11-27T08:03:45Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2006-11-27T08:03:45Z"}, "message": "revert: i386.c (ix86_rtx_costs): For standard 80387 constants...\n\n        Revert:\n        2006-05-08  Uros Bizjak  <uros@kss-loka.si>\n        * config/i386/i386.c (ix86_rtx_costs) [FLOAT_EXTEND]: For\n        standard 80387 constants, raise the cost to prevent\n        compress_float_constant() to generate load from memory.\n\n        * config/i386/i386.md: Add new splitter pattern to split\n        float_extended load of constant from constant pool into\n        pure constant load.\n\nFrom-SVN: r119246", "tree": {"sha": "f80676d53dcc0472f8acaa1d7e496ea7f16cb29d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f80676d53dcc0472f8acaa1d7e496ea7f16cb29d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce7d4645bb1e1610a0f2a34928f22f277d1f5d24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce7d4645bb1e1610a0f2a34928f22f277d1f5d24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce7d4645bb1e1610a0f2a34928f22f277d1f5d24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce7d4645bb1e1610a0f2a34928f22f277d1f5d24/comments", "author": null, "committer": null, "parents": [{"sha": "56c7f9c1d073eb17e95c171e945bfabb322ca5f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56c7f9c1d073eb17e95c171e945bfabb322ca5f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56c7f9c1d073eb17e95c171e945bfabb322ca5f1"}], "stats": {"total": 67, "additions": 48, "deletions": 19}, "files": [{"sha": "543995a04bcd7c684303d00124c84159934b162b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce7d4645bb1e1610a0f2a34928f22f277d1f5d24/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce7d4645bb1e1610a0f2a34928f22f277d1f5d24/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce7d4645bb1e1610a0f2a34928f22f277d1f5d24", "patch": "@@ -1,3 +1,15 @@\n+2006-11-27  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tRevert:\n+\t2006-05-08  Uros Bizjak  <uros@kss-loka.si>\n+\t* config/i386/i386.c (ix86_rtx_costs) [FLOAT_EXTEND]: For\n+\tstandard 80387 constants, raise the cost to prevent\n+\tcompress_float_constant() to generate load from memory.\n+\n+\t* config/i386/i386.md: Add new splitter pattern to split\n+\tfloat_extended load of constant from constant pool into\n+\tpure constant load.\n+\n 2006-11-26  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* doc/install.texi: Move GMP/MPFR configure options from Fortran\n@@ -10,8 +22,8 @@\n \n 2006-11-26  Razya Ladklesky  <razya@il.ibm.com> \n \n-        * testsuite/gcc.dg/ipa/ipa-6.c: New.\n-        \n+\t* testsuite/gcc.dg/ipa/ipa-6.c: New.\n+\n 2006-11-26  Razya Ladklesky  <razya@il.ibm.com>\n \t\n \tPR tree-optimization/29122\n@@ -2070,7 +2082,7 @@\n 2006-11-05  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/lib1funcs-4-300.asm: Guard entire file with\n-        #if !__SHMEDIA__ .\n+\t#if !__SHMEDIA__ .\n \n 2006-11-05  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "9e11787db4c35da15b73927b7052595a494904cd", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce7d4645bb1e1610a0f2a34928f22f277d1f5d24/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce7d4645bb1e1610a0f2a34928f22f277d1f5d24/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ce7d4645bb1e1610a0f2a34928f22f277d1f5d24", "patch": "@@ -17705,22 +17705,7 @@ ix86_rtx_costs (rtx x, int code, int outer_code, int *total)\n       if (!TARGET_SSE_MATH\n \t  || mode == XFmode\n \t  || (mode == DFmode && !TARGET_SSE2))\n-\t/* For standard 80387 constants, raise the cost to prevent\n-\t   compress_float_constant() to generate load from memory.  */\n-\tswitch (standard_80387_constant_p (XEXP (x, 0)))\n-\t  {\n-\t  case -1:\n-\t  case 0:\n-\t    *total = 0;\n-\t    break;\n-\t  case 1: /* 0.0 */\n-\t    *total = 1;\n-\t    break;\n-\t  default:\n-\t    *total = (x86_ext_80387_constants & TUNEMASK\n-\t\t      || optimize_size\n-\t\t      ? 1 : 0);\n-\t  }\n+\t*total = 0;\n       return false;\n \n     case ABS:"}, {"sha": "5265d838ecfc8a7c4796ed566defc57bdb26322d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce7d4645bb1e1610a0f2a34928f22f277d1f5d24/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce7d4645bb1e1610a0f2a34928f22f277d1f5d24/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=ce7d4645bb1e1610a0f2a34928f22f277d1f5d24", "patch": "@@ -2906,6 +2906,38 @@\n   operands[1] = c;\n })\n \n+(define_split\n+  [(set (match_operand 0 \"register_operand\" \"\")\n+\t(float_extend (match_operand 1 \"memory_operand\" \"\")))]\n+  \"reload_completed\n+   && GET_CODE (operands[1]) == MEM\n+   && (GET_MODE (operands[0]) == XFmode\n+       || GET_MODE (operands[0]) == SFmode || GET_MODE (operands[0]) == DFmode)\n+   && constant_pool_reference_p (operands[1])\"\n+  [(set (match_dup 0) (match_dup 1))]\n+{\n+  rtx c = avoid_constant_pool_reference (SET_SRC (PATTERN (curr_insn)));\n+  rtx r = operands[0];\n+\n+  if (GET_CODE (r) == SUBREG)\n+    r = SUBREG_REG (r);\n+\n+  if (SSE_REG_P (r))\n+    {\n+      if (!standard_sse_constant_p (c))\n+\tFAIL;\n+    }\n+  else if (FP_REG_P (r))\n+    {\n+      if (!standard_80387_constant_p (c))\n+\tFAIL;\n+    }\n+  else if (MMX_REG_P (r))\n+    FAIL;\n+\n+  operands[1] = c;\n+})\n+\n (define_insn \"swapxf\"\n   [(set (match_operand:XF 0 \"register_operand\" \"+f\")\n \t(match_operand:XF 1 \"register_operand\" \"+f\"))"}]}