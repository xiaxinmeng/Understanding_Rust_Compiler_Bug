{"sha": "d5cdcd5cf2b2920b44836005baceb59d046b6e5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVjZGNkNWNmMmIyOTIwYjQ0ODM2MDA1YmFjZWI1OWQwNDZiNmU1YQ==", "commit": {"author": {"name": "Jim Wilson", "email": "jimw@sifive.com", "date": "2020-05-31T00:04:17Z"}, "committer": {"name": "Jim Wilson", "email": "jimw@sifive.com", "date": "2020-05-31T00:09:15Z"}, "message": "RISC-V: Optimize si to di zero-extend followed by left shift.\n\nThis is potentially a sequence of 3 shifts, we which optimize to a sequence\nof 2 shifts.  This can happen when unsigned int is used for array indexing.\n\n\tgcc/\n\t* config/riscv/riscv.md (zero_extendsidi2_shifted): New.\n\n\tgcc/testsuite/\n\t* gcc.target/riscv/zero-extend-5.c: New.", "tree": {"sha": "becb1148e911f52560dd5c0367cdd14be5e9c76b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/becb1148e911f52560dd5c0367cdd14be5e9c76b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5cdcd5cf2b2920b44836005baceb59d046b6e5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5cdcd5cf2b2920b44836005baceb59d046b6e5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5cdcd5cf2b2920b44836005baceb59d046b6e5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5cdcd5cf2b2920b44836005baceb59d046b6e5a/comments", "author": null, "committer": null, "parents": [{"sha": "9f2e635defba9d697a6c291013b37bd2c7ed91aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f2e635defba9d697a6c291013b37bd2c7ed91aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f2e635defba9d697a6c291013b37bd2c7ed91aa"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "f4bdb7d8cfe660d7f3ef6513bc941fa3e5bd3e38", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cdcd5cf2b2920b44836005baceb59d046b6e5a/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cdcd5cf2b2920b44836005baceb59d046b6e5a/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=d5cdcd5cf2b2920b44836005baceb59d046b6e5a", "patch": "@@ -1808,6 +1808,28 @@\n   operands[2] = GEN_INT (ctz_hwi (INTVAL (operands[2])));\n })\n \n+;; Handle SImode to DImode zero-extend combined with a left shift.  This can\n+;; occur when unsigned int is used for array indexing.  Split this into two\n+;; shifts.  Otherwise we can get 3 shifts.\n+\n+(define_insn_and_split \"zero_extendsidi2_shifted\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(and:DI (ashift:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t\t   (match_operand:QI 2 \"immediate_operand\" \"I\"))\n+\t\t(match_operand 3 \"immediate_operand\" \"\")))\n+   (clobber (match_scratch:DI 4 \"=&r\"))]\n+  \"TARGET_64BIT\n+   && ((INTVAL (operands[3]) >> INTVAL (operands[2])) == 0xffffffff)\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 4)\n+\t(ashift:DI (match_dup 1) (const_int 32)))\n+   (set (match_dup 0)\n+\t(lshiftrt:DI (match_dup 4) (match_dup 5)))]\n+  \"operands[5] = GEN_INT (32 - (INTVAL (operands [2])));\"\n+  [(set_attr \"type\" \"shift\")\n+   (set_attr \"mode\" \"DI\")])\n+\n ;;\n ;;  ....................\n ;;"}, {"sha": "1a135b8c097f176ef075bcce64e670c44c974e1e", "filename": "gcc/testsuite/gcc.target/riscv/zero-extend-5.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cdcd5cf2b2920b44836005baceb59d046b6e5a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-extend-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cdcd5cf2b2920b44836005baceb59d046b6e5a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-extend-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzero-extend-5.c?ref=d5cdcd5cf2b2920b44836005baceb59d046b6e5a", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target { riscv64*-*-* } } } */\n+/* { dg-options \"-march=rv64gc -mabi=lp64 -O2\" } */\n+int\n+sub (unsigned int i, unsigned int j, unsigned int k, int *array)\n+{\n+  return array[i] + array[j] + array[k];\n+}\n+/* { dg-final { scan-assembler-times \"slli\" 3 } } */"}]}