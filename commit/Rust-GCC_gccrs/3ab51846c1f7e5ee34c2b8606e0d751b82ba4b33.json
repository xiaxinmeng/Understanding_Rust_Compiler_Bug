{"sha": "3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FiNTE4NDZjMWY3ZTVlZTM0YzJiODYwNmUwZDc1MWI4MmJhNGIzMw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-01-18T01:20:48Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-01-18T01:20:48Z"}, "message": "c-tree.texi, [...]: Use @smallexample instead of @example.\n\n\t* doc/c-tree.texi, doc/compat.texi, doc/cpp.texi,\n\tdoc/cppopts.texi, doc/extend.texi, doc/install.texi,\n\tdoc/interface.texi, doc/invoke.texi, doc/libgcc.texi, doc/md.texi,\n\tdoc/objc.texi, doc/rtl.texi, doc/tm.texi, doc/trouble.texi: Use\n\t@smallexample instead of @example.\n\nFrom-SVN: r76075", "tree": {"sha": "b8bb49bcf07541a2953d86f7d22e13ca077c4398", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8bb49bcf07541a2953d86f7d22e13ca077c4398"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfbed37cf88d2cec79b5ed34c71ea3e40b2b2578", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfbed37cf88d2cec79b5ed34c71ea3e40b2b2578", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfbed37cf88d2cec79b5ed34c71ea3e40b2b2578"}], "stats": {"total": 1475, "additions": 742, "deletions": 733}, "files": [{"sha": "f686e70953cf27856ec659450d691794b725fcee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33", "patch": "@@ -1,3 +1,11 @@\n+2004-01-18  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* doc/c-tree.texi, doc/compat.texi, doc/cpp.texi,\n+\tdoc/cppopts.texi, doc/extend.texi, doc/install.texi,\n+\tdoc/interface.texi, doc/invoke.texi, doc/libgcc.texi, doc/md.texi,\n+\tdoc/objc.texi, doc/rtl.texi, doc/tm.texi, doc/trouble.texi: Use\n+\t@smallexample instead of @example.\n+\n 2004-01-17  Ziemowit Laski  <zlaski@apple.com>\n \n \t* objc/objc-act.c (build_objc_method_call): Use target"}, {"sha": "8a72b920da867f930560c5b8b936b0590b23ecce", "filename": "gcc/doc/c-tree.texi", "status": "modified", "additions": 40, "deletions": 39, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2Fdoc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2Fdoc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fc-tree.texi?ref=3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33", "patch": "@@ -1,4 +1,4 @@\n-@c Copyright (c) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+@c Copyright (c) 1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n @c Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n@@ -98,24 +98,24 @@ Many macros behave as predicates.  Many, although not all, of these\n predicates end in @samp{_P}.  Do not rely on the result type of these\n macros being of any particular type.  You may, however, rely on the fact\n that the type can be compared to @code{0}, so that statements like\n-@example\n+@smallexample\n if (TEST_P (t) && !TEST_P (y))\n   x = 1;\n-@end example\n+@end smallexample\n @noindent\n and\n-@example\n+@smallexample\n int i = (TEST_P (t) != 0);\n-@end example\n+@end smallexample\n @noindent\n are legal.  Macros that return @code{int} values now may be changed to\n return @code{tree} values, or other pointers in the future.  Even those\n that continue to return @code{int} may return multiple nonzero codes\n where previously they returned only zero and one.  Therefore, you should\n not write code like\n-@example\n+@smallexample\n if (TEST_P (t) == 1)\n-@end example\n+@end smallexample\n @noindent\n as this code is not guaranteed to work correctly in the future.\n \n@@ -871,15 +871,15 @@ This predicate holds if the declaration was implicitly generated by the\n compiler.  For example, this predicate will hold of an implicitly\n declared member function, or of the @code{TYPE_DECL} implicitly\n generated for a class type.  Recall that in C++ code like:\n-@example\n+@smallexample\n struct S @{@};\n-@end example\n+@end smallexample\n @noindent\n is roughly equivalent to C code like:\n-@example\n+@smallexample\n struct S @{@};\n typedef struct S S;\n-@end example\n+@end smallexample\n The implicitly generated @code{typedef} declaration is represented by a\n @code{TYPE_DECL} for which @code{DECL_ARTIFICIAL} holds.\n \n@@ -1029,9 +1029,9 @@ occurred.\n If a friend function is defined in a class scope, the\n @code{DECL_FRIEND_CONTEXT} macro can be used to determine the class in\n which it was defined.  For example, in\n-@example\n+@smallexample\n class C @{ friend void f() @{@} @};\n-@end example\n+@end smallexample\n @noindent\n the @code{DECL_CONTEXT} for @code{f} will be the\n @code{global_namespace}, but the @code{DECL_FRIEND_CONTEXT} will be the\n@@ -1378,7 +1378,7 @@ the expression has been omitted.  A substatement may in fact be a list\n of statements, connected via their @code{TREE_CHAIN}s.  So, you should\n always process the statement tree by looping over substatements, like\n this:\n-@example\n+@smallexample\n void process_stmt (stmt)\n      tree stmt;\n @{\n@@ -1397,7 +1397,7 @@ void process_stmt (stmt)\n       stmt = TREE_CHAIN (stmt);\n     @}\n @}\n-@end example\n+@end smallexample\n In other words, while the @code{then} clause of an @code{if} statement\n in C++ can be only one statement (although that one statement may be a\n compound statement), the intermediate representation will sometimes use\n@@ -1408,18 +1408,18 @@ several statements chained together.\n \n Used to represent an inline assembly statement.  For an inline assembly\n statement like:\n-@example\n+@smallexample\n asm (\"mov x, y\");\n-@end example\n+@end smallexample\n The @code{ASM_STRING} macro will return a @code{STRING_CST} node for\n @code{\"mov x, y\"}.  If the original statement made use of the\n extended-assembly syntax, then @code{ASM_OUTPUTS},\n @code{ASM_INPUTS}, and @code{ASM_CLOBBERS} will be the outputs, inputs,\n and clobbers for the statement, represented as @code{STRING_CST} nodes.\n The extended-assembly syntax looks like:\n-@example\n+@smallexample\n asm (\"fsinx %1,%0\" : \"=f\" (result) : \"f\" (angle));\n-@end example\n+@end smallexample\n The first string is the @code{ASM_STRING}, containing the instruction\n template.  The next two strings are the output and inputs, respectively;\n this statement has no clobbers.  As this example indicates, ``plain''\n@@ -1451,9 +1451,9 @@ the same type as the condition expression in the switch statement.\n Otherwise, if both @code{CASE_LOW} and @code{CASE_HIGH} are defined, the\n statement is a range of case labels.  Such statements originate with the\n extension that allows users to write things of the form:\n-@example\n+@smallexample\n case 2 ... 5:\n-@end example\n+@end smallexample\n The first value will be @code{CASE_LOW}, while the second will be\n @code{CASE_HIGH}.\n \n@@ -1562,9 +1562,9 @@ evaluated, the statement should be executed.  Then, the\n @code{TREE_VALUE} should be used as the conditional expression itself.\n This representation is used to handle C++ code like this:\n \n-@example\n+@smallexample\n if (int i = 7) @dots{}\n-@end example\n+@end smallexample\n \n where there is a new local variable (or variables) declared within the\n condition.\n@@ -1584,9 +1584,9 @@ the @code{LABEL_DECL} with @code{DECL_NAME}.\n \n If the function uses the G++ ``named return value'' extension, meaning\n that the function has been defined like:\n-@example\n+@smallexample\n S f(int) return s @{@dots{}@}\n-@end example\n+@end smallexample\n then there will be a @code{RETURN_INIT}.  There is never a named\n returned value for a constructor.  The first argument to the\n @code{RETURN_INIT} is the name of the object returned; the second\n@@ -1601,9 +1601,9 @@ constructed in the place where the object will be returned.\n Used to represent a @code{return} statement.  The @code{RETURN_EXPR} is\n the expression returned; it will be @code{NULL_TREE} if the statement\n was just\n-@example\n+@smallexample\n return;\n-@end example\n+@end smallexample\n \n @item SCOPE_STMT\n \n@@ -1803,9 +1803,9 @@ noted otherwise, the operands to an expression are accessed using the\n @code{TREE_OPERAND} macro.  For example, to access the first operand to\n a binary plus expression @code{expr}, use:\n \n-@example\n+@smallexample\n TREE_OPERAND (expr, 0)\n-@end example\n+@end smallexample\n @noindent\n As this example indicates, the operands are zero-indexed.\n \n@@ -1819,10 +1819,11 @@ These nodes represent integer constants.  Note that the type of these\n constants is obtained with @code{TREE_TYPE}; they are not always of type\n @code{int}.  In particular, @code{char} constants are represented with\n @code{INTEGER_CST} nodes.  The value of the integer constant @code{e} is\n-given by @example\n+given by\n+@smallexample\n ((TREE_INT_CST_HIGH (e) << HOST_BITS_PER_WIDE_INT)\n + TREE_INST_CST_LOW (e))\n-@end example\n+@end smallexample\n @noindent\n HOST_BITS_PER_WIDE_INT is at least thirty-two on all platforms.  Both\n @code{TREE_INT_CST_HIGH} and @code{TREE_INT_CST_LOW} return a\n@@ -1893,11 +1894,11 @@ or @code{UNION_TYPE} within which the pointer points), and the\n Note that the @code{DECL_CONTEXT} for the @code{PTRMEM_CST_MEMBER} is in\n general different from the @code{PTRMEM_CST_CLASS}.  For example,\n given:\n-@example\n+@smallexample\n struct B @{ int i; @};\n struct D : public B @{@};\n int D::*dp = &D::i;\n-@end example\n+@end smallexample\n @noindent\n The @code{PTRMEM_CST_CLASS} for @code{&D::i} is @code{D}, even though\n the @code{DECL_CONTEXT} for the @code{PTRMEM_CST_MEMBER} is @code{B},\n@@ -2181,9 +2182,9 @@ sites.\n @item STMT_EXPR\n These nodes are used to represent GCC's statement-expression extension.\n The statement-expression extension allows code like this:\n-@example\n+@smallexample\n int f() @{ return (@{ int j; j = 3; j + 7; @}); @}\n-@end example\n+@end smallexample\n In other words, an sequence of statements may occur where a single\n expression would normally appear.  The @code{STMT_EXPR} node represents\n such an expression.  The @code{STMT_EXPR_STMT} gives the statement\n@@ -2192,13 +2193,13 @@ value of the expression is the value of the last sub-statement in the\n @code{COMPOUND_STMT}.  More precisely, the value is the value computed\n by the last @code{EXPR_STMT} in the outermost scope of the\n @code{COMPOUND_STMT}.  For example, in:\n-@example\n+@smallexample\n (@{ 3; @})\n-@end example\n+@end smallexample\n the value is @code{3} while in:\n-@example\n+@smallexample\n (@{ if (x) @{ 3; @} @})\n-@end example\n+@end smallexample\n (represented by a nested @code{COMPOUND_STMT}), there is no value.  If\n the @code{STMT_EXPR} does not yield a value, it's type will be\n @code{void}."}, {"sha": "5b02ebcac710fb463faf7eeddfbf0ca0cbc41920", "filename": "gcc/doc/compat.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2Fdoc%2Fcompat.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2Fdoc%2Fcompat.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcompat.texi?ref=3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33", "patch": "@@ -1,4 +1,4 @@\n-@c Copyright (C) 2002 Free Software Foundation, Inc.\n+@c Copyright (C) 2002, 2004 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n@@ -133,9 +133,9 @@ build was configured, but can be seen by using the G++ @option{-v} option.\n With default configuration options for G++ 3.3 the compile line for a\n different C++ compiler needs to include\n \n-@example\n+@smallexample\n     -I@var{gcc_install_directory}/include/c++/3.3\n-@end example\n+@end smallexample\n \n Similarly, compiling code with G++ that must use a C++ library other\n than the GNU C++ library requires specifying the location of the header"}, {"sha": "89e30660b4571130d145d465c5cdce07046f7210", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 201, "deletions": 201, "changes": 402, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33", "patch": "@@ -9,7 +9,7 @@\n @copying\n @c man begin COPYRIGHT\n Copyright @copyright{} 1987, 1989, 1991, 1992, 1993, 1994, 1995, 1996,\n-1997, 1998, 1999, 2000, 2001, 2002, 2003\n+1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n Free Software Foundation, Inc.\n \n Permission is granted to copy, distribute and/or modify this document\n@@ -351,10 +351,10 @@ do not recognize these idioms.\n \n The nine trigraphs and their replacements are\n \n-@example\n+@smallexample\n Trigraph:       ??(  ??)  ??<  ??>  ??=  ??/  ??'  ??!  ??-\n Replacement:      [    ]    @{    @}    #    \\    ^    |    ~\n-@end example\n+@end smallexample\n \n @item\n @cindex continued lines\n@@ -385,23 +385,23 @@ There are two kinds of comments.  @dfn{Block comments} begin with\n @samp{/*} and continue until the next @samp{*/}.  Block comments do not\n nest:\n \n-@example\n+@smallexample\n /* @r{this is} /* @r{one comment} */ @r{text outside comment}\n-@end example\n+@end smallexample\n \n @dfn{Line comments} begin with @samp{//} and continue to the end of the\n current line.  Line comments do not nest either, but it does not matter,\n because they would end in the same place anyway.\n \n-@example\n+@smallexample\n // @r{this is} // @r{one comment}\n @r{text outside comment}\n-@end example\n+@end smallexample\n @end enumerate\n \n It is safe to put line comments inside block comments, or vice versa.\n \n-@example\n+@smallexample\n @group\n /* @r{block comment}\n    // @r{contains line comment}\n@@ -410,17 +410,17 @@ It is safe to put line comments inside block comments, or vice versa.\n \n // @r{line comment} /* @r{contains block comment} */\n @end group\n-@end example\n+@end smallexample\n \n But beware of commenting out one end of a block comment with a line\n comment.\n \n-@example\n+@smallexample\n @group\n  // @r{l.c.}  /* @r{block comment begins}\n     @r{oops! this isn't a comment anymore} */\n @end group\n-@end example\n+@end smallexample\n \n Comments are not recognized within string literals.  \n @t{@w{\"/* blah */\"}} is the string constant @samp{@w{/* blah */}}, not\n@@ -437,7 +437,7 @@ next line with backslash-newline.  You can even split @samp{/*},\n @samp{*/}, and @samp{//} onto multiple lines with backslash-newline.\n For example:\n \n-@example\n+@smallexample\n @group\n /\\\n *\n@@ -447,7 +447,7 @@ ne FO\\\n O 10\\\n 20\n @end group\n-@end example\n+@end smallexample\n \n @noindent\n is equivalent to @code{@w{#define FOO 1020}}.  All these tricks are\n@@ -482,15 +482,15 @@ Once the input file is broken into tokens, the token boundaries never\n change, except when the @samp{##} preprocessing operator is used to paste\n tokens together.  @xref{Concatenation}.  For example,\n \n-@example\n+@smallexample\n @group\n #define foo() bar\n foo()baz\n      @expansion{} bar baz\n @emph{not}\n      @expansion{} barbaz\n @end group\n-@end example\n+@end smallexample\n \n The compiler does not re-tokenize the preprocessor's output.  Each\n preprocessing token becomes one compiler token.\n@@ -590,10 +590,10 @@ punctuation in obsolete systems.  It has no negative side effects,\n unlike trigraphs, but does not cover as much ground.  The digraphs and\n their corresponding normal punctuators are:\n \n-@example\n+@smallexample\n Digraph:        <%  %>  <:  :>  %:  %:%:\n Punctuator:      @{   @}   [   ]   #    ##\n-@end example\n+@end smallexample\n \n @cindex other tokens\n Any other single character is considered ``other.'' It is passed on to\n@@ -613,10 +613,10 @@ silently ignored, just as any other character would be.  In running\n text, NUL is considered white space.  For example, these two directives\n have the same meaning.\n \n-@example\n+@smallexample\n #define X^@@1\n #define X 1\n-@end example\n+@end smallexample\n \n @noindent\n (where @samp{^@@} is ASCII NUL)@.  Within string or character constants,\n@@ -791,15 +791,15 @@ file, followed by the output that comes from the text after the\n @samp{#include} directive.  For example, if you have a header file\n @file{header.h} as follows,\n \n-@example\n+@smallexample\n char *test (void);\n-@end example\n+@end smallexample\n \n @noindent\n and a main program called @file{program.c} that uses the header file,\n like this,\n \n-@example\n+@smallexample\n int x;\n #include \"header.h\"\n \n@@ -808,13 +808,13 @@ main (void)\n @{\n   puts (test ());\n @}\n-@end example\n+@end smallexample\n \n @noindent\n the compiler will see the same token stream as it would if\n @file{program.c} read\n \n-@example\n+@smallexample\n int x;\n char *test (void);\n \n@@ -823,7 +823,7 @@ main (void)\n @{\n   puts (test ());\n @}\n-@end example\n+@end smallexample\n \n Included files are not limited to declarations and macro definitions;\n those are merely the typical uses.  Any fragment of a C program can be\n@@ -850,12 +850,12 @@ GCC looks in several different places for headers.  On a normal Unix\n system, if you do not instruct it otherwise, it will look for headers\n requested with @code{@w{#include <@var{file}>}} in:\n \n-@example\n+@smallexample\n /usr/local/include\n @var{libdir}/gcc/@var{target}/@var{version}/include\n /usr/@var{target}/include\n /usr/include\n-@end example\n+@end smallexample\n \n For C++ programs, it will also look in @file{/usr/include/g++-v3},\n first.  In the above, @var{target} is the canonical name of the system\n@@ -926,7 +926,7 @@ it will certainly waste time.\n The standard way to prevent this is to enclose the entire real contents\n of the file in a conditional, like this:\n \n-@example\n+@smallexample\n @group\n /* File foo.  */\n #ifndef FILE_FOO_SEEN\n@@ -936,7 +936,7 @@ of the file in a conditional, like this:\n \n #endif /* !FILE_FOO_SEEN */\n @end group\n-@end example\n+@end smallexample\n \n This construct is commonly known as a @dfn{wrapper #ifndef}.\n When the header is included again, the conditional will be false,\n@@ -971,26 +971,26 @@ files to be included into your program.  They might specify\n configuration parameters to be used on different sorts of operating\n systems, for instance.  You could do this with a series of conditionals,\n \n-@example\n+@smallexample\n #if SYSTEM_1\n # include \"system_1.h\"\n #elif SYSTEM_2\n # include \"system_2.h\"\n #elif SYSTEM_3\n @dots{}\n #endif\n-@end example\n+@end smallexample\n \n That rapidly becomes tedious.  Instead, the preprocessor offers the\n ability to use a macro for the header name.  This is called a\n @dfn{computed include}.  Instead of writing a header name as the direct\n argument of @samp{#include}, you simply put a macro name there instead:\n \n-@example\n+@smallexample\n #define SYSTEM_H \"system_1.h\"\n @dots{}\n #include SYSTEM_H\n-@end example\n+@end smallexample\n \n @noindent\n @code{SYSTEM_H} will be expanded, and the preprocessor will look for\n@@ -1015,10 +1015,10 @@ string constant are the file to be included.  CPP does not re-examine the\n string for embedded quotes, but neither does it process backslash\n escapes in the string.  Therefore\n \n-@example\n+@smallexample\n #define HEADER \"a\\\"b\"\n #include HEADER\n-@end example\n+@end smallexample\n \n @noindent\n looks for a file named @file{a\\\"b}.  CPP searches for the file according\n@@ -1063,9 +1063,9 @@ header is not protected from multiple inclusion (@pxref{Once-Only\n Headers}), it will recurse infinitely and cause a fatal error.\n \n You could include the old header with an absolute pathname:\n-@example\n+@smallexample\n #include \"/usr/include/old-header.h\"\n-@end example\n+@end smallexample\n @noindent\n This works, but is not clean; should the system headers ever move, you\n would have to edit the new headers to match.\n@@ -1184,27 +1184,27 @@ followed by the name of the macro and then the token sequence it should\n be an abbreviation for, which is variously referred to as the macro's\n @dfn{body}, @dfn{expansion} or @dfn{replacement list}.  For example,\n \n-@example\n+@smallexample\n #define BUFFER_SIZE 1024\n-@end example\n+@end smallexample\n \n @noindent\n defines a macro named @code{BUFFER_SIZE} as an abbreviation for the\n token @code{1024}.  If somewhere after this @samp{#define} directive\n there comes a C statement of the form\n \n-@example\n+@smallexample\n foo = (char *) malloc (BUFFER_SIZE);\n-@end example\n+@end smallexample\n \n @noindent\n then the C preprocessor will recognize and @dfn{expand} the macro\n @code{BUFFER_SIZE}.  The C compiler will see the same tokens as it would\n if you had written\n \n-@example\n+@smallexample\n foo = (char *) malloc (1024);\n-@end example\n+@end smallexample\n \n By convention, macro names are written in uppercase.  Programs are\n easier to read when it is possible to tell at a glance which names are\n@@ -1215,13 +1215,13 @@ continue the definition onto multiple lines, if necessary, using\n backslash-newline.  When the macro is expanded, however, it will all\n come out on one line.  For example,\n \n-@example\n+@smallexample\n #define NUMBERS 1, \\\n                 2, \\\n                 3\n int x[] = @{ NUMBERS @};\n      @expansion{} int x[] = @{ 1, 2, 3 @};\n-@end example\n+@end smallexample\n \n @noindent\n The most common visible consequence of this is surprising line numbers\n@@ -1236,33 +1236,33 @@ The C preprocessor scans your program sequentially.  Macro definitions\n take effect at the place you write them.  Therefore, the following input\n to the C preprocessor\n \n-@example\n+@smallexample\n foo = X;\n #define X 4\n bar = X;\n-@end example\n+@end smallexample\n \n @noindent\n produces\n \n-@example\n+@smallexample\n foo = X;\n bar = 4;\n-@end example\n+@end smallexample\n \n When the preprocessor expands a macro name, the macro's expansion\n replaces the macro invocation, then the expansion is examined for more\n macros to expand.  For example,\n \n-@example\n+@smallexample\n @group\n #define TABLESIZE BUFSIZE\n #define BUFSIZE 1024\n TABLESIZE\n      @expansion{} BUFSIZE\n      @expansion{} 1024\n @end group\n-@end example\n+@end smallexample\n \n @noindent\n @code{TABLESIZE} is expanded first to produce @code{BUFSIZE}, then that\n@@ -1280,12 +1280,12 @@ at some point in the source file.  @code{TABLESIZE}, defined as shown,\n will always expand using the definition of @code{BUFSIZE} that is\n currently in effect:\n \n-@example\n+@smallexample\n #define BUFSIZE 1020\n #define TABLESIZE BUFSIZE\n #undef BUFSIZE\n #define BUFSIZE 37\n-@end example\n+@end smallexample\n \n @noindent\n Now @code{TABLESIZE} expands (in two stages) to @code{37}.\n@@ -1304,24 +1304,24 @@ are called @dfn{function-like macros}.  To define a function-like macro,\n you use the same @samp{#define} directive, but you put a pair of\n parentheses immediately after the macro name.  For example,\n \n-@example\n+@smallexample\n #define lang_init()  c_init()\n lang_init()\n      @expansion{} c_init()\n-@end example\n+@end smallexample\n \n A function-like macro is only expanded if its name appears with a pair\n of parentheses after it.  If you write just the name, it is left alone.\n This can be useful when you have a function and a macro of the same\n name, and you wish to use the function sometimes.\n \n-@example\n+@smallexample\n extern void foo(void);\n #define foo() /* optimized inline version */\n @dots{}\n   foo();\n   funcptr = foo;\n-@end example\n+@end smallexample\n \n Here the call to @code{foo()} will use the macro, but the function\n pointer will get the address of the real function.  If the macro were to\n@@ -1332,11 +1332,11 @@ macro definition, that does not define a function-like macro, it defines\n an object-like macro whose expansion happens to begin with a pair of\n parentheses.\n \n-@example\n+@smallexample\n #define lang_init ()    c_init()\n lang_init()\n      @expansion{} () c_init()()\n-@end example\n+@end smallexample\n \n The first two pairs of parentheses in this expansion come from the\n macro.  The third is the pair that was originally after the macro\n@@ -1368,12 +1368,12 @@ macro body.)\n As an example, here is a macro that computes the minimum of two numeric\n values, as it is defined in many C programs, and some uses.\n \n-@example\n+@smallexample\n #define min(X, Y)  ((X) < (Y) ? (X) : (Y))\n   x = min(a, b);          @expansion{}  x = ((a) < (b) ? (a) : (b));\n   y = min(1, 2);          @expansion{}  y = ((1) < (2) ? (1) : (2));\n   z = min(a + 28, *p);    @expansion{}  z = ((a + 28) < (*p) ? (a + 28) : (*p));\n-@end example\n+@end smallexample\n \n @noindent\n (In this small example you can already see several of the dangers of\n@@ -1386,9 +1386,9 @@ such parentheses does not end the argument.  However, there is no\n requirement for square brackets or braces to balance, and they do not\n prevent a comma from separating arguments.  Thus,\n \n-@example\n+@smallexample\n macro (array[x = y, x + 1])\n-@end example\n+@end smallexample\n \n @noindent\n passes two arguments to @code{macro}: @code{array[x = y} and @code{x +\n@@ -1406,20 +1406,20 @@ Prescan}, for detailed discussion.\n \n For example, @code{min (min (a, b), c)} is first expanded to\n \n-@example\n+@smallexample\n   min (((a) < (b) ? (a) : (b)), (c))\n-@end example\n+@end smallexample\n \n @noindent\n and then to\n \n-@example\n+@smallexample\n @group\n ((((a) < (b) ? (a) : (b))) < (c)\n  ? (((a) < (b) ? (a) : (b)))\n  : (c))\n @end group\n-@end example\n+@end smallexample\n \n @noindent\n (Line breaks shown here for clarity would not actually be generated.)\n@@ -1431,15 +1431,15 @@ You cannot leave out arguments entirely; if a macro takes two arguments,\n there must be exactly one comma at the top level of its argument list.\n Here are some silly examples using @code{min}:\n \n-@example\n+@smallexample\n min(, b)        @expansion{} ((   ) < (b) ? (   ) : (b))\n min(a, )        @expansion{} ((a  ) < ( ) ? (a  ) : ( ))\n min(,)          @expansion{} ((   ) < ( ) ? (   ) : ( ))\n min((,),)       @expansion{} (((,)) < ( ) ? ((,)) : ( ))\n \n min()      @error{} macro \"min\" requires 2 arguments, but only 1 given\n min(,,)    @error{} macro \"min\" passed 3 arguments, but takes just 2\n-@end example\n+@end smallexample\n \n Whitespace is not a preprocessing token, so if a macro @code{foo} takes\n one argument, @code{@w{foo ()}} and @code{@w{foo ( )}} both supply it an\n@@ -1451,10 +1451,10 @@ empty argument was required.\n Macro parameters appearing inside string literals are not replaced by\n their corresponding actual arguments.\n \n-@example\n+@smallexample\n #define foo(x) x, \"x\"\n foo(bar)        @expansion{} bar, \"x\"\n-@end example\n+@end smallexample\n \n @node Stringification\n @section Stringification\n@@ -1478,7 +1478,7 @@ long string.\n \n Here is an example of a macro definition that uses stringification:\n \n-@example\n+@smallexample\n @group\n #define WARN_IF(EXP) \\\n do @{ if (EXP) \\\n@@ -1488,7 +1488,7 @@ WARN_IF (x == 0);\n      @expansion{} do @{ if (x == 0)\n            fprintf (stderr, \"Warning: \" \"x == 0\" \"\\n\"); @} while (0);\n @end group\n-@end example\n+@end smallexample\n \n @noindent\n The argument for @code{EXP} is substituted once, as-is, into the\n@@ -1521,7 +1521,7 @@ There is no way to convert a macro argument into a character constant.\n If you want to stringify the result of expansion of a macro argument,\n you have to use two levels of macros.\n \n-@example\n+@smallexample\n #define xstr(s) str(s)\n #define str(s) #s\n #define foo 4\n@@ -1531,7 +1531,7 @@ xstr (foo)\n      @expansion{} xstr (4)\n      @expansion{} str (4)\n      @expansion{} \"4\"\n-@end example\n+@end smallexample\n \n @code{s} is stringified when it is used in @code{str}, so it is not\n macro-expanded first.  But @code{s} is an ordinary argument to\n@@ -1588,7 +1588,7 @@ Consider a C program that interprets named commands.  There probably\n needs to be a table of commands, perhaps an array of structures declared\n as follows:\n \n-@example\n+@smallexample\n @group\n struct command\n @{\n@@ -1605,15 +1605,15 @@ struct command commands[] =\n   @dots{}\n @};\n @end group\n-@end example\n+@end smallexample\n \n It would be cleaner not to have to give each command name twice, once in\n the string constant and once in the function name.  A macro which takes the\n name of a command as an argument can make this unnecessary.  The string\n constant can be created with stringification, and the function name by\n concatenating the argument with @samp{_command}.  Here is how it is done:\n \n-@example\n+@smallexample\n #define COMMAND(NAME)  @{ #NAME, NAME ## _command @}\n \n struct command commands[] =\n@@ -1622,7 +1622,7 @@ struct command commands[] =\n   COMMAND (help),\n   @dots{}\n @};\n-@end example\n+@end smallexample\n \n @node Variadic Macros\n @section Variadic Macros\n@@ -1634,9 +1634,9 @@ A macro can be declared to accept a variable number of arguments much as\n a function can.  The syntax for defining the macro is similar to that of\n a function.  Here is an example:\n \n-@example\n+@smallexample\n #define eprintf(@dots{}) fprintf (stderr, __VA_ARGS__)\n-@end example\n+@end smallexample\n \n This kind of macro is called @dfn{variadic}.  When the macro is invoked,\n all the tokens in its argument list after the last named argument (this\n@@ -1645,10 +1645,10 @@ argument}.  This sequence of tokens replaces the identifier\n @code{@w{__VA_ARGS__}} in the macro body wherever it appears.  Thus, we\n have this expansion:\n \n-@example\n+@smallexample\n eprintf (\"%s:%d: \", input_file, lineno)\n      @expansion{}  fprintf (stderr, \"%s:%d: \", input_file, lineno)\n-@end example\n+@end smallexample\n \n The variable argument is completely macro-expanded before it is inserted\n into the macro expansion, just like an ordinary argument.  You may use\n@@ -1662,9 +1662,9 @@ this, as an extension.  You may write an argument name immediately\n before the @samp{@dots{}}; that name is used for the variable argument.\n The @code{eprintf} macro above could be written\n \n-@example\n+@smallexample\n #define eprintf(args@dots{}) fprintf (stderr, args)\n-@end example\n+@end smallexample\n \n @noindent\n using this extension.  You cannot use @code{@w{__VA_ARGS__}} and this\n@@ -1673,9 +1673,9 @@ extension in the same macro.\n You can have named arguments as well as variable arguments in a variadic\n macro.  We could define @code{eprintf} like this, instead:\n \n-@example\n+@smallexample\n #define eprintf(format, @dots{}) fprintf (stderr, format, __VA_ARGS__)\n-@end example\n+@end smallexample\n \n @noindent\n This formulation looks more descriptive, but unfortunately it is less\n@@ -1685,37 +1685,37 @@ argument from the variable arguments.  Furthermore, if you leave the\n variable argument empty, you will get a syntax error, because\n there will be an extra comma after the format string.\n \n-@example\n+@smallexample\n eprintf(\"success!\\n\", );\n      @expansion{} fprintf(stderr, \"success!\\n\", );\n-@end example\n+@end smallexample\n \n GNU CPP has a pair of extensions which deal with this problem.  First,\n you are allowed to leave the variable argument out entirely:\n \n-@example\n+@smallexample\n eprintf (\"success!\\n\")\n      @expansion{} fprintf(stderr, \"success!\\n\", );\n-@end example\n+@end smallexample\n \n @noindent\n Second, the @samp{##} token paste operator has a special meaning when\n placed between a comma and a variable argument.  If you write\n \n-@example\n+@smallexample\n #define eprintf(format, @dots{}) fprintf (stderr, format, ##__VA_ARGS__)\n-@end example\n+@end smallexample\n \n @noindent\n and the variable argument is left out when the @code{eprintf} macro is\n used, then the comma before the @samp{##} will be deleted.  This does\n @emph{not} happen if you pass an empty argument, nor does it happen if\n the token preceding @samp{##} is anything other than a comma.\n \n-@example\n+@smallexample\n eprintf (\"success!\\n\")\n      @expansion{} fprintf(stderr, \"success!\\n\");\n-@end example\n+@end smallexample\n \n @noindent\n The above explanation is ambiguous about the case where the only macro\n@@ -1748,9 +1748,9 @@ previous versions of GCC, the token preceding the special @samp{##} must\n be a comma, and there must be white space between that comma and\n whatever comes immediately before it:\n \n-@example\n+@smallexample\n #define eprintf(format, args@dots{}) fprintf (stderr, format , ##args)\n-@end example\n+@end smallexample\n \n @noindent\n @xref{Differences from previous versions}, for the gory details.\n@@ -1803,12 +1803,12 @@ message to report an inconsistency detected by the program; the message\n can state the source line at which the inconsistency was detected.  For\n example,\n \n-@example\n+@smallexample\n fprintf (stderr, \"Internal error: \"\n                  \"negative string length \"\n                  \"%d at %s, line %d.\",\n          length, __FILE__, __LINE__);\n-@end example\n+@end smallexample\n \n An @samp{#include} directive changes the expansions of @code{__FILE__}\n and @code{__LINE__} to correspond to the included file.  At the end of\n@@ -1942,26 +1942,26 @@ minor version and patch level are reset.  If you wish to use the\n predefined macros directly in the conditional, you will need to write it\n like this:\n \n-@example\n+@smallexample\n /* @r{Test for GCC > 3.2.0} */\n #if __GNUC__ > 3 || \\\n     (__GNUC__ == 3 && (__GNUC_MINOR__ > 2 || \\\n                        (__GNUC_MINOR__ == 2 && \\\n                         __GNUC_PATCHLEVEL__ > 0))\n-@end example\n+@end smallexample\n \n @noindent\n Another approach is to use the predefined macros to\n calculate a single number, then compare that against a threshold:\n \n-@example\n+@smallexample\n #define GCC_VERSION (__GNUC__ * 10000 \\\n                      + __GNUC_MINOR__ * 100 \\\n                      + __GNUC_PATCHLEVEL__)\n @dots{}\n /* @r{Test for GCC > 3.2.0} */\n #if GCC_VERSION > 30200\n-@end example\n+@end smallexample\n \n @noindent\n Many people find this form easier to understand.\n@@ -2176,12 +2176,12 @@ macro is function-like.  It is an error if anything appears on the line\n after the macro name.  @samp{#undef} has no effect if the name is not a\n macro.\n \n-@example\n+@smallexample\n #define FOO 4\n x = FOO;        @expansion{} x = 4;\n #undef FOO\n x = FOO;        @expansion{} x = FOO;\n-@end example\n+@end smallexample\n \n Once a macro has been undefined, that identifier may be @dfn{redefined}\n as a macro by a subsequent @samp{#define} directive.  The new definition\n@@ -2201,19 +2201,19 @@ count as whitespace.\n \n @noindent\n These definitions are effectively the same:\n-@example\n+@smallexample\n #define FOUR (2 + 2)\n #define FOUR         (2    +    2)\n #define FOUR (2 /* two */ + 2)\n-@end example\n+@end smallexample\n @noindent\n but these are not:\n-@example\n+@smallexample\n #define FOUR (2 + 2)\n #define FOUR ( 2+2 )\n #define FOUR (2 * 2)\n #define FOUR(score,and,seven,years,ago) (2 + 2)\n-@end example\n+@end smallexample\n \n If a macro is redefined with a definition that is not effectively the\n same as the old one, the preprocessor issues a warning and changes the\n@@ -2294,25 +2294,25 @@ the input file, for more macro calls.  It is possible to piece together\n a macro call coming partially from the macro body and partially from the\n arguments.  For example,\n \n-@example\n+@smallexample\n #define twice(x) (2*(x))\n #define call_with_1(x) x(1)\n call_with_1 (twice)\n      @expansion{} twice(1)\n      @expansion{} (2*(1))\n-@end example\n+@end smallexample\n \n Macro definitions do not have to have balanced parentheses.  By writing\n an unbalanced open parenthesis in a macro body, it is possible to create\n a macro call that begins inside the macro body but ends outside of it.\n For example,\n \n-@example\n+@smallexample\n #define strange(file) fprintf (file, \"%s %d\",\n @dots{}\n strange(stderr) p, 35)\n      @expansion{} fprintf (stderr, \"%s %d\", p, 35)\n-@end example\n+@end smallexample\n \n The ability to piece together a macro call can be useful, but the use of\n unbalanced open parentheses in a macro body is just confusing, and\n@@ -2330,41 +2330,41 @@ way.\n \n Suppose you define a macro as follows,\n \n-@example\n+@smallexample\n #define ceil_div(x, y) (x + y - 1) / y\n-@end example\n+@end smallexample\n \n @noindent\n whose purpose is to divide, rounding up.  (One use for this operation is\n to compute how many @code{int} objects are needed to hold a certain\n number of @code{char} objects.)  Then suppose it is used as follows:\n \n-@example\n+@smallexample\n a = ceil_div (b & c, sizeof (int));\n      @expansion{} a = (b & c + sizeof (int) - 1) / sizeof (int);\n-@end example\n+@end smallexample\n \n @noindent\n This does not do what is intended.  The operator-precedence rules of\n C make it equivalent to this:\n \n-@example\n+@smallexample\n a = (b & (c + sizeof (int) - 1)) / sizeof (int);\n-@end example\n+@end smallexample\n \n @noindent\n What we want is this:\n \n-@example\n+@smallexample\n a = ((b & c) + sizeof (int) - 1)) / sizeof (int);\n-@end example\n+@end smallexample\n \n @noindent\n Defining the macro as\n \n-@example\n+@smallexample\n #define ceil_div(x, y) ((x) + (y) - 1) / (y)\n-@end example\n+@end smallexample\n \n @noindent\n provides the desired result.\n@@ -2374,9 +2374,9 @@ ceil_div(1, 2)}.  That has the appearance of a C expression that would\n compute the size of the type of @code{ceil_div (1, 2)}, but in fact it\n means something very different.  Here is what it expands to:\n \n-@example\n+@smallexample\n sizeof ((1) + (2) - 1) / (2)\n-@end example\n+@end smallexample\n \n @noindent\n This would take the size of an integer and divide it by two.  The\n@@ -2386,9 +2386,9 @@ was intended to be inside.\n Parentheses around the entire macro definition prevent such problems.\n Here, then, is the recommended way to define @code{ceil_div}:\n \n-@example\n+@smallexample\n #define ceil_div(x, y) (((x) + (y) - 1) / (y))\n-@end example\n+@end smallexample\n \n @node Swallowing the Semicolon\n @subsection Swallowing the Semicolon\n@@ -2399,13 +2399,13 @@ statement.  Consider, for example, the following macro, that advances a\n pointer (the argument @code{p} says where to find it) across whitespace\n characters:\n \n-@example\n+@smallexample\n #define SKIP_SPACES(p, limit)  \\\n @{ char *lim = (limit);         \\\n   while (p < lim) @{            \\\n     if (*p++ != ' ') @{         \\\n       p--; break; @}@}@}\n-@end example\n+@end smallexample\n \n @noindent\n Here backslash-newline is used to split the macro definition, which must\n@@ -2422,11 +2422,11 @@ like a function call, writing a semicolon afterward, as in\n This can cause trouble before @code{else} statements, because the\n semicolon is actually a null statement.  Suppose you write\n \n-@example\n+@smallexample\n if (*p != 0)\n   SKIP_SPACES (p, lim);\n else @dots{}\n-@end example\n+@end smallexample\n \n @noindent\n The presence of two statements---the compound statement and a null\n@@ -2436,20 +2436,20 @@ makes invalid C code.\n The definition of the macro @code{SKIP_SPACES} can be altered to solve\n this problem, using a @code{do @dots{} while} statement.  Here is how:\n \n-@example\n+@smallexample\n #define SKIP_SPACES(p, limit)     \\\n do @{ char *lim = (limit);         \\\n      while (p < lim) @{            \\\n        if (*p++ != ' ') @{         \\\n          p--; break; @}@}@}          \\\n while (0)\n-@end example\n+@end smallexample\n \n Now @code{SKIP_SPACES (p, lim);} expands into\n \n-@example\n+@smallexample\n do @{@dots{}@} while (0);\n-@end example\n+@end smallexample\n \n @noindent\n which is one statement.  The loop executes exactly once; most compilers\n@@ -2462,23 +2462,23 @@ generate no extra code for it.\n @cindex unsafe macros\n Many C programs define a macro @code{min}, for ``minimum'', like this:\n \n-@example\n+@smallexample\n #define min(X, Y)  ((X) < (Y) ? (X) : (Y))\n-@end example\n+@end smallexample\n \n When you use this macro with an argument containing a side effect,\n as shown here,\n \n-@example\n+@smallexample\n next = min (x + y, foo (z));\n-@end example\n+@end smallexample\n \n @noindent\n it expands as follows:\n \n-@example\n+@smallexample\n next = ((x + y) < (foo (z)) ? (x + y) : (foo (z)));\n-@end example\n+@end smallexample\n \n @noindent\n where @code{x + y} has been substituted for @code{X} and @code{foo (z)}\n@@ -2496,12 +2496,12 @@ computes the value of @code{foo (z)} only once.  The C language offers\n no standard way to do this, but it can be done with GNU extensions as\n follows:\n \n-@example\n+@smallexample\n #define min(X, Y)                \\\n (@{ typeof (X) x_ = (X);          \\\n    typeof (Y) y_ = (Y);          \\\n    (x_ < y_) ? x_ : y_; @})\n-@end example\n+@end smallexample\n \n The @samp{(@{ @dots{} @})} notation produces a compound statement that\n acts as an expression.  Its value is the value of its last statement.\n@@ -2515,7 +2515,7 @@ careful when @emph{using} the macro @code{min}.  For example, you can\n calculate the value of @code{foo (z)}, save it in a variable, and use\n that variable in @code{min}:\n \n-@example\n+@smallexample\n @group\n #define min(X, Y)  ((X) < (Y) ? (X) : (Y))\n @dots{}\n@@ -2524,7 +2524,7 @@ that variable in @code{min}:\n   next = min (x + y, tem);\n @}\n @end group\n-@end example\n+@end smallexample\n \n @noindent\n (where we assume that @code{foo} returns type @code{int}).\n@@ -2540,9 +2540,9 @@ macro, it would produce an infinitely large expansion.  To prevent this,\n the self-reference is not considered a macro call.  It is passed into\n the preprocessor output unchanged.  Let's consider an example:\n \n-@example\n+@smallexample\n #define foo (4 + foo)\n-@end example\n+@end smallexample\n \n @noindent\n where @code{foo} is also a variable in your program.\n@@ -2565,9 +2565,9 @@ of the variable @code{foo}, whereas in fact the value is four greater.\n One common, useful use of self-reference is to create a macro which\n expands to itself.  If you write\n \n-@example\n+@smallexample\n #define EPERM EPERM\n-@end example\n+@end smallexample\n \n @noindent\n then the macro @code{EPERM} expands to @code{EPERM}.  Effectively, it is\n@@ -2581,23 +2581,23 @@ If a macro @code{x} expands to use a macro @code{y}, and the expansion of\n self-reference} of @code{x}.  @code{x} is not expanded in this case\n either.  Thus, if we have\n \n-@example\n+@smallexample\n #define x (4 + y)\n #define y (2 * x)\n-@end example\n+@end smallexample\n \n @noindent\n then @code{x} and @code{y} expand as follows:\n \n-@example\n+@smallexample\n @group\n x    @expansion{} (4 + y)\n      @expansion{} (4 + (2 * x))\n \n y    @expansion{} (2 * x)\n      @expansion{} (2 * (4 + y))\n @end group\n-@end example\n+@end smallexample\n \n @noindent\n Each macro is expanded when it appears in the definition of the other\n@@ -2658,12 +2658,12 @@ concatenate its expansion, you can do that by causing one macro to call\n another macro that does the stringification or concatenation.  For\n instance, if you have\n \n-@example\n+@smallexample\n #define AFTERX(x) X_ ## x\n #define XAFTERX(x) AFTERX(x)\n #define TABLESIZE 1024\n #define BUFSIZE TABLESIZE\n-@end example\n+@end smallexample\n \n then @code{AFTERX(BUFSIZE)} expands to @code{X_BUFSIZE}, and\n @code{XAFTERX(BUFSIZE)} expands to @code{X_1024}.  (Not to\n@@ -2675,11 +2675,11 @@ Macros used in arguments, whose expansions contain unshielded commas.\n This can cause a macro expanded on the second scan to be called with the\n wrong number of arguments.  Here is an example:\n \n-@example\n+@smallexample\n #define foo  a,b\n #define bar(x) lose(x)\n #define lose(x) (1 + (x))\n-@end example\n+@end smallexample\n \n We would like @code{bar(foo)} to turn into @code{(1 + (foo))}, which\n would then turn into @code{(1 + (a,b))}.  Instead, @code{bar(foo)}\n@@ -2688,11 +2688,11 @@ requires a single argument.  In this case, the problem is easily solved\n by the same parentheses that ought to be used to prevent misnesting of\n arithmetic operations:\n \n-@example\n+@smallexample\n #define foo (a,b)\n @exdent or\n #define bar(x) lose((x))\n-@end example\n+@end smallexample\n \n The extra pair of parentheses prevents the comma in @code{foo}'s\n definition from being interpreted as an argument separator.\n@@ -2711,13 +2711,13 @@ different to the line containing the argument causing the problem.\n \n Here is an example illustrating this:\n \n-@example\n+@smallexample\n #define ignore_second_arg(a,b,c) a; c\n \n ignore_second_arg (foo (),\n                    ignored (),\n                    syntax error);\n-@end example\n+@end smallexample\n \n @noindent\n The syntax error triggered by the tokens @code{syntax error} results in\n@@ -2818,15 +2818,15 @@ directive}: @samp{#if}, @samp{#ifdef} or @samp{#ifndef}.\n \n The simplest sort of conditional is\n \n-@example\n+@smallexample\n @group\n #ifdef @var{MACRO}\n \n @var{controlled text}\n \n #endif /* @var{MACRO} */\n @end group\n-@end example\n+@end smallexample\n \n @cindex conditional group\n This block is called a @dfn{conditional group}.  @var{controlled text}\n@@ -2899,15 +2899,15 @@ automated by a tool such as @command{autoconf}, or done by hand.\n The @samp{#if} directive allows you to test the value of an arithmetic\n expression, rather than the mere existence of one macro.  Its syntax is\n \n-@example\n+@smallexample\n @group\n #if @var{expression}\n \n @var{controlled text}\n \n #endif /* @var{expression} */\n @end group\n-@end example\n+@end smallexample\n \n @var{expression} is a C expression of integer type, subject to stringent\n restrictions.  It may contain\n@@ -2977,19 +2977,19 @@ defined MACRO}} is precisely equivalent to @code{@w{#ifdef MACRO}}.\n @code{defined} is useful when you wish to test more than one macro for\n existence at once.  For example,\n \n-@example\n+@smallexample\n #if defined (__vax__) || defined (__ns16000__)\n-@end example\n+@end smallexample\n \n @noindent\n would succeed if either of the names @code{__vax__} or\n @code{__ns16000__} is defined as a macro.\n \n Conditionals written like this:\n \n-@example\n+@smallexample\n #if defined BUFSIZE && BUFSIZE >= 1024\n-@end example\n+@end smallexample\n \n @noindent\n can generally be simplified to just @code{@w{#if BUFSIZE >= 1024}},\n@@ -3010,15 +3010,15 @@ The @samp{#else} directive can be added to a conditional to provide\n alternative text to be used if the condition fails.  This is what it\n looks like:\n \n-@example\n+@smallexample\n @group\n #if @var{expression}\n @var{text-if-true}\n #else /* Not @var{expression} */\n @var{text-if-false}\n #endif /* Not @var{expression} */\n @end group\n-@end example\n+@end smallexample\n \n @noindent\n If @var{expression} is nonzero, the @var{text-if-true} is included and\n@@ -3034,7 +3034,7 @@ You can use @samp{#else} with @samp{#ifdef} and @samp{#ifndef}, too.\n One common case of nested conditionals is used to check for more than two\n possible alternatives.  For example, you might have\n \n-@example\n+@smallexample\n #if X == 1\n @dots{}\n #else /* X != 1 */\n@@ -3044,20 +3044,20 @@ possible alternatives.  For example, you might have\n @dots{}\n #endif /* X != 2 */\n #endif /* X != 1 */\n-@end example\n+@end smallexample\n \n Another conditional directive, @samp{#elif}, allows this to be\n abbreviated as follows:\n \n-@example\n+@smallexample\n #if X == 1\n @dots{}\n #elif X == 2\n @dots{}\n #else /* X != 2 and X != 1*/\n @dots{}\n #endif /* X != 2 and X != 1*/\n-@end example\n+@end smallexample\n \n @samp{#elif} stands for ``else if''.  Like @samp{#else}, it goes in the\n middle of a conditional group and subdivides it; it does not require a\n@@ -3117,23 +3117,23 @@ combination of parameters which you know the program does not properly\n support.  For example, if you know that the program will not run\n properly on a VAX, you might write\n \n-@example\n+@smallexample\n @group\n #ifdef __vax__\n #error \"Won't work on VAXen.  See comments at get_last_object.\"\n #endif\n @end group\n-@end example\n+@end smallexample\n \n If you have several configuration parameters that must be set up by\n the installation in a consistent way, you can use conditionals to detect\n an inconsistency and report it with @samp{#error}.  For example,\n \n-@example\n+@smallexample\n #if !defined(UNALIGNED_INT_ASM_OP) && defined(DWARF2_DEBUGGING_INFO)\n #error \"DWARF2_DEBUGGING_INFO requires UNALIGNED_INT_ASM_OP.\"\n #endif\n-@end example\n+@end smallexample\n \n @findex #warning\n The directive @samp{#warning} is like @samp{#error}, but causes the\n@@ -3267,18 +3267,18 @@ literal.  It is destringized, by replacing all @samp{\\\\} with a single\n processed as if it had appeared as the right hand side of a\n @samp{#pragma} directive.  For example,\n \n-@example\n+@smallexample\n _Pragma (\"GCC dependency \\\"parse.y\\\"\")\n-@end example\n+@end smallexample\n \n @noindent\n has the same effect as @code{#pragma GCC dependency \"parse.y\"}.  The\n same effect could be achieved using macros, for example\n \n-@example\n+@smallexample\n #define DO_PRAGMA(x) _Pragma (#x)\n DO_PRAGMA (GCC dependency \"parse.y\")\n-@end example\n+@end smallexample\n \n The standard is unclear on where a @code{_Pragma} operator can appear.\n The preprocessor does not accept it within a preprocessing conditional\n@@ -3300,10 +3300,10 @@ other file is searched for using the normal include search path.\n Optional trailing text can be used to give more information in the\n warning message.\n \n-@example\n+@smallexample\n #pragma GCC dependency \"parse.y\"\n #pragma GCC dependency \"/usr/include/time.h\" rerun fixincludes\n-@end example\n+@end smallexample\n \n @item #pragma GCC poison\n Sometimes, there is an identifier that you want to remove completely\n@@ -3313,10 +3313,10 @@ enforce this, you can @dfn{poison} the identifier with this pragma.\n poison.  If any of those identifiers appears anywhere in the source\n after the directive, it is a hard error.  For example,\n \n-@example\n+@smallexample\n #pragma GCC poison printf sprintf fprintf\n sprintf(some_string, \"hello\");\n-@end example\n+@end smallexample\n \n @noindent\n will produce an error.\n@@ -3328,11 +3328,11 @@ about system headers defining macros that use it.\n \n For example,\n \n-@example\n+@smallexample\n #define strrchr rindex\n #pragma GCC poison rindex\n strrchr(some_string, 'h');\n-@end example\n+@end smallexample\n \n @noindent\n will not produce an error.\n@@ -3401,9 +3401,9 @@ necessary to prevent an accidental token paste.\n Source file name and line number information is conveyed by lines\n of the form\n \n-@example\n+@smallexample\n # @var{linenum} @var{filename} @var{flags}\n-@end example\n+@end smallexample\n \n @noindent\n These are called @dfn{linemarkers}.  They are inserted as needed into\n@@ -3924,9 +3924,9 @@ all.\n @cindex predicates\n An assertion looks like this:\n \n-@example\n+@smallexample\n #@var{predicate} (@var{answer})\n-@end example\n+@end smallexample\n \n @noindent\n @var{predicate} must be a single identifier.  @var{answer} can be any\n@@ -3942,26 +3942,26 @@ To test an assertion, you write it in an @samp{#if}.  For example, this\n conditional succeeds if either @code{vax} or @code{ns16000} has been\n asserted as an answer for @code{machine}.\n \n-@example\n+@smallexample\n #if #machine (vax) || #machine (ns16000)\n-@end example\n+@end smallexample\n \n @noindent\n You can test whether @emph{any} answer is asserted for a predicate by\n omitting the answer in the conditional:\n \n-@example\n+@smallexample\n #if #machine\n-@end example\n+@end smallexample\n \n @findex #assert\n Assertions are made with the @samp{#assert} directive.  Its sole\n argument is the assertion to make, without the leading @samp{#} that\n identifies assertions in conditionals.\n \n-@example\n+@smallexample\n #assert @var{predicate} (@var{answer})\n-@end example\n+@end smallexample\n \n @noindent\n You may make several assertions with the same predicate and different\n@@ -3977,9 +3977,9 @@ answer which was specified on the @samp{#unassert} line; other answers\n for that predicate remain true.  You can cancel an entire predicate by\n leaving out the answer:\n \n-@example\n+@smallexample\n #unassert @var{predicate}\n-@end example\n+@end smallexample\n \n @noindent\n In either form, if no such assertion has been made, @samp{#unassert} has"}, {"sha": "653e2e7de2955e2dbd2c8969f2e5eac869712ee7", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33", "patch": "@@ -1,4 +1,4 @@\n-@c Copyright (c) 1999, 2000, 2001, 2002, 2003\n+@c Copyright (c) 1999, 2000, 2001, 2002, 2003, 2004\n @c Free Software Foundation, Inc.\n @c This is part of the CPP and GCC manuals.\n @c For copying conditions, see the file gcc.texi.\n@@ -255,11 +255,11 @@ files without updating the @file{Makefile} to match.\n \n This is typical output:\n \n-@example\n+@smallexample\n test.o: test.c test.h\n \n test.h:\n-@end example\n+@end smallexample\n \n @item -MT @var{target}\n @opindex MT\n@@ -275,19 +275,19 @@ argument to @option{-MT}, or use multiple @option{-MT} options.\n \n For example, @option{@w{-MT '$(objpfx)foo.o'}} might give\n \n-@example\n+@smallexample\n $(objpfx)foo.o: foo.c\n-@end example\n+@end smallexample\n \n @item -MQ @var{target}\n @opindex MQ\n \n Same as @option{-MT}, but it quotes any characters which are special to\n Make.  @option{@w{-MQ '$(objpfx)foo.o'}} gives\n \n-@example\n+@smallexample\n $$(objpfx)foo.o: foo.c\n-@end example\n+@end smallexample\n \n The default target is automatically quoted, as if it were given with\n @option{-MQ}.\n@@ -563,9 +563,9 @@ preprocessor, including predefined macros.  This gives you a way of\n finding out what is predefined in your version of the preprocessor.\n Assuming you have no file @file{foo.h}, the command\n \n-@example\n+@smallexample\n touch foo.h; cpp -dM foo.h\n-@end example\n+@end smallexample\n \n @noindent\n will show all the predefined macros."}, {"sha": "f6dd7b9c928a4805e81a67f1efecf4a38eb51975", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 254, "deletions": 254, "changes": 508, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33", "patch": "@@ -494,12 +494,12 @@ Recall that a compound statement is a sequence of statements surrounded\n by braces; in this construct, parentheses go around the braces.  For\n example:\n \n-@example\n+@smallexample\n (@{ int y = foo (); int z;\n    if (y > 0) z = y;\n    else z = - y;\n    z; @})\n-@end example\n+@end smallexample\n \n @noindent\n is a valid (though slightly more complex than necessary) expression\n@@ -516,9 +516,9 @@ that they evaluate each operand exactly once).  For example, the\n ``maximum'' function is commonly defined as a macro in standard C as\n follows:\n \n-@example\n+@smallexample\n #define max(a,b) ((a) > (b) ? (a) : (b))\n-@end example\n+@end smallexample\n \n @noindent\n @cindex side effects, macro argument\n@@ -527,10 +527,10 @@ results if the operand has side effects.  In GNU C, if you know the\n type of the operands (here let's assume @code{int}), you can define\n the macro safely as follows:\n \n-@example\n+@smallexample\n #define maxint(a,b) \\\n   (@{int _a = (a), _b = (b); _a > _b ? _a : _b; @})\n-@end example\n+@end smallexample\n \n Embedded statements are not allowed in constant expressions, such as\n the value of an enumeration constant, the width of a bit-field, or\n@@ -598,16 +598,16 @@ address) within the block in which it was declared.\n \n A local label declaration looks like this:\n \n-@example\n+@smallexample\n __label__ @var{label};\n-@end example\n+@end smallexample\n \n @noindent\n or\n \n-@example\n+@smallexample\n __label__ @var{label1}, @var{label2}, /* @r{@dots{}} */;\n-@end example\n+@end smallexample\n \n Local label declarations must come at the beginning of the block,\n before any ordinary declarations or statements.\n@@ -623,7 +623,7 @@ cannot be used: if the macro can be expanded several times in one\n function, the label will be multiply defined in that function.  A\n local label avoids this problem.  For example:\n \n-@example\n+@smallexample\n #define SEARCH(value, array, target)              \\\n do @{                                              \\\n   __label__ found;                                \\\n@@ -638,11 +638,11 @@ do @{                                              \\\n   (value) = -1;                                   \\\n  found:;                                          \\\n @} while (0)\n-@end example\n+@end smallexample\n \n This could also be written using a statement-expression:\n \n-@example\n+@smallexample\n #define SEARCH(array, target)                     \\\n (@{                                                \\\n   __label__ found;                                \\\n@@ -658,7 +658,7 @@ This could also be written using a statement-expression:\n  found:                                           \\\n   value;                                          \\\n @})\n-@end example\n+@end smallexample\n \n Local label declarations also make the labels they declare visible to\n nested functions, if there are any.  @xref{Nested Functions}, for details.\n@@ -675,37 +675,37 @@ You can get the address of a label defined in the current function\n value has type @code{void *}.  This value is a constant and can be used\n wherever a constant of that type is valid.  For example:\n \n-@example\n+@smallexample\n void *ptr;\n /* @r{@dots{}} */\n ptr = &&foo;\n-@end example\n+@end smallexample\n \n To use these values, you need to be able to jump to one.  This is done\n with the computed goto statement@footnote{The analogous feature in\n Fortran is called an assigned goto, but that name seems inappropriate in\n C, where one can do more than simply store label addresses in label\n variables.}, @code{goto *@var{exp};}.  For example,\n \n-@example\n+@smallexample\n goto *ptr;\n-@end example\n+@end smallexample\n \n @noindent\n Any expression of type @code{void *} is allowed.\n \n One way of using these constants is in initializing a static array that\n will serve as a jump table:\n \n-@example\n+@smallexample\n static void *array[] = @{ &&foo, &&bar, &&hack @};\n-@end example\n+@end smallexample\n \n Then you can select a label with indexing, like this:\n \n-@example\n+@smallexample\n goto *array[i];\n-@end example\n+@end smallexample\n \n @noindent\n Note that this does not check whether the subscript is in bounds---array\n@@ -727,11 +727,11 @@ never pass it as an argument.\n \n An alternate way to write the above example is\n \n-@example\n+@smallexample\n static const int array[] = @{ &&foo - &&foo, &&bar - &&foo,\n                              &&hack - &&foo @};\n goto *(&&foo + array[i]);\n-@end example\n+@end smallexample\n \n @noindent\n This is more friendly to code living in shared libraries, as it reduces\n@@ -749,7 +749,7 @@ A @dfn{nested function} is a function defined inside another function.\n name is local to the block where it is defined.  For example, here we\n define a nested function named @code{square}, and call it twice:\n \n-@example\n+@smallexample\n @group\n foo (double a, double b)\n @{\n@@ -758,14 +758,14 @@ foo (double a, double b)\n   return square (a) + square (b);\n @}\n @end group\n-@end example\n+@end smallexample\n \n The nested function can access all the variables of the containing\n function that are visible at the point of its definition.  This is\n called @dfn{lexical scoping}.  For example, here we show a nested\n function which uses an inherited variable named @code{offset}:\n \n-@example\n+@smallexample\n @group\n bar (int *array, int offset, int size)\n @{\n@@ -777,7 +777,7 @@ bar (int *array, int offset, int size)\n     /* @r{@dots{}} */ access (array, i) /* @r{@dots{}} */\n @}\n @end group\n-@end example\n+@end smallexample\n \n Nested function definitions are permitted within functions in the places\n where variable definitions are allowed; that is, in any block, before\n@@ -786,15 +786,15 @@ the first statement in the block.\n It is possible to call the nested function from outside the scope of its\n name by storing its address or passing the address to another function:\n \n-@example\n+@smallexample\n hack (int *array, int size)\n @{\n   void store (int index, int value)\n     @{ array[index] = value; @}\n \n   intermediate (store, size);\n @}\n-@end example\n+@end smallexample\n \n Here, the function @code{intermediate} receives the address of\n @code{store} as an argument.  If @code{intermediate} calls @code{store},\n@@ -822,7 +822,7 @@ function (@pxref{Local Labels}).  Such a jump returns instantly to the\n containing function, exiting the nested function which did the\n @code{goto} and any intermediate functions as well.  Here is an example:\n \n-@example\n+@smallexample\n @group\n bar (int *array, int offset, int size)\n @{\n@@ -846,14 +846,14 @@ bar (int *array, int offset, int size)\n   return -1;\n @}\n @end group\n-@end example\n+@end smallexample\n \n A nested function always has internal linkage.  Declaring one with\n @code{extern} is erroneous.  If you need to declare the nested function\n before its definition, use @code{auto} (which is otherwise meaningless\n for function declarations).\n \n-@example\n+@smallexample\n bar (int *array, int offset, int size)\n @{\n   __label__ failure;\n@@ -867,7 +867,7 @@ bar (int *array, int offset, int size)\n     @}\n   /* @r{@dots{}} */\n @}\n-@end example\n+@end smallexample\n \n @node Constructing Calls\n @section Constructing Function Calls\n@@ -938,19 +938,19 @@ construct acts semantically like a type name defined with @code{typedef}.\n There are two ways of writing the argument to @code{typeof}: with an\n expression or with a type.  Here is an example with an expression:\n \n-@example\n+@smallexample\n typeof (x[0](1))\n-@end example\n+@end smallexample\n \n @noindent\n This assumes that @code{x} is an array of pointers to functions;\n the type described is that of the values of the functions.\n \n Here is an example with a typename as the argument:\n \n-@example\n+@smallexample\n typeof (int *)\n-@end example\n+@end smallexample\n \n @noindent\n Here the type described is that of pointers to @code{int}.\n@@ -968,12 +968,12 @@ statements-within-expressions feature.  Here is how the two together can\n be used to define a safe ``maximum'' macro that operates on any\n arithmetic type and evaluates each of its arguments exactly once:\n \n-@example\n+@smallexample\n #define max(a,b) \\\n   (@{ typeof (a) _a = (a); \\\n       typeof (b) _b = (b); \\\n     _a > _b ? _a : _b; @})\n-@end example\n+@end smallexample\n \n @cindex underscores in variables in macros\n @cindex @samp{_} in variables in macros\n@@ -995,45 +995,45 @@ Some more examples of the use of @code{typeof}:\n @item\n This declares @code{y} with the type of what @code{x} points to.\n \n-@example\n+@smallexample\n typeof (*x) y;\n-@end example\n+@end smallexample\n \n @item\n This declares @code{y} as an array of such values.\n \n-@example\n+@smallexample\n typeof (*x) y[4];\n-@end example\n+@end smallexample\n \n @item\n This declares @code{y} as an array of pointers to characters:\n \n-@example\n+@smallexample\n typeof (typeof (char *)[4]) y;\n-@end example\n+@end smallexample\n \n @noindent\n It is equivalent to the following traditional C declaration:\n \n-@example\n+@smallexample\n char *y[4];\n-@end example\n+@end smallexample\n \n To see the meaning of the declaration using @code{typeof}, and why it\n might be a useful way to write, let's rewrite it with these macros:\n \n-@example\n+@smallexample\n #define pointer(T)  typeof(T *)\n #define array(T, N) typeof(T [N])\n-@end example\n+@end smallexample\n \n @noindent\n Now the declaration can be rewritten this way:\n \n-@example\n+@smallexample\n array (pointer (char), 4) y;\n-@end example\n+@end smallexample\n \n @noindent\n Thus, @code{array (pointer (char), 4)} is the type of arrays of 4\n@@ -1043,19 +1043,19 @@ pointers to @code{char}.\n @emph{Compatibility Note:} In addition to @code{typeof}, GCC 2 supported\n a more limited extension which permitted one to write\n \n-@example\n+@smallexample\n typedef @var{T} = @var{expr};\n-@end example\n+@end smallexample\n \n @noindent\n with the effect of declaring @var{T} to have the type of the expression\n @var{expr}.  This extension does not work with GCC 3 (versions between\n 3.0 and 3.2 will crash; 3.2.1 and later give an error).  Code which\n relies on it should be rewritten to use @code{typeof}:\n \n-@example\n+@smallexample\n typedef typeof(@var{expr}) @var{T};\n-@end example\n+@end smallexample\n \n @noindent\n This will work with all versions of GCC@.\n@@ -1085,27 +1085,27 @@ For example, a compound expression can be assigned, provided the last\n expression in the sequence is an lvalue.  These two expressions are\n equivalent:\n \n-@example\n+@smallexample\n (a, b) += 5\n a, (b += 5)\n-@end example\n+@end smallexample\n \n Similarly, the address of the compound expression can be taken.  These two\n expressions are equivalent:\n \n-@example\n+@smallexample\n &(a, b)\n a, &b\n-@end example\n+@end smallexample\n \n A conditional expression is a valid lvalue if its type is not void and the\n true and false branches are both valid lvalues.  For example, these two\n expressions are equivalent:\n \n-@example\n+@smallexample\n (a ? b : c) = 5\n (a ? b = 5 : (c = 5))\n-@end example\n+@end smallexample\n \n A cast is a valid lvalue if its operand is an lvalue.  This extension\n is deprecated.  A simple\n@@ -1116,30 +1116,30 @@ converted back to the specified type to become the value of the\n assignment.  Thus, if @code{a} has type @code{char *}, the following two\n expressions are equivalent:\n \n-@example\n+@smallexample\n (int)a = 5\n (int)(a = (char *)(int)5)\n-@end example\n+@end smallexample\n \n An assignment-with-arithmetic operation such as @samp{+=} applied to a cast\n performs the arithmetic using the type resulting from the cast, and then\n continues as in the previous case.  Therefore, these two expressions are\n equivalent:\n \n-@example\n+@smallexample\n (int)a += 5\n (int)(a = (char *)(int) ((int)a + 5))\n-@end example\n+@end smallexample\n \n You cannot take the address of an lvalue cast, because the use of its\n address would not work out coherently.  Suppose that @code{&(int)f} were\n permitted, where @code{f} has type @code{float}.  Then the following\n statement would try to store an integer bit-pattern where a floating\n point number belongs:\n \n-@example\n+@smallexample\n *&(int)f = 1;\n-@end example\n+@end smallexample\n \n This is quite different from what @code{(int)f = 1} would do---that\n would convert 1 to floating point and store it.  Rather than cause this\n@@ -1162,19 +1162,19 @@ expression.\n \n Therefore, the expression\n \n-@example\n+@smallexample\n x ? : y\n-@end example\n+@end smallexample\n \n @noindent\n has the value of @code{x} if that is nonzero; otherwise, the value of\n @code{y}.\n \n This example is perfectly equivalent to\n \n-@example\n+@smallexample\n x ? x : y\n-@end example\n+@end smallexample\n \n @cindex side effect in ?:\n @cindex ?: side effect\n@@ -1312,7 +1312,7 @@ Zero-length arrays are allowed in GNU C@.  They are very useful as the\n last element of a structure which is really a header for a variable-length\n object:\n \n-@example\n+@smallexample\n struct line @{\n   int length;\n   char contents[0];\n@@ -1321,7 +1321,7 @@ struct line @{\n struct line *thisline = (struct line *)\n   malloc (sizeof (struct line) + this_length);\n thisline->length = this_length;\n-@end example\n+@end smallexample\n \n In ISO C90, you would have to give @code{contents} a length of 1, which\n means either you waste space or complicate the argument to @code{malloc}.\n@@ -1365,15 +1365,15 @@ structure followed by an array of sufficient size to contain the data.\n I.e.@: in the following, @code{f1} is constructed as if it were declared\n like @code{f2}.\n \n-@example\n+@smallexample\n struct f1 @{\n   int x; int y[];\n @} f1 = @{ 1, @{ 2, 3, 4 @} @};\n \n struct f2 @{\n   struct f1 f1; int data[3];\n @} f2 = @{ @{ 1 @}, @{ 2, 3, 4 @} @};\n-@end example\n+@end smallexample\n \n @noindent\n The convenience of this extension is that @code{f1} has the desired\n@@ -1389,15 +1389,15 @@ with initialization of deeply nested arrays, we simply disallow any\n non-empty initialization except when the structure is the top-level\n object.  For example:\n \n-@example\n+@smallexample\n struct foo @{ int x; int y[]; @};\n struct bar @{ struct foo z; @};\n \n struct foo a = @{ 1, @{ 2, 3, 4 @} @};        // @r{Valid.}\n struct bar b = @{ @{ 1, @{ 2, 3, 4 @} @} @};    // @r{Invalid.}\n struct bar c = @{ @{ 1, @{ @} @} @};            // @r{Valid.}\n struct foo d[1] = @{ @{ 1 @{ 2, 3, 4 @} @} @};  // @r{Invalid.}\n-@end example\n+@end smallexample\n \n @node Empty Structures\n @section Structures With No Members\n@@ -1406,10 +1406,10 @@ struct foo d[1] = @{ @{ 1 @{ 2, 3, 4 @} @} @};  // @r{Invalid.}\n \n GCC permits a C structure to have no members:\n \n-@example\n+@smallexample\n struct empty @{\n @};\n-@end example\n+@end smallexample\n \n The structure will have size zero.  In C++, empty structures are part\n of the language.  G++ treats empty structures as if they had a single\n@@ -1430,7 +1430,7 @@ a constant expression.  The storage is allocated at the point of\n declaration and deallocated when the brace-level is exited.  For\n example:\n \n-@example\n+@smallexample\n FILE *\n concat_fopen (char *s1, char *s2, char *mode)\n @{\n@@ -1439,7 +1439,7 @@ concat_fopen (char *s1, char *s2, char *mode)\n   strcat (str, s2);\n   return fopen (str, mode);\n @}\n-@end example\n+@end smallexample\n \n @cindex scope of a variable length array\n @cindex variable-length array scope\n@@ -1463,13 +1463,13 @@ will also deallocate anything more recently allocated with @code{alloca}.)\n \n You can also use variable-length arrays as arguments to functions:\n \n-@example\n+@smallexample\n struct entry\n tester (int len, char data[len][len])\n @{\n   /* @r{@dots{}} */\n @}\n-@end example\n+@end smallexample\n \n The length of an array is computed once when the storage is allocated\n and is remembered for the scope of the array in case you access it with\n@@ -1478,13 +1478,13 @@ and is remembered for the scope of the array in case you access it with\n If you want to pass the array first and the length afterward, you can\n use a forward declaration in the parameter list---another GNU extension.\n \n-@example\n+@smallexample\n struct entry\n tester (int len; char data[len][len], int len)\n @{\n   /* @r{@dots{}} */\n @}\n-@end example\n+@end smallexample\n \n @cindex parameter forward declaration\n The @samp{int len} before the semicolon is a @dfn{parameter forward\n@@ -1524,9 +1524,9 @@ GCC has long supported variadic macros, and used a different syntax that\n allowed you to give a name to the variable arguments just like any other\n argument.  Here is an example:\n \n-@example\n+@smallexample\n #define debug(format, args...) fprintf (stderr, format, args)\n-@end example\n+@end smallexample\n \n This is in all ways equivalent to the ISO C example above, but arguably\n more readable and descriptive.\n@@ -1539,9 +1539,9 @@ entirely; but you are allowed to pass an empty argument.  For example,\n this invocation is invalid in ISO C, because there is no comma after\n the string:\n \n-@example\n+@smallexample\n debug (\"A message\")\n-@end example\n+@end smallexample\n \n GNU CPP permits you to completely omit the variable arguments in this\n way.  In the above examples, the compiler would complain, though since\n@@ -1592,7 +1592,7 @@ subscripted in C89 mode, though otherwise they do not decay to\n pointers outside C99 mode.  For example,\n this is valid in GNU C though not valid in C89:\n \n-@example\n+@smallexample\n @group\n struct foo @{int a[4];@};\n \n@@ -1603,7 +1603,7 @@ bar (int index)\n   return f().a[index];\n @}\n @end group\n-@end example\n+@end smallexample\n \n @node Pointer Arith\n @section Arithmetic on @code{void}- and Function-Pointers\n@@ -1632,13 +1632,13 @@ As in standard C++ and ISO C99, the elements of an aggregate initializer for an\n automatic variable are not required to be constant expressions in GNU C@.\n Here is an example of an initializer with run-time varying elements:\n \n-@example\n+@smallexample\n foo (float f, float g)\n @{\n   float beat_freqs[2] = @{ f-g, f+g @};\n   /* @r{@dots{}} */\n @}\n-@end example\n+@end smallexample\n \n @node Compound Literals\n @section Compound Literals\n@@ -1658,36 +1658,36 @@ compound literals in C89 mode and in C++.\n Usually, the specified type is a structure.  Assume that\n @code{struct foo} and @code{structure} are declared as shown:\n \n-@example\n+@smallexample\n struct foo @{int a; char b[2];@} structure;\n-@end example\n+@end smallexample\n \n @noindent\n Here is an example of constructing a @code{struct foo} with a compound literal:\n \n-@example\n+@smallexample\n structure = ((struct foo) @{x + y, 'a', 0@});\n-@end example\n+@end smallexample\n \n @noindent\n This is equivalent to writing the following:\n \n-@example\n+@smallexample\n @{\n   struct foo temp = @{x + y, 'a', 0@};\n   structure = temp;\n @}\n-@end example\n+@end smallexample\n \n You can also construct an array.  If all the elements of the compound literal\n are (made up of) simple constant expressions, suitable for use in\n initializers of objects of static storage duration, then the compound\n literal can be coerced to a pointer to its first element and used in\n such an initializer, as shown here:\n \n-@example\n+@smallexample\n char **foo = (char *[]) @{ \"x\", \"y\", \"z\" @};\n-@end example\n+@end smallexample\n \n Compound literals for scalar types and union types are is\n also allowed, but then the compound literal is equivalent\n@@ -1702,19 +1702,19 @@ The initializer list of the compound literal must be constant.\n If the object being initialized has array type of unknown size, the size is\n determined by compound literal size.\n \n-@example\n+@smallexample\n static struct foo x = (struct foo) @{1, 'a', 'b'@};\n static int y[] = (int []) @{1, 2, 3@};\n static int z[] = (int [3]) @{1@};\n-@end example\n+@end smallexample\n \n @noindent\n The above lines are equivalent to the following:\n-@example\n+@smallexample\n static struct foo x = @{1, 'a', 'b'@};\n static int y[] = @{1, 2, 3@};\n static int z[] = @{1, 0, 0@};\n-@end example\n+@end smallexample\n \n @node Designated Inits\n @section Designated Initializers\n@@ -1735,16 +1735,16 @@ implemented in GNU C++.\n To specify an array index, write\n @samp{[@var{index}] =} before the element value.  For example,\n \n-@example\n+@smallexample\n int a[6] = @{ [4] = 29, [2] = 15 @};\n-@end example\n+@end smallexample\n \n @noindent\n is equivalent to\n \n-@example\n+@smallexample\n int a[6] = @{ 0, 0, 15, 0, 29, 0 @};\n-@end example\n+@end smallexample\n \n @noindent\n The index values must be constant expressions, even if the array being\n@@ -1758,9 +1758,9 @@ To initialize a range of elements to the same value, write\n @samp{[@var{first} ... @var{last}] = @var{value}}.  This is a GNU\n extension.  For example,\n \n-@example\n+@smallexample\n int widths[] = @{ [0 ... 9] = 1, [10 ... 99] = 2, [100] = 3 @};\n-@end example\n+@end smallexample\n \n @noindent\n If the value in it has side-effects, the side-effects will happen only once,\n@@ -1774,42 +1774,42 @@ In a structure initializer, specify the name of a field to initialize\n with @samp{.@var{fieldname} =} before the element value.  For example,\n given the following structure,\n \n-@example\n+@smallexample\n struct point @{ int x, y; @};\n-@end example\n+@end smallexample\n \n @noindent\n the following initialization\n \n-@example\n+@smallexample\n struct point p = @{ .y = yvalue, .x = xvalue @};\n-@end example\n+@end smallexample\n \n @noindent\n is equivalent to\n \n-@example\n+@smallexample\n struct point p = @{ xvalue, yvalue @};\n-@end example\n+@end smallexample\n \n Another syntax which has the same meaning, obsolete since GCC 2.5, is\n @samp{@var{fieldname}:}, as shown here:\n \n-@example\n+@smallexample\n struct point p = @{ y: yvalue, x: xvalue @};\n-@end example\n+@end smallexample\n \n @cindex designators\n The @samp{[@var{index}]} or @samp{.@var{fieldname}} is known as a\n @dfn{designator}.  You can also use a designator (or the obsolete colon\n syntax) when initializing a union, to specify which element of the union\n should be used.  For example,\n \n-@example\n+@smallexample\n union foo @{ int i; double d; @};\n \n union foo f = @{ .d = 4 @};\n-@end example\n+@end smallexample\n \n @noindent\n will convert 4 to a @code{double} to store it in the union using\n@@ -1822,26 +1822,26 @@ initialization of successive elements.  Each initializer element that\n does not have a designator applies to the next consecutive element of the\n array or structure.  For example,\n \n-@example\n+@smallexample\n int a[6] = @{ [1] = v1, v2, [4] = v4 @};\n-@end example\n+@end smallexample\n \n @noindent\n is equivalent to\n \n-@example\n+@smallexample\n int a[6] = @{ 0, v1, v2, 0, v4, 0 @};\n-@end example\n+@end smallexample\n \n Labeling the elements of an array initializer is especially useful\n when the indices are characters or belong to an @code{enum} type.\n For example:\n \n-@example\n+@smallexample\n int whitespace[256]\n   = @{ [' '] = 1, ['\\t'] = 1, ['\\h'] = 1,\n       ['\\f'] = 1, ['\\n'] = 1, ['\\r'] = 1 @};\n-@end example\n+@end smallexample\n \n @cindex designator lists\n You can also write a series of @samp{.@var{fieldname}} and\n@@ -1868,34 +1868,34 @@ Currently, gcc will discard them and issue a warning.\n You can specify a range of consecutive values in a single @code{case} label,\n like this:\n \n-@example\n+@smallexample\n case @var{low} ... @var{high}:\n-@end example\n+@end smallexample\n \n @noindent\n This has the same effect as the proper number of individual @code{case}\n labels, one for each integer value from @var{low} to @var{high}, inclusive.\n \n This feature is especially useful for ranges of ASCII character codes:\n \n-@example\n+@smallexample\n case 'A' ... 'Z':\n-@end example\n+@end smallexample\n \n @strong{Be careful:} Write spaces around the @code{...}, for otherwise\n it may be parsed wrong when you use it with integer values.  For example,\n write this:\n \n-@example\n+@smallexample\n case 1 ... 5:\n-@end example\n+@end smallexample\n \n @noindent\n rather than this:\n \n-@example\n+@smallexample\n case 1...5:\n-@end example\n+@end smallexample\n \n @node Cast to Union\n @section Cast to a Union Type\n@@ -1911,32 +1911,32 @@ normal casts.  (@xref{Compound Literals}.)\n The types that may be cast to the union type are those of the members\n of the union.  Thus, given the following union and variables:\n \n-@example\n+@smallexample\n union foo @{ int i; double d; @};\n int x;\n double y;\n-@end example\n+@end smallexample\n \n @noindent\n both @code{x} and @code{y} can be cast to type @code{union foo}.\n \n Using the cast as the right-hand side of an assignment to a variable of\n union type is equivalent to storing in a member of the union:\n \n-@example\n+@smallexample\n union foo u;\n /* @r{@dots{}} */\n u = (union foo) x  @equiv{}  u.i = x\n u = (union foo) y  @equiv{}  u.d = y\n-@end example\n+@end smallexample\n \n You can also use the union cast as a function argument:\n \n-@example\n+@smallexample\n void hack (union foo);\n /* @r{@dots{}} */\n hack ((union foo) x);\n-@end example\n+@end smallexample\n \n @node Mixed Declarations\n @section Mixed Declarations and Code\n@@ -1948,12 +1948,12 @@ ISO C99 and ISO C++ allow declarations and code to be freely mixed\n within compound statements.  As an extension, GCC also allows this in\n C89 mode.  For example, you could do:\n \n-@example\n+@smallexample\n int i;\n /* @r{@dots{}} */\n i++;\n int j = i + 2;\n-@end example\n+@end smallexample\n \n Each identifier is visible from where it is declared until the end of\n the enclosing block.\n@@ -2974,7 +2974,7 @@ to the function type.\n GNU C extends ISO C to allow a function prototype to override a later\n old-style non-prototype definition.  Consider the following example:\n \n-@example\n+@smallexample\n /* @r{Use prototypes unless the compiler is old-fashioned.}  */\n #ifdef __STDC__\n #define P(x) x\n@@ -2992,7 +2992,7 @@ isroot (x)   /* ??? lossage here ??? */\n @{\n   return x == 0;\n @}\n-@end example\n+@end smallexample\n \n Suppose the type @code{uid_t} happens to be @code{short}.  ISO C does\n not allow this example, because subword arguments in old-style\n@@ -3010,15 +3010,15 @@ by a later old-style definition if the former type is the same as the\n latter type before promotion.  Thus in GNU C the above example is\n equivalent to the following:\n \n-@example\n+@smallexample\n int isroot (uid_t);\n \n int\n isroot (uid_t x)\n @{\n   return x == 0;\n @}\n-@end example\n+@end smallexample\n \n @noindent\n GNU C++ does not support old-style function definitions, so this\n@@ -3079,9 +3079,9 @@ any minimum alignment specified with GCC's @code{__attribute__}\n extension (@pxref{Variable Attributes}).  For example, after this\n declaration:\n \n-@example\n+@smallexample\n struct foo @{ int x; char y; @} foo1;\n-@end example\n+@end smallexample\n \n @noindent\n the value of @code{__alignof__ (foo1.y)} is 1, even though its actual\n@@ -3241,13 +3241,13 @@ and one bit for a field, unless you specify a larger value with the\n Here is a structure in which the field @code{x} is packed, so that it\n immediately follows @code{a}:\n \n-@example\n+@smallexample\n struct foo\n @{\n   char a;\n   int x[2] __attribute__ ((packed));\n @};\n-@end example\n+@end smallexample\n \n @item section (\"@var{section-name}\")\n @cindex @code{section} variable attribute\n@@ -3622,19 +3622,19 @@ This interface allows either @code{int *} or @code{union wait *}\n arguments to be passed, using the @code{int *} calling convention.\n The program can call @code{wait} with arguments of either type:\n \n-@example\n+@smallexample\n int w1 () @{ int w; return wait (&w); @}\n int w2 () @{ union wait w; return wait (&w); @}\n-@end example\n+@end smallexample\n \n With this interface, @code{wait}'s implementation might look like this:\n \n-@example\n+@smallexample\n pid_t wait (wait_status_ptr_t p)\n @{\n   return waitpid (-1, p.__ip, 0);\n @}\n-@end example\n+@end smallexample\n \n @item unused\n When attached to a type (including a @code{union} or a @code{struct}),\n@@ -3754,13 +3754,13 @@ the ISO C99 standard requires.\n To declare a function inline, use the @code{inline} keyword in its\n declaration, like this:\n \n-@example\n+@smallexample\n inline int\n inc (int *a)\n @{\n   (*a)++;\n @}\n-@end example\n+@end smallexample\n \n (If you are writing a header file to be included in ISO C programs, write\n @code{__inline__} instead of @code{inline}.  @xref{Alternate Keywords}.)\n@@ -3835,10 +3835,10 @@ that will implement the C99 semantics, though it does not do so yet.)\n GCC does not inline any functions when not optimizing unless you specify\n the @samp{always_inline} attribute for the function, like this:\n \n-@example\n+@smallexample\n /* Prototype.  */\n inline void foo (const char) __attribute__((always_inline));\n-@end example\n+@end smallexample\n \n @node Extended Asm\n @section Assembler Instructions with C Expression Operands\n@@ -3858,9 +3858,9 @@ each operand.\n \n For example, here is how to use the 68881's @code{fsinx} instruction:\n \n-@example\n+@smallexample\n asm (\"fsinx %1,%0\" : \"=f\" (result) : \"f\" (angle));\n-@end example\n+@end smallexample\n \n @noindent\n Here @code{angle} is the C expression for the input operand while\n@@ -3890,11 +3890,11 @@ assembler code using @code{%[@var{name}]} instead of a percentage sign\n followed by the operand number.  Using named operands the above example\n could look like:\n \n-@example\n+@smallexample\n asm (\"fsinx %[angle],%[output]\"\n      : [output] \"=f\" (result)\n      : [angle] \"f\" (angle));\n-@end example\n+@end smallexample\n \n @noindent\n Note that the symbolic operand names have no relation whatsoever to\n@@ -3932,9 +3932,9 @@ different expressions.  For example, here we write the (fictitious)\n @samp{combine} instruction with @code{bar} as its read-only source\n operand and @code{foo} as its read-write destination:\n \n-@example\n+@smallexample\n asm (\"combine %2,%0\" : \"=r\" (foo) : \"0\" (foo), \"g\" (bar));\n-@end example\n+@end smallexample\n \n @noindent\n The constraint @samp{\"0\"} for operand 1 says that it must occupy the\n@@ -3947,9 +3947,9 @@ of both operands is not enough to guarantee that they will be in the\n same place in the generated assembler code.  The following would not\n work reliably:\n \n-@example\n+@smallexample\n asm (\"combine %2,%0\" : \"=r\" (foo) : \"r\" (foo), \"g\" (bar));\n-@end example\n+@end smallexample\n \n Various optimizations or reloading could cause operands 0 and 1 to be in\n different registers; GCC knows no reason not to do so.  For example, the\n@@ -3962,23 +3962,23 @@ code, the result will not work, but GCC can't tell that.\n As of GCC version 3.1, one may write @code{[@var{name}]} instead of\n the operand number for a matching constraint.  For example:\n \n-@example\n+@smallexample\n asm (\"cmoveq %1,%2,%[result]\"\n      : [result] \"=r\"(result)\n      : \"r\" (test), \"r\"(new), \"[result]\"(old));\n-@end example\n+@end smallexample\n \n Some instructions clobber specific hard registers.  To describe this,\n write a third colon after the input operands, followed by the names of\n the clobbered hard registers (given as strings).  Here is a realistic\n example for the VAX:\n \n-@example\n+@smallexample\n asm volatile (\"movc3 %0,%1,%2\"\n               : /* no outputs */\n               : \"g\" (from), \"g\" (to), \"g\" (count)\n               : \"r0\", \"r1\", \"r2\", \"r3\", \"r4\", \"r5\");\n-@end example\n+@end smallexample\n \n You may not write a clobber description in a way that overlaps with an\n input or output operand.  For example, you may not have an operand\n@@ -4027,12 +4027,12 @@ read and write the clobbered registers as many times as you like.  Here\n is an example of multiple instructions in a template; it assumes the\n subroutine @code{_foo} accepts arguments in registers 9 and 10:\n \n-@example\n+@smallexample\n asm (\"movl %0,r9\\n\\tmovl %1,r10\\n\\tcall _foo\"\n      : /* no outputs */\n      : \"g\" (from), \"g\" (to)\n      : \"r9\", \"r10\");\n-@end example\n+@end smallexample\n \n Unless an output operand has the @samp{&} constraint modifier, GCC\n may allocate it in the same register as an unrelated input operand, on\n@@ -4045,11 +4045,11 @@ If you want to test the condition code produced by an assembler\n instruction, you must include a branch and a label in the @code{asm}\n construct, as follows:\n \n-@example\n+@smallexample\n asm (\"clr %0\\n\\tfrob %1\\n\\tbeq 0f\\n\\tmov #1,%0\\n0:\"\n      : \"g\" (result)\n      : \"g\" (input));\n-@end example\n+@end smallexample\n \n @noindent\n This assumes your assembler supports local labels, as the GNU assembler\n@@ -4064,12 +4064,12 @@ optimize.\n Usually the most convenient way to use these @code{asm} instructions is to\n encapsulate them in macros that look like functions.  For example,\n \n-@example\n+@smallexample\n #define sin(x)       \\\n (@{ double __value, __arg = (x);   \\\n    asm (\"fsinx %1,%0\": \"=f\" (__value): \"f\" (__arg));  \\\n    __value; @})\n-@end example\n+@end smallexample\n \n @noindent\n Here the variable @code{__arg} is used to make sure that the instruction\n@@ -4098,13 +4098,13 @@ You can prevent an @code{asm} instruction from being deleted, moved\n significantly, or combined, by writing the keyword @code{volatile} after\n the @code{asm}.  For example:\n \n-@example\n+@smallexample\n #define get_and_set_priority(new)              \\\n (@{ int __old;                                  \\\n    asm volatile (\"get_and_set_priority %0, %1\" \\\n                  : \"=g\" (__old) : \"g\" (new));  \\\n    __old; @})\n-@end example\n+@end smallexample\n \n @noindent\n If you write an @code{asm} instruction with no outputs, GCC will know\n@@ -4118,10 +4118,10 @@ prove that control-flow will never reach the location of the\n instruction.)  In addition, GCC will not reschedule instructions\n across a volatile @code{asm} instruction.  For example:\n \n-@example\n+@smallexample\n *(volatile int *)addr = foo;\n asm volatile (\"eieio\" : : );\n-@end example\n+@end smallexample\n \n @noindent\n Assume @code{addr} contains the address of a memory mapped device\n@@ -4209,9 +4209,9 @@ the reg-stack than any input that is not implicitly popped.\n It is possible that if an input dies in an insn, reload might\n use the input reg for an output reload.  Consider this example:\n \n-@example\n+@smallexample\n asm (\"foo\" : \"=t\" (a) : \"f\" (b));\n-@end example\n+@end smallexample\n \n This asm says that input B is not popped by the asm, and that\n the asm pushes a result onto the reg-stack, i.e., the stack is one\n@@ -4224,9 +4224,9 @@ constraints must use the @code{&} earlyclobber.\n \n The asm above would be written as\n \n-@example\n+@smallexample\n asm (\"foo\" : \"=&t\" (a) : \"f\" (b));\n-@end example\n+@end smallexample\n \n @item\n Some operands need to be in particular places on the stack.  All\n@@ -4257,17 +4257,17 @@ unrelated to the inputs and outputs.\n Here are a couple of reasonable asms to want to write.  This asm\n takes one input, which is internally popped, and produces two outputs.\n \n-@example\n+@smallexample\n asm (\"fsincos\" : \"=t\" (cos), \"=u\" (sin) : \"0\" (inp));\n-@end example\n+@end smallexample\n \n This asm takes two inputs, which are popped by the @code{fyl2xp1} opcode,\n and replaces them with one output.  The user must code the @code{st(1)}\n clobber for reg-stack.c to know that @code{fyl2xp1} pops both inputs.\n \n-@example\n+@smallexample\n asm (\"fyl2xp1\" : \"=t\" (result) : \"0\" (x), \"u\" (y) : \"st(1)\");\n-@end example\n+@end smallexample\n \n @include md.texi\n \n@@ -4281,9 +4281,9 @@ You can specify the name to be used in the assembler code for a C\n function or variable by writing the @code{asm} (or @code{__asm__})\n keyword after the declarator as follows:\n \n-@example\n+@smallexample\n int foo asm (\"myfoo\") = 2;\n-@end example\n+@end smallexample\n \n @noindent\n This specifies that the name to be used for the variable @code{foo} in\n@@ -4305,13 +4305,13 @@ You cannot use @code{asm} in this way in a function @emph{definition}; but\n you can get the same effect by writing a declaration for the function\n before its definition and putting @code{asm} there, like this:\n \n-@example\n+@smallexample\n extern func () asm (\"FUNC\");\n \n func (x, y)\n      int x, y;\n /* @r{@dots{}} */\n-@end example\n+@end smallexample\n \n It is up to you to make sure that the assembler names you choose do not\n conflict with any other assembler symbols.  Also, you must not use a\n@@ -4364,9 +4364,9 @@ specified for that operand in the @code{asm}.)\n \n You can define a global register variable in GNU C like this:\n \n-@example\n+@smallexample\n register int *foo asm (\"a5\");\n-@end example\n+@end smallexample\n \n @noindent\n Here @code{a5} is the name of the register which should be used.  Choose a\n@@ -4463,9 +4463,9 @@ Of course, it will not do to use more than a few of those.\n You can define a local register variable with a specified register\n like this:\n \n-@example\n+@smallexample\n register int *foo asm (\"a5\");\n-@end example\n+@end smallexample\n \n @noindent\n Here @code{a5} is the name of the register which should be used.  Note\n@@ -4522,11 +4522,11 @@ Other C compilers won't accept these alternative keywords; if you want to\n compile with another compiler, you can define the alternate keywords as\n macros to replace them with the customary keywords.  It looks like this:\n \n-@example\n+@smallexample\n #ifndef __GNUC__\n #define __asm__ asm\n #endif\n-@end example\n+@end smallexample\n \n @findex __extension__\n @opindex pedantic\n@@ -4700,9 +4700,9 @@ this way.\n The first step in using these extensions is to provide the necessary data\n types.  This should be done using an appropriate @code{typedef}:\n \n-@example\n+@smallexample\n typedef int v4si __attribute__ ((mode(V4SI)));\n-@end example\n+@end smallexample\n \n The base type @code{int} is effectively ignored by the compiler, the\n actual properties of the new type @code{v4si} are defined by the\n@@ -4742,13 +4742,13 @@ example, in the code below, each of the 4 elements in @var{a} will be\n added to the corresponding 4 elements in @var{b} and the resulting\n vector will be stored in @var{c}.\n \n-@example\n+@smallexample\n typedef int v4si __attribute__ ((mode(V4SI)));\n \n v4si a, b, c;\n \n c = a + b;\n-@end example\n+@end smallexample\n \n Subtraction, multiplication, division, and the logical operations\n operate in a similar manner.  Likewise, the result of using the unary\n@@ -4771,14 +4771,14 @@ of built-in functions that can be used to operate on vectors.  For\n example, a function to add two vectors and multiply the result by a\n third could look like this:\n \n-@example\n+@smallexample\n v4si f (v4si a, v4si b, v4si c)\n @{\n   v4si tmp = __builtin_addv4si (a, b);\n   return __builtin_mulv4si (tmp, c);\n @}\n \n-@end example\n+@end smallexample\n \n @node Other Builtins\n @section Other built-in functions provided by GCC\n@@ -5629,7 +5629,7 @@ processors, depending on the command-line switches used.\n The following built-in functions are always available.  They\n all generate the machine instruction that is part of the name.\n \n-@example\n+@smallexample\n long __builtin_alpha_implver (void)\n long __builtin_alpha_rpcc (void)\n long __builtin_alpha_amask (long)\n@@ -5658,14 +5658,14 @@ long __builtin_alpha_mskqh (long, long)\n long __builtin_alpha_umulh (long, long)\n long __builtin_alpha_zap (long, long)\n long __builtin_alpha_zapnot (long, long)\n-@end example\n+@end smallexample\n \n The following built-in functions are always with @option{-mmax}\n or @option{-mcpu=@var{cpu}} where @var{cpu} is @code{pca56} or\n later.  They all generate the machine instruction that is part\n of the name.\n \n-@example\n+@smallexample\n long __builtin_alpha_pklb (long)\n long __builtin_alpha_pkwb (long)\n long __builtin_alpha_unpkbl (long)\n@@ -5679,36 +5679,36 @@ long __builtin_alpha_maxsb8 (long, long)\n long __builtin_alpha_maxuw4 (long, long)\n long __builtin_alpha_maxsw4 (long, long)\n long __builtin_alpha_perr (long, long)\n-@end example\n+@end smallexample\n \n The following built-in functions are always with @option{-mcix}\n or @option{-mcpu=@var{cpu}} where @var{cpu} is @code{ev67} or\n later.  They all generate the machine instruction that is part\n of the name.\n \n-@example\n+@smallexample\n long __builtin_alpha_cttz (long)\n long __builtin_alpha_ctlz (long)\n long __builtin_alpha_ctpop (long)\n-@end example\n+@end smallexample\n \n The following builtins are available on systems that use the OSF/1\n PALcode.  Normally they invoke the @code{rduniq} and @code{wruniq}\n PAL calls, but when invoked with @option{-mtls-kernel}, they invoke\n @code{rdval} and @code{wrval}.\n \n-@example\n+@smallexample\n void *__builtin_thread_pointer (void)\n void __builtin_set_thread_pointer (void *)\n-@end example\n+@end smallexample\n \n @node ARM Built-in Functions\n @subsection ARM Built-in Functions\n \n These built-in functions are available for the ARM family of\n processors, when the @option{-mcpu=iwmmxt} switch is used:\n \n-@example\n+@smallexample\n typedef int __v2si __attribute__ ((__mode__ (__V2SI__)))\n \n v2si __builtin_arm_waddw (v2si, v2si)\n@@ -5858,7 +5858,7 @@ v2si __builtin_arm_wunpckeluw (v2si)\n v2si __builtin_arm_wsubwss (v2si, v2si)\n v2si __builtin_arm_wsraw (v2si, v2si)\n v2si __builtin_arm_wsrad (v2si, v2si)\n-@end example\n+@end smallexample\n \n @node X86 Built-in Functions\n @subsection X86 Built-in Functions\n@@ -5884,7 +5884,7 @@ entire vector register, interpreting it as a 128-bit integer, these use mode\n The following built-in functions are made available by @option{-mmmx}.\n All of them generate the machine instruction that is part of the name.\n \n-@example\n+@smallexample\n v8qi __builtin_ia32_paddb (v8qi, v8qi)\n v4hi __builtin_ia32_paddw (v4hi, v4hi)\n v2si __builtin_ia32_paddd (v2si, v2si)\n@@ -5920,14 +5920,14 @@ v2si __builtin_ia32_punpckldq (v2si, v2si)\n v8qi __builtin_ia32_packsswb (v4hi, v4hi)\n v4hi __builtin_ia32_packssdw (v2si, v2si)\n v8qi __builtin_ia32_packuswb (v4hi, v4hi)\n-@end example\n+@end smallexample\n \n The following built-in functions are made available either with\n @option{-msse}, or with a combination of @option{-m3dnow} and\n @option{-march=athlon}.  All of them generate the machine\n instruction that is part of the name.\n \n-@example\n+@smallexample\n v4hi __builtin_ia32_pmulhuw (v4hi, v4hi)\n v8qi __builtin_ia32_pavgb (v8qi, v8qi)\n v4hi __builtin_ia32_pavgw (v4hi, v4hi)\n@@ -5942,12 +5942,12 @@ int __builtin_ia32_pmovmskb (v8qi)\n void __builtin_ia32_maskmovq (v8qi, v8qi, char *)\n void __builtin_ia32_movntq (di *, di)\n void __builtin_ia32_sfence (void)\n-@end example\n+@end smallexample\n \n The following built-in functions are available when @option{-msse} is used.\n All of them generate the machine instruction that is part of the name.\n \n-@example\n+@smallexample\n int __builtin_ia32_comieq (v4sf, v4sf)\n int __builtin_ia32_comineq (v4sf, v4sf)\n int __builtin_ia32_comilt (v4sf, v4sf)\n@@ -6016,7 +6016,7 @@ v4sf __builtin_ia32_sqrtss (v4sf)\n v4sf __builtin_ia32_shufps (v4sf, v4sf, int)\n void __builtin_ia32_movntps (float *, v4sf)\n int __builtin_ia32_movmskps (v4sf)\n-@end example\n+@end smallexample\n \n The following built-in functions are available when @option{-msse} is used.\n \n@@ -6046,7 +6046,7 @@ Generates the @code{movlps} machine instruction as a store to memory.\n The following built-in functions are available when @option{-mpni} is used.\n All of them generate the machine instruction that is part of the name.\n \n-@example\n+@smallexample\n v2df __builtin_ia32_addsubpd (v2df, v2df)\n v2df __builtin_ia32_addsubps (v2df, v2df)\n v2df __builtin_ia32_haddpd (v2df, v2df)\n@@ -6059,7 +6059,7 @@ v2df __builtin_ia32_movddup (v2df)\n v4sf __builtin_ia32_movshdup (v4sf)\n v4sf __builtin_ia32_movsldup (v4sf)\n void __builtin_ia32_mwait (unsigned int, unsigned int)\n-@end example\n+@end smallexample\n \n The following built-in functions are available when @option{-mpni} is used.\n \n@@ -6071,7 +6071,7 @@ Generates the @code{movddup} machine instruction as a load from memory.\n The following built-in functions are available when @option{-m3dnow} is used.\n All of them generate the machine instruction that is part of the name.\n \n-@example\n+@smallexample\n void __builtin_ia32_femms (void)\n v8qi __builtin_ia32_pavgusb (v8qi, v8qi)\n v2si __builtin_ia32_pf2id (v2sf)\n@@ -6092,20 +6092,20 @@ v2sf __builtin_ia32_pfsub (v2sf, v2sf)\n v2sf __builtin_ia32_pfsubr (v2sf, v2sf)\n v2sf __builtin_ia32_pi2fd (v2si)\n v4hi __builtin_ia32_pmulhrw (v4hi, v4hi)\n-@end example\n+@end smallexample\n \n The following built-in functions are available when both @option{-m3dnow}\n and @option{-march=athlon} are used.  All of them generate the machine\n instruction that is part of the name.\n \n-@example\n+@smallexample\n v2si __builtin_ia32_pf2iw (v2sf)\n v2sf __builtin_ia32_pfnacc (v2sf, v2sf)\n v2sf __builtin_ia32_pfpnacc (v2sf, v2sf)\n v2sf __builtin_ia32_pi2fw (v2si)\n v2sf __builtin_ia32_pswapdsf (v2sf)\n v2si __builtin_ia32_pswapdsi (v2si)\n-@end example\n+@end smallexample\n \n @node PowerPC AltiVec Built-in Functions\n @subsection PowerPC AltiVec Built-in Functions\n@@ -7346,7 +7346,7 @@ For compatibility with other compilers, GCC allows you to define\n a structure or union that contains, as fields, structures and unions\n without names.  For example:\n \n-@example\n+@smallexample\n struct @{\n   int a;\n   union @{\n@@ -7355,7 +7355,7 @@ struct @{\n   @};\n   int d;\n @} foo;\n-@end example\n+@end smallexample\n \n In this example, the user would be able to access members of the unnamed\n union with code like @samp{foo.b}.  Note that only unnamed structs and\n@@ -7365,14 +7365,14 @@ unions are allowed, you may not have, for example, an unnamed\n You must never create such structures that cause ambiguous field definitions.\n For example, this structure:\n \n-@example\n+@smallexample\n struct @{\n   int a;\n   struct @{\n     int a;\n   @};\n @} foo;\n-@end example\n+@end smallexample\n \n It is ambiguous which @code{a} is being referred to with @samp{foo.a}.\n Such constructs are not supported and must be avoided.  In the future,\n@@ -7396,11 +7396,11 @@ is not available everywhere.\n At the user level, the extension is visible with a new storage\n class keyword: @code{__thread}.  For example:\n \n-@example\n+@smallexample\n __thread int i;\n extern __thread struct state s;\n static __thread char *p;\n-@end example\n+@end smallexample\n \n The @code{__thread} specifier may be used alone, with the @code{extern}\n or @code{static} specifiers, but with no other storage class specifier.\n@@ -7694,9 +7694,9 @@ These operations are not primitive in ordinary C++, since you can\n use a macro to return the minimum of two things in C++, as in the\n following example.\n \n-@example\n+@smallexample\n #define MIN(X,Y) ((X) < (Y) ? : (X) : (Y))\n-@end example\n+@end smallexample\n \n @noindent\n You might then use @w{@samp{int min = MIN (i, j);}} to set @var{min} to\n@@ -7741,11 +7741,11 @@ within a sequence point.\n In most expressions, it is intuitively obvious what is a read and what is\n a write.  For instance\n \n-@example\n+@smallexample\n volatile int *dst = @var{somevalue};\n volatile int *src = @var{someothervalue};\n *dst = *src;\n-@end example\n+@end smallexample\n \n @noindent\n will cause a read of the volatile object pointed to by @var{src} and stores the\n@@ -7756,10 +7756,10 @@ larger than @code{int}.\n Less obvious expressions are where something which looks like an access\n is used in a void context.  An example would be,\n \n-@example\n+@smallexample\n volatile int *src = @var{somevalue};\n *src;\n-@end example\n+@end smallexample\n \n With C, such expressions are rvalues, and as rvalues cause a read of\n the object, GCC interprets this as a read of the volatile being pointed\n@@ -7774,14 +7774,14 @@ pointer to volatile object of complete type in a void context as a read\n of the object.  When the object has incomplete type, G++ issues a\n warning.\n \n-@example\n+@smallexample\n struct S;\n struct T @{int m;@};\n volatile S *ptr1 = @var{somevalue};\n volatile T *ptr2 = @var{somevalue};\n *ptr1;\n *ptr2;\n-@end example\n+@end smallexample\n \n In this example, a warning is issued for @code{*ptr1}, and @code{*ptr2}\n causes a read of the object pointed to.  If you wish to force an error on\n@@ -7811,12 +7811,12 @@ In addition to allowing restricted pointers, you can specify restricted\n references, which indicate that the reference is not aliased in the local\n context.\n \n-@example\n+@smallexample\n void fn (int *__restrict__ rptr, int &__restrict__ rref)\n @{\n   /* @r{@dots{}} */\n @}\n-@end example\n+@end smallexample\n \n @noindent\n In the body of @code{fn}, @var{rptr} points to an unaliased integer and\n@@ -7825,12 +7825,12 @@ In the body of @code{fn}, @var{rptr} points to an unaliased integer and\n You may also specify whether a member function's @var{this} pointer is\n unaliased by using @code{__restrict__} as a member function qualifier.\n \n-@example\n+@smallexample\n void T::fn () __restrict__\n @{\n   /* @r{@dots{}} */\n @}\n-@end example\n+@end smallexample\n \n @noindent\n Within the body of @code{T::fn}, @var{this} will have the effective\n@@ -8136,14 +8136,14 @@ that define the templates themselves; you can put all of the explicit\n instantiations you need into one big file; or you can create small files\n like\n \n-@example\n+@smallexample\n #include \"Foo.h\"\n #include \"Foo.cc\"\n \n template class Foo<int>;\n template ostream& operator <<\n                 (ostream&, const Foo<int>&);\n-@end example\n+@end smallexample\n \n for each of the instances you need, and create a template instantiation\n library from those.\n@@ -8165,11 +8165,11 @@ members (with @code{inline}), and instantiation of only the static data\n members of a template class, without the support data or member\n functions (with (@code{static}):\n \n-@example\n+@smallexample\n extern template int max (int, int);\n inline template class Foo<int>;\n static template class Foo<int>;\n-@end example\n+@end smallexample\n \n @item\n Do nothing.  Pretend g++ does implement automatic instantiation\n@@ -8205,21 +8205,21 @@ virtual function calls.\n \n The syntax for this extension is\n \n-@example\n+@smallexample\n extern A a;\n extern int (A::*fp)();\n typedef int (*fptr)(A *);\n \n fptr p = (fptr)(a.*fp);\n-@end example\n+@end smallexample\n \n For PMF constants (i.e.@: expressions of the form @samp{&Klasse::Member}),\n no object is needed to obtain the address of the function.  They can be\n converted to function pointers directly:\n \n-@example\n+@smallexample\n fptr p1 = (fptr)(&A::foo);\n-@end example\n+@end smallexample\n \n @opindex Wno-pmf-conversions\n You must specify @option{-Wno-pmf-conversions} to use this extension."}, {"sha": "776f81ff65509fa204a2d71140dc9c580bccb8a2", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 68, "deletions": 68, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33", "patch": "@@ -513,11 +513,11 @@ affected by this requirement, see\n \n To configure GCC:\n \n-@example\n+@smallexample\n    % mkdir @var{objdir}\n    % cd @var{objdir}\n    % @var{srcdir}/configure [@var{options}] [@var{target}]\n-@end example\n+@end smallexample\n \n \n @heading Target specification\n@@ -999,9 +999,9 @@ Specify that only a particular subset of compilers and\n their runtime libraries should be built.  For a list of valid values for\n @var{langN} you can issue the following command in the\n @file{gcc} directory of your GCC source tree:@*\n-@example\n+@smallexample\n grep language= */config-lang.in\n-@end example\n+@end smallexample\n Currently, you can use any of the following:\n @code{ada}, @code{c}, @code{c++}, @code{f77}, @code{java}, @code{objc}.\n Building the Ada compiler has special requirements, see below.@*\n@@ -1294,10 +1294,10 @@ without debugging information as in the following example.  This will save\n roughly 40% of disk space both for the bootstrap and the final installation.\n (Libraries will still contain debugging information.)\n \n-@example\n+@smallexample\n      make CFLAGS='-O' LIBCFLAGS='-g -O2' \\\n        LIBCXXFLAGS='-g -O2 -fno-implicit-templates' bootstrap\n-@end example\n+@end smallexample\n \n If you wish to use non-default GCC flags when compiling the stage2 and\n stage3 compilers, set @code{BOOT_CFLAGS} on the command line when doing\n@@ -1441,15 +1441,15 @@ library would be the same as the one built for the cross compiler.\n For example, you can build a native Ada compiler by issuing the\n following commands (assuming @command{make} is GNU make):\n \n-@example\n+@smallexample\n     cd @var{objdir}\n     @var{srcdir}/configure --enable-languages=c,ada\n     cd @var{objdir}\n     make bootstrap\n     cd gcc\n     make gnatlib_and_tools\n     cd ..\n-@end example\n+@end smallexample\n \n Currently, when compiling the Ada front end, you cannot use the parallel\n build feature described in the previous section.\n@@ -1519,20 +1519,20 @@ installed are not in the @env{PATH}, you may need to set the following\n environment variables appropriately, as in the following example (which\n assumes that DejaGnu has been installed under @file{/usr/local}):\n \n-@example\n+@smallexample\n      TCL_LIBRARY = /usr/local/share/tcl8.0\n      DEJAGNULIBS = /usr/local/share/dejagnu\n-@end example\n+@end smallexample\n \n (On systems such as Cygwin, these paths are required to be actual\n paths, not mounts or links; presumably this is due to some lack of\n portability in the DejaGnu code.)\n \n \n Finally, you can run the testsuite (which may take a long time):\n-@example\n+@smallexample\n      cd @var{objdir}; make -k check\n-@end example\n+@end smallexample\n \n This will test various components of GCC, such as compiler\n front ends and runtime libraries.  While running the testsuite, DejaGnu\n@@ -1551,16 +1551,16 @@ just run @samp{make check} in a subdirectory of the object directory.\n A more selective way to just run all @command{gcc} execute tests in the\n testsuite is to use\n \n-@example\n+@smallexample\n     make check-gcc RUNTESTFLAGS=\"execute.exp @var{other-options}\"\n-@end example\n+@end smallexample\n \n Likewise, in order to run only the @command{g++} ``old-deja'' tests in\n the testsuite with filenames matching @samp{9805*}, you would use\n \n-@example\n+@smallexample\n     make check-g++ RUNTESTFLAGS=\"old-deja.exp=9805* @var{other-options}\"\n-@end example\n+@end smallexample\n \n The @file{*.exp} files are located in the testsuite directories of the GCC\n source, the most important ones being @file{compile.exp},\n@@ -1576,9 +1576,9 @@ You can pass multiple options to the testsuite using the\n @samp{RUNTESTFLAGS}, or directly to @command{runtest} if you prefer to\n work outside the makefiles.  For example,\n \n-@example\n+@smallexample\n     make check-g++ RUNTESTFLAGS=\"--target_board=unix/-O3/-fno-strength-reduce\"\n-@end example\n+@end smallexample\n \n will run the standard @command{g++} testsuites (``unix'' is the target name\n for a standard native testsuite situation), passing\n@@ -1588,15 +1588,15 @@ slashes separate options.\n You can run the testsuites multiple times using combinations of options\n with a syntax similar to the brace expansion of popular shells:\n \n-@example\n+@smallexample\n     @dots{}\"--target_board=arm-sim@{-mhard-float,-msoft-float@}@{-O1,-O2,-O3,@}\"\n-@end example\n+@end smallexample\n \n (Note the empty option caused by the trailing comma in the final group.)\n The following will run each testsuite eight times using the @samp{arm-sim}\n target, as if you had specified all possible combinations yourself:\n \n-@example\n+@smallexample\n     --target_board=arm-sim/-mhard-float/-O1\n     --target_board=arm-sim/-mhard-float/-O2\n     --target_board=arm-sim/-mhard-float/-O3\n@@ -1605,14 +1605,14 @@ target, as if you had specified all possible combinations yourself:\n     --target_board=arm-sim/-msoft-float/-O2\n     --target_board=arm-sim/-msoft-float/-O3\n     --target_board=arm-sim/-msoft-float\n-@end example\n+@end smallexample\n \n They can be combined as many times as you wish, in arbitrary ways.  This\n list:\n \n-@example\n+@smallexample\n     @dots{}\"--target_board=unix/-Wextra@{-O3,-fno-strength-reduce@}@{-fomit-frame-pointer,@}\"\n-@end example\n+@end smallexample\n \n will generate four combinations, all involving @samp{-Wextra}.\n \n@@ -1623,15 +1623,15 @@ parallel by having the shell perform the combinations and @command{make}\n do the parallel runs.  Instead of using @samp{--target_board}, use a\n special makefile target:\n \n-@example\n+@smallexample\n     make -j@var{N} check-@var{testsuite}//@var{test-target}/@var{option1}/@var{option2}/@dots{}\n-@end example\n+@end smallexample\n \n For example,\n \n-@example\n+@smallexample\n     make -j3 check-gcc//sh-hms-sim/@{-m1,-m2,-m3,-m3e,-m4@}/@{,-nofpu@}\n-@end example\n+@end smallexample\n \n will run three concurrent ``make-gcc'' testsuites, eventually testing all\n ten combinations as described above.  Note that this is currently only\n@@ -1693,10 +1693,10 @@ problem in future releases.\n If you want to report the results to the GCC project, use the\n @file{contrib/test_summary} shell script.  Start it in the @var{objdir} with\n \n-@example\n+@smallexample\n     @var{srcdir}/contrib/test_summary -p your_commentary.txt \\\n         -m gcc-testresults@@gcc.gnu.org |sh\n-@end example\n+@end smallexample\n \n This script uses the @command{Mail} program to send the results, so\n make sure it is in your @env{PATH}.  The file @file{your_commentary.txt} is\n@@ -1725,9 +1725,9 @@ messages may be automatically processed.\n @end ifnothtml\n \n Now that GCC has been built (and optionally tested), you can install it with\n-@example\n+@smallexample\n cd @var{objdir}; make install\n-@end example\n+@end smallexample\n \n We strongly recommend to install into a target directory where there is\n no previous version of GCC present.\n@@ -1755,9 +1755,9 @@ binutils, including assembler and linker.\n Installation into a temporary staging area or into a @command{chroot}\n jail can be achieved with the command\n \n-@example\n+@smallexample\n make DESTDIR=@var{path-to-rootdir} install\n-@end example\n+@end smallexample\n \n @noindent where @var{path-to-rootdir} is the absolute path of\n a directory relative to which all installation paths will be\n@@ -2158,15 +2158,15 @@ we need to use the old assembler, invoked via the barely documented\n @option{-oldas} option.  To bootstrap GCC, you either need to use the\n Compaq C Compiler:\n \n-@example\n+@smallexample\n    % CC=cc @var{srcdir}/configure [@var{options}] [@var{target}]\n-@end example\n+@end smallexample\n \n or you can use a copy of GCC 2.95.3 or higher built on Tru64 UNIX V4.0:\n \n-@example\n+@smallexample\n    % CC=gcc -Wa,-oldas @var{srcdir}/configure [@var{options}] [@var{target}]\n-@end example\n+@end smallexample\n \n As of GNU binutils 2.11.2, neither GNU @command{as} nor GNU @command{ld}\n are supported on Tru64 UNIX, so you must not configure GCC with\n@@ -2231,10 +2231,10 @@ need to tell GCC where to find the assembler and the linker.  The\n simplest way to do so is by providing @option{--with-as} and\n @option{--with-ld} to @file{configure}, e.g.@:\n \n-@example\n+@smallexample\n     configure --with-as=/opt/ctl/bin/cam --with-ld=/opt/ctl/bin/cld \\\n       --enable-languages=c\n-@end example\n+@end smallexample\n \n The comparison test during @samp{make bootstrap} fails on Unicos/Mk\n because the assembler inserts timestamps into object files.  You should\n@@ -2306,9 +2306,9 @@ can also be obtained from:\n We @emph{strongly} recommend using binutils 2.13 or newer.\n \n The following error:\n-@example\n+@smallexample\n   Error: register required\n-@end example\n+@end smallexample\n \n indicates that you should upgrade to a newer version of the binutils.\n \n@@ -2712,10 +2712,10 @@ from the right place) while making the tools not think we're actually\n building a cross compiler.   The easiest way to do this is with a configure\n command like this:\n \n-@example\n+@smallexample\n     CC=/udk/usr/ccs/bin/cc @var{/your/path/to}/gcc/configure \\\n       --host=i686-pc-udk --target=i686-pc-udk --program-prefix=udk-\n-@end example\n+@end smallexample\n \n @emph{You should substitute @samp{i686} in the above command with the appropriate\n processor for your host.}\n@@ -2803,21 +2803,21 @@ multilib @file{libstdc++.a} installed:\n \n Extract the shared object from each the GCC 3.1 @file{libstdc++.a}\n archive:\n-@example\n+@smallexample\n    % ar -x libstdc++.a libstdc++.so.4\n-@end example\n+@end smallexample\n \n Enable the @samp{F_LOADONLY} flag so that the shared object will be\n available for runtime dynamic loading, but not linking:\n-@example\n+@smallexample\n    % strip -e libstdc++.so.4\n-@end example\n+@end smallexample\n \n Archive the runtime-only shared object in the GCC 3.2\n @file{libstdc++.a} archive:\n-@example\n+@smallexample\n    % ar -q libstdc++.a libstdc++.so.4\n-@end example\n+@end smallexample\n \n Linking executables and shared libraries may produce warnings of\n duplicate symbols.  The assembly files generated by GCC for AIX always\n@@ -2950,16 +2950,16 @@ encounter this problem, upgrade your operating system or use BASH (the\n GNU shell) to run @command{fixproto}.  This bug will cause the fixproto\n program to report an error of the form:\n \n-@example\n+@smallexample\n ./fixproto: sh internal 1K buffer overflow\n-@end example\n+@end smallexample\n \n To fix this, you can also change the first line of the fixproto script\n to look like:\n \n-@example\n+@smallexample\n #!/bin/ksh\n-@end example\n+@end smallexample\n \n @html\n <hr />\n@@ -3042,21 +3042,21 @@ ensure that the N32 ABI is in use.  To test this, compile a simple C\n file with @command{cc} and then run @command{file} on the\n resulting object file.  The output should look like:\n \n-@example\n+@smallexample\n test.o: ELF N32 MSB @dots{}\n-@end example\n+@end smallexample\n \n If you see:\n \n-@example\n+@smallexample\n test.o: ELF 32-bit MSB @dots{}\n-@end example\n+@end smallexample\n \n or\n \n-@example\n+@smallexample\n test.o: ELF 64-bit MSB @dots{}\n-@end example\n+@end smallexample\n \n then your version of @command{cc} uses the O32 or N64 ABI by default.  You\n should set the environment variable @env{CC} to @samp{cc -n32}\n@@ -3070,15 +3070,15 @@ the ISA depending on the machine where GCC is built.  Using one of them\n as the bootstrap compiler may result in mips4 code, which won't run at\n all on mips3-only systems.  For the test program above, you should see:\n \n-@example\n+@smallexample\n test.o: ELF N32 MSB mips-3 @dots{}\n-@end example\n+@end smallexample\n \n If you get:\n \n-@example\n+@smallexample\n test.o: ELF N32 MSB mips-4 @dots{}\n-@end example\n+@end smallexample\n \n instead, you should set the environment variable @env{CC} to @samp{cc\n -n32 -mips3} or @samp{gcc -mips3} respectively before configuring GCC@.\n@@ -3407,9 +3407,9 @@ releases mishandled unaligned relocations on @code{sparc-*-*} targets.\n The following compiler flags must be specified in the configure\n step in order to bootstrap this target with the Sun compiler:\n \n-@example\n+@smallexample\n    % CC=\"cc -xildoff -xarch=v9\" @var{srcdir}/configure [@var{options}] [@var{target}]\n-@end example\n+@end smallexample\n \n @option{-xildoff} turns off the incremental linker, and @option{-xarch=v9}\n specifies the SPARC-V9 architecture to the Sun linker and assembler.\n@@ -3443,10 +3443,10 @@ is said to work.  Smaller values may also work.\n \n On System V, if you get an error like this,\n \n-@example\n+@smallexample\n /usr/local/lib/bison.simple: In function `yyparse':\n /usr/local/lib/bison.simple:625: virtual memory exhausted\n-@end example\n+@end smallexample\n \n @noindent\n that too indicates a problem with disk space, ulimit, or @code{MAXUMEM}."}, {"sha": "262a4efb8f960996fd67db2837eb937d1d009c54", "filename": "gcc/doc/interface.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2Fdoc%2Finterface.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2Fdoc%2Finterface.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finterface.texi?ref=3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33", "patch": "@@ -1,5 +1,5 @@\n @c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-@c 1999, 2000, 2001 Free Software Foundation, Inc.\n+@c 1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n@@ -76,10 +76,10 @@ just take the address of the variable.  If a variable's address is ever\n taken, even if just to compute it and ignore it, then the variable cannot\n go in a register:\n \n-@example\n+@smallexample\n @{\n   int careful;\n   &careful;\n   @dots{}\n @}\n-@end example\n+@end smallexample"}, {"sha": "518b13081d0fc44beb125c80a66e15c2c1012ad1", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33", "patch": "@@ -807,7 +807,7 @@ Specify explicitly the @var{language} for the following input files\n (rather than letting the compiler choose a default based on the file\n name suffix).  This option applies to all following input files until\n the next @option{-x} option.  Possible values for @var{language} are:\n-@example\n+@smallexample\n c  c-header  cpp-output\n c++  c++-header  c++-cpp-output\n objective-c  objective-c-header  objc-cpp-output\n@@ -816,7 +816,7 @@ ada\n f77  f77-cpp-input  ratfor\n java\n treelang\n-@end example\n+@end smallexample\n \n @item -x none\n Turn off any specification of a language, so that subsequent files are\n@@ -1247,9 +1247,9 @@ for C++ programs; but you can also use most of the GNU compiler options\n regardless of what language your program is in.  For example, you\n might compile a file @code{firstClass.C} like this:\n \n-@example\n+@smallexample\n g++ -g -frepo -O -c firstClass.C\n-@end example\n+@end smallexample\n \n @noindent\n In this example, only @option{-frepo} is an option meant\n@@ -1735,9 +1735,9 @@ for Objective-C programs, but you can also use most of the GNU compiler\n options regardless of what language your program is in.  For example,\n you might compile a file @code{some_class.m} like this:\n \n-@example\n+@smallexample\n gcc -g -fgnu-runtime -O -c some_class.m\n-@end example\n+@end smallexample\n \n @noindent\n In this example, @option{-fgnu-runtime} is an option meant only for\n@@ -3513,9 +3513,9 @@ Same as @option{-print-file-name=libgcc.a}.\n This is useful when you use @option{-nostdlib} or @option{-nodefaultlibs}\n but you do want to link with @file{libgcc.a}.  You can do\n \n-@example\n+@smallexample\n gcc -nostdlib @var{files}@dots{} `gcc -print-libgcc-file-name`\n-@end example\n+@end smallexample\n \n @item -print-search-dirs\n @opindex print-search-dirs\n@@ -4217,7 +4217,7 @@ example, an @code{unsigned int} can alias an @code{int}, but not a\n type.\n \n Pay special attention to code like this:\n-@example\n+@smallexample\n union a_union @{\n   int i;\n   double d;\n@@ -4228,21 +4228,21 @@ int f() @{\n   t.d = 3.0;\n   return t.i;\n @}\n-@end example\n+@end smallexample\n The practice of reading from a different union member than the one most\n recently written to (called ``type-punning'') is common.  Even with\n @option{-fstrict-aliasing}, type-punning is allowed, provided the memory\n is accessed through the union type.  So, the code above will work as\n expected.  However, this code might not:\n-@example\n+@smallexample\n int f() @{\n   a_union t;\n   int* ip;\n   t.d = 3.0;\n   ip = &t.i;\n   return *ip;\n @}\n-@end example\n+@end smallexample\n \n Every language that wishes to perform language-specific alias analysis\n should define a function that computes, given an @code{tree}\n@@ -11094,12 +11094,12 @@ function and its call site.  (On some platforms,\n function, so the call site information may not be available to the\n profiling functions otherwise.)\n \n-@example\n+@smallexample\n void __cyg_profile_func_enter (void *this_fn,\n                                void *call_site);\n void __cyg_profile_func_exit  (void *this_fn,\n                                void *call_site);\n-@end example\n+@end smallexample\n \n The first argument is the address of the start of the current function,\n which may be looked up exactly in the symbol table.\n@@ -11579,10 +11579,10 @@ appropriate options and the option @option{-aux-info}.  Then run\n the existing @samp{.X} file because it is newer than the source file.\n For example:\n \n-@example\n+@smallexample\n gcc -Dfoo=bar file1.c -aux-info file1.X\n protoize *.c\n-@end example\n+@end smallexample\n \n @noindent\n You need to include the special files along with the rest in the"}, {"sha": "7c4e13a83211643b37539bb5a0b187fe0be92f1f", "filename": "gcc/doc/libgcc.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2Fdoc%2Flibgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2Fdoc%2Flibgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Flibgcc.texi?ref=3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33", "patch": "@@ -1,4 +1,4 @@\n-@c Copyright (C) 2003 Free Software Foundation, Inc.\n+@c Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n @c Contributed by Aldy Hernandez <aldy@quesejoda.com>\n@@ -443,7 +443,7 @@ is NaN, and @var{a} is strictly greater than @var{b}.\n \n document me!\n \n-@example\n+@smallexample\n   _Unwind_DeleteException\n   _Unwind_Find_FDE\n   _Unwind_ForcedUnwind\n@@ -472,7 +472,7 @@ document me!\n   __register_frame_info_table\n   __register_frame_info_table_bases\n   __register_frame_table\n-@end example\n+@end smallexample\n \n @node Miscellaneous routines\n @section Miscellaneous runtime library routines"}, {"sha": "cf690ec3fcdebfe72eae2f64d1ab0a7ef0df75a6", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33", "patch": "@@ -1,5 +1,5 @@\n @c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1996, 1998, 1999, 2000, 2001,\n-@c 2002, 2003 Free Software Foundation, Inc.\n+@c 2002, 2003, 2004 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n@@ -181,7 +181,7 @@ this pattern.  @xref{Insn Attributes}.\n \n Here is an actual example of an instruction pattern, for the 68000/68020.\n \n-@example\n+@smallexample\n (define_insn \"tstsi\"\n   [(set (cc0)\n         (match_operand:SI 0 \"general_operand\" \"rm\"))]\n@@ -192,12 +192,12 @@ Here is an actual example of an instruction pattern, for the 68000/68020.\n     return \\\"tstl %0\\\";\n   return \\\"cmpl #0,%0\\\";\n @}\")\n-@end example\n+@end smallexample\n \n @noindent\n This can also be written using braced strings:\n \n-@example\n+@smallexample\n (define_insn \"tstsi\"\n   [(set (cc0)\n         (match_operand:SI 0 \"general_operand\" \"rm\"))]\n@@ -207,7 +207,7 @@ This can also be written using braced strings:\n     return \"tstl %0\";\n   return \"cmpl #0,%0\";\n @})\n-@end example\n+@end smallexample\n \n This is an instruction that sets the condition codes based on the value of\n a general operand.  It has no condition, so any insn whose RTL description\n@@ -3548,24 +3548,24 @@ Every machine description must have a named pattern for each of the\n conditional branch names @samp{b@var{cond}}.  The recognition template\n must always have the form\n \n-@example\n+@smallexample\n (set (pc)\n      (if_then_else (@var{cond} (cc0) (const_int 0))\n                    (label_ref (match_operand 0 \"\" \"\"))\n                    (pc)))\n-@end example\n+@end smallexample\n \n @noindent\n In addition, every machine description must have an anonymous pattern\n for each of the possible reverse-conditional branches.  Their templates\n look like\n \n-@example\n+@smallexample\n (set (pc)\n      (if_then_else (@var{cond} (cc0) (const_int 0))\n                    (pc)\n                    (label_ref (match_operand 0 \"\" \"\"))))\n-@end example\n+@end smallexample\n \n @noindent\n They are necessary because jump optimization can turn direct-conditional\n@@ -3575,7 +3575,7 @@ It is often convenient to use the @code{match_operator} construct to\n reduce the number of patterns that must be specified for branches.  For\n example,\n \n-@example\n+@smallexample\n (define_insn \"\"\n   [(set (pc)\n         (if_then_else (match_operator 0 \"comparison_operator\"\n@@ -3584,20 +3584,20 @@ example,\n                       (label_ref (match_operand 1 \"\" \"\"))))]\n   \"@var{condition}\"\n   \"@dots{}\")\n-@end example\n+@end smallexample\n \n In some cases machines support instructions identical except for the\n machine mode of one or more operands.  For example, there may be\n ``sign-extend halfword'' and ``sign-extend byte'' instructions whose\n patterns are\n \n-@example\n+@smallexample\n (set (match_operand:SI 0 @dots{})\n      (extend:SI (match_operand:HI 1 @dots{})))\n \n (set (match_operand:SI 0 @dots{})\n      (extend:SI (match_operand:QI 1 @dots{})))\n-@end example\n+@end smallexample\n \n @noindent\n Constant integers do not specify a machine mode, so an instruction to\n@@ -3910,26 +3910,26 @@ A machine that has an instruction that performs a bitwise logical-and of one\n operand with the bitwise negation of the other should specify the pattern\n for that instruction as\n \n-@example\n+@smallexample\n (define_insn \"\"\n   [(set (match_operand:@var{m} 0 @dots{})\n         (and:@var{m} (not:@var{m} (match_operand:@var{m} 1 @dots{}))\n                      (match_operand:@var{m} 2 @dots{})))]\n   \"@dots{}\"\n   \"@dots{}\")\n-@end example\n+@end smallexample\n \n @noindent\n Similarly, a pattern for a ``NAND'' instruction should be written\n \n-@example\n+@smallexample\n (define_insn \"\"\n   [(set (match_operand:@var{m} 0 @dots{})\n         (ior:@var{m} (not:@var{m} (match_operand:@var{m} 1 @dots{}))\n                      (not:@var{m} (match_operand:@var{m} 2 @dots{}))))]\n   \"@dots{}\"\n   \"@dots{}\")\n-@end example\n+@end smallexample\n \n In both cases, it is not necessary to include patterns for the many\n logically equivalent RTL expressions.\n@@ -3944,9 +3944,9 @@ and @code{(not:@var{m} (xor:@var{m} @var{x} @var{y}))}.\n The sum of three items, one of which is a constant, will only appear in\n the form\n \n-@example\n+@smallexample\n (plus:@var{m} (plus:@var{m} @var{x} @var{y}) @var{constant})\n-@end example\n+@end smallexample\n \n @item\n On machines that do not use @code{cc0},"}, {"sha": "481b51c09b85247bc99ecb10ce0bd818f62073bb", "filename": "gcc/doc/objc.texi", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2Fdoc%2Fobjc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2Fdoc%2Fobjc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fobjc.texi?ref=3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33", "patch": "@@ -1,5 +1,5 @@\n @c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-@c 1999, 2000, 2001 Free Software Foundation, Inc.\n+@c 1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n@@ -41,7 +41,7 @@ Suppose for example you have a @code{FileStream} class that declares\n @code{Stdin}, @code{Stdout} and @code{Stderr} as global variables, like\n below:\n \n-@example\n+@smallexample\n \n FileStream *Stdin = nil;\n FileStream *Stdout = nil;\n@@ -59,7 +59,7 @@ FileStream *Stderr = nil;\n /* Other methods here */\n @@end\n \n-@end example\n+@end smallexample\n \n In this example, the initialization of @code{Stdin}, @code{Stdout} and\n @code{Stderr} in @code{+initialize} occurs too late.  The programmer can\n@@ -73,7 +73,7 @@ just before entering @code{main}.\n The correct solution of the above problem is to use the @code{+load}\n method instead of @code{+initialize}:\n \n-@example\n+@smallexample\n \n @@implementation FileStream\n \n@@ -87,7 +87,7 @@ method instead of @code{+initialize}:\n /* Other methods here */\n @@end\n \n-@end example\n+@end smallexample\n \n The @code{+load} is a method that is not overridden by categories.  If a\n class and a category of it both implement @code{+load}, both methods are\n@@ -258,20 +258,20 @@ compiler on an i386 machine:\n @item Objective-C type\n @tab Compiler encoding\n @item\n-@example\n+@smallexample\n int a[10];\n-@end example\n+@end smallexample\n @tab @code{[10i]}\n @item\n-@example\n+@smallexample\n struct @{\n   int i;\n   float f[3];\n   int a:3;\n   int b:2;\n   char c;\n @}\n-@end example\n+@end smallexample\n @tab @code{@{?=i[3f]b128i3b131i2c@}}\n @end multitable\n \n@@ -343,7 +343,7 @@ Here is an example of how to use this feature.  Suppose you want to\n implement a class whose instances hold a weak pointer reference; the\n following class does this:\n \n-@example\n+@smallexample\n \n @@interface WeakPointer : Object\n @{\n@@ -375,7 +375,7 @@ following class does this:\n \n @@end\n \n-@end example\n+@end smallexample\n \n Weak pointers are supported through a new type character specifier\n represented by the @samp{!} character.  The\n@@ -391,9 +391,9 @@ GNU Objective-C provides constant string objects that are generated\n directly by the compiler.  You declare a constant string object by\n prefixing a C constant string with the character @samp{@@}:\n \n-@example\n+@smallexample\n   id myString = @@\"this is a constant string object\";\n-@end example\n+@end smallexample\n \n The constant string objects are by default instances of the\n @code{NXConstantString} class which is provided by the GNU Objective-C\n@@ -406,7 +406,7 @@ a new command line options @option{-fconstant-string-class=@var{class-name}}.\n The provided class should adhere to a strict structure, the same\n as @code{NXConstantString}'s structure:\n \n-@example\n+@smallexample\n \n @@interface MyConstantStringClass\n @{\n@@ -416,7 +416,7 @@ as @code{NXConstantString}'s structure:\n @}\n @@end\n \n-@end example\n+@end smallexample\n \n @code{NXConstantString} inherits from @code{Object}; user class\n libraries may choose to inherit the customized constant string class\n@@ -455,9 +455,9 @@ forgotten, we are documenting it here.\n The keyword @code{@@compatibility_alias} allows you to define a class name\n as equivalent to another class name.  For example:\n \n-@example\n+@smallexample\n @@compatibility_alias WOApplication GSWApplication;\n-@end example\n+@end smallexample\n \n tells the compiler that each time it encounters @code{WOApplication} as\n a class name, it should replace it with @code{GSWApplication} (that is,"}, {"sha": "f84dfadea35dd12dbf1133fd4393f5479e2390b7", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33", "patch": "@@ -1,4 +1,4 @@\n-@c Copyright (C) 1988, 1989, 1992, 1994, 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+@c Copyright (C) 1988, 1989, 1992, 1994, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n @c Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n@@ -308,16 +308,16 @@ Operands of expressions are accessed using the macros @code{XEXP},\n two arguments: an expression-pointer (RTX) and an operand number\n (counting from zero).  Thus,\n \n-@example\n+@smallexample\n XEXP (@var{x}, 2)\n-@end example\n+@end smallexample\n \n @noindent\n accesses operand 2 of expression @var{x}, as an expression.\n \n-@example\n+@smallexample\n XINT (@var{x}, 2)\n-@end example\n+@end smallexample\n \n @noindent\n accesses the same operand as an integer.  @code{XSTR}, used in the same\n@@ -1850,9 +1850,9 @@ Represents the signed product of the values represented by @var{x} and\n Some machines support a multiplication that generates a product wider\n than the operands.  Write the pattern for this as\n \n-@example\n+@smallexample\n (mult:@var{m} (sign_extend:@var{m} @var{x}) (sign_extend:@var{m} @var{y}))\n-@end example\n+@end smallexample\n \n where @var{m} is wider than the modes of @var{x} and @var{y}, which need\n not be the same.\n@@ -1874,9 +1874,9 @@ Some machines have division instructions in which the operands and\n quotient widths are not all the same; you should represent\n such instructions using @code{truncate} and @code{sign_extend} as in,\n \n-@example\n+@smallexample\n (truncate:@var{m1} (div:@var{m2} @var{x} (sign_extend:@var{m2} @var{y})))\n-@end example\n+@end smallexample\n \n @findex udiv\n @cindex unsigned division\n@@ -2232,9 +2232,9 @@ operation requires two operands of the same machine mode.\n Therefore, the byte-sized operand is enclosed in a conversion\n operation, as in\n \n-@example\n+@smallexample\n (plus:SI (sign_extend:SI (reg:QI 34)) (reg:SI 80))\n-@end example\n+@end smallexample\n \n The conversion operation is not a mere placeholder, because there\n may be more than one way of converting from a given starting mode\n@@ -2567,10 +2567,10 @@ side effect expressions---expressions of code @code{set}, @code{call},\n side-effects are computed, and second all the actual side-effects are\n performed.  For example,\n \n-@example\n+@smallexample\n (parallel [(set (reg:SI 1) (mem:SI (reg:SI 1)))\n            (set (mem:SI (reg:SI 1)) (reg:SI 1))])\n-@end example\n+@end smallexample\n \n @noindent\n says unambiguously that the values of hard register 1 and the memory\n@@ -2583,13 +2583,13 @@ expect the result of one @code{set} to be available for the next one.\n For example, people sometimes attempt to represent a jump-if-zero\n instruction this way:\n \n-@example\n+@smallexample\n (parallel [(set (cc0) (reg:SI 34))\n            (set (pc) (if_then_else\n                         (eq (cc0) (const_int 0))\n                         (label_ref @dots{})\n                         (pc)))])\n-@end example\n+@end smallexample\n \n @noindent\n But this is incorrect, because it says that the jump condition depends\n@@ -2716,9 +2716,9 @@ by is the length in bytes of the machine mode of the containing memory\n reference of which this expression serves as the address.  Here is an\n example of its use:\n \n-@example\n+@smallexample\n (mem:DF (pre_dec:SI (reg:SI 39)))\n-@end example\n+@end smallexample\n \n @noindent\n This says to decrement pseudo register 39 by the length of a @code{DFmode}\n@@ -2878,16 +2878,16 @@ chain delimited by these insns, the @code{NEXT_INSN} and\n @code{PREV_INSN} pointers must always correspond: if @var{insn} is not\n the first insn,\n \n-@example\n+@smallexample\n NEXT_INSN (PREV_INSN (@var{insn})) == @var{insn}\n-@end example\n+@end smallexample\n \n @noindent\n is always true and if @var{insn} is not the last insn,\n \n-@example\n+@smallexample\n PREV_INSN (NEXT_INSN (@var{insn})) == @var{insn}\n-@end example\n+@end smallexample\n \n @noindent\n is always true.\n@@ -3459,9 +3459,9 @@ RTL expression code, @code{call}.\n @cindex @code{call} usage\n A @code{call} expression has two operands, as follows:\n \n-@example\n+@smallexample\n (call (mem:@var{fm} @var{addr}) @var{nbytes})\n-@end example\n+@end smallexample\n \n @noindent\n Here @var{nbytes} is an operand that represents the number of bytes of\n@@ -3479,10 +3479,10 @@ For a subroutine that returns a value whose mode is not @code{BLKmode},\n the value is returned in a hard register.  If this register's number is\n @var{r}, then the body of the call insn looks like this:\n \n-@example\n+@smallexample\n (set (reg:@var{m} @var{r})\n      (call (mem:@var{fm} @var{addr}) @var{nbytes}))\n-@end example\n+@end smallexample\n \n @noindent\n This RTL expression makes it clear (to the optimizer passes) that the"}, {"sha": "97610e480d1c3f70fd55eb1155b27289847cdc7d", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33", "patch": "@@ -1,5 +1,5 @@\n @c Copyright (C) 1988,1989,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,\n-@c 2002, 2003 Free Software Foundation, Inc.\n+@c 2002, 2003, 2004 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n@@ -356,12 +356,12 @@ used.\n \n The @file{config/rs6000/rs6000.h} target file defines:\n \n-@example\n+@smallexample\n #define EXTRA_SPECS \\\n   @{ \"cpp_sysv_default\", CPP_SYSV_DEFAULT @},\n \n #define CPP_SYS_DEFAULT \"\"\n-@end example\n+@end smallexample\n \n The @file{config/rs6000/sysv.h} target file defines:\n @smallexample\n@@ -561,7 +561,7 @@ operating system, code the component name as @samp{0}.\n \n For example, here is the definition used for VAX/VMS:\n \n-@example\n+@smallexample\n #define INCLUDE_DEFAULTS \\\n @{                                       \\\n   @{ \"GNU_GXX_INCLUDE:\", \"G++\", 1, 1@},   \\\n@@ -570,7 +570,7 @@ For example, here is the definition used for VAX/VMS:\n   @{ \".\", 0, 0, 0@},                      \\\n   @{ 0, 0, 0, 0@}                         \\\n @}\n-@end example\n+@end smallexample\n @end defmac\n \n Here is the order of prefixes tried for exec files:\n@@ -1253,7 +1253,7 @@ If your aim is to make GCC use the same conventions for laying out\n bit-fields as are used by another compiler, here is how to investigate\n what the other compiler does.  Compile and run this program:\n \n-@example\n+@smallexample\n struct foo1\n @{\n   char x;\n@@ -1276,7 +1276,7 @@ main ()\n           sizeof (struct foo2));\n   exit (0);\n @}\n-@end example\n+@end smallexample\n \n If this prints 2 and 5, then the compiler's behavior is what you would\n get from @code{PCC_BITFIELD_TYPE_MATTERS}.\n@@ -1712,15 +1712,15 @@ int}.\n The C++ compiler represents a pointer-to-member-function with a struct\n that looks like:\n \n-@example\n+@smallexample\n   struct @{\n     union @{\n       void (*fn)();\n       ptrdiff_t vtable_index;\n     @};\n     ptrdiff_t delta;\n   @};\n-@end example\n+@end smallexample\n \n @noindent\n The C++ compiler must use one bit to indicate whether the function that\n@@ -2288,9 +2288,9 @@ in many of the tables described below.\n @defmac N_REG_CLASSES\n The number of distinct register classes, defined as follows:\n \n-@example\n+@smallexample\n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n-@end example\n+@end smallexample\n @end defmac\n \n @defmac REG_CLASS_NAMES\n@@ -2409,9 +2409,9 @@ to use when it is necessary to copy value @var{x} into a register in class\n another, smaller class.  On many machines, the following definition is\n safe:\n \n-@example\n+@smallexample\n #define PREFERRED_RELOAD_CLASS(X,CLASS) CLASS\n-@end example\n+@end smallexample\n \n Sometimes returning a more restrictive class makes better code.  For\n example, on the 68000, when @var{x} is an integer constant that is in range\n@@ -2623,11 +2623,11 @@ does not store the low-order 32 bits, as would be the case for a normal\n register.  Therefore, @file{alpha.h} defines @code{CANNOT_CHANGE_MODE_CLASS}\n as below:\n \n-@example\n+@smallexample\n #define CANNOT_CHANGE_MODE_CLASS(FROM, TO, CLASS) \\\n   (GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO) \\\n    ? reg_classes_intersect_p (FLOAT_REGS, (CLASS)) : 0)\n-@end example\n+@end smallexample\n @end defmac\n \n Three other special macros describe which operands fit which constraint\n@@ -3347,12 +3347,12 @@ replacing it with either the frame pointer or the argument pointer,\n depending on whether or not the frame pointer has been eliminated.\n \n In this case, you might specify:\n-@example\n+@smallexample\n #define ELIMINABLE_REGS  \\\n @{@{ARG_POINTER_REGNUM, STACK_POINTER_REGNUM@}, \\\n  @{ARG_POINTER_REGNUM, FRAME_POINTER_REGNUM@}, \\\n  @{FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM@}@}\n-@end example\n+@end smallexample\n \n Note that the elimination of the argument pointer with the stack pointer is\n specified first since that is the preferred elimination.\n@@ -3413,18 +3413,18 @@ stack when an instruction attempts to push @var{npushed} bytes.\n \n On some machines, the definition\n \n-@example\n+@smallexample\n #define PUSH_ROUNDING(BYTES) (BYTES)\n-@end example\n+@end smallexample\n \n @noindent\n will suffice.  But on other machines, instructions that appear\n to push one byte actually push two bytes in an attempt to maintain\n alignment.  Then the definition should be\n \n-@example\n+@smallexample\n #define PUSH_ROUNDING(BYTES) (((BYTES) + 1) & ~1)\n-@end example\n+@end smallexample\n @end defmac\n \n @findex current_function_outgoing_args_size\n@@ -3901,9 +3901,9 @@ second of a pair (for a value of type @code{double}, say) need not be\n recognized by this macro.  So for most machines, this definition\n suffices:\n \n-@example\n+@smallexample\n #define FUNCTION_VALUE_REGNO_P(N) ((N) == 0)\n-@end example\n+@end smallexample\n \n If the machine has register windows, so that the caller and the called\n function use different registers for the return value, this macro\n@@ -4284,9 +4284,9 @@ A function like @code{TARGET_ASM_OUTPUT_MI_THUNK}, except that if\n after adding @code{delta}.  In particular, if @var{p} is the\n adjusted pointer, the following adjustment should be made:\n \n-@example\n+@smallexample\n p += (*((ptrdiff_t **)p))[vcall_offset/sizeof(ptrdiff_t)]\n-@end example\n+@end smallexample\n \n @noindent\n If this function is defined, it will always be used in place of\n@@ -4907,9 +4907,9 @@ A C compound statement that attempts to replace @var{x} with a valid\n memory address for an operand of mode @var{mode}.  @var{win} will be a\n C statement label elsewhere in the code; the macro definition may use\n \n-@example\n+@smallexample\n GO_IF_LEGITIMATE_ADDRESS (@var{mode}, @var{x}, @var{win});\n-@end example\n+@end smallexample\n \n @noindent\n to avoid further processing if the address has become legitimate.\n@@ -6275,9 +6275,9 @@ the address of this pool entry.  The definition of this macro is\n responsible for outputting the label definition at the proper place.\n Here is how to do this:\n \n-@example\n+@smallexample\n @code{(*targetm.asm_out.internal_label)} (@var{file}, \"LC\", @var{labelno});\n-@end example\n+@end smallexample\n \n When you output a pool entry specially, you should end with a\n @code{goto} to the label @var{jumpto}.  This will prevent the same pool\n@@ -6936,9 +6936,9 @@ support a @dfn{.init} section which is executed at program startup,\n parts of @file{crtstuff.c} are compiled into that section.  The\n program is linked by the @command{gcc} driver like this:\n \n-@example\n+@smallexample\n ld -o @var{output_file} crti.o crtbegin.o @dots{} -lgcc crtend.o crtn.o\n-@end example\n+@end smallexample\n \n The prologue of a function (@code{__init}) appears in the @code{.init}\n section of @file{crti.o}; the epilogue appears in @file{crtn.o}.  Likewise\n@@ -7357,10 +7357,10 @@ definitions of these labels are output using\n @code{(*targetm.asm_out.internal_label)}, and they must be printed in the same\n way here.  For example,\n \n-@example\n+@smallexample\n fprintf (@var{stream}, \"\\t.word L%d-L%d\\n\",\n          @var{value}, @var{rel})\n-@end example\n+@end smallexample\n \n You must provide this macro on machines where the addresses in a\n dispatch table are relative to the table's own address.  If defined, GCC\n@@ -7379,9 +7379,9 @@ a label.  @var{value} is the number of an internal label whose\n definition is output using @code{(*targetm.asm_out.internal_label)}.\n For example,\n \n-@example\n+@smallexample\n fprintf (@var{stream}, \"\\t.word L%d\\n\", @var{value})\n-@end example\n+@end smallexample\n @end defmac\n \n @defmac ASM_OUTPUT_CASE_LABEL (@var{stream}, @var{prefix}, @var{num}, @var{table})"}, {"sha": "524944c53e7cb3afe11d95634cbb62d04bb8f76d", "filename": "gcc/doc/trouble.texi", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2Fdoc%2Ftrouble.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33/gcc%2Fdoc%2Ftrouble.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftrouble.texi?ref=3ab51846c1f7e5ee34c2b8606e0d751b82ba4b33", "patch": "@@ -1,5 +1,5 @@\n @c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-@c 1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n+@c 1999, 2000, 2001, 2003, 2004 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n@@ -374,11 +374,11 @@ because of problems in DEC's versions of the X11 header files\n @option{-I/usr/include/mit} to use the MIT versions of the header files,\n or fixing the header files by adding this:\n \n-@example\n+@smallexample\n #ifdef __STDC__\n #define NeedFunctionPrototypes 0\n #endif\n-@end example\n+@end smallexample\n \n @item\n On various 386 Unix systems derived from System V, including SCO, ISC,\n@@ -393,17 +393,17 @@ is available as a separate package, and also in the file\n If you have installed GNU malloc as a separate library package, use this\n option when you relink GCC:\n \n-@example\n+@smallexample\n MALLOC=/usr/local/lib/libgmalloc.a\n-@end example\n+@end smallexample\n \n Alternatively, if you have compiled @file{gmalloc.c} from Emacs 19, copy\n the object file to @file{gmalloc.o} and use this option when you relink\n GCC:\n \n-@example\n+@smallexample\n MALLOC=gmalloc.o\n-@end example\n+@end smallexample\n @end itemize\n \n @node Incompatibilities\n@@ -454,9 +454,9 @@ Negating this value yields 2147483648 again.\n GCC does not substitute macro arguments when they appear inside of\n string constants.  For example, the following macro in GCC\n \n-@example\n+@smallexample\n #define foo(a) \"a\"\n-@end example\n+@end smallexample\n \n @noindent\n will produce output @code{\"a\"} regardless of what the argument @var{a} is.\n@@ -469,7 +469,7 @@ variables guaranteed to remain valid are those declared\n @code{volatile}.  This is a consequence of automatic register\n allocation.  Consider this function:\n \n-@example\n+@smallexample\n jmp_buf j;\n \n foo ()\n@@ -484,7 +484,7 @@ foo ()\n   /* @r{@code{longjmp (j)} may occur in @code{fun3}.} */\n   return a + fun3 ();\n @}\n-@end example\n+@end smallexample\n \n Here @code{a} may or may not be restored to its first value when the\n @code{longjmp} occurs.  If @code{a} is allocated in a register, then\n@@ -500,13 +500,13 @@ Programs that use preprocessing directives in the middle of macro\n arguments do not work with GCC@.  For example, a program like this\n will not work:\n \n-@example\n+@smallexample\n @group\n foobar (\n #define luser\n         hack)\n @end group\n-@end example\n+@end smallexample\n \n ISO C does not permit such a construct.\n \n@@ -530,10 +530,10 @@ rest of the file even if it happens within a block.\n In traditional C, you can combine @code{long}, etc., with a typedef name,\n as shown here:\n \n-@example\n+@smallexample\n typedef int foo;\n typedef long foo bar;\n-@end example\n+@end smallexample\n \n In ISO C, this is not allowed: @code{long} and other type modifiers\n require an explicit @code{int}.\n@@ -546,10 +546,10 @@ PCC allows typedef names to be used as function parameters.\n Traditional C allows the following erroneous pair of declarations to\n appear together in a given scope:\n \n-@example\n+@smallexample\n typedef int foo;\n typedef foo foo;\n-@end example\n+@end smallexample\n \n @item\n GCC treats all characters of identifiers as significant.  According to\n@@ -574,11 +574,11 @@ comments enclosed in conditionals that are guaranteed to fail; if these\n comments contain apostrophes, GCC will probably report an error.  For\n example, this code would produce an error:\n \n-@example\n+@smallexample\n #if 0\n You can't expect this to work.\n #endif\n-@end example\n+@end smallexample\n \n The best solution to such a problem is to put the text into an actual\n C comment delimited by @samp{/*@dots{}*/}.\n@@ -758,14 +758,14 @@ executable and your source code, when you use optimization.\n Users often think it is a bug when GCC reports an error for code\n like this:\n \n-@example\n+@smallexample\n int foo (struct mumble *);\n \n struct mumble @{ @dots{} @};\n \n int foo (struct mumble *x)\n @{ @dots{} @}\n-@end example\n+@end smallexample\n \n This code really is erroneous, because the scope of @code{struct\n mumble} in the prototype is limited to the argument list containing it.\n@@ -866,14 +866,14 @@ give rise to questions of this sort.\n When a class has static data members, it is not enough to @emph{declare}\n the static member; you must also @emph{define} it.  For example:\n \n-@example\n+@smallexample\n class Foo\n @{\n   @dots{}\n   void method();\n   static int bar;\n @};\n-@end example\n+@end smallexample\n \n This declaration only establishes that the class @code{Foo} has an\n @code{int} named @code{Foo::bar}, and a member function named\n@@ -882,9 +882,9 @@ This declaration only establishes that the class @code{Foo} has an\n standard, you must supply an initializer in one (and only one) source\n file, such as:\n \n-@example\n+@smallexample\n int Foo::bar = 0;\n-@end example\n+@end smallexample\n \n Other C++ compilers may not correctly implement the standard behavior.\n As a result, when you switch to @command{g++} from one of these compilers,\n@@ -908,7 +908,7 @@ template parameters.  This shorter term will also be used in the rest of\n this section.}  Only names that are dependent are looked up at the point\n of instantiation.  For example, consider\n \n-@example\n+@smallexample\n   void foo(double);\n \n   struct A @{\n@@ -923,7 +923,7 @@ of instantiation.  For example, consider\n \n     static const int N;\n   @};\n-@end example\n+@end smallexample\n \n Here, the names @code{foo} and @code{N} appear in a context that does\n not depend on the type of @code{T}.  The compiler will thus require that\n@@ -947,15 +947,15 @@ since version 3.4.\n Two-stage name lookup sometimes leads to situations with behavior\n different from non-template codes. The most common is probably this:\n \n-@example\n+@smallexample\n   template <typename T> struct Base @{\n     int i;\n   @};\n \n   template <typename T> struct Derived : public Base<T> @{\n     int get_i() @{ return i; @}\n   @};\n-@end example\n+@end smallexample\n \n In @code{get_i()}, @code{i} is not used in a dependent context, so the\n compiler will look for a name declared at the enclosing namespace scope\n@@ -976,15 +976,15 @@ into scope by a @code{using}-declaration.\n Another, similar example involves calling member functions of a base\n class: \n \n-@example\n+@smallexample\n   template <typename T> struct Base @{\n       int f();\n   @};\n \n   template <typename T> struct Derived : Base<T> @{\n       int g() @{ return f(); @};\n   @};\n-@end example\n+@end smallexample\n \n Again, the call to @code{f()} is not dependent on template arguments\n (there are no arguments that depend on the type @code{T}, and it is also\n@@ -993,13 +993,13 @@ Thus a global declaration of such a function must be available, since\n the one in the base class is not visible until instantiation time.  The\n compiler will consequently produce the following error message:\n \n-@example\n+@smallexample\n   x.cc: In member function `int Derived<T>::g()':\n   x.cc:6: error: there are no arguments to `f' that depend on a template\n      parameter, so a declaration of `f' must be available\n   x.cc:6: error: (if you use `-fpermissive', G++ will accept your code, but\n      allowing the use of an undeclared name is deprecated)\n-@end example\n+@end smallexample\n \n To make the code valid either use @code{this->f()}, or\n @code{Base<T>::f()}.  Using the @code{-fpermissive} flag will also let\n@@ -1035,7 +1035,7 @@ For example, a program may use a function @code{strfunc} that returns\n @code{string} objects, and another function @code{charfunc} that\n operates on pointers to @code{char}:\n \n-@example\n+@smallexample\n string strfunc ();\n void charfunc (const char *);\n \n@@ -1048,7 +1048,7 @@ f ()\n   @dots{}\n   charfunc (p);\n @}\n-@end example\n+@end smallexample\n \n @noindent\n In this situation, it may seem reasonable to save a pointer to the C\n@@ -1067,10 +1067,10 @@ The safe way to write such code is to give the temporary a name, which\n forces it to remain until the end of the scope of the name.  For\n example:\n \n-@example\n+@smallexample\n string& tmp = strfunc ();\n charfunc (tmp.c_str ());\n-@end example\n+@end smallexample\n \n @node Copy Assignment\n @subsection Implicit Copy-Assignment for Virtual Bases\n@@ -1080,7 +1080,7 @@ belongs to each full object.  Also, the constructors and destructors are\n invoked only once, and called from the most-derived class.  However, such\n objects behave unspecified when being assigned.  For example:\n \n-@example\n+@smallexample\n struct Base@{\n   char *name;\n   Base(char *n) : name(strdup(n))@{@}\n@@ -1108,7 +1108,7 @@ void func(Derived &d1, Derived &d2)\n @{\n   d1 = d2;\n @}\n-@end example\n+@end smallexample\n \n The C++ standard specifies that @samp{Base::Base} is only called once\n when constructing or copy-constructing a Derived object.  It is\n@@ -1404,12 +1404,12 @@ It is never safe to depend on the order of evaluation of side effects.\n For example, a function call like this may very well behave differently\n from one compiler to another:\n \n-@example\n+@smallexample\n void func (int, int);\n \n int i = 2;\n func (i++, i++);\n-@end example\n+@end smallexample\n \n There is no guarantee (in either the C or the C++ standard language\n definitions) that the increments will be evaluated in any particular"}]}