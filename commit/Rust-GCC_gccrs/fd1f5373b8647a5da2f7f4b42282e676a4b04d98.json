{"sha": "fd1f5373b8647a5da2f7f4b42282e676a4b04d98", "node_id": "C_kwDOANBUbNoAKGZkMWY1MzczYjg2NDdhNWRhMmY3ZjRiNDIyODJlNjc2YTRiMDRkOTg", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2023-01-12T21:47:40Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2023-01-12T21:48:50Z"}, "message": "PR tree-optimization/92342: Optimize b & -(a==c) in match.pd\n\nThis patch is an update/tweak of Andrew Pinski's two patches for\nPR tree-optimization/92342, that were originally posted by in November:\nhttps://gcc.gnu.org/pipermail/gcc-patches/2021-November/585111.html\nhttps://gcc.gnu.org/pipermail/gcc-patches/2021-November/585112.html\n\nTechnically, the first of those was approved by Richard Biener, though\nnever committed, and my first thought was to simply push it for Andrew,\nbut the review of the second piece expressed concerns over comparisons\nin non-integral modes, where the result may not be zero-one valued.\nIndeed both transformations misbehave in the presence of vector mode\ncomparisons (these transformations are already implemented for\nvec_cond elsewhere in match.pd), so my minor contribution is to limit\nthese new transformations to scalars, by testing that both the operands\nand results are INTEGRAL_TYPE_P.\n\n2023-01-12  Andrew Pinski  <apinski@marvell.com>\n\t    Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog:\n\tPR tree-optimization/92342\n\t* match.pd ((m1 CMP m2) * d -> (m1 CMP m2) ? d : 0):\n\tUse tcc_comparison and :c for the multiply.\n\t(b & -(a CMP c) -> (a CMP c)?b:0): New pattern.\n\ngcc/testsuite/ChangeLog:\n\tPR tree-optimization/92342\n\t* gcc.dg/tree-ssa/andnegcmp-1.c: New test.\n\t* gcc.dg/tree-ssa/andnegcmp-2.c: New test.\n\t* gcc.dg/tree-ssa/multcmp-1.c: New test.\n\t* gcc.dg/tree-ssa/multcmp-2.c: New test.", "tree": {"sha": "e21472d7808c70cc3870b07bc4fd367d0ea30b38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e21472d7808c70cc3870b07bc4fd367d0ea30b38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd1f5373b8647a5da2f7f4b42282e676a4b04d98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd1f5373b8647a5da2f7f4b42282e676a4b04d98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd1f5373b8647a5da2f7f4b42282e676a4b04d98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd1f5373b8647a5da2f7f4b42282e676a4b04d98/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f629f63d2d9d7ad2c43f8e451f0f6e32b5f4d06a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f629f63d2d9d7ad2c43f8e451f0f6e32b5f4d06a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f629f63d2d9d7ad2c43f8e451f0f6e32b5f4d06a"}], "stats": {"total": 68, "additions": 65, "deletions": 3}, "files": [{"sha": "56ac743aa6ddd1570295712fd1a41c154f97185f", "filename": "gcc/match.pd", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1f5373b8647a5da2f7f4b42282e676a4b04d98/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1f5373b8647a5da2f7f4b42282e676a4b04d98/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=fd1f5373b8647a5da2f7f4b42282e676a4b04d98", "patch": "@@ -2076,10 +2076,20 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \n /* (m1 CMP m2) * d -> (m1 CMP m2) ? d : 0  */\n (if (!canonicalize_math_p ())\n- (for cmp (gt lt ge le)\n+ (for cmp (tcc_comparison)\n   (simplify\n-   (mult (convert (cmp @0 @1)) @2)\n-   (cond (cmp @0 @1) @2 { build_zero_cst (type); }))))\n+   (mult:c (convert (cmp@0 @1 @2)) @3)\n+   (if (INTEGRAL_TYPE_P (type)\n+\t&& INTEGRAL_TYPE_P (TREE_TYPE (@0)))\n+     (cond @0 @3 { build_zero_cst (type); })))\n+/* (-(m1 CMP m2)) & d -> (m1 CMP m2) ? d : 0  */\n+  (simplify\n+   (bit_and:c (negate (convert (cmp@0 @1 @2))) @3)\n+   (if (INTEGRAL_TYPE_P (type)\n+\t&& INTEGRAL_TYPE_P (TREE_TYPE (@0)))\n+     (cond @0 @3 { build_zero_cst (type); })))\n+ )\n+)\n \n /* For integral types with undefined overflow and C != 0 fold\n    x * C EQ/NE y * C into x EQ/NE y.  */"}, {"sha": "6f16783f169169a5bc3a7966d9645221ae212130", "filename": "gcc/testsuite/gcc.dg/tree-ssa/andnegcmp-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1f5373b8647a5da2f7f4b42282e676a4b04d98/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fandnegcmp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1f5373b8647a5da2f7f4b42282e676a4b04d98/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fandnegcmp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fandnegcmp-1.c?ref=fd1f5373b8647a5da2f7f4b42282e676a4b04d98", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* PR tree-optimization/92342 */\n+\n+int\n+f (int m1, int m2, int c)\n+{\n+  int d = m1 == m2;\n+  d = -d;\n+  int e = d & c;\n+  return e;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"\\\\? c_\\[0-9\\]\\\\(D\\\\) : 0\" 1 \"optimized\" } } */"}, {"sha": "0e25c8abc39f8c1256f225c942cf2c6a16ee2dd5", "filename": "gcc/testsuite/gcc.dg/tree-ssa/andnegcmp-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1f5373b8647a5da2f7f4b42282e676a4b04d98/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fandnegcmp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1f5373b8647a5da2f7f4b42282e676a4b04d98/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fandnegcmp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fandnegcmp-2.c?ref=fd1f5373b8647a5da2f7f4b42282e676a4b04d98", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* PR tree-optimization/92342 */\n+\n+int\n+f (int m1, int m2, int c)\n+{\n+  int d = m1 < m2;\n+  d = -d;\n+  int e = c & d;\n+  return e;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"\\\\? c_\\[0-9\\]\\\\(D\\\\) : 0\" 1 \"optimized\" } } */"}, {"sha": "fb44cacde773446ea628c3838264c8d7c109750d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/multcmp-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1f5373b8647a5da2f7f4b42282e676a4b04d98/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fmultcmp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1f5373b8647a5da2f7f4b42282e676a4b04d98/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fmultcmp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fmultcmp-1.c?ref=fd1f5373b8647a5da2f7f4b42282e676a4b04d98", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int\n+f (int m1, int m2, int c)\n+{\n+  int d = m1 == m2;\n+  int e = d * c;\n+  return e;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"\\\\? c_\\[0-9\\]\\\\(D\\\\) : 0\" 1 \"optimized\" } } */"}, {"sha": "be38b2e0044b9917914a28a03b5cce261fc7f721", "filename": "gcc/testsuite/gcc.dg/tree-ssa/multcmp-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1f5373b8647a5da2f7f4b42282e676a4b04d98/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fmultcmp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1f5373b8647a5da2f7f4b42282e676a4b04d98/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fmultcmp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fmultcmp-2.c?ref=fd1f5373b8647a5da2f7f4b42282e676a4b04d98", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int\n+f (int m1, int m2, int c)\n+{\n+  int d = m1 != m2;\n+  int e = c * d;\n+  return e;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"\\\\? c_\\[0-9\\]\\\\(D\\\\) : 0\" 1 \"optimized\" } } */"}]}