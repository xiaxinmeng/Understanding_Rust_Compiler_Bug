{"sha": "44fef04ab18f57111e7d9f7dcd88d76a3c7bfc09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRmZWYwNGFiMThmNTcxMTFlN2Q5ZjdkY2Q4OGQ3NmEzYzdiZmMwOQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-08-03T08:14:42Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-08-03T08:14:42Z"}, "message": "[RTL-ifcvt] Improve conditional select ops on immediates\n\n\t* ifcvt.c (noce_try_store_flag_constants): Make logic of the case\n\twhen diff == STORE_FLAG_VALUE or diff == -STORE_FLAG_VALUE more\n\texplicit.  Prefer to add the flag whenever possible.\n\t(noce_process_if_block): Try noce_try_store_flag_constants before\n\tnoce_try_cmove.\n\n\t* gcc.target/aarch64/csel_bfx_1.c: New test.\n\t* gcc.target/aarch64/csel_imms_inc_1.c: Likewise.\n\nFrom-SVN: r226491", "tree": {"sha": "826e24effa94dee676cf043a311912c2d3c9f2ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/826e24effa94dee676cf043a311912c2d3c9f2ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44fef04ab18f57111e7d9f7dcd88d76a3c7bfc09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44fef04ab18f57111e7d9f7dcd88d76a3c7bfc09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44fef04ab18f57111e7d9f7dcd88d76a3c7bfc09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44fef04ab18f57111e7d9f7dcd88d76a3c7bfc09/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "03038b8b7ad8e68a203cecdc43a44ee5ddbb7f6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03038b8b7ad8e68a203cecdc43a44ee5ddbb7f6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03038b8b7ad8e68a203cecdc43a44ee5ddbb7f6f"}], "stats": {"total": 129, "additions": 118, "deletions": 11}, "files": [{"sha": "dac24ddd44f8995267fa3aa9b7a0e810b32de335", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44fef04ab18f57111e7d9f7dcd88d76a3c7bfc09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44fef04ab18f57111e7d9f7dcd88d76a3c7bfc09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44fef04ab18f57111e7d9f7dcd88d76a3c7bfc09", "patch": "@@ -1,3 +1,11 @@\n+2015-08-03  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* ifcvt.c (noce_try_store_flag_constants): Make logic of the case\n+\twhen diff == STORE_FLAG_VALUE or diff == -STORE_FLAG_VALUE more\n+\texplicit.  Prefer to add the flag whenever possible.\n+\t(noce_process_if_block): Try noce_try_store_flag_constants before\n+\tnoce_try_cmove.\n+\n 2015-08-03  Richard Biener  <rguenther@suse.de>\n \n \t* genmatch.c (struct sinfo, struct sinfo_hashmap_traits, sinfo_map_t):"}, {"sha": "1f2964651f8af7a430a3bd565e4d3bec0c542e5a", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 52, "deletions": 11, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44fef04ab18f57111e7d9f7dcd88d76a3c7bfc09/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44fef04ab18f57111e7d9f7dcd88d76a3c7bfc09/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=44fef04ab18f57111e7d9f7dcd88d76a3c7bfc09", "patch": "@@ -1159,9 +1159,10 @@ noce_try_store_flag_constants (struct noce_if_info *if_info)\n {\n   rtx target;\n   rtx_insn *seq;\n-  int reversep;\n+  bool reversep;\n   HOST_WIDE_INT itrue, ifalse, diff, tmp;\n-  int normalize, can_reverse;\n+  int normalize;\n+  bool can_reverse;\n   machine_mode mode;\n \n   if (CONST_INT_P (if_info->a)\n@@ -1170,6 +1171,7 @@ noce_try_store_flag_constants (struct noce_if_info *if_info)\n       mode = GET_MODE (if_info->x);\n       ifalse = INTVAL (if_info->a);\n       itrue = INTVAL (if_info->b);\n+      bool subtract_flag_p = false;\n \n       diff = (unsigned HOST_WIDE_INT) itrue - ifalse;\n       /* Make sure we can represent the difference between the two values.  */\n@@ -1182,23 +1184,61 @@ noce_try_store_flag_constants (struct noce_if_info *if_info)\n       can_reverse = (reversed_comparison_code (if_info->cond, if_info->jump)\n \t\t     != UNKNOWN);\n \n-      reversep = 0;\n+      reversep = false;\n       if (diff == STORE_FLAG_VALUE || diff == -STORE_FLAG_VALUE)\n-\tnormalize = 0;\n+\t{\n+\t  normalize = 0;\n+\t  /* We could collapse these cases but it is easier to follow the\n+\t     diff/STORE_FLAG_VALUE combinations when they are listed\n+\t     explicitly.  */\n+\n+\t  /* test ? 3 : 4\n+\t     => 4 + (test != 0).  */\n+\t  if (diff < 0 && STORE_FLAG_VALUE < 0)\n+\t      reversep = false;\n+\t  /* test ? 4 : 3\n+\t     => can_reverse  | 4 + (test == 0)\n+\t\t!can_reverse | 3 - (test != 0).  */\n+\t  else if (diff > 0 && STORE_FLAG_VALUE < 0)\n+\t    {\n+\t      reversep = can_reverse;\n+\t      subtract_flag_p = !can_reverse;\n+\t    }\n+\t  /* test ? 3 : 4\n+\t     => can_reverse  | 3 + (test == 0)\n+\t\t!can_reverse | 4 - (test != 0).  */\n+\t  else if (diff < 0 && STORE_FLAG_VALUE > 0)\n+\t    {\n+\t      reversep = can_reverse;\n+\t      subtract_flag_p = !can_reverse;\n+\t    }\n+\t  /* test ? 4 : 3\n+\t     => 4 + (test != 0).  */\n+\t  else if (diff > 0 && STORE_FLAG_VALUE > 0)\n+\t    reversep = false;\n+\t  else\n+\t    gcc_unreachable ();\n+\t}\n       else if (ifalse == 0 && exact_log2 (itrue) >= 0\n \t       && (STORE_FLAG_VALUE == 1\n \t\t   || if_info->branch_cost >= 2))\n \tnormalize = 1;\n       else if (itrue == 0 && exact_log2 (ifalse) >= 0 && can_reverse\n \t       && (STORE_FLAG_VALUE == 1 || if_info->branch_cost >= 2))\n-\tnormalize = 1, reversep = 1;\n+\t{\n+\t  normalize = 1;\n+\t  reversep = true;\n+\t}\n       else if (itrue == -1\n \t       && (STORE_FLAG_VALUE == -1\n \t\t   || if_info->branch_cost >= 2))\n \tnormalize = -1;\n       else if (ifalse == -1 && can_reverse\n \t       && (STORE_FLAG_VALUE == -1 || if_info->branch_cost >= 2))\n-\tnormalize = -1, reversep = 1;\n+\t{\n+\t  normalize = -1;\n+\t  reversep = true;\n+\t}\n       else if ((if_info->branch_cost >= 2 && STORE_FLAG_VALUE == -1)\n \t       || if_info->branch_cost >= 3)\n \tnormalize = -1;\n@@ -1223,9 +1263,9 @@ noce_try_store_flag_constants (struct noce_if_info *if_info)\n \t =>   x = 3 + (test == 0);  */\n       if (diff == STORE_FLAG_VALUE || diff == -STORE_FLAG_VALUE)\n \t{\n-\t  target = expand_simple_binop (mode,\n-\t\t\t\t\t(diff == STORE_FLAG_VALUE\n-\t\t\t\t\t ? PLUS : MINUS),\n+\t  /* Always use ifalse here.  It should have been swapped with itrue\n+\t     when appropriate when reversep is true.  */\n+\t  target = expand_simple_binop (mode, subtract_flag_p ? MINUS : PLUS,\n \t\t\t\t\tgen_int_mode (ifalse, mode), target,\n \t\t\t\t\tif_info->x, 0, OPTAB_WIDEN);\n \t}\n@@ -2731,13 +2771,14 @@ noce_process_if_block (struct noce_if_info *if_info)\n     goto success;\n   if (noce_try_abs (if_info))\n     goto success;\n+  if (!targetm.have_conditional_execution ()\n+      && noce_try_store_flag_constants (if_info))\n+    goto success;\n   if (HAVE_conditional_move\n       && noce_try_cmove (if_info))\n     goto success;\n   if (! targetm.have_conditional_execution ())\n     {\n-      if (noce_try_store_flag_constants (if_info))\n-\tgoto success;\n       if (noce_try_addcc (if_info))\n \tgoto success;\n       if (noce_try_store_flag_mask (if_info))"}, {"sha": "640289c2c4d1eaa40eea4b6bbb9f9dc0a26c3569", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44fef04ab18f57111e7d9f7dcd88d76a3c7bfc09/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44fef04ab18f57111e7d9f7dcd88d76a3c7bfc09/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=44fef04ab18f57111e7d9f7dcd88d76a3c7bfc09", "patch": "@@ -1,3 +1,8 @@\n+2015-08-03  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/csel_bfx_1.c: New test.\n+\t* gcc.target/aarch64/csel_imms_inc_1.c: Likewise.\n+\n 2015-08-02  Martin Sebor  <msebor@redhat.com>\n \n         * g++.dg/Wframe-address-in-Wall.C: New test."}, {"sha": "c20597f5f7ede000918920551a340c546ad4821e", "filename": "gcc/testsuite/gcc.target/aarch64/csel_bfx_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44fef04ab18f57111e7d9f7dcd88d76a3c7bfc09/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcsel_bfx_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44fef04ab18f57111e7d9f7dcd88d76a3c7bfc09/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcsel_bfx_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcsel_bfx_1.c?ref=44fef04ab18f57111e7d9f7dcd88d76a3c7bfc09", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O2\" } */\n+\n+int\n+foo (int a, int b)\n+{\n+  return ((a & (1 << 25)) ? 5 : 4);\n+}\n+\n+/* { dg-final { scan-assembler \"ubfx\\t\\[xw\\]\\[0-9\\]*.*\" } } */\n+/* { dg-final { scan-assembler-not \"csel\\tw\\[0-9\\]*.*\" } } */"}, {"sha": "2ae434da5a08f160050e07a6226cb21e70a99029", "filename": "gcc/testsuite/gcc.target/aarch64/csel_imms_inc_1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44fef04ab18f57111e7d9f7dcd88d76a3c7bfc09/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcsel_imms_inc_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44fef04ab18f57111e7d9f7dcd88d76a3c7bfc09/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcsel_imms_inc_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcsel_imms_inc_1.c?ref=44fef04ab18f57111e7d9f7dcd88d76a3c7bfc09", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O2 -fno-inline\" } */\n+\n+extern void abort (void);\n+\n+int\n+fooinc (int x)\n+{\n+  if (x)\n+    return 1025;\n+  else\n+    return 1026;\n+}\n+\n+int\n+fooinc2 (int x)\n+{\n+  if (x)\n+    return 1026;\n+  else\n+    return 1025;\n+}\n+\n+int\n+main (void)\n+{\n+  if (fooinc (0) != 1026)\n+    abort ();\n+\n+  if (fooinc (1) != 1025)\n+    abort ();\n+\n+  if (fooinc2 (0) != 1025)\n+    abort ();\n+\n+  if (fooinc2 (1) != 1026)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"csel\\tw\\[0-9\\]*.*\" } } */"}]}