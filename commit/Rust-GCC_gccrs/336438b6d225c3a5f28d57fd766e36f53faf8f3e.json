{"sha": "336438b6d225c3a5f28d57fd766e36f53faf8f3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM2NDM4YjZkMjI1YzNhNWYyOGQ1N2ZkNzY2ZTM2ZjUzZmFmOGYzZQ==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2021-03-31T12:00:59Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-21T10:45:12Z"}, "message": "[Ada] Implement 'Valid_Value attribute\n\ngcc/ada/\n\n\t* libgnat/s-valuen.ads, libgnat/s-valuen.adb\n\t(Value_Enumeration_Pos): New function to compute the 'Pos of the\n\tenumeration literal for a given String.  Return a special value\n\tinstead of raising an exception on invalid input. Called by both\n\tValid_Enumeration_Image and Value_Enumeration.\n\t(Valid_Enumeration_Image): Return a Boolean indicating whether\n\tthe String is a valid Image for the given enumeration type.\n\t(Value_Enumeration): Implement in terms of\n\tValue_Enumeration_Pos.\n\t* libgnat/s-vaenu8.ads, libgnat/s-vaen16.ads,\n\tlibgnat/s-vaen32.ads: Rename Valid_Enumeration_Image from the\n\tinstances.\n\t* libgnat/s-valuti.ads: Correct documentation (it was not true\n\tfor the null string).\n\t* libgnat/s-valuti.adb (Normalize_String): Do not raise\n\tConstraint_Error for the null string, nor strings containing\n\tnothing but blanks, so that Valid_Enumeration_Image can return\n\tFalse in these cases, rather than raising an exception.\n\t* rtsfind.ads (RE_Value_Enumeration_8, RE_Value_Enumeration_16,\n\tRE_Value_Enumeration_32): New functions.\n\t(RTE_Available): Improve comment (E doesn't have to be a\n\tsubprogram, although that's the usual case).\n\t* sem_attr.adb (nalid_Value): Semantic analysis for new\n\tattribute.\n\t* exp_attr.adb: Call Expand_Valid_Value_Attribute for new\n\tattribute.\n\t* exp_imgv.ads, exp_imgv.adb (Expand_Valid_Value_Attribute): New\n\tprocedure to expand Valid_Value into a call to\n\tValid_Enumeration_Image_NN.\n\t(Expand_Value_Attribute): Misc code cleanups.  Remove two ???\n\tmark comments. RTE_Available won't work here.  For one thing,\n\tRTE_Available (X) shouldn't be called until the compiler has\n\tdecided to make use of X (see comments on RTE_Available), and in\n\tthis case we're trying to AVOID calling something.\n\t* snames.ads-tmpl: New attribute name.\n\t* doc/gnat_rm/implementation_defined_attributes.rst: Document\n\tnew attribute.\n\t* gnat_rm.texi: Regenerate.", "tree": {"sha": "4d9c8a37c32c67c6121686a39ed3a053d7b79556", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d9c8a37c32c67c6121686a39ed3a053d7b79556"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/336438b6d225c3a5f28d57fd766e36f53faf8f3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/336438b6d225c3a5f28d57fd766e36f53faf8f3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/336438b6d225c3a5f28d57fd766e36f53faf8f3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/336438b6d225c3a5f28d57fd766e36f53faf8f3e/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f34e744c0bdb8b3f767463f290a32bc671bfcc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f34e744c0bdb8b3f767463f290a32bc671bfcc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f34e744c0bdb8b3f767463f290a32bc671bfcc8"}], "stats": {"total": 1259, "additions": 748, "deletions": 511}, "files": [{"sha": "0df103bf618db3f0439d1ecc5841b86f39444059", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_attributes.rst", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst?ref=336438b6d225c3a5f28d57fd766e36f53faf8f3e", "patch": "@@ -1587,6 +1587,15 @@ Multi-dimensional arrays can be modified, as shown by this example:\n \n which changes element (1,2) to 20 and (3,4) to 30.\n \n+Attribute Valid_Image\n+=======================\n+.. index:: Valid_Image\n+\n+The ``'Valid_Image`` attribute is defined for enumeration types other than\n+those in package Standard. This attribute is a function that takes\n+a String, and returns Boolean. ``T'Valid_Image (S)`` returns True\n+if and only if ``T'Value (S)`` would not raise Constraint_Error.\n+\n Attribute Valid_Scalars\n =======================\n .. index:: Valid_Scalars"}, {"sha": "400398dcbc560e5f25b8ce114c291785fdbe4cd8", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=336438b6d225c3a5f28d57fd766e36f53faf8f3e", "patch": "@@ -7384,6 +7384,13 @@ package body Exp_Attr is\n          Validity_Checks_On := Save_Validity_Checks_On;\n       end Valid;\n \n+      -----------------\n+      -- Valid_Value --\n+      -----------------\n+\n+      when Attribute_Valid_Value =>\n+         Exp_Imgv.Expand_Valid_Value_Attribute (N);\n+\n       -------------------\n       -- Valid_Scalars --\n       -------------------\n@@ -7567,14 +7574,9 @@ package body Exp_Attr is\n       --    typ'Value\n       --      (Wide_Wide_String_To_String (X, Wide_Character_Encoding_Method))\n \n-      --  Wide_Wide_String_To_String is a runtime function that converts its\n-      --  wide string argument to String, converting any non-translatable\n-      --  characters into appropriate escape sequences. This preserves the\n-      --  required semantics of Wide_Wide_Value in all cases, and results in a\n-      --  very simple implementation approach.\n-\n-      --  It's not quite right where typ = Wide_Wide_Character, because the\n-      --  encoding method may not cover the whole character type ???\n+      --  See Wide_Value for more information. This is not quite right where\n+      --  typ = Wide_Wide_Character, because the encoding method may not cover\n+      --  the whole character type.\n \n       when Attribute_Wide_Wide_Value =>\n          Rewrite (N,"}, {"sha": "38ee11e5d66710618acad34cb51de2b3dbbe5ab0", "filename": "gcc/ada/exp_imgv.adb", "status": "modified", "additions": 83, "deletions": 23, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Fexp_imgv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Fexp_imgv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_imgv.adb?ref=336438b6d225c3a5f28d57fd766e36f53faf8f3e", "patch": "@@ -1422,6 +1422,71 @@ package body Exp_Imgv is\n       Analyze_And_Resolve (N, Standard_String, Suppress => All_Checks);\n    end Expand_Image_Attribute;\n \n+   ----------------------------------\n+   -- Expand_Valid_Value_Attribute --\n+   ----------------------------------\n+\n+   procedure Expand_Valid_Value_Attribute (N : Node_Id) is\n+      Loc   : constant Source_Ptr := Sloc (N);\n+      Btyp  : constant Entity_Id  := Base_Type (Entity (Prefix (N)));\n+      Rtyp  : constant Entity_Id  := Root_Type (Btyp);\n+      pragma Assert (Is_Enumeration_Type (Rtyp));\n+\n+      Args  : constant List_Id := Expressions (N);\n+      Func  : RE_Id;\n+      Ttyp  : Entity_Id;\n+\n+   begin\n+      --  Generate:\n+\n+      --     Valid_Enumeration_Value _NN\n+      --       (typS, typN'Address, typH'Unrestricted_Access, Num, X)\n+\n+      Ttyp := Component_Type (Etype (Lit_Indexes (Rtyp)));\n+\n+      if Ttyp = Standard_Integer_8 then\n+         Func := RE_Valid_Enumeration_Value_8;\n+      elsif Ttyp = Standard_Integer_16 then\n+         Func := RE_Valid_Enumeration_Value_16;\n+      else\n+         Func := RE_Valid_Enumeration_Value_32;\n+      end if;\n+\n+      Prepend_To (Args,\n+        Make_Attribute_Reference (Loc,\n+          Prefix => New_Occurrence_Of (Rtyp, Loc),\n+          Attribute_Name => Name_Pos,\n+          Expressions => New_List (\n+            Make_Attribute_Reference (Loc,\n+              Prefix => New_Occurrence_Of (Rtyp, Loc),\n+              Attribute_Name => Name_Last))));\n+\n+      if Present (Lit_Hash (Rtyp)) then\n+         Prepend_To (Args,\n+           Make_Attribute_Reference (Loc,\n+             Prefix => New_Occurrence_Of (Lit_Hash (Rtyp), Loc),\n+             Attribute_Name => Name_Unrestricted_Access));\n+      else\n+         Prepend_To (Args, Make_Null (Loc));\n+      end if;\n+\n+      Prepend_To (Args,\n+        Make_Attribute_Reference (Loc,\n+          Prefix => New_Occurrence_Of (Lit_Indexes (Rtyp), Loc),\n+          Attribute_Name => Name_Address));\n+\n+      Prepend_To (Args,\n+        New_Occurrence_Of (Lit_Strings (Rtyp), Loc));\n+\n+      Rewrite (N,\n+        Make_Function_Call (Loc,\n+          Name =>\n+            New_Occurrence_Of (RTE (Func), Loc),\n+          Parameter_Associations => Args));\n+\n+      Analyze_And_Resolve (N, Standard_Boolean);\n+   end Expand_Valid_Value_Attribute;\n+\n    ----------------------------\n    -- Expand_Value_Attribute --\n    ----------------------------\n@@ -1490,28 +1555,26 @@ package body Exp_Imgv is\n \n    procedure Expand_Value_Attribute (N : Node_Id) is\n       Loc   : constant Source_Ptr := Sloc (N);\n-      Typ   : constant Entity_Id  := Etype (N);\n-      Btyp  : constant Entity_Id  := Base_Type (Typ);\n-      Rtyp  : constant Entity_Id  := Root_Type (Typ);\n-      Exprs : constant List_Id    := Expressions (N);\n-      Args  : List_Id;\n-      Func  : RE_Id;\n+      Btyp  : constant Entity_Id  := Etype (N);\n+      pragma Assert (Is_Base_Type (Btyp));\n+      pragma Assert (Btyp = Base_Type (Entity (Prefix (N))));\n+      Rtyp  : constant Entity_Id  := Root_Type (Btyp);\n+\n+      Args  : constant List_Id := Expressions (N);\n       Ttyp  : Entity_Id;\n       Vid   : RE_Id;\n \n    begin\n-      Args := Exprs;\n-\n       --  Fall through for all cases except user-defined enumeration type\n       --  and decimal types, with Vid set to the Id of the entity for the\n       --  Value routine and Args set to the list of parameters for the call.\n \n-      if Rtyp = Standard_Character then\n-         Vid := RE_Value_Character;\n-\n-      elsif Rtyp = Standard_Boolean then\n+      if Rtyp = Standard_Boolean then\n          Vid := RE_Value_Boolean;\n \n+      elsif Rtyp = Standard_Character then\n+         Vid := RE_Value_Character;\n+\n       elsif Rtyp = Standard_Wide_Character then\n          Vid := RE_Value_Wide_Character;\n \n@@ -1633,7 +1696,7 @@ package body Exp_Imgv is\n          --  Case of pragma Discard_Names, transform the Value\n          --  attribute to Btyp'Val (Long_Long_Integer'Value (Args))\n \n-         if Discard_Names (First_Subtype (Typ))\n+         if Discard_Names (First_Subtype (Btyp))\n            or else No (Lit_Strings (Rtyp))\n          then\n             Rewrite (N,\n@@ -1659,11 +1722,11 @@ package body Exp_Imgv is\n             Ttyp := Component_Type (Etype (Lit_Indexes (Rtyp)));\n \n             if Ttyp = Standard_Integer_8 then\n-               Func := RE_Value_Enumeration_8;\n+               Vid := RE_Value_Enumeration_8;\n             elsif Ttyp = Standard_Integer_16 then\n-               Func := RE_Value_Enumeration_16;\n+               Vid := RE_Value_Enumeration_16;\n             else\n-               Func := RE_Value_Enumeration_32;\n+               Vid := RE_Value_Enumeration_32;\n             end if;\n \n             Prepend_To (Args,\n@@ -1694,12 +1757,12 @@ package body Exp_Imgv is\n \n             Rewrite (N,\n               Make_Attribute_Reference (Loc,\n-                Prefix => New_Occurrence_Of (Typ, Loc),\n+                Prefix => New_Occurrence_Of (Btyp, Loc),\n                 Attribute_Name => Name_Val,\n                 Expressions => New_List (\n                   Make_Function_Call (Loc,\n                     Name =>\n-                      New_Occurrence_Of (RTE (Func), Loc),\n+                      New_Occurrence_Of (RTE (Vid), Loc),\n                     Parameter_Associations => Args))));\n \n             Analyze_And_Resolve (N, Btyp);\n@@ -1711,11 +1774,7 @@ package body Exp_Imgv is\n       --  Compiling package Ada.Tags under No_Run_Time_Mode we disable the\n       --  expansion of the attribute into the function call statement to avoid\n       --  generating spurious errors caused by the use of Integer_Address'Value\n-      --  in our implementation of Ada.Tags.Internal_Tag\n-\n-      --  Seems like a bit of a odd approach, there should be a better way ???\n-\n-      --  There is a better way, test RTE_Available ???\n+      --  in our implementation of Ada.Tags.Internal_Tag.\n \n       if No_Run_Time_Mode\n         and then Is_RTE (Rtyp, RE_Integer_Address)\n@@ -1726,6 +1785,7 @@ package body Exp_Imgv is\n          Rewrite (N,\n            Unchecked_Convert_To (Rtyp,\n              Make_Integer_Literal (Loc, Uint_0)));\n+\n       else\n          Rewrite (N,\n            Convert_To (Btyp,"}, {"sha": "f6ce1727bebef16d7925a7f699e0b67a3e3b12ff", "filename": "gcc/ada/exp_imgv.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Fexp_imgv.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Fexp_imgv.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_imgv.ads?ref=336438b6d225c3a5f28d57fd766e36f53faf8f3e", "patch": "@@ -85,6 +85,10 @@ package Exp_Imgv is\n    --  This procedure is called from Exp_Attr to expand an occurrence of the\n    --  attribute Wide_Wide_Image.\n \n+   procedure Expand_Valid_Value_Attribute (N : Node_Id);\n+   --  This procedure is called from Exp_Attr to expand an occurrence of the\n+   --  attribute Valid_Value.\n+\n    procedure Expand_Value_Attribute (N : Node_Id);\n    --  This procedure is called from Exp_Attr to expand an occurrence of the\n    --  attribute Value."}, {"sha": "e7c97f3071e95b76e24fb49b5bf7a65553fafc3c", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 450, "deletions": 436, "changes": 886, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=336438b6d225c3a5f28d57fd766e36f53faf8f3e"}, {"sha": "86cdaa10fd168da4c518442dd6728f6fc8e8ae09", "filename": "gcc/ada/libgnat/s-vaen16.ads", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Flibgnat%2Fs-vaen16.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Flibgnat%2Fs-vaen16.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-vaen16.ads?ref=336438b6d225c3a5f28d57fd766e36f53faf8f3e", "patch": "@@ -30,7 +30,7 @@\n ------------------------------------------------------------------------------\n \n --  Instantiation of System.Value_N for enumeration types whose names table\n---  has a length that fits in a 16-bit but not a 8-bit integer.\n+--  has a length that fits in a 16-bit but not an 8-bit integer.\n \n with Interfaces;\n with System.Value_N;\n@@ -49,4 +49,13 @@ package System.Val_Enum_16 is\n       return    Natural\n      renames Impl.Value_Enumeration;\n \n+   function Valid_Enumeration_Value_16\n+     (Names   : String;\n+      Indexes : System.Address;\n+      Hash    : Impl.Hash_Function_Ptr;\n+      Num     : Natural;\n+      Str     : String)\n+      return    Boolean\n+     renames Impl.Valid_Enumeration_Value;\n+\n end System.Val_Enum_16;"}, {"sha": "0dead0704eb8a608d6dbbbd85e6b304873dc5df4", "filename": "gcc/ada/libgnat/s-vaen32.ads", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Flibgnat%2Fs-vaen32.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Flibgnat%2Fs-vaen32.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-vaen32.ads?ref=336438b6d225c3a5f28d57fd766e36f53faf8f3e", "patch": "@@ -49,4 +49,13 @@ package System.Val_Enum_32 is\n       return    Natural\n      renames Impl.Value_Enumeration;\n \n+   function Valid_Enumeration_Value_32\n+     (Names   : String;\n+      Indexes : System.Address;\n+      Hash    : Impl.Hash_Function_Ptr;\n+      Num     : Natural;\n+      Str     : String)\n+      return    Boolean\n+     renames Impl.Valid_Enumeration_Value;\n+\n end System.Val_Enum_32;"}, {"sha": "db0b360d661db456587b65641822d81449bb11d8", "filename": "gcc/ada/libgnat/s-vaenu8.ads", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Flibgnat%2Fs-vaenu8.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Flibgnat%2Fs-vaenu8.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-vaenu8.ads?ref=336438b6d225c3a5f28d57fd766e36f53faf8f3e", "patch": "@@ -30,7 +30,7 @@\n ------------------------------------------------------------------------------\n \n --  Instantiation of System.Value_N for enumeration types whose names table\n---  has a length that fits in a 8-bit integer.\n+--  has a length that fits in an 8-bit integer.\n \n with Interfaces;\n with System.Value_N;\n@@ -49,4 +49,13 @@ package System.Val_Enum_8 is\n       return    Natural\n      renames Impl.Value_Enumeration;\n \n+   function Valid_Enumeration_Value_8\n+     (Names   : String;\n+      Indexes : System.Address;\n+      Hash    : Impl.Hash_Function_Ptr;\n+      Num     : Natural;\n+      Str     : String)\n+      return    Boolean\n+     renames Impl.Valid_Enumeration_Value;\n+\n end System.Val_Enum_8;"}, {"sha": "7b72bc6ed0671a19c65b90f9b395ca4ca4a8c506", "filename": "gcc/ada/libgnat/s-valuen.adb", "status": "modified", "additions": 70, "deletions": 28, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Flibgnat%2Fs-valuen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Flibgnat%2Fs-valuen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuen.adb?ref=336438b6d225c3a5f28d57fd766e36f53faf8f3e", "patch": "@@ -35,22 +35,21 @@ with System.Val_Util; use System.Val_Util;\n \n package body System.Value_N is\n \n-   -----------------------\n-   -- Value_Enumeration --\n-   -----------------------\n+   ---------------------------\n+   -- Value_Enumeration_Pos --\n+   ---------------------------\n \n-   function Value_Enumeration\n+   function Value_Enumeration_Pos\n      (Names   : String;\n       Indexes : System.Address;\n       Hash    : Hash_Function_Ptr;\n       Num     : Natural;\n       Str     : String)\n-      return    Natural\n+      return    Integer\n    is\n-      F : Natural;\n-      L : Natural;\n-      H : Natural;\n-      S : String (Str'Range) := Str;\n+      F, L : Integer;\n+      H  : Natural;\n+      S  : String (Str'Range) := Str;\n \n       subtype Names_Index is\n         Index_Type range Index_Type (Names'First)\n@@ -69,32 +68,75 @@ package body System.Value_N is\n    begin\n       Normalize_String (S, F, L);\n \n-      --  If we have a valid hash value, do a single lookup\n+      declare\n+         Normal : String renames S (F .. L);\n \n-      H := (if Hash /= null then Hash.all (S (F .. L)) else Natural'Last);\n+      begin\n+         --  If we have a valid hash value, do a single lookup\n \n-      if H /= Natural'Last then\n-         if Names\n-           (Natural (IndexesT (H)) ..\n-            Natural (IndexesT (H + 1)) - 1) = S (F .. L)\n-         then\n-            return H;\n-         end if;\n-\n-      --  Otherwise do a linear search\n+         H := (if Hash /= null then Hash.all (Normal) else Natural'Last);\n \n-      else\n-         for J in 0 .. Num loop\n+         if H /= Natural'Last then\n             if Names\n-              (Natural (IndexesT (J)) ..\n-               Natural (IndexesT (J + 1)) - 1) = S (F .. L)\n+              (Natural (IndexesT (H)) ..\n+               Natural (IndexesT (H + 1)) - 1) = Normal\n             then\n-               return J;\n+               return H;\n             end if;\n-         end loop;\n-      end if;\n \n-      Bad_Value (Str);\n+         --  Otherwise do a linear search\n+\n+         else\n+            for J in 0 .. Num loop\n+               if Names\n+                 (Natural (IndexesT (J)) ..\n+                  Natural (IndexesT (J + 1)) - 1) = Normal\n+               then\n+                  return J;\n+               end if;\n+            end loop;\n+         end if;\n+      end;\n+\n+      return Invalid;\n+   end Value_Enumeration_Pos;\n+\n+   -----------------------\n+   -- Value_Enumeration --\n+   -----------------------\n+\n+   function Value_Enumeration\n+     (Names   : String;\n+      Indexes : System.Address;\n+      Hash    : Hash_Function_Ptr;\n+      Num     : Natural;\n+      Str     : String)\n+      return    Natural\n+   is\n+      Result : constant Integer :=\n+        Value_Enumeration_Pos (Names, Indexes, Hash, Num, Str);\n+   begin\n+      if Result = Invalid then\n+         Bad_Value (Str);\n+      else\n+         return Result;\n+      end if;\n    end Value_Enumeration;\n \n+   -----------------------------\n+   -- Valid_Enumeration_Value --\n+   -----------------------------\n+\n+   function Valid_Enumeration_Value\n+     (Names   : String;\n+      Indexes : System.Address;\n+      Hash    : Hash_Function_Ptr;\n+      Num     : Natural;\n+      Str     : String)\n+      return    Boolean\n+   is\n+   begin\n+      return Value_Enumeration_Pos (Names, Indexes, Hash, Num, Str) /= Invalid;\n+   end Valid_Enumeration_Value;\n+\n end System.Value_N;"}, {"sha": "258d27953d19068331992f80b1b3d02d5267b206", "filename": "gcc/ada/libgnat/s-valuen.ads", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Flibgnat%2Fs-valuen.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Flibgnat%2Fs-valuen.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuen.ads?ref=336438b6d225c3a5f28d57fd766e36f53faf8f3e", "patch": "@@ -67,4 +67,28 @@ package System.Value_N is\n    --  If the image is found in Names, then the corresponding Pos value is\n    --  returned. If not, Constraint_Error is raised.\n \n+   function Valid_Enumeration_Value\n+     (Names   : String;\n+      Indexes : System.Address;\n+      Hash    : Hash_Function_Ptr;\n+      Num     : Natural;\n+      Str     : String)\n+      return    Boolean;\n+   --  Returns True if Str is a valid Image of some enumeration literal, False\n+   --  otherwise. That is, returns False if and only if Value_Enumeration would\n+   --  raise Constraint_Error. The parameters have the same meaning as for\n+   --  Value_Enumeration.\n+\n+   Invalid : constant Integer := -1;\n+\n+   function Value_Enumeration_Pos\n+     (Names   : String;\n+      Indexes : System.Address;\n+      Hash    : Hash_Function_Ptr;\n+      Num     : Natural;\n+      Str     : String)\n+      return    Integer;\n+   --  Same as Value_Enumeration, except returns Invalid if Value_Enumeration\n+   --  would raise Constraint_Error.\n+\n end System.Value_N;"}, {"sha": "31edc40cf07708a4ed6f4e66e4a8945f3cbe1972", "filename": "gcc/ada/libgnat/s-valuti.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Flibgnat%2Fs-valuti.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Flibgnat%2Fs-valuti.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuti.adb?ref=336438b6d225c3a5f28d57fd766e36f53faf8f3e", "patch": "@@ -68,10 +68,10 @@ package body System.Val_Util is\n          F := F + 1;\n       end loop;\n \n-      --  Check for case when the string contained no characters\n+      --  Case of no nonspace characters found\n \n       if F > L then\n-         Bad_Value (S);\n+         return;\n       end if;\n \n       --  Scan for trailing spaces"}, {"sha": "3d426d9dfec49b44325ef5f4e87aa9dd0d56be98", "filename": "gcc/ada/libgnat/s-valuti.ads", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Flibgnat%2Fs-valuti.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Flibgnat%2Fs-valuti.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuti.ads?ref=336438b6d225c3a5f28d57fd766e36f53faf8f3e", "patch": "@@ -45,9 +45,7 @@ package System.Val_Util is\n    --  non-blank character of S and L to be the index of the last non-blank\n    --  character of S. Any lower case characters present in S will be folded to\n    --  their upper case equivalent except for character literals. If S consists\n-   --  of entirely blanks then Constraint_Error is raised.\n-   --\n-   --  Note: if S is the null string, F is set to S'First, L to S'Last\n+   --  of entirely blanks (including when S = \"\") then we return with F > L.\n \n    procedure Scan_Sign\n      (Str   : String;"}, {"sha": "28d14bdbac22736df2e1dba829735ac1c0a24577", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=336438b6d225c3a5f28d57fd766e36f53faf8f3e", "patch": "@@ -2036,9 +2036,13 @@ package Rtsfind is\n \n      RE_Value_Decimal128,                -- System_Val_Decimal_128\n \n-     RE_Value_Enumeration_8,             -- System.Val_Enum\n-     RE_Value_Enumeration_16,            -- System.Val_Enum\n-     RE_Value_Enumeration_32,            -- System.Val_Enum\n+     RE_Value_Enumeration_8,             -- System.Val_Enum_8\n+     RE_Value_Enumeration_16,            -- System.Val_Enum_16\n+     RE_Value_Enumeration_32,            -- System.Val_Enum_32\n+\n+     RE_Valid_Enumeration_Value_8,       -- System.Val_Enum_8\n+     RE_Valid_Enumeration_Value_16,      -- System.Val_Enum_16\n+     RE_Valid_Enumeration_Value_32,      -- System.Val_Enum_32\n \n      RE_Value_Fixed32,                   -- System_Val_Fixed_32\n \n@@ -3726,6 +3730,12 @@ package Rtsfind is\n \n      RE_Value_Enumeration_32             => System_Val_Enum_32,\n \n+     RE_Valid_Enumeration_Value_8        => System_Val_Enum_8,\n+\n+     RE_Valid_Enumeration_Value_16       => System_Val_Enum_16,\n+\n+     RE_Valid_Enumeration_Value_32       => System_Val_Enum_32,\n+\n      RE_Value_Fixed32                    => System_Val_Fixed_32,\n \n      RE_Value_Fixed64                    => System_Val_Fixed_64,\n@@ -4074,10 +4084,11 @@ package Rtsfind is\n    --  and without generating an error message, i.e. if the call will obtain\n    --  the desired entity without any problems.\n    --\n-   --  If we call this and it returns True, we should generate a call to E.\n-   --  In other words, the compiler should not call RTE_Available (E) until\n-   --  it has decided it wants to generate a call to E. Otherwise we can get\n-   --  spurious dependencies and elaboration orders.\n+   --  If we call this and it returns True, we should generate a reference to\n+   --  E (usually a call). In other words, for a subprogram E, the compiler\n+   --  should not call RTE_Available (E) until it has decided it wants to\n+   --  generate a call to E. Otherwise we can get spurious dependencies and\n+   --  elaboration orders.\n    --\n    --     if RTE_Available (E) -- WRONG!\n    --       and then <some condition>"}, {"sha": "b23ee09020e4338b7afe13b02527a54a78ca3af3", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=336438b6d225c3a5f28d57fd766e36f53faf8f3e", "patch": "@@ -324,7 +324,8 @@ package body Sem_Attr is\n \n       procedure Check_Enum_Image (Check_Enumeration_Maps : Boolean := False);\n       --  Common processing for the Image and Value family of attributes,\n-      --  including their Wide and Wide_Wide versions, Enum_Val and Img.\n+      --  including their Wide and Wide_Wide versions, Enum_Val, Img,\n+      --  and Valid_Value.\n       --\n       --  If the prefix type of an attribute is an enumeration type, set all\n       --  its literals as referenced, since the attribute function can\n@@ -388,6 +389,9 @@ package body Sem_Attr is\n       procedure Check_Real_Type;\n       --  Verify that prefix of attribute N is fixed or float type\n \n+      procedure Check_Enumeration_Type;\n+      --  Verify that prefix of attribute N is an enumeration type\n+\n       procedure Check_Scalar_Type;\n       --  Verify that prefix of attribute N is a scalar type\n \n@@ -1983,6 +1987,7 @@ package body Sem_Attr is\n          pragma Assert\n            (Check_Enumeration_Maps = (Attr_Id in Attribute_Image\n                                                | Attribute_Img\n+                                               | Attribute_Valid_Value\n                                                | Attribute_Value\n                                                | Attribute_Wide_Image\n                                                | Attribute_Wide_Value\n@@ -2363,6 +2368,19 @@ package body Sem_Attr is\n          end if;\n       end Check_Real_Type;\n \n+      ----------------------------\n+      -- Check_Enumeration_Type --\n+      ----------------------------\n+\n+      procedure Check_Enumeration_Type is\n+      begin\n+         Check_Type;\n+\n+         if not Is_Enumeration_Type (P_Type) then\n+            Error_Attr_P (\"prefix of % attribute must be enumeration type\");\n+         end if;\n+      end Check_Enumeration_Type;\n+\n       -----------------------\n       -- Check_Scalar_Type --\n       -----------------------\n@@ -7074,6 +7092,31 @@ package body Sem_Attr is\n          Set_Etype (N, Standard_Boolean);\n       end Valid;\n \n+      -----------------\n+      -- Valid_Value --\n+      -----------------\n+\n+      when Attribute_Valid_Value =>\n+         Check_E1;\n+         Check_Enumeration_Type;\n+         Check_Enum_Image (Check_Enumeration_Maps => True);\n+         Set_Etype (N, Standard_Boolean);\n+         Validate_Non_Static_Attribute_Function_Call;\n+\n+         if P_Type in Standard_Boolean\n+                    | Standard_Character\n+                    | Standard_Wide_Character\n+                    | Standard_Wide_Wide_Character\n+         then\n+            Error_Attr_P\n+              (\"prefix of % attribute must not be a type in Standard\");\n+         end if;\n+\n+         if Discard_Names (First_Subtype (P_Type)) then\n+            Error_Attr_P\n+              (\"prefix of % attribute must not have Discard_Names\");\n+         end if;\n+\n       -------------------\n       -- Valid_Scalars --\n       -------------------\n@@ -10479,6 +10522,7 @@ package body Sem_Attr is\n          | Attribute_Unrestricted_Access\n          | Attribute_Valid\n          | Attribute_Valid_Scalars\n+         | Attribute_Valid_Value\n          | Attribute_Value\n          | Attribute_Wchar_T_Size\n          | Attribute_Wide_Value\n@@ -12271,7 +12315,7 @@ package body Sem_Attr is\n             --  reference is resolved.\n \n             case Attr_Id is\n-               when Attribute_Value =>\n+               when Attribute_Valid_Value | Attribute_Value =>\n                   Resolve (First (Expressions (N)), Standard_String);\n \n                when Attribute_Wide_Value =>"}, {"sha": "b9ca6071d28061c8be257766c92eaf338b653be7", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336438b6d225c3a5f28d57fd766e36f53faf8f3e/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=336438b6d225c3a5f28d57fd766e36f53faf8f3e", "patch": "@@ -1081,6 +1081,7 @@ package Snames is\n    Name_To_Any                         : constant Name_Id := N + $; -- GNAT\n    Name_Truncation                     : constant Name_Id := N + $;\n    Name_TypeCode                       : constant Name_Id := N + $; -- GNAT\n+   Name_Valid_Value                    : constant Name_Id := N + $; -- GNAT\n    Name_Value                          : constant Name_Id := N + $;\n    Name_Wide_Image                     : constant Name_Id := N + $;\n    Name_Wide_Wide_Image                : constant Name_Id := N + $;\n@@ -1606,6 +1607,7 @@ package Snames is\n       Attribute_To_Any,\n       Attribute_Truncation,\n       Attribute_TypeCode,\n+      Attribute_Valid_Value,\n       Attribute_Value,\n       Attribute_Wide_Image,\n       Attribute_Wide_Wide_Image,"}]}