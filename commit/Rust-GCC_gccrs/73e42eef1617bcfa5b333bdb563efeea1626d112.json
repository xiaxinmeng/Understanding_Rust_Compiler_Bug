{"sha": "73e42eef1617bcfa5b333bdb563efeea1626d112", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNlNDJlZWYxNjE3YmNmYTViMzMzYmRiNTYzZWZlZWExNjI2ZDExMg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-11-30T08:33:25Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-11-30T08:33:25Z"}, "message": "gfortran.h (gfc_option_t): Remove warn_aliasing,\n\n2014-11-30  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.h (gfc_option_t): Remove warn_aliasing,\n        * warn_ampersand,\n        warn_function_elimination, warn_implicit_interface,\n        warn_implicit_procedure, warn_line_truncation,\n        warn_surprising, warn_underflow, warn_intrinsic_shadow,\n        warn_array_temp, warn_align_commons, warn_real_q_constant,\n        warn_unused_dummy_argument, warn_zerotrip, warn_realloc_lhs,\n        warn_realloc_lhs_all, warn_compare_reals, warn_target_lifetime.\n        * arith.c (check_result, gfc_real2real, gfc_real2complex,\n        gfc_complex2real, gfc_complex2complex): Honor changed\n        variable names.\n        * check.c (gfc_check_transfer): Ditto.\n        * expr.c (gfc_check_assign, gfc_check_pointer_assign): Ditto.\n        * interface.c (compare_parameter, gfc_procedure_use,\n        * gfc_ppc_use,\n        gfc_arglist_matches_symbol): Ditto.\n        * intrinsic.c (gfc_warn_intrinsic_shadow): Ditto.\n        * primary.c (match_real_constant, match_string_constant): Ditto.\n        * resolve.c (gfc_resolve_intrinsic, resolve_operator,\n        gfc_resolve_iterator, resolve_select, resolve_ordinary_assign,\n        resolve_charlen, gfc_resolve_finalizers): Ditto.\n        * scanner.c (gfc_next_char_literal): Ditto.\n        * simplify.c (simplify_achar_char, gfc_simplify_iachar): Ditto.\n        * trans-array.c (gfc_trans_create_temp_array,\n        gfc_trans_dummy_array_bias, gfc_conv_array_parameter): Ditto.\n        * trans-common.c (translate_common):\n        * trans-decl.c (generate_local_decl): Ditto.\n        * trans-expr.c (realloc_lhs_warning): Ditto.\n        * trans-intrinsic.c (gfc_conv_intrinsic_transfer): Ditto.\n        * decl.c (do_warn_intrinsic_shadow): Ditto. Renamed from\n        warn_intrinsic_shadow.\n        * frontend-passes.c (do_warn_function_elimination): Honor\n        changed variable names. Renamed from do_warn_function_elimination.\n        * invoke.texi (Wunderflow): Document that it is enabled by\n        * default.\n        * lang.opt (Waliasing, Walign-commons, Warray-temporaries,\n        Wcompare-reals, Wfunction-elimination, Wimplicit-interface,\n        Wimplicit-procedure, Wline-truncation, Wreal-q-constant, Wrealloc-lhs,\n        Wrealloc-lhs-all, Wtarget-lifetime, Wsurprising, Wunderflow,\n        Wintrinsic-shadow, Wunused-dummy-argument, Wzerotrip): Use Var(),\n        add Init() and LangEnabledBy() were required.\n        (Wmaybe-uninitialized, Wreturn-type, Wuninitialized): Add\n        LangEnabledBy.\n        * options.c (gfc_init_options, gfc_post_options,\n        * gfc_handle_option):\n        Remove options handled in lang.opt; handle renaming.\n        (set_Wall, set_Wextra): Remove.\n\nFrom-SVN: r218188", "tree": {"sha": "c5726afc5d984361b858ab33670a6a95ce59cab1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5726afc5d984361b858ab33670a6a95ce59cab1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73e42eef1617bcfa5b333bdb563efeea1626d112", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73e42eef1617bcfa5b333bdb563efeea1626d112", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73e42eef1617bcfa5b333bdb563efeea1626d112", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73e42eef1617bcfa5b333bdb563efeea1626d112/comments", "author": null, "committer": null, "parents": [{"sha": "daa38cc13da3de5a9216d5e8f05736b326ac14ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daa38cc13da3de5a9216d5e8f05736b326ac14ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daa38cc13da3de5a9216d5e8f05736b326ac14ae"}], "stats": {"total": 340, "additions": 94, "deletions": 246}, "files": [{"sha": "efbe6de2d70f1ca6f71de3b5cba46fdf01c97602", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=73e42eef1617bcfa5b333bdb563efeea1626d112", "patch": "@@ -544,7 +544,7 @@ check_result (arith rc, gfc_expr *x, gfc_expr *r, gfc_expr **rp)\n \n   if (val == ARITH_UNDERFLOW)\n     {\n-      if (gfc_option.warn_underflow)\n+      if (warn_underflow)\n \tgfc_warning (gfc_arith_error (val), &x->where);\n       val = ARITH_OK;\n     }\n@@ -2077,7 +2077,7 @@ gfc_real2real (gfc_expr *src, int kind)\n \n   if (rc == ARITH_UNDERFLOW)\n     {\n-      if (gfc_option.warn_underflow)\n+      if (warn_underflow)\n \tgfc_warning (gfc_arith_error (rc), &src->where);\n       mpfr_set_ui (result->value.real, 0, GFC_RND_MODE);\n     }\n@@ -2108,7 +2108,7 @@ gfc_real2complex (gfc_expr *src, int kind)\n \n   if (rc == ARITH_UNDERFLOW)\n     {\n-      if (gfc_option.warn_underflow)\n+      if (warn_underflow)\n \tgfc_warning (gfc_arith_error (rc), &src->where);\n       mpfr_set_ui (mpc_realref (result->value.complex), 0, GFC_RND_MODE);\n     }\n@@ -2163,7 +2163,7 @@ gfc_complex2real (gfc_expr *src, int kind)\n \n   if (rc == ARITH_UNDERFLOW)\n     {\n-      if (gfc_option.warn_underflow)\n+      if (warn_underflow)\n \tgfc_warning (gfc_arith_error (rc), &src->where);\n       mpfr_set_ui (result->value.real, 0, GFC_RND_MODE);\n     }\n@@ -2194,7 +2194,7 @@ gfc_complex2complex (gfc_expr *src, int kind)\n \n   if (rc == ARITH_UNDERFLOW)\n     {\n-      if (gfc_option.warn_underflow)\n+      if (warn_underflow)\n \tgfc_warning (gfc_arith_error (rc), &src->where);\n       mpfr_set_ui (mpc_realref (result->value.complex), 0, GFC_RND_MODE);\n     }\n@@ -2209,7 +2209,7 @@ gfc_complex2complex (gfc_expr *src, int kind)\n \n   if (rc == ARITH_UNDERFLOW)\n     {\n-      if (gfc_option.warn_underflow)\n+      if (warn_underflow)\n \tgfc_warning (gfc_arith_error (rc), &src->where);\n       mpfr_set_ui (mpc_imagref (result->value.complex), 0, GFC_RND_MODE);\n     }"}, {"sha": "cea2689d5d1589301dde17a34df5b35740601fb0", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=73e42eef1617bcfa5b333bdb563efeea1626d112", "patch": "@@ -5070,7 +5070,7 @@ gfc_check_transfer (gfc_expr *source, gfc_expr *mold, gfc_expr *size)\n \treturn false;\n     }\n \n-  if (!gfc_option.warn_surprising)\n+  if (!warn_surprising)\n     return true;\n \n   /* If we can't calculate the sizes, we cannot check any more."}, {"sha": "f11bcb024fa173afdd9cb18a8b67e3e4554bbcf3", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=73e42eef1617bcfa5b333bdb563efeea1626d112", "patch": "@@ -5284,7 +5284,7 @@ gfc_match_procedure (void)\n    parser-state-stack to find out whether we're in a module.  */\n \n static void\n-warn_intrinsic_shadow (const gfc_symbol* sym, bool func)\n+do_warn_intrinsic_shadow (const gfc_symbol* sym, bool func)\n {\n   bool in_module;\n \n@@ -5420,7 +5420,7 @@ gfc_match_function_decl (void)\n \t}\n \n       /* Warn if this procedure has the same name as an intrinsic.  */\n-      warn_intrinsic_shadow (sym, true);\n+      do_warn_intrinsic_shadow (sym, true);\n \n       return MATCH_YES;\n     }\n@@ -5851,7 +5851,7 @@ gfc_match_subroutine (void)\n     return MATCH_ERROR;\n \n   /* Warn if it has the same name as an intrinsic.  */\n-  warn_intrinsic_shadow (sym, false);\n+  do_warn_intrinsic_shadow (sym, false);\n \n   return MATCH_YES;\n }"}, {"sha": "59f770c7adad3ba86222708c8ac5bddbfefb2b93", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=73e42eef1617bcfa5b333bdb563efeea1626d112", "patch": "@@ -3171,7 +3171,7 @@ gfc_check_assign (gfc_expr *lvalue, gfc_expr *rvalue, int conform)\n     }\n \n   /* This is possibly a typo: x = f() instead of x => f().  */\n-  if (gfc_option.warn_surprising\n+  if (warn_surprising\n       && rvalue->expr_type == EXPR_FUNCTION && gfc_expr_attr (rvalue).pointer)\n     gfc_warning (\"POINTER-valued function appears on right-hand side of \"\n \t\t \"assignment at %L\", &rvalue->where);\n@@ -3197,7 +3197,7 @@ gfc_check_assign (gfc_expr *lvalue, gfc_expr *rvalue, int conform)\n   if (rvalue->is_boz && lvalue->ts.type != BT_INTEGER)\n     {\n       int rc;\n-      if (gfc_option.warn_surprising)\n+      if (warn_surprising)\n         gfc_warning (\"BOZ literal at %L is bitwise transferred \"\n                      \"non-integer symbol '%s'\", &rvalue->where,\n                      lvalue->symtree->n.sym->name);\n@@ -3750,7 +3750,7 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n     }\n \n   /* Warn if it is the LHS pointer may lives longer than the RHS target.  */\n-  if (gfc_option.warn_target_lifetime\n+  if (warn_target_lifetime\n       && rvalue->expr_type == EXPR_VARIABLE\n       && !rvalue->symtree->n.sym->attr.save\n       && !attr.pointer && !rvalue->symtree->n.sym->attr.host_assoc"}, {"sha": "799d2fedddc210ca34972423381b3754e9fbd363", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=73e42eef1617bcfa5b333bdb563efeea1626d112", "patch": "@@ -546,7 +546,7 @@ create_var (gfc_expr * e)\n       result->ref->u.ar.where = e->where;\n       result->ref->u.ar.as = symbol->ts.type == BT_CLASS\n \t\t\t     ? CLASS_DATA (symbol)->as : symbol->as;\n-      if (gfc_option.warn_array_temp)\n+      if (warn_array_temporaries)\n \tgfc_warning (\"Creating array temporary at %L\", &(e->where));\n     }\n \n@@ -565,7 +565,7 @@ create_var (gfc_expr * e)\n /* Warn about function elimination.  */\n \n static void\n-warn_function_elimination (gfc_expr *e)\n+do_warn_function_elimination (gfc_expr *e)\n {\n   if (e->expr_type != EXPR_FUNCTION)\n     return;\n@@ -618,8 +618,8 @@ cfe_expr_0 (gfc_expr **e, int *walk_subtrees,\n \t      if (newvar == NULL)\n \t\tnewvar = create_var (*ei);\n \n-\t      if (gfc_option.warn_function_elimination)\n-\t\twarn_function_elimination (*ej);\n+\t      if (warn_function_elimination)\n+\t\tdo_warn_function_elimination (*ej);\n \n \t      free (*ej);\n \t      *ej = gfc_copy_expr (newvar);"}, {"sha": "10585025f97c493ad2a43c2a7357c872654746ab", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=73e42eef1617bcfa5b333bdb563efeea1626d112", "patch": "@@ -2442,24 +2442,6 @@ typedef struct\n   int dump_fortran_original;\n   int dump_fortran_optimized;\n \n-  int warn_aliasing;\n-  int warn_ampersand;\n-  int warn_function_elimination;\n-  int warn_implicit_interface;\n-  int warn_implicit_procedure;\n-  int warn_line_truncation;\n-  int warn_surprising;\n-  int warn_underflow;\n-  int warn_intrinsic_shadow;\n-  int warn_array_temp;\n-  int warn_align_commons;\n-  int warn_real_q_constant;\n-  int warn_unused_dummy_argument;\n-  int warn_zerotrip;\n-  int warn_realloc_lhs;\n-  int warn_realloc_lhs_all;\n-  int warn_compare_reals;\n-  int warn_target_lifetime;\n   int max_errors;\n \n   int flag_all_intrinsics;"}, {"sha": "2429fd20e2478428ed3b5fcc00761a334fe7f20e", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=73e42eef1617bcfa5b333bdb563efeea1626d112", "patch": "@@ -66,6 +66,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"flags.h\"\n #include \"gfortran.h\"\n #include \"match.h\"\n #include \"arith.h\"\n@@ -2145,8 +2146,7 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n \t\t       formal->name);\n \t    return 0;\n \t}\n-      else if (gfc_option.warn_surprising && where\n-\t       && formal->attr.intent != INTENT_IN)\n+      else if (warn_surprising && where && formal->attr.intent != INTENT_IN)\n \tgfc_warning (\"Passing coarray at %L to allocatable, noncoarray dummy \"\n \t\t     \"argument '%s', which is invalid if the allocation status\"\n \t\t     \" is modified\",  &actual->where, formal->name);\n@@ -3260,11 +3260,10 @@ gfc_procedure_use (gfc_symbol *sym, gfc_actual_arglist **ap, locus *where)\n \t\t     sym->name, where);\n \t  return false;\n \t}\n-      if (gfc_option.warn_implicit_interface)\n+      if (warn_implicit_interface)\n \tgfc_warning (\"Procedure '%s' called with an implicit interface at %L\",\n \t\t     sym->name, where);\n-      else if (gfc_option.warn_implicit_procedure\n-\t       && sym->attr.proc == PROC_UNKNOWN)\n+      else if (warn_implicit_procedure && sym->attr.proc == PROC_UNKNOWN)\n \tgfc_warning (\"Procedure '%s' called at %L is not explicitly declared\",\n \t\t     sym->name, where);\n     }\n@@ -3357,7 +3356,7 @@ gfc_procedure_use (gfc_symbol *sym, gfc_actual_arglist **ap, locus *where)\n   if (!check_intents (dummy_args, *ap))\n     return false;\n \n-  if (gfc_option.warn_aliasing)\n+  if (warn_aliasing)\n     check_some_aliasing (dummy_args, *ap);\n \n   return true;\n@@ -3374,7 +3373,7 @@ gfc_ppc_use (gfc_component *comp, gfc_actual_arglist **ap, locus *where)\n   /* Warn about calls with an implicit interface.  Special case\n      for calling a ISO_C_BINDING because c_loc and c_funloc\n      are pseudo-unknown.  */\n-  if (gfc_option.warn_implicit_interface\n+  if (warn_implicit_interface\n       && comp->attr.if_source == IFSRC_UNKNOWN\n       && !comp->attr.is_iso_c)\n     gfc_warning (\"Procedure pointer component '%s' called with an implicit \"\n@@ -3403,7 +3402,7 @@ gfc_ppc_use (gfc_component *comp, gfc_actual_arglist **ap, locus *where)\n     return;\n \n   check_intents (comp->ts.interface->formal, *ap);\n-  if (gfc_option.warn_aliasing)\n+  if (warn_aliasing)\n     check_some_aliasing (comp->ts.interface->formal, *ap);\n }\n \n@@ -3426,7 +3425,7 @@ gfc_arglist_matches_symbol (gfc_actual_arglist** args, gfc_symbol* sym)\n   if (compare_actual_formal (args, dummy_args, r, !r, NULL))\n     {\n       check_intents (dummy_args, *args);\n-      if (gfc_option.warn_aliasing)\n+      if (warn_aliasing)\n \tcheck_some_aliasing (dummy_args, *args);\n       return true;\n     }"}, {"sha": "5dd4092e63a2d22a04ab06d296f4366acc54ff3e", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=73e42eef1617bcfa5b333bdb563efeea1626d112", "patch": "@@ -4807,7 +4807,7 @@ gfc_warn_intrinsic_shadow (const gfc_symbol* sym, bool in_module, bool func)\n   gfc_intrinsic_sym* isym;\n \n   /* If the warning is disabled, do nothing at all.  */\n-  if (!gfc_option.warn_intrinsic_shadow)\n+  if (!warn_intrinsic_shadow)\n     return;\n \n   /* Try to find an intrinsic of the same name.  */"}, {"sha": "70d5b5c113c6923d4587c9b85cb0370750792da4", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=73e42eef1617bcfa5b333bdb563efeea1626d112", "patch": "@@ -886,7 +886,7 @@ is active for @option{-pedantic}, @option{-std=f95}, @option{-std=f2003},\n @cindex warnings, underflow\n @cindex underflow\n Produce a warning when numerical constant expressions are\n-encountered, which yield an UNDERFLOW during compilation.\n+encountered, which yield an UNDERFLOW during compilation. Enabled by default.\n \n @item -Wintrinsic-shadow\n @opindex @code{Wintrinsic-shadow}"}, {"sha": "c29781741508574951ffd9a4cea8775153564090", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=73e42eef1617bcfa5b333bdb563efeea1626d112", "patch": "@@ -194,19 +194,19 @@ Fortran\n ; Documented in C\n \n Waliasing\n-Fortran Warning\n+Fortran Warning Var(warn_aliasing) LangEnabledBy(Fortran,Wall)\n Warn about possible aliasing of dummy arguments\n \n Walign-commons\n-Fortran Warning\n+Fortran Warning Var(warn_align_commons) Init(1)\n Warn about alignment of COMMON blocks\n \n Wampersand\n-Fortran Warning\n+Fortran Warning Var(warn_ampersand) LangEnabledBy(Fortran,Wall || Wpedantic)\n Warn about missing ampersand in continued character constants\n \n Warray-temporaries\n-Fortran Warning\n+Fortran Warning Var(warn_array_temporaries)\n Warn about creation of array temporaries\n \n Wc-binding-type\n@@ -222,7 +222,7 @@ Fortran Var(warn_character_truncation) Warning LangEnabledBy(Fortran,Wall)\n Warn about truncated character expressions\n \n Wcompare-reals\n-Fortran Warning\n+Fortran Warning Var(warn_compare_reals) LangEnabledBy(Fortran,Wextra)\n Warn about equality comparisons involving REAL or COMPLEX expressions\n \n Wconversion\n@@ -235,28 +235,32 @@ Warn about most implicit conversions\n \n Wextra\n Fortran Warning\n-Print extra (possibly unwanted) warnings\n+; Documented in common\n \n Wfunction-elimination\n-Fortran Warning\n+Fortran Warning Var(warn_function_elimination)\n Warn about function call elimination\n \n Wimplicit-interface\n-Fortran Warning\n+Fortran Warning Var(warn_implicit_interface)\n Warn about calls with implicit interface\n \n Wimplicit-procedure\n-Fortran Warning\n+Fortran Warning Var(warn_implicit_procedure)\n Warn about called procedures not explicitly declared\n \n Wline-truncation\n-Fortran Warning\n+Fortran Warning Var(warn_line_truncation) LangEnabledBy(Fortran,Wall)\n Warn about truncated source lines\n \n Wintrinsics-std\n Fortran Var(warn_intrinsics_std) Warning LangEnabledBy(Fortran,Wall)\n Warn on intrinsics not part of the selected standard\n \n+Wmaybe-uninitialized\n+Fortran LangEnabledBy(Fortran,Wall)\n+; Documented in common.opt\n+\n Wmissing-include-dirs\n Fortran\n ; Documented in C/C++\n@@ -274,47 +278,55 @@ Fortran\n ; Documented in common.opt\n \n Wreal-q-constant\n-Fortran Warning\n+Fortran Warning Var(warn_real_q_constant) LangEnabledBy(Fortran,Wall)\n Warn about real-literal-constants with 'q' exponent-letter\n \n Wrealloc-lhs\n-Fortran Warning\n+Fortran Warning Var(warn_realloc_lhs) LangEnabledBy(Fortran,Wrealloc-lhs-all)\n Warn when a left-hand-side array variable is reallocated\n \n Wrealloc-lhs-all\n-Fortran Warning\n+Fortran Warning Var(warn_realloc_lhs_all)\n Warn when a left-hand-side variable is reallocated\n \n Wtarget-lifetime\n-Fortran Warning\n+Fortran Warning Var(warn_target_lifetime) LangEnabledBy(Fortran,Wall)\n Warn if the pointer in a pointer assignment might outlive its target\n \n Wreturn-type\n-Fortran Warning\n+Fortran Warning LangEnabledBy(Fortran,Wall)\n ; Documented in C\n \n Wsurprising\n-Fortran Warning\n+Fortran Warning Var(warn_surprising) LangEnabledBy(Fortran,Wall)\n Warn about \\\"suspicious\\\" constructs\n \n Wtabs\n Fortran Warning Var(warn_tabs) LangEnabledBy(Fortran,Wall || Wpedantic)\n Permit nonconforming uses of the tab character\n \n Wunderflow\n-Fortran Warning\n+Fortran Warning Var(warn_underflow) Init(1)\n Warn about underflow of numerical constant expressions\n \n+Wuninitialized\n+Fortran LangEnabledBy(Fortran,Wall)\n+; Documented in common.opt\n+\n Wintrinsic-shadow\n-Fortran Warning\n+Fortran Warning Var(warn_intrinsic_shadow) LangEnabledBy(Fortran,Wall)\n Warn if a user-procedure has the same name as an intrinsic\n \n+Wunused\n+LangEnabledBy(Fortran,Wall)\n+; Documented in common.opt\n+\n Wunused-dummy-argument\n-Fortran Warning\n+Fortran Warning Var(warn_unused_dummy_argument) LangEnabledBy(Fortran,Wall)\n Warn about unused dummy arguments.\n \n Wzerotrip\n-Fortran Warning\n+Fortran Warning Var(warn_zerotrip) LangEnabledBy(Fortran,Wall)\n Warn about zero-trip DO loops\n \n cpp"}, {"sha": "af71ded54d0bfc35460ecc59ab5360b74162db6c", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 4, "deletions": 144, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=73e42eef1617bcfa5b333bdb563efeea1626d112", "patch": "@@ -93,23 +93,6 @@ gfc_init_options (unsigned int decoded_options_count,\n   gfc_option.dump_fortran_original = 0;\n   gfc_option.dump_fortran_optimized = 0;\n \n-  gfc_option.warn_aliasing = 0;\n-  gfc_option.warn_ampersand = 0;\n-  gfc_option.warn_array_temp = 0;\n-  gfc_option.warn_function_elimination = 0;\n-  gfc_option.warn_implicit_interface = 0;\n-  gfc_option.warn_line_truncation = 0;\n-  gfc_option.warn_surprising = 0;\n-  gfc_option.warn_underflow = 1;\n-  gfc_option.warn_intrinsic_shadow = 0;\n-  gfc_option.warn_align_commons = 1;\n-  gfc_option.warn_real_q_constant = 0;\n-  gfc_option.warn_unused_dummy_argument = 0;\n-  gfc_option.warn_zerotrip = 0;\n-  gfc_option.warn_realloc_lhs = 0;\n-  gfc_option.warn_realloc_lhs_all = 0;\n-  gfc_option.warn_compare_reals = 0;\n-  gfc_option.warn_target_lifetime = 0;\n   gfc_option.max_errors = 25;\n \n   gfc_option.flag_all_intrinsics = 0;\n@@ -423,53 +406,18 @@ gfc_post_options (const char **pfilename)\n   if (!gfc_option.flag_automatic)\n     gfc_option.flag_max_stack_var_size = 0;\n   \n-  if (pedantic)\n-    gfc_option.warn_ampersand = 1;\n-\n   /* Optimization implies front end optimization, unless the user\n      specified it directly.  */\n \n   if (gfc_option.flag_frontend_optimize == -1)\n     gfc_option.flag_frontend_optimize = optimize;\n \n-  if (gfc_option.warn_realloc_lhs_all)\n-    gfc_option.warn_realloc_lhs = 1;\n-\n   gfc_cpp_post_options ();\n \n   return gfc_cpp_preprocess_only ();\n }\n \n \n-/* Set the options for -Wall.  */\n-\n-static void\n-set_Wall (int setting)\n-{\n-  gfc_option.warn_aliasing = setting;\n-  gfc_option.warn_ampersand = setting;\n-  gfc_option.warn_line_truncation = setting;\n-  gfc_option.warn_surprising = setting;\n-  gfc_option.warn_underflow = setting;\n-  gfc_option.warn_intrinsic_shadow = setting;\n-  gfc_option.warn_real_q_constant = setting;\n-  gfc_option.warn_unused_dummy_argument = setting;\n-  gfc_option.warn_target_lifetime = setting;\n-  gfc_option.warn_zerotrip = setting;\n-\n-  warn_return_type = setting;\n-  warn_uninitialized = setting;\n-  warn_maybe_uninitialized = setting;\n-}\n-\n-/* Set the options for -Wextra.  */\n-\n-static void\n-set_Wextra (int setting)\n-{\n-  gfc_option.warn_compare_reals = setting;\n-}\n-\n static void\n gfc_handle_module_path_options (const char *arg)\n {\n@@ -630,94 +578,6 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       result = false;\n       break;\n \n-    case OPT_Wall:\n-      handle_generated_option (&global_options, &global_options_set,\n-\t\t\t       OPT_Wunused, NULL, value,\n-\t\t\t       gfc_option_lang_mask (), kind, loc,\n-\t\t\t       handlers, global_dc);\n-      set_Wall (value);\n-      break;\n-\n-    case OPT_Waliasing:\n-      gfc_option.warn_aliasing = value;\n-      break;\n-\n-    case OPT_Wampersand:\n-      gfc_option.warn_ampersand = value;\n-      break;\n-\n-    case OPT_Warray_temporaries:\n-      gfc_option.warn_array_temp = value;\n-      break;\n-\n-    case OPT_Wcompare_reals:\n-      gfc_option.warn_compare_reals = value;\n-      break;\n-\n-    case OPT_Wextra:\n-      set_Wextra (value);\n-      break;\n-\n-    case OPT_Wfunction_elimination:\n-      gfc_option.warn_function_elimination = value;\n-      break;\n-\n-    case OPT_Wimplicit_interface:\n-      gfc_option.warn_implicit_interface = value;\n-      break;\n-\n-    case OPT_Wimplicit_procedure:\n-      gfc_option.warn_implicit_procedure = value;\n-      break;\n-\n-    case OPT_Wline_truncation:\n-      gfc_option.warn_line_truncation = value;\n-      break;\n-\n-    case OPT_Wrealloc_lhs:\n-      gfc_option.warn_realloc_lhs = value;\n-      break;\n-\n-    case OPT_Wrealloc_lhs_all:\n-      gfc_option.warn_realloc_lhs_all = value;\n-      break;\n-\n-    case OPT_Wreturn_type:\n-      warn_return_type = value;\n-      break;\n-\n-    case OPT_Wsurprising:\n-      gfc_option.warn_surprising = value;\n-      break;\n-\n-    case OPT_Wtarget_lifetime:\n-      gfc_option.warn_target_lifetime = value;\n-      break;\n-\n-    case OPT_Wunderflow:\n-      gfc_option.warn_underflow = value;\n-      break;\n-\n-    case OPT_Wintrinsic_shadow:\n-      gfc_option.warn_intrinsic_shadow = value;\n-      break;\n-\n-    case OPT_Walign_commons:\n-      gfc_option.warn_align_commons = value;\n-      break;\n-\n-    case OPT_Wreal_q_constant:\n-      gfc_option.warn_real_q_constant = value;\n-      break;\n-\n-    case OPT_Wunused_dummy_argument:\n-      gfc_option.warn_unused_dummy_argument = value;\n-      break;\n-\n-    case OPT_Wzerotrip:\n-      gfc_option.warn_zerotrip = value;\n-      break;\n-\n     case OPT_fall_intrinsics:\n       gfc_option.flag_all_intrinsics = 1;\n       break;\n@@ -1003,7 +863,7 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_option.max_continue_fixed = 19;\n       gfc_option.max_continue_free = 39;\n       gfc_option.max_identifier_length = 31;\n-      gfc_option.warn_ampersand = 1;\n+      warn_ampersand = 1;\n       warn_tabs = 1;\n       break;\n \n@@ -1012,7 +872,7 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n \t| GFC_STD_F2003 | GFC_STD_F95 | GFC_STD_F2008_OBS;\n       gfc_option.warn_std = GFC_STD_F95_OBS;\n       gfc_option.max_identifier_length = 63;\n-      gfc_option.warn_ampersand = 1;\n+      warn_ampersand = 1;\n       warn_tabs = 1;\n       break;\n \n@@ -1021,7 +881,7 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n \t| GFC_STD_F2003 | GFC_STD_F95 | GFC_STD_F2008 | GFC_STD_F2008_OBS;\n       gfc_option.warn_std = GFC_STD_F95_OBS | GFC_STD_F2008_OBS;\n       gfc_option.max_identifier_length = 63;\n-      gfc_option.warn_ampersand = 1;\n+      warn_ampersand = 1;\n       warn_tabs = 1;\n       break;\n \n@@ -1031,7 +891,7 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n \t| GFC_STD_F2008_TS;\n       gfc_option.warn_std = GFC_STD_F95_OBS | GFC_STD_F2008_OBS;\n       gfc_option.max_identifier_length = 63;\n-      gfc_option.warn_ampersand = 1;\n+      warn_ampersand = 1;\n       warn_tabs = 1;\n       break;\n "}, {"sha": "a7a26a15b93c955f4d5338a39c6738c890f86121", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=73e42eef1617bcfa5b333bdb563efeea1626d112", "patch": "@@ -557,7 +557,7 @@ match_real_constant (gfc_expr **result, int signflag)\n       if (!gfc_notify_std (GFC_STD_GNU, \"exponent-letter 'q' in \"\n \t\t\t   \"real-literal-constant at %C\"))\n \treturn MATCH_ERROR;\n-      else if (gfc_option.warn_real_q_constant)\n+      else if (warn_real_q_constant)\n \tgfc_warning(\"Extension: exponent-letter 'q' in real-literal-constant \"\n \t\t    \"at %C\");\n     }\n@@ -726,7 +726,7 @@ match_real_constant (gfc_expr **result, int signflag)\n       goto cleanup;\n \n     case ARITH_UNDERFLOW:\n-      if (gfc_option.warn_underflow)\n+      if (warn_underflow)\n \tgfc_warning (\"Real constant underflows its kind at %C\");\n       mpfr_set_ui (e->value.real, 0, GFC_RND_MODE);\n       break;\n@@ -951,7 +951,7 @@ static match\n match_string_constant (gfc_expr **result)\n {\n   char name[GFC_MAX_SYMBOL_LEN + 1], peek;\n-  int i, kind, length, warn_ampersand, ret;\n+  int i, kind, length, save_warn_ampersand, ret;\n   locus old_locus, start_locus;\n   gfc_symbol *sym;\n   gfc_expr *e;\n@@ -1071,8 +1071,8 @@ match_string_constant (gfc_expr **result)\n \n   /* We disable the warning for the following loop as the warning has already\n      been printed in the loop above.  */\n-  warn_ampersand = gfc_option.warn_ampersand;\n-  gfc_option.warn_ampersand = 0;\n+  save_warn_ampersand = warn_ampersand;\n+  warn_ampersand = 0;\n \n   p = e->value.character.string;\n   for (i = 0; i < length; i++)\n@@ -1091,7 +1091,7 @@ match_string_constant (gfc_expr **result)\n     }\n \n   *p = '\\0';\t/* TODO: C-style string is for development/debug purposes.  */\n-  gfc_option.warn_ampersand = warn_ampersand;\n+  warn_ampersand = save_warn_ampersand;\n \n   next_string_char (delimiter, &ret);\n   if (ret != -1)"}, {"sha": "9d7d3c25be0c946d382e19410581b0b1108869b9", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=73e42eef1617bcfa5b333bdb563efeea1626d112", "patch": "@@ -1643,7 +1643,7 @@ gfc_resolve_intrinsic (gfc_symbol *sym, locus *loc)\n \n   if (isym && !sym->attr.subroutine)\n     {\n-      if (sym->ts.type != BT_UNKNOWN && gfc_option.warn_surprising\n+      if (sym->ts.type != BT_UNKNOWN && warn_surprising\n \t  && !sym->attr.implicit_type)\n \tgfc_warning (\"Type specified for intrinsic function '%s' at %L is\"\n \t\t      \" ignored\", sym->name, &sym->declared_at);\n@@ -3571,7 +3571,7 @@ resolve_operator (gfc_expr *e)\n \t  e->ts.type = BT_LOGICAL;\n \t  e->ts.kind = gfc_default_logical_kind;\n \n-\t  if (gfc_option.warn_compare_reals)\n+\t  if (warn_compare_reals)\n \t    {\n \t      gfc_intrinsic_op op = e->value.op.op;\n \n@@ -6331,8 +6331,7 @@ gfc_resolve_iterator (gfc_iterator *iter, bool real_ok, bool own_scope)\n \t  sgn = mpfr_sgn (iter->step->value.real);\n \t  cmp = mpfr_cmp (iter->end->value.real, iter->start->value.real);\n \t}\n-      if (gfc_option.warn_zerotrip &&\n-\t  ((sgn > 0 && cmp < 0) || (sgn < 0 && cmp > 0)))\n+      if (warn_zerotrip && ((sgn > 0 && cmp < 0) || (sgn < 0 && cmp > 0)))\n \tgfc_warning (\"DO loop at %L will be executed zero times\"\n \t\t     \" (use -Wno-zerotrip to suppress)\",\n \t\t     &iter->step->where);\n@@ -7709,7 +7708,7 @@ resolve_select (gfc_code *code, bool select_type)\n \t      && cp->low != cp->high\n \t      && gfc_compare_expr (cp->low, cp->high, INTRINSIC_GT) > 0)\n \t    {\n-\t      if (gfc_option.warn_surprising)\n+\t      if (warn_surprising)\n \t\tgfc_warning (\"Range specification at %L can never \"\n \t\t\t     \"be matched\", &cp->where);\n \n@@ -7811,8 +7810,7 @@ resolve_select (gfc_code *code, bool select_type)\n \n   /* More than two cases is legal but insane for logical selects.\n      Issue a warning for it.  */\n-  if (gfc_option.warn_surprising && type == BT_LOGICAL\n-      && ncases > 2)\n+  if (warn_surprising && type == BT_LOGICAL && ncases > 2)\n     gfc_warning (\"Logical SELECT CASE block at %L has more that two cases\",\n \t\t &code->loc);\n }\n@@ -9182,7 +9180,7 @@ resolve_ordinary_assign (gfc_code *code, gfc_namespace *ns)\n   if (rhs->is_boz && lhs->ts.type != BT_INTEGER)\n     {\n       int rc;\n-      if (gfc_option.warn_surprising)\n+      if (warn_surprising)\n \tgfc_warning (\"BOZ literal at %L is bitwise transferred \"\n \t\t     \"non-integer symbol '%s'\", &code->loc,\n \t\t     lhs->symtree->n.sym->name);\n@@ -10483,7 +10481,7 @@ resolve_charlen (gfc_charlen *cl)\n      value, the length of character entities declared is zero.\"  */\n   if (cl->length && !gfc_extract_int (cl->length, &i) && i < 0)\n     {\n-      if (gfc_option.warn_surprising)\n+      if (warn_surprising)\n \tgfc_warning_now (\"CHARACTER variable at %L has negative length %d,\"\n \t\t\t \" the length has been set to zero\",\n \t\t\t &cl->length->where, i);\n@@ -11499,7 +11497,7 @@ gfc_resolve_finalizers (gfc_symbol* derived, bool *finalizable)\n \t}\n \n       /* Warn if the procedure is non-scalar and not assumed shape.  */\n-      if (gfc_option.warn_surprising && arg->as && arg->as->rank != 0\n+      if (warn_surprising && arg->as && arg->as->rank != 0\n \t  && arg->as->type != AS_ASSUMED_SHAPE)\n \tgfc_warning (\"Non-scalar FINAL procedure at %L should have assumed\"\n \t\t     \" shape argument\", &arg->declared_at);\n@@ -11558,7 +11556,7 @@ gfc_resolve_finalizers (gfc_symbol* derived, bool *finalizable)\n   /* Warn if we haven't seen a scalar finalizer procedure (but we know there\n      were nodes in the list, must have been for arrays.  It is surely a good\n      idea to have a scalar version there if there's something to finalize.  */\n-  if (gfc_option.warn_surprising && result && !seen_scalar)\n+  if (warn_surprising && result && !seen_scalar)\n     gfc_warning (\"Only array FINAL procedures declared for derived type '%s'\"\n \t\t \" defined at %L, suggest also scalar one\",\n \t\t derived->name, &derived->declared_at);"}, {"sha": "8222b7e3b80b69998c8a752254c23ed20d7173a1", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=73e42eef1617bcfa5b333bdb563efeea1626d112", "patch": "@@ -1048,7 +1048,7 @@ gfc_next_char_literal (gfc_instring in_string)\n \t}\n \n       /* Check to see if the continuation line was truncated.  */\n-      if (gfc_option.warn_line_truncation && gfc_current_locus.lb != NULL\n+      if (warn_line_truncation && gfc_current_locus.lb != NULL\n \t  && gfc_current_locus.lb->truncated)\n \t{\n \t  int maxlen = gfc_option.free_line_length;\n@@ -1154,7 +1154,7 @@ gfc_next_char_literal (gfc_instring in_string)\n \t  if (in_string)\n \t    {\n \t      gfc_current_locus.nextc--;\n-\t      if (gfc_option.warn_ampersand && in_string == INSTRING_WARN)\n+\t      if (warn_ampersand && in_string == INSTRING_WARN)\n \t\tgfc_warning (\"Missing '&' in continued character \"\n \t\t\t     \"constant at %C\");\n \t    }\n@@ -1190,7 +1190,7 @@ gfc_next_char_literal (gfc_instring in_string)\n \tgoto done;\n \n       /* Check to see if the continuation line was truncated.  */\n-      if (gfc_option.warn_line_truncation && gfc_current_locus.lb != NULL\n+      if (warn_line_truncation && gfc_current_locus.lb != NULL\n \t  && gfc_current_locus.lb->truncated)\n \t{\n \t  gfc_current_locus.lb->truncated = 0;"}, {"sha": "7ccabc700fc52d57189e14f04abc7ee2dc04b09c", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=73e42eef1617bcfa5b333bdb563efeea1626d112", "patch": "@@ -715,8 +715,7 @@ simplify_achar_char (gfc_expr *e, gfc_expr *k, const char *name, bool ascii)\n       return &gfc_bad_expr;\n     }\n \n-  if (ascii && gfc_option.warn_surprising\n-      && mpz_cmp_si (e->value.integer, 127) > 0)\n+  if (ascii && warn_surprising && mpz_cmp_si (e->value.integer, 127) > 0)\n     gfc_warning (\"Argument of %s function at %L outside of range [0,127]\",\n \t\t name, &e->where);\n \n@@ -2505,7 +2504,7 @@ gfc_simplify_iachar (gfc_expr *e, gfc_expr *kind)\n \n   index = e->value.character.string[0];\n \n-  if (gfc_option.warn_surprising && index > 127)\n+  if (warn_surprising && index > 127)\n     gfc_warning (\"Argument of IACHAR function at %L outside of range 0..127\",\n \t\t &e->where);\n "}, {"sha": "47364da00d941a4330804c9d22b73b441ff8c0bb", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=73e42eef1617bcfa5b333bdb563efeea1626d112", "patch": "@@ -1041,7 +1041,7 @@ gfc_trans_create_temp_array (stmtblock_t * pre, stmtblock_t * post, gfc_ss * ss,\n   gcc_assert (ss->dimen > 0);\n   gcc_assert (ss->loop->dimen == ss->dimen);\n \n-  if (gfc_option.warn_array_temp && where)\n+  if (warn_array_temporaries && where)\n     gfc_warning (\"Creating array temporary at %L\", where);\n \n   /* Set the lower bound to zero.  */\n@@ -5921,7 +5921,7 @@ gfc_trans_dummy_array_bias (gfc_symbol * sym, tree tmpdesc,\n \n       stride = gfc_index_one_node;\n \n-      if (gfc_option.warn_array_temp)\n+      if (warn_array_temporaries)\n \tgfc_warning (\"Creating array temporary at %L\", &loc);\n     }\n \n@@ -7202,7 +7202,7 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, bool g77,\n \t}\n \n       /* Repack the array.  */\n-      if (gfc_option.warn_array_temp)\n+      if (warn_array_temporaries)\n \t{\n \t  if (fsym)\n \t    gfc_warning (\"Creating array temporary at %L for argument '%s'\","}, {"sha": "0b4f5e67d1b0eed34c32390f43cdd4d009ccdaf9", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=73e42eef1617bcfa5b333bdb563efeea1626d112", "patch": "@@ -1133,7 +1133,7 @@ translate_common (gfc_common_head *common, gfc_symbol *var_list)\n \t      /* The required offset conflicts with previous alignment\n \t\t requirements.  Insert padding immediately before this\n \t\t segment.  */\n-\t      if (gfc_option.warn_align_commons)\n+\t      if (warn_align_commons)\n \t\t{\n \t\t  if (strcmp (common->name, BLANK_COMMON_NAME))\n \t\t    gfc_warning (\"Padding of %d bytes required before '%s' in \"\n@@ -1167,7 +1167,7 @@ translate_common (gfc_common_head *common, gfc_symbol *var_list)\n       return;\n     }\n \n-  if (common_segment->offset != 0 && gfc_option.warn_align_commons)\n+  if (common_segment->offset != 0 && warn_align_commons)\n     {\n       if (strcmp (common->name, BLANK_COMMON_NAME))\n \tgfc_warning (\"COMMON '%s' at %L requires %d bytes of padding; \""}, {"sha": "713f96959d6fa0e3b0d87f2cfe7eb873eda72139", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=73e42eef1617bcfa5b333bdb563efeea1626d112", "patch": "@@ -4989,8 +4989,7 @@ generate_local_decl (gfc_symbol * sym)\n       else if (sym->attr.dummy && !sym->attr.in_namelist)\n \t{\n \t  /* INTENT(out) dummy arguments are likely meant to be set.  */\n-\t  if (gfc_option.warn_unused_dummy_argument\n-\t      && sym->attr.intent == INTENT_OUT)\n+\t  if (warn_unused_dummy_argument && sym->attr.intent == INTENT_OUT)\n \t    {\n \t      if (sym->ts.type != BT_DERIVED)\n \t\tgfc_warning (\"Dummy argument '%s' at %L was declared \"\n@@ -5005,7 +5004,7 @@ generate_local_decl (gfc_symbol * sym)\n \t      if (sym->backend_decl != NULL_TREE)\n \t\tTREE_NO_WARNING(sym->backend_decl) = 1;\n \t    }\n-\t  else if (gfc_option.warn_unused_dummy_argument)\n+\t  else if (warn_unused_dummy_argument)\n \t    {\n \t      gfc_warning (\"Unused dummy argument '%s' at %L\", sym->name,\n \t\t\t &sym->declared_at);\n@@ -5121,7 +5120,7 @@ generate_local_decl (gfc_symbol * sym)\n \t{\n \t  if (!sym->attr.referenced)\n \t    {\n-\t      if (gfc_option.warn_unused_dummy_argument)\n+\t      if (warn_unused_dummy_argument)\n \t\tgfc_warning (\"Unused dummy argument '%s' at %L\", sym->name,\n \t\t\t     &sym->declared_at);\n \t    }"}, {"sha": "f8e4df8a74eec2a66c37d3cca9ee4470626839c8", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=73e42eef1617bcfa5b333bdb563efeea1626d112", "patch": "@@ -1111,11 +1111,10 @@ gfc_trans_class_assign (gfc_expr *expr1, gfc_expr *expr2, gfc_exec_op op)\n static void\n realloc_lhs_warning (bt type, bool array, locus *where)\n {\n-  if (array && type != BT_CLASS && type != BT_DERIVED\n-      && gfc_option.warn_realloc_lhs)\n+  if (array && type != BT_CLASS && type != BT_DERIVED && warn_realloc_lhs)\n     gfc_warning (\"Code for reallocating the allocatable array at %L will \"\n \t\t \"be added\", where);\n-  else if (gfc_option.warn_realloc_lhs_all)\n+  else if (warn_realloc_lhs_all)\n     gfc_warning (\"Code for reallocating the allocatable variable at %L \"\n \t\t \"will be added\", where);\n }"}, {"sha": "c13502e5a4e42871568e605e738932f430e76294", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e42eef1617bcfa5b333bdb563efeea1626d112/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=73e42eef1617bcfa5b333bdb563efeea1626d112", "patch": "@@ -6146,7 +6146,7 @@ gfc_conv_intrinsic_transfer (gfc_se * se, gfc_expr * expr)\n \t{\n \t  tmp = gfc_build_addr_expr (NULL_TREE, argse.expr);\n \n-\t  if (gfc_option.warn_array_temp)\n+\t  if (warn_array_temporaries)\n \t    gfc_warning (\"Creating array temporary at %L\", &expr->where);\n \n \t  source = build_call_expr_loc (input_location,"}]}