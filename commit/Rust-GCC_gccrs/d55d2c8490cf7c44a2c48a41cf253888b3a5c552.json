{"sha": "d55d2c8490cf7c44a2c48a41cf253888b3a5c552", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU1ZDJjODQ5MGNmN2M0NGEyYzQ4YTQxY2YyNTM4ODhiM2E1YzU1Mg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-04-30T12:59:44Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-04-30T12:59:44Z"}, "message": "i386.md (and<mode>3): Expand masking operations with 0xff...\n\n\t* config/i386/i386.md (and<mode>3): Expand masking operations with\n\t0xff, 0xffff or 0xffffffff immediates to corresponding zero_extend RTX.\n\t(and splitter): Split to DImode zero_extend RTX for DImode operand[0].\n\nFrom-SVN: r186979", "tree": {"sha": "039605ad4914aaacf8230a5a570a1e5e587ed0a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/039605ad4914aaacf8230a5a570a1e5e587ed0a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d55d2c8490cf7c44a2c48a41cf253888b3a5c552", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d55d2c8490cf7c44a2c48a41cf253888b3a5c552", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d55d2c8490cf7c44a2c48a41cf253888b3a5c552", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d55d2c8490cf7c44a2c48a41cf253888b3a5c552/comments", "author": null, "committer": null, "parents": [{"sha": "b9c8da345cd0763bb30a5a12713c808d74a2070f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9c8da345cd0763bb30a5a12713c808d74a2070f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9c8da345cd0763bb30a5a12713c808d74a2070f"}], "stats": {"total": 117, "additions": 77, "deletions": 40}, "files": [{"sha": "009d45fc718723c2346eb25ed07f405a21e5dd0d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d55d2c8490cf7c44a2c48a41cf253888b3a5c552/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d55d2c8490cf7c44a2c48a41cf253888b3a5c552/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d55d2c8490cf7c44a2c48a41cf253888b3a5c552", "patch": "@@ -1,8 +1,14 @@\n+2012-04-30  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (and<mode>3): Expand masking operations with\n+\t0xff, 0xffff or 0xffffffff immediates to corresponding zero_extend RTX.\n+\t(and splitter): Split to DImode zero_extend RTX for DImode operand[0].\n+\n 2012-04-30  Dodji Seketeli  <dodji@redhat.com>\n \n \tAdd -Wvarargs option\n \t* builtins.c (fold_builtin_next_arg):  Use OPT_Wvarargs as an\n-    \targument for the various warning_at calls.\n+\targument for the various warning_at calls.\n \t* docs/invoke.texi: Update the documentation.\n \n 2012-04-30  Dodji Seketeli  <dodji@redhat.com>\n@@ -18,13 +24,11 @@\n \tMake conversion warnings work on NULL with -ftrack-macro-expansion\n \t* input.h (expansion_point_location_if_in_system_header): Declare\n \tnew function.\n-\t* input.c (expansion_point_location_if_in_system_header): Define\n-\tit.\n+\t* input.c (expansion_point_location_if_in_system_header): Define it.\n \n \tFix -Wuninitialized for -ftrack-macro-expansion\n-\t* tree-ssa.c (warn_uninit): Use the spelling location of the\n-\tvariable declaration.  Use linemap_location_before_p for source\n-\tlocations.\n+\t* tree-ssa.c (warn_uninit): Use the spelling location of the variable\n+\tdeclaration.  Use linemap_location_before_p for source locations.\n \n \tStrip \"<built-in>\" loc from displayed expansion context\n \t* input.c (expand_location_1): When expanding to spelling location\n@@ -61,8 +65,9 @@\n \n 2012-04-29  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n-        * opts.c (finish_options): Do not handle -Wmissing-noreturn here.\n-        * common.opt (Wmissing-noreturn): Alias of -Wsuggest-attribute=noreturn.\n+\t* opts.c (finish_options): Do not handle -Wmissing-noreturn here.\n+\t* common.opt (Wmissing-noreturn): Alias of\n+\t-Wsuggest-attribute=noreturn.\n \n 2012-04-29  Hans-Peter Nilsson  <hp@axis.com>\n \n@@ -102,9 +107,8 @@\n \n 2012-04-27  Paolo Bonzini  <bonzini@gnu.org>\n \n-\t* tree-ssa-phiopt.c (conditional_replacement): Replace PHIs\n-\twhose arguments are -1 and 0, by negating the result of the\n-\tconditional.\n+\t* tree-ssa-phiopt.c (conditional_replacement): Replace PHIs whose\n+\targuments are -1 and 0, by negating the result of the conditional.\n \n 2012-04-27  Paolo Bonzini  <bonzini@gnu.org>\n \n@@ -289,8 +293,7 @@\n \t* config/sparc/sparc.md (attr type): Delete 'fgm_cmp'.\n \t(fpack16_vis, fpackfix_vis, fpack32_vis): Set type to fgm_pack.\n \t(fmul8x16_vis, fmul8x16au_vis, fmul8x16al_vis, fmul8sux16_vis,\n-\tfmul8ulx16_vis, fmuld8sux16_vis, fmuld8ulx16_vis): Set type to\n-\tfgm_mul.\n+\tfmul8ulx16_vis, fmuld8sux16_vis, fmuld8ulx16_vis): Set type to fgm_mul.\n \t(alignaddrsi_vis, alignaddrdi_vis, alignaddrlsi_vis,\n \talignaddrldi_vis): Set type to gsr.\n \t(pdist_vis, pdistn<mode>_vis): Set type to fgm_pdsit.\n@@ -348,8 +351,7 @@\n 2012-04-25  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR debug/52857\n-\t* dwarf2out.c (dbx_reg_number): Assert return value !=\n-\tINVALID_REGNUM.\n+\t* dwarf2out.c (dbx_reg_number): Assert return value != INVALID_REGNUM.\n \n 2012-04-25  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -404,8 +406,9 @@\n \n 2012-04-25  Jan Hubicka  <jh@suse.cz>\n \n-\tPR middle-end/53089 \n-\t* cgraphunit.c (referred_to_p): Move ahead in file to avoid forward declaration.\n+\tPR middle-end/53089\n+\t* cgraphunit.c (referred_to_p): Move ahead in file to avoid\n+\tforward declaration.\n \t(cgraph_finalize_function): Finalize them here.\n \t* symtab.c (dump_symtab): Dump ctors and dtors.\n \n@@ -417,8 +420,7 @@\n \tAlso check that unit bytes long store at bitpos / unit * unit\n \tdoesn't affect bits beyond bitregion_end.\n \t* expmed.c (store_bit_field_1): Avoid trying insv if OP_MODE MEM\n-\twould not fit into bitregion_start ... bitregion_end + 1 bit\n-\tregion.\n+\twould not fit into bitregion_start ... bitregion_end + 1 bit region.\n \t(store_split_bit_field): Decrease unit close to end of bitregion_end\n \tif access is restricted in order to avoid mutual recursion.\n \n@@ -427,18 +429,16 @@\n \tprototypes.\n \t* double-int.c (double_int_max_value, double_int_min_value): New\n \tfunctions.\n-\t* tree-vrp.c (register_edge_assert_for_2): Compare mask\n-\tfor LE_EXPR or GT_EXPR with double_int_max_value\n-\tinstead of double_int_mask.\n+\t* tree-vrp.c (register_edge_assert_for_2): Compare mask for LE_EXPR\n+\tor GT_EXPR with double_int_max_value instead of double_int_mask.\n \n 2012-04-25  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-vectorizer.h (vect_loop_versioning): Adjust prototype.\n \t* tree-vect-loop.c (vect_transform_loop): Adjust.\n \t* tree-vect-loop-manip.c (vect_do_peeling_for_loop_bound): Record\n \tthe maximum number of iterations for the epilogue loop.\n-\t(vect_loop_versioning): Remove case re-using the peeled\n-\tepilogue loop.\n+\t(vect_loop_versioning): Remove case re-using the peeled epilogue loop.\n \n 2012-04-25  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "c98efaa933a030b24a58076972935001a6f759c7", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 53, "deletions": 16, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d55d2c8490cf7c44a2c48a41cf253888b3a5c552/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d55d2c8490cf7c44a2c48a41cf253888b3a5c552/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=d55d2c8490cf7c44a2c48a41cf253888b3a5c552", "patch": "@@ -7695,14 +7695,45 @@\n \t\t  (match_operand:SWIM 2 \"<general_szext_operand>\")))]\n   \"\"\n {\n-  if (<MODE>mode == DImode\n-      && GET_CODE (operands[2]) == CONST_INT\n-      && INTVAL (operands[2]) == (HOST_WIDE_INT) 0xffffffff\n-      && REG_P (operands[1]))\n-    emit_insn (gen_zero_extendsidi2 (operands[0],\n-\t\t\t\t     gen_lowpart (SImode, operands[1])));\n+  enum machine_mode mode = GET_MODE (operands[1]);\n+  rtx (*insn) (rtx, rtx);\n+\n+  if (CONST_INT_P (operands[2]) && REG_P (operands[0]))\n+    {\n+      HOST_WIDE_INT ival = INTVAL (operands[2]);\n+\n+      if (ival == (HOST_WIDE_INT) 0xffffffff)\n+\tmode = SImode;\n+      else if (ival == 0xffff)\n+\tmode = HImode;\n+      else if (ival == 0xff)\n+\tmode = QImode;\n+      }\n+\n+  if (mode == GET_MODE (operands[1]))\n+    {\n+      ix86_expand_binary_operator (AND, <MODE>mode, operands);\n+      DONE;\n+    }\n+\n+  operands[1] = gen_lowpart (mode, operands[1]);\n+\n+  if (GET_MODE (operands[0]) == DImode)\n+    insn = (mode == SImode)\n+\t   ? gen_zero_extendsidi2\n+\t   : (mode == HImode)\n+\t   ? gen_zero_extendhidi2\n+\t   : gen_zero_extendqidi2;\n+  else if (GET_MODE (operands[0]) == SImode)\n+    insn = (mode == HImode)\n+\t   ? gen_zero_extendhisi2\n+\t   : gen_zero_extendqisi2;\n+  else if (GET_MODE (operands[0]) == HImode)\n+    insn = gen_zero_extendqihi2;\n   else\n-    ix86_expand_binary_operator (AND, <MODE>mode, operands);\n+    gcc_unreachable ();\n+\n+  emit_insn (insn (operands[0], operands[1]));\n   DONE;\n })\n \n@@ -7839,32 +7870,38 @@\n    && true_regnum (operands[0]) != true_regnum (operands[1])\"\n   [(const_int 0)]\n {\n+  HOST_WIDE_INT ival = INTVAL (operands[2]);\n   enum machine_mode mode;\n+  rtx (*insn) (rtx, rtx);\n \n-  if (INTVAL (operands[2]) == (HOST_WIDE_INT) 0xffffffff)\n+  if (ival == (HOST_WIDE_INT) 0xffffffff)\n     mode = SImode;\n-  else if (INTVAL (operands[2]) == 0xffff)\n+  else if (ival == 0xffff)\n     mode = HImode;\n   else\n     {\n-      gcc_assert (INTVAL (operands[2]) == 0xff);\n+      gcc_assert (ival == 0xff);\n       mode = QImode;\n     }\n \n   operands[1] = gen_lowpart (mode, operands[1]);\n \n-  if (mode == SImode)\n-    emit_insn (gen_zero_extendsidi2 (operands[0], operands[1]));\n+  if (GET_MODE (operands[0]) == DImode)\n+    insn = (mode == SImode)\n+\t   ? gen_zero_extendsidi2\n+\t   : (mode == HImode)\n+\t   ? gen_zero_extendhidi2\n+\t   : gen_zero_extendqidi2;\n   else\n     {\n-      rtx (*insn) (rtx, rtx);\n-\n       /* Zero extend to SImode to avoid partial register stalls.  */\n       operands[0] = gen_lowpart (SImode, operands[0]);\n \n-      insn = (mode == HImode) ? gen_zero_extendhisi2 : gen_zero_extendqisi2;\n-      emit_insn (insn (operands[0], operands[1]));\n+      insn = (mode == HImode)\n+\t     ? gen_zero_extendhisi2\n+\t     : gen_zero_extendqisi2;\n     }\n+  emit_insn (insn (operands[0], operands[1]));\n   DONE;\n })\n "}]}