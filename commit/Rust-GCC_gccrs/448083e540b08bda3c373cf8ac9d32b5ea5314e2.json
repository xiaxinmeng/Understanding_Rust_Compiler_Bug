{"sha": "448083e540b08bda3c373cf8ac9d32b5ea5314e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ4MDgzZTU0MGIwOGJkYTNjMzczY2Y4YWM5ZDMyYjVlYTUzMTRlMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-07-27T15:49:12Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-07-27T15:49:12Z"}, "message": "decl.c (push_library_fn): Add a parameter for the exceptions that the function may throw.\n\n2008-07-27  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (push_library_fn): Add a parameter for the exceptions that\n\tthe function may throw.\n\t(push_void_library_fn, push_throw_library_fn, expand_static_init):\n\tAdjust.\n\t(build_library_fn): Change to static.\n\t* cp-tree.h: Adjust declarations.\n\t* except.c (declare_nothrow_library_fn): New.\n\t(do_get_exception_ptr, do_begin_catch, do_free_exception,\n\tdo_allocate_exception):  Use the latter, adjust the declarations\n\t(ie, add empty exception-specification), consistently with the\n\tactual implementation in libsupc++.\n\nFrom-SVN: r138189", "tree": {"sha": "da418f319220eb6a1b3f4aae8839aac856aadb83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da418f319220eb6a1b3f4aae8839aac856aadb83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/448083e540b08bda3c373cf8ac9d32b5ea5314e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/448083e540b08bda3c373cf8ac9d32b5ea5314e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/448083e540b08bda3c373cf8ac9d32b5ea5314e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/448083e540b08bda3c373cf8ac9d32b5ea5314e2/comments", "author": null, "committer": null, "parents": [{"sha": "0d52899f78e638f7a5e2a50954d3740d68907a91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d52899f78e638f7a5e2a50954d3740d68907a91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d52899f78e638f7a5e2a50954d3740d68907a91"}], "stats": {"total": 80, "additions": 56, "deletions": 24}, "files": [{"sha": "c40808e6fd2bcfae80501af68dac608596414207", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/448083e540b08bda3c373cf8ac9d32b5ea5314e2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/448083e540b08bda3c373cf8ac9d32b5ea5314e2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=448083e540b08bda3c373cf8ac9d32b5ea5314e2", "patch": "@@ -1,3 +1,17 @@\n+2008-07-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (push_library_fn): Add a parameter for the exceptions that\n+\tthe function may throw.\n+\t(push_void_library_fn, push_throw_library_fn, expand_static_init):\n+\tAdjust.\n+\t(build_library_fn): Change to static.\n+\t* cp-tree.h: Adjust declarations.\n+\t* except.c (declare_nothrow_library_fn): New.\n+\t(do_get_exception_ptr, do_begin_catch, do_free_exception,\n+\tdo_allocate_exception):  Use the latter, adjust the declarations\n+\t(ie, add empty exception-specification), consistently with the\n+\tactual implementation in libsupc++.\n+\n 2008-07-25  Jan Hubicka  <jh@suse.cz>\n \n \t* typeck.c (inline_conversion): Remove."}, {"sha": "67f15e5521934aa1138c46a4975b79b0f12d17ad", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/448083e540b08bda3c373cf8ac9d32b5ea5314e2/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/448083e540b08bda3c373cf8ac9d32b5ea5314e2/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=448083e540b08bda3c373cf8ac9d32b5ea5314e2", "patch": "@@ -4225,10 +4225,9 @@ extern bool check_omp_return\t\t\t(void);\n extern tree make_typename_type\t\t\t(tree, tree, enum tag_types, tsubst_flags_t);\n extern tree make_unbound_class_template\t\t(tree, tree, tree, tsubst_flags_t);\n extern tree check_for_out_of_scope_variable\t(tree);\n-extern tree build_library_fn\t\t\t(tree, tree);\n extern tree build_library_fn_ptr\t\t(const char *, tree);\n extern tree build_cp_library_fn_ptr\t\t(const char *, tree);\n-extern tree push_library_fn\t\t\t(tree, tree);\n+extern tree push_library_fn\t\t\t(tree, tree, tree);\n extern tree push_void_library_fn\t\t(tree, tree);\n extern tree push_throw_library_fn\t\t(tree, tree);\n extern tree check_tag_decl\t\t\t(cp_decl_specifier_seq *);"}, {"sha": "0cc17a484f63351348ee064a5d9c858b1316d47d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/448083e540b08bda3c373cf8ac9d32b5ea5314e2/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/448083e540b08bda3c373cf8ac9d32b5ea5314e2/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=448083e540b08bda3c373cf8ac9d32b5ea5314e2", "patch": "@@ -3590,7 +3590,7 @@ build_library_fn_1 (tree name, enum tree_code operator_code, tree type)\n    We assume that such functions never throw; if this is incorrect,\n    callers should unset TREE_NOTHROW.  */\n \n-tree\n+static tree\n build_library_fn (tree name, tree type)\n {\n   tree fn = build_library_fn_1 (name, ERROR_MARK, type);\n@@ -3629,12 +3629,18 @@ build_cp_library_fn_ptr (const char* name, tree type)\n }\n \n /* Like build_library_fn, but also pushes the function so that we will\n-   be able to find it via IDENTIFIER_GLOBAL_VALUE.  */\n+   be able to find it via IDENTIFIER_GLOBAL_VALUE.  Also, the function\n+   may throw exceptions listed in RAISES.  */\n \n tree\n-push_library_fn (tree name, tree type)\n+push_library_fn (tree name, tree type, tree raises)\n {\n-  tree fn = build_library_fn (name, type);\n+  tree fn;\n+\n+  if (raises)\n+    type = build_exception_variant (type, raises);\n+\n+  fn = build_library_fn (name, type);\n   pushdecl_top_level (fn);\n   return fn;\n }\n@@ -3659,7 +3665,7 @@ tree\n push_void_library_fn (tree name, tree parmtypes)\n {\n   tree type = build_function_type (void_type_node, parmtypes);\n-  return push_library_fn (name, type);\n+  return push_library_fn (name, type, NULL_TREE);\n }\n \n /* Like push_library_fn, but also note that this function throws\n@@ -3668,7 +3674,7 @@ push_void_library_fn (tree name, tree parmtypes)\n tree\n push_throw_library_fn (tree name, tree type)\n {\n-  tree fn = push_library_fn (name, type);\n+  tree fn = push_library_fn (name, type, NULL_TREE);\n   TREE_THIS_VOLATILE (fn) = 1;\n   TREE_NOTHROW (fn) = 0;\n   return fn;\n@@ -6169,9 +6175,10 @@ expand_static_init (tree decl, tree init)\n \t\t\t\t\t void_list_node);\n \t      tree vfntype = build_function_type (void_type_node, argtypes);\n \t      acquire_fn = push_library_fn\n-\t\t(acquire_fn, build_function_type (integer_type_node, argtypes));\n-\t      release_fn = push_library_fn (release_fn, vfntype);\n-\t      abort_fn = push_library_fn (abort_fn, vfntype);\n+\t\t(acquire_fn, build_function_type (integer_type_node, argtypes),\n+\t\t NULL_TREE);\n+\t      release_fn = push_library_fn (release_fn, vfntype, NULL_TREE);\n+\t      abort_fn = push_library_fn (abort_fn, vfntype, NULL_TREE);\n \t    }\n \t  else\n \t    {"}, {"sha": "adb1b97928fb50c5a6390405f0d327a46632a121", "filename": "gcc/cp/except.c", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/448083e540b08bda3c373cf8ac9d32b5ea5314e2/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/448083e540b08bda3c373cf8ac9d32b5ea5314e2/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=448083e540b08bda3c373cf8ac9d32b5ea5314e2", "patch": "@@ -1,6 +1,7 @@\n /* Handle exceptional things in C++.\n    Copyright (C) 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005, 2007  Free Software Foundation, Inc.\n+   2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008\n+   Free Software Foundation, Inc.\n    Contributed by Michael Tiemann <tiemann@cygnus.com>\n    Rewritten by Mike Stump <mrs@cygnus.com>, based upon an\n    initial re-implementation courtesy Tad Hunt.\n@@ -160,6 +161,21 @@ build_exc_ptr (void)\n   return build0 (EXC_PTR_EXPR, ptr_type_node);\n }\n \n+/* Declare a function NAME, returning RETURN_TYPE, taking a single\n+   parameter PARM_TYPE, with an empty exception specification.\n+\n+   Note that the C++ ABI document does not have a throw-specifier on\n+   the routines declared below via this function.  The declarations\n+   are consistent with the actual implementations in libsupc++.  */\n+\n+static tree\n+declare_nothrow_library_fn (tree name, tree return_type, tree parm_type)\n+{\n+  tree tmp = tree_cons (NULL_TREE, parm_type, void_list_node);\n+  return push_library_fn (name, build_function_type (return_type, tmp),\n+\t\t\t  empty_except_spec);\n+}\n+\n /* Build up a call to __cxa_get_exception_ptr so that we can build a\n    copy constructor for the thrown object.  */\n \n@@ -171,9 +187,8 @@ do_get_exception_ptr (void)\n   fn = get_identifier (\"__cxa_get_exception_ptr\");\n   if (!get_global_value_if_present (fn, &fn))\n     {\n-      /* Declare void* __cxa_get_exception_ptr (void *).  */\n-      tree tmp = tree_cons (NULL_TREE, ptr_type_node, void_list_node);\n-      fn = push_library_fn (fn, build_function_type (ptr_type_node, tmp));\n+      /* Declare void* __cxa_get_exception_ptr (void *) throw().  */\n+      fn = declare_nothrow_library_fn (fn, ptr_type_node, ptr_type_node);\n     }\n \n   return cp_build_function_call (fn, tree_cons (NULL_TREE, build_exc_ptr (),\n@@ -192,9 +207,8 @@ do_begin_catch (void)\n   fn = get_identifier (\"__cxa_begin_catch\");\n   if (!get_global_value_if_present (fn, &fn))\n     {\n-      /* Declare void* __cxa_begin_catch (void *).  */\n-      tree tmp = tree_cons (NULL_TREE, ptr_type_node, void_list_node);\n-      fn = push_library_fn (fn, build_function_type (ptr_type_node, tmp));\n+      /* Declare void* __cxa_begin_catch (void *) throw().  */\n+      fn = declare_nothrow_library_fn (fn, ptr_type_node, ptr_type_node);\n     }\n \n   return cp_build_function_call (fn, tree_cons (NULL_TREE, build_exc_ptr (),\n@@ -543,9 +557,8 @@ do_allocate_exception (tree type)\n   fn = get_identifier (\"__cxa_allocate_exception\");\n   if (!get_global_value_if_present (fn, &fn))\n     {\n-      /* Declare void *__cxa_allocate_exception(size_t).  */\n-      tree tmp = tree_cons (NULL_TREE, size_type_node, void_list_node);\n-      fn = push_library_fn (fn, build_function_type (ptr_type_node, tmp));\n+      /* Declare void *__cxa_allocate_exception(size_t) throw().  */\n+      fn = declare_nothrow_library_fn (fn, ptr_type_node, size_type_node);\n     }\n \n   return cp_build_function_call (fn, \n@@ -565,9 +578,8 @@ do_free_exception (tree ptr)\n   fn = get_identifier (\"__cxa_free_exception\");\n   if (!get_global_value_if_present (fn, &fn))\n     {\n-      /* Declare void __cxa_free_exception (void *).  */\n-      fn = push_void_library_fn (fn, tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t\t\t\tvoid_list_node));\n+      /* Declare void __cxa_free_exception (void *) throw().  */\n+      fn = declare_nothrow_library_fn (fn, void_type_node, ptr_type_node);\n     }\n \n   return cp_build_function_call (fn, tree_cons (NULL_TREE, ptr, NULL_TREE),"}]}