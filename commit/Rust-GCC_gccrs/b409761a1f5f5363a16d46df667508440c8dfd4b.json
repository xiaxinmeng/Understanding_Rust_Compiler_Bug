{"sha": "b409761a1f5f5363a16d46df667508440c8dfd4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQwOTc2MWExZjVmNTM2M2ExNmQ0NmRmNjY3NTA4NDQwYzhkZmQ0Yg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-09-29T21:29:11Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-09-29T21:29:11Z"}, "message": "varasm.c (assemble_real): Use real_to_target directly...\n\n\t* varasm.c (assemble_real): Use real_to_target directly,\n\tcalculate the number of significant elements of the result\n\tarray and write them out in a loop, instead of using a giant\n\tswitch statement to pick the correct REAL_VALUE_TO_TARGET_*\n\tmacro.\n\nFrom-SVN: r71917", "tree": {"sha": "bb342df38ab5769485ec71734c68bfcc6907976b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb342df38ab5769485ec71734c68bfcc6907976b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b409761a1f5f5363a16d46df667508440c8dfd4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b409761a1f5f5363a16d46df667508440c8dfd4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b409761a1f5f5363a16d46df667508440c8dfd4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b409761a1f5f5363a16d46df667508440c8dfd4b/comments", "author": null, "committer": null, "parents": [{"sha": "f820b0cf2cb6595ed42b16fd1615eb3aec0a6ada", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f820b0cf2cb6595ed42b16fd1615eb3aec0a6ada", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f820b0cf2cb6595ed42b16fd1615eb3aec0a6ada"}], "stats": {"total": 129, "additions": 47, "deletions": 82}, "files": [{"sha": "5e7f10b304a8be24bd95cde39baaacdc4631d1c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b409761a1f5f5363a16d46df667508440c8dfd4b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b409761a1f5f5363a16d46df667508440c8dfd4b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b409761a1f5f5363a16d46df667508440c8dfd4b", "patch": "@@ -1,3 +1,11 @@\n+2003-09-29  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* varasm.c (assemble_real): Use real_to_target directly,\n+\tcalculate the number of significant elements of the result\n+\tarray and write them out in a loop, instead of using a giant\n+\tswitch statement to pick the correct REAL_VALUE_TO_TARGET_*\n+\tmacro.\n+\n Mon Sep 29 22:59:05 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \tPR c++/12175\n@@ -397,7 +405,7 @@ Mon Sep 29 19:05:46 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \tPR pch/12112\n \t* gcc/cppfiles.c (pch_open_file): Return based on combined\n-        result of all files.\n+\tresult of all files.\n \t(validate_pch): Return validate flag for current file.\n \n 2003-09-24  Roger Sayle  <roger@eyesopen.com>\n@@ -1007,7 +1015,7 @@ Mon Sep 29 19:05:46 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t* cgraph.c: Fix typo in debugging output.\n \n 2003-09-19  T. Papadopoulo <Theodore.Papadopoulo@sophia.inria.fr>\n-            Eric Botcazou <ebotcazou@libertysurf.fr>\n+\t    Eric Botcazou <ebotcazou@libertysurf.fr>\n \n \tPR target/12166\n \t* config/sparc/sol2-c1.asm (start): Set __Argv if GCRT1.\n@@ -1265,10 +1273,10 @@ Mon Sep 29 19:05:46 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n 2003-09-16  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n-        * doc/invoke.texi (Warning Options): Add missing hyphen before\n-        \"Wimport\".  Change \"-Wno-endif-labels\" to \"-Wendif-labels\".\n-        Move \"-Wold-style-definition\" to the C-only section.\n-        Fix the ordering of the warning options.\n+\t* doc/invoke.texi (Warning Options): Add missing hyphen before\n+\t\"Wimport\".  Change \"-Wno-endif-labels\" to \"-Wendif-labels\".\n+\tMove \"-Wold-style-definition\" to the C-only section.\n+\tFix the ordering of the warning options.\n \n 2003-09-15  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \t    Jeff Law  <law@redhat.com>\n@@ -1301,7 +1309,7 @@ Mon Sep 29 19:05:46 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \tof choose_ready for non-dfa insn scheduling.\n \n 2003-09-15  Andreas Jaeger  <aj@suse.de>\n-            Kaveh R. Ghazi <ghazi@caip.rutgers.edu>\n+\t    Kaveh R. Ghazi <ghazi@caip.rutgers.edu>\n \n \t* doc/invoke.texi (Warning Options): Describe -Wold-style-definition.\n \t* c-opts.c (c_common_handle_option): Handle OPT_Wold_style_definition.\n@@ -1630,7 +1638,7 @@ Mon Sep 29 19:05:46 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t* Makefile.in: Revert yesterday's change.\n \n 2003-09-08  Bernardo Innocenti  <bernie@develer.com>\n-            Peter Barada <peter@baradas.org>\n+\t    Peter Barada <peter@baradas.org>\n \n \t* config/m68k/coff.h (REGISTER_NAMES): Add fake register `argptr'\n \t* config/m68k/hp320.h (REGISTER_NAMES): Likewise.\n@@ -1990,10 +1998,10 @@ Mon Sep 29 19:05:46 CEST 2003  Jan Hubicka  <jh@suse.cz>\n 2003-09-04  Nick Clifton  <nickc@redhat.com>\n \n \t* config.gcc (v850e-*-*): Use t-v850e makefile fragment.\n-        * config/v850/t-v850: Only produce one extra multilib - for\n-        the v850e.\n-        * config/v850/t-v850e: New file: Only produce one extra\n-        multilib - for the v850.\n+\t* config/v850/t-v850: Only produce one extra multilib - for\n+\tthe v850e.\n+\t* config/v850/t-v850e: New file: Only produce one extra\n+\tmultilib - for the v850.\n \n 2003-09-04  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "47db821d92dd697d89b7d405ea5aed79c5639e6c", "filename": "gcc/varasm.c", "status": "modified", "additions": 27, "deletions": 70, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b409761a1f5f5363a16d46df667508440c8dfd4b/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b409761a1f5f5363a16d46df667508440c8dfd4b/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=b409761a1f5f5363a16d46df667508440c8dfd4b", "patch": "@@ -1890,77 +1890,34 @@ void\n assemble_real (REAL_VALUE_TYPE d, enum machine_mode mode, unsigned int align)\n {\n   long data[4];\n-  long l;\n-  unsigned int nalign = min_align (align, 32);\n-\n-  switch (BITS_PER_UNIT)\n+  int i;\n+  int bitsize, nelts, nunits, units_per;\n+\n+  /* This is hairy.  We have a quantity of known bitsize.  real_to_target\n+     will put it into an array of *host* longs, 32 bits per element\n+     (even if long is more than 32 bits).  We need to determine the\n+     number of array elements that are occupied (nelts) and the number\n+     of *target* min-addressable units that will be occupied in the\n+     object file (nunits).  We can assume that BITS_PER_UNIT divides\n+     the mode's bitsize evenly, but we can not assume that 32 does.  */\n+  bitsize = GET_MODE_BITSIZE (mode);\n+  nunits = bitsize / BITS_PER_UNIT;\n+  nelts = CEIL (bitsize, 32);\n+  units_per = 32 / BITS_PER_UNIT;\n+\n+  real_to_target (data, &d, mode);\n+\n+  /* Put out the first word with the specified alignment.  */\n+  assemble_integer (GEN_INT (data[0]), MIN (nunits, units_per), align, 1);\n+  nunits -= units_per;\n+\n+  /* Subsequent words need only 32-bit alignment.  */\n+  align = min_align (align, 32);\n+\n+  for (i = 1; i < nelts; i++)\n     {\n-    case 8:\n-      switch (mode)\n-\t{\n-\tcase SFmode:\n-\t  REAL_VALUE_TO_TARGET_SINGLE (d, l);\n-\t  assemble_integer (GEN_INT (l), 4, align, 1);\n-\t  break;\n-\tcase DFmode:\n-\t  REAL_VALUE_TO_TARGET_DOUBLE (d, data);\n-\t  assemble_integer (GEN_INT (data[0]), 4, align, 1);\n-\t  assemble_integer (GEN_INT (data[1]), 4, nalign, 1);\n-\t  break;\n-\tcase XFmode:\n-\t  REAL_VALUE_TO_TARGET_LONG_DOUBLE (d, data);\n-\t  assemble_integer (GEN_INT (data[0]), 4, align, 1);\n-\t  assemble_integer (GEN_INT (data[1]), 4, nalign, 1);\n-\t  assemble_integer (GEN_INT (data[2]), 4, nalign, 1);\n-\t  break;\n-\tcase TFmode:\n-\t  REAL_VALUE_TO_TARGET_LONG_DOUBLE (d, data);\n-\t  assemble_integer (GEN_INT (data[0]), 4, align, 1);\n-\t  assemble_integer (GEN_INT (data[1]), 4, nalign, 1);\n-\t  assemble_integer (GEN_INT (data[2]), 4, nalign, 1);\n-\t  assemble_integer (GEN_INT (data[3]), 4, nalign, 1);\n-\t  break;\n-\tdefault:\n-\t  abort ();\n-\t}\n-      break;\n-\n-    case 16:\n-      switch (mode)\n-\t{\n-\tcase HFmode:\n-\t  REAL_VALUE_TO_TARGET_SINGLE (d, l);\n-\t  assemble_integer (GEN_INT (l), 2, align, 1);\n-\t  break;\n-\tcase TQFmode:\n-\t  REAL_VALUE_TO_TARGET_DOUBLE (d, data);\n-\t  assemble_integer (GEN_INT (data[0]), 2, align, 1);\n-\t  assemble_integer (GEN_INT (data[1]), 1, nalign, 1);\n-\t  break;\n-\tdefault:\n-\t  abort ();\n-\t}\n-      break;\n-\n-    case 32:\n-      switch (mode)\n-\t{\n-\tcase QFmode:\n-\t  REAL_VALUE_TO_TARGET_SINGLE (d, l);\n-\t  assemble_integer (GEN_INT (l), 1, align, 1);\n-\t  break;\n-\tcase HFmode:\n-\t  REAL_VALUE_TO_TARGET_DOUBLE (d, data);\n-\t  assemble_integer (GEN_INT (data[0]), 1, align, 1);\n-\t  assemble_integer (GEN_INT (data[1]), 1, nalign, 1);\n-\t  break;\n-\tdefault:\n-\t  abort ();\n-\t}\n-      break;\n-\n-    default:\n-      abort ();\n+      assemble_integer (GEN_INT (data[i]), MIN (nunits, units_per), align, 1);\n+      nunits -= units_per;\n     }\n }\n \f"}]}