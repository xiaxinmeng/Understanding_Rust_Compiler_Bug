{"sha": "3d7fcc041030eeaf87357e32c45c999e78f54f08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q3ZmNjMDQxMDMwZWVhZjg3MzU3ZTMyYzQ1Yzk5OWU3OGY1NGYwOA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "1998-08-29T01:17:36Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "1998-08-29T01:17:36Z"}, "message": "\ufffd\nmore tests\n\nFrom-SVN: r22073", "tree": {"sha": "236ea38d0eb720abee25639c018470fa5b5d67a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/236ea38d0eb720abee25639c018470fa5b5d67a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d7fcc041030eeaf87357e32c45c999e78f54f08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d7fcc041030eeaf87357e32c45c999e78f54f08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d7fcc041030eeaf87357e32c45c999e78f54f08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d7fcc041030eeaf87357e32c45c999e78f54f08/comments", "author": null, "committer": null, "parents": [{"sha": "4e327c30bd4d5620a11018fb246da7b1121db0a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e327c30bd4d5620a11018fb246da7b1121db0a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e327c30bd4d5620a11018fb246da7b1121db0a0"}], "stats": {"total": 177, "additions": 177, "deletions": 0}, "files": [{"sha": "100de748985f8a558dc32d781adcacce4078f185", "filename": "gcc/testsuite/g++.old-deja/g++.benjamin/tem04.C", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d7fcc041030eeaf87357e32c45c999e78f54f08/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Ftem04.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d7fcc041030eeaf87357e32c45c999e78f54f08/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Ftem04.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Ftem04.C?ref=3d7fcc041030eeaf87357e32c45c999e78f54f08", "patch": "@@ -0,0 +1,177 @@\n+// Build don't link:\n+// 980827 bkoz\n+// template parameter redeclaration bugs, part two:\n+// template template params and expanded template non-type parms\n+\n+// 14.1 Template parameters\n+// p 13\n+// The scope of a template-parameter extens from its point of\n+// declartion until the end of its template. In particular, a\n+// template-parameter can be used in the declaration of subsequent\n+// template-parameters and their default arguments. \n+\n+// 14.6.1 Locally declared names\n+// p 4\n+// A template-parameter shall not be redeclared within its scope\n+// (including nested scopes). A template-parameter shall not have the\n+// same name as the template name.\n+\n+// 14 \n+// declared friend template (v3, template type parameters)\n+template <class T4>// ERROR - .*\n+class Xfourteen {\n+protected:\n+  T4 value;\n+public:\n+  Xfourteen(T4 init): value(init) {}\n+  template <template <typename T4> class T5> \n+  friend bool isequal (Xfourteen<int>& lhs, Xfourteen<int>& rhs);// ERROR - .*\n+};\n+\n+\n+// 15\n+// nested template class (v3, template type parameters)\n+template <class T6>// ERROR - .*\n+class Xfifteen {\n+protected:\n+  T6 value;\n+public:\n+  Xfifteen(T6 init): value(init) {}\n+\n+  template <template <typename T6> class T7> class nested {// ERROR - .*\n+    int value;\n+  public:\n+    nested(): value( int(0)) {}\n+  };\n+};\n+\n+\n+// 16\n+// member templates (v3, template type parameters)\n+template <class T8>// ERROR - .*\n+class Xsixteen {\n+protected:\n+  T8 value;\n+public:\n+  Xsixteen(T8 init): value(init) {}\n+\n+  template <template <typename T8> class T9> int comp_ge(int test) {// ERROR - .*\n+    int local_value;\n+    if (local_value > value) \n+      return local_value;\n+    else\n+      return value;\n+  }\n+};\n+\n+\n+// 17\n+// declared friend template (v4, template type parameters on the class)\n+template <typename T9> class tem_base {\n+public:\n+  T9 value;\n+};\n+\n+template <typename T10, template <typename T12> class C10>// ERROR - .*\n+class Xseventeen {\n+protected:\n+  C10<T10> value;\n+public:\n+  Xseventeen(){}\n+  template <typename T12> // ok??\n+  friend bool isequal (Xseventeen<T10, tem_base>& lhs, \n+\t\t       Xseventeen<T10, tem_base>& rhs);\n+};\n+\n+//template class Xseventeen<int, tem_base>;\n+\n+\n+// 18\n+// more template template redecl tests\n+template <typename T14, template <typename T15> class C12>// ERROR - .*\n+class Xeighteen {\n+protected:\n+  C12<T14> value;\n+  int C12; // ERROR - .*\n+};\n+\n+\n+// 19\n+// more template template redecl tests\n+template <typename T16, template <typename T17> class C14>// ERROR - .*\n+class Xnineteen{\n+protected:\n+  C14<T16> value;\n+  template <class C14> class nested {// ERROR - .*\n+    T16 value;\n+  public:\n+    nested(): value( T16(0)) {}\n+  };\n+};\n+\n+\n+// 20\n+// local names (14.6.1 p 4) part two, variable names as template param\n+template <class T17, int i> class Xtwenty {\n+  void f(){\n+    T17 my_type; //ok\n+    for (int j = 0; j < 5; ++l)\n+      {\n+\tT17 my_type; //ok\n+\t++my_type;\n+      }\n+  }\n+};\n+\n+\n+// 14.1 Template parameters\n+// p 4\n+// A non-type templat- parameter shall have one of the following\n+// (optionally cv-qualified) types:\n+//   integral or enumeration type\n+//   pointer to object or pointer to function\n+//   referenct to object or referece to function\n+//   pointer to member\n+\n+// 21 \n+// non-type template parameters v1: enum\n+enum my_enum {my_A = 45, my_B, my_C};\n+\n+template <my_enum T18> class Xtwentyone {// ERROR - .*\n+  float T18; // ERROR - .*\n+};\n+\n+\n+// 22\n+// non-type template parameters v1: pointer to object\n+struct base {\n+  int\tgcount;\n+  int ret_gcount() {return gcount;}\n+};\n+\n+template <class T20, base* b> class Xtwentytwo {// ERROR - .*\n+  float b; // ERROR - .*\n+};\n+\n+\n+// 23\n+// non-type template parameters v2: reference to object\n+template <class T20, base& b2> class Xtwentythree {// ERROR - .*\n+  float b2; // ERROR - .*\n+};\n+\n+\n+// 24\n+// non-type template parameters v3: pointer to member\n+template <class T20, int base::* b3> class Xtwentyfour {// ERROR - .*\n+  float b3; // ERROR - .*\n+};\n+\n+\n+\n+\n+\n+\n+\n+\n+"}]}