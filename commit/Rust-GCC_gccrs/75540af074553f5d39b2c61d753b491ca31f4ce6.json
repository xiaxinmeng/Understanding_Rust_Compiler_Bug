{"sha": "75540af074553f5d39b2c61d753b491ca31f4ce6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU1NDBhZjA3NDU1M2Y1ZDM5YjJjNjFkNzUzYjQ5MWNhMzFmNGNlNg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-08-01T18:03:28Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-08-01T18:03:28Z"}, "message": "rs6000.md (define_splits): Kill unused constraints.\n\n\t* rs6000.md (define_splits): Kill unused constraints.\n\n\t* function.c (thread_prologue_and_epilogue_insns): Kill code\n\tdealing with non-existent CFG.\n\nFrom-SVN: r44548", "tree": {"sha": "0c146001c9480c73a4ba88d9207a4e14b9539c62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c146001c9480c73a4ba88d9207a4e14b9539c62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75540af074553f5d39b2c61d753b491ca31f4ce6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75540af074553f5d39b2c61d753b491ca31f4ce6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75540af074553f5d39b2c61d753b491ca31f4ce6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75540af074553f5d39b2c61d753b491ca31f4ce6/comments", "author": null, "committer": null, "parents": [{"sha": "ec5c56db8bd075907a7b60d2cfbf225eeb4ecc1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec5c56db8bd075907a7b60d2cfbf225eeb4ecc1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec5c56db8bd075907a7b60d2cfbf225eeb4ecc1f"}], "stats": {"total": 128, "additions": 66, "deletions": 62}, "files": [{"sha": "2dd587a5af5d1918a8b8129301c9cb1dfb56b3e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75540af074553f5d39b2c61d753b491ca31f4ce6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75540af074553f5d39b2c61d753b491ca31f4ce6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75540af074553f5d39b2c61d753b491ca31f4ce6", "patch": "@@ -1,3 +1,13 @@\n+Wed Aug  1 20:01:42 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* rs6000.md (define_splits): Kill unused constraints.\n+\n+Wed Aug  1 20:02:12 CEST 2001 Graham Stott  <grahams@redhat.com>\n+\t\t\t      Jan Hubicka  <jh@suse.cz>\n+\n+\t* function.c (thread_prologue_and_epilogue_insns): Kill code\n+\tdealing with non-existent CFG.\n+\n 2001-08-01  Kazu Hirata  <kazu@hxi.com>\n \n \t* alias.c: Fix comment formatting."}, {"sha": "1011c9e83c695dfc59e55597fa680d275bc1fe8b", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75540af074553f5d39b2c61d753b491ca31f4ce6/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75540af074553f5d39b2c61d753b491ca31f4ce6/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=75540af074553f5d39b2c61d753b491ca31f4ce6", "patch": "@@ -1955,9 +1955,9 @@\n   [(set_attr \"length\" \"12\")])\n \n (define_split\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,r\")\n-\t(neg:SI (abs:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,0\"))))\n-   (clobber (match_scratch:SI 2 \"=&r,&r\"))]\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+\t(neg:SI (abs:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))))\n+   (clobber (match_scratch:SI 2 \"\"))]\n   \"! TARGET_POWER && reload_completed\"\n   [(set (match_dup 2) (ashiftrt:SI (match_dup 1) (const_int 31)))\n    (set (match_dup 0) (xor:SI (match_dup 2) (match_dup 1)))\n@@ -2737,8 +2737,8 @@\n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n \t(compare:CC (match_operator:SI 4 \"boolean_operator\"\n-\t [(match_operand:SI 1 \"gpc_reg_operand\" \"%r,r\")\n-\t  (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\")])\n+\t [(match_operand:SI 1 \"gpc_reg_operand\" \"\")\n+\t  (match_operand:SI 2 \"gpc_reg_operand\" \"\")])\n \t (const_int 0)))\n    (clobber (match_scratch:SI 3 \"\"))]\n   \"! TARGET_POWERPC64 && reload_completed\"\n@@ -2764,12 +2764,12 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"\")\n \t(compare:CC (match_operator:SI 4 \"boolean_operator\"\n-\t [(match_operand:SI 1 \"gpc_reg_operand\" \"%r,r\")\n-\t  (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\")])\n+\t [(match_operand:SI 1 \"gpc_reg_operand\" \"\")\n+\t  (match_operand:SI 2 \"gpc_reg_operand\" \"\")])\n \t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(match_dup 4))]\n   \"! TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 0) (match_dup 4))\n@@ -2825,8 +2825,8 @@\n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n \t(compare:CC (match_operator:SI 4 \"boolean_operator\"\n-\t [(not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n-\t  (match_operand:SI 2 \"gpc_reg_operand\" \"r\")])\n+\t [(not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n+\t  (match_operand:SI 2 \"gpc_reg_operand\" \"\")])\n \t (const_int 0)))\n    (clobber (match_scratch:SI 3 \"\"))]\n   \"! TARGET_POWERPC64 && reload_completed\"\n@@ -2852,12 +2852,12 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"\")\n \t(compare:CC (match_operator:SI 4 \"boolean_operator\"\n-\t [(not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r\"))\n-\t  (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\")])\n+\t [(not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n+\t  (match_operand:SI 2 \"gpc_reg_operand\" \"\")])\n \t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(match_dup 4))]\n   \"! TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 0) (match_dup 4))\n@@ -2891,8 +2891,8 @@\n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n \t(compare:CC (match_operator:SI 4 \"boolean_operator\"\n-\t [(not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n-\t  (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))])\n+\t [(not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n+\t  (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"\"))])\n \t (const_int 0)))\n    (clobber (match_scratch:SI 3 \"\"))]\n   \"! TARGET_POWERPC64 && reload_completed\"\n@@ -2918,12 +2918,12 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"\")\n \t(compare:CC (match_operator:SI 4 \"boolean_operator\"\n-\t [(not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r\"))\n-\t  (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\"))])\n+\t [(not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n+\t  (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"\"))])\n \t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(match_dup 4))]\n   \"! TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 0) (match_dup 4))\n@@ -5197,12 +5197,12 @@\n \n (define_split\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))\n+\t(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"\")))\n    (clobber (match_operand:DI 2 \"gpc_reg_operand\" \"\"))\n    (clobber (match_operand:DI 3 \"offsettable_mem_operand\" \"\"))]\n   \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))\n+\t(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"\")))\n    (clobber (match_operand:DI 2 \"gpc_reg_operand\" \"\"))\n    (clobber (match_operand:DI 3 \"offsettable_mem_operand\" \"\"))]\n   \"\n@@ -5861,9 +5861,9 @@\n   [(set_attr \"length\" \"12\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r,r\")\n-\t(abs:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,0\")))\n-   (clobber (match_scratch:DI 2 \"=&r,&r\"))]\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n+\t(abs:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")))\n+   (clobber (match_scratch:DI 2 \"\"))]\n   \"TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 2) (ashiftrt:DI (match_dup 1) (const_int 63)))\n    (set (match_dup 0) (xor:DI (match_dup 2) (match_dup 1)))\n@@ -5879,9 +5879,9 @@\n   [(set_attr \"length\" \"12\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r,r\")\n-\t(neg:DI (abs:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,0\"))))\n-   (clobber (match_scratch:DI 2 \"=&r,&r\"))]\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n+\t(neg:DI (abs:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\"))))\n+   (clobber (match_scratch:DI 2 \"\"))]\n   \"TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 2) (ashiftrt:DI (match_dup 1) (const_int 63)))\n    (set (match_dup 0) (xor:DI (match_dup 2) (match_dup 1)))\n@@ -6972,8 +6972,8 @@\n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n \t(compare:CC (match_operator:DI 4 \"boolean_operator\"\n-\t [(match_operand:DI 1 \"gpc_reg_operand\" \"%r,r\")\n-\t  (match_operand:DI 2 \"gpc_reg_operand\" \"r,r\")])\n+\t [(match_operand:DI 1 \"gpc_reg_operand\" \"\")\n+\t  (match_operand:DI 2 \"gpc_reg_operand\" \"\")])\n \t (const_int 0)))\n    (clobber (match_scratch:DI 3 \"\"))]\n   \"TARGET_POWERPC64 && reload_completed\"\n@@ -6999,12 +6999,12 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"\")\n \t(compare:CC (match_operator:DI 4 \"boolean_operator\"\n-\t [(match_operand:DI 1 \"gpc_reg_operand\" \"%r,r\")\n-\t  (match_operand:DI 2 \"gpc_reg_operand\" \"r,r\")])\n+\t [(match_operand:DI 1 \"gpc_reg_operand\" \"\")\n+\t  (match_operand:DI 2 \"gpc_reg_operand\" \"\")])\n \t (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(match_dup 4))]\n   \"TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 0) (match_dup 4))\n@@ -7072,8 +7072,8 @@\n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n \t(compare:CC (match_operator:DI 4 \"boolean_operator\"\n-\t [(not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\"))\n-\t  (match_operand:DI 2 \"gpc_reg_operand\" \"r\")])\n+\t [(not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\"))\n+\t  (match_operand:DI 2 \"gpc_reg_operand\" \"\")])\n \t (const_int 0)))\n    (clobber (match_scratch:DI 3 \"\"))]\n   \"TARGET_POWERPC64 && reload_completed\"\n@@ -7099,12 +7099,12 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"\")\n \t(compare:CC (match_operator:DI 4 \"boolean_operator\"\n-\t [(not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"%r,r\"))\n-\t  (match_operand:DI 2 \"gpc_reg_operand\" \"r,r\")])\n+\t [(not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\"))\n+\t  (match_operand:DI 2 \"gpc_reg_operand\" \"\")])\n \t (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(match_dup 4))]\n   \"TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 0) (match_dup 4))\n@@ -7138,8 +7138,8 @@\n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n \t(compare:CC (match_operator:DI 4 \"boolean_operator\"\n-\t [(not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\"))\n-\t  (not:DI (match_operand:DI 2 \"gpc_reg_operand\" \"r\"))])\n+\t [(not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\"))\n+\t  (not:DI (match_operand:DI 2 \"gpc_reg_operand\" \"\"))])\n \t (const_int 0)))\n    (clobber (match_scratch:DI 3 \"\"))]\n   \"TARGET_POWERPC64 && reload_completed\"\n@@ -7165,12 +7165,12 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"\")\n \t(compare:CC (match_operator:DI 4 \"boolean_operator\"\n-\t [(not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"%r,r\"))\n-\t  (not:DI (match_operand:DI 2 \"gpc_reg_operand\" \"r,r\"))])\n+\t [(not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\"))\n+\t  (not:DI (match_operand:DI 2 \"gpc_reg_operand\" \"\"))])\n \t (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(match_dup 4))]\n   \"TARGET_POWERPC64 && reload_completed\"\n   [(set (match_dup 0) (match_dup 4))\n@@ -7255,9 +7255,9 @@\n ;; Used by sched, shorten_branches and final when the GOT pseudo reg\n ;; didn't get allocated to a hard register.\n (define_split \n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(unspec:SI [(match_operand:SI 1 \"got_no_const_operand\" \"\")\n-\t\t    (match_operand:SI 2 \"memory_operand\" \"m\")] 8))]\n+\t\t    (match_operand:SI 2 \"memory_operand\" \"\")] 8))]\n   \"(DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_SOLARIS)\n     && flag_pic == 1\n     && (reload_in_progress || reload_completed)\""}, {"sha": "6015366c4b11a3195eb3693fe8782ef7e25259dc", "filename": "gcc/function.c", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75540af074553f5d39b2c61d753b491ca31f4ce6/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75540af074553f5d39b2c61d753b491ca31f4ce6/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=75540af074553f5d39b2c61d753b491ca31f4ce6", "patch": "@@ -7211,20 +7211,14 @@ thread_prologue_and_epilogue_insns (f)\n       seq = gen_sequence ();\n       end_sequence ();\n \n-      /* If optimization is off, and perhaps in an empty function,\n-\t the entry block will have no successors.  */\n-      if (ENTRY_BLOCK_PTR->succ)\n-\t{\n-\t  /* Can't deal with multiple successsors of the entry block.  */\n-\t  if (ENTRY_BLOCK_PTR->succ->succ_next)\n-\t    abort ();\n+      /* Can't deal with multiple successsors of the entry block\n+         at the moment.  Function should always have at least one\n+         entry point.  */\n+      if (!ENTRY_BLOCK_PTR->succ || ENTRY_BLOCK_PTR->succ->succ_next)\n+\tabort ();\n \n-\t  insert_insn_on_edge (seq, ENTRY_BLOCK_PTR->succ);\n-\t  inserted = 1;\n-\t}\n-      else\n-\tset_block_for_new_insns (emit_insn_after (seq, f),\n-\t\t       \t\t ENTRY_BLOCK_PTR->succ);\n+      insert_insn_on_edge (seq, ENTRY_BLOCK_PTR->succ);\n+      inserted = 1;\n     }\n #endif\n "}]}