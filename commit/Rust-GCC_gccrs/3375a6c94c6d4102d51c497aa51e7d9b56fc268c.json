{"sha": "3375a6c94c6d4102d51c497aa51e7d9b56fc268c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM3NWE2Yzk0YzZkNDEwMmQ1MWM0OTdhYTUxZTdkOWI1NmZjMjY4Yw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-02T06:24:07Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-02T06:24:07Z"}, "message": "compiler: Fix parameter references in method expressions.\n\nFrom-SVN: r183825", "tree": {"sha": "0519a410882e22c5bc86ead0cb88ccdb4f5e707e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0519a410882e22c5bc86ead0cb88ccdb4f5e707e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3375a6c94c6d4102d51c497aa51e7d9b56fc268c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3375a6c94c6d4102d51c497aa51e7d9b56fc268c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3375a6c94c6d4102d51c497aa51e7d9b56fc268c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3375a6c94c6d4102d51c497aa51e7d9b56fc268c/comments", "author": null, "committer": null, "parents": [{"sha": "4e15881eebce4cc030f21b7afd57a793c7484644", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e15881eebce4cc030f21b7afd57a793c7484644", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e15881eebce4cc030f21b7afd57a793c7484644"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "c3b43cdba39f9a4c958e5d0d1d09e138ea0ede95", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3375a6c94c6d4102d51c497aa51e7d9b56fc268c/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3375a6c94c6d4102d51c497aa51e7d9b56fc268c/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=3375a6c94c6d4102d51c497aa51e7d9b56fc268c", "patch": "@@ -11711,10 +11711,21 @@ Selector_expression::lower_method_expression(Gogo* gogo)\n   const Typed_identifier_list* method_parameters = method_type->parameters();\n   if (method_parameters != NULL)\n     {\n+      int i = 0;\n       for (Typed_identifier_list::const_iterator p = method_parameters->begin();\n \t   p != method_parameters->end();\n-\t   ++p)\n-\tparameters->push_back(*p);\n+\t   ++p, ++i)\n+\t{\n+\t  if (!p->name().empty() && p->name() != Import::import_marker)\n+\t    parameters->push_back(*p);\n+\t  else\n+\t    {\n+\t      char buf[20];\n+\t      snprintf(buf, sizeof buf, \"$param%d\", i);\n+\t      parameters->push_back(Typed_identifier(buf, p->type(),\n+\t\t\t\t\t\t     p->location()));\n+\t    }\n+\t}\n     }\n \n   const Typed_identifier_list* method_results = method_type->results();\n@@ -11774,14 +11785,14 @@ Selector_expression::lower_method_expression(Gogo* gogo)\n     }\n \n   Expression_list* args;\n-  if (method_parameters == NULL)\n+  if (parameters->size() <= 1)\n     args = NULL;\n   else\n     {\n       args = new Expression_list();\n-      for (Typed_identifier_list::const_iterator p = method_parameters->begin();\n-\t   p != method_parameters->end();\n-\t   ++p)\n+      Typed_identifier_list::const_iterator p = parameters->begin();\n+      ++p;\n+      for (; p != parameters->end(); ++p)\n \t{\n \t  vno = gogo->lookup(p->name(), NULL);\n \t  go_assert(vno != NULL);"}]}