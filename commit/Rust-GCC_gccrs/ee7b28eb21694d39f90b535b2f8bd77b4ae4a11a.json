{"sha": "ee7b28eb21694d39f90b535b2f8bd77b4ae4a11a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU3YjI4ZWIyMTY5NGQzOWY5MGI1MzViMmY4YmQ3N2I0YWU0YTExYQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-07-14T17:28:31Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-07-14T17:28:31Z"}, "message": "toplev.c (init_asm_output): Open asm_out_file in 'w' mode.\n\ngcc/\n\t* toplev.c (init_asm_output): Open asm_out_file in 'w' mode.\n\nc-family/\n\t* c-pch.c (CHECK_NO_ASM_OUT_DURING_PCH): Do not define.\n\tRemove code conditional on it.\n\nFrom-SVN: r189482", "tree": {"sha": "527b746494b6276e01ac1a7f418533d8f9a113ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/527b746494b6276e01ac1a7f418533d8f9a113ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee7b28eb21694d39f90b535b2f8bd77b4ae4a11a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee7b28eb21694d39f90b535b2f8bd77b4ae4a11a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee7b28eb21694d39f90b535b2f8bd77b4ae4a11a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee7b28eb21694d39f90b535b2f8bd77b4ae4a11a/comments", "author": null, "committer": null, "parents": [{"sha": "659140c86ee91eb8720389b315679046f9a515e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/659140c86ee91eb8720389b315679046f9a515e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/659140c86ee91eb8720389b315679046f9a515e3"}], "stats": {"total": 41, "additions": 11, "deletions": 30}, "files": [{"sha": "b1bd196c1909d68b745c6444899c30edbd25982d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee7b28eb21694d39f90b535b2f8bd77b4ae4a11a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee7b28eb21694d39f90b535b2f8bd77b4ae4a11a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee7b28eb21694d39f90b535b2f8bd77b4ae4a11a", "patch": "@@ -1,3 +1,7 @@\n+2012-07-14  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* toplev.c (init_asm_output): Open asm_out_file in 'w' mode.\n+\n 2012-07-13  Bill Schmidt  <wschmidt@linux.ibm.com>\n \n \tPR bootstrap/53955"}, {"sha": "ca3c94e20cc35d67388b0d06936843179917063e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee7b28eb21694d39f90b535b2f8bd77b4ae4a11a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee7b28eb21694d39f90b535b2f8bd77b4ae4a11a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=ee7b28eb21694d39f90b535b2f8bd77b4ae4a11a", "patch": "@@ -1,3 +1,8 @@\n+2012-07-14  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* c-pch.c (CHECK_NO_ASM_OUT_DURING_PCH): Do not define.\n+\tRemove code conditional on it.\n+\n 2012-07-11  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* c-gimplify.c: Do not include basic-block.h."}, {"sha": "3a588f08b398375248ae4b28424a3b84ed987711", "filename": "gcc/c-family/c-pch.c", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee7b28eb21694d39f90b535b2f8bd77b4ae4a11a/gcc%2Fc-family%2Fc-pch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee7b28eb21694d39f90b535b2f8bd77b4ae4a11a/gcc%2Fc-family%2Fc-pch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pch.c?ref=ee7b28eb21694d39f90b535b2f8bd77b4ae4a11a", "patch": "@@ -35,24 +35,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"opts.h\"\n #include \"timevar.h\"\n \n-/* PCH was introduced before unit-at-a-time became the only supported\n-   compilation mode.  To exactly replay the content parsed at PCH generate\n-   time, anything written to asm_out_file was read back in and stored in\n-   the PCH, and written back out to asm_out_file while reading a PCH.\n-\n-   Nowadays, ideally no action by a front end should never result in output\n-   to asm_out_file, and front-end files should not include output.h.  For\n-   now assert that nothing is written to asm_out_file while a PCH is being\n-   generated.  Before GCC 4.8 is released, this code should be removed.\n-   FIXME.  */\n-#define CHECK_NO_ASM_OUT_DURING_PCH\n-#ifdef CHECK_NO_ASM_OUT_DURING_PCH\n-extern FILE *asm_out_file;\n-\n-/* The position in the assembler output file when pch_init was called.  */\n-static long asm_file_startpos;\n-#endif\n-\n /* This is a list of flag variables that must match exactly, and their\n    names for the error message.  The possible values for *flag_var must\n    fit in a 'signed char'.  */\n@@ -112,9 +94,7 @@ get_ident (void)\n }\n \n /* Prepare to write a PCH file, if one is being written.  This is\n-   called at the start of compilation.\n-\n-   Also, print out the executable checksum if -fverbose-asm is in effect.  */\n+   called at the start of compilation.  */\n \n void\n pch_init (void)\n@@ -153,10 +133,6 @@ pch_init (void)\n       || fwrite (target_validity, v.target_data_length, 1, f) != 1)\n     fatal_error (\"can%'t write to %s: %m\", pch_file);\n \n-#ifdef CHECK_NO_ASM_OUT_DURING_PCH\n-  asm_file_startpos = ftell (asm_out_file);\n-#endif\n-\n   /* Let the debugging format deal with the PCHness.  */\n   (*debug_hooks->handle_pch) (0);\n \n@@ -177,10 +153,6 @@ c_common_write_pch (void)\n \n   cpp_write_pch_deps (parse_in, pch_outfile);\n \n-#ifdef CHECK_NO_ASM_OUT_DURING_PCH\n-  gcc_assert (ftell (asm_out_file) - asm_file_startpos == 0);\n-#endif\n-\n   gt_pch_save (pch_outfile);\n \n   timevar_push (TV_PCH_CPP_SAVE);"}, {"sha": "ea43298ee70766f833734b4bbb3a8fd8152c0fff", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee7b28eb21694d39f90b535b2f8bd77b4ae4a11a/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee7b28eb21694d39f90b535b2f8bd77b4ae4a11a/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=ee7b28eb21694d39f90b535b2f8bd77b4ae4a11a", "patch": "@@ -908,7 +908,7 @@ init_asm_output (const char *name)\n       if (!strcmp (asm_file_name, \"-\"))\n \tasm_out_file = stdout;\n       else\n-\tasm_out_file = fopen (asm_file_name, \"w+b\");\n+\tasm_out_file = fopen (asm_file_name, \"w\");\n       if (asm_out_file == 0)\n \tfatal_error (\"can%'t open %s for writing: %m\", asm_file_name);\n     }"}]}