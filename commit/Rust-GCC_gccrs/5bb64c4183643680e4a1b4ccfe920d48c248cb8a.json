{"sha": "5bb64c4183643680e4a1b4ccfe920d48c248cb8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJiNjRjNDE4MzY0MzY4MGU0YTFiNGNjZmU5MjBkNDhjMjQ4Y2I4YQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-05-03T12:54:56Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-05-03T12:54:56Z"}, "message": "cp-tree.h (enum cp_tree_index, [...]): Move earlier, along with #defines, to before name-lookup include.\n\n\t* cp-tree.h (enum cp_tree_index, cp_global_trees): Move earlier,\n\talong with #defines, to before name-lookup include.\n\nFrom-SVN: r247547", "tree": {"sha": "fefa66b2ec7c4f7b89931b39f36ce4c01ad15676", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fefa66b2ec7c4f7b89931b39f36ce4c01ad15676"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bb64c4183643680e4a1b4ccfe920d48c248cb8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bb64c4183643680e4a1b4ccfe920d48c248cb8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bb64c4183643680e4a1b4ccfe920d48c248cb8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bb64c4183643680e4a1b4ccfe920d48c248cb8a/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6fe63fb43f5ff71bbd5ba4b3e6128bfdd5efe37d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fe63fb43f5ff71bbd5ba4b3e6128bfdd5efe37d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fe63fb43f5ff71bbd5ba4b3e6128bfdd5efe37d"}], "stats": {"total": 357, "additions": 181, "deletions": 176}, "files": [{"sha": "56f9c2081a5cbd2e394a8c4a70e11bb295ef675d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bb64c4183643680e4a1b4ccfe920d48c248cb8a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bb64c4183643680e4a1b4ccfe920d48c248cb8a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5bb64c4183643680e4a1b4ccfe920d48c248cb8a", "patch": "@@ -1,3 +1,8 @@\n+2017-05-03  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (enum cp_tree_index, cp_global_trees): Move earlier,\n+\talong with #defines, to before name-lookup include.\n+\n 2017-05-02  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* pt.c (is_auto_or_concept): Remove."}, {"sha": "844f5ed4f7927e0ff037a9fd2d87d381d48dbf6b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 176, "deletions": 176, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bb64c4183643680e4a1b4ccfe920d48c248cb8a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bb64c4183643680e4a1b4ccfe920d48c248cb8a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5bb64c4183643680e4a1b4ccfe920d48c248cb8a", "patch": "@@ -102,6 +102,182 @@ operator == (const cp_expr &lhs, tree rhs)\n   return lhs.get_value () == rhs;\n }\n \n+\f\n+enum cp_tree_index\n+{\n+    CPTI_WCHAR_DECL,\n+    CPTI_VTABLE_ENTRY_TYPE,\n+    CPTI_DELTA_TYPE,\n+    CPTI_VTABLE_INDEX_TYPE,\n+    CPTI_CLEANUP_TYPE,\n+    CPTI_VTT_PARM_TYPE,\n+\n+    CPTI_CLASS_TYPE,\n+    CPTI_UNKNOWN_TYPE,\n+    CPTI_INIT_LIST_TYPE,\n+    CPTI_VTBL_TYPE,\n+    CPTI_VTBL_PTR_TYPE,\n+    CPTI_STD,\n+    CPTI_ABI,\n+    CPTI_CONST_TYPE_INFO_TYPE,\n+    CPTI_TYPE_INFO_PTR_TYPE,\n+    CPTI_ABORT_FNDECL,\n+    CPTI_AGGR_TAG,\n+\n+    CPTI_CTOR_IDENTIFIER,\n+    CPTI_COMPLETE_CTOR_IDENTIFIER,\n+    CPTI_BASE_CTOR_IDENTIFIER,\n+    CPTI_DTOR_IDENTIFIER,\n+    CPTI_COMPLETE_DTOR_IDENTIFIER,\n+    CPTI_BASE_DTOR_IDENTIFIER,\n+    CPTI_DELETING_DTOR_IDENTIFIER,\n+    CPTI_DELTA_IDENTIFIER,\n+    CPTI_IN_CHARGE_IDENTIFIER,\n+    CPTI_VTT_PARM_IDENTIFIER,\n+    CPTI_NELTS_IDENTIFIER,\n+    CPTI_THIS_IDENTIFIER,\n+    CPTI_PFN_IDENTIFIER,\n+    CPTI_VPTR_IDENTIFIER,\n+    CPTI_STD_IDENTIFIER,\n+    CPTI_AUTO_IDENTIFIER,\n+    CPTI_DECLTYPE_AUTO_IDENTIFIER,\n+\n+    CPTI_LANG_NAME_C,\n+    CPTI_LANG_NAME_CPLUSPLUS,\n+\n+    CPTI_EMPTY_EXCEPT_SPEC,\n+    CPTI_NOEXCEPT_TRUE_SPEC,\n+    CPTI_NOEXCEPT_FALSE_SPEC,\n+    CPTI_TERMINATE,\n+    CPTI_CALL_UNEXPECTED,\n+    CPTI_ATEXIT_FN_PTR_TYPE,\n+    CPTI_ATEXIT,\n+    CPTI_DSO_HANDLE,\n+    CPTI_DCAST,\n+\n+    CPTI_KEYED_CLASSES,\n+\n+    CPTI_NULLPTR,\n+    CPTI_NULLPTR_TYPE,\n+\n+    CPTI_ALIGN_TYPE,\n+\n+    CPTI_ANY_TARG,\n+\n+    CPTI_MAX\n+};\n+\n+extern GTY(()) tree cp_global_trees[CPTI_MAX];\n+\n+#define wchar_decl_node\t\t\tcp_global_trees[CPTI_WCHAR_DECL]\n+#define vtable_entry_type\t\tcp_global_trees[CPTI_VTABLE_ENTRY_TYPE]\n+/* The type used to represent an offset by which to adjust the `this'\n+   pointer in pointer-to-member types.  */\n+#define delta_type_node\t\t\tcp_global_trees[CPTI_DELTA_TYPE]\n+/* The type used to represent an index into the vtable.  */\n+#define vtable_index_type\t\tcp_global_trees[CPTI_VTABLE_INDEX_TYPE]\n+\n+#define class_type_node\t\t\tcp_global_trees[CPTI_CLASS_TYPE]\n+#define unknown_type_node\t\tcp_global_trees[CPTI_UNKNOWN_TYPE]\n+#define init_list_type_node\t\tcp_global_trees[CPTI_INIT_LIST_TYPE]\n+#define vtbl_type_node\t\t\tcp_global_trees[CPTI_VTBL_TYPE]\n+#define vtbl_ptr_type_node\t\tcp_global_trees[CPTI_VTBL_PTR_TYPE]\n+#define std_node\t\t\tcp_global_trees[CPTI_STD]\n+#define abi_node\t\t\tcp_global_trees[CPTI_ABI]\n+#define const_type_info_type_node\tcp_global_trees[CPTI_CONST_TYPE_INFO_TYPE]\n+#define type_info_ptr_type\t\tcp_global_trees[CPTI_TYPE_INFO_PTR_TYPE]\n+#define abort_fndecl\t\t\tcp_global_trees[CPTI_ABORT_FNDECL]\n+#define current_aggr\t\t\tcp_global_trees[CPTI_AGGR_TAG]\n+#define nullptr_node\t\t\tcp_global_trees[CPTI_NULLPTR]\n+#define nullptr_type_node\t\tcp_global_trees[CPTI_NULLPTR_TYPE]\n+/* std::align_val_t */\n+#define align_type_node\t\t\tcp_global_trees[CPTI_ALIGN_TYPE]\n+\n+/* We cache these tree nodes so as to call get_identifier less\n+   frequently.  */\n+\n+/* The name of a constructor that takes an in-charge parameter to\n+   decide whether or not to construct virtual base classes.  */\n+#define ctor_identifier\t\t\tcp_global_trees[CPTI_CTOR_IDENTIFIER]\n+/* The name of a constructor that constructs virtual base classes.  */\n+#define complete_ctor_identifier\tcp_global_trees[CPTI_COMPLETE_CTOR_IDENTIFIER]\n+/* The name of a constructor that does not construct virtual base classes.  */\n+#define base_ctor_identifier\t\tcp_global_trees[CPTI_BASE_CTOR_IDENTIFIER]\n+/* The name of a destructor that takes an in-charge parameter to\n+   decide whether or not to destroy virtual base classes and whether\n+   or not to delete the object.  */\n+#define dtor_identifier\t\t\tcp_global_trees[CPTI_DTOR_IDENTIFIER]\n+/* The name of a destructor that destroys virtual base classes.  */\n+#define complete_dtor_identifier\tcp_global_trees[CPTI_COMPLETE_DTOR_IDENTIFIER]\n+/* The name of a destructor that does not destroy virtual base\n+   classes.  */\n+#define base_dtor_identifier\t\tcp_global_trees[CPTI_BASE_DTOR_IDENTIFIER]\n+/* The name of a destructor that destroys virtual base classes, and\n+   then deletes the entire object.  */\n+#define deleting_dtor_identifier\tcp_global_trees[CPTI_DELETING_DTOR_IDENTIFIER]\n+#define delta_identifier\t\tcp_global_trees[CPTI_DELTA_IDENTIFIER]\n+#define in_charge_identifier\t\tcp_global_trees[CPTI_IN_CHARGE_IDENTIFIER]\n+/* The name of the parameter that contains a pointer to the VTT to use\n+   for this subobject constructor or destructor.  */\n+#define vtt_parm_identifier\t\tcp_global_trees[CPTI_VTT_PARM_IDENTIFIER]\n+#define nelts_identifier\t\tcp_global_trees[CPTI_NELTS_IDENTIFIER]\n+#define this_identifier\t\t\tcp_global_trees[CPTI_THIS_IDENTIFIER]\n+#define pfn_identifier\t\t\tcp_global_trees[CPTI_PFN_IDENTIFIER]\n+#define vptr_identifier\t\t\tcp_global_trees[CPTI_VPTR_IDENTIFIER]\n+/* The name of the std namespace.  */\n+#define std_identifier\t\t\tcp_global_trees[CPTI_STD_IDENTIFIER]\n+/* auto and declspec(auto) identifiers.  */\n+#define auto_identifier\t\t\tcp_global_trees[CPTI_AUTO_IDENTIFIER]\n+#define decltype_auto_identifier\tcp_global_trees[CPTI_DECLTYPE_AUTO_IDENTIFIER]\n+/* The name of a C++17 deduction guide.  */\n+#define lang_name_c\t\t\tcp_global_trees[CPTI_LANG_NAME_C]\n+#define lang_name_cplusplus\t\tcp_global_trees[CPTI_LANG_NAME_CPLUSPLUS]\n+\n+/* Exception specifiers used for throw(), noexcept(true) and\n+   noexcept(false).  We rely on these being uncloned.  */\n+#define empty_except_spec\t\tcp_global_trees[CPTI_EMPTY_EXCEPT_SPEC]\n+#define noexcept_true_spec\t\tcp_global_trees[CPTI_NOEXCEPT_TRUE_SPEC]\n+#define noexcept_false_spec\t\tcp_global_trees[CPTI_NOEXCEPT_FALSE_SPEC]\n+\n+/* The declaration for `std::terminate'.  */\n+#define terminate_node\t\t\tcp_global_trees[CPTI_TERMINATE]\n+\n+/* The declaration for \"__cxa_call_unexpected\".  */\n+#define call_unexpected_node\t\tcp_global_trees[CPTI_CALL_UNEXPECTED]\n+\n+/* The type of the function-pointer argument to \"__cxa_atexit\" (or\n+   \"std::atexit\", if \"__cxa_atexit\" is not being used).  */\n+#define atexit_fn_ptr_type_node         cp_global_trees[CPTI_ATEXIT_FN_PTR_TYPE]\n+\n+/* A pointer to `std::atexit'.  */\n+#define atexit_node\t\t\tcp_global_trees[CPTI_ATEXIT]\n+\n+/* A pointer to `__dso_handle'.  */\n+#define dso_handle_node\t\t\tcp_global_trees[CPTI_DSO_HANDLE]\n+\n+/* The declaration of the dynamic_cast runtime.  */\n+#define dynamic_cast_node\t\tcp_global_trees[CPTI_DCAST]\n+\n+/* The type of a destructor.  */\n+#define cleanup_type\t\t\tcp_global_trees[CPTI_CLEANUP_TYPE]\n+\n+/* The type of the vtt parameter passed to subobject constructors and\n+   destructors.  */\n+#define vtt_parm_type\t\t\tcp_global_trees[CPTI_VTT_PARM_TYPE]\n+\n+/* A TREE_LIST of the dynamic classes whose vtables may have to be\n+   emitted in this translation unit.  */\n+\n+#define keyed_classes\t\t\tcp_global_trees[CPTI_KEYED_CLASSES]\n+\n+/* A node which matches any template argument.  */\n+#define any_targ_node\t\t\tcp_global_trees[CPTI_ANY_TARG]\n+\n+/* Node to indicate default access. This must be distinct from the\n+   access nodes in tree.h.  */\n+\n+#define access_default_node\t\tnull_node\n+\f\n #include \"name-lookup.h\"\n \n /* Usage of TREE_LANG_FLAG_?:\n@@ -1083,182 +1259,6 @@ union GTY((desc (\"cp_tree_node_structure (&%h)\"),\n     userdef_literal;\n };\n \n-\f\n-enum cp_tree_index\n-{\n-    CPTI_WCHAR_DECL,\n-    CPTI_VTABLE_ENTRY_TYPE,\n-    CPTI_DELTA_TYPE,\n-    CPTI_VTABLE_INDEX_TYPE,\n-    CPTI_CLEANUP_TYPE,\n-    CPTI_VTT_PARM_TYPE,\n-\n-    CPTI_CLASS_TYPE,\n-    CPTI_UNKNOWN_TYPE,\n-    CPTI_INIT_LIST_TYPE,\n-    CPTI_VTBL_TYPE,\n-    CPTI_VTBL_PTR_TYPE,\n-    CPTI_STD,\n-    CPTI_ABI,\n-    CPTI_CONST_TYPE_INFO_TYPE,\n-    CPTI_TYPE_INFO_PTR_TYPE,\n-    CPTI_ABORT_FNDECL,\n-    CPTI_AGGR_TAG,\n-\n-    CPTI_CTOR_IDENTIFIER,\n-    CPTI_COMPLETE_CTOR_IDENTIFIER,\n-    CPTI_BASE_CTOR_IDENTIFIER,\n-    CPTI_DTOR_IDENTIFIER,\n-    CPTI_COMPLETE_DTOR_IDENTIFIER,\n-    CPTI_BASE_DTOR_IDENTIFIER,\n-    CPTI_DELETING_DTOR_IDENTIFIER,\n-    CPTI_DELTA_IDENTIFIER,\n-    CPTI_IN_CHARGE_IDENTIFIER,\n-    CPTI_VTT_PARM_IDENTIFIER,\n-    CPTI_NELTS_IDENTIFIER,\n-    CPTI_THIS_IDENTIFIER,\n-    CPTI_PFN_IDENTIFIER,\n-    CPTI_VPTR_IDENTIFIER,\n-    CPTI_STD_IDENTIFIER,\n-    CPTI_AUTO_IDENTIFIER,\n-    CPTI_DECLTYPE_AUTO_IDENTIFIER,\n-\n-    CPTI_LANG_NAME_C,\n-    CPTI_LANG_NAME_CPLUSPLUS,\n-\n-    CPTI_EMPTY_EXCEPT_SPEC,\n-    CPTI_NOEXCEPT_TRUE_SPEC,\n-    CPTI_NOEXCEPT_FALSE_SPEC,\n-    CPTI_TERMINATE,\n-    CPTI_CALL_UNEXPECTED,\n-    CPTI_ATEXIT_FN_PTR_TYPE,\n-    CPTI_ATEXIT,\n-    CPTI_DSO_HANDLE,\n-    CPTI_DCAST,\n-\n-    CPTI_KEYED_CLASSES,\n-\n-    CPTI_NULLPTR,\n-    CPTI_NULLPTR_TYPE,\n-\n-    CPTI_ALIGN_TYPE,\n-\n-    CPTI_ANY_TARG,\n-\n-    CPTI_MAX\n-};\n-\n-extern GTY(()) tree cp_global_trees[CPTI_MAX];\n-\n-#define wchar_decl_node\t\t\tcp_global_trees[CPTI_WCHAR_DECL]\n-#define vtable_entry_type\t\tcp_global_trees[CPTI_VTABLE_ENTRY_TYPE]\n-/* The type used to represent an offset by which to adjust the `this'\n-   pointer in pointer-to-member types.  */\n-#define delta_type_node\t\t\tcp_global_trees[CPTI_DELTA_TYPE]\n-/* The type used to represent an index into the vtable.  */\n-#define vtable_index_type\t\tcp_global_trees[CPTI_VTABLE_INDEX_TYPE]\n-\n-#define class_type_node\t\t\tcp_global_trees[CPTI_CLASS_TYPE]\n-#define unknown_type_node\t\tcp_global_trees[CPTI_UNKNOWN_TYPE]\n-#define init_list_type_node\t\tcp_global_trees[CPTI_INIT_LIST_TYPE]\n-#define vtbl_type_node\t\t\tcp_global_trees[CPTI_VTBL_TYPE]\n-#define vtbl_ptr_type_node\t\tcp_global_trees[CPTI_VTBL_PTR_TYPE]\n-#define std_node\t\t\tcp_global_trees[CPTI_STD]\n-#define abi_node\t\t\tcp_global_trees[CPTI_ABI]\n-#define const_type_info_type_node\tcp_global_trees[CPTI_CONST_TYPE_INFO_TYPE]\n-#define type_info_ptr_type\t\tcp_global_trees[CPTI_TYPE_INFO_PTR_TYPE]\n-#define abort_fndecl\t\t\tcp_global_trees[CPTI_ABORT_FNDECL]\n-#define current_aggr\t\t\tcp_global_trees[CPTI_AGGR_TAG]\n-#define nullptr_node\t\t\tcp_global_trees[CPTI_NULLPTR]\n-#define nullptr_type_node\t\tcp_global_trees[CPTI_NULLPTR_TYPE]\n-/* std::align_val_t */\n-#define align_type_node\t\t\tcp_global_trees[CPTI_ALIGN_TYPE]\n-\n-/* We cache these tree nodes so as to call get_identifier less\n-   frequently.  */\n-\n-/* The name of a constructor that takes an in-charge parameter to\n-   decide whether or not to construct virtual base classes.  */\n-#define ctor_identifier\t\t\tcp_global_trees[CPTI_CTOR_IDENTIFIER]\n-/* The name of a constructor that constructs virtual base classes.  */\n-#define complete_ctor_identifier\tcp_global_trees[CPTI_COMPLETE_CTOR_IDENTIFIER]\n-/* The name of a constructor that does not construct virtual base classes.  */\n-#define base_ctor_identifier\t\tcp_global_trees[CPTI_BASE_CTOR_IDENTIFIER]\n-/* The name of a destructor that takes an in-charge parameter to\n-   decide whether or not to destroy virtual base classes and whether\n-   or not to delete the object.  */\n-#define dtor_identifier\t\t\tcp_global_trees[CPTI_DTOR_IDENTIFIER]\n-/* The name of a destructor that destroys virtual base classes.  */\n-#define complete_dtor_identifier\tcp_global_trees[CPTI_COMPLETE_DTOR_IDENTIFIER]\n-/* The name of a destructor that does not destroy virtual base\n-   classes.  */\n-#define base_dtor_identifier\t\tcp_global_trees[CPTI_BASE_DTOR_IDENTIFIER]\n-/* The name of a destructor that destroys virtual base classes, and\n-   then deletes the entire object.  */\n-#define deleting_dtor_identifier\tcp_global_trees[CPTI_DELETING_DTOR_IDENTIFIER]\n-#define delta_identifier\t\tcp_global_trees[CPTI_DELTA_IDENTIFIER]\n-#define in_charge_identifier\t\tcp_global_trees[CPTI_IN_CHARGE_IDENTIFIER]\n-/* The name of the parameter that contains a pointer to the VTT to use\n-   for this subobject constructor or destructor.  */\n-#define vtt_parm_identifier\t\tcp_global_trees[CPTI_VTT_PARM_IDENTIFIER]\n-#define nelts_identifier\t\tcp_global_trees[CPTI_NELTS_IDENTIFIER]\n-#define this_identifier\t\t\tcp_global_trees[CPTI_THIS_IDENTIFIER]\n-#define pfn_identifier\t\t\tcp_global_trees[CPTI_PFN_IDENTIFIER]\n-#define vptr_identifier\t\t\tcp_global_trees[CPTI_VPTR_IDENTIFIER]\n-/* The name of the std namespace.  */\n-#define std_identifier\t\t\tcp_global_trees[CPTI_STD_IDENTIFIER]\n-/* auto and declspec(auto) identifiers.  */\n-#define auto_identifier\t\t\tcp_global_trees[CPTI_AUTO_IDENTIFIER]\n-#define decltype_auto_identifier\tcp_global_trees[CPTI_DECLTYPE_AUTO_IDENTIFIER]\n-/* The name of a C++17 deduction guide.  */\n-#define lang_name_c\t\t\tcp_global_trees[CPTI_LANG_NAME_C]\n-#define lang_name_cplusplus\t\tcp_global_trees[CPTI_LANG_NAME_CPLUSPLUS]\n-\n-/* Exception specifiers used for throw(), noexcept(true) and\n-   noexcept(false).  We rely on these being uncloned.  */\n-#define empty_except_spec\t\tcp_global_trees[CPTI_EMPTY_EXCEPT_SPEC]\n-#define noexcept_true_spec\t\tcp_global_trees[CPTI_NOEXCEPT_TRUE_SPEC]\n-#define noexcept_false_spec\t\tcp_global_trees[CPTI_NOEXCEPT_FALSE_SPEC]\n-\n-/* The declaration for `std::terminate'.  */\n-#define terminate_node\t\t\tcp_global_trees[CPTI_TERMINATE]\n-\n-/* The declaration for \"__cxa_call_unexpected\".  */\n-#define call_unexpected_node\t\tcp_global_trees[CPTI_CALL_UNEXPECTED]\n-\n-/* The type of the function-pointer argument to \"__cxa_atexit\" (or\n-   \"std::atexit\", if \"__cxa_atexit\" is not being used).  */\n-#define atexit_fn_ptr_type_node         cp_global_trees[CPTI_ATEXIT_FN_PTR_TYPE]\n-\n-/* A pointer to `std::atexit'.  */\n-#define atexit_node\t\t\tcp_global_trees[CPTI_ATEXIT]\n-\n-/* A pointer to `__dso_handle'.  */\n-#define dso_handle_node\t\t\tcp_global_trees[CPTI_DSO_HANDLE]\n-\n-/* The declaration of the dynamic_cast runtime.  */\n-#define dynamic_cast_node\t\tcp_global_trees[CPTI_DCAST]\n-\n-/* The type of a destructor.  */\n-#define cleanup_type\t\t\tcp_global_trees[CPTI_CLEANUP_TYPE]\n-\n-/* The type of the vtt parameter passed to subobject constructors and\n-   destructors.  */\n-#define vtt_parm_type\t\t\tcp_global_trees[CPTI_VTT_PARM_TYPE]\n-\n-/* A TREE_LIST of the dynamic classes whose vtables may have to be\n-   emitted in this translation unit.  */\n-\n-#define keyed_classes\t\t\tcp_global_trees[CPTI_KEYED_CLASSES]\n-\n-/* A node which matches any template argument.  */\n-#define any_targ_node\t\t\tcp_global_trees[CPTI_ANY_TARG]\n-\n-/* Node to indicate default access. This must be distinct from the\n-   access nodes in tree.h.  */\n-\n-#define access_default_node\t\tnull_node\n-\n /* Global state.  */\n \n struct GTY(()) saved_scope {"}]}