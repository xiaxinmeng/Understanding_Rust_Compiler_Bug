{"sha": "421f9e6091ca35352c825e7ec69439b3651da021", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIxZjllNjA5MWNhMzUzNTJjODI1ZTdlYzY5NDM5YjM2NTFkYTAyMQ==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2002-12-03T13:50:05Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2002-12-03T13:50:05Z"}, "message": "natClassLoader.cc (_Jv_PrepareCompiledClass): Call _Jv_PushClass.\n\n2002-12-03  Andrew Haley  <aph@redhat.com>\n\n        * java/lang/natClassLoader.cc (_Jv_PrepareCompiledClass): Call\n\t_Jv_PushClass.\n        (_Jv_InitNewClassFields): Set protectionDomain and chain = NULL.\n        (_Jv_PopClass): New.\n        (_Jv_PushClass): New.\n        * java/lang/natClass.cc (forName (jstring)): Use a StackTrace to\n        discover the ClassLoader of our caller.\n        (_Jv_CheckArrayStore): Don't check that a class is assignment\n        compatible with Object.\n        * java/lang/natVMTHrowable.cc: Delete.\n        * gnu/gcj/runtime/StackTrace.java: New, partly copied from\n\tjava.lang.VMThrowable.\n        (StackTrace(), StackTrace(int)): New constructors.\n        (classAt, methodAt, update, methodAtAddress): New methods.\n        (map): New field.\n\t* java/lang/VMThrowable.java: Use StackTrace instead of\n\tnatVMTHrowable.\n\t* java/lang/Class.h (getClassLoaderInternal): New.\n        (class Class): Be friendly with _Jv_PopClass and _Jv_PushClass.\n        Be friendly with gnu::gcj::runtime::StackTrace.\n        (Object.chain): New field.\n        * include/java-interp.h (class _Jv_InterpMethod): Be friendly with\n        gnu::gcj::runtime::StackTrace.\n        * prims.cc (_Jv_NewObjectArray): Use getClassLoaderInternal()\n        instead of getClassLoader().\n        * verify.cc (class _Jv_BytecodeVerifier): Likewise.\n        java::lang::VMThrowable.\n        * Makefile.am (core_java_source_files): Add MethodRef.java,\n\tStackTrace.java.\n        (nat_source_files): Remove natVMThrowable.cc; add natStackTrace.cc.\n        * Makefile.in: Rebuild.\n\n2002-12-03  Andrew Haley  <aph@redhat.com>\n\n\t* class.c (make_class_data): New field, \"chain\".\n\t* decl.c (java_init_decl_processing): Likewise.\n\nFrom-SVN: r59769", "tree": {"sha": "635e8205b478433021057fc6be1683b642acf907", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/635e8205b478433021057fc6be1683b642acf907"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/421f9e6091ca35352c825e7ec69439b3651da021", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/421f9e6091ca35352c825e7ec69439b3651da021", "html_url": "https://github.com/Rust-GCC/gccrs/commit/421f9e6091ca35352c825e7ec69439b3651da021", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/421f9e6091ca35352c825e7ec69439b3651da021/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee7ecb2924a9995adc324905836cd7207ce43747", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee7ecb2924a9995adc324905836cd7207ce43747", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee7ecb2924a9995adc324905836cd7207ce43747"}], "stats": {"total": 170, "additions": 131, "deletions": 39}, "files": [{"sha": "afe7b647fecd2bc2a147c7bfa9e874300efb336f", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421f9e6091ca35352c825e7ec69439b3651da021/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421f9e6091ca35352c825e7ec69439b3651da021/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=421f9e6091ca35352c825e7ec69439b3651da021", "patch": "@@ -1,3 +1,8 @@\n+2002-12-03  Andrew Haley  <aph@redhat.com>\n+\n+\t* class.c (make_class_data): New field, \"chain\".\n+\t* decl.c (java_init_decl_processing): Likewise.\n+\n 2002-12-02  Tom Tromey  <tromey@redhat.com>\n \n \tFor PR java/8740:"}, {"sha": "bec8d0c15e1068ceafa6df0d8f57cd78e8d8a15b", "filename": "gcc/java/class.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421f9e6091ca35352c825e7ec69439b3651da021/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421f9e6091ca35352c825e7ec69439b3651da021/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=421f9e6091ca35352c825e7ec69439b3651da021", "patch": "@@ -1665,6 +1665,7 @@ make_class_data (type)\n   PUSH_FIELD_VALUE (cons, \"idt\", null_pointer_node);\n   PUSH_FIELD_VALUE (cons, \"arrayclass\", null_pointer_node);\n   PUSH_FIELD_VALUE (cons, \"protectionDomain\", null_pointer_node);\n+  PUSH_FIELD_VALUE (cons, \"chain\", null_pointer_node);\n \n   FINISH_RECORD_CONSTRUCTOR (cons);\n "}, {"sha": "41aea0c28f5a85bc4d0c05cc1ab2e93481e0279b", "filename": "gcc/java/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421f9e6091ca35352c825e7ec69439b3651da021/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421f9e6091ca35352c825e7ec69439b3651da021/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=421f9e6091ca35352c825e7ec69439b3651da021", "patch": "@@ -708,6 +708,7 @@ java_init_decl_processing ()\n   PUSH_FIELD (class_type_node, field, \"idt\", ptr_type_node);  \n   PUSH_FIELD (class_type_node, field, \"arrayclass\", ptr_type_node);  \n   PUSH_FIELD (class_type_node, field, \"protectionDomain\", ptr_type_node);\n+  PUSH_FIELD (class_type_node, field, \"chain\", ptr_type_node);\n   for (t = TYPE_FIELDS (class_type_node);  t != NULL_TREE;  t = TREE_CHAIN (t))\n     FIELD_PRIVATE (t) = 1;\n   push_super_field (class_type_node, object_type_node);"}, {"sha": "9c7eb968c393be20bc82c4df0eb293f5ddc8a090", "filename": "libjava/Makefile.am", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421f9e6091ca35352c825e7ec69439b3651da021/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421f9e6091ca35352c825e7ec69439b3651da021/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=421f9e6091ca35352c825e7ec69439b3651da021", "patch": "@@ -1720,8 +1720,10 @@ gnu/gcj/runtime/FileDeleter.java \\\n gnu/gcj/runtime/FinalizerThread.java \\\n gnu/gcj/runtime/FirstThread.java \\\n gnu/gcj/runtime/JNIWeakRef.java \\\n+gnu/gcj/runtime/MethodRef.java \\\n gnu/gcj/runtime/NameFinder.java \\\n gnu/gcj/runtime/SharedLibLoader.java \\\n+gnu/gcj/runtime/StackTrace.java \\\n gnu/gcj/runtime/StringBuffer.java \\\n gnu/gcj/runtime/VMClassLoader.java \\\n gnu/java/io/ClassLoaderObjectInputStream.java \\\n@@ -2316,6 +2318,7 @@ gnu/gcj/runtime/natFinalizerThread.cc \\\n gnu/gcj/runtime/natFirstThread.cc \\\n gnu/gcj/runtime/natNameFinder.cc \\\n gnu/gcj/runtime/natSharedLibLoader.cc \\\n+gnu/gcj/runtime/natStackTrace.cc \\\n gnu/gcj/runtime/natStringBuffer.cc \\\n java/io/natFile.cc \\\n java/io/natFileDescriptor.cc \\\n@@ -2334,7 +2337,6 @@ java/lang/natString.cc \\\n java/lang/natStringBuffer.cc \\\n java/lang/natSystem.cc \\\n java/lang/natThread.cc \\\n-java/lang/natVMThrowable.cc \\\n java/lang/ref/natReference.cc \\\n java/lang/reflect/natArray.cc \\\n java/lang/reflect/natConstructor.cc \\"}, {"sha": "994002e03fcf8569c8de8769f751ab1191a68d7a", "filename": "libjava/Makefile.in", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421f9e6091ca35352c825e7ec69439b3651da021/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421f9e6091ca35352c825e7ec69439b3651da021/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=421f9e6091ca35352c825e7ec69439b3651da021", "patch": "@@ -1470,8 +1470,10 @@ gnu/gcj/runtime/FileDeleter.java \\\n gnu/gcj/runtime/FinalizerThread.java \\\n gnu/gcj/runtime/FirstThread.java \\\n gnu/gcj/runtime/JNIWeakRef.java \\\n+gnu/gcj/runtime/MethodRef.java \\\n gnu/gcj/runtime/NameFinder.java \\\n gnu/gcj/runtime/SharedLibLoader.java \\\n+gnu/gcj/runtime/StackTrace.java \\\n gnu/gcj/runtime/StringBuffer.java \\\n gnu/gcj/runtime/VMClassLoader.java \\\n gnu/java/io/ClassLoaderObjectInputStream.java \\\n@@ -2065,6 +2067,7 @@ gnu/gcj/runtime/natFinalizerThread.cc \\\n gnu/gcj/runtime/natFirstThread.cc \\\n gnu/gcj/runtime/natNameFinder.cc \\\n gnu/gcj/runtime/natSharedLibLoader.cc \\\n+gnu/gcj/runtime/natStackTrace.cc \\\n gnu/gcj/runtime/natStringBuffer.cc \\\n java/io/natFile.cc \\\n java/io/natFileDescriptor.cc \\\n@@ -2083,7 +2086,6 @@ java/lang/natString.cc \\\n java/lang/natStringBuffer.cc \\\n java/lang/natSystem.cc \\\n java/lang/natThread.cc \\\n-java/lang/natVMThrowable.cc \\\n java/lang/ref/natReference.cc \\\n java/lang/reflect/natArray.cc \\\n java/lang/reflect/natConstructor.cc \\\n@@ -2234,22 +2236,22 @@ gnu/gcj/convert/natOutput_SJIS.lo gnu/gcj/io/natSimpleSHSStream.lo \\\n gnu/gcj/io/shs.lo gnu/gcj/protocol/core/natCoreInputStream.lo \\\n gnu/gcj/runtime/natFinalizerThread.lo gnu/gcj/runtime/natFirstThread.lo \\\n gnu/gcj/runtime/natNameFinder.lo gnu/gcj/runtime/natSharedLibLoader.lo \\\n-gnu/gcj/runtime/natStringBuffer.lo java/io/natFile.lo \\\n-java/io/natFileDescriptor.lo java/io/natObjectInputStream.lo \\\n-java/io/natObjectOutputStream.lo java/lang/natCharacter.lo \\\n-java/lang/natClass.lo java/lang/natClassLoader.lo \\\n-java/lang/natConcreteProcess.lo java/lang/natDouble.lo \\\n-java/lang/natFloat.lo java/lang/natMath.lo java/lang/natObject.lo \\\n-java/lang/natRuntime.lo java/lang/natString.lo \\\n+gnu/gcj/runtime/natStackTrace.lo gnu/gcj/runtime/natStringBuffer.lo \\\n+java/io/natFile.lo java/io/natFileDescriptor.lo \\\n+java/io/natObjectInputStream.lo java/io/natObjectOutputStream.lo \\\n+java/lang/natCharacter.lo java/lang/natClass.lo \\\n+java/lang/natClassLoader.lo java/lang/natConcreteProcess.lo \\\n+java/lang/natDouble.lo java/lang/natFloat.lo java/lang/natMath.lo \\\n+java/lang/natObject.lo java/lang/natRuntime.lo java/lang/natString.lo \\\n java/lang/natStringBuffer.lo java/lang/natSystem.lo \\\n-java/lang/natThread.lo java/lang/natVMThrowable.lo \\\n-java/lang/ref/natReference.lo java/lang/reflect/natArray.lo \\\n-java/lang/reflect/natConstructor.lo java/lang/reflect/natField.lo \\\n-java/lang/reflect/natMethod.lo java/lang/reflect/natProxy.lo \\\n-java/net/natNetworkInterface.lo java/net/natInetAddress.lo \\\n-java/net/natPlainDatagramSocketImpl.lo java/net/natPlainSocketImpl.lo \\\n-java/text/natCollator.lo java/util/natTimeZone.lo \\\n-java/util/zip/natDeflater.lo java/util/zip/natInflater.lo\n+java/lang/natThread.lo java/lang/ref/natReference.lo \\\n+java/lang/reflect/natArray.lo java/lang/reflect/natConstructor.lo \\\n+java/lang/reflect/natField.lo java/lang/reflect/natMethod.lo \\\n+java/lang/reflect/natProxy.lo java/net/natNetworkInterface.lo \\\n+java/net/natInetAddress.lo java/net/natPlainDatagramSocketImpl.lo \\\n+java/net/natPlainSocketImpl.lo java/text/natCollator.lo \\\n+java/util/natTimeZone.lo java/util/zip/natDeflater.lo \\\n+java/util/zip/natInflater.lo\n libgcjx_la_OBJECTS =  gnu/gcj/xlib/natClip.lo \\\n gnu/gcj/xlib/natColormap.lo gnu/gcj/xlib/natDisplay.lo \\\n gnu/gcj/xlib/natDrawable.lo gnu/gcj/xlib/natFont.lo \\\n@@ -2349,14 +2351,15 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/gcj/runtime/FileDeleter.P \\\n .deps/gnu/gcj/runtime/FinalizerThread.P \\\n .deps/gnu/gcj/runtime/FirstThread.P .deps/gnu/gcj/runtime/JNIWeakRef.P \\\n-.deps/gnu/gcj/runtime/NameFinder.P \\\n+.deps/gnu/gcj/runtime/MethodRef.P .deps/gnu/gcj/runtime/NameFinder.P \\\n .deps/gnu/gcj/runtime/SharedLibLoader.P \\\n-.deps/gnu/gcj/runtime/StringBuffer.P \\\n+.deps/gnu/gcj/runtime/StackTrace.P .deps/gnu/gcj/runtime/StringBuffer.P \\\n .deps/gnu/gcj/runtime/VMClassLoader.P \\\n .deps/gnu/gcj/runtime/natFinalizerThread.P \\\n .deps/gnu/gcj/runtime/natFirstThread.P \\\n .deps/gnu/gcj/runtime/natNameFinder.P \\\n .deps/gnu/gcj/runtime/natSharedLibLoader.P \\\n+.deps/gnu/gcj/runtime/natStackTrace.P \\\n .deps/gnu/gcj/runtime/natStringBuffer.P .deps/gnu/gcj/xlib/Clip.P \\\n .deps/gnu/gcj/xlib/Colormap.P .deps/gnu/gcj/xlib/Display.P \\\n .deps/gnu/gcj/xlib/Drawable.P .deps/gnu/gcj/xlib/Font.P \\\n@@ -2956,9 +2959,8 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/lang/natMath.P .deps/java/lang/natObject.P \\\n .deps/java/lang/natRuntime.P .deps/java/lang/natString.P \\\n .deps/java/lang/natStringBuffer.P .deps/java/lang/natSystem.P \\\n-.deps/java/lang/natThread.P .deps/java/lang/natVMThrowable.P \\\n-.deps/java/lang/ref/PhantomReference.P .deps/java/lang/ref/Reference.P \\\n-.deps/java/lang/ref/ReferenceQueue.P \\\n+.deps/java/lang/natThread.P .deps/java/lang/ref/PhantomReference.P \\\n+.deps/java/lang/ref/Reference.P .deps/java/lang/ref/ReferenceQueue.P \\\n .deps/java/lang/ref/SoftReference.P .deps/java/lang/ref/WeakReference.P \\\n .deps/java/lang/ref/natReference.P \\\n .deps/java/lang/reflect/AccessibleObject.P \\"}, {"sha": "ef2b5206cdbd7c34e11b69751f7a0eecb828beb0", "filename": "libjava/include/java-interp.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421f9e6091ca35352c825e7ec69439b3651da021/libjava%2Finclude%2Fjava-interp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421f9e6091ca35352c825e7ec69439b3651da021/libjava%2Finclude%2Fjava-interp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-interp.h?ref=421f9e6091ca35352c825e7ec69439b3651da021", "patch": "@@ -21,6 +21,7 @@ details.  */\n \n #include <java/lang/Class.h>\n #include <java/lang/ClassLoader.h>\n+#include <gnu/gcj/runtime/StackTrace.h>\n \n extern \"C\" {\n #include <ffi.h>\n@@ -140,6 +141,7 @@ class _Jv_InterpMethod : public _Jv_MethodBase\n   friend class _Jv_ClassReader;\n   friend class _Jv_BytecodeVerifier;\n   friend class gnu::gcj::runtime::NameFinder;\n+  friend class gnu::gcj::runtime::StackTrace;\n \n   friend void _Jv_PrepareClass(jclass);\n };"}, {"sha": "6fb918a90dc159dd4c92c286f39c2e047198e7e0", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421f9e6091ca35352c825e7ec69439b3651da021/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421f9e6091ca35352c825e7ec69439b3651da021/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=421f9e6091ca35352c825e7ec69439b3651da021", "patch": "@@ -20,6 +20,7 @@ details.  */\n #include <java/lang/reflect/Modifier.h>\n #include <java/security/ProtectionDomain.h>\n #include <java/lang/Package.h>\n+#include <gnu/gcj/runtime/StackTrace.h>\n \n // We declare these here to avoid including gcj/cni.h.\n extern \"C\" void _Jv_InitClass (jclass klass);\n@@ -138,6 +139,13 @@ class java::lang::Class : public java::lang::Object\n \n   java::lang::ClassLoader *getClassLoader (void);\n \n+  // This is an internal method that circumvents the usual security\n+  // checks when getting the class loader.\n+  java::lang::ClassLoader *getClassLoaderInternal (void)\n+  {\n+    return loader;\n+  }\n+\n   java::lang::reflect::Constructor *getConstructor (JArray<jclass> *);\n   JArray<java::lang::reflect::Constructor *> *getConstructors (void);\n   java::lang::reflect::Constructor *getDeclaredConstructor (JArray<jclass> *);\n@@ -296,6 +304,8 @@ class java::lang::Class : public java::lang::Object\n \t\t\t       java::lang::ClassLoader *loader);\n   friend jclass _Jv_FindClassInCache (_Jv_Utf8Const *name,\n \t\t\t\t      java::lang::ClassLoader *loader);\n+  friend jclass _Jv_PopClass (void);\n+  friend void _Jv_PushClass (jclass k);\n   friend void _Jv_NewArrayClass (jclass element,\n \t\t\t\t java::lang::ClassLoader *loader,\n \t\t\t\t _Jv_VTable *array_vtable = 0);\n@@ -349,6 +359,7 @@ class java::lang::Class : public java::lang::Object\n #endif\n \n   friend class _Jv_BytecodeVerifier;\n+  friend class gnu::gcj::runtime::StackTrace;\n \n   // Chain for class pool.\n   jclass next;\n@@ -403,6 +414,8 @@ class java::lang::Class : public java::lang::Object\n   jclass arrayclass;\n   // Security Domain to which this class belongs (or null).\n   java::security::ProtectionDomain *protectionDomain;\n+  // Used by Jv_PopClass and _Jv_PushClass to communicate with StackTrace.\n+  jclass chain;\n };\n \n #endif /* __JAVA_LANG_CLASS_H__ */"}, {"sha": "4c3385757c4b681f85ff8f3a64673dfdac04d138", "filename": "libjava/java/lang/VMThrowable.java", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421f9e6091ca35352c825e7ec69439b3651da021/libjava%2Fjava%2Flang%2FVMThrowable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421f9e6091ca35352c825e7ec69439b3651da021/libjava%2Fjava%2Flang%2FVMThrowable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FVMThrowable.java?ref=421f9e6091ca35352c825e7ec69439b3651da021", "patch": "@@ -38,9 +38,10 @@\n package java.lang;\n \n import gnu.gcj.runtime.NameFinder;\n+import gnu.gcj.runtime.StackTrace;\n \n /**\n- * VM dependant state and support methods Throwabele.\n+ * VM dependent state and support methods Throwable.\n  * It is deliberately package local and final and should only be accessed\n  * by the Throwable class.\n  * <p>\n@@ -50,8 +51,7 @@\n  */\n final class VMThrowable\n {\n-  private gnu.gcj.RawData stackTraceAddrs;\n-  private int length;\n+  private gnu.gcj.runtime.StackTrace trace;\n \n   /**\n    * Private contructor, create VMThrowables with fillInStackTrace();\n@@ -67,7 +67,20 @@ private VMThrowable() { }\n    * @return a new VMThrowable containing the current execution stack trace.\n    * @see Throwable#fillInStackTrace()\n    */\n-  static native VMThrowable fillInStackTrace(Throwable t);\n+  static VMThrowable fillInStackTrace(Throwable t)\n+  {\n+    VMThrowable state = null;\n+    \n+    /* FIXME: size of the stack trace is limited to 128 elements.\n+       It's undoubtedly sensible to limit the stack trace, but 128 is\n+       rather arbitrary.  It may be better to configure this.  */\n+    if (trace_enabled)\n+      {\n+\tstate = new VMThrowable ();\n+\tstate.trace = new gnu.gcj.runtime.StackTrace(128);\n+      }\n+    return state;\n+  }\n \n   /**\n    * Returns an <code>StackTraceElement</code> array based on the execution\n@@ -80,10 +93,11 @@ private VMThrowable() { }\n   StackTraceElement[] getStackTrace(Throwable t)\n   {\n     StackTraceElement[] result;\n-    if (stackTraceAddrs != null)\n+    if (trace != null)\n       {\n \tNameFinder nameFinder = new NameFinder();\n-\tresult = nameFinder.lookup(t, stackTraceAddrs, length);\n+\tresult = nameFinder.lookup(t, trace.stackTraceAddrs(), \n+\t\t\t\t   trace.length());\n \tnameFinder.close();\n       }\n     else"}, {"sha": "68fbd54d7542f0b8ae3259e6f1f02a83123f0366", "filename": "libjava/java/lang/natClass.cc", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421f9e6091ca35352c825e7ec69439b3651da021/libjava%2Fjava%2Flang%2FnatClass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421f9e6091ca35352c825e7ec69439b3651da021/libjava%2Fjava%2Flang%2FnatClass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClass.cc?ref=421f9e6091ca35352c825e7ec69439b3651da021", "patch": "@@ -36,6 +36,7 @@ details.  */\n #include <java/lang/IllegalAccessError.h>\n #include <java/lang/IllegalArgumentException.h>\n #include <java/lang/IncompatibleClassChangeError.h>\n+#include <java/lang/ArrayIndexOutOfBoundsException.h>\n #include <java/lang/InstantiationException.h>\n #include <java/lang/NoClassDefFoundError.h>\n #include <java/lang/NoSuchFieldException.h>\n@@ -47,7 +48,10 @@ details.  */\n #include <java/lang/System.h>\n #include <java/lang/SecurityManager.h>\n #include <java/lang/StringBuffer.h>\n+#include <gnu/gcj/runtime/StackTrace.h>\n #include <gcj/method.h>\n+#include <gnu/gcj/runtime/MethodRef.h>\n+#include <gnu/gcj/RawData.h>\n \n #include <java-cpool.h>\n \n@@ -71,7 +75,6 @@ java::lang::Class::forName (jstring className, jboolean initialize,\n   if (! _Jv_VerifyClassName (name))\n     throw new java::lang::ClassNotFoundException (className);\n \n-  // FIXME: should use bootstrap class loader if loader is null.\n   jclass klass = (buffer[0] == '[' \n \t\t  ? _Jv_FindClassFromSignature (name->data, loader)\n \t\t  : _Jv_FindClass (name, loader));\n@@ -88,8 +91,23 @@ java::lang::Class::forName (jstring className, jboolean initialize,\n jclass\n java::lang::Class::forName (jstring className)\n {\n-  // FIXME: should use class loader from calling method.\n-  return forName (className, true, NULL);\n+  java::lang::ClassLoader *loader = NULL;\n+  gnu::gcj::runtime::StackTrace *t \n+    = new gnu::gcj::runtime::StackTrace(4);\n+  java::lang::Class *klass = NULL;\n+  try\n+    {\n+      for (int i=1; !klass; i++)\n+\t{\n+\t  klass = t->classAt (i);\n+\t}\n+      loader = klass->getClassLoader();\n+    }\n+  catch (::java::lang::ArrayIndexOutOfBoundsException *e)\n+    {\n+    }\n+\n+  return forName (className, true, loader);\n }\n \n java::lang::ClassLoader *\n@@ -1040,6 +1058,8 @@ _Jv_CheckArrayStore (jobject arr, jobject obj)\n     {\n       JvAssert (arr != NULL);\n       jclass elt_class = (JV_CLASS (arr))->getComponentType();\n+      if (elt_class == &java::lang::Object::class$)\n+\treturn;\n       jclass obj_class = JV_CLASS (obj);\n       if (__builtin_expect \n           (! _Jv_IsAssignableFrom (elt_class, obj_class), false))"}, {"sha": "debcb4f4fed755b97d09543255ca979402c81983", "filename": "libjava/java/lang/natClassLoader.cc", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421f9e6091ca35352c825e7ec69439b3651da021/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421f9e6091ca35352c825e7ec69439b3651da021/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClassLoader.cc?ref=421f9e6091ca35352c825e7ec69439b3651da021", "patch": "@@ -326,6 +326,8 @@ _Jv_PrepareCompiledClass (jclass klass)\n     _Jv_LinkOffsetTable(klass);\n \n   klass->notifyAll ();\n+\n+  _Jv_PushClass (klass);\n }\n \n \n@@ -587,6 +589,8 @@ _Jv_InitNewClassFields (jclass ret)\n   ret->ancestors = NULL;\n   ret->idt = NULL;\n   ret->arrayclass = NULL;\n+  ret->protectionDomain = NULL;\n+  ret->chain = NULL;\n }\n \n jclass\n@@ -732,3 +736,31 @@ _Jv_NewArrayClass (jclass element, java::lang::ClassLoader *loader,\n \n   element->arrayclass = array_class;\n }\n+\n+static jclass stack_head;\n+\n+// These two functions form a stack of classes.   When a class is loaded\n+// it is pushed onto the stack by the class loader; this is so that\n+// StackTrace can quickly determine which classes have been loaded.\n+\n+jclass\n+_Jv_PopClass (void)\n+{\n+  JvSynchronize sync (&java::lang::Class::class$);\n+  if (stack_head)\n+    {\n+      jclass tmp = stack_head;\n+      stack_head = tmp->chain;\n+      return tmp;\n+    }\n+  return NULL;\n+}\n+\n+void\n+_Jv_PushClass (jclass k)\n+{\n+  JvSynchronize sync (&java::lang::Class::class$);\n+  jclass tmp = stack_head;\n+  stack_head = k;\n+  k->chain = tmp;\n+}"}, {"sha": "9244587d500006ef3cad721cb0ed02e3d4df25c9", "filename": "libjava/prims.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421f9e6091ca35352c825e7ec69439b3651da021/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421f9e6091ca35352c825e7ec69439b3651da021/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=421f9e6091ca35352c825e7ec69439b3651da021", "patch": "@@ -458,8 +458,8 @@ _Jv_NewObjectArray (jsize count, jclass elementClass, jobject init)\n   size_t size = (size_t) elements (obj);\n   size += count * sizeof (jobject);\n \n-  // FIXME: second argument should be \"current loader\"\n-  jclass klass = _Jv_GetArrayClass (elementClass, 0);\n+  jclass klass = _Jv_GetArrayClass (elementClass,\n+\t\t\t\t    elementClass->getClassLoaderInternal());\n \n   obj = (jobjectArray) _Jv_AllocArray (size, klass);\n   // Cast away const.\n@@ -920,11 +920,11 @@ _Jv_CreateJavaVM (void* /*vm_args*/)\n   arithexception = new java::lang::ArithmeticException\n     (JvNewStringLatin1 (\"/ by zero\"));\n #endif\n-\n+  \n   no_memory = new java::lang::OutOfMemoryError;\n-\n+  \n   java::lang::VMThrowable::trace_enabled = 1;\n-\n+  \n #ifdef USE_LTDL\n   LTDL_SET_PRELOADED_SYMBOLS ();\n #endif"}, {"sha": "dbf80d4bf03841392a95066d95ecf79fded36d02", "filename": "libjava/verify.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421f9e6091ca35352c825e7ec69439b3651da021/libjava%2Fverify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421f9e6091ca35352c825e7ec69439b3651da021/libjava%2Fverify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fverify.cc?ref=421f9e6091ca35352c825e7ec69439b3651da021", "patch": "@@ -405,7 +405,7 @@ class _Jv_BytecodeVerifier\n \n       using namespace java::lang;\n       java::lang::ClassLoader *loader\n-\t= verifier->current_class->getClassLoader();\n+\t= verifier->current_class->getClassLoaderInternal();\n       // We might see either kind of name.  Sigh.\n       if (data.name->data[0] == 'L'\n \t  && data.name->data[data.name->length - 1] == ';')\n@@ -571,7 +571,7 @@ class _Jv_BytecodeVerifier\n \n       if (key == reference_type)\n \treturn type (_Jv_GetArrayClass (data.klass,\n-\t\t\t\t\tdata.klass->getClassLoader ()));\n+\t\t\t\t\tdata.klass->getClassLoaderInternal()));\n       else\n \tverifier->verify_fail (\"internal error in type::to_array()\");\n     }\n@@ -695,7 +695,7 @@ class _Jv_BytecodeVerifier\n \t\t      while (arraycount > 0)\n \t\t\t{\n \t\t\t  java::lang::ClassLoader *loader\n-\t\t\t    = verifier->current_class->getClassLoader();\n+\t\t\t    = verifier->current_class->getClassLoaderInternal();\n \t\t\t  k = _Jv_GetArrayClass (k, loader);\n \t\t\t  --arraycount;\n \t\t\t}"}]}