{"sha": "828474fafd2ed33430172fe227f9da7d6fb98723", "node_id": "C_kwDOANBUbNoAKDgyODQ3NGZhZmQyZWQzMzQzMDE3MmZlMjI3ZjlkYTdkNmZiOTg3MjM", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2022-01-10T16:54:53Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2022-01-10T16:54:53Z"}, "message": "Fortran: Pass unlimited polymorphic argument to assumed type [PR103366].\n\n2022-01-10  Paul Thomas  <pault@gcc.gnu.org>\n\ngcc/fortran\n\tPR fortran/103366\n\t* trans-expr.c (gfc_conv_gfc_desc_to_cfi_desc): Allow unlimited\n\tpolymorphic actual argument passed to assumed type formal.\n\ngcc/testsuite/\n\tPR fortran/103366\n\t* gfortran.dg/pr103366.f90: New test.", "tree": {"sha": "1861573fa5e38dac971963f413f9f338940ce498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1861573fa5e38dac971963f413f9f338940ce498"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/828474fafd2ed33430172fe227f9da7d6fb98723", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828474fafd2ed33430172fe227f9da7d6fb98723", "html_url": "https://github.com/Rust-GCC/gccrs/commit/828474fafd2ed33430172fe227f9da7d6fb98723", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828474fafd2ed33430172fe227f9da7d6fb98723/comments", "author": null, "committer": null, "parents": [{"sha": "3159da6c46568a7c600f78fb3a3b76e2ea4bf4cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3159da6c46568a7c600f78fb3a3b76e2ea4bf4cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3159da6c46568a7c600f78fb3a3b76e2ea4bf4cc"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "2e15a7e874cc35c836c76da26dcb7c43d8c67383", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828474fafd2ed33430172fe227f9da7d6fb98723/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828474fafd2ed33430172fe227f9da7d6fb98723/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=828474fafd2ed33430172fe227f9da7d6fb98723", "patch": "@@ -50,10 +50,10 @@ static tree\n gfc_get_character_len (tree type)\n {\n   tree len;\n-  \n+\n   gcc_assert (type && TREE_CODE (type) == ARRAY_TYPE\n \t      && TYPE_STRING_FLAG (type));\n-  \n+\n   len = TYPE_MAX_VALUE (TYPE_DOMAIN (type));\n   len = (len) ? (len) : (integer_zero_node);\n   return fold_convert (gfc_charlen_type_node, len);\n@@ -67,10 +67,10 @@ tree\n gfc_get_character_len_in_bytes (tree type)\n {\n   tree tmp, len;\n-  \n+\n   gcc_assert (type && TREE_CODE (type) == ARRAY_TYPE\n \t      && TYPE_STRING_FLAG (type));\n-  \n+\n   tmp = TYPE_SIZE_UNIT (TREE_TYPE (type));\n   tmp = (tmp && !integer_zerop (tmp))\n     ? (fold_convert (gfc_charlen_type_node, tmp)) : (NULL_TREE);\n@@ -5630,6 +5630,16 @@ gfc_conv_gfc_desc_to_cfi_desc (gfc_se *parmse, gfc_expr *e, gfc_symbol *fsym)\n \t  itype = CFI_type_other;  // FIXME: Or CFI_type_cptr ?\n \t  break;\n \tcase BT_CLASS:\n+\t  if (UNLIMITED_POLY (e) && fsym->ts.type == BT_ASSUMED)\n+\t    {\n+\t      // F2017: 7.3.2.2: \"An entity that is declared using the TYPE(*)\n+\t      // type specifier is assumed-type and is an unlimited polymorphic\n+\t      //  entity.\" The actual argument _data component is passed.\n+\t      itype = CFI_type_other;  // FIXME: Or CFI_type_cptr ?\n+\t      break;\n+\t    }\n+\t  else\n+\t    gcc_unreachable ();\n \tcase BT_PROCEDURE:\n \tcase BT_HOLLERITH:\n \tcase BT_UNION:"}, {"sha": "d5d25dece09da9f52c43a38d002ec405e7d9d297", "filename": "gcc/testsuite/gfortran.dg/pr103366.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828474fafd2ed33430172fe227f9da7d6fb98723/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr103366.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828474fafd2ed33430172fe227f9da7d6fb98723/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr103366.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr103366.f90?ref=828474fafd2ed33430172fe227f9da7d6fb98723", "patch": "@@ -0,0 +1,17 @@\n+! { dg-do compile }\n+!\n+! Test the fix for PR103366.\n+!\n+! Contributed by Gerhardt Steinmetz  <gscfq@t-online.de>\n+!\n+program p\n+  call u([1])\n+contains\n+   subroutine s(x) bind(c)\n+      type(*) :: x(..)\n+   end\n+   subroutine u(x)\n+      class(*) :: x(..)\n+      call s(x)         ! Used to ICE here\n+   end\n+end"}]}