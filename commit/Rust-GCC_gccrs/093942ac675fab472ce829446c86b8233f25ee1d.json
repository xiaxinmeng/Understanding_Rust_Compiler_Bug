{"sha": "093942ac675fab472ce829446c86b8233f25ee1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkzOTQyYWM2NzVmYWI0NzJjZTgyOTQ0NmM4NmI4MjMzZjI1ZWUxZA==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2004-09-23T18:01:46Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-09-23T18:01:46Z"}, "message": "2004-09-23  Mark Wielaard  <mark@klomp.org>\n\n\t* java/util/Collections.java\n\t(binarySearch(List, Object, Comparator)): Explicitly\n\treverse direction in list iterator.\n\t(rotate): Just return when list is empty.\n\nFrom-SVN: r87970", "tree": {"sha": "bc1195b7fcbf1306b6476efad007af02f463e4c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc1195b7fcbf1306b6476efad007af02f463e4c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/093942ac675fab472ce829446c86b8233f25ee1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/093942ac675fab472ce829446c86b8233f25ee1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/093942ac675fab472ce829446c86b8233f25ee1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/093942ac675fab472ce829446c86b8233f25ee1d/comments", "author": null, "committer": null, "parents": [{"sha": "fd5f23d3a60e9271dd964e0d1a323e8db6f0088d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd5f23d3a60e9271dd964e0d1a323e8db6f0088d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd5f23d3a60e9271dd964e0d1a323e8db6f0088d"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "eec4c73d3bb4edeecb224745d17e0d20db4c955a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/093942ac675fab472ce829446c86b8233f25ee1d/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/093942ac675fab472ce829446c86b8233f25ee1d/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=093942ac675fab472ce829446c86b8233f25ee1d", "patch": "@@ -1,3 +1,10 @@\n+2004-09-23  Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/util/Collections.java\n+\t(binarySearch(List, Object, Comparator)): Explicitly\n+\treverse direction in list iterator.\n+\t(rotate): Just return when list is empty.\n+\n 2004-09-23  Tom Tromey  <tromey@redhat.com>\n \n \tPR java/17329:"}, {"sha": "d50563c9022383d667d019251d4a86786dc12ee4", "filename": "libjava/java/util/Collections.java", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/093942ac675fab472ce829446c86b8233f25ee1d/libjava%2Fjava%2Futil%2FCollections.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/093942ac675fab472ce829446c86b8233f25ee1d/libjava%2Fjava%2Futil%2FCollections.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FCollections.java?ref=093942ac675fab472ce829446c86b8233f25ee1d", "patch": "@@ -574,14 +574,26 @@ public static int binarySearch(List l, Object key, Comparator c)\n       {\n \tListIterator itr = l.listIterator();\n         int i = 0;\n+\tObject o = itr.next(); // Assumes list is not empty (see isSequential)\n+\tboolean forward = true;\n         while (low <= hi)\n           {\n             pos = (low + hi) >> 1;\n             if (i < pos)\n-              for ( ; i != pos; i++, itr.next());\n+\t      {\n+\t\tif (!forward)\n+\t\t  itr.next(); // Changing direction first.\n+\t\tfor ( ; i != pos; i++, o = itr.next());\n+\t\tforward = true;\n+\t      }\n             else\n-              for ( ; i != pos; i--, itr.previous());\n-\t    final int d = compare(key, itr.next(), c);\n+\t      {\n+\t\tif (forward)\n+\t\t  itr.previous(); // Changing direction first.\n+\t\tfor ( ; i != pos; i--, o = itr.previous());\n+\t\tforward = false;\n+\t      }\n+\t    final int d = compare(key, o, c);\n \t    if (d == 0)\n               return pos;\n \t    else if (d < 0)\n@@ -1110,6 +1122,8 @@ public int compare(Object a, Object b)\n   public static void rotate(List list, int distance)\n   {\n     int size = list.size();\n+    if (size == 0)\n+      return;\n     distance %= size;\n     if (distance == 0)\n       return;"}]}