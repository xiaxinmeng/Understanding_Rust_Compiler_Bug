{"sha": "cda749b144635af7ae7a316963299cc4b5526601", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RhNzQ5YjE0NDYzNWFmN2FlN2EzMTY5NjMyOTljYzRiNTUyNjYwMQ==", "commit": {"author": {"name": "John Wehle", "email": "john@feith.com", "date": "1999-04-14T14:27:38Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-04-14T14:27:38Z"}, "message": "John Wehle (john@feith.com)\n\nJohn Wehle  (john@feith.com)\n        * i386.md (extendsfdf, extendsfxf, extenddfxf): Use\n        output_float_extend instead specifying '#' as the template.\n        * i386.c (output_float_extend): Define.\n        * i386.h (output_float_extend): Declare.\n\nFrom-SVN: r26455", "tree": {"sha": "a97c00a571ca8d697b4ca76134c15ecb94562240", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a97c00a571ca8d697b4ca76134c15ecb94562240"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cda749b144635af7ae7a316963299cc4b5526601", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cda749b144635af7ae7a316963299cc4b5526601", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cda749b144635af7ae7a316963299cc4b5526601", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cda749b144635af7ae7a316963299cc4b5526601/comments", "author": {"login": "jlwehle", "id": 46985578, "node_id": "MDQ6VXNlcjQ2OTg1NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/46985578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlwehle", "html_url": "https://github.com/jlwehle", "followers_url": "https://api.github.com/users/jlwehle/followers", "following_url": "https://api.github.com/users/jlwehle/following{/other_user}", "gists_url": "https://api.github.com/users/jlwehle/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlwehle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlwehle/subscriptions", "organizations_url": "https://api.github.com/users/jlwehle/orgs", "repos_url": "https://api.github.com/users/jlwehle/repos", "events_url": "https://api.github.com/users/jlwehle/events{/privacy}", "received_events_url": "https://api.github.com/users/jlwehle/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b74a056019b07731f0c0f87c71486acd268198d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b74a056019b07731f0c0f87c71486acd268198d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b74a056019b07731f0c0f87c71486acd268198d2"}], "stats": {"total": 144, "additions": 89, "deletions": 55}, "files": [{"sha": "30a086852ff7516e5f6e31e96da0103d3bfad315", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda749b144635af7ae7a316963299cc4b5526601/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda749b144635af7ae7a316963299cc4b5526601/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cda749b144635af7ae7a316963299cc4b5526601", "patch": "@@ -1,3 +1,10 @@\n+Wed Apr 14 14:26:36 1999  John Wehle  (john@feith.com)\n+\n+        * i386.md (extendsfdf, extendsfxf, extenddfxf): Use\n+        output_float_extend instead specifying '#' as the template.\n+        * i386.c (output_float_extend): Define.\n+        * i386.h (output_float_extend): Declare.\n+\n Wed Apr 14 10:48:03 1999  Catherine Moore  <clm@cygnus.com>\n  \n         * config/mips/elf.h, config/mips/elf64.h"}, {"sha": "8432443a06aac1ce6472527c4c4d3a23f34b66f0", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda749b144635af7ae7a316963299cc4b5526601/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda749b144635af7ae7a316963299cc4b5526601/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=cda749b144635af7ae7a316963299cc4b5526601", "patch": "@@ -4179,6 +4179,66 @@ output_fix_trunc (insn, operands)\n   return AS1 (fldc%W2,%2);\n }\n \f\n+/* Output code for INSN to extend a float.  OPERANDS are the insn\n+   operands.  The output may be DFmode or XFmode and the input operand\n+   may be SFmode or DFmode.  Operands 2 and 3 are scratch memory and\n+   are only necessary if operands 0 or 1 are non-stack registers.  */\n+\n+void\n+output_float_extend (insn, operands)\n+     rtx insn;\n+     rtx *operands;\n+{\n+  int stack_top_dies = find_regno_note (insn, REG_DEAD, FIRST_STACK_REG) != 0;\n+  rtx xops[2];\n+\n+  if (! STACK_TOP_P (operands[0]) && ! STACK_TOP_P (operands[1]))\n+    abort ();\n+\n+  if (STACK_TOP_P (operands[0]) && STACK_TOP_P (operands[1]) && stack_top_dies)\n+    return;\n+\n+  if (STACK_TOP_P (operands[0]) )\n+    {\n+      if (NON_STACK_REG_P (operands[1]))\n+\t{\n+\t  if (GET_MODE (operands[1]) == SFmode)\n+\t    output_asm_insn (AS2 (mov%L0,%1,%2), operands);\n+\t  else\n+\t    {\n+\t      xops[0] = operands[2];\n+\t      xops[1] = operands[1];\n+\t      output_asm_insn (output_move_double (xops), xops);\n+\t    }\n+\t}\n+\n+      xops[0] = NON_STACK_REG_P (operands[1]) ? operands[2] : operands[1];\n+\n+      output_asm_insn (AS1 (fld%z0,%y0), xops);\n+    }\n+  else\n+    {\n+      xops[0] = NON_STACK_REG_P (operands[0]) ? operands[3] : operands[0];\n+\n+      if (stack_top_dies\n+\t  || (GET_CODE (xops[0]) == MEM && GET_MODE (xops[0]) == XFmode))\n+\t{\n+\t  output_asm_insn (AS1 (fstp%z0,%y0), xops);\n+\t  if (! stack_top_dies)\n+\t    output_asm_insn (AS1 (fld%z0,%y0), xops);\n+\t}\n+      else\n+\toutput_asm_insn (AS1 (fst%z0,%y0), xops);\n+\n+      if (NON_STACK_REG_P (operands[0]))\n+\t{\n+\t  xops[0] = operands[0];\n+\t  xops[1] = operands[3];\n+\t  output_asm_insn (output_move_double (xops), xops);\n+\t}\n+    }\n+}\n+\f\n /* Output code for INSN to compare OPERANDS.  The two operands might\n    not have the same mode: one might be within a FLOAT or FLOAT_EXTEND\n    expression.  If the compare is in mode CCFPEQmode, use an opcode that"}, {"sha": "56967a691653fc3a14edac7137e534b49ef12b80", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda749b144635af7ae7a316963299cc4b5526601/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda749b144635af7ae7a316963299cc4b5526601/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=cda749b144635af7ae7a316963299cc4b5526601", "patch": "@@ -2743,6 +2743,7 @@ extern int shift_op ();\n extern int VOIDmode_compare_op ();\n extern char *output_387_binary_op ();\n extern char *output_fix_trunc ();\n+extern void output_float_extend ();\n extern char *output_float_compare ();\n extern char *output_fp_cc0_set ();\n extern void save_386_machine_status ();"}, {"sha": "211b0ba12149e7062eee0edb5628a923ed02cc53", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 21, "deletions": 55, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda749b144635af7ae7a316963299cc4b5526601/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda749b144635af7ae7a316963299cc4b5526601/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=cda749b144635af7ae7a316963299cc4b5526601", "patch": "@@ -2259,7 +2259,12 @@\n    (clobber (match_operand:DF 3 \"memory_operand\" \"m,m,m,o\"))]\n   \"TARGET_80387 && (GET_CODE (operands[0]) != MEM\n \t\t    || GET_CODE (operands[1]) != MEM)\"\n-  \"#\")\n+  \"*\n+{\n+  output_float_extend (insn, operands);\n+  return \\\"\\\";\n+}\"\n+  [(set_attr \"type\" \"fld,fpop,fld,fpop\")])\n \n (define_split\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n@@ -2302,21 +2307,8 @@\n \t\t    || GET_CODE (operands[1]) != MEM)\"\n   \"*\n {\n-  int stack_top_dies = find_regno_note (insn, REG_DEAD, FIRST_STACK_REG) != 0;\n-\n-  if (! STACK_TOP_P (operands[0]) && ! STACK_TOP_P (operands[1]))\n-    abort ();\n-\n-  if (STACK_TOP_P (operands[0]) && STACK_TOP_P (operands[1]))\n+    output_float_extend (insn, operands);\n     return \\\"\\\";\n-\n-  if (STACK_TOP_P (operands[0]))\n-    return AS1 (fld%z1,%y1);\n-\n-  if (stack_top_dies)\n-    return AS1 (fstp%z0,%y0);\n-  else\n-    return AS1 (fst%z0,%y0);\n }\"\n   [(set_attr \"type\" \"fld,fpop\")])\n \n@@ -2344,7 +2336,12 @@\n    (clobber (match_operand:XF 3 \"memory_operand\" \"m,m,m,o\"))]\n   \"TARGET_80387 && (GET_CODE (operands[0]) != MEM\n \t\t    || GET_CODE (operands[1]) != MEM)\"\n-  \"#\")\n+  \"*\n+{\n+    output_float_extend (insn, operands);\n+    return \\\"\\\";\n+}\"\n+  [(set_attr \"type\" \"fld,fpop,fld,fpop\")])\n \n (define_split\n   [(set (match_operand:XF 0 \"register_operand\" \"\")\n@@ -2387,26 +2384,8 @@\n \t\t    || GET_CODE (operands[1]) != MEM)\"\n   \"*\n {\n-  int stack_top_dies = find_regno_note (insn, REG_DEAD, FIRST_STACK_REG) != 0;\n-\n-  if (! STACK_TOP_P (operands[0]) && ! STACK_TOP_P (operands[1]))\n-    abort ();\n-\n-  if (STACK_TOP_P (operands[0]) && STACK_TOP_P (operands[1]))\n+    output_float_extend (insn, operands);\n     return \\\"\\\";\n-\n-  if (STACK_TOP_P (operands[0]))\n-    return AS1 (fld%z1,%y1);\n-\n-  if (stack_top_dies || GET_CODE (operands[0]) == MEM)\n-    output_asm_insn (AS1 (fstp%z0,%y0), operands);\n-  else\n-    return AS1 (fst%z0,%y0);\n-\n-  if (! stack_top_dies)\n-    return AS1 (fld%z0,%y0);\n-\n-  return \\\"\\\";\n }\"\n   [(set_attr \"type\" \"fld,fpop\")])\n \n@@ -2434,7 +2413,12 @@\n    (clobber (match_operand:XF 3 \"memory_operand\" \"m,m,m,o\"))]\n   \"TARGET_80387 && (GET_CODE (operands[0]) != MEM\n \t\t    || GET_CODE (operands[1]) != MEM)\"\n-  \"#\")\n+  \"*\n+{\n+    output_float_extend (insn, operands);\n+    return \\\"\\\";\n+}\"\n+  [(set_attr \"type\" \"fld,fpop,fld,fpop\")])\n \n (define_split\n   [(set (match_operand:XF 0 \"register_operand\" \"\")\n@@ -2478,26 +2462,8 @@\n \t\t    || GET_CODE (operands[1]) != MEM)\"\n   \"*\n {\n-  int stack_top_dies = find_regno_note (insn, REG_DEAD, FIRST_STACK_REG) != 0;\n-\n-  if (! STACK_TOP_P (operands[0]) && ! STACK_TOP_P (operands[1]))\n-    abort ();\n-\n-  if (STACK_TOP_P (operands[0]) && STACK_TOP_P (operands[1]))\n+    output_float_extend (insn, operands);\n     return \\\"\\\";\n-\n-  if (STACK_TOP_P (operands[0]))\n-    return AS1 (fld%z1,%y1);\n-\n-  if (stack_top_dies || GET_CODE (operands[0]) == MEM)\n-    output_asm_insn (AS1 (fstp%z0,%y0), operands);\n-  else\n-    return AS1 (fst%z0,%y0);\n-\n-  if (! stack_top_dies)\n-    return AS1 (fld%z0,%y0);\n-\n-  return \\\"\\\";\n }\"\n   [(set_attr \"type\" \"fld,fpop\")])\n "}]}