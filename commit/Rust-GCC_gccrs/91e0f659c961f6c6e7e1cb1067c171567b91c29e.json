{"sha": "91e0f659c961f6c6e7e1cb1067c171567b91c29e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFlMGY2NTljOTYxZjZjNmU3ZTFjYjEwNjdjMTcxNTY3YjkxYzI5ZQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-10-15T15:55:04Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-10-15T15:55:04Z"}, "message": "Warning fixes:\n\n        * choose-temp.c: Prototype mkstemps() when IN_GCC.\n        * cplus-dem.c (consume_count): Cast argument of ctype macro to\n        `unsigned char'.\n        (cplus_demangle_opname): Cast the result of `strlen' to (int) when\n        comparing against one.\n        (cplus_mangle_opname): Likewise.\n        (demangle_integral_value): Cast argument of ctype macro to\n        `unsigned char'.\n        (demangle_template_value_parm): Likewise.\n        (demangle_template): Initialize variable `bindex'.  Cast the\n        result of `strlen' to (int) when comparing against one.  Remove\n        unused variable `start_of_value_parm'.\n        (demangle_class_name): Cast the result of `strlen' to (int) when\n        comparing against one.\n        (demangle_prefix): Cast argument of ctype macro to `unsigned char'.\n        (gnu_special): Likewise.  Cast the result of `strlen' to (int)\n        when comparing against one.\n        (demangle_qualified): Cast argument of ctype macro to `unsigned char'.\n        (get_count): Likewise.\n        (do_type): Likewise.  Cast the result of `strlen' to (int) when\n        comparing against one.\n        (demangle_fund_type): Cast argument of ctype macro to `unsigned char'.\n        (demangle_function_name): Cast the result of `strlen' to (int)\n        when comparing against one.\n        * mkstemp.c (mkstemps): Cast variable `len' to (int) when\n        comparing against one.\n\nFrom-SVN: r23113", "tree": {"sha": "368cd8929f4b72dcda6983b75b0625fd2c6962c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/368cd8929f4b72dcda6983b75b0625fd2c6962c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91e0f659c961f6c6e7e1cb1067c171567b91c29e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91e0f659c961f6c6e7e1cb1067c171567b91c29e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91e0f659c961f6c6e7e1cb1067c171567b91c29e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91e0f659c961f6c6e7e1cb1067c171567b91c29e/comments", "author": null, "committer": null, "parents": [{"sha": "ce0a595295f77ae947106256dbc823f936d17fb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce0a595295f77ae947106256dbc823f936d17fb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce0a595295f77ae947106256dbc823f936d17fb6"}], "stats": {"total": 101, "additions": 68, "deletions": 33}, "files": [{"sha": "271b859c4e5984c79d3afaac3168d247cee0d10c", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91e0f659c961f6c6e7e1cb1067c171567b91c29e/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91e0f659c961f6c6e7e1cb1067c171567b91c29e/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=91e0f659c961f6c6e7e1cb1067c171567b91c29e", "patch": "@@ -1,3 +1,34 @@\n+Thu Oct 15 18:51:12 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* choose-temp.c: Prototype mkstemps() when IN_GCC.\n+\n+\t* cplus-dem.c (consume_count): Cast argument of ctype macro to\n+\t`unsigned char'.\n+\t(cplus_demangle_opname): Cast the result of `strlen' to (int) when\n+\tcomparing against one.\n+\t(cplus_mangle_opname): Likewise.\n+\t(demangle_integral_value): Cast argument of ctype macro to\n+\t`unsigned char'.\n+\t(demangle_template_value_parm): Likewise.\n+\t(demangle_template): Initialize variable `bindex'.  Cast the\n+\tresult of `strlen' to (int) when comparing against one.  Remove\n+\tunused variable `start_of_value_parm'.\n+\t(demangle_class_name): Cast the result of `strlen' to (int) when\n+\tcomparing against one.\n+\t(demangle_prefix): Cast argument of ctype macro to `unsigned char'.\n+\t(gnu_special): Likewise.  Cast the result of `strlen' to (int)\n+\twhen comparing against one.\n+\t(demangle_qualified): Cast argument of ctype macro to `unsigned char'.\n+\t(get_count): Likewise.\n+\t(do_type): Likewise.  Cast the result of `strlen' to (int) when\n+\tcomparing against one.\n+\t(demangle_fund_type): Cast argument of ctype macro to `unsigned char'.\n+\t(demangle_function_name): Cast the result of `strlen' to (int)\n+\twhen comparing against one.\n+\n+\t* mkstemp.c (mkstemps): Cast variable `len' to (int) when\n+\tcomparing against one.\n+\n Tue Oct 13 23:51:51 1998  Jeffrey A Law  (law@cygnus.com)\n \n         * mkstemp.c: Check HAVE_SYS_TIME_H before including sys/time.h"}, {"sha": "6f62f8efe83fea90ba9c6aa3ed044249eb32e78d", "filename": "libiberty/choose-temp.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91e0f659c961f6c6e7e1cb1067c171567b91c29e/libiberty%2Fchoose-temp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91e0f659c961f6c6e7e1cb1067c171567b91c29e/libiberty%2Fchoose-temp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fchoose-temp.c?ref=91e0f659c961f6c6e7e1cb1067c171567b91c29e", "patch": "@@ -53,6 +53,7 @@ Boston, MA 02111-1307, USA.  */\n #ifdef IN_GCC\n #include \"gansidecl.h\"\n extern char *xmalloc ();\n+extern int mkstemps ();\n #else\n #include \"ansidecl.h\"\n #include \"libiberty.h\""}, {"sha": "079c8a77d223ced27338a1431fcf789fc64b9561", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 35, "deletions": 32, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91e0f659c961f6c6e7e1cb1067c171567b91c29e/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91e0f659c961f6c6e7e1cb1067c171567b91c29e/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=91e0f659c961f6c6e7e1cb1067c171567b91c29e", "patch": "@@ -403,7 +403,7 @@ consume_count (type)\n {\n   int count = 0;\n \n-  while (isdigit (**type))\n+  while (isdigit ((unsigned char)**type))\n     {\n       count *= 10;\n       count += **type - '0';\n@@ -426,7 +426,7 @@ consume_count_with_underscores (mangled)\n   if (**mangled == '_')\n     {\n       (*mangled)++;\n-      if (!isdigit (**mangled))\n+      if (!isdigit ((unsigned char)**mangled))\n \treturn -1;\n \n       idx = consume_count (mangled);\n@@ -532,7 +532,7 @@ cplus_demangle_opname (opname, result, options)\n \t  for (i = 0; i < sizeof (optable) / sizeof (optable[0]); i++)\n \t    {\n \t      len1 = len - 10;\n-\t      if (strlen (optable[i].in) == len1\n+\t      if ((int) strlen (optable[i].in) == len1\n \t\t  && memcmp (optable[i].in, opname + 10, len1) == 0)\n \t\t{\n \t\t  strcat (result, \"operator\");\n@@ -549,7 +549,7 @@ cplus_demangle_opname (opname, result, options)\n \t  for (i = 0; i < sizeof (optable) / sizeof (optable[0]); i++)\n \t    {\n \t      len1 = len - 3;\n-\t      if (strlen (optable[i].in) == len1 \n+\t      if ((int) strlen (optable[i].in) == len1 \n \t\t  && memcmp (optable[i].in, opname + 3, len1) == 0)\n \t\t{\n \t\t  strcat (result, \"operator\");\n@@ -594,7 +594,7 @@ cplus_mangle_opname (opname, options)\n   len = strlen (opname);\n   for (i = 0; i < sizeof (optable) / sizeof (optable[0]); i++)\n     {\n-      if (strlen (optable[i].out) == len\n+      if ((int) strlen (optable[i].out) == len\n \t  && (options & DMGL_ANSI) == (optable[i].flags & DMGL_ANSI)\n \t  && memcmp (optable[i].out, opname, len) == 0)\n \treturn optable[i].in;\n@@ -1228,7 +1228,7 @@ demangle_integral_value (work, mangled, s)\n \t  string_appendn (s, \"-\", 1);\n \t  (*mangled)++;\n \t}\n-      while (isdigit (**mangled))\t\n+      while (isdigit ((unsigned char)**mangled))\n \t{\n \t  string_appendn (s, *mangled, 1);\n \t  (*mangled)++;\n@@ -1305,7 +1305,7 @@ demangle_template_value_parm (work, mangled, s, tk)\n \t  string_appendn (s, \"-\", 1);\n \t  (*mangled)++;\n \t}\n-      while (isdigit (**mangled))\t\n+      while (isdigit ((unsigned char)**mangled))\n \t{\n \t  string_appendn (s, *mangled, 1);\n \t  (*mangled)++;\n@@ -1314,7 +1314,7 @@ demangle_template_value_parm (work, mangled, s, tk)\n \t{\n \t  string_appendn (s, \".\", 1);\n \t  (*mangled)++;\n-\t  while (isdigit (**mangled))\t\n+\t  while (isdigit ((unsigned char)**mangled))\n \t    {\n \t      string_appendn (s, *mangled, 1);\n \t      (*mangled)++;\n@@ -1324,7 +1324,7 @@ demangle_template_value_parm (work, mangled, s, tk)\n \t{\n \t  string_appendn (s, \"e\", 1);\n \t  (*mangled)++;\n-\t  while (isdigit (**mangled))\t\n+\t  while (isdigit ((unsigned char)**mangled))\n \t    {\n \t      string_appendn (s, *mangled, 1);\n \t      (*mangled)++;\n@@ -1383,7 +1383,7 @@ demangle_template (work, mangled, tname, trawname, is_type, remember)\n   int success = 0;\n   const char *start;\n   string temp;\n-  int bindex;\n+  int bindex = 0;\n \n   (*mangled)++;\n   if (is_type)\n@@ -1421,7 +1421,8 @@ demangle_template (work, mangled, tname, trawname, is_type, remember)\n \t}\n       else\n \t{\n-\t  if ((r = consume_count (mangled)) == 0 || strlen (*mangled) < r)\n+\t  if ((r = consume_count (mangled)) == 0\n+\t      || (int) strlen (*mangled) < r)\n \t    {\n \t      return (0);\n \t    }\n@@ -1484,7 +1485,8 @@ demangle_template (work, mangled, tname, trawname, is_type, remember)\n \t  success = demangle_template_template_parm (work, mangled, tname);\n \t  \n \t  if (success\n-\t      && (r2 = consume_count (mangled)) > 0 && strlen (*mangled) >= r2)\n+\t      && (r2 = consume_count (mangled)) > 0\n+\t      && (int) strlen (*mangled) >= r2)\n \t    {\n \t      string_append (tname, \" \");\n \t      string_appendn (tname, *mangled, r2);\n@@ -1507,7 +1509,6 @@ demangle_template (work, mangled, tname, trawname, is_type, remember)\n \t{\n \t  string  param;\n \t  string* s;\n-\t  const char* start_of_value_parm = *mangled;\n \n \t  /* otherwise, value parameter */\n \n@@ -1650,7 +1651,7 @@ demangle_class_name (work, mangled, declp)\n   int success = 0;\n \n   n = consume_count (mangled);\n-  if (strlen (*mangled) >= n)\n+  if ((int) strlen (*mangled) >= n)\n     {\n       demangle_arm_pt (work, mangled, n, declp);\n       success = 1;\n@@ -1849,19 +1850,20 @@ demangle_prefix (work, mangled, declp)\n     }\n   else if (work -> static_type)\n     {\n-      if (!isdigit (scan[0]) && (scan[0] != 't'))\n+      if (!isdigit ((unsigned char)scan[0]) && (scan[0] != 't'))\n \t{\n \t  success = 0;\n \t}\n     }\n   else if ((scan == *mangled)\n-\t   && (isdigit (scan[2]) || (scan[2] == 'Q') || (scan[2] == 't')\n-\t       || (scan[2] == 'K') || (scan[2] == 'H')))\n+\t   && (isdigit ((unsigned char)scan[2]) || (scan[2] == 'Q')\n+\t       || (scan[2] == 't') || (scan[2] == 'K') || (scan[2] == 'H')))\n     {\n       /* The ARM says nothing about the mangling of local variables.\n \t But cfront mangles local variables by prepending __<nesting_level>\n \t to them. As an extension to ARM demangling we handle this case.  */\n-      if ((LUCID_DEMANGLING || ARM_DEMANGLING) && isdigit (scan[2]))\n+      if ((LUCID_DEMANGLING || ARM_DEMANGLING)\n+\t  && isdigit ((unsigned char)scan[2]))\n \t{\n \t  *mangled = scan + 2;\n \t  consume_count (mangled);\n@@ -1880,7 +1882,8 @@ demangle_prefix (work, mangled, declp)\n \t  *mangled = scan + 2;\n \t}\n     }\n-  else if ((scan == *mangled) && !isdigit (scan[2]) && (scan[2] != 't'))\n+  else if ((scan == *mangled) && !isdigit ((unsigned char)scan[2])\n+\t   && (scan[2] != 't'))\n     {\n       /* Mangled name starts with \"__\".  Skip over any leading '_' characters,\n \t then find the next \"__\" that separates the prefix from the signature.\n@@ -2011,14 +2014,14 @@ gnu_special (work, mangled, declp)\n \t\t\t\t\t   1);\n \t      break;\n \t    default:\n-\t      if (isdigit(*mangled[0]))\n+\t      if (isdigit((unsigned char)*mangled[0]))\n \t\t{\n \t\t  n = consume_count(mangled);\n \t\t  /* We may be seeing a too-large size, or else a\n \t\t     \".<digits>\" indicating a static local symbol.  In\n \t\t     any case, declare victory and move on; *don't* try\n \t\t     to use n to allocate.  */\n-\t\t  if (n > strlen (*mangled))\n+\t\t  if (n > (int) strlen (*mangled))\n \t\t    {\n \t\t      success = 1;\n \t\t      break;\n@@ -2282,11 +2285,11 @@ demangle_qualified (work, mangled, result, isfuncname, append)\n \t by an underscore.  */\n       p = *mangled + 2;\n       qualifiers = atoi (p);\n-      if (!isdigit (*p) || *p == '0')\n+      if (!isdigit ((unsigned char)*p) || *p == '0')\n \tsuccess = 0;\n \n       /* Skip the digits.  */\n-      while (isdigit (*p))\n+      while (isdigit ((unsigned char)*p))\n \t++p;\n \n       if (*p != '_')\n@@ -2435,15 +2438,15 @@ get_count (type, count)\n   const char *p;\n   int n;\n \n-  if (!isdigit (**type))\n+  if (!isdigit ((unsigned char)**type))\n     {\n       return (0);\n     }\n   else\n     {\n       *count = **type - '0';\n       (*type)++;\n-      if (isdigit (**type))\n+      if (isdigit ((unsigned char)**type))\n \t{\n \t  p = *type;\n \t  n = *count;\n@@ -2453,7 +2456,7 @@ get_count (type, count)\n \t      n += *p - '0';\n \t      p++;\n \t    } \n-\t  while (isdigit (*p));\n+\t  while (isdigit ((unsigned char)*p));\n \t  if (*p == '_')\n \t    {\n \t      *type = p + 1;\n@@ -2576,18 +2579,18 @@ do_type (work, mangled, result)\n \n \t    member = **mangled == 'M';\n \t    (*mangled)++;\n-\t    if (!isdigit (**mangled) && **mangled != 't')\n+\t    if (!isdigit ((unsigned char)**mangled) && **mangled != 't')\n \t      {\n \t\tsuccess = 0;\n \t\tbreak;\n \t      }\n \n \t    string_append (&decl, \")\");\n \t    string_prepend (&decl, SCOPE_STRING (work));\n-\t    if (isdigit (**mangled)) \n+\t    if (isdigit ((unsigned char)**mangled))\n \t      {\n \t\tn = consume_count (mangled);\n-\t\tif (strlen (*mangled) < n)\n+\t\tif ((int) strlen (*mangled) < n)\n \t\t  {\n \t\t    success = 0;\n \t\t    break;\n@@ -2897,7 +2900,7 @@ demangle_fund_type (work, mangled, result)\n       break;\n     case 'G':\n       (*mangled)++;\n-      if (!isdigit (**mangled))\n+      if (!isdigit ((unsigned char)**mangled))\n \t{\n \t  success = 0;\n \t  break;\n@@ -3430,7 +3433,7 @@ demangle_function_name (work, mangled, declp, scan)\n \t  for (i = 0; i < sizeof (optable) / sizeof (optable[0]); i++)\n \t    {\n \t      int len = declp->p - declp->b - 10;\n-\t      if (strlen (optable[i].in) == len\n+\t      if ((int) strlen (optable[i].in) == len\n \t\t  && memcmp (optable[i].in, declp->b + 10, len) == 0)\n \t\t{\n \t\t  string_clear (declp);\n@@ -3446,7 +3449,7 @@ demangle_function_name (work, mangled, declp, scan)\n \t  for (i = 0; i < sizeof (optable) / sizeof (optable[0]); i++)\n \t    {\n \t      int len = declp->p - declp->b - 3;\n-\t      if (strlen (optable[i].in) == len \n+\t      if ((int) strlen (optable[i].in) == len \n \t\t  && memcmp (optable[i].in, declp->b + 3, len) == 0)\n \t\t{\n \t\t  string_clear (declp);"}, {"sha": "6d1b40ecf824d9a7e0cdf3632611ea825a94d42e", "filename": "libiberty/mkstemp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91e0f659c961f6c6e7e1cb1067c171567b91c29e/libiberty%2Fmkstemp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91e0f659c961f6c6e7e1cb1067c171567b91c29e/libiberty%2Fmkstemp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmkstemp.c?ref=91e0f659c961f6c6e7e1cb1067c171567b91c29e", "patch": "@@ -82,7 +82,7 @@ mkstemps (template, suffix_len)\n \n   len = strlen (template);\n \n-  if (len < 6 + suffix_len\n+  if ((int) len < 6 + suffix_len\n       || strncmp (&template[len - 6 - suffix_len], \"XXXXXX\", 6))\n     {\n       return -1;"}]}