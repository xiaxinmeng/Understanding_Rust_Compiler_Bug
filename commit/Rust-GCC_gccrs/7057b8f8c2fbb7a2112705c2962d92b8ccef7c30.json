{"sha": "7057b8f8c2fbb7a2112705c2962d92b8ccef7c30", "node_id": "C_kwDOANBUbNoAKDcwNTdiOGY4YzJmYmI3YTIxMTI3MDVjMjk2MmQ5MmI4Y2NlZjdjMzA", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-30T17:32:36Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-30T17:32:36Z"}, "message": "vect: Fix ncopies calculation for emulated gather/scatter [PR103494]\n\nI was too eager about removing ncopies calculations in g:10833849b55.\nWhen emulating gather/scatter, the offset ncopies can be different from\nthe data ncopies.  This patch restores the original calculation.\n\ngcc/\n\tPR tree-optimization/103494\n\t* tree-vect-stmts.c (vect_get_gather_scatter_ops): Remove ncopies\n\targument and calculate ncopies from gs_info->offset_vectype\n\twhere necessary.\n\t(vectorizable_store, vectorizable_load): Update accordingly.\n\ngcc/testsuite/\n\tPR tree-optimization/103494\n\t* gcc.dg/vect/pr103494.c: New test.\n\t* g++.dg/vect/pr103494.cc: Likewise.", "tree": {"sha": "8639c3dded9f49f35ab43d79830f18784466c82d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8639c3dded9f49f35ab43d79830f18784466c82d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7057b8f8c2fbb7a2112705c2962d92b8ccef7c30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7057b8f8c2fbb7a2112705c2962d92b8ccef7c30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7057b8f8c2fbb7a2112705c2962d92b8ccef7c30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7057b8f8c2fbb7a2112705c2962d92b8ccef7c30/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fee5ec362f7a243f459e6378fd49dfc89dc9fb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fee5ec362f7a243f459e6378fd49dfc89dc9fb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fee5ec362f7a243f459e6378fd49dfc89dc9fb5"}], "stats": {"total": 61, "additions": 52, "deletions": 9}, "files": [{"sha": "c0b078105c2a02e1ebb670a5b901a5e53f982621", "filename": "gcc/testsuite/g++.dg/vect/pr103494.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7057b8f8c2fbb7a2112705c2962d92b8ccef7c30/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr103494.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7057b8f8c2fbb7a2112705c2962d92b8ccef7c30/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr103494.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr103494.cc?ref=7057b8f8c2fbb7a2112705c2962d92b8ccef7c30", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O3\" } */\n+\n+void glFinish();\n+struct _Vector_base {\n+  struct {\n+    unsigned _M_start;\n+  } _M_impl;\n+};\n+class vector : _Vector_base {\n+public:\n+  vector(long) {}\n+  unsigned *data() { return &_M_impl._M_start; }\n+};\n+void *PutBitsIndexedImpl_color_table;\n+int PutBitsIndexedImpl_dstRectHeight;\n+char *PutBitsIndexedImpl_src_ptr;\n+void PutBitsIndexedImpl() {\n+  vector unpacked_buf(PutBitsIndexedImpl_dstRectHeight);\n+  unsigned *dst_ptr = unpacked_buf.data();\n+  for (int x; x; x++) {\n+    char i = *PutBitsIndexedImpl_src_ptr++;\n+    dst_ptr[x] = static_cast<int *>(PutBitsIndexedImpl_color_table)[i];\n+  }\n+  glFinish();\n+}"}, {"sha": "b544bf2379c551ff5114ae2d93794c535eeec713", "filename": "gcc/testsuite/gcc.dg/vect/pr103494.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7057b8f8c2fbb7a2112705c2962d92b8ccef7c30/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr103494.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7057b8f8c2fbb7a2112705c2962d92b8ccef7c30/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr103494.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr103494.c?ref=7057b8f8c2fbb7a2112705c2962d92b8ccef7c30", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O3\" } */\n+\n+typedef int T1;\n+typedef signed char T2;\n+\n+T1\n+f (T1 *d, T2 *x, int n)\n+{\n+  unsigned char res = 0;\n+  for (int i = 0; i < n; ++i)\n+    res += d[x[i]];\n+  return res;\n+}"}, {"sha": "9726450ab2dcbebd741727820ec2d90dac257152", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7057b8f8c2fbb7a2112705c2962d92b8ccef7c30/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7057b8f8c2fbb7a2112705c2962d92b8ccef7c30/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=7057b8f8c2fbb7a2112705c2962d92b8ccef7c30", "patch": "@@ -2962,8 +2962,7 @@ vect_build_gather_load_calls (vec_info *vinfo, stmt_vec_info stmt_info,\n static void\n vect_get_gather_scatter_ops (loop_vec_info loop_vinfo,\n \t\t\t     class loop *loop, stmt_vec_info stmt_info,\n-\t\t\t     slp_tree slp_node, unsigned int ncopies,\n-\t\t\t     gather_scatter_info *gs_info,\n+\t\t\t     slp_tree slp_node, gather_scatter_info *gs_info,\n \t\t\t     tree *dataref_ptr, vec<tree> *vec_offset)\n {\n   gimple_seq stmts = NULL;\n@@ -2978,9 +2977,13 @@ vect_get_gather_scatter_ops (loop_vec_info loop_vinfo,\n   if (slp_node)\n     vect_get_slp_defs (SLP_TREE_CHILDREN (slp_node)[0], vec_offset);\n   else\n-    vect_get_vec_defs_for_operand (loop_vinfo, stmt_info, ncopies,\n-\t\t\t\t   gs_info->offset, vec_offset,\n-\t\t\t\t   gs_info->offset_vectype);\n+    {\n+      unsigned ncopies\n+\t= vect_get_num_copies (loop_vinfo, gs_info->offset_vectype);\n+      vect_get_vec_defs_for_operand (loop_vinfo, stmt_info, ncopies,\n+\t\t\t\t     gs_info->offset, vec_offset,\n+\t\t\t\t     gs_info->offset_vectype);\n+    }\n }\n \n /* Prepare to implement a grouped or strided load or store using\n@@ -8149,8 +8152,8 @@ vectorizable_store (vec_info *vinfo,\n \t  else if (STMT_VINFO_GATHER_SCATTER_P (stmt_info))\n \t    {\n \t      vect_get_gather_scatter_ops (loop_vinfo, loop, stmt_info,\n-\t\t\t\t\t   slp_node, ncopies, &gs_info,\n-\t\t\t\t\t   &dataref_ptr, &vec_offsets);\n+\t\t\t\t\t   slp_node, &gs_info, &dataref_ptr,\n+\t\t\t\t\t   &vec_offsets);\n \t      vec_offset = vec_offsets[0];\n \t    }\n \t  else\n@@ -9454,8 +9457,8 @@ vectorizable_load (vec_info *vinfo,\n \t  else if (STMT_VINFO_GATHER_SCATTER_P (stmt_info))\n \t    {\n \t      vect_get_gather_scatter_ops (loop_vinfo, loop, stmt_info,\n-\t\t\t\t\t   slp_node, ncopies, &gs_info,\n-\t\t\t\t\t   &dataref_ptr, &vec_offsets);\n+\t\t\t\t\t   slp_node, &gs_info, &dataref_ptr,\n+\t\t\t\t\t   &vec_offsets);\n \t    }\n \t  else\n \t    dataref_ptr"}]}