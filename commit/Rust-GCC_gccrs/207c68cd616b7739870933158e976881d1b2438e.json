{"sha": "207c68cd616b7739870933158e976881d1b2438e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA3YzY4Y2Q2MTZiNzczOTg3MDkzMzE1OGU5NzY4ODFkMWIyNDM4ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-08-08T12:55:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-08-08T12:55:31Z"}, "message": "lto-streamer.h (struct lto_input_block): Make it a class with a constructor.\n\n2014-08-08  Richard Biener  <rguenther@suse.de>\n\n\t* lto-streamer.h (struct lto_input_block): Make it a class\n\twith a constructor.\n\t(LTO_INIT_INPUT_BLOCK, LTO_INIT_INPUT_BLOCK_PTR): Remove.\n\t(struct lto_function_header, struct lto_simple_header,\n\tstruct lto_simple_header_with_strings,\n\tstruct lto_decl_header, struct lto_function_header): Make\n\ta simple inheritance hieararchy.  Remove unused fields.\n\t(struct lto_asm_header): Remove.\n\t* lto-streamer-out.c (produce_asm): Adjust.\n\t(lto_output_toplevel_asms): Likewise.\n\t(produce_asm_for_decls): Likewise.\n\t* lto-section-out.c (lto_destroy_simple_output_block): Likewise.\n\t* data-streamer-in.c (string_for_index): Likewise.\n\t* ipa-inline-analysis.c (inline_read_section): Likewise.\n\t* ipa-prop.c (ipa_prop_read_section): Likewise.\n\t(read_replacements_section): Likewise.\n\t* lto-cgraph.c (input_cgraph_opt_section): Likewise.\n\t* lto-section-in.c (lto_create_simple_input_block): Likewise.\n\t(lto_destroy_simple_input_block): Likewise.\n\t* lto-streamer-in.c (lto_read_body_or_constructor): Likewise.\n\t(lto_input_toplevel_asms): Likewise.\n\n\tlto/\n\t* lto.c (lto_read_decls): Adjust for lto_input_block changes.\n\nFrom-SVN: r213759", "tree": {"sha": "37a2deb9dfd8703ab2605b7c559b3f67621fb4ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37a2deb9dfd8703ab2605b7c559b3f67621fb4ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/207c68cd616b7739870933158e976881d1b2438e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/207c68cd616b7739870933158e976881d1b2438e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/207c68cd616b7739870933158e976881d1b2438e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/207c68cd616b7739870933158e976881d1b2438e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "07165dd72cbaa49420a6033b7a3d5e1e8a1c8a5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07165dd72cbaa49420a6033b7a3d5e1e8a1c8a5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07165dd72cbaa49420a6033b7a3d5e1e8a1c8a5b"}], "stats": {"total": 219, "additions": 82, "deletions": 137}, "files": [{"sha": "1c0404a775e6648837ecf5942abd8148ff6a2e41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207c68cd616b7739870933158e976881d1b2438e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207c68cd616b7739870933158e976881d1b2438e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=207c68cd616b7739870933158e976881d1b2438e", "patch": "@@ -1,3 +1,27 @@\n+2014-08-08  Richard Biener  <rguenther@suse.de>\n+\n+\t* lto-streamer.h (struct lto_input_block): Make it a class\n+\twith a constructor.\n+\t(LTO_INIT_INPUT_BLOCK, LTO_INIT_INPUT_BLOCK_PTR): Remove.\n+\t(struct lto_function_header, struct lto_simple_header,\n+\tstruct lto_simple_header_with_strings,\n+\tstruct lto_decl_header, struct lto_function_header): Make\n+\ta simple inheritance hieararchy.  Remove unused fields.\n+\t(struct lto_asm_header): Remove.\n+\t* lto-streamer-out.c (produce_asm): Adjust.\n+\t(lto_output_toplevel_asms): Likewise.\n+\t(produce_asm_for_decls): Likewise.\n+\t* lto-section-out.c (lto_destroy_simple_output_block): Likewise.\n+\t* data-streamer-in.c (string_for_index): Likewise.\n+\t* ipa-inline-analysis.c (inline_read_section): Likewise.\n+\t* ipa-prop.c (ipa_prop_read_section): Likewise.\n+\t(read_replacements_section): Likewise.\n+\t* lto-cgraph.c (input_cgraph_opt_section): Likewise.\n+\t* lto-section-in.c (lto_create_simple_input_block): Likewise.\n+\t(lto_destroy_simple_input_block): Likewise.\n+\t* lto-streamer-in.c (lto_read_body_or_constructor): Likewise.\n+\t(lto_input_toplevel_asms): Likewise.\n+\n 2014-08-08  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "6e65cf57841c58ee582e885e14fc3f1eb5bf798d", "filename": "gcc/data-streamer-in.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207c68cd616b7739870933158e976881d1b2438e/gcc%2Fdata-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207c68cd616b7739870933158e976881d1b2438e/gcc%2Fdata-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdata-streamer-in.c?ref=207c68cd616b7739870933158e976881d1b2438e", "patch": "@@ -39,7 +39,6 @@ along with GCC; see the file COPYING3.  If not see\n const char *\n string_for_index (struct data_in *data_in, unsigned int loc, unsigned int *rlen)\n {\n-  struct lto_input_block str_tab;\n   unsigned int len;\n   const char *result;\n \n@@ -50,8 +49,7 @@ string_for_index (struct data_in *data_in, unsigned int loc, unsigned int *rlen)\n     }\n \n   /* Get the string stored at location LOC in DATA_IN->STRINGS.  */\n-  LTO_INIT_INPUT_BLOCK (str_tab, data_in->strings, loc - 1,\n-\t\t\tdata_in->strings_len);\n+  lto_input_block str_tab (data_in->strings, loc - 1, data_in->strings_len);\n   len = streamer_read_uhwi (&str_tab);\n   *rlen = len;\n "}, {"sha": "02deeb47a3826206e142837541ef7eab6ad57110", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207c68cd616b7739870933158e976881d1b2438e/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207c68cd616b7739870933158e976881d1b2438e/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=207c68cd616b7739870933158e976881d1b2438e", "patch": "@@ -4086,12 +4086,10 @@ inline_read_section (struct lto_file_decl_data *file_data, const char *data,\n   const int main_offset = cfg_offset + header->cfg_size;\n   const int string_offset = main_offset + header->main_size;\n   struct data_in *data_in;\n-  struct lto_input_block ib;\n   unsigned int i, count2, j;\n   unsigned int f_count;\n \n-  LTO_INIT_INPUT_BLOCK (ib, (const char *) data + main_offset, 0,\n-\t\t\theader->main_size);\n+  lto_input_block ib ((const char *) data + main_offset, header->main_size);\n \n   data_in =\n     lto_data_in_create (file_data, (const char *) data + string_offset,"}, {"sha": "612f22768449fa5b47dd377c9f412d1dd59eb3a2", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207c68cd616b7739870933158e976881d1b2438e/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207c68cd616b7739870933158e976881d1b2438e/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=207c68cd616b7739870933158e976881d1b2438e", "patch": "@@ -4930,12 +4930,11 @@ ipa_prop_read_section (struct lto_file_decl_data *file_data, const char *data,\n   const int main_offset = cfg_offset + header->cfg_size;\n   const int string_offset = main_offset + header->main_size;\n   struct data_in *data_in;\n-  struct lto_input_block ib_main;\n   unsigned int i;\n   unsigned int count;\n \n-  LTO_INIT_INPUT_BLOCK (ib_main, (const char *) data + main_offset, 0,\n-\t\t\theader->main_size);\n+  lto_input_block ib_main ((const char *) data + main_offset,\n+\t\t\t   header->main_size);\n \n   data_in =\n     lto_data_in_create (file_data, (const char *) data + string_offset,\n@@ -5108,12 +5107,11 @@ read_replacements_section (struct lto_file_decl_data *file_data,\n   const int main_offset = cfg_offset + header->cfg_size;\n   const int string_offset = main_offset + header->main_size;\n   struct data_in *data_in;\n-  struct lto_input_block ib_main;\n   unsigned int i;\n   unsigned int count;\n \n-  LTO_INIT_INPUT_BLOCK (ib_main, (const char *) data + main_offset, 0,\n-\t\t\theader->main_size);\n+  lto_input_block ib_main ((const char *) data + main_offset,\n+\t\t\t   header->main_size);\n \n   data_in = lto_data_in_create (file_data, (const char *) data + string_offset,\n \t\t\t\theader->string_size, vNULL);"}, {"sha": "120f924ff354817d070315febeb2f7ce25e3f09a", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207c68cd616b7739870933158e976881d1b2438e/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207c68cd616b7739870933158e976881d1b2438e/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=207c68cd616b7739870933158e976881d1b2438e", "patch": "@@ -1896,12 +1896,11 @@ input_cgraph_opt_section (struct lto_file_decl_data *file_data,\n   const int main_offset = cfg_offset + header->cfg_size;\n   const int string_offset = main_offset + header->main_size;\n   struct data_in *data_in;\n-  struct lto_input_block ib_main;\n   unsigned int i;\n   unsigned int count;\n \n-  LTO_INIT_INPUT_BLOCK (ib_main, (const char *) data + main_offset, 0,\n-\t\t\theader->main_size);\n+  lto_input_block ib_main ((const char *) data + main_offset,\n+\t\t\t   header->main_size);\n \n   data_in =\n     lto_data_in_create (file_data, (const char *) data + string_offset,"}, {"sha": "5623706be3ed6b9971a8cc9faf1765d4cb25408f", "filename": "gcc/lto-section-in.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207c68cd616b7739870933158e976881d1b2438e/gcc%2Flto-section-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207c68cd616b7739870933158e976881d1b2438e/gcc%2Flto-section-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-section-in.c?ref=207c68cd616b7739870933158e976881d1b2438e", "patch": "@@ -227,19 +227,13 @@ lto_create_simple_input_block (struct lto_file_decl_data *file_data,\n   const struct lto_simple_header * header\n     = (const struct lto_simple_header *) data;\n \n-  struct lto_input_block* ib_main;\n   int main_offset = sizeof (struct lto_simple_header);\n \n   if (!data)\n     return NULL;\n \n-  ib_main = XNEW (struct lto_input_block);\n-\n   *datar = data;\n-  LTO_INIT_INPUT_BLOCK_PTR (ib_main, data + main_offset,\n-\t\t\t    0, header->main_size);\n-\n-  return ib_main;\n+  return new lto_input_block (data + main_offset, header->main_size);\n }\n \n \n@@ -255,7 +249,7 @@ lto_destroy_simple_input_block (struct lto_file_decl_data *file_data,\n \t\t\t\tstruct lto_input_block *ib,\n \t\t\t\tconst char *data, size_t len)\n {\n-  free (ib);\n+  delete ib;\n   lto_free_section_data (file_data, section_type, NULL, data, len);\n }\n "}, {"sha": "d9dce9322fc726c9b7da2d84c1f3e619f107b819", "filename": "gcc/lto-section-out.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207c68cd616b7739870933158e976881d1b2438e/gcc%2Flto-section-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207c68cd616b7739870933158e976881d1b2438e/gcc%2Flto-section-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-section-out.c?ref=207c68cd616b7739870933158e976881d1b2438e", "patch": "@@ -278,9 +278,8 @@ lto_destroy_simple_output_block (struct lto_simple_output_block *ob)\n   /* Write the header which says how to decode the pieces of the\n      t.  */\n   memset (&header, 0, sizeof (struct lto_simple_header));\n-  header.lto_header.major_version = LTO_major_version;\n-  header.lto_header.minor_version = LTO_minor_version;\n-  header.compressed_size = 0;\n+  header.major_version = LTO_major_version;\n+  header.minor_version = LTO_minor_version;\n   header.main_size = ob->main_stream->total_size;\n   lto_write_data (&header, sizeof header);\n "}, {"sha": "391115778b9089a02e29fa0d4b59af26e1ff071c", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 8, "deletions": 24, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207c68cd616b7739870933158e976881d1b2438e/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207c68cd616b7739870933158e976881d1b2438e/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=207c68cd616b7739870933158e976881d1b2438e", "patch": "@@ -1054,8 +1054,6 @@ lto_read_body_or_constructor (struct lto_file_decl_data *file_data, struct symta\n   int cfg_offset;\n   int main_offset;\n   int string_offset;\n-  struct lto_input_block ib_cfg;\n-  struct lto_input_block ib_main;\n   tree fn_decl = node->decl;\n \n   header = (const struct lto_function_header *) data;\n@@ -1064,26 +1062,11 @@ lto_read_body_or_constructor (struct lto_file_decl_data *file_data, struct symta\n       cfg_offset = sizeof (struct lto_function_header);\n       main_offset = cfg_offset + header->cfg_size;\n       string_offset = main_offset + header->main_size;\n-\n-      LTO_INIT_INPUT_BLOCK (ib_cfg,\n-\t\t\t    data + cfg_offset,\n-\t\t\t    0,\n-\t\t\t    header->cfg_size);\n-\n-      LTO_INIT_INPUT_BLOCK (ib_main,\n-\t\t\t    data + main_offset,\n-\t\t\t    0,\n-\t\t\t    header->main_size);\n     }\n   else\n     {\n       main_offset = sizeof (struct lto_function_header);\n       string_offset = main_offset + header->main_size;\n-\n-      LTO_INIT_INPUT_BLOCK (ib_main,\n-\t\t\t    data + main_offset,\n-\t\t\t    0,\n-\t\t\t    header->main_size);\n     }\n \n   data_in = lto_data_in_create (file_data, data + string_offset,\n@@ -1104,8 +1087,12 @@ lto_read_body_or_constructor (struct lto_file_decl_data *file_data, struct symta\n \n       /* Set up the struct function.  */\n       from = data_in->reader_cache->nodes.length ();\n+      lto_input_block ib_main (data + main_offset, header->main_size);\n       if (TREE_CODE (node->decl) == FUNCTION_DECL)\n-        input_function (fn_decl, data_in, &ib_main, &ib_cfg);\n+\t{\n+\t  lto_input_block ib_cfg (data + cfg_offset, header->cfg_size);\n+\t  input_function (fn_decl, data_in, &ib_main, &ib_cfg);\n+\t}\n       else\n         input_constructor (fn_decl, data_in, &ib_main);\n       /* And fixup types we streamed locally.  */\n@@ -1357,21 +1344,18 @@ lto_input_toplevel_asms (struct lto_file_decl_data *file_data, int order_base)\n   size_t len;\n   const char *data = lto_get_section_data (file_data, LTO_section_asm,\n \t\t\t\t\t   NULL, &len);\n-  const struct lto_asm_header *header = (const struct lto_asm_header *) data;\n+  const struct lto_simple_header_with_strings *header\n+    = (const struct lto_simple_header_with_strings *) data;\n   int string_offset;\n   struct data_in *data_in;\n-  struct lto_input_block ib;\n   tree str;\n \n   if (! data)\n     return;\n \n   string_offset = sizeof (*header) + header->main_size;\n \n-  LTO_INIT_INPUT_BLOCK (ib,\n-\t\t\tdata + sizeof (*header),\n-\t\t\t0,\n-\t\t\theader->main_size);\n+  lto_input_block ib (data + sizeof (*header), header->main_size);\n \n   data_in = lto_data_in_create (file_data, data + string_offset,\n \t\t\t      header->string_size, vNULL);"}, {"sha": "029b662c5f23767d3552e97aba9e32a2c55430c4", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207c68cd616b7739870933158e976881d1b2438e/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207c68cd616b7739870933158e976881d1b2438e/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=207c68cd616b7739870933158e976881d1b2438e", "patch": "@@ -1886,10 +1886,8 @@ produce_asm (struct output_block *ob, tree fn)\n   memset (&header, 0, sizeof (struct lto_function_header));\n \n   /* Write the header.  */\n-  header.lto_header.major_version = LTO_major_version;\n-  header.lto_header.minor_version = LTO_minor_version;\n-\n-  header.compressed_size = 0;\n+  header.major_version = LTO_major_version;\n+  header.minor_version = LTO_minor_version;\n \n   if (section_type == LTO_section_function_body)\n     header.cfg_size = ob->cfg_stream->total_size;\n@@ -2097,7 +2095,7 @@ lto_output_toplevel_asms (void)\n   struct output_block *ob;\n   struct asm_node *can;\n   char *section_name;\n-  struct lto_asm_header header;\n+  struct lto_simple_header_with_strings header;\n \n   if (! asm_nodes)\n     return;\n@@ -2123,8 +2121,8 @@ lto_output_toplevel_asms (void)\n   memset (&header, 0, sizeof (header));\n \n   /* Write the header.  */\n-  header.lto_header.major_version = LTO_major_version;\n-  header.lto_header.minor_version = LTO_minor_version;\n+  header.major_version = LTO_major_version;\n+  header.minor_version = LTO_minor_version;\n \n   header.main_size = ob->main_stream->total_size;\n   header.string_size = ob->string_stream->total_size;\n@@ -2657,8 +2655,8 @@ produce_asm_for_decls (void)\n       lto_output_decl_state_streams (ob, fn_out_state);\n     }\n \n-  header.lto_header.major_version = LTO_major_version;\n-  header.lto_header.minor_version = LTO_minor_version;\n+  header.major_version = LTO_major_version;\n+  header.minor_version = LTO_minor_version;\n \n   /* Currently not used.  This field would allow us to preallocate\n      the globals vector, so that it need not be resized as it is extended.  */"}, {"sha": "67bbfe0ffdede1b29bdbc6a70f2b0bf34641430d", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 25, "deletions": 75, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207c68cd616b7739870933158e976881d1b2438e/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207c68cd616b7739870933158e976881d1b2438e/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=207c68cd616b7739870933158e976881d1b2438e", "patch": "@@ -307,27 +307,21 @@ typedef void (lto_free_section_data_f) (struct lto_file_decl_data *,\n \t\t\t\t\tsize_t);\n \n /* Structure used as buffer for reading an LTO file.  */\n-struct lto_input_block\n+class lto_input_block\n {\n+public:\n+  /* Special constructor for the string table, it abuses this to\n+     do random access but use the uhwi decoder.  */\n+  lto_input_block (const char *data_, unsigned int p_, unsigned int len_)\n+      : data (data_), p (p_), len (len_) {}\n+  lto_input_block (const char *data_, unsigned int len_)\n+      : data (data_), p (0), len (len_) {}\n+\n   const char *data;\n   unsigned int p;\n   unsigned int len;\n };\n \n-#define LTO_INIT_INPUT_BLOCK(BASE,D,P,L)   \\\n-  do {                                     \\\n-    BASE.data = D;                         \\\n-    BASE.p = P;                            \\\n-    BASE.len = L;                          \\\n-  } while (0)\n-\n-#define LTO_INIT_INPUT_BLOCK_PTR(BASE,D,P,L) \\\n-  do {                                       \\\n-    BASE->data = D;                          \\\n-    BASE->p = P;                             \\\n-    BASE->len = L;                           \\\n-  } while (0)\n-\n \n /* The is the first part of the record for a function or constructor\n    in the .o file.  */\n@@ -337,69 +331,39 @@ struct lto_header\n   int16_t minor_version;\n };\n \n-/* The header for a function body.  */\n-struct lto_function_header\n+/* The is the first part of the record in an LTO file for many of the\n+   IPA passes.  */\n+struct lto_simple_header : lto_header\n {\n-  /* The header for all types of sections. */\n-  struct lto_header lto_header;\n-\n-  /* Number of labels with names.  */\n-  int32_t num_named_labels;\n-\n-  /* Number of labels without names.  */\n-  int32_t num_unnamed_labels;\n-\n-  /* Size compressed or 0 if not compressed.  */\n-  int32_t compressed_size;\n-\n-  /* Size of names for named labels.  */\n-  int32_t named_label_size;\n-\n-  /* Size of the cfg.  */\n-  int32_t cfg_size;\n+  /* Size of main gimple body of function.  */\n+  int32_t main_size;\n+};\n \n+struct lto_simple_header_with_strings : lto_simple_header\n+{\n   /* Size of main gimple body of function.  */\n   int32_t main_size;\n \n   /* Size of the string table.  */\n   int32_t string_size;\n };\n \n+/* The header for a function body.  */\n+struct lto_function_header : lto_simple_header_with_strings\n+{\n+  /* Size of the cfg.  */\n+  int32_t cfg_size;\n+};\n+\n \n /* Structure describing a symbol section.  */\n-struct lto_decl_header\n+struct lto_decl_header : lto_simple_header_with_strings\n {\n-  /* The header for all types of sections. */\n-  struct lto_header lto_header;\n-\n   /* Size of region for decl state. */\n   int32_t decl_state_size;\n \n   /* Number of nodes in globals stream.  */\n   int32_t num_nodes;\n-\n-  /* Size of region for expressions, decls, types, etc. */\n-  int32_t main_size;\n-\n-  /* Size of the string table.  */\n-  int32_t string_size;\n-};\n-\n-\n-/* Structure describing top level asm()s.  */\n-struct lto_asm_header\n-{\n-  /* The header for all types of sections. */\n-  struct lto_header lto_header;\n-\n-  /* Size compressed or 0 if not compressed.  */\n-  int32_t compressed_size;\n-\n-  /* Size of region for expressions, decls, types, etc. */\n-  int32_t main_size;\n-\n-  /* Size of the string table.  */\n-  int32_t string_size;\n };\n \n \n@@ -595,20 +559,6 @@ struct lto_output_stream\n   unsigned int total_size;\n };\n \n-/* The is the first part of the record in an LTO file for many of the\n-   IPA passes.  */\n-struct lto_simple_header\n-{\n-  /* The header for all types of sections. */\n-  struct lto_header lto_header;\n-\n-  /* Size of main gimple body of function.  */\n-  int32_t main_size;\n-\n-  /* Size of main stream when compressed.  */\n-  int32_t compressed_size;\n-};\n-\n /* A simple output block.  This can be used for simple IPA passes that\n    do not need more than one stream.  */\n struct lto_simple_output_block"}, {"sha": "18f483cada5ad9d5e1485ccac2e1c8299be3f87e", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207c68cd616b7739870933158e976881d1b2438e/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207c68cd616b7739870933158e976881d1b2438e/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=207c68cd616b7739870933158e976881d1b2438e", "patch": "@@ -1,3 +1,7 @@\n+2014-08-08  Richard Biener  <rguenther@suse.de>\n+\n+\t* lto.c (lto_read_decls): Adjust for lto_input_block changes.\n+\n 2014-08-08  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR lto/62032"}, {"sha": "d211c8043a9da0f2d979605c72298fc8e3e3e703", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207c68cd616b7739870933158e976881d1b2438e/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207c68cd616b7739870933158e976881d1b2438e/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=207c68cd616b7739870933158e976881d1b2438e", "patch": "@@ -1844,14 +1844,13 @@ lto_read_decls (struct lto_file_decl_data *decl_data, const void *data,\n   const int decl_offset = sizeof (struct lto_decl_header);\n   const int main_offset = decl_offset + header->decl_state_size;\n   const int string_offset = main_offset + header->main_size;\n-  struct lto_input_block ib_main;\n   struct data_in *data_in;\n   unsigned int i;\n   const uint32_t *data_ptr, *data_end;\n   uint32_t num_decl_states;\n \n-  LTO_INIT_INPUT_BLOCK (ib_main, (const char *) data + main_offset, 0,\n-\t\t\theader->main_size);\n+  lto_input_block ib_main ((const char *) data + main_offset,\n+\t\t\t   header->main_size);\n \n   data_in = lto_data_in_create (decl_data, (const char *) data + string_offset,\n \t\t\t\theader->string_size, resolutions);"}]}