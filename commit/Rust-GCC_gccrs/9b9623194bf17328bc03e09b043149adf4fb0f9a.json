{"sha": "9b9623194bf17328bc03e09b043149adf4fb0f9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI5NjIzMTk0YmYxNzMyOGJjMDNlMDliMDQzMTQ5YWRmNGZiMGY5YQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-01-04T08:19:51Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2020-01-04T08:19:51Z"}, "message": "Fortran] PR91640 \u2013 Fix call to contiguous dummy\n\n        PR fortran/91640\n        * trans-expr.c (gfc_conv_procedure_call): Avoid copy-out for nonvariable\n        arguments to contiguous dummy args.  Avoid re-checking whether fsym is\n        NULL.\n\n        PR fortran/91640\n        * gfortran.dg/contiguous_10.f90: New.\n\nFrom-SVN: r279879", "tree": {"sha": "1247970c3e2684bee6845dcbdeb5ee4a097181db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1247970c3e2684bee6845dcbdeb5ee4a097181db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b9623194bf17328bc03e09b043149adf4fb0f9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b9623194bf17328bc03e09b043149adf4fb0f9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b9623194bf17328bc03e09b043149adf4fb0f9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b9623194bf17328bc03e09b043149adf4fb0f9a/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c0c4eaae49682e8026e1f42087f58e22d2d5c294", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0c4eaae49682e8026e1f42087f58e22d2d5c294", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0c4eaae49682e8026e1f42087f58e22d2d5c294"}], "stats": {"total": 99, "additions": 90, "deletions": 9}, "files": [{"sha": "a09d370f0bd744a8f4a1fc7ce0f16950feed58ff", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b9623194bf17328bc03e09b043149adf4fb0f9a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b9623194bf17328bc03e09b043149adf4fb0f9a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9b9623194bf17328bc03e09b043149adf4fb0f9a", "patch": "@@ -1,3 +1,10 @@\n+2020-01-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/91640\n+\t* trans-expr.c (gfc_conv_procedure_call): Avoid copy-out for nonvariable\n+\targuments to contiguous dummy args.  Avoid re-checking whether fsym is\n+\tNULL.\n+\n 2020-01-03  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* trans-openmp.c (gfc_omp_check_optional_argument): Always return a"}, {"sha": "e1c0fb271debcdb0a4ee78905480866c28df3a78", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b9623194bf17328bc03e09b043149adf4fb0f9a/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b9623194bf17328bc03e09b043149adf4fb0f9a/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=9b9623194bf17328bc03e09b043149adf4fb0f9a", "patch": "@@ -6178,7 +6178,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t\t\tfsym && fsym->attr.pointer);\n \n \t      else if (gfc_is_class_array_ref (e, NULL)\n-\t\t\t && fsym && fsym->ts.type == BT_DERIVED)\n+\t\t       && fsym && fsym->ts.type == BT_DERIVED)\n \t\t/* The actual argument is a component reference to an\n \t\t   array of derived types.  In this case, the argument\n \t\t   is converted to a temporary, which is passed and then\n@@ -6187,26 +6187,26 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t   the same as the declared type, copy-in/copy-out does\n \t\t   not occur.  */\n \t\tgfc_conv_subref_array_arg (&parmse, e, nodesc_arg,\n-\t\t\t\tfsym ? fsym->attr.intent : INTENT_INOUT,\n-\t\t\t\tfsym && fsym->attr.pointer);\n+\t\t\t\t\t   fsym->attr.intent,\n+\t\t\t\t\t   fsym->attr.pointer);\n \n \t      else if (gfc_is_class_array_function (e)\n-\t\t\t && fsym && fsym->ts.type == BT_DERIVED)\n+\t\t       && fsym && fsym->ts.type == BT_DERIVED)\n \t\t/* See previous comment.  For function actual argument,\n \t\t   the write out is not needed so the intent is set as\n \t\t   intent in.  */\n \t\t{\n \t\t  e->must_finalize = 1;\n \t\t  gfc_conv_subref_array_arg (&parmse, e, nodesc_arg,\n-\t\t\t\t\t     INTENT_IN,\n-\t\t\t\t\t     fsym && fsym->attr.pointer);\n+\t\t\t\t\t     INTENT_IN, fsym->attr.pointer);\n \t\t}\n \t      else if (fsym && fsym->attr.contiguous\n-\t\t       && !gfc_is_simply_contiguous (e, false, true))\n+\t\t       && !gfc_is_simply_contiguous (e, false, true)\n+\t\t       && gfc_expr_is_variable (e))\n \t\t{\n \t\t  gfc_conv_subref_array_arg (&parmse, e, nodesc_arg,\n-\t\t\t\tfsym ? fsym->attr.intent : INTENT_INOUT,\n-\t\t\t\tfsym && fsym->attr.pointer);\n+\t\t\t\t\t     fsym->attr.intent,\n+\t\t\t\t\t     fsym->attr.pointer);\n \t\t}\n \t      else\n \t\tgfc_conv_array_parameter (&parmse, e, nodesc_arg, fsym,"}, {"sha": "18f14799d7d10ab3d7d4d860ea1ddce06a3537ba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b9623194bf17328bc03e09b043149adf4fb0f9a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b9623194bf17328bc03e09b043149adf4fb0f9a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9b9623194bf17328bc03e09b043149adf4fb0f9a", "patch": "@@ -1,3 +1,8 @@\n+2020-01-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/91640\n+\t* gfortran.dg/contiguous_10.f90: New.\n+\n 2020-01-03  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* gcc.target/i386/avx512bw-pr92686-vpcmp-intelasm-1.c: Require"}, {"sha": "82b8ed54f5bd83e8415674238913a193558b9592", "filename": "gcc/testsuite/gfortran.dg/contiguous_10.f90", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b9623194bf17328bc03e09b043149adf4fb0f9a/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontiguous_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b9623194bf17328bc03e09b043149adf4fb0f9a/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontiguous_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontiguous_10.f90?ref=9b9623194bf17328bc03e09b043149adf4fb0f9a", "patch": "@@ -0,0 +1,69 @@\n+! { dg-do run }\n+! { dg-additional-options \"-fdump-tree-original\" }\n+!\n+! PR fortran/91640\n+!\n+! Based on G. Steinmetz's test case\n+!\n+program p\n+   implicit none (type, external)\n+   real, target :: z(3) = 1.0\n+   real :: res(3)\n+   real, pointer :: xxx(:)\n+\n+   res = 42.0\n+   call sub (-z, res)\n+   if (any (abs (res - (-1.0)) > epsilon(res))) stop 1\n+   if (any (abs (z - 1.0) > epsilon(z))) stop 2\n+\n+   res = 43.0\n+   call sub (z*2.0, res)\n+   if (any (abs (res - 2.0) > epsilon(res))) stop 3\n+   if (any (abs (z - 1.0) > epsilon(z))) stop 4\n+\n+   res = 44.0\n+   call sub(get_var(), res)\n+   if (any (abs (res - 1.0) > epsilon(res))) stop 5\n+   if (any (abs (z - 1.0) > epsilon(z))) stop 6\n+\n+   call double(get_var())\n+   if (any (abs (z - 2.0) > epsilon(z))) stop 7\n+\n+   call double(get_var_cont())\n+   if (any (abs (z - 4.0) > epsilon(z))) stop 8\n+\n+   ! For cross check for copy-out:\n+   xxx => z\n+   if (any (abs (z - 4.0) > epsilon(z))) stop 10\n+   if (any (abs (xxx - 4.0) > epsilon(z))) stop 11\n+   call double (xxx)\n+   if (any (abs (z - 8.0) > epsilon(z))) stop 12\n+   if (any (abs (xxx - 8.0) > epsilon(z))) stop 13\n+\n+contains\n+   subroutine sub (x, res)\n+      real, contiguous :: x(:)\n+      real :: res(3)\n+      res = x\n+   end\n+   subroutine double (x)\n+      real, contiguous :: x(:)\n+      x = x * 2.0\n+   end\n+   function get_var()\n+     real, pointer :: get_var(:)\n+     get_var => z\n+   end\n+   function get_var_cont()\n+     real, pointer, contiguous :: get_var_cont(:)\n+     get_var_cont => z\n+   end\n+end\n+\n+! only 'xxx' should have a copy out:\n+! { dg-final { scan-tree-dump-times \"D\\\\.\\[0-9\\].* = .*atmp\\\\.\\[0-9\\]*\\\\.data\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"D\\\\.\\[0-9\\].*xxx\\\\.span.* = .*atmp\\\\.\\[0-9\\]*\\\\.data\" 1 \"original\" } }\n+\n+! Only once 'z... = ' \u2013 for:   static real(kind=4) z[3] = {[0 ... 2]=1.0e+0};\n+! but don't match '(si)ze'\n+! { dg-final { scan-tree-dump-times \"z\\[^e\\].* = \" 1 \"original\" } }"}]}