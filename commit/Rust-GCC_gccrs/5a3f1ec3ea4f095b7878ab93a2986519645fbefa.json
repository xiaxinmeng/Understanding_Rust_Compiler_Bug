{"sha": "5a3f1ec3ea4f095b7878ab93a2986519645fbefa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEzZjFlYzNlYTRmMDk1Yjc4NzhhYjkzYTI5ODY1MTk2NDVmYmVmYQ==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1995-12-27T22:28:33Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1995-12-27T22:28:33Z"}, "message": "fix-header.c: Add EXIT_FAILURE and EXIT_SUCCESS to stdlib.h i missing.\n\n* fix-header.c:  Add EXIT_FAILURE and EXIT_SUCCESS to stdlib.h i\nmissing.  Re-write how errno is added to be done similarly\n(XOPEN_SYMBOL, XOPEN_EXTENDED_SYMBOL):  New macros, to mark XPG4 functions.\n(std_include_table):  Add a number of functions (mostly XPG4).\n\nFrom-SVN: r10888", "tree": {"sha": "c00234006af18d3f2c102af6d3350786d666ecda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c00234006af18d3f2c102af6d3350786d666ecda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a3f1ec3ea4f095b7878ab93a2986519645fbefa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a3f1ec3ea4f095b7878ab93a2986519645fbefa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a3f1ec3ea4f095b7878ab93a2986519645fbefa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a3f1ec3ea4f095b7878ab93a2986519645fbefa/comments", "author": null, "committer": null, "parents": [{"sha": "4c0c634c6467efd048ec5a0c9b4b2e1c3a0cf4c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c0c634c6467efd048ec5a0c9b4b2e1c3a0cf4c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c0c634c6467efd048ec5a0c9b4b2e1c3a0cf4c2"}], "stats": {"total": 90, "additions": 78, "deletions": 12}, "files": [{"sha": "2a51f53e13867a62658d0ca61e2015e1d20e54ac", "filename": "gcc/fix-header.c", "status": "modified", "additions": 78, "deletions": 12, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3f1ec3ea4f095b7878ab93a2986519645fbefa/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3f1ec3ea4f095b7878ab93a2986519645fbefa/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=5a3f1ec3ea4f095b7878ab93a2986519645fbefa", "patch": "@@ -97,7 +97,6 @@ int warnings = 0;\n #if ADD_MISSING_EXTERN_C\n int missing_extern_C_count = 0;\n #endif\n-int missing_errno = 0;\n \n #include \"xsys-protos.h\"\n \n@@ -127,6 +126,7 @@ enum special_file\n   no_special,\n   errno_h,\n   stdio_h,\n+  stdlib_h,\n   sys_stat_h\n };\n \n@@ -141,12 +141,17 @@ typedef int symbol_flags;\n /* Used to mark names defined in the ANSI/ISO C standard. */\n #define ANSI_SYMBOL 1\n \n-  /* Used to mark names defined in the Posix.1 or Posix.2 standard. */\n+/* Used to mark names defined in the Posix.1 or Posix.2 standard. */\n #define POSIX1_SYMBOL 2\n #define POSIX2_SYMBOL 4\n \n+/* Used to mark names defined in X/Open Portability Guide. */\n+#define XOPEN_SYMBOL 8\n+/* Used to mark names defined in X/Open UNIX Extensions. */\n+#define XOPEN_EXTENDED_SYMBOL 16\n+\n /* Used to indicate names that are not functions */\n-#define MACRO_SYMBOL 8\n+#define MACRO_SYMBOL 512\n \n struct symbol_list {\n   symbol_flags flags;\n@@ -246,18 +251,38 @@ tmpnam\\0ungetc\\0\" },\n       \"abort\\0abs\\0atexit\\0atof\\0atoi\\0atol\\0bsearch\\0calloc\\0\\\n exit\\0free\\0getenv\\0labs\\0malloc\\0putenv\\0qsort\\0rand\\0realloc\\0\\\n srand\\0strtod\\0strtol\\0strtoul\\0system\\0\" },\n+  { CONTINUED, ANSI_SYMBOL|MACRO_SYMBOL, \"EXIT_FAILURE\\0EXIT_SUCCESS\\0\" },\n \n   { \"string.h\", ANSI_SYMBOL, \"memchr\\0memcmp\\0memcpy\\0memmove\\0memset\\0\\\n strcat\\0strchr\\0strcmp\\0strcoll\\0strcpy\\0strcspn\\0strerror\\0\\\n strlen\\0strncat\\0strncmp\\0strncpy\\0strpbrk\\0strrchr\\0strspn\\0strstr\\0\\\n strtok\\0strxfrm\\0\" },\n /* Should perhaps also add NULL and size_t */\n \n+  { \"strings.h\", XOPEN_EXTENDED_SYMBOL,\n+      \"bcmp\\0bcopy\\0bzero\\0ffs\\0index\\0rindex\\0strcasecmp\\0strncasecmp\\0\" },\n+\n+  { \"strops.h\", XOPEN_EXTENDED_SYMBOL, \"ioctl\\0\" },\n+\n+  /* Actually, XPG4 does not seem to have <sys/ioctl.h>, but defines\n+     ioctl in <strops.h>.  However, many systems have it is sys/ioctl.h,\n+     and many systems do have <sys/ioctl.h> but not <strops.h>. */\n+  { \"sys/ioctl.h\", XOPEN_EXTENDED_SYMBOL, \"ioctl\\0\" },\n+\n+  { \"sys/socket.h\", XOPEN_EXTENDED_SYMBOL, \"socket\\0\" },\n+\n   { \"sys/stat.h\", POSIX1_SYMBOL,\n       \"chmod\\0fstat\\0mkdir\\0mkfifo\\0stat\\0lstat\\0umask\\0\" },\n   { CONTINUED, POSIX1_SYMBOL|MACRO_SYMBOL,\n       \"S_ISDIR\\0S_ISBLK\\0S_ISCHR\\0S_ISFIFO\\0S_ISREG\\0S_ISLNK\\0S_IFDIR\\0\\\n S_IFBLK\\0S_IFCHR\\0S_IFIFO\\0S_IFREG\\0S_IFLNK\\0\" },\n+  { CONTINUED, XOPEN_EXTENDED_SYMBOL, \"fchmod\\0\" },\n+\n+#if 0\n+/* How do we handle fd_set? */\n+  { \"sys/time.h\", XOPEN_EXTENDED_SYMBOL, \"select\\0\" },\n+  { \"sys/select.h\", XOPEN_EXTENDED_SYMBOL /* fake */, \"select\\0\" },\n+#endif\n \n   { \"sys/times.h\", POSIX1_SYMBOL, \"times\\0\" },\n   /* \"sys/types.h\" add types (not in old g++-include) */\n@@ -285,20 +310,28 @@ getppid\\0getuid\\0isatty\\0link\\0lseek\\0pathconf\\0pause\\0pipe\\0read\\0rmdir\\0\\\n setgid\\0setpgid\\0setsid\\0setuid\\0sleep\\0sysconf\\0tcgetpgrp\\0tcsetpgrp\\0\\\n ttyname\\0unlink\\0write\\0\" },\n   { CONTINUED, POSIX2_SYMBOL, \"getopt\\0\" },\n+  { CONTINUED, XOPEN_EXTENDED_SYMBOL,\n+      \"lockf\\0gethostid\\0gethostname\\0readlink\\0\" },\n+\n+  { \"utime.h\", POSIX1_SYMBOL, \"utime\\0\" },\n \n   { NULL, 0, NONE }\n };\n \n enum special_file special_file_handling = no_special;\n \n-/* The following are only used when handling sys/stat.h */\n /* They are set if the corresponding macro has been seen. */\n+/* The following are only used when handling sys/stat.h */\n int seen_S_IFBLK = 0, seen_S_ISBLK  = 0;\n int seen_S_IFCHR = 0, seen_S_ISCHR  = 0;\n int seen_S_IFDIR = 0, seen_S_ISDIR  = 0;\n int seen_S_IFIFO = 0, seen_S_ISFIFO = 0;\n int seen_S_IFLNK = 0, seen_S_ISLNK  = 0;\n int seen_S_IFREG = 0, seen_S_ISREG  = 0;\n+/* The following are only used when handling errno.h */\n+int seen_errno = 0;\n+/* The following are only used when handling stdlib.h */\n+int seen_EXIT_FAILURE = 0, seen_EXIT_SUCCESS = 0;\n \f\n /* Wrapper around free, to avoid prototype clashes. */\n \n@@ -355,6 +388,7 @@ sstring line;\n int lbrac_line, rbrac_line;\n \n int required_unseen_count = 0;\n+int required_other = 0;\n \n void \n write_lbrac ()\n@@ -411,7 +445,14 @@ recognized_macro (fname)\n   switch (special_file_handling)\n     {\n     case errno_h:\n-      if (strcmp (fname, \"errno\") == 0) missing_errno = 0;\n+      if (strcmp (fname, \"errno\") == 0 && !seen_errno)\n+\tseen_errno = 1, required_other--;\n+      break;\n+    case stdlib_h:\n+      if (strcmp (fname, \"EXIT_FAILURE\") == 0 && !seen_EXIT_FAILURE)\n+\tseen_EXIT_FAILURE = 1, required_other--;\n+      if (strcmp (fname, \"EXIT_SUCCESS\") == 0 && !seen_EXIT_SUCCESS)\n+\tseen_EXIT_SUCCESS = 1, required_other--;\n       break;\n     case sys_stat_h:\n       if (fname[0] == 'S' && fname[1] == '_')\n@@ -441,7 +482,8 @@ recognized_extern (name, name_length, type, type_length)\n   switch (special_file_handling)\n     {\n     case errno_h:\n-      if (strncmp (name, \"errno\", name_length) == 0) missing_errno = 0;\n+      if (strcmp (name, \"errno\") == 0 && !seen_errno)\n+\tseen_errno = 1, required_other--;\n       break;\n     }\n }\n@@ -630,7 +672,7 @@ read_scan_file (in_fname, argc, argv)\n \t}\n     }\n \n-  if (required_unseen_count + partial_count + missing_errno\n+  if (required_unseen_count + partial_count + required_other\n #if ADD_MISSING_EXTERN_C\n       + missing_extern_C_count\n #endif      \n@@ -696,11 +738,27 @@ write_rbrac ()\n \t      if (cur_symbols->flags & ANSI_SYMBOL)\n \t\tfprintf (outf,\n \t \"#if defined(__USE_FIXED_PROTOTYPES__) || defined(__cplusplus) || defined (__STRICT_ANSI__)\\n\");\n-\t      else\n+\t      else if (cur_symbols->flags & (POSIX1_SYMBOL|POSIX2_SYMBOL))\n \t\tfprintf (outf,\n        \"#if defined(__USE_FIXED_PROTOTYPES__) || (defined(__cplusplus) \\\\\\n\\\n-    ? (!defined(__STRICT_ANSI__) || defined(__POSIX_SOURCE__)) \\\\\\n\\\n-    : (defined(__STRICT_ANSI__) && defined(__POSIX_SOURCE__)))\\n\");\n+    ? (!defined(__STRICT_ANSI__) || defined(_POSIX_SOURCE)) \\\\\\n\\\n+    : (defined(__STRICT_ANSI__) && defined(_POSIX_SOURCE)))\\n\");\n+\t      else if (cur_symbols->flags & XOPEN_SYMBOL)\n+\t\t{\n+\t\tfprintf (outf,\n+       \"#if defined(__USE_FIXED_PROTOTYPES__) \\\\\\n\\\n+   || (defined(__STRICT_ANSI__) && defined(_XOPEN_SOURCE))\\n\");\n+\t\t}\n+\t      else if (cur_symbols->flags & XOPEN_EXTENDED_SYMBOL)\n+\t\t{\n+\t\tfprintf (outf,\n+       \"#if defined(__USE_FIXED_PROTOTYPES__) \\\\\\n\\\n+   || (defined(__STRICT_ANSI__) && defined(_XOPEN_EXTENDED_SOURCE))\\n\");\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  fatal (\"internal error for function %s\", fn->fname);\n+\t\t}\n \t      if_was_emitted = 1;\n \t    }\n \n@@ -734,9 +792,15 @@ write_rbrac ()\n   switch (special_file_handling)\n     {\n     case errno_h:\n-      if (missing_errno)\n+      if (!seen_errno)\n \tfprintf (outf, \"extern int errno;\\n\");\n       break;\n+    case stdlib_h:\n+      if (!seen_EXIT_FAILURE)\n+\tfprintf (outf, \"#define EXIT_FAILURE 1\\n\");\n+      if (!seen_EXIT_SUCCESS)\n+\tfprintf (outf, \"#define EXIT_SUCCESS 0\\n\");\n+      break;\n     case sys_stat_h:\n       if (!seen_S_ISBLK && seen_S_IFBLK)\n \tfprintf (outf,\n@@ -1032,7 +1096,9 @@ main (argc, argv)\n   if (strcmp (inc_filename, \"sys/stat.h\") == 0)\n     special_file_handling = sys_stat_h;\n   else if (strcmp (inc_filename, \"errno.h\") == 0)\n-    special_file_handling = errno_h, missing_errno = 1;\n+    special_file_handling = errno_h, required_other++;\n+  else if (strcmp (inc_filename, \"stdlib.h\") == 0)\n+    special_file_handling = stdlib_h, required_other+=2;\n   else if (strcmp (inc_filename, \"stdio.h\") == 0)\n     special_file_handling = stdio_h;\n   include_entry = std_include_table;"}]}