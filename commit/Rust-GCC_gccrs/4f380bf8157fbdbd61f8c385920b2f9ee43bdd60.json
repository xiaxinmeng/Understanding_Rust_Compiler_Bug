{"sha": "4f380bf8157fbdbd61f8c385920b2f9ee43bdd60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYzODBiZjgxNTdmYmRiZDYxZjhjMzg1OTIwYjJmOWVlNDNiZGQ2MA==", "commit": {"author": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2005-02-28T17:21:20Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2005-02-28T17:21:20Z"}, "message": "re PR middle-end/19874 (ICE in emit_move_insn with __attribute__((mode (QI))) enum)\n\n\n\tPR middle-end/19874\n\t* tree-ssa.c (tree_ssa_useless_type_conversion_1): A conversion\n\tbetween different machine modes is never a \"useless\" conversion.\n\n\t* gcc.c-torture/execute/20050119-2.c: New test case.\n\nFrom-SVN: r95688", "tree": {"sha": "5bd6914eeae41f162eb223a6dcffc4ac7a49e58d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bd6914eeae41f162eb223a6dcffc4ac7a49e58d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f380bf8157fbdbd61f8c385920b2f9ee43bdd60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f380bf8157fbdbd61f8c385920b2f9ee43bdd60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f380bf8157fbdbd61f8c385920b2f9ee43bdd60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f380bf8157fbdbd61f8c385920b2f9ee43bdd60/comments", "author": null, "committer": null, "parents": [{"sha": "dd1f53fbd778afa7c02785302ec62ec30dd2b687", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd1f53fbd778afa7c02785302ec62ec30dd2b687", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd1f53fbd778afa7c02785302ec62ec30dd2b687"}], "stats": {"total": 66, "additions": 60, "deletions": 6}, "files": [{"sha": "a0b92190d2b55f09f1c6c773128028a6c7cf809b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f380bf8157fbdbd61f8c385920b2f9ee43bdd60/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f380bf8157fbdbd61f8c385920b2f9ee43bdd60/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f380bf8157fbdbd61f8c385920b2f9ee43bdd60", "patch": "@@ -1,4 +1,10 @@\n-2005-02-28   <bosch@gnat.com>\n+2005-02-28  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/19874\n+\t* tree-ssa.c (tree_ssa_useless_type_conversion_1): A conversion\n+\tbetween different machine modes is never a \"useless\" conversion.\n+\n+2005-02-28  Geert Bosch  <bosch@gnat.com>\n \n \tPR ada/15977\n \t* doc/contrib.texi: List contributors for Ada front end"}, {"sha": "9ed60b0cad467734469c455e0633809c2d530dd6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f380bf8157fbdbd61f8c385920b2f9ee43bdd60/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f380bf8157fbdbd61f8c385920b2f9ee43bdd60/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4f380bf8157fbdbd61f8c385920b2f9ee43bdd60", "patch": "@@ -1,3 +1,8 @@\n+2005-02-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/19874\n+\t* gcc.c-torture/execute/20050119-2.c: New test case.\n+\n 2005-02-28  Ben Elliston  <bje@au.ibm.com>\n \n \t* README: Update the DejaGnu bug reporting address."}, {"sha": "568109cb2c9bb6b219bf887e368af3ff9cc27e74", "filename": "gcc/testsuite/gcc.c-torture/execute/20050119-2.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f380bf8157fbdbd61f8c385920b2f9ee43bdd60/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050119-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f380bf8157fbdbd61f8c385920b2f9ee43bdd60/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050119-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050119-2.c?ref=4f380bf8157fbdbd61f8c385920b2f9ee43bdd60", "patch": "@@ -0,0 +1,40 @@\n+/* PR middle-end/19874 */\n+typedef enum { A, B, C, D } E;\n+\n+struct S {\n+  E __attribute__ ((mode (__byte__))) a;\n+  E __attribute__ ((mode (__byte__))) b;\n+  E __attribute__ ((mode (__byte__))) c;\n+  E __attribute__ ((mode (__byte__))) d;\n+};\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+E\n+foo (struct S *s)\n+{\n+  if (s->a != s->b)\n+    abort ();\n+  if (s->c != C)\n+    abort ();\n+  return s->d;\n+}\n+\n+int\n+main (void)\n+{\n+  struct S s[2];\n+  s[0].a = B;\n+  s[0].b = B;\n+  s[0].c = C;\n+  s[0].d = D;\n+  s[1].a = D;\n+  s[1].b = C;\n+  s[1].c = B;\n+  s[1].d = A;\n+  if (foo (s) != D)\n+    abort ();\n+  exit (0);\n+}\n+"}, {"sha": "9346d6cf7065425debbaf304d132a92db5073dff", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f380bf8157fbdbd61f8c385920b2f9ee43bdd60/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f380bf8157fbdbd61f8c385920b2f9ee43bdd60/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=4f380bf8157fbdbd61f8c385920b2f9ee43bdd60", "patch": "@@ -778,11 +778,17 @@ delete_tree_ssa (void)\n bool\n tree_ssa_useless_type_conversion_1 (tree outer_type, tree inner_type)\n {\n+  if (inner_type == outer_type)\n+    return true;\n+\n+  /* Changes in machine mode are never useless conversions.  */\n+  if (TYPE_MODE (inner_type) != TYPE_MODE (outer_type))\n+    return false;\n+\n   /* If the inner and outer types are effectively the same, then\n      strip the type conversion and enter the equivalence into\n      the table.  */\n-  if (inner_type == outer_type\n-     || (lang_hooks.types_compatible_p (inner_type, outer_type)))\n+  if (lang_hooks.types_compatible_p (inner_type, outer_type))\n     return true;\n \n   /* If both types are pointers and the outer type is a (void *), then\n@@ -793,7 +799,6 @@ tree_ssa_useless_type_conversion_1 (tree outer_type, tree inner_type)\n      implement the ABI.  */\n   else if (POINTER_TYPE_P (inner_type)\n            && POINTER_TYPE_P (outer_type)\n-\t   && TYPE_MODE (inner_type) == TYPE_MODE (outer_type)\n \t   && TYPE_REF_CAN_ALIAS_ALL (inner_type)\n \t      == TYPE_REF_CAN_ALIAS_ALL (outer_type)\n \t   && TREE_CODE (TREE_TYPE (outer_type)) == VOID_TYPE)\n@@ -803,7 +808,6 @@ tree_ssa_useless_type_conversion_1 (tree outer_type, tree inner_type)\n      so strip conversions that just switch between them.  */\n   else if (POINTER_TYPE_P (inner_type)\n            && POINTER_TYPE_P (outer_type)\n-\t   && TYPE_MODE (inner_type) == TYPE_MODE (outer_type)\n \t   && TYPE_REF_CAN_ALIAS_ALL (inner_type)\n \t      == TYPE_REF_CAN_ALIAS_ALL (outer_type)\n            && lang_hooks.types_compatible_p (TREE_TYPE (inner_type),\n@@ -819,7 +823,6 @@ tree_ssa_useless_type_conversion_1 (tree outer_type, tree inner_type)\n      mean that testing of precision is necessary.  */\n   else if (INTEGRAL_TYPE_P (inner_type)\n            && INTEGRAL_TYPE_P (outer_type)\n-\t   && TYPE_MODE (inner_type) == TYPE_MODE (outer_type)\n \t   && TYPE_UNSIGNED (inner_type) == TYPE_UNSIGNED (outer_type)\n \t   && TYPE_PRECISION (inner_type) == TYPE_PRECISION (outer_type))\n     {"}]}