{"sha": "8433f113b64cc38f12215561ac79bddba6051b4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQzM2YxMTNiNjRjYzM4ZjEyMjE1NTYxYWM3OWJkZGJhNjA1MWI0Yw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-06-13T00:34:04Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-06-13T00:34:04Z"}, "message": "re PR middle-end/10475 (ICE in subreg_highpart_offset for code with long long)\n\n        PR middle-end/10475\n        * expmed.c (emit_store_flag): Use simplify_gen_subreg directly\n        for extracting sub-words.\n\t* gcc.c-torture/compile/20030612-1.c: New.\n\nFrom-SVN: r67865", "tree": {"sha": "6fc709a43bab07b0b7c9276aac590b950fb4ab81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fc709a43bab07b0b7c9276aac590b950fb4ab81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8433f113b64cc38f12215561ac79bddba6051b4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8433f113b64cc38f12215561ac79bddba6051b4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8433f113b64cc38f12215561ac79bddba6051b4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8433f113b64cc38f12215561ac79bddba6051b4c/comments", "author": null, "committer": null, "parents": [{"sha": "974c7cc67f1a4b606853c3abd0f87f60aec4339e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974c7cc67f1a4b606853c3abd0f87f60aec4339e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/974c7cc67f1a4b606853c3abd0f87f60aec4339e"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "da431d54538356d874e75ba9bb6ca5d3a067f5e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433f113b64cc38f12215561ac79bddba6051b4c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433f113b64cc38f12215561ac79bddba6051b4c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8433f113b64cc38f12215561ac79bddba6051b4c", "patch": "@@ -1,3 +1,9 @@\n+2003-06-12  Richard Henderson  <rth@redhat.com>\n+\n+        PR middle-end/10475\n+        * expmed.c (emit_store_flag): Use simplify_gen_subreg directly\n+        for extracting sub-words.\n+\n 2003-06-12  Richard Henderson  <rth@redhat.com>\n \n         PR target/7594"}, {"sha": "43007569a6cd2d1b4ac9c15cd47e65dae6cc9710", "filename": "gcc/expmed.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433f113b64cc38f12215561ac79bddba6051b4c/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433f113b64cc38f12215561ac79bddba6051b4c/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=8433f113b64cc38f12215561ac79bddba6051b4c", "patch": "@@ -4354,19 +4354,27 @@ emit_store_flag (target, code, op0, op1, mode, unsignedp, normalizep)\n     {\n       if (code == EQ || code == NE)\n \t{\n+\t  rtx op00, op01, op0both;\n+\n \t  /* Do a logical OR of the two words and compare the result.  */\n-\t  rtx op0h = gen_highpart (word_mode, op0);\n-\t  rtx op0l = gen_lowpart (word_mode, op0);\n-\t  rtx op0both = expand_binop (word_mode, ior_optab, op0h, op0l,\n-\t\t\t\t      NULL_RTX, unsignedp, OPTAB_DIRECT);\n+\t  op00 = simplify_gen_subreg (word_mode, op0, mode, 0);\n+\t  op01 = simplify_gen_subreg (word_mode, op0, mode, UNITS_PER_WORD);\n+\t  op0both = expand_binop (word_mode, ior_optab, op00, op01,\n+\t\t\t\t  NULL_RTX, unsignedp, OPTAB_DIRECT);\n \t  if (op0both != 0)\n \t    return emit_store_flag (target, code, op0both, op1, word_mode,\n \t\t\t\t    unsignedp, normalizep);\n \t}\n       else if (code == LT || code == GE)\n-\t/* If testing the sign bit, can just test on high word.  */\n-\treturn emit_store_flag (target, code, gen_highpart (word_mode, op0),\n-\t\t\t\top1, word_mode, unsignedp, normalizep);\n+\t{\n+\t  rtx op0h;\n+\n+\t  /* If testing the sign bit, can just test on high word.  */\n+\t  op0h = simplify_gen_subreg (word_mode, op0, mode,\n+\t\t\t\t      subreg_highpart_offset (word_mode, mode));\n+\t  return emit_store_flag (target, code, op0h, op1, word_mode,\n+\t\t\t\t  unsignedp, normalizep);\n+\t}\n     }\n \n   /* From now on, we won't change CODE, so set ICODE now.  */"}, {"sha": "8edbd92bd47644eb06079e4499b688337b23c243", "filename": "gcc/testsuite/gcc.c-torture/compile/20030612-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8433f113b64cc38f12215561ac79bddba6051b4c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20030612-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8433f113b64cc38f12215561ac79bddba6051b4c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20030612-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20030612-1.c?ref=8433f113b64cc38f12215561ac79bddba6051b4c", "patch": "@@ -0,0 +1,11 @@\n+static inline void\n+foo (long long const v0, long long const v1)\n+{\n+  bar (v0 == v1);\n+}\n+\n+void\n+test (void)\n+{\n+  foo (0, 1);\n+}"}]}