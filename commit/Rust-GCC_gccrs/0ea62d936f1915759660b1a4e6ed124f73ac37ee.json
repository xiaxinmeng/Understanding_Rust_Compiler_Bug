{"sha": "0ea62d936f1915759660b1a4e6ed124f73ac37ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVhNjJkOTM2ZjE5MTU3NTk2NjBiMWE0ZTZlZDEyNGY3M2FjMzdlZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-04-25T11:35:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-04-25T11:35:38Z"}, "message": "re PR tree-optimization/53058 (Another ice in remove_range_assertions)\n\n\tPR tree-optimization/53058\n\t* double-int.h (double_int_max_value, double_int_min_value): New\n\tprototypes.\n\t* double-int.c (double_int_max_value, double_int_min_value): New\n\tfunctions.\n\t* tree-vrp.c (register_edge_assert_for_2): Compare mask\n\tfor LE_EXPR or GT_EXPR with double_int_max_value\n\tinstead of double_int_mask.\n\n\t* gcc.c-torture/compile/pr53058.c: New test.\n\nFrom-SVN: r186816", "tree": {"sha": "2c516d8bbd1d94a9cea0ff4574eb770c8f256524", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c516d8bbd1d94a9cea0ff4574eb770c8f256524"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ea62d936f1915759660b1a4e6ed124f73ac37ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ea62d936f1915759660b1a4e6ed124f73ac37ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ea62d936f1915759660b1a4e6ed124f73ac37ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ea62d936f1915759660b1a4e6ed124f73ac37ee/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "228f466fd61238fb74283b6b7d85cba483ce51ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/228f466fd61238fb74283b6b7d85cba483ce51ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/228f466fd61238fb74283b6b7d85cba483ce51ef"}], "stats": {"total": 60, "additions": 57, "deletions": 3}, "files": [{"sha": "9edaf939e4a8babe37fde0538fa8f48459a50202", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea62d936f1915759660b1a4e6ed124f73ac37ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea62d936f1915759660b1a4e6ed124f73ac37ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ea62d936f1915759660b1a4e6ed124f73ac37ee", "patch": "@@ -1,3 +1,14 @@\n+2012-04-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/53058\n+\t* double-int.h (double_int_max_value, double_int_min_value): New\n+\tprototypes.\n+\t* double-int.c (double_int_max_value, double_int_min_value): New\n+\tfunctions.\n+\t* tree-vrp.c (register_edge_assert_for_2): Compare mask\n+\tfor LE_EXPR or GT_EXPR with double_int_max_value\n+\tinstead of double_int_mask.\n+\n 2012-04-25  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-vectorizer.h (vect_loop_versioning): Adjust prototype."}, {"sha": "3a51bd35d0066f17c6404b51f284530900f70c0b", "filename": "gcc/double-int.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea62d936f1915759660b1a4e6ed124f73ac37ee/gcc%2Fdouble-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea62d936f1915759660b1a4e6ed124f73ac37ee/gcc%2Fdouble-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.c?ref=0ea62d936f1915759660b1a4e6ed124f73ac37ee", "patch": "@@ -1,5 +1,5 @@\n /* Operations with long integers.\n-   Copyright (C) 2006, 2007, 2009, 2010 Free Software Foundation, Inc.\n+   Copyright (C) 2006, 2007, 2009, 2010, 2012 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -616,6 +616,26 @@ double_int_mask (unsigned prec)\n   return mask;\n }\n \n+/* Returns a maximum value for signed or unsigned integer\n+   of precision PREC.  */\n+\n+double_int\n+double_int_max_value (unsigned int prec, bool uns)\n+{\n+  return double_int_mask (prec - (uns ? 0 : 1));\n+}\n+\n+/* Returns a minimum value for signed or unsigned integer\n+   of precision PREC.  */\n+\n+double_int\n+double_int_min_value (unsigned int prec, bool uns)\n+{\n+  if (uns)\n+    return double_int_zero;\n+  return double_int_lshift (double_int_one, prec - 1, prec, false);\n+}\n+\n /* Clears the bits of CST over the precision PREC.  If UNS is false, the bits\n    outside of the precision are set to the sign bit (i.e., the PREC-th one),\n    otherwise they are set to zero."}, {"sha": "78191cc80f7964313ccbd195f26803b312073c4b", "filename": "gcc/double-int.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea62d936f1915759660b1a4e6ed124f73ac37ee/gcc%2Fdouble-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea62d936f1915759660b1a4e6ed124f73ac37ee/gcc%2Fdouble-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.h?ref=0ea62d936f1915759660b1a4e6ed124f73ac37ee", "patch": "@@ -1,5 +1,5 @@\n /* Operations with long integers.\n-   Copyright (C) 2006, 2007, 2008, 2010 Free Software Foundation, Inc.\n+   Copyright (C) 2006, 2007, 2008, 2010, 2012 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -242,6 +242,9 @@ double_int double_int_sext (double_int, unsigned);\n double_int double_int_zext (double_int, unsigned);\n double_int double_int_mask (unsigned);\n \n+double_int double_int_max_value (unsigned int, bool);\n+double_int double_int_min_value (unsigned int, bool);\n+\n #define ALL_ONES (~((unsigned HOST_WIDE_INT) 0))\n \n /* The operands of the following comparison functions must be processed"}, {"sha": "313015f9ede8fdf44150f9dd4df2856e472dea0a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea62d936f1915759660b1a4e6ed124f73ac37ee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea62d936f1915759660b1a4e6ed124f73ac37ee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0ea62d936f1915759660b1a4e6ed124f73ac37ee", "patch": "@@ -1,3 +1,8 @@\n+2012-04-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/53058\n+\t* gcc.c-torture/compile/pr53058.c: New test.\n+\n 2012-04-25  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/53088"}, {"sha": "90063c5084265b2dfaa82e41e3fcaea78542af0c", "filename": "gcc/testsuite/gcc.c-torture/compile/pr53058.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea62d936f1915759660b1a4e6ed124f73ac37ee/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr53058.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea62d936f1915759660b1a4e6ed124f73ac37ee/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr53058.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr53058.c?ref=0ea62d936f1915759660b1a4e6ed124f73ac37ee", "patch": "@@ -0,0 +1,12 @@\n+/* PR tree-optimization/53058 */\n+\n+int a, b, c;\n+\n+void\n+foo ()\n+{\n+  c = b >> 16;\n+  if (c > 32767)\n+    c = 0;\n+  a = b;\n+}"}, {"sha": "90660967c27f4b1c3928261866e533476144ed9e", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea62d936f1915759660b1a4e6ed124f73ac37ee/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea62d936f1915759660b1a4e6ed124f73ac37ee/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=0ea62d936f1915759660b1a4e6ed124f73ac37ee", "patch": "@@ -4565,6 +4565,7 @@ register_edge_assert_for_2 (tree name, edge e, gimple_stmt_iterator bsi,\n \t      && INTEGRAL_TYPE_P (TREE_TYPE (name2))\n \t      && IN_RANGE (tree_low_cst (cst2, 1), 1, prec - 1)\n \t      && prec <= 2 * HOST_BITS_PER_WIDE_INT\n+\t      && prec == GET_MODE_PRECISION (TYPE_MODE (TREE_TYPE (val)))\n \t      && live_on_edge (e, name2)\n \t      && !has_single_use (name2))\n \t    {\n@@ -4598,8 +4599,10 @@ register_edge_assert_for_2 (tree name, edge e, gimple_stmt_iterator bsi,\n \t    new_val = val2;\n \t  else\n \t    {\n+\t      double_int maxval\n+\t\t= double_int_max_value (prec, TYPE_UNSIGNED (TREE_TYPE (val)));\n \t      mask = double_int_ior (tree_to_double_int (val2), mask);\n-\t      if (double_int_minus_one_p (double_int_sext (mask, prec)))\n+\t      if (double_int_equal_p (mask, maxval))\n \t\tnew_val = NULL_TREE;\n \t      else\n \t\tnew_val = double_int_to_tree (TREE_TYPE (val2), mask);"}]}