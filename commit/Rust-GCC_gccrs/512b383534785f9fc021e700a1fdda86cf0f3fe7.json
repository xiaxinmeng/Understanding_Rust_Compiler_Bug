{"sha": "512b383534785f9fc021e700a1fdda86cf0f3fe7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTEyYjM4MzUzNDc4NWY5ZmMwMjFlNzAwYTFmZGRhODZjZjBmM2ZlNw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-09-13T14:40:28Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-09-13T14:41:54Z"}, "message": "aarch64: PR target/102252 Invalid addressing mode for SVE load predicate\n\nIn the testcase we generate invalid assembly for an SVE load predicate instruction.\nThe RTL for the insn is:\n(insn 9 8 10 (set (reg:VNx16BI 68 p0)\n        (mem:VNx16BI (plus:DI (mult:DI (reg:DI 1 x1 [93])\n                    (const_int 8 [0x8]))\n                (reg/f:DI 0 x0 [92])) [2 work_3(D)->array[offset_4(D)]+0 S8 A16]))\n\nThat addressing mode is not valid for the instruction [1] as it only accepts the addressing mode:\n[<Xn|SP>{, #<imm>, MUL VL}]\n\nThis patch rejects the register index form for SVE predicate modes.\n\nBootstrapped and tested on aarch64-none-linux-gnu.\n\n[1] https://developer.arm.com/documentation/ddi0602/2021-06/SVE-Instructions/LDR--predicate---Load-predicate-register-\n\ngcc/ChangeLog:\n\n\tPR target/102252\n\t* config/aarch64/aarch64.c (aarch64_classify_address): Don't allow\n\tregister index for SVE predicate modes.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/102252\n\t* g++.target/aarch64/sve/pr102252.C: New test.", "tree": {"sha": "e7a98d3382c756b91350c0d55c56d3a73f6d6756", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7a98d3382c756b91350c0d55c56d3a73f6d6756"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/512b383534785f9fc021e700a1fdda86cf0f3fe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/512b383534785f9fc021e700a1fdda86cf0f3fe7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/512b383534785f9fc021e700a1fdda86cf0f3fe7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/512b383534785f9fc021e700a1fdda86cf0f3fe7/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7a669af0aeb639eb78f1614cbecb72a98d81ce8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7a669af0aeb639eb78f1614cbecb72a98d81ce8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7a669af0aeb639eb78f1614cbecb72a98d81ce8"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "30d9a0b7a3dca53f41e8be2aabf78c41f2c376d9", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512b383534785f9fc021e700a1fdda86cf0f3fe7/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512b383534785f9fc021e700a1fdda86cf0f3fe7/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=512b383534785f9fc021e700a1fdda86cf0f3fe7", "patch": "@@ -9770,7 +9770,6 @@ aarch64_classify_address (struct aarch64_address_info *info,\n \t\t\t    || mode == TImode\n \t\t\t    || mode == TFmode\n \t\t\t    || (BYTES_BIG_ENDIAN && advsimd_struct_p));\n-\n   /* If we are dealing with ADDR_QUERY_LDP_STP_N that means the incoming mode\n      corresponds to the actual size of the memory being loaded/stored and the\n      mode of the corresponding addressing mode is half of that.  */\n@@ -9779,12 +9778,14 @@ aarch64_classify_address (struct aarch64_address_info *info,\n     mode = DFmode;\n \n   bool allow_reg_index_p = (!load_store_pair_p\n-\t\t\t    && (known_lt (GET_MODE_SIZE (mode), 16)\n+\t\t\t    && ((vec_flags == 0\n+\t\t\t\t && known_lt (GET_MODE_SIZE (mode), 16))\n \t\t\t\t|| vec_flags == VEC_ADVSIMD\n \t\t\t\t|| vec_flags & VEC_SVE_DATA));\n \n-  /* For SVE, only accept [Rn], [Rn, Rm, LSL #shift] and\n-     [Rn, #offset, MUL VL].  */\n+  /* For SVE, only accept [Rn], [Rn, #offset, MUL VL] and [Rn, Rm, LSL #shift].\n+     The latter is not valid for SVE predicates, and that's rejected through\n+     allow_reg_index_p above.  */\n   if ((vec_flags & (VEC_SVE_DATA | VEC_SVE_PRED)) != 0\n       && (code != REG && code != PLUS))\n     return false;"}, {"sha": "f90f1218555f0dfdb0253fe83c656ba03b1aac43", "filename": "gcc/testsuite/g++.target/aarch64/sve/pr102252.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512b383534785f9fc021e700a1fdda86cf0f3fe7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fpr102252.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512b383534785f9fc021e700a1fdda86cf0f3fe7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fpr102252.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fpr102252.C?ref=512b383534785f9fc021e700a1fdda86cf0f3fe7", "patch": "@@ -0,0 +1,37 @@\n+/* PR target/102252.  */\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-march=armv8.2-a+sve -msve-vector-bits=512\" } */\n+\n+/* We used to generate invalid assembly for SVE predicate loads.  */\n+\n+#include <arm_sve.h>\n+\n+class SimdBool\n+{\n+private:\n+    typedef svbool_t simdInternalType_ __attribute__((arm_sve_vector_bits(512)));\n+\n+public:\n+    SimdBool() {}\n+\n+    simdInternalType_ simdInternal_;\n+\n+};\n+\n+static svfloat32_t selectByMask(svfloat32_t a, SimdBool m) {\n+    return svsel_f32(m.simdInternal_, a, svdup_f32(0.0));\n+}\n+\n+struct s {\n+    SimdBool array[1];\n+};\n+\n+\n+\n+void foo(struct s* const work, int offset)\n+{\n+        svfloat32_t tz_S0;\n+\n+        tz_S0 = selectByMask(tz_S0, work->array[offset]);\n+}\n+"}]}