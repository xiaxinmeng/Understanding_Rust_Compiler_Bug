{"sha": "ebedb4dd4988b5e225c5b39a039e2e43d8392e36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJlZGI0ZGQ0OTg4YjVlMjI1YzViMzlhMDM5ZTJlNDNkODM5MmUzNg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1995-12-27T17:35:39Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1995-12-27T17:35:39Z"}, "message": "Reorganize common mode; optimize SI*SI->DI on common/powerpc; Do not build power2/601 libraries\n\nFrom-SVN: r10864", "tree": {"sha": "04b88a0f4e29b6e00cf4147062b9a5e9daa92463", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04b88a0f4e29b6e00cf4147062b9a5e9daa92463"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebedb4dd4988b5e225c5b39a039e2e43d8392e36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebedb4dd4988b5e225c5b39a039e2e43d8392e36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebedb4dd4988b5e225c5b39a039e2e43d8392e36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebedb4dd4988b5e225c5b39a039e2e43d8392e36/comments", "author": null, "committer": null, "parents": [{"sha": "a377ff85d0572f5fa1bbb87351e27f54684c456b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a377ff85d0572f5fa1bbb87351e27f54684c456b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a377ff85d0572f5fa1bbb87351e27f54684c456b"}], "stats": {"total": 415, "additions": 303, "deletions": 112}, "files": [{"sha": "df6b789e627db7d65b0edb296e8344acaa7820f6", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebedb4dd4988b5e225c5b39a039e2e43d8392e36/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebedb4dd4988b5e225c5b39a039e2e43d8392e36/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ebedb4dd4988b5e225c5b39a039e2e43d8392e36", "patch": "@@ -323,6 +323,9 @@ rs6000_override_options (default_cpu)\n \t}\n     }\n \n+  if (!WORDS_BIG_ENDIAN && !TARGET_POWER && !TARGET_POWERPC)\n+    error (\"-mcpu=common is not supported for little endian platforms\");\n+\n #ifdef SUBTARGET_OVERRIDE_OPTIONS\n   SUBTARGET_OVERRIDE_OPTIONS;\n #endif\n@@ -446,6 +449,77 @@ gpc_reg_operand (op, mode)\n \t  && (GET_CODE (op) != REG || REGNO (op) >= 67 || REGNO (op) < 64));\n }\n \n+/* Returns 1 if OP is register 0 or is a pseudo register.  */\n+\n+int\n+gpc_reg0_operand (op, mode)\n+     register rtx op;\n+     enum machine_mode mode;\n+{\n+  return (register_operand (op, mode)\n+\t  && (GET_CODE (op) != REG || REGNO (op) == 0 || REGNO (op) >= FIRST_PSEUDO_REGISTER));\n+}\n+\n+/* Returns 1 if OP is register 3 or is a pseudo register.  */\n+\n+int\n+gpc_reg3_operand (op, mode)\n+     register rtx op;\n+     enum machine_mode mode;\n+{\n+  return (register_operand (op, mode)\n+\t  && (GET_CODE (op) != REG || REGNO (op) == 3 || REGNO (op) >= FIRST_PSEUDO_REGISTER));\n+}\n+\n+/* Returns 1 if OP is register 4 or is a pseudo register.  */\n+\n+int\n+gpc_reg4_operand (op, mode)\n+     register rtx op;\n+     enum machine_mode mode;\n+{\n+  return (register_operand (op, mode)\n+\t  && (GET_CODE (op) != REG || REGNO (op) == 4 || REGNO (op) >= FIRST_PSEUDO_REGISTER));\n+}\n+\n+/* Returns 1 if OP is register 3 or 4 or is a pseudo register.  */\n+\n+int\n+gpc_reg34_operand (op, mode)\n+     register rtx op;\n+     enum machine_mode mode;\n+{\n+  return (register_operand (op, mode)\n+\t  && (GET_CODE (op) != REG || REGNO (op) == 3 || REGNO (op) == 4\n+\t      || REGNO (op) >= FIRST_PSEUDO_REGISTER));\n+}\n+\n+/* Returns 1 if OP is either a pseudo-register or CR1.  */\n+\n+int\n+cc_reg1_operand (op, mode)\n+     register rtx op;\n+     enum machine_mode mode;\n+{\n+  return (register_operand (op, mode)\n+\t  && (GET_CODE (op) != REG\n+\t      || REGNO (op) >= FIRST_PSEUDO_REGISTER\n+\t      || REGNO (op) == 69));\n+}\n+\n+/* Returns 1 if OP is either a pseudo-register or CR0.  */\n+\n+int\n+cc_reg0_operand (op, mode)\n+     register rtx op;\n+     enum machine_mode mode;\n+{\n+  return (register_operand (op, mode)\n+\t  && (GET_CODE (op) != REG\n+\t      || REGNO (op) >= FIRST_PSEUDO_REGISTER\n+\t      || REGNO (op) == 68));\n+}\n+\n /* Returns 1 if OP is either a pseudo-register or a register denoting a\n    CR field.  */\n "}, {"sha": "786c7e86d35e9f6766b7ac8937d23ddd1df0ae57", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 93, "deletions": 17, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebedb4dd4988b5e225c5b39a039e2e43d8392e36/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebedb4dd4988b5e225c5b39a039e2e43d8392e36/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=ebedb4dd4988b5e225c5b39a039e2e43d8392e36", "patch": "@@ -758,44 +758,103 @@ extern struct rs6000_cpu_select rs6000_select[];\n    So make a class for registers valid as base registers.\n \n    Also, cr0 is the only condition code register that can be used in\n-   arithmetic insns, so make a separate class for it. */\n+   arithmetic insns, so make a separate class for it.  Common mode\n+   needs to clobber cr1, so add a class for that as well.  */\n \n-enum reg_class { NO_REGS, BASE_REGS, GENERAL_REGS, FLOAT_REGS,\n-  NON_SPECIAL_REGS, MQ_REGS, LINK_REGS, CTR_REGS, LINK_OR_CTR_REGS,\n-  SPECIAL_REGS, SPEC_OR_GEN_REGS, CR0_REGS, CR_REGS, NON_FLOAT_REGS,\n-  ALL_REGS, LIM_REG_CLASSES };\n+enum reg_class\n+{\n+  NO_REGS,\n+  R0_REGS,\n+  R3_REGS,\n+  R4_REGS,\n+  R34_REGS,\n+  BASE_REGS,\n+  GENERAL_REGS,\n+  FLOAT_REGS,\n+  NON_SPECIAL_REGS,\n+  MQ_REGS,\n+  LINK_REGS,\n+  CTR_REGS,\n+  LINK_OR_CTR_REGS,\n+  SPECIAL_REGS,\n+  SPEC_OR_GEN_REGS,\n+  CR0_REGS,\n+  CR1_REGS,\n+  CR_REGS,\n+  NON_FLOAT_REGS,\n+  ALL_REGS,\n+  LIM_REG_CLASSES\n+};\n \n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n \n /* Give names of register classes as strings for dump file.   */\n \n-#define REG_CLASS_NAMES\t\t\t\t\t \t\\\n-  { \"NO_REGS\", \"BASE_REGS\", \"GENERAL_REGS\", \"FLOAT_REGS\",\t\\\n-    \"NON_SPECIAL_REGS\", \"MQ_REGS\", \"LINK_REGS\", \"CTR_REGS\",\t\\\n-    \"LINK_OR_CTR_REGS\", \"SPECIAL_REGS\", \"SPEC_OR_GEN_REGS\",\t\\\n-    \"CR0_REGS\", \"CR_REGS\", \"NON_FLOAT_REGS\", \"ALL_REGS\" }\n+#define REG_CLASS_NAMES\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  \"NO_REGS\",\t\t\t\t\t\t\t\t\\\n+  \"R0_REGS\",\t\t\t\t\t\t\t\t\\\n+  \"R3_REGS\",\t\t\t\t\t\t\t\t\\\n+  \"R4_REGS\",\t\t\t\t\t\t\t\t\\\n+  \"R34_REGS\",\t\t\t\t\t\t\t\t\\\n+  \"BASE_REGS\",\t\t\t\t\t\t\t\t\\\n+  \"GENERAL_REGS\",\t\t\t\t\t\t\t\\\n+  \"FLOAT_REGS\",\t\t\t\t\t\t\t\t\\\n+  \"NON_SPECIAL_REGS\",\t\t\t\t\t\t\t\\\n+  \"MQ_REGS\",\t\t\t\t\t\t\t\t\\\n+  \"LINK_REGS\",\t\t\t\t\t\t\t\t\\\n+  \"CTR_REGS\",\t\t\t\t\t\t\t\t\\\n+  \"LINK_OR_CTR_REGS\",\t\t\t\t\t\t\t\\\n+  \"SPECIAL_REGS\",\t\t\t\t\t\t\t\\\n+  \"SPEC_OR_GEN_REGS\",\t\t\t\t\t\t\t\\\n+  \"CR0_REGS\",\t\t\t\t\t\t\t\t\\\n+  \"CR1_REGS\",\t\t\t\t\t\t\t\t\\\n+  \"CR_REGS\",\t\t\t\t\t\t\t\t\\\n+  \"NON_FLOAT_REGS\",\t\t\t\t\t\t\t\\\n+  \"ALL_REGS\"\t\t\t\t\t\t\t\t\\\n+}\n \n /* Define which registers fit in which classes.\n    This is an initializer for a vector of HARD_REG_SET\n    of length N_REG_CLASSES.  */\n \n-#define REG_CLASS_CONTENTS\t\t\t\t\\\n-  { {0, 0, 0}, {0xfffffffe, 0, 8}, {~0, 0, 8},\t\t\\\n-    {0, ~0, 0}, {~0, ~0, 8}, {0, 0, 1}, {0, 0, 2},\t\\\n-    {0, 0, 4}, {0, 0, 6}, {0, 0, 7}, {~0, 0, 15},\t\\\n-    {0, 0, 16}, {0, 0, 0xff0}, {~0, 0, 0xffff},\t\t\\\n-    {~0, ~0, 0xffff} }\n+#define REG_CLASS_CONTENTS\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  { 0x00000000, 0x00000000, 0x00000000 },\t/* NO_REGS */\t\t\\\n+  { 0x00000001, 0x00000000, 0x00000000 },\t/* R0_REGS */\t\t\\\n+  { 0x00000008, 0x00000000, 0x00000000 },\t/* R3_REGS */\t\t\\\n+  { 0x00000010, 0x00000000, 0x00000000 },\t/* R4_REGS */\t\t\\\n+  { 0x00000018, 0x00000000, 0x00000000 },\t/* R34_REGS */\t\t\\\n+  { 0xfffffffe, 0x00000000, 0x00000008 },\t/* BASE_REGS */\t\t\\\n+  { 0xffffffff, 0x00000000, 0x00000008 },\t/* GENERAL_REGS */\t\\\n+  { 0x00000000, 0xffffffff, 0x00000000 },\t/* FLOAT_REGS */\t\\\n+  { 0xffffffff, 0xffffffff, 0x00000008 },\t/* NON_SPECIAL_REGS */\t\\\n+  { 0x00000000, 0x00000000, 0x00000001 },\t/* MQ_REGS */\t\t\\\n+  { 0x00000000, 0x00000000, 0x00000002 },\t/* LINK_REGS */\t\t\\\n+  { 0x00000000, 0x00000000, 0x00000004 },\t/* CTR_REGS */\t\t\\\n+  { 0x00000000, 0x00000000, 0x00000006 },\t/* LINK_OR_CTR_REGS */\t\\\n+  { 0x00000000, 0x00000000, 0x00000007 },\t/* SPECIAL_REGS */\t\\\n+  { 0xffffffff, 0x00000000, 0x0000000f },\t/* SPEC_OR_GEN_REGS */\t\\\n+  { 0x00000000, 0x00000000, 0x00000010 },\t/* CR0_REGS */\t\t\\\n+  { 0x00000000, 0x00000000, 0x00000020 },\t/* CR1_REGS */\t\t\\\n+  { 0x00000000, 0x00000000, 0x00000ff0 },\t/* CR_REGS */\t\t\\\n+  { 0xffffffff, 0x00000000, 0x0000ffff },\t/* NON_FLOAT_REGS */\t\\\n+  { 0xffffffff, 0xffffffff, 0x0000ffff }\t/* ALL_REGS */\t\t\\\n+}\n \n /* The same information, inverted:\n    Return the class number of the smallest class containing\n    reg number REGNO.  This could be a conditional expression\n    or could index an array.  */\n \n #define REGNO_REG_CLASS(REGNO)\t\\\n- ((REGNO) == 0 ? GENERAL_REGS\t\\\n+ ((REGNO) == 0 ? R0_REGS\t\\\n+  : (REGNO) == 3 ? R3_REGS\t\\\n+  : (REGNO) == 4 ? R4_REGS\t\\\n   : (REGNO) < 32 ? BASE_REGS\t\\\n   : FP_REGNO_P (REGNO) ? FLOAT_REGS \\\n   : (REGNO) == 68 ? CR0_REGS\t\\\n+  : (REGNO) == 69 ? CR1_REGS\t\\\n   : CR_REGNO_P (REGNO) ? CR_REGS \\\n   : (REGNO) == 64 ? MQ_REGS\t\\\n   : (REGNO) == 65 ? LINK_REGS\t\\\n@@ -816,8 +875,13 @@ enum reg_class { NO_REGS, BASE_REGS, GENERAL_REGS, FLOAT_REGS,\n    : (C) == 'q' ? MQ_REGS\t\\\n    : (C) == 'c' ? CTR_REGS\t\\\n    : (C) == 'l' ? LINK_REGS\t\\\n+   : (C) == 't' ? CR1_REGS\t\\\n+   : (C) == 'u' ? R3_REGS\t\\\n+   : (C) == 'v' ? R4_REGS\t\\\n+   : (C) == 'w' ? R34_REGS\t\\\n    : (C) == 'x' ? CR0_REGS\t\\\n    : (C) == 'y' ? CR_REGS\t\\\n+   : (C) == 'z' ? R0_REGS\t\\\n    : NO_REGS)\n \n /* The letters I, J, K, L, M, N, and P in a register constraint string\n@@ -2533,6 +2597,12 @@ do {\t\t\t\t\t\t\t\t\t\\\n   {\"u_short_cint_operand\", {CONST_INT}},\t\t\t\\\n   {\"non_short_cint_operand\", {CONST_INT}},\t\t\t\\\n   {\"gpc_reg_operand\", {SUBREG, REG}},\t\t\t\t\\\n+  {\"gpc_reg0_operand\", {SUBREG, REG}},\t\t\t\t\\\n+  {\"gpc_reg3_operand\", {SUBREG, REG}},\t\t\t\t\\\n+  {\"gpc_reg4_operand\", {SUBREG, REG}},\t\t\t\t\\\n+  {\"gpc_reg34_operand\", {SUBREG, REG}},\t\t\t\t\\\n+  {\"cc_reg0_operand\", {SUBREG, REG}},\t\t\t\t\\\n+  {\"cc_reg1_operand\", {SUBREG, REG}},\t\t\t\t\\\n   {\"cc_reg_operand\", {SUBREG, REG}},\t\t\t\t\\\n   {\"reg_or_short_operand\", {SUBREG, REG, CONST_INT}},\t\t\\\n   {\"reg_or_neg_short_operand\", {SUBREG, REG, CONST_INT}},\t\\\n@@ -2583,7 +2653,13 @@ extern int any_operand ();\n extern int short_cint_operand ();\n extern int u_short_cint_operand ();\n extern int non_short_cint_operand ();\n+extern int gpc_reg0_operand ();\n+extern int gpc_reg3_operand ();\n+extern int gpc_reg4_operand ();\n+extern int gpc_reg34_operand ();\n extern int gpc_reg_operand ();\n+extern int cc_reg0_operand ();\n+extern int cc_reg1_operand ();\n extern int cc_reg_operand ();\n extern int reg_or_short_operand ();\n extern int reg_or_neg_short_operand ();"}, {"sha": "dd8d4d4db8c088d8e6da0f516dfabf07f938596e", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 116, "deletions": 77, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebedb4dd4988b5e225c5b39a039e2e43d8392e36/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebedb4dd4988b5e225c5b39a039e2e43d8392e36/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=ebedb4dd4988b5e225c5b39a039e2e43d8392e36", "patch": "@@ -1294,14 +1294,27 @@\n     {\n       emit_move_insn (gen_rtx (REG, SImode, 3), operands[1]);\n       emit_move_insn (gen_rtx (REG, SImode, 4), operands[2]);\n-      emit_insn (gen_divss_call ());\n+      emit_insn (gen_divmodsi4_common ());\n       emit_move_insn (operands[0], gen_rtx (REG, SImode, 3));\n       emit_move_insn (operands[3], gen_rtx (REG, SImode, 4));\n       DONE;\n     }\n }\")\n \n-(define_insn \"\"\n+(define_insn \"divmodsi4_common\"\n+  [(set (reg:SI 3)\n+\t(div:SI (reg:SI 3) (reg:SI 4)))\n+   (set (reg:SI 4)\n+\t(mod:SI (reg:SI 3) (reg:SI 4)))\n+   (clobber (match_scratch:SI 0 \"=l\"))\n+   (clobber (match_scratch:SI 1 \"=z\"))\n+   (clobber (match_scratch:CC 2 \"=x\"))\n+   (clobber (match_scratch:CC 3 \"=t\"))]\n+  \"! TARGET_POWER && ! TARGET_POWERPC\"\n+  \"bla __divss\"\n+  [(set_attr \"type\" \"jmpreg\")])\n+\n+(define_insn \"*divmodsi4_power\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(div:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t(match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n@@ -1311,7 +1324,7 @@\n   \"divs %0,%1,%2\"\n   [(set_attr \"type\" \"idiv\")])\n \n-(define_insn \"\"\n+(define_insn \"*divsi3_powerpc\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n         (div:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n                 (match_operand:SI 2 \"gpc_reg_operand\" \"r\")))]\n@@ -1330,13 +1343,24 @@\n     {\n       emit_move_insn (gen_rtx (REG, SImode, 3), operands[1]);\n       emit_move_insn (gen_rtx (REG, SImode, 4), operands[2]);\n-      emit_insn (gen_quous_call ());\n+      emit_insn (gen_udivsi3_common ());\n       emit_move_insn (operands[0], gen_rtx (REG, SImode, 3));\n       DONE;\n     }\n }\")\n \n-(define_insn \"\"\n+(define_insn \"udivsi3_common\"\n+  [(set (reg:SI 3)\n+\t(udiv:SI (reg:SI 3) (reg:SI 4)))\n+   (clobber (match_scratch:SI 0 \"=l\"))\n+   (clobber (match_scratch:SI 1 \"=z\"))\n+   (clobber (match_scratch:CC 2 \"=x\"))\n+   (clobber (match_scratch:CC 3 \"=t\"))]\n+  \"! TARGET_POWER && ! TARGET_POWERPC\"\n+  \"bla __quous\"\n+  [(set_attr \"type\" \"jmpreg\")])\n+\n+(define_insn \"*udivsi3_powerpc\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n         (udiv:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n                  (match_operand:SI 2 \"gpc_reg_operand\" \"r\")))]\n@@ -1366,12 +1390,21 @@\n     {\n       emit_move_insn (gen_rtx (REG, SImode, 3), operands[1]);\n       emit_move_insn (gen_rtx (REG, SImode, 4), operands[2]);\n-      emit_insn (gen_quoss_call ());\n+      emit_insn (gen_divsi3_common ());\n       emit_move_insn (operands[0], gen_rtx (REG, SImode, 3));\n       DONE;\n     }\n }\")\n \n+(define_insn \"divsi3_common\"\n+  [(set (reg:SI 3)\n+\t(div:SI (reg:SI 3) (reg:SI 4)))\n+   (clobber (match_scratch:SI 0 \"=l\"))\n+   (clobber (match_scratch:SI 1 \"=z\"))]\n+  \"! TARGET_POWER && ! TARGET_POWERPC\"\n+  \"bla __quoss\"\n+  [(set_attr \"type\" \"jmpreg\")])\n+\n (define_expand \"modsi3\"\n   [(use (match_operand:SI 0 \"gpc_reg_operand\" \"\"))\n    (use (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n@@ -1499,7 +1532,7 @@\n       {\n \temit_move_insn (gen_rtx (REG, SImode, 3), operands[1]);\n \temit_move_insn (gen_rtx (REG, SImode, 4), operands[2]);\n-\temit_insn (gen_divus_call ());\n+\temit_insn (gen_udivmodsi4_common ());\n \temit_move_insn (operands[0], gen_rtx (REG, SImode, 3));\n \temit_move_insn (operands[3], gen_rtx (REG, SImode, 4));\n \tDONE;\n@@ -1525,64 +1558,19 @@\n   DONE;\n }\")\n \n-;; AIX architecture-independent common-mode multiply (DImode),\n-;; divide/modulus, and quotient subroutine calls.  Input operands in R3 and\n-;; R4; results in R3 and sometimes R4; link register always clobbered by bla\n-;; instruction; R0 sometimes clobbered; also, MQ sometimes clobbered but\n-;; assumed unused if generating common-mode, so ignore.\n-(define_insn \"mulh_call\"\n-  [(set (reg:SI 3)\n-\t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (sign_extend:DI (reg:SI 3))\n-\t\t\t       (sign_extend:DI (reg:SI 4)))\n-\t\t      (const_int 32))))\n-   (clobber (match_scratch:SI 0 \"=l\"))]\n-  \"! TARGET_POWER && ! TARGET_POWERPC\"\n-  \"bla __mulh\")\n-\n-(define_insn \"mull_call\"\n-  [(set (reg:DI 3)\n-\t(mult:DI (sign_extend:DI (reg:SI 3))\n-\t\t (sign_extend:DI (reg:SI 4))))\n-   (clobber (match_scratch:SI 0 \"=l\"))\n-   (clobber (reg:SI 0))]\n-  \"! TARGET_POWER && ! TARGET_POWERPC\"\n-  \"bla __mull\")\n-\n-(define_insn \"divss_call\"\n-  [(set (reg:SI 3)\n-\t(div:SI (reg:SI 3) (reg:SI 4)))\n-   (set (reg:SI 4)\n-\t(mod:SI (reg:SI 3) (reg:SI 4)))\n-   (clobber (match_scratch:SI 0 \"=l\"))\n-   (clobber (reg:SI 0))]\n-  \"! TARGET_POWER && ! TARGET_POWERPC\"\n-  \"bla __divss\")\n-\n-(define_insn \"divus_call\"\n+(define_insn \"udivmodsi4_common\"\n   [(set (reg:SI 3)\n \t(udiv:SI (reg:SI 3) (reg:SI 4)))\n    (set (reg:SI 4)\n \t(umod:SI (reg:SI 3) (reg:SI 4)))\n    (clobber (match_scratch:SI 0 \"=l\"))\n-   (clobber (reg:SI 0))]\n-  \"! TARGET_POWER && ! TARGET_POWERPC\"\n-  \"bla __divus\")\n-\n-(define_insn \"quoss_call\"\n-  [(set (reg:SI 3)\n-\t(div:SI (reg:SI 3) (reg:SI 4)))\n-   (clobber (match_scratch:SI 0 \"=l\"))]\n+   (clobber (match_scratch:SI 1 \"=z\"))\n+   (clobber (match_scratch:CC 2 \"=x\"))\n+   (clobber (match_scratch:CC 3 \"=t\"))]\n   \"! TARGET_POWER && ! TARGET_POWERPC\"\n-  \"bla __quoss\")\n+  \"bla __divus\"\n+  [(set_attr \"type\" \"jmpreg\")])\n \n-(define_insn \"quous_call\"\n-  [(set (reg:SI 3)\n-\t(udiv:SI (reg:SI 3) (reg:SI 4)))\n-   (clobber (match_scratch:SI 0 \"=l\"))\n-   (clobber (reg:SI 0))]\n-  \"! TARGET_POWER && ! TARGET_POWERPC\"\n-  \"bla __quous\")\n \f\n (define_insn \"andsi3\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n@@ -3684,14 +3672,7 @@\n {\n   if (! TARGET_POWER && ! TARGET_POWERPC)\n     {\n-      int endian = (WORDS_BIG_ENDIAN == 0);\n-      emit_move_insn (gen_rtx (REG, SImode, 3), operands[1]);\n-      emit_move_insn (gen_rtx (REG, SImode, 4), operands[2]);\n-      emit_insn (gen_mull_call ());\n-      emit_move_insn (operand_subword (operands[0], endian, 0, DImode),\n-\t\t      gen_rtx (REG, SImode, 3));\n-      emit_move_insn (operand_subword (operands[0], 1 - endian, 0, DImode),\n-\t\t      gen_rtx (REG, SImode, 4));\n+      emit_insn (gen_mulsidi3_common (operands[0], operands[1], operands[2]));\n       DONE;\n     }\n   else if (TARGET_POWER)\n@@ -3701,6 +3682,16 @@\n     }\n }\")\n \n+(define_insn \"mulsidi3_common\"\n+  [(set (match_operand:DI 0 \"gpc_reg3_operand\" \"=w\")\n+\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"gpc_reg3_operand\" \"%u\"))\n+\t\t (sign_extend:DI (match_operand:SI 2 \"gpc_reg4_operand\" \"v\"))))\n+   (clobber (match_scratch:SI 3 \"=l\"))\n+   (clobber (match_scratch:SI 4 \"=z\"))]\n+  \"! TARGET_POWER && ! TARGET_POWERPC\"\n+  \"bla __mull\"\n+  [(set_attr \"type\" \"jmpreg\")])\n+\n (define_insn \"mulsidi3_mq\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n \t(mult:DI (sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n@@ -3711,7 +3702,7 @@\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"length\" \"8\")])\n \n-(define_insn \"\"\n+(define_insn \"*mulsidi3_powerpc\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r\")\n \t(mult:DI (sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n \t\t (sign_extend:DI (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))]\n@@ -3725,6 +3716,26 @@\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"length\" \"8\")])\n \n+(define_split\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n+\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n+\t\t (sign_extend:DI (match_operand:SI 2 \"gpc_reg_operand\" \"\"))))]\n+  \"TARGET_POWERPC && ! TARGET_POWERPC64\"\n+  [(set (match_dup 3)\n+\t(truncate:SI\n+\t (lshiftrt:DI (mult:DI (sign_extend:DI (match_dup 1))\n+\t\t\t       (sign_extend:DI (match_dup 2)))\n+\t\t      (const_int 32))))\n+   (set (match_dup 4)\n+\t(mult:SI (match_dup 1)\n+\t\t (match_dup 2)))]\n+  \"\n+{\n+  int endian = (WORDS_BIG_ENDIAN == 0);\n+  operands[3] = operand_subword (operands[0], endian, 0, DImode);\n+  operands[4] = operand_subword (operands[0], 1 - endian, 0, DImode);\n+}\")\n+\n (define_insn \"umulsidi3\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r\")\n \t(mult:DI (zero_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n@@ -3739,6 +3750,26 @@\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"length\" \"8\")])\n \n+(define_split\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n+\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n+\t\t (zero_extend:DI (match_operand:SI 2 \"gpc_reg_operand\" \"\"))))]\n+  \"TARGET_POWERPC && ! TARGET_POWERPC64\"\n+  [(set (match_dup 3)\n+\t(truncate:SI\n+\t (lshiftrt:DI (mult:DI (zero_extend:DI (match_dup 1))\n+\t\t\t       (zero_extend:DI (match_dup 2)))\n+\t\t      (const_int 32))))\n+   (set (match_dup 4)\n+\t(mult:SI (match_dup 1)\n+\t\t (match_dup 2)))]\n+  \"\n+{\n+  int endian = (WORDS_BIG_ENDIAN == 0);\n+  operands[3] = operand_subword (operands[0], endian, 0, DImode);\n+  operands[4] = operand_subword (operands[0], 1 - endian, 0, DImode);\n+}\")\n+\n (define_expand \"smulsi3_highpart\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(truncate:SI\n@@ -3754,7 +3785,7 @@\n     {\n       emit_move_insn (gen_rtx (REG, SImode, 3), operands[1]);\n       emit_move_insn (gen_rtx (REG, SImode, 4), operands[2]);\n-      emit_insn (gen_mulh_call ());\n+      emit_insn (gen_smulsi3_highpart_common ());\n       emit_move_insn (operands[0], gen_rtx (REG, SImode, 3));\n       DONE;\n     }\n@@ -3765,26 +3796,34 @@\n     }\n }\")\n \n+(define_insn \"smulsi3_highpart_common\"\n+  [(set (reg:SI 3)\n+\t(truncate:SI\n+\t (lshiftrt:DI (mult:DI (sign_extend:DI (reg:SI 3))\n+\t\t\t       (sign_extend:DI (reg:SI 4)))\n+\t\t      (const_int 32))))\n+   (clobber (match_scratch:SI 0 \"=l\"))\n+   (clobber (reg:SI 4))]\n+  \"! TARGET_POWER && ! TARGET_POWERPC\"\n+  \"bla __mulh\"\n+  [(set_attr \"type\" \"jmpreg\")])\n+\n (define_insn \"smulsi3_highpart_mq\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (sign_extend:DI\n-\t\t\t\t(match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n-\t\t\t       (sign_extend:DI\n-\t\t\t\t(match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n+\t (lshiftrt:DI (mult:DI (sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n+\t\t\t       (sign_extend:DI (match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n \t\t      (const_int 32))))\n    (clobber (match_scratch:SI 3 \"=q\"))]\n   \"TARGET_POWER\"\n   \"mul %0,%1,%2\"\n   [(set_attr \"type\" \"imul\")])\n \n-(define_insn \"\"\n+(define_insn \"*smulsi3_highpart_powerpc\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (sign_extend:DI\n-\t\t\t\t(match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n-\t\t\t       (sign_extend:DI\n-\t\t\t\t(match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n+\t (lshiftrt:DI (mult:DI (sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n+\t\t\t       (sign_extend:DI (match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n \t\t      (const_int 32))))]\n   \"TARGET_POWERPC\"\n   \"mulhw %0,%1,%2\""}, {"sha": "823b03b4b56f1906d7ed241fe7effc80c0674b17", "filename": "gcc/config/rs6000/t-newas", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebedb4dd4988b5e225c5b39a039e2e43d8392e36/gcc%2Fconfig%2Frs6000%2Ft-newas", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebedb4dd4988b5e225c5b39a039e2e43d8392e36/gcc%2Fconfig%2Frs6000%2Ft-newas", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-newas?ref=ebedb4dd4988b5e225c5b39a039e2e43d8392e36", "patch": "@@ -17,18 +17,21 @@ fp-bit.c: $(srcdir)/config/fp-bit.c\n # different processor models\n \n MULTILIB_OPTIONS\t= msoft-float \\\n-\t\t\t  mcpu=common/mcpu=power/mcpu=powerpc/mcpu=601/mcpu=power2\n+\t\t\t  mcpu=common/mcpu=power/mcpu=powerpc\n \n MULTILIB_DIRNAMES\t= soft-float \\\n-\t\t\t  common power powerpc 601 power2\n+\t\t\t  common power powerpc\n \n MULTILIB_MATCHES\t= msoft-float=mcpu?403 \\\n \t\t\t  mcpu?power=mpower \\\n \t\t\t  mcpu?power=mrios1 \\\n-\t\t\t  mcpu?power=mcpu=rios1 \\\n-\t\t\t  mcpu?power2=mpower2 \\\n-\t\t\t  mcpu?power2=mrios2 \\\n-\t\t\t  mcpu?power2=mcpu=rios2 \\\n+\t\t\t  mcpu?power=mcpu?rios1 \\\n+\t\t\t  mcpu?power=mcpu?rsc \\\n+\t\t\t  mcpu?power=mcpu?rsc1 \\\n+\t\t\t  mcpu?power=mpower2 \\\n+\t\t\t  mcpu?power=mrios2 \\\n+\t\t\t  mcpu?power=mcpu=rios2 \\\n+\t\t\t  mcpu?powerpc=mcpu?601 \\\n \t\t\t  mcpu?powerpc=mcpu?602 \\\n \t\t\t  mcpu?powerpc=mcpu?603 \\\n \t\t\t  mcpu?powerpc=mcpu?603e \\\n@@ -37,9 +40,7 @@ MULTILIB_MATCHES\t= msoft-float=mcpu?403 \\\n \t\t\t  mcpu?powerpc=mcpu?403 \\\n \t\t\t  mcpu?powerpc=mpowerpc \\\n \t\t\t  mcpu?powerpc=mpowerpc-gpopt \\\n-\t\t\t  mcpu?powerpc=mpowerpc-gfxopt \\\n-\t\t\t  mcpu?601=mcpu?rsc \\\n-\t\t\t  mcpu?601=mcpu?rsc1\n+\t\t\t  mcpu?powerpc=mpowerpc-gfxopt\n \n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib"}, {"sha": "285f8259d07ec49d03d56eb5240171d35d14903e", "filename": "gcc/config/rs6000/t-xnewas", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebedb4dd4988b5e225c5b39a039e2e43d8392e36/gcc%2Fconfig%2Frs6000%2Ft-xnewas", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebedb4dd4988b5e225c5b39a039e2e43d8392e36/gcc%2Fconfig%2Frs6000%2Ft-xnewas", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-xnewas?ref=ebedb4dd4988b5e225c5b39a039e2e43d8392e36", "patch": "@@ -23,18 +23,21 @@ fp-bit.c: $(srcdir)/config/fp-bit.c\n # different processor models\n \n MULTILIB_OPTIONS\t= msoft-float \\\n-\t\t\t  mcpu=common/mcpu=power/mcpu=powerpc/mcpu=601/mcpu=power2\n+\t\t\t  mcpu=common/mcpu=power/mcpu=powerpc\n \n MULTILIB_DIRNAMES\t= soft-float \\\n-\t\t\t  common power powerpc 601 power2\n+\t\t\t  common power powerpc\n \n MULTILIB_MATCHES\t= msoft-float=mcpu?403 \\\n \t\t\t  mcpu?power=mpower \\\n \t\t\t  mcpu?power=mrios1 \\\n-\t\t\t  mcpu?power=mcpu=rios1 \\\n-\t\t\t  mcpu?power2=mpower2 \\\n-\t\t\t  mcpu?power2=mrios2 \\\n-\t\t\t  mcpu?power2=mcpu=rios2 \\\n+\t\t\t  mcpu?power=mcpu?rios1 \\\n+\t\t\t  mcpu?power=mcpu?rsc \\\n+\t\t\t  mcpu?power=mcpu?rsc1 \\\n+\t\t\t  mcpu?power=mpower2 \\\n+\t\t\t  mcpu?power=mrios2 \\\n+\t\t\t  mcpu?power=mcpu=rios2 \\\n+\t\t\t  mcpu?powerpc=mcpu?601 \\\n \t\t\t  mcpu?powerpc=mcpu?602 \\\n \t\t\t  mcpu?powerpc=mcpu?603 \\\n \t\t\t  mcpu?powerpc=mcpu?603e \\\n@@ -43,9 +46,7 @@ MULTILIB_MATCHES\t= msoft-float=mcpu?403 \\\n \t\t\t  mcpu?powerpc=mcpu?403 \\\n \t\t\t  mcpu?powerpc=mpowerpc \\\n \t\t\t  mcpu?powerpc=mpowerpc-gpopt \\\n-\t\t\t  mcpu?powerpc=mpowerpc-gfxopt \\\n-\t\t\t  mcpu?601=mcpu?rsc \\\n-\t\t\t  mcpu?601=mcpu?rsc1\n+\t\t\t  mcpu?powerpc=mpowerpc-gfxopt\n \n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib"}]}