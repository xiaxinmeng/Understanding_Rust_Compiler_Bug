{"sha": "4e3f84b7ca86d5bd9d90572fbcfdc03bca4f78ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUzZjg0YjdjYTg2ZDViZDlkOTA1NzJmYmNmZGMwM2JjYTRmNzhhYw==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2003-06-29T12:02:58Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2003-06-29T12:02:58Z"}, "message": "cp-tree.h (language_to_string): Adjust declaration.\n\n\t* cp-tree.h (language_to_string): Adjust declaration.\n\t* dump.c (cp_dump_tree): Adjust usage.\n\t* error.c (dump_char): Use output_formatted_scalar. Tidy.\n\t(parm_to_string): Lose unused parameter.  Tidy.\n\t(expr_to_string): Likewise.\n\t(code_to_string): Likewise.\n\t(language_to_string): Likewise.\n\t(op_to_string): Likewise.\n\t(assop_to_string): Likewise.\n\t(digit_buffer): Remove.\n\t(dump_type): Format builtin vector type as __vector__.\n\nFrom-SVN: r68668", "tree": {"sha": "3c0a6e6bec4f0cd618dd080767811d004989e3f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c0a6e6bec4f0cd618dd080767811d004989e3f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e3f84b7ca86d5bd9d90572fbcfdc03bca4f78ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e3f84b7ca86d5bd9d90572fbcfdc03bca4f78ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e3f84b7ca86d5bd9d90572fbcfdc03bca4f78ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e3f84b7ca86d5bd9d90572fbcfdc03bca4f78ac/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4714db5aef1205624a11f594c7bd45e87a4a0092", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4714db5aef1205624a11f594c7bd45e87a4a0092", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4714db5aef1205624a11f594c7bd45e87a4a0092"}], "stats": {"total": 85, "additions": 48, "deletions": 37}, "files": [{"sha": "fe79719bfef50bc1680ef3bf6026c99f7fa74a58", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e3f84b7ca86d5bd9d90572fbcfdc03bca4f78ac/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e3f84b7ca86d5bd9d90572fbcfdc03bca4f78ac/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4e3f84b7ca86d5bd9d90572fbcfdc03bca4f78ac", "patch": "@@ -1,3 +1,17 @@\n+2003-06-29  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* cp-tree.h (language_to_string): Adjust declaration.\n+\t* dump.c (cp_dump_tree): Adjust usage.\n+\t* error.c (dump_char): Use output_formatted_scalar. Tidy.\n+\t(parm_to_string): Lose unused parameter.  Tidy.\n+\t(expr_to_string): Likewise.\n+\t(code_to_string): Likewise.\n+\t(language_to_string): Likewise.\n+\t(op_to_string): Likewise.\n+\t(assop_to_string): Likewise.\n+\t(digit_buffer): Remove.\n+\t(dump_type): Format builtin vector type as __vector__.\n+\n 2003-06-29  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* error.c (print_integer): Remove."}, {"sha": "d98e92c0f50b59c7f10a148afe9056220664b18c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e3f84b7ca86d5bd9d90572fbcfdc03bca4f78ac/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e3f84b7ca86d5bd9d90572fbcfdc03bca4f78ac/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4e3f84b7ca86d5bd9d90572fbcfdc03bca4f78ac", "patch": "@@ -3820,7 +3820,7 @@ extern const char *decl_as_string\t\t(tree, int);\n extern const char *expr_as_string\t\t(tree, int);\n extern const char *context_as_string            (tree, int);\n extern const char *lang_decl_name\t\t(tree, int);\n-extern const char *language_to_string           (enum languages, int);\n+extern const char *language_to_string           (enum languages);\n extern void print_instantiation_context         (void);\n \n /* in except.c */"}, {"sha": "c8091892cb7465b22f50283f26ded6bec72822ce", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e3f84b7ca86d5bd9d90572fbcfdc03bca4f78ac/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e3f84b7ca86d5bd9d90572fbcfdc03bca4f78ac/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=4e3f84b7ca86d5bd9d90572fbcfdc03bca4f78ac", "patch": "@@ -214,7 +214,7 @@ cp_dump_tree (void* dump_info, tree t)\n   if (DECL_P (t))\n     {\n       if (DECL_LANG_SPECIFIC (t) && DECL_LANGUAGE (t) != lang_cplusplus)\n-\tdump_string (di, language_to_string (DECL_LANGUAGE (t), 0));\n+\tdump_string (di, language_to_string (DECL_LANGUAGE (t)));\n     }\n \n   switch (code)"}, {"sha": "c1332b765ff24648e2b59757c7d157f1776cd3a5", "filename": "gcc/cp/error.c", "status": "modified", "additions": 32, "deletions": 35, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e3f84b7ca86d5bd9d90572fbcfdc03bca4f78ac/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e3f84b7ca86d5bd9d90572fbcfdc03bca4f78ac/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=4e3f84b7ca86d5bd9d90572fbcfdc03bca4f78ac", "patch": "@@ -63,14 +63,14 @@ static output_buffer *scratch_buffer = &scratch_buffer_rec;\n    output_clear_message_text (scratch_buffer)\n \n static const char *args_to_string (tree, int);\n-static const char *assop_to_string (enum tree_code, int);\n-static const char *code_to_string (enum tree_code, int);\n+static const char *assop_to_string (enum tree_code);\n+static const char *code_to_string (enum tree_code);\n static const char *cv_to_string (tree, int);\n static const char *decl_to_string (tree, int);\n-static const char *expr_to_string (tree, int);\n+static const char *expr_to_string (tree);\n static const char *fndecl_to_string (tree, int);\n-static const char *op_to_string\t(enum tree_code, int);\n-static const char *parm_to_string (int, int);\n+static const char *op_to_string\t(enum tree_code);\n+static const char *parm_to_string (int);\n static const char *type_to_string (tree, int);\n \n static void dump_type (tree, int);\n@@ -186,10 +186,6 @@ dump_qualifiers (tree t, enum pad p)\n   return p;\n }\n \n-/* This must be large enough to hold any printed integer or floating-point\n-   value.  */\n-static char digit_buffer[128];\n-\n /* Dump the template ARGument under control of FLAGS.  */\n \n static void\n@@ -359,7 +355,7 @@ dump_type (tree t, int flags)\n       break;\n \n     case VECTOR_TYPE:\n-      output_add_string (scratch_buffer, \"vector \");\n+      output_add_string (scratch_buffer, \"__vector__ \");\n       {\n \t/* The subtype of a VECTOR_TYPE is something like intQI_type_node,\n \t   which has no name and is not very useful for diagnostics.  So\n@@ -1371,10 +1367,8 @@ dump_char (int c)\n       if (ISPRINT (c))\n \toutput_add_character (scratch_buffer, c);\n       else\n-\t{\n-\t  sprintf (digit_buffer, \"\\\\%03o\", (int) c);\n-\t  output_add_string (scratch_buffer, digit_buffer);\n-\t}\n+        output_formatted_scalar (scratch_buffer, \"\\\\%03o\", (unsigned) c);\n+      break;\n     }\n }\n \n@@ -1471,9 +1465,11 @@ dump_expr (tree t, int flags)\n \t\t\t\t       ~TREE_INT_CST_HIGH (val)\n \t                               + !TREE_INT_CST_LOW (val));\n \t          }\n-\t\tsprintf (digit_buffer, HOST_WIDE_INT_PRINT_DOUBLE_HEX,\n+\t\tsprintf (scratch_buffer->digit_buffer,\n+                         HOST_WIDE_INT_PRINT_DOUBLE_HEX,\n \t\t\t TREE_INT_CST_HIGH (val), TREE_INT_CST_LOW (val));\n-\t\toutput_add_string (scratch_buffer, digit_buffer);\n+\t\toutput_add_string\n+                  (scratch_buffer, scratch_buffer->digit_buffer);\n \t      }\n \t    else\n \t      output_host_wide_integer (scratch_buffer, TREE_INT_CST_LOW (t));\n@@ -1482,9 +1478,9 @@ dump_expr (tree t, int flags)\n       break;\n \n     case REAL_CST:\n-      real_to_decimal (digit_buffer, &TREE_REAL_CST (t),\n-\t\t       sizeof (digit_buffer), 0, 1);\n-      output_add_string (scratch_buffer, digit_buffer);\n+      real_to_decimal (scratch_buffer->digit_buffer, &TREE_REAL_CST (t),\n+\t\t       sizeof (scratch_buffer->digit_buffer), 0, 1);\n+      output_add_string (scratch_buffer, scratch_buffer->digit_buffer);\n       break;\n \n     case PTRMEM_CST:\n@@ -2160,7 +2156,7 @@ decl_to_string (tree decl, int verbose)\n }\n \n static const char *\n-expr_to_string (tree decl, int verbose ATTRIBUTE_UNUSED)\n+expr_to_string (tree decl)\n {\n   reinit_global_formatting_buffer ();\n \n@@ -2186,13 +2182,13 @@ fndecl_to_string (tree fndecl, int verbose)\n \n \n static const char *\n-code_to_string (enum tree_code c, int v ATTRIBUTE_UNUSED)\n+code_to_string (enum tree_code c)\n {\n   return tree_code_name [c];\n }\n \n const char *\n-language_to_string (enum languages c, int v ATTRIBUTE_UNUSED)\n+language_to_string (enum languages c)\n {\n   switch (c)\n     {\n@@ -2214,22 +2210,23 @@ language_to_string (enum languages c, int v ATTRIBUTE_UNUSED)\n /* Return the proper printed version of a parameter to a C++ function.  */\n \n static const char *\n-parm_to_string (int p, int v ATTRIBUTE_UNUSED)\n+parm_to_string (int p)\n {\n   if (p < 0)\n-    return \"`this'\";\n+    output_add_string (scratch_buffer, \"'this'\");\n+  else\n+    output_decimal (scratch_buffer, p + 1);\n \n-  sprintf (digit_buffer, \"%d\", p+1);\n-  return digit_buffer;\n+  return output_finalize_message (scratch_buffer);\n }\n \n static const char *\n-op_to_string (enum tree_code p, int v ATTRIBUTE_UNUSED)\n+op_to_string (enum tree_code p)\n {\n   tree id;\n \n   id = operator_name_info[(int) p].identifier;\n-  return id ? IDENTIFIER_POINTER (id) : \"{unknown}\";\n+  return id ? IDENTIFIER_POINTER (id) : \"<unknown>\";\n }\n \n static const char *\n@@ -2250,7 +2247,7 @@ type_to_string (tree typ, int verbose)\n }\n \n static const char *\n-assop_to_string (enum tree_code p, int v ATTRIBUTE_UNUSED)\n+assop_to_string (enum tree_code p)\n {\n   tree id;\n \n@@ -2478,14 +2475,14 @@ cp_printer (output_buffer *buffer, text_info *text)\n   switch (*text->format_spec)\n     {\n     case 'A': result = args_to_string (next_tree, verbose);\tbreak;\n-    case 'C': result = code_to_string (next_tcode, verbose);\tbreak;\n+    case 'C': result = code_to_string (next_tcode);\t        break;\n     case 'D': result = decl_to_string (next_tree, verbose);\tbreak;\n-    case 'E': result = expr_to_string (next_tree, verbose);\tbreak;\n+    case 'E': result = expr_to_string (next_tree);      \tbreak;\n     case 'F': result = fndecl_to_string (next_tree, verbose);\tbreak;\n-    case 'L': result = language_to_string (next_lang, verbose); break;\n-    case 'O': result = op_to_string (next_tcode, verbose);\tbreak;\n-    case 'P': result = parm_to_string (next_int, verbose);\tbreak;\n-    case 'Q': result = assop_to_string (next_tcode, verbose);\tbreak;\n+    case 'L': result = language_to_string (next_lang);          break;\n+    case 'O': result = op_to_string (next_tcode);       \tbreak;\n+    case 'P': result = parm_to_string (next_int);\t        break;\n+    case 'Q': result = assop_to_string (next_tcode);\t        break;\n     case 'T': result = type_to_string (next_tree, verbose);\tbreak;\n     case 'V': result = cv_to_string (next_tree, verbose);\tbreak;\n  "}]}