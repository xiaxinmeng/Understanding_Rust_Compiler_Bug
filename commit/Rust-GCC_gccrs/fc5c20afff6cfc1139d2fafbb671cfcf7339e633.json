{"sha": "fc5c20afff6cfc1139d2fafbb671cfcf7339e633", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM1YzIwYWZmZjZjZmMxMTM5ZDJmYWZiYjY3MWNmY2Y3MzM5ZTYzMw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2008-04-08T06:55:17Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-04-08T06:55:17Z"}, "message": "s-imgdec.adb (Set_Decimal_Digits): Fix error when input is zero with negative scale\n\n2008-04-08  Robert Dewar  <dewar@adacore.com>\n\n\t* s-imgdec.adb (Set_Decimal_Digits): Fix error when input is zero with\n\tnegative scale\n\t(Set_Decimal_Digits): Properly handle Aft=0 (equivalent to Aft=1)\n\tProperly handle case where Aft > Scale and input number is less than\n\tone.\n\nFrom-SVN: r134050", "tree": {"sha": "606575cd1e87c03094b83637575a2f6aa6427b45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/606575cd1e87c03094b83637575a2f6aa6427b45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc5c20afff6cfc1139d2fafbb671cfcf7339e633", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc5c20afff6cfc1139d2fafbb671cfcf7339e633", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc5c20afff6cfc1139d2fafbb671cfcf7339e633", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc5c20afff6cfc1139d2fafbb671cfcf7339e633/comments", "author": null, "committer": null, "parents": [{"sha": "ca44152fc58297f5c0bef56190b6968549e1438e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca44152fc58297f5c0bef56190b6968549e1438e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca44152fc58297f5c0bef56190b6968549e1438e"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "facafcb495f5738ec341edece98bcae92de47e15", "filename": "gcc/ada/s-imgdec.adb", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5c20afff6cfc1139d2fafbb671cfcf7339e633/gcc%2Fada%2Fs-imgdec.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5c20afff6cfc1139d2fafbb671cfcf7339e633/gcc%2Fada%2Fs-imgdec.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgdec.adb?ref=fc5c20afff6cfc1139d2fafbb671cfcf7339e633", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -129,6 +129,10 @@ package body System.Img_Dec is\n       pragma Inline (Set_Zeroes);\n       --  Set N zeroes, no effect if N is negative\n \n+      -----------\n+      -- Round --\n+      -----------\n+\n       procedure Round (N : Natural) is\n          D : Character;\n \n@@ -250,15 +254,14 @@ package body System.Img_Dec is\n \n       if Exp > 0 then\n          Set_Blanks_And_Sign (Fore - 1);\n-         Round (Aft + 2);\n+         Round (Digits_After_Point + 2);\n          Set (Digs (FD));\n          FD := FD + 1;\n          ND := ND - 1;\n          Set ('.');\n \n          if ND >= Digits_After_Point then\n             Set_Digits (FD, FD + Digits_After_Point - 1);\n-\n          else\n             Set_Digits (FD, LD);\n             Set_Zeroes (Digits_After_Point - ND);\n@@ -317,27 +320,42 @@ package body System.Img_Dec is\n             Set_Blanks_And_Sign (Fore - 1);\n             Set ('0');\n             Set ('.');\n-\n-            Set_Zeroes (Digits_After_Point - ND);\n+            Set_Zeroes (-Digits_Before_Point);\n             Set_Digits (FD, LD);\n+            Set_Zeroes (Digits_After_Point - Scale);\n \n          --  At least one digit before point in input\n \n          else\n-            Set_Blanks_And_Sign (Fore - Digits_Before_Point);\n-\n             --  Less digits in input than are needed before point\n             --    Input: 1PP  Output: 100.000\n \n             if ND < Digits_Before_Point then\n-               Set_Digits (FD, LD);\n-               Set_Zeroes (Digits_Before_Point - ND);\n+\n+               --  Special case, if the input is the single digit 0, then we\n+               --  do not want 000.000, but instead 0.000.\n+\n+               if ND = 1 and then Digs (FD) = '0' then\n+                  Set_Blanks_And_Sign (Fore - 1);\n+                  Set ('0');\n+\n+               --  Normal case where we need to output scaling zeroes\n+\n+               else\n+                  Set_Blanks_And_Sign (Fore - Digits_Before_Point);\n+                  Set_Digits (FD, LD);\n+                  Set_Zeroes (Digits_Before_Point - ND);\n+               end if;\n+\n+               --  Set period and zeroes after the period\n+\n                Set ('.');\n                Set_Zeroes (Digits_After_Point);\n \n             --  Input has full amount of digits before decimal point\n \n             else\n+               Set_Blanks_And_Sign (Fore - Digits_Before_Point);\n                Set_Digits (FD, FD + Digits_Before_Point - 1);\n                Set ('.');\n                Set_Digits (FD + Digits_Before_Point, LD);"}]}