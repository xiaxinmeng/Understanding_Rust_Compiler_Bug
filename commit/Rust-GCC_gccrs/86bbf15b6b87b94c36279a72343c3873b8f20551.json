{"sha": "86bbf15b6b87b94c36279a72343c3873b8f20551", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZiYmYxNWI2Yjg3Yjk0YzM2Mjc5YTcyMzQzYzM4NzNiOGYyMDU1MQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-08-26T10:41:37Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-08-26T10:41:37Z"}, "message": "Add new std::basic_string constructor (LWG 2583)\n\n\t* config/abi/pre/gnu.ver (GLIBCXX_3.4, GLIBCXX_3.4.21): Use more\n\tprecise patterns for basic_string constructors.\n\t(GLIBCXX_3.4.23): Export new constructors.\n\t* doc/xml/manual/intro.xml: Document LWG 2583 status.\n\t* doc/html/*: Regenerate.\n\t* include/bits/basic_string.h [_GLIBCXX_USE_CXX11_ABI]\n\t(basic_string(const basic_string&, size_type, const Alloc&)): Add\n\tnew constructor for LWG 2583.\n\t(basic_string(const basic_string&, size_type, size_type)): Remove\n\tdefault argument.\n\t[!_GLIBCXX_USE_CXX11_ABI]: Likewise.\n\t* include/bits/basic_string.tcc [!_GLIBCXX_USE_CXX11_ABI]: Define it.\n\t* testsuite/21_strings/basic_string/cons/char/8.cc: New test.\n\t* testsuite/21_strings/basic_string/cons/wchar_t/8.cc: New test.\n\nFrom-SVN: r239773", "tree": {"sha": "9d9fb8d2a5ed3f9cae9cb638921086c39e5690d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d9fb8d2a5ed3f9cae9cb638921086c39e5690d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86bbf15b6b87b94c36279a72343c3873b8f20551", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86bbf15b6b87b94c36279a72343c3873b8f20551", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86bbf15b6b87b94c36279a72343c3873b8f20551", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86bbf15b6b87b94c36279a72343c3873b8f20551/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83c7402aa5d210a822e025f353c8f9bce027a4a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83c7402aa5d210a822e025f353c8f9bce027a4a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83c7402aa5d210a822e025f353c8f9bce027a4a7"}], "stats": {"total": 253, "additions": 243, "deletions": 10}, "files": [{"sha": "8b552b08cfb9cf12ff27bbbc7987d09bd6c27620", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86bbf15b6b87b94c36279a72343c3873b8f20551/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86bbf15b6b87b94c36279a72343c3873b8f20551/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=86bbf15b6b87b94c36279a72343c3873b8f20551", "patch": "@@ -1,3 +1,20 @@\n+2016-08-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* config/abi/pre/gnu.ver (GLIBCXX_3.4, GLIBCXX_3.4.21): Use more\n+\tprecise patterns for basic_string constructors.\n+\t(GLIBCXX_3.4.23): Export new constructors.\n+\t* doc/xml/manual/intro.xml: Document LWG 2583 status.\n+\t* doc/html/*: Regenerate.\n+\t* include/bits/basic_string.h [_GLIBCXX_USE_CXX11_ABI]\n+\t(basic_string(const basic_string&, size_type, const Alloc&)): Add\n+\tnew constructor for LWG 2583.\n+\t(basic_string(const basic_string&, size_type, size_type)): Remove\n+\tdefault argument.\n+\t[!_GLIBCXX_USE_CXX11_ABI]: Likewise.\n+\t* include/bits/basic_string.tcc [!_GLIBCXX_USE_CXX11_ABI]: Define it.\n+\t* testsuite/21_strings/basic_string/cons/char/8.cc: New test.\n+\t* testsuite/21_strings/basic_string/cons/wchar_t/8.cc: New test.\n+\n 2016-08-24  Aditya Kumar  <hiraditya@msn.com>\n \n \t* include/bits/algorithmfwd.h: Remove trailing whitespace."}, {"sha": "0ab4bb10b35293f5a42513a1b08b4587919f1da9", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86bbf15b6b87b94c36279a72343c3873b8f20551/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86bbf15b6b87b94c36279a72343c3873b8f20551/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=86bbf15b6b87b94c36279a72343c3873b8f20551", "patch": "@@ -206,7 +206,14 @@ GLIBCXX_3.4 {\n     # std::string\n     # 'y' here and below represents 'unsigned long long'\n     # where it is used for size_type on LLP64 platforms.\n-    _ZNSsC[12][EI][PRjmvyN]*;\n+    _ZNSsC[12]EPKc*;\n+    _ZNSsC[12]ERKSaIcE;\n+    _ZNSsC[12]ERKSs;\n+#   _ZNSsC[12]ERKSs[jmy]RKSaIcE;\n+    _ZNSsC[12]ERKSs[jmy][jmy]*;\n+    _ZNSsC[12]E[jmy]cRKSaIcE;\n+    _ZNSsC[12]Ev;\n+    _ZNSsC[12]I[PN]*;\n     _ZNSsD*;\n     _ZNSs[0-58-9]a*;\n     _ZNSs5beginEv;\n@@ -267,7 +274,13 @@ GLIBCXX_3.4 {\n     _ZNKSs4copyEPc[jmy][jmy];\n \n     # std::wstring\n-    _ZNSbIwSt11char_traitsIwESaIwEEC[12][EI][PRjmvyN]*;\n+    _ZNSbIwSt11char_traitsIwESaIwEEC[12]EPKw*;\n+    _ZNSbIwSt11char_traitsIwESaIwEEC[12]ERKS[12]_;\n+#   _ZNSbIwSt11char_traitsIwESaIwEEC[12]ERKS2_mRKS1_;\n+    _ZNSbIwSt11char_traitsIwESaIwEEC[12]ERKS2_[jmy][jmy]*;\n+    _ZNSbIwSt11char_traitsIwESaIwEEC[12]E[jmy]wRKS1_;\n+    _ZNSbIwSt11char_traitsIwESaIwEEC[12]Ev;\n+    _ZNSbIwSt11char_traitsIwESaIwEEC[12]I[PN]*;\n     _ZNSbIwSt11char_traitsIwESaIwEED*;\n     _ZNSbIwSt11char_traitsIwESaIwEE[0-58-9]a*;\n     _ZNSbIwSt11char_traitsIwESaIwEE5beginEv;\n@@ -1683,7 +1696,17 @@ GLIBCXX_3.4.21 {\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE12_M*;\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE1[3-9]*;\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE[2-9]*;\n-    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE[CDaip]*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]EOS4_*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]EPK*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]ERKS[34]_;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]ERKS4_RKS3_;\n+#   _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]ERKS4_[jmy]RKS3_;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]ERKS4_[jmy][jmy]*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]ESt16*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]E[jmy][cw]RKS3_;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]Ev;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]I[PN]*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE[Daip]*;\n     _ZNKSt7__cxx1112basic_string*;\n \n     # operator+ for ABI-tagged std::basic_string\n@@ -1919,6 +1942,11 @@ GLIBCXX_3.4.23 {\n     # basic_string<C, T, A>::_Alloc_hider::_Alloc_hider(C*, A&&)\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE12_Alloc_hiderC[12]EP[cw]OS3_;\n \n+    # basic_string<C, T, A>::basic_string(const basic_string&, size_type, const A&)\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]ERKS4_[jmy]RKS3_;\n+    _ZNSsC[12]ERKSs[jmy]RKSaIcE;\n+    _ZNSbIwSt11char_traitsIwESaIwEEC[12]ERKS2_mRKS1_;\n+\n } GLIBCXX_3.4.22;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "14ba1d2506ae758bf477ea0bfa813e2cc0f70972", "filename": "libstdc++-v3/doc/html/manual/bugs.html", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86bbf15b6b87b94c36279a72343c3873b8f20551/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86bbf15b6b87b94c36279a72343c3873b8f20551/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html?ref=86bbf15b6b87b94c36279a72343c3873b8f20551", "patch": "@@ -475,6 +475,10 @@\n        <span class=\"emphasis\"><em><code class=\"code\">allocator_traits::max_size()</code> default behavior is incorrect\n        </em></span>\n     </span></dt><dd><p>Divide by the object type.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2583\" target=\"_top\">2583</a>:\n+       <span class=\"emphasis\"><em>There is no way to supply an allocator for <code class=\"code\"> basic_string(str, pos)</code>\n+       </em></span>\n+    </span></dt><dd><p>Add new constructor\n     </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2684\" target=\"_top\">2684</a>:\n        <span class=\"emphasis\"><em><code class=\"code\">priority_queue</code> lacking comparator typedef\n        </em></span>"}, {"sha": "d02306edbf67be8b7c6380c04219a387d03f38ef", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86bbf15b6b87b94c36279a72343c3873b8f20551/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86bbf15b6b87b94c36279a72343c3873b8f20551/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=86bbf15b6b87b94c36279a72343c3873b8f20551", "patch": "@@ -1058,6 +1058,13 @@ requirements of the license of GCC.\n     <listitem><para>Divide by the object type.\n     </para></listitem></varlistentry>\n \n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2583\">2583</link>:\n+       <emphasis>There is no way to supply an allocator for <code> basic_string(str, pos)</code>\n+       </emphasis>\n+    </term>\n+    <listitem><para>Add new constructor\n+    </para></listitem></varlistentry>\n+\n     <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2684\">2684</link>:\n        <emphasis><code>priority_queue</code> lacking comparator typedef\n        </emphasis>"}, {"sha": "e823f132d4eecb5cbfcceb7b3f7249fca10cde6c", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86bbf15b6b87b94c36279a72343c3873b8f20551/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86bbf15b6b87b94c36279a72343c3873b8f20551/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=86bbf15b6b87b94c36279a72343c3873b8f20551", "patch": "@@ -417,16 +417,31 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t\t    _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))\n       { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2583. no way to supply an allocator for basic_string(str, pos)\n       /**\n        *  @brief  Construct string as copy of a substring.\n        *  @param  __str  Source string.\n        *  @param  __pos  Index of first character to copy from.\n-       *  @param  __n  Number of characters to copy (default remainder).\n+       *  @param  __a  Allocator to use.\n+       */\n+      basic_string(const basic_string& __str, size_type __pos,\n+\t\t   const _Alloc& __a = _Alloc())\n+      : _M_dataplus(_M_local_data(), __a)\n+      {\n+\tconst _CharT* __start = __str._M_data()\n+\t  + __str._M_check(__pos, \"basic_string::basic_string\");\n+\t_M_construct(__start, __start + __str._M_limit(__pos, npos));\n+      }\n+\n+      /**\n+       *  @brief  Construct string as copy of a substring.\n+       *  @param  __str  Source string.\n+       *  @param  __pos  Index of first character to copy from.\n+       *  @param  __n  Number of characters to copy.\n        */\n-      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-      // 2402. [this constructor] shouldn't use Allocator()\n       basic_string(const basic_string& __str, size_type __pos,\n-\t\t   size_type __n = npos)\n+\t\t   size_type __n)\n       : _M_dataplus(_M_local_data())\n       {\n \tconst _CharT* __start = __str._M_data()\n@@ -438,7 +453,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @brief  Construct string as copy of a substring.\n        *  @param  __str  Source string.\n        *  @param  __pos  Index of first character to copy from.\n-       *  @param  __n  Number of characters to copy (default remainder).\n+       *  @param  __n  Number of characters to copy.\n        *  @param  __a  Allocator to use.\n        */\n       basic_string(const basic_string& __str, size_type __pos,\n@@ -3305,14 +3320,26 @@ _GLIBCXX_END_NAMESPACE_CXX11\n        *  @param  __str  Source string.\n        */\n       basic_string(const basic_string& __str);\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2583. no way to supply an allocator for basic_string(str, pos)\n       /**\n        *  @brief  Construct string as copy of a substring.\n        *  @param  __str  Source string.\n        *  @param  __pos  Index of first character to copy from.\n-       *  @param  __n  Number of characters to copy (default remainder).\n+       *  @param  __a  Allocator to use.\n+       */\n+      basic_string(const basic_string& __str, size_type __pos,\n+\t\t   const _Alloc& __a = _Alloc());\n+\n+      /**\n+       *  @brief  Construct string as copy of a substring.\n+       *  @param  __str  Source string.\n+       *  @param  __pos  Index of first character to copy from.\n+       *  @param  __n  Number of characters to copy.\n        */\n       basic_string(const basic_string& __str, size_type __pos,\n-\t\t   size_type __n = npos);\n+\t\t   size_type __n);\n       /**\n        *  @brief  Construct string as copy of a substring.\n        *  @param  __str  Source string."}, {"sha": "0080d2b0e2f95bc62b7c34d2c9f0aff1d1952e8d", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86bbf15b6b87b94c36279a72343c3873b8f20551/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86bbf15b6b87b94c36279a72343c3873b8f20551/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=86bbf15b6b87b94c36279a72343c3873b8f20551", "patch": "@@ -619,6 +619,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : _M_dataplus(_S_construct(size_type(), _CharT(), __a), __a)\n     { }\n \n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    basic_string(const basic_string& __str, size_type __pos, const _Alloc& __a)\n+    : _M_dataplus(_S_construct(__str._M_data()\n+\t\t\t       + __str._M_check(__pos,\n+\t\t\t\t\t\t\"basic_string::basic_string\"),\n+\t\t\t       __str._M_data() + __str._M_limit(__pos, npos)\n+\t\t\t       + __pos, __a), __a)\n+    { }\n+\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>::\n     basic_string(const basic_string& __str, size_type __pos, size_type __n)"}, {"sha": "6534f762a00fe8538c3425eed5621242bcc52e74", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/8.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86bbf15b6b87b94c36279a72343c3873b8f20551/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86bbf15b6b87b94c36279a72343c3873b8f20551/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F8.cc?ref=86bbf15b6b87b94c36279a72343c3873b8f20551", "patch": "@@ -0,0 +1,70 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+template<typename... Args>\n+std::size_t\n+construct(Args&&... args)\n+{\n+  return std::string( std::forward<Args>(args)... ).length();\n+}\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  using string = std::string;\n+  using list = std::initializer_list<string::value_type>;\n+\n+  const std::string lvalue = \"lvalue\";\n+  std::allocator<char> alloc;\n+\n+  // test all valid combinations of arguments:\n+  VERIFY( construct( ) == 0 );\n+  VERIFY( construct( alloc ) == 0 );\n+  VERIFY( construct( lvalue ) == 6 );\n+  VERIFY( construct( string{\"rvalue\"} ) == 6 );\n+  VERIFY( construct( lvalue, 2 ) == 4 );\n+  VERIFY( construct( lvalue, 2, alloc ) == 4 );\n+  VERIFY( construct( lvalue, 2, 3 ) == 3 );\n+  VERIFY( construct( lvalue, 2, 3, alloc ) == 3 );\n+  VERIFY( construct( \"C string\", 4 ) == 4 );\n+  VERIFY( construct( \"C string\", 4, alloc ) == 4 );\n+  VERIFY( construct( \"C string\" ) == 8 );\n+  VERIFY( construct( \"C string and alloc\", alloc ) == 18 );\n+  VERIFY( construct( 5, ' ' ) == 5 );\n+  VERIFY( construct( 5, ' ', alloc ) == 5 );\n+  VERIFY( construct( lvalue.begin(), lvalue.end() ) == 6 );\n+  VERIFY( construct( lvalue.begin(), lvalue.end(), alloc ) == 6 );\n+  VERIFY( construct( list{ 'l' , 'i' , 's', 't' } ) == 4 );\n+  VERIFY( construct( list{ 'l', 'i', 's', 't' }, alloc ) == 4 );\n+#if _GLIBCXX_USE_CXX11_ABI\n+  VERIFY( construct( lvalue, alloc ) == 6 );\n+  VERIFY( construct( string{\"rvalue\"}, alloc ) == 6 );\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "9152ad9a8d4e6ee09f571e0ad5ea754473d4771d", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/wchar_t/8.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86bbf15b6b87b94c36279a72343c3873b8f20551/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86bbf15b6b87b94c36279a72343c3873b8f20551/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F8.cc?ref=86bbf15b6b87b94c36279a72343c3873b8f20551", "patch": "@@ -0,0 +1,70 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+template<typename... Args>\n+std::size_t\n+construct(Args&&... args)\n+{\n+  return std::wstring( std::forward<Args>(args)... ).length();\n+}\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  using string = std::wstring;\n+  using list = std::initializer_list<string::value_type>;\n+\n+  const std::wstring lvalue = L\"lvalue\";\n+  std::allocator<char> alloc;\n+\n+  // test all valid combinations of arguments:\n+  VERIFY( construct( ) == 0 );\n+  VERIFY( construct( alloc ) == 0 );\n+  VERIFY( construct( lvalue ) == 6 );\n+  VERIFY( construct( string{L\"rvalue\"} ) == 6 );\n+  VERIFY( construct( lvalue, 2 ) == 4 );\n+  VERIFY( construct( lvalue, 2, alloc ) == 4 );\n+  VERIFY( construct( lvalue, 2, 3 ) == 3 );\n+  VERIFY( construct( lvalue, 2, 3, alloc ) == 3 );\n+  VERIFY( construct( L\"C string\", 4 ) == 4 );\n+  VERIFY( construct( L\"C string\", 4, alloc ) == 4 );\n+  VERIFY( construct( L\"C string\" ) == 8 );\n+  VERIFY( construct( L\"C string and alloc\", alloc ) == 18 );\n+  VERIFY( construct( 5, L' ' ) == 5 );\n+  VERIFY( construct( 5, L' ', alloc ) == 5 );\n+  VERIFY( construct( lvalue.begin(), lvalue.end() ) == 6 );\n+  VERIFY( construct( lvalue.begin(), lvalue.end(), alloc ) == 6 );\n+  VERIFY( construct( list{ L'l' , L'i' , L's', L't' } ) == 4 );\n+  VERIFY( construct( list{ L'l', L'i', L's', L't' }, alloc ) == 4 );\n+#if _GLIBCXX_USE_CXX11_ABI\n+  VERIFY( construct( lvalue, alloc ) == 6 );\n+  VERIFY( construct( string{L\"rvalue\"}, alloc ) == 6 );\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}