{"sha": "92d236802c2627840591e08c522c3abe6e63ff70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJkMjM2ODAyYzI2Mjc4NDA1OTFlMDhjNTIyYzNhYmU2ZTYzZmY3MA==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2011-01-25T06:45:04Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2011-01-25T06:45:04Z"}, "message": "Test the profitability of interchange on the perfect nest.\n\n2011-01-25  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-interchange.c (lst_interchange_profitable_p): Takes a loop\n\tnest and two loop depths as parameters.\n\t(lst_try_interchange_loops): Call lst_interchange_profitable_p after\n\tlst_perfect_nestify.\n\nFrom-SVN: r169201", "tree": {"sha": "7fe78ae418b940d6266e911d1b01fdf12edfb407", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fe78ae418b940d6266e911d1b01fdf12edfb407"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92d236802c2627840591e08c522c3abe6e63ff70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92d236802c2627840591e08c522c3abe6e63ff70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92d236802c2627840591e08c522c3abe6e63ff70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92d236802c2627840591e08c522c3abe6e63ff70/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f51defffd48a3d6411a4000e6f286d92eb5a711", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f51defffd48a3d6411a4000e6f286d92eb5a711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f51defffd48a3d6411a4000e6f286d92eb5a711"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "8d13d2ce072b9798d678a024c59b8a7fb6505293", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92d236802c2627840591e08c522c3abe6e63ff70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92d236802c2627840591e08c522c3abe6e63ff70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92d236802c2627840591e08c522c3abe6e63ff70", "patch": "@@ -1,3 +1,10 @@\n+2011-01-25  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-interchange.c (lst_interchange_profitable_p): Takes a loop\n+\tnest and two loop depths as parameters.\n+\t(lst_try_interchange_loops): Call lst_interchange_profitable_p after\n+\tlst_perfect_nestify.\n+\n 2011-01-25  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-dependences.c (print_pddr): Call"}, {"sha": "2363df6869727fb7edd9899bd80cd560a924dbae", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92d236802c2627840591e08c522c3abe6e63ff70/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92d236802c2627840591e08c522c3abe6e63ff70/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=92d236802c2627840591e08c522c3abe6e63ff70", "patch": "@@ -1,3 +1,10 @@\n+2011-01-15  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-interchange.c (lst_interchange_profitable_p): Takes a loop\n+\tnest and two loop depths as parameters.\n+\t(lst_try_interchange_loops): Call lst_interchange_profitable_p after\n+\tlst_perfect_nestify.\n+\n 2011-01-15  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-dependences.c (print_pddr): Call"}, {"sha": "934839aace082ade6803d09e510ac15f28156f8b", "filename": "gcc/graphite-interchange.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92d236802c2627840591e08c522c3abe6e63ff70/gcc%2Fgraphite-interchange.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92d236802c2627840591e08c522c3abe6e63ff70/gcc%2Fgraphite-interchange.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-interchange.c?ref=92d236802c2627840591e08c522c3abe6e63ff70", "patch": "@@ -446,20 +446,18 @@ memory_strides_in_loop (lst_p loop, graphite_dim_t depth, mpz_t strides)\n    profitable to interchange the loops at DEPTH1 and DEPTH2.  */\n \n static bool\n-lst_interchange_profitable_p (lst_p loop1, lst_p loop2)\n+lst_interchange_profitable_p (lst_p nest, int depth1, int depth2)\n {\n   mpz_t d1, d2;\n   bool res;\n \n-  gcc_assert (loop1 && loop2\n-\t      && LST_LOOP_P (loop1) && LST_LOOP_P (loop2)\n-\t      && lst_depth (loop1) < lst_depth (loop2));\n+  gcc_assert (depth1 < depth2);\n \n   mpz_init (d1);\n   mpz_init (d2);\n \n-  memory_strides_in_loop (loop1, lst_depth (loop1), d1);\n-  memory_strides_in_loop (loop2, lst_depth (loop2), d2);\n+  memory_strides_in_loop (nest, depth1, d1);\n+  memory_strides_in_loop (nest, depth2, d2);\n \n   res = mpz_cmp (d1, d2) < 0;\n \n@@ -592,12 +590,12 @@ lst_try_interchange_loops (scop_p scop, lst_p loop1, lst_p loop2)\n \n   lst_p before = NULL, nest = NULL, after = NULL;\n \n-  if (!lst_interchange_profitable_p (loop1, loop2))\n-    return false;\n-\n   if (!lst_perfectly_nested_p (loop1, loop2))\n     lst_perfect_nestify (loop1, loop2, &before, &nest, &after);\n \n+  if (!lst_interchange_profitable_p (loop2, depth1, depth2))\n+    return false;\n+\n   lst_apply_interchange (loop2, depth1, depth2);\n \n   /* Sync the transformed LST information and the PBB scatterings"}]}