{"sha": "6033b55bd90c3e0e857b4a1b54ab1d243377e56e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAzM2I1NWJkOTBjM2UwZTg1N2I0YTFiNTRhYjFkMjQzMzc3ZTU2ZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-07-18T23:29:15Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-07-18T23:29:15Z"}, "message": "compiler: insert backend type conversion for closure func ptr\n    \n    In Func_expression::do_get_backend when creating the backend\n    representation for a closure, create a backend type conversion to\n    account for potential differences between the closure struct type\n    (where the number of fields is dependent on the number of values\n    referenced in the closure) and the generic function descriptor type\n    (struct with single function pointer field).\n    \n    Reviewed-on: https://go-review.googlesource.com/49255\n\nFrom-SVN: r250327", "tree": {"sha": "228b66f528ce1d6fcee3fca02761bac5620702fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/228b66f528ce1d6fcee3fca02761bac5620702fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6033b55bd90c3e0e857b4a1b54ab1d243377e56e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6033b55bd90c3e0e857b4a1b54ab1d243377e56e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6033b55bd90c3e0e857b4a1b54ab1d243377e56e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6033b55bd90c3e0e857b4a1b54ab1d243377e56e/comments", "author": null, "committer": null, "parents": [{"sha": "9e45ca5f83954a340cc78c2f86b7b3294188047f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e45ca5f83954a340cc78c2f86b7b3294188047f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e45ca5f83954a340cc78c2f86b7b3294188047f"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "f6d7a002cbf17e1fa028a35164a1c7426843bfb6", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6033b55bd90c3e0e857b4a1b54ab1d243377e56e/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6033b55bd90c3e0e857b4a1b54ab1d243377e56e/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=6033b55bd90c3e0e857b4a1b54ab1d243377e56e", "patch": "@@ -1,4 +1,4 @@\n-c49ddc84f3ce89310585aad23ab6e51ef5523748\n+3d9ff9bc339942922f1be3bef07c6fe2978ad81a\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "597f0a0daef26c29aa0186c3c1a6b8ee11a2383d", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6033b55bd90c3e0e857b4a1b54ab1d243377e56e/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6033b55bd90c3e0e857b4a1b54ab1d243377e56e/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=6033b55bd90c3e0e857b4a1b54ab1d243377e56e", "patch": "@@ -1204,7 +1204,14 @@ Func_expression::do_get_backend(Translate_context* context)\n   // expression.  It is a pointer to a struct whose first field points\n   // to the function code and whose remaining fields are the addresses\n   // of the closed-over variables.\n-  return this->closure_->get_backend(context);\n+  Bexpression *bexpr = this->closure_->get_backend(context);\n+\n+  // Introduce a backend type conversion, to account for any differences\n+  // between the argument type (function descriptor, struct with a\n+  // single field) and the closure (struct with multiple fields).\n+  Gogo* gogo = context->gogo();\n+  Btype *btype = this->type()->get_backend(gogo);\n+  return gogo->backend()->convert_expression(btype, bexpr, this->location());\n }\n \n // Ast dump for function."}]}