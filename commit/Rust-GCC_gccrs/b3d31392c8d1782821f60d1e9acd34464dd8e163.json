{"sha": "b3d31392c8d1782821f60d1e9acd34464dd8e163", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNkMzEzOTJjOGQxNzgyODIxZjYwZDFlOWFjZDM0NDY0ZGQ4ZTE2Mw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2004-11-23T17:39:59Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2004-11-23T17:39:59Z"}, "message": "s390.c (s390_backchain_string): Removed.\n\n2004-11-23  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* config/s390/s390.c (s390_backchain_string): Removed.\n\t(s390_return_addr_rtx, s390_back_chain_rtx, s390_frame_info)\n\t(s390_emit_prologue, s390_va_start, s390_gimplify_va_arg):\n\tChanged users of TARGET_BACKCHAIN, TARGET_NO_BACKCHAIN and\n\tTARGET_KERNEL_BACKCHAIN to reflect the new options.\n\t* config/s390/s390.h (MASK_BACKCHAIN, MASK_PACKED_STACK): New macros.\n\t(TARGET_KERNEL_BACKCHAIN): Removed.\n\t(TARGET_BACKCHAIN): Former triple state option change to a target flag.\n\t(TARGET_PACKED_STACK): New macro.\n\t(TARGET_SWITCHES): New switches added.\n\t(TARGET_OPTIONS): \"backchain\", \"no-backchain\" and \"kernel-backchain\"\n\tremoved.\n\t(DYNAMIC_CHAIN_ADDRESS): Use TARGET_PACKED_STACK.\n\t* config/s390/s390.md (\"allocate_stack\", \"restore_stack_block\")\n\t(\"save_stack_nonlocal\", \"restore_stack_nonlocal\"): Modified to reflect\n\tthe change in target switch semantics.\n\t* config/s390/tpf.h (TARGET_DEFAULT_BACKCHAIN): Removed.\n\t(TARGET_DEFAULT): MASK_BACKCHAIN added.\n\t* doc/invoke.texi: Added documentation for the new/changed options.\n\nFrom-SVN: r91096", "tree": {"sha": "b3e47c2e116eb2f00a2a7968e0a49db9ccef1b9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3e47c2e116eb2f00a2a7968e0a49db9ccef1b9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3d31392c8d1782821f60d1e9acd34464dd8e163", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3d31392c8d1782821f60d1e9acd34464dd8e163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3d31392c8d1782821f60d1e9acd34464dd8e163", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3d31392c8d1782821f60d1e9acd34464dd8e163/comments", "author": null, "committer": null, "parents": [{"sha": "27b28c6dcd69a1aaa04001f396140323688df013", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27b28c6dcd69a1aaa04001f396140323688df013", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27b28c6dcd69a1aaa04001f396140323688df013"}], "stats": {"total": 217, "additions": 125, "deletions": 92}, "files": [{"sha": "01ecb442b8d68a8730ceee48a8a60a302b05e0f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d31392c8d1782821f60d1e9acd34464dd8e163/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d31392c8d1782821f60d1e9acd34464dd8e163/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3d31392c8d1782821f60d1e9acd34464dd8e163", "patch": "@@ -1,3 +1,25 @@\n+2004-11-23  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* config/s390/s390.c (s390_backchain_string): Removed.\n+\t(s390_return_addr_rtx, s390_back_chain_rtx, s390_frame_info)\n+\t(s390_emit_prologue, s390_va_start, s390_gimplify_va_arg):\n+\tChanged users of TARGET_BACKCHAIN, TARGET_NO_BACKCHAIN and\n+\tTARGET_KERNEL_BACKCHAIN to reflect the new options.\n+\t* config/s390/s390.h (MASK_BACKCHAIN, MASK_PACKED_STACK): New macros.\n+\t(TARGET_KERNEL_BACKCHAIN): Removed.\n+\t(TARGET_BACKCHAIN): Former triple state option change to a target flag.\n+\t(TARGET_PACKED_STACK): New macro.\n+\t(TARGET_SWITCHES): New switches added.\n+\t(TARGET_OPTIONS): \"backchain\", \"no-backchain\" and \"kernel-backchain\"\n+\tremoved.\n+\t(DYNAMIC_CHAIN_ADDRESS): Use TARGET_PACKED_STACK.\n+\t* config/s390/s390.md (\"allocate_stack\", \"restore_stack_block\")\n+\t(\"save_stack_nonlocal\", \"restore_stack_nonlocal\"): Modified to reflect \n+\tthe change in target switch semantics.\n+\t* config/s390/tpf.h (TARGET_DEFAULT_BACKCHAIN): Removed.\n+\t(TARGET_DEFAULT): MASK_BACKCHAIN added.\n+\t* doc/invoke.texi: Added documentation for the new/changed options.\n+\n 2004-11-23  Uros Bizjak  <uros@kss-loka.si>\n \n         PR rtl-optimization/18614"}, {"sha": "54d2b1edb108df869eb39a8b7bb9e894015b7d11", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 28, "deletions": 32, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d31392c8d1782821f60d1e9acd34464dd8e163/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d31392c8d1782821f60d1e9acd34464dd8e163/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=b3d31392c8d1782821f60d1e9acd34464dd8e163", "patch": "@@ -205,10 +205,6 @@ enum processor_flags s390_arch_flags;\n const char *s390_tune_string;\t\t/* for -mtune=<xxx> */\n const char *s390_arch_string;\t\t/* for -march=<xxx> */\n \n-/* String to specify backchain mode: \n-   \"\" no-backchain, \"1\" backchain, \"2\" kernel-backchain.  */\n-const char *s390_backchain_string = TARGET_DEFAULT_BACKCHAIN;\n-\n const char *s390_warn_framesize_string;\n const char *s390_warn_dynamicstack_string;\n const char *s390_stack_size_string;\n@@ -6083,7 +6079,7 @@ s390_return_addr_rtx (int count, rtx frame ATTRIBUTE_UNUSED)\n \n   /* Without backchain, we fail for all but the current frame.  */\n \n-  if (!TARGET_BACKCHAIN && !TARGET_KERNEL_BACKCHAIN && count > 0)\n+  if (!TARGET_BACKCHAIN && count > 0)\n     return NULL_RTX;\n \n   /* For the current frame, we need to make sure the initial\n@@ -6095,10 +6091,10 @@ s390_return_addr_rtx (int count, rtx frame ATTRIBUTE_UNUSED)\n       return gen_rtx_MEM (Pmode, return_address_pointer_rtx);\n     }\n \n-  if (TARGET_BACKCHAIN)\n-    offset = RETURN_REGNUM * UNITS_PER_WORD;\n-  else\n+  if (TARGET_PACKED_STACK)\n     offset = -2 * UNITS_PER_WORD;\n+  else\n+    offset = RETURN_REGNUM * UNITS_PER_WORD;\n \n   addr = plus_constant (frame, offset);\n   addr = memory_address (Pmode, addr);\n@@ -6113,13 +6109,13 @@ s390_back_chain_rtx (void)\n {\n   rtx chain;\n \n-  gcc_assert (TARGET_BACKCHAIN || TARGET_KERNEL_BACKCHAIN);\n+  gcc_assert (TARGET_BACKCHAIN);\n \n-  if (TARGET_BACKCHAIN)\n-    chain = stack_pointer_rtx;\n-  else\n+  if (TARGET_PACKED_STACK)\n     chain = plus_constant (stack_pointer_rtx,\n \t\t\t   STACK_POINTER_OFFSET - UNITS_PER_WORD);\n+  else\n+    chain = stack_pointer_rtx;\n \n   chain = gen_rtx_MEM (Pmode, chain);\n   return chain;\n@@ -6287,10 +6283,9 @@ s390_frame_info (void)\n   if (!TARGET_64BIT && cfun_frame_layout.frame_size > 0x7fff0000)\n     fatal_error (\"Total size of local variables exceeds architecture limit.\");\n   \n-  cfun_frame_layout.save_backchain_p = (TARGET_BACKCHAIN \n-\t\t\t\t\t|| TARGET_KERNEL_BACKCHAIN);\n+  cfun_frame_layout.save_backchain_p = TARGET_BACKCHAIN;\n \n-  if (TARGET_BACKCHAIN)\n+  if (!TARGET_PACKED_STACK)\n     {\n       cfun_frame_layout.backchain_offset = 0;\n       cfun_frame_layout.f0_offset = 16 * UNITS_PER_WORD;\n@@ -6299,7 +6294,7 @@ s390_frame_info (void)\n       cfun_frame_layout.gprs_offset = (cfun_frame_layout.first_save_gpr\n \t\t\t\t       * UNITS_PER_WORD);\n     }\n-  else if (TARGET_KERNEL_BACKCHAIN)\n+  else if (TARGET_BACKCHAIN) /* kernel stack layout */\n     {\n       cfun_frame_layout.backchain_offset = (STACK_POINTER_OFFSET\n \t\t\t\t\t    - UNITS_PER_WORD);\n@@ -6354,7 +6349,7 @@ s390_frame_info (void)\n       && !current_function_stdarg)\n     return;\n \n-  if (TARGET_BACKCHAIN)\n+  if (!TARGET_PACKED_STACK)\n     cfun_frame_layout.frame_size += (STARTING_FRAME_OFFSET\n \t\t\t\t     + cfun_frame_layout.high_fprs * 8);\n   else\n@@ -6753,7 +6748,7 @@ s390_emit_prologue (void)\n \t  save_fpr (stack_pointer_rtx, offset, i + 16);\n \t  offset += 8;\n \t}\n-      else if (TARGET_BACKCHAIN)\n+      else if (!TARGET_PACKED_STACK)\n \t  offset += 8;\n     }\n \n@@ -6771,11 +6766,11 @@ s390_emit_prologue (void)\n \t  if (!call_really_used_regs[i + 16])\n \t    RTX_FRAME_RELATED_P (insn) = 1;\n \t}\n-      else if (TARGET_BACKCHAIN)\n+      else if (!TARGET_PACKED_STACK)\n \toffset += 8;\n     }\n \n-  if (!TARGET_BACKCHAIN \n+  if (TARGET_PACKED_STACK\n       && cfun_save_high_fprs_p\n       && cfun_frame_layout.f8_offset + cfun_frame_layout.high_fprs * 8 > 0)\n     {\n@@ -6794,7 +6789,7 @@ s390_emit_prologue (void)\n \tnext_fpr = i + 16;\n     }\n   \n-  if (TARGET_BACKCHAIN)\n+  if (!TARGET_PACKED_STACK)\n     next_fpr = cfun_save_high_fprs_p ? 31 : 0;\n \n   /* Decrement stack pointer.  */\n@@ -7050,7 +7045,7 @@ s390_emit_epilogue (bool sibcall)\n \t\t\t   offset + next_offset, i);\n \t      next_offset += 8;\n \t    }\n-\t  else if (TARGET_BACKCHAIN)\n+\t  else if (!TARGET_PACKED_STACK)\n \t    next_offset += 8;\n \t}\n       \n@@ -7516,7 +7511,7 @@ s390_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n \n   /* Find the register save area.  */\n   t = make_tree (TREE_TYPE (sav), return_address_pointer_rtx);\n-  if (TARGET_KERNEL_BACKCHAIN)\n+  if (TARGET_BACKCHAIN && TARGET_PACKED_STACK) /* kernel stack layout */\n     t = build (PLUS_EXPR, TREE_TYPE (sav), t,\n \t       build_int_cst (NULL_TREE,\n \t\t\t      -(RETURN_REGNUM - 2) * UNITS_PER_WORD\n@@ -7589,11 +7584,11 @@ s390_gimplify_va_arg (tree valist, tree type, tree *pre_p,\n       reg = gpr;\n       n_reg = 1;\n \n-      /* TARGET_KERNEL_BACKCHAIN on 31 bit: It is assumed here that no padding\n+      /* kernel stack layout on 31 bit: It is assumed here that no padding\n \t will be added by s390_frame_info because for va_args always an even\n \t number of gprs has to be saved r15-r2 = 14 regs.  */\n-      sav_ofs = (TARGET_KERNEL_BACKCHAIN\n-\t\t ? (TARGET_64BIT ? 4 : 2) * 8 : 2 * UNITS_PER_WORD);\n+      sav_ofs = ((TARGET_BACKCHAIN && TARGET_PACKED_STACK) ?\n+\t\t (TARGET_64BIT ? 4 : 2) * 8 : 2 * UNITS_PER_WORD);\n       sav_scale = UNITS_PER_WORD;\n       size = UNITS_PER_WORD;\n       max_reg = 4;\n@@ -7610,7 +7605,8 @@ s390_gimplify_va_arg (tree valist, tree type, tree *pre_p,\n       indirect_p = 0;\n       reg = fpr;\n       n_reg = 1;\n-      sav_ofs = TARGET_KERNEL_BACKCHAIN ? 0 : 16 * UNITS_PER_WORD;\n+      sav_ofs = ((TARGET_BACKCHAIN && TARGET_PACKED_STACK) ?\n+\t\t 0 : 16 * UNITS_PER_WORD);\n       sav_scale = 8;\n       /* TARGET_64BIT has up to 4 parameter in fprs */\n       max_reg = TARGET_64BIT ? 3 : 1;\n@@ -7628,11 +7624,11 @@ s390_gimplify_va_arg (tree valist, tree type, tree *pre_p,\n       reg = gpr;\n       n_reg = (size + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n \n-      /* TARGET_KERNEL_BACKCHAIN on 31 bit: It is assumed here that no padding\n-\twill be added by s390_frame_info because for va_args always an even\n-\tnumber of gprs has to be saved r15-r2 = 14 regs.  */\n-      sav_ofs = TARGET_KERNEL_BACKCHAIN ? \n-\t(TARGET_64BIT ? 4 : 2) * 8 : 2*UNITS_PER_WORD;\n+      /* kernel stack layout on 31 bit: It is assumed here that no padding\n+\t will be added by s390_frame_info because for va_args always an even\n+\t number of gprs has to be saved r15-r2 = 14 regs.  */\n+      sav_ofs = ((TARGET_BACKCHAIN && TARGET_PACKED_STACK) ? \n+\t\t (TARGET_64BIT ? 4 : 2) * 8 : 2 * UNITS_PER_WORD);\n \n       if (size < UNITS_PER_WORD)\n \tsav_ofs += UNITS_PER_WORD - size;"}, {"sha": "a3e021cb7885ca33bc6537704e1fc48d7ae54300", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 29, "deletions": 34, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d31392c8d1782821f60d1e9acd34464dd8e163/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d31392c8d1782821f60d1e9acd34464dd8e163/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=b3d31392c8d1782821f60d1e9acd34464dd8e163", "patch": "@@ -60,8 +60,6 @@ extern enum processor_type s390_arch;\n extern enum processor_flags s390_arch_flags;\n extern const char *s390_arch_string;\n \n-extern const char *s390_backchain_string;\n-\n extern const char *s390_warn_framesize_string;\n extern const char *s390_warn_dynamicstack_string;\n extern const char *s390_stack_size_string;\n@@ -106,6 +104,8 @@ extern int target_flags;\n #define MASK_MVCLE                 0x40\n #define MASK_TPF_PROFILING         0x80\n #define MASK_NO_FUSED_MADD         0x100\n+#define MASK_BACKCHAIN             0x200\n+#define MASK_PACKED_STACK          0x400\n \n #define TARGET_HARD_FLOAT          (target_flags & MASK_HARD_FLOAT)\n #define TARGET_SOFT_FLOAT          (!(target_flags & MASK_HARD_FLOAT))\n@@ -117,9 +117,8 @@ extern int target_flags;\n #define TARGET_TPF_PROFILING       (target_flags & MASK_TPF_PROFILING)\n #define TARGET_NO_FUSED_MADD       (target_flags & MASK_NO_FUSED_MADD)\n #define TARGET_FUSED_MADD\t   (! TARGET_NO_FUSED_MADD)\n-\n-#define TARGET_BACKCHAIN           (s390_backchain_string[0] == '1')\n-#define TARGET_KERNEL_BACKCHAIN    (s390_backchain_string[0] == '2')\n+#define TARGET_BACKCHAIN           (target_flags & MASK_BACKCHAIN)\n+#define TARGET_PACKED_STACK        (target_flags & MASK_PACKED_STACK)\n \n /* ??? Once this actually works, it could be made a runtime option.  */\n #define TARGET_IBM_FLOAT           0\n@@ -131,38 +130,34 @@ extern int target_flags;\n #define TARGET_DEFAULT             MASK_HARD_FLOAT\n #endif\n \n-#define TARGET_DEFAULT_BACKCHAIN \"\"\n-\n-#define TARGET_SWITCHES                                                  \\\n-{ { \"hard-float\",      1, N_(\"Use hardware fp\")},                        \\\n-  { \"soft-float\",     -1, N_(\"Don't use hardware fp\")},                  \\\n-  { \"small-exec\",      4, N_(\"Use bras for executable < 64k\")},          \\\n-  { \"no-small-exec\",  -4, N_(\"Don't use bras\")},                         \\\n-  { \"debug\",           8, N_(\"Additional debug prints\")},                \\\n-  { \"no-debug\",       -8, N_(\"Don't print additional debug prints\")},    \\\n-  { \"64\",             16, N_(\"64 bit ABI\")},                             \\\n-  { \"31\",            -16, N_(\"31 bit ABI\")},                             \\\n-  { \"zarch\",          32, N_(\"z/Architecture\")},                         \\\n-  { \"esa\",           -32, N_(\"ESA/390 architecture\")},                   \\\n-  { \"mvcle\",          64, N_(\"mvcle use\")},                              \\\n-  { \"no-mvcle\",      -64, N_(\"mvc&ex\")},                                 \\\n-  { \"tpf-trace\",     128, N_(\"enable tpf OS tracing code\")},             \\\n-  { \"no-tpf-trace\", -128, N_(\"disable tpf OS tracing code\")},            \\\n-  { \"no-fused-madd\", 256, N_(\"disable fused multiply/add instructions\")},\\\n-  { \"fused-madd\",   -256, N_(\"enable fused multiply/add instructions\")}, \\\n+#define TARGET_SWITCHES                                                      \\\n+{ { \"hard-float\",          1, N_(\"Use hardware fp\")},                        \\\n+  { \"soft-float\",         -1, N_(\"Don't use hardware fp\")},                  \\\n+  { \"small-exec\",          4, N_(\"Use bras for executable < 64k\")},          \\\n+  { \"no-small-exec\",      -4, N_(\"Don't use bras\")},                         \\\n+  { \"debug\",               8, N_(\"Additional debug prints\")},                \\\n+  { \"no-debug\",           -8, N_(\"Don't print additional debug prints\")},    \\\n+  { \"64\",                 16, N_(\"64 bit ABI\")},                             \\\n+  { \"31\",                -16, N_(\"31 bit ABI\")},                             \\\n+  { \"zarch\",              32, N_(\"z/Architecture\")},                         \\\n+  { \"esa\",               -32, N_(\"ESA/390 architecture\")},                   \\\n+  { \"mvcle\",              64, N_(\"mvcle use\")},                              \\\n+  { \"no-mvcle\",          -64, N_(\"mvc&ex\")},                                 \\\n+  { \"tpf-trace\",         128, N_(\"Enable tpf OS tracing code\")},             \\\n+  { \"no-tpf-trace\",     -128, N_(\"Disable tpf OS tracing code\")},            \\\n+  { \"no-fused-madd\",     256, N_(\"Disable fused multiply/add instructions\")},\\\n+  { \"fused-madd\",       -256, N_(\"Enable fused multiply/add instructions\")}, \\\n+  { \"backchain\",         512, N_(\"Maintain backchain pointer\")},             \\\n+  { \"no-backchain\",     -512, N_(\"Don't maintain backchain pointer\")},       \\\n+  { \"packed-stack\",     1024, N_(\"Use packed stack layout\")},                \\\n+  { \"no-packed-stack\", -1024, N_(\"Don't use packed stack layout\")},          \\\n   { \"\", TARGET_DEFAULT, 0 } }\n \n #define TARGET_OPTIONS                                                         \\\n { { \"tune=\",            &s390_tune_string,                                     \\\n     N_(\"Schedule code for given CPU\"), 0},                                     \\\n   { \"arch=\",            &s390_arch_string,                                     \\\n     N_(\"Generate code for given CPU\"), 0},                                     \\\n-  { \"backchain\",        &s390_backchain_string,                                \\\n-    N_(\"Set backchain\"), \"1\"},                                                 \\\n-  { \"no-backchain\",     &s390_backchain_string,                                \\\n-    N_(\"Do not set backchain\"), \"\"},                                           \\\n-  { \"kernel-backchain\", &s390_backchain_string,                                \\\n-    N_(\"Set backchain appropriate for the linux kernel\"), \"2\"},                \\\n   { \"warn-framesize=\",   &s390_warn_framesize_string,                          \\\n     N_(\"Warn if a single function's framesize exceeds the given framesize\"),   \\\n        0},                                                                     \\\n@@ -623,12 +618,12 @@ extern int current_function_outgoing_args_size;\n    the corresponding RETURN_REGNUM register was saved.  */\n \n #define DYNAMIC_CHAIN_ADDRESS(FRAME)                                            \\\n-  (TARGET_BACKCHAIN ?                                                           \\\n-   ((FRAME) != hard_frame_pointer_rtx ? (FRAME) :\t\t\t\t\\\n-    plus_constant (arg_pointer_rtx, -STACK_POINTER_OFFSET)) :                   \\\n+  (TARGET_PACKED_STACK ?                                                        \\\n     ((FRAME) != hard_frame_pointer_rtx ?                                        \\\n      plus_constant ((FRAME), STACK_POINTER_OFFSET - UNITS_PER_WORD) :           \\\n-     plus_constant (arg_pointer_rtx, -UNITS_PER_WORD)))\n+     plus_constant (arg_pointer_rtx, -UNITS_PER_WORD)) :                        \\\n+     ((FRAME) != hard_frame_pointer_rtx ? (FRAME) :\t\t\t\t\\\n+      plus_constant (arg_pointer_rtx, -STACK_POINTER_OFFSET)))\n \n #define RETURN_ADDR_RTX(COUNT, FRAME)\t\t\t\t\t\t\\\n   s390_return_addr_rtx ((COUNT), DYNAMIC_CHAIN_ADDRESS ((FRAME)))"}, {"sha": "ccf70c7e0b114cf700cd9dfebc5ea50d9a14e4ed", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d31392c8d1782821f60d1e9acd34464dd8e163/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d31392c8d1782821f60d1e9acd34464dd8e163/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=b3d31392c8d1782821f60d1e9acd34464dd8e163", "patch": "@@ -7892,7 +7892,7 @@\n (define_expand \"allocate_stack\"\n   [(match_operand 0 \"general_operand\" \"\")\n    (match_operand 1 \"general_operand\" \"\")]\n- \"TARGET_BACKCHAIN || TARGET_KERNEL_BACKCHAIN\"\n+ \"TARGET_BACKCHAIN\"\n {\n   rtx temp = gen_reg_rtx (Pmode);\n \n@@ -7942,7 +7942,7 @@\n (define_expand \"restore_stack_block\"\n   [(match_operand 0 \"register_operand\" \"\")\n    (match_operand 1 \"register_operand\" \"\")]\n-  \"TARGET_BACKCHAIN || TARGET_KERNEL_BACKCHAIN\"\n+  \"TARGET_BACKCHAIN\"\n {\n   rtx temp = gen_reg_rtx (Pmode);\n \n@@ -7964,7 +7964,7 @@\n   /* Copy the backchain to the first word, sp to the second and the\n      literal pool base to the third.  */\n \n-  if (TARGET_BACKCHAIN || TARGET_KERNEL_BACKCHAIN)\n+  if (TARGET_BACKCHAIN)\n     {\n       rtx temp = force_reg (Pmode, s390_back_chain_rtx ());\n       emit_move_insn (operand_subword (operands[0], 0, 0, mode), temp);\n@@ -7988,7 +7988,7 @@\n   /* Restore the backchain from the first word, sp from the second and the\n      literal pool base from the third.  */\n \n-  if (TARGET_BACKCHAIN || TARGET_KERNEL_BACKCHAIN)\n+  if (TARGET_BACKCHAIN)\n     temp = force_reg (Pmode, operand_subword (operands[1], 0, 0, mode));\n     \n   emit_move_insn (base, operand_subword (operands[1], 2, 0, mode));"}, {"sha": "33a50b47498a5f20aa08153299f0a3676b3aabb9", "filename": "gcc/config/s390/tpf.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d31392c8d1782821f60d1e9acd34464dd8e163/gcc%2Fconfig%2Fs390%2Ftpf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d31392c8d1782821f60d1e9acd34464dd8e163/gcc%2Fconfig%2Fs390%2Ftpf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Ftpf.h?ref=b3d31392c8d1782821f60d1e9acd34464dd8e163", "patch": "@@ -58,10 +58,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    Also, enable TPF profiling support and the standard backchain by default.  */\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT\t\t(MASK_64BIT | MASK_ZARCH | MASK_HARD_FLOAT \\\n-\t\t\t\t | MASK_TPF_PROFILING)\n-#undef TARGET_DEFAULT_BACKCHAIN\n-#define TARGET_DEFAULT_BACKCHAIN \"1\"\n-\n+\t\t\t\t | MASK_TPF_PROFILING | MASK_BACKCHAIN)\n /* Exception handling.  */\n \n /* Select a format to encode pointers in exception handling data.  */"}, {"sha": "5796474594a78f417ec800e9af81377fa3e04525", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 41, "deletions": 18, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d31392c8d1782821f60d1e9acd34464dd8e163/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d31392c8d1782821f60d1e9acd34464dd8e163/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b3d31392c8d1782821f60d1e9acd34464dd8e163", "patch": "@@ -623,7 +623,8 @@ See RS/6000 and PowerPC Options.\n \n @emph{S/390 and zSeries Options}\n @gccoptlist{-mtune=@var{cpu-type}  -march=@var{cpu-type} @gol\n--mhard-float  -msoft-float  -mbackchain  -mno-backchain -mkernel-backchain @gol\n+-mhard-float  -msoft-float  -mbackchain  -mno-backchain @gol\n+-mpacked-stack  -mno-packed-stack @gol\n -msmall-exec  -mno-small-exec  -mmvcle -mno-mvcle @gol\n -m64  -m31  -mdebug  -mno-debug  -mesa  -mzarch @gol\n -mtpf-trace -mno-tpf-trace  -mfused-madd  -mno-fused-madd @gol\n@@ -10827,27 +10828,49 @@ generates IEEE floating-point instructions.  This is the default.\n \n @item -mbackchain\n @itemx -mno-backchain\n-@itemx -mkernel-backchain\n @opindex mbackchain\n @opindex mno-backchain\n-@opindex mkernel-backchain\n-In order to provide a backchain the address of the caller's frame\n-is stored within the callee's stack frame.\n+Store (do not store) the address of the caller's frame as backchain pointer\n+into the callee's stack frame.\n A backchain may be needed to allow debugging using tools that do not understand\n DWARF-2 call frame information.\n-For @option{-mno-backchain} no backchain is maintained at all which is the\n-default.\n-If one of the other options is present the backchain pointer is placed either\n-on top of the stack frame  (@option{-mkernel-backchain}) or on\n-the bottom (@option{-mbackchain}).\n-Beside the different backchain location @option{-mkernel-backchain}\n-also changes stack frame layout breaking the ABI@.  This option\n-is intended to be used for code which internally needs a backchain but has\n-to get by with a limited stack size e.g.@: the linux kernel.\n-Internal unwinding code not using DWARF-2 info has to be able to locate the\n-return address of a function.  That will be eased be the fact that\n-the return address of a function is placed two words below the backchain\n-pointer.\n+When @option{-mno-packed-stack} is in effect, the backchain pointer is stored\n+at the bottom of the stack frame; when @option{-mpacked-stack} is in effect,\n+the backchain is placed into the topmost word of the 96/160 byte register\n+save area.\n+\n+In general, code compiled with @option{-mbackchain} is call-compatible with\n+code compiled with @option{-mmo-backchain}; however, use of the backchain\n+for debugging purposes usually requires that the whole binary is built with\n+@option{-mbackchain}.  Note that the combination of @option{-mbackchain} and\n+@option{-mpacked-stack} generates code that is not ABI-compatible.\n+\n+The default is to not maintain the backchain.\n+\n+@item -mpacked-stack\n+@item -mno-packed-stack\n+@opindex mpacked-stack\n+@opindex mno-packed-stack\n+Use (do not use) the packed stack layout.  When @option{-mno-packed-stack} is\n+specified, the compiler uses the all fields of the 96/160 byte register save\n+area only for their default purpose; unused fields still take up stack space.\n+When @option{-mpacked-stack} is specified, register save slots are densely\n+packed at the top of the register save area; unused space is reused for other\n+purposes, allowing for more efficient use of the available stack space.\n+However, when @option{-mbackchain} is also in effect, the topmost word of\n+the save area is always used to store the backchain, and the return address\n+register is always saved two words below the backchain.\n+\n+As long as the stack frame backchain is not used, code generated with \n+@option{-mpacked-stack} is call-compatible with code generated with\n+@option{-mno-packed-stack}.  Note that some non-FSF releases of GCC 2.95 for\n+S/390 or zSeries generated code that uses the stack frame backchain at run\n+time, not just for debugging purposes.  Such code is not call-compatible\n+with code compiled with @option{-mpacked-stack}.  Also, note that the\n+combination of @option{-mbackchain} and @option{-mpacked-stack} generates code\n+that is not ABI-compatible.\n+\n+The default is to not use the packed stack layout.\n \n @item -msmall-exec\n @itemx -mno-small-exec"}]}