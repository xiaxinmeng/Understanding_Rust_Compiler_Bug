{"sha": "af746697141397c71da91a4f52f2e3b9db005cec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY3NDY2OTcxNDEzOTdjNzFkYTkxYTRmNTJmMmUzYjlkYjAwNWNlYw==", "commit": {"author": {"name": "Ben Elliston", "email": "bje@au.ibm.com", "date": "2004-11-24T04:09:27Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2004-11-24T04:09:27Z"}, "message": "cp-tree.h (context_as_string): Remove extern.\n\n\t* cp-tree.h (context_as_string): Remove extern.\n\t* error.c (context_as_string): Remove.\n\n\t* cp-tree.h (cp_type_qual_from_rid): Remove extern.\n\t* lex.c (cp_type_qual_from_rid): Remove.\n\n\t* cp-tree.h (do_poplevel): Remove extern.\n\t(check_multiple_declarators): Likewise.\n\t* semantics.c (do_poplevel): Make static.\n\t(check_multiple_declarators): Remove.\n\n\t* cp-tree.h (check_final_overrider): Remove extern.\n\t* search.c (check_final_overrider): Make static.\n\n\t* cp-tree.h (build_artificial_parm): Remove extern.\n\t* decl2.c (build_artificial_parm): Make static.\n\nFrom-SVN: r91134", "tree": {"sha": "f402c5fea47ec7ddebaa9e4cae76711df49aa044", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f402c5fea47ec7ddebaa9e4cae76711df49aa044"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af746697141397c71da91a4f52f2e3b9db005cec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af746697141397c71da91a4f52f2e3b9db005cec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af746697141397c71da91a4f52f2e3b9db005cec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af746697141397c71da91a4f52f2e3b9db005cec/comments", "author": null, "committer": null, "parents": [{"sha": "0b167d51ed3c0f9dfa2cee5bde9d7fd5a6bdd04d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b167d51ed3c0f9dfa2cee5bde9d7fd5a6bdd04d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b167d51ed3c0f9dfa2cee5bde9d7fd5a6bdd04d"}], "stats": {"total": 81, "additions": 22, "deletions": 59}, "files": [{"sha": "a8ed1ae6ddd5f1359222ba9db11e0a99b08ef69d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af746697141397c71da91a4f52f2e3b9db005cec/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af746697141397c71da91a4f52f2e3b9db005cec/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=af746697141397c71da91a4f52f2e3b9db005cec", "patch": "@@ -1,3 +1,22 @@\n+2004-11-23  Ben Elliston  <bje@au.ibm.com>\n+\n+\t* cp-tree.h (context_as_string): Remove extern.\n+\t* error.c (context_as_string): Remove.\n+\n+\t* cp-tree.h (cp_type_qual_from_rid): Remove extern.\n+\t* lex.c (cp_type_qual_from_rid): Remove.\n+\n+\t* cp-tree.h (do_poplevel): Remove extern.\n+\t(check_multiple_declarators): Likewise.\n+\t* semantics.c (do_poplevel): Make static.\n+\t(check_multiple_declarators): Remove.\n+\n+\t* cp-tree.h (check_final_overrider): Remove extern.\n+\t* search.c (check_final_overrider): Make static.\n+\n+\t* cp-tree.h (build_artificial_parm): Remove extern.\n+\t* decl2.c (build_artificial_parm): Make static.\n+\n 2004-11-22  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n \tPR c++/18354"}, {"sha": "40979fb21a321065a7aece75bbc2a042a5025a9e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af746697141397c71da91a4f52f2e3b9db005cec/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af746697141397c71da91a4f52f2e3b9db005cec/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=af746697141397c71da91a4f52f2e3b9db005cec", "patch": "@@ -3831,7 +3831,6 @@ extern void check_default_args (tree);\n extern void mark_used (tree);\n extern void finish_static_data_member_decl (tree, tree, tree, int);\n extern tree cp_build_parm_decl (tree, tree);\n-extern tree build_artificial_parm (tree, tree);\n extern tree get_guard (tree);\n extern tree get_guard_cond (tree);\n extern tree set_guard (tree);\n@@ -3853,7 +3852,6 @@ extern void init_error\t\t\t\t(void);\n extern const char *type_as_string\t\t(tree, int);\n extern const char *decl_as_string\t\t(tree, int);\n extern const char *expr_as_string\t\t(tree, int);\n-extern const char *context_as_string            (tree, int);\n extern const char *lang_decl_name\t\t(tree, int);\n extern const char *language_to_string           (enum languages);\n extern const char *class_key_or_enum_as_string  (tree);\n@@ -3923,7 +3921,6 @@ extern tree cxx_make_type\t\t\t(enum tree_code);\n extern tree make_aggr_type\t\t\t(enum tree_code);\n extern void yyerror\t\t\t\t(const char *);\n extern void yyhook\t\t\t\t(int);\n-extern int cp_type_qual_from_rid                (tree);\n extern bool cxx_init\t\t\t\t(void);\n extern void cxx_finish (void);\n \n@@ -4056,7 +4053,6 @@ extern tree binfo_for_vtable\t\t\t(tree);\n extern tree binfo_from_vbase\t\t\t(tree);\n extern tree binfo_for_vbase\t\t\t(tree, tree);\n extern tree look_for_overrides_here\t\t(tree, tree);\n-extern int check_final_overrider\t\t(tree, tree);\n #define dfs_skip_bases ((tree)1)\n extern tree dfs_walk_all (tree, tree (*) (tree, void *),\n \t\t\t  tree (*) (tree, void *), void *);\n@@ -4080,7 +4076,6 @@ extern void pop_to_parent_deferring_access_checks\t(void);\n extern void perform_deferred_access_checks\t(void);\n extern void perform_or_defer_access_check\t(tree, tree);\n extern void init_cp_semantics                   (void);\n-extern tree do_poplevel\t\t\t\t(tree);\n extern void add_decl_expr\t\t\t(tree);\n extern tree finish_expr_stmt                    (tree);\n extern tree begin_if_stmt                       (void);\n@@ -4157,7 +4152,6 @@ extern void finish_template_decl                (tree);\n extern tree finish_template_type                (tree, tree, int);\n extern tree finish_base_specifier               (tree, tree, bool);\n extern void finish_member_declaration           (tree);\n-extern void check_multiple_declarators          (void);\n extern void qualified_name_lookup_error\t\t(tree, tree, tree);\n extern tree finish_id_expression                (tree, tree, tree,\n \t\t\t\t\t\t cp_id_kind *, tree *,"}, {"sha": "3b97367e761b75167af39d765ab98e8302e66713", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af746697141397c71da91a4f52f2e3b9db005cec/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af746697141397c71da91a4f52f2e3b9db005cec/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=af746697141397c71da91a4f52f2e3b9db005cec", "patch": "@@ -157,7 +157,7 @@ cp_build_parm_decl (tree name, tree type)\n /* Returns a PARM_DECL for a parameter of the indicated TYPE, with the\n    indicated NAME.  */\n \n-tree\n+static tree\n build_artificial_parm (tree name, tree type)\n {\n   tree parm = cp_build_parm_decl (name, type);"}, {"sha": "2f14db62b3bebe684aa04595640dd9eb5936cf6e", "filename": "gcc/cp/error.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af746697141397c71da91a4f52f2e3b9db005cec/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af746697141397c71da91a4f52f2e3b9db005cec/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=af746697141397c71da91a4f52f2e3b9db005cec", "patch": "@@ -1919,14 +1919,6 @@ decl_as_string (tree decl, int flags)\n   return pp_formatted_text (cxx_pp);\n }\n \n-const char *\n-context_as_string (tree context, int flags)\n-{\n-  reinit_cxx_pp ();\n-  dump_scope (context, flags);\n-  return pp_formatted_text (cxx_pp);\n-}\n-\n /* Generate the three forms of printable names for cxx_printable_name.  */\n \n const char *"}, {"sha": "85d881389883b2756dc88c478a08ab93efc196c0", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af746697141397c71da91a4f52f2e3b9db005cec/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af746697141397c71da91a4f52f2e3b9db005cec/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=af746697141397c71da91a4f52f2e3b9db005cec", "patch": "@@ -796,20 +796,3 @@ make_aggr_type (enum tree_code code)\n \n   return t;\n }\n-\n-/* Return the type-qualifier corresponding to the identifier given by\n-   RID.  */\n-\n-int\n-cp_type_qual_from_rid (tree rid)\n-{\n-  if (rid == ridpointers[(int) RID_CONST])\n-    return TYPE_QUAL_CONST;\n-  else if (rid == ridpointers[(int) RID_VOLATILE])\n-    return TYPE_QUAL_VOLATILE;\n-  else if (rid == ridpointers[(int) RID_RESTRICT])\n-    return TYPE_QUAL_RESTRICT;\n-\n-  gcc_unreachable ();\n-  return TYPE_UNQUALIFIED;\n-}"}, {"sha": "8c26565147aa8f7c18903355916961ede68549a3", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af746697141397c71da91a4f52f2e3b9db005cec/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af746697141397c71da91a4f52f2e3b9db005cec/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=af746697141397c71da91a4f52f2e3b9db005cec", "patch": "@@ -1774,7 +1774,7 @@ dfs_walk_once_accessible (tree binfo, bool friends_p,\n /* Check that virtual overrider OVERRIDER is acceptable for base function\n    BASEFN. Issue diagnostic, and return zero, if unacceptable.  */\n \n-int\n+static int\n check_final_overrider (tree overrider, tree basefn)\n {\n   tree over_type = TREE_TYPE (overrider);"}, {"sha": "2cd78ebd7506b195e169cc93e224f2217d8834a0", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af746697141397c71da91a4f52f2e3b9db005cec/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af746697141397c71da91a4f52f2e3b9db005cec/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=af746697141397c71da91a4f52f2e3b9db005cec", "patch": "@@ -401,7 +401,7 @@ anon_aggr_type_p (tree node)\n \n /* Finish a scope.  */\n \n-tree\n+static tree\n do_poplevel (tree stmt_list)\n {\n   tree block = NULL;\n@@ -2294,31 +2294,6 @@ finish_base_specifier (tree base, tree access, bool virtual_p)\n   return result;\n }\n \n-/* Called when multiple declarators are processed.  If that is not\n-   permitted in this context, an error is issued.  */\n-\n-void\n-check_multiple_declarators (void)\n-{\n-  /* [temp]\n-     \n-     In a template-declaration, explicit specialization, or explicit\n-     instantiation the init-declarator-list in the declaration shall\n-     contain at most one declarator.  \n-\n-     We don't just use PROCESSING_TEMPLATE_DECL for the first\n-     condition since that would disallow the perfectly valid code, \n-     like `template <class T> struct S { int i, j; };'.  */\n-  if (at_function_scope_p ())\n-    /* It's OK to write `template <class T> void f() { int i, j;}'.  */\n-    return;\n-     \n-  if (PROCESSING_REAL_TEMPLATE_DECL_P () \n-      || processing_explicit_instantiation\n-      || processing_specialization)\n-    error (\"multiple declarators in template declaration\");\n-}\n-\n /* Issue a diagnostic that NAME cannot be found in SCOPE.  DECL is\n    what we found when we tried to do the lookup.  */\n "}]}