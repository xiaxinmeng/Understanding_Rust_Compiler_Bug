{"sha": "81723db9bcc6a06cf6c2a520683654866d52e2c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE3MjNkYjliY2M2YTA2Y2Y2YzJhNTIwNjgzNjU0ODY2ZDUyZTJjNA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1992-07-02T22:39:29Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1992-07-02T22:39:29Z"}, "message": "Do not allow branch if constant <relop> 0; Fix problems in movsi and halfpic.\n\nFrom-SVN: r1395", "tree": {"sha": "229c84dabdc6b16e348a14b03be66015e1bdb559", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/229c84dabdc6b16e348a14b03be66015e1bdb559"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81723db9bcc6a06cf6c2a520683654866d52e2c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81723db9bcc6a06cf6c2a520683654866d52e2c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81723db9bcc6a06cf6c2a520683654866d52e2c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81723db9bcc6a06cf6c2a520683654866d52e2c4/comments", "author": null, "committer": null, "parents": [{"sha": "f128d673af96f487006336ba3fd432b27e05c3db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f128d673af96f487006336ba3fd432b27e05c3db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f128d673af96f487006336ba3fd432b27e05c3db"}], "stats": {"total": 84, "additions": 45, "deletions": 39}, "files": [{"sha": "3e6b51971160133694d8c8cf08d77efc0b8d1c8f", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 45, "deletions": 39, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81723db9bcc6a06cf6c2a520683654866d52e2c4/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81723db9bcc6a06cf6c2a520683654866d52e2c4/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=81723db9bcc6a06cf6c2a520683654866d52e2c4", "patch": "@@ -1848,18 +1848,52 @@ move\\\\t%0,%z4\\\\n\\\\\n   \"\"\n   \"\n {\n-  /* If this is a half-pic address being moved to a register, convert the\n-     address into a load, so that scheduling and stuff works properly.  */\n+  rtx op0 = operands[0];\n+  rtx op1 = operands[1];\n+\n+  /* If this is a half-pic address being loaded, convert the address\n+     into a load, so that scheduling and stuff works properly.  */\n \n   if (HALF_PIC_P()\n-      && GET_CODE (operands[0]) == REG\n-      && GET_CODE (operands[1]) == SYMBOL_REF\n-      && HALF_PIC_ADDRESS_P (operands[1]))\n+      && CONSTANT_P (op1)\n+      && HALF_PIC_ADDRESS_P (op1))\n     {\n-      rtx ptr = HALF_PIC_PTR (operands[1]);\n-      if (XSTR (ptr, 0) != XSTR (operands[1], 0))\n+      rtx offset = const0_rtx;\n+      rtx ptr;\n+\n+      if (GET_CODE (op1) == CONST)\n+\top1 = eliminate_constant_term (XEXP (op1, 0), &offset);\n+\n+      ptr = HALF_PIC_PTR (op1);\n+      if (GET_CODE (ptr) == SYMBOL_REF\n+\t  && GET_CODE (op1) == SYMBOL_REF\n+\t  && XSTR (ptr, 0) != XSTR (op1, 0))\n \t{\n-\t  emit_move_insn (operands[0], gen_rtx (MEM, Pmode, ptr));\n+\t  rtx mem = gen_rtx (MEM, Pmode, ptr);\n+\n+\t  if (INTVAL (offset) == 0)\n+\t    emit_move_insn (op0, mem);\n+\n+\t  else if (reload_in_progress)\n+\t    {\n+\t      emit_move_insn (op0, mem);\n+\t      emit_insn (gen_addsi3 (op0, op0, offset));\n+\t    }\n+\n+\t  else\n+\t    {\n+\t      rtx reg = gen_reg_rtx (Pmode);\n+\n+\t      if (!SMALL_INT (offset))\n+\t\t{\n+\t\t  rtx reg2 = gen_reg_rtx (Pmode);\n+\t\t  emit_move_insn (reg2, offset);\n+\t\t  offset = reg2;\n+\t\t}\n+\n+\t      emit_move_insn (reg, mem);\n+\t      emit_insn (gen_addsi3 (op0, reg, offset));\n+\t    }\n \t  DONE;\n \t}\n     }\n@@ -2822,42 +2856,14 @@ move\\\\t%0,%z4\\\\n\\\\\n (define_insn \"branch_zero\"\n   [(set (pc)\n \t(if_then_else (match_operator:SI 0 \"cmp_op\"\n-\t\t\t\t\t [(match_operand:SI 1 \"arith32_operand\" \"rn\")\n+\t\t\t\t\t [(match_operand:SI 1 \"register_operand\" \"d\")\n \t\t\t\t\t  (const_int 0)])\n \t(match_operand 2 \"pc_or_label_operand\" \"\")\n \t(match_operand 3 \"pc_or_label_operand\" \"\")))]\n   \"\"\n   \"*\n {\n   mips_branch_likely = (final_sequence && INSN_ANNULLED_BRANCH_P (insn));\n-\n-  /* Handle places where CSE has folded a constant into the register operand.  */\n-  if (GET_CODE (operands[1]) == CONST_INT)\n-    {\n-      int value = INTVAL (operands[1]);\n-      int truth = 0;\n-\n-      switch (GET_CODE (operands[0]))\n-\t{\n-\tdefault:  abort ();\n-\tcase EQ:  truth = (value == 0);\t\t\tbreak;\n-\tcase NE:  truth = (value != 0);\t\t\tbreak;\n-\tcase GT:  truth = (value >  0);\t\t\tbreak;\n-\tcase GE:  truth = (value >= 0);\t\t\tbreak;\n-\tcase LT:  truth = (value <  0);\t\t\tbreak;\n-\tcase LE:  truth = (value <= 0);\t\t\tbreak;\n-\tcase GTU: truth = (((unsigned)value) >  0);\tbreak;\n-\tcase GEU: truth = 1;\t\t\t\tbreak;\n-\tcase LTU: truth = 0;\t\t\t\tbreak;\n-\tcase LEU: truth = (((unsigned)value) <= 0);\tbreak;\n-\t}\n-\n-      if (operands[2] != pc_rtx)\n-\treturn (truth) ? \\\"%*beq%?\\\\t%.,%.,%2\\\" : \\\"%*bne%?\\\\t%.,%.,%2\\\";\n-      else\n-\treturn (truth) ? \\\"%*bne%?\\\\t%.,%.,%2\\\" : \\\"%*beq%?\\\\t%.,%.,%2\\\";\n-    }\n-\n   if (operands[2] != pc_rtx)\n     {\t\t\t\t/* normal jump */\n       switch (GET_CODE (operands[0]))\n@@ -2867,7 +2873,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \tcase GTU: return \\\"%*bne%?\\\\t%z1,%.,%2\\\";\n \tcase LEU: return \\\"%*beq%?\\\\t%z1,%.,%2\\\";\n \tcase GEU: return \\\"%*j\\\\t%2\\\";\n-\tcase LTU: return \\\"#%*bltuz\\\\t%z1,%2\\\";\n+\tcase LTU: return \\\"%*bne%?\\\\t%.,%.,%2\\\";\n \t}\n \n       return \\\"%*b%C0z%?\\\\t%z1,%2\\\";\n@@ -2880,7 +2886,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \tcase NE:  return \\\"%*beq%?\\\\t%z1,%.,%3\\\";\n \tcase GTU: return \\\"%*beq%?\\\\t%z1,%.,%3\\\";\n \tcase LEU: return \\\"%*bne%?\\\\t%z1,%.,%3\\\";\n-\tcase GEU: return \\\"#%*bgeuz\\\\t%z1,%3\\\";\n+\tcase GEU: return \\\"%*beq%?\\\\t%.,%.,%3\\\";\n \tcase LTU: return \\\"%*j\\\\t%3\\\";\n \t}\n "}]}