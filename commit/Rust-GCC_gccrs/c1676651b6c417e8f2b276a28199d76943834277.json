{"sha": "c1676651b6c417e8f2b276a28199d76943834277", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE2NzY2NTFiNmM0MTdlOGYyYjI3NmEyODE5OWQ3Njk0MzgzNDI3Nw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-15T14:36:34Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-16T07:40:43Z"}, "message": "libstdc++: Suppress pedantic warnings about __int128\n\nWith -std=c++NN -pedantic -Wsystem-headers there are warnings about the\nuse of __int128, which can be suppressed using diagnostic pragmas.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/cpp_type_traits.h: Add diagnostic pragmas around\n\tuses of non-standard integer types.\n\t* include/bits/functional_hash.h: Likewise.\n\t* include/bits/iterator_concepts.h: Likewise.\n\t* include/bits/max_size_type.h: Likewise.\n\t* include/bits/std_abs.h: Likewise.\n\t* include/bits/stl_algobase.h: Likewise.\n\t* include/bits/uniform_int_dist.h: Likewise.\n\t* include/ext/numeric_traits.h: Likewise.\n\t* include/std/type_traits: Likewise.", "tree": {"sha": "7c5e2a3081811ab64d0c3faa2e5f529aea2a9a3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c5e2a3081811ab64d0c3faa2e5f529aea2a9a3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1676651b6c417e8f2b276a28199d76943834277", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1676651b6c417e8f2b276a28199d76943834277", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1676651b6c417e8f2b276a28199d76943834277", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1676651b6c417e8f2b276a28199d76943834277/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d97d71a1989e9ee8e1b8563b351c42b7732da108", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d97d71a1989e9ee8e1b8563b351c42b7732da108", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d97d71a1989e9ee8e1b8563b351c42b7732da108"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "8f8dd817dc20cf764c289e201cf45db0a644c48f", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1676651b6c417e8f2b276a28199d76943834277/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1676651b6c417e8f2b276a28199d76943834277/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=c1676651b6c417e8f2b276a28199d76943834277", "patch": "@@ -266,6 +266,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef __true_type __type;\t\\\n     };\n \n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wpedantic\"\n+\n #ifdef __GLIBCXX_TYPE_INT_N_0\n __INT_N(__GLIBCXX_TYPE_INT_N_0)\n #endif\n@@ -279,6 +282,8 @@ __INT_N(__GLIBCXX_TYPE_INT_N_2)\n __INT_N(__GLIBCXX_TYPE_INT_N_3)\n #endif\n \n+#pragma GCC diagnostic pop\n+\n #undef __INT_N\n \n   //"}, {"sha": "78e3644bc74cea59141eb567f6a0ba239015f0c7", "filename": "libstdc++-v3/include/bits/functional_hash.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1676651b6c417e8f2b276a28199d76943834277/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1676651b6c417e8f2b276a28199d76943834277/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h?ref=c1676651b6c417e8f2b276a28199d76943834277", "patch": "@@ -171,6 +171,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// Explicit specialization for unsigned long long.\n   _Cxx_hashtable_define_trivial_hash(unsigned long long)\n \n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wpedantic\"\n+\n #ifdef __GLIBCXX_TYPE_INT_N_0\n   _Cxx_hashtable_define_trivial_hash(__GLIBCXX_TYPE_INT_N_0)\n   _Cxx_hashtable_define_trivial_hash(__GLIBCXX_TYPE_INT_N_0 unsigned)\n@@ -188,6 +191,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   _Cxx_hashtable_define_trivial_hash(__GLIBCXX_TYPE_INT_N_3 unsigned)\n #endif\n \n+#pragma GCC diagnostic pop\n+\n #undef _Cxx_hashtable_define_trivial_hash\n \n   struct _Hash_impl"}, {"sha": "97c0b80a507193b4616385b2df395fa7698f8508", "filename": "libstdc++-v3/include/bits/iterator_concepts.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1676651b6c417e8f2b276a28199d76943834277/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1676651b6c417e8f2b276a28199d76943834277/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h?ref=c1676651b6c417e8f2b276a28199d76943834277", "patch": "@@ -553,6 +553,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class __max_diff_type;\n     class __max_size_type;\n \n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wpedantic\"\n+\n     template<typename _Tp>\n       concept __is_signed_int128\n #if __SIZEOF_INT128__\n@@ -569,6 +572,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t= false;\n #endif\n \n+#pragma GCC diagnostic pop\n+\n     template<typename _Tp>\n       concept __cv_bool = same_as<const volatile _Tp, const volatile bool>;\n "}, {"sha": "24237cc57de93da6199e56a173316416191f6646", "filename": "libstdc++-v3/include/bits/max_size_type.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1676651b6c417e8f2b276a28199d76943834277/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmax_size_type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1676651b6c417e8f2b276a28199d76943834277/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmax_size_type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmax_size_type.h?ref=c1676651b6c417e8f2b276a28199d76943834277", "patch": "@@ -417,7 +417,10 @@ namespace ranges\n #endif\n \n #if __SIZEOF_INT128__\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wpedantic\"\n       using __rep = unsigned __int128;\n+#pragma GCC diagnostic pop\n #else\n       using __rep = unsigned long long;\n #endif\n@@ -771,7 +774,10 @@ namespace ranges\n       static constexpr bool is_integer = true;\n       static constexpr bool is_exact = true;\n #if __SIZEOF_INT128__\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wpedantic\"\n       static_assert(same_as<_Sp::__rep, unsigned __int128>);\n+#pragma GCC diagnostic pop\n       static constexpr int digits = 129;\n #else\n       static_assert(same_as<_Sp::__rep, unsigned long long>);"}, {"sha": "c65ebb664391bedb67f2058ea9eb5579e925416f", "filename": "libstdc++-v3/include/bits/std_abs.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1676651b6c417e8f2b276a28199d76943834277/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_abs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1676651b6c417e8f2b276a28199d76943834277/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_abs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_abs.h?ref=c1676651b6c417e8f2b276a28199d76943834277", "patch": "@@ -80,6 +80,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_fabsl(__x); }\n #endif\n \n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wpedantic\"\n+\n #if defined(__GLIBCXX_TYPE_INT_N_0)\n   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0\n   abs(__GLIBCXX_TYPE_INT_N_0 __x) { return __x >= 0 ? __x : -__x; }\n@@ -104,6 +107,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __x < 0 ? -__x : __x; }\n #endif\n \n+#pragma GCC diagnostic pop\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n } // extern \"C\"++\""}, {"sha": "7f920dbdbf7a4eb6f03c83714923609d23604787", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1676651b6c417e8f2b276a28199d76943834277/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1676651b6c417e8f2b276a28199d76943834277/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=c1676651b6c417e8f2b276a28199d76943834277", "patch": "@@ -1013,6 +1013,9 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n   inline _GLIBCXX_CONSTEXPR unsigned long long\n   __size_to_integer(unsigned long long __n) { return __n; }\n \n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wpedantic\"\n+\n #if defined(__GLIBCXX_TYPE_INT_N_0)\n   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0\n   __size_to_integer(__GLIBCXX_TYPE_INT_N_0 __n) { return __n; }\n@@ -1038,6 +1041,8 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_3 __n) { return __n; }\n #endif\n \n+#pragma GCC diagnostic pop\n+\n   inline _GLIBCXX_CONSTEXPR long long\n   __size_to_integer(float __n) { return (long long)__n; }\n   inline _GLIBCXX_CONSTEXPR long long"}, {"sha": "8ee33450fa1b6533a71575f217e6777f3dda60df", "filename": "libstdc++-v3/include/bits/uniform_int_dist.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1676651b6c417e8f2b276a28199d76943834277/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1676651b6c417e8f2b276a28199d76943834277/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h?ref=c1676651b6c417e8f2b276a28199d76943834277", "patch": "@@ -299,6 +299,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if defined __UINT64_TYPE__ && defined __UINT32_TYPE__\n #if __SIZEOF_INT128__\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wpedantic\"\n \t    if _GLIBCXX17_CONSTEXPR (__urngrange == __UINT64_MAX__)\n \t      {\n \t\t// __urng produces values that use exactly 64-bits,\n@@ -307,6 +309,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t__ret = _S_nd<unsigned __int128>(__urng, __u64erange);\n \t      }\n \t    else\n+#pragma GCC diagnostic pop\n #endif\n \t    if _GLIBCXX17_CONSTEXPR (__urngrange == __UINT32_MAX__)\n \t      {"}, {"sha": "0dc1bc61f3e98ce2ac46f7c49fe23f0434b9dc6d", "filename": "libstdc++-v3/include/ext/numeric_traits.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1676651b6c417e8f2b276a28199d76943834277/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1676651b6c417e8f2b276a28199d76943834277/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric_traits.h?ref=c1676651b6c417e8f2b276a28199d76943834277", "patch": "@@ -123,9 +123,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n #if defined __STRICT_ANSI__ && defined __SIZEOF_INT128__\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wpedantic\"\n   // In strict modes __is_integer<__int128> is false,\n   // but we still want to define __numeric_traits_integer<__int128>.\n   _GLIBCXX_INT_N_TRAITS(__int128, 128)\n+#pragma GCC diagnostic pop\n #endif\n \n #undef _GLIBCXX_INT_N_TRAITS"}, {"sha": "91d65234f238cd2a6bf64576ed080d0638067bd0", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1676651b6c417e8f2b276a28199d76943834277/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1676651b6c417e8f2b276a28199d76943834277/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=c1676651b6c417e8f2b276a28199d76943834277", "patch": "@@ -347,6 +347,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_integral_helper<unsigned long long>\n     : public true_type { };\n \n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wpedantic\"\n+\n   // Conditionalizing on __STRICT_ANSI__ here will break any port that\n   // uses one of these types for size_t.\n #if defined(__GLIBCXX_TYPE_INT_N_0)\n@@ -385,6 +388,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_integral_helper<unsigned __GLIBCXX_TYPE_INT_N_3>\n     : public true_type { };\n #endif\n+#pragma GCC diagnostic pop\n   /// @endcond\n \n   /// is_integral\n@@ -617,6 +621,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, typename... _Types>\n     using __is_one_of = __or_<is_same<_Tp, _Types>...>;\n \n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wpedantic\"\n+\n   // Check if a type is one of the signed integer types.\n   template<typename _Tp>\n     using __is_signed_integer = __is_one_of<__remove_cv_t<_Tp>,\n@@ -654,6 +661,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  , unsigned __GLIBCXX_TYPE_INT_N_3\n #endif\n \t  >;\n+#pragma GCC diagnostic pop\n \n   // Check if a type is one of the signed or unsigned integer types.\n   template<typename _Tp>\n@@ -1717,6 +1725,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __make_unsigned<long long>\n     { typedef unsigned long long __type; };\n \n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wpedantic\"\n+\n #if defined(__GLIBCXX_TYPE_INT_N_0)\n   template<>\n     struct __make_unsigned<__GLIBCXX_TYPE_INT_N_0>\n@@ -1738,6 +1749,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { typedef unsigned __GLIBCXX_TYPE_INT_N_3 __type; };\n #endif\n \n+#pragma GCC diagnostic pop\n+\n   // Select between integral and enum: not possible to be both.\n   template<typename _Tp,\n \t   bool _IsInt = is_integral<_Tp>::value,\n@@ -1873,6 +1886,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __make_signed<unsigned long long>\n     { typedef signed long long __type; };\n \n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wpedantic\"\n+\n #if defined(__GLIBCXX_TYPE_INT_N_0)\n   template<>\n     struct __make_signed<unsigned __GLIBCXX_TYPE_INT_N_0>\n@@ -1894,6 +1910,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { typedef __GLIBCXX_TYPE_INT_N_3 __type; };\n #endif\n \n+#pragma GCC diagnostic pop\n+\n   // Select between integral and enum: not possible to be both.\n   template<typename _Tp,\n \t   bool _IsInt = is_integral<_Tp>::value,"}]}