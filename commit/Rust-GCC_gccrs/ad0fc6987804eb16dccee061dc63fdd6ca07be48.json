{"sha": "ad0fc6987804eb16dccee061dc63fdd6ca07be48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQwZmM2OTg3ODA0ZWIxNmRjY2VlMDYxZGM2M2ZkZDZjYTA3YmU0OA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@redhat.com", "date": "2001-03-27T23:15:04Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2001-03-27T23:15:04Z"}, "message": "Fix ia64-linux kernel miscompile, bad unwind info when reorder epilogue block.\n\n\t* final.c (final_scan_insn, case NOTE_INSN_BASIC_BLOCK): Call\n\tIA64_UNWIND_EMIT.\n\t* config/ia64/ia64.c (block_num, need_copy_state): New static vars.\n\t(process_epilogue): New static function.\n\t(process_set): Call process_epilogue instead of emitting .restore\n\tdirectly.\n\t(process_for_unwind_directive): Handle NOTE_INSN_BASIC_BLOCK.\n\nFrom-SVN: r40885", "tree": {"sha": "532d2ee7bd30f32f7fe080f207dfdccba9120355", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/532d2ee7bd30f32f7fe080f207dfdccba9120355"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad0fc6987804eb16dccee061dc63fdd6ca07be48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad0fc6987804eb16dccee061dc63fdd6ca07be48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad0fc6987804eb16dccee061dc63fdd6ca07be48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad0fc6987804eb16dccee061dc63fdd6ca07be48/comments", "author": null, "committer": null, "parents": [{"sha": "911e61070f7b39ca392345444b1f91411aad3925", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/911e61070f7b39ca392345444b1f91411aad3925", "html_url": "https://github.com/Rust-GCC/gccrs/commit/911e61070f7b39ca392345444b1f91411aad3925"}], "stats": {"total": 64, "additions": 58, "deletions": 6}, "files": [{"sha": "7aa2bdeccc61c4d1689622da65939792d5839e8b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0fc6987804eb16dccee061dc63fdd6ca07be48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0fc6987804eb16dccee061dc63fdd6ca07be48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad0fc6987804eb16dccee061dc63fdd6ca07be48", "patch": "@@ -7,6 +7,14 @@\n \n 2001-03-27  Jim Wilson  <wilson@redhat.com>\n \n+\t* final.c (final_scan_insn, case NOTE_INSN_BASIC_BLOCK): Call\n+\tIA64_UNWIND_EMIT.\n+\t* config/ia64/ia64.c (block_num, need_copy_state): New static vars.\n+\t(process_epilogue): New static function.\n+\t(process_set): Call process_epilogue instead of emitting .restore\n+\tdirectly.\n+\t(process_for_unwind_directive): Handle NOTE_INSN_BASIC_BLOCK.\n+\n \t* flow.c (struct reg_cond_life_info): New fields orig_condition\n \tand stores.\n \t(init_propagate_block_info): Set new fields."}, {"sha": "63d830de216c2476ed0ba101672e1cd54103b4f8", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 47, "deletions": 6, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0fc6987804eb16dccee061dc63fdd6ca07be48/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0fc6987804eb16dccee061dc63fdd6ca07be48/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=ad0fc6987804eb16dccee061dc63fdd6ca07be48", "patch": "@@ -6335,7 +6335,32 @@ ia64_encode_section_info (decl)\n     }\n }\n \f\n-/* Output assmebly directives for prologue regions.  */\n+/* Output assembly directives for prologue regions.  */\n+\n+/* The current basic block number.  */\n+\n+static int block_num;\n+\n+/* True if we need a copy_state command at the start of the next block.  */\n+\n+static int need_copy_state;\n+\n+/* The function emits unwind directives for the start of an epilogue.  */\n+\n+static void\n+process_epilogue ()\n+{\n+  /* If this isn't the last block of the function, then we need to label the\n+     current state, and copy it back in at the start of the next block.  */\n+\n+  if (block_num != n_basic_blocks - 1)\n+    {\n+      fprintf (asm_out_file, \"\\t.label_state 1\\n\");\n+      need_copy_state = 1;\n+    }\n+\n+  fprintf (asm_out_file, \"\\t.restore sp\\n\");\n+}\n \n /* This function processes a SET pattern looking for specific patterns\n    which result in emitting an assembly directive required for unwinding.  */\n@@ -6383,14 +6408,14 @@ process_set (asm_out_file, pat)\n \t\t  fputc ('\\n', asm_out_file);\n \t\t}\n \t      else\n-\t\tfprintf (asm_out_file, \"\\t.restore sp\\n\");\n+\t\tprocess_epilogue ();\n \t    }\n \t  else\n \t    abort ();\n \t}\n       else if (GET_CODE (src) == REG\n \t       && REGNO (src) == HARD_FRAME_POINTER_REGNUM)\n-\tfprintf (asm_out_file, \"\\t.restore sp\\n\");\n+\tprocess_epilogue ();\n       else\n \tabort ();\n \n@@ -6561,12 +6586,28 @@ process_for_unwind_directive (asm_out_file, insn)\n      FILE *asm_out_file;\n      rtx insn;\n {\n-  if ((flag_unwind_tables\n-       || (flag_exceptions && !exceptions_via_longjmp))\n-      && RTX_FRAME_RELATED_P (insn))\n+  if (flag_unwind_tables\n+      || (flag_exceptions && !exceptions_via_longjmp))\n     {\n       rtx pat;\n \n+      if (GET_CODE (insn) == NOTE\n+\t  && NOTE_LINE_NUMBER (insn) == NOTE_INSN_BASIC_BLOCK)\n+\t{\n+\t  block_num = NOTE_BASIC_BLOCK (insn)->index;\n+\n+\t  /* Restore unwind state from immediately before the epilogue.  */\n+\t  if (need_copy_state)\n+\t    {\n+\t      fprintf (asm_out_file, \"\\t.body\\n\");\n+\t      fprintf (asm_out_file, \"\\t.copy_state 1\\n\");\n+\t      need_copy_state = 0;\n+\t    }\n+\t}\n+\n+      if (! RTX_FRAME_RELATED_P (insn))\n+\treturn;\n+\n       pat = find_reg_note (insn, REG_FRAME_RELATED_EXPR, NULL_RTX);\n       if (pat)\n \tpat = XEXP (pat, 0);"}, {"sha": "cdc2de49c5ab429b541b6a9f5a8009c16f32c20b", "filename": "gcc/final.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0fc6987804eb16dccee061dc63fdd6ca07be48/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0fc6987804eb16dccee061dc63fdd6ca07be48/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=ad0fc6987804eb16dccee061dc63fdd6ca07be48", "patch": "@@ -2117,6 +2117,9 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \t  break;\n \n \tcase NOTE_INSN_BASIC_BLOCK:\n+#ifdef IA64_UNWIND_INFO\n+\t  IA64_UNWIND_EMIT (asm_out_file, insn);\n+#endif\n \t  if (flag_debug_asm)\n \t    fprintf (asm_out_file, \"\\t%s basic block %d\\n\",\n \t\t     ASM_COMMENT_START, NOTE_BASIC_BLOCK (insn)->index);"}]}