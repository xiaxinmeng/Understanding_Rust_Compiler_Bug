{"sha": "aaf8a23ef3ff2055dde65871b438883ecc067bb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFmOGEyM2VmM2ZmMjA1NWRkZTY1ODcxYjQzODg4M2VjYzA2N2JiMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-06-24T23:14:26Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-06-24T23:14:26Z"}, "message": "class.c (check_methods, [...]): Guard VINDEX checks by FUNCTION_DECL check.\n\n\n\t* class.c (check_methods, create_vtable_ptr, determine_key_method,\n\tadd_vcall_offset_vtbl_entries_1): Guard VINDEX checks by FUNCTION_DECL check.\n\t* cp-tree.h (lang_decl_ns): Add ns_using and ns_users.\n\t(DECL_NAMESPACE_USING, DECL_NAMESPACE_USERS): Use lang_decl_ns.\n\t(DECL_NAMESPACE_ASSOCIATIONS): Use DECL_INITIAL.\n\t(DECL_TEMPLATE_INSTANTIATIONS): Use DECL_SIZE_UNIT.\n\t* tree.c (find_decls_types_r): Do not check DECL_VINDEX for TYPE_DECL.\n\t* tree.h (DECL_VINDEX, DECL_SAVED_TREE): Restrict to DECL_FUNCTION.\n\t* tree-core.h (tree_decl_non_common): Move saved_tree and vindex...\n\t(tree_function_decl): ... here.\n\t* tree-streamer-out.c (write_ts_decl_non_common_tree_pointers): Move\n\tstreaming of vindex to ...\n\t(write_ts_function_decl_tree_pointers): ... here.\n\n\t* tree-streamer-in.c (lto_input_ts_decl_non_common_tree_pointers):\n\tDo not stream DECL_VINDEX.\n\t(lto_input_ts_function_decl_tree_pointers): Stream it here.\n\n\t* lto.c (mentions_vars_p_decl_non_common): Move DECL_VINDEX check to ..\n\t(mentions_vars_p_function): ... here.\n\t(compare_tree_sccs_1): Update VINDEX checks.\n\t(lto_fixup_prevailing_decls): Likewise.\n\nFrom-SVN: r211960", "tree": {"sha": "4eb562a7b31cab4e4e7d8a28aa86e3deca8f76e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4eb562a7b31cab4e4e7d8a28aa86e3deca8f76e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aaf8a23ef3ff2055dde65871b438883ecc067bb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaf8a23ef3ff2055dde65871b438883ecc067bb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaf8a23ef3ff2055dde65871b438883ecc067bb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaf8a23ef3ff2055dde65871b438883ecc067bb0/comments", "author": null, "committer": null, "parents": [{"sha": "ecc6304308f19c159a9df27d0bd5a66f5acbba83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecc6304308f19c159a9df27d0bd5a66f5acbba83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecc6304308f19c159a9df27d0bd5a66f5acbba83"}], "stats": {"total": 89, "additions": 61, "deletions": 28}, "files": [{"sha": "85503f1580e8072e2fe339cecb1ccbeedfa8eeb3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf8a23ef3ff2055dde65871b438883ecc067bb0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf8a23ef3ff2055dde65871b438883ecc067bb0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aaf8a23ef3ff2055dde65871b438883ecc067bb0", "patch": "@@ -1,3 +1,16 @@\n+2014-06-24  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree.c (find_decls_types_r): Do not check DECL_VINDEX for TYPE_DECL.\n+\t* tree.h (DECL_VINDEX, DECL_SAVED_TREE): Restrict to DECL_FUNCTION.\n+\t* tree-core.h (tree_decl_non_common): Move saved_tree and vindex...\n+\t(tree_function_decl): ... here.\n+\t* tree-streamer-out.c (write_ts_decl_non_common_tree_pointers): Move\n+\tstreaming of vindex to ...\n+\t(write_ts_function_decl_tree_pointers): ... here.\n+\t* tree-streamer-in.c (lto_input_ts_decl_non_common_tree_pointers):\n+\tDo not stream DECL_VINDEX.\n+\t(lto_input_ts_function_decl_tree_pointers): Stream it here.\n+\n 2014-06-24  Catherine Moore  <clm@codesourcery.com>\n \t    Sandra Loosemore  <sandra@codesourcery.com>\n "}, {"sha": "d3d2835ed9f0bdae94fca167588a00179679ee4e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf8a23ef3ff2055dde65871b438883ecc067bb0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf8a23ef3ff2055dde65871b438883ecc067bb0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=aaf8a23ef3ff2055dde65871b438883ecc067bb0", "patch": "@@ -1,3 +1,12 @@\n+2014-06-24  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* class.c (check_methods, create_vtable_ptr, determine_key_method,\n+\tadd_vcall_offset_vtbl_entries_1): Guard VINDEX checks by FUNCTION_DECL check.\n+\t* cp-tree.h (lang_decl_ns): Add ns_using and ns_users.\n+\t(DECL_NAMESPACE_USING, DECL_NAMESPACE_USERS): Use lang_decl_ns.\n+\t(DECL_NAMESPACE_ASSOCIATIONS): Use DECL_INITIAL.\n+\t(DECL_TEMPLATE_INSTANTIATIONS): Use DECL_SIZE_UNIT.\n+\n 2014-06-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/33972"}, {"sha": "743ad510a7685409bb417dc1216cc87f982f62c1", "filename": "gcc/cp/class.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf8a23ef3ff2055dde65871b438883ecc067bb0/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf8a23ef3ff2055dde65871b438883ecc067bb0/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=aaf8a23ef3ff2055dde65871b438883ecc067bb0", "patch": "@@ -4356,11 +4356,11 @@ check_methods (tree t)\n   for (x = TYPE_METHODS (t); x; x = DECL_CHAIN (x))\n     {\n       check_for_override (x, t);\n-      if (DECL_PURE_VIRTUAL_P (x) && ! DECL_VINDEX (x))\n+      if (DECL_PURE_VIRTUAL_P (x) && (TREE_CODE (x) != FUNCTION_DECL || ! DECL_VINDEX (x)))\n \terror (\"initializer specified for non-virtual method %q+D\", x);\n       /* The name of the field is the original field name\n \t Save this in auxiliary field for later overloading.  */\n-      if (DECL_VINDEX (x))\n+      if (TREE_CODE (x) == FUNCTION_DECL && DECL_VINDEX (x))\n \t{\n \t  TYPE_POLYMORPHIC_P (t) = 1;\n \t  if (DECL_PURE_VIRTUAL_P (x))\n@@ -5658,7 +5658,8 @@ create_vtable_ptr (tree t, tree* virtuals_p)\n \n   /* Collect the virtual functions declared in T.  */\n   for (fn = TYPE_METHODS (t); fn; fn = DECL_CHAIN (fn))\n-    if (DECL_VINDEX (fn) && !DECL_MAYBE_IN_CHARGE_DESTRUCTOR_P (fn)\n+    if (TREE_CODE (fn) == FUNCTION_DECL\n+\t&& DECL_VINDEX (fn) && !DECL_MAYBE_IN_CHARGE_DESTRUCTOR_P (fn)\n \t&& TREE_CODE (DECL_VINDEX (fn)) != INTEGER_CST)\n       {\n \ttree new_virtual = make_node (TREE_LIST);\n@@ -6327,7 +6328,8 @@ determine_key_method (tree type)\n      this function until the end of the translation unit.  */\n   for (method = TYPE_METHODS (type); method != NULL_TREE;\n        method = DECL_CHAIN (method))\n-    if (DECL_VINDEX (method) != NULL_TREE\n+    if (TREE_CODE (method) == FUNCTION_DECL\n+\t&& DECL_VINDEX (method) != NULL_TREE\n \t&& ! DECL_DECLARED_INLINE_P (method)\n \t&& ! DECL_PURE_VIRTUAL_P (method))\n       {\n@@ -9140,7 +9142,7 @@ add_vcall_offset_vtbl_entries_1 (tree binfo, vtbl_init_data* vid)\n   for (orig_fn = TYPE_METHODS (BINFO_TYPE (binfo));\n        orig_fn;\n        orig_fn = DECL_CHAIN (orig_fn))\n-    if (DECL_VINDEX (orig_fn))\n+    if (TREE_CODE (orig_fn) == FUNCTION_DECL && DECL_VINDEX (orig_fn))\n       add_vcall_offset (orig_fn, binfo, vid);\n }\n "}, {"sha": "c1bd7cfdf68e2688b5ee283df0fa783d25b59b61", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf8a23ef3ff2055dde65871b438883ecc067bb0/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf8a23ef3ff2055dde65871b438883ecc067bb0/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=aaf8a23ef3ff2055dde65871b438883ecc067bb0", "patch": "@@ -2048,6 +2048,8 @@ struct GTY(()) lang_decl_fn {\n struct GTY(()) lang_decl_ns {\n   struct lang_decl_base base;\n   cp_binding_level *level;\n+  tree ns_using;\n+  tree ns_users;\n };\n \n /* DECL_LANG_SPECIFIC for parameters.  */\n@@ -2580,16 +2582,16 @@ struct GTY(()) lang_decl {\n /* For a NAMESPACE_DECL: the list of using namespace directives\n    The PURPOSE is the used namespace, the value is the namespace\n    that is the common ancestor.  */\n-#define DECL_NAMESPACE_USING(NODE) DECL_VINDEX (NAMESPACE_DECL_CHECK (NODE))\n+#define DECL_NAMESPACE_USING(NODE) (LANG_DECL_NS_CHECK (NODE)->ns_using)\n \n /* In a NAMESPACE_DECL, the DECL_INITIAL is used to record all users\n    of a namespace, to record the transitive closure of using namespace.  */\n-#define DECL_NAMESPACE_USERS(NODE) DECL_INITIAL (NAMESPACE_DECL_CHECK (NODE))\n+#define DECL_NAMESPACE_USERS(NODE) (LANG_DECL_NS_CHECK (NODE)->ns_users)\n \n /* In a NAMESPACE_DECL, the list of namespaces which have associated\n    themselves with this one.  */\n #define DECL_NAMESPACE_ASSOCIATIONS(NODE) \\\n-  (NAMESPACE_DECL_CHECK (NODE)->decl_non_common.saved_tree)\n+  DECL_INITIAL (NAMESPACE_DECL_CHECK (NODE))\n \n /* In a NAMESPACE_DECL, points to the original namespace if this is\n    a namespace alias.  */\n@@ -3784,7 +3786,7 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n \n    This list is not used for other templates.  */\n #define DECL_TEMPLATE_INSTANTIATIONS(NODE) \\\n-  DECL_VINDEX (TEMPLATE_DECL_CHECK (NODE))\n+  DECL_SIZE_UNIT (TEMPLATE_DECL_CHECK (NODE))\n \n /* For a class template, this list contains the partial\n    specializations of this template.  (Full specializations are not"}, {"sha": "cb47b0023c942380240bb3734a5d7a59a5b5ce81", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf8a23ef3ff2055dde65871b438883ecc067bb0/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf8a23ef3ff2055dde65871b438883ecc067bb0/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=aaf8a23ef3ff2055dde65871b438883ecc067bb0", "patch": "@@ -528,7 +528,6 @@ DFS_write_tree_body (struct output_block *ob,\n     {\n       if (TREE_CODE (expr) == TYPE_DECL)\n \tDFS_follow_tree_edge (DECL_ORIGINAL_TYPE (expr));\n-      DFS_follow_tree_edge (DECL_VINDEX (expr));\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_DECL_WITH_VIS))\n@@ -549,6 +548,7 @@ DFS_write_tree_body (struct output_block *ob,\n \n   if (CODE_CONTAINS_STRUCT (code, TS_FUNCTION_DECL))\n     {\n+      DFS_follow_tree_edge (DECL_VINDEX (expr));\n       DFS_follow_tree_edge (DECL_FUNCTION_PERSONALITY (expr));\n       /* Do not DECL_FUNCTION_SPECIFIC_TARGET.  They will be regenerated.  */\n       DFS_follow_tree_edge (DECL_FUNCTION_SPECIFIC_OPTIMIZATION (expr));\n@@ -961,7 +961,6 @@ hash_tree (struct streamer_tree_cache_d *cache, tree t)\n     {\n       if (code == TYPE_DECL)\n \tvisit (DECL_ORIGINAL_TYPE (t));\n-      visit (DECL_VINDEX (t));\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_DECL_WITH_VIS))\n@@ -981,6 +980,7 @@ hash_tree (struct streamer_tree_cache_d *cache, tree t)\n \n   if (CODE_CONTAINS_STRUCT (code, TS_FUNCTION_DECL))\n     {\n+      visit (DECL_VINDEX (t));\n       visit (DECL_FUNCTION_PERSONALITY (t));\n       /* Do not follow DECL_FUNCTION_SPECIFIC_TARGET.  */\n       visit (DECL_FUNCTION_SPECIFIC_OPTIMIZATION (t));"}, {"sha": "5911a0628619842eb5458613ca98f9d60590ba03", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf8a23ef3ff2055dde65871b438883ecc067bb0/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf8a23ef3ff2055dde65871b438883ecc067bb0/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=aaf8a23ef3ff2055dde65871b438883ecc067bb0", "patch": "@@ -1,3 +1,10 @@\n+2014-06-24  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* lto.c (mentions_vars_p_decl_non_common): Move DECL_VINDEX check to ..\n+\t(mentions_vars_p_function): ... here.\n+\t(compare_tree_sccs_1): Update VINDEX checks.\n+\t(lto_fixup_prevailing_decls): Likewise.\n+\n 2014-06-24  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* lto.c (canonical_type_hash_cache): Use hash_map instead of"}, {"sha": "f5ed5c31a8c2fcca44cc145b954a30fd4b264f8e", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf8a23ef3ff2055dde65871b438883ecc067bb0/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf8a23ef3ff2055dde65871b438883ecc067bb0/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=aaf8a23ef3ff2055dde65871b438883ecc067bb0", "patch": "@@ -777,7 +777,6 @@ mentions_vars_p_decl_non_common (tree t)\n     return true;\n   CHECK_NO_VAR (DECL_ARGUMENT_FLD (t));\n   CHECK_NO_VAR (DECL_RESULT_FLD (t));\n-  CHECK_NO_VAR (DECL_VINDEX (t));\n   return false;\n }\n \n@@ -788,6 +787,7 @@ mentions_vars_p_function (tree t)\n {\n   if (mentions_vars_p_decl_non_common (t))\n     return true;\n+  CHECK_NO_VAR (DECL_VINDEX (t));\n   CHECK_VAR (DECL_FUNCTION_PERSONALITY (t));\n   return false;\n }\n@@ -1512,7 +1512,6 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n \t}\n       else if (code == TYPE_DECL)\n \tcompare_tree_edges (DECL_ORIGINAL_TYPE (t1), DECL_ORIGINAL_TYPE (t2));\n-      compare_tree_edges (DECL_VINDEX (t1), DECL_VINDEX (t2));\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_DECL_WITH_VIS))\n@@ -1538,6 +1537,7 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n     {\n       compare_tree_edges (DECL_FUNCTION_PERSONALITY (t1),\n \t\t\t  DECL_FUNCTION_PERSONALITY (t2));\n+      compare_tree_edges (DECL_VINDEX (t1), DECL_VINDEX (t2));\n       /* DECL_FUNCTION_SPECIFIC_TARGET is not yet created.  We compare\n          the attribute list instead.  */\n       compare_tree_edges (DECL_FUNCTION_SPECIFIC_OPTIMIZATION (t1),\n@@ -2714,10 +2714,12 @@ lto_fixup_prevailing_decls (tree t)\n \t{\n \t  LTO_NO_PREVAIL (DECL_ARGUMENT_FLD (t));\n \t  LTO_NO_PREVAIL (DECL_RESULT_FLD (t));\n-\t  LTO_NO_PREVAIL (DECL_VINDEX (t));\n \t}\n       if (CODE_CONTAINS_STRUCT (code, TS_FUNCTION_DECL))\n-\tLTO_SET_PREVAIL (DECL_FUNCTION_PERSONALITY (t));\n+\t{\n+\t  LTO_SET_PREVAIL (DECL_FUNCTION_PERSONALITY (t));\n+\t  LTO_NO_PREVAIL (DECL_VINDEX (t));\n+\t}\n       if (CODE_CONTAINS_STRUCT (code, TS_FIELD_DECL))\n \t{\n \t  LTO_SET_PREVAIL (DECL_FIELD_OFFSET (t));"}, {"sha": "78067d563129694e042a9fb080a173f156ed7008", "filename": "gcc/tree-core.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf8a23ef3ff2055dde65871b438883ecc067bb0/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf8a23ef3ff2055dde65871b438883ecc067bb0/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=aaf8a23ef3ff2055dde65871b438883ecc067bb0", "patch": "@@ -1494,14 +1494,10 @@ struct GTY(()) tree_var_decl {\n \n struct GTY(()) tree_decl_non_common {\n   struct tree_decl_with_vis common;\n-  /* C++ uses this in namespaces.  */\n-  tree saved_tree;\n   /* C++ uses this in templates.  */\n   tree arguments;\n   /* Almost all FE's use this.  */\n   tree result;\n-  /* C++ uses this in namespaces and function_decls.  */\n-  tree vindex;\n };\n \n /* FUNCTION_DECL inherits from DECL_NON_COMMON because of the use of the\n@@ -1521,6 +1517,11 @@ struct GTY(()) tree_function_decl {\n   tree function_specific_target;\t/* target options */\n   tree function_specific_optimization;\t/* optimization options */\n \n+  /* Generic function body.  */\n+  tree saved_tree;\n+  /* Index within a virtual table.  */\n+  tree vindex;\n+\n   /* In a FUNCTION_DECL for which DECL_BUILT_IN holds, this is\n      DECL_FUNCTION_CODE.  Otherwise unused.\n      ???  The bitfield needs to be able to hold all target function"}, {"sha": "ee1c955f159bf901425bfa5050d9590015158aed", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf8a23ef3ff2055dde65871b438883ecc067bb0/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf8a23ef3ff2055dde65871b438883ecc067bb0/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=aaf8a23ef3ff2055dde65871b438883ecc067bb0", "patch": "@@ -726,7 +726,6 @@ lto_input_ts_decl_non_common_tree_pointers (struct lto_input_block *ib,\n {\n   if (TREE_CODE (expr) == TYPE_DECL)\n     DECL_ORIGINAL_TYPE (expr) = stream_read_tree (ib, data_in);\n-  DECL_VINDEX (expr) = stream_read_tree (ib, data_in);\n }\n \n \n@@ -773,8 +772,8 @@ static void\n lto_input_ts_function_decl_tree_pointers (struct lto_input_block *ib,\n \t\t\t\t\t  struct data_in *data_in, tree expr)\n {\n-  /* DECL_STRUCT_FUNCTION is handled by lto_input_function.  FIXME lto,\n-     maybe it should be handled here?  */\n+  DECL_VINDEX (expr) = stream_read_tree (ib, data_in);\n+  /* DECL_STRUCT_FUNCTION is loaded on demand by cgraph_get_body.  */\n   DECL_FUNCTION_PERSONALITY (expr) = stream_read_tree (ib, data_in);\n   /* DECL_FUNCTION_SPECIFIC_TARGET is regenerated from attributes.  */\n   DECL_FUNCTION_SPECIFIC_OPTIMIZATION (expr) = stream_read_tree (ib, data_in);"}, {"sha": "52e714ef29ebec81aea578f993061f13af88e658", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf8a23ef3ff2055dde65871b438883ecc067bb0/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf8a23ef3ff2055dde65871b438883ecc067bb0/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=aaf8a23ef3ff2055dde65871b438883ecc067bb0", "patch": "@@ -638,7 +638,6 @@ write_ts_decl_non_common_tree_pointers (struct output_block *ob, tree expr,\n {\n   if (TREE_CODE (expr) == TYPE_DECL)\n     stream_write_tree (ob, DECL_ORIGINAL_TYPE (expr), ref_p);\n-  stream_write_tree (ob, DECL_VINDEX (expr), ref_p);\n }\n \n \n@@ -682,6 +681,7 @@ static void\n write_ts_function_decl_tree_pointers (struct output_block *ob, tree expr,\n \t\t\t\t      bool ref_p)\n {\n+  stream_write_tree (ob, DECL_VINDEX (expr), ref_p);\n   /* DECL_STRUCT_FUNCTION is handled by lto_output_function.  FIXME lto,\n      maybe it should be handled here?  */\n   stream_write_tree (ob, DECL_FUNCTION_PERSONALITY (expr), ref_p);"}, {"sha": "6937f6ec64a6ab4c32f501764cc9153c6b80997c", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf8a23ef3ff2055dde65871b438883ecc067bb0/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf8a23ef3ff2055dde65871b438883ecc067bb0/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=aaf8a23ef3ff2055dde65871b438883ecc067bb0", "patch": "@@ -5306,7 +5306,6 @@ find_decls_types_r (tree *tp, int *ws, void *data)\n       else if (TREE_CODE (t) == TYPE_DECL)\n \t{\n \t  fld_worklist_push (DECL_ARGUMENT_FLD (t), fld);\n-\t  fld_worklist_push (DECL_VINDEX (t), fld);\n \t  fld_worklist_push (DECL_ORIGINAL_TYPE (t), fld);\n \t}\n       else if (TREE_CODE (t) == FIELD_DECL)"}, {"sha": "a435c3a12c204ce4608fab51fda9acaab6d14a71", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf8a23ef3ff2055dde65871b438883ecc067bb0/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf8a23ef3ff2055dde65871b438883ecc067bb0/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=aaf8a23ef3ff2055dde65871b438883ecc067bb0", "patch": "@@ -2470,10 +2470,9 @@ extern void decl_fini_priority_insert (tree, priority_type);\n    is the FUNCTION_DECL which this FUNCTION_DECL will replace as a virtual\n    function.  When the class is laid out, this pointer is changed\n    to an INTEGER_CST node which is suitable for use as an index\n-   into the virtual function table.\n-   C++ also uses this field in namespaces, hence the DECL_NON_COMMON_CHECK.  */\n+   into the virtual function table. */\n #define DECL_VINDEX(NODE) \\\n-  (DECL_NON_COMMON_CHECK (NODE)->decl_non_common.vindex)\n+  (FUNCTION_DECL_CHECK (NODE)->function_decl.vindex)\n \n /* In FUNCTION_DECL, holds the decl for the return value.  */\n #define DECL_RESULT(NODE) (FUNCTION_DECL_CHECK (NODE)->decl_non_common.result)\n@@ -2485,7 +2484,7 @@ extern void decl_fini_priority_insert (tree, priority_type);\n /* In a FUNCTION_DECL, the saved representation of the body of the\n    entire function.  */\n #define DECL_SAVED_TREE(NODE) \\\n-  (FUNCTION_DECL_CHECK (NODE)->decl_non_common.saved_tree)\n+  (FUNCTION_DECL_CHECK (NODE)->function_decl.saved_tree)\n \n /* Nonzero in a FUNCTION_DECL means this function should be treated\n    as if it were a malloc, meaning it returns a pointer that is"}]}