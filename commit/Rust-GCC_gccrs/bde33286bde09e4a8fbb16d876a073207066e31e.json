{"sha": "bde33286bde09e4a8fbb16d876a073207066e31e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRlMzMyODZiZGUwOWU0YThmYmIxNmQ4NzZhMDczMjA3MDY2ZTMxZQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2005-11-15T13:56:27Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-11-15T13:56:27Z"}, "message": "sem_elab.adb: Change name Is_Package to Is_Package_Or_Generic_Package\n\n2005-11-14  Robert Dewar  <dewar@adacore.com>\n\t    Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_elab.adb: Change name Is_Package to Is_Package_Or_Generic_Package\n\t(Check_Elab_Call): A call within a protected body is never an\n\telaboration call, and does not require checking.\n\t(Same_Elaboration_Scope): Take into account protected types for both\n\tentities.\n\t(Activate_Elaborate_All_Desirable): New procedure\n\n\t* ali.ads, ali.adb: Implement new AD/ED for Elaborate_All/Elaborate\n\tdesirable\n\n\t* binde.adb: Implement new AD/ED for Elaborate_All/Elaborate desirable\n\t(Elab_Error_Msg): Use -da to include internal unit links, not -de.\n\n\t* lib-writ.ads, lib-writ.adb: \n\tImplement new AD/ED for Elaborate_All/Elaborate desirable\n\tUse new Elaborate_All_Desirable flag in N_With_Clause node\n\n\t* sinfo.ads, sinfo.adb (Actual_Designated_Subtype): New attribute for\n\tN_Free_Statement nodes.\n\tDefine new class N_Subprogram_Instantiation\n\tAdd Elaborate_Desirable flag to N_With_Clause node\n\tAdd N_Delay_Statement (covering two kinds of delay)\n\n\t* debug.adb: Introduce d.f flag for compiler\n\tAdd -da switch for binder\n\nFrom-SVN: r106968", "tree": {"sha": "144645d7f2b3949299580e9c887964e309c09fd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/144645d7f2b3949299580e9c887964e309c09fd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bde33286bde09e4a8fbb16d876a073207066e31e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bde33286bde09e4a8fbb16d876a073207066e31e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bde33286bde09e4a8fbb16d876a073207066e31e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bde33286bde09e4a8fbb16d876a073207066e31e/comments", "author": null, "committer": null, "parents": [{"sha": "104e4daaa53212b718cc916a0a688c06dab6a5fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/104e4daaa53212b718cc916a0a688c06dab6a5fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/104e4daaa53212b718cc916a0a688c06dab6a5fb"}], "stats": {"total": 555, "additions": 432, "deletions": 123}, "files": [{"sha": "2bafec0295d2cbdfdd8658d2c936902d6f9904ea", "filename": "gcc/ada/ali.adb", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde33286bde09e4a8fbb16d876a073207066e31e/gcc%2Fada%2Fali.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde33286bde09e4a8fbb16d876a073207066e31e/gcc%2Fada%2Fali.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.adb?ref=bde33286bde09e4a8fbb16d876a073207066e31e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1556,6 +1556,7 @@ package body ALI is\n                Withs.Table (Withs.Last).Uname              := Get_Name;\n                Withs.Table (Withs.Last).Elaborate          := False;\n                Withs.Table (Withs.Last).Elaborate_All      := False;\n+               Withs.Table (Withs.Last).Elab_Desirable     := False;\n                Withs.Table (Withs.Last).Elab_All_Desirable := False;\n                Withs.Table (Withs.Last).SAL_Interface      := False;\n \n@@ -1571,12 +1572,24 @@ package body ALI is\n                   Withs.Table (Withs.Last).Sfile := Get_Name (Lower => True);\n                   Withs.Table (Withs.Last).Afile := Get_Name;\n \n-                  --  Scan out possible E, EA, and NE parameters\n+                  --  Scan out possible E, EA, ED, and AD parameters\n \n                   while not At_Eol loop\n                      Skip_Space;\n \n-                     if Nextc = 'E' then\n+                     if Nextc = 'A' then\n+                        P := P + 1;\n+                        Checkc ('D');\n+                        Check_At_End_Of_Field;\n+\n+                        --  Store AD indication unless ignore required\n+\n+                        if not Ignore_ED then\n+                           Withs.Table (Withs.Last).Elab_All_Desirable :=\n+                             True;\n+                        end if;\n+\n+                     elsif Nextc = 'E' then\n                         P := P + 1;\n \n                         if At_End_Of_Field then\n@@ -1594,7 +1607,7 @@ package body ALI is\n                            --  Store ED indication unless ignore required\n \n                            if not Ignore_ED then\n-                              Withs.Table (Withs.Last).Elab_All_Desirable :=\n+                              Withs.Table (Withs.Last).Elab_Desirable :=\n                                 True;\n                            end if;\n                         end if;"}, {"sha": "f00220f59e616f5a7c2c82c76fc5e379f07db6c8", "filename": "gcc/ada/ali.ads", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde33286bde09e4a8fbb16d876a073207066e31e/gcc%2Fada%2Fali.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde33286bde09e4a8fbb16d876a073207066e31e/gcc%2Fada%2Fali.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.ads?ref=bde33286bde09e4a8fbb16d876a073207066e31e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -473,6 +473,9 @@ package ALI is\n       --  Indicates presence of EA parameter\n \n       Elab_All_Desirable : Boolean;\n+      --  Indicates presence of AD parameter\n+\n+      Elab_Desirable     : Boolean;\n       --  Indicates presence of ED parameter\n \n       SAL_Interface : Boolean := False;\n@@ -872,7 +875,7 @@ package ALI is\n    --  switch description settings.\n    --\n    --    Ignore_ED is normally False. If set to True, it indicates that\n-   --    all ED (elaboration desirable) indications in the ALI file are\n+   --    all AD/ED (elaboration desirable) indications in the ALI file are\n    --    to be ignored. This parameter is obsolete now that the -f switch\n    --    is removed from gnatbind, and should be removed ???\n    --"}, {"sha": "acba7846418ccddb74b2595068af6b6f38f7de5b", "filename": "gcc/ada/binde.adb", "status": "modified", "additions": 47, "deletions": 16, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde33286bde09e4a8fbb16d876a073207066e31e/gcc%2Fada%2Fbinde.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde33286bde09e4a8fbb16d876a073207066e31e/gcc%2Fada%2Fbinde.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbinde.adb?ref=bde33286bde09e4a8fbb16d876a073207066e31e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -72,11 +72,16 @@ package body Binde is\n       --  elaborated before unit X is elaborated. The Elab_All_Link list\n       --  traces the dependencies in the latter case.\n \n-      Elab_Desirable,\n+      Elab_All_Desirable,\n       --  This is just like Elab_All, except that the elaborate all was not\n       --  explicitly present in the source, but rather was created by the\n       --  front end, which decided that it was \"desirable\".\n \n+      Elab_Desirable,\n+      --  This is just like Elab, except that the elaborate was not\n+      --  explicitly present in the source, but rather was created by the\n+      --  front end, which decided that it was \"desirable\".\n+\n       Spec_First);\n       --  After is a body, and Before is the corresponding spec\n \n@@ -249,7 +254,7 @@ package body Binde is\n       Link   : Elab_All_Id);\n    --  Used to compute the transitive closure of elaboration links for an\n    --  Elaborate_All pragma (Reason = Elab_All) or for an indication of\n-   --  Elaborate_All_Desirable (Reason = Elab_Desirable). Unit After has\n+   --  Elaborate_All_Desirable (Reason = Elab_All_Desirable). Unit After has\n    --  a pragma Elaborate_All or the front end has determined that a reference\n    --  probably requires Elaborate_All is required, and unit Before must be\n    --  previously elaborated. First a link is built making sure that unit\n@@ -268,8 +273,7 @@ package body Binde is\n \n    function Make_Elab_Entry\n      (Unam : Unit_Name_Type;\n-      Link : Elab_All_Id)\n-      return Elab_All_Id;\n+      Link : Elab_All_Id) return Elab_All_Id;\n    --  Make an Elab_All_Entries table entry with the given Unam and Link\n \n    function Unit_Id_Of (Uname : Unit_Name_Type) return Unit_Id;\n@@ -800,9 +804,9 @@ package body Binde is\n       SL : Successor_Link renames Succ.Table (S);\n \n    begin\n-      --  Nothing to do if internal unit involved and no -de flag\n+      --  Nothing to do if internal unit involved and no -da flag\n \n-      if not Debug_Flag_E\n+      if not Debug_Flag_A\n         and then\n           (Is_Internal_File_Name (Units.Table (SL.Before).Sfile)\n             or else\n@@ -841,7 +845,7 @@ package body Binde is\n               (\"     reason: pragma Elaborate_All in unit &\",\n                Info => True);\n \n-         when Elab_Desirable =>\n+         when Elab_All_Desirable =>\n             Error_Msg_Output\n               (\"     reason: implicit Elaborate_All in unit &\",\n                Info => True);\n@@ -850,6 +854,15 @@ package body Binde is\n               (\"     recompile & with -gnatwl for full details\",\n                Info => True);\n \n+         when Elab_Desirable =>\n+            Error_Msg_Output\n+              (\"     reason: implicit Elaborate in unit &\",\n+               Info => True);\n+\n+            Error_Msg_Output\n+              (\"     recompile & with -gnatwl for full details\",\n+               Info => True);\n+\n          when Spec_First =>\n             Error_Msg_Output\n               (\"     reason: spec always elaborated before body\",\n@@ -1092,7 +1105,7 @@ package body Binde is\n                      --  Now establish all the links we need\n \n                      Elab_All_Links\n-                       (Withed_Unit, U, Elab_Desirable,\n+                       (Withed_Unit, U, Elab_All_Desirable,\n                         Make_Elab_Entry\n                           (Withs.Table (W).Uname, No_Elab_All_Link));\n \n@@ -1116,6 +1129,18 @@ package body Binde is\n                           (Corresponding_Body (Withed_Unit), U, Elab);\n                      end if;\n \n+                     --  Elaborate_Desirable case, for this we establish\n+                     --  the same links as above, but with a different reason.\n+\n+                  elsif Withs.Table (W).Elab_Desirable then\n+                     Build_Link (Withed_Unit, U, Withed);\n+\n+                     if Units.Table (Withed_Unit).Utype = Is_Spec then\n+                        Build_Link\n+                          (Corresponding_Body (Withed_Unit),\n+                           U, Elab_Desirable);\n+                     end if;\n+\n                      --  Case of normal WITH with no elaboration pragmas, just\n                      --  build the single link to the directly referenced unit\n \n@@ -1137,8 +1162,7 @@ package body Binde is\n \n    function Make_Elab_Entry\n      (Unam : Unit_Name_Type;\n-      Link : Elab_All_Id)\n-      return Elab_All_Id\n+      Link : Elab_All_Id) return Elab_All_Id\n    is\n    begin\n       Elab_All_Entries.Increment_Last;\n@@ -1153,7 +1177,6 @@ package body Binde is\n \n    function Unit_Id_Of (Uname : Unit_Name_Type) return Unit_Id is\n       Info : constant Int := Get_Name_Table_Info (Uname);\n-\n    begin\n       pragma Assert (Info /= 0 and then Unit_Id (Info) /= No_Unit_Id);\n       return Unit_Id (Info);\n@@ -1172,12 +1195,20 @@ package body Binde is\n       --  Determines if U is a waiting body, defined as a body which has\n       --  not been elaborated, but whose spec has been elaborated.\n \n+      ---------------\n+      -- Body_Unit --\n+      ---------------\n+\n       function Body_Unit (U : Unit_Id) return Boolean is\n       begin\n          return Units.Table (U).Utype = Is_Body\n            or else Units.Table (U).Utype = Is_Body_Only;\n       end Body_Unit;\n \n+      ------------------\n+      -- Waiting_Body --\n+      ------------------\n+\n       function Waiting_Body (U : Unit_Id) return Boolean is\n       begin\n          return Units.Table (U).Utype = Is_Body and then\n@@ -1186,10 +1217,10 @@ package body Binde is\n \n    --  Start of processing for Worse_Choice\n \n-   --  Note: the checks here are applied in sequence, and the ordering is\n-   --  significant (i.e. the more important criteria are applied first).\n-\n    begin\n+      --  Note: the checks here are applied in sequence, and the ordering is\n+      --  significant (i.e. the more important criteria are applied first).\n+\n       --  If either unit is internal, then use Better_Choice, since the\n       --  language requires that predefined units not mess up in the choice\n       --  of elaboration order, and for internal units, any problems are\n@@ -1277,7 +1308,7 @@ package body Binde is\n       First_Name : Boolean := True;\n \n    begin\n-      if ST.Reason in Elab_All .. Elab_Desirable then\n+      if ST.Reason in Elab_All .. Elab_All_Desirable then\n          L := ST.Elab_All_Link;\n          while L /= No_Elab_All_Link loop\n             Nam := Elab_All_Entries.Table (L).Needed_By;"}, {"sha": "96e9ca74e7b5adbb8d0a67cdd9868ca45b3677e7", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde33286bde09e4a8fbb16d876a073207066e31e/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde33286bde09e4a8fbb16d876a073207066e31e/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=bde33286bde09e4a8fbb16d876a073207066e31e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -98,7 +98,7 @@ package body Debug is\n    --  d.c\n    --  d.d\n    --  d.e\n-   --  d.f\n+   --  d.f  Inhibit folding of static expressions\n    --  d.g\n    --  d.h\n    --  d.i\n@@ -132,7 +132,7 @@ package body Debug is\n \n    --  Debug flags for binder (GNATBIND)\n \n-   --  da\n+   --  da  All links (including internal units) listed if there is a cycle\n    --  db\n    --  dc  List units as they are chosen\n    --  dd\n@@ -410,7 +410,7 @@ package body Debug is\n    --       indications. This debug flag disconnects the tracking of constant\n    --       values (see Exp_Ch2.Expand_Current_Value).\n \n-   --  dN   Do not generate file name information in exception messages.\n+   --  dN   Do not generate file name information in exception messages\n \n    --  dO   Output immediate error messages. This causes error messages to\n    --       be output as soon as they are generated (disconnecting several\n@@ -461,6 +461,10 @@ package body Debug is\n    --       had Configurable_Run_Time_Mode set to True. This is useful in\n    --       testing high integrity mode.\n \n+   --  d.f  Suppress folding of static expressions. This of course results\n+   --       in seriously non-conforming behavior, but is useful sometimes\n+   --       when tracking down handling of complex expressions.\n+\n    --  d.x  No exception handlers in generated code. This causes exception\n    --       handlers to be eliminated from the generated code. They are still\n    --       fully compiled and analyzed, they just get eliminated from the\n@@ -511,6 +515,12 @@ package body Debug is\n    -- Documentation for Binder Debug Flags --\n    ------------------------------------------\n \n+   --  da  Normally if there is an elaboration circularity, then in describing\n+   --      the cycle, links involving internal units are omitted, since they\n+   --      are irrelevant and confusing. This debug flag causes all links to\n+   --      be listed, and is useful when diagnosing circularities introduced\n+   --      by incorrect changes to the run-time library itself.\n+\n    --  dc  List units as they are chosen. As units are selected for addition to\n    --      the elaboration order, a line of output is generated showing which\n    --      unit has been selected."}, {"sha": "e8065b46aad36b5b0d295a8b97d04c83aedf1022", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde33286bde09e4a8fbb16d876a073207066e31e/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde33286bde09e4a8fbb16d876a073207066e31e/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=bde33286bde09e4a8fbb16d876a073207066e31e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -182,6 +182,9 @@ package body Lib.Writ is\n       --  Array of flags to show which units have pragma Elaborate All set\n \n       Elab_Des_Flags : array (Units.First .. Last_Unit) of Boolean;\n+      --  Array of flags to show which units have Elaborate_Desirable set\n+\n+      Elab_All_Des_Flags : array (Units.First .. Last_Unit) of Boolean;\n       --  Array of flags to show which units have Elaborate_All_Desirable set\n \n       Sdep_Table : Unit_Ref_Table (1 .. Pos (Last_Unit - Units.First + 2));\n@@ -229,11 +232,13 @@ package body Lib.Writ is\n          Item := First (Context_Items (Cunit));\n          while Present (Item) loop\n \n+            --  Process with clause\n+\n             --  Ada 2005 (AI-50217): limited with_clauses do not create\n             --  dependencies\n \n             if Nkind (Item) = N_With_Clause\n-               and then not (Limited_Present (Item))\n+              and then not (Limited_Present (Item))\n             then\n                Unum := Get_Cunit_Unit_Number (Library_Unit (Item));\n                With_Flags (Unum) := True;\n@@ -246,7 +251,11 @@ package body Lib.Writ is\n                   Elab_All_Flags (Unum) := True;\n                end if;\n \n-               if Elaborate_All_Desirable (Cunit_Entity (Unum)) then\n+               if Elaborate_All_Desirable (Item) then\n+                  Elab_All_Des_Flags (Unum) := True;\n+               end if;\n+\n+               if Elaborate_Desirable (Item) then\n                   Elab_Des_Flags (Unum) := True;\n                end if;\n             end if;\n@@ -495,10 +504,11 @@ package body Lib.Writ is\n          --  Generate with lines, first those that are directly with'ed\n \n          for J in With_Flags'Range loop\n-            With_Flags (J) := False;\n-            Elab_Flags (J) := False;\n-            Elab_All_Flags (J) := False;\n-            Elab_Des_Flags (J) := False;\n+            With_Flags         (J) := False;\n+            Elab_Flags         (J) := False;\n+            Elab_All_Flags     (J) := False;\n+            Elab_Des_Flags     (J) := False;\n+            Elab_All_Des_Flags (J) := False;\n          end loop;\n \n          Collect_Withs (Unode);\n@@ -725,6 +735,10 @@ package body Lib.Writ is\n                if Elab_Des_Flags (Unum) then\n                   Write_Info_Str (\"  ED\");\n                end if;\n+\n+               if Elab_All_Des_Flags (Unum) then\n+                  Write_Info_Str (\"  AD\");\n+               end if;\n             end if;\n \n             Write_Info_EOL;\n@@ -818,12 +832,10 @@ package body Lib.Writ is\n \n       begin\n          if Nkind (U) = N_Subprogram_Body\n-           or else (Nkind (U) = N_Package_Body\n-                      and then\n-                        (Nkind (Original_Node (U)) = N_Function_Instantiation\n-                           or else\n-                         Nkind (Original_Node (U)) =\n-                                                  N_Procedure_Instantiation))\n+           or else\n+             (Nkind (U) = N_Package_Body\n+               and then\n+                 Nkind (Original_Node (U)) in N_Subprogram_Instantiation)\n          then\n             --  If the unit is a subprogram instance, the entity for the\n             --  subprogram is the alias of the visible entity, which is the"}, {"sha": "90737ed1268f410333f2ac5d03c05f7334115ba1", "filename": "gcc/ada/lib-writ.ads", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde33286bde09e4a8fbb16d876a073207066e31e/gcc%2Fada%2Flib-writ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde33286bde09e4a8fbb16d876a073207066e31e/gcc%2Fada%2Flib-writ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.ads?ref=bde33286bde09e4a8fbb16d876a073207066e31e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -462,7 +462,7 @@ package Lib.Writ is\n \n    --  Following each U line, is a series of lines of the form\n \n-   --    W unit-name [source-name lib-name] [E] [EA] [ED]\n+   --    W unit-name [source-name lib-name] [E] [EA] [ED] [AD]\n    --\n    --      One of these lines is present for each unit that is mentioned in\n    --      an explicit with clause by the current unit. The first parameter\n@@ -479,11 +479,17 @@ package Lib.Writ is\n    --\n    --        EA  pragma Elaborate_All applies to this unit\n    --\n-   --        ED  Elaborate_All_Desirable set for this unit, which means\n+   --        ED  Elaborate_Desirable set for this unit, which means\n+   --            that there is no Elaborate, but the analysis suggests\n+   --            that Program_Error may be raised if the Elaborate\n+   --            conditions cannot be satisfied. The binder will attempt\n+   --            to treat ED as E if it can.\n+   --\n+   --        AD  Elaborate_All_Desirable set for this unit, which means\n    --            that there is no Elaborate_All, but the analysis suggests\n    --            that Program_Error may be raised if the Elaborate_All\n    --            conditions cannot be satisfied. The binder will attempt\n-   --            to treat ED as EA if it can.\n+   --            to treat AD as EA if it can.\n    --\n    --      The parameter source-name and lib-name are omitted for the case\n    --      of a generic unit compiled with earlier versions of GNAT which"}, {"sha": "1eae58685b4145227ac2044e97ad08a3190fd703", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 171, "deletions": 49, "changes": 220, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde33286bde09e4a8fbb16d876a073207066e31e/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde33286bde09e4a8fbb16d876a073207066e31e/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=bde33286bde09e4a8fbb16d876a073207066e31e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1997-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -117,7 +117,6 @@ package body Sem_Elab is\n \n       Outer_Scope : Entity_Id;\n       --  Save scope of outer level call\n-\n    end record;\n \n    package Delay_Check is new Table.Table (\n@@ -166,6 +165,13 @@ package body Sem_Elab is\n    --  then the original call was an inner call, and we are not interested\n    --  in calls that go outside this scope.\n \n+   procedure Activate_Elaborate_All_Desirable (N : Node_Id; U : Entity_Id);\n+   --  Analysis of construct N shows that we should set Elaborate_All_Desirable\n+   --  for the WITH clause for unit U (which will always be present). A special\n+   --  case is when N is a function or procedure instantiation, in which case\n+   --  it is sufficient to set Elaborate_Desirable, since in this case there is\n+   --  no possibility of transitive elaboration issues.\n+\n    procedure Check_A_Call\n      (N                 : Node_Id;\n       E                 : Entity_Id;\n@@ -308,6 +314,113 @@ package body Sem_Elab is\n    --  which the pragma applies. This prevents spurious warnings when the\n    --  called entity is renamed within U.\n \n+   --------------------------------------\n+   -- Activate_Elaborate_All_Desirable --\n+   --------------------------------------\n+\n+   procedure Activate_Elaborate_All_Desirable (N : Node_Id; U : Entity_Id) is\n+      UN  : constant Unit_Number_Type := Get_Code_Unit (N);\n+      CU  : constant Node_Id          := Cunit (UN);\n+      UE  : constant Entity_Id        := Cunit_Entity (UN);\n+      Unm : constant Unit_Name_Type   := Unit_Name (UN);\n+      CI  : constant List_Id          := Context_Items (CU);\n+      Itm : Node_Id;\n+      Ent : Entity_Id;\n+\n+      procedure Set_Elab_Flag (Itm : Node_Id);\n+      --  Sets Elaborate_[All_]Desirable as appropriate on Itm\n+\n+      -------------------\n+      -- Set_Elab_Flag --\n+      -------------------\n+\n+      procedure Set_Elab_Flag (Itm : Node_Id) is\n+      begin\n+         if Nkind (N) in N_Subprogram_Instantiation then\n+            Set_Elaborate_Desirable (Itm);\n+         else\n+            Set_Elaborate_All_Desirable (Itm);\n+         end if;\n+      end Set_Elab_Flag;\n+\n+   --  Start of processing for Activate_Elaborate_All_Desirable\n+\n+   begin\n+      Itm := First (CI);\n+      while Present (Itm) loop\n+         if Nkind (Itm) = N_With_Clause then\n+            Ent := Cunit_Entity (Get_Cunit_Unit_Number (Library_Unit (Itm)));\n+\n+            --  If we find it, then mark elaborate all desirable and return\n+\n+            if U = Ent then\n+               Set_Elab_Flag (Itm);\n+               return;\n+            end if;\n+         end if;\n+\n+         Next (Itm);\n+      end loop;\n+\n+      --  If we fall through then the with clause is not present in the\n+      --  current unit. One legitimate possibility is that the with clause\n+      --  is present in the spec when we are a body.\n+\n+      if Is_Body_Name (Unm) then\n+         declare\n+            UEs : constant Entity_Id        := Spec_Entity (UE);\n+            UNs : constant Unit_Number_Type := Get_Source_Unit (UEs);\n+            CUs : constant Node_Id          := Cunit (UNs);\n+            CIs : constant List_Id          := Context_Items (CUs);\n+\n+         begin\n+            Itm := First (CIs);\n+            while Present (Itm) loop\n+               if Nkind (Itm) = N_With_Clause then\n+                  Ent :=\n+                    Cunit_Entity (Get_Cunit_Unit_Number (Library_Unit (Itm)));\n+\n+                  if U = Ent then\n+\n+                     --  If we find it, we have to create an implicit copy\n+                     --  of the with clause for the body, just so that it\n+                     --  can be marked as elaborate desirable (it would be\n+                     --  wrong to put it on the spec item, since it is the\n+                     --  body that has possible elaboration problems, not\n+                     --  the spec.\n+\n+                     declare\n+                        CW : constant Node_Id :=\n+                               Make_With_Clause (Sloc (Itm),\n+                                 Name => Name (Itm));\n+\n+                     begin\n+                        Set_Library_Unit  (CW, Library_Unit (Itm));\n+                        Set_Implicit_With (CW, True);\n+\n+                        --  Set elaborate all desirable on copy and then\n+                        --  append the copy to the list of body with's\n+                        --  and we are done.\n+\n+                        Set_Elab_Flag (CW);\n+                        Append_To (CI, CW);\n+                        return;\n+                     end;\n+                  end if;\n+               end if;\n+\n+               Next (Itm);\n+            end loop;\n+         end;\n+      end if;\n+\n+      --  Here if we do not find with clause on spec or body. We just ignore\n+      --  this case, it means that the elaboration involves some other unit\n+      --  than the unit being compiled, and will be caught elsewhere.\n+\n+      null;\n+   end Activate_Elaborate_All_Desirable;\n+\n    ------------------\n    -- Check_A_Call --\n    ------------------\n@@ -370,7 +483,7 @@ package body Sem_Elab is\n \n       if (Nkind (N) = N_Function_Call\n            or else Nkind (N) = N_Procedure_Call_Statement)\n-        and then  No_Elaboration_Check (N)\n+        and then No_Elaboration_Check (N)\n       then\n          return;\n       end if;\n@@ -710,8 +823,15 @@ package body Sem_Elab is\n             end if;\n \n             Error_Msg_Qual_Level := Nat'Last;\n-            Error_Msg_NE\n-              (\"\\missing pragma Elaborate_All for&?\", N, W_Scope);\n+\n+            if Nkind (N) in N_Subprogram_Instantiation then\n+               Error_Msg_NE\n+                 (\"\\missing pragma Elaborate for&?\", N, W_Scope);\n+            else\n+               Error_Msg_NE\n+                 (\"\\missing pragma Elaborate_All for&?\", N, W_Scope);\n+            end if;\n+\n             Error_Msg_Qual_Level := 0;\n             Output_Calls (N);\n \n@@ -893,7 +1013,6 @@ package body Sem_Elab is\n         (\"\\?Program_Error will be raised at run time\", N);\n       Insert_Elab_Check (N);\n       Set_ABE_Is_Certain (N);\n-\n    end Check_Bad_Instantiation;\n \n    ---------------------\n@@ -1110,13 +1229,19 @@ package body Sem_Elab is\n                      return;\n                   end if;\n \n-                  if Nkind (P) = N_Subprogram_Body\n-                       or else\n-                     Nkind (P) = N_Protected_Body\n+                  --  A protected body has no elaboration code and contains\n+                  --  only other bodies.\n+\n+                  if Nkind (P) = N_Protected_Body then\n+                     return;\n+\n+                  elsif Nkind (P) = N_Subprogram_Body\n                        or else\n                      Nkind (P) = N_Task_Body\n                        or else\n                      Nkind (P) = N_Block_Statement\n+                       or else\n+                     Nkind (P) = N_Entry_Body\n                   then\n                      if L = Declarations (P) then\n                         exit;\n@@ -1510,7 +1635,6 @@ package body Sem_Elab is\n       else\n          Check_Internal_Call_Continue (N, E, Outer_Scope, Orig_Ent);\n       end if;\n-\n    end Check_Internal_Call;\n \n    ----------------------------------\n@@ -1661,9 +1785,9 @@ package body Sem_Elab is\n          --  does not normally visit subprogram bodies.\n \n          declare\n-            Decl : Node_Id := First (Declarations (Sbody));\n-\n+            Decl : Node_Id;\n          begin\n+            Decl := First (Declarations (Sbody));\n             while Present (Decl) loop\n                Traverse (Decl);\n                Next (Decl);\n@@ -1830,7 +1954,6 @@ package body Sem_Elab is\n            and then Has_Task (Base_Type (Typ))\n          then\n             Comp := First_Component (Typ);\n-\n             while Present (Comp) loop\n                Add_Task_Proc (Etype (Comp));\n                Comp := Next_Component (Comp);\n@@ -1874,10 +1997,9 @@ package body Sem_Elab is\n                end if;\n \n             else\n-               Elmt := First_Elmt (Inter_Procs);\n-\n                --  No need for multiple entries of the same type\n \n+               Elmt := First_Elmt (Inter_Procs);\n                while Present (Elmt) loop\n                   if Node (Elmt) = Proc then\n                      return;\n@@ -1899,9 +2021,7 @@ package body Sem_Elab is\n       begin\n          if Present (Decls) then\n             Decl := First (Decls);\n-\n             while Present (Decl) loop\n-\n                if Nkind (Decl) = N_Object_Declaration\n                  and then Has_Task (Etype (Defining_Identifier (Decl)))\n                then\n@@ -1918,9 +2038,10 @@ package body Sem_Elab is\n       ----------------\n \n       function Outer_Unit (E : Entity_Id) return Entity_Id is\n-         Outer : Entity_Id := E;\n+         Outer : Entity_Id;\n \n       begin\n+         Outer := E;\n          while Present (Outer) loop\n             if Elaboration_Checks_Suppressed (Outer) then\n                Cunit_SC := True;\n@@ -1970,7 +2091,6 @@ package body Sem_Elab is\n       --  the task body to be elaborated before the current one.\n \n       Elmt := First_Elmt (Inter_Procs);\n-\n       while Present (Elmt) loop\n          Ent := Node (Elmt);\n          Task_Scope := Outer_Unit (Scope (Ent));\n@@ -2014,7 +2134,7 @@ package body Sem_Elab is\n                   \" requires pragma Elaborate_All on &?\", N, Ent);\n             end if;\n \n-            Set_Elaborate_All_Desirable (Task_Scope);\n+            Activate_Elaborate_All_Desirable (N, Task_Scope);\n             Set_Suppress_Elaboration_Warnings (Task_Scope);\n          end if;\n \n@@ -2025,8 +2145,8 @@ package body Sem_Elab is\n       --  the task procedure bodies, which are available.\n \n       In_Task_Activation := True;\n-      Elmt := First_Elmt (Intra_Procs);\n \n+      Elmt := First_Elmt (Intra_Procs);\n       while Present (Elmt) loop\n          Ent := Node (Elmt);\n          Check_Internal_Call_Continue (N, Ent, Enclosing, Ent);\n@@ -2060,7 +2180,7 @@ package body Sem_Elab is\n         or else\n           (Is_Child_Unit (Scop) and then Is_Visible_Child_Unit (Scop))\n       then\n-         Set_Elaborate_All_Desirable (Scop);\n+         Activate_Elaborate_All_Desirable (Call, Scop);\n          Set_Suppress_Elaboration_Warnings (Scop, True);\n          return;\n       end if;\n@@ -2077,13 +2197,14 @@ package body Sem_Elab is\n          null;  --  detailed processing follows.\n \n       else\n-         Set_Elaborate_All_Desirable (Scop);\n+         Activate_Elaborate_All_Desirable (Call, Scop);\n          Set_Suppress_Elaboration_Warnings (Scop, True);\n          return;\n       end if;\n \n       --  If the unit is not in the context, there must be an intermediate\n-      --  unit that is, on which we need to place to elaboration flag.\n+      --  unit that is, on which we need to place to elaboration flag. This\n+      --  happens with init proc calls.\n \n       if Is_Init_Proc (Subp)\n         or else Init_Call\n@@ -2098,22 +2219,22 @@ package body Sem_Elab is\n                      Etype (First (Parameter_Associations (Call)));\n          begin\n             Elab_Unit := Scope (Typ);\n-\n             while (Present (Elab_Unit))\n               and then not Is_Compilation_Unit (Elab_Unit)\n             loop\n                Elab_Unit := Scope (Elab_Unit);\n             end loop;\n          end;\n-      elsif Nkind (Original_Node (Call)) = N_Selected_Component then\n \n-         --  If original node uses selected component notation, the\n-         --  prefix is visible and determines the scope that must be\n-         --  elaborated. After rewriting, the prefix is the first actual\n-         --  in the call.\n+      --  If original node uses selected component notation, the prefix is\n+      --  visible and determines the scope that must be elaborated. After\n+      --  rewriting, the prefix is the first actual in the call.\n \n+      elsif Nkind (Original_Node (Call)) = N_Selected_Component then\n          Elab_Unit := Scope (Etype (First (Parameter_Associations (Call))));\n \n+      --  Not one of special cases above\n+\n       else\n          --  Using previously computed scope. If the elaboration check is\n          --  done after analysis, the scope is not visible any longer, but\n@@ -2122,7 +2243,7 @@ package body Sem_Elab is\n          Elab_Unit := Scop;\n       end if;\n \n-      Set_Elaborate_All_Desirable (Elab_Unit);\n+      Activate_Elaborate_All_Desirable (Call, Elab_Unit);\n       Set_Suppress_Elaboration_Warnings (Elab_Unit, True);\n    end Set_Elaboration_Constraint;\n \n@@ -2268,7 +2389,7 @@ package body Sem_Elab is\n \n          --  Otherwise look and see if we are embedded in a further package\n \n-         elsif Is_Package (Scop) then\n+         elsif Is_Package_Or_Generic_Package (Scop) then\n \n             --  If so, get the body of the enclosing package, and look in\n             --  its package body for the package body we are looking for.\n@@ -2311,16 +2432,15 @@ package body Sem_Elab is\n          --  Case of entity is in other than a package spec, in this case\n          --  the body, if present, must be in the same declarative part.\n \n-         if not Is_Package (Scop) then\n+         if not Is_Package_Or_Generic_Package (Scop) then\n             declare\n                P : Node_Id;\n \n             begin\n-               P := Declaration_Node (Ent);\n-\n                --  Declaration node may get us a spec, so if so, go to\n                --  the parent declaration.\n \n+               P := Declaration_Node (Ent);\n                while not Is_List_Member (P) loop\n                   P := Parent (P);\n                end loop;\n@@ -2532,18 +2652,26 @@ package body Sem_Elab is\n    ----------------------------\n \n    function Same_Elaboration_Scope (Scop1, Scop2 : Entity_Id) return Boolean is\n-      S1 : Entity_Id := Scop1;\n-      S2 : Entity_Id := Scop2;\n+      S1 : Entity_Id;\n+      S2 : Entity_Id;\n \n    begin\n+      --  Find elaboration scope for Scop1\n+\n+      S1 := Scop1;\n       while S1 /= Standard_Standard\n         and then (Ekind (S1) = E_Package\n                     or else\n+                  Ekind (S1) = E_Protected_Type\n+                    or else\n                   Ekind (S1) = E_Block)\n       loop\n          S1 := Scope (S1);\n       end loop;\n \n+      --  Find elaboration scope for Scop2\n+\n+      S2 := Scop2;\n       while S2 /= Standard_Standard\n         and then (Ekind (S2) = E_Package\n                     or else\n@@ -2606,7 +2734,6 @@ package body Sem_Elab is\n       if Nkind (N) = N_Subprogram_Declaration then\n          declare\n             Ent : constant Entity_Id := Defining_Unit_Name (Specification (N));\n-\n          begin\n             Set_Is_Imported (Ent);\n             Set_Convention  (Ent, Convention_Stubbed);\n@@ -2615,7 +2742,6 @@ package body Sem_Elab is\n       elsif Nkind (N) = N_Package_Declaration then\n          declare\n             Spec : constant Node_Id := Specification (N);\n-\n          begin\n             New_Scope (Defining_Unit_Name (Spec));\n             Supply_Bodies (Visible_Declarations (Spec));\n@@ -2627,7 +2753,6 @@ package body Sem_Elab is\n \n    procedure Supply_Bodies (L : List_Id) is\n       Elmt : Node_Id;\n-\n    begin\n       if Present (L) then\n          Elmt := First (L);\n@@ -2647,7 +2772,6 @@ package body Sem_Elab is\n \n    begin\n       Scop := E1;\n-\n       loop\n          if Scop = E2 then\n             return True;\n@@ -2675,25 +2799,23 @@ package body Sem_Elab is\n \n    begin\n       Item := First (Context_Items (Cunit (Current_Sem_Unit)));\n-\n       while Present (Item) loop\n          if Nkind (Item) = N_Pragma\n            and then Get_Pragma_Id (Chars (Item)) = Pragma_Elaborate_All\n          then\n-            if Error_Posted (Item) then\n-\n-               --  Some previous error on the pragma itself\n+            --  Return if some previous error on the pragma itself\n \n+            if Error_Posted (Item) then\n                return False;\n             end if;\n \n             Elab_Id :=\n-              Entity (\n-                Expression (First (Pragma_Argument_Associations (Item))));\n+              Entity\n+                (Expression (First (Pragma_Argument_Associations (Item))));\n \n-            Par   := Parent (Unit_Declaration_Node (Elab_Id));\n-            Item2 := First (Context_Items (Par));\n+            Par := Parent (Unit_Declaration_Node (Elab_Id));\n \n+            Item2 := First (Context_Items (Par));\n             while Present (Item2) loop\n                if Nkind (Item2) = N_With_Clause\n                  and then Entity (Name (Item2)) = E"}, {"sha": "673d45417829e8fc927eba5cc47369433a91cd62", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde33286bde09e4a8fbb16d876a073207066e31e/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde33286bde09e4a8fbb16d876a073207066e31e/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=bde33286bde09e4a8fbb16d876a073207066e31e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -175,6 +175,15 @@ package body Sinfo is\n       return Flag4 (N);\n    end Acts_As_Spec;\n \n+   function Actual_Designated_Subtype\n+     (N : Node_Id) return Node_Id is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Explicit_Dereference\n+        or else NT (N).Nkind = N_Free_Statement);\n+      return Node2 (N);\n+   end Actual_Designated_Subtype;\n+\n    function Aggregate_Bounds\n       (N : Node_Id) return Node_Id is\n    begin\n@@ -876,6 +885,14 @@ package body Sinfo is\n       return Flag13 (N);\n    end Do_Tag_Check;\n \n+   function Elaborate_All_Desirable\n+      (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_With_Clause);\n+      return Flag9 (N);\n+   end Elaborate_All_Desirable;\n+\n    function Elaborate_All_Present\n       (N : Node_Id) return Boolean is\n    begin\n@@ -884,6 +901,14 @@ package body Sinfo is\n       return Flag14 (N);\n    end Elaborate_All_Present;\n \n+   function Elaborate_Desirable\n+      (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_With_Clause);\n+      return Flag11 (N);\n+   end Elaborate_Desirable;\n+\n    function Elaborate_Present\n       (N : Node_Id) return Boolean is\n    begin\n@@ -2745,6 +2770,15 @@ package body Sinfo is\n       Set_Flag4 (N, Val);\n    end Set_Acts_As_Spec;\n \n+   procedure Set_Actual_Designated_Subtype\n+     (N : Node_Id; Val : Node_Id) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Explicit_Dereference\n+        or else NT (N).Nkind = N_Free_Statement);\n+      Set_Node2 (N, Val);\n+   end Set_Actual_Designated_Subtype;\n+\n    procedure Set_Aggregate_Bounds\n       (N : Node_Id; Val : Node_Id) is\n    begin\n@@ -3446,6 +3480,14 @@ package body Sinfo is\n       Set_Flag13 (N, Val);\n    end Set_Do_Tag_Check;\n \n+   procedure Set_Elaborate_All_Desirable\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_With_Clause);\n+      Set_Flag9 (N, Val);\n+   end Set_Elaborate_All_Desirable;\n+\n    procedure Set_Elaborate_All_Present\n       (N : Node_Id; Val : Boolean := True) is\n    begin\n@@ -3454,6 +3496,14 @@ package body Sinfo is\n       Set_Flag14 (N, Val);\n    end Set_Elaborate_All_Present;\n \n+   procedure Set_Elaborate_Desirable\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_With_Clause);\n+      Set_Flag11 (N, Val);\n+   end Set_Elaborate_Desirable;\n+\n    procedure Set_Elaborate_Present\n       (N : Node_Id; Val : Boolean := True) is\n    begin"}, {"sha": "60f8be32224da44b7a678e714b8b218587cb38ac", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 92, "deletions": 30, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde33286bde09e4a8fbb16d876a073207066e31e/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde33286bde09e4a8fbb16d876a073207066e31e/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=bde33286bde09e4a8fbb16d876a073207066e31e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -90,11 +90,11 @@ package Sinfo is\n    --     node in the checks.\n    --    Add an appropriate section to the case statement in sprint.adb\n    --    Add an appropriate section to the case statement in sem.adb\n-   --    Add an appropraite section to the case statement in exp_util.adb\n+   --    Add an appropriate section to the case statement in exp_util.adb\n    --     (Insert_Actions procedure)\n-   --    For a subexpression, add an appropriate sections to the case\n+   --    For a subexpression, add an appropriate section to the case\n    --     statement in sem_eval.adb\n-   --    For a subexpression, add an appropriate sections to the case\n+   --    For a subexpression, add an appropriate section to the case\n    --     statement in sem_res.adb\n \n    --  Finally, four utility programs must be run:\n@@ -457,27 +457,36 @@ package Sinfo is\n \n    --  The following flag fields appear in all nodes\n \n-   --  Analyzed\n+   --  Analyzed (Flag1)\n    --    This flag is used to indicate that a node (and all its children\n    --    have been analyzed. It is used to avoid reanalysis of a node that\n    --    has already been analyzed, both for efficiency and functional\n    --    correctness reasons.\n \n-   --  Error_Posted\n+   --  Comes_From_Source (Flag2)\n+   --    This flag is on for any nodes built by the scanner or parser from\n+   --    the source program, and off for any nodes built by the analyzer or\n+   --    expander. It indicates that a node comes from the original source.\n+   --    This flag is defined in Atree.\n+\n+   --  Error_Posted (Flag3)\n    --    This flag is used to avoid multiple error messages being posted\n    --    on or referring to the same node. This flag is set if an error\n    --    message refers to a node or is posted on its source location,\n    --    and has the effect of inhibiting further messages involving\n    --    this same node.\n \n-   --  Comes_From_Source\n-   --    This flag is on for any nodes built by the scanner or parser from\n-   --    the source program, and off for any nodes built by the analyzer or\n-   --    expander. It indicates that a node comes from the original source.\n-   --    This flag is defined in Atree.\n+   --  Has_Dynamic_Length_Check (Flag10-Sem)\n+   --    This flag is present on all nodes. It is set to indicate that one\n+   --    of the routines in unit Checks has generated a length check action\n+   --    which has been inserted at the flagged node. This is used to avoid\n+   --    the generation of duplicate checks.\n \n-   --  Has_Dynamic_Length_Check and Has_Dynamic_Range_Check also appear on\n-   --  all nodes. They are fully described in the next section.\n+   --  Has_Dynamic_Range_Check (Flag12-Sem)\n+   --    This flag is present on all nodes. It is set to indicate that one\n+   --    of the routines in unit Checks has generated a range check action\n+   --    which has been inserted at the flagged node. This is used to avoid\n+   --    the generation of duplicate checks.\n \n    ------------------------------------\n    -- Description of Semantic Fields --\n@@ -535,6 +544,15 @@ package Sinfo is\n    --    compilation unit node at the library level for such a subprogram\n    --    (see further description in spec of Lib package).\n \n+   --  Actual_Designated_Subtype (Node2-Sem)\n+   --    Present in N_Free_Statement and N_Explicit_Dereference nodes. If\n+   --    GIGI needs to known the dynamic constrained subtype of the designated\n+   --    object, this attribute is set to that type. This is done for\n+   --    N_Free_Statements for access-to-classwide types and access to\n+   --    unconstrained packed array types, and for N_Explicit_Dereference\n+   --    when the designated type is an unconstrained packed array and the\n+   --    dereference is the prefix of a 'Size attribute reference.\n+\n    --  Aggregate_Bounds (Node3-Sem)\n    --    Present in array N_Aggregate nodes. If the aggregate contains\n    --    component associations this field points to an N_Range node whose\n@@ -831,13 +849,23 @@ package Sinfo is\n    --    yet decided how this flag is used (TBD ???).\n \n    --  Elaborate_Present (Flag4-Sem)\n-   --    This flag is set in the N_With_Clause node to indicate that a\n-   --    pragma Elaborate pragma appears for the with'ed units.\n+   --    This flag is set in the N_With_Clause node to indicate that pragma\n+   --    Elaborate pragma appears for the with'ed units.\n+\n+   --  Elaborate_All_Desirable (Flag9-Sem)\n+   --    This flag is set in the N_With_Clause mode to indicate that the static\n+   --    elaboration processing has determined that an Elaborate_All pragma is\n+   --    desirable for correct elaboration for this unit.\n \n    --  Elaborate_All_Present (Flag14-Sem)\n    --    This flag is set in the N_With_Clause node to indicate that a\n    --    pragma Elaborate_All pragma appears for the with'ed units.\n \n+   --  Elaborate_Desirable (Flag11-Sem)\n+   --    This flag is set in the N_With_Clause mode to indicate that the static\n+   --    elaboration processing has determined that an Elaborate pragma is\n+   --    desirable for correct elaboration for this unit.\n+\n    --  Elaboration_Boolean (Node2-Sem)\n    --    This field is present in function and procedure specification\n    --    nodes. If set, it points to the entity for a Boolean flag that\n@@ -1008,18 +1036,6 @@ package Sinfo is\n    --    handler is deleted during optimization. For further details on why\n    --    this is required, see Exp_Ch11.Remove_Handler_Entries.\n \n-   --  Has_Dynamic_Length_Check (Flag10-Sem)\n-   --    This flag is present on all nodes. It is set to indicate that one\n-   --    of the routines in unit Checks has generated a length check action\n-   --    which has been inserted at the flagged node. This is used to avoid\n-   --    the generation of duplicate checks.\n-\n-   --  Has_Dynamic_Range_Check (Flag12-Sem)\n-   --    This flag is present on all nodes. It is set to indicate that one\n-   --    of the routines in unit Checks has generated a range check action\n-   --    which has been inserted at the flagged node. This is used to avoid\n-   --    the generation of duplicate checks.\n-\n    --  Has_No_Elaboration_Code (Flag17-Sem)\n    --    A flag that appears in the N_Compilation_Unit node to indicate\n    --    whether or not elaboration code is present for this unit. It is\n@@ -2847,6 +2863,7 @@ package Sinfo is\n       --  N_Explicit_Dereference\n       --  Sloc points to ALL\n       --  Prefix (Node3)\n+      --  Actual_Designated_Subtype (Node2-Sem)\n       --  plus fields for expression\n \n       -------------------------------\n@@ -5217,6 +5234,8 @@ package Sinfo is\n       --  Context_Installed (Flag13-Sem)\n       --  Elaborate_Present (Flag4-Sem)\n       --  Elaborate_All_Present (Flag14-Sem)\n+      --  Elaborate_All_Desirable (Flag9-Sem)\n+      --  Elaborate_Desirable (Flag11-Sem)\n       --  Private_Present (Flag15) set if with_clause has private keyword\n       --  Implicit_With (Flag16-Sem)\n       --  Limited_Present (Flag17)  set if LIMITED is present\n@@ -6233,6 +6252,7 @@ package Sinfo is\n       --  Expression (Node3) argument to unchecked deallocation call\n       --  Storage_Pool (Node1-Sem)\n       --  Procedure_To_Call (Node4-Sem)\n+      --  Actual_Designated_Subtype (Node2-Sem)\n \n       --  Note: in the case where a debug source file is generated, the Sloc\n       --  for this node points to the FREE keyword in the Sprint file output.\n@@ -6757,11 +6777,15 @@ package Sinfo is\n       N_Task_Body_Stub,\n \n       --  N_Generic_Instantiation, N_Later_Decl_Item\n+      --  N_Subprogram_Instantiation\n \n       N_Function_Instantiation,\n-      N_Package_Instantiation,\n       N_Procedure_Instantiation,\n \n+      --  N_Generic_Instantiation, N_Later_Decl_Item\n+\n+      N_Package_Instantiation,\n+\n       --  N_Unit_Body, N_Later_Decl_Item, N_Proper_Body\n \n       N_Package_Body,\n@@ -6797,7 +6821,7 @@ package Sinfo is\n       N_Package_Renaming_Declaration,\n       N_Subprogram_Renaming_Declaration,\n \n-      --  N_Generic_Renaming_Declarations, N_Renaming_Declaration\n+      --  N_Generic_Renaming_Declaration, N_Renaming_Declaration\n \n       N_Generic_Function_Renaming_Declaration,\n       N_Generic_Package_Renaming_Declaration,\n@@ -6813,8 +6837,14 @@ package Sinfo is\n       N_Case_Statement,\n       N_Code_Statement,\n       N_Conditional_Entry_Call,\n+\n+      --  N_Statement_Other_Than_Procedure_Call. N_Delay_Statement\n+\n       N_Delay_Relative_Statement,\n       N_Delay_Until_Statement,\n+\n+      --  N_Statement_Other_Than_Procedure_Call\n+\n       N_Entry_Call_Statement,\n       N_Free_Statement,\n       N_Goto_Statement,\n@@ -6940,6 +6970,10 @@ package Sinfo is\n    --  Note: this includes all constructs normally thought of as declarations\n    --  except those which are separately grouped as later declarations.\n \n+   subtype N_Delay_Statement is Node_Kind range\n+      N_Delay_Relative_Statement ..\n+      N_Delay_Until_Statement;\n+\n    subtype N_Direct_Name is Node_Kind range\n      N_Identifier ..\n      N_Character_Literal;\n@@ -6958,7 +6992,7 @@ package Sinfo is\n \n    subtype N_Generic_Instantiation is Node_Kind range\n      N_Function_Instantiation ..\n-     N_Procedure_Instantiation;\n+     N_Package_Instantiation;\n \n    subtype N_Generic_Renaming_Declaration is Node_Kind range\n      N_Generic_Function_Renaming_Declaration ..\n@@ -7036,6 +7070,10 @@ package Sinfo is\n    --  (since overloading is possible, so it needs to go through the normal\n    --  overloading resolution for expressions).\n \n+   subtype N_Subprogram_Instantiation is Node_Kind range\n+     N_Function_Instantiation ..\n+     N_Procedure_Instantiation;\n+\n    subtype N_Has_Condition is Node_Kind range\n      N_Exit_Statement ..\n      N_Terminate_Alternative;\n@@ -7106,6 +7144,9 @@ package Sinfo is\n    function Acts_As_Spec\n      (N : Node_Id) return Boolean;    -- Flag4\n \n+   function Actual_Designated_Subtype\n+     (N : Node_Id) return Node_Id;    -- Node2\n+\n    function Aggregate_Bounds\n      (N : Node_Id) return Node_Id;    -- Node3\n \n@@ -7325,9 +7366,15 @@ package Sinfo is\n    function Do_Tag_Check\n      (N : Node_Id) return Boolean;    -- Flag13\n \n+   function Elaborate_All_Desirable\n+     (N : Node_Id) return Boolean;    -- Flag9\n+\n    function Elaborate_All_Present\n      (N : Node_Id) return Boolean;    -- Flag14\n \n+   function Elaborate_Desirable\n+     (N : Node_Id) return Boolean;    -- Flag11\n+\n    function Elaborate_Present\n      (N : Node_Id) return Boolean;    -- Flag4\n \n@@ -7919,6 +7966,9 @@ package Sinfo is\n    procedure Set_Acts_As_Spec\n      (N : Node_Id; Val : Boolean := True);    -- Flag4\n \n+   procedure Set_Actual_Designated_Subtype\n+     (N : Node_Id; Val : Node_Id);            -- Node2\n+\n    procedure Set_Aggregate_Bounds\n      (N : Node_Id; Val : Node_Id);            -- Node3\n \n@@ -8138,9 +8188,15 @@ package Sinfo is\n    procedure Set_Do_Tag_Check\n      (N : Node_Id; Val : Boolean := True);    -- Flag13\n \n+   procedure Set_Elaborate_All_Desirable\n+     (N : Node_Id; Val : Boolean := True);    -- Flag9\n+\n    procedure Set_Elaborate_All_Present\n      (N : Node_Id; Val : Boolean := True);    -- Flag14\n \n+   procedure Set_Elaborate_Desirable\n+     (N : Node_Id; Val : Boolean := True);    -- Flag11\n+\n    procedure Set_Elaborate_Present\n      (N : Node_Id; Val : Boolean := True);    -- Flag4\n \n@@ -8723,6 +8779,7 @@ package Sinfo is\n    pragma Inline (Actions);\n    pragma Inline (Activation_Chain_Entity);\n    pragma Inline (Acts_As_Spec);\n+   pragma Inline (Actual_Designated_Subtype);\n    pragma Inline (Aggregate_Bounds);\n    pragma Inline (Aliased_Present);\n    pragma Inline (All_Others);\n@@ -8797,7 +8854,9 @@ package Sinfo is\n    pragma Inline (Do_Storage_Check);\n    pragma Inline (Do_Tag_Check);\n    pragma Inline (Elaborate_Present);\n+   pragma Inline (Elaborate_All_Desirable);\n    pragma Inline (Elaborate_All_Present);\n+   pragma Inline (Elaborate_Desirable);\n    pragma Inline (Elaboration_Boolean);\n    pragma Inline (Else_Actions);\n    pragma Inline (Else_Statements);\n@@ -8991,6 +9050,7 @@ package Sinfo is\n    pragma Inline (Set_Actions);\n    pragma Inline (Set_Activation_Chain_Entity);\n    pragma Inline (Set_Acts_As_Spec);\n+   pragma Inline (Set_Actual_Designated_Subtype);\n    pragma Inline (Set_Aggregate_Bounds);\n    pragma Inline (Set_Aliased_Present);\n    pragma Inline (Set_All_Others);\n@@ -9065,7 +9125,9 @@ package Sinfo is\n    pragma Inline (Set_Do_Storage_Check);\n    pragma Inline (Set_Do_Tag_Check);\n    pragma Inline (Set_Elaborate_Present);\n+   pragma Inline (Set_Elaborate_All_Desirable);\n    pragma Inline (Set_Elaborate_All_Present);\n+   pragma Inline (Set_Elaborate_Desirable);\n    pragma Inline (Set_Elaboration_Boolean);\n    pragma Inline (Set_Else_Actions);\n    pragma Inline (Set_Else_Statements);"}]}