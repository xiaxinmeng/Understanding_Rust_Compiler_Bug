{"sha": "26f86471531d569c550a3e16fbd88a0cae6f18dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZmODY0NzE1MzFkNTY5YzU1MGEzZTE2ZmJkODhhMGNhZTZmMThkZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-03-13T19:57:12Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-03-13T19:57:12Z"}, "message": "call.c (initialize_reference): Remove bogus assertion.\n\n\t* call.c (initialize_reference): Remove bogus assertion.\n\t* decl.c (build_ptrmemfunc_type): Revert change of 2003-03-09.\n\n\t* g++.dg/init/ref5.C: New test.\n\t* g++.dg/parse/ptrmem1.C: Likewise.\n\nFrom-SVN: r64316", "tree": {"sha": "d2580badfc894825e324e272981797cd242d90e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2580badfc894825e324e272981797cd242d90e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26f86471531d569c550a3e16fbd88a0cae6f18dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f86471531d569c550a3e16fbd88a0cae6f18dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26f86471531d569c550a3e16fbd88a0cae6f18dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f86471531d569c550a3e16fbd88a0cae6f18dd/comments", "author": null, "committer": null, "parents": [{"sha": "7210d5ae56f8e4230a227fcfd000015b6df6224e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7210d5ae56f8e4230a227fcfd000015b6df6224e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7210d5ae56f8e4230a227fcfd000015b6df6224e"}], "stats": {"total": 73, "additions": 33, "deletions": 40}, "files": [{"sha": "da84998cb2ae2e43823c2041aac0a64cceb586de", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f86471531d569c550a3e16fbd88a0cae6f18dd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f86471531d569c550a3e16fbd88a0cae6f18dd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=26f86471531d569c550a3e16fbd88a0cae6f18dd", "patch": "@@ -1,3 +1,8 @@\n+2003-03-13  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* call.c (initialize_reference): Remove bogus assertion.\n+\t* decl.c (build_ptrmemfunc_type): Revert change of 2003-03-09.\n+\n 2003-03-12  Andrew Lewycky  <andrew@mxc.ca>\n \n \tPR c++/7050"}, {"sha": "d6496ad6a900d394d09f977064f7598d2590c6e4", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f86471531d569c550a3e16fbd88a0cae6f18dd/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f86471531d569c550a3e16fbd88a0cae6f18dd/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=26f86471531d569c550a3e16fbd88a0cae6f18dd", "patch": "@@ -6088,9 +6088,8 @@ initialize_reference (tree type, tree expr, tree decl)\n       conv = TREE_OPERAND (conv, 0);\n       /* If the next conversion is a BASE_CONV, skip that too -- but\n \t remember that the conversion was required.  */\n-      if (TREE_CODE (conv) == BASE_CONV)\n+      if (TREE_CODE (conv) == BASE_CONV && !NEED_TEMPORARY_P (conv))\n \t{\n-\t  my_friendly_assert (!NEED_TEMPORARY_P (conv), 20030307);\n \t  base_conv_type = TREE_TYPE (conv);\n \t  conv = TREE_OPERAND (conv, 0);\n \t}"}, {"sha": "1763c41aaf500d9ff92795457e17a48c211946ba", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f86471531d569c550a3e16fbd88a0cae6f18dd/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f86471531d569c550a3e16fbd88a0cae6f18dd/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=26f86471531d569c550a3e16fbd88a0cae6f18dd", "patch": "@@ -9297,49 +9297,11 @@ build_ptrmemfunc_type (tree type)\n {\n   tree field, fields;\n   tree t;\n-  tree method_type;\n-  tree arg_type;\n   tree unqualified_variant = NULL_TREE;\n \n   if (type == error_mark_node)\n     return type;\n \n-  /* If the METHOD_TYPE has any default parameters, make a copy that\n-     does not have the default parameters.  The pointer-to-member type\n-     never has default parameters.  */\n-  method_type = TREE_TYPE (type);\n-  for (arg_type = TYPE_ARG_TYPES (method_type);\n-       arg_type;\n-       arg_type = TREE_CHAIN (arg_type))\n-    if (TREE_PURPOSE (arg_type))\n-      {\n-\t/* At least one parameter has a default argument.  */\n-\ttree arg_types = NULL_TREE;\n-\ttree *arg_type_p = &arg_types;\n-\n-\t/* Copy the parameter types.  The \"this\" parameter will be\n-\t   added by build_cplus_method_type.  */\n-\tfor (arg_type = TREE_CHAIN (TYPE_ARG_TYPES (method_type));\n-\t     arg_type;\n-\t     arg_type = TREE_CHAIN (arg_type))\n-\t  {\n-\t    if (arg_type == void_list_node)\n-\t      *arg_type_p = void_list_node;\n-\t    else\n-\t      *arg_type_p = build_tree_list (NULL_TREE,\n-\t\t\t\t\t     TREE_VALUE (arg_type));\n-\t    arg_type_p = &TREE_CHAIN (*arg_type_p);\n-\t  }\n-\t/* Build the new METHOD_TYPE.  */\n-\tmethod_type = build_cplus_method_type (TYPE_METHOD_BASETYPE (method_type), \n-\t\t\t\t\t       TREE_TYPE (method_type), \n-\t\t\t\t\t       arg_types);\n-\t/* Build the new POINTER_TYPE.  */\n-\ttype = cp_build_qualified_type (build_pointer_type (method_type),\n-\t\t\t\t\tcp_type_quals (type));\n-\tbreak;\n-      }\n-\n   /* If a canonical type already exists for this type, use it.  We use\n      this method instead of type_hash_canon, because it only does a\n      simple equality check on the list of field members.  */"}, {"sha": "3407e5ccb5a11f3fd4f395df91187b5f1b9d8d38", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f86471531d569c550a3e16fbd88a0cae6f18dd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f86471531d569c550a3e16fbd88a0cae6f18dd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=26f86471531d569c550a3e16fbd88a0cae6f18dd", "patch": "@@ -1,3 +1,8 @@\n+2003-03-13  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* g++.dg/init/ref5.C: New test.\n+\t* g++.dg/parse/ptrmem1.C: Likewise.\n+\n 2003-03-12  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* gcc.dg/special/ecos.exp (gcsec-1.c): Find linker used by gcc."}, {"sha": "ad1c30c36f8624ce54c90f7e52f17f387916d26c", "filename": "gcc/testsuite/g++.dg/init/ref5.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f86471531d569c550a3e16fbd88a0cae6f18dd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f86471531d569c550a3e16fbd88a0cae6f18dd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref5.C?ref=26f86471531d569c550a3e16fbd88a0cae6f18dd", "patch": "@@ -0,0 +1,12 @@\n+struct A { };\n+struct B : public A { };\n+struct X {\n+        operator B();\n+};\n+X x;\n+\n+int main()\n+{\n+  const A& r = x;\n+  return 0;\n+}"}, {"sha": "b1174c7d97b34f03dae8c4d3a0ce8911d6843bfe", "filename": "gcc/testsuite/g++.dg/parse/ptrmem1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f86471531d569c550a3e16fbd88a0cae6f18dd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fptrmem1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f86471531d569c550a3e16fbd88a0cae6f18dd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fptrmem1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fptrmem1.C?ref=26f86471531d569c550a3e16fbd88a0cae6f18dd", "patch": "@@ -0,0 +1,10 @@\n+struct A {\n+  void f(int = 0) const;\n+};\n+\n+typedef void (A::*PF)(int) const;\n+\n+void f()\n+{\n+  PF pf = &A::f;\n+}"}]}