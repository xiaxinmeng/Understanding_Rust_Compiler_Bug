{"sha": "bec81025ed968d6ba52308b2a9824bd689628a5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVjODEwMjVlZDk2OGQ2YmE1MjMwOGIyYTk4MjRiZDY4OTYyOGE1Zg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2014-06-20T11:19:46Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2014-06-20T11:19:46Z"}, "message": "re PR ipa/61540 (internal compiler error in try_make_edge_direct_virtual_call)\n\n2014-06-20  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/61540\n\t* ipa-prop.c (impossible_devirt_target): New function.\n\t(try_make_edge_direct_virtual_call): Use it, also instead of\n\tasserting.\n\ntestsuite/\n        * g++.dg/ipa/pr61540.C: New test.\n\nFrom-SVN: r211847", "tree": {"sha": "2e698ba10b69273f2d61373633942ad57673a8b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e698ba10b69273f2d61373633942ad57673a8b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bec81025ed968d6ba52308b2a9824bd689628a5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bec81025ed968d6ba52308b2a9824bd689628a5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bec81025ed968d6ba52308b2a9824bd689628a5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bec81025ed968d6ba52308b2a9824bd689628a5f/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bf613c022efe5ef454c39d20d555c552995ec899", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf613c022efe5ef454c39d20d555c552995ec899", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf613c022efe5ef454c39d20d555c552995ec899"}], "stats": {"total": 97, "additions": 80, "deletions": 17}, "files": [{"sha": "fde7c417e10236b7f20a7531554f4337f6acd08a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec81025ed968d6ba52308b2a9824bd689628a5f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec81025ed968d6ba52308b2a9824bd689628a5f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bec81025ed968d6ba52308b2a9824bd689628a5f", "patch": "@@ -1,3 +1,10 @@\n+2014-06-20  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/61540\n+\t* ipa-prop.c (impossible_devirt_target): New function.\n+\t(try_make_edge_direct_virtual_call): Use it, also instead of\n+\tasserting.\n+\n 2014-06-20  Yury Gribov  <y.gribov@samsung.com>\n \t    Max Ostapenko  <m.ostapenko@partner.samsung.com>\n "}, {"sha": "d9dca52d47f4c994852cd2d3a34228e0644ff286", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec81025ed968d6ba52308b2a9824bd689628a5f/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec81025ed968d6ba52308b2a9824bd689628a5f/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=bec81025ed968d6ba52308b2a9824bd689628a5f", "patch": "@@ -2912,6 +2912,29 @@ try_make_edge_direct_simple_call (struct cgraph_edge *ie,\n   return cs;\n }\n \n+/* Return the target to be used in cases of impossible devirtualization.  IE\n+   and target (the latter can be NULL) are dumped when dumping is enabled.  */\n+\n+static tree\n+impossible_devirt_target (struct cgraph_edge *ie, tree target)\n+{\n+  if (dump_file)\n+    {\n+      if (target)\n+\tfprintf (dump_file,\n+\t\t \"Type inconsident devirtualization: %s/%i->%s\\n\",\n+\t\t ie->caller->name (), ie->caller->order,\n+\t\t IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (target)));\n+      else\n+\tfprintf (dump_file,\n+\t\t \"No devirtualization target in %s/%i\\n\",\n+\t\t ie->caller->name (), ie->caller->order);\n+    }\n+  tree new_target = builtin_decl_implicit (BUILT_IN_UNREACHABLE);\n+  cgraph_get_create_node (new_target);\n+  return new_target;\n+}\n+\n /* Try to find a destination for indirect edge IE that corresponds to a virtual\n    call based on a formal parameter which is described by jump function JFUNC\n    and if it can be determined, make it direct and return the direct edge.\n@@ -2946,15 +2969,7 @@ try_make_edge_direct_virtual_call (struct cgraph_edge *ie,\n \t\t   && DECL_FUNCTION_CODE (target) == BUILT_IN_UNREACHABLE)\n \t\t  || !possible_polymorphic_call_target_p\n \t\t       (ie, cgraph_get_node (target)))\n-\t\t{\n-\t\t  if (dump_file)\n-\t\t    fprintf (dump_file,\n-\t\t\t     \"Type inconsident devirtualization: %s/%i->%s\\n\",\n-\t\t\t     ie->caller->name (), ie->caller->order,\n-\t\t\t     IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (target)));\n-\t\t  target = builtin_decl_implicit (BUILT_IN_UNREACHABLE);\n-\t\t  cgraph_get_create_node (target);\n-\t\t}\n+\t\ttarget = impossible_devirt_target (ie, target);\n \t      return ipa_make_edge_direct_to_target (ie, target);\n \t    }\n \t}\n@@ -2984,10 +2999,7 @@ try_make_edge_direct_virtual_call (struct cgraph_edge *ie,\n       if (targets.length () == 1)\n \ttarget = targets[0]->decl;\n       else\n-\t{\n-          target = builtin_decl_implicit (BUILT_IN_UNREACHABLE);\n-\t  cgraph_get_create_node (target);\n-\t}\n+\ttarget = impossible_devirt_target (ie, NULL_TREE);\n     }\n   else\n     {\n@@ -3002,10 +3014,8 @@ try_make_edge_direct_virtual_call (struct cgraph_edge *ie,\n \n   if (target)\n     {\n-#ifdef ENABLE_CHECKING\n-      gcc_assert (possible_polymorphic_call_target_p\n-\t (ie, cgraph_get_node (target)));\n-#endif\n+      if (!possible_polymorphic_call_target_p (ie, cgraph_get_node (target)))\n+\ttarget = impossible_devirt_target (ie, target);\n       return ipa_make_edge_direct_to_target (ie, target);\n     }\n   else"}, {"sha": "0cceea515760fc374923b6a75eb88349686106e4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec81025ed968d6ba52308b2a9824bd689628a5f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec81025ed968d6ba52308b2a9824bd689628a5f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bec81025ed968d6ba52308b2a9824bd689628a5f", "patch": "@@ -1,3 +1,8 @@\n+2014-06-20  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/61540\n+        * g++.dg/ipa/pr61540.C: New test.\n+\n 2014-06-20  Yury Gribov  <y.gribov@samsung.com>\n \t    Max Ostapenko  <m.ostapenko@partner.samsung.com>\n "}, {"sha": "d298964bf22182fd14adffb068c1916f651f9099", "filename": "gcc/testsuite/g++.dg/ipa/pr61540.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bec81025ed968d6ba52308b2a9824bd689628a5f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr61540.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bec81025ed968d6ba52308b2a9824bd689628a5f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr61540.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr61540.C?ref=bec81025ed968d6ba52308b2a9824bd689628a5f", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fno-early-inlining -fdump-ipa-cp\" } */\n+\n+struct data {\n+  data(int) {}\n+};\n+\n+struct top {\n+  virtual int topf() {}\n+};\n+\n+struct intermediate: top {\n+    int topf() /* override */ { return 0; }\n+};\n+\n+struct child1: top {\n+    void childf()\n+    {\n+        data d(topf());\n+    }\n+};\n+\n+struct child2: intermediate {};\n+\n+void test(top& t)\n+{\n+    child1& c = static_cast<child1&>(t);\n+    c.childf();\n+    child2 d;\n+    test(d);\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  child1 c;\n+  test (c);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Type inconsident devirtualization\" \"cp\" } } */\n+/* { dg-final { cleanup-ipa-dump \"cp\" } } */"}]}