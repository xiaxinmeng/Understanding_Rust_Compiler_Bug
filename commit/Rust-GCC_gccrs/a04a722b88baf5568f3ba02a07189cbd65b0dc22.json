{"sha": "a04a722b88baf5568f3ba02a07189cbd65b0dc22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA0YTcyMmI4OGJhZjU1NjhmM2JhMDJhMDcxODljYmQ2NWIwZGMyMg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-05-05T10:20:31Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-05-05T10:20:31Z"}, "message": "c-decl.c (finish_decl): Don't call get_pending_sizes.\n\n\t* c-decl.c (finish_decl): Don't call get_pending_sizes.\n\t(grokparm): Add parameter expr.  Pass it to grokdeclarator.\n\t(push_parm_decl): Add parameter expr.  Pass it to grokdeclarator.\n\t(c_variable_size): Remove.\n\t(grokdeclarator): Use save_expr instead of c_variable_size.  Don't\n\tcall put_pending_sizes.\n\t(get_parm_info): Add parameter expr.  Use it to set\n\targ_info->pending_sizes.\n\t(store_parm_decls): Use arg_info->pending_sizes instead or calling\n\tget_pending_sizes.\n\t* c-parser.c (c_parser_parms_declarator): Update call to\n\tc_parser_parms_list_declarator.\n\t(c_parser_parms_list_declarator): Take parameter expr.  Update\n\tcall to push_parm_decl.  Update recursive call.  Don't call\n\tget_pending_sizes.  Update calls to get_parm_info.\n\t(c_parser_objc_method_definition): Update calls to\n\tc_parser_objc_method_decl and objc_start_method_definition.\n\t(c_parser_objc_methodproto): Update call to\n\tc_parser_objc_method_decl.\n\t(c_parser_objc_method_decl): Add parameter expr.  Update call to\n\tgrokparm.\n\t(c_parser_objc_try_catch_finally_statement): Update call to\n\tgrokparm.\n\t* c-tree.h (struct c_arg_info.pending_sizes): Change to a tree.\n\t(get_parm_info, grokparm, push_parm_decl): Update prototypes.\n\nc-family:\n\t* c-objc.h (objc_start_method_definition): Update prototype.\n\t* stub-objc.c (objc_start_method_definition): Add extra parameter.\n\ncp:\n\t* parser.c (cp_parser_objc_method_definition_list): Update call to\n\tobjc_start_method_definition.\n\nobjc:\n\t* objc-act.c (objc_start_method_definition): Add parameter expr.\n\tUpdate call to start_method_def.\n\t(objc_generate_cxx_ctor_or_dtor, objc_synthesize_getter,\n\tobjc_synthesize_setter) Update calls to\n\tobjc_start_method_definition.\n\t(objc_get_parm_info): Add parameter expr.  Update call to\n\tget_parm_info.\n\t(start_method_def): Add parameter expr.  Update call to\n\tobjc_get_parm_info.\n\t* objc-gnu-runtime-abi-01.c (build_module_initializer_routine):\n\tUpdate call to objc_get_parm_info.\n\t* objc-runtime-shared-support.h (objc_get_parm_info): Add extra\n\tparameter.\n\nFrom-SVN: r173422", "tree": {"sha": "b17a45e382a8a322480a5f68a04bd1948915571e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b17a45e382a8a322480a5f68a04bd1948915571e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a04a722b88baf5568f3ba02a07189cbd65b0dc22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a04a722b88baf5568f3ba02a07189cbd65b0dc22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a04a722b88baf5568f3ba02a07189cbd65b0dc22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a04a722b88baf5568f3ba02a07189cbd65b0dc22/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c92a6f97df83d8ee957dbfd7871a0ad517dcd699", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c92a6f97df83d8ee957dbfd7871a0ad517dcd699", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c92a6f97df83d8ee957dbfd7871a0ad517dcd699"}], "stats": {"total": 251, "additions": 141, "deletions": 110}, "files": [{"sha": "e127a736e55f0326a58fce944dfabedd118015de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04a722b88baf5568f3ba02a07189cbd65b0dc22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04a722b88baf5568f3ba02a07189cbd65b0dc22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a04a722b88baf5568f3ba02a07189cbd65b0dc22", "patch": "@@ -1,3 +1,31 @@\n+2011-05-05  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-decl.c (finish_decl): Don't call get_pending_sizes.\n+\t(grokparm): Add parameter expr.  Pass it to grokdeclarator.\n+\t(push_parm_decl): Add parameter expr.  Pass it to grokdeclarator.\n+\t(c_variable_size): Remove.\n+\t(grokdeclarator): Use save_expr instead of c_variable_size.  Don't\n+\tcall put_pending_sizes.\n+\t(get_parm_info): Add parameter expr.  Use it to set\n+\targ_info->pending_sizes.\n+\t(store_parm_decls): Use arg_info->pending_sizes instead or calling\n+\tget_pending_sizes.\n+\t* c-parser.c (c_parser_parms_declarator): Update call to\n+\tc_parser_parms_list_declarator.\n+\t(c_parser_parms_list_declarator): Take parameter expr.  Update\n+\tcall to push_parm_decl.  Update recursive call.  Don't call\n+\tget_pending_sizes.  Update calls to get_parm_info.\n+\t(c_parser_objc_method_definition): Update calls to\n+\tc_parser_objc_method_decl and objc_start_method_definition.\n+\t(c_parser_objc_methodproto): Update call to\n+\tc_parser_objc_method_decl.\n+\t(c_parser_objc_method_decl): Add parameter expr.  Update call to\n+\tgrokparm.\n+\t(c_parser_objc_try_catch_finally_statement): Update call to\n+\tgrokparm.\n+\t* c-tree.h (struct c_arg_info.pending_sizes): Change to a tree.\n+\t(get_parm_info, grokparm, push_parm_decl): Update prototypes.\n+\n 2011-05-05  Michael Hope  <michael.hope@linaro.org>\n \n        PR pch/45979"}, {"sha": "6bc094892146b8149ef30bdd5ed47670eba5385f", "filename": "gcc/c-decl.c", "status": "modified", "additions": 21, "deletions": 55, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04a722b88baf5568f3ba02a07189cbd65b0dc22/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04a722b88baf5568f3ba02a07189cbd65b0dc22/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=a04a722b88baf5568f3ba02a07189cbd65b0dc22", "patch": "@@ -1,6 +1,6 @@\n /* Process declarations and variables for C compiler.\n    Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -4428,12 +4428,6 @@ finish_decl (tree decl, location_t init_loc, tree init,\n       rest_of_decl_compilation (decl, DECL_FILE_SCOPE_P (decl), 0);\n     }\n \n-  /* At the end of a declaration, throw away any variable type sizes\n-     of types defined inside that declaration.  There is no use\n-     computing them in the following function definition.  */\n-  if (current_scope == file_scope)\n-    get_pending_sizes ();\n-\n   /* Install a cleanup (aka destructor) if one was given.  */\n   if (TREE_CODE (decl) == VAR_DECL && !TREE_STATIC (decl))\n     {\n@@ -4478,31 +4472,36 @@ finish_decl (tree decl, location_t init_loc, tree init,\n     }\n }\n \n-/* Given a parsed parameter declaration, decode it into a PARM_DECL.  */\n+/* Given a parsed parameter declaration, decode it into a PARM_DECL.\n+   EXPR is NULL or a pointer to an expression that needs to be\n+   evaluated for the side effects of array size expressions in the\n+   parameters.  */\n \n tree\n-grokparm (const struct c_parm *parm)\n+grokparm (const struct c_parm *parm, tree *expr)\n {\n   tree attrs = parm->attrs;\n   tree decl = grokdeclarator (parm->declarator, parm->specs, PARM, false,\n-\t\t\t      NULL, &attrs, NULL, NULL, DEPRECATED_NORMAL);\n+\t\t\t      NULL, &attrs, expr, NULL, DEPRECATED_NORMAL);\n \n   decl_attributes (&decl, attrs, 0);\n \n   return decl;\n }\n \n /* Given a parsed parameter declaration, decode it into a PARM_DECL\n-   and push that on the current scope.  */\n+   and push that on the current scope.  EXPR is a pointer to an\n+   expression that needs to be evaluated for the side effects of array\n+   size expressions in the parameters.  */\n \n void\n-push_parm_decl (const struct c_parm *parm)\n+push_parm_decl (const struct c_parm *parm, tree *expr)\n {\n   tree attrs = parm->attrs;\n   tree decl;\n \n   decl = grokdeclarator (parm->declarator, parm->specs, PARM, false, NULL,\n-\t\t\t &attrs, NULL, NULL, DEPRECATED_NORMAL);\n+\t\t\t &attrs, expr, NULL, DEPRECATED_NORMAL);\n   decl_attributes (&decl, attrs, 0);\n \n   decl = pushdecl (decl);\n@@ -4789,34 +4788,6 @@ warn_variable_length_array (tree name, tree size)\n     }\n }\n \n-/* Given a size SIZE that may not be a constant, return a SAVE_EXPR to\n-   serve as the actual size-expression for a type or decl.  This is\n-   like variable_size in stor-layout.c, but we make global_bindings_p\n-   return negative to avoid calls to that function from outside the\n-   front end resulting in errors at file scope, then call this version\n-   instead from front-end code.  */\n-\n-static tree\n-c_variable_size (tree size)\n-{\n-  tree save;\n-\n-  if (TREE_CONSTANT (size))\n-    return size;\n-\n-  size = save_expr (size);\n-\n-  save = skip_simple_arithmetic (size);\n-\n-  if (cfun && cfun->dont_save_pending_sizes_p)\n-    return size;\n-\n-  if (!global_bindings_p ())\n-    put_pending_size (save);\n-\n-  return size;\n-}\n-\n /* Given declspecs and a declarator,\n    determine the name and type of the object declared\n    and construct a ..._DECL node for it.\n@@ -5354,7 +5325,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t       MINUS_EXPR, which allows the -1 to get folded\n \t\t       with the +1 that happens when building TYPE_SIZE.  */\n \t\t    if (size_varies)\n-\t\t      size = c_variable_size (size);\n+\t\t      size = save_expr (size);\n \t\t    if (this_size_varies && TREE_CODE (size) == INTEGER_CST)\n \t\t      size = build2 (COMPOUND_EXPR, TREE_TYPE (size),\n \t\t\t\t     integer_zero_node, size);\n@@ -5573,8 +5544,6 @@ grokdeclarator (const struct c_declarator *declarator,\n \t       inner layer of declarator.  */\n \t    arg_info = declarator->u.arg_info;\n \t    arg_types = grokparms (arg_info, really_funcdef);\n-\t    if (really_funcdef)\n-\t      put_pending_sizes (arg_info->pending_sizes);\n \n \t    /* Type qualifiers before the return type of the function\n \t       qualify the return type, not the function type.  */\n@@ -6265,10 +6234,13 @@ build_arg_info (void)\n    This structure is later fed to 'grokparms' and 'store_parm_decls'.\n \n    ELLIPSIS being true means the argument list ended in '...' so don't\n-   append a sentinel (void_list_node) to the end of the type-list.  */\n+   append a sentinel (void_list_node) to the end of the type-list.\n+\n+   EXPR is NULL or an expression that needs to be evaluated for the\n+   side effects of array size expressions in the parameters.  */\n \n struct c_arg_info *\n-get_parm_info (bool ellipsis)\n+get_parm_info (bool ellipsis, tree expr)\n {\n   struct c_binding *b = current_scope->bindings;\n   struct c_arg_info *arg_info = build_arg_info ();\n@@ -6444,7 +6416,7 @@ get_parm_info (bool ellipsis)\n   arg_info->tags = tags;\n   arg_info->types = types;\n   arg_info->others = others;\n-  arg_info->pending_sizes = get_pending_sizes ();\n+  arg_info->pending_sizes = expr;\n   return arg_info;\n }\n \f\n@@ -8199,14 +8171,8 @@ store_parm_decls (void)\n      because we throw away the array type in favor of a pointer type, and\n      thus won't naturally see the SAVE_EXPR containing the increment.  All\n      other pending sizes would be handled by gimplify_parameters.  */\n-  {\n-    VEC(tree,gc) *pending_sizes = get_pending_sizes ();\n-    tree t;\n-    int i;\n-\n-    FOR_EACH_VEC_ELT (tree, pending_sizes, i, t)\n-      add_stmt (t);\n-  }\n+  if (arg_info->pending_sizes)\n+    add_stmt (arg_info->pending_sizes);\n \n   /* Even though we're inside a function body, we still don't want to\n      call expand_expr to calculate the size of a variable-sized array."}, {"sha": "d3edc6cdd742e6c096a78d6695358eaa714985d3", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04a722b88baf5568f3ba02a07189cbd65b0dc22/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04a722b88baf5568f3ba02a07189cbd65b0dc22/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a04a722b88baf5568f3ba02a07189cbd65b0dc22", "patch": "@@ -1,3 +1,8 @@\n+2011-05-05  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-objc.h (objc_start_method_definition): Update prototype.\n+\t* stub-objc.c (objc_start_method_definition): Add extra parameter.\n+\n 2011-05-04  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* c-common.c (check_main_parameter_types): Reindent.  Don't use"}, {"sha": "b32c5962a059b6b7adb18dbc8f9cb46b45c800bb", "filename": "gcc/c-family/c-objc.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04a722b88baf5568f3ba02a07189cbd65b0dc22/gcc%2Fc-family%2Fc-objc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04a722b88baf5568f3ba02a07189cbd65b0dc22/gcc%2Fc-family%2Fc-objc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-objc.h?ref=a04a722b88baf5568f3ba02a07189cbd65b0dc22", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of Objective-C front-end entry points used for C and C++.\n    Copyright (C) 1987, 1993, 1994, 1995, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -75,7 +75,7 @@ extern void objc_finish_implementation (void);\n extern void objc_set_visibility (objc_ivar_visibility_kind);\n extern tree objc_build_method_signature (bool, tree, tree, tree, bool);\n extern void objc_add_method_declaration (bool, tree, tree);\n-extern bool objc_start_method_definition (bool, tree, tree);\n+extern bool objc_start_method_definition (bool, tree, tree, tree);\n extern void objc_finish_method_definition (tree);\n extern void objc_add_instance_variable (tree);\n extern tree objc_build_keyword_decl (tree, tree, tree, tree);"}, {"sha": "3dacac5b0e25310aec95d282d0c72cc52ba8747c", "filename": "gcc/c-family/stub-objc.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04a722b88baf5568f3ba02a07189cbd65b0dc22/gcc%2Fc-family%2Fstub-objc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04a722b88baf5568f3ba02a07189cbd65b0dc22/gcc%2Fc-family%2Fstub-objc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fstub-objc.c?ref=a04a722b88baf5568f3ba02a07189cbd65b0dc22", "patch": "@@ -2,7 +2,7 @@\n    that are called from within the C and C++ front-ends,\n    respectively.\n    Copyright (C) 1991, 1995, 1997, 1998, 1999, 2000, 2001, 2002, 2003,\n-   2004, 2005, 2007, 2009, 2010 Free Software Foundation, Inc.\n+   2004, 2005, 2007, 2009, 2010, 2011 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -204,7 +204,8 @@ objc_add_method_declaration (bool ARG_UNUSED (is_class_method),\n bool\n objc_start_method_definition (bool ARG_UNUSED (is_class_method),\n \t\t\t      tree ARG_UNUSED (signature),\n-\t\t\t      tree ARG_UNUSED (attributes))\n+\t\t\t      tree ARG_UNUSED (attributes),\n+\t\t\t      tree ARG_UNUSED (expr))\n {\n   return true;\n }"}, {"sha": "241bc38167558ee582c5f94716bd33c54ca4e768", "filename": "gcc/c-parser.c", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04a722b88baf5568f3ba02a07189cbd65b0dc22/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04a722b88baf5568f3ba02a07189cbd65b0dc22/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=a04a722b88baf5568f3ba02a07189cbd65b0dc22", "patch": "@@ -1110,7 +1110,8 @@ static struct c_declarator *c_parser_direct_declarator_inner (c_parser *,\n \t\t\t\t\t\t\t      bool,\n \t\t\t\t\t\t\t      struct c_declarator *);\n static struct c_arg_info *c_parser_parms_declarator (c_parser *, bool, tree);\n-static struct c_arg_info *c_parser_parms_list_declarator (c_parser *, tree);\n+static struct c_arg_info *c_parser_parms_list_declarator (c_parser *, tree,\n+\t\t\t\t\t\t\t  tree);\n static struct c_parm *c_parser_parameter_declaration (c_parser *, tree);\n static tree c_parser_simple_asm_expr (c_parser *);\n static tree c_parser_attributes (c_parser *);\n@@ -1173,7 +1174,7 @@ static bool c_parser_objc_method_type (c_parser *);\n static void c_parser_objc_method_definition (c_parser *);\n static void c_parser_objc_methodprotolist (c_parser *);\n static void c_parser_objc_methodproto (c_parser *);\n-static tree c_parser_objc_method_decl (c_parser *, bool, tree *);\n+static tree c_parser_objc_method_decl (c_parser *, bool, tree *, tree *);\n static tree c_parser_objc_type_name (c_parser *);\n static tree c_parser_objc_protocol_refs (c_parser *);\n static void c_parser_objc_try_catch_finally_statement (c_parser *);\n@@ -3101,20 +3102,24 @@ c_parser_parms_declarator (c_parser *parser, bool id_list_ok, tree attrs)\n     }\n   else\n     {\n-      struct c_arg_info *ret = c_parser_parms_list_declarator (parser, attrs);\n+      struct c_arg_info *ret = c_parser_parms_list_declarator (parser, attrs,\n+\t\t\t\t\t\t\t       NULL);\n       pop_scope ();\n       return ret;\n     }\n }\n \n /* Parse a parameter list (possibly empty), including the closing\n    parenthesis but not the opening one.  ATTRS are the attributes at\n-   the start of the list.  */\n+   the start of the list.  EXPR is NULL or an expression that needs to\n+   be evaluated for the side effects of array size expressions in the\n+   parameters.  */\n \n static struct c_arg_info *\n-c_parser_parms_list_declarator (c_parser *parser, tree attrs)\n+c_parser_parms_list_declarator (c_parser *parser, tree attrs, tree expr)\n {\n   bool bad_parm = false;\n+\n   /* ??? Following the old parser, forward parameter declarations may\n      use abstract declarators, and if no real parameter declarations\n      follow the forward declarations then this is not diagnosed.  Also\n@@ -3158,31 +3163,27 @@ c_parser_parms_list_declarator (c_parser *parser, tree attrs)\n       if (parm == NULL)\n \tbad_parm = true;\n       else\n-\tpush_parm_decl (parm);\n+\tpush_parm_decl (parm, &expr);\n       if (c_parser_next_token_is (parser, CPP_SEMICOLON))\n \t{\n \t  tree new_attrs;\n \t  c_parser_consume_token (parser);\n \t  mark_forward_parm_decls ();\n \t  new_attrs = c_parser_attributes (parser);\n-\t  return c_parser_parms_list_declarator (parser, new_attrs);\n+\t  return c_parser_parms_list_declarator (parser, new_attrs, expr);\n \t}\n       if (c_parser_next_token_is (parser, CPP_CLOSE_PAREN))\n \t{\n \t  c_parser_consume_token (parser);\n \t  if (bad_parm)\n-\t    {\n-\t      get_pending_sizes ();\n-\t      return NULL;\n-\t    }\n+\t    return NULL;\n \t  else\n-\t    return get_parm_info (false);\n+\t    return get_parm_info (false, expr);\n \t}\n       if (!c_parser_require (parser, CPP_COMMA,\n \t\t\t     \"expected %<;%>, %<,%> or %<)%>\"))\n \t{\n \t  c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, NULL);\n-\t  get_pending_sizes ();\n \t  return NULL;\n \t}\n       if (c_parser_next_token_is (parser, CPP_ELLIPSIS))\n@@ -3192,18 +3193,14 @@ c_parser_parms_list_declarator (c_parser *parser, tree attrs)\n \t    {\n \t      c_parser_consume_token (parser);\n \t      if (bad_parm)\n-\t\t{\n-\t\t  get_pending_sizes ();\n-\t\t  return NULL;\n-\t\t}\n+\t\treturn NULL;\n \t      else\n-\t\treturn get_parm_info (true);\n+\t\treturn get_parm_info (true, expr);\n \t    }\n \t  else\n \t    {\n \t      c_parser_skip_until_found (parser, CPP_CLOSE_PAREN,\n \t\t\t\t\t \"expected %<)%>\");\n-\t      get_pending_sizes ();\n \t      return NULL;\n \t    }\n \t}\n@@ -7164,9 +7161,10 @@ static void\n c_parser_objc_method_definition (c_parser *parser)\n {\n   bool is_class_method = c_parser_objc_method_type (parser);\n-  tree decl, attributes = NULL_TREE;\n+  tree decl, attributes = NULL_TREE, expr = NULL_TREE;\n   parser->objc_pq_context = true;\n-  decl = c_parser_objc_method_decl (parser, is_class_method, &attributes);\n+  decl = c_parser_objc_method_decl (parser, is_class_method, &attributes,\n+\t\t\t\t    &expr);\n   if (decl == error_mark_node)\n     return;  /* Bail here. */\n \n@@ -7184,7 +7182,7 @@ c_parser_objc_method_definition (c_parser *parser)\n     }\n \n   parser->objc_pq_context = false;\n-  if (objc_start_method_definition (is_class_method, decl, attributes))\n+  if (objc_start_method_definition (is_class_method, decl, attributes, expr))\n     {\n       add_stmt (c_parser_compound_statement (parser));\n       objc_finish_method_definition (current_function_decl);\n@@ -7275,7 +7273,8 @@ c_parser_objc_methodproto (c_parser *parser)\n \n   /* Remember protocol qualifiers in prototypes.  */\n   parser->objc_pq_context = true;\n-  decl = c_parser_objc_method_decl (parser, is_class_method, &attributes);\n+  decl = c_parser_objc_method_decl (parser, is_class_method, &attributes,\n+\t\t\t\t    NULL);\n   /* Forget protocol qualifiers now.  */\n   parser->objc_pq_context = false;\n \n@@ -7361,7 +7360,8 @@ c_parser_objc_maybe_method_attributes (c_parser* parser, tree* attributes)\n */\n \n static tree\n-c_parser_objc_method_decl (c_parser *parser, bool is_class_method, tree *attributes)\n+c_parser_objc_method_decl (c_parser *parser, bool is_class_method,\n+\t\t\t   tree *attributes, tree *expr)\n {\n   tree type = NULL_TREE;\n   tree sel;\n@@ -7436,7 +7436,7 @@ c_parser_objc_method_decl (c_parser *parser, bool is_class_method, tree *attribu\n \t  if (parm == NULL)\n \t    break;\n \t  parms = chainon (parms,\n-\t\t\t   build_tree_list (NULL_TREE, grokparm (parm)));\n+\t\t\t   build_tree_list (NULL_TREE, grokparm (parm, expr)));\n \t}\n       sel = list;\n     }\n@@ -7600,7 +7600,7 @@ c_parser_objc_try_catch_finally_statement (c_parser *parser)\n \t  if (parm == NULL)\n \t    parameter_declaration = error_mark_node;\n \t  else\n-\t    parameter_declaration = grokparm (parm);\n+\t    parameter_declaration = grokparm (parm, NULL);\n \t}\n       if (seen_open_paren)\n \tc_parser_require (parser, CPP_CLOSE_PAREN, \"expected %<)%>\");"}, {"sha": "97a4e55cd12af4d7800a81c7028df8f6aa3219a2", "filename": "gcc/c-tree.h", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04a722b88baf5568f3ba02a07189cbd65b0dc22/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04a722b88baf5568f3ba02a07189cbd65b0dc22/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=a04a722b88baf5568f3ba02a07189cbd65b0dc22", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for C parsing and type checking.\n    Copyright (C) 1987, 1993, 1994, 1995, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -315,11 +315,12 @@ struct c_arg_info {\n   /* A list of non-parameter decls (notably enumeration constants)\n      defined with the parameters.  */\n   tree others;\n-  /* A VEC of VLA sizes from the parameters.  In a function\n-     definition, these are used to ensure that side-effects in sizes\n-     of arrays converted to pointers (such as a parameter int i[n++])\n-     take place; otherwise, they are ignored.  */\n-  VEC(tree,gc) *pending_sizes;\n+  /* A compound expression of VLA sizes from the parameters, or NULL.\n+     In a function definition, these are used to ensure that\n+     side-effects in sizes of arrays converted to pointers (such as a\n+     parameter int i[n++]) take place; otherwise, they are\n+     ignored.  */\n+  tree pending_sizes;\n   /* True when these arguments had [*].  */\n   BOOL_BITFIELD had_vla_unspec : 1;\n };\n@@ -445,17 +446,17 @@ extern void finish_function (void);\n extern tree finish_struct (location_t, tree, tree, tree,\n \t\t\t   struct c_struct_parse_info *);\n extern struct c_arg_info *build_arg_info (void);\n-extern struct c_arg_info *get_parm_info (bool);\n+extern struct c_arg_info *get_parm_info (bool, tree);\n extern tree grokfield (location_t, struct c_declarator *,\n \t\t       struct c_declspecs *, tree, tree *);\n extern tree groktypename (struct c_type_name *, tree *, bool *);\n-extern tree grokparm (const struct c_parm *);\n+extern tree grokparm (const struct c_parm *, tree *);\n extern tree implicitly_declare (location_t, tree);\n extern void keep_next_level (void);\n extern void pending_xref_error (void);\n extern void c_push_function_context (void);\n extern void c_pop_function_context (void);\n-extern void push_parm_decl (const struct c_parm *);\n+extern void push_parm_decl (const struct c_parm *, tree *);\n extern struct c_declarator *set_array_declarator_inner (struct c_declarator *,\n \t\t\t\t\t\t\tstruct c_declarator *);\n extern tree c_builtin_function (tree);"}, {"sha": "7586ea61b39bc3b8eefbbd23012d3d0075243b24", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04a722b88baf5568f3ba02a07189cbd65b0dc22/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04a722b88baf5568f3ba02a07189cbd65b0dc22/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a04a722b88baf5568f3ba02a07189cbd65b0dc22", "patch": "@@ -1,3 +1,8 @@\n+2011-05-05  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* parser.c (cp_parser_objc_method_definition_list): Update call to\n+\tobjc_start_method_definition.\n+\n 2011-05-04  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/48749"}, {"sha": "82495b65c0a25f12996780d7eee52d1556277988", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04a722b88baf5568f3ba02a07189cbd65b0dc22/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04a722b88baf5568f3ba02a07189cbd65b0dc22/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a04a722b88baf5568f3ba02a07189cbd65b0dc22", "patch": "@@ -22256,7 +22256,8 @@ cp_parser_objc_method_definition_list (cp_parser* parser)\n \t      token = cp_lexer_peek_token (parser->lexer);\n \t      continue;\n \t    }\n-\t  objc_start_method_definition (is_class_method, sig, attribute);\n+\t  objc_start_method_definition (is_class_method, sig, attribute,\n+\t\t\t\t\tNULL_TREE);\n \n \t  /* For historical reasons, we accept an optional semicolon.  */\n \t  if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))"}, {"sha": "8706175d2779272d03ec09a82a06d8c830b91905", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04a722b88baf5568f3ba02a07189cbd65b0dc22/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04a722b88baf5568f3ba02a07189cbd65b0dc22/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=a04a722b88baf5568f3ba02a07189cbd65b0dc22", "patch": "@@ -1,3 +1,19 @@\n+2011-05-05  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* objc-act.c (objc_start_method_definition): Add parameter expr.\n+\tUpdate call to start_method_def.\n+\t(objc_generate_cxx_ctor_or_dtor, objc_synthesize_getter,\n+\tobjc_synthesize_setter) Update calls to\n+\tobjc_start_method_definition.\n+\t(objc_get_parm_info): Add parameter expr.  Update call to\n+\tget_parm_info.\n+\t(start_method_def): Add parameter expr.  Update call to\n+\tobjc_get_parm_info.\n+\t* objc-gnu-runtime-abi-01.c (build_module_initializer_routine):\n+\tUpdate call to objc_get_parm_info.\n+\t* objc-runtime-shared-support.h (objc_get_parm_info): Add extra\n+\tparameter.\n+\n 2011-04-26  Jason Merrill  <jason@redhat.com>\n \n \t* objc-act.c (objc_fold_objc_type_ref): Remove."}, {"sha": "46cfc554b61443bbcd27285b4c823af016c0c235", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04a722b88baf5568f3ba02a07189cbd65b0dc22/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04a722b88baf5568f3ba02a07189cbd65b0dc22/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=a04a722b88baf5568f3ba02a07189cbd65b0dc22", "patch": "@@ -126,7 +126,7 @@ static void synth_module_prologue (void);\n static tree start_class (enum tree_code, tree, tree, tree, tree);\n static tree continue_class (tree);\n static void finish_class (tree);\n-static void start_method_def (tree);\n+static void start_method_def (tree, tree);\n \n static tree start_protocol (enum tree_code, tree, tree, tree);\n static tree build_method_decl (enum tree_code, tree, tree, tree, bool);\n@@ -2041,9 +2041,12 @@ objc_add_method_declaration (bool is_class_method, tree decl, tree attributes)\n \n /* Return 'true' if the method definition could be started, and\n    'false' if not (because we are outside an @implementation context).\n+   EXPR is NULL or an expression that needs to be evaluated for the\n+   side effects of array size expressions in the parameters.\n */\n bool\n-objc_start_method_definition (bool is_class_method, tree decl, tree attributes)\n+objc_start_method_definition (bool is_class_method, tree decl, tree attributes,\n+\t\t\t      tree expr)\n {\n   if (!objc_implementation_context)\n     {\n@@ -2070,7 +2073,7 @@ objc_start_method_definition (bool is_class_method, tree decl, tree attributes)\n \t\t   decl,\n \t\t   is_class_method,\n \t\t   /* is optional */ false);\n-  start_method_def (decl);\n+  start_method_def (decl, expr);\n   return true;\n }\n \n@@ -4557,7 +4560,7 @@ objc_generate_cxx_ctor_or_dtor (bool dtor)\n \t\t\t\t\t\t  ? TAG_CXX_DESTRUCT\n \t\t\t\t\t\t  : TAG_CXX_CONSTRUCT),\n \t\t\t\t  make_node (TREE_LIST),\n-\t\t\t\t  false), NULL);\n+\t\t\t\t  false), NULL, NULL_TREE);\n   body = begin_function_body ();\n   compound_stmt = begin_compound_stmt (0);\n \n@@ -7214,7 +7217,8 @@ objc_synthesize_getter (tree klass, tree class_methods ATTRIBUTE_UNUSED, tree pr\n   decl = copy_node (decl);\n   DECL_SOURCE_LOCATION (decl) = location;\n \n-  objc_start_method_definition (false /* is_class_method */, decl, NULL_TREE);\n+  objc_start_method_definition (false /* is_class_method */, decl, NULL_TREE,\n+\t\t\t\tNULL_TREE);\n   body = c_begin_compound_stmt (true);\n \n   /* Now we need to decide how we build the getter.  There are three\n@@ -7393,7 +7397,8 @@ objc_synthesize_setter (tree klass, tree class_methods ATTRIBUTE_UNUSED, tree pr\n   decl = copy_node (decl);\n   DECL_SOURCE_LOCATION (decl) = DECL_SOURCE_LOCATION (property);\n \n-  objc_start_method_definition (false /* is_class_method */, decl, NULL_TREE);\n+  objc_start_method_definition (false /* is_class_method */, decl, NULL_TREE,\n+\t\t\t\tNULL_TREE);\n \n   body = c_begin_compound_stmt (true);\n \n@@ -8287,7 +8292,8 @@ objc_push_parm (tree parm)\n \n #ifdef OBJCPLUS\n tree\n-objc_get_parm_info (int have_ellipsis ATTRIBUTE_UNUSED)\n+objc_get_parm_info (int have_ellipsis ATTRIBUTE_UNUSED,\n+\t\t    tree expr ATTRIBUTE_UNUSED)\n {\n   tree parm_info = objc_parmlist;\n   objc_parmlist = NULL_TREE;\n@@ -8296,7 +8302,7 @@ objc_get_parm_info (int have_ellipsis ATTRIBUTE_UNUSED)\n }\n #else\n struct c_arg_info *\n-objc_get_parm_info (int have_ellipsis)\n+objc_get_parm_info (int have_ellipsis, tree expr)\n {\n   tree parm_info = objc_parmlist;\n   struct c_arg_info *arg_info;\n@@ -8313,7 +8319,7 @@ objc_get_parm_info (int have_ellipsis)\n       finish_decl (parm_info, input_location, NULL_TREE, NULL_TREE, NULL_TREE);\n       parm_info = next;\n     }\n-  arg_info = get_parm_info (have_ellipsis);\n+  arg_info = get_parm_info (have_ellipsis, expr);\n   pop_scope ();\n   objc_parmlist = NULL_TREE;\n   return arg_info;\n@@ -8348,10 +8354,12 @@ synth_self_and_ucmd_args (void)\n \n /* Transform an Objective-C method definition into a static C function\n    definition, synthesizing the first two arguments, \"self\" and \"_cmd\",\n-   in the process.  */\n+   in the process.  EXPR is NULL or an expression that needs to be\n+   evaluated for the side effects of array size expressions in the\n+   parameters.  */\n \n static void\n-start_method_def (tree method)\n+start_method_def (tree method, tree expr)\n {\n   tree parmlist;\n #ifdef OBJCPLUS\n@@ -8406,7 +8414,7 @@ start_method_def (tree method)\n \thave_ellipsis = 1;\n     }\n \n-  parm_info = objc_get_parm_info (have_ellipsis);\n+  parm_info = objc_get_parm_info (have_ellipsis, expr);\n \n   really_start_method (objc_method_context, parm_info);\n }"}, {"sha": "863f7d66cdf0e2e917902edf92a0891f6a05877f", "filename": "gcc/objc/objc-gnu-runtime-abi-01.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04a722b88baf5568f3ba02a07189cbd65b0dc22/gcc%2Fobjc%2Fobjc-gnu-runtime-abi-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04a722b88baf5568f3ba02a07189cbd65b0dc22/gcc%2Fobjc%2Fobjc-gnu-runtime-abi-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-gnu-runtime-abi-01.c?ref=a04a722b88baf5568f3ba02a07189cbd65b0dc22", "patch": "@@ -948,7 +948,7 @@ build_module_initializer_routine (void)\n #else\n   objc_start_function (get_identifier (TAG_GNUINIT),\n \t\t       build_function_type_list (void_type_node, NULL_TREE),\n-\t\t       NULL_TREE, objc_get_parm_info (0));\n+\t\t       NULL_TREE, objc_get_parm_info (0, NULL_TREE));\n #endif\n   body = c_begin_compound_stmt (true);\n   add_stmt (build_function_call"}, {"sha": "c948cfdba989ed90ec930e68f445e64c4aa2de7a", "filename": "gcc/objc/objc-runtime-shared-support.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04a722b88baf5568f3ba02a07189cbd65b0dc22/gcc%2Fobjc%2Fobjc-runtime-shared-support.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04a722b88baf5568f3ba02a07189cbd65b0dc22/gcc%2Fobjc%2Fobjc-runtime-shared-support.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-runtime-shared-support.h?ref=a04a722b88baf5568f3ba02a07189cbd65b0dc22", "patch": "@@ -43,10 +43,10 @@ extern void add_class_reference (tree);\n \n #ifdef OBJCPLUS\n extern void objc_start_function (tree, tree, tree, tree);\n-extern tree objc_get_parm_info (int);\n+extern tree objc_get_parm_info (int, tree);\n #else\n extern void objc_start_function (tree, tree, tree, struct c_arg_info *);\n-extern struct c_arg_info *objc_get_parm_info (int);\n+extern struct c_arg_info *objc_get_parm_info (int, tree);\n #endif\n extern void objc_push_parm (tree);\n extern tree get_arg_type_list (tree, int, int);"}]}