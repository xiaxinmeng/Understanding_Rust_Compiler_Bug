{"sha": "8eb414aa6c71225d941e24572d5cdd9ce6feee50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGViNDE0YWE2YzcxMjI1ZDk0MWUyNDU3MmQ1Y2RkOWNlNmZlZWU1MA==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2016-08-12T14:58:20Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2016-08-12T14:58:20Z"}, "message": "re PR tree-optimization/69848 (poor vectorization of a loop from SPEC2006 464.h264ref)\n\n\tPR tree-optimization/69848\n\t* tree-vectorizer.h (enum vect_def_type): New condition reduction\n\ttype CONST_COND_REDUCTION.\n\t* tree-vect-loop.c (vectorizable_reduction): Support new condition\n\treudction type CONST_COND_REDUCTION.\n\n\tgcc/testsuite\n\tPR tree-optimization/69848\n\t* gcc.dg/vect/vect-pr69848.c: New test.\n\nFrom-SVN: r239416", "tree": {"sha": "76c0c614276dff79f9625c824647a2b0964743e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76c0c614276dff79f9625c824647a2b0964743e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8eb414aa6c71225d941e24572d5cdd9ce6feee50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eb414aa6c71225d941e24572d5cdd9ce6feee50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8eb414aa6c71225d941e24572d5cdd9ce6feee50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eb414aa6c71225d941e24572d5cdd9ce6feee50/comments", "author": null, "committer": null, "parents": [{"sha": "30b39c1927a4d8d6c37c7fe774b1f09fea3aae51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30b39c1927a4d8d6c37c7fe774b1f09fea3aae51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30b39c1927a4d8d6c37c7fe774b1f09fea3aae51"}], "stats": {"total": 145, "additions": 121, "deletions": 24}, "files": [{"sha": "e0dab59f4c5cf06f4f1c06ce77b28256bcad19d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb414aa6c71225d941e24572d5cdd9ce6feee50/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb414aa6c71225d941e24572d5cdd9ce6feee50/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8eb414aa6c71225d941e24572d5cdd9ce6feee50", "patch": "@@ -1,3 +1,11 @@\n+2016-08-12  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/69848\n+\t* tree-vectorizer.h (enum vect_def_type): New condition reduction\n+\ttype CONST_COND_REDUCTION.\n+\t* tree-vect-loop.c (vectorizable_reduction): Support new condition\n+\treudction type CONST_COND_REDUCTION.\n+\n 2016-08-12  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/57326"}, {"sha": "5ad718d134e362dd962f270a24476cbf4264d29c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb414aa6c71225d941e24572d5cdd9ce6feee50/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb414aa6c71225d941e24572d5cdd9ce6feee50/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8eb414aa6c71225d941e24572d5cdd9ce6feee50", "patch": "@@ -1,3 +1,8 @@\n+2016-08-12  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/69848\n+\t* gcc.dg/vect/vect-pr69848.c: New test.\n+\n 2016-08-12  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR testsuite/71008"}, {"sha": "779a657b34e3c7e18cfbaf1f1979ed1e4483e04b", "filename": "gcc/testsuite/gcc.dg/vect/vect-pr69848.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb414aa6c71225d941e24572d5cdd9ce6feee50/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-pr69848.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb414aa6c71225d941e24572d5cdd9ce6feee50/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-pr69848.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-pr69848.c?ref=8eb414aa6c71225d941e24572d5cdd9ce6feee50", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target vect_condition } */\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 256\n+int a[N] = {0};\n+\n+__attribute__ ((noinline))\n+int foo ()\n+{\n+  int i, res = 0;\n+  for (i = 0; i < N; i++)\n+  {\n+    if (a[i] != 0)\n+      res = 1;\n+  }\n+  return res;\n+}\n+\n+int main (void)\n+{\n+  int i, res;\n+\n+  check_vect ();\n+\n+  if ((res = foo ()) != 0)\n+    abort ();\n+\n+  a[34] = 101;\n+  a[85] = 9;\n+  if ((res = foo ()) != 1)\n+    abort ();\n+\n+  return 0;\n+}\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail { ! vect_max_reduc } } } } */"}, {"sha": "4957b66c4320aa1572da04eb81f7c0fe7468f1b9", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 69, "deletions": 23, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb414aa6c71225d941e24572d5cdd9ce6feee50/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb414aa6c71225d941e24572d5cdd9ce6feee50/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=8eb414aa6c71225d941e24572d5cdd9ce6feee50", "patch": "@@ -5416,7 +5416,7 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n   optab optab, reduc_optab;\n   tree new_temp = NULL_TREE;\n   gimple *def_stmt;\n-  enum vect_def_type dt;\n+  enum vect_def_type dt, cond_reduc_dt = vect_unknown_def_type;\n   gphi *new_phi = NULL;\n   tree scalar_type;\n   bool is_simple_use;\n@@ -5447,7 +5447,7 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n   tree def0, def1, tem, op0, op1 = NULL_TREE;\n   bool first_p = true;\n   tree cr_index_scalar_type = NULL_TREE, cr_index_vector_type = NULL_TREE;\n-  gimple *cond_expr_induction_def_stmt = NULL;\n+  tree cond_reduc_val = NULL_TREE, const_cond_cmp = NULL_TREE;\n \n   /* In case of reduction chain we switch to the first stmt in the chain, but\n      we don't update STMT_INFO, since only the last stmt is marked as reduction\n@@ -5597,8 +5597,18 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n           reduc_index = i;\n         }\n \n-      if (i == 1 && code == COND_EXPR && dt == vect_induction_def)\n-\tcond_expr_induction_def_stmt = def_stmt;\n+      if (i == 1 && code == COND_EXPR)\n+\t{\n+\t  /* Record how value of COND_EXPR is defined.  */\n+\t  if (dt == vect_constant_def)\n+\t    {\n+\t      cond_reduc_dt = dt;\n+\t      cond_reduc_val = ops[i];\n+\t    }\n+\t  if (dt == vect_induction_def && def_stmt != NULL\n+\t      && is_nonwrapping_integer_induction (def_stmt, loop))\n+\t    cond_reduc_dt = dt;\n+\t}\n     }\n \n   is_simple_use = vect_is_simple_use (ops[reduc_index], loop_vinfo,\n@@ -5630,18 +5640,49 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n \t\t\t\t\t  !nested_cycle, &dummy, false,\n \t\t\t\t\t  &v_reduc_type);\n \n+  STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info) = v_reduc_type;\n   /* If we have a condition reduction, see if we can simplify it further.  */\n-  if (v_reduc_type == COND_REDUCTION\n-      && cond_expr_induction_def_stmt != NULL\n-      && is_nonwrapping_integer_induction (cond_expr_induction_def_stmt, loop))\n+  if (v_reduc_type == COND_REDUCTION)\n     {\n-      if (dump_enabled_p ())\n-\tdump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t \"condition expression based on integer induction.\\n\");\n-      STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info) = INTEGER_INDUC_COND_REDUCTION;\n+      if (cond_reduc_dt == vect_induction_def)\n+\t{\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t     \"condition expression based on \"\n+\t\t\t     \"integer induction.\\n\");\n+\t  STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info)\n+\t    = INTEGER_INDUC_COND_REDUCTION;\n+\t}\n+\n+      if (cond_reduc_dt == vect_constant_def)\n+\t{\n+\t  enum vect_def_type cond_initial_dt;\n+\t  gimple *def_stmt = SSA_NAME_DEF_STMT (ops[reduc_index]);\n+\t  tree cond_initial_val\n+\t    = PHI_ARG_DEF_FROM_EDGE (def_stmt, loop_preheader_edge (loop));\n+\n+\t  gcc_assert (cond_reduc_val != NULL_TREE);\n+\t  vect_is_simple_use (cond_initial_val, loop_vinfo,\n+\t\t\t      &def_stmt, &cond_initial_dt);\n+\t  if (cond_initial_dt == vect_constant_def\n+\t      && types_compatible_p (TREE_TYPE (cond_initial_val),\n+\t\t\t\t     TREE_TYPE (cond_reduc_val)))\n+\t    {\n+\t      tree e = fold_build2 (LE_EXPR, boolean_type_node,\n+\t\t\t\t    cond_initial_val, cond_reduc_val);\n+\t      if (e && (integer_onep (e) || integer_zerop (e)))\n+\t\t{\n+\t\t  if (dump_enabled_p ())\n+\t\t    dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t\t     \"condition expression based on \"\n+\t\t\t\t     \"compile time constant.\\n\");\n+\t\t  const_cond_cmp = e;\n+\t\t  STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info)\n+\t\t    = CONST_COND_REDUCTION;\n+\t\t}\n+\t    }\n+\t}\n     }\n-  else\n-   STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info) = v_reduc_type;\n \n   if (orig_stmt)\n     gcc_assert (tmp == orig_stmt\n@@ -5787,8 +5828,15 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n \n       /* For simple condition reductions, replace with the actual expression\n \t we want to base our reduction around.  */\n-      if (STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info)\n-\t  == INTEGER_INDUC_COND_REDUCTION)\n+      if (STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info) == CONST_COND_REDUCTION)\n+\t{\n+\t  gcc_assert (const_cond_cmp != NULL_TREE);\n+\t  gcc_assert (integer_onep (const_cond_cmp)\n+\t\t      || integer_zerop (const_cond_cmp));\n+\t  orig_code = integer_onep (const_cond_cmp) ? MAX_EXPR : MIN_EXPR;\n+\t}\n+      else if (STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info)\n+\t\t == INTEGER_INDUC_COND_REDUCTION)\n \torig_code = MAX_EXPR;\n     }\n \n@@ -5810,9 +5858,7 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n \n   epilog_reduc_code = ERROR_MARK;\n \n-  if (STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info) == TREE_CODE_REDUCTION\n-      || STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info)\n-\t\t== INTEGER_INDUC_COND_REDUCTION)\n+  if (STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info) != COND_REDUCTION)\n     {\n       if (reduction_code_for_scalar_code (orig_code, &epilog_reduc_code))\n \t{\n@@ -5839,8 +5885,10 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n \t     generated in the epilog using multiple expressions.  This does not\n \t     work for condition reductions.  */\n \t  if (epilog_reduc_code == ERROR_MARK\n-\t      && STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info)\n-\t\t\t== INTEGER_INDUC_COND_REDUCTION)\n+\t      && (STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info)\n+\t\t\t== INTEGER_INDUC_COND_REDUCTION\n+\t\t  || STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info)\n+\t\t\t== CONST_COND_REDUCTION))\n \t    {\n \t      if (dump_enabled_p ())\n \t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n@@ -5881,9 +5929,7 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n     }\n \n   if ((double_reduc\n-       || STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info) == COND_REDUCTION\n-       || STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info)\n-\t\t== INTEGER_INDUC_COND_REDUCTION)\n+       || STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info) != TREE_CODE_REDUCTION)\n       && ncopies > 1)\n     {\n       if (dump_enabled_p ())"}, {"sha": "29ef676cbf498480499c39e3b498f4b088faf906", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb414aa6c71225d941e24572d5cdd9ce6feee50/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb414aa6c71225d941e24572d5cdd9ce6feee50/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=8eb414aa6c71225d941e24572d5cdd9ce6feee50", "patch": "@@ -65,7 +65,8 @@ enum vect_def_type {\n enum vect_reduction_type {\n   TREE_CODE_REDUCTION,\n   COND_REDUCTION,\n-  INTEGER_INDUC_COND_REDUCTION\n+  INTEGER_INDUC_COND_REDUCTION,\n+  CONST_COND_REDUCTION\n };\n \n #define VECTORIZABLE_CYCLE_DEF(D) (((D) == vect_reduction_def)           \\"}]}