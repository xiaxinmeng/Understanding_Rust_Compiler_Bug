{"sha": "b24fc8a692e3f2a8bd89d7ccb230ad3c72323e73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI0ZmM4YTY5MmUzZjJhOGJkODlkN2NjYjIzMGFkM2M3MjMyM2U3Mw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-07T07:38:16Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-07T07:38:16Z"}, "message": "lto-wrapper: split arguments of getenv (\"MAKE\").\n\n\t* lto-wrapper.c: Split arguments of MAKE environment\n\tvariable.", "tree": {"sha": "2eecb5b396e6403de247cb8db9b614917f25b881", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2eecb5b396e6403de247cb8db9b614917f25b881"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b24fc8a692e3f2a8bd89d7ccb230ad3c72323e73", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl6zuugACgkQTcGC3A+n\nN4U+BggAoNzdhjwgImhY34lBrWXwi+Rv15wG8aIKXW0ZfG2gLV+QJBMhNSsQQUdJ\nWgWmdz2WWG7YL5MKWwfceHoyQiWOGq/NfydCO61VmPby4E1F5KijBgpL1mMAbpqO\ndYOdkSKiDzlWzEM7LPSkqew94D2oiRFRxge7djzOMQco3s7KrYPcRVutvAJeJenM\n5us9yiz6VGgYlOxXUIjk/RFiIOuTp3vpXNAWJseLBbf0ucSvdabOOiTfgV9oROA2\neOjNd6pxVWdtULmNacHBmbYHwKMaa1B1IbWzPEURNukKX1hhHdPSfgejniRYDHgW\n9y58PynQjKZtP0W1T3eTXg5RAtHSrQ==\n=xUGd\n-----END PGP SIGNATURE-----", "payload": "tree 2eecb5b396e6403de247cb8db9b614917f25b881\nparent 6760cb478451203ca1213d157b93253f1d5013e4\nauthor Martin Liska <mliska@suse.cz> 1588837096 +0200\ncommitter Martin Liska <mliska@suse.cz> 1588837096 +0200\n\nlto-wrapper: split arguments of getenv (\"MAKE\").\n\n\t* lto-wrapper.c: Split arguments of MAKE environment\n\tvariable.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b24fc8a692e3f2a8bd89d7ccb230ad3c72323e73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b24fc8a692e3f2a8bd89d7ccb230ad3c72323e73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b24fc8a692e3f2a8bd89d7ccb230ad3c72323e73/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6760cb478451203ca1213d157b93253f1d5013e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6760cb478451203ca1213d157b93253f1d5013e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6760cb478451203ca1213d157b93253f1d5013e4"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "89d4ea348e9878005625f63f3fa678946b956add", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24fc8a692e3f2a8bd89d7ccb230ad3c72323e73/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24fc8a692e3f2a8bd89d7ccb230ad3c72323e73/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b24fc8a692e3f2a8bd89d7ccb230ad3c72323e73", "patch": "@@ -1,3 +1,8 @@\n+2020-05-07  Martin Liska  <mliska@suse.cz>\n+\n+\t* lto-wrapper.c: Split arguments of MAKE environment\n+\tvariable.\n+\n 2020-05-07  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* config/alpha/alpha.c (alpha_atomic_assign_expand_fenv): Use"}, {"sha": "e34b6979d1f6824f8a8449a4358b73f62e540d47", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24fc8a692e3f2a8bd89d7ccb230ad3c72323e73/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24fc8a692e3f2a8bd89d7ccb230ad3c72323e73/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=b24fc8a692e3f2a8bd89d7ccb230ad3c72323e73", "patch": "@@ -1894,23 +1894,32 @@ run_gcc (unsigned argc, char *argv[])\n \t      putenv (xstrdup (\"MAKEFLAGS=\"));\n \t      putenv (xstrdup (\"MFLAGS=\"));\n \t    }\n-\t  new_argv[0] = getenv (\"MAKE\");\n-\t  if (!new_argv[0])\n-\t    new_argv[0] = \"make\";\n-\t  new_argv[1] = \"-f\";\n-\t  new_argv[2] = makefile;\n-\t  i = 3;\n+\n+\t  char **make_argv = buildargv (getenv (\"MAKE\"));\n+\t  if (make_argv)\n+\t    {\n+\t      for (unsigned argc = 0; make_argv[argc]; argc++)\n+\t\tobstack_ptr_grow (&argv_obstack, make_argv[argc]);\n+\t    }\n+\t  else\n+\t    obstack_ptr_grow (&argv_obstack, \"make\");\n+\n+\t  obstack_ptr_grow (&argv_obstack, \"-f\");\n+\t  obstack_ptr_grow (&argv_obstack, makefile);\n \t  if (!jobserver)\n \t    {\n \t      snprintf (jobs, 31, \"-j%ld\",\n \t\t\tauto_parallel ? nthreads_var : parallel);\n-\t      new_argv[i++] = jobs;\n+\t      obstack_ptr_grow (&argv_obstack, jobs);\n \t    }\n-\t  new_argv[i++] = \"all\";\n-\t  new_argv[i++] = NULL;\n+\t  obstack_ptr_grow (&argv_obstack, \"all\");\n+\t  obstack_ptr_grow (&argv_obstack, NULL);\n+\t  new_argv = XOBFINISH (&argv_obstack, const char **);\n+\n \t  pex = collect_execute (new_argv[0], CONST_CAST (char **, new_argv),\n \t\t\t\t NULL, NULL, PEX_SEARCH, false);\n \t  do_wait (new_argv[0], pex);\n+\t  freeargv (make_argv);\n \t  maybe_unlink (makefile);\n \t  makefile = NULL;\n \t  for (i = 0; i < nr; ++i)"}]}