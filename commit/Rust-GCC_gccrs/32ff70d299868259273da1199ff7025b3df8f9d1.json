{"sha": "32ff70d299868259273da1199ff7025b3df8f9d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJmZjcwZDI5OTg2ODI1OTI3M2RhMTE5OWZmNzAyNWIzZGY4ZjlkMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2001-04-02T08:17:15Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2001-04-02T08:17:15Z"}, "message": "ifcvt.c (noce_emit_move_insn): New.\n\n\t* ifcvt.c (noce_emit_move_insn): New.\n\t(noce_try_store_flag, noce_try_store_flag_constants,\n\tnoce_try_store_flag_inc, noce_try_store_flag_mask,\n\tnoce_try_cmove, noce_try_cmove_arith, noce_try_minmax,\n\tnoce_try_abs): Use it.\n\t(noce_process_if_block): Likewise.\n\tFor STRICT_LOW_PART, take mode from its SUBREG.\n\n\t* gcc.c-torture/compile/20010329-1.c: New test.\n\nFrom-SVN: r41001", "tree": {"sha": "c4a24de668afb8aebdbf7915701d8102fc9c65e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4a24de668afb8aebdbf7915701d8102fc9c65e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32ff70d299868259273da1199ff7025b3df8f9d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32ff70d299868259273da1199ff7025b3df8f9d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32ff70d299868259273da1199ff7025b3df8f9d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32ff70d299868259273da1199ff7025b3df8f9d1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d791ea1e0a2341a8fb2ca8b593063af8e471fcac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d791ea1e0a2341a8fb2ca8b593063af8e471fcac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d791ea1e0a2341a8fb2ca8b593063af8e471fcac"}], "stats": {"total": 83, "additions": 72, "deletions": 11}, "files": [{"sha": "89fa7cdcd2d085f594ba97b76b1181dd9c16602b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ff70d299868259273da1199ff7025b3df8f9d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ff70d299868259273da1199ff7025b3df8f9d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32ff70d299868259273da1199ff7025b3df8f9d1", "patch": "@@ -1,3 +1,13 @@\n+2001-04-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* ifcvt.c (noce_emit_move_insn): New.\n+\t(noce_try_store_flag, noce_try_store_flag_constants,\n+\tnoce_try_store_flag_inc, noce_try_store_flag_mask,\n+\tnoce_try_cmove, noce_try_cmove_arith, noce_try_minmax,\n+\tnoce_try_abs): Use it.\n+\t(noce_process_if_block): Likewise.\n+\tFor STRICT_LOW_PART, take mode from its SUBREG.\n+\n 2001-04-02  Jakub Jelinek  <jakub@redhat.com>\n \n \t* fold-const.c (fold): Before optimizing unsigned comparison with"}, {"sha": "f0df3da0371e1efdc03d48b9304c5b38ae92d731", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 41, "deletions": 11, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ff70d299868259273da1199ff7025b3df8f9d1/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ff70d299868259273da1199ff7025b3df8f9d1/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=32ff70d299868259273da1199ff7025b3df8f9d1", "patch": "@@ -96,6 +96,7 @@ static int find_if_case_2\t\tPARAMS ((basic_block, edge, edge));\n static int find_memory\t\t\tPARAMS ((rtx *, void *));\n static int dead_or_predicable\t\tPARAMS ((basic_block, basic_block,\n \t\t\t\t\t\t basic_block, rtx, int));\n+static void noce_emit_move_insn\t\tPARAMS ((rtx, rtx));\n \f\n /* Abuse the basic_block AUX field to store the original block index,\n    as well as a flag indicating that the block should be rescaned for\n@@ -537,6 +538,34 @@ noce_emit_store_flag (if_info, x, reversep, normalize)\n \t\t\t   || code == GEU || code == GTU), normalize);\n }\n \n+/* Emit instruction to move a rtx into STRICT_LOW_PART.  */\n+static void\n+noce_emit_move_insn (x, y)\n+     rtx x, y;\n+{\n+  enum machine_mode outmode, inmode;\n+  rtx outer, inner;\n+  int bitpos;\n+\n+  if (GET_CODE (x) != STRICT_LOW_PART)\n+    {\n+      emit_move_insn (x, y);\n+      return;\n+    }\n+\n+  outer = XEXP (x, 0);\n+  inner = XEXP (outer, 0);\n+  outmode = GET_MODE (outer);\n+  inmode = GET_MODE (inner);\n+  bitpos = SUBREG_WORD (outer) * BITS_PER_WORD;\n+  if (BYTES_BIG_ENDIAN)\n+    bitpos += (GET_MODE_BITSIZE (inmode) - GET_MODE_BITSIZE (outmode))\n+\t      % BITS_PER_WORD;\n+  store_bit_field (inner, GET_MODE_BITSIZE (outmode),\n+\t\t   bitpos, outmode, y, GET_MODE_BITSIZE (inmode),\n+\t\t   GET_MODE_BITSIZE (inmode));\n+}\n+\n /* Convert \"if (test) x = 1; else x = 0\".\n \n    Only try 0 and STORE_FLAG_VALUE here.  Other combinations will be\n@@ -569,7 +598,7 @@ noce_try_store_flag (if_info)\n   if (target)\n     {\n       if (target != if_info->x)\n-\temit_move_insn (if_info->x, target);\n+\tnoce_emit_move_insn (if_info->x, target);\n \n       seq = get_insns ();\n       end_sequence ();\n@@ -692,7 +721,7 @@ noce_try_store_flag_constants (if_info)\n \t}\n \n       if (target != if_info->x)\n-\temit_move_insn (if_info->x, target);\n+\tnoce_emit_move_insn (if_info->x, target);\n \n       seq = get_insns ();\n       end_sequence ();\n@@ -751,7 +780,7 @@ noce_try_store_flag_inc (if_info)\n       if (target)\n \t{\n \t  if (target != if_info->x)\n-\t    emit_move_insn (if_info->x, target);\n+\t    noce_emit_move_insn (if_info->x, target);\n \n \t  seq = get_insns ();\n \t  end_sequence ();\n@@ -803,7 +832,7 @@ noce_try_store_flag_mask (if_info)\n       if (target)\n \t{\n \t  if (target != if_info->x)\n-\t    emit_move_insn (if_info->x, target);\n+\t    noce_emit_move_insn (if_info->x, target);\n \n \t  seq = get_insns ();\n \t  end_sequence ();\n@@ -902,7 +931,7 @@ noce_try_cmove (if_info)\n       if (target)\n \t{\n \t  if (target != if_info->x)\n-\t    emit_move_insn (if_info->x, target);\n+\t    noce_emit_move_insn (if_info->x, target);\n \n \t  seq = get_insns ();\n \t  end_sequence ();\n@@ -1059,10 +1088,10 @@ noce_try_cmove_arith (if_info)\n       if (MEM_ALIAS_SET (if_info->a) == MEM_ALIAS_SET (if_info->b))\n \tMEM_ALIAS_SET (tmp) = MEM_ALIAS_SET (if_info->a);\n \n-      emit_move_insn (if_info->x, tmp);\n+      noce_emit_move_insn (if_info->x, tmp);\n     }\n   else if (target != x)\n-    emit_move_insn (x, target);\n+    noce_emit_move_insn (x, target);\n \n   tmp = get_insns ();\n   end_sequence ();\n@@ -1209,7 +1238,7 @@ noce_try_minmax (if_info)\n       return FALSE;\n     }\n   if (target != if_info->x)\n-    emit_move_insn (if_info->x, target);\n+    noce_emit_move_insn (if_info->x, target);\n \n   seq = get_insns ();\n   end_sequence ();  \n@@ -1327,7 +1356,7 @@ noce_try_abs (if_info)\n     }\n \n   if (target != if_info->x)\n-    emit_move_insn (if_info->x, target);\n+    noce_emit_move_insn (if_info->x, target);\n \n   seq = get_insns ();\n   end_sequence ();  \n@@ -1532,7 +1561,8 @@ noce_process_if_block (test_bb, then_bb, else_bb, join_bb)\n     {\n       if (no_new_pseudos)\n \treturn FALSE;\n-      x = gen_reg_rtx (GET_MODE (x));\n+      x = gen_reg_rtx (GET_MODE (GET_CODE (x) == STRICT_LOW_PART\n+\t\t\t\t ? XEXP (x, 0) : x));\n     }\n \n   /* Don't operate on sources that may trap or are volatile.  */\n@@ -1638,7 +1668,7 @@ noce_process_if_block (test_bb, then_bb, else_bb, join_bb)\n   if (orig_x != x)\n     {\n       start_sequence ();\n-      emit_move_insn (orig_x, x);\n+      noce_emit_move_insn (orig_x, x);\n       insn_b = gen_sequence ();\n       end_sequence ();\n "}, {"sha": "8a7dcb60bbfd17beb091ac1811d8078139819441", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ff70d299868259273da1199ff7025b3df8f9d1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ff70d299868259273da1199ff7025b3df8f9d1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=32ff70d299868259273da1199ff7025b3df8f9d1", "patch": "@@ -1,3 +1,7 @@\n+2001-04-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.c-torture/compile/20010329-1.c: New test.\n+\n 2001-04-02  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.c-torture/execute/20010329-1.c: New test."}, {"sha": "4d495e1afc8252334076918f52c06e0aae7000d5", "filename": "gcc/testsuite/gcc.c-torture/compile/20010329-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ff70d299868259273da1199ff7025b3df8f9d1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010329-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ff70d299868259273da1199ff7025b3df8f9d1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010329-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010329-1.c?ref=32ff70d299868259273da1199ff7025b3df8f9d1", "patch": "@@ -0,0 +1,17 @@\n+union u {\n+  unsigned char a;\n+  double b;\n+};\n+\n+int a;\n+\n+union u foo (void)\n+{\n+  union u b;\n+\n+  if (a)\n+    b.a = 1;\n+  else\n+    b.a = 0;\n+  return b;\n+}"}]}