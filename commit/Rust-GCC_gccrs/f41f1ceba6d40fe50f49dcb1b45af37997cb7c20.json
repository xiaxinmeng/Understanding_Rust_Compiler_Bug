{"sha": "f41f1ceba6d40fe50f49dcb1b45af37997cb7c20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQxZjFjZWJhNmQ0MGZlNTBmNDlkY2IxYjQ1YWYzNzk5N2NiN2MyMA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2016-10-03T08:10:43Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-10-03T08:10:43Z"}, "message": "Core 903\n\n\tCore 903\n\t* typeck.c (cp_build_binary_op): Pass original operands to\n\tnull_ptr_cst_p, not those after the default conversions.\n\n\t* g++.dg/cpp0x/nullptr37.C: New test.\n\nFrom-SVN: r240707", "tree": {"sha": "e53987fa3bca08d04479e37deec4b791304c6bc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e53987fa3bca08d04479e37deec4b791304c6bc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f41f1ceba6d40fe50f49dcb1b45af37997cb7c20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f41f1ceba6d40fe50f49dcb1b45af37997cb7c20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f41f1ceba6d40fe50f49dcb1b45af37997cb7c20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f41f1ceba6d40fe50f49dcb1b45af37997cb7c20/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1633d3b91af987aefd53b64cd4071923e1f45502", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1633d3b91af987aefd53b64cd4071923e1f45502", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1633d3b91af987aefd53b64cd4071923e1f45502"}], "stats": {"total": 104, "additions": 96, "deletions": 8}, "files": [{"sha": "0f27cfdb583bcaf7679f1506d3871347a25629d4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f41f1ceba6d40fe50f49dcb1b45af37997cb7c20/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f41f1ceba6d40fe50f49dcb1b45af37997cb7c20/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f41f1ceba6d40fe50f49dcb1b45af37997cb7c20", "patch": "@@ -1,3 +1,9 @@\n+2016-10-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tCore 903\n+\t* typeck.c (cp_build_binary_op): Pass original operands to\n+\tnull_ptr_cst_p, not those after the default conversions.\n+\n 2016-10-03  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* parser.c (cp_parser_condition): Fix a warning."}, {"sha": "8b780beae7290721cc866454e534aeed66992850", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f41f1ceba6d40fe50f49dcb1b45af37997cb7c20/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f41f1ceba6d40fe50f49dcb1b45af37997cb7c20/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=f41f1ceba6d40fe50f49dcb1b45af37997cb7c20", "patch": "@@ -4573,7 +4573,7 @@ cp_build_binary_op (location_t location,\n \t      || code1 == COMPLEX_TYPE || code1 == ENUMERAL_TYPE))\n \tshort_compare = 1;\n       else if (((code0 == POINTER_TYPE || TYPE_PTRDATAMEM_P (type0))\n-\t\t&& null_ptr_cst_p (op1))\n+\t\t&& null_ptr_cst_p (orig_op1))\n \t       /* Handle, eg, (void*)0 (c++/43906), and more.  */\n \t       || (code0 == POINTER_TYPE\n \t\t   && TYPE_PTR_P (type1) && integer_zerop (op1)))\n@@ -4587,7 +4587,7 @@ cp_build_binary_op (location_t location,\n \t  warn_for_null_address (location, op0, complain);\n \t}\n       else if (((code1 == POINTER_TYPE || TYPE_PTRDATAMEM_P (type1))\n-\t\t&& null_ptr_cst_p (op0))\n+\t\t&& null_ptr_cst_p (orig_op0))\n \t       /* Handle, eg, (void*)0 (c++/43906), and more.  */\n \t       || (code1 == POINTER_TYPE\n \t\t   && TYPE_PTR_P (type0) && integer_zerop (op0)))\n@@ -4604,7 +4604,7 @@ cp_build_binary_op (location_t location,\n \t       || (TYPE_PTRDATAMEM_P (type0) && TYPE_PTRDATAMEM_P (type1)))\n \tresult_type = composite_pointer_type (type0, type1, op0, op1,\n \t\t\t\t\t      CPO_COMPARISON, complain);\n-      else if (null_ptr_cst_p (op0) && null_ptr_cst_p (op1))\n+      else if (null_ptr_cst_p (orig_op0) && null_ptr_cst_p (orig_op1))\n \t/* One of the operands must be of nullptr_t type.  */\n         result_type = TREE_TYPE (nullptr_node);\n       else if (code0 == POINTER_TYPE && code1 == INTEGER_TYPE)\n@@ -4623,7 +4623,7 @@ cp_build_binary_op (location_t location,\n           else\n             return error_mark_node;\n \t}\n-      else if (TYPE_PTRMEMFUNC_P (type0) && null_ptr_cst_p (op1))\n+      else if (TYPE_PTRMEMFUNC_P (type0) && null_ptr_cst_p (orig_op1))\n \t{\n \t  if (TARGET_PTRMEMFUNC_VBIT_LOCATION\n \t      == ptrmemfunc_vbit_in_delta)\n@@ -4664,7 +4664,7 @@ cp_build_binary_op (location_t location,\n \t    }\n \t  result_type = TREE_TYPE (op0);\n \t}\n-      else if (TYPE_PTRMEMFUNC_P (type1) && null_ptr_cst_p (op0))\n+      else if (TYPE_PTRMEMFUNC_P (type1) && null_ptr_cst_p (orig_op0))\n \treturn cp_build_binary_op (location, code, op1, op0, complain);\n       else if (TYPE_PTRMEMFUNC_P (type0) && TYPE_PTRMEMFUNC_P (type1))\n \t{\n@@ -4877,21 +4877,21 @@ cp_build_binary_op (location_t location,\n       else if (code0 == POINTER_TYPE && code1 == POINTER_TYPE)\n \tresult_type = composite_pointer_type (type0, type1, op0, op1,\n \t\t\t\t\t      CPO_COMPARISON, complain);\n-      else if (code0 == POINTER_TYPE && null_ptr_cst_p (op1))\n+      else if (code0 == POINTER_TYPE && null_ptr_cst_p (orig_op1))\n \t{\n \t  result_type = type0;\n \t  if (extra_warnings && (complain & tf_warning))\n \t    warning (OPT_Wextra,\n \t\t     \"ordered comparison of pointer with integer zero\");\n \t}\n-      else if (code1 == POINTER_TYPE && null_ptr_cst_p (op0))\n+      else if (code1 == POINTER_TYPE && null_ptr_cst_p (orig_op0))\n \t{\n \t  result_type = type1;\n \t  if (extra_warnings && (complain & tf_warning))\n \t    warning (OPT_Wextra,\n \t\t     \"ordered comparison of pointer with integer zero\");\n \t}\n-      else if (null_ptr_cst_p (op0) && null_ptr_cst_p (op1))\n+      else if (null_ptr_cst_p (orig_op0) && null_ptr_cst_p (orig_op1))\n \t/* One of the operands must be of nullptr_t type.  */\n         result_type = TREE_TYPE (nullptr_node);\n       else if (code0 == POINTER_TYPE && code1 == INTEGER_TYPE)"}, {"sha": "00f9530c6a8ca80f3737753d790d26fbf7042b37", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f41f1ceba6d40fe50f49dcb1b45af37997cb7c20/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f41f1ceba6d40fe50f49dcb1b45af37997cb7c20/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f41f1ceba6d40fe50f49dcb1b45af37997cb7c20", "patch": "@@ -1,3 +1,7 @@\n+2016-10-03  Marek Polacek  <polacek@redhat.com>\n+\n+\t* g++.dg/cpp0x/nullptr37.C: New test.\n+\n 2016-10-03  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* c-c++-common/Wint-in-bool-context.c: Update test."}, {"sha": "e746a285404c7b497a2d504a1abb3c335510ab33", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr37.C", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f41f1ceba6d40fe50f49dcb1b45af37997cb7c20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr37.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f41f1ceba6d40fe50f49dcb1b45af37997cb7c20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr37.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr37.C?ref=f41f1ceba6d40fe50f49dcb1b45af37997cb7c20", "patch": "@@ -0,0 +1,78 @@\n+/* PR c++/64767 */\n+// { dg-do compile { target c++11 } }\n+\n+int\n+f1 (int *p, int **q)\n+{\n+  int r = 0;\n+\n+  r += p == '\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += p == L'\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += p == u'\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += p == U'\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += p != '\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += p != L'\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += p != u'\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += p != U'\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+\n+  r += '\\0' == p; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += L'\\0' == p; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += u'\\0' == p; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += U'\\0' == p; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += '\\0' != p; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += L'\\0' != p; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += u'\\0' != p; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += U'\\0' != p; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+\n+  r += q == '\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += q == L'\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += q == u'\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += q == U'\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += q != '\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += q != L'\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += q != u'\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += q != U'\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+\n+  r += '\\0' == q; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += L'\\0' == q; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += u'\\0' == q; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += U'\\0' == q; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += '\\0' != q; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += L'\\0' != q; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += u'\\0' != q; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += U'\\0' != q; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+\n+  return r;\n+}\n+\n+int\n+f2 (int *p)\n+{\n+  int r = 0;\n+\n+  r += p == (void *) 0;\n+  r += p != (void *) 0;\n+  r += (void *) 0 == p;\n+  r += (void *) 0 != p;\n+\n+  r += p == 0;\n+  r += p != 0;\n+  r += 0 == p;\n+  r += 0 != p;\n+\n+  return r;\n+}\n+\n+int\n+f3 (int *p)\n+{\n+  int r = 0;\n+\n+  r += p == (char) 0; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += p != (char) 0; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+\n+  r += (char) 0 == p; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += (char) 0 != p; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+\n+  return r;\n+}"}]}