{"sha": "28987d8be6f77e88eedaff727176c7bc1030baac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg5ODdkOGJlNmY3N2U4OGVlZGFmZjcyNzE3NmM3YmMxMDMwYmFhYw==", "commit": {"author": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2019-10-15T12:14:55Z"}, "committer": {"name": "Jozef Lawrynowicz", "email": "jozefl@gcc.gnu.org", "date": "2019-10-15T12:14:55Z"}, "message": "constraints.md: Allow post_inc operand for \"Ya\" constraint.\n\n2019-10-15  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\t* config/msp430/constraints.md: Allow post_inc operand for \"Ya\"\n\tconstraint.\n\t* config/msp430/msp430.c (msp430_legitimate_address_p): Handle\n\tPOST_INC.\n\t(msp430_subreg): Likewise.\n\t(msp430_split_addsi): Likewise.\n\t(msp430_print_operand_addr): Likewise.\n\t* config/msp430/msp430.h (HAVE_POST_INCREMENT): Define.\n\t(USE_STORE_POST_INCREMENT): Define.\n\t* config/msp430/msp430.md: Use the msp430_general_dst_operand or\n\tmsp430_general_dst_nonv_operand predicates for the lvalues of insns.\n\t* config/msp430/predicates.md (msp430_nonpostinc_operand): New.\n\t(msp430_general_dst_operand): New.\n\t(msp430_general_dst_nonv_operand): New.\n\t(msp430_nonsubreg_operand): Remove.\n\t(msp430_nonsubreg_dst_operand): New.\n\t(msp430_nonsubreg_or_imm_operand): Allow reg or mem operands in place\n\tof defunct msp430_nonsubreg_operand.\n\t(msp430_nonsubregnonpostinc_or_imm_operand): New.\n\nFrom-SVN: r276995", "tree": {"sha": "32b6643fd51d638e02576eb92d5792bf126d9768", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32b6643fd51d638e02576eb92d5792bf126d9768"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28987d8be6f77e88eedaff727176c7bc1030baac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28987d8be6f77e88eedaff727176c7bc1030baac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28987d8be6f77e88eedaff727176c7bc1030baac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28987d8be6f77e88eedaff727176c7bc1030baac/comments", "author": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9158f0ba97ff987948cd5ce8391a546751c6dff3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9158f0ba97ff987948cd5ce8391a546751c6dff3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9158f0ba97ff987948cd5ce8391a546751c6dff3"}], "stats": {"total": 304, "additions": 205, "deletions": 99}, "files": [{"sha": "767dc025e95167d999ac5fe6831321bbf070d058", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28987d8be6f77e88eedaff727176c7bc1030baac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28987d8be6f77e88eedaff727176c7bc1030baac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28987d8be6f77e88eedaff727176c7bc1030baac", "patch": "@@ -1,3 +1,25 @@\n+2019-10-15  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* config/msp430/constraints.md: Allow post_inc operand for \"Ya\"\n+\tconstraint.\n+\t* config/msp430/msp430.c (msp430_legitimate_address_p): Handle\n+\tPOST_INC.\n+\t(msp430_subreg): Likewise.\n+\t(msp430_split_addsi): Likewise.\n+\t(msp430_print_operand_addr): Likewise.\n+\t* config/msp430/msp430.h (HAVE_POST_INCREMENT): Define.\n+\t(USE_STORE_POST_INCREMENT): Define.\n+\t* config/msp430/msp430.md: Use the msp430_general_dst_operand or\n+\tmsp430_general_dst_nonv_operand predicates for the lvalues of insns.\n+\t* config/msp430/predicates.md (msp430_nonpostinc_operand): New.\n+\t(msp430_general_dst_operand): New.\n+\t(msp430_general_dst_nonv_operand): New.\n+\t(msp430_nonsubreg_operand): Remove.\n+\t(msp430_nonsubreg_dst_operand): New.\n+\t(msp430_nonsubreg_or_imm_operand): Allow reg or mem operands in place\n+\tof defunct msp430_nonsubreg_operand.\n+\t(msp430_nonsubregnonpostinc_or_imm_operand): New.\n+\n 2019-10-15  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/91929"}, {"sha": "d01bcf9a242ba54b56a3355538b46cf7851c8d87", "filename": "gcc/config/msp430/constraints.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28987d8be6f77e88eedaff727176c7bc1030baac/gcc%2Fconfig%2Fmsp430%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28987d8be6f77e88eedaff727176c7bc1030baac/gcc%2Fconfig%2Fmsp430%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fconstraints.md?ref=28987d8be6f77e88eedaff727176c7bc1030baac", "patch": "@@ -60,6 +60,7 @@\n \t\t (match_code \"reg\" \"00\")\n \t\t (match_test (\"CONST_INT_P (XEXP (XEXP (op, 0), 1))\")))\n \t    (match_test \"CONSTANT_P (XEXP (op, 0))\")\n+\t    (match_code \"post_inc\" \"0\")\n \t    )))\n \n (define_constraint \"Yl\""}, {"sha": "31029395c3de11e7f9a8441c535f0831c66df9b7", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28987d8be6f77e88eedaff727176c7bc1030baac/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28987d8be6f77e88eedaff727176c7bc1030baac/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=28987d8be6f77e88eedaff727176c7bc1030baac", "patch": "@@ -942,12 +942,17 @@ msp430_legitimate_address_p (machine_mode mode ATTRIBUTE_UNUSED,\n       return false;\n \n     case PLUS:\n+    case POST_INC:\n       if (REG_P (XEXP (x, 0)))\n \t{\n \t  if (GET_MODE (x) != GET_MODE (XEXP (x, 0)))\n \t    return false;\n \t  if (!reg_ok_for_addr (XEXP (x, 0), strict))\n \t    return false;\n+\t  if (GET_CODE (x) == POST_INC)\n+\t    /* At this point, if the original rtx was a post_inc, we don't have\n+\t       anything further to check.  */\n+\t    return true;\n \t  switch (GET_CODE (XEXP (x, 1)))\n \t    {\n \t    case CONST:\n@@ -2810,6 +2815,7 @@ rtx\n msp430_subreg (machine_mode mode, rtx r, machine_mode omode, int byte)\n {\n   rtx rv;\n+  gcc_assert (mode == HImode);\n \n   if (GET_CODE (r) == SUBREG\n       && SUBREG_BYTE (r) == 0)\n@@ -2826,7 +2832,15 @@ msp430_subreg (machine_mode mode, rtx r, machine_mode omode, int byte)\n \trv = simplify_gen_subreg (mode, ireg, imode, byte);\n     }\n   else if (GET_CODE (r) == MEM)\n-    rv = adjust_address (r, mode, byte);\n+    {\n+      /* When byte == 2, we can be certain that we were already called with an\n+\t identical rtx with byte == 0.  So we don't need to do anything to\n+\t get a 2 byte offset of a (mem (post_inc)) rtx, since the address has\n+\t already been offset by the post_inc itself.  */\n+      if (GET_CODE (XEXP (r, 0)) == POST_INC && byte == 2)\n+\tbyte = 0;\n+      rv = adjust_address (r, mode, byte);\n+    }\n   else if (GET_CODE (r) == SYMBOL_REF\n \t   && (byte == 0 || byte == 2)\n \t   && mode == HImode)\n@@ -2861,6 +2875,18 @@ msp430_split_addsi (rtx *operands)\n \n   if (GET_CODE (operands[5]) == CONST_INT)\n     operands[9] = GEN_INT (INTVAL (operands[5]) & 0xffff);\n+  /* Handle post_inc, for example:\n+     (set (reg:SI)\n+\t  (plus:SI (reg:SI)\n+\t\t   (mem:SI (post_inc:PSI (reg:PSI))))).  */\n+  else if (MEM_P (operands[5]) && GET_CODE (XEXP (operands[5], 0)) == POST_INC)\n+    {\n+      /* Strip out the post_inc from (mem (post_inc (reg))).  */\n+      operands[9] = XEXP (XEXP (operands[5], 0), 0);\n+      operands[9] = gen_rtx_MEM (HImode, operands[9]);\n+      /* Then zero extend as normal.  */\n+      operands[9] = gen_rtx_ZERO_EXTEND (SImode, operands[9]);\n+    }\n   else\n     operands[9] = gen_rtx_ZERO_EXTEND (SImode, operands[5]);\n   return 0;\n@@ -3205,6 +3231,10 @@ msp430_print_operand_addr (FILE * file, machine_mode /*mode*/, rtx addr)\n       fprintf (file, \"@\");\n       break;\n \n+    case POST_INC:\n+      fprintf (file, \"@%s+\", reg_names[REGNO (XEXP (addr, 0))]);\n+      return;\n+\n     case CONST:\n     case CONST_INT:\n     case SYMBOL_REF:"}, {"sha": "73afe2e2d169cc89d4f4ce7ebbe7daeb1fea6814", "filename": "gcc/config/msp430/msp430.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28987d8be6f77e88eedaff727176c7bc1030baac/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28987d8be6f77e88eedaff727176c7bc1030baac/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.h?ref=28987d8be6f77e88eedaff727176c7bc1030baac", "patch": "@@ -478,6 +478,18 @@ typedef struct\n \n #define ACCUMULATE_OUTGOING_ARGS 1\n \n+#define HAVE_POST_INCREMENT 1\n+\n+/* This (unsurprisingly) improves code size in the vast majority of cases, we\n+   want to prevent any instructions using a \"store post increment\" from being\n+   generated.  These will have to later be reloaded since msp430 does not\n+   support post inc for the destination operand.  */\n+#define USE_STORE_POST_INCREMENT(MODE)  0\n+\n+/* Many other targets set USE_LOAD_POST_INCREMENT to 0.  For msp430-elf\n+   the benefit of disabling it is not clear.  When looking at code size, on\n+   average, there is a slight advantage to leaving it enabled.  */\n+\n #undef  ASM_DECLARE_FUNCTION_NAME\n #define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL) \\\n   msp430_start_function ((FILE), (NAME), (DECL))"}, {"sha": "a533efa165683331b20f8e37834c66fc343f91e3", "filename": "gcc/config/msp430/msp430.md", "status": "modified", "additions": 98, "deletions": 93, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28987d8be6f77e88eedaff727176c7bc1030baac/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28987d8be6f77e88eedaff727176c7bc1030baac/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.md?ref=28987d8be6f77e88eedaff727176c7bc1030baac", "patch": "@@ -183,14 +183,14 @@\n )\n \n (define_insn \"movqi_topbyte\"\n-  [(set (match_operand:QI 0 \"msp430_nonimmediate_operand\" \"=r\")\n+  [(set (match_operand:QI 0 \"msp430_general_dst_operand\" \"=r\")\n \t(subreg:QI (match_operand:PSI 1 \"msp430_general_operand\" \"r\") 2))]\n   \"msp430x\"\n   \"PUSHM.A\\t#1,%1 { POPM.W\\t#1,%0 { POPM.W\\t#1,%0\"\n )\n \n (define_insn \"movqi\"\n-  [(set (match_operand:QI 0 \"msp430_nonimmediate_operand\" \"=rYsYx,rm\")\n+  [(set (match_operand:QI 0 \"msp430_general_dst_operand\" \"=rYsYx,rm\")\n \t(match_operand:QI 1 \"msp430_general_operand\" \"riYsYx,rmi\"))]\n   \"\"\n   \"@\n@@ -199,7 +199,7 @@\n )\n \n (define_insn \"movhi\"\n-  [(set (match_operand:HI 0 \"msp430_nonimmediate_operand\" \"=r,rYsYx,rm\")\n+  [(set (match_operand:HI 0 \"msp430_general_dst_operand\" \"=r,rYsYx,rm\")\n \t(match_operand:HI 1 \"msp430_general_operand\" \"N,riYsYx,rmi\"))]\n   \"\"\n   \"@\n@@ -209,41 +209,41 @@\n )\n \n (define_expand \"movsi\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\")\n+  [(set (match_operand:SI 0 \"msp430_general_dst_nonv_operand\")\n \t(match_operand:SI 1 \"general_operand\"))]\n   \"\"\n   \"\"\n   )\n \n (define_insn_and_split \"movsi_s\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n+  [(set (match_operand:SI 0 \"msp430_general_dst_nonv_operand\" \"=rm\")\n \t(subreg:SI (match_operand:PSI 1 \"msp430_symbol_operand\" \"i\") 0))]\n   \"\"\n   \"\"\n   \"reload_completed\"\n-  [(set (match_operand:HI 2 \"nonimmediate_operand\")\n+  [(set (match_operand:HI 2 \"msp430_general_dst_nonv_operand\")\n \t(match_operand:HI 4 \"general_operand\"))\n-   (set (match_operand:HI 3 \"nonimmediate_operand\")\n+   (set (match_operand:HI 3 \"msp430_general_dst_nonv_operand\")\n \t(match_operand:HI 5 \"general_operand\"))]\n   \"msp430_split_movsi (operands);\"\n   )\n \n (define_insn_and_split \"movsi_x\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n+  [(set (match_operand:SI 0 \"msp430_general_dst_nonv_operand\" \"=rm\")\n \t(match_operand:SI 1 \"general_operand\" \"rmi\"))]\n   \"\"\n   \"#\"\n   \"reload_completed\"\n-  [(set (match_operand:HI 2 \"nonimmediate_operand\")\n+  [(set (match_operand:HI 2 \"msp430_general_dst_nonv_operand\")\n \t(match_operand:HI 4 \"general_operand\"))\n-   (set (match_operand:HI 3 \"nonimmediate_operand\")\n+   (set (match_operand:HI 3 \"msp430_general_dst_nonv_operand\")\n \t(match_operand:HI 5 \"general_operand\"))]\n   \"msp430_split_movsi (operands);\"\n )\n \n ;; FIXME: Some MOVX.A cases can be done with MOVA, this is only a few of them.\n (define_insn \"movpsi\"\n-  [(set (match_operand:PSI 0 \"msp430_nonimmediate_operand\" \"=r,r,r,Ya,rm\")\n+  [(set (match_operand:PSI 0 \"msp430_general_dst_operand\" \"=r,r,r,Ya,rm\")\n \t(match_operand:PSI 1 \"msp430_general_operand\" \"N,O,riYa,r,rmi\"))]\n   \"\"\n   \"@\n@@ -279,8 +279,8 @@\n ;; Math\n \n (define_insn \"addpsi3\"\n-  [(set (match_operand:PSI\t     0 \"msp430_nonimmediate_operand\" \"=r,rm\")\n-\t(plus:PSI (match_operand:PSI 1 \"msp430_nonimmediate_operand\" \"%0,0\")\n+  [(set (match_operand:PSI\t     0 \"msp430_general_dst_operand\" \"=r,rm\")\n+\t(plus:PSI (match_operand:PSI 1 \"msp430_general_operand\" \"%0,0\")\n \t\t  (match_operand:PSI 2 \"msp430_general_operand\"      \"rLs,rmi\")))]\n   \"\"\n   \"@\n@@ -289,8 +289,8 @@\n )\n \n (define_insn \"addqi3\"\n-  [(set (match_operand:QI\t   0 \"msp430_nonimmediate_operand\" \"=rYsYx,rm\")\n-\t(plus:QI (match_operand:QI 1 \"msp430_nonimmediate_operand\" \"%0,0\")\n+  [(set (match_operand:QI\t   0 \"msp430_general_dst_operand\" \"=rYsYx,rm\")\n+\t(plus:QI (match_operand:QI 1 \"msp430_general_operand\" \"%0,0\")\n \t\t (match_operand:QI 2 \"msp430_general_operand\"      \"riYsYx,rmi\")))]\n   \"\"\n   \"@\n@@ -299,8 +299,8 @@\n )\n \n (define_insn \"addhi3\"\n-  [(set (match_operand:HI\t    0 \"msp430_nonimmediate_operand\" \"=rYsYx,rm\")\n-\t(plus:HI (match_operand:HI  1 \"msp430_nonimmediate_operand\" \"%0,0\")\n+  [(set (match_operand:HI\t    0 \"msp430_general_dst_operand\" \"=rYsYx,rm\")\n+\t(plus:HI (match_operand:HI  1 \"msp430_general_operand\" \"%0,0\")\n \t\t  (match_operand:HI 2 \"msp430_general_operand\"      \"riYsYx,rmi\")))]\n   \"\"\n   \"@\n@@ -321,8 +321,8 @@\n )\n \n (define_insn \"addsi3\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=&rYsYx,rm\")\n-\t(plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")\n+  [(set (match_operand:SI 0 \"msp430_general_dst_nonv_operand\" \"=&rYsYx,rm\")\n+\t(plus:SI (match_operand:SI 1 \"general_operand\" \"%0,0\")\n \t\t (match_operand:SI 2 \"general_operand\" \"rYsYxi,mi\")))]\n   \"\"\n   \"@\n@@ -357,13 +357,16 @@\n ; increased register pressure.  Or possibly reload does not handle ADD patterns\n ; that are not single_set() very well.\n \n+; match_operand 3 is likely to be the same as op2 most of the time - except\n+; when op2 is a post_inc and we have stripped the post_inc from match_operand 3\n+\n (define_insn \"addhi3_cy\"\n-  [(set (match_operand:HI\t   0 \"msp430_nonimmediate_operand\" \"=rYsYx,rm\")\n-\t(plus:HI (match_operand:HI 1 \"msp430_nonimmediate_operand\" \"%0,0\")\n+  [(set (match_operand:HI\t   0 \"msp430_general_dst_operand\" \"=rYsYx,rm\")\n+\t(plus:HI (match_operand:HI 1 \"msp430_general_operand\" \"%0,0\")\n \t\t (match_operand:HI 2 \"msp430_nonimmediate_operand\" \"rYsYxi,rm\")))\n    (set (reg:BI CARRY)\n \t(truncate:BI (lshiftrt:SI (plus:SI (zero_extend:SI (match_dup 1))\n-\t\t\t\t\t   (zero_extend:SI (match_dup 2)))\n+\t\t\t\t\t   (zero_extend:SI (match_operand:HI 3 \"msp430_nonimmediate_operand\" \"rYsYxi,rm\")))\n \t\t\t\t  (const_int 16))))\n    ]\n   \"\"\n@@ -373,8 +376,8 @@\n   )\n \n (define_insn \"addhi3_cy_i\"\n-  [(set (match_operand:HI          0 \"nonimmediate_operand\" \"=r,rm\")\n-\t(plus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n+  [(set (match_operand:HI\t   0 \"msp430_general_dst_nonv_operand\" \"=r,rm\")\n+\t(plus:HI (match_operand:HI 1 \"general_operand\" \"%0,0\")\n \t\t (match_operand:HI 2 \"immediate_operand\"     \"i,i\")))\n    (set (reg:BI CARRY)\n \t(truncate:BI (lshiftrt:SI (plus:SI (zero_extend:SI (match_dup 1))\n@@ -389,8 +392,8 @@\n \n ; Version of addhi that adds the carry, for SImode adds.\n (define_insn \"addchi4_cy\"\n-  [(set (match_operand:HI\t\t    0 \"msp430_nonimmediate_operand\" \"=rYsYx,rm\")\n-\t(plus:HI (plus:HI (match_operand:HI 1 \"msp430_nonimmediate_operand\" \"%0,0\")\n+  [(set (match_operand:HI\t\t    0 \"msp430_general_dst_operand\" \"=rYsYx,rm\")\n+\t(plus:HI (plus:HI (match_operand:HI 1 \"msp430_general_operand\" \"%0,0\")\n \t\t\t  (match_operand:HI 2 \"msp430_general_operand\"      \"riYsYx,rmi\"))\n \t\t (zero_extend:HI (reg:BI CARRY))))\n    ]\n@@ -403,21 +406,23 @@\n ; Split an SImode add into two HImode adds, keeping track of the carry\n ; so that gcc knows when it can and can't optimize away the two\n ; halves.\n+; We use the ugly predicate \"msp430_nonsubregnonpostinc_or_imm_operand\" to\n+; enforce the position of a post_inc into op2 if present\n (define_split\n-  [(set (match_operand:SI          0 \"msp430_nonsubreg_operand\")\n-\t(plus:SI (match_operand:SI 1 \"msp430_nonsubreg_operand\")\n+  [(set (match_operand:SI\t   0 \"msp430_nonsubreg_dst_operand\")\n+\t(plus:SI (match_operand:SI 1 \"msp430_nonsubregnonpostinc_or_imm_operand\")\n \t\t (match_operand:SI 2 \"msp430_nonsubreg_or_imm_operand\")))\n    ]\n   \"\"\n-  [(parallel [(set (match_operand:HI 3 \"nonimmediate_operand\" \"=&rm\")\n+  [(parallel [(set (match_operand:HI 3 \"msp430_general_dst_nonv_operand\" \"=&rm\")\n \t\t   (plus:HI (match_dup 4)\n \t\t\t    (match_dup 5)))\n \t      (set (reg:BI CARRY)\n \t\t   (truncate:BI (lshiftrt:SI (plus:SI (zero_extend:SI (match_dup 4))\n \t\t\t\t\t\t      (match_dup 9))\n \t\t\t\t\t     (const_int 16))))\n \t      ])\n-   (set (match_operand:HI 6 \"nonimmediate_operand\" \"=&rm\")\n+   (set (match_operand:HI 6 \"msp430_general_dst_nonv_operand\" \"=&rm\")\n \t(plus:HI (plus:HI (match_dup 7)\n \t\t\t  (match_dup 8))\n \t\t (zero_extend:HI (reg:BI CARRY))))\n@@ -431,9 +436,9 @@\n \n ;; Alternatives 2 and 3 are to handle cases generated by reload.\n (define_insn \"subpsi3\"\n-  [(set (match_operand:PSI            0 \"nonimmediate_operand\" \"=r,   rm, &?r, ?&r\")\n-\t(minus:PSI (match_operand:PSI 1 \"general_operand\"       \"0,   0,   !r,  !i\")\n-\t\t   (match_operand:PSI 2 \"general_operand\"       \"rLs, rmi, rmi,  r\")))]\n+  [(set (match_operand:PSI\t      0 \"msp430_general_dst_nonv_operand\"\t\"=r,   rm, &?r, ?&r\")\n+\t(minus:PSI (match_operand:PSI 1 \"general_operand\"\t\t\t\"0,   0,   !r,  !i\")\n+\t\t   (match_operand:PSI 2 \"general_operand\"\t\t\t\"rLs, rmi, rmi,  r\")))]\n   \"\"\n   \"@\n   SUBA\\t%2, %0\n@@ -444,7 +449,7 @@\n \n ;; Alternatives 2 and 3 are to handle cases generated by reload.\n (define_insn \"subqi3\"\n-  [(set (match_operand:QI           0 \"nonimmediate_operand\" \"=rYsYx,  rm,  &?r, ?&r\")\n+  [(set (match_operand:QI\t    0 \"msp430_general_dst_nonv_operand\" \"=rYsYx,  rm,  &?r, ?&r\")\n \t(minus:QI (match_operand:QI 1 \"general_operand\"       \"0,    0,    !r,  !i\")\n \t\t  (match_operand:QI 2 \"general_operand\"      \" riYsYx, rmi, rmi,   r\")))]\n   \"\"\n@@ -457,7 +462,7 @@\n \n ;; Alternatives 2 and 3 are to handle cases generated by reload.\n (define_insn \"subhi3\"\n-  [(set (match_operand:HI           0 \"nonimmediate_operand\" \"=rYsYx,  rm,  &?r, ?&r\")\n+  [(set (match_operand:HI\t    0 \"msp430_general_dst_nonv_operand\" \"=rYsYx,  rm,  &?r, ?&r\")\n \t(minus:HI (match_operand:HI 1 \"general_operand\"       \"0,    0,    !r,  !i\")\n \t\t  (match_operand:HI 2 \"general_operand\"      \" riYsYx, rmi, rmi,   r\")))]\n   \"\"\n@@ -469,8 +474,8 @@\n )\n \n (define_insn \"subsi3\"\n-  [(set (match_operand:SI           0 \"nonimmediate_operand\" \"=&rYsYx,m\")\n-\t(minus:SI (match_operand:SI 1 \"nonimmediate_operand\"   \"0,0\")\n+  [(set (match_operand:SI\t    0 \"msp430_general_dst_nonv_operand\" \"=&rYsYx,m\")\n+\t(minus:SI (match_operand:SI 1 \"general_operand\"   \"0,0\")\n \t\t  (match_operand:SI 2 \"general_operand\"        \"riYsYx,mi\")))]\n   \"\"\n   \"@\n@@ -479,7 +484,7 @@\n )\n \n (define_insn \"*bic<mode>_cg\"\n-  [(set (match_operand:QHI 0 \"msp430_nonimmediate_operand\" \"=rYs,m\")\n+  [(set (match_operand:QHI 0 \"msp430_general_dst_operand\" \"=rYs,m\")\n \t(and:QHI (match_operand:QHI 1 \"msp430_general_operand\" \"0,0\")\n \t\t (match_operand 2 \"msp430_inv_constgen_operator\" \"n,n\")))]\n   \"\"\n@@ -489,18 +494,18 @@\n )\n \n (define_insn \"bic<mode>3\"\n-  [(set (match_operand:QHI\t\t     0 \"msp430_nonimmediate_operand\" \"=rYsYx,rm\")\n+  [(set (match_operand:QHI\t\t     0 \"msp430_general_dst_operand\" \"=rYsYx,rm\")\n \t(and:QHI (not:QHI (match_operand:QHI 1 \"msp430_general_operand\"       \"rYsYx,rmn\"))\n-\t\t (match_operand:QHI\t     2 \"msp430_nonimmediate_operand\"  \"0,0\")))]\n+\t\t (match_operand:QHI\t     2 \"msp430_general_operand\"  \"0,0\")))]\n   \"\"\n   \"@\n    BIC%x0%b0\\t%1, %0\n    BICX%b0\\t%1, %0\"\n )\n \n (define_insn \"and<mode>3\"\n-  [(set (match_operand:QHI 0 \"msp430_nonimmediate_operand\" \"=r,rYsYx,rm\")\n-\t(and:QHI (match_operand:QHI 1 \"msp430_nonimmediate_operand\" \"%0,0,0\")\n+  [(set (match_operand:QHI 0 \"msp430_general_dst_operand\" \"=r,rYsYx,rm\")\n+\t(and:QHI (match_operand:QHI 1 \"msp430_general_operand\" \"%0,0,0\")\n \t\t (match_operand:QHI 2 \"msp430_general_operand\" \"N,riYsYx,rmi\")))]\n   \"\"\n   \"@\n@@ -510,8 +515,8 @@\n )\n \n (define_insn \"ior<mode>3\"\n-  [(set (match_operand:QHI\t    0 \"msp430_nonimmediate_operand\" \"=rYsYx,rm\")\n-\t(ior:QHI (match_operand:QHI 1 \"msp430_nonimmediate_operand\" \"%0,0\")\n+  [(set (match_operand:QHI\t    0 \"msp430_general_dst_operand\" \"=rYsYx,rm\")\n+\t(ior:QHI (match_operand:QHI 1 \"msp430_general_operand\" \"%0,0\")\n \t\t (match_operand:QHI 2 \"msp430_general_operand\" \"riYsYx,rmi\")))]\n   \"\"\n   \"@\n@@ -520,8 +525,8 @@\n )\n \n (define_insn \"xor<mode>3\"\n-  [(set (match_operand:QHI\t    0 \"msp430_nonimmediate_operand\" \"=rYsYx,rm\")\n-\t(xor:QHI (match_operand:QHI 1 \"msp430_nonimmediate_operand\" \"%0,0\")\n+  [(set (match_operand:QHI\t    0 \"msp430_general_dst_operand\" \"=rYsYx,rm\")\n+\t(xor:QHI (match_operand:QHI 1 \"msp430_general_operand\" \"%0,0\")\n \t\t (match_operand:QHI 2 \"msp430_general_operand\" \"riYsYx,rmi\")))]\n   \"\"\n   \"@\n@@ -531,26 +536,26 @@\n \n ;; Macro : XOR #~0, %0\n (define_insn \"one_cmpl<mode>2\"\n-  [(set (match_operand:QHI\t    0 \"msp430_nonimmediate_operand\" \"=rYs,m\")\n-\t(not:QHI (match_operand:QHI 1 \"msp430_nonimmediate_operand\" \"0,0\")))]\n+  [(set (match_operand:QHI\t    0 \"msp430_general_dst_operand\" \"=rYs,m\")\n+\t(not:QHI (match_operand:QHI 1 \"msp430_general_operand\" \"0,0\")))]\n   \"\"\n   \"@\n    INV%x0%b0\\t%0\n    INV%X0%b0\\t%0\"\n )\n \n (define_insn \"extendqihi2\"\n-  [(set (match_operand:HI\t\t  0 \"msp430_nonimmediate_operand\" \"=rYs,m\")\n-\t(sign_extend:HI (match_operand:QI 1 \"msp430_nonimmediate_operand\" \"0,0\")))]\n+  [(set (match_operand:HI\t\t  0 \"msp430_general_dst_operand\" \"=rYs,m\")\n+\t(sign_extend:HI (match_operand:QI 1 \"msp430_general_operand\" \"0,0\")))]\n   \"\"\n   \"@\n    SXT%X0\\t%0\n    SXT%X0\\t%0\"\n )\n \n (define_insn \"zero_extendqihi2\"\n-  [(set (match_operand:HI\t\t  0 \"msp430_nonimmediate_operand\" \"=rYs,r,r,m\")\n-\t(zero_extend:HI (match_operand:QI 1 \"msp430_nonimmediate_operand\" \"0,rYs,m,0\")))]\n+  [(set (match_operand:HI\t\t  0 \"msp430_general_dst_operand\" \"=rYs,r,r,m\")\n+\t(zero_extend:HI (match_operand:QI 1 \"msp430_general_operand\" \"0,rYs,m,0\")))]\n   \"\"\n   \"@\n    AND\\t#0xff, %0\n@@ -571,31 +576,31 @@\n )\n \n (define_insn \"zero_extendhipsi2\"\n-  [(set (match_operand:PSI\t\t   0 \"msp430_nonimmediate_operand\" \"=r,m\")\n-\t(zero_extend:PSI (match_operand:HI 1 \"msp430_nonimmediate_operand\" \"rm,r\")))]\n+  [(set (match_operand:PSI\t\t   0 \"msp430_general_dst_operand\" \"=r,m\")\n+\t(zero_extend:PSI (match_operand:HI 1 \"msp430_general_operand\" \"rm,r\")))]\n   \"\"\n   \"@\n   MOVX\\t%1, %0\n   MOVX.A\\t%1, %0\"\n )\n \n (define_insn \"truncpsihi2\"\n-  [(set (match_operand:HI\t\t0 \"msp430_nonimmediate_operand\" \"=rm\")\n+  [(set (match_operand:HI\t\t0 \"msp430_general_dst_operand\" \"=rm\")\n \t(truncate:HI (match_operand:PSI 1 \"register_operand\"      \"r\")))]\n   \"\"\n   \"MOVX\\t%1, %0\"\n )\n \n (define_insn \"extendhisi2\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"msp430_general_dst_nonv_operand\" \"=r\")\n \t(sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"r\")))]\n   \"\"\n   { return msp430x_extendhisi (operands); }\n )\n \n (define_insn \"extendhipsi2\"\n-  [(set (match_operand:PSI 0 \"nonimmediate_operand\" \"=r\")\n-\t(subreg:PSI (sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")) 0))]\n+  [(set (match_operand:PSI 0 \"msp430_general_dst_nonv_operand\" \"=r\")\n+\t(subreg:PSI (sign_extend:SI (match_operand:HI 1 \"general_operand\" \"0\")) 0))]\n   \"msp430x\"\n   \"RLAM.A #4, %0 { RRAM.A #4, %0\"\n )\n@@ -606,41 +611,41 @@\n ;; paths.\n \n (define_insn \"zero_extendqisi2\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"msp430_general_dst_nonv_operand\" \"=r\")\n \t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"rm\")))]\n   \"\"\n   \"MOV%X1.B\\t%1,%L0 { CLR\\t%H0\"\n )\n \n (define_insn \"zero_extendhisi2\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,r\")\n-\t(zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"0,r\")))]\n+  [(set (match_operand:SI 0 \"msp430_general_dst_nonv_operand\" \"=rm,r\")\n+\t(zero_extend:SI (match_operand:HI 1 \"general_operand\" \"0,r\")))]\n   \"\"\n   \"@\n   MOV%X0.W\\t#0,%H0\n   MOV.W\\t%1,%L0 { MOV.W\\t#0,%H0\"\n )\n \n (define_insn \"zero_extendhisipsi2\"\n-  [(set (match_operand:PSI 0 \"nonimmediate_operand\" \"=r,r\")\n-\t(subreg:PSI (zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"0,r\")) 0))]\n+  [(set (match_operand:PSI 0 \"msp430_general_dst_nonv_operand\" \"=r,r\")\n+\t(subreg:PSI (zero_extend:SI (match_operand:HI 1 \"general_operand\" \"0,r\")) 0))]\n   \"msp430x\"\n   \"@\n    AND.W\\t#-1,%0\n    MOV.W\\t%1,%0\"\n )\n \n (define_insn \"extend_and_shift1_hipsi2\"\n-  [(set (subreg:SI (match_operand:PSI 0 \"nonimmediate_operand\" \"=r\") 0)\n-\t(ashift:SI (sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"0\"))\n+  [(set (subreg:SI (match_operand:PSI 0 \"msp430_general_dst_nonv_operand\" \"=r\") 0)\n+\t(ashift:SI (sign_extend:SI (match_operand:HI 1 \"general_operand\" \"0\"))\n \t\t   (const_int 1)))]\n   \"msp430x\"\n   \"RLAM.A #4, %0 { RRAM.A #3, %0\"\n )\n \n (define_insn \"extend_and_shift2_hipsi2\"\n-  [(set (subreg:SI (match_operand:PSI 0 \"nonimmediate_operand\" \"=r\") 0)\n-\t(ashift:SI (sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"0\"))\n+  [(set (subreg:SI (match_operand:PSI 0 \"msp430_general_dst_nonv_operand\" \"=r\") 0)\n+\t(ashift:SI (sign_extend:SI (match_operand:HI 1 \"general_operand\" \"0\"))\n \t\t   (const_int 2)))]\n   \"msp430x\"\n   \"RLAM.A #4, %0 { RRAM.A #2, %0\"\n@@ -739,7 +744,7 @@\n ;; signed A << C\n \n (define_expand \"ashlhi3\"\n-  [(set (match_operand:HI            0 \"nonimmediate_operand\")\n+  [(set (match_operand:HI\t     0 \"msp430_general_dst_nonv_operand\")\n \t(ashift:HI (match_operand:HI 1 \"general_operand\")\n \t\t   (match_operand:HI 2 \"general_operand\")))]\n   \"\"\n@@ -766,7 +771,7 @@\n )\n \n (define_insn \"slli_1\"\n-  [(set (match_operand:HI            0 \"nonimmediate_operand\" \"=rm\")\n+  [(set (match_operand:HI\t     0 \"msp430_general_dst_nonv_operand\" \"=rm\")\n \t(ashift:HI (match_operand:HI 1 \"general_operand\"       \"0\")\n \t\t   (const_int 1)))]\n   \"\"\n@@ -786,23 +791,23 @@\n )\n \n (define_insn \"slll_1\"\n-  [(set (match_operand:SI            0 \"nonimmediate_operand\" \"=rm\")\n+  [(set (match_operand:SI\t     0 \"msp430_general_dst_nonv_operand\" \"=rm\")\n \t(ashift:SI (match_operand:SI 1 \"general_operand\"       \"0\")\n \t\t   (const_int 1)))]\n   \"\"\n   \"RLA%X0.W\\t%L0 { RLC%X0.W\\t%H0\"\n )\n \n (define_insn \"slll_2\"\n-  [(set (match_operand:SI            0 \"nonimmediate_operand\" \"=rm\")\n+  [(set (match_operand:SI\t     0 \"msp430_general_dst_nonv_operand\" \"=rm\")\n \t(ashift:SI (match_operand:SI 1 \"general_operand\"       \"0\")\n \t\t   (const_int 2)))]\n   \"\"\n   \"RLA%X0.W\\t%L0 { RLC%X0.W\\t%H0 { RLA%X0.W\\t%L0 { RLC%X0.W\\t%H0\"\n )\n \n (define_expand \"ashlsi3\"\n-  [(set (match_operand:SI            0 \"nonimmediate_operand\")\n+  [(set (match_operand:SI\t     0 \"msp430_general_dst_nonv_operand\")\n \t(ashift:SI (match_operand:SI 1 \"general_operand\")\n \t\t   (match_operand:SI 2 \"general_operand\")))]\n   \"\"\n@@ -811,7 +816,7 @@\n )\n \n (define_expand \"ashldi3\"\n-  [(set (match_operand:DI\t     0 \"nonimmediate_operand\")\n+  [(set (match_operand:DI\t     0 \"msp430_general_dst_nonv_operand\")\n \t(ashift:DI (match_operand:DI 1 \"general_operand\")\n \t\t   (match_operand:DI 2 \"general_operand\")))]\n   \"\"\n@@ -827,7 +832,7 @@\n ;; signed A >> C\n \n (define_expand \"ashrhi3\"\n-  [(set (match_operand:HI              0 \"nonimmediate_operand\")\n+  [(set (match_operand:HI\t       0 \"msp430_general_dst_nonv_operand\")\n \t(ashiftrt:HI (match_operand:HI 1 \"general_operand\")\n \t\t     (match_operand:HI 2 \"general_operand\")))]\n   \"\"\n@@ -851,7 +856,7 @@\n )\n \n (define_insn \"srai_1\"\n-  [(set (match_operand:HI\t       0 \"msp430_nonimmediate_operand\" \"=rm\")\n+  [(set (match_operand:HI\t       0 \"msp430_general_dst_operand\" \"=rm\")\n \t(ashiftrt:HI (match_operand:HI 1 \"msp430_general_operand\"      \"0\")\n \t\t     (const_int 1)))]\n   \"\"\n@@ -887,23 +892,23 @@\n )\n \n (define_insn \"sral_1\"\n-  [(set (match_operand:SI              0 \"nonimmediate_operand\" \"=rm\")\n+  [(set (match_operand:SI\t       0 \"msp430_general_dst_nonv_operand\" \"=rm\")\n \t(ashiftrt:SI (match_operand:SI 1 \"general_operand\"       \"0\")\n \t\t     (const_int 1)))]\n   \"\"\n   \"RRA%X0.W\\t%H0 { RRC%X0.W\\t%L0\"\n )\n \n (define_insn \"sral_2\"\n-  [(set (match_operand:SI              0 \"nonimmediate_operand\" \"=rm\")\n+  [(set (match_operand:SI\t       0 \"msp430_general_dst_nonv_operand\" \"=rm\")\n \t(ashiftrt:SI (match_operand:SI 1 \"general_operand\"       \"0\")\n \t\t     (const_int 2)))]\n   \"\"\n   \"RRA%X0.W\\t%H0 { RRC%X0.W\\t%L0 { RRA%X0.W\\t%H0 { RRC%X0.W\\t%L0\"\n )\n \n (define_expand \"ashrsi3\"\n-  [(set (match_operand:SI              0 \"nonimmediate_operand\")\n+  [(set (match_operand:SI\t       0 \"msp430_general_dst_nonv_operand\")\n \t(ashiftrt:SI (match_operand:SI 1 \"general_operand\")\n \t\t     (match_operand:SI 2 \"general_operand\")))]\n   \"\"\n@@ -912,7 +917,7 @@\n )\n \n (define_expand \"ashrdi3\"\n-  [(set (match_operand:DI\t     0 \"nonimmediate_operand\")\n+  [(set (match_operand:DI\t     0 \"msp430_general_dst_nonv_operand\")\n \t(ashift:DI (match_operand:DI 1 \"general_operand\")\n \t\t   (match_operand:DI 2 \"general_operand\")))]\n   \"\"\n@@ -928,7 +933,7 @@\n ;; unsigned A >> C\n \n (define_expand \"lshrhi3\"\n-  [(set (match_operand:HI              0 \"nonimmediate_operand\")\n+  [(set (match_operand:HI\t       0 \"msp430_general_dst_nonv_operand\")\n \t(lshiftrt:HI (match_operand:HI 1 \"general_operand\")\n \t\t     (match_operand:HI 2 \"general_operand\")))]\n   \"\"\n@@ -952,7 +957,7 @@\n )\n \n (define_insn \"srli_1\"\n-  [(set (match_operand:HI              0 \"nonimmediate_operand\" \"=rm\")\n+  [(set (match_operand:HI\t       0 \"msp430_general_dst_nonv_operand\" \"=rm\")\n \t(lshiftrt:HI (match_operand:HI 1 \"general_operand\"       \"0\")\n \t\t     (const_int 1)))]\n   \"\"\n@@ -978,23 +983,23 @@\n )\n \n (define_insn \"srll_1\"\n-  [(set (match_operand:SI              0 \"nonimmediate_operand\" \"=rm\")\n+  [(set (match_operand:SI\t       0 \"msp430_general_dst_nonv_operand\" \"=rm\")\n \t(lshiftrt:SI (match_operand:SI 1 \"general_operand\"       \"0\")\n \t\t     (const_int 1)))]\n   \"\"\n   \"CLRC { RRC%X0.W\\t%H0 { RRC%X0.W\\t%L0\"\n )\n \n (define_insn \"srll_2x\"\n-  [(set (match_operand:SI              0 \"nonimmediate_operand\" \"=r\")\n+  [(set (match_operand:SI\t       0 \"msp430_general_dst_nonv_operand\" \"=r\")\n \t(lshiftrt:SI (match_operand:SI 1 \"general_operand\"       \"0\")\n \t\t     (const_int 2)))]\n   \"msp430x\"\n   \"RRUX.W\\t%H0 { RRC.W\\t%L0 { RRUX.W\\t%H0 { RRC.W\\t%L0\"\n )\n \n (define_expand \"lshrsi3\"\n-  [(set (match_operand:SI              0 \"nonimmediate_operand\")\n+  [(set (match_operand:SI\t       0 \"msp430_general_dst_nonv_operand\")\n \t(lshiftrt:SI (match_operand:SI 1 \"general_operand\")\n \t\t     (match_operand:SI 2 \"general_operand\")))]\n   \"\"\n@@ -1003,7 +1008,7 @@\n )\n \n (define_expand \"lshrdi3\"\n-  [(set (match_operand:DI\t     0 \"nonimmediate_operand\")\n+  [(set (match_operand:DI\t     0 \"msp430_general_dst_nonv_operand\")\n \t(ashift:DI (match_operand:DI 1 \"general_operand\")\n \t\t   (match_operand:DI 2 \"general_operand\")))]\n   \"\"\n@@ -1274,7 +1279,7 @@\n \n (define_insn \"*bitbranch<mode>4\"\n   [(set (pc) (if_then_else\n-\t      (ne (and:QHI (match_operand:QHI 0 \"msp430_nonimmediate_operand\" \"rYsYx,rm\")\n+\t      (ne (and:QHI (match_operand:QHI 0 \"msp430_general_dst_operand\" \"rYsYx,rm\")\n \t\t\t   (match_operand:QHI 1 \"msp430_general_operand\" \"rYsYxi,rmi\"))\n \t\t  (const_int 0))\n               (label_ref (match_operand 2 \"\" \"\"))\n@@ -1289,7 +1294,7 @@\n \n (define_insn \"*bitbranch<mode>4\"\n   [(set (pc) (if_then_else\n-\t      (eq (and:QHI (match_operand:QHI 0 \"msp430_nonimmediate_operand\" \"rYsYx,rm\")\n+\t      (eq (and:QHI (match_operand:QHI 0 \"msp430_general_dst_operand\" \"rYsYx,rm\")\n \t\t\t   (match_operand:QHI 1 \"msp430_general_operand\" \"rYsYxi,rmi\"))\n \t\t  (const_int 0))\n               (label_ref (match_operand 2 \"\" \"\"))\n@@ -1304,7 +1309,7 @@\n \n (define_insn \"*bitbranch<mode>4\"\n   [(set (pc) (if_then_else\n-\t      (eq (and:QHI (match_operand:QHI 0 \"msp430_nonimmediate_operand\" \"rYsYx,rm\")\n+\t      (eq (and:QHI (match_operand:QHI 0 \"msp430_general_dst_operand\" \"rYsYx,rm\")\n \t\t\t   (match_operand:QHI 1 \"msp430_general_operand\" \"rYsYxi,rmi\"))\n \t\t  (const_int 0))\n               (pc)\n@@ -1319,7 +1324,7 @@\n \n (define_insn \"*bitbranch<mode>4\"\n   [(set (pc) (if_then_else\n-\t      (ne (and:QHI (match_operand:QHI 0 \"msp430_nonimmediate_operand\" \"rYsYx,rm\")\n+\t      (ne (and:QHI (match_operand:QHI 0 \"msp430_general_dst_operand\" \"rYsYx,rm\")\n \t\t\t   (match_operand:QHI 1 \"msp430_general_operand\" \"rYsYxi,rmi\"))\n \t\t  (const_int 0))\n               (pc)\n@@ -1337,7 +1342,7 @@\n \n (define_insn \"*bitbranch<mode>4_z\"\n   [(set (pc) (if_then_else\n-\t      (ne (zero_extract:HI (match_operand:QHI 0 \"msp430_nonimmediate_operand\" \"rYs,rm\")\n+\t      (ne (zero_extract:HI (match_operand:QHI 0 \"msp430_general_dst_operand\" \"rYs,rm\")\n \t\t\t\t    (const_int 1)\n \t\t\t\t    (match_operand 1 \"msp430_bitpos\" \"i,i\"))\n \t\t  (const_int 0))\n@@ -1353,7 +1358,7 @@\n \n (define_insn \"*bitbranch<mode>4_z\"\n   [(set (pc) (if_then_else\n-\t      (eq (zero_extract:HI (match_operand:QHI 0 \"msp430_nonimmediate_operand\" \"rm\")\n+\t      (eq (zero_extract:HI (match_operand:QHI 0 \"msp430_general_dst_operand\" \"rm\")\n \t\t\t\t   (const_int 1)\n \t\t\t\t   (match_operand 1 \"msp430_bitpos\" \"i\"))\n \t\t  (const_int 0))\n@@ -1367,7 +1372,7 @@\n \n (define_insn \"*bitbranch<mode>4_z\"\n   [(set (pc) (if_then_else\n-\t      (eq (zero_extract:HI (match_operand:QHI 0 \"msp430_nonimmediate_operand\" \"rm\")\n+\t      (eq (zero_extract:HI (match_operand:QHI 0 \"msp430_general_dst_operand\" \"rm\")\n \t\t\t\t   (const_int 1)\n \t\t\t\t   (match_operand 1 \"msp430_bitpos\" \"i\"))\n \t\t  (const_int 0))\n@@ -1381,7 +1386,7 @@\n \n (define_insn \"*bitbranch<mode>4_z\"\n   [(set (pc) (if_then_else\n-\t      (ne (zero_extract:HI (match_operand:QHI 0 \"msp430_nonimmediate_operand\" \"rm\")\n+\t      (ne (zero_extract:HI (match_operand:QHI 0 \"msp430_general_dst_operand\" \"rm\")\n \t\t\t\t   (const_int 1)\n \t\t\t\t   (match_operand 1 \"msp430_bitpos\" \"i\"))\n \t\t  (const_int 0))"}, {"sha": "d8cdaba381367d712b79e20b83c4e4c51e5fb5f4", "filename": "gcc/config/msp430/predicates.md", "status": "modified", "additions": 41, "deletions": 5, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28987d8be6f77e88eedaff727176c7bc1030baac/gcc%2Fconfig%2Fmsp430%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28987d8be6f77e88eedaff727176c7bc1030baac/gcc%2Fconfig%2Fmsp430%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fpredicates.md?ref=28987d8be6f77e88eedaff727176c7bc1030baac", "patch": "@@ -23,21 +23,50 @@\n        (match_test (\"memory_address_addr_space_p (GET_MODE (op), XEXP (op, 0), MEM_ADDR_SPACE (op))\")))\n )\n \n+; TRUE if neither op nor op0 are a post_inc.  We cannot use post_inc for the\n+; dst operand so this must be used for any predicates which might allow a mem.\n+; Since we check both op and op0, this will be FALSE for both \"(post_inc)\" and\n+; \"(mem (post_inc))\"\n+(define_predicate \"msp430_nonpostinc_operand\"\n+  (not (ior (match_code \"post_inc\")\n+\t    (and (ior (match_operand 0 \"msp430_volatile_memory_operand\")\n+\t\t      (match_code \"mem\"))\n+\t\t (match_code \"post_inc\" \"0\")))))\n+\n ; TRUE for any valid general operand.  We do this because\n ; general_operand refuses to match volatile memory refs.\n-\n (define_predicate \"msp430_general_operand\"\n   (ior (match_operand 0 \"general_operand\")\n        (match_operand 0 \"msp430_volatile_memory_operand\"))\n )\n \n ; Likewise for nonimmediate_operand.\n-\n (define_predicate \"msp430_nonimmediate_operand\"\n   (ior (match_operand 0 \"nonimmediate_operand\")\n        (match_operand 0 \"msp430_volatile_memory_operand\"))\n )\n \n+; Similar to msp430_nonimmediate_operand but disallow post_inc operands\n+(define_predicate \"msp430_general_dst_operand\"\n+  (and (match_operand 0 \"msp430_nonpostinc_operand\")\n+       (match_operand 0 \"msp430_nonimmediate_operand\")))\n+\n+; Similar to msp430_general_dst_operand but disallow volatile memory references\n+; Note that msp430_nonpostinc_operand will allow a volatile mem but nonimmediate\n+; will not, so overall this predicate will behave as expected.\n+; The heuristic for deciding if we can allow volatile memory appears to be:\n+;   \"If the number of references to the variable in the source code matches\n+;    the number of references to the variable in the assembly template, we can\n+;    safely allow a volatile memory reference\".\n+;      - paraphrasing DJ Delorie here:\n+;\t https://gcc.gnu.org/ml/gcc-patches/2014-05/msg00870.html\n+; When applied to instruction patterns, this means that we can only allow\n+; volatile memory when the output assembler template contains only one\n+; instruction which references that volatile address.\n+(define_predicate \"msp430_general_dst_nonv_operand\"\n+  (and (match_operand 0 \"msp430_nonpostinc_operand\")\n+       (match_operand 0 \"nonimmediate_operand\")))\n+\n (define_predicate \"ubyte_operand\"\n   (and (match_code \"const_int\")\n        (match_test \"IN_RANGE (INTVAL (op), 0, 255)\")))\n@@ -70,13 +99,20 @@\n \t\t     || INTVAL (op) == ~8\n \t\t     || INTVAL (op) == ~(-1) \"))))\n \n-(define_predicate \"msp430_nonsubreg_operand\"\n-  (match_code \"reg,mem\"))\n+; See above note on post_inc\n+(define_predicate \"msp430_nonsubreg_dst_operand\"\n+  (and (match_operand 0 \"msp430_nonpostinc_operand\")\n+       (match_code \"reg,mem\")))\n \n (define_predicate \"msp430_nonsubreg_or_imm_operand\"\n-  (ior (match_operand 0 \"msp430_nonsubreg_operand\")\n+  (ior (match_code \"reg,mem\")\n        (match_operand 0 \"immediate_operand\")))\n \n+(define_predicate \"msp430_nonsubregnonpostinc_or_imm_operand\"\n+  (and (match_operand 0 \"msp430_nonpostinc_operand\")\n+       (ior (match_code \"reg,mem\")\n+\t    (match_operand 0 \"immediate_operand\"))))\n+\n ; TRUE for constants which are bit positions for zero_extract\n (define_predicate \"msp430_bitpos\"\n   (and (match_code \"const_int\")"}]}