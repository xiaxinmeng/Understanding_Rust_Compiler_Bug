{"sha": "f5c01f5bde72d697dc28a9d9e31e9dfa2209f081", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVjMDFmNWJkZTcyZDY5N2RjMjhhOWQ5ZTMxZTlkZmEyMjA5ZjA4MQ==", "commit": {"author": {"name": "Daniel Carrera", "email": "dcarrera@gmail.com", "date": "2011-06-10T10:22:24Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-06-10T10:22:24Z"}, "message": "trans-decl.c (gfc_build_builtin_function_decls): Updated declaration of caf_sync_all and caf_sync_images.\n\ngcc/fortran/\n2011-06-10  Daniel Carrera  <dcarrera@gmail.com>\n\n        * trans-decl.c (gfc_build_builtin_function_decls):\n        Updated declaration of caf_sync_all and caf_sync_images.\n        * trans-stmt.c (gfc_trans_sync): Function\n        can now handle a \"stat\" variable that has an integer type\n        different from integer_type_node.\n\nlibgfortran/\n2011-06-10  Daniel Carrera  <dcarrera@gmail.com>\n\n        * caf/mpi.c (_gfortran_caf_sync_all,\n        _gfortran_caf_sync_images): Functions have void return type\n        and move status into parameter list.\n        * caf/single.c (_gfortran_caf_sync_all,\n        _gfortran_caf_sync_images): Functions have void return type\n        and move status into parameter list.\n        * caf/libcaf.h (_gfortran_caf_sync_all,\n        _gfortran_caf_sync_images): Functions have void return type\n        and move status into parameter list.\n\ngcc/testsuite/\n2011-06-10  Daniel Carrera  <dcarrera@gmail.com>\n\n        * gfortran.dg/coarray/sync_1.f90: New test for\n        \"SYNC ALL\", \"SYNC MEMORY\" and \"SYNC IMAGES\".\n\nFrom-SVN: r174896", "tree": {"sha": "4d1a49e6b55f66c96e0bf26e86bf290b7017072c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d1a49e6b55f66c96e0bf26e86bf290b7017072c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5c01f5bde72d697dc28a9d9e31e9dfa2209f081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5c01f5bde72d697dc28a9d9e31e9dfa2209f081", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5c01f5bde72d697dc28a9d9e31e9dfa2209f081", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5c01f5bde72d697dc28a9d9e31e9dfa2209f081/comments", "author": {"login": "dcarrera", "id": 89128, "node_id": "MDQ6VXNlcjg5MTI4", "avatar_url": "https://avatars.githubusercontent.com/u/89128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcarrera", "html_url": "https://github.com/dcarrera", "followers_url": "https://api.github.com/users/dcarrera/followers", "following_url": "https://api.github.com/users/dcarrera/following{/other_user}", "gists_url": "https://api.github.com/users/dcarrera/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcarrera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcarrera/subscriptions", "organizations_url": "https://api.github.com/users/dcarrera/orgs", "repos_url": "https://api.github.com/users/dcarrera/repos", "events_url": "https://api.github.com/users/dcarrera/events{/privacy}", "received_events_url": "https://api.github.com/users/dcarrera/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fede8efad0bfa82997fd1ff49f84eb493231ca23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fede8efad0bfa82997fd1ff49f84eb493231ca23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fede8efad0bfa82997fd1ff49f84eb493231ca23"}], "stats": {"total": 278, "additions": 215, "deletions": 63}, "files": [{"sha": "dbfaa7cd5ddc857ec8ba9e07719f28949d418bb8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c01f5bde72d697dc28a9d9e31e9dfa2209f081/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c01f5bde72d697dc28a9d9e31e9dfa2209f081/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f5c01f5bde72d697dc28a9d9e31e9dfa2209f081", "patch": "@@ -1,3 +1,11 @@\n+2011-06-10  Daniel Carrera  <dcarrera@gmail.com>\n+\n+\t* trans-decl.c (gfc_build_builtin_function_decls):\n+\tUpdated declaration of caf_sync_all and caf_sync_images.\n+\t* trans-stmt.c (gfc_trans_sync): Function\n+\tcan now handle a \"stat\" variable that has an integer type\n+\tdifferent from integer_type_node.\n+\n 2011-06-09  Richard Guenther  <rguenther@suse.de>\n \n \t* trans.c (gfc_allocate_array_with_status): Mark error path"}, {"sha": "6c6de133886a0136c2c5ce7823fc222ec920c839", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c01f5bde72d697dc28a9d9e31e9dfa2209f081/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c01f5bde72d697dc28a9d9e31e9dfa2209f081/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=f5c01f5bde72d697dc28a9d9e31e9dfa2209f081", "patch": "@@ -3059,13 +3059,13 @@ gfc_build_builtin_function_decls (void)\n \tget_identifier (PREFIX(\"caf_end_critical\")), void_type_node, 0);\n \n       gfor_fndecl_caf_sync_all = gfc_build_library_function_decl_with_spec (\n-\tget_identifier (PREFIX(\"caf_sync_all\")), \".W\", integer_type_node,\n-\t2, build_pointer_type (pchar_type_node), integer_type_node);\n+\tget_identifier (PREFIX(\"caf_sync_all\")), \".WW\", void_type_node,\n+\t3, pint_type, build_pointer_type (pchar_type_node), integer_type_node);\n \n       gfor_fndecl_caf_sync_images = gfc_build_library_function_decl_with_spec (\n-\tget_identifier (PREFIX(\"caf_sync_images\")), \".RRW\", integer_type_node,\n-\t4, integer_type_node, pint_type, build_pointer_type (pchar_type_node),\n-\tinteger_type_node);\n+\tget_identifier (PREFIX(\"caf_sync_images\")), \".RRWW\", void_type_node,\n+\t5, integer_type_node, pint_type, pint_type,\n+\tbuild_pointer_type (pchar_type_node), integer_type_node);\n \n       gfor_fndecl_caf_error_stop = gfc_build_library_function_decl (\n \tget_identifier (PREFIX(\"caf_error_stop\")),"}, {"sha": "183778f2d68f870627d79543131f1a0b31320743", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 55, "deletions": 12, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c01f5bde72d697dc28a9d9e31e9dfa2209f081/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c01f5bde72d697dc28a9d9e31e9dfa2209f081/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=f5c01f5bde72d697dc28a9d9e31e9dfa2209f081", "patch": "@@ -683,6 +683,8 @@ gfc_trans_sync (gfc_code *code, gfc_exec_op type)\n       gfc_conv_expr_val (&argse, code->expr2);\n       stat = argse.expr;\n     }\n+  else\n+    stat = null_pointer_node;\n \n   if (code->expr3 && gfc_option.coarray == GFC_FCOARRAY_LIB\n       && type != EXEC_SYNC_MEMORY)\n@@ -691,7 +693,7 @@ gfc_trans_sync (gfc_code *code, gfc_exec_op type)\n       gfc_init_se (&argse, NULL);\n       gfc_conv_expr (&argse, code->expr3);\n       gfc_conv_string_parameter (&argse);\n-      errmsg = argse.expr;\n+      errmsg = gfc_build_addr_expr (NULL, argse.expr);\n       errmsglen = argse.string_length;\n     }\n   else if (gfc_option.coarray == GFC_FCOARRAY_LIB && type != EXEC_SYNC_MEMORY)\n@@ -743,12 +745,32 @@ gfc_trans_sync (gfc_code *code, gfc_exec_op type)\n     }\n   else if (type == EXEC_SYNC_ALL)\n     {\n-      tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_sync_all,\n-\t\t\t\t 2, errmsg, errmsglen);\n-      if (code->expr2)\n-\tgfc_add_modify (&se.pre, stat, fold_convert (TREE_TYPE (stat), tmp));\n+      /* SYNC ALL           =>   stat == null_pointer_node\n+\t SYNC ALL(stat=s)   =>   stat has an integer type\n+\n+\t If \"stat\" has the wrong integer type, use a temp variable of\n+\t the right type and later cast the result back into \"stat\".  */\n+      if (stat == null_pointer_node || TREE_TYPE (stat) == integer_type_node)\n+\t{\n+\t  if (TREE_TYPE (stat) == integer_type_node)\n+\t    stat = gfc_build_addr_expr (NULL, stat);\n+\t  \n+\t  tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_sync_all,\n+\t\t\t\t     3, stat, errmsg, errmsglen);\n+\t  gfc_add_expr_to_block (&se.pre, tmp);\n+\t}\n       else\n-\tgfc_add_expr_to_block (&se.pre, tmp);\n+\t{\n+\t  tree tmp_stat = gfc_create_var (integer_type_node, \"stat\");\n+\n+\t  tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_sync_all,\n+\t\t\t\t     3, gfc_build_addr_expr (NULL, tmp_stat),\n+\t\t\t\t     errmsg, errmsglen);\n+\t  gfc_add_expr_to_block (&se.pre, tmp);\n+\t  \n+\t  gfc_add_modify (&se.pre, stat,\n+\t\t\t  fold_convert (TREE_TYPE (stat), tmp_stat));\n+\t}\n     }\n   else\n     {\n@@ -790,13 +812,34 @@ gfc_trans_sync (gfc_code *code, gfc_exec_op type)\n           len = fold_convert (integer_type_node, len);\n \t}\n \n-      tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_sync_images, 4,\n-\t\t\t\t fold_convert (integer_type_node, len), images,\n-\t\t\t\t errmsg, errmsglen);\n-      if (code->expr2)\n-\tgfc_add_modify (&se.pre, stat, fold_convert (TREE_TYPE (stat), tmp));\n+      /* SYNC IMAGES(imgs)        => stat == null_pointer_node\n+\t SYNC IMAGES(imgs,stat=s) => stat has an integer type\n+\n+\t If \"stat\" has the wrong integer type, use a temp variable of\n+\t the right type and later cast the result back into \"stat\".  */\n+      if (stat == null_pointer_node || TREE_TYPE (stat) == integer_type_node)\n+\t{\n+\t  if (TREE_TYPE (stat) == integer_type_node)\n+\t    stat = gfc_build_addr_expr (NULL, stat);\n+\n+\t  tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_sync_images, \n+\t\t\t\t     5, fold_convert (integer_type_node, len),\n+\t\t\t\t     images, stat, errmsg, errmsglen);\n+\t  gfc_add_expr_to_block (&se.pre, tmp);\n+\t}\n       else\n-\tgfc_add_expr_to_block (&se.pre, tmp);\n+\t{\n+\t  tree tmp_stat = gfc_create_var (integer_type_node, \"stat\");\n+\n+\t  tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_sync_images, \n+\t\t\t\t     5, fold_convert (integer_type_node, len),\n+\t\t\t\t     images, gfc_build_addr_expr (NULL, tmp_stat),\n+\t\t\t\t     errmsg, errmsglen);\n+\t  gfc_add_expr_to_block (&se.pre, tmp);\n+\n+\t  gfc_add_modify (&se.pre, stat, \n+\t\t\t  fold_convert (TREE_TYPE (stat), tmp_stat));\n+\t}\n     }\n \n   return gfc_finish_block (&se.pre);"}, {"sha": "a80c3cd4afd7b78a5936c50274071cf9939563f0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c01f5bde72d697dc28a9d9e31e9dfa2209f081/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c01f5bde72d697dc28a9d9e31e9dfa2209f081/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f5c01f5bde72d697dc28a9d9e31e9dfa2209f081", "patch": "@@ -1,3 +1,8 @@\n+2011-06-10  Daniel Carrera  <dcarrera@gmail.com>\n+\n+\t* gfortran.dg/coarray/sync_1.f90: New test for\n+\t\"SYNC ALL\", \"SYNC MEMORY\" and \"SYNC IMAGES\".\n+\n 2011-06-10  Ira Rosen  <ira.rosen@linaro.org>\n \n \tPR tree-optimization/49318"}, {"sha": "7c084e0bf468d08fb27d6e20a2857ae8d40a7eb0", "filename": "gcc/testsuite/gfortran.dg/coarray/sync_1.f90", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c01f5bde72d697dc28a9d9e31e9dfa2209f081/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fsync_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c01f5bde72d697dc28a9d9e31e9dfa2209f081/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fsync_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fsync_1.f90?ref=f5c01f5bde72d697dc28a9d9e31e9dfa2209f081", "patch": "@@ -0,0 +1,64 @@\n+! { dg-do run }\n+! \n+! Coarray support\n+! PR fortran/18918\n+\n+implicit none\n+integer :: n\n+character(len=30) :: str\n+critical\n+end critical\n+myCr: critical\n+end critical myCr\n+\n+!\n+! Test SYNC ALL\n+!\n+sync all\n+sync all ( )\n+sync all (errmsg=str)\n+\n+n = 5\n+sync all (stat=n)\n+if (n /= 0) call abort()\n+\n+n = 5\n+sync all (stat=n,errmsg=str)\n+if (n /= 0) call abort()\n+\n+\n+!\n+! Test SYNC MEMORY\n+!\n+sync memory\n+sync memory ( )\n+sync memory (errmsg=str)\n+\n+n = 5\n+sync memory (stat=n)\n+if (n /= 0) call abort()\n+\n+n = 5\n+sync memory (errmsg=str,stat=n)\n+if (n /= 0) call abort()\n+\n+\n+!\n+! Test SYNC IMAGES\n+!\n+sync images (*)\n+if (this_image() == 1) then\n+    sync images (1)\n+    sync images (1, errmsg=str)\n+    sync images ([1])\n+end if\n+\n+n = 5\n+sync images (*, stat=n)\n+if (n /= 0) call abort()\n+\n+n = 5\n+sync images (*,errmsg=str,stat=n)\n+if (n /= 0) call abort()\n+\n+end"}, {"sha": "bcd62f52c320773fbae9725a466a37eb373014c7", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c01f5bde72d697dc28a9d9e31e9dfa2209f081/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c01f5bde72d697dc28a9d9e31e9dfa2209f081/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=f5c01f5bde72d697dc28a9d9e31e9dfa2209f081", "patch": "@@ -1,3 +1,15 @@\n+2011-06-10  Daniel Carrera  <dcarrera@gmail.com>\n+\n+\t* caf/mpi.c (_gfortran_caf_sync_all,\n+\t_gfortran_caf_sync_images): Functions have void return type\n+\tand move status into parameter list.\n+\t* caf/single.c (_gfortran_caf_sync_all,\n+\t_gfortran_caf_sync_images): Functions have void return type\n+\tand move status into parameter list.\n+\t* caf/libcaf.h (_gfortran_caf_sync_all,\n+\t_gfortran_caf_sync_images): Functions have void return type\n+\tand move status into parameter list.\n+\n 2011-06-03  Richard Henderson  <rth@redhat.com>\n \t    Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n@@ -7,15 +19,15 @@\n \n 2011-05-29  Janne Blomqvist  <jb@gcc.gnu.org>\n \n-        PR libfortran/48931\n-        * libgfortran.h (find_addr2line): New prototype.\n-        * runtime/backtrace.c (show_backtrace): Use async-signal-safe\n-        execve and stored path of addr2line.\n-        * runtime/compile_options.c (maybe_find_addr2line): New function.\n-        (set_options): Call maybe_find_addr2line if backtracing is enabled.\n-        * runtime/main.c (find_addr2line): New function.\n-        (init): Call find_addr2line if backtracing is enabled.\n-        (cleanup): Free addr2line_path.\n+\tPR libfortran/48931\n+\t* libgfortran.h (find_addr2line): New prototype.\n+\t* runtime/backtrace.c (show_backtrace): Use async-signal-safe\n+\texecve and stored path of addr2line.\n+\t* runtime/compile_options.c (maybe_find_addr2line): New function.\n+\t(set_options): Call maybe_find_addr2line if backtracing is enabled.\n+\t* runtime/main.c (find_addr2line): New function.\n+\t(init): Call find_addr2line if backtracing is enabled.\n+\t(cleanup): Free addr2line_path.\n \n 2011-05-29  Janne Blomqvist  <jb@gcc.gnu.org>\n "}, {"sha": "9c20c4e9d781e9d88ef0ad0d2f22e66523cf18a2", "filename": "libgfortran/caf/libcaf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c01f5bde72d697dc28a9d9e31e9dfa2209f081/libgfortran%2Fcaf%2Flibcaf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c01f5bde72d697dc28a9d9e31e9dfa2209f081/libgfortran%2Fcaf%2Flibcaf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Flibcaf.h?ref=f5c01f5bde72d697dc28a9d9e31e9dfa2209f081", "patch": "@@ -54,8 +54,8 @@ void * _gfortran_caf_register (ptrdiff_t, caf_register_t, void **);\n int _gfortran_caf_deregister (void **);\n \n \n-int _gfortran_caf_sync_all (char *, int);\n-int _gfortran_caf_sync_images (int, int[], char *, int);\n+void _gfortran_caf_sync_all (int *, char *, int);\n+void _gfortran_caf_sync_images (int, int[], int *, char *, int);\n \n /* FIXME: The CRITICAL functions should be removed;\n    the functionality is better represented using Coarray's lock feature.  */"}, {"sha": "e64670ea8cb074e49e38062c0ab2425230372ec7", "filename": "libgfortran/caf/mpi.c", "status": "modified", "additions": 46, "deletions": 30, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c01f5bde72d697dc28a9d9e31e9dfa2209f081/libgfortran%2Fcaf%2Fmpi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c01f5bde72d697dc28a9d9e31e9dfa2209f081/libgfortran%2Fcaf%2Fmpi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Fmpi.c?ref=f5c01f5bde72d697dc28a9d9e31e9dfa2209f081", "patch": "@@ -92,41 +92,49 @@ _gfortran_caf_deregister (void **token __attribute__ ((unused)))\n }\n \n \n-/* SYNC ALL - the return value matches Fortran's STAT argument.  */\n-\n-int\n-_gfortran_caf_sync_all (char *errmsg, int errmsg_len)\n+void\n+_gfortran_caf_sync_all (int *stat, char *errmsg, int errmsg_len)\n {\n-  int ierr;\n-  ierr = MPI_Barrier (MPI_COMM_WORLD);\n+  /* TODO: Is ierr correct? When should STAT_STOPPED_IMAGE be used?  */\n+  int ierr = MPI_Barrier (MPI_COMM_WORLD);\n+\n+  if (stat)\n+    *stat = ierr;\n \n-  if (ierr && errmsg_len > 0)\n+  if (ierr)\n     {\n       const char msg[] = \"SYNC ALL failed\";\n-      int len = ((int) sizeof (msg) > errmsg_len) ? errmsg_len\n-\t\t\t\t\t\t  : (int) sizeof (msg);\n-      memcpy (errmsg, msg, len);\n-      if (errmsg_len > len)\n-\tmemset (&errmsg[len], ' ', errmsg_len-len);\n+      if (errmsg_len > 0)\n+\t{\n+\t  int len = ((int) sizeof (msg) > errmsg_len) ? errmsg_len\n+\t\t\t\t\t\t      : (int) sizeof (msg);\n+\t  memcpy (errmsg, msg, len);\n+\t  if (errmsg_len > len)\n+\t    memset (&errmsg[len], ' ', errmsg_len-len);\n+\t}\n+      else\n+\t{\n+\t  fprintf (stderr, \"SYNC ALL failed\\n\");\n+\t  error_stop (ierr);\n+\t}\n     }\n-\n-  /* TODO: Is ierr correct? When should STAT_STOPPED_IMAGE be used?  */\n-  return ierr;\n }\n \n \n /* SYNC IMAGES. Note: SYNC IMAGES(*) is passed as count == -1 while\n    SYNC IMAGES([]) has count == 0. Note further that SYNC IMAGES(*)\n-   is not equivalent to SYNC ALL.  The return value matches Fortran's\n-   STAT argument.  */\n-int\n-_gfortran_caf_sync_images (int count, int images[], char *errmsg,\n+   is not equivalent to SYNC ALL. */\n+void\n+_gfortran_caf_sync_images (int count, int images[], int *stat, char *errmsg,\n \t\t\t   int errmsg_len)\n {\n   int ierr;\n-\n   if (count == 0 || (count == 1 && images[0] == caf_this_image))\n-    return 0;\n+    {\n+      if (stat)\n+\t*stat = 0;\n+      return;\n+    }\n \n #ifdef GFC_CAF_CHECK\n   {\n@@ -151,20 +159,28 @@ _gfortran_caf_sync_images (int count, int images[], char *errmsg,\n     }\n \n   /* Handle SYNC IMAGES(*).  */\n+  /* TODO: Is ierr correct? When should STAT_STOPPED_IMAGE be used?  */\n   ierr = MPI_Barrier (MPI_COMM_WORLD);\n+  if (stat)\n+    *stat = ierr;\n \n-  if (ierr && errmsg_len > 0)\n+  if (ierr)\n     {\n       const char msg[] = \"SYNC IMAGES failed\";\n-      int len = ((int) sizeof (msg) > errmsg_len) ? errmsg_len\n-\t\t\t\t\t\t  : (int) sizeof (msg);\n-      memcpy (errmsg, msg, len);\n-      if (errmsg_len > len)\n-\tmemset (&errmsg[len], ' ', errmsg_len-len);\n+      if (errmsg_len > 0)\n+\t{\n+\t  int len = ((int) sizeof (msg) > errmsg_len) ? errmsg_len\n+\t\t\t\t\t\t      : (int) sizeof (msg);\n+\t  memcpy (errmsg, msg, len);\n+\t  if (errmsg_len > len)\n+\t    memset (&errmsg[len], ' ', errmsg_len-len);\n+\t}\n+      else\n+\t{\n+\t  fprintf (stderr, \"SYNC IMAGES failed\\n\");\n+\t  error_stop (ierr);\n+\t}\n     }\n-\n-  /* TODO: Is ierr correct? When should STAT_STOPPED_IMAGE be used?  */\n-  return ierr;\n }\n \n "}, {"sha": "4c46e47d35ccff887882519385def7e94819cc2d", "filename": "libgfortran/caf/single.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c01f5bde72d697dc28a9d9e31e9dfa2209f081/libgfortran%2Fcaf%2Fsingle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c01f5bde72d697dc28a9d9e31e9dfa2209f081/libgfortran%2Fcaf%2Fsingle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Fsingle.c?ref=f5c01f5bde72d697dc28a9d9e31e9dfa2209f081", "patch": "@@ -69,16 +69,19 @@ _gfortran_caf_deregister (void **token __attribute__ ((unused)))\n }\n \n \n-int\n-_gfortran_caf_sync_all (char *errmsg __attribute__ ((unused)),\n+void\n+_gfortran_caf_sync_all (int *stat,\n+\t\t\tchar *errmsg __attribute__ ((unused)),\n \t\t\tint errmsg_len __attribute__ ((unused)))\n {\n-  return 0;\n+  if (stat)\n+    *stat = 0;\n }\n \n-int\n+void\n _gfortran_caf_sync_images (int count __attribute__ ((unused)),\n \t\t\t   int images[] __attribute__ ((unused)),\n+\t\t\t   int *stat,\n \t\t\t   char *errmsg __attribute__ ((unused)),\n \t\t\t   int errmsg_len __attribute__ ((unused)))\n {\n@@ -94,7 +97,8 @@ _gfortran_caf_sync_images (int count __attribute__ ((unused)),\n       }\n #endif\n \n-  return 0;\n+  if (stat)\n+    *stat = 0;\n }\n \n "}]}