{"sha": "1c960e02e70a5dce595b909867d888206da010a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM5NjBlMDJlNzBhNWRjZTU5NWI5MDk4NjdkODg4MjA2ZGEwMTBhNQ==", "commit": {"author": {"name": "Marcus Shawcroft", "email": "marcus.shawcroft@arm.com", "date": "2014-06-05T13:19:44Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2014-06-05T13:19:44Z"}, "message": "[AArch64] Add frame_size and hard_fp_offset to machine.frame\n\nFrom-SVN: r211275", "tree": {"sha": "9b13e1d65f2053cf31324ea269dd219493af9c5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b13e1d65f2053cf31324ea269dd219493af9c5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c960e02e70a5dce595b909867d888206da010a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c960e02e70a5dce595b909867d888206da010a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c960e02e70a5dce595b909867d888206da010a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c960e02e70a5dce595b909867d888206da010a5/comments", "author": {"login": "mshawcroft", "id": 6357566, "node_id": "MDQ6VXNlcjYzNTc1NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6357566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mshawcroft", "html_url": "https://github.com/mshawcroft", "followers_url": "https://api.github.com/users/mshawcroft/followers", "following_url": "https://api.github.com/users/mshawcroft/following{/other_user}", "gists_url": "https://api.github.com/users/mshawcroft/gists{/gist_id}", "starred_url": "https://api.github.com/users/mshawcroft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mshawcroft/subscriptions", "organizations_url": "https://api.github.com/users/mshawcroft/orgs", "repos_url": "https://api.github.com/users/mshawcroft/repos", "events_url": "https://api.github.com/users/mshawcroft/events{/privacy}", "received_events_url": "https://api.github.com/users/mshawcroft/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "95cc0a1aca2eaf2303ab49d09ce4525ece4fd3e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95cc0a1aca2eaf2303ab49d09ce4525ece4fd3e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95cc0a1aca2eaf2303ab49d09ce4525ece4fd3e6"}], "stats": {"total": 112, "additions": 59, "deletions": 53}, "files": [{"sha": "7f70e2b8828403022176e00a490318090fbbb087", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c960e02e70a5dce595b909867d888206da010a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c960e02e70a5dce595b909867d888206da010a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c960e02e70a5dce595b909867d888206da010a5", "patch": "@@ -3,6 +3,18 @@\n \t* tree-inline.c (tree_function_versioning): Check DF info existence\n \tbefore accessing it.\n \n+2014-06-05  Marcus Shawcroft  <marcus.shawcroft@arm.com>\n+\n+\t* config/aarch64/aarch64.h (aarch64_frame): Add hard_fp_offset and\n+\tframe_size.\n+\t* config/aarch64/aarch64.c (aarch64_layout_frame): Initialize\n+\taarch64_frame hard_fp_offset and frame_size.\n+\t(aarch64_expand_prologue): Use aarch64_frame hard_fp_offset and\n+\tframe_size; remove original_frame_size.\n+\t(aarch64_expand_epilogue, aarch64_final_eh_return_addr): Likewise.\n+\t(aarch64_initial_elimination_offset): Remove frame_size and\n+\toffset.  Use aarch64_frame frame_size.\n+\n 2014-06-05  Marcus Shawcroft  <marcus.shawcroft@arm.com>\n \t    Jiong Wang  <jiong.wang@arm.com>\n "}, {"sha": "621692e4f7998bb1c2ceafea4226efa9ddb7167b", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 36, "deletions": 53, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c960e02e70a5dce595b909867d888206da010a5/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c960e02e70a5dce595b909867d888206da010a5/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=1c960e02e70a5dce595b909867d888206da010a5", "patch": "@@ -1868,6 +1868,18 @@ aarch64_layout_frame (void)\n   offset = AARCH64_ROUND_UP (offset, STACK_BOUNDARY / BITS_PER_UNIT);\n \n   cfun->machine->frame.saved_regs_size = offset;\n+\n+  cfun->machine->frame.hard_fp_offset\n+    = AARCH64_ROUND_UP (cfun->machine->frame.saved_varargs_size\n+\t\t\t+ get_frame_size ()\n+\t\t\t+ cfun->machine->frame.saved_regs_size,\n+\t\t\tSTACK_BOUNDARY / BITS_PER_UNIT);\n+\n+  cfun->machine->frame.frame_size\n+    = AARCH64_ROUND_UP (cfun->machine->frame.hard_fp_offset\n+\t\t\t+ crtl->outgoing_args_size,\n+\t\t\tSTACK_BOUNDARY / BITS_PER_UNIT);\n+\n   cfun->machine->frame.laid_out = true;\n }\n \n@@ -2118,26 +2130,20 @@ aarch64_expand_prologue (void)\n \n      sub sp, sp, <final_adjustment_if_any>\n   */\n-  HOST_WIDE_INT original_frame_size;\t/* local variables + vararg save */\n   HOST_WIDE_INT frame_size, offset;\n-  HOST_WIDE_INT fp_offset;\t\t/* FP offset from SP */\n+  HOST_WIDE_INT fp_offset;\t\t/* Offset from hard FP to SP.  */\n   rtx insn;\n \n   aarch64_layout_frame ();\n-  original_frame_size = get_frame_size () + cfun->machine->frame.saved_varargs_size;\n-  gcc_assert ((!cfun->machine->frame.saved_varargs_size || cfun->stdarg)\n-\t      && (cfun->stdarg || !cfun->machine->frame.saved_varargs_size));\n-  frame_size = (original_frame_size + cfun->machine->frame.saved_regs_size\n-\t\t+ crtl->outgoing_args_size);\n-  offset = frame_size = AARCH64_ROUND_UP (frame_size,\n-\t\t\t\t\t  STACK_BOUNDARY / BITS_PER_UNIT);\n \n   if (flag_stack_usage_info)\n-    current_function_static_stack_size = frame_size;\n+    current_function_static_stack_size = cfun->machine->frame.frame_size;\n+\n+  frame_size = cfun->machine->frame.frame_size;\n+  offset = cfun->machine->frame.frame_size;\n \n-  fp_offset = (offset\n-\t       - original_frame_size\n-\t       - cfun->machine->frame.saved_regs_size);\n+  fp_offset = cfun->machine->frame.frame_size\n+\t      - cfun->machine->frame.hard_fp_offset;\n \n   /* Store pairs and load pairs have a range only -512 to 504.  */\n   if (offset >= 512)\n@@ -2148,7 +2154,7 @@ aarch64_expand_prologue (void)\n \t register area.  This will allow the pre-index write-back\n \t store pair instructions to be used for setting up the stack frame\n \t efficiently.  */\n-      offset = original_frame_size + cfun->machine->frame.saved_regs_size;\n+      offset = cfun->machine->frame.hard_fp_offset;\n       if (offset >= 512)\n \toffset = cfun->machine->frame.saved_regs_size;\n \n@@ -2284,28 +2290,23 @@ aarch64_expand_prologue (void)\n void\n aarch64_expand_epilogue (bool for_sibcall)\n {\n-  HOST_WIDE_INT original_frame_size, frame_size, offset;\n+  HOST_WIDE_INT frame_size, offset;\n   HOST_WIDE_INT fp_offset;\n   rtx insn;\n   rtx cfa_reg;\n \n   aarch64_layout_frame ();\n-  original_frame_size = get_frame_size () + cfun->machine->frame.saved_varargs_size;\n-  frame_size = (original_frame_size + cfun->machine->frame.saved_regs_size\n-\t\t+ crtl->outgoing_args_size);\n-  offset = frame_size = AARCH64_ROUND_UP (frame_size,\n-\t\t\t\t\t  STACK_BOUNDARY / BITS_PER_UNIT);\n \n-  fp_offset = (offset\n-\t       - original_frame_size\n-\t       - cfun->machine->frame.saved_regs_size);\n+  offset = frame_size = cfun->machine->frame.frame_size;\n+  fp_offset = cfun->machine->frame.frame_size\n+\t      - cfun->machine->frame.hard_fp_offset;\n \n   cfa_reg = frame_pointer_needed ? hard_frame_pointer_rtx : stack_pointer_rtx;\n \n   /* Store pairs and load pairs have a range only -512 to 504.  */\n   if (offset >= 512)\n     {\n-      offset = original_frame_size + cfun->machine->frame.saved_regs_size;\n+      offset = cfun->machine->frame.hard_fp_offset;\n       if (offset >= 512)\n \toffset = cfun->machine->frame.saved_regs_size;\n \n@@ -2487,16 +2488,12 @@ aarch64_expand_epilogue (bool for_sibcall)\n rtx\n aarch64_final_eh_return_addr (void)\n {\n-  HOST_WIDE_INT original_frame_size, frame_size, offset, fp_offset;\n+  HOST_WIDE_INT fp_offset;\n+\n   aarch64_layout_frame ();\n-  original_frame_size = get_frame_size () + cfun->machine->frame.saved_varargs_size;\n-  frame_size = (original_frame_size + cfun->machine->frame.saved_regs_size\n-\t\t+ crtl->outgoing_args_size);\n-  offset = frame_size = AARCH64_ROUND_UP (frame_size,\n-\t\t\t\t\t  STACK_BOUNDARY / BITS_PER_UNIT);\n-  fp_offset = offset\n-    - original_frame_size\n-    - cfun->machine->frame.saved_regs_size;\n+\n+  fp_offset = cfun->machine->frame.frame_size\n+\t      - cfun->machine->frame.hard_fp_offset;\n \n   if (cfun->machine->frame.reg_offset[LR_REGNUM] < 0)\n     return gen_rtx_REG (DImode, LR_REGNUM);\n@@ -4246,42 +4243,28 @@ aarch64_can_eliminate (const int from, const int to)\n HOST_WIDE_INT\n aarch64_initial_elimination_offset (unsigned from, unsigned to)\n {\n-  HOST_WIDE_INT frame_size;\n-  HOST_WIDE_INT offset;\n-\n   aarch64_layout_frame ();\n-  frame_size = (get_frame_size () + cfun->machine->frame.saved_regs_size\n-\t\t+ crtl->outgoing_args_size\n-\t\t+ cfun->machine->frame.saved_varargs_size);\n-\n-  frame_size = AARCH64_ROUND_UP (frame_size, STACK_BOUNDARY / BITS_PER_UNIT);\n-  offset = frame_size;\n \n   if (to == HARD_FRAME_POINTER_REGNUM)\n     {\n       if (from == ARG_POINTER_REGNUM)\n-\treturn offset - crtl->outgoing_args_size;\n+\treturn cfun->machine->frame.frame_size - crtl->outgoing_args_size;\n \n       if (from == FRAME_POINTER_REGNUM)\n-\treturn cfun->machine->frame.saved_regs_size + get_frame_size ();\n+\treturn (cfun->machine->frame.hard_fp_offset\n+\t\t- cfun->machine->frame.saved_varargs_size);\n     }\n \n   if (to == STACK_POINTER_REGNUM)\n     {\n       if (from == FRAME_POINTER_REGNUM)\n-\t{\n-\t  HOST_WIDE_INT elim = crtl->outgoing_args_size\n-\t    + cfun->machine->frame.saved_regs_size\n-\t    + get_frame_size ();\n-\t  elim = AARCH64_ROUND_UP (elim, STACK_BOUNDARY / BITS_PER_UNIT);\n-\t  return elim;\n-\t}\n+\t  return (cfun->machine->frame.frame_size\n+\t\t  - cfun->machine->frame.saved_varargs_size);\n     }\n \n-  return offset;\n+  return cfun->machine->frame.frame_size;\n }\n \n-\n /* Implement RETURN_ADDR_RTX.  We do not support moving back to a\n    previous frame.  */\n "}, {"sha": "ae94356f3aef97f9f9e07d49a6cda69ea159cdf7", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c960e02e70a5dce595b909867d888206da010a5/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c960e02e70a5dce595b909867d888206da010a5/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=1c960e02e70a5dce595b909867d888206da010a5", "patch": "@@ -527,6 +527,17 @@ struct GTY (()) aarch64_frame\n   HOST_WIDE_INT padding0;\n   HOST_WIDE_INT hardfp_offset;\t/* HARD_FRAME_POINTER_REGNUM */\n \n+  /* Offset from the base of the frame (incomming SP) to the\n+     hard_frame_pointer.  This value is always a multiple of\n+     STACK_BOUNDARY.  */\n+  HOST_WIDE_INT hard_fp_offset;\n+\n+  /* The size of the frame.  This value is the offset from base of the\n+   * frame (incomming SP) to the stack_pointer.  This value is always\n+   * a multiple of STACK_BOUNDARY.  */\n+\n+  HOST_WIDE_INT frame_size;\n+\n   bool laid_out;\n };\n "}]}