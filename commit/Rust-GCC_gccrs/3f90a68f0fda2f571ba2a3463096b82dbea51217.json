{"sha": "3f90a68f0fda2f571ba2a3463096b82dbea51217", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y5MGE2OGYwZmRhMmY1NzFiYTJhMzQ2MzA5NmI4MmRiZWE1MTIxNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-05-17T12:06:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-05-17T12:06:44Z"}, "message": "tree-ssa-sccvn.c (vn_reference_lookup_3): Improve memset handling.\n\n2018-05-17  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Improve memset handling.\n\n\t* gcc.dg/tree-ssa/ssa-fre-63.c: New testcase.\n\nFrom-SVN: r260318", "tree": {"sha": "8a4f99dc14271f8125acec10e5b00b17aafa6262", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a4f99dc14271f8125acec10e5b00b17aafa6262"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f90a68f0fda2f571ba2a3463096b82dbea51217", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f90a68f0fda2f571ba2a3463096b82dbea51217", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f90a68f0fda2f571ba2a3463096b82dbea51217", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f90a68f0fda2f571ba2a3463096b82dbea51217/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bb4e47476537f6431fbbf29cc804252b1504bbc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb4e47476537f6431fbbf29cc804252b1504bbc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb4e47476537f6431fbbf29cc804252b1504bbc2"}], "stats": {"total": 91, "additions": 81, "deletions": 10}, "files": [{"sha": "8a800a775ce0fbc1179939b7d0b507246a2f940f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f90a68f0fda2f571ba2a3463096b82dbea51217/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f90a68f0fda2f571ba2a3463096b82dbea51217/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f90a68f0fda2f571ba2a3463096b82dbea51217", "patch": "@@ -1,3 +1,7 @@\n+2018-05-17  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Improve memset handling.\n+\n 2018-05-17  Bin Cheng  <bin.cheng@arm.com>\n \t    Richard Biener  <rguenther@suse.de>\n "}, {"sha": "2139976c9f090342435f1bf4b10b15a9bdb619b4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f90a68f0fda2f571ba2a3463096b82dbea51217/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f90a68f0fda2f571ba2a3463096b82dbea51217/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3f90a68f0fda2f571ba2a3463096b82dbea51217", "patch": "@@ -1,3 +1,7 @@\n+2018-05-17  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/ssa-fre-63.c: New testcase.\n+\n 2018-05-17  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/85793"}, {"sha": "39e8c08cef9bf8ce48558d185d7733941873a637", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-63.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f90a68f0fda2f571ba2a3463096b82dbea51217/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-63.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f90a68f0fda2f571ba2a3463096b82dbea51217/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-63.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-63.c?ref=3f90a68f0fda2f571ba2a3463096b82dbea51217", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-fre1-stats\" } */\n+\n+int foo(char *x)\n+{\n+  __builtin_memset (&x[1], 'c', 42);\n+  return x[0] + x[1] + x[42] + x[43];\n+}\n+\n+/* We should eliminate x[1] and x[42] and their conversions to int.  */\n+/* { dg-final { scan-tree-dump \"Eliminated: 4\" \"fre1\" } } */"}, {"sha": "39de866a8ce7a17a7df43f423bae82c376e8c140", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 62, "deletions": 10, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f90a68f0fda2f571ba2a3463096b82dbea51217/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f90a68f0fda2f571ba2a3463096b82dbea51217/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=3f90a68f0fda2f571ba2a3463096b82dbea51217", "patch": "@@ -1958,23 +1958,75 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n      1) Memset.  */\n   if (is_gimple_reg_type (vr->type)\n       && gimple_call_builtin_p (def_stmt, BUILT_IN_MEMSET)\n-      && integer_zerop (gimple_call_arg (def_stmt, 1))\n+      && (integer_zerop (gimple_call_arg (def_stmt, 1))\n+\t  || (INTEGRAL_TYPE_P (vr->type) && known_eq (ref->size, 8)))\n       && poly_int_tree_p (gimple_call_arg (def_stmt, 2))\n-      && TREE_CODE (gimple_call_arg (def_stmt, 0)) == ADDR_EXPR)\n+      && (TREE_CODE (gimple_call_arg (def_stmt, 0)) == ADDR_EXPR\n+\t  || TREE_CODE (gimple_call_arg (def_stmt, 0)) == SSA_NAME))\n     {\n-      tree ref2 = TREE_OPERAND (gimple_call_arg (def_stmt, 0), 0);\n       tree base2;\n       poly_int64 offset2, size2, maxsize2;\n       bool reverse;\n-      base2 = get_ref_base_and_extent (ref2, &offset2, &size2, &maxsize2,\n-\t\t\t\t       &reverse);\n+      tree ref2 = gimple_call_arg (def_stmt, 0);\n+      if (TREE_CODE (ref2) == SSA_NAME)\n+\t{\n+\t  ref2 = SSA_VAL (ref2);\n+\t  if (TREE_CODE (ref2) == SSA_NAME\n+\t      && (TREE_CODE (base) != MEM_REF\n+\t\t  || TREE_OPERAND (base, 0) != ref2))\n+\t    {\n+\t      gimple *def_stmt = SSA_NAME_DEF_STMT (ref2);\n+\t      if (gimple_assign_single_p (def_stmt)\n+\t\t  && gimple_assign_rhs_code (def_stmt) == ADDR_EXPR)\n+\t\tref2 = gimple_assign_rhs1 (def_stmt);\n+\t    }\n+\t}\n+      if (TREE_CODE (ref2) == ADDR_EXPR)\n+\t{\n+\t  ref2 = TREE_OPERAND (ref2, 0);\n+\t  base2 = get_ref_base_and_extent (ref2, &offset2, &size2, &maxsize2,\n+\t\t\t\t\t   &reverse);\n+\t  if (!known_size_p (maxsize2)\n+\t      || !operand_equal_p (base, base2, OEP_ADDRESS_OF))\n+\t    return (void *)-1;\n+\t}\n+      else if (TREE_CODE (ref2) == SSA_NAME)\n+\t{\n+\t  poly_int64 soff;\n+\t  if (TREE_CODE (base) != MEM_REF\n+\t      || !(mem_ref_offset (base) << LOG2_BITS_PER_UNIT).to_shwi (&soff))\n+\t    return (void *)-1;\n+\t  offset += soff;\n+\t  offset2 = 0;\n+\t  if (TREE_OPERAND (base, 0) != ref2)\n+\t    {\n+\t      gimple *def = SSA_NAME_DEF_STMT (ref2);\n+\t      if (is_gimple_assign (def)\n+\t\t  && gimple_assign_rhs_code (def) == POINTER_PLUS_EXPR\n+\t\t  && gimple_assign_rhs1 (def) == TREE_OPERAND (base, 0)\n+\t\t  && poly_int_tree_p (gimple_assign_rhs2 (def))\n+\t\t  && (wi::to_poly_offset (gimple_assign_rhs2 (def))\n+\t\t      << LOG2_BITS_PER_UNIT).to_shwi (&offset2))\n+\t\t{\n+\t\t  ref2 = gimple_assign_rhs1 (def);\n+\t\t  if (TREE_CODE (ref2) == SSA_NAME)\n+\t\t    ref2 = SSA_VAL (ref2);\n+\t\t}\n+\t      else\n+\t\treturn (void *)-1;\n+\t    }\n+\t}\n+      else\n+\treturn (void *)-1;\n       tree len = gimple_call_arg (def_stmt, 2);\n-      if (known_size_p (maxsize2)\n-\t  && operand_equal_p (base, base2, 0)\n-\t  && known_subrange_p (offset, maxsize, offset2,\n-\t\t\t       wi::to_poly_offset (len) << LOG2_BITS_PER_UNIT))\n+      if (known_subrange_p (offset, maxsize, offset2,\n+\t\t\t    wi::to_poly_offset (len) << LOG2_BITS_PER_UNIT))\n \t{\n-\t  tree val = build_zero_cst (vr->type);\n+\t  tree val;\n+\t  if (integer_zerop (gimple_call_arg (def_stmt, 1)))\n+\t    val = build_zero_cst (vr->type);\n+\t  else\n+\t    val = fold_convert (vr->type, gimple_call_arg (def_stmt, 1));\n \t  return vn_reference_lookup_or_insert_for_pieces\n \t           (vuse, vr->set, vr->type, vr->operands, val);\n \t}"}]}