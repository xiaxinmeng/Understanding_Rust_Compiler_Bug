{"sha": "9c6230e90ee2ca50f5807aa7d90fc4a832667a9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM2MjMwZTkwZWUyY2E1MGY1ODA3YWE3ZDkwZmM0YTgzMjY2N2E5Zg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-11-30T17:14:50Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-11-30T17:14:50Z"}, "message": "reflect: Fix MakeFunc for 386 when returning a struct.\n\nWhen a 386 function returns a struct, it needs to return using\nan rtd instruction that pops the hidden struct parameter off\nthe stack.  That wasn't happening.\n\nFrom-SVN: r205551", "tree": {"sha": "e9b39d376e3efb4a85b2fa99e5b1a7789d167acd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9b39d376e3efb4a85b2fa99e5b1a7789d167acd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c6230e90ee2ca50f5807aa7d90fc4a832667a9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6230e90ee2ca50f5807aa7d90fc4a832667a9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c6230e90ee2ca50f5807aa7d90fc4a832667a9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6230e90ee2ca50f5807aa7d90fc4a832667a9f/comments", "author": null, "committer": null, "parents": [{"sha": "67aca9dfae0e68af581a7e43332d49a9fdf498c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67aca9dfae0e68af581a7e43332d49a9fdf498c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67aca9dfae0e68af581a7e43332d49a9fdf498c5"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "20e542b062b6b2f4f394794b8b4db254943e8098", "filename": "libgo/go/reflect/makefunc_386.S", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6230e90ee2ca50f5807aa7d90fc4a832667a9f/libgo%2Fgo%2Freflect%2Fmakefunc_386.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6230e90ee2ca50f5807aa7d90fc4a832667a9f/libgo%2Fgo%2Freflect%2Fmakefunc_386.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Fmakefunc_386.S?ref=9c6230e90ee2ca50f5807aa7d90fc4a832667a9f", "patch": "@@ -26,8 +26,11 @@ reflect.makeFuncStub:\n \t     esp uint32\t\t// 0x0\n \t     eax uint32\t\t// 0x4\n \t     st0 uint64\t\t// 0x8\n+\t     rs  int32\t\t// 0x10\n \t   }\n-\t*/\n+\t   The rs field is set by the function to a non-zero value if\n+\t   the function takes a struct hidden pointer that must be\n+\t   popped off the stack.  */\n \n \tpushl\t%ebp\n .LCFI0:\n@@ -73,12 +76,19 @@ reflect.makeFuncStub:\n \tmovsd\t-16(%ebp), %xmm0\n #endif\n \n+\tmovl\t-8(%ebp), %edx\n+\n \taddl\t$36, %esp\n \tpopl\t%ebx\n .LCFI3:\n \tpopl\t%ebp\n .LCFI4:\n+\n+\ttestl\t%edx,%edx\n+\tjne\t1f\n \tret\n+1:\n+\tret\t$4\n .LFE1:\n #ifdef __ELF__\n \t.size\treflect.makeFuncStub, . - reflect.makeFuncStub"}, {"sha": "7559af6f6acc6f6a9ed5906c10d72950d09e6f45", "filename": "libgo/go/reflect/makefuncgo_386.go", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6230e90ee2ca50f5807aa7d90fc4a832667a9f/libgo%2Fgo%2Freflect%2Fmakefuncgo_386.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6230e90ee2ca50f5807aa7d90fc4a832667a9f/libgo%2Fgo%2Freflect%2Fmakefuncgo_386.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Fmakefuncgo_386.go?ref=9c6230e90ee2ca50f5807aa7d90fc4a832667a9f", "patch": "@@ -16,6 +16,7 @@ type i386Regs struct {\n \tesp uint32\n \teax uint32 // Value to return in %eax.\n \tst0 uint64 // Value to return in %st(0).\n+\tsr  int32  // Set to non-zero if hidden struct pointer.\n }\n \n // MakeFuncStubGo implements the 386 calling convention for MakeFunc.\n@@ -56,10 +57,12 @@ func MakeFuncStubGo(regs *i386Regs, c *makeFuncImpl) {\n \tin := make([]Value, 0, len(ftyp.in))\n \tap := uintptr(regs.esp)\n \n+\tregs.sr = 0\n \tvar retPtr unsafe.Pointer\n \tif retStruct {\n \t\tretPtr = *(*unsafe.Pointer)(unsafe.Pointer(ap))\n \t\tap += ptrSize\n+\t\tregs.sr = 1\n \t}\n \n \tfor _, rt := range ftyp.in {"}]}