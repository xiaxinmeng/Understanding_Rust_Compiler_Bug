{"sha": "f2b11865fe81940d2061a924c3428a7915897fe9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJiMTE4NjVmZTgxOTQwZDIwNjFhOTI0YzM0MjhhNzkxNTg5N2ZlOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-08-30T17:16:29Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-08-30T17:16:29Z"}, "message": "re PR middle-end/45423 (#pragma omp atomic on bool has issues)\n\n\tPR middle-end/45423\n\t* gimplify.c (goa_stabilize_expr): Handle TRUTH_NOT_EXPR\n\tand TRUTH_{AND,OR,XOR}_EXPR.\n\t* c-parser.c (c_parser_omp_atomic): Handle boolean\n\t{PRE,POST}_{INC,DEC}REMENT.\ncp/\n\t* parser.c (cp_parser_omp_atomic): Handle boolean\n\t{PRE,POST}_INCREMENT.\ntestsuite/\n\t* gcc.dg/gomp/atomic-12.c: New test.\n\t* gcc.dg/gomp/atomic-13.c: New test.\n\t* gcc.dg/gomp/atomic-14.c: New test.\n\t* g++.dg/gomp/atomic-11.C: New test.\n\t* g++.dg/gomp/atomic-12.C: New test.\n\t* g++.dg/gomp/atomic-13.C: New test.\n\t* g++.dg/gomp/atomic-14.C: New test.\n\nFrom-SVN: r163653", "tree": {"sha": "266d290f0a93cf7641282147388454e9d5f59918", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/266d290f0a93cf7641282147388454e9d5f59918"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2b11865fe81940d2061a924c3428a7915897fe9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2b11865fe81940d2061a924c3428a7915897fe9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2b11865fe81940d2061a924c3428a7915897fe9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2b11865fe81940d2061a924c3428a7915897fe9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bd9c7fb90927f0f22e6bbbb5f809bb8e5f6eaa95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd9c7fb90927f0f22e6bbbb5f809bb8e5f6eaa95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd9c7fb90927f0f22e6bbbb5f809bb8e5f6eaa95"}], "stats": {"total": 826, "additions": 826, "deletions": 0}, "files": [{"sha": "fe0a0d5b321e0eeec66685c2f3187ed0bd138f6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b11865fe81940d2061a924c3428a7915897fe9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b11865fe81940d2061a924c3428a7915897fe9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2b11865fe81940d2061a924c3428a7915897fe9", "patch": "@@ -1,3 +1,11 @@\n+2010-08-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/45423\n+\t* gimplify.c (goa_stabilize_expr): Handle TRUTH_NOT_EXPR\n+\tand TRUTH_{AND,OR,XOR}_EXPR.\n+\t* c-parser.c (c_parser_omp_atomic): Handle boolean\n+\t{PRE,POST}_{INC,DEC}REMENT.\n+\n 2010-08-30  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/xtensa/xtensa-protos.h (function_arg_advance): Delete."}, {"sha": "13e63502f322139d7f177be674fdb5730466cc10", "filename": "gcc/c-parser.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b11865fe81940d2061a924c3428a7915897fe9/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b11865fe81940d2061a924c3428a7915897fe9/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=f2b11865fe81940d2061a924c3428a7915897fe9", "patch": "@@ -8004,6 +8004,42 @@ c_parser_omp_atomic (location_t loc, c_parser *parser)\n       rhs = integer_one_node;\n       break;\n \n+    case COMPOUND_EXPR:\n+      if (TREE_CODE (TREE_OPERAND (lhs, 0)) == SAVE_EXPR\n+\t  && TREE_CODE (TREE_OPERAND (lhs, 1)) == COMPOUND_EXPR\n+\t  && TREE_CODE (TREE_OPERAND (TREE_OPERAND (lhs, 1), 0)) == MODIFY_EXPR\n+\t  && TREE_OPERAND (TREE_OPERAND (lhs, 1), 1) == TREE_OPERAND (lhs, 0)\n+\t  && TREE_CODE (TREE_TYPE (TREE_OPERAND (TREE_OPERAND\n+\t\t\t\t\t      (TREE_OPERAND (lhs, 1), 0), 0)))\n+\t     == BOOLEAN_TYPE)\n+\t/* Undo effects of boolean_increment for post {in,de}crement.  */\n+\tlhs = TREE_OPERAND (TREE_OPERAND (lhs, 1), 0);\n+      /* FALLTHRU */\n+    case MODIFY_EXPR:\n+      if (TREE_CODE (lhs) == MODIFY_EXPR\n+\t  && TREE_CODE (TREE_TYPE (TREE_OPERAND (lhs, 0))) == BOOLEAN_TYPE)\n+\t{\n+\t  /* Undo effects of boolean_increment.  */\n+\t  if (integer_onep (TREE_OPERAND (lhs, 1)))\n+\t    {\n+\t      /* This is pre or post increment.  */\n+\t      rhs = TREE_OPERAND (lhs, 1);\n+\t      lhs = TREE_OPERAND (lhs, 0);\n+\t      code = NOP_EXPR;\n+\t      break;\n+\t    }\n+\t  if (TREE_CODE (TREE_OPERAND (lhs, 1)) == TRUTH_NOT_EXPR\n+\t      && TREE_OPERAND (lhs, 0)\n+\t\t == TREE_OPERAND (TREE_OPERAND (lhs, 1), 0))\n+\t    {\n+\t      /* This is pre or post decrement.  */\n+\t      rhs = TREE_OPERAND (lhs, 1);\n+\t      lhs = TREE_OPERAND (lhs, 0);\n+\t      code = NOP_EXPR;\n+\t      break;\n+\t    }\n+\t}\n+      /* FALLTHRU */\n     default:\n       switch (c_parser_peek_token (parser)->type)\n \t{"}, {"sha": "de8575c0717dde833da01c70af2673eba91c55d1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b11865fe81940d2061a924c3428a7915897fe9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b11865fe81940d2061a924c3428a7915897fe9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f2b11865fe81940d2061a924c3428a7915897fe9", "patch": "@@ -1,3 +1,9 @@\n+2010-08-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/45423\n+\t* parser.c (cp_parser_omp_atomic): Handle boolean\n+\t{PRE,POST}_INCREMENT.\n+\n 2010-08-29  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/44991"}, {"sha": "769d7dcacad42e83203ee88a8da22292d760585a", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b11865fe81940d2061a924c3428a7915897fe9/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b11865fe81940d2061a924c3428a7915897fe9/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=f2b11865fe81940d2061a924c3428a7915897fe9", "patch": "@@ -22494,6 +22494,32 @@ cp_parser_omp_atomic (cp_parser *parser, cp_token *pragma_tok)\n       rhs = integer_one_node;\n       break;\n \n+    case COMPOUND_EXPR:\n+      if (TREE_CODE (TREE_OPERAND (lhs, 0)) == SAVE_EXPR\n+\t && TREE_CODE (TREE_OPERAND (lhs, 1)) == COMPOUND_EXPR\n+\t && TREE_CODE (TREE_OPERAND (TREE_OPERAND (lhs, 1), 0)) == MODIFY_EXPR\n+\t && TREE_OPERAND (TREE_OPERAND (lhs, 1), 1) == TREE_OPERAND (lhs, 0)\n+\t && TREE_CODE (TREE_TYPE (TREE_OPERAND (TREE_OPERAND\n+\t\t\t\t\t     (TREE_OPERAND (lhs, 1), 0), 0)))\n+\t    == BOOLEAN_TYPE)\n+       /* Undo effects of boolean_increment for post {in,de}crement.  */\n+       lhs = TREE_OPERAND (TREE_OPERAND (lhs, 1), 0);\n+      /* FALLTHRU */\n+    case MODIFY_EXPR:\n+      if (TREE_CODE (lhs) == MODIFY_EXPR\n+\t && TREE_CODE (TREE_TYPE (TREE_OPERAND (lhs, 0))) == BOOLEAN_TYPE)\n+       {\n+\t /* Undo effects of boolean_increment.  */\n+\t if (integer_onep (TREE_OPERAND (lhs, 1)))\n+\t   {\n+\t     /* This is pre or post increment.  */\n+\t     rhs = TREE_OPERAND (lhs, 1);\n+\t     lhs = TREE_OPERAND (lhs, 0);\n+\t     code = NOP_EXPR;\n+\t     break;\n+\t   }\n+       }\n+      /* FALLTHRU */\n     default:\n       switch (cp_lexer_peek_token (parser->lexer)->type)\n \t{"}, {"sha": "897fe1301b8379f9a0d4d58ab091c7f8ec018297", "filename": "gcc/gimplify.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b11865fe81940d2061a924c3428a7915897fe9/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b11865fe81940d2061a924c3428a7915897fe9/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=f2b11865fe81940d2061a924c3428a7915897fe9", "patch": "@@ -6405,8 +6405,12 @@ goa_stabilize_expr (tree *expr_p, gimple_seq *pre_p, tree lhs_addr,\n \t{\n \tcase TRUTH_ANDIF_EXPR:\n \tcase TRUTH_ORIF_EXPR:\n+\tcase TRUTH_AND_EXPR:\n+\tcase TRUTH_OR_EXPR:\n+\tcase TRUTH_XOR_EXPR:\n \t  saw_lhs |= goa_stabilize_expr (&TREE_OPERAND (expr, 1), pre_p,\n \t\t\t\t\t lhs_addr, lhs_var);\n+\tcase TRUTH_NOT_EXPR:\n \t  saw_lhs |= goa_stabilize_expr (&TREE_OPERAND (expr, 0), pre_p,\n \t\t\t\t\t lhs_addr, lhs_var);\n \t  break;"}, {"sha": "62d329b6a06b8af28ea164fcd50fbc12c479e25a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b11865fe81940d2061a924c3428a7915897fe9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b11865fe81940d2061a924c3428a7915897fe9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f2b11865fe81940d2061a924c3428a7915897fe9", "patch": "@@ -1,3 +1,14 @@\n+2010-08-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/45423\n+\t* gcc.dg/gomp/atomic-12.c: New test.\n+\t* gcc.dg/gomp/atomic-13.c: New test.\n+\t* gcc.dg/gomp/atomic-14.c: New test.\n+\t* g++.dg/gomp/atomic-11.C: New test.\n+\t* g++.dg/gomp/atomic-12.C: New test.\n+\t* g++.dg/gomp/atomic-13.C: New test.\n+\t* g++.dg/gomp/atomic-14.C: New test.\n+\n 2010-08-30  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* g++.dg/debug/dwarf2/nested-2.C: Allow for single / as comment"}, {"sha": "618c4c8e6480774acf00df6310967c44eb7e3444", "filename": "gcc/testsuite/g++.dg/gomp/atomic-11.C", "status": "added", "additions": 306, "deletions": 0, "changes": 306, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b11865fe81940d2061a924c3428a7915897fe9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fatomic-11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b11865fe81940d2061a924c3428a7915897fe9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fatomic-11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fatomic-11.C?ref=f2b11865fe81940d2061a924c3428a7915897fe9", "patch": "@@ -0,0 +1,306 @@\n+/* PR middle-end/45423 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp -fdump-tree-gimple -g0\" } */\n+/* atomicvar should never be referenced in between the barrier and\n+   following #pragma omp atomic_load.  */\n+/* { dg-final { scan-tree-dump-not \"barrier\\[^#\\]*atomicvar\" \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */\n+\n+#ifdef __cplusplus\n+bool atomicvar, c;\n+#else\n+_Bool atomicvar, c;\n+#endif\n+int i, atomicvar2, c2;\n+\n+int\n+foo (void)\n+{\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar |= -1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar |= 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar |= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar |= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar |= c;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar ^= -1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar ^= 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar ^= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar ^= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar ^= c;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar &= -1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar &= 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar &= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar &= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar &= c;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar += -1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar += 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar += 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar += 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar += c;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar -= -1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar -= 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar -= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar -= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar -= c;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar *= -1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar *= 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar *= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar *= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar *= c;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar /= -1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar /= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar /= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar /= c;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar <<= 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar <<= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar <<= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar <<= i;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar >>= 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar >>= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar >>= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar >>= i;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar++;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    ++atomicvar;\n+  #pragma omp barrier\n+#ifndef __cplusplus\n+  #pragma omp atomic\n+    atomicvar--;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    --atomicvar;\n+  #pragma omp barrier\n+#endif\n+  return 0;\n+}\n+\n+int\n+bar (void)\n+{\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 |= -1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 |= 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 |= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 |= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 |= c2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 ^= -1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 ^= 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 ^= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 ^= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 ^= c2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 &= -1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 &= 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 &= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 &= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 &= c2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 += -1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 += 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 += 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 += 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 += c2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 -= -1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 -= 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 -= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 -= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 -= c2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 *= -1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 *= 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 *= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 *= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 *= c2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 /= -1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 /= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 /= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 /= c2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 <<= 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 <<= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 <<= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 <<= i;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 >>= 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 >>= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 >>= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 >>= i;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2++;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    ++atomicvar2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2--;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    --atomicvar2;\n+  #pragma omp barrier\n+  return 0;\n+}"}, {"sha": "6c1f965021dd8bd3b5a667e1c27b49d5a4d23309", "filename": "gcc/testsuite/g++.dg/gomp/atomic-12.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b11865fe81940d2061a924c3428a7915897fe9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fatomic-12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b11865fe81940d2061a924c3428a7915897fe9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fatomic-12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fatomic-12.C?ref=f2b11865fe81940d2061a924c3428a7915897fe9", "patch": "@@ -0,0 +1,9 @@\n+/* PR middle-end/45423 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp -fdump-tree-gimple -g0 -O2\" } */\n+/* atomicvar should never be referenced in between the barrier and\n+   following #pragma omp atomic_load.  */\n+/* { dg-final { scan-tree-dump-not \"barrier\\[^#\\]*atomicvar\" \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */\n+\n+#include \"atomic-11.C\""}, {"sha": "f8fc9d87257ab5a2c38a09fad6146009d93b5cb2", "filename": "gcc/testsuite/g++.dg/gomp/atomic-13.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b11865fe81940d2061a924c3428a7915897fe9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fatomic-13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b11865fe81940d2061a924c3428a7915897fe9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fatomic-13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fatomic-13.C?ref=f2b11865fe81940d2061a924c3428a7915897fe9", "patch": "@@ -0,0 +1,43 @@\n+/* PR middle-end/45423 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp\" } */\n+\n+#ifdef __cplusplus\n+bool *baz ();\n+#else\n+_Bool *baz ();\n+#endif\n+int *bar ();\n+\n+int\n+foo (void)\n+{\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    (*bar ())++;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    ++(*bar ());\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    (*bar ())--;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    --(*bar ());\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    (*baz ())++;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    ++(*baz ());\n+#ifndef __cplusplus\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    (*baz ())--;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    --(*baz ());\n+  #pragma omp barrier\n+#endif\n+  return 0;\n+}"}, {"sha": "ae1eb50dcd63146cd3b4d25c5be8b2e9c9b62b64", "filename": "gcc/testsuite/g++.dg/gomp/atomic-14.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b11865fe81940d2061a924c3428a7915897fe9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fatomic-14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b11865fe81940d2061a924c3428a7915897fe9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fatomic-14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fatomic-14.C?ref=f2b11865fe81940d2061a924c3428a7915897fe9", "patch": "@@ -0,0 +1,19 @@\n+// PR middle-end/45423\n+// { dg-do compile }\n+// { dg-options \"-fopenmp\" }\n+\n+bool *baz (), atomicvar;\n+\n+int\n+foo (void)\n+{\n+  #pragma omp atomic\n+    (*baz ())--;\t// { dg-error \"invalid use of Boolean\" }\n+  #pragma omp atomic\n+    --(*baz ());\t// { dg-error \"invalid use of Boolean\" }\n+  #pragma omp atomic\n+    atomicvar--;\t// { dg-error \"invalid use of Boolean\" }\n+  #pragma omp atomic\n+    --atomicvar;\t// { dg-error \"invalid use of Boolean\" }\n+  return 0;\n+}"}, {"sha": "618c4c8e6480774acf00df6310967c44eb7e3444", "filename": "gcc/testsuite/gcc.dg/gomp/atomic-12.c", "status": "added", "additions": 306, "deletions": 0, "changes": 306, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b11865fe81940d2061a924c3428a7915897fe9/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fatomic-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b11865fe81940d2061a924c3428a7915897fe9/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fatomic-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fatomic-12.c?ref=f2b11865fe81940d2061a924c3428a7915897fe9", "patch": "@@ -0,0 +1,306 @@\n+/* PR middle-end/45423 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp -fdump-tree-gimple -g0\" } */\n+/* atomicvar should never be referenced in between the barrier and\n+   following #pragma omp atomic_load.  */\n+/* { dg-final { scan-tree-dump-not \"barrier\\[^#\\]*atomicvar\" \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */\n+\n+#ifdef __cplusplus\n+bool atomicvar, c;\n+#else\n+_Bool atomicvar, c;\n+#endif\n+int i, atomicvar2, c2;\n+\n+int\n+foo (void)\n+{\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar |= -1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar |= 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar |= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar |= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar |= c;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar ^= -1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar ^= 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar ^= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar ^= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar ^= c;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar &= -1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar &= 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar &= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar &= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar &= c;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar += -1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar += 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar += 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar += 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar += c;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar -= -1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar -= 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar -= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar -= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar -= c;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar *= -1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar *= 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar *= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar *= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar *= c;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar /= -1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar /= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar /= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar /= c;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar <<= 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar <<= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar <<= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar <<= i;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar >>= 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar >>= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar >>= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar >>= i;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar++;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    ++atomicvar;\n+  #pragma omp barrier\n+#ifndef __cplusplus\n+  #pragma omp atomic\n+    atomicvar--;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    --atomicvar;\n+  #pragma omp barrier\n+#endif\n+  return 0;\n+}\n+\n+int\n+bar (void)\n+{\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 |= -1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 |= 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 |= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 |= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 |= c2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 ^= -1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 ^= 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 ^= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 ^= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 ^= c2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 &= -1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 &= 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 &= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 &= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 &= c2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 += -1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 += 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 += 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 += 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 += c2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 -= -1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 -= 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 -= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 -= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 -= c2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 *= -1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 *= 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 *= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 *= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 *= c2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 /= -1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 /= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 /= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 /= c2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 <<= 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 <<= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 <<= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 <<= i;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 >>= 0;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 >>= 1;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 >>= 2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2 >>= i;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2++;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    ++atomicvar2;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    atomicvar2--;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    --atomicvar2;\n+  #pragma omp barrier\n+  return 0;\n+}"}, {"sha": "0146825f2bb285e6b28170be5c7b58d2a74661f1", "filename": "gcc/testsuite/gcc.dg/gomp/atomic-13.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b11865fe81940d2061a924c3428a7915897fe9/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fatomic-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b11865fe81940d2061a924c3428a7915897fe9/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fatomic-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fatomic-13.c?ref=f2b11865fe81940d2061a924c3428a7915897fe9", "patch": "@@ -0,0 +1,9 @@\n+/* PR middle-end/45423 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp -fdump-tree-gimple -g0 -O2\" } */\n+/* atomicvar should never be referenced in between the barrier and\n+   following #pragma omp atomic_load.  */\n+/* { dg-final { scan-tree-dump-not \"barrier\\[^#\\]*atomicvar\" \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */\n+\n+#include \"atomic-12.c\""}, {"sha": "f8fc9d87257ab5a2c38a09fad6146009d93b5cb2", "filename": "gcc/testsuite/gcc.dg/gomp/atomic-14.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b11865fe81940d2061a924c3428a7915897fe9/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fatomic-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b11865fe81940d2061a924c3428a7915897fe9/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fatomic-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fatomic-14.c?ref=f2b11865fe81940d2061a924c3428a7915897fe9", "patch": "@@ -0,0 +1,43 @@\n+/* PR middle-end/45423 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp\" } */\n+\n+#ifdef __cplusplus\n+bool *baz ();\n+#else\n+_Bool *baz ();\n+#endif\n+int *bar ();\n+\n+int\n+foo (void)\n+{\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    (*bar ())++;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    ++(*bar ());\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    (*bar ())--;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    --(*bar ());\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    (*baz ())++;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    ++(*baz ());\n+#ifndef __cplusplus\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    (*baz ())--;\n+  #pragma omp barrier\n+  #pragma omp atomic\n+    --(*baz ());\n+  #pragma omp barrier\n+#endif\n+  return 0;\n+}"}]}