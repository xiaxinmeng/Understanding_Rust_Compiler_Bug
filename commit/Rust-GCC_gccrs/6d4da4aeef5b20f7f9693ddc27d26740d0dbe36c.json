{"sha": "6d4da4aeef5b20f7f9693ddc27d26740d0dbe36c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ0ZGE0YWVlZjViMjBmN2Y5NjkzZGRjMjdkMjY3NDBkMGRiZTM2Yw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-07-20T04:15:16Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-07-20T04:22:56Z"}, "message": "i386: Remove atomic_storedi_fpu and atomic_loaddi_fpu peepholes [PR100182]\n\nThese patterns result in non-atomic sequence.\n\n2021-07-21  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\tPR target/100182\n\t* config/i386/sync.md (define_peephole2 atomic_storedi_fpu):\n\tRemove.\n\t(define_peephole2 atomic_loaddi_fpu): Ditto.\n\ngcc/testsuite/\n\tPR target/100182\n\t* gcc.target/i386/pr71245-1.c: Remove.\n\t* gcc.target/i386/pr71245-2.c: Ditto.", "tree": {"sha": "77b4a7d4a10fd063d004a974c688685984e6aab6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77b4a7d4a10fd063d004a974c688685984e6aab6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d4da4aeef5b20f7f9693ddc27d26740d0dbe36c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d4da4aeef5b20f7f9693ddc27d26740d0dbe36c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d4da4aeef5b20f7f9693ddc27d26740d0dbe36c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d4da4aeef5b20f7f9693ddc27d26740d0dbe36c/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e695f0101a8cacbc29353c5a000731e50b2627e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e695f0101a8cacbc29353c5a000731e50b2627e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e695f0101a8cacbc29353c5a000731e50b2627e6"}], "stats": {"total": 196, "additions": 0, "deletions": 196}, "files": [{"sha": "05a835256bb470ee008503a295915665953ef77e", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 0, "deletions": 152, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d4da4aeef5b20f7f9693ddc27d26740d0dbe36c/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d4da4aeef5b20f7f9693ddc27d26740d0dbe36c/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=6d4da4aeef5b20f7f9693ddc27d26740d0dbe36c", "patch": "@@ -219,82 +219,6 @@\n   DONE;\n })\n \n-(define_peephole2\n-  [(set (match_operand:DF 0 \"fp_register_operand\")\n-\t(unspec:DF [(match_operand:DI 1 \"memory_operand\")]\n-\t\t   UNSPEC_FILD_ATOMIC))\n-   (set (match_operand:DI 2 \"memory_operand\")\n-\t(unspec:DI [(match_dup 0)]\n-\t\t   UNSPEC_FIST_ATOMIC))\n-   (set (match_operand:DF 3 \"sse_reg_operand\")\n-\t(match_operand:DF 4 \"memory_operand\"))]\n-  \"!TARGET_64BIT\n-   && peep2_reg_dead_p (2, operands[0])\n-   && rtx_equal_p (XEXP (operands[4], 0), XEXP (operands[2], 0))\"\n-  [(set (match_dup 3) (match_dup 5))\n-   (set (match_dup 4) (match_dup 3))]\n-  \"operands[5] = gen_lowpart (DFmode, operands[1]);\")\n-\n-(define_peephole2\n-  [(set (match_operand:DF 0 \"fp_register_operand\")\n-\t(unspec:DF [(match_operand:DI 1 \"memory_operand\")]\n-\t\t   UNSPEC_FILD_ATOMIC))\n-   (set (match_operand:DI 2 \"memory_operand\")\n-\t(unspec:DI [(match_dup 0)]\n-\t\t   UNSPEC_FIST_ATOMIC))\n-   (set (mem:BLK (scratch:SI))\n-\t(unspec:BLK [(mem:BLK (scratch:SI))] UNSPEC_MEMORY_BLOCKAGE))\n-   (set (match_operand:DF 3 \"sse_reg_operand\")\n-\t(match_operand:DF 4 \"memory_operand\"))]\n-  \"!TARGET_64BIT\n-   && peep2_reg_dead_p (2, operands[0])\n-   && rtx_equal_p (XEXP (operands[4], 0), XEXP (operands[2], 0))\"\n-  [(const_int 0)]\n-{\n-  emit_move_insn (operands[3], gen_lowpart (DFmode, operands[1]));\n-  emit_move_insn (operands[4], operands[3]);\n-  emit_insn (gen_memory_blockage ());\n-  DONE;\n-})\n-\n-(define_peephole2\n-  [(set (match_operand:DF 0 \"sse_reg_operand\")\n-\t(unspec:DF [(match_operand:DI 1 \"memory_operand\")]\n-\t\t   UNSPEC_LDX_ATOMIC))\n-   (set (match_operand:DI 2 \"memory_operand\")\n-\t(unspec:DI [(match_dup 0)]\n-\t\t   UNSPEC_STX_ATOMIC))\n-   (set (match_operand:DF 3 \"sse_reg_operand\")\n-\t(match_operand:DF 4 \"memory_operand\"))]\n-  \"!TARGET_64BIT\n-   && peep2_reg_dead_p (2, operands[0])\n-   && rtx_equal_p (XEXP (operands[4], 0), XEXP (operands[2], 0))\"\n-  [(set (match_dup 3) (match_dup 5))\n-   (set (match_dup 4) (match_dup 3))]\n-  \"operands[5] = gen_lowpart (DFmode, operands[1]);\")\n-\n-(define_peephole2\n-  [(set (match_operand:DF 0 \"sse_reg_operand\")\n-\t(unspec:DF [(match_operand:DI 1 \"memory_operand\")]\n-\t\t   UNSPEC_LDX_ATOMIC))\n-   (set (match_operand:DI 2 \"memory_operand\")\n-\t(unspec:DI [(match_dup 0)]\n-\t\t   UNSPEC_STX_ATOMIC))\n-   (set (mem:BLK (scratch:SI))\n-\t(unspec:BLK [(mem:BLK (scratch:SI))] UNSPEC_MEMORY_BLOCKAGE))\n-   (set (match_operand:DF 3 \"sse_reg_operand\")\n-\t(match_operand:DF 4 \"memory_operand\"))]\n-  \"!TARGET_64BIT\n-   && peep2_reg_dead_p (2, operands[0])\n-   && rtx_equal_p (XEXP (operands[4], 0), XEXP (operands[2], 0))\"\n-  [(const_int 0)]\n-{\n-  emit_move_insn (operands[3], gen_lowpart (DFmode, operands[1]));\n-  emit_move_insn (operands[4], operands[3]);\n-  emit_insn (gen_memory_blockage ());\n-  DONE;\n-})\n-\n (define_expand \"atomic_store<mode>\"\n   [(set (match_operand:ATOMIC 0 \"memory_operand\")\n \t(unspec:ATOMIC [(match_operand:ATOMIC 1 \"nonimmediate_operand\")\n@@ -384,82 +308,6 @@\n   DONE;\n })\n \n-(define_peephole2\n-  [(set (match_operand:DF 0 \"memory_operand\")\n-\t(match_operand:DF 1 \"any_fp_register_operand\"))\n-   (set (match_operand:DF 2 \"fp_register_operand\")\n-\t(unspec:DF [(match_operand:DI 3 \"memory_operand\")]\n-\t\t   UNSPEC_FILD_ATOMIC))\n-   (set (match_operand:DI 4 \"memory_operand\")\n-\t(unspec:DI [(match_dup 2)]\n-\t\t   UNSPEC_FIST_ATOMIC))]\n-  \"!TARGET_64BIT\n-   && peep2_reg_dead_p (3, operands[2])\n-   && rtx_equal_p (XEXP (operands[0], 0), XEXP (operands[3], 0))\"\n-  [(set (match_dup 0) (match_dup 1))\n-   (set (match_dup 5) (match_dup 1))]\n-  \"operands[5] = gen_lowpart (DFmode, operands[4]);\")\n-\n-(define_peephole2\n-  [(set (match_operand:DF 0 \"memory_operand\")\n-\t(match_operand:DF 1 \"any_fp_register_operand\"))\n-   (set (mem:BLK (scratch:SI))\n-\t(unspec:BLK [(mem:BLK (scratch:SI))] UNSPEC_MEMORY_BLOCKAGE))\n-   (set (match_operand:DF 2 \"fp_register_operand\")\n-\t(unspec:DF [(match_operand:DI 3 \"memory_operand\")]\n-\t\t   UNSPEC_FILD_ATOMIC))\n-   (set (match_operand:DI 4 \"memory_operand\")\n-\t(unspec:DI [(match_dup 2)]\n-\t\t   UNSPEC_FIST_ATOMIC))]\n-  \"!TARGET_64BIT\n-   && peep2_reg_dead_p (4, operands[2])\n-   && rtx_equal_p (XEXP (operands[0], 0), XEXP (operands[3], 0))\"\n-  [(const_int 0)]\n-{\n-  emit_move_insn (operands[0], operands[1]);\n-  emit_insn (gen_memory_blockage ());\n-  emit_move_insn (gen_lowpart (DFmode, operands[4]), operands[1]);\n-  DONE;\n-})\n-\n-(define_peephole2\n-  [(set (match_operand:DF 0 \"memory_operand\")\n-\t(match_operand:DF 1 \"any_fp_register_operand\"))\n-   (set (match_operand:DF 2 \"sse_reg_operand\")\n-\t(unspec:DF [(match_operand:DI 3 \"memory_operand\")]\n-\t\t   UNSPEC_LDX_ATOMIC))\n-   (set (match_operand:DI 4 \"memory_operand\")\n-\t(unspec:DI [(match_dup 2)]\n-\t\t   UNSPEC_STX_ATOMIC))]\n-  \"!TARGET_64BIT\n-   && peep2_reg_dead_p (3, operands[2])\n-   && rtx_equal_p (XEXP (operands[0], 0), XEXP (operands[3], 0))\"\n-  [(set (match_dup 0) (match_dup 1))\n-   (set (match_dup 5) (match_dup 1))]\n-  \"operands[5] = gen_lowpart (DFmode, operands[4]);\")\n-\n-(define_peephole2\n-  [(set (match_operand:DF 0 \"memory_operand\")\n-\t(match_operand:DF 1 \"any_fp_register_operand\"))\n-   (set (mem:BLK (scratch:SI))\n-\t(unspec:BLK [(mem:BLK (scratch:SI))] UNSPEC_MEMORY_BLOCKAGE))\n-   (set (match_operand:DF 2 \"sse_reg_operand\")\n-\t(unspec:DF [(match_operand:DI 3 \"memory_operand\")]\n-\t\t   UNSPEC_LDX_ATOMIC))\n-   (set (match_operand:DI 4 \"memory_operand\")\n-\t(unspec:DI [(match_dup 2)]\n-\t\t   UNSPEC_STX_ATOMIC))]\n-  \"!TARGET_64BIT\n-   && peep2_reg_dead_p (4, operands[2])\n-   && rtx_equal_p (XEXP (operands[0], 0), XEXP (operands[3], 0))\"\n-  [(const_int 0)]\n-{\n-  emit_move_insn (operands[0], operands[1]);\n-  emit_insn (gen_memory_blockage ());\n-  emit_move_insn (gen_lowpart (DFmode, operands[4]), operands[1]);\n-  DONE;\n-})\n-\n ;; ??? You'd think that we'd be able to perform this via FLOAT + FIX_TRUNC\n ;; operations.  But the fix_trunc patterns want way more setup than we want\n ;; to provide.  Note that the scratch is DFmode instead of XFmode in order"}, {"sha": "02c0dcb80b6591ca0610618bf6db6e764a344564", "filename": "gcc/testsuite/gcc.target/i386/pr71245-1.c", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e695f0101a8cacbc29353c5a000731e50b2627e6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71245-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e695f0101a8cacbc29353c5a000731e50b2627e6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71245-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71245-1.c?ref=e695f0101a8cacbc29353c5a000731e50b2627e6", "patch": "@@ -1,22 +0,0 @@\n-/* PR target/71245 */\n-/* { dg-do compile { target ia32 } } */\n-/* { dg-options \"-O2 -march=pentium -mno-sse -mfpmath=387\" } */\n-\n-typedef union\n-{\n-  unsigned long long ll;\n-  double d;\n-} u_t;\n-\n-u_t d = { .d = 5.0 };\n-\n-void foo_d (void)\n-{\n-  u_t tmp;\n-  \n-  tmp.ll = __atomic_load_n (&d.ll, __ATOMIC_SEQ_CST);\n-  tmp.d += 1.0;\n-  __atomic_store_n (&d.ll, tmp.ll, __ATOMIC_SEQ_CST);\n-}\n-\n-/* { dg-final { scan-assembler-not \"(fistp|fild)\" { xfail *-*-* } } } */"}, {"sha": "bf37a8cbb7138265d3df78beaee817fdb9c56335", "filename": "gcc/testsuite/gcc.target/i386/pr71245-2.c", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e695f0101a8cacbc29353c5a000731e50b2627e6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71245-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e695f0101a8cacbc29353c5a000731e50b2627e6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71245-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71245-2.c?ref=e695f0101a8cacbc29353c5a000731e50b2627e6", "patch": "@@ -1,22 +0,0 @@\n-/* PR target/71245 */\n-/* { dg-do compile { target ia32 } } */\n-/* { dg-options \"-O2 -march=pentium -msse -mno-sse2 -mfpmath=387\" } */\n-\n-typedef union\n-{\n-  unsigned long long ll;\n-  double d;\n-} u_t;\n-\n-u_t d = { .d = 5.0 };\n-\n-void foo_d (void)\n-{\n-  u_t tmp;\n-  \n-  tmp.ll = __atomic_load_n (&d.ll, __ATOMIC_SEQ_CST);\n-  tmp.d += 1.0;\n-  __atomic_store_n (&d.ll, tmp.ll, __ATOMIC_SEQ_CST);\n-}\n-\n-/* { dg-final { scan-assembler-not \"movlps\" { xfail *-*-* } } } */"}]}