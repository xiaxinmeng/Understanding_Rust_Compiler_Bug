{"sha": "5885facb34b9ff108395caff9ce19584a6d93826", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg4NWZhY2IzNGI5ZmYxMDgzOTVjYWZmOWNlMTk1ODRhNmQ5MzgyNg==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@act-europe.fr", "date": "2004-10-04T14:50:08Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-10-04T14:50:08Z"}, "message": "exp_dist.adb: Split declaration of asynchronous flag out of Add_RACW_Read_Attribute.\n\n2004-10-04  Thomas Quinot  <quinot@act-europe.fr>\n\n\t* exp_dist.adb: Split declaration of asynchronous flag out of\n\tAdd_RACW_Read_Attribute.\n\tMinor reformatting for better alignment with PolyORB version.\n\tStore the entity for the asynchronous flag of an RACW, rather than the\n\texpression, in the asynchronous flags table. This will allow this flag\n\tto be used in other subprograms beside Add_RACW_Read_Attribute.\n\nFrom-SVN: r88486", "tree": {"sha": "572c94db27608505a2ffc5f1f99d15342e69be1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/572c94db27608505a2ffc5f1f99d15342e69be1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5885facb34b9ff108395caff9ce19584a6d93826", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5885facb34b9ff108395caff9ce19584a6d93826", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5885facb34b9ff108395caff9ce19584a6d93826", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5885facb34b9ff108395caff9ce19584a6d93826/comments", "author": null, "committer": null, "parents": [{"sha": "d6c7ed5017ae925f18acde16f02f9a0ed2f1b960", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6c7ed5017ae925f18acde16f02f9a0ed2f1b960", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6c7ed5017ae925f18acde16f02f9a0ed2f1b960"}], "stats": {"total": 167, "additions": 107, "deletions": 60}, "files": [{"sha": "48ffeb950dab0cedc0f795e5d17114df0ff55514", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5885facb34b9ff108395caff9ce19584a6d93826/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5885facb34b9ff108395caff9ce19584a6d93826/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5885facb34b9ff108395caff9ce19584a6d93826", "patch": "@@ -1,3 +1,12 @@\n+2004-10-04  Thomas Quinot  <quinot@act-europe.fr>\n+\n+\t* exp_dist.adb: Split declaration of asynchronous flag out of\n+\tAdd_RACW_Read_Attribute.\n+\tMinor reformatting for better alignment with PolyORB version.\n+\tStore the entity for the asynchronous flag of an RACW, rather than the\n+\texpression, in the asynchronous flags table. This will allow this flag\n+\tto be used in other subprograms beside Add_RACW_Read_Attribute.\n+\n 2004-10-04  Thomas Quinot  <quinot@act-europe.fr>\n \n \t* g-socket.ads, g-socket.adb, g-socthi.adb, socket.c,"}, {"sha": "e52483fe28d2ddfd2a7c680a5f5d69d9a9f0118e", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 98, "deletions": 60, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5885facb34b9ff108395caff9ce19584a6d93826/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5885facb34b9ff108395caff9ce19584a6d93826/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=5885facb34b9ff108395caff9ce19584a6d93826", "patch": "@@ -131,7 +131,7 @@ package body Exp_Dist is\n       Is_Known_Non_Asynchronous : Boolean := False;\n       Is_Function               : Boolean;\n       Spec                      : Node_Id;\n-      Object_Type               : Entity_Id := Empty;\n+      Stub_Type                 : Entity_Id := Empty;\n       Nod                       : Node_Id);\n    --  Build calling stubs for general purpose. The parameters are:\n    --    Decls             : a place to put declarations\n@@ -147,10 +147,10 @@ package body Exp_Dist is\n    --    Is_Known_Non_A... : True if we know that this is not asynchronous\n    --    Spec              : a node with a Parameter_Specifications and\n    --                        a Subtype_Mark if applicable\n-   --    Object_Type       : in case of a RACW, parameters of type access to\n-   --                        Object_Type will be marshalled using the\n-   --                        address of this object (the addr field) rather\n-   --                        than using the 'Write on the object itself\n+   --    Stub_Type         : in case of RACW stubs, parameters of type access\n+   --                        to Stub_Type will be marshalled using the\n+   --                        address of the object (the addr field) rather\n+   --                        than using the 'Write on the stub itself\n    --    Nod               : used to provide sloc for generated code\n \n    function Build_Subprogram_Calling_Stubs\n@@ -292,13 +292,13 @@ package body Exp_Dist is\n \n    package Asynchronous_Flags_Table is\n       new Simple_HTable (Header_Num => Hash_Index,\n-                         Element    => Node_Id,\n+                         Element    => Entity_Id,\n                          No_Element => Empty,\n                          Key        => Entity_Id,\n                          Hash       => Hash,\n                          Equal      => \"=\");\n-   --  Mapping between a RACW type and the node holding the value True if\n-   --  the RACW is asynchronous and False otherwise.\n+   --  Mapping between a RACW type and a constant having the value True\n+   --  if the RACW is asynchronous and False otherwise.\n \n    package RCI_Locator_Table is\n       new Simple_HTable (Header_Num => Hash_Index,\n@@ -332,6 +332,12 @@ package body Exp_Dist is\n    --  then nothing is added in the tree but the right values are returned\n    --  anyhow and Existing is set to True.\n \n+   procedure Add_RACW_Asynchronous_Flag\n+     (Declarations : List_Id;\n+      RACW_Type    : Entity_Id);\n+   --  Declare a boolean constant associated with RACW_Type whose value\n+   --  indicates at run time whether a pragma Asynchronous applies to it.\n+\n    procedure Add_RACW_Read_Attribute\n      (RACW_Type           : Entity_Id;\n       Stub_Type           : Entity_Id;\n@@ -470,6 +476,34 @@ package body Exp_Dist is\n       end loop;\n    end Add_Calling_Stubs_To_Declarations;\n \n+   --------------------------------\n+   -- Add_RACW_Asynchronous_Flag --\n+   --------------------------------\n+\n+   procedure Add_RACW_Asynchronous_Flag\n+     (Declarations : List_Id;\n+      RACW_Type    : Entity_Id)\n+   is\n+      Loc : constant Source_Ptr := Sloc (RACW_Type);\n+\n+      Asynchronous_Flag : constant Entity_Id :=\n+                            Make_Defining_Identifier (Loc,\n+                              New_External_Name (Chars (RACW_Type), 'A'));\n+\n+   begin\n+      --  Declare the asynchronous flag. This flag will be changed to True\n+      --  whenever it is known that the RACW type is asynchronous.\n+\n+      Append_To (Declarations,\n+        Make_Object_Declaration (Loc,\n+          Defining_Identifier => Asynchronous_Flag,\n+          Constant_Present    => True,\n+          Object_Definition   => New_Occurrence_Of (Standard_Boolean, Loc),\n+          Expression          => New_Occurrence_Of (Standard_False, Loc)));\n+\n+      Asynchronous_Flags_Table.Set (RACW_Type, Asynchronous_Flag);\n+   end Add_RACW_Asynchronous_Flag;\n+\n    -----------------------\n    -- Add_RACW_Features --\n    -----------------------\n@@ -527,6 +561,10 @@ package body Exp_Dist is\n          Object_RPC_Receiver => Object_RPC_Receiver,\n          Existing            => Existing);\n \n+      Add_RACW_Asynchronous_Flag\n+        (Declarations        => Decls,\n+         RACW_Type           => RACW_Type);\n+\n       Add_RACW_Read_Write_Attributes\n         (RACW_Type           => RACW_Type,\n          Stub_Type           => Stub_Type,\n@@ -537,9 +575,8 @@ package body Exp_Dist is\n       if not Same_Scope and then not Existing then\n \n          --  The RACW has been declared in another scope than the designated\n-         --  type and has not been handled by another RACW in the same\n-         --  package as the first one, so add primitive for the stub type\n-         --  here.\n+         --  type and has not been handled by another RACW in the same package\n+         --  as the first one, so add primitive for the stub type here.\n \n          Add_RACW_Primitive_Declarations_And_Bodies\n            (Designated_Type  => Desig,\n@@ -561,9 +598,8 @@ package body Exp_Dist is\n       Insertion_Node  : Node_Id;\n       Decls           : List_Id)\n    is\n-      --  Set sloc of generated declaration to be that of the\n-      --  insertion node, so the declarations are recognized as\n-      --  belonging to the current package.\n+      --  Set sloc of generated declaration copy of insertion node sloc, so\n+      --  the declarations are recognized as belonging to the current package.\n \n       Loc : constant Source_Ptr := Sloc (Insertion_Node);\n \n@@ -789,50 +825,42 @@ package body Exp_Dist is\n       Source_Address    : constant Entity_Id :=\n                             Make_Defining_Identifier\n                               (Loc, New_Internal_Name ('P'));\n-      Local_Stub        : constant Entity_Id  :=\n+      Local_Stub        : constant Entity_Id :=\n                             Make_Defining_Identifier\n                               (Loc, New_Internal_Name ('L'));\n-      Stubbed_Result    : constant Entity_Id  :=\n+      Stubbed_Result    : constant Entity_Id :=\n                             Make_Defining_Identifier\n                               (Loc, New_Internal_Name ('S'));\n       Asynchronous_Flag : constant Entity_Id :=\n-                            Make_Defining_Identifier\n-                              (Loc, New_Internal_Name ('S'));\n-      Asynchronous_Node : constant Node_Id   :=\n-                            New_Occurrence_Of (Standard_False, Loc);\n-\n-      --  Functions to create occurrences of the formal\n-      --  parameter names.\n+                            Asynchronous_Flags_Table.Get (RACW_Type);\n+      pragma Assert (Present (Asynchronous_Flag));\n \n       function Stream_Parameter return Node_Id;\n       function Result return Node_Id;\n+      --  Functions to create occurrences of the formal parameter names\n \n-      function Stream_Parameter return Node_Id is\n-      begin\n-         return Make_Identifier (Loc, Name_S);\n-      end Stream_Parameter;\n+      ------------\n+      -- Result --\n+      ------------\n \n       function Result return Node_Id is\n       begin\n          return Make_Identifier (Loc, Name_V);\n       end Result;\n \n-   begin\n-      --  Declare the asynchronous flag. This flag will be changed to True\n-      --  whenever it is known that the RACW type is asynchronous. Also, the\n-      --  node gets stored since it may be rewritten when we process the\n-      --  asynchronous pragma.\n+      ----------------------\n+      -- Stream_Parameter --\n+      ----------------------\n \n-      Append_To (Declarations,\n-        Make_Object_Declaration (Loc,\n-          Defining_Identifier => Asynchronous_Flag,\n-          Constant_Present    => True,\n-          Object_Definition   => New_Occurrence_Of (Standard_Boolean, Loc),\n-          Expression          => Asynchronous_Node));\n+      function Stream_Parameter return Node_Id is\n+      begin\n+         return Make_Identifier (Loc, Name_S);\n+      end Stream_Parameter;\n \n-      Asynchronous_Flags_Table.Set (RACW_Type, Asynchronous_Node);\n+   --  Start of processing for Add_RACW_Read_Attribute\n \n-      --  Object declarations\n+   begin\n+      --  Generate object declarations\n \n       Decls := New_List (\n         Make_Object_Declaration (Loc,\n@@ -1374,17 +1402,19 @@ package body Exp_Dist is\n               Attribute_Name => Name_Unchecked_Access)));\n \n       Set_Etype (Stub_Ptr, Stub_Elements.Stub_Type_Access);\n-      --  Build_Get_Unique_RP_Call needs this information.\n+      --  Build_Get_Unique_RP_Call needs this information\n \n       --  Note: Here we assume that the Fat_Type is a record\n       --  containing just a pointer to a proxy or stub object.\n \n       Proc_Statements := New_List (\n \n-      --  Get_RAS_Info (Pkg, Subp, PA);\n-      --  if Origin = Local_Partition_Id and then not All_Calls_Remote then\n-      --     return Fat_Type!(PA);\n-      --  end if;\n+      --  Generate:\n+\n+      --    Get_RAS_Info (Pkg, Subp, PA);\n+      --    if Origin = Local_Partition_Id and then not All_Calls_Remote then\n+      --       return Fat_Type!(PA);\n+      --    end if;\n \n          Make_Procedure_Call_Statement (Loc,\n            Name =>\n@@ -1426,16 +1456,18 @@ package body Exp_Dist is\n \n         Set_Field (Name_Addr, New_Occurrence_Of (Proxy_Addr, Loc)),\n \n+      --  E.4.1(9) A remote call is asynchronous if it is a call to\n+      --  a procedure, or a call through a value of an access-to-procedure\n+      --  type, to which a pragma Asynchronous applies.\n+\n+      --    Parameter Asynch_P is true when the procedure is asynchronous;\n+      --    Expression Asynch_T is true when the type is asynchronous.\n+\n         Set_Field (Name_Asynchronous,\n           Make_Or_Else (Loc,\n             New_Occurrence_Of (Asynch_P, Loc),\n             New_Occurrence_Of (Boolean_Literals (\n               Is_Asynchronous (Ras_Type)), Loc))));\n-      --  E.4.1(9) A remote call is asynchronous if it is a call to\n-      --  a procedure, or a call through a value of an access-to-procedure\n-      --  type, to which a pragma Asynchronous applies.\n-      --  Parameter Asynch_P is true when the procedure is asynchronous;\n-      --  Expression Asynch_T is true when the type is asynchronous.\n \n       Append_List_To (Proc_Statements,\n         Build_Get_Unique_RP_Call\n@@ -1497,6 +1529,8 @@ package body Exp_Dist is\n    -- Add_RAS_Dereference_TSS --\n    -----------------------------\n \n+   --  This subprogram could use more comments ???\n+\n    procedure Add_RAS_Dereference_TSS (N : Node_Id) is\n       Loc : constant Source_Ptr := Sloc (N);\n \n@@ -1611,7 +1645,7 @@ package body Exp_Dist is\n              Parameter_Associations => Param_Assoc));\n       end if;\n \n-      --  Build the complete subprogram.\n+      --  Build the complete subprogram\n \n       if Is_Function then\n          Proc_Spec :=\n@@ -1745,7 +1779,6 @@ package body Exp_Dist is\n \n       Set_Comes_From_Source (Proxy_Type_Full_View, True);\n \n-\n       --  procedure Call\n       --    (Self : access O;\n       --     ...other-formals...) is\n@@ -1919,6 +1952,10 @@ package body Exp_Dist is\n       --  associating Subprogram_Number with the subprogram declared\n       --  by Declaration, for which we have receiving stubs in Stubs.\n \n+      ---------------------\n+      -- Append_Stubs_To --\n+      ---------------------\n+\n       procedure Append_Stubs_To\n         (RPC_Receiver_Cases : List_Id;\n          Declaration        : Node_Id;\n@@ -2435,7 +2472,7 @@ package body Exp_Dist is\n       Is_Known_Non_Asynchronous : Boolean   := False;\n       Is_Function               : Boolean;\n       Spec                      : Node_Id;\n-      Object_Type               : Entity_Id := Empty;\n+      Stub_Type                 : Entity_Id := Empty;\n       Nod                       : Node_Id)\n    is\n       Loc : constant Source_Ptr := Sloc (Nod);\n@@ -2459,7 +2496,7 @@ package body Exp_Dist is\n \n       Asynchronous_Statements     : List_Id := No_List;\n       Non_Asynchronous_Statements : List_Id := No_List;\n-      --  Statements specifics to the Asynchronous/Non-Asynchronous cases.\n+      --  Statements specifics to the Asynchronous/Non-Asynchronous cases\n \n       Extra_Formal_Statements : constant List_Id := New_List;\n       --  List of statements for extra formal parameters. It will appear after\n@@ -2575,7 +2612,7 @@ package body Exp_Dist is\n             Extra_Parameter : Entity_Id;\n \n          begin\n-            if Is_RACW_Controlling_Formal (Current_Parameter, Object_Type) then\n+            if Is_RACW_Controlling_Formal (Current_Parameter, Stub_Type) then\n \n                --  In the case of a controlling formal argument, we marshall\n                --  its addr field rather than the local stub.\n@@ -2802,7 +2839,7 @@ package body Exp_Dist is\n \n                   if (Out_Present (Current_Parameter)\n                        or else Nkind (Typ) = N_Access_Definition)\n-                    and then Etyp /= Object_Type\n+                    and then Etyp /= Stub_Type\n                   then\n                      Append_To (Non_Asynchronous_Statements,\n                         Make_Attribute_Reference (Loc,\n@@ -3287,7 +3324,7 @@ package body Exp_Dist is\n          Is_Function           => Nkind (Spec_To_Use) =\n                                     N_Function_Specification,\n          Spec                  => Spec_To_Use,\n-         Object_Type           => Stub_Type,\n+         Stub_Type             => Stub_Type,\n          Nod                   => Vis_Decl);\n \n       RCI_Calling_Stubs_Table.Set\n@@ -4279,10 +4316,11 @@ package body Exp_Dist is\n    -------------------------------\n \n    procedure RACW_Type_Is_Asynchronous (RACW_Type : Entity_Id) is\n-      N : constant Node_Id := Asynchronous_Flags_Table.Get (RACW_Type);\n-      pragma Assert (N /= Empty);\n+      Asynchronous_Flag : constant Entity_Id :=\n+                           Asynchronous_Flags_Table.Get (RACW_Type);\n    begin\n-      Replace (N, New_Occurrence_Of (Standard_True, Sloc (N)));\n+      Replace (Expression (Parent (Asynchronous_Flag)),\n+        New_Occurrence_Of (Standard_True, Sloc (Asynchronous_Flag)));\n    end RACW_Type_Is_Asynchronous;\n \n    -------------------------"}]}