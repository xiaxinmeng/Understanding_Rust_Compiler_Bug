{"sha": "4a4f287dc1ae6f111b28edfe9affe63506f38f29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE0ZjI4N2RjMWFlNmYxMTFiMjhlZGZlOWFmZmU2MzUwNmYzOGYyOQ==", "commit": {"author": {"name": "Braden Obrzut", "email": "admin@maniacsvault.net", "date": "2014-08-05T18:24:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-08-05T18:24:06Z"}, "message": "Implement constexpr variable templates\n\n\tImplement constexpr variable templates\n\t* decl.c (grokvardecl): Handle specializations of variable templates.\n\t(grokdeclarator): Handle variable template id expressions and NULL_TREE\n\treturn from grokvardecl.\n\t* decl2.c (check_member_template): Allow declaration of template member\n\tvariables.\n\t* parser.c (cp_parser_template_id): Build a TEMPLATE_ID_EXPR for\n\tvariable templates.\n\t* pt.c (check_template_variable): Accept variable temploids at\n\tnon-class scope.\n\t(push_template_decl_real): The current instantiation of a template\n\tcan be a VAR_DECL.\n\t(determine_specialization): Accept variable templates.\n\t(check_explicit_specialization): Handle and check for malformed\n\tvariable template specializations.\n\t(lookup_template_variable): New.\n\t(tsubst_decl): Handle variable template specializations.\n\t(do_decl_instantiation): Handle template variables.\n\t(instantiate_decl): Handle template variables.\n\t* semantics.c (finish_template_variable): New.\n\t(finish_id_expression): Instantiate variable templates.\n\t* cp-tree.h (variable_template_p): New.\n\nFrom-SVN: r213641", "tree": {"sha": "2904c8e428452b63c7ee221d28f8d8dfa942d509", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2904c8e428452b63c7ee221d28f8d8dfa942d509"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a4f287dc1ae6f111b28edfe9affe63506f38f29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a4f287dc1ae6f111b28edfe9affe63506f38f29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a4f287dc1ae6f111b28edfe9affe63506f38f29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a4f287dc1ae6f111b28edfe9affe63506f38f29/comments", "author": {"login": "Blzut3", "id": 4406100, "node_id": "MDQ6VXNlcjQ0MDYxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4406100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blzut3", "html_url": "https://github.com/Blzut3", "followers_url": "https://api.github.com/users/Blzut3/followers", "following_url": "https://api.github.com/users/Blzut3/following{/other_user}", "gists_url": "https://api.github.com/users/Blzut3/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blzut3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blzut3/subscriptions", "organizations_url": "https://api.github.com/users/Blzut3/orgs", "repos_url": "https://api.github.com/users/Blzut3/repos", "events_url": "https://api.github.com/users/Blzut3/events{/privacy}", "received_events_url": "https://api.github.com/users/Blzut3/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d406ae470c795e301bc3e0ab6326e9091c0137d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d406ae470c795e301bc3e0ab6326e9091c0137d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d406ae470c795e301bc3e0ab6326e9091c0137d4"}], "stats": {"total": 311, "additions": 282, "deletions": 29}, "files": [{"sha": "d9ad73cdbde5413a4be43770855e7ac3aaa86b8a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4a4f287dc1ae6f111b28edfe9affe63506f38f29", "patch": "@@ -1,3 +1,28 @@\n+2014-08-01  Braden Obrzut  <admin@maniacsvault.net>\n+\n+\tImplement constexpr variable templates\n+\t* decl.c (grokvardecl): Handle specializations of variable templates.\n+\t(grokdeclarator): Handle variable template id expressions and NULL_TREE\n+\treturn from grokvardecl.\n+\t* decl2.c (check_member_template): Allow declaration of template member\n+\tvariables.\n+\t* parser.c (cp_parser_template_id): Build a TEMPLATE_ID_EXPR for\n+\tvariable templates.\n+\t* pt.c (check_template_variable): Accept variable temploids at\n+\tnon-class scope.\n+\t(push_template_decl_real): The current instantiation of a template\n+\tcan be a VAR_DECL.\n+\t(determine_specialization): Accept variable templates.\n+\t(check_explicit_specialization): Handle and check for malformed\n+\tvariable template specializations.\n+\t(lookup_template_variable): New.\n+\t(tsubst_decl): Handle variable template specializations.\n+\t(do_decl_instantiation): Handle template variables.\n+\t(instantiate_decl): Handle template variables.\n+\t* semantics.c (finish_template_variable): New.\n+\t(finish_id_expression): Instantiate variable templates.\n+\t* cp-tree.h (variable_template_p): New.\n+\n 2014-08-02  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/15339"}, {"sha": "ffb44d11ae5e874f20337aa2a820f63244f5db85", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4a4f287dc1ae6f111b28edfe9affe63506f38f29", "patch": "@@ -5045,6 +5045,17 @@ class_of_this_parm (const_tree fntype)\n   return TREE_TYPE (type_of_this_parm (fntype));\n }\n \n+/* True if T designates a variable template declaration.  */\n+inline bool\n+variable_template_p (tree t)\n+{\n+  if (TREE_CODE (t) != TEMPLATE_DECL)\n+    return false;\n+  if (tree r = DECL_TEMPLATE_RESULT (t))\n+    return VAR_P (r);\n+  return false;\n+}\n+\n /* A parameter list indicating for a function with no parameters,\n    e.g  \"int f(void)\".  */\n extern cp_parameter_declarator *no_parameters;\n@@ -5572,6 +5583,7 @@ extern bool redeclare_class_template\t\t(tree, tree);\n extern tree lookup_template_class\t\t(tree, tree, tree, tree,\n \t\t\t\t\t\t int, tsubst_flags_t);\n extern tree lookup_template_function\t\t(tree, tree);\n+extern tree lookup_template_variable\t\t(tree, tree);\n extern int uses_template_parms\t\t\t(tree);\n extern int uses_template_parms_level\t\t(tree, int);\n extern bool in_template_function\t\t(void);\n@@ -5834,6 +5846,7 @@ extern tree perform_koenig_lookup\t\t(tree, vec<tree, va_gc> *,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree finish_call_expr\t\t\t(tree, vec<tree, va_gc> **, bool,\n \t\t\t\t\t\t bool, tsubst_flags_t);\n+extern tree finish_template_variable\t(tree);\n extern tree finish_increment_expr\t\t(tree, enum tree_code);\n extern tree finish_this_expr\t\t\t(void);\n extern tree finish_pseudo_destructor_expr       (tree, tree, tree, location_t);"}, {"sha": "acc1192eacf5105f7636eefc33e0513a0f480ea7", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4a4f287dc1ae6f111b28edfe9affe63506f38f29", "patch": "@@ -80,8 +80,8 @@ static int ambi_op_p (enum tree_code);\n static int unary_op_p (enum tree_code);\n static void push_local_name (tree);\n static tree grok_reference_init (tree, tree, tree, int);\n-static tree grokvardecl (tree, tree, const cp_decl_specifier_seq *,\n-\t\t\t int, int, tree);\n+static tree grokvardecl (tree, tree, tree, const cp_decl_specifier_seq *,\n+\t\t\t int, int, int, tree);\n static int check_static_variable_definition (tree, tree);\n static void record_unknown_type (tree, const char *);\n static tree builtin_function_1 (tree, tree, bool);\n@@ -7968,9 +7968,11 @@ set_linkage_for_static_data_member (tree decl)\n static tree\n grokvardecl (tree type,\n \t     tree name,\n+\t     tree orig_declarator,\n \t     const cp_decl_specifier_seq *declspecs,\n \t     int initialized,\n \t     int constp,\n+\t     int template_count,\n \t     tree scope)\n {\n   tree decl;\n@@ -8000,7 +8002,10 @@ grokvardecl (tree type,\n \t  || (TREE_CODE (scope) == NAMESPACE_DECL\n \t      && current_lang_name != lang_name_cplusplus)\n \t  /* Similarly for static data members.  */\n-\t  || TYPE_P (scope)))\n+\t  || TYPE_P (scope)\n+\t  /* Similarly for explicit specializations.  */\n+\t  || (orig_declarator\n+\t      && TREE_CODE (orig_declarator) == TEMPLATE_ID_EXPR)))\n     decl = build_lang_decl (VAR_DECL, name, type);\n   else\n     decl = build_decl (input_location, VAR_DECL, name, type);\n@@ -8068,7 +8073,12 @@ grokvardecl (tree type,\n   else\n     DECL_INTERFACE_KNOWN (decl) = 1;\n \n-  return decl;\n+  // Handle explicit specializations and instantiations of variable templates.\n+  if (orig_declarator)\n+    decl = check_explicit_specialization (orig_declarator, decl,\n+\t\t\t\t\t  template_count, 0);\n+\n+  return decl != error_mark_node ? decl : NULL_TREE;\n }\n \n /* Create and return a canonical pointer to member function type, for\n@@ -8962,8 +8972,13 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t  dname = fns;\n \t\t  if (!identifier_p (dname))\n \t\t    {\n-\t\t      gcc_assert (is_overloaded_fn (dname));\n-\t\t      dname = DECL_NAME (get_first_fn (dname));\n+\t\t      if (variable_template_p (dname))\n+\t\t\tdname = DECL_NAME (dname);\n+\t\t      else\n+\t\t        {\n+\t\t          gcc_assert (is_overloaded_fn (dname));\n+\t\t          dname = DECL_NAME (get_first_fn (dname));\n+\t\t        }\n \t\t    }\n \t\t}\n \t\t/* Fall through.  */\n@@ -10004,7 +10019,8 @@ grokdeclarator (const cp_declarator *declarator,\n \n   if (unqualified_id && TREE_CODE (unqualified_id) == TEMPLATE_ID_EXPR\n       && TREE_CODE (type) != FUNCTION_TYPE\n-      && TREE_CODE (type) != METHOD_TYPE)\n+      && TREE_CODE (type) != METHOD_TYPE\n+      && !variable_template_p (TREE_OPERAND (unqualified_id, 0)))\n     {\n       error (\"template-id %qD used as a declarator\",\n \t     unqualified_id);\n@@ -10894,11 +10910,15 @@ grokdeclarator (const cp_declarator *declarator,\n \t/* It's a variable.  */\n \n \t/* An uninitialized decl with `extern' is a reference.  */\n-\tdecl = grokvardecl (type, unqualified_id,\n+\tdecl = grokvardecl (type, dname, unqualified_id,\n \t\t\t    declspecs,\n \t\t\t    initialized,\n \t\t\t    (type_quals & TYPE_QUAL_CONST) != 0,\n+\t\t\t    template_count,\n \t\t\t    ctype ? ctype : in_namespace);\n+\tif (decl == NULL_TREE)\n+\t  return error_mark_node;\n+\n \tbad_specifiers (decl, BSP_VAR, virtualp,\n \t\t\tmemfn_quals != TYPE_UNQUALIFIED,\n \t\t\tinlinep, friendp, raises != NULL_TREE);"}, {"sha": "9375f3fa98fed5e7de26ec405ff6269cefb7c5b4", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=4a4f287dc1ae6f111b28edfe9affe63506f38f29", "patch": "@@ -524,6 +524,8 @@ check_member_template (tree tmpl)\n \t with member templates.  */\n       DECL_IGNORED_P (tmpl) = 1;\n     }\n+  else if (variable_template_p (tmpl))\n+    /* OK */;\n   else\n     error (\"template declaration of %q#D\", decl);\n }"}, {"sha": "78004678fe4f62af7fed53e37ac4fb1d6022e95a", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=4a4f287dc1ae6f111b28edfe9affe63506f38f29", "patch": "@@ -13646,6 +13646,10 @@ cp_parser_template_id (cp_parser *parser,\n       template_id\n \t= finish_template_type (templ, arguments, entering_scope);\n     }\n+  else if (variable_template_p (templ))\n+    {\n+      template_id = lookup_template_variable (templ, arguments);\n+    }\n   else\n     {\n       /* If it's not a class-template or a template-template, it should be"}, {"sha": "57e72168be7c6c7fcba49368ff5858515f0bf5fe", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 75, "deletions": 15, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4a4f287dc1ae6f111b28edfe9affe63506f38f29", "patch": "@@ -1878,11 +1878,16 @@ determine_specialization (tree template_id,\n   if (BASELINK_P (fns))\n     fns = BASELINK_FUNCTIONS (fns);\n \n-  if (!is_overloaded_fn (fns))\n+  if (TREE_CODE (decl) == FUNCTION_DECL && !is_overloaded_fn (fns))\n     {\n       error (\"%qD is not a function template\", fns);\n       return error_mark_node;\n     }\n+  else if (VAR_P (decl) && !variable_template_p (fns))\n+    {\n+      error (\"%qD is not a variable template\", fns);\n+      return error_mark_node;\n+    }\n \n   /* Count the number of template headers specified for this\n      specialization.  */\n@@ -1892,7 +1897,9 @@ determine_specialization (tree template_id,\n        b = b->level_chain)\n     ++header_count;\n \n-  for (; fns; fns = OVL_NEXT (fns))\n+  if (variable_template_p (fns))\n+    templates = tree_cons (explicit_targs, fns, templates);\n+  else for (; fns; fns = OVL_NEXT (fns))\n     {\n       tree fn = OVL_CURRENT (fns);\n \n@@ -2308,9 +2315,16 @@ check_template_variable (tree decl)\n   tree ctx = CP_DECL_CONTEXT (decl);\n   int wanted = num_template_headers_for_class (ctx);\n   if (!TYPE_P (ctx) || !CLASSTYPE_TEMPLATE_INFO (ctx))\n-    permerror (DECL_SOURCE_LOCATION (decl),\n-\t       \"%qD is not a static data member of a class template\", decl);\n-  else if (template_header_count > wanted)\n+    {\n+      if (cxx_dialect < cxx1y)\n+        pedwarn (DECL_SOURCE_LOCATION (decl), 0,\n+                 \"variable templates only available with \"\n+                 \"-std=c++1y or -std=gnu++1y\");\n+\n+      // Namespace-scope variable templates should have a template header.\n+      ++wanted;\n+    }\n+  if (template_header_count > wanted)\n     {\n       bool warned = pedwarn (DECL_SOURCE_LOCATION (decl), 0,\n \t\t\t     \"too many template headers for %D (should be %d)\",\n@@ -2442,6 +2456,13 @@ check_explicit_specialization (tree declarator,\n \n       /* Fall through.  */\n     case tsk_expl_spec:\n+      if (VAR_P (decl) && TREE_CODE (declarator) != TEMPLATE_ID_EXPR)\n+        {\n+           // In cases like template<> constexpr bool v = true;\n+           error (\"%qD is not a template variable\", dname);\n+           break;\n+        }\n+\n       SET_DECL_TEMPLATE_SPECIALIZATION (decl);\n       if (ctype)\n \tmember_specialization = 1;\n@@ -2481,7 +2502,10 @@ check_explicit_specialization (tree declarator,\n       gcc_unreachable ();\n     }\n \n-  if (specialization || member_specialization)\n+  if ((specialization || member_specialization)\n+      /* This doesn't apply to variable templates.  */\n+      && (TREE_CODE (TREE_TYPE (decl)) == FUNCTION_TYPE\n+          || TREE_CODE (TREE_TYPE (decl)) == METHOD_TYPE))\n     {\n       tree t = TYPE_ARG_TYPES (TREE_TYPE (decl));\n       for (; t; t = TREE_CHAIN (t))\n@@ -2566,6 +2590,10 @@ check_explicit_specialization (tree declarator,\n       else if (ctype != NULL_TREE\n \t       && (identifier_p (TREE_OPERAND (declarator, 0))))\n \t{\n+\t  // Ignore variable templates.\n+\t  if (VAR_P (decl))\n+\t    return decl;\n+\n \t  /* Find the list of functions in ctype that have the same\n \t     name as the declared function.  */\n \t  tree name = TREE_OPERAND (declarator, 0);\n@@ -2691,7 +2719,8 @@ check_explicit_specialization (tree declarator,\n \t  /* If we thought that the DECL was a member function, but it\n \t     turns out to be specializing a static member function,\n \t     make DECL a static member function as well.  */\n-\t  if (DECL_STATIC_FUNCTION_P (tmpl)\n+\t  if (DECL_FUNCTION_TEMPLATE_P (tmpl)\n+\t      && DECL_STATIC_FUNCTION_P (tmpl)\n \t      && DECL_NONSTATIC_MEMBER_FUNCTION_P (decl))\n \t    revert_static_member_fn (decl);\n \n@@ -2725,7 +2754,8 @@ check_explicit_specialization (tree declarator,\n \n \t  /* Inherit default function arguments from the template\n \t     DECL is specializing.  */\n-\t  copy_default_args_to_explicit_spec (decl);\n+\t  if (DECL_FUNCTION_TEMPLATE_P (tmpl))\n+\t    copy_default_args_to_explicit_spec (decl);\n \n \t  /* This specialization has the same protection as the\n \t     template it specializes.  */\n@@ -2797,6 +2827,7 @@ check_explicit_specialization (tree declarator,\n \n \t  /* A 'structor should already have clones.  */\n \t  gcc_assert (decl == error_mark_node\n+\t\t      || variable_template_p (tmpl)\n \t\t      || !(DECL_CONSTRUCTOR_P (decl)\n \t\t\t   || DECL_DESTRUCTOR_P (decl))\n \t\t      || DECL_CLONED_FUNCTION_P (DECL_CHAIN (decl)));\n@@ -4741,6 +4772,15 @@ push_template_decl_real (tree decl, bool is_friend)\n \t       && TYPE_DECL_ALIAS_P (decl))\n \t/* alias-declaration */\n \tgcc_assert (!DECL_ARTIFICIAL (decl));\n+      else if (VAR_P (decl))\n+        {\n+          if (!DECL_DECLARED_CONSTEXPR_P (decl))\n+            {\n+              sorry (\"template declaration of non-constexpr variable %qD\",\n+\t\t     decl);\n+              return error_mark_node;\n+            }\n+        }\n       else\n \t{\n \t  error (\"template declaration of %q#D\", decl);\n@@ -7917,6 +7957,14 @@ lookup_template_class (tree d1, tree arglist, tree in_decl, tree context,\n   timevar_pop (TV_TEMPLATE_INST);\n   return ret;\n }\n+\n+/* Return a TEMPLATE_ID_EXPR for the given variable template and ARGLIST. */\n+\n+tree\n+lookup_template_variable (tree templ, tree arglist)\n+{\n+  return build2 (TEMPLATE_ID_EXPR, TREE_TYPE (templ), templ, arglist);\n+}\n \f\n struct pair_fn_data\n {\n@@ -10484,7 +10532,7 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \tif (PRIMARY_TEMPLATE_P (t))\n \t  DECL_PRIMARY_TEMPLATE (r) = r;\n \n-\tif (TREE_CODE (decl) != TYPE_DECL)\n+\tif (TREE_CODE (decl) != TYPE_DECL && TREE_CODE (decl) != VAR_DECL)\n \t  /* Record this non-type partial instantiation.  */\n \t  register_specialization (r, t,\n \t\t\t\t   DECL_TI_ARGS (DECL_TEMPLATE_RESULT (r)),\n@@ -19172,7 +19220,11 @@ do_decl_instantiation (tree decl, tree storage)\n       error (\"explicit instantiation of non-template %q#D\", decl);\n       return;\n     }\n-  else if (VAR_P (decl))\n+\n+  bool var_templ = (DECL_TEMPLATE_INFO (decl)\n+                    && variable_template_p (DECL_TI_TEMPLATE (decl)));\n+\n+  if (VAR_P (decl) && !var_templ)\n     {\n       /* There is an asymmetry here in the way VAR_DECLs and\n \t FUNCTION_DECLs are handled by grokdeclarator.  In the case of\n@@ -19201,7 +19253,7 @@ do_decl_instantiation (tree decl, tree storage)\n \t  return;\n \t}\n     }\n-  else if (TREE_CODE (decl) != FUNCTION_DECL)\n+  else if (TREE_CODE (decl) != FUNCTION_DECL && !var_templ)\n     {\n       error (\"explicit instantiation of %q#D\", decl);\n       return;\n@@ -19906,10 +19958,12 @@ instantiate_decl (tree d, int defer_ok,\n \t  tree ns;\n \t  tree init;\n \t  bool const_init = false;\n+\t  bool enter_context = DECL_CLASS_SCOPE_P (d);\n \n \t  ns = decl_namespace_context (d);\n \t  push_nested_namespace (ns);\n-\t  push_nested_class (DECL_CONTEXT (d));\n+\t  if (enter_context)\n+\t    push_nested_class (DECL_CONTEXT (d));\n \t  init = tsubst_expr (DECL_INITIAL (code_pattern),\n \t\t\t      args,\n \t\t\t      tf_warning_or_error, NULL_TREE,\n@@ -19921,7 +19975,8 @@ instantiate_decl (tree d, int defer_ok,\n \t  cp_finish_decl (d, init, /*init_const_expr_p=*/const_init,\n \t\t\t  /*asmspec_tree=*/NULL_TREE,\n \t\t\t  LOOKUP_ONLYCONVERTING);\n-\t  pop_nested_class ();\n+\t  if (enter_context)\n+\t    pop_nested_class ();\n \t  pop_nested_namespace (ns);\n \t}\n \n@@ -20018,10 +20073,15 @@ instantiate_decl (tree d, int defer_ok,\n       DECL_EXTERNAL (d) = 0;\n \n       /* Enter the scope of D so that access-checking works correctly.  */\n-      push_nested_class (DECL_CONTEXT (d));\n+      bool enter_context = DECL_CLASS_SCOPE_P (d);\n+      if (enter_context)\n+        push_nested_class (DECL_CONTEXT (d));\n+\n       const_init = DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (code_pattern);\n       cp_finish_decl (d, init, const_init, NULL_TREE, 0);\n-      pop_nested_class ();\n+\n+      if (enter_context)\n+        pop_nested_class ();\n     }\n   else if (TREE_CODE (d) == FUNCTION_DECL && DECL_DEFAULTED_FN (code_pattern))\n     synthesize_method (d);"}, {"sha": "859550b0f615014adb663753d57f04984dec0f4f", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=4a4f287dc1ae6f111b28edfe9affe63506f38f29", "patch": "@@ -2418,6 +2418,15 @@ finish_call_expr (tree fn, vec<tree, va_gc> **args, bool disallow_virtual,\n   return result;\n }\n \n+/* Instantiate a variable declaration from a TEMPLATE_ID_EXPR for use. */\n+\n+tree\n+finish_template_variable (tree var)\n+{\n+  return instantiate_template (TREE_OPERAND (var, 0), TREE_OPERAND (var, 1),\n+                               tf_error);\n+}\n+\n /* Finish a call to a postfix increment or decrement or EXPR.  (Which\n    is indicated by CODE, which should be POSTINCREMENT_EXPR or\n    POSTDECREMENT_EXPR.)  */\n@@ -3500,6 +3509,11 @@ finish_id_expression (tree id_expression,\n \t     a call to its wrapper.  */\n \t  decl = build_cxx_call (wrap, 0, NULL, tf_warning_or_error);\n \t}\n+      else if (TREE_CODE (decl) == TEMPLATE_ID_EXPR\n+\t       && variable_template_p (TREE_OPERAND (decl, 0)))\n+\t{\n+\t  decl = finish_template_variable (decl);\n+\t}\n       else if (scope)\n \t{\n \t  decl = (adjust_result_of_qualified_name_lookup"}, {"sha": "a4c63acee7648654722c326cdb1d612976f44123", "filename": "gcc/testsuite/g++.dg/cpp1y/pr59638.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59638.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59638.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59638.C?ref=4a4f287dc1ae6f111b28edfe9affe63506f38f29", "patch": "@@ -1,10 +1,11 @@\n // PR c++/59638\n // { dg-do compile { target c++1y } }\n // { dg-options \"\" }\n+// { dg-excess-errors \"sorry\" }\n \n-void (*a)(auto);         // { dg-error \"template declaration\" }\n+void (*a)(auto);         // { dg-error \"\" \"\" { xfail *-*-* } }\n \n-void (*b)(auto) = 0;     // { dg-error \"template declaration\" }\n+void (*b)(auto) = 0;     // { dg-error \"\" \"\" { xfail *-*-* } }\n \n typedef void (*f)(auto); // { dg-error \"template declaration\" }\n "}, {"sha": "9219303737cd93bcaebab3698eb587ca21935cd5", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ1.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ1.C?ref=4a4f287dc1ae6f111b28edfe9affe63506f38f29", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do run }\n+// { dg-options \"-std=c++1y\" }\n+\n+template<int A, int B>\n+  struct S1\n+  {\n+    static constexpr int a = A;\n+    static constexpr int b = B;\n+  };\n+\n+template<typename T>\n+  constexpr int var = T::a + T::b;\n+\n+int main ()\n+{\n+  int v = var<S1<199, 23>>/2;\n+  return !(\n+       var<S1<11, 100>> == v\n+    && var<S1<50, 120>> == var<S1<150, var<S1<10, 10>>>>\n+    && var<S1<53, 23>> != 222\n+  );\n+}"}, {"sha": "315ac3e048a00b0ef97ba6c9856e4cef2eaf4561", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ2.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ2.C?ref=4a4f287dc1ae6f111b28edfe9affe63506f38f29", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++1y\" }\n+\n+// Template variables and static member variables of template classes are\n+// often confused.\n+\n+template<typename T>\n+  struct S1\n+  {\n+    static int n;\n+    static int arr[];\n+  };\n+\n+template<typename T>\n+  constexpr int var = sizeof (T);\n+\n+template<typename T>\n+  int S1<T>::n = sizeof (T);\n+\n+template<typename T>\n+  int S1<T>::arr[sizeof (T)];\n+\n+template<>\n+  int S1<int>::n = 8;\n+\n+template<>\n+  int S1<int>::arr[8];\n+\n+int main ()\n+{\n+  S1<int> v1;\n+  var<S1<int>>;\n+  return 0;\n+}"}, {"sha": "d3fbad4bc88a315dc1843e5cda7288e1517510d8", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ3.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ3.C?ref=4a4f287dc1ae6f111b28edfe9affe63506f38f29", "patch": "@@ -0,0 +1,19 @@\n+// { dg-do run }\n+// { dg-options \"-std=c++1y\" }\n+\n+template<typename T>\n+ constexpr int var = sizeof (T);\n+\n+template<typename T>\n+  struct S1\n+  {\n+    template<typename U>\n+    static constexpr int a = sizeof (U) + sizeof (T);\n+  };\n+\n+int main ()\n+{\n+  return !(\n+    var<int> + var<char> == S1<int>::a<char>\n+  );\n+}"}, {"sha": "1d6cf1d69182f3ec47a87610828710543cd69102", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ4.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ4.C?ref=4a4f287dc1ae6f111b28edfe9affe63506f38f29", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do run }\n+// { dg-options \"-std=c++1y\" }\n+\n+template<typename T>\n+  constexpr int var = sizeof (T);\n+\n+template<>\n+  constexpr int var<int> = 100000;\n+\n+int main ()\n+{\n+  return !(\n+       var<int> == 100000\n+    && var<char> == sizeof(char)\n+  );\n+}"}, {"sha": "a8b7122ddd8a260639e1c7ea5381ede89834d569", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ5.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ5.C?ref=4a4f287dc1ae6f111b28edfe9affe63506f38f29", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do run }\n+// { dg-options \"-std=c++1y\" }\n+\n+template<int A, int B>\n+  struct S1\n+  {\n+    static constexpr int a = A;\n+    static constexpr int b = B;\n+  };\n+\n+template<class T>\n+  constexpr int var = T::a + T::b;\n+\n+template<template<int,int> class T, int A>\n+  constexpr int var2 = var<T<A, A>> + A;\n+\n+int main ()\n+{\n+  return !(\n+    var2<S1, 40> == 120\n+  );\n+}"}, {"sha": "f9c42dd7e41a88de70980d0d504144bdd327a5a4", "filename": "gcc/testsuite/g++.dg/parse/error50.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror50.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror50.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror50.C?ref=4a4f287dc1ae6f111b28edfe9affe63506f38f29", "patch": "@@ -15,4 +15,4 @@ struct B\n   static T i;\n };\n \n-template<> template <> int B<int>::i; // { dg-error \"should be 1\" }\n+template<> template <> int B<int>::i; // { dg-error \"template|should be 1\" }"}, {"sha": "3ac862ed81b8af94628e497263f1050d61bb308b", "filename": "gcc/testsuite/g++.dg/template/crash71.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash71.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash71.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash71.C?ref=4a4f287dc1ae6f111b28edfe9affe63506f38f29", "patch": "@@ -1,3 +1,3 @@\n // PR c++/30659\n \n-extern \"C\" template A<char> foo(); // { dg-error \"forbids|static data|expected\" }\n+extern \"C\" template A<char> foo(); // { dg-error \"forbids|static data|expected|template\" }"}, {"sha": "34e7224be458642beddf4df1677c9e77a52fb623", "filename": "gcc/testsuite/g++.old-deja/g++.oliva/template10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Ftemplate10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Ftemplate10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.oliva%2Ftemplate10.C?ref=4a4f287dc1ae6f111b28edfe9affe63506f38f29", "patch": "@@ -19,4 +19,4 @@ template<> struct A<int> {\n };\n \n bool A<int>::a = true; // ok\n-template<> bool A<int>::b = false; // { dg-error \"template header\" } \n+template<> bool A<int>::b = false; // { dg-error \"template (header|variable)\" }"}, {"sha": "ec91bc476726da8693379d089d5ee374afa776ad", "filename": "gcc/testsuite/g++.old-deja/g++.pt/var1.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fvar1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4f287dc1ae6f111b28edfe9affe63506f38f29/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fvar1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fvar1.C?ref=4a4f287dc1ae6f111b28edfe9affe63506f38f29", "patch": "@@ -1,4 +1,5 @@\n // { dg-do assemble  }\n // Origin: Jason Merrill <jason@cygnus.com>\n+// { dg-excess-errors \"sorry\" }\n \n-template <class T> T t; // { dg-error \"\" } template declaration of t\n+template <class T> T t; // template declaration of t"}]}