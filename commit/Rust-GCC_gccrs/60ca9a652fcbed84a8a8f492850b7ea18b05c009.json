{"sha": "60ca9a652fcbed84a8a8f492850b7ea18b05c009", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBjYTlhNjUyZmNiZWQ4NGE4YThmNDkyODUwYjdlYTE4YjA1YzAwOQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2013-05-09T19:36:56Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-05-09T19:36:56Z"}, "message": "sse.md (*vec_extractv4si_0_zext): New pattern.\n\n\t* config/i386/sse.md (*vec_extractv4si_0_zext): New pattern.\n\t(*vec_extractv4si_zext_mem): Ditto.\n\t(*vec_extractv2di): Add 0->x and x->x alternatives.\n\t* config/i386/mmx.md (*vec_extractv2si_zext_mem): New pattern.\n\t* config/i386/i386.md (*zero_extendsidi2): Add *Yj->?r alternative.\n\nFrom-SVN: r198752", "tree": {"sha": "a24438ecf8265d0ca27a02f88dfd45d28a34384c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a24438ecf8265d0ca27a02f88dfd45d28a34384c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60ca9a652fcbed84a8a8f492850b7ea18b05c009", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60ca9a652fcbed84a8a8f492850b7ea18b05c009", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60ca9a652fcbed84a8a8f492850b7ea18b05c009", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60ca9a652fcbed84a8a8f492850b7ea18b05c009/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "26863a324a5697fe20d2fb8610010551785a9a15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26863a324a5697fe20d2fb8610010551785a9a15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26863a324a5697fe20d2fb8610010551785a9a15"}], "stats": {"total": 94, "additions": 82, "deletions": 12}, "files": [{"sha": "eeb6f5f32d2861abb58c4ee8224d25f2178d1ff5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60ca9a652fcbed84a8a8f492850b7ea18b05c009/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60ca9a652fcbed84a8a8f492850b7ea18b05c009/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=60ca9a652fcbed84a8a8f492850b7ea18b05c009", "patch": "@@ -1,3 +1,11 @@\n+2013-05-09  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (*vec_extractv4si_0_zext): New pattern.\n+\t(*vec_extractv4si_zext_mem): Ditto.\n+\t(*vec_extractv2di): Add 0->x and x->x alternatives.\n+\t* config/i386/mmx.md (*vec_extractv2si_zext_mem): New pattern.\n+\t* config/i386/i386.md (*zero_extendsidi2): Add *Yj->?r alternative.\n+\n 2013-05-09  Jason Merrill  <jason@redhat.com>\n \n \tN3639 C++1y VLA support"}, {"sha": "dea5d513e84d15a263df00e01e44610be9bfe6d6", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60ca9a652fcbed84a8a8f492850b7ea18b05c009/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60ca9a652fcbed84a8a8f492850b7ea18b05c009/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=60ca9a652fcbed84a8a8f492850b7ea18b05c009", "patch": "@@ -3088,10 +3088,10 @@\n \n (define_insn \"*zero_extendsidi2\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-\t\t\t\"=r,?r,?o,r   ,o,?*Ym,?!*y,?*Yi,?*x\")\n+\t\t\t\"=r,?r,?o,r   ,o,?*Ym,?!*y,?r ,?*Yi,?*x\")\n \t(zero_extend:DI\n \t (match_operand:SI 1 \"x86_64_zext_operand\"\n-\t        \t\"0 ,rm,r ,rmWz,0,r   ,m   ,r   ,m\")))]\n+\t        \t\"0 ,rm,r ,rmWz,0,r   ,m   ,*Yj,r   ,m\")))]\n   \"\"\n {\n   switch (get_attr_type (insn))\n@@ -3109,6 +3109,9 @@\n       return \"movd\\t{%1, %0|%0, %1}\";\n \n     case TYPE_SSEMOV:\n+      if (GENERAL_REG_P (operands[0]))\n+\treturn \"%vmovd\\t{%1, %k0|%k0, %1}\";\n+\n       return \"%vmovd\\t{%1, %0|%0, %1}\";\n \n     default:\n@@ -3118,9 +3121,9 @@\n   [(set (attr \"isa\")\n      (cond [(eq_attr \"alternative\" \"0,1,2\")\n \t      (const_string \"nox64\")\n-\t    (eq_attr \"alternative\" \"3\")\n+\t    (eq_attr \"alternative\" \"3,7\")\n \t      (const_string \"x64\")\n-\t    (eq_attr \"alternative\" \"8\")\n+\t    (eq_attr \"alternative\" \"9\")\n \t      (const_string \"sse2\")\n \t   ]\n \t   (const_string \"*\")))\n@@ -3129,7 +3132,7 @@\n \t      (const_string \"multi\")\n \t    (eq_attr \"alternative\" \"5,6\")\n \t      (const_string \"mmxmov\")\n-\t    (eq_attr \"alternative\" \"7,8\")\n+\t    (eq_attr \"alternative\" \"7,8,9\")\n \t      (const_string \"ssemov\")\n \t   ]\n \t   (const_string \"imovx\")))\n@@ -3144,7 +3147,7 @@\n    (set (attr \"mode\")\n      (cond [(eq_attr \"alternative\" \"5,6\")\n \t      (const_string \"DI\")\n-\t    (eq_attr \"alternative\" \"7,8\")\n+\t    (eq_attr \"alternative\" \"7,8,9\")\n \t      (const_string \"TI\")\n \t   ]\n \t   (const_string \"SI\")))])"}, {"sha": "782f0698025988228ed1755c36f51d33d82ee2a4", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60ca9a652fcbed84a8a8f492850b7ea18b05c009/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60ca9a652fcbed84a8a8f492850b7ea18b05c009/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=60ca9a652fcbed84a8a8f492850b7ea18b05c009", "patch": "@@ -1323,6 +1323,20 @@\n   [(set (match_dup 0) (match_dup 1))]\n   \"operands[1] = adjust_address (operands[1], SImode, 4);\")\n \n+(define_insn_and_split \"*vec_extractv2si_zext_mem\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=y,x,r\")\n+\t(zero_extend:DI\n+\t  (vec_select:SI\n+\t    (match_operand:V2SI 1 \"memory_operand\" \"o,o,o\")\n+\t    (parallel [(match_operand:SI 2 \"const_0_to_1_operand\")]))))]\n+  \"TARGET_64BIT && TARGET_MMX\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (zero_extend:DI (match_dup 1)))]\n+{\n+  operands[1] = adjust_address (operands[1], SImode, INTVAL (operands[2]) * 4);\n+})\n+\n (define_expand \"vec_extractv2si\"\n   [(match_operand:SI 0 \"register_operand\")\n    (match_operand:V2SI 1 \"register_operand\")"}, {"sha": "c9b34b415a2e6150fb2b884cceb824dec15fd57d", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 51, "deletions": 6, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60ca9a652fcbed84a8a8f492850b7ea18b05c009/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60ca9a652fcbed84a8a8f492850b7ea18b05c009/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=60ca9a652fcbed84a8a8f492850b7ea18b05c009", "patch": "@@ -7331,6 +7331,18 @@\n   \"#\"\n   [(set_attr \"isa\" \"*,sse4,*,*\")])\n \n+(define_insn_and_split \"*vec_extractv4si_0_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (vec_select:SI\n+\t    (match_operand:V4SI 1 \"register_operand\" \"x\")\n+\t    (parallel [(const_int 0)]))))]\n+  \"TARGET_64BIT && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_FROM_VEC\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (zero_extend:DI (match_dup 1)))]\n+  \"operands[1] = gen_rtx_REG (SImode, REGNO (operands[1]));\")\n+\n (define_insn \"*vec_extractv2di_0_sse\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"     \"=x,m\")\n \t(vec_select:DI\n@@ -7350,16 +7362,35 @@\n   \"operands[1] = gen_rtx_REG (<MODE>mode, REGNO (operands[1]));\")\n \n (define_insn \"*vec_extractv4si\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,x,x\")\n \t(vec_select:SI\n-\t  (match_operand:V4SI 1 \"register_operand\" \"x\")\n+\t  (match_operand:V4SI 1 \"register_operand\" \"x,0,x\")\n \t  (parallel [(match_operand:SI 2 \"const_0_to_3_operand\")])))]\n   \"TARGET_SSE4_1\"\n-  \"%vpextrd\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sselog1\")\n-   (set_attr \"prefix_extra\" \"1\")\n+{\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      return \"%vpextrd\\t{%2, %1, %0|%0, %1, %2}\";\n+\n+    case 1:\n+      operands [2] = GEN_INT (INTVAL (operands[2]) * 4);\n+      return \"psrldq\\t{%2, %0|%0, %2}\";\n+\n+    case 2:\n+      operands [2] = GEN_INT (INTVAL (operands[2]) * 4);\n+      return \"vpsrldq\\t{%2, %1, %0|%0, %1, %2}\";\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"isa\" \"*,noavx,avx\")\n+   (set_attr \"type\" \"sselog1,sseishft1,sseishft1\")\n+   (set_attr \"memory\" \"*,none,none\")\n+   (set_attr \"prefix_extra\" \"1,*,*\")\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"prefix\" \"maybe_vex,orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*vec_extractv4si_zext\"\n@@ -7384,6 +7415,20 @@\n   \"TARGET_SSE\"\n   \"#\")\n \n+(define_insn_and_split \"*vec_extractv4si_zext_mem\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=x,r\")\n+\t(zero_extend:DI\n+\t  (vec_select:SI\n+\t    (match_operand:V4SI 1 \"memory_operand\" \"o,o\")\n+\t    (parallel [(match_operand:SI 2 \"const_0_to_3_operand\")]))))]\n+  \"TARGET_64BIT && TARGET_SSE\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (zero_extend:DI (match_dup 1)))]\n+{\n+  operands[1] = adjust_address (operands[1], SImode, INTVAL (operands[2]) * 4);\n+})\n+\n (define_insn \"*vec_extractv2di_1\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"     \"=rm,m,x,x,x,x,r\")\n \t(vec_select:DI"}]}