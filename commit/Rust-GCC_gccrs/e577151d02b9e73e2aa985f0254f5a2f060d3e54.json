{"sha": "e577151d02b9e73e2aa985f0254f5a2f060d3e54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU3NzE1MWQwMmI5ZTczZTJhYTk4NWYwMjU0ZjVhMmYwNjBkM2U1NA==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2020-03-27T22:39:03Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-15T08:04:26Z"}, "message": "[Ada] Support aspect Relaxed_Initialization and attribute Initialized\n\n2020-06-15  Piotr Trojanek  <trojanek@adacore.com>\n\ngcc/ada/\n\n\t* aspects.ads (Aspect_Id): Add Aspect_Relaxed_Initialization.\n\t(Implementation_Defined_Aspect): Add new aspect.\n\t(Aspect_Argument): Add new aspect with Optional_Expression\n\targument.\n\t(Is_Representation_Aspect): Add new aspect as a\n\tnon-representation one.\n\t(Aspect_Names): Add name for the new aspect.\n\t(Aspect_Delay): Add new aspect as a non-delayed one.\n\t* sem_ch3.adb: Minor reformatting.\n\t* einfo.ads, einfo.adb (Is_Relaxed_Initialization_State): New\n\tquery; reuses existing code for querying abstract state options.\n\t* exp_attr.adb (Expand_N_Attribute_Reference): For now ignore\n\tattribute 'Initialized.\n\t* sem_attr.adb (Analyze_Attribute_Old_Result): Allow attribute\n\t'Result to be used in the aspect Relaxed_Initialization\n\texpression.\n\t(Analyze_Attribute): Analyze attribute 'Initialized; based on\n\texisting code for attribute 'Valid_Scalars.\n\t(Eval_Attribute): Do not expect attribute 'Initialized, just\n\tlike attribute 'Valid_Scalars is not expected.\n\t* sem_ch13.adb (Analyze_Aspect_Relaxed_Initialization): New\n\troutine.\n\t(Analyze_Aspect_Specifications): Analyze new aspect in a\n\tdedicated routine.\n\t(Check_Aspect_At_Freeze_Point): Do not expect new aspect.\n\t* sem_prag.adb (Analyze_Abstract_State): Support option\n\tRelaxed_Initialization on abstract states.\n\t* sem_util.ads, sem_util.adb (Has_Relaxed_Initialization): New\n\tquery for the GNATprove backend.\n\t* snames.ads-tmpl (Snames): Add Name_Ids for the new aspect and\n\tattribute; add an Attribute_Id for the new attribute.", "tree": {"sha": "9afd7a3467a20949924b55fb50d45d9c50200134", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9afd7a3467a20949924b55fb50d45d9c50200134"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e577151d02b9e73e2aa985f0254f5a2f060d3e54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e577151d02b9e73e2aa985f0254f5a2f060d3e54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e577151d02b9e73e2aa985f0254f5a2f060d3e54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e577151d02b9e73e2aa985f0254f5a2f060d3e54/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a920eb51077cd465472eabb24a49b3e4ca30e93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a920eb51077cd465472eabb24a49b3e4ca30e93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a920eb51077cd465472eabb24a49b3e4ca30e93"}], "stats": {"total": 413, "additions": 402, "deletions": 11}, "files": [{"sha": "383a52869d3eb28bae23805e3378e84063450841", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e577151d02b9e73e2aa985f0254f5a2f060d3e54/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e577151d02b9e73e2aa985f0254f5a2f060d3e54/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=e577151d02b9e73e2aa985f0254f5a2f060d3e54", "patch": "@@ -138,6 +138,7 @@ package Aspects is\n       Aspect_Refined_Post,                  -- GNAT\n       Aspect_Refined_State,                 -- GNAT\n       Aspect_Relative_Deadline,\n+      Aspect_Relaxed_Initialization,        -- GNAT\n       Aspect_Scalar_Storage_Order,          -- GNAT\n       Aspect_Secondary_Stack_Size,          -- GNAT\n       Aspect_Simple_Storage_Pool,           -- GNAT\n@@ -261,6 +262,7 @@ package Aspects is\n       Aspect_Persistent_BSS             => True,\n       Aspect_Predicate                  => True,\n       Aspect_Pure_Function              => True,\n+      Aspect_Relaxed_Initialization     => True,\n       Aspect_Remote_Access_Type         => True,\n       Aspect_Scalar_Storage_Order       => True,\n       Aspect_Secondary_Stack_Size       => True,\n@@ -400,6 +402,7 @@ package Aspects is\n       Aspect_Refined_Post               => Expression,\n       Aspect_Refined_State              => Expression,\n       Aspect_Relative_Deadline          => Expression,\n+      Aspect_Relaxed_Initialization     => Optional_Expression,\n       Aspect_Scalar_Storage_Order       => Expression,\n       Aspect_Secondary_Stack_Size       => Expression,\n       Aspect_Simple_Storage_Pool        => Name,\n@@ -493,6 +496,7 @@ package Aspects is\n       Aspect_Refined_Post                 => False,\n       Aspect_Refined_State                => False,\n       Aspect_Relative_Deadline            => False,\n+      Aspect_Relaxed_Initialization       => False,\n       Aspect_Scalar_Storage_Order         => True,\n       Aspect_Secondary_Stack_Size         => True,\n       Aspect_Simple_Storage_Pool          => True,\n@@ -651,6 +655,7 @@ package Aspects is\n       Aspect_Refined_Post                 => Name_Refined_Post,\n       Aspect_Refined_State                => Name_Refined_State,\n       Aspect_Relative_Deadline            => Name_Relative_Deadline,\n+      Aspect_Relaxed_Initialization       => Name_Relaxed_Initialization,\n       Aspect_Remote_Access_Type           => Name_Remote_Access_Type,\n       Aspect_Remote_Call_Interface        => Name_Remote_Call_Interface,\n       Aspect_Remote_Types                 => Name_Remote_Types,\n@@ -912,6 +917,7 @@ package Aspects is\n       Aspect_Refined_Global               => Never_Delay,\n       Aspect_Refined_Post                 => Never_Delay,\n       Aspect_Refined_State                => Never_Delay,\n+      Aspect_Relaxed_Initialization       => Never_Delay,\n       Aspect_SPARK_Mode                   => Never_Delay,\n       Aspect_Synchronization              => Never_Delay,\n       Aspect_Test_Case                    => Never_Delay,"}, {"sha": "eb6ae1728a00ff10ac84e85ced5a3dfa45ca34c0", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e577151d02b9e73e2aa985f0254f5a2f060d3e54/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e577151d02b9e73e2aa985f0254f5a2f060d3e54/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=e577151d02b9e73e2aa985f0254f5a2f060d3e54", "patch": "@@ -8249,6 +8249,21 @@ package body Einfo is\n           and then Is_Protected_Type (Corresponding_Concurrent_Type (Id));\n    end Is_Protected_Record_Type;\n \n+   -------------------------------------\n+   -- Is_Relaxed_Initialization_State --\n+   -------------------------------------\n+\n+   function Is_Relaxed_Initialization_State (Id : E) return B is\n+   begin\n+      --  To qualify, the abstract state must appear with simple option\n+      --  \"Relaxed_Initialization\" (??? add reference to SPARK RM once the\n+      --  Relaxed_Initialization aspect is described there).\n+\n+      return\n+        Ekind (Id) = E_Abstract_State\n+          and then Has_Option (Id, Name_Relaxed_Initialization);\n+   end Is_Relaxed_Initialization_State;\n+\n    --------------------------------\n    -- Is_Standard_Character_Type --\n    --------------------------------"}, {"sha": "346a15eac5b50118a3a7c82d9919604496e9285c", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e577151d02b9e73e2aa985f0254f5a2f060d3e54/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e577151d02b9e73e2aa985f0254f5a2f060d3e54/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=e577151d02b9e73e2aa985f0254f5a2f060d3e54", "patch": "@@ -3184,6 +3184,10 @@ package Einfo is\n --       Applies to all entities, true for record types and subtypes,\n --       includes class-wide types and subtypes (which are also records).\n \n+--    Is_Relaxed_Initialization_State (synthesized)\n+--       Applies to all entities, true for abstract states that are subject to\n+--       option Relaxed_Initialization.\n+\n --    Is_Remote_Call_Interface (Flag62)\n --       Defined in all entities. Set in E_Package and E_Generic_Package\n --       entities to which a pragma Remote_Call_Interface is applied, and\n@@ -5832,6 +5836,7 @@ package Einfo is\n    --    Has_Null_Visible_Refinement         (synth)\n    --    Is_External_State                   (synth)\n    --    Is_Null_State                       (synth)\n+   --    Is_Relaxed_Initialization_State     (synth)\n    --    Is_Synchronized_State               (synth)\n    --    Partial_Refinement_Constituents     (synth)\n \n@@ -7669,6 +7674,7 @@ package Einfo is\n    function Is_Protected_Component              (Id : E) return B;\n    function Is_Protected_Interface              (Id : E) return B;\n    function Is_Protected_Record_Type            (Id : E) return B;\n+   function Is_Relaxed_Initialization_State     (Id : E) return B;\n    function Is_Standard_Character_Type          (Id : E) return B;\n    function Is_Standard_String_Type             (Id : E) return B;\n    function Is_String_Type                      (Id : E) return B;"}, {"sha": "08bea2b531ac637a25799e39d8d0b9dc844be16c", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e577151d02b9e73e2aa985f0254f5a2f060d3e54/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e577151d02b9e73e2aa985f0254f5a2f060d3e54/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=e577151d02b9e73e2aa985f0254f5a2f060d3e54", "patch": "@@ -3737,6 +3737,25 @@ package body Exp_Attr is\n       when Attribute_Img =>\n          Exp_Imgv.Expand_Image_Attribute (N);\n \n+      -----------------\n+      -- Initialized --\n+      -----------------\n+\n+      --  For execution, we could either implement an approximation of this\n+      --  aspect, or use Valid_Scalars as a first approximation. For now we do\n+      --  the latter.\n+\n+      when Attribute_Initialized =>\n+         Rewrite\n+           (N,\n+            Make_Attribute_Reference\n+              (Sloc           => Loc,\n+               Prefix         => Pref,\n+               Attribute_Name => Name_Valid_Scalars,\n+               Expressions    => Exprs));\n+\n+         Analyze_And_Resolve (N);\n+\n       -----------\n       -- Input --\n       -----------"}, {"sha": "2bb24a29aab0a3c7f1aaabb78c6eb2ce9fb62b38", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e577151d02b9e73e2aa985f0254f5a2f060d3e54/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e577151d02b9e73e2aa985f0254f5a2f060d3e54/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=e577151d02b9e73e2aa985f0254f5a2f060d3e54", "patch": "@@ -1324,6 +1324,15 @@ package body Sem_Attr is\n             then\n                null;\n \n+            --  Attribute 'Result is allowed to appear in aspect\n+            --  Relaxed_Initialization (??? add reference to SPARK RM once this\n+            --  attribute is described there).\n+\n+            elsif Prag_Nam = Name_Relaxed_Initialization\n+              and then Aname = Name_Result\n+            then\n+               null;\n+\n             elsif Nam_In (Prag_Nam, Name_Post,\n                                     Name_Post_Class,\n                                     Name_Postcondition,\n@@ -4146,6 +4155,26 @@ package body Sem_Attr is\n       when Attribute_Img =>\n          Analyze_Image_Attribute (Standard_String);\n \n+      -----------------\n+      -- Initialized --\n+      -----------------\n+\n+      when Attribute_Initialized =>\n+         Check_E0;\n+\n+         if Comes_From_Source (N) then\n+\n+            --  A similar attribute Valid_Scalars can be prefixed with\n+            --  references to both functions and objects, but this attribute\n+            --  can be only prefixed with references to objects.\n+\n+            if not Is_Object_Reference (P) then\n+               Error_Attr_P (\"prefix of % attribute must be object\");\n+            end if;\n+         end if;\n+\n+         Set_Etype (N, Standard_Boolean);\n+\n       -----------\n       -- Input --\n       -----------\n@@ -10231,6 +10260,7 @@ package body Sem_Attr is\n          | Attribute_First_Bit\n          | Attribute_Img\n          | Attribute_Input\n+         | Attribute_Initialized\n          | Attribute_Last_Bit\n          | Attribute_Library_Level\n          | Attribute_Maximum_Alignment"}, {"sha": "503fd150032a920fe350df4143f7f23036fb5625", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e577151d02b9e73e2aa985f0254f5a2f060d3e54/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e577151d02b9e73e2aa985f0254f5a2f060d3e54/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=e577151d02b9e73e2aa985f0254f5a2f060d3e54", "patch": "@@ -1708,6 +1708,9 @@ package body Sem_Ch13 is\n             procedure Analyze_Aspect_Implicit_Dereference;\n             --  Perform analysis of the Implicit_Dereference aspects\n \n+            procedure Analyze_Aspect_Relaxed_Initialization;\n+            --  Perform analysis of aspect Relaxed_Initialization\n+\n             procedure Make_Aitem_Pragma\n               (Pragma_Argument_Associations : List_Id;\n                Pragma_Name                  : Name_Id);\n@@ -2040,6 +2043,179 @@ package body Sem_Ch13 is\n \n             end Analyze_Aspect_Implicit_Dereference;\n \n+            -------------------------------------------\n+            -- Analyze_Aspect_Relaxed_Initialization --\n+            -------------------------------------------\n+\n+            procedure Analyze_Aspect_Relaxed_Initialization is\n+               procedure Analyze_Relaxed_Parameter\n+                 (Subp_Id : Entity_Id;\n+                  Param   : Node_Id;\n+                  Seen    : in out Elist_Id);\n+               --  Analyze parameter that appears in the expression of the\n+               --  aspect Relaxed_Initialization.\n+\n+               -------------------------------\n+               -- Analyze_Relaxed_Parameter --\n+               -------------------------------\n+\n+               procedure Analyze_Relaxed_Parameter\n+                 (Subp_Id : Entity_Id;\n+                  Param   : Node_Id;\n+                  Seen    : in out Elist_Id)\n+               is\n+               begin\n+                  --  The relaxed parameter is a formal parameter\n+\n+                  if Nkind_In (Param, N_Identifier, N_Expanded_Name) then\n+                     Analyze (Param);\n+\n+                     declare\n+                        Item : constant Entity_Id := Entity (Param);\n+                     begin\n+                        --  It must be a formal of the analyzed subprogram\n+\n+                        if Scope (Item) = Subp_Id then\n+\n+                           pragma Assert (Is_Formal (Item));\n+\n+                           --  Detect duplicated items\n+\n+                           if Contains (Seen, Item) then\n+                              Error_Msg_N (\"duplicate aspect % item\", Param);\n+                           else\n+                              Append_New_Elmt (Item, Seen);\n+                           end if;\n+                        else\n+                           Error_Msg_N (\"illegal aspect % item\", Param);\n+                        end if;\n+                     end;\n+\n+                  --  The relaxed parameter is the function's Result attribute\n+\n+                  elsif Is_Attribute_Result (Param) then\n+                     Analyze (Param);\n+\n+                     declare\n+                        Pref : constant Node_Id := Prefix (Param);\n+                     begin\n+                        if Present (Pref)\n+                          and then\n+                            Nkind_In (Pref, N_Identifier, N_Expanded_Name)\n+                          and then\n+                            Entity (Pref) = Subp_Id\n+                        then\n+                           --  Detect duplicated items\n+\n+                           if Contains (Seen, Subp_Id) then\n+                              Error_Msg_N (\"duplicate aspect % item\", Param);\n+                           else\n+                              Append_New_Elmt (Entity (Pref), Seen);\n+                           end if;\n+\n+                        else\n+                           Error_Msg_N (\"illegal aspect % item\", Param);\n+                        end if;\n+                     end;\n+                  else\n+                     Error_Msg_N (\"illegal aspect % item\", Param);\n+                  end if;\n+               end Analyze_Relaxed_Parameter;\n+\n+               --  Local variables\n+\n+               Seen : Elist_Id := No_Elist;\n+               --  Items that appear in the relaxed initialization aspect\n+               --  expression of a subprogram; for detecting duplicates.\n+\n+            --  Start of processing for Analyze_Aspect_Relaxed_Initialization\n+\n+            begin\n+               --  Set name of the aspect for error messages\n+               Error_Msg_Name_1 := Nam;\n+\n+               --  Annotation of a type; no aspect expression is allowed\n+               --  ??? Once the exact rule for this aspect is ready, we will\n+               --  likely reject concurrent types, etc., so let's keep the code\n+               --  for types and variable separate.\n+\n+               if Is_First_Subtype (E) then\n+                  if Present (Expr) then\n+                     Error_Msg_N (\"illegal aspect % expression\", Expr);\n+                  end if;\n+\n+               --  Annotation of a variable; no aspect expression is allowed\n+\n+               elsif Ekind (E) = E_Variable then\n+                  if Present (Expr) then\n+                     Error_Msg_N (\"illegal aspect % expression\", Expr);\n+                  end if;\n+\n+               --  Annotation of a subprogram; aspect expression is required\n+\n+               elsif Is_Subprogram (E) then\n+                  if Present (Expr) then\n+\n+                     --  Subprogram and its formal parameters must be visible\n+                     --  when analyzing the aspect expression.\n+\n+                     pragma Assert (not In_Open_Scopes (E));\n+\n+                     Push_Scope (E);\n+\n+                     if Is_Generic_Subprogram (E) then\n+                        Install_Generic_Formals (E);\n+                     else\n+                        Install_Formals (E);\n+                     end if;\n+\n+                     --  Aspect expression is either an aggregate with list of\n+                     --  parameters (and possibly the Result attribute for a\n+                     --  function).\n+\n+                     if Nkind (Expr) = N_Aggregate then\n+\n+                        --  Component associations are not allowed in the\n+                        --  aspect expression aggregate.\n+\n+                        if Present (Component_Associations (Expr)) then\n+                           Error_Msg_N (\"illegal aspect % expression\", Expr);\n+                        else\n+                           declare\n+                              Param : Node_Id := First (Expressions (Expr));\n+\n+                           begin\n+                              while Present (Param) loop\n+                                 Analyze_Relaxed_Parameter (E, Param, Seen);\n+                                 Next (Param);\n+                              end loop;\n+                           end;\n+                        end if;\n+\n+                        --  Mark the aggregate expression itself as analyzed;\n+                        --  its subexpressions were marked when they themselves\n+                        --  were analyzed.\n+\n+                        Set_Analyzed (Expr);\n+\n+                     --  Otherwise, it is a single name of a subprogram\n+                     --  parameter (or possibly the Result attribute for\n+                     --  a function).\n+\n+                     else\n+                        Analyze_Relaxed_Parameter (E, Expr, Seen);\n+                     end if;\n+\n+                     End_Scope;\n+                  else\n+                     Error_Msg_N (\"missing expression for aspect %\", N);\n+                  end if;\n+\n+               else\n+                  Error_Msg_N (\"inappropriate entity for aspect %\", E);\n+               end if;\n+            end Analyze_Aspect_Relaxed_Initialization;\n+\n             -----------------------\n             -- Make_Aitem_Pragma --\n             -----------------------\n@@ -3332,6 +3508,12 @@ package body Sem_Ch13 is\n                      end;\n                   end if;\n \n+               --  Relaxed_Initialization\n+\n+               when Aspect_Relaxed_Initialization =>\n+                  Analyze_Aspect_Relaxed_Initialization;\n+                  goto Continue;\n+\n                --  Secondary_Stack_Size\n \n                --  Aspect Secondary_Stack_Size needs to be converted into a\n@@ -9942,6 +10124,7 @@ package body Sem_Ch13 is\n             | Aspect_Refined_Global\n             | Aspect_Refined_Post\n             | Aspect_Refined_State\n+            | Aspect_Relaxed_Initialization\n             | Aspect_SPARK_Mode\n             | Aspect_Test_Case\n             | Aspect_Unimplemented"}, {"sha": "2431b260e67edec7e3555e3f7c024b31a3cb64a1", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e577151d02b9e73e2aa985f0254f5a2f060d3e54/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e577151d02b9e73e2aa985f0254f5a2f060d3e54/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=e577151d02b9e73e2aa985f0254f5a2f060d3e54", "patch": "@@ -2814,7 +2814,7 @@ package body Sem_Ch3 is\n       if Present (L) then\n          Context := Parent (L);\n \n-         --  Certain contract annocations have forward visibility semantics and\n+         --  Certain contract annotations have forward visibility semantics and\n          --  must be analyzed after all declarative items have been processed.\n          --  This timing ensures that entities referenced by such contracts are\n          --  visible."}, {"sha": "2b63617b42c23d9fa71bf31ff96920aacf0b2dc0", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e577151d02b9e73e2aa985f0254f5a2f060d3e54/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e577151d02b9e73e2aa985f0254f5a2f060d3e54/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=e577151d02b9e73e2aa985f0254f5a2f060d3e54", "patch": "@@ -11798,7 +11798,7 @@ package body Sem_Prag is\n          --    SIMPLE_OPTION\n          --  | NAME_VALUE_OPTION\n \n-         --  SIMPLE_OPTION ::= Ghost | Synchronous\n+         --  SIMPLE_OPTION ::= Ghost | Relaxed_Initialization | Synchronous\n \n          --  NAME_VALUE_OPTION ::=\n          --    Part_Of => ABSTRACT_STATE\n@@ -11868,15 +11868,16 @@ package body Sem_Prag is\n             is\n                --  Flags used to verify the consistency of options\n \n-               AR_Seen          : Boolean := False;\n-               AW_Seen          : Boolean := False;\n-               ER_Seen          : Boolean := False;\n-               EW_Seen          : Boolean := False;\n-               External_Seen    : Boolean := False;\n-               Ghost_Seen       : Boolean := False;\n-               Others_Seen      : Boolean := False;\n-               Part_Of_Seen     : Boolean := False;\n-               Synchronous_Seen : Boolean := False;\n+               AR_Seen                     : Boolean := False;\n+               AW_Seen                     : Boolean := False;\n+               ER_Seen                     : Boolean := False;\n+               EW_Seen                     : Boolean := False;\n+               External_Seen               : Boolean := False;\n+               Ghost_Seen                  : Boolean := False;\n+               Others_Seen                 : Boolean := False;\n+               Part_Of_Seen                : Boolean := False;\n+               Relaxed_Initialization_Seen : Boolean := False;\n+               Synchronous_Seen            : Boolean := False;\n \n                --  Flags used to store the static value of all external states'\n                --  expressions.\n@@ -12357,6 +12358,12 @@ package body Sem_Prag is\n                            Check_Duplicate_Option (Opt, Synchronous_Seen);\n                            Check_Ghost_Synchronous;\n \n+                        --  Relaxed_Initialization\n+\n+                        elsif Chars (Opt) = Name_Relaxed_Initialization then\n+                           Check_Duplicate_Option\n+                             (Opt, Relaxed_Initialization_Seen);\n+\n                         --  Option Part_Of without an encapsulating state is\n                         --  illegal (SPARK RM 7.1.4(8)).\n "}, {"sha": "9f97f7dfb4ffacac0a8de21f43312a99d8fcc299", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e577151d02b9e73e2aa985f0254f5a2f060d3e54/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e577151d02b9e73e2aa985f0254f5a2f060d3e54/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=e577151d02b9e73e2aa985f0254f5a2f060d3e54", "patch": "@@ -12424,6 +12424,123 @@ package body Sem_Util is\n       end if;\n    end Has_Private_Component;\n \n+   --------------------------------\n+   -- Has_Relaxed_Initialization --\n+   --------------------------------\n+\n+   function Has_Relaxed_Initialization (E : Entity_Id) return Boolean is\n+\n+      function Denotes_Relaxed_Parameter\n+        (Expr  : Node_Id;\n+         Param : Entity_Id)\n+         return Boolean;\n+      --  Returns True iff expression Expr denotes a formal parameter or\n+      --  function Param (through its attribute Result).\n+\n+      -------------------------------\n+      -- Denotes_Relaxed_Parameter --\n+      -------------------------------\n+\n+      function Denotes_Relaxed_Parameter\n+        (Expr  : Node_Id;\n+         Param : Entity_Id)\n+         return Boolean\n+      is\n+      begin\n+         if Nkind_In (Expr, N_Identifier, N_Expanded_Name) then\n+            return Entity (Expr) = Param;\n+         else\n+            pragma Assert (Is_Attribute_Result (Expr));\n+            return Entity (Prefix (Expr)) = Param;\n+         end if;\n+      end Denotes_Relaxed_Parameter;\n+\n+   --  Start of processing for Has_Relaxed_Initialization\n+\n+   begin\n+      --  When analyzing, we checked all syntax legality rules for the aspect\n+      --  Relaxed_Initialization, but didn't store the property anywhere (e.g.\n+      --  as an Einfo flag). To query the property we look directly at the AST,\n+      --  but now without any syntactic checks.\n+\n+      case Ekind (E) is\n+         --  Abstract states have option Relaxed_Initialization\n+\n+         when E_Abstract_State =>\n+            return Is_Relaxed_Initialization_State (E);\n+\n+         --  Variables have this aspect attached directly\n+\n+         when E_Variable =>\n+            return Has_Aspect (E, Aspect_Relaxed_Initialization);\n+\n+         --  Types have this aspect attached directly (though we only allow it\n+         --  to be specified for the first subtype).\n+\n+         when Type_Kind =>\n+            pragma Assert (Is_First_Subtype (E));\n+            return Has_Aspect (E, Aspect_Relaxed_Initialization);\n+\n+         --  Formal parameters and functions have the Relaxed_Initialization\n+         --  aspect attached to the subprogram entity and must be listed in\n+         --  the aspect expression.\n+\n+         when Formal_Kind\n+            | E_Function\n+         =>\n+            declare\n+               Subp_Id     : Entity_Id;\n+               Aspect_Expr : Node_Id;\n+               Param_Expr  : Node_Id;\n+\n+            begin\n+               if Is_Formal (E) then\n+                  Subp_Id := Scope (E);\n+               else\n+                  Subp_Id := E;\n+               end if;\n+\n+               if Has_Aspect (Subp_Id, Aspect_Relaxed_Initialization) then\n+                  Aspect_Expr :=\n+                    Find_Value_Of_Aspect (E, Aspect_Relaxed_Initialization);\n+\n+                  --  Aspect expression is either an aggregate, e.g.:\n+                  --\n+                  --    function F (X : Integer) return Integer\n+                  --      with Relaxed_Initialization => (X, F'Result);\n+\n+                  if Nkind (Aspect_Expr) = N_Aggregate then\n+\n+                     Param_Expr := First (Expressions (Aspect_Expr));\n+\n+                     while Present (Param_Expr) loop\n+                        if Denotes_Relaxed_Parameter (Param_Expr, E) then\n+                           return True;\n+                        end if;\n+\n+                        Next (Param_Expr);\n+                     end loop;\n+\n+                     return False;\n+\n+                  --  or it is a single identifier, e.g.:\n+                  --\n+                  --    function F (X : Integer) return Integer\n+                  --      with Relaxed_Initialization => X;\n+\n+                  else\n+                     return Denotes_Relaxed_Parameter (Aspect_Expr, E);\n+                  end if;\n+               else\n+                  return False;\n+               end if;\n+            end;\n+\n+         when others =>\n+            raise Program_Error;\n+      end case;\n+   end Has_Relaxed_Initialization;\n+\n    ----------------------\n    -- Has_Signed_Zeros --\n    ----------------------"}, {"sha": "5aac8b8dc8017848237815d7c4b101d112a6afe7", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e577151d02b9e73e2aa985f0254f5a2f060d3e54/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e577151d02b9e73e2aa985f0254f5a2f060d3e54/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=e577151d02b9e73e2aa985f0254f5a2f060d3e54", "patch": "@@ -1380,6 +1380,11 @@ package Sem_Util is\n    --  Check if a type has a (sub)component of a private type that has not\n    --  yet received a full declaration.\n \n+   function Has_Relaxed_Initialization (E : Entity_Id) return Boolean;\n+   --  Returns True iff entity E, which can be either a type, a variable, an\n+   --  abstract state or a function, is subject to the Relaxed_Initialization\n+   --  aspect.\n+\n    function Has_Signed_Zeros (E : Entity_Id) return Boolean;\n    --  Determines if the floating-point type E supports signed zeros.\n    --  Returns False if E is not a floating-point type."}, {"sha": "8d6ba414da32386e900143315b81b75a81cc2464", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e577151d02b9e73e2aa985f0254f5a2f060d3e54/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e577151d02b9e73e2aa985f0254f5a2f060d3e54/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=e577151d02b9e73e2aa985f0254f5a2f060d3e54", "patch": "@@ -148,6 +148,7 @@ package Snames is\n    Name_Dimension_System               : constant Name_Id := N + $;\n    Name_Disable_Controlled             : constant Name_Id := N + $;\n    Name_Dynamic_Predicate              : constant Name_Id := N + $;\n+   Name_Relaxed_Initialization         : constant Name_Id := N + $;\n    Name_Static_Predicate               : constant Name_Id := N + $;\n    Name_Synchronization                : constant Name_Id := N + $;\n    Name_Unimplemented                  : constant Name_Id := N + $;\n@@ -953,6 +954,7 @@ package Snames is\n    Name_Has_Tagged_Values              : constant Name_Id := N + $; -- GNAT\n    Name_Identity                       : constant Name_Id := N + $;\n    Name_Implicit_Dereference           : constant Name_Id := N + $; -- GNAT\n+   Name_Initialized                    : constant Name_Id := N + $; -- GNAT\n    Name_Integer_Value                  : constant Name_Id := N + $; -- GNAT\n    Name_Invalid_Value                  : constant Name_Id := N + $; -- GNAT\n    Name_Iterator_Element               : constant Name_Id := N + $; -- GNAT\n@@ -1636,6 +1638,7 @@ package Snames is\n       Attribute_Has_Tagged_Values,\n       Attribute_Identity,\n       Attribute_Implicit_Dereference,\n+      Attribute_Initialized,\n       Attribute_Integer_Value,\n       Attribute_Invalid_Value,\n       Attribute_Iterator_Element,"}]}