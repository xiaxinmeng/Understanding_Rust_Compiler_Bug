{"sha": "0ce858310c2bba03fc030f34f4217cb405020bcf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNlODU4MzEwYzJiYmEwM2ZjMDMwZjM0ZjQyMTdjYjQwNTAyMGJjZg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2019-07-09T07:54:35Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-09T07:54:35Z"}, "message": "[Ada] Wrong resolution of equality operator with overloaded operand\n\nThis patch fixes a code generation error on an equality operation one of\nwhose operands is an overloaded call, and several equality operators are\nvisible. The resolution would succes but in some cases the wrong entity\nwas lwfton the equality node, leading to expansion with the wrong\ninterpretation.  If the equality operation is the operand of a negation,\nthe resolution of the negation must make direct use of the equality\nresolution,\n\n2019-07-09  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_res.adb (Resolve_Equality_Op): If the node was overloaded,\n\tset properly the entity to which the node has been resolved. The\n\toriginal entity is the first one found during analysis, and is\n\tnot necessarily the resolved one.\n\t(Resolve_Op_Not): If the argument of negation is an overloaded\n\tequality operation, call its resolution directly given that the\n\tcontext type does not participate in overload resolution.\n\ngcc/testsuite/\n\n\t* gnat.dg/equal7.adb, gnat.dg/equal7_pkg.adb,\n\tgnat.dg/equal7_pkg.ads: New testcase.\n\nFrom-SVN: r273281", "tree": {"sha": "3f82d544f2d5d5e3a266c7624bc811652b51e7fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f82d544f2d5d5e3a266c7624bc811652b51e7fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ce858310c2bba03fc030f34f4217cb405020bcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ce858310c2bba03fc030f34f4217cb405020bcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ce858310c2bba03fc030f34f4217cb405020bcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ce858310c2bba03fc030f34f4217cb405020bcf/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "16cc65b61a7c00920ff66d45d3b23a9e313dd1b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16cc65b61a7c00920ff66d45d3b23a9e313dd1b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16cc65b61a7c00920ff66d45d3b23a9e313dd1b8"}], "stats": {"total": 130, "additions": 128, "deletions": 2}, "files": [{"sha": "adb86222a5831aaac3b3aaacb17f39ad742f6829", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ce858310c2bba03fc030f34f4217cb405020bcf/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ce858310c2bba03fc030f34f4217cb405020bcf/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0ce858310c2bba03fc030f34f4217cb405020bcf", "patch": "@@ -1,3 +1,13 @@\n+2019-07-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Equality_Op): If the node was overloaded,\n+\tset properly the entity to which the node has been resolved. The\n+\toriginal entity is the first one found during analysis, and is\n+\tnot necessarily the resolved one.\n+\t(Resolve_Op_Not): If the argument of negation is an overloaded\n+\tequality operation, call its resolution directly given that the\n+\tcontext type does not participate in overload resolution.\n+\n 2019-07-09  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* bindo.adb: Remove with and use clauses for Debug.  Add with"}, {"sha": "e32d5478c99ebcca98a1a99bd62866564bdf28a1", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 68, "deletions": 2, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ce858310c2bba03fc030f34f4217cb405020bcf/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ce858310c2bba03fc030f34f4217cb405020bcf/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=0ce858310c2bba03fc030f34f4217cb405020bcf", "patch": "@@ -8437,6 +8437,45 @@ package body Sem_Res is\n             Explain_Redundancy (Original_Node (R));\n          end if;\n \n+         --  If the equality is overloaded and the operands have resolved\n+         --  properly, set the proper equality operator on the node. The\n+         --  current setting is the first one found during analysis, which\n+         --  is not necessarily the one to which the node has resolved.\n+\n+         if Is_Overloaded (N) then\n+            declare\n+               I  : Interp_Index;\n+               It : Interp;\n+            begin\n+               Get_First_Interp (N, I, It);\n+\n+               --  If the equality is user-defined, the type of the operands\n+               --  matches that of the formals. For a predefined operqtor,\n+               --  it is the scope that matters, given that the predefined\n+               --  equality has Any_Type formals. In either case the result\n+               --  type (most often Booleam) must match the context .\n+\n+               while Present (It.Typ) loop\n+                  if Etype (It.Nam) = Typ\n+                    and then\n+                     (Etype (First_Entity (It.Nam)) = Etype (L)\n+                       or else Scope (It.Nam) = Scope (T))\n+                  then\n+                     Set_Entity (N, It.Nam);\n+\n+                     Set_Is_Overloaded (N, False);\n+                     exit;\n+                  end if;\n+\n+                  Get_Next_Interp (I, It);\n+               end loop;\n+\n+               if Present (Alias (Entity (N))) then\n+                  Set_Entity (N, Alias (Entity (N)));\n+               end if;\n+            end;\n+         end if;\n+\n          Check_Unset_Reference (L);\n          Check_Unset_Reference (R);\n          Generate_Operator_Reference (N, T);\n@@ -10034,9 +10073,36 @@ package body Sem_Res is\n          end if;\n \n          --  Complete resolution and evaluation of NOT\n+         --  If argument is an equality and expected type is boolean, that\n+         --  expected type has no effect on resolution, and there are\n+         --  special rules for resolution of Eq, Neq in the presence of\n+         --  overloaded operands, so we directly call its resolution routines.\n+\n+         declare\n+            Opnd : constant Node_Id := Right_Opnd (N);\n+         begin\n+            if B_Typ = Standard_Boolean\n+              and then Nkind_In (Opnd, N_Op_Eq, N_Op_Ne)\n+              and then Is_Overloaded (Opnd)\n+            then\n+               Resolve_Equality_Op (Opnd, B_Typ);\n+               if Ekind (Entity (Opnd)) = E_Function then\n+                  Rewrite_Operator_As_Call (Opnd, Entity (Opnd));\n+               end if;\n+\n+               if not Inside_A_Generic or else Is_Entity_Name (Opnd) then\n+                  Freeze_Expression (Opnd);\n+               end if;\n+\n+               Expand (Opnd);\n+\n+            else\n+               Resolve (Opnd, B_Typ);\n+            end if;\n+\n+            Check_Unset_Reference (Opnd);\n+         end;\n \n-         Resolve (Right_Opnd (N), B_Typ);\n-         Check_Unset_Reference (Right_Opnd (N));\n          Set_Etype (N, B_Typ);\n          Generate_Operator_Reference (N, B_Typ);\n          Eval_Op_Not (N);"}, {"sha": "d50b7b2097f15a236f688ae1a21d91167d34ecbc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ce858310c2bba03fc030f34f4217cb405020bcf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ce858310c2bba03fc030f34f4217cb405020bcf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0ce858310c2bba03fc030f34f4217cb405020bcf", "patch": "@@ -1,3 +1,8 @@\n+2019-07-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/equal7.adb, gnat.dg/equal7_pkg.adb,\n+\tgnat.dg/equal7_pkg.ads: New testcase.\n+\n 2019-07-09  Javier Miranda  <miranda@adacore.com>\n \n \t* gnat.dg/range_check3.adb, gnat.dg/range_check3_pkg.adb,"}, {"sha": "2b278424622dadb060cf4fcf4ebdfcd114fa5caa", "filename": "gcc/testsuite/gnat.dg/equal7.adb", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ce858310c2bba03fc030f34f4217cb405020bcf/gcc%2Ftestsuite%2Fgnat.dg%2Fequal7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ce858310c2bba03fc030f34f4217cb405020bcf/gcc%2Ftestsuite%2Fgnat.dg%2Fequal7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fequal7.adb?ref=0ce858310c2bba03fc030f34f4217cb405020bcf", "patch": "@@ -0,0 +1,15 @@\n+--  { dg-do run }\n+\n+with Equal7_Pkg; use Equal7_Pkg;\n+with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n+procedure Equal7 is\n+   X : constant Integer := 42;\n+\n+begin\n+   if F (X) /= \"\" & ASCII.LF then\n+       null;\n+   end if;\n+   if not (F (X) = \"\" & ASCII.LF) then\n+       null;\n+   end if;\n+end;"}, {"sha": "171343f4577a28a59687cf2593db4fc2d195e7ef", "filename": "gcc/testsuite/gnat.dg/equal7_pkg.adb", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ce858310c2bba03fc030f34f4217cb405020bcf/gcc%2Ftestsuite%2Fgnat.dg%2Fequal7_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ce858310c2bba03fc030f34f4217cb405020bcf/gcc%2Ftestsuite%2Fgnat.dg%2Fequal7_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fequal7_pkg.adb?ref=0ce858310c2bba03fc030f34f4217cb405020bcf", "patch": "@@ -0,0 +1,14 @@\n+package body Equal7_Pkg is\n+\n+   function F (X : Integer) return String is\n+   begin\n+      return To_String (F (X));\n+   end F;\n+\n+   function F (X : Integer) return Unbounded_String is\n+      Result : Unbounded_String;\n+   begin\n+      Append (Result, \"hello\" & X'Img);\n+      return Result;\n+   end;\n+end;"}, {"sha": "8fd601c99b3deae092c655d1ef3d99640b69434c", "filename": "gcc/testsuite/gnat.dg/equal7_pkg.ads", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ce858310c2bba03fc030f34f4217cb405020bcf/gcc%2Ftestsuite%2Fgnat.dg%2Fequal7_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ce858310c2bba03fc030f34f4217cb405020bcf/gcc%2Ftestsuite%2Fgnat.dg%2Fequal7_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fequal7_pkg.ads?ref=0ce858310c2bba03fc030f34f4217cb405020bcf", "patch": "@@ -0,0 +1,16 @@\n+with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n+with Ada.Finalization;      use Ada.Finalization;\n+package Equal7_Pkg is\n+\n+   type Editor_Location is abstract new Controlled with null record;\n+   Nil_Editor_Location : constant Editor_Location'Class;\n+\n+   function F (X : Integer) return Unbounded_String;\n+   function F (X : Integer) return String;\n+\n+private\n+   type Dummy_Editor_Location is new Editor_Location with null record;\n+\n+   Nil_Editor_Location : constant Editor_Location'Class :=\n+     Dummy_Editor_Location'(Controlled with null record);\n+end;"}]}