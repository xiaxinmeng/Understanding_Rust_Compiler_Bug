{"sha": "b5bd3b3c46692ddb40a623b2728c65164f59fed3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjViZDNiM2M0NjY5MmRkYjQwYTYyM2IyNzI4YzY1MTY0ZjU5ZmVkMw==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@issan.cs.uni-dortmund.de", "date": "1998-10-28T16:46:46Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-10-28T16:46:46Z"}, "message": "Andreas Schwab <schwab@issan.cs.uni-dortmund.de>\n\nAndreas Schwab  <schwab@issan.cs.uni-dortmund.de>\n        * function.c (purge_addressof_1): Instead of aborting when a\n        bitfield insertion as a replacement for (MEM (ADDRESSOF)) does not\n        work just put the ADDRESSOF on stack.  Otherwise remember all such\n        successfull replacements, so that exactly the same replacements\n        can be made on the REG_NOTEs.  Remove the special case for CALL\n        insns again.\n        (purge_addressof_replacements): New variable.\n        (purge_addressof): Clear it at end.\n\nFrom-SVN: r23405", "tree": {"sha": "006074cb3723b542f50927fadc8eeb68faab91d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/006074cb3723b542f50927fadc8eeb68faab91d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5bd3b3c46692ddb40a623b2728c65164f59fed3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5bd3b3c46692ddb40a623b2728c65164f59fed3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5bd3b3c46692ddb40a623b2728c65164f59fed3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5bd3b3c46692ddb40a623b2728c65164f59fed3/comments", "author": null, "committer": null, "parents": [{"sha": "0a4be913a4f47e2d22dc63a4b3eb3d851fd6bd6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a4be913a4f47e2d22dc63a4b3eb3d851fd6bd6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a4be913a4f47e2d22dc63a4b3eb3d851fd6bd6d"}], "stats": {"total": 66, "additions": 55, "deletions": 11}, "files": [{"sha": "19085ed17bb3d999127297e68f9e17f0b11be6fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5bd3b3c46692ddb40a623b2728c65164f59fed3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5bd3b3c46692ddb40a623b2728c65164f59fed3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5bd3b3c46692ddb40a623b2728c65164f59fed3", "patch": "@@ -1,3 +1,14 @@\n+Wed Oct 28 16:46:07 1998  Andreas Schwab  <schwab@issan.cs.uni-dortmund.de>\n+    \n+\t* function.c (purge_addressof_1): Instead of aborting when a\n+\tbitfield insertion as a replacement for (MEM (ADDRESSOF)) does not\n+\twork just put the ADDRESSOF on stack.  Otherwise remember all such\n+\tsuccessfull replacements, so that exactly the same replacements\n+\tcan be made on the REG_NOTEs.  Remove the special case for CALL\n+\tinsns again.\n+\t(purge_addressof_replacements): New variable.\n+\t(purge_addressof): Clear it at end.\n+\n Wed Oct 28 14:06:49 1998  Jim Wilson  <wilson@cygnus.com>\n \n \t* dwarfout.c (dwarfout_file_scope_decl): If DECL_CONTEXT, don't abort"}, {"sha": "d2eab67b61ee8c36b7f4de7eab975678500f5e5b", "filename": "gcc/function.c", "status": "modified", "additions": 44, "deletions": 11, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5bd3b3c46692ddb40a623b2728c65164f59fed3/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5bd3b3c46692ddb40a623b2728c65164f59fed3/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=b5bd3b3c46692ddb40a623b2728c65164f59fed3", "patch": "@@ -2818,6 +2818,10 @@ put_addressof_into_stack (r)\n \t\t      TREE_USED (decl) || DECL_INITIAL (decl) != 0);\n }\n \n+/* List of replacements made below in purge_addressof_1 when creating\n+   bitfield insertions.  */\n+static rtx purge_addressof_replacements;\n+\n /* Helper function for purge_addressof.  See if the rtx expression at *LOC\n    in INSN needs to be changed.  If FORCE, always put any ADDRESSOFs into\n    the stack.  */\n@@ -2880,6 +2884,25 @@ purge_addressof_1 (loc, insn, force, store)\n \t{\n \t  int size_x, size_sub;\n \n+\t  if (!insn)\n+\t    {\n+\t      /* When processing REG_NOTES look at the list of\n+\t\t replacements done on the insn to find the register that X\n+\t\t was replaced by.  */\n+\t      rtx tem;\n+\n+\t      for (tem = purge_addressof_replacements; tem != NULL_RTX;\n+\t\t   tem = XEXP (XEXP (tem, 1), 1))\n+\t\tif (rtx_equal_p (x, XEXP (tem, 0)))\n+\t\t  {\n+\t\t    *loc = XEXP (XEXP (tem, 1), 0);\n+\t\t    return;\n+\t\t  }\n+\n+\t      /* There should always be such a replacement.  */\n+\t      abort ();\n+\t    }\n+\n \t  size_x = GET_MODE_BITSIZE (GET_MODE (x));\n \t  size_sub = GET_MODE_BITSIZE (GET_MODE (sub));\n \n@@ -2895,12 +2918,15 @@ purge_addressof_1 (loc, insn, force, store)\n \n \t      if (store)\n \t\t{\n-\t\t  /* If we can't replace with a register, be afraid.  */\n-\n \t\t  start_sequence ();\n \t\t  val = gen_reg_rtx (GET_MODE (x));\n \t\t  if (! validate_change (insn, loc, val, 0))\n-\t\t    abort ();\n+\t\t    {\n+\t\t      /* Discard the current sequence and put the\n+\t\t\t ADDRESSOF on stack.  */\n+\t\t      end_sequence ();\n+\t\t      goto give_up;\n+\t\t    }\n \t\t  seq = gen_sequence ();\n \t\t  end_sequence ();\n \t\t  emit_insn_before (seq, insn);\n@@ -2922,21 +2948,33 @@ purge_addressof_1 (loc, insn, force, store)\n \t\t\t\t\t   GET_MODE_SIZE (GET_MODE (sub)),\n \t\t\t\t\t   GET_MODE_SIZE (GET_MODE (sub)));\n \n-\t\t  /* If we can't replace with a register, be afraid.  */\n \t\t  if (! validate_change (insn, loc, val, 0))\n-\t\t    abort ();\n+\t\t    {\n+\t\t      /* Discard the current sequence and put the\n+\t\t\t ADDRESSOF on stack.  */\n+\t\t      end_sequence ();\n+\t\t      goto give_up;\n+\t\t    }\n \n \t\t  seq = gen_sequence ();\n \t\t  end_sequence ();\n \t\t  emit_insn_before (seq, insn);\n \t\t}\n \n+\t      /* Remember the replacement so that the same one can be done\n+\t\t on the REG_NOTES.  */\n+\t      purge_addressof_replacements\n+\t\t= gen_rtx_EXPR_LIST (VOIDmode, x,\n+\t\t\t\t     gen_rtx_EXPR_LIST (VOIDmode, val,\n+\t\t\t\t\t\t\tpurge_addressof_replacements));\n+\n \t      /* We replaced with a reg -- all done.  */\n \t      return;\n \t    }\n \t}\n       else if (validate_change (insn, loc, sub, 0))\n \tgoto restart;\n+    give_up:;\n       /* else give up and put it into the stack */\n     }\n   else if (code == ADDRESSOF)\n@@ -2950,12 +2988,6 @@ purge_addressof_1 (loc, insn, force, store)\n       purge_addressof_1 (&SET_SRC (x), insn, force, 0);\n       return;\n     }\n-  else if (code == CALL)\n-    {\n-      purge_addressof_1 (&XEXP (x, 0), insn, 1, 0);\n-      purge_addressof_1 (&XEXP (x, 1), insn, force, 0);\n-      return;\n-    }\n \n   /* Scan all subexpressions. */\n   fmt = GET_RTX_FORMAT (code);\n@@ -2985,6 +3017,7 @@ purge_addressof (insns)\n \tpurge_addressof_1 (&PATTERN (insn), insn,\n \t\t\t   asm_noperands (PATTERN (insn)) > 0, 0);\n \tpurge_addressof_1 (&REG_NOTES (insn), NULL_RTX, 0, 0);\n+\tpurge_addressof_replacements = 0;\n       }\n }\n \f"}]}