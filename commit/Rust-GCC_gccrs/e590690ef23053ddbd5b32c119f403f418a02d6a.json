{"sha": "e590690ef23053ddbd5b32c119f403f418a02d6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU5MDY5MGVmMjMwNTNkZGJkNWIzMmMxMTlmNDAzZjQxOGEwMmQ2YQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-05-27T17:57:01Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-05-27T17:57:01Z"}, "message": "decl.c (gnat_to_gnu_entity): Move down code applying atomic checks to the object.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Variable>: Move down\n\tcode applying atomic checks to the object.\n\nFrom-SVN: r223767", "tree": {"sha": "870c6543515c3bb53f9a7eea4a01b95a86580fe5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/870c6543515c3bb53f9a7eea4a01b95a86580fe5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e590690ef23053ddbd5b32c119f403f418a02d6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e590690ef23053ddbd5b32c119f403f418a02d6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e590690ef23053ddbd5b32c119f403f418a02d6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e590690ef23053ddbd5b32c119f403f418a02d6a/comments", "author": null, "committer": null, "parents": [{"sha": "b6840fb7da103cb5b722b50e5fc681b573bd8030", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6840fb7da103cb5b722b50e5fc681b573bd8030", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6840fb7da103cb5b722b50e5fc681b573bd8030"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "98d5ea9586980d668d0757b30e5b3e038e0fdce5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e590690ef23053ddbd5b32c119f403f418a02d6a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e590690ef23053ddbd5b32c119f403f418a02d6a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e590690ef23053ddbd5b32c119f403f418a02d6a", "patch": "@@ -1,3 +1,8 @@\n+2015-05-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Variable>: Move down\n+\tcode applying atomic checks to the object.\n+\n 2015-05-27  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_aux.adb: Minor rewording."}, {"sha": "da352c2d9398363a287c953a6bd9fb6494829e16", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e590690ef23053ddbd5b32c119f403f418a02d6a/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e590690ef23053ddbd5b32c119f403f418a02d6a/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=e590690ef23053ddbd5b32c119f403f418a02d6a", "patch": "@@ -881,15 +881,6 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t    check_ok_for_atomic_type (gnu_inner, gnat_entity, true);\n \t  }\n \n-\t/* Now check if the type of the object allows atomic access.  Note\n-\t   that we must test the type, even if this object has size and\n-\t   alignment to allow such access, because we will be going inside\n-\t   the padded record to assign to the object.  We could fix this by\n-\t   always copying via an intermediate value, but it's not clear it's\n-\t   worth the effort.  */\n-\tif (Is_Atomic_Or_VFA (gnat_entity))\n-\t  check_ok_for_atomic_type (gnu_type, gnat_entity, false);\n-\n \t/* If this is an aliased object with an unconstrained nominal subtype,\n \t   make a type that includes the template.  */\n \tif (Is_Constr_Subt_For_UN_Aliased (Etype (gnat_entity))\n@@ -955,6 +946,10 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t\t\tdebug_info_p, gnat_entity);\n \t  }\n \n+\t/* Now check if the type of the object allows atomic access.  */\n+\tif (Is_Atomic_Or_VFA (gnat_entity))\n+\t  check_ok_for_atomic_type (gnu_type, gnat_entity, false);\n+\n \t/* If this is a renaming, avoid as much as possible to create a new\n \t   object.  However, in some cases, creating it is required because\n \t   renaming can be applied to objects that are not names in Ada."}]}