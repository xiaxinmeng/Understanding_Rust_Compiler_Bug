{"sha": "ddda05980f4f5b083d77b7c35555bd9dc03592d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRkYTA1OTgwZjRmNWIwODNkNzdiN2MzNTU1NWJkOWRjMDM1OTJkOQ==", "commit": {"author": {"name": "Szabolcs Nagy", "email": "szabolcs.nagy@arm.com", "date": "2015-06-02T16:21:18Z"}, "committer": {"name": "Szabolcs Nagy", "email": "nsz@gcc.gnu.org", "date": "2015-06-02T16:21:18Z"}, "message": "[AArch64][PR 66136] rewrite geniterators.sh in awk\n\n2015-06-02  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n\n\tPR target/66136\n\t* config/aarch64/geniterators.sh: Rewrite in awk.\n\nFrom-SVN: r224031", "tree": {"sha": "9a4cc46a42becaf700f1738a27b1f0817e439448", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a4cc46a42becaf700f1738a27b1f0817e439448"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddda05980f4f5b083d77b7c35555bd9dc03592d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddda05980f4f5b083d77b7c35555bd9dc03592d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddda05980f4f5b083d77b7c35555bd9dc03592d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddda05980f4f5b083d77b7c35555bd9dc03592d9/comments", "author": {"login": "nsz-arm", "id": 30925343, "node_id": "MDQ6VXNlcjMwOTI1MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/30925343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsz-arm", "html_url": "https://github.com/nsz-arm", "followers_url": "https://api.github.com/users/nsz-arm/followers", "following_url": "https://api.github.com/users/nsz-arm/following{/other_user}", "gists_url": "https://api.github.com/users/nsz-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsz-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsz-arm/subscriptions", "organizations_url": "https://api.github.com/users/nsz-arm/orgs", "repos_url": "https://api.github.com/users/nsz-arm/repos", "events_url": "https://api.github.com/users/nsz-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/nsz-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "755afe2e51be1cae4d92b3bd3da93ea2a20fbb90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/755afe2e51be1cae4d92b3bd3da93ea2a20fbb90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/755afe2e51be1cae4d92b3bd3da93ea2a20fbb90"}], "stats": {"total": 72, "additions": 52, "deletions": 20}, "files": [{"sha": "f1875880fb1d87ce8cf213f6c96fe960a46b2972", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddda05980f4f5b083d77b7c35555bd9dc03592d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddda05980f4f5b083d77b7c35555bd9dc03592d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ddda05980f4f5b083d77b7c35555bd9dc03592d9", "patch": "@@ -1,3 +1,8 @@\n+2015-06-02  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n+\n+\tPR target/66136\n+\t* config/aarch64/geniterators.sh: Rewrite in awk.\n+\n 2015-06-02  Martin Liska  <mliska@suse.cz>\n \n \t* alloc-pool.h (pool_allocator::pool_allocator): Set implicit"}, {"sha": "5a51d29e6d3bcad9e57f2d3baade814390184403", "filename": "gcc/config/aarch64/geniterators.sh", "status": "modified", "additions": 47, "deletions": 20, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddda05980f4f5b083d77b7c35555bd9dc03592d9/gcc%2Fconfig%2Faarch64%2Fgeniterators.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddda05980f4f5b083d77b7c35555bd9dc03592d9/gcc%2Fconfig%2Faarch64%2Fgeniterators.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fgeniterators.sh?ref=ddda05980f4f5b083d77b7c35555bd9dc03592d9", "patch": "@@ -22,25 +22,52 @@\n # Generate aarch64-builtin-iterators.h, a file containing a series of\n # BUILTIN_<ITERATOR> macros, which expand to VAR<N> Macros covering the\n # same set of modes as the iterator in iterators.md\n-\n-echo \"/* -*- buffer-read-only: t -*- */\"\n-echo \"/* Generated automatically by geniterators.sh from iterators.md.  */\"\n-echo \"#ifndef GCC_AARCH64_ITERATORS_H\"\n-echo \"#define GCC_AARCH64_ITERATORS_H\"\n-\n-# Strip newlines, create records marked ITERATOR, and strip junk (anything\n-# which does not have a matching brace because it contains characters we\n+#\n+# Find the <ITERATOR> definitions (may span several lines), skip the ones\n+# which does not have a simple format because it contains characters we\n # don't want to or can't handle (e.g P, PTR iterators change depending on\n # Pmode and ptr_mode).\n-export LC_ALL=C\n-cat $1 | tr \"\\n\" \" \" \\\n-       | sed 's/(define_mode_iterator \\([A-Za-z0-9_]*\\) \\([]\\[A-Z0-9 \\t]*\\)/\\n#define BUILTIN_\\1(T, N, MAP) \\\\ \\2\\n/g' \\\n-       | grep '#define [A-Z0-9_(), \\\\]* \\[[A-Z0-9[:space:]]*]' \\\n-       | sed 's/\\t//g' \\\n-       | sed 's/  */ /g' \\\n-       | sed 's/ \\[\\([A-Z0-9 ]*\\)]/\\n\\1/' \\\n-       | awk ' BEGIN { FS = \" \" ; OFS = \", \"} \\\n-\t       /#/ { print } \\\n-               ! /#/ { $1 = $1 ; printf \"  VAR%d (T, N, MAP, %s)\\n\", NF, tolower($0) }'\n-\n-echo \"#endif /* GCC_AARCH64_ITERATORS_H  */\"\n+LC_ALL=C awk '\n+BEGIN {\n+\tprint \"/* -*- buffer-read-only: t -*- */\"\n+\tprint \"/* Generated automatically by geniterators.sh from iterators.md.  */\"\n+\tprint \"#ifndef GCC_AARCH64_ITERATORS_H\"\n+\tprint \"#define GCC_AARCH64_ITERATORS_H\"\n+}\n+\n+{\n+\tsub(/;.*/, \"\")\n+}\n+\n+iterdef {\n+\ts = s \" \" $0\n+}\n+\n+!iterdef && /\\(define_mode_iterator/ {\n+\titerdef = 1\n+\ts = $0\n+\tsub(/.*\\(define_mode_iterator/, \"\", s)\n+}\n+\n+iterdef && s ~ /\\)/ {\n+\titerdef = 0\n+\n+\tgsub(/[ \\t]+/, \" \", s)\n+\tsub(/ *\\).*/, \"\", s)\n+\tsub(/^ /, \"\", s)\n+\tif (s !~ /^[A-Za-z0-9_]+ \\[[A-Z0-9 ]*\\]$/)\n+\t\tnext\n+\tsub(/\\[ */, \"\", s)\n+\tsub(/ *\\]/, \"\", s)\n+\n+\tn = split(s, a)\n+\tprintf \"#define BUILTIN_\" a[1] \"(T, N, MAP) \\\\\\n\"\n+\tprintf \"  VAR\" (n-1) \" (T, N, MAP\"\n+\tfor (i = 2; i <= n; i++)\n+\t\tprintf \", \"  tolower(a[i])\n+\tprintf \")\\n\"\n+}\n+\n+END {\n+\tprint \"#endif /* GCC_AARCH64_ITERATORS_H  */\"\n+}' $1"}]}