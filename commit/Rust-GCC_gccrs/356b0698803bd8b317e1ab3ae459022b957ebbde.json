{"sha": "356b0698803bd8b317e1ab3ae459022b957ebbde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU2YjA2OTg4MDNiZDhiMzE3ZTFhYjNhZTQ1OTAyMmI5NTdlYmJkZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-10-24T22:44:47Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-10-24T22:44:47Z"}, "message": "* dwarf2out.c (file_info_cmp): Always return consistent results.\n\nFrom-SVN: r46480", "tree": {"sha": "9ae3be7e784ed0714e0263f7c8732b1d1eb4b649", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ae3be7e784ed0714e0263f7c8732b1d1eb4b649"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/356b0698803bd8b317e1ab3ae459022b957ebbde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/356b0698803bd8b317e1ab3ae459022b957ebbde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/356b0698803bd8b317e1ab3ae459022b957ebbde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/356b0698803bd8b317e1ab3ae459022b957ebbde/comments", "author": null, "committer": null, "parents": [{"sha": "e23381dfb4a651cd26e4143fcbae06381371da3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e23381dfb4a651cd26e4143fcbae06381371da3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e23381dfb4a651cd26e4143fcbae06381371da3c"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "f7ac78c1b3e116c7f17378354483b8ab6bbabf20", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356b0698803bd8b317e1ab3ae459022b957ebbde/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356b0698803bd8b317e1ab3ae459022b957ebbde/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=356b0698803bd8b317e1ab3ae459022b957ebbde", "patch": "@@ -1,3 +1,7 @@\n+Wed Oct 24 18:43:42 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* dwarf2out.c (file_info_cmp): Always return consistent results.\n+\n 2001-10-24  Roger Sayle <roger@eyesopen.com>\n  \n \t* stmt.c (expand_end_case): Index jumptables from zero for"}, {"sha": "caa1e9a77e3faac2e4225ff21994c29a44b0007a", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356b0698803bd8b317e1ab3ae459022b957ebbde/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356b0698803bd8b317e1ab3ae459022b957ebbde/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=356b0698803bd8b317e1ab3ae459022b957ebbde", "patch": "@@ -6573,6 +6573,7 @@ struct dir_info\n \n /* Callback function for file_info comparison.  We sort by looking at\n    the directories in the path.  */\n+\n static int\n file_info_cmp (p1, p2)\n      const void *p1;\n@@ -6583,11 +6584,13 @@ file_info_cmp (p1, p2)\n   unsigned char *cp1;\n   unsigned char *cp2;\n \n-  /* Take care of file names without directories.  */\n-  if (s1->path == s1->fname)\n-    return -1;\n-  else if (s2->path == s2->fname)\n-    return 1;\n+  /* Take care of file names without directories.  We need to make sure that\n+     we return consistent values to qsort since some will get confused if\n+     we return the same value when identical operands are passed in opposite\n+     orders.  So if neither has a directory, return 0 and otherwise return\n+     1 or -1 depending on which one has the directory.  */\n+  if ((s1->path == s1->fname || s2->path == s2->fname))\n+    return (s2->path == s2->fname) - (s1->path == s1->fname);\n \n   cp1 = (unsigned char *) s1->path;\n   cp2 = (unsigned char *) s2->path;\n@@ -6596,17 +6599,14 @@ file_info_cmp (p1, p2)\n     {\n       ++cp1;\n       ++cp2;\n-      /* Reached the end of the first path?  */\n-      if (cp1 == (unsigned char *) s1->fname)\n-\t/* It doesn't really matter in which order files from the\n-\t   same directory are sorted in.  Therefore don't test for\n-\t   the second path reaching the end.  */\n-\treturn -1;\n-      else if (cp2 == (unsigned char *) s2->fname)\n-\treturn 1;\n+      /* Reached the end of the first path?  If so, handle like above.  */\n+      if ((cp1 == (unsigned char *) s1->fname)\n+\t  || (cp2 == (unsigned char *) s2->fname))\n+\treturn ((cp2 == (unsigned char *) s2->fname)\n+\t\t- (cp1 == (unsigned char *) s1->fname));\n \n       /* Character of current path component the same?  */\n-      if (*cp1 != *cp2)\n+      else if (*cp1 != *cp2)\n \treturn *cp1 - *cp2;\n     }\n }"}]}