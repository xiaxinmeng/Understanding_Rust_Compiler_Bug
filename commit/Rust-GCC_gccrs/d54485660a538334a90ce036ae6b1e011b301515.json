{"sha": "d54485660a538334a90ce036ae6b1e011b301515", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU0NDg1NjYwYTUzODMzNGE5MGNlMDM2YWU2YjFlMDExYjMwMTUxNQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-04-29T16:23:18Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-04-29T16:23:18Z"}, "message": "re PR tree-optimization/21030 (ICE in set_value_range building 176.gcc with -O2)\n\ngcc/\n\tPR tree-optimization/21030\n\t* tree-vrp.c (adjust_range_with_scev): Do not create invalid\n\tranges where VR->MAX is smaller than VR->MIN.\n\ntestsuite/\n\tPR tree-optimization/21030\n\t* gcc.dg/tree-ssa/pr21030.c: New.\n\nFrom-SVN: r98999", "tree": {"sha": "7d79e5bb9ea9131043f8689608e39ddf697f7968", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d79e5bb9ea9131043f8689608e39ddf697f7968"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d54485660a538334a90ce036ae6b1e011b301515", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d54485660a538334a90ce036ae6b1e011b301515", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d54485660a538334a90ce036ae6b1e011b301515", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d54485660a538334a90ce036ae6b1e011b301515/comments", "author": null, "committer": null, "parents": [{"sha": "7dcc58cdbc2de85dd27ac79e20550643c7c8953d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dcc58cdbc2de85dd27ac79e20550643c7c8953d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dcc58cdbc2de85dd27ac79e20550643c7c8953d"}], "stats": {"total": 63, "additions": 57, "deletions": 6}, "files": [{"sha": "16e3565911935ff610d9a761a130752ed08d6b4c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d54485660a538334a90ce036ae6b1e011b301515/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d54485660a538334a90ce036ae6b1e011b301515/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d54485660a538334a90ce036ae6b1e011b301515", "patch": "@@ -1,3 +1,9 @@\n+2005-04-28  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\tPR tree-optimization/21030\n+\t* tree-vrp.c (adjust_range_with_scev): Do not create invalid\n+\tranges where VR->MAX is smaller than VR->MIN.\n+\n 2005-04-29  Devang Patel  <dpatel@apple.com>\n \n \tPR tree-optimization/21272"}, {"sha": "7782528491c0afb6e0dc8bff98f7891443726ace", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d54485660a538334a90ce036ae6b1e011b301515/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d54485660a538334a90ce036ae6b1e011b301515/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d54485660a538334a90ce036ae6b1e011b301515", "patch": "@@ -1,3 +1,8 @@\n+2005-04-28  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\tPR tree-optimization/21030\n+\t* gcc.dg/tree-ssa/pr21030.c: New.\n+\n 2005-04-29  Devang Patel  <dpatel@apple.com>\n \n \tPR tree-optimization/21272"}, {"sha": "b7590c0edaa4731df405a680d0fb0fa315c8a9ad", "filename": "gcc/testsuite/gcc.c-torture/compile/pr21030.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d54485660a538334a90ce036ae6b1e011b301515/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr21030.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d54485660a538334a90ce036ae6b1e011b301515/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr21030.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr21030.c?ref=d54485660a538334a90ce036ae6b1e011b301515", "patch": "@@ -0,0 +1,19 @@\n+/* PR tree-optimization/21030\n+   VRP used to create invalid ranges where VR->MIN is greater than\n+   VR->MAX.  */\n+\n+void\n+foo (int unit)\n+{\n+  int i;\n+\n+  for (i = 0; unit; i++, unit--)\n+    {\n+      if (i >= 0)\n+\t{\n+\t  int j = i;\n+\t  while (j)\n+\t    j--;\n+\t}\n+    }\n+}"}, {"sha": "0fe5c7bcbbbdaec452840a1d4a9ff6db2c14e6b9", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d54485660a538334a90ce036ae6b1e011b301515/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d54485660a538334a90ce036ae6b1e011b301515/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=d54485660a538334a90ce036ae6b1e011b301515", "patch": "@@ -893,19 +893,40 @@ adjust_range_with_scev (value_range *vr, struct loop *l, tree var)\n     }\n   else if (vr->type == VR_RANGE)\n     {\n+      tree min = vr->min;\n+      tree max = vr->max;\n+\n       if (init_is_max)\n \t{\n-\t  /* INIT is the maximum value.  If INIT is lower than\n-\t     VR->MAX, set VR->MAX to INIT.  */\n-\t  if (compare_values (init, vr->max) == -1)\n-\t    set_value_range (vr, VR_RANGE, vr->min, init);\n+\t  /* INIT is the maximum value.  If INIT is lower than VR->MAX\n+\t     but no smaller than VR->MIN, set VR->MAX to INIT.  */\n+\t  if (compare_values (init, max) == -1)\n+\t    {\n+\t      max = init;\n+\n+\t      /* If we just created an invalid range with the minimum\n+\t\t greater than the maximum, take the minimum all the\n+\t\t way to -INF.  */\n+\t      if (compare_values (min, max) == 1)\n+\t\tmin = TYPE_MIN_VALUE (TREE_TYPE (min));\n+\t    }\n \t}\n       else\n \t{\n \t  /* If INIT is bigger than VR->MIN, set VR->MIN to INIT.  */\n-\t  if (compare_values (init, vr->min) == 1)\n-\t    set_value_range (vr, VR_RANGE, init, vr->max);\n+\t  if (compare_values (init, min) == 1)\n+\t    {\n+\t      min = init;\n+\n+\t      /* If we just created an invalid range with the minimum\n+\t\t greater than the maximum, take the maximum all the\n+\t\t way to +INF.  */\n+\t      if (compare_values (min, max) == 1)\n+\t\tmax = TYPE_MAX_VALUE (TREE_TYPE (max));\n+\t    }\n \t}\n+\n+      set_value_range (vr, VR_RANGE, min, max);\n     }\n }\n "}]}