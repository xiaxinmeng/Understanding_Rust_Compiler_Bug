{"sha": "b1765bde4181a6e2fb17dd459e8ed7a94c98024a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE3NjViZGU0MTgxYTZlMmZiMTdkZDQ1OWU4ZWQ3YTk0Yzk4MDI0YQ==", "commit": {"author": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2002-02-21T02:34:20Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2002-02-21T02:34:20Z"}, "message": "[multiple changes]\n\n2002-02-20  David Edelsohn  <edelsohn@gnu.org>\n\n        * config/rs6000/rs6000.h (EPILOGUE_USES): Conditionalize\n        VRSAVE_REGNO on TARGET_ALTIVEC.\n\n2002-02-20  Alan Modra  <amodra@bigpond.net.au>\n\n        * config/rs6000/rs6000.c (includes_lshift_p): Mask irrelevant\n        bits of SImode const_int.\n        (includes_rshift_p): Likewise.\n        (print_operand): Call mask_operand and mask64_operand with correct\n        mode.\n        (rs6000_output_function_epilogue): Pad traceback table to word.\n        * config/rs6000/rs6000.h (MASK_64BIT): Correct comment.\n        (EXTRA_CONSTRAINT, 'S' and 'T'): Call mask_operand and\n        mask64_operand with correct mode.\n        (RETURN_IN_MEMORY): Use HOST_WIDE_INT, not HOST_WIDEST_INT.\n        (FUNCTION_ARG_REGNO_P): Correct parentheses.\n\nFrom-SVN: r49923", "tree": {"sha": "f6f2f66ad5cf3ff2eca81682eeb888a684829737", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6f2f66ad5cf3ff2eca81682eeb888a684829737"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1765bde4181a6e2fb17dd459e8ed7a94c98024a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1765bde4181a6e2fb17dd459e8ed7a94c98024a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1765bde4181a6e2fb17dd459e8ed7a94c98024a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1765bde4181a6e2fb17dd459e8ed7a94c98024a/comments", "author": null, "committer": null, "parents": [{"sha": "3babb2e39cd2bf4b5f29d9cf8466216615b1d912", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3babb2e39cd2bf4b5f29d9cf8466216615b1d912", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3babb2e39cd2bf4b5f29d9cf8466216615b1d912"}], "stats": {"total": 45, "additions": 33, "deletions": 12}, "files": [{"sha": "b9378421ef9ed493564d7afc1243a1efa12322ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1765bde4181a6e2fb17dd459e8ed7a94c98024a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1765bde4181a6e2fb17dd459e8ed7a94c98024a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1765bde4181a6e2fb17dd459e8ed7a94c98024a", "patch": "@@ -1,3 +1,22 @@\n+2002-02-20  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.h (EPILOGUE_USES): Conditionalize\n+\tVRSAVE_REGNO on TARGET_ALTIVEC.\n+\n+2002-02-20  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* config/rs6000/rs6000.c (includes_lshift_p): Mask irrelevant\n+\tbits of SImode const_int.\n+\t(includes_rshift_p): Likewise.\n+\t(print_operand): Call mask_operand and mask64_operand with correct\n+\tmode. \n+\t(rs6000_output_function_epilogue): Pad traceback table to word.\n+\t* config/rs6000/rs6000.h (MASK_64BIT): Correct comment.\n+\t(EXTRA_CONSTRAINT, 'S' and 'T'): Call mask_operand and\n+\tmask64_operand with correct mode.\n+\t(RETURN_IN_MEMORY): Use HOST_WIDE_INT, not HOST_WIDEST_INT.\n+\t(FUNCTION_ARG_REGNO_P): Correct parentheses.\n+\n 2002-02-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/4461"}, {"sha": "9698b1f0680754c109a55739c774c83730d004d4", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1765bde4181a6e2fb17dd459e8ed7a94c98024a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1765bde4181a6e2fb17dd459e8ed7a94c98024a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b1765bde4181a6e2fb17dd459e8ed7a94c98024a", "patch": "@@ -5703,7 +5703,7 @@ min_max_operator (op, mode)\n \f\n /* Return 1 if ANDOP is a mask that has no bits on that are not in the\n    mask required to convert the result of a rotate insn into a shift\n-   left insn of SHIFTOP bits.  Both are known to be CONST_INT.  */\n+   left insn of SHIFTOP bits.  Both are known to be SImode CONST_INT.  */\n \n int\n includes_lshift_p (shiftop, andop)\n@@ -5714,7 +5714,7 @@ includes_lshift_p (shiftop, andop)\n \n   shift_mask <<= INTVAL (shiftop);\n \n-  return (INTVAL (andop) & ~shift_mask) == 0;\n+  return (INTVAL (andop) & 0xffffffff & ~shift_mask) == 0;\n }\n \n /* Similar, but for right shift.  */\n@@ -5728,7 +5728,7 @@ includes_rshift_p (shiftop, andop)\n \n   shift_mask >>= INTVAL (shiftop);\n \n-  return (INTVAL (andop) & ~shift_mask) == 0;\n+  return (INTVAL (andop) & 0xffffffff & ~shift_mask) == 0;\n }\n \n /* Return 1 if ANDOP is a mask suitable for use with an rldic insn\n@@ -6378,7 +6378,7 @@ print_operand (file, x, code)\n \t\t\t    \n     case 'm':\n       /* MB value for a mask operand.  */\n-      if (! mask_operand (x, VOIDmode))\n+      if (! mask_operand (x, SImode))\n \toutput_operand_lossage (\"invalid %%m value\");\n \n       val = INT_LOWPART (x);\n@@ -6413,7 +6413,7 @@ print_operand (file, x, code)\n \n     case 'M':\n       /* ME value for a mask operand.  */\n-      if (! mask_operand (x, VOIDmode))\n+      if (! mask_operand (x, SImode))\n \toutput_operand_lossage (\"invalid %%M value\");\n \n       val = INT_LOWPART (x);\n@@ -6543,7 +6543,7 @@ print_operand (file, x, code)\n       /* PowerPC64 mask position.  All 0's and all 1's are excluded.\n \t CONST_INT 32-bit mask is considered sign-extended so any\n \t transition must occur within the CONST_INT, not on the boundary.  */\n-      if (! mask64_operand (x, VOIDmode))\n+      if (! mask64_operand (x, DImode))\n \toutput_operand_lossage (\"invalid %%S value\");\n \n       val = INT_LOWPART (x);\n@@ -9636,6 +9636,8 @@ rs6000_output_function_epilogue (file, size)\n \t Only emit this if the alloca bit was set above.  */\n       if (frame_pointer_needed)\n \tfputs (\"\\t.byte 31\\n\", file);\n+\n+      fputs (\"\\t.align 2\\n\", file);\n     }\n   return;\n }"}, {"sha": "9056cd625f2e2aedf06284921b3524110b78fb5d", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1765bde4181a6e2fb17dd459e8ed7a94c98024a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1765bde4181a6e2fb17dd459e8ed7a94c98024a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=b1765bde4181a6e2fb17dd459e8ed7a94c98024a", "patch": "@@ -191,7 +191,7 @@ extern int target_flags;\n    function, and one less allocable register.  */\n #define MASK_MINIMAL_TOC\t0x00000200\n \n-/* Nonzero for the 64bit model: ints, longs, and pointers are 64 bits.  */\n+/* Nonzero for the 64bit model: longs and pointers are 64 bits.  */\n #define MASK_64BIT\t\t0x00000400\n \n /* Disable use of FPRs.  */\n@@ -1205,14 +1205,14 @@ enum reg_class\n    'Q' means that is a memory operand that is just an offset from a reg.\n    'R' is for AIX TOC entries.\n    'S' is a constant that can be placed into a 64-bit mask operand\n-   'T' is a consatnt that can be placed into a 32-bit mask operand\n+   'T' is a constant that can be placed into a 32-bit mask operand\n    'U' is for V.4 small data references.  */\n \n #define EXTRA_CONSTRAINT(OP, C)\t\t\t\t\t\t\\\n   ((C) == 'Q' ? GET_CODE (OP) == MEM && GET_CODE (XEXP (OP, 0)) == REG\t\\\n    : (C) == 'R' ? LEGITIMATE_CONSTANT_POOL_ADDRESS_P (OP)\t\t\\\n-   : (C) == 'S' ? mask64_operand (OP, VOIDmode)\t\t\t\t\\\n-   : (C) == 'T' ? mask_operand (OP, VOIDmode)\t\t\t\t\\\n+   : (C) == 'S' ? mask64_operand (OP, DImode)\t\t\t\t\\\n+   : (C) == 'T' ? mask_operand (OP, SImode)\t\t\t\t\\\n    : (C) == 'U' ? (DEFAULT_ABI == ABI_V4\t\t\t\t\\\n \t\t   && small_data_operand (OP, GET_MODE (OP)))\t\t\\\n    : 0)\n@@ -1545,7 +1545,7 @@ typedef struct rs6000_stack {\n    On RS/6000, these are r3-r10 and fp1-fp13.\n    On AltiVec, v2 - v13 are used for passing vectors.  */\n #define FUNCTION_ARG_REGNO_P(N)\t\t\t\t\t\t\\\n-  ((unsigned)(((N) - GP_ARG_MIN_REG) < (unsigned)(GP_ARG_NUM_REG))\t\\\n+  (((unsigned)((N) - GP_ARG_MIN_REG) < (unsigned)(GP_ARG_NUM_REG))\t\\\n    || (TARGET_ALTIVEC &&\t\t\t\t\t\t\\\n        (unsigned)((N) - ALTIVEC_ARG_MIN_REG) < (unsigned)(ALTIVEC_ARG_NUM_REG)) \\\n    || ((unsigned)((N) - FP_ARG_MIN_REG) < (unsigned)(FP_ARG_NUM_REG)))\n@@ -1742,7 +1742,7 @@ typedef struct rs6000_args\n \n #define\tEPILOGUE_USES(REGNO)\t\t\t\t\t\\\n   ((reload_completed && (REGNO) == LINK_REGISTER_REGNUM)\t\\\n-   || (REGNO) == VRSAVE_REGNO\t\t\t\t\t\\\n+   || (TARGET_ALTIVEC && (REGNO) == VRSAVE_REGNO)\t\t\\\n    || (current_function_calls_eh_return\t\t\t\t\\\n        && TARGET_AIX\t\t\t\t\t\t\\\n        && (REGNO) == TOC_REGISTER))"}]}