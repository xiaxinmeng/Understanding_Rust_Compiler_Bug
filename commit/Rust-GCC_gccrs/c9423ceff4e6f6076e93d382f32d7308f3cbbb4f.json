{"sha": "c9423ceff4e6f6076e93d382f32d7308f3cbbb4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk0MjNjZWZmNGU2ZjYwNzZlOTNkMzgyZjMyZDczMDhmM2NiYmI0Zg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2012-05-13T18:01:41Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-05-13T18:01:41Z"}, "message": "i386.md (*pushtf): Enable for TARGET_SSE.\n\n\t* config/i386/i386.md (*pushtf): Enable for TARGET_SSE.\n\t(pushtf splitter): Ditto.\n\t(movtf): Ditto.\n\t(*movtf_internal): Ditto. Use V4SFmode for !TARGET_SSE2.\n\t(<code>tf2): Enable for TARGET_SSE.\n\t(*absnegtf2_sse): Ditto.\n\t(copysign<mode>3): Enable TFmode for TARGET_SSE.\n\t(copysign<mode>3_const): Ditto.\n\t(copysign<mode>3_var): Ditto.\n\t* config/i386/sse.md (<code>tf3): Enable for TARGET_SSE.\n\t(*andnottf3): Ditto.  Use V4SFmode for !TARGET_SSE2.\n\t(*<code>tf3): Ditto.\n\t* config/i386/i386.c (struct builtin_description bdesc_args)\n\t<IX86_BUILTIN_FABSQ>: Enable for TARGET_SSE.\n\t<IX86_BUILTIN_COPYSIGNQ>: Ditto.\n\t(ix86_expand_builtin) <IX86_BUILTIN_FABSQ, IX86_BUILTIN_COPYSIGNQ>:\n\tEmit a normal call if SSE isn't available.\n\nFrom-SVN: r187442", "tree": {"sha": "02ea2d343f69c2f24a7eba5e2cefb6d7db655853", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02ea2d343f69c2f24a7eba5e2cefb6d7db655853"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9423ceff4e6f6076e93d382f32d7308f3cbbb4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9423ceff4e6f6076e93d382f32d7308f3cbbb4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9423ceff4e6f6076e93d382f32d7308f3cbbb4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9423ceff4e6f6076e93d382f32d7308f3cbbb4f/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9574478218103f58cdcfce32d76823c48853d06f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9574478218103f58cdcfce32d76823c48853d06f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9574478218103f58cdcfce32d76823c48853d06f"}], "stats": {"total": 55, "additions": 38, "deletions": 17}, "files": [{"sha": "9d452fab44c31fdc1408934106c2995a92c3216a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9423ceff4e6f6076e93d382f32d7308f3cbbb4f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9423ceff4e6f6076e93d382f32d7308f3cbbb4f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c9423ceff4e6f6076e93d382f32d7308f3cbbb4f", "patch": "@@ -2,6 +2,26 @@\n \n \t* common.opt (Wtype-limits): Use EnabledBy.\n \n+2012-05-13  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*pushtf): Enable for TARGET_SSE.\n+\t(pushtf splitter): Ditto.\n+\t(movtf): Ditto.\n+\t(*movtf_internal): Ditto. Use V4SFmode for !TARGET_SSE2.\n+\t(<code>tf2): Enable for TARGET_SSE.\n+\t(*absnegtf2_sse): Ditto.\n+\t(copysign<mode>3): Enable TFmode for TARGET_SSE.\n+\t(copysign<mode>3_const): Ditto.\n+\t(copysign<mode>3_var): Ditto.\n+\t* config/i386/sse.md (<code>tf3): Enable for TARGET_SSE.\n+\t(*andnottf3): Ditto.  Use V4SFmode for !TARGET_SSE2.\n+\t(*<code>tf3): Ditto.\n+\t* config/i386/i386.c (struct builtin_description bdesc_args)\n+\t<IX86_BUILTIN_FABSQ>: Enable for TARGET_SSE.\n+\t<IX86_BUILTIN_COPYSIGNQ>: Ditto.\n+\t(ix86_expand_builtin) <IX86_BUILTIN_FABSQ, IX86_BUILTIN_COPYSIGNQ>:\n+\tEmit a normal call if SSE isn't available.\n+\n 2012-05-13  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/sse.md (<sse>_andnot<mode>3): Handle"}, {"sha": "ad4739b805dedda202cda9a5528bdab30eb9f289", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9423ceff4e6f6076e93d382f32d7308f3cbbb4f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9423ceff4e6f6076e93d382f32d7308f3cbbb4f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c9423ceff4e6f6076e93d382f32d7308f3cbbb4f", "patch": "@@ -26327,6 +26327,9 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_SSE, CODE_FOR_sse_vmrsqrtv4sf2, \"__builtin_ia32_rsqrtss\", IX86_BUILTIN_RSQRTSS, UNKNOWN, (int) V4SF_FTYPE_V4SF_VEC_MERGE },\n   { OPTION_MASK_ISA_SSE, CODE_FOR_sse_vmrcpv4sf2, \"__builtin_ia32_rcpss\", IX86_BUILTIN_RCPSS, UNKNOWN, (int) V4SF_FTYPE_V4SF_VEC_MERGE },\n \n+  { OPTION_MASK_ISA_SSE, CODE_FOR_abstf2, 0, IX86_BUILTIN_FABSQ, UNKNOWN, (int) FLOAT128_FTYPE_FLOAT128 },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_copysigntf3, 0, IX86_BUILTIN_COPYSIGNQ, UNKNOWN, (int) FLOAT128_FTYPE_FLOAT128_FLOAT128 },\n+\n   /* SSE MMX or 3Dnow!A */\n   { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_mmx_uavgv8qi3, \"__builtin_ia32_pavgb\", IX86_BUILTIN_PAVGB, UNKNOWN, (int) V8QI_FTYPE_V8QI_V8QI },\n   { OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A, CODE_FOR_mmx_uavgv4hi3, \"__builtin_ia32_pavgw\", IX86_BUILTIN_PAVGW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI },\n@@ -26510,9 +26513,6 @@ static const struct builtin_description bdesc_args[] =\n \n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_vmsqrtv2df2, \"__builtin_ia32_sqrtsd\", IX86_BUILTIN_SQRTSD, UNKNOWN, (int) V2DF_FTYPE_V2DF_VEC_MERGE },\n \n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_abstf2, 0, IX86_BUILTIN_FABSQ, UNKNOWN, (int) FLOAT128_FTYPE_FLOAT128 },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_copysigntf3, 0, IX86_BUILTIN_COPYSIGNQ, UNKNOWN, (int) FLOAT128_FTYPE_FLOAT128_FLOAT128 },\n-\n   { OPTION_MASK_ISA_SSE, CODE_FOR_sse2_movq128, \"__builtin_ia32_movq128\", IX86_BUILTIN_MOVQ128, UNKNOWN, (int) V2DI_FTYPE_V2DI },\n \n   /* SSE2 MMX */\n@@ -28081,7 +28081,7 @@ ix86_init_builtins (void)\n   def_builtin_const (0, \"__builtin_huge_valq\",\n \t\t     FLOAT128_FTYPE_VOID, IX86_BUILTIN_HUGE_VALQ);\n \n-  /* We will expand them to normal call if SSE2 isn't available since\n+  /* We will expand them to normal call if SSE isn't available since\n      they are used by libgcc. */\n   t = ix86_get_builtin_func_type (FLOAT128_FTYPE_FLOAT128);\n   t = add_builtin_function (\"__builtin_fabsq\", t, IX86_BUILTIN_FABSQ,\n@@ -30215,8 +30215,8 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \t{\n \tcase IX86_BUILTIN_FABSQ:\n \tcase IX86_BUILTIN_COPYSIGNQ:\n-\t  if (!TARGET_SSE2)\n-\t    /* Emit a normal call if SSE2 isn't available.  */\n+\t  if (!TARGET_SSE)\n+\t    /* Emit a normal call if SSE isn't available.  */\n \t    return expand_call (exp, target, ignore);\n \tdefault:\n \t  return ix86_expand_args_builtin (d, exp, target);"}, {"sha": "45db0aca3ed5b1d708c3ddfc7d13b241bdf2e99c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9423ceff4e6f6076e93d382f32d7308f3cbbb4f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9423ceff4e6f6076e93d382f32d7308f3cbbb4f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c9423ceff4e6f6076e93d382f32d7308f3cbbb4f", "patch": "@@ -2708,7 +2708,7 @@\n (define_insn \"*pushtf\"\n   [(set (match_operand:TF 0 \"push_operand\" \"=<,<,<\")\n \t(match_operand:TF 1 \"general_no_elim_operand\" \"x,Fo,*r\"))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_SSE\"\n {\n   /* This insn should be already split before reg-stack.  */\n   gcc_unreachable ();\n@@ -2721,7 +2721,7 @@\n (define_split\n   [(set (match_operand:TF 0 \"push_operand\")\n \t(match_operand:TF 1 \"sse_reg_operand\"))]\n-  \"TARGET_SSE2 && reload_completed\"\n+  \"TARGET_SSE && reload_completed\"\n   [(set (reg:P SP_REG) (plus:P (reg:P SP_REG) (const_int -16)))\n    (set (mem:TF (reg:P SP_REG)) (match_dup 1))])\n \n@@ -2859,7 +2859,7 @@\n (define_expand \"movtf\"\n   [(set (match_operand:TF 0 \"nonimmediate_operand\")\n \t(match_operand:TF 1 \"nonimmediate_operand\"))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_SSE\"\n {\n   ix86_expand_move (TFmode, operands);\n   DONE;\n@@ -2874,7 +2874,7 @@\n (define_insn \"*movtf_internal\"\n   [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=x,x ,m,?*r ,!o\")\n \t(match_operand:TF 1 \"general_operand\"\t   \"C ,xm,x,*roF,F*r\"))]\n-  \"TARGET_SSE2\n+  \"TARGET_SSE\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n@@ -2929,7 +2929,8 @@\n \t\t (const_string \"V4SF\")\n \t       (match_test \"TARGET_AVX\")\n \t\t (const_string \"TI\")\n-\t       (match_test \"optimize_function_for_size_p (cfun)\")\n+\t       (ior (not (match_test \"TARGET_SSE2\"))\n+\t\t    (match_test \"optimize_function_for_size_p (cfun)\"))\n \t\t (const_string \"V4SF\")\n \t       ]\n \t       (const_string \"TI\")))])\n@@ -8710,7 +8711,7 @@\n (define_expand \"<code>tf2\"\n   [(set (match_operand:TF 0 \"register_operand\")\n \t(absneg:TF (match_operand:TF 1 \"register_operand\")))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_SSE\"\n   \"ix86_expand_fp_absneg_operator (<CODE>, TFmode, operands); DONE;\")\n \n (define_insn \"*absnegtf2_sse\"\n@@ -8719,7 +8720,7 @@\n \t  [(match_operand:TF 1 \"register_operand\" \"0,x\")]))\n    (use (match_operand:TF 2 \"nonimmediate_operand\" \"xm,0\"))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_SSE\"\n   \"#\")\n \n ;; Splitters for fp abs and neg.\n@@ -8898,7 +8899,7 @@\n    (match_operand:CSGNMODE 1 \"nonmemory_operand\")\n    (match_operand:CSGNMODE 2 \"register_operand\")]\n   \"(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n-   || (TARGET_SSE2 && (<MODE>mode == TFmode))\"\n+   || (TARGET_SSE && (<MODE>mode == TFmode))\"\n   \"ix86_expand_copysign (operands); DONE;\")\n \n (define_insn_and_split \"copysign<mode>3_const\"\n@@ -8909,7 +8910,7 @@\n \t   (match_operand:<CSGNVMODE> 3 \"nonimmediate_operand\" \"xm\")]\n \t  UNSPEC_COPYSIGN))]\n   \"(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n-   || (TARGET_SSE2 && (<MODE>mode == TFmode))\"\n+   || (TARGET_SSE && (<MODE>mode == TFmode))\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n@@ -8925,7 +8926,7 @@\n \t  UNSPEC_COPYSIGN))\n    (clobber (match_scratch:<CSGNVMODE> 1 \"=x,x,x,x,x\"))]\n   \"(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n-   || (TARGET_SSE2 && (<MODE>mode == TFmode))\"\n+   || (TARGET_SSE && (<MODE>mode == TFmode))\"\n   \"#\")\n \n (define_split\n@@ -8938,7 +8939,7 @@\n \t  UNSPEC_COPYSIGN))\n    (clobber (match_scratch:<CSGNVMODE> 1))]\n   \"((SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n-    || (TARGET_SSE2 && (<MODE>mode == TFmode)))\n+    || (TARGET_SSE && (<MODE>mode == TFmode)))\n    && reload_completed\"\n   [(const_int 0)]\n   \"ix86_split_copysign_var (operands); DONE;\")"}]}