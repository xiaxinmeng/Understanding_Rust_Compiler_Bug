{"sha": "4796d8f620f4a2360e861f336073202c18e649fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc5NmQ4ZjYyMGY0YTIzNjBlODYxZjMzNjA3MzIwMmMxOGU2NDlmYw==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2017-04-11T19:39:59Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2017-04-11T19:39:59Z"}, "message": "re PR rtl-optimization/70478 ([LRA] S/390: Performance regression - superfluous stack frame)\n\n2017-04-11  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/70478\n\t* lra-constraints.c (process_alt_operands): Check memory for\n\tdisfavoring memory insn operand.\n\nFrom-SVN: r246854", "tree": {"sha": "603c06bdf9a15fe2b1058ab83005c5627b17aecd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/603c06bdf9a15fe2b1058ab83005c5627b17aecd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4796d8f620f4a2360e861f336073202c18e649fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4796d8f620f4a2360e861f336073202c18e649fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4796d8f620f4a2360e861f336073202c18e649fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4796d8f620f4a2360e861f336073202c18e649fc/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "df1c878ec25af7e9405b0276e6478fd996c2d3f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df1c878ec25af7e9405b0276e6478fd996c2d3f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df1c878ec25af7e9405b0276e6478fd996c2d3f9"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "11304c8e9c3ba91f78caf4ddedbf53146e08d5c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4796d8f620f4a2360e861f336073202c18e649fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4796d8f620f4a2360e861f336073202c18e649fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4796d8f620f4a2360e861f336073202c18e649fc", "patch": "@@ -1,3 +1,9 @@\n+2017-04-11  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/70478\n+\t* lra-constraints.c (process_alt_operands): Check memory for\n+\tdisfavoring memory insn operand.\n+\n 2017-04-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/80100"}, {"sha": "c8bc9b9a66f3c47aa6b7cf34e1c8b96092490cf2", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4796d8f620f4a2360e861f336073202c18e649fc/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4796d8f620f4a2360e861f336073202c18e649fc/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=4796d8f620f4a2360e861f336073202c18e649fc", "patch": "@@ -2722,12 +2722,14 @@ process_alt_operands (int only_alternative)\n \t\t    }\n \t\t}\n \n-\t      /* When we use memory operand, the insn should read the\n-\t\t value from memory and even if we just wrote a value\n-\t\t into the memory it is costly in comparison with an\n-\t\t insn alternative which does not use memory\n-\t\t (e.g. register or immediate operand).  */\n-\t      if (no_regs_p && offmemok)\n+\t      /* When we use an operand requiring memory in given\n+\t\t alternative, the insn should write *and* read the\n+\t\t value to/from memory it is costly in comparison with\n+\t\t an insn alternative which does not use memory\n+\t\t (e.g. register or immediate operand).  We exclude\n+\t\t memory operand for such case as we can satisfy the\n+\t\t memory constraints by reloading address.  */\n+\t      if (no_regs_p && offmemok && !MEM_P (op))\n \t\t{\n \t\t  if (lra_dump_file != NULL)\n \t\t    fprintf"}]}