{"sha": "b18081df8cca5f2306e99709fa2c06b9cbeea8d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE4MDgxZGY4Y2NhNWYyMzA2ZTk5NzA5ZmEyYzA2YjljYmVlYThkMA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-07-08T17:35:12Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-07-08T17:35:12Z"}, "message": "subreg: Add -fsplit-wide-types-early (PR88233)\n\nCurrently the second lower-subreg pass is run right before RA.  This\nis much too late to be very useful.  At least for targets that do not\nhave RTL patterns for operations on multi-register modes it is a lot\nbetter to split patterns earlier, before combine and all related\npasses.\n\nThis adds an option -fsplit-wide-types-early that does that, and\nenables it by default for rs6000.\n\n\n\tPR rtl-optimization/88233\n\t* common.opt (fsplit-wide-types-early): New option.\n\t* common/config/rs6000/rs6000-common.c\n\t(rs6000_option_optimization_table): Add OPT_fsplit_wide_types_early for\n\tOPT_LEVELS_ALL.\n\t* doc/invoke.texi (Optimization Options): Add -fsplit-wide-types-early.\n\t* lower-subreg.c (pass_lower_subreg2::gate): Add test for\n\tflag_split_wide_types_early.\n\t(pass_data_lower_subreg3): New.\n\t(pass_lower_subreg3): New.\n\t(make_pass_lower_subreg3): New.\n\t* passes.def (pass_lower_subreg2): Move after the loop passes.\n\t(pass_lower_subreg3): New, inserted where pass_lower_subreg2 was.\n\t* tree-pass.h (make_pass_lower_subreg2): Move up, to its new place in\n\tthe pass pipeline; its previous place is taken by ...\n\t(make_pass_lower_subreg3): ... this.\n\nFrom-SVN: r273240", "tree": {"sha": "59ef6d36e481b583dd0009cdd57c64508448c61e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59ef6d36e481b583dd0009cdd57c64508448c61e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b18081df8cca5f2306e99709fa2c06b9cbeea8d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b18081df8cca5f2306e99709fa2c06b9cbeea8d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b18081df8cca5f2306e99709fa2c06b9cbeea8d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b18081df8cca5f2306e99709fa2c06b9cbeea8d0/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8f783191775bc266a74175e92c7eb64098bd4283", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f783191775bc266a74175e92c7eb64098bd4283", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f783191775bc266a74175e92c7eb64098bd4283"}], "stats": {"total": 86, "additions": 82, "deletions": 4}, "files": [{"sha": "d86ec3f3463b21cc94cb3fb3c69c3e1a50c82fd7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b18081df8cca5f2306e99709fa2c06b9cbeea8d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b18081df8cca5f2306e99709fa2c06b9cbeea8d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b18081df8cca5f2306e99709fa2c06b9cbeea8d0", "patch": "@@ -1,3 +1,22 @@\n+2019-07-08  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR rtl-optimization/88233\n+\t* common.opt (fsplit-wide-types-early): New option.\n+\t* common/config/rs6000/rs6000-common.c\n+\t(rs6000_option_optimization_table): Add OPT_fsplit_wide_types_early for\n+\tOPT_LEVELS_ALL.\n+\t* doc/invoke.texi (Optimization Options): Add -fsplit-wide-types-early.\n+\t* lower-subreg.c (pass_lower_subreg2::gate): Add test for\n+\tflag_split_wide_types_early.\n+\t(pass_data_lower_subreg3): New.\n+\t(pass_lower_subreg3): New.\n+\t(make_pass_lower_subreg3): New.\n+\t* passes.def (pass_lower_subreg2): Move after the loop passes.\n+\t(pass_lower_subreg3): New, inserted where pass_lower_subreg2 was.\n+\t* tree-pass.h (make_pass_lower_subreg2): Move up, to its new place in\n+\tthe pass pipeline; its previous place is taken by ...\n+\t(make_pass_lower_subreg3): ... this.\n+\n 2019-07-08  Robin Dapp  <rdapp@linux.ibm.com>\n \n \t* config/s390/s390.c (s390_shift_truncation_mask): Define."}, {"sha": "b998b25522bea682a55650b163aaf0d1fbb378b6", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b18081df8cca5f2306e99709fa2c06b9cbeea8d0/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b18081df8cca5f2306e99709fa2c06b9cbeea8d0/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=b18081df8cca5f2306e99709fa2c06b9cbeea8d0", "patch": "@@ -2430,6 +2430,10 @@ fsplit-wide-types\n Common Report Var(flag_split_wide_types) Optimization\n Split wide types into independent registers.\n \n+fsplit-wide-types-early\n+Common Report Var(flag_split_wide_types_early) Optimization\n+Split wide types into independent registers earlier.\n+\n fssa-backprop\n Common Report Var(flag_ssa_backprop) Init(1) Optimization\n Enable backward propagation of use properties at the SSA level."}, {"sha": "4b0c205b8cf1331509c2b72a687608c6c88d0ac9", "filename": "gcc/common/config/rs6000/rs6000-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b18081df8cca5f2306e99709fa2c06b9cbeea8d0/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b18081df8cca5f2306e99709fa2c06b9cbeea8d0/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c?ref=b18081df8cca5f2306e99709fa2c06b9cbeea8d0", "patch": "@@ -31,6 +31,8 @@\n /* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n static const struct default_options rs6000_option_optimization_table[] =\n   {\n+    /* Split multi-word types early.  */\n+    { OPT_LEVELS_ALL, OPT_fsplit_wide_types_early, NULL, 1 },\n     /* Enable -fsched-pressure for first pass instruction scheduling.  */\n     { OPT_LEVELS_1_PLUS, OPT_fsched_pressure, NULL, 1 },\n     { OPT_LEVELS_NONE, 0, NULL, 0 }"}, {"sha": "7654c9b21f3ae88b201de638a11593111ccf1065", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b18081df8cca5f2306e99709fa2c06b9cbeea8d0/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b18081df8cca5f2306e99709fa2c06b9cbeea8d0/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b18081df8cca5f2306e99709fa2c06b9cbeea8d0", "patch": "@@ -467,7 +467,7 @@ Objective-C and Objective-C++ Dialects}.\n -fsignaling-nans @gol\n -fsingle-precision-constant  -fsplit-ivs-in-unroller  -fsplit-loops@gol\n -fsplit-paths @gol\n--fsplit-wide-types  -fssa-backprop  -fssa-phiopt @gol\n+-fsplit-wide-types  -fsplit-wide-types-early  -fssa-backprop  -fssa-phiopt @gol\n -fstdarg-opt  -fstore-merging  -fstrict-aliasing @gol\n -fthread-jumps  -ftracer  -ftree-bit-ccp @gol\n -ftree-builtin-call-dce  -ftree-ccp  -ftree-ch @gol\n@@ -8731,6 +8731,13 @@ but may make debugging more difficult.\n Enabled at levels @option{-O}, @option{-O2}, @option{-O3},\n @option{-Os}.\n \n+@item -fsplit-wide-types-early\n+@opindex fsplit-wide-types-early\n+Fully split wide types early, instead of very late.\n+This option has no effect unless @option{-fsplit-wide-types} is turned on.\n+\n+This is the default on some targets.\n+\n @item -fcse-follow-jumps\n @opindex fcse-follow-jumps\n In common subexpression elimination (CSE), scan through jump instructions"}, {"sha": "e1418e5ec5194dfa5033bd7acd4888ed314076c6", "filename": "gcc/lower-subreg.c", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b18081df8cca5f2306e99709fa2c06b9cbeea8d0/gcc%2Flower-subreg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b18081df8cca5f2306e99709fa2c06b9cbeea8d0/gcc%2Flower-subreg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flower-subreg.c?ref=b18081df8cca5f2306e99709fa2c06b9cbeea8d0", "patch": "@@ -1801,7 +1801,8 @@ class pass_lower_subreg2 : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_split_wide_types != 0; }\n+  virtual bool gate (function *) { return flag_split_wide_types\n+\t\t\t\t\t  && flag_split_wide_types_early; }\n   virtual unsigned int execute (function *)\n     {\n       decompose_multiword_subregs (true);\n@@ -1817,3 +1818,46 @@ make_pass_lower_subreg2 (gcc::context *ctxt)\n {\n   return new pass_lower_subreg2 (ctxt);\n }\n+\n+/* Implement third lower subreg pass.  */\n+\n+namespace {\n+\n+const pass_data pass_data_lower_subreg3 =\n+{\n+  RTL_PASS, /* type */\n+  \"subreg3\", /* name */\n+  OPTGROUP_NONE, /* optinfo_flags */\n+  TV_LOWER_SUBREG, /* tv_id */\n+  0, /* properties_required */\n+  0, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  TODO_df_finish, /* todo_flags_finish */\n+};\n+\n+class pass_lower_subreg3 : public rtl_opt_pass\n+{\n+public:\n+  pass_lower_subreg3 (gcc::context *ctxt)\n+    : rtl_opt_pass (pass_data_lower_subreg3, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  virtual bool gate (function *) { return flag_split_wide_types\n+\t\t\t\t\t  && !flag_split_wide_types_early; }\n+  virtual unsigned int execute (function *)\n+    {\n+      decompose_multiword_subregs (true);\n+      return 0;\n+    }\n+\n+}; // class pass_lower_subreg3\n+\n+} // anon namespace\n+\n+rtl_opt_pass *\n+make_pass_lower_subreg3 (gcc::context *ctxt)\n+{\n+  return new pass_lower_subreg3 (ctxt);\n+}"}, {"sha": "1a7fd144f87d366f6bb3f63fae7f588628f9fce4", "filename": "gcc/passes.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b18081df8cca5f2306e99709fa2c06b9cbeea8d0/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b18081df8cca5f2306e99709fa2c06b9cbeea8d0/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=b18081df8cca5f2306e99709fa2c06b9cbeea8d0", "patch": "@@ -427,6 +427,7 @@ along with GCC; see the file COPYING3.  If not see\n \t  NEXT_PASS (pass_rtl_doloop);\n \t  NEXT_PASS (pass_rtl_loop_done);\n       POP_INSERT_PASSES ()\n+      NEXT_PASS (pass_lower_subreg2);\n       NEXT_PASS (pass_web);\n       NEXT_PASS (pass_rtl_cprop);\n       NEXT_PASS (pass_cse2);\n@@ -440,7 +441,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_partition_blocks);\n       NEXT_PASS (pass_outof_cfg_layout_mode);\n       NEXT_PASS (pass_split_all_insns);\n-      NEXT_PASS (pass_lower_subreg2);\n+      NEXT_PASS (pass_lower_subreg3);\n       NEXT_PASS (pass_df_initialize_no_opt);\n       NEXT_PASS (pass_stack_ptr_mod);\n       NEXT_PASS (pass_mode_switching);"}, {"sha": "7b8329385034413fc6ad0a056bba3cd805331506", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b18081df8cca5f2306e99709fa2c06b9cbeea8d0/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b18081df8cca5f2306e99709fa2c06b9cbeea8d0/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=b18081df8cca5f2306e99709fa2c06b9cbeea8d0", "patch": "@@ -552,6 +552,7 @@ extern rtl_opt_pass *make_pass_rtl_unroll_loops (gcc::context *ctxt);\n extern rtl_opt_pass *make_pass_rtl_doloop (gcc::context *ctxt);\n extern rtl_opt_pass *make_pass_rtl_loop_done (gcc::context *ctxt);\n \n+extern rtl_opt_pass *make_pass_lower_subreg2 (gcc::context *ctxt);\n extern rtl_opt_pass *make_pass_web (gcc::context *ctxt);\n extern rtl_opt_pass *make_pass_cse2 (gcc::context *ctxt);\n extern rtl_opt_pass *make_pass_df_initialize_opt (gcc::context *ctxt);\n@@ -567,7 +568,7 @@ extern rtl_opt_pass *make_pass_partition_blocks (gcc::context *ctxt);\n extern rtl_opt_pass *make_pass_match_asm_constraints (gcc::context *ctxt);\n extern rtl_opt_pass *make_pass_split_all_insns (gcc::context *ctxt);\n extern rtl_opt_pass *make_pass_fast_rtl_byte_dce (gcc::context *ctxt);\n-extern rtl_opt_pass *make_pass_lower_subreg2 (gcc::context *ctxt);\n+extern rtl_opt_pass *make_pass_lower_subreg3 (gcc::context *ctxt);\n extern rtl_opt_pass *make_pass_mode_switching (gcc::context *ctxt);\n extern rtl_opt_pass *make_pass_sms (gcc::context *ctxt);\n extern rtl_opt_pass *make_pass_sched (gcc::context *ctxt);"}]}