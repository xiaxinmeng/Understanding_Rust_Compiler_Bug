{"sha": "e11c6046f9c8bc891a67f37f0260ef4ece482f5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTExYzYwNDZmOWM4YmM4OTFhNjdmMzdmMDI2MGVmNGVjZTQ4MmY1ZA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-02T00:16:59Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-02T00:16:59Z"}, "message": "Daily bump.", "tree": {"sha": "a3d71d23785568530f760b9953fb09d363d22793", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3d71d23785568530f760b9953fb09d363d22793"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e11c6046f9c8bc891a67f37f0260ef4ece482f5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e11c6046f9c8bc891a67f37f0260ef4ece482f5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e11c6046f9c8bc891a67f37f0260ef4ece482f5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e11c6046f9c8bc891a67f37f0260ef4ece482f5d/comments", "author": null, "committer": null, "parents": [{"sha": "165446a1e81f5bb9597289e783af9ee67e1fe5ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/165446a1e81f5bb9597289e783af9ee67e1fe5ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/165446a1e81f5bb9597289e783af9ee67e1fe5ba"}], "stats": {"total": 414, "additions": 413, "deletions": 1}, "files": [{"sha": "1c3ddb364b9cd635fcf1c053577353bbbde1be0b", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11c6046f9c8bc891a67f37f0260ef4ece482f5d/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11c6046f9c8bc891a67f37f0260ef4ece482f5d/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=e11c6046f9c8bc891a67f37f0260ef4ece482f5d", "patch": "@@ -1,3 +1,7 @@\n+2021-09-01  YunQiang Su  <syq@debian.org>\n+\n+\t* MAINTAINERS: Add myself for write after approval.\n+\n 2021-08-31  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* Makefile.def: Add all-gdb dependency on all-libbacktrace."}, {"sha": "d7f4787467ba847c8d7be9da506072f4cfc310dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11c6046f9c8bc891a67f37f0260ef4ece482f5d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11c6046f9c8bc891a67f37f0260ef4ece482f5d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e11c6046f9c8bc891a67f37f0260ef4ece482f5d", "patch": "@@ -1,3 +1,137 @@\n+2021-09-01  Jeff Law  <jlaw@localhost.localdomain>\n+\n+\tPR tree-optimization/102152\n+\t* tree-ssa-dom.c (dom_opt_dom_walker::optimize_stmt): Reduce a vector\n+\tcomparison to a scalar comparison before calling\n+\tupdate_stmt_if_modified.\n+\n+2021-09-01  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR target/101934\n+\t* config/aarch64/aarch64.c (aarch64_expand_setmem):\n+\tCheck STRICT_ALIGNMENT before creating an overlapping\n+\tstore.\n+\n+2021-09-01  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gimple-ssa-warn-access.cc (get_size_range): Add argument.\n+\t(check_access): Pass additional argument.\n+\t(check_memop_access): Remove template and make a member function.\n+\t(maybe_check_dealloc_call): Make a pass_waccess member function.\n+\t(class pass_waccess): Add, rename, and remove members.\n+\t(pass_waccess::pass_waccess): Adjust to name change.\n+\t(pass_waccess::~pass_waccess): Same.\n+\t(check_alloca): Make a member function.\n+\t(check_alloc_size_call): Same.\n+\t(check_strcat): Same.\n+\t(check_strncat): Same.\n+\t(check_stxcpy): Same.\n+\t(check_stxncpy): Same.\n+\t(check_strncmp): Same.\n+\t(maybe_warn_rdwr_sizes): Rename...\n+\t(pass_waccess::maybe_check_access_sizes): ...to this.\n+\t(pass_waccess::check_call): Adjust to name changes.\n+\t(pass_waccess::maybe_check_dealloc_call): Make a pass_waccess member\n+\tfunction.\n+\t(pass_waccess::execute): Adjust to name changes.\n+\t* gimple-ssa-warn-access.h (check_memop_access): Remove.\n+\t* pointer-query.cc (access_ref::phi): Handle null pointer.\n+\t(access_ref::inform_access): Same.\n+\t(pointer_query::put_ref): Modify a cached value, not a copy of it.\n+\t(pointer_query::dump): New function.\n+\t(compute_objsize_r): Avoid overwriting access_ref::bndrng.  Cache\n+\tmore results.\n+\t* pointer-query.h (pointer_query::dump): Declare.\n+\t* tree-ssa-strlen.c (get_range): Simplify.  Use function query.\n+\t(dump_strlen_info): Use function query.\n+\t(printf_strlen_execute): Factor code out into pointer_query::put_ref.\n+\n+2021-09-01  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* tree.c (walk_tree_1) <OMP_CLAUSE>: Simplify.\n+\n+2021-09-01  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* doc/extend.texi: Document unavailable attribute.\n+\t* print-tree.c (print_node): Handle unavailable attribute.\n+\t* tree-core.h (struct tree_base): Add a bit to carry unavailability.\n+\t* tree.c (error_unavailable_use): New.\n+\t* tree.h (TREE_UNAVAILABLE): New.\n+\t(error_unavailable_use): New.\n+\n+2021-09-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/102124\n+\t* tree-vect-patterns.c (vect_recog_widen_op_pattern): For ORIG_CODE\n+\tMINUS_EXPR, if itype is unsigned with smaller precision than type,\n+\tadd an extra cast to signed variant of itype to ensure sign-extension.\n+\n+2021-09-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* graph.c (draw_cfg_node_succ_edges): Do not color fallthru\n+\t  edges and rather use colors for TRUE and FALSE edges.\n+\n+2021-09-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/93491\n+\t* tree-ssa-pre.c (compute_avail): Set BB_MAY_NOTRETURN\n+\tafter processing the stmt itself.  Do not consider\n+\tpure functions possibly not returning.  Properly avoid\n+\tadding possibly trapping calls to EXP_GEN when there's\n+\ta preceeding possibly not returning call.\n+\t* tree-ssa-sccvn.c (vn_reference_may_trap): Conservatively\n+\tnot handle calls.\n+\n+2021-09-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102139\n+\t* tree-vectorizer.h (vec_base_alignments): Adjust hash-map\n+\ttype to record a std::pair of the stmt-info and the innermost\n+\tloop behavior.\n+\t(dr_vec_info::group): New member.\n+\t* tree-vect-data-refs.c (vect_record_base_alignment): Adjust.\n+\t(vect_compute_data_ref_alignment): Verify the recorded\n+\tbase alignment can be used.\n+\t(data_ref_pair): Remove.\n+\t(dr_group_sort_cmp): Adjust.\n+\t(vect_analyze_data_ref_accesses): Store the group-ID in the\n+\tdr_vec_info and operate on a vector of dr_vec_infos.\n+\n+2021-09-01  YunQiang Su  <yunqiang.su@cipunited.com>\n+\n+\t* read-md.c (md_reader::handle_enum): support value assignation.\n+\t* doc/md.texi: record define_c_enum value assignation support.\n+\n+2021-09-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/102141\n+\t* gimple-ssa-store-merging.c (bswap_view_convert): Add BEFORE\n+\targument.  If false, emit stmts after gsi instead of before, and\n+\twith GSI_NEW_STMT.\n+\t(bswap_replace): Adjust callers.  When converting output of bswap,\n+\temit VIEW_CONVERT prepratation stmts after a copy of gsi instead\n+\tof before it.\n+\n+2021-09-01  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* emit-rtl.c (validate_subreg): Get rid of all float-int\n+\tspecial cases.\n+\n+2021-09-01  liuhongt  <hongtao.liu@intel.com>\n+\n+\tRevert:\n+\t2021-08-30  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* expmed.c (extract_bit_field_1): Make sure we're playing with\n+\tintegral modes before call extract_integral_bit_field.\n+\t(extract_integral_bit_field): Add a parameter of type\n+\tscalar_int_mode which corresponds to of tmode.\n+\tAnd call extract_and_convert_fixed_bit_field instead of\n+\textract_fixed_bit_field and convert_extracted_bit_field.\n+\t(extract_and_convert_fixed_bit_field): New function, it's a\n+\tcombination of extract_fixed_bit_field and\n+\tconvert_extracted_bit_field.\n+\n 2021-08-31  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* tree.c (walk_tree_1) <OMP_CLAUSE_TILE>: Handle three operands."}, {"sha": "c1532a2693f3746ffb136e77b8720849b83829ca", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11c6046f9c8bc891a67f37f0260ef4ece482f5d/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11c6046f9c8bc891a67f37f0260ef4ece482f5d/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=e11c6046f9c8bc891a67f37f0260ef4ece482f5d", "patch": "@@ -1 +1 @@\n-20210901\n+20210902"}, {"sha": "a5bf82c04ebad1cf1e341789b4b4b168675bdb15", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11c6046f9c8bc891a67f37f0260ef4ece482f5d/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11c6046f9c8bc891a67f37f0260ef4ece482f5d/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e11c6046f9c8bc891a67f37f0260ef4ece482f5d", "patch": "@@ -1,3 +1,7 @@\n+2021-09-01  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* c-attribs.c (handle_unavailable_attribute): New.\n+\n 2021-08-30  Jason Merrill  <jason@redhat.com>\n \n \t* c.opt: Add -Wmissing-requires."}, {"sha": "e501dc90ca9e56316000e835e1decabfd400df1a", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11c6046f9c8bc891a67f37f0260ef4ece482f5d/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11c6046f9c8bc891a67f37f0260ef4ece482f5d/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=e11c6046f9c8bc891a67f37f0260ef4ece482f5d", "patch": "@@ -1,3 +1,27 @@\n+2021-09-01  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* c-decl.c (enum deprecated_states): Add unavailable state.\n+\t(merge_decls): Copy unavailability.\n+\t(quals_from_declspecs): Handle unavailable case.\n+\t(start_decl): Amend the logic handling suppression of nested\n+\tdeprecation states to include unavailability.\n+\t(smallest_type_quals_location): Amend comment.\n+\t(grokdeclarator): Handle the unavailable deprecation state.\n+\t(declspecs_add_type): Set TREE_UNAVAILABLE from the decl specs.\n+\t* c-tree.h (struct c_declspecs): Add unavailable_p.\n+\t* c-typeck.c (build_component_ref): Handle unavailability.\n+\t(build_external_ref): Likewise.\n+\n+2021-09-01  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/79412\n+\t* c-decl.c (duplicate_decls): On significant mismatches, mark the\n+\ttypes of both (non-function) decls as error_mark_node, so that the\n+\tmiddle-end can see the code is malformed.\n+\t(free_attr_access_data): Don't process if the type has been set to\n+\terror_mark_node.\n+\n 2021-08-31  Marcel Vollweiler  <marcel@codesourcery.com>\n \n \t* c-parser.c (c_parser_omp_clause_device): Parse device-modifiers 'device_num'"}, {"sha": "d969b313ac3319fc811f742c1db9a62765da6ba4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11c6046f9c8bc891a67f37f0260ef4ece482f5d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11c6046f9c8bc891a67f37f0260ef4ece482f5d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e11c6046f9c8bc891a67f37f0260ef4ece482f5d", "patch": "@@ -1,3 +1,42 @@\n+2021-09-01  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* call.c (build_over_call): Handle unavailable state in addition to\n+\tdeprecation.\n+\t* class.c (type_build_ctor_call): Likewise.\n+\t(type_build_dtor_call): Likewise.\n+\t* cp-tree.h: Rename cp_warn_deprecated_use to\n+\tcp_handle_deprecated_or_unavailable.\n+\t* decl.c (duplicate_decls): Merge unavailability.\n+\t(grokdeclarator): Handle unavailability in addition to deprecation.\n+\t(type_is_unavailable): New.\n+\t(grokparms): Handle unavailability in addition to deprecation.\n+\t* decl.h (enum deprecated_states): Add\n+\tUNAVAILABLE_DEPRECATED_SUPPRESS.\n+\t* decl2.c (cplus_decl_attributes): Propagate unavailability to\n+\ttemplates.\n+\t(cp_warn_deprecated_use): Rename to ...\n+\t(cp_handle_deprecated_or_unavailable): ... this and amend to handle\n+\tthe unavailable case. It remains a warning in the case of deprecation\n+\tbut becomes an error in the case of unavailability.\n+\t(cp_warn_deprecated_use_scopes): Handle unavailability.\n+\t(mark_used): Likewise.\n+\t* parser.c (cp_parser_template_name): Likewise.\n+\t(cp_parser_template_argument): Likewise.\n+\t(cp_parser_parameter_declaration_list): Likewise.\n+\t* typeck.c (build_class_member_access_expr): Likewise.\n+\t(finish_class_member_access_expr): Likewise.\n+\t* typeck2.c (build_functional_cast_1): Likewise.\n+\n+2021-09-01  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* coroutines.cc (build_actor_fn): Add begin/finish clauses\n+\tto the initial test in the actor function.\n+\n+2021-09-01  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* coroutines.cc (await_statement_walker): Use build_stmt and\n+\tadd_stmt instead of build1 and finish_expr_stmt.\n+\n 2021-08-31  Jason Merrill  <jason@redhat.com>\n \n \t* coroutines.cc (flatten_await_stmt): Fix copyo."}, {"sha": "9fafc5e8bbcfee6ea28d4f2022af4178bc25506b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11c6046f9c8bc891a67f37f0260ef4ece482f5d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11c6046f9c8bc891a67f37f0260ef4ece482f5d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e11c6046f9c8bc891a67f37f0260ef4ece482f5d", "patch": "@@ -1,3 +1,9 @@\n+2021-09-01  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/56985\n+\t* resolve.c (resolve_common_vars): Fix grammar and improve wording\n+\tof error message rejecting an unlimited polymorphic in COMMON.\n+\n 2021-08-31  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/100950"}, {"sha": "668be66aa74862c7cce40e0d68df88c9ee80ad26", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11c6046f9c8bc891a67f37f0260ef4ece482f5d/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11c6046f9c8bc891a67f37f0260ef4ece482f5d/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=e11c6046f9c8bc891a67f37f0260ef4ece482f5d", "patch": "@@ -1,3 +1,32 @@\n+2021-09-01  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR objc/101718\n+\t* objc-next-runtime-abi-02.c (build_v2_build_objc_method_call):\n+\tRevise for cases where scalar objects use an sret parameter.\n+\t(next_runtime_abi_02_build_objc_method_call): Likwise.\n+\n+2021-09-01  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* objc-act.c (objc_add_property_declaration): Register unavailable\n+\tattribute.\n+\t(maybe_make_artificial_property_decl): Set available.\n+\t(objc_maybe_build_component_ref): Generalise to the method prototype\n+\tto count availability.\n+\t(objc_build_class_component_ref): Likewise.\n+\t(build_private_template): Likewise.\n+\t(objc_decl_method_attributes): Handle unavailable attribute.\n+\t(lookup_method_in_hash_lists): Amend comments.\n+\t(objc_finish_message_expr): Handle unavailability in addition to\n+\tdeprecation.\n+\t(start_class): Likewise.\n+\t(finish_class): Likewise.\n+\t(lookup_protocol): Likewise.\n+\t(objc_declare_protocol): Likewise.\n+\t(start_protocol): Register unavailable attribute.\n+\t(really_start_method): Likewise.\n+\t(objc_gimplify_property_ref): Emit error on encountering an\n+\tunavailable entity (and a warning for a deprecated one).\n+\n 2021-08-19  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* objc-next-runtime-abi-02.c (objc_next_runtime_abi_02_init):"}, {"sha": "cef16da61a55ab628d5b9d6c6a8887b8b746740e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11c6046f9c8bc891a67f37f0260ef4ece482f5d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11c6046f9c8bc891a67f37f0260ef4ece482f5d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e11c6046f9c8bc891a67f37f0260ef4ece482f5d", "patch": "@@ -1,3 +1,116 @@\n+2021-09-01  Jeff Law  <jlaw@localhost.localdomain>\n+\n+\tPR tree-optimization/102152\n+\t* gcc.dg/pr102152.c: New test\n+\n+2021-09-01  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR target/101934\n+\t* gcc.target/aarch64/memset-strict-align-1.c: New test.\n+\n+2021-09-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/100977\n+\t* g++.dg/cpp23/normalize1.C: New test.\n+\t* g++.dg/cpp23/normalize2.C: New test.\n+\t* g++.dg/cpp23/normalize3.C: New test.\n+\t* g++.dg/cpp23/normalize4.C: New test.\n+\t* g++.dg/cpp23/normalize5.C: New test.\n+\t* g++.dg/cpp23/normalize6.C: New test.\n+\t* g++.dg/cpp23/normalize7.C: New test.\n+\t* g++.dg/cpp23/ucnid-1-utf8.C: New test.\n+\t* g++.dg/cpp23/ucnid-2-utf8.C: New test.\n+\t* gcc.dg/cpp/ucnid-4.c: Don't expect\n+\t\"not valid at the start of an identifier\" errors.\n+\t* gcc.dg/cpp/ucnid-4-utf8.c: Likewise.\n+\t* gcc.dg/cpp/ucnid-5-utf8.c: New test.\n+\n+2021-09-01  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR testsuite/51748\n+\t* gcc.misc-tests/linkage.exp: Add mips*-linux-* support.\n+\n+2021-09-01  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/Wstringop-overflow-11.c: Remove xfails.\n+\t* gcc.dg/Wstringop-overflow-12.c: Same.\n+\t* gcc.dg/Wstringop-overflow-43.c: Add xfails.\n+\t* gcc.dg/Wstringop-overflow-73.c: New test.\n+\n+2021-09-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/101488\n+\t* c-c++-common/cpp/va-opt-3.c: Adjust expected output.\n+\t* c-c++-common/cpp/va-opt-7.c: New test.\n+\n+2021-09-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/101592\n+\t* g++.dg/warn/Wlogical-op-3.C: New test.\n+\n+2021-09-01  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* g++.dg/ext/attr-unavailable-1.C: New test.\n+\t* g++.dg/ext/attr-unavailable-2.C: New test.\n+\t* g++.dg/ext/attr-unavailable-3.C: New test.\n+\t* g++.dg/ext/attr-unavailable-4.C: New test.\n+\t* g++.dg/ext/attr-unavailable-5.C: New test.\n+\t* g++.dg/ext/attr-unavailable-6.C: New test.\n+\t* g++.dg/ext/attr-unavailable-7.C: New test.\n+\t* g++.dg/ext/attr-unavailable-8.C: New test.\n+\t* g++.dg/ext/attr-unavailable-9.C: New test.\n+\t* gcc.dg/attr-unavailable-1.c: New test.\n+\t* gcc.dg/attr-unavailable-2.c: New test.\n+\t* gcc.dg/attr-unavailable-3.c: New test.\n+\t* gcc.dg/attr-unavailable-4.c: New test.\n+\t* gcc.dg/attr-unavailable-5.c: New test.\n+\t* gcc.dg/attr-unavailable-6.c: New test.\n+\t* obj-c++.dg/attributes/method-unavailable-1.mm: New test.\n+\t* obj-c++.dg/attributes/method-unavailable-2.mm: New test.\n+\t* obj-c++.dg/attributes/method-unavailable-3.mm: New test.\n+\t* obj-c++.dg/property/at-property-unavailable-1.mm: New test.\n+\t* obj-c++.dg/property/at-property-unavailable-2.mm: New test.\n+\t* obj-c++.dg/property/dotsyntax-unavailable-1.mm: New test.\n+\t* objc.dg/attributes/method-unavailable-1.m: New test.\n+\t* objc.dg/attributes/method-unavailable-2.m: New test.\n+\t* objc.dg/attributes/method-unavailable-3.m: New test.\n+\t* objc.dg/property/at-property-unavailable-1.m: New test.\n+\t* objc.dg/property/at-property-unavailable-2.m: New test.\n+\t* objc.dg/property/dotsyntax-unavailable-1.m: New test.\n+\n+2021-09-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/102124\n+\t* gcc.dg/torture/pr102124.c: New test.\n+\n+2021-09-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/93491\n+\t* gcc.dg/torture/pr93491.c: New testcase.\n+\t* gcc.dg/tree-ssa/pr88087.c: Change to valid PRE opportunity.\n+\n+2021-09-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102139\n+\t* gcc.dg/torture/pr102139.c: New testcase.\n+\n+2021-09-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/102141\n+\t* gcc.dg/pr102141.c: New test.\n+\n+2021-09-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102149\n+\t* gcc.dg/torture/pr102149.c: New testcase.\n+\n+2021-09-01  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/79412\n+\t* gcc.dg/pr79412.c: New test case.\n+\t* gcc.dg/typedef-var-2.c: Update expeted errors.\n+\n 2021-08-31  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/100950"}, {"sha": "35f952dbd9509daab14ed54514f8a2fb04bfbb2e", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11c6046f9c8bc891a67f37f0260ef4ece482f5d/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11c6046f9c8bc891a67f37f0260ef4ece482f5d/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=e11c6046f9c8bc891a67f37f0260ef4ece482f5d", "patch": "@@ -1,3 +1,42 @@\n+2021-09-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/100977\n+\t* include/cpplib.h (struct cpp_options): Add cxx23_identifiers.\n+\t* charset.c (CXX23, NXX23): New enumerators.\n+\t(CID, NFC, NKC, CTX): Renumber.\n+\t(ucn_valid_in_identifier): Implement P1949R7 - use CXX23 and\n+\tNXX23 flags for cxx23_identifiers.  For start character in\n+\tnon-pedantic mode, allow characters that are allowed as start\n+\tcharacters in any of the supported language modes, rather than\n+\tdisallowing characters allowed only as non-start characters in\n+\tcurrent mode but for characters from other language modes allowing\n+\tthem even if they are never allowed at start.\n+\t* init.c (struct lang_flags): Add cxx23_identifiers.\n+\t(lang_defaults): Add cxx23_identifiers column.\n+\t(cpp_set_lang): Initialize CPP_OPTION (pfile, cxx23_identifiers).\n+\t* lex.c (warn_about_normalization): If cxx23_identifiers, use\n+\tcpp_pedwarning_with_line instead of cpp_warning_with_line for\n+\t\"is not in NFC\" diagnostics.\n+\t* makeucnid.c: Adjust usage comment.\n+\t(CXX23, NXX23): New enumerators.\n+\t(all_languages): Add CXX23.\n+\t(not_NFC, not_NFKC, maybe_not_NFC): Renumber.\n+\t(read_derivedcore): New function.\n+\t(write_table): Print also CXX23 and NXX23 columns.\n+\t(main): Require 5 arguments instead of 4, call read_derivedcore.\n+\t* ucnid.h: Regenerated using Unicode 13.0.0 files.\n+\n+2021-09-01  Jason Merrill  <jason@redhat.com>\n+\n+\t* macro.c (replace_args): When __VA_OPT__ is on the LHS of ##,\n+\tremove trailing avoid_paste tokens.\n+\n+2021-09-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/101488\n+\t* macro.c (replace_args): Fix up handling of CPP_PADDING tokens at the\n+\tstart or end of __VA_OPT__ arguments when preceeded or followed by ##.\n+\n 2021-08-31  Martin Sebor  <msebor@redhat.com>\n \n \t* include/line-map.h (class rich_location): Disable copying and"}, {"sha": "593e642b56fe679807c89126c420e0f0ec70bc6f", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11c6046f9c8bc891a67f37f0260ef4ece482f5d/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11c6046f9c8bc891a67f37f0260ef4ece482f5d/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=e11c6046f9c8bc891a67f37f0260ef4ece482f5d", "patch": "@@ -1,3 +1,7 @@\n+2021-09-01  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* unwind-arm-common.inc (abort): Remove.\n+\n 2021-08-31  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/value-unwind.h: Add missing runtime exception"}, {"sha": "7c337c221e393b61acf8e0e6e313f9248580fcff", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11c6046f9c8bc891a67f37f0260ef4ece482f5d/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11c6046f9c8bc891a67f37f0260ef4ece482f5d/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=e11c6046f9c8bc891a67f37f0260ef4ece482f5d", "patch": "@@ -1,3 +1,10 @@\n+2021-09-01  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* configure: Regenerate.\n+\t* configure.ac: Do not search for sbrk on Darwin.\n+\t* xmalloc.c: Do not declare sbrk unless it has been found\n+\tby configure.\n+\n 2021-08-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* d-demangle.c (dlang_identifier): Skip over fake parent manglings."}, {"sha": "fa1aef75ddcd84dcf8f52ee11e5dd1e8db2eb670", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11c6046f9c8bc891a67f37f0260ef4ece482f5d/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11c6046f9c8bc891a67f37f0260ef4ece482f5d/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=e11c6046f9c8bc891a67f37f0260ef4ece482f5d", "patch": "@@ -1,3 +1,12 @@\n+2021-09-01  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* m4/druntime/os.m4: Update comment for DRUNTIME_OS_SOURCES.\n+\n+2021-09-01  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* src/Makefile.am: Don't add zlib when ENABLE_LIBDRUNTIME_ONLY.\n+\t* src/Makefile.in: Regenerate.\n+\n 2021-08-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* configure: Regenerate."}]}