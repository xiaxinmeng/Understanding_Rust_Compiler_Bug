{"sha": "b0f02eeb906b6351099ac97066ef74b6167d9ecb", "node_id": "C_kwDOANBUbNoAKGIwZjAyZWViOTA2YjYzNTEwOTlhYzk3MDY2ZWY3NGI2MTY3ZDllY2I", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-07-14T10:15:35Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-07-14T10:18:42Z"}, "message": "Fix ICE on view conversion between struct and integer\n\nThis happens from prepare_gimple_addressable for the variable to be marked\nwith DECL_NOT_GIMPLE_REG_P when its initialization is gimplified, so it's\napparently just a matter of setting the flag earlier.\n\ngcc/\n\t* gimplify.cc (lookup_tmp_var): Add NOT_GIMPLE_REG boolean parameter\n\tand set DECL_NOT_GIMPLE_REG_P on the variable according to it.\n\t(internal_get_tmp_var): Add NOT_GIMPLE_REG boolean parameter and\n\tpass it in the call to lookup_tmp_var.\n\t(get_formal_tmp_var): Pass false in the call to lookup_tmp_var.\n\t(get_initialized_tmp_var): Likewise.\n\t(prepare_gimple_addressable): Call internal_get_tmp_var instead of\n\tget_initialized_tmp_var with NOT_GIMPLE_REG set to true.\n\ngcc/testsuite/\n\t* gnat.dg/opt98.ads, gnat.dg/opt98.adb: New test.", "tree": {"sha": "a2328234213a4e55c84fe46648ec6aab7f60a56b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2328234213a4e55c84fe46648ec6aab7f60a56b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0f02eeb906b6351099ac97066ef74b6167d9ecb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0f02eeb906b6351099ac97066ef74b6167d9ecb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0f02eeb906b6351099ac97066ef74b6167d9ecb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0f02eeb906b6351099ac97066ef74b6167d9ecb/comments", "author": null, "committer": null, "parents": [{"sha": "9f7f04998964451ff487b546d77ea48d0ce01451", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f7f04998964451ff487b546d77ea48d0ce01451", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f7f04998964451ff487b546d77ea48d0ce01451"}], "stats": {"total": 62, "additions": 49, "deletions": 13}, "files": [{"sha": "2ac7ca0855e5196f002580aab3b695d160306d76", "filename": "gcc/gimplify.cc", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f02eeb906b6351099ac97066ef74b6167d9ecb/gcc%2Fgimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f02eeb906b6351099ac97066ef74b6167d9ecb/gcc%2Fgimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.cc?ref=b0f02eeb906b6351099ac97066ef74b6167d9ecb", "patch": "@@ -573,20 +573,26 @@ create_tmp_from_val (tree val)\n }\n \n /* Create a temporary to hold the value of VAL.  If IS_FORMAL, try to reuse\n-   an existing expression temporary.  */\n+   an existing expression temporary.  If NOT_GIMPLE_REG, mark it as such.  */\n \n static tree\n-lookup_tmp_var (tree val, bool is_formal)\n+lookup_tmp_var (tree val, bool is_formal, bool not_gimple_reg)\n {\n   tree ret;\n \n+  /* We cannot mark a formal temporary with DECL_NOT_GIMPLE_REG_P.  */\n+  gcc_assert (!is_formal || !not_gimple_reg);\n+\n   /* If not optimizing, never really reuse a temporary.  local-alloc\n      won't allocate any variable that is used in more than one basic\n      block, which means it will go into memory, causing much extra\n      work in reload and final and poorer code generation, outweighing\n      the extra memory allocation here.  */\n   if (!optimize || !is_formal || TREE_SIDE_EFFECTS (val))\n-    ret = create_tmp_from_val (val);\n+    {\n+      ret = create_tmp_from_val (val);\n+      DECL_NOT_GIMPLE_REG_P (ret) = not_gimple_reg;\n+    }\n   else\n     {\n       elt_t elt, *elt_p;\n@@ -617,7 +623,7 @@ lookup_tmp_var (tree val, bool is_formal)\n \n static tree\n internal_get_tmp_var (tree val, gimple_seq *pre_p, gimple_seq *post_p,\n-                      bool is_formal, bool allow_ssa)\n+\t\t      bool is_formal, bool allow_ssa, bool not_gimple_reg)\n {\n   tree t, mod;\n \n@@ -639,7 +645,7 @@ internal_get_tmp_var (tree val, gimple_seq *pre_p, gimple_seq *post_p,\n \t}\n     }\n   else\n-    t = lookup_tmp_var (val, is_formal);\n+    t = lookup_tmp_var (val, is_formal, not_gimple_reg);\n \n   mod = build2 (INIT_EXPR, TREE_TYPE (t), t, unshare_expr (val));\n \n@@ -667,7 +673,7 @@ internal_get_tmp_var (tree val, gimple_seq *pre_p, gimple_seq *post_p,\n tree\n get_formal_tmp_var (tree val, gimple_seq *pre_p)\n {\n-  return internal_get_tmp_var (val, pre_p, NULL, true, true);\n+  return internal_get_tmp_var (val, pre_p, NULL, true, true, false);\n }\n \n /* Return a temporary variable initialized with VAL.  PRE_P and POST_P\n@@ -678,7 +684,7 @@ get_initialized_tmp_var (tree val, gimple_seq *pre_p,\n \t\t\t gimple_seq *post_p /* = NULL */,\n \t\t\t bool allow_ssa /* = true */)\n {\n-  return internal_get_tmp_var (val, pre_p, post_p, false, allow_ssa);\n+  return internal_get_tmp_var (val, pre_p, post_p, false, allow_ssa, false);\n }\n \n /* Declare all the variables in VARS in SCOPE.  If DEBUG_INFO is true,\n@@ -4574,13 +4580,10 @@ prepare_gimple_addressable (tree *expr_p, gimple_seq *seq_p)\n {\n   while (handled_component_p (*expr_p))\n     expr_p = &TREE_OPERAND (*expr_p, 0);\n+\n+  /* Do not allow an SSA name as the temporary.  */\n   if (is_gimple_reg (*expr_p))\n-    {\n-      /* Do not allow an SSA name as the temporary.  */\n-      tree var = get_initialized_tmp_var (*expr_p, seq_p, NULL, false);\n-      DECL_NOT_GIMPLE_REG_P (var) = 1;\n-      *expr_p = var;\n-    }\n+    *expr_p = internal_get_tmp_var (*expr_p, seq_p, NULL, false, false, true);\n }\n \n /* A subroutine of gimplify_modify_expr.  Replace a MODIFY_EXPR with"}, {"sha": "6d42338605cd05dc3433d46fbf2823c992f37a6f", "filename": "gcc/testsuite/gnat.dg/opt98.adb", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f02eeb906b6351099ac97066ef74b6167d9ecb/gcc%2Ftestsuite%2Fgnat.dg%2Fopt98.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f02eeb906b6351099ac97066ef74b6167d9ecb/gcc%2Ftestsuite%2Fgnat.dg%2Fopt98.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt98.adb?ref=b0f02eeb906b6351099ac97066ef74b6167d9ecb", "patch": "@@ -0,0 +1,14 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O -gnatws\" }\n+\n+package body Opt98 is\n+\n+  function Func return Rec is\n+    R :Rec;\n+  begin\n+    A := To_Address ((I => 0));\n+    R := To_Rec (A);\n+    return R;\n+  end;\n+\n+end Opt98;"}, {"sha": "fcc705776d4526c945895160b839ecc8a37f5014", "filename": "gcc/testsuite/gnat.dg/opt98.ads", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f02eeb906b6351099ac97066ef74b6167d9ecb/gcc%2Ftestsuite%2Fgnat.dg%2Fopt98.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f02eeb906b6351099ac97066ef74b6167d9ecb/gcc%2Ftestsuite%2Fgnat.dg%2Fopt98.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt98.ads?ref=b0f02eeb906b6351099ac97066ef74b6167d9ecb", "patch": "@@ -0,0 +1,19 @@\n+with Ada.Unchecked_Conversion;\n+with System;\n+\n+package Opt98 is\n+\n+  type Rec is record\n+    I : Integer;\n+  end record;\n+\n+  function To_Address is new Ada.Unchecked_Conversion (Rec, System.Address);\n+\n+  function To_Rec is new Ada.Unchecked_Conversion (System.Address, Rec);\n+\n+  A : System.Address with Atomic;\n+\n+  function Func return Rec;\n+\n+end Opt98;\n+"}]}