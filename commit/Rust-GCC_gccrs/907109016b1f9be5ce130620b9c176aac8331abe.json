{"sha": "907109016b1f9be5ce130620b9c176aac8331abe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA3MTA5MDE2YjFmOWJlNWNlMTMwNjIwYjljMTc2YWFjODMzMWFiZQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-11-22T15:18:50Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-11-22T15:18:50Z"}, "message": "re PR rtl-optimization/18599 (Quadratic behavior in copyprop_hardreg_forward)\n\n\tPR rtl-optimization/18599\n\t* regrename.c (copyprop_hardreg_forward): Speed up by putting\n\tBB_VISITED flags on basic blocks as we process them.\n\nFrom-SVN: r91016", "tree": {"sha": "b8f81455a3e7c15f447a002b296f8fd308893110", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8f81455a3e7c15f447a002b296f8fd308893110"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/907109016b1f9be5ce130620b9c176aac8331abe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/907109016b1f9be5ce130620b9c176aac8331abe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/907109016b1f9be5ce130620b9c176aac8331abe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/907109016b1f9be5ce130620b9c176aac8331abe/comments", "author": null, "committer": null, "parents": [{"sha": "f96bc213541a8a468935acd64e1170717a455cd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f96bc213541a8a468935acd64e1170717a455cd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f96bc213541a8a468935acd64e1170717a455cd7"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "86ea00b29ce5cc37fd91a54796958f4b108b7385", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907109016b1f9be5ce130620b9c176aac8331abe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907109016b1f9be5ce130620b9c176aac8331abe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=907109016b1f9be5ce130620b9c176aac8331abe", "patch": "@@ -1,3 +1,9 @@\n+2004-11-22  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\tPR rtl-optimization/18599\n+\t* regrename.c (copyprop_hardreg_forward): Speed up by putting\n+\tBB_VISITED flags on basic blocks as we process them.\n+\n 2004-11-22  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* config/rs6000/altivec.md (VI_char): New mode attribute."}, {"sha": "35f17a4d1d2af41739d3b15d415ba64c9ce3b708", "filename": "gcc/regrename.c", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907109016b1f9be5ce130620b9c176aac8331abe/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907109016b1f9be5ce130620b9c176aac8331abe/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=907109016b1f9be5ce130620b9c176aac8331abe", "patch": "@@ -1745,24 +1745,31 @@ copyprop_hardreg_forward (void)\n {\n   struct value_data *all_vd;\n   bool need_refresh;\n-  basic_block bb, bbp = 0;\n+  basic_block bb;\n \n   need_refresh = false;\n \n   all_vd = xmalloc (sizeof (struct value_data) * last_basic_block);\n \n+  /* Clear all BB_VISITED flags.  We use BB_VISITED flags to indicate\n+     whether we have processed a given basic block or not.  Note that\n+     we never put BB_VISITED flag on ENTRY_BLOCK_PTR throughout this\n+     function because we want to call init_value_data for all\n+     successors of ENTRY_BLOCK_PTR.  */\n+  FOR_ALL_BB (bb)\n+    bb->flags &= ~BB_VISITED;\n+\n   FOR_EACH_BB (bb)\n     {\n+      bb->flags |= BB_VISITED;\n+\n       /* If a block has a single predecessor, that we've already\n \t processed, begin with the value data that was live at\n \t the end of the predecessor block.  */\n       /* ??? Ought to use more intelligent queuing of blocks.  */\n-      if (EDGE_COUNT (bb->preds) == 1)\n-\tfor (bbp = bb; bbp && bbp != EDGE_PRED (bb, 0)->src; bbp = bbp->prev_bb);\n       if (EDGE_COUNT (bb->preds) == 1\n-\t  && ! (EDGE_PRED (bb, 0)->flags & (EDGE_ABNORMAL_CALL | EDGE_EH))\n-\t  && EDGE_PRED (bb, 0)->src != ENTRY_BLOCK_PTR\n-\t  && bbp)\n+\t  && ((EDGE_PRED (bb, 0)->src->flags & BB_VISITED) != 0)\n+\t  && ! (EDGE_PRED (bb, 0)->flags & (EDGE_ABNORMAL_CALL | EDGE_EH)))\n \tall_vd[bb->index] = all_vd[EDGE_PRED (bb, 0)->src->index];\n       else\n \tinit_value_data (all_vd + bb->index);\n@@ -1771,6 +1778,12 @@ copyprop_hardreg_forward (void)\n \tneed_refresh = true;\n     }\n \n+  /* Clear BB_VISITED flag on each basic block.  We do not need to\n+     clear the one on ENTRY_BLOCK_PTR because it's already cleared\n+     above.  */\n+  FOR_EACH_BB (bb)\n+    bb->flags &= ~BB_VISITED;\n+\n   if (need_refresh)\n     {\n       if (dump_file)"}]}