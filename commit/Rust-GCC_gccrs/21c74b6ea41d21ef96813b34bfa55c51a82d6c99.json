{"sha": "21c74b6ea41d21ef96813b34bfa55c51a82d6c99", "node_id": "C_kwDOANBUbNoAKDIxYzc0YjZlYTQxZDIxZWY5NjgxM2IzNGJmYTU1YzUxYTgyZDZjOTk", "commit": {"author": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2023-03-27T17:48:02Z"}, "committer": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2023-03-28T07:26:14Z"}, "message": "fixincludes: Declare memmem if it's not declared in system headers [PR109293]\n\nmemmem is not POSIX so the system may lack it.  Then libiberty will\nprovide an implementation, but it's a \"supplemental function\" and not\ndeclared in libiberty.h.  We need to declare the prototype to use it\nthen.\n\nSee libiberty doc at\nhttps://gcc.gnu.org/onlinedocs/libiberty/Supplemental-Functions.html.\n\nTested by bootstrapping GCC in the following container environments on\nx86_64-linux-gnu:\n\n1. \"Vanilla\" system with memmem in Glibc.\n2. memmem removed from string.h.\n3. memmem removed from both string.h and libc.so.\n\nFor 3, also verified that memmem from libiberty is linked into fixincl\nexecutable.\n\nOk for trunk?\n\nfixincludes/ChangeLog:\n\n\tPR other/109293\n\t* configure.ac (AC_CHECK_DECLS): Add memmem.\n\t* configure: Regenerate.\n\t* config.h.in: Regenerate.\n\t* system.h (memmem): Declare if HAVE_DECL_MEMMEM is zero.", "tree": {"sha": "62a78f9ea160bc80175ee60be1ffc5539235e6f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62a78f9ea160bc80175ee60be1ffc5539235e6f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21c74b6ea41d21ef96813b34bfa55c51a82d6c99", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQSR0PV2MB+STX3t3OisqtIOGecQ4wUCZCKWlgAKCRCsqtIOGecQ\n41HCAP9nyl/Fjb+9CcPAsTjLgZdMVF8ezE4CXOkUTAdJcQG/WwEAlmuUg3wYW72l\nvVMu4gkRmn1yL63wfVh1OfaC/AVlmA4=\n=bEYn\n-----END PGP SIGNATURE-----", "payload": "tree 62a78f9ea160bc80175ee60be1ffc5539235e6f0\nparent 33312336d576a0aaa4f425686d652b09151a7c24\nauthor Xi Ruoyao <xry111@xry111.site> 1679939282 +0800\ncommitter Xi Ruoyao <xry111@xry111.site> 1679988374 +0800\n\nfixincludes: Declare memmem if it's not declared in system headers [PR109293]\n\nmemmem is not POSIX so the system may lack it.  Then libiberty will\nprovide an implementation, but it's a \"supplemental function\" and not\ndeclared in libiberty.h.  We need to declare the prototype to use it\nthen.\n\nSee libiberty doc at\nhttps://gcc.gnu.org/onlinedocs/libiberty/Supplemental-Functions.html.\n\nTested by bootstrapping GCC in the following container environments on\nx86_64-linux-gnu:\n\n1. \"Vanilla\" system with memmem in Glibc.\n2. memmem removed from string.h.\n3. memmem removed from both string.h and libc.so.\n\nFor 3, also verified that memmem from libiberty is linked into fixincl\nexecutable.\n\nOk for trunk?\n\nfixincludes/ChangeLog:\n\n\tPR other/109293\n\t* configure.ac (AC_CHECK_DECLS): Add memmem.\n\t* configure: Regenerate.\n\t* config.h.in: Regenerate.\n\t* system.h (memmem): Declare if HAVE_DECL_MEMMEM is zero.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c74b6ea41d21ef96813b34bfa55c51a82d6c99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21c74b6ea41d21ef96813b34bfa55c51a82d6c99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c74b6ea41d21ef96813b34bfa55c51a82d6c99/comments", "author": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33312336d576a0aaa4f425686d652b09151a7c24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33312336d576a0aaa4f425686d652b09151a7c24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33312336d576a0aaa4f425686d652b09151a7c24"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "0fd21b721b9c97f24ed33a37fb9936cc8e166276", "filename": "fixincludes/config.h.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c74b6ea41d21ef96813b34bfa55c51a82d6c99/fixincludes%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c74b6ea41d21ef96813b34bfa55c51a82d6c99/fixincludes%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Fconfig.h.in?ref=21c74b6ea41d21ef96813b34bfa55c51a82d6c99", "patch": "@@ -78,6 +78,10 @@\n    don't. */\n #undef HAVE_DECL_GETC_UNLOCKED\n \n+/* Define to 1 if you have the declaration of `memmem', and to 0 if you don't.\n+   */\n+#undef HAVE_DECL_MEMMEM\n+\n /* Define to 1 if you have the declaration of `putchar_unlocked', and to 0 if\n    you don't. */\n #undef HAVE_DECL_PUTCHAR_UNLOCKED"}, {"sha": "bdcc41f6ddc8d20ab8a56ee0ccc5d69cd395c469", "filename": "fixincludes/configure", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c74b6ea41d21ef96813b34bfa55c51a82d6c99/fixincludes%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c74b6ea41d21ef96813b34bfa55c51a82d6c99/fixincludes%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Fconfigure?ref=21c74b6ea41d21ef96813b34bfa55c51a82d6c99", "patch": "@@ -5043,6 +5043,16 @@ fi\n cat >>confdefs.h <<_ACEOF\n #define HAVE_DECL_VASPRINTF $ac_have_decl\n _ACEOF\n+ac_fn_c_check_decl \"$LINENO\" \"memmem\" \"ac_cv_have_decl_memmem\" \"$ac_includes_default\"\n+if test \"x$ac_cv_have_decl_memmem\" = xyes; then :\n+  ac_have_decl=1\n+else\n+  ac_have_decl=0\n+fi\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_DECL_MEMMEM $ac_have_decl\n+_ACEOF\n \n ac_fn_c_check_decl \"$LINENO\" \"clearerr_unlocked\" \"ac_cv_have_decl_clearerr_unlocked\" \"$ac_includes_default\"\n if test \"x$ac_cv_have_decl_clearerr_unlocked\" = xyes; then :"}, {"sha": "ef2227e3c9385fabd2073cd9a53fed99047b2f38", "filename": "fixincludes/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c74b6ea41d21ef96813b34bfa55c51a82d6c99/fixincludes%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c74b6ea41d21ef96813b34bfa55c51a82d6c99/fixincludes%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Fconfigure.ac?ref=21c74b6ea41d21ef96813b34bfa55c51a82d6c99", "patch": "@@ -88,7 +88,7 @@ define(fixincludes_UNLOCKED_FUNCS, clearerr_unlocked feof_unlocked dnl\n   fread_unlocked fwrite_unlocked getchar_unlocked getc_unlocked dnl\n   putchar_unlocked putc_unlocked)\n AC_CHECK_FUNCS(fixincludes_UNLOCKED_FUNCS)\n-AC_CHECK_DECLS([abort, asprintf, basename(char *), errno, vasprintf])\n+AC_CHECK_DECLS([abort, asprintf, basename(char *), errno, vasprintf, memmem])\n AC_CHECK_DECLS(m4_split(m4_normalize(fixincludes_UNLOCKED_FUNCS)))\n \n # Checks for typedefs, structures, and compiler characteristics."}, {"sha": "687fb2e2025d6f62a9c1d44527ea1524b56504da", "filename": "fixincludes/system.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c74b6ea41d21ef96813b34bfa55c51a82d6c99/fixincludes%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c74b6ea41d21ef96813b34bfa55c51a82d6c99/fixincludes%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Fsystem.h?ref=21c74b6ea41d21ef96813b34bfa55c51a82d6c99", "patch": "@@ -209,6 +209,10 @@ extern int errno;\n extern void abort (void);\n #endif\n \n+#if defined (HAVE_DECL_MEMMEM) && !HAVE_DECL_MEMMEM\n+extern void *memmem (const void *, size_t, const void *, size_t);\n+#endif\n+\n #if HAVE_SYS_STAT_H\n # include <sys/stat.h>\n #endif"}]}