{"sha": "e9d6bd8c9b12e8022cdb18d492f41e9f5e46c114", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTlkNmJkOGM5YjEyZTgwMjJjZGIxOGQ0OTJmNDFlOWY1ZTQ2YzExNA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2012-11-28T10:11:27Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2012-11-28T10:11:27Z"}, "message": "re PR middle-end/55266 (vector expansion: 24 movs for 4 adds)\n\n2012-11-28  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR middle-end/55266\n\t* fold-const.c (fold_ternary_loc) [BIT_FIELD_REF]: Handle\n\tCONSTRUCTOR with vector elements.\n\t* tree-ssa-propagate.c (valid_gimple_rhs_p): Handle CONSTRUCTOR\n\tand BIT_FIELD_REF.\n\nFrom-SVN: r193884", "tree": {"sha": "cfedd2f3857f9383136b9f4f7f838c9bfb22dcc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfedd2f3857f9383136b9f4f7f838c9bfb22dcc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9d6bd8c9b12e8022cdb18d492f41e9f5e46c114", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9d6bd8c9b12e8022cdb18d492f41e9f5e46c114", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9d6bd8c9b12e8022cdb18d492f41e9f5e46c114", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9d6bd8c9b12e8022cdb18d492f41e9f5e46c114/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2c3e2ce268d8285936c6ecd3d478f70be407194f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c3e2ce268d8285936c6ecd3d478f70be407194f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c3e2ce268d8285936c6ecd3d478f70be407194f"}], "stats": {"total": 108, "additions": 70, "deletions": 38}, "files": [{"sha": "a15b5ef34ff0237ae46778033ee29e1f522eb5e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9d6bd8c9b12e8022cdb18d492f41e9f5e46c114/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9d6bd8c9b12e8022cdb18d492f41e9f5e46c114/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e9d6bd8c9b12e8022cdb18d492f41e9f5e46c114", "patch": "@@ -1,3 +1,11 @@\n+2012-11-28  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR middle-end/55266\n+\t* fold-const.c (fold_ternary_loc) [BIT_FIELD_REF]: Handle\n+\tCONSTRUCTOR with vector elements.\n+\t* tree-ssa-propagate.c (valid_gimple_rhs_p): Handle CONSTRUCTOR\n+\tand BIT_FIELD_REF.\n+\n 2012-11-28  Richard Biener  <rguenther@suse.de>\n \n \tPR c/35634"}, {"sha": "e4693cdd16a0329363ddce7a5c753201ae1f6b02", "filename": "gcc/fold-const.c", "status": "modified", "additions": 48, "deletions": 38, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9d6bd8c9b12e8022cdb18d492f41e9f5e46c114/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9d6bd8c9b12e8022cdb18d492f41e9f5e46c114/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e9d6bd8c9b12e8022cdb18d492f41e9f5e46c114", "patch": "@@ -14081,52 +14081,62 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \t    {\n \t      idx = idx / width;\n \t      n = n / width;\n-\t      if (TREE_CODE (type) == VECTOR_TYPE)\n+\n+\t      if (TREE_CODE (arg0) == VECTOR_CST)\n \t\t{\n-\t\t  if (TREE_CODE (arg0) == VECTOR_CST)\n-\t\t    {\n-\t\t      tree *vals = XALLOCAVEC (tree, n);\n-\t\t      unsigned i;\n-\t\t      for (i = 0; i < n; ++i)\n-\t\t\tvals[i] = VECTOR_CST_ELT (arg0, idx + i);\n-\t\t      return build_vector (type, vals);\n-\t\t    }\n-\t\t  else\n-\t\t    {\n-\t\t      vec<constructor_elt, va_gc> *vals;\n-\t\t      unsigned i;\n-\t\t      if (CONSTRUCTOR_NELTS (arg0) == 0)\n-\t\t\treturn build_constructor (type,\n-\t\t\t\t\t      NULL);\n-\t\t      if (TREE_CODE (TREE_TYPE (CONSTRUCTOR_ELT (arg0,\n-\t\t\t\t\t\t\t\t 0)->value))\n-\t\t\t  != VECTOR_TYPE)\n-\t\t\t{\n-\t\t\t  vec_alloc (vals, n);\n-\t\t\t  for (i = 0;\n-\t\t\t       i < n && idx + i < CONSTRUCTOR_NELTS (arg0);\n-\t\t\t       ++i)\n-\t\t\t    CONSTRUCTOR_APPEND_ELT (vals, NULL_TREE,\n-\t\t\t\t\t\t    CONSTRUCTOR_ELT\n-\t\t\t\t\t\t      (arg0, idx + i)->value);\n-\t\t\t  return build_constructor (type, vals);\n-\t\t\t}\n-\t\t    }\n+\t\t  if (n == 1)\n+\t\t    return VECTOR_CST_ELT (arg0, idx);\n+\n+\t\t  tree *vals = XALLOCAVEC (tree, n);\n+\t\t  for (unsigned i = 0; i < n; ++i)\n+\t\t    vals[i] = VECTOR_CST_ELT (arg0, idx + i);\n+\t\t  return build_vector (type, vals);\n \t\t}\n-\t      else if (n == 1)\n+\n+\t      /* Constructor elements can be subvectors.  */\n+\t      unsigned HOST_WIDE_INT k = 1;\n+\t      if (CONSTRUCTOR_NELTS (arg0) != 0)\n \t\t{\n-\t\t  if (TREE_CODE (arg0) == VECTOR_CST)\n-\t\t    return VECTOR_CST_ELT (arg0, idx);\n-\t\t  else if (CONSTRUCTOR_NELTS (arg0) == 0)\n-\t\t    return build_zero_cst (type);\n-\t\t  else if (TREE_CODE (TREE_TYPE (CONSTRUCTOR_ELT (arg0,\n-\t\t\t\t\t\t\t\t  0)->value))\n-\t\t\t   != VECTOR_TYPE)\n+\t\t  tree cons_elem = TREE_TYPE (CONSTRUCTOR_ELT (arg0, 0)->value);\n+\t\t  if (TREE_CODE (cons_elem) == VECTOR_TYPE)\n+\t\t    k = TYPE_VECTOR_SUBPARTS (cons_elem);\n+\t\t}\n+\n+\t      /* We keep an exact subset of the constructor elements.  */\n+\t      if ((idx % k) == 0 && (n % k) == 0)\n+\t\t{\n+\t\t  if (CONSTRUCTOR_NELTS (arg0) == 0)\n+\t\t    return build_constructor (type, NULL);\n+\t\t  idx /= k;\n+\t\t  n /= k;\n+\t\t  if (n == 1)\n \t\t    {\n \t\t      if (idx < CONSTRUCTOR_NELTS (arg0))\n \t\t\treturn CONSTRUCTOR_ELT (arg0, idx)->value;\n \t\t      return build_zero_cst (type);\n \t\t    }\n+\n+\t\t  vec<constructor_elt, va_gc> *vals;\n+\t\t  vec_alloc (vals, n);\n+\t\t  for (unsigned i = 0;\n+\t\t       i < n && idx + i < CONSTRUCTOR_NELTS (arg0);\n+\t\t       ++i)\n+\t\t    CONSTRUCTOR_APPEND_ELT (vals, NULL_TREE,\n+\t\t\t\t\t    CONSTRUCTOR_ELT\n+\t\t\t\t\t      (arg0, idx + i)->value);\n+\t\t  return build_constructor (type, vals);\n+\t\t}\n+\t      /* The bitfield references a single constructor element.  */\n+\t      else if (idx + n <= (idx / k + 1) * k)\n+\t\t{\n+\t\t  if (CONSTRUCTOR_NELTS (arg0) <= idx / k)\n+\t\t    return build_zero_cst (type);\n+\t\t  else if (n == k)\n+\t\t    return CONSTRUCTOR_ELT (arg0, idx / k)->value;\n+\t\t  else\n+\t\t    return fold_build3_loc (loc, code, type,\n+\t\t      CONSTRUCTOR_ELT (arg0, idx / k)->value, op1,\n+\t\t      build_int_cst (TREE_TYPE (op2), (idx % k) * width));\n \t\t}\n \t    }\n \t}"}, {"sha": "a959ea75640242c90c1ed3e1e03b70a38a7a94ee", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9d6bd8c9b12e8022cdb18d492f41e9f5e46c114/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9d6bd8c9b12e8022cdb18d492f41e9f5e46c114/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=e9d6bd8c9b12e8022cdb18d492f41e9f5e46c114", "patch": "@@ -611,10 +611,24 @@ valid_gimple_rhs_p (tree expr)\n       return false;\n \n     case tcc_exceptional:\n+      if (code == CONSTRUCTOR)\n+\t{\n+\t  unsigned i;\n+\t  tree elt;\n+\t  FOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (expr), i, elt)\n+\t    if (!is_gimple_val (elt))\n+\t      return false;\n+\t  return true;\n+\t}\n       if (code != SSA_NAME)\n         return false;\n       break;\n \n+    case tcc_reference:\n+      if (code == BIT_FIELD_REF)\n+\treturn is_gimple_val (TREE_OPERAND (expr, 0));\n+      return false;\n+\n     default:\n       return false;\n     }"}]}