{"sha": "6dcd26ea33adf4093ea90a2f061ef757e504c38b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRjZDI2ZWEzM2FkZjQwOTNlYTkwYTJmMDYxZWY3NTdlNTA0YzM4Yg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2000-08-11T00:30:55Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2000-08-11T00:30:55Z"}, "message": "Fix interworking support of functions in lib1funcs.asm.\n\nFrom-SVN: r35610", "tree": {"sha": "761c2877be963f9112c9df19687ece7abfbbb5b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/761c2877be963f9112c9df19687ece7abfbbb5b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dcd26ea33adf4093ea90a2f061ef757e504c38b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dcd26ea33adf4093ea90a2f061ef757e504c38b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dcd26ea33adf4093ea90a2f061ef757e504c38b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dcd26ea33adf4093ea90a2f061ef757e504c38b/comments", "author": null, "committer": null, "parents": [{"sha": "64530b8273b20bad96738af0b8ec690f1fe6a094", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64530b8273b20bad96738af0b8ec690f1fe6a094", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64530b8273b20bad96738af0b8ec690f1fe6a094"}], "stats": {"total": 246, "additions": 141, "deletions": 105}, "files": [{"sha": "713a190c18f84e6fa3fa79a3815cda3eea8c4192", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dcd26ea33adf4093ea90a2f061ef757e504c38b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dcd26ea33adf4093ea90a2f061ef757e504c38b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6dcd26ea33adf4093ea90a2f061ef757e504c38b", "patch": "@@ -1,3 +1,11 @@\n+2000-08-10  Richard Earnshaw <rearnshaw@arm.com> & Nick Clifton  <nickc@cygnus.com>\n+\n+\t* arm.h (CPP_SPEC): Use sub-spec cpp_interwork.\n+\t(CPP_INTERWORK_SPEC, CPP_INTERWORK_DEFAULT_SPEC): New sub-specs.\n+\t(EXTRA_SPECS): Add them.\n+\t* arm/lib1funcs.asm: Support builds for interworking.\n+\tUse macros to eliminate duplicated pieces of code.\n+\n 2000-08-10  Kazu Hirata  <kazu@hxi.com>\n \n \t* h8300.c: Fix comment typos."}, {"sha": "c45f86bfd5b8a764f8958f7f30ca4b6f584acf4e", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dcd26ea33adf4093ea90a2f061ef757e504c38b/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dcd26ea33adf4093ea90a2f061ef757e504c38b/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=6dcd26ea33adf4093ea90a2f061ef757e504c38b", "patch": "@@ -127,7 +127,7 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n \n #define CPP_SPEC \"\\\n %(cpp_cpu_arch) %(cpp_apcs_pc) %(cpp_float) \\\n-%(cpp_endian) %(subtarget_cpp_spec) %(cpp_isa)\"\n+%(cpp_endian) %(subtarget_cpp_spec) %(cpp_isa) %(cpp_interwork)\"\n \n #define CPP_ISA_SPEC \"%{mthumb:-Dthumb -D__thumb__} %{!mthumb:-Darm -D__arm__}\"\n \n@@ -234,6 +234,20 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n /* Default is little endian.  */\n #define CPP_ENDIAN_DEFAULT_SPEC \"-D__ARMEL__ %{mthumb:-D__THUMBEL__}\"\n \n+/* Add a define for interworking.  Needed when building libgcc.a.  \n+   This must define __THUMB_INTERWORK__ to the pre-processor if\n+   interworking is enabled by default.  */\n+#ifndef CPP_INTERWORK_DEFAULT_SPEC\n+#define CPP_INTERWORK_DEFAULT_SPEC \"\"\n+#endif\n+\n+#define CPP_INTERWORK_SPEC \"\t\t\t\t\t\t\\\n+%{mthumb-interwork:\t\t\t\t\t\t\t\\\n+  %{mno-thumb-interwork: %eIncompatible interworking options}\t\t\\\n+  -D__THUMB_INTERWORK__}\t\t\t\t\t\t\\\n+%{!mthumb-interwork:%{!mno-thumb-interwork:%(cpp_interwork_default)}}\t\\\n+\"\n+\n #define CC1_SPEC \"\"\n \n /* This macro defines names of additional specifications to put in the specs\n@@ -255,6 +269,8 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n   { \"cpp_endian\",\t\tCPP_ENDIAN_SPEC },\t\t\\\n   { \"cpp_endian_default\",\tCPP_ENDIAN_DEFAULT_SPEC },\t\\\n   { \"cpp_isa\",\t\t\tCPP_ISA_SPEC },\t\t\t\\\n+  { \"cpp_interwork\",\t\tCPP_INTERWORK_SPEC },\t\t\\\n+  { \"cpp_interwork_default\",\tCPP_INTERWORK_DEFAULT_SPEC },\t\\\n   { \"subtarget_cpp_spec\",\tSUBTARGET_CPP_SPEC },           \\\n   SUBTARGET_EXTRA_SPECS\n "}, {"sha": "aade9a240fc2c6a8a1ea84434a9c3056b00832aa", "filename": "gcc/config/arm/lib1funcs.asm", "status": "modified", "additions": 116, "deletions": 104, "changes": 220, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dcd26ea33adf4093ea90a2f061ef757e504c38b/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dcd26ea33adf4093ea90a2f061ef757e504c38b/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flib1funcs.asm?ref=6dcd26ea33adf4093ea90a2f061ef757e504c38b", "patch": "@@ -26,17 +26,7 @@ You should have received a copy of the GNU General Public License\n along with this program; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n-\n-#ifdef __APCS_26__\n-#define RET\tmovs\tpc, lr\n-#define RETc(x)\tmov##x##s\tpc, lr\n-#define RETCOND ^\n-#else\n-#define RET\tmov\tpc, lr\n-#define RETc(x)\tmov##x\tpc, lr\n-#define RETCOND\n-#endif\n-\n+/* ------------------------------------------------------------------------ */\n #ifndef __USER_LABEL_PREFIX__\n #error  __USER_LABEL_PREFIX__ not defined\n #endif\n@@ -52,7 +42,7 @@ Boston, MA 02111-1307, USA.  */\n \n #ifdef __ELF__\n #ifdef __thumb__\n-#define __PLT__  /* Not supported in thumb assembler (for now).  */\n+#define __PLT__  /* Not supported in Thumb assembler (for now).  */\n #else\n #define __PLT__ (PLT)\n #endif\n@@ -64,6 +54,55 @@ Boston, MA 02111-1307, USA.  */\n #define SIZE(x)\n #endif\n \n+/* Function end macros.  Variants for 26 bit APCS and interworking.  */\n+#ifdef __APCS_26__\n+# define RET\t\tmovs\tpc, lr\n+# define RETc(x)\tmov##x##s\tpc, lr\n+# define RETCOND \t^\n+.macro ARM_LDIV0\n+Ldiv0:\n+\tstr\tlr, [sp, #-4]!\n+\tbl\tSYM (__div0) __PLT__\n+\tmov\tr0, #0\t\t\t@ About as wrong as it could be.\n+\tldmia\tsp!, {pc}^\n+.endm\n+#else\n+# ifdef __THUMB_INTERWORK__\n+#  define RET\t\tbx\tlr\n+#  define RETc(x)\tbx##x\tlr\n+.macro THUMB_LDIV0\n+\tpush\t{ lr }\n+\tbl\tSYM (__div0)\n+\tmov\tr0, #0\t\t\t@ About as wrong as it could be.\n+\tpop\t{ r1 }\n+\tbx\tr1\n+.endm\n+.macro ARM_LDIV0\n+\tstr\tlr, [sp, #-4]!\n+\tbl\tSYM (__div0) __PLT__\n+\tmov\tr0, #0\t\t\t@ About as wrong as it could be.\n+\tldr\tlr, [sp], #4\n+\tbx\tlr\n+.endm\t\n+# else\n+#  define RET\t\tmov\tpc, lr\n+#  define RETc(x)\tmov##x\tpc, lr\n+.macro THUMB_LDIV0\n+\tpush\t{ lr }\n+\tbl\tSYM (__div0)\n+\tmov\tr0, #0\t\t\t@ About as wrong as it could be.\n+\tpop\t{ pc }\n+.endm\n+.macro ARM_LDIV0\n+\tstr\tlr, [sp, #-4]!\n+\tbl\tSYM (__div0) __PLT__\n+\tmov\tr0, #0\t\t\t@ About as wrong as it could be.\n+\tldmia\tsp!, {pc}\n+.endm\t\n+# endif\n+# define RETCOND\n+#endif\n+\n #ifdef __thumb__\n #define THUMB_FUNC .thumb_func\n #define THUMB_CODE .force_thumb\n@@ -83,9 +122,27 @@ Boston, MA 02111-1307, USA.  */\n SYM (__\\name):\n .endm\n \n+.macro FUNC_END name\n+Ldiv0:\n+#ifdef __thumb__\n+\tTHUMB_LDIV0\n+#else\n+\tARM_LDIV0\n+#endif\n+\tSIZE (__\\name)\t\n+.endm\n+\n+.macro THUMB_FUNC_START name\n+\t.globl\tSYM (\\name)\n+\tTYPE\t(\\name)\n+\t.thumb_func\n+SYM (\\name):\n+.endm\n+\t\t\n /* Used for Thumb code.  */\t\n work\t\t.req\tr4\t@ XXXX is this safe ?\n \n+/* ------------------------------------------------------------------------ */\n #ifdef L_udivsi3\n \n dividend\t.req\tr0\n@@ -97,7 +154,7 @@ sp\t\t.req\tr13\n lr\t\t.req\tr14\n pc\t\t.req\tr15\n \t\n- FUNC_START udivsi3\n+\tFUNC_START udivsi3\n \n #ifdef __thumb__\n \n@@ -181,14 +238,8 @@ Lgot_result:\n \tmov\tr0, result\n \tpop\t{ work }\n \tRET\n-\n-Ldiv0:\n-\tpush\t{ lr }\n-\tbl\tSYM (__div0) __PLT__\n-\tmov\tr0, #0\t\t\t@ about as wrong as it could be\n-\tpop\t{ pc }\n-\n-#else /* arm version */\n+\t\n+#else /* ARM version.  */\n \t\n \tcmp\tdivisor, #0\n \tbeq\tLdiv0\n@@ -241,18 +292,12 @@ Lgot_result:\n \tmov\tr0, result\n \tRET\t\n \n-Ldiv0:\n-\tstr\tlr, [sp, #-4]!\n-\tbl\tSYM (__div0) __PLT__\n-\tmov\tr0, #0\t\t\t@ about as wrong as it could be\n-\tldmia\tsp!, {pc}RETCOND\n+#endif /* ARM version */\n \n-#endif /* arm version */\n-\t\n- SIZE\t(__udivsi3)\n+\tFUNC_END udivsi3\t\n \n #endif /* L_udivsi3 */\n-\n+/* ------------------------------------------------------------------------ */\n #ifdef L_umodsi3\n \n dividend\t.req\tr0\n@@ -264,7 +309,7 @@ sp\t\t.req\tr13\n lr\t\t.req\tr14\n pc\t\t.req\tr15\n \t\n- FUNC_START umodsi3\n+\tFUNC_START umodsi3\n \n #ifdef __thumb__\n \n@@ -391,14 +436,8 @@ Over9:\n \tadd\tdividend, dividend, work\n Over10:\n \tpop\t{ work }\n-\tRET\t\n-Ldiv0:\n-\tpush\t{ lr }\n-\tbl\tSYM (__div0) __PLT__\n-\tmov\tr0, #0\t\t\t@ about as wrong as it could be\n-\tpop\t{ pc }\n-\n-#else  /* arm version */\n+\t\n+#else  /* ARM version.  */\n \t\n \tcmp\tdivisor, #0\n \tbeq\tLdiv0\n@@ -463,18 +502,12 @@ Loop3:\n \taddne\tdividend, dividend, divisor, lsr #1\n \tRET\t\n \n-Ldiv0:\n-\tstr\tlr, [sp, #-4]!\n-\tbl\tSYM (__div0) __PLT__\n-\tmov\tr0, #0\t\t\t@ about as wrong as it could be\n-\tldmia\tsp!, {pc}RETCOND\n-\n #endif /* arm version */\n \t\n- SIZE\t(__umodsi3)\n+\tFUNC_END umodsi3\n \n #endif /* L_umodsi3 */\n-\n+/* ------------------------------------------------------------------------ */\n #ifdef L_divsi3\n \n dividend\t.req\tr0\n@@ -486,7 +519,7 @@ sp\t\t.req\tr13\n lr\t\t.req\tr14\n pc\t\t.req\tr15\n \n- FUNC_START divsi3\t\n+\tFUNC_START divsi3\t\n \n #ifdef __thumb__\n \tcmp\tdivisor, #0\n@@ -585,13 +618,7 @@ Over7:\n \tpop\t{ work }\n \tRET\t\n \n-Ldiv0:\n-\tpush\t{ lr }\n-\tbl\tSYM (__div0) __PLT__\n-\tmov\tr0, #0\t\t\t@ about as wrong as it could be\n-\tpop\t{ pc }\n-\t\n-#else /* arm version */\n+#else /* ARM version.  */\n \t\n \teor\tip, dividend, divisor\t\t@ Save the sign of the result.\n \tmov\tcurbit, #1\n@@ -651,18 +678,12 @@ Lgot_result:\n \trsbmi\tr0, r0, #0\n \tRET\t\n \n-Ldiv0:\n-\tstr\tlr, [sp, #-4]!\n-\tbl\tSYM (__div0) __PLT__\n-\tmov\tr0, #0\t\t\t@ about as wrong as it could be\n-\tldmia\tsp!, {pc}RETCOND\n-\n-#endif /* arm version */\n+#endif /* ARM version */\n \t\n- SIZE\t(__divsi3)\n+\tFUNC_END divsi3\n \n #endif /* L_divsi3 */\n-\n+/* ------------------------------------------------------------------------ */\n #ifdef L_modsi3\n \n dividend\t.req\tr0\n@@ -674,7 +695,7 @@ sp\t\t.req\tr13\n lr\t\t.req\tr14\n pc\t\t.req\tr15\n \t\n- FUNC_START modsi3\n+\tFUNC_START modsi3\n \n #ifdef __thumb__\n \n@@ -814,14 +835,8 @@ Lgot_result:\n Over10:\n \tpop\t{ work }\n \tRET\t\n-\n-Ldiv0:\n-\tpush    { lr }\n-\tbl\tSYM (__div0) __PLT__\n-\tmov\tr0, #0\t\t\t@ about as wrong as it could be\n-\tpop\t{ pc }\n-\n-#else /* arm version */\n+\t\n+#else /* ARM version.  */\n \t\n \tmov\tcurbit, #1\n \tcmp\tdivisor, #0\n@@ -896,50 +911,49 @@ Lgot_result:\n \tcmp\tip, #0\n \trsbmi\tdividend, dividend, #0\n \tRET\t\n-\n-Ldiv0:\n-\tstr\tlr, [sp, #-4]!\n-\tbl\tSYM (__div0) __PLT__\n-\tmov\tr0, #0\t\t\t@ about as wrong as it could be\n-\tldmia\tsp!, {pc}RETCOND\n-\n-#endif /* arm version */\n \t\n- SIZE\t(__modsi3)\n+#endif /* ARM version */\n+\t\n+\tFUNC_END modsi3\n \n #endif /* L_modsi3 */\n-\n+/* ------------------------------------------------------------------------ */\n #ifdef L_dvmd_tls\n \n- FUNC_START div0\t\n+\tFUNC_START div0\t\n \n \tRET\t\n \n- SIZE\t(__div0)\n+\tSIZE\t(__div0)\n \t\n #endif /* L_divmodsi_tools */\n-\n+/* ------------------------------------------------------------------------ */\n #ifdef L_dvmd_lnx\n @ GNU/Linux division-by zero handler.  Used in place of L_dvmd_tls\n \n #include <asm/unistd.h>\n \t\n #define SIGFPE\t8\t\t\t@ cant use <asm/signal.h> as it\n \t\t\t\t\t@ contains too much C rubbish\n- FUNC_START div0\t\n+\tFUNC_START div0\t\n \n \tstmfd\tsp!, {r1, lr}\n \tswi\t__NR_getpid\n \tcmn\tr0, #1000\n \tldmhsfd\tsp!, {r1, pc}RETCOND\t@ not much we can do\n \tmov\tr1, #SIGFPE\n \tswi\t__NR_kill\n+#ifdef __THUMB_INTERWORK__\n+\tldmfd\tsp!, {r1, lr}\n+\tbx\tlr\n+#else\n \tldmfd\tsp!, {r1, pc}RETCOND\n-\n- SIZE \t(__div0)\n+#endif\n+\t\n+\tSIZE \t(__div0)\n \t\n #endif /* L_dvmd_lnx */\n-\n+/* ------------------------------------------------------------------------ */\n /* These next two sections are here despite the fact that they contain Thumb \n    assembler because their presence allows interworked code to be linked even\n    when the GCC library is this one.  */\n@@ -958,11 +972,10 @@ Ldiv0:\n \t.text\n \t.align 0\n         .force_thumb\n+\t\n .macro call_via register\n-\t.globl\tSYM (_call_via_\\register)\n-\tTYPE\t(_call_via_\\register)\n-\t.thumb_func\n-SYM (_call_via_\\register):\n+\tTHUMB_FUNC_START _call_via_\\register\n+\n \tbx\t\\register\n \tnop\n \n@@ -986,7 +999,7 @@ SYM (_call_via_\\register):\n \tcall_via lr\n \n #endif /* L_call_via_rX */\n-\n+/* ------------------------------------------------------------------------ */\n /* Do not build the interworking functions when the target cpu\n    is the arm v3 architecture.  (This is one of the multilib\n    options).  */\n@@ -1015,10 +1028,9 @@ _arm_return:\n \n .macro interwork register\t\t\t\t\t\n \t.code   16\n-\t.globl\tSYM (_interwork_call_via_\\register)\n-\tTYPE\t(_interwork_call_via_\\register)\n-\t.thumb_func\n-SYM (_interwork_call_via_\\register):\n+\n+\tTHUMB_FUNC_START _interwork_call_via_\\register\n+\n \tbx \tpc\n \tnop\n \t\n@@ -1048,12 +1060,11 @@ SYM (_interwork_call_via_\\register):\n \tinterwork ip\n \tinterwork sp\n \t\n-\t/* The lr case has to be handled a little differently...*/\n+\t/* The LR case has to be handled a little differently...  */\n \t.code 16\n-\t.globl\tSYM (_interwork_call_via_lr)\n-\tTYPE\t(_interwork_call_via_lr)\n-\t.thumb_func\n-SYM (_interwork_call_via_lr):\n+\n+\tTHUMB_FUNC_START _interwork_call_via_lr\n+\n \tbx \tpc\n \tnop\n \t\n@@ -1069,3 +1080,4 @@ SYM (_interwork_call_via_lr):\n \tSIZE\t(_interwork_call_via_lr)\n \t\n #endif /* L_interwork_call_via_rX */\n+"}]}