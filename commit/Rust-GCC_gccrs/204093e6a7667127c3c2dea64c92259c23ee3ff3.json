{"sha": "204093e6a7667127c3c2dea64c92259c23ee3ff3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA0MDkzZTZhNzY2NzEyN2MzYzJkZWE2NGM5MjI1OWMyM2VlM2ZmMw==", "commit": {"author": {"name": "Donn Terry", "email": "donn@interix.com", "date": "2000-09-06T00:45:47Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2000-09-06T00:45:47Z"}, "message": "Makefile.in: Restructure bootstrap stages to allow clean restart after failure.\n\n* Makefile.in: Restructure bootstrap stages to allow clean\nrestart after failure.\n\nFrom-SVN: r36173", "tree": {"sha": "3361b57e2bf84828cc2b46365661bc6040a6a3bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3361b57e2bf84828cc2b46365661bc6040a6a3bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/204093e6a7667127c3c2dea64c92259c23ee3ff3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/204093e6a7667127c3c2dea64c92259c23ee3ff3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/204093e6a7667127c3c2dea64c92259c23ee3ff3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/204093e6a7667127c3c2dea64c92259c23ee3ff3/comments", "author": null, "committer": null, "parents": [{"sha": "514f96e69c22ffa0262d44f9a9bf46ecfa005185", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/514f96e69c22ffa0262d44f9a9bf46ecfa005185", "html_url": "https://github.com/Rust-GCC/gccrs/commit/514f96e69c22ffa0262d44f9a9bf46ecfa005185"}], "stats": {"total": 94, "additions": 75, "deletions": 19}, "files": [{"sha": "92bbf3f84f0e8f57ac2f20bf4ecfa41bb75355b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/204093e6a7667127c3c2dea64c92259c23ee3ff3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/204093e6a7667127c3c2dea64c92259c23ee3ff3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=204093e6a7667127c3c2dea64c92259c23ee3ff3", "patch": "@@ -1,3 +1,8 @@\n+2000-09-03  Donn Terry  <donn@interix.com>,  Laurynas Biveinis  <lauras@softhome.net>\n+\n+\t* Makefile.in: Restructure bootstrap stages to allow clean\n+\trestart after failure.\n+\n 2000-09-05  Richard Henderson  <rth@cygnus.com>\n \n \t* config/ia64.md (movsi and movdi patterns): Allow moves from"}, {"sha": "9dfa222afc63a394e724c40bcf57e5e8196ddb52", "filename": "gcc/Makefile.in", "status": "modified", "additions": 70, "deletions": 19, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/204093e6a7667127c3c2dea64c92259c23ee3ff3/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/204093e6a7667127c3c2dea64c92259c23ee3ff3/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=204093e6a7667127c3c2dea64c92259c23ee3ff3", "patch": "@@ -2187,6 +2187,9 @@ clean: mostlyclean $(INTL_CLEAN) lang.clean\n \t  rm -rf `echo $(MULTILIB_OPTIONS) | sed -e 's/\\// /g'`; \\\n \tfi ; fi\n \t-rm -fr stage1 stage2 stage3 stage4\n+# Delete stamps of bootstrap stages\n+\t-rm -f stage_*\n+\t-rm -f clean_*\n \n # Delete all files that users would normally create\n # while building and installing GCC.\n@@ -2766,34 +2769,82 @@ diff:\n # A list of files to be destroyed during \"lean\" builds.\n VOL_FILES=`echo $(BACKEND) $(OBJS) $(C_OBJS) $(LIBCPP_OBJS) *.c *.h gen*`\n \n-bootstrap bootstrap-lean: force\n # Only build the C compiler for stage1, because that is the only one that\n # we can guarantee will build with the native compiler, and also it is the\n # only thing useful for building stage2.\n-\t$(MAKE) CC=\"$(CC)\" libdir=$(libdir) LANGUAGES=\"$(BOOT_LANGUAGES)\" LANG_LIB2FUNCS=\n+stage_a: \n+\t+$(MAKE) CC=\"$(CC)\" libdir=$(libdir) LANGUAGES=\"$(BOOT_LANGUAGES)\" LANG_LIB2FUNCS=\n+\ttouch stage_a\n+\n+stage_b:\n \t$(MAKE) stage1\n-\t-if test $@ = bootstrap-lean; then cd stage1 ; rm -f $(VOL_FILES); else true; fi\n+\ttouch stage_b\n+\n # This used to define ALLOCA as empty, but that would lead to bad results\n # for a subsequent `make install' since that would not have ALLOCA empty.\n # To prevent `make install' from compiling alloca.o and then relinking cc1\n # because alloca.o is newer, we permit these recursive makes to compile\n # alloca.o.  Then cc1 is newer, so it won't have to be relinked.\n-\t$(MAKE) CC=\"stage1/xgcc$(exeext) -Bstage1/ -B$(build_tooldir)/bin/\" CFLAGS=\"$(BOOT_CFLAGS)\" WARN_CFLAGS=\"$(WARN2_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage1/ LANGUAGES=\"$(LANGUAGES)\"\n-\t$(MAKE) stage2\n-\t-if test $@ = bootstrap-lean; then rm -rf stage1; cd stage2 ; rm -f $(VOL_FILES); else true; fi\n-\t$(MAKE) CC=\"stage2/xgcc$(exeext) -Bstage2/ -B$(build_tooldir)/bin/\" CFLAGS=\"$(BOOT_CFLAGS)\" WARN_CFLAGS=\"$(WARN2_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES=\"$(LANGUAGES)\"\n-\n-bootstrap2 bootstrap2-lean: force\n-\t$(MAKE) CC=\"stage1/xgcc$(exeext) -Bstage1/ -B$(build_tooldir)/bin/\" CFLAGS=\"$(BOOT_CFLAGS)\" WARN_CFLAGS=\"$(WARN2_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage1/ LANGUAGES=\"$(LANGUAGES)\"\n-\t$(MAKE) stage2\n-\t-if test $@ = bootstrap2-lean; then rm -rf stage1; cd stage2 ; rm -f $(VOL_FILES); else true; fi\n-\t$(MAKE) CC=\"stage2/xgcc$(exeext) -Bstage2/ -B$(build_tooldir)/bin/\" CFLAGS=\"$(BOOT_CFLAGS)\" WARN_CFLAGS=\"$(WARN2_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES=\"$(LANGUAGES)\"\n-\n-bootstrap3 bootstrap3-lean: force\n-\t$(MAKE) CC=\"stage2/xgcc$(exeext) -Bstage2/ -B$(build_tooldir)/bin/\" CFLAGS=\"$(BOOT_CFLAGS)\" WARN_CFLAGS=\"$(WARN2_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES=\"$(LANGUAGES)\"\n-\n-bootstrap4 bootstrap4-lean: force\n-\t$(MAKE) CC=\"stage3/xgcc$(exeext) -Bstage3/ -B$(build_tooldir)/bin/\" CFLAGS=\"$(WARN2_CFLAGS) $(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage3/ LANGUAGES=\"$(LANGUAGES)\"\n+stage_c:\n+\t+$(MAKE) CC=\"stage1/xgcc$(exeext) -Bstage1/ -B$(build_tooldir)/bin/\" CFLAGS=\"$(BOOT_CFLAGS)\" WARN_CFLAGS=\"$(WARN2_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage1/ LANGUAGES=\"$(LANGUAGES)\"\n+\ttouch stage_c\n+\n+stage_d:\n+\t+$(MAKE) stage2\n+\ttouch stage_d\n+ \n+stage_e:\n+\t+$(MAKE) CC=\"stage2/xgcc$(exeext) -Bstage2/ -B$(build_tooldir)/bin/\" CFLAGS=\"$(BOOT_CFLAGS)\" WARN_CFLAGS=\"$(WARN2_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES=\"$(LANGUAGES)\"\n+\ttouch stage_e\n+\n+# For bootstrap4:\n+stage_f:\n+\t+$(MAKE) CC=\"stage3/xgcc$(exeext) -B$(build_tooldir)/bin/ -Bstage3/\" CFLAGS=\"$(WARN_CFLAGS) $(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage3/ LANGUAGES=\"$(LANGUAGES)\"\n+\ttouch stage_f\n+\n+# Additional steps for *-lean targets:\n+clean_s1:\n+\t-cd stage1; rm -f $(VOL_FILES)\n+\ttouch clean_s1\n+\n+clean_s2:\n+\t-rm -rf stage1\n+\t-cd stage2; rm -f $(VOL_FILES)\n+\ttouch clean_s2\n+\n+# This next little bit is the way it is for parallel builds.  It's simply\n+# a chain of stages which DO have to be done sequentially.\n+\n+bootstrap_a:              stage_a\n+bootstrap_b:  bootstrap_a stage_b\n+bootstrap_c:  bootstrap_b stage_c\n+bootstrap_d:  bootstrap_c stage_d\n+bootstrap_e:  bootstrap_d stage_e\n+bootstrap: force bootstrap_e\n+\n+bootstrap-lean_a:                   stage_a\n+bootstrap-lean_b:  bootstrap-lean_a stage_b\n+bootstrap-lean_c:  bootstrap-lean_b clean_s1 \n+bootstrap-lean_d:  bootstrap-lean_c stage_c\n+bootstrap-lean_e:  bootstrap-lean_d stage_d\n+bootstrap-lean_f:  bootstrap-lean_e clean_s2\n+bootstrap-lean_g:  bootstrap-lean_f stage_e\n+bootstrap-lean: force bootstrap-lean_f\n+\n+bootstrap2_c:               stage_c\n+bootstrap2_d:  bootstrap2_c stage_d\n+bootstrap2_e:  bootstrap2_d stage_e\n+bootstrap2: force bootstrap2_e\n+\n+bootstrap2-lean_c:                    stage_c\n+bootstrap2-lean_d:  bootstrap2-lean_c stage_d\n+bootstrap2-lean_e:  bootstrap2-lean_d clean_s2\n+bootstrap2-lean_f:  bootstrap2-lean_e stage_e\n+bootstrap2-lean: force bootstrap2-lean_f\n+\n+bootstrap3 bootstrap3-lean: force stage_e\n+ \n+bootstrap4 bootstrap4-lean: force stage_f\n \n # Compare the object files in the current directory with those in the\n # stage2 directory."}]}