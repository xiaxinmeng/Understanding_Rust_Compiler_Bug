{"sha": "d6b75f7070984d29001bb3e5d59342b1667b064f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZiNzVmNzA3MDk4NGQyOTAwMWJiM2U1ZDU5MzQyYjE2NjdiMDY0Zg==", "commit": {"author": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-11-14T10:58:50Z"}, "committer": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-11-14T10:58:50Z"}, "message": "* g++.dg/expr/unary1.C, g++.dg/expr/unary2.C: New tests.\n\nFrom-SVN: r90616", "tree": {"sha": "198c94ff83d755aa6ec1e31a5b2af4986bbbf9b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/198c94ff83d755aa6ec1e31a5b2af4986bbbf9b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6b75f7070984d29001bb3e5d59342b1667b064f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6b75f7070984d29001bb3e5d59342b1667b064f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6b75f7070984d29001bb3e5d59342b1667b064f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6b75f7070984d29001bb3e5d59342b1667b064f/comments", "author": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e34b09225a117d9ca0b9b21b716dc84a9eb6ac06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e34b09225a117d9ca0b9b21b716dc84a9eb6ac06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e34b09225a117d9ca0b9b21b716dc84a9eb6ac06"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "875f084d846dc8157050301241001d831eb95458", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b75f7070984d29001bb3e5d59342b1667b064f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b75f7070984d29001bb3e5d59342b1667b064f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d6b75f7070984d29001bb3e5d59342b1667b064f", "patch": "@@ -1,3 +1,7 @@\n+2004-11-14  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+\n+\t* g++.dg/expr/unary1.C, g++.dg/expr/unary2.C: New tests.\n+\n 2004-11-14  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/17344"}, {"sha": "4ea230f018fadcf129bd606874b825b20ba9ed43", "filename": "gcc/testsuite/g++.dg/expr/unary1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b75f7070984d29001bb3e5d59342b1667b064f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Funary1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b75f7070984d29001bb3e5d59342b1667b064f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Funary1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Funary1.C?ref=d6b75f7070984d29001bb3e5d59342b1667b064f", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile }\n+// Unary plus (but not unary minus) can be applied to pointer types\n+\n+void *p;\n+\n+void f(void)\n+{\n+  -p;        // { dg-error \"wrong type argument\" }\n+  +p;\n+}\n+\n+template <int>\n+void g(void)\n+{\n+  -p;        // { dg-error \"wrong type argument\" }\n+  +p;\n+}"}, {"sha": "9d6acc844883f6a8dfe43c16bdc16198a56c655d", "filename": "gcc/testsuite/g++.dg/expr/unary2.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b75f7070984d29001bb3e5d59342b1667b064f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Funary2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b75f7070984d29001bb3e5d59342b1667b064f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Funary2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Funary2.C?ref=d6b75f7070984d29001bb3e5d59342b1667b064f", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do compile }\n+// Unary plus/minus are not lvalues.\n+\n+// In templates we require an instantiation to emit the diagnostic. This\n+//  is wrong and it is PR 18474.\n+\n+int n;\n+\n+void f(void)\n+{\n+  -n = 0;        // { dg-error \"non-lvalue\" }\n+  +n = 0;        // { dg-error \"non-lvalue\" }\n+}\n+\n+template <int>\n+void g(void)\n+{\n+  -n = 0;        // { dg-error \"non-lvalue\" \"\" { xfail *-*-* } }\n+  +n = 0;        // { dg-error \"non-lvalue\" \"\" { xfail *-*-* } }\n+}"}]}