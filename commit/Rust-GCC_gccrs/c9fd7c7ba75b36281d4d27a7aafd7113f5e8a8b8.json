{"sha": "c9fd7c7ba75b36281d4d27a7aafd7113f5e8a8b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzlmZDdjN2JhNzViMzYyODFkNGQyN2E3YWFmZDcxMTNmNWU4YThiOA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2012-02-28T20:25:48Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2012-02-28T20:25:48Z"}, "message": "re PR libstdc++/52191 (abi_check should flag additions to released versions)\n\n2012-02-21  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/52191\n\t* testsuite/util/testsuite_abi.cc (compare_symbols): Check new\n\tsymbols added into the latest version. Mark tls entities as\n\tundesignated.\n\nFrom-SVN: r184639", "tree": {"sha": "6bc10429d7e7fb42dadffe9e0479e8f47e4e6364", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bc10429d7e7fb42dadffe9e0479e8f47e4e6364"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9fd7c7ba75b36281d4d27a7aafd7113f5e8a8b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9fd7c7ba75b36281d4d27a7aafd7113f5e8a8b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9fd7c7ba75b36281d4d27a7aafd7113f5e8a8b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9fd7c7ba75b36281d4d27a7aafd7113f5e8a8b8/comments", "author": null, "committer": null, "parents": [{"sha": "19c0d7df9931c87307ca1eaae37b266e249b39d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19c0d7df9931c87307ca1eaae37b266e249b39d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19c0d7df9931c87307ca1eaae37b266e249b39d7"}], "stats": {"total": 120, "additions": 87, "deletions": 33}, "files": [{"sha": "9ada80639ea2942ceba95dafccb11f7e481096ba", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9fd7c7ba75b36281d4d27a7aafd7113f5e8a8b8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9fd7c7ba75b36281d4d27a7aafd7113f5e8a8b8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c9fd7c7ba75b36281d4d27a7aafd7113f5e8a8b8", "patch": "@@ -1,3 +1,10 @@\n+2012-02-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/52191\n+\t* testsuite/util/testsuite_abi.cc (compare_symbols): Check new\n+\tsymbols added into the latest version. Mark tls entities as\n+\tundesignated.\n+\n 2012-02-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/52414\n@@ -37,7 +44,8 @@\n 2012-02-25  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR testsuite/52201\n-\t* testsuite/29_atomics/atomic/operators/pointer_partial_void.cc: Require\tatomic builtins.\n+\t* testsuite/29_atomics/atomic/operators/pointer_partial_void.cc:\n+\tRequire\tatomic builtins.\n \t* testsuite/29_atomics/atomic/operators/51811.cc: Likewise.\n \n 2012-02-23  Jason Merrill  <jason@redhat.com>\n@@ -88,7 +96,7 @@\n \t* testsuite/26_numerics/random/\n \tgeometric_distribution/requirements/typedefs.cc: Ditto.\n \n-2012-02-17  Benjamin Kosnik  <bkoz@redhat.com>\n+2012-02-21  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/50349\n \t* config/abi/pre/gnu.ver: Only one local."}, {"sha": "a0294c694cd824db7295cc9d4f9d3aba12abba1d", "filename": "libstdc++-v3/testsuite/util/testsuite_abi.cc", "status": "modified", "additions": 77, "deletions": 31, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9fd7c7ba75b36281d4d27a7aafd7113f5e8a8b8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9fd7c7ba75b36281d4d27a7aafd7113f5e8a8b8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc?ref=c9fd7c7ba75b36281d4d27a7aafd7113f5e8a8b8", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+// Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012\n // Free Software Foundation, Inc.\n \n // This library is free software; you can redistribute it and/or\n@@ -30,7 +30,7 @@\n \n using namespace std;\n \n-void \n+void\n symbol::init(string& data)\n {\n   const char delim = ':';\n@@ -119,9 +119,9 @@ symbol::print() const\n     }\n   cout << \"version status: \" << vers << endl;\n \n-  if (version_name.size() \n+  if (version_name.size()\n       && (version_status == compatible || version_status == incompatible))\n-    cout << version_name << endl;  \n+    cout << version_name << endl;\n \n   string type_string;\n   switch (type)\n@@ -142,7 +142,7 @@ symbol::print() const\n       type_string = \"<default>\";\n     }\n   cout << \"type: \" << type_string << endl;\n-  \n+\n   if (type == object || type == tls)\n     cout << \"type size: \" << size << endl;\n \n@@ -181,7 +181,7 @@ check_version(symbol& test, bool added)\n       known_versions.push_back(\"GLIBCXX_3.4.1\");\n       known_versions.push_back(\"GLIBCXX_3.4.2\");\n       known_versions.push_back(\"GLIBCXX_3.4.3\");\n-      known_versions.push_back(\"GLIBCXX_3.4.4\"); \n+      known_versions.push_back(\"GLIBCXX_3.4.4\");\n       known_versions.push_back(\"GLIBCXX_3.4.5\");\n       known_versions.push_back(\"GLIBCXX_3.4.6\");\n       known_versions.push_back(\"GLIBCXX_3.4.7\");\n@@ -203,10 +203,10 @@ check_version(symbol& test, bool added)\n       known_versions.push_back(\"CXXABI_1.3.2\");\n       known_versions.push_back(\"CXXABI_1.3.3\");\n       known_versions.push_back(\"CXXABI_1.3.4\");\n-      known_versions.push_back(\"CXXABI_TM_1\");\n       known_versions.push_back(\"CXXABI_1.3.5\");\n       known_versions.push_back(\"CXXABI_1.3.6\");\n       known_versions.push_back(\"CXXABI_LDBL_1.3\");\n+      known_versions.push_back(\"CXXABI_TM_1\");\n     }\n   compat_list::iterator begin = known_versions.begin();\n   compat_list::iterator end = known_versions.end();\n@@ -220,13 +220,12 @@ check_version(symbol& test, bool added)\n \ttest.version_status = symbol::compatible;\n       else\n \ttest.version_status = symbol::incompatible;\n-      \n-      // Check that added symbols aren't added in the base versions.\n-      if (added\n-\t  && (test.version_name == known_versions[0]\n-\t      || test.version_name == \"CXXABI_1.3\"\n-\t      || test.version_name == \"GLIBCXX_LDBL_3.4\"\n-\t      || test.version_name == \"CXXABI_LDBL_1.3\"))\n+\n+      // Check that added symbols are added in the latest pre-release version.\n+      bool latestp = (test.version_name == \"GLIBCXX_3.4.17\"\n+\t\t     || test.version_name == \"CXXABI_1.3.6\"\n+\t\t     || test.version_name == \"CXXABI_TM_1\");\n+      if (added && !latestp)\n \ttest.version_status = symbol::incompatible;\n \n       // Check that long double compatibility symbols demangled as\n@@ -241,8 +240,8 @@ check_version(symbol& test, bool added)\n       // Check for weak label.\n       if (it1 == end && it2 == end)\n \ttest.version_status = symbol::incompatible;\n-      \n-      // Check that \n+\n+      // Check that\n       // GLIBCXX_3.4\n       // GLIBCXX_3.4.5\n       // version as compatible\n@@ -263,7 +262,7 @@ check_version(symbol& test, bool added)\n   return test.version_status == symbol::compatible;\n }\n \n-bool \n+bool\n check_compatible(symbol& lhs, symbol& rhs, bool verbose)\n {\n   bool ret = true;\n@@ -276,7 +275,7 @@ check_compatible(symbol& lhs, symbol& rhs, bool verbose)\n       if (verbose)\n \tcout << tab << \"incompatible types\" << endl;\n     }\n-  \n+\n   if (lhs.name != rhs.name)\n     {\n       ret = false;\n@@ -295,7 +294,7 @@ check_compatible(symbol& lhs, symbol& rhs, bool verbose)\n \t}\n     }\n \n-  if (lhs.version_name != rhs.version_name \n+  if (lhs.version_name != rhs.version_name\n       && !check_version(lhs) && !check_version(rhs))\n     {\n       ret = false;\n@@ -334,7 +333,7 @@ get_symbol(const string& name, const symbols& s)\n     }\n }\n \n-void \n+void\n examine_symbol(const char* name, const char* file)\n {\n   try\n@@ -348,7 +347,7 @@ examine_symbol(const char* name, const char* file)\n }\n \n int\n-compare_symbols(const char* baseline_file, const char* test_file, \n+compare_symbols(const char* baseline_file, const char* test_file,\n \t\tbool verbose)\n {\n   // Input both lists of symbols into container.\n@@ -377,7 +376,7 @@ compare_symbols(const char* baseline_file, const char* test_file,\n   // duplicates.\n   //\n   // The names added to missing_names are baseline names not found in\n-  // test names \n+  // test names\n   // -> symbols that have been deleted.\n   //\n   // The names added to added_names are test names not in\n@@ -416,6 +415,9 @@ compare_symbols(const char* baseline_file, const char* test_file,\n   typedef pair<symbol, symbol> symbol_pair;\n   vector<symbol_pair> incompatible;\n \n+  // Fill out list of undesignated symbols.\n+  vector<symbol> undesignated;\n+\n   // Check missing names for compatibility.\n   for (size_t j = 0; j < missing_names.size(); ++j)\n     {\n@@ -440,11 +442,41 @@ compare_symbols(const char* baseline_file, const char* test_file,\n   for (size_t l = 0; l < added_size; ++l)\n     {\n       symbol& stest = test[added_names[l]];\n-      stest.status = symbol::added;\n-      if (!check_version(stest, true))\n-\tincompatible.push_back(symbol_pair(stest, stest));\n+\n+      // Mark TLS as undesignated, remove from added.\n+      if (stest.type == symbol::tls)\n+\t{\n+\t  stest.status = symbol::undesignated;\n+\t  if (!check_version(stest, false))\n+\t    incompatible.push_back(symbol_pair(stest, stest));\n+\t  else\n+\t    undesignated.push_back(stest);\n+\t}\n+      else\n+\t{\n+\t  stest.status = symbol::added;\n+\t  if (!check_version(stest, true))\n+\t    incompatible.push_back(symbol_pair(stest, stest));\n+\t}\n     }\n \n+  // Normalize added names and undesignated names.\n+  const size_t undesignated_size = undesignated.size();\n+  for (size_t l = 0; l < undesignated_size; ++l)\n+    {\n+      symbol& sundes = undesignated[l];\n+      symbol_names::iterator end = added_names.end();\n+      symbol_names::iterator it = find(added_names.begin(), end, sundes.name);\n+       if (it != end)\n+\t{\n+\t  // Found.\n+\t  added_names.erase(it);\n+\t}\n+       else\n+\t __throw_runtime_error(sundes.name.c_str());\n+    }\n+\n+\n   // Report results.\n   if (verbose && added_names.size())\n     {\n@@ -455,7 +487,7 @@ compare_symbols(const char* baseline_file, const char* test_file,\n \t  test[added_names[j]].print();\n \t}\n     }\n-  \n+\n   if (verbose && missing_names.size())\n     {\n       cout << endl << missing_names.size() << \" missing symbols \" << endl;\n@@ -465,7 +497,21 @@ compare_symbols(const char* baseline_file, const char* test_file,\n \t  baseline[missing_names[j]].print();\n \t}\n     }\n-  \n+\n+  if (verbose && undesignated.size())\n+    {\n+      cout << endl << undesignated.size() << \" undesignated symbols \" << endl;\n+      for (size_t j = 0; j < undesignated.size() ; ++j)\n+\t{\n+\t  // First, print index.\n+\t  cout << j << endl;\n+\n+\t  // Second, report name.\n+\t  symbol& s = undesignated[j];\n+\t  s.print();\n+\t}\n+    }\n+\n   if (verbose && incompatible.size())\n     {\n       cout << endl << incompatible.size() << \" incompatible symbols \" << endl;\n@@ -478,16 +524,17 @@ compare_symbols(const char* baseline_file, const char* test_file,\n \t  symbol& sbase = incompatible[j].first;\n \t  symbol& stest = incompatible[j].second;\n \t  stest.print();\n-\t  \n-\t  // Second, report reason or reasons incompatible.\n+\n+\t  // Third, report reason or reasons incompatible.\n \t  check_compatible(sbase, stest, true);\n \t}\n     }\n-  \n+\n   cout << \"\\n\\t\\t=== libstdc++-v3 check-abi Summary ===\" << endl;\n   cout << endl;\n   cout << \"# of added symbols:\\t\\t \" << added_names.size() << endl;\n   cout << \"# of missing symbols:\\t\\t \" << missing_names.size() << endl;\n+  cout << \"# of undesignated symbols:\\t \" << undesignated.size() << endl;\n   cout << \"# of incompatible symbols:\\t \" << incompatible.size() << endl;\n   cout << endl;\n   cout << \"using: \" << baseline_file << endl;\n@@ -563,4 +610,3 @@ demangle(const std::string& mangled)\n     }\n   return name;\n }\n-"}]}