{"sha": "6555b6bdeafde8eaade2267e31a89f17fb846a53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU1NWI2YmRlYWZkZThlYWFkZTIyNjdlMzFhODlmMTdmYjg0NmE1Mw==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2005-02-01T14:07:02Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2005-02-01T14:07:02Z"}, "message": "re PR target/16201 (Assembler messages:Error: bad immediate value for offset (4116))\n\nPR target/16201\n* arm.c (arm_eliminable_register): New function.\n(adjacent_mem_locations): Don't allow eliminable registers.  Use\nHOST_WIDE_INT for address offsets.\n* arm-protos.h (arm_eliminable_register): Add prototype.\n\nFrom-SVN: r94540", "tree": {"sha": "b002db16121df7244942e9e496db7e59f414ecdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b002db16121df7244942e9e496db7e59f414ecdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6555b6bdeafde8eaade2267e31a89f17fb846a53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6555b6bdeafde8eaade2267e31a89f17fb846a53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6555b6bdeafde8eaade2267e31a89f17fb846a53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6555b6bdeafde8eaade2267e31a89f17fb846a53/comments", "author": null, "committer": null, "parents": [{"sha": "4d73fac958abe4d2728b952a076361bc2b469f9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d73fac958abe4d2728b952a076361bc2b469f9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d73fac958abe4d2728b952a076361bc2b469f9b"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "88add3a577620564c95a627b358c9e91b2b63532", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6555b6bdeafde8eaade2267e31a89f17fb846a53/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6555b6bdeafde8eaade2267e31a89f17fb846a53/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6555b6bdeafde8eaade2267e31a89f17fb846a53", "patch": "@@ -1,3 +1,11 @@\n+2005-02-01  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/16201\n+\t* arm.c (arm_eliminable_register): New function.\n+\t(adjacent_mem_locations): Don't allow eliminable registers.  Use\n+\tHOST_WIDE_INT for address offsets.\n+\t* arm-protos.h (arm_eliminable_register): Add prototype.\n+\n 2005-02-01  Steven Bosscher  <stevenb@suse.de>\n \n \tPR optimization/15242"}, {"sha": "5c040bda1ce555928dc26548e5ab3d889602f745", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6555b6bdeafde8eaade2267e31a89f17fb846a53/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6555b6bdeafde8eaade2267e31a89f17fb846a53/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=6555b6bdeafde8eaade2267e31a89f17fb846a53", "patch": "@@ -115,6 +115,7 @@ extern int    arm_emit_vector_const (FILE *, rtx);\n extern const char * arm_output_load_gr (rtx *);\n extern const char *vfp_output_fstmx (rtx *);\n extern void arm_set_return_address (rtx, rtx);\n+extern int arm_eliminable_register (rtx);\n \n #if defined TREE_CODE\n extern rtx arm_function_arg (CUMULATIVE_ARGS *, enum machine_mode, tree, int);"}, {"sha": "95fe7fe48f1d6a2c5e2fb708c84f962c29ec03b7", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6555b6bdeafde8eaade2267e31a89f17fb846a53/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6555b6bdeafde8eaade2267e31a89f17fb846a53/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=6555b6bdeafde8eaade2267e31a89f17fb846a53", "patch": "@@ -4815,6 +4815,15 @@ arm_coproc_mem_operand (rtx op, bool wb)\n   return FALSE;\n }\n \n+/* Return true if X is a register that will be eliminated later on.  */\n+int\n+arm_eliminable_register (rtx x)\n+{\n+  return REG_P (x) && (REGNO (x) == FRAME_POINTER_REGNUM\n+\t\t       || REGNO (x) == ARG_POINTER_REGNUM\n+\t\t       || (REGNO (x) >= FIRST_VIRTUAL_REGISTER\n+\t\t\t   && REGNO (x) <= LAST_VIRTUAL_REGISTER));\n+}\n \n /* Return GENERAL_REGS if a scratch register required to reload x to/from\n    VFP registers.  Otherwise return NO_REGS.  */\n@@ -5086,33 +5095,42 @@ adjacent_mem_locations (rtx a, rtx b)\n \t  || (GET_CODE (XEXP (b, 0)) == PLUS\n \t      && GET_CODE (XEXP (XEXP (b, 0), 1)) == CONST_INT)))\n     {\n-      int val0 = 0, val1 = 0;\n-      int reg0, reg1;\n+      HOST_WIDE_INT val0 = 0, val1 = 0;\n+      rtx reg0, reg1;\n+      int val_diff;\n \n       if (GET_CODE (XEXP (a, 0)) == PLUS)\n         {\n-\t  reg0 = REGNO  (XEXP (XEXP (a, 0), 0));\n+\t  reg0 = XEXP (XEXP (a, 0), 0);\n \t  val0 = INTVAL (XEXP (XEXP (a, 0), 1));\n         }\n       else\n-\treg0 = REGNO (XEXP (a, 0));\n+\treg0 = XEXP (a, 0);\n \n       if (GET_CODE (XEXP (b, 0)) == PLUS)\n         {\n-\t  reg1 = REGNO  (XEXP (XEXP (b, 0), 0));\n+\t  reg1 = XEXP (XEXP (b, 0), 0);\n \t  val1 = INTVAL (XEXP (XEXP (b, 0), 1));\n         }\n       else\n-\treg1 = REGNO (XEXP (b, 0));\n+\treg1 = XEXP (b, 0);\n \n       /* Don't accept any offset that will require multiple\n \t instructions to handle, since this would cause the\n \t arith_adjacentmem pattern to output an overlong sequence.  */\n       if (!const_ok_for_op (PLUS, val0) || !const_ok_for_op (PLUS, val1))\n \treturn 0;\n \n-      return (reg0 == reg1) && ((val1 - val0) == 4 || (val0 - val1) == 4);\n+      /* Don't allow an eliminable register: register elimination can make\n+\t the offset too large.  */\n+      if (arm_eliminable_register (reg0))\n+\treturn 0;\n+\n+      val_diff = val1 - val0;\n+      return ((REGNO (reg0) == REGNO (reg1))\n+\t      && (val_diff == 4 || val_diff == -4));\n     }\n+\n   return 0;\n }\n "}]}