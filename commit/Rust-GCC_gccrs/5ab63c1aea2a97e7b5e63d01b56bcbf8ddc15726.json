{"sha": "5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFiNjNjMWFlYTJhOTdlN2I1ZTYzZDAxYjU2YmNiZjhkZGMxNTcyNg==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2000-08-03T12:09:41Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2000-08-03T12:09:41Z"}, "message": "Makefile.am: Add new AWT stubs.\n\n\t* Makefile.am: Add new AWT stubs.\n\t* java/awt/Canvas.java: New placeholder class.\n\t* java/awt/Checkbox.java: Ditto.\n\t* java/awt/CheckboxMenuItem.java: Ditto.\n\t* java/awt/Choice.java: Ditto.\n\t* java/awt/Dialog.java: Ditto.\n\t* java/awt/FileDialog.java: Ditto.\n\t* java/awt/List.java: Ditto.\n\t* java/awt/ScrollPane.java: Ditto.\n\t* java/awt/TextField.java: Ditto.\n\t* java/awt/datatransfer/Clipboard.java: Ditto.\n\t* java/awt/Component.java (treeLock): Now a static String. Add\n\tcomment.\n\t* java/awt/MenuItem.java (MenuItem): Add default constructor.\n\t* java/awt/Toolkit.java: Added all methods from J2SE 1.3 API docs.\n\tSome commented out. Partially implemented.\n\t* java/awt/natToolkit.cc: Removed file.\n\nFrom-SVN: r35450", "tree": {"sha": "a2ed64eb30656bff46228be2b0b15a84906f930e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2ed64eb30656bff46228be2b0b15a84906f930e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726/comments", "author": null, "committer": null, "parents": [{"sha": "eae511892507a2bd8e23240d99990c7d8a85dc7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eae511892507a2bd8e23240d99990c7d8a85dc7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eae511892507a2bd8e23240d99990c7d8a85dc7a"}], "stats": {"total": 445, "additions": 404, "deletions": 41}, "files": [{"sha": "f6480e6972e6005fa59245c17578c0ce3b73ad07", "filename": "libjava/java/awt/Canvas.java", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726/libjava%2Fjava%2Fawt%2FCanvas.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726/libjava%2Fjava%2Fawt%2FCanvas.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FCanvas.java?ref=5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726", "patch": "@@ -0,0 +1,15 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt;\n+\n+/* A very incomplete placeholder. */\n+\n+public class Canvas extends Component\n+{\n+}"}, {"sha": "ec1f20d5b3a5e8327b2aaa4e94b1377b8d3f321e", "filename": "libjava/java/awt/Checkbox.java", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726/libjava%2Fjava%2Fawt%2FCheckbox.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726/libjava%2Fjava%2Fawt%2FCheckbox.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FCheckbox.java?ref=5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726", "patch": "@@ -0,0 +1,15 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt;\n+\n+/* A very incomplete placeholder. */\n+\n+public class Checkbox extends Component\n+{\n+}"}, {"sha": "a98c94a7ba561352ed6c0b5e6452f2622860c09a", "filename": "libjava/java/awt/CheckboxMenuItem.java", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726/libjava%2Fjava%2Fawt%2FCheckboxMenuItem.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726/libjava%2Fjava%2Fawt%2FCheckboxMenuItem.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FCheckboxMenuItem.java?ref=5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726", "patch": "@@ -0,0 +1,15 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt;\n+\n+/* A very incomplete placeholder. */\n+\n+public class CheckboxMenuItem extends MenuItem\n+{\n+}"}, {"sha": "cc1ddc0a57fa9f304e7a6bc930bff03cc5ba7ba2", "filename": "libjava/java/awt/Choice.java", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726/libjava%2Fjava%2Fawt%2FChoice.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726/libjava%2Fjava%2Fawt%2FChoice.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FChoice.java?ref=5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726", "patch": "@@ -0,0 +1,15 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt;\n+\n+/* A very incomplete placeholder. */\n+\n+public class Choice extends Component\n+{\n+}"}, {"sha": "5c61b913449df3cc7b739ff511c2978c294e565d", "filename": "libjava/java/awt/Component.java", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726/libjava%2Fjava%2Fawt%2FComponent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726/libjava%2Fjava%2Fawt%2FComponent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FComponent.java?ref=5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726", "patch": "@@ -38,6 +38,12 @@ public abstract class Component implements ImageObserver, MenuContainer,\n \t\t\t    RIGHT_ALIGNMENT  = 1.0f,\n \t\t\t    TOP_ALIGNMENT    = 0.0f;\n \n+    /* Make the treelock a String so that it can easily be identified\n+       in debug dumps. We clone the String in order to avoid a conflict in \n+       the unlikely event that some other package uses exactly the same string\n+       as a lock object. */\n+    static Object treeLock = new String(\"AWT_TREE_LOCK\");\n+\n   /* Serialized fields from the serialization spec. */\n   // FIXME: Default values?\n   int x;\n@@ -71,8 +77,6 @@ public abstract class Component implements ImageObserver, MenuContainer,\n   transient Container parent;\n   transient java.awt.peer.ComponentPeer peer;\n \n-  transient Object treeLock;\n-\n   transient ComponentListener componentListener;\n   transient FocusListener focusListener;\n   transient KeyListener keyListener;"}, {"sha": "fcd8d6311689be55ba1f26e0a94dcd6705c3cfd2", "filename": "libjava/java/awt/Dialog.java", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726/libjava%2Fjava%2Fawt%2FDialog.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726/libjava%2Fjava%2Fawt%2FDialog.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FDialog.java?ref=5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726", "patch": "@@ -0,0 +1,20 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt;\n+\n+/* A very incomplete placeholder. */\n+\n+public class Dialog extends Window\n+{\n+  public Dialog (Frame owner)\n+  {\n+    super(owner);\n+    // FIXME\n+  }\n+}"}, {"sha": "cdcf442dfd34ffe1d963424a99ed001089757bfd", "filename": "libjava/java/awt/FileDialog.java", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726/libjava%2Fjava%2Fawt%2FFileDialog.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726/libjava%2Fjava%2Fawt%2FFileDialog.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FFileDialog.java?ref=5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726", "patch": "@@ -0,0 +1,20 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt;\n+\n+/* A very incomplete placeholder. */\n+\n+public class FileDialog extends Dialog\n+{\n+  public FileDialog (Frame owner)\n+  {\n+    super(owner);\n+    // FIXME\n+  }\n+}"}, {"sha": "ddc577679787b5a620bf116924dd3cd0a2dc1757", "filename": "libjava/java/awt/List.java", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726/libjava%2Fjava%2Fawt%2FList.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726/libjava%2Fjava%2Fawt%2FList.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FList.java?ref=5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726", "patch": "@@ -0,0 +1,15 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt;\n+\n+/* A very incomplete placeholder. */\n+\n+public class List extends Component\n+{\n+}"}, {"sha": "6e79ca0fc858f6b5f69dae6a722a322a027e6654", "filename": "libjava/java/awt/MenuItem.java", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726/libjava%2Fjava%2Fawt%2FMenuItem.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726/libjava%2Fjava%2Fawt%2FMenuItem.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FMenuItem.java?ref=5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726", "patch": "@@ -24,6 +24,11 @@ public class MenuItem extends MenuComponent\n \n   transient ActionListener actionListener;\n \n+  public MenuItem ()\n+  {\n+    this.label = \"\";\n+  }\n+\n   public MenuItem (String label)\n   {\n     this.label = label;"}, {"sha": "2c3454c0bf04b8e7fa89aef28f7de5c24d6fd21c", "filename": "libjava/java/awt/ScrollPane.java", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726/libjava%2Fjava%2Fawt%2FScrollPane.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726/libjava%2Fjava%2Fawt%2FScrollPane.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FScrollPane.java?ref=5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726", "patch": "@@ -0,0 +1,15 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt;\n+\n+/* A very incomplete placeholder. */\n+\n+public class ScrollPane extends Container\n+{\n+}"}, {"sha": "e8059d4e6794f7c84efa05b8993ecd3f674f296a", "filename": "libjava/java/awt/TextField.java", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726/libjava%2Fjava%2Fawt%2FTextField.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726/libjava%2Fjava%2Fawt%2FTextField.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FTextField.java?ref=5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726", "patch": "@@ -0,0 +1,16 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt;\n+import java.awt.event.*;\n+\n+/* A very incomplete placeholder. */\n+\n+public class TextField extends TextComponent\n+{\n+}"}, {"sha": "b1cb286d678148b700f143ec41e673faefa49d7f", "filename": "libjava/java/awt/Toolkit.java", "status": "modified", "additions": 232, "deletions": 12, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726/libjava%2Fjava%2Fawt%2FToolkit.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726/libjava%2Fjava%2Fawt%2FToolkit.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FToolkit.java?ref=5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726", "patch": "@@ -8,37 +8,257 @@\n \n package java.awt;\n import java.awt.peer.*;\n+import java.awt.event.*;\n import java.net.URL;\n+import java.beans.*;\n+import java.awt.image.*;\n+import java.awt.datatransfer.Clipboard;\n+import java.util.Hashtable;\n \n /* A very incomplete placeholder. */\n \n public abstract class Toolkit\n {\n   static Toolkit defaultToolkit;\n   static EventQueue systemEventQueue = new EventQueue();\n+  PropertyChangeSupport pcsupport = new PropertyChangeSupport(this);\n+  Hashtable desktopProperties = new Hashtable();\n \n-  public static synchronized Toolkit getDefaultToolkit()\n+  public static Toolkit getDefaultToolkit()\n   {\n-    if (defaultToolkit == null)\n-      init();\n+    if (defaultToolkit != null)\n+      return defaultToolkit;\n+      \n+    Class toolkit_class;\n+    String tk_class_name = System.getProperty(\"awt.toolkit\");\n+    if (tk_class_name == null)\n+      tk_class_name = \"gnu.awt.peer.gtk.GTKToolkit\";\n+\n+    try\n+    {\n+      toolkit_class = Class.forName(tk_class_name);\n+      defaultToolkit = (Toolkit) toolkit_class.newInstance();\n+    }\n+    catch (Exception x)\n+    {\n+      throw new AWTError(\"Toolkit class \" + tk_class_name + \n+        \t\t \" could not be initialized:\\n  \" + x);\n+    }\n+\n     return defaultToolkit;\n   }\n \n+  protected abstract ButtonPeer createButton(Button target);\n+  protected abstract TextFieldPeer createTextField(TextField target);\n+  protected abstract LabelPeer createLabel(Label target);\n+  protected abstract ListPeer createList(List target);\n+  protected abstract CheckboxPeer createCheckbox(Checkbox target);\n+  protected abstract ScrollbarPeer createScrollbar(Scrollbar target);\n+  protected abstract ScrollPanePeer createScrollPane(ScrollPane target);\n+  protected abstract TextAreaPeer createTextArea(TextArea target);\n+  protected abstract ChoicePeer createChoice(Choice target);\n   protected abstract FramePeer createFrame(Frame target);\n+  protected abstract CanvasPeer createCanvas(Canvas target);\n+  protected abstract PanelPeer createPanel(Panel target);\n+  protected abstract WindowPeer createWindow(Window target);\n+  protected abstract DialogPeer createDialog(Dialog target);\n+  protected abstract MenuBarPeer createMenuBar(MenuBar target);\n+  protected abstract MenuPeer createMenu(Menu target);\n+  protected abstract PopupMenuPeer createPopupMenu(PopupMenu target);\n+  protected abstract MenuItemPeer createMenuItem(MenuItem target);\n+  protected abstract FileDialogPeer createFileDialog(FileDialog target);\n+  protected abstract CheckboxMenuItemPeer \n+    createCheckboxMenuItem(CheckboxMenuItem target);\n+\n+  protected LightweightPeer createComponent(Component target)\n+  {\n+    // FIXME\n+    return null;\n+  }\n+  \n+  /* @deprecated Use GraphicsEnvironment.getAllFonts() */\n+  protected abstract java.awt.peer.FontPeer getFontPeer(String name, int style);\n+  \n+  /*\n+  public abstract DragSourceContextPeer \n+    createDragSourceContextPeer(DragGestureEvent dge)\n+    throws InvalidDnDOperationException;\n+  */\n+  \n+  protected void loadSystemColors(int[] systemColors)\n+  {\n+    // FIXME\n+  }\n+\n+  public abstract Dimension getScreenSize();\n+  public abstract int getScreenResolution();\n+  public abstract ColorModel getColorModel();\n+  /* @deprecated Use GraphicsEnvironment.getAvailableFontFamilyNames() */\n+  public abstract String[] getFontList();\n+  public abstract FontMetrics getFontMetrics(Font font);\n+  public abstract void sync();\n+  public abstract Image getImage(String filename);\n   public abstract Image getImage(URL url);\n+  public abstract Image createImage(String filename);\n+  public abstract Image createImage(URL url);\n+  public abstract boolean prepareImage(Image image, int width, int height,\n+                                       ImageObserver observer);\n+  public abstract int checkImage(Image image, int width, int height,\n+                        \t ImageObserver observer);\n+  public abstract Image createImage(ImageProducer producer);\n+\n+  public Image createImage(byte[] imagedata)\n+  {\n+    return createImage (imagedata, 0, imagedata.length);\n+  }\n+  \n+  public abstract Image createImage(byte[] imagedata, int imageoffset,\n+                                    int imagelength);\n+  /*\n+  public abstract PrintJob getPrintJob(Frame frame, String jobtitle,\n+                                       Properties props);\n+  public PrintJob getPrintJob(Frame frame, String jobtitle,\n+                              JobAttributes jobAttributes,\n+\t\t\t      PageAttributes pageAttributes)\n+  {\n+    \n+  }\n+  */\n+  \n+  public abstract void beep();\n+  public abstract Clipboard getSystemClipboard();\n+\n+  public int getMenuShortcutKeyMask()\n+  {\n+    return InputEvent.CTRL_MASK;\n+  }\n+\n+  public boolean getLockingKeyState(int keyCode)\n+  {\n+    if (keyCode != KeyEvent.VK_CAPS_LOCK\n+\t&& keyCode != KeyEvent.VK_NUM_LOCK\n+\t&& keyCode != KeyEvent.VK_SCROLL_LOCK)\n+      throw new IllegalArgumentException();\n \n-  protected abstract ButtonPeer createButton (Button target);\n-  protected abstract ContainerPeer createContainer (Container target);\n-  protected abstract LabelPeer createLabel (Label target);\n-  protected abstract ScrollbarPeer createScrollbar (Scrollbar target);\n-  protected abstract WindowPeer createWindow (Window target);\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  public void setLockingKeyState(int keyCode, boolean on)\n+  {\n+    if (keyCode != KeyEvent.VK_CAPS_LOCK\n+\t&& keyCode != KeyEvent.VK_NUM_LOCK\n+\t&& keyCode != KeyEvent.VK_SCROLL_LOCK)\n+      throw new IllegalArgumentException();\n+\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  protected static Container getNativeContainer(Component c)\n+  {\n+    while (c != null) \n+    {\n+      if (!c.isLightweight ())\n+\treturn (Container) c;\n+\n+      c = c.getParent();\n+    }\n+    return null;\n+  }\n+\n+  public Cursor createCustomCursor(Image cursor, Point hotSpot, String name)\n+    throws IndexOutOfBoundsException\n+  {\n+    // Presumably the only reason this isn't abstract is for backwards\n+    // compatibility? FIXME?\n+    return null;\n+  }\n+\n+  public Dimension getBestCursorSize(int preferredWidth, int preferredHeight)\n+  {\n+    return new Dimension (0,0);\n+  }\n+\n+  public int getMaximumCursorColors()\n+  {\n+    return 0;\n+  }\n+\n+  public static String getProperty(String key, String defaultValue)\n+  {\n+    // FIXME\n+    return defaultValue;\n+  }\n \n   public final EventQueue getSystemEventQueue()\n   {\n-    return systemEventQueue;\n+      return systemEventQueue;\n+  }\n+\n+  protected abstract EventQueue getSystemEventQueueImpl();\n+\n+  /*\n+  public DragGestureRecognizer \n+    createDragGestureRecognizer(Class abstractRecognizerClass, DragSource ds,\n+                        \tComponent c, int srcActions,\n+\t\t\t\tDragGestureListener dgl)\n+  {\n+    // err... FIXME\n+    return null;\n   }\n+  */\n \n-  private static void init() { }\n-  // private static native void init();\n-  // static { init(); }\n+  public final Object getDesktopProperty(String propertyName)\n+  {\n+    return desktopProperties.get(propertyName);\n+  }\n+\n+  protected final void setDesktopProperty(String name, Object newValue)\n+  {\n+    Object oldValue = getDesktopProperty(name);\n+    desktopProperties.put(name, newValue);\n+    pcsupport.firePropertyChange(name, oldValue, newValue);\n+  }\n+\n+  protected Object lazilyLoadDesktopProperty(String name)\n+  {\n+    // FIXME - what is this??\n+    return null;\n+  }\n+\n+  protected void initializeDesktopProperties()\n+  {\n+    // Overridden by toolkit implementation?\n+  }\n+\n+  public void addPropertyChangeListener(String name,\n+                                \tPropertyChangeListener pcl)\n+  {\n+    pcsupport.addPropertyChangeListener(name, pcl);\n+  }\n+  \n+  public void removePropertyChangeListener(String name,\n+                                           PropertyChangeListener pcl)\n+  {\n+    pcsupport.removePropertyChangeListener(name, pcl);\n+  }\n+\n+  public void addAWTEventListener(AWTEventListener listener, long eventMask)\n+  {\n+    // SecurityManager s = System.getSecurityManager();\n+    // if (s != null)\n+    //  s.checkPermission(AWTPermission(\"listenToAllAWTEvents\"));\n+\n+    // FIXME\n+  }\n+\n+  public void removeAWTEventListener(AWTEventListener listener)\n+  {\n+    // FIXME\n+  }\n+  \n+  /*\n+  public abstract Map mapInputMethodHighlight(InputMethodHighlight highlight)\n+  {\n+  }  \n+  */\n }"}, {"sha": "634a8d5a94e45b1e813e18b4dfc308585c10ca98", "filename": "libjava/java/awt/datatransfer/Clipboard.java", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726/libjava%2Fjava%2Fawt%2Fdatatransfer%2FClipboard.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726/libjava%2Fjava%2Fawt%2Fdatatransfer%2FClipboard.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdatatransfer%2FClipboard.java?ref=5ab63c1aea2a97e7b5e63d01b56bcbf8ddc15726", "patch": "@@ -0,0 +1,15 @@\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt.datatransfer;\n+\n+/* A very incomplete placeholder. */\n+\n+public class Clipboard\n+{\n+}"}, {"sha": "b2be56c9fbc55d23e148cc3dd901d478240c2118", "filename": "libjava/java/awt/natToolkit.cc", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae511892507a2bd8e23240d99990c7d8a85dc7a/libjava%2Fjava%2Fawt%2FnatToolkit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae511892507a2bd8e23240d99990c7d8a85dc7a/libjava%2Fjava%2Fawt%2FnatToolkit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FnatToolkit.cc?ref=eae511892507a2bd8e23240d99990c7d8a85dc7a", "patch": "@@ -1,27 +0,0 @@\n-/* Copyright (C) 1999  Free Software Foundation\n-\n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n-\n-#include <config.h>\n-\n-/*#define ENABLE_GTK*/\n-\n-#include <gcj/cni.h>\n-#include <java/awt/Toolkit.h>\n-#ifdef ENABLE_GTK\n-#include <java/awt/peer/GtkToolkit.h>\n-#endif\n-\n-void\n-java::awt::Toolkit::init()\n-{\n-#ifdef ENABLE_GTK\n-  defaultToolkit = new java::awt::peer::GtkToolkit();\n-#else\n-  JvFail(\"no awt (graphics) toolkit available\");\n-#endif\n-}"}]}