{"sha": "e7ca84b3a6df74c93d6542a973983b4cf436bfa6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdjYTg0YjNhNmRmNzRjOTNkNjU0MmE5NzM5ODNiNGNmNDM2YmZhNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-02-19T14:42:55Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-02-19T14:42:55Z"}, "message": "Tweak comments\n\nFrom-SVN: r39883", "tree": {"sha": "beff95d9f9bad1dc5e61e62542b57f574ff74255", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/beff95d9f9bad1dc5e61e62542b57f574ff74255"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7ca84b3a6df74c93d6542a973983b4cf436bfa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7ca84b3a6df74c93d6542a973983b4cf436bfa6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7ca84b3a6df74c93d6542a973983b4cf436bfa6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7ca84b3a6df74c93d6542a973983b4cf436bfa6/comments", "author": null, "committer": null, "parents": [{"sha": "e5c617ff163919020a7125ec43c0b59f84275486", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5c617ff163919020a7125ec43c0b59f84275486", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5c617ff163919020a7125ec43c0b59f84275486"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "67b1e85f8c4c256bf25e38d9e2668e7aaa61dce0", "filename": "gcc/sibcall.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ca84b3a6df74c93d6542a973983b4cf436bfa6/gcc%2Fsibcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ca84b3a6df74c93d6542a973983b4cf436bfa6/gcc%2Fsibcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsibcall.c?ref=e7ca84b3a6df74c93d6542a973983b4cf436bfa6", "patch": "@@ -592,8 +592,8 @@ optimize_sibling_and_tail_recursive_calls ()\n \n \t  /* See if there are any reasons we can't perform either sibling or\n \t     tail call optimizations.  We must be careful with stack slots\n-\t     which are live at potential optimization sites.  ?!? This test\n-\t     is overly conservative and will be replaced.  */\n+\t     which are live at potential optimization sites.  ?!? The first\n+\t     test is overly conservative and should be replaced.  */\n \t  if (frame_offset\n \t      /* Can't take address of local var if used by recursive call.  */\n \t      || current_function_uses_addressof"}]}