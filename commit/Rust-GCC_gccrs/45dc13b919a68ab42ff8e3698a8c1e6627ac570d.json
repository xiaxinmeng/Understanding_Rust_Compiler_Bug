{"sha": "45dc13b919a68ab42ff8e3698a8c1e6627ac570d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVkYzEzYjkxOWE2OGFiNDJmZjhlMzY5OGE4YzFlNjYyN2FjNTcwZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-12-05T16:59:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-12-05T16:59:34Z"}, "message": "re PR middle-end/37248 (regression transformation bitfield to individual bytes)\n\n\tPR middle-end/37248\n\t* fold-const.c (make_bit_field_ref): Change bitpos and bitsize\n\targuments to HOST_WIDE_INT.  If type has different signedness\n\tthan unsignedp or different precision from bitsize, create\n\tthe right type for BIT_FIELD_REF and cast to type.\n\t(fold_truthop): Change first_bit and end_bit to HOST_WIDE_INT.\n\n\tRevert:\n\t2008-03-05  Richard Guenther  <rguenther@suse.de>\n\tPR c++/35336\n\t* fold-const.c (fold_truthop): Remove code generating\n\tBIT_FIELD_REFs of structure bases.\n\t(fold_binary): Likewise.\n\t(make_bit_field_ref): Remove.\n\t(optimize_bit_field_compare): Remove.\n\t(all_ones_mask_p): Remove.\n\n\t* gcc.target/i386/pr37248-1.c: New test.\n\t* gcc.target/i386/pr37248-2.c: New test.\n\t* gcc.target/i386/pr37248-3.c: New test.\n\nFrom-SVN: r142484", "tree": {"sha": "88d3af25c17467b354c8e114094bb2128e4a15fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88d3af25c17467b354c8e114094bb2128e4a15fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45dc13b919a68ab42ff8e3698a8c1e6627ac570d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45dc13b919a68ab42ff8e3698a8c1e6627ac570d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45dc13b919a68ab42ff8e3698a8c1e6627ac570d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45dc13b919a68ab42ff8e3698a8c1e6627ac570d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2d95ef974eece42ec7423bd57760db4286e3d19c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d95ef974eece42ec7423bd57760db4286e3d19c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d95ef974eece42ec7423bd57760db4286e3d19c"}], "stats": {"total": 467, "additions": 461, "deletions": 6}, "files": [{"sha": "f41f83b6561466b4f44030915d66c630aff38e1c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45dc13b919a68ab42ff8e3698a8c1e6627ac570d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45dc13b919a68ab42ff8e3698a8c1e6627ac570d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45dc13b919a68ab42ff8e3698a8c1e6627ac570d", "patch": "@@ -1,3 +1,22 @@\n+2008-12-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/37248\n+\t* fold-const.c (make_bit_field_ref): Change bitpos and bitsize\n+\targuments to HOST_WIDE_INT.  If type has different signedness\n+\tthan unsignedp or different precision from bitsize, create\n+\tthe right type for BIT_FIELD_REF and cast to type.\n+\t(fold_truthop): Change first_bit and end_bit to HOST_WIDE_INT.\n+\n+\tRevert:\n+\t2008-03-05  Richard Guenther  <rguenther@suse.de>\n+\tPR c++/35336\n+\t* fold-const.c (fold_truthop): Remove code generating\n+\tBIT_FIELD_REFs of structure bases.\n+\t(fold_binary): Likewise.\n+\t(make_bit_field_ref): Remove.\n+\t(optimize_bit_field_compare): Remove.\n+\t(all_ones_mask_p): Remove.\n+\n 2008-12-05  Jakub Jelinek  <jakub@redhat.com>\n \n \t* tree-sra.c (sra_explode_bitfield_assignment): Always"}, {"sha": "719b7877bd65737e0f6ebf889b48cb24e2b5ec7e", "filename": "gcc/fold-const.c", "status": "modified", "additions": 368, "deletions": 6, "changes": 374, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45dc13b919a68ab42ff8e3698a8c1e6627ac570d/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45dc13b919a68ab42ff8e3698a8c1e6627ac570d/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=45dc13b919a68ab42ff8e3698a8c1e6627ac570d", "patch": "@@ -110,9 +110,12 @@ static int twoval_comparison_p (tree, tree *, tree *, int *);\n static tree eval_subst (tree, tree, tree, tree, tree);\n static tree pedantic_omit_one_operand (tree, tree, tree);\n static tree distribute_bit_expr (enum tree_code, tree, tree, tree);\n+static tree make_bit_field_ref (tree, tree, HOST_WIDE_INT, HOST_WIDE_INT, int);\n+static tree optimize_bit_field_compare (enum tree_code, tree, tree, tree);\n static tree decode_field_reference (tree, HOST_WIDE_INT *, HOST_WIDE_INT *,\n \t\t\t\t    enum machine_mode *, int *, int *,\n \t\t\t\t    tree *, tree *);\n+static int all_ones_mask_p (const_tree, int);\n static tree sign_bit_p (tree, const_tree);\n static int simple_operand_p (const_tree);\n static tree range_binop (enum tree_code, tree, tree, int, tree, int);\n@@ -3853,6 +3856,208 @@ distribute_real_division (enum tree_code code, tree type, tree arg0, tree arg1)\n   return NULL_TREE;\n }\n \f\n+/* Return a BIT_FIELD_REF of type TYPE to refer to BITSIZE bits of INNER\n+   starting at BITPOS.  The field is unsigned if UNSIGNEDP is nonzero.  */\n+\n+static tree\n+make_bit_field_ref (tree inner, tree type, HOST_WIDE_INT bitsize,\n+\t\t    HOST_WIDE_INT bitpos, int unsignedp)\n+{\n+  tree result, bftype;\n+\n+  if (bitpos == 0)\n+    {\n+      tree size = TYPE_SIZE (TREE_TYPE (inner));\n+      if ((INTEGRAL_TYPE_P (TREE_TYPE (inner))\n+\t   || POINTER_TYPE_P (TREE_TYPE (inner)))\n+\t  && host_integerp (size, 0) \n+\t  && tree_low_cst (size, 0) == bitsize)\n+\treturn fold_convert (type, inner);\n+    }\n+\n+  bftype = type;\n+  if (TYPE_PRECISION (bftype) != bitsize\n+      || TYPE_UNSIGNED (bftype) == !unsignedp)\n+    bftype = build_nonstandard_integer_type (bitsize, 0);\n+\n+  result = build3 (BIT_FIELD_REF, bftype, inner,\n+\t\t   size_int (bitsize), bitsize_int (bitpos));\n+\n+  if (bftype != type)\n+    result = fold_convert (type, result);\n+\n+  return result;\n+}\n+\n+/* Optimize a bit-field compare.\n+\n+   There are two cases:  First is a compare against a constant and the\n+   second is a comparison of two items where the fields are at the same\n+   bit position relative to the start of a chunk (byte, halfword, word)\n+   large enough to contain it.  In these cases we can avoid the shift\n+   implicit in bitfield extractions.\n+\n+   For constants, we emit a compare of the shifted constant with the\n+   BIT_AND_EXPR of a mask and a byte, halfword, or word of the operand being\n+   compared.  For two fields at the same position, we do the ANDs with the\n+   similar mask and compare the result of the ANDs.\n+\n+   CODE is the comparison code, known to be either NE_EXPR or EQ_EXPR.\n+   COMPARE_TYPE is the type of the comparison, and LHS and RHS\n+   are the left and right operands of the comparison, respectively.\n+\n+   If the optimization described above can be done, we return the resulting\n+   tree.  Otherwise we return zero.  */\n+\n+static tree\n+optimize_bit_field_compare (enum tree_code code, tree compare_type,\n+\t\t\t    tree lhs, tree rhs)\n+{\n+  HOST_WIDE_INT lbitpos, lbitsize, rbitpos, rbitsize, nbitpos, nbitsize;\n+  tree type = TREE_TYPE (lhs);\n+  tree signed_type, unsigned_type;\n+  int const_p = TREE_CODE (rhs) == INTEGER_CST;\n+  enum machine_mode lmode, rmode, nmode;\n+  int lunsignedp, runsignedp;\n+  int lvolatilep = 0, rvolatilep = 0;\n+  tree linner, rinner = NULL_TREE;\n+  tree mask;\n+  tree offset;\n+\n+  /* Get all the information about the extractions being done.  If the bit size\n+     if the same as the size of the underlying object, we aren't doing an\n+     extraction at all and so can do nothing.  We also don't want to\n+     do anything if the inner expression is a PLACEHOLDER_EXPR since we\n+     then will no longer be able to replace it.  */\n+  linner = get_inner_reference (lhs, &lbitsize, &lbitpos, &offset, &lmode,\n+\t\t\t\t&lunsignedp, &lvolatilep, false);\n+  if (linner == lhs || lbitsize == GET_MODE_BITSIZE (lmode) || lbitsize < 0\n+      || offset != 0 || TREE_CODE (linner) == PLACEHOLDER_EXPR)\n+    return 0;\n+\n+ if (!const_p)\n+   {\n+     /* If this is not a constant, we can only do something if bit positions,\n+\tsizes, and signedness are the same.  */\n+     rinner = get_inner_reference (rhs, &rbitsize, &rbitpos, &offset, &rmode,\n+\t\t\t\t   &runsignedp, &rvolatilep, false);\n+\n+     if (rinner == rhs || lbitpos != rbitpos || lbitsize != rbitsize\n+\t || lunsignedp != runsignedp || offset != 0\n+\t || TREE_CODE (rinner) == PLACEHOLDER_EXPR)\n+       return 0;\n+   }\n+\n+  /* See if we can find a mode to refer to this field.  We should be able to,\n+     but fail if we can't.  */\n+  nmode = get_best_mode (lbitsize, lbitpos,\n+\t\t\t const_p ? TYPE_ALIGN (TREE_TYPE (linner))\n+\t\t\t : MIN (TYPE_ALIGN (TREE_TYPE (linner)),\n+\t\t\t\tTYPE_ALIGN (TREE_TYPE (rinner))),\n+\t\t\t word_mode, lvolatilep || rvolatilep);\n+  if (nmode == VOIDmode)\n+    return 0;\n+\n+  /* Set signed and unsigned types of the precision of this mode for the\n+     shifts below.  */\n+  signed_type = lang_hooks.types.type_for_mode (nmode, 0);\n+  unsigned_type = lang_hooks.types.type_for_mode (nmode, 1);\n+\n+  /* Compute the bit position and size for the new reference and our offset\n+     within it. If the new reference is the same size as the original, we\n+     won't optimize anything, so return zero.  */\n+  nbitsize = GET_MODE_BITSIZE (nmode);\n+  nbitpos = lbitpos & ~ (nbitsize - 1);\n+  lbitpos -= nbitpos;\n+  if (nbitsize == lbitsize)\n+    return 0;\n+\n+  if (BYTES_BIG_ENDIAN)\n+    lbitpos = nbitsize - lbitsize - lbitpos;\n+\n+  /* Make the mask to be used against the extracted field.  */\n+  mask = build_int_cst_type (unsigned_type, -1);\n+  mask = const_binop (LSHIFT_EXPR, mask, size_int (nbitsize - lbitsize), 0);\n+  mask = const_binop (RSHIFT_EXPR, mask,\n+\t\t      size_int (nbitsize - lbitsize - lbitpos), 0);\n+\n+  if (! const_p)\n+    /* If not comparing with constant, just rework the comparison\n+       and return.  */\n+    return fold_build2 (code, compare_type,\n+\t\t\tfold_build2 (BIT_AND_EXPR, unsigned_type,\n+\t\t\t\t     make_bit_field_ref (linner,\n+\t\t\t\t\t\t\t unsigned_type,\n+\t\t\t\t\t\t\t nbitsize, nbitpos,\n+\t\t\t\t\t\t\t 1),\n+\t\t\t\t     mask),\n+\t\t\tfold_build2 (BIT_AND_EXPR, unsigned_type,\n+\t\t\t\t     make_bit_field_ref (rinner,\n+\t\t\t\t\t\t\t unsigned_type,\n+\t\t\t\t\t\t\t nbitsize, nbitpos,\n+\t\t\t\t\t\t\t 1),\n+\t\t\t\t     mask));\n+\n+  /* Otherwise, we are handling the constant case. See if the constant is too\n+     big for the field.  Warn and return a tree of for 0 (false) if so.  We do\n+     this not only for its own sake, but to avoid having to test for this\n+     error case below.  If we didn't, we might generate wrong code.\n+\n+     For unsigned fields, the constant shifted right by the field length should\n+     be all zero.  For signed fields, the high-order bits should agree with\n+     the sign bit.  */\n+\n+  if (lunsignedp)\n+    {\n+      if (! integer_zerop (const_binop (RSHIFT_EXPR,\n+\t\t\t\t\tfold_convert (unsigned_type, rhs),\n+\t\t\t\t\tsize_int (lbitsize), 0)))\n+\t{\n+\t  warning (0, \"comparison is always %d due to width of bit-field\",\n+\t\t   code == NE_EXPR);\n+\t  return constant_boolean_node (code == NE_EXPR, compare_type);\n+\t}\n+    }\n+  else\n+    {\n+      tree tem = const_binop (RSHIFT_EXPR, fold_convert (signed_type, rhs),\n+\t\t\t      size_int (lbitsize - 1), 0);\n+      if (! integer_zerop (tem) && ! integer_all_onesp (tem))\n+\t{\n+\t  warning (0, \"comparison is always %d due to width of bit-field\",\n+\t\t   code == NE_EXPR);\n+\t  return constant_boolean_node (code == NE_EXPR, compare_type);\n+\t}\n+    }\n+\n+  /* Single-bit compares should always be against zero.  */\n+  if (lbitsize == 1 && ! integer_zerop (rhs))\n+    {\n+      code = code == EQ_EXPR ? NE_EXPR : EQ_EXPR;\n+      rhs = build_int_cst (type, 0);\n+    }\n+\n+  /* Make a new bitfield reference, shift the constant over the\n+     appropriate number of bits and mask it with the computed mask\n+     (in case this was a signed field).  If we changed it, make a new one.  */\n+  lhs = make_bit_field_ref (linner, unsigned_type, nbitsize, nbitpos, 1);\n+  if (lvolatilep)\n+    {\n+      TREE_SIDE_EFFECTS (lhs) = 1;\n+      TREE_THIS_VOLATILE (lhs) = 1;\n+    }\n+\n+  rhs = const_binop (BIT_AND_EXPR,\n+\t\t     const_binop (LSHIFT_EXPR,\n+\t\t\t\t  fold_convert (unsigned_type, rhs),\n+\t\t\t\t  size_int (lbitpos), 0),\n+\t\t     mask, 0);\n+\n+  return build2 (code, compare_type,\n+\t\t build2 (BIT_AND_EXPR, unsigned_type, lhs, mask),\n+\t\t rhs);\n+}\n+\f\n /* Subroutine for fold_truthop: decode a field reference.\n \n    If EXP is a comparison reference, we return the innermost reference.\n@@ -3943,6 +4148,27 @@ decode_field_reference (tree exp, HOST_WIDE_INT *pbitsize,\n   return inner;\n }\n \n+/* Return nonzero if MASK represents a mask of SIZE ones in the low-order\n+   bit positions.  */\n+\n+static int\n+all_ones_mask_p (const_tree mask, int size)\n+{\n+  tree type = TREE_TYPE (mask);\n+  unsigned int precision = TYPE_PRECISION (type);\n+  tree tmask;\n+\n+  tmask = build_int_cst_type (signed_type_for (type), -1);\n+\n+  return\n+    tree_int_cst_equal (mask,\n+\t\t\tconst_binop (RSHIFT_EXPR,\n+\t\t\t\t     const_binop (LSHIFT_EXPR, tmask,\n+\t\t\t\t\t\t  size_int (precision - size),\n+\t\t\t\t\t\t  0),\n+\t\t\t\t     size_int (precision - size), 0));\n+}\n+\n /* Subroutine for fold: determine if VAL is the INTEGER_CONST that\n    represents the sign bit of EXP's type.  If EXP represents a sign\n    or zero extension, also test VAL against the unextended type.\n@@ -5275,16 +5501,16 @@ fold_truthop (enum tree_code code, tree truth_type, tree lhs, tree rhs)\n   tree ll_inner, lr_inner, rl_inner, rr_inner;\n   HOST_WIDE_INT ll_bitsize, ll_bitpos, lr_bitsize, lr_bitpos;\n   HOST_WIDE_INT rl_bitsize, rl_bitpos, rr_bitsize, rr_bitpos;\n-  HOST_WIDE_INT xll_bitpos, xrl_bitpos;\n-  HOST_WIDE_INT lnbitsize, lnbitpos;\n+  HOST_WIDE_INT xll_bitpos, xlr_bitpos, xrl_bitpos, xrr_bitpos;\n+  HOST_WIDE_INT lnbitsize, lnbitpos, rnbitsize, rnbitpos;\n   int ll_unsignedp, lr_unsignedp, rl_unsignedp, rr_unsignedp;\n   enum machine_mode ll_mode, lr_mode, rl_mode, rr_mode;\n-  enum machine_mode lnmode;\n+  enum machine_mode lnmode, rnmode;\n   tree ll_mask, lr_mask, rl_mask, rr_mask;\n   tree ll_and_mask, lr_and_mask, rl_and_mask, rr_and_mask;\n   tree l_const, r_const;\n-  tree lntype, result;\n-  int first_bit, end_bit;\n+  tree lntype, rntype, result;\n+  HOST_WIDE_INT first_bit, end_bit;\n   int volatilep;\n   tree orig_lhs = lhs, orig_rhs = rhs;\n   enum tree_code orig_code = code;\n@@ -5522,6 +5748,118 @@ fold_truthop (enum tree_code code, tree truth_type, tree lhs, tree rhs)\n \t}\n     }\n \n+  /* If the right sides are not constant, do the same for it.  Also,\n+     disallow this optimization if a size or signedness mismatch occurs\n+     between the left and right sides.  */\n+  if (l_const == 0)\n+    {\n+      if (ll_bitsize != lr_bitsize || rl_bitsize != rr_bitsize\n+\t  || ll_unsignedp != lr_unsignedp || rl_unsignedp != rr_unsignedp\n+\t  /* Make sure the two fields on the right\n+\t     correspond to the left without being swapped.  */\n+\t  || ll_bitpos - rl_bitpos != lr_bitpos - rr_bitpos)\n+\treturn 0;\n+\n+      first_bit = MIN (lr_bitpos, rr_bitpos);\n+      end_bit = MAX (lr_bitpos + lr_bitsize, rr_bitpos + rr_bitsize);\n+      rnmode = get_best_mode (end_bit - first_bit, first_bit,\n+\t\t\t      TYPE_ALIGN (TREE_TYPE (lr_inner)), word_mode,\n+\t\t\t      volatilep);\n+      if (rnmode == VOIDmode)\n+\treturn 0;\n+\n+      rnbitsize = GET_MODE_BITSIZE (rnmode);\n+      rnbitpos = first_bit & ~ (rnbitsize - 1);\n+      rntype = lang_hooks.types.type_for_size (rnbitsize, 1);\n+      xlr_bitpos = lr_bitpos - rnbitpos, xrr_bitpos = rr_bitpos - rnbitpos;\n+\n+      if (BYTES_BIG_ENDIAN)\n+\t{\n+\t  xlr_bitpos = rnbitsize - xlr_bitpos - lr_bitsize;\n+\t  xrr_bitpos = rnbitsize - xrr_bitpos - rr_bitsize;\n+\t}\n+\n+      lr_mask = const_binop (LSHIFT_EXPR, fold_convert (rntype, lr_mask),\n+\t\t\t     size_int (xlr_bitpos), 0);\n+      rr_mask = const_binop (LSHIFT_EXPR, fold_convert (rntype, rr_mask),\n+\t\t\t     size_int (xrr_bitpos), 0);\n+\n+      /* Make a mask that corresponds to both fields being compared.\n+\t Do this for both items being compared.  If the operands are the\n+\t same size and the bits being compared are in the same position\n+\t then we can do this by masking both and comparing the masked\n+\t results.  */\n+      ll_mask = const_binop (BIT_IOR_EXPR, ll_mask, rl_mask, 0);\n+      lr_mask = const_binop (BIT_IOR_EXPR, lr_mask, rr_mask, 0);\n+      if (lnbitsize == rnbitsize && xll_bitpos == xlr_bitpos)\n+\t{\n+\t  lhs = make_bit_field_ref (ll_inner, lntype, lnbitsize, lnbitpos,\n+\t\t\t\t    ll_unsignedp || rl_unsignedp);\n+\t  if (! all_ones_mask_p (ll_mask, lnbitsize))\n+\t    lhs = build2 (BIT_AND_EXPR, lntype, lhs, ll_mask);\n+\n+\t  rhs = make_bit_field_ref (lr_inner, rntype, rnbitsize, rnbitpos,\n+\t\t\t\t    lr_unsignedp || rr_unsignedp);\n+\t  if (! all_ones_mask_p (lr_mask, rnbitsize))\n+\t    rhs = build2 (BIT_AND_EXPR, rntype, rhs, lr_mask);\n+\n+\t  return build2 (wanted_code, truth_type, lhs, rhs);\n+\t}\n+\n+      /* There is still another way we can do something:  If both pairs of\n+\t fields being compared are adjacent, we may be able to make a wider\n+\t field containing them both.\n+\n+\t Note that we still must mask the lhs/rhs expressions.  Furthermore,\n+\t the mask must be shifted to account for the shift done by\n+\t make_bit_field_ref.  */\n+      if ((ll_bitsize + ll_bitpos == rl_bitpos\n+\t   && lr_bitsize + lr_bitpos == rr_bitpos)\n+\t  || (ll_bitpos == rl_bitpos + rl_bitsize\n+\t      && lr_bitpos == rr_bitpos + rr_bitsize))\n+\t{\n+\t  tree type;\n+\n+\t  lhs = make_bit_field_ref (ll_inner, lntype, ll_bitsize + rl_bitsize,\n+\t\t\t\t    MIN (ll_bitpos, rl_bitpos), ll_unsignedp);\n+\t  rhs = make_bit_field_ref (lr_inner, rntype, lr_bitsize + rr_bitsize,\n+\t\t\t\t    MIN (lr_bitpos, rr_bitpos), lr_unsignedp);\n+\n+\t  ll_mask = const_binop (RSHIFT_EXPR, ll_mask,\n+\t\t\t\t size_int (MIN (xll_bitpos, xrl_bitpos)), 0);\n+\t  lr_mask = const_binop (RSHIFT_EXPR, lr_mask,\n+\t\t\t\t size_int (MIN (xlr_bitpos, xrr_bitpos)), 0);\n+\n+\t  /* Convert to the smaller type before masking out unwanted bits.  */\n+\t  type = lntype;\n+\t  if (lntype != rntype)\n+\t    {\n+\t      if (lnbitsize > rnbitsize)\n+\t\t{\n+\t\t  lhs = fold_convert (rntype, lhs);\n+\t\t  ll_mask = fold_convert (rntype, ll_mask);\n+\t\t  type = rntype;\n+\t\t}\n+\t      else if (lnbitsize < rnbitsize)\n+\t\t{\n+\t\t  rhs = fold_convert (lntype, rhs);\n+\t\t  lr_mask = fold_convert (lntype, lr_mask);\n+\t\t  type = lntype;\n+\t\t}\n+\t    }\n+\n+\t  if (! all_ones_mask_p (ll_mask, ll_bitsize + rl_bitsize))\n+\t    lhs = build2 (BIT_AND_EXPR, type, lhs, ll_mask);\n+\n+\t  if (! all_ones_mask_p (lr_mask, lr_bitsize + rr_bitsize))\n+\t    rhs = build2 (BIT_AND_EXPR, type, rhs, lr_mask);\n+\n+\t  return build2 (wanted_code, truth_type, lhs, rhs);\n+\t}\n+\n+      return 0;\n+    }\n+\n   /* Handle the case of comparisons with constants.  If there is something in\n      common between the masks, those bits of the constants must be the same.\n      If not, the condition is always false.  Test for this to avoid generating\n@@ -5543,7 +5881,19 @@ fold_truthop (enum tree_code code, tree truth_type, tree lhs, tree rhs)\n \t}\n     }\n \n-  return NULL_TREE;\n+  /* Construct the expression we will return.  First get the component\n+     reference we will make.  Unless the mask is all ones the width of\n+     that field, perform the mask operation.  Then compare with the\n+     merged constant.  */\n+  result = make_bit_field_ref (ll_inner, lntype, lnbitsize, lnbitpos,\n+\t\t\t       ll_unsignedp || rl_unsignedp);\n+\n+  ll_mask = const_binop (BIT_IOR_EXPR, ll_mask, rl_mask, 0);\n+  if (! all_ones_mask_p (ll_mask, lnbitsize))\n+    result = build2 (BIT_AND_EXPR, lntype, result, ll_mask);\n+\n+  return build2 (wanted_code, truth_type, result,\n+\t\t const_binop (BIT_IOR_EXPR, l_const, r_const, 0));\n }\n \f\n /* Optimize T, which is a comparison of a MIN_EXPR or MAX_EXPR with a\n@@ -12056,6 +12406,18 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t    return omit_one_operand (type, rslt, arg0);\n \t}\n \n+      /* If this is a comparison of a field, we may be able to simplify it.  */\n+      if ((TREE_CODE (arg0) == COMPONENT_REF\n+\t   || TREE_CODE (arg0) == BIT_FIELD_REF)\n+\t  /* Handle the constant case even without -O\n+\t     to make sure the warnings are given.  */\n+\t  && (optimize || TREE_CODE (arg1) == INTEGER_CST))\n+\t{\n+\t  t1 = optimize_bit_field_compare (code, type, arg0, arg1);\n+\t  if (t1)\n+\t    return t1;\n+\t}\n+\n       /* Optimize comparisons of strlen vs zero to a compare of the\n \t first character of the string vs zero.  To wit,\n \t\tstrlen(ptr) == 0   =>  *ptr == 0"}, {"sha": "26578f56151c1175da4efd5f9a74ff275d9c48ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45dc13b919a68ab42ff8e3698a8c1e6627ac570d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45dc13b919a68ab42ff8e3698a8c1e6627ac570d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=45dc13b919a68ab42ff8e3698a8c1e6627ac570d", "patch": "@@ -1,3 +1,10 @@\n+2008-12-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/37248\n+\t* gcc.target/i386/pr37248-1.c: New test.\n+\t* gcc.target/i386/pr37248-2.c: New test.\n+\t* gcc.target/i386/pr37248-3.c: New test.\n+\n 2008-12-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/38338"}, {"sha": "c873795089658c10205bba8a3562f8c998c44ce6", "filename": "gcc/testsuite/gcc.target/i386/pr37248-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45dc13b919a68ab42ff8e3698a8c1e6627ac570d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37248-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45dc13b919a68ab42ff8e3698a8c1e6627ac570d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37248-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37248-1.c?ref=45dc13b919a68ab42ff8e3698a8c1e6627ac570d", "patch": "@@ -0,0 +1,19 @@\n+/* PR middle-end/37248 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+struct S\n+{\n+  unsigned char a : 1;\n+  unsigned char b : 1;\n+  unsigned char c : 1;\n+} s;\n+\n+int\n+foo (struct S x)\n+{\n+  return x.a && x.b && x.c;\n+}\n+\n+/* { dg-final { scan-tree-dump \"& 7\\[^\\n\\t\\]*== 7\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "25fb1066fdd6d77a8b6a7333841aa70a1ad564f8", "filename": "gcc/testsuite/gcc.target/i386/pr37248-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45dc13b919a68ab42ff8e3698a8c1e6627ac570d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37248-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45dc13b919a68ab42ff8e3698a8c1e6627ac570d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37248-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37248-2.c?ref=45dc13b919a68ab42ff8e3698a8c1e6627ac570d", "patch": "@@ -0,0 +1,23 @@\n+/* PR middle-end/37248 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+struct S\n+{\n+  unsigned char a : 1;\n+  unsigned char b : 1;\n+  unsigned char c : 1;\n+  unsigned int d : 26;\n+  unsigned char e : 1;\n+  unsigned char f : 1;\n+  unsigned char g : 1;\n+} s;\n+\n+int\n+foo (struct S x)\n+{\n+  return x.a && x.g && x.b && x.f && x.c && x.e;\n+}\n+\n+/* { dg-final { scan-tree-dump \"& 3758096391\\[^\\n\\t\\]*== 3758096391\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "d5d2d98e8e8c4eaac6078f3c25bd0a31d3ddda74", "filename": "gcc/testsuite/gcc.target/i386/pr37248-3.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45dc13b919a68ab42ff8e3698a8c1e6627ac570d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37248-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45dc13b919a68ab42ff8e3698a8c1e6627ac570d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37248-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37248-3.c?ref=45dc13b919a68ab42ff8e3698a8c1e6627ac570d", "patch": "@@ -0,0 +1,25 @@\n+/* PR middle-end/37248 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+struct S\n+{\n+  unsigned char a : 1;\n+  unsigned char b : 1;\n+  unsigned char c : 1;\n+  unsigned int d : 6;\n+  unsigned int e : 14;\n+  unsigned int f : 6;\n+  unsigned char g : 1;\n+  unsigned char h : 1;\n+  unsigned char i : 1;\n+} s;\n+\n+int\n+foo (struct S x)\n+{\n+  return x.a && x.i && x.b && x.h && x.c && x.g && x.e == 131;\n+}\n+\n+/* { dg-final { scan-tree-dump \"& 3766484487\\[^\\n\\t\\]*== 3758163463\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}]}