{"sha": "0bca04b822bc5ee0f5bbb2ba5df6669a433d0bf5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJjYTA0YjgyMmJjNWVlMGY1YmJiMmJhNWRmNjY2OWE0MzNkMGJmNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-03-01T22:31:52Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-03-01T22:31:52Z"}, "message": "re PR rtl-optimization/70007 (wrong code with -mbmi2)\n\n\tPR rtl-optimization/70007\n\t* gcse.c (compute_ld_motion_mems): Tidy up and also invalidate memory\n\treferences present in REG_EQUAL notes attached to non-SET patterns.\n\nFrom-SVN: r233867", "tree": {"sha": "ce9623d9e599375c8a302640e503ebd518fd6185", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce9623d9e599375c8a302640e503ebd518fd6185"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bca04b822bc5ee0f5bbb2ba5df6669a433d0bf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bca04b822bc5ee0f5bbb2ba5df6669a433d0bf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bca04b822bc5ee0f5bbb2ba5df6669a433d0bf5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bca04b822bc5ee0f5bbb2ba5df6669a433d0bf5/comments", "author": null, "committer": null, "parents": [{"sha": "2a9afc868088221a4edd54e79d1388ab25f7f2fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a9afc868088221a4edd54e79d1388ab25f7f2fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a9afc868088221a4edd54e79d1388ab25f7f2fa"}], "stats": {"total": 66, "additions": 56, "deletions": 10}, "files": [{"sha": "982a7c05284ae99d822f280b9f6bc1d2d8816ccf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bca04b822bc5ee0f5bbb2ba5df6669a433d0bf5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bca04b822bc5ee0f5bbb2ba5df6669a433d0bf5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0bca04b822bc5ee0f5bbb2ba5df6669a433d0bf5", "patch": "@@ -1,3 +1,9 @@\n+2016-03-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR rtl-optimization/70007\n+\t* gcse.c (compute_ld_motion_mems): Tidy up and also invalidate memory\n+\treferences present in REG_EQUAL notes attached to non-SET patterns.\n+\n 2016-03-01  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/69196"}, {"sha": "a3a7dc31353d863fc8dad7898e2eedd7bf7f5da1", "filename": "gcc/gcse.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bca04b822bc5ee0f5bbb2ba5df6669a433d0bf5/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bca04b822bc5ee0f5bbb2ba5df6669a433d0bf5/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=0bca04b822bc5ee0f5bbb2ba5df6669a433d0bf5", "patch": "@@ -3796,10 +3796,8 @@ compute_ld_motion_mems (void)\n \t\t{\n \t\t  rtx src = SET_SRC (PATTERN (insn));\n \t\t  rtx dest = SET_DEST (PATTERN (insn));\n-\t\t  rtx note = find_reg_equal_equiv_note (insn);\n-\t\t  rtx src_eq;\n \n-\t\t  /* Check for a simple LOAD...  */\n+\t\t  /* Check for a simple load.  */\n \t\t  if (MEM_P (src) && simple_mem (src))\n \t\t    {\n \t\t      ptr = ldst_entry (src);\n@@ -3814,12 +3812,11 @@ compute_ld_motion_mems (void)\n \t\t      invalidate_any_buried_refs (src);\n \t\t    }\n \n-\t\t  if (note != 0 && REG_NOTE_KIND (note) == REG_EQUAL)\n-\t\t    src_eq = XEXP (note, 0);\n-\t\t  else\n-\t\t    src_eq = NULL_RTX;\n-\n-\t\t  if (src_eq != NULL_RTX\n+\t\t  /* Check for a simple load through a REG_EQUAL note.  */\n+\t\t  rtx note = find_reg_equal_equiv_note (insn), src_eq;\n+\t\t  if (note\n+\t\t      && REG_NOTE_KIND (note) == REG_EQUAL\n+\t\t      && (src_eq = XEXP (note, 0))\n \t\t      && !(MEM_P (src_eq) && simple_mem (src_eq)))\n \t\t    invalidate_any_buried_refs (src_eq);\n \n@@ -3843,7 +3840,17 @@ compute_ld_motion_mems (void)\n \t\t    }\n \t\t}\n \t      else\n-\t\tinvalidate_any_buried_refs (PATTERN (insn));\n+\t\t{\n+\t\t  /* Invalidate all MEMs in the pattern and...  */\n+\t\t  invalidate_any_buried_refs (PATTERN (insn));\n+\n+\t\t  /* ...in REG_EQUAL notes for PARALLELs with single SET.  */\n+\t\t  rtx note = find_reg_equal_equiv_note (insn), src_eq;\n+\t\t  if (note\n+\t\t      && REG_NOTE_KIND (note) == REG_EQUAL\n+\t\t      && (src_eq = XEXP (note, 0)))\n+\t\t    invalidate_any_buried_refs (src_eq);\n+\t\t}\n \t    }\n \t}\n     }"}, {"sha": "bdc4b1166e6d16882b86e0d29a17e1ce24c439e4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bca04b822bc5ee0f5bbb2ba5df6669a433d0bf5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bca04b822bc5ee0f5bbb2ba5df6669a433d0bf5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0bca04b822bc5ee0f5bbb2ba5df6669a433d0bf5", "patch": "@@ -1,3 +1,7 @@\n+2016-03-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.target/i386/pr70007.c: New test.\n+\n 2016-03-01  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/69196"}, {"sha": "6b457eecb30230c903c3b4960d71bf64e05f6bd8", "filename": "gcc/testsuite/gcc.target/i386/pr70007.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bca04b822bc5ee0f5bbb2ba5df6669a433d0bf5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70007.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bca04b822bc5ee0f5bbb2ba5df6669a433d0bf5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70007.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70007.c?ref=0bca04b822bc5ee0f5bbb2ba5df6669a433d0bf5", "patch": "@@ -0,0 +1,29 @@\n+/* PR rtl-optimization/70007 */\n+/* { dg-do run } */\n+/* { dg-options \"-O -fgcse -mbmi2\" } */\n+/* { dg-require-effective-target bmi2 } */\n+\n+typedef unsigned short v32u16 __attribute__ ((vector_size (32)));\n+typedef unsigned long long v32u64 __attribute__ ((vector_size (32)));\n+typedef unsigned __int128 u128;\n+typedef unsigned __int128 v32u128 __attribute__ ((vector_size (32)));\n+\n+u128\n+foo (v32u16 v32u16_0, v32u64 v32u64_0, v32u64 v32u64_1)\n+{\n+  do {\n+    v32u16_0[13] |= v32u64_1[3] = (v32u64_1[3] >> 19) | (v32u64_1[3] << 45);\n+    v32u64_1 %= ~v32u64_1;\n+    v32u64_0 *= (v32u64) v32u16_0;\n+  } while (v32u64_0[0]);\n+  return v32u64_1[3];\n+}\n+\n+int\n+main (void)\n+{\n+  u128 x = foo((v32u16){~0xba31, 0x47c6}, (v32u64){64}, (v32u64){0, 0x8b217e2514d23242, 0xac569b6dff9f82, 0x9d4cffe03c139c});\n+  if (x != 0x3c74da5ca328d09)\n+    __builtin_abort();\n+  return 0;\n+}"}]}