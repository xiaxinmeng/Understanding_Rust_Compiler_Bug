{"sha": "d51102f3e780e69e19c6d7eeb987647e4a8aff15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUxMTAyZjNlNzgwZTY5ZTE5YzZkN2VlYjk4NzY0N2U0YThhZmYxNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2011-08-18T12:36:51Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-08-18T12:36:51Z"}, "message": "rtl.h (set_rtx_cost, [...]): New functions.\n\ngcc/\n\t* rtl.h (set_rtx_cost, get_full_set_rtx_cost): New functions.\n\t* auto-inc-dec.c (attempt_change): Use set_rtx_cost.\n\t* cfgloopanal.c (seq_cost): Likewise.\n\t* loop-invariant.c (create_new_invariant): Likewise.\n\t* postreload.c (move2add_use_add2_insn, move2add_use_add3_insn)\n\t(reload_cse_move2add): Use get_full_set_rtx_cost.\n\nFrom-SVN: r177850", "tree": {"sha": "3787f76119cc3035cbfc30cc522d9e6e59efca62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3787f76119cc3035cbfc30cc522d9e6e59efca62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d51102f3e780e69e19c6d7eeb987647e4a8aff15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d51102f3e780e69e19c6d7eeb987647e4a8aff15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d51102f3e780e69e19c6d7eeb987647e4a8aff15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d51102f3e780e69e19c6d7eeb987647e4a8aff15/comments", "author": null, "committer": null, "parents": [{"sha": "fdb4f3153312d1195d699421d43fb34ba41e6a58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdb4f3153312d1195d699421d43fb34ba41e6a58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdb4f3153312d1195d699421d43fb34ba41e6a58"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "f3a95bb3b0be342f64e54e9c47bbe3948c8ccc6a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51102f3e780e69e19c6d7eeb987647e4a8aff15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51102f3e780e69e19c6d7eeb987647e4a8aff15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d51102f3e780e69e19c6d7eeb987647e4a8aff15", "patch": "@@ -1,3 +1,12 @@\n+2011-08-18  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* rtl.h (set_rtx_cost, get_full_set_rtx_cost): New functions.\n+\t* auto-inc-dec.c (attempt_change): Use set_rtx_cost.\n+\t* cfgloopanal.c (seq_cost): Likewise.\n+\t* loop-invariant.c (create_new_invariant): Likewise.\n+\t* postreload.c (move2add_use_add2_insn, move2add_use_add3_insn)\n+\t(reload_cse_move2add): Use get_full_set_rtx_cost.\n+\n 2011-08-18  Richard Guenther  <rguenther@suse.de>\n \n \t* expr.c (get_inner_reference): Fix typo in last change."}, {"sha": "0444daecf9be382d6e6fc469c2c9934ecef16128", "filename": "gcc/auto-inc-dec.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51102f3e780e69e19c6d7eeb987647e4a8aff15/gcc%2Fauto-inc-dec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51102f3e780e69e19c6d7eeb987647e4a8aff15/gcc%2Fauto-inc-dec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fauto-inc-dec.c?ref=d51102f3e780e69e19c6d7eeb987647e4a8aff15", "patch": "@@ -484,7 +484,7 @@ attempt_change (rtx new_addr, rtx inc_reg)\n   XEXP (mem_tmp, 0) = new_addr;\n \n   old_cost = (rtx_cost (mem, SET, speed)\n-\t      + rtx_cost (PATTERN (inc_insn.insn), SET, speed));\n+\t      + set_rtx_cost (PATTERN (inc_insn.insn), speed));\n   new_cost = rtx_cost (mem_tmp, SET, speed);\n \n   /* The first item of business is to see if this is profitable.  */"}, {"sha": "652fc4d8b622354171082982f8697e97f2d40204", "filename": "gcc/cfgloopanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51102f3e780e69e19c6d7eeb987647e4a8aff15/gcc%2Fcfgloopanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51102f3e780e69e19c6d7eeb987647e4a8aff15/gcc%2Fcfgloopanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopanal.c?ref=d51102f3e780e69e19c6d7eeb987647e4a8aff15", "patch": "@@ -314,7 +314,7 @@ seq_cost (const_rtx seq, bool speed)\n     {\n       set = single_set (seq);\n       if (set)\n-\tcost += rtx_cost (set, SET, speed);\n+\tcost += set_rtx_cost (set, speed);\n       else\n \tcost++;\n     }"}, {"sha": "61ca446f079cc3dc8a27fdf367d4ce27f5f6f32f", "filename": "gcc/loop-invariant.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51102f3e780e69e19c6d7eeb987647e4a8aff15/gcc%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51102f3e780e69e19c6d7eeb987647e4a8aff15/gcc%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-invariant.c?ref=d51102f3e780e69e19c6d7eeb987647e4a8aff15", "patch": "@@ -704,7 +704,7 @@ create_new_invariant (struct def *def, rtx insn, bitmap depends_on,\n      the loop.  Otherwise we save only cost of the computation.  */\n   if (def)\n     {\n-      inv->cost = rtx_cost (set, SET, speed);\n+      inv->cost = set_rtx_cost (set, speed);\n       /* ??? Try to determine cheapness of address computation.  Unfortunately\n          the address cost is only a relative measure, we can't really compare\n \t it with any absolute number, but only with other address costs."}, {"sha": "88b401f511ce21488ab1f78a95398aafe30c460c", "filename": "gcc/postreload.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51102f3e780e69e19c6d7eeb987647e4a8aff15/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51102f3e780e69e19c6d7eeb987647e4a8aff15/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=d51102f3e780e69e19c6d7eeb987647e4a8aff15", "patch": "@@ -1683,9 +1683,9 @@ move2add_use_add2_insn (rtx reg, rtx sym, rtx off, rtx insn)\n       struct full_rtx_costs oldcst, newcst;\n       rtx tem = gen_rtx_PLUS (GET_MODE (reg), reg, new_src);\n \n-      get_full_rtx_cost (pat, SET, &oldcst);\n+      get_full_set_rtx_cost (pat, &oldcst);\n       SET_SRC (pat) = tem;\n-      get_full_rtx_cost (pat, SET, &newcst);\n+      get_full_set_rtx_cost (pat, &newcst);\n       SET_SRC (pat) = src;\n \n       if (costs_lt_p (&newcst, &oldcst, speed)\n@@ -1752,7 +1752,7 @@ move2add_use_add3_insn (rtx reg, rtx sym, rtx off, rtx insn)\n   rtx plus_expr;\n \n   init_costs_to_max (&mincst);\n-  get_full_rtx_cost (pat, SET, &oldcst);\n+  get_full_set_rtx_cost (pat, &oldcst);\n \n   plus_expr = gen_rtx_PLUS (GET_MODE (reg), reg, const0_rtx);\n   SET_SRC (pat) = plus_expr;\n@@ -1781,7 +1781,7 @@ move2add_use_add3_insn (rtx reg, rtx sym, rtx off, rtx insn)\n \telse\n \t  {\n \t    XEXP (plus_expr, 1) = new_src;\n-\t    get_full_rtx_cost (pat, SET, &newcst);\n+\t    get_full_set_rtx_cost (pat, &newcst);\n \n \t    if (costs_lt_p (&newcst, &mincst, speed))\n \t      {\n@@ -1934,7 +1934,7 @@ reload_cse_move2add (rtx first)\n \t\t\t  struct full_rtx_costs oldcst, newcst;\n \t\t\t  rtx tem = gen_rtx_PLUS (GET_MODE (reg), reg, new_src);\n \n-\t\t\t  get_full_rtx_cost (set, SET, &oldcst);\n+\t\t\t  get_full_set_rtx_cost (set, &oldcst);\n \t\t\t  SET_SRC (set) = tem;\n \t\t\t  get_full_rtx_cost (tem, SET, &newcst);\n \t\t\t  SET_SRC (set) = old_src;"}, {"sha": "84166c47fc215e7b7b0271c4dff6fdc918e9b0d7", "filename": "gcc/rtl.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51102f3e780e69e19c6d7eeb987647e4a8aff15/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51102f3e780e69e19c6d7eeb987647e4a8aff15/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=d51102f3e780e69e19c6d7eeb987647e4a8aff15", "patch": "@@ -1217,6 +1217,24 @@ extern bool constant_pool_constant_p (rtx);\n extern bool truncated_to_mode (enum machine_mode, const_rtx);\n extern int low_bitmask_len (enum machine_mode, unsigned HOST_WIDE_INT);\n \n+#ifndef GENERATOR_FILE\n+/* Return the cost of SET X.  SPEED_P is true if optimizing for speed\n+   rather than size.  */\n+\n+static inline int\n+set_rtx_cost (rtx x, bool speed_p)\n+{\n+  return rtx_cost (x, INSN, speed_p);\n+}\n+\n+/* Like set_rtx_cost, but return both the speed and size costs in C.  */\n+\n+static inline void\n+get_full_set_rtx_cost (rtx x, struct full_rtx_costs *c)\n+{\n+  get_full_rtx_cost (x, INSN, c);\n+}\n+#endif\n \n /* 1 if RTX is a subreg containing a reg that is already known to be\n    sign- or zero-extended from the mode of the subreg to the mode of"}]}