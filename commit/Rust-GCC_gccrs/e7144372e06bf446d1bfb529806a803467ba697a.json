{"sha": "e7144372e06bf446d1bfb529806a803467ba697a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTcxNDQzNzJlMDZiZjQ0NmQxYmZiNTI5ODA2YTgwMzQ2N2JhNjk3YQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-10-29T20:50:57Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-11-03T22:15:30Z"}, "message": "c++: Not all character types are byte-access types.\n\nThe patch for 94923 that introduced is_byte_access_type wrongly changed\nbuild_cplus_array_type to treat even arrays of char16_t as typeless storage,\nwhich is wrong; only arrays of char and unsigned char have the special alias\nsemantics in C++.\n\nG++ used to treat signed char the same way, as C does, but C++ has always\nomitted it.\n\ngcc/cp/ChangeLog:\n\n\t* tree.c (is_byte_access_type): Don't use char_type_p.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/Wclass-memaccess.C: Check that signed char and\n\tchar16_t aren't treated as byte-access types.", "tree": {"sha": "0b52c7ad96e460585ceec29d73331743803396d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b52c7ad96e460585ceec29d73331743803396d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7144372e06bf446d1bfb529806a803467ba697a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7144372e06bf446d1bfb529806a803467ba697a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7144372e06bf446d1bfb529806a803467ba697a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7144372e06bf446d1bfb529806a803467ba697a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1276e334298251d73303999d2adc688abbfc856", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1276e334298251d73303999d2adc688abbfc856", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1276e334298251d73303999d2adc688abbfc856"}], "stats": {"total": 214, "additions": 211, "deletions": 3}, "files": [{"sha": "63ce9acd7a6f496c0f8b0f2e79b133be7cf5f034", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7144372e06bf446d1bfb529806a803467ba697a/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7144372e06bf446d1bfb529806a803467ba697a/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=e7144372e06bf446d1bfb529806a803467ba697a", "patch": "@@ -4100,13 +4100,14 @@ is_dummy_object (const_tree ob)\n \t  && TREE_OPERAND (ob, 0) == void_node);\n }\n \n-/* Returns true if TYPE is a character type or std::byte.  */\n+/* Returns true if TYPE is char, unsigned char, or std::byte.  */\n \n bool\n is_byte_access_type (tree type)\n {\n   type = TYPE_MAIN_VARIANT (type);\n-  if (char_type_p (type))\n+  if (type == char_type_node\n+      || type == unsigned_char_type_node)\n     return true;\n \n   return (TREE_CODE (type) == ENUMERAL_TYPE"}, {"sha": "1dc23dfab7e61fa766f87efa460bc190772106f7", "filename": "gcc/testsuite/g++.dg/Wclass-memaccess.C", "status": "modified", "additions": 208, "deletions": 1, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7144372e06bf446d1bfb529806a803467ba697a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWclass-memaccess.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7144372e06bf446d1bfb529806a803467ba697a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWclass-memaccess.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWclass-memaccess.C?ref=e7144372e06bf446d1bfb529806a803467ba697a", "patch": "@@ -23,6 +23,10 @@ typedef unsigned char byte;\n #endif\n }\n \n+#if __cplusplus < 201103L\n+typedef unsigned short char16_t;\n+#endif\n+\n /* Ordinary bzcopy and bzero aren't recognized as special.  */\n #define bcopy __builtin_bcopy\n #define bzero __builtin_bzero\n@@ -190,6 +194,7 @@ struct HasDefault { char a[4]; HasDefault (); };\n \n void test (HasDefault *p, const HasDefault &x,\n \t   void *q, const unsigned char *s, const std::byte *b,\n+\t   const signed char *ss, const char16_t *ws,\n \t   const int ia[])\n {\n   const int i = *ia;\n@@ -247,6 +252,8 @@ void test (HasDefault *p, const HasDefault &x,\n   T (memcpy, (p, ia, sizeof *p));  // { dg-warning \".void\\\\* memcpy(\\[^\\n\\r\\]*). copying an object of non-trivial type .struct HasDefault. from an array of .const int.\" }\n   extern long *ip;\n   T (memcpy, (p, ip, sizeof *p));  // { dg-warning \".void\\\\* memcpy(\\[^\\n\\r\\]*). copying an object of non-trivial type .struct HasDefault. from an array of .long.\" }\n+  T (memcpy, (p, ss, sizeof *p));  // { dg-warning \".void\\\\* memcpy(\\[^\\n\\r\\]*). copying an object of non-trivial type .struct HasDefault. from an array of .const signed char.\" }\n+  T (memcpy, (p, ws, sizeof *p));  // { dg-warning \".void\\\\* memcpy(\\[^\\n\\r\\]*). copying an object of non-trivial type .struct HasDefault. from an array of .const \\(char16_t\\|unsigned short\\).\" }\n \n   T (memmove, (p, ia, sizeof *p)); // { dg-warning \".void\\\\* memmove(\\[^\\n\\r\\]*). copying an object of non-trivial type .struct HasDefault. from an array of .const int.\" }\n \n@@ -274,6 +281,7 @@ struct HasTemplateDefault\n \n void test (HasTemplateDefault *p, const HasTemplateDefault &x,\n \t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const signed char *ss, const char16_t *ws,\n \t   const int ia[])\n {\n   const int i = *ia;\n@@ -291,24 +299,32 @@ void test (HasTemplateDefault *p, const HasTemplateDefault &x,\n   T (bcopy, (q, p, sizeof *p));\n   T (bcopy, (s, p, sizeof *p));\n   T (bcopy, (b, p, sizeof *p));\n+  T (bcopy, (ss, p, sizeof *p));    // { dg-warning \"bcopy\" }\n+  T (bcopy, (ws, p, sizeof *p));    // { dg-warning \"bcopy\" }\n   T (bcopy, (ia, p, sizeof *p));    // { dg-warning \"bcopy\" }\n \n   T (memcpy, (p, &x, sizeof *p));\n   T (memcpy, (p, q, sizeof *p));\n   T (memcpy, (p, s, sizeof *p));\n   T (memcpy, (p, b, sizeof *p));\n+  T (memcpy, (p, ss, sizeof *p));   // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ws, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, &x, sizeof *p));\n   T (memmove, (p, q, sizeof *p));\n   T (memmove, (p, s, sizeof *p));\n   T (memmove, (p, b, sizeof *p));\n+  T (memmove, (p, ss, sizeof *p));  // { dg-warning \"memmove\" }\n+  T (memmove, (p, ws, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, &x, sizeof *p));\n   T (mempcpy, (p, q, sizeof *p));\n   T (mempcpy, (p, s, sizeof *p));\n   T (mempcpy, (p, b, sizeof *p));\n+  T (mempcpy, (p, ss, sizeof *p));  // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ws, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n \n   // Reallocating is the same as calling memcpy.\n@@ -329,6 +345,7 @@ struct HasCopy { int i; HasCopy (const HasCopy&); };\n \n void test (HasCopy *p, const HasCopy &x,\n \t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const signed char *ss, const char16_t *ws,\n \t   const int ia[])\n {\n   const int i = *ia;\n@@ -348,24 +365,32 @@ void test (HasCopy *p, const HasCopy &x,\n   T (bcopy, (q, p, sizeof *p));     // { dg-warning \"bcopy\" }\n   T (bcopy, (s, p, sizeof *p));     // { dg-warning \"bcopy\" }\n   T (bcopy, (b, p, sizeof *p));     // { dg-warning \"bcopy\" }\n+  T (bcopy, (ss, p, sizeof *p));    // { dg-warning \"bcopy\" }\n+  T (bcopy, (ws, p, sizeof *p));    // { dg-warning \"bcopy\" }\n   T (bcopy, (ia, p, sizeof *p));    // { dg-warning \"bcopy\" }\n \n   T (memcpy, (p, &x, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, q, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, b, sizeof *p));    // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ss, sizeof *p));   // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ws, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, &x, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, q, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, s, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, b, sizeof *p));   // { dg-warning \"memmove\" }\n+  T (memmove, (p, ss, sizeof *p));  // { dg-warning \"memmove\" }\n+  T (memmove, (p, ws, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, &x, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, q, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, b, sizeof *p));   // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ss, sizeof *p));  // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ws, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n \n   // Reallocating is the same as calling memcpy.\n@@ -410,6 +435,7 @@ private:\n \n void test (HasPrivateCopy *p, const HasPrivateCopy &x,\n \t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const signed char *ss, const char16_t *ws,\n \t   const int ia[])\n {\n   const int i = *ia;\n@@ -429,18 +455,24 @@ void test (HasPrivateCopy *p, const HasPrivateCopy &x,\n   T (memcpy, (p, q, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, b, sizeof *p));    // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ss, sizeof *p));   // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ws, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, &x, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, q, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, s, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, b, sizeof *p));   // { dg-warning \"memmove\" }\n+  T (memmove, (p, ss, sizeof *p));  // { dg-warning \"memmove\" }\n+  T (memmove, (p, ws, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, &x, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, q, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, b, sizeof *p));   // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ss, sizeof *p));  // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ws, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n \n   // Reallocating is the same as calling memcpy.\n@@ -459,6 +491,7 @@ struct HasDtor { int i; ~HasDtor (); };\n \n void test (HasDtor *p, const HasDtor &x,\n \t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const signed char *ss, const char16_t *ws,\n \t   const int ia[])\n {\n   const int i = *ia;\n@@ -479,18 +512,24 @@ void test (HasDtor *p, const HasDtor &x,\n   T (memcpy, (p, q, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, b, sizeof *p));    // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ss, sizeof *p));   // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ws, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, &x, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, q, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, s, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, b, sizeof *p));   // { dg-warning \"memmove\" }\n+  T (memmove, (p, ss, sizeof *p));  // { dg-warning \"memmove\" }\n+  T (memmove, (p, ws, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, &x, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, q, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, b, sizeof *p));   // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ss, sizeof *p));  // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ws, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n \n   // Reallocating is the same as calling memcpy.\n@@ -503,7 +542,7 @@ void test (HasDtor *p, const HasDtor &x,\n \n #if !defined TEST || TEST == TEST_HAS_DELETED_DTOR\n \n-// HasDeletedDtor is trivial so clearing and cpying it is okay.\n+// HasDeletedDtor is trivial so clearing and copying it is okay.\n // Relocation would bypass the deleted dtor and so it's diagnosed.\n \n struct HasDeletedDtor\n@@ -514,6 +553,7 @@ struct HasDeletedDtor\n \n void test (HasDeletedDtor *p, const HasDeletedDtor &x,\n \t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const signed char *ss, const char16_t *ws,\n \t   const int ia[])\n {\n   const int i = *ia;\n@@ -528,18 +568,24 @@ void test (HasDeletedDtor *p, const HasDeletedDtor &x,\n   T (memcpy, (p, q, sizeof *p));\n   T (memcpy, (p, s, sizeof *p));\n   T (memcpy, (p, b, sizeof *p));\n+  T (memcpy, (p, ss, sizeof *p));\n+  T (memcpy, (p, ws, sizeof *p));\n   T (memcpy, (p, ia, sizeof *p));\n \n   T (memmove, (p, &x, sizeof *p));\n   T (memmove, (p, q, sizeof *p));\n   T (memmove, (p, s, sizeof *p));\n   T (memmove, (p, b, sizeof *p));\n+  T (memmove, (p, ss, sizeof *p));\n+  T (memmove, (p, ws, sizeof *p));\n   T (memmove, (p, ia, sizeof *p));\n \n   T (mempcpy, (p, &x, sizeof *p));\n   T (mempcpy, (p, q, sizeof *p));\n   T (mempcpy, (p, s, sizeof *p));\n   T (mempcpy, (p, b, sizeof *p));\n+  T (mempcpy, (p, ss, sizeof *p));\n+  T (mempcpy, (p, ws, sizeof *p));\n   T (mempcpy, (p, ia, sizeof *p));\n \n   // Reallocating is diagnosed.\n@@ -564,6 +610,7 @@ private:\n \n void test (HasPrivateDtor *p, const HasPrivateDtor &x,\n \t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const signed char *ss, const char16_t *ws,\n \t   const int ia[])\n {\n   const int i = *ia;\n@@ -578,18 +625,24 @@ void test (HasPrivateDtor *p, const HasPrivateDtor &x,\n   T (memcpy, (p, q, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, b, sizeof *p));    // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ss, sizeof *p));   // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ws, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, &x, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, q, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, s, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, b, sizeof *p));   // { dg-warning \"memmove\" }\n+  T (memmove, (p, ss, sizeof *p));  // { dg-warning \"memmove\" }\n+  T (memmove, (p, ws, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, &x, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, q, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, b, sizeof *p));   // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ss, sizeof *p));  // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ws, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n \n   // Reallocating is diagnosed.\n@@ -608,6 +661,7 @@ struct HasCopyAssign { void operator= (HasCopyAssign&); };\n \n void test (HasCopyAssign *p, const HasCopyAssign &x,\n \t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const signed char *ss, const char16_t *ws,\n \t   const int ia[])\n {\n   const int i = *ia;\n@@ -626,18 +680,24 @@ void test (HasCopyAssign *p, const HasCopyAssign &x,\n   T (memcpy, (p, q, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, b, sizeof *p));    // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ss, sizeof *p));   // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ws, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, &x, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, q, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, s, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, b, sizeof *p));   // { dg-warning \"memmove\" }\n+  T (memmove, (p, ss, sizeof *p));  // { dg-warning \"memmove\" }\n+  T (memmove, (p, ws, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, &x, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, q, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, b, sizeof *p));   // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ss, sizeof *p));  // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ws, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n \n   // Reallocating is the same as calling memcpy.\n@@ -665,6 +725,7 @@ struct HasMoveAssign\n \n void test (HasMoveAssign *p, const HasMoveAssign &x,\n \t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const signed char *ss, const char16_t *ws,\n \t   const int ia[])\n {\n   const int i = *ia;\n@@ -683,18 +744,24 @@ void test (HasMoveAssign *p, const HasMoveAssign &x,\n   T (memcpy, (p, q, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, b, sizeof *p));    // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ss, sizeof *p));   // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ws, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, &x, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, q, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, s, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, b, sizeof *p));   // { dg-warning \"memmove\" }\n+  T (memmove, (p, ss, sizeof *p));  // { dg-warning \"memmove\" }\n+  T (memmove, (p, ws, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, &x, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, q, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, b, sizeof *p));   // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ss, sizeof *p));  // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ws, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n \n   // Reallocating is the same as calling memcpy.\n@@ -727,6 +794,7 @@ struct TrivialCopyHasMoveAssign\n \n void test (TrivialCopyHasMoveAssign *p, const TrivialCopyHasMoveAssign &x,\n \t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const signed char *ss, const char16_t *ws,\n \t   const int ia[])\n {\n   const int i = *ia;\n@@ -745,18 +813,24 @@ void test (TrivialCopyHasMoveAssign *p, const TrivialCopyHasMoveAssign &x,\n   T (memcpy, (p, q, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, b, sizeof *p));    // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ss, sizeof *p));   // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ws, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, &x, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, q, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, s, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, b, sizeof *p));   // { dg-warning \"memmove\" }\n+  T (memmove, (p, ss, sizeof *p));  // { dg-warning \"memmove\" }\n+  T (memmove, (p, ws, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, &x, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, q, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, b, sizeof *p));   // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ss, sizeof *p));  // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ws, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n \n   // Reallocating is the same as calling memcpy.\n@@ -786,6 +860,7 @@ struct TrivialMoveNontrivialCopyAssign\n void test (TrivialMoveNontrivialCopyAssign *p,\n \t   const TrivialMoveNontrivialCopyAssign &x,\n \t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const signed char *ss, const char16_t *ws,\n \t   const int ia[])\n {\n   const int i = *ia;\n@@ -804,18 +879,24 @@ void test (TrivialMoveNontrivialCopyAssign *p,\n   T (memcpy, (p, q, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, b, sizeof *p));    // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ss, sizeof *p));   // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ws, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, &x, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, q, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, s, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, b, sizeof *p));   // { dg-warning \"memmove\" }\n+  T (memmove, (p, ss, sizeof *p));  // { dg-warning \"memmove\" }\n+  T (memmove, (p, ws, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, &x, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, q, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, b, sizeof *p));   // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ss, sizeof *p));  // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ws, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n \n   // Reallocating is the same as calling memcpy.\n@@ -841,6 +922,7 @@ struct TrivialAssignRefOverload {\n \n void test (TrivialAssignRefOverload *p, const TrivialAssignRefOverload &x,\n \t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const signed char *ss, const char16_t *ws,\n \t   const int ia[])\n {\n   const int i = *ia;\n@@ -855,18 +937,24 @@ void test (TrivialAssignRefOverload *p, const TrivialAssignRefOverload &x,\n   T (memcpy, (p, q, sizeof *p));\n   T (memcpy, (p, s, sizeof *p));\n   T (memcpy, (p, b, sizeof *p));\n+  T (memcpy, (p, ss, sizeof *p));\n+  T (memcpy, (p, ws, sizeof *p));\n   T (memcpy, (p, ia, sizeof *p));\n \n   T (memmove, (p, &x, sizeof *p));\n   T (memmove, (p, q, sizeof *p));\n   T (memmove, (p, s, sizeof *p));\n   T (memmove, (p, b, sizeof *p));\n+  T (memmove, (p, ss, sizeof *p));\n+  T (memmove, (p, ws, sizeof *p));\n   T (memmove, (p, ia, sizeof *p));\n \n   T (mempcpy, (p, &x, sizeof *p));\n   T (mempcpy, (p, q, sizeof *p));\n   T (mempcpy, (p, s, sizeof *p));\n   T (mempcpy, (p, b, sizeof *p));\n+  T (mempcpy, (p, ss, sizeof *p));\n+  T (mempcpy, (p, ws, sizeof *p));\n   T (mempcpy, (p, ia, sizeof *p));\n \n   T (q = realloc, (p, 1));\n@@ -892,6 +980,7 @@ struct TrivialAssignCstRefOverload {\n void test (TrivialAssignCstRefOverload *p,\n \t   const TrivialAssignCstRefOverload &x,\n \t   const void *q, const unsigned char *s, std::byte *b,\n+\t   const signed char *ss, const char16_t *ws,\n \t   const int ia[])\n {\n   const int i = *ia;\n@@ -906,18 +995,24 @@ void test (TrivialAssignCstRefOverload *p,\n   T (memcpy, (p, q, sizeof *p));\n   T (memcpy, (p, s, sizeof *p));\n   T (memcpy, (p, b, sizeof *p));\n+  T (memcpy, (p, ss, sizeof *p));\n+  T (memcpy, (p, ws, sizeof *p));\n   T (memcpy, (p, ia, sizeof *p));\n \n   T (memmove, (p, &x, sizeof *p));\n   T (memmove, (p, q, sizeof *p));\n   T (memmove, (p, s, sizeof *p));\n   T (memmove, (p, b, sizeof *p));\n+  T (memmove, (p, ss, sizeof *p));\n+  T (memmove, (p, ws, sizeof *p));\n   T (memmove, (p, ia, sizeof *p));\n \n   T (mempcpy, (p, &x, sizeof *p));\n   T (mempcpy, (p, q, sizeof *p));\n   T (mempcpy, (p, s, sizeof *p));\n   T (mempcpy, (p, b, sizeof *p));\n+  T (mempcpy, (p, ss, sizeof *p));\n+  T (mempcpy, (p, ws, sizeof *p));\n   T (mempcpy, (p, ia, sizeof *p));\n \n   T (q = realloc, (p, 1));\n@@ -940,6 +1035,7 @@ struct TrivialRefHasVolRefAssign\n void test (TrivialRefHasVolRefAssign *p,\n \t   const TrivialRefHasVolRefAssign &x,\n \t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const signed char *ss, const char16_t *ws,\n \t   const int ia[])\n {\n   const int i = *ia;\n@@ -958,18 +1054,24 @@ void test (TrivialRefHasVolRefAssign *p,\n   T (memcpy, (p, q, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, b, sizeof *p));    // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ss, sizeof *p));   // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ws, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, &x, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, q, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, s, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, b, sizeof *p));   // { dg-warning \"memmove\" }\n+  T (memmove, (p, ss, sizeof *p));  // { dg-warning \"memmove\" }\n+  T (memmove, (p, ws, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, &x, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, q, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, b, sizeof *p));   // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ss, sizeof *p));  // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ws, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n \n   // Reallocating is the same as calling memcpy.\n@@ -991,6 +1093,7 @@ struct HasVolRefAssign {\n \n void test (HasVolRefAssign *p, const HasVolRefAssign &x,\n \t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const signed char *ss, const char16_t *ws,\n \t   const int ia[])\n {\n   const int i = *ia;\n@@ -1009,18 +1112,24 @@ void test (HasVolRefAssign *p, const HasVolRefAssign &x,\n   T (memcpy, (p, q, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, b, sizeof *p));    // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ss, sizeof *p));   // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ws, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, &x, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, q, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, s, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, b, sizeof *p));   // { dg-warning \"memmove\" }\n+  T (memmove, (p, ss, sizeof *p));  // { dg-warning \"memmove\" }\n+  T (memmove, (p, ws, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, &x, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, q, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, b, sizeof *p));   // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ss, sizeof *p));  // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ws, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n \n   // Reallocating is the same as calling memcpy.\n@@ -1040,6 +1149,7 @@ struct HasVirtuals { int i; virtual void foo (); };\n \n void test (HasVirtuals *p, const HasVirtuals &x,\n \t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const signed char *ss, const char16_t *ws,\n \t   const int ia[])\n {\n   const int i = *ia;\n@@ -1057,18 +1167,24 @@ void test (HasVirtuals *p, const HasVirtuals &x,\n   T (memcpy, (p, q, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, b, sizeof *p));    // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ss, sizeof *p));   // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ws, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, &x, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, q, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, s, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, b, sizeof *p));   // { dg-warning \"memmove\" }\n+  T (memmove, (p, ss, sizeof *p));  // { dg-warning \"memmove\" }\n+  T (memmove, (p, ws, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, &x, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, q, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, b, sizeof *p));   // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ss, sizeof *p));  // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ws, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n \n   // Reallocating is the same as calling memcpy.\n@@ -1089,6 +1205,7 @@ struct HasConstData { const char a[4]; };\n \n void test (HasConstData *p, const HasConstData &x,\n \t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const signed char *ss, const char16_t *ws,\n \t   const int ia[])\n {\n   const int i = *ia;\n@@ -1115,18 +1232,24 @@ void test (HasConstData *p, const HasConstData &x,\n   T (memcpy, (p, q, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, b, sizeof *p));    // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ss, sizeof *p));   // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ws, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, &x, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, q, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, s, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, b, sizeof *p));   // { dg-warning \"memmove\" }\n+  T (memmove, (p, ss, sizeof *p));  // { dg-warning \"memmove\" }\n+  T (memmove, (p, ws, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, &x, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, q, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, b, sizeof *p));   // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ss, sizeof *p));  // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ws, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n \n   // Reallocating is not diagnosed except in C++ 98 due to a bug.\n@@ -1147,6 +1270,7 @@ struct HasReference { int &ci; };\n \n void test (HasReference *p, const HasReference &x,\n \t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const signed char *ss, const char16_t *ws,\n \t   const int ia[])\n {\n   const int i = *ia;\n@@ -1181,19 +1305,27 @@ void test (HasReference *p, const HasReference &x,\n   T (memcpy, (p, s, n));            // { dg-warning \"memcpy\" }\n   T (memcpy, (p, b, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, b, n));            // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ss, sizeof *p));   // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ss, n));           // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ws, sizeof *p));   // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ws, n));           // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, n));           // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, &x, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, q, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, s, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, b, sizeof *p));   // { dg-warning \"memmove\" }\n+  T (memmove, (p, ss, sizeof *p));  // { dg-warning \"memmove\" }\n+  T (memmove, (p, ws, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, &x, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, q, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, b, sizeof *p));   // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ss, sizeof *p));  // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ws, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n \n   // Reallocating is not diagnosed because a type with a reference\n@@ -1218,6 +1350,7 @@ struct HasMemDataPtr { int HasMemDataPtr::*p; };\n \n void test (HasMemDataPtr *p, const HasMemDataPtr &x,\n \t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const signed char *ss, const char16_t *ws,\n \t   const int ia[])\n {\n   const int i = *ia;\n@@ -1243,19 +1376,27 @@ void test (HasMemDataPtr *p, const HasMemDataPtr &x,\n   T (memcpy, (p, s, n));\n   T (memcpy, (p, b, sizeof *p));\n   T (memcpy, (p, b, n));\n+  T (memcpy, (p, ss, sizeof *p));\n+  T (memcpy, (p, ss, n));\n+  T (memcpy, (p, ws, sizeof *p));\n+  T (memcpy, (p, ws, n));\n   T (memcpy, (p, ia, sizeof *p));\n   T (memcpy, (p, ia, n));\n \n   T (memmove, (p, &x, sizeof *p));\n   T (memmove, (p, q, sizeof *p));\n   T (memmove, (p, s, sizeof *p));\n   T (memmove, (p, b, sizeof *p));\n+  T (memmove, (p, ss, sizeof *p));\n+  T (memmove, (p, ws, sizeof *p));\n   T (memmove, (p, ia, sizeof *p));\n \n   T (mempcpy, (p, &x, sizeof *p));\n   T (mempcpy, (p, q, sizeof *p));\n   T (mempcpy, (p, s, sizeof *p));\n   T (mempcpy, (p, b, sizeof *p));\n+  T (mempcpy, (p, ss, sizeof *p));\n+  T (mempcpy, (p, ws, sizeof *p));\n   T (mempcpy, (p, ia, sizeof *p));\n \n   // Reallocating is the same as calling memcpy.\n@@ -1276,6 +1417,7 @@ struct HasSomePrivateData { char a[2]; private: char b[2]; };\n \n void test (HasSomePrivateData *p, const HasSomePrivateData &x,\n \t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const signed char *ss, const char16_t *ws,\n \t   const int ia[])\n {\n   const int i = *ia;\n@@ -1298,6 +1440,10 @@ void test (HasSomePrivateData *p, const HasSomePrivateData &x,\n   T (memcpy, (p, q, sizeof *p));\n   T (memcpy, (p, s, sizeof *p));\n   T (memcpy, (p, b, sizeof *p));\n+  T (memcpy, (p, ss, sizeof *p));   // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ss, n));           // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ws, sizeof *p));   // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ws, n));           // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, n));           // { dg-warning \"memcpy\" }\n \n@@ -1307,6 +1453,10 @@ void test (HasSomePrivateData *p, const HasSomePrivateData &x,\n   T (memmove, (p, q, sizeof *p));\n   T (memmove, (p, s, sizeof *p));\n   T (memmove, (p, b, sizeof *p));\n+  T (memmove, (p, ss, sizeof *p));  // { dg-warning \"memmove\" }\n+  T (memmove, (p, ss, n));          // { dg-warning \"memmove\" }\n+  T (memmove, (p, ws, sizeof *p));  // { dg-warning \"memmove\" }\n+  T (memmove, (p, ws, n));          // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, n));          // { dg-warning \"memmove\" }\n \n@@ -1319,6 +1469,10 @@ void test (HasSomePrivateData *p, const HasSomePrivateData &x,\n   T (mempcpy, (p, s, n));\n   T (mempcpy, (p, b, sizeof *p));\n   T (mempcpy, (p, b, n));\n+  T (mempcpy, (p, ss, sizeof *p));  // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ss, n));          // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ws, sizeof *p));  // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ws, n));          // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, n));          // { dg-warning \"mempcpy\" }\n \n@@ -1342,6 +1496,7 @@ struct HasSomeProtectedData { char a[2]; protected: char b[2]; };\n \n void test (HasSomeProtectedData *p, const HasSomeProtectedData &x,\n \t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const signed char *ss, const char16_t *ws,\n \t   const int ia[])\n {\n   const int i = *ia;\n@@ -1364,6 +1519,10 @@ void test (HasSomeProtectedData *p, const HasSomeProtectedData &x,\n   T (memcpy, (p, q, sizeof *p));\n   T (memcpy, (p, s, sizeof *p));\n   T (memcpy, (p, b, sizeof *p));\n+  T (memcpy, (p, ss, sizeof *p));   // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ss, n));           // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ws, sizeof *p));   // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ws, n));           // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, n));           // { dg-warning \"memcpy\" }\n \n@@ -1373,6 +1532,10 @@ void test (HasSomeProtectedData *p, const HasSomeProtectedData &x,\n   T (memmove, (p, q, sizeof *p));\n   T (memmove, (p, s, sizeof *p));\n   T (memmove, (p, b, sizeof *p));\n+  T (memmove, (p, ss, sizeof *p));  // { dg-warning \"memmove\" }\n+  T (memmove, (p, ss, n));          // { dg-warning \"memmove\" }\n+  T (memmove, (p, ws, sizeof *p));  // { dg-warning \"memmove\" }\n+  T (memmove, (p, ws, n));          // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, n));          // { dg-warning \"memmove\" }\n \n@@ -1385,6 +1548,10 @@ void test (HasSomeProtectedData *p, const HasSomeProtectedData &x,\n   T (mempcpy, (p, s, n));\n   T (mempcpy, (p, b, sizeof *p));\n   T (mempcpy, (p, b, n));\n+  T (mempcpy, (p, ss, sizeof *p));  // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ss, n));          // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ws, sizeof *p));  // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ws, n));          // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, n));          // { dg-warning \"mempcpy\" }\n \n@@ -1408,6 +1575,7 @@ struct HasAllPrivateData { private: char a[4]; };\n \n void test (HasAllPrivateData *p, const HasAllPrivateData &x,\n \t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const signed char *ss, const char16_t *ws,\n \t   const int ia[])\n {\n   const int i = *ia;\n@@ -1430,6 +1598,10 @@ void test (HasAllPrivateData *p, const HasAllPrivateData &x,\n   T (memcpy, (p, q, sizeof *p));\n   T (memcpy, (p, s, sizeof *p));\n   T (memcpy, (p, b, sizeof *p));\n+  T (memcpy, (p, ss, sizeof *p));   // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ss, n));           // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ws, sizeof *p));   // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ws, n));           // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, n));           // { dg-warning \"memcpy\" }\n \n@@ -1439,6 +1611,10 @@ void test (HasAllPrivateData *p, const HasAllPrivateData &x,\n   T (memmove, (p, q, sizeof *p));\n   T (memmove, (p, s, sizeof *p));\n   T (memmove, (p, b, sizeof *p));\n+  T (memmove, (p, ss, sizeof *p));  // { dg-warning \"memmove\" }\n+  T (memmove, (p, ss, n));          // { dg-warning \"memmove\" }\n+  T (memmove, (p, ws, sizeof *p));  // { dg-warning \"memmove\" }\n+  T (memmove, (p, ws, n));          // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, n));          // { dg-warning \"memmove\" }\n \n@@ -1451,6 +1627,10 @@ void test (HasAllPrivateData *p, const HasAllPrivateData &x,\n   T (mempcpy, (p, s, n));\n   T (mempcpy, (p, b, sizeof *p));\n   T (mempcpy, (p, b, n));\n+  T (mempcpy, (p, ss, sizeof *p));  // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ss, n));          // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ws, sizeof *p));  // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ws, n));          // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, n));          // { dg-warning \"mempcpy\" }\n \n@@ -1474,6 +1654,7 @@ struct HasAllProtectedData { protected: char a[4]; };\n \n void test (HasAllProtectedData *p, const HasAllProtectedData &x,\n \t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const signed char *ss, const char16_t *ws,\n \t   const int ia[])\n {\n   const int i = *ia;\n@@ -1496,6 +1677,10 @@ void test (HasAllProtectedData *p, const HasAllProtectedData &x,\n   T (memcpy, (p, q, sizeof *p));\n   T (memcpy, (p, s, sizeof *p));\n   T (memcpy, (p, b, sizeof *p));\n+  T (memcpy, (p, ss, sizeof *p));   // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ss, n));           // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ws, sizeof *p));   // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, ws, n));           // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, n));           // { dg-warning \"memcpy\" }\n \n@@ -1505,6 +1690,10 @@ void test (HasAllProtectedData *p, const HasAllProtectedData &x,\n   T (memmove, (p, q, sizeof *p));\n   T (memmove, (p, s, sizeof *p));\n   T (memmove, (p, b, sizeof *p));\n+  T (memmove, (p, ss, sizeof *p));  // { dg-warning \"memmove\" }\n+  T (memmove, (p, ss, n));          // { dg-warning \"memmove\" }\n+  T (memmove, (p, ws, sizeof *p));  // { dg-warning \"memmove\" }\n+  T (memmove, (p, ws, n));          // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, n));          // { dg-warning \"memmove\" }\n \n@@ -1517,6 +1706,10 @@ void test (HasAllProtectedData *p, const HasAllProtectedData &x,\n   T (mempcpy, (p, s, n));\n   T (mempcpy, (p, b, sizeof *p));\n   T (mempcpy, (p, b, n));\n+  T (mempcpy, (p, ss, sizeof *p));  // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ss, n));          // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ws, sizeof *p));  // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ws, n));          // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, n));          // { dg-warning \"mempcpy\" }\n \n@@ -1543,6 +1736,7 @@ private:\n \n void test (HasDefaultPrivateAssign *p, const HasDefaultPrivateAssign &x,\n \t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const signed char *ss, const char16_t *ws,\n \t   const int ia[])\n {\n   const int i = *ia;\n@@ -1596,8 +1790,14 @@ void test (HasDefaultPrivateAssign *p, const HasDefaultPrivateAssign &x,\n   T (mempcpy, (p, q, 3));   // { dg-warning \"mempcpy\" } */\n \n   // Otherwise, copying from an object of an unrelated type is diagnosed.\n+  T (memcpy, (p, ss, sizeof *p));  // { dg-warning \"writing to an object of type .struct HasDefaultPrivateAssign. with (deleted|no trivial) copy-assignment.\" }\n+  T (memcpy, (p, ws, sizeof *p));  // { dg-warning \"writing to an object of type .struct HasDefaultPrivateAssign. with (deleted|no trivial) copy-assignment.\" }\n   T (memcpy, (p, ia, sizeof *p));  // { dg-warning \"writing to an object of type .struct HasDefaultPrivateAssign. with (deleted|no trivial) copy-assignment.\" }\n+  T (memmove, (p, ss, sizeof *p)); // { dg-warning \"memmove\" }\n+  T (memmove, (p, ws, sizeof *p)); // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p)); // { dg-warning \"memmove\" }\n+  T (mempcpy, (p, ss, sizeof *p)); // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ws, sizeof *p)); // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p)); // { dg-warning \"mempcpy\" }\n \n   // Reallocating is the same as calling memcpy.\n@@ -1621,6 +1821,7 @@ private:\n \n void test (HasDefaultDeletedAssign *p, const HasDefaultDeletedAssign &x,\n \t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const signed char *ss, const char16_t *ws,\n \t   const int ia[])\n {\n   const int i = *ia;\n@@ -1674,8 +1875,14 @@ void test (HasDefaultDeletedAssign *p, const HasDefaultDeletedAssign &x,\n   T (mempcpy, (p, q, 3));   // { dg-warning \"mempcpy\" } */\n \n   // Otherwise, copying from an object of an unrelated type is diagnosed.\n+  T (memcpy, (p, ss, sizeof *p));  // { dg-warning \"writing to an object of type .struct HasDefaultDeletedAssign. with (deleted|no trivial) copy-assignment.\" }\n+  T (memcpy, (p, ws, sizeof *p));  // { dg-warning \"writing to an object of type .struct HasDefaultDeletedAssign. with (deleted|no trivial) copy-assignment.\" }\n   T (memcpy, (p, ia, sizeof *p));  // { dg-warning \"writing to an object of type .struct HasDefaultDeletedAssign. with (deleted|no trivial) copy-assignment.\" }\n+  T (memmove, (p, ss, sizeof *p)); // { dg-warning \"memmove\" }\n+  T (memmove, (p, ws, sizeof *p)); // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p)); // { dg-warning \"memmove\" }\n+  T (mempcpy, (p, ss, sizeof *p)); // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, ws, sizeof *p)); // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p)); // { dg-warning \"mempcpy\" }\n \n   // Reallocating is the same as calling memcpy."}]}