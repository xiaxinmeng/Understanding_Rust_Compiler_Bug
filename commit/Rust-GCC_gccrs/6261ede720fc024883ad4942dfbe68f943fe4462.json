{"sha": "6261ede720fc024883ad4942dfbe68f943fe4462", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI2MWVkZTcyMGZjMDI0ODgzYWQ0OTQyZGZiZTY4Zjk0M2ZlNDQ2Mg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-07-31T10:27:42Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-07-31T10:27:42Z"}, "message": "pa.c (compute_frame_size): Use STARTINg_FRAME_OFFSET instead of depending on a magic constant value.\n\n        * pa.c (compute_frame_size): Use STARTINg_FRAME_OFFSET instead\n        of depending on a magic constant value.  Update comments.\n        (hppa_expand_prologue): Similarly.\n\nFrom-SVN: r28356", "tree": {"sha": "0120ee57e32ca55e7fbb0d80115e69ccb7c54fd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0120ee57e32ca55e7fbb0d80115e69ccb7c54fd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6261ede720fc024883ad4942dfbe68f943fe4462", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6261ede720fc024883ad4942dfbe68f943fe4462", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6261ede720fc024883ad4942dfbe68f943fe4462", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6261ede720fc024883ad4942dfbe68f943fe4462/comments", "author": null, "committer": null, "parents": [{"sha": "1984b4afd600495e514daa06a08cd1f9ae44829a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1984b4afd600495e514daa06a08cd1f9ae44829a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1984b4afd600495e514daa06a08cd1f9ae44829a"}], "stats": {"total": 33, "additions": 29, "deletions": 4}, "files": [{"sha": "4e518264c1425f93d729481e7aa2db4c10fe612c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6261ede720fc024883ad4942dfbe68f943fe4462/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6261ede720fc024883ad4942dfbe68f943fe4462/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6261ede720fc024883ad4942dfbe68f943fe4462", "patch": "@@ -1,5 +1,9 @@\n Sat Jul 31 04:10:01 1999  Jeffrey A Law  (law@cygnus.com)\n \n+\t* pa.c (compute_frame_size): Use STARTINg_FRAME_OFFSET instead\n+\tof depending on a magic constant value.  Update comments.\n+\t(hppa_expand_prologue): Similarly.\n+\n \t* pa.md (reload_indi, reload_outdi): Allow any register for the\n \toriginal reload register.\n "}, {"sha": "209976d473df41d6819fc399f238cb38c428e201", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6261ede720fc024883ad4942dfbe68f943fe4462/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6261ede720fc024883ad4942dfbe68f943fe4462/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=6261ede720fc024883ad4942dfbe68f943fe4462", "patch": "@@ -2593,27 +2593,40 @@ compute_frame_size (size, fregs_live)\n   extern int current_function_outgoing_args_size;\n   int i, fsize;\n \n-  /* 8 is space for frame pointer + filler. If any frame is allocated\n-     we need to add this in because of STARTING_FRAME_OFFSET. */\n-  fsize = size + (size || frame_pointer_needed ? 8 : 0);\n+  /* Space for frame pointer + filler. If any frame is allocated\n+     we need to add this in because of STARTING_FRAME_OFFSET.\n \n+     Similar code also appears in hppa_expand_prologue.  Change both\n+     of them at the same time.  */\n+  fsize = size + (size || frame_pointer_needed ? STARTING_FRAME_OFFSET : 0);\n+\n+  /* Account for space used by the callee general register saves.  */\n   for (i = 18; i >= 3; i--)\n     if (regs_ever_live[i])\n       fsize += UNITS_PER_WORD;\n \n   /* Round the stack.  */\n   fsize = (fsize + 7) & ~7;\n \n+  /* Account for space used by the callee floating point register saves.  */\n   for (i = 66; i >= 48; i -= 2)\n     if (regs_ever_live[i] || regs_ever_live[i + 1])\n       {\n \tif (fregs_live)\n \t  *fregs_live = 1;\n \n+\t/* We always save both halves of the FP register, so always\n+\t   increment the frame size by 8 bytes.  */\n \tfsize += 8;\n       }\n \n+  /* The various ABIs include space for the outgoing parameters in the\n+     size of the current function's stack frame.  */\n   fsize += current_function_outgoing_args_size;\n+\n+  /* Allocate space for the fixed frame marker.  This space must be\n+     allocated for any function that makes calls or otherwise allocates\n+     stack space.  */\n   if (! leaf_function_p () || fsize)\n     fsize += 32;\n   return (fsize + STACK_BOUNDARY - 1) & ~(STACK_BOUNDARY - 1);\n@@ -2703,7 +2716,15 @@ hppa_expand_prologue()\n   gr_saved = 0;\n   fr_saved = 0;\n   save_fregs = 0;\n-  local_fsize =  size + (size || frame_pointer_needed ? 8 : 0);\n+\n+  /* Allocate space for frame pointer + filler. If any frame is allocated\n+     we need to add this in because of STARTING_FRAME_OFFSET.\n+\n+     Similar code also appears in compute_frame_size.  Change both\n+     of them at the same time.  */\n+  local_fsize = size + (size || frame_pointer_needed\n+\t\t\t? STARTING_FRAME_OFFSET : 0);\n+\n   actual_fsize = compute_frame_size (size, &save_fregs);\n \n   /* Compute a few things we will use often.  */"}]}