{"sha": "35acd3f28278072c4753f582ecdc1d49935b1d25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVhY2QzZjI4Mjc4MDcyYzQ3NTNmNTgyZWNkYzFkNDk5MzViMWQyNQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchell@usa.net", "date": "1998-05-20T23:28:21Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-05-20T23:28:21Z"}, "message": "class.c (delete_duplicate_fields_1): Use DECL_DECLARES_TYPE_P to look for type declarations.\n\n\t* class.c (delete_duplicate_fields_1): Use DECL_DECLARES_TYPE_P\n\tto look for type declarations.\n\t(finish_struct): Deal with templates on the CLASSTYPE_TAGS list.\n\t* cp-tree.h (DECL_DECLARES_TYPE_P): New macro.\n\t(finish_member_class_template): Declare.\n\t* decl.c (pushtag): Put member class templates on the\n\tCLASSTYPE_TAGS list, just as for ordinary member classes.\n\t(pushdecl_class_level): Use DECL_DECLARES_TYPE_P.\n\t(lookup_tag): Look for IDENTIFIER_CLASS_VALUEs, just as with\n\tIDENTIFIER_NAMESPACE_VALUEs.\n\t* parse.y (component_decl): Move code to ...\n\t* semantics.c (finish_member_class_template): New function.\n\tDon't put member class templates on the list of components for a\n\tclass.\n\t* pt.c (classtype_mangled_name): Don't try DECL_CONTEXT on types.\n\tIn fact, don't use DECL_CONTEXT at all here.\n\nFrom-SVN: r19918", "tree": {"sha": "e68e5971c36459908cfeda440454fbae4b33f8b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e68e5971c36459908cfeda440454fbae4b33f8b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35acd3f28278072c4753f582ecdc1d49935b1d25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35acd3f28278072c4753f582ecdc1d49935b1d25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35acd3f28278072c4753f582ecdc1d49935b1d25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35acd3f28278072c4753f582ecdc1d49935b1d25/comments", "author": null, "committer": null, "parents": [{"sha": "2a3edac9ad6f035784b1eeccfa6fc7d82248077f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a3edac9ad6f035784b1eeccfa6fc7d82248077f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a3edac9ad6f035784b1eeccfa6fc7d82248077f"}], "stats": {"total": 1710, "additions": 901, "deletions": 809}, "files": [{"sha": "4d991fdaab705aea6222cbcaa080f75b54f6e0d1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35acd3f28278072c4753f582ecdc1d49935b1d25/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35acd3f28278072c4753f582ecdc1d49935b1d25/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=35acd3f28278072c4753f582ecdc1d49935b1d25", "patch": "@@ -1,3 +1,23 @@\n+1998-05-20  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* class.c (delete_duplicate_fields_1): Use DECL_DECLARES_TYPE_P\n+\tto look for type declarations.\n+\t(finish_struct): Deal with templates on the CLASSTYPE_TAGS list.\n+\t* cp-tree.h (DECL_DECLARES_TYPE_P): New macro.\n+\t(finish_member_class_template): Declare.\n+\t* decl.c (pushtag): Put member class templates on the\n+\tCLASSTYPE_TAGS list, just as for ordinary member classes.\n+\t(pushdecl_class_level): Use DECL_DECLARES_TYPE_P.\n+\t(lookup_tag): Look for IDENTIFIER_CLASS_VALUEs, just as with\n+\tIDENTIFIER_NAMESPACE_VALUEs. \n+\t* parse.y (component_decl): Move code to ...\n+\t* semantics.c (finish_member_class_template): New function.  \n+\tDon't put member class templates on the list of components for a\n+\tclass. \n+\t* parse.c: Regenerated.\n+\t* pt.c (classtype_mangled_name): Don't try DECL_CONTEXT on types.\n+\tIn fact, don't use DECL_CONTEXT at all here.\n+\n 1998-05-20  Martin von Loewis  <loewis@informatik.hu-berlin.de>\n \n \t* decl.c (record_unknown_type): New function."}, {"sha": "36eb58922a526ba672efa3da7c9605333ef40ff4", "filename": "gcc/cp/class.c", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35acd3f28278072c4753f582ecdc1d49935b1d25/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35acd3f28278072c4753f582ecdc1d49935b1d25/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=35acd3f28278072c4753f582ecdc1d49935b1d25", "patch": "@@ -1240,15 +1240,15 @@ delete_duplicate_fields_1 (field, fields)\n \t\t\t   || TREE_CODE (x) == CONST_DECL)\n \t\t    cp_error_at (\"duplicate field `%D' (as enum and non-enum)\",\n \t\t\t\tx);\n-\t\t  else if (TREE_CODE (field) == TYPE_DECL\n-\t\t\t   && TREE_CODE (x) == TYPE_DECL)\n+\t\t  else if (DECL_DECLARES_TYPE_P (field)\n+\t\t\t   && DECL_DECLARES_TYPE_P (x))\n \t\t    {\n-\t\t      if (TREE_TYPE (field) == TREE_TYPE (x))\n+\t\t      if (comptypes (TREE_TYPE (field), TREE_TYPE (x), 1))\n \t\t\tcontinue;\n \t\t      cp_error_at (\"duplicate nested type `%D'\", x);\n \t\t    }\n-\t\t  else if (TREE_CODE (field) == TYPE_DECL\n-\t\t\t   || TREE_CODE (x) == TYPE_DECL)\n+\t\t  else if (DECL_DECLARES_TYPE_P (field)\n+\t\t\t   || DECL_DECLARES_TYPE_P (x))\n \t\t    {\n \t\t      /* Hide tag decls.  */\n \t\t      if ((TREE_CODE (field) == TYPE_DECL\n@@ -4392,9 +4392,14 @@ finish_struct (t, list_of_fieldlists, attributes, warn_anon)\n       CLASSTYPE_TAGS (t) = x = nreverse (CLASSTYPE_TAGS (t));\n       while (x)\n \t{\n+\t  tree tag_type = TREE_VALUE (x);\n \t  tree tag = TYPE_MAIN_DECL (TREE_VALUE (x));\n \n-\t  TREE_NONLOCAL_FLAG (TREE_VALUE (x)) = 0;\n+\t  if (IS_AGGR_TYPE_CODE (TREE_CODE (tag_type))\n+\t      && CLASSTYPE_IS_TEMPLATE (tag_type))\n+\t    tag = CLASSTYPE_TI_TEMPLATE (tag_type);\n+\n+\t  TREE_NONLOCAL_FLAG (tag_type) = 0;\n \t  x = TREE_CHAIN (x);\n \t  last_x = chainon (last_x, tag);\n \t}\n@@ -4744,10 +4749,16 @@ pushclass (type, modify)\n \n       for (tags = CLASSTYPE_TAGS (type); tags; tags = TREE_CHAIN (tags))\n \t{\n-\t  TREE_NONLOCAL_FLAG (TREE_VALUE (tags)) = 1;\n+\t  tree tag_type = TREE_VALUE (tags);\n+\n+\t  TREE_NONLOCAL_FLAG (tag_type) = 1;\n \t  if (! TREE_PURPOSE (tags))\n \t    continue;\n-\t  pushtag (TREE_PURPOSE (tags), TREE_VALUE (tags), 0);\n+\t  if (! (IS_AGGR_TYPE_CODE (TREE_CODE (tag_type))\n+\t\t && CLASSTYPE_IS_TEMPLATE (tag_type)))\n+\t    pushtag (TREE_PURPOSE (tags), tag_type, 0);\n+\t  else\n+\t    pushdecl_class_level (CLASSTYPE_TI_TEMPLATE (tag_type));\n \t}\n \n       current_function_decl = this_fndecl;"}, {"sha": "abcd31c514dee3672d8f52d7991ae8b25b0b84b5", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35acd3f28278072c4753f582ecdc1d49935b1d25/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35acd3f28278072c4753f582ecdc1d49935b1d25/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=35acd3f28278072c4753f582ecdc1d49935b1d25", "patch": "@@ -737,6 +737,10 @@ struct lang_type\n #define SET_CLASSTYPE_MARKED6(NODE)\t(CLASSTYPE_MARKED6(NODE) = 1)\n #define CLEAR_CLASSTYPE_MARKED6(NODE)\t(CLASSTYPE_MARKED6(NODE) = 0)\n \n+/* A list of the nested tag-types (class, struct, union, or enum)\n+   found within this class.  The TREE_PURPOSE of each node is the name\n+   of the type; the TREE_VALUE is the type itself.  This list includes\n+   nested member class templates.  */\n #define CLASSTYPE_TAGS(NODE)\t\t(TYPE_LANG_SPECIFIC(NODE)->tags)\n \n /* If this class has any bases, this is the number of the base class from\n@@ -1474,6 +1478,10 @@ extern int flag_new_for_scope;\n    && TREE_CODE (DECL_TEMPLATE_RESULT (NODE)) == TYPE_DECL \\\n    && !DECL_TEMPLATE_TEMPLATE_PARM_P (NODE))\n \n+/* Nonzero if NODE which declares a type.  */\n+#define DECL_DECLARES_TYPE_P(NODE) \\\n+  (TREE_CODE (NODE) == TYPE_DECL || DECL_CLASS_TEMPLATE_P (NODE))\n+\n /* A `primary' template is one that has its own template header.  A\n    member function of a class template is a template, but not primary.\n    A member template is primary.  Friend templates are primary, too.  */\n@@ -2690,6 +2698,7 @@ extern tree begin_class_definition              PROTO((tree));\n extern tree finish_class_definition             PROTO((tree, tree, tree, int));\n extern void finish_default_args                 PROTO((void));\n extern void begin_inline_definitions            PROTO((void));\n+extern tree finish_member_class_template        PROTO((tree, tree));\n \n /* in sig.c */\n extern tree build_signature_pointer_type\tPROTO((tree, int, int));"}, {"sha": "94de1dabcea3f7392585648753c9df410c575644", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35acd3f28278072c4753f582ecdc1d49935b1d25/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35acd3f28278072c4753f582ecdc1d49935b1d25/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=35acd3f28278072c4753f582ecdc1d49935b1d25", "patch": "@@ -2303,8 +2303,19 @@ pushtag (name, type, globalize)\n \t\t if appropriate.  */ \n \t      if (!globalize && b->pseudo_global &&\n \t\t  b->level_chain->parm_flag == 2)\n-\t\tpushdecl_with_scope (CLASSTYPE_TI_TEMPLATE (type),\n-\t\t\t\t     b->level_chain);\n+\t\t{\n+\t\t  pushdecl_with_scope (CLASSTYPE_TI_TEMPLATE (type),\n+\t\t\t\t       b->level_chain);\n+\t\t  /* Put this tag on the list of tags for the class,\n+\t\t     since that won't happen below because B is not\n+\t\t     the class binding level, but is instead the\n+\t\t     pseudo-global level.  */\n+\t\t  b->level_chain->tags = \n+\t\t    saveable_tree_cons (name, type, b->level_chain->tags);\n+\t\t  TREE_NONLOCAL_FLAG (type) = 1;\n+\t\t  if (TYPE_SIZE (current_class_type) == NULL_TREE)\n+\t\t    CLASSTYPE_TAGS (current_class_type) = b->level_chain->tags;\n+\t\t}\n \t    }\n \n \t  if (b->parm_flag == 2)\n@@ -3756,7 +3767,7 @@ pushdecl_class_level (x)\n \t      /* Don't complain about inherited names.  */\n \t      && id_in_current_class (name)\n \t      /* Or shadowed tags.  */\n-\t      && !(TREE_CODE (icv) == TYPE_DECL\n+\t      && !(DECL_DECLARES_TYPE_P (icv)\n \t\t   && DECL_CONTEXT (icv) == current_class_type))\n \t    {\n \t      cp_error (\"declaration of identifier `%D' as `%#D'\", name, x);\n@@ -4469,9 +4480,11 @@ lookup_tag (form, name, binding_level, thislevel_only)\n \t{\n \t  if (level->pseudo_global)\n \t    {\n-\t      tree t = IDENTIFIER_NAMESPACE_VALUE (name);\n-\t      if (t && TREE_CODE (t) == TEMPLATE_DECL\n-\t\t  && TREE_CODE (DECL_TEMPLATE_RESULT (t)) == TYPE_DECL)\n+\t      tree t = IDENTIFIER_CLASS_VALUE (name);\n+\t      if (t && DECL_CLASS_TEMPLATE_P (t))\n+\t\treturn TREE_TYPE (t);\n+\t      t = IDENTIFIER_NAMESPACE_VALUE (name);\n+\t      if (t && DECL_CLASS_TEMPLATE_P (t))\n \t\treturn TREE_TYPE (t);\n \t    }\n \t  return NULL_TREE;"}, {"sha": "2fa5fdfbc19f60a7a3c3bc00b51dfc16afcaf9fe", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 777, "deletions": 785, "changes": 1562, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35acd3f28278072c4753f582ecdc1d49935b1d25/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35acd3f28278072c4753f582ecdc1d49935b1d25/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=35acd3f28278072c4753f582ecdc1d49935b1d25"}, {"sha": "ac2f5269fb0745c3cbabbd59e8281129ea55c280", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35acd3f28278072c4753f582ecdc1d49935b1d25/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35acd3f28278072c4753f582ecdc1d49935b1d25/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=35acd3f28278072c4753f582ecdc1d49935b1d25", "patch": "@@ -2396,15 +2396,7 @@ component_decl:\n         | template_header component_decl\n                 { $$ = finish_member_template_decl ($1, $2); }\n \t| template_header typed_declspecs ';'\n-                {\n-\t\t  note_list_got_semicolon ($2.t);\n-\t\t  grok_x_components ($2.t, NULL_TREE); \n-\t\t  if (TYPE_CONTEXT (TREE_VALUE ($2.t)) != current_class_type)\n-\t\t    /* The component was in fact a friend\n-\t\t       declaration.  */\n-\t\t    $2.t = NULL_TREE;\n-\t\t  $$ = finish_member_template_decl ($1, $2.t);\n-\t\t}\n+                { $$ = finish_member_class_template ($1, $2.t); }\n \t;\n \n component_decl_1:"}, {"sha": "7550271cbb05fc96ee2afa702bb7370bbd1f581e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35acd3f28278072c4753f582ecdc1d49935b1d25/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35acd3f28278072c4753f582ecdc1d49935b1d25/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=35acd3f28278072c4753f582ecdc1d49935b1d25", "patch": "@@ -2733,10 +2733,19 @@ classtype_mangled_name (t)\n       && PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (t)))\n     {\n       tree name = DECL_NAME (CLASSTYPE_TI_TEMPLATE (t));\n+      /* We do not pass in the context here since that is only needed\n+\t when mangling the name of instantiations, not the primary\n+\t template declaration.  In reality, it should not be needed\n+\t then either, but the way lookup_template_class operates\n+\t requires the context for the moment.  In the long run,\n+\t lookup_template_class should not be looking for existing\n+\t instantiations by matching mangled names, but rather by\n+\t matching the templates, and then scanning the instantiation\n+\t list.  */\n       char *mangled_name = mangle_class_name_for_template\n \t(IDENTIFIER_POINTER (name),\n \t DECL_INNERMOST_TEMPLATE_PARMS (CLASSTYPE_TI_TEMPLATE (t)),\n-\t CLASSTYPE_TI_ARGS (t), DECL_CONTEXT (t));\n+\t CLASSTYPE_TI_ARGS (t), NULL_TREE);\n       tree id = get_identifier (mangled_name);\n       IDENTIFIER_TEMPLATE (id) = name;\n       return id;"}, {"sha": "4ee2de4b6ddfad3830e732f272727d9101e212f3", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35acd3f28278072c4753f582ecdc1d49935b1d25/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35acd3f28278072c4753f582ecdc1d49935b1d25/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=35acd3f28278072c4753f582ecdc1d49935b1d25", "patch": "@@ -1337,3 +1337,25 @@ begin_inline_definitions ()\n   /* Undo the begin_tree in begin_class_definition.  */\n   end_tree ();\n }\n+\n+/* Finish processing the declaration of a member class template\n+   TYPES whose template parameters are given by PARMS.  */\n+\n+tree\n+finish_member_class_template (parms, types)\n+     tree parms;\n+     tree types;\n+{\n+  note_list_got_semicolon (types);\n+  grok_x_components (types, NULL_TREE); \n+  if (TYPE_CONTEXT (TREE_VALUE (types)) != current_class_type)\n+    /* The component was in fact a friend declaration.  We avoid\n+       finish_member_template_decl performing certain checks by\n+       unsetting TYPES.  */\n+    types = NULL_TREE;\n+  finish_member_template_decl (parms, types);\n+  /* As with other component type declarations, we do\n+     not store the new DECL on the list of\n+     component_decls.  */\n+  return NULL_TREE;\n+}"}, {"sha": "1deb38054cccf0a30a356f721a056f0e7be8be08", "filename": "gcc/testsuite/g++.old-deja/g++.pt/memclass10.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35acd3f28278072c4753f582ecdc1d49935b1d25/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemclass10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35acd3f28278072c4753f582ecdc1d49935b1d25/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemclass10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemclass10.C?ref=35acd3f28278072c4753f582ecdc1d49935b1d25", "patch": "@@ -0,0 +1,10 @@\n+// Build don't link:\n+\n+struct S1\n+{\n+  template <class T>\n+  struct S2 {}; // ERROR - previous definition\n+\n+  template <class T>\n+  struct S2 {}; // ERROR - redefinition \n+};"}, {"sha": "6eee67a6e3deda46ea8ed9d352328803ef142f08", "filename": "gcc/testsuite/g++.old-deja/g++.pt/memclass11.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35acd3f28278072c4753f582ecdc1d49935b1d25/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemclass11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35acd3f28278072c4753f582ecdc1d49935b1d25/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemclass11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemclass11.C?ref=35acd3f28278072c4753f582ecdc1d49935b1d25", "patch": "@@ -0,0 +1,14 @@\n+// Build don't link:\n+\n+struct S1\n+{\n+  template <class T>\n+  struct S2;\n+\n+  template <class T>\n+  struct S2 {\n+    enum E { a };\n+  };\n+};\n+\n+int i = (int) S1::S2<double>::a;"}]}