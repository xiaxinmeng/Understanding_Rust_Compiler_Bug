{"sha": "a646adedf047f2ce932c516bc249b788f4947356", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY0NmFkZWRmMDQ3ZjJjZTkzMmM1MTZiYzI0OWI3ODhmNDk0NzM1Ng==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-03-28T14:05:48Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-03-28T14:05:48Z"}, "message": "i386.h (X86_TUNE_PROMOTE_HIMODE_IMUL): New tuning option.\n\n        * config/i386/i386.h (X86_TUNE_PROMOTE_HIMODE_IMUL): New tuning\n        option.\n        (TARGET_TUNE_PROMOTE_HIMODE_IMUL): New define. Use new tuning option.\n        * config/i386/i386.c (ix86_tune_features): Initialize new\n        tuning option.\n        * config/i386/predicates.md (promotable_binary_operator): Use\n        TARGET_TUNE_PROMOTE_HIMODE_IMUL.\n\nFrom-SVN: r123301", "tree": {"sha": "8cccb87bcfb81f7b80d23702d87d23bb74fbcd0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cccb87bcfb81f7b80d23702d87d23bb74fbcd0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a646adedf047f2ce932c516bc249b788f4947356", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a646adedf047f2ce932c516bc249b788f4947356", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a646adedf047f2ce932c516bc249b788f4947356", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a646adedf047f2ce932c516bc249b788f4947356/comments", "author": null, "committer": null, "parents": [{"sha": "9b7dd5e868e5c3978ea8c6cfef383c2846321ddf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b7dd5e868e5c3978ea8c6cfef383c2846321ddf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b7dd5e868e5c3978ea8c6cfef383c2846321ddf"}], "stats": {"total": 75, "additions": 45, "deletions": 30}, "files": [{"sha": "f9c69a143118f2071258bece0c8d374d66f9497a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a646adedf047f2ce932c516bc249b788f4947356/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a646adedf047f2ce932c516bc249b788f4947356/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a646adedf047f2ce932c516bc249b788f4947356", "patch": "@@ -1,3 +1,13 @@\n+2007-03-28  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.h (X86_TUNE_PROMOTE_HIMODE_IMUL): New tuning\n+\toption.\n+\t(TARGET_TUNE_PROMOTE_HIMODE_IMUL): New define. Use new tuning option.\n+\t* config/i386/i386.c (ix86_tune_features): Initialize new\n+\ttuning option.\n+\t* config/i386/predicates.md (promotable_binary_operator): Use\n+\tTARGET_TUNE_PROMOTE_HIMODE_IMUL.\n+\n 2007-03-28  Grigory Zagorodnev <grigory_zagorodnev@linux.intel.com>\n \n \tPR target/31380\n@@ -85,22 +95,22 @@\n \n 2007-03-26  Richard Henderson  <rth@redhat.com>\n \n-        PR target/31361\n-        * config/i386/i386.c (IX86_BUILTIN_PSLLDQ128, IX86_BUILTIN_PSLLW128,\n-        IX86_BUILTIN_PSLLD128, IX86_BUILTIN_PSLLQ128, IX86_BUILTIN_PSRAW128,\n-        IX86_BUILTIN_PSRAD128, IX86_BUILTIN_PSRLW128, IX86_BUILTIN_PSRLD128,\n-        IX86_BUILTIN_PSRLQ128): New.\n-        (ix86_init_mmx_sse_builtins): Add them.\n-        (ix86_expand_builtin): Expand them.\n-        * config/i386/sse.md (ashr<mode>3, lshr<mode>3, ashl<mode>3): Make\n-        operand 2 be TImode.\n-        * config/i386/emmintrin.h (_mm_slli_epi64, _mm_srai_epi16,\n-        _mm_srai_epi32, _mm_srli_epi16, _mm_srli_epi32,\n-        _mm_srli_epi64): Mark __B const.\n-        (_mm_srli_si128, _mm_srli_si128): Fix disabled inline versions.\n-        (_mm_sll_epi16, _mm_sll_epi32, _mm_sll_epi64, _mm_sra_epi16,\n-        _mm_sra_epi32, _mm_srl_epi16, _mm_srl_epi32, _mm_srl_epi64): Use \n-        new two-vector shift builtins.\n+\tPR target/31361\n+\t* config/i386/i386.c (IX86_BUILTIN_PSLLDQ128, IX86_BUILTIN_PSLLW128,\n+\tIX86_BUILTIN_PSLLD128, IX86_BUILTIN_PSLLQ128, IX86_BUILTIN_PSRAW128,\n+\tIX86_BUILTIN_PSRAD128, IX86_BUILTIN_PSRLW128, IX86_BUILTIN_PSRLD128,\n+\tIX86_BUILTIN_PSRLQ128): New.\n+\t(ix86_init_mmx_sse_builtins): Add them.\n+\t(ix86_expand_builtin): Expand them.\n+\t* config/i386/sse.md (ashr<mode>3, lshr<mode>3, ashl<mode>3): Make\n+\toperand 2 be TImode.\n+\t* config/i386/emmintrin.h (_mm_slli_epi64, _mm_srai_epi16,\n+\t_mm_srai_epi32, _mm_srli_epi16, _mm_srli_epi32,\n+\t_mm_srli_epi64): Mark __B const.\n+\t(_mm_srli_si128, _mm_srli_si128): Fix disabled inline versions.\n+\t(_mm_sll_epi16, _mm_sll_epi32, _mm_sll_epi64, _mm_sra_epi16,\n+\t_mm_sra_epi32, _mm_srl_epi16, _mm_srl_epi32, _mm_srl_epi64): Use \n+\tnew two-vector shift builtins.\n \n 2007-03-26  Ian Lance Taylor  <iant@google.com>\n \n@@ -288,7 +298,7 @@\n \tIX86_BUILTIN_PSRAW128, IX86_BUILTIN_PSRAD128, IX86_BUILTIN_PSRLW128,\n \tIX86_BUILTIN_PSRLD128, IX86_BUILTIN_PSRLQ128): Remove.\n \t(ix86_init_mmx_sse_builtins): Remove v8hi_ftype_v8hi_v2di and\n-\tv4si_ftype_v4si_v2di.   Remove __builtin_ia32_psllw128,\n+\tv4si_ftype_v4si_v2di.  Remove __builtin_ia32_psllw128,\n \t__builtin_ia32_pslld128, __builtin_ia32_psllq128,\n \t__builtin_ia32_psrlw128, __builtin_ia32_psrld128,\n \t__builtin_ia32_psrlq128, __builtin_ia32_psraw128 and"}, {"sha": "45876bde2aeda278b5f643e786140cbdd20fe9e9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a646adedf047f2ce932c516bc249b788f4947356/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a646adedf047f2ce932c516bc249b788f4947356/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a646adedf047f2ce932c516bc249b788f4947356", "patch": "@@ -1200,25 +1200,29 @@ unsigned int ix86_tune_features[X86_TUNE_LAST] = {\n   /* X86_TUNE_AVOID_VECTOR_DECODE */\n   m_K8 | m_GENERIC64,\n \n-  /* X86_TUNE_SLOW_IMUL_IMM32_MEM (imul of 32-bit constant and memory is vector\n-     path on AMD machines) */\n+  /* X86_TUNE_PROMOTE_HIMODE_IMUL: Modern CPUs have same latency for HImode\n+     and SImode multiply, but 386 and 486 do HImode multiply faster.  */\n+  ~(m_386 | m_486),\n+\n+  /* X86_TUNE_SLOW_IMUL_IMM32_MEM: Imul of 32-bit constant and memory is\n+     vector path on AMD machines.  */\n   m_K8 | m_GENERIC64 | m_AMDFAM10,\n \n-  /* X86_TUNE_SLOW_IMUL_IMM8 (imul of 8-bit constant is vector path on AMD\n-     machines)  */\n+  /* X86_TUNE_SLOW_IMUL_IMM8: Imul of 8-bit constant is vector path on AMD\n+     machines.  */\n   m_K8 | m_GENERIC64 | m_AMDFAM10,\n \n-  /* X86_TUNE_MOVE_M1_VIA_OR (on pentiums, it is faster to load -1 via OR than\n-     a MOV) */\n+  /* X86_TUNE_MOVE_M1_VIA_OR: On pentiums, it is faster to load -1 via OR\n+     than a MOV.  */\n   m_PENT,\n \n-  /* X86_TUNE_NOT_UNPAIRABLE (NOT is not pairable on Pentium, while XOR is, but\n-     one byte longer).  */\n+  /* X86_TUNE_NOT_UNPAIRABLE: NOT is not pairable on Pentium, while XOR is,\n+     but one byte longer.  */\n   m_PENT,\n \n-  /* X86_TUNE_NOT_VECTORMODE (On AMD K6, NOT is vector decoded with memory\n+  /* X86_TUNE_NOT_VECTORMODE: On AMD K6, NOT is vector decoded with memory\n      operand that cannot be represented using a modRM byte.  The XOR\n-     replacement is long decoded, so this split helps here as well).  */\n+     replacement is long decoded, so this split helps here as well.  */\n   m_K6,\n };\n "}, {"sha": "4c62ce54a63cba13b8fc693615bb67360536fa33", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a646adedf047f2ce932c516bc249b788f4947356/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a646adedf047f2ce932c516bc249b788f4947356/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=a646adedf047f2ce932c516bc249b788f4947356", "patch": "@@ -235,6 +235,7 @@ enum ix86_tune_indices {\n   X86_TUNE_EXT_80387_CONSTANTS,\n   X86_TUNE_SHORTEN_X87_SSE,\n   X86_TUNE_AVOID_VECTOR_DECODE,\n+  X86_TUNE_PROMOTE_HIMODE_IMUL,\n   X86_TUNE_SLOW_IMUL_IMM32_MEM,\n   X86_TUNE_SLOW_IMUL_IMM8,\n   X86_TUNE_MOVE_M1_VIA_OR,\n@@ -312,6 +313,8 @@ extern unsigned int ix86_tune_features[X86_TUNE_LAST];\n #define TARGET_SHORTEN_X87_SSE\tix86_tune_features[X86_TUNE_SHORTEN_X87_SSE]\n #define TARGET_AVOID_VECTOR_DECODE \\\n \tix86_tune_features[X86_TUNE_AVOID_VECTOR_DECODE]\n+#define TARGET_TUNE_PROMOTE_HIMODE_IMUL \\\n+\tix86_tune_features[X86_TUNE_PROMOTE_HIMODE_IMUL]\n #define TARGET_SLOW_IMUL_IMM32_MEM \\\n \tix86_tune_features[X86_TUNE_SLOW_IMUL_IMM32_MEM]\n #define TARGET_SLOW_IMUL_IMM8\tix86_tune_features[X86_TUNE_SLOW_IMUL_IMM8]"}, {"sha": "97deda6cb01851ca0311c8e36561c7812ed8e5e1", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a646adedf047f2ce932c516bc249b788f4947356/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a646adedf047f2ce932c516bc249b788f4947356/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=a646adedf047f2ce932c516bc249b788f4947356", "patch": "@@ -963,12 +963,10 @@\n \t       mod,udiv,umod,ashift,rotate,ashiftrt,lshiftrt,rotatert\"))\n \n ;; Return 1 if OP is a binary operator that can be promoted to wider mode.\n-;; Modern CPUs have same latency for HImode and SImode multiply,\n-;; but 386 and 486 do HImode multiply faster.  */\n (define_predicate \"promotable_binary_operator\"\n   (ior (match_code \"plus,and,ior,xor,ashift\")\n        (and (match_code \"mult\")\n-\t    (match_test \"ix86_tune > PROCESSOR_I486\"))))\n+\t    (match_test \"TARGET_TUNE_PROMOTE_HIMODE_IMUL\"))))\n \n ;; To avoid problems when jump re-emits comparisons like testqi_ext_ccno_0,\n ;; re-recognize the operand to avoid a copy_to_mode_reg that will fail."}]}