{"sha": "ca56d576241c6783eb36eea526b42c4f3fbf697b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E1NmQ1NzYyNDFjNjc4M2ViMzZlZWE1MjZiNDJjNGYzZmJmNjk3Yg==", "commit": {"author": {"name": "Nikhil Benesch", "email": "nikhil.benesch@gmail.com", "date": "2020-10-13T07:17:55Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-10-14T20:56:01Z"}, "message": "runtime: correct semaphore implementation on netbsd\n\nNetBSD's semaphores use the underlying lighweight process mechanism\n(LWP) on NetBSD, rather than pthreads. This means the m.prodcid needs\nto be set to the LWP ID rather than the pthread ID in order for unpark\nnotifications to get sent to the right place.\n\nIntroduce a new getProcID() method that selects the correct ID for the\nplatform.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/261742", "tree": {"sha": "4c2d5a0f1dc34d4a445583b7ba349b51b2ee875e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c2d5a0f1dc34d4a445583b7ba349b51b2ee875e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca56d576241c6783eb36eea526b42c4f3fbf697b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca56d576241c6783eb36eea526b42c4f3fbf697b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca56d576241c6783eb36eea526b42c4f3fbf697b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca56d576241c6783eb36eea526b42c4f3fbf697b/comments", "author": {"login": "benesch", "id": 882976, "node_id": "MDQ6VXNlcjg4Mjk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/882976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benesch", "html_url": "https://github.com/benesch", "followers_url": "https://api.github.com/users/benesch/followers", "following_url": "https://api.github.com/users/benesch/following{/other_user}", "gists_url": "https://api.github.com/users/benesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/benesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benesch/subscriptions", "organizations_url": "https://api.github.com/users/benesch/orgs", "repos_url": "https://api.github.com/users/benesch/repos", "events_url": "https://api.github.com/users/benesch/events{/privacy}", "received_events_url": "https://api.github.com/users/benesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61a43de58cb6de7212a622060500ad0a0fd94fae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61a43de58cb6de7212a622060500ad0a0fd94fae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61a43de58cb6de7212a622060500ad0a0fd94fae"}], "stats": {"total": 38, "additions": 30, "deletions": 8}, "files": [{"sha": "c37df37db5166e150d60e8a11b41d180d61b93df", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca56d576241c6783eb36eea526b42c4f3fbf697b/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca56d576241c6783eb36eea526b42c4f3fbf697b/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=ca56d576241c6783eb36eea526b42c4f3fbf697b", "patch": "@@ -1,4 +1,4 @@\n-6cb7b9e924d84125f21f4a2a96aa0d59466056fe\n+c5505c4e626fa4217911443b4db8b065855a0206\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "f49b83ccbe4e89cb34c38923a88dff4f5c94529d", "filename": "libgo/go/runtime/os_aix.go", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca56d576241c6783eb36eea526b42c4f3fbf697b/libgo%2Fgo%2Fruntime%2Fos_aix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca56d576241c6783eb36eea526b42c4f3fbf697b/libgo%2Fgo%2Fruntime%2Fos_aix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fos_aix.go?ref=ca56d576241c6783eb36eea526b42c4f3fbf697b", "patch": "@@ -21,6 +21,10 @@ type mOS struct {\n \twaitsema uintptr // semaphore for parking on locks\n }\n \n+func getProcID() uint64 {\n+\treturn uint64(gettid())\n+}\n+\n //extern malloc\n func libc_malloc(uintptr) unsafe.Pointer\n "}, {"sha": "a8859c085a33762771759932edc111ec91edc578", "filename": "libgo/go/runtime/os_gccgo.go", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca56d576241c6783eb36eea526b42c4f3fbf697b/libgo%2Fgo%2Fruntime%2Fos_gccgo.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca56d576241c6783eb36eea526b42c4f3fbf697b/libgo%2Fgo%2Fruntime%2Fos_gccgo.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fos_gccgo.go?ref=ca56d576241c6783eb36eea526b42c4f3fbf697b", "patch": "@@ -27,8 +27,7 @@ func mpreinit(mp *m) {\n func minit() {\n \tminitSignals()\n \n-\t// FIXME: only works on linux for now.\n-\tgetg().m.procid = uint64(gettid())\n+\tgetg().m.procid = getProcID()\n }\n \n // Called from dropm to undo the effect of an minit."}, {"sha": "1613b410e2ccceafd37bae86cf153a59f735eb0d", "filename": "libgo/go/runtime/os_hurd.go", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca56d576241c6783eb36eea526b42c4f3fbf697b/libgo%2Fgo%2Fruntime%2Fos_hurd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca56d576241c6783eb36eea526b42c4f3fbf697b/libgo%2Fgo%2Fruntime%2Fos_hurd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fos_hurd.go?ref=ca56d576241c6783eb36eea526b42c4f3fbf697b", "patch": "@@ -18,6 +18,10 @@ type mOS struct {\n \twaitsema uintptr // semaphore for parking on locks\n }\n \n+func getProcID() uint64 {\n+\treturn uint64(gettid())\n+}\n+\n //extern malloc\n func libc_malloc(uintptr) unsafe.Pointer\n "}, {"sha": "627b6d6d43caf27ef8edf52e29f2f8b2c40da4bd", "filename": "libgo/go/runtime/os_linux.go", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca56d576241c6783eb36eea526b42c4f3fbf697b/libgo%2Fgo%2Fruntime%2Fos_linux.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca56d576241c6783eb36eea526b42c4f3fbf697b/libgo%2Fgo%2Fruntime%2Fos_linux.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fos_linux.go?ref=ca56d576241c6783eb36eea526b42c4f3fbf697b", "patch": "@@ -13,6 +13,10 @@ type mOS struct {\n \tunused byte\n }\n \n+func getProcID() uint64 {\n+\treturn uint64(gettid())\n+}\n+\n func futex(addr unsafe.Pointer, op int32, val uint32, ts, addr2 unsafe.Pointer, val3 uint32) int32 {\n \treturn int32(syscall(_SYS_futex, uintptr(addr), uintptr(op), uintptr(val), uintptr(ts), uintptr(addr2), uintptr(val3)))\n }"}, {"sha": "89a8d076f12755de643a5ed0cff9cc9b3716c103", "filename": "libgo/go/runtime/os_netbsd.go", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca56d576241c6783eb36eea526b42c4f3fbf697b/libgo%2Fgo%2Fruntime%2Fos_netbsd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca56d576241c6783eb36eea526b42c4f3fbf697b/libgo%2Fgo%2Fruntime%2Fos_netbsd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fos_netbsd.go?ref=ca56d576241c6783eb36eea526b42c4f3fbf697b", "patch": "@@ -14,12 +14,19 @@ type mOS struct {\n \twaitsemacount uint32\n }\n \n+func getProcID() uint64 {\n+\treturn uint64(lwp_self())\n+}\n+\n+//extern _lwp_self\n+func lwp_self() int32\n+\n //go:noescape\n-//extern lwp_park\n+//extern _lwp_park\n func lwp_park(ts int32, rel int32, abstime *timespec, unpark int32, hint, unparkhint unsafe.Pointer) int32\n \n //go:noescape\n-//extern lwp_unpark\n+//extern _lwp_unpark\n func lwp_unpark(lwp int32, hint unsafe.Pointer) int32\n \n //go:noescape\n@@ -88,7 +95,7 @@ func semasleep(ns int64) int32 {\n \t\t\ttsp = &ts\n \t\t}\n \t\tret := lwp_park(_CLOCK_MONOTONIC, _TIMER_RELTIME, tsp, 0, unsafe.Pointer(&_g_.m.waitsemacount), nil)\n-\t\tif ret == _ETIMEDOUT {\n+\t\tif ret != 0 && errno() == _ETIMEDOUT {\n \t\t\treturn -1\n \t\t}\n \t}\n@@ -101,10 +108,10 @@ func semawakeup(mp *m) {\n \t// \"If the target LWP is not currently waiting, it will return\n \t// immediately upon the next call to _lwp_park().\"\n \tret := lwp_unpark(int32(mp.procid), unsafe.Pointer(&mp.waitsemacount))\n-\tif ret != 0 && ret != _ESRCH {\n+\tif ret != 0 && errno() != _ESRCH {\n \t\t// semawakeup can be called on signal stack.\n \t\tsystemstack(func() {\n-\t\t\tprint(\"thrwakeup addr=\", &mp.waitsemacount, \" sem=\", mp.waitsemacount, \" ret=\", ret, \"\\n\")\n+\t\t\tprint(\"thrwakeup addr=\", &mp.waitsemacount, \" sem=\", mp.waitsemacount, \" errno=\", errno(), \"\\n\")\n \t\t})\n \t}\n }"}, {"sha": "c568629e566b32a727bcd328e3d99f61daabde59", "filename": "libgo/go/runtime/os_solaris.go", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca56d576241c6783eb36eea526b42c4f3fbf697b/libgo%2Fgo%2Fruntime%2Fos_solaris.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca56d576241c6783eb36eea526b42c4f3fbf697b/libgo%2Fgo%2Fruntime%2Fos_solaris.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fos_solaris.go?ref=ca56d576241c6783eb36eea526b42c4f3fbf697b", "patch": "@@ -10,6 +10,10 @@ type mOS struct {\n \twaitsema uintptr // semaphore for parking on locks\n }\n \n+func getProcID() uint64 {\n+\treturn uint64(gettid())\n+}\n+\n //extern malloc\n func libc_malloc(uintptr) unsafe.Pointer\n "}]}