{"sha": "1197ce8e5a17e9a543175bbefd1f58be1707fb23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE5N2NlOGU1YTE3ZTlhNTQzMTc1YmJlZmQxZjU4YmUxNzA3ZmIyMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-04-20T08:33:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-04-20T08:33:47Z"}, "message": "tree.h (TYPE_REF_IS_RVALUE): Define.\n\n\t* tree.h (TYPE_REF_IS_RVALUE): Define.\n\t* dwarf2out.c (attr_checksum_ordered, is_type_die, is_comdat_die,\n\tshould_move_die_to_comdat, prune_unused_types_walk): Handle\n\tDW_TAG_rvalue_reference_type like DW_TAG_reference_type.\n\t(modified_type_die, gen_reference_type_die): Emit\n\tDW_TAG_rvalue_reference_type instead of DW_TAG_reference_type\n\tif TYPE_REF_IS_RVALUE and -gdwarf-4.\n\n\t* cp-tree.h (TYPE_REF_IS_RVALUE): Remove.\n\n\t* g++.dg/debug/dwarf2/rv1.C: New test.\n\nFrom-SVN: r158542", "tree": {"sha": "ca3c2eaa773ac8ebec72826d5fd3ba0c0df9b99d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca3c2eaa773ac8ebec72826d5fd3ba0c0df9b99d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1197ce8e5a17e9a543175bbefd1f58be1707fb23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1197ce8e5a17e9a543175bbefd1f58be1707fb23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1197ce8e5a17e9a543175bbefd1f58be1707fb23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1197ce8e5a17e9a543175bbefd1f58be1707fb23/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "72e2cf162959f344ec2e9a7488858a18574e3db1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72e2cf162959f344ec2e9a7488858a18574e3db1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72e2cf162959f344ec2e9a7488858a18574e3db1"}], "stats": {"total": 64, "additions": 56, "deletions": 8}, "files": [{"sha": "05eec8880f6f802e240e342c808b059eb8749d1c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197ce8e5a17e9a543175bbefd1f58be1707fb23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197ce8e5a17e9a543175bbefd1f58be1707fb23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1197ce8e5a17e9a543175bbefd1f58be1707fb23", "patch": "@@ -1,3 +1,13 @@\n+2010-04-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree.h (TYPE_REF_IS_RVALUE): Define.\n+\t* dwarf2out.c (attr_checksum_ordered, is_type_die, is_comdat_die,\n+\tshould_move_die_to_comdat, prune_unused_types_walk): Handle\n+\tDW_TAG_rvalue_reference_type like DW_TAG_reference_type.\n+\t(modified_type_die, gen_reference_type_die): Emit\n+\tDW_TAG_rvalue_reference_type instead of DW_TAG_reference_type\n+\tif TYPE_REF_IS_RVALUE and -gdwarf-4.\n+\n 2010-04-20  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \tPR target/43635"}, {"sha": "8c264f5d5c5ced722b6ba0c5cbf6ac1733ae5a3d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197ce8e5a17e9a543175bbefd1f58be1707fb23/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197ce8e5a17e9a543175bbefd1f58be1707fb23/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1197ce8e5a17e9a543175bbefd1f58be1707fb23", "patch": "@@ -1,3 +1,7 @@\n+2010-04-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* cp-tree.h (TYPE_REF_IS_RVALUE): Remove.\n+\n 2010-04-19  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/43704"}, {"sha": "260590464688eaa22c73d08c164905ced0c0248a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197ce8e5a17e9a543175bbefd1f58be1707fb23/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197ce8e5a17e9a543175bbefd1f58be1707fb23/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1197ce8e5a17e9a543175bbefd1f58be1707fb23", "patch": "@@ -74,7 +74,6 @@ framework extensions, you must include this file before toplev.h, not after.\n       BASELINK_QUALIFIED_P (in BASELINK)\n       TARGET_EXPR_IMPLICIT_P (in TARGET_EXPR)\n       TEMPLATE_PARM_PARAMETER_PACK (in TEMPLATE_PARM_INDEX)\n-      TYPE_REF_IS_RVALUE (in REFERENCE_TYPE)\n       ATTR_IS_DEPENDENT (in the TREE_LIST for an attribute)\n       CONSTRUCTOR_IS_DIRECT_INIT (in CONSTRUCTOR)\n       LAMBDA_EXPR_CAPTURES_THIS_P (in LAMBDA_EXPR)\n@@ -3200,10 +3199,6 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define TYPE_REF_OBJ_P(NODE)\t\t\t\t\t\\\n   (TREE_CODE (NODE) == REFERENCE_TYPE && TYPE_OBJ_P (TREE_TYPE (NODE)))\n \n-/* True if reference type NODE is an rvalue reference */\n-#define TYPE_REF_IS_RVALUE(NODE) \\\n-  TREE_LANG_FLAG_0 (REFERENCE_TYPE_CHECK (NODE))\n-\n /* Returns true if NODE is a pointer to an object, or a pointer to\n    void.  Keep these checks in ascending tree code order.  */\n #define TYPE_PTROBV_P(NODE)\t\t\t\t\t\\"}, {"sha": "b044ab7faa69d71df55d7a222ca1871439daebe2", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197ce8e5a17e9a543175bbefd1f58be1707fb23/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197ce8e5a17e9a543175bbefd1f58be1707fb23/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=1197ce8e5a17e9a543175bbefd1f58be1707fb23", "patch": "@@ -8245,6 +8245,7 @@ attr_checksum_ordered (enum dwarf_tag tag, dw_attr_ref at,\n       if ((at->dw_attr == DW_AT_type\n \t   && (tag == DW_TAG_pointer_type\n \t       || tag == DW_TAG_reference_type\n+\t       || tag == DW_TAG_rvalue_reference_type\n \t       || tag == DW_TAG_ptr_to_member_type))\n \t  || (at->dw_attr == DW_AT_friend\n \t      && tag == DW_TAG_friend))\n@@ -8959,6 +8960,7 @@ is_type_die (dw_die_ref die)\n     case DW_TAG_enumeration_type:\n     case DW_TAG_pointer_type:\n     case DW_TAG_reference_type:\n+    case DW_TAG_rvalue_reference_type:\n     case DW_TAG_string_type:\n     case DW_TAG_structure_type:\n     case DW_TAG_subroutine_type:\n@@ -8996,6 +8998,7 @@ is_comdat_die (dw_die_ref c)\n \n   if (c->die_tag == DW_TAG_pointer_type\n       || c->die_tag == DW_TAG_reference_type\n+      || c->die_tag == DW_TAG_rvalue_reference_type\n       || c->die_tag == DW_TAG_const_type\n       || c->die_tag == DW_TAG_volatile_type)\n     {\n@@ -9244,6 +9247,7 @@ should_move_die_to_comdat (dw_die_ref die)\n     case DW_TAG_interface_type:\n     case DW_TAG_pointer_type:\n     case DW_TAG_reference_type:\n+    case DW_TAG_rvalue_reference_type:\n     case DW_TAG_string_type:\n     case DW_TAG_subroutine_type:\n     case DW_TAG_ptr_to_member_type:\n@@ -12192,7 +12196,11 @@ modified_type_die (tree type, int is_const_type, int is_volatile_type,\n     }\n   else if (code == REFERENCE_TYPE)\n     {\n-      mod_type_die = new_die (DW_TAG_reference_type, comp_unit_die, type);\n+      if (TYPE_REF_IS_RVALUE (type) && dwarf_version >= 4)\n+\tmod_type_die = new_die (DW_TAG_rvalue_reference_type, comp_unit_die,\n+\t\t\t\ttype);\n+      else\n+\tmod_type_die = new_die (DW_TAG_reference_type, comp_unit_die, type);\n       add_AT_unsigned (mod_type_die, DW_AT_byte_size,\n \t\t       simple_type_size_in_bits (type) / BITS_PER_UNIT);\n       item_type = TREE_TYPE (type);\n@@ -18634,8 +18642,12 @@ gen_pointer_type_die (tree type, dw_die_ref context_die)\n static void\n gen_reference_type_die (tree type, dw_die_ref context_die)\n {\n-  dw_die_ref ref_die\n-    = new_die (DW_TAG_reference_type, scope_die_for (type, context_die), type);\n+  dw_die_ref ref_die, scope_die = scope_die_for (type, context_die);\n+\n+  if (TYPE_REF_IS_RVALUE (type) && dwarf_version >= 4)\n+    ref_die = new_die (DW_TAG_rvalue_reference_type, scope_die, type);\n+  else\n+    ref_die = new_die (DW_TAG_reference_type, scope_die, type);\n \n   equate_type_number_to_die (type, ref_die);\n   add_type_attribute (ref_die, TREE_TYPE (type), 0, 0, context_die);\n@@ -20907,6 +20919,7 @@ prune_unused_types_walk (dw_die_ref die)\n     case DW_TAG_packed_type:\n     case DW_TAG_pointer_type:\n     case DW_TAG_reference_type:\n+    case DW_TAG_rvalue_reference_type:\n     case DW_TAG_volatile_type:\n     case DW_TAG_typedef:\n     case DW_TAG_array_type:"}, {"sha": "f4797822eade04b067dc828c0e13cf3f01068f3d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197ce8e5a17e9a543175bbefd1f58be1707fb23/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197ce8e5a17e9a543175bbefd1f58be1707fb23/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1197ce8e5a17e9a543175bbefd1f58be1707fb23", "patch": "@@ -1,3 +1,7 @@\n+2010-04-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/debug/dwarf2/rv1.C: New test.\n+\n 2010-04-20  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \tPR target/43635"}, {"sha": "c954daa91a419d819adf2c65f46db41f2ec03e19", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/rv1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197ce8e5a17e9a543175bbefd1f58be1707fb23/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Frv1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197ce8e5a17e9a543175bbefd1f58be1707fb23/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Frv1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Frv1.C?ref=1197ce8e5a17e9a543175bbefd1f58be1707fb23", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile }\n+// { dg-options \"-g -dA -gdwarf-4 -std=c++0x\" }\n+// { dg-final { scan-assembler-times \"DIE\\[^\\n\\r\\]*DW_TAG_reference_type\" 1 } }\n+// { dg-final { scan-assembler-times \"DIE\\[^\\n\\r\\]*DW_TAG_rvalue_reference_type\" 1 } }\n+\n+struct A { A (); ~A (); };\n+struct B { B (); ~B (); };\n+\n+void\n+foo ()\n+{\n+  A v;\n+  A &a = v;\n+  B &&b = B ();\n+}"}, {"sha": "f73be797eefb9b08305985c6b75619a426b45463", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197ce8e5a17e9a543175bbefd1f58be1707fb23/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197ce8e5a17e9a543175bbefd1f58be1707fb23/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=1197ce8e5a17e9a543175bbefd1f58be1707fb23", "patch": "@@ -504,6 +504,9 @@ struct GTY(()) tree_common {\n        OMP_CLAUSE_PRIVATE_OUTER_REF in\n \t   OMP_CLAUSE_PRIVATE\n \n+       TYPE_REF_IS_RVALUE in\n+\t   REFERENCE_TYPE\n+\n    protected_flag:\n \n        TREE_PROTECTED in\n@@ -1347,6 +1350,10 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n /* Used in classes in C++. */\n #define TREE_PROTECTED(NODE) ((NODE)->base.protected_flag)\n \n+/* True if reference type NODE is a C++ rvalue reference.  */\n+#define TYPE_REF_IS_RVALUE(NODE) \\\n+  (REFERENCE_TYPE_CHECK (NODE)->base.private_flag)\n+\n /* Nonzero in a _DECL if the use of the name is defined as a\n    deprecated feature by __attribute__((deprecated)).  */\n #define TREE_DEPRECATED(NODE) \\"}]}