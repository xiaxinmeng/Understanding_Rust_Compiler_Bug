{"sha": "17c9cf3c17651950bd4bfefcbe15440fa2155810", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdjOWNmM2MxNzY1MTk1MGJkNGJmZWZjYmUxNTQ0MGZhMjE1NTgxMA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-12-03T02:11:00Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-12-03T16:27:41Z"}, "message": "compiler: cast comparison function result to expected bool type\n\nOtherwise cases like\n    type mybool bool\n    var b mybool = [10]string{} == [10]string{}\nget an incorrect type checking error.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/274446", "tree": {"sha": "03367d24299f66cc435a6b1eecd846f33543095e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03367d24299f66cc435a6b1eecd846f33543095e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17c9cf3c17651950bd4bfefcbe15440fa2155810", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17c9cf3c17651950bd4bfefcbe15440fa2155810", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17c9cf3c17651950bd4bfefcbe15440fa2155810", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17c9cf3c17651950bd4bfefcbe15440fa2155810/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd34d5f2c40f3c65407f4b0bee0b49fc84e4a4ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd34d5f2c40f3c65407f4b0bee0b49fc84e4a4ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd34d5f2c40f3c65407f4b0bee0b49fc84e4a4ab"}], "stats": {"total": 55, "additions": 49, "deletions": 6}, "files": [{"sha": "cd1a3961a06e1246c23293314e3b5851a03835a4", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c9cf3c17651950bd4bfefcbe15440fa2155810/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c9cf3c17651950bd4bfefcbe15440fa2155810/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=17c9cf3c17651950bd4bfefcbe15440fa2155810", "patch": "@@ -1,4 +1,4 @@\n-5364d15082de77d2759a01f254208d4cb4f579e3\n+b3a0b068f7fa2d65ba781271b2c0479d103b7d7b\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "ebe1b36eb53236d00cb6a6db74aeaf688077f18b", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c9cf3c17651950bd4bfefcbe15440fa2155810/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c9cf3c17651950bd4bfefcbe15440fa2155810/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=17c9cf3c17651950bd4bfefcbe15440fa2155810", "patch": "@@ -6287,8 +6287,21 @@ Binary_expression::lower_array_comparison(Gogo* gogo,\n   args->push_back(this->operand_address(inserter, this->left_));\n   args->push_back(this->operand_address(inserter, this->right_));\n \n-  Expression* ret = Expression::make_call(func, args, false, loc);\n-\n+  Call_expression* ce = Expression::make_call(func, args, false, loc);\n+\n+  // Record that this is a call to a generated equality function.  We\n+  // need to do this because a comparison returns an abstract boolean\n+  // type, but the function necessarily returns \"bool\".  The\n+  // difference shows up in code like\n+  //     type mybool bool\n+  //     var b mybool = [10]string{} == [10]string{}\n+  // The comparison function returns \"bool\", but since a comparison\n+  // has an abstract boolean type we need an implicit conversion to\n+  // \"mybool\".  The implicit conversion is inserted in\n+  // Call_expression::do_flatten.\n+  ce->set_is_equal_function();\n+\n+  Expression* ret = ce;\n   if (this->op_ == OPERATOR_NOTEQ)\n     ret = Expression::make_unary(OPERATOR_NOT, ret, loc);\n \n@@ -11163,6 +11176,13 @@ Call_expression::do_flatten(Gogo* gogo, Named_object*,\n         return ret;\n     }\n \n+  // Add an implicit conversion to a boolean type, if needed.  See the\n+  // comment in Binary_expression::lower_array_comparison.\n+  if (this->is_equal_function_\n+      && this->type_ != NULL\n+      && this->type_ != Type::lookup_bool_type())\n+    return Expression::make_cast(this->type_, this, this->location());\n+\n   return this;\n }\n \n@@ -11938,7 +11958,7 @@ Call_expression::do_type()\n // parameter types to set the types of the arguments.\n \n void\n-Call_expression::do_determine_type(const Type_context*)\n+Call_expression::do_determine_type(const Type_context* context)\n {\n   if (!this->determining_types())\n     return;\n@@ -11985,6 +12005,22 @@ Call_expression::do_determine_type(const Type_context*)\n \t    (*pa)->determine_type_no_context();\n \t}\n     }\n+\n+  // If this is a call to a generated equality function, we determine\n+  // the type based on the context.  See the comment in\n+  // Binary_expression::lower_array_comparison.\n+  if (this->is_equal_function_\n+      && !context->may_be_abstract\n+      && context->type != NULL\n+      && context->type->is_boolean_type()\n+      && context->type != Type::lookup_bool_type())\n+    {\n+      go_assert(this->type_ == NULL\n+\t\t|| this->type_ == Type::lookup_bool_type()\n+\t\t|| this->type_ == context->type\n+\t\t|| this->type_->is_error());\n+      this->type_ = context->type;\n+    }\n }\n \n // Called when determining types for a Call_expression.  Return true"}, {"sha": "259eeb6027e8d8e5af66ca2fb0e35613020d933e", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c9cf3c17651950bd4bfefcbe15440fa2155810/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c9cf3c17651950bd4bfefcbe15440fa2155810/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=17c9cf3c17651950bd4bfefcbe15440fa2155810", "patch": "@@ -2326,8 +2326,8 @@ class Call_expression : public Expression\n       fn_(fn), args_(args), type_(NULL), call_(NULL), call_temp_(NULL)\n     , expected_result_count_(0), is_varargs_(is_varargs),\n       varargs_are_lowered_(false), types_are_determined_(false),\n-      is_deferred_(false), is_concurrent_(false), issued_error_(false),\n-      is_multi_value_arg_(false), is_flattened_(false)\n+      is_deferred_(false), is_concurrent_(false), is_equal_function_(false),\n+      issued_error_(false), is_multi_value_arg_(false), is_flattened_(false)\n   { }\n \n   // The function to call.\n@@ -2408,6 +2408,11 @@ class Call_expression : public Expression\n   set_is_concurrent()\n   { this->is_concurrent_ = true; }\n \n+  // Note that this is a call to a generated equality function.\n+  void\n+  set_is_equal_function()\n+  { this->is_equal_function_ = true; }\n+\n   // We have found an error with this call expression; return true if\n   // we should report it.\n   bool\n@@ -2545,6 +2550,8 @@ class Call_expression : public Expression\n   bool is_deferred_;\n   // True if the call is an argument to a go statement.\n   bool is_concurrent_;\n+  // True if this is a call to a generated equality function.\n+  bool is_equal_function_;\n   // True if we reported an error about a mismatch between call\n   // results and uses.  This is to avoid producing multiple errors\n   // when there are multiple Call_result_expressions."}]}