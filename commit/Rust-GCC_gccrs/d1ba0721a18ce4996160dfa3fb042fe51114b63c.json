{"sha": "d1ba0721a18ce4996160dfa3fb042fe51114b63c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFiYTA3MjFhMThjZTQ5OTYxNjBkZmEzZmIwNDJmZTUxMTE0YjYzYw==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-08-11T20:24:30Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-08-11T20:24:30Z"}, "message": "Also rewrite out of SSA scalar dependences going outside the SCoP region.\n\n2010-06-12  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-clast-to-gimple.c (gloog): Remove call to\n\tsese_adjust_liveout_phis.\n\t* graphite-sese-to-poly.c (scev_analyzable_p): When scev returns an\n\tSSA_NAME, allow it to be handled by rewrite_cross_bb_scalar_deps.\n\t(rewrite_cross_bb_scalar_deps): Handle GIMPLE_PHI nodes: call\n\trewrite_phi_out_of_ssa.\n\t* sese.c (get_vdef_before_sese): Removed.\n\t(sese_adjust_vphi): Removed.\n\t(sese_adjust_liveout_phis): Removed.\n\t* sese.h (sese_adjust_liveout_phis): Removed.\n\nFrom-SVN: r163118", "tree": {"sha": "98a0719b68d9049543d31152f1c35e66b84f84f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98a0719b68d9049543d31152f1c35e66b84f84f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1ba0721a18ce4996160dfa3fb042fe51114b63c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1ba0721a18ce4996160dfa3fb042fe51114b63c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1ba0721a18ce4996160dfa3fb042fe51114b63c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1ba0721a18ce4996160dfa3fb042fe51114b63c/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fed5769e41bbfc6026ad145307bb91a95a98865", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fed5769e41bbfc6026ad145307bb91a95a98865", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fed5769e41bbfc6026ad145307bb91a95a98865"}], "stats": {"total": 203, "additions": 35, "deletions": 168}, "files": [{"sha": "2c330932285f111b94c3edbfd979c443ae438536", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ba0721a18ce4996160dfa3fb042fe51114b63c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ba0721a18ce4996160dfa3fb042fe51114b63c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1ba0721a18ce4996160dfa3fb042fe51114b63c", "patch": "@@ -1,3 +1,16 @@\n+2010-08-02  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-clast-to-gimple.c (gloog): Remove call to\n+\tsese_adjust_liveout_phis.\n+\t* graphite-sese-to-poly.c (scev_analyzable_p): When scev returns an\n+\tSSA_NAME, allow it to be handled by rewrite_cross_bb_scalar_deps.\n+\t(rewrite_cross_bb_scalar_deps): Handle GIMPLE_PHI nodes: call\n+\trewrite_phi_out_of_ssa.\n+\t* sese.c (get_vdef_before_sese): Removed.\n+\t(sese_adjust_vphi): Removed.\n+\t(sese_adjust_liveout_phis): Removed.\n+\t* sese.h (sese_adjust_liveout_phis): Removed.\n+\n 2010-08-02  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-sese-to-poly.c (insert_out_of_ssa_copy): Pass an extra"}, {"sha": "2c0a3c1fec27baf2969f954c2bcc2ea5930c2f61", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ba0721a18ce4996160dfa3fb042fe51114b63c/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ba0721a18ce4996160dfa3fb042fe51114b63c/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=d1ba0721a18ce4996160dfa3fb042fe51114b63c", "patch": "@@ -1,3 +1,16 @@\n+2010-06-12  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-clast-to-gimple.c (gloog): Remove call to\n+\tsese_adjust_liveout_phis.\n+\t* graphite-sese-to-poly.c (scev_analyzable_p): When scev returns an\n+\tSSA_NAME, allow it to be handled by rewrite_cross_bb_scalar_deps.\n+\t(rewrite_cross_bb_scalar_deps): Handle GIMPLE_PHI nodes: call\n+\trewrite_phi_out_of_ssa.\n+\t* sese.c (get_vdef_before_sese): Removed.\n+\t(sese_adjust_vphi): Removed.\n+\t(sese_adjust_liveout_phis): Removed.\n+\t* sese.h (sese_adjust_liveout_phis): Removed.\n+\n 2010-06-12  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-sese-to-poly.c (insert_out_of_ssa_copy): Pass an extra"}, {"sha": "859bedf0c136b7e1ed4170abb76ced609386ba8a", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ba0721a18ce4996160dfa3fb042fe51114b63c/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ba0721a18ce4996160dfa3fb042fe51114b63c/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=d1ba0721a18ce4996160dfa3fb042fe51114b63c", "patch": "@@ -1576,10 +1576,6 @@ gloog (scop_p scop, VEC (scop_p, heap) *scops, htab_t bb_pbb_mapping)\n \t\t   rename_map, &newivs, newivs_index,\n \t\t   bb_pbb_mapping, 1, params_index);\n   graphite_verify ();\n-  sese_adjust_liveout_phis (region, rename_map,\n-\t\t\t    if_region->region->exit->src,\n-\t\t\t    if_region->false_region->exit,\n-\t\t\t    if_region->true_region->exit);\n   scev_reset_htab ();\n   rename_nb_iterations (rename_map);\n "}, {"sha": "8baf379a5a1b3e14eea2a80d484b65c961eec158", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ba0721a18ce4996160dfa3fb042fe51114b63c/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ba0721a18ce4996160dfa3fb042fe51114b63c/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=d1ba0721a18ce4996160dfa3fb042fe51114b63c", "patch": "@@ -2326,7 +2326,8 @@ scev_analyzable_p (tree def, sese region)\n   loop_p loop = loop_containing_stmt (stmt);\n   tree scev = scalar_evolution_in_region (region, loop, def);\n \n-  return !chrec_contains_undetermined (scev);\n+  return !chrec_contains_undetermined (scev)\n+    && TREE_CODE (scev) != SSA_NAME;\n }\n \n /* Rewrite the scalar dependence of DEF used in USE_STMT with a memory\n@@ -2380,9 +2381,13 @@ rewrite_cross_bb_scalar_deps (sese region, gimple_stmt_iterator *gsi)\n   def_bb = gimple_bb (stmt);\n \n   FOR_EACH_IMM_USE_STMT (use_stmt, imm_iter, def)\n-    if (def_bb != gimple_bb (use_stmt)\n-\t&& gimple_code (use_stmt) != GIMPLE_PHI\n-\t&& !is_gimple_debug (use_stmt))\n+    if (gimple_code (use_stmt) == GIMPLE_PHI)\n+      {\n+\tgimple_stmt_iterator si = gsi_for_stmt (use_stmt);\n+\trewrite_phi_out_of_ssa (&si);\n+      }\n+    else if (def_bb != gimple_bb (use_stmt)\n+\t     && !is_gimple_debug (use_stmt))\n       {\n \tif (!zero_dim_array)\n \t  {"}, {"sha": "0a6c45d959c8ce065c8cdd1866b745e76bcb70c3", "filename": "gcc/sese.c", "status": "modified", "additions": 0, "deletions": 159, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ba0721a18ce4996160dfa3fb042fe51114b63c/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ba0721a18ce4996160dfa3fb042fe51114b63c/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=d1ba0721a18ce4996160dfa3fb042fe51114b63c", "patch": "@@ -394,100 +394,6 @@ sese_insert_phis_for_liveouts (sese region, basic_block bb,\n   update_ssa (TODO_update_ssa);\n }\n \n-/* Get the definition of NAME before the SESE.  Keep track of the\n-   basic blocks that have been VISITED in a bitmap.  */\n-\n-static tree\n-get_vdef_before_sese (sese region, tree name, sbitmap visited)\n-{\n-  unsigned i;\n-  gimple stmt = SSA_NAME_DEF_STMT (name);\n-  basic_block def_bb = gimple_bb (stmt);\n-\n-  if (!def_bb || !bb_in_sese_p (def_bb, region))\n-    return name;\n-\n-  if (TEST_BIT (visited, def_bb->index))\n-    return NULL_TREE;\n-\n-  SET_BIT (visited, def_bb->index);\n-\n-  switch (gimple_code (stmt))\n-    {\n-    case GIMPLE_PHI:\n-      for (i = 0; i < gimple_phi_num_args (stmt); i++)\n-\t{\n-\t  tree arg = gimple_phi_arg_def (stmt, i);\n-\t  tree res;\n-\n-\t  if (gimple_bb (SSA_NAME_DEF_STMT (arg))\n-\t      && def_bb->index == gimple_bb (SSA_NAME_DEF_STMT (arg))->index)\n-\t    continue;\n-\n-\t  res = get_vdef_before_sese (region, arg, visited);\n-\t  if (res)\n-\t    return res;\n-\t}\n-      return NULL_TREE;\n-\n-    case GIMPLE_ASSIGN:\n-    case GIMPLE_CALL:\n-      {\n-\tuse_operand_p use_p = gimple_vuse_op (stmt);\n-\ttree use = USE_FROM_PTR (use_p);\n-\n-\tif (def_bb->index == gimple_bb (SSA_NAME_DEF_STMT (use))->index)\n-\t  RESET_BIT (visited, def_bb->index);\n-\n-\treturn get_vdef_before_sese (region, use, visited);\n-      }\n-\n-    default:\n-      return NULL_TREE;\n-    }\n-}\n-\n-/* Adjust a virtual phi node PHI that is placed at the end of the\n-   generated code for SCOP:\n-\n-   | if (1)\n-   |   generated code from REGION;\n-   | else\n-   |   REGION;\n-\n-   The FALSE_E edge comes from the original code, TRUE_E edge comes\n-   from the code generated for the SCOP.  */\n-\n-static void\n-sese_adjust_vphi (sese region, gimple phi, edge true_e)\n-{\n-  unsigned i;\n-\n-  gcc_assert (gimple_phi_num_args (phi) == 2);\n-\n-  for (i = 0; i < gimple_phi_num_args (phi); i++)\n-    if (gimple_phi_arg_edge (phi, i) == true_e)\n-      {\n-\ttree true_arg, false_arg, before_scop_arg;\n-\tsbitmap visited;\n-\n-\ttrue_arg = gimple_phi_arg_def (phi, i);\n-\tif (!SSA_NAME_IS_DEFAULT_DEF (true_arg))\n-\t  return;\n-\n-\tfalse_arg = gimple_phi_arg_def (phi, i == 0 ? 1 : 0);\n-\tif (SSA_NAME_IS_DEFAULT_DEF (false_arg))\n-\t  return;\n-\n-\tvisited = sbitmap_alloc (last_basic_block);\n-\tsbitmap_zero (visited);\n-\tbefore_scop_arg = get_vdef_before_sese (region, false_arg, visited);\n-\tgcc_assert (before_scop_arg != NULL_TREE);\n-\tSET_PHI_ARG_DEF (phi, i, before_scop_arg);\n-\tsbitmap_free (visited);\n-      }\n-}\n-\n /* Returns the expression associated to OLD_NAME in MAP.  */\n \n static tree\n@@ -585,71 +491,6 @@ rename_sese_parameters (htab_t rename_map, sese region)\n \t\t rename_variables_in_expr (rename_map, p));\n }\n \n-/* Adjusts the phi nodes in the block BB for variables defined in\n-   SCOP_REGION and used outside the SCOP_REGION.  The code generation\n-   moves SCOP_REGION in the else clause of an \"if (1)\" and generates\n-   code in the then clause:\n-\n-   | if (1)\n-   |   generated code from REGION;\n-   | else\n-   |   REGION;\n-\n-   To adjust the phi nodes after the condition, the RENAME_MAP is\n-   used.  */\n-\n-void\n-sese_adjust_liveout_phis (sese region, htab_t rename_map, basic_block bb,\n-\t\t\t  edge false_e, edge true_e)\n-{\n-  gimple_stmt_iterator si;\n-\n-  for (si = gsi_start_phis (bb); !gsi_end_p (si); gsi_next (&si))\n-    {\n-      unsigned i;\n-      unsigned false_i = 0;\n-      gimple phi = gsi_stmt (si);\n-      tree res = gimple_phi_result (phi);\n-\n-      if (!is_gimple_reg (res))\n-\t{\n-\t  sese_adjust_vphi (region, phi, true_e);\n-\t  continue;\n-\t}\n-\n-      for (i = 0; i < gimple_phi_num_args (phi); i++)\n-\tif (gimple_phi_arg_edge (phi, i) == false_e)\n-\t  {\n-\t    false_i = i;\n-\t    break;\n-\t  }\n-\n-      for (i = 0; i < gimple_phi_num_args (phi); i++)\n-\tif (gimple_phi_arg_edge (phi, i) == true_e)\n-\t  {\n-\t    tree old_name = gimple_phi_arg_def (phi, false_i);\n-\t    tree expr = get_rename (rename_map, old_name);\n-\t    gimple_seq stmts;\n-\n-\t    gcc_assert (old_name != expr);\n-\n-\t    if (TREE_CODE (expr) != SSA_NAME\n-\t\t&& is_gimple_reg (old_name))\n-\t      {\n-\t\ttree type = TREE_TYPE (old_name);\n-\t\ttree var = create_tmp_var (type, \"var\");\n-\n-\t\texpr = build2 (MODIFY_EXPR, type, var, expr);\n-\t\texpr = force_gimple_operand (expr, &stmts, true, NULL);\n-\t\tgsi_insert_seq_on_edge_immediate (true_e, stmts);\n-\t      }\n-\n-\t    SET_PHI_ARG_DEF (phi, i, expr);\n-\t    set_rename (rename_map, old_name, res);\n-\t  }\n-    }\n-}\n-\n /* Rename the SSA_NAMEs used in STMT and that appear in MAP.  */\n \n static void"}, {"sha": "4b2e5c2c47cb8543863f9f1dc88473b37d238fde", "filename": "gcc/sese.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ba0721a18ce4996160dfa3fb042fe51114b63c/gcc%2Fsese.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ba0721a18ce4996160dfa3fb042fe51114b63c/gcc%2Fsese.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.h?ref=d1ba0721a18ce4996160dfa3fb042fe51114b63c", "patch": "@@ -55,7 +55,6 @@ typedef struct sese_s\n extern sese new_sese (edge, edge);\n extern void free_sese (sese);\n extern void sese_insert_phis_for_liveouts (sese, basic_block, edge, edge);\n-extern void sese_adjust_liveout_phis (sese, htab_t, basic_block, edge, edge);\n extern void build_sese_loop_nests (sese);\n extern edge copy_bb_and_scalar_dependences (basic_block, sese, edge, htab_t);\n extern struct loop *outermost_loop_in_sese (sese, basic_block);"}]}