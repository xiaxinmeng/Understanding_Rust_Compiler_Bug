{"sha": "20c395720e1d3731f347086be7b26ea35eb98bb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBjMzk1NzIwZTFkMzczMWYzNDcwODZiZTdiMjZlYTM1ZWI5OGJiNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-04-13T00:04:33Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-04-13T00:04:33Z"}, "message": "update comment\n\nFrom-SVN: r26391", "tree": {"sha": "20c8c44930f25b22689f2cefe0c35ee5300fafb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20c8c44930f25b22689f2cefe0c35ee5300fafb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20c395720e1d3731f347086be7b26ea35eb98bb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20c395720e1d3731f347086be7b26ea35eb98bb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20c395720e1d3731f347086be7b26ea35eb98bb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20c395720e1d3731f347086be7b26ea35eb98bb6/comments", "author": null, "committer": null, "parents": [{"sha": "46ff11fda2f280b3d71e8eae3e2b6d243cd6c2d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46ff11fda2f280b3d71e8eae3e2b6d243cd6c2d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46ff11fda2f280b3d71e8eae3e2b6d243cd6c2d7"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "d8e545803b79913b63d6d1788f4a403c25307c81", "filename": "gcc/cp/init.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20c395720e1d3731f347086be7b26ea35eb98bb6/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20c395720e1d3731f347086be7b26ea35eb98bb6/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=20c395720e1d3731f347086be7b26ea35eb98bb6", "patch": "@@ -2390,10 +2390,14 @@ build_new_1 (exp)\n \trval = build (VEC_INIT_EXPR, TREE_TYPE (rval),\n \t\t      save_expr (rval), init, nelts);\n \n-      /* If any part of the object initialization terminates by throwing\n-\t an exception and the new-expression does not contain a\n-\t new-placement, then the deallocation function is called to free\n-\t the memory in which the object was being constructed.  */\n+      /* If any part of the object initialization terminates by throwing an\n+\t exception and a suitable deallocation function can be found, the\n+\t deallocation function is called to free the memory in which the\n+\t object was being constructed, after which the exception continues\n+\t to propagate in the context of the new-expression. If no\n+\t unambiguous matching deallocation function can be found,\n+\t propagating the exception does not cause the object's memory to be\n+\t freed.  */\n       if (flag_exceptions && alloc_expr && ! use_java_new)\n \t{\n \t  enum tree_code dcode = has_array ? VEC_DELETE_EXPR : DELETE_EXPR;"}]}