{"sha": "61bee6aed26eb30b798c75b9a595c9d51e080442", "node_id": "C_kwDOANBUbNoAKDYxYmVlNmFlZDI2ZWIzMGI3OThjNzViOWE1OTVjOWQ1MWUwODA0NDI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-06T16:42:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-06T16:42:52Z"}, "message": "combine: Don't record for UNDO_MODE pointers into regno_reg_rtx array [PR104985]\n\nThe testcase in the PR fails under valgrind on mips64 (but only Martin\ncan reproduce, I couldn't).\nBut the problem reported there is that SUBST_MODE remembers addresses\ninto the regno_reg_rtx array, then some splitter needs a new pseudo\nand calls gen_reg_rtx, which reallocates the regno_reg_rtx array\nand finally undo operation is done and dereferences the old regno_reg_rtx\nentry.\nThe rtx values stored in regno_reg_rtx array seems to be created\nby gen_reg_rtx only and since then aren't modified, all we do for it\nis adjusting its fields (e.g. adjust_reg_mode that SUBST_MODE does).\n\nSo, I think it is useless to use where.r for UNDO_MODE and store\n&regno_reg_rtx[regno] in struct undo, we can store just\nregno_reg_rtx[regno] (i.e. pointer to the REG itself instead of\npointer to pointer to REG) or could also store just the regno.\n\nThe following patch does the latter, and because SUBST_MODE no longer\nneeds to be a macro, changes all SUBST_MODE uses to subst_mode.\n\n2022-04-06  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR rtl-optimization/104985\n\t* combine.cc (struct undo): Add where.regno member.\n\t(do_SUBST_MODE): Rename to ...\n\t(subst_mode): ... this.  Change first argument from rtx * into int,\n\toperate on regno_reg_rtx[regno] and save regno into where.regno.\n\t(SUBST_MODE): Remove.\n\t(try_combine): Use subst_mode instead of SUBST_MODE, change first\n\targument from regno_reg_rtx[whatever] to whatever.  For UNDO_MODE, use\n\tregno_reg_rtx[undo->where.regno] instead of *undo->where.r.\n\t(undo_to_marker): For UNDO_MODE, use regno_reg_rtx[undo->where.regno]\n\tinstead of *undo->where.r.\n\t(simplify_set): Use subst_mode instead of SUBST_MODE, change first\n\targument from regno_reg_rtx[whatever] to whatever.", "tree": {"sha": "a45736fd6973fa6b60af91a9656e718509080cfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a45736fd6973fa6b60af91a9656e718509080cfc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61bee6aed26eb30b798c75b9a595c9d51e080442", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61bee6aed26eb30b798c75b9a595c9d51e080442", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61bee6aed26eb30b798c75b9a595c9d51e080442", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61bee6aed26eb30b798c75b9a595c9d51e080442/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fd377a747375a82912bd81c67b275301489785c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fd377a747375a82912bd81c67b275301489785c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fd377a747375a82912bd81c67b275301489785c"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "53dcac92abc248a80fc32dd1d3bb641a650d4d9a", "filename": "gcc/combine.cc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61bee6aed26eb30b798c75b9a595c9d51e080442/gcc%2Fcombine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61bee6aed26eb30b798c75b9a595c9d51e080442/gcc%2Fcombine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.cc?ref=61bee6aed26eb30b798c75b9a595c9d51e080442", "patch": "@@ -382,7 +382,7 @@ struct undo\n   struct undo *next;\n   enum undo_kind kind;\n   union { rtx r; int i; machine_mode m; struct insn_link *l; } old_contents;\n-  union { rtx *r; int *i; struct insn_link **l; } where;\n+  union { rtx *r; int *i; int regno; struct insn_link **l; } where;\n };\n \n /* Record a bunch of changes to be undone, up to MAX_UNDO of them.\n@@ -761,10 +761,11 @@ do_SUBST_INT (int *into, int newval)\n    well.  */\n \n static void\n-do_SUBST_MODE (rtx *into, machine_mode newval)\n+subst_mode (int regno, machine_mode newval)\n {\n   struct undo *buf;\n-  machine_mode oldval = GET_MODE (*into);\n+  rtx reg = regno_reg_rtx[regno];\n+  machine_mode oldval = GET_MODE (reg);\n \n   if (oldval == newval)\n     return;\n@@ -775,15 +776,13 @@ do_SUBST_MODE (rtx *into, machine_mode newval)\n     buf = XNEW (struct undo);\n \n   buf->kind = UNDO_MODE;\n-  buf->where.r = into;\n+  buf->where.regno = regno;\n   buf->old_contents.m = oldval;\n-  adjust_reg_mode (*into, newval);\n+  adjust_reg_mode (reg, newval);\n \n   buf->next = undobuf.undos, undobuf.undos = buf;\n }\n \n-#define SUBST_MODE(INTO, NEWVAL)  do_SUBST_MODE (&(INTO), (NEWVAL))\n-\n /* Similar to SUBST, but NEWVAL is a LOG_LINKS expression.  */\n \n static void\n@@ -3186,7 +3185,7 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \t\t    newpat_dest = gen_rtx_REG (compare_mode, regno);\n \t\t  else\n \t\t    {\n-\t\t      SUBST_MODE (regno_reg_rtx[regno], compare_mode);\n+\t\t      subst_mode (regno, compare_mode);\n \t\t      newpat_dest = regno_reg_rtx[regno];\n \t\t    }\n \t\t}\n@@ -3576,7 +3575,7 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \t\tni2dest = gen_rtx_REG (new_mode, REGNO (i2dest));\n \t      else\n \t\t{\n-\t\t  SUBST_MODE (regno_reg_rtx[REGNO (i2dest)], new_mode);\n+\t\t  subst_mode (REGNO (i2dest), new_mode);\n \t\t  ni2dest = regno_reg_rtx[REGNO (i2dest)];\n \t\t}\n \n@@ -3712,7 +3711,7 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \t\tnewdest = gen_rtx_REG (split_mode, REGNO (i2dest));\n \t      else\n \t\t{\n-\t\t  SUBST_MODE (regno_reg_rtx[REGNO (i2dest)], split_mode);\n+\t\t  subst_mode (REGNO (i2dest), split_mode);\n \t\t  newdest = regno_reg_rtx[REGNO (i2dest)];\n \t\t}\n \t    }\n@@ -4082,7 +4081,7 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n       for (undo = undobuf.undos; undo; undo = undo->next)\n \tif (undo->kind == UNDO_MODE)\n \t  {\n-\t    rtx reg = *undo->where.r;\n+\t    rtx reg = regno_reg_rtx[undo->where.regno];\n \t    machine_mode new_mode = GET_MODE (reg);\n \t    machine_mode old_mode = undo->old_contents.m;\n \n@@ -4755,7 +4754,8 @@ undo_to_marker (void *marker)\n \t  *undo->where.i = undo->old_contents.i;\n \t  break;\n \tcase UNDO_MODE:\n-\t  adjust_reg_mode (*undo->where.r, undo->old_contents.m);\n+\t  adjust_reg_mode (regno_reg_rtx[undo->where.regno],\n+\t\t\t   undo->old_contents.m);\n \t  break;\n \tcase UNDO_LINKS:\n \t  *undo->where.l = undo->old_contents.l;\n@@ -6819,7 +6819,7 @@ simplify_set (rtx x)\n \t\tnew_dest = gen_rtx_REG (compare_mode, regno);\n \t      else\n \t\t{\n-\t\t  SUBST_MODE (regno_reg_rtx[regno], compare_mode);\n+\t\t  subst_mode (regno, compare_mode);\n \t\t  new_dest = regno_reg_rtx[regno];\n \t\t}\n "}]}