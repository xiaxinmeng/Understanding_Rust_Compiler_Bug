{"sha": "bc1594c1428a6202a739b157bcdd0f4db2c5faf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmMxNTk0YzE0MjhhNjIwMmE3MzliMTU3YmNkZDBmNGRiMmM1ZmFmNw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2005-07-29T21:14:22Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-07-29T21:14:22Z"}, "message": "re PR middle-end/21720 (GCC incorrectly rounds hex floats)\n\n\tPR c/21720\n\t* real.c (real_from_string): Also set last bit if there is a\n\tnonzero hex digit beyond GCC's internal precision after \".\".\n\ntestsuite:\n\t* gcc.dg/hex-round-1.c: Test more cases.\n\t* gcc.dg/hex-round-2.c: New test.\n\nFrom-SVN: r102567", "tree": {"sha": "5016d5b89f3bdb36574cad26940fb18ba94a1653", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5016d5b89f3bdb36574cad26940fb18ba94a1653"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc1594c1428a6202a739b157bcdd0f4db2c5faf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc1594c1428a6202a739b157bcdd0f4db2c5faf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc1594c1428a6202a739b157bcdd0f4db2c5faf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc1594c1428a6202a739b157bcdd0f4db2c5faf7/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3aca4bff532e98480b7a9e9b41b9df608bd90fed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aca4bff532e98480b7a9e9b41b9df608bd90fed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aca4bff532e98480b7a9e9b41b9df608bd90fed"}], "stats": {"total": 212, "additions": 212, "deletions": 0}, "files": [{"sha": "781ab8b94625073c41d9cdb7a7126f3c8493f9b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc1594c1428a6202a739b157bcdd0f4db2c5faf7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc1594c1428a6202a739b157bcdd0f4db2c5faf7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc1594c1428a6202a739b157bcdd0f4db2c5faf7", "patch": "@@ -1,3 +1,9 @@\n+2005-07-29  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c/21720\n+\t* real.c (real_from_string): Also set last bit if there is a\n+\tnonzero hex digit beyond GCC's internal precision after \".\".\n+\n 2005-07-29  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/altivec.md: Convert UNSPEC numerical values to"}, {"sha": "2d2618521066428f68000dcf57f6a588d8d1a103", "filename": "gcc/real.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc1594c1428a6202a739b157bcdd0f4db2c5faf7/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc1594c1428a6202a739b157bcdd0f4db2c5faf7/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=bc1594c1428a6202a739b157bcdd0f4db2c5faf7", "patch": "@@ -1815,6 +1815,10 @@ real_from_string (REAL_VALUE_TYPE *r, const char *str)\n \t\t    |= (unsigned long) d << (pos % HOST_BITS_PER_LONG);\n \t\t  pos -= 4;\n \t\t}\n+\t      else if (d)\n+\t\t/* Ensure correct rounding by setting last bit if there is\n+\t\t   a subsequent nonzero digit.  */\n+\t\tr->sig[0] |= 1;\n \t      str++;\n \t    }\n \t}"}, {"sha": "9516f68f83fb828afc0064ca86e95e44db4df83d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc1594c1428a6202a739b157bcdd0f4db2c5faf7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc1594c1428a6202a739b157bcdd0f4db2c5faf7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bc1594c1428a6202a739b157bcdd0f4db2c5faf7", "patch": "@@ -1,3 +1,9 @@\n+2005-07-29  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c/21720\n+\t* gcc.dg/hex-round-1.c: Test more cases.\n+\t* gcc.dg/hex-round-2.c: New test.\n+\n 2005-07-29  Diego Novillo  <dnovillo@redhat.com>\n \n \tPR 22550"}, {"sha": "3276ad463784816d29e03d486c96f64f9c356875", "filename": "gcc/testsuite/gcc.dg/hex-round-1.c", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc1594c1428a6202a739b157bcdd0f4db2c5faf7/gcc%2Ftestsuite%2Fgcc.dg%2Fhex-round-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc1594c1428a6202a739b157bcdd0f4db2c5faf7/gcc%2Ftestsuite%2Fgcc.dg%2Fhex-round-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fhex-round-1.c?ref=bc1594c1428a6202a739b157bcdd0f4db2c5faf7", "patch": "@@ -10,6 +10,64 @@ int\n main (void)\n {\n #if FLT_RADIX == 2 && FLT_MANT_DIG == 24\n+  if (0x1.0000011p0f == 1)\n+    link_failure ();\n+  if (0x1.00000101p0f == 1)\n+    link_failure ();\n+  if (0x1.000001001p0f == 1)\n+    link_failure ();\n+  if (0x1.0000010001p0f == 1)\n+    link_failure ();\n+  if (0x1.00000100001p0f == 1)\n+    link_failure ();\n+  if (0x1.000001000001p0f == 1)\n+    link_failure ();\n+  if (0x1.0000010000001p0f == 1)\n+    link_failure ();\n+  if (0x1.00000100000001p0f == 1)\n+    link_failure ();\n+  if (0x1.000001000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.0000010000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.00000100000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.000001000000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.0000010000000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.00000100000000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.000001000000000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.0000010000000000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.00000100000000000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.000001000000000000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.0000010000000000000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.00000100000000000000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.000001000000000000000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.0000010000000000000000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.00000100000000000000000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.000001000000000000000000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.0000010000000000000000000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.00000100000000000000000000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.000001000000000000000000000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.0000010000000000000000000000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.00000100000000000000000000000000001p0f == 1)\n+    link_failure ();\n   if (0x1.000001000000000000000000000000000001p0f == 1)\n     link_failure ();\n   if (0x1.0000010000000000000000000000000000001p0f == 1)\n@@ -26,6 +84,30 @@ main (void)\n     link_failure ();\n   if (0x1.0000010000000000000000000000000000000000001p0f == 1)\n     link_failure ();\n+  if (0x1.00000100000000000000000000000000000000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.000001000000000000000000000000000000000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.0000010000000000000000000000000000000000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.00000100000000000000000000000000000000000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.000001000000000000000000000000000000000000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.0000010000000000000000000000000000000000000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.00000100000000000000000000000000000000000000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.000001000000000000000000000000000000000000000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.0000010000000000000000000000000000000000000000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.00000100000000000000000000000000000000000000000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.000001000000000000000000000000000000000000000000000001p0f == 1)\n+    link_failure ();\n+  if (0x1.0000010000000000000000000000000000000000000000000000001p0f == 1)\n+    link_failure ();\n #endif\n   return 0;\n }"}, {"sha": "ba9b8bf3d022c3dffe4d793c4a7bde4f46cfcac9", "filename": "gcc/testsuite/gcc.dg/hex-round-2.c", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc1594c1428a6202a739b157bcdd0f4db2c5faf7/gcc%2Ftestsuite%2Fgcc.dg%2Fhex-round-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc1594c1428a6202a739b157bcdd0f4db2c5faf7/gcc%2Ftestsuite%2Fgcc.dg%2Fhex-round-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fhex-round-2.c?ref=bc1594c1428a6202a739b157bcdd0f4db2c5faf7", "patch": "@@ -0,0 +1,114 @@\n+/* Test for hexadecimal float rounding: bug 21720.  Test with no \".\"\n+   in number.  */\n+/* { dg-do link } */\n+/* { dg-options \"-O -std=gnu99\" } */\n+\n+#include <float.h>\n+\n+extern void link_failure (void);\n+\n+int\n+main (void)\n+{\n+#if FLT_RADIX == 2 && FLT_MANT_DIG == 24\n+  if (0x10000011p-28f == 1)\n+    link_failure ();\n+  if (0x100000101p-32f == 1)\n+    link_failure ();\n+  if (0x1000001001p-36f == 1)\n+    link_failure ();\n+  if (0x10000010001p-40f == 1)\n+    link_failure ();\n+  if (0x100000100001p-44f == 1)\n+    link_failure ();\n+  if (0x1000001000001p-48f == 1)\n+    link_failure ();\n+  if (0x10000010000001p-52f == 1)\n+    link_failure ();\n+  if (0x100000100000001p-56f == 1)\n+    link_failure ();\n+  if (0x1000001000000001p-60f == 1)\n+    link_failure ();\n+  if (0x10000010000000001p-64f == 1)\n+    link_failure ();\n+  if (0x100000100000000001p-68f == 1)\n+    link_failure ();\n+  if (0x1000001000000000001p-72f == 1)\n+    link_failure ();\n+  if (0x10000010000000000001p-76f == 1)\n+    link_failure ();\n+  if (0x100000100000000000001p-80f == 1)\n+    link_failure ();\n+  if (0x1000001000000000000001p-84f == 1)\n+    link_failure ();\n+  if (0x10000010000000000000001p-88f == 1)\n+    link_failure ();\n+  if (0x100000100000000000000001p-92f == 1)\n+    link_failure ();\n+  if (0x1000001000000000000000001p-96f == 1)\n+    link_failure ();\n+  if (0x10000010000000000000000001p-100f == 1)\n+    link_failure ();\n+  if (0x100000100000000000000000001p-104f == 1)\n+    link_failure ();\n+  if (0x1000001000000000000000000001p-108f == 1)\n+    link_failure ();\n+  if (0x10000010000000000000000000001p-112f == 1)\n+    link_failure ();\n+  if (0x100000100000000000000000000001p-116f == 1)\n+    link_failure ();\n+  if (0x1000001000000000000000000000001p-120f == 1)\n+    link_failure ();\n+  if (0x10000010000000000000000000000001p-124f == 1)\n+    link_failure ();\n+  if (0x100000100000000000000000000000001p-128f == 1)\n+    link_failure ();\n+  if (0x1000001000000000000000000000000001p-132f == 1)\n+    link_failure ();\n+  if (0x10000010000000000000000000000000001p-136f == 1)\n+    link_failure ();\n+  if (0x100000100000000000000000000000000001p-140f == 1)\n+    link_failure ();\n+  if (0x1000001000000000000000000000000000001p-144f == 1)\n+    link_failure ();\n+  if (0x10000010000000000000000000000000000001p-148f == 1)\n+    link_failure ();\n+  if (0x100000100000000000000000000000000000001p-152f == 1)\n+    link_failure ();\n+  if (0x1000001000000000000000000000000000000001p-156f == 1)\n+    link_failure ();\n+  if (0x10000010000000000000000000000000000000001p-160f == 1)\n+    link_failure ();\n+  if (0x100000100000000000000000000000000000000001p-164f == 1)\n+    link_failure ();\n+  if (0x1000001000000000000000000000000000000000001p-168f == 1)\n+    link_failure ();\n+  if (0x10000010000000000000000000000000000000000001p-172f == 1)\n+    link_failure ();\n+  if (0x100000100000000000000000000000000000000000001p-176f == 1)\n+    link_failure ();\n+  if (0x1000001000000000000000000000000000000000000001p-180f == 1)\n+    link_failure ();\n+  if (0x10000010000000000000000000000000000000000000001p-184f == 1)\n+    link_failure ();\n+  if (0x100000100000000000000000000000000000000000000001p-188f == 1)\n+    link_failure ();\n+  if (0x1000001000000000000000000000000000000000000000001p-192f == 1)\n+    link_failure ();\n+  if (0x10000010000000000000000000000000000000000000000001p-196f == 1)\n+    link_failure ();\n+  if (0x100000100000000000000000000000000000000000000000001p-200f == 1)\n+    link_failure ();\n+  if (0x1000001000000000000000000000000000000000000000000001p-204f == 1)\n+    link_failure ();\n+  if (0x10000010000000000000000000000000000000000000000000001p-208f == 1)\n+    link_failure ();\n+  if (0x100000100000000000000000000000000000000000000000000001p-212f == 1)\n+    link_failure ();\n+  if (0x1000001000000000000000000000000000000000000000000000001p-216f == 1)\n+    link_failure ();\n+  if (0x10000010000000000000000000000000000000000000000000000001p-220f == 1)\n+    link_failure ();\n+#endif\n+  return 0;\n+}"}]}