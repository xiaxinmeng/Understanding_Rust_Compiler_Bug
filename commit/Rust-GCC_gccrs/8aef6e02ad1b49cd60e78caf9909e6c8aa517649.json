{"sha": "8aef6e02ad1b49cd60e78caf9909e6c8aa517649", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFlZjZlMDJhZDFiNDljZDYwZTc4Y2FmOTkwOWU2YzhhYTUxNzY0OQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-02-22T00:41:25Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-02-22T00:41:25Z"}, "message": "cmd/go: remove work directory on usage error\n    \n    Backport https://golang.org/cl/163237 from the master library:\n    \n        Ensure that cmd/go consistently calls base.Exit rather than os.Exit,\n        so that we don't incorrectly leave the work directory around on exit.\n    \n        Test this by modifying the testsuite to run all the tests with TMPDIR\n        set to a temporary directory, and then check that no files are left\n        behind in that temporary directory. Adjust a couple of tests to make\n        this approach work.\n    \n    Updates https://gcc.gnu.org/PR89406\n    \n    Reviewed-on: https://go-review.googlesource.com/c/163198\n\nFrom-SVN: r269086", "tree": {"sha": "cc75d762d2bfb435632bdb41f39e6c5f8576cd26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc75d762d2bfb435632bdb41f39e6c5f8576cd26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8aef6e02ad1b49cd60e78caf9909e6c8aa517649", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aef6e02ad1b49cd60e78caf9909e6c8aa517649", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8aef6e02ad1b49cd60e78caf9909e6c8aa517649", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aef6e02ad1b49cd60e78caf9909e6c8aa517649/comments", "author": null, "committer": null, "parents": [{"sha": "2496137abd8e367ffd5fdffde6dafbf345cd3fee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2496137abd8e367ffd5fdffde6dafbf345cd3fee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2496137abd8e367ffd5fdffde6dafbf345cd3fee"}], "stats": {"total": 92, "additions": 72, "deletions": 20}, "files": [{"sha": "0a70b3a260c152239c2f72cd7004f8bb2ec4a9d6", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aef6e02ad1b49cd60e78caf9909e6c8aa517649/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aef6e02ad1b49cd60e78caf9909e6c8aa517649/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=8aef6e02ad1b49cd60e78caf9909e6c8aa517649", "patch": "@@ -1,4 +1,4 @@\n-43e458ab704e04cdf347f3e74e0b0eff3de00a3d\n+4fbd06dc7b1b8fb665293399a2b6d5326435512f\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "10ff53fe89864685768b1394012a12fac0395e08", "filename": "libgo/go/cmd/go/go_test.go", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aef6e02ad1b49cd60e78caf9909e6c8aa517649/libgo%2Fgo%2Fcmd%2Fgo%2Fgo_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aef6e02ad1b49cd60e78caf9909e6c8aa517649/libgo%2Fgo%2Fcmd%2Fgo%2Fgo_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Fgo_test.go?ref=8aef6e02ad1b49cd60e78caf9909e6c8aa517649", "patch": "@@ -146,7 +146,18 @@ func TestMain(m *testing.M) {\n \t\tselect {}\n \t}\n \n-\tdir, err := ioutil.TempDir(os.Getenv(\"GOTMPDIR\"), \"cmd-go-test-\")\n+\t// Run with a temporary TMPDIR to check that the tests don't\n+\t// leave anything behind.\n+\ttopTmpdir, err := ioutil.TempDir(\"\", \"cmd-go-test-\")\n+\tif err != nil {\n+\t\tlog.Fatal(err)\n+\t}\n+\tif !*testWork {\n+\t\tdefer removeAll(topTmpdir)\n+\t}\n+\tos.Setenv(tempEnvName(), topTmpdir)\n+\n+\tdir, err := ioutil.TempDir(topTmpdir, \"tmpdir\")\n \tif err != nil {\n \t\tlog.Fatal(err)\n \t}\n@@ -258,6 +269,23 @@ func TestMain(m *testing.M) {\n \t\tremoveAll(testTmpDir) // os.Exit won't run defer\n \t}\n \n+\tif !*testWork {\n+\t\t// There shouldn't be anything left in topTmpdir.\n+\t\tdirf, err := os.Open(topTmpdir)\n+\t\tif err != nil {\n+\t\t\tlog.Fatal(err)\n+\t\t}\n+\t\tnames, err := dirf.Readdirnames(0)\n+\t\tif err != nil {\n+\t\t\tlog.Fatal(err)\n+\t\t}\n+\t\tif len(names) > 0 {\n+\t\t\tlog.Fatalf(\"unexpected files left in tmpdir: %v\", names)\n+\t\t}\n+\n+\t\tremoveAll(topTmpdir)\n+\t}\n+\n \tos.Exit(r)\n }\n \n@@ -5020,7 +5048,8 @@ func TestExecBuildX(t *testing.T) {\n \tobj := tg.path(\"main\")\n \ttg.run(\"build\", \"-x\", \"-o\", obj, src)\n \tsh := tg.path(\"test.sh\")\n-\terr := ioutil.WriteFile(sh, []byte(\"set -e\\n\"+tg.getStderr()), 0666)\n+\tcmds := tg.getStderr()\n+\terr := ioutil.WriteFile(sh, []byte(\"set -e\\n\"+cmds), 0666)\n \tif err != nil {\n \t\tt.Fatal(err)\n \t}\n@@ -5051,6 +5080,12 @@ func TestExecBuildX(t *testing.T) {\n \tif string(out) != \"hello\" {\n \t\tt.Fatalf(\"got %q; want %q\", out, \"hello\")\n \t}\n+\n+\tmatches := regexp.MustCompile(`^WORK=(.*)\\n`).FindStringSubmatch(cmds)\n+\tif len(matches) == 0 {\n+\t\tt.Fatal(\"no WORK directory\")\n+\t}\n+\ttg.must(os.RemoveAll(matches[1]))\n }\n \n func TestParallelNumber(t *testing.T) {"}, {"sha": "bf810ff7622ac7ba7bcfaf1f9ed9bdaddcb48606", "filename": "libgo/go/cmd/go/internal/base/base.go", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aef6e02ad1b49cd60e78caf9909e6c8aa517649/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fbase%2Fbase.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aef6e02ad1b49cd60e78caf9909e6c8aa517649/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fbase%2Fbase.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fbase%2Fbase.go?ref=8aef6e02ad1b49cd60e78caf9909e6c8aa517649", "patch": "@@ -82,7 +82,8 @@ func (c *Command) Name() string {\n func (c *Command) Usage() {\n \tfmt.Fprintf(os.Stderr, \"usage: %s\\n\", c.UsageLine)\n \tfmt.Fprintf(os.Stderr, \"Run 'go help %s' for details.\\n\", c.LongName())\n-\tos.Exit(2)\n+\tSetExitStatus(2)\n+\tExit()\n }\n \n // Runnable reports whether the command can be run; otherwise"}, {"sha": "3f934328fe10f784101547f50eda5affb2e39bc2", "filename": "libgo/go/cmd/go/internal/cmdflag/flag.go", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aef6e02ad1b49cd60e78caf9909e6c8aa517649/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fcmdflag%2Fflag.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aef6e02ad1b49cd60e78caf9909e6c8aa517649/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fcmdflag%2Fflag.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fcmdflag%2Fflag.go?ref=8aef6e02ad1b49cd60e78caf9909e6c8aa517649", "patch": "@@ -66,7 +66,8 @@ func SyntaxError(cmd, msg string) {\n \t} else {\n \t\tfmt.Fprintf(os.Stderr, `run \"go help %s\" for more information`+\"\\n\", cmd)\n \t}\n-\tos.Exit(2)\n+\tbase.SetExitStatus(2)\n+\tbase.Exit()\n }\n \n // AddKnownFlags registers the flags in defns with base.AddKnownFlag."}, {"sha": "121deb70a58904a72226b4c4bafdd225d5fba266", "filename": "libgo/go/cmd/go/internal/help/help.go", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aef6e02ad1b49cd60e78caf9909e6c8aa517649/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fhelp%2Fhelp.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aef6e02ad1b49cd60e78caf9909e6c8aa517649/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fhelp%2Fhelp.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fhelp%2Fhelp.go?ref=8aef6e02ad1b49cd60e78caf9909e6c8aa517649", "patch": "@@ -63,7 +63,8 @@ Args:\n \t\t\thelpSuccess = \" \" + strings.Join(args[:i], \" \")\n \t\t}\n \t\tfmt.Fprintf(os.Stderr, \"go help %s: unknown help topic. Run '%s'.\\n\", strings.Join(args, \" \"), helpSuccess)\n-\t\tos.Exit(2) // failed at 'go help cmd'\n+\t\tbase.SetExitStatus(2) // failed at 'go help cmd'\n+\t\tbase.Exit()\n \t}\n \n \tif len(cmd.Commands) > 0 {\n@@ -167,7 +168,8 @@ func tmpl(w io.Writer, text string, data interface{}) {\n \tif ew.err != nil {\n \t\t// I/O error writing. Ignore write on closed pipe.\n \t\tif strings.Contains(ew.err.Error(), \"pipe\") {\n-\t\t\tos.Exit(1)\n+\t\t\tbase.SetExitStatus(1)\n+\t\t\tbase.Exit()\n \t\t}\n \t\tbase.Fatalf(\"writing output: %v\", ew.err)\n \t}"}, {"sha": "cbe7f8ce08c02d962d8f0228ec4fcded5337daf5", "filename": "libgo/go/cmd/go/internal/vet/vetflag.go", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aef6e02ad1b49cd60e78caf9909e6c8aa517649/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fvet%2Fvetflag.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aef6e02ad1b49cd60e78caf9909e6c8aa517649/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fvet%2Fvetflag.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fvet%2Fvetflag.go?ref=8aef6e02ad1b49cd60e78caf9909e6c8aa517649", "patch": "@@ -76,7 +76,8 @@ func vetFlags(usage func(), args []string) (passToVet, packageNames []string) {\n \tvetcmd.Stdout = out\n \tif err := vetcmd.Run(); err != nil {\n \t\tfmt.Fprintf(os.Stderr, \"go vet: can't execute %s -flags: %v\\n\", tool, err)\n-\t\tos.Exit(2)\n+\t\tbase.SetExitStatus(2)\n+\t\tbase.Exit()\n \t}\n \tvar analysisFlags []struct {\n \t\tName  string\n@@ -85,7 +86,8 @@ func vetFlags(usage func(), args []string) (passToVet, packageNames []string) {\n \t}\n \tif err := json.Unmarshal(out.Bytes(), &analysisFlags); err != nil {\n \t\tfmt.Fprintf(os.Stderr, \"go vet: can't unmarshal JSON from %s -flags: %v\", tool, err)\n-\t\tos.Exit(2)\n+\t\tbase.SetExitStatus(2)\n+\t\tbase.Exit()\n \t}\n \n \t// Add vet's flags to vetflagDefn.\n@@ -134,7 +136,8 @@ func vetFlags(usage func(), args []string) (passToVet, packageNames []string) {\n \t\tif f == nil {\n \t\t\tfmt.Fprintf(os.Stderr, \"vet: flag %q not defined\\n\", args[i])\n \t\t\tfmt.Fprintf(os.Stderr, \"Run \\\"go help vet\\\" for more information\\n\")\n-\t\t\tos.Exit(2)\n+\t\t\tbase.SetExitStatus(2)\n+\t\t\tbase.Exit()\n \t\t}\n \t\tif f.Value != nil {\n \t\t\tif err := f.Value.Set(value); err != nil {\n@@ -182,5 +185,6 @@ func usage() {\n \t}\n \tfmt.Fprintf(os.Stderr, \"Run '%s -help' for the vet tool's flags.\\n\", cmd)\n \n-\tos.Exit(2)\n+\tbase.SetExitStatus(2)\n+\tbase.Exit()\n }"}, {"sha": "1cc701d2ae31ca4e8ad76217fc9f9d00f059d73f", "filename": "libgo/go/cmd/go/internal/work/action.go", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aef6e02ad1b49cd60e78caf9909e6c8aa517649/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fwork%2Faction.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aef6e02ad1b49cd60e78caf9909e6c8aa517649/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fwork%2Faction.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fwork%2Faction.go?ref=8aef6e02ad1b49cd60e78caf9909e6c8aa517649", "patch": "@@ -249,12 +249,14 @@ func (b *Builder) Init() {\n \n \tif _, ok := cfg.OSArchSupportsCgo[cfg.Goos+\"/\"+cfg.Goarch]; !ok && cfg.BuildContext.Compiler == \"gc\" {\n \t\tfmt.Fprintf(os.Stderr, \"cmd/go: unsupported GOOS/GOARCH pair %s/%s\\n\", cfg.Goos, cfg.Goarch)\n-\t\tos.Exit(2)\n+\t\tbase.SetExitStatus(2)\n+\t\tbase.Exit()\n \t}\n \tfor _, tag := range cfg.BuildContext.BuildTags {\n \t\tif strings.Contains(tag, \",\") {\n \t\t\tfmt.Fprintf(os.Stderr, \"cmd/go: -tags space-separated list contains comma\\n\")\n-\t\t\tos.Exit(2)\n+\t\t\tbase.SetExitStatus(2)\n+\t\t\tbase.Exit()\n \t\t}\n \t}\n }"}, {"sha": "de18daef54c9bbcd308fb0bda793769c1327f441", "filename": "libgo/go/cmd/go/internal/work/exec.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aef6e02ad1b49cd60e78caf9909e6c8aa517649/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fwork%2Fexec.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aef6e02ad1b49cd60e78caf9909e6c8aa517649/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fwork%2Fexec.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fwork%2Fexec.go?ref=8aef6e02ad1b49cd60e78caf9909e6c8aa517649", "patch": "@@ -2334,7 +2334,7 @@ func (b *Builder) gccSupportsFlag(compiler []string, flag string) bool {\n \t// version of GCC, so some systems have frozen on it.\n \t// Now we pass an empty file on stdin, which should work at least for\n \t// GCC and clang.\n-\tcmdArgs := str.StringList(compiler, flag, \"-c\", \"-x\", \"c\", \"-\")\n+\tcmdArgs := str.StringList(compiler, flag, \"-c\", \"-x\", \"c\", \"-\", \"-o\", os.DevNull)\n \tif cfg.BuildN || cfg.BuildX {\n \t\tb.Showcmd(b.WorkDir, \"%s || true\", joinUnambiguously(cmdArgs))\n \t\tif cfg.BuildN {"}, {"sha": "6311d65cdb8d39b62189586859d8aaa675a82076", "filename": "libgo/go/cmd/go/internal/work/gccgo.go", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aef6e02ad1b49cd60e78caf9909e6c8aa517649/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fwork%2Fgccgo.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aef6e02ad1b49cd60e78caf9909e6c8aa517649/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fwork%2Fgccgo.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fwork%2Fgccgo.go?ref=8aef6e02ad1b49cd60e78caf9909e6c8aa517649", "patch": "@@ -56,7 +56,8 @@ func checkGccgoBin() {\n \t\treturn\n \t}\n \tfmt.Fprintf(os.Stderr, \"cmd/go: gccgo: %s\\n\", gccgoErr)\n-\tos.Exit(2)\n+\tbase.SetExitStatus(2)\n+\tbase.Exit()\n }\n \n func (tools gccgoToolchain) gc(b *Builder, a *Action, archive string, importcfg []byte, symabis string, asmhdr bool, gofiles []string) (ofile string, output []byte, err error) {"}, {"sha": "3381ab544c7f4aad84c55db6c83bdcacf06f0da3", "filename": "libgo/go/cmd/go/internal/work/init.go", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aef6e02ad1b49cd60e78caf9909e6c8aa517649/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fwork%2Finit.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aef6e02ad1b49cd60e78caf9909e6c8aa517649/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fwork%2Finit.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fwork%2Finit.go?ref=8aef6e02ad1b49cd60e78caf9909e6c8aa517649", "patch": "@@ -29,7 +29,8 @@ func BuildInit() {\n \t\tp, err := filepath.Abs(cfg.BuildPkgdir)\n \t\tif err != nil {\n \t\t\tfmt.Fprintf(os.Stderr, \"go %s: evaluating -pkgdir: %v\\n\", flag.Args()[0], err)\n-\t\t\tos.Exit(2)\n+\t\t\tbase.SetExitStatus(2)\n+\t\t\tbase.Exit()\n \t\t}\n \t\tcfg.BuildPkgdir = p\n \t}\n@@ -41,16 +42,19 @@ func instrumentInit() {\n \t}\n \tif cfg.BuildRace && cfg.BuildMSan {\n \t\tfmt.Fprintf(os.Stderr, \"go %s: may not use -race and -msan simultaneously\\n\", flag.Args()[0])\n-\t\tos.Exit(2)\n+\t\tbase.SetExitStatus(2)\n+\t\tbase.Exit()\n \t}\n \tif cfg.BuildMSan && !sys.MSanSupported(cfg.Goos, cfg.Goarch) {\n \t\tfmt.Fprintf(os.Stderr, \"-msan is not supported on %s/%s\\n\", cfg.Goos, cfg.Goarch)\n-\t\tos.Exit(2)\n+\t\tbase.SetExitStatus(2)\n+\t\tbase.Exit()\n \t}\n \tif cfg.BuildRace {\n \t\tif !sys.RaceDetectorSupported(cfg.Goos, cfg.Goarch) {\n \t\t\tfmt.Fprintf(os.Stderr, \"go %s: -race is only supported on linux/amd64, linux/ppc64le, linux/arm64, freebsd/amd64, netbsd/amd64, darwin/amd64 and windows/amd64\\n\", flag.Args()[0])\n-\t\t\tos.Exit(2)\n+\t\t\tbase.SetExitStatus(2)\n+\t\t\tbase.Exit()\n \t\t}\n \t}\n \tmode := \"race\"\n@@ -61,7 +65,8 @@ func instrumentInit() {\n \n \tif !cfg.BuildContext.CgoEnabled {\n \t\tfmt.Fprintf(os.Stderr, \"go %s: %s requires cgo; enable cgo by setting CGO_ENABLED=1\\n\", flag.Args()[0], modeFlag)\n-\t\tos.Exit(2)\n+\t\tbase.SetExitStatus(2)\n+\t\tbase.Exit()\n \t}\n \tforcedGcflags = append(forcedGcflags, modeFlag)\n \tforcedLdflags = append(forcedLdflags, modeFlag)"}, {"sha": "1acc61f3b383e97e723e491f75026d03c684e114", "filename": "libgo/go/cmd/go/script_test.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aef6e02ad1b49cd60e78caf9909e6c8aa517649/libgo%2Fgo%2Fcmd%2Fgo%2Fscript_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aef6e02ad1b49cd60e78caf9909e6c8aa517649/libgo%2Fgo%2Fcmd%2Fgo%2Fscript_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Fscript_test.go?ref=8aef6e02ad1b49cd60e78caf9909e6c8aa517649", "patch": "@@ -400,6 +400,7 @@ func (ts *testScript) cmdCc(neg bool, args []string) {\n \tvar b work.Builder\n \tb.Init()\n \tts.cmdExec(neg, append(b.GccCmd(\".\", \"\"), args...))\n+\tos.RemoveAll(b.WorkDir)\n }\n \n // cd changes to a different directory."}]}