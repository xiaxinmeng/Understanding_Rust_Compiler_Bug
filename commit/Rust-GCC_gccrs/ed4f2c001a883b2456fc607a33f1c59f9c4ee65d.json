{"sha": "ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ0ZjJjMDAxYTg4M2IyNDU2ZmM2MDdhMzNmMWM1OWY5YzRlZTY1ZA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2018-08-13T23:12:11Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2018-08-13T23:12:11Z"}, "message": "re PR c++/57891 (No diagnostic of narrowing conversion in non-type template argument)\n\n\tPR c++/57891\n\t* call.c (struct conversion): Add check_narrowing_const_only.\n\t(build_converted_constant_expr): Set check_narrowing and\n\tcheck_narrowing_const_only.  Give error if expr is error node.\n\t(convert_like_real): Pass it to check_narrowing.\n\t* cp-tree.h (check_narrowing): Add a default parameter.\n\t* decl.c (compute_array_index_type): Use input_location instead of\n\tlocation_of.\n\t* pt.c (convert_nontype_argument): Return NULL_TREE if tf_error.\n\t* typeck2.c (check_narrowing): Don't warn for instantiation-dependent\n\texpressions.  Call maybe_constant_value instead of\n\tfold_non_dependent_expr.  Don't mention { } in diagnostic.  Only check\n\tnarrowing for constants if CONST_ONLY.\n\n\t* g++.dg/cpp0x/Wnarrowing6.C: New test.\n\t* g++.dg/cpp0x/Wnarrowing7.C: New test.\n\t* g++.dg/cpp0x/Wnarrowing8.C: New test.\n\t* g++.dg/cpp0x/Wnarrowing9.C: New test.\n\t* g++.dg/cpp0x/Wnarrowing10.C: New test.\n\t* g++.dg/cpp0x/constexpr-47969.C: Adjust dg-error.\n\t* g++.dg/cpp0x/constexpr-ex2.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-targ.C: Likewise.\n\t* g++.dg/cpp0x/scoped_enum2.C: Likewise.\n\t* g++.dg/ext/stmtexpr15.C: Likewise.\n\t* g++.dg/gomp/pr47963.C: Likewise.\n\t* g++.dg/init/new37.C: Likewise.\n\t* g++.dg/init/new43.C: Likewise.\n\t* g++.dg/other/fold1.C: Likewise.\n\t* g++.dg/parse/array-size2.C: Likewise.\n\t* g++.dg/template/dependent-name3.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-data2.C: Add dg-error.\n\t* g++.dg/other/vrp1.C: Likewise.\n\t* g++.dg/template/char1.C: Likewise.\n\nFrom-SVN: r263523", "tree": {"sha": "bb59b5967b87790c2db09cc3bea564380edad161", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb59b5967b87790c2db09cc3bea564380edad161"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d66d6d15f1ab42c503025548d6ab9772a85ad791", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d66d6d15f1ab42c503025548d6ab9772a85ad791", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d66d6d15f1ab42c503025548d6ab9772a85ad791"}], "stats": {"total": 221, "additions": 159, "deletions": 62}, "files": [{"sha": "40b384a1e6202cf48838db47f87b5cf9e53a4014", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "patch": "@@ -1,3 +1,19 @@\n+2018-08-13  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/57891\n+\t* call.c (struct conversion): Add check_narrowing_const_only.\n+\t(build_converted_constant_expr): Set check_narrowing and\n+\tcheck_narrowing_const_only.  Give error if expr is error node.\n+\t(convert_like_real): Pass it to check_narrowing.\n+\t* cp-tree.h (check_narrowing): Add a default parameter.\n+\t* decl.c (compute_array_index_type): Use input_location instead of\n+\tlocation_of.\n+\t* pt.c (convert_nontype_argument): Return NULL_TREE if tf_error.\n+\t* typeck2.c (check_narrowing): Don't warn for instantiation-dependent\n+\texpressions.  Call maybe_constant_value instead of\n+\tfold_non_dependent_expr.  Don't mention { } in diagnostic.  Only check\n+\tnarrowing for constants if CONST_ONLY.\n+\n 2018-08-13  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/71625"}, {"sha": "62654a9e40724232bb9fa015e1b8276b0cd67b75", "filename": "gcc/cp/call.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "patch": "@@ -107,6 +107,9 @@ struct conversion {\n      binding a reference directly or decaying to a pointer.  */\n   BOOL_BITFIELD rvaluedness_matches_p: 1;\n   BOOL_BITFIELD check_narrowing: 1;\n+  /* Whether check_narrowing should only check TREE_CONSTANTs; used\n+     in build_converted_constant_expr.  */\n+  BOOL_BITFIELD check_narrowing_const_only: 1;\n   /* The type of the expression resulting from the conversion.  */\n   tree type;\n   union {\n@@ -4152,9 +4155,18 @@ build_converted_constant_expr (tree type, tree expr, tsubst_flags_t complain)\n     }\n \n   if (conv)\n-    expr = convert_like (conv, expr, complain);\n+    {\n+      conv->check_narrowing = true;\n+      conv->check_narrowing_const_only = true;\n+      expr = convert_like (conv, expr, complain);\n+    }\n   else\n-    expr = error_mark_node;\n+    {\n+      if (complain & tf_error)\n+\terror_at (loc, \"could not convert %qE from %qH to %qI\", expr,\n+\t\t  TREE_TYPE (expr), type);\n+      expr = error_mark_node;\n+    }\n \n   /* Free all the conversions we allocated.  */\n   obstack_free (&conversion_obstack, p);\n@@ -7142,7 +7154,8 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n     }\n \n   if (convs->check_narrowing\n-      && !check_narrowing (totype, expr, complain))\n+      && !check_narrowing (totype, expr, complain,\n+\t\t\t   convs->check_narrowing_const_only))\n     return error_mark_node;\n \n   warning_sentinel w (warn_zero_as_null_pointer_constant);"}, {"sha": "9608cf5334b4cfd5af6349df09bdd15fdf4cad53", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "patch": "@@ -7397,7 +7397,8 @@ extern int abstract_virtuals_error_sfinae\t(abstract_class_use, tree, tsubst_flag\n \n extern tree store_init_value\t\t\t(tree, tree, vec<tree, va_gc>**, int);\n extern tree split_nonconstant_init\t\t(tree, tree);\n-extern bool check_narrowing\t\t\t(tree, tree, tsubst_flags_t);\n+extern bool check_narrowing\t\t\t(tree, tree, tsubst_flags_t,\n+\t\t\t\t\t\t bool = false);\n extern tree digest_init\t\t\t\t(tree, tree, tsubst_flags_t);\n extern tree digest_init_flags\t\t\t(tree, tree, int, tsubst_flags_t);\n extern tree digest_nsdmi_init\t\t        (tree, tree, tsubst_flags_t);"}, {"sha": "9a2e3247946667d23d51383ff225318b048e5928", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "patch": "@@ -9702,7 +9702,7 @@ compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n     {\n       tree folded = cp_fully_fold (size);\n       if (TREE_CODE (folded) == INTEGER_CST)\n-\tpedwarn (location_of (size), OPT_Wpedantic,\n+\tpedwarn (input_location, OPT_Wpedantic,\n \t\t \"size of array is not an integral constant-expression\");\n       /* Use the folded result for VLAs, too; it will have resolved\n \t SIZEOF_EXPR.  */"}, {"sha": "cbb7b8ea853de2d4fed8830deb7ad78acadbf3eb", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "patch": "@@ -6682,7 +6682,9 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n \t     template-parameter.  */\n \t  expr = build_converted_constant_expr (type, expr, complain);\n \t  if (expr == error_mark_node)\n-\t    return error_mark_node;\n+\t    /* Make sure we return NULL_TREE only if we have really issued\n+\t       an error, as described above.  */\n+\t    return (complain & tf_error) ? NULL_TREE : error_mark_node;\n \t  expr = maybe_constant_value (expr);\n \t  expr = convert_from_reference (expr);\n \t}"}, {"sha": "674d08762b5ae44b952aa5b83fae17474a103c52", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "patch": "@@ -875,18 +875,22 @@ store_init_value (tree decl, tree init, vec<tree, va_gc>** cleanups, int flags)\n }\n \n \f\n-/* Give diagnostic about narrowing conversions within { }.  */\n+/* Give diagnostic about narrowing conversions within { }, or as part of\n+   a converted constant expression.  If CONST_ONLY, only check\n+   constants.  */\n \n bool\n-check_narrowing (tree type, tree init, tsubst_flags_t complain)\n+check_narrowing (tree type, tree init, tsubst_flags_t complain, bool const_only)\n {\n   tree ftype = unlowered_expr_type (init);\n   bool ok = true;\n   REAL_VALUE_TYPE d;\n \n   if (((!warn_narrowing || !(complain & tf_warning))\n        && cxx_dialect == cxx98)\n-      || !ARITHMETIC_TYPE_P (type))\n+      || !ARITHMETIC_TYPE_P (type)\n+      /* Don't emit bogus warnings with e.g. value-dependent trees.  */\n+      || instantiation_dependent_expression_p (init))\n     return ok;\n \n   if (BRACE_ENCLOSED_INITIALIZER_P (init)\n@@ -902,7 +906,11 @@ check_narrowing (tree type, tree init, tsubst_flags_t complain)\n       return ok;\n     }\n \n-  init = fold_non_dependent_expr (init, complain);\n+  init = maybe_constant_value (init);\n+\n+  /* If we were asked to only check constants, return early.  */\n+  if (const_only && !TREE_CONSTANT (init))\n+    return ok;\n \n   if (TREE_CODE (type) == INTEGER_TYPE\n       && TREE_CODE (ftype) == REAL_TYPE)\n@@ -967,7 +975,7 @@ check_narrowing (tree type, tree init, tsubst_flags_t complain)\n \t{\n \t  if (complain & tf_warning)\n \t    warning_at (loc, OPT_Wnarrowing, \"narrowing conversion of %qE \"\n-\t\t\t\"from %qH to %qI inside { } is ill-formed in C++11\",\n+\t\t\t\"from %qH to %qI is ill-formed in C++11\",\n \t\t\tinit, ftype, type);\n \t  ok = true;\n \t}\n@@ -977,8 +985,7 @@ check_narrowing (tree type, tree init, tsubst_flags_t complain)\n \t    {\n \t      if ((!almost_ok || pedantic)\n \t\t  && pedwarn (loc, OPT_Wnarrowing,\n-\t\t\t      \"narrowing conversion of %qE \"\n-\t\t\t      \"from %qH to %qI inside { }\",\n+\t\t\t      \"narrowing conversion of %qE from %qH to %qI\",\n \t\t\t      init, ftype, type)\n \t\t  && almost_ok)\n \t\tinform (loc, \" the expression has a constant value but is not \"\n@@ -991,8 +998,8 @@ check_narrowing (tree type, tree init, tsubst_flags_t complain)\n \t  int savederrorcount = errorcount;\n \t  global_dc->pedantic_errors = 1;\n \t  pedwarn (loc, OPT_Wnarrowing,\n-\t\t   \"narrowing conversion of %qE from %qH to %qI \"\n-\t\t   \"inside { }\", init, ftype, type);\n+\t\t   \"narrowing conversion of %qE from %qH to %qI \",\n+\t\t   init, ftype, type);\n \t  if (errorcount == savederrorcount)\n \t    ok = true;\n \t  global_dc->pedantic_errors = flag_pedantic_errors;"}, {"sha": "930db3a3514f17b7b373b452df941b05a9597c44", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "patch": "@@ -1,3 +1,26 @@\n+2018-08-13  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/57891\n+\t* g++.dg/cpp0x/Wnarrowing6.C: New test.\n+\t* g++.dg/cpp0x/Wnarrowing7.C: New test.\n+\t* g++.dg/cpp0x/Wnarrowing8.C: New test.\n+\t* g++.dg/cpp0x/Wnarrowing9.C: New test.\n+\t* g++.dg/cpp0x/Wnarrowing10.C: New test.\n+\t* g++.dg/cpp0x/constexpr-47969.C: Adjust dg-error.\n+\t* g++.dg/cpp0x/constexpr-ex2.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-targ.C: Likewise.\n+\t* g++.dg/cpp0x/scoped_enum2.C: Likewise.\n+\t* g++.dg/ext/stmtexpr15.C: Likewise.\n+\t* g++.dg/gomp/pr47963.C: Likewise.\n+\t* g++.dg/init/new37.C: Likewise.\n+\t* g++.dg/init/new43.C: Likewise.\n+\t* g++.dg/other/fold1.C: Likewise.\n+\t* g++.dg/parse/array-size2.C: Likewise.\n+\t* g++.dg/template/dependent-name3.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-data2.C: Add dg-error.\n+\t* g++.dg/other/vrp1.C: Likewise.\n+\t* g++.dg/template/char1.C: Likewise.\n+\n 2018-08-13  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* gcc.target/powerpc/pr56605.c: The generated code can have an AND"}, {"sha": "8414b53e342d0fe3416b6cb4d478acad0c55b28b", "filename": "gcc/testsuite/g++.dg/cpp0x/Wnarrowing10.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWnarrowing10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWnarrowing10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWnarrowing10.C?ref=ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/57891\n+// { dg-do compile { target c++11 } }\n+\n+template<int N, unsigned char M = N> struct S { char a[N]; };\n+S<1000> s; // { dg-error \"narrowing conversion\" }"}, {"sha": "989d277cd00107c99c7d815a9322c76f6b30ea12", "filename": "gcc/testsuite/g++.dg/cpp0x/Wnarrowing6.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWnarrowing6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWnarrowing6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWnarrowing6.C?ref=ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/57891\n+// { dg-do compile { target c++11 } }\n+\n+template<unsigned int> struct A {};\n+A<-1> a; // { dg-error \"narrowing conversion\" }\n+\n+template<signed char> struct B {};\n+B<1000> b; // { dg-error \"narrowing conversion\" }"}, {"sha": "099fdfb7d8167a205163f936ce7b0e332d05e078", "filename": "gcc/testsuite/g++.dg/cpp0x/Wnarrowing7.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWnarrowing7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWnarrowing7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWnarrowing7.C?ref=ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/57891\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wno-narrowing\" }\n+\n+template<unsigned int> struct A {};\n+A<-1> a;\n+\n+template<signed char> struct B {};\n+B<1000> b; // { dg-warning \"overflow\" }"}, {"sha": "39c924c9c6cf1d7ed52989ddf0a4eec3bbb434b9", "filename": "gcc/testsuite/g++.dg/cpp0x/Wnarrowing8.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWnarrowing8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWnarrowing8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWnarrowing8.C?ref=ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/57891\n+// { dg-do compile { target c++11 } }\n+\n+struct X { constexpr operator int () { return 1000; } };\n+template<signed char> struct C {};\n+C<X{}> c; // { dg-error \"narrowing conversion\" }"}, {"sha": "bc8a736ecb9ba58bc00d51be05018ba015bc12a6", "filename": "gcc/testsuite/g++.dg/cpp0x/Wnarrowing9.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWnarrowing9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWnarrowing9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWnarrowing9.C?ref=ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/57891\n+// { dg-do compile { target c++11 } }\n+\n+// N is value-dependent, don't warn.\n+template<int N> struct S { char a[N]; }; // { dg-bogus \"narrowing conversion\" }\n+S<1> s;"}, {"sha": "201ee17b41b68abe87fe7c50308514d49fd3dbe7", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-47969.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-47969.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-47969.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-47969.C?ref=ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "patch": "@@ -8,4 +8,4 @@ struct A\n \n constexpr A a = A();\n \n-int ar[a]; // { dg-error \"has non-integral type\" }\n+int ar[a]; // { dg-error \"could not convert|has non-integral type\" }"}, {"sha": "dee5ed8230148ce0cbfff21cb000362eba94836a", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-data2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-data2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-data2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-data2.C?ref=ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "patch": "@@ -43,4 +43,4 @@ extern template struct A3<int, 510>;\n \n // Use.\n A3<int, 1111> a31;\n-A3<char, 9999> a32;\t\t// { dg-warning \"overflow\" }\n+A3<char, 9999> a32;\t\t// { dg-error \"narrowing conversion\" }"}, {"sha": "ceae9cb75d36e2131afeae8fabe0b5fdf501fa36", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ex2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex2.C?ref=ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "patch": "@@ -18,5 +18,5 @@ constexpr A a = 42;\n \n X<a> x;\t    // OK: unique conversion to int\n int ar[X<a>::i]; // also OK\n-int ary[a]; // { dg-error \"ambiguous|conversion|array\" } ambiguous conversion\n+int ary[a]; // { dg-error \"could not convert|ambiguous|conversion|array\" } ambiguous conversion\n "}, {"sha": "0f1f113f92fb5257e3e36d322381760e2af944f4", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-targ.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-targ.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-targ.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-targ.C?ref=ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "patch": "@@ -10,4 +10,4 @@ struct B\n { };\n \n constexpr A a { };\n-B<a> b;\t\t\t // { dg-error \"template argument|converted constant\" }\n+B<a> b;\t\t\t // { dg-error \"template argument|converted constant|could not convert\" }"}, {"sha": "456b0daedd189f57c600c1e875882fd7c6300305", "filename": "gcc/testsuite/g++.dg/cpp0x/scoped_enum2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fscoped_enum2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fscoped_enum2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fscoped_enum2.C?ref=ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "patch": "@@ -4,8 +4,8 @@ enum class E { e = 10 };\n enum E2 { e2 = 10 };\n \n struct C {\n-  int arr[E::e];    // { dg-error \"non-integral type\" }\n+  int arr[E::e];    // { dg-error \"could not convert|non-integral type\" }\n   int arr2[E2::e2]; // OK\n-  int i: E::e;\t    // { dg-error \"non-integral type\" }\n+  int i: E::e;\t    // { dg-error \"could not convert|non-integral type\" }\n   int i2: E2::e2;   // OK\n };"}, {"sha": "1a60a0d3cad2bd021a60daf27b8c0b909770c3c6", "filename": "gcc/testsuite/g++.dg/ext/stmtexpr15.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr15.C?ref=ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "patch": "@@ -3,5 +3,5 @@\n \n void foo()\n {\n-  int x[({ return; })];\t\t// { dg-error \"non-integral\" }\n+  int x[({ return; })];\t\t// { dg-error \"could not convert|non-integral\" }\n }"}, {"sha": "6be4c0e18fb37bb6347061d382ef640b826d2313", "filename": "gcc/testsuite/g++.dg/gomp/pr47963.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr47963.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr47963.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fpr47963.C?ref=ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "patch": "@@ -5,7 +5,7 @@\n void\n foo (float n)\n {\n-  int A[n][n];\t// { dg-error \"has non-integral type|converted constant expression\" }\n+  int A[n][n];\t// { dg-error \"could not convert|has non-integral type|converted constant expression\" }\n #pragma omp parallel private(A)\n   ;\n }"}, {"sha": "2a42fda33dc5c383e358d0f3bdfee1ebd4b9832c", "filename": "gcc/testsuite/g++.dg/init/new37.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew37.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew37.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew37.C?ref=ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "patch": "@@ -32,7 +32,7 @@ template <typename T>\n void *\n callnew_fail_3()\n {\n-  return new T[2][T::n]; // { dg-error \"size of array has non-integral type|converted constant expression\" }\n+  return new T[2][T::n]; // { dg-error \"could not convert|size of array has non-integral type|converted constant expression\" }\n }\n \n struct T1 {"}, {"sha": "aa40b42946974ec11ef258354c3c193e4ace226d", "filename": "gcc/testsuite/g++.dg/init/new43.C", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew43.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew43.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew43.C?ref=ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "patch": "@@ -31,35 +31,35 @@ void test_literal ()\n \n     // Verify integer literal.\n     p = new char [-1];           // { dg-error \"size of array is negative\" }\n-    p = new char [2][-3];        // { dg-error \"size of array is negative\" }\n+    p = new char [2][-3];        // { dg-error \"size of array|narrowing conversion\" }\n     p = new char [-4][5];        // { dg-error \"size of array is negative\" }\n-    p = new char [-6][-7];       // { dg-error \"size of array is negative\" }\n+    p = new char [-6][-7];       // { dg-error \"size of array|narrowing conversion\" }\n \n     p = new (p) char [-1];       // { dg-error \"size of array is negative\" }\n-    p = new (p) char [2][-3];    // { dg-error \"size of array is negative\" }\n+    p = new (p) char [2][-3];    // { dg-error \"size of array|narrowing conversion\" }\n     p = new (p) char [-4][5];    // { dg-error \"size of array is negative\" }\n-    p = new (p) char [-6][-7];   // { dg-error \"size of array is negative\" }\n+    p = new (p) char [-6][-7];   // { dg-error \"size of array|narrowing conversion\" }\n \n     p = new (p) A [-1];          // { dg-error \"size of array is negative\" }\n-    p = new (p) A [2][-3];       // { dg-error \"size of array is negative\" }\n+    p = new (p) A [2][-3];       // { dg-error \"size of array|narrowing conversion\" }\n     p = new (p) A [-4][5];       // { dg-error \"size of array is negative\" }\n-    p = new (p) A [-6][-7];      // { dg-error \"size of array is negative\" }\n+    p = new (p) A [-6][-7];      // { dg-error \"size of array|narrowing conversion\" }\n \n     p = new (p) B [-1];          // { dg-error \"size of array is negative\" }\n-    p = new (p) B [2][-3];       // { dg-error \"size of array is negative\" }\n+    p = new (p) B [2][-3];       // { dg-error \"size of array|narrowing conversion\" }\n     p = new (p) B [-4][5];       // { dg-error \"size of array is negative\" }\n-    p = new (p) B [-6][-7];      // { dg-error \"size of array is negative\" }\n+    p = new (p) B [-6][-7];      // { dg-error \"size of array|narrowing conversion\" }\n \n     p = new (&b) B [-1];          // { dg-error \"size of array is negative\" }\n-    p = new (&b) B [2][-3];       // { dg-error \"size of array is negative\" }\n+    p = new (&b) B [2][-3];       // { dg-error \"size of array|narrowing conversion\" }\n     p = new (&b) B [-4][5];       // { dg-error \"size of array is negative\" }\n-    p = new (&b) B [-6][-7];      // { dg-error \"size of array is negative\" }\n+    p = new (&b) B [-6][-7];      // { dg-error \"size of array|narrowing conversion\" }\n \n     p = new char [1 - 2];         // { dg-error \"size of array is negative\" }\n     p = new (p) char [2 - 3];     // { dg-error \"size of array is negative\" }\n     p = new A [2 < 1 ? -1 : -2];  // { dg-error \"size of array is negative\" }\n     p = new (p) B [2 - 3 * 2];    // { dg-error \"size of array is negative\" }\n-    p = new (&b) B [1][2 - 3 * 2];// { dg-error \"size of array is negative\" }\n+    p = new (&b) B [1][2 - 3 * 2];// { dg-error \"size of array|narrowing conversion\" }\n }\n \n void test_constant_expression ()\n@@ -79,35 +79,35 @@ void test_constant_expression ()\n \n     // Verify constant expression.\n     p = new char [i1];           // { dg-error \"size of array is negative\" }\n-    p = new char [2][i3];        // { dg-error \"size of array is negative\" }\n+    p = new char [2][i3];        // { dg-error \"size of array|narrowing conversion\" }\n     p = new char [i4][5];        // { dg-error \"size of array is negative\" }\n-    p = new char [i6][i7];       // { dg-error \"size of array is negative\" }\n+    p = new char [i6][i7];       // { dg-error \"size of array|narrowing conversion\" }\n \n     p = new (p) char [i1];       // { dg-error \"size of array is negative\" }\n-    p = new (p) char [2][i3];    // { dg-error \"size of array is negative\" }\n+    p = new (p) char [2][i3];    // { dg-error \"size of array|narrowing conversion\" }\n     p = new (p) char [i4][5];    // { dg-error \"size of array is negative\" }\n-    p = new (p) char [i6][i7];   // { dg-error \"size of array is negative\" }\n+    p = new (p) char [i6][i7];   // { dg-error \"size of array|narrowing conversion\" }\n \n     p = new (p) A [i1];          // { dg-error \"size of array is negative\" }\n-    p = new (p) A [2][i3];       // { dg-error \"size of array is negative\" }\n+    p = new (p) A [2][i3];       // { dg-error \"size of array|narrowing conversion\" }\n     p = new (p) A [i4][5];       // { dg-error \"size of array is negative\" }\n-    p = new (p) A [i6][i7];      // { dg-error \"size of array is negative\" }\n+    p = new (p) A [i6][i7];      // { dg-error \"size of array|narrowing conversion\" }\n \n     p = new (p) B [i1];          // { dg-error \"size of array is negative\" }\n-    p = new (p) B [2][i3];       // { dg-error \"size of array is negative\" }\n+    p = new (p) B [2][i3];       // { dg-error \"size of array|narrowing conversion\" }\n     p = new (p) B [i4][5];       // { dg-error \"size of array is negative\" }\n-    p = new (p) B [i6][i7];      // { dg-error \"size of array is negative\" }\n+    p = new (p) B [i6][i7];      // { dg-error \"size of array|narrowing conversion\" }\n \n     p = new (&b) B [i1];          // { dg-error \"size of array is negative\" }\n-    p = new (&b) B [2][i3];       // { dg-error \"size of array is negative\" }\n+    p = new (&b) B [2][i3];       // { dg-error \"size of array|narrowing conversion\" }\n     p = new (&b) B [i4][5];       // { dg-error \"size of array is negative\" }\n-    p = new (&b) B [i6][i7];      // { dg-error \"size of array is negative\" }\n+    p = new (&b) B [i6][i7];      // { dg-error \"size of array|narrowing conversion\" }\n \n     p = new short [i1 - 2];       // { dg-error \"size of array is negative\" }\n     p = new (p) bool [i2 - 3];    // { dg-error \"size of array is negative\" }\n     p = new A [2 < 1 ? i1 : i2];  // { dg-error \"size of array is negative\" }\n     p = new (p) B [2 + i3 * 2];   // { dg-error \"size of array is negative\" }\n-    p = new (&b) B [1][i1 - 3 * 2];// { dg-error \"size of array is negative\" }\n+    p = new (&b) B [1][i1 - 3 * 2];// { dg-error \"size of array|narrowing conversion\" }\n }\n \n void test_constexpr ()\n@@ -132,33 +132,33 @@ void test_constexpr ()\n \n     // Verify constant expression.\n     p = new char [s1];           // { dg-error \"size of array is negative\" }\n-    p = new char [2][s3];        // { dg-error \"size of array is negative\" }\n+    p = new char [2][s3];        // { dg-error \"size of array|narrowing conversion\" }\n     p = new char [s4][5];        // { dg-error \"size of array is negative\" }\n-    p = new char [s6][s7];       // { dg-error \"size of array is negative\" }\n+    p = new char [s6][s7];       // { dg-error \"size of array|narrowing conversion\" }\n \n     p = new (p) char [s1];       // { dg-error \"size of array is negative\" }\n-    p = new (p) char [2][s3];    // { dg-error \"size of array is negative\" }\n+    p = new (p) char [2][s3];    // { dg-error \"size of array|narrowing conversion\" }\n     p = new (p) char [s4][5];    // { dg-error \"size of array is negative\" }\n-    p = new (p) char [s6][s7];   // { dg-error \"size of array is negative\" }\n+    p = new (p) char [s6][s7];   // { dg-error \"size of array|narrowing conversion\" }\n \n     p = new (p) A [s1];          // { dg-error \"size of array is negative\" }\n-    p = new (p) A [2][s3];       // { dg-error \"size of array is negative\" }\n+    p = new (p) A [2][s3];       // { dg-error \"size of array|narrowing conversion\" }\n     p = new (p) A [s4][5];       // { dg-error \"size of array is negative\" }\n-    p = new (p) A [s6][s7];      // { dg-error \"size of array is negative\" }\n+    p = new (p) A [s6][s7];      // { dg-error \"size of array|narrowing conversion\" }\n \n     p = new (p) B [s1];          // { dg-error \"size of array is negative\" }\n-    p = new (p) B [2][s3];       // { dg-error \"size of array is negative\" }\n+    p = new (p) B [2][s3];       // { dg-error \"size of array|narrowing conversion\" }\n     p = new (p) B [s4][5];       // { dg-error \"size of array is negative\" }\n-    p = new (p) B [s6][s7];      // { dg-error \"size of array is negative\" }\n+    p = new (p) B [s6][s7];      // { dg-error \"size of array|narrowing conversion\" }\n \n     p = new (&b) B [s1];          // { dg-error \"size of array is negative\" }\n-    p = new (&b) B [2][s3];       // { dg-error \"size of array is negative\" }\n+    p = new (&b) B [2][s3];       // { dg-error \"size of array|narrowing conversion\" }\n     p = new (&b) B [s4][5];       // { dg-error \"size of array is negative\" }\n-    p = new (&b) B [s6][s7];      // { dg-error \"size of array is negative\" }\n+    p = new (&b) B [s6][s7];      // { dg-error \"size of array|narrowing conversion\" }\n \n     p = new int [s1 + s2];           // { dg-error \"size of array is negative\" }\n     p = new (p) long [2 * s3];       // { dg-error \"size of array is negative\" }\n     p = new A [s2 < s1 ? s1 : s2];   // { dg-error \"size of array is negative\" }\n     p = new (p) B [s7 - s2 * 2];     // { dg-error \"size of array is negative\" }\n-    p = new (&b) B [9][s4 - s1 * 2]; // { dg-error \"size of array is negative\" }\n+    p = new (&b) B [9][s4 - s1 * 2]; // { dg-error \"size of array|narrowing conversion\" }\n }"}, {"sha": "bf074038b04fa245b59b0106d97990a35ab503fc", "filename": "gcc/testsuite/g++.dg/other/fold1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffold1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffold1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffold1.C?ref=ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "patch": "@@ -4,5 +4,5 @@\n struct A\n {\n     static const int i = i;  // { dg-error \"not declared\" }\n-    int x[i];\t\t     // { dg-error \"constant-expression\" }\n+    int x[i];\t\t     // { dg-error \"constant-expression|narrowing conversion\" }\n };"}, {"sha": "466a15b4cbb2906d786c410a053772834141d78c", "filename": "gcc/testsuite/g++.dg/other/vrp1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fvrp1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fvrp1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fvrp1.C?ref=ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "patch": "@@ -9,4 +9,4 @@ long long mod (long long l, long long r)\n     return 0LL;\n   return l % r;\n }\n-template long long mod<-0x8000000000000000LL> (long long, long long);\n+template long long mod<-0x8000000000000000LL> (long long, long long); // { dg-error \"template-id\" \"\" { target { c++11 } } }"}, {"sha": "997b95eed1adcd2de29dc1a0445ea0ed3efd997c", "filename": "gcc/testsuite/g++.dg/parse/array-size2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Farray-size2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Farray-size2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Farray-size2.C?ref=ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "patch": "@@ -14,7 +14,7 @@ extern void bar (char *, char *);\n void\n foo (void)\n {\n-  char g[(char *) &((struct S *) 0)->b - (char *) 0]; // { dg-error \"constant\" }\n+  char g[(char *) &((struct S *) 0)->b - (char *) 0]; // { dg-error \"constant|narrowing conversion\" }\n   char h[(__SIZE_TYPE__) &((struct S *) 8)->b];\t      // { dg-error \"constant\" }\n   bar (g, h);\n }"}, {"sha": "a6cffaaf0242464b961e0d08f4cc4604259932c0", "filename": "gcc/testsuite/g++.dg/template/char1.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fchar1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fchar1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fchar1.C?ref=ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "patch": "@@ -1,4 +1,5 @@\n template <class CharType, CharType line_terminator = 0>\n class String {};\n \n-String<signed char, 255> s;\t\t// { dg-warning \"overflow\" }\n+String<signed char, 255> s;\t\t// { dg-error \"narrowing conversion\" \"\" { target c++11 } }\n+// { dg-warning \"overflow\" \"\" { target c++98_only } .-1 }"}, {"sha": "f9d14055a11b3b5fd79596b262dce0c07eb1fc6b", "filename": "gcc/testsuite/g++.dg/template/dependent-name3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed4f2c001a883b2456fc607a33f1c59f9c4ee65d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name3.C?ref=ed4f2c001a883b2456fc607a33f1c59f9c4ee65d", "patch": "@@ -11,7 +11,7 @@ template<int I> struct A\n template<int N> struct B\n {\n   int x[A<N>::zero];       // { dg-error \"zero\" }\n-  int y[A<N>::minus_one];  // { dg-error \"negative\" }\n+  int y[A<N>::minus_one];  // { dg-error \"size of array|narrowing conversion\" }\n };\n \n B<0> b;"}]}