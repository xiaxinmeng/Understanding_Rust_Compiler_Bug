{"sha": "b3bae5e2bf8b2f06d687adb32740f6258b5e3b36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNiYWU1ZTJiZjhiMmYwNmQ2ODdhZGIzMjc0MGY2MjU4YjVlM2IzNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2001-02-22T11:46:33Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2001-02-22T11:46:33Z"}, "message": "cp-tree.h (struct lang_decl_inlined_fns): New.\n\n\t* cp-tree.h (struct lang_decl_inlined_fns): New.\n\t(struct lang_decls): Add inlined_fns.\n\t(DECL_INLINED_FNS): New macro.\n\t* optimize.c (struct inline_data): Add inlined_fns.\n\t(declare_return_variable): Use VARRAY_ACTIVE_SIZE macro.\n\t(inlinable_function_p): Likewise, fix typo in comment,\n\tfunction is not inlinable if it already inlined function currently\n\tbeing optimized.\n\t(expand_call_inline): Add fn to inlined_fns if neccessary.\n\t(optimize_function): Initialize inlined_fns.\n\tSave inlined_fns into DECL_INLINED_FNS after expanding inlines.\n\t* decl.c (mark_inlined_fns): New function.\n\t(lang_mark_tree): Call it.\n\n\t* g++.old-deja/g++.other/inline20.C: New test.\n\nFrom-SVN: r39977", "tree": {"sha": "ca3614007d0819a932a044965511b4b6c9fbc586", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca3614007d0819a932a044965511b4b6c9fbc586"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3bae5e2bf8b2f06d687adb32740f6258b5e3b36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3bae5e2bf8b2f06d687adb32740f6258b5e3b36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3bae5e2bf8b2f06d687adb32740f6258b5e3b36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3bae5e2bf8b2f06d687adb32740f6258b5e3b36/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "35723595ab2119465335b36a7fc599a96c91d461", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35723595ab2119465335b36a7fc599a96c91d461", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35723595ab2119465335b36a7fc599a96c91d461"}], "stats": {"total": 155, "additions": 151, "deletions": 4}, "files": [{"sha": "5686f48a7f546093fc9cfc8139225fefc9e897d1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3bae5e2bf8b2f06d687adb32740f6258b5e3b36/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3bae5e2bf8b2f06d687adb32740f6258b5e3b36/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b3bae5e2bf8b2f06d687adb32740f6258b5e3b36", "patch": "@@ -1,3 +1,19 @@\n+2001-02-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* cp-tree.h (struct lang_decl_inlined_fns): New.\n+\t(struct lang_decls): Add inlined_fns.\n+\t(DECL_INLINED_FNS): New macro.\n+\t* optimize.c (struct inline_data): Add inlined_fns.\n+\t(declare_return_variable): Use VARRAY_ACTIVE_SIZE macro.\n+\t(inlinable_function_p): Likewise, fix typo in comment,\n+\tfunction is not inlinable if it already inlined function currently\n+\tbeing optimized.\n+\t(expand_call_inline): Add fn to inlined_fns if neccessary.\n+\t(optimize_function): Initialize inlined_fns.\n+\tSave inlined_fns into DECL_INLINED_FNS after expanding inlines.\n+\t* decl.c (mark_inlined_fns): New function.\n+\t(lang_mark_tree): Call it.\n+\n 2001-02-21  Jason Merrill  <jason@redhat.com>\n \n \t* cp-tree.h (struct lang_decl_flags): Remove uninlinable flag."}, {"sha": "2aca7d1de1fa17144abec7273f90a105da91a4ad", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3bae5e2bf8b2f06d687adb32740f6258b5e3b36/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3bae5e2bf8b2f06d687adb32740f6258b5e3b36/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b3bae5e2bf8b2f06d687adb32740f6258b5e3b36", "patch": "@@ -1855,6 +1855,12 @@ struct lang_decl_flags\n \n struct unparsed_text;\n \n+struct lang_decl_inlined_fns\n+{\n+  size_t num_fns;\n+  tree fns[1];\n+};\n+\n struct lang_decl\n {\n   struct lang_decl_flags decl_flags;\n@@ -1868,6 +1874,9 @@ struct lang_decl\n   /* In a FUNCTION_DECL, this is DECL_CLONED_FUNCTION.  */\n   tree cloned_function;\n \n+  /* In a FUNCTION_DECL, this is a list of trees inlined into its body.  */\n+  struct lang_decl_inlined_fns *inlined_fns;\n+\n   union\n   {\n     tree sorted_fields;\n@@ -1978,6 +1987,10 @@ struct lang_decl\n #define DECL_CLONED_FUNCTION(NODE) \\\n   (DECL_LANG_SPECIFIC (NODE)->cloned_function)\n \n+/* List of FUNCION_DECLs inlined into this function's body.  */\n+#define DECL_INLINED_FNS(NODE) \\\n+  (DECL_LANG_SPECIFIC (NODE)->inlined_fns)\n+\n /* Non-zero if the VTT parm has been added to NODE.  */\n #define DECL_HAS_VTT_PARM_P(NODE) \\\n   (DECL_LANG_SPECIFIC (NODE)->decl_flags.has_vtt_parm_p)"}, {"sha": "39008956f4af09d8b6d3e3db84b0511c97430be6", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3bae5e2bf8b2f06d687adb32740f6258b5e3b36/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3bae5e2bf8b2f06d687adb32740f6258b5e3b36/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b3bae5e2bf8b2f06d687adb32740f6258b5e3b36", "patch": "@@ -14332,6 +14332,19 @@ pop_cp_function_context (f)\n   f->language = 0;\n }\n \n+/* Mark I for GC.  */\n+\n+static void\n+mark_inlined_fns (i)\n+     struct lang_decl_inlined_fns *i;\n+{\n+  int n;\n+\n+  for (n = i->num_fns - 1; n >= 0; n--)\n+    ggc_mark_tree (i->fns [n]);\n+  ggc_set_mark (i);\n+}\n+\n /* Mark P for GC.  */\n \n static void\n@@ -14418,6 +14431,8 @@ lang_mark_tree (t)\n \t      ggc_mark_tree (ld->befriending_classes);\n \t      ggc_mark_tree (ld->context);\n \t      ggc_mark_tree (ld->cloned_function);\n+\t      if (ld->inlined_fns)\n+\t\tmark_inlined_fns (ld->inlined_fns);\n \t      if (TREE_CODE (t) == TYPE_DECL)\n \t\tggc_mark_tree (ld->u.sorted_fields);\n \t      else if (TREE_CODE (t) == FUNCTION_DECL"}, {"sha": "9850c6ff9718f16636c9aec39c18c4fbc4e26ba9", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 45, "deletions": 4, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3bae5e2bf8b2f06d687adb32740f6258b5e3b36/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3bae5e2bf8b2f06d687adb32740f6258b5e3b36/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=b3bae5e2bf8b2f06d687adb32740f6258b5e3b36", "patch": "@@ -28,6 +28,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"input.h\"\n #include \"integrate.h\"\n #include \"varray.h\"\n+#include \"ggc.h\"\n \n /* To Do:\n \n@@ -62,6 +63,8 @@ typedef struct inline_data\n   int in_target_cleanup_p;\n   /* A stack of the TARGET_EXPRs that we are currently processing.  */\n   varray_type target_exprs;\n+  /* A list of the functions current function has inlined.  */\n+  varray_type inlined_fns;\n } inline_data;\n \n /* Prototypes.  */\n@@ -520,7 +523,7 @@ declare_return_variable (id, use_stmt)\n      references to the RESULT into references to the target.  */\n   if (aggregate_return_p)\n     {\n-      my_friendly_assert (id->target_exprs->elements_used != 0,\n+      my_friendly_assert (VARRAY_ACTIVE_SIZE (id->target_exprs) != 0,\n \t\t\t  20000430);\n       var = TREE_OPERAND (VARRAY_TOP_TREE (id->target_exprs), 0);\n       my_friendly_assert \n@@ -605,14 +608,23 @@ inlinable_function_p (fn, id)\n     inlinable = 0;\n \n   /* Don't do recursive inlining, either.  We don't record this in\n-     DECL_UNLINABLE; we may be able to inline this function later.  */\n+     DECL_UNINLINABLE; we may be able to inline this function later.  */\n   if (inlinable)\n     {\n       size_t i;\n \n-      for (i = 0; i < id->fns->elements_used; ++i)\n+      for (i = 0; i < VARRAY_ACTIVE_SIZE (id->fns); ++i)\n \tif (VARRAY_TREE (id->fns, i) == fn)\n-\t  inlinable = 0;\n+\t  return 0;\n+\n+      if (inlinable && DECL_LANG_SPECIFIC (fn) && DECL_INLINED_FNS (fn))\n+\t{\n+\t  struct lang_decl_inlined_fns *ifn = DECL_INLINED_FNS (fn);\n+\n+\t  for (i = 0; i < ifn->num_fns; ++i)\n+\t    if (ifn->fns [i] == VARRAY_TREE (id->fns, 0))\n+\t      return 0;\n+\t}\n     }\n \n   /* Return the result.  */\n@@ -728,6 +740,19 @@ expand_call_inline (tp, walk_subtrees, data)\n      recursing into it.  */\n   VARRAY_PUSH_TREE (id->fns, fn);\n \n+  /* Record the function we are about to inline if optimize_function\n+     has not been called on it yet and we don't have it in the list.  */\n+  if (DECL_LANG_SPECIFIC (fn) && !DECL_INLINED_FNS (fn))\n+    {\n+      int i;\n+\n+      for (i = VARRAY_ACTIVE_SIZE (id->inlined_fns) - 1; i >= 0; i--)\n+\tif (VARRAY_TREE (id->inlined_fns, i) == fn)\n+\t  break;\n+      if (i < 0)\n+\tVARRAY_PUSH_TREE (id->inlined_fns, fn);\n+    }\n+\n   /* Return statements in the function body will be replaced by jumps\n      to the RET_LABEL.  */\n   id->ret_label = build_decl (LABEL_DECL, NULL_TREE, NULL_TREE);\n@@ -874,13 +899,29 @@ optimize_function (fn)\n       /* Create the stack of TARGET_EXPRs.  */\n       VARRAY_TREE_INIT (id.target_exprs, 32, \"target_exprs\");\n \n+      /* Create the list of functions this call will inline.  */\n+      VARRAY_TREE_INIT (id.inlined_fns, 32, \"inlined_fns\");\n+\n       /* Replace all calls to inline functions with the bodies of those\n \t functions.  */\n       expand_calls_inline (&DECL_SAVED_TREE (fn), &id);\n \n       /* Clean up.  */\n       VARRAY_FREE (id.fns);\n       VARRAY_FREE (id.target_exprs);\n+      if (DECL_LANG_SPECIFIC (fn))\n+\t{\n+\t  struct lang_decl_inlined_fns *ifn;\n+\n+\t  ifn = ggc_alloc (sizeof (struct lang_decl_inlined_fns)\n+\t\t\t   + (VARRAY_ACTIVE_SIZE (id.inlined_fns) - 1)\n+\t\t\t     * sizeof (tree));\n+\t  ifn->num_fns = VARRAY_ACTIVE_SIZE (id.inlined_fns);\n+\t  memcpy (&ifn->fns[0], &VARRAY_TREE (id.inlined_fns, 0),\n+\t\t  ifn->num_fns * sizeof (tree));\n+\t  DECL_INLINED_FNS (fn) = ifn;\n+\t}\n+      VARRAY_FREE (id.inlined_fns);\n     }\n \n   /* Undo the call to ggc_push_context above.  */"}, {"sha": "a41d374f5c8aa1765477610834e2326661d1de48", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3bae5e2bf8b2f06d687adb32740f6258b5e3b36/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3bae5e2bf8b2f06d687adb32740f6258b5e3b36/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b3bae5e2bf8b2f06d687adb32740f6258b5e3b36", "patch": "@@ -1,3 +1,7 @@\n+2001-02-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.old-deja/g++.other/inline20.C: New test.\n+\n Wed Feb 21 12:38:22 2001  Ovidiu Predescu  <ovidiu@cup.hp.com>\n \n \t* objc/execute/nested-1.m: Added (contributed by Nicola Pero)."}, {"sha": "a4af375f1642e1d25f46c88c08b0da33e3392d28", "filename": "gcc/testsuite/g++.old-deja/g++.other/inline20.C", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3bae5e2bf8b2f06d687adb32740f6258b5e3b36/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finline20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3bae5e2bf8b2f06d687adb32740f6258b5e3b36/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finline20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finline20.C?ref=b3bae5e2bf8b2f06d687adb32740f6258b5e3b36", "patch": "@@ -0,0 +1,58 @@\n+// Build don't link:\n+\n+struct A {\n+  int a, b, c, d;\n+};\n+\n+inline void foo (int, A &);\n+\n+struct D {\n+};\n+\n+struct E: public D {\n+  void f (A &y)\n+  {\n+    foo (1, y);\n+  }\n+};\n+\n+struct F: public D {\n+  void f (A &y)\n+  {\n+    foo (2, y);\n+  }\n+};\n+\n+E *d;\n+F *e;\n+\n+inline int baz (int y)\n+{\n+  A a;\n+  if (y) {\n+    d->f (a);\n+  } else {\n+    e->f (a);\n+  }\n+  return 0;\n+}\n+\n+inline void foo (int y, A &z)\n+{\n+  z.a = baz (y);\n+  z.b = baz (y);\n+  z.c = baz (y);\n+  z.d = baz (y);\n+}\n+\n+struct G {\n+  E a;\n+  F b;\n+  void bar (A &);\n+};\n+\n+void G::bar(A &y)\n+{\n+  a.f(y);\n+  b.f(y);\n+}"}]}