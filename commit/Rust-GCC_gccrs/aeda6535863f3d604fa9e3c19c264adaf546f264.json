{"sha": "aeda6535863f3d604fa9e3c19c264adaf546f264", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVkYTY1MzU4NjNmM2Q2MDRmYTllM2MxOWMyNjRhZGFmNTQ2ZjI2NA==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2009-11-25T04:50:18Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-11-25T04:50:18Z"}, "message": "graphite-scop-detection.c (stmt_simple_memref_p): Removed.\n\n2009-09-17  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-scop-detection.c (stmt_simple_memref_p): Removed.\n\t(is_simple_operand): Remove call to stmt_simple_memref_p.\n\t(stmt_simple_for_scop_p): Update call to is_simple_operand.\n\nFrom-SVN: r154552", "tree": {"sha": "75cc31d202fc5c648eeb06d3338e8193e4e0d894", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75cc31d202fc5c648eeb06d3338e8193e4e0d894"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aeda6535863f3d604fa9e3c19c264adaf546f264", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeda6535863f3d604fa9e3c19c264adaf546f264", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeda6535863f3d604fa9e3c19c264adaf546f264", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeda6535863f3d604fa9e3c19c264adaf546f264/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8971eb91f7442c2e6391f4a8b0226de1bfda0a6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8971eb91f7442c2e6391f4a8b0226de1bfda0a6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8971eb91f7442c2e6391f4a8b0226de1bfda0a6f"}], "stats": {"total": 105, "additions": 34, "deletions": 71}, "files": [{"sha": "c9e5513a5ad91116926c396cb91d05a5ac59df8e", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeda6535863f3d604fa9e3c19c264adaf546f264/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeda6535863f3d604fa9e3c19c264adaf546f264/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=aeda6535863f3d604fa9e3c19c264adaf546f264", "patch": "@@ -1,3 +1,9 @@\n+2009-09-17  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-scop-detection.c (stmt_simple_memref_p): Removed.\n+\t(is_simple_operand): Remove call to stmt_simple_memref_p.\n+\t(stmt_simple_for_scop_p): Update call to is_simple_operand.\n+\n 2009-09-17  David Edelsohn  <edelsohn@gnu.org>\n \n \t* testsuite/gcc.dg/graphite/interchange-mvt.c: New File."}, {"sha": "228f0c07915557f790576e167fc9b89192498f39", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 28, "deletions": 71, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeda6535863f3d604fa9e3c19c264adaf546f264/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeda6535863f3d604fa9e3c19c264adaf546f264/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=aeda6535863f3d604fa9e3c19c264adaf546f264", "patch": "@@ -249,29 +249,6 @@ graphite_can_represent_expr (basic_block scop_entry, loop_p loop,\n   return graphite_can_represent_scev (scev, outermost_loop->num);\n }\n \n-/* Return false if the tree_code of the operand OP or any of its operands\n-   is component_ref.  */\n-\n-static bool\n-exclude_component_ref (tree op)\n-{\n-  int i;\n-  int len;\n-\n-  if (!op)\n-    return true;\n-\n-  if (TREE_CODE (op) == COMPONENT_REF)\n-    return false;\n-\n-  len = TREE_OPERAND_LENGTH (op);\n-  for (i = 0; i < len; ++i)\n-    if (!exclude_component_ref (TREE_OPERAND (op, i)))\n-      return false;\n-\n-  return true;\n-}\n-\n /* Return true if the data references of STMT can be represented by\n    Graphite.  */\n \n@@ -300,53 +277,39 @@ stmt_has_simple_data_refs_p (loop_p outermost_loop, gimple stmt)\n   return res;\n }\n \n-/* Return true if we can create an affine data-ref for OP in STMT\n-   in regards to OUTERMOST_LOOP.  */\n+/* Return false if the TREE_CODE of the operand OP or any of its operands\n+   is a COMPONENT_REF.  */\n \n static bool\n-stmt_simple_memref_p (loop_p outermost_loop, gimple stmt, tree op)\n+exclude_component_ref (tree op)\n {\n-  data_reference_p dr;\n-  unsigned int i;\n-  VEC(tree,heap) *fns;\n-  tree t;\n-  bool res = true;\n+  int i;\n+  int len;\n \n-  dr = create_data_ref (outermost_loop, op, stmt, true);\n-  fns = DR_ACCESS_FNS (dr);\n+  if (!op)\n+    return true;\n \n-  for (i = 0; VEC_iterate (tree, fns, i, t); i++)\n-    if (!graphite_can_represent_scev (t, outermost_loop->num))\n-      {\n-\tres = false;\n-\tbreak;\n-      }\n+  if (TREE_CODE (op) == COMPONENT_REF)\n+    return false;\n \n-  free_data_ref (dr);\n-  return res;\n+  len = TREE_OPERAND_LENGTH (op);\n+  for (i = 0; i < len; ++i)\n+    if (!exclude_component_ref (TREE_OPERAND (op, i)))\n+      return false;\n+\n+  return true;\n }\n \n /* Return true if the operand OP used in STMT is simple in regards to\n    OUTERMOST_LOOP.  */\n \n-static bool\n-is_simple_operand (loop_p outermost_loop, gimple stmt, tree op)\n+static inline bool\n+is_simple_operand (tree op)\n {\n-  /* It is not a simple operand when it is a declaration,  */\n-  if (DECL_P (op))\n-      return false;\n-\n-  /* or a structure,  */\n-  if (AGGREGATE_TYPE_P (TREE_TYPE (op)))\n-      return false;\n-\n-  /* or a memory access that cannot be analyzed by the data reference\n-     analysis.  */\n-  if (handled_component_p (op) || INDIRECT_REF_P (op))\n-    if (!stmt_simple_memref_p (outermost_loop, stmt, op))\n-      return false;\n-\n-  return exclude_component_ref (op);\n+  /* It is not a simple operand when it is a declaration or a\n+     structure.  */\n+  return !DECL_P (op) && !AGGREGATE_TYPE_P (TREE_TYPE (op))\n+    && exclude_component_ref (op);\n }\n \n /* Return true only when STMT is simple enough for being handled by\n@@ -419,18 +382,13 @@ stmt_simple_for_scop_p (basic_block scop_entry, loop_p outermost_loop,\n \t  {\n \t  case GIMPLE_UNARY_RHS:\n \t  case GIMPLE_SINGLE_RHS:\n-\t    return (is_simple_operand (outermost_loop, stmt,\n-\t\t\t\t       gimple_assign_lhs (stmt))\n-\t\t    && is_simple_operand (outermost_loop, stmt,\n-\t\t\t\t\t  gimple_assign_rhs1 (stmt)));\n+\t    return (is_simple_operand (gimple_assign_lhs (stmt))\n+\t\t    && is_simple_operand (gimple_assign_rhs1 (stmt)));\n \n \t  case GIMPLE_BINARY_RHS:\n-\t    return (is_simple_operand (outermost_loop, stmt,\n-\t\t\t\t       gimple_assign_lhs (stmt))\n-\t\t    && is_simple_operand (outermost_loop, stmt,\n-\t\t\t\t\t  gimple_assign_rhs1 (stmt))\n-\t\t    && is_simple_operand (outermost_loop, stmt,\n-\t\t\t\t\t  gimple_assign_rhs2 (stmt)));\n+\t    return (is_simple_operand (gimple_assign_lhs (stmt))\n+\t\t    && is_simple_operand (gimple_assign_rhs1 (stmt))\n+\t\t    && is_simple_operand (gimple_assign_rhs2 (stmt)));\n \n \t  case GIMPLE_INVALID_RHS:\n \t  default:\n@@ -444,12 +402,11 @@ stmt_simple_for_scop_p (basic_block scop_entry, loop_p outermost_loop,\n \tsize_t n = gimple_call_num_args (stmt);\n \ttree lhs = gimple_call_lhs (stmt);\n \n-\tif (lhs && !is_simple_operand (outermost_loop, stmt, lhs))\n+\tif (lhs && !is_simple_operand (lhs))\n \t  return false;\n \n \tfor (i = 0; i < n; i++)\n-\t  if (!is_simple_operand (outermost_loop, stmt,\n-\t\t\t\t  gimple_call_arg (stmt, i)))\n+\t  if (!is_simple_operand (gimple_call_arg (stmt, i)))\n \t    return false;\n \n \treturn true;"}]}