{"sha": "e351ae8587983e9122bb6197f6eaf6f1b9031536", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM1MWFlODU4Nzk4M2U5MTIyYmI2MTk3ZjZlYWY2ZjFiOTAzMTUzNg==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2011-11-17T20:51:51Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2011-11-17T20:51:51Z"}, "message": "builtins.c (expand_builtin): Remove 4th parameter representing weak/strong mode when...\n\n\n2011-11-17  Andrew MacLeod  <amacleod@redhat.com>\n\n\t* builtins.c (expand_builtin): Remove 4th parameter representing \n\tweak/strong mode when __atomic_compare_exchange becomes a library call.\n\n\t* gcc.dg/atomic-generic-aux.c (__atomic_compare_exchange): Fail if \n\tmemory model parameters don't match expected values.\n\t* gcc.dg/atomic-generic.c: Pass specific memory model parameters to\n\t__atomic_compare_exchange.\n\t* gcc.dg/atomic-noinline.c: Pass specific memory model parameters to\n\t__atomic_compare_exchange_n.\n\t* gcc.dg/atomic-noinline-aux.c (__atomic_compare_exchange_2): Remove\n\tweak/strong parameter and fail if memory models aren't correct.\n\nFrom-SVN: r181453", "tree": {"sha": "0452b724a356b47d7c1793b5851f2045d411f1f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0452b724a356b47d7c1793b5851f2045d411f1f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e351ae8587983e9122bb6197f6eaf6f1b9031536", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e351ae8587983e9122bb6197f6eaf6f1b9031536", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e351ae8587983e9122bb6197f6eaf6f1b9031536", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e351ae8587983e9122bb6197f6eaf6f1b9031536/comments", "author": null, "committer": null, "parents": [{"sha": "29e339fd2e924cb0936242206e8176ba747f869f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29e339fd2e924cb0936242206e8176ba747f869f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29e339fd2e924cb0936242206e8176ba747f869f"}], "stats": {"total": 81, "additions": 66, "deletions": 15}, "files": [{"sha": "34749f504a97c6e482bdc3ca2d6b249847a8d33f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e351ae8587983e9122bb6197f6eaf6f1b9031536/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e351ae8587983e9122bb6197f6eaf6f1b9031536/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e351ae8587983e9122bb6197f6eaf6f1b9031536", "patch": "@@ -1,3 +1,8 @@\n+2011-11-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* builtins.c (expand_builtin): Remove 4th parameter representing \n+\tweak/strong mode when __atomic_compare_exchange becomes a library call.\n+\n 2011-11-17  Richard Henderson  <rth@redhat.com>\n \n \t* builtins.c (expand_builtin_mem_thread_fence): Remove."}, {"sha": "0fc5a420c82f03aeb523774f7fb218ff4befc886", "filename": "gcc/builtins.c", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e351ae8587983e9122bb6197f6eaf6f1b9031536/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e351ae8587983e9122bb6197f6eaf6f1b9031536/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=e351ae8587983e9122bb6197f6eaf6f1b9031536", "patch": "@@ -6497,12 +6497,28 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_4:\n     case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_8:\n     case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_16:\n-      mode = \n-\t  get_builtin_sync_mode (fcode - BUILT_IN_ATOMIC_COMPARE_EXCHANGE_1);\n-      target = expand_builtin_atomic_compare_exchange (mode, exp, target);\n-      if (target)\n-\treturn target;\n-      break;\n+      {\n+\tunsigned int nargs, z;\n+\tVEC(tree,gc) *vec;\n+\n+\tmode = \n+\t    get_builtin_sync_mode (fcode - BUILT_IN_ATOMIC_COMPARE_EXCHANGE_1);\n+\ttarget = expand_builtin_atomic_compare_exchange (mode, exp, target);\n+\tif (target)\n+\t  return target;\n+\n+\t/* If this is turned into an external library call, the weak parameter\n+\t   must be dropped to match the expected parameter list.  */\n+\tnargs = call_expr_nargs (exp);\n+\tvec = VEC_alloc (tree, gc, nargs - 1);\n+\tfor (z = 0; z < 3; z++)\n+\t  VEC_quick_push (tree, vec, CALL_EXPR_ARG (exp, z));\n+\t/* Skip the boolean weak parameter.  */\n+\tfor (z = 4; z < 6; z++)\n+\t  VEC_quick_push (tree, vec, CALL_EXPR_ARG (exp, z));\n+\texp = build_call_vec (TREE_TYPE (exp), CALL_EXPR_FN (exp), vec);\n+\tbreak;\n+      }\n \n     case BUILT_IN_ATOMIC_LOAD_1:\n     case BUILT_IN_ATOMIC_LOAD_2:"}, {"sha": "7d94e14f6c8d67495413f024646b4e76283f16b9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e351ae8587983e9122bb6197f6eaf6f1b9031536/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e351ae8587983e9122bb6197f6eaf6f1b9031536/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e351ae8587983e9122bb6197f6eaf6f1b9031536", "patch": "@@ -1,3 +1,14 @@\n+2011-11-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/atomic-generic-aux.c (__atomic_compare_exchange): Fail if \n+\tmemory model parameters don't match expected values.\n+\t* gcc.dg/atomic-generic.c: Pass specific memory model parameters to\n+\t__atomic_compare_exchange.\n+\t* gcc.dg/atomic-noinline.c: Pass specific memory model parameters to\n+\t__atomic_compare_exchange_n.\n+\t* gcc.dg/atomic-noinline-aux.c (__atomic_compare_exchange_2): Remove\n+\tweak/strong parameter and fail if memory models aren't correct.\n+\n 2011-10-17  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* lib/gcc-simulate-thread.exp (simulate-thread): Run on all targets."}, {"sha": "2f4cb2a88f7d72f2ffe63c6e3d24d4f292b575f1", "filename": "gcc/testsuite/gcc.dg/atomic-generic-aux.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e351ae8587983e9122bb6197f6eaf6f1b9031536/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-generic-aux.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e351ae8587983e9122bb6197f6eaf6f1b9031536/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-generic-aux.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-generic-aux.c?ref=e351ae8587983e9122bb6197f6eaf6f1b9031536", "patch": "@@ -19,17 +19,30 @@ __atomic_exchange (size_t size, void *obj, void *val, void *ret, int model)\n }\n \n \n+/* Note that the external version of this routine has the boolean weak/strong\n+   parameter removed.  This is required by teh external library.  */\n bool\n-__atomic_compare_exchange (size_t size, void *obj, void *expected, \n+__atomic_compare_exchange (size_t size, void *obj, void *expected,\n \t\t\t   void *desired, int model1, int model2)\n {\n+  bool ret;\n   if (!memcmp (obj, expected, size))\n     {\n       memcpy (obj, desired, size);\n-      return true;\n+      ret = true;\n     }\n-  memcpy (expected, obj, size);\n-  return false;\n+  else\n+    {\n+      memcpy (expected, obj, size);\n+      ret = false;\n+    }\n+\n+  /* Make sure the parameters have been properly adjusted for the external\n+     function call (no weak/strong parameter.  */\n+  if (model1 != __ATOMIC_SEQ_CST || model2 != __ATOMIC_ACQUIRE)\n+    ret = !ret;\n+\n+  return ret;\n }\n \n "}, {"sha": "d77e97dbf8aa433efbeaf22e9dcbcdcc6076e692", "filename": "gcc/testsuite/gcc.dg/atomic-generic.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e351ae8587983e9122bb6197f6eaf6f1b9031536/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e351ae8587983e9122bb6197f6eaf6f1b9031536/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-generic.c?ref=e351ae8587983e9122bb6197f6eaf6f1b9031536", "patch": "@@ -41,12 +41,12 @@ main ()\n   if (memcmp (&b, &ones, size))\n     abort ();\n \n-  if (!__atomic_compare_exchange (&a, &b, &zero, false, __ATOMIC_RELAXED, __ATOMIC_RELAXED))\n+  if (!__atomic_compare_exchange (&a, &b, &zero, false, __ATOMIC_SEQ_CST, __ATOMIC_ACQUIRE))\n     abort();\n   if (memcmp (&a, &zero, size))\n     abort ();\n \n-  if (__atomic_compare_exchange (&a, &b, &ones, false, __ATOMIC_RELAXED, __ATOMIC_RELAXED))\n+  if (__atomic_compare_exchange (&a, &b, &ones, false, __ATOMIC_SEQ_CST, __ATOMIC_ACQUIRE))\n     abort();\n   if (memcmp (&b, &zero, size))\n     abort ();"}, {"sha": "deab7ae1de36ff85532c4bc4181ef4996cbc604d", "filename": "gcc/testsuite/gcc.dg/atomic-noinline-aux.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e351ae8587983e9122bb6197f6eaf6f1b9031536/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-noinline-aux.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e351ae8587983e9122bb6197f6eaf6f1b9031536/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-noinline-aux.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-noinline-aux.c?ref=e351ae8587983e9122bb6197f6eaf6f1b9031536", "patch": "@@ -30,9 +30,15 @@ __atomic_store_1 (char *p, char v, int i)\n   *p = 1;\n }\n \n-int __atomic_compare_exchange_2 (short *p, short *a, short b, int x, int y, int z)\n+int __atomic_compare_exchange_2 (short *p, short *a, short b, int y, int z)\n {\n-  *p = 1;\n+  /* Fail if the memory models aren't correct as that will indicate the external\n+     call has failed to remove the weak/strong parameter as required by the\n+     library.  */\n+  if (y != __ATOMIC_SEQ_CST || z != __ATOMIC_ACQUIRE)\n+    *p = 0;\n+  else\n+    *p = 1;\n }\n \n char __atomic_fetch_add_1 (char *p, char v, int i)"}, {"sha": "626254d8a9a72092f71d3122447d396a5776a689", "filename": "gcc/testsuite/gcc.dg/atomic-noinline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e351ae8587983e9122bb6197f6eaf6f1b9031536/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-noinline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e351ae8587983e9122bb6197f6eaf6f1b9031536/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-noinline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-noinline.c?ref=e351ae8587983e9122bb6197f6eaf6f1b9031536", "patch": "@@ -31,7 +31,7 @@ main ()\n   if (ac != 1)\n     abort ();\n \n-  __atomic_compare_exchange_n (&as, &bs, cs, 0, __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST);\n+  __atomic_compare_exchange_n (&as, &bs, cs, 0, __ATOMIC_SEQ_CST, __ATOMIC_ACQUIRE);\n   if (as != 1)\n     abort ();\n "}]}