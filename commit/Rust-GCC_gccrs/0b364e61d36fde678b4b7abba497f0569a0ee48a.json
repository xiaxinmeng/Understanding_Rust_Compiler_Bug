{"sha": "0b364e61d36fde678b4b7abba497f0569a0ee48a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIzNjRlNjFkMzZmZGU2NzhiNGI3YWJiYTQ5N2YwNTY5YTBlZTQ4YQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-03-17T22:13:37Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-03-17T22:13:37Z"}, "message": "(layout_record...\n\n(layout_record, PCC_BITFIELD_TYPE_MATTERS): Only add padding if a bit\nfield would otherwise span more units of alignment than its base type.\n\nFrom-SVN: r13727", "tree": {"sha": "2c90b20fd92293bc4e428f9504d956c665ea87f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c90b20fd92293bc4e428f9504d956c665ea87f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b364e61d36fde678b4b7abba497f0569a0ee48a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b364e61d36fde678b4b7abba497f0569a0ee48a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b364e61d36fde678b4b7abba497f0569a0ee48a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b364e61d36fde678b4b7abba497f0569a0ee48a/comments", "author": null, "committer": null, "parents": [{"sha": "7c4033ff873eff676305c71bd6f983f74cad53b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c4033ff873eff676305c71bd6f983f74cad53b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c4033ff873eff676305c71bd6f983f74cad53b4"}], "stats": {"total": 14, "additions": 5, "deletions": 9}, "files": [{"sha": "98f5596bf6cde7073c272d8a292fcc30750b000d", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b364e61d36fde678b4b7abba497f0569a0ee48a/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b364e61d36fde678b4b7abba497f0569a0ee48a/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=0b364e61d36fde678b4b7abba497f0569a0ee48a", "patch": "@@ -1,5 +1,5 @@\n /* C-compiler utilities for types and variables storage layout\n-   Copyright (C) 1987, 88, 92, 93, 94, 95, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 92-96, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -438,14 +438,10 @@ layout_record (rec)\n \t  register tree dsize = DECL_SIZE (field);\n \t  int field_size = TREE_INT_CST_LOW (dsize);\n \n-\t  /* A bit field may not span the unit of alignment of its type.\n-\t     Advance to next boundary if necessary.  */\n-\t  /* ??? There is some uncertainty here as to what\n-\t     should be done if type_align is less than the width of the type.\n-\t     That can happen because the width exceeds BIGGEST_ALIGNMENT\n-\t     or because it exceeds maximum_field_alignment.  */\n-\t  if (const_size / type_align\n-\t      != (const_size + MIN (field_size, type_align) - 1) / type_align)\n+\t  /* A bit field may not span more units of alignment of its type\n+\t     than its type itself.  Advance to next boundary if necessary.  */\n+\t  if ((const_size / type_align - (const_size + field_size) / type_align)\n+\t      > TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (field))) / type_align)\n \t    const_size = CEIL (const_size, type_align) * type_align;\n \t}\n #endif"}]}