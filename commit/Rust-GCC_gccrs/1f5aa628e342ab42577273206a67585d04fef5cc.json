{"sha": "1f5aa628e342ab42577273206a67585d04fef5cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY1YWE2MjhlMzQyYWI0MjU3NzI3MzIwNmE2NzU4NWQwNGZlZjVjYw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-06-04T23:36:01Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-06-04T23:36:01Z"}, "message": "rs6000: More simplification\n\nA whole bunch of mode attributes are used only once.  Things are\neasier to read if we just expand those patterns.  It's shorter, too.\n\n\n\t* config/rs6000/vsx.md (define_mode_attr VSr4): Delete.\n\t(define_mode_attr VSr5): Delete.\n\t(define_mode_attr VStype_sqrt): Delete.\n\t(define_mode_iterator VSX_SPDP): Delete.\n\t(define_mode_attr VS_spdp_res): Delete.\n\t(define_mode_attr VS_spdp_insn): Delete.\n\t(define_mode_attr VS_spdp_type): Delete.\n\t(*vsx_sqrt<mode>2): Adjust.\n\t(vsx_<VS_spdp_insn>): Delete, split to...\n\t(vsx_xscvdpsp): ... this.  New.  And...\n\t(vsx_xvcvspdp): ... this.  New.  And...\n\t(vsx_xvcvdpsp): ... this.  New.\n\nFrom-SVN: r271937", "tree": {"sha": "c46e795cd8d137998f3623a101cee5bfd6b3d0c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c46e795cd8d137998f3623a101cee5bfd6b3d0c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f5aa628e342ab42577273206a67585d04fef5cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f5aa628e342ab42577273206a67585d04fef5cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f5aa628e342ab42577273206a67585d04fef5cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f5aa628e342ab42577273206a67585d04fef5cc/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6cc8f68381ef967849049433c63cb6324b16a1ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cc8f68381ef967849049433c63cb6324b16a1ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cc8f68381ef967849049433c63cb6324b16a1ac"}], "stats": {"total": 80, "additions": 38, "deletions": 42}, "files": [{"sha": "857b30710ff0a5051be83ac34297573c66448277", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5aa628e342ab42577273206a67585d04fef5cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5aa628e342ab42577273206a67585d04fef5cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f5aa628e342ab42577273206a67585d04fef5cc", "patch": "@@ -1,3 +1,18 @@\n+2019-06-04  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/vsx.md (define_mode_attr VSr4): Delete.\n+\t(define_mode_attr VSr5): Delete.\n+\t(define_mode_attr VStype_sqrt): Delete.\n+\t(define_mode_iterator VSX_SPDP): Delete.\n+\t(define_mode_attr VS_spdp_res): Delete.\n+\t(define_mode_attr VS_spdp_insn): Delete.\n+\t(define_mode_attr VS_spdp_type): Delete.\n+\t(*vsx_sqrt<mode>2): Adjust.\n+\t(vsx_<VS_spdp_insn>): Delete, split to...\n+\t(vsx_xscvdpsp): ... this.  New.  And...\n+\t(vsx_xvcvspdp): ... this.  New.  And...\n+\t(vsx_xvcvdpsp): ... this.  New.\n+\n 2019-06-04  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.md (define_mode_attr sd): Add values for V4SF"}, {"sha": "b3ebc95511ffbfa0fd66d3e225d6732f89853198", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 23, "deletions": 42, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5aa628e342ab42577273206a67585d04fef5cc/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5aa628e342ab42577273206a67585d04fef5cc/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=1f5aa628e342ab42577273206a67585d04fef5cc", "patch": "@@ -118,18 +118,6 @@\n \t\t\t (KF\t\"wq\")\n \t\t\t (TF\t\"wp\")])\n \n-;; Map the register class for sp<->dp float conversions, destination\n-(define_mode_attr VSr4\t[(SF\t\"wa\")\n-\t\t\t (DF\t\"f\")\n-\t\t\t (V2DF  \"wa\")\n-\t\t\t (V4SF\t\"v\")])\n-\n-;; Map the register class for sp<->dp float conversions, source\n-(define_mode_attr VSr5\t[(SF\t\"wa\")\n-\t\t\t (DF\t\"f\")\n-\t\t\t (V2DF  \"v\")\n-\t\t\t (V4SF\t\"wa\")])\n-\n ;; The VSX register class that a type can occupy, even if it is not the\n ;; preferred register class (VSr is the preferred register class that will get\n ;; allocated first).\n@@ -213,29 +201,6 @@\n \t\t\t\t (V4SF \"vecfdiv\")\n \t\t\t\t (DF   \"ddiv\")])\n \n-;; Appropriate type for sqrt ops.  For now, just lump the vector sqrt with\n-;; the scalar sqrt\n-(define_mode_attr VStype_sqrt\t[(V2DF \"dsqrt\")\n-\t\t\t\t (V4SF \"ssqrt\")\n-\t\t\t\t (DF   \"dsqrt\")])\n-\n-;; Iterator and modes for sp<->dp conversions\n-;; Because scalar SF values are represented internally as double, use the\n-;; V4SF type to represent this than SF.\n-(define_mode_iterator VSX_SPDP [DF V4SF V2DF])\n-\n-(define_mode_attr VS_spdp_res [(DF\t\"V4SF\")\n-\t\t\t       (V4SF\t\"V2DF\")\n-\t\t\t       (V2DF\t\"V4SF\")])\n-\n-(define_mode_attr VS_spdp_insn [(DF\t\"xscvdpsp\")\n-\t\t\t\t(V4SF\t\"xvcvspdp\")\n-\t\t\t\t(V2DF\t\"xvcvdpsp\")])\n-\n-(define_mode_attr VS_spdp_type [(DF\t\"fp\")\n-\t\t\t\t(V4SF\t\"vecdouble\")\n-\t\t\t\t(V2DF\t\"vecdouble\")])\n-\n ;; Map the scalar mode for a vector type\n (define_mode_attr VS_scalar [(V1TI\t\"TI\")\n \t\t\t     (V2DF\t\"DF\")\n@@ -1831,7 +1796,7 @@\n         (sqrt:VSX_F (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"xvsqrt<sd>p %x0,%x1\"\n-  [(set_attr \"type\" \"<VStype_sqrt>\")])\n+  [(set_attr \"type\" \"<sd>sqrt\")])\n \n (define_insn \"*vsx_rsqrte<mode>2\"\n   [(set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n@@ -2149,13 +2114,29 @@\n ;; Don't use xscvspdp and xscvdpsp for scalar conversions, since the normal\n ;; scalar single precision instructions internally use the double format.\n ;; Prefer the altivec registers, since we likely will need to do a vperm\n-(define_insn \"vsx_<VS_spdp_insn>\"\n-  [(set (match_operand:<VS_spdp_res> 0 \"vsx_register_operand\" \"=<VSr4>,?wa\")\n-\t(unspec:<VS_spdp_res> [(match_operand:VSX_SPDP 1 \"vsx_register_operand\" \"<VSr5>,wa\")]\n+(define_insn \"vsx_xscvdpsp\"\n+  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=f,?wa\")\n+\t(unspec:V4SF [(match_operand:DF 1 \"vsx_register_operand\" \"f,wa\")]\n \t\t\t      UNSPEC_VSX_CVSPDP))]\n-  \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"<VS_spdp_insn> %x0,%x1\"\n-  [(set_attr \"type\" \"<VS_spdp_type>\")])\n+  \"VECTOR_UNIT_VSX_P (DFmode)\"\n+  \"xscvdpsp %x0,%x1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"vsx_xvcvspdp\"\n+  [(set (match_operand:V2DF 0 \"vsx_register_operand\" \"=v,?wa\")\n+\t(unspec:V2DF [(match_operand:V4SF 1 \"vsx_register_operand\" \"wa,wa\")]\n+\t\t\t      UNSPEC_VSX_CVSPDP))]\n+  \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n+  \"xvcvspdp %x0,%x1\"\n+  [(set_attr \"type\" \"vecdouble\")])\n+\n+(define_insn \"vsx_xvcvdpsp\"\n+  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa,?wa\")\n+\t(unspec:V4SF [(match_operand:V2DF 1 \"vsx_register_operand\" \"v,wa\")]\n+\t\t\t      UNSPEC_VSX_CVSPDP))]\n+  \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n+  \"xvcvdpsp %x0,%x1\"\n+  [(set_attr \"type\" \"vecdouble\")])\n \n ;; xscvspdp, represent the scalar SF type as V4SF\n (define_insn \"vsx_xscvspdp\""}]}