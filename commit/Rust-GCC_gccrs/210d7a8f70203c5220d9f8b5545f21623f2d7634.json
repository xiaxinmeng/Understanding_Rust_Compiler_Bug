{"sha": "210d7a8f70203c5220d9f8b5545f21623f2d7634", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjEwZDdhOGY3MDIwM2M1MjIwZDlmOGI1NTQ1ZjIxNjIzZjJkNzYzNA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2004-10-26T06:37:10Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-10-26T06:37:10Z"}, "message": "array_allocator.h (array::allocate): Check for valid array object, use its size member function directly.\n\n\n2004-10-26  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/ext/array_allocator.h (array::allocate): Check for valid\n\tarray object, use its size member function directly.\n\t* testsuite/ext/array_allocator/3.cc: New.\n\t* docs/html/20_util/allocator.html: Add docs.\n\nFrom-SVN: r89573", "tree": {"sha": "c7f36e062e06d724e86762c728b9e5a4eed089d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7f36e062e06d724e86762c728b9e5a4eed089d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/210d7a8f70203c5220d9f8b5545f21623f2d7634", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/210d7a8f70203c5220d9f8b5545f21623f2d7634", "html_url": "https://github.com/Rust-GCC/gccrs/commit/210d7a8f70203c5220d9f8b5545f21623f2d7634", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/210d7a8f70203c5220d9f8b5545f21623f2d7634/comments", "author": null, "committer": null, "parents": [{"sha": "f1a66265195781c7f0cc6c627706bdf33a313657", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1a66265195781c7f0cc6c627706bdf33a313657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1a66265195781c7f0cc6c627706bdf33a313657"}], "stats": {"total": 127, "additions": 121, "deletions": 6}, "files": [{"sha": "6404896d3903198ea7a45266d8c0effb4435e905", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/210d7a8f70203c5220d9f8b5545f21623f2d7634/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/210d7a8f70203c5220d9f8b5545f21623f2d7634/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=210d7a8f70203c5220d9f8b5545f21623f2d7634", "patch": "@@ -1,3 +1,10 @@\n+2004-10-26  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/ext/array_allocator.h (array::allocate): Check for valid\n+\tarray object, use its size member function directly.\n+\t* testsuite/ext/array_allocator/3.cc: New.\n+\t* docs/html/20_util/allocator.html: Add docs.\n+\t\n 2004-10-25  Geoffrey Keating  <geoffk@apple.com>\n \n \t* libsupc++/new_op.cc (new): Make weak."}, {"sha": "c853dd4cf8fdbd5895f5531d7c5e7faa50649a5f", "filename": "libstdc++-v3/docs/html/20_util/allocator.html", "status": "modified", "additions": 47, "deletions": 5, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/210d7a8f70203c5220d9f8b5545f21623f2d7634/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fallocator.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/210d7a8f70203c5220d9f8b5545f21623f2d7634/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fallocator.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F20_util%2Fallocator.html?ref=210d7a8f70203c5220d9f8b5545f21623f2d7634", "patch": "@@ -297,7 +297,7 @@ <h3 class=\"left\">\n     <td>&lt;memory&gt;</td>\n   </tr>\n   <tr>\n-    <td>__gnu_cxx::__pool_alloc&lt;bool, int&gt;</td>\n+    <td>__gnu_cxx::__pool_alloc&lt;T&gt;</td>\n     <td>&lt;ext/pool_allocator.h&gt;</td>\n     <td>std::__default_alloc_template&lt;bool,int&gt;</td>\n     <td>&lt;memory&gt;</td>\n@@ -316,7 +316,26 @@ <h3 class=\"left\">\n   </tr>\n </table>\n \n-   <p>More details on each of these allocators follows. </p>\n+   <p> Releases after gcc-3.4 have continued to add to the collection\n+   of available allocators. All of these new allocators are\n+   standard-style. The following table includes details, along with\n+   the first released version of GCC that included the extension allocator.\n+   </p>\n+\n+<table title=\"more extension allocators\" border=\"1\">\n+  <tr>\n+    <th>Allocator</th>\n+    <th>Include</th>\n+    <th>Version</th>\n+  </tr>\n+  <tr>\n+    <td>__gnu_cxx::array_allocator&lt;T&gt;</td>\n+    <td>&lt;ext/array_allocator.h&gt;</td>\n+    <td>4.0.0</td>\n+  </tr>\n+</table>\n+\n+   <p>More details on each of these extension allocators follows. </p>\n    <ul>\n      <li><code>new_allocator</code> \n      <p>Simply wraps <code>::operator new</code>\n@@ -330,6 +349,18 @@ <h3 class=\"left\">\n          elsewhere).  \n      </p>\n      </li>\n+     <li><code>array_allocator</code> \n+     <p>Allows allocations of known and fixed sizes using existing\n+         global or external storage allocated via construction of\n+         std::tr1::array objects. By using this allocator, fixed size\n+         containers (including std::string) can be used without\n+         instances calling <code>::operator new</code> and\n+         <code>::operator delete</code>. This capability allows the\n+         use of STL abstractions without runtime complications or\n+         overhead, even in situations such as program startup. For\n+         usage examples, please consult the libstdc++ testsuite.\n+     </p>\n+     </li>\n      <li><code>debug_allocator</code> \n      <p> A wrapper around an\n          arbitrary allocator A.  It passes on slightly increased size\n@@ -347,10 +378,15 @@ <h3 class=\"left\">\n       and the allocate/deallocate request is passed to\n       <code>::operator new</code> directly.  </p>\n \n-   <p> This class take a boolean template parameter, called\n-      <code>thr</code>, and an integer template parameter, called\n-      <code>inst</code>.\n+   <p> For versions of <code>__pool_alloc</code> after 3.4.0, there is\n+   only one template parameter, as per the standard.\n+   </p>\n+\n+   <p> Older versions of this class take a boolean template parameter,\n+      called <code>thr</code>, and an integer template parameter,\n+      called <code>inst</code>.\n    </p>\n+\n    <p>The <code>inst</code> number is used to track additional memory\n       pools.  The point of the number is to allow multiple\n       instantiations of the classes without changing the semantics at\n@@ -374,6 +410,12 @@ <h3 class=\"left\">\n       is is threadsafe, while thr=false, and is slightly faster but\n       unsafe for multiple threads.\n    </p>\n+\n+   <p>For thread-enabled configurations, the pool is locked with a\n+   single big lock. In some situations, this implementation detail may\n+   result in severe performance degredation.\n+   </p>\n+\n    <p>(Note that the GCC thread abstraction layer allows us to provide safe\n       zero-overhead stubs for the threading routines, if threads were\n       disabled at configuration time.)"}, {"sha": "1bba58a34299fe2dc9f65d9997bdcd6fc85fbfc4", "filename": "libstdc++-v3/include/ext/array_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/210d7a8f70203c5220d9f8b5545f21623f2d7634/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/210d7a8f70203c5220d9f8b5545f21623f2d7634/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h?ref=210d7a8f70203c5220d9f8b5545f21623f2d7634", "patch": "@@ -118,7 +118,7 @@ namespace __gnu_cxx\n       allocate(size_type __n, const void* = 0)\n       {\n \tstatic size_type __used;\n-\tif (__builtin_expect(__used + __n > array_type::_S_index, false))\n+\tif (_M_array == 0 || __used + __n > _M_array->size())\n \t  std::__throw_bad_alloc();\n \tpointer __ret = _M_array->begin() + __used;\n \t__used += __n;"}, {"sha": "297b902c8835a5c1dafee1433de777d2a99cffff", "filename": "libstdc++-v3/testsuite/ext/array_allocator/3.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/210d7a8f70203c5220d9f8b5545f21623f2d7634/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/210d7a8f70203c5220d9f8b5545f21623f2d7634/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F3.cc?ref=210d7a8f70203c5220d9f8b5545f21623f2d7634", "patch": "@@ -0,0 +1,66 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <cassert>\n+#include <string>\n+#include <ext/array_allocator.h>\n+\n+typedef char char_type;\n+typedef std::char_traits<char_type> traits_type;\n+typedef std::tr1::array<char_type, 4> array_type;\n+\n+array_type extern_array;\n+\n+void test01() \n+{\n+  using std::basic_string;\n+  typedef __gnu_cxx::array_allocator<char_type, array_type> allocator_type;\n+  typedef basic_string<char_type, traits_type, allocator_type> string_type;\n+\n+  // Construct array_allocator without underlying array.\n+  allocator_type a;\n+  string_type s(a);\n+    \n+  try\n+    {\n+      s.reserve(4); // Actually need 4 + 1 + sizeof(std::string::_Rep).\n+    }\n+  catch(std::bad_alloc& obj)\n+    {\n+      assert(true);\n+    }\n+  catch(...)\n+    {\n+      assert(false);\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}