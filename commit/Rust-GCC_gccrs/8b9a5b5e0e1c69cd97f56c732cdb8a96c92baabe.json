{"sha": "8b9a5b5e0e1c69cd97f56c732cdb8a96c92baabe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI5YTViNWUwZTFjNjljZDk3ZjU2YzczMmNkYjhhOTZjOTJiYWFiZQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-08-10T11:40:40Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-08-10T11:40:40Z"}, "message": "Remove not needed __builtin_expect due to malloc predictor.\n\n2018-08-10  Martin Liska  <mliska@suse.cz>\n\n\t* libsupc++/new_op.cc (new): Remove __builtin_expect as malloc\n        predictor can handle that.\n\t* libsupc++/new_opa.cc: Likewise.\n\t* libsupc++/new_opnt.cc (new): Likewise.\n\nFrom-SVN: r263470", "tree": {"sha": "0cb0dfc849273125d64fdbf1605be514baeddefe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cb0dfc849273125d64fdbf1605be514baeddefe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b9a5b5e0e1c69cd97f56c732cdb8a96c92baabe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b9a5b5e0e1c69cd97f56c732cdb8a96c92baabe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b9a5b5e0e1c69cd97f56c732cdb8a96c92baabe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b9a5b5e0e1c69cd97f56c732cdb8a96c92baabe/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa40590559358fb59326f6adaed65db709061640", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa40590559358fb59326f6adaed65db709061640", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa40590559358fb59326f6adaed65db709061640"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "347c9e30532712ed6971c8fa7da3983d596463c5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9a5b5e0e1c69cd97f56c732cdb8a96c92baabe/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9a5b5e0e1c69cd97f56c732cdb8a96c92baabe/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8b9a5b5e0e1c69cd97f56c732cdb8a96c92baabe", "patch": "@@ -1,3 +1,10 @@\n+2018-08-10  Martin Liska  <mliska@suse.cz>\n+\n+\t* libsupc++/new_op.cc (new): Remove __builtin_expect as malloc\n+        predictor can handle that.\n+\t* libsupc++/new_opa.cc: Likewise.\n+\t* libsupc++/new_opnt.cc (new): Likewise.\n+\n 2018-08-10  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n \n \tPR target/85904"}, {"sha": "3caa0bab2eaa094fe4df1d4391b1797012a45e78", "filename": "libstdc++-v3/libsupc++/new_op.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9a5b5e0e1c69cd97f56c732cdb8a96c92baabe/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9a5b5e0e1c69cd97f56c732cdb8a96c92baabe/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc?ref=8b9a5b5e0e1c69cd97f56c732cdb8a96c92baabe", "patch": "@@ -47,7 +47,7 @@ operator new (std::size_t sz) _GLIBCXX_THROW (std::bad_alloc)\n   if (sz == 0)\n     sz = 1;\n \n-  while (__builtin_expect ((p = malloc (sz)) == 0, false))\n+  while ((p = malloc (sz)) == 0)\n     {\n       new_handler handler = std::get_new_handler ();\n       if (! handler)"}, {"sha": "a27ff843ca1c21ad46d4ff8c281a4fa6763f85e9", "filename": "libstdc++-v3/libsupc++/new_opa.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9a5b5e0e1c69cd97f56c732cdb8a96c92baabe/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9a5b5e0e1c69cd97f56c732cdb8a96c92baabe/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opa.cc?ref=8b9a5b5e0e1c69cd97f56c732cdb8a96c92baabe", "patch": "@@ -126,7 +126,7 @@ operator new (std::size_t sz, std::align_val_t al)\n #endif\n \n   using __gnu_cxx::aligned_alloc;\n-  while (__builtin_expect ((p = aligned_alloc (align, sz)) == 0, false))\n+  while ((p = aligned_alloc (align, sz)) == 0)\n     {\n       new_handler handler = std::get_new_handler ();\n       if (! handler)"}, {"sha": "faab44e66c27e7491756b876829024b799b44f79", "filename": "libstdc++-v3/libsupc++/new_opnt.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9a5b5e0e1c69cd97f56c732cdb8a96c92baabe/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9a5b5e0e1c69cd97f56c732cdb8a96c92baabe/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc?ref=8b9a5b5e0e1c69cd97f56c732cdb8a96c92baabe", "patch": "@@ -40,7 +40,7 @@ operator new (std::size_t sz, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT\n   if (sz == 0)\n     sz = 1;\n \n-  while (__builtin_expect ((p = malloc (sz)) == 0, false))\n+  while ((p = malloc (sz)) == 0)\n     {\n       new_handler handler = std::get_new_handler ();\n       if (! handler)"}]}