{"sha": "990dc016001e1b6b3fbd1d15a82d6054f5a7de38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkwZGMwMTYwMDFlMWI2YjNmYmQxZDE1YTgyZDYwNTRmNWE3ZGUzOA==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2010-01-27T14:17:48Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2010-01-27T14:17:48Z"}, "message": "Revert r156276\n\nFrom-SVN: r156286", "tree": {"sha": "66d1917c158d9278259be0692e8286567d1e78b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66d1917c158d9278259be0692e8286567d1e78b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/990dc016001e1b6b3fbd1d15a82d6054f5a7de38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/990dc016001e1b6b3fbd1d15a82d6054f5a7de38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/990dc016001e1b6b3fbd1d15a82d6054f5a7de38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/990dc016001e1b6b3fbd1d15a82d6054f5a7de38/comments", "author": null, "committer": null, "parents": [{"sha": "09d7d413bdf2715a97190f7effc2d1b098225e7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09d7d413bdf2715a97190f7effc2d1b098225e7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09d7d413bdf2715a97190f7effc2d1b098225e7c"}], "stats": {"total": 105, "additions": 81, "deletions": 24}, "files": [{"sha": "0edb3c88cbe3260e9c0748931c904c74b5a1e45b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990dc016001e1b6b3fbd1d15a82d6054f5a7de38/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990dc016001e1b6b3fbd1d15a82d6054f5a7de38/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=990dc016001e1b6b3fbd1d15a82d6054f5a7de38", "patch": "@@ -10,14 +10,6 @@\n \t* configure.ac (gnu-unique-object): Fix ldd version check.\n \t* configure: Regenerate.\n \n-2010-01-27  Wei Guozhi  <carrot@google.com>\n-\n-        PR target/42671\n-        * config/arm/arm.c (arm_load_pic_register): Use the same code\n-\tsequence with Thumb2 as for Thumb1.\n-        * config/arm/arm.md (pic_add_dot_plus_four): Enable this pattern\n-\tfor all Thumb varieties.\n-\n 2010-01-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config/sparc/sparc.c (sparc_elf_asm_named_section): Test for"}, {"sha": "ffff9ab2f87a60d7afb8b7d415be49586752f043", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990dc016001e1b6b3fbd1d15a82d6054f5a7de38/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990dc016001e1b6b3fbd1d15a82d6054f5a7de38/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=990dc016001e1b6b3fbd1d15a82d6054f5a7de38", "patch": "@@ -1,6 +1,6 @@\n /* Output routines for GCC for ARM.\n    Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,\n-   2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Pieter `Tiggr' Schoenmakers (rcpieter@win.tue.nl)\n    and Martin Simmons (@harleqn.co.uk).\n@@ -5150,7 +5150,8 @@ arm_load_pic_register (unsigned long saved_regs ATTRIBUTE_UNUSED)\n \t    }\n \n \t  emit_insn (gen_pic_load_addr_thumb2 (pic_reg, pic_rtx));\n-\t  emit_insn (gen_pic_add_dot_plus_four (pic_reg, pic_reg, labelno));\n+\t  emit_insn (gen_pic_load_dot_plus_four (pic_tmp, labelno));\n+\t  emit_insn (gen_addsi3 (pic_reg, pic_reg, pic_tmp));\n \t}\n       else /* TARGET_THUMB1 */\n \t{"}, {"sha": "cbb0a1bdf1439e099cfcc9277ed226dcf7c102ac", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990dc016001e1b6b3fbd1d15a82d6054f5a7de38/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990dc016001e1b6b3fbd1d15a82d6054f5a7de38/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=990dc016001e1b6b3fbd1d15a82d6054f5a7de38", "patch": "@@ -1,6 +1,6 @@\n ;;- Machine description for ARM for GNU compiler\n ;;  Copyright 1991, 1993, 1994, 1995, 1996, 1996, 1997, 1998, 1999, 2000,\n-;;  2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+;;  2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n ;;  Free Software Foundation, Inc.\n ;;  Contributed by Pieter `Tiggr' Schoenmakers (rcpieter@win.tue.nl)\n ;;  and Martin Simmons (@harleqn.co.uk).\n@@ -5267,7 +5267,7 @@\n \t\t    (const_int 4)\n \t\t    (match_operand 2 \"\" \"\")]\n \t\t   UNSPEC_PIC_BASE))]\n-  \"TARGET_THUMB\"\n+  \"TARGET_THUMB1\"\n   \"*\n   (*targetm.asm_out.internal_label) (asm_out_file, \\\"LPIC\\\",\n \t\t\t\t     INTVAL (operands[2]));"}, {"sha": "c9c3c133c966dd5f8a6ab80ab0ed641b58a5f5ac", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 72, "deletions": 7, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990dc016001e1b6b3fbd1d15a82d6054f5a7de38/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990dc016001e1b6b3fbd1d15a82d6054f5a7de38/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=990dc016001e1b6b3fbd1d15a82d6054f5a7de38", "patch": "@@ -88,6 +88,8 @@ static void mn10300_asm_trampoline_template (FILE *);\n static void mn10300_trampoline_init (rtx, tree, rtx);\n static rtx mn10300_function_value (const_tree, const_tree, bool);\n static rtx mn10300_libcall_value (enum machine_mode, const_rtx);\n+static void mn10300_asm_output_mi_thunk (FILE *, tree, HOST_WIDE_INT, HOST_WIDE_INT, tree);\n+static bool mn10300_can_output_mi_thunk (const_tree, HOST_WIDE_INT, HOST_WIDE_INT, const_tree);\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -146,6 +148,11 @@ static rtx mn10300_libcall_value (enum machine_mode, const_rtx);\n #undef TARGET_LIBCALL_VALUE\n #define TARGET_LIBCALL_VALUE mn10300_libcall_value\n \n+#undef  TARGET_ASM_OUTPUT_MI_THUNK\n+#define TARGET_ASM_OUTPUT_MI_THUNK      mn10300_asm_output_mi_thunk\n+#undef  TARGET_ASM_CAN_OUTPUT_MI_THUNK\n+#define TARGET_ASM_CAN_OUTPUT_MI_THUNK  mn10300_can_output_mi_thunk\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Implement TARGET_HANDLE_OPTION.  */\n@@ -1536,13 +1543,13 @@ mn10300_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n }\n \n /* Return an RTX to represent where a value with mode MODE will be returned\n-   from a function.  If the result is 0, the argument is pushed.  */\n+   from a function.  If the result is NULL_RTX, the argument is pushed.  */\n \n rtx\n function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t      tree type, int named ATTRIBUTE_UNUSED)\n {\n-  rtx result = 0;\n+  rtx result = NULL_RTX;\n   int size, align;\n \n   /* We only support using 2 data registers as argument registers.  */\n@@ -1562,24 +1569,24 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   /* Don't pass this arg via a register if all the argument registers\n      are used up.  */\n   if (cum->nbytes > nregs * UNITS_PER_WORD)\n-    return 0;\n+    return result;\n \n   /* Don't pass this arg via a register if it would be split between\n      registers and memory.  */\n   if (type == NULL_TREE\n       && cum->nbytes + size > nregs * UNITS_PER_WORD)\n-    return 0;\n+    return result;\n \n   switch (cum->nbytes / UNITS_PER_WORD)\n     {\n     case 0:\n-      result = gen_rtx_REG (mode, 0);\n+      result = gen_rtx_REG (mode, FIRST_ARGUMENT_REGNUM);\n       break;\n     case 1:\n-      result = gen_rtx_REG (mode, 1);\n+      result = gen_rtx_REG (mode, FIRST_ARGUMENT_REGNUM + 1);\n       break;\n     default:\n-      result = 0;\n+      break;\n     }\n \n   return result;\n@@ -2231,3 +2238,61 @@ mn10300_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n   mem = adjust_address (m_tramp, SImode, 0x18);\n   emit_move_insn (mem, fnaddr);\n }\n+\n+/* Output the assembler code for a C++ thunk function.\n+   THUNK_DECL is the declaration for the thunk function itself, FUNCTION\n+   is the decl for the target function.  DELTA is an immediate constant\n+   offset to be added to the THIS parameter.  If VCALL_OFFSET is nonzero\n+   the word at the adjusted address *(*THIS' + VCALL_OFFSET) should be\n+   additionally added to THIS.  Finally jump to the entry point of\n+   FUNCTION.  */\n+\n+static void\n+mn10300_asm_output_mi_thunk (FILE *        file,\n+\t\t\t     tree          thunk_fndecl ATTRIBUTE_UNUSED,\n+\t\t\t     HOST_WIDE_INT delta,\n+\t\t\t     HOST_WIDE_INT vcall_offset,\n+\t\t\t     tree          function)\n+{\n+  const char * _this;\n+\n+  /* Get the register holding the THIS parameter.  Handle the case\n+     where there is a hidden first argument for a returned structure.  */\n+  if (aggregate_value_p (TREE_TYPE (TREE_TYPE (function)), function))\n+    _this = reg_names [FIRST_ARGUMENT_REGNUM + 1];\n+  else\n+    _this = reg_names [FIRST_ARGUMENT_REGNUM];\n+\n+  fprintf (file, \"\\t%s Thunk Entry Point:\\n\", ASM_COMMENT_START);\n+\n+  if (delta)\n+    fprintf (file, \"\\tadd %d, %s\\n\", (int) delta, _this);\n+\n+  if (vcall_offset)\n+    {\n+      const char * scratch = reg_names [FIRST_ADDRESS_REGNUM + 1];\n+\n+      fprintf (file, \"\\tmov %s, %s\\n\", _this, scratch);\n+      fprintf (file, \"\\tmov (%s), %s\\n\", scratch, scratch);\n+      fprintf (file, \"\\tadd %d, %s\\n\", (int) vcall_offset, scratch);\n+      fprintf (file, \"\\tmov (%s), %s\\n\", scratch, scratch);\n+      fprintf (file, \"\\tadd %s, %s\\n\", scratch, _this);\n+    }\n+\n+  fputs (\"\\tjmp \", file);\n+  assemble_name (file, XSTR (XEXP (DECL_RTL (function), 0), 0));\n+  putc ('\\n', file);\n+}\n+\n+/* Return true if mn10300_output_mi_thunk would be able to output the\n+   assembler code for the thunk function specified by the arguments\n+   it is passed, and false otherwise.  */\n+\n+static bool\n+mn10300_can_output_mi_thunk (const_tree    thunk_fndecl ATTRIBUTE_UNUSED,\n+\t\t\t     HOST_WIDE_INT delta        ATTRIBUTE_UNUSED,\n+\t\t\t     HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED,\n+\t\t\t     const_tree    function     ATTRIBUTE_UNUSED)\n+{\n+  return true;\n+}"}, {"sha": "5547d4e17e54b5428cdde546722a4e709ceda079", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990dc016001e1b6b3fbd1d15a82d6054f5a7de38/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990dc016001e1b6b3fbd1d15a82d6054f5a7de38/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=990dc016001e1b6b3fbd1d15a82d6054f5a7de38", "patch": "@@ -130,6 +130,7 @@ extern enum processor_type mn10300_processor;\n #define LAST_EXTENDED_REGNUM 17\n #define FIRST_FP_REGNUM 18\n #define LAST_FP_REGNUM 49\n+#define FIRST_ARGUMENT_REGNUM 0\n \n /* Specify the registers used for certain standard purposes.\n    The values of these macros are register numbers.  */\n@@ -511,9 +512,9 @@ enum reg_class {\n #define STACK_POINTER_OFFSET 4\n \n /* 1 if N is a possible register number for function argument passing.\n-   On the MN10300, no registers are used in this way.  */\n+   On the MN10300, d0 and d1 are used in this way.  */\n \n-#define FUNCTION_ARG_REGNO_P(N) ((N) <= 1)\n+#define FUNCTION_ARG_REGNO_P(N) ((N) <= 2)\n \n \f\n /* Define a data type for recording info about an argument list\n@@ -559,8 +560,6 @@ struct cum_arg {int nbytes; };\n    NAMED is nonzero if this argument is a named parameter\n     (otherwise it is an extra parameter matching an ellipsis).  */\n \n-/* On the MN10300 all args are pushed.  */\n-\n #define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n   function_arg (&CUM, MODE, TYPE, NAMED)\n "}, {"sha": "de47b5c27115811b777a986286bfebb4127dd263", "filename": "gcc/testsuite/g++.old-deja/g++.jason/thunk3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990dc016001e1b6b3fbd1d15a82d6054f5a7de38/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fthunk3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990dc016001e1b6b3fbd1d15a82d6054f5a7de38/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fthunk3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fthunk3.C?ref=990dc016001e1b6b3fbd1d15a82d6054f5a7de38", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run { xfail rs6000-*-* powerpc-*-eabi mn10300-*-* v850-*-* sh-*-* sh64-*-* h8*-*-* xtensa*-*-* m32r*-*-* lm32-*-* } }\n+// { dg-do run { xfail rs6000-*-* powerpc-*-eabi v850-*-* sh-*-* sh64-*-* h8*-*-* xtensa*-*-* m32r*-*-* lm32-*-* } }\n // Test that variadic function calls using thunks work right.\n // Note that this will break on any target that uses the generic thunk\n //  support, because it doesn't support variadic functions."}]}