{"sha": "c7e1fa82502f98b4ac9c6e576345debf6b56a654", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdlMWZhODI1MDJmOThiNGFjOWM2ZTU3NjM0NWRlYmY2YjU2YTY1NA==", "commit": {"author": {"name": "Kaushik Phatak", "email": "kaushik.phatak@kpitcummins.com", "date": "2010-12-14T07:03:36Z"}, "committer": {"name": "Kaushik Phatak", "email": "kaushikp@gcc.gnu.org", "date": "2010-12-14T07:03:36Z"}, "message": "h8300.md (define_split): Add condition for \"and with single_zero\" splitter to handle 16-bit const operands.\n\n\t* config/h8300/h8300.md (define_split) : Add condition for\n\t\"and with single_zero\" splitter to handle 16-bit const operands.\n\t* config/h8300/h8300.md (define_split) : Add condition for\n\t\"ior with single_one\" splitter to handle 16-bit const operands.\n\t* config/h8300/h8300.md (define_split) : Add condition for\n\t\"xor with single_one\" splitter to handle 16-bit const operands.\t\n\t\n\t* testsuite/gcc.dg/h8300-bit-insn-ice.c: New.\n\nFrom-SVN: r167789", "tree": {"sha": "cfe83b6fc75607a40ae5d0b6130f56d104b7fde4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfe83b6fc75607a40ae5d0b6130f56d104b7fde4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7e1fa82502f98b4ac9c6e576345debf6b56a654", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7e1fa82502f98b4ac9c6e576345debf6b56a654", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7e1fa82502f98b4ac9c6e576345debf6b56a654", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7e1fa82502f98b4ac9c6e576345debf6b56a654/comments", "author": null, "committer": null, "parents": [{"sha": "05d556e8371b90c5de4175aa737a7ad83726eeee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05d556e8371b90c5de4175aa737a7ad83726eeee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05d556e8371b90c5de4175aa737a7ad83726eeee"}], "stats": {"total": 88, "additions": 82, "deletions": 6}, "files": [{"sha": "8d03fce20f330f6320f6d1eb8ac381efd41a0643", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e1fa82502f98b4ac9c6e576345debf6b56a654/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e1fa82502f98b4ac9c6e576345debf6b56a654/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7e1fa82502f98b4ac9c6e576345debf6b56a654", "patch": "@@ -1,3 +1,13 @@\n+2010-12-14  Kaushik Phatak <kaushik.phatak@kpitcummins.com>\n+\n+\t* config/h8300/h8300.md (define_split) : Add condition for\n+\t\"and with single_zero\" splitter to handle 16-bit const operands.\n+\t* config/h8300/h8300.md (define_split) : Add condition for\n+\t\"ior with single_one\" splitter to handle 16-bit const operands.\n+\t* config/h8300/h8300.md (define_split) : Add condition for\n+\t\"xor with single_one\" splitter to handle 16-bit const operands.\t\n+\t* testsuite/gcc.dg/h8300-bit-insn-ice.c: New.\n+\n 2010-12-13  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/45388"}, {"sha": "21ab39102564d1b461bc1ebaa9b98b745291a462", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e1fa82502f98b4ac9c6e576345debf6b56a654/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e1fa82502f98b4ac9c6e576345debf6b56a654/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=c7e1fa82502f98b4ac9c6e576345debf6b56a654", "patch": "@@ -1779,8 +1779,17 @@\n \t(and:QI (match_dup 1)\n \t\t(match_dup 2)))]\n {\n-  operands[0] = adjust_address (operands[0], QImode, 1);\n-  operands[1] = adjust_address (operands[1], QImode, 1);\n+  if (abs (INTVAL (operands[2])) > 0xFF)\n+    {\n+      operands[0] = adjust_address (operands[0], QImode, 0);\n+      operands[1] = adjust_address (operands[1], QImode, 0);\n+      operands[2] = GEN_INT ((INTVAL (operands[2])) >> 8);\n+    }\n+  else\n+    {\n+      operands[0] = adjust_address (operands[0], QImode, 1);\n+      operands[1] = adjust_address (operands[1], QImode, 1);\n+    }\n })\n \n (define_insn \"bclrhi_msx\"\n@@ -1910,8 +1919,17 @@\n \t(ior:QI (match_dup 1)\n \t\t(match_dup 2)))]\n {\n-  operands[0] = adjust_address (operands[0], QImode, 1);\n-  operands[1] = adjust_address (operands[1], QImode, 1);\n+  if (abs (INTVAL (operands[2])) > 0xFF)\n+    {\n+      operands[0] = adjust_address (operands[0], QImode, 0);\n+      operands[1] = adjust_address (operands[1], QImode, 0);\n+      operands[2] = GEN_INT ((INTVAL (operands[2])) >> 8);\n+    }\n+  else\n+    {\n+      operands[0] = adjust_address (operands[0], QImode, 1);\n+      operands[1] = adjust_address (operands[1], QImode, 1);\n+    }\n })\n \n (define_insn \"bsethi_msx\"\n@@ -1976,8 +1994,17 @@\n \t(xor:QI (match_dup 1)\n \t\t(match_dup 2)))]\n {\n-  operands[0] = adjust_address (operands[0], QImode, 1);\n-  operands[1] = adjust_address (operands[1], QImode, 1);\n+  if (abs (INTVAL (operands[2])) > 0xFF)\n+    {\n+      operands[0] = adjust_address (operands[0], QImode, 0);\n+      operands[1] = adjust_address (operands[1], QImode, 0);\n+      operands[2] = GEN_INT ((INTVAL (operands[2])) >> 8);\n+    }\n+  else\n+    {\n+      operands[0] = adjust_address (operands[0], QImode, 1);\n+      operands[1] = adjust_address (operands[1], QImode, 1);\n+    }\n })\n \n (define_insn \"bnothi_msx\""}, {"sha": "442dc4bb9f2cbf455086005fb2ab544a674ef555", "filename": "gcc/testsuite/gcc.dg/h8300-bit-insn-ice.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e1fa82502f98b4ac9c6e576345debf6b56a654/gcc%2Ftestsuite%2Fgcc.dg%2Fh8300-bit-insn-ice.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e1fa82502f98b4ac9c6e576345debf6b56a654/gcc%2Ftestsuite%2Fgcc.dg%2Fh8300-bit-insn-ice.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fh8300-bit-insn-ice.c?ref=c7e1fa82502f98b4ac9c6e576345debf6b56a654", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-skip-if \"\" { \"h8300*-*-*\" } \"*\" \"-msx*\" }  */\n+/* ICE for bit instruction generation using 16-bit const */\n+\n+__extension__ struct st_mstp\n+{\n+  union\n+  {\n+    unsigned short WORD;\n+    struct\n+    {\n+      unsigned char ACSE:1;\n+      unsigned char _EXDMAC:1;\n+      unsigned char _DMAC:1;\n+      unsigned char _DTC:1;\n+      unsigned char:2;\n+      unsigned char _TMR23:1;\n+      unsigned char _TMR01:1;\n+      unsigned char:2;\n+      unsigned char _DA:1;\n+      unsigned char:1;\n+      unsigned char _AD:1;\n+      unsigned char:1;\n+      unsigned char _TPUU:1;\n+      unsigned char _TPUL:1;\n+    } BIT;\n+  } CRA;\n+};\n+#define MSTP    (*(volatile struct st_mstp  *)0xFFFDC8)\n+#define MSTPA_EXDMA    0x4000\n+#define MSTPA_AND      0xFEFF\n+\n+int\n+main ()\n+{\n+  MSTP.CRA.WORD |= MSTPA_EXDMA;\n+  MSTP.CRA.WORD ^= MSTPA_EXDMA;\n+  MSTP.CRA.WORD &= MSTPA_AND;\n+  return 0;\n+}"}]}