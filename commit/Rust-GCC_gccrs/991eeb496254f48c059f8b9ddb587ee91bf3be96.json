{"sha": "991eeb496254f48c059f8b9ddb587ee91bf3be96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkxZWViNDk2MjU0ZjQ4YzA1OWY4YjlkZGI1ODdlZTkxYmYzYmU5Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-08-26T02:47:42Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-08-26T02:47:42Z"}, "message": "pt.c (check_explicit_specialization): Don't complain about non-template variable.\n\n\t* pt.c (check_explicit_specialization): Don't complain about\n\tnon-template variable.\n\t(template_for_substitution): Allow variable templates.\n\t(check_template_variable): Fix logic for member var template.\n\t* decl.c (start_decl): Don't complain about extra template header\n\there.\n\nFrom-SVN: r214487", "tree": {"sha": "2e5652c761d9e4156c3c97c6d2c3fdc91cb467c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e5652c761d9e4156c3c97c6d2c3fdc91cb467c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/991eeb496254f48c059f8b9ddb587ee91bf3be96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/991eeb496254f48c059f8b9ddb587ee91bf3be96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/991eeb496254f48c059f8b9ddb587ee91bf3be96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/991eeb496254f48c059f8b9ddb587ee91bf3be96/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f348033d1e1df30e6238506bee3a154a852a96d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f348033d1e1df30e6238506bee3a154a852a96d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f348033d1e1df30e6238506bee3a154a852a96d3"}], "stats": {"total": 47, "additions": 30, "deletions": 17}, "files": [{"sha": "04394c31ab6b232d6b1030cb8c21ac8689c55130", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991eeb496254f48c059f8b9ddb587ee91bf3be96/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991eeb496254f48c059f8b9ddb587ee91bf3be96/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=991eeb496254f48c059f8b9ddb587ee91bf3be96", "patch": "@@ -1,5 +1,12 @@\n 2014-08-25  Jason Merrill  <jason@redhat.com>\n \n+\t* pt.c (check_explicit_specialization): Don't complain about\n+\tnon-template variable.\n+\t(template_for_substitution): Allow variable templates.\n+\t(check_template_variable): Fix logic for member var template.\n+\t* decl.c (start_decl): Don't complain about extra template header\n+\there.\n+\n \t* decl.c (start_decl): Look through member variable template.\n \t* pt.c (tsubst_decl) [VAR_DECL]: Handle member variable templates.\n \t* decl2.c (grokfield): Set DECL_CONTEXT earlier on"}, {"sha": "d03f8a4707e594e6d836833c4197d1ec55e38960", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991eeb496254f48c059f8b9ddb587ee91bf3be96/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991eeb496254f48c059f8b9ddb587ee91bf3be96/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=991eeb496254f48c059f8b9ddb587ee91bf3be96", "patch": "@@ -4672,14 +4672,6 @@ start_decl (const cp_declarator *declarator,\n \t\t    }\n \t\t  field = DECL_TEMPLATE_RESULT (field);\n \t\t}\n-\t      else if (this_tmpl)\n-\t\t{\n-\t\t  error_at (DECL_SOURCE_LOCATION (decl),\n-\t\t\t    \"member template declaration of %qD\", decl);\n-\t\t  inform (DECL_SOURCE_LOCATION (field), \"does not match \"\n-\t\t\t  \"non-member-template declaration here\");\n-\t\t  return error_mark_node;\n-\t\t}\n \n \t      if (DECL_CONTEXT (field) != context)\n \t\t{"}, {"sha": "59df38722a8f672081b80b114b10a0151d6bed84", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991eeb496254f48c059f8b9ddb587ee91bf3be96/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991eeb496254f48c059f8b9ddb587ee91bf3be96/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=991eeb496254f48c059f8b9ddb587ee91bf3be96", "patch": "@@ -2308,7 +2308,8 @@ check_template_variable (tree decl)\n {\n   tree ctx = CP_DECL_CONTEXT (decl);\n   int wanted = num_template_headers_for_class (ctx);\n-  if (!TYPE_P (ctx) || !CLASSTYPE_TEMPLATE_INFO (ctx))\n+  if (DECL_LANG_SPECIFIC (decl) && DECL_TEMPLATE_INFO (decl)\n+      && PRIMARY_TEMPLATE_P (DECL_TI_TEMPLATE (decl)))\n     {\n       if (cxx_dialect < cxx14)\n         pedwarn (DECL_SOURCE_LOCATION (decl), 0,\n@@ -2323,7 +2324,8 @@ check_template_variable (tree decl)\n       bool warned = pedwarn (DECL_SOURCE_LOCATION (decl), 0,\n \t\t\t     \"too many template headers for %D (should be %d)\",\n \t\t\t     decl, wanted);\n-      if (warned && CLASSTYPE_TEMPLATE_SPECIALIZATION (ctx))\n+      if (warned && CLASS_TYPE_P (ctx)\n+\t  && CLASSTYPE_TEMPLATE_SPECIALIZATION (ctx))\n \tinform (DECL_SOURCE_LOCATION (decl),\n \t\t\"members of an explicitly specialized class are defined \"\n \t\t\"without a template header\");\n@@ -2451,11 +2453,9 @@ check_explicit_specialization (tree declarator,\n       /* Fall through.  */\n     case tsk_expl_spec:\n       if (VAR_P (decl) && TREE_CODE (declarator) != TEMPLATE_ID_EXPR)\n-        {\n-           // In cases like template<> constexpr bool v = true;\n-           error (\"%qD is not a template variable\", dname);\n-           break;\n-        }\n+\t/* In cases like template<> constexpr bool v = true;\n+\t   We'll give an error in check_template_variable.  */\n+\tbreak;\n \n       SET_DECL_TEMPLATE_SPECIALIZATION (decl);\n       if (ctype)\n@@ -19711,8 +19711,6 @@ template_for_substitution (tree decl)\n \t cannot restructure the loop to just keep going until we find\n \t a template with a definition, since that might go too far if\n \t a specialization was declared, but not defined.  */\n-      gcc_assert (!VAR_P (decl)\n-\t\t  || DECL_IN_AGGR_P (DECL_TEMPLATE_RESULT (tmpl)));\n \n       /* Fetch the more general template.  */\n       tmpl = DECL_TI_TEMPLATE (tmpl);"}, {"sha": "ece2eb28027558445f3e64e8d4f6b0d3d9080872", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ10.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991eeb496254f48c059f8b9ddb587ee91bf3be96/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991eeb496254f48c059f8b9ddb587ee91bf3be96/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ10.C?ref=991eeb496254f48c059f8b9ddb587ee91bf3be96", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile { target c++14 } }\n+\n+template <class T>\n+struct Y\n+{\n+  template <class U> static U x;\n+};\n+\n+template <class T>\n+template <class U>\n+U Y<T>::x = U();\n+\n+int main()\n+{\n+  int y = Y<int>::x<int>;\n+}"}]}