{"sha": "b434c94bf7a5d4bb9ca8f0b5442ca85b43f32a9a", "node_id": "C_kwDOANBUbNoAKGI0MzRjOTRiZjdhNWQ0YmI5Y2E4ZjBiNTQ0MmNhODViNDNmMzJhOWE", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-09T08:07:18Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-09T08:07:18Z"}, "message": "Improve preservation of FLAGS_REG mode in i386.md's peephole2s.\n\nThe patch tweaks several peephole2s in i386.md that propagate the flags\nregister, but take its mode from the SET_SRC rather than preserve the\nmode of the original SET_DEST.  This encounters problems when the\nSET_SRC is a VOIDmode CONST_INT.  Fixed by using match_operand with a\nflags_reg_operand predicate.\n\n2022-07-09  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* config/i386/i386.md (define_peephole2): Use match_operand of\n\tflags_reg_operand to capture and preserve the mode of FLAGS_REG.\n\t(define_peephole2): Likewise.\n\t(define_peephole2): Likewise...", "tree": {"sha": "3d69b4f99a965587e364d51b132cb228c2d16cc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d69b4f99a965587e364d51b132cb228c2d16cc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b434c94bf7a5d4bb9ca8f0b5442ca85b43f32a9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b434c94bf7a5d4bb9ca8f0b5442ca85b43f32a9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b434c94bf7a5d4bb9ca8f0b5442ca85b43f32a9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b434c94bf7a5d4bb9ca8f0b5442ca85b43f32a9a/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "002d81affa8a4e625993d3c9c7840ca4aba9750c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/002d81affa8a4e625993d3c9c7840ca4aba9750c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/002d81affa8a4e625993d3c9c7840ca4aba9750c"}], "stats": {"total": 24, "additions": 8, "deletions": 16}, "files": [{"sha": "3b02d0cd567b0e966ce3e06435d893c83849d8dc", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b434c94bf7a5d4bb9ca8f0b5442ca85b43f32a9a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b434c94bf7a5d4bb9ca8f0b5442ca85b43f32a9a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=b434c94bf7a5d4bb9ca8f0b5442ca85b43f32a9a", "patch": "@@ -15220,7 +15220,7 @@\n ;; Convert setcc + movzbl to xor + setcc if operands don't overlap.\n \n (define_peephole2\n-  [(set (reg FLAGS_REG) (match_operand 0))\n+  [(set (match_operand 4 \"flags_reg_operand\") (match_operand 0))\n    (set (match_operand:QI 1 \"register_operand\")\n \t(match_operator:QI 2 \"ix86_comparison_operator\"\n \t  [(reg FLAGS_REG) (const_int 0)]))\n@@ -15234,13 +15234,12 @@\n    (set (strict_low_part (match_dup 5))\n \t(match_dup 2))]\n {\n-  operands[4] = gen_rtx_REG (GET_MODE (operands[0]), FLAGS_REG);\n   operands[5] = gen_lowpart (QImode, operands[3]);\n   ix86_expand_clear (operands[3]);\n })\n \n (define_peephole2\n-  [(parallel [(set (reg FLAGS_REG) (match_operand 0))\n+  [(parallel [(set (match_operand 5 \"flags_reg_operand\") (match_operand 0))\n \t      (match_operand 4)])\n    (set (match_operand:QI 1 \"register_operand\")\n \t(match_operator:QI 2 \"ix86_comparison_operator\"\n@@ -15258,14 +15257,13 @@\n    (set (strict_low_part (match_dup 6))\n \t(match_dup 2))]\n {\n-  operands[5] = gen_rtx_REG (GET_MODE (operands[0]), FLAGS_REG);\n   operands[6] = gen_lowpart (QImode, operands[3]);\n   ix86_expand_clear (operands[3]);\n })\n \n (define_peephole2\n-  [(set (reg FLAGS_REG) (match_operand 0))\n-   (parallel [(set (reg FLAGS_REG) (match_operand 1))\n+  [(set (match_operand 6 \"flags_reg_operand\") (match_operand 0))\n+   (parallel [(set (match_operand 7 \"flags_reg_operand\") (match_operand 1))\n \t      (match_operand 5)])\n    (set (match_operand:QI 2 \"register_operand\")\n \t(match_operator:QI 3 \"ix86_comparison_operator\"\n@@ -15286,16 +15284,14 @@\n    (set (strict_low_part (match_dup 8))\n \t(match_dup 3))]\n {\n-  operands[6] = gen_rtx_REG (GET_MODE (operands[0]), FLAGS_REG);\n-  operands[7] = gen_rtx_REG (GET_MODE (operands[1]), FLAGS_REG);\n   operands[8] = gen_lowpart (QImode, operands[4]);\n   ix86_expand_clear (operands[4]);\n })\n \n ;; Similar, but match zero extend with andsi3.\n \n (define_peephole2\n-  [(set (reg FLAGS_REG) (match_operand 0))\n+  [(set (match_operand 4 \"flags_reg_operand\") (match_operand 0))\n    (set (match_operand:QI 1 \"register_operand\")\n \t(match_operator:QI 2 \"ix86_comparison_operator\"\n \t  [(reg FLAGS_REG) (const_int 0)]))\n@@ -15309,13 +15305,12 @@\n    (set (strict_low_part (match_dup 5))\n \t(match_dup 2))]\n {\n-  operands[4] = gen_rtx_REG (GET_MODE (operands[0]), FLAGS_REG);\n   operands[5] = gen_lowpart (QImode, operands[3]);\n   ix86_expand_clear (operands[3]);\n })\n \n (define_peephole2\n-  [(parallel [(set (reg FLAGS_REG) (match_operand 0))\n+  [(parallel [(set (match_operand 5 \"flags_reg_operand\") (match_operand 0))\n \t      (match_operand 4)])\n    (set (match_operand:QI 1 \"register_operand\")\n \t(match_operator:QI 2 \"ix86_comparison_operator\"\n@@ -15334,14 +15329,13 @@\n    (set (strict_low_part (match_dup 6))\n \t(match_dup 2))]\n {\n-  operands[5] = gen_rtx_REG (GET_MODE (operands[0]), FLAGS_REG);\n   operands[6] = gen_lowpart (QImode, operands[3]);\n   ix86_expand_clear (operands[3]);\n })\n \n (define_peephole2\n-  [(set (reg FLAGS_REG) (match_operand 0))\n-   (parallel [(set (reg FLAGS_REG) (match_operand 1))\n+  [(set (match_operand 6 \"flags_reg_operand\") (match_operand 0))\n+   (parallel [(set (match_operand 7 \"flags_reg_operand\") (match_operand 1))\n \t      (match_operand 5)])\n    (set (match_operand:QI 2 \"register_operand\")\n \t(match_operator:QI 3 \"ix86_comparison_operator\"\n@@ -15363,8 +15357,6 @@\n    (set (strict_low_part (match_dup 8))\n \t(match_dup 3))]\n {\n-  operands[6] = gen_rtx_REG (GET_MODE (operands[0]), FLAGS_REG);\n-  operands[7] = gen_rtx_REG (GET_MODE (operands[1]), FLAGS_REG);\n   operands[8] = gen_lowpart (QImode, operands[4]);\n   ix86_expand_clear (operands[4]);\n })"}]}