{"sha": "dc4b8c68205ed860dd2dda9d00d868a96211d393", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM0YjhjNjgyMDVlZDg2MGRkMmRkYTlkMDBkODY4YTk2MjExZDM5Mw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-09-15T12:11:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-09-15T12:11:13Z"}, "message": "re PR lto/81968 (early lto debug objects make Solaris ld SEGV)\n\n2017-09-15  Richard Biener  <rguenther@suse.de>\n\n\tPR lto/81968\n\t* simple-object-elf.c (simple_object_elf_copy_lto_debug_sections):\n\tIterate marking dependent sections necessary.\n\nFrom-SVN: r252807", "tree": {"sha": "2260a4b3815d112d5ab3f540e3cbf5826c890391", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2260a4b3815d112d5ab3f540e3cbf5826c890391"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc4b8c68205ed860dd2dda9d00d868a96211d393", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc4b8c68205ed860dd2dda9d00d868a96211d393", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc4b8c68205ed860dd2dda9d00d868a96211d393", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc4b8c68205ed860dd2dda9d00d868a96211d393/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9d89efebaac0b2c66ddd7f993717b341c8651cf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d89efebaac0b2c66ddd7f993717b341c8651cf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d89efebaac0b2c66ddd7f993717b341c8651cf6"}], "stats": {"total": 128, "additions": 74, "deletions": 54}, "files": [{"sha": "65c521ca14a1da1d8df3694006d030439205fb71", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc4b8c68205ed860dd2dda9d00d868a96211d393/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc4b8c68205ed860dd2dda9d00d868a96211d393/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=dc4b8c68205ed860dd2dda9d00d868a96211d393", "patch": "@@ -1,3 +1,9 @@\n+2017-09-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR lto/81968\n+\t* simple-object-elf.c (simple_object_elf_copy_lto_debug_sections):\n+\tIterate marking dependent sections necessary.\n+\n 2017-09-15  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-demangle.c (is_fnqual_component_type): Reimplement using"}, {"sha": "7eb3df856688d8cbeed239a4e51cb40b8f1b2b9a", "filename": "libiberty/simple-object-elf.c", "status": "modified", "additions": 68, "deletions": 54, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc4b8c68205ed860dd2dda9d00d868a96211d393/libiberty%2Fsimple-object-elf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc4b8c68205ed860dd2dda9d00d868a96211d393/libiberty%2Fsimple-object-elf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fsimple-object-elf.c?ref=dc4b8c68205ed860dd2dda9d00d868a96211d393", "patch": "@@ -1158,70 +1158,84 @@ simple_object_elf_copy_lto_debug_sections (simple_object_read *sobj,\n \n   /* Mark sections as preserved that are required by to be preserved\n      sections.  */\n-  for (i = 1; i < shnum; ++i)\n+  int changed;\n+  do\n     {\n-      unsigned char *shdr;\n-      unsigned int sh_type, sh_info, sh_link;\n-      off_t offset;\n-      off_t length;\n-\n-      shdr = shdrs + (i - 1) * shdr_size;\n-      sh_type = ELF_FETCH_FIELD (type_functions, ei_class, Shdr,\n-\t\t\t\t shdr, sh_type, Elf_Word);\n-      sh_info = ELF_FETCH_FIELD (type_functions, ei_class, Shdr,\n-\t\t\t\t shdr, sh_info, Elf_Word);\n-      sh_link = ELF_FETCH_FIELD (type_functions, ei_class, Shdr,\n-\t\t\t\t shdr, sh_link, Elf_Word);\n-      if (sh_type == SHT_GROUP)\n+      changed = 0;\n+      for (i = 1; i < shnum; ++i)\n \t{\n-\t  /* Mark groups containing copied sections.  */\n-\t  unsigned entsize = ELF_FETCH_FIELD (type_functions, ei_class, Shdr,\n-\t\t\t\t\t      shdr, sh_entsize, Elf_Addr);\n-\t  unsigned char *ent, *buf;\n-\t  int keep = 0;\n-\t  offset = ELF_FETCH_FIELD (type_functions, ei_class, Shdr,\n-\t\t\t\t    shdr, sh_offset, Elf_Addr);\n-\t  length = ELF_FETCH_FIELD (type_functions, ei_class, Shdr,\n-\t\t\t\t    shdr, sh_size, Elf_Addr);\n-\t  buf = XNEWVEC (unsigned char, length);\n-\t  if (!simple_object_internal_read (sobj->descriptor,\n-\t\t\t\t\t    sobj->offset + offset, buf,\n-\t\t\t\t\t    (size_t) length, &errmsg, err))\n+\t  unsigned char *shdr;\n+\t  unsigned int sh_type, sh_info, sh_link;\n+\t  off_t offset;\n+\t  off_t length;\n+\n+\t  shdr = shdrs + (i - 1) * shdr_size;\n+\t  sh_type = ELF_FETCH_FIELD (type_functions, ei_class, Shdr,\n+\t\t\t\t     shdr, sh_type, Elf_Word);\n+\t  sh_info = ELF_FETCH_FIELD (type_functions, ei_class, Shdr,\n+\t\t\t\t     shdr, sh_info, Elf_Word);\n+\t  sh_link = ELF_FETCH_FIELD (type_functions, ei_class, Shdr,\n+\t\t\t\t     shdr, sh_link, Elf_Word);\n+\t  if (sh_type == SHT_GROUP)\n \t    {\n-\t      XDELETEVEC (buf);\n-\t      XDELETEVEC (names);\n-\t      XDELETEVEC (shdrs);\n-\t      return errmsg;\n-\t    }\n-\t  for (ent = buf + entsize; ent < buf + length; ent += entsize)\n-\t    {\n-\t      unsigned sec = type_functions->fetch_Elf_Word (ent);\n-\t      if (pfnret[sec - 1] == 0)\n-\t\tkeep = 1;\n+\t      /* Mark groups containing copied sections.  */\n+\t      unsigned entsize = ELF_FETCH_FIELD (type_functions, ei_class,\n+\t\t\t\t\t\t  Shdr, shdr, sh_entsize,\n+\t\t\t\t\t\t  Elf_Addr);\n+\t      unsigned char *ent, *buf;\n+\t      int keep = 0;\n+\t      offset = ELF_FETCH_FIELD (type_functions, ei_class, Shdr,\n+\t\t\t\t\tshdr, sh_offset, Elf_Addr);\n+\t      length = ELF_FETCH_FIELD (type_functions, ei_class, Shdr,\n+\t\t\t\t\tshdr, sh_size, Elf_Addr);\n+\t      buf = XNEWVEC (unsigned char, length);\n+\t      if (!simple_object_internal_read (sobj->descriptor,\n+\t\t\t\t\t\tsobj->offset + offset, buf,\n+\t\t\t\t\t\t(size_t) length, &errmsg, err))\n+\t\t{\n+\t\t  XDELETEVEC (buf);\n+\t\t  XDELETEVEC (names);\n+\t\t  XDELETEVEC (shdrs);\n+\t\t  return errmsg;\n+\t\t}\n+\t      for (ent = buf + entsize; ent < buf + length; ent += entsize)\n+\t\t{\n+\t\t  unsigned sec = type_functions->fetch_Elf_Word (ent);\n+\t\t  if (pfnret[sec - 1] == 0)\n+\t\t    keep = 1;\n+\t\t}\n+\t      if (keep)\n+\t\t{\n+\t\t  changed |= (pfnret[sh_link - 1] == -1\n+\t\t\t      || pfnret[i - 1] == -1);\n+\t\t  pfnret[sh_link - 1] = 0;\n+\t\t  pfnret[i - 1] = 0;\n+\t\t}\n \t    }\n-\t  if (keep)\n+\t  if (sh_type == SHT_RELA\n+\t      || sh_type == SHT_REL)\n \t    {\n-\t      pfnret[sh_link - 1] = 0;\n-\t      pfnret[i - 1] = 0;\n+\t      /* Mark relocation sections and symtab of copied sections.  */\n+\t      if (pfnret[sh_info - 1] == 0)\n+\t\t{\n+\t\t  changed |= (pfnret[sh_link - 1] == -1\n+\t\t\t      || pfnret[i - 1] == -1);\n+\t\t  pfnret[sh_link - 1] = 0;\n+\t\t  pfnret[i - 1] = 0;\n+\t\t}\n \t    }\n-\t}\n-      if (sh_type == SHT_RELA\n-\t  || sh_type == SHT_REL)\n-\t{\n-\t  /* Mark relocation sections and symtab of copied sections.  */\n-\t  if (pfnret[sh_info - 1] == 0)\n+\t  if (sh_type == SHT_SYMTAB)\n \t    {\n-\t      pfnret[sh_link - 1] = 0;\n-\t      pfnret[i - 1] = 0;\n+\t      /* Mark strings sections of copied symtabs.  */\n+\t      if (pfnret[i - 1] == 0)\n+\t\t{\n+\t\t  changed |= pfnret[sh_link - 1] == -1;\n+\t\t  pfnret[sh_link - 1] = 0;\n+\t\t}\n \t    }\n \t}\n-      if (sh_type == SHT_SYMTAB)\n-\t{\n-\t  /* Mark strings sections of copied symtabs.  */\n-\t  if (pfnret[i - 1] == 0)\n-\t    pfnret[sh_link - 1] = 0;\n-\t}\n     }\n+  while (changed);\n \n   /* Then perform the actual copying.  */\n   for (i = 1; i < shnum; ++i)"}]}