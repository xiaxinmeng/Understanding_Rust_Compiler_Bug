{"sha": "a0e894a8cc0344dbbefc57523ff53e990854fcfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBlODk0YThjYzAzNDRkYmJlZmM1NzUyM2ZmNTNlOTkwODU0ZmNmYg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "1999-04-30T09:31:00Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "1999-04-30T09:31:00Z"}, "message": "StringBuffer.java (ensureCapacity): Don't resize vector when shared.\n\n\t* java/lang/StringBuffer.java (ensureCapacity): Don't resize\n\tvector when shared.\n\t* java/util/Locale.java (Locale(String,String)): Implement in\n\tterms of 3-argument version; variant now defaults to empty\n\tstring.\n\t(toString): Assume variant is not null.\n\t(equals): Assume all strings are not null.\n\t(Locale): Throw NullPointerException if any argument is null.\n\t* java/util/ResourceBundle.java (getBundle): Don't try the base\n\tname; now implicit in partialGetBundle call.\n\t(trySomeGetBundle): Search for parent bundles and call setParent\n\tas required.\n\t(partialGetBundle): Added `langStop' argument.  Use\n\t`Locale.toString' to compute bundleName.\n\t(resource_cache): New static field.\n\t(partialGetBundle): Cache the returned resource bundle.  Now\n\tsynchronized.\n\t* gnu/gcj/text/LocaleData_en.java (contents): [collatorRule] Added\n\tmissing `<'.\n\t* mauve-libgcj: Enable Collator and RuleBasedCollator.\n\t* java/text/natCollator.cc (decomposeCharacter): `base' now\n\t`const'.\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (ordinary_java_source_files): Added\n\tCollationElementIterator, CollationKey, Collator,\n\tRuleBasedCollator.\n\t(nat_source_files): Added natCollator.cc.\n\t* java/text/RuleBasedCollator.java (ceiNext): No longer static.\n\t(compare): Pass `this' to CollationElementIterator constructor.\n\t(getCollationElementIterator): Likewise.\n\t(ceiNext): Fix off-by-one error when finding initial substring.\n\t(next): Correctly mask off bits when computing return value.\n\tFixed return values when one string is shorter than the other.\n\t* java/text/CollationElementIterator.java (collator): New field.\n\t(CollationElementIterator): Added collator argument.\n\t(next): Call ceiNext on collator object.\n\nFrom-SVN: r26707", "tree": {"sha": "4928c712cce75c2d0d4c9cf9f6f78ef4a4052149", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4928c712cce75c2d0d4c9cf9f6f78ef4a4052149"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0e894a8cc0344dbbefc57523ff53e990854fcfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e894a8cc0344dbbefc57523ff53e990854fcfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0e894a8cc0344dbbefc57523ff53e990854fcfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e894a8cc0344dbbefc57523ff53e990854fcfb/comments", "author": null, "committer": null, "parents": [{"sha": "1c609c4cbee4dd46a739fae213da8d48fe1147e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c609c4cbee4dd46a739fae213da8d48fe1147e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c609c4cbee4dd46a739fae213da8d48fe1147e4"}], "stats": {"total": 328, "additions": 215, "deletions": 113}, "files": [{"sha": "1a0e8a5f6f6e13868df49e52546bc2b0b46833ef", "filename": "libjava/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e894a8cc0344dbbefc57523ff53e990854fcfb/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e894a8cc0344dbbefc57523ff53e990854fcfb/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a0e894a8cc0344dbbefc57523ff53e990854fcfb", "patch": "@@ -1,3 +1,46 @@\n+1999-04-29  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* java/lang/StringBuffer.java (ensureCapacity): Don't resize\n+\tvector when shared.\n+\n+\t* java/util/Locale.java (Locale(String,String)): Implement in\n+\tterms of 3-argument version; variant now defaults to empty\n+\tstring.\n+\t(toString): Assume variant is not null.\n+\t(equals): Assume all strings are not null.\n+\t(Locale): Throw NullPointerException if any argument is null.\n+\n+\t* java/util/ResourceBundle.java (getBundle): Don't try the base\n+\tname; now implicit in partialGetBundle call.\n+\t(trySomeGetBundle): Search for parent bundles and call setParent\n+\tas required.\n+\t(partialGetBundle): Added `langStop' argument.  Use\n+\t`Locale.toString' to compute bundleName.\n+\t(resource_cache): New static field.\n+\t(partialGetBundle): Cache the returned resource bundle.  Now\n+\tsynchronized.\n+\n+\t* gnu/gcj/text/LocaleData_en.java (contents): [collatorRule] Added\n+\tmissing `<'.\n+\n+\t* mauve-libgcj: Enable Collator and RuleBasedCollator.\n+\t* java/text/natCollator.cc (decomposeCharacter): `base' now\n+\t`const'.\n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am (ordinary_java_source_files): Added\n+\tCollationElementIterator, CollationKey, Collator,\n+\tRuleBasedCollator.\n+\t(nat_source_files): Added natCollator.cc.\n+\t* java/text/RuleBasedCollator.java (ceiNext): No longer static.\n+\t(compare): Pass `this' to CollationElementIterator constructor.\n+\t(getCollationElementIterator): Likewise.\n+\t(ceiNext): Fix off-by-one error when finding initial substring.\n+\t(next): Correctly mask off bits when computing return value.\n+\tFixed return values when one string is shorter than the other.\n+\t* java/text/CollationElementIterator.java (collator): New field.\n+\t(CollationElementIterator): Added collator argument.\n+\t(next): Call ceiNext on collator object.\n+\n 1999-04-26  Tom Tromey  <tromey@cygnus.com>\n \n \t* natCollator.cc: New file."}, {"sha": "1711a9ec001b550f5e0bdb42f3ff3cbb2a5b93f6", "filename": "libjava/Makefile.am", "status": "modified", "additions": 32, "deletions": 12, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e894a8cc0344dbbefc57523ff53e990854fcfb/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e894a8cc0344dbbefc57523ff53e990854fcfb/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=a0e894a8cc0344dbbefc57523ff53e990854fcfb", "patch": "@@ -533,6 +533,9 @@ java/security/NoSuchAlgorithmException.java \\\n java/text/BreakIterator.java \\\n java/text/CharacterIterator.java \\\n java/text/ChoiceFormat.java \\\n+java/text/CollationElementIterator.java \\\n+java/text/CollationKey.java \\\n+java/text/Collator.java \\\n java/text/DateFormat.java \\\n java/text/DateFormatSymbols.java \\\n java/text/DecimalFormat.java \\\n@@ -543,6 +546,7 @@ java/text/MessageFormat.java \\\n java/text/NumberFormat.java \\\n java/text/ParseException.java \\\n java/text/ParsePosition.java \\\n+java/text/RuleBasedCollator.java \\\n java/text/SimpleDateFormat.java\t\\\n java/text/StringCharacterIterator.java \\\n java/util/BitSet.java \\\n@@ -601,19 +605,35 @@ c_source_files = \\\n   java/lang/k_cos.c       java/lang/s_sin.c\n \n ## This lists all the C++ source files in subdirectories.\n-nat_source_files = java/lang/natObject.cc java/lang/natClass.cc\t\\\n-java/lang/natString.cc java/lang/natDouble.cc java/lang/natRuntime.cc \\\n-java/lang/natSystem.cc java/lang/natThread.cc java/io/natFile.cc \\\n-java/io/natFileDescriptor.cc java/util/natDate.cc \\\n-java/util/natGregorianCalendar.cc java/lang/natFirstThread.cc \\\n-java/lang/natCharacter.cc java/lang/natMath.cc java/lang/natFloat.cc \\\n-java/lang/reflect/natField.cc java/net/natInetAddress.cc \\\n-java/net/natPlainSocketImpl.cc java/lang/reflect/natMethod.cc \\\n-java/lang/reflect/natArray.cc gnu/gcj/convert/Unicode_to_JIS.cc \\\n-gnu/gcj/convert/natInput_EUCJIS.cc gnu/gcj/convert/natOutput_EUCJIS.cc \\\n-gnu/gcj/convert/natInput_SJIS.cc gnu/gcj/convert/natOutput_SJIS.cc \\\n+nat_source_files = \\\n gnu/gcj/convert/JIS0208_to_Unicode.cc \\\n-gnu/gcj/convert/JIS0212_to_Unicode.cc\n+gnu/gcj/convert/JIS0212_to_Unicode.cc \\\n+gnu/gcj/convert/Unicode_to_JIS.cc \\\n+gnu/gcj/convert/natInput_EUCJIS.cc \\\n+gnu/gcj/convert/natInput_SJIS.cc \\\n+gnu/gcj/convert/natOutput_EUCJIS.cc \\\n+gnu/gcj/convert/natOutput_SJIS.cc \\\n+java/io/natFile.cc \\\n+java/io/natFileDescriptor.cc \\\n+java/lang/natCharacter.cc \\\n+java/lang/natClass.cc \\\n+java/lang/natDouble.cc \\\n+java/lang/natFirstThread.cc \\\n+java/lang/natFloat.cc \\\n+java/lang/natMath.cc \\\n+java/lang/natObject.cc \\\n+java/lang/natRuntime.cc\t\\\n+java/lang/natString.cc \\\n+java/lang/natSystem.cc \\\n+java/lang/natThread.cc \\\n+java/lang/reflect/natArray.cc \\\n+java/lang/reflect/natField.cc \\\n+java/lang/reflect/natMethod.cc \\\n+java/net/natInetAddress.cc \\\n+java/net/natPlainSocketImpl.cc \\\n+java/text/natCollator.cc \\\n+java/util/natDate.cc \\\n+java/util/natGregorianCalendar.cc\n \n ## ################################################################\n "}, {"sha": "f1b093b0f3d9bfaa69b2ad0fdf1906ad052be82e", "filename": "libjava/Makefile.in", "status": "modified", "additions": 41, "deletions": 18, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e894a8cc0344dbbefc57523ff53e990854fcfb/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e894a8cc0344dbbefc57523ff53e990854fcfb/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=a0e894a8cc0344dbbefc57523ff53e990854fcfb", "patch": "@@ -398,6 +398,9 @@ java/security/NoSuchAlgorithmException.java \\\n java/text/BreakIterator.java \\\n java/text/CharacterIterator.java \\\n java/text/ChoiceFormat.java \\\n+java/text/CollationElementIterator.java \\\n+java/text/CollationKey.java \\\n+java/text/Collator.java \\\n java/text/DateFormat.java \\\n java/text/DateFormatSymbols.java \\\n java/text/DecimalFormat.java \\\n@@ -408,6 +411,7 @@ java/text/MessageFormat.java \\\n java/text/NumberFormat.java \\\n java/text/ParseException.java \\\n java/text/ParsePosition.java \\\n+java/text/RuleBasedCollator.java \\\n java/text/SimpleDateFormat.java\t\\\n java/text/StringCharacterIterator.java \\\n java/util/BitSet.java \\\n@@ -466,19 +470,35 @@ c_source_files = \\\n   java/lang/k_cos.c       java/lang/s_sin.c\n \n \n-nat_source_files = java/lang/natObject.cc java/lang/natClass.cc\t\\\n-java/lang/natString.cc java/lang/natDouble.cc java/lang/natRuntime.cc \\\n-java/lang/natSystem.cc java/lang/natThread.cc java/io/natFile.cc \\\n-java/io/natFileDescriptor.cc java/util/natDate.cc \\\n-java/util/natGregorianCalendar.cc java/lang/natFirstThread.cc \\\n-java/lang/natCharacter.cc java/lang/natMath.cc java/lang/natFloat.cc \\\n-java/lang/reflect/natField.cc java/net/natInetAddress.cc \\\n-java/net/natPlainSocketImpl.cc java/lang/reflect/natMethod.cc \\\n-java/lang/reflect/natArray.cc gnu/gcj/convert/Unicode_to_JIS.cc \\\n-gnu/gcj/convert/natInput_EUCJIS.cc gnu/gcj/convert/natOutput_EUCJIS.cc \\\n-gnu/gcj/convert/natInput_SJIS.cc gnu/gcj/convert/natOutput_SJIS.cc \\\n+nat_source_files = \\\n gnu/gcj/convert/JIS0208_to_Unicode.cc \\\n-gnu/gcj/convert/JIS0212_to_Unicode.cc\n+gnu/gcj/convert/JIS0212_to_Unicode.cc \\\n+gnu/gcj/convert/Unicode_to_JIS.cc \\\n+gnu/gcj/convert/natInput_EUCJIS.cc \\\n+gnu/gcj/convert/natInput_SJIS.cc \\\n+gnu/gcj/convert/natOutput_EUCJIS.cc \\\n+gnu/gcj/convert/natOutput_SJIS.cc \\\n+java/io/natFile.cc \\\n+java/io/natFileDescriptor.cc \\\n+java/lang/natCharacter.cc \\\n+java/lang/natClass.cc \\\n+java/lang/natDouble.cc \\\n+java/lang/natFirstThread.cc \\\n+java/lang/natFloat.cc \\\n+java/lang/natMath.cc \\\n+java/lang/natObject.cc \\\n+java/lang/natRuntime.cc\t\\\n+java/lang/natString.cc \\\n+java/lang/natSystem.cc \\\n+java/lang/natThread.cc \\\n+java/lang/reflect/natArray.cc \\\n+java/lang/reflect/natField.cc \\\n+java/lang/reflect/natMethod.cc \\\n+java/net/natInetAddress.cc \\\n+java/net/natPlainSocketImpl.cc \\\n+java/text/natCollator.cc \\\n+java/util/natDate.cc \\\n+java/util/natGregorianCalendar.cc\n \n \n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n@@ -716,12 +736,15 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/security/MessageDigest.P \\\n .deps/java/security/NoSuchAlgorithmException.P \\\n .deps/java/text/BreakIterator.P .deps/java/text/CharacterIterator.P \\\n-.deps/java/text/ChoiceFormat.P .deps/java/text/DateFormat.P \\\n-.deps/java/text/DateFormatSymbols.P .deps/java/text/DecimalFormat.P \\\n-.deps/java/text/DecimalFormatSymbols.P .deps/java/text/FieldPosition.P \\\n-.deps/java/text/Format.P .deps/java/text/MessageFormat.P \\\n-.deps/java/text/NumberFormat.P .deps/java/text/ParseException.P \\\n-.deps/java/text/ParsePosition.P .deps/java/text/SimpleDateFormat.P \\\n+.deps/java/text/ChoiceFormat.P \\\n+.deps/java/text/CollationElementIterator.P \\\n+.deps/java/text/CollationKey.P .deps/java/text/Collator.P \\\n+.deps/java/text/DateFormat.P .deps/java/text/DateFormatSymbols.P \\\n+.deps/java/text/DecimalFormat.P .deps/java/text/DecimalFormatSymbols.P \\\n+.deps/java/text/FieldPosition.P .deps/java/text/Format.P \\\n+.deps/java/text/MessageFormat.P .deps/java/text/NumberFormat.P \\\n+.deps/java/text/ParseException.P .deps/java/text/ParsePosition.P \\\n+.deps/java/text/RuleBasedCollator.P .deps/java/text/SimpleDateFormat.P \\\n .deps/java/text/StringCharacterIterator.P .deps/java/util/BitSet.P \\\n .deps/java/util/Calendar.P \\\n .deps/java/util/ConcurrentModificationException.P \\"}, {"sha": "f21f7cef0ce6d94b84aef743d332d609b2d82182", "filename": "libjava/gnu/gcj/text/LocaleData_en.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e894a8cc0344dbbefc57523ff53e990854fcfb/libjava%2Fgnu%2Fgcj%2Ftext%2FLocaleData_en.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e894a8cc0344dbbefc57523ff53e990854fcfb/libjava%2Fgnu%2Fgcj%2Ftext%2FLocaleData_en.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Ftext%2FLocaleData_en.java?ref=a0e894a8cc0344dbbefc57523ff53e990854fcfb", "patch": "@@ -71,7 +71,7 @@ public final class LocaleData_en extends ListResourceBundle\n     // FIXME: this is nowhere near complete.\n     // In particular we must mark accents as ignorable,\n     // and probably other things as well.\n-    { \"collatorRule\", \"0 < 1 < 2 < 3 < 4 < 5 < 6 < 7 < 8 < 9 < a,A < b,B < c,C < d,D < e,E < f,F < g,G < h,H < i,I < j,J < k,K < l,L < m,M < n,N < o,O < p,P < q,Q < r,R < s,S < t,T < u,U < v,V < w,W < x,X < y,Y < z,Z\" }\n+    { \"collatorRule\", \"< 0 < 1 < 2 < 3 < 4 < 5 < 6 < 7 < 8 < 9 < a,A < b,B < c,C < d,D < e,E < f,F < g,G < h,H < i,I < j,J < k,K < l,L < m,M < n,N < o,O < p,P < q,Q < r,R < s,S < t,T < u,U < v,V < w,W < x,X < y,Y < z,Z\" }\n   };\n \n   protected Object[][] getContents ()"}, {"sha": "70f78fbf8e599f98eb4d46a018ed71db5bf7aa6e", "filename": "libjava/java/lang/StringBuffer.java", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e894a8cc0344dbbefc57523ff53e990854fcfb/libjava%2Fjava%2Flang%2FStringBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e894a8cc0344dbbefc57523ff53e990854fcfb/libjava%2Fjava%2Flang%2FStringBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FStringBuffer.java?ref=a0e894a8cc0344dbbefc57523ff53e990854fcfb", "patch": "@@ -98,7 +98,13 @@ public synchronized void ensureCapacity (int minimumCapacity)\n     {\n       if (shared || minimumCapacity > value.length)\n \t{\n-\t  minimumCapacity = Math.max(minimumCapacity, value.length*2+2);\n+\t  // We don't want to make a larger vector when `shared' is\n+\t  // set.  If we do, then setLength becomes very inefficient\n+\t  // when repeatedly reusing a StringBuffer in a loop.\n+\t  int max = (minimumCapacity > value.length\n+\t\t     ? value.length*2+2\n+\t\t     : value.length);\n+\t  minimumCapacity = Math.max(minimumCapacity, max);\n \t  char[] nb = new char[minimumCapacity];\n \t  System.arraycopy(value, 0, nb, 0, count);\n \t  value = nb;"}, {"sha": "15e60560189f63b523bdab60cb447e93584da967", "filename": "libjava/java/text/CollationElementIterator.java", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e894a8cc0344dbbefc57523ff53e990854fcfb/libjava%2Fjava%2Ftext%2FCollationElementIterator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e894a8cc0344dbbefc57523ff53e990854fcfb/libjava%2Fjava%2Ftext%2FCollationElementIterator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FCollationElementIterator.java?ref=a0e894a8cc0344dbbefc57523ff53e990854fcfb", "patch": "@@ -27,7 +27,7 @@ public int next ()\n   {\n     if (index == text.length())\n       return NULLORDER;\n-    return RuleBasedCollator.ceiNext(this);\n+    return collator.ceiNext(this);\n   }\n \n   // This one returns int while the others return short.\n@@ -55,12 +55,13 @@ public static final short tertiaryOrder (int order)\n   }\n \n   // Non-public constructor.\n-  CollationElementIterator (String text)\n+  CollationElementIterator (String text, RuleBasedCollator collator)\n   {\n     this.text = text;\n     this.index = 0;\n     this.lookahead_set = false;\n     this.lookahead = 0;\n+    this.collator = collator;\n   }\n \n   // Text over which we iterate.\n@@ -72,4 +73,7 @@ public static final short tertiaryOrder (int order)\n   // A piece of lookahead.\n   boolean lookahead_set;\n   int lookahead;\n+\n+  // The RuleBasedCollator which created this object.\n+  RuleBasedCollator collator;\n }"}, {"sha": "fd4002b1a9f11a5e9b1092074c3edbd8d17520fd", "filename": "libjava/java/text/RuleBasedCollator.java", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e894a8cc0344dbbefc57523ff53e990854fcfb/libjava%2Fjava%2Ftext%2FRuleBasedCollator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e894a8cc0344dbbefc57523ff53e990854fcfb/libjava%2Fjava%2Ftext%2FRuleBasedCollator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FRuleBasedCollator.java?ref=a0e894a8cc0344dbbefc57523ff53e990854fcfb", "patch": "@@ -43,7 +43,7 @@ public Object clone ()\n   }\n \n   // A helper for CollationElementIterator.next().\n-  static int ceiNext (CollationElementIterator cei)\n+  int ceiNext (CollationElementIterator cei)\n   {\n     if (cei.lookahead_set)\n       {\n@@ -61,7 +61,7 @@ static int ceiNext (CollationElementIterator cei)\n     boolean found = false;\n \n     int i;\n-    for (i = save; i < max; ++i)\n+    for (i = save + 1; i <= max; ++i)\n       {\n \ts = cei.text.substring(save, i);\n \tif (prefixes.get(s) == null)\n@@ -108,16 +108,15 @@ static final int next (CollationElementIterator iter, int strength)\n \tswitch (strength)\n \t  {\n \t  case PRIMARY:\n-\t    c |= CollationElementIterator.primaryOrder(os);\n-\t    /* Fall through.  */\n+\t    c = os & ~0xffff;\n+\t    break;\n \t  case SECONDARY:\n-\t    c |= CollationElementIterator.secondaryOrder(os);\n-\t    /* Fall through.  */\n-\t  case TERTIARY:\n-\t    c |= CollationElementIterator.tertiaryOrder(os);\n+\t    c = os & ~0x00ff;\n \t    break;\n+\t  case TERTIARY:\n \t  case IDENTICAL:\n \t    c = os;\n+\t    break;\n \t  }\n \tif (c != 0)\n \t  return c;\n@@ -128,8 +127,8 @@ public int compare (String source, String target)\n   {\n     CollationElementIterator cs, ct;\n \n-    cs = new CollationElementIterator (source);\n-    ct = new CollationElementIterator (target);\n+    cs = new CollationElementIterator (source, this);\n+    ct = new CollationElementIterator (target, this);\n \n     while (true)\n       {\n@@ -140,9 +139,15 @@ public int compare (String source, String target)\n \t    && ot == CollationElementIterator.NULLORDER)\n \t  break;\n \telse if (os == CollationElementIterator.NULLORDER)\n-\t  return 1;\n+\t  {\n+\t    // Source string is shorter, so return \"less than\".\n+\t    return -1;\n+\t  }\n \telse if (ot == CollationElementIterator.NULLORDER)\n-\t  return -1;\n+\t  {\n+\t    // Target string is shorter, so return \"greater than\".\n+\t    return 1;\n+\t  }\n \n \tif (os != ot)\n \t  return os - ot;\n@@ -168,7 +173,7 @@ public CollationElementIterator getCollationElementIterator (String source)\n     int max = source.length();\n     for (int i = 0; i < max; ++i)\n       decomposeCharacter (source.charAt(i), expand);\n-    return new CollationElementIterator (expand.toString());\n+    return new CollationElementIterator (expand.toString(), this);\n   }\n \n   public CollationKey getCollationKey (String source)"}, {"sha": "378ac5c448c3dfab0553261090b87672556bd4aa", "filename": "libjava/java/text/natCollator.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e894a8cc0344dbbefc57523ff53e990854fcfb/libjava%2Fjava%2Ftext%2FnatCollator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e894a8cc0344dbbefc57523ff53e990854fcfb/libjava%2Fjava%2Ftext%2FnatCollator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FnatCollator.cc?ref=a0e894a8cc0344dbbefc57523ff53e990854fcfb", "patch": "@@ -30,7 +30,7 @@ java::text::Collator::decomposeCharacter (jchar c,\n       return;\n     }\n \n-  struct decomp_entry *base;\n+  const struct decomp_entry *base;\n   int high;\n \n   if (decmp == FULL_DECOMPOSITION)"}, {"sha": "627841499aa8efbd1c6eccc464eca42155e38af8", "filename": "libjava/java/util/Locale.java", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e894a8cc0344dbbefc57523ff53e990854fcfb/libjava%2Fjava%2Futil%2FLocale.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e894a8cc0344dbbefc57523ff53e990854fcfb/libjava%2Fjava%2Futil%2FLocale.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FLocale.java?ref=a0e894a8cc0344dbbefc57523ff53e990854fcfb", "patch": "@@ -36,33 +36,34 @@ public final class Locale implements java.io.Serializable, Cloneable\n \n   public Locale (String languageCode, String countryCode)\n   {\n-    language = languageCode.toLowerCase();\n-    country = countryCode.toUpperCase();\n-    hashcode = languageCode.hashCode() ^ countryCode.hashCode();\n+    this (languageCode, countryCode, \"\");\n   }\n \n   public Locale (String languageCode, String countryCode,\n \t\t String variantCode)\n   {\n-    this (languageCode, countryCode);\n-    variant = variantCode;\n-    hashcode ^= variantCode.hashCode();\n+    // We must explicitly check the arguments.\n+    if (languageCode == null || countryCode == null\n+\t|| variantCode == null)\n+      throw new NullPointerException ();\n+    language = languageCode.toLowerCase();\n+    country = countryCode.toUpperCase();\n+    variant = variantCode.toUpperCase();\n+    hashcode = (languageCode.hashCode()\n+\t\t^ countryCode.hashCode()\n+\t\t^ variantCode.hashCode());\n   }\n \n   public Object clone ()\n-    {\n-      return (Object) new Locale (language, country, variant);\n-    }\n+  {\n+    return (Object) new Locale (language, country, variant);\n+  }\n \n   public boolean equals (Object obj)\n     {\n       if (! (obj instanceof Locale))\n \treturn false;\n       Locale loc = (Locale) obj;\n-      if ((language == null && loc.language != null)\n-\t  || (country == null && loc.country != null)\n-\t  || (variant == null && loc.variant != null))\n-\treturn false;\n       return (language.equals(loc.language)\n \t      && country.equals(loc.country)\n \t      && variant.equals(loc.variant));\n@@ -115,7 +116,7 @@ public String toString ()\n     result.append(language);\n     result.append('_');\n     result.append(country);\n-    if (variant != null && variant.length() > 0)\n+    if (variant.length() > 0)\n       {\n \tresult.append('_');\n \tresult.append(variant);"}, {"sha": "05503c619e9fed5bd719b183a2176ff6f62d4909", "filename": "libjava/java/util/ResourceBundle.java", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e894a8cc0344dbbefc57523ff53e990854fcfb/libjava%2Fjava%2Futil%2FResourceBundle.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e894a8cc0344dbbefc57523ff53e990854fcfb/libjava%2Fjava%2Futil%2FResourceBundle.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FResourceBundle.java?ref=a0e894a8cc0344dbbefc57523ff53e990854fcfb", "patch": "@@ -20,6 +20,9 @@\n {\n   protected ResourceBundle parent;\n \n+  // This is used to cache resource bundles.\n+  private static Hashtable resource_cache = new Hashtable ();\n+\n   public ResourceBundle ()\n     {\n     }\n@@ -65,15 +68,17 @@ private static final ResourceBundle trySomeGetBundle (String bundleName,\n \t\t\t\t\t\t\tString stopHere)\n     {\n       Class rbc;\n+      ResourceBundle needs_parent = null, r, result = null;\n \n       while (true)\n \t{\n \t  try \n \t    {\n \t      rbc = Class.forName(bundleName);\n+\t      r = null;\n \t      try \n \t\t{\n-\t\t  return (ResourceBundle) rbc.newInstance();\n+\t\t  r = (ResourceBundle) rbc.newInstance();\n \t\t}\n \t      catch (IllegalAccessException ex)\n \t\t{\n@@ -83,45 +88,61 @@ private static final ResourceBundle trySomeGetBundle (String bundleName,\n \t\t{\n \t\t  // Fall through\n \t\t}\n-\t      return null;\n+\t      if (r != null)\n+\t\t{\n+\t\t  if (result == null)\n+\t\t    result = r;\n+\t\t  if (needs_parent != null)\n+\t\t    {\n+\t\t      // We've been through the loop one or more times\n+\t\t      // already.  Set the parent and keep going.\n+\t\t      needs_parent.setParent(r);\n+\t\t    }\n+\t\t  needs_parent = r;\n+\t\t}\n \t    }\n \t  catch (ClassNotFoundException ex)\n \t    {\n-\t      if (bundleName.compareTo(stopHere) == 0)\n-\t\treturn null;\n-\t      else\n-\t\t{\n-\t\t  int last = bundleName.lastIndexOf('_');\n-\t\t  \n-\t\t  // No more underscores?\n-\t\t  if (last == -1)\n-\t\t    return null;\n+\t      // Fall through.\n+\t    }\n+\n+\t  if (bundleName.equals(stopHere))\n+\t    return result;\n+\t  else\n+\t    {\n+\t      int last = bundleName.lastIndexOf('_');\n \t\t  \n-\t\t  // Loop around, testing this new shorter name.\n-\t\t  bundleName = bundleName.substring(0, last);\n-\t\t}\n+\t      // No more underscores?\n+\t      if (last == -1)\n+\t\treturn result;\n+\n+\t      // Loop around, testing this new shorter name.\n+\t      bundleName = bundleName.substring(0, last);\n \t    }\n \t}\n     }\n-  \n-  // Search for bundles, but stop at baseName_language.\n-  private static final ResourceBundle partialGetBundle (String baseName,\n-\t\t\t\t\t\t\tLocale locale)\n+\n+  // Search for bundles, but stop at baseName_language (if required).\n+  // This is synchronized so that the cache works correctly.\n+  private static final synchronized ResourceBundle\n+    partialGetBundle (String baseName, Locale locale, boolean langStop)\n     {\n       ResourceBundle rb;\n \n-      String bundleName = (baseName \n-\t\t\t   + \"_\" \n-\t\t\t   + locale.getLanguage() + \"_\"\n-\t\t\t   + locale.getCountry() + \"_\"\n-\t\t\t   + locale.getVariant());\n+      String bundleName = baseName + \"_\" + locale;\n+\n+      // Check the cache.\n+      Object obj = resource_cache.get(bundleName);\n+      if (obj != null)\n+\treturn (ResourceBundle) obj;\n \n       String stopHere = (baseName \n-\t\t\t + \"_\" \n-\t\t\t + locale.getLanguage());\n+\t\t\t + (langStop ? (\"_\" + locale.getLanguage()) : \"\"));\n \n \n       rb = trySomeGetBundle(bundleName, stopHere);\n+      if (rb != null)\n+\tresource_cache.put(bundleName, rb);\n \n       return rb;\n     }\n@@ -138,39 +159,18 @@ public static final ResourceBundle getBundle (String baseName,\n       if (locale == null)\n \tthrow new NullPointerException ();\n \n-      rb = partialGetBundle(baseName, locale);\n+      rb = partialGetBundle(baseName, locale, false);\n       if (rb != null)\n \treturn rb;\n \n+      // Finally, try the default locale.\n       if (! locale.equals(Locale.getDefault()))\n \t{\n-\t  rb = partialGetBundle(baseName, Locale.getDefault());\n+\t  rb = partialGetBundle(baseName, Locale.getDefault(), true);\n \t  if (rb != null)\n \t    return rb;\n \t}\n \t\t\t   \n-      // Try just the baseName.\n-      try\n-\t{\n-\t  rbc = Class.forName (baseName);\n-\t  try \n-\t    {\n-\t      return (ResourceBundle) rbc.newInstance();\n-\t    }\n-\t  catch (IllegalAccessException ex)\n-\t    {\n-\t      // Fall through.\n-\t    }\n-\t  catch (InstantiationException ex)\n-\t    {\n-\t      // Fall through.\n-\t    }\n-\t}\n-      catch (ClassNotFoundException ex)\n-\t{\n-\t  // Fall through.\n-\t}\n-\n       throw new MissingResourceException(\"can't load bundle\", \n \t\t\t\t\t baseName,\n \t\t\t\t\t \"bundle\");"}, {"sha": "03bcb2645d63ffb05bf67bd8fe2c99762969296c", "filename": "libjava/mauve-libgcj", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e894a8cc0344dbbefc57523ff53e990854fcfb/libjava%2Fmauve-libgcj", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e894a8cc0344dbbefc57523ff53e990854fcfb/libjava%2Fmauve-libgcj", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fmauve-libgcj?ref=a0e894a8cc0344dbbefc57523ff53e990854fcfb", "patch": "@@ -22,8 +22,8 @@ java.text.StringCharacterIterator.iter\n # java.text.SimpleDateFormat.getAndSet2DigitYearStart\n !java.text.ACIAttribute\n !java.text.AttributedCharacterIterator\n-!java.text.Collator\n-!java.text.RuleBasedCollator\n+java.text.Collator\n+java.text.RuleBasedCollator\n !java.text.resources\n !java.text.DateFormat\n !java.util.zip"}]}