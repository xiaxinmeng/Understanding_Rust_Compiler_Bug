{"sha": "1902704eb765abf8ec8acfbf8c2a459f1e7eb65b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkwMjcwNGViNzY1YWJmOGVjOGFjZmJmOGMyYTQ1OWYxZTdlYjY1Yg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-01-18T18:55:01Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-01-18T18:55:01Z"}, "message": "re PR fortran/20869 (EXTERNAL and INTRINSIC cannot be used together)\n\n2006-01-18  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/20869\n\tPR fortran/20875\n\tPR fortran/25024\n\t* symbol.c (check_conflict): Add pointer valued elemental\n\tfunctions and internal procedures with the external attribute\n\tto the list of conflicts.\n\t(gfc_add_attribute): New catch-all function to perform the\n\tchecking of symbol attributes for attribute declaration\n\tstatements.\n\t* decl.c (attr_decl1): Call gfc_add_attribute for each of -\n\t(gfc_match_external, gfc_match_intent, gfc_match_intrinsic,\n\tgfc_match_pointer, gfc_match_dimension, gfc_match_target):\n\tRemove spurious calls to checks in symbol.c.  Set the\n\tattribute directly and use the call to attr_decl() for\n\tchecking.\n\t* gfortran.h:  Add prototype for gfc_add_attribute.\n\n\tPR fortran/25785\n\t* resolve.c (resolve_function): Exclude PRESENT from assumed size\n\targument checking. Replace strcmp's with comparisons with generic\n\tcodes.\n\n2006-01-18  Paul Thomas  <pault@gcc.gnu.org>\n\t    Steven G. Kargl  <kargls@comcast.net>\n\n\tPR fortran/20869\n\t* gfortran.dg/intrinsic_external_1.f90: New test.\n\n\tPR fortran/20875.\n\t* gfortran.dg/elemental_pointer_1.f90: New test.\n\n\tPR fortran/25024\n\t* gfortran.dg/external_procedures_1.f90: New test.\n\n\tPR fortran/25785\n\tgfortran.dg/assumed_present.f90: New test.\n\nCo-Authored-By: Steven G. Kargl <kargls@comcast.net>\n\nFrom-SVN: r109899", "tree": {"sha": "604f003d8d69e4a1d7d99ba57be29731e7ace010", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/604f003d8d69e4a1d7d99ba57be29731e7ace010"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1902704eb765abf8ec8acfbf8c2a459f1e7eb65b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1902704eb765abf8ec8acfbf8c2a459f1e7eb65b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1902704eb765abf8ec8acfbf8c2a459f1e7eb65b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1902704eb765abf8ec8acfbf8c2a459f1e7eb65b/comments", "author": null, "committer": null, "parents": [{"sha": "94a89f3bbcd95924c498c309defd168666cc308e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94a89f3bbcd95924c498c309defd168666cc308e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94a89f3bbcd95924c498c309defd168666cc308e"}], "stats": {"total": 159, "additions": 147, "deletions": 12}, "files": [{"sha": "1592d8b6091261d04b6faac43b8caf371443f0d3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1902704eb765abf8ec8acfbf8c2a459f1e7eb65b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1902704eb765abf8ec8acfbf8c2a459f1e7eb65b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1902704eb765abf8ec8acfbf8c2a459f1e7eb65b", "patch": "@@ -1,3 +1,27 @@\n+2006-01-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/20869\n+\tPR fortran/20875\n+\tPR fortran/25024\n+\t* symbol.c (check_conflict): Add pointer valued elemental\n+\tfunctions and internal procedures with the external attribute\n+\tto the list of conflicts.\n+\t(gfc_add_attribute): New catch-all function to perform the\n+\tchecking of symbol attributes for attribute declaration\n+\tstatements.\n+\t* decl.c (attr_decl1): Call gfc_add_attribute for each of -\n+\t(gfc_match_external, gfc_match_intent, gfc_match_intrinsic,\n+\tgfc_match_pointer, gfc_match_dimension, gfc_match_target):\n+\tRemove spurious calls to checks in symbol.c.  Set the\n+\tattribute directly and use the call to attr_decl() for\n+\tchecking.\n+\t* gfortran.h:  Add prototype for gfc_add_attribute.\n+\n+\tPR fortran/25785\n+\t* resolve.c (resolve_function): Exclude PRESENT from assumed size\n+\targument checking. Replace strcmp's with comparisons with generic\n+\tcodes.\n+\n 2006-01-16  Rafael \u00c1vila de Esp\u00edndola  <rafael.espindola@gmail.com>\n \n \t* gfortranspec.c (lang_specific_spec_functions): Remove."}, {"sha": "91e5820031e59457093e815271381283d271ed70", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1902704eb765abf8ec8acfbf8c2a459f1e7eb65b/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1902704eb765abf8ec8acfbf8c2a459f1e7eb65b/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=1902704eb765abf8ec8acfbf8c2a459f1e7eb65b", "patch": "@@ -3154,6 +3154,12 @@ attr_decl1 (void)\n \tgoto cleanup;\n     }\n \n+  if (gfc_add_attribute (&sym->attr, &var_locus) == FAILURE)\n+    {\n+      m = MATCH_ERROR;\n+      goto cleanup;\n+    }\n+\n   if ((current_attr.external || current_attr.intrinsic)\n       && sym->attr.flavor != FL_PROCEDURE\n       && gfc_add_flavor (&sym->attr, FL_PROCEDURE, sym->name, NULL) == FAILURE)\n@@ -3361,7 +3367,7 @@ gfc_match_external (void)\n {\n \n   gfc_clear_attr (&current_attr);\n-  gfc_add_external (&current_attr, NULL);\n+  current_attr.external = 1;\n \n   return attr_decl ();\n }\n@@ -3378,7 +3384,7 @@ gfc_match_intent (void)\n     return MATCH_ERROR;\n \n   gfc_clear_attr (&current_attr);\n-  gfc_add_intent (&current_attr, intent, NULL);\t/* Can't fail */\n+  current_attr.intent = intent;\n \n   return attr_decl ();\n }\n@@ -3389,7 +3395,7 @@ gfc_match_intrinsic (void)\n {\n \n   gfc_clear_attr (&current_attr);\n-  gfc_add_intrinsic (&current_attr, NULL);\n+  current_attr.intrinsic = 1;\n \n   return attr_decl ();\n }\n@@ -3400,7 +3406,7 @@ gfc_match_optional (void)\n {\n \n   gfc_clear_attr (&current_attr);\n-  gfc_add_optional (&current_attr, NULL);\n+  current_attr.optional = 1;\n \n   return attr_decl ();\n }\n@@ -3423,7 +3429,7 @@ gfc_match_pointer (void)\n   else\n     {\n       gfc_clear_attr (&current_attr);\n-      gfc_add_pointer (&current_attr, NULL);\n+      current_attr.pointer = 1;\n     \n       return attr_decl ();\n     }\n@@ -3435,7 +3441,7 @@ gfc_match_allocatable (void)\n {\n \n   gfc_clear_attr (&current_attr);\n-  gfc_add_allocatable (&current_attr, NULL);\n+  current_attr.allocatable = 1;\n \n   return attr_decl ();\n }\n@@ -3446,7 +3452,7 @@ gfc_match_dimension (void)\n {\n \n   gfc_clear_attr (&current_attr);\n-  gfc_add_dimension (&current_attr, NULL, NULL);\n+  current_attr.dimension = 1;\n \n   return attr_decl ();\n }\n@@ -3457,7 +3463,7 @@ gfc_match_target (void)\n {\n \n   gfc_clear_attr (&current_attr);\n-  gfc_add_target (&current_attr, NULL);\n+  current_attr.target = 1;\n \n   return attr_decl ();\n }"}, {"sha": "66db8d804f12b9001bea98333df622c83ab56996", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1902704eb765abf8ec8acfbf8c2a459f1e7eb65b/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1902704eb765abf8ec8acfbf8c2a459f1e7eb65b/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=1902704eb765abf8ec8acfbf8c2a459f1e7eb65b", "patch": "@@ -1700,6 +1700,7 @@ void gfc_get_component_attr (symbol_attribute *, gfc_component *);\n \n void gfc_set_sym_referenced (gfc_symbol * sym);\n \n+try gfc_add_attribute (symbol_attribute *, locus *);\n try gfc_add_allocatable (symbol_attribute *, locus *);\n try gfc_add_dimension (symbol_attribute *, const char *, locus *);\n try gfc_add_external (symbol_attribute *, locus *);"}, {"sha": "f51fcf8bcc4b93bb0f9a1d4dad22adc85be0c1b9", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1902704eb765abf8ec8acfbf8c2a459f1e7eb65b/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1902704eb765abf8ec8acfbf8c2a459f1e7eb65b/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=1902704eb765abf8ec8acfbf8c2a459f1e7eb65b", "patch": "@@ -1235,16 +1235,17 @@ resolve_function (gfc_expr * expr)\n     }\n \n   else if (expr->value.function.actual != NULL\n-      && expr->value.function.isym != NULL\n-      && strcmp (expr->value.function.isym->name, \"lbound\"))\n+\t     && expr->value.function.isym != NULL\n+\t     && expr->value.function.isym->generic_id != GFC_ISYM_LBOUND\n+\t     && expr->value.function.isym->generic_id != GFC_ISYM_PRESENT)\n     {\n       /* Array instrinsics must also have the last upper bound of an\n \t asumed size array argument.  UBOUND and SIZE have to be\n \t excluded from the check if the second argument is anything\n \t than a constant.  */\n       int inquiry;\n-      inquiry = strcmp (expr->value.function.isym->name, \"ubound\") == 0\n-\t\t  || strcmp (expr->value.function.isym->name, \"size\") == 0;\n+      inquiry = expr->value.function.isym->generic_id == GFC_ISYM_UBOUND\n+\t\t  || expr->value.function.isym->generic_id == GFC_ISYM_SIZE;\n \t    \n       for (arg = expr->value.function.actual; arg; arg = arg->next)\n \t{"}, {"sha": "c3e15f2d1dd945a1c401ab71804a2836f521f026", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1902704eb765abf8ec8acfbf8c2a459f1e7eb65b/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1902704eb765abf8ec8acfbf8c2a459f1e7eb65b/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=1902704eb765abf8ec8acfbf8c2a459f1e7eb65b", "patch": "@@ -311,11 +311,20 @@ check_conflict (symbol_attribute * attr, const char * name, locus * where)\n   conf (pointer, target);\n   conf (pointer, external);\n   conf (pointer, intrinsic);\n+  conf (pointer, elemental);\n+\n   conf (target, external);\n   conf (target, intrinsic);\n   conf (external, dimension);   /* See Fortran 95's R504.  */\n \n   conf (external, intrinsic);\n+    \n+  if (attr->if_source || attr->contained)\n+    {\n+      conf (external, subroutine);\n+      conf (external, function);\n+    }\n+\n   conf (allocatable, pointer);\n   conf (allocatable, dummy);\t/* TODO: Allowed in Fortran 200x.  */\n   conf (allocatable, function);\t/* TODO: Allowed in Fortran 200x.  */\n@@ -584,6 +593,16 @@ duplicate_attr (const char *attr, locus * where)\n }\n \n \n+try\n+gfc_add_attribute (symbol_attribute * attr, locus * where)\n+{\n+\n+  if (check_used (attr, NULL, where) || check_done (attr, where))\n+    return FAILURE;\n+\n+  return check_conflict (attr, NULL, where);\n+}\n+\n try\n gfc_add_allocatable (symbol_attribute * attr, locus * where)\n {"}, {"sha": "81f21e490586c82667b6e3e2cb8c609c16d73563", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1902704eb765abf8ec8acfbf8c2a459f1e7eb65b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1902704eb765abf8ec8acfbf8c2a459f1e7eb65b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1902704eb765abf8ec8acfbf8c2a459f1e7eb65b", "patch": "@@ -1,3 +1,18 @@\n+2006-01-18  Paul Thomas  <pault@gcc.gnu.org>\n+\t    Steven G. Kargl  <kargls@comcast.net>\n+\n+\tPR fortran/20869\n+\t* gfortran.dg/intrinsic_external_1.f90: New test.\n+\n+\tPR fortran/20875.\n+\t* gfortran.dg/elemental_pointer_1.f90: New test.\n+\n+\tPR fortran/25024\n+\t* gfortran.dg/external_procedures_1.f90: New test.\n+\n+\tPR fortran/25785\n+\tgfortran.dg/assumed_present.f90: New test.\n+\n 2006-01-18  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/parse/lookup5.C: New test."}, {"sha": "dd9f85ca88fe0e9804275e2ecc7b6859bf00e0d1", "filename": "gcc/testsuite/gfortran.dg/assumed_present.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1902704eb765abf8ec8acfbf8c2a459f1e7eb65b/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_present.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1902704eb765abf8ec8acfbf8c2a459f1e7eb65b/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_present.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_present.f90?ref=1902704eb765abf8ec8acfbf8c2a459f1e7eb65b", "patch": "@@ -0,0 +1,9 @@\n+! { dg-do compile }\n+! This tests the fix for the regression PR25785, where line 7 started\n+! generating an assumed size error.\n+! Contributed by Dale Ranta  <dir@lanl.gov>\n+      subroutine my_sio_file_write_common(data_c1)\n+        character,   intent(in), optional :: data_c1(*)\n+        if (present(data_c1)) then\n+        endif\n+      end subroutine my_sio_file_write_common"}, {"sha": "b5d99611c78fa7aa33b0a85b312d4121e67ee1b8", "filename": "gcc/testsuite/gfortran.dg/elemental_pointer_1.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1902704eb765abf8ec8acfbf8c2a459f1e7eb65b/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_pointer_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1902704eb765abf8ec8acfbf8c2a459f1e7eb65b/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_pointer_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_pointer_1.f90?ref=1902704eb765abf8ec8acfbf8c2a459f1e7eb65b", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! Tests the fix for pr20875.\n+! Note 12.7.1 \"For a function, the result shall be scalar and shall not have the POINTER attribute.\"\n+MODULE Test\n+CONTAINS\n+  ELEMENTAL FUNCTION LL(I)\n+    INTEGER, INTENT(IN) :: I\n+    INTEGER :: LL\n+    POINTER  :: LL ! { dg-error \" POINTER attribute conflicts with ELEMENTAL attribute\" }\n+  END FUNCTION LL\n+END MODULE Test"}, {"sha": "95d0212353e6cddb08bda7ab02c741c7aa6dc28f", "filename": "gcc/testsuite/gfortran.dg/external_procedures_1.f90", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1902704eb765abf8ec8acfbf8c2a459f1e7eb65b/gcc%2Ftestsuite%2Fgfortran.dg%2Fexternal_procedures_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1902704eb765abf8ec8acfbf8c2a459f1e7eb65b/gcc%2Ftestsuite%2Fgfortran.dg%2Fexternal_procedures_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fexternal_procedures_1.f90?ref=1902704eb765abf8ec8acfbf8c2a459f1e7eb65b", "patch": "@@ -0,0 +1,41 @@\n+! { dg-do compile }\n+! This tests the patch for PR25024.\n+\n+! PR25024 - The external attribute for subroutine a would cause an ICE.\n+  subroutine A ()\n+    EXTERNAL A  ! { dg-error \"EXTERNAL attribute conflicts with SUBROUTINE\" }\n+  END\n+function ext (y)\n+  real ext, y\n+  external ext      ! { dg-error \"EXTERNAL attribute conflicts with FUNCTION\" }\n+  ext = y * y\n+end function ext\n+\n+function ext1 (y)\n+  real ext1, y\n+  external z        ! OK no conflict\n+  ext1 = y * y\n+end function ext1\n+\n+program main\n+  real ext, inval\n+  external ext       ! OK, valid external reference.\n+  external main      ! { dg-error \"PROGRAM attribute conflicts with EXTERNAL\" }\n+  interface\n+    function ext1 (y)\n+      real ext1, y\n+      external ext1  ! { dg-error \"EXTERNAL attribute conflicts with FUNCTION\" }\n+    end function ext1\n+  end interface\n+  inval = 1.0\n+  print *, ext(inval)\n+  print *, ext1(inval)\n+  print *, inv(inval)\n+contains\n+  function inv (y)\n+    real inv, y\n+    external inv     ! { dg-error \"EXTERNAL attribute conflicts with FUNCTION\" }\n+    inv = y * y * y\n+  end function inv\n+end program main\n+\r"}, {"sha": "7d590126f527bbc562cdb2e03b967c60a06190e4", "filename": "gcc/testsuite/gfortran.dg/intrinsic_external_1.f90", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1902704eb765abf8ec8acfbf8c2a459f1e7eb65b/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_external_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1902704eb765abf8ec8acfbf8c2a459f1e7eb65b/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_external_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_external_1.f90?ref=1902704eb765abf8ec8acfbf8c2a459f1e7eb65b", "patch": "@@ -0,0 +1,8 @@\n+! { dg-do compile }\n+! PR fortran/20869\n+! Note 12.11 \"A name shall not appear in both an EXTERNAL and an\n+! INTRINSIC statement in the same scoping unit.\n+program u\n+  intrinsic :: nint\n+  external :: nint  ! { dg-error \"EXTERNAL attribute conflicts with INTRINSIC attribute\" }\n+end program u"}]}