{"sha": "59e0376f607805ef9b67fd7b0a4a3084ab3571a5", "node_id": "C_kwDOANBUbNoAKDU5ZTAzNzZmNjA3ODA1ZWY5YjY3ZmQ3YjBhNGEzMDg0YWIzNTcxYTU", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-02-03T14:41:10Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-02-03T14:41:10Z"}, "message": "c++: unexpected ADDR_EXPR after overload set pruning [PR107461]\n\nHere the ahead-of-time overload set pruning in finish_call_expr is\nunintentionally returning a CALL_EXPR whose (pruned) callee is wrapped\nin an ADDR_EXPR, despite the original callee not being wrapped in an\nADDR_EXPR.  This ends up causing a bogus declaration mismatch error in\nthe below testcase because the call to min in #1 gets expressed as a\nCALL_EXPR of ADDR_EXPR of FUNCTION_DECL, whereas the level-lowered call\nto min in #2 gets expressed instead as a CALL_EXPR of FUNCTION_DECL.\n\nThis patch fixes this by stripping the spurious ADDR_EXPR appropriately.\nThus the first call to min now also gets expressed as a CALL_EXPR of\nFUNCTION_DECL, matching the behavior before r12-6075-g2decd2cabe5a4f.\n\n\tPR c++/107461\n\ngcc/cp/ChangeLog:\n\n\t* semantics.cc (finish_call_expr): Strip ADDR_EXPR from\n\tthe selected callee during overload set pruning.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/template/call9.C: New test.", "tree": {"sha": "14f66e3a67c240451c7814e5f314e7b05107ee54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14f66e3a67c240451c7814e5f314e7b05107ee54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59e0376f607805ef9b67fd7b0a4a3084ab3571a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59e0376f607805ef9b67fd7b0a4a3084ab3571a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59e0376f607805ef9b67fd7b0a4a3084ab3571a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59e0376f607805ef9b67fd7b0a4a3084ab3571a5/comments", "author": null, "committer": null, "parents": [{"sha": "ed2b519e02eac99fadfa51adc7b11f8854c24575", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed2b519e02eac99fadfa51adc7b11f8854c24575", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed2b519e02eac99fadfa51adc7b11f8854c24575"}], "stats": {"total": 41, "additions": 36, "deletions": 5}, "files": [{"sha": "c2df0b69b309f3b849ebf0dbba57cf732ca4303b", "filename": "gcc/cp/semantics.cc", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e0376f607805ef9b67fd7b0a4a3084ab3571a5/gcc%2Fcp%2Fsemantics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e0376f607805ef9b67fd7b0a4a3084ab3571a5/gcc%2Fcp%2Fsemantics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.cc?ref=59e0376f607805ef9b67fd7b0a4a3084ab3571a5", "patch": "@@ -2957,13 +2957,18 @@ finish_call_expr (tree fn, vec<tree, va_gc> **args, bool disallow_virtual,\n       if (TREE_CODE (result) == CALL_EXPR\n \t  && really_overloaded_fn (orig_fn))\n \t{\n-\t  orig_fn = CALL_EXPR_FN (result);\n-\t  if (TREE_CODE (orig_fn) == COMPONENT_REF)\n+\t  tree sel_fn = CALL_EXPR_FN (result);\n+\t  if (TREE_CODE (sel_fn) == COMPONENT_REF)\n \t    {\n \t      /* The non-dependent result of build_new_method_call.  */\n-\t      orig_fn = TREE_OPERAND (orig_fn, 1);\n-\t      gcc_assert (BASELINK_P (orig_fn));\n-\t    }\n+\t      sel_fn = TREE_OPERAND (sel_fn, 1);\n+\t      gcc_assert (BASELINK_P (sel_fn));\n+\t    }\n+\t  else if (TREE_CODE (sel_fn) == ADDR_EXPR)\n+\t    /* Our original callee wasn't wrapped in an ADDR_EXPR,\n+\t       so strip this ADDR_EXPR added by build_over_call.  */\n+\t    sel_fn = TREE_OPERAND (sel_fn, 0);\n+\t  orig_fn = sel_fn;\n \t}\n \n       result = build_call_vec (TREE_TYPE (result), orig_fn, orig_args);"}, {"sha": "6bdfd93258269237656c135a64f0c9454ebb0e35", "filename": "gcc/testsuite/g++.dg/template/call9.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e0376f607805ef9b67fd7b0a4a3084ab3571a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcall9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e0376f607805ef9b67fd7b0a4a3084ab3571a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcall9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcall9.C?ref=59e0376f607805ef9b67fd7b0a4a3084ab3571a5", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/107461\n+// { dg-do compile { target c++11 } }\n+\n+template<class T>\n+constexpr T min(T t0, T t1) {\n+  return t0 < t1 ? t0 : t1;\n+}\n+\n+template<int MAX>\n+struct Matrix;\n+\n+template<int MAXOP, int other_MAXOP>\n+Matrix<min(MAXOP, other_MAXOP)>\n+operator+(Matrix<MAXOP> const& lhs, Matrix<other_MAXOP> const& rhs); // #1\n+\n+template<int MAX>\n+struct Matrix {\n+  template<int MAXOP, int other_MAXOP>\n+  friend Matrix<min(MAXOP, other_MAXOP)>\n+  operator+(Matrix<MAXOP> const& lhs, Matrix<other_MAXOP> const& rhs); // #2\n+};\n+\n+int main() {\n+  Matrix<1> a;\n+  a+a;\n+}"}]}