{"sha": "8fc16d725206f2c40bae423d7d0d93bd1baf6da2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZjMTZkNzI1MjA2ZjJjNDBiYWU0MjNkN2QwZDkzYmQxYmFmNmRhMg==", "commit": {"author": {"name": "Sam Tebbs", "email": "sam.tebbs@arm.com", "date": "2019-05-29T09:22:17Z"}, "committer": {"name": "Sam Tebbs", "email": "samtebbs@gcc.gnu.org", "date": "2019-05-29T09:22:17Z"}, "message": "[PATCH 3/3][GCC][AARCH64] Add support for pointer authentication B key\n\ngcc/\n2019-05-29  Sam Tebbs  <sam.tebbs@arm.com>\n\n\t* config/aarch64/aarch64-builtins.c (aarch64_builtins): Add\n\tAARCH64_PAUTH_BUILTIN_AUTIB1716 and AARCH64_PAUTH_BUILTIN_PACIB1716.\n\t* config/aarch64/aarch64-builtins.c (aarch64_init_pauth_hint_builtins):\n\tAdd autib1716 and pacib1716 initialisation.\n\t* config/aarch64/aarch64-builtins.c (aarch64_expand_builtin): Add checks\n\tfor autib1716 and pacib1716.\n\t* config/aarch64/aarch64-protos.h (aarch64_key_type,\n\taarch64_post_cfi_startproc): Define.\n\t* config/aarch64/aarch64-protos.h (aarch64_ra_sign_key): Define extern.\n\t* config/aarch64/aarch64.c (aarch64_handle_standard_branch_protection,\n\taarch64_handle_pac_ret_protection): Set default sign key to A.\n\t* config/aarch64/aarch64.c (aarch64_expand_epilogue,\n\taarch64_expand_prologue): Add check for b-key.\n\t* config/aarch64/aarch64.c (aarch64_ra_sign_key,\n\taarch64_post_cfi_startproc, aarch64_handle_pac_ret_b_key): Define.\n\t* config/aarch64/aarch64.h (TARGET_ASM_POST_CFI_STARTPROC): Define.\n\t* config/aarch64/aarch64.c (aarch64_pac_ret_subtypes): Add \"b-key\".\n\t* config/aarch64/aarch64.md (unspec): Add UNSPEC_AUTIA1716,\n\tUNSPEC_AUTIB1716, UNSPEC_AUTIASP, UNSPEC_AUTIBSP, UNSPEC_PACIA1716,\n\tUNSPEC_PACIB1716, UNSPEC_PACIASP, UNSPEC_PACIBSP.\n\t* config/aarch64/aarch64.md (do_return): Add check for b-key.\n\t* config/aarch64/aarch64.md (<pauth_mnem_prefix>sp): Replace\n\tpauth_hint_num_a with pauth_hint_num.\n\t* config/aarch64/aarch64.md (<pauth_mnem_prefix>1716): Replace\n\tpauth_hint_num_a with pauth_hint_num.\n\t* config/aarch64/aarch64.opt (msign-return-address=): Deprecate.\n\t* config/aarch64/iterators.md (PAUTH_LR_SP): Add UNSPEC_AUTIASP,\n\tUNSPEC_AUTIBSP, UNSPEC_PACIASP, UNSPEC_PACIBSP.\n\t* config/aarch64/iterators.md (PAUTH_17_16): Add UNSPEC_AUTIA1716,\n\tUNSPEC_AUTIB1716, UNSPEC_PACIA1716, UNSPEC_PACIB1716.\n\t* config/aarch64/iterators.md (pauth_mnem_prefix): Add UNSPEC_AUTIA1716,\n\tUNSPEC_AUTIB1716, UNSPEC_PACIA1716, UNSPEC_PACIB1716, UNSPEC_AUTIASP,\n\tUNSPEC_AUTIBSP, UNSPEC_PACIASP, UNSPEC_PACIBSP.\n\t* config/aarch64/iterators.md (pauth_hint_num_a): Replace\n\tUNSPEC_PACI1716 and UNSPEC_AUTI1716 with UNSPEC_PACIA1716 and\n\tUNSPEC_AUTIA1716 respectively.\n\t* config/aarch64/iterators.md (pauth_hint_num_a): Rename to pauth_hint_num\n\tand add UNSPEC_PACIBSP, UNSPEC_AUTIBSP, UNSPEC_PACIB1716, UNSPEC_AUTIB1716.\n\t* doc/invoke.texi (-mbranch-protection): Add b-key type.\n\t* config/aarch64/aarch64-bti-insert.c (aarch64_pac_insn_p): Rename\n\tUNSPEC_PACISP to UNSPEC_PACIASP and UNSPEC_PACIBSP.\n\ngcc/testsuite\n2019-05-29  Sam Tebbs  <sam.tebbs@arm.com>\n\n\t* gcc.target/aarch64/return_address_sign_b_1.c: New file.\n\t* gcc.target/aarch64/return_address_sign_b_2.c: New file.\n\t* gcc.target/aarch64/return_address_sign_b_3.c: New file.\n\t* gcc.target/aarch64/return_address_sign_b_exception.c: New file.\n\t* gcc.target/aarch64/return_address_sign_ab_exception.c: New file.\n\t* gcc.target/aarch64/return_address_sign_builtin.c: New file\n\nlibgcc/\n2019-05-29  Sam Tebbs  <sam.tebbs@arm.com>\n\n\t* config/aarch64/aarch64-unwind.h (aarch64_cie_signed_with_b_key): New\n\tfunction.\n\t* config/aarch64/aarch64-unwind.h (aarch64_post_extract_frame_addr,\n\taarch64_post_frob_eh_handler_addr): Add\tcheck for b-key.\n\t* config/aarch64/aarch64-unwind-h (aarch64_post_extract_frame_addr,\n\taarch64_post_frob_eh_handler_addr, aarch64_post_frob_update_context):\n\tRename RA_A_SIGNED_BIT to RA_SIGNED_BIT.\n\t* unwind-dw2-fde.c (get_cie_encoding): Add check for 'B' in augmentation\n\tstring.\n\t* unwind-dw2.c (extract_cie_info): Add check for 'B' in augmentation\n\tstring.\n\t(RA_A_SIGNED_BIT): Rename to RA_SIGNED_BIT.\n\nFrom-SVN: r271735", "tree": {"sha": "4fc610ae0706bfb980726b3bda3b9248ea0a40b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fc610ae0706bfb980726b3bda3b9248ea0a40b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fc16d725206f2c40bae423d7d0d93bd1baf6da2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc16d725206f2c40bae423d7d0d93bd1baf6da2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fc16d725206f2c40bae423d7d0d93bd1baf6da2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc16d725206f2c40bae423d7d0d93bd1baf6da2/comments", "author": null, "committer": null, "parents": [{"sha": "7e47198b802ed52fb8bb314b75ddf3cd84b2d9f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e47198b802ed52fb8bb314b75ddf3cd84b2d9f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e47198b802ed52fb8bb314b75ddf3cd84b2d9f4"}], "stats": {"total": 291, "additions": 256, "deletions": 35}, "files": [{"sha": "407b248b5ac831287be5a7e2ec143bb0e45f3312", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc16d725206f2c40bae423d7d0d93bd1baf6da2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc16d725206f2c40bae423d7d0d93bd1baf6da2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8fc16d725206f2c40bae423d7d0d93bd1baf6da2", "patch": "@@ -1,3 +1,47 @@\n+2019-05-29  Sam Tebbs  <sam.tebbs@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c (aarch64_builtins): Add\n+\tAARCH64_PAUTH_BUILTIN_AUTIB1716 and AARCH64_PAUTH_BUILTIN_PACIB1716.\n+\t* config/aarch64/aarch64-builtins.c (aarch64_init_pauth_hint_builtins):\n+\tAdd autib1716 and pacib1716 initialisation.\n+\t* config/aarch64/aarch64-builtins.c (aarch64_expand_builtin): Add checks\n+\tfor autib1716 and pacib1716.\n+\t* config/aarch64/aarch64-protos.h (aarch64_key_type,\n+\taarch64_post_cfi_startproc): Define.\n+\t* config/aarch64/aarch64-protos.h (aarch64_ra_sign_key): Define extern.\n+\t* config/aarch64/aarch64.c (aarch64_handle_standard_branch_protection,\n+\taarch64_handle_pac_ret_protection): Set default sign key to A.\n+\t* config/aarch64/aarch64.c (aarch64_expand_epilogue,\n+\taarch64_expand_prologue): Add check for b-key.\n+\t* config/aarch64/aarch64.c (aarch64_ra_sign_key,\n+\taarch64_post_cfi_startproc, aarch64_handle_pac_ret_b_key): Define.\n+\t* config/aarch64/aarch64.h (TARGET_ASM_POST_CFI_STARTPROC): Define.\n+\t* config/aarch64/aarch64.c (aarch64_pac_ret_subtypes): Add \"b-key\".\n+\t* config/aarch64/aarch64.md (unspec): Add UNSPEC_AUTIA1716,\n+\tUNSPEC_AUTIB1716, UNSPEC_AUTIASP, UNSPEC_AUTIBSP, UNSPEC_PACIA1716,\n+\tUNSPEC_PACIB1716, UNSPEC_PACIASP, UNSPEC_PACIBSP.\n+\t* config/aarch64/aarch64.md (do_return): Add check for b-key.\n+\t* config/aarch64/aarch64.md (<pauth_mnem_prefix>sp): Replace\n+\tpauth_hint_num_a with pauth_hint_num.\n+\t* config/aarch64/aarch64.md (<pauth_mnem_prefix>1716): Replace\n+\tpauth_hint_num_a with pauth_hint_num.\n+\t* config/aarch64/aarch64.opt (msign-return-address=): Deprecate.\n+\t* config/aarch64/iterators.md (PAUTH_LR_SP): Add UNSPEC_AUTIASP,\n+\tUNSPEC_AUTIBSP, UNSPEC_PACIASP, UNSPEC_PACIBSP.\n+\t* config/aarch64/iterators.md (PAUTH_17_16): Add UNSPEC_AUTIA1716,\n+\tUNSPEC_AUTIB1716, UNSPEC_PACIA1716, UNSPEC_PACIB1716.\n+\t* config/aarch64/iterators.md (pauth_mnem_prefix): Add UNSPEC_AUTIA1716,\n+\tUNSPEC_AUTIB1716, UNSPEC_PACIA1716, UNSPEC_PACIB1716, UNSPEC_AUTIASP,\n+\tUNSPEC_AUTIBSP, UNSPEC_PACIASP, UNSPEC_PACIBSP.\n+\t* config/aarch64/iterators.md (pauth_hint_num_a): Replace\n+\tUNSPEC_PACI1716 and UNSPEC_AUTI1716 with UNSPEC_PACIA1716 and\n+\tUNSPEC_AUTIA1716 respectively.\n+\t* config/aarch64/iterators.md (pauth_hint_num_a): Rename to pauth_hint_num\n+\tand add UNSPEC_PACIBSP, UNSPEC_AUTIBSP, UNSPEC_PACIB1716, UNSPEC_AUTIB1716.\n+\t* doc/invoke.texi (-mbranch-protection): Add b-key type.\n+\t* config/aarch64/aarch64-bti-insert.c (aarch64_pac_insn_p): Rename\n+\tUNSPEC_PACISP to UNSPEC_PACIASP and UNSPEC_PACIBSP.\n+\n 2019-05-29  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gimplify.c (struct gimplify_omp_ctx): Add clauses member."}, {"sha": "db8ebb1ba8e45b4bf7cd2f27ae8a2c606a1a6c89", "filename": "gcc/config/aarch64/aarch64-bti-insert.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc16d725206f2c40bae423d7d0d93bd1baf6da2/gcc%2Fconfig%2Faarch64%2Faarch64-bti-insert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc16d725206f2c40bae423d7d0d93bd1baf6da2/gcc%2Fconfig%2Faarch64%2Faarch64-bti-insert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-bti-insert.c?ref=8fc16d725206f2c40bae423d7d0d93bd1baf6da2", "patch": "@@ -106,7 +106,9 @@ aarch64_pac_insn_p (rtx x)\n \t  int unspec_val = XINT (sub, 1);\n \t  switch (unspec_val)\n \t    {\n-\t    case UNSPEC_PACISP:\n+\t    case UNSPEC_PACIASP:\n+            /* fall-through.  */\n+            case UNSPEC_PACIBSP:\n \t      return true;\n \n \t    default:"}, {"sha": "549a6c249243372eacb5d29923b5d1abce4ac79a", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc16d725206f2c40bae423d7d0d93bd1baf6da2/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc16d725206f2c40bae423d7d0d93bd1baf6da2/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=8fc16d725206f2c40bae423d7d0d93bd1baf6da2", "patch": "@@ -432,6 +432,8 @@ enum aarch64_builtins\n   /* ARMv8.3-A Pointer Authentication Builtins.  */\n   AARCH64_PAUTH_BUILTIN_AUTIA1716,\n   AARCH64_PAUTH_BUILTIN_PACIA1716,\n+  AARCH64_PAUTH_BUILTIN_AUTIB1716,\n+  AARCH64_PAUTH_BUILTIN_PACIB1716,\n   AARCH64_PAUTH_BUILTIN_XPACLRI,\n   /* Special cased Armv8.3-A Complex FMA by Lane quad Builtins.  */\n   AARCH64_SIMD_FCMLA_LANEQ_BUILTIN_BASE,\n@@ -1051,6 +1053,14 @@ aarch64_init_pauth_hint_builtins (void)\n     = add_builtin_function (\"__builtin_aarch64_pacia1716\", ftype_pointer_auth,\n \t\t\t    AARCH64_PAUTH_BUILTIN_PACIA1716, BUILT_IN_MD, NULL,\n \t\t\t    NULL_TREE);\n+  aarch64_builtin_decls[AARCH64_PAUTH_BUILTIN_AUTIB1716]\n+    = add_builtin_function (\"__builtin_aarch64_autib1716\", ftype_pointer_auth,\n+\t\t\t    AARCH64_PAUTH_BUILTIN_AUTIB1716, BUILT_IN_MD, NULL,\n+\t\t\t    NULL_TREE);\n+  aarch64_builtin_decls[AARCH64_PAUTH_BUILTIN_PACIB1716]\n+    = add_builtin_function (\"__builtin_aarch64_pacib1716\", ftype_pointer_auth,\n+\t\t\t    AARCH64_PAUTH_BUILTIN_PACIB1716, BUILT_IN_MD, NULL,\n+\t\t\t    NULL_TREE);\n   aarch64_builtin_decls[AARCH64_PAUTH_BUILTIN_XPACLRI]\n     = add_builtin_function (\"__builtin_aarch64_xpaclri\", ftype_pointer_strip,\n \t\t\t    AARCH64_PAUTH_BUILTIN_XPACLRI, BUILT_IN_MD, NULL,\n@@ -1540,6 +1550,8 @@ aarch64_expand_builtin (tree exp,\n \n     case AARCH64_PAUTH_BUILTIN_AUTIA1716:\n     case AARCH64_PAUTH_BUILTIN_PACIA1716:\n+    case AARCH64_PAUTH_BUILTIN_AUTIB1716:\n+    case AARCH64_PAUTH_BUILTIN_PACIB1716:\n     case AARCH64_PAUTH_BUILTIN_XPACLRI:\n       arg0 = CALL_EXPR_ARG (exp, 0);\n       op0 = force_reg (Pmode, expand_normal (arg0));\n@@ -1563,8 +1575,24 @@ aarch64_expand_builtin (tree exp,\n \t{\n \t  tree arg1 = CALL_EXPR_ARG (exp, 1);\n \t  rtx op1 = force_reg (Pmode, expand_normal (arg1));\n-\t  icode = (fcode == AARCH64_PAUTH_BUILTIN_PACIA1716\n-\t\t   ? CODE_FOR_paci1716 : CODE_FOR_auti1716);\n+\t  switch (fcode)\n+\t    {\n+\t    case AARCH64_PAUTH_BUILTIN_AUTIA1716:\n+\t      icode = CODE_FOR_autia1716;\n+\t      break;\n+\t    case AARCH64_PAUTH_BUILTIN_AUTIB1716:\n+\t      icode = CODE_FOR_autib1716;\n+\t      break;\n+\t    case AARCH64_PAUTH_BUILTIN_PACIA1716:\n+\t      icode = CODE_FOR_pacia1716;\n+\t      break;\n+\t    case AARCH64_PAUTH_BUILTIN_PACIB1716:\n+\t      icode = CODE_FOR_pacib1716;\n+\t      break;\n+\t    default:\n+\t      icode = 0;\n+\t      gcc_unreachable ();\n+\t    }\n \n \t  rtx x16_reg = gen_rtx_REG (Pmode, R16_REGNUM);\n \t  rtx x17_reg = gen_rtx_REG (Pmode, R17_REGNUM);"}, {"sha": "4485e0f354b351901f7de71585922a0407c4dd53", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc16d725206f2c40bae423d7d0d93bd1baf6da2/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc16d725206f2c40bae423d7d0d93bd1baf6da2/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=8fc16d725206f2c40bae423d7d0d93bd1baf6da2", "patch": "@@ -396,8 +396,17 @@ enum simd_immediate_check {\n   AARCH64_CHECK_MOV  = AARCH64_CHECK_ORR | AARCH64_CHECK_BIC\n };\n \n+/* The key type that -msign-return-address should use.  */\n+enum aarch64_key_type {\n+  AARCH64_KEY_A,\n+  AARCH64_KEY_B\n+};\n+\n+extern enum aarch64_key_type aarch64_ra_sign_key;\n+\n extern struct tune_params aarch64_tune_params;\n \n+void aarch64_post_cfi_startproc (void);\n poly_int64 aarch64_initial_elimination_offset (unsigned, unsigned);\n int aarch64_get_condition_code (rtx);\n bool aarch64_address_valid_for_prefetch_p (rtx, bool);"}, {"sha": "9e4b335244acea03d974521a2dc6a914317e7727", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 51, "deletions": 3, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc16d725206f2c40bae423d7d0d93bd1baf6da2/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc16d725206f2c40bae423d7d0d93bd1baf6da2/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=8fc16d725206f2c40bae423d7d0d93bd1baf6da2", "patch": "@@ -1172,6 +1172,8 @@ static const struct processor *selected_arch;\n static const struct processor *selected_cpu;\n static const struct processor *selected_tune;\n \n+enum aarch64_key_type aarch64_ra_sign_key = AARCH64_KEY_A;\n+\n /* The current tuning set.  */\n struct tune_params aarch64_tune_params = generic_tunings;\n \n@@ -1241,6 +1243,7 @@ static enum aarch64_parse_opt_result\n aarch64_handle_standard_branch_protection (char* str, char* rest)\n {\n   aarch64_ra_sign_scope = AARCH64_FUNCTION_NON_LEAF;\n+  aarch64_ra_sign_key = AARCH64_KEY_A;\n   aarch64_enable_bti = 1;\n   if (rest)\n     {\n@@ -1255,6 +1258,7 @@ aarch64_handle_pac_ret_protection (char* str ATTRIBUTE_UNUSED,\n \t\t\t\t    char* rest ATTRIBUTE_UNUSED)\n {\n   aarch64_ra_sign_scope = AARCH64_FUNCTION_NON_LEAF;\n+  aarch64_ra_sign_key = AARCH64_KEY_A;\n   return AARCH64_PARSE_OK;\n }\n \n@@ -1266,6 +1270,14 @@ aarch64_handle_pac_ret_leaf (char* str ATTRIBUTE_UNUSED,\n   return AARCH64_PARSE_OK;\n }\n \n+static enum aarch64_parse_opt_result\n+aarch64_handle_pac_ret_b_key (char* str ATTRIBUTE_UNUSED,\n+\t\t\t      char* rest ATTRIBUTE_UNUSED)\n+{\n+  aarch64_ra_sign_key = AARCH64_KEY_B;\n+  return AARCH64_PARSE_OK;\n+}\n+\n static enum aarch64_parse_opt_result\n aarch64_handle_bti_protection (char* str ATTRIBUTE_UNUSED,\n \t\t\t\t    char* rest ATTRIBUTE_UNUSED)\n@@ -1276,6 +1288,7 @@ aarch64_handle_bti_protection (char* str ATTRIBUTE_UNUSED,\n \n static const struct aarch64_branch_protect_type aarch64_pac_ret_subtypes[] = {\n   { \"leaf\", aarch64_handle_pac_ret_leaf, NULL, 0 },\n+  { \"b-key\", aarch64_handle_pac_ret_b_key, NULL, 0 },\n   { NULL, NULL, NULL, 0 }\n };\n \n@@ -4852,7 +4865,7 @@ aarch64_return_address_signing_enabled (void)\n   gcc_assert (cfun->machine->frame.laid_out);\n \n   /* If signing scope is AARCH64_FUNCTION_NON_LEAF, we only sign a leaf function\n-     if it's LR is pushed onto stack.  */\n+     if its LR is pushed onto stack.  */\n   return (aarch64_ra_sign_scope == AARCH64_FUNCTION_ALL\n \t  || (aarch64_ra_sign_scope == AARCH64_FUNCTION_NON_LEAF\n \t      && cfun->machine->frame.reg_offset[LR_REGNUM] >= 0));\n@@ -5651,7 +5664,17 @@ aarch64_expand_prologue (void)\n   /* Sign return address for functions.  */\n   if (aarch64_return_address_signing_enabled ())\n     {\n-      insn = emit_insn (gen_pacisp ());\n+      switch (aarch64_ra_sign_key)\n+\t{\n+\t  case AARCH64_KEY_A:\n+\t    insn = emit_insn (gen_paciasp ());\n+\t    break;\n+\t  case AARCH64_KEY_B:\n+\t    insn = emit_insn (gen_pacibsp ());\n+\t    break;\n+\t  default:\n+\t    gcc_unreachable ();\n+\t}\n       add_reg_note (insn, REG_CFA_TOGGLE_RA_MANGLE, const0_rtx);\n       RTX_FRAME_RELATED_P (insn) = 1;\n     }\n@@ -5907,7 +5930,17 @@ aarch64_expand_epilogue (bool for_sibcall)\n   if (aarch64_return_address_signing_enabled ()\n       && (for_sibcall || !TARGET_ARMV8_3 || crtl->calls_eh_return))\n     {\n-      insn = emit_insn (gen_autisp ());\n+      switch (aarch64_ra_sign_key)\n+\t{\n+\t  case AARCH64_KEY_A:\n+\t    insn = emit_insn (gen_autiasp ());\n+\t    break;\n+\t  case AARCH64_KEY_B:\n+\t    insn = emit_insn (gen_autibsp ());\n+\t    break;\n+\t  default:\n+\t    gcc_unreachable ();\n+\t}\n       add_reg_note (insn, REG_CFA_TOGGLE_RA_MANGLE, const0_rtx);\n       RTX_FRAME_RELATED_P (insn) = 1;\n     }\n@@ -15330,6 +15363,18 @@ aarch64_declare_function_name (FILE *stream, const char* name,\n   ASM_OUTPUT_LABEL (stream, name);\n }\n \n+/* Triggered after a .cfi_startproc directive is emitted into the assembly file.\n+   Used to output the .cfi_b_key_frame directive when signing the current\n+   function with the B key.  */\n+\n+void\n+aarch64_post_cfi_startproc (FILE *f, tree ignored ATTRIBUTE_UNUSED)\n+{\n+  if (aarch64_return_address_signing_enabled ()\n+      && aarch64_ra_sign_key == AARCH64_KEY_B)\n+\tasm_fprintf (f, \"\\t.cfi_b_key_frame\\n\");\n+}\n+\n /* Implements TARGET_ASM_FILE_START.  Output the assembly header.  */\n \n static void\n@@ -19341,6 +19386,9 @@ aarch64_libgcc_floating_mode_supported_p\n #define TARGET_RUN_TARGET_SELFTESTS selftest::aarch64_run_selftests\n #endif /* #if CHECKING_P */\n \n+#undef TARGET_ASM_POST_CFI_STARTPROC\n+#define TARGET_ASM_POST_CFI_STARTPROC aarch64_post_cfi_startproc\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-aarch64.h\""}, {"sha": "4b3e2f97d61591e162bd60189103ec9b569988b2", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc16d725206f2c40bae423d7d0d93bd1baf6da2/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc16d725206f2c40bae423d7d0d93bd1baf6da2/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=8fc16d725206f2c40bae423d7d0d93bd1baf6da2", "patch": "@@ -512,6 +512,9 @@ extern unsigned aarch64_architecture_version;\n #define ASM_DECLARE_FUNCTION_NAME(STR, NAME, DECL)\t\\\n   aarch64_declare_function_name (STR, NAME, DECL)\n \n+/* Output assembly strings after .cfi_startproc is emitted.  */\n+#define ASM_POST_CFI_STARTPROC  aarch64_post_cfi_startproc\n+\n /* For EH returns X4 contains the stack adjustment.  */\n #define EH_RETURN_STACKADJ_RTX\tgen_rtx_REG (Pmode, R4_REGNUM)\n #define EH_RETURN_HANDLER_RTX  aarch64_eh_return_handler_rtx ()"}, {"sha": "49582f2e7e4fb51f6c7fa60639c56fd862147b27", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc16d725206f2c40bae423d7d0d93bd1baf6da2/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc16d725206f2c40bae423d7d0d93bd1baf6da2/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=8fc16d725206f2c40bae423d7d0d93bd1baf6da2", "patch": "@@ -125,8 +125,10 @@\n )\n \n (define_c_enum \"unspec\" [\n-    UNSPEC_AUTI1716\n-    UNSPEC_AUTISP\n+    UNSPEC_AUTIA1716\n+    UNSPEC_AUTIB1716\n+    UNSPEC_AUTIASP\n+    UNSPEC_AUTIBSP\n     UNSPEC_CASESI\n     UNSPEC_CRC32B\n     UNSPEC_CRC32CB\n@@ -169,8 +171,10 @@\n     UNSPEC_LD4_LANE\n     UNSPEC_MB\n     UNSPEC_NOP\n-    UNSPEC_PACI1716\n-    UNSPEC_PACISP\n+    UNSPEC_PACIA1716\n+    UNSPEC_PACIB1716\n+    UNSPEC_PACIASP\n+    UNSPEC_PACIBSP\n     UNSPEC_PRLG_STK\n     UNSPEC_REV\n     UNSPEC_RBIT\n@@ -739,8 +743,12 @@\n     if (aarch64_return_address_signing_enabled ()\n \t&& TARGET_ARMV8_3\n \t&& !crtl->calls_eh_return)\n-      return \"retaa\";\n-\n+      {\n+\tif (aarch64_ra_sign_key == AARCH64_KEY_B)\n+\t  return \"retab\";\n+\telse\n+\t  return \"retaa\";\n+      }\n     return \"ret\";\n   }\n   [(set_attr \"type\" \"branch\")]\n@@ -6811,7 +6819,7 @@\n   [(set (reg:DI R30_REGNUM)\n \t(unspec:DI [(reg:DI R30_REGNUM) (reg:DI SP_REGNUM)] PAUTH_LR_SP))]\n   \"\"\n-  \"hint\\t<pauth_hint_num_a> // <pauth_mnem_prefix>asp\";\n+  \"hint\\t<pauth_hint_num> // <pauth_mnem_prefix>sp\";\n )\n \n ;; Signing/Authenticating X17 using X16 as the salt.\n@@ -6820,7 +6828,7 @@\n   [(set (reg:DI R17_REGNUM)\n \t(unspec:DI [(reg:DI R17_REGNUM) (reg:DI R16_REGNUM)] PAUTH_17_16))]\n   \"\"\n-  \"hint\\t<pauth_hint_num_a> // <pauth_mnem_prefix>a1716\";\n+  \"hint\\t<pauth_hint_num> // <pauth_mnem_prefix>1716\";\n )\n \n ;; Stripping the signature in R30."}, {"sha": "d0070b1a73218822976acb846638ee385d8a4f2c", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 32, "deletions": 12, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc16d725206f2c40bae423d7d0d93bd1baf6da2/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc16d725206f2c40bae423d7d0d93bd1baf6da2/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=8fc16d725206f2c40bae423d7d0d93bd1baf6da2", "patch": "@@ -1516,9 +1516,11 @@\n (define_int_iterator FMAXMIN_UNS [UNSPEC_FMAX UNSPEC_FMIN\n \t\t\t\t  UNSPEC_FMAXNM UNSPEC_FMINNM])\n \n-(define_int_iterator PAUTH_LR_SP [UNSPEC_PACISP UNSPEC_AUTISP])\n+(define_int_iterator PAUTH_LR_SP [UNSPEC_PACIASP UNSPEC_AUTIASP\n+\t\t\t\t  UNSPEC_PACIBSP UNSPEC_AUTIBSP])\n \n-(define_int_iterator PAUTH_17_16 [UNSPEC_PACI1716 UNSPEC_AUTI1716])\n+(define_int_iterator PAUTH_17_16 [UNSPEC_PACIA1716 UNSPEC_AUTIA1716\n+\t\t\t\t  UNSPEC_PACIB1716 UNSPEC_AUTIB1716])\n \n (define_int_iterator VQDMULH [UNSPEC_SQDMULH UNSPEC_SQRDMULH])\n \n@@ -1797,16 +1799,34 @@\n \t\t\t\t  (UNSPEC_FCVTZU \"fcvtzu\")])\n \n ;; Pointer authentication mnemonic prefix.\n-(define_int_attr pauth_mnem_prefix [(UNSPEC_PACISP \"paci\")\n-\t\t\t\t    (UNSPEC_AUTISP \"auti\")\n-\t\t\t\t    (UNSPEC_PACI1716 \"paci\")\n-\t\t\t\t    (UNSPEC_AUTI1716 \"auti\")])\n-\n-;; Pointer authentication HINT number for NOP space instructions using A Key.\n-(define_int_attr pauth_hint_num_a [(UNSPEC_PACISP \"25\")\n-\t\t\t\t    (UNSPEC_AUTISP \"29\")\n-\t\t\t\t    (UNSPEC_PACI1716 \"8\")\n-\t\t\t\t    (UNSPEC_AUTI1716 \"12\")])\n+(define_int_attr pauth_mnem_prefix [(UNSPEC_PACIASP \"pacia\")\n+\t\t\t\t    (UNSPEC_PACIBSP \"pacib\")\n+\t\t\t\t    (UNSPEC_PACIA1716 \"pacia\")\n+\t\t\t\t    (UNSPEC_PACIB1716 \"pacib\")\n+\t\t\t\t    (UNSPEC_AUTIASP \"autia\")\n+\t\t\t\t    (UNSPEC_AUTIBSP \"autib\")\n+\t\t\t\t    (UNSPEC_AUTIA1716 \"autia\")\n+\t\t\t\t    (UNSPEC_AUTIB1716 \"autib\")])\n+\n+(define_int_attr pauth_key [(UNSPEC_PACIASP \"AARCH64_KEY_A\")\n+\t\t\t    (UNSPEC_PACIBSP \"AARCH64_KEY_B\")\n+\t\t\t    (UNSPEC_PACIA1716 \"AARCH64_KEY_A\")\n+\t\t\t    (UNSPEC_PACIB1716 \"AARCH64_KEY_B\")\n+\t\t\t    (UNSPEC_AUTIASP \"AARCH64_KEY_A\")\n+\t\t\t    (UNSPEC_AUTIBSP \"AARCH64_KEY_B\")\n+\t\t\t    (UNSPEC_AUTIA1716 \"AARCH64_KEY_A\")\n+\t\t\t    (UNSPEC_AUTIB1716 \"AARCH64_KEY_B\")])\n+\n+;; Pointer authentication HINT number for NOP space instructions using A and\n+;; B key.\n+(define_int_attr pauth_hint_num [(UNSPEC_PACIASP \"25\")\n+\t\t\t\t   (UNSPEC_PACIBSP \"27\")\n+\t\t\t\t   (UNSPEC_AUTIASP \"29\")\n+\t\t\t\t   (UNSPEC_AUTIBSP \"31\")\n+\t\t\t\t   (UNSPEC_PACIA1716 \"8\")\n+\t\t\t\t   (UNSPEC_PACIB1716 \"10\")\n+\t\t\t\t   (UNSPEC_AUTIA1716 \"12\")\n+\t\t\t\t   (UNSPEC_AUTIB1716 \"14\")])\n \n (define_int_attr perm_insn [(UNSPEC_ZIP1 \"zip\") (UNSPEC_ZIP2 \"zip\")\n \t\t\t    (UNSPEC_TRN1 \"trn\") (UNSPEC_TRN2 \"trn\")"}, {"sha": "3e4f012b4fa47f5bbcac6e44542e51b601d8a968", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc16d725206f2c40bae423d7d0d93bd1baf6da2/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc16d725206f2c40bae423d7d0d93bd1baf6da2/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8fc16d725206f2c40bae423d7d0d93bd1baf6da2", "patch": "@@ -632,7 +632,8 @@ Objective-C and Objective-C++ Dialects}.\n -mlow-precision-recip-sqrt  -mlow-precision-sqrt  -mlow-precision-div @gol\n -mpc-relative-literal-loads @gol\n -msign-return-address=@var{scope} @gol\n--mbranch-protection=@var{none}|@var{standard}|@var{pac-ret}[+@var{leaf}]|@var{bti} @gol\n+-mbranch-protection=@var{none}|@var{standard}|@var{pac-ret}[+@var{leaf}\n++@var{b-key}]|@var{bti} @gol\n -march=@var{name}  -mcpu=@var{name}  -mtune=@var{name}  @gol\n -moverride=@var{string}  -mverbose-cost-dump @gol\n -mstack-protector-guard=@var{guard} -mstack-protector-guard-reg=@var{sysreg} @gol\n@@ -15900,7 +15901,7 @@ functions, and @samp{all}, which enables pointer signing for all functions.  The\n default value is @samp{none}. This option has been deprecated by\n -mbranch-protection.\n \n-@item -mbranch-protection=@var{none}|@var{standard}|@var{pac-ret}[+@var{leaf}]|@var{bti}\n+@item -mbranch-protection=@var{none}|@var{standard}|@var{pac-ret}[+@var{leaf}+@var{b-key}]|@var{bti}\n @opindex mbranch-protection\n Select the branch protection features to use.\n @samp{none} is the default and turns off all types of branch protection.\n@@ -15911,7 +15912,8 @@ level.\n level: signing functions that save the return address to memory (non-leaf\n functions will practically always do this) using the a-key.  The optional\n argument @samp{leaf} can be used to extend the signing to include leaf\n-functions.\n+functions.  The optional argument @samp{b-key} can be used to sign the functions\n+with the B-key instead of the A-key.\n @samp{bti} turns on branch target identification mechanism.\n \n @item -msve-vector-bits=@var{bits}"}, {"sha": "71982226f080f41aa8ae642de3534a9c37329230", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc16d725206f2c40bae423d7d0d93bd1baf6da2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc16d725206f2c40bae423d7d0d93bd1baf6da2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8fc16d725206f2c40bae423d7d0d93bd1baf6da2", "patch": "@@ -1,3 +1,12 @@\n+2019-05-29  Sam Tebbs  <sam.tebbs@arm.com>\n+\n+\t* gcc.target/aarch64/return_address_sign_b_1.c: New file.\n+\t* gcc.target/aarch64/return_address_sign_b_2.c: New file.\n+\t* gcc.target/aarch64/return_address_sign_b_3.c: New file.\n+\t* gcc.target/aarch64/return_address_sign_b_exception.c: New file.\n+\t* gcc.target/aarch64/return_address_sign_ab_exception.c: New file.\n+\t* gcc.target/aarch64/return_address_sign_builtin.c: New file\n+\n 2019-05-29  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-c++-common/gomp/lastprivate-conditional-2.c (foo): Don't expect"}, {"sha": "c86decfab0ed1d28421c6deccb578478e79deb5f", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc16d725206f2c40bae423d7d0d93bd1baf6da2/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc16d725206f2c40bae423d7d0d93bd1baf6da2/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=8fc16d725206f2c40bae423d7d0d93bd1baf6da2", "patch": "@@ -1,3 +1,18 @@\n+2019-05-29  Sam Tebbs  <sam.tebbs@arm.com>\n+\n+\t* config/aarch64/aarch64-unwind.h (aarch64_cie_signed_with_b_key): New\n+\tfunction.\n+\t* config/aarch64/aarch64-unwind.h (aarch64_post_extract_frame_addr,\n+\taarch64_post_frob_eh_handler_addr): Add\tcheck for b-key.\n+\t* config/aarch64/aarch64-unwind-h (aarch64_post_extract_frame_addr,\n+\taarch64_post_frob_eh_handler_addr, aarch64_post_frob_update_context):\n+\tRename RA_A_SIGNED_BIT to RA_SIGNED_BIT.\n+\t* unwind-dw2-fde.c (get_cie_encoding): Add check for 'B' in augmentation\n+\tstring.\n+\t* unwind-dw2.c (extract_cie_info): Add check for 'B' in augmentation\n+\tstring.\n+\t(RA_A_SIGNED_BIT): Rename to RA_SIGNED_BIT.\n+\n 2019-05-28  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config/sparc/sol2-unwind.h [__arch64__] (sparc64_is_sighandler):"}, {"sha": "13e6e4a6a01ad5228f15fbb40672d72d8fb4d30d", "filename": "libgcc/config/aarch64/aarch64-unwind.h", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc16d725206f2c40bae423d7d0d93bd1baf6da2/libgcc%2Fconfig%2Faarch64%2Faarch64-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc16d725206f2c40bae423d7d0d93bd1baf6da2/libgcc%2Fconfig%2Faarch64%2Faarch64-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Faarch64%2Faarch64-unwind.h?ref=8fc16d725206f2c40bae423d7d0d93bd1baf6da2", "patch": "@@ -35,6 +35,23 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define MD_FROB_UPDATE_CONTEXT(context, fs) \\\n   aarch64_frob_update_context (context, fs)\n \n+static inline int\n+aarch64_cie_signed_with_b_key (struct _Unwind_Context *context)\n+{\n+  const struct dwarf_fde *fde = _Unwind_Find_FDE (context->bases.func,\n+\t\t\t\t\t\t  &context->bases);\n+  if (fde != NULL)\n+    {\n+      const struct dwarf_cie *cie = get_cie (fde);\n+      if (cie != NULL)\n+\t{\n+\t  char *aug_str = cie->augmentation;\n+\t  return strchr (aug_str, 'B') == NULL ? 0 : 1;\n+\t}\n+    }\n+  return 0;\n+}\n+\n /* Do AArch64 private extraction on ADDR based on context info CONTEXT and\n    unwind frame info FS.  If ADDR is signed, we do address authentication on it\n    using CFA of current frame.  */\n@@ -43,9 +60,11 @@ static inline void *\n aarch64_post_extract_frame_addr (struct _Unwind_Context *context,\n \t\t\t\t _Unwind_FrameState *fs, void *addr)\n {\n-  if (fs->regs.reg[DWARF_REGNUM_AARCH64_RA_STATE].loc.offset & 0x1)\n+  if (context->flags & RA_SIGNED_BIT)\n     {\n       _Unwind_Word salt = (_Unwind_Word) context->cfa;\n+      if (aarch64_cie_signed_with_b_key (context) != 0)\n+\treturn __builtin_aarch64_autib1716 (addr, salt);\n       return __builtin_aarch64_autia1716 (addr, salt);\n     }\n   else\n@@ -62,9 +81,14 @@ aarch64_post_frob_eh_handler_addr (struct _Unwind_Context *current,\n \t\t\t\t   ATTRIBUTE_UNUSED,\n \t\t\t\t   void *handler_addr)\n {\n-  if (current->flags & RA_A_SIGNED_BIT)\n-    return __builtin_aarch64_pacia1716 (handler_addr,\n+  if (current->flags & RA_SIGNED_BIT)\n+    {\n+      if (aarch64_cie_signed_with_b_key (current))\n+\treturn __builtin_aarch64_pacib1716 (handler_addr,\n+\t\t\t\t\t    (_Unwind_Word) current->cfa);\n+      return __builtin_aarch64_pacia1716 (handler_addr,\n \t\t\t\t\t(_Unwind_Word) current->cfa);\n+    }\n   else\n     return handler_addr;\n }\n@@ -79,7 +103,7 @@ aarch64_frob_update_context (struct _Unwind_Context *context,\n {\n   if (fs->regs.reg[DWARF_REGNUM_AARCH64_RA_STATE].loc.offset & 0x1)\n     /* The flag is used for re-authenticating EH handler's address.  */\n-    context->flags |= RA_A_SIGNED_BIT;\n+    context->flags |= RA_SIGNED_BIT;\n \n   return;\n }"}, {"sha": "40ebf85a93ec840917fc4feb48a9e0f843e42324", "filename": "libgcc/unwind-dw2-fde.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc16d725206f2c40bae423d7d0d93bd1baf6da2/libgcc%2Funwind-dw2-fde.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc16d725206f2c40bae423d7d0d93bd1baf6da2/libgcc%2Funwind-dw2-fde.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2-fde.c?ref=8fc16d725206f2c40bae423d7d0d93bd1baf6da2", "patch": "@@ -334,6 +334,9 @@ get_cie_encoding (const struct dwarf_cie *cie)\n       /* LSDA encoding.  */\n       else if (*aug == 'L')\n \tp++;\n+      /* aarch64 b-key pointer authentication.  */\n+      else if (*aug == 'B')\n+\tp++;\n       /* Otherwise end of string, or unknown augmentation.  */\n       else\n \treturn DW_EH_PE_absptr;"}, {"sha": "e76a1cbc4620a5d2eb734e5071e60e58acf74743", "filename": "libgcc/unwind-dw2.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc16d725206f2c40bae423d7d0d93bd1baf6da2/libgcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc16d725206f2c40bae423d7d0d93bd1baf6da2/libgcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2.c?ref=8fc16d725206f2c40bae423d7d0d93bd1baf6da2", "patch": "@@ -136,8 +136,9 @@ struct _Unwind_Context\n #define SIGNAL_FRAME_BIT ((~(_Unwind_Word) 0 >> 1) + 1)\n   /* Context which has version/args_size/by_value fields.  */\n #define EXTENDED_CONTEXT_BIT ((~(_Unwind_Word) 0 >> 2) + 1)\n-  /* Bit reserved on AArch64, return address has been signed with A key.  */\n-#define RA_A_SIGNED_BIT ((~(_Unwind_Word) 0 >> 3) + 1)\n+  /* Bit reserved on AArch64, return address has been signed with A or B\n+     key.  */\n+#define RA_SIGNED_BIT ((~(_Unwind_Word) 0 >> 3) + 1)\n   _Unwind_Word flags;\n   /* 0 for now, can be increased when further fields are added to\n      struct _Unwind_Context.  */\n@@ -502,6 +503,11 @@ extract_cie_info (const struct dwarf_cie *cie, struct _Unwind_Context *context,\n \t  fs->signal_frame = 1;\n \t  aug += 1;\n \t}\n+      /* aarch64 B-key pointer authentication.  */\n+      else if (aug[0] == 'B')\n+\t{\n+\t  aug += 1;\n+      }\n \n       /* Otherwise we have an unknown augmentation string.\n \t Bail unless we saw a 'z' prefix.  */"}]}