{"sha": "ec88784d1a3d1a3aecd5d6b0829bfce88cd3ef44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM4ODc4NGQxYTNkMWEzYWVjZDVkNmIwODI5YmZjZTg4Y2QzZWY0NA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-23T10:21:03Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-23T10:21:03Z"}, "message": "decl.c (validate_alignment): For the case of an implicit array base type...\n\n\t* gcc-interface/decl.c (validate_alignment): For the case of an\n\timplicit array base type, look for alignment clause on first subtype.\n\tCode clean up.\n\nFrom-SVN: r149994", "tree": {"sha": "d3b88bd138998e6837a60bb0cba5af848f0e0005", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3b88bd138998e6837a60bb0cba5af848f0e0005"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec88784d1a3d1a3aecd5d6b0829bfce88cd3ef44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec88784d1a3d1a3aecd5d6b0829bfce88cd3ef44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec88784d1a3d1a3aecd5d6b0829bfce88cd3ef44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec88784d1a3d1a3aecd5d6b0829bfce88cd3ef44/comments", "author": null, "committer": null, "parents": [{"sha": "4b956d8b3b94807070186658bc664143794c897e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b956d8b3b94807070186658bc664143794c897e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b956d8b3b94807070186658bc664143794c897e"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "7d96c9a3c6d09d90658cb6c5798eba127b5f7224", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec88784d1a3d1a3aecd5d6b0829bfce88cd3ef44/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec88784d1a3d1a3aecd5d6b0829bfce88cd3ef44/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=ec88784d1a3d1a3aecd5d6b0829bfce88cd3ef44", "patch": "@@ -6512,17 +6512,21 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n \n   if (Present (Component_Clause (gnat_field)))\n     {\n+      Entity_Id gnat_parent\n+\t= Parent_Subtype (Underlying_Type (Scope (gnat_field)));\n+\n       gnu_pos = UI_To_gnu (Component_Bit_Offset (gnat_field), bitsizetype);\n       gnu_size = validate_size (Esize (gnat_field), gnu_field_type,\n \t\t\t\tgnat_field, FIELD_DECL, false, true);\n \n-      /* Ensure the position does not overlap with the parent subtype,\n-\t if there is one.  */\n-      if (Present (Parent_Subtype (Underlying_Type (Scope (gnat_field)))))\n+      /* Ensure the position does not overlap with the parent subtype, if there\n+\t is one.  This test is omitted if the parent of the tagged type has a\n+\t full rep clause since, in this case, component clauses are allowed to\n+\t overlay the space allocated for the parent type and the front-end has\n+\t checked that there are no overlapping components.  */\n+      if (Present (gnat_parent) && !Is_Fully_Repped_Tagged_Type (gnat_parent))\n \t{\n-\t  tree gnu_parent\n-\t    = gnat_to_gnu_type (Parent_Subtype\n-\t\t\t\t(Underlying_Type (Scope (gnat_field))));\n+\t  tree gnu_parent = gnat_to_gnu_type (gnat_parent);\n \n \t  if (TREE_CODE (TYPE_SIZE (gnu_parent)) == INTEGER_CST\n \t      && tree_int_cst_lt (gnu_pos, TYPE_SIZE (gnu_parent)))\n@@ -7674,9 +7678,19 @@ validate_alignment (Uint alignment, Entity_Id gnat_entity, unsigned int align)\n   if (Error_Posted (gnat_entity) && !Has_Alignment_Clause (gnat_entity))\n     return align;\n \n-  /* Post the error on the alignment clause if any.  */\n+  /* Post the error on the alignment clause if any.  Note, for the implicit\n+     base type of an array type, the alignment clause is on the first\n+     subtype.  */\n   if (Present (Alignment_Clause (gnat_entity)))\n     gnat_error_node = Expression (Alignment_Clause (gnat_entity));\n+\n+  else if (Is_Itype (gnat_entity)\n+           && Is_Array_Type (gnat_entity)\n+           && Etype (gnat_entity) == gnat_entity\n+           && Present (Alignment_Clause (First_Subtype (gnat_entity))))\n+    gnat_error_node =\n+      Expression (Alignment_Clause (First_Subtype (gnat_entity)));\n+\n   else\n     gnat_error_node = gnat_entity;\n "}]}