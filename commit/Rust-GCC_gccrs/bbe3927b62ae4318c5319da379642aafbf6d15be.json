{"sha": "bbe3927b62ae4318c5319da379642aafbf6d15be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJlMzkyN2I2MmFlNDMxOGM1MzE5ZGEzNzk2NDJhYWZiZjZkMTViZQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2017-05-29T06:03:23Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2017-05-29T06:03:23Z"}, "message": "re PR fortran/37131 (inline matmul for small matrix sizes)\n\n2017-05-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/37131\n\t* frontend-passes.c (check_conjg_transpose_variable):\n\tAdd prototype.\n\t(has_dimen_vector_ref):  Likewise\n\t(matmul_temp_args):  New function. Add prototype.\n\t(optimize_namespace):  Call matmul_temp_args.\n\n2017-05-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/37131\n\t* gfortran.dg/promotion_2.f90: Add -finline-matmul-limit=0 to\n\tflags.\n\t* gfortran.dg/transpose_optimization_1.f90: Likewise.\n\t* gfortran.dg/inline_matmul_17.f90:  New test.\n\nFrom-SVN: r248553", "tree": {"sha": "e4bc003a789e1d99ec54c8f1bdbe14c3caf948e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4bc003a789e1d99ec54c8f1bdbe14c3caf948e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbe3927b62ae4318c5319da379642aafbf6d15be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbe3927b62ae4318c5319da379642aafbf6d15be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbe3927b62ae4318c5319da379642aafbf6d15be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbe3927b62ae4318c5319da379642aafbf6d15be/comments", "author": null, "committer": null, "parents": [{"sha": "3779a0f8b2f09e4d0653f42d90f1f1f24a0b8708", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3779a0f8b2f09e4d0653f42d90f1f1f24a0b8708", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3779a0f8b2f09e4d0653f42d90f1f1f24a0b8708"}], "stats": {"total": 165, "additions": 161, "deletions": 4}, "files": [{"sha": "093c36c7e21a1b81c01a40c89cf0f2029430f49c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe3927b62ae4318c5319da379642aafbf6d15be/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe3927b62ae4318c5319da379642aafbf6d15be/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=bbe3927b62ae4318c5319da379642aafbf6d15be", "patch": "@@ -1,3 +1,12 @@\n+2017-05-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/37131\n+\t* frontend-passes.c (check_conjg_transpose_variable):\n+\tAdd prototype.\n+\t(has_dimen_vector_ref):  Likewise\n+\t(matmul_temp_args):  New function. Add prototype.\n+\t(optimize_namespace):  Call matmul_temp_args.\n+\n 2017-05-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \t* frontend-passes.c (matmul_lhs_realloc):  Correct"}, {"sha": "be02dce05ea15a09a31fde562518c57ce2a8d0c0", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 94, "deletions": 2, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe3927b62ae4318c5319da379642aafbf6d15be/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe3927b62ae4318c5319da379642aafbf6d15be/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=bbe3927b62ae4318c5319da379642aafbf6d15be", "patch": "@@ -49,6 +49,10 @@ static int inline_matmul_assign (gfc_code **, int *, void *);\n static gfc_code * create_do_loop (gfc_expr *, gfc_expr *, gfc_expr *,\n \t\t\t\t  locus *, gfc_namespace *,\n \t\t\t\t  char *vname=NULL);\n+static gfc_expr* check_conjg_transpose_variable (gfc_expr *, bool *,\n+\t\t\t\t\t\t bool *);\n+static bool has_dimen_vector_ref (gfc_expr *);\n+static int matmul_temp_args (gfc_code **, int *,void *data);\n \n #ifdef CHECKING_P\n static void check_locus (gfc_namespace *);\n@@ -1087,11 +1091,13 @@ optimize_namespace (gfc_namespace *ns)\n \t\t\t   (void *) &found);\n \t}\n       while (found);\n-\t\n+\n+      gfc_code_walker (&ns->code, matmul_temp_args, dummy_expr_callback,\n+\t\t       NULL);\n       gfc_code_walker (&ns->code, inline_matmul_assign, dummy_expr_callback,\n \t\t       NULL);\n     }\n-  \n+\n   /* BLOCKs are handled in the expression walker below.  */\n   for (ns = ns->contained; ns; ns = ns->sibling)\n     {\n@@ -2157,6 +2163,92 @@ matmul_to_var_code (gfc_code **c, int *walk_subtrees ATTRIBUTE_UNUSED,\n }\n \n \n+/* Take a statement of the shape c = matmul(a,b) and create temporaries\n+   for a and b if there is a dependency between the arguments and the\n+   result variable or if a or b are the result of calculations that cannot\n+   be handled by the inliner.  */\n+\n+static int\n+matmul_temp_args (gfc_code **c, int *walk_subtrees ATTRIBUTE_UNUSED,\n+\t\t  void *data ATTRIBUTE_UNUSED)\n+{\n+  gfc_expr *expr1, *expr2;\n+  gfc_code *co;\n+  gfc_actual_arglist *a, *b;\n+  bool a_tmp, b_tmp;\n+  gfc_expr *matrix_a, *matrix_b;\n+  bool conjg_a, conjg_b, transpose_a, transpose_b;\n+  \n+  co = *c;\n+\n+  if (co->op != EXEC_ASSIGN)\n+    return 0;\n+\n+  if (forall_level > 0 || iterator_level > 0 || in_omp_workshare\n+      || in_where)\n+    return 0;\n+\n+  /* This has some duplication with inline_matmul_assign.  This\n+     is because the creation of temporary variables could still fail,\n+     and inline_matmul_assign still needs to be able to handle these\n+     cases.  */\n+  expr1 = co->expr1;\n+  expr2 = co->expr2;\n+\n+  if (expr2->expr_type != EXPR_FUNCTION\n+      || expr2->value.function.isym == NULL\n+      || expr2->value.function.isym->id != GFC_ISYM_MATMUL)\n+    return 0;\n+\n+  a_tmp = false;\n+  a = expr2->value.function.actual;\n+  matrix_a = check_conjg_transpose_variable (a->expr, &conjg_a, &transpose_a);\n+  if (matrix_a != NULL)\n+    {\n+      if (matrix_a->expr_type == EXPR_VARIABLE\n+\t  && (gfc_check_dependency (matrix_a, expr1, true)\n+\t      || has_dimen_vector_ref (matrix_a)))\n+\ta_tmp = true;\n+    }\n+  else\n+    a_tmp = true;\n+\n+  b_tmp = false;\n+  b = a->next;\n+  matrix_b = check_conjg_transpose_variable (b->expr, &conjg_b, &transpose_b);\n+  if (matrix_b != NULL)\n+    {\n+      if (matrix_b->expr_type == EXPR_VARIABLE\n+\t  && (gfc_check_dependency (matrix_b, expr1, true)\n+\t      || has_dimen_vector_ref (matrix_b)))\n+\tb_tmp = true;\n+    }\n+  else\n+    b_tmp = true;\n+\n+  if (!a_tmp && !b_tmp)\n+    return 0;\n+  \n+  current_code = c;\n+  inserted_block = NULL;\n+  changed_statement = NULL;\n+  if (a_tmp)\n+    {\n+      gfc_expr *at;\n+      at = create_var (a->expr,\"mma\");\n+      if (at)\n+\ta->expr = at;\n+    }\n+  if (b_tmp)\n+    {\n+      gfc_expr *bt;\n+      bt = create_var (b->expr,\"mmb\");\n+      if (bt)\n+\tb->expr = bt;\n+    }\n+  return 0;\n+}\n+\n /* Auxiliary function to build and simplify an array inquiry function.\n    dim is zero-based.  */\n "}, {"sha": "accf635d258287c78511e644937f6a2ba29ad479", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe3927b62ae4318c5319da379642aafbf6d15be/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe3927b62ae4318c5319da379642aafbf6d15be/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bbe3927b62ae4318c5319da379642aafbf6d15be", "patch": "@@ -1,3 +1,11 @@\n+2017-05-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/37131\n+\t* gfortran.dg/promotion_2.f90: Add -finline-matmul-limit=0 to\n+\tflags.\n+\t* gfortran.dg/transpose_optimization_1.f90: Likewise.\n+\t* gfortran.dg/inline_matmul_17.f90:  New test.\n+\n 2017-05-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \t* gfortran.dg/matmul_bounds_12.f90:  New test."}, {"sha": "053dc3845546ae3f7614dc1086d9760bda845141", "filename": "gcc/testsuite/gfortran.dg/inline_matmul_17.f90", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe3927b62ae4318c5319da379642aafbf6d15be/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_17.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe3927b62ae4318c5319da379642aafbf6d15be/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_17.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_17.f90?ref=bbe3927b62ae4318c5319da379642aafbf6d15be", "patch": "@@ -0,0 +1,48 @@\n+! { dg-do  run }\n+! { dg-options \"-O -fdump-tree-optimized -finline-matmul-limit=1000\" }\n+module x\n+  implicit none\n+contains\n+  function afunc()\n+    real, dimension(3,3) :: afunc\n+    afunc = reshape([ 2., 3., 5., 7., 11., 13., 17., 19., 23. ], [3,3])\n+  end function afunc\n+  \n+  function bfunc()\n+    real, dimension(3,3) :: bfunc\n+    bfunc = reshape([29., 31., 37., 41., 43., 47., 53., 59., 61., 67.],[3,3])\n+  end function bfunc\n+end module x\n+\n+program main\n+  use x\n+  implicit none\n+  real, dimension(3,3), parameter :: &\n+       & aval = reshape([ 2., 3., 5., 7., 11., 13., 17., 19., 23. ], [3,3]), &\n+       & bval = reshape([29., 31., 37., 41., 43., 47., 53., 59., 61., 67.],[3,3])\n+  integer, dimension(3) :: ind\n+  real, dimension(3,3) :: a, b,c,d, ri\n+  data ri /120430., 187861., 151737., 161022., 251139., 202847., 212566., 331537., 267781./\n+  data d/904., 1131., 1399., 1182., 1489., 1845., 1556., 1967., 2435. /\n+  a = aval\n+  b = bval\n+  c = matmul(a,b)\n+  a = matmul(a,b)\n+  if (any(a-c /= 0)) call abort\n+  a = aval\n+  b = bval\n+  b = matmul(a,b)\n+  if (any(b-c /= 0)) call abort\n+  b = bval\n+  a = matmul(aval, b)\n+  if (any(a-c /= 0)) call abort\n+  ind = [1, 3, 2]\n+  c = matmul(a(ind,:),b)\n+  if (any(c-ri /= 0)) call abort\n+  c = matmul(afunc(),b)\n+  if (any(c-d /= 0)) call abort\n+  a = afunc()\n+  c = matmul(a, bfunc())\n+  if (any(c-d /= 0)) call abort\n+end program main\n+! { dg-final { scan-tree-dump-times \"matmul_r4\" 2 \"optimized\" } }"}, {"sha": "7e3c6c920103d220cef9711b548c756e76b753ae", "filename": "gcc/testsuite/gfortran.dg/promotion_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe3927b62ae4318c5319da379642aafbf6d15be/gcc%2Ftestsuite%2Fgfortran.dg%2Fpromotion_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe3927b62ae4318c5319da379642aafbf6d15be/gcc%2Ftestsuite%2Fgfortran.dg%2Fpromotion_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpromotion_2.f90?ref=bbe3927b62ae4318c5319da379642aafbf6d15be", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-fdefault-real-8 -fexternal-blas -fdump-tree-original\" }\n+! { dg-options \"-fdefault-real-8 -fexternal-blas -fdump-tree-original -finline-matmul-limit=0\" }\n !\n ! PR fortran/54463\n !"}, {"sha": "f1f58322694c56a968284631a9414464b65afa55", "filename": "gcc/testsuite/gfortran.dg/transpose_optimization_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe3927b62ae4318c5319da379642aafbf6d15be/gcc%2Ftestsuite%2Fgfortran.dg%2Ftranspose_optimization_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe3927b62ae4318c5319da379642aafbf6d15be/gcc%2Ftestsuite%2Fgfortran.dg%2Ftranspose_optimization_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftranspose_optimization_1.f90?ref=bbe3927b62ae4318c5319da379642aafbf6d15be", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-Warray-temporaries -fdump-tree-original\" }\n+! { dg-options \"-Warray-temporaries -fdump-tree-original -finline-matmul-limit=0\" }\n !\n ! PR fortran/45648\n ! Non-copying descriptor transpose optimization (for function call args)."}]}