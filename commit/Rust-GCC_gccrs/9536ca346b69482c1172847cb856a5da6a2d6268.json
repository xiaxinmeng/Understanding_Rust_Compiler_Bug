{"sha": "9536ca346b69482c1172847cb856a5da6a2d6268", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTUzNmNhMzQ2YjY5NDgyYzExNzI4NDdjYjg1NmE1ZGE2YTJkNjI2OA==", "commit": {"author": {"name": "Sylvain Pion", "email": "Sylvain.Pion@mpi-sb.mpg.de", "date": "2002-12-23T17:36:24Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2002-12-23T17:36:24Z"}, "message": "stl_deque.h: Fix typo.\n\n2002-12-20  Sylvain Pion   <Sylvain.Pion@mpi-sb.mpg.de>\n\n\t* include/bits/stl_deque.h: Fix typo.\n\t* include/bits/stl_list.h: Same.\n\t* include/bits/stl_map.h: Same.\n\t* include/bits/stl_multimap.h: Same.\n\t* include/bits/stl_queue.h: Same.\n\t* include/bits/stl_stack.h: Same.\n\t* include/bits/stl_vector.h: Same.\n\nFrom-SVN: r60442", "tree": {"sha": "8d175ba6490b13dbf0e4c7263b1d4947b4b15ecb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d175ba6490b13dbf0e4c7263b1d4947b4b15ecb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9536ca346b69482c1172847cb856a5da6a2d6268", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9536ca346b69482c1172847cb856a5da6a2d6268", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9536ca346b69482c1172847cb856a5da6a2d6268", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9536ca346b69482c1172847cb856a5da6a2d6268/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88b5521b03f8943ec6444be179de533116dafa61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88b5521b03f8943ec6444be179de533116dafa61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88b5521b03f8943ec6444be179de533116dafa61"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "3cb1684e86408894a967ebb119704d4f85e441c8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9536ca346b69482c1172847cb856a5da6a2d6268/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9536ca346b69482c1172847cb856a5da6a2d6268/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9536ca346b69482c1172847cb856a5da6a2d6268", "patch": "@@ -1,3 +1,13 @@\n+2002-12-20  Sylvain Pion   <Sylvain.Pion@mpi-sb.mpg.de>\n+\n+\t* include/bits/stl_deque.h: Fix typo.\n+\t* include/bits/stl_list.h: Same.\n+\t* include/bits/stl_map.h: Same.\n+\t* include/bits/stl_multimap.h: Same.\n+\t* include/bits/stl_queue.h: Same.\n+\t* include/bits/stl_stack.h: Same.\n+\t* include/bits/stl_vector.h: Same.\n+\n 2002-12-18  Benjamin Kosnik  <bkoz@redhat.com>\n \n  \t* docs/html/documentation.html: Add link for debug.html."}, {"sha": "bc89059040f549405825075181970b38f0edecd5", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9536ca346b69482c1172847cb856a5da6a2d6268/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9536ca346b69482c1172847cb856a5da6a2d6268/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=9536ca346b69482c1172847cb856a5da6a2d6268", "patch": "@@ -1549,12 +1549,12 @@ namespace std\n    *  @brief  Deque ordering relation.\n    *  @param  x  A %deque.\n    *  @param  y  A %deque of the same type as @a x.\n-   *  @return  True iff @a x is lexographically less than @a y.\n+   *  @return  True iff @a x is lexicographically less than @a y.\n    *\n    *  This is a total ordering relation.  It is linear in the size of the\n    *  deques.  The elements must be comparable with @c <.\n    *\n-   *  See std::lexographical_compare() for how the determination is made.\n+   *  See std::lexicographical_compare() for how the determination is made.\n   */\n   template <typename _Tp, typename _Alloc>\n   inline bool operator<(const deque<_Tp, _Alloc>& __x,"}, {"sha": "3b191a007d15848de005219645db1c2560ec9c6d", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9536ca346b69482c1172847cb856a5da6a2d6268/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9536ca346b69482c1172847cb856a5da6a2d6268/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=9536ca346b69482c1172847cb856a5da6a2d6268", "patch": "@@ -1116,12 +1116,12 @@ namespace std\n    *  @brief  List ordering relation.\n    *  @param  x  A %list.\n    *  @param  y  A %list of the same type as @a x.\n-   *  @return  True iff @a x is lexographically less than @a y.\n+   *  @return  True iff @a x is lexicographically less than @a y.\n    *\n    *  This is a total ordering relation.  It is linear in the size of the\n    *  lists.  The elements must be comparable with @c <.\n    *\n-   *  See std::lexographical_compare() for how the determination is made.\n+   *  See std::lexicographical_compare() for how the determination is made.\n   */\n   template<typename _Tp, typename _Alloc>\n     inline bool"}, {"sha": "adb2e9a9d9b2213b14e220c5945670c7d8968fb1", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9536ca346b69482c1172847cb856a5da6a2d6268/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9536ca346b69482c1172847cb856a5da6a2d6268/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=9536ca346b69482c1172847cb856a5da6a2d6268", "patch": "@@ -610,12 +610,12 @@ namespace std\n    *  @brief  Map ordering relation.\n    *  @param  x  A %map.\n    *  @param  y  A %map of the same type as @a x.\n-   *  @return  True iff @a x is lexographically less than @a y.\n+   *  @return  True iff @a x is lexicographically less than @a y.\n    *\n    *  This is a total ordering relation.  It is linear in the size of the\n    *  maps.  The elements must be comparable with @c <.\n    *\n-   *  See std::lexographical_compare() for how the determination is made.\n+   *  See std::lexicographical_compare() for how the determination is made.\n   */\n   template <typename _Key, typename _Tp, typename _Compare, typename _Alloc>\n     inline bool"}, {"sha": "7b18d46598ff6c2d3b197e6ae0573eac2e322c74", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9536ca346b69482c1172847cb856a5da6a2d6268/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9536ca346b69482c1172847cb856a5da6a2d6268/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=9536ca346b69482c1172847cb856a5da6a2d6268", "patch": "@@ -584,12 +584,12 @@ namespace std\n    *  @brief  Multimap ordering relation.\n    *  @param  x  A %multimap.\n    *  @param  y  A %multimap of the same type as @a x.\n-   *  @return  True iff @a x is lexographically less than @a y.\n+   *  @return  True iff @a x is lexicographically less than @a y.\n    *\n    *  This is a total ordering relation.  It is linear in the size of the\n    *  multimaps.  The elements must be comparable with @c <.\n    *\n-   *  See std::lexographical_compare() for how the determination is made.\n+   *  See std::lexicographical_compare() for how the determination is made.\n   */\n   template <typename _Key, typename _Tp, typename _Compare, typename _Alloc>\n     inline bool"}, {"sha": "c69b7ee0557dce3112ca93d6d8880267b3cec1c2", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9536ca346b69482c1172847cb856a5da6a2d6268/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9536ca346b69482c1172847cb856a5da6a2d6268/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=9536ca346b69482c1172847cb856a5da6a2d6268", "patch": "@@ -228,12 +228,12 @@ namespace std\n    *  @brief  Queue ordering relation.\n    *  @param  x  A %queue.\n    *  @param  y  A %queue of the same type as @a x.\n-   *  @return  True iff @a x is lexographically less than @a y.\n+   *  @return  True iff @a x is lexicographically less than @a y.\n    *\n    *  This is an total ordering relation.  Complexity and semantics depend on\n    *  the underlying sequence type, but the expected rules are:  this relation\n    *  is linear in the size of the sequences, the elements must be comparable\n-   *  with @c <, and std::lexographical_compare() is usually used to make the\n+   *  with @c <, and std::lexicographical_compare() is usually used to make the\n    *  determination.\n   */\n   template <typename _Tp, typename _Sequence>"}, {"sha": "54b3e158026680715b1a01ab26a22c96569bcf3f", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9536ca346b69482c1172847cb856a5da6a2d6268/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9536ca346b69482c1172847cb856a5da6a2d6268/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=9536ca346b69482c1172847cb856a5da6a2d6268", "patch": "@@ -209,12 +209,12 @@ namespace std\n    *  @brief  Stack ordering relation.\n    *  @param  x  A %stack.\n    *  @param  y  A %stack of the same type as @a x.\n-   *  @return  True iff @a x is lexographically less than @a y.\n+   *  @return  True iff @a x is lexicographically less than @a y.\n    *\n    *  This is an total ordering relation.  Complexity and semantics depend on\n    *  the underlying sequence type, but the expected rules are:  this relation\n    *  is linear in the size of the sequences, the elements must be comparable\n-   *  with @c <, and std::lexographical_compare() is usually used to make the\n+   *  with @c <, and std::lexicographical_compare() is usually used to make the\n    *  determination.\n   */\n   template <typename _Tp, typename _Seq>"}, {"sha": "cbd3acbd33dd938899c37c5fafc3550e93bec198", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9536ca346b69482c1172847cb856a5da6a2d6268/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9536ca346b69482c1172847cb856a5da6a2d6268/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=9536ca346b69482c1172847cb856a5da6a2d6268", "patch": "@@ -943,12 +943,12 @@ namespace std\n    *  @brief  Vector ordering relation.\n    *  @param  x  A %vector.\n    *  @param  y  A %vector of the same type as @a x.\n-   *  @return  True iff @a x is lexographically less than @a y.\n+   *  @return  True iff @a x is lexicographically less than @a y.\n    *\n    *  This is a total ordering relation.  It is linear in the size of the\n    *  vectors.  The elements must be comparable with @c <.\n    *\n-   *  See std::lexographical_compare() for how the determination is made.\n+   *  See std::lexicographical_compare() for how the determination is made.\n   */\n   template<typename _Tp, typename _Alloc>\n     inline bool"}]}