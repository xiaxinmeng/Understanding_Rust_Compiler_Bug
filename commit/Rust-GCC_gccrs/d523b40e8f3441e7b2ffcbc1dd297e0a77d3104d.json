{"sha": "d523b40e8f3441e7b2ffcbc1dd297e0a77d3104d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUyM2I0MGU4ZjM0NDFlN2IyZmZjYmMxZGQyOTdlMGE3N2QzMTA0ZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-08-22T07:56:13Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-22T07:56:13Z"}, "message": "expmed.c (CODE_FOR_insv, gen_insv): Provide defaults.\n\n        * expmed.c (CODE_FOR_insv, gen_insv): Provide defaults.\n        (CODE_FOR_extv, gen_extv, CODE_FOR_extzv, gen_extzv): Likewise.\n        (store_bit_field): Use mode_for_extraction more places.\n        (extract_bit_field): Likewise.\n\nFrom-SVN: r45099", "tree": {"sha": "4ed07de055d5dbcce6fe4e375b550d83ead611f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ed07de055d5dbcce6fe4e375b550d83ead611f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d523b40e8f3441e7b2ffcbc1dd297e0a77d3104d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d523b40e8f3441e7b2ffcbc1dd297e0a77d3104d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d523b40e8f3441e7b2ffcbc1dd297e0a77d3104d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d523b40e8f3441e7b2ffcbc1dd297e0a77d3104d/comments", "author": null, "committer": null, "parents": [{"sha": "e1b86c9e69af5a998c5acd68d54d8c430f54ddee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1b86c9e69af5a998c5acd68d54d8c430f54ddee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1b86c9e69af5a998c5acd68d54d8c430f54ddee"}], "stats": {"total": 39, "additions": 24, "deletions": 15}, "files": [{"sha": "31aa114734a655545135849fa63cd389f8b5c714", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d523b40e8f3441e7b2ffcbc1dd297e0a77d3104d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d523b40e8f3441e7b2ffcbc1dd297e0a77d3104d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d523b40e8f3441e7b2ffcbc1dd297e0a77d3104d", "patch": "@@ -1,3 +1,10 @@\n+2001-08-21  Richard Henderson  <rth@redhat.com>\n+\n+\t* expmed.c (CODE_FOR_insv, gen_insv): Provide defaults.\n+\t(CODE_FOR_extv, gen_extv, CODE_FOR_extzv, gen_extzv): Likewise.\n+\t(store_bit_field): Use mode_for_extraction more places.\n+\t(extract_bit_field): Likewise.\n+\n 2001-08-21  Zack Weinberg  <zackw@panix.com>\n \n \t* caller-save.c: Don't include insn-codes.h."}, {"sha": "bd72caeb86a704654657591f4e07624760bd0129", "filename": "gcc/expmed.c", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d523b40e8f3441e7b2ffcbc1dd297e0a77d3104d/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d523b40e8f3441e7b2ffcbc1dd297e0a77d3104d/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=d523b40e8f3441e7b2ffcbc1dd297e0a77d3104d", "patch": "@@ -75,6 +75,20 @@ static int sdiv_pow2_cheap, smod_pow2_cheap;\n #define MAX_BITS_PER_WORD BITS_PER_WORD\n #endif\n \n+/* Reduce conditional compilation elsewhere.  */\n+#ifndef HAVE_insv\n+#define CODE_FOR_insv\tCODE_FOR_nothing\n+#define gen_insv(a,b,c,d) NULL_RTX\n+#endif\n+#ifndef HAVE_extv\n+#define CODE_FOR_extv\tCODE_FOR_nothing\n+#define gen_extv(a,b,c,d) NULL_RTX\n+#endif\n+#ifndef HAVE_extzv\n+#define CODE_FOR_extzv\tCODE_FOR_nothing\n+#define gen_extzv(a,b,c,d) NULL_RTX\n+#endif\n+\n /* Cost of various pieces of RTL.  Note that some of these are indexed by\n    shift count and some by mode.  */\n static int add_cost, negate_cost, zero_cost;\n@@ -541,13 +555,9 @@ store_bit_field (str_rtx, bitsize, bitnum, fieldmode, value, align, total_size)\n       rtx xop0 = op0;\n       rtx last = get_last_insn ();\n       rtx pat;\n-      enum machine_mode maxmode;\n+      enum machine_mode maxmode = mode_for_extraction (EP_insv, 3);\n       int save_volatile_ok = volatile_ok;\n \n-      maxmode = insn_data[(int) CODE_FOR_insv].operand[3].mode;\n-      if (maxmode == VOIDmode)\n-\tmaxmode = word_mode;\n-\n       volatile_ok = 1;\n \n       /* If this machine's insv can only insert into a register, copy OP0\n@@ -1290,11 +1300,7 @@ extract_bit_field (str_rtx, bitsize, bitnum, unsignedp,\n \t  rtx xspec_target = spec_target;\n \t  rtx xspec_target_subreg = spec_target_subreg;\n \t  rtx pat;\n-\t  enum machine_mode maxmode;\n-\n-\t  maxmode = insn_data[(int) CODE_FOR_extzv].operand[0].mode;\n-\t  if (maxmode == VOIDmode)\n-\t    maxmode = word_mode;\n+\t  enum machine_mode maxmode = mode_for_extraction (EP_extzv, 0);\n \n \t  if (GET_CODE (xop0) == MEM)\n \t    {\n@@ -1426,11 +1432,7 @@ extract_bit_field (str_rtx, bitsize, bitnum, unsignedp,\n \t  rtx xspec_target = spec_target;\n \t  rtx xspec_target_subreg = spec_target_subreg;\n \t  rtx pat;\n-\t  enum machine_mode maxmode;\n-\n-\t  maxmode = insn_data[(int) CODE_FOR_extv].operand[0].mode;\n-\t  if (maxmode == VOIDmode)\n-\t    maxmode = word_mode;\n+\t  enum machine_mode maxmode = mode_for_extraction (EP_extv, 0);\n \n \t  if (GET_CODE (xop0) == MEM)\n \t    {"}]}