{"sha": "75c40d56f7c0f3fcc5c630694c14d74011d2c1a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVjNDBkNTZmN2MwZjNmY2M1YzYzMDY5NGMxNGQ3NDAxMWQyYzFhMw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2006-04-15T21:45:06Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-04-15T21:45:06Z"}, "message": "cfgcleanup.c, [...]: Fix comment typos.\n\n\t* cfgcleanup.c, config/dfp-bit.c, expr.c, fold-const.c,\n\tjump.c, mips-tfile.c, omp-low.c, sched-int.h,\n\ttree-ssa-loop-prefetch.c, tree-vrp.c: Fix comment typos.\n\nFrom-SVN: r112971", "tree": {"sha": "51c527408becab45ec9307f29e5ba320f3bc0a8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51c527408becab45ec9307f29e5ba320f3bc0a8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75c40d56f7c0f3fcc5c630694c14d74011d2c1a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75c40d56f7c0f3fcc5c630694c14d74011d2c1a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75c40d56f7c0f3fcc5c630694c14d74011d2c1a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75c40d56f7c0f3fcc5c630694c14d74011d2c1a3/comments", "author": null, "committer": null, "parents": [{"sha": "8370f6fa3cae71c3ec88804cfac7ce130b8bd871", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8370f6fa3cae71c3ec88804cfac7ce130b8bd871", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8370f6fa3cae71c3ec88804cfac7ce130b8bd871"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "e50a0476e339b7b7661852707a9c12e6a62ef67d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c40d56f7c0f3fcc5c630694c14d74011d2c1a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c40d56f7c0f3fcc5c630694c14d74011d2c1a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75c40d56f7c0f3fcc5c630694c14d74011d2c1a3", "patch": "@@ -1,3 +1,9 @@\n+2006-04-15  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* cfgcleanup.c, config/dfp-bit.c, expr.c, fold-const.c,\n+\tjump.c, mips-tfile.c, omp-low.c, sched-int.h,\n+\ttree-ssa-loop-prefetch.c, tree-vrp.c: Fix comment typos.\n+\n 2006-04-15  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* pa.md (output_bb patterns): Shorten long branch alternatives by 4."}, {"sha": "08bd0b666bfa7282678e127e1350759ccea5f586", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c40d56f7c0f3fcc5c630694c14d74011d2c1a3/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c40d56f7c0f3fcc5c630694c14d74011d2c1a3/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=75c40d56f7c0f3fcc5c630694c14d74011d2c1a3", "patch": "@@ -1667,7 +1667,7 @@ try_crossjump_to_edge (int mode, edge e1, edge e2)\n       && (newpos1 != BB_HEAD (src1)))\n     return false;\n \n-  /* Avoid deleting preserve label when redirecting ABNORMAL edeges.  */\n+  /* Avoid deleting preserve label when redirecting ABNORMAL edges.  */\n   if (block_has_preserve_label (e1->dest)\n       && (e1->flags & EDGE_ABNORMAL))\n     return false;"}, {"sha": "c9374c51f0641a010f3428baaa9937b6baabda36", "filename": "gcc/config/dfp-bit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c40d56f7c0f3fcc5c630694c14d74011d2c1a3/gcc%2Fconfig%2Fdfp-bit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c40d56f7c0f3fcc5c630694c14d74011d2c1a3/gcc%2Fconfig%2Fdfp-bit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdfp-bit.c?ref=75c40d56f7c0f3fcc5c630694c14d74011d2c1a3", "patch": "@@ -411,7 +411,7 @@ DFP_TO_INT (DFP_C_TYPE x)\n   TO_INTERNAL (&s, &n1);\n   /* Rescale if the exponent is less than zero.  */\n   decNumberToIntegralValue (&n2, &n1, &context);\n-  /* Get a value to use for the quanitize call.  */\n+  /* Get a value to use for the quantize call.  */\n   decNumberFromString (&qval, (char *) \"1.0\", &context);\n   /* Force the exponent to zero.  */\n   decNumberQuantize (&n1, &n2, &qval, &context);"}, {"sha": "8d2839f8d6d0223066331e4d0ac95d15a266bcd0", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c40d56f7c0f3fcc5c630694c14d74011d2c1a3/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c40d56f7c0f3fcc5c630694c14d74011d2c1a3/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=75c40d56f7c0f3fcc5c630694c14d74011d2c1a3", "patch": "@@ -7717,7 +7717,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       else if (!MEM_P (op0))\n \t{\n \t  /* If the operand is not a MEM, force it into memory.  Since we\n-\t     are going to be be changing the mode of the MEM, don't call\n+\t     are going to be changing the mode of the MEM, don't call\n \t     force_const_mem for constants because we don't allow pool\n \t     constants to change mode.  */\n \t  tree inner_type = TREE_TYPE (TREE_OPERAND (exp, 0));"}, {"sha": "ddc56f66135dede6b0d5d189c76d1f60de8ac01d", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c40d56f7c0f3fcc5c630694c14d74011d2c1a3/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c40d56f7c0f3fcc5c630694c14d74011d2c1a3/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=75c40d56f7c0f3fcc5c630694c14d74011d2c1a3", "patch": "@@ -7097,7 +7097,7 @@ native_interpret_vector (tree type, unsigned char *ptr, int len)\n }\n \n \n-/* Subroutine of fold_view_convert_expr.  Interpet the contents of\n+/* Subroutine of fold_view_convert_expr.  Interpret the contents of\n    the buffer PTR of length LEN as a constant of type TYPE.  For\n    INTEGRAL_TYPE_P we return an INTEGER_CST, for SCALAR_FLOAT_TYPE_P\n    we return a REAL_CST, etc...  If the buffer cannot be interpreted,"}, {"sha": "b087394162026273300796f00e669697e2a5ae12", "filename": "gcc/jump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c40d56f7c0f3fcc5c630694c14d74011d2c1a3/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c40d56f7c0f3fcc5c630694c14d74011d2c1a3/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=75c40d56f7c0f3fcc5c630694c14d74011d2c1a3", "patch": "@@ -21,7 +21,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n 02110-1301, USA.  */\n \n /* This is the pathetic reminder of old fame of the jump-optimization pass\n-   of the compiler.  Now it contains basically set of utility function to\n+   of the compiler.  Now it contains basically a set of utility functions to\n    operate with jumps.\n \n    Each CODE_LABEL has a count of the times it is used"}, {"sha": "7530ac7c64ec216c4d2252ec8160a6048dc7432a", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c40d56f7c0f3fcc5c630694c14d74011d2c1a3/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c40d56f7c0f3fcc5c630694c14d74011d2c1a3/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=75c40d56f7c0f3fcc5c630694c14d74011d2c1a3", "patch": "@@ -4363,7 +4363,7 @@ copy_object (void)\n \n \n   /* Read in each of the sections if they exist in the object file.\n-     We read things in in the order the mips assembler creates the\n+     We read things in the order the mips assembler creates the\n      sections, so in theory no extra seeks are done.\n \n      For simplicity sake, round each read up to a page boundary,"}, {"sha": "bcc3650c26a1d2247e4f565f6304bfa2947ac98f", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c40d56f7c0f3fcc5c630694c14d74011d2c1a3/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c40d56f7c0f3fcc5c630694c14d74011d2c1a3/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=75c40d56f7c0f3fcc5c630694c14d74011d2c1a3", "patch": "@@ -2233,10 +2233,10 @@ remove_exit_barrier (struct omp_region *region)\n   exit_bb = region->exit;\n \n   /* The last insn in the block will be the parallel's OMP_RETURN.  The\n-     workshare's OMP_RETURN will be in a preceeding block.  The kinds of\n+     workshare's OMP_RETURN will be in a preceding block.  The kinds of\n      statements that can appear in between are extremely limited -- no\n      memory operations at all.  Here, we allow nothing at all, so the\n-     only thing we allow to preceed this OMP_RETURN is a label.  */\n+     only thing we allow to precede this OMP_RETURN is a label.  */\n   si = bsi_last (exit_bb);\n   gcc_assert (TREE_CODE (bsi_stmt (si)) == OMP_RETURN);\n   bsi_prev (&si);"}, {"sha": "bee8a98fff66a048948d949d41bf1127bd191b77", "filename": "gcc/sched-int.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c40d56f7c0f3fcc5c630694c14d74011d2c1a3/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c40d56f7c0f3fcc5c630694c14d74011d2c1a3/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=75c40d56f7c0f3fcc5c630694c14d74011d2c1a3", "patch": "@@ -437,7 +437,7 @@ enum SPEC_TYPES_OFFSETS {\n \n /* This dependence is to the instruction in the recovery block, that was\n    formed to recover after control-speculation failure.\n-   Thus, this dependence can be be overcome with generating of the copy of\n+   Thus, this dependence can be overcome with generating of the copy of\n    this instruction in the recovery block.  */\n #define BE_IN_CONTROL (((ds_t) DEP_WEAK_MASK) << BE_IN_CONTROL_BITS_OFFSET)\n "}, {"sha": "b58dbf6fccdb13e77330ac415712b09aab18f885", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c40d56f7c0f3fcc5c630694c14d74011d2c1a3/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c40d56f7c0f3fcc5c630694c14d74011d2c1a3/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=75c40d56f7c0f3fcc5c630694c14d74011d2c1a3", "patch": "@@ -204,7 +204,7 @@ struct mem_ref\n   struct mem_ref *next;\t\t/* The next reference in the group.  */\n };\n \n-/* Dumps information obout reference REF to FILE.  */\n+/* Dumps information about reference REF to FILE.  */\n \n static void\n dump_mem_ref (FILE *file, struct mem_ref *ref)"}, {"sha": "872a466a55d0edc2989d33e7744dd3b78e5095f9", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c40d56f7c0f3fcc5c630694c14d74011d2c1a3/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c40d56f7c0f3fcc5c630694c14d74011d2c1a3/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=75c40d56f7c0f3fcc5c630694c14d74011d2c1a3", "patch": "@@ -1703,7 +1703,7 @@ extract_range_from_unary_expr (value_range_t *vr, tree expr)\n \t  new_max = fold_convert (outer_type, orig_max);\n \n \t  /* Verify the new min/max values are gimple values and\n-\t     that they compare equal to the orignal input's\n+\t     that they compare equal to the original input's\n \t     min/max values.  */\n \t  if (is_gimple_val (new_min)\n \t      && is_gimple_val (new_max)"}]}