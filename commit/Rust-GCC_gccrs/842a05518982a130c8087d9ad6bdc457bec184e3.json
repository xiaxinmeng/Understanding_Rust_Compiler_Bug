{"sha": "842a05518982a130c8087d9ad6bdc457bec184e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQyYTA1NTE4OTgyYTEzMGM4MDg3ZDlhZDZiZGM0NTdiZWMxODRlMw==", "commit": {"author": {"name": "Aaron Sawdey", "email": "acsawdey@linux.ibm.com", "date": "2021-01-26T03:11:52Z"}, "committer": {"name": "Aaron Sawdey", "email": "acsawdey@linux.ibm.com", "date": "2021-05-21T21:20:11Z"}, "message": "combine patterns for add-add fusion\n\nThis patch adds a function to genfusion.pl to add a couple\nmore patterns so combine can do fusion of pairs of add and\nvaddudm instructions.\n\ngcc/ChangeLog:\n\n\t* config/rs6000/genfusion.pl (gen_addadd): New function.\n\t* config/rs6000/fusion.md: Regenerate file.\n\t* config/rs6000/rs6000-cpus.def: Add\n\tOPTION_MASK_P10_FUSION_2ADD to masks.\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal):\n\tHandle default value of OPTION_MASK_P10_FUSION_2ADD.\n\t* config/rs6000/rs6000.opt: Add -mpower10-fusion-2add.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/fusion-p10-addadd.c: New file.", "tree": {"sha": "1d29c5a7c8e7b62c2271f1cc08d48d5e54e21e36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d29c5a7c8e7b62c2271f1cc08d48d5e54e21e36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/842a05518982a130c8087d9ad6bdc457bec184e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/842a05518982a130c8087d9ad6bdc457bec184e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/842a05518982a130c8087d9ad6bdc457bec184e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/842a05518982a130c8087d9ad6bdc457bec184e3/comments", "author": {"login": "acsawdey", "id": 41373646, "node_id": "MDQ6VXNlcjQxMzczNjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/41373646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acsawdey", "html_url": "https://github.com/acsawdey", "followers_url": "https://api.github.com/users/acsawdey/followers", "following_url": "https://api.github.com/users/acsawdey/following{/other_user}", "gists_url": "https://api.github.com/users/acsawdey/gists{/gist_id}", "starred_url": "https://api.github.com/users/acsawdey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acsawdey/subscriptions", "organizations_url": "https://api.github.com/users/acsawdey/orgs", "repos_url": "https://api.github.com/users/acsawdey/repos", "events_url": "https://api.github.com/users/acsawdey/events{/privacy}", "received_events_url": "https://api.github.com/users/acsawdey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "acsawdey", "id": 41373646, "node_id": "MDQ6VXNlcjQxMzczNjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/41373646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acsawdey", "html_url": "https://github.com/acsawdey", "followers_url": "https://api.github.com/users/acsawdey/followers", "following_url": "https://api.github.com/users/acsawdey/following{/other_user}", "gists_url": "https://api.github.com/users/acsawdey/gists{/gist_id}", "starred_url": "https://api.github.com/users/acsawdey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acsawdey/subscriptions", "organizations_url": "https://api.github.com/users/acsawdey/orgs", "repos_url": "https://api.github.com/users/acsawdey/repos", "events_url": "https://api.github.com/users/acsawdey/events{/privacy}", "received_events_url": "https://api.github.com/users/acsawdey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdc716235143aafaae1056188fcadacda560303c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdc716235143aafaae1056188fcadacda560303c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdc716235143aafaae1056188fcadacda560303c"}], "stats": {"total": 138, "additions": 135, "deletions": 3}, "files": [{"sha": "6dfe1fa4508558cb6725f6fc1ea952b8897fb8db", "filename": "gcc/config/rs6000/fusion.md", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842a05518982a130c8087d9ad6bdc457bec184e3/gcc%2Fconfig%2Frs6000%2Ffusion.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842a05518982a130c8087d9ad6bdc457bec184e3/gcc%2Fconfig%2Frs6000%2Ffusion.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ffusion.md?ref=842a05518982a130c8087d9ad6bdc457bec184e3", "patch": "@@ -2658,3 +2658,39 @@\n   [(set_attr \"type\" \"fused_vector\")\n    (set_attr \"cost\" \"6\")\n    (set_attr \"length\" \"8\")])\n+\n+;; add-add fusion pattern generated by gen_addadd\n+(define_insn \"*fuse_add_add\"\n+  [(set (match_operand:GPR 3 \"gpc_reg_operand\" \"=0,1,&r,r\")\n+        (plus:GPR\n+           (plus:GPR (match_operand:GPR 0 \"gpc_reg_operand\" \"r,r,r,r\")\n+                     (match_operand:GPR 1 \"gpc_reg_operand\" \"%r,r,r,r\"))\n+           (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r,r,r\")))\n+   (clobber (match_scratch:GPR 4 \"=X,X,X,&r\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2ADD)\"\n+  \"@\n+   add %3,%1,%0\\;add %3,%3,%2\n+   add %3,%1,%0\\;add %3,%3,%2\n+   add %3,%1,%0\\;add %3,%3,%2\n+   add %4,%1,%0\\;add %3,%4,%2\"\n+  [(set_attr \"type\" \"fuse_arithlog\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; vaddudm-vaddudm fusion pattern generated by gen_addadd\n+(define_insn \"*fuse_vaddudm_vaddudm\"\n+  [(set (match_operand:V2DI 3 \"altivec_register_operand\" \"=0,1,&v,v\")\n+        (plus:V2DI\n+           (plus:V2DI (match_operand:V2DI 0 \"altivec_register_operand\" \"v,v,v,v\")\n+                     (match_operand:V2DI 1 \"altivec_register_operand\" \"%v,v,v,v\"))\n+           (match_operand:V2DI 2 \"altivec_register_operand\" \"v,v,v,v\")))\n+   (clobber (match_scratch:V2DI 4 \"=X,X,X,&v\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2ADD)\"\n+  \"@\n+   vaddudm %3,%1,%0\\;vaddudm %3,%3,%2\n+   vaddudm %3,%1,%0\\;vaddudm %3,%3,%2\n+   vaddudm %3,%1,%0\\;vaddudm %3,%3,%2\n+   vaddudm %4,%1,%0\\;vaddudm %3,%4,%2\"\n+  [(set_attr \"type\" \"fuse_vec\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])"}, {"sha": "f8ba978ba755da9b4660495c4ee0876055bddbc3", "filename": "gcc/config/rs6000/genfusion.pl", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842a05518982a130c8087d9ad6bdc457bec184e3/gcc%2Fconfig%2Frs6000%2Fgenfusion.pl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842a05518982a130c8087d9ad6bdc457bec184e3/gcc%2Fconfig%2Frs6000%2Fgenfusion.pl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fgenfusion.pl?ref=842a05518982a130c8087d9ad6bdc457bec184e3", "patch": "@@ -240,8 +240,52 @@ sub gen_2logical\n   }\n }\n \n+sub gen_addadd\n+{\n+    my ($kind, $vchr, $op, $type, $mode, $pred, $constraint);\n+    foreach $kind ('scalar','vector') {\n+      if ( $kind eq 'vector' ) {\n+\t  $vchr = \"v\";\n+\t  $op = \"vaddudm\";\n+\t  $type = \"fuse_vec\";\n+\t  $mode = \"V2DI\";\n+\t  $pred = \"altivec_register_operand\";\n+\t  $constraint = \"v\";\n+      } else {\n+\t  $vchr = \"\";\n+\t  $op = \"add\";\n+\t  $type = \"fuse_arithlog\";\n+\t  $mode = \"GPR\";\n+\t  $pred = \"gpc_reg_operand\";\n+\t  $constraint = \"r\";\n+      }\n+    my $c4 = \"${constraint},${constraint},${constraint},${constraint}\";\n+    print <<\"EOF\";\n+\n+;; ${op}-${op} fusion pattern generated by gen_addadd\n+(define_insn \"*fuse_${op}_${op}\"\n+  [(set (match_operand:${mode} 3 \"${pred}\" \"=0,1,&${constraint},${constraint}\")\n+        (plus:${mode}\n+           (plus:${mode} (match_operand:${mode} 0 \"${pred}\" \"${c4}\")\n+                     (match_operand:${mode} 1 \"${pred}\" \"%${c4}\"))\n+           (match_operand:${mode} 2 \"${pred}\" \"${c4}\")))\n+   (clobber (match_scratch:${mode} 4 \"=X,X,X,&${constraint}\"))]\n+  \"(TARGET_P10_FUSION && TARGET_P10_FUSION_2ADD)\"\n+  \"@\n+   ${op} %3,%1,%0\\\\;${op} %3,%3,%2\n+   ${op} %3,%1,%0\\\\;${op} %3,%3,%2\n+   ${op} %3,%1,%0\\\\;${op} %3,%3,%2\n+   ${op} %4,%1,%0\\\\;${op} %3,%4,%2\"\n+  [(set_attr \"type\" \"${type}\")\n+   (set_attr \"cost\" \"6\")\n+   (set_attr \"length\" \"8\")])\n+EOF\n+  }\n+}\n+\n gen_ld_cmpi_p10();\n gen_2logical();\n+gen_addadd;\n \n exit(0);\n "}, {"sha": "d46a91dd11bd16fb82b8965b79f97f4d311a52d5", "filename": "gcc/config/rs6000/rs6000-cpus.def", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842a05518982a130c8087d9ad6bdc457bec184e3/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842a05518982a130c8087d9ad6bdc457bec184e3/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def?ref=842a05518982a130c8087d9ad6bdc457bec184e3", "patch": "@@ -85,7 +85,8 @@\n \t\t\t\t | OTHER_POWER10_MASKS\t\t\t\\\n \t\t\t\t | OPTION_MASK_P10_FUSION\t\t\\\n \t\t\t\t | OPTION_MASK_P10_FUSION_LD_CMPI\t\\\n-\t\t\t\t | OPTION_MASK_P10_FUSION_2LOGICAL)\n+\t\t\t\t | OPTION_MASK_P10_FUSION_2LOGICAL\t\\\n+\t\t\t\t | OPTION_MASK_P10_FUSION_2ADD)\n \n /* Flags that need to be turned off if -mno-power9-vector.  */\n #define OTHER_P9_VECTOR_MASKS\t(OPTION_MASK_FLOAT128_HW\t\t\\\n@@ -135,6 +136,7 @@\n \t\t\t\t | OPTION_MASK_P10_FUSION\t\t\\\n \t\t\t\t | OPTION_MASK_P10_FUSION_LD_CMPI\t\\\n \t\t\t\t | OPTION_MASK_P10_FUSION_2LOGICAL\t\\\n+\t\t\t\t | OPTION_MASK_P10_FUSION_2ADD    \t\\\n \t\t\t\t | OPTION_MASK_HTM\t\t\t\\\n \t\t\t\t | OPTION_MASK_ISEL\t\t\t\\\n \t\t\t\t | OPTION_MASK_MFCRF\t\t\t\\"}, {"sha": "9f03256065ee17f04da838759bcacaf081577119", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842a05518982a130c8087d9ad6bdc457bec184e3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842a05518982a130c8087d9ad6bdc457bec184e3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=842a05518982a130c8087d9ad6bdc457bec184e3", "patch": "@@ -4465,16 +4465,22 @@ rs6000_option_override_internal (bool global_init_p)\n   if (TARGET_POWER10 && (rs6000_isa_flags_explicit & OPTION_MASK_MMA) == 0)\n     rs6000_isa_flags |= OPTION_MASK_MMA;\n \n-  if (TARGET_POWER10 && (rs6000_isa_flags_explicit & OPTION_MASK_P10_FUSION) == 0)\n+  if (TARGET_POWER10\n+      && (rs6000_isa_flags_explicit & OPTION_MASK_P10_FUSION) == 0)\n     rs6000_isa_flags |= OPTION_MASK_P10_FUSION;\n \n   if (TARGET_POWER10 &&\n       (rs6000_isa_flags_explicit & OPTION_MASK_P10_FUSION_LD_CMPI) == 0)\n     rs6000_isa_flags |= OPTION_MASK_P10_FUSION_LD_CMPI;\n \n-  if (TARGET_POWER10 && (rs6000_isa_flags_explicit & OPTION_MASK_P10_FUSION_2LOGICAL) == 0)\n+  if (TARGET_POWER10\n+      && (rs6000_isa_flags_explicit & OPTION_MASK_P10_FUSION_2LOGICAL) == 0)\n     rs6000_isa_flags |= OPTION_MASK_P10_FUSION_2LOGICAL;\n \n+  if (TARGET_POWER10\n+      && (rs6000_isa_flags_explicit & OPTION_MASK_P10_FUSION_2ADD) == 0)\n+    rs6000_isa_flags |= OPTION_MASK_P10_FUSION_2ADD;\n+\n   /* Turn off vector pair/mma options on non-power10 systems.  */\n   else if (!TARGET_POWER10 && TARGET_MMA)\n     {"}, {"sha": "e30dc04065126fdec6db895aaa1c51efe762dd59", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842a05518982a130c8087d9ad6bdc457bec184e3/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842a05518982a130c8087d9ad6bdc457bec184e3/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=842a05518982a130c8087d9ad6bdc457bec184e3", "patch": "@@ -502,6 +502,10 @@ mpower10-fusion-2logical\n Target Undocumented Mask(P10_FUSION_2LOGICAL) Var(rs6000_isa_flags)\n Fuse certain integer operations together for better performance on power10.\n \n+mpower10-fusion-2add\n+Target Undocumented Mask(P10_FUSION_2ADD) Var(rs6000_isa_flags)\n+Fuse certain add operations together for better performance on power10.\n+\n mcrypto\n Target Mask(CRYPTO) Var(rs6000_isa_flags)\n Use ISA 2.07 Category:Vector.AES and Category:Vector.SHA2 instructions."}, {"sha": "494ccdb5cdf0559c88e4c86a15d4be3e64a25a67", "filename": "gcc/testsuite/gcc.target/powerpc/fusion-p10-addadd.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842a05518982a130c8087d9ad6bdc457bec184e3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion-p10-addadd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842a05518982a130c8087d9ad6bdc457bec184e3/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion-p10-addadd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffusion-p10-addadd.c?ref=842a05518982a130c8087d9ad6bdc457bec184e3", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O3 -dp\" } */\n+\n+long addadd0(long a, long b, long c)\n+{\n+  return a+b+c;\n+}\n+long addadd1(long a, long b, long c, long *t)\n+{\n+  long r=a+b+c;\n+  *t = b;\n+  return r;\n+}\n+long addadd2(long s, long a, long b, long c)\n+{\n+  return b+c+a;\n+}\n+\n+typedef vector long vlong;\n+vlong vaddadd(vlong a, vlong b, vlong c)\n+{\n+  return a+b+c;\n+}\n+vlong vaddadd1(vlong a, vlong b, vlong c, vlong *t)\n+{\n+  vlong r=a+b+c;\n+  *t = b;\n+  return r;\n+}\n+vlong vaddadd2(vlong s, vlong a, vlong b, vlong c)\n+{\n+  return a+b+c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"fuse_add_add/0\"                1 } } */\n+/* { dg-final { scan-assembler-times \"fuse_add_add/1\"                1 } } */\n+/* { dg-final { scan-assembler-times \"fuse_add_add/2\"                1 } } */\n+/* { dg-final { scan-assembler-times \"fuse_vaddudm_vaddudm/0\"        1 } } */\n+/* { dg-final { scan-assembler-times \"fuse_vaddudm_vaddudm/1\"        1 } } */\n+/* { dg-final { scan-assembler-times \"fuse_vaddudm_vaddudm/2\"        1 } } */"}]}