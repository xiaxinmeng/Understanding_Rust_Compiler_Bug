{"sha": "adaa539557bea248e81b3972d10b3b04cfe1c600", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRhYTUzOTU1N2JlYTI0OGU4MWIzOTcyZDEwYjNiMDRjZmUxYzYwMA==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@gmail.com", "date": "2020-03-03T08:34:50Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gmail.com", "date": "2020-03-03T08:34:50Z"}, "message": "arc: Improve code gen for 64bit add/sub operations.\n\nEarly expand ADDDI3 and SUBDI3 for better code gen.\n\ngcc/\nxxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc.md (adddi3): Early expand the 64bit operation into\n\t32bit ops.\n\t(subdi3): Likewise.\n\t(adddi3_i): Remove pattern.\n\t(subdi3_i): Likewise.", "tree": {"sha": "5867cd68b10691dee7f8ec5e946f771e68366502", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5867cd68b10691dee7f8ec5e946f771e68366502"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adaa539557bea248e81b3972d10b3b04cfe1c600", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adaa539557bea248e81b3972d10b3b04cfe1c600", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adaa539557bea248e81b3972d10b3b04cfe1c600", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adaa539557bea248e81b3972d10b3b04cfe1c600/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93338040bd77e49d9fd1d98ed526a3b096300e3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93338040bd77e49d9fd1d98ed526a3b096300e3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93338040bd77e49d9fd1d98ed526a3b096300e3b"}], "stats": {"total": 124, "additions": 49, "deletions": 75}, "files": [{"sha": "383aa3811294ed3b9077dc46f1229f36fe6321dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adaa539557bea248e81b3972d10b3b04cfe1c600/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adaa539557bea248e81b3972d10b3b04cfe1c600/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=adaa539557bea248e81b3972d10b3b04cfe1c600", "patch": "@@ -1,3 +1,11 @@\n+2020-03-03  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.md (adddi3): Early expand the 64bit operation into\n+\t32bit ops.\n+\t(subdi3): Likewise.\n+\t(adddi3_i): Remove pattern.\n+\t(subdi3_i): Likewise.\n+\n 2020-03-03  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.md (eh_return): Add length info."}, {"sha": "a7f4056c7af6c51f09b596e75ea0d991f0358c5f", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 41, "deletions": 75, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adaa539557bea248e81b3972d10b3b04cfe1c600/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adaa539557bea248e81b3972d10b3b04cfe1c600/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=adaa539557bea248e81b3972d10b3b04cfe1c600", "patch": "@@ -2746,34 +2746,20 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n   \")\n \n (define_expand \"adddi3\"\n-  [(parallel [(set (match_operand:DI 0 \"dest_reg_operand\" \"\")\n-\t\t   (plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t\t    (match_operand:DI 2 \"nonmemory_operand\" \"\")))\n-\t      (clobber (reg:CC CC_REG))])]\n-  \"\"\n-{})\n-\n-; This assumes that there can be no strictly partial overlap between\n-; operands[1] and operands[2].\n-(define_insn_and_split \"*adddi3_i\"\n-  [(set (match_operand:DI 0 \"dest_reg_operand\" \"=&w,w,w\")\n-\t(plus:DI (match_operand:DI 1 \"register_operand\" \"%c,0,c\")\n-\t\t (match_operand:DI 2 \"nonmemory_operand\" \"ci,ci,!i\")))\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n+\t\t (match_operand:DI 2 \"nonmemory_operand\" \"\")))\n    (clobber (reg:CC CC_REG))]\n   \"\"\n-  \"#\"\n-  \"reload_completed\"\n-  [(const_int 0)]\n-{\n-  int hi = !TARGET_BIG_ENDIAN;\n-  int lo = !hi;\n-  rtx l0 = operand_subword (operands[0], lo, 0, DImode);\n-  rtx h0 = operand_subword (operands[0], hi, 0, DImode);\n-  rtx l1 = operand_subword (operands[1], lo, 0, DImode);\n-  rtx h1 = operand_subword (operands[1], hi, 0, DImode);\n-  rtx l2 = operand_subword (operands[2], lo, 0, DImode);\n-  rtx h2 = operand_subword (operands[2], hi, 0, DImode);\n-\n+  \"\n+  rtx l0 = gen_lowpart (SImode, operands[0]);\n+  rtx h0 = gen_highpart (SImode, operands[0]);\n+  rtx l1 = gen_lowpart (SImode, operands[1]);\n+  rtx h1 = gen_highpart (SImode, operands[1]);\n+  rtx l2 = simplify_gen_subreg (SImode, operands[2], DImode,\n+                                subreg_lowpart_offset (SImode, DImode));\n+  rtx h2 = simplify_gen_subreg (SImode, operands[2], DImode,\n+                                subreg_highpart_offset (SImode, DImode));\n \n   if (l2 == const0_rtx)\n     {\n@@ -2784,13 +2770,6 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n \temit_move_insn (l0, l1);\n       DONE;\n     }\n-  if (CONST_INT_P (operands[2]) && INTVAL (operands[2]) < 0\n-      && INTVAL (operands[2]) >= -0x7fffffff)\n-    {\n-      emit_insn (gen_subdi3_i (operands[0], operands[1],\n-\t\t GEN_INT (-INTVAL (operands[2]))));\n-      DONE;\n-    }\n   if (rtx_equal_p (l0, h1))\n     {\n       if (h2 != const0_rtx)\n@@ -2804,28 +2783,32 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n \t   gen_rtx_LTU (VOIDmode, gen_rtx_REG (CC_Cmode, CC_REG), GEN_INT (0)),\n \t   gen_rtx_SET (h0, plus_constant (SImode, h0, 1))));\n       DONE;\n-    }\n+      }\n   emit_insn (gen_add_f (l0, l1, l2));\n   emit_insn (gen_adc (h0, h1, h2));\n   DONE;\n-}\n-  [(set_attr \"cond\" \"clob\")\n-   (set_attr \"type\" \"binary\")\n-   (set_attr \"length\" \"16,16,20\")])\n+\")\n \n (define_insn \"add_f\"\n   [(set (reg:CC_C CC_REG)\n \t(compare:CC_C\n-\t  (plus:SI (match_operand:SI 1 \"register_operand\" \"c,0,c\")\n-\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"cL,I,cCal\"))\n+\t  (plus:SI (match_operand:SI 1 \"nonmemory_operand\" \"%r,L,0,I,Cal,r\")\n+\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"rL,r,I,0,  r,rCal\"))\n \t  (match_dup 1)))\n-   (set (match_operand:SI 0 \"dest_reg_operand\" \"=w,Rcw,w\")\n+   (set (match_operand:SI 0 \"dest_reg_operand\" \"=r,r,r,r,r,r\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"\"\n-  \"add.f %0,%1,%2\"\n+  \"register_operand (operands[1], SImode)\n+   || register_operand (operands[2], SImode)\"\n+  \"@\n+  add.f\\\\t%0,%1,%2\n+  add.f\\\\t%0,%2,%1\n+  add.f\\\\t%0,%1,%2\n+  add.f\\\\t%0,%2,%1\n+  add.f\\\\t%0,%2,%1\n+  add.f\\\\t%0,%1,%2\"\n   [(set_attr \"cond\" \"set\")\n    (set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"4,4,8\")])\n+   (set_attr \"length\" \"4,4,4,4,8,8\")])\n \n (define_insn \"*add_f_2\"\n   [(set (reg:CC_C CC_REG)\n@@ -2980,35 +2963,20 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n   ])\n \n (define_expand \"subdi3\"\n-  [(parallel [(set (match_operand:DI 0 \"dest_reg_operand\" \"\")\n-\t\t   (minus:DI (match_operand:DI 1 \"nonmemory_operand\" \"\")\n-\t\t\t     (match_operand:DI 2 \"nonmemory_operand\" \"\")))\n-\t      (clobber (reg:CC CC_REG))])]\n-  \"\"\n-{\n-  if (!register_operand (operands[2], DImode))\n-    operands[1] = force_reg (DImode, operands[1]);\n-})\n-\n-(define_insn_and_split \"subdi3_i\"\n-  [(set (match_operand:DI 0 \"dest_reg_operand\" \"=&w,w,w,w,w\")\n-\t(minus:DI (match_operand:DI 1 \"nonmemory_operand\" \"ci,0,ci,c,!i\")\n-\t\t  (match_operand:DI 2 \"nonmemory_operand\" \"ci,ci,0,!i,c\")))\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(minus:DI (match_operand:DI 1 \"register_operand\" \"\")\n+\t\t  (match_operand:DI 2 \"nonmemory_operand\" \"\")))\n    (clobber (reg:CC CC_REG))]\n-  \"register_operand (operands[1], DImode)\n-   || register_operand (operands[2], DImode)\"\n-  \"#\"\n-  \"reload_completed\"\n-  [(const_int 0)]\n-{\n-  int hi = !TARGET_BIG_ENDIAN;\n-  int lo = !hi;\n-  rtx l0 = operand_subword (operands[0], lo, 0, DImode);\n-  rtx h0 = operand_subword (operands[0], hi, 0, DImode);\n-  rtx l1 = operand_subword (operands[1], lo, 0, DImode);\n-  rtx h1 = operand_subword (operands[1], hi, 0, DImode);\n-  rtx l2 = operand_subword (operands[2], lo, 0, DImode);\n-  rtx h2 = operand_subword (operands[2], hi, 0, DImode);\n+  \"\"\n+  \"\n+  rtx l0 = gen_lowpart (SImode, operands[0]);\n+  rtx h0 = gen_highpart (SImode, operands[0]);\n+  rtx l1 = gen_lowpart (SImode, operands[1]);\n+  rtx h1 = gen_highpart (SImode, operands[1]);\n+  rtx l2 = simplify_gen_subreg (SImode, operands[2], DImode,\n+                                subreg_lowpart_offset (SImode, DImode));\n+  rtx h2 = simplify_gen_subreg (SImode, operands[2], DImode,\n+                                subreg_highpart_offset (SImode, DImode));\n \n   if (rtx_equal_p (l0, h1) || rtx_equal_p (l0, h2))\n     {\n@@ -3026,9 +2994,7 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n   emit_insn (gen_sub_f (l0, l1, l2));\n   emit_insn (gen_sbc (h0, h1, h2, gen_rtx_REG (CCmode, CC_REG)));\n   DONE;\n-}\n-  [(set_attr \"cond\" \"clob\")\n-   (set_attr \"length\" \"16,16,16,20,20\")])\n+  \")\n \n (define_insn \"*sbc_0\"\n   [(set (match_operand:SI 0 \"dest_reg_operand\" \"=w\")"}]}