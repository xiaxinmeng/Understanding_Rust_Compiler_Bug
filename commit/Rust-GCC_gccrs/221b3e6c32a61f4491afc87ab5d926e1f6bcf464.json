{"sha": "221b3e6c32a61f4491afc87ab5d926e1f6bcf464", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIxYjNlNmMzMmE2MWY0NDkxYWZjODdhYjVkOTI2ZTFmNmJjZjQ2NA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-07-12T20:29:15Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-07-12T20:29:15Z"}, "message": "escape: Add escape notes to export data.\n\n    \n    Reviewed-on: https://go-review.googlesource.com/22375\n\nFrom-SVN: r238266", "tree": {"sha": "b123a9dad3c5421e8200b57f7a379cf06011320c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b123a9dad3c5421e8200b57f7a379cf06011320c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/221b3e6c32a61f4491afc87ab5d926e1f6bcf464", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/221b3e6c32a61f4491afc87ab5d926e1f6bcf464", "html_url": "https://github.com/Rust-GCC/gccrs/commit/221b3e6c32a61f4491afc87ab5d926e1f6bcf464", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/221b3e6c32a61f4491afc87ab5d926e1f6bcf464/comments", "author": null, "committer": null, "parents": [{"sha": "1a58b548f8e59292685497fddf5d58c7af28ea77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a58b548f8e59292685497fddf5d58c7af28ea77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a58b548f8e59292685497fddf5d58c7af28ea77"}], "stats": {"total": 80, "additions": 75, "deletions": 5}, "files": [{"sha": "7798423e8332bd1f4123469ff485bad5de3c92bc", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/221b3e6c32a61f4491afc87ab5d926e1f6bcf464/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/221b3e6c32a61f4491afc87ab5d926e1f6bcf464/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=221b3e6c32a61f4491afc87ab5d926e1f6bcf464", "patch": "@@ -1,4 +1,4 @@\n-c8fdad389ce6f439a02fb654d231053b47ff4e02\n+5ea5c078829ae83bccb598772fff7c1a04e23e65\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "e07246e7799341ca661629e9028647a3ce99e68f", "filename": "gcc/go/gofrontend/export.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/221b3e6c32a61f4491afc87ab5d926e1f6bcf464/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/221b3e6c32a61f4491afc87ab5d926e1f6bcf464/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.cc?ref=221b3e6c32a61f4491afc87ab5d926e1f6bcf464", "patch": "@@ -436,6 +436,21 @@ Export::write_type(const Type* type)\n     this->type_refs_[type] = index;\n }\n \n+// Export escape note.\n+\n+void\n+Export::write_escape(std::string* note)\n+{\n+  if (note != NULL && *note != \"esc:0x0\")\n+    {\n+      this->write_c_string(\" \");\n+      char buf[50];\n+      go_assert(note->find(\"esc:\") != std::string::npos);\n+      snprintf(buf, sizeof buf, \"<%s>\", note->c_str());\n+      this->write_c_string(buf);\n+    }\n+}\n+\n // Add the builtin types to the export table.\n \n void"}, {"sha": "c3972d802321bcc04185d804be4d4b694cc6d1dc", "filename": "gcc/go/gofrontend/export.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/221b3e6c32a61f4491afc87ab5d926e1f6bcf464/gcc%2Fgo%2Fgofrontend%2Fexport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/221b3e6c32a61f4491afc87ab5d926e1f6bcf464/gcc%2Fgo%2Fgofrontend%2Fexport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.h?ref=221b3e6c32a61f4491afc87ab5d926e1f6bcf464", "patch": "@@ -161,6 +161,11 @@ class Export : public String_dump\n   void\n   write_type(const Type*);\n \n+  // Write the escape note to the export stream.  If NOTE is NULL, write\n+  // nothing.\n+  void\n+  write_escape(std::string* note);\n+\n  private:\n   Export(const Export&);\n   Export& operator=(const Export&);"}, {"sha": "37760a75e6cde02417a7846a7a9168dd59cecfa8", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/221b3e6c32a61f4491afc87ab5d926e1f6bcf464/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/221b3e6c32a61f4491afc87ab5d926e1f6bcf464/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=221b3e6c32a61f4491afc87ab5d926e1f6bcf464", "patch": "@@ -4794,6 +4794,7 @@ Function::export_func_with_type(Export* exp, const std::string& name,\n       exp->write_c_string(\"(\");\n       const Typed_identifier* receiver = fntype->receiver();\n       exp->write_name(receiver->name());\n+      exp->write_escape(receiver->note());\n       exp->write_c_string(\" \");\n       exp->write_type(receiver->type());\n       exp->write_c_string(\") \");\n@@ -4817,6 +4818,7 @@ Function::export_func_with_type(Export* exp, const std::string& name,\n \t  else\n \t    exp->write_c_string(\", \");\n \t  exp->write_name(p->name());\n+\t  exp->write_escape(p->note());\n \t  exp->write_c_string(\" \");\n \t  if (!is_varargs || p + 1 != parameters->end())\n \t    exp->write_type(p->type());\n@@ -4850,6 +4852,7 @@ Function::export_func_with_type(Export* exp, const std::string& name,\n \t      else\n \t\texp->write_c_string(\", \");\n \t      exp->write_name(p->name());\n+\t      exp->write_escape(p->note());\n \t      exp->write_c_string(\" \");\n \t      exp->write_type(p->type());\n \t    }\n@@ -4875,9 +4878,11 @@ Function::import_func(Import* imp, std::string* pname,\n     {\n       imp->require_c_string(\"(\");\n       std::string name = imp->read_name();\n+      std::string escape_note = imp->read_escape();\n       imp->require_c_string(\" \");\n       Type* rtype = imp->read_type();\n       *preceiver = new Typed_identifier(name, rtype, imp->location());\n+      (*preceiver)->set_note(escape_note);\n       imp->require_c_string(\") \");\n     }\n \n@@ -4894,6 +4899,7 @@ Function::import_func(Import* imp, std::string* pname,\n       while (true)\n \t{\n \t  std::string name = imp->read_name();\n+\t  std::string escape_note = imp->read_escape();\n \t  imp->require_c_string(\" \");\n \n \t  if (imp->match_c_string(\"...\"))\n@@ -4905,8 +4911,9 @@ Function::import_func(Import* imp, std::string* pname,\n \t  Type* ptype = imp->read_type();\n \t  if (*is_varargs)\n \t    ptype = Type::make_array_type(ptype, NULL);\n-\t  parameters->push_back(Typed_identifier(name, ptype,\n-\t\t\t\t\t\t imp->location()));\n+\t  Typed_identifier t = Typed_identifier(name, ptype, imp->location());\n+\t  t.set_note(escape_note);\n+\t  parameters->push_back(t);\n \t  if (imp->peek_char() != ',')\n \t    break;\n \t  go_assert(!*is_varargs);\n@@ -4934,10 +4941,13 @@ Function::import_func(Import* imp, std::string* pname,\n \t  while (true)\n \t    {\n \t      std::string name = imp->read_name();\n+\t      std::string note = imp->read_escape();\n \t      imp->require_c_string(\" \");\n \t      Type* rtype = imp->read_type();\n-\t      results->push_back(Typed_identifier(name, rtype,\n-\t\t\t\t\t\t  imp->location()));\n+\t      Typed_identifier t = Typed_identifier(name, rtype,\n+\t\t\t\t\t\t    imp->location());\n+\t      t.set_note(note);\n+\t      results->push_back(t);\n \t      if (imp->peek_char() != ',')\n \t\tbreak;\n \t      imp->require_c_string(\", \");"}, {"sha": "b90ea83d41a84c56e7df6b97d58e12233a57291f", "filename": "gcc/go/gofrontend/import.cc", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/221b3e6c32a61f4491afc87ab5d926e1f6bcf464/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/221b3e6c32a61f4491afc87ab5d926e1f6bcf464/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.cc?ref=221b3e6c32a61f4491afc87ab5d926e1f6bcf464", "patch": "@@ -762,6 +762,42 @@ Import::read_type()\n   return type;\n }\n \n+// Read an escape note.\n+\n+std::string\n+Import::read_escape()\n+{\n+  if (this->match_c_string(\" <esc:\"))\n+    {\n+      Stream* stream = this->stream_;\n+      this->require_c_string(\" <esc:\");\n+\n+      std::string escape = \"esc:\";\n+      int c;\n+      while (true)\n+\t{\n+\t  c = stream->get_char();\n+\t  if (c != 'x' && !ISXDIGIT(c))\n+\t    break;\n+\t  escape += c;\n+\t}\n+\n+      if (c != '>')\n+\t{\n+\t  error_at(this->location(),\n+\t\t   \"error in import data at %d: expect %< %> or %<>%>, got %c\",\n+\t\t   stream->pos(), c);\n+\t  stream->set_saw_error();\n+\t  stream->advance(1);\n+\t  escape = Escape_note::make_tag(Node::ESCAPE_UNKNOWN);\n+\t}\n+      return escape;\n+    }\n+  else\n+    return Escape_note::make_tag(Node::ESCAPE_UNKNOWN);\n+}\n+\n+\n // Register the builtin types.\n \n void"}, {"sha": "9dbdaf77b8851562e706d8a55a0bb4de2fdbbb60", "filename": "gcc/go/gofrontend/import.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/221b3e6c32a61f4491afc87ab5d926e1f6bcf464/gcc%2Fgo%2Fgofrontend%2Fimport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/221b3e6c32a61f4491afc87ab5d926e1f6bcf464/gcc%2Fgo%2Fgofrontend%2Fimport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.h?ref=221b3e6c32a61f4491afc87ab5d926e1f6bcf464", "patch": "@@ -197,6 +197,10 @@ class Import\n   Type*\n   read_type();\n \n+  // Read an escape note.\n+  std::string\n+  read_escape();\n+\n  private:\n   static Stream*\n   try_package_in_directory(const std::string&, Location);"}]}