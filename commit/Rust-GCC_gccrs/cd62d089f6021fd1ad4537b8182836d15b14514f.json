{"sha": "cd62d089f6021fd1ad4537b8182836d15b14514f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q2MmQwODlmNjAyMWZkMWFkNDUzN2I4MTgyODM2ZDE1YjE0NTE0Zg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-05-28T00:16:38Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-05-28T00:16:38Z"}, "message": "Daily bump.", "tree": {"sha": "0e2d976f72b93323505dc4dfe2e1e467c7c0d68c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e2d976f72b93323505dc4dfe2e1e467c7c0d68c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd62d089f6021fd1ad4537b8182836d15b14514f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd62d089f6021fd1ad4537b8182836d15b14514f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd62d089f6021fd1ad4537b8182836d15b14514f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd62d089f6021fd1ad4537b8182836d15b14514f/comments", "author": null, "committer": null, "parents": [{"sha": "4774807e6e535597676473051aa00aabac075327", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4774807e6e535597676473051aa00aabac075327", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4774807e6e535597676473051aa00aabac075327"}], "stats": {"total": 271, "additions": 270, "deletions": 1}, "files": [{"sha": "290e374e4e45e8229976bc083e825069a5f5566e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd62d089f6021fd1ad4537b8182836d15b14514f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd62d089f6021fd1ad4537b8182836d15b14514f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd62d089f6021fd1ad4537b8182836d15b14514f", "patch": "@@ -1,3 +1,118 @@\n+2021-05-27  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/mmx.md (addv2sf3): Do not call\n+\tix86_fixup_binary_operands_no_copy.\n+\t(subv2sf3): Ditto.\n+\t(mulv2sf3): Ditto.\n+\t(<smaxmin:code>v2sf3): Ditto.\n+\t(<plusminus:insn><MMXMODEI:mode>3): Ditto.\n+\t(<plusminus:insn><VI_32:mode>3): Remove expander.\n+\t(<plusminus:insn><VI_32:mode>3): Rename from\n+\t\"*<plusminus:insn><VI_32:mode>3\".\n+\t(mulv4hi): Do not call ix86_fixup_binary_operands_no_copy.\n+\t(mulv2hi3): Remove expander.\n+\t(mulv2hi3): Rename from *mulv2hi3.\n+\t(<s>mulv2hi3_highpart): Remove expander.\n+\t(<s>mulv2hi3_highpart): Rename from *<s>mulv2hi3_highpart.\n+\t(<smaxmin:code><MMXMODE14:mode>3): Rename from\n+\t\"*mmx_<smaxmin:code><MMXMODE14:mode>3\".\n+\t(<smaxmin:code><SMAXMIN_MMXMODEI:mode>3): Remove expander.\n+\t(SMAXMIN_MMXMODEI): Remove mode iterator.\n+\t(<smaxmin:code>v4hi3): New expander.\n+\t(<smaxmin:code>v4qi3): Rename from *<smaxmin:code>v4qi3.\n+\t(<smaxmin:code>v2hi3): Rename from *<smaxmin:code>v2hi3.\n+\t(<smaxmin:code><SMAXMIN_VI_32:mode>3): Remove expander.\n+\t(SMAXMIN_VI_32): Remove mode iterator.\n+\t(<umaxmin:code><MMXMODE24:mode>3): Rename from\n+\t\"*mmx_<umaxmin:code><MMXMODE24:mode>3\".\n+\t(<umaxmin:code><UMAXMIN_MMXMODEI:mode>3): Remove expander.\n+\t(UMAXMIN_MMXMODEI): Remove mode iterator.\n+\t(<umaxmin:code>v8qi3): New expander.\n+\t(<umaxmin:code>v4qi3): Rename from *<umaxmin:code>v4qi3.\n+\t(<umaxmin:code>v2hi3): Rename from *<umaxmin:code>v2hi3.\n+\t(<umaxmin:code><SMAXMIN_VI_32:mode>3): Remove expander.\n+\t(UMAXMIN_VI_32): Remove mode iterator.\n+\t(<any_shift:insn>v2hi3): Remove expander.\n+\t(<any_shift:insn>v2hi3): Rename from *<any_shift:insn>v2hi3.\n+\t(<any_logic:code><MMXMODEI:mode>3): Do not call\n+\tix86_fixup_binary_operands_no_copy.\n+\t(<any_logic:code><VI_32:mode>3): Remove expander.\n+\t(<any_logic:code><VI_32:mode>3): Rename from\n+\t\"*<any_logic:code><VI_32:mode>3\".\n+\t(uavg<mode>3_ceil): Do not call ix86_fixup_binary_operands_no_copy.\n+\t* config/i386/sse.md (div<VF2:mode>3): Do not call\n+\tix86_fixup_binary_operands_no_copy.\n+\t(div<VF1:mode>3): Ditto.\n+\t(<maxmin:code><VI8_AVX2_AVX512F:mode>3): Ditto.\n+\t(smulhrsv4hi3): Ditto.\n+\t(smulhrsv2hi3): Ditto.\n+\n+2021-05-27  Martin Sebor  <msebor@redhat.com>\n+\n+\t* ggc.h (gt_ggc_mx): Add overloads for all integers.\n+\t(gt_pch_nx):  Same.\n+\t* hash-map.h (class hash_map): Add pch_nx_helper overloads for all\n+\tintegers.\n+\t(hash_map::operator==): New function.\n+\n+2021-05-27  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100637\n+\t* config/i386/i386-expand.c (ix86_expand_int_sse_cmp):\n+\tFor TARGET_XOP bypass SSE comparisons for all supported vector modes.\n+\t* config/i386/mmx.md (*xop_maskcmp<MMXMODEI:mode>3): New insn pattern.\n+\t(*xop_maskcmp<VI_32:mode>3): Ditto.\n+\t(*xop_maskcmp_uns<MMXMODEI:mode>3): Ditto.\n+\t(*xop_maskcmp_uns<VI_32:mode>3): Ditto.\n+\n+2021-05-27  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/100767\n+\t* config/arm/arm.c (arm_configure_build_target): Remove parameter\n+\topts_set, directly check opts parameters for being non-null.\n+\t(arm_option_restore): Update call to arm_configure_build_target.\n+\t(arm_option_override): Likewise.\n+\t(arm_can_inline_p): Likewise.\n+\t(arm_valid_target_attribute_tree): Likewise.\n+\t* config/arm/arm-c.c (arm_pragma_target_parse): Likewise.\n+\t* config/arm/arm-protos.h (arm_configure_build_target): Adjust\n+\tprototype.\n+\n+2021-05-27  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* vr-values.c (simplify_conversion_using_ranges): Use\n+\tget_range_query instead of get_global_range_query.\n+\n+2021-05-27  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range.cc (get_range_global): Move to value-query.cc.\n+\t(gimple_range_global): Same.\n+\t(get_global_range_query): Same.\n+\t(global_range_query::range_of_expr): Same.\n+\t* gimple-range.h (class global_range_query): Move to\n+\tvalue-query.h.\n+\t(gimple_range_global): Same.\n+\t* tree-ssanames.c (get_range_info): Move to value-query.cc.\n+\t(get_ptr_nonnull): Same.\n+\t* tree-ssanames.h (get_range_info): Remove.\n+\t(get_ptr_nonnull): Remove.\n+\t* value-query.cc (get_ssa_name_range_info): Move from\n+\ttree-ssanames.c.\n+\t(get_ssa_name_ptr_info_nonnull): Same.\n+\t(get_range_global): Move from gimple-range.cc.\n+\t(gimple_range_global): Same.\n+\t(get_global_range_query): Same.\n+\t(global_range_query::range_of_expr): Same.\n+\t* value-query.h (class global_range_query): Move from\n+\tgimple-range.h.\n+\t(gimple_range_global): Same.\n+\n+2021-05-27  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100637\n+\t* config/i386/mmx.md (uavgv4qi3_ceil): New insn pattern.\n+\t(uavgv2hi3_ceil): Ditto.\n+\n 2021-05-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR c/100653"}, {"sha": "2fcc1005110c6fddec2ca4d4bd477061bdc7ac5f", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd62d089f6021fd1ad4537b8182836d15b14514f/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd62d089f6021fd1ad4537b8182836d15b14514f/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=cd62d089f6021fd1ad4537b8182836d15b14514f", "patch": "@@ -1 +1 @@\n-20210527\n+20210528"}, {"sha": "d4aa5450ca5e9de12d3d2d664f54f3d193758120", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd62d089f6021fd1ad4537b8182836d15b14514f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd62d089f6021fd1ad4537b8182836d15b14514f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cd62d089f6021fd1ad4537b8182836d15b14514f", "patch": "@@ -1,3 +1,47 @@\n+2021-05-27  Matthias Kretz  <kretz@kde.org>\n+\n+\tPR c++/100716\n+\t* error.c (dump_template_bindings): Include code to print\n+\t\"[with\" and ']', conditional on whether anything is printed at\n+\tall. This is tied to whether a semicolon is needed to separate\n+\tmultiple template parameters. If the template argument repeats\n+\tthe template parameter (T = T), then skip the parameter.\n+\t(dump_substitution): Moved code to print \"[with\" and ']' to\n+\tdump_template_bindings.\n+\t(dump_function_decl): Partial revert of PR50828, which masked\n+\tTFF_TEMPLATE_NAME for all of dump_function_decl. Now\n+\tTFF_TEMPLATE_NAME is masked for the scope of the function and\n+\tonly carries through to dump_function_name.\n+\t(dump_function_name): Avoid calling dump_template_parms if\n+\tTFF_TEMPLATE_NAME is set.\n+\n+2021-05-27  Matthias Kretz  <kretz@kde.org>\n+\n+\tPR c++/100763\n+\t* error.c: Call dump_scope when printing a typedef.\n+\n+2021-05-27  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/99893\n+\t* tree.c (cp_walk_subtrees) <case STATIC_ASSERT>: New case.\n+\n+2021-05-27  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/86355\n+\t* pt.c (use_pack_expansion_extra_args_p): Don't compare\n+\targs from the same argument pack.\n+\n+2021-05-27  Patrick Palka  <ppalka@redhat.com>\n+\n+\tDR 1315\n+\tPR c++/67593\n+\tPR c++/96555\n+\t* pt.c (process_partial_specialization): Don't error on a\n+\tnon-simple non-type template argument that involves template\n+\tparameters.\n+\t(for_each_template_parm_r): Don't walk TRAIT_EXPR, PLUS_EXPR,\n+\tMULT_EXPR, or SCOPE_REF when include_nondeduced_p is false.\n+\n 2021-05-26  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/100502"}, {"sha": "d26110140d9617887279937f57aef01df3942f98", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd62d089f6021fd1ad4537b8182836d15b14514f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd62d089f6021fd1ad4537b8182836d15b14514f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=cd62d089f6021fd1ad4537b8182836d15b14514f", "patch": "@@ -1,3 +1,16 @@\n+2021-05-27  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/100602\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_size): Use CLASS data\n+\tattributes for CLASS arrays for generation of runtime error.\n+\n+2021-05-27  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/100656\n+\t* trans-array.c (gfc_conv_ss_startstride): Do not call check for\n+\tpresence of a dummy argument when a symbol actually refers to a\n+\tnon-dummy.\n+\n 2021-05-25  Tobias Burnus  <tobias@codesourcery.com>\n \t    Johannes Nendwich  <a08727063@unet.univie.ac.at>\n "}, {"sha": "b6ec83ca8fa59d77452621c0cbdb14b2a9f44f5d", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd62d089f6021fd1ad4537b8182836d15b14514f/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd62d089f6021fd1ad4537b8182836d15b14514f/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=cd62d089f6021fd1ad4537b8182836d15b14514f", "patch": "@@ -1,3 +1,7 @@\n+2021-05-27  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* gccgo.texi (Function Names): Don't HTML quote ampersand.\n+\n 2021-05-24  Ian Lance Taylor  <iant@golang.org>\n \n \tPR go/100537"}, {"sha": "27e5f67e1b3f34cf21887aed0b7a3d36590bbd24", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd62d089f6021fd1ad4537b8182836d15b14514f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd62d089f6021fd1ad4537b8182836d15b14514f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cd62d089f6021fd1ad4537b8182836d15b14514f", "patch": "@@ -1,3 +1,56 @@\n+2021-05-27  Matthias Kretz  <kretz@kde.org>\n+\n+\tPR c++/100716\n+\t* g++.dg/diagnostic/pr100716.C: New test.\n+\t* g++.dg/diagnostic/pr100716-1.C: Same test with\n+\t-fno-pretty-templates.\n+\n+2021-05-27  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/99893\n+\t* g++.dg/cpp0x/static_assert17.C: New test.\n+\n+2021-05-27  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/86355\n+\t* g++.dg/cpp0x/alias-decl-variadic2.C: New test.\n+\n+2021-05-27  Patrick Palka  <ppalka@redhat.com>\n+\n+\tDR 1315\n+\tPR c++/67593\n+\tPR c++/96555\n+\t* g++.dg/template/partial16.C: New test.\n+\t* g++.dg/template/partial17.C: New test.\n+\t* g++.dg/template/partial18.C: New test.\n+\t* g++.dg/template/partial19.C: New test.\n+\t* g++.dg/cpp0x/pr68724.C: Adjust expected diagnostic for\n+\till-formed partial specialization.\n+\t* g++.dg/cpp0x/variadic38.C: Likewise.\n+\t* g++.dg/cpp1z/pr81016.C: Likewise.\n+\t* g++.dg/template/partial5.C: Likewise.\n+\t* g++.old-deja/g++.pt/spec21.C: Likewise.\n+\n+2021-05-27  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/100602\n+\t* gfortran.dg/pointer_check_14.f90: New test.\n+\n+2021-05-27  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/100656\n+\t* gfortran.dg/bounds_check_22.f90: New test.\n+\n+2021-05-27  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/Wstringop-overflow-55.c: Pass -fno-ipa-icf.\n+\n+2021-05-27  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100637\n+\t* gcc.target/i386/pr100637-3b.c (avgu): New test.\n+\t* gcc.target/i386/pr100637-3w.c (avgu): Ditto.\n+\n 2021-05-26  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/100502"}, {"sha": "5f6adc50eacd050012ef2981170e272e2b4e1956", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd62d089f6021fd1ad4537b8182836d15b14514f/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd62d089f6021fd1ad4537b8182836d15b14514f/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=cd62d089f6021fd1ad4537b8182836d15b14514f", "patch": "@@ -1,3 +1,43 @@\n+2021-05-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/lib/libgomp.exp (check_effective_target_openacc_cuda,\n+\tcheck_effective_target_openacc_cublas,\n+\tcheck_effective_target_openacc_cudart): New.\n+\t* testsuite/libgomp.oacc-fortran/host_data-4.f90: Require effective\n+\ttarget openacc_cublas.\n+\t* testsuite/libgomp.oacc-fortran/host_data-2.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/host_data-3.f: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-91.c: Require effective\n+\ttarget openacc_cuda.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-70.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-90.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-75.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-69.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-74.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-81.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-72.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-85.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/pr87835.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-82.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-73.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-83.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-78.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-76.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-84.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-79.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/host_data-1.c: Require effective\n+\ttargets openacc_cublas and openacc_cudart.\n+\t* testsuite/libgomp.oacc-c-c++-common/context-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/context-2.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/context-3.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/context-4.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/acc_get_property-nvptx.c:\n+\tRequire effective target openacc_cudart.\n+\t* testsuite/libgomp.oacc-c-c++-common/asyncwait-1.c: Add -DUSE_CUDA_H\n+\tfor effective target openacc_cuda and add && defined USE_CUDA_H to\n+\tpreprocessor conditionals.  Guard -lcuda also on openacc_cuda\n+\teffective target.\n+\n 2021-05-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libgomp/100573"}]}