{"sha": "036a2b7a60782739d05a48d9968cdb8e2129b683", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM2YTJiN2E2MDc4MjczOWQwNWE0OGQ5OTY4Y2RiOGUyMTI5YjY4Mw==", "commit": {"author": {"name": "Bob Wilson", "email": "bob.wilson@acm.org", "date": "2006-11-17T23:10:48Z"}, "committer": {"name": "Bob Wilson", "email": "bwilson@gcc.gnu.org", "date": "2006-11-17T23:10:48Z"}, "message": "predicates.md (addsubx_operand): New.\n\n\t* config/xtensa/predicates.md (addsubx_operand): New.\n\t* config/xtensa/xtensa.c (xtensa_emit_branch): New.\n\t(xtensa_emit_bit_branch): New.\n\t(xtensa_emit_movcc): New.\n\t* config/xtensa/xtensa.md (any_minmax): New code macro.\n\t(minmax): New code attribute.\n\t(any_cond, any_scc, any_scc_sf): New code macros.\n\t(*addx2, *addx4, *addx8): Delete.\n\t(*addx): New.\n\t(*subx2, *subx4, *subx8): Delete.\n\t(*subx): New.\n\t(sminsi3, uminsi3, smaxsi3, umaxsi3): Use any_minmax macro.\n\t(beq, bne, bgt, bge, blt, ble, bgtu, bgeu, bltu, bleu): Use any_cond.\n\t(*btrue, *bfalse, *ubtrue, *ubfalse): Use xtensa_emit_branch.\n\t(*bittrue, *bitfalse): Use xtensa_emit_bit_branch.\n\t(seq, sne, sgt, sge, slt, sle): Use any_scc macro.\n\t(movsicc_internal0, movsicc_internal1): Use xtensa_emit_movcc.\n\t(movsfcc_internal0, movsfcc_internal1): Likewise.\n\t(seq_sf, slt_sf, sle_sf): Use any_scc_sf macro.\n\t* config/xtensa/xtensa-protos.h: (xtensa_emit_branch): New.\n\t(xtensa_emit_bit_branch): New.\n\t(xtensa_emit_movcc): New.\n\t(function_arg_boundary): Add missing prototype.\n\nFrom-SVN: r118952", "tree": {"sha": "3a55a1f58dffd3be999da840dc700e350fe79059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a55a1f58dffd3be999da840dc700e350fe79059"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/036a2b7a60782739d05a48d9968cdb8e2129b683", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/036a2b7a60782739d05a48d9968cdb8e2129b683", "html_url": "https://github.com/Rust-GCC/gccrs/commit/036a2b7a60782739d05a48d9968cdb8e2129b683", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/036a2b7a60782739d05a48d9968cdb8e2129b683/comments", "author": null, "committer": null, "parents": [{"sha": "3e9801438471b4fe815566ac103a330998b95940", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e9801438471b4fe815566ac103a330998b95940", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e9801438471b4fe815566ac103a330998b95940"}], "stats": {"total": 719, "additions": 189, "deletions": 530}, "files": [{"sha": "d2fbac95742c3b866e5c5c4b0e27388719aec4a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036a2b7a60782739d05a48d9968cdb8e2129b683/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036a2b7a60782739d05a48d9968cdb8e2129b683/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=036a2b7a60782739d05a48d9968cdb8e2129b683", "patch": "@@ -1,3 +1,29 @@\n+2006-11-17  Bob Wilson  <bob.wilson@acm.org>\n+\n+\t* config/xtensa/predicates.md (addsubx_operand): New.\n+\t* config/xtensa/xtensa.c (xtensa_emit_branch): New.\n+\t(xtensa_emit_bit_branch): New.\n+\t(xtensa_emit_movcc): New.\n+\t* config/xtensa/xtensa.md (any_minmax): New code macro.\n+\t(minmax): New code attribute.\n+\t(any_cond, any_scc, any_scc_sf): New code macros.\n+\t(*addx2, *addx4, *addx8): Delete.\n+\t(*addx): New.\n+\t(*subx2, *subx4, *subx8): Delete.\n+\t(*subx): New.\n+\t(sminsi3, uminsi3, smaxsi3, umaxsi3): Use any_minmax macro.\n+\t(beq, bne, bgt, bge, blt, ble, bgtu, bgeu, bltu, bleu): Use any_cond.\n+\t(*btrue, *bfalse, *ubtrue, *ubfalse): Use xtensa_emit_branch.\n+\t(*bittrue, *bitfalse): Use xtensa_emit_bit_branch.\n+\t(seq, sne, sgt, sge, slt, sle): Use any_scc macro.\n+\t(movsicc_internal0, movsicc_internal1): Use xtensa_emit_movcc.\n+\t(movsfcc_internal0, movsfcc_internal1): Likewise.\n+\t(seq_sf, slt_sf, sle_sf): Use any_scc_sf macro.\n+\t* config/xtensa/xtensa-protos.h: (xtensa_emit_branch): New.\n+\t(xtensa_emit_bit_branch): New.\n+\t(xtensa_emit_movcc): New.\n+\t(function_arg_boundary): Add missing prototype.\n+\n 2006-11-17  Bob Wilson  <bob.wilson@acm.org>\n \n \t* config/xtensa/xtensa.md (tstsi): Delete"}, {"sha": "92326a787e03fda9452ebefecb6a3ff14ed8b8a6", "filename": "gcc/config/xtensa/predicates.md", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036a2b7a60782739d05a48d9968cdb8e2129b683/gcc%2Fconfig%2Fxtensa%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036a2b7a60782739d05a48d9968cdb8e2129b683/gcc%2Fconfig%2Fxtensa%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fpredicates.md?ref=036a2b7a60782739d05a48d9968cdb8e2129b683", "patch": "@@ -1,5 +1,5 @@\n ;; Predicate definitions for Xtensa.\n-;; Copyright (C) 2005 Free Software Foundation, Inc.\n+;; Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n ;;\n ;; This file is part of GCC.\n ;;\n@@ -24,6 +24,12 @@\n \t\t\t || xtensa_simm8x256 (INTVAL (op))\"))\n        (match_operand 0 \"register_operand\")))\n \n+(define_predicate \"addsubx_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"INTVAL (op) == 2\n+\t\t    || INTVAL (op) == 4\n+\t\t    || INTVAL (op) == 8\")))\n+\n (define_predicate \"arith_operand\"\n   (ior (and (match_code \"const_int\")\n \t    (match_test \"xtensa_simm8 (INTVAL (op))\"))"}, {"sha": "7f8ad2e8065b9712c7034a28cc1e0cbca211b167", "filename": "gcc/config/xtensa/xtensa-protos.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036a2b7a60782739d05a48d9968cdb8e2129b683/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036a2b7a60782739d05a48d9968cdb8e2129b683/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h?ref=036a2b7a60782739d05a48d9968cdb8e2129b683", "patch": "@@ -50,6 +50,9 @@ extern int xtensa_emit_move_sequence (rtx *, enum machine_mode);\n extern rtx xtensa_copy_incoming_a7 (rtx);\n extern void xtensa_expand_nonlocal_goto (rtx *);\n extern void xtensa_emit_loop_end (rtx, rtx *);\n+extern char *xtensa_emit_branch (bool, bool, rtx *);\n+extern char *xtensa_emit_bit_branch (bool, bool, rtx *);\n+extern char *xtensa_emit_movcc (bool, bool, bool, rtx *);\n extern char *xtensa_emit_call (int, rtx *);\n \n #ifdef TREE_CODE\n@@ -71,6 +74,7 @@ extern enum reg_class xtensa_secondary_reload_class (enum reg_class,\n extern void function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode, tree);\n extern struct rtx_def *function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t     tree, int);\n+extern int function_arg_boundary (enum machine_mode, tree);\n #endif /* TREE_CODE */\n \n extern void xtensa_setup_frame_addresses (void);"}, {"sha": "fa5f08d2d2335e307b9e7eacd6c3e12a38c3aed5", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036a2b7a60782739d05a48d9968cdb8e2129b683/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036a2b7a60782739d05a48d9968cdb8e2129b683/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=036a2b7a60782739d05a48d9968cdb8e2129b683", "patch": "@@ -1368,6 +1368,101 @@ xtensa_emit_loop_end (rtx insn, rtx *operands)\n }\n \n \n+char *\n+xtensa_emit_branch (bool inverted, bool immed, rtx *operands)\n+{\n+  static char result[64];\n+  enum rtx_code code;\n+  const char *op;\n+\n+  code = GET_CODE (operands[3]);\n+  switch (code)\n+    {\n+    case EQ:\top = inverted ? \"ne\" : \"eq\"; break;\n+    case NE:\top = inverted ? \"eq\" : \"ne\"; break;\n+    case LT:\top = inverted ? \"ge\" : \"lt\"; break;\n+    case GE:\top = inverted ? \"lt\" : \"ge\"; break;\n+    case LTU:\top = inverted ? \"geu\" : \"ltu\"; break;\n+    case GEU:\top = inverted ? \"ltu\" : \"geu\"; break;\n+    default:\tgcc_unreachable ();\n+    }\n+\n+  if (immed)\n+    {\n+      if (INTVAL (operands[1]) == 0)\n+\tsprintf (result, \"b%sz%s\\t%%0, %%2\", op,\n+\t\t (TARGET_DENSITY && (code == EQ || code == NE)) ? \".n\" : \"\");\n+      else\n+\tsprintf (result, \"b%si\\t%%0, %%d1, %%2\", op);\n+    }\n+  else\n+    sprintf (result, \"b%s\\t%%0, %%1, %%2\", op);\n+\n+  return result;\n+}\n+\n+\n+char *\n+xtensa_emit_bit_branch (bool inverted, bool immed, rtx *operands)\n+{\n+  static char result[64];\n+  const char *op;\n+\n+  switch (GET_CODE (operands[3]))\n+    {\n+    case EQ:\top = inverted ? \"bs\" : \"bc\"; break;\n+    case NE:\top = inverted ? \"bc\" : \"bs\"; break;\n+    default:\tgcc_unreachable ();\n+    }\n+\n+  if (immed)\n+    {\n+      unsigned bitnum = INTVAL (operands[1]) & 0x1f; \n+      operands[1] = GEN_INT (bitnum); \n+      sprintf (result, \"b%si\\t%%0, %%d1, %%2\", op);\n+    }\n+  else\n+    sprintf (result, \"b%s\\t%%0, %%1, %%2\", op);\n+\n+  return result;\n+}\n+\n+\n+char *\n+xtensa_emit_movcc (bool inverted, bool isfp, bool isbool, rtx *operands)\n+{\n+  static char result[64];\n+  enum rtx_code code;\n+  const char *op;\n+\n+  code = GET_CODE (operands[4]);\n+  if (isbool)\n+    {\n+      switch (code)\n+\t{\n+\tcase EQ:\top = inverted ? \"t\" : \"f\"; break;\n+\tcase NE:\top = inverted ? \"f\" : \"t\"; break;\n+\tdefault:\tgcc_unreachable ();\n+\t}\n+    }\n+  else\n+    {\n+      switch (code)\n+\t{\n+\tcase EQ:\top = inverted ? \"nez\" : \"eqz\"; break;\n+\tcase NE:\top = inverted ? \"eqz\" : \"nez\"; break;\n+\tcase LT:\top = inverted ? \"gez\" : \"ltz\"; break;\n+\tcase GE:\top = inverted ? \"ltz\" : \"gez\"; break;\n+\tdefault:\tgcc_unreachable ();\n+\t}\n+    }\n+\n+  sprintf (result, \"mov%s%s\\t%%0, %%%d, %%1\",\n+\t   op, isfp ? \".s\" : \"\", inverted ? 3 : 2);\n+  return result;\n+}\n+\n+\n char *\n xtensa_emit_call (int callop, rtx *operands)\n {"}, {"sha": "c3f38cb93e809a72561fcb88067a6a7e1b6ac8f0", "filename": "gcc/config/xtensa/xtensa.md", "status": "modified", "additions": 57, "deletions": 529, "changes": 586, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036a2b7a60782739d05a48d9968cdb8e2129b683/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036a2b7a60782739d05a48d9968cdb8e2129b683/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.md?ref=036a2b7a60782739d05a48d9968cdb8e2129b683", "patch": "@@ -45,6 +45,24 @@\n ;; <su> is like <u>, but the signed form expands to \"s\" rather than \"\".\n (define_code_attr su [(sign_extend \"s\") (zero_extend \"u\")])\n \n+;; This code macro allows four integer min/max operations to be\n+;; generated from one template.\n+(define_code_macro any_minmax [smin umin smax umax])\n+\n+;; <minmax> expands to the opcode name for any_minmax operations.\n+(define_code_attr minmax [(smin \"min\") (umin \"minu\")\n+\t\t\t  (smax \"max\") (umax \"maxu\")])\n+\n+;; This code macro allows all branch instructions to be generated from\n+;; a single define_expand template.\n+(define_code_macro any_cond [eq ne gt ge lt le gtu geu ltu leu])\n+\n+;; This code macro is for setting a register from a comparison.\n+(define_code_macro any_scc [eq ne gt ge lt le])\n+\n+;; This code macro is for floating-point comparisons.\n+(define_code_macro any_scc_sf [eq lt le])\n+\n \f\n ;; Attributes.\n \n@@ -170,35 +188,13 @@\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"2,2,3,3,3\")])\n \n-(define_insn \"*addx2\"\n+(define_insn \"*addx\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t  (const_int 2))\n+\t\t\t  (match_operand:SI 3 \"addsubx_operand\" \"i\"))\n \t\t (match_operand:SI 2 \"register_operand\" \"r\")))]\n   \"TARGET_ADDX\"\n-  \"addx2\\t%0, %1, %2\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"3\")])\n-\n-(define_insn \"*addx4\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n-\t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t  (const_int 4))\n-\t\t (match_operand:SI 2 \"register_operand\" \"r\")))]\n-  \"TARGET_ADDX\"\n-  \"addx4\\t%0, %1, %2\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"3\")])\n-\n-(define_insn \"*addx8\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n-\t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t  (const_int 8))\n-\t\t (match_operand:SI 2 \"register_operand\" \"r\")))]\n-  \"TARGET_ADDX\"\n-  \"addx8\\t%0, %1, %2\"\n+  \"addx%3\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n@@ -257,35 +253,13 @@\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n \n-(define_insn \"*subx2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n-\t(minus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t   (const_int 2))\n-\t\t  (match_operand:SI 2 \"register_operand\" \"r\")))]\n-  \"TARGET_ADDX\"\n-  \"subx2\\t%0, %1, %2\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"3\")])\n-\n-(define_insn \"*subx4\"\n+(define_insn \"*subx\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(minus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t   (const_int 4))\n+\t\t\t   (match_operand:SI 3 \"addsubx_operand\" \"i\"))\n \t\t  (match_operand:SI 2 \"register_operand\" \"r\")))]\n   \"TARGET_ADDX\"\n-  \"subx4\\t%0, %1, %2\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"3\")])\n-\n-(define_insn \"*subx8\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n-\t(minus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t   (const_int 8))\n-\t\t  (match_operand:SI 2 \"register_operand\" \"r\")))]\n-  \"TARGET_ADDX\"\n-  \"subx8\\t%0, %1, %2\"\n+  \"subx%3\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n@@ -537,42 +511,12 @@\n \f\n ;; Min and max.\n \n-(define_insn \"sminsi3\"\n+(define_insn \"<code>si3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n-        (smin:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n-                 (match_operand:SI 2 \"register_operand\" \"r\")))]\n+        (any_minmax:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n+\t\t       (match_operand:SI 2 \"register_operand\" \"r\")))]\n   \"TARGET_MINMAX\"\n-  \"min\\t%0, %1, %2\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"3\")])\n-\n-(define_insn \"uminsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n-        (umin:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n-                 (match_operand:SI 2 \"register_operand\" \"r\")))]\n-  \"TARGET_MINMAX\"\n-  \"minu\\t%0, %1, %2\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"3\")])\n-\n-(define_insn \"smaxsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n-        (smax:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n-                 (match_operand:SI 2 \"register_operand\" \"r\")))]\n-  \"TARGET_MINMAX\"\n-  \"max\\t%0, %1, %2\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"3\")])\n-\n-(define_insn \"umaxsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n-        (umax:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n-                 (match_operand:SI 2 \"register_operand\" \"r\")))]\n-  \"TARGET_MINMAX\"\n-  \"maxu\\t%0, %1, %2\"\n+  \"<minmax>\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\n@@ -1236,113 +1180,14 @@\n \f\n ;; Conditional branches.\n \n-(define_expand \"beq\"\n-  [(set (pc)\n-\t(if_then_else (eq (cc0) (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"\"\n-{\n-  xtensa_expand_conditional_branch (operands, EQ);\n-  DONE;\n-})\n-\n-(define_expand \"bne\"\n-  [(set (pc)\n-\t(if_then_else (ne (cc0) (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"\"\n-{\n-  xtensa_expand_conditional_branch (operands, NE);\n-  DONE;\n-})\n-\n-(define_expand \"bgt\"\n-  [(set (pc)\n-\t(if_then_else (gt (cc0) (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"\"\n-{\n-  xtensa_expand_conditional_branch (operands, GT);\n-  DONE;\n-})\n-\n-(define_expand \"bge\"\n-  [(set (pc)\n-\t(if_then_else (ge (cc0) (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"\"\n-{\n-  xtensa_expand_conditional_branch (operands, GE);\n-  DONE;\n-})\n-\n-(define_expand \"blt\"\n+(define_expand \"b<code>\"\n   [(set (pc)\n-\t(if_then_else (lt (cc0) (const_int 0))\n+\t(if_then_else (any_cond (cc0) (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n {\n-  xtensa_expand_conditional_branch (operands, LT);\n-  DONE;\n-})\n-\n-(define_expand \"ble\"\n-  [(set (pc)\n-\t(if_then_else (le (cc0) (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"\"\n-{\n-  xtensa_expand_conditional_branch (operands, LE);\n-  DONE;\n-})\n-\n-(define_expand \"bgtu\"\n-  [(set (pc)\n-\t(if_then_else (gtu (cc0) (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"\"\n-{\n-  xtensa_expand_conditional_branch (operands, GTU);\n-  DONE;\n-})\n-\n-(define_expand \"bgeu\"\n-  [(set (pc)\n-\t(if_then_else (geu (cc0) (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"\"\n-{\n-  xtensa_expand_conditional_branch (operands, GEU);\n-  DONE;\n-})\n-\n-(define_expand \"bltu\"\n-  [(set (pc)\n-\t(if_then_else (ltu (cc0) (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"\"\n-{\n-  xtensa_expand_conditional_branch (operands, LTU);\n-  DONE;\n-})\n-\n-(define_expand \"bleu\"\n-  [(set (pc)\n-\t(if_then_else (leu (cc0) (const_int 0))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"\"\n-{\n-  xtensa_expand_conditional_branch (operands, LEU);\n+  xtensa_expand_conditional_branch (operands, <CODE>);\n   DONE;\n })\n \n@@ -1351,50 +1196,13 @@\n (define_insn \"*btrue\"\n   [(set (pc)\n \t(if_then_else (match_operator 3 \"branch_operator\"\n-\t\t\t [(match_operand:SI 0 \"register_operand\" \"r,r\")\n-\t\t\t  (match_operand:SI 1 \"branch_operand\" \"K,r\")])\n+\t\t       [(match_operand:SI 0 \"register_operand\" \"r,r\")\n+\t\t\t(match_operand:SI 1 \"branch_operand\" \"K,r\")])\n \t\t      (label_ref (match_operand 2 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n {\n-  if (which_alternative == 1)\n-    {\n-      switch (GET_CODE (operands[3]))\n-\t{\n-\tcase EQ:\treturn \"beq\\t%0, %1, %2\";\n-\tcase NE:\treturn \"bne\\t%0, %1, %2\";\n-\tcase LT:\treturn \"blt\\t%0, %1, %2\";\n-\tcase GE:\treturn \"bge\\t%0, %1, %2\";\n-\tdefault:\tgcc_unreachable ();\n-\t}\n-    }\n-  else if (INTVAL (operands[1]) == 0)\n-    {\n-      switch (GET_CODE (operands[3]))\n-\t{\n-\tcase EQ:\treturn (TARGET_DENSITY\n-\t\t\t\t? \"beqz.n\\t%0, %2\"\n-\t\t\t\t: \"beqz\\t%0, %2\");\n-\tcase NE:\treturn (TARGET_DENSITY\n-\t\t\t\t? \"bnez.n\\t%0, %2\"\n-\t\t\t\t: \"bnez\\t%0, %2\");\n-\tcase LT:\treturn \"bltz\\t%0, %2\";\n-\tcase GE:\treturn \"bgez\\t%0, %2\";\n-\tdefault:\tgcc_unreachable ();\n-\t}\n-    }\n-  else\n-    {\n-      switch (GET_CODE (operands[3]))\n-\t{\n-\tcase EQ:\treturn \"beqi\\t%0, %d1, %2\";\n-\tcase NE:\treturn \"bnei\\t%0, %d1, %2\";\n-\tcase LT:\treturn \"blti\\t%0, %d1, %2\";\n-\tcase GE:\treturn \"bgei\\t%0, %d1, %2\";\n-\tdefault:\tgcc_unreachable ();\n-\t}\n-    }\n-  gcc_unreachable ();\n+  return xtensa_emit_branch (false, which_alternative == 0, operands);\n }\n   [(set_attr \"type\"\t\"jump,jump\")\n    (set_attr \"mode\"\t\"none\")\n@@ -1403,50 +1211,13 @@\n (define_insn \"*bfalse\"\n   [(set (pc)\n \t(if_then_else (match_operator 3 \"branch_operator\"\n-\t\t\t [(match_operand:SI 0 \"register_operand\" \"r,r\")\n-\t\t\t  (match_operand:SI 1 \"branch_operand\" \"K,r\")])\n+\t\t       [(match_operand:SI 0 \"register_operand\" \"r,r\")\n+\t\t\t(match_operand:SI 1 \"branch_operand\" \"K,r\")])\n \t\t      (pc)\n \t\t      (label_ref (match_operand 2 \"\" \"\"))))]\n   \"\"\n {\n-  if (which_alternative == 1)\n-    {\n-      switch (GET_CODE (operands[3]))\n-\t{\n-\tcase EQ:\treturn \"bne\\t%0, %1, %2\";\n-\tcase NE:\treturn \"beq\\t%0, %1, %2\";\n-\tcase LT:\treturn \"bge\\t%0, %1, %2\";\n-\tcase GE:\treturn \"blt\\t%0, %1, %2\";\n-\tdefault:\tgcc_unreachable ();\n-\t}\n-    }\n-  else if (INTVAL (operands[1]) == 0)\n-    {\n-      switch (GET_CODE (operands[3]))\n-\t{\n-\tcase EQ:\treturn (TARGET_DENSITY\n-\t\t\t\t? \"bnez.n\\t%0, %2\"\n-\t\t\t\t: \"bnez\\t%0, %2\");\n-\tcase NE:\treturn (TARGET_DENSITY\n-\t\t\t\t? \"beqz.n\\t%0, %2\"\n-\t\t\t\t: \"beqz\\t%0, %2\");\n-\tcase LT:\treturn \"bgez\\t%0, %2\";\n-\tcase GE:\treturn \"bltz\\t%0, %2\";\n-\tdefault:\tgcc_unreachable ();\n-\t}\n-    }\n-  else\n-    {\n-      switch (GET_CODE (operands[3]))\n-\t{\n-\tcase EQ:\treturn \"bnei\\t%0, %d1, %2\";\n-\tcase NE:\treturn \"beqi\\t%0, %d1, %2\";\n-\tcase LT:\treturn \"bgei\\t%0, %d1, %2\";\n-\tcase GE:\treturn \"blti\\t%0, %d1, %2\";\n-\tdefault:\tgcc_unreachable ();\n-\t}\n-    }\n-  gcc_unreachable ();\n+  return xtensa_emit_branch (true, which_alternative == 0, operands);\n }\n   [(set_attr \"type\"\t\"jump,jump\")\n    (set_attr \"mode\"\t\"none\")\n@@ -1455,31 +1226,13 @@\n (define_insn \"*ubtrue\"\n   [(set (pc)\n \t(if_then_else (match_operator 3 \"ubranch_operator\"\n-\t\t\t [(match_operand:SI 0 \"register_operand\" \"r,r\")\n-\t\t\t  (match_operand:SI 1 \"ubranch_operand\" \"L,r\")])\n+\t\t       [(match_operand:SI 0 \"register_operand\" \"r,r\")\n+\t\t\t(match_operand:SI 1 \"ubranch_operand\" \"L,r\")])\n \t\t      (label_ref (match_operand 2 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n {\n-  if (which_alternative == 1)\n-    {\n-      switch (GET_CODE (operands[3]))\n-\t{\n-\tcase LTU:\treturn \"bltu\\t%0, %1, %2\";\n-\tcase GEU:\treturn \"bgeu\\t%0, %1, %2\";\n-\tdefault:\tgcc_unreachable ();\n-\t}\n-    }\n-  else\n-    {\n-      switch (GET_CODE (operands[3]))\n-\t{\n-\tcase LTU:\treturn \"bltui\\t%0, %d1, %2\";\n-\tcase GEU:\treturn \"bgeui\\t%0, %d1, %2\";\n-\tdefault:\tgcc_unreachable ();\n-\t}\n-    }\n-  gcc_unreachable ();\n+  return xtensa_emit_branch (false, which_alternative == 0, operands);\n }\n   [(set_attr \"type\"\t\"jump,jump\")\n    (set_attr \"mode\"\t\"none\")\n@@ -1494,25 +1247,7 @@\n \t\t      (label_ref (match_operand 2 \"\" \"\"))))]\n   \"\"\n {\n-  if (which_alternative == 1)\n-    {\n-      switch (GET_CODE (operands[3]))\n-\t{\n-\tcase LTU:\treturn \"bgeu\\t%0, %1, %2\";\n-\tcase GEU:\treturn \"bltu\\t%0, %1, %2\";\n-\tdefault:\tgcc_unreachable ();\n-\t}\n-    }\n-  else\n-    {\n-      switch (GET_CODE (operands[3]))\n-\t{\n-\tcase LTU:\treturn \"bgeui\\t%0, %d1, %2\";\n-\tcase GEU:\treturn \"bltui\\t%0, %d1, %2\";\n-\tdefault:\tgcc_unreachable ();\n-\t}\n-    }\n-  gcc_unreachable ();\n+  return xtensa_emit_branch (true, which_alternative == 0, operands);\n }\n   [(set_attr \"type\"\t\"jump,jump\")\n    (set_attr \"mode\"\t\"none\")\n@@ -1532,27 +1267,7 @@\n \t\t      (pc)))]\n   \"\"\n {\n-  if (which_alternative == 0)\n-    {\n-      unsigned bitnum = INTVAL(operands[1]) & 0x1f;\n-      operands[1] = GEN_INT(bitnum);\n-      switch (GET_CODE (operands[3]))\n-\t{\n-\tcase EQ:\treturn \"bbci\\t%0, %d1, %2\";\n-\tcase NE:\treturn \"bbsi\\t%0, %d1, %2\";\n-\tdefault:\tgcc_unreachable ();\n-\t}\n-    }\n-  else\n-    {\n-      switch (GET_CODE (operands[3]))\n-\t{\n-\tcase EQ:\treturn \"bbc\\t%0, %1, %2\";\n-\tcase NE:\treturn \"bbs\\t%0, %1, %2\";\n-\tdefault:\tgcc_unreachable ();\n-\t}\n-    }\n-  gcc_unreachable ();\n+  return xtensa_emit_bit_branch (false, which_alternative == 0, operands);\n }\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")\n@@ -1570,27 +1285,7 @@\n \t\t      (label_ref (match_operand 2 \"\" \"\"))))]\n   \"\"\n {\n-  if (which_alternative == 0)\n-    {\n-      unsigned bitnum = INTVAL (operands[1]) & 0x1f;\n-      operands[1] = GEN_INT (bitnum);\n-      switch (GET_CODE (operands[3]))\n-\t{\n-\tcase EQ:\treturn \"bbsi\\t%0, %d1, %2\";\n-\tcase NE:\treturn \"bbci\\t%0, %d1, %2\";\n-\tdefault:\tgcc_unreachable ();\n-\t}\n-    }\n-  else\n-    {\n-      switch (GET_CODE (operands[3]))\n-\t{\n-\tcase EQ:\treturn \"bbs\\t%0, %1, %2\";\n-\tcase NE:\treturn \"bbc\\t%0, %1, %2\";\n-\tdefault:\tgcc_unreachable ();\n-\t}\n-    }\n-  gcc_unreachable ();\n+  return xtensa_emit_bit_branch (true, which_alternative == 0, operands);\n }\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")\n@@ -1677,67 +1372,13 @@\n \f\n ;; Setting a register from a comparison.\n \n-(define_expand \"seq\"\n+(define_expand \"s<code>\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(match_dup 1))]\n+\t(any_scc:SI (match_dup 1)\n+\t\t    (match_dup 2)))]\n   \"\"\n {\n-  operands[1] = gen_rtx_EQ (SImode, branch_cmp[0], branch_cmp[1]);\n-  if (!xtensa_expand_scc (operands))\n-    FAIL;\n-  DONE;\n-})\n-\n-(define_expand \"sne\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(match_dup 1))]\n-  \"\"\n-{\n-  operands[1] = gen_rtx_NE (SImode, branch_cmp[0], branch_cmp[1]);\n-  if (!xtensa_expand_scc (operands))\n-    FAIL;\n-  DONE;\n-})\n-\n-(define_expand \"sgt\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(match_dup 1))]\n-  \"\"\n-{\n-  operands[1] = gen_rtx_GT (SImode, branch_cmp[0], branch_cmp[1]);\n-  if (!xtensa_expand_scc (operands))\n-    FAIL;\n-  DONE;\n-})\n-\n-(define_expand \"sge\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(match_dup 1))]\n-  \"\"\n-{\n-  operands[1] = gen_rtx_GE (SImode, branch_cmp[0], branch_cmp[1]);\n-  if (!xtensa_expand_scc (operands))\n-    FAIL;\n-  DONE;\n-})\n-\n-(define_expand \"slt\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(match_dup 1))]\n-  \"\"\n-{\n-  operands[1] = gen_rtx_LT (SImode, branch_cmp[0], branch_cmp[1]);\n-  if (!xtensa_expand_scc (operands))\n-    FAIL;\n-  DONE;\n-})\n-\n-(define_expand \"sle\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(match_dup 1))]\n-  \"\"\n-{\n-  operands[1] = gen_rtx_LE (SImode, branch_cmp[0], branch_cmp[1]);\n+  operands[1] = gen_rtx_<CODE> (SImode, branch_cmp[0], branch_cmp[1]);\n   if (!xtensa_expand_scc (operands))\n     FAIL;\n   DONE;\n@@ -1779,29 +1420,7 @@\n \t\t\t (match_operand:SI 3 \"register_operand\" \"0,r\")))]\n   \"\"\n {\n-  if (which_alternative == 0)\n-    {\n-      switch (GET_CODE (operands[4]))\n-\t{\n-\tcase EQ:\treturn \"moveqz\\t%0, %2, %1\";\n-\tcase NE:\treturn \"movnez\\t%0, %2, %1\";\n-\tcase LT:\treturn \"movltz\\t%0, %2, %1\";\n-\tcase GE:\treturn \"movgez\\t%0, %2, %1\";\n-\tdefault:\tgcc_unreachable ();\n-\t}\n-    }\n-  else\n-    {\n-      switch (GET_CODE (operands[4]))\n-\t{\n-\tcase EQ:\treturn \"movnez\\t%0, %3, %1\";\n-\tcase NE:\treturn \"moveqz\\t%0, %3, %1\";\n-\tcase LT:\treturn \"movgez\\t%0, %3, %1\";\n-\tcase GE:\treturn \"movltz\\t%0, %3, %1\";\n-\tdefault:\tgcc_unreachable ();\n-\t}\n-    }\n-  gcc_unreachable ();\n+  return xtensa_emit_movcc (which_alternative == 1, false, false, operands);\n }\n   [(set_attr \"type\"\t\"move,move\")\n    (set_attr \"mode\"\t\"SI\")\n@@ -1816,18 +1435,7 @@\n \t\t\t (match_operand:SI 3 \"register_operand\" \"0,r\")))]\n   \"TARGET_BOOLEANS\"\n {\n-  int isEq = (GET_CODE (operands[4]) == EQ);\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      if (isEq) return \"movf\\t%0, %2, %1\";\n-      return \"movt\\t%0, %2, %1\";\n-    case 1:\n-      if (isEq) return \"movt\\t%0, %3, %1\";\n-      return \"movf\\t%0, %3, %1\";\n-    default:\n-      gcc_unreachable ();\n-    }\n+  return xtensa_emit_movcc (which_alternative == 1, false, true, operands);\n }\n   [(set_attr \"type\"\t\"move,move\")\n    (set_attr \"mode\"\t\"SI\")\n@@ -1842,52 +1450,8 @@\n \t\t\t (match_operand:SF 3 \"register_operand\" \"0,r,0,f\")))]\n   \"\"\n {\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      switch (GET_CODE (operands[4]))\n-\t{\n-\tcase EQ:\treturn \"moveqz\\t%0, %2, %1\";\n-\tcase NE:\treturn \"movnez\\t%0, %2, %1\";\n-\tcase LT:\treturn \"movltz\\t%0, %2, %1\";\n-\tcase GE:\treturn \"movgez\\t%0, %2, %1\";\n-\tdefault:\tgcc_unreachable ();\n-\t}\n-      break;\n-    case 1:\n-      switch (GET_CODE (operands[4]))\n-\t{\n-\tcase EQ:\treturn \"movnez\\t%0, %3, %1\";\n-\tcase NE:\treturn \"moveqz\\t%0, %3, %1\";\n-\tcase LT:\treturn \"movgez\\t%0, %3, %1\";\n-\tcase GE:\treturn \"movltz\\t%0, %3, %1\";\n-\tdefault:\tgcc_unreachable ();\n-\t}\n-      break;\n-    case 2:\n-      switch (GET_CODE (operands[4]))\n-\t{\n-\tcase EQ:\treturn \"moveqz.s %0, %2, %1\";\n-\tcase NE:\treturn \"movnez.s %0, %2, %1\";\n-\tcase LT:\treturn \"movltz.s %0, %2, %1\";\n-\tcase GE:\treturn \"movgez.s %0, %2, %1\";\n-\tdefault:\tgcc_unreachable ();\n-\t}\n-      break;\n-    case 3:\n-      switch (GET_CODE (operands[4]))\n-\t{\n-\tcase EQ:\treturn \"movnez.s %0, %3, %1\";\n-\tcase NE:\treturn \"moveqz.s %0, %3, %1\";\n-\tcase LT:\treturn \"movgez.s %0, %3, %1\";\n-\tcase GE:\treturn \"movltz.s %0, %3, %1\";\n-\tdefault:\tgcc_unreachable ();\n-\t}\n-      break;\n-    default:\n-      gcc_unreachable ();\n-    }\n-  gcc_unreachable ();\n+  return xtensa_emit_movcc ((which_alternative & 1) == 1,\n+\t\t\t    which_alternative >= 2, false, operands);\n }\n   [(set_attr \"type\"\t\"move,move,move,move\")\n    (set_attr \"mode\"\t\"SF\")\n@@ -1902,24 +1466,8 @@\n \t\t\t (match_operand:SF 3 \"register_operand\" \"0,r,0,f\")))]\n   \"TARGET_BOOLEANS\"\n {\n-  int isEq = (GET_CODE (operands[4]) == EQ);\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      if (isEq) return \"movf\\t%0, %2, %1\";\n-      return \"movt\\t%0, %2, %1\";\n-    case 1:\n-      if (isEq) return \"movt\\t%0, %3, %1\";\n-      return \"movf\\t%0, %3, %1\";\n-    case 2:\n-      if (isEq) return \"movf.s\\t%0, %2, %1\";\n-      return \"movt.s\\t%0, %2, %1\";\n-    case 3:\n-      if (isEq) return \"movt.s\\t%0, %3, %1\";\n-      return \"movf.s\\t%0, %3, %1\";\n-    default:\n-      gcc_unreachable ();\n-    }\n+  return xtensa_emit_movcc ((which_alternative & 1) == 1,\n+\t\t\t    which_alternative >= 2, true, operands);\n }\n   [(set_attr \"type\"\t\"move,move,move,move\")\n    (set_attr \"mode\"\t\"SF\")\n@@ -1928,32 +1476,12 @@\n \f\n ;; Floating-point comparisons.\n \n-(define_insn \"seq_sf\"\n-  [(set (match_operand:CC 0 \"register_operand\" \"=b\")\n-\t(eq:CC (match_operand:SF 1 \"register_operand\" \"f\")\n-\t       (match_operand:SF 2 \"register_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT\"\n-  \"oeq.s\\t%0, %1, %2\"\n-  [(set_attr \"type\"\t\"farith\")\n-   (set_attr \"mode\"\t\"BL\")\n-   (set_attr \"length\"\t\"3\")])\n-\n-(define_insn \"slt_sf\"\n-  [(set (match_operand:CC 0 \"register_operand\" \"=b\")\n-\t(lt:CC (match_operand:SF 1 \"register_operand\" \"f\")\n-\t       (match_operand:SF 2 \"register_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT\"\n-  \"olt.s\\t%0, %1, %2\"\n-  [(set_attr \"type\"\t\"farith\")\n-   (set_attr \"mode\"\t\"BL\")\n-   (set_attr \"length\"\t\"3\")])\n-\n-(define_insn \"sle_sf\"\n+(define_insn \"s<code>_sf\"\n   [(set (match_operand:CC 0 \"register_operand\" \"=b\")\n-\t(le:CC (match_operand:SF 1 \"register_operand\" \"f\")\n-\t       (match_operand:SF 2 \"register_operand\" \"f\")))]\n+\t(any_scc_sf:CC (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t       (match_operand:SF 2 \"register_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT\"\n-  \"ole.s\\t%0, %1, %2\"\n+  \"o<code>.s\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"farith\")\n    (set_attr \"mode\"\t\"BL\")\n    (set_attr \"length\"\t\"3\")])"}]}