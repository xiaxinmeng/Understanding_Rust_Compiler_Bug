{"sha": "004135d07fa87833da039cdd6fc26aa225cca695", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA0MTM1ZDA3ZmE4NzgzM2RhMDM5Y2RkNmZjMjZhYTIyNWNjYTY5NQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-08-13T23:07:17Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-08-13T23:07:17Z"}, "message": "(movdi matchers): Fix src/dest order in unaligned reg->reg case.\n\nFrom-SVN: r10223", "tree": {"sha": "b5f69e660e050f8e7026ac3339f20456a560923a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5f69e660e050f8e7026ac3339f20456a560923a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/004135d07fa87833da039cdd6fc26aa225cca695", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/004135d07fa87833da039cdd6fc26aa225cca695", "html_url": "https://github.com/Rust-GCC/gccrs/commit/004135d07fa87833da039cdd6fc26aa225cca695", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/004135d07fa87833da039cdd6fc26aa225cca695/comments", "author": null, "committer": null, "parents": [{"sha": "0813543abde7ee08e413dfbc2cece507fbf6c8c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0813543abde7ee08e413dfbc2cece507fbf6c8c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0813543abde7ee08e413dfbc2cece507fbf6c8c4"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "0befad2d0a377e0f86eb4fff44b5316c50484bf6", "filename": "gcc/config/i960/i960.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/004135d07fa87833da039cdd6fc26aa225cca695/gcc%2Fconfig%2Fi960%2Fi960.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/004135d07fa87833da039cdd6fc26aa225cca695/gcc%2Fconfig%2Fi960%2Fi960.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.md?ref=004135d07fa87833da039cdd6fc26aa225cca695", "patch": "@@ -825,12 +825,12 @@\n \t  || (REGNO (operands[1]) & 1))\n \t{\n \t  /* We normally copy the low-numbered register first.  However, if\n-\t     the second register operand 0 is the same as the first register\n-\t     of operand 1, we must copy in the opposite order.  */\n-\t  if (REGNO (operands[0]) + 1 == REGNO (operands[1]))\n-\t    return \\\"mov\t%D0,%D1\\;mov\t%0,%1\\\";\n+\t     the second source register is the same as the first destination\n+\t     register, we must copy in the opposite order.  */\n+\t  if (REGNO (operands[1]) + 1 == REGNO (operands[0]))\n+\t    return \\\"mov\t%D1,%D0\\;mov\t%1,%0\\\";\n \t  else\n-\t    return \\\"mov\t%0,%1\\;mov\t%D0,%D1\\\";\n+\t    return \\\"mov\t%1,%0\\;mov\t%D1,%D0\\\";\n \t}\n       else\n \treturn \\\"movl\t%1,%0\\\";\n@@ -882,12 +882,12 @@\n \t  || (REGNO (operands[1]) & 1))\n \t{\n \t  /* We normally copy the low-numbered register first.  However, if\n-\t     the second register operand 0 is the same as the first register\n-\t     of operand 1, we must copy in the opposite order.  */\n-\t  if (REGNO (operands[0]) + 1 == REGNO (operands[1]))\n-\t    return \\\"mov\t%D0,%D1\\;mov\t%0,%1\\\";\n+\t     the second source register is the same as the first destination\n+\t     register, we must copy in the opposite order.  */\n+\t  if (REGNO (operands[1]) + 1 == REGNO (operands[0]))\n+\t    return \\\"mov\t%D1,%D0\\;mov\t%1,%0\\\";\n \t  else\n-\t    return \\\"mov\t%0,%1\\;mov\t%D0,%D1\\\";\n+\t    return \\\"mov\t%1,%0\\;mov\t%D1,%D0\\\";\n \t}\n       else\n \treturn \\\"movl\t%1,%0\\\";"}]}