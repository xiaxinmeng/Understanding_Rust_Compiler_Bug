{"sha": "4174a33ac66f45536e3d7bd46167d7f678310931", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE3NGEzM2FjNjZmNDU1MzZlM2Q3YmQ0NjE2N2Q3ZjY3ODMxMDkzMQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-11-08T15:38:30Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-11-08T15:38:30Z"}, "message": "ipa-inline.c/tree-inline.c: port from fprintf to dump API (PR ipa/86395)\n\nThis patch ports various fprintf calls in the inlining code to using\nthe dump API, using the %C format code for printing cgraph_node *.\nI focussed on the dump messages that seemed most significant to\nend-users; I didn't port all of the calls.\n\nDoing so makes this information appear in -fopt-info and in\noptimization records, rather than just in the dump_file.\n\nIt also changes the affected dumpfile-dumps from being unconditional\n(assuming the dump_file is enabled) to being guarded by the MSG_*\nstatus.  Hence various tests with dg-final scan-*-dump directives\nneed to gain \"-all\" or \"-optimized\" suffixes to -fdump-ipa-inline.\n\nThe use of %C throughout also slightly changes the dump format for\nseveral messages, e.g. changing:\n\n Inlining void inline_me(char*) into int main(int, char**).\n\nto:\n\n../../src/gcc/testsuite/g++.dg/tree-ssa/inline-1.C:13:8: optimized:  Inlining void inline_me(char*)/0 into int main(int, char**)/2.\n\namongst other things adding \"/order\" suffixes to the cgraph node\nnames.\n\ngcc/ChangeLog:\n\tPR ipa/86395\n\t* doc/invoke.texi (-fdump-ipa-): Document the \"-optimized\",\n\t\"-missed\", \"-note\", and \"-all\" sub-options.\n\t* ipa-inline.c (caller_growth_limits): Port from fprintf to dump\n\tAPI.\n\t(can_early_inline_edge_p): Likewise.\n\t(want_early_inline_function_p): Likewise.\n\t(want_inline_self_recursive_call_p): Likewise.\n\t(recursive_inlining): Likewise.\n\t(inline_small_functions): Likewise.\n\t(flatten_function): Likewise.\n\t(ipa_inline): Likewise.\n\t(inline_always_inline_functions): Likewise.\n\t(early_inline_small_functions): Likewise.\n\t(early_inliner): Likewise.\n\t* tree-inline.c (expand_call_inline): Likewise.\n\ngcc/testsuite/ChangeLog:\n\tPR ipa/86395\n\t* g++.dg/ipa/devirt-12.C: Add \"-all\" suffix to\n\t\"-fdump-ipa-inline\".\n\t* g++.dg/ipa/imm-devirt-1.C: Add \"-optimized\" suffix to\n\t\"-fdump-tree-einline\".\n\t* g++.dg/tree-prof/inline_mismatch_args.C: Add \"-all\" suffix to\n\t\"-fdump-tree-einline\".\n\t* g++.dg/tree-ssa/inline-1.C: Add \"-optimized\" suffix to\n\t\"-fdump-tree-einline\".\n\t* g++.dg/tree-ssa/inline-2.C: Likewise.\n\t* g++.dg/tree-ssa/inline-3.C: Likewise.\n\t* g++.dg/tree-ssa/inline-4.C: New test, based on inline-1.C, but\n\tusing \"-fopt-info-inline\".\n\t* gcc.dg/ipa/fopt-info-inline-1.c: New test.\n\t* gcc.dg/ipa/inline-4.c:  Add \"-all\" suffix to\n\t\"-fdump-ipa-inline\".  Add \"-fopt-info-inline\" and dg-optimized\n\tdirective.\n\t* gcc.dg/ipa/inline-7.c: Add \"-optimized\" suffix to\n\t\"-fdump-tree-einline\".  Add \"-fopt-info-inline\" and dg-optimized\n\tdirective.  Update scan-tree-dump-times to reflect /order\n\tsuffixes.\n\t* gcc.dg/ipa/inlinehint-4.c: Update scan-tree-dump-times to\n\treflect /order suffixes.\n\t* gcc.dg/plugin/dump-1.c: Add \"-loop\" to \"-fopt-info-note\" to\n\tavoid getting extra messages from inliner.\n\t* gcc.dg/plugin/dump-2.c: Likewise.\n\t* gcc.dg/pr26570.c: Add dg-prune-output to ignore new\n\t\"function body not available\" missed optimization messages.\n\t* gcc.dg/pr71969-2.c: Update scan-tree-dump-times to reflect\n\t/order suffixes.\n\t* gcc.dg/pr71969-3.c: Likewise.\n\t* gcc.dg/tree-ssa/inline-11.c: Add \"-all\" suffix to\n\t\"-fdump-tree-einline\".\n\t* gcc.dg/tree-ssa/inline-3.c: Add \"-optimized\" suffix to\n\t\"-fdump-tree-einline\".  Update scan-tree-dump-times to reflect\n\t/order suffixes.\n\t* gcc.dg/tree-ssa/inline-4.c: Add \"-optimized\" suffix to\n\t\"-fdump-tree-einline\".  Add \"-fopt-info-inline\" and dg-optimized\n\tdirective.\n\t* gcc.dg/tree-ssa/inline-8.c: Add \"-optimized\" suffix to\n\t\"-fdump-tree-einline\".\n\t* gfortran.dg/pr79966.f90: Update scan-ipa-dump to reflect /order\n\tsuffixes.\n\nFrom-SVN: r265920", "tree": {"sha": "5235bd90981bc2004687d8de9394f82565c2c784", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5235bd90981bc2004687d8de9394f82565c2c784"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4174a33ac66f45536e3d7bd46167d7f678310931", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4174a33ac66f45536e3d7bd46167d7f678310931", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4174a33ac66f45536e3d7bd46167d7f678310931", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4174a33ac66f45536e3d7bd46167d7f678310931/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "204839e7c41678c3f93975fe4356492040fcf411", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/204839e7c41678c3f93975fe4356492040fcf411", "html_url": "https://github.com/Rust-GCC/gccrs/commit/204839e7c41678c3f93975fe4356492040fcf411"}], "stats": {"total": 418, "additions": 294, "deletions": 124}, "files": [{"sha": "c3e77f3e27e5ff657263e8d599a28ebf558a3eff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4174a33ac66f45536e3d7bd46167d7f678310931", "patch": "@@ -1,3 +1,22 @@\n+2018-11-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR ipa/86395\n+\t* doc/invoke.texi (-fdump-ipa-): Document the \"-optimized\",\n+\t\"-missed\", \"-note\", and \"-all\" sub-options.\n+\t* ipa-inline.c (caller_growth_limits): Port from fprintf to dump\n+\tAPI.\n+\t(can_early_inline_edge_p): Likewise.\n+\t(want_early_inline_function_p): Likewise.\n+\t(want_inline_self_recursive_call_p): Likewise.\n+\t(recursive_inlining): Likewise.\n+\t(inline_small_functions): Likewise.\n+\t(flatten_function): Likewise.\n+\t(ipa_inline): Likewise.\n+\t(inline_always_inline_functions): Likewise.\n+\t(early_inline_small_functions): Likewise.\n+\t(early_inliner): Likewise.\n+\t* tree-inline.c (expand_call_inline): Likewise.\n+\n 2018-11-08  David Malcolm  <dmalcolm@redhat.com>\n \n \t* pretty-print.c (pp_format): Handle %f."}, {"sha": "24136eb5cc747871a16a4cad1d21a8edcec5932b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=4174a33ac66f45536e3d7bd46167d7f678310931", "patch": "@@ -14085,6 +14085,7 @@ instruction numbers for the links to the previous and next instructions\n in a sequence.\n \n @item -fdump-ipa-@var{switch}\n+@itemx -fdump-ipa-@var{switch}-@var{options}\n @opindex fdump-ipa\n Control the dumping at various stages of inter-procedural analysis\n language tree to a file.  The file name is generated by appending a\n@@ -14105,6 +14106,18 @@ Dump after function inlining.\n \n @end table\n \n+Additionally, the options @option{-optimized}, @option{-missed},\n+@option{-note}, and @option{-all} can be provided, with the same meaning\n+as for @option{-fopt-info}, defaulting to @option{-optimized}.\n+\n+For example, @option{-fdump-ipa-inline-optimized-missed} will emit\n+information on callsites that were inlined, along with callsites\n+that were not inlined.\n+\n+By default, the dump will contain messages about successful\n+optimizations (equivalent to @option {-optimized}) together with\n+low-level details about the analysis.\n+\n @item -fdump-lang-all\n @itemx -fdump-lang-@var{switch}\n @itemx -fdump-lang-@var{switch}-@var{options}"}, {"sha": "e04ede774cf8eb1a71e06f96267ebb623428269d", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 100, "deletions": 91, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=4174a33ac66f45536e3d7bd46167d7f678310931", "patch": "@@ -227,20 +227,21 @@ caller_growth_limits (struct cgraph_edge *e)\n static void\n report_inline_failed_reason (struct cgraph_edge *e)\n {\n-  if (dump_file)\n+  if (dump_enabled_p ())\n     {\n-      fprintf (dump_file, \"  not inlinable: %s -> %s, %s\\n\",\n-\t       e->caller->dump_name (),\n-\t       e->callee->dump_name (),\n-\t       cgraph_inline_failed_string (e->inline_failed));\n+      dump_printf_loc (MSG_MISSED_OPTIMIZATION, e->call_stmt,\n+\t\t       \"  not inlinable: %C -> %C, %s\\n\",\n+\t\t       e->caller, e->callee,\n+\t\t       cgraph_inline_failed_string (e->inline_failed));\n       if ((e->inline_failed == CIF_TARGET_OPTION_MISMATCH\n \t   || e->inline_failed == CIF_OPTIMIZATION_MISMATCH)\n \t  && e->caller->lto_file_data\n \t  && e->callee->ultimate_alias_target ()->lto_file_data)\n \t{\n-\t  fprintf (dump_file, \"  LTO objects: %s, %s\\n\",\n-\t\t   e->caller->lto_file_data->file_name,\n-\t\t   e->callee->ultimate_alias_target ()->lto_file_data->file_name);\n+\t  dump_printf_loc (MSG_MISSED_OPTIMIZATION, e->call_stmt,\n+\t\t\t   \"  LTO objects: %s, %s\\n\",\n+\t\t\t   e->caller->lto_file_data->file_name,\n+\t\t\t   e->callee->ultimate_alias_target ()->lto_file_data->file_name);\n \t}\n       if (e->inline_failed == CIF_TARGET_OPTION_MISMATCH)\n \tcl_target_option_print_diff\n@@ -569,8 +570,9 @@ can_early_inline_edge_p (struct cgraph_edge *e)\n   if (!gimple_in_ssa_p (DECL_STRUCT_FUNCTION (e->caller->decl))\n       || !gimple_in_ssa_p (DECL_STRUCT_FUNCTION (callee->decl)))\n     {\n-      if (dump_file)\n-\tfprintf (dump_file, \"  edge not inlinable: not in SSA form\\n\");\n+      if (dump_enabled_p ())\n+\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, e->call_stmt,\n+\t\t\t \"  edge not inlinable: not in SSA form\\n\");\n       return false;\n     }\n   if (!can_inline_edge_p (e, true, true)\n@@ -630,34 +632,34 @@ want_early_inline_function_p (struct cgraph_edge *e)\n       else if (!e->maybe_hot_p ()\n \t       && growth > 0)\n \t{\n-\t  if (dump_file)\n-\t    fprintf (dump_file, \"  will not early inline: %s->%s, \"\n-\t\t     \"call is cold and code would grow by %i\\n\",\n-\t\t     e->caller->dump_name (),\n-\t\t     callee->dump_name (),\n-\t\t     growth);\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, e->call_stmt,\n+\t\t\t     \"  will not early inline: %C->%C, \"\n+\t\t\t     \"call is cold and code would grow by %i\\n\",\n+\t\t\t     e->caller, callee,\n+\t\t\t     growth);\n \t  want_inline = false;\n \t}\n       else if (growth > PARAM_VALUE (PARAM_EARLY_INLINING_INSNS))\n \t{\n-\t  if (dump_file)\n-\t    fprintf (dump_file, \"  will not early inline: %s->%s, \"\n-\t\t     \"growth %i exceeds --param early-inlining-insns\\n\",\n-\t\t     e->caller->dump_name (),\n-\t\t     callee->dump_name (),\n-\t\t     growth);\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, e->call_stmt,\n+\t\t\t     \"  will not early inline: %C->%C, \"\n+\t\t\t     \"growth %i exceeds --param early-inlining-insns\\n\",\n+\t\t\t     e->caller, callee,\n+\t\t\t     growth);\n \t  want_inline = false;\n \t}\n       else if ((n = num_calls (callee)) != 0\n \t       && growth * (n + 1) > PARAM_VALUE (PARAM_EARLY_INLINING_INSNS))\n \t{\n-\t  if (dump_file)\n-\t    fprintf (dump_file, \"  will not early inline: %s->%s, \"\n-\t\t     \"growth %i exceeds --param early-inlining-insns \"\n-\t\t     \"divided by number of calls\\n\",\n-\t\t     e->caller->dump_name (),\n-\t\t     callee->dump_name (),\n-\t\t     growth);\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, e->call_stmt,\n+\t\t\t     \"  will not early inline: %C->%C, \"\n+\t\t\t     \"growth %i exceeds --param early-inlining-insns \"\n+\t\t\t     \"divided by number of calls\\n\",\n+\t\t\t     e->caller, callee,\n+\t\t\t     growth);\n \t  want_inline = false;\n \t}\n     }\n@@ -936,8 +938,9 @@ want_inline_self_recursive_call_p (struct cgraph_edge *edge,\n \t  want_inline = false;\n \t}\n     }\n-  if (!want_inline && dump_file)\n-    fprintf (dump_file, \"   not inlining recursively: %s\\n\", reason);\n+  if (!want_inline && dump_enabled_p ())\n+    dump_printf_loc (MSG_MISSED_OPTIMIZATION, edge->call_stmt,\n+\t\t     \"   not inlining recursively: %s\\n\", reason);\n   return want_inline;\n }\n \n@@ -1562,14 +1565,14 @@ recursive_inlining (struct cgraph_edge *edge,\n   if (!master_clone)\n     return false;\n \n-  if (dump_file)\n-    fprintf (dump_file,\n-\t     \"\\n   Inlined %i times, \"\n-\t     \"body grown from size %i to %i, time %f to %f\\n\", n,\n-\t     ipa_fn_summaries->get (master_clone)->size,\n-\t     ipa_fn_summaries->get (node)->size,\n-\t     ipa_fn_summaries->get (master_clone)->time.to_double (),\n-\t     ipa_fn_summaries->get (node)->time.to_double ());\n+  if (dump_enabled_p ())\n+    dump_printf_loc (MSG_NOTE, edge->call_stmt,\n+\t\t     \"\\n   Inlined %i times, \"\n+\t\t     \"body grown from size %i to %i, time %f to %f\\n\", n,\n+\t\t     ipa_fn_summaries->get (master_clone)->size,\n+\t\t     ipa_fn_summaries->get (node)->size,\n+\t\t     ipa_fn_summaries->get (master_clone)->time.to_double (),\n+\t\t     ipa_fn_summaries->get (node)->time.to_double ());\n \n   /* Remove master clone we used for inlining.  We rely that clones inlined\n      into master clone gets queued just before master clone so we don't\n@@ -2078,17 +2081,20 @@ inline_small_functions (void)\n \tupdate_callee_keys (&edge_heap, n, updated_nodes);\n       bitmap_clear (updated_nodes);\n \n-      if (dump_file)\n+      if (dump_enabled_p ())\n \t{\n \t  ipa_fn_summary *s = ipa_fn_summaries->get (edge->caller);\n-\t  fprintf (dump_file,\n-\t\t   \" Inlined %s into %s which now has time %f and size %i, \"\n-\t\t   \"net change of %+i.\\n\",\n-\t\t   xstrdup_for_dump (edge->callee->name ()),\n-\t\t   xstrdup_for_dump (edge->caller->name ()),\n-\t\t   s->time.to_double (),\n-\t\t   s->size,\n-\t\t   overall_size - old_size);\n+\n+\t  /* dump_printf can't handle %+i.  */\n+\t  char buf_net_change[100];\n+\t  snprintf (buf_net_change, sizeof buf_net_change, \"%+i\",\n+\t\t    overall_size - old_size);\n+\n+\t  dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, edge->call_stmt,\n+\t\t\t   \" Inlined %C into %C which now has time %f and \"\n+\t\t\t   \"size %i, net change of %s.\\n\",\n+\t\t\t   edge->callee, edge->caller,\n+\t\t\t   s->time.to_double (), s->size, buf_net_change);\n \t}\n       if (min_size > overall_size)\n \t{\n@@ -2101,11 +2107,11 @@ inline_small_functions (void)\n     }\n \n   free_growth_caches ();\n-  if (dump_file)\n-    fprintf (dump_file,\n-\t     \"Unit growth for small function inlining: %i->%i (%i%%)\\n\",\n-\t     initial_size, overall_size,\n-\t     initial_size ? overall_size * 100 / (initial_size) - 100: 0);\n+  if (dump_enabled_p ())\n+    dump_printf (MSG_NOTE,\n+\t\t \"Unit growth for small function inlining: %i->%i (%i%%)\\n\",\n+\t\t initial_size, overall_size,\n+\t\t initial_size ? overall_size * 100 / (initial_size) - 100: 0);\n   symtab->remove_edge_removal_hook (edge_removal_hook_holder);\n }\n \n@@ -2130,11 +2136,10 @@ flatten_function (struct cgraph_node *node, bool early)\n       /* We've hit cycle?  It is time to give up.  */\n       if (callee->aux)\n \t{\n-\t  if (dump_file)\n-\t    fprintf (dump_file,\n-\t\t     \"Not inlining %s into %s to avoid cycle.\\n\",\n-\t\t     xstrdup_for_dump (callee->name ()),\n-\t\t     xstrdup_for_dump (e->caller->name ()));\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, e->call_stmt,\n+\t\t\t     \"Not inlining %C into %C to avoid cycle.\\n\",\n+\t\t\t     callee, e->caller);\n \t  if (cgraph_inline_failed_type (e->inline_failed) != CIF_FINAL_ERROR)\n \t    e->inline_failed = CIF_RECURSIVE_INLINING;\n \t  continue;\n@@ -2159,25 +2164,27 @@ flatten_function (struct cgraph_node *node, bool early)\n \n       if (e->recursive_p ())\n \t{\n-\t  if (dump_file)\n-\t    fprintf (dump_file, \"Not inlining: recursive call.\\n\");\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, e->call_stmt,\n+\t\t\t     \"Not inlining: recursive call.\\n\");\n \t  continue;\n \t}\n \n       if (gimple_in_ssa_p (DECL_STRUCT_FUNCTION (node->decl))\n \t  != gimple_in_ssa_p (DECL_STRUCT_FUNCTION (callee->decl)))\n \t{\n-\t  if (dump_file)\n-\t    fprintf (dump_file, \"Not inlining: SSA form does not match.\\n\");\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, e->call_stmt,\n+\t\t\t     \"Not inlining: SSA form does not match.\\n\");\n \t  continue;\n \t}\n \n       /* Inline the edge and flatten the inline clone.  Avoid\n          recursing through the original node if the node was cloned.  */\n-      if (dump_file)\n-\tfprintf (dump_file, \" Inlining %s into %s.\\n\",\n-\t\t xstrdup_for_dump (callee->name ()),\n-\t\t xstrdup_for_dump (e->caller->name ()));\n+      if (dump_enabled_p ())\n+\tdump_printf_loc (MSG_OPTIMIZED_LOCATIONS, e->call_stmt,\n+\t\t\t \" Inlining %C into %C.\\n\",\n+\t\t\t callee, e->caller);\n       orig_callee = callee;\n       inline_call (e, true, NULL, NULL, false);\n       if (e->callee != orig_callee)\n@@ -2589,13 +2596,12 @@ ipa_inline (void)\n   /* Free ipa-prop structures if they are no longer needed.  */\n   ipa_free_all_structures_after_iinln ();\n \n+  if (dump_enabled_p ())\n+    dump_printf (MSG_NOTE,\n+\t\t \"\\nInlined %i calls, eliminated %i functions\\n\\n\",\n+\t\t ncalls_inlined, nfunctions_inlined);\n   if (dump_file)\n-    {\n-      fprintf (dump_file,\n-\t       \"\\nInlined %i calls, eliminated %i functions\\n\\n\",\n-\t       ncalls_inlined, nfunctions_inlined);\n-      dump_inline_stats ();\n-    }\n+    dump_inline_stats ();\n \n   if (dump_file)\n     ipa_dump_fn_summaries (dump_file);\n@@ -2618,9 +2624,10 @@ inline_always_inline_functions (struct cgraph_node *node)\n \n       if (e->recursive_p ())\n \t{\n-\t  if (dump_file)\n-\t    fprintf (dump_file, \"  Not inlining recursive call to %s.\\n\",\n-\t\t     e->callee->name ());\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, e->call_stmt,\n+\t\t\t     \"  Not inlining recursive call to %C.\\n\",\n+\t\t\t     e->callee);\n \t  e->inline_failed = CIF_RECURSIVE_INLINING;\n \t  continue;\n \t}\n@@ -2636,10 +2643,10 @@ inline_always_inline_functions (struct cgraph_node *node)\n \t  continue;\n \t}\n \n-      if (dump_file)\n-\tfprintf (dump_file, \"  Inlining %s into %s (always_inline).\\n\",\n-\t\t xstrdup_for_dump (e->callee->name ()),\n-\t\t xstrdup_for_dump (e->caller->name ()));\n+      if (dump_enabled_p ())\n+\tdump_printf_loc (MSG_OPTIMIZED_LOCATIONS, e->call_stmt,\n+\t\t\t \"  Inlining %C into %C (always_inline).\\n\",\n+\t\t\t e->callee, e->caller);\n       inline_call (e, true, NULL, NULL, false);\n       inlined = true;\n     }\n@@ -2675,27 +2682,29 @@ early_inline_small_functions (struct cgraph_node *node)\n \t  && !opt_for_fn (node->decl, flag_inline_functions))\n \tcontinue;\n \n-      if (dump_file)\n-\tfprintf (dump_file, \"Considering inline candidate %s.\\n\",\n-\t\t callee->name ());\n+      if (dump_enabled_p ())\n+\tdump_printf_loc (MSG_NOTE, e->call_stmt,\n+\t\t\t \"Considering inline candidate %C.\\n\",\n+\t\t\t callee);\n \n       if (!can_early_inline_edge_p (e))\n \tcontinue;\n \n       if (e->recursive_p ())\n \t{\n-\t  if (dump_file)\n-\t    fprintf (dump_file, \"  Not inlining: recursive call.\\n\");\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, e->call_stmt,\n+\t\t\t     \"  Not inlining: recursive call.\\n\");\n \t  continue;\n \t}\n \n       if (!want_early_inline_function_p (e))\n \tcontinue;\n \n-      if (dump_file)\n-\tfprintf (dump_file, \" Inlining %s into %s.\\n\",\n-\t\t xstrdup_for_dump (callee->name ()),\n-\t\t xstrdup_for_dump (e->caller->name ()));\n+      if (dump_enabled_p ())\n+\tdump_printf_loc (MSG_OPTIMIZED_LOCATIONS, e->call_stmt,\n+\t\t\t \" Inlining %C into %C.\\n\",\n+\t\t\t callee, e->caller);\n       inline_call (e, true, NULL, NULL, false);\n       inlined = true;\n     }\n@@ -2755,9 +2764,9 @@ early_inliner (function *fun)\n     {\n       /* When the function is marked to be flattened, recursively inline\n \t all calls in it.  */\n-      if (dump_file)\n-\tfprintf (dump_file,\n-\t\t \"Flattening %s\\n\", node->name ());\n+      if (dump_enabled_p ())\n+\tdump_printf (MSG_OPTIMIZED_LOCATIONS,\n+\t\t     \"Flattening %C\\n\", node);\n       flatten_function (node, true);\n       inlined = true;\n     }"}, {"sha": "c7767ec487392325a6c825dc32c154116b33fb3d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4174a33ac66f45536e3d7bd46167d7f678310931", "patch": "@@ -1,3 +1,49 @@\n+2018-11-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR ipa/86395\n+\t* g++.dg/ipa/devirt-12.C: Add \"-all\" suffix to\n+\t\"-fdump-ipa-inline\".\n+\t* g++.dg/ipa/imm-devirt-1.C: Add \"-optimized\" suffix to\n+\t\"-fdump-tree-einline\".\n+\t* g++.dg/tree-prof/inline_mismatch_args.C: Add \"-all\" suffix to\n+\t\"-fdump-tree-einline\".\n+\t* g++.dg/tree-ssa/inline-1.C: Add \"-optimized\" suffix to\n+\t\"-fdump-tree-einline\".\n+\t* g++.dg/tree-ssa/inline-2.C: Likewise.\n+\t* g++.dg/tree-ssa/inline-3.C: Likewise.\n+\t* g++.dg/tree-ssa/inline-4.C: New test, based on inline-1.C, but\n+\tusing \"-fopt-info-inline\".\n+\t* gcc.dg/ipa/fopt-info-inline-1.c: New test.\n+\t* gcc.dg/ipa/inline-4.c:  Add \"-all\" suffix to\n+\t\"-fdump-ipa-inline\".  Add \"-fopt-info-inline\" and dg-optimized\n+\tdirective.\n+\t* gcc.dg/ipa/inline-7.c: Add \"-optimized\" suffix to\n+\t\"-fdump-tree-einline\".  Add \"-fopt-info-inline\" and dg-optimized\n+\tdirective.  Update scan-tree-dump-times to reflect /order\n+\tsuffixes.\n+\t* gcc.dg/ipa/inlinehint-4.c: Update scan-tree-dump-times to\n+\treflect /order suffixes.\n+\t* gcc.dg/plugin/dump-1.c: Add \"-loop\" to \"-fopt-info-note\" to\n+\tavoid getting extra messages from inliner.\n+\t* gcc.dg/plugin/dump-2.c: Likewise.\n+\t* gcc.dg/pr26570.c: Add dg-prune-output to ignore new\n+\t\"function body not available\" missed optimization messages.\n+\t* gcc.dg/pr71969-2.c: Update scan-tree-dump-times to reflect\n+\t/order suffixes.\n+\t* gcc.dg/pr71969-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/inline-11.c: Add \"-all\" suffix to\n+\t\"-fdump-tree-einline\".\n+\t* gcc.dg/tree-ssa/inline-3.c: Add \"-optimized\" suffix to\n+\t\"-fdump-tree-einline\".  Update scan-tree-dump-times to reflect\n+\t/order suffixes.\n+\t* gcc.dg/tree-ssa/inline-4.c: Add \"-optimized\" suffix to\n+\t\"-fdump-tree-einline\".  Add \"-fopt-info-inline\" and dg-optimized\n+\tdirective.\n+\t* gcc.dg/tree-ssa/inline-8.c: Add \"-optimized\" suffix to\n+\t\"-fdump-tree-einline\".\n+\t* gfortran.dg/pr79966.f90: Update scan-ipa-dump to reflect /order\n+\tsuffixes.\n+\n 2018-11-08  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/format/gcc_diag-10.c: Add coverage for %f."}, {"sha": "60271a0d7583c956ac188a962274f20b7df0b7d6", "filename": "gcc/testsuite/g++.dg/ipa/devirt-12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-12.C?ref=4174a33ac66f45536e3d7bd46167d7f678310931", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile { target c++11 } }\n-// { dg-options \"-O -fdump-ipa-inline\" }\n+// { dg-options \"-O -fdump-ipa-inline-all\" }\n \n class Foo\n {"}, {"sha": "00ac61e7f3848152d3e342e88397453dcafb9f21", "filename": "gcc/testsuite/g++.dg/ipa/imm-devirt-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fimm-devirt-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fimm-devirt-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fimm-devirt-1.C?ref=4174a33ac66f45536e3d7bd46167d7f678310931", "patch": "@@ -1,7 +1,7 @@\n /* Verify that virtual calls are folded even early inlining puts them into one\n    function with the definition.  */\n /* { dg-do run } */\n-/* { dg-options \"-O2 -fdump-tree-einline\"  } */\n+/* { dg-options \"-O2 -fdump-tree-einline-optimized\"  } */\n \n extern \"C\" void abort (void);\n "}, {"sha": "b65d9153572dac16a78c2ec1292ad3ee0d8fbc3a", "filename": "gcc/testsuite/g++.dg/tree-prof/inline_mismatch_args.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Finline_mismatch_args.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Finline_mismatch_args.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Finline_mismatch_args.C?ref=4174a33ac66f45536e3d7bd46167d7f678310931", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-O2 -fdump-tree-einline\" } */\n+/* { dg-options \"-O2 -fdump-tree-einline-all\" } */\n class DocId {\n  public:\n  DocId() { }"}, {"sha": "9c49ddb912a3e9927cf63d38847f6ab5f88a0166", "filename": "gcc/testsuite/g++.dg/tree-ssa/inline-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Finline-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Finline-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Finline-1.C?ref=4174a33ac66f45536e3d7bd46167d7f678310931", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-einline --param max-early-inliner-iterations=3\" } */\n+/* { dg-options \"-O2 -fdump-tree-einline-optimized --param max-early-inliner-iterations=3\" } */\n /* { dg-add-options bind_pic_locally } */\n \n namespace std {"}, {"sha": "b72f6523bead4351e1bb251c892afd963a426ba7", "filename": "gcc/testsuite/g++.dg/tree-ssa/inline-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Finline-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Finline-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Finline-2.C?ref=4174a33ac66f45536e3d7bd46167d7f678310931", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-einline --param max-early-inliner-iterations=3\" } */\n+/* { dg-options \"-O2 -fdump-tree-einline-optimized --param max-early-inliner-iterations=3\" } */\n /* { dg-add-options bind_pic_locally } */\n \n namespace std {"}, {"sha": "131f12df9d484bcb1783d16735fe675d30d1d647", "filename": "gcc/testsuite/g++.dg/tree-ssa/inline-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Finline-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Finline-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Finline-3.C?ref=4174a33ac66f45536e3d7bd46167d7f678310931", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-einline --param max-early-inliner-iterations=5\" } */\n+/* { dg-options \"-O2 -fdump-tree-einline-optimized --param max-early-inliner-iterations=5\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <algorithm>"}, {"sha": "1dd81409cf3dc9494426ca995995a9d13c7bd620", "filename": "gcc/testsuite/g++.dg/tree-ssa/inline-4.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Finline-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Finline-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Finline-4.C?ref=4174a33ac66f45536e3d7bd46167d7f678310931", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopt-info-inline --param max-early-inliner-iterations=3\" } */\n+/* { dg-add-options bind_pic_locally } */\n+\n+namespace std {\n+  extern \"C\" int puts(const char *s);\n+}\n+\n+template <class T, class E> void\n+foreach (T b, T e, void (*ptr)(E))\n+{\n+  for (; b != e; b++)\n+    ptr(*b); // { dg-optimized \"Inlining void inline_me\\[^\\\\n\\]* into int main\\[^\\\\n\\]*\" }\n+}\n+\n+void\n+inline_me (char *x)\n+{\n+  std::puts(x); \n+}\n+\n+static void\n+inline_me_too (char *x)\n+{\n+  std::puts(x);\n+}\n+\n+int main(int argc, char **argv)\n+{\n+  foreach (argv, argv + argc, inline_me); // { dg-optimized \"Inlining void foreach\\[^\\\\n\\]* into int main\\[^\\\\n\\]*\" }\n+  foreach (argv, argv + argc, inline_me_too); // { dg-optimized \"Inlining void foreach\\[^\\\\n\\]* into int main\\[^\\\\n\\]*\" }\n+}"}, {"sha": "4032ad13e19669aec6a03d3f41ca36d9956bf191", "filename": "gcc/testsuite/gcc.dg/ipa/fopt-info-inline-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Ffopt-info-inline-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Ffopt-info-inline-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Ffopt-info-inline-1.c?ref=4174a33ac66f45536e3d7bd46167d7f678310931", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-options \"-O3 -fopt-info-inline-optimized-missed\" } */\n+\n+static int foo (int a)\n+{\n+  return a + 10;\n+}\n+\n+static int bar (int b)\n+{\n+  return b - 20;\n+}\n+\n+static int boo (int a, int b)\n+{\n+  return (foo (a)     /* { dg-optimized \"Inlining foo/\\[0-9\\]+ into boo/\\[0-9\\]+\" } */\n+\t  + bar (b)); /* { dg-optimized \"Inlining bar/\\[0-9\\]+ into boo/\\[0-9\\]+\" } */\n+}\n+\n+extern int v_a, v_b;\n+extern int result;\n+\n+int compute ()\n+{\n+  result = boo (v_a, v_b); /* { dg-optimized \"Inlining boo/\\[0-9\\]+ into compute/\\[0-9\\]+\" } */\n+\n+  return result;\n+}\n+\n+extern void not_available(int);\n+\n+int __attribute__ ((noinline,noclone)) get_input(void)\n+{\n+  return 1;\n+}\n+\n+int test_1 ()\n+{\n+  return get_input (); /* { dg-missed \"not inlinable: test_1/\\[0-9\\]+ -> get_input/\\[0-9\\]+, function not inlinable\" } */\n+}\n+\n+void test_2 (int v)\n+{\n+  not_available (1); /* { dg-missed \"not inlinable: test_2/\\[0-9\\]+ -> not_available/\\[0-9\\]+, function body not available\" } */\n+}"}, {"sha": "db4cfc6b8addc6e1bc15fd5bbb0ccbd14b5eda0a", "filename": "gcc/testsuite/gcc.dg/ipa/inline-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Finline-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Finline-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Finline-4.c?ref=4174a33ac66f45536e3d7bd46167d7f678310931", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Os -c -fdump-ipa-inline -fno-early-inlining -fno-partial-inlining -fno-ipa-cp\"  } */\n+/* { dg-options \"-Os -c -fdump-ipa-inline-all -fopt-info-inline -fno-early-inlining -fno-partial-inlining -fno-ipa-cp\"  } */\n /* { dg-add-options bind_pic_locally } */\n \n void work_hard (void);\n@@ -20,7 +20,7 @@ void do_something (int shall_i_work)\n }\n int foo (int invariant)\n {\n-  do_something (0);\n+  do_something (0); // { dg-optimized \"Inlined do_something/\\[0-9]+ into foo/\\[0-9]+\" }\n   do_something (1);\n }\n "}, {"sha": "7dabb14f6b1a327bdbd26d3bf07f3a3d3647b39b", "filename": "gcc/testsuite/gcc.dg/ipa/inline-7.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Finline-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Finline-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Finline-7.c?ref=4174a33ac66f45536e3d7bd46167d7f678310931", "patch": "@@ -1,6 +1,6 @@\n /* Check that early inliner works out that a is empty of parameter 0.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-einline -fno-partial-inlining\"  } */\n+/* { dg-options \"-O2 -fdump-tree-einline-optimized -fopt-info-inline -fno-partial-inlining\"  } */\n void t(void);\n int a (int b)\n {\n@@ -18,7 +18,7 @@ int a (int b)\n void\n m()\n {\n- a(1);\n+ a(1); /* { dg-optimized \"Inlining a/\\[0-9\\]* into m/\\[0-9\\]*\" } */\n  a(0);\n }\n-/* { dg-final { scan-tree-dump-times \"Inlining a into m\" 1 \"einline\"  } } */\n+/* { dg-final { scan-tree-dump-times \"Inlining a.* into m.*\" 1 \"einline\"  } } */"}, {"sha": "ecb9a293d1c9d733f2e5e8267f5ddad0b19b5e2e", "filename": "gcc/testsuite/gcc.dg/ipa/inlinehint-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Finlinehint-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Finlinehint-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Finlinehint-4.c?ref=4174a33ac66f45536e3d7bd46167d7f678310931", "patch": "@@ -35,5 +35,5 @@ test (int i)\n     lookup (9 * i);\n }\n /* { dg-final { scan-ipa-dump \"Wrapper penalty\"  \"inline\"  } } */\n-/* { dg-final { scan-ipa-dump-not \"Inlined lookup_slow into lookup\"  \"inline\"  } } */\n-/* { dg-final { scan-ipa-dump \"Inlined lookup into test\"  \"inline\"  } } */\n+/* { dg-final { scan-ipa-dump-not \"Inlined lookup_slow/\\[0-9\\]* into lookup/\\[0-9\\]*\"  \"inline\"  } } */\n+/* { dg-final { scan-ipa-dump \"Inlined lookup/\\[0-9\\]* into test/\\[0-9\\]*\"  \"inline\"  } } */"}, {"sha": "1538bf6ccd6f469b792ef3cb8b2745ca074542c1", "filename": "gcc/testsuite/gcc.dg/plugin/dump-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdump-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdump-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdump-1.c?ref=4174a33ac66f45536e3d7bd46167d7f678310931", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fopt-info-note\" } */\n+/* { dg-options \"-fopt-info-loop-note\" } */\n \n extern void test_string_literal (void);\n extern void test_tree (void);"}, {"sha": "04b82e5038be4bae2538807af46cc5712cd5dbf4", "filename": "gcc/testsuite/gcc.dg/plugin/dump-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdump-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdump-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdump-2.c?ref=4174a33ac66f45536e3d7bd46167d7f678310931", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fopt-info-note-internals\" } */\n+/* { dg-options \"-fopt-info-loop-note-internals\" } */\n \n extern void test_string_literal (void);\n extern void test_tree (void);"}, {"sha": "d29bc358533446dbb445714e7870a7cab02f762f", "filename": "gcc/testsuite/gcc.dg/pr26570.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgcc.dg%2Fpr26570.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgcc.dg%2Fpr26570.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr26570.c?ref=4174a33ac66f45536e3d7bd46167d7f678310931", "patch": "@@ -6,3 +6,4 @@ unsigned test (unsigned a, unsigned b)\n {\n   return a / b;\n } /* { dg-missed \"\\[^\\n\\]*execution counts estimated\" } */\n+/* { dg-prune-output \"function body not available\" } */"}, {"sha": "73839a6d0e8090875f669fcf845551802dafd5d4", "filename": "gcc/testsuite/gcc.dg/pr71969-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71969-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71969-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71969-2.c?ref=4174a33ac66f45536e3d7bd46167d7f678310931", "patch": "@@ -20,4 +20,4 @@ main ()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"Inlining foo into main\" 4 \"einline\" } } */\n+/* { dg-final { scan-tree-dump-times \"Inlining foo/\\[0-9\\]* into main/\\[0-9\\]*\" 4 \"einline\" } } */"}, {"sha": "189adfd458009e2bb06ac7c91058e782171283b4", "filename": "gcc/testsuite/gcc.dg/pr71969-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71969-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71969-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71969-3.c?ref=4174a33ac66f45536e3d7bd46167d7f678310931", "patch": "@@ -35,4 +35,4 @@ main ()\n }\n \n /* { dg-final { scan-tree-dump-times \"will not early inline\" 8 \"einline\" } } */\n-/* { dg-final { scan-tree-dump-times \"Inlining foo into main\" 4 \"einline\" } } */\n+/* { dg-final { scan-tree-dump-times \"Inlining foo/\\[0-9\\]* into main/\\[0-9\\]*\" 4 \"einline\" } } */"}, {"sha": "5673c32f7570d15a0f420457bfc690acea28f29d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/inline-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-11.c?ref=4174a33ac66f45536e3d7bd46167d7f678310931", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-require-weak \"\" } */\n-/* { dg-options \"-O2 -fdump-tree-einline\" } */\n+/* { dg-options \"-O2 -fdump-tree-einline-all\" } */\n int w;\n int bar (void) __attribute__ ((weak));\n int bar (){"}, {"sha": "cd441aff6c5d6cd85f95b58a02d3f9149fdc35c0", "filename": "gcc/testsuite/gcc.dg/tree-ssa/inline-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-3.c?ref=4174a33ac66f45536e3d7bd46167d7f678310931", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-einline --param max-early-inliner-iterations=2\" } */\n+/* { dg-options \"-O2 -fdump-tree-einline-optimized --param max-early-inliner-iterations=2\" } */\n /* { dg-add-options bind_pic_locally } */\n \n extern void inlined ();\n@@ -27,5 +27,5 @@ inline_me_too (void)\n {\n   inlined();\n }\n-/* { dg-final { scan-tree-dump-times \"Inlining inline_me \" 1 \"einline\"} } */\n-/* { dg-final { scan-tree-dump-times \"Inlining inline_me_too \" 1 \"einline\"} } */\n+/* { dg-final { scan-tree-dump-times \"Inlining inline_me/\\[0-9\\]* \" 1 \"einline\"} } */\n+/* { dg-final { scan-tree-dump-times \"Inlining inline_me_too/\\[0-9\\]* \" 1 \"einline\"} } */"}, {"sha": "93412fa697f5f1c1c8d785147677b4949d864d61", "filename": "gcc/testsuite/gcc.dg/tree-ssa/inline-4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-4.c?ref=4174a33ac66f45536e3d7bd46167d7f678310931", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-einline\" } */\n+/* { dg-options \"-O2 -fdump-tree-einline-optimized -fopt-info-inline\" } */\n /* { dg-add-options bind_pic_locally } */\n \n extern int rand(void);\n@@ -13,7 +13,7 @@ int my_id;\n \n int main()\n {\n-  int res = get_data_for (my_id);\n+  int res = get_data_for (my_id); /* { dg-optimized \"Inlining get_data_for/\\[0-9\\]+ into main/\\[0-9\\]+.\" } */\n   switch (res)\n     {\n       case 0:\n@@ -23,4 +23,4 @@ int main()\n     }\n }\n \n-/* { dg-final { scan-tree-dump \"Inlining get_data_for into main\" \"einline\" } } */\n+/* { dg-final { scan-tree-dump \"Inlining get_data_for/\\[0-9\\]* into main/\\[0-9\\]*\" \"einline\" } } */"}, {"sha": "f87e0b58e99bb6463ab9e6c7b1a4cdccbc296e0c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/inline-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-8.c?ref=4174a33ac66f45536e3d7bd46167d7f678310931", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -finline-small-functions --param early-inlining-insns=0 -fdump-tree-einline\" } */\n+/* { dg-options \"-O -finline-small-functions --param early-inlining-insns=0 -fdump-tree-einline-optimized\" } */\n \n int foo0();\n void bar0() { foo0(); }"}, {"sha": "2170afd049a35674f2bfb28e317beb294c2221d0", "filename": "gcc/testsuite/gfortran.dg/pr79966.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr79966.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr79966.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr79966.f90?ref=4174a33ac66f45536e3d7bd46167d7f678310931", "patch": "@@ -109,4 +109,4 @@ program Main\n   call RunTPTests()\n   end program\n \n-! { dg-final { scan-ipa-dump \"Inlined tp_sum into runtptests\" \"inline\" } }\n+! { dg-final { scan-ipa-dump \"Inlined tp_sum/\\[0-9\\]+ into runtptests/\\[0-9\\]+\" \"inline\" } }"}, {"sha": "5ce319af4a5998225be8c83d165075e590719e15", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=4174a33ac66f45536e3d7bd46167d7f678310931", "patch": "@@ -4673,14 +4673,20 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n   /* Add local vars in this inlined callee to caller.  */\n   add_local_variables (id->src_cfun, cfun, id);\n \n-  if (dump_file && (dump_flags & TDF_DETAILS))\n+  if (dump_enabled_p ())\n     {\n-      fprintf (dump_file, \"Inlining %s to %s with frequency %4.2f\\n\",\n-\t       id->src_node->dump_name (),\n-\t       id->dst_node->dump_name (),\n-\t       cg_edge->sreal_frequency ().to_double ());\n-      id->src_node->dump (dump_file);\n-      id->dst_node->dump (dump_file);\n+      char buf[128];\n+      snprintf (buf, sizeof(buf), \"%4.2f\",\n+\t\tcg_edge->sreal_frequency ().to_double ());\n+      dump_printf_loc (MSG_NOTE | MSG_PRIORITY_INTERNALS,\n+\t\t       call_stmt,\n+\t\t       \"Inlining %C to %C with frequency %s\\n\",\n+\t\t       id->src_node, id->dst_node, buf);\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t{\n+\t  id->src_node->dump (dump_file);\n+\t  id->dst_node->dump (dump_file);\n+\t}\n     }\n \n   /* This is it.  Duplicate the callee body.  Assume callee is"}]}