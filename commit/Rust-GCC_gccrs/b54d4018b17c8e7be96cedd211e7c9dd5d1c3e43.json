{"sha": "b54d4018b17c8e7be96cedd211e7c9dd5d1c3e43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU0ZDQwMThiMTdjOGU3YmU5NmNlZGQyMTFlN2M5ZGQ1ZDFjM2U0Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-08-31T15:39:04Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-08-31T15:39:04Z"}, "message": "PR c++/82029 - __PRETTY_FUNCTION__ in lambda in template\n\n\t* pt.c (enclosing_instantiation_of, lambda_fn_in_template_p)\n\t(regenerated_lambda_fn_p): New.\n\t(tsubst_decl) [VAR_DECL]: Use enclosing_instantiation_of.\n\t(tsubst_copy) [VAR_DECL]: Likewise.\n\nFrom-SVN: r251567", "tree": {"sha": "b4c0272397b660cccc114bdba77600bbaa9f0269", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4c0272397b660cccc114bdba77600bbaa9f0269"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b54d4018b17c8e7be96cedd211e7c9dd5d1c3e43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b54d4018b17c8e7be96cedd211e7c9dd5d1c3e43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b54d4018b17c8e7be96cedd211e7c9dd5d1c3e43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b54d4018b17c8e7be96cedd211e7c9dd5d1c3e43/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "28f4ff35247bb085d5de9816c6ced4dc4e14269e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28f4ff35247bb085d5de9816c6ced4dc4e14269e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28f4ff35247bb085d5de9816c6ced4dc4e14269e"}], "stats": {"total": 82, "additions": 78, "deletions": 4}, "files": [{"sha": "4a791ddbbb4be60b29af5f713f1a85cbf630b823", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54d4018b17c8e7be96cedd211e7c9dd5d1c3e43/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54d4018b17c8e7be96cedd211e7c9dd5d1c3e43/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b54d4018b17c8e7be96cedd211e7c9dd5d1c3e43", "patch": "@@ -1,5 +1,11 @@\n 2017-08-30  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/82029 - __PRETTY_FUNCTION__ in lambda in template\n+\t* pt.c (enclosing_instantiation_of, lambda_fn_in_template_p)\n+\t(regenerated_lambda_fn_p): New.\n+\t(tsubst_decl) [VAR_DECL]: Use enclosing_instantiation_of.\n+\t(tsubst_copy) [VAR_DECL]: Likewise.\n+\n \tPR c++/82030 - ICE inheriting from multiple lambdas\n \tPR c++/80767\n \t* call.c (compare_ics): Handle null candidate."}, {"sha": "d5ab93985a3f0192c4749227c33b2f0adc48410a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 59, "deletions": 4, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54d4018b17c8e7be96cedd211e7c9dd5d1c3e43/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54d4018b17c8e7be96cedd211e7c9dd5d1c3e43/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b54d4018b17c8e7be96cedd211e7c9dd5d1c3e43", "patch": "@@ -12587,6 +12587,63 @@ tsubst_template_decl (tree t, tree args, tsubst_flags_t complain,\n   return r;\n }\n \n+/* True if FN is the op() for a lambda in an uninstantiated template.  */\n+\n+bool\n+lambda_fn_in_template_p (tree fn)\n+{\n+  if (!LAMBDA_FUNCTION_P (fn))\n+    return false;\n+  tree closure = DECL_CONTEXT (fn);\n+  return CLASSTYPE_TEMPLATE_INFO (closure) != NULL_TREE;\n+}\n+\n+/* True if FN is the op() for a lambda regenerated from a lambda in an\n+   uninstantiated template.  */\n+\n+bool\n+regenerated_lambda_fn_p (tree fn)\n+{\n+  return (LAMBDA_FUNCTION_P (fn)\n+\t  && !DECL_TEMPLATE_INSTANTIATION (fn));\n+}\n+\n+/* We're instantiating a variable from template function TCTX.  Return the\n+   corresponding current enclosing scope.  This gets complicated because lambda\n+   functions in templates are regenerated rather than instantiated, but generic\n+   lambda functions are subsequently instantiated.  */\n+\n+static tree\n+enclosing_instantiation_of (tree tctx)\n+{\n+  tree fn = current_function_decl;\n+  int lambda_count = 0;\n+\n+  for (; tctx && lambda_fn_in_template_p (tctx);\n+       tctx = decl_function_context (tctx))\n+    ++lambda_count;\n+  for (; fn; fn = decl_function_context (fn))\n+    {\n+      tree lambda = fn;\n+      int flambda_count = 0;\n+      for (; fn && regenerated_lambda_fn_p (fn);\n+\t   fn = decl_function_context (fn))\n+\t++flambda_count;\n+      if (DECL_TEMPLATE_INFO (fn)\n+\t  ? most_general_template (fn) != most_general_template (tctx)\n+\t  : fn != tctx)\n+\tcontinue;\n+      if (lambda_count)\n+\t{\n+\t  fn = lambda;\n+\t  while (flambda_count-- > lambda_count)\n+\t    fn = decl_function_context (fn);\n+\t}\n+      return fn;\n+    }\n+  gcc_unreachable ();\n+}\n+\n /* Substitute the ARGS into the T, which is a _DECL.  Return the\n    result of the substitution.  Issue error and warning messages under\n    control of COMPLAIN.  */\n@@ -12955,7 +13012,7 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t       enclosing function, in which case we need to fill it in now.  */\n \t    if (TREE_STATIC (t))\n \t      {\n-\t\ttree fn = tsubst (DECL_CONTEXT (t), args, complain, in_decl);\n+\t\ttree fn = enclosing_instantiation_of (DECL_CONTEXT (t));\n \t\tif (fn != current_function_decl)\n \t\t  ctx = fn;\n \t      }\n@@ -14734,9 +14791,7 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t      if (r && !is_capture_proxy (r))\n \t\t{\n \t\t  /* Make sure that the one we found is the one we want.  */\n-\t\t  tree ctx = DECL_CONTEXT (t);\n-\t\t  if (DECL_LANG_SPECIFIC (ctx) && DECL_TEMPLATE_INFO (ctx))\n-\t\t    ctx = tsubst (ctx, args, complain, in_decl);\n+\t\t  tree ctx = enclosing_instantiation_of (DECL_CONTEXT (t));\n \t\t  if (ctx != DECL_CONTEXT (r))\n \t\t    r = NULL_TREE;\n \t\t}"}, {"sha": "bc0e3b2a55b85745329fca111e42c530857ac7a8", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-__func__2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54d4018b17c8e7be96cedd211e7c9dd5d1c3e43/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-__func__2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54d4018b17c8e7be96cedd211e7c9dd5d1c3e43/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-__func__2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-__func__2.C?ref=b54d4018b17c8e7be96cedd211e7c9dd5d1c3e43", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/82029\n+// { dg-do compile { target c++11 } }\n+\n+template <typename> struct A {\n+  void m_fn1() {\n+    [] { return __func__; }();\n+  }\n+};\n+struct B {\n+  A<int> a;\n+  void m_fn2();\n+};\n+void B::m_fn2() { a.m_fn1(); }"}]}