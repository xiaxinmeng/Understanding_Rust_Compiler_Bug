{"sha": "9cabb1d829171fe3d039c1e8b60ff8d5b056de43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNhYmIxZDgyOTE3MWZlM2QwMzljMWU4YjYwZmY4ZDViMDU2ZGU0Mw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-05-08T02:05:00Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-05-08T02:05:00Z"}, "message": "* toplev.c: Fix formatting.\n\nFrom-SVN: r53276", "tree": {"sha": "ac08360dd566f5504f836ad98311720a72a6a34c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac08360dd566f5504f836ad98311720a72a6a34c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cabb1d829171fe3d039c1e8b60ff8d5b056de43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cabb1d829171fe3d039c1e8b60ff8d5b056de43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cabb1d829171fe3d039c1e8b60ff8d5b056de43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cabb1d829171fe3d039c1e8b60ff8d5b056de43/comments", "author": null, "committer": null, "parents": [{"sha": "6b9b5de22a60008f1139279ad1bf7141aeab1341", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b9b5de22a60008f1139279ad1bf7141aeab1341", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b9b5de22a60008f1139279ad1bf7141aeab1341"}], "stats": {"total": 158, "additions": 81, "deletions": 77}, "files": [{"sha": "d7f9913144914a4a19ab4949cdc2cc646da9466d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cabb1d829171fe3d039c1e8b60ff8d5b056de43/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cabb1d829171fe3d039c1e8b60ff8d5b056de43/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9cabb1d829171fe3d039c1e8b60ff8d5b056de43", "patch": "@@ -1,3 +1,7 @@\n+2002-05-07  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* toplev.c: Fix formatting.\n+\n 2002-05-07  Janis Johnson  <janis187@us.ibm.com>\n \n \t* config.in (ENABLE_RTL_FLAG_CHECKING): New."}, {"sha": "6984edb6396fdfd9459923f42f296c90b0c32f35", "filename": "gcc/toplev.c", "status": "modified", "additions": 77, "deletions": 77, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cabb1d829171fe3d039c1e8b60ff8d5b056de43/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cabb1d829171fe3d039c1e8b60ff8d5b056de43/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=9cabb1d829171fe3d039c1e8b60ff8d5b056de43", "patch": "@@ -1166,89 +1166,89 @@ documented_lang_options[] =\n      used here is to only describe those options which are not\n      enabled by default.  */\n \n-  { \"-ansi\", \n+  { \"-ansi\",\n     N_(\"Compile just for ISO C89\") },\n-  { \"-std= \", \n+  { \"-std= \",\n     N_(\"Determine language standard\") },\n \n   { \"-fsigned-bitfields\", \"\" },\n   { \"-funsigned-bitfields\",\n     N_(\"Make bit-fields by unsigned by default\") },\n   { \"-fno-signed-bitfields\", \"\" },\n   { \"-fno-unsigned-bitfields\",\"\" },\n-  { \"-fsigned-char\", \n+  { \"-fsigned-char\",\n     N_(\"Make 'char' be signed by default\") },\n-  { \"-funsigned-char\", \n+  { \"-funsigned-char\",\n     N_(\"Make 'char' be unsigned by default\") },\n   { \"-fno-signed-char\", \"\" },\n   { \"-fno-unsigned-char\", \"\" },\n \n   { \"-fasm\", \"\" },\n-  { \"-fno-asm\", \n+  { \"-fno-asm\",\n     N_(\"Do not recognize the 'asm' keyword\") },\n   { \"-fbuiltin\", \"\" },\n-  { \"-fno-builtin\", \n+  { \"-fno-builtin\",\n     N_(\"Do not recognize any built in functions\") },\n-  { \"-fhosted\", \n+  { \"-fhosted\",\n     N_(\"Assume normal C execution environment\") },\n   { \"-fno-hosted\", \"\" },\n   { \"-ffreestanding\",\n     N_(\"Assume that standard libraries & main might not exist\") },\n   { \"-fno-freestanding\", \"\" },\n-  { \"-fcond-mismatch\", \n+  { \"-fcond-mismatch\",\n     N_(\"Allow different types as args of ? operator\") },\n   { \"-fno-cond-mismatch\", \"\" },\n-  { \"-fdollars-in-identifiers\", \n+  { \"-fdollars-in-identifiers\",\n     N_(\"Allow the use of $ inside identifiers\") },\n   { \"-fno-dollars-in-identifiers\", \"\" },\n   { \"-fpreprocessed\", \"\" },\n   { \"-fno-preprocessed\", \"\" },\n-  { \"-fshort-double\", \n+  { \"-fshort-double\",\n     N_(\"Use the same size for double as for float\") },\n   { \"-fno-short-double\", \"\" },\n-  { \"-fshort-enums\", \n+  { \"-fshort-enums\",\n     N_(\"Use the smallest fitting integer to hold enums\") },\n   { \"-fno-short-enums\", \"\" },\n-  { \"-fshort-wchar\", \n+  { \"-fshort-wchar\",\n     N_(\"Override the underlying type for wchar_t to `unsigned short'\") },\n   { \"-fno-short-wchar\", \"\" },\n \n-  { \"-Wall\", \n+  { \"-Wall\",\n     N_(\"Enable most warning messages\") },\n   { \"-Wbad-function-cast\",\n     N_(\"Warn about casting functions to incompatible types\") },\n   { \"-Wno-bad-function-cast\", \"\" },\n   { \"-Wmissing-format-attribute\",\n     N_(\"Warn about functions which might be candidates for format attributes\") },\n   { \"-Wno-missing-format-attribute\", \"\" },\n-  { \"-Wcast-qual\", \n+  { \"-Wcast-qual\",\n     N_(\"Warn about casts which discard qualifiers\") },\n   { \"-Wno-cast-qual\", \"\" },\n-  { \"-Wchar-subscripts\", \n+  { \"-Wchar-subscripts\",\n     N_(\"Warn about subscripts whose type is 'char'\") },\n   { \"-Wno-char-subscripts\", \"\" },\n-  { \"-Wcomment\", \n+  { \"-Wcomment\",\n     N_(\"Warn if nested comments are detected\") },\n   { \"-Wno-comment\", \"\" },\n-  { \"-Wcomments\", \n+  { \"-Wcomments\",\n     N_(\"Warn if nested comments are detected\") },\n   { \"-Wno-comments\", \"\" },\n-  { \"-Wconversion\", \n+  { \"-Wconversion\",\n     N_(\"Warn about possibly confusing type conversions\") },\n   { \"-Wno-conversion\", \"\" },\n   { \"-Wdiv-by-zero\", \"\" },\n-  { \"-Wno-div-by-zero\", \n+  { \"-Wno-div-by-zero\",\n     N_(\"Do not warn about compile-time integer division by zero\") },\n-  { \"-Wfloat-equal\", \n+  { \"-Wfloat-equal\",\n     N_(\"Warn about testing equality of floating point numbers\") },\n   { \"-Wno-float-equal\", \"\" },\n-  { \"-Wformat\", \n+  { \"-Wformat\",\n     N_(\"Warn about printf/scanf/strftime/strfmon format anomalies\") },\n   { \"-Wno-format\", \"\" },\n   { \"-Wformat-extra-args\", \"\" },\n   { \"-Wno-format-extra-args\",\n     N_(\"Don't warn about too many arguments to format functions\") },\n-  { \"-Wformat-nonliteral\", \n+  { \"-Wformat-nonliteral\",\n     N_(\"Warn about non-string-literal format strings\") },\n   { \"-Wno-format-nonliteral\", \"\" },\n   { \"-Wformat-security\",\n@@ -1261,18 +1261,18 @@ documented_lang_options[] =\n     N_(\"Warn about implicit function declarations\") },\n   { \"-Wno-implicit-function-declaration\", \"\" },\n   { \"-Werror-implicit-function-declaration\", \"\" },\n-  { \"-Wimplicit-int\", \n+  { \"-Wimplicit-int\",\n     N_(\"Warn when a declaration does not specify a type\") },\n   { \"-Wno-implicit-int\", \"\" },\n   { \"-Wimplicit\", \"\" },\n   { \"-Wno-implicit\", \"\" },\n-  { \"-Wimport\", \n+  { \"-Wimport\",\n     N_(\"Warn about the use of the #import directive\") },\n   { \"-Wno-import\", \"\" },\n   { \"-Wlong-long\",\"\" },\n-  { \"-Wno-long-long\", \n+  { \"-Wno-long-long\",\n     N_(\"Do not warn about using 'long long' when -pedantic\") },\n-  { \"-Wmain\", \n+  { \"-Wmain\",\n     N_(\"Warn about suspicious declarations of main\") },\n   { \"-Wno-main\", \"\" },\n   { \"-Wmissing-braces\",\n@@ -1281,19 +1281,19 @@ documented_lang_options[] =\n   { \"-Wmissing-declarations\",\n     N_(\"Warn about global funcs without previous declarations\") },\n   { \"-Wno-missing-declarations\", \"\" },\n-  { \"-Wmissing-prototypes\", \n+  { \"-Wmissing-prototypes\",\n     N_(\"Warn about global funcs without prototypes\") },\n   { \"-Wno-missing-prototypes\", \"\" },\n-  { \"-Wmultichar\", \n+  { \"-Wmultichar\",\n     N_(\"Warn about use of multicharacter literals\") },\n   { \"-Wno-multichar\", \"\" },\n-  { \"-Wnested-externs\", \n+  { \"-Wnested-externs\",\n     N_(\"Warn about externs not at file scope level\") },\n   { \"-Wno-nested-externs\", \"\" },\n-  { \"-Wparentheses\", \n+  { \"-Wparentheses\",\n     N_(\"Warn about possible missing parentheses\") },\n   { \"-Wno-parentheses\", \"\" },\n-  { \"-Wpointer-arith\", \n+  { \"-Wpointer-arith\",\n     N_(\"Warn about function pointer arithmetic\") },\n   { \"-Wno-pointer-arith\", \"\" },\n   { \"-Wredundant-decls\",\n@@ -1305,24 +1305,24 @@ documented_lang_options[] =\n   { \"-Wsequence-point\",\n     N_(\"Warn about possible violations of sequence point rules\") },\n   { \"-Wno-sequence-point\", \"\" },\n-  { \"-Wsign-compare\", \n+  { \"-Wsign-compare\",\n     N_(\"Warn about signed/unsigned comparisons\") },\n   { \"-Wno-sign-compare\", \"\" },\n-  { \"-Wstrict-prototypes\", \n+  { \"-Wstrict-prototypes\",\n     N_(\"Warn about non-prototyped function decls\") },\n   { \"-Wno-strict-prototypes\", \"\" },\n-  { \"-Wtraditional\", \n+  { \"-Wtraditional\",\n     N_(\"Warn about constructs whose meanings change in ISO C\") },\n   { \"-Wno-traditional\", \"\" },\n-  { \"-Wtrigraphs\", \n+  { \"-Wtrigraphs\",\n     N_(\"Warn when trigraphs are encountered\") },\n   { \"-Wno-trigraphs\", \"\" },\n   { \"-Wundef\", \"\" },\n   { \"-Wno-undef\", \"\" },\n-  { \"-Wunknown-pragmas\", \n+  { \"-Wunknown-pragmas\",\n     N_(\"Warn about unrecognized pragmas\") },\n   { \"-Wno-unknown-pragmas\", \"\" },\n-  { \"-Wwrite-strings\", \n+  { \"-Wwrite-strings\",\n     N_(\"Mark strings as 'const char *'\") },\n   { \"-Wno-write-strings\", \"\" },\n \n@@ -1344,7 +1344,7 @@ static const struct\n   const int value;\n   const char *const description;\n }\n-target_switches [] = TARGET_SWITCHES;\n+target_switches[] = TARGET_SWITCHES;\n \n /* This table is similar, but allows the switch to have a value.  */\n \n@@ -1355,7 +1355,7 @@ static const struct\n   const char **const variable;\n   const char *const description;\n }\n-target_options [] = TARGET_OPTIONS;\n+target_options[] = TARGET_OPTIONS;\n #endif\n \f\n /* Options controlling warnings.  */\n@@ -1453,7 +1453,7 @@ int warn_disabled_optimization;\n \n int warn_missing_noreturn;\n \n-/* Nonzero means warn about uses of __attribute__((deprecated)) \n+/* Nonzero means warn about uses of __attribute__((deprecated))\n    declarations.  */\n \n int warn_deprecated_decl = 1;\n@@ -1655,7 +1655,7 @@ strip_off_ending (name, len)\n      int len;\n {\n   int i;\n-  for (i = 2;  i < 6 && len > i;  i++)\n+  for (i = 2; i < 6 && len > i;  i++)\n     {\n       if (name[len - i] == '.')\n \t{\n@@ -1707,7 +1707,7 @@ output_file_directive (asm_file, input_name)\n   while (na > input_name)\n     {\n       if (IS_DIR_SEPARATOR (na[-1]))\n-        break;\n+\tbreak;\n       na--;\n     }\n \n@@ -2185,7 +2185,7 @@ rest_of_decl_compilation (decl, asmspec, top_level, at_end)\n       {\n \talias = TREE_VALUE (TREE_VALUE (alias));\n \talias = get_identifier (TREE_STRING_POINTER (alias));\n-        assemble_alias (decl, alias);\n+\tassemble_alias (decl, alias);\n       }\n   }\n \n@@ -2197,7 +2197,7 @@ rest_of_decl_compilation (decl, asmspec, top_level, at_end)\n       timevar_push (TV_VARCONST);\n \n       if (asmspec)\n-        make_decl_rtl (decl, asmspec);\n+\tmake_decl_rtl (decl, asmspec);\n \n       /* Don't output anything when a tentative file-scope definition\n \t is seen.  But at end of compilation, do output code for them.  */\n@@ -2480,7 +2480,7 @@ rest_of_compilation (decl)\n      distinguish between the return value of this function and the\n      return value of called functions.  Also, we can remove all SETs\n      of subregs of hard registers; they are only here because of\n-     integrate.  Also, we can now initialize pseudos intended to \n+     integrate.  Also, we can now initialize pseudos intended to\n      carry magic hard reg data throughout the function.  */\n   rtx_equal_function_value_matters = 0;\n   purge_hard_subreg_sets (get_insns ());\n@@ -2624,7 +2624,7 @@ rest_of_compilation (decl)\n \t  open_dump_file (DFI_ssa_dce, decl);\n \n \t  insns = get_insns ();\n-\t  ssa_eliminate_dead_code();\n+\t  ssa_eliminate_dead_code ();\n \n \t  close_dump_file (DFI_ssa_dce, print_rtl_with_bb, insns);\n \t  timevar_pop (TV_SSA_DCE);\n@@ -2663,7 +2663,7 @@ rest_of_compilation (decl)\n \n       timevar_push (TV_IFCVT);\n       if (flag_if_conversion)\n-        if_convert (0);\n+\tif_convert (0);\n       timevar_pop (TV_IFCVT);\n       cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_PRE_LOOP);\n       close_dump_file (DFI_null, print_rtl_with_bb, insns);\n@@ -2914,7 +2914,7 @@ rest_of_compilation (decl)\n \t  cleanup_cfg (CLEANUP_EXPENSIVE);\n \t  if (flag_if_conversion)\n \t    if_convert (0);\n-\t  timevar_pop(TV_IFCVT);\n+\t  timevar_pop (TV_IFCVT);\n \n \t  timevar_pop (TV_JUMP);\n \t  /* CFG is no longer maintained up-to-date.  */\n@@ -3245,9 +3245,9 @@ rest_of_compilation (decl)\n       open_dump_file (DFI_rnreg, decl);\n \n       if (flag_rename_registers)\n-        regrename_optimize ();\n+\tregrename_optimize ();\n       if (flag_cprop_registers)\n-        copyprop_hardreg_forward ();\n+\tcopyprop_hardreg_forward ();\n \n       close_dump_file (DFI_rnreg, print_rtl_with_bb, insns);\n       timevar_pop (TV_RENAME_REGISTERS);\n@@ -3311,7 +3311,7 @@ rest_of_compilation (decl)\n \n       /* Last attempt to optimize CFG, as scheduling, peepholing and insn\n \t splitting possibly introduced more crossjumping oppurtuntities.\n-\t Except that we can't actually run crossjumping without running \n+\t Except that we can't actually run crossjumping without running\n \t another DCE pass, which we can't do after reg-stack.  */\n       cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_POST_REGSTACK\n \t\t   | (flag_crossjumping ? CLEANUP_CROSSJUMP : 0));\n@@ -3523,7 +3523,7 @@ display_help ()\n     {\n       const char *description = f_options[i].description;\n \n-      if (description != NULL && * description != 0)\n+      if (description != NULL && *description != 0)\n \tprintf (\"  -f%-21s %s\\n\",\n \t\tf_options[i].string, _(description));\n     }\n@@ -3533,9 +3533,9 @@ display_help ()\n   for (i = LAST_PARAM; i--;)\n     {\n       const char *description = compiler_params[i].help;\n-      const int length = 21-strlen(compiler_params[i].option);\n+      const int length = 21 - strlen (compiler_params[i].option);\n \n-      if (description != NULL && * description != 0)\n+      if (description != NULL && *description != 0)\n \tprintf (\"  --param %s=<value>%.*s%s\\n\",\n \t\tcompiler_params[i].option,\n \t\tlength > 0 ? length : 1, \"                     \",\n@@ -3550,7 +3550,7 @@ display_help ()\n     {\n       const char *description = W_options[i].description;\n \n-      if (description != NULL && * description != 0)\n+      if (description != NULL && *description != 0)\n \tprintf (\"  -W%-21s %s\\n\",\n \t\tW_options[i].string, _(description));\n     }\n@@ -3676,7 +3676,7 @@ display_target_options ()\n \t      if (extra_warnings)\n \t\tprintf (_(\"  -m%-23.23s [undocumented]\\n\"), option);\n \t    }\n-\t  else if (* description != 0)\n+\t  else if (*description != 0)\n \t    doc += printf (\"  -m%-23.23s %s\\n\", option, _(description));\n \t}\n \n@@ -3695,7 +3695,7 @@ display_target_options ()\n \t      if (extra_warnings)\n \t\tprintf (_(\"  -m%-23.23s [undocumented]\\n\"), option);\n \t    }\n-\t  else if (* description != 0)\n+\t  else if (*description != 0)\n \t    doc += printf (\"  -m%-23.23s %s\\n\", option, _(description));\n \t}\n #endif\n@@ -3731,9 +3731,9 @@ decode_d_option (arg)\n \tflag_print_asm_name = 1;\n \tbreak;\n       case 'P':\n-        flag_dump_rtl_in_asm = 1;\n-        flag_print_asm_name = 1;\n-        break;\n+\tflag_dump_rtl_in_asm = 1;\n+\tflag_print_asm_name = 1;\n+\tbreak;\n       case 'v':\n \tgraph_dump_format = vcg;\n \tbreak;\n@@ -3847,10 +3847,10 @@ decode_f_option (arg)\n \t    = skip_leading_substring (arg, \"diagnostics-show-location=\")))\n     {\n       if (!strcmp (option_value, \"once\"))\n-        diagnostic_prefixing_rule (global_dc) = DIAGNOSTICS_SHOW_PREFIX_ONCE;\n+\tdiagnostic_prefixing_rule (global_dc) = DIAGNOSTICS_SHOW_PREFIX_ONCE;\n       else if (!strcmp (option_value, \"every-line\"))\n-        diagnostic_prefixing_rule (global_dc)\n-          = DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE;\n+\tdiagnostic_prefixing_rule (global_dc)\n+\t  = DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE;\n       else\n \terror (\"unrecognized option `%s'\", arg - 2);\n     }\n@@ -3925,7 +3925,7 @@ static int\n decode_g_option (arg)\n      const char *arg;\n {\n-  static unsigned level=0;\n+  static unsigned level = 0;\n   /* A lot of code assumes write_symbols == NO_DEBUG if the\n      debugging level is 0 (thus -gstabs1 -gstabs0 would lose track\n      of what debugging type has been selected).  This records the\n@@ -4449,25 +4449,25 @@ init_asm_output (name)\n   else\n     {\n       if (asm_file_name == 0)\n-        {\n-          int len = strlen (dump_base_name);\n-          char *dumpname = (char *) xmalloc (len + 6);\n-          memcpy (dumpname, dump_base_name, len + 1);\n-          strip_off_ending (dumpname, len);\n-          strcat (dumpname, \".s\");\n-          asm_file_name = dumpname;\n-        }\n+\t{\n+\t  int len = strlen (dump_base_name);\n+\t  char *dumpname = (char *) xmalloc (len + 6);\n+\t  memcpy (dumpname, dump_base_name, len + 1);\n+\t  strip_off_ending (dumpname, len);\n+\t  strcat (dumpname, \".s\");\n+\t  asm_file_name = dumpname;\n+\t}\n       if (!strcmp (asm_file_name, \"-\"))\n-        asm_out_file = stdout;\n+\tasm_out_file = stdout;\n       else\n-        asm_out_file = fopen (asm_file_name, \"w\");\n+\tasm_out_file = fopen (asm_file_name, \"w\");\n       if (asm_out_file == 0)\n \tfatal_io_error (\"can't open %s for writing\", asm_file_name);\n     }\n \n #ifdef IO_BUFFER_SIZE\n   setvbuf (asm_out_file, (char *) xmalloc (IO_BUFFER_SIZE),\n-           _IOFBF, IO_BUFFER_SIZE);\n+\t   _IOFBF, IO_BUFFER_SIZE);\n #endif\n \n   if (!flag_syntax_only)\n@@ -4835,7 +4835,7 @@ process_options ()\n       error (\"profiling does not work without a frame pointer\");\n       flag_omit_frame_pointer = 0;\n     }\n-    \n+\n   user_label_prefix = USER_LABEL_PREFIX;\n   if (flag_leading_underscore != -1)\n     {\n@@ -5142,7 +5142,7 @@ toplev_main (argc, argv)\n   hex_init ();\n \n   /* Initialization of GCC's environment, and diagnostics.  */\n-  general_init (argv [0]);\n+  general_init (argv[0]);\n \n   /* Parse the options and do minimal processing; basically just\n      enough to default flags appropriately.  */"}]}