{"sha": "8263440b3210b97ee6112faf5ff9d519de78af02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI2MzQ0MGIzMjEwYjk3ZWU2MTEyZmFmNWZmOWQ1MTlkZTc4YWYwMg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2013-12-14T15:24:58Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-12-14T15:24:58Z"}, "message": "* var-tracking.c (add_stores): Fix oversight in latest commit.\n\nFrom-SVN: r205986", "tree": {"sha": "6bc98c2b971bacd64ab72231944ae7638b59a7f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bc98c2b971bacd64ab72231944ae7638b59a7f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8263440b3210b97ee6112faf5ff9d519de78af02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8263440b3210b97ee6112faf5ff9d519de78af02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8263440b3210b97ee6112faf5ff9d519de78af02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8263440b3210b97ee6112faf5ff9d519de78af02/comments", "author": null, "committer": null, "parents": [{"sha": "dc4fe9edfb90a3d34b96b5d44cbc120312d4aa10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc4fe9edfb90a3d34b96b5d44cbc120312d4aa10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc4fe9edfb90a3d34b96b5d44cbc120312d4aa10"}], "stats": {"total": 91, "additions": 91, "deletions": 0}, "files": [{"sha": "3acc708de913f894e7be8e8dc779a8972c75ddbb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8263440b3210b97ee6112faf5ff9d519de78af02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8263440b3210b97ee6112faf5ff9d519de78af02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8263440b3210b97ee6112faf5ff9d519de78af02", "patch": "@@ -1,3 +1,7 @@\n+2013-12-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/pr59350.c: New test.\n+\n 2013-12-14  Marek Polacek  <polacek@redhat.com>\n \n \tPR sanitizer/59503"}, {"sha": "a53133b3e6b633fab53f86e92ded42ec9ffdebe4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8263440b3210b97ee6112faf5ff9d519de78af02/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8263440b3210b97ee6112faf5ff9d519de78af02/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8263440b3210b97ee6112faf5ff9d519de78af02", "patch": "@@ -1,3 +1,7 @@\n+2013-12-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* var-tracking.c (add_stores): Fix oversight in latest commit.\n+\n 2013-12-14  Marek Polacek  <polacek@redhat.com>\n \n \t* c-c++-common/ubsan/overflow-1.c: New test."}, {"sha": "be186873ac5885be211d541131248f96aa894fe8", "filename": "gcc/testsuite/gcc.dg/pr59350.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8263440b3210b97ee6112faf5ff9d519de78af02/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59350.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8263440b3210b97ee6112faf5ff9d519de78af02/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59350.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59350.c?ref=8263440b3210b97ee6112faf5ff9d519de78af02", "patch": "@@ -0,0 +1,82 @@\n+/* PR rtl-optimization/59350 */\n+/* Testcase by Ryan Mansfield <rmansfield@qnx.com> */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O -g\" } */\n+\n+typedef union\n+{\n+  char b[2];\n+  short NotAnInteger;\n+}\n+mDNSOpaque16;\n+typedef mDNSOpaque16 mDNSIPPort;\n+typedef struct\n+{\n+}\n+mDNSAddr;\n+typedef struct DNSQuestion_struct DNSQuestion;\n+typedef struct mDNS_struct mDNS;\n+typedef struct __attribute__ ((__packed__))\n+{\n+  mDNSOpaque16 id;\n+  mDNSOpaque16 flags;\n+}\n+\n+DNSMessageHeader;\n+typedef struct __attribute__ ((__packed__))\n+{\n+  DNSMessageHeader h;\n+}\n+\n+DNSMessage;\n+struct DNSQuestion_struct\n+{\n+  DNSQuestion *next;\n+  long LastQTime;\n+  mDNSOpaque16 TargetQID;\n+};\n+struct mDNS_struct\n+{\n+  long timenow;\n+  DNSQuestion *Questions;\n+};\n+extern long mDNSPlatformOneSecond;\n+typedef enum\n+{\n+  kDNSFlag0_QR_Mask = 0x80, kDNSFlag0_QR_Query = 0x00, kDNSFlag0_QR_Response =\n+    0x80, kDNSFlag0_OP_Mask = 0x78, kDNSFlag0_OP_StdQuery =\n+    0x00, kDNSFlag0_OP_Iquery = 0x08, kDNSFlag0_OP_Status =\n+    0x10, kDNSFlag0_OP_Unused3 = 0x18, kDNSFlag0_OP_Notify =\n+    0x20, kDNSFlag0_OP_Update = 0x28, kDNSFlag0_QROP_Mask =\n+    kDNSFlag0_QR_Mask | kDNSFlag0_OP_Mask, kDNSFlag0_AA = 0x04, kDNSFlag0_TC =\n+    0x02, kDNSFlag0_RD = 0x01, kDNSFlag1_RA = 0x80, kDNSFlag1_Zero =\n+    0x40, kDNSFlag1_AD = 0x20, kDNSFlag1_CD = 0x10, kDNSFlag1_RC_Mask =\n+    0x0F, kDNSFlag1_RC_NoErr = 0x00, kDNSFlag1_RC_FormErr =\n+    0x01, kDNSFlag1_RC_ServFail = 0x02, kDNSFlag1_RC_NXDomain =\n+    0x03, kDNSFlag1_RC_NotImpl = 0x04, kDNSFlag1_RC_Refused =\n+    0x05, kDNSFlag1_RC_YXDomain = 0x06, kDNSFlag1_RC_YXRRSet =\n+    0x07, kDNSFlag1_RC_NXRRSet = 0x08, kDNSFlag1_RC_NotAuth =\n+    0x09, kDNSFlag1_RC_NotZone = 0x0A\n+}\n+TSIG_ErrorCode;\n+void\n+uDNS_ReceiveMsg (mDNS * const m, DNSMessage * const msg,\n+\t\t const char * const end, const mDNSAddr * const srcaddr,\n+\t\t const mDNSIPPort srcport)\n+{\n+  DNSQuestion *qptr;\n+  char StdR = kDNSFlag0_QR_Response | kDNSFlag0_OP_StdQuery;\n+  char QR_OP = (char) (msg->h.flags.b[0] & kDNSFlag0_QROP_Mask);\n+  if (QR_OP == StdR)\n+    {\n+     if (uDNS_ReceiveTestQuestionResponse (m, msg, end, srcaddr, srcport))\n+\treturn;\n+      for (qptr = m->Questions; qptr; qptr = qptr->next)\n+\tif (msg->h.flags.b[0] & kDNSFlag0_TC\n+\t    && ((qptr->TargetQID).NotAnInteger == (msg->h.id).NotAnInteger)\n+\t    && m->timenow - qptr->LastQTime < (60 * mDNSPlatformOneSecond))\n+\t  {\n+\t  }\n+    }\n+}"}, {"sha": "8eb86bf4feb2b170f2e5c6cf2288385cfb12f746", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8263440b3210b97ee6112faf5ff9d519de78af02/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8263440b3210b97ee6112faf5ff9d519de78af02/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=8263440b3210b97ee6112faf5ff9d519de78af02", "patch": "@@ -5938,6 +5938,7 @@ add_stores (rtx loc, const_rtx expr, void *cuip)\n       && REG_EXPR (loc)\n       && TREE_CODE (REG_EXPR (loc)) == PARM_DECL\n       && DECL_MODE (REG_EXPR (loc)) != BLKmode\n+      && TREE_CODE (TREE_TYPE (REG_EXPR (loc))) != UNION_TYPE\n       && ((MEM_P (DECL_INCOMING_RTL (REG_EXPR (loc)))\n \t   && XEXP (DECL_INCOMING_RTL (REG_EXPR (loc)), 0) != arg_pointer_rtx)\n           || (GET_CODE (DECL_INCOMING_RTL (REG_EXPR (loc))) == PARALLEL"}]}