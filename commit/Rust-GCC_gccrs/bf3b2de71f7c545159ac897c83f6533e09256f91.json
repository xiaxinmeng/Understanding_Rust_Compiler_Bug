{"sha": "bf3b2de71f7c545159ac897c83f6533e09256f91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYzYjJkZTcxZjdjNTQ1MTU5YWM4OTdjODNmNjUzM2UwOTI1NmY5MQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-03-26T20:37:53Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-03-26T20:37:53Z"}, "message": "re PR target/65561 (avx512fintrin.h:5344:1: internal compiler error: in curr_insn_transform, at lra-constraints.c:3494)\n\n\tPR target/65561\n\t* config/i386/sse.md (avx512dq_vextract<shuffletype>64x2_1_maskm):\n\tCheck operand 4 and operand 0 for equality.\n\t(avx512f_vextract<shuffletype>32x4_1_maskm):\n\tCheck operand 6 and operand 0 for equality.\n\t(vec_extract_lo_<mode>_maskm): Check operand 2 and operand 0\n\tfor equality.\n\t(vec_extract_hi_<mode>_maskm): Ditto.\n\nFrom-SVN: r221709", "tree": {"sha": "e0176ef8843aea31d9588ebc26a10b0b176b6122", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0176ef8843aea31d9588ebc26a10b0b176b6122"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf3b2de71f7c545159ac897c83f6533e09256f91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf3b2de71f7c545159ac897c83f6533e09256f91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf3b2de71f7c545159ac897c83f6533e09256f91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf3b2de71f7c545159ac897c83f6533e09256f91/comments", "author": null, "committer": null, "parents": [{"sha": "d1a74a287ee1a84b90e5675904dac7f945cffca1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1a74a287ee1a84b90e5675904dac7f945cffca1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1a74a287ee1a84b90e5675904dac7f945cffca1"}], "stats": {"total": 43, "additions": 29, "deletions": 14}, "files": [{"sha": "5593ef8fd15f4ed99633aeb826b2072dafc1694a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3b2de71f7c545159ac897c83f6533e09256f91/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3b2de71f7c545159ac897c83f6533e09256f91/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf3b2de71f7c545159ac897c83f6533e09256f91", "patch": "@@ -1,3 +1,14 @@\n+2015-03-26  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/65561\n+\t* config/i386/sse.md (avx512dq_vextract<shuffletype>64x2_1_maskm):\n+\tCheck operand 4 and operand 0 for equality.\n+\t(avx512f_vextract<shuffletype>32x4_1_maskm):\n+\tCheck operand 6 and operand 0 for equality.\n+\t(vec_extract_lo_<mode>_maskm): Check operand 2 and operand 0\n+\tfor equality.\n+\t(vec_extract_hi_<mode>_maskm): Ditto.\n+\n 2015-03-26  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* cgraph.c (cgraph_update_edges_for_call_stmt_node): Do not bring\n@@ -17,7 +28,7 @@\n \t(compute_inline_parameters): Compute contains_cilk_spawn.\n \t(inline_read_section, inline_write_summary): Stream\n \tcontains_cilk_spawn.\n-\t* ipa-inline.c (can_inline_edge_p): Do not tuch \n+\t* ipa-inline.c (can_inline_edge_p): Do not touch\n \tDECL_STRUCT_FUNCTION that may not be available;\n \tuse CIF_CILK_SPAWN for cilk; fix optimization attribute checks;\n \tremove check for callee_fun->can_throw_non_call_exceptions and\n@@ -41,8 +52,7 @@\n 2015-03-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/64715\n-\t* passes.def: Add another instance of pass_object_sizes before\n-\tccp1.\n+\t* passes.def: Add another instance of pass_object_sizes before ccp1.\n \t* tree-object-size.c (pass_object_sizes::execute): In\n \tfirst_pass_instance, only handle __bos (, 1) and __bos (, 3)\n \tcalls, and keep the call in the IL, as {MIN,MAX}_EXPR of the"}, {"sha": "490fd6b6c3f9fc1cf0bd9d1a440a71374f62964e", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3b2de71f7c545159ac897c83f6533e09256f91/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3b2de71f7c545159ac897c83f6533e09256f91/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=bf3b2de71f7c545159ac897c83f6533e09256f91", "patch": "@@ -6633,7 +6633,8 @@\n \t  (match_operand:QI 5 \"register_operand\" \"k\")))]\n   \"TARGET_AVX512DQ\n    && (INTVAL (operands[2]) % 2 == 0)\n-   && (INTVAL (operands[2]) == INTVAL (operands[3]) - 1 )\"\n+   && (INTVAL (operands[2]) == INTVAL (operands[3]) - 1)\n+   && rtx_equal_p (operands[4], operands[0])\"\n {\n   operands[2] = GEN_INT ((INTVAL (operands[2])) >> 1);\n   return \"vextract<shuffletype>64x2\\t{%2, %1, %0%{%5%}|%0%{%5%}, %1, %2}\";\n@@ -6660,7 +6661,8 @@\n    && ((INTVAL (operands[2]) % 4 == 0)\n        && INTVAL (operands[2]) == (INTVAL (operands[3]) - 1)\n        && INTVAL (operands[3]) == (INTVAL (operands[4]) - 1)\n-       && INTVAL (operands[4]) == (INTVAL (operands[5]) - 1))\"\n+       && INTVAL (operands[4]) == (INTVAL (operands[5]) - 1))\n+   && rtx_equal_p (operands[6], operands[0])\"\n {\n   operands[2] = GEN_INT ((INTVAL (operands[2])) >> 2);\n   return \"vextract<shuffletype>32x4\\t{%2, %1, %0%{%7%}|%0%{%7%}, %1, %2}\";\n@@ -6777,7 +6779,8 @@\n \t      (const_int 2) (const_int 3)]))\n \t  (match_operand:<ssehalfvecmode> 2 \"memory_operand\" \"0\")\n \t  (match_operand:QI 3 \"register_operand\" \"Yk\")))]\n-  \"TARGET_AVX512F\"\n+  \"TARGET_AVX512F\n+   && rtx_equal_p (operands[2], operands[0])\"\n   \"vextract<shuffletype>64x4\\t{$0x0, %1, %0%{%3%}|%0%{%3%}, %1, 0x0}\"\n   [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_extra\" \"1\")\n@@ -6813,7 +6816,8 @@\n \t      (const_int 6) (const_int 7)]))\n \t  (match_operand:<ssehalfvecmode> 2 \"memory_operand\" \"0\")\n \t  (match_operand:QI 3 \"register_operand\" \"Yk\")))]\n-  \"TARGET_AVX512F\"\n+  \"TARGET_AVX512F\n+   && rtx_equal_p (operands[2], operands[0])\"\n   \"vextract<shuffletype>64x4\\t{$0x1, %1, %0%{%3%}|%0%{%3%}, %1, 0x1}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n@@ -6847,7 +6851,8 @@\n \t      (const_int 14) (const_int 15)]))\n \t  (match_operand:<ssehalfvecmode> 2 \"memory_operand\" \"0\")\n \t  (match_operand:QI 3 \"register_operand\" \"k\")))]\n-  \"TARGET_AVX512DQ\"\n+  \"TARGET_AVX512DQ\n+   && rtx_equal_p (operands[2], operands[0])\"\n   \"vextract<shuffletype>32x8\\t{$0x1, %1, %0%{%3%}|%0%{%3%}, %1, 0x1}\"\n   [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_extra\" \"1\")\n@@ -7071,8 +7076,9 @@\n \t\t      (const_int 2) (const_int 3)]))\n \t  (match_operand:<ssehalfvecmode> 2 \"memory_operand\" \"0\")\n \t  (match_operand:QI 3 \"register_operand\" \"k\")))]\n-  \"TARGET_AVX512VL && TARGET_AVX512F\"\n-  \"vextract<shuffletype>32x4\\t{$0x0, %1, %0%{3%}|%0%{%3%}, %1, 0x0}\"\n+  \"TARGET_AVX512VL && TARGET_AVX512F\n+   && rtx_equal_p (operands[2], operands[0])\"\n+  \"vextract<shuffletype>32x4\\t{$0x0, %1, %0%{%3%}|%0%{%3%}, %1, 0x0}\"\n   [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n@@ -7088,10 +7094,9 @@\n \t\t      (const_int 6) (const_int 7)]))\n \t  (match_operand:<ssehalfvecmode> 2 \"memory_operand\" \"0\")\n \t  (match_operand:<ssehalfvecmode> 3 \"register_operand\" \"k\")))]\n-  \"TARGET_AVX512F && TARGET_AVX512VL\"\n-{\n-  return \"vextract<shuffletype>32x4\\t{$0x1, %1, %0%{%3%}|%0%{%3%}, %1, 0x1}\";\n-}\n+  \"TARGET_AVX512F && TARGET_AVX512VL\n+   && rtx_equal_p (operands[2], operands[0])\"\n+  \"vextract<shuffletype>32x4\\t{$0x1, %1, %0%{%3%}|%0%{%3%}, %1, 0x1}\"\n   [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")"}]}