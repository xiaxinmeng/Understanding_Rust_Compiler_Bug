{"sha": "f0d811f7e4fc38047e02b669754a8bd8f2d28493", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBkODExZjdlNGZjMzgwNDdlMDJiNjY5NzU0YThiZDhmMmQyODQ5Mw==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2013-07-29T20:34:29Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2013-07-29T20:34:29Z"}, "message": "epiphany.md (*isub_i+2): New peephole.\n\n\t* config/epiphany/epiphany.md (*isub_i+2): New peephole.\n\t(ashlv2si3): New expander.\n\t(*ashlv2si3_i): New define_insn_and_split.\n\t* predicates.md (float_operation): Allow patterns with three\n\tbasic sub-patterns.\n\nFrom-SVN: r201319", "tree": {"sha": "32ec826f493ca8b2ea17eb42459fc2cf938720ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32ec826f493ca8b2ea17eb42459fc2cf938720ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0d811f7e4fc38047e02b669754a8bd8f2d28493", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0d811f7e4fc38047e02b669754a8bd8f2d28493", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0d811f7e4fc38047e02b669754a8bd8f2d28493", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0d811f7e4fc38047e02b669754a8bd8f2d28493/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3ea1e3286b2576fe9d265af2a4134e0d253f9f21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ea1e3286b2576fe9d265af2a4134e0d253f9f21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ea1e3286b2576fe9d265af2a4134e0d253f9f21"}], "stats": {"total": 140, "additions": 137, "deletions": 3}, "files": [{"sha": "6d1fec85f313aeed67d98817ec4f0ce7f3d3ddd3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0d811f7e4fc38047e02b669754a8bd8f2d28493/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0d811f7e4fc38047e02b669754a8bd8f2d28493/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f0d811f7e4fc38047e02b669754a8bd8f2d28493", "patch": "@@ -1,3 +1,11 @@\n+2013-07-29  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\t* config/epiphany/epiphany.md (*isub_i+2): New peephole.\n+\t(ashlv2si3): New expander.\n+\t(*ashlv2si3_i): New define_insn_and_split.\n+\t* predicates.md (float_operation): Allow patterns with three\n+\tbasic sub-patterns.\n+\n 2013-07-29  Maciej W. Rozycki  <macro@codesourcery.com>\n \n \t* config/mips/linux.h (GLIBC_DYNAMIC_LINKER): Handle `-mnan=2008'."}, {"sha": "e8756ad8e23e3bc64a3662338a694ba6fcd2b916", "filename": "gcc/config/epiphany/epiphany.md", "status": "modified", "additions": 123, "deletions": 1, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0d811f7e4fc38047e02b669754a8bd8f2d28493/gcc%2Fconfig%2Fepiphany%2Fepiphany.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0d811f7e4fc38047e02b669754a8bd8f2d28493/gcc%2Fconfig%2Fepiphany%2Fepiphany.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.md?ref=f0d811f7e4fc38047e02b669754a8bd8f2d28493", "patch": "@@ -587,7 +587,7 @@\n ; After mode-switching, floating point operations, fp_sfuncs and calls\n ; must exhibit the use of the control register, lest the setting of the\n ; control register could be deleted or moved.  OTOH a use of a hard register\n-; greatly coundounds optimizers like the rtl loop optimizers or combine.\n+; greatly counfounds optimizers like the rtl loop optimizers or combine.\n ; Therefore, we put an extra pass immediately after the mode switching pass\n ; that inserts the USEs of the control registers, and sets a flag in struct\n ; machine_function that float_operation can henceforth only match with that\n@@ -1058,6 +1058,28 @@\n \t      (clobber (reg:CC CC_REGNUM))])]\n )\n \n+(define_peephole2\n+  [(match_parallel 3 \"float_operation\"\n+     [(set (match_operand:SI 0 \"gpr_operand\" \"\")\n+\t   (mult:SI\n+\t      (match_operand:SI 1 \"gpr_operand\" \"\")\n+\t      (match_operand:SI 2 \"gpr_operand\" \"\")))\n+      (clobber (reg:CC_FP CCFP_REGNUM))])]\n+  \"prev_active_insn (peep2_next_insn (0))\n+   && get_attr_sched_use_fpu (prev_active_insn (peep2_next_insn (0)))\n+   && peep2_regno_dead_p (1, CC_REGNUM)\n+   && get_attr_sched_use_fpu (next_active_insn (peep2_next_insn (0)))\n+   && find_reg_note (insn, REG_EQUAL, NULL_RTX) != NULL_RTX\n+   && GET_CODE (XEXP (find_reg_note (insn, REG_EQUAL, NULL_RTX), 0)) == MULT\n+   && CONST_INT_P (XEXP (XEXP (find_reg_note (insn, REG_EQUAL, NULL_RTX), 0),\n+\t\t\t 1))\"\n+  [(parallel [(set (match_dup 0) (ashift:SI (match_dup 1) (match_dup 4)))\n+\t      (clobber (reg:CC CC_REGNUM))])]\n+{\n+  operands[4]\n+    = XEXP (XEXP (find_reg_note (curr_insn, REG_EQUAL, NULL_RTX), 0), 1);\n+})\n+\n (define_expand \"mulsi3\"\n   [(parallel\n      [(set (match_operand:SI 0 \"gpr_operand\" \"\")\n@@ -2530,6 +2552,106 @@\n   [(set_attr \"length\" \"8\")\n    (set_attr \"type\" \"v2fp\")])\n \n+(define_expand \"ashlv2si3\"\n+  [(parallel\n+     [(set (match_operand:V2SI 0 \"gpr_operand\" \"\")\n+\t   (ashift:V2SI (match_operand:V2SI 1 \"gpr_operand\" \"\")\n+\t\t\t(match_operand:SI 2 \"general_operand\")))\n+      (use (match_dup 3))\n+      (clobber (reg:CC_FP CCFP_REGNUM))])]\n+  \"\"\n+{\n+  if (const_int_operand (operands[2], VOIDmode))\n+    operands[3]\n+      = copy_to_mode_reg (SImode, GEN_INT (1 << INTVAL (operands[2])));\n+  else\n+    {\n+      int o, i;\n+      rtx xop[2], last_out = pc_rtx;\n+\n+      for (o = 0; o <= UNITS_PER_WORD; o += UNITS_PER_WORD)\n+\t{\n+\t  for (i = 0; i < 2; i++)\n+\t    {\n+\t      xop[i]\n+\t\t= (i == 2 ? operands[2]\n+\t\t   : simplify_gen_subreg (SImode, operands[i], V2SImode, o));\n+\t      gcc_assert (!reg_overlap_mentioned_p (last_out, xop[i])\n+\t\t\t  /* ??? reg_overlap_mentioned_p doesn't understand\n+\t\t\t     about multi-word SUBREGs.  */\n+\t\t\t  || (GET_CODE (last_out) == SUBREG\n+\t\t\t      && GET_CODE (xop[i]) == SUBREG\n+\t\t\t      && SUBREG_REG (last_out) == SUBREG_REG (xop[i])\n+\t\t\t      && ((SUBREG_BYTE (last_out) & -UNITS_PER_WORD)\n+\t\t\t\t  != (SUBREG_BYTE (xop[i]) & -UNITS_PER_WORD))));\n+\t    }\n+\t  emit_insn (gen_ashlsi3 (xop[0], xop[1], operands[2]));\n+\t  last_out = xop[0];\n+\t}\n+      DONE;\n+    }\n+})\n+\n+(define_insn_and_split \"*ashlv2si3_i\"\n+  [(match_parallel 3 \"float_operation\"\n+     [(set (match_operand:V2SI 0 \"gpr_operand\" \"=&r,*1*2\")\n+\t   (ashift:V2SI (match_operand:V2SI 1 \"gpr_operand\" \"r,r\")\n+\t\t\t(match_operand 2 \"const_int_operand\" \"n,n\")))\n+      (use (match_operand:SI 4 \"gpr_operand\" \"r,r\"))\n+      (clobber (reg:CC_FP CCFP_REGNUM))])]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel\n+     [(set (match_dup 5) (mult:SI (match_dup 6) (match_dup 4)))\n+\t   (clobber (reg:CC_FP CCFP_REGNUM))\n+\t   (match_dup 9)\n+\t   (match_dup 10)])\n+   (parallel\n+     [(set (match_dup 7) (mult:SI (match_dup 8) (match_dup 4)))\n+\t   (clobber (reg:CC_FP CCFP_REGNUM))\n+\t   (match_dup 9)\n+\t   (match_dup 10)])]\n+{\n+  operands[5] = simplify_gen_subreg (SImode, operands[0], V2SImode, 0);\n+  operands[6] = simplify_gen_subreg (SImode, operands[1], V2SImode, 0);\n+  operands[7] = simplify_gen_subreg (SImode, operands[0],\n+\t\t\t\t     V2SImode, UNITS_PER_WORD);\n+  operands[8] = simplify_gen_subreg (SImode, operands[1],\n+\t\t\t\t     V2SImode, UNITS_PER_WORD);\n+  gcc_assert (!reg_overlap_mentioned_p (operands[5], operands[8]));\n+  gcc_assert (!reg_overlap_mentioned_p (operands[5], operands[4]));\n+  operands[9] = XVECEXP (operands[3], 0, XVECLEN (operands[3], 0) - 2);\n+  operands[10] = XVECEXP (operands[3], 0, XVECLEN (operands[3], 0) - 1);\n+  rtx insn\n+    = (gen_rtx_PARALLEL\n+\t(VOIDmode,\n+\t gen_rtvec\n+\t  (4,\n+\t   gen_rtx_SET (VOIDmode, operands[5],\n+\t\t\tgen_rtx_MULT (SImode, operands[6], operands[4])),\n+\t   gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CC_FPmode, CCFP_REGNUM)),\n+\t   operands[9], operands[10])));\n+  insn = emit_insn (insn);\n+  add_reg_note (insn, REG_EQUAL,\n+\t\tgen_rtx_ASHIFT (SImode, operands[6], operands[2]));\n+  insn\n+    = (gen_rtx_PARALLEL\n+\t(VOIDmode,\n+\t gen_rtvec\n+\t  (4,\n+\t   gen_rtx_SET (VOIDmode, operands[7],\n+\t\t\tgen_rtx_MULT (SImode, operands[8], operands[4])),\n+\t   gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CC_FPmode, CCFP_REGNUM)),\n+\t   operands[9], operands[10])));\n+  insn = emit_insn (insn);\n+  add_reg_note (insn, REG_EQUAL,\n+\t\tgen_rtx_ASHIFT (SImode, operands[7], operands[2]));\n+  DONE;\n+}\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"fp_int\")])\n+\n (define_expand \"mul<mode>3\"\n   [(parallel\n      [(set (match_operand:DWV2MODE 0 \"gpr_operand\" \"\")"}, {"sha": "b77867cc85172378323f98549ce770de631f43f5", "filename": "gcc/config/epiphany/predicates.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0d811f7e4fc38047e02b669754a8bd8f2d28493/gcc%2Fconfig%2Fepiphany%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0d811f7e4fc38047e02b669754a8bd8f2d28493/gcc%2Fconfig%2Fepiphany%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fpredicates.md?ref=f0d811f7e4fc38047e02b669754a8bd8f2d28493", "patch": "@@ -292,7 +292,11 @@\n   bool inserted = MACHINE_FUNCTION (cfun)->control_use_inserted;\n   int i;\n \n-  if (count == 2)\n+  if (count == 2\n+      /* Vector ashift has an extra use for the constant factor required to\n+\t implement the shift as multiply.  */\n+      || (count == 3 && GET_CODE (XVECEXP (op, 0, 0)) == SET\n+\t  && GET_CODE (XEXP (XVECEXP (op, 0, 0), 1)) == ASHIFT))\n     return !inserted;\n \n   /* combine / recog will pass any old garbage here before checking the\n@@ -302,7 +306,7 @@\n \n   i = 1;\n   if (count > 4)\n-    for (i = 4; i < count; i++)\n+    for (i = 2; i < count; i++)\n       {\n \trtx x = XVECEXP (op, 0, i);\n "}]}