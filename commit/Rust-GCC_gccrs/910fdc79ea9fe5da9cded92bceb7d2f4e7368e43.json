{"sha": "910fdc79ea9fe5da9cded92bceb7d2f4e7368e43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTEwZmRjNzllYTlmZTVkYTljZGVkOTJiY2ViN2QyZjRlNzM2OGU0Mw==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-06-09T13:05:39Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-06-09T13:05:39Z"}, "message": "Makefile.in (OBJS-common): Add tree-ssa-structalias.o.\n\n2005-06-08  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* Makefile.in (OBJS-common): Add tree-ssa-structalias.o.\n\t* tree-flow.h (find_what_p_points_to): Add prototype.\n\t(push_fields_onto_fieldstack): Ditto.\n\t(sort_fieldstack): Ditto.\n\t* tree-optimize.c (init_tree_optimization_passes): Add\n\tpass_build_pta and pass_del_pta.\n\t* tree-pass.h (pass_build_pta): New structure.\n\t(pass_del_pta): Ditto.\n\t* tree-ssa-alias.c (compute_flow_sensitive_aliasing): Disambiguate\n\tusing new alias analyzer.\n\t(push_fields_onto_fieldstack): Removed from here.\n\t(bitpos_of_field): Ditto.\n\t(fieldoff_compare): Ditto.\n\t* tree-ssa-structalias.c: New file.\n\t* tree-ssa-structalias.h: Ditto.\n\nFrom-SVN: r100800", "tree": {"sha": "75032da16867a5ae124f136fe53fb7e86f768eb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75032da16867a5ae124f136fe53fb7e86f768eb1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/910fdc79ea9fe5da9cded92bceb7d2f4e7368e43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/910fdc79ea9fe5da9cded92bceb7d2f4e7368e43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/910fdc79ea9fe5da9cded92bceb7d2f4e7368e43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/910fdc79ea9fe5da9cded92bceb7d2f4e7368e43/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5878b92f9edefa7c60d5508fbba8441dc1358df9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5878b92f9edefa7c60d5508fbba8441dc1358df9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5878b92f9edefa7c60d5508fbba8441dc1358df9"}], "stats": {"total": 3359, "additions": 3260, "deletions": 99}, "files": [{"sha": "0b4abb251c16b5a63d49b0627c84700a2d026d60", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910fdc79ea9fe5da9cded92bceb7d2f4e7368e43/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910fdc79ea9fe5da9cded92bceb7d2f4e7368e43/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=910fdc79ea9fe5da9cded92bceb7d2f4e7368e43", "patch": "@@ -1,3 +1,21 @@\n+2005-06-08  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* Makefile.in (OBJS-common): Add tree-ssa-structalias.o.\n+\t* tree-flow.h (find_what_p_points_to): Add prototype.\n+\t(push_fields_onto_fieldstack): Ditto.\n+\t(sort_fieldstack): Ditto.\n+\t* tree-optimize.c (init_tree_optimization_passes): Add\n+\tpass_build_pta and pass_del_pta.\n+\t* tree-pass.h (pass_build_pta): New structure.\n+\t(pass_del_pta): Ditto.\n+\t* tree-ssa-alias.c (compute_flow_sensitive_aliasing): Disambiguate\n+\tusing new alias analyzer.\n+\t(push_fields_onto_fieldstack): Removed from here.\n+\t(bitpos_of_field): Ditto.\n+\t(fieldoff_compare): Ditto.\n+\t* tree-ssa-structalias.c: New file.\n+\t* tree-ssa-structalias.h: Ditto.\n+\n 2005-06-09  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* c-typeck.c (build_c_cast): Check type punning on COMPONENT_REF"}, {"sha": "e1b10bee7687d28075e7b20e67030b7369cf2619", "filename": "gcc/Makefile.in", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910fdc79ea9fe5da9cded92bceb7d2f4e7368e43/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910fdc79ea9fe5da9cded92bceb7d2f4e7368e43/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=910fdc79ea9fe5da9cded92bceb7d2f4e7368e43", "patch": "@@ -962,8 +962,10 @@ OBJS-common = \\\n  varasm.o varray.o vec.o version.o vmsdbgout.o xcoffout.o alloc-pool.o\t   \\\n  et-forest.o cfghooks.o bt-load.o pretty-print.o $(GGC) web.o passes.o\t   \\\n  rtl-profile.o tree-profile.o rtlhooks.o cfgexpand.o lambda-mat.o          \\\n+ lambda-trans.o\tlambda-code.o tree-loop-linear.o tree-ssa-sink.o \t   \\\n  lambda-trans.o lambda-code.o tree-loop-linear.o tree-ssa-sink.o           \\\n- tree-vrp.o tree-stdarg.o tree-cfgcleanup.o tree-ssa-reassoc.o\n+ tree-vrp.o tree-stdarg.o tree-cfgcleanup.o tree-ssa-reassoc.o\t\t   \\\n+ tree-ssa-structalias.o\n \n \n OBJS-md = $(out_object_file)\n@@ -1661,6 +1663,9 @@ stor-layout.o : stor-layout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(PARAMS_H) $(FLAGS_H) function.h $(EXPR_H) $(RTL_H) \\\n    $(GGC_H) $(TM_P_H) $(TARGET_H) langhooks.h $(REGS_H) gt-stor-layout.h \\\n    toplev.h\n+tree-ssa-structalias.o: tree-ssa-structalias.c tree-ssa-structalias.h \\\n+   $(SYSTEM_H) $(CONFIG_H) $(GGC_H) $(TREE_H) $(TREE_FLOW_H) \\\n+   $(TM_H) coretypes.h cgraph.h tree-pass.h $(TIMEVAR_H)\n tree-ssa.o : tree-ssa.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) output.h $(DIAGNOSTIC_H) \\\n    toplev.h function.h $(TIMEVAR_H) $(TM_H) coretypes.h \\"}, {"sha": "5941b5e22d6007d0ed35bcbb64cbb49157e9a9c8", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910fdc79ea9fe5da9cded92bceb7d2f4e7368e43/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910fdc79ea9fe5da9cded92bceb7d2f4e7368e43/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=910fdc79ea9fe5da9cded92bceb7d2f4e7368e43", "patch": "@@ -748,6 +748,9 @@ extern bool thread_through_all_blocks (bitmap);\n tree force_gimple_operand (tree, tree *, bool, tree);\n tree force_gimple_operand_bsi (block_stmt_iterator *, tree, bool, tree);\n \n+/* In tree-ssa-structalias.c */\n+bool find_what_p_points_to (tree);\n+\n /* In tree-ssa-address.c  */\n \n /* Affine combination of trees.  We keep track of at most MAX_AFF_ELTS elements\n@@ -789,6 +792,23 @@ tree create_mem_ref (block_stmt_iterator *, tree,\n rtx addr_for_mem_ref (struct mem_address *, bool);\n void get_address_description (tree, struct mem_address *);\n tree maybe_fold_tmr (tree);\n+/* This structure is simply used during pushing fields onto the fieldstack\n+   to track the offset of the field, since bitpos_of_field gives it relative\n+   to its immediate containing type, and we want it relative to the ultimate\n+   containing object.  */\n+\n+struct fieldoff\n+{\n+  tree field;\n+  HOST_WIDE_INT offset;  \n+};\n+typedef struct fieldoff fieldoff_s;\n+\n+DEF_VEC_O(fieldoff_s);\n+DEF_VEC_ALLOC_O(fieldoff_s,heap);\n+int push_fields_onto_fieldstack (tree, VEC(fieldoff_s,heap) **,\n+\t\t\t\t HOST_WIDE_INT, bool *);\n+void sort_fieldstack (VEC(fieldoff_s,heap) *);\n \n #include \"tree-flow-inline.h\"\n "}, {"sha": "0812b6422c5c5d48a84b4e624e186ae27fa90a66", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910fdc79ea9fe5da9cded92bceb7d2f4e7368e43/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910fdc79ea9fe5da9cded92bceb7d2f4e7368e43/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=910fdc79ea9fe5da9cded92bceb7d2f4e7368e43", "patch": "@@ -396,7 +396,9 @@ init_tree_optimization_passes (void)\n   NEXT_PASS (pass_referenced_vars);\n   NEXT_PASS (pass_create_structure_vars);\n   NEXT_PASS (pass_build_ssa);\n+  NEXT_PASS (pass_build_pta);  \n   NEXT_PASS (pass_may_alias);\n+  NEXT_PASS (pass_del_pta);  \n   NEXT_PASS (pass_rename_ssa_copies);\n   NEXT_PASS (pass_early_warn_uninitialized);\n \n@@ -412,7 +414,9 @@ init_tree_optimization_passes (void)\n   NEXT_PASS (pass_dominator);\n \n   NEXT_PASS (pass_phiopt);\n+  NEXT_PASS (pass_build_pta);  \n   NEXT_PASS (pass_may_alias);\n+  NEXT_PASS (pass_del_pta);  \n   NEXT_PASS (pass_tail_recursion);\n   NEXT_PASS (pass_profile);\n   NEXT_PASS (pass_ch);"}, {"sha": "2c405d278ae70caad99476aa215dfc944fe7f557", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910fdc79ea9fe5da9cded92bceb7d2f4e7368e43/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910fdc79ea9fe5da9cded92bceb7d2f4e7368e43/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=910fdc79ea9fe5da9cded92bceb7d2f4e7368e43", "patch": "@@ -221,6 +221,8 @@ extern struct tree_opt_pass pass_store_ccp;\n extern struct tree_opt_pass pass_store_copy_prop;\n extern struct tree_opt_pass pass_vrp;\n extern struct tree_opt_pass pass_create_structure_vars;\n+extern struct tree_opt_pass pass_build_pta;\n+extern struct tree_opt_pass pass_del_pta;\n extern struct tree_opt_pass pass_uncprop;\n extern struct tree_opt_pass pass_reassoc;\n "}, {"sha": "3e885e9445fa58aba0845a109d80cacbdad73650", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 12, "deletions": 98, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910fdc79ea9fe5da9cded92bceb7d2f4e7368e43/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910fdc79ea9fe5da9cded92bceb7d2f4e7368e43/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=910fdc79ea9fe5da9cded92bceb7d2f4e7368e43", "patch": "@@ -874,7 +874,16 @@ static void\n compute_flow_sensitive_aliasing (struct alias_info *ai)\n {\n   size_t i;\n-\n+  \n+  for (i = 0; i < VARRAY_ACTIVE_SIZE (ai->processed_ptrs); i++)\n+    {\n+      tree ptr = VARRAY_TREE (ai->processed_ptrs, i);\n+      struct ptr_info_def *pi = SSA_NAME_PTR_INFO (ptr);\n+      if (pi->pt_anything || pi->pt_vars == NULL)\n+\t{\n+\t  find_what_p_points_to (ptr);\n+\t}\n+    }\n   create_name_tags (ai);\n \n   for (i = 0; i < VARRAY_ACTIVE_SIZE (ai->processed_ptrs); i++)\n@@ -2810,82 +2819,6 @@ new_type_alias (tree ptr, tree var)\n   /* Note, TAG and its set of aliases are not marked for renaming.  */\n }\n \n-\n-/* This structure is simply used during pushing fields onto the fieldstack\n-   to track the offset of the field, since bitpos_of_field gives it relative\n-   to its immediate containing type, and we want it relative to the ultimate\n-   containing object.  */\n-\n-typedef struct fieldoff\n-{\n-  tree field;\n-  HOST_WIDE_INT offset;  \n-} fieldoff_s;\n-\n-DEF_VEC_O (fieldoff_s);\n-DEF_VEC_ALLOC_O(fieldoff_s,heap);\n-\n-/* Return the position, in bits, of FIELD_DECL from the beginning of its\n-   structure. \n-   Return -1 if the position is conditional or otherwise non-constant\n-   integer.  */\n-\n-static HOST_WIDE_INT\n-bitpos_of_field (const tree fdecl)\n-{\n-\n-  if (TREE_CODE (DECL_FIELD_OFFSET (fdecl)) != INTEGER_CST\n-      || TREE_CODE (DECL_FIELD_BIT_OFFSET (fdecl)) != INTEGER_CST)\n-    return -1;\n-\n-  return (tree_low_cst (DECL_FIELD_OFFSET (fdecl), 1) * 8) \n-    + tree_low_cst (DECL_FIELD_BIT_OFFSET (fdecl), 1);\n-}\n-\n-/* Given a TYPE, and a vector of field offsets FIELDSTACK, push all the fields\n-   of TYPE onto fieldstack, recording their offsets along the way.\n-   OFFSET is used to keep track of the offset in this entire structure, rather\n-   than just the immediately containing structure.  Returns the number\n-   of fields pushed. */\n-\n-static int\n-push_fields_onto_fieldstack (tree type, VEC(fieldoff_s,heap) **fieldstack, \n-\t\t\t     HOST_WIDE_INT offset)\n-{\n-  tree field;\n-  int count = 0;\n-\n-  for (field = TYPE_FIELDS (type); field; field = TREE_CHAIN (field))\n-    if (TREE_CODE (field) == FIELD_DECL)\n-      {\n-\tbool push = false;\n-      \n-\tif (!var_can_have_subvars (field))\n-\t  push = true;\n-\telse if (!(push_fields_onto_fieldstack\n-\t\t   (TREE_TYPE (field), fieldstack,\n-\t\t    offset + bitpos_of_field (field)))\n-\t\t && DECL_SIZE (field)\n-\t\t && !integer_zerop (DECL_SIZE (field)))\n-\t  /* Empty structures may have actual size, like in C++. So\n-\t     see if we didn't push any subfields and the size is\n-\t     nonzero, push the field onto the stack */\n-\t  push = true;\n-\t\n-\tif (push)\n-\t  {\n-\t    fieldoff_s *pair;\n-\n-\t    pair = VEC_safe_push (fieldoff_s, heap, *fieldstack, NULL);\n-\t    pair->field = field;\n-\t    pair->offset = offset + bitpos_of_field (field);\n-\t    count++;\n-\t  }\n-      }\n-  return count;\n-}\n-\n-\n /* This represents the used range of a variable.  */\n \n typedef struct used_part\n@@ -2925,22 +2858,6 @@ get_or_create_used_part_for (size_t uid)\n   return up;\n }\n \n-/* qsort comparison function for two fieldoff's PA and PB */\n-\n-static int \n-fieldoff_compare (const void *pa, const void *pb)\n-{\n-  const fieldoff_s *foa = (const fieldoff_s *)pa;\n-  const fieldoff_s *fob = (const fieldoff_s *)pb;\n-  HOST_WIDE_INT foasize, fobsize;\n-  \n-  if (foa->offset != fob->offset)\n-    return foa->offset - fob->offset;\n-\n-  foasize = TREE_INT_CST_LOW (DECL_SIZE (foa->field));\n-  fobsize = TREE_INT_CST_LOW (DECL_SIZE (fob->field));\n-  return foasize - fobsize;\n-}\n \n /* Given an aggregate VAR, create the subvariables that represent its\n    fields.  */\n@@ -2956,7 +2873,7 @@ create_overlap_variables_for (tree var)\n     return;\n \n   up = used_portions[uid];\n-  push_fields_onto_fieldstack (TREE_TYPE (var), &fieldstack, 0);\n+  push_fields_onto_fieldstack (TREE_TYPE (var), &fieldstack, 0, NULL);\n   if (VEC_length (fieldoff_s, fieldstack) != 0)\n     {\n       subvar_t *subvars;\n@@ -3024,10 +2941,7 @@ create_overlap_variables_for (tree var)\n       /* Otherwise, create the variables.  */\n       subvars = lookup_subvars_for_var (var);\n       \n-      qsort (VEC_address (fieldoff_s, fieldstack), \n-\t     VEC_length (fieldoff_s, fieldstack), \n-\t     sizeof (fieldoff_s),\n-\t     fieldoff_compare);\n+      sort_fieldstack (fieldstack);\n \n       for (i = VEC_length (fieldoff_s, fieldstack);\n \t   VEC_iterate (fieldoff_s, fieldstack, --i, fo);)"}, {"sha": "d3b0b822666a7e99c85a11379feb841268dc96b0", "filename": "gcc/tree-ssa-structalias.c", "status": "added", "additions": 3165, "deletions": 0, "changes": 3165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910fdc79ea9fe5da9cded92bceb7d2f4e7368e43/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910fdc79ea9fe5da9cded92bceb7d2f4e7368e43/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=910fdc79ea9fe5da9cded92bceb7d2f4e7368e43"}, {"sha": "4725f286e38c62651e4b64c407c4e810d17b6283", "filename": "gcc/tree-ssa-structalias.h", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910fdc79ea9fe5da9cded92bceb7d2f4e7368e43/gcc%2Ftree-ssa-structalias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910fdc79ea9fe5da9cded92bceb7d2f4e7368e43/gcc%2Ftree-ssa-structalias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.h?ref=910fdc79ea9fe5da9cded92bceb7d2f4e7368e43", "patch": "@@ -0,0 +1,33 @@\n+/* Tree based points-to analysis\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+   Contributed by Daniel Berlin <dberlin@dberlin.org>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2 of the License, or\n+(at your option) any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; if not, write to the Free Software\n+Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+*/\n+\n+#ifndef TREE_ALIAS_COMMON\n+#define TREE_ALIAS_COMMON\n+\n+struct constraint;\n+typedef struct constraint *constraint_t;\n+extern void dump_constraint (FILE *, constraint_t);\n+extern void dump_constraints (FILE *);\n+extern void debug_constraint (constraint_t);\n+extern void debug_constraints (void);\n+extern void dump_solution_for_var (FILE *, unsigned int);\n+extern void debug_solution_for_var (unsigned int);\n+#endif /* TREE_ALIAS_COMMON */"}]}