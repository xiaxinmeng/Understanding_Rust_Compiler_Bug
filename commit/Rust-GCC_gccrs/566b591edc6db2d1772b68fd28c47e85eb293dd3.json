{"sha": "566b591edc6db2d1772b68fd28c47e85eb293dd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY2YjU5MWVkYzZkYjJkMTc3MmI2OGZkMjhjNDdlODVlYjI5M2RkMw==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2007-12-13T10:43:33Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-12-13T10:43:33Z"}, "message": "tb-gcc.c (uw_data_t, [...]): Only define if not GCC-SJLJ eh.\n\n2007-12-06  Olivier Hainque  <hainque@adacore.com>\n\n\t* tb-gcc.c (uw_data_t, trace_callback): Only define if not GCC-SJLJ eh.\n\t(__gnat_backtrace): Early return 0 if using GCC-SJLJ eh.\n\nFrom-SVN: r130874", "tree": {"sha": "515e3ec56684678d575a345127469fecfc695dfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/515e3ec56684678d575a345127469fecfc695dfd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/566b591edc6db2d1772b68fd28c47e85eb293dd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/566b591edc6db2d1772b68fd28c47e85eb293dd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/566b591edc6db2d1772b68fd28c47e85eb293dd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/566b591edc6db2d1772b68fd28c47e85eb293dd3/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8236f02792de3882bb662d8a2f5915c1625bbc38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8236f02792de3882bb662d8a2f5915c1625bbc38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8236f02792de3882bb662d8a2f5915c1625bbc38"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "8ea77ee279f9b758c1f41efff89b9e9c9334ceec", "filename": "gcc/ada/tb-gcc.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/566b591edc6db2d1772b68fd28c47e85eb293dd3/gcc%2Fada%2Ftb-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/566b591edc6db2d1772b68fd28c47e85eb293dd3/gcc%2Fada%2Ftb-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftb-gcc.c?ref=566b591edc6db2d1772b68fd28c47e85eb293dd3", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *                     Copyright (C) 2004-2005, AdaCore                     *\n+ *                     Copyright (C) 2004-2007, AdaCore                     *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -40,6 +40,12 @@\n    tailored callback and carried-on datastructure to keep track of the\n    input parameters we got as well as of the basic processing state.  */\n \n+/******************\n+ * trace_callback *\n+ ******************/\n+\n+#if !defined (__USING_SJLJ_EXCEPTIONS__)\n+\n typedef struct {\n   void ** traceback;\n   int max_len;\n@@ -50,10 +56,6 @@ typedef struct {\n   int  n_entries_filled;\n } uw_data_t;\n \n-/******************\n- * trace_callback *\n- ******************/\n-\n #if defined (__ia64__) && defined (__hpux__)\n #include <uwx.h>\n #endif\n@@ -85,6 +87,8 @@ trace_callback (struct _Unwind_Context * uw_context, uw_data_t * uw_data)\n   return _URC_NO_REASON;\n }\n \n+#endif\n+\n /********************\n  * __gnat_backtrace *\n  ********************/\n@@ -94,6 +98,12 @@ __gnat_backtrace (void ** traceback, int max_len,\n \t\t  void * exclude_min, void * exclude_max,\n \t\t  int  skip_frames)\n {\n+#if defined (__USING_SJLJ_EXCEPTIONS__)\n+  /* We have no unwind material (tables) at hand with sjlj eh, and no\n+     way to retrieve complete and accurate call chain information from\n+     the context stack we maintain.  */\n+  return 0;\n+#else\n   uw_data_t uw_data;\n   /* State carried over during the whole unwinding process.  */\n \n@@ -110,4 +120,5 @@ __gnat_backtrace (void ** traceback, int max_len,\n   _Unwind_Backtrace ((_Unwind_Trace_Fn)trace_callback, &uw_data);\n \n   return uw_data.n_entries_filled;\n+#endif\n }"}]}