{"sha": "f07c22376848e9923aa8455d2c0a059d9d0e01d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA3YzIyMzc2ODQ4ZTk5MjNhYTg0NTVkMmMwYTA1OWQ5ZDBlMDFkNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-05-18T20:02:14Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-05-18T20:02:14Z"}, "message": "Some libstdc++ fixes for -Wdeprecated-copy.\n\n\t* include/bits/stl_deque.h (_Deque_iterator): Constrain constructor\n\tfor conversion to const_iterator.  Add defaulted copy ops.\n\t* libsupc++/new (bad_alloc): Add defaulted copy ops.\n\t* libsupc++/exception.h (exception): Add defaulted copy ops.\n\t* include/std/system_error (system_error): Add defaulted copy ops.\n\t* include/std/stdexcept (domain_error, invalid_argument)\n\t(length_error, out_of_range, range_error, overflow_error)\n\t(underflow_error): Add defaulted copy ops.\n\t* include/bits/stl_iterator.h (reverse_iterator): Add defaulted\n\tcopy assignment.\n\t* include/bits/allocator.h (allocator): Add defaulted copy assignment.\n\t* include/ext/throw_allocator.h (condition_base): Add defaulted\n\tdefault and copy ctor and copy assignment.\n\nFrom-SVN: r260380", "tree": {"sha": "06ecc73f75acf598f7943b6ed86b6357e68cbdba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06ecc73f75acf598f7943b6ed86b6357e68cbdba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f07c22376848e9923aa8455d2c0a059d9d0e01d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f07c22376848e9923aa8455d2c0a059d9d0e01d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f07c22376848e9923aa8455d2c0a059d9d0e01d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f07c22376848e9923aa8455d2c0a059d9d0e01d5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1261e77e53cb834ad5aedfe185acd37a2511292a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1261e77e53cb834ad5aedfe185acd37a2511292a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1261e77e53cb834ad5aedfe185acd37a2511292a"}], "stats": {"total": 73, "additions": 72, "deletions": 1}, "files": [{"sha": "b1c48d42349087ff6280f209e68a209f96810b23", "filename": "gcc/testsuite/g++.dg/cpp0x/Wattributes1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f07c22376848e9923aa8455d2c0a059d9d0e01d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWattributes1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f07c22376848e9923aa8455d2c0a059d9d0e01d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWattributes1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWattributes1.C?ref=f07c22376848e9923aa8455d2c0a059d9d0e01d5", "patch": "@@ -5,4 +5,4 @@\n #include <new>\n __attribute__((visibility(\"hidden\")))void*operator new(std::size_t); // { dg-warning \"visibility attribute ignored\" }\n \n-// { dg-message \"previous declaration\" \"\" { target *-*-* } 120 }\n+// { dg-message \"previous declaration\" \"\" { target *-*-* } 125 }"}, {"sha": "c4e10f11b5f56b36dc962be368f444768228369a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f07c22376848e9923aa8455d2c0a059d9d0e01d5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f07c22376848e9923aa8455d2c0a059d9d0e01d5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f07c22376848e9923aa8455d2c0a059d9d0e01d5", "patch": "@@ -1,3 +1,19 @@\n+2018-05-18  Jason Merrill  <jason@redhat.com>\n+\n+\t* include/bits/stl_deque.h (_Deque_iterator): Constrain constructor\n+\tfor conversion to const_iterator.  Add defaulted copy ops.\n+\t* libsupc++/new (bad_alloc): Add defaulted copy ops.\n+\t* libsupc++/exception.h (exception): Add defaulted copy ops.\n+\t* include/std/system_error (system_error): Add defaulted copy ops.\n+\t* include/std/stdexcept (domain_error, invalid_argument)\n+\t(length_error, out_of_range, range_error, overflow_error)\n+\t(underflow_error): Add defaulted copy ops.\n+\t* include/bits/stl_iterator.h (reverse_iterator): Add defaulted\n+\tcopy assignment.\n+\t* include/bits/allocator.h (allocator): Add defaulted copy assignment.\n+\t* include/ext/throw_allocator.h (condition_base): Add defaulted\n+\tdefault and copy ctor and copy assignment.\n+\n 2018-05-18  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/85098"}, {"sha": "2da499f1498b83c566710b6c5f2764293219f9bf", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f07c22376848e9923aa8455d2c0a059d9d0e01d5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f07c22376848e9923aa8455d2c0a059d9d0e01d5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=f07c22376848e9923aa8455d2c0a059d9d0e01d5", "patch": "@@ -132,6 +132,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       allocator(const allocator& __a) throw()\n       : __allocator_base<_Tp>(__a) { }\n+#if __cplusplus >= 201103L\n+      // Avoid implicit deprecation.\n+      allocator& operator=(const allocator&) = default;\n+#endif\n \n       template<typename _Tp1>\n \tallocator(const allocator<_Tp1>&) throw() { }"}, {"sha": "58a01c894c0569c6ffa8e246ee59d3b9b033bf92", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f07c22376848e9923aa8455d2c0a059d9d0e01d5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f07c22376848e9923aa8455d2c0a059d9d0e01d5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=f07c22376848e9923aa8455d2c0a059d9d0e01d5", "patch": "@@ -149,9 +149,23 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _Deque_iterator() _GLIBCXX_NOEXCEPT\n       : _M_cur(), _M_first(), _M_last(), _M_node() { }\n \n+#if __cplusplus < 201103L\n+      // Conversion from iterator to const_iterator.\n       _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT\n       : _M_cur(__x._M_cur), _M_first(__x._M_first),\n \t_M_last(__x._M_last), _M_node(__x._M_node) { }\n+#else\n+      // Conversion from iterator to const_iterator.\n+      template<typename _Iter,\n+              typename = _Require<is_same<_Self, const_iterator>,\n+                                  is_same<_Iter, iterator>>>\n+       _Deque_iterator(const _Iter& __x) noexcept\n+       : _M_cur(__x._M_cur), _M_first(__x._M_first),\n+         _M_last(__x._M_last), _M_node(__x._M_node) { }\n+\n+      _Deque_iterator(const _Deque_iterator&) = default;\n+      _Deque_iterator& operator=(const _Deque_iterator&) = default;\n+#endif\n \n       iterator\n       _M_const_cast() const _GLIBCXX_NOEXCEPT"}, {"sha": "0d5f20bc2c6dda9272cea8d3b2405a196e72dba9", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f07c22376848e9923aa8455d2c0a059d9d0e01d5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f07c22376848e9923aa8455d2c0a059d9d0e01d5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=f07c22376848e9923aa8455d2c0a059d9d0e01d5", "patch": "@@ -138,6 +138,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       reverse_iterator(const reverse_iterator& __x)\n       : current(__x.current) { }\n \n+#if __cplusplus >= 201103L\n+      reverse_iterator& operator=(const reverse_iterator&) = default;\n+#endif\n+\n       /**\n        *  A %reverse_iterator across other types can be copied if the\n        *  underlying %iterator can be converted to the type of @c current."}, {"sha": "7fd2ca149a0c27e6e08cc561df9bd280180bcee6", "filename": "libstdc++-v3/include/ext/throw_allocator.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f07c22376848e9923aa8455d2c0a059d9d0e01d5/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f07c22376848e9923aa8455d2c0a059d9d0e01d5/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h?ref=f07c22376848e9923aa8455d2c0a059d9d0e01d5", "patch": "@@ -402,6 +402,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   struct condition_base\n   {\n+#if __cplusplus >= 201103L\n+    condition_base() = default;\n+    condition_base(const condition_base&) = default;\n+    condition_base& operator=(const condition_base&) = default;\n+#endif\n     virtual ~condition_base() { };\n   };\n "}, {"sha": "5267e5692bfa08f49201b6c88f998553bbbeb1b8", "filename": "libstdc++-v3/include/std/stdexcept", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f07c22376848e9923aa8455d2c0a059d9d0e01d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f07c22376848e9923aa8455d2c0a059d9d0e01d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept?ref=f07c22376848e9923aa8455d2c0a059d9d0e01d5", "patch": "@@ -150,6 +150,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     explicit domain_error(const string& __arg) _GLIBCXX_TXN_SAFE;\n #if __cplusplus >= 201103L\n     explicit domain_error(const char*) _GLIBCXX_TXN_SAFE;\n+    domain_error(const domain_error&) = default;\n+    domain_error& operator=(const domain_error&) = default;\n #endif\n     virtual ~domain_error() _GLIBCXX_USE_NOEXCEPT;\n   };\n@@ -161,6 +163,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     explicit invalid_argument(const string& __arg) _GLIBCXX_TXN_SAFE;\n #if __cplusplus >= 201103L\n     explicit invalid_argument(const char*) _GLIBCXX_TXN_SAFE;\n+    invalid_argument(const invalid_argument&) = default;\n+    invalid_argument& operator=(const invalid_argument&) = default;\n #endif\n     virtual ~invalid_argument() _GLIBCXX_USE_NOEXCEPT;\n   };\n@@ -173,6 +177,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     explicit length_error(const string& __arg) _GLIBCXX_TXN_SAFE;\n #if __cplusplus >= 201103L\n     explicit length_error(const char*) _GLIBCXX_TXN_SAFE;\n+    length_error(const length_error&) = default;\n+    length_error& operator=(const length_error&) = default;\n #endif\n     virtual ~length_error() _GLIBCXX_USE_NOEXCEPT;\n   };\n@@ -185,6 +191,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     explicit out_of_range(const string& __arg) _GLIBCXX_TXN_SAFE;\n #if __cplusplus >= 201103L\n     explicit out_of_range(const char*) _GLIBCXX_TXN_SAFE;\n+    out_of_range(const out_of_range&) = default;\n+    out_of_range& operator=(const out_of_range&) = default;\n #endif\n     virtual ~out_of_range() _GLIBCXX_USE_NOEXCEPT;\n   };\n@@ -233,6 +241,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     explicit range_error(const string& __arg) _GLIBCXX_TXN_SAFE;\n #if __cplusplus >= 201103L\n     explicit range_error(const char*) _GLIBCXX_TXN_SAFE;\n+    range_error(const range_error&) = default;\n+    range_error& operator=(const range_error&) = default;\n #endif\n     virtual ~range_error() _GLIBCXX_USE_NOEXCEPT;\n   };\n@@ -244,6 +254,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     explicit overflow_error(const string& __arg) _GLIBCXX_TXN_SAFE;\n #if __cplusplus >= 201103L\n     explicit overflow_error(const char*) _GLIBCXX_TXN_SAFE;\n+    overflow_error(const overflow_error&) = default;\n+    overflow_error& operator=(const overflow_error&) = default;\n #endif\n     virtual ~overflow_error() _GLIBCXX_USE_NOEXCEPT;\n   };\n@@ -255,6 +267,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     explicit underflow_error(const string& __arg) _GLIBCXX_TXN_SAFE;\n #if __cplusplus >= 201103L\n     explicit underflow_error(const char*) _GLIBCXX_TXN_SAFE;\n+    underflow_error(const underflow_error&) = default;\n+    underflow_error& operator=(const underflow_error&) = default;\n #endif\n     virtual ~underflow_error() _GLIBCXX_USE_NOEXCEPT;\n   };"}, {"sha": "150ec025975e4b5a7ecc92d7472d2f94ab6448f4", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f07c22376848e9923aa8455d2c0a059d9d0e01d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f07c22376848e9923aa8455d2c0a059d9d0e01d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=f07c22376848e9923aa8455d2c0a059d9d0e01d5", "patch": "@@ -364,6 +364,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : runtime_error(__what + \": \" + error_code(__v, __ecat).message()),\n       _M_code(__v, __ecat) { }\n \n+#if __cplusplus >= 201103L\n+    system_error (const system_error &) = default;\n+    system_error &operator= (const system_error &) = default;\n+#endif\n+\n     virtual ~system_error() noexcept;\n \n     const error_code&"}, {"sha": "1adfe7cbef6f67bb4240e5cf5a35487d0ec02f11", "filename": "libstdc++-v3/libsupc++/exception.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f07c22376848e9923aa8455d2c0a059d9d0e01d5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f07c22376848e9923aa8455d2c0a059d9d0e01d5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception.h?ref=f07c22376848e9923aa8455d2c0a059d9d0e01d5", "patch": "@@ -62,6 +62,10 @@ namespace std\n   public:\n     exception() _GLIBCXX_USE_NOEXCEPT { }\n     virtual ~exception() _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT;\n+#if __cplusplus >= 201103L\n+    exception(const exception&) = default;\n+    exception& operator=(const exception&) = default;\n+#endif\n \n     /** Returns a C-style character string describing the general cause\n      *  of the current error.  */"}, {"sha": "73483c8a92c7b2f6cfb278d3e3e21d442d6d66b3", "filename": "libstdc++-v3/libsupc++/new", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f07c22376848e9923aa8455d2c0a059d9d0e01d5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f07c22376848e9923aa8455d2c0a059d9d0e01d5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew?ref=f07c22376848e9923aa8455d2c0a059d9d0e01d5", "patch": "@@ -56,6 +56,11 @@ namespace std\n   public:\n     bad_alloc() throw() { }\n \n+#if __cplusplus >= 201103L\n+    bad_alloc(const bad_alloc&) = default;\n+    bad_alloc& operator=(const bad_alloc&) = default;\n+#endif\n+\n     // This declaration is not useless:\n     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118\n     virtual ~bad_alloc() throw();"}]}