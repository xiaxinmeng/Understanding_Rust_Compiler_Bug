{"sha": "a365fa0636886aeda83e57b84d837cfba13597fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM2NWZhMDYzNjg4NmFlZGE4M2U1N2I4NGQ4MzdjZmJhMTM1OTdmZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-09-10T18:56:51Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-09-10T18:56:51Z"}, "message": "Add call_used_or_fixed_reg_p\n\nSimilarly to the call_used_or_fixed_regs patch, this one replaces\ntests of call_used_regs[i] with call_used_or_fixed_reg_p (i).\nThe only remaining direct uses of call_used_regs are in reginfo.c\nand in the conditional register usage hooks.\n\nAgain, this is purely mechanical.  A later patch will clear up the\noddities in config/ code.\n\n2019-09-10  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* hard-reg-set.h (call_used_or_fixed_reg_p): New macro.\n\t* cfgloopanal.c (init_set_costs): Use call_used_or_fixed_reg_p\n\tinstead of testing call_used_regs directly.\n\t* config/aarch64/aarch64.c (aarch64_layout_frame): Likewise.\n\t(aarch64_components_for_bb): Likewise.\n\t* config/alpha/alpha.c (alpha_compute_frame_layout): Likewise.\n\t* config/arc/arc.c (arc_must_save_register): Likewise.\n\t(arc_epilogue_uses): Likewise.\n\t* config/arm/arm.c (arm_option_override, use_return_insn): Likewise.\n\t(legitimize_pic_address, callee_saved_reg_p): Likewise.\n\t(arm_compute_save_reg0_reg12_mask): Likewise.\n\t(arm_compute_save_core_reg_mask): Likewise.\n\t(arm_get_vfp_saved_size, arm_compute_frame_layout): Likewise.\n\t(arm_save_coproc_regs, thumb1_extra_regs_pushed): Likewise.\n\t(cmse_nonsecure_entry_clear_before_return): Likewise.\n\t(thumb1_expand_epilogue, arm_expand_epilogue_apcs_frame): Likewise.\n\t(arm_expand_epilogue): Likewise.\n\t* config/avr/avr.c (avr_regs_to_save, sequent_regs_live): Likewise.\n\t(avr_function_arg_advance, avr_find_unused_d_reg): Likewise.\n\t(_reg_unused_after): Likewise.\n\t* config/bfin/bfin.c (must_save_p, expand_prologue_reg_save): Likewise.\n\t(expand_epilogue_reg_restore, n_regs_saved_by_prologue): Likewise.\n\t(add_to_reg, hwloop_optimize): Likewise.\n\t* config/bpf/bpf.c (bpf_compute_frame_layout, bpf_expand_prologue)\n\t(bpf_expand_epilogue): Likewise.\n\t* config/c6x/c6x.c (c6x_save_reg, c6x_regno_reg_class): Likewise.\n\t* config/cr16/cr16.c (cr16_compute_save_regs): Likewise.\n\t* config/cris/cris.c (cris_reg_saved_in_regsave_area): Likewise.\n\t* config/epiphany/epiphany.c (epiphany_init_reg_tables): Likewise.\n\t(epiphany_compute_function_type, MUST_SAVE_REGISTER): Likewise.\n\t(epiphany_output_mi_thunk, epiphany_start_function): Likewise.\n\t* config/fr30/fr30.c (fr30_num_arg_regs): Likewise.\n\t* config/frv/frv.c (frv_stack_info): Likewise.\n\t* config/ft32/ft32.c (ft32_compute_frame): Likewise.\n\t(ft32_expand_prologue, ft32_expand_epilogue): Likewise.\n\t* config/gcn/gcn.c (gcn_compute_frame_offsets): Likewise.\n\t(move_callee_saved_registers): Likewise.\n\t* config/h8300/h8300.c (byte_reg): Likewise.\n\t* config/i386/i386-options.c (ix86_set_current_function): Likewise.\n\t* config/i386/i386.c (ix86_save_reg, ix86_expand_prologue): Likewise.\n\t(ix86_expand_epilogue, x86_order_regs_for_local_alloc): Likewise.\n\t* config/i386/predicates.md (sibcall_memory_operand): Likewise.\n\t* config/ia64/ia64.c (emit_safe_across_calls, find_gr_spill): Likewise.\n\t(next_scratch_gr_reg, ia64_compute_frame_size): Likewise.\n\t* config/iq2000/iq2000.h (MUST_SAVE_REGISTER): Likewise.\n\t* config/lm32/lm32.c (lm32_compute_frame_size): Likewise.\n\t* config/m32c/m32c.c (need_to_save): Likewise.\n\t* config/m68k/m68k.c (m68k_save_reg): Likewise.\n\t* config/mcore/mcore.c (calc_live_regs): Likewise.\n\t* config/microblaze/microblaze.c (microblaze_must_save_register):\n\tLikewise.\n\t* config/mmix/mmix.c (mmix_local_regno): Likewise.\n\t(mmix_initial_elimination_offset, mmix_reorg): Likewise.\n\t(mmix_use_simple_return, mmix_expand_prologue): Likewise.\n\t(mmix_expand_epilogue): Likewise.\n\t* config/moxie/moxie.c (moxie_compute_frame): Likewise.\n\t(moxie_expand_prologue, moxie_expand_epilogue): Likewise.\n\t* config/msp430/msp430.c (msp430_preserve_reg_p): Likewise.\n\t* config/nds32/nds32.h (nds32_16bit_address_type): Likewise.\n\t(NDS32_REQUIRED_CALLEE_SAVED_P): Likewise.\n\t* config/nios2/nios2.c (prologue_saved_reg_p): Likewise.\n\t* config/or1k/or1k.c (callee_saved_regno_p): Likewise.\n\t* config/pa/pa.c (pa_expand_prologue, pa_expand_epilogue): Likewise.\n\t* config/pdp11/pdp11.c (pdp11_saved_regno): Likewise.\n\t* config/pru/pru.c (prologue_saved_reg_p): Likewise.\n\t* config/riscv/riscv.c (riscv_save_reg_p): Likewise.\n\t(riscv_epilogue_uses, riscv_hard_regno_mode_ok): Likewise.\n\t* config/rl78/rl78.c (need_to_save): Likewise.\n\t* config/rs6000/rs6000-logue.c (save_reg_p): Likewise.\n\t(rs6000_stack_info, generate_set_vrsave): Likewise.\n\t(rs6000_emit_prologue, rs6000_emit_epilogue): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_debug_reg_print): Likewise.\n\t* config/rx/rx.c (rx_get_stack_layout): Likewise.\n\t* config/s390/s390.c (s390_call_saved_register_used): Likewise.\n\t* config/sh/sh.c (calc_live_regs, sh_output_mi_thunk): Likewise.\n\t* config/sparc/sparc.c (save_global_or_fp_reg_p): Likewise.\n\t(save_local_or_in_reg_p): Likewise.\n\t* config/stormy16/stormy16.c (REG_NEEDS_SAVE): Likewise.\n\t(xstormy16_epilogue_uses): Likewise.\n\t* config/tilegx/tilegx.c (need_to_save_reg): Likewise.\n\t* config/tilepro/tilepro.c (need_to_save_reg): Likewise.\n\t* config/v850/v850.c (compute_register_save_size): Likewise.\n\t* config/vax/vax.c (vax_expand_prologue): Likewise.\n\t* config/visium/visium.c (visium_save_reg_p): Likewise.\n\t* config/xtensa/xtensa.c (xtensa_call_save_reg): Likewise.\n\t* cselib.c (cselib_process_insn): Likewise.\n\t* df-scan.c (df_get_entry_block_def_set): Likewise.\n\t* function.c (aggregate_value_p): Likewise.\n\t* haifa-sched.c (alloc_global_sched_pressure_data): Likewise.\n\t* ira-lives.c (process_bb_node_lives): Likewise.\n\t* ira.c (do_reload): Likewise.\n\t* lra-lives.c (process_bb_lives): Likewise.\n\t* lra-remat.c (lra_remat): Likewise.\n\t* lra.c (lra): Likewise.\n\t* postreload.c (reload_combine_recognize_pattern): Likewise.\n\t(reload_cse_move2add): Likewise.\n\t* recog.c (peep2_find_free_register): Likewise.\n\t* regrename.c (check_new_reg_p): Likewise.\n\t* reload.c (find_equiv_reg): Likewise.\n\t* reload1.c (reload, find_reg): Likewise.\n\t* sel-sched.c (init_hard_regs_data): Likewise.\n\nFrom-SVN: r275602", "tree": {"sha": "4462b290455f16484b4486384ad142798dfc3d3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4462b290455f16484b4486384ad142798dfc3d3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a365fa0636886aeda83e57b84d837cfba13597fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a365fa0636886aeda83e57b84d837cfba13597fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a365fa0636886aeda83e57b84d837cfba13597fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a365fa0636886aeda83e57b84d837cfba13597fe/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ff18ad15259c8978f85344934b146ff7b9ee07e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff18ad15259c8978f85344934b146ff7b9ee07e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff18ad15259c8978f85344934b146ff7b9ee07e1"}], "stats": {"total": 479, "additions": 306, "deletions": 173}, "files": [{"sha": "099652b4e3c6be55f5c53971295cdc6d2d7e72c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -1,3 +1,107 @@\n+2019-09-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* hard-reg-set.h (call_used_or_fixed_reg_p): New macro.\n+\t* cfgloopanal.c (init_set_costs): Use call_used_or_fixed_reg_p\n+\tinstead of testing call_used_regs directly.\n+\t* config/aarch64/aarch64.c (aarch64_layout_frame): Likewise.\n+\t(aarch64_components_for_bb): Likewise.\n+\t* config/alpha/alpha.c (alpha_compute_frame_layout): Likewise.\n+\t* config/arc/arc.c (arc_must_save_register): Likewise.\n+\t(arc_epilogue_uses): Likewise.\n+\t* config/arm/arm.c (arm_option_override, use_return_insn): Likewise.\n+\t(legitimize_pic_address, callee_saved_reg_p): Likewise.\n+\t(arm_compute_save_reg0_reg12_mask): Likewise.\n+\t(arm_compute_save_core_reg_mask): Likewise.\n+\t(arm_get_vfp_saved_size, arm_compute_frame_layout): Likewise.\n+\t(arm_save_coproc_regs, thumb1_extra_regs_pushed): Likewise.\n+\t(cmse_nonsecure_entry_clear_before_return): Likewise.\n+\t(thumb1_expand_epilogue, arm_expand_epilogue_apcs_frame): Likewise.\n+\t(arm_expand_epilogue): Likewise.\n+\t* config/avr/avr.c (avr_regs_to_save, sequent_regs_live): Likewise.\n+\t(avr_function_arg_advance, avr_find_unused_d_reg): Likewise.\n+\t(_reg_unused_after): Likewise.\n+\t* config/bfin/bfin.c (must_save_p, expand_prologue_reg_save): Likewise.\n+\t(expand_epilogue_reg_restore, n_regs_saved_by_prologue): Likewise.\n+\t(add_to_reg, hwloop_optimize): Likewise.\n+\t* config/bpf/bpf.c (bpf_compute_frame_layout, bpf_expand_prologue)\n+\t(bpf_expand_epilogue): Likewise.\n+\t* config/c6x/c6x.c (c6x_save_reg, c6x_regno_reg_class): Likewise.\n+\t* config/cr16/cr16.c (cr16_compute_save_regs): Likewise.\n+\t* config/cris/cris.c (cris_reg_saved_in_regsave_area): Likewise.\n+\t* config/epiphany/epiphany.c (epiphany_init_reg_tables): Likewise.\n+\t(epiphany_compute_function_type, MUST_SAVE_REGISTER): Likewise.\n+\t(epiphany_output_mi_thunk, epiphany_start_function): Likewise.\n+\t* config/fr30/fr30.c (fr30_num_arg_regs): Likewise.\n+\t* config/frv/frv.c (frv_stack_info): Likewise.\n+\t* config/ft32/ft32.c (ft32_compute_frame): Likewise.\n+\t(ft32_expand_prologue, ft32_expand_epilogue): Likewise.\n+\t* config/gcn/gcn.c (gcn_compute_frame_offsets): Likewise.\n+\t(move_callee_saved_registers): Likewise.\n+\t* config/h8300/h8300.c (byte_reg): Likewise.\n+\t* config/i386/i386-options.c (ix86_set_current_function): Likewise.\n+\t* config/i386/i386.c (ix86_save_reg, ix86_expand_prologue): Likewise.\n+\t(ix86_expand_epilogue, x86_order_regs_for_local_alloc): Likewise.\n+\t* config/i386/predicates.md (sibcall_memory_operand): Likewise.\n+\t* config/ia64/ia64.c (emit_safe_across_calls, find_gr_spill): Likewise.\n+\t(next_scratch_gr_reg, ia64_compute_frame_size): Likewise.\n+\t* config/iq2000/iq2000.h (MUST_SAVE_REGISTER): Likewise.\n+\t* config/lm32/lm32.c (lm32_compute_frame_size): Likewise.\n+\t* config/m32c/m32c.c (need_to_save): Likewise.\n+\t* config/m68k/m68k.c (m68k_save_reg): Likewise.\n+\t* config/mcore/mcore.c (calc_live_regs): Likewise.\n+\t* config/microblaze/microblaze.c (microblaze_must_save_register):\n+\tLikewise.\n+\t* config/mmix/mmix.c (mmix_local_regno): Likewise.\n+\t(mmix_initial_elimination_offset, mmix_reorg): Likewise.\n+\t(mmix_use_simple_return, mmix_expand_prologue): Likewise.\n+\t(mmix_expand_epilogue): Likewise.\n+\t* config/moxie/moxie.c (moxie_compute_frame): Likewise.\n+\t(moxie_expand_prologue, moxie_expand_epilogue): Likewise.\n+\t* config/msp430/msp430.c (msp430_preserve_reg_p): Likewise.\n+\t* config/nds32/nds32.h (nds32_16bit_address_type): Likewise.\n+\t(NDS32_REQUIRED_CALLEE_SAVED_P): Likewise.\n+\t* config/nios2/nios2.c (prologue_saved_reg_p): Likewise.\n+\t* config/or1k/or1k.c (callee_saved_regno_p): Likewise.\n+\t* config/pa/pa.c (pa_expand_prologue, pa_expand_epilogue): Likewise.\n+\t* config/pdp11/pdp11.c (pdp11_saved_regno): Likewise.\n+\t* config/pru/pru.c (prologue_saved_reg_p): Likewise.\n+\t* config/riscv/riscv.c (riscv_save_reg_p): Likewise.\n+\t(riscv_epilogue_uses, riscv_hard_regno_mode_ok): Likewise.\n+\t* config/rl78/rl78.c (need_to_save): Likewise.\n+\t* config/rs6000/rs6000-logue.c (save_reg_p): Likewise.\n+\t(rs6000_stack_info, generate_set_vrsave): Likewise.\n+\t(rs6000_emit_prologue, rs6000_emit_epilogue): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_debug_reg_print): Likewise.\n+\t* config/rx/rx.c (rx_get_stack_layout): Likewise.\n+\t* config/s390/s390.c (s390_call_saved_register_used): Likewise.\n+\t* config/sh/sh.c (calc_live_regs, sh_output_mi_thunk): Likewise.\n+\t* config/sparc/sparc.c (save_global_or_fp_reg_p): Likewise.\n+\t(save_local_or_in_reg_p): Likewise.\n+\t* config/stormy16/stormy16.c (REG_NEEDS_SAVE): Likewise.\n+\t(xstormy16_epilogue_uses): Likewise.\n+\t* config/tilegx/tilegx.c (need_to_save_reg): Likewise.\n+\t* config/tilepro/tilepro.c (need_to_save_reg): Likewise.\n+\t* config/v850/v850.c (compute_register_save_size): Likewise.\n+\t* config/vax/vax.c (vax_expand_prologue): Likewise.\n+\t* config/visium/visium.c (visium_save_reg_p): Likewise.\n+\t* config/xtensa/xtensa.c (xtensa_call_save_reg): Likewise.\n+\t* cselib.c (cselib_process_insn): Likewise.\n+\t* df-scan.c (df_get_entry_block_def_set): Likewise.\n+\t* function.c (aggregate_value_p): Likewise.\n+\t* haifa-sched.c (alloc_global_sched_pressure_data): Likewise.\n+\t* ira-lives.c (process_bb_node_lives): Likewise.\n+\t* ira.c (do_reload): Likewise.\n+\t* lra-lives.c (process_bb_lives): Likewise.\n+\t* lra-remat.c (lra_remat): Likewise.\n+\t* lra.c (lra): Likewise.\n+\t* postreload.c (reload_combine_recognize_pattern): Likewise.\n+\t(reload_cse_move2add): Likewise.\n+\t* recog.c (peep2_find_free_register): Likewise.\n+\t* regrename.c (check_new_reg_p): Likewise.\n+\t* reload.c (find_equiv_reg): Likewise.\n+\t* reload1.c (reload, find_reg): Likewise.\n+\t* sel-sched.c (init_hard_regs_data): Likewise.\n+\n 2019-09-10  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/frv/frv.c (frv_ifcvt_modify_tests): Use"}, {"sha": "0ebecc37ad8648073a0aaac6c13194ada63b11fc", "filename": "gcc/cfgloopanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fcfgloopanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fcfgloopanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopanal.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -353,7 +353,7 @@ init_set_costs (void)\n \t&& !fixed_regs[i])\n       {\n \ttarget_avail_regs++;\n-\tif (call_used_regs[i])\n+\tif (call_used_or_fixed_reg_p (i))\n \t  target_clobbered_regs++;\n       }\n "}, {"sha": "ed04060c7f86ad5b9c4afbfb4caeaa5c4a3c4910", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -5336,12 +5336,12 @@ aarch64_layout_frame (void)\n   for (regno = R0_REGNUM; regno <= R30_REGNUM; regno++)\n     if (df_regs_ever_live_p (regno)\n \t&& (regno == R30_REGNUM\n-\t    || !call_used_regs[regno]))\n+\t    || !call_used_or_fixed_reg_p (regno)))\n       cfun->machine->frame.reg_offset[regno] = SLOT_REQUIRED;\n \n   for (regno = V0_REGNUM; regno <= V31_REGNUM; regno++)\n     if (df_regs_ever_live_p (regno)\n-\t&& (!call_used_regs[regno]\n+\t&& (!call_used_or_fixed_reg_p (regno)\n \t    || (simd_function && FP_SIMD_SAVED_REGNUM_P (regno))))\n       {\n \tcfun->machine->frame.reg_offset[regno] = SLOT_REQUIRED;\n@@ -5938,7 +5938,7 @@ aarch64_components_for_bb (basic_block bb)\n \n   /* GPRs are used in a bb if they are in the IN, GEN, or KILL sets.  */\n   for (unsigned regno = 0; regno <= LAST_SAVED_REGNUM; regno++)\n-    if ((!call_used_regs[regno]\n+    if ((!call_used_or_fixed_reg_p (regno)\n \t|| (simd_function && FP_SIMD_SAVED_REGNUM_P (regno)))\n        && (bitmap_bit_p (in, regno)\n \t   || bitmap_bit_p (gen, regno)"}, {"sha": "5c07b9530fd29615b6a041f7f5b51a0f198c48bc", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -7225,7 +7225,7 @@ alpha_compute_frame_layout (void)\n \n       /* One for every register we have to save.  */\n       for (unsigned i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-\tif (! fixed_regs[i] && ! call_used_regs[i]\n+\tif (! fixed_regs[i] && ! call_used_or_fixed_reg_p (i)\n \t    && df_regs_ever_live_p (i) && i != REG_RA)\n \t  sa_mask |= HOST_WIDE_INT_1U << i;\n \n@@ -7285,7 +7285,7 @@ alpha_compute_frame_layout (void)\n       vms_save_fp_regno = -1;\n       if (vms_base_regno == HARD_FRAME_POINTER_REGNUM)\n \tfor (unsigned i = 0; i < 32; i++)\n-\t  if (! fixed_regs[i] && call_used_regs[i]\n+\t  if (! fixed_regs[i] && call_used_or_fixed_reg_p (i)\n \t      && ! df_regs_ever_live_p (i))\n \t    {\n \t      vms_save_fp_regno = i;"}, {"sha": "0b5d3fd7e260feeb40b960dba60d1525b6fb8e8c", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -2735,7 +2735,7 @@ arc_must_save_register (int regno, struct function *func, bool special_p)\n       break;\n     }\n \n-  if (((df_regs_ever_live_p (regno) && !call_used_regs[regno])\n+  if (((df_regs_ever_live_p (regno) && !call_used_or_fixed_reg_p (regno))\n        /* In an interrupt save everything.  */\n        || (ARC_INTERRUPT_P (fn_type)\n \t   && (df_regs_ever_live_p (RETURN_ADDR_REGNUM)\n@@ -10331,7 +10331,7 @@ arc_epilogue_uses (int regno)\n   if (epilogue_completed && ARC_INTERRUPT_P (fn_type))\n     {\n       /* An interrupt function restores more registers.  */\n-      if (df_regs_ever_live_p (regno) || call_used_regs[regno])\n+      if (df_regs_ever_live_p (regno) || call_used_or_fixed_reg_p (regno))\n \treturn true;\n     }\n "}, {"sha": "db7de5e4a80e2b06fcd18c76256d3166fa3f386d", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -3475,7 +3475,7 @@ arm_option_override (void)\n \twarning (0, \"%<-mpic-register=%> is useless without %<-fpic%>\");\n \n       /* Prevent the user from choosing an obviously stupid PIC register.  */\n-      else if (pic_register < 0 || call_used_regs[pic_register]\n+      else if (pic_register < 0 || call_used_or_fixed_reg_p (pic_register)\n \t       || pic_register == HARD_FRAME_POINTER_REGNUM\n \t       || pic_register == STACK_POINTER_REGNUM\n \t       || pic_register >= PC_REGNUM\n@@ -4155,7 +4155,7 @@ use_return_insn (int iscond, rtx sibling)\n     {\n       /* Validate that r3 is a call-clobbered register (always true in\n \t the default abi) ...  */\n-      if (!call_used_regs[3])\n+      if (!call_used_or_fixed_reg_p (3))\n \treturn 0;\n \n       /* ... that it isn't being used for a return value ... */\n@@ -4211,12 +4211,12 @@ use_return_insn (int iscond, rtx sibling)\n      since this also requires an insn.  */\n   if (TARGET_HARD_FLOAT)\n     for (regno = FIRST_VFP_REGNUM; regno <= LAST_VFP_REGNUM; regno++)\n-      if (df_regs_ever_live_p (regno) && !call_used_regs[regno])\n+      if (df_regs_ever_live_p (regno) && !call_used_or_fixed_reg_p (regno))\n \treturn 0;\n \n   if (TARGET_REALLY_IWMMXT)\n     for (regno = FIRST_IWMMXT_REGNUM; regno <= LAST_IWMMXT_REGNUM; regno++)\n-      if (df_regs_ever_live_p (regno) && ! call_used_regs[regno])\n+      if (df_regs_ever_live_p (regno) && ! call_used_or_fixed_reg_p (regno))\n \treturn 0;\n \n   return 1;\n@@ -7735,7 +7735,7 @@ legitimize_pic_address (rtx orig, machine_mode mode, rtx reg, rtx pic_reg,\n    registers are marked as caller saved when optimizing for size on Thumb-1\n    targets despite being callee saved in order to avoid using them.  */\n #define callee_saved_reg_p(reg) \\\n-  (!call_used_regs[reg] \\\n+  (!call_used_or_fixed_reg_p (reg) \\\n    || (TARGET_THUMB1 && optimize_size \\\n        && reg >= FIRST_HI_REGNUM && reg <= LAST_HI_REGNUM))\n \n@@ -19721,7 +19721,7 @@ arm_compute_save_reg0_reg12_mask (void)\n \n       for (reg = 0; reg <= max_reg; reg++)\n \tif (df_regs_ever_live_p (reg)\n-\t    || (! crtl->is_leaf && call_used_regs[reg]))\n+\t    || (! crtl->is_leaf && call_used_or_fixed_reg_p (reg)))\n \t  save_reg_mask |= (1 << reg);\n \n       /* Also save the pic base register if necessary.  */\n@@ -19900,7 +19900,7 @@ arm_compute_save_core_reg_mask (void)\n       && (save_reg_mask & THUMB2_WORK_REGS) == 0)\n     {\n       reg = thumb_find_work_register (1 << 4);\n-      if (!call_used_regs[reg])\n+      if (!call_used_or_fixed_reg_p (reg))\n \tsave_reg_mask |= (1 << reg);\n     }\n \n@@ -20008,8 +20008,10 @@ arm_get_vfp_saved_size (void)\n \t   regno < LAST_VFP_REGNUM;\n \t   regno += 2)\n \t{\n-\t  if ((!df_regs_ever_live_p (regno) || call_used_regs[regno])\n-\t      && (!df_regs_ever_live_p (regno + 1) || call_used_regs[regno + 1]))\n+\t  if ((!df_regs_ever_live_p (regno)\n+\t       || call_used_or_fixed_reg_p (regno))\n+\t      && (!df_regs_ever_live_p (regno + 1)\n+\t\t  || call_used_or_fixed_reg_p (regno + 1)))\n \t    {\n \t      if (count > 0)\n \t\t{\n@@ -21530,7 +21532,8 @@ arm_compute_frame_layout (void)\n \t  for (regno = FIRST_IWMMXT_REGNUM;\n \t       regno <= LAST_IWMMXT_REGNUM;\n \t       regno++)\n-\t    if (df_regs_ever_live_p (regno) && ! call_used_regs[regno])\n+\t    if (df_regs_ever_live_p (regno)\n+\t\t&& !call_used_or_fixed_reg_p (regno))\n \t      saved += 8;\n \t}\n \n@@ -21747,7 +21750,7 @@ arm_save_coproc_regs(void)\n   rtx insn;\n \n   for (reg = LAST_IWMMXT_REGNUM; reg >= FIRST_IWMMXT_REGNUM; reg--)\n-    if (df_regs_ever_live_p (reg) && ! call_used_regs[reg])\n+    if (df_regs_ever_live_p (reg) && !call_used_or_fixed_reg_p (reg))\n       {\n \tinsn = gen_rtx_PRE_DEC (Pmode, stack_pointer_rtx);\n \tinsn = gen_rtx_MEM (V2SImode, insn);\n@@ -21762,8 +21765,9 @@ arm_save_coproc_regs(void)\n \n       for (reg = FIRST_VFP_REGNUM; reg < LAST_VFP_REGNUM; reg += 2)\n \t{\n-\t  if ((!df_regs_ever_live_p (reg) || call_used_regs[reg])\n-\t      && (!df_regs_ever_live_p (reg + 1) || call_used_regs[reg + 1]))\n+\t  if ((!df_regs_ever_live_p (reg) || call_used_or_fixed_reg_p (reg))\n+\t      && (!df_regs_ever_live_p (reg + 1)\n+\t\t  || call_used_or_fixed_reg_p (reg + 1)))\n \t    {\n \t      if (start_reg != reg)\n \t\tsaved_size += vfp_emit_fstmd (start_reg,\n@@ -25137,7 +25141,7 @@ thumb1_extra_regs_pushed (arm_stack_offsets *offsets, bool for_prologue)\n     }\n \n   while (reg_base + n_free < 8 && !(live_regs_mask & 1)\n-\t && (for_prologue || call_used_regs[reg_base + n_free]))\n+\t && (for_prologue || call_used_or_fixed_reg_p (reg_base + n_free)))\n     {\n       live_regs_mask >>= 1;\n       n_free++;\n@@ -25821,7 +25825,7 @@ cmse_nonsecure_entry_clear_before_return (void)\n \tcontinue;\n       if (IN_RANGE (regno, IP_REGNUM, PC_REGNUM))\n \tcontinue;\n-      if (call_used_regs[regno])\n+      if (call_used_or_fixed_reg_p (regno))\n \tbitmap_set_bit (to_clear_bitmap, regno);\n     }\n \n@@ -25973,7 +25977,7 @@ thumb1_expand_epilogue (void)\n   /* Emit a clobber for each insn that will be restored in the epilogue,\n      so that flow2 will get register lifetimes correct.  */\n   for (regno = 0; regno < 13; regno++)\n-    if (df_regs_ever_live_p (regno) && !call_used_regs[regno])\n+    if (df_regs_ever_live_p (regno) && !call_used_or_fixed_reg_p (regno))\n       emit_clobber (gen_rtx_REG (SImode, regno));\n \n   if (! df_regs_ever_live_p (LR_REGNUM))\n@@ -26039,9 +26043,9 @@ arm_expand_epilogue_apcs_frame (bool really_return)\n \n       for (i = FIRST_VFP_REGNUM; i < LAST_VFP_REGNUM; i += 2)\n         /* Look for a case where a reg does not need restoring.  */\n-        if ((!df_regs_ever_live_p (i) || call_used_regs[i])\n+        if ((!df_regs_ever_live_p (i) || call_used_or_fixed_reg_p (i))\n             && (!df_regs_ever_live_p (i + 1)\n-                || call_used_regs[i + 1]))\n+                || call_used_or_fixed_reg_p (i + 1)))\n           {\n             if (start_reg != i)\n               arm_emit_vfp_multi_reg_pop (start_reg,\n@@ -26068,7 +26072,7 @@ arm_expand_epilogue_apcs_frame (bool really_return)\n       int lrm_count = (num_regs % 2) ? (num_regs + 2) : (num_regs + 1);\n \n       for (i = LAST_IWMMXT_REGNUM; i >= FIRST_IWMMXT_REGNUM; i--)\n-        if (df_regs_ever_live_p (i) && !call_used_regs[i])\n+        if (df_regs_ever_live_p (i) && !call_used_or_fixed_reg_p (i))\n           {\n             rtx addr = gen_frame_mem (V2SImode,\n                                  plus_constant (Pmode, hard_frame_pointer_rtx,\n@@ -26273,9 +26277,9 @@ arm_expand_epilogue (bool really_return)\n          unlike pop, vldm can only do consecutive regs.  */\n       for (i = LAST_VFP_REGNUM - 1; i >= FIRST_VFP_REGNUM; i -= 2)\n         /* Look for a case where a reg does not need restoring.  */\n-        if ((!df_regs_ever_live_p (i) || call_used_regs[i])\n+        if ((!df_regs_ever_live_p (i) || call_used_or_fixed_reg_p (i))\n             && (!df_regs_ever_live_p (i + 1)\n-                || call_used_regs[i + 1]))\n+                || call_used_or_fixed_reg_p (i + 1)))\n           {\n             /* Restore the regs discovered so far (from reg+2 to\n                end_reg).  */\n@@ -26297,7 +26301,7 @@ arm_expand_epilogue (bool really_return)\n \n   if (TARGET_IWMMXT)\n     for (i = FIRST_IWMMXT_REGNUM; i <= LAST_IWMMXT_REGNUM; i++)\n-      if (df_regs_ever_live_p (i) && !call_used_regs[i])\n+      if (df_regs_ever_live_p (i) && !call_used_or_fixed_reg_p (i))\n         {\n           rtx_insn *insn;\n           rtx addr = gen_rtx_MEM (V2SImode,"}, {"sha": "04fc00f4a55fbcd9747d86cbd56ccf9dde978222", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -1183,9 +1183,9 @@ avr_regs_to_save (HARD_REG_SET *set)\n       if (fixed_regs[reg])\n         continue;\n \n-      if ((int_or_sig_p && !crtl->is_leaf && call_used_regs[reg])\n+      if ((int_or_sig_p && !crtl->is_leaf && call_used_or_fixed_reg_p (reg))\n           || (df_regs_ever_live_p (reg)\n-              && (int_or_sig_p || !call_used_regs[reg])\n+              && (int_or_sig_p || !call_used_or_fixed_reg_p (reg))\n               /* Don't record frame pointer registers here.  They are treated\n                  indivitually in prologue.  */\n               && !(frame_pointer_needed\n@@ -1367,7 +1367,7 @@ sequent_regs_live (void)\n             continue;\n         }\n \n-      if (!call_used_regs[reg])\n+      if (!call_used_or_fixed_reg_p (reg))\n         {\n           if (df_regs_ever_live_p (reg))\n             {\n@@ -3421,7 +3421,7 @@ avr_function_arg_advance (cumulative_args_t cum_v,\n \n   if (cum->regno >= 8\n       && cum->nregs >= 0\n-      && !call_used_regs[cum->regno])\n+      && !call_used_or_fixed_reg_p (cum->regno))\n     {\n       /* FIXME: We ship info on failing tail-call in struct machine_function.\n          This uses internals of calls.c:expand_call() and the way args_so_far\n@@ -3568,7 +3568,7 @@ avr_find_unused_d_reg (rtx_insn *insn, rtx exclude)\n           && (TREE_THIS_VOLATILE (current_function_decl)\n               || cfun->machine->is_OS_task\n               || cfun->machine->is_OS_main\n-              || (!isr_p && call_used_regs[regno])))\n+              || (!isr_p && call_used_or_fixed_reg_p (regno))))\n         {\n           return reg;\n         }\n@@ -9552,7 +9552,7 @@ _reg_unused_after (rtx_insn *insn, rtx reg)\n \t\t&& REG_P (XEXP (XEXP (tem, 0), 0))\n \t\t&& reg_overlap_mentioned_p (reg, XEXP (XEXP (tem, 0), 0)))\n \t      return 0;\n-\t  if (call_used_regs[REGNO (reg)])\n+\t  if (call_used_or_fixed_reg_p (REGNO (reg)))\n \t    return 1;\n \t}\n "}, {"sha": "fbe4c10a8c891bdc15e341bd1be8e6a6ce1eed05", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -235,13 +235,13 @@ must_save_p (bool is_inthandler, unsigned regno)\n       return (is_eh_return_reg\n \t      || (df_regs_ever_live_p (regno)\n \t\t  && !fixed_regs[regno]\n-\t\t  && (is_inthandler || !call_used_regs[regno])));\n+\t\t  && (is_inthandler || !call_used_or_fixed_reg_p (regno))));\n     }\n   else if (P_REGNO_P (regno))\n     {\n       return ((df_regs_ever_live_p (regno)\n \t       && !fixed_regs[regno]\n-\t       && (is_inthandler || !call_used_regs[regno]))\n+\t       && (is_inthandler || !call_used_or_fixed_reg_p (regno)))\n \t      || (is_inthandler\n \t\t  && (ENABLE_WA_05000283 || ENABLE_WA_05000315)\n \t\t  && regno == REG_P5)\n@@ -251,9 +251,9 @@ must_save_p (bool is_inthandler, unsigned regno)\n \t\t      || (TARGET_ID_SHARED_LIBRARY && !crtl->is_leaf))));\n     }\n   else\n-    return ((is_inthandler || !call_used_regs[regno])\n+    return ((is_inthandler || !call_used_or_fixed_reg_p (regno))\n \t    && (df_regs_ever_live_p (regno)\n-\t\t|| (!leaf_function_p () && call_used_regs[regno])));\n+\t\t|| (!leaf_function_p () && call_used_or_fixed_reg_p (regno))));\n \n }\n \n@@ -419,7 +419,7 @@ expand_prologue_reg_save (rtx spreg, int saveall, bool is_inthandler)\n     if (saveall \n \t|| (is_inthandler\n \t    && (df_regs_ever_live_p (i)\n-\t\t|| (!leaf_function_p () && call_used_regs[i]))))\n+\t\t|| (!leaf_function_p () && call_used_or_fixed_reg_p (i)))))\n       {\n \trtx_insn *insn;\n \tif (i == REG_A0 || i == REG_A1)\n@@ -458,7 +458,7 @@ expand_epilogue_reg_restore (rtx spreg, bool saveall, bool is_inthandler)\n     if (saveall\n \t|| (is_inthandler\n \t    && (df_regs_ever_live_p (i)\n-\t\t|| (!leaf_function_p () && call_used_regs[i]))))\n+\t\t|| (!leaf_function_p () && call_used_or_fixed_reg_p (i)))))\n       {\n \tif (i == REG_A0 || i == REG_A1)\n \t  {\n@@ -652,7 +652,7 @@ n_regs_saved_by_prologue (void)\n     if (all\n \t|| (fkind != SUBROUTINE\n \t    && (df_regs_ever_live_p (i)\n-\t\t|| (!leaf_function_p () && call_used_regs[i]))))\n+\t\t|| (!leaf_function_p () && call_used_or_fixed_reg_p (i)))))\n       n += i == REG_A0 || i == REG_A1 ? 2 : 1;\n \n   return n;\n@@ -753,7 +753,7 @@ add_to_reg (rtx reg, HOST_WIDE_INT value, int frame, int epilogue_p)\n \t{\n \t  int i;\n \t  for (i = REG_P0; i <= REG_P5; i++)\n-\t    if ((df_regs_ever_live_p (i) && ! call_used_regs[i])\n+\t    if ((df_regs_ever_live_p (i) && ! call_used_or_fixed_reg_p (i))\n \t\t|| (!TARGET_FDPIC\n \t\t    && i == PIC_OFFSET_TABLE_REGNUM\n \t\t    && (crtl->uses_pic_offset_table\n@@ -3482,7 +3482,7 @@ hwloop_optimize (hwloop_info loop)\n       for (i = REG_P0; i <= REG_P5; i++)\n \tif ((df_regs_ever_live_p (i)\n \t     || (funkind (TREE_TYPE (current_function_decl)) == SUBROUTINE\n-\t\t && call_used_regs[i]))\n+\t\t && call_used_or_fixed_reg_p (i)))\n \t    && !REGNO_REG_SET_P (df_get_live_out (bb_in), i))\n \t  {\n \t    scratchreg = gen_rtx_REG (SImode, i);"}, {"sha": "6e57b0066b01c4bd31a2d210a5cb818d91eace16", "filename": "gcc/config/bpf/bpf.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fbpf%2Fbpf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fbpf%2Fbpf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Fbpf.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -273,7 +273,7 @@ bpf_compute_frame_layout (void)\n   for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n     if ((!fixed_regs[regno]\n \t && df_regs_ever_live_p (regno)\n-\t && !call_used_regs[regno])\n+\t && !call_used_or_fixed_reg_p (regno))\n \t|| (cfun->calls_alloca\n \t    && regno == STACK_POINTER_REGNUM))\n       cfun->machine->callee_saved_reg_size += 8;\n@@ -314,7 +314,7 @@ bpf_expand_prologue (void)\n     {\n       if ((!fixed_regs[regno]\n \t   && df_regs_ever_live_p (regno)\n-\t   && !call_used_regs[regno])\n+\t   && !call_used_or_fixed_reg_p (regno))\n \t  || (cfun->calls_alloca\n \t      && regno == STACK_POINTER_REGNUM))\n \t{\n@@ -374,7 +374,7 @@ bpf_expand_epilogue (void)\n     {\n       if ((!fixed_regs[regno]\n \t   && df_regs_ever_live_p (regno)\n-\t   && !call_used_regs[regno])\n+\t   && !call_used_or_fixed_reg_p (regno))\n \t  || (cfun->calls_alloca\n \t      && regno == STACK_POINTER_REGNUM))\n \t{"}, {"sha": "7d1c2f7516ebcc2a92a07d1e603a52819b95b670", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -2532,7 +2532,7 @@ static int\n c6x_save_reg (unsigned int regno)\n {\n   return ((df_regs_ever_live_p (regno)\n-\t   && !call_used_regs[regno]\n+\t   && !call_used_or_fixed_reg_p (regno)\n \t   && !fixed_regs[regno])\n \t  || (regno == RETURN_ADDR_REGNO\n \t      && (df_regs_ever_live_p (regno)\n@@ -6694,7 +6694,7 @@ c6x_regno_reg_class (int reg)\n   if (A_REGNO_P (reg))\n     return NONPREDICATE_A_REGS;\n \n-  if (call_used_regs[reg])\n+  if (call_used_or_fixed_reg_p (reg))\n     return CALL_USED_B_REGS;\n \n   return B_REGS;"}, {"sha": "aaac79741c26dbc0d8d27a3b72ef428f21ab09b3", "filename": "gcc/config/cr16/cr16.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fcr16%2Fcr16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fcr16%2Fcr16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Fcr16.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -367,7 +367,7 @@ cr16_compute_save_regs (void)\n       /* If this reg is used and not call-used (except RA), save it.  */\n       if (cr16_interrupt_function_p ())\n \t{\n-\t  if (!crtl->is_leaf && call_used_regs[regno])\n+\t  if (!crtl->is_leaf && call_used_or_fixed_reg_p (regno))\n \t    /* This is a volatile reg in a non-leaf interrupt routine - save \n \t       it for the sake of its sons.  */\n \t    current_frame_info.save_regs[regno] = 1;\n@@ -382,7 +382,8 @@ cr16_compute_save_regs (void)\n \t{\n \t  /* If this reg is used and not call-used (except RA), save it.  */\n \t  if (df_regs_ever_live_p (regno)\n-\t      && (!call_used_regs[regno] || regno == RETURN_ADDRESS_REGNUM))\n+\t      && (!call_used_or_fixed_reg_p (regno)\n+\t\t  || regno == RETURN_ADDRESS_REGNUM))\n \t    current_frame_info.save_regs[regno] = 1;\n \t  else\n \t    current_frame_info.save_regs[regno] = 0;"}, {"sha": "9f9bc512eae318101fd63b324ef60d68d6f10ddc", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -716,13 +716,13 @@ cris_reg_saved_in_regsave_area (unsigned int regno, bool got_really_used)\n {\n   return\n     (((df_regs_ever_live_p (regno)\n-       && !call_used_regs[regno])\n+       && !call_used_or_fixed_reg_p (regno))\n       || (regno == PIC_OFFSET_TABLE_REGNUM\n \t  && (got_really_used\n \t      /* It is saved anyway, if there would be a gap.  */\n \t      || (flag_pic\n \t\t  && df_regs_ever_live_p (regno + 1)\n-\t\t  && !call_used_regs[regno + 1]))))\n+\t\t  && !call_used_or_fixed_reg_p (regno + 1)))))\n      && (regno != FRAME_POINTER_REGNUM || !frame_pointer_needed)\n      && regno != CRIS_SRP_REGNUM)\n     || (crtl->calls_eh_return"}, {"sha": "12cb4b4102a35c164b701ba3fc4e1a043bab8d42", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -434,7 +434,7 @@ epiphany_init_reg_tables (void)\n \tepiphany_regno_reg_class[i] = LR_REGS;\n       else if (i <= 7 && TARGET_PREFER_SHORT_INSN_REGS)\n \tepiphany_regno_reg_class[i] = SHORT_INSN_REGS;\n-      else if (call_used_regs[i]\n+      else if (call_used_or_fixed_reg_p (i)\n \t       && TEST_HARD_REG_BIT (reg_class_contents[GENERAL_REGS], i))\n \tepiphany_regno_reg_class[i] = SIBCALL_REGS;\n       else if (i >= CORE_CONTROL_FIRST && i <= CORE_CONTROL_LAST)\n@@ -1066,8 +1066,8 @@ epiphany_compute_function_type (tree decl)\n #define MUST_SAVE_REGISTER(regno, interrupt_p) \\\n   ((df_regs_ever_live_p (regno) \\\n     || (interrupt_p && !crtl->is_leaf \\\n-\t&& call_used_regs[regno] && !fixed_regs[regno])) \\\n-   && (!call_used_regs[regno] || regno == GPR_LR \\\n+\t&& call_used_or_fixed_reg_p (regno) && !fixed_regs[regno])) \\\n+   && (!call_used_or_fixed_reg_p (regno) || regno == GPR_LR \\\n        || (interrupt_p && regno != GPR_SP)))\n \n #define MUST_SAVE_RETURN_ADDR 0\n@@ -2892,8 +2892,8 @@ epiphany_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \n   assemble_start_function (thunk, fnname);\n   /* We use IP and R16 as a scratch registers.  */\n-  gcc_assert (call_used_regs [GPR_IP]);\n-  gcc_assert (call_used_regs [GPR_16]);\n+  gcc_assert (call_used_or_fixed_reg_p (GPR_IP));\n+  gcc_assert (call_used_or_fixed_reg_p (GPR_16));\n \n   /* Add DELTA.  When possible use a plain add, otherwise load it into\n      a register first. */\n@@ -2999,7 +2999,7 @@ epiphany_start_function (FILE *file, const char *name, tree decl)\n \t    fputs (\"\\tstrd r0,[sp,-1]\\n\", file);\n \t  else\n \t    tmp = GPR_16;\n-\t  gcc_assert (call_used_regs[tmp]);\n+\t  gcc_assert (call_used_or_fixed_reg_p (tmp));\n \t  fprintf (file, \"\\tmov r%d,%%low(\", tmp);\n \t  assemble_name (file, dst_name);\n \t  fprintf (file, \")\\n\""}, {"sha": "d765c4b36d7ff7554eef14db3ee9fd569f1a9b6f", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -141,7 +141,7 @@ static int fr30_num_arg_regs (const function_arg_info &);\n   (   (regno) != RETURN_POINTER_REGNUM \\\n    && (regno) != FRAME_POINTER_REGNUM  \\\n    && df_regs_ever_live_p (regno)      \\\n-   && ! call_used_regs [regno]         )\n+   && ! call_used_or_fixed_reg_p (regno))\n \n #define MUST_SAVE_FRAME_POINTER\t (df_regs_ever_live_p (FRAME_POINTER_REGNUM)  || frame_pointer_needed)\n #define MUST_SAVE_RETURN_POINTER (df_regs_ever_live_p (RETURN_POINTER_REGNUM) || crtl->profile)"}, {"sha": "223415e847c22db7f1806ab641bcd24b236daaed", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -1101,7 +1101,8 @@ frv_stack_info (void)\n \tdefault:\n \t  for (regno = first; regno <= last; regno++)\n \t    {\n-\t      if ((df_regs_ever_live_p (regno) && !call_used_regs[regno])\n+\t      if ((df_regs_ever_live_p (regno)\n+\t\t   && !call_used_or_fixed_reg_p (regno))\n \t\t  || (crtl->calls_eh_return\n \t\t      && (regno >= FIRST_EH_REGNUM && regno <= LAST_EH_REGNUM))\n \t\t  || (!TARGET_FDPIC && flag_pic"}, {"sha": "3361df13249d2f2a1cef3494116745796deb5237", "filename": "gcc/config/ft32/ft32.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fft32%2Fft32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fft32%2Fft32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fft32%2Fft32.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -411,7 +411,7 @@ ft32_compute_frame (void)\n \n   /* Save callee-saved registers.  */\n   for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n-    if (df_regs_ever_live_p (regno) && (!call_used_regs[regno]))\n+    if (df_regs_ever_live_p (regno) && !call_used_or_fixed_reg_p (regno))\n       cfun->machine->callee_saved_reg_size += 4;\n \n   cfun->machine->size_for_adjusting_sp =\n@@ -475,7 +475,7 @@ ft32_expand_prologue (void)\n     {\n       for (regno = FIRST_PSEUDO_REGISTER; regno-- > 0;)\n \t{\n-\t  if (!fixed_regs[regno] && !call_used_regs[regno]\n+\t  if (!fixed_regs[regno] && !call_used_or_fixed_reg_p (regno)\n \t      && df_regs_ever_live_p (regno))\n \t    {\n \t      rtx preg = gen_rtx_REG (Pmode, regno);\n@@ -489,7 +489,7 @@ ft32_expand_prologue (void)\n       for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n \t{\n \t  if (!fixed_regs[regno] && df_regs_ever_live_p (regno)\n-\t      && !call_used_regs[regno])\n+\t      && !call_used_or_fixed_reg_p (regno))\n \t    {\n \t      insn = emit_insn (gen_movsi_push (gen_rtx_REG (Pmode, regno)));\n \t      RTX_FRAME_RELATED_P (insn) = 1;\n@@ -554,7 +554,7 @@ ft32_expand_epilogue (void)\n     {\n       for (regno = FIRST_PSEUDO_REGISTER; regno-- > 0;)\n         {\n-          if (!fixed_regs[regno] && !call_used_regs[regno]\n+          if (!fixed_regs[regno] && !call_used_or_fixed_reg_p (regno)\n               && df_regs_ever_live_p (regno))\n             {\n               rtx preg = gen_rtx_REG (Pmode, regno);"}, {"sha": "50ae8e1e9138ddce2ab73815198417beb1267019", "filename": "gcc/config/gcn/gcn.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fgcn%2Fgcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fgcn%2Fgcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -2540,7 +2540,7 @@ gcn_compute_frame_offsets (void)\n   offsets->callee_saves = offsets->lr_needs_saving ? 8 : 0;\n \n   for (int regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n-    if ((df_regs_ever_live_p (regno) && !call_used_regs[regno])\n+    if ((df_regs_ever_live_p (regno) && !call_used_or_fixed_reg_p (regno))\n \t|| ((regno & ~1) == HARD_FRAME_POINTER_REGNUM\n \t    && frame_pointer_needed))\n       offsets->callee_saves += (VGPR_REGNO_P (regno) ? 256 : 4);\n@@ -2572,7 +2572,7 @@ move_callee_saved_registers (rtx sp, machine_function *offsets,\n \n   /* Move scalars into two vector registers.  */\n   for (regno = 0, saved_scalars = 0; regno < FIRST_VGPR_REG; regno++)\n-    if ((df_regs_ever_live_p (regno) && !call_used_regs[regno])\n+    if ((df_regs_ever_live_p (regno) && !call_used_or_fixed_reg_p (regno))\n \t|| ((regno & ~1) == LINK_REGNUM && offsets->lr_needs_saving)\n \t|| ((regno & ~1) == HARD_FRAME_POINTER_REGNUM\n \t    && offsets->need_frame_pointer))\n@@ -2618,7 +2618,7 @@ move_callee_saved_registers (rtx sp, machine_function *offsets,\n   /* Move vectors.  */\n   for (regno = FIRST_VGPR_REG, offset = offsets->pretend_size;\n        regno < FIRST_PSEUDO_REGISTER; regno++)\n-    if ((df_regs_ever_live_p (regno) && !call_used_regs[regno])\n+    if ((df_regs_ever_live_p (regno) && !call_used_or_fixed_reg_p (regno))\n \t|| (regno == VGPR_REGNO (6) && saved_scalars > 0)\n \t|| (regno == VGPR_REGNO (7) && saved_scalars > 63))\n       {"}, {"sha": "87529c3119df03629d7a5027e0a1aa1dd0a0d4de", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -485,7 +485,8 @@ byte_reg (rtx x, int b)\n    && ! TREE_THIS_VOLATILE (current_function_decl)\t\t\t\\\n    && (h8300_saveall_function_p (current_function_decl)\t\t\t\\\n        /* Save any call saved register that was used.  */\t\t\\\n-       || (df_regs_ever_live_p (regno) && !call_used_regs[regno])\t\\\n+       || (df_regs_ever_live_p (regno)\t\t\t\t\t\\\n+\t   && !call_used_or_fixed_reg_p (regno))\t\t\t\\\n        /* Save the frame pointer if it was used.  */\t\t\t\\\n        || (regno == HARD_FRAME_POINTER_REGNUM && df_regs_ever_live_p (regno)) \\\n        /* Save any register used in an interrupt handler.  */\t\t\\\n@@ -494,7 +495,7 @@ byte_reg (rtx x, int b)\n        /* Save call clobbered registers in non-leaf interrupt\t\t\\\n \t  handlers.  */\t\t\t\t\t\t\t\\\n        || (h8300_current_function_interrupt_function_p ()\t\t\\\n-\t   && call_used_regs[regno]\t\t\t\t\t\\\n+\t   && call_used_or_fixed_reg_p (regno)\t\t\t\t\\\n \t   && !crtl->is_leaf)))\n \n /* We use this to wrap all emitted insns in the prologue.  */"}, {"sha": "c148aa20511db83f92c78813c4f8ce186fc30eb5", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -3076,7 +3076,7 @@ ix86_set_current_function (tree fndecl)\n      Avoid expensive re-initialization of init_regs each time we switch\n      function context.  */\n   if (TARGET_64BIT\n-      && (call_used_regs[SI_REG]\n+      && (call_used_or_fixed_reg_p (SI_REG)\n \t  == (cfun->machine->call_abi == MS_ABI)))\n     reinit_regs ();\n   /* Need to re-initialize init_regs if caller-saved registers are"}, {"sha": "7525b9d2a43518bbf071169bb4dde09722ba59b9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -5665,7 +5665,7 @@ ix86_save_reg (unsigned int regno, bool maybe_eh_return, bool ignore_outlined)\n     return true;\n \n   return (df_regs_ever_live_p (regno)\n-\t  && !call_used_regs[regno]\n+\t  && !call_used_or_fixed_reg_p (regno)\n \t  && !fixed_regs[regno]\n \t  && (regno != HARD_FRAME_POINTER_REGNUM || !frame_pointer_needed));\n }\n@@ -7837,7 +7837,7 @@ ix86_expand_prologue (void)\n \t       \"around by avoiding functions with aggregate return.\");\n \n       /* Only need to push parameter pointer reg if it is caller saved.  */\n-      if (!call_used_regs[REGNO (crtl->drap_reg)])\n+      if (!call_used_or_fixed_reg_p (REGNO (crtl->drap_reg)))\n \t{\n \t  /* Push arg pointer reg */\n \t  insn = emit_insn (gen_push (crtl->drap_reg));\n@@ -8012,7 +8012,7 @@ ix86_expand_prologue (void)\n \t  if (ix86_static_chain_on_stack)\n \t    stack_size += UNITS_PER_WORD;\n \n-\t  if (!call_used_regs[REGNO (crtl->drap_reg)])\n+\t  if (!call_used_or_fixed_reg_p (REGNO (crtl->drap_reg)))\n \t    stack_size += UNITS_PER_WORD;\n \n \t  /* This over-estimates by 1 minimal-stack-alignment-unit but\n@@ -8903,7 +8903,7 @@ ix86_expand_epilogue (int style)\n \n       if (ix86_static_chain_on_stack)\n \tparam_ptr_offset += UNITS_PER_WORD;\n-      if (!call_used_regs[REGNO (crtl->drap_reg)])\n+      if (!call_used_or_fixed_reg_p (REGNO (crtl->drap_reg)))\n \tparam_ptr_offset += UNITS_PER_WORD;\n \n       insn = emit_insn (gen_rtx_SET\n@@ -8921,7 +8921,7 @@ ix86_expand_epilogue (int style)\n \t\t\t\t  GEN_INT (param_ptr_offset)));\n       RTX_FRAME_RELATED_P (insn) = 1;\n \n-      if (!call_used_regs[REGNO (crtl->drap_reg)])\n+      if (!call_used_or_fixed_reg_p (REGNO (crtl->drap_reg)))\n \tix86_emit_restore_reg_using_pop (crtl->drap_reg);\n     }\n \n@@ -19643,12 +19643,12 @@ x86_order_regs_for_local_alloc (void)\n \n    /* First allocate the local general purpose registers.  */\n    for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-     if (GENERAL_REGNO_P (i) && call_used_regs[i])\n+     if (GENERAL_REGNO_P (i) && call_used_or_fixed_reg_p (i))\n \treg_alloc_order [pos++] = i;\n \n    /* Global general purpose registers.  */\n    for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-     if (GENERAL_REGNO_P (i) && !call_used_regs[i])\n+     if (GENERAL_REGNO_P (i) && !call_used_or_fixed_reg_p (i))\n \treg_alloc_order [pos++] = i;\n \n    /* x87 registers come first in case we are doing FP math"}, {"sha": "72f8e7eae3c5adac5591aa502e30c0e0995a63e7", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -690,7 +690,7 @@\n   if (GET_CODE (op) == PLUS && REG_P (XEXP (op, 0)))\n     {\n       int regno = REGNO (XEXP (op, 0));\n-      if (!HARD_REGISTER_NUM_P (regno) || call_used_regs[regno])\n+      if (!HARD_REGISTER_NUM_P (regno) || call_used_or_fixed_reg_p (regno))\n \t{\n \t  op = XEXP (op, 1);\n \t  if (GOT32_symbol_operand (op, VOIDmode))"}, {"sha": "ff2ad2060cca0b145d580550896f333453509dbb", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -2523,11 +2523,12 @@ emit_safe_across_calls (void)\n   out_state = 0;\n   while (1)\n     {\n-      while (rs < 64 && call_used_regs[PR_REG (rs)])\n+      while (rs < 64 && call_used_or_fixed_reg_p (PR_REG (rs)))\n \trs++;\n       if (rs >= 64)\n \tbreak;\n-      for (re = rs + 1; re < 64 && ! call_used_regs[PR_REG (re)]; re++)\n+      for (re = rs + 1;\n+\t   re < 64 && ! call_used_or_fixed_reg_p (PR_REG (re)); re++)\n \tcontinue;\n       if (out_state == 0)\n \t{\n@@ -2593,7 +2594,7 @@ find_gr_spill (enum ia64_frame_regs r, int try_locals)\n     {\n       for (regno = GR_REG (1); regno <= GR_REG (31); regno++)\n \tif (! df_regs_ever_live_p (regno)\n-\t    && call_used_regs[regno]\n+\t    && call_used_or_fixed_reg_p (regno)\n \t    && ! fixed_regs[regno]\n \t    && ! global_regs[regno]\n \t    && ((current_frame_info.gr_used_mask >> regno) & 1) == 0\n@@ -2641,7 +2642,7 @@ next_scratch_gr_reg (void)\n   for (i = 0; i < 32; ++i)\n     {\n       regno = (last_scratch_gr_reg + i + 1) & 31;\n-      if (call_used_regs[regno]\n+      if (call_used_or_fixed_reg_p (regno)\n \t  && ! fixed_regs[regno]\n \t  && ! global_regs[regno]\n \t  && ((current_frame_info.gr_used_mask >> regno) & 1) == 0)\n@@ -2762,7 +2763,7 @@ ia64_compute_frame_size (HOST_WIDE_INT size)\n      which will always wind up on the stack.  */\n \n   for (regno = FR_REG (2); regno <= FR_REG (127); regno++)\n-    if (df_regs_ever_live_p (regno) && ! call_used_regs[regno])\n+    if (df_regs_ever_live_p (regno) && ! call_used_or_fixed_reg_p (regno))\n       {\n \tSET_HARD_REG_BIT (mask, regno);\n \tspill_size += 16;\n@@ -2771,7 +2772,7 @@ ia64_compute_frame_size (HOST_WIDE_INT size)\n       }\n \n   for (regno = GR_REG (1); regno <= GR_REG (31); regno++)\n-    if (df_regs_ever_live_p (regno) && ! call_used_regs[regno])\n+    if (df_regs_ever_live_p (regno) && ! call_used_or_fixed_reg_p (regno))\n       {\n \tSET_HARD_REG_BIT (mask, regno);\n \tspill_size += 8;\n@@ -2780,7 +2781,7 @@ ia64_compute_frame_size (HOST_WIDE_INT size)\n       }\n \n   for (regno = BR_REG (1); regno <= BR_REG (7); regno++)\n-    if (df_regs_ever_live_p (regno) && ! call_used_regs[regno])\n+    if (df_regs_ever_live_p (regno) && ! call_used_or_fixed_reg_p (regno))\n       {\n \tSET_HARD_REG_BIT (mask, regno);\n \tspill_size += 8;\n@@ -2840,7 +2841,8 @@ ia64_compute_frame_size (HOST_WIDE_INT size)\n     }\n   else\n     {\n-      if (df_regs_ever_live_p (BR_REG (0)) && ! call_used_regs[BR_REG (0)])\n+      if (df_regs_ever_live_p (BR_REG (0))\n+\t  && ! call_used_or_fixed_reg_p (BR_REG (0)))\n \t{\n \t  SET_HARD_REG_BIT (mask, BR_REG (0));\n \t  extra_spill_size += 8;\n@@ -2894,7 +2896,7 @@ ia64_compute_frame_size (HOST_WIDE_INT size)\n \n   /* See if we need to store the predicate register block.  */\n   for (regno = PR_REG (0); regno <= PR_REG (63); regno++)\n-    if (df_regs_ever_live_p (regno) && ! call_used_regs[regno])\n+    if (df_regs_ever_live_p (regno) && ! call_used_or_fixed_reg_p (regno))\n       break;\n   if (regno <= PR_REG (63))\n     {"}, {"sha": "163a6d3d217fc63efbff03dd798eb24507edef79", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -687,7 +687,7 @@ enum delay_type\n /* Tell prologue and epilogue if register REGNO should be saved / restored.  */\n \n #define MUST_SAVE_REGISTER(regno) \\\n-  ((df_regs_ever_live_p (regno) && !call_used_regs[regno])\t\t\\\n+  ((df_regs_ever_live_p (regno) && !call_used_or_fixed_reg_p (regno))\t\\\n   || (regno == HARD_FRAME_POINTER_REGNUM && frame_pointer_needed)\t\\\n    || (regno == (GP_REG_FIRST + 31) && df_regs_ever_live_p (GP_REG_FIRST + 31)))\n "}, {"sha": "67706a428c94a9f009faa1456f45d1f87ef6a665", "filename": "gcc/config/lm32/lm32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Flm32%2Flm32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Flm32%2Flm32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -457,7 +457,7 @@ lm32_compute_frame_size (int size)\n      and calculate size required to store them in the stack.  */\n   for (regno = 1; regno < SP_REGNUM; regno++)\n     {\n-      if (df_regs_ever_live_p (regno) && !call_used_regs[regno])\n+      if (df_regs_ever_live_p (regno) && !call_used_or_fixed_reg_p (regno))\n \t{\n \t  reg_save_mask |= 1 << regno;\n \t  callee_size += UNITS_PER_WORD;"}, {"sha": "d8dc63ea17cc7061c1d666a0b3c04a5957804054", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -1114,7 +1114,7 @@ need_to_save (int regno)\n \t  ))\n     return 1;\n   if (df_regs_ever_live_p (regno)\n-      && (!call_used_regs[regno] || cfun->machine->is_interrupt))\n+      && (!call_used_or_fixed_reg_p (regno) || cfun->machine->is_interrupt))\n     return 1;\n   return 0;\n }"}, {"sha": "1030dfa595763873e01b9cef2b9e5e0810ce7c05", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -944,7 +944,7 @@ m68k_save_reg (unsigned int regno, bool interrupt_handler)\n       if (df_regs_ever_live_p (regno))\n \treturn true;\n \n-      if (!crtl->is_leaf && call_used_regs[regno])\n+      if (!crtl->is_leaf && call_used_or_fixed_reg_p (regno))\n \treturn true;\n     }\n \n@@ -953,7 +953,7 @@ m68k_save_reg (unsigned int regno, bool interrupt_handler)\n     return false;\n \n   /* Otherwise save everything that isn't call-clobbered.  */\n-  return !call_used_regs[regno];\n+  return !call_used_or_fixed_reg_p (regno);\n }\n \n /* Emit RTL for a MOVEM or FMOVEM instruction.  BASE + OFFSET represents"}, {"sha": "a419d42f1f2f412c945be223f8b5e89096f8bda9", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -316,7 +316,7 @@ calc_live_regs (int * count)\n \n   for (reg = 0; reg < FIRST_PSEUDO_REGISTER; reg++)\n     {\n-      if (df_regs_ever_live_p (reg) && !call_used_regs[reg])\n+      if (df_regs_ever_live_p (reg) && !call_used_or_fixed_reg_p (reg))\n \t{\n \t  (*count)++;\n \t  live_regs_mask |= (1 << reg);"}, {"sha": "6705168c99376e52f7a8da2059041d58895fb3aa", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -2012,7 +2012,7 @@ microblaze_must_save_register (int regno)\n       (regno == MB_ABI_PIC_ADDR_REGNUM) && df_regs_ever_live_p (regno))\n     return 1;\n \n-  if (df_regs_ever_live_p (regno) && !call_used_regs[regno])\n+  if (df_regs_ever_live_p (regno) && !call_used_or_fixed_reg_p (regno))\n     return 1;\n \n   if (frame_pointer_needed && (regno == HARD_FRAME_POINTER_REGNUM))"}, {"sha": "b8d379d74a3a06c7a55fac8a4bf0a25c855902bc", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -464,7 +464,8 @@ mmix_opposite_regno (int regno, int incoming)\n int\n mmix_local_regno (int regno)\n {\n-  return regno <= MMIX_LAST_STACK_REGISTER_REGNUM && !call_used_regs[regno];\n+  return (regno <= MMIX_LAST_STACK_REGISTER_REGNUM\n+\t  && !call_used_or_fixed_reg_p (regno));\n }\n \n /* TARGET_PREFERRED_RELOAD_CLASS.\n@@ -604,7 +605,7 @@ mmix_initial_elimination_offset (int fromreg, int toreg)\n   for (regno = MMIX_FIRST_GLOBAL_REGNUM;\n        regno <= 255;\n        regno++)\n-    if ((df_regs_ever_live_p (regno) && ! call_used_regs[regno])\n+    if ((df_regs_ever_live_p (regno) && !call_used_or_fixed_reg_p (regno))\n \t|| IS_MMIX_EH_RETURN_DATA_REG (regno))\n       fp_sp_offset += 8;\n \n@@ -866,7 +867,7 @@ mmix_reorg (void)\n   for (regno = MMIX_LAST_STACK_REGISTER_REGNUM;\n        regno >= 0;\n        regno--)\n-    if ((df_regs_ever_live_p (regno) && !call_used_regs[regno])\n+    if ((df_regs_ever_live_p (regno) && !call_used_or_fixed_reg_p (regno))\n \t|| (regno == MMIX_FRAME_POINTER_REGNUM && frame_pointer_needed))\n       break;\n \n@@ -1958,7 +1959,7 @@ mmix_use_simple_return (void)\n     /* Note that we assume that the frame-pointer-register is one of these\n        registers, in which case we don't count it here.  */\n     if ((((regno != MMIX_FRAME_POINTER_REGNUM || !frame_pointer_needed)\n-\t  && df_regs_ever_live_p (regno) && !call_used_regs[regno]))\n+\t  && df_regs_ever_live_p (regno) && !call_used_or_fixed_reg_p (regno)))\n \t|| IS_MMIX_EH_RETURN_DATA_REG (regno))\n       return 0;\n \n@@ -1994,7 +1995,7 @@ mmix_expand_prologue (void)\n     /* Note that we assume that the frame-pointer-register is one of these\n        registers, in which case we don't count it here.  */\n     if ((((regno != MMIX_FRAME_POINTER_REGNUM || !frame_pointer_needed)\n-\t  && df_regs_ever_live_p (regno) && !call_used_regs[regno]))\n+\t  && df_regs_ever_live_p (regno) && !call_used_or_fixed_reg_p (regno)))\n \t|| IS_MMIX_EH_RETURN_DATA_REG (regno))\n       stack_space_to_allocate += 8;\n \n@@ -2180,7 +2181,7 @@ mmix_expand_prologue (void)\n        regno >= MMIX_FIRST_GLOBAL_REGNUM;\n        regno--)\n     if (((regno != MMIX_FRAME_POINTER_REGNUM || !frame_pointer_needed)\n-\t && df_regs_ever_live_p (regno) && ! call_used_regs[regno])\n+\t && df_regs_ever_live_p (regno) && !call_used_or_fixed_reg_p (regno))\n \t|| IS_MMIX_EH_RETURN_DATA_REG (regno))\n       {\n \trtx insn;\n@@ -2233,7 +2234,7 @@ mmix_expand_epilogue (void)\n        regno >= MMIX_FIRST_GLOBAL_REGNUM;\n        regno--)\n     if (((regno != MMIX_FRAME_POINTER_REGNUM || !frame_pointer_needed)\n-\t && df_regs_ever_live_p (regno) && !call_used_regs[regno])\n+\t && df_regs_ever_live_p (regno) && !call_used_or_fixed_reg_p (regno))\n \t|| IS_MMIX_EH_RETURN_DATA_REG (regno))\n       stack_space_to_deallocate += 8;\n \n@@ -2262,7 +2263,7 @@ mmix_expand_epilogue (void)\n        regno <= 255;\n        regno++)\n     if (((regno != MMIX_FRAME_POINTER_REGNUM || !frame_pointer_needed)\n-\t && df_regs_ever_live_p (regno) && !call_used_regs[regno])\n+\t && df_regs_ever_live_p (regno) && !call_used_or_fixed_reg_p (regno))\n \t|| IS_MMIX_EH_RETURN_DATA_REG (regno))\n       {\n \tif (offset > 255)"}, {"sha": "aa5948ea467d58129e3dc90631a5e267e91bb05a", "filename": "gcc/config/moxie/moxie.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fmoxie%2Fmoxie.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fmoxie%2Fmoxie.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -264,7 +264,7 @@ moxie_compute_frame (void)\n \n   /* Save callee-saved registers.  */\n   for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n-    if (df_regs_ever_live_p (regno) && (! call_used_regs[regno]))\n+    if (df_regs_ever_live_p (regno) && (! call_used_or_fixed_reg_p (regno)))\n       cfun->machine->callee_saved_reg_size += 4;\n \n   cfun->machine->size_for_adjusting_sp = \n@@ -288,7 +288,9 @@ moxie_expand_prologue (void)\n   /* Save callee-saved registers.  */\n   for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n     {\n-      if (!fixed_regs[regno] && df_regs_ever_live_p (regno) && !call_used_regs[regno])\n+      if (!fixed_regs[regno]\n+\t  && df_regs_ever_live_p (regno)\n+\t  && !call_used_or_fixed_reg_p (regno))\n \t{\n \t  insn = emit_insn (gen_movsi_push (gen_rtx_REG (Pmode, regno)));\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n@@ -349,7 +351,7 @@ moxie_expand_epilogue (void)\n \t  emit_insn (gen_addsi3 (reg, reg, hard_frame_pointer_rtx));\n \t}\n       for (regno = FIRST_PSEUDO_REGISTER; regno-- > 0; )\n-\tif (!fixed_regs[regno] && !call_used_regs[regno]\n+\tif (!fixed_regs[regno] && !call_used_or_fixed_reg_p (regno)\n \t    && df_regs_ever_live_p (regno))\n \t  {\n \t    rtx preg = gen_rtx_REG (Pmode, regno);"}, {"sha": "64308239593e04d185d452e64127ce110cc2f579", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -1152,7 +1152,7 @@ msp430_preserve_reg_p (int regno)\n \treturn true;\n     }\n \n-  if (!call_used_regs[regno]\n+  if (!call_used_or_fixed_reg_p (regno)\n       && df_regs_ever_live_p (regno))\n     return true;\n "}, {"sha": "64cc4556371828ae929d23f46096ba40d959157f", "filename": "gcc/config/nds32/nds32.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fnds32%2Fnds32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fnds32%2Fnds32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.h?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -226,7 +226,7 @@ enum nds32_16bit_address_type\n    As long as the register satisfies both criteria above,\n    it is required to be saved.  */\n #define NDS32_REQUIRED_CALLEE_SAVED_P(regno)                  \\\n-  ((!call_used_regs[regno]) && (df_regs_ever_live_p (regno)))\n+  (!call_used_or_fixed_reg_p (regno) && df_regs_ever_live_p (regno))\n \n /* This macro is to check if the push25/pop25 are available to be used\n    for code generation.  Because pop25 also performs return behavior,"}, {"sha": "4cea0f4e2f2e91e024e0b197ba17ab823908e200", "filename": "gcc/config/nios2/nios2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fnios2%2Fnios2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fnios2%2Fnios2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -1080,7 +1080,7 @@ prologue_saved_reg_p (unsigned regno)\n {\n   gcc_assert (GP_REG_P (regno));\n   \n-  if (df_regs_ever_live_p (regno) && !call_used_regs[regno])\n+  if (df_regs_ever_live_p (regno) && !call_used_or_fixed_reg_p (regno))\n     return true;\n \n   if (regno == HARD_FRAME_POINTER_REGNUM && frame_pointer_needed)"}, {"sha": "eff83b9767da8f78656c41c3e353b92bc2817875", "filename": "gcc/config/or1k/or1k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2For1k%2For1k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2For1k%2For1k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2For1k%2For1k.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -100,7 +100,7 @@ static bool\n callee_saved_regno_p (int regno)\n {\n   /* Check call-saved registers.  */\n-  if (!call_used_regs[regno] && df_regs_ever_live_p (regno))\n+  if (!call_used_or_fixed_reg_p (regno) && df_regs_ever_live_p (regno))\n     return true;\n \n   switch (regno)"}, {"sha": "80a0ea01d1148a83e29f140e20a5cd7ff8d2dfad", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -4053,7 +4053,7 @@ pa_expand_prologue (void)\n \t}\n \n       for (i = 18; i >= 4; i--)\n-\tif (df_regs_ever_live_p (i) && ! call_used_regs[i])\n+\tif (df_regs_ever_live_p (i) && !call_used_or_fixed_reg_p (i))\n \t  {\n \t    store_reg (i, offset, HARD_FRAME_POINTER_REGNUM);\n \t    offset += UNITS_PER_WORD;\n@@ -4093,7 +4093,7 @@ pa_expand_prologue (void)\n \t}\n \n       for (i = 18; i >= 3; i--)\n-      \tif (df_regs_ever_live_p (i) && ! call_used_regs[i])\n+\tif (df_regs_ever_live_p (i) && !call_used_or_fixed_reg_p (i))\n \t  {\n \t    /* If merge_sp_adjust_with_store is nonzero, then we can\n \t       optimize the first GR save.  */\n@@ -4394,7 +4394,7 @@ pa_expand_epilogue (void)\n \t}\n \n       for (i = 18; i >= 4; i--)\n-\tif (df_regs_ever_live_p (i) && ! call_used_regs[i])\n+\tif (df_regs_ever_live_p (i) && !call_used_or_fixed_reg_p (i))\n \t  {\n \t    load_reg (i, offset, HARD_FRAME_POINTER_REGNUM);\n \t    offset += UNITS_PER_WORD;\n@@ -4431,7 +4431,7 @@ pa_expand_epilogue (void)\n \n       for (i = 18; i >= 3; i--)\n \t{\n-\t  if (df_regs_ever_live_p (i) && ! call_used_regs[i])\n+\t  if (df_regs_ever_live_p (i) && !call_used_or_fixed_reg_p (i))\n \t    {\n \t      /* Only for the first load.\n \t         merge_sp_adjust_with_load holds the register load"}, {"sha": "d7c68091a7a20a7f95ff542981dcee65dd9a0bb3", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -313,7 +313,7 @@ static bool pdp11_scalar_mode_supported_p (scalar_mode);\n static inline bool\n pdp11_saved_regno (unsigned regno)\n {\n-  return !call_used_regs[regno] && df_regs_ever_live_p (regno);\n+  return !call_used_or_fixed_reg_p (regno) && df_regs_ever_live_p (regno);\n }\n \n /* Expand the function prologue.  */"}, {"sha": "416399ea5fd8f479f1abf8be518dde4b53be348b", "filename": "gcc/config/pru/pru.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fpru%2Fpru.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fpru%2Fpru.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpru%2Fpru.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -443,7 +443,7 @@ prologue_saved_reg_p (int regno)\n {\n   gcc_assert (GP_REG_P (regno));\n \n-  if (df_regs_ever_live_p (regno) && !call_used_regs[regno])\n+  if (df_regs_ever_live_p (regno) && !call_used_or_fixed_reg_p (regno))\n     return true;\n \n   /* 32-bit FP.  */"}, {"sha": "39bf87abf1cc67113050ef45a4762af50f7aa780", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -3442,7 +3442,7 @@ riscv_frame_set (rtx mem, rtx reg)\n static bool\n riscv_save_reg_p (unsigned int regno)\n {\n-  bool call_saved = !global_regs[regno] && !call_used_regs[regno];\n+  bool call_saved = !global_regs[regno] && !call_used_or_fixed_reg_p (regno);\n   bool might_clobber = crtl->saves_all_registers\n \t\t       || df_regs_ever_live_p (regno);\n \n@@ -3473,7 +3473,7 @@ riscv_save_reg_p (unsigned int regno)\n       /* We must save every register used in this function.  If this is not a\n \t leaf function, then we must save all temporary registers.  */\n       if (df_regs_ever_live_p (regno)\n-\t  || (!crtl->is_leaf && call_used_regs[regno]))\n+\t  || (!crtl->is_leaf && call_used_or_fixed_reg_p (regno)))\n \treturn true;\n     }\n \n@@ -4198,7 +4198,7 @@ riscv_epilogue_uses (unsigned int regno)\n       /* An interrupt function restores temp regs, so we must indicate that\n \t they are live at function end.  */\n       if (df_regs_ever_live_p (regno)\n-\t    || (!crtl->is_leaf && call_used_regs[regno]))\n+\t    || (!crtl->is_leaf && call_used_or_fixed_reg_p (regno)))\n \treturn true;\n     }\n \n@@ -4361,7 +4361,7 @@ riscv_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n       /* Only use callee-saved registers if a potential callee is guaranteed\n \t to spill the requisite width.  */\n       if (GET_MODE_UNIT_SIZE (mode) > UNITS_PER_FP_REG\n-\t  || (!call_used_regs[regno]\n+\t  || (!call_used_or_fixed_reg_p (regno)\n \t      && GET_MODE_UNIT_SIZE (mode) > UNITS_PER_FP_ARG))\n \treturn false;\n     }\n@@ -4370,7 +4370,8 @@ riscv_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n \n   /* Require same callee-savedness for all registers.  */\n   for (unsigned i = 1; i < nregs; i++)\n-    if (call_used_regs[regno] != call_used_regs[regno + i])\n+    if (call_used_or_fixed_reg_p (regno)\n+\t!= call_used_or_fixed_reg_p (regno + i))\n       return false;\n \n   return true;"}, {"sha": "f132b47d059ec3880047d05f6535cfce4c193796", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -723,7 +723,7 @@ need_to_save (unsigned int regno)\n \t any call_used registers, so we have to preserve them.\n          We do not have to worry about the frame pointer register\n \t though, as that is handled below.  */\n-      if (!crtl->is_leaf && call_used_regs[regno] && regno < 22)\n+      if (!crtl->is_leaf && call_used_or_fixed_reg_p (regno) && regno < 22)\n \treturn true;\n \n       /* Otherwise we only have to save a register, call_used\n@@ -739,7 +739,7 @@ need_to_save (unsigned int regno)\n   if (crtl->calls_eh_return)\n     return true;\n   if (df_regs_ever_live_p (regno)\n-      && !call_used_regs[regno])\n+      && !call_used_or_fixed_reg_p (regno))\n     return true;\n   return false;\n }"}, {"sha": "633a253e4397e4fe8651636a946960c56472c2a0", "filename": "gcc/config/rs6000/rs6000-logue.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Frs6000%2Frs6000-logue.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Frs6000%2Frs6000-logue.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-logue.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -117,7 +117,7 @@ save_reg_p (int reg)\n \treturn true;\n     }\n \n-  return !call_used_regs[reg] && df_regs_ever_live_p (reg);\n+  return !call_used_or_fixed_reg_p (reg) && df_regs_ever_live_p (reg);\n }\n \n /* Return the first fixed-point register that is required to be\n@@ -875,7 +875,7 @@ rs6000_stack_info (void)\n \n   using_static_chain_p = (cfun->static_chain_decl != NULL_TREE\n \t\t\t  && df_regs_ever_live_p (STATIC_CHAIN_REGNUM)\n-\t\t\t  && call_used_regs[STATIC_CHAIN_REGNUM]);\n+\t\t\t  && call_used_or_fixed_reg_p (STATIC_CHAIN_REGNUM));\n   info->savres_strategy = rs6000_savres_strategy (info, using_static_chain_p);\n \n   if (!(info->savres_strategy & SAVE_INLINE_GPRS)\n@@ -2082,7 +2082,7 @@ generate_set_vrsave (rtx reg, rs6000_stack_t *info, int epiloguep)\n   for (i = FIRST_ALTIVEC_REGNO; i <= LAST_ALTIVEC_REGNO; ++i)\n     if (info->vrsave_mask & ALTIVEC_REG_BIT (i))\n       {\n-\tif (!epiloguep || call_used_regs [i])\n+\tif (!epiloguep || call_used_or_fixed_reg_p (i))\n \t  clobs[nclobs++] = gen_hard_reg_clobber (V4SImode, i);\n \telse\n \t  {\n@@ -2971,9 +2971,10 @@ rs6000_emit_prologue (void)\n   rtx cr_save_rtx = NULL_RTX;\n   rtx_insn *insn;\n   int strategy;\n-  int using_static_chain_p = (cfun->static_chain_decl != NULL_TREE\n-\t\t\t      && df_regs_ever_live_p (STATIC_CHAIN_REGNUM)\n-\t\t\t      && call_used_regs[STATIC_CHAIN_REGNUM]);\n+  int using_static_chain_p\n+    = (cfun->static_chain_decl != NULL_TREE\n+       && df_regs_ever_live_p (STATIC_CHAIN_REGNUM)\n+       && call_used_or_fixed_reg_p (STATIC_CHAIN_REGNUM));\n   int using_split_stack = (flag_split_stack\n                            && (lookup_attribute (\"no_split_stack\",\n                                                  DECL_ATTRIBUTES (cfun->decl))\n@@ -3571,7 +3572,7 @@ rs6000_emit_prologue (void)\n       emit_insn (gen_prologue_movesi_from_cr (crsave));\n \n       for (i = 0; i < 8; i++)\n-\tif (!call_used_regs[CR0_REGNO + i])\n+\tif (!call_used_or_fixed_reg_p (CR0_REGNO + i))\n \t  {\n \t    rtvec p = rtvec_alloc (2);\n \t    RTVEC_ELT (p, 0)\n@@ -4704,7 +4705,7 @@ rs6000_emit_epilogue (enum epilogue_type epilogue_type)\n       int i, cr_off = info->ehcr_offset;\n \n       for (i = 0; i < 8; i++)\n-\tif (!call_used_regs[CR0_REGNO + i])\n+\tif (!call_used_or_fixed_reg_p (CR0_REGNO + i))\n \t  {\n \t    rtx reg = gen_rtx_REG (SImode, 0);\n \t    emit_insn (gen_frame_load (reg, frame_reg_rtx,"}, {"sha": "f657ff3a4c6b3cc95ee50b0ae8552f7187eb4559", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -1990,7 +1990,7 @@ rs6000_debug_reg_print (int first_regno, int last_regno, const char *reg_name)\n \t    comma = \", \";\n \t  }\n \n-      if (call_used_regs[r])\n+      if (call_used_or_fixed_reg_p (r))\n \t{\n \t  if (len > 70)\n \t    {"}, {"sha": "c7ce19c1fc0ac5eb0209d0849678b19e8242277f", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -1483,10 +1483,10 @@ rx_get_stack_layout (unsigned int * lowest,\n \t   /* Always save all call clobbered registers inside non-leaf\n \t      interrupt handlers, even if they are not live - they may\n \t      be used in (non-interrupt aware) routines called from this one.  */\n-\t   || (call_used_regs[reg]\n+\t   || (call_used_or_fixed_reg_p (reg)\n \t       && is_interrupt_func (NULL_TREE)\n \t       && ! crtl->is_leaf))\n-\t  && (! call_used_regs[reg]\n+\t  && (! call_used_or_fixed_reg_p (reg)\n \t      /* Even call clobbered registered must\n \t\t be pushed inside interrupt handlers.  */\n \t      || is_interrupt_func (NULL_TREE)"}, {"sha": "93e77d147e83635cb1484c8732becf85ec8e2d3a", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -13341,7 +13341,7 @@ s390_call_saved_register_used (tree call_expr)\n        if (REG_P (parm_rtx))\n \t {\n \t   for (reg = 0; reg < REG_NREGS (parm_rtx); reg++)\n-\t     if (!call_used_regs[reg + REGNO (parm_rtx)])\n+\t     if (!call_used_or_fixed_reg_p (reg + REGNO (parm_rtx)))\n \t       return true;\n \t }\n \n@@ -13356,7 +13356,7 @@ s390_call_saved_register_used (tree call_expr)\n \t       gcc_assert (REG_P (r));\n \n \t       for (reg = 0; reg < REG_NREGS (r); reg++)\n-\t\t if (!call_used_regs[reg + REGNO (r)])\n+\t\t if (!call_used_or_fixed_reg_p (reg + REGNO (r)))\n \t\t   return true;\n \t     }\n \t }"}, {"sha": "ef60b8c4090217a066d0b9d15f13c370143dbc60", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -7055,7 +7055,8 @@ calc_live_regs (HARD_REG_SET *live_regs_mask)\n \t     || (df_regs_ever_live_p (reg)\n \t\t && ((!call_really_used_regs[reg]\n \t\t      && !(reg != PIC_OFFSET_TABLE_REGNUM\n-\t\t\t   && fixed_regs[reg] && call_used_regs[reg]))\n+\t\t\t   && fixed_regs[reg]\n+\t\t\t   && call_used_or_fixed_reg_p (reg)))\n \t\t     || (trapa_handler && reg == FPSCR_REG && TARGET_FPU_ANY)))\n \t     || (crtl->calls_eh_return\n \t\t && (reg == EH_RETURN_DATA_REGNO (0)\n@@ -10815,16 +10816,16 @@ sh_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n      registers are used for argument passing, are callee-saved, or reserved.  */\n   /* We need to check call_used_regs / fixed_regs in case -fcall_saved-reg /\n      -ffixed-reg has been used.  */\n-  if (! call_used_regs[0] || fixed_regs[0])\n+  if (! call_used_or_fixed_reg_p (0) || fixed_regs[0])\n     error (\"r0 needs to be available as a call-clobbered register\");\n   scratch0 = scratch1 = scratch2 = gen_rtx_REG (Pmode, 0);\n \n     {\n-      if (call_used_regs[1] && ! fixed_regs[1])\n+      if (call_used_or_fixed_reg_p (1) && ! fixed_regs[1])\n \tscratch1 = gen_rtx_REG (ptr_mode, 1);\n       /* N.B., if not TARGET_HITACHI, register 2 is used to pass the pointer\n \t pointing where to return struct values.  */\n-      if (call_used_regs[3] && ! fixed_regs[3])\n+      if (call_used_or_fixed_reg_p (3) && ! fixed_regs[3])\n \tscratch2 = gen_rtx_REG (Pmode, 3);\n     }\n "}, {"sha": "43c6dd591fb2604bf5bef108db44fb34b799fa8b", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -5446,7 +5446,7 @@ static inline bool\n save_global_or_fp_reg_p (unsigned int regno,\n \t\t\t int leaf_function ATTRIBUTE_UNUSED)\n {\n-  return !call_used_regs[regno] && df_regs_ever_live_p (regno);\n+  return !call_used_or_fixed_reg_p (regno) && df_regs_ever_live_p (regno);\n }\n \n /* Return whether the return address register (%i7) is needed.  */\n@@ -5474,7 +5474,7 @@ static bool\n save_local_or_in_reg_p (unsigned int regno, int leaf_function)\n {\n   /* General case: call-saved registers live at some point.  */\n-  if (!call_used_regs[regno] && df_regs_ever_live_p (regno))\n+  if (!call_used_or_fixed_reg_p (regno) && df_regs_ever_live_p (regno))\n     return true;\n \n   /* Frame pointer register (%fp) if needed.  */"}, {"sha": "b2d41463cb51ec9dee8bcc2c90a3ebc612de0a3c", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -926,8 +926,8 @@ struct xstormy16_stack_layout\n \n /* Does REGNO need to be saved?  */\n #define REG_NEEDS_SAVE(REGNUM, IFUN)\t\t\t\t\t\\\n-  ((df_regs_ever_live_p (REGNUM) && ! call_used_regs[REGNUM])\t\t\\\n-   || (IFUN && ! fixed_regs[REGNUM] && call_used_regs[REGNUM]\t\t\\\n+  ((df_regs_ever_live_p (REGNUM) && !call_used_or_fixed_reg_p (REGNUM))\t\\\n+   || (IFUN && !fixed_regs[REGNUM] && call_used_or_fixed_reg_p (REGNUM)\t\\\n        && (REGNUM != CARRY_REGNUM)\t\t\t\t\t\\\n        && (df_regs_ever_live_p (REGNUM) || ! crtl->is_leaf)))\n \n@@ -1191,7 +1191,7 @@ xstormy16_expand_epilogue (void)\n int\n xstormy16_epilogue_uses (int regno)\n {\n-  if (reload_completed && call_used_regs[regno])\n+  if (reload_completed && call_used_or_fixed_reg_p (regno))\n     {\n       const int ifun = xstormy16_interrupt_function_p ();\n       return REG_NEEDS_SAVE (regno, ifun);"}, {"sha": "66a0ba51ff1093bc35984335c9d409edc612e68e", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -3660,7 +3660,7 @@ tilegx_builtin_decl (unsigned code, bool initialize_p ATTRIBUTE_UNUSED)\n static bool\n need_to_save_reg (unsigned int regno)\n {\n-  if (!fixed_regs[regno] && !call_used_regs[regno]\n+  if (!fixed_regs[regno] && !call_used_or_fixed_reg_p (regno)\n       && df_regs_ever_live_p (regno))\n     return true;\n "}, {"sha": "ff014280ee82dbdcb5f5a8e447c0243f175f31dc", "filename": "gcc/config/tilepro/tilepro.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -3202,7 +3202,7 @@ tilepro_builtin_decl (unsigned code, bool initialize_p ATTRIBUTE_UNUSED)\n static bool\n need_to_save_reg (unsigned int regno)\n {\n-  if (!fixed_regs[regno] && !call_used_regs[regno]\n+  if (!fixed_regs[regno] && !call_used_or_fixed_reg_p (regno)\n       && df_regs_ever_live_p (regno))\n     return true;\n "}, {"sha": "9a367ab7aa966122057f3f07374f64cd403c09d0", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -1461,7 +1461,7 @@ compute_register_save_size (long * p_reg_saved)\n     {\n       /* Find the first register that needs to be saved.  */\n       for (i = 0; i <= 31; i++)\n-\tif (df_regs_ever_live_p (i) && ((! call_used_regs[i])\n+\tif (df_regs_ever_live_p (i) && ((! call_used_or_fixed_reg_p (i))\n \t\t\t\t  || i == LINK_POINTER_REGNUM))\n \t  break;\n \n@@ -1502,7 +1502,7 @@ compute_register_save_size (long * p_reg_saved)\n       else\n \t{\n \t  for (; i <= 31; i++)\n-\t    if (df_regs_ever_live_p (i) && ((! call_used_regs[i])\n+\t    if (df_regs_ever_live_p (i) && ((! call_used_or_fixed_reg_p (i))\n \t\t\t\t      || i == LINK_POINTER_REGNUM))\n \t      {\n \t\tsize += 4;"}, {"sha": "7a8c86dce6d6124fe721d009cfbac2cba0e21c51", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -166,7 +166,7 @@ vax_expand_prologue (void)\n   rtx insn;\n \n   for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n-    if (df_regs_ever_live_p (regno) && !call_used_regs[regno])\n+    if (df_regs_ever_live_p (regno) && !call_used_or_fixed_reg_p (regno))\n       mask |= 1 << regno;\n \n   insn = emit_insn (gen_procedure_entry_mask (GEN_INT (mask)));"}, {"sha": "367e1e58aaeda736437a1b6168c9ed45fd297457", "filename": "gcc/config/visium/visium.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fvisium%2Fvisium.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fvisium%2Fvisium.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -3589,7 +3589,7 @@ visium_save_reg_p (int interrupt, int regno)\n \t  if (df_regs_ever_live_p (regno))\n \t    return 1;\n \t}\n-      else if (call_used_regs[regno])\n+      else if (call_used_or_fixed_reg_p (regno))\n \treturn 1;\n \n       /* To save mdb requires two temporary registers.  To save mdc or\n@@ -3616,7 +3616,7 @@ visium_save_reg_p (int interrupt, int regno)\n \t}\n     }\n \n-  return df_regs_ever_live_p (regno) && !call_used_regs[regno];\n+  return df_regs_ever_live_p (regno) && !call_used_or_fixed_reg_p (regno);\n }\n \n /* Compute the frame size required by the function.  This function is called"}, {"sha": "822c21597837e8838b3b50ac9bdca7637d3164ae", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -2686,7 +2686,7 @@ xtensa_call_save_reg(int regno)\n   if (crtl->calls_eh_return && regno >= 2 && regno < 4)\n     return true;\n \n-  return !fixed_regs[regno] && !call_used_regs[regno] &&\n+  return !fixed_regs[regno] && !call_used_or_fixed_reg_p (regno) &&\n     df_regs_ever_live_p (regno);\n }\n "}, {"sha": "109cc27959cba8315bc0d9f8ccc36d5ead0d969b", "filename": "gcc/cselib.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -2766,7 +2766,7 @@ cselib_process_insn (rtx_insn *insn)\n   if (CALL_P (insn))\n     {\n       for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-\tif (call_used_regs[i]\n+\tif (call_used_or_fixed_reg_p (i)\n \t    || (REG_VALUES (i) && REG_VALUES (i)->elt\n \t\t&& (targetm.hard_regno_call_part_clobbered\n \t\t    (insn, i, GET_MODE (REG_VALUES (i)->elt->val_rtx)))))"}, {"sha": "9b08bdca0f68c4806f26c49a8d4aeebc0a3da468", "filename": "gcc/df-scan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -3500,7 +3500,7 @@ df_get_entry_block_def_set (bitmap entry_block_defs)\n       /* Defs for the callee saved registers are inserted so that the\n \t pushes have some defining location.  */\n       for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-\tif ((call_used_regs[i] == 0) && (df_regs_ever_live_p (i)))\n+\tif ((call_used_or_fixed_reg_p (i) == 0) && (df_regs_ever_live_p (i)))\n \t  bitmap_set_bit (entry_block_defs, i);\n     }\n "}, {"sha": "e60b6fa46a96d2c2d74cf7db84823286297b69d1", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -2122,7 +2122,7 @@ aggregate_value_p (const_tree exp, const_tree fntype)\n   regno = REGNO (reg);\n   nregs = hard_regno_nregs (regno, TYPE_MODE (type));\n   for (i = 0; i < nregs; i++)\n-    if (! call_used_regs[regno + i])\n+    if (! call_used_or_fixed_reg_p (regno + i))\n       return 1;\n \n   return 0;"}, {"sha": "dba3acf3096f5c67bce74f6a4eec3b7a2438aec3", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -7207,7 +7207,7 @@ alloc_global_sched_pressure_data (void)\n \t  fixed_regs_num[cl] = 0;\n \n \t  for (int i = 0; i < ira_class_hard_regs_num[cl]; ++i)\n-\t    if (!call_used_regs[ira_class_hard_regs[cl][i]])\n+\t    if (!call_used_or_fixed_reg_p (ira_class_hard_regs[cl][i]))\n \t      ++call_saved_regs_num[cl];\n \t    else if (fixed_regs[ira_class_hard_regs[cl][i]])\n \t      ++fixed_regs_num[cl];"}, {"sha": "8fd787a516c1b1872e9768355b0253300b227780", "filename": "gcc/hard-reg-set.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fhard-reg-set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fhard-reg-set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhard-reg-set.h?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -511,4 +511,13 @@ extern const char * reg_class_names[];\n #define REG_CAN_CHANGE_MODE_P(REGN, FROM, TO)                          \\\n   (targetm.can_change_mode_class (FROM, TO, REGNO_REG_CLASS (REGN)))\n \n+/* Return true if register REGNO is either fixed or call-used\n+   (aka call-clobbered).  */\n+\n+inline bool\n+call_used_or_fixed_reg_p (unsigned int regno)\n+{\n+  return fixed_regs[regno] || call_used_regs[regno];\n+}\n+\n #endif /* ! GCC_HARD_REG_SET_H */"}, {"sha": "166bd7b9b0c26dd33976f01eaaba4d8b1dfa6d89", "filename": "gcc/ira-lives.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fira-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fira-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-lives.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -1380,7 +1380,7 @@ process_bb_node_lives (ira_loop_tree_node_t loop_tree_node)\n \t  if (!cfun->has_nonlocal_label\n \t      && has_abnormal_call_or_eh_pred_edge_p (bb))\n \t    for (px = 0; px < FIRST_PSEUDO_REGISTER; px++)\n-\t      if (call_used_regs[px]\n+\t      if (call_used_or_fixed_reg_p (px)\n #ifdef REAL_PIC_OFFSET_TABLE_REGNUM\n \t\t  /* We should create a conflict of PIC pseudo with\n \t\t     PIC hard reg as PIC hard reg can have a wrong"}, {"sha": "a4321d3b5af576cad45da426caf30e4c08c7a0f8", "filename": "gcc/ira.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -5589,7 +5589,9 @@ do_reload (void)\n       poly_int64 size = get_frame_size () + STACK_CHECK_FIXED_FRAME_SIZE;\n \n       for (int i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-\tif (df_regs_ever_live_p (i) && !fixed_regs[i] && call_used_regs[i])\n+\tif (df_regs_ever_live_p (i)\n+\t    && !fixed_regs[i]\n+\t    && call_used_or_fixed_reg_p (i))\n \t  size += UNITS_PER_WORD;\n \n       if (constant_lower_bound (size) > STACK_CHECK_MAX_FRAME_SIZE)"}, {"sha": "6f081598cb4bb6ddf40e06b2815760299cc58850", "filename": "gcc/lra-lives.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Flra-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Flra-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-lives.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -1106,7 +1106,7 @@ process_bb_lives (basic_block bb, int &curr_point, bool dead_insn_p)\n       if (!cfun->has_nonlocal_label\n \t  && has_abnormal_call_or_eh_pred_edge_p (bb))\n \tfor (px = 0; HARD_REGISTER_NUM_P (px); px++)\n-\t  if (call_used_regs[px]\n+\t  if (call_used_or_fixed_reg_p (px)\n #ifdef REAL_PIC_OFFSET_TABLE_REGNUM\n \t      /* We should create a conflict of PIC pseudo with PIC\n \t\t hard reg as PIC hard reg can have a wrong value after"}, {"sha": "ea6e817b6e6dde28a7204bf0468fc9e3db7800e9", "filename": "gcc/lra-remat.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Flra-remat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Flra-remat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-remat.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -1309,7 +1309,7 @@ lra_remat (void)\n   all_cands.create (8000);\n   call_used_regs_arr_len = 0;\n   for (int i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-    if (call_used_regs[i])\n+    if (call_used_or_fixed_reg_p (i))\n       call_used_regs_arr[call_used_regs_arr_len++] = i;\n   initiate_cand_table ();\n   create_remat_bb_data ();"}, {"sha": "65c0877b927e5bbb4551dbc4bf6e88d77fd99ba5", "filename": "gcc/lra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -2420,7 +2420,7 @@ lra (FILE *f)\n \n   if (crtl->saves_all_registers)\n     for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-      if (! call_used_regs[i] && ! fixed_regs[i] && ! LOCAL_REGNO (i))\n+      if (!call_used_or_fixed_reg_p (i) && !fixed_regs[i] && !LOCAL_REGNO (i))\n \tdf_set_regs_ever_live (i, true);\n \n   /* We don't DF from now and avoid its using because it is to"}, {"sha": "73b0afab3a1cdecd45d7f19cd8f65d76371f3ef8", "filename": "gcc/postreload.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -1135,7 +1135,7 @@ reload_combine_recognize_pattern (rtx_insn *insn)\n \t      if (TEST_HARD_REG_BIT (reg_class_contents[INDEX_REG_CLASS], i)\n \t\t  && reg_state[i].use_index == RELOAD_COMBINE_MAX_USES\n \t\t  && reg_state[i].store_ruid <= reg_state[regno].use_ruid\n-\t\t  && (call_used_regs[i] || df_regs_ever_live_p (i))\n+\t\t  && (call_used_or_fixed_reg_p (i) || df_regs_ever_live_p (i))\n \t\t  && (!frame_pointer_needed || i != HARD_FRAME_POINTER_REGNUM)\n \t\t  && !fixed_regs[i] && !global_regs[i]\n \t\t  && hard_regno_nregs (i, GET_MODE (reg)) == 1\n@@ -2126,7 +2126,7 @@ reload_cse_move2add (rtx_insn *first)\n \t{\n \t  for (i = FIRST_PSEUDO_REGISTER - 1; i >= 0; i--)\n \t    {\n-\t      if (call_used_regs[i])\n+\t      if (call_used_or_fixed_reg_p (i))\n \t\t/* Reset the information about this register.  */\n \t\treg_mode[i] = VOIDmode;\n \t    }"}, {"sha": "f3e8a4c998b0cc85eb3ef0b0cdb3582254a2dd3c", "filename": "gcc/recog.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -3227,7 +3227,8 @@ peep2_find_free_register (int from, int to, const char *class_str,\n \t      break;\n \t    }\n \t  /* And that we don't create an extra save/restore.  */\n-\t  if (! call_used_regs[regno + j] && ! df_regs_ever_live_p (regno + j))\n+\t  if (! call_used_or_fixed_reg_p (regno + j)\n+\t      && ! df_regs_ever_live_p (regno + j))\n \t    {\n \t      success = 0;\n \t      break;"}, {"sha": "14ce95470b2fa698cb6227bc3932b3bc87430dbe", "filename": "gcc/regrename.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -322,7 +322,7 @@ check_new_reg_p (int reg ATTRIBUTE_UNUSED, int new_reg,\n \t|| global_regs[new_reg + i]\n \t/* Can't use regs which aren't saved by the prologue.  */\n \t|| (! df_regs_ever_live_p (new_reg + i)\n-\t    && ! call_used_regs[new_reg + i])\n+\t    && ! call_used_or_fixed_reg_p (new_reg + i))\n #ifdef LEAF_REGISTERS\n \t/* We can't use a non-leaf register if we're in a\n \t   leaf function.  */"}, {"sha": "7731e0fcf57e94dcef785581b568d17c5c104ae9", "filename": "gcc/reload.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -6911,14 +6911,14 @@ find_equiv_reg (rtx goal, rtx_insn *insn, enum reg_class rclass, int other,\n \n \t  if (regno >= 0 && regno < FIRST_PSEUDO_REGISTER)\n \t    for (i = 0; i < nregs; ++i)\n-\t      if (call_used_regs[regno + i]\n+\t      if (call_used_or_fixed_reg_p (regno + i)\n \t\t  || targetm.hard_regno_call_part_clobbered (NULL, regno + i,\n \t\t\t\t\t\t\t     mode))\n \t\treturn 0;\n \n \t  if (valueno >= 0 && valueno < FIRST_PSEUDO_REGISTER)\n \t    for (i = 0; i < valuenregs; ++i)\n-\t      if (call_used_regs[valueno + i]\n+\t      if (call_used_or_fixed_reg_p (valueno + i)\n \t\t  || targetm.hard_regno_call_part_clobbered (NULL, valueno + i,\n \t\t\t\t\t\t\t     mode))\n \t\treturn 0;"}, {"sha": "c619c5411742fba148d3c5a5b366c17adcb7214c", "filename": "gcc/reload1.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -795,7 +795,9 @@ reload (rtx_insn *first, int global)\n \n   if (crtl->saves_all_registers)\n     for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-      if (! call_used_regs[i] && ! fixed_regs[i] && ! LOCAL_REGNO (i))\n+      if (! call_used_or_fixed_reg_p (i)\n+\t  && ! fixed_regs[i]\n+\t  && ! LOCAL_REGNO (i))\n \tdf_set_regs_ever_live (i, true);\n \n   /* Find all the pseudo registers that didn't get hard regs\n@@ -1906,8 +1908,8 @@ find_reg (class insn_chain *chain, int order)\n \t\t  && (inv_reg_alloc_order[regno]\n \t\t      < inv_reg_alloc_order[best_reg])\n #else\n-\t\t  && call_used_regs[regno]\n-\t\t  && ! call_used_regs[best_reg]\n+\t\t  && call_used_or_fixed_reg_p (regno)\n+\t\t  && ! call_used_or_fixed_reg_p (best_reg)\n #endif\n \t\t  ))\n \t    {"}, {"sha": "077845e156a0a0afa013e9f91caf509105cb2e94", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a365fa0636886aeda83e57b84d837cfba13597fe/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=a365fa0636886aeda83e57b84d837cfba13597fe", "patch": "@@ -1123,7 +1123,7 @@ init_hard_regs_data (void)\n \n   CLEAR_HARD_REG_SET (sel_hrd.regs_ever_used);\n   for (cur_reg = 0; cur_reg < FIRST_PSEUDO_REGISTER; cur_reg++)\n-    if (df_regs_ever_live_p (cur_reg) || call_used_regs[cur_reg])\n+    if (df_regs_ever_live_p (cur_reg) || call_used_or_fixed_reg_p (cur_reg))\n       SET_HARD_REG_BIT (sel_hrd.regs_ever_used, cur_reg);\n \n   /* Initialize registers that are valid based on mode when this is"}]}