{"sha": "48b2e0a72e5e297ad921662683c1f5d61d0e95b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhiMmUwYTcyZTVlMjk3YWQ5MjE2NjI2ODNjMWY1ZDYxZDBlOTViMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-07-07T19:17:05Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-07-07T19:17:05Z"}, "message": "re PR target/16407 (Unaligned access to local variables)\n\n\tPR target/16407\n\t* config/mips/mips-protos.h (mips_declare_common_object): Declare.\n\t* config/mips/mips.c (mips_declare_common_object): New function,\n\tmostly split out from...\n\t(mips_output_aligned_decl_common): ...here.\n\t* config/mips/mips.h (ASM_OUTPUT_LOCAL): Remove in favor of...\n\t(ASM_OUTPUT_ALIGNED_LOCAL): ...this new definition.\n\t* config/mips/iris6.h (ASM_OUTPUT_ALIGNED_LOCAL): Undefine this\n\trather than ASM_OUTPUT_LOCAL.  Call mips_declare_common_object.\n\nFrom-SVN: r84219", "tree": {"sha": "cde4f0026ad12e34f4ad315b43bf7ad37c6352f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cde4f0026ad12e34f4ad315b43bf7ad37c6352f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48b2e0a72e5e297ad921662683c1f5d61d0e95b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48b2e0a72e5e297ad921662683c1f5d61d0e95b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48b2e0a72e5e297ad921662683c1f5d61d0e95b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48b2e0a72e5e297ad921662683c1f5d61d0e95b1/comments", "author": null, "committer": null, "parents": [{"sha": "477eff96027c33292018e0c73131bfa4556a1602", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/477eff96027c33292018e0c73131bfa4556a1602", "html_url": "https://github.com/Rust-GCC/gccrs/commit/477eff96027c33292018e0c73131bfa4556a1602"}], "stats": {"total": 68, "additions": 58, "deletions": 10}, "files": [{"sha": "63501dbb810410809c516f299f3a9c30ad35b50a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b2e0a72e5e297ad921662683c1f5d61d0e95b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b2e0a72e5e297ad921662683c1f5d61d0e95b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48b2e0a72e5e297ad921662683c1f5d61d0e95b1", "patch": "@@ -1,3 +1,15 @@\n+2004-07-07  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\tPR target/16407\n+\t* config/mips/mips-protos.h (mips_declare_common_object): Declare.\n+\t* config/mips/mips.c (mips_declare_common_object): New function,\n+\tmostly split out from...\n+\t(mips_output_aligned_decl_common): ...here.\n+\t* config/mips/mips.h (ASM_OUTPUT_LOCAL): Remove in favor of...\n+\t(ASM_OUTPUT_ALIGNED_LOCAL): ...this new definition.\n+\t* config/mips/iris6.h (ASM_OUTPUT_ALIGNED_LOCAL): Undefine this\n+\trather than ASM_OUTPUT_LOCAL.  Call mips_declare_common_object.\n+\n 2004-07-07  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR c/16392"}, {"sha": "9730a6c0bcf25ba8fad0005c2317f7d6ea2619fc", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b2e0a72e5e297ad921662683c1f5d61d0e95b1/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b2e0a72e5e297ad921662683c1f5d61d0e95b1/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=48b2e0a72e5e297ad921662683c1f5d61d0e95b1", "patch": "@@ -357,7 +357,7 @@ do\t\t\t\t\t\t\t\t\\\n while (0)\n \n /* ??? SGI assembler gives warning whenever .lcomm is used.  */\n-#undef ASM_OUTPUT_LOCAL\n+#undef ASM_OUTPUT_ALIGNED_LOCAL\n #define ASM_OUTPUT_ALIGNED_LOCAL(STREAM, NAME, SIZE, ALIGN)\t\t   \\\n do\t\t\t\t\t\t\t\t\t   \\\n   {\t\t\t\t\t\t\t\t\t   \\\n@@ -369,7 +369,8 @@ do\t\t\t\t\t\t\t\t\t   \\\n \tASM_OUTPUT_SKIP (STREAM, SIZE);\t\t\t\t\t   \\\n       }\t\t\t\t\t\t\t\t\t   \\\n     else\t\t\t\t\t\t\t\t   \\\n-      mips_declare_object (STREAM, NAME, \"\\n\\t.lcomm\\t\", \",%u\\n\", (int)(SIZE)); \\\n+      mips_declare_common_object (STREAM, NAME, \"\\n\\t.lcomm\\t\",\t\t   \\\n+\t\t\t\t  SIZE, ALIGN, false);\t\t\t   \\\n   }\t\t\t\t\t\t\t\t\t   \\\n while (0)\n "}, {"sha": "f1c42ab909dcd3a14c038383a53a31136eb8cbd1", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b2e0a72e5e297ad921662683c1f5d61d0e95b1/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b2e0a72e5e297ad921662683c1f5d61d0e95b1/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=48b2e0a72e5e297ad921662683c1f5d61d0e95b1", "patch": "@@ -166,6 +166,9 @@ extern void mips_output_aligned_bss (FILE *, tree, const char *,\n extern void mips_output_aligned_decl_common (FILE *, tree, const char *,\n \t\t\t\t\t     unsigned HOST_WIDE_INT,\n \t\t\t\t\t     unsigned int);\n+extern void mips_declare_common_object (FILE *, const char *,\n+\t\t\t\t\tconst char *, unsigned HOST_WIDE_INT,\n+\t\t\t\t\tunsigned int, bool);\n extern void mips_declare_object (FILE *, const char *, const char *,\n \t\t\t\t const char *, ...);\n extern void mips_declare_object_name (FILE *, const char *, tree);"}, {"sha": "8e0266a61b63a5a455bcb2edcf6bdf6206531b21", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b2e0a72e5e297ad921662683c1f5d61d0e95b1/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b2e0a72e5e297ad921662683c1f5d61d0e95b1/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=48b2e0a72e5e297ad921662683c1f5d61d0e95b1", "patch": "@@ -5987,17 +5987,32 @@ mips_output_aligned_decl_common (FILE *stream, tree decl, const char *name,\n \t\t\t   \":\\n\\t.space\\t\" HOST_WIDE_INT_PRINT_UNSIGNED \"\\n\",\n \t\t\t   size);\n     }\n-  else if (TARGET_SGI_O32_AS)\n+  else\n+    /* The SGI o32 assembler doesn't accept an alignment.  */\n+    mips_declare_common_object (stream, name, \"\\n\\t.comm\\t\",\n+\t\t\t\tsize, align, !TARGET_SGI_O32_AS);\n+}\n+\n+/* Declare a common object of SIZE bytes using asm directive INIT_STRING.\n+   NAME is the name of the object and ALIGN is the required alignment\n+   in bytes.  TAKES_ALIGNMENT_P is true if the directive takes a third\n+   alignment argument.  */\n+\n+void\n+mips_declare_common_object (FILE *stream, const char *name,\n+\t\t\t    const char *init_string,\n+\t\t\t    unsigned HOST_WIDE_INT size,\n+\t\t\t    unsigned int align, bool takes_alignment_p)\n+{\n+  if (!takes_alignment_p)\n     {\n-      /* The SGI o32 assembler doesn't accept an alignment, so round up\n-\t the size instead.  */\n       size += (align / BITS_PER_UNIT) - 1;\n       size -= size % (align / BITS_PER_UNIT);\n-      mips_declare_object (stream, name, \"\\n\\t.comm\\t\",\n+      mips_declare_object (stream, name, init_string,\n \t\t\t   \",\" HOST_WIDE_INT_PRINT_UNSIGNED \"\\n\", size);\n     }\n   else\n-    mips_declare_object (stream, name, \"\\n\\t.comm\\t\",\n+    mips_declare_object (stream, name, init_string,\n \t\t\t \",\" HOST_WIDE_INT_PRINT_UNSIGNED \",%u\\n\",\n \t\t\t size, align / BITS_PER_UNIT);\n }"}, {"sha": "00ddbba1b65693fbcd2f85de6aa9bdfdb1669377", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b2e0a72e5e297ad921662683c1f5d61d0e95b1/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b2e0a72e5e297ad921662683c1f5d61d0e95b1/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=48b2e0a72e5e297ad921662683c1f5d61d0e95b1", "patch": "@@ -3189,9 +3189,10 @@ while (0)\n /* This says how to define a local common symbol (ie, not visible to\n    linker).  */\n \n-#define ASM_OUTPUT_LOCAL(STREAM, NAME, SIZE, ROUNDED)\t\t\t\\\n-  mips_declare_object (STREAM, NAME, \"\\n\\t.lcomm\\t\", \",%u\\n\", (int)(SIZE))\n-\n+#ifndef ASM_OUTPUT_ALIGNED_LOCAL\n+#define ASM_OUTPUT_ALIGNED_LOCAL(STREAM, NAME, SIZE, ALIGN) \\\n+  mips_declare_common_object (STREAM, NAME, \"\\n\\t.lcomm\\t\", SIZE, ALIGN, false)\n+#endif\n \n /* This says how to output an external.  It would be possible not to\n    output anything and let undefined symbol become external. However"}, {"sha": "7f91c446592ad7dfa84984b88bf99fa1a712da58", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b2e0a72e5e297ad921662683c1f5d61d0e95b1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b2e0a72e5e297ad921662683c1f5d61d0e95b1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=48b2e0a72e5e297ad921662683c1f5d61d0e95b1", "patch": "@@ -1,3 +1,7 @@\n+2004-07-07  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* gcc.c-torture/execute/20040707-1.c: New test.\n+\n 2004-07-06  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* gcc.c-torture/execute/20040706-1.c: New test."}, {"sha": "6fc15cc24a7c4dae0b6b8d44fd5780654043ea32", "filename": "gcc/testsuite/gcc.c-torture/execute/20040707-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b2e0a72e5e297ad921662683c1f5d61d0e95b1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040707-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b2e0a72e5e297ad921662683c1f5d61d0e95b1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040707-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040707-1.c?ref=48b2e0a72e5e297ad921662683c1f5d61d0e95b1", "patch": "@@ -0,0 +1,12 @@\n+struct s { char c1, c2; };\n+void foo (struct s s)\n+{\n+  static struct s s1;\n+  s1 = s;\n+}\n+int main ()\n+{\n+  static struct s s2;\n+  foo (s2);\n+  exit (0);\n+}"}]}