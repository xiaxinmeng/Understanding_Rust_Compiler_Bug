{"sha": "5bf0ebab2da34345b9119e13ea58e5673426fd7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJmMGViYWIyZGEzNDM0NWI5MTE5ZTEzZWE1OGU1NjczNDI2ZmQ3ZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-05-23T08:17:14Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-23T08:17:14Z"}, "message": "i386.c, i386.h: Tidy comments and whitespace.\n\n        * config/i386/i386.c, config/i386/i386.h: Tidy comments and whitespace.\n        (ix86_arch): Set type to enum processor_type.\n\nFrom-SVN: r53779", "tree": {"sha": "edc5c8ad5b3c0cb4f6abc129a579a90b408adca7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edc5c8ad5b3c0cb4f6abc129a579a90b408adca7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bf0ebab2da34345b9119e13ea58e5673426fd7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bf0ebab2da34345b9119e13ea58e5673426fd7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bf0ebab2da34345b9119e13ea58e5673426fd7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bf0ebab2da34345b9119e13ea58e5673426fd7d/comments", "author": null, "committer": null, "parents": [{"sha": "57d4744644609fe8a1cd4ca99302e4ed7e87d9e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57d4744644609fe8a1cd4ca99302e4ed7e87d9e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57d4744644609fe8a1cd4ca99302e4ed7e87d9e8"}], "stats": {"total": 185, "additions": 99, "deletions": 86}, "files": [{"sha": "6aec8673e847d5cfb836c69de41957c689b5a31d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf0ebab2da34345b9119e13ea58e5673426fd7d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf0ebab2da34345b9119e13ea58e5673426fd7d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5bf0ebab2da34345b9119e13ea58e5673426fd7d", "patch": "@@ -1,3 +1,11 @@\n+2002-05-23  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.c, config/i386/i386.h: Tidy comments and whitespace.\n+\t(ix86_arch): Set type to enum processor_type.\n+\n+\t* config/i386/i386.md (movsi_1, movdi_1_rex64): Use \n+\tLEGITIMATE_PIC_OPERAND_P not SYMBOLIC_CONST.\n+\n 2002-05-23  Jakub Jelinek  <jakub@redhat.com>\n \n \t* configure.in: Fix as version test for binutils 2.12.1 releases"}, {"sha": "c4752e6c1df630669271018965de51cda6e2f03e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf0ebab2da34345b9119e13ea58e5673426fd7d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf0ebab2da34345b9119e13ea58e5673426fd7d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5bf0ebab2da34345b9119e13ea58e5673426fd7d", "patch": "@@ -399,15 +399,17 @@ const int x86_arch_always_fancy_math_387 = m_PENT|m_PPRO|m_ATHLON|m_PENT4;\n    lower than this constant, emit fast (but longer) prologue and\n    epilogue code.  */\n #define FAST_PROLOGUE_INSN_COUNT 30\n+\n /* Set by prologue expander and used by epilogue expander to determine\n    the style used.  */\n static int use_fast_prologue_epilogue;\n \n #define AT_BP(MODE) (gen_rtx_MEM ((MODE), hard_frame_pointer_rtx))\n \n-static const char *const hi_reg_name[] = HI_REGISTER_NAMES; /* names for 16 bit regs */\n-static const char *const qi_reg_name[] = QI_REGISTER_NAMES; /* names for 8 bit regs (low) */\n-static const char *const qi_high_reg_name[] = QI_HIGH_REGISTER_NAMES; /* names for 8 bit regs (high) */\n+/* Names for 8 (low), 8 (high), and 16-bit registers, respectively.  */\n+static const char *const qi_reg_name[] = QI_REGISTER_NAMES;\n+static const char *const qi_high_reg_name[] = QI_HIGH_REGISTER_NAMES;\n+static const char *const hi_reg_name[] = HI_REGISTER_NAMES;\n \n /* Array of the smallest class containing reg number REGNO, indexed by\n    REGNO.  Used by REGNO_REG_CLASS in i386.h.  */\n@@ -448,11 +450,16 @@ int const dbx_register_map[FIRST_PSEUDO_REGISTER] =\n   -1, -1, -1, -1, -1, -1, -1, -1,\t/* extended SSE registers */\n };\n \n-static int const x86_64_int_parameter_registers[6] = {5 /*RDI*/, 4 /*RSI*/,\n-\t\t\t\t\t        1 /*RDX*/, 2 /*RCX*/,\n-\t\t\t\t\t        FIRST_REX_INT_REG /*R8 */,\n-\t\t\t\t\t        FIRST_REX_INT_REG + 1 /*R9 */};\n-static int const x86_64_int_return_registers[4] = {0 /*RAX*/, 1 /*RDI*/, 5, 4};\n+static int const x86_64_int_parameter_registers[6] =\n+{\n+  5 /*RDI*/, 4 /*RSI*/, 1 /*RDX*/, 2 /*RCX*/,\n+  FIRST_REX_INT_REG /*R8 */, FIRST_REX_INT_REG + 1 /*R9 */\n+};\n+\n+static int const x86_64_int_return_registers[4] =\n+{\n+  0 /*RAX*/, 1 /*RDI*/, 5 /*RDI*/, 4 /*RSI*/\n+};\n \n /* The \"default\" register map used in 64bit mode.  */\n int const dbx64_register_map[FIRST_PSEUDO_REGISTER] =\n@@ -598,14 +605,13 @@ enum cmodel ix86_cmodel;\n const char *ix86_asm_string;\n enum asm_dialect ix86_asm_dialect = ASM_ATT;\n \n-/* which cpu are we scheduling for */\n-enum processor_type ix86_cpu;\n-\n-/* which unit we are generating floating point math for */\n+/* Which unit we are generating floating point math for.  */\n enum fpmath_unit ix86_fpmath;\n \n-/* which instruction set architecture to use.  */\n-int ix86_arch;\n+/* Which cpu are we scheduling for.  */\n+enum processor_type ix86_cpu;\n+/* Which instruction set architecture to use.  */\n+enum processor_type ix86_arch;\n \n /* Strings to hold which cpu and instruction set architecture  to use.  */\n const char *ix86_cpu_string;\t\t/* for -mcpu=<xxx> */\n@@ -4941,7 +4947,7 @@ legitimate_address_p (mode, addr, strict)\n     fprintf (stderr, \"Success.\\n\");\n   return TRUE;\n \n-report_error:\n+ report_error:\n   if (TARGET_DEBUG_ADDR)\n     {\n       fprintf (stderr, \"Error: %s\\n\", reason);\n@@ -4955,10 +4961,10 @@ legitimate_address_p (mode, addr, strict)\n static HOST_WIDE_INT\n ix86_GOT_alias_set ()\n {\n-    static HOST_WIDE_INT set = -1;\n-    if (set == -1)\n-      set = new_alias_set ();\n-    return set;\n+  static HOST_WIDE_INT set = -1;\n+  if (set == -1)\n+    set = new_alias_set ();\n+  return set;\n }\n \n /* Return a legitimate reference for ORIG (an address) using the\n@@ -5409,7 +5415,7 @@ output_pic_addr_const (file, x, code)\n \n      case UNSPEC:\n        if (XVECLEN (x, 0) != 1)\n-\tabort ();\n+\t abort ();\n        output_pic_addr_const (file, XVECEXP (x, 0, 0), code);\n        switch (XINT (x, 1))\n \t{\n@@ -5637,7 +5643,7 @@ print_reg (x, code, file)\n       || REGNO (x) == FPSR_REG)\n     abort ();\n \n-  if (ASSEMBLER_DIALECT == ASM_ATT  || USER_LABEL_PREFIX[0] == 0)\n+  if (ASSEMBLER_DIALECT == ASM_ATT || USER_LABEL_PREFIX[0] == 0)\n     putc ('%', file);\n \n   if (code == 'w' || MMX_REG_P (x))\n@@ -6041,7 +6047,7 @@ print_operand (file, x, code)\n       if (flag_pic && CONSTANT_ADDRESS_P (x))\n \toutput_pic_addr_const (file, x, code);\n       /* Avoid (%rip) for call operands.  */\n-      else if (CONSTANT_ADDRESS_P (x) && code =='P'\n+      else if (CONSTANT_ADDRESS_P (x) && code == 'P'\n \t       && GET_CODE (x) != CONST_INT)\n \toutput_addr_const (file, x);\n       else if (this_is_asm_operands && ! address_operand (x, VOIDmode))\n@@ -10048,8 +10054,8 @@ memory_address_length (addr)\n   return len;\n }\n \n-/* Compute default value for \"length_immediate\" attribute.  When SHORTFORM is set\n-   expect that insn have 8bit immediate alternative.  */\n+/* Compute default value for \"length_immediate\" attribute.  When SHORTFORM\n+   is set, expect that insn have 8bit immediate alternative.  */\n int\n ix86_attr_length_immediate_default (insn, shortform)\n      rtx insn;"}, {"sha": "aac6efab9d4bc15c99cd5e10ff473d1021c2f11a", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 61, "deletions": 62, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf0ebab2da34345b9119e13ea58e5673426fd7d/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf0ebab2da34345b9119e13ea58e5673426fd7d/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=5bf0ebab2da34345b9119e13ea58e5673426fd7d", "patch": "@@ -389,31 +389,6 @@ extern int x86_prefetch_sse;\n #define TARGET_DEFAULT TARGET_SUBTARGET_DEFAULT\n #endif\n \n-/* Which processor to schedule for. The cpu attribute defines a list that\n-   mirrors this list, so changes to i386.md must be made at the same time.  */\n-\n-enum processor_type\n-{\n-  PROCESSOR_I386,\t\t\t/* 80386 */\n-  PROCESSOR_I486,\t\t\t/* 80486DX, 80486SX, 80486DX[24] */\n-  PROCESSOR_PENTIUM,\n-  PROCESSOR_PENTIUMPRO,\n-  PROCESSOR_K6,\n-  PROCESSOR_ATHLON,\n-  PROCESSOR_PENTIUM4,\n-  PROCESSOR_max\n-};\n-enum fpmath_unit\n-{\n-  FPMATH_387 = 1,\n-  FPMATH_SSE = 2\n-};\n-\n-extern enum processor_type ix86_cpu;\n-extern enum fpmath_unit ix86_fpmath;\n-\n-extern int ix86_arch;\n-\n /* This macro is similar to `TARGET_SWITCHES' but defines names of\n    command options that have values.  Its definition is an\n    initializer with a subgrouping for each command option.\n@@ -3228,57 +3203,81 @@ extern int const svr4_dbx_register_map[FIRST_PSEUDO_REGISTER];\n #define SPECIAL_MODE_PREDICATES \\\n   \"ext_register_operand\",\n \f\n-/* CM_32 is used by 32bit ABI\n-   CM_SMALL is small model assuming that all code and data fits in the first\n-   31bits of address space.\n-   CM_KERNEL is model assuming that all code and data fits in the negative\n-   31bits of address space.\n-   CM_MEDIUM is model assuming that code fits in the first 31bits of address\n-   space.  Size of data is unlimited.\n-   CM_LARGE is model making no assumptions about size of particular sections.\n-  \n-   CM_SMALL_PIC is model for PIC libraries assuming that code+data+got/plt\n-   tables first in 31bits of address space.\n- */\n+/* Which processor to schedule for. The cpu attribute defines a list that\n+   mirrors this list, so changes to i386.md must be made at the same time.  */\n+\n+enum processor_type\n+{\n+  PROCESSOR_I386,\t\t\t/* 80386 */\n+  PROCESSOR_I486,\t\t\t/* 80486DX, 80486SX, 80486DX[24] */\n+  PROCESSOR_PENTIUM,\n+  PROCESSOR_PENTIUMPRO,\n+  PROCESSOR_K6,\n+  PROCESSOR_ATHLON,\n+  PROCESSOR_PENTIUM4,\n+  PROCESSOR_max\n+};\n+\n+extern enum processor_type ix86_cpu;\n+extern const char *ix86_cpu_string;\n+\n+extern enum processor_type ix86_arch;\n+extern const char *ix86_arch_string;\n+\n+enum fpmath_unit\n+{\n+  FPMATH_387 = 1,\n+  FPMATH_SSE = 2\n+};\n+\n+extern enum fpmath_unit ix86_fpmath;\n+extern const char *ix86_fpmath_string;\n+\n enum cmodel {\n-  CM_32,\n-  CM_SMALL,\n-  CM_KERNEL,\n-  CM_MEDIUM,\n-  CM_LARGE,\n-  CM_SMALL_PIC\n+  CM_32,\t/* The traditional 32-bit ABI.  */\n+  CM_SMALL,\t/* Assumes all code and data fits in the low 31 bits.  */\n+  CM_KERNEL,\t/* Assumes all code and data fits in the high 31 bits.  */\n+  CM_MEDIUM,\t/* Assumes code fits in the low 31 bits; data unlimited.  */\n+  CM_LARGE,\t/* No assumptions.  */\n+  CM_SMALL_PIC\t/* Assumes code+data+got/plt fits in a 31 bit region.  */\n };\n \n+extern enum cmodel ix86_cmodel;\n+extern const char *ix86_cmodel_string;\n+\n /* Size of the RED_ZONE area.  */\n #define RED_ZONE_SIZE 128\n /* Reserved area of the red zone for temporaries.  */\n #define RED_ZONE_RESERVE 8\n-extern const char *ix86_debug_arg_string, *ix86_debug_addr_string;\n \n enum asm_dialect {\n   ASM_ATT,\n   ASM_INTEL\n };\n+\n extern const char *ix86_asm_string;\n extern enum asm_dialect ix86_asm_dialect;\n-/* Value of -mcmodel specified by user.  */\n-extern const char *ix86_cmodel_string;\n-extern enum cmodel ix86_cmodel;\n-\f\n-/* Variables in i386.c */\n-extern const char *ix86_cpu_string;\t\t/* for -mcpu=<xxx> */\n-extern const char *ix86_arch_string;\t\t/* for -march=<xxx> */\n-extern const char *ix86_fpmath_string;\t\t/* for -mfpmath=<xxx> */\n-extern const char *ix86_regparm_string;\t\t/* # registers to use to pass args */\n-extern const char *ix86_align_loops_string;\t/* power of two alignment for loops */\n-extern const char *ix86_align_jumps_string;\t/* power of two alignment for non-loop jumps */\n-extern const char *ix86_align_funcs_string;\t/* power of two alignment for functions */\n-extern const char *ix86_preferred_stack_boundary_string;/* power of two alignment for stack boundary */\n-extern const char *ix86_branch_cost_string;\t/* values 1-5: see jump.c */\n-extern int ix86_regparm;\t\t\t/* ix86_regparm_string as a number */\n-extern int ix86_preferred_stack_boundary;\t/* preferred stack boundary alignment in bits */\n-extern int ix86_branch_cost;\t\t\t/* values 1-5: see jump.c */\n-extern enum reg_class const regclass_map[FIRST_PSEUDO_REGISTER]; /* smalled class containing REGNO */\n+\n+extern int ix86_regparm;\n+extern const char *ix86_regparm_string;\t\n+\n+extern int ix86_preferred_stack_boundary;\n+extern const char *ix86_preferred_stack_boundary_string;\n+\n+extern int ix86_branch_cost;\n+extern const char *ix86_branch_cost_string;\n+\n+extern const char *ix86_debug_arg_string;\n+extern const char *ix86_debug_addr_string;\n+\n+/* Obsoleted by -f options.  Remove before 3.2 ships.  */\n+extern const char *ix86_align_loops_string;\n+extern const char *ix86_align_jumps_string;\n+extern const char *ix86_align_funcs_string;\n+\n+/* Smallest class containing REGNO.  */\n+extern enum reg_class const regclass_map[FIRST_PSEUDO_REGISTER];\n+\n extern rtx ix86_compare_op0;\t/* operand 0 for comparisons */\n extern rtx ix86_compare_op1;\t/* operand 1 for comparisons */\n \f"}]}