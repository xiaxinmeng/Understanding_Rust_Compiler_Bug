{"sha": "591ccf92b35994b10f846ef630cd1a58d53a8f12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkxY2NmOTJiMzU5OTRiMTBmODQ2ZWY2MzBjZDFhNThkNTNhOGYxMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-03-05T19:34:29Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-03-05T19:34:29Z"}, "message": "Revert this patch:\n\n\t2000-03-04  Mark Mitchell  <mark@codesourcery.com>\n\nFrom-SVN: r32343", "tree": {"sha": "a205e175db5fda69a8d59f2299e129a45e9f2d65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a205e175db5fda69a8d59f2299e129a45e9f2d65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/591ccf92b35994b10f846ef630cd1a58d53a8f12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/591ccf92b35994b10f846ef630cd1a58d53a8f12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/591ccf92b35994b10f846ef630cd1a58d53a8f12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/591ccf92b35994b10f846ef630cd1a58d53a8f12/comments", "author": null, "committer": null, "parents": [{"sha": "2f6f9ac7b6b62b13a488f5e7dbc7e1116330a714", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f6f9ac7b6b62b13a488f5e7dbc7e1116330a714", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f6f9ac7b6b62b13a488f5e7dbc7e1116330a714"}], "stats": {"total": 93, "additions": 89, "deletions": 4}, "files": [{"sha": "fa779241d5637f828acb3a9fec3e6ca19a5b2e4f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591ccf92b35994b10f846ef630cd1a58d53a8f12/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591ccf92b35994b10f846ef630cd1a58d53a8f12/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=591ccf92b35994b10f846ef630cd1a58d53a8f12", "patch": "@@ -1,3 +1,8 @@\n+2000-03-05  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tRevert this patch:\n+\t2000-03-04  Mark Mitchell  <mark@codesourcery.com>\n+\n 2000-03-04  Thomas Schuster <Thomas.Schuster@gmx.net>\n \n \t* regmove.c (copy_src_to_dest)  Do not create src->dest move"}, {"sha": "27b837447f0c57d70a71b5faffc0d1e253286476", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591ccf92b35994b10f846ef630cd1a58d53a8f12/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591ccf92b35994b10f846ef630cd1a58d53a8f12/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=591ccf92b35994b10f846ef630cd1a58d53a8f12", "patch": "@@ -3376,13 +3376,27 @@ start_sequence ()\n   tem->next = seq_stack;\n   tem->first = first_insn;\n   tem->last = last_insn;\n+  tem->sequence_rtl_expr = seq_rtl_expr;\n \n   seq_stack = tem;\n \n   first_insn = 0;\n   last_insn = 0;\n }\n \n+/* Similarly, but indicate that this sequence will be placed in T, an\n+   RTL_EXPR.  See the documentation for start_sequence for more\n+   information about how to use this function.  */\n+\n+void\n+start_sequence_for_rtl_expr (t)\n+     tree t;\n+{\n+  start_sequence ();\n+\n+  seq_rtl_expr = t;\n+}\n+\n /* Set up the insn chain starting with FIRST as the current sequence,\n    saving the previously current one.  See the documentation for\n    start_sequence for more information about how to use this function.  */\n@@ -3416,6 +3430,7 @@ push_topmost_sequence ()\n \n   first_insn = top->first;\n   last_insn = top->last;\n+  seq_rtl_expr = top->sequence_rtl_expr;\n }\n \n /* After emitting to the outer-level insn chain, update the outer-level\n@@ -3431,6 +3446,7 @@ pop_topmost_sequence ()\n \n   top->first = first_insn;\n   top->last = last_insn;\n+  /* ??? Why don't we save seq_rtl_expr here?  */\n \n   end_sequence ();\n }\n@@ -3455,6 +3471,7 @@ end_sequence ()\n \n   first_insn = tem->first;\n   last_insn = tem->last;\n+  seq_rtl_expr = tem->sequence_rtl_expr;\n   seq_stack = tem->next;\n \n   free (tem);\n@@ -3743,6 +3760,7 @@ init_emit ()\n   f->emit = (struct emit_status *) xmalloc (sizeof (struct emit_status));\n   first_insn = NULL;\n   last_insn = NULL;\n+  seq_rtl_expr = NULL;\n   cur_insn_uid = 1;\n   reg_rtx_no = LAST_VIRTUAL_REGISTER + 1;\n   last_linenum = 0;\n@@ -3816,6 +3834,7 @@ mark_sequence_stack (ss)\n   while (ss)\n     {\n       ggc_mark_rtx (ss->first);\n+      ggc_mark_tree (ss->sequence_rtl_expr);\n       ss = ss->next;\n     }\n }\n@@ -3837,6 +3856,7 @@ mark_emit_status (es)\n     ggc_mark_rtx (*r);\n \n   mark_sequence_stack (es->sequence_stack);\n+  ggc_mark_tree (es->sequence_rtl_expr);\n   ggc_mark_rtx (es->x_first_insn);\n }\n "}, {"sha": "0a563b4959297ac385824d8f8b281affad11098a", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591ccf92b35994b10f846ef630cd1a58d53a8f12/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591ccf92b35994b10f846ef630cd1a58d53a8f12/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=591ccf92b35994b10f846ef630cd1a58d53a8f12", "patch": "@@ -2095,7 +2095,7 @@ protect_with_terminate (e)\n       TREE_TYPE (handler) = void_type_node;\n       RTL_EXPR_RTL (handler) = const0_rtx;\n       TREE_SIDE_EFFECTS (handler) = 1;\n-      start_sequence ();\n+      start_sequence_for_rtl_expr (handler);\n \n       emit_library_call (terminate_libfunc, 0, VOIDmode, 0);\n       emit_barrier ();"}, {"sha": "fb266e272264d85cf69ef821761e878909483743", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591ccf92b35994b10f846ef630cd1a58d53a8f12/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591ccf92b35994b10f846ef630cd1a58d53a8f12/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=591ccf92b35994b10f846ef630cd1a58d53a8f12", "patch": "@@ -6306,6 +6306,8 @@ expand_expr (exp, target, tmode, modifier)\n \t  emit_insns (RTL_EXPR_SEQUENCE (exp));\n \t  RTL_EXPR_SEQUENCE (exp) = const0_rtx;\n \t}\n+      preserve_rtl_expr_result (RTL_EXPR_RTL (exp));\n+      free_temps_for_rtl_expr (exp);\n       return RTL_EXPR_RTL (exp);\n \n     case CONSTRUCTOR:"}, {"sha": "78c5ab85ef13fe3f3af54629417aef432e8cc319", "filename": "gcc/function.c", "status": "modified", "additions": 50, "deletions": 2, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591ccf92b35994b10f846ef630cd1a58d53a8f12/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591ccf92b35994b10f846ef630cd1a58d53a8f12/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=591ccf92b35994b10f846ef630cd1a58d53a8f12", "patch": "@@ -708,6 +708,7 @@ assign_stack_temp_for_type (mode, size, keep, type)\n \t\t\t\t\t\t    rounded_size));\n \t      p->align = best_p->align;\n \t      p->address = 0;\n+\t      p->rtl_expr = 0;\n \t      p->next = temp_slots;\n \t      temp_slots = p;\n \n@@ -775,6 +776,7 @@ assign_stack_temp_for_type (mode, size, keep, type)\n \n   p->in_use = 1;\n   p->addr_taken = 0;\n+  p->rtl_expr = seq_rtl_expr;\n \n   if (keep == 2)\n     {\n@@ -1127,6 +1129,34 @@ preserve_temp_slots (x)\n       p->level--;\n }\n \n+/* X is the result of an RTL_EXPR.  If it is a temporary slot associated\n+   with that RTL_EXPR, promote it into a temporary slot at the present\n+   level so it will not be freed when we free slots made in the\n+   RTL_EXPR.  */\n+\n+void\n+preserve_rtl_expr_result (x)\n+     rtx x;\n+{\n+  struct temp_slot *p;\n+\n+  /* If X is not in memory or is at a constant address, it cannot be in\n+     a temporary slot.  */\n+  if (x == 0 || GET_CODE (x) != MEM || CONSTANT_P (XEXP (x, 0)))\n+    return;\n+\n+  /* If we can find a match, move it to our level unless it is already at\n+     an upper level.  */\n+  p = find_temp_slot_from_address (XEXP (x, 0));\n+  if (p != 0)\n+    {\n+      p->level = MIN (p->level, temp_slot_level);\n+      p->rtl_expr = 0;\n+    }\n+\n+  return;\n+}\n+\n /* Free all temporaries used so far.  This is normally called at the end\n    of generating code for a statement.  Don't free any temporaries\n    currently in use for an RTL_EXPR that hasn't yet been emitted.\n@@ -1140,7 +1170,23 @@ free_temp_slots ()\n   struct temp_slot *p;\n \n   for (p = temp_slots; p; p = p->next)\n-    if (p->in_use && p->level == temp_slot_level && ! p->keep)\n+    if (p->in_use && p->level == temp_slot_level && ! p->keep\n+\t&& p->rtl_expr == 0)\n+      p->in_use = 0;\n+\n+  combine_temp_slots ();\n+}\n+\n+/* Free all temporary slots used in T, an RTL_EXPR node.  */\n+\n+void\n+free_temps_for_rtl_expr (t)\n+     tree t;\n+{\n+  struct temp_slot *p;\n+\n+  for (p = temp_slots; p; p = p->next)\n+    if (p->rtl_expr == t)\n       p->in_use = 0;\n \n   combine_temp_slots ();\n@@ -1218,7 +1264,7 @@ pop_temp_slots ()\n   struct temp_slot *p;\n \n   for (p = temp_slots; p; p = p->next)\n-    if (p->in_use && p->level == temp_slot_level)\n+    if (p->in_use && p->level == temp_slot_level && p->rtl_expr == 0)\n       p->in_use = 0;\n \n   combine_temp_slots ();\n@@ -6934,6 +6980,8 @@ mark_temp_slot (t)\n     {\n       ggc_mark_rtx (t->slot);\n       ggc_mark_rtx (t->address);\n+      ggc_mark_tree (t->rtl_expr);\n+\n       t = t->next;\n     }\n }"}, {"sha": "9ede7a73d08ff6c8959be1cb1923d325b808f541", "filename": "gcc/function.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591ccf92b35994b10f846ef630cd1a58d53a8f12/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591ccf92b35994b10f846ef630cd1a58d53a8f12/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=591ccf92b35994b10f846ef630cd1a58d53a8f12", "patch": "@@ -46,6 +46,7 @@ struct sequence_stack\n {\n   /* First and last insns in the chain of the saved sequence.  */\n   rtx first, last;\n+  tree sequence_rtl_expr;\n   struct sequence_stack *next;\n };\n \n@@ -76,6 +77,11 @@ struct emit_status\n   rtx x_first_insn;\n   rtx x_last_insn;\n \n+  /* RTL_EXPR within which the current sequence will be placed.  Use to\n+     prevent reuse of any temporaries within the sequence until after the\n+     RTL_EXPR is emitted.  */\n+  tree sequence_rtl_expr;\n+\n   /* Stack of pending (incomplete) sequences saved by `start_sequence'.\n      Each element describes one pending sequence.\n      The main insn-chain is saved in the last element of the chain,\n@@ -111,6 +117,7 @@ struct emit_status\n \n /* For backward compatibility... eventually these should all go away.  */\n #define reg_rtx_no (cfun->emit->x_reg_rtx_no)\n+#define seq_rtl_expr (cfun->emit->sequence_rtl_expr)\n #define regno_reg_rtx (cfun->emit->x_regno_reg_rtx)\n #define seq_stack (cfun->emit->sequence_stack)\n "}, {"sha": "c736600b058607dfb55ede8b04827a11e623375f", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591ccf92b35994b10f846ef630cd1a58d53a8f12/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591ccf92b35994b10f846ef630cd1a58d53a8f12/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=591ccf92b35994b10f846ef630cd1a58d53a8f12", "patch": "@@ -1508,6 +1508,7 @@ extern void reposition_prologue_and_epilogue_notes\tPARAMS ((rtx));\n extern void thread_prologue_and_epilogue_insns\t\tPARAMS ((rtx));\n extern int prologue_epilogue_contains\t\t\tPARAMS ((rtx));\n extern HOST_WIDE_INT get_frame_size\t\t\tPARAMS ((void));\n+extern void preserve_rtl_expr_result\t\t\tPARAMS ((rtx));\n extern void mark_temp_addr_taken\t\t\tPARAMS ((rtx));\n extern void update_temp_slot_address\t\t\tPARAMS ((rtx, rtx));\n extern void purge_addressof\t\t\t\tPARAMS ((rtx));"}, {"sha": "cd5277eb1aefc2ba4cfd0244d350f5d8e4f98baa", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591ccf92b35994b10f846ef630cd1a58d53a8f12/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591ccf92b35994b10f846ef630cd1a58d53a8f12/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=591ccf92b35994b10f846ef630cd1a58d53a8f12", "patch": "@@ -2025,7 +2025,7 @@ expand_start_stmt_expr ()\n   t = make_node (RTL_EXPR);\n   resume_momentary (momentary);\n   do_pending_stack_adjust ();\n-  start_sequence ();\n+  start_sequence_for_rtl_expr (t);\n   NO_DEFER_POP;\n   expr_stmts_for_value++;\n   return t;"}, {"sha": "1a827581c6b3d573c95250ff5b8eb60aee6a89a6", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591ccf92b35994b10f846ef630cd1a58d53a8f12/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591ccf92b35994b10f846ef630cd1a58d53a8f12/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=591ccf92b35994b10f846ef630cd1a58d53a8f12", "patch": "@@ -2452,6 +2452,7 @@ extern void preserve_temp_slots\t\tPARAMS ((struct rtx_def *));\n extern int aggregate_value_p\t\tPARAMS ((tree));\n extern tree reorder_blocks\t\tPARAMS ((tree,\n \t\t\t\t\t\tstruct rtx_def *));\n+extern void free_temps_for_rtl_expr\tPARAMS ((tree));\n extern void instantiate_virtual_regs\tPARAMS ((tree, struct rtx_def *));\n extern void unshare_all_rtl\t\tPARAMS ((tree, struct rtx_def *));\n extern int max_parm_reg_num\t\tPARAMS ((void));\n@@ -2485,6 +2486,7 @@ extern struct rtx_def *store_expr\t\tPARAMS ((tree, struct rtx_def *,\n extern void check_max_integer_computation_mode\tPARAMS ((tree));\n \n /* In emit-rtl.c */\n+extern void start_sequence_for_rtl_expr\t\tPARAMS ((tree));\n extern struct rtx_def *emit_line_note_after\tPARAMS ((char *, int,\n \t\t\t\t\t\t\tstruct rtx_def *));\n extern struct rtx_def *emit_line_note\t\tPARAMS ((char *, int));"}]}