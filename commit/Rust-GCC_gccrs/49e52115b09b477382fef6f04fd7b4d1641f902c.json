{"sha": "49e52115b09b477382fef6f04fd7b4d1641f902c", "node_id": "C_kwDOANBUbNoAKDQ5ZTUyMTE1YjA5YjQ3NzM4MmZlZjZmMDRmZDdiNGQxNjQxZjkwMmM", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-02-04T00:16:24Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-02-04T00:16:24Z"}, "message": "Daily bump.", "tree": {"sha": "9c2d40a66209a49067ed742d2a91b052728a60ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c2d40a66209a49067ed742d2a91b052728a60ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49e52115b09b477382fef6f04fd7b4d1641f902c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49e52115b09b477382fef6f04fd7b4d1641f902c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49e52115b09b477382fef6f04fd7b4d1641f902c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49e52115b09b477382fef6f04fd7b4d1641f902c/comments", "author": null, "committer": null, "parents": [{"sha": "e753080ab8abd4021381699bc7e857f5b4a083c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e753080ab8abd4021381699bc7e857f5b4a083c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e753080ab8abd4021381699bc7e857f5b4a083c4"}], "stats": {"total": 418, "additions": 417, "deletions": 1}, "files": [{"sha": "04033165f793398cadc6f137ea752b56ab4e4ed1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e52115b09b477382fef6f04fd7b4d1641f902c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e52115b09b477382fef6f04fd7b4d1641f902c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49e52115b09b477382fef6f04fd7b4d1641f902c", "patch": "@@ -1,3 +1,107 @@\n+2023-02-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/108647\n+\t* range-op.cc (operator_equal::op1_range,\n+\toperator_not_equal::op1_range): Don't test op2 bound\n+\tequality if op2.undefined_p (), instead set_varying.\n+\t(operator_lt::op1_range, operator_le::op1_range,\n+\toperator_gt::op1_range, operator_ge::op1_range): Return false if\n+\top2.undefined_p ().\n+\t(operator_lt::op2_range, operator_le::op2_range,\n+\toperator_gt::op2_range, operator_ge::op2_range): Return false if\n+\top1.undefined_p ().\n+\n+2023-02-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/108639\n+\t* value-range.cc (irange::legacy_equal_p): Compare nonzero bits as\n+\twidest_int.\n+\t(irange::operator==): Same.\n+\n+2023-02-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/108647\n+\t* range-op-float.cc (foperator_lt::op1_range): Handle undefined ranges.\n+\t(foperator_lt::op2_range): Same.\n+\t(foperator_le::op1_range): Same.\n+\t(foperator_le::op2_range): Same.\n+\t(foperator_gt::op1_range): Same.\n+\t(foperator_gt::op2_range): Same.\n+\t(foperator_ge::op1_range): Same.\n+\t(foperator_ge::op2_range): Same.\n+\t(foperator_unordered_lt::op1_range): Same.\n+\t(foperator_unordered_lt::op2_range): Same.\n+\t(foperator_unordered_le::op1_range): Same.\n+\t(foperator_unordered_le::op2_range): Same.\n+\t(foperator_unordered_gt::op1_range): Same.\n+\t(foperator_unordered_gt::op2_range): Same.\n+\t(foperator_unordered_ge::op1_range): Same.\n+\t(foperator_unordered_ge::op2_range): Same.\n+\n+2023-02-03  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/107570\n+\t* tree-vrp.cc (remove_and_update_globals): Reset SCEV.\n+\n+2023-02-03  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\t* doc/gm2.texi (Internals): Remove from menu.\n+\t(Using): Comment out ifnohtml conditional.\n+\t(Documentation): Use gcc url.\n+\t(License): Node simplified.\n+\t(Copying): New node.  Include gpl_v3_without_node.\n+\t(Contributing): Node simplified.\n+\t(Internals): Commented out.\n+\t(Libraries): Node simplified.\n+\t(Indices): Ditto.\n+\t(Contents): Ditto.\n+\t(Functions): Ditto.\n+\n+2023-02-03  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\t* config/arm/mve.md (mve_vabavq_p_<supf><mode>): Add length\n+\tattribute.\n+\t(mve_vqshluq_m_n_s<mode>): Likewise.\n+\t(mve_vshlq_m_<supf><mode>): Likewise.\n+\t(mve_vsriq_m_n_<supf><mode>): Likewise.\n+\t(mve_vsubq_m_<supf><mode>): Likewise.\n+\n+2023-02-03  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/108384\n+\t* ipa-sra.cc (push_param_adjustments_for_index): Remove a size check\n+\twhen comparing to an IPA-CP value.\n+\t(dump_list_of_param_indices): New function.\n+\t(adjust_parameter_descriptions): Check for mismatching IPA-CP values.\n+\tDump removed candidates using dump_list_of_param_indices.\n+\t* ipa-param-manipulation.cc\n+\t(ipa_param_body_adjustments::modify_expression): Add assert checking\n+\tsizes of a VIEW_CONVERT_EXPR will match.\n+\t(ipa_param_body_adjustments::modify_assignment): Likewise.\n+\n+2023-02-03  Monk Chiang  <monk.chiang@sifive.com>\n+\n+\t* config/riscv/riscv.h: Remove VL_REGS, VTYPE_REGS class.\n+\t* config/riscv/riscv.cc: Ditto.\n+\n+2023-02-03  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/vector-iterators.md (sll.vi): Fix constraint bug.\n+\t(sll.vv): Ditto.\n+\t(%3,%4): Ditto.\n+\t(%3,%v4): Ditto.\n+\t* config/riscv/vector.md: Ditto.\n+\n+2023-02-03  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/predicates.md (pmode_reg_or_uimm5_operand): New predicate.\n+\t* config/riscv/riscv-vector-builtins-bases.cc: New class.\n+\t* config/riscv/riscv-vector-builtins-functions.def (vsll): Ditto.\n+\t(vsra): Ditto.\n+\t(vsrl): Ditto.\n+\t* config/riscv/riscv-vector-builtins.cc: Ditto.\n+\t* config/riscv/vector.md (@pred_<optab><mode>_scalar): New pattern.\n+\n 2023-02-02  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* toplev.cc (toplev::main): Only print the version information header"}, {"sha": "65026ee2abb16578affbdf497707b64877046126", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e52115b09b477382fef6f04fd7b4d1641f902c/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e52115b09b477382fef6f04fd7b4d1641f902c/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=49e52115b09b477382fef6f04fd7b4d1641f902c", "patch": "@@ -1 +1 @@\n-20230203\n+20230204"}, {"sha": "0d05bca5db309c5011d890c7db056f34eb529029", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e52115b09b477382fef6f04fd7b4d1641f902c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e52115b09b477382fef6f04fd7b4d1641f902c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=49e52115b09b477382fef6f04fd7b4d1641f902c", "patch": "@@ -1,3 +1,31 @@\n+2023-02-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/108158\n+\t* constexpr.cc (cxx_eval_array_reference): Don't replace\n+\tnew_ctx.object.\n+\n+2023-02-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/107461\n+\t* semantics.cc (finish_call_expr): Strip ADDR_EXPR from\n+\tthe selected callee during overload set pruning.\n+\n+2023-02-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/96745\n+\t* class.cc (check_methods): Diagnose an unviable OVERLOAD\n+\tset for CLASSTYPE_DESTRUCTOR differently from an ambiguous one.\n+\tThen prune the OVERLOAD to a single function.\n+\t(check_bases_and_members): Handle CLASSTYPE_DESTRUCTOR being\n+\tan OVERLOAD when calling deduce_noexcept_on_destructor.\n+\tDocument why it has to be called before check_methods.\n+\n+2023-02-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/108579\n+\t* class.cc (check_methods): Swap order of constraints_satisfied_p\n+\tand copy/move_fn_p tests.\n+\n 2023-02-01  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/107755"}, {"sha": "687ca79a7cc23b7dabfecdd31bccb608e671f477", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e52115b09b477382fef6f04fd7b4d1641f902c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e52115b09b477382fef6f04fd7b4d1641f902c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=49e52115b09b477382fef6f04fd7b4d1641f902c", "patch": "@@ -1,3 +1,9 @@\n+2023-02-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/108451\n+\t* trans-decl.cc (gfc_trans_use_stmts): Call clear_slot before\n+\tdoing continue.\n+\n 2023-02-01  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/108609"}, {"sha": "1d217996ef0f948e310b7183b138e34d2f432a44", "filename": "gcc/m2/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e52115b09b477382fef6f04fd7b4d1641f902c/gcc%2Fm2%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e52115b09b477382fef6f04fd7b4d1641f902c/gcc%2Fm2%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2FChangeLog?ref=49e52115b09b477382fef6f04fd7b4d1641f902c", "patch": "@@ -1,3 +1,62 @@\n+2023-02-03  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\t* Make-lang.in (TEXISRC): Remove m2/images/gnu.eps.\n+\t(RSTSRC): Remove m2/images/gnu.eps.\n+\t(doc/m2.dvi): Add $(objdir)/m2/images/gnu.eps.\n+\t(doc/m2.pdf): Add $(objdir)/m2/images/gnu.eps.\n+\t(M2_PDFFILES): New definition.\n+\t(m2.install-pdf): New rule.\n+\t(m2.pod): Add $(objdir)/m2/images/gnu.eps.\n+\t(m2.info): Add $(objdir)/m2/images/gnu.eps.\n+\t(m2.html): New rule.\n+\t(m2/gpl_v3_without_node.texi): New rule.\n+\t(plugin/m2rte$(soext)): Simplify mkinstalldirs.\n+\t(cc1gm2$(exeext)): Ditto.\n+\t(m2/stage1/cc1gm2$(exeext)): Ditto.\n+\t(m2/gm2-gcc/%.o): Ditto.\n+\t(m2/gm2-gcc/rtegraph.o): Ditto.\n+\t(m2/gm2-gcc/$(SRC_PREFIX)%.h): Ditto.\n+\t(m2/mc-boot/$(SRC_PREFIX)%.o):Ditto.\n+\t(m2/mc-boot-ch/$(SRC_PREFIX)%.o): Ditto.\n+\t(m2/mc-boot/main.o): Ditto.\n+\t(m2/gm2-libs-boot/%.o):\tDitto.\n+\t(m2/gm2-libs-boot/$(SRC_PREFIX)%.h): Ditto.\n+\t(m2/gm2-libs-boot/RTcodummy.o): Ditto.\n+\t(m2/gm2-libs-boot/wrapc.o): Ditto.\n+\t(m2/gm2-libs-boot/M2LINK.o): Ditto.\n+\t(m2/gm2-libs-boot/UnixArgs.o): Ditto.\n+\t(m2/gm2-libs-boot/choosetemp.o): Ditto.\n+\t(m2/gm2-libs-boot/errno.o): Ditto.\n+\t(m2/gm2-libs-boot/dtoa.o): Ditto.\n+\t(m2/gm2-libs-boot/ldtoa.o): Ditto.\n+\t(m2/gm2-libs-boot/termios.o): Ditto.\n+\t(m2/gm2-libs-boot/SysExceptions.o): Ditto.\n+\t(m2/gm2-libs-boot/SysStorage.o): Ditto.\n+\t(m2/gm2-compiler-boot/M2GCCDeclare.o): Ditto.\n+\t(m2/gm2-compiler-boot/M2Error.o): Ditto.\n+\t(m2/gm2-compiler-boot/%.o): Ditto.\n+\t(m2/gm2-compiler-boot/$(SRC_PREFIX)%.h): Ditto.\n+\t(m2/gm2-compiler-boot/m2flex.o): Ditto.\n+\t(m2/gm2-compiler/m2flex.c): Ditto.\n+\t(m2/gm2-libiberty/$(SRC_PREFIX)%.h): Ditto.\n+\t(m2/gm2-compiler/%.o): Ditto.\n+\t(m2/gm2-compiler/m2flex.o): Ditto.\n+\t(m2/gm2-compiler/%.o): Ditto.\n+\t(m2/gm2-libs-iso/%.o): Ditto.\n+\t(m2/gm2-libs/gm2-libs-host.h): Ditto.\n+\t($(objdir)/m2/gm2-libs-min/SYSTEM.def): Ditto.\n+\t($(objdir)/m2/gm2-libs/SYSTEM.def): Ditto.\n+\t($(objdir)/m2/gm2-libs-iso/SYSTEM.def):\tDitto.\n+\t($(objdir)/m2/gm2-libs-coroutines/SYSTEM.def): Ditto.\n+\t(m2/gm2-compiler/gm2.a): Ditto.\n+\t(m2/gm2-libs-boot/libgm2.a): Ditto.\n+\t(m2/gm2-compiler-boot/gm2.a): Ditto.\n+\t(m2/boot-bin/mklink$(exeext)): Ditto.\n+\t(m2/gm2-compiler-boot/$(SRC_PREFIX)%.h): Ditto.\n+\t(m2/gm2-compiler/%.mod): Ditto.\n+\t(m2/gm2-compiler-boot/%.mod): Ditto.\n+\t(m2/pge-boot/%.o): Ditto.\n+\n 2023-02-01  Gaius Mulley  <gaiusmod2@gmail.com>\n \n \t* Make-lang.in (GM2_FLAGS): Add -fno-return -Wreturn-type."}, {"sha": "7b47cc84044fe53d04cfb4c90846cd59ff8c956d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e52115b09b477382fef6f04fd7b4d1641f902c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e52115b09b477382fef6f04fd7b4d1641f902c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=49e52115b09b477382fef6f04fd7b4d1641f902c", "patch": "@@ -1,3 +1,175 @@\n+2023-02-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/108647\n+\t* g++.dg/torture/pr108647.C: New test.\n+\n+2023-02-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/108639\n+\t* gcc.c-torture/compile/pr108638.c: New file.\n+\t* gcc.c-torture/compile/pr108639.c: New file.\n+\n+2023-02-03  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/107570\n+\t* gcc.dg/pr107570.c: New.\n+\n+2023-02-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/108158\n+\t* g++.dg/cpp1y/constexpr-108158.C: New test.\n+\n+2023-02-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/101071\n+\t* g++.dg/cpp0x/variadic-alias8.C: New test.\n+\n+2023-02-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/107461\n+\t* g++.dg/template/call9.C: New test.\n+\n+2023-02-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/96745\n+\t* g++.dg/cpp2a/concepts-dtor1.C: New test.\n+\n+2023-02-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/108579\n+\t* g++.dg/cpp2a/concepts-pr108579.C: New test.\n+\n+2023-02-03  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/108384\n+\t* gcc.dg/ipa/pr108384.c: New test.\n+\n+2023-02-03  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/binop_vv_constraint-1.c:\n+\t* gcc.target/riscv/rvv/base/shift_vx_constraint-1.c:\n+\n+2023-02-03  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* g++.target/riscv/rvv/base/vsll_vx-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsll_vx-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsll_vx-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vsll_vx_mu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsll_vx_mu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsll_vx_mu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vsll_vx_tu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsll_vx_tu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsll_vx_tu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vsll_vx_tum-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsll_vx_tum-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsll_vx_tum-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vsll_vx_tumu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsll_vx_tumu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsll_vx_tumu-3.C: New test.\n+\n+2023-02-03  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* g++.target/riscv/rvv/base/vsra_vx-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsra_vx-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsra_vx-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vsra_vx_mu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsra_vx_mu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsra_vx_mu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vsra_vx_tu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsra_vx_tu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsra_vx_tu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vsra_vx_tum-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsra_vx_tum-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsra_vx_tum-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vsra_vx_tumu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsra_vx_tumu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsra_vx_tumu-3.C: New test.\n+\n+2023-02-03  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* g++.target/riscv/rvv/base/vsrl_vx-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsrl_vx-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsrl_vx-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vsrl_vx_mu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsrl_vx_mu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsrl_vx_mu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vsrl_vx_tu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsrl_vx_tu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsrl_vx_tu-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vsrl_vx_tum-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsrl_vx_tum-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsrl_vx_tum-3.C: New test.\n+\t* g++.target/riscv/rvv/base/vsrl_vx_tumu-1.C: New test.\n+\t* g++.target/riscv/rvv/base/vsrl_vx_tumu-2.C: New test.\n+\t* g++.target/riscv/rvv/base/vsrl_vx_tumu-3.C: New test.\n+\n+2023-02-03  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/shift_vx_constraint-1.c: New test.\n+\n+2023-02-03  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/vsll_vx-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vx-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vx-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vx_m-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vx_m-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vx_m-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vx_mu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vx_mu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vx_mu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vx_tu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vx_tu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vx_tu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vx_tum-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vx_tum-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vx_tum-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vx_tumu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vx_tumu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsll_vx_tumu-3.c: New test.\n+\n+2023-02-03  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/vsra_vx-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vx-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vx-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vx_m-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vx_m-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vx_m-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vx_mu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vx_mu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vx_mu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vx_tu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vx_tu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vx_tu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vx_tum-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vx_tum-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vx_tum-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vx_tumu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vx_tumu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsra_vx_tumu-3.c: New test.\n+\n+2023-02-03  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/vsrl_vx-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vx-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vx-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vx_m-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vx_m-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vx_m-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vx_mu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vx_mu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vx_mu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vx_tu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vx_tu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vx_tu-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vx_tum-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vx_tum-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vx_tum-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vx_tumu-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vx_tumu-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/vsrl_vx_tumu-3.c: New test.\n+\n 2023-02-02  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/c2x-constexpr-3.c: Do not expect comparison of nullptr_t"}, {"sha": "12eefc0ebc46e42d1fa038260435dd5f0a9c05d5", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e52115b09b477382fef6f04fd7b4d1641f902c/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e52115b09b477382fef6f04fd7b4d1641f902c/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=49e52115b09b477382fef6f04fd7b4d1641f902c", "patch": "@@ -1,3 +1,8 @@\n+2023-02-03  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\t* config/arm/pr-support.c (__gnu_unwind_execute): Use\n+\tTARGET_HAVE_PACBTI to define set_pac and set_pac_sp.\n+\n 2023-01-30  Flavio Cruz  <flaviocruz@gmail.com>\n \n \t* config.host: Recognize x86_64-*-gnu* targets."}, {"sha": "519120bb6984bae122bd7592a095efbc4fec3315", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e52115b09b477382fef6f04fd7b4d1641f902c/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e52115b09b477382fef6f04fd7b4d1641f902c/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=49e52115b09b477382fef6f04fd7b4d1641f902c", "patch": "@@ -1,3 +1,16 @@\n+2023-02-03  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* target.c (gomp_target_rev): Handle mapnum == 0 and avoid\n+\tfreeing not allocated memory.\n+\t* testsuite/libgomp.fortran/reverse-offload-6.f90: New test.\n+\n+2023-02-03  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* libgomp.texi (5.0 Impl. Status, gcn specifics): Update for\n+\treverse offload.\n+\t* plugin/plugin-gcn.c (GOMP_OFFLOAD_get_num_devices): Accept\n+\treverse-offload requirement.\n+\n 2023-02-02  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* config/gcn/libgomp-gcn.h (DEFAULT_GCN_STACK_SIZE): New define."}, {"sha": "77e54a8573e6ed8b036624158708134082cc1e62", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e52115b09b477382fef6f04fd7b4d1641f902c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e52115b09b477382fef6f04fd7b4d1641f902c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=49e52115b09b477382fef6f04fd7b4d1641f902c", "patch": "@@ -1,3 +1,32 @@\n+2023-02-03  Samuel Thibault  <samuel.thibault@gnu.org>\n+\n+\t* config/os/gnu-linux/os_defines.h [!__linux__]\n+\t(_GLIBCXX_NATIVE_THREAD_ID, _GLIBCXX_GTHREAD_USE_WEAK): Do not define.\n+\n+2023-02-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/ranges_algo.h (__find_last_fn, find_last):\n+\tDefine.\n+\t(__find_last_if_fn, find_last_if): Define.\n+\t(__find_last_if_not_fn, find_last_if_not): Define.\n+\t* testsuite/25_algorithms/find_last/1.cc: New test.\n+\t* testsuite/25_algorithms/find_last_if/1.cc: New test.\n+\t* testsuite/25_algorithms/find_last_if_not/1.cc: New test.\n+\n+2023-02-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/ranges_algo.h (out_value_result): Define.\n+\t(iota_result): Define.\n+\t(__iota_fn, iota): Define.\n+\t* testsuite/25_algorithms/iota/1.cc: New test.\n+\n+2023-02-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/ranges_algo.h (__contains_fn, contains): Define.\n+\t(__contains_subrange_fn, contains_subrange): Define.\n+\t* testsuite/25_algorithms/contains/1.cc: New test.\n+\t* testsuite/25_algorithms/contains_subrange/1.cc: New test.\n+\n 2023-02-02  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/xml/manual/abi.xml: Tweak link to ABIcheck project."}]}