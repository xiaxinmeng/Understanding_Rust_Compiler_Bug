{"sha": "00c79232abd8b6bb1142b5aba51109075e780034", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBjNzkyMzJhYmQ4YjZiYjExNDJiNWFiYTUxMTA5MDc1ZTc4MDAzNA==", "commit": {"author": {"name": "Marc Lehmann", "email": "pcg@goof.com", "date": "1998-02-11T00:29:57Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-02-11T00:29:57Z"}, "message": "i386.c: Added include for recog.h.\n\n        * i386.c: Added include for recog.h.\n        (override_options): Removed unused variable p. Initialized regno to\n        avoid warning.\n        (order_regs_for_local_alloc): Initialized regno to avoid warning.\n        (legitimize_address): Likewise for 'other'.\n        (i386_aligned_reg_p): Added default case with abort ().\n        (print_operand): Likewise.\n        (reg_mentioned_in_mem): Likewise.\n        (ix86_expand_binary_operator): Removed unused variables i & insn.\n        (ix86_expand_unary_operator): Removed unused variable insn.\n        (output_fp_cc0_set): Removed unused variable unordered_label.\n\nFrom-SVN: r17841", "tree": {"sha": "e52ac0f44b4416e029e3646a6690b7434966077a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e52ac0f44b4416e029e3646a6690b7434966077a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00c79232abd8b6bb1142b5aba51109075e780034", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00c79232abd8b6bb1142b5aba51109075e780034", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00c79232abd8b6bb1142b5aba51109075e780034", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00c79232abd8b6bb1142b5aba51109075e780034/comments", "author": null, "committer": null, "parents": [{"sha": "f64cecad3ef744037d3d2cd12fee286d6258ecd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f64cecad3ef744037d3d2cd12fee286d6258ecd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f64cecad3ef744037d3d2cd12fee286d6258ecd3"}], "stats": {"total": 43, "additions": 32, "deletions": 11}, "files": [{"sha": "2b0dadab34a700342276236c76105c8a8a8ea02f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c79232abd8b6bb1142b5aba51109075e780034/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c79232abd8b6bb1142b5aba51109075e780034/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00c79232abd8b6bb1142b5aba51109075e780034", "patch": "@@ -1,3 +1,17 @@\n+Wed Feb 11 01:30:49 1998  Marc Lehmann <pcg@goof.com>\n+\n+\t* i386.c: Added include for recog.h. \n+\t(override_options): Removed unused variable p. Initialized regno to\n+\tavoid warning.\n+\t(order_regs_for_local_alloc): Initialized regno to avoid warning.\n+\t(legitimize_address): Likewise for 'other'.\n+\t(i386_aligned_reg_p): Added default case with abort ().\n+\t(print_operand): Likewise.\n+\t(reg_mentioned_in_mem): Likewise.\n+\t(ix86_expand_binary_operator): Removed unused variables i & insn.\n+\t(ix86_expand_unary_operator): Removed unused variable insn.\n+\t(output_fp_cc0_set): Removed unused variable unordered_label.\n+\n Wed Feb 11 01:23:03 1998  John F. Carr  <jfc@mit.edu>\n \n \t* i386.c, i386.h, i386.md: Change gen_rtx (X, ...) to gen_rtx_X (...)."}, {"sha": "ae370e105118c5b8f4ea51eed52eca6128b894d2", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c79232abd8b6bb1142b5aba51109075e780034/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c79232abd8b6bb1142b5aba51109075e780034/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=00c79232abd8b6bb1142b5aba51109075e780034", "patch": "@@ -35,6 +35,7 @@ Boston, MA 02111-1307, USA. */\n #include \"flags.h\"\n #include \"except.h\"\n #include \"function.h\"\n+#include \"recog.h\"\n \n #ifdef EXTRA_CONSTRAINT\n /* If EXTRA_CONSTRAINT is defined, then the 'S'\n@@ -193,8 +194,7 @@ int i386_align_jumps;\n void\n override_options ()\n {\n-  int ch, i, j, regno;\n-  char *p;\n+  int ch, i, j;\n   int def_align;\n \n   static struct ptt\n@@ -225,6 +225,8 @@ override_options ()\n     {\n       for (i = 0; (ch = i386_reg_alloc_order[i]) != '\\0'; i++)\n \t{\n+\t  int regno = 0;\n+\t  \n \t  switch (ch)\n \t    {\n \t    case 'a':\tregno = 0;\tbreak;\n@@ -372,14 +374,16 @@ override_options ()\n void\n order_regs_for_local_alloc ()\n {\n-  int i, ch, order, regno;\n+  int i, ch, order;\n \n   /* User specified the register allocation order.  */\n \n   if (i386_reg_alloc_order)\n     {\n       for (i = order = 0; (ch = i386_reg_alloc_order[i]) != '\\0'; i++)\n \t{\n+\t  int regno = 0;\n+\t  \n \t  switch (ch)\n \t    {\n \t    case 'a':\tregno = 0;\tbreak;\n@@ -489,6 +493,9 @@ i386_aligned_p (op)\n \n     case REG:\n       return i386_aligned_reg_p (REGNO (op));\n+    \n+    default:\n+      abort ();\n     }\n \n   return 0;\n@@ -1722,8 +1729,6 @@ ix86_expand_binary_operator (code, mode, operands)\n      enum machine_mode mode;\n      rtx operands[];\n {\n-  rtx insn;\n-  int i;\n   int modified;\n \n   /* Recognize <var1> = <value> <op> <var1> for commutative operators */\n@@ -1823,8 +1828,6 @@ ix86_expand_unary_operator (code, mode, operands)\n      enum machine_mode mode;\n      rtx operands[];\n {\n-  rtx insn;\n-\n   /* If optimizing, copy to regs to improve CSE */\n   if (TARGET_PSEUDO\n       && optimize\n@@ -2841,7 +2844,8 @@ legitimize_address (x, oldx, mode)\n \t       && GET_CODE (XEXP (XEXP (x, 0), 1)) == PLUS\n \t       && CONSTANT_P (XEXP (x, 1)))\n \t{\n-\t  rtx constant, other;\n+\t  rtx constant;\n+\t  rtx other = NULL_RTX;\n \n \t  if (GET_CODE (XEXP (x, 1)) == CONST_INT)\n \t    {\n@@ -3264,10 +3268,12 @@ print_operand (file, x, code)\n \t    case GTU: fputs (\"jne\",  file); return;\n \t    case LEU: fputs (\"je\", file); return;\n \t    case LTU: fputs (\"#branch never\",  file); return;\n-\n+\t    \n \t    /* no matching branches for GT nor LE */\n+\t    \n+\t    default:\n+\t      abort ();\n \t    }\n-\t  abort ();\n \n \tcase 's':\n \t  if (GET_CODE (x) == CONST_INT || ! SHIFT_DOUBLE_OMITS_COUNT)\n@@ -4037,7 +4043,6 @@ output_fp_cc0_set (insn)\n      rtx insn;\n {\n   rtx xops[3];\n-  rtx unordered_label;\n   rtx next;\n   enum rtx_code code;\n \n@@ -4822,6 +4827,8 @@ reg_mentioned_in_mem (reg, rtl)\n     case CC0:\n     case SUBREG:\n       return 0;\n+    default:\n+      abort ();\n     }\n \n   if (code == MEM && reg_mentioned_p (reg, rtl))"}]}