{"sha": "77167b6f44e2f2156a396af44701329c168c3ab1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzcxNjdiNmY0NGUyZjIxNTZhMzk2YWY0NDcwMTMyOWMxNjhjM2FiMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-09-22T08:31:14Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-09-22T08:31:14Z"}, "message": "re PR target/35664 (unable to find a register to spill in class 'FP_REGS')\n\n\tPR target/35664\n\t* config/sparc/constraints.md ('e'): Return NO_REGS if !TARGET_FPU.\n\t('f'): Likewise.\n\nFrom-SVN: r164512", "tree": {"sha": "5847147401cdcf164f4a99f9f5d1ce7857460f3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5847147401cdcf164f4a99f9f5d1ce7857460f3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77167b6f44e2f2156a396af44701329c168c3ab1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77167b6f44e2f2156a396af44701329c168c3ab1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77167b6f44e2f2156a396af44701329c168c3ab1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77167b6f44e2f2156a396af44701329c168c3ab1/comments", "author": null, "committer": null, "parents": [{"sha": "50842acbc6cbe8befb9a79c57f2424b87f1d81b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50842acbc6cbe8befb9a79c57f2424b87f1d81b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50842acbc6cbe8befb9a79c57f2424b87f1d81b5"}], "stats": {"total": 115, "additions": 107, "deletions": 8}, "files": [{"sha": "921ab0e61b78e6605b5e985efb3ae062ea3ef57c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77167b6f44e2f2156a396af44701329c168c3ab1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77167b6f44e2f2156a396af44701329c168c3ab1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77167b6f44e2f2156a396af44701329c168c3ab1", "patch": "@@ -1,3 +1,9 @@\n+2010-09-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/35664\n+\t* config/sparc/constraints.md ('e'): Return NO_REGS if !TARGET_FPU.\n+\t('f'): Likewise.\n+\n 2010-09-22  Tristan Gingold  <gingold@adacore.com>\n \n \t* config/alpha/alpha.c (alpha_use_linkage): Initialize target field."}, {"sha": "73c4087d90486caa97866e1f5a1a10e8a598454c", "filename": "gcc/config/sparc/constraints.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77167b6f44e2f2156a396af44701329c168c3ab1/gcc%2Fconfig%2Fsparc%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77167b6f44e2f2156a396af44701329c168c3ab1/gcc%2Fconfig%2Fsparc%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fconstraints.md?ref=77167b6f44e2f2156a396af44701329c168c3ab1", "patch": "@@ -35,10 +35,10 @@\n \n ;; In the non-V9 case, coerce V9 'e' class to 'f', so we can use 'e' in the\n ;; MD file for V8 and V9.\n-(define_register_constraint \"e\" \"TARGET_V9 ? EXTRA_FP_REGS : FP_REGS\"\n+(define_register_constraint \"e\" \"(TARGET_FPU ? (TARGET_V9 ? EXTRA_FP_REGS : FP_REGS) : NO_REGS)\"\n  \"Any floating-point register\")\n \n-(define_register_constraint \"f\" \"FP_REGS\"\n+(define_register_constraint \"f\" \"(TARGET_FPU ? FP_REGS : NO_REGS)\"\n  \"Lower floating-point register\")\n  \n (define_register_constraint \"h\" \"(TARGET_V9 && TARGET_V8PLUS ? I64_REGS : NO_REGS)\""}, {"sha": "1eae497bf31e2b5055c1ee699ad8b1ab55a6ef98", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77167b6f44e2f2156a396af44701329c168c3ab1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77167b6f44e2f2156a396af44701329c168c3ab1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77167b6f44e2f2156a396af44701329c168c3ab1", "patch": "@@ -1,3 +1,7 @@\n+2010-09-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.target/sparc/mnofpu.c: New test.\n+\n 2010-09-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/45739\n@@ -25,12 +29,11 @@\n \n \t2005-10-11  Fariborz Jahanian <fjahanian@apple.com>\n \n-\t        Radar 4291785\n-\t        \n-\t        objc.dg/naming-4.m: New\n-\t        objc.dg/naming-5.m: New\n-\t        obj-c++.dg/naming-1.mm: New\n-\t        obj-c++.dg/naming-2.mm: New\n+\tRadar 4291785\n+\tobjc.dg/naming-4.m: New\n+\tobjc.dg/naming-5.m: New\n+\tobj-c++.dg/naming-1.mm: New\n+\tobj-c++.dg/naming-2.mm: New\n \n 2010-09-21  Jonathan Wakely  <redi@gcc.gnu.org>\n \t    Jack Howarth  <howarth@bromo.med.uc.edu>"}, {"sha": "351585dd7106cdce8d5c873f8cde8ceff2e1b7fe", "filename": "gcc/testsuite/gcc.target/sparc/mnofpu.c", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77167b6f44e2f2156a396af44701329c168c3ab1/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fmnofpu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77167b6f44e2f2156a396af44701329c168c3ab1/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fmnofpu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fmnofpu.c?ref=77167b6f44e2f2156a396af44701329c168c3ab1", "patch": "@@ -0,0 +1,90 @@\n+/* PR target/35664 */\n+/* Tetstcase by Mike Stein <mstein.lists@googlemail.com> */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mno-fpu\" } */\n+\n+typedef unsigned char u8;\n+typedef unsigned short u16;\n+typedef unsigned int u32;\n+typedef unsigned long long u64;\n+struct pt_regs {\n+};\n+static inline __attribute__((always_inline)) struct task_struct *__get_current(void)\n+{\n+}\n+static inline __attribute__((always_inline)) u32 flip_dword (u32 l)\n+{\n+ return ((l&0xff)<<24) | (((l>>8)&0xff)<<16) | (((l>>16)&0xff)<<8)| ((l>>24)&0xff);\n+}\n+static inline __attribute__((always_inline)) u32 __readl(const volatile void *addr)\n+{\n+ return flip_dword(*( volatile u32 *)addr);\n+}\n+enum e1e_registers {\n+ E1000_PRC64 = 0x0405C,\n+ E1000_PRC127 = 0x04060,\n+ E1000_PRC255 = 0x04064,\n+ E1000_PTC511 = 0x040E4,\n+ E1000_PTC1023 = 0x040E8,\n+ E1000_PTC1522 = 0x040EC,\n+ E1000_MPTC = 0x040F0,\n+};\n+enum e1000_media_type {\n+ e1000_media_type_copper = 1,\n+};\n+struct e1000_rx_desc {\n+ struct {\n+ } wb;\n+};\n+struct e1000_hw_stats {\n+ u64 prc64;\n+ u64 prc127;\n+ u64 prc255;\n+ u64 ptc511;\n+ u64 ptc1023;\n+ u64 ptc1522;\n+ u64 mptc;\n+};\n+struct e1000_shadow_ram {\n+ u16 value;\n+};\n+struct e1000_dev_spec_ich8lan {\n+ struct e1000_shadow_ram shadow_ram[2048];\n+};\n+struct e1000_hw {\n+ u8 *hw_addr;\n+ union {\n+  struct e1000_dev_spec_ich8lan ich8lan;\n+ } dev_spec;\n+ enum e1000_media_type media_type;\n+};\n+struct e1000_adapter {\n+ u16 link_speed;\n+ struct e1000_hw hw;\n+ struct e1000_hw_stats stats;\n+ unsigned int flags;\n+};\n+static inline __attribute__((always_inline)) u32 __er32(struct e1000_hw *hw, unsigned long reg)\n+{\n+ return __readl(hw->hw_addr + reg);\n+}\n+void e1000e_update_stats(struct e1000_adapter *adapter)\n+{\n+ struct e1000_hw *hw = &adapter->hw;\n+ u16 phy_tmp;\n+ if (adapter->flags & (1 << 10)) {\n+  adapter->stats.prc64 += __er32(hw, E1000_PRC64);\n+  adapter->stats.prc127 += __er32(hw, E1000_PRC127);\n+  adapter->stats.prc255 += __er32(hw, E1000_PRC255);\n+  adapter->stats.ptc511 += __er32(hw, E1000_PTC511);\n+  adapter->stats.ptc1023 += __er32(hw, E1000_PTC1023);\n+  adapter->stats.ptc1522 += __er32(hw, E1000_PTC1522);\n+ }\n+ adapter->stats.mptc += __er32(hw, E1000_MPTC);\n+ if (hw->media_type == e1000_media_type_copper) {\n+  if ((adapter->link_speed == 1000) &&\n+     (!e1e_rphy(hw, 0x0A, &phy_tmp))) {\n+  }\n+ }\n+}"}]}