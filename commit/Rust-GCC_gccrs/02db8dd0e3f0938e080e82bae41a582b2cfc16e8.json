{"sha": "02db8dd0e3f0938e080e82bae41a582b2cfc16e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJkYjhkZDBlM2YwOTM4ZTA4MGU4MmJhZTQxYTU4MmIyY2ZjMTZlOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-01T01:17:28Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-01T01:17:28Z"}, "message": "(alter_reg): Clean up setting of RTX_UNCHANGING_P when making a MEM.\n\nFrom-SVN: r9861", "tree": {"sha": "cf82dbc0337cefb5b342f3cee40dd9ff268b3f26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf82dbc0337cefb5b342f3cee40dd9ff268b3f26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02db8dd0e3f0938e080e82bae41a582b2cfc16e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02db8dd0e3f0938e080e82bae41a582b2cfc16e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02db8dd0e3f0938e080e82bae41a582b2cfc16e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02db8dd0e3f0938e080e82bae41a582b2cfc16e8/comments", "author": null, "committer": null, "parents": [{"sha": "8eae5ed6cd11fe00ce2a9c5b97fd982ebe71a781", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eae5ed6cd11fe00ce2a9c5b97fd982ebe71a781", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8eae5ed6cd11fe00ce2a9c5b97fd982ebe71a781"}], "stats": {"total": 26, "additions": 11, "deletions": 15}, "files": [{"sha": "887123e290e3f3d252e711f232f7018dc86bbe60", "filename": "gcc/reload1.c", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02db8dd0e3f0938e080e82bae41a582b2cfc16e8/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02db8dd0e3f0938e080e82bae41a582b2cfc16e8/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=02db8dd0e3f0938e080e82bae41a582b2cfc16e8", "patch": "@@ -2349,13 +2349,13 @@ alter_reg (i, from_reg)\n \t  /* No known place to spill from => no slot to reuse.  */\n \t  x = assign_stack_local (GET_MODE (regno_reg_rtx[i]), total_size, -1);\n \t  if (BYTES_BIG_ENDIAN)\n-\t    {\n-\t      /* Cancel the  big-endian correction done in assign_stack_local.\n-\t\t Get the address of the beginning of the slot.\n-\t\t This is so we can do a big-endian correction unconditionally\n-\t\t below.  */\n-\t      adjust = inherent_size - total_size;\n-\t    }\n+\t    /* Cancel the  big-endian correction done in assign_stack_local.\n+\t       Get the address of the beginning of the slot.\n+\t       This is so we can do a big-endian correction unconditionally\n+\t       below.  */\n+\t    adjust = inherent_size - total_size;\n+\n+\t  RTX_UNCHANGING_P (x) = RTX_UNCHANGING_P (regno_reg_rtx[i]);\n \t}\n       /* Reuse a stack slot if possible.  */\n       else if (spill_stack_slot[from_reg] != 0\n@@ -2389,14 +2389,10 @@ alter_reg (i, from_reg)\n \t\t below.  */\n \t      adjust = GET_MODE_SIZE (mode) - total_size;\n \t      if (adjust)\n-\t\t{\n-\t\t  stack_slot = gen_rtx (MEM, mode_for_size (total_size\n-\t\t\t\t\t\t\t    * BITS_PER_UNIT,\n-\t\t\t\t\t\t\t    MODE_INT, 1),\n-\t\t\t\t\tplus_constant (XEXP (x, 0), adjust));\n-\t\t  RTX_UNCHANGING_P (stack_slot)\n-\t\t    = RTX_UNCHANGING_P (regno_reg_rtx[i]);\n-\t\t}\n+\t\tstack_slot = gen_rtx (MEM, mode_for_size (total_size\n+\t\t\t\t\t\t\t  * BITS_PER_UNIT,\n+\t\t\t\t\t\t\t  MODE_INT, 1),\n+\t\t\t\t      plus_constant (XEXP (x, 0), adjust));\n \t    }\n \t  spill_stack_slot[from_reg] = stack_slot;\n \t  spill_stack_slot_width[from_reg] = total_size;"}]}