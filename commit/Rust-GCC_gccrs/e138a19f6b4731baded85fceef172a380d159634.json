{"sha": "e138a19f6b4731baded85fceef172a380d159634", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTEzOGExOWY2YjQ3MzFiYWRlZDg1ZmNlZWYxNzJhMzgwZDE1OTYzNA==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2005-06-24T23:09:47Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2005-06-24T23:09:47Z"}, "message": "re PR fortran/21915 ([4.0 only] Would like atanh etc. as intrinsics)\n\n2005-06-24  Jerry DeLisle <jvdelisle@verizon.net>\n\n    PR libfortran/21915\n    * intrinsics/hyper.c: New file, adds wrapper functions\n\nFrom-SVN: r101303", "tree": {"sha": "e416cbfafea6eff078339a5402a6af4e0b5549e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e416cbfafea6eff078339a5402a6af4e0b5549e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e138a19f6b4731baded85fceef172a380d159634", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e138a19f6b4731baded85fceef172a380d159634", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e138a19f6b4731baded85fceef172a380d159634", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e138a19f6b4731baded85fceef172a380d159634/comments", "author": null, "committer": null, "parents": [{"sha": "f02d008e26acc1915ff7bf12e833979704751c43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f02d008e26acc1915ff7bf12e833979704751c43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f02d008e26acc1915ff7bf12e833979704751c43"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "6b88ba12f83f7f773f8ea4c4ad6f4a997f5a68b7", "filename": "libgfortran/intrinsics/hyper.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e138a19f6b4731baded85fceef172a380d159634/libgfortran%2Fintrinsics%2Fhyper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e138a19f6b4731baded85fceef172a380d159634/libgfortran%2Fintrinsics%2Fhyper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fhyper.c?ref=e138a19f6b4731baded85fceef172a380d159634", "patch": "@@ -0,0 +1,56 @@\n+/* Wrapper for systems without the C99 acosh(), asinh(), and atanh() functions\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include <math.h>\n+#include \"libgfortran.h\"\n+\n+#if HAVE_ACOSH && !HAVE_ACOSHF\n+float\n+acoshf (float x)\n+{\n+  return (float) acosh ((double) x);\n+}\n+#endif\n+\n+#if HAVE_ASINH && !HAVE_ASINHF\n+float\n+asinhf (float x)\n+{\n+  return (float) asinh ((double) x);\n+}\n+#endif\n+\n+#if HAVE_ATANH && !HAVE_ATANHF\n+float\n+atanhf (float x)\n+{\n+  return (float) atanh ((double) x);\n+}\n+#endif"}]}