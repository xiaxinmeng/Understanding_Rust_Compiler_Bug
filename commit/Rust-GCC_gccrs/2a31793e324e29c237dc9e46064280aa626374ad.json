{"sha": "2a31793e324e29c237dc9e46064280aa626374ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmEzMTc5M2UzMjRlMjljMjM3ZGM5ZTQ2MDY0MjgwYWE2MjYzNzRhZA==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2009-10-22T19:46:26Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2009-10-22T19:46:26Z"}, "message": "m32c.c (m32c_function_value_regno_p): New function.\n\n\t* config/m32c/m32c.c (m32c_function_value_regno_p): New function.\n\t(m32c_function_value): Make static, add new 'outgoing' argument.\n\t(m32c_libcall_value): Make static, add new 'fun' argument.\n\t(TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE): Declare.\n\t* config/m32c/m32c.h: (FUNCTION_VALUE, LIBCALL_VALUE): Remove.\n\t(FUNCTION_VALUE_REGNO_P): Redefine, use m32c_function_value_regno_p.\n\t* config/m32c/m32c-protos.h (m32c_function_value_regno_p): Declare.\n\t(m32c_function_value, m32c_libcall_value): Delete declaration.\n\nFrom-SVN: r153473", "tree": {"sha": "7115e883ca22b8fd5c248329b20c3d08a3703a2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7115e883ca22b8fd5c248329b20c3d08a3703a2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a31793e324e29c237dc9e46064280aa626374ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a31793e324e29c237dc9e46064280aa626374ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a31793e324e29c237dc9e46064280aa626374ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a31793e324e29c237dc9e46064280aa626374ad/comments", "author": null, "committer": null, "parents": [{"sha": "062eee1eb05a3387cebe8c9f9a6ecd359b15dec5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/062eee1eb05a3387cebe8c9f9a6ecd359b15dec5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/062eee1eb05a3387cebe8c9f9a6ecd359b15dec5"}], "stats": {"total": 54, "additions": 41, "deletions": 13}, "files": [{"sha": "002a22a293eb7805450337688209c74e246308c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31793e324e29c237dc9e46064280aa626374ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31793e324e29c237dc9e46064280aa626374ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a31793e324e29c237dc9e46064280aa626374ad", "patch": "@@ -1,3 +1,14 @@\n+2009-10-22  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/m32c/m32c.c (m32c_function_value_regno_p): New function.\n+\t(m32c_function_value): Make static, add new 'outgoing' argument.\n+\t(m32c_libcall_value): Make static, add new 'fun' argument.\n+\t(TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE): Declare.\n+\t* config/m32c/m32c.h: (FUNCTION_VALUE, LIBCALL_VALUE): Remove.\n+\t(FUNCTION_VALUE_REGNO_P): Redefine, use m32c_function_value_regno_p.\n+\t* config/m32c/m32c-protos.h (m32c_function_value_regno_p): Declare.\n+\t(m32c_function_value, m32c_libcall_value): Delete declaration.\n+\n 2009-10-22  Diego Novillo  <dnovillo@google.com>\n \n \t* Makefile.in (PLUGIN_HEADERS): Add output.h and"}, {"sha": "42b92feb506b0b7daa092f171c609299b3c24f13", "filename": "gcc/config/m32c/m32c-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31793e324e29c237dc9e46064280aa626374ad/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31793e324e29c237dc9e46064280aa626374ad/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h?ref=2a31793e324e29c237dc9e46064280aa626374ad", "patch": "@@ -49,7 +49,6 @@ int  m32c_trampoline_size (void);\n #if defined(RTX_CODE) && defined(TREE_CODE)\n \n rtx  m32c_function_arg (CUMULATIVE_ARGS *, MM, tree, int);\n-rtx  m32c_function_value (const_tree, const_tree);\n \n #endif\n \n@@ -75,7 +74,7 @@ bool m32c_immd_dbl_mov (rtx *, MM);\n rtx  m32c_incoming_return_addr_rtx (void);\n int  m32c_legitimate_constant_p (rtx);\n int  m32c_legitimize_reload_address (rtx *, MM, int, int, int);\n-rtx  m32c_libcall_value (MM);\n+bool m32c_function_value_regno_p (const unsigned int);\n int  m32c_limit_reload_class (MM, int);\n int  m32c_memory_move_cost (MM, int, int);\n int  m32c_modes_tieable_p (MM, MM);"}, {"sha": "1085aa7c25afd7e7b7a3874e65d757a146179e93", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31793e324e29c237dc9e46064280aa626374ad/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31793e324e29c237dc9e46064280aa626374ad/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=2a31793e324e29c237dc9e46064280aa626374ad", "patch": "@@ -81,6 +81,9 @@ static bool m32c_strict_argument_naming (CUMULATIVE_ARGS *);\n static rtx m32c_struct_value_rtx (tree, int);\n static rtx m32c_subreg (enum machine_mode, rtx, enum machine_mode, int);\n static int need_to_save (int);\n+static rtx m32c_function_value (const_tree, const_tree, bool);\n+static rtx m32c_libcall_value (enum machine_mode, const_rtx);\n+\n int current_function_special_page_vector (rtx);\n \n #define SYMBOL_FLAG_FUNCVEC_FUNCTION    (SYMBOL_FLAG_MACH_DEP << 0)\n@@ -1591,15 +1594,19 @@ m32c_valid_pointer_mode (enum machine_mode mode)\n \n /* How Scalar Function Values Are Returned */\n \n-/* Implements LIBCALL_VALUE.  Most values are returned in $r0, or some\n+/* Implements TARGET_LIBCALL_VALUE.  Most values are returned in $r0, or some\n    combination of registers starting there (r2r0 for longs, r3r1r2r0\n    for long long, r3r2r1r0 for doubles), except that that ABI\n    currently doesn't work because it ends up using all available\n    general registers and gcc often can't compile it.  So, instead, we\n    return anything bigger than 16 bits in \"mem0\" (effectively, a\n    memory location).  */\n-rtx\n-m32c_libcall_value (enum machine_mode mode)\n+\n+#undef TARGET_LIBCALL_VALUE\n+#define TARGET_LIBCALL_VALUE m32c_libcall_value\n+\n+static rtx\n+m32c_libcall_value (enum machine_mode mode, const_rtx fun ATTRIBUTE_UNUSED)\n {\n   /* return reg or parallel */\n #if 0\n@@ -1649,14 +1656,28 @@ m32c_libcall_value (enum machine_mode mode)\n   return gen_rtx_REG (mode, R0_REGNO);\n }\n \n-/* Implements FUNCTION_VALUE.  Functions and libcalls have the same\n+/* Implements TARGET_FUNCTION_VALUE.  Functions and libcalls have the same\n    conventions.  */\n-rtx\n-m32c_function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED)\n+\n+#undef TARGET_FUNCTION_VALUE\n+#define TARGET_FUNCTION_VALUE m32c_function_value\n+\n+static rtx\n+m32c_function_value (const_tree valtype,\n+\t\t     const_tree fn_decl_or_type ATTRIBUTE_UNUSED,\n+\t\t     bool outgoing ATTRIBUTE_UNUSED)\n {\n   /* return reg or parallel */\n   const enum machine_mode mode = TYPE_MODE (valtype);\n-  return m32c_libcall_value (mode);\n+  return m32c_libcall_value (mode, NULL_RTX);\n+}\n+\n+/* Implements FUNCTION_VALUE_REGNO_P.  */\n+\n+bool\n+m32c_function_value_regno_p (const unsigned int regno)\n+{\n+  return (regno == R0_REGNO || regno == MEM0_REGNO);\n }\n \n /* How Large Values Are Returned */"}, {"sha": "c0914d3be02b8c9a1760b3ae6443638529123071", "filename": "gcc/config/m32c/m32c.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a31793e324e29c237dc9e46064280aa626374ad/gcc%2Fconfig%2Fm32c%2Fm32c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a31793e324e29c237dc9e46064280aa626374ad/gcc%2Fconfig%2Fm32c%2Fm32c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.h?ref=2a31793e324e29c237dc9e46064280aa626374ad", "patch": "@@ -533,10 +533,7 @@ typedef struct m32c_cumulative_args\n \n /* How Scalar Function Values Are Returned */\n \n-#define FUNCTION_VALUE(VT,F) m32c_function_value (VT, F)\n-#define LIBCALL_VALUE(MODE) m32c_libcall_value (MODE)\n-\n-#define FUNCTION_VALUE_REGNO_P(r) ((r) == R0_REGNO || (r) == MEM0_REGNO)\n+#define FUNCTION_VALUE_REGNO_P(r) m32c_function_value_regno_p (r)\n \n /* How Large Values Are Returned */\n "}]}