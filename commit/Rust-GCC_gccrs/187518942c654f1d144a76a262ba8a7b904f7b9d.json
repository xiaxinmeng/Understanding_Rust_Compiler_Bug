{"sha": "187518942c654f1d144a76a262ba8a7b904f7b9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg3NTE4OTQyYzY1NGYxZDE0NGE3NmEyNjJiYThhN2I5MDRmN2I5ZA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2014-11-13T10:51:58Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2014-11-13T10:51:58Z"}, "message": "Run pass_expand_omp_ssa after pass_paralellize_loops\n\n2014-11-13  Tom de Vries  <tom@codesourcery.com>\n\n\t* omp-low.c (pass_data_expand_omp): Set properties_provided to\n\tPROP_gimple_eomp.\n\t(pass_expand_omp::gate): Remove function.  Move gate expression to ...\n\t(pass_expand_omp::execute): ... here, as new variable gate.  Add early\n\texit if gate is false.\n\t(pass_data pass_data_expand_omp_ssa): New pass_data.\n\t(class pass_expand_omp_ssa): New pass.\n\t(make_pass_expand_omp_ssa): New function.\n\t* passes.def (pass_parallelize_loops): Use PUSH_INSERT_PASSES_WITHIN\n\tinstead of NEXT_PASS.\n\t(pass_expand_omp_ssa): Add after pass_parallelize_loops.\n\t* tree-parloops.c (gen_parallel_loop): Remove call to omp_expand_local.\n\t(pass_parallelize_loops::execute): Don't do cleanups TODO_cleanup_cfg\n\tand TODO_rebuild_alias yet.  Add TODO_update_ssa.  Set\n\tcfun->omp_expand_needed.\n\t* tree-pass.h: Add define PROP_gimple_eomp.\n\t(make_pass_expand_omp_ssa): Declare.\n\nFrom-SVN: r217474", "tree": {"sha": "3873e81fede18285707d2a798b557f5b571b0ea0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3873e81fede18285707d2a798b557f5b571b0ea0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/187518942c654f1d144a76a262ba8a7b904f7b9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/187518942c654f1d144a76a262ba8a7b904f7b9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/187518942c654f1d144a76a262ba8a7b904f7b9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/187518942c654f1d144a76a262ba8a7b904f7b9d/comments", "author": null, "committer": null, "parents": [{"sha": "d82f1e13053446d0b0fd8e8e3b26f5d7e579bfd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d82f1e13053446d0b0fd8e8e3b26f5d7e579bfd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d82f1e13053446d0b0fd8e8e3b26f5d7e579bfd7"}], "stats": {"total": 99, "additions": 82, "deletions": 17}, "files": [{"sha": "f0ecfdde5b5045fab136b4490a719e2708a924c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/187518942c654f1d144a76a262ba8a7b904f7b9d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/187518942c654f1d144a76a262ba8a7b904f7b9d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=187518942c654f1d144a76a262ba8a7b904f7b9d", "patch": "@@ -1,3 +1,23 @@\n+2014-11-13  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* omp-low.c (pass_data_expand_omp): Set properties_provided to\n+\tPROP_gimple_eomp.\n+\t(pass_expand_omp::gate): Remove function.  Move gate expression to ...\n+\t(pass_expand_omp::execute): ... here, as new variable gate.  Add early\n+\texit if gate is false.\n+\t(pass_data pass_data_expand_omp_ssa): New pass_data.\n+\t(class pass_expand_omp_ssa): New pass.\n+\t(make_pass_expand_omp_ssa): New function.\n+\t* passes.def (pass_parallelize_loops): Use PUSH_INSERT_PASSES_WITHIN\n+\tinstead of NEXT_PASS.\n+\t(pass_expand_omp_ssa): Add after pass_parallelize_loops.\n+\t* tree-parloops.c (gen_parallel_loop): Remove call to omp_expand_local.\n+\t(pass_parallelize_loops::execute): Don't do cleanups TODO_cleanup_cfg\n+\tand TODO_rebuild_alias yet.  Add TODO_update_ssa.  Set\n+\tcfun->omp_expand_needed.\n+\t* tree-pass.h: Add define PROP_gimple_eomp.\n+\t(make_pass_expand_omp_ssa): Declare.\n+\n 2014-11-13  Marek Polacek  <polacek@redhat.com>\n \n \t* tree.h (TYPE_OVERFLOW_SANITIZED): Define."}, {"sha": "e7d8a7e916e6e408a237097a019269b98b4061ab", "filename": "gcc/omp-low.c", "status": "modified", "additions": 50, "deletions": 6, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/187518942c654f1d144a76a262ba8a7b904f7b9d/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/187518942c654f1d144a76a262ba8a7b904f7b9d/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=187518942c654f1d144a76a262ba8a7b904f7b9d", "patch": "@@ -8801,7 +8801,7 @@ const pass_data pass_data_expand_omp =\n   OPTGROUP_NONE, /* optinfo_flags */\n   TV_NONE, /* tv_id */\n   PROP_gimple_any, /* properties_required */\n-  0, /* properties_provided */\n+  PROP_gimple_eomp, /* properties_provided */\n   0, /* properties_destroyed */\n   0, /* todo_flags_start */\n   0, /* todo_flags_finish */\n@@ -8815,13 +8815,18 @@ class pass_expand_omp : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  virtual unsigned int execute (function *)\n     {\n-      return ((flag_openmp != 0 || flag_openmp_simd != 0\n-\t       || flag_cilkplus != 0) && !seen_error ());\n-    }\n+      bool gate = ((flag_openmp != 0 || flag_openmp_simd != 0\n+\t\t    || flag_cilkplus != 0) && !seen_error ());\n \n-  virtual unsigned int execute (function *) { return execute_expand_omp (); }\n+      /* This pass always runs, to provide PROP_gimple_eomp.\n+\t But there is nothing to do unless -fopenmp is given.  */\n+      if (!gate)\n+\treturn 0;\n+\n+      return execute_expand_omp ();\n+    }\n \n }; // class pass_expand_omp\n \n@@ -8832,6 +8837,45 @@ make_pass_expand_omp (gcc::context *ctxt)\n {\n   return new pass_expand_omp (ctxt);\n }\n+\n+namespace {\n+\n+const pass_data pass_data_expand_omp_ssa =\n+{\n+  GIMPLE_PASS, /* type */\n+  \"ompexpssa\", /* name */\n+  OPTGROUP_NONE, /* optinfo_flags */\n+  TV_NONE, /* tv_id */\n+  PROP_cfg | PROP_ssa, /* properties_required */\n+  PROP_gimple_eomp, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  TODO_cleanup_cfg | TODO_rebuild_alias, /* todo_flags_finish */\n+};\n+\n+class pass_expand_omp_ssa : public gimple_opt_pass\n+{\n+public:\n+  pass_expand_omp_ssa (gcc::context *ctxt)\n+    : gimple_opt_pass (pass_data_expand_omp_ssa, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  virtual bool gate (function *fun)\n+    {\n+      return !(fun->curr_properties & PROP_gimple_eomp);\n+    }\n+  virtual unsigned int execute (function *) { return execute_expand_omp (); }\n+\n+}; // class pass_expand_omp_ssa\n+\n+} // anon namespace\n+\n+gimple_opt_pass *\n+make_pass_expand_omp_ssa (gcc::context *ctxt)\n+{\n+  return new pass_expand_omp_ssa (ctxt);\n+}\n \f\n /* Routines to lower OpenMP directives into OMP-GIMPLE.  */\n "}, {"sha": "ebd2b9547cee8dea90e68f64d55fdfa4fe36c6e1", "filename": "gcc/passes.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/187518942c654f1d144a76a262ba8a7b904f7b9d/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/187518942c654f1d144a76a262ba8a7b904f7b9d/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=187518942c654f1d144a76a262ba8a7b904f7b9d", "patch": "@@ -241,6 +241,9 @@ along with GCC; see the file COPYING3.  If not see\n \t  POP_INSERT_PASSES ()\n \t  NEXT_PASS (pass_iv_canon);\n \t  NEXT_PASS (pass_parallelize_loops);\n+\t  PUSH_INSERT_PASSES_WITHIN (pass_parallelize_loops)\n+\t      NEXT_PASS (pass_expand_omp_ssa);\n+\t  POP_INSERT_PASSES ()\n \t  NEXT_PASS (pass_if_conversion);\n \t  /* pass_vectorize must immediately follow pass_if_conversion.\n \t     Please do not add any other passes in between.  */"}, {"sha": "e5dca78082cfe0756cffdf8a8197aec2a851c79d", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/187518942c654f1d144a76a262ba8a7b904f7b9d/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/187518942c654f1d144a76a262ba8a7b904f7b9d/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=187518942c654f1d144a76a262ba8a7b904f7b9d", "patch": "@@ -1753,7 +1753,6 @@ gen_parallel_loop (struct loop *loop,\n   tree many_iterations_cond, type, nit;\n   tree arg_struct, new_arg_struct;\n   gimple_seq stmts;\n-  basic_block parallel_head;\n   edge entry, exit;\n   struct clsn_data clsn_data;\n   unsigned prob;\n@@ -1891,8 +1890,8 @@ gen_parallel_loop (struct loop *loop,\n   cond_stmt = last_stmt (loop->header);\n   if (cond_stmt)\n     loc = gimple_location (cond_stmt);\n-  parallel_head = create_parallel_loop (loop, create_loop_fn (loc), arg_struct,\n-\t\t\t\t\tnew_arg_struct, n_threads, loc);\n+  create_parallel_loop (loop, create_loop_fn (loc), arg_struct,\n+\t\t\tnew_arg_struct, n_threads, loc);\n   if (reduction_list->elements () > 0)\n     create_call_for_reduction (loop, reduction_list, &clsn_data);\n \n@@ -1906,13 +1905,6 @@ gen_parallel_loop (struct loop *loop,\n      removed statements.  */\n   FOR_EACH_LOOP (loop, 0)\n     free_numbers_of_iterations_estimates_loop (loop);\n-\n-  /* Expand the parallel constructs.  We do it directly here instead of running\n-     a separate expand_omp pass, since it is more efficient, and less likely to\n-     cause troubles with further analyses not being able to deal with the\n-     OMP trees.  */\n-\n-  omp_expand_local (parallel_head);\n }\n \n /* Returns true when LOOP contains vector phi nodes.  */\n@@ -2284,7 +2276,11 @@ pass_parallelize_loops::execute (function *fun)\n     return 0;\n \n   if (parallelize_loops ())\n-    return TODO_cleanup_cfg | TODO_rebuild_alias;\n+    {\n+      fun->curr_properties &= ~(PROP_gimple_eomp);\n+      return TODO_update_ssa;\n+    }\n+\n   return 0;\n }\n "}, {"sha": "25ff364a1ad159523c136a755c1759654af62c60", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/187518942c654f1d144a76a262ba8a7b904f7b9d/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/187518942c654f1d144a76a262ba8a7b904f7b9d/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=187518942c654f1d144a76a262ba8a7b904f7b9d", "patch": "@@ -220,6 +220,7 @@ class simple_ipa_opt_pass : public opt_pass\n #define PROP_gimple_lcx\t\t(1 << 10)       /* lowered complex */\n #define PROP_loops\t\t(1 << 11)\t/* preserve loop structures */\n #define PROP_gimple_lvec\t(1 << 12)       /* lowered vector */\n+#define PROP_gimple_eomp\t(1 << 13)       /* no OpenMP directives */\n \n #define PROP_trees \\\n   (PROP_gimple_any | PROP_gimple_lcf | PROP_gimple_leh | PROP_gimple_lomp)\n@@ -399,6 +400,7 @@ extern gimple_opt_pass *make_pass_lower_vector_ssa (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_lower_omp (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_diagnose_omp_blocks (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_expand_omp (gcc::context *ctxt);\n+extern gimple_opt_pass *make_pass_expand_omp_ssa (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_object_sizes (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_strlen (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_fold_builtins (gcc::context *ctxt);"}]}