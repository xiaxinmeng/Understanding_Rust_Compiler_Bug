{"sha": "1985767d6517bd8daa0625f3923e24f0861f68b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk4NTc2N2Q2NTE3YmQ4ZGFhMDYyNWYzOTIzZTI0ZjA4NjFmNjhiOA==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-06-11T09:19:40Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-06-11T09:19:40Z"}, "message": "[Ada] Minor reformatting\n\n2018-06-11  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch9.adb, exp_unst.adb, inline.adb, libgnat/a-ciorma.adb,\n\tlibgnat/a-ciormu.adb, libgnat/a-ciorse.adb, libgnat/a-coorma.adb,\n\tlibgnat/a-coormu.adb, libgnat/a-coorse.adb, sem_prag.adb: Minor\n\treformatting.\n\nFrom-SVN: r261429", "tree": {"sha": "972a5ecf16839a0193530c3bec5cef7a05c52b83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/972a5ecf16839a0193530c3bec5cef7a05c52b83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1985767d6517bd8daa0625f3923e24f0861f68b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1985767d6517bd8daa0625f3923e24f0861f68b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1985767d6517bd8daa0625f3923e24f0861f68b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1985767d6517bd8daa0625f3923e24f0861f68b8/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed6a6b4ea977ba93f66357de7c725d0c17ac3792", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed6a6b4ea977ba93f66357de7c725d0c17ac3792", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed6a6b4ea977ba93f66357de7c725d0c17ac3792"}], "stats": {"total": 153, "additions": 84, "deletions": 69}, "files": [{"sha": "bb72af025e300dcc709b70f5168b8de913d116c1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1985767d6517bd8daa0625f3923e24f0861f68b8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1985767d6517bd8daa0625f3923e24f0861f68b8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1985767d6517bd8daa0625f3923e24f0861f68b8", "patch": "@@ -1,3 +1,10 @@\n+2018-06-11  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch9.adb, exp_unst.adb, inline.adb, libgnat/a-ciorma.adb,\n+\tlibgnat/a-ciormu.adb, libgnat/a-ciorse.adb, libgnat/a-coorma.adb,\n+\tlibgnat/a-coormu.adb, libgnat/a-coorse.adb, sem_prag.adb: Minor\n+\treformatting.\n+\n 2018-06-11  Gary Dismukes  <dismukes@adacore.com>\n \n \t* exp_unst.ads, exp_unst.adb: Typo fixes and minor reformatting."}, {"sha": "ea03fe219a9dcea8725f8341c4536119516f4e6a", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1985767d6517bd8daa0625f3923e24f0861f68b8/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1985767d6517bd8daa0625f3923e24f0861f68b8/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=1985767d6517bd8daa0625f3923e24f0861f68b8", "patch": "@@ -8653,8 +8653,9 @@ package body Exp_Ch9 is\n             when N_Implicit_Label_Declaration =>\n                null;\n \n-            when N_Call_Marker     |\n-                 N_Itype_Reference =>\n+            when N_Call_Marker\n+               | N_Itype_Reference\n+            =>\n                New_Op_Body := New_Copy (Op_Body);\n                Insert_After (Current_Node, New_Op_Body);\n                Current_Node := New_Op_Body;"}, {"sha": "1ac96364345ca8f465fdad6ef11aa12d63761be8", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 43, "deletions": 42, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1985767d6517bd8daa0625f3923e24f0861f68b8/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1985767d6517bd8daa0625f3923e24f0861f68b8/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=1985767d6517bd8daa0625f3923e24f0861f68b8", "patch": "@@ -99,14 +99,9 @@ package body Exp_Unst is\n    --  table already contains this entry and if so it has no effect.\n \n    ----------------------------------\n-   -- subprograms for fat pointers --\n+   -- Subprograms For Fat Pointers --\n    ----------------------------------\n \n-   function Needs_Fat_Pointer (E : Entity_Id) return Boolean;\n-   --  A formal parameter of an unconstrained array type that appears in\n-   --  an uplevel reference requires the construction of an access type,\n-   --  to be used in the corresponding component declaration.\n-\n    function Build_Access_Type_Decl\n      (E    : Entity_Id;\n       Scop : Entity_Id) return Node_Id;\n@@ -115,6 +110,11 @@ package body Exp_Unst is\n    --  record component. The relevant attributes of the access type are\n    --  set here to avoid a full analysis that would require a scope stack.\n \n+   function Needs_Fat_Pointer (E : Entity_Id) return Boolean;\n+   --  A formal parameter of an unconstrained array type that appears in an\n+   --  uplevel reference requires the construction of an access type, to be\n+   --  used in the corresponding component declaration.\n+\n    -----------\n    -- Urefs --\n    -----------\n@@ -169,17 +169,6 @@ package body Exp_Unst is\n       Calls.Append (Call);\n    end Append_Unique_Call;\n \n-   -----------------------\n-   -- Needs_Fat_Pointer --\n-   -----------------------\n-\n-   function Needs_Fat_Pointer (E : Entity_Id) return Boolean is\n-   begin\n-      return Is_Formal (E)\n-        and then Is_Array_Type (Etype (E))\n-        and then not Is_Constrained (Etype (E));\n-   end Needs_Fat_Pointer;\n-\n    -----------------------------\n    --  Build_Access_Type_Decl --\n    -----------------------------\n@@ -188,9 +177,8 @@ package body Exp_Unst is\n      (E    : Entity_Id;\n       Scop : Entity_Id) return Node_Id\n    is\n-      Loc  : constant Source_Ptr := Sloc (E);\n-      Decl : Node_Id;\n-      Typ  : Entity_Id;\n+      Loc : constant Source_Ptr := Sloc (E);\n+      Typ : Entity_Id;\n \n    begin\n       Typ := Make_Temporary (Loc, 'S');\n@@ -199,12 +187,12 @@ package body Exp_Unst is\n       Set_Scope (Typ, Scop);\n       Set_Directly_Designated_Type (Typ, Etype (E));\n \n-      Decl := Make_Full_Type_Declaration (Loc,\n-        Defining_Identifier => Typ,\n-        Type_Definition => Make_Access_To_Object_Definition (Loc,\n-         Subtype_Indication => New_Occurrence_Of (Etype (E), Loc)));\n-\n-      return Decl;\n+      return\n+        Make_Full_Type_Declaration (Loc,\n+          Defining_Identifier => Typ,\n+          Type_Definition     =>\n+            Make_Access_To_Object_Definition (Loc,\n+              Subtype_Indication => New_Occurrence_Of (Etype (E), Loc)));\n    end Build_Access_Type_Decl;\n \n    ---------------\n@@ -247,6 +235,17 @@ package body Exp_Unst is\n       return False;\n    end In_Synchronized_Unit;\n \n+   -----------------------\n+   -- Needs_Fat_Pointer --\n+   -----------------------\n+\n+   function Needs_Fat_Pointer (E : Entity_Id) return Boolean is\n+   begin\n+      return Is_Formal (E)\n+        and then Is_Array_Type (Etype (E))\n+        and then not Is_Constrained (Etype (E));\n+   end Needs_Fat_Pointer;\n+\n    ----------------\n    -- Subp_Index --\n    ----------------\n@@ -815,7 +814,7 @@ package body Exp_Unst is\n                   --  handled as an entity reference.\n \n                   if Nkind (N) = N_Allocator\n-                     and then Nkind (Expression (N)) = N_Qualified_Expression\n+                    and then Nkind (Expression (N)) = N_Qualified_Expression\n                   then\n                      declare\n                         DT : Boolean := False;\n@@ -1559,22 +1558,23 @@ package body Exp_Unst is\n                   --  Local declarations for one such subprogram\n \n                   declare\n-                     Loc   : constant Source_Ptr := Sloc (STJ.Bod);\n+                     Loc : constant Source_Ptr := Sloc (STJ.Bod);\n+\n+                     Decls : constant List_Id := New_List;\n+                     --  List of new declarations we create\n+\n                      Clist : List_Id;\n                      Comp  : Entity_Id;\n \n+                     Decl_Assign : Node_Id;\n+                     --  Assigment to set uplink, Empty if none\n+\n                      Decl_ARECnT  : Node_Id;\n                      Decl_ARECnPT : Node_Id;\n                      Decl_ARECn   : Node_Id;\n                      Decl_ARECnP  : Node_Id;\n                      --  Declaration nodes for the AREC entities we build\n \n-                     Decl_Assign : Node_Id;\n-                     --  Assigment to set uplink, Empty if none\n-\n-                     Decls : constant List_Id := New_List;\n-                     --  List of new declarations we create\n-\n                   begin\n                      --  Build list of component declarations for ARECnT\n \n@@ -1647,7 +1647,7 @@ package body Exp_Unst is\n                                          Subtype_Indication =>\n                                            New_Occurrence_Of\n                                              (Defining_Identifier (Ptr_Decl),\n-                                               Loc))));\n+                                              Loc))));\n                               else\n                                  Append_To (Clist,\n                                    Make_Component_Declaration (Loc,\n@@ -1711,7 +1711,7 @@ package body Exp_Unst is\n                            New_Occurrence_Of (STJ.ARECnPT, Loc),\n                          Expression          =>\n                            Make_Attribute_Reference (Loc,\n-                             Prefix           =>\n+                             Prefix         =>\n                                New_Occurrence_Of (STJ.ARECn, Loc),\n                              Attribute_Name => Name_Access));\n                      Append_To (Decls, Decl_ARECnP);\n@@ -1786,16 +1786,17 @@ package body Exp_Unst is\n                                  Loc : constant Source_Ptr := Sloc (Ent);\n                                  Dec : constant Node_Id    :=\n                                          Declaration_Node (Ent);\n-                                 Ins  : Node_Id;\n+\n                                  Asn  : Node_Id;\n                                  Attr : Name_Id;\n+                                 Ins  : Node_Id;\n \n                               begin\n                                  --  For parameters, we insert the assignment\n                                  --  right after the declaration of ARECnP.\n                                  --  For all other entities, we insert\n-                                 --  the assignment immediately after\n-                                 --  the declaration of the entity.\n+                                 --  the assignment immediately after the\n+                                 --  declaration of the entity.\n \n                                  --  Note: we don't need to mark the entity\n                                  --  as being aliased, because the address\n@@ -2224,9 +2225,9 @@ package body Exp_Unst is\n             end;\n          end if;\n \n-         --  The proper body of a stub may contain nested subprograms,\n-         --  and therefore must be visited explicitly. Nested stubs are\n-         --  examined recursively in Visit_Node.\n+         --  The proper body of a stub may contain nested subprograms, and\n+         --  therefore must be visited explicitly. Nested stubs are examined\n+         --  recursively in Visit_Node.\n \n          if Nkind (N) in N_Body_Stub then\n             Do_Search (Library_Unit (N));"}, {"sha": "23de7a736514dde45965693ada1e368031e2f37f", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1985767d6517bd8daa0625f3923e24f0861f68b8/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1985767d6517bd8daa0625f3923e24f0861f68b8/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=1985767d6517bd8daa0625f3923e24f0861f68b8", "patch": "@@ -900,8 +900,8 @@ package body Inline is\n \n       function Uses_Secondary_Stack (Bod : Node_Id) return Boolean;\n       --  If the body of the subprogram includes a call that returns an\n-      --  unconstrained type, the secondary stack is involved, and it\n-      --  is not worth inlining.\n+      --  unconstrained type, the secondary stack is involved, and it is\n+      --  not worth inlining.\n \n       -------------------------\n       -- Has_Extended_Return --"}, {"sha": "d82476081477af198137b074307c3fafd520e91d", "filename": "gcc/ada/libgnat/a-ciorma.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1985767d6517bd8daa0625f3923e24f0861f68b8/gcc%2Fada%2Flibgnat%2Fa-ciorma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1985767d6517bd8daa0625f3923e24f0861f68b8/gcc%2Fada%2Flibgnat%2Fa-ciorma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ciorma.adb?ref=1985767d6517bd8daa0625f3923e24f0861f68b8", "patch": "@@ -541,9 +541,10 @@ package body Ada.Containers.Indefinite_Ordered_Maps is\n            \"Position cursor of function Element is bad\";\n       end if;\n \n-      if Checks and then\n-        (Left (Position.Node) = Position.Node\n-           or else Right (Position.Node) = Position.Node)\n+      if Checks\n+        and then (Left (Position.Node) = Position.Node\n+                   or else\n+                  Right (Position.Node) = Position.Node)\n       then\n          raise Program_Error with \"dangling cursor\";\n       end if;"}, {"sha": "0483f0a1f534fa484873c5eb5dbef3b3f573ecbe", "filename": "gcc/ada/libgnat/a-ciormu.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1985767d6517bd8daa0625f3923e24f0861f68b8/gcc%2Fada%2Flibgnat%2Fa-ciormu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1985767d6517bd8daa0625f3923e24f0861f68b8/gcc%2Fada%2Flibgnat%2Fa-ciormu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ciormu.adb?ref=1985767d6517bd8daa0625f3923e24f0861f68b8", "patch": "@@ -545,9 +545,10 @@ package body Ada.Containers.Indefinite_Ordered_Multisets is\n          raise Program_Error with \"Position cursor is bad\";\n       end if;\n \n-      if Checks and then\n-        (Left (Position.Node) = Position.Node\n-           or else Right (Position.Node) = Position.Node)\n+      if Checks\n+        and then (Left (Position.Node) = Position.Node\n+                   or else\n+                  Right (Position.Node) = Position.Node)\n       then\n          raise Program_Error with \"dangling cursor\";\n       end if;"}, {"sha": "7b541e3d9726a0010740d20a34fec1464b76e85b", "filename": "gcc/ada/libgnat/a-ciorse.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1985767d6517bd8daa0625f3923e24f0861f68b8/gcc%2Fada%2Flibgnat%2Fa-ciorse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1985767d6517bd8daa0625f3923e24f0861f68b8/gcc%2Fada%2Flibgnat%2Fa-ciorse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ciorse.adb?ref=1985767d6517bd8daa0625f3923e24f0861f68b8", "patch": "@@ -534,9 +534,10 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n          raise Program_Error with \"Position cursor is bad\";\n       end if;\n \n-      if Checks and then\n-        (Left (Position.Node) = Position.Node\n-           or else Right (Position.Node) = Position.Node)\n+      if Checks\n+        and then (Left (Position.Node) = Position.Node\n+                   or else\n+                  Right (Position.Node) = Position.Node)\n       then\n          raise Program_Error with \"dangling cursor\";\n       end if;"}, {"sha": "7ec507729cf9c643fb8cb348119ea5c23bfdc189", "filename": "gcc/ada/libgnat/a-coorma.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1985767d6517bd8daa0625f3923e24f0861f68b8/gcc%2Fada%2Flibgnat%2Fa-coorma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1985767d6517bd8daa0625f3923e24f0861f68b8/gcc%2Fada%2Flibgnat%2Fa-coorma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coorma.adb?ref=1985767d6517bd8daa0625f3923e24f0861f68b8", "patch": "@@ -481,9 +481,10 @@ package body Ada.Containers.Ordered_Maps is\n            \"Position cursor of function Element equals No_Element\";\n       end if;\n \n-      if Checks and then\n-        (Left (Position.Node) = Position.Node\n-           or else Right (Position.Node) = Position.Node)\n+      if Checks\n+        and then (Left (Position.Node) = Position.Node\n+                   or else\n+                  Right (Position.Node) = Position.Node)\n       then\n          raise Program_Error with \"dangling cursor\";\n       end if;"}, {"sha": "c5548bfd1be048a1fbecd5822cbd53783b4d891a", "filename": "gcc/ada/libgnat/a-coormu.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1985767d6517bd8daa0625f3923e24f0861f68b8/gcc%2Fada%2Flibgnat%2Fa-coormu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1985767d6517bd8daa0625f3923e24f0861f68b8/gcc%2Fada%2Flibgnat%2Fa-coormu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coormu.adb?ref=1985767d6517bd8daa0625f3923e24f0861f68b8", "patch": "@@ -502,9 +502,10 @@ package body Ada.Containers.Ordered_Multisets is\n          raise Constraint_Error with \"Position cursor equals No_Element\";\n       end if;\n \n-      if Checks and then\n-        (Left (Position.Node) = Position.Node\n-           or else Right (Position.Node) = Position.Node)\n+      if Checks\n+        and then (Left (Position.Node) = Position.Node\n+                   or else\n+                  Right (Position.Node) = Position.Node)\n       then\n          raise Program_Error with \"dangling cursor\";\n       end if;"}, {"sha": "2033effbce4043acbb6d8e97507791ebc51a7d13", "filename": "gcc/ada/libgnat/a-coorse.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1985767d6517bd8daa0625f3923e24f0861f68b8/gcc%2Fada%2Flibgnat%2Fa-coorse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1985767d6517bd8daa0625f3923e24f0861f68b8/gcc%2Fada%2Flibgnat%2Fa-coorse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coorse.adb?ref=1985767d6517bd8daa0625f3923e24f0861f68b8", "patch": "@@ -480,9 +480,10 @@ package body Ada.Containers.Ordered_Sets is\n          raise Constraint_Error with \"Position cursor equals No_Element\";\n       end if;\n \n-      if Checks and then\n-        (Left (Position.Node) = Position.Node\n-           or else Right (Position.Node) = Position.Node)\n+      if Checks\n+        and then (Left (Position.Node) = Position.Node\n+                   or else\n+                  Right (Position.Node) = Position.Node)\n       then\n          raise Program_Error with \"dangling cursor\";\n       end if;"}, {"sha": "a88b37de65d4cab77137b44110396762075f12fd", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1985767d6517bd8daa0625f3923e24f0861f68b8/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1985767d6517bd8daa0625f3923e24f0861f68b8/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=1985767d6517bd8daa0625f3923e24f0861f68b8", "patch": "@@ -2499,12 +2499,12 @@ package body Sem_Prag is\n                end if;\n \n                if (Is_Subprogram (Context)\n-                   or else Ekind (Context) = E_Task_Type\n-                   or else Is_Single_Task_Object (Context))\n+                     or else Ekind (Context) = E_Task_Type\n+                     or else Is_Single_Task_Object (Context))\n                  and then\n-                   (Present (Get_Pragma (Context, Pragma_Global))\n-                      or else\n-                    Present (Get_Pragma (Context, Pragma_Refined_Global)))\n+                  (Present (Get_Pragma (Context, Pragma_Global))\n+                     or else\n+                   Present (Get_Pragma (Context, Pragma_Refined_Global)))\n                then\n                   Collect_Subprogram_Inputs_Outputs\n                     (Subp_Id      => Context,"}]}