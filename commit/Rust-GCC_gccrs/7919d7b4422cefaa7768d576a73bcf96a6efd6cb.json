{"sha": "7919d7b4422cefaa7768d576a73bcf96a6efd6cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzkxOWQ3YjQ0MjJjZWZhYTc3NjhkNTc2YTczYmNmOTZhNmVmZDZjYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-08-26T04:35:17Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-08-26T04:35:17Z"}, "message": "call.c (build_conditional_expr): Fix logic errors.\n\n\t* call.c (build_conditional_expr): Fix logic errors.\n\t(build_new_op): Remove dead COND_EXPR handling.\n\nFrom-SVN: r151113", "tree": {"sha": "546ac29f25c2da9faf199e896449acc55bbcf658", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/546ac29f25c2da9faf199e896449acc55bbcf658"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7919d7b4422cefaa7768d576a73bcf96a6efd6cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7919d7b4422cefaa7768d576a73bcf96a6efd6cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7919d7b4422cefaa7768d576a73bcf96a6efd6cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7919d7b4422cefaa7768d576a73bcf96a6efd6cb/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "171fc18dd9e9fc5653711067b1c7061238348099", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/171fc18dd9e9fc5653711067b1c7061238348099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/171fc18dd9e9fc5653711067b1c7061238348099"}], "stats": {"total": 62, "additions": 33, "deletions": 29}, "files": [{"sha": "e7f45008f1386ae2e990411db50295ade01f8955", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7919d7b4422cefaa7768d576a73bcf96a6efd6cb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7919d7b4422cefaa7768d576a73bcf96a6efd6cb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7919d7b4422cefaa7768d576a73bcf96a6efd6cb", "patch": "@@ -1,3 +1,8 @@\n+2009-08-26  Jason Merrill  <jason@redhat.com>\n+\n+\t* call.c (build_conditional_expr): Fix logic errors.\n+\t(build_new_op): Remove dead COND_EXPR handling.\n+\n 2009-08-24  Jason Merrill  <jason@redhat.com>\n \n \t* cp-tree.h (DECL_DEFERRED_FN): Remove."}, {"sha": "8dc6d2ae31d24eb56acf9c27ab3441bde643d55c", "filename": "gcc/cp/call.c", "status": "modified", "additions": 9, "deletions": 29, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7919d7b4422cefaa7768d576a73bcf96a6efd6cb/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7919d7b4422cefaa7768d576a73bcf96a6efd6cb/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=7919d7b4422cefaa7768d576a73bcf96a6efd6cb", "patch": "@@ -3791,7 +3791,7 @@ build_conditional_expr (tree arg1, tree arg2, tree arg3,\n       bool any_viable_p;\n \n       /* Rearrange the arguments so that add_builtin_candidate only has\n-\t to know about two args.  In build_builtin_candidates, the\n+\t to know about two args.  In build_builtin_candidate, the\n \t arguments are unscrambled.  */\n       args[0] = arg2;\n       args[1] = arg3;\n@@ -3837,8 +3837,10 @@ build_conditional_expr (tree arg1, tree arg2, tree arg3,\n       arg1 = convert_like (conv, arg1, complain);\n       conv = cand->convs[1];\n       arg2 = convert_like (conv, arg2, complain);\n+      arg2_type = TREE_TYPE (arg2);\n       conv = cand->convs[2];\n       arg3 = convert_like (conv, arg3, complain);\n+      arg3_type = TREE_TYPE (arg3);\n     }\n \n   /* [expr.cond]\n@@ -3857,7 +3859,7 @@ build_conditional_expr (tree arg1, tree arg2, tree arg3,\n     arg2_type = TREE_TYPE (arg2);\n \n   arg3 = force_rvalue (arg3);\n-  if (!CLASS_TYPE_P (arg2_type))\n+  if (!CLASS_TYPE_P (arg3_type))\n     arg3_type = TREE_TYPE (arg3);\n \n   if (arg2 == error_mark_node || arg3 == error_mark_node)\n@@ -4157,14 +4159,8 @@ build_new_op (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3,\n   arg3 = prep_operand (arg3);\n \n   if (code == COND_EXPR)\n-    {\n-      if (arg2 == NULL_TREE\n-\t  || TREE_CODE (TREE_TYPE (arg2)) == VOID_TYPE\n-\t  || TREE_CODE (TREE_TYPE (arg3)) == VOID_TYPE\n-\t  || (! IS_OVERLOAD_TYPE (TREE_TYPE (arg2))\n-\t      && ! IS_OVERLOAD_TYPE (TREE_TYPE (arg3))))\n-\tgoto builtin;\n-    }\n+    /* Use build_conditional_expr instead.  */\n+    gcc_unreachable ();\n   else if (! IS_OVERLOAD_TYPE (TREE_TYPE (arg1))\n \t   && (! arg2 || ! IS_OVERLOAD_TYPE (TREE_TYPE (arg2))))\n     goto builtin;\n@@ -4206,22 +4202,9 @@ build_new_op (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3,\n \t\t\tflags, &candidates);\n     }\n \n-  /* Rearrange the arguments for ?: so that add_builtin_candidate only has\n-     to know about two args; a builtin candidate will always have a first\n-     parameter of type bool.  We'll handle that in\n-     build_builtin_candidate.  */\n-  if (code == COND_EXPR)\n-    {\n-      args[0] = arg2;\n-      args[1] = arg3;\n-      args[2] = arg1;\n-    }\n-  else\n-    {\n-      args[0] = arg1;\n-      args[1] = arg2;\n-      args[2] = NULL_TREE;\n-    }\n+  args[0] = arg1;\n+  args[1] = arg2;\n+  args[2] = NULL_TREE;\n \n   add_builtin_candidates (&candidates, code, code2, fnname, args, flags);\n \n@@ -4463,9 +4446,6 @@ build_new_op (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3,\n     case ARRAY_REF:\n       return build_array_ref (input_location, arg1, arg2);\n \n-    case COND_EXPR:\n-      return build_conditional_expr (arg1, arg2, arg3, complain);\n-\n     case MEMBER_REF:\n       return build_m_component_ref (cp_build_indirect_ref (arg1, NULL, \n                                                            complain), "}, {"sha": "d465ac203778a256d1732c5891488a5f622a4532", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7919d7b4422cefaa7768d576a73bcf96a6efd6cb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7919d7b4422cefaa7768d576a73bcf96a6efd6cb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7919d7b4422cefaa7768d576a73bcf96a6efd6cb", "patch": "@@ -1,3 +1,7 @@\n+2009-08-26  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/overload/cond2.C: New.\n+\n 2009-08-25  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* gcc.dg/torture/builtin-math-7.c: Add -mieee for sh*-*-* targets."}, {"sha": "cbcdc6ed038fc74b9d0b1972e8a819d04b27bd54", "filename": "gcc/testsuite/g++.dg/overload/cond2.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7919d7b4422cefaa7768d576a73bcf96a6efd6cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fcond2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7919d7b4422cefaa7768d576a73bcf96a6efd6cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fcond2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fcond2.C?ref=7919d7b4422cefaa7768d576a73bcf96a6efd6cb", "patch": "@@ -0,0 +1,15 @@\n+struct C\n+{\n+  operator int();\n+};\n+\n+struct D\n+{\n+  operator int();\n+};\n+\n+int main()\n+{\n+  C c; D d;\n+  true ? c : d;\n+}"}]}