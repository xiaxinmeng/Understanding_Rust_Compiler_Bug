{"sha": "a0367cc1accefe75740171915e77b6122b7c9e67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAzNjdjYzFhY2NlZmU3NTc0MDE3MTkxNWU3N2I2MTIyYjdjOWU2Nw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2012-02-15T21:42:00Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2012-02-15T21:42:00Z"}, "message": "re PR target/52199 (V2DI vec_duplicate ICE on valid code)\n\n[gcc]\n2012-02-15  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/52199\n\t* config/rs6000/rs6000.c (rs6000_expand_vector_init): Use\n\tforce_reg instead of copy_to_reg for better optimization.  Force\n\tnon-register or memory operands into a register.\n\n[gcc/testsuite]\n2012-02-15  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/52199\n\t* gcc.target/powerpc/pr52199.c: New file.\n\nFrom-SVN: r184287", "tree": {"sha": "83d7bd4c35918dd1ed116db54ee6ed3742b5b831", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83d7bd4c35918dd1ed116db54ee6ed3742b5b831"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0367cc1accefe75740171915e77b6122b7c9e67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0367cc1accefe75740171915e77b6122b7c9e67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0367cc1accefe75740171915e77b6122b7c9e67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0367cc1accefe75740171915e77b6122b7c9e67/comments", "author": null, "committer": null, "parents": [{"sha": "b87bc3aa06a01ab28c6e2b41321638f188aa246d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b87bc3aa06a01ab28c6e2b41321638f188aa246d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b87bc3aa06a01ab28c6e2b41321638f188aa246d"}], "stats": {"total": 73, "additions": 53, "deletions": 20}, "files": [{"sha": "003f8cdadaa748bd8791d3643d9fea57eafbf676", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0367cc1accefe75740171915e77b6122b7c9e67/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0367cc1accefe75740171915e77b6122b7c9e67/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0367cc1accefe75740171915e77b6122b7c9e67", "patch": "@@ -1,3 +1,10 @@\n+2012-02-15  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/52199\n+\t* config/rs6000/rs6000.c (rs6000_expand_vector_init): Use\n+\tforce_reg instead of copy_to_reg for better optimization.  Force\n+\tnon-register or memory operands into a register.\n+\n 2012-02-15  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* extend.texi: Reserve upper bits of memory model for future use."}, {"sha": "3ffc48c7e31c98036a8368747527100ae4ddab48", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0367cc1accefe75740171915e77b6122b7c9e67/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0367cc1accefe75740171915e77b6122b7c9e67/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a0367cc1accefe75740171915e77b6122b7c9e67", "patch": "@@ -4701,28 +4701,25 @@ rs6000_expand_vector_init (rtx target, rtx vals)\n   /* Double word values on VSX can use xxpermdi or lxvdsx.  */\n   if (VECTOR_MEM_VSX_P (mode) && (mode == V2DFmode || mode == V2DImode))\n     {\n+      rtx op0 = XVECEXP (vals, 0, 0);\n+      rtx op1 = XVECEXP (vals, 0, 1);\n       if (all_same)\n \t{\n-\t  rtx element = XVECEXP (vals, 0, 0);\n+\t  if (!MEM_P (op0) && !REG_P (op0))\n+\t    op0 = force_reg (inner_mode, op0);\n \t  if (mode == V2DFmode)\n-\t    emit_insn (gen_vsx_splat_v2df (target, element));\n+\t    emit_insn (gen_vsx_splat_v2df (target, op0));\n \t  else\n-\t    emit_insn (gen_vsx_splat_v2di (target, element));\n+\t    emit_insn (gen_vsx_splat_v2di (target, op0));\n \t}\n       else\n \t{\n+\t  op0 = force_reg (inner_mode, op0);\n+\t  op1 = force_reg (inner_mode, op1);\n \t  if (mode == V2DFmode)\n-\t    {\n-\t      rtx op0 = copy_to_mode_reg (DFmode, XVECEXP (vals, 0, 0));\n-\t      rtx op1 = copy_to_mode_reg (DFmode, XVECEXP (vals, 0, 1));\n-\t      emit_insn (gen_vsx_concat_v2df (target, op0, op1));\n-\t    }\n+\t    emit_insn (gen_vsx_concat_v2df (target, op0, op1));\n \t  else\n-\t    {\n-\t      rtx op0 = copy_to_mode_reg (DImode, XVECEXP (vals, 0, 0));\n-\t      rtx op1 = copy_to_mode_reg (DImode, XVECEXP (vals, 0, 1));\n-\t      emit_insn (gen_vsx_concat_v2di (target, op0, op1));\n-\t    }\n+\t    emit_insn (gen_vsx_concat_v2di (target, op0, op1));\n \t}\n       return;\n     }\n@@ -4736,7 +4733,7 @@ rs6000_expand_vector_init (rtx target, rtx vals)\n       if (all_same)\n \t{\n \t  rtx freg = gen_reg_rtx (V4SFmode);\n-\t  rtx sreg = copy_to_reg (XVECEXP (vals, 0, 0));\n+\t  rtx sreg = force_reg (SFmode, XVECEXP (vals, 0, 0));\n \n \t  emit_insn (gen_vsx_xscvdpsp_scalar (freg, sreg));\n \t  emit_insn (gen_vsx_xxspltw_v4sf (target, freg, const0_rtx));\n@@ -4747,13 +4744,13 @@ rs6000_expand_vector_init (rtx target, rtx vals)\n \t  rtx dbl_odd  = gen_reg_rtx (V2DFmode);\n \t  rtx flt_even = gen_reg_rtx (V4SFmode);\n \t  rtx flt_odd  = gen_reg_rtx (V4SFmode);\n+\t  rtx op0 = force_reg (SFmode, XVECEXP (vals, 0, 0));\n+\t  rtx op1 = force_reg (SFmode, XVECEXP (vals, 0, 1));\n+\t  rtx op2 = force_reg (SFmode, XVECEXP (vals, 0, 2));\n+\t  rtx op3 = force_reg (SFmode, XVECEXP (vals, 0, 3));\n \n-\t  emit_insn (gen_vsx_concat_v2sf (dbl_even,\n-\t\t\t\t\t  copy_to_reg (XVECEXP (vals, 0, 0)),\n-\t\t\t\t\t  copy_to_reg (XVECEXP (vals, 0, 1))));\n-\t  emit_insn (gen_vsx_concat_v2sf (dbl_odd,\n-\t\t\t\t\t  copy_to_reg (XVECEXP (vals, 0, 2)),\n-\t\t\t\t\t  copy_to_reg (XVECEXP (vals, 0, 3))));\n+\t  emit_insn (gen_vsx_concat_v2sf (dbl_even, op0, op1));\n+\t  emit_insn (gen_vsx_concat_v2sf (dbl_odd, op2, op3));\n \t  emit_insn (gen_vsx_xvcvdpsp (flt_even, dbl_even));\n \t  emit_insn (gen_vsx_xvcvdpsp (flt_odd, dbl_odd));\n \t  rs6000_expand_extract_even (target, flt_even, flt_odd);"}, {"sha": "cba5c940c3c502688b78c9af0f3f2accabf25c66", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0367cc1accefe75740171915e77b6122b7c9e67/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0367cc1accefe75740171915e77b6122b7c9e67/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a0367cc1accefe75740171915e77b6122b7c9e67", "patch": "@@ -1,3 +1,8 @@\n+2012-02-15  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/52199\n+\t* gcc.target/powerpc/pr52199.c: New file.\n+\n 2012-02-15  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR target/52152"}, {"sha": "e2231938839206fea6630b6589553ca27a66a059", "filename": "gcc/testsuite/gcc.target/powerpc/pr52199.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0367cc1accefe75740171915e77b6122b7c9e67/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr52199.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0367cc1accefe75740171915e77b6122b7c9e67/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr52199.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr52199.c?ref=a0367cc1accefe75740171915e77b6122b7c9e67", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-O3 -mcpu=power7 -fmerge-all-constants\" } */\n+\n+struct locale_time_t\n+{\n+  const char *abday[7];\n+  const unsigned int *wabday[7];\n+};\n+\n+static const unsigned int empty_wstr[1] = { 0 };\n+\n+void\n+time_read (struct locale_time_t *time)\n+{\n+  int cnt;\n+\n+  for (cnt=0; cnt < 7; cnt++)\n+    {\n+      time->abday[cnt] = \"\";\n+      time->wabday[cnt] = empty_wstr;\n+    }\n+}"}]}