{"sha": "700f6f985c4d5645116d34470d9112183ee7a31b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAwZjZmOTg1YzRkNTY0NTExNmQzNDQ3MGQ5MTEyMTgzZWU3YTMxYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-05-25T22:26:27Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-05-25T22:26:27Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1086", "tree": {"sha": "b4b1cb9c83683650141d5fe991d2cd0d57b70057", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4b1cb9c83683650141d5fe991d2cd0d57b70057"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/700f6f985c4d5645116d34470d9112183ee7a31b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/700f6f985c4d5645116d34470d9112183ee7a31b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/700f6f985c4d5645116d34470d9112183ee7a31b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/700f6f985c4d5645116d34470d9112183ee7a31b/comments", "author": null, "committer": null, "parents": [{"sha": "613f146b37c77191dce8fef6d82292938afd81f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/613f146b37c77191dce8fef6d82292938afd81f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/613f146b37c77191dce8fef6d82292938afd81f3"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "ecb6477c45aa1ceba3e50a4c1aa83c5cd96f36f5", "filename": "gcc/explow.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700f6f985c4d5645116d34470d9112183ee7a31b/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700f6f985c4d5645116d34470d9112183ee7a31b/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=700f6f985c4d5645116d34470d9112183ee7a31b", "patch": "@@ -752,9 +752,17 @@ emit_stack_save (save_level, psave, after)\n     }\n \n   if (after)\n-    emit_insn_after (fcn (sa, stack_pointer_rtx), after);\n+    {\n+      rtx seq;\n+\n+      start_sequence ();\n+      emit_insn (fcn (validize_mem (sa), stack_pointer_rtx));\n+      seq = gen_sequence ();\n+      end_sequence ();\n+      emit_insn_after (seq, after);\n+    }\n   else\n-    emit_insn (fcn (sa, stack_pointer_rtx));\n+    emit_insn (fcn (validize_mem (sa), stack_pointer_rtx));\n }\n \n /* Restore the stack pointer for the purpose in SAVE_LEVEL.  SA is the save\n@@ -797,9 +805,17 @@ emit_stack_restore (save_level, sa, after)\n     }\n \n   if (after)\n-    emit_insn_after (fcn (stack_pointer_rtx, sa), after);\n+    {\n+      rtx seq;\n+\n+      start_sequence ();\n+      emit_insn (fcn (stack_pointer_rtx, validize_mem (sa)));\n+      seq = gen_sequence ();\n+      end_sequence ();\n+      emit_insn_after (seq, after);\n+    }\n   else\n-    emit_insn (fcn (stack_pointer_rtx, sa));\n+    emit_insn (fcn (stack_pointer_rtx, validize_mem (sa)));\n }\n \f\n /* Return an rtx representing the address of an area of memory dynamically"}]}