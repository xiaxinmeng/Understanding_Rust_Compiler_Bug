{"sha": "6b543e86f4a765f6a0b7be90e393b9a772c22a52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI1NDNlODZmNGE3NjVmNmEwYjdiZTkwZTM5M2I5YTc3MmMyMmE1Mg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-01-16T00:50:20Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-01-16T00:50:20Z"}, "message": "acinclude.m4 (GLIBCPP_CHECK_WCHAR_T_SUPPORT): Substitute GLIBCPP_TEST_WCHAR_T if building wchar_t bits in the library.\n\n\n2003-01-15  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* acinclude.m4 (GLIBCPP_CHECK_WCHAR_T_SUPPORT): Substitute\n\tGLIBCPP_TEST_WCHAR_T if building wchar_t bits in the library.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\t* testsuite/Makefile.am (all-local): Add conditional rule to\n\tgenerate testsuite_wchar_t.\n\t* testsuite/Makefile.in: Regenerate.\n\t* testsuite/lib/libstdc++-v3-dg.exp\n\t(libstdc++-v3-list-sourcefiles): Remove wchar_t files if\n\ttestsuite_wchar_t is not present in the build directory.\n\t* testsuite/libstdc++-v3.dg/dg.exp: Add -g -O2 to DEFAULT_CXXFLAGS.\n\tRemove setulimit bits.\n\t* testsuite/26_numerics/complex_value.cc: Set to noopts.\n\t* testsuite/Makefile.am (CLEANFILES): Add.\n\t* testsuite/Makefile.in: Regenerate.\n\nFrom-SVN: r61373", "tree": {"sha": "86f8751fe6d14b04d55e79aca0d6596565369b9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86f8751fe6d14b04d55e79aca0d6596565369b9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b543e86f4a765f6a0b7be90e393b9a772c22a52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b543e86f4a765f6a0b7be90e393b9a772c22a52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b543e86f4a765f6a0b7be90e393b9a772c22a52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b543e86f4a765f6a0b7be90e393b9a772c22a52/comments", "author": null, "committer": null, "parents": [{"sha": "4af6a063722d474da500dd104b1e4a9687430857", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4af6a063722d474da500dd104b1e4a9687430857", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4af6a063722d474da500dd104b1e4a9687430857"}], "stats": {"total": 2454, "additions": 1279, "deletions": 1175}, "files": [{"sha": "57fde9f715c7c27497e4c5fe396ce61e4f886e88", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b543e86f4a765f6a0b7be90e393b9a772c22a52/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b543e86f4a765f6a0b7be90e393b9a772c22a52/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6b543e86f4a765f6a0b7be90e393b9a772c22a52", "patch": "@@ -1,3 +1,21 @@\n+2003-01-15  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* acinclude.m4 (GLIBCPP_CHECK_WCHAR_T_SUPPORT): Substitute\n+\tGLIBCPP_TEST_WCHAR_T if building wchar_t bits in the library.\n+\t* aclocal.m4: Regenerate.\n+\t* configure: Regenerate.\n+\t* testsuite/Makefile.am (all-local): Add conditional rule to\n+\tgenerate testsuite_wchar_t.\n+\t* testsuite/Makefile.in: Regenerate.\n+\t* testsuite/lib/libstdc++-v3-dg.exp\n+\t(libstdc++-v3-list-sourcefiles): Remove wchar_t files if\n+\ttestsuite_wchar_t is not present in the build directory.\n+\t* testsuite/libstdc++-v3.dg/dg.exp: Add -g -O2 to DEFAULT_CXXFLAGS.\n+\tRemove setulimit bits.\n+\t* testsuite/26_numerics/complex_value.cc: Set to noopts.\n+\t* testsuite/Makefile.am (CLEANFILES): Add.\n+\t* testsuite/Makefile.in: Regenerate.\t\n+\t\n 2003-01-15  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* config/os/hpux/os_defines.h (_GLIBCPP_GTHREAD_USE_WEAK): Define for"}, {"sha": "0792748766a13a6fafd97bacbb11c7dfcc515936", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b543e86f4a765f6a0b7be90e393b9a772c22a52/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b543e86f4a765f6a0b7be90e393b9a772c22a52/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=6b543e86f4a765f6a0b7be90e393b9a772c22a52", "patch": "@@ -940,6 +940,8 @@ dnl Define HAVE_MBSTATE_T if mbstate_t is not in wchar.h\n dnl\n dnl GLIBCPP_CHECK_WCHAR_T_SUPPORT\n AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n+  dnl Wide characters disabled by default.\n+  enable_wchar_t=no\n \n   dnl Test wchar.h for mbstate_t, which is needed for char_traits and\n   dnl others even if wchar_t support is not on.\n@@ -985,7 +987,7 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n     ac_wfuncs=no)\n \n     dnl Checks for names injected into std:: by the c_std headers.\n-    AC_CHECK_FUNCS(btowc wctob fgetwc fgetwc fgetws fputwc fputws fwide \\\n+    AC_CHECK_FUNCS(btowc wctob fgetwc fgetws fputwc fputws fwide \\\n     fwprintf fwscanf swprintf swscanf vfwprintf vfwscanf vswprintf vswscanf \\\n     vwprintf vwscanf wprintf wscanf getwc getwchar mbsinit mbrlen mbrtowc \\\n     mbsrtowcs wcsrtombs putwc putwchar ungetwc wcrtomb wcstod wcstof wcstol \\\n@@ -1030,18 +1032,15 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n \n     dnl At the moment, only enable wchar_t specializations if all the\n     dnl above support is present.\n-    AC_MSG_CHECKING([for enabled wchar_t specializations])\n-    if test x\"$ac_isoC99_wchar_t\" = xyes &&\n-       test x\"$ac_XPG2_wchar_t\" = xyes; then\n+    if test x\"$ac_isoC99_wchar_t\" = xyes && \n+\ttest x\"$ac_XPG2_wchar_t\" = xyes; then\n       AC_DEFINE(_GLIBCPP_USE_WCHAR_T)\n-      AC_MSG_RESULT(\"yes\")\n-    else\n-      AC_MSG_RESULT(\"no\")\n+      enable_wchar_t=yes\n     fi\n-  else\n-    dnl Wide characters disabled by the user.\n-    AC_MSG_WARN([wchar_t support disabled.])\n   fi\n+  AC_MSG_CHECKING([for enabled wchar_t specializations])\n+  AC_MSG_RESULT($enable_wchar_t)\t\n+  AM_CONDITIONAL(GLIBCPP_TEST_WCHAR_T, test \"$enable_wchar_t\" = yes)\t\n ])\n \n "}, {"sha": "67dc4d218eb3153d6e605d44a73ea00400566263", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b543e86f4a765f6a0b7be90e393b9a772c22a52/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b543e86f4a765f6a0b7be90e393b9a772c22a52/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=6b543e86f4a765f6a0b7be90e393b9a772c22a52", "patch": "@@ -952,6 +952,8 @@ dnl Define HAVE_MBSTATE_T if mbstate_t is not in wchar.h\n dnl\n dnl GLIBCPP_CHECK_WCHAR_T_SUPPORT\n AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n+  dnl Wide characters disabled by default.\n+  enable_wchar_t=no\n \n   dnl Test wchar.h for mbstate_t, which is needed for char_traits and\n   dnl others even if wchar_t support is not on.\n@@ -997,7 +999,7 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n     ac_wfuncs=no)\n \n     dnl Checks for names injected into std:: by the c_std headers.\n-    AC_CHECK_FUNCS(btowc wctob fgetwc fgetwc fgetws fputwc fputws fwide \\\n+    AC_CHECK_FUNCS(btowc wctob fgetwc fgetws fputwc fputws fwide \\\n     fwprintf fwscanf swprintf swscanf vfwprintf vfwscanf vswprintf vswscanf \\\n     vwprintf vwscanf wprintf wscanf getwc getwchar mbsinit mbrlen mbrtowc \\\n     mbsrtowcs wcsrtombs putwc putwchar ungetwc wcrtomb wcstod wcstof wcstol \\\n@@ -1042,18 +1044,15 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n \n     dnl At the moment, only enable wchar_t specializations if all the\n     dnl above support is present.\n-    AC_MSG_CHECKING([for enabled wchar_t specializations])\n-    if test x\"$ac_isoC99_wchar_t\" = xyes &&\n-       test x\"$ac_XPG2_wchar_t\" = xyes; then\n+    if test x\"$ac_isoC99_wchar_t\" = xyes && \n+\ttest x\"$ac_XPG2_wchar_t\" = xyes; then\n       AC_DEFINE(_GLIBCPP_USE_WCHAR_T)\n-      AC_MSG_RESULT(\"yes\")\n-    else\n-      AC_MSG_RESULT(\"no\")\n+      enable_wchar_t=yes\n     fi\n-  else\n-    dnl Wide characters disabled by the user.\n-    AC_MSG_WARN([wchar_t support disabled.])\n   fi\n+  AC_MSG_CHECKING([for enabled wchar_t specializations])\n+  AC_MSG_RESULT($enable_wchar_t)\t\n+  AM_CONDITIONAL(GLIBCPP_TEST_WCHAR_T, test \"$enable_wchar_t\" = yes)\t\n ])\n \n "}, {"sha": "87442c7c177740a340c6c0e8157a8b211c0da249", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1186, "deletions": 1135, "changes": 2321, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b543e86f4a765f6a0b7be90e393b9a772c22a52/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b543e86f4a765f6a0b7be90e393b9a772c22a52/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=6b543e86f4a765f6a0b7be90e393b9a772c22a52"}, {"sha": "ebdd71a2c71aa37a5a8b2ed2cbe476361b55591b", "filename": "libstdc++-v3/testsuite/26_numerics/complex_value.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b543e86f4a765f6a0b7be90e393b9a772c22a52/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b543e86f4a765f6a0b7be90e393b9a772c22a52/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex_value.cc?ref=6b543e86f4a765f6a0b7be90e393b9a772c22a52", "patch": "@@ -1,7 +1,8 @@\n+// { dg-options \"-O0\" }\n // 2000-11-20\n // Benjamin Kosnik bkoz@redhat.com\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the"}, {"sha": "7380035af3f98b1410e88c064d6a55aedd450a44", "filename": "libstdc++-v3/testsuite/Makefile.am", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b543e86f4a765f6a0b7be90e393b9a772c22a52/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b543e86f4a765f6a0b7be90e393b9a772c22a52/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am?ref=6b543e86f4a765f6a0b7be90e393b9a772c22a52", "patch": "@@ -1,6 +1,6 @@\n ## Makefile for the testsuite subdirectory of the GNU C++ Standard library.\n ##\n-## Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+## Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n ##\n ## This file is part of the libstdc++ version 3 distribution.\n ## Process this file with automake to produce Makefile.in.\n@@ -61,3 +61,18 @@ else\n noinst_PROGRAMS = \n endif\n abi_check_SOURCES = abi_check.cc\n+\n+# Enable wchar_t tests if capable.\n+if GLIBCPP_TEST_WCHAR_T\n+all-local: stamp_wchar\n+else\n+all-local:\n+endif\n+\n+stamp_wchar:\n+\ttouch testsuite_wchar_t\n+\n+# By adding these files here, automake will remove them for 'make clean'\n+CLEANFILES = *.txt *.tst *.exe core* filebuf_* tmp ostream_* *.log *.sum \\\n+\ttestsuite_files testsuite_wchar_t \\\n+\tsite.exp abi_check "}, {"sha": "b30b4bdb8df4b9122ce38d192191bedabc6ede52", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b543e86f4a765f6a0b7be90e393b9a772c22a52/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b543e86f4a765f6a0b7be90e393b9a772c22a52/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=6b543e86f4a765f6a0b7be90e393b9a772c22a52", "patch": "@@ -178,6 +178,12 @@ libv3test_a_SOURCES = testsuite_hooks.cc testsuite_allocator.cc\n @GLIBCPP_BUILD_ABI_CHECK_TRUE@noinst_PROGRAMS = @GLIBCPP_BUILD_ABI_CHECK_TRUE@abi_check\n @GLIBCPP_BUILD_ABI_CHECK_FALSE@noinst_PROGRAMS = \n abi_check_SOURCES = abi_check.cc\n+\n+# By adding these files here, automake will remove them for 'make clean'\n+CLEANFILES = *.txt *.tst *.exe core* filebuf_* tmp ostream_* *.log *.sum \\\n+\ttestsuite_files testsuite_wchar_t \\\n+\tsite.exp abi_check \n+\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = \n@@ -400,7 +406,7 @@ install-am: all-am\n install: install-am\n uninstall-am:\n uninstall: uninstall-am\n-all-am: Makefile $(LIBRARIES) $(PROGRAMS)\n+all-am: Makefile $(LIBRARIES) $(PROGRAMS) all-local\n all-redirect: all-am\n install-strip:\n \t$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install\n@@ -410,6 +416,7 @@ installdirs:\n mostlyclean-generic:\n \n clean-generic:\n+\t-test -z \"$(CLEANFILES)\" || rm -f $(CLEANFILES)\n \n distclean-generic:\n \t-rm -f Makefile $(CONFIG_CLEAN_FILES)\n@@ -454,11 +461,18 @@ maintainer-clean-noinstPROGRAMS tags mostlyclean-tags distclean-tags \\\n clean-tags maintainer-clean-tags distdir check-DEJAGNU info-am info \\\n dvi-am dvi check check-am installcheck-am installcheck install-info-am \\\n install-info install-exec-am install-exec install-data-am install-data \\\n-install-am install uninstall-am uninstall all-redirect all-am all \\\n-installdirs mostlyclean-generic distclean-generic clean-generic \\\n+install-am install uninstall-am uninstall all-local all-redirect all-am \\\n+all installdirs mostlyclean-generic distclean-generic clean-generic \\\n maintainer-clean-generic clean mostlyclean distclean maintainer-clean\n \n \n+# Enable wchar_t tests if capable.\n+@GLIBCPP_TEST_WCHAR_T_TRUE@all-local: stamp_wchar\n+@GLIBCPP_TEST_WCHAR_T_FALSE@all-local:\n+\n+stamp_wchar:\n+\ttouch testsuite_wchar_t\n+\n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded.\n .NOEXPORT:"}, {"sha": "b64274bea93c3408513d88f47e34c1c0235b921c", "filename": "libstdc++-v3/testsuite/lib/libstdc++-v3-dg.exp", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b543e86f4a765f6a0b7be90e393b9a772c22a52/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b543e86f4a765f6a0b7be90e393b9a772c22a52/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3-dg.exp?ref=6b543e86f4a765f6a0b7be90e393b9a772c22a52", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+# Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -240,6 +240,23 @@ proc libstdc++-v3-list-sourcefiles { } {\n \tcd $where_we_were\n     }\n     close $f\n-    return $sfiles\n-}\n \n+    # Disable wchar_t tests if library not configured to support\n+    # wchar_t testing. \n+    set wchar_file \"${outdir}/testsuite_wchar_t\"    \n+    if { [file exists $wchar_file] } {\n+\treturn $sfiles\n+    } else {\n+\t# Remove wchar_t tests files from list.\n+\tset res {}\n+\tforeach w $sfiles {\n+\t    if [regexp \"wchar_t\" $w] {\n+\t\tverbose \"element out list is $w\"\n+\t    } else {\n+\t\tverbose \"element in list is $w\"\n+\t\tlappend res $w\n+\t    }\n+\t}\n+\treturn $res\n+    }\n+}"}, {"sha": "bad12dc31dc004d9547fdde88049c7293e5cc648", "filename": "libstdc++-v3/testsuite/libstdc++-v3.dg/dg.exp", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b543e86f4a765f6a0b7be90e393b9a772c22a52/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-v3.dg%2Fdg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b543e86f4a765f6a0b7be90e393b9a772c22a52/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-v3.dg%2Fdg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-v3.dg%2Fdg.exp?ref=6b543e86f4a765f6a0b7be90e393b9a772c22a52", "patch": "@@ -1,4 +1,4 @@\n-#   Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+#   Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -22,23 +22,13 @@ load_lib libstdc++-v3-dg.exp\n # If a testcase doesn't have special options, use these.\n global DEFAULT_CXXFLAGS\n if ![info exists DEFAULT_CXXFLAGS] then {\n-    set DEFAULT_CXXFLAGS \" -DDEBUG_ASSERT\"\n+    set DEFAULT_CXXFLAGS \"-g -O2 -DDEBUG_ASSERT\"\n }\n \n # Initialize 'dg' last or dejagnu exits with an error...\n libstdc++-v3-init\n dg-init\n \n-\n-## Set ulimits.  \n-## This should normally be handled on a per-test basis through @xxx@-keywords.\n-## The following limit is expressed in kilobytes.  For history, have a \n-## look at http://gcc.gnu.org/ml/libstdc++/2000-10/msg00029.html\n-set maximum-memory-usage 16384\n-set shell-ulimit-command ulimit\n-remote_exec host ${shell-ulimit-command} \"-d ${maximum-memory-usage}\"\n-remote_exec host ${shell-ulimit-command} \"-v ${maximum-memory-usage}\"\n-\n # Main loop.\n dg-runtest [libstdc++-v3-list-sourcefiles] \"\" $DEFAULT_CXXFLAGS\n "}]}