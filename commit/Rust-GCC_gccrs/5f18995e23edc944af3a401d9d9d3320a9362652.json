{"sha": "5f18995e23edc944af3a401d9d9d3320a9362652", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYxODk5NWUyM2VkYzk0NGFmM2E0MDFkOWQ5ZDMzMjBhOTM2MjY1Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-25T08:21:05Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-25T08:21:05Z"}, "message": "varasm: Fix output_constructor where a RANGE_EXPR index needs to skip some elts [PR94303]\n\nThe following testcase is miscompiled, because output_constructor doesn't\noutput the initializer correctly.  The FE creates {[1...2] = 9} in this\ncase, and we emit .long 9; long 9; .zero 8 instead of the expected\n.zero 8; .long 9; .long 9.  If the CONSTRUCTOR is {[1] = 9, [2] = 9},\noutput_constructor_regular_field has code to notice that the current\nlocation (local->total_bytes) is smaller than the location we want to write\nto (1*sizeof(elt)) and will call assemble_zeros to skip those.  But\nRANGE_EXPRs are handled by a different function which didn't do this,\nso for RANGE_EXPRs we emitted them properly only if local->total_bytes\nwas always equal to the location where the RANGE_EXPR needs to start.\n\n2020-03-25  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/94303\n\t* varasm.c (output_constructor_array_range): If local->index\n\tRANGE_EXPR doesn't start at the current location in the constructor,\n\tskip needed number of bytes using assemble_zeros or assert we don't\n\tgo backwards.\n\n\tPR middle-end/94303\n\t* g++.dg/torture/pr94303.C: New test.", "tree": {"sha": "ce7ae8f102f656e0a9d85013a496be79ba6ebb43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce7ae8f102f656e0a9d85013a496be79ba6ebb43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f18995e23edc944af3a401d9d9d3320a9362652", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f18995e23edc944af3a401d9d9d3320a9362652", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f18995e23edc944af3a401d9d9d3320a9362652", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f18995e23edc944af3a401d9d9d3320a9362652/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "158cccea0d097d9f181bf4e35fdeb97865c960f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/158cccea0d097d9f181bf4e35fdeb97865c960f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/158cccea0d097d9f181bf4e35fdeb97865c960f7"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "3a1bfcef39b5ee6777ac4d51e59538a72a00ae57", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f18995e23edc944af3a401d9d9d3320a9362652/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f18995e23edc944af3a401d9d9d3320a9362652/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f18995e23edc944af3a401d9d9d3320a9362652", "patch": "@@ -1,5 +1,11 @@\n 2020-03-25  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/94303\n+\t* varasm.c (output_constructor_array_range): If local->index\n+\tRANGE_EXPR doesn't start at the current location in the constructor,\n+\tskip needed number of bytes using assemble_zeros or assert we don't\n+\tgo backwards.\n+\n \tPR c++/94223\n \t* langhooks.c (lhd_set_decl_assembler_name): Use a static ulong\n \tcounter instead of DECL_UID."}, {"sha": "b68779ff3393175a7715cbac1354a35147fc4ec8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f18995e23edc944af3a401d9d9d3320a9362652/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f18995e23edc944af3a401d9d9d3320a9362652/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5f18995e23edc944af3a401d9d9d3320a9362652", "patch": "@@ -1,5 +1,8 @@\n 2020-03-25  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/94303\n+\t* g++.dg/torture/pr94303.C: New test.\n+\n \tPR c++/94223\n \t* g++.dg/opt/pr94223.C: New test.\n "}, {"sha": "45b90a2249de32a1418f843296bd66e218b1d56e", "filename": "gcc/testsuite/g++.dg/torture/pr94303.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f18995e23edc944af3a401d9d9d3320a9362652/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr94303.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f18995e23edc944af3a401d9d9d3320a9362652/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr94303.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr94303.C?ref=5f18995e23edc944af3a401d9d9d3320a9362652", "patch": "@@ -0,0 +1,17 @@\n+// PR middle-end/94303\n+// { dg-do run }\n+\n+struct A {\n+  int d = 9;\n+  A () = default;\n+  A (int x) : d(x) {}\n+  void foo () { if (d < 1) __builtin_abort (); }\n+};\n+\n+A a[3] = { 1 };\n+\n+int\n+main ()\n+{\n+  a[2].foo ();\n+}"}, {"sha": "271a67abf56200ffb5e996356ef0b537ec41e0c4", "filename": "gcc/varasm.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f18995e23edc944af3a401d9d9d3320a9362652/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f18995e23edc944af3a401d9d9d3320a9362652/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=5f18995e23edc944af3a401d9d9d3320a9362652", "patch": "@@ -5152,6 +5152,26 @@ struct oc_local_state {\n static void\n output_constructor_array_range (oc_local_state *local)\n {\n+  /* Perform the index calculation in modulo arithmetic but\n+     sign-extend the result because Ada has negative DECL_FIELD_OFFSETs\n+     but we are using an unsigned sizetype.  */\n+  unsigned prec = TYPE_PRECISION (sizetype);\n+  offset_int idx = wi::sext (wi::to_offset (TREE_OPERAND (local->index, 0))\n+\t\t\t     - wi::to_offset (local->min_index), prec);\n+  tree valtype = TREE_TYPE (local->val);\n+  HOST_WIDE_INT fieldpos\n+    = (idx * wi::to_offset (TYPE_SIZE_UNIT (valtype))).to_short_addr ();\n+\n+  /* Advance to offset of this element.  */\n+  if (fieldpos > local->total_bytes)\n+    {\n+      assemble_zeros (fieldpos - local->total_bytes);\n+      local->total_bytes = fieldpos;\n+    }\n+  else\n+    /* Must not go backwards.  */\n+    gcc_assert (fieldpos == local->total_bytes);\n+\n   unsigned HOST_WIDE_INT fieldsize\n     = int_size_in_bytes (TREE_TYPE (local->type));\n "}]}