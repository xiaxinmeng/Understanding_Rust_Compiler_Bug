{"sha": "9b044d19517541c95681d35a92dbc81e6e21d94f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIwNDRkMTk1MTc1NDFjOTU2ODFkMzVhOTJkYmM4MWU2ZTIxZDk0Zg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2005-09-23T19:36:46Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2005-09-23T19:36:46Z"}, "message": "Initial revision\n\nFrom-SVN: r104578", "tree": {"sha": "b2c2abf473309eac532cafbad81b20f3270ff45f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2c2abf473309eac532cafbad81b20f3270ff45f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b044d19517541c95681d35a92dbc81e6e21d94f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b044d19517541c95681d35a92dbc81e6e21d94f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b044d19517541c95681d35a92dbc81e6e21d94f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b044d19517541c95681d35a92dbc81e6e21d94f/comments", "author": null, "committer": null, "parents": [{"sha": "acff2da93c917c21aca570e2a41ee613c2b32c2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acff2da93c917c21aca570e2a41ee613c2b32c2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acff2da93c917c21aca570e2a41ee613c2b32c2e"}], "stats": {"total": 82760, "additions": 82760, "deletions": 0}, "files": [{"sha": "2ec939f28d9a20a2b4bf217b936e46aa3990cc47", "filename": "libjava/classpath/.cdtproject", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2F.cdtproject", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2F.cdtproject", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2F.cdtproject?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,3 @@\n+<?xml version='1.0'?>\n+<?eclipse-cdt version=\"2.0\"?>\n+<cdtproject/>\n\\ No newline at end of file"}, {"sha": "7eaac601ecb52adfc170ad33f0d9f3003f3d6f84", "filename": "libjava/classpath/.externalToolBuilders/CompileNative.launch", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2F.externalToolBuilders%2FCompileNative.launch", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2F.externalToolBuilders%2FCompileNative.launch", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2F.externalToolBuilders%2FCompileNative.launch?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,2 @@\n+<?xml version='1.0'?>\n+<launchConfiguration type='org.eclipse.ui.externaltools.ProgramBuilderLaunchConfigurationType'><stringAttribute key='org.eclipse.debug.core.ATTR_REFRESH_SCOPE' value='${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; name=&quot;working set&quot; editPageId=&quot;org.eclipse.ui.resourceWorkingSetPage&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/classpath/native&quot; type=&quot;2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}'/><stringAttribute key='org.eclipse.ui.externaltools.ATTR_RUN_BUILD_KINDS' value='full,incremental,'/><stringAttribute key='org.eclipse.ui.externaltools.ATTR_BUILD_SCOPE' value='${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; name=&quot;workingSet&quot; editPageId=&quot;org.eclipse.ui.resourceWorkingSetPage&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/classpath/native&quot; type=&quot;2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}'/><stringAttribute key='org.eclipse.ui.externaltools.ATTR_LOCATION' value='${system_path:make}'/><booleanAttribute key='org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED' value='true'/><stringAttribute key='org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY' value='${build_project}'/><stringAttribute key='org.eclipse.ui.externaltools.ATTR_TOOL_ARGUMENTS' value='-C ${build_project}/native all install'/><booleanAttribute key='org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND' value='false'/><booleanAttribute key='org.eclipse.debug.core.appendEnvironmentVariables' value='true'/></launchConfiguration>\n\\ No newline at end of file"}, {"sha": "ff11b3c79fb3d301f83133c02bcbbf5a022d1dbb", "filename": "libjava/classpath/.externalToolBuilders/CreateLocaleData.launch", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2F.externalToolBuilders%2FCreateLocaleData.launch", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2F.externalToolBuilders%2FCreateLocaleData.launch", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2F.externalToolBuilders%2FCreateLocaleData.launch?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,2 @@\n+<?xml version='1.0'?>\n+<launchConfiguration type='org.eclipse.ui.externaltools.ProgramBuilderLaunchConfigurationType'><stringAttribute key='org.eclipse.debug.core.ATTR_REFRESH_SCOPE' value='${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; name=&quot;working set&quot; editPageId=&quot;org.eclipse.ui.resourceWorkingSetPage&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/classpath/java/util&quot; type=&quot;2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}'/><stringAttribute key='org.eclipse.ui.externaltools.ATTR_RUN_BUILD_KINDS' value='full,incremental,'/><stringAttribute key='org.eclipse.ui.externaltools.ATTR_LOCATION' value='${system_path:make}'/><booleanAttribute key='org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED' value='true'/><stringAttribute key='org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY' value='${build_project}'/><stringAttribute key='org.eclipse.ui.externaltools.ATTR_TOOL_ARGUMENTS' value='-C ${build_project}/lib ../java/util/LocaleData.java'/><booleanAttribute key='org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND' value='false'/><booleanAttribute key='org.eclipse.debug.core.appendEnvironmentVariables' value='true'/></launchConfiguration>\n\\ No newline at end of file"}, {"sha": "e1b7ddf474a04343c9a124eb694e6759e74599bb", "filename": "libjava/classpath/doc/www.gnu.org/bugs.wml", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fdoc%2Fwww.gnu.org%2Fbugs.wml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fdoc%2Fwww.gnu.org%2Fbugs.wml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fdoc%2Fwww.gnu.org%2Fbugs.wml?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,46 @@\n+#include \"include/layout.wml\"\n+\n+<subject \"GNU Classpath Bug Reports\">\n+\n+<box>\n+\n+<boxtitle>GNU Classpath::Bugs</boxtitle>\n+<boxitem>\n+Unfortunately GNU Classpath is not bug free yet.\n+<br>\n+But you can help!\n+<br>\n+If you find a bug please report it here.\n+</boxitem>\n+\n+<boxtitle>Query</boxtitle>\n+<boxitem>\n+Please first check the following lists:\n+<ul>\n+<li><a href=\"http://gcc.gnu.org/bugzilla/query.cgi?product=classpath\">Query bugs</a></li>\n+<li><a href=\"http://gcc.gnu.org/bugzilla/buglist.cgi?product=classpath&bug_status=UNCONFIRMED&bug_status=NEW&bug_status=ASSIGNED&bug_status=SUSPENDED&bug_status=WAITING&bug_status=REOPENED\">All open bugs</a></li>\n+<li><a href=\"http://gcc.gnu.org/bugzilla/duplicates.cgi?sortby=count&product=classpath\">Most Frequently Reported Bugs</a></li>\n+</ul>\n+<p>\n+</boxitem>\n+\n+<boxtitle>Report</boxtitle>\n+<boxitem>\n+If your bug wasn't in any of the above lists, please\n+<ul>\n+<li><a href=\"http://gcc.gnu.org/bugzilla/enter_bug.cgi?product=classpath\">Report it</a></li>\n+<ul>\n+<p>\n+</boxitem>\n+\n+<boxtitle>Overview</boxtitle>\n+<boxitem>\n+You can also look at some pretty\n+<ul>\n+<li><a href=\"http://gcc.gnu.org/bugzilla/reports.cgi?product=classpath&datasets=NEW%3A&datasets=ASSIGNED%3A&datasets=REOPENED%3A&datasets=UNCONFIRMED%3A&datasets=RESOLVED%3A&datasets=VERIFIED%3A&datasets=CLOSED%3A&datasets=FIXED%3A&datasets=INVALID%3A&datasets=WONTFIX%3A&datasets=DUPLICATE%3A&datasets=WORKSFORME%3A\">Status Counts</a></li>\n+<li><a href=\"http://gcc.gnu.org/bugzilla/report.cgi?bug_file_loc_type=allwordssubstr&bug_status=UNCONFIRMED&bug_status=NEW&bug_status=ASSIGNED&bug_status=SUSPENDED&bug_status=WAITING&bug_status=REOPENED&bug_status=RESOLVED&bug_status=VERIFIED&bug_status=CLOSED&cumulate=1&gccbuild_type=allwordssubstr&gcchost_type=allwordssubstr&gcctarget_type=allwordssubstr&keywords_type=allwords&known_to_fail_type=allwordssubstr&known_to_work_type=allwordssubstr&long_desc_type=substring&product=classpath&short_desc_type=allwordssubstr&x_axis_field=component&y_axis_field=bug_status&width=600&height=350&action=wrap&format=table\">Component/Status Tables</a></li>\n+</ul>\n+<p>\n+</boxitem>\n+\n+</box>"}, {"sha": "aea41d4cb601e1f63a75d5836a6afe279e28b0c1", "filename": "libjava/classpath/examples/Makefile.jawt.in", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fexamples%2FMakefile.jawt.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fexamples%2FMakefile.jawt.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fexamples%2FMakefile.jawt.in?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,29 @@\n+# @configure_input@\n+\n+prefix = @prefix@\n+exec_prefix = @exec_prefix@\n+includedir = @includedir@\n+libdir = @libdir@\n+pkglibdir = $(libdir)/@PACKAGE@\n+\n+all: gnu/classpath/examples/jawt/DemoJAWT.class libDemoJAWT.so\n+\t@echo \"RUN with:\"\n+\t@echo \"  LD_LIBRARY_PATH=$$LD_LIBRARY_PATH:.:$(pkglibdir) jamvm \\\\\"\n+\t@echo \"    gnu.classpath.examples.jawt.DemoJAWT\"\n+\n+gnu/classpath/examples/jawt/DemoJAWT.class: gnu/classpath/examples/jawt/DemoJAWT.java\n+\tgcj -C gnu/classpath/examples/jawt/DemoJAWT.java\n+\n+DemoJAWT.h: gnu/classpath/examples/jawt/DemoJAWT.class\n+\tgcjh -jni gnu.classpath.examples.jawt.DemoJAWT -o DemoJAWT.h\n+\n+libDemoJAWT.so: gnu/classpath/examples/jawt/DemoJAWT.c DemoJAWT.h\n+\tgcc -g -O0 -Wall -I. -I/usr/X11R6/include -L. -L/usr/X11R6/lib \\\n+\t-I$(includedir) -L$(pkglibdir) \\\n+\t-lX11 -ljawtgnu -shared -o libDemoJAWT.so \\\n+\tgnu/classpath/examples/jawt/DemoJAWT.c\n+\n+clean:\n+\trm -f DemoJAWT.h\n+\trm -f gnu/classpath/examples/jawt/DemoJAWT*.class\n+\trm -f libDemoJAWT.so"}, {"sha": "4f789c9416b34bc015512574358dd300c73ef4a1", "filename": "libjava/classpath/examples/gnu/classpath/examples/datatransfer/Demo.java", "status": "added", "additions": 652, "deletions": 0, "changes": 652, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fexamples%2Fgnu%2Fclasspath%2Fexamples%2Fdatatransfer%2FDemo.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fexamples%2Fgnu%2Fclasspath%2Fexamples%2Fdatatransfer%2FDemo.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fexamples%2Fgnu%2Fclasspath%2Fexamples%2Fdatatransfer%2FDemo.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,652 @@\n+/* Demo.java -- And example of copy/paste datatransfer\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath examples.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA. */\n+\n+package gnu.classpath.examples.datatransfer;\n+\n+import java.awt.*;\n+import java.awt.event.*;\n+import java.awt.datatransfer.*;\n+\n+import java.io.*;\n+import java.net.URL;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.Random;\n+\n+/**\n+ * An example how datatransfer works for copying and pasting data to\n+ * and from other programs.\n+ */\n+class Demo\n+  extends Frame\n+  implements ActionListener, ItemListener, FlavorListener\n+{\n+  public static void main(String args[])\n+  {\n+    new Demo();\n+  }\n+\n+  private TextArea text;\n+  private Button copyText;\n+  private Button pasteText;\n+\n+  private ImageComponent image;\n+  private Button copyImage;\n+  private Button pasteImage;\n+\n+  private ObjectComponent object;\n+  private Button copyObject;\n+  private Button pasteObject;\n+\n+  private FilesComponent files;\n+  private Button copyFiles;\n+  private Button pasteFiles;\n+\n+  private FlavorsComponent flavors;\n+  private FlavorDetailsComponent details;\n+\n+  private Demo()\n+  {\n+    super(\"GNU Classpath datatransfer\");\n+\n+    /* Add all the different panel to the main window in one row. */\n+    setLayout(new GridLayout(5, 1, 10, 10));\n+    add(createTextPanel());\n+    add(createImagePanel());\n+    add(createObjectPanel());\n+    add(createFilesPanel());\n+    add(createFlavorsPanel());\n+\n+    /* Add listeners for the various buttons and events we are\n+       interested in. */\n+    addWindowListener(new WindowAdapter ()\n+      {\n+\tpublic void windowClosing (WindowEvent e)\n+\t{\n+\t  dispose();\n+\t}\n+      });\n+    flavors.addItemListener(this);\n+    Toolkit t = Toolkit.getDefaultToolkit();\n+    Clipboard c = t.getSystemClipboard();\n+    c.addFlavorListener(this);\n+\n+    /* Show time! */\n+    pack();\n+    show();\n+  }\n+\n+  /**\n+   * The Text Panel will show simple text that can be copied and pasted.\n+   */\n+  private Panel createTextPanel()\n+  {\n+    Panel textPanel = new Panel();\n+    textPanel.setLayout(new BorderLayout());\n+    text = new TextArea(\"GNU Everywhere!\",\n+\t\t\t2, 80,\n+\t\t\tTextArea.SCROLLBARS_VERTICAL_ONLY);\n+    text.setEditable(false);\n+    text.setEnabled(true);\n+    Panel textButtons = new Panel();\n+    textButtons.setLayout(new FlowLayout());\n+    copyText = new Button(\"Copy text\");\n+    copyText.addActionListener(this);\n+    pasteText = new Button(\"Paste text\");\n+    pasteText.addActionListener(this);\n+    textButtons.add(copyText);\n+    textButtons.add(pasteText);\n+    textPanel.add(text, BorderLayout.CENTER);\n+    textPanel.add(textButtons, BorderLayout.SOUTH);\n+    return textPanel;\n+  }\n+\n+  /**\n+   * The Image Panel shows an image that can be copied to another\n+   * program or be replaced by pasting in an image from another\n+   * application.\n+   */\n+  private Panel createImagePanel()\n+  {\n+    Panel imagePanel = new Panel();\n+    imagePanel.setLayout(new BorderLayout());\n+    URL imageurl = this.getClass()\n+      .getResource(\"/gnu/classpath/examples/icons/big-fullscreen.png\");\n+    Image img = Toolkit.getDefaultToolkit().createImage(imageurl);\n+    image = new ImageComponent(img);\n+    Panel imageButtons = new Panel();\n+    copyImage = new Button(\"Copy image\");\n+    copyImage.addActionListener(this);\n+    pasteImage = new Button(\"Paste image\");\n+    pasteImage.addActionListener(this);\n+    imageButtons.add(copyImage);\n+    imageButtons.add(pasteImage);\n+    imagePanel.add(image, BorderLayout.CENTER);\n+    imagePanel.add(imageButtons, BorderLayout.SOUTH);\n+    return imagePanel;\n+  }\n+\n+  /**\n+   * The Object Panel holds a simple (Point) object that can be copied\n+   * and pasted to another program that supports exchanging serialized\n+   * objects.\n+   */\n+  private Panel createObjectPanel()\n+  {\n+    Panel objectPanel = new Panel();\n+    objectPanel.setLayout(new BorderLayout());\n+    Random random = new Random();\n+    int x = (byte) random.nextInt();\n+    int y = (byte) random.nextInt();\n+    object = new ObjectComponent(new Point(x, y));\n+    Panel objectButtons = new Panel();\n+    copyObject = new Button(\"Copy object\");\n+    copyObject.addActionListener(this);\n+    pasteObject = new Button(\"Paste object\");\n+    pasteObject.addActionListener(this);\n+    objectButtons.add(copyObject);\n+    objectButtons.add(pasteObject);\n+    objectPanel.add(object, BorderLayout.CENTER);\n+    objectPanel.add(objectButtons, BorderLayout.SOUTH);\n+    return objectPanel;\n+  }\n+  \n+  /**\n+   * The Files Panel shows the files from the current working\n+   * directory. They can be copied and pasted between other\n+   * applications that support the exchange of file lists.\n+   */\n+  private Panel createFilesPanel()\n+  {\n+    Panel filesPanel = new Panel();\n+    filesPanel.setLayout(new BorderLayout());\n+    files = new FilesComponent(new File(\".\").listFiles());\n+    Panel filesButtons = new Panel();\n+    copyFiles = new Button(\"Copy files\");\n+    copyFiles.addActionListener(this);\n+    pasteFiles = new Button(\"Paste files\");\n+    pasteFiles.addActionListener(this);\n+    filesButtons.add(copyFiles);\n+    filesButtons.add(pasteFiles);\n+    filesPanel.add(files, BorderLayout.CENTER);\n+    filesPanel.add(filesButtons, BorderLayout.SOUTH);\n+    return filesPanel;\n+  }\n+  \n+  /**\n+   * The Flavors Panel shows the different formats (mime-types) that\n+   * data on the clipboard is available in. By clicking on a flavor\n+   * details about the representation class and object is given.\n+   */\n+  private Panel createFlavorsPanel()\n+  {\n+    Panel flavorsPanel = new Panel();\n+    flavorsPanel.setLayout(new BorderLayout());\n+    Label flavorsHeader = new Label(\"Flavors on clipboard:\");\n+    Toolkit t = Toolkit.getDefaultToolkit();\n+    Clipboard c = t.getSystemClipboard();\n+    DataFlavor[] dataflavors = c.getAvailableDataFlavors();\n+    flavors = new FlavorsComponent(dataflavors);\n+    details = new FlavorDetailsComponent(null);\n+    flavorsPanel.add(flavorsHeader, BorderLayout.NORTH);\n+    flavorsPanel.add(flavors, BorderLayout.CENTER);\n+    flavorsPanel.add(details, BorderLayout.SOUTH);\n+    return flavorsPanel;\n+  }\n+\n+  /**\n+   * FlavorListener implementation that updates the Flavors Panel\n+   * whenever a change in the mime-types available has been detected.\n+   */\n+  public void flavorsChanged(FlavorEvent event)\n+  {\n+    Toolkit t = Toolkit.getDefaultToolkit();\n+    Clipboard c = t.getSystemClipboard();\n+    DataFlavor[] dataflavors = c.getAvailableDataFlavors();\n+    flavors.setFlavors(dataflavors);\n+    details.setDataFlavor(null);\n+  }\n+\n+  /**\n+   * ItemChangeListener implementation that updates the flavor details\n+   * whenever the user selects a different representation of the data\n+   * available on the clipboard.\n+   */\n+  public void itemStateChanged(ItemEvent evt)\n+  {\n+    DataFlavor df = null;\n+    String s = flavors.getSelectedItem();\n+    if (s != null)\n+      {\n+\ttry\n+\t  {\n+\t    df = new DataFlavor(s);\n+\t  }\n+\tcatch (ClassNotFoundException cnfe)\n+\t  {\n+\t    cnfe.printStackTrace();\n+\t  }\n+      }\n+    details.setDataFlavor(df);\n+  }\n+  \n+  /**\n+   * ActionListener implementations that will copy or past data\n+   * to/from the clipboard when the user requests that for the text,\n+   * image, object of file component.\n+   */\n+  public void actionPerformed (ActionEvent evt)\n+  {\n+    Button b = (Button) evt.getSource();\n+    Toolkit t = Toolkit.getDefaultToolkit();\n+    Clipboard c = t.getSystemClipboard();\n+    if (b == copyText)\n+      c.setContents(new StringSelection(text.getText()), null);\n+\n+    if (b == pasteText)\n+      {\n+\tString s = null;\n+\ttry\n+\t  {\n+\t    s = (String) c.getData(DataFlavor.stringFlavor);\n+\t  }\n+\tcatch (UnsupportedFlavorException dfnse)\n+\t  {\n+\t  }\n+\tcatch (IOException ioe)\n+\t  {\n+\t  }\n+\tcatch (ClassCastException cce)\n+\t  {\n+\t  }\n+\tif (s == null)\n+\t  t.beep();\n+\telse\n+\t  text.setText(s);\n+      }\n+\n+    if (b == copyImage)\n+      c.setContents(new ImageSelection(image.getImage()), null);\n+\n+    if (b == pasteImage)\n+      {\n+\tImage i = null;\n+\ttry\n+\t  {\n+\t    i = (Image) c.getData(DataFlavor.imageFlavor);\n+\t  }\n+\tcatch (UnsupportedFlavorException dfnse)\n+\t  {\n+\t  }\n+\tcatch (IOException ioe)\n+\t  {\n+\t  }\n+\tcatch (ClassCastException cce)\n+\t  {\n+\t  }\n+\tif (i == null)\n+\t  t.beep();\n+\telse\n+\t  image.setImage(i);\n+      }\n+\n+    if (b == copyObject)\n+      c.setContents(new ObjectSelection(object.getObject()), null);\n+\n+    if (b == pasteObject)\n+      {\n+\tSerializable o = null;\n+\ttry\n+\t  {\n+\t    o = (Serializable) c.getData(ObjectSelection.objFlavor);\n+\t  }\n+\tcatch (UnsupportedFlavorException dfnse)\n+\t  {\n+\t  }\n+\tcatch (IOException ioe)\n+\t  {\n+\t  }\n+\tcatch (ClassCastException cce)\n+\t  {\n+\t  }\n+\tif (o == null)\n+\t  t.beep();\n+\telse\n+\t  object.setObject(o);\n+      }\n+\n+    if (b == copyFiles)\n+      c.setContents(new FilesSelection(files.getFiles()), null);\n+\n+    if (b == pasteFiles)\n+      {\n+\tjava.util.List fs = null;\n+\ttry\n+\t  {\n+\t    fs = (java.util.List) c.getData(DataFlavor.javaFileListFlavor);\n+\t  }\n+\tcatch (UnsupportedFlavorException dfnse)\n+\t  {\n+\t  }\n+\tcatch (IOException ioe)\n+\t  {\n+\t  }\n+\tcatch (ClassCastException cce)\n+\t  {\n+\t  }\n+\tif (fs == null)\n+\t  t.beep();\n+\telse\n+\t  files.setFiles(fs);\n+      }\n+  }\n+\n+  /**\n+   * Simple awt component that shows an settable image.\n+   */\n+  static class ImageComponent extends Component\n+  {\n+    private Image image;\n+\n+    ImageComponent(Image image)\n+    {\n+      setSize(20, 20);\n+      setImage(image);\n+    }\n+\n+    Image getImage()\n+    {\n+      return image;\n+    }\n+\n+    void setImage(Image image)\n+    {\n+      this.image = image;\n+      repaint();\n+    }\n+\n+    public void paint(Graphics g)\n+    {\n+      g.drawImage(image, 0, 0, getWidth(), getHeight(), this);\n+    }\n+  }\n+\n+  /**\n+   * Simple awt component that shows a settable Serializable object.\n+   */\n+  static class ObjectComponent extends TextArea\n+  {\n+    private Serializable object;\n+\n+    ObjectComponent(Serializable object)\n+    {\n+      super(\"\", 2, 80, TextArea.SCROLLBARS_NONE);\n+      setEditable(false);\n+      setEnabled(false);\n+      setObject(object);\n+    }\n+\n+    Serializable getObject()\n+    {\n+      return object;\n+    }\n+\n+    void setObject(Serializable object)\n+    {\n+      this.object = object;\n+      setText(\"Class: \" + object.getClass().getName()\n+\t      + \"\\n\"\n+\t      + \"toString(): \" + object.toString());\n+      repaint();\n+    }\n+  }\n+\n+  /**\n+   * Simple awt component that shows a settable list of Files.\n+   */\n+  static class FilesComponent extends List\n+  {\n+    private File[] files;\n+    \n+    FilesComponent(File[] files)\n+    {\n+      super(4, true);\n+      setFiles(files);\n+    }\n+    \n+    File[] getFiles()\n+    {\n+      String[] strings = getSelectedItems();\n+      if (strings == null || strings.length == 0)\n+\treturn (File[]) files.clone();\n+      \n+      File[] fs = new File[strings.length];\n+      for (int i = 0; i < strings.length; i++)\n+\tfs[i] = new File(strings[i]);\n+      return fs;\n+    }\n+    \n+    void setFiles(File[] files)\n+    {\n+      this.files = files;\n+      removeAll();\n+      for (int i = 0; i < files.length; i++)\n+        {\n+\t  addItem(files[i].toString());\n+\t  select(i);\n+        }\n+    }\n+    \n+    void setFiles(java.util.List list)\n+    {\n+      File[] fs = new File[list.size()];\n+      int i = 0;\n+      Iterator it = list.iterator();\n+      while (it.hasNext())\n+\tfs[i++] = (File) it.next();\n+      \n+      setFiles(fs);\n+    }\n+  }\n+\n+  /**\n+   * Simple awt component that shows a settable list of DataFlavors.\n+   */\n+  static class FlavorsComponent extends List\n+  {\n+    FlavorsComponent(DataFlavor[] flavors)\n+    {\n+      super(4);\n+      setFlavors(flavors);\n+    }\n+\n+    void setFlavors(DataFlavor[] flavors)\n+    {\n+      removeAll();\n+      for (int i = 0; i < flavors.length; i++)\n+\t{\n+\t  addItem(flavors[i].getMimeType());\n+\t}\n+    }\n+  }\n+\n+  /**\n+   * Simple awt component that shows the details for and an object as\n+   * found on the system clipboard as represented by a given\n+   * DataFlavor.\n+   */\n+  static class FlavorDetailsComponent extends TextArea\n+  {\n+    private DataFlavor df;\n+\n+    FlavorDetailsComponent(DataFlavor df)\n+    {\n+      super(\"\", 2, 80, TextArea.SCROLLBARS_NONE);\n+      setEditable(false);\n+      setEnabled(false);\n+      setDataFlavor(df);\n+    }\n+\n+    void setDataFlavor(DataFlavor df)\n+    {\n+      if (df == this.df\n+\t  || (df != null && df.equals(this.df)))\n+\treturn;\n+\n+      this.df = df;\n+\n+      if (df == null)\n+\tsetText(\"No flavor selected\");\n+      else\n+\t{\n+\t  Object o = null;\n+\t  Throwable exception = null;\n+\t  try\n+\t    {\n+\t      Toolkit t = Toolkit.getDefaultToolkit();\n+\t      Clipboard c = t.getSystemClipboard();\n+\t      o = c.getData(df);\n+\t    }\n+\t  catch (Throwable t)\n+\t    {\n+\t      exception = t;\n+\t    }\n+\t  if (o != null)\n+\t    {\n+\t      setText(\"Data: \" + o.getClass().getName()\n+\t\t      + \"\\n\"\n+\t\t      + o);\n+\t    }\n+\t  else\n+\t    {\n+\t      setText(\"Error retrieving: \" + df\n+\t\t      + \"\\n\"\n+\t\t      + exception != null ? exception.toString() : \"\");\n+\t    }\n+\t}\n+      repaint();\n+    }\n+  }\n+\n+  /**\n+   * Helper class to put an Image on a clipboard as\n+   * DataFlavor.imageFlavor.\n+   */\n+  static class ImageSelection implements Transferable\n+  {\n+    private final Image img;\n+\n+    ImageSelection(Image img)\n+    {\n+      this.img = img;\n+    }\n+\n+    static DataFlavor[] flavors = new DataFlavor[] { DataFlavor.imageFlavor };\n+    public DataFlavor[] getTransferDataFlavors()\n+    {\n+      return (DataFlavor[]) flavors.clone();\n+    }\n+\n+    public boolean isDataFlavorSupported(DataFlavor flavor)\n+    {\n+      return flavor.equals(DataFlavor.imageFlavor);\n+    }\n+\n+    public Object getTransferData(DataFlavor flavor)\n+      throws UnsupportedFlavorException\n+    {\n+      if (!isDataFlavorSupported(flavor))\n+\tthrow new UnsupportedFlavorException(flavor);\n+\n+      return img;\n+    }\n+  }\n+\n+  /**\n+   * Helper class to put an Object on a clipboard as Serializable\n+   * object.\n+   */\n+  static class ObjectSelection implements Transferable\n+  {\n+    private final Serializable obj;\n+\n+    ObjectSelection(Serializable obj)\n+    {\n+      this.obj = obj;\n+    }\n+\n+    static DataFlavor objFlavor = new DataFlavor(Serializable.class,\n+\t\t\t\t\t\t \"Serialized Object\");\n+    static DataFlavor[] flavors = new DataFlavor[] { objFlavor };\n+    public DataFlavor[] getTransferDataFlavors()\n+    {\n+      return (DataFlavor[]) flavors.clone();\n+    }\n+\n+    public boolean isDataFlavorSupported(DataFlavor flavor)\n+    {\n+      return flavor.equals(objFlavor);\n+    }\n+\n+    public Object getTransferData(DataFlavor flavor)\n+      throws UnsupportedFlavorException\n+    {\n+      if (!isDataFlavorSupported(flavor))\n+\tthrow new UnsupportedFlavorException(flavor);\n+\n+      return obj;\n+    }\n+  }\n+\n+  /**\n+   * Helper class to put a List of Files on the clipboard as\n+   * DataFlavor.javaFileListFlavor.\n+   */\n+  static class FilesSelection implements Transferable\n+  {\n+    private final File[] files;\n+\n+    FilesSelection(File[] files)\n+    {\n+      this.files = files;\n+    }\n+\n+    static DataFlavor[] flavors = new DataFlavor[]\n+      { DataFlavor.javaFileListFlavor };\n+    public DataFlavor[] getTransferDataFlavors()\n+    {\n+      return (DataFlavor[]) flavors.clone();\n+    }\n+\n+    public boolean isDataFlavorSupported(DataFlavor flavor)\n+    {\n+      return flavor.equals(DataFlavor.javaFileListFlavor);\n+    }\n+\n+    public Object getTransferData(DataFlavor flavor)\n+      throws UnsupportedFlavorException\n+    {\n+      if (!isDataFlavorSupported(flavor))\n+\tthrow new UnsupportedFlavorException(flavor);\n+\n+      return Arrays.asList(files);\n+    }\n+  }\n+}"}, {"sha": "ee2d7bfec4a45a4ca93b80261ce1d2d38782e7a7", "filename": "libjava/classpath/examples/gnu/classpath/examples/jawt/DemoJAWT.c", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fexamples%2Fgnu%2Fclasspath%2Fexamples%2Fjawt%2FDemoJAWT.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fexamples%2Fgnu%2Fclasspath%2Fexamples%2Fjawt%2FDemoJAWT.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fexamples%2Fgnu%2Fclasspath%2Fexamples%2Fjawt%2FDemoJAWT.c?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,150 @@\n+/* DemoJAWT.c -- native portion of AWT Native Interface demo\n+   Copyright (C) 2005  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath examples.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA. */\n+\n+#include \"DemoJAWT.h\"\n+#include \"jawt_md.h\"\n+#include <string.h>\n+\n+JNIEXPORT void JNICALL\n+Java_gnu_classpath_examples_jawt_DemoJAWT_paintIt (JNIEnv* env,\n+\t\t\t\t\t\t   jobject canvas,\n+\t\t\t\t\t\t   jobject graphics,\n+\t\t\t\t\t\t   jboolean on)\n+{\n+  JAWT awt;\n+  JAWT_DrawingSurface* surface;\n+  JAWT_DrawingSurfaceInfo* surface_info;\n+  JAWT_X11DrawingSurfaceInfo* surface_info_x11;\n+  jint lock;\n+  GC gc;\n+  int c;\n+  char* test_string = \"JAWT\";\n+  XColor orange;\n+  XColor yellow;\n+  XColor blue;\n+  Display* display;\n+  Drawable drawable;\n+  Status status;\n+\n+  awt.version = JAWT_VERSION_1_3;\n+  if (JAWT_GetAWT (env, &awt) == JNI_FALSE)\n+    {\n+      printf (\"couldn't find AWT\\n\");\n+      return;\n+    }\n+\n+  surface = awt.GetDrawingSurface (env, canvas);\n+  if (surface == NULL)\n+    {\n+      printf (\"drawing surface is NULL\\n\");\n+      return;\n+    }\n+\n+  lock = surface->Lock (surface);\n+  if ((lock & JAWT_LOCK_ERROR) != 0)\n+    {\n+      printf (\"couldn't lock drawing surface\\n\");\n+      awt.FreeDrawingSurface (surface);\n+      return;\n+    }\n+\n+  surface_info = surface->GetDrawingSurfaceInfo (surface);\n+  if (surface_info == NULL)\n+    {\n+      printf (\"couldn't get surface information\\n\");\n+      surface->Unlock (surface);\n+      awt.FreeDrawingSurface (surface);\n+      return;\n+    }\n+\n+  surface_info_x11 = (JAWT_X11DrawingSurfaceInfo*) surface_info->platformInfo;\n+\n+  display = surface_info_x11->display;\n+  drawable = surface_info_x11->drawable;\n+\n+  gc = XCreateGC (display, drawable, 0, 0);\n+  XSetBackground (display, gc, 0);\n+\n+  orange.red = 254 * 65535 / 255;\n+  orange.green = 90 * 65535 / 255;\n+  orange.blue = 16 * 65535 / 255;\n+\n+  /* assume color lookups succeed */\n+  status = XAllocColor (display, DefaultColormap (display,\n+\t\t\t\t\t\t  DefaultScreen (display)),\n+\t\t\t&orange);\n+\n+  if (!status)\n+    {\n+      printf (\"color allocation failed\\n\");\n+      goto cleanup;\n+    }\n+\n+  yellow.red = 255 * 65535 / 255;\n+  yellow.green = 255 * 65535 / 255;\n+  yellow.blue = 0 * 65535 / 255;\n+\n+  XAllocColor (display, DefaultColormap (display,\n+\t\t\t\t\t DefaultScreen (display)),\n+\t       &yellow);\n+\n+  if (!status)\n+    {\n+      printf (\"color allocation failed\\n\");\n+      goto cleanup;\n+    }\n+\n+  blue.red = 16 * 65535 / 255;\n+  blue.green = 30 * 65535 / 255;\n+  blue.blue = 137 * 65535 / 255;\n+\n+  XAllocColor (display, DefaultColormap (display,\n+\t\t\t\t\t DefaultScreen (display)),\n+\t\t&blue);\n+\n+  if (!status)\n+    {\n+      printf (\"color allocation failed\\n\");\n+      goto cleanup;\n+    }\n+\n+  for (c = 5; c >= 0; c--)\n+    {\n+      if (c % 2 == on)\n+\tXSetForeground (display, gc, yellow.pixel);\n+      else\n+\tXSetForeground (display, gc, orange.pixel);\n+\n+      XFillArc (display, drawable, gc, 140 - c * 15, 140 - c * 15, c * 30, c * 30, 0, 360 * 64);\n+    }\n+\n+  XSetForeground (display, gc, blue.pixel);\n+  XDrawString (display, drawable,\n+\t       gc, 129, 145, test_string, strlen (test_string));\n+\n+ cleanup:\n+  XFreeGC (display, gc);\n+\n+  surface->FreeDrawingSurfaceInfo (surface_info);\n+\n+  surface->Unlock (surface);\n+\n+  awt.FreeDrawingSurface (surface);\n+}"}, {"sha": "ff688964be7cc78be9e0542fe0936188e8aedfff", "filename": "libjava/classpath/examples/gnu/classpath/examples/jawt/DemoJAWT.java", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fexamples%2Fgnu%2Fclasspath%2Fexamples%2Fjawt%2FDemoJAWT.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fexamples%2Fgnu%2Fclasspath%2Fexamples%2Fjawt%2FDemoJAWT.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fexamples%2Fgnu%2Fclasspath%2Fexamples%2Fjawt%2FDemoJAWT.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,77 @@\n+/* DemoJAWT.java -- AWT Native Interface demo\n+   Copyright (C) 2005  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath examples.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA. */\n+\n+package gnu.classpath.examples.jawt;\n+\n+import java.awt.*;\n+import java.awt.event.*;\n+\n+public class DemoJAWT extends Canvas\n+{\n+  static\n+  {\n+    System.loadLibrary (\"DemoJAWT\");\n+  }\n+\n+  public native void paintIt (Graphics g, boolean on);\n+\n+  public void paint (Graphics g)\n+  {\n+    paintIt (g, on);\n+  }\n+\n+  private boolean on;\n+\n+  public static void main (String[] args)\n+  {\n+    Frame f = new Frame (\"GNU Classpath JAWT Demo\");\n+\n+    f.setBounds (0, 0, 300, 300);\n+\n+    f.setResizable (false);\n+\n+    DemoJAWT jawtDemo = new DemoJAWT ();\n+    f.add (jawtDemo);\n+\n+    f.addWindowListener (new WindowAdapter ()\n+      {\n+\tpublic void windowClosing (WindowEvent evt)\n+\t{\n+\t  System.exit (0);\n+\t}\n+      });\n+\n+    f.show ();\n+\n+    while (true)\n+    {\n+      try\n+\t{\n+\t  Thread.sleep (500);\n+\t}\n+      catch (InterruptedException ie)\n+\t{\n+\t  // ignored\n+\t}\n+      jawtDemo.on = ! jawtDemo.on;\n+      f.repaint();\n+    }\n+  }\n+}"}, {"sha": "0c787ddc2df0256c76dd3b5586e6d686facb4c1c", "filename": "libjava/classpath/gnu/CORBA/CDR/noHeaderInput.java", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FCDR%2FnoHeaderInput.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FCDR%2FnoHeaderInput.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FCDR%2FnoHeaderInput.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,166 @@\n+/* noHeaderInput.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.CDR;\n+\n+import org.omg.CORBA.CustomMarshal;\n+import org.omg.CORBA.DataInputStream;\n+import org.omg.CORBA.MARSHAL;\n+import org.omg.CORBA.portable.BoxedValueHelper;\n+import org.omg.CORBA.portable.Streamable;\n+import org.omg.CORBA.portable.ValueFactory;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Substitutes the main stream in factories when the header is already\n+ * behind. Overrides methods that may be invoked from the factory,\n+ * forcing not to read the header if called first time on this stream.\n+ *\n+ * This stream reverts to default behavior if one or more call are\n+ * made (reading value types that are nested fields of the value type).\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+class noHeaderInput\n+  extends cdrBufInput\n+  implements DataInputStream\n+{\n+  /**\n+   * If true, this is not the first call.\n+   */\n+  boolean notFirst;\n+\n+  /**\n+   * Create an instance, reading from the given buffer.\n+   */\n+  public noHeaderInput(byte[] buffer)\n+  {\n+    super(buffer);\n+  }\n+\n+  /**\n+   * Read when knowning the class instance.\n+   */\n+  public Serializable read_value(Class clz)\n+  {\n+    if (notFirst)\n+      return super.read_value(clz);\n+    else\n+      {\n+        try\n+          {\n+            notFirst = true;\n+            return read_value((Serializable) clz.newInstance());\n+          }\n+        catch (Exception ex)\n+          {\n+            MARSHAL m = new MARSHAL(\"Unable to create an instance\");\n+            m.initCause(ex);\n+            throw m;\n+          }\n+      }\n+  }\n+\n+  /**\n+   * Tries to read using boxed value helper.\n+   */\n+  public Serializable read_value(BoxedValueHelper helper)\n+  {\n+    if (notFirst)\n+      return super.read_value(helper);\n+    else\n+      {\n+        notFirst = true;\n+        return helper.read_value(this);\n+      }\n+  }\n+\n+  /**\n+   * Tries to locate a factory using repository id.\n+   */\n+  public Serializable read_value(String repository_id)\n+  {\n+    if (notFirst)\n+      return super.read_value(repository_id);\n+    else\n+      {\n+        notFirst = true;\n+\n+        ValueFactory factory =\n+          ((org.omg.CORBA_2_3.ORB) orb()).lookup_value_factory(repository_id);\n+        if (factory == null)\n+          throw new MARSHAL(\"No factory\");\n+        return factory.read_value(this);\n+      }\n+  }\n+\n+  /**\n+   * Try to read when having an unitialised value.\n+   */\n+  public Serializable read_value(Serializable value)\n+  {\n+    if (notFirst)\n+      return super.read_value(value);\n+    else\n+      {\n+        notFirst = true;\n+\n+        // The user-defines io operations are implemented.\n+        if (value instanceof CustomMarshal)\n+          {\n+            CustomMarshal marsh = (CustomMarshal) value;\n+            try\n+              {\n+                marsh.unmarshal((DataInputStream) this);\n+              }\n+            catch (ClassCastException ex)\n+              {\n+                Vio.incorrect_plug_in(ex);\n+              }\n+          }\n+        else\n+        // The IDL-generated io operations are implemented.\n+        if (value instanceof Streamable)\n+          {\n+            ((Streamable) value)._read(this);\n+          }\n+        return value;\n+      }\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "47176c4b589c17a1698cdaadfbe737361469d870", "filename": "libjava/classpath/gnu/CORBA/DynAn/abstractDynAny.java", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FabstractDynAny.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FabstractDynAny.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FabstractDynAny.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,177 @@\n+/* abstractDynAny.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.DynAn;\n+\n+import gnu.CORBA.typeNamer;\n+\n+import org.omg.CORBA.Any;\n+import org.omg.CORBA.LocalObject;\n+import org.omg.CORBA.ORB;\n+import org.omg.CORBA.TypeCode;\n+import org.omg.DynamicAny.DynAnyPackage.TypeMismatch;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * The top of our DynAny implementation, this class provides ORB that is\n+ * required to create anys and factory that is required to initialise DynAnys.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public abstract class abstractDynAny\n+  extends LocalObject\n+  implements Serializable\n+{\n+  /**\n+   * Use serialVersionUID for interoperability.\n+   */\n+  private static final long serialVersionUID = 1;\n+\n+  /**\n+   * The \"initial final_type\" that can be an alias of the known final_type.\n+   */\n+  public TypeCode official_type;\n+\n+  /**\n+   * The \"basic\" final_type to that the final_type finally evaluates.\n+   */\n+  public final TypeCode final_type;\n+\n+  /**\n+   * The DynAny factory, required in initializations.\n+   */\n+  public final gnuDynAnyFactory factory;\n+\n+  /**\n+   * The ORB, to that this DynAny belongs.\n+   */\n+  public final ORB orb;\n+\n+  /**\n+   * The minor code, indicating the error, related to work with non - GNU\n+   * Classpath DynAny.\n+   */\n+  short MINOR = 8148;\n+\n+  /**\n+   * The message about the empty structure or exception.\n+   */\n+  static final String EMPTY = \"Empty structure with no fields.\";\n+\n+  /**\n+   * The message about the structure or exception size mismatch.\n+   */\n+  static final String SIZE = \"Size mismatch.\";\n+\n+  /**\n+   * The message about the content of this DynAny being equal to\n+   * <code>null</code>\n+   */\n+  static final String ISNULL = \"The content is null\";\n+\n+  /**\n+   * The change value listener.\n+   */\n+  valueChangedListener listener;\n+\n+  /**\n+   * Create the abstract dyn any.\n+   */\n+  public abstractDynAny(TypeCode oType, TypeCode aType,\n+                        gnuDynAnyFactory aFactory, ORB anOrb\n+                       )\n+  {\n+    official_type = oType;\n+    final_type = aType;\n+    factory = aFactory;\n+    orb = anOrb;\n+  }\n+\n+  /**\n+   * Get the typecode.\n+   */\n+  public TypeCode type()\n+  {\n+    return official_type;\n+  }\n+\n+  /**\n+   * Create the Any.\n+   */\n+  public Any createAny()\n+  {\n+    return orb.create_any();\n+  }\n+\n+  /**\n+   * The \"value changed\" listener.\n+   */\n+  protected void valueChanged()\n+  {\n+    if (listener != null)\n+      listener.changed();\n+  }\n+\n+  /**\n+   * Check the type.\n+   */\n+  void checkType(TypeCode expected, TypeCode actual)\n+          throws TypeMismatch\n+  {\n+    if (!expected.equal(actual))\n+      throw new TypeMismatch(typeMismatch(expected, actual));\n+  }\n+\n+  /**\n+   * Format \"Type mismatch\" string.\n+   */\n+  String typeMismatch(TypeCode expected, TypeCode actual)\n+  {\n+    return typeNamer.nameIt(expected) + \" expected \" +\n+           typeNamer.nameIt(actual);\n+  }\n+\n+  /**\n+   * Format \"size mismatch\" string.\n+   */\n+  String sizeMismatch(int here, int other)\n+  {\n+    return \"Size mismatch, \" + other + \" (expected \" + here + \")\";\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "8d8b7a559b14754680a53974d4b5fb63fd8301a6", "filename": "libjava/classpath/gnu/CORBA/DynAn/abstractRecord.java", "status": "added", "additions": 405, "deletions": 0, "changes": 405, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FabstractRecord.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FabstractRecord.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FabstractRecord.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,405 @@\n+/* abstractRecord.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.DynAn;\n+\n+import gnu.CORBA.Unexpected;\n+import gnu.CORBA.holderFactory;\n+\n+import org.omg.CORBA.Any;\n+import org.omg.CORBA.ORB;\n+import org.omg.CORBA.TCKind;\n+import org.omg.CORBA.TypeCode;\n+import org.omg.CORBA.TypeCodePackage.BadKind;\n+import org.omg.CORBA.TypeCodePackage.Bounds;\n+import org.omg.CORBA.portable.Streamable;\n+import org.omg.DynamicAny.DynAny;\n+import org.omg.DynamicAny.DynAnyPackage.InvalidValue;\n+import org.omg.DynamicAny.DynAnyPackage.TypeMismatch;\n+import org.omg.DynamicAny.DynStruct;\n+import org.omg.DynamicAny.DynValueCommonOperations;\n+import org.omg.DynamicAny.NameDynAnyPair;\n+import org.omg.DynamicAny.NameValuePair;\n+\n+import java.io.Serializable;\n+\n+import java.lang.reflect.Field;\n+\n+/**\n+ * A shared base for both dynamic structure an dynamic value final_type.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public abstract class abstractRecord\n+  extends anyDivideable\n+  implements DynAny, Serializable\n+{\n+  /**\n+   * Use serialVersionUID for interoperability.\n+   */\n+  private static final long serialVersionUID = 1;\n+  String[] fNames;\n+\n+  /**\n+   * Creates the structure with the given typecode.\n+   *\n+   * @param fields The DynAny's, representing the fields of the structure.\n+   */\n+  public abstractRecord(TypeCode oType, TypeCode aType,\n+                        gnuDynAnyFactory aFactory, ORB anOrb\n+                       )\n+  {\n+    super(oType, aType, aFactory, anOrb);\n+  }\n+\n+  /** @inheritDoc */\n+  public TCKind current_member_kind()\n+                             throws TypeMismatch, InvalidValue\n+  {\n+    if (array.length == 0)\n+      throw new TypeMismatch(EMPTY);\n+    try\n+      {\n+        return final_type.member_type(pos).kind();\n+      }\n+    catch (BadKind e)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(e);\n+        throw t;\n+      }\n+    catch (Bounds e)\n+      {\n+        InvalidValue t = new InvalidValue();\n+        t.initCause(e);\n+        throw t;\n+      }\n+  }\n+\n+  /** @inheritDoc */\n+  public String current_member_name()\n+                             throws TypeMismatch, InvalidValue\n+  {\n+    if (array.length == 0)\n+      throw new TypeMismatch(EMPTY);\n+    try\n+      {\n+        return final_type.member_name(pos);\n+      }\n+    catch (BadKind e)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(e);\n+        throw t;\n+      }\n+    catch (Bounds e)\n+      {\n+        InvalidValue t = new InvalidValue();\n+        t.initCause(e);\n+        throw t;\n+      }\n+  }\n+\n+  /**\n+   * Get content of the structure. This method must be defined on a different\n+   * name because get_members_as_dyn_any() throws exception only in some of the\n+   * supported interfaces.\n+   */\n+  public NameDynAnyPair[] gnu_get_members_as_dyn_any()\n+  {\n+    NameDynAnyPair[] r = new NameDynAnyPair[ array.length ];\n+    for (int i = 0; i < r.length; i++)\n+      {\n+        try\n+          {\n+            r [ i ] = new NameDynAnyPair(fNames [ i ], array [ i ]);\n+          }\n+        catch (Exception ex)\n+          {\n+            throw new Unexpected(ex);\n+          }\n+      }\n+    return r;\n+  }\n+\n+  /**\n+   * Get content of the structure. This method must be defined on a different\n+   * name because get_members_as_dyn_any() throws exception only in some of the\n+   * supported interfaces.\n+   */\n+  public NameValuePair[] gnu_get_members()\n+  {\n+    NameValuePair[] r = new NameValuePair[ array.length ];\n+    for (int i = 0; i < r.length; i++)\n+      {\n+        try\n+          {\n+            r [ i ] = new NameValuePair(fNames [ i ], array [ i ].to_any());\n+          }\n+        catch (Exception ex)\n+          {\n+            throw new Unexpected(ex);\n+          }\n+      }\n+    return r;\n+  }\n+\n+  /**\n+   * Set members from the provided array.\n+   */\n+  public void set_members_as_dyn_any(NameDynAnyPair[] value)\n+                              throws TypeMismatch, InvalidValue\n+  {\n+    if (value.length != array.length)\n+      throw new InvalidValue(sizeMismatch(array.length, value.length));\n+\n+    for (int i = 0; i < value.length; i++)\n+      {\n+        DynAny dynAny = value [ i ].value;\n+        checkType(dynAny.type(), i);\n+        checkName(value [ i ].id, i);\n+\n+        array [ i ] = dynAny;\n+      }\n+    pos = 0;\n+  }\n+\n+  /**\n+   * Check the name at the given position (\"\" matches everything).\n+   */\n+  private void checkName(String xName, int i)\n+                  throws TypeMismatch\n+  {\n+    if (xName.length() > 0 && fNames [ i ].length() > 0)\n+      if (!xName.equals(fNames [ i ]))\n+        throw new TypeMismatch(\"Field name mismatch \" + xName + \" expected \" +\n+                               fNames [ i ]\n+                              );\n+  }\n+\n+  /**\n+   * Check the type at the given position.\n+   */\n+  private void checkType(TypeCode t, int i)\n+                  throws TypeMismatch\n+  {\n+    if (!array [ i ].type().equal(t))\n+      throw new TypeMismatch(typeMismatch(array [ i ].type(), t) + \" field \" +\n+                             i\n+                            );\n+  }\n+\n+  /**\n+   * Set members from the provided array.\n+   */\n+  public void set_members(NameValuePair[] value)\n+                   throws TypeMismatch, InvalidValue\n+  {\n+    if (value.length != array.length)\n+      throw new InvalidValue(sizeMismatch(array.length, value.length));\n+\n+    for (int i = 0; i < value.length; i++)\n+      {\n+        Any any = value [ i ].value;\n+        checkType(any.type(), i);\n+        checkName(value [ i ].id, i);\n+\n+        array [ i ].from_any(any);\n+      }\n+    pos = 0;\n+  }\n+\n+  /** @inheritDoc */\n+  public void assign(DynAny from)\n+              throws TypeMismatch\n+  {\n+    checkType(official_type, from.type());\n+    if (from instanceof DynStruct)\n+      {\n+        try\n+          {\n+            set_members_as_dyn_any(((DynStruct) from).get_members_as_dyn_any());\n+          }\n+        catch (InvalidValue e)\n+          {\n+            TypeMismatch t = new TypeMismatch(\"Invalid value\");\n+            t.initCause(e);\n+            throw t;\n+          }\n+      }\n+    else\n+      throw new TypeMismatch(\"Not a DynStruct\");\n+  }\n+\n+  /**\n+   * Create a copy.\n+   */\n+  public DynAny copy()\n+  {\n+    DynAny[] c = new DynAny[ array.length ];\n+    for (int i = 0; i < c.length; i++)\n+      {\n+        c [ i ] = array [ i ].copy();\n+      }\n+\n+    abstractRecord d = newInstance(official_type, final_type, factory, orb);\n+    d.array = c;\n+    return d;\n+  }\n+\n+  /**\n+   * Create a new instance when copying.\n+   */\n+  protected abstract abstractRecord newInstance(TypeCode oType, TypeCode aType,\n+                                                gnuDynAnyFactory aFactory,\n+                                                ORB anOrb\n+                                               );\n+\n+  /**\n+   * Done via reflection.\n+   */\n+  public Any to_any()\n+  {\n+    try\n+      {\n+        Streamable sHolder = holderFactory.createHolder(official_type);\n+\n+        Class sHolderClass = sHolder.getClass();\n+        Field sHolderValue = sHolderClass.getField(\"value\");\n+        Class sClass = sHolderValue.getType();\n+\n+        Object structure = sClass.newInstance();\n+        Object member;\n+        Any am;\n+        Field vread;\n+        Field vwrite;\n+        Streamable memberHolder;\n+\n+        for (int i = 0; i < array.length; i++)\n+          {\n+            am = array [ i ].to_any();\n+            memberHolder = am.extract_Streamable();\n+            vwrite = structure.getClass().getField(final_type.member_name(i));\n+            vread = memberHolder.getClass().getField(\"value\");\n+            member = vread.get(memberHolder);\n+            vwrite.set(structure, member);\n+          }\n+\n+        Any g = createAny();\n+        sHolderValue.set(sHolder, structure);\n+        g.insert_Streamable(sHolder);\n+        g.type(official_type);\n+        return g;\n+      }\n+    catch (Exception e)\n+      {\n+        throw new Unexpected(e);\n+      }\n+  }\n+\n+  /**\n+   * Done via reflection.\n+   */\n+  public void from_any(Any an_any)\n+                throws TypeMismatch, InvalidValue\n+  {\n+    checkType(official_type, an_any.type());\n+    try\n+      {\n+        Streamable s = an_any.extract_Streamable();\n+        if (s == null)\n+          {\n+            if (this instanceof DynValueCommonOperations)\n+              {\n+                ((DynValueCommonOperations) this).set_to_null();\n+                return;\n+              }\n+            else\n+              throw new InvalidValue(ISNULL);\n+          }\n+\n+        Object structure = s.getClass().getField(\"value\").get(s);\n+        if (structure == null && (this instanceof DynValueCommonOperations))\n+          {\n+            ((DynValueCommonOperations) this).set_to_null();\n+            return;\n+          }\n+\n+        Any member;\n+        Streamable holder;\n+        Object field;\n+        TypeCode fType;\n+        Field fField;\n+\n+        for (int i = 0; i < array.length; i++)\n+          {\n+            fField = structure.getClass().getField(fNames [ i ]);\n+            field = fField.get(structure);\n+            fType = array [ i ].type();\n+            holder = holderFactory.createHolder(fType);\n+\n+            member = createAny();\n+            holder.getClass().getField(\"value\").set(holder, field);\n+            member.insert_Streamable(holder);\n+            member.type(fType);\n+\n+            array [ i ].from_any(member);\n+          }\n+\n+        if (this instanceof DynValueCommonOperations)\n+          ((DynValueCommonOperations) this).set_to_value();\n+      }\n+    catch (InvalidValue v)\n+      {\n+        throw v;\n+      }\n+    catch (NoSuchFieldException ex)\n+      {\n+        TypeMismatch v =\n+          new TypeMismatch(\"holder value does not match typecode\");\n+        v.initCause(ex);\n+        throw v;\n+      }\n+    catch (Exception ex)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(ex);\n+        throw t;\n+      }\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "5f52c8078eb7ac2c9bdc5af2c7849f10951f4bcf", "filename": "libjava/classpath/gnu/CORBA/DynAn/anyDivideable.java", "status": "added", "additions": 514, "deletions": 0, "changes": 514, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FanyDivideable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FanyDivideable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FanyDivideable.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,514 @@\n+/* anyDivideable.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.DynAn;\n+\n+import gnu.CORBA.typeNamer;\n+\n+import org.omg.CORBA.Any;\n+import org.omg.CORBA.CompletionStatus;\n+import org.omg.CORBA.ORB;\n+import org.omg.CORBA.Object;\n+import org.omg.CORBA.TypeCode;\n+import org.omg.CORBA.UNKNOWN;\n+import org.omg.DynamicAny.DynAny;\n+import org.omg.DynamicAny.DynAnyPackage.InvalidValue;\n+import org.omg.DynamicAny.DynAnyPackage.TypeMismatch;\n+import org.omg.DynamicAny.DynValueCommon;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Provides a base for DynAnys, having multiple components.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public abstract class anyDivideable\n+  extends abstractDynAny\n+  implements Serializable\n+{\n+  /**\n+   * Use serialVersionUID for interoperability.\n+   */\n+  private static final long serialVersionUID = 1;\n+\n+  /**\n+   * The array of the components that in general case may have different\n+   * final_type.\n+   */\n+  protected DynAny[] array;\n+\n+  /**\n+   * The internal pointer.\n+   */\n+  protected int pos = 0;\n+\n+  public anyDivideable(TypeCode oType, TypeCode aType,\n+                       gnuDynAnyFactory aFactory, ORB anOrb\n+                      )\n+  {\n+    super(oType, aType, aFactory, anOrb);\n+  }\n+\n+  /**\n+   * Advance forward.\n+   */\n+  public boolean next()\n+  {\n+    pos++;\n+    return array.length > pos;\n+  }\n+\n+  /**\n+   * Set zero position.\n+   */\n+  public void rewind()\n+  {\n+    pos = 0;\n+  }\n+\n+  /**\n+   * Set a position.\n+   */\n+  public boolean seek(int p)\n+  {\n+    pos = p;\n+    return pos >= 0 && array.length > pos;\n+  }\n+\n+  /**\n+   * Get the insertion point as DynAny. This method may throw exceptions if the\n+   * current insertion point does not support reading or insertion of the\n+   * primitive types.\n+   *\n+   * @return the focused component, from where the primitve value can be read or\n+   * where it can be inserted.\n+   * @throws InvalidValue if the primitive value cannot be inserted at the given\n+   * point.\n+   */\n+  protected DynAny focused()\n+                    throws InvalidValue, TypeMismatch\n+  {\n+    if (pos >= 0 && pos < array.length)\n+      {\n+        if (array [ pos ].component_count() == 0)\n+          return array [ pos ];\n+        else\n+          throw new TypeMismatch(\"Multiple coponents at \" + pos);\n+      }\n+    else\n+      throw new InvalidValue(\"Out of bounds at \" + pos + \" valid 0..\" +\n+                             (array.length - 1)\n+                            );\n+  }\n+\n+  /** {@inheritDoc} */\n+  public int component_count()\n+  {\n+    return array.length;\n+  }\n+\n+  /**\n+   * Return the second (enclosed any) that is stored in the wrapped Any.\n+   */\n+  public Any get_any()\n+              throws TypeMismatch, InvalidValue\n+  {\n+    return focused().get_any();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public boolean get_boolean()\n+                      throws TypeMismatch, InvalidValue\n+  {\n+    return focused().get_boolean();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public char get_char()\n+                throws TypeMismatch, InvalidValue\n+  {\n+    return focused().get_char();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public double get_double()\n+                    throws TypeMismatch, InvalidValue\n+  {\n+    return focused().get_double();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public float get_float()\n+                  throws TypeMismatch, InvalidValue\n+  {\n+    return focused().get_float();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public int get_long()\n+               throws TypeMismatch, InvalidValue\n+  {\n+    return focused().get_long();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public long get_longlong()\n+                    throws TypeMismatch, InvalidValue\n+  {\n+    return focused().get_longlong();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public byte get_octet()\n+                 throws TypeMismatch, InvalidValue\n+  {\n+    return focused().get_octet();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public Object get_reference()\n+                       throws TypeMismatch, InvalidValue\n+  {\n+    return focused().get_reference();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public short get_short()\n+                  throws TypeMismatch, InvalidValue\n+  {\n+    return focused().get_short();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public String get_string()\n+                    throws TypeMismatch, InvalidValue\n+  {\n+    return focused().get_string();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public TypeCode get_typecode()\n+                        throws TypeMismatch, InvalidValue\n+  {\n+    return focused().get_typecode();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public int get_ulong()\n+                throws TypeMismatch, InvalidValue\n+  {\n+    return focused().get_ulong();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public long get_ulonglong()\n+                     throws TypeMismatch, InvalidValue\n+  {\n+    return focused().get_ulonglong();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public short get_ushort()\n+                   throws TypeMismatch, InvalidValue\n+  {\n+    return focused().get_ushort();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public Serializable get_val()\n+                       throws TypeMismatch, InvalidValue\n+  {\n+    if (pos >= 0 && pos < array.length)\n+      {\n+        if (array [ pos ] instanceof DynValueCommon)\n+          return array [ pos ].get_val();\n+        else\n+          throw new TypeMismatch();\n+      }\n+    else\n+      throw new InvalidValue(\"Out of bounds at \" + pos + \" valid 0..\" +\n+                             (array.length - 1)\n+                            );\n+  }\n+\n+  /** {@inheritDoc} */\n+  public char get_wchar()\n+                 throws TypeMismatch, InvalidValue\n+  {\n+    return focused().get_wchar();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public String get_wstring()\n+                     throws TypeMismatch, InvalidValue\n+  {\n+    return focused().get_wstring();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_any(Any a_x)\n+                  throws TypeMismatch, InvalidValue\n+  {\n+    focused().insert_any(a_x);\n+    valueChanged();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_boolean(boolean a_x)\n+                      throws InvalidValue, TypeMismatch\n+  {\n+    focused().insert_boolean(a_x);\n+    valueChanged();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_char(char a_x)\n+                   throws InvalidValue, TypeMismatch\n+  {\n+    focused().insert_char(a_x);\n+    valueChanged();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_double(double a_x)\n+                     throws InvalidValue, TypeMismatch\n+  {\n+    focused().insert_double(a_x);\n+    valueChanged();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_float(float a_x)\n+                    throws InvalidValue, TypeMismatch\n+  {\n+    focused().insert_float(a_x);\n+    valueChanged();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_long(int a_x)\n+                   throws InvalidValue, TypeMismatch\n+  {\n+    focused().insert_long(a_x);\n+    valueChanged();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_longlong(long a_x)\n+                       throws InvalidValue, TypeMismatch\n+  {\n+    focused().insert_longlong(a_x);\n+    valueChanged();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_octet(byte a_x)\n+                    throws InvalidValue, TypeMismatch\n+  {\n+    focused().insert_octet(a_x);\n+    valueChanged();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_reference(Object a_x)\n+                        throws InvalidValue, TypeMismatch\n+  {\n+    focused().insert_reference(a_x);\n+    valueChanged();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_short(short a_x)\n+                    throws InvalidValue, TypeMismatch\n+  {\n+    focused().insert_short(a_x);\n+    valueChanged();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_string(String a_x)\n+                     throws InvalidValue, TypeMismatch\n+  {\n+    focused().insert_string(a_x);\n+    valueChanged();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_typecode(TypeCode a_x)\n+                       throws InvalidValue, TypeMismatch\n+  {\n+    focused().insert_typecode(a_x);\n+    valueChanged();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_ulong(int a_x)\n+                    throws InvalidValue, TypeMismatch\n+  {\n+    focused().insert_ulong(a_x);\n+    valueChanged();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_ulonglong(long a_x)\n+                        throws InvalidValue, TypeMismatch\n+  {\n+    focused().insert_ulonglong(a_x);\n+    valueChanged();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_ushort(short a_x)\n+                     throws InvalidValue, TypeMismatch\n+  {\n+    focused().insert_ushort(a_x);\n+    valueChanged();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_val(Serializable a_x)\n+                  throws InvalidValue, TypeMismatch\n+  {\n+    if (pos >= 0 && pos < array.length)\n+      {\n+        if (array [ pos ] instanceof DynValueCommon)\n+          array [ pos ].insert_val(a_x);\n+        else\n+          throw new TypeMismatch();\n+      }\n+    else\n+      throw new InvalidValue(\"Out of bounds at \" + pos + \" valid 0..\" +\n+                             (array.length - 1)\n+                            );\n+    valueChanged();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_wchar(char a_x)\n+                    throws InvalidValue, TypeMismatch\n+  {\n+    focused().insert_wchar(a_x);\n+    valueChanged();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_wstring(String a_x)\n+                      throws InvalidValue, TypeMismatch\n+  {\n+    focused().insert_wstring(a_x);\n+    valueChanged();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public DynAny get_dyn_any()\n+                     throws TypeMismatch, InvalidValue\n+  {\n+    return focused().get_dyn_any();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_dyn_any(DynAny insert_it)\n+                      throws TypeMismatch, InvalidValue\n+  {\n+    focused().insert_dyn_any(insert_it);\n+  }\n+\n+  /**\n+   * Get current component.\n+   *\n+   * @return current component or <code>null</code> if the pointer is out of\n+   * bounds.\n+   */\n+  public DynAny current_component()\n+                           throws TypeMismatch\n+  {\n+    if (array.length == 0)\n+      throw new TypeMismatch(\"empty\");\n+    return (pos >= 0 && pos < array.length) ? array [ pos ] : null;\n+  }\n+\n+  /**\n+   * No action, cleanup is done by garbage collector in java.\n+   */\n+  public void destroy()\n+  {\n+  }\n+\n+  /**\n+   * Involved in equal(DynAny).\n+   */\n+  public abstract Any to_any()\n+                      throws TypeMismatch;\n+\n+  /**\n+   * Compares with other DynAny for equality. The final_type, array size and\n+   * array members must match.\n+   */\n+  public boolean equal(DynAny other)\n+  {\n+    try\n+      {\n+        if (!official_type.equal(other.type()))\n+          return false;\n+        else if (other instanceof anyDivideable)\n+          {\n+            anyDivideable x = (anyDivideable) other;\n+            if (x.array.length != array.length)\n+              return false;\n+\n+            for (int i = 0; i < array.length; i++)\n+              {\n+                if (!array [ i ].equal(x.array [ i ]))\n+                  return false;\n+              }\n+            return true;\n+          }\n+        else if (other == null || other instanceof abstractDynAny)\n+          return false;\n+        else\n+          return other.to_any().equal(to_any());\n+      }\n+    catch (TypeMismatch e)\n+      {\n+        UNKNOWN u = new UNKNOWN(MINOR, CompletionStatus.COMPLETED_NO);\n+        u.initCause(e);\n+        throw u;\n+      }\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "b31a6b357f996cf9a8fec55d1dff6c00de477797", "filename": "libjava/classpath/gnu/CORBA/DynAn/anyUndivideable.java", "status": "added", "additions": 493, "deletions": 0, "changes": 493, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FanyUndivideable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FanyUndivideable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FanyUndivideable.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,493 @@\n+/* Undivideable.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.DynAn;\n+\n+import java.io.Serializable;\n+\n+import org.omg.CORBA.Any;\n+import org.omg.CORBA.ORB;\n+import org.omg.CORBA.Object;\n+import org.omg.CORBA.TypeCode;\n+import org.omg.DynamicAny.DynAny;\n+import org.omg.DynamicAny.DynAnyPackage.InvalidValue;\n+import org.omg.DynamicAny.DynAnyPackage.TypeMismatch;\n+\n+/**\n+ * Represent DynAny that has no internal components (DynEnum and so on). The\n+ * methods, related to internal components, throw exceptions or return agreed\n+ * values like null.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public abstract class anyUndivideable\n+  extends abstractDynAny\n+  implements Serializable\n+{\n+  /**\n+   * Use serialVersionUID for interoperability.\n+   */\n+  private static final long serialVersionUID = 1;\n+\n+  /**\n+   * Create a new instance with the given typecode.\n+   */\n+  public anyUndivideable(TypeCode oType, TypeCode aType,\n+                         gnuDynAnyFactory aFactory, ORB anOrb)\n+  {\n+    super(oType, aType, aFactory, anOrb);\n+  }\n+\n+  /**\n+   * There are no components.\n+   *\n+   * @return 0, always.\n+   */\n+  public int component_count()\n+  {\n+    return 0;\n+  }\n+\n+  /**\n+   * There is no current component.\n+   *\n+   * @throws TypeMismatch, always.\n+   */\n+  public DynAny current_component()\n+    throws TypeMismatch\n+  {\n+    throw new TypeMismatch(\"Not applicable\");\n+  }\n+\n+  /**\n+   * Returns without action.\n+   */\n+  public void destroy()\n+  {\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public Any get_any()\n+    throws TypeMismatch, InvalidValue\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public boolean get_boolean()\n+    throws TypeMismatch, InvalidValue\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public char get_char()\n+    throws TypeMismatch, InvalidValue\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public double get_double()\n+    throws TypeMismatch, InvalidValue\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public DynAny get_dyn_any()\n+    throws TypeMismatch, InvalidValue\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public float get_float()\n+    throws TypeMismatch, InvalidValue\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public int get_long()\n+    throws TypeMismatch, InvalidValue\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public long get_longlong()\n+    throws TypeMismatch, InvalidValue\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public byte get_octet()\n+    throws TypeMismatch, InvalidValue\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public Object get_reference()\n+    throws TypeMismatch, InvalidValue\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public short get_short()\n+    throws TypeMismatch, InvalidValue\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public String get_string()\n+    throws TypeMismatch, InvalidValue\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public TypeCode get_typecode()\n+    throws TypeMismatch, InvalidValue\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public int get_ulong()\n+    throws TypeMismatch, InvalidValue\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public long get_ulonglong()\n+    throws TypeMismatch, InvalidValue\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public short get_ushort()\n+    throws TypeMismatch, InvalidValue\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public Serializable get_val()\n+    throws TypeMismatch, InvalidValue\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public char get_wchar()\n+    throws TypeMismatch, InvalidValue\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public String get_wstring()\n+    throws TypeMismatch, InvalidValue\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public void insert_any(Any an_any)\n+    throws TypeMismatch, InvalidValue\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public void insert_boolean(boolean a_x)\n+    throws InvalidValue, TypeMismatch\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public void insert_char(char a_x)\n+    throws InvalidValue, TypeMismatch\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public void insert_double(double a_x)\n+    throws InvalidValue, TypeMismatch\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public void insert_dyn_any(DynAny insert_it)\n+    throws TypeMismatch, InvalidValue\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public void insert_float(float a_x)\n+    throws InvalidValue, TypeMismatch\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public void insert_long(int a_x)\n+    throws InvalidValue, TypeMismatch\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public void insert_longlong(long a_x)\n+    throws InvalidValue, TypeMismatch\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public void insert_octet(byte a_x)\n+    throws InvalidValue, TypeMismatch\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public void insert_reference(Object a_x)\n+    throws InvalidValue, TypeMismatch\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public void insert_short(short a_x)\n+    throws InvalidValue, TypeMismatch\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public void insert_string(String a_x)\n+    throws InvalidValue, TypeMismatch\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public void insert_typecode(TypeCode a_x)\n+    throws InvalidValue, TypeMismatch\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public void insert_ulong(int a_x)\n+    throws InvalidValue, TypeMismatch\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public void insert_ulonglong(long a_x)\n+    throws InvalidValue, TypeMismatch\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public void insert_ushort(short a_x)\n+    throws InvalidValue, TypeMismatch\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public void insert_val(Serializable a_x)\n+    throws InvalidValue, TypeMismatch\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public void insert_wchar(char a_x)\n+    throws InvalidValue, TypeMismatch\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public void insert_wstring(String a_x)\n+    throws InvalidValue, TypeMismatch\n+  {\n+    throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public boolean next()\n+  {\n+    return false;\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public void rewind()\n+  {\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public boolean seek(int p)\n+  {\n+    return false;\n+  }\n+\n+  /**\n+   * Get the typecode of this enumeration.\n+   */\n+  public TypeCode type()\n+  {\n+    return official_type;\n+  }\n+\n+  /**\n+   * Compares with other DynAny for equality.\n+   */\n+  public boolean equals(java.lang.Object other)\n+  {\n+    if (other instanceof DynAny)\n+      return equal((DynAny) other);\n+    else\n+      return false;\n+  }\n+\n+  /**\n+   * This depends on an object.\n+   */\n+  public abstract boolean equal(DynAny other);\n+\n+}"}, {"sha": "015628ebf9037cb5b6a717aa8ee133196f853c15", "filename": "libjava/classpath/gnu/CORBA/DynAn/gnuDynAny.java", "status": "added", "additions": 945, "deletions": 0, "changes": 945, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynAny.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynAny.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynAny.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,945 @@\n+/* gnuDynAny.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.DynAn;\n+\n+import gnu.CORBA.CDR.cdrBufOutput;\n+import gnu.CORBA.OctetHolder;\n+import gnu.CORBA.Unexpected;\n+import gnu.CORBA.WCharHolder;\n+import gnu.CORBA.WStringHolder;\n+import gnu.CORBA.holderFactory;\n+import gnu.CORBA.typeNamer;\n+import gnu.CORBA.universalHolder;\n+\n+import org.omg.CORBA.Any;\n+import org.omg.CORBA.AnyHolder;\n+import org.omg.CORBA.BooleanHolder;\n+import org.omg.CORBA.CharHolder;\n+import org.omg.CORBA.DoubleHolder;\n+import org.omg.CORBA.FloatHolder;\n+import org.omg.CORBA.IntHolder;\n+import org.omg.CORBA.LongHolder;\n+import org.omg.CORBA.MARSHAL;\n+import org.omg.CORBA.ORB;\n+import org.omg.CORBA.Object;\n+import org.omg.CORBA.ObjectHolder;\n+import org.omg.CORBA.ShortHolder;\n+import org.omg.CORBA.StringHolder;\n+import org.omg.CORBA.TCKind;\n+import org.omg.CORBA.TypeCode;\n+import org.omg.CORBA.TypeCodeHolder;\n+import org.omg.CORBA.TypeCodePackage.BadKind;\n+import org.omg.CORBA.ValueBaseHolder;\n+import org.omg.CORBA.portable.InputStream;\n+import org.omg.CORBA.portable.OutputStream;\n+import org.omg.CORBA.portable.Streamable;\n+import org.omg.DynamicAny.DynAny;\n+import org.omg.DynamicAny.DynAnyPackage.InvalidValue;\n+import org.omg.DynamicAny.DynAnyPackage.TypeMismatch;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * The primitive dynamic Any holds the value basic final_type that cannot be\n+ * traversed.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class gnuDynAny extends abstractDynAny implements DynAny, Serializable\n+{\n+  /**\n+   * Use serialVersionUID for interoperability.\n+   */\n+  private static final long serialVersionUID = 1;\n+\n+  /**\n+   * The enclosed Streamable, holding the actual value.\n+   */\n+  protected Streamable holder;\n+\n+  /**\n+   * Create DynAny providing the holder.\n+   *\n+   * @param a_holder\n+   */\n+  public gnuDynAny(Streamable aHolder, TypeCode oType, TypeCode aType,\n+    gnuDynAnyFactory aFactory, ORB anOrb\n+  )\n+  {\n+    super(oType, aType, aFactory, anOrb);\n+    holder = aHolder;\n+  }\n+\n+  /**\n+   * Assign the contents of the given {@link DynAny} to this DynAny.\n+   *\n+   * @param from the source to assign from.\n+   */\n+  public void assign(DynAny from) throws TypeMismatch\n+  {\n+    checkType(official_type, from.type());\n+\n+    if (from instanceof gnuDynAny)\n+      holder = ((gnuDynAny) from).holder;\n+    else\n+      holder = from.to_any().extract_Streamable();\n+    valueChanged();\n+  }\n+\n+  /**\n+   * Create a copy of this {@link DynAny} via buffer read/write.\n+   */\n+  public DynAny copy()\n+  {\n+    if (holder != null)\n+      {\n+        cdrBufOutput buffer = new cdrBufOutput();\n+        holder._write(buffer);\n+\n+        gnuDynAny other;\n+        try\n+          {\n+            other =\n+              new gnuDynAny((Streamable) (holder.getClass().newInstance()),\n+                official_type, final_type, factory, orb\n+              );\n+          }\n+        catch (Exception e)\n+          {\n+            // Holder must have parameterless constructor.\n+            throw new Unexpected(e);\n+          }\n+        other.holder._read(buffer.create_input_stream());\n+        return other;\n+      }\n+    else\n+      {\n+        return new gnuDynAny(null, official_type, final_type, factory, orb);\n+      }\n+  }\n+\n+  /**\n+   * Always returns <code>null</code>.\n+   *\n+   * @return <code>null</code>, always.\n+   */\n+  public DynAny current_component() throws TypeMismatch\n+  {\n+    throw new TypeMismatch(\"Not applicable for \" +\n+      typeNamer.nameIt(final_type)\n+    );\n+  }\n+\n+  /**\n+   * Returns without action, leaving all work to the garbage collector.\n+   */\n+  public void destroy()\n+  {\n+  }\n+\n+  /**\n+   * Takes the passed parameter as the enclosed {@link Any} reference.\n+   *\n+   * @param an_any the {@link Any} that will be used as an enclosed reference.\n+   *\n+   * @throws TypeMismatch if the final_type of the passed Any is not the same as\n+   * the final_type, currently stored in this Any.\n+   */\n+  public void from_any(Any an_any) throws TypeMismatch, InvalidValue\n+  {\n+    checkType(official_type, an_any.type());\n+\n+    Streamable a_holder = an_any.extract_Streamable();\n+    if (a_holder == null)\n+      {\n+        throw new InvalidValue(ISNULL);\n+      }\n+    else if (a_holder instanceof universalHolder)\n+      {\n+        holder = holderFactory.createHolder(official_type);\n+        if (holder == null)\n+          holder = holderFactory.createHolder(final_type);\n+\n+        if (holder == null)\n+          holder = ((universalHolder) a_holder).Clone();\n+        else\n+          {\n+            InputStream in = an_any.create_input_stream();\n+            holder._read(in);\n+            try\n+              {\n+                in.close();\n+              }\n+            catch (IOException ex)\n+              {\n+                throw new Unexpected(ex);\n+              }\n+          }\n+      }\n+    else\n+      {\n+        try\n+          {\n+            InputStream in = an_any.create_input_stream();\n+            holder = (Streamable) a_holder.getClass().newInstance();\n+            holder._read(in);\n+            in.close();\n+          }\n+        catch (Exception ex)\n+          {\n+            TypeMismatch t = new TypeMismatch();\n+            t.initCause(ex);\n+            throw t;\n+          }\n+      }\n+    valueChanged();\n+  }\n+\n+  /**\n+   * Return the second (enclosed any) that is stored in the wrapped Any.\n+   */\n+  public Any get_any() throws TypeMismatch\n+  {\n+    try\n+      {\n+        return ((AnyHolder) holder).value;\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch m = new TypeMismatch();\n+        m.initCause(cex);\n+        throw m;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public boolean get_boolean() throws TypeMismatch\n+  {\n+    try\n+      {\n+        return ((BooleanHolder) holder).value;\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch m = new TypeMismatch();\n+        m.initCause(cex);\n+        throw m;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public char get_char() throws TypeMismatch\n+  {\n+    try\n+      {\n+        return ((CharHolder) holder).value;\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch m = new TypeMismatch();\n+        m.initCause(cex);\n+        throw m;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public double get_double() throws TypeMismatch\n+  {\n+    try\n+      {\n+        return ((DoubleHolder) holder).value;\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch m = new TypeMismatch();\n+        m.initCause(cex);\n+        throw m;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public float get_float() throws TypeMismatch\n+  {\n+    try\n+      {\n+        return ((FloatHolder) holder).value;\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch m = new TypeMismatch();\n+        m.initCause(cex);\n+        throw m;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public int get_long() throws TypeMismatch\n+  {\n+    try\n+      {\n+        return ((IntHolder) holder).value;\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch m = new TypeMismatch();\n+        m.initCause(cex);\n+        throw m;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public long get_longlong() throws TypeMismatch\n+  {\n+    try\n+      {\n+        return ((LongHolder) holder).value;\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch m = new TypeMismatch();\n+        m.initCause(cex);\n+        throw m;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public byte get_octet() throws TypeMismatch\n+  {\n+    try\n+      {\n+        return ((OctetHolder) holder).value;\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch m = new TypeMismatch();\n+        m.initCause(cex);\n+        throw m;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public Object get_reference() throws TypeMismatch\n+  {\n+    try\n+      {\n+        return ((ObjectHolder) holder).value;\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch m = new TypeMismatch();\n+        m.initCause(cex);\n+        throw m;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public short get_short() throws TypeMismatch\n+  {\n+    try\n+      {\n+        return ((ShortHolder) holder).value;\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch m = new TypeMismatch();\n+        m.initCause(cex);\n+        throw m;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public String get_string() throws TypeMismatch\n+  {\n+    try\n+      {\n+        return ((StringHolder) holder).value;\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch m = new TypeMismatch();\n+        m.initCause(cex);\n+        throw m;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public TypeCode get_typecode() throws TypeMismatch\n+  {\n+    try\n+      {\n+        return ((TypeCodeHolder) holder).value;\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch m = new TypeMismatch();\n+        m.initCause(cex);\n+        throw m;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public int get_ulong() throws TypeMismatch\n+  {\n+    check(TCKind.tk_ulong);\n+    return get_long();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public long get_ulonglong() throws TypeMismatch\n+  {\n+    check(TCKind.tk_ulonglong);\n+    return get_longlong();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public short get_ushort() throws TypeMismatch\n+  {\n+    check(TCKind.tk_ushort);\n+    return get_short();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public Serializable get_val() throws TypeMismatch\n+  {\n+    try\n+      {\n+        return ((ValueBaseHolder) holder).value;\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch m = new TypeMismatch();\n+        m.initCause(cex);\n+        throw m;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public char get_wchar() throws TypeMismatch\n+  {\n+    try\n+      {\n+        return ((WCharHolder) holder).value;\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch m = new TypeMismatch();\n+        m.initCause(cex);\n+        throw m;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public String get_wstring() throws TypeMismatch\n+  {\n+    try\n+      {\n+        return ((WStringHolder) holder).value;\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch m = new TypeMismatch();\n+        m.initCause(cex);\n+        throw m;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_any(Any a_x) throws TypeMismatch, InvalidValue\n+  {\n+    try\n+      {\n+        if (a_x.type().kind().value() == TCKind._tk_null)\n+          ((AnyHolder) holder).value = a_x;\n+        else\n+          {\n+            OutputStream buf = a_x.create_output_stream();\n+            buf.write_any(a_x);\n+            holder._read(buf.create_input_stream());\n+            buf.close();\n+          }\n+        valueChanged();\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(cex);\n+        throw t;\n+      }\n+    catch (MARSHAL m)\n+      {\n+        InvalidValue v = new InvalidValue();\n+        v.initCause(m);\n+        throw v;\n+      }\n+    catch (IOException ex)\n+      {\n+        throw new Unexpected(ex);\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_boolean(boolean a_x) throws InvalidValue, TypeMismatch\n+  {\n+    try\n+      {\n+        ((BooleanHolder) holder).value = a_x;\n+        valueChanged();\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(cex);\n+        throw t;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_char(char a_x) throws InvalidValue, TypeMismatch\n+  {\n+    try\n+      {\n+        ((CharHolder) holder).value = a_x;\n+        valueChanged();\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(cex);\n+        throw t;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_double(double a_x) throws InvalidValue, TypeMismatch\n+  {\n+    try\n+      {\n+        ((DoubleHolder) holder).value = a_x;\n+        valueChanged();\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(cex);\n+        throw t;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_float(float a_x) throws InvalidValue, TypeMismatch\n+  {\n+    try\n+      {\n+        ((FloatHolder) holder).value = a_x;\n+        valueChanged();\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(cex);\n+        throw t;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_long(int a_x) throws InvalidValue, TypeMismatch\n+  {\n+    try\n+      {\n+        ((IntHolder) holder).value = a_x;\n+        valueChanged();\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(cex);\n+        throw t;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_longlong(long a_x) throws InvalidValue, TypeMismatch\n+  {\n+    try\n+      {\n+        ((LongHolder) holder).value = a_x;\n+        valueChanged();\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(cex);\n+        throw t;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_octet(byte a_x) throws InvalidValue, TypeMismatch\n+  {\n+    try\n+      {\n+        ((OctetHolder) holder).value = a_x;\n+        valueChanged();\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(cex);\n+        throw t;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_reference(Object a_x) throws InvalidValue, TypeMismatch\n+  {\n+    try\n+      {\n+        ((ObjectHolder) holder).value = a_x;\n+        valueChanged();\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(cex);\n+        throw t;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_short(short a_x) throws InvalidValue, TypeMismatch\n+  {\n+    try\n+      {\n+        ((ShortHolder) holder).value = a_x;\n+        valueChanged();\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(cex);\n+        throw t;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_string(String a_x) throws InvalidValue, TypeMismatch\n+  {\n+    try\n+      {\n+        if (a_x != null &&\n+          final_type.length() > 0 &&\n+          a_x.length() > final_type.length()\n+        )\n+          throw new InvalidValue(a_x.length() + \" exceeds bound, \" +\n+            final_type.length()\n+          );\n+        ((StringHolder) holder).value = a_x;\n+        valueChanged();\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(cex);\n+        throw t;\n+      }\n+    catch (BadKind e)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(e);\n+        throw t;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_typecode(TypeCode a_x) throws InvalidValue, TypeMismatch\n+  {\n+    try\n+      {\n+        ((TypeCodeHolder) holder).value = a_x;\n+        valueChanged();\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(cex);\n+        throw t;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_ulong(int a_x) throws InvalidValue, TypeMismatch\n+  {\n+    try\n+      {\n+        ((IntHolder) holder).value = a_x;\n+        valueChanged();\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(cex);\n+        throw t;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_ulonglong(long a_x) throws InvalidValue, TypeMismatch\n+  {\n+    try\n+      {\n+        ((LongHolder) holder).value = a_x;\n+        valueChanged();\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(cex);\n+        throw t;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_ushort(short a_x) throws InvalidValue, TypeMismatch\n+  {\n+    try\n+      {\n+        ((ShortHolder) holder).value = a_x;\n+        valueChanged();\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(cex);\n+        throw t;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_val(Serializable a_x) throws InvalidValue, TypeMismatch\n+  {\n+    try\n+      {\n+        ((ValueBaseHolder) holder).value = a_x;\n+        valueChanged();\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(cex);\n+        throw t;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_wchar(char a_x) throws InvalidValue, TypeMismatch\n+  {\n+    try\n+      {\n+        ((WCharHolder) holder).value = a_x;\n+        valueChanged();\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(cex);\n+        throw t;\n+      }\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_wstring(String a_x) throws InvalidValue, TypeMismatch\n+  {\n+    try\n+      {\n+        if (a_x != null &&\n+          final_type.length() > 0 &&\n+          a_x.length() > type().length()\n+        )\n+          throw new InvalidValue(a_x.length() + \" exceeds bound, \" +\n+            final_type.length()\n+          );\n+        ((WStringHolder) holder).value = a_x;\n+        valueChanged();\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(cex);\n+        throw t;\n+      }\n+    catch (BadKind e)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(e);\n+        throw t;\n+      }\n+  }\n+\n+  /**\n+   * The objects, enclosed inside this class, have only one component (self).\n+   *\n+   * @return false, always (no other action).\n+   */\n+  public boolean next()\n+  {\n+    return false;\n+  }\n+\n+  /**\n+   * Returns without action.\n+   */\n+  public void rewind()\n+  {\n+  }\n+\n+  /**\n+   * This objects, stored in this wrapper, never have multiple internal\n+   * components to seek.\n+   *\n+   * @return false, always (no other action).\n+   */\n+  public boolean seek(int p)\n+  {\n+    return false;\n+  }\n+\n+  /**\n+   * Returns the enclosed {@link Any}.\n+   *\n+   * @return the enclosed {@link Any}.\n+   */\n+  public Any to_any()\n+  {\n+    Any a = createAny();\n+    a.insert_Streamable(holder);\n+    a.type(official_type);\n+    return a;\n+  }\n+\n+  /** {@inheritDoc} */\n+  public TypeCode type()\n+  {\n+    return official_type;\n+  }\n+\n+  /**\n+   * Compute hashcode in a trivial way.\n+   */\n+  protected int getHashCodeSimple(int maximum)\n+  {\n+    int h = super.hashCode() / 2;\n+    if (h < 0)\n+      h = -h;\n+    return h % maximum;\n+  }\n+\n+  /**\n+   * Inserts Any, contained in the parameter, into Any, contained in this\n+   * DynAny.\n+   */\n+  public void insert_dyn_any(DynAny d) throws TypeMismatch, InvalidValue\n+  {\n+    check(d.type().kind());\n+\n+    Any a = d.to_any();\n+    holder = a.extract_Streamable();\n+    valueChanged();\n+  }\n+\n+  /**\n+   * Checks for equality. The DynAnys are equal if the stored Anys are equal.\n+   */\n+  public boolean equal(DynAny other)\n+  {\n+    if (other instanceof abstractDynAny)\n+      {\n+        if (other instanceof gnuDynAny)\n+          {\n+            gnuDynAny x = (gnuDynAny) other;\n+\n+            if (!x.holder.getClass().equals(holder.getClass()))\n+              return false;\n+\n+            cdrBufOutput b1 = new cdrBufOutput();\n+            x.holder._write(b1);\n+\n+            cdrBufOutput b2 = new cdrBufOutput(b1.buffer.size() + 10);\n+            holder._write(b2);\n+\n+            return Arrays.equals(b1.buffer.toByteArray(),\n+              b2.buffer.toByteArray()\n+            );\n+          }\n+        else\n+          return false;\n+      }\n+    if (other == null)\n+      return false;\n+    else if (other.component_count() != component_count() ||\n+      !official_type.equal(other.type())\n+    )\n+      return false;\n+    else\n+      return other.to_any().equal(to_any());\n+  }\n+\n+  /**\n+   * This final_type has no components.\n+   *\n+   * @return 0, always.\n+   */\n+  public int component_count()\n+  {\n+    return 0;\n+  }\n+\n+  public DynAny get_dyn_any() throws TypeMismatch, InvalidValue\n+  {\n+    return new gnuDynAny(holder, official_type, final_type, factory, orb);\n+  }\n+\n+  private void check(TCKind t) throws TypeMismatch\n+  {\n+    if (t.value() != final_type.kind().value())\n+      throw new TypeMismatch(t.value() + \"!=\" + final_type.kind().value());\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "dd1762890dec8fb70f1db3b96dfc0e0cb5a7f1bb", "filename": "libjava/classpath/gnu/CORBA/DynAn/gnuDynAnyFactory.java", "status": "added", "additions": 356, "deletions": 0, "changes": 356, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynAnyFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynAnyFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynAnyFactory.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,356 @@\n+/* gnuDynAnyFactory.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.DynAn;\n+\n+import gnu.CORBA.Poa.ORB_1_4;\n+import gnu.CORBA.Unexpected;\n+import gnu.CORBA.holderFactory;\n+import gnu.CORBA.typeNamer;\n+\n+import org.omg.CORBA.Any;\n+import org.omg.CORBA.LocalObject;\n+import org.omg.CORBA.TCKind;\n+import org.omg.CORBA.TypeCode;\n+import org.omg.CORBA.TypeCodePackage.BadKind;\n+import org.omg.CORBA.UserException;\n+import org.omg.CORBA.portable.Streamable;\n+import org.omg.DynamicAny.DynAny;\n+import org.omg.DynamicAny.DynAnyFactory;\n+import org.omg.DynamicAny.DynAnyFactoryPackage.InconsistentTypeCode;\n+import org.omg.DynamicAny.DynArray;\n+import org.omg.DynamicAny.DynEnum;\n+import org.omg.DynamicAny.DynFixed;\n+import org.omg.DynamicAny.DynSequence;\n+import org.omg.DynamicAny.DynStruct;\n+import org.omg.DynamicAny.DynUnion;\n+import org.omg.DynamicAny.DynValue;\n+import org.omg.DynamicAny.DynValueBox;\n+\n+/**\n+ * This class is returned by ORB when resolving\n+ * initial reference \"DynAnyFactory\".\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class gnuDynAnyFactory\n+  extends LocalObject\n+  implements DynAnyFactory\n+{\n+  /**\n+   * Use serialVersionUID for interoperability.\n+   */\n+  private static final long serialVersionUID = 1;\n+\n+  /**\n+   * The ORB, to that the factory belongs.\n+   */\n+  final ORB_1_4 orb;\n+\n+  /**\n+   * Create a new factory, specifying the ORB to that the factory belongs.\n+   *\n+   * @param anOrb\n+   */\n+  public gnuDynAnyFactory(ORB_1_4 anOrb)\n+  {\n+    orb = anOrb;\n+  }\n+\n+  /**\n+   * Get the orb.\n+   */\n+  public ORB_1_4 getOrb()\n+  {\n+    return orb;\n+  }\n+\n+  /**\n+   * Create an initialised array.\n+   */\n+  public DynArray create_array(TypeCode official, TypeCode type)\n+  {\n+    return new gnuDynArray(official, type, this, orb, true);\n+  }\n+\n+  /**\n+   * Create an empty sequence.\n+   */\n+  public DynSequence create_sequence(TypeCode official, TypeCode type)\n+  {\n+    return new gnuDynSequence(official, type, this, orb);\n+  }\n+\n+  /**\n+   * Create structure.\n+   *\n+   * @param official the type that was originally passed as a parameter by user.\n+   * May be alias of some other type.\n+   * @param type the type into that the \"official type\" evaluates during alias\n+   * resolving. Initially equal to \"official type\".\n+   */\n+  public DynStruct create_structure(TypeCode official, TypeCode type)\n+  {\n+    return new gnuDynStruct(official, type, this, orb);\n+  }\n+\n+  /**\n+   * Create union.\n+   *\n+   * @param official the type that was originally passed as a parameter by user.\n+   * May be alias of some other type.\n+   * @param type the type into that the \"official type\" evaluates during alias\n+   * resolving. Initially equal to \"official type\".\n+   */\n+  public DynUnion create_union(TypeCode official, TypeCode type)\n+  {\n+    try\n+      {\n+        return new gnuDynUnion(official, type, this, orb);\n+      }\n+    catch (Exception ex)\n+      {\n+        throw new Unexpected(ex);\n+      }\n+  }\n+\n+  /**\n+   * Create value.\n+   *\n+   * @param official the type that was originally passed as a parameter by user.\n+   * May be alias of some other type.\n+   * @param type the type into that the \"official type\" evaluates during alias\n+   * resolving. Initially equal to \"official type\".\n+   */\n+  public DynValue create_value(TypeCode official, TypeCode type)\n+  {\n+    return new gnuDynValue(official, type, this, orb);\n+  }\n+\n+  /**\n+   * Create value box.\n+   *\n+   * @param official the type that was originally passed as a parameter by user.\n+   * May be alias of some other type.\n+   * @param type the type into that the \"official type\" evaluates during alias\n+   * resolving. Initially equal to \"official type\".\n+   */\n+  public DynValueBox create_value_box(TypeCode official, TypeCode type)\n+  {\n+    return new gnuDynValueBox(official, type, this, orb);\n+  }\n+\n+  /**\n+   * Create enumeration.\n+   *\n+   * @param official the type that was originally passed as a parameter by user.\n+   * May be alias of some other type.\n+   * @param type the type into that the \"official type\" evaluates during alias\n+   * resolving. Initially equal to \"official type\".\n+   */\n+  public DynEnum create_enumeration(TypeCode official, TypeCode type)\n+  {\n+    return new gnuDynEnum(official, type, this, orb);\n+  }\n+\n+  /**\n+   * Create fixed.\n+   *\n+   * @param official the type that was originally passed as a parameter by user.\n+   * May be alias of some other type.\n+   * @param type the type into that the \"official type\" evaluates during alias\n+   * resolving. Initially equal to \"official type\".\n+   */\n+  public DynFixed create_fixed(TypeCode official, TypeCode type)\n+  {\n+    return new gnuDynFixed(official, type, this, orb);\n+  }\n+\n+  /**\n+   * Create alias.\n+   *\n+   * @param official the type that was originally passed as a parameter by user.\n+   * May be alias of some other type.\n+   * @param type the type into that the \"official type\" evaluates during alias\n+   * resolving. Initially equal to \"official type\".\n+   */\n+  public DynAny create_alias(TypeCode official, TypeCode type)\n+                      throws InconsistentTypeCode\n+  {\n+    try\n+      {\n+        return create_dyn_any_from_type_code(official, type.content_type());\n+      }\n+    catch (BadKind e)\n+      {\n+        throw new Unexpected(e);\n+      }\n+  }\n+\n+  /**\n+   * Create the undivideable DynAny.\n+   */\n+  public DynAny create_simple(TypeCode official, TypeCode type)\n+  {\n+    Streamable holder = holderFactory.createHolder(type);\n+    return new gnuDynAny(holder, official, type, this, orb);\n+  }\n+\n+  /**\n+   * Create the DynAny from typecode.\n+   */\n+  public DynAny create_dyn_any_from_type_code(TypeCode type)\n+                                       throws InconsistentTypeCode\n+  {\n+    return create_dyn_any_from_type_code(type, type);\n+  }\n+\n+  /**\n+   * Create the DynAny from typecode.\n+   *\n+   * @param official the type that was originally passed as a parameter by user.\n+   * May be alias of some other type.\n+   * @param type the type into that the \"official type\" evaluates during alias\n+   * resolving. Initially equal to \"official type\".\n+   */\n+  public DynAny create_dyn_any_from_type_code(TypeCode official, TypeCode type)\n+                                       throws InconsistentTypeCode\n+  {\n+    DynAny d;\n+    try\n+      {\n+        switch (type.kind().value())\n+          {\n+            case TCKind._tk_array :\n+              return create_array(official, type);\n+\n+            case TCKind._tk_sequence :\n+              return create_sequence(official, type);\n+\n+            case TCKind._tk_struct :\n+            case TCKind._tk_except :\n+              return create_structure(official, type);\n+\n+            case TCKind._tk_union :\n+              return create_union(official, type);\n+\n+            case TCKind._tk_value :\n+              return create_value(official, type);\n+\n+            case TCKind._tk_value_box :\n+              return create_value_box(official, type);\n+\n+            case TCKind._tk_enum :\n+              return create_enumeration(official, type);\n+\n+            case TCKind._tk_fixed :\n+              return create_fixed(official, type);\n+\n+            case TCKind._tk_alias :\n+              return create_alias(official, type);\n+\n+            case TCKind._tk_null :\n+              return new gnuDynAny(null, official, type, this, orb);\n+\n+            case TCKind._tk_TypeCode :\n+              d = create_simple(official, type);\n+              d.insert_typecode(orb.get_primitive_tc(TCKind.tk_null));\n+              return d;\n+\n+            case TCKind._tk_any :\n+              d = create_simple(official, type);\n+\n+              Any empty_any = orb.create_any();\n+              empty_any.type(orb.get_primitive_tc(TCKind.tk_null));\n+              d.insert_any(empty_any);\n+              return d;\n+\n+            case TCKind._tk_wstring :\n+              d = create_simple(official, type);\n+              d.insert_wstring(\"\");\n+              return d;\n+\n+            case TCKind._tk_string :\n+              d = create_simple(official, type);\n+              d.insert_string(\"\");\n+              return d;\n+\n+            case TCKind._tk_native :\n+            case TCKind._tk_Principal :\n+            case TCKind._tk_abstract_interface :\n+              throw new InconsistentTypeCode(\"Following API, the \" +\n+                                             typeNamer.nameIt(type) +\n+                                             \" must not be supported.\"\n+                                            );\n+\n+            default :\n+              return create_simple(official, type);\n+          }\n+      }\n+    catch (UserException uex)\n+      {\n+        InconsistentTypeCode it = new InconsistentTypeCode();\n+        it.initCause(uex);\n+        throw it;\n+      }\n+  }\n+\n+  /**\n+   * Create the DynAny using the passed value as template and assign this value.\n+   */\n+  public DynAny create_dyn_any(Any value)\n+                        throws InconsistentTypeCode\n+  {\n+    DynAny created = create_dyn_any_from_type_code(value.type());\n+    try\n+      {\n+        created.from_any(value);\n+      }\n+    catch (UserException uex)\n+      {\n+        InconsistentTypeCode t = new InconsistentTypeCode(\"Inconsistent Any\");\n+        t.initCause(uex);\n+        throw t;\n+      }\n+    catch (Exception e)\n+      {\n+        throw new Unexpected(e);\n+      }\n+    return created;\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "1c08496d4234ce271e0a8ba169fd3f7c6f320e9b", "filename": "libjava/classpath/gnu/CORBA/DynAn/gnuDynArray.java", "status": "added", "additions": 338, "deletions": 0, "changes": 338, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynArray.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynArray.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynArray.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,338 @@\n+/* gnuDynArray.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.DynAn;\n+\n+import gnu.CORBA.Unexpected;\n+import gnu.CORBA.holderFactory;\n+\n+import org.omg.CORBA.Any;\n+import org.omg.CORBA.BAD_PARAM;\n+import org.omg.CORBA.ORB;\n+import org.omg.CORBA.TCKind;\n+import org.omg.CORBA.TypeCode;\n+import org.omg.CORBA.TypeCodePackage.BadKind;\n+import org.omg.CORBA.portable.Streamable;\n+import org.omg.DynamicAny.DynAny;\n+import org.omg.DynamicAny.DynAnyFactoryPackage.InconsistentTypeCode;\n+import org.omg.DynamicAny.DynAnyPackage.InvalidValue;\n+import org.omg.DynamicAny.DynAnyPackage.TypeMismatch;\n+import org.omg.DynamicAny.DynArray;\n+\n+import java.io.Serializable;\n+\n+import java.lang.reflect.Array;\n+import java.lang.reflect.Field;\n+\n+/**\n+ * Provides support for dynamic array or sequence, where all members have the\n+ * same final_type.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class gnuDynArray\n+  extends anyDivideable\n+  implements DynArray, Serializable\n+{\n+  /**\n+   * Use serialVersionUID for interoperability.\n+   */\n+  private static final long serialVersionUID = 1;\n+\n+  /**\n+   * The component \"official\" type (may be alias).\n+   */\n+  final TypeCode official_components;\n+\n+  /**\n+   * The component \"final\" type, after resolving any aliases.\n+   */\n+  final TypeCode final_components;\n+\n+  /**\n+   * Creates new array.\n+   *\n+   * @param aType the final_type of array.\n+   * @param aFactory the factory, used to initialise default values.\n+   * @param orb the ORB to that this DynAny belongs.\n+   * @param initialise_array if false, the array is not initialised in\n+   * constructor.\n+   *\n+   *\n+   * @throws BAD_PARAM if the passed typecode does not provide the length().\n+   */\n+  public gnuDynArray(TypeCode oType, TypeCode aType, gnuDynAnyFactory aFactory,\n+                     ORB anOrb, boolean initialise_array\n+                    )\n+              throws BAD_PARAM\n+  {\n+    super(oType, aType, aFactory, anOrb);\n+\n+    try\n+      {\n+        official_components = final_type.content_type();\n+\n+        TypeCode component = official_components;\n+        while (component.kind().value() == TCKind._tk_alias)\n+          component = component.content_type();\n+        final_components = component;\n+\n+        if (initialise_array)\n+          {\n+            array = new DynAny[ aType.length() ];\n+            for (int i = 0; i < array.length; i++)\n+              {\n+                array [ i ] =\n+                  factory.create_dyn_any_from_type_code(official_components);\n+              }\n+          }\n+      }\n+    catch (Exception e)\n+      {\n+        BAD_PARAM bad = new BAD_PARAM(\"Unable to initialise array\");\n+        bad.initCause(e);\n+        throw bad;\n+      }\n+  }\n+\n+  /**\n+   * Copy one DynAny into another.\n+   */\n+  public void assign(DynAny from)\n+              throws TypeMismatch\n+  {\n+    checkType(official_type, from.type());\n+    if (from instanceof DynArray && from.component_count() == array.length)\n+      {\n+        DynArray dyn = (DynArray) from;\n+        array = dyn.get_elements_as_dyn_any();\n+      }\n+    else\n+      throw new TypeMismatch();\n+  }\n+\n+  /**\n+   * Create a copy.\n+   */\n+  public DynAny copy()\n+  {\n+    DynAny[] c = new DynAny[ array.length ];\n+    for (int i = 0; i < c.length; i++)\n+      {\n+        c [ i ] = array [ i ].copy();\n+      }\n+\n+    gnuDynArray d =\n+      new gnuDynArray(official_type, final_type, factory, orb, false);\n+    d.array = c;\n+    return d;\n+  }\n+\n+  /**\n+   * Get elements as array of anys.\n+   */\n+  public Any[] get_elements()\n+  {\n+    Any[] r = new Any[ array.length ];\n+    for (int i = 0; i < r.length; i++)\n+      r [ i ] = array [ i ].to_any();\n+    return r;\n+  }\n+\n+  /** {@inheritDoc} */\n+  public DynAny[] get_elements_as_dyn_any()\n+  {\n+    DynAny[] a = new DynAny[ array.length ];\n+    for (int i = 0; i < a.length; i++)\n+      {\n+        a [ i ] = array [ i ].copy();\n+      }\n+    return a;\n+  }\n+\n+  /**\n+   * Set elements when array of dyn anys is provided. This method can set nested\n+   * data structures as an array components.\n+   */\n+  public void set_elements_as_dyn_any(DynAny[] value)\n+                               throws InvalidValue, TypeMismatch\n+  {\n+    if (value.length != array.length)\n+      throw new InvalidValue(sizeMismatch(array.length, value.length));\n+    for (int i = 0; i < value.length; i++)\n+      {\n+        checkType(official_components, value [ i ].type());\n+        array [ i ].assign(value [ i ]);\n+      }\n+    pos = 0;\n+    valueChanged();\n+  }\n+\n+  /**\n+   * Set elements when array of ordinary anys is provided.\n+   */\n+  public void set_elements(Any[] value)\n+                    throws InvalidValue, TypeMismatch\n+  {\n+    if (value.length != array.length)\n+      throw new InvalidValue(sizeMismatch(array.length, value.length));\n+\n+    for (int i = 0; i < value.length; i++)\n+      {\n+        checkType(official_components, value [ i ].type());\n+        try\n+          {\n+            array [ i ] = factory.create_dyn_any(value [ i ]);\n+          }\n+        catch (InconsistentTypeCode e)\n+          {\n+            TypeMismatch t = new TypeMismatch();\n+            t.initCause(e);\n+            throw t;\n+          }\n+      }\n+    pos = 0;\n+    valueChanged();\n+  }\n+\n+  /**\n+   * Done via reflection.\n+   */\n+  public Any to_any()\n+  {\n+    try\n+      {\n+        Streamable memberHolder =\n+          holderFactory.createHolder(official_components);\n+\n+        if (memberHolder == null)\n+          memberHolder = holderFactory.createHolder(final_components);\n+\n+        Class memberHolderClass = memberHolder.getClass();\n+        Class memberClass = memberHolderClass.getField(\"value\").getType();\n+\n+        Object members = Array.newInstance(memberClass, array.length);\n+        Object member;\n+        Any am;\n+        Field value = memberHolder.getClass().getField(\"value\");\n+\n+        for (int i = 0; i < array.length; i++)\n+          {\n+            // Recursive call should support multidimensional arrays.\n+            am = array [ i ].to_any();\n+            memberHolder = am.extract_Streamable();\n+            member = value.get(memberHolder);\n+            Array.set(members, i, member);\n+          }\n+\n+        Streamable arrayHolder = holderFactory.createHolder(official_type);\n+        arrayHolder.getClass().getField(\"value\").set(arrayHolder, members);\n+\n+        Any g = createAny();\n+        g.insert_Streamable(arrayHolder);\n+        g.type(official_type);\n+        return g;\n+      }\n+    catch (Exception e)\n+      {\n+        throw new Unexpected(e);\n+      }\n+  }\n+\n+  /**\n+   * Done via reflection.\n+   */\n+  public void from_any(Any an_any)\n+                throws TypeMismatch, InvalidValue\n+  {\n+    checkType(official_type, an_any.type());\n+    try\n+      {\n+        Streamable s = an_any.extract_Streamable();\n+        Object members = s.getClass().getField(\"value\").get(s);\n+\n+        checkArrayValid(members);\n+\n+        Any member;\n+        Streamable holder;\n+        Class holderClass = null;\n+\n+        for (int i = 0; i < array.length; i++)\n+          {\n+            if (holderClass == null)\n+              {\n+                holder = holderFactory.createHolder(official_components);\n+                if (holder == null)\n+                  holder = holderFactory.createHolder(final_components);\n+                holderClass = holder.getClass();\n+              }\n+            else\n+              holder = (Streamable) holderClass.newInstance();\n+\n+            member = createAny();\n+            holder.getClass().getField(\"value\").set(holder,\n+                                                    Array.get(members, i)\n+                                                   );\n+            member.insert_Streamable(holder);\n+            member.type(official_components);\n+\n+            // This may lead to recursion, supporting multidimensional\n+            // arrays.\n+            array [ i ].from_any(member);\n+          }\n+      }\n+    catch (Exception ex)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(ex);\n+        throw t;\n+      }\n+    valueChanged();\n+  }\n+\n+  /**\n+   * Check if array size is valid and (for sequences) resized\n+   * if required. Called from from_any.\n+   */\n+  protected void checkArrayValid(Object members)\n+                          throws TypeMismatch, InvalidValue\n+  {\n+    if (array.length != Array.getLength(members))\n+      throw new InvalidValue(sizeMismatch(array.length, Array.getLength(members)));\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "2fccc85c59d228e8746e86d93ef747a1bfb7f6c8", "filename": "libjava/classpath/gnu/CORBA/DynAn/gnuDynEnum.java", "status": "added", "additions": 244, "deletions": 0, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynEnum.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynEnum.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynEnum.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,244 @@\n+/* gnuDynEnum.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.DynAn;\n+\n+import gnu.CORBA.Unexpected;\n+\n+import org.omg.CORBA.Any;\n+import org.omg.CORBA.BAD_PARAM;\n+import org.omg.CORBA.MARSHAL;\n+import org.omg.CORBA.ORB;\n+import org.omg.CORBA.TypeCode;\n+import org.omg.CORBA.portable.InputStream;\n+import org.omg.DynamicAny.DynAny;\n+import org.omg.DynamicAny.DynAnyPackage.InvalidValue;\n+import org.omg.DynamicAny.DynAnyPackage.TypeMismatch;\n+import org.omg.DynamicAny.DynEnum;\n+\n+import java.io.IOException;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * Our implementation of dynamic enumeration.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class gnuDynEnum extends anyUndivideable implements DynEnum\n+{\n+  /**\n+   * Use serialVersionUID for interoperability.\n+   */\n+  private static final long serialVersionUID = 1;\n+\n+  /**\n+   * The valid string values of the enumeration. Most of enumerations are short,\n+   * counting 2-5 memebers. With so small number of memebers, it seems not\n+   * reasonable to use hashtables.\n+   */\n+  final String[] values;\n+\n+  /**\n+   * The current value of enum.\n+   */\n+  int current;\n+\n+  /**\n+   * Create a new dyn enum from the given typecode.\n+   */\n+  public gnuDynEnum(TypeCode oType, TypeCode aType, gnuDynAnyFactory aFactory,\n+    ORB anOrb\n+  )\n+  {\n+    super(oType, aType, aFactory, anOrb);\n+    try\n+      {\n+        values = new String[ final_type.member_count() ];\n+\n+        for (int i = 0; i < values.length; i++)\n+          {\n+            values [ i ] = final_type.member_name(i);\n+          }\n+      }\n+    catch (Exception e)\n+      {\n+        throw new BAD_PARAM(\"Not enum\");\n+      }\n+  }\n+\n+  /**\n+   * Create a clone of the given enum, sharing values and final_type.\n+   */\n+  public gnuDynEnum(gnuDynEnum from)\n+  {\n+    super(from.official_type, from.final_type, from.factory, from.orb);\n+    values = from.values;\n+  }\n+\n+  /**\n+   * Assign the Enum from the passed value. The passed DynAny must hold the\n+   * enumeration of exactly the same final_type.\n+   */\n+  public void assign(DynAny from) throws TypeMismatch\n+  {\n+    checkType(official_type, from.type());\n+    if (!(from instanceof DynEnum))\n+      throw new TypeMismatch(\"Not a DynEnum\");\n+    try\n+      {\n+        set_as_ulong(((DynEnum) from).get_as_ulong());\n+      }\n+    catch (InvalidValue e)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(e);\n+        throw t;\n+      }\n+  }\n+\n+  /**\n+   * Copy this DynEnum.\n+   */\n+  public DynAny copy()\n+  {\n+    gnuDynEnum other = new gnuDynEnum(this);\n+    other.current = current;\n+    return other;\n+  }\n+\n+  /**\n+   * Compares for equality.\n+   */\n+  public boolean equal(DynAny other)\n+  {\n+    if (other instanceof gnuDynEnum)\n+      {\n+        gnuDynEnum oe = (gnuDynEnum) other;\n+        return current == oe.current &&\n+        (oe.values == values || Arrays.equals(values, oe.values));\n+      }\n+    else if (other instanceof DynEnum)\n+      {\n+        DynEnum oe = (DynEnum) other;\n+        return current == oe.get_as_ulong() && official_type.equal(oe.type());\n+      }\n+    else\n+      return false;\n+  }\n+\n+  /**\n+   * Set value from any that must contain enumeration.\n+   */\n+  public void from_any(Any an_any) throws TypeMismatch, InvalidValue\n+  {\n+    checkType(official_type, an_any.type());\n+    try\n+      {\n+        InputStream in = an_any.create_input_stream();\n+        set_as_ulong(in.read_long());\n+        in.close();\n+      }\n+    catch (MARSHAL eof)\n+      {\n+        throw new InvalidValue();\n+      }\n+    catch (IOException ex)\n+      {\n+        throw new Unexpected(ex);\n+      }\n+  }\n+\n+  /**\n+   * Get the value of this enumeration as string.\n+   */\n+  public String get_as_string()\n+  {\n+    return values [ current ];\n+  }\n+\n+  /**\n+   * Get the value of this enumeration as int.\n+   */\n+  public int get_as_ulong()\n+  {\n+    return current;\n+  }\n+\n+  /**\n+   * Set the value of this enumeration as string.\n+   */\n+  public void set_as_string(String value) throws InvalidValue\n+  {\n+    for (int i = 0; i < values.length; i++)\n+      {\n+        if (values [ i ].equals(value))\n+          {\n+            current = i;\n+            valueChanged();\n+            return;\n+          }\n+      }\n+    throw new InvalidValue(value);\n+  }\n+\n+  /**\n+   * Set the value of this enumeration as int.\n+   */\n+  public void set_as_ulong(int value) throws InvalidValue\n+  {\n+    if (value < 0 || value >= values.length)\n+      throw new InvalidValue(value + \" not in [0..\" + values.length);\n+    else\n+      {\n+        current = value;\n+        valueChanged();\n+      }\n+  }\n+\n+  /**\n+   * Wrap the enumeration value into any.\n+   */\n+  public Any to_any()\n+  {\n+    Any a = createAny();\n+    a.insert_long(current);\n+    a.type(official_type);\n+    return a;\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "39b0022624503feb5f25d95e8d9719d63fa5c88b", "filename": "libjava/classpath/gnu/CORBA/DynAn/gnuDynFixed.java", "status": "added", "additions": 252, "deletions": 0, "changes": 252, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynFixed.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynFixed.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynFixed.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,252 @@\n+/* gnuDynFixed.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.DynAn;\n+\n+import org.omg.CORBA.Any;\n+import org.omg.CORBA.BAD_OPERATION;\n+import org.omg.CORBA.BAD_PARAM;\n+import org.omg.CORBA.ORB;\n+import org.omg.CORBA.TypeCode;\n+import org.omg.DynamicAny.DynAny;\n+import org.omg.DynamicAny.DynAnyPackage.InvalidValue;\n+import org.omg.DynamicAny.DynAnyPackage.TypeMismatch;\n+import org.omg.DynamicAny.DynFixed;\n+import org.omg.DynamicAny.DynFixedOperations;\n+\n+import java.math.BigDecimal;\n+\n+/**\n+ * Implements DynAny, holding CORBA <code>fixed</code>. This class is derived\n+ * from gnuDynEnm to avoid repetetive inclusion of unused DynAny methods.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class gnuDynFixed extends anyUndivideable implements DynFixed\n+{\n+  /**\n+   * Use serialVersionUID for interoperability.\n+   */\n+  private static final long serialVersionUID = 1;\n+\n+  /**\n+   * The default value, assigned in the new instance.\n+   */\n+  static final BigDecimal ZERO = new BigDecimal(\"0.0\");\n+\n+  /**\n+   * The content of the dyn fixed, wrapped in this DynAny.\n+   */\n+  BigDecimal value;\n+\n+  /**\n+   * The number of digits after the decimal point.\n+   */\n+  final int scale;\n+\n+  /**\n+   * The number of digits.\n+   */\n+  final int digits;\n+\n+  /**\n+   * Create a new instance of the dyn fixed.\n+   */\n+  public gnuDynFixed(TypeCode oType, TypeCode aType,\n+    gnuDynAnyFactory aFactory, ORB anOrb\n+  )\n+  {\n+    super(oType, aType, aFactory, anOrb);\n+    try\n+      {\n+        digits = final_type.fixed_digits();\n+        scale = final_type.fixed_scale();\n+      }\n+    catch (Exception e)\n+      {\n+        throw new BAD_PARAM(\"Not a fixed\");\n+      }\n+    value = ZERO;\n+  }\n+\n+  /**\n+   * Clone the current instance.\n+   */\n+  public gnuDynFixed(gnuDynFixed from)\n+  {\n+    super(from.official_type, from.final_type, from.factory, from.orb);\n+    digits = from.digits;\n+    scale = from.scale;\n+    value = from.value;\n+  }\n+\n+  /**\n+   * Get the value of the wrapped dyn fixed, as string.\n+   */\n+  public String get_value()\n+  {\n+    return value.toString();\n+  }\n+\n+  /**\n+   * Set the value.\n+   */\n+  public boolean set_value(String fixed_value)\n+    throws TypeMismatch, InvalidValue\n+  {\n+    // Count the digits till decimal point.\n+    int digs = 0;\n+    char c;\n+    boolean leading0 = true;\n+    Digs:\n+    for (int i = 0; i < fixed_value.length(); i++)\n+      {\n+        c = fixed_value.charAt(i);\n+        if (Character.isDigit(c))\n+          {\n+            if (!(c == '0' && leading0))\n+              digs++;\n+            if (c != '0')\n+              leading0 = false;\n+          }\n+        else if (c == '.')\n+          break Digs;\n+      }\n+    if (digs > (digits - scale))\n+      throw new InvalidValue(\"Too many digits: \" + digs + \" for \" + digits +\n+        \".\" + scale\n+      );\n+\n+    try\n+      {\n+        value = new BigDecimal(fixed_value);\n+      }\n+    catch (NumberFormatException ex)\n+      {\n+        if (fixed_value.trim().length() == 0)\n+          throw new InvalidValue(\"Empty string passed\");\n+\n+        TypeMismatch inva =\n+          new TypeMismatch(\"Not a number: '\" + fixed_value + \"'\");\n+        inva.initCause(ex);\n+        throw inva;\n+      }\n+\n+    valueChanged();\n+    return value.scale() <= scale;\n+  }\n+\n+  /**\n+   * Assign the value from another BigDecimal.\n+   */\n+  public void assign(DynAny from) throws TypeMismatch\n+  {\n+    checkType(official_type, from.type());\n+\n+    if (from instanceof gnuDynFixed)\n+      {\n+        gnuDynFixed other = (gnuDynFixed) from;\n+        value = other.value;\n+      }\n+    else if (from instanceof DynFixedOperations)\n+      {\n+        value = new BigDecimal(((DynFixedOperations) from).get_value());\n+      }\n+    else\n+      throw new TypeMismatch(\"Not a DynFixed\");\n+    valueChanged();\n+  }\n+\n+  /**\n+   * Create a copy.\n+   */\n+  public DynAny copy()\n+  {\n+    return new gnuDynFixed(this);\n+  }\n+\n+  /**\n+   * Compare for equality.\n+   */\n+  public boolean equal(DynAny other)\n+  {\n+    if (other instanceof gnuDynFixed)\n+      {\n+        // Normally, this code would be executed.\n+        return value.equals(((gnuDynFixed) other).value);\n+      }\n+    if (other instanceof DynFixedOperations)\n+      {\n+        // This may be involved when mixing implementations.\n+        return ((DynFixedOperations) other).get_value().equals(get_value());\n+      }\n+    else\n+      return false;\n+  }\n+\n+  /**\n+   * Set the value from Any (must hold <code>fixed</code> with the matching\n+   * typecode.).\n+   */\n+  public void from_any(Any an_any) throws TypeMismatch, InvalidValue\n+  {\n+    try\n+      {\n+        checkType(official_type, an_any.type());\n+\n+        value = an_any.extract_fixed();\n+        valueChanged();\n+      }\n+    catch (BAD_OPERATION e)\n+      {\n+        InvalidValue t = new InvalidValue();\n+        t.initCause(e);\n+        throw t;\n+      }\n+  }\n+\n+  /**\n+   * Create and return Any, holding this DynFixed value.\n+   */\n+  public Any to_any()\n+  {\n+    Any g = createAny();\n+    g.insert_fixed(value, official_type);\n+    return g;\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "cfa122f07d7c03f4c26ad6814f7299c6a79d6fbb", "filename": "libjava/classpath/gnu/CORBA/DynAn/gnuDynSequence.java", "status": "added", "additions": 254, "deletions": 0, "changes": 254, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynSequence.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynSequence.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynSequence.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,254 @@\n+/* gnuDynSequence.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.DynAn;\n+\n+import gnu.CORBA.Unexpected;\n+\n+import org.omg.CORBA.Any;\n+import org.omg.CORBA.BAD_PARAM;\n+import org.omg.CORBA.ORB;\n+import org.omg.CORBA.TypeCode;\n+import org.omg.CORBA.TypeCodePackage.BadKind;\n+import org.omg.DynamicAny.DynAny;\n+import org.omg.DynamicAny.DynAnyFactoryPackage.InconsistentTypeCode;\n+import org.omg.DynamicAny.DynAnyPackage.InvalidValue;\n+import org.omg.DynamicAny.DynAnyPackage.TypeMismatch;\n+import org.omg.DynamicAny.DynSequence;\n+\n+import java.io.Serializable;\n+\n+import java.lang.reflect.*;\n+\n+public class gnuDynSequence\n+  extends gnuDynArray\n+  implements DynSequence, Serializable\n+{\n+  /**\n+   * Use serialVersionUID for interoperability.\n+   */\n+  private static final long serialVersionUID = 1;\n+\n+  /**\n+   * The bound of the sequence, as defined in typecode.\n+   */\n+  final int bound;\n+\n+  /**\n+   * Create a new gnuDynSequence with the given typecode.\n+   *\n+   * @throws BAD_PARAM if the passed typecode is probably not a sequence\n+   * typecode.\n+   */\n+  public gnuDynSequence(TypeCode oType, TypeCode aType,\n+                        gnuDynAnyFactory aFactory, ORB anOrb\n+                       )\n+                 throws BAD_PARAM\n+  {\n+    super(oType, aType, aFactory, anOrb, false);\n+    array = new DynAny[ 0 ];\n+    try\n+      {\n+        bound = final_type.length();\n+      }\n+    catch (BadKind ex)\n+      {\n+        throw new Unexpected(ex);\n+      }\n+  }\n+\n+  /**\n+   * Get the length of the sequence.\n+   */\n+  public int get_length()\n+  {\n+    return array.length;\n+  }\n+\n+  /**\n+   * Resize the sequence, preserving components.\n+   */\n+  public void set_length(int length)\n+                  throws InvalidValue\n+  {\n+    checkBound(length);\n+    if (length == array.length)\n+      return; // Nothing to do.\n+    else if (length < array.length)\n+      {\n+        // Truncate.\n+        DynAny[] d = new DynAny[ length ];\n+        for (int i = 0; i < d.length; i++)\n+          d [ i ] = array [ i ];\n+        array = d;\n+      }\n+    else\n+      {\n+        // Expand.\n+        DynAny[] d = new DynAny[ length ];\n+        for (int i = 0; i < array.length; i++)\n+          d [ i ] = array [ i ];\n+\n+        for (int i = array.length; i < d.length; i++)\n+          {\n+            try\n+              {\n+                d [ i ] =\n+                  factory.create_dyn_any_from_type_code(official_components);\n+              }\n+            catch (InconsistentTypeCode e)\n+              {\n+                throw new Unexpected(e);\n+              }\n+          }\n+        array = d;\n+      }\n+    valueChanged();\n+  }\n+\n+  /**\n+   * Copy one DynAny into another.\n+   */\n+  public void assign(DynAny from)\n+              throws TypeMismatch\n+  {\n+    checkType(official_type, from.type());\n+    if (from instanceof DynSequence)\n+      {\n+        DynSequence dyn = (DynSequence) from;\n+        array = dyn.get_elements_as_dyn_any();\n+      }\n+    else\n+      throw new TypeMismatch();\n+  }\n+\n+  /*\n+   * Set the contenst of the sequence, resizing if required.\n+   */\n+  public void set_elements_as_dyn_any(DynAny[] value)\n+                               throws InvalidValue, TypeMismatch\n+  {\n+    checkBound(value.length);\n+    if (array.length != value.length)\n+      set_length(value.length);\n+\n+    for (int i = 0; i < value.length; i++)\n+      {\n+        checkType(official_components, value [ i ].type());\n+        array [ i ].assign(value [ i ]);\n+      }\n+    valueChanged();\n+  }\n+\n+  /**\n+   * Set the elements from array of Any's.\n+   */\n+  public void set_elements(Any[] value)\n+                    throws InvalidValue, TypeMismatch\n+  {\n+    checkBound(value.length);\n+\n+    DynAny[] prev = array;\n+\n+    array = new DynAny[ value.length ];\n+    try\n+      {\n+        super.set_elements(value);\n+\n+        // valueChanged() is called in super.set_elements(value).\n+      }\n+\n+    // On the problem, value does not change.\n+    catch (TypeMismatch ex)\n+      {\n+        array = prev;\n+        throw ex;\n+      }\n+    catch (InvalidValue ex)\n+      {\n+        array = prev;\n+        throw ex;\n+      }\n+    catch (RuntimeException rex)\n+      {\n+        array = prev;\n+        throw rex;\n+      }\n+  }\n+\n+  /**\n+   * Create a copy.\n+   */\n+  public DynAny copy()\n+  {\n+    DynAny[] c = new DynAny[ array.length ];\n+    for (int i = 0; i < c.length; i++)\n+      {\n+        c [ i ] = array [ i ].copy();\n+      }\n+\n+    gnuDynSequence d =\n+      new gnuDynSequence(official_type, final_type, factory, orb);\n+    d.array = c;\n+    return d;\n+  }\n+\n+  /**\n+   * Check the bound.\n+   *\n+   * @param x the value to check.\n+   */\n+  void checkBound(int x)\n+           throws InvalidValue\n+  {\n+    if (bound != 0)\n+      if (x < 0 || x > bound)\n+        throw new InvalidValue(x + \" out of bounds, valid [0..\" + bound + \"]\");\n+  }\n+\n+  /**\n+   * Check if array size is valid. Called from from_any.\n+   */\n+  protected void checkArrayValid(Object members)\n+                          throws TypeMismatch, InvalidValue\n+  {\n+    checkBound(Array.getLength(members));\n+    if (get_length() != Array.getLength(members))\n+      set_length(Array.getLength(members));\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "b086d6478ccb3a6ffa9c84e7a1578adc30979a30", "filename": "libjava/classpath/gnu/CORBA/DynAn/gnuDynStruct.java", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynStruct.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynStruct.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynStruct.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,109 @@\n+/* gnuDynStruct.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.DynAn;\n+\n+import java.io.Serializable;\n+\n+import org.omg.CORBA.ORB;\n+import org.omg.CORBA.TypeCode;\n+import org.omg.DynamicAny.DynStruct;\n+import org.omg.DynamicAny.NameDynAnyPair;\n+import org.omg.DynamicAny.NameValuePair;\n+import gnu.CORBA.Unexpected;\n+import org.omg.DynamicAny.DynAny;\n+\n+/**\n+ * Implementation of the DynStruct.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class gnuDynStruct\n+  extends abstractRecord\n+  implements DynStruct, Serializable\n+{\n+  /**\n+   * Use serialVersionUID for interoperability.\n+   */\n+  private static final long serialVersionUID = 1;\n+\n+  /**\n+   * Create an instance.\n+   */\n+  public gnuDynStruct(TypeCode oType, TypeCode aType,\n+                      gnuDynAnyFactory aFactory, ORB anOrb)\n+  {\n+    super(oType, aType, aFactory, anOrb);\n+\n+    // Initialise fields.\n+    try\n+      {\n+        array = new DynAny[ final_type.member_count() ];\n+        fNames = new String[ array.length ];\n+        for (int i = 0; i < array.length; i++)\n+          {\n+            array [ i ] =\n+              factory.create_dyn_any_from_type_code(final_type.member_type(i));\n+            fNames [ i ] = final_type.member_name(i);\n+          }\n+      }\n+    catch (Exception e)\n+      {\n+        throw new Unexpected(e);\n+      }\n+  }\n+\n+  /** @inheritDoc */\n+  protected abstractRecord newInstance(TypeCode oType, TypeCode aType,\n+                                       gnuDynAnyFactory aFactory, ORB anOrb)\n+  {\n+    return new gnuDynStruct(oType, aType, aFactory, anOrb);\n+  }\n+\n+  /** @inheritDoc */\n+  public NameDynAnyPair[] get_members_as_dyn_any()\n+  {\n+    return super.gnu_get_members_as_dyn_any();\n+  }\n+\n+  /** @inheritDoc */\n+  public NameValuePair[] get_members()\n+  {\n+    return super.gnu_get_members();\n+  }\n+}"}, {"sha": "ad41e24b6aea49b7d3eec141fec0d3a8c4bd58a9", "filename": "libjava/classpath/gnu/CORBA/DynAn/gnuDynUnion.java", "status": "added", "additions": 439, "deletions": 0, "changes": 439, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynUnion.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynUnion.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynUnion.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,439 @@\n+/* gnuDynUnion.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.DynAn;\n+\n+import gnu.CORBA.Unexpected;\n+\n+import org.omg.CORBA.Any;\n+import org.omg.CORBA.MARSHAL;\n+import org.omg.CORBA.ORB;\n+import org.omg.CORBA.TCKind;\n+import org.omg.CORBA.TypeCode;\n+import org.omg.CORBA.TypeCodePackage.BadKind;\n+import org.omg.CORBA.portable.InputStream;\n+import org.omg.CORBA.portable.OutputStream;\n+import org.omg.DynamicAny.DynAny;\n+import org.omg.DynamicAny.DynAnyFactoryPackage.InconsistentTypeCode;\n+import org.omg.DynamicAny.DynAnyPackage.InvalidValue;\n+import org.omg.DynamicAny.DynAnyPackage.TypeMismatch;\n+import org.omg.DynamicAny.DynUnion;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Implementation of DynUnion.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class gnuDynUnion\n+  extends anyDivideable\n+  implements DynUnion, Serializable, valueChangedListener\n+{\n+  /**\n+   * Use serialVersionUID for interoperability.\n+   */\n+  private static final long serialVersionUID = 1;\n+\n+  /**\n+   * The discrimintor of this union.\n+   */\n+  DynAny discriminator;\n+\n+  /**\n+   * The message string that occurs several times throwing exception.\n+   */\n+  static String NOAM = \"No active member\";\n+\n+  /**\n+   * Create a new instance with the given typecode.\n+   *\n+   * @param aType the final_type, must be final_type of the union.\n+   */\n+  public gnuDynUnion(TypeCode oType, TypeCode aType, gnuDynAnyFactory aFactory,\n+                     ORB anOrb\n+                    )\n+              throws InconsistentTypeCode\n+  {\n+    super(oType, aType, aFactory, anOrb);\n+    try\n+      {\n+        discriminator =\n+          factory.create_dyn_any_from_type_code(final_type.discriminator_type());\n+\n+        ((abstractDynAny) discriminator).listener = this;\n+\n+        if (final_type.default_index() >= 0)\n+          set_to_default_member();\n+        else\n+          set_to_no_active_member();\n+      }\n+    catch (Exception ex)\n+      {\n+        InconsistentTypeCode inc = new InconsistentTypeCode(\"discriminator\");\n+        inc.initCause(ex);\n+        throw inc;\n+      }\n+  }\n+\n+  /*\n+   * (non-Javadoc)\n+   *\n+   * @see gnu.CORBA.DynAn.anyDivideable#to_any()\n+   */\n+  public Any to_any()\n+  {\n+    Any a = createAny();\n+    OutputStream ou = a.create_output_stream();\n+    discriminator.to_any().write_value(ou);\n+    if (array.length == 2)\n+      array [ 1 ].to_any().write_value(ou);\n+    a.read_value(ou.create_input_stream(), final_type);\n+    return a;\n+  }\n+\n+  /**\n+   * Assign from another identical structure.\n+   */\n+  public void assign(DynAny from)\n+              throws TypeMismatch\n+  {\n+    checkType(official_type, from.type());\n+    if (!(from instanceof DynUnion))\n+      throw new TypeMismatch(\"DynUnion required\");\n+    else\n+      {\n+        try\n+          {\n+            DynUnion u = (DynUnion) from;\n+            discriminator.assign(u.get_discriminator());\n+            if (u.has_no_active_member())\n+              {\n+                if (array.length != 1)\n+                  array = new DynAny[] { discriminator };\n+              }\n+            else\n+              {\n+                if (array.length != 2)\n+                  array = new DynAny[] { discriminator, u.member().copy() };\n+                else\n+                  array [ 1 ] = u.member().copy();\n+              }\n+          }\n+        catch (InvalidValue e)\n+          {\n+            throw new Unexpected(e);\n+          }\n+      }\n+    valueChanged();\n+  }\n+\n+  /** @inheritDoc */\n+  public DynAny copy()\n+  {\n+    try\n+      {\n+        gnuDynUnion other =\n+          new gnuDynUnion(official_type, final_type, factory, orb);\n+        other.discriminator = discriminator.copy();\n+        ((abstractDynAny) other.discriminator).listener = other;\n+        if (array.length == 1)\n+          {\n+            other.array = new DynAny[] { other.discriminator };\n+          }\n+        else\n+          {\n+            other.array =\n+              new DynAny[] { other.discriminator, array [ 1 ].copy() };\n+          }\n+        return other;\n+      }\n+    catch (InconsistentTypeCode ex)\n+      {\n+        throw new Unexpected(ex);\n+      }\n+  }\n+\n+  /**\n+   * Done via reading from stream.\n+   */\n+  public void from_any(Any an_any)\n+                throws TypeMismatch, InvalidValue\n+  {\n+    checkType(official_type, an_any.type());\n+\n+    Any adis = createAny();\n+    try\n+      {\n+        InputStream stream = an_any.create_input_stream();\n+        adis.read_value(stream, final_type.discriminator_type());\n+\n+        DynAny nd = factory.create_dyn_any(adis);\n+\n+        set_discriminator(nd);\n+        if (array.length == 2)\n+          {\n+            // Reusing the same Any <code>adis</code>.\n+            adis.read_value(stream, array [ 1 ].type());\n+            array [ 1 ].from_any(adis);\n+          }\n+      }\n+    catch (InconsistentTypeCode it)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(it);\n+        throw t;\n+      }\n+    catch (MARSHAL m)\n+      {\n+        InvalidValue t = new InvalidValue();\n+        t.initCause(m);\n+        throw t;\n+      }\n+    catch (BadKind b)\n+      {\n+        throw new Unexpected(b);\n+      }\n+    valueChanged();\n+  }\n+\n+  /** @inheritDoc */\n+  public TCKind discriminator_kind()\n+  {\n+    return discriminator.type().kind();\n+  }\n+\n+  /** @inheritDoc */\n+  public DynAny get_discriminator()\n+  {\n+    return discriminator;\n+  }\n+\n+  /** @inheritDoc */\n+  public boolean has_no_active_member()\n+  {\n+    return array.length == 1;\n+  }\n+\n+  /** @inheritDoc */\n+  public TCKind member_kind()\n+                     throws InvalidValue\n+  {\n+    return member().type().kind();\n+  }\n+\n+  /**\n+   * Get the name of the current variant of the union.\n+   */\n+  public String member_name()\n+                     throws InvalidValue\n+  {\n+    if (array.length == 1)\n+      throw new InvalidValue(NOAM);\n+    try\n+      {\n+        Any da = discriminator.to_any();\n+\n+\n+        // Get the discriminator variant.\n+        Variants:\n+        for (int i = 0; i < final_type.member_count(); i++)\n+          {\n+            if (final_type.member_label(i).equal(da))\n+              return final_type.member_name(i);\n+          }\n+        throw new InvalidValue(NOAM);\n+      }\n+    catch (Exception e)\n+      {\n+        InvalidValue t = new InvalidValue(\"Err\");\n+        t.initCause(e);\n+        throw t;\n+      }\n+  }\n+\n+  /** @inheritDoc */\n+  public DynAny member()\n+                throws InvalidValue\n+  {\n+    if (array.length < 2)\n+      throw new InvalidValue(NOAM);\n+    else\n+      return array [ 1 ];\n+  }\n+\n+  /**\n+   * Set the union discriminator.\n+   */\n+  public void set_discriminator(DynAny aDiscriminator)\n+                         throws TypeMismatch\n+  {\n+    try\n+      {\n+        if (!aDiscriminator.type().equal(final_type.discriminator_type()))\n+          throw new TypeMismatch(\"Wrong discriminator final_type for \" +\n+                                 final_type.name()\n+                                );\n+\n+        // Seting the same discriminator value again should not change\n+        // the fields of the current member.\n+        if (!discriminator.equal(aDiscriminator))\n+          {\n+            discriminator.assign(aDiscriminator);\n+            updateMember();\n+          }\n+        else\n+          {\n+            pos = array.length == 2 ? 1 : 0;\n+          }\n+      }\n+    catch (Exception e)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(e);\n+        throw t;\n+      }\n+  }\n+\n+  /**\n+   * Set to default member, if one exists.\n+   */\n+  public void set_to_default_member()\n+                             throws TypeMismatch\n+  {\n+    try\n+      {\n+        int di = final_type.default_index();\n+        if (di < 0)\n+          throw new TypeMismatch(\"Union \" + final_type.name() +\n+                                 \"has no default index\"\n+                                );\n+\n+        Any da = final_type.member_label(di);\n+        discriminator.from_any(da);\n+        updateMember();\n+      }\n+    catch (TypeMismatch m)\n+      {\n+        // This one OK.\n+        throw m;\n+      }\n+    catch (Exception e)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(e);\n+        throw t;\n+      }\n+  }\n+\n+  /** @inheritDoc */\n+  public void set_to_no_active_member()\n+                               throws TypeMismatch\n+  {\n+    try\n+      {\n+        if (final_type.default_index() >= 0)\n+          {\n+            throw new TypeMismatch(\"Explicit default case defined.\");\n+          }\n+      }\n+    catch (BadKind ex)\n+      {\n+        // The default index is not set.\n+      }\n+    array = new DynAny[] { discriminator };\n+    valueChanged();\n+  }\n+\n+  /**\n+   * Update member, in accordance with discriminator value.\n+   */\n+  public void updateMember()\n+                    throws TypeMismatch\n+  {\n+    try\n+      {\n+        Any da = discriminator.to_any();\n+\n+\n+        // Get the discriminator variant.\n+        Variants:\n+        for (int i = 0; i < final_type.member_count(); i++)\n+          {\n+            if (final_type.member_label(i).equal(da))\n+              {\n+                array =\n+                  new DynAny[]\n+                  {\n+                    discriminator,\n+                    factory.create_dyn_any_from_type_code(final_type.member_type(i))\n+                  };\n+                pos = 1;\n+                valueChanged();\n+                return;\n+              }\n+          }\n+      }\n+    catch (Exception e)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(e);\n+        throw t;\n+      }\n+\n+    // Discrimintator does not point to valid member.\n+    array = new DynAny[] { discriminator };\n+    pos = 0;\n+    valueChanged();\n+  }\n+\n+  /**\n+   * Called when the discriminator is changed.\n+   */\n+  public void changed()\n+  {\n+    try\n+      {\n+        updateMember();\n+      }\n+    catch (TypeMismatch ex)\n+      {\n+        throw new Unexpected(ex);\n+      }\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "c2db94797859cb333d55c2e8b7715829e3687f10", "filename": "libjava/classpath/gnu/CORBA/DynAn/gnuDynValue.java", "status": "added", "additions": 382, "deletions": 0, "changes": 382, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynValue.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynValue.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynValue.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,382 @@\n+/* gnuDynValue.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.DynAn;\n+\n+import gnu.CORBA.Unexpected;\n+\n+import org.omg.CORBA.Any;\n+import org.omg.CORBA.BAD_PARAM;\n+import org.omg.CORBA.MARSHAL;\n+import org.omg.CORBA.ORB;\n+import org.omg.CORBA.TCKind;\n+import org.omg.CORBA.TypeCode;\n+import org.omg.CORBA.VM_TRUNCATABLE;\n+import org.omg.CORBA.portable.OutputStream;\n+import org.omg.CORBA.portable.ValueFactory;\n+import org.omg.DynamicAny.DynAny;\n+import org.omg.DynamicAny.DynAnyPackage.InvalidValue;\n+import org.omg.DynamicAny.DynAnyPackage.TypeMismatch;\n+import org.omg.DynamicAny.DynStruct;\n+import org.omg.DynamicAny.DynValue;\n+import org.omg.DynamicAny.DynValueCommon;\n+import org.omg.DynamicAny.DynValueOperations;\n+import org.omg.DynamicAny.NameDynAnyPair;\n+import org.omg.DynamicAny.NameValuePair;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Implementation of DynValue.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class gnuDynValue extends abstractRecord implements DynValue,\n+  Serializable\n+{\n+  /**\n+   * Use serialVersionUID for interoperability.\n+   */\n+  private static final long serialVersionUID = 1;\n+\n+  /**\n+   * If true, the value of this ValueType is set to null.\n+   */\n+  boolean isNull;\n+\n+  /**\n+   * Create an instance.\n+   */\n+  public gnuDynValue(TypeCode oType, TypeCode aType,\n+    gnuDynAnyFactory aFactory, ORB anOrb\n+  )\n+  {\n+    super(oType, aType, aFactory, anOrb);\n+\n+    // Initialise fields. The array of fields also includes all inherited\n+    // fields.\n+    try\n+      {\n+        array = new DynAny[ final_type.member_count() ];\n+        fNames = new String[ array.length ];\n+        for (int i = 0; i < array.length; i++)\n+          {\n+            array [ i ] =\n+              factory.create_dyn_any_from_type_code(final_type.member_type(i));\n+            fNames [ i ] = final_type.member_name(i);\n+          }\n+\n+        // Search of inherited members.\n+        if (final_type.type_modifier() == VM_TRUNCATABLE.value)\n+          {\n+            TypeCode parent = final_type.concrete_base_type();\n+            DynAny ancestor = factory.create_dyn_any_from_type_code(parent);\n+\n+            if (ancestor instanceof DynValue)\n+              {\n+                // Add members of ancestor in front of the curren members.\n+                DynValue anc = (DynValue) ancestor;\n+                anc.set_to_value();\n+\n+                NameDynAnyPair[] aar = anc.get_members_as_dyn_any();\n+                inheritFields(aar);\n+              }\n+            else if (ancestor instanceof DynStruct)\n+              {\n+                // Add members of ancestor in front of the curren members.\n+                DynStruct anc = (DynStruct) ancestor;\n+                NameDynAnyPair[] aar = anc.get_members_as_dyn_any();\n+                inheritFields(aar);\n+              }\n+            else\n+              throw new BAD_PARAM(\"The parent of \" + final_type.id() + \", \" +\n+                parent.id() + \", is not structure nor value.\"\n+              );\n+          }\n+      }\n+    catch (Exception e)\n+      {\n+        throw new Unexpected(e);\n+      }\n+\n+    set_to_null();\n+  }\n+\n+  /**\n+   * Inherit the provided fields.\n+   */\n+  private void inheritFields(NameDynAnyPair[] aar)\n+  {\n+    DynAny[] nArray = new DynAny[ array.length + aar.length ];\n+    String[] nNames = new String[ array.length + aar.length ];\n+    int p = 0;\n+    for (int i = 0; i < aar.length; i++)\n+      {\n+        nArray [ p ] = aar [ i ].value;\n+        nNames [ p ] = aar [ i ].id;\n+        p++;\n+      }\n+\n+    for (int i = 0; i < array.length; i++)\n+      {\n+        nArray [ p ] = array [ i ];\n+        nNames [ p ] = fNames [ i ];\n+        p++;\n+      }\n+\n+    array = nArray;\n+    fNames = nNames;\n+  }\n+\n+  /** @inheritDoc */\n+  public TCKind current_member_kind() throws TypeMismatch, InvalidValue\n+  {\n+    if (isNull)\n+      throw new TypeMismatch(ISNULL);\n+    else\n+      return super.current_member_kind();\n+  }\n+  ;\n+\n+  /** @inheritDoc */\n+  public String current_member_name() throws TypeMismatch, InvalidValue\n+  {\n+    if (isNull)\n+      throw new TypeMismatch(ISNULL);\n+    else\n+      return super.current_member_name();\n+  }\n+  ;\n+\n+  /** @inheritDoc */\n+  public NameDynAnyPair[] get_members_as_dyn_any() throws InvalidValue\n+  {\n+    if (isNull)\n+      throw new InvalidValue(ISNULL);\n+    return super.gnu_get_members_as_dyn_any();\n+  }\n+  ;\n+\n+  /** @inheritDoc */\n+  public NameValuePair[] get_members() throws InvalidValue\n+  {\n+    if (isNull)\n+      throw new InvalidValue(ISNULL);\n+    else\n+      return super.gnu_get_members();\n+  }\n+  ;\n+\n+  /** @inheritDoc */\n+  public void set_members_as_dyn_any(NameDynAnyPair[] value)\n+    throws TypeMismatch, InvalidValue\n+  {\n+    super.set_members_as_dyn_any(value);\n+    isNull = false;\n+  }\n+  ;\n+\n+  /** @inheritDoc */\n+  public void set_members(NameValuePair[] value)\n+    throws TypeMismatch, InvalidValue\n+  {\n+    super.set_members(value);\n+    isNull = false;\n+  }\n+  ;\n+\n+  /** @inheritDoc */\n+  public boolean is_null()\n+  {\n+    return isNull;\n+  }\n+\n+  /** @inheritDoc */\n+  public void set_to_null()\n+  {\n+    isNull = true;\n+    valueChanged();\n+  }\n+\n+  /** @inheritDoc */\n+  public void set_to_value()\n+  {\n+    isNull = false;\n+    valueChanged();\n+  }\n+\n+  /**\n+   * Create a new instance.\n+   */\n+  protected abstractRecord newInstance(TypeCode oType, TypeCode aType,\n+    gnuDynAnyFactory aFactory, ORB anOrb\n+  )\n+  {\n+    gnuDynValue v = new gnuDynValue(oType, aType, aFactory, anOrb);\n+    if (isNull)\n+      v.set_to_null();\n+    else\n+      v.set_to_value();\n+    return v;\n+  }\n+\n+  /**\n+   * Compare for equality, minding null values.\n+   */\n+  public boolean equal(DynAny other)\n+  {\n+    if (other instanceof DynValueOperations)\n+      {\n+        DynValueCommon o = (DynValueCommon) other;\n+        if (isNull)\n+          return o.is_null() && o.type().equal(official_type);\n+        else\n+          return !o.is_null() && super.equal(other);\n+      }\n+    else\n+      return false;\n+  }\n+\n+  /**\n+   * Get the focused component, throwing exception if the current value is null.\n+   */\n+  protected DynAny focused() throws InvalidValue, TypeMismatch\n+  {\n+    if (isNull)\n+      throw new TypeMismatch(ISNULL);\n+    else\n+      return super.focused();\n+  }\n+\n+  /**\n+   * Convert into Any.\n+   */\n+  public Any to_any()\n+  {\n+    if (isNull)\n+      {\n+        Any a0 = createAny();\n+        a0.type(orb.get_primitive_tc(TCKind.tk_null));\n+        return a0;\n+      }\n+    else\n+      {\n+        try\n+          {\n+            ValueFactory factory =\n+              ((org.omg.CORBA_2_3.ORB) orb).lookup_value_factory(official_type.id());\n+            if (factory == null)\n+              throw new MARSHAL(\"Factory for \" + official_type.id() +\n+                \" not registered.\"\n+              );\n+\n+            OutputStream out = orb.create_output_stream();\n+\n+            for (int i = 0; i < array.length; i++)\n+              array [ i ].to_any().write_value(out);\n+\n+            org.omg.CORBA_2_3.portable.InputStream in =\n+              (org.omg.CORBA_2_3.portable.InputStream) out.create_input_stream();\n+            Serializable v = factory.read_value(in);\n+\n+            Any g = createAny();\n+            g.type(official_type);\n+            g.insert_Value(v, official_type);\n+\n+            return g;\n+          }\n+        catch (Exception e)\n+          {\n+            throw new Unexpected(e);\n+          }\n+      }\n+  }\n+\n+  /** @inheritDoc */\n+  public void assign(DynAny from) throws TypeMismatch\n+  {\n+    checkType(official_type, from.type());\n+\n+    if (from instanceof DynValue)\n+      {\n+        DynValue other = (DynValue) from;\n+        if (other.is_null())\n+          set_to_null();\n+        else\n+          {\n+            set_to_value();\n+            try\n+              {\n+                DynValueOperations src = (DynValueOperations) from;\n+                set_members_as_dyn_any(src.get_members_as_dyn_any());\n+              }\n+            catch (InvalidValue e)\n+              {\n+                TypeMismatch t = new TypeMismatch(\"Invalid value\");\n+                t.initCause(e);\n+                throw t;\n+              }\n+          }\n+      }\n+    else\n+      throw new TypeMismatch(\"Not a DynValue\");\n+  }\n+\n+  /**\n+   * Get the number of components.\n+   */\n+  public int component_count()\n+  {\n+    return isNull ? 0 : super.component_count();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public Serializable get_val() throws TypeMismatch, InvalidValue\n+  {\n+    return to_any().extract_Value();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_val(Serializable a_x) throws InvalidValue, TypeMismatch\n+  {\n+    Any a = to_any();\n+    a.insert_Value(a_x);\n+    from_any(a);\n+    valueChanged();\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "66e18f3b2fe095e9bd98f339ee5bc424728fae41", "filename": "libjava/classpath/gnu/CORBA/DynAn/gnuDynValueBox.java", "status": "added", "additions": 389, "deletions": 0, "changes": 389, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynValueBox.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynValueBox.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FgnuDynValueBox.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,389 @@\n+/* gnuDynValueBox.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.DynAn;\n+\n+import gnu.CORBA.Unexpected;\n+import gnu.CORBA.holderFactory;\n+\n+import org.omg.CORBA.Any;\n+import org.omg.CORBA.ORB;\n+import org.omg.CORBA.TCKind;\n+import org.omg.CORBA.TypeCode;\n+import org.omg.CORBA.TypeCodePackage.BadKind;\n+import org.omg.CORBA.portable.Streamable;\n+import org.omg.DynamicAny.DynAny;\n+import org.omg.DynamicAny.DynAnyFactoryPackage.InconsistentTypeCode;\n+import org.omg.DynamicAny.DynAnyPackage.InvalidValue;\n+import org.omg.DynamicAny.DynAnyPackage.TypeMismatch;\n+import org.omg.DynamicAny.DynValueBox;\n+import org.omg.DynamicAny.DynValueBoxOperations;\n+import org.omg.DynamicAny.DynValueCommon;\n+\n+import java.io.Serializable;\n+\n+import java.lang.reflect.Field;\n+\n+/**\n+ * Implementation of the DynValueBox.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class gnuDynValueBox\n+  extends anyDivideable\n+  implements DynValueBox, Serializable\n+{\n+  /**\n+   * Use serialVersionUID for interoperability.\n+   */\n+  private static final long serialVersionUID = 1;\n+\n+  /**\n+   * The final_type of contents of this value box.\n+   */\n+  final TypeCode content;\n+\n+  /**\n+   * The string for some TypeMismatch exceptions.\n+   */\n+  String CONTENT = \"Box content final_type mismatch\";\n+\n+  /**\n+   * Create a new instance of gnuDynValueBox.\n+   */\n+  public gnuDynValueBox(TypeCode oType, TypeCode aType,\n+                        gnuDynAnyFactory aFactory, ORB anOrb\n+                       )\n+  {\n+    super(oType, aType, aFactory, anOrb);\n+    try\n+      {\n+        content = final_type.content_type();\n+        array = new DynAny[] { factory.create_dyn_any_from_type_code(content) };\n+        set_to_null();\n+      }\n+    catch (Exception e)\n+      {\n+        throw new Unexpected(e);\n+      }\n+  }\n+\n+  /** @inheritDoc */\n+  public void assign(DynAny from)\n+              throws TypeMismatch\n+  {\n+    checkType(official_type, from.type());\n+    if (from instanceof DynValueBoxOperations)\n+      {\n+        DynValueBoxOperations other = (DynValueBoxOperations) from;\n+        if (other.is_null())\n+          set_to_null();\n+        else\n+          {\n+            DynAny inBox;\n+            try\n+              {\n+                inBox = other.get_boxed_value_as_dyn_any();\n+              }\n+            catch (InvalidValue e)\n+              {\n+                TypeMismatch t = new TypeMismatch(\"Invalid value\");\n+                t.initCause(e);\n+                throw t;\n+              }\n+            if (!content.equal(inBox.type()))\n+              throw new TypeMismatch(CONTENT);\n+            array = new DynAny[] { inBox.copy() };\n+          }\n+      }\n+    valueChanged();\n+  }\n+\n+  /** @inheritDoc */\n+  public DynAny copy()\n+  {\n+    gnuDynValueBox other =\n+      new gnuDynValueBox(official_type, final_type, factory, orb);\n+    if (is_null())\n+      other.set_to_null();\n+    else\n+      {\n+        try\n+          {\n+            other.array = new DynAny[] { array [ 0 ].copy() };\n+          }\n+        catch (Exception e)\n+          {\n+            throw new Unexpected(e);\n+          }\n+      }\n+    return other;\n+  }\n+\n+  /**\n+   * Returns null for null value, delegates to super. otherwise.\n+   */\n+  public DynAny current_component()\n+                           throws TypeMismatch\n+  {\n+    if (is_null())\n+      return null;\n+    else\n+      return super.current_component();\n+  }\n+\n+  /**\n+   * Compare for equality, minding null values.\n+   */\n+  public boolean equal(DynAny other)\n+  {\n+    if (other instanceof DynValueCommon)\n+      {\n+        DynValueCommon o = (DynValueCommon) other;\n+        if (is_null())\n+          return o.is_null() && o.type().equal(official_type);\n+        else\n+          return !o.is_null() && super.equal(other);\n+      }\n+    else\n+      return false;\n+  }\n+\n+  /** @inheritDoc */\n+  public void from_any(Any an_any)\n+                throws TypeMismatch, InvalidValue\n+  {\n+    checkType(official_type, an_any.type());\n+    try\n+      {\n+        if (!an_any.type().content_type().equal(content))\n+          throw new InvalidValue(CONTENT);\n+      }\n+    catch (BadKind e)\n+      {\n+        TypeMismatch t = new TypeMismatch(\"Not a box\");\n+        t.initCause(e);\n+        throw t;\n+      }\n+\n+    Serializable s = an_any.extract_Value();\n+    if (s == null)\n+      set_to_null();\n+    else\n+      {\n+        try\n+          {\n+            Streamable holder = holderFactory.createHolder(content);\n+            Field v = holder.getClass().getField(\"value\");\n+            v.set(holder, s);\n+\n+            Any cont = createAny();\n+            cont.insert_Streamable(holder);\n+\n+            array = new DynAny[] { factory.create_dyn_any(cont) };\n+          }\n+        catch (Exception ex)\n+          {\n+            throw new Unexpected(ex);\n+          }\n+      }\n+    valueChanged();\n+  }\n+\n+  /** @inheritDoc */\n+  public Any get_boxed_value()\n+                      throws InvalidValue\n+  {\n+    try\n+      {\n+        if (is_null())\n+          throw new InvalidValue(ISNULL);\n+        else\n+          return array [ 0 ].to_any();\n+      }\n+    catch (Exception e)\n+      {\n+        InvalidValue t = new InvalidValue();\n+        t.initCause(e);\n+        throw t;\n+      }\n+  }\n+\n+  /** @inheritDoc */\n+  public DynAny get_boxed_value_as_dyn_any()\n+                                    throws InvalidValue\n+  {\n+    if (is_null())\n+      throw new InvalidValue(ISNULL);\n+    else\n+      return array [ 0 ].copy();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public Serializable get_val()\n+                       throws TypeMismatch, InvalidValue\n+  {\n+    return to_any().extract_Value();\n+  }\n+\n+  /** {@inheritDoc} */\n+  public void insert_val(Serializable a_x)\n+                  throws InvalidValue, TypeMismatch\n+  {\n+    Any a = to_any();\n+    a.insert_Value(a_x);\n+    from_any(a);\n+    valueChanged();\n+  }\n+\n+  /** @inheritDoc */\n+  public boolean is_null()\n+  {\n+    return array.length == 0;\n+  }\n+\n+  /** @inheritDoc */\n+  public void set_boxed_value(Any boxIt)\n+                       throws TypeMismatch\n+  {\n+    if (!content.equal(boxIt.type()))\n+      throw new TypeMismatch(CONTENT);\n+    try\n+      {\n+        if (is_null())\n+          {\n+            array = new DynAny[] { factory.create_dyn_any(boxIt) };\n+          }\n+        else\n+          {\n+            array [ 0 ].from_any(boxIt);\n+          }\n+      }\n+    catch (Exception e)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(e);\n+        throw t;\n+      }\n+    valueChanged();\n+  }\n+\n+  /** @inheritDoc */\n+  public void set_boxed_value_as_dyn_any(DynAny boxIt)\n+                                  throws TypeMismatch\n+  {\n+    if (!content.equal(boxIt.type()))\n+      throw new TypeMismatch(CONTENT);\n+    try\n+      {\n+        if (is_null())\n+          {\n+            array = new DynAny[] { boxIt.copy() };\n+          }\n+        else\n+          {\n+            array [ 0 ].assign(boxIt);\n+          }\n+      }\n+    catch (Exception e)\n+      {\n+        TypeMismatch t = new TypeMismatch();\n+        t.initCause(e);\n+        throw t;\n+      }\n+    valueChanged();\n+  }\n+\n+  /** @inheritDoc */\n+  public void set_to_null()\n+  {\n+    array = new DynAny[ 0 ];\n+    valueChanged();\n+  }\n+\n+  /** @inheritDoc */\n+  public void set_to_value()\n+  {\n+    try\n+      {\n+        if (array.length == 0)\n+          {\n+            array =\n+              new DynAny[] { factory.create_dyn_any_from_type_code(content) };\n+          }\n+      }\n+    catch (InconsistentTypeCode e)\n+      {\n+        throw new Unexpected(e);\n+      }\n+    valueChanged();\n+  }\n+\n+  /** @inheritDoc */\n+  public Any to_any()\n+  {\n+    Any a = createAny();\n+\n+    if (!is_null())\n+      {\n+        try\n+          {\n+            Streamable holder;\n+            if (array [ 0 ] instanceof gnuDynAny)\n+              holder = ((gnuDynAny) array [ 0 ]).holder;\n+            else\n+              {\n+                Any uan = array [ 0 ].to_any();\n+                holder = uan.extract_Streamable();\n+              }\n+\n+            Field v = holder.getClass().getField(\"value\");\n+            Serializable value = (Serializable) v.get(holder);\n+            a.type(official_type);\n+            a.insert_Value(value, content);\n+          }\n+        catch (Exception ex)\n+          {\n+            throw new Unexpected(ex);\n+          }\n+      }\n+    else\n+      a.type(orb.get_primitive_tc(TCKind.tk_null));\n+    return a;\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "94ddffbecf73f8f5d99663f4690893c974004880", "filename": "libjava/classpath/gnu/CORBA/DynAn/valueChangedListener.java", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FvalueChangedListener.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FvalueChangedListener.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAn%2FvalueChangedListener.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,50 @@\n+/* valueChangedListener.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.DynAn;\n+\n+/**\n+ * An interface, able to receive notification about the change of value\n+ * of some DynAny.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public interface valueChangedListener\n+{\n+  void changed();\n+}\n\\ No newline at end of file"}, {"sha": "52d66d9e924ace28b170c55dd22ef0f3d233fd42", "filename": "libjava/classpath/gnu/CORBA/DynAnySeqHolder.java", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAnySeqHolder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAnySeqHolder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FDynAnySeqHolder.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,116 @@\n+/* DynAnySeqHolder.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA;\n+\n+import org.omg.CORBA.portable.InputStream;\n+import org.omg.CORBA.portable.OutputStream;\n+import org.omg.CORBA.portable.Streamable;\n+import org.omg.DynamicAny.DynAny;\n+import org.omg.DynamicAny.DynAnySeqHelper;\n+\n+/**\n+ * A holder for the sequence of {@link DynAny}\n+ * ({@link DynAnySeq}).\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class DynAnySeqHolder\n+  implements Streamable\n+{\n+  /**\n+   * The stored array of <code>DynAny</code>.\n+   */\n+  public DynAny[] value;\n+\n+  /**\n+   * Create the unitialised instance, leaving the value array\n+   * with default <code>null</code> value.\n+   */\n+  public DynAnySeqHolder()\n+  {\n+  }\n+\n+  /**\n+   * Create the initialised instance.\n+   * @param initialValue the array that will be assigned to\n+   * the <code>value</code> array.\n+   */\n+  public DynAnySeqHolder(DynAny[] initialValue)\n+  {\n+    value = initialValue;\n+  }\n+\n+  /**\n+   * The method should read this object from the CDR input stream, but\n+   * (following the JDK 1.5 API) it does not.\n+   *\n+   * @param input a org.omg.CORBA.portable stream to read from.\n+   *\n+   * @specenote Sun throws the same exception.\n+   *\n+   * @throws MARSHAL always.\n+   */\n+  public void _read(InputStream input)\n+  {\n+    value = DynAnySeqHelper.read(input);\n+  }\n+\n+  /**\n+   * The method should write this object to the CDR input stream, but\n+   * (following the JDK 1.5 API) it does not.\n+   *\n+   * @param input a org.omg.CORBA.portable stream to read from.\n+   *\n+   * @specenote Sun throws the same exception.\n+   *\n+   * @throws MARSHAL always.\n+   */\n+  public void _write(OutputStream output)\n+  {\n+    DynAnySeqHelper.write(output, value);\n+  }\n+\n+  /**\n+   * Get the typecode of the DynAny.\n+   */\n+  public org.omg.CORBA.TypeCode _type()\n+  {\n+    return DynAnySeqHelper.type();\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "c7fae5b061b6155f004ed00463945cf489b966f2", "filename": "libjava/classpath/gnu/CORBA/ForwardRequestHelper.java", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FForwardRequestHelper.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FForwardRequestHelper.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FForwardRequestHelper.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,160 @@\n+/* ForwardRequestHelper.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA;\n+\n+import gnu.CORBA.Poa.ForwardRequestHolder;\n+\n+import org.omg.CORBA.Any;\n+import org.omg.CORBA.BAD_OPERATION;\n+import org.omg.CORBA.ORB;\n+import org.omg.CORBA.ObjectHelper;\n+import org.omg.CORBA.StructMember;\n+import org.omg.CORBA.TypeCode;\n+import org.omg.CORBA.portable.InputStream;\n+import org.omg.CORBA.portable.OutputStream;\n+import org.omg.PortableServer.ForwardRequest;\n+\n+/**\n+ * The helper operations for the exception {@link ForwardRequest}.\n+ *\n+ * @specnote The helper must be here and not in POA subpackage as it must\n+ * be discovered by the {@link ObjectCreator} when reading this remote\n+ * exception.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public abstract class ForwardRequestHelper\n+{\n+  /**\n+   * The cached typecode value, computed only once.\n+   */\n+  private static TypeCode typeCode;\n+\n+  /**\n+   * Extract the ForwardRequest from given Any.\n+   * This method uses the ForwardRequestHolder.\n+   *\n+   * @throws BAD_OPERATION if the passed Any does not contain ForwardRequest.\n+   */\n+  public static ForwardRequest extract(Any any)\n+  {\n+    try\n+      {\n+        return ((ForwardRequestHolder) any.extract_Streamable()).value;\n+      }\n+    catch (ClassCastException cex)\n+      {\n+        BAD_OPERATION bad = new BAD_OPERATION(\"ForwardRequest expected\");\n+        bad.initCause(cex);\n+        throw bad;\n+      }\n+  }\n+\n+  /**\n+   * Get the ForwardRequest repository id.\n+   *\n+   * @return \"ForwardRequest\", always.\n+   */\n+  public static String id()\n+  {\n+    return \"ForwardRequest\";\n+  }\n+\n+  /**\n+  * Insert the ForwardRequest into the given Any.\n+  * This method uses the ForwardRequestHolder.\n+  *\n+  * @param any the Any to insert into.\n+  * @param that the ForwardRequest to insert.\n+  */\n+  public static void insert(Any any, ForwardRequest that)\n+  {\n+    any.insert_Streamable(new ForwardRequestHolder(that));\n+  }\n+\n+  /**\n+   * Read the exception from the CDR intput stream.\n+   *\n+   * @param input a org.omg.CORBA.portable stream to read from.\n+   */\n+  public static ForwardRequest read(InputStream input)\n+  {\n+    // Read the exception repository id.\n+    String id = input.read_string();\n+    ForwardRequest value = new ForwardRequest();\n+\n+    value.forward_reference = input.read_Object();\n+    return value;\n+  }\n+\n+  /**\n+   * Create the ForwardRequest typecode (structure,\n+   * named \"ForwardRequest\").\n+   * The typecode states that the structure contains the\n+   * following fields: forward_reference.\n+   */\n+  public static TypeCode type()\n+  {\n+    if (typeCode == null)\n+      {\n+        ORB orb = ORB.init();\n+        StructMember[] members = new StructMember[ 1 ];\n+\n+        TypeCode field;\n+\n+        field = ObjectHelper.type();\n+        members [ 0 ] = new StructMember(\"forward_reference\", field, null);\n+        typeCode = orb.create_exception_tc(id(), \"ForwardRequest\", members);\n+      }\n+    return typeCode;\n+  }\n+\n+  /**\n+   * Write the exception to the CDR output stream.\n+   *\n+   * @param output a org.omg.CORBA.portable stream stream to write into.\n+   * @param value a value to write.\n+   */\n+  public static void write(OutputStream output, ForwardRequest value)\n+  {\n+    // Write the exception repository id.\n+    output.write_string(id());\n+    output.write_Object(value.forward_reference);\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "ba6c1f88d8f665c6b04e384f5e1fceae24b16aac", "filename": "libjava/classpath/gnu/CORBA/GIOP/contextSupportingHeader.java", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FGIOP%2FcontextSupportingHeader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FGIOP%2FcontextSupportingHeader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FGIOP%2FcontextSupportingHeader.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,76 @@\n+/* contextSupportingHeader.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.GIOP;\n+\n+import org.omg.CORBA.BAD_INV_ORDER;\n+\n+/**\n+ * A header, supporting the service contexts. Such header has a context field\n+ * and methods for adding the new contexts.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public abstract class contextSupportingHeader\n+{\n+\n+  /**\n+   * Empty array, indicating that no service context is available.\n+   */\n+  protected static final ServiceContext[] NO_CONTEXT = new ServiceContext[0];\n+\n+  /**\n+   * The context data.\n+   */\n+  public ServiceContext[] service_context = NO_CONTEXT;\n+\n+  /**\n+   * Add service context to this header.\n+   *\n+   * @param context_to_add context to add.\n+   * @param replace if true, the existing context with this ID is replaced.\n+   * Otherwise, BAD_INV_ORDER is throwsn.\n+   */\n+  public void addContext(org.omg.IOP.ServiceContext context_to_add,\n+    boolean replace)\n+    throws BAD_INV_ORDER\n+  {\n+    service_context = ServiceContext.add(service_context, context_to_add,\n+      replace);\n+  }\n+}"}, {"sha": "5c15e121d29a8a4fbbb90e5504cae9d5d0c7bfc6", "filename": "libjava/classpath/gnu/CORBA/Interceptor/ClientRequestInterceptors.java", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FInterceptor%2FClientRequestInterceptors.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FInterceptor%2FClientRequestInterceptors.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FInterceptor%2FClientRequestInterceptors.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,139 @@\n+/* ClientRequestInterceptors.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Interceptor;\n+\n+import org.omg.PortableInterceptor.ClientRequestInfo;\n+import org.omg.PortableInterceptor.ClientRequestInterceptor;\n+import org.omg.PortableInterceptor.ClientRequestInterceptorOperations;\n+import org.omg.PortableInterceptor.ForwardRequest;\n+\n+/**\n+ * A block of the all registered ClientRequest interceptors.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class ClientRequestInterceptors\n+  implements ClientRequestInterceptorOperations\n+{\n+  /**\n+   * The array of all registered ClientRequest interceptors.\n+   */\n+  private final ClientRequestInterceptor[] interceptors;\n+\n+  /**\n+   * Create the interceptor pack with the registerend interceptor array,\n+   * obtained from the registrator.\n+   */\n+  public ClientRequestInterceptors(Registrator registrator)\n+  {\n+    interceptors = registrator.getClientRequestInterceptors();\n+  }\n+\n+  /** @inheritDoc */\n+  public void receive_exception(ClientRequestInfo info)\n+    throws ForwardRequest\n+  {\n+    for (int i = 0; i < interceptors.length; i++)\n+      {\n+        interceptors [ i ].receive_exception(info);\n+      }\n+  }\n+\n+  /** @inheritDoc */\n+  public void receive_other(ClientRequestInfo info) throws ForwardRequest\n+  {\n+    for (int i = 0; i < interceptors.length; i++)\n+      {\n+        interceptors [ i ].receive_other(info);\n+      }\n+  }\n+\n+  /** @inheritDoc */\n+  public void receive_reply(ClientRequestInfo info)\n+  {\n+    for (int i = 0; i < interceptors.length; i++)\n+      {\n+        interceptors [ i ].receive_reply(info);\n+      }\n+  }\n+\n+  /** @inheritDoc */\n+  public void send_poll(ClientRequestInfo info)\n+  {\n+    for (int i = 0; i < interceptors.length; i++)\n+      {\n+        interceptors [ i ].send_poll(info);\n+      }\n+  }\n+\n+  /** @inheritDoc */\n+  public void send_request(ClientRequestInfo info) throws ForwardRequest\n+  {\n+    for (int i = 0; i < interceptors.length; i++)\n+      {\n+        interceptors [ i ].send_request(info);\n+      }\n+  }\n+\n+  /**\n+   * Call destroy on all registered interceptors.\n+   */\n+  public void destroy()\n+  {\n+    for (int i = 0; i < interceptors.length; i++)\n+      {\n+        try\n+          {\n+            interceptors [ i ].destroy();\n+          }\n+        catch (Exception exc)\n+          {\n+            // OMG states we should ignore.\n+          }\n+      }\n+  }\n+\n+  /**\n+   * Get the class name.\n+   */\n+  public String name()\n+  {\n+    return getClass().getName();\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "d9ced03a332e6c2bc1a0abbb8b32c6ab47007658", "filename": "libjava/classpath/gnu/CORBA/Interceptor/ForwardRequestHolder.java", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FInterceptor%2FForwardRequestHolder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FInterceptor%2FForwardRequestHolder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FInterceptor%2FForwardRequestHolder.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,106 @@\n+/* ForwardRequestHolder.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Interceptor;\n+\n+import org.omg.CORBA.TypeCode;\n+import org.omg.CORBA.portable.InputStream;\n+import org.omg.CORBA.portable.OutputStream;\n+import org.omg.CORBA.portable.Streamable;\n+import org.omg.PortableInterceptor.ForwardRequest;\n+import org.omg.PortableInterceptor.ForwardRequestHelper;\n+\n+/**\n+ * A holder for the exception {@link ForwardRequest}.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class ForwardRequestHolder implements Streamable\n+{\n+  /**\n+   * The stored ForwardRequest value.\n+   */\n+  public ForwardRequest value;\n+\n+  /**\n+   * Create the unitialised instance, leaving the value field with default\n+   * <code>null</code> value.\n+   */\n+  public ForwardRequestHolder()\n+  {\n+  }\n+\n+  /**\n+   * Create the initialised instance.\n+   *\n+   * @param initialValue the value that will be assigned to the\n+   * <code>value</code> field.\n+   */\n+  public ForwardRequestHolder(ForwardRequest initialValue)\n+  {\n+    value = initialValue;\n+  }\n+\n+  /**\n+   * Fill in the {@link value} by data from the CDR stream.\n+   *\n+   * @param input the org.omg.CORBA.portable stream to read.\n+   */\n+  public void _read(InputStream input)\n+  {\n+    value = ForwardRequestHelper.read(input);\n+  }\n+\n+  /**\n+   * Write the stored value into the CDR stream.\n+   *\n+   * @param output the org.omg.CORBA.portable stream to write.\n+   */\n+  public void _write(OutputStream output)\n+  {\n+    ForwardRequestHelper.write(output, value);\n+  }\n+\n+  /**\n+   * Get the typecode of the ForwardRequest.\n+   */\n+  public TypeCode _type()\n+  {\n+    return ForwardRequestHelper.type();\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "88756988c92177528db7d0df5f7523c1dd4365de", "filename": "libjava/classpath/gnu/CORBA/Interceptor/IORInterceptors.java", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FInterceptor%2FIORInterceptors.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FInterceptor%2FIORInterceptors.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FInterceptor%2FIORInterceptors.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,109 @@\n+/* IORInterceptors.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Interceptor;\n+\n+import org.omg.PortableInterceptor.IORInfo;\n+import org.omg.PortableInterceptor.IORInterceptor;\n+import org.omg.PortableInterceptor.IORInterceptorOperations;\n+\n+/**\n+ * A block of the all registered IOR interceptors.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class IORInterceptors implements IORInterceptorOperations\n+{\n+  /**\n+   * The array of all registered IOR interceptors.\n+   */\n+  private final IORInterceptor[] interceptors;\n+\n+  /**\n+   * Create the interceptor pack with the registerend interceptor array,\n+   * obtained from the registrator.\n+   */\n+  public IORInterceptors(Registrator registrator)\n+  {\n+    interceptors = registrator.getIORInterceptors();\n+  }\n+\n+  /**\n+   * Call this method for all registered interceptors.\n+   */\n+  public void establish_components(IORInfo info)\n+  {\n+    for (int i = 0; i < interceptors.length; i++)\n+      {\n+        try\n+          {\n+            interceptors [ i ].establish_components(info);\n+          }\n+        catch (Exception exc)\n+          {\n+            // OMG states we should ignore.\n+          }\n+      }\n+  }\n+\n+  /**\n+   * Call destroy on all registered interceptors.\n+   */\n+  public void destroy()\n+  {\n+    for (int i = 0; i < interceptors.length; i++)\n+      {\n+        try\n+          {\n+            interceptors [ i ].destroy();\n+          }\n+        catch (Exception exc)\n+          {\n+            // OMG states we should ignore.\n+          }\n+      }\n+  }\n+\n+  /**\n+   * Get the class name.\n+   */\n+  public String name()\n+  {\n+    return getClass().getName();\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "ff35cd0c85e7283e90f2458867edf13a7fde5de6", "filename": "libjava/classpath/gnu/CORBA/Interceptor/Registrator.java", "status": "added", "additions": 470, "deletions": 0, "changes": 470, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FInterceptor%2FRegistrator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FInterceptor%2FRegistrator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FInterceptor%2FRegistrator.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,470 @@\n+/* Registrator.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Interceptor;\n+\n+import gnu.CORBA.Poa.ORB_1_4;\n+import gnu.CORBA.gnuCodecFactory;\n+\n+import org.omg.CORBA.BAD_INV_ORDER;\n+import org.omg.CORBA.CompletionStatus;\n+import org.omg.CORBA.LocalObject;\n+import org.omg.CORBA.Object;\n+import org.omg.IOP.CodecFactory;\n+import org.omg.PortableInterceptor.ClientRequestInterceptor;\n+import org.omg.PortableInterceptor.IORInterceptor;\n+import org.omg.PortableInterceptor.Interceptor;\n+import org.omg.PortableInterceptor.ORBInitInfo;\n+import org.omg.PortableInterceptor.ORBInitInfoPackage.DuplicateName;\n+import org.omg.PortableInterceptor.ORBInitInfoPackage.InvalidName;\n+import org.omg.PortableInterceptor.ORBInitializer;\n+import org.omg.PortableInterceptor.ORBInitializerOperations;\n+import org.omg.PortableInterceptor.PolicyFactory;\n+import org.omg.PortableInterceptor.ServerRequestInterceptor;\n+\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+\n+import java.util.ArrayList;\n+import java.util.Enumeration;\n+import java.util.Hashtable;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.TreeMap;\n+\n+/**\n+ * Collects interceptors, references and factories into arrays during\n+ * registration. As the class is security sensitive, the most of the fields are\n+ * private.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class Registrator extends LocalObject implements ORBInitInfo\n+{\n+  /**\n+   * Use serialVersionUID for interoperability.\n+   */\n+  private static final long serialVersionUID = 1;\n+\n+  /**\n+   * The agreed properties prefix.\n+   */\n+  public final static String m_prefix =\n+    \"org.omg.PortableInterceptor.ORBInitializerClass.\";\n+\n+  /**\n+   * The initialization - time server request interceptors.\n+   */\n+  private ArrayList m_server = new ArrayList();\n+\n+  /**\n+   * The initialization - time client request interceptors.\n+   */\n+  private ArrayList m_client = new ArrayList();\n+\n+  /**\n+   * The initialization - time ior interceptors.\n+   */\n+  private ArrayList m_ior = new ArrayList();\n+\n+  /**\n+   * The policy factories.\n+   */\n+  public Hashtable m_policyFactories = new Hashtable();\n+\n+  /**\n+   * The registered references. To avoid exposing the ORB's references map, the\n+   * are added by ORB from inside the ORB code. The ORB is responsible for\n+   * taking them from this field between pre_init and post_init.\n+   */\n+  public TreeMap m_references = new TreeMap();\n+\n+  /**\n+   * The initializers.\n+   */\n+  public ArrayList m_initializers = new ArrayList();\n+\n+  /**\n+   * The ORB being intialised.\n+   */\n+  final ORB_1_4 orb;\n+\n+  /**\n+   * The argument string array, passed to ORB.init.\n+   */\n+  final String[] m_args;\n+\n+  /**\n+   * The codec factory.\n+   */\n+  final gnuCodecFactory m_codecFactory;\n+\n+  /**\n+   * Create the interceptor collection from the given properties, using the\n+   * agreed naming convention.\n+   *\n+   * @param orb the ORB being initialised.\n+   * @param props the cumulated set of properties where the orb initializer\n+   * pattern is searched.\n+   * @param an_args the argument string array, passed to ORB.init.\n+   */\n+  public Registrator(ORB_1_4 an_orb, Properties props, String[] an_args)\n+  {\n+    orb = an_orb;\n+    m_args = an_args;\n+    m_codecFactory = new gnuCodecFactory(orb);\n+    checkProperties(props);\n+    checkProperties(System.getProperties());\n+    checkFile(\"user.home\", null);\n+    checkFile(\"java.home\", \"lib\");\n+  }\n+\n+  /**\n+   * Scan the given properties for the possible interceptors.\n+   */\n+  private void checkProperties(Properties props)\n+  {\n+    if (props == null)\n+      {\n+        return;\n+      }\n+\n+    Enumeration names = props.propertyNames();\n+    java.lang.Object key;\n+    String sk;\n+\n+    while (names.hasMoreElements())\n+      {\n+        key = names.nextElement();\n+        if (key != null)\n+          {\n+            sk = key.toString();\n+            if (sk.startsWith(m_prefix))\n+              {\n+                try\n+                  {\n+                    String cn = sk.substring(m_prefix.length());\n+                    Class iClass = Class.forName(cn);\n+                    ORBInitializer initializer =\n+                      (ORBInitializer) iClass.newInstance();\n+                    m_initializers.add(initializer);\n+                  }\n+                catch (Exception exc)\n+                  {\n+                    // OMG states we should not throw an exception, but\n+                    // this will help the user to detect his error\n+                    // in initialiser properties. Should never print during\n+                    // normal run.\n+                    System.err.println(sk + \" failed\");\n+                  }\n+              }\n+          }\n+      }\n+  }\n+\n+  /**\n+   * Check if the property is defined in the existsting file orb.properties.\n+   */\n+  private void checkFile(String dir, String subdir)\n+  {\n+    try\n+      {\n+        File f = new File(dir);\n+        if (!f.exists())\n+          {\n+            return;\n+          }\n+\n+        if (subdir != null)\n+          {\n+            f = new File(f, subdir);\n+          }\n+        f = new File(f, \"orb.properties\");\n+\n+        if (!f.exists())\n+          {\n+            return;\n+          }\n+\n+        Properties p = new Properties();\n+        p.load(new BufferedInputStream(new FileInputStream(f)));\n+\n+        checkProperties(p);\n+      }\n+    catch (IOException ex)\n+      {\n+      }\n+  }\n+\n+  /**\n+   * Called by ORB as a pre_init for all initializers.\n+   */\n+  public void pre_init()\n+  {\n+    Iterator iter = m_initializers.iterator();\n+    while (iter.hasNext())\n+      {\n+        ORBInitializerOperations initializer =\n+          (ORBInitializerOperations) iter.next();\n+        initializer.pre_init(this);\n+      }\n+  }\n+\n+  /**\n+   * Get the map of the registered references. The ORB calls this method to\n+   * import the references into its references map.\n+   */\n+  public Map getRegisteredReferences()\n+  {\n+    return m_references;\n+  }\n+\n+  /**\n+   * Called by ORB as a post-init for all initializers. After this call, the\n+   * interceptor sets are fixed and redundant information is discarded.\n+   */\n+  public void post_init()\n+  {\n+    Iterator iter = m_initializers.iterator();\n+    while (iter.hasNext())\n+      {\n+        ORBInitializerOperations initializer =\n+          (ORBInitializerOperations) iter.next();\n+        initializer.post_init(this);\n+      }\n+  }\n+\n+  public ServerRequestInterceptor[] getServerRequestInterceptors()\n+  {\n+    ServerRequestInterceptor[] iServer =\n+      new ServerRequestInterceptor[ m_server.size() ];\n+    for (int i = 0; i < iServer.length; i++)\n+      {\n+        iServer [ i ] = (ServerRequestInterceptor) m_server.get(i);\n+      }\n+    return iServer;\n+  }\n+\n+  public ClientRequestInterceptor[] getClientRequestInterceptors()\n+  {\n+    ClientRequestInterceptor[] iClient =\n+      new ClientRequestInterceptor[ m_client.size() ];\n+    for (int i = 0; i < iClient.length; i++)\n+      {\n+        iClient [ i ] = (ClientRequestInterceptor) m_client.get(i);\n+      }\n+    return iClient;\n+  }\n+\n+  public IORInterceptor[] getIORInterceptors()\n+  {\n+    IORInterceptor[] iIor = new IORInterceptor[ m_ior.size() ];\n+    for (int i = 0; i < iIor.length; i++)\n+      {\n+        iIor [ i ] = (IORInterceptor) m_ior.get(i);\n+      }\n+    return iIor;\n+  }\n+\n+  public void add_client_request_interceptor(\n+    ClientRequestInterceptor interceptor\n+  ) throws DuplicateName\n+  {\n+    add(m_client, interceptor);\n+  }\n+\n+  public void add_ior_interceptor(IORInterceptor interceptor)\n+    throws DuplicateName\n+  {\n+    add(m_ior, interceptor);\n+  }\n+\n+  public void add_server_request_interceptor(\n+    ServerRequestInterceptor interceptor\n+  ) throws DuplicateName\n+  {\n+    add(m_server, interceptor);\n+  }\n+\n+  /**\n+   * Allocate a new slot for request - specific records.\n+   */\n+  public int allocate_slot_id()\n+  {\n+    return orb.icSlotSize++;\n+  }\n+\n+  /**\n+   * Add the interceptor to the given collection.\n+   *\n+   * @param list the collection to add.\n+   * @param interceptor the interceptor to add.\n+   */\n+  private void add(ArrayList list, Interceptor interceptor)\n+    throws DuplicateName\n+  {\n+    if (interceptor.name().length() > 0)\n+      {\n+        Iterator iter = list.iterator();\n+        Interceptor ic;\n+\n+        while (iter.hasNext())\n+          {\n+            ic = (Interceptor) iter.next();\n+            if (ic.name().equals(interceptor.name()))\n+              {\n+                throw new DuplicateName(interceptor.name());\n+              }\n+          }\n+      }\n+    list.add(interceptor);\n+  }\n+\n+  /**\n+   * Get string array, passed to ORB.init.\n+   */\n+  public String[] arguments()\n+  {\n+    return m_args;\n+  }\n+\n+  /**\n+   * Get the codec factory.\n+   */\n+  public CodecFactory codec_factory()\n+  {\n+    return m_codecFactory;\n+  }\n+\n+  /**\n+   * Get the ORB's id, currently using .toString.\n+   */\n+  public String orb_id()\n+  {\n+    return \"orb_\" + orb;\n+  }\n+\n+  /**\n+   * Register reference.\n+   */\n+  public void register_initial_reference(String object_name, Object object)\n+    throws InvalidName\n+  {\n+    if (object_name == null)\n+      {\n+        throw new InvalidName(\"null\");\n+      }\n+    else if (object_name.length() == 0)\n+      {\n+        throw new InvalidName(\"Empty string\");\n+      }\n+    else if (m_references.containsKey(object_name))\n+      {\n+        throw new InvalidName(object_name);\n+      }\n+    else\n+      {\n+        m_references.put(object_name, object);\n+      }\n+  }\n+\n+  /**\n+   * Accumulates the policy factory map.\n+   */\n+  public void register_policy_factory(int policy_type,\n+    PolicyFactory policy_factory\n+  )\n+  {\n+    Integer it = new Integer(policy_type);\n+    if (m_policyFactories.containsKey(it))\n+      {\n+        throw new BAD_INV_ORDER(\n+          \"Repetetive registration of the policy factory for type \" +\n+          policy_type,\n+          16,\n+          CompletionStatus.COMPLETED_NO\n+        );\n+      }\n+    m_policyFactories.put(it, policy_factory);\n+  }\n+\n+  /**\n+   * Delegates to ORB.\n+   */\n+  public org.omg.CORBA.Object resolve_initial_references(String object_name)\n+    throws InvalidName\n+  {\n+    try\n+      {\n+        return orb.resolve_initial_references(object_name);\n+      }\n+    catch (org.omg.CORBA.ORBPackage.InvalidName e)\n+      {\n+        InvalidName in = new InvalidName(e.getMessage());\n+        in.initCause(e);\n+        throw in;\n+      }\n+  }\n+\n+  /**\n+   * Check if any interceptors of this type were registered.\n+   */\n+  public boolean hasClientRequestInterceptors()\n+  {\n+    return m_client.size() > 0;\n+  }\n+\n+  /**\n+   * Check if any interceptors of this type were registered.\n+   */\n+  public boolean hasServerRequestInterceptors()\n+  {\n+    return m_server.size() > 0;\n+  }\n+\n+  /**\n+   * Check if any interceptors of this type were registered.\n+   */\n+  public boolean hasIorInterceptors()\n+  {\n+    return m_ior.size() > 0;\n+  }\n+}"}, {"sha": "4b9bede98eb16b03e925b248ce1cc546221317a5", "filename": "libjava/classpath/gnu/CORBA/Interceptor/ServerRequestInterceptors.java", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FInterceptor%2FServerRequestInterceptors.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FInterceptor%2FServerRequestInterceptors.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FInterceptor%2FServerRequestInterceptors.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,139 @@\n+/* ServerRequestInterceptors.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Interceptor;\n+\n+import org.omg.PortableInterceptor.ForwardRequest;\n+import org.omg.PortableInterceptor.ServerRequestInfo;\n+import org.omg.PortableInterceptor.ServerRequestInterceptor;\n+import org.omg.PortableInterceptor.ServerRequestInterceptorOperations;\n+\n+/**\n+ * A block of the all registered ServerRequest interceptors.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class ServerRequestInterceptors\n+  implements ServerRequestInterceptorOperations\n+{\n+  /**\n+   * The array of all registered ServerRequest interceptors.\n+   */\n+  private final ServerRequestInterceptor[] interceptors;\n+\n+  /**\n+   * Create the interceptor pack with the registerend interceptor array,\n+   * obtained from the registrator.\n+   */\n+  public ServerRequestInterceptors(Registrator registrator)\n+  {\n+    interceptors = registrator.getServerRequestInterceptors();\n+  }\n+\n+  /** @inheritDoc */\n+  public void receive_request_service_contexts(ServerRequestInfo info)\n+    throws ForwardRequest\n+  {\n+    for (int i = 0; i < interceptors.length; i++)\n+      {\n+        interceptors [ i ].receive_request_service_contexts(info);\n+      }\n+  }\n+\n+  /** @inheritDoc */\n+  public void receive_request(ServerRequestInfo info) throws ForwardRequest\n+  {\n+    for (int i = 0; i < interceptors.length; i++)\n+      {\n+        interceptors [ i ].receive_request(info);\n+      }\n+  }\n+\n+  /** @inheritDoc */\n+  public void send_exception(ServerRequestInfo info) throws ForwardRequest\n+  {\n+    for (int i = 0; i < interceptors.length; i++)\n+      {\n+        interceptors [ i ].send_exception(info);\n+      }\n+  }\n+\n+  /** @inheritDoc */\n+  public void send_other(ServerRequestInfo info) throws ForwardRequest\n+  {\n+    for (int i = 0; i < interceptors.length; i++)\n+      {\n+        interceptors [ i ].send_other(info);\n+      }\n+  }\n+\n+  /** @inheritDoc */\n+  public void send_reply(ServerRequestInfo info)\n+  {\n+    for (int i = 0; i < interceptors.length; i++)\n+      {\n+        interceptors [ i ].send_reply(info);\n+      }\n+  }\n+\n+  /**\n+   * Call destroy on all registered interceptors.\n+   */\n+  public void destroy()\n+  {\n+    for (int i = 0; i < interceptors.length; i++)\n+      {\n+        try\n+          {\n+            interceptors [ i ].destroy();\n+          }\n+        catch (Exception exc)\n+          {\n+            // OMG states we should ignore.\n+          }\n+      }\n+  }\n+\n+  /**\n+   * Get the class name.\n+   */\n+  public String name()\n+  {\n+    return getClass().getName();\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "beb81c81f6c59fd015a7f38449452119d6ec76ca", "filename": "libjava/classpath/gnu/CORBA/Interceptor/gnuClientRequestInfo.java", "status": "added", "additions": 337, "deletions": 0, "changes": 337, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FInterceptor%2FgnuClientRequestInfo.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FInterceptor%2FgnuClientRequestInfo.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FInterceptor%2FgnuClientRequestInfo.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,337 @@\n+/* gnuClientRequestInfo.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Interceptor;\n+\n+import gnu.CORBA.Unexpected;\n+import gnu.CORBA.gnuRequest;\n+\n+import org.omg.CORBA.ARG_IN;\n+import org.omg.CORBA.ARG_INOUT;\n+import org.omg.CORBA.ARG_OUT;\n+import org.omg.CORBA.Any;\n+import org.omg.CORBA.BAD_PARAM;\n+import org.omg.CORBA.Bounds;\n+import org.omg.CORBA.ExceptionList;\n+import org.omg.CORBA.INV_POLICY;\n+import org.omg.CORBA.LocalObject;\n+import org.omg.CORBA.NVList;\n+import org.omg.CORBA.ORB;\n+import org.omg.CORBA.ParameterMode;\n+import org.omg.CORBA.Policy;\n+import org.omg.CORBA.TCKind;\n+import org.omg.CORBA.TypeCode;\n+import org.omg.CORBA.TypeCodePackage.BadKind;\n+import org.omg.Dynamic.Parameter;\n+import org.omg.IOP.ServiceContext;\n+import org.omg.IOP.TaggedComponent;\n+import org.omg.IOP.TaggedProfile;\n+import org.omg.PortableInterceptor.ClientRequestInfo;\n+import org.omg.PortableInterceptor.InvalidSlot;\n+\n+/**\n+ * Client request info. All requests on the client side in Classpath\n+ * implementations are handled via gnuRequest class. This class holds the\n+ * instance of the gnuRequest, accessing the request info this way.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class gnuClientRequestInfo extends LocalObject\n+  implements ClientRequestInfo\n+{\n+  /**\n+   * Use serialVersionUID for interoperability.\n+   */\n+  private static final long serialVersionUID = 1;\n+\n+  /**\n+   * The request structure, from that some methods take the needed information\n+   * directly. The same request structure cannot be reused in parallel threads,\n+   * the submission methods are synchronized.\n+   */\n+  private final gnuRequest request;\n+\n+  /**\n+   * Provides possibility to set the wrapped thrown exception explicitly, where\n+   * applicable.\n+   */\n+  public Any m_wrapped_exception;\n+\n+  /**\n+   * Create the info on the given request.\n+   */\n+  public gnuClientRequestInfo(gnuRequest a_request)\n+  {\n+    request = a_request;\n+  }\n+\n+  /** @inheritDoc */\n+  public void add_request_service_context(ServiceContext service_context,\n+    boolean replace\n+  )\n+  {\n+    request.add_request_service_context(service_context, replace);\n+  }\n+\n+  /** @inheritDoc */\n+  public TaggedProfile effective_profile()\n+  {\n+    return request.effective_profile();\n+  }\n+\n+  /** @inheritDoc */\n+  public org.omg.CORBA.Object effective_target()\n+  {\n+    return request.effective_target();\n+  }\n+\n+  /** @inheritDoc */\n+  public TaggedComponent get_effective_component(int id)\n+    throws BAD_PARAM\n+  {\n+    return request.get_effective_component(id);\n+  }\n+\n+  /** @inheritDoc */\n+  public TaggedComponent[] get_effective_components(int id)\n+    throws BAD_PARAM\n+  {\n+    return request.get_effective_components(id);\n+  }\n+\n+  /** @inheritDoc */\n+  public Policy get_request_policy(int type) throws INV_POLICY\n+  {\n+    return request.get_request_policy(type);\n+  }\n+\n+  /** @inheritDoc */\n+  public String received_exception_id()\n+  {\n+    try\n+      {\n+        if (m_wrapped_exception != null)\n+          {\n+            return m_wrapped_exception.type().id();\n+          }\n+        else\n+          {\n+            return request.received_exception_id();\n+          }\n+      }\n+    catch (BadKind e)\n+      {\n+        throw new Unexpected(e);\n+      }\n+  }\n+\n+  /** @inheritDoc */\n+  public Any received_exception()\n+  {\n+    if (m_wrapped_exception != null)\n+      {\n+        return m_wrapped_exception;\n+      }\n+    else\n+      {\n+        return request.received_exception();\n+      }\n+  }\n+\n+  /** @inheritDoc */\n+  public org.omg.CORBA.Object target()\n+  {\n+    return request.target();\n+  }\n+\n+  /** @inheritDoc */\n+  public Parameter[] arguments()\n+  {\n+    request.checkDii();\n+\n+    NVList args = request.arguments();\n+    Parameter[] p = new Parameter[ args.count() ];\n+    try\n+      {\n+        for (int i = 0; i < p.length; i++)\n+          {\n+            ParameterMode mode;\n+\n+            switch (args.item(i).flags())\n+              {\n+                case ARG_IN.value :\n+                  mode = ParameterMode.PARAM_IN;\n+                  break;\n+\n+                case ARG_OUT.value :\n+                  mode = ParameterMode.PARAM_OUT;\n+                  break;\n+\n+                case ARG_INOUT.value :\n+                  mode = ParameterMode.PARAM_INOUT;\n+                  break;\n+\n+                default :\n+                  throw new Unexpected();\n+              }\n+\n+            p [ i ] = new Parameter(args.item(i).value(), mode);\n+          }\n+      }\n+    catch (Bounds e)\n+      {\n+        throw new Unexpected(e);\n+      }\n+    return p;\n+  }\n+\n+  /** @inheritDoc */\n+  public Any result()\n+  {\n+    request.checkDii();\n+\n+    Any rt = request.return_value();\n+\n+    if (rt == null)\n+      {\n+        ORB orb = request.orb();\n+        rt = orb.create_any();\n+        rt.type(orb.get_primitive_tc(TCKind.tk_void));\n+        return rt;\n+      }\n+\n+    return request.return_value();\n+  }\n+\n+  /** @inheritDoc */\n+  public String[] contexts()\n+  {\n+    return request.ice_contexts();\n+  }\n+\n+  /** @inheritDoc */\n+  public TypeCode[] exceptions()\n+  {\n+    request.checkDii();\n+\n+    ExceptionList ex = request.exceptions();\n+    TypeCode[] et = new TypeCode[ ex.count() ];\n+    try\n+      {\n+        for (int i = 0; i < et.length; i++)\n+          {\n+            et [ i ] = ex.item(i);\n+          }\n+      }\n+    catch (Bounds e)\n+      {\n+        throw new Unexpected(e);\n+      }\n+    return et;\n+  }\n+\n+  /** @inheritDoc */\n+  public org.omg.CORBA.Object forward_reference()\n+  {\n+    return request.forward_reference();\n+  }\n+\n+  /** @inheritDoc */\n+  public String[] operation_context()\n+  {\n+    return request.operation_context();\n+  }\n+\n+  /** @inheritDoc */\n+  public Any get_slot(int id) throws InvalidSlot\n+  {\n+    return request.get_slot(id);\n+  }\n+\n+  /** @inheritDoc */\n+  public String operation()\n+  {\n+    return request.operation();\n+  }\n+\n+  /** @inheritDoc */\n+  public short reply_status()\n+  {\n+    return request.reply_status();\n+  }\n+\n+  /** @inheritDoc */\n+  public int request_id()\n+  {\n+    return request.request_id();\n+  }\n+\n+  /** @inheritDoc */\n+  public boolean response_expected()\n+  {\n+    return request.response_expected();\n+  }\n+\n+  /**\n+       * Determines how far the request shall progress before control is returned to\n+   * the client. However up till JDK 1.5 inclusive this method always returns\n+   * SYNC_WITH_TRANSPORT.\n+   *\n+   * @return {@link org.omg.Messaging.SYNC_WITH_TRANSPORT.value (1), always.\n+   *\n+   * @specnote as defined in the Suns 1.5 JDK API.\n+   */\n+  public short sync_scope()\n+  {\n+    return request.sync_scope();\n+  }\n+\n+  /** @inheritDoc */\n+  public ServiceContext get_reply_service_context(int ctx_name)\n+    throws BAD_PARAM\n+  {\n+    return request.get_reply_service_context(ctx_name);\n+  }\n+\n+  /** @inheritDoc */\n+  public ServiceContext get_request_service_context(int ctx_name)\n+    throws BAD_PARAM\n+  {\n+    return request.get_request_service_context(ctx_name);\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "ee8af7fc0b4177c4953b12d2a518229e0eb83ec4", "filename": "libjava/classpath/gnu/CORBA/Interceptor/gnuIcCurrent.java", "status": "added", "additions": 255, "deletions": 0, "changes": 255, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FInterceptor%2FgnuIcCurrent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FInterceptor%2FgnuIcCurrent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FInterceptor%2FgnuIcCurrent.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,255 @@\n+/* gnuIcCurrent.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Interceptor;\n+\n+import gnu.CORBA.CDR.cdrBufOutput;\n+import gnu.CORBA.Poa.ORB_1_4;\n+\n+import org.omg.CORBA.Any;\n+import org.omg.CORBA.BAD_INV_ORDER;\n+import org.omg.CORBA.TCKind;\n+import org.omg.CORBA.portable.InputStream;\n+import org.omg.CORBA.portable.ObjectImpl;\n+import org.omg.PortableInterceptor.Current;\n+import org.omg.PortableInterceptor.CurrentHelper;\n+import org.omg.PortableInterceptor.InvalidSlot;\n+\n+import java.util.Hashtable;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+/**\n+ * Supports the \"Interceptor current\" concept, providing the slot value\n+ * information for the current thread. When making the invocation, this\n+ * information is copied to the Current, returned by ClientRequestInfo.\n+ *\n+ * There is only one instance of this class per ORB. It maintains a thread to\n+ * information map.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class gnuIcCurrent extends ObjectImpl implements Current\n+{\n+  /**\n+   * Use serialVersionUID for interoperability.\n+   */\n+  private static final long serialVersionUID = 1;\n+\n+  /**\n+   * The ORB, controllin this Current. It provides data about the required size\n+   * of the slot array.\n+   */\n+  final ORB_1_4 orb;\n+\n+  /**\n+   * The table, mapping threads to records.\n+   */\n+  private Hashtable threads = new Hashtable();\n+\n+  /**\n+   * An empty array when no slots are defined, computed once.\n+   */\n+  static final Any[] NO_SLOTS = new Any[ 0 ];\n+\n+  /**\n+   * Create the IC current.\n+   */\n+  public gnuIcCurrent(ORB_1_4 an_orb)\n+  {\n+    orb = an_orb;\n+  }\n+\n+  /**\n+   * Get the array of POA current repository ids.\n+   *\n+   * @return a single member array, containing value, returned by the\n+   * {@link CurrentHelper#id}, normally\n+   * \"IDL:omg.org/PortableInterceptor/Current:1.0\".\n+   */\n+  public String[] _ids()\n+  {\n+    return new String[] { CurrentHelper.id() };\n+  }\n+\n+  /**\n+   * Add the entry to the map.\n+   */\n+  public void put(Thread t, Any[] record)\n+  {\n+    synchronized (threads)\n+      {\n+        threads.put(t, record);\n+\n+        // Remove non-running threads, avoiding memory leak.\n+        if (threads.size() > 12)\n+          {\n+            Iterator it = threads.entrySet().iterator();\n+            while (it.hasNext())\n+              {\n+                Map.Entry e = (Map.Entry) it.next();\n+                Thread tx = (Thread) e.getKey();\n+                if (!tx.isAlive())\n+                  {\n+                    it.remove();\n+                  }\n+              }\n+          }\n+      }\n+  }\n+\n+  /**\n+   * Check if this thread is registered.\n+   */\n+  public boolean has(Thread t)\n+  {\n+    synchronized (threads)\n+      {\n+        return threads.containsKey(t);\n+      }\n+  }\n+\n+  /**\n+   * Remove the entry from the map.\n+   */\n+  public void remove(Thread t)\n+  {\n+    synchronized (threads)\n+      {\n+        threads.remove(t);\n+      }\n+  }\n+\n+  /**\n+   * Get array of all slots, as it is applicable for the current thread. If the\n+   * slots were not previously allocated, they are allocated during this call.\n+   */\n+  Any[] get_slots()\n+  {\n+    Any[] r;\n+    synchronized (threads)\n+      {\n+        r = (Any[]) threads.get(Thread.currentThread());\n+        if (r == null)\n+          {\n+            r = new Any[ orb.icSlotSize ];\n+\n+            for (int i = 0; i < r.length; i++)\n+              {\n+                Any a = orb.create_any();\n+                a.type(orb.get_primitive_tc(TCKind.tk_null));\n+                r [ i ] = a;\n+              }\n+\n+            put(Thread.currentThread(), r);\n+          }\n+        return r;\n+      }\n+  }\n+\n+  /**\n+       * Get copu array of all slots, as it is applicable for the current thread. If\n+   * the slots were not previously allocated, they are allocated during this\n+   * call.\n+   */\n+  public Any[] clone_slots()\n+  {\n+    if (orb.icSlotSize == 0)\n+      {\n+        return NO_SLOTS;\n+      }\n+    else\n+      {\n+        Any[] r = get_slots();\n+        Any[] copy = new Any[ r.length ];\n+\n+        cdrBufOutput buf = new cdrBufOutput();\n+        buf.setOrb(orb);\n+\n+        for (int i = 0; i < copy.length; i++)\n+          {\n+            r [ i ].write_value(buf);\n+          }\n+\n+        InputStream input = buf.create_input_stream();\n+\n+        for (int i = 0; i < copy.length; i++)\n+          {\n+            copy [ i ] = orb.create_any();\n+            copy [ i ].read_value(input, r [ i ].type());\n+          }\n+\n+        return copy;\n+      }\n+  }\n+\n+  /**\n+   * Get value for the slot with the given id. If the array of Currents has not\n+   * been yet allocated for the current thread, it is allocated during the\n+   * invocation of this method.\n+   */\n+  public Any get_slot(int slot_id) throws InvalidSlot, BAD_INV_ORDER\n+  {\n+    try\n+      {\n+        return get_slots() [ slot_id ];\n+      }\n+    catch (ArrayIndexOutOfBoundsException e)\n+      {\n+        throw new InvalidSlot(\"Slot \" + slot_id);\n+      }\n+  }\n+\n+  /**\n+   * Set value for the slot with the given id. If the array of Currents has not\n+   * been yet allocated for the current thread, it is allocated during the\n+   * invocation of this method.\n+   */\n+  public void set_slot(int slot_id, Any data)\n+    throws InvalidSlot, BAD_INV_ORDER\n+  {\n+    try\n+      {\n+        get_slots() [ slot_id ] = data;\n+      }\n+    catch (ArrayIndexOutOfBoundsException e)\n+      {\n+        throw new InvalidSlot(\"Slot \" + slot_id);\n+      }\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "1c406cb5e469bcdfdab907079eadfe287c4f1ace", "filename": "libjava/classpath/gnu/CORBA/Interceptor/gnuIorInfo.java", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FInterceptor%2FgnuIorInfo.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FInterceptor%2FgnuIorInfo.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FInterceptor%2FgnuIorInfo.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,120 @@\n+/* gnuIorInfo.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Interceptor;\n+\n+import gnu.CORBA.IOR;\n+import gnu.CORBA.Poa.ORB_1_4;\n+\n+import org.omg.CORBA.LocalObject;\n+import org.omg.CORBA.Policy;\n+import org.omg.IOP.TaggedComponent;\n+import org.omg.PortableInterceptor.IORInfo;\n+import org.omg.PortableServer.POA;\n+\n+/**\n+ * Implements IORInfo.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class gnuIorInfo extends LocalObject implements IORInfo\n+{\n+  /**\n+   * Use serialVersionUID for interoperability.\n+   */\n+  private static final long serialVersionUID = 1;\n+\n+  /**\n+   * The ORB, to that the IOR is related.\n+   */\n+  public final ORB_1_4 orb;\n+\n+  /**\n+   * The POA, to that IOR is related.\n+   */\n+  public final POA poa;\n+\n+  /**\n+   * The IOR itself.\n+   */\n+  private final IOR ior;\n+\n+  /**\n+   * Create an instance.\n+   */\n+  public gnuIorInfo(ORB_1_4 an_orb, POA a_poa, IOR an_ior)\n+  {\n+    orb = an_orb;\n+    poa = a_poa;\n+    ior = an_ior;\n+  }\n+\n+  /**\n+   * Add component to tje specified profile of this IOR.\n+   */\n+  public void add_ior_component_to_profile(TaggedComponent tagged_component,\n+    int profile_id\n+  )\n+  {\n+    ior.add_ior_component_to_profile(tagged_component, profile_id);\n+  }\n+\n+  /**\n+   * Add component to all found profiles in this IOR.\n+   */\n+  public void add_ior_component(TaggedComponent tagged_component)\n+  {\n+    ior.add_ior_component(tagged_component);\n+  }\n+\n+  /**\n+   * Get the POA policy.\n+   */\n+  public Policy get_effective_policy(int policy_type)\n+  {\n+    return poa._get_policy(policy_type);\n+  }\n+\n+  /**\n+   * Return the state of the object POA.\n+   */\n+  short state()\n+  {\n+    return (short) poa.the_POAManager().get_state().value();\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "5f75f76878af6efc66cef407cca69eca96e5aa06", "filename": "libjava/classpath/gnu/CORBA/Interceptor/gnuServerRequestInfo.java", "status": "added", "additions": 456, "deletions": 0, "changes": 456, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FInterceptor%2FgnuServerRequestInfo.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FInterceptor%2FgnuServerRequestInfo.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FInterceptor%2FgnuServerRequestInfo.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,456 @@\n+/* gnuServerRequestInfo.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Interceptor;\n+\n+import gnu.CORBA.GIOP.ReplyHeader;\n+import gnu.CORBA.GIOP.RequestHeader;\n+import gnu.CORBA.ObjectCreator;\n+import gnu.CORBA.Poa.gnuServantObject;\n+import gnu.CORBA.Unexpected;\n+import gnu.CORBA.gnuRequest;\n+\n+import org.omg.CORBA.ARG_IN;\n+import org.omg.CORBA.ARG_INOUT;\n+import org.omg.CORBA.ARG_OUT;\n+import org.omg.CORBA.Any;\n+import org.omg.CORBA.BAD_PARAM;\n+import org.omg.CORBA.Bounds;\n+import org.omg.CORBA.CompletionStatus;\n+import org.omg.CORBA.ExceptionList;\n+import org.omg.CORBA.INV_POLICY;\n+import org.omg.CORBA.LocalObject;\n+import org.omg.CORBA.NO_RESOURCES;\n+import org.omg.CORBA.NVList;\n+import org.omg.CORBA.Object;\n+import org.omg.CORBA.ParameterMode;\n+import org.omg.CORBA.Policy;\n+import org.omg.CORBA.TCKind;\n+import org.omg.CORBA.TypeCode;\n+import org.omg.Dynamic.Parameter;\n+import org.omg.IOP.ServiceContext;\n+import org.omg.Messaging.SYNC_WITH_TRANSPORT;\n+import org.omg.PortableInterceptor.InvalidSlot;\n+import org.omg.PortableInterceptor.ServerRequestInfo;\n+\n+/**\n+ * Implementation of the ServerRequestInfo, associacted with gnuServantObject.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class gnuServerRequestInfo extends LocalObject\n+  implements ServerRequestInfo\n+{\n+  /**\n+   * Use serialVersionUID for interoperability.\n+   */\n+  private static final long serialVersionUID = 1;\n+\n+  /**\n+   * A local object that will serve the invocation.\n+   */\n+  final gnuServantObject m_object;\n+\n+  /**\n+   * A message that the given resource is not available using this metod of\n+   * invocation.\n+   */\n+  static final String not_available =\n+    \"The used invocation method provides\" + \"no access to this resource.\";\n+\n+  /**\n+   * An array of slots.\n+   */\n+  Any[] m_slots;\n+\n+  /**\n+   * The request header.\n+   */\n+  public final RequestHeader m_request_header;\n+\n+  /**\n+   * The reply header.\n+   */\n+  public final ReplyHeader m_reply_header;\n+\n+  /**\n+   * The forward reference, if applicable.\n+   */\n+  public Object m_forward_reference;\n+\n+  /**\n+   * The thrown systen exception.\n+   */\n+  public Exception m_sys_exception;\n+\n+  /**\n+   * The Any, containing the thrown user exception.\n+   */\n+  public Any m_usr_exception;\n+\n+  /**\n+   * The associated request, if any.\n+   */\n+  public gnuRequest m_request;\n+\n+  /**\n+   * Create a new instance at the time when it is known which object will serve\n+   * the invocation.\n+   *\n+   * @param an_object a local object, connected to the local servant that will\n+   * serve the invocation.\n+   */\n+  public gnuServerRequestInfo(gnuServantObject an_object,\n+    RequestHeader a_request_header, ReplyHeader a_reply_header\n+  )\n+  {\n+    m_object = an_object;\n+    m_request_header = a_request_header;\n+    m_reply_header = a_reply_header;\n+    m_slots = new Any[ m_object.orb.icSlotSize ];\n+    reset();\n+  }\n+\n+  /**\n+   * Set the give slot.\n+   */\n+  public void set_slot(int id, Any data) throws InvalidSlot\n+  {\n+    try\n+      {\n+        m_slots [ id ] = data;\n+      }\n+    catch (Exception e)\n+      {\n+        InvalidSlot ex = new InvalidSlot(\"Cannot set slot \" + id);\n+        ex.initCause(e);\n+        throw ex;\n+      }\n+  }\n+\n+  /**\n+   * Get the given slot.\n+   */\n+  public Any get_slot(int id) throws InvalidSlot\n+  {\n+    try\n+      {\n+        return m_slots [ id ];\n+      }\n+    catch (Exception e)\n+      {\n+        InvalidSlot ex = new InvalidSlot(\"Cannot get slot \" + id);\n+        ex.initCause(e);\n+        throw ex;\n+      }\n+  }\n+\n+  /**\n+   * Reset slot data.\n+   */\n+  public void reset()\n+  {\n+    TypeCode tkNull = m_object.orb.get_primitive_tc(TCKind.tk_null);\n+    for (int i = 0; i < m_slots.length; i++)\n+      {\n+        Any a = m_object.orb.create_any();\n+        a.type(tkNull);\n+        m_slots [ i ] = a;\n+      }\n+    m_sys_exception = null;\n+    m_usr_exception = null;\n+  }\n+\n+  /**\n+   * Get the object id (not the object IOR key).\n+   */\n+  public byte[] object_id()\n+  {\n+    return m_object.Id;\n+  }\n+\n+  /**\n+   * Check if the target is an instance of the type, represented by the given\n+   * repository Id.\n+   */\n+  public boolean target_is_a(String id)\n+  {\n+    return m_object._is_a(id);\n+  }\n+\n+  /**\n+   * Get the POA id.\n+   */\n+  public byte[] adapter_id()\n+  {\n+    return m_object.poa.id();\n+  }\n+\n+  /**\n+   * Get the POA policy of the given type that applies to the object being\n+   * served (request being handled).\n+   */\n+  public Policy get_server_policy(int type) throws INV_POLICY\n+  {\n+    return m_object.poa._get_policy(type);\n+  }\n+\n+  /**\n+   * Get the first member of the object repository id array.\n+   */\n+  public String target_most_derived_interface()\n+  {\n+    return m_object._ids() [ 0 ];\n+  }\n+\n+  /**\n+   * Get the name of the operation being performed.\n+   */\n+  public String operation()\n+  {\n+    if (m_request != null)\n+      {\n+        return m_request.operation();\n+      }\n+    else\n+      {\n+        return m_request_header.operation;\n+      }\n+  }\n+\n+  /**\n+   * Not available.\n+   */\n+  public TypeCode[] exceptions()\n+  {\n+    if (m_request == null)\n+      {\n+        throw new NO_RESOURCES(not_available, 1,\n+          CompletionStatus.COMPLETED_MAYBE\n+        );\n+      }\n+\n+    m_request.checkDii();\n+\n+    ExceptionList ex = m_request.exceptions();\n+    TypeCode[] et = new TypeCode[ ex.count() ];\n+    try\n+      {\n+        for (int i = 0; i < et.length; i++)\n+          {\n+            et [ i ] = ex.item(i);\n+          }\n+      }\n+    catch (Bounds e)\n+      {\n+        throw new Unexpected(e);\n+      }\n+    return et;\n+  }\n+\n+  /**\n+   * Get reply status.\n+   */\n+  public short reply_status()\n+  {\n+    return (short) m_reply_header.reply_status;\n+  }\n+\n+  /**\n+   * Get request id. All local requests have request id = -1.\n+   */\n+  public int request_id()\n+  {\n+    return m_request_header.request_id;\n+  }\n+\n+  /**\n+   * Check if the client expected any response.\n+   */\n+  public boolean response_expected()\n+  {\n+    return m_request_header.isResponseExpected();\n+  }\n+\n+  /** @inheritDoc */\n+  public void add_reply_service_context(ServiceContext service_context,\n+    boolean replace\n+  )\n+  {\n+    m_reply_header.addContext(service_context, replace);\n+  }\n+\n+  /**\n+   * Get an exception, wrapped into Any.\n+   */\n+  public Any sending_exception()\n+  {\n+    if (m_usr_exception != null)\n+      {\n+        return m_usr_exception;\n+      }\n+    else if (m_sys_exception != null)\n+      {\n+        Any a = m_object.orb.create_any();\n+        ObjectCreator.insertException(a, m_sys_exception);\n+        return a;\n+      }\n+    else\n+      {\n+        return null;\n+      }\n+  }\n+\n+  public org.omg.CORBA.Object forward_reference()\n+  {\n+    return m_forward_reference;\n+  }\n+\n+  /** @inheritDoc */\n+  public ServiceContext get_reply_service_context(int ctx_name)\n+    throws BAD_PARAM\n+  {\n+    return gnu.CORBA.GIOP.ServiceContext.findContext(ctx_name,\n+      m_reply_header.service_context\n+    );\n+  }\n+\n+  /** @inheritDoc */\n+  public ServiceContext get_request_service_context(int ctx_name)\n+    throws BAD_PARAM\n+  {\n+    return gnu.CORBA.GIOP.ServiceContext.findContext(ctx_name,\n+      m_request_header.service_context\n+    );\n+  }\n+\n+  /**\n+   * Not available\n+   */\n+  public String[] operation_context()\n+  {\n+    if (m_request == null)\n+      {\n+        throw new NO_RESOURCES(not_available);\n+      }\n+    else\n+      {\n+        return m_request.operation_context();\n+      }\n+  }\n+\n+  /** @inheritDoc */\n+  public Any result()\n+  {\n+    if (m_request == null)\n+      {\n+        throw new NO_RESOURCES(not_available);\n+      }\n+    else\n+      {\n+        return m_request.return_value();\n+      }\n+  }\n+\n+  /** @inheritDoc */\n+  public String[] contexts()\n+  {\n+    if (m_request == null)\n+      {\n+        throw new NO_RESOURCES(not_available);\n+      }\n+    else\n+      {\n+        return m_request.ice_contexts();\n+      }\n+  }\n+\n+  /**\n+   * Always returns \"with transport\".\n+   */\n+  public short sync_scope()\n+  {\n+    return SYNC_WITH_TRANSPORT.value;\n+  }\n+\n+  /** @inheritDoc */\n+  public Parameter[] arguments()\n+  {\n+    if (m_request == null)\n+      {\n+        throw new NO_RESOURCES(not_available);\n+      }\n+\n+    m_request.checkDii();\n+\n+    NVList args = m_request.arguments();\n+    Parameter[] p = new Parameter[ args.count() ];\n+    try\n+      {\n+        for (int i = 0; i < p.length; i++)\n+          {\n+            ParameterMode mode;\n+\n+            switch (args.item(i).flags())\n+              {\n+                case ARG_IN.value :\n+                  mode = ParameterMode.PARAM_IN;\n+                  break;\n+\n+                case ARG_OUT.value :\n+                  mode = ParameterMode.PARAM_OUT;\n+                  break;\n+\n+                case ARG_INOUT.value :\n+                  mode = ParameterMode.PARAM_INOUT;\n+                  break;\n+\n+                default :\n+                  throw new Unexpected();\n+              }\n+\n+            p [ i ] = new Parameter(args.item(i).value(), mode);\n+          }\n+      }\n+    catch (Bounds e)\n+      {\n+        throw new Unexpected(e);\n+      }\n+    return p;\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "6ceb9aae06f82efd3b4acb7fce0ec6a9c6a898a6", "filename": "libjava/classpath/gnu/CORBA/NameDynAnyPairHolder.java", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FNameDynAnyPairHolder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FNameDynAnyPairHolder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FNameDynAnyPairHolder.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,115 @@\n+/* NameDynAnyPairHolder.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA;\n+\n+import org.omg.CORBA.portable.InputStream;\n+import org.omg.CORBA.portable.OutputStream;\n+import org.omg.CORBA.portable.Streamable;\n+import org.omg.DynamicAny.NameDynAnyPair;\n+import org.omg.DynamicAny.NameDynAnyPairHelper;\n+\n+/**\n+ * A holder for the structure {@link NameDynAnyPair}.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class NameDynAnyPairHolder\n+  implements Streamable\n+{\n+  /**\n+   * The stored NameDynAnyPair value.\n+   */\n+  public NameDynAnyPair value;\n+\n+  /**\n+   * Create the unitialised instance, leaving the value field\n+   * with default <code>null</code> value.\n+   */\n+  public NameDynAnyPairHolder()\n+  {\n+  }\n+\n+  /**\n+   * Create the initialised instance.\n+   * @param initialValue the value that will be assigned to\n+   * the <code>value</code> field.\n+   */\n+  public NameDynAnyPairHolder(NameDynAnyPair initialValue)\n+  {\n+    value = initialValue;\n+  }\n+\n+  /**\n+   * The method should read this object from the CDR input stream, but\n+   * (following the JDK 1.5 API) it does not.\n+   *\n+   * @param input a org.omg.CORBA.portable stream to read from.\n+   *\n+   * @specenote Sun throws the same exception.\n+   *\n+   * @throws MARSHAL always.\n+   */\n+  public void _read(InputStream input)\n+  {\n+    value = NameDynAnyPairHelper.read(input);\n+  }\n+\n+  /**\n+   * The method should write this object to the CDR input stream, but\n+   * (following the JDK 1.5 API) it does not.\n+   *\n+   * @param input a org.omg.CORBA.portable stream to read from.\n+   *\n+   * @specenote Sun throws the same exception.\n+   *\n+   * @throws MARSHAL always.\n+   */\n+  public void _write(OutputStream output)\n+  {\n+    NameDynAnyPairHelper.write(output, value);\n+  }\n+\n+  /**\n+   * Get the typecode of the NameDynAnyPair.\n+   */\n+  public org.omg.CORBA.TypeCode _type()\n+  {\n+    return NameDynAnyPairHelper.type();\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "71b6174c1adbd1f5c846c43613f3394a843515f6", "filename": "libjava/classpath/gnu/CORBA/NameDynAnyPairSeqHolder.java", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FNameDynAnyPairSeqHolder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FNameDynAnyPairSeqHolder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FNameDynAnyPairSeqHolder.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,115 @@\n+/* NameDynAnyPairSeqHolder.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA;\n+\n+import org.omg.CORBA.portable.InputStream;\n+import org.omg.CORBA.portable.OutputStream;\n+import org.omg.CORBA.portable.Streamable;\n+import org.omg.DynamicAny.NameDynAnyPair;\n+import org.omg.DynamicAny.NameDynAnyPairSeqHelper;\n+\n+/**\n+ * A holder for the sequence of {@link NameDynAnyPair}.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class NameDynAnyPairSeqHolder\n+  implements Streamable\n+{\n+  /**\n+   * The stored array of <code>NameDynAnyPair</code>.\n+   */\n+  public NameDynAnyPair[] value;\n+\n+  /**\n+   * Create the unitialised instance, leaving the value array\n+   * with default <code>null</code> value.\n+   */\n+  public NameDynAnyPairSeqHolder()\n+  {\n+  }\n+\n+  /**\n+   * Create the initialised instance.\n+   * @param initialValue the array that will be assigned to\n+   * the <code>value</code> array.\n+   */\n+  public NameDynAnyPairSeqHolder(NameDynAnyPair[] initialValue)\n+  {\n+    value = initialValue;\n+  }\n+\n+  /**\n+   * The method should read this object from the CDR input stream, but\n+   * (following the JDK 1.5 API) it does not.\n+   *\n+   * @param input a org.omg.CORBA.portable stream to read from.\n+   *\n+   * @specenote Sun throws the same exception.\n+   *\n+   * @throws MARSHAL always.\n+   */\n+  public void _read(InputStream input)\n+  {\n+    value = NameDynAnyPairSeqHelper.read(input);\n+  }\n+\n+  /**\n+   * The method should write this object to the CDR input stream, but\n+   * (following the JDK 1.5 API) it does not.\n+   *\n+   * @param input a org.omg.CORBA.portable stream to read from.\n+   *\n+   * @specenote Sun throws the same exception.\n+   *\n+   * @throws MARSHAL always.\n+   */\n+  public void _write(OutputStream output)\n+  {\n+    NameDynAnyPairSeqHelper.write(output, value);\n+  }\n+\n+  /**\n+   * Get the typecode of the NameDynAnyPair.\n+   */\n+  public org.omg.CORBA.TypeCode _type()\n+  {\n+    return NameDynAnyPairSeqHelper.type();\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "9a939d5e3378cf1634b6c898d43c95671db376d7", "filename": "libjava/classpath/gnu/CORBA/NameValuePairHolder.java", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FNameValuePairHolder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FNameValuePairHolder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FNameValuePairHolder.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,105 @@\n+/* NameValuePairHolder.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA;\n+\n+import org.omg.CORBA.portable.InputStream;\n+import org.omg.CORBA.portable.OutputStream;\n+import org.omg.CORBA.portable.Streamable;\n+import org.omg.DynamicAny.NameValuePair;\n+import org.omg.DynamicAny.NameValuePairHelper;\n+\n+/**\n+ * A holder for the structure {@link NameValuePair}.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class NameValuePairHolder\n+  implements Streamable\n+{\n+  /**\n+   * The stored NameValuePair value.\n+   */\n+  public NameValuePair value;\n+\n+  /**\n+   * Create the unitialised instance, leaving the value field\n+   * with default <code>null</code> value.\n+   */\n+  public NameValuePairHolder()\n+  {\n+  }\n+\n+  /**\n+   * Create the initialised instance.\n+   * @param initialValue the value that will be assigned to\n+   * the <code>value</code> field.\n+   */\n+  public NameValuePairHolder(NameValuePair initialValue)\n+  {\n+    value = initialValue;\n+  }\n+\n+  /**\n+   * Fill in the {@link value} by data from the CDR stream.\n+   *\n+   * @param input the org.omg.CORBA.portable stream to read.\n+   */\n+  public void _read(InputStream input)\n+  {\n+    value = NameValuePairHelper.read(input);\n+  }\n+\n+  /**\n+   * Write the stored value into the CDR stream.\n+   *\n+   * @param output the org.omg.CORBA.portable stream to write.\n+   */\n+  public void _write(OutputStream output)\n+  {\n+    NameValuePairHelper.write(output, value);\n+  }\n+\n+  /**\n+   * Get the typecode of the NameValuePair.\n+   */\n+  public org.omg.CORBA.TypeCode _type()\n+  {\n+    return NameValuePairHelper.type();\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "216d78e04c89eede3f61085da76816b3dab1bdb1", "filename": "libjava/classpath/gnu/CORBA/NameValuePairSeqHolder.java", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FNameValuePairSeqHolder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FNameValuePairSeqHolder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FNameValuePairSeqHolder.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,105 @@\n+/* NameValuePairSeqHolder.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA;\n+\n+import org.omg.CORBA.portable.InputStream;\n+import org.omg.CORBA.portable.OutputStream;\n+import org.omg.CORBA.portable.Streamable;\n+import org.omg.DynamicAny.NameValuePair;\n+import org.omg.DynamicAny.NameValuePairSeqHelper;\n+\n+/**\n+ * A holder for the sequence of {@link NameValuePair}.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class NameValuePairSeqHolder\n+  implements Streamable\n+{\n+  /**\n+   * The stored array of <code>NameValuePair</code>.\n+   */\n+  public NameValuePair[] value;\n+\n+  /**\n+   * Create the unitialised instance, leaving the value array\n+   * with default <code>null</code> value.\n+   */\n+  public NameValuePairSeqHolder()\n+  {\n+  }\n+\n+  /**\n+   * Create the initialised instance.\n+   * @param initialValue the array that will be assigned to\n+   * the <code>value</code> array.\n+   */\n+  public NameValuePairSeqHolder(NameValuePair[] initialValue)\n+  {\n+    value = initialValue;\n+  }\n+\n+  /**\n+   * Read the {@link value} array from the CDR stream.\n+   *\n+   * @param input the org.omg.CORBA.portable stream to read.\n+   */\n+  public void _read(InputStream input)\n+  {\n+    value = NameValuePairSeqHelper.read(input);\n+  }\n+\n+  /**\n+   * Write the stored value into the CDR stream.\n+   *\n+   * @param output the org.omg.CORBA.portable stream to write.\n+   */\n+  public void _write(OutputStream output)\n+  {\n+    NameValuePairSeqHelper.write(output, value);\n+  }\n+\n+  /**\n+   * Get the typecode of the NameValuePair.\n+   */\n+  public org.omg.CORBA.TypeCode _type()\n+  {\n+    return NameValuePairSeqHelper.type();\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "f886cf93533e49b3b080553f1a1754d99f88b56d", "filename": "libjava/classpath/gnu/CORBA/NamingService/NameParser.java", "status": "added", "additions": 419, "deletions": 0, "changes": 419, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FNamingService%2FNameParser.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FNamingService%2FNameParser.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FNamingService%2FNameParser.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,419 @@\n+/* NameParser.java --\n+ Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+ This file is part of GNU Classpath.\n+\n+ GNU Classpath is free software; you can redistribute it and/or modify\n+ it under the terms of the GNU General Public License as published by\n+ the Free Software Foundation; either version 2, or (at your option)\n+ any later version.\n+\n+ GNU Classpath is distributed in the hope that it will be useful, but\n+ WITHOUT ANY WARRANTY; without even the implied warranty of\n+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License\n+ along with GNU Classpath; see the file COPYING.  If not, write to the\n+ Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+ 02110-1301 USA.\n+\n+ Linking this library statically or dynamically with other modules is\n+ making a combined work based on this library.  Thus, the terms and\n+ conditions of the GNU General Public License cover the whole\n+ combination.\n+\n+ As a special exception, the copyright holders of this library give you\n+ permission to link this library with independent modules to produce an\n+ executable, regardless of the license terms of these independent\n+ modules, and to copy and distribute the resulting executable under\n+ terms of your choice, provided that you also meet, for each linked\n+ independent module, the terms and conditions of the license of that\n+ module.  An independent module is a module which is not derived from\n+ or based on this library.  If you modify this library, you may extend\n+ this exception to your version of the library, but you are not\n+ obligated to do so.  If you do not wish to do so, delete this\n+ exception statement from your version. */\n+\n+\n+package gnu.CORBA.NamingService;\n+\n+import gnu.CORBA.Functional_ORB;\n+import gnu.CORBA.IOR;\n+import gnu.CORBA.Unexpected;\n+import gnu.CORBA.Version;\n+\n+import org.omg.CORBA.BAD_PARAM;\n+import org.omg.CORBA.DATA_CONVERSION;\n+import org.omg.CORBA.ORB;\n+import org.omg.CORBA.Object;\n+import org.omg.CORBA.ORBPackage.InvalidName;\n+import org.omg.CORBA.portable.Delegate;\n+import org.omg.CORBA.portable.ObjectImpl;\n+import org.omg.CosNaming.NamingContext;\n+import org.omg.CosNaming.NamingContextExtHelper;\n+import org.omg.CosNaming.NamingContextHelper;\n+import org.omg.CosNaming._NamingContextStub;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLDecoder;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+/**\n+ * Parses the alternative IOR representations into our IOR structure.\n+ * \n+ * TODO This parser currently supports only one address per target string. A\n+ * string with the multiple addresses will be accepted, but only the last\n+ * address will be taken into consideration. The fault tolerance is not yet\n+ * implemented.\n+ * \n+ * The key string is filtered using {@link java.net.URLDecoder} that replaces\n+ * the agreed escape sequences by the corresponding non alphanumeric characters.\n+ * \n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class NameParser\n+  extends snConverter\n+{\n+  /**\n+   * The corbaloc prefix.\n+   */\n+  public static final String pxCORBALOC = \"corbaloc\";\n+\n+  /**\n+   * The corbaname prefix.\n+   */\n+  public static final String pxCORBANAME = \"corbaname\";\n+\n+  /**\n+   * The IOR prefix.\n+   */\n+  public static final String pxIOR = \"ior\";\n+\n+  /**\n+   * Marks iiop protocol.\n+   */\n+  public static final String IIOP = \"iiop\";\n+\n+  /**\n+   * Marks rir protocol.\n+   */\n+  public static final String RIR = \"rir\";\n+\n+  /**\n+   * The default port value, as specified in OMG documentation.\n+   */\n+  public static final int DEFAULT_PORT = 2809;\n+\n+  /**\n+   * The default name.\n+   */\n+  public static final String DEFAULT_NAME = \"NameService\";\n+\n+  /**\n+   * The string to name converter, initialized on demand.\n+   */\n+  static snConverter converter;\n+\n+  /**\n+   * The current position.\n+   */\n+  int p;\n+\n+  /**\n+   * The address being parsed, splitted into tokens.\n+   */\n+  String[] t;\n+\n+  /**\n+   * Parse CORBALOC.\n+   * \n+   * The expected format is: <br>\n+   * 1. corbaloc:[iiop][version.subversion@]:host[:port]/key <br>\n+   * 2. corbaloc:rir:[/key] <br>\n+   * 3. corbaname:[iiop][version.subversion@]:host[:port]/key <br>\n+   * 4. corbaname:rir:[/key] <br>\n+   * \n+   * Protocol defaults to IOP, the object key defaults to the NameService.\n+   * \n+   * @param corbaloc the string to parse.\n+   * @param orb the ORB, needed to create IORs and resolve rir references.\n+   * \n+   * @return the resolved object.\n+   */\n+  public synchronized org.omg.CORBA.Object corbaloc(String corbaloc,\n+    Functional_ORB orb)\n+    throws BAD_PARAM\n+  {\n+    boolean corbaname;\n+\n+    // The alternative addresses, if given.\n+    ArrayList alt_addr = new ArrayList();\n+\n+    // The version numbers with default values.\n+    int major = 1;\n+    int minor = 0;\n+\n+    // The host address.\n+    String host;\n+\n+    // The port.\n+    int port = DEFAULT_PORT;\n+\n+    // The object key as string.\n+    String key;\n+\n+    StringTokenizer st = new StringTokenizer(corbaloc, \":@/.,#\", true);\n+\n+    t = new String[st.countTokens()];\n+\n+    for (int i = 0; i < t.length; i++)\n+      {\n+        t[i] = st.nextToken();\n+      }\n+\n+    p = 0;\n+\n+    if (t[p].startsWith(pxCORBANAME))\n+      corbaname = true;\n+    else if (t[p].equalsIgnoreCase(pxCORBALOC))\n+      corbaname = false;\n+    else if (t[p].equalsIgnoreCase(pxIOR))\n+      {\n+        IOR ior = IOR.parse(corbaloc);\n+        return orb.ior_to_object(ior);\n+      }\n+    else\n+      throw new DATA_CONVERSION(\"Unsupported protocol: '\" + t[p] + \"'\");\n+\n+    p++;\n+\n+    if (!t[p++].equals(\":\"))\n+      throw new BAD_PARAM(\"Syntax (':' expected after name prefix)\");\n+\n+    // Check for rir:\n+    if (t[p].equals(RIR))\n+      {\n+        p++;\n+        if (!t[p++].equals(\":\"))\n+          throw new BAD_PARAM(\"':' expected after 'rir'\");\n+\n+        key = readKey(\"/\");\n+\n+        Object object;\n+        try\n+          {\n+            object = orb.resolve_initial_references(key);\n+            return corbaname ? resolve(object) : object;\n+          }\n+        catch (InvalidName e)\n+          {\n+            throw new BAD_PARAM(\"Unknown initial reference '\" + key + \"'\");\n+          }\n+      }\n+    else\n+    // Check for iiop.\n+    if (t[p].equals(IIOP) || t[p].equals(\":\"))\n+      {\n+        IOR ior = new IOR();\n+\n+        Addresses: do\n+          { // Read addresses.\n+            if (t[p].equals(\":\"))\n+              {\n+                p++;\n+              }\n+            else\n+              {\n+                p++;\n+                if (!t[p++].equals(\":\"))\n+                  throw new BAD_PARAM(\"':' expected after 'iiop'\");\n+                // Check if version is present.\n+                if (t[p + 1].equals(\".\"))\n+                  if (t[p + 3].equals(\"@\"))\n+                    {\n+                      // Version info present.\n+                      try\n+                        {\n+                          major = Integer.parseInt(t[p++]);\n+                        }\n+                      catch (NumberFormatException e)\n+                        {\n+                          throw new BAD_PARAM(\"Major version number '\"\n+                            + t[p - 1] + \"'\");\n+                        }\n+                      p++; // '.' at this point.\n+                      try\n+                        {\n+                          minor = Integer.parseInt(t[p++]);\n+                        }\n+                      catch (NumberFormatException e)\n+                        {\n+                          throw new BAD_PARAM(\"Major version number '\"\n+                            + t[p - 1] + \"'\");\n+                        }\n+                      p++; // '@' at this point.\n+                    }\n+              }\n+\n+            ior.Internet.version = new Version(major, minor);\n+\n+            // Then host data goes till '/' or ':'.\n+            StringBuffer bhost = new StringBuffer(corbaloc.length());\n+            while (!t[p].equals(\":\") && !t[p].equals(\"/\") && !t[p].equals(\",\"))\n+              bhost.append(t[p++]);\n+\n+            host = bhost.toString();\n+\n+            ior.Internet.host = host;\n+\n+            if (t[p].equals(\":\"))\n+              {\n+                // Port specified.\n+                p++;\n+                try\n+                  {\n+                    port = Integer.parseInt(t[p++]);\n+                  }\n+                catch (NumberFormatException e)\n+                  {\n+                    throw new BAD_PARAM(\"Invalid port '\" + t[p - 1] + \"'\");\n+                  }\n+              }\n+\n+            ior.Internet.port = port;\n+\n+            // Id is not listed.\n+            ior.Id = \"\";\n+\n+            if (t[p].equals(\",\"))\n+              p++;\n+            else\n+              break Addresses;\n+          }\n+        while (true);\n+\n+        key = readKey(\"/\");\n+        ior.key = key.getBytes();\n+\n+        org.omg.CORBA.Object object = orb.ior_to_object(ior);\n+        return corbaname ? resolve(object) : object;\n+      }\n+\n+    else\n+      throw new DATA_CONVERSION(\"Unsupported protocol '\" + t[p] + \"'\");\n+  }\n+\n+  private org.omg.CORBA.Object resolve(org.omg.CORBA.Object object)\n+  {\n+    NamingContext ns;\n+    String key = \"?\";\n+    try\n+      {\n+        if (object instanceof NamingContext)\n+          ns = (NamingContext) object;\n+        else\n+          {\n+            Delegate delegate = ((ObjectImpl) object)._get_delegate();\n+            ns = new _NamingContextStub(delegate);\n+          }\n+      }\n+    catch (Exception ex)\n+      {\n+        BAD_PARAM bad = new BAD_PARAM(\"The CORBANAME target \" + object\n+          + \" is not a NamingContext\");\n+        bad.minor = 10;\n+        bad.initCause(ex);\n+        throw bad;\n+      }\n+\n+    if (converter == null)\n+      converter = new snConverter();\n+\n+    try\n+      {\n+        key = readKey(\"#\");\n+        object = ns.resolve(converter.toName(key));\n+        return object;\n+      }\n+    catch (Exception ex)\n+      {\n+        BAD_PARAM bad = new BAD_PARAM(\"Wrong CORBANAME '\" + key + \"'\");\n+        bad.minor = 10;\n+        bad.initCause(ex);\n+        throw bad;\n+      }\n+  }\n+\n+  private String readKey(String delimiter)\n+    throws BAD_PARAM\n+  {\n+    if (p < t.length)\n+      if (!t[p].equals(delimiter))\n+        {\n+          if (t[p].equals(\"#\"))\n+            return DEFAULT_NAME;\n+          else\n+            throw new BAD_PARAM(\"'\" + delimiter + \"String' expected '\" + t[p]\n+              + \"' found\");\n+        }\n+\n+    StringBuffer bKey = new StringBuffer();\n+    p++;\n+\n+    while (p < t.length && !t[p].equals(\"#\"))\n+      bKey.append(t[p++]);\n+\n+    if (bKey.length() == 0)\n+      return DEFAULT_NAME;\n+\n+    try\n+      {\n+        return URLDecoder.decode(bKey.toString(), \"UTF-8\");\n+      }\n+    catch (UnsupportedEncodingException e)\n+      {\n+        throw new Unexpected(\"URLDecoder does not support UTF-8\", e);\n+      }\n+  }\n+\n+  static NameParser n = new NameParser();\n+\n+  static void corbalocT(String ior, Functional_ORB orb)\n+  {\n+    System.out.println(ior);\n+    System.out.println(n.corbaloc(ior, orb));\n+    System.out.println();\n+  }\n+\n+  public static void main(String[] args)\n+  {\n+    try\n+      {\n+        Functional_ORB orb = (Functional_ORB) ORB.init(args, null);\n+        corbalocT(\"corbaloc:iiop:1.3@155axyz.com/Prod/aTradingService\", orb);\n+        corbalocT(\"corbaloc:iiop:2.7@255bxyz.com/Prod/bTradingService\", orb);\n+        corbalocT(\"corbaloc:iiop:355cxyz.com/Prod/cTradingService\", orb);\n+        corbalocT(\"corbaloc:iiop:2.7@255bxyz.com/Prod/bTradingService\", orb);\n+        corbalocT(\"corbaloc:iiop:355cxyz.com:7777/Prod/cTradingService\", orb);\n+\n+        corbalocT(\"corbaloc::556xyz.com:80/Dev/NameService\", orb);\n+        corbalocT(\"corbaloc:iiop:1.2@host1:3076/0\", orb);\n+\n+        corbalocT(\"corbaloc:rir:/NameService\", orb);\n+        corbalocT(\"corbaloc:rir:/\", orb);\n+        corbalocT(\"corbaloc:rir:\", orb);\n+\n+        corbalocT(\"corbaloc:rir:/NameService\", orb);\n+        corbalocT(\"corbaloc:rir:/\", orb);\n+        corbalocT(\"corbaloc:rir:\", orb);\n+\n+        corbalocT(\"corbaloc::555xyz.com,:556xyz.com:80/Dev/NameService\", orb);\n+      }\n+    catch (BAD_PARAM e)\n+      {\n+        e.printStackTrace(System.out);\n+      }\n+  }\n+}"}, {"sha": "5e2455952d2003dd7e3b92c4a0b5ec06b5676a56", "filename": "libjava/classpath/gnu/CORBA/Poa/ForwardRequestHolder.java", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FForwardRequestHolder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FForwardRequestHolder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FForwardRequestHolder.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,107 @@\n+/* ForwardRequestHolder.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Poa;\n+\n+import gnu.CORBA.ForwardRequestHelper;\n+\n+import org.omg.CORBA.TypeCode;\n+import org.omg.CORBA.portable.InputStream;\n+import org.omg.CORBA.portable.OutputStream;\n+import org.omg.CORBA.portable.Streamable;\n+import org.omg.PortableServer.ForwardRequest;\n+\n+/**\n+* A holder for the exception {@link ForwardRequest}.\n+\n+* @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+*/\n+public class ForwardRequestHolder\n+  implements Streamable\n+{\n+  /**\n+   * The stored ForwardRequest value.\n+   */\n+  public ForwardRequest value;\n+\n+  /**\n+   * Create the unitialised instance, leaving the value field\n+   * with default <code>null</code> value.\n+   */\n+  public ForwardRequestHolder()\n+  {\n+  }\n+\n+  /**\n+   * Create the initialised instance.\n+   * @param initialValue the value that will be assigned to\n+   * the <code>value</code> field.\n+   */\n+  public ForwardRequestHolder(ForwardRequest initialValue)\n+  {\n+    value = initialValue;\n+  }\n+\n+  /**\n+   * Fill in the {@link value} by data from the CDR stream.\n+   *\n+   * @param input the org.omg.CORBA.portable stream to read.\n+   */\n+  public void _read(InputStream input)\n+  {\n+    value = ForwardRequestHelper.read(input);\n+  }\n+\n+  /**\n+   * Get the typecode of the ForwardRequest.\n+   */\n+  public TypeCode _type()\n+  {\n+    return ForwardRequestHelper.type();\n+  }\n+\n+  /**\n+   * Write the stored value into the CDR stream.\n+   *\n+   * @param output the org.omg.CORBA.portable stream to write.\n+   */\n+  public void _write(OutputStream output)\n+  {\n+    ForwardRequestHelper.write(output, value);\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "2df378df6a4b77106326d41be30b77bd031b2d56", "filename": "libjava/classpath/gnu/CORBA/Poa/ForwardedServant.java", "status": "added", "additions": 207, "deletions": 0, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FForwardedServant.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FForwardedServant.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FForwardedServant.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,207 @@\n+/* ForwardedServant.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Poa;\n+\n+import gnu.CORBA.IOR;\n+import gnu.CORBA.IOR_Delegate;\n+import gnu.CORBA.IOR_contructed_object;\n+\n+import org.omg.CORBA.BAD_PARAM;\n+import org.omg.CORBA.CompletionStatus;\n+import org.omg.CORBA.MARSHAL;\n+import org.omg.CORBA.ORB;\n+import org.omg.CORBA.SystemException;\n+import org.omg.CORBA.portable.ApplicationException;\n+import org.omg.CORBA.portable.Delegate;\n+import org.omg.CORBA.portable.InputStream;\n+import org.omg.CORBA.portable.InvokeHandler;\n+import org.omg.CORBA.portable.ObjectImpl;\n+import org.omg.CORBA.portable.OutputStream;\n+import org.omg.CORBA.portable.RemarshalException;\n+import org.omg.CORBA.portable.ResponseHandler;\n+import org.omg.PortableServer.POA;\n+import org.omg.PortableServer.Servant;\n+\n+import java.io.IOException;\n+\n+/**\n+ * A \"virtual servant\", delegating all invocation to the wrapped\n+ * object (usually remote). Used in cases when it is necessary to\n+ * handle the request forwarding.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class ForwardedServant\n+  extends Servant\n+  implements InvokeHandler\n+{\n+  /**\n+   * The reference object, handling requests.\n+   */\n+  public final ObjectImpl ref;\n+\n+  /**\n+   * Create an instance, forwarding requests to the given object.\n+   */\n+  ForwardedServant(ObjectImpl a_ref)\n+  {\n+    ref = a_ref;\n+  }\n+\n+  /**\n+   * Create an instance of the forwarded servant.\n+   *\n+   * @param a_ref a reference where request should be forwarded.\n+   *\n+   * @return a created forwarded servant or null if the parameter\n+   * forwards request to itself. Returning null will force to find\n+   * a right servant in one of many possible ways, depending on\n+   * policies.\n+   */\n+  public static Servant create(org.omg.CORBA.Object a_ref)\n+  {\n+    try\n+      {\n+        ObjectImpl fto = (ObjectImpl) a_ref;\n+\n+        // Check maybe the remote side forwarded back to our local object.\n+        if (fto instanceof IOR_contructed_object)\n+          {\n+            IOR_contructed_object iref = (IOR_contructed_object) fto;\n+\n+            // Check maybe the IOR is local.\n+            ORB t_orb = iref._orb();\n+            if (t_orb instanceof ORB_1_4)\n+              {\n+                ORB_1_4 orb = (ORB_1_4) t_orb;\n+                Delegate d = iref._get_delegate();\n+                if (d instanceof IOR_Delegate)\n+                  {\n+                    IOR_Delegate ird = (IOR_Delegate) iref._get_delegate();\n+                    IOR ior = ird.getIor();\n+                    if (orb.LOCAL_HOST.equalsIgnoreCase(ior.Internet.host))\n+                      {\n+                        activeObjectMap.Obj rx = orb.rootPOA.findIorKey(ior.key);\n+                        if (rx != null)\n+                          {\n+                            if (rx.object == fto ||\n+                                rx.object._is_equivalent(fto)\n+                               )\n+                              return rx.primary_servant;\n+                            else\n+                              fto = (ObjectImpl) rx.object;\n+                          }\n+                      }\n+                  }\n+              }\n+          }\n+        return new ForwardedServant(fto);\n+      }\n+    catch (ClassCastException ex)\n+      {\n+        throw new BAD_PARAM(\"ObjectImpl required but \" + a_ref + \" passed \",\n+                            0x5005, CompletionStatus.COMPLETED_NO\n+                           );\n+      }\n+  }\n+\n+  /**\n+   * Forward the call to the wrapped object.\n+   */\n+  public OutputStream _invoke(String method, InputStream input,\n+                              ResponseHandler handler\n+                             )\n+                       throws SystemException\n+  {\n+    org.omg.CORBA.portable.InputStream in = null;\n+    org.omg.CORBA.portable.OutputStream out = null;\n+    try\n+      {\n+        try\n+          {\n+            out = ref._request(method, true);\n+\n+            // Transfer request information.\n+            int b;\n+            while ((b = input.read()) >= 0)\n+              {\n+                out.write(b);\n+              }\n+            in = ref._invoke(out);\n+\n+            // Read the returned data.\n+            out = handler.createReply();\n+            while ((b = in.read()) >= 0)\n+              {\n+                out.write(b);\n+              }\n+          }\n+        catch (IOException io_ex)\n+          {\n+            MARSHAL m = new MARSHAL();\n+            m.initCause(io_ex);\n+            throw m;\n+          }\n+      }\n+    catch (ApplicationException ex)\n+      {\n+        in = ex.getInputStream();\n+\n+        String _id = ex.getId();\n+        throw new MARSHAL(_id, 5101, CompletionStatus.COMPLETED_NO);\n+      }\n+    catch (RemarshalException remarsh)\n+      {\n+        _invoke(method, input, handler);\n+      }\n+    finally\n+      {\n+        ref._releaseReply(in);\n+      }\n+    return out;\n+  }\n+\n+  /**\n+   * Delegates to the wrapped object.\n+   */\n+  public String[] _all_interfaces(POA poa, byte[] key)\n+  {\n+    return ref._ids();\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "7af3369d2e8c64a2d3d7bfe250a0cc880a51bb45", "filename": "libjava/classpath/gnu/CORBA/Poa/LocalDelegate.java", "status": "added", "additions": 382, "deletions": 0, "changes": 382, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FLocalDelegate.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FLocalDelegate.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FLocalDelegate.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,382 @@\n+/* LocalDelegate.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Poa;\n+\n+import gnu.CORBA.CDR.cdrOutput;\n+import gnu.CORBA.streamRequest;\n+\n+import org.omg.CORBA.ARG_INOUT;\n+import org.omg.CORBA.Bounds;\n+import org.omg.CORBA.Context;\n+import org.omg.CORBA.ContextList;\n+import org.omg.CORBA.ExceptionList;\n+import org.omg.CORBA.NO_IMPLEMENT;\n+import org.omg.CORBA.NVList;\n+import org.omg.CORBA.NamedValue;\n+import org.omg.CORBA.OBJECT_NOT_EXIST;\n+import org.omg.CORBA.ORB;\n+import org.omg.CORBA.Request;\n+import org.omg.CORBA.TypeCodePackage.BadKind;\n+import org.omg.CORBA.UnknownUserException;\n+import org.omg.CORBA.portable.ApplicationException;\n+import org.omg.CORBA.portable.InputStream;\n+import org.omg.CORBA.portable.InvokeHandler;\n+import org.omg.CORBA.portable.ObjectImpl;\n+import org.omg.CORBA.portable.OutputStream;\n+import org.omg.CORBA.portable.RemarshalException;\n+import org.omg.PortableServer.ServantLocatorPackage.CookieHolder;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * A local delegate, transferring all object requests to the locally available\n+ * servant. This class is involved in handling the method invocations on the\n+ * local object, obtained by POA.create_reference_with_id.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class LocalDelegate extends org.omg.CORBA_2_3.portable.Delegate\n+{\n+  /**\n+   * The same servant as an invocation handler.\n+   */\n+  gnuServantObject object;\n+  String operation;\n+  final gnuPOA poa;\n+  final byte[] Id;\n+\n+  /**\n+   * Create a local delegate, forwarding requests to the servant that must also\n+   * be an invocation handler.\n+   */\n+  public LocalDelegate(gnuServantObject an_object, gnuPOA a_poa, byte[] an_id)\n+  {\n+    object = an_object;\n+    poa = a_poa;\n+    Id = an_id;\n+  }\n+\n+  public Request request(org.omg.CORBA.Object target, String method)\n+  {\n+    operation = method;\n+\n+    LocalRequest rq = new LocalRequest(object, poa, Id);\n+    rq.setOperation(method);\n+    rq.setORB(orb(target));\n+    return rq;\n+  }\n+\n+  public void release(org.omg.CORBA.Object target)\n+  {\n+  }\n+\n+  public boolean is_equivalent(org.omg.CORBA.Object target,\n+    org.omg.CORBA.Object other\n+  )\n+  {\n+    if (target == other)\n+      return true;\n+    else if (target instanceof ObjectImpl && other instanceof ObjectImpl)\n+      {\n+        org.omg.CORBA.portable.Delegate a = null;\n+        org.omg.CORBA.portable.Delegate b = null;\n+        try\n+          {\n+            a = ((ObjectImpl) target)._get_delegate();\n+            b = ((ObjectImpl) other)._get_delegate();\n+          }\n+        catch (Exception ex)\n+          {\n+            // Unable to get one of the delegates.\n+            return false;\n+          }\n+        if (a instanceof LocalDelegate && b instanceof LocalDelegate)\n+          {\n+            byte[] k1 = ((LocalDelegate) a).Id;\n+            byte[] k2 = ((LocalDelegate) b).Id;\n+            return Arrays.equals(k1, k2);\n+          }\n+        else\n+          return false;\n+      }\n+    else\n+      return false;\n+  }\n+\n+  /**\n+   * Always return false.\n+   */\n+  public boolean non_existent(org.omg.CORBA.Object target)\n+  {\n+    return false;\n+  }\n+\n+  /**\n+   * Get hash code.\n+   */\n+  public int hash(org.omg.CORBA.Object target, int maximum)\n+  {\n+    return hashCode() % maximum;\n+  }\n+\n+  /**\n+   * Check if this object could be named by the given repository id.\n+   *\n+   * @param idl_id the repository id to check.\n+   *\n+   * @return true if it is one of the possible repository ids of this object.\n+   */\n+  public boolean is_a(org.omg.CORBA.Object a_servant, String idl_id)\n+  {\n+    String[] maybe = object._ids();\n+    for (int i = 0; i < maybe.length; i++)\n+      {\n+        if (maybe [ i ].equals(idl_id))\n+          return true;\n+      }\n+    return false;\n+  }\n+\n+  /**\n+   * Return <code>this</code>.\n+   */\n+  public org.omg.CORBA.Object duplicate(org.omg.CORBA.Object target)\n+  {\n+    return target;\n+  }\n+\n+  /**\n+   * Create request for using with DII.\n+   */\n+  public Request create_request(org.omg.CORBA.Object target, Context context,\n+    String method, NVList parameters, NamedValue returns,\n+    ExceptionList exceptions, ContextList ctx_list\n+  )\n+  {\n+    operation = method;\n+\n+    LocalRequest rq = new LocalRequest(object, poa, Id);\n+    rq.setOperation(method);\n+    rq.set_args(parameters);\n+    rq.set_result(returns);\n+    rq.set_exceptions(exceptions);\n+    rq.set_context_list(ctx_list);\n+    return rq;\n+  }\n+\n+  /**\n+   * Create request for using with DII.\n+   */\n+  public Request create_request(org.omg.CORBA.Object target, Context context,\n+    String method, NVList parameters, NamedValue returns\n+  )\n+  {\n+    operation = method;\n+\n+    LocalRequest rq = new LocalRequest(object, poa, Id);\n+    rq.setOperation(method);\n+    rq.set_args(parameters);\n+    rq.set_result(returns);\n+    return rq;\n+  }\n+\n+  /**\n+   * Not in use.\n+   */\n+  public org.omg.CORBA.Object get_interface_def(org.omg.CORBA.Object target)\n+  {\n+    throw new NO_IMPLEMENT();\n+  }\n+\n+  /**\n+   * Create a request to invoke the method of this CORBA object.\n+   *\n+   * @param operation the name of the method to invoke.\n+   * @param response_expected specifies if this is one way message or the\n+   * response to the message is expected.\n+   *\n+   * @return the stream where the method arguments should be written.\n+   */\n+  public org.omg.CORBA.portable.OutputStream request(\n+    org.omg.CORBA.Object target,\n+    String method,\n+    boolean response_expected\n+  )\n+  {\n+    operation = method;\n+\n+    // Check if the object is not explicitly deactivated.\n+    activeObjectMap.Obj e = poa.aom.get(Id);\n+    if (e != null && e.isDeactiveted())\n+      {\n+        if (poa.servant_activator != null || poa.servant_locator != null)\n+          {\n+            // This will force the subsequent activation.\n+            object.setServant(null);\n+            e.setServant(null);\n+            e.setDeactivated(false);\n+          }\n+        else\n+          throw new OBJECT_NOT_EXIST(\"Deactivated\");\n+      }\n+\n+    LocalRequest rq = new LocalRequest(object, poa, Id);\n+    rq.setOperation(method);\n+    rq.setORB(orb(target));\n+    return rq.getParameterStream();\n+  }\n+\n+  /**\n+   * Return the associated invocation handler.\n+   */\n+  public InvokeHandler getHandler(String method, CookieHolder cookie)\n+  {\n+    return object.getHandler(method, cookie, false);\n+  }\n+\n+  /**\n+   * Return the ORB of the associated POA. The parameter is not in use.\n+   */\n+  public ORB orb(org.omg.CORBA.Object target)\n+  {\n+    return poa.orb();\n+  }\n+\n+  /**\n+   * Make an invocation.\n+   *\n+   * @param target not in use.\n+   * @param output the stream request that should be returned by\n+   * {@link #m_request} in this method.\n+   * @throws ApplicationException if the use exception is thrown by the servant\n+   * method.\n+   */\n+  public InputStream invoke(org.omg.CORBA.Object target, OutputStream output)\n+    throws ApplicationException\n+  {\n+    try\n+      {\n+        streamRequest sr = (streamRequest) output;\n+\n+        LocalRequest lr = (LocalRequest) sr.request;\n+        InvokeHandler handler =\n+          lr.object.getHandler(lr.operation(), lr.cookie, false);\n+\n+        if (handler instanceof dynImpHandler)\n+          {\n+            // The local request known how to handle it, but the different\n+            // method must be called.\n+            lr.invoke();\n+\n+            // The encapsulation will inherit orb, endian, charsets, etc.\n+            cdrOutput buf = sr.createEncapsulation();\n+\n+            // Write all request parameters to the buffer stream.\n+            if (lr.env().exception() != null)\n+              {\n+                try\n+                  {\n+                    UnknownUserException uex =\n+                      (UnknownUserException) lr.env().exception();\n+                    throw new ApplicationException(uex.except.type().id(),\n+                      uex.except.create_input_stream()\n+                    );\n+                  }\n+                catch (BadKind ex)\n+                  {\n+                    InternalError ierr = new InternalError();\n+                    ierr.initCause(ex);\n+                    throw ierr;\n+                  }\n+              }\n+            if (lr.return_value() != null)\n+              lr.return_value().write_value(buf);\n+\n+            NamedValue a;\n+            try\n+              {\n+                for (int i = 0; i < lr.arguments().count(); i++)\n+                  {\n+                    a = lr.arguments().item(i);\n+                    if (a.flags() == ARG_INOUT.value ||\n+                      a.flags() == ARG_INOUT.value\n+                    )\n+                      {\n+                        a.value().write_value(buf);\n+                      }\n+                  }\n+              }\n+            catch (Bounds ex)\n+              {\n+                InternalError ierr = new InternalError();\n+                ierr.initCause(ex);\n+                throw ierr;\n+              }\n+\n+            return buf.create_input_stream();\n+          }\n+        else\n+          {\n+            LocalRequest lrq = (LocalRequest) sr.request;\n+            return lrq.s_invoke(handler);\n+          }\n+      }\n+    catch (gnuForwardRequest f)\n+      {\n+        try\n+          {\n+            return ((ObjectImpl) f.forward_reference)._invoke(f.forward_reference._request(\n+                operation,\n+                true\n+              )\n+            );\n+          }\n+        catch (RemarshalException e)\n+          {\n+            // Never thrown in this place by Classpath implementation.\n+            throw new NO_IMPLEMENT();\n+          }\n+      }\n+  }\n+\n+  public void releaseReply(org.omg.CORBA.Object target, InputStream input)\n+  {\n+    release(target);\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "a727499fce5579875ae9b0fc3e37c318e85455a3", "filename": "libjava/classpath/gnu/CORBA/Poa/LocalRequest.java", "status": "added", "additions": 684, "deletions": 0, "changes": 684, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FLocalRequest.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FLocalRequest.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FLocalRequest.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,684 @@\n+/* LocalRequest.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Poa;\n+\n+import gnu.CORBA.CDR.cdrBufOutput;\n+import gnu.CORBA.GIOP.MessageHeader;\n+import gnu.CORBA.GIOP.v1_2.ReplyHeader;\n+import gnu.CORBA.GIOP.v1_2.RequestHeader;\n+import gnu.CORBA.Interceptor.gnuClientRequestInfo;\n+import gnu.CORBA.Interceptor.gnuServerRequestInfo;\n+import gnu.CORBA.ObjectCreator;\n+import gnu.CORBA.Unexpected;\n+import gnu.CORBA.gnuAny;\n+import gnu.CORBA.gnuRequest;\n+import gnu.CORBA.recordTypeCode;\n+import gnu.CORBA.streamReadyHolder;\n+import gnu.CORBA.streamRequest;\n+\n+import org.omg.CORBA.ARG_OUT;\n+import org.omg.CORBA.Any;\n+import org.omg.CORBA.BAD_INV_ORDER;\n+import org.omg.CORBA.BAD_OPERATION;\n+import org.omg.CORBA.Bounds;\n+import org.omg.CORBA.NamedValue;\n+import org.omg.CORBA.ORB;\n+import org.omg.CORBA.SystemException;\n+import org.omg.CORBA.TCKind;\n+import org.omg.CORBA.UnknownUserException;\n+import org.omg.CORBA.UserException;\n+import org.omg.CORBA.portable.ApplicationException;\n+import org.omg.CORBA.portable.InputStream;\n+import org.omg.CORBA.portable.InvokeHandler;\n+import org.omg.CORBA.portable.ObjectImpl;\n+import org.omg.CORBA.portable.OutputStream;\n+import org.omg.CORBA.portable.ResponseHandler;\n+import org.omg.PortableInterceptor.ClientRequestInterceptorOperations;\n+import org.omg.PortableInterceptor.ForwardRequest;\n+import org.omg.PortableInterceptor.ServerRequestInterceptorOperations;\n+import org.omg.PortableServer.CurrentOperations;\n+import org.omg.PortableServer.CurrentPackage.NoContext;\n+import org.omg.PortableServer.DynamicImplementation;\n+import org.omg.PortableServer.POA;\n+import org.omg.PortableServer.Servant;\n+import org.omg.PortableServer.ServantLocatorPackage.CookieHolder;\n+import org.omg.PortableServer.portable.Delegate;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Directs the invocation to the locally available servant. The POA servant does\n+ * not longer implement the CORBA object and cannot be substituted directly.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class LocalRequest extends gnuRequest implements ResponseHandler,\n+  CurrentOperations\n+{\n+  /**\n+   * Used by servant locator, if involved.\n+   */\n+  CookieHolder cookie;\n+\n+  /**\n+   * The object Id.\n+   */\n+  final byte[] Id;\n+\n+  /**\n+   * The message header (singleton is sufficient).\n+   */\n+  private static final MessageHeader header = new MessageHeader();\n+\n+  /**\n+       * True if the stream was obtained by invoking {@link #createExceptionReply()},\n+   * false otherwise.\n+   */\n+  boolean exceptionReply;\n+\n+  /**\n+   * The buffer to write into.\n+   */\n+  cdrBufOutput buffer;\n+\n+  /**\n+   * The responsible POA.\n+   */\n+  final gnuPOA poa;\n+\n+  /**\n+   * The servant delegate to obtain the handler.\n+   */\n+  gnuServantObject object;\n+\n+  /**\n+   * Used (reused) with dynamic implementation.\n+   */\n+  LocalServerRequest serverRequest;\n+\n+  /**\n+   * Create an instance of the local request.\n+   */\n+  public LocalRequest(gnuServantObject local_object, gnuPOA a_poa, byte[] an_id)\n+  {\n+    Id = an_id;\n+    poa = a_poa;\n+\n+    // Instantiate the cookie holder only if required.\n+    if (poa.servant_locator != null)\n+      {\n+        cookie = new CookieHolder();\n+      }\n+    object = local_object;\n+    prepareStream();\n+  }\n+\n+  /**\n+   * Make an invocation and return a stream from where the results can be read\n+   * and throw ApplicationException, where applicable.\n+   */\n+  org.omg.CORBA.portable.InputStream s_invoke(InvokeHandler handler)\n+    throws ApplicationException\n+  {\n+    try\n+      {\n+        poa.m_orb.currents.put(Thread.currentThread(), this);\n+\n+        org.omg.CORBA.portable.InputStream input = v_invoke(handler);\n+\n+        if (!exceptionReply)\n+          {\n+            return input;\n+          }\n+        else\n+          {\n+            input.mark(500);\n+\n+            String id = input.read_string();\n+            try\n+              {\n+                input.reset();\n+              }\n+            catch (IOException ex)\n+              {\n+                InternalError ierr = new InternalError();\n+                ierr.initCause(ex);\n+                throw ierr;\n+              }\n+            throw new ApplicationException(id, input);\n+          }\n+      }\n+    finally\n+      {\n+        poa.m_orb.currents.remove(Thread.currentThread());\n+      }\n+  }\n+\n+  /**\n+   * Make an invocation and return a stream from where the results can be read.\n+   *\n+   * @param the invoke handler (can be null, then it is obtained self\n+   * dependently).\n+   */\n+  public org.omg.CORBA.portable.InputStream v_invoke(InvokeHandler handler)\n+  {\n+    // Local request must be intercepted both by server and request\n+    // interceptors.\n+    boolean s_intercept = false;\n+    ServerRequestInterceptorOperations s_interceptor = null;\n+    gnuServerRequestInfo s_info = null;\n+\n+    boolean c_intercept = false;\n+    ClientRequestInterceptorOperations c_interceptor = null;\n+    gnuClientRequestInfo c_info = null;\n+\n+    try\n+      {\n+        if (poa.m_orb.iServer != null || poa.m_orb.iClient != null)\n+          {\n+            setORB(poa.m_orb);\n+\n+            // These two are only needed with interceptors.\n+            m_rqh = new RequestHeader();\n+            m_rqh.operation = m_operation;\n+            m_rph = new ReplyHeader();\n+\n+            m_rqh.object_key = object.Id;\n+            m_rph.request_id = m_rqh.request_id;\n+          }\n+\n+        if (poa.m_orb.iClient != null)\n+          {\n+            c_interceptor = poa.m_orb.iClient;\n+\n+            c_info = new gnuClientRequestInfo(this);\n+            c_intercept = true;\n+\n+            c_interceptor.send_request(c_info);\n+\n+            m_target = object;\n+          }\n+\n+        if (poa.m_orb.iServer != null)\n+          {\n+            s_interceptor = poa.m_orb.iServer;\n+\n+            s_info = new gnuServerRequestInfo(object, m_rqh, m_rph);\n+            s_info.m_request = this;\n+\n+            s_intercept = true;\n+\n+            s_interceptor.receive_request_service_contexts(s_info);\n+          }\n+\n+        if (handler == null)\n+          {\n+            handler = object.getHandler(operation(), cookie, false);\n+          }\n+\n+        cdrBufOutput request_part = new cdrBufOutput();\n+\n+        request_part.setOrb(orb());\n+\n+        if (m_args != null && m_args.count() > 0)\n+          {\n+            write_parameters(header, request_part);\n+\n+            if (m_parameter_buffer != null)\n+              {\n+                throw new BAD_INV_ORDER(\"Please either add parameters or \" +\n+                  \"write them into stream, but not both \" + \"at once.\"\n+                );\n+              }\n+          }\n+\n+        if (m_parameter_buffer != null)\n+          {\n+            write_parameter_buffer(header, request_part);\n+          }\n+\n+        Servant servant;\n+\n+        if (handler instanceof Servant)\n+          {\n+            servant = (Servant) handler;\n+          }\n+        else\n+          {\n+            throw new BAD_OPERATION(\"Unexpected handler type \" + handler);\n+          }\n+\n+        org.omg.CORBA.portable.InputStream input =\n+          request_part.create_input_stream();\n+\n+        // Ensure the servant (handler) has a delegate set.\n+        servantDelegate sd = null;\n+\n+        Delegate d = null;\n+\n+        try\n+          {\n+            d = servant._get_delegate();\n+          }\n+        catch (Exception ex)\n+          {\n+            // In some cases exception is thrown if the delegate is not set.\n+          }\n+        if (d instanceof servantDelegate)\n+          {\n+            // If the delegate is already set, try to reuse the existing\n+            // instance.\n+            sd = (servantDelegate) d;\n+            if (sd.object != object)\n+              {\n+                sd = new servantDelegate(servant, poa, Id);\n+              }\n+          }\n+        else\n+          {\n+            sd = new servantDelegate(servant, poa, Id);\n+          }\n+        servant._set_delegate(sd);\n+\n+        try\n+          {\n+            ORB o = orb();\n+            if (o instanceof ORB_1_4)\n+              {\n+                ((ORB_1_4) o).currents.put(Thread.currentThread(), this);\n+              }\n+\n+            try\n+              {\n+                if (s_intercept)\n+                  {\n+                    s_interceptor.receive_request(s_info);\n+                  }\n+                handler._invoke(m_operation, input, this);\n+\n+                // Handler is casted into i_handler.\n+                if ((s_intercept || c_intercept) && isExceptionReply())\n+                  {\n+                    s_info.m_reply_header.reply_status =\n+                      ReplyHeader.USER_EXCEPTION;\n+                    m_rph.reply_status = ReplyHeader.USER_EXCEPTION;\n+\n+                    // Make Any, holding the user exception.\n+                    Any a = new gnuAny();\n+                    OutputStream buf = getBuffer();\n+                    InputStream in = buf.create_input_stream();\n+                    String uex_idl = \"unknown\";\n+                    try\n+                      {\n+                        in.mark(Integer.MAX_VALUE);\n+                        uex_idl = in.read_string();\n+                        m_exception_id = uex_idl;\n+                        in.reset();\n+                      }\n+                    catch (IOException e)\n+                      {\n+                        throw new Unexpected(e);\n+                      }\n+\n+                    try\n+                      {\n+                        UserException exception =\n+                          ObjectCreator.readUserException(uex_idl, in);\n+\n+                        m_environment.exception(exception);\n+                        ObjectCreator.insertWithHelper(a, exception);\n+                      }\n+                    catch (Exception e)\n+                      {\n+                        // Failed due any reason, insert without\n+                        // helper.\n+                        a.insert_Streamable(new streamReadyHolder(\n+                            buf.create_input_stream()\n+                          )\n+                        );\n+\n+                        recordTypeCode r =\n+                          new recordTypeCode(TCKind.tk_except);\n+                        r.setId(uex_idl);\n+                        r.setName(ObjectCreator.getDefaultName(uex_idl));\n+                      }\n+\n+                    s_info.m_usr_exception = a;\n+                    c_info.m_wrapped_exception = a;\n+                    s_interceptor.send_exception(s_info);\n+                    c_interceptor.receive_exception(c_info);\n+                  }\n+                else\n+                  {\n+                    if (s_intercept)\n+                      {\n+                        s_info.m_reply_header.reply_status =\n+                          ReplyHeader.NO_EXCEPTION;\n+                        s_interceptor.send_reply(s_info);\n+                      }\n+                    if (c_intercept)\n+                      {\n+                        m_rph.reply_status = ReplyHeader.NO_EXCEPTION;\n+                        c_interceptor.receive_reply(c_info);\n+                      }\n+                  }\n+              }\n+            catch (SystemException sys_ex)\n+              {\n+                if (s_intercept)\n+                  {\n+                    s_info.m_reply_header.reply_status =\n+                      ReplyHeader.SYSTEM_EXCEPTION;\n+                    s_info.m_sys_exception = sys_ex;\n+                    s_interceptor.send_exception(s_info);\n+                  }\n+\n+                if (c_intercept)\n+                  {\n+                    m_rph.reply_status = ReplyHeader.SYSTEM_EXCEPTION;\n+\n+                    Any a = new gnuAny();\n+                    if (ObjectCreator.insertSysException(a, sys_ex))\n+                      {\n+                        c_info.m_wrapped_exception = a;\n+                      }\n+                    c_interceptor.receive_exception(c_info);\n+                  }\n+\n+                throw sys_ex;\n+              }\n+          }\n+        finally\n+          {\n+            ORB o = orb();\n+            if (o instanceof ORB_1_4)\n+              {\n+                ((ORB_1_4) o).currents.remove(Thread.currentThread());\n+              }\n+          }\n+\n+        if (poa.servant_locator != null)\n+          {\n+            poa.servant_locator.postinvoke(object.Id, poa, operation(),\n+              cookie.value, object.getServant()\n+            );\n+          }\n+        return buffer.create_input_stream();\n+      }\n+\n+    catch (ForwardRequest fex)\n+      {\n+        // May be thrown by interceptor.\n+        if (s_intercept)\n+          {\n+            Forwarding:\n+            while (true)\n+              {\n+                s_info.m_reply_header.reply_status =\n+                  ReplyHeader.LOCATION_FORWARD;\n+                s_info.m_forward_reference = fex.forward;\n+                try\n+                  {\n+                    s_interceptor.send_other(s_info);\n+                    break Forwarding;\n+                  }\n+                catch (ForwardRequest fex2)\n+                  {\n+                    s_info.m_forward_reference = fex2.forward;\n+                    fex.forward = s_info.m_forward_reference;\n+                  }\n+              }\n+          }\n+\n+        if (c_intercept)\n+          {\n+            this.m_rph.reply_status = ReplyHeader.LOCATION_FORWARD;\n+            this.m_forwarding_target = fex.forward;\n+            try\n+              {\n+                c_interceptor.receive_other(c_info);\n+              }\n+            catch (ForwardRequest fex2)\n+              {\n+                fex.forward = fex2.forward;\n+              }\n+          }\n+        throw new gnuForwardRequest(fex.forward);\n+      }\n+    catch (gnuForwardRequest fex)\n+      {\n+        // May be thrown during activation.\n+        // May be thrown during activation.\n+        if (s_intercept)\n+          {\n+            Forwarding:\n+            while (true)\n+              {\n+                s_info.m_reply_header.reply_status =\n+                  ReplyHeader.LOCATION_FORWARD;\n+                s_info.m_forward_reference = fex.forward_reference;\n+                try\n+                  {\n+                    s_interceptor.send_other(s_info);\n+                    break Forwarding;\n+                  }\n+                catch (ForwardRequest fex2)\n+                  {\n+                    s_info.m_forward_reference = fex2.forward;\n+                    fex.forward_reference = (ObjectImpl) fex2.forward;\n+                  }\n+              }\n+          }\n+\n+        if (c_intercept)\n+          {\n+            this.m_rph.reply_status = ReplyHeader.LOCATION_FORWARD;\n+            this.m_forwarding_target = fex.forward_reference;\n+            try\n+              {\n+                c_interceptor.receive_other(c_info);\n+              }\n+            catch (ForwardRequest fex2)\n+              {\n+                fex.forward_reference = (ObjectImpl) fex2.forward;\n+              }\n+          }\n+        throw fex;\n+      }\n+  }\n+\n+  /**\n+   * Make an invocation and store the result in the fields of this Request. Used\n+   * with DII only.\n+   */\n+  public void invoke()\n+  {\n+    InvokeHandler handler = object.getHandler(operation(), cookie, false);\n+\n+    if (handler instanceof dynImpHandler)\n+      {\n+        DynamicImplementation dyn = ((dynImpHandler) handler).servant;\n+        if (serverRequest == null)\n+          {\n+            serverRequest = new LocalServerRequest(this);\n+          }\n+        try\n+          {\n+            poa.m_orb.currents.put(Thread.currentThread(), this);\n+            dyn.invoke(serverRequest);\n+          }\n+        finally\n+          {\n+            poa.m_orb.currents.remove(Thread.currentThread());\n+          }\n+      }\n+    else\n+      {\n+        org.omg.CORBA.portable.InputStream input = v_invoke(handler);\n+\n+        if (!exceptionReply)\n+          {\n+            NamedValue arg;\n+\n+            // Read return value, if set.\n+            if (m_result != null)\n+              {\n+                m_result.value().read_value(input, m_result.value().type());\n+              }\n+\n+            // Read returned parameters, if set.\n+            if (m_args != null)\n+              {\n+                for (int i = 0; i < m_args.count(); i++)\n+                  {\n+                    try\n+                      {\n+                        arg = m_args.item(i);\n+\n+                        // Both ARG_INOUT and ARG_OUT have this binary flag set.\n+                        if ((arg.flags() & ARG_OUT.value) != 0)\n+                          {\n+                            arg.value().read_value(input, arg.value().type());\n+                          }\n+                      }\n+                    catch (Bounds ex)\n+                      {\n+                        Unexpected.error(ex);\n+                      }\n+                  }\n+              }\n+          }\n+        else// User exception reply\n+          {\n+            // Prepare an Any that will hold the exception.\n+            gnuAny exc = new gnuAny();\n+\n+            exc.insert_Streamable(new streamReadyHolder(input));\n+\n+            UnknownUserException unuex = new UnknownUserException(exc);\n+            m_environment.exception(unuex);\n+          }\n+      }\n+  }\n+\n+  /**\n+   * Get an output stream for providing details about the exception. Before\n+   * returning the stream, the handler automatically writes the message header\n+   * and the reply about exception header, but not the message header.\n+   *\n+   * @return the stream to write exception details into.\n+   */\n+  public OutputStream createExceptionReply()\n+  {\n+    exceptionReply = true;\n+    prepareStream();\n+    return buffer;\n+  }\n+\n+  /**\n+   * Get an output stream for writing a regular reply (not an exception).\n+   *\n+   * Before returning the stream, the handler automatically writes the regular\n+   * reply header, but not the message header.\n+   *\n+   * @return the output stream for writing a regular reply.\n+   */\n+  public OutputStream createReply()\n+  {\n+    exceptionReply = false;\n+    prepareStream();\n+    return buffer;\n+  }\n+\n+  /**\n+   * Get the buffer, normally containing the written reply. The reply includes\n+   * the reply header (or the exception header) but does not include the message\n+   * header.\n+   *\n+   * The stream buffer can also be empty if no data have been written into\n+   * streams, returned by {@link #createReply()} or\n+   * {@link #createExceptionReply()}.\n+   *\n+   * @return the CDR output stream, containing the written output.\n+   */\n+  cdrBufOutput getBuffer()\n+  {\n+    return buffer;\n+  }\n+\n+  /**\n+   * True if the stream was obtained by invoking {@link #createExceptionReply()},\n+   * false otherwise (usually no-exception reply).\n+   */\n+  boolean isExceptionReply()\n+  {\n+    return exceptionReply;\n+  }\n+\n+  /**\n+   * Compute the header offset, set the correct version number and codeset.\n+   */\n+  private void prepareStream()\n+  {\n+    buffer = new cdrBufOutput();\n+    buffer.setOrb(orb());\n+  }\n+\n+  /**\n+   * Get the parameter stream, where the invocation arguments should be written\n+   * if they are written into the stream directly.\n+   */\n+  public streamRequest getParameterStream()\n+  {\n+    m_parameter_buffer = new streamRequest();\n+    m_parameter_buffer.request = this;\n+    m_parameter_buffer.setOrb(poa.orb());\n+    return m_parameter_buffer;\n+  }\n+\n+  public byte[] get_object_id() throws NoContext\n+  {\n+    return Id;\n+  }\n+\n+  public POA get_POA() throws NoContext\n+  {\n+    return poa;\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "6d0b39650c16bf387c4291d3ca6250c19a0c35c8", "filename": "libjava/classpath/gnu/CORBA/Poa/LocalServerRequest.java", "status": "added", "additions": 199, "deletions": 0, "changes": 199, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FLocalServerRequest.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FLocalServerRequest.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FLocalServerRequest.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,199 @@\n+/* LocalServerRequest.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Poa;\n+\n+import gnu.CORBA.gnuNamedValue;\n+\n+import org.omg.CORBA.ARG_INOUT;\n+import org.omg.CORBA.ARG_OUT;\n+import org.omg.CORBA.Any;\n+import org.omg.CORBA.BAD_PARAM;\n+import org.omg.CORBA.Bounds;\n+import org.omg.CORBA.Context;\n+import org.omg.CORBA.NVList;\n+import org.omg.CORBA.NamedValue;\n+import org.omg.CORBA.ServerRequest;\n+import org.omg.CORBA.UnknownUserException;\n+\n+/**\n+ * Used to make local invocations via LocalRequest.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class LocalServerRequest\n+  extends ServerRequest\n+{\n+  /**\n+   * The local request, on the base of that this instance is created.\n+   */\n+  final LocalRequest request;\n+\n+  /**\n+   * Create a new instance.\n+   */\n+  public LocalServerRequest(LocalRequest _request)\n+  {\n+    request = _request;\n+  }\n+\n+  /**\n+   * Get the argument list that can be modified.\n+   */\n+  public void params(NVList args)\n+  {\n+    arguments(args);\n+  }\n+\n+  /**\n+   * Get contexts.\n+   */\n+  public Context ctx()\n+  {\n+    return request.ctx();\n+  }\n+\n+  /**\n+   * Get the operatin being performed.\n+   */\n+  public String operation()\n+  {\n+    return request.operation();\n+  }\n+\n+  /**\n+   * Get the argument list that can be modified.\n+   * The direction depends on the size of the passed list.\n+   * The empty list is filled with the request arguments.\n+   * The non-empty list is used to set the request arguments.\n+   */\n+  public void arguments(NVList args)\n+  {\n+    NVList l = request.arguments();\n+    NamedValue a;\n+\n+    try\n+      {\n+        if (args.count() == 0)\n+          {\n+            // Transfer to the passed parameter.\n+            for (int i = 0; i < l.count(); i++)\n+              {\n+                a = l.item(i);\n+                args.add_value(a.name(), a.value(), a.flags());\n+              }\n+          }\n+        else\n+          {\n+            // Transfer from the passed parameter.\n+            if (l.count() != args.count())\n+              throw new BAD_PARAM(\"Argument number mismatch, current \" +\n+                                  l.count() + \", passed \" + args.count()\n+                                 );\n+            try\n+              {\n+                for (int i = 0; i < l.count(); i++)\n+                  {\n+                    a = l.item(i);\n+                    if (a.flags() == ARG_INOUT.value ||\n+                        a.flags() == ARG_OUT.value\n+                       )\n+                      {\n+                        ((gnuNamedValue) a).setValue(args.item(i).value());\n+                      }\n+                  }\n+              }\n+            catch (ClassCastException cex)\n+              {\n+                InternalError ierr = new InternalError();\n+                ierr.initCause(cex);\n+                throw ierr;\n+              }\n+          }\n+      }\n+    catch (Bounds ex)\n+      {\n+        InternalError ierr = new InternalError();\n+        ierr.initCause(ex);\n+        throw ierr;\n+      }\n+  }\n+\n+  /**\n+   * Set the result.\n+   */\n+  public void set_result(Any result)\n+  {\n+    gnuNamedValue g = new gnuNamedValue();\n+    g.setValue(result);\n+    g.setFlags(ARG_OUT.value);\n+    request.set_result(g);\n+  }\n+\n+  /**\n+   * Get the name of the method being called.\n+   */\n+  public String op_name()\n+  {\n+    return request.operation();\n+  }\n+\n+  /**\n+   * Set the exception that has been thrown.\n+   */\n+  public void set_exception(Any exc)\n+  {\n+    request.env().exception(new UnknownUserException(exc));\n+  }\n+\n+  /**\n+   * Set the result.\n+   */\n+  public void result(Any r)\n+  {\n+    set_result(r);\n+  }\n+\n+  /**\n+   * Set the exception.\n+   */\n+  public void except(Any exc)\n+  {\n+    set_exception(exc);\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "d95bf2be8f607936732feeecd07f0cf163575f0b", "filename": "libjava/classpath/gnu/CORBA/Poa/ORB_1_4.java", "status": "added", "additions": 256, "deletions": 0, "changes": 256, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FORB_1_4.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FORB_1_4.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FORB_1_4.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,256 @@\n+/* ORB_1_4.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Poa;\n+\n+import gnu.CORBA.Functional_ORB;\n+import gnu.CORBA.IOR;\n+import gnu.CORBA.Connected_objects.cObject;\n+import gnu.CORBA.DynAn.gnuDynAnyFactory;\n+import gnu.CORBA.Interceptor.ClientRequestInterceptors;\n+import gnu.CORBA.Interceptor.IORInterceptors;\n+import gnu.CORBA.Interceptor.Registrator;\n+import gnu.CORBA.Interceptor.ServerRequestInterceptors;\n+import gnu.CORBA.Interceptor.gnuIcCurrent;\n+import gnu.CORBA.Interceptor.gnuIorInfo;\n+\n+import org.omg.CORBA.Any;\n+import org.omg.CORBA.BAD_OPERATION;\n+import org.omg.CORBA.BAD_PARAM;\n+import org.omg.CORBA.OBJECT_NOT_EXIST;\n+import org.omg.CORBA.Policy;\n+import org.omg.CORBA.PolicyError;\n+import org.omg.CORBA.portable.ObjectImpl;\n+import org.omg.PortableInterceptor.PolicyFactory;\n+import org.omg.PortableServer.POA;\n+import org.omg.PortableServer.POAPackage.InvalidPolicy;\n+\n+import java.applet.Applet;\n+import java.util.Properties;\n+\n+/**\n+ * The ORB, supporting POAs that are the feature of jdk 1.4.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class ORB_1_4\n+  extends Functional_ORB\n+{\n+  /**\n+   * The root POA.\n+   */\n+  public final gnuPOA rootPOA;\n+\n+  /**\n+   * Maps the active threads to the invocation data (\"POA Current's\").\n+   */\n+  public gnuPoaCurrent currents = new gnuPoaCurrent();\n+\n+  /**\n+   * Maps the active threads to the interceptor data (\"Interceptor Current's\").\n+   */\n+  public gnuIcCurrent ic_current = new gnuIcCurrent(this);\n+\n+  /**\n+   * Creates dynamic anys.\n+   */\n+  public gnuDynAnyFactory factory = new gnuDynAnyFactory(this);\n+\n+  /**\n+   * Calls the parent constructor and additionally puts the \"RootPOA\",\n+   * \"RootPOAManager\", \"POACurrent\" and \"DynAnyFactory\" into initial references.\n+   */\n+  public ORB_1_4()\n+  {\n+    super();\n+    try\n+      {\n+        rootPOA = new gnuPOA(null, \"RootPOA\", null, policySets.rootPoa(), this);\n+      }\n+    catch (InvalidPolicy ex)\n+      {\n+        // Invalid default policy set.\n+        InternalError ierr = new InternalError();\n+        ierr.initCause(ex);\n+        throw ierr;\n+      }\n+    initial_references.put(\"RootPOA\", rootPOA);\n+    initial_references.put(\"RootPOAManager\", rootPOA.the_POAManager());\n+    initial_references.put(\"POACurrent\", currents);\n+    initial_references.put(\"DynAnyFactory\", factory);\n+    initial_references.put(\"PICurrent\", ic_current);\n+  }\n+\n+  /**\n+   * If the super method detects that the object is not connected to this ORB,\n+   * try to find and activate the object.\n+   */\n+  public String object_to_string(org.omg.CORBA.Object forObject)\n+  {\n+    try\n+      {\n+        return super.object_to_string(forObject);\n+      }\n+    catch (Exception ex)\n+      {\n+        try\n+          {\n+            activeObjectMap.Obj exists = rootPOA.findObject(forObject);\n+            if (exists == null)\n+              throw new OBJECT_NOT_EXIST(forObject == null ? \"null\"\n+                : forObject.toString());\n+            else if (exists.poa instanceof gnuPOA)\n+              ((gnuPOA) exists.poa).connect_to_orb(exists.key, forObject);\n+            else\n+              exists.poa.create_reference_with_id(exists.key,\n+                ((ObjectImpl) exists.object)._ids()[0]);\n+          }\n+        catch (Exception bex)\n+          {\n+            BAD_PARAM bad = new BAD_PARAM(\"Unable to activate \" + forObject);\n+            bad.initCause(bex);\n+            throw bad;\n+          }\n+\n+        return super.object_to_string(forObject);\n+      }\n+  }\n+\n+  /**\n+   * Destroy all poas and then call the superclass method.\n+   */\n+  public void destroy()\n+  {\n+    // This will propagate through the whole POA tree.\n+    rootPOA.destroy(true, false);\n+\n+    super.destroy();\n+  }\n+\n+  /**\n+   * Do interceptor registration.\n+   *\n+   * @param properties the properties, between those names the agreed prefix\n+   * \"org.omg.PortableInterceptor.ORBInitializerClass.\" is searched.\n+   *\n+   * @param args the string array, passed to the ORB.init\n+   */\n+  protected void registerInterceptors(Properties properties, String[] args)\n+  {\n+    Registrator registrator = new Registrator(this, properties, args);\n+\n+    policyFactories = registrator.m_policyFactories;\n+\n+    registrator.pre_init();\n+    initial_references.putAll(registrator.getRegisteredReferences());\n+    registrator.post_init();\n+\n+    if (registrator.hasIorInterceptors())\n+      iIor = new IORInterceptors(registrator);\n+\n+    if (registrator.hasServerRequestInterceptors())\n+      iServer = new ServerRequestInterceptors(registrator);\n+\n+    if (registrator.hasClientRequestInterceptors())\n+      iClient = new ClientRequestInterceptors(registrator);\n+\n+    policyFactories = registrator.m_policyFactories;\n+  }\n+\n+  /**\n+   * Create IOR and allow registered interceptors to add additional components.\n+   */\n+  protected IOR createIOR(cObject ref)\n+    throws BAD_OPERATION\n+  {\n+    IOR ior = super.createIOR(ref);\n+    if (iIor != null)\n+      {\n+        activeObjectMap.Obj obj = rootPOA.findIorKey(ior.key);\n+\n+        POA poa;\n+\n+        // Null means that the object was connected to the ORB directly.\n+        if (obj == null)\n+          poa = rootPOA;\n+        else\n+          poa = obj.poa;\n+\n+        gnuIorInfo info = new gnuIorInfo(this, poa, ior);\n+\n+        // This may modify the ior.\n+        iIor.establish_components(info);\n+      }\n+    return ior;\n+  }\n+\n+  /**\n+   * Create policy using the previously registered factory.\n+   */\n+  public Policy create_policy(int type, Any value)\n+    throws PolicyError\n+  {\n+    Integer policy = new Integer(type);\n+\n+    PolicyFactory forge = (PolicyFactory) policyFactories.get(policy);\n+    if (forge == null)\n+      throw new PolicyError(\"No factory registered for policy \" + type,\n+        (short) type);\n+    else\n+      return forge.create_policy(type, value);\n+  }\n+\n+  /**\n+   * Set the parameters and then register interceptors.\n+   */\n+  protected void set_parameters(Applet app, Properties props)\n+  {\n+    super.set_parameters(app, props);\n+    registerInterceptors(props, new String[0]);\n+  }\n+\n+  /**\n+   * Set the parameters and then register interceptors.\n+   */\n+  protected void set_parameters(String[] para, Properties props)\n+  {\n+    super.set_parameters(para, props);\n+    registerInterceptors(props, para);\n+  }\n+\n+}\n\\ No newline at end of file"}, {"sha": "1354ba9c5e1eae626427b714b53ede42564a6570", "filename": "libjava/classpath/gnu/CORBA/Poa/activeObjectMap.java", "status": "added", "additions": 394, "deletions": 0, "changes": 394, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FactiveObjectMap.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FactiveObjectMap.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FactiveObjectMap.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,394 @@\n+/* activeObjectMap.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Poa;\n+\n+import gnu.CORBA.ByteArrayComparator;\n+\n+import org.omg.PortableServer.POA;\n+import org.omg.PortableServer.Servant;\n+\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+\n+/**\n+ * Implements the conception of the Active Object Map.\n+ * If the POA supports the RETAIN policy, it maintains an Active\n+ * Object Map, that associates Object Ids with active servants.\n+ * Each association constitutes an active object. We use a single map\n+ * for all POAs on the given orb.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class activeObjectMap\n+{\n+  /**\n+   * The reference data about the object, placed on the AOM.\n+   */\n+  public class Obj\n+  {\n+    /**\n+     * Create an initialised instance.\n+     */\n+    Obj(org.omg.CORBA.Object _object, byte[] _key, Servant _servant, POA _poa)\n+    {\n+      object = _object;\n+      key = _key;\n+      servant = _servant;\n+      poa = _poa;\n+    }\n+\n+    /**\n+     * The object.\n+     */\n+    public final org.omg.CORBA.Object object;\n+\n+    /**\n+     * The servant, serving the given object.\n+     */\n+    public Servant servant;\n+\n+    /**\n+     * The local servant that once served this object.\n+     * This field is used by {@link ForwardedServant} when it discovers that\n+     * the forwarding chaing returns back to the original location.\n+     * It should not be used anywhere else.\n+     */\n+    Servant primary_servant;\n+\n+    /**\n+     * The POA, where the object is connected.\n+     */\n+    public final POA poa;\n+\n+    /**\n+     * The object key.\n+     */\n+    public final byte[] key;\n+\n+    /**\n+     * If true, this entry is deactivated.\n+     */\n+    public boolean deactivated;\n+\n+    /**\n+     * Set the servant value, preserving any non null\n+     * value as the primary servant.\n+     */\n+    public void setServant(Servant s)\n+    {\n+      if (primary_servant == null)\n+        primary_servant = s;\n+      servant = s;\n+    }\n+\n+    /**\n+     * Get the servant.\n+     */\n+    public Servant getServant()\n+    {\n+      return servant;\n+    }\n+\n+    /**\n+     * Get the deactivation state.\n+     */\n+    public boolean isDeactiveted()\n+    {\n+      return deactivated;\n+    }\n+\n+    /**\n+     * Set the deactivation state.\n+     */\n+    public void setDeactivated(boolean state)\n+    {\n+      deactivated = state;\n+    }\n+\n+    public boolean equals(java.lang.Object other)\n+    {\n+      if (other instanceof Obj)\n+        {\n+          Obj o = (Obj) other;\n+          return o.object.equals(object);\n+        }\n+      else\n+        return false;\n+    }\n+  }\n+\n+  /**\n+   * The free number to give for the next instance.\n+   * This field is incremented each time the\n+   * new collection of the connected objects is created.\n+   * Each collection has its own unique instance number.\n+   */\n+  private static long free_id;\n+\n+  /**\n+   * The map of the all connected objects, maps the object key to the\n+   * object.\n+   */\n+  Map objects = new TreeMap(new ByteArrayComparator());\n+\n+  /**\n+   * Get the record of the stored object. If the object is mapped\n+   * several times under the different keys, one of the mappings\n+   * is used.\n+   *\n+   * @param object the stored object\n+   *\n+   * @return the record about the stored object, null if\n+   * this object is not stored here.\n+   */\n+  public Obj findObject(org.omg.CORBA.Object stored_object)\n+  {\n+    if (stored_object == null)\n+      return null;\n+\n+    Map.Entry item;\n+    Iterator iter = objects.entrySet().iterator();\n+    Obj ref;\n+\n+    while (iter.hasNext())\n+      {\n+        item = (Map.Entry) iter.next();\n+        ref = (Obj) item.getValue();\n+        if (stored_object.equals(ref.object))\n+          return ref;\n+      }\n+    return null;\n+  }\n+\n+  /**\n+   * Find the reference info for the given servant.\n+   * If the servant is mapped to several objects, this\n+   * returns the first found occurence.\n+   *\n+   * @param servant a servant to find.\n+   *\n+   * @return the servant/object/POA binding or null if no such found.\n+   */\n+  public Obj findServant(Servant servant)\n+  {\n+    if (servant == null)\n+      return null;\n+\n+    Map.Entry item;\n+    Iterator iter = objects.entrySet().iterator();\n+    Obj ref;\n+\n+    while (iter.hasNext())\n+      {\n+        item = (Map.Entry) iter.next();\n+        ref = (Obj) item.getValue();\n+        if (servant.equals(ref.servant))\n+          return ref;\n+      }\n+    return null;\n+  }\n+\n+  /**\n+   * Find the reference info for the given servant.\n+   * If the servant is mapped to several objects, this\n+   * returns the first found occurence.\n+   *\n+   * @param servant a servant to find.\n+   * @param speficies if to search for the inactive (true) or active\n+   * (false) servant. A servant with unmatching activity is ignored\n+   * by this method.\n+   *\n+   * @return the servant/object/POA binding or null if no such found.\n+   */\n+  public Obj findServant(Servant servant, boolean inactive)\n+  {\n+    if (servant == null)\n+      return null;\n+\n+    Map.Entry item;\n+    Iterator iter = objects.entrySet().iterator();\n+    Obj ref;\n+\n+    while (iter.hasNext())\n+      {\n+        item = (Map.Entry) iter.next();\n+        ref = (Obj) item.getValue();\n+        if (ref.deactivated == inactive)\n+          if (ref.servant != null)\n+            if (servant.equals(ref.servant))\n+              return ref;\n+      }\n+    return null;\n+  }\n+\n+  /**\n+   * Add the new object to the repository. The object key is\n+   * generated automatically.\n+   *\n+   * @param object the object to add.\n+   * @param servant a servant, serving the given object.\n+   * @param poa the poa, where the object is connected.\n+   *\n+   * @return the newly created object record.\n+   */\n+  public Obj add(org.omg.CORBA.Object object, Servant servant, POA poa)\n+  {\n+    return add(generateObjectKey(object), object, servant, poa);\n+  }\n+\n+  /**\n+   * Add the new object to the repository.\n+   *\n+   * @param key the object key.\n+   * @param object the object to add.\n+   * @param servant a servant, serving the given object.\n+   * @param poa the POA, where the object is connected.\n+   */\n+  public Obj add(byte[] key, org.omg.CORBA.Object object, Servant servant,\n+                 POA poa\n+                )\n+  {\n+    Obj rec = new Obj(object, key, servant, poa);\n+    objects.put(key, rec);\n+    return rec;\n+  }\n+\n+  /**\n+   * Add the new object to the repository.\n+   *\n+   * @param delegate the delegate, providing data about the servant, key, POA\n+   * and object.\n+   * @param port the port that this object would take.\n+   */\n+  public Obj add(servantDelegate delegate)\n+  {\n+    Obj rec =\n+      new Obj(delegate.object, delegate.servant_id, delegate.servant,\n+              delegate.poa\n+             );\n+    objects.put(delegate.servant_id, rec);\n+    return rec;\n+  }\n+\n+  /**\n+   * Put back the definition structure that has probably been removed earlier.\n+   */\n+  public void put(Obj obj)\n+  {\n+    objects.put(obj.key, obj);\n+  }\n+\n+  /**\n+   * Get the stored object.\n+   *\n+   * @param key the key (in the byte array form).\n+   *\n+   * @return the matching object, null if none is matching.\n+   */\n+  public Obj get(byte[] key)\n+  {\n+    return (Obj) objects.get(key);\n+  }\n+\n+  /**\n+   * Get the map key set.\n+   */\n+  public Set keySet()\n+  {\n+    return objects.keySet();\n+  }\n+\n+  /**\n+   * Remove the given object, indiciating it by the key.\n+   *\n+   * @param object the object to remove.\n+   */\n+  public void remove(byte[] key)\n+  {\n+    objects.remove(key);\n+  }\n+\n+  /**\n+   * Generate the object key, unique in the currently\n+   * running java virtual machine. The passed object\n+   * parameter is currently not in use.\n+   *\n+   * @return the generated key.\n+   */\n+  protected byte[] generateObjectKey(org.omg.CORBA.Object object)\n+  {\n+    byte[] key;\n+\n+    // The repetetive keys cannot be generated, but theoretically\n+    // the same keys can be passed when calling add(byte[]...).\n+    // Hence we check if the key is not already in the map and,\n+    // if it is, use the subsequent value.\n+    do\n+      {\n+        key = getFreeId();\n+      }\n+    while (objects.containsKey(key));\n+    return key;\n+  }\n+\n+  /**\n+   * Get the next free 8 byte id, surely unique between calls of this\n+   * method for the currently running virtual machine.\n+   */\n+  public static synchronized byte[] getFreeId()\n+  {\n+    byte[] r = new byte[ 8 ];\n+\n+    // Start from the faster-changing.\n+    r [ 0 ] = ((byte) (0xff & free_id));\n+    r [ 1 ] = ((byte) (0xff & (free_id >> 8)));\n+    r [ 2 ] = ((byte) (0xff & (free_id >> 16)));\n+    r [ 3 ] = ((byte) (0xff & (free_id >> 24)));\n+    r [ 4 ] = ((byte) (0xff & (free_id >> 32)));\n+    r [ 5 ] = ((byte) (0xff & (free_id >> 40)));\n+    r [ 6 ] = ((byte) (0xff & (free_id >> 48)));\n+    r [ 7 ] = ((byte) (0xff & (free_id >> 56)));\n+\n+    free_id++;\n+\n+    return r;\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "1cc3e131cd7844b1dc9c8f51cce618c9bc21e35c", "filename": "libjava/classpath/gnu/CORBA/Poa/dynImpHandler.java", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FdynImpHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FdynImpHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FdynImpHandler.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,85 @@\n+/* dynImpHandler.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Poa;\n+\n+import org.omg.CORBA.BAD_OPERATION;\n+import org.omg.CORBA.portable.InputStream;\n+import org.omg.CORBA.portable.InvokeHandler;\n+import org.omg.CORBA.portable.OutputStream;\n+import org.omg.CORBA.portable.ResponseHandler;\n+import org.omg.PortableServer.DynamicImplementation;\n+\n+/**\n+ * The InvokeHandler, indicating, that the target is a dynamic\n+ * implementation rather than an invoke handler. These two\n+ * types are not substitutable, but in some methods have possibility\n+ * just to handle them differently.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class dynImpHandler\n+  implements InvokeHandler\n+{\n+  /**\n+   * The servant that is a dynamic implementation rather than\n+   * invoke handler.\n+   */\n+  public final DynamicImplementation servant;\n+\n+  /**\n+   * Create a new instance, wrapping some dyn implementation.\n+   * @param _servant\n+   */\n+  public dynImpHandler(DynamicImplementation _servant)\n+  {\n+    servant = _servant;\n+  }\n+\n+  /**\n+   * We cannot invoke properly without having parameter info.\n+   *\n+   * @throws BAD_OPERATION, always.\n+   */\n+  public OutputStream _invoke(String method, InputStream input,\n+                              ResponseHandler handler\n+                             )\n+  {\n+    throw new BAD_OPERATION(servant + \" is not an InvokeHandler.\");\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "3019a2ae96632a8ca10eaca7ca4c3ece0283c75a", "filename": "libjava/classpath/gnu/CORBA/Poa/gnuAdapterActivator.java", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuAdapterActivator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuAdapterActivator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuAdapterActivator.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,81 @@\n+/* gnuAdapterActivator.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Poa;\n+\n+import org.omg.CORBA.LocalObject;\n+import org.omg.PortableServer.AdapterActivator;\n+import org.omg.PortableServer.POA;\n+\n+/**\n+ * Defines a simple adapter activator.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class gnuAdapterActivator\n+  extends LocalObject\n+  implements AdapterActivator\n+{\n+  /**\n+   * Create a new POA on the parent, using the parent policy set\n+   * from the suitable parent of grandparend and with independent\n+   * POA manager (passing null to the createPOA).\n+   *\n+   * @param parent a parent. Either this parent or one of its\n+   * grandparents must be gnuAbstractPOA, able to provide a\n+   * policy set.\n+   *\n+   * @param child_name the name of the child being created.\n+   *\n+   * @return true on success or false if no gnuAbstractPOA\n+   * found till the root poa.\n+   */\n+  public boolean unknown_adapter(POA parent, String child_name)\n+  {\n+    try\n+      {\n+        POA n = parent.create_POA(child_name, null, policySets.rootPoa());\n+        n.the_POAManager().activate();\n+      }\n+    catch (Exception ex)\n+      {\n+        return false;\n+      }\n+    return true;\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "02fc42470b3bf569edf73d3d68cc12402ff94eef", "filename": "libjava/classpath/gnu/CORBA/Poa/gnuForwardRequest.java", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuForwardRequest.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuForwardRequest.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuForwardRequest.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,90 @@\n+/* gnuForwardRequest.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Poa;\n+\n+import gnu.CORBA.GIOP.ReplyHeader;\n+\n+import org.omg.CORBA.BAD_PARAM;\n+import org.omg.CORBA.portable.ObjectImpl;\n+\n+/**\n+ * The class, indicating that the request should be forwarded to another\n+ * target. We cannot use ForwardRequest because the exception is throws\n+ * from methods that does not declare throwing it. Hence must be\n+ * RuntimeException.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class gnuForwardRequest\n+  extends RuntimeException\n+{\n+  /**\n+   * Use serialVersionUID (v1.4) for interoperability.\n+   */\n+  private static final long serialVersionUID = -1L;\n+\n+  /**\n+   * The object reference, indicating the new location of the invocation target.\n+   */\n+  public ObjectImpl forward_reference;\n+\n+  /**\n+   * This information shows if we use LOCATION_FORWARD or\n+   * LOCATION_FORWARD_PERM in request. By defalult, LOCATION_FORWARD\n+   * is always used. To use LOCATION_FORWARD_PERM, this exception should\n+   * be thrown from the servant manager instead of ForwardRequest,\n+   * with this field set to  ReplyHeader.LOCATION_FORWARD_PERM.\n+   */\n+  public byte forwarding_code = ReplyHeader.LOCATION_FORWARD;\n+\n+  /**\n+   * Create the ForwardRequest with explaining message and\n+   * initialising the object reference to the given value.\n+   *\n+   * @param why a string, explaining, why this exception has been thrown.\n+   * @param a_forward_reference a value for forward_reference.\n+   */\n+  public gnuForwardRequest(org.omg.CORBA.Object a_forward_reference)\n+  {\n+    if (a_forward_reference instanceof ObjectImpl)\n+      this.forward_reference = (ObjectImpl) a_forward_reference;\n+    else\n+      throw new BAD_PARAM(\"ObjectImpl expected\");\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "a404486ce70dcf5665412efc69b480c74a9f6f42", "filename": "libjava/classpath/gnu/CORBA/Poa/gnuIdAssignmentPolicy.java", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuIdAssignmentPolicy.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuIdAssignmentPolicy.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuIdAssignmentPolicy.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,80 @@\n+/* gnuIdAssignmentPolicy.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Poa;\n+\n+import gnu.CORBA._PolicyImplBase;\n+\n+import org.omg.PortableServer.ID_ASSIGNMENT_POLICY_ID;\n+import org.omg.PortableServer.IdAssignmentPolicy;\n+import org.omg.PortableServer.IdAssignmentPolicyValue;\n+\n+/**\n+ * Implementation of the id assignment policy.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class gnuIdAssignmentPolicy\n+  extends _PolicyImplBase\n+  implements IdAssignmentPolicy, vPolicy\n+{\n+  /**\n+   * Use serialVersionUID for interoperability.\n+   */\n+  private static final long serialVersionUID = 1L;\n+\n+  /**\n+   * Create the policy.\n+   *\n+   * @param v a value for the policy.\n+   */\n+  public gnuIdAssignmentPolicy(IdAssignmentPolicyValue v)\n+  {\n+    super(ID_ASSIGNMENT_POLICY_ID.value, v, v.value(),\n+          \"IDL:org.omg/PortableServer/IdAssignmentPolicy:1.0\"\n+         );\n+  }\n+\n+  /**\n+   * Get the value for the policy that was passed in a constructor.\n+   */\n+  public IdAssignmentPolicyValue value()\n+  {\n+    return (IdAssignmentPolicyValue) getValue();\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "2abd1f4845fbfc6c8e2774e077aa192854124c68", "filename": "libjava/classpath/gnu/CORBA/Poa/gnuIdUniquenessPolicy.java", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuIdUniquenessPolicy.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuIdUniquenessPolicy.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuIdUniquenessPolicy.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,80 @@\n+/* gnuIdUniquenessPolicy.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Poa;\n+\n+import gnu.CORBA._PolicyImplBase;\n+\n+import org.omg.PortableServer.ID_UNIQUENESS_POLICY_ID;\n+import org.omg.PortableServer.IdUniquenessPolicy;\n+import org.omg.PortableServer.IdUniquenessPolicyValue;\n+\n+/**\n+ * Implementation of the id uniqueness policy.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class gnuIdUniquenessPolicy\n+  extends _PolicyImplBase\n+  implements IdUniquenessPolicy, vPolicy\n+{\n+  /**\n+   * Use serialVersionUID for interoperability.\n+   */\n+  private static final long serialVersionUID = 1L;\n+\n+  /**\n+   * Create the policy.\n+   *\n+   * @param v a value for the policy.\n+   */\n+  public gnuIdUniquenessPolicy(IdUniquenessPolicyValue v)\n+  {\n+    super(ID_UNIQUENESS_POLICY_ID.value, v, v.value(),\n+          \"IDL:org.omg/PortableServer/IdUniquenessPolicy:1.0\"\n+         );\n+  }\n+\n+  /**\n+   * Get the value for the policy that was passed in a constructor.\n+   */\n+  public IdUniquenessPolicyValue value()\n+  {\n+    return (IdUniquenessPolicyValue) getValue();\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "1e539a2c4e0876fd8c3ae857a9c14f476eb31d0e", "filename": "libjava/classpath/gnu/CORBA/Poa/gnuImplicitActivationPolicy.java", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuImplicitActivationPolicy.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuImplicitActivationPolicy.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuImplicitActivationPolicy.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,80 @@\n+/* gnuImplicitActivationPolicy.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Poa;\n+\n+import gnu.CORBA._PolicyImplBase;\n+\n+import org.omg.PortableServer.IMPLICIT_ACTIVATION_POLICY_ID;\n+import org.omg.PortableServer.ImplicitActivationPolicy;\n+import org.omg.PortableServer.ImplicitActivationPolicyValue;\n+\n+/**\n+ * Implementation of the implicit activation policy.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class gnuImplicitActivationPolicy\n+  extends _PolicyImplBase\n+  implements ImplicitActivationPolicy, vPolicy\n+{\n+  /**\n+   * Use serialVersionUID for interoperability.\n+   */\n+  private static final long serialVersionUID = 1L;\n+\n+  /**\n+   * Create the policy.\n+   *\n+   * @param v a value for the policy.\n+   */\n+  public gnuImplicitActivationPolicy(ImplicitActivationPolicyValue v)\n+  {\n+    super(IMPLICIT_ACTIVATION_POLICY_ID.value, v, v.value(),\n+          \"IDL:org.omg/PortableServer/ImplicitActivationPolicy:1.0\"\n+         );\n+  }\n+\n+  /**\n+   * Get the value for the policy that was passed in a constructor.\n+   */\n+  public ImplicitActivationPolicyValue value()\n+  {\n+    return (ImplicitActivationPolicyValue) getValue();\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "97b3f2d7a9b94b0e49df7ce583fdebeb7796edc2", "filename": "libjava/classpath/gnu/CORBA/Poa/gnuLifespanPolicy.java", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuLifespanPolicy.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuLifespanPolicy.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuLifespanPolicy.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,80 @@\n+/* gnuLifespanPolicy.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Poa;\n+\n+import gnu.CORBA._PolicyImplBase;\n+\n+import org.omg.PortableServer.LIFESPAN_POLICY_ID;\n+import org.omg.PortableServer.LifespanPolicy;\n+import org.omg.PortableServer.LifespanPolicyValue;\n+\n+/**\n+ * The implementation of the life span policy.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class gnuLifespanPolicy\n+  extends _PolicyImplBase\n+  implements LifespanPolicy, vPolicy\n+{\n+  /**\n+   * Use serialVersionUID for interoperability.\n+   */\n+  private static final long serialVersionUID = 1L;\n+\n+  /**\n+   * Create the policy.\n+   *\n+   * @param v a value for the policy.\n+   */\n+  public gnuLifespanPolicy(LifespanPolicyValue v)\n+  {\n+    super(LIFESPAN_POLICY_ID.value, v, v.value(),\n+          \"IDL:org.omg/PortableServer/LifespanPolicy:1.0\"\n+         );\n+  }\n+\n+  /**\n+   * Get the value for the policy that was passed in a constructor.\n+   */\n+  public LifespanPolicyValue value()\n+  {\n+    return (LifespanPolicyValue) getValue();\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "1d9e838532a67f2bfd248733023a204ea985adfd", "filename": "libjava/classpath/gnu/CORBA/Poa/gnuPOA.java", "status": "added", "additions": 1615, "deletions": 0, "changes": 1615, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuPOA.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuPOA.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuPOA.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,1615 @@\n+/* gnuAbstractPOA.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Poa;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+\n+import org.omg.CORBA.BAD_INV_ORDER;\n+import org.omg.CORBA.BAD_PARAM;\n+import org.omg.CORBA.CompletionStatus;\n+import org.omg.CORBA.LocalObject;\n+import org.omg.CORBA.NO_IMPLEMENT;\n+import org.omg.CORBA.OBJ_ADAPTER;\n+import org.omg.CORBA.ORB;\n+import org.omg.CORBA.Policy;\n+import org.omg.CORBA.SetOverrideType;\n+import org.omg.CORBA.TRANSIENT;\n+import org.omg.CORBA.portable.ObjectImpl;\n+import org.omg.PortableServer.AdapterActivator;\n+import org.omg.PortableServer.ForwardRequest;\n+import org.omg.PortableServer.IdAssignmentPolicy;\n+import org.omg.PortableServer.IdAssignmentPolicyValue;\n+import org.omg.PortableServer.IdUniquenessPolicy;\n+import org.omg.PortableServer.IdUniquenessPolicyValue;\n+import org.omg.PortableServer.ImplicitActivationPolicy;\n+import org.omg.PortableServer.ImplicitActivationPolicyValue;\n+import org.omg.PortableServer.LifespanPolicy;\n+import org.omg.PortableServer.LifespanPolicyValue;\n+import org.omg.PortableServer.POA;\n+import org.omg.PortableServer.POAManager;\n+import org.omg.PortableServer.RequestProcessingPolicy;\n+import org.omg.PortableServer.RequestProcessingPolicyValue;\n+import org.omg.PortableServer.SERVANT_RETENTION_POLICY_ID;\n+import org.omg.PortableServer.Servant;\n+import org.omg.PortableServer.ServantActivator;\n+import org.omg.PortableServer.ServantLocator;\n+import org.omg.PortableServer.ServantManager;\n+import org.omg.PortableServer.ServantRetentionPolicy;\n+import org.omg.PortableServer.ServantRetentionPolicyValue;\n+import org.omg.PortableServer.ThreadPolicy;\n+import org.omg.PortableServer.ThreadPolicyValue;\n+import org.omg.PortableServer.POAManagerPackage.State;\n+import org.omg.PortableServer.POAPackage.AdapterAlreadyExists;\n+import org.omg.PortableServer.POAPackage.AdapterNonExistent;\n+import org.omg.PortableServer.POAPackage.InvalidPolicy;\n+import org.omg.PortableServer.POAPackage.NoServant;\n+import org.omg.PortableServer.POAPackage.ObjectAlreadyActive;\n+import org.omg.PortableServer.POAPackage.ObjectNotActive;\n+import org.omg.PortableServer.POAPackage.ServantAlreadyActive;\n+import org.omg.PortableServer.POAPackage.ServantNotActive;\n+import org.omg.PortableServer.POAPackage.WrongAdapter;\n+import org.omg.PortableServer.POAPackage.WrongPolicy;\n+import gnu.CORBA.CDR.cdrBufInput;\n+import gnu.CORBA.CDR.cdrBufOutput;\n+\n+/**\n+ * Our POA implementation.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class gnuPOA\n+  extends LocalObject\n+  implements POA\n+{\n+  /**\n+   * The active object map, mapping between object keys, objects and servants.\n+   */\n+  public final activeObjectMap aom = new activeObjectMap();\n+\n+  /**\n+   * The children of this POA.\n+   */\n+  final ArrayList children = new ArrayList();\n+\n+  /**\n+   * The name of this POA.\n+   */\n+  final String name;\n+\n+  /**\n+   * The parent of this POA (null for the root POA).\n+   */\n+  final POA parent;\n+\n+  /**\n+   * The ior key signature, indicating, that the ior key is encoded using\n+   * internal agreements of this implementation (0x'free').\n+   */\n+  static final int SIGNATURE = 0x66726565;\n+\n+  /**\n+   * The adapter activator for this POA, null if no activator is set.\n+   */\n+  AdapterActivator m_activator;\n+\n+  /**\n+   * The POA manager for this POA.\n+   */\n+  POAManager m_manager;\n+\n+  /**\n+   * The servant manager (servant activator) for this POA.\n+   */\n+  ServantActivator servant_activator;\n+\n+  /**\n+   * The servant manager (servant locator) for this POA.\n+   */\n+  ServantLocator servant_locator;\n+\n+  /**\n+   * The default servant, if on is in use.\n+   */\n+  Servant default_servant;\n+\n+  /**\n+   * The cached poa id value, computed once.\n+   */\n+  private byte[] m_poa_id;\n+\n+  /**\n+   * The all policy values that apply to this POA.\n+   * The used policy values are singletons, unique between policies.\n+   */\n+  private final HashSet m_policies;\n+\n+  /**\n+   * An array of the set policies.\n+   */\n+  Policy[] s_policies;\n+\n+  /**\n+   * The ORB, where the POA is connected.\n+   */\n+  final ORB_1_4 m_orb;\n+\n+  /**\n+   * When true, the POA is being destroyed or is destroyed.\n+   */\n+  boolean m_inDestruction;\n+\n+  /**\n+   * True if the active object map is used by this POA.\n+   * The value is moved into separate boolean value due\n+   * necessity of the frequent checks.\n+   */\n+  public final boolean retain_servant;\n+\n+  /**\n+   * Create a new abstract POA.\n+   *\n+   * @param a_parent the parent of this POA.\n+   * @param a_name a name for this POA.\n+   * @param a_manager a manager for this POA. If null, a new\n+   * {@link gnuPOAManager} will be instantiated.\n+   * @param a_policies an array of policies that apply to this POA.\n+   * @param an_orb an ORB for this POA.\n+   */\n+  public gnuPOA(gnuPOA a_parent, String a_name, POAManager a_manager,\n+                Policy[] a_policies, ORB_1_4 an_orb\n+               )\n+         throws InvalidPolicy\n+  {\n+    // Add default policies.\n+    Policy[] all_policies = policySets.withDefault(a_policies);\n+\n+    name = a_name;\n+    parent = a_parent;\n+    m_orb = an_orb;\n+\n+    if (a_manager != null)\n+      m_manager = a_manager;\n+    else\n+      m_manager = new gnuPOAManager();\n+\n+    if (m_manager instanceof gnuPOAManager)\n+      {\n+        gnuPOAManager g = (gnuPOAManager) m_manager;\n+        g.addPoa(this);\n+      }\n+\n+    m_policies = new HashSet(all_policies.length);\n+\n+    s_policies = new Policy[ all_policies.length ];\n+    for (int i = 0; i < s_policies.length; i++)\n+      {\n+        s_policies [ i ] = all_policies [ i ].copy();\n+        m_policies.add(((vPolicy) s_policies [ i ]).getValue());\n+      }\n+\n+    retain_servant = applies(ServantRetentionPolicyValue.RETAIN);\n+\n+    validatePolicies(a_policies);\n+  }\n+\n+  /**\n+   * Wait while at least one of the threads in this POA is actively\n+   * processing one of requests.\n+   */\n+  public void waitWhileRunning()\n+  {\n+    // First pause.\n+    long time = 1;\n+\n+    // Maximal duration between checks.\n+    long max = 500;\n+\n+    boolean runs;\n+\n+    do\n+      {\n+        runs = m_orb.currents.has(this);\n+\n+        if (runs)\n+          {\n+            // Avoid taking CPU resources\n+            // from the thread that is running.\n+            try\n+              {\n+                Thread.sleep(time);\n+                time = time * 2;\n+                if (time > max)\n+                  time = max;\n+              }\n+            catch (InterruptedException ex)\n+              {\n+              }\n+          }\n+      }\n+    while (runs);\n+  }\n+\n+  /**\n+   * Etherealize all objects, associated with this POA. Invoked from the\n+   * {@link gnuPOAManager} only if it is known that the servant_activator\n+   * holds non-null value.\n+   */\n+  protected void etherealizeAll()\n+  {\n+    if (servant_activator == null)\n+      return;\n+\n+    ArrayList keys = new ArrayList();\n+    keys.addAll(aom.keySet());\n+\n+    byte[] key;\n+    activeObjectMap.Obj obj;\n+    boolean last;\n+    for (int i = 0; i < keys.size(); i++)\n+      {\n+        key = (byte[]) keys.get(i);\n+        obj = aom.get(key);\n+\n+        if (obj.poa == this)\n+          {\n+            aom.remove(key);\n+\n+            if (!obj.isDeactiveted())\n+              {\n+                // Check if the servant still stays under the other key.\n+                last = aom.findServant(obj.servant) == null;\n+                servant_activator.etherealize(obj.key, this, obj.servant, true,\n+                                              last\n+                                             );\n+              }\n+          }\n+      }\n+  }\n+\n+  /**\n+   * Create an instance of the POA with the given features.\n+   * This method is not responsible for duplicate checking\n+   * or adding the returned instance to any possible table.\n+   *\n+   * @param child_name the name of the poa being created.\n+   * @param manager the poa manager (never null).\n+   * @param policies the array of policies.\n+   * @param an_orb the ORB for this POA.\n+   *\n+   * @return the created POA.\n+   *\n+   * @throws InvalidPolicy for conflicting or otherwise invalid policies.|\n+   */\n+  protected POA createPoaInstance(String child_name, POAManager a_manager,\n+                                  Policy[] policies, ORB_1_4 an_orb\n+                                 )\n+                           throws InvalidPolicy\n+  {\n+    POAManager some_manager =\n+      a_manager == null ? new gnuPOAManager() : a_manager;\n+\n+    if (some_manager instanceof gnuPOAManager)\n+      {\n+        ((gnuPOAManager) some_manager).addPoa(this);\n+      }\n+\n+    return new gnuPOA(this, child_name, some_manager, policies, an_orb);\n+  }\n+\n+  /**\n+   * Check if the given policy value applies to this POA.\n+   *\n+   * @param policy_value a policy value to check. The policy values are\n+   * singletons and unique between the different policies, so the policy\n+   * type is not passed.\n+   *\n+   * @return true if the policy value applies, false otherwise.\n+   */\n+  public final boolean applies(java.lang.Object policy_value)\n+  {\n+    return m_policies.contains(policy_value);\n+  }\n+\n+  /**\n+   * Check for the presence of the required policy.\n+   *\n+   * @param policy_value a policy value to check.\n+   *\n+   * @throws WrongPolicy if the required policy value is not applicable.\n+   */\n+  public final void required(java.lang.Object policy_value)\n+                      throws WrongPolicy\n+  {\n+    if (!applies(policy_value))\n+      throw new WrongPolicy(policy_value + \" policy required.\");\n+  }\n+\n+  /**\n+   * Check for the absence of the given policy.\n+   *\n+   * @param policy_value a policy value to check.\n+   *\n+   * @throws WrongPolicy if the passed policy value is applicable.\n+   */\n+  public final void excluding(java.lang.Object policy_value)\n+                       throws WrongPolicy\n+  {\n+    if (applies(policy_value))\n+      throw new WrongPolicy(policy_value + \" policy applies.\");\n+  }\n+\n+  /**\n+  * Find and optionally activate the child POA with the given name.\n+  *\n+  * @param poa_name the name of the POA to find.\n+  * @param activate_it if the child with the specified name is not found\n+  * or inactive and this parameter is true, the target POA activator is\n+  * invoked to activate that child. If this succeeds, that child POA\n+  * is returned.\n+  *\n+  * @throws AdapterNonExistent if no active child with the given name\n+  * is found and one of the following is true:\n+  * a) the target POA has no associated\n+  * {@link AdapterActivator}. b) that activator fails to activate the\n+  * child POA. c) <code>activate_id</code> = false.\n+  */\n+  public POA find_POA(String poa_name, boolean activate_it)\n+               throws AdapterNonExistent\n+  {\n+    POA child;\n+    for (int i = 0; i < children.size(); i++)\n+      {\n+        child = (POA) children.get(i);\n+        if (child.the_name().equals(poa_name))\n+          return child;\n+      }\n+\n+    if (activate_it && m_activator != null)\n+      {\n+        boolean activated = m_activator.unknown_adapter(this, poa_name);\n+        if (!activated)\n+          throw new AdapterNonExistent(poa_name + \" activation failed.\");\n+\n+        // Tha activator should add the child to the childrent table.\n+        for (int i = 0; i < children.size(); i++)\n+          {\n+            child = (POA) children.get(i);\n+            if (child.the_name().equals(poa_name))\n+              return child;\n+          }\n+        throw new AdapterNonExistent(poa_name + \" not created. \");\n+      }\n+    else\n+      throw new AdapterNonExistent(poa_name);\n+  }\n+\n+  /**\n+   * Generate the Object Id for the given servant and add the servant to\n+   * the Active Object Map using this Id a a key. If the servant\n+   * activator is set, its incarnate method will be called.\n+   *\n+   * @param a_servant a servant that would serve the object with the\n+   * returned Object Id. If null is passed, under apporoprate policies the\n+   * servant activator is invoked.\n+   *\n+   * @return the generated objert Id for the given servant.\n+   *\n+   * @throws ServantAlreadyActive if this servant is already in the\n+   * Active Object Map and the UNIQUE_ID policy applies.\n+   *\n+   * @throws WrongPolicy if the required policies SYSTEM_ID and RETAIN\n+   * do not apply to this POA.\n+   */\n+  public byte[] activate_object(Servant a_servant)\n+                         throws ServantAlreadyActive, WrongPolicy\n+  {\n+    checkDiscarding();\n+    required(ServantRetentionPolicyValue.RETAIN);\n+    required(IdAssignmentPolicyValue.SYSTEM_ID);\n+\n+    activeObjectMap.Obj exists = aom.findServant(a_servant);\n+\n+    if (exists != null)\n+      {\n+        if (exists.isDeactiveted())\n+          {\n+            // If exists but deactivated, activate and return\n+            // the existing key.\n+            exists.setDeactivated(false);\n+            incarnate(exists, exists.key, a_servant, false);\n+            return exists.key;\n+          }\n+        else if (applies(IdUniquenessPolicyValue.UNIQUE_ID))\n+          throw new ServantAlreadyActive();\n+\n+        // It multiple ids are allowed, exit block allowing repetetive\n+        // activations.\n+      }\n+\n+    byte[] object_key = activeObjectMap.getFreeId();\n+    servantDelegate delegate = new servantDelegate(a_servant, this, object_key);\n+    connectDelegate(object_key, delegate);\n+    return object_key;\n+  }\n+\n+  /**\n+   * Add the given servant to the Active Object Map as a servant for the\n+   * object with the provided Object Id. If the servant activator is\n+   * set, its incarnate method will be called.\n+   *\n+   * @param an_Object_Id an object id for the given object.\n+   * @param a_servant a servant that will serve the object with the given\n+   * Object Id. If null is passed, under apporoprate policies the\n+   * servant activator is invoked.\n+   *\n+   * @throws ObjectAlreadyActive if the given object id is already in the\n+   * Active Object Map.\n+   * @throws ServantAlreadyActive if the UNIQUE_ID policy applies and\n+   * this servant is already in use.\n+   * @throws WrongPolicy if the required RETAIN policy does not apply to\n+   * this POA.\n+   * @throws BAD_PARAM if the passed object id is invalid due any reason.\n+   */\n+  public void activate_object_with_id(byte[] an_Object_Id, Servant a_servant)\n+                               throws ServantAlreadyActive, ObjectAlreadyActive,\n+                                      WrongPolicy\n+  {\n+    activate_object_with_id(an_Object_Id, a_servant, false);\n+  }\n+\n+  /**\n+   * Same as activate_object_with_id, but permits gnuForwardRequest\n+   * forwarding exception. This is used when the activation is called\n+   * from the remote invocation context and we have possibility\n+   * to return the forwarding message.\n+   */\n+  public void activate_object_with_id(byte[] an_Object_Id, Servant a_servant,\n+                                      boolean use_forwarding\n+                                     )\n+                               throws ServantAlreadyActive, ObjectAlreadyActive,\n+                                      WrongPolicy\n+  {\n+    checkDiscarding();\n+    required(ServantRetentionPolicyValue.RETAIN);\n+\n+    // If the UNIQUE_ID applies, the servant being passed must not be\n+    // already active.\n+    if (applies(IdUniquenessPolicyValue.UNIQUE_ID))\n+      {\n+        activeObjectMap.Obj sx = aom.findServant(a_servant, false);\n+        if (sx != null)\n+          throw new ServantAlreadyActive();\n+      }\n+\n+    activeObjectMap.Obj exists = aom.get(an_Object_Id);\n+    if (exists != null)\n+      {\n+        if (exists.servant == null)\n+          {\n+            locateServant(an_Object_Id, a_servant, exists, use_forwarding);\n+            exists.setDeactivated(false);\n+          }\n+        else if (exists.isDeactiveted())\n+          {\n+            exists.setDeactivated(false);\n+            incarnate(exists, an_Object_Id, a_servant, use_forwarding);\n+          }\n+        else\n+          throw new ObjectAlreadyActive();\n+      }\n+    else\n+      {\n+        servantDelegate delegate =\n+          new servantDelegate(a_servant, this, an_Object_Id);\n+        connectDelegate(an_Object_Id, delegate);\n+      }\n+  }\n+\n+  /**\n+   * Locate the servant for this object Id and connect it to ORB.\n+   *\n+   * @param an_Object_Id the object id.\n+   * @param a_servant the servant (may be null).\n+   * @param exists an existing active object map entry.\n+   * @param use_forwarding allow to throw the gnuForwardRequest\n+   * if the activator throws ForwardRequest.\n+   *\n+   * @throws OBJ_ADAPTER minor 4 if the servant cannot be located\n+   * (the required servant manager may be missing).\n+   */\n+  private void locateServant(byte[] an_Object_Id, Servant a_servant,\n+                             activeObjectMap.Obj exists, boolean use_forwarding\n+                            )\n+                      throws InternalError\n+  {\n+    // An object was created with create_reference.\n+    gnuServantObject object = (gnuServantObject) exists.object;\n+    if (servant_activator != null)\n+      {\n+        exists.setServant(incarnate(exists, an_Object_Id, a_servant,\n+                                    use_forwarding\n+                                   )\n+                         );\n+      }\n+    else if (default_servant != null)\n+      {\n+        exists.setServant(default_servant);\n+      }\n+    if (exists.servant == null)\n+      {\n+        exists.setServant(a_servant);\n+      }\n+    if (exists.servant == null)\n+      {\n+        throw new OBJ_ADAPTER(\"no servant\", 4, CompletionStatus.COMPLETED_NO);\n+      }\n+\n+    servantDelegate delegate =\n+      new servantDelegate(exists.servant, this, an_Object_Id);\n+    exists.servant._set_delegate(delegate);\n+    object.setServant(exists.servant);\n+    connect_to_orb(an_Object_Id, delegate.object);\n+  }\n+\n+  /**\n+   * Deactivate object with the given id.\n+   *\n+   * The deactivated object will continue to process requests that arrived\n+   * before decativation. If this POA has the associated\n+   * servant manager, a {@link ServantActivatorOperations#etherealize} is\n+   * immediately invoked on the passed id.\n+   *\n+   * @throws WrongPolicy if the required RETAIN policy does not apply to\n+   * this POA.\n+   */\n+  public void deactivate_object(byte[] the_Object_Id)\n+                         throws ObjectNotActive, WrongPolicy\n+  {\n+    required(ServantRetentionPolicyValue.RETAIN);\n+\n+    activeObjectMap.Obj exists = aom.get(the_Object_Id);\n+\n+    if (exists == null || exists.isDeactiveted())\n+      throw new ObjectNotActive();\n+\n+    exists.setDeactivated(true);\n+\n+    // Check if this servant is serving something else.\n+    aom.remove(the_Object_Id);\n+\n+    activeObjectMap.Obj other = aom.findServant(exists.servant, false);\n+\n+    boolean remaining = other != null;\n+\n+    aom.put(exists);\n+\n+    if (servant_activator != null)\n+      servant_activator.etherealize(the_Object_Id, this, exists.servant, false,\n+                                    remaining\n+                                   );\n+  }\n+\n+  /**\n+  * Create the object reference, encapsulating the given repository Id and\n+  * the Object Id, generated by this POA. The returned object will not be\n+  * activated by default and may be activated on the first invocation by\n+  * the servant manager (if it is set and if policies are applicable).\n+  *\n+  * @param a_repository_id the repository id for the given object, can\n+  * be null if to be requested from the servant later.\n+  *\n+  * @throws WrongPolicy if the required SYSTEM_ID policy does not apply to\n+  * this POA.\n+  */\n+  public org.omg.CORBA.Object create_reference(String a_repository_id)\n+                                        throws WrongPolicy\n+  {\n+    required(IdAssignmentPolicyValue.SYSTEM_ID);\n+    return create_reference_with_id(activeObjectMap.getFreeId(), a_repository_id);\n+  }\n+\n+  /**\n+   * <p>\n+   * Create the object reference, encapsulating the given repository Id and\n+   * the given Object Id. The returned object will <i>not</i> be\n+   * activated by default and may be activated on the first invocation by\n+   * the servant manager (if the IMPLICIT_ACTIVATION policy applies).\n+   *\n+   * @param an_object_id the object id for the object being created. If this\n+   * POA uses the SYSTEM_ID policy, the portable application should only\n+   * pass the ids, generated by this POA.\n+   *\n+   * @param a_repository_id the repository id for the object being created,\n+   * can be null if this information should be later requested from the\n+   * servant.\n+   */\n+  public org.omg.CORBA.Object create_reference_with_id(byte[] an_object_id,\n+                                                       String a_repository_id\n+                                                      )\n+  {\n+    String[] ids;\n+    if (a_repository_id == null)\n+      ids = null;\n+    else\n+      ids = new String[] { a_repository_id };\n+\n+    // Check maybe such object is already activated.\n+    activeObjectMap.Obj e = aom.get(an_object_id);\n+\n+    Servant servant;\n+    if (e == null)\n+      {\n+        servant = null;\n+      }\n+    else\n+      {\n+        servant = e.servant;\n+        e.setDeactivated(false);\n+      }\n+\n+    gnuServantObject object =\n+      new gnuServantObject(ids, an_object_id, this, m_orb);\n+    object._set_delegate(new LocalDelegate(object, this, an_object_id));\n+    aom.add(object.Id, object, servant, this);\n+    connect_to_orb(an_object_id, object);\n+\n+    return object;\n+  }\n+\n+  /**\n+   * Creates a new POA as a child of the target POA.\n+   *\n+   * @param child_name the name of the child POA being created.\n+   * @param manager the manager that will control the new POA. If this parameter\n+   * is null, a new POA manager is created and associated with the new POA.\n+   *\n+   * @param policies the policies, applicable for the parent POA. Policies\n+   * are <i>not</i> inherited from the parent POA.\n+   *\n+   * @return an newly created POA. The POA will be intially in the holding\n+   * state and must be activated to start processing requests.\n+   *\n+   * @throws AdapterAlreadyExists if the child with the given child_name\n+   * already exists for the current POA.\n+   * @throws InvalidPolicy if the policies conflict with each other or are\n+   * otherwise inappropriate.\n+   *\n+   * @see #the_children()\n+   */\n+  public POA create_POA(String child_name, POAManager manager, Policy[] policies)\n+                 throws AdapterAlreadyExists, InvalidPolicy\n+  {\n+    POA child;\n+    for (int i = 0; i < children.size(); i++)\n+      {\n+        child = (POA) children.get(i);\n+        if (child.the_name().equals(child_name))\n+          throw new AdapterAlreadyExists(name + \"/\" + child_name);\n+      }\n+\n+    POA poa = createPoaInstance(child_name, manager, policies, m_orb);\n+    children.add(poa);\n+    return poa;\n+  }\n+\n+  /**\n+   * Returns a default servant for this POA.\n+   *\n+   * @return a servant that will be used for requests for\n+   * which no servant is found in the Active Object Map.\n+   *\n+   * @throws NoServant if there is no default servant associated with this POA.\n+   * @throws WrongPolicy if the USE_DEFAULT_SERVANT policy is not active.\n+   */\n+  public Servant get_servant()\n+                      throws NoServant, WrongPolicy\n+  {\n+    required(RequestProcessingPolicyValue.USE_DEFAULT_SERVANT);\n+    if (default_servant == null)\n+      throw new NoServant();\n+    return default_servant;\n+  }\n+\n+  /**\n+   * Sets the default servant for this POA.\n+   *\n+   * @param a_servant a servant that will be used for requests for\n+   * which no servant is found in the Active Object Map.\n+   *\n+   * @throws WrongPolicy if the USE_DEFAULT_SERVANT policy is not active.\n+   */\n+  public void set_servant(Servant a_servant)\n+                   throws WrongPolicy\n+  {\n+    required(RequestProcessingPolicyValue.USE_DEFAULT_SERVANT);\n+    default_servant = a_servant;\n+  }\n+\n+  /**\n+   * Set a servant manager for this POA.\n+   *\n+   * @param a servant manager being set. If the RETAIN policy applies, the\n+   * manager must implement a {@link ServantActivator}. If the NON_RETAIN\n+   * policy applies, the manager must implement a {@link ServantLocator}.\n+   *\n+   * @throws WrongPolicy if the required USE_SERVANT_MANAGER policy does not\n+   * apply to this POA.\n+   *\n+   * @throws OBJ_ADAPTER minor code 4 if the passed manager does not\n+   * implement the required interface ({@link ServantActivator},\n+   * {@link ServantLocator}). The POA, that has the RETAIN policy uses\n+   * servant managers that are ServantActivators. When the POA has the\n+   * NON_RETAIN policy it uses servant managers that are ServantLoacators.\n+   *\n+   * @throws BAD_INV_ORDER minor code 6 if the method is called more than once\n+   * on the same POA. The manager can be set only once.\n+   */\n+  public void set_servant_manager(ServantManager a_manager)\n+                           throws WrongPolicy\n+  {\n+    required(RequestProcessingPolicyValue.USE_SERVANT_MANAGER);\n+    if (servant_activator != null || servant_locator != null)\n+      throw new BAD_INV_ORDER(\"Setting manager twice for \" + name, 6,\n+                              CompletionStatus.COMPLETED_NO\n+                             );\n+\n+    if (applies(ServantRetentionPolicyValue.RETAIN))\n+      {\n+        if (a_manager instanceof ServantActivator)\n+          servant_activator = (ServantActivator) a_manager;\n+        else\n+          throw new OBJ_ADAPTER(\"RETAIN requires ServantActivator\", 4,\n+                                CompletionStatus.COMPLETED_NO\n+                               );\n+      }\n+    else if (applies(ServantRetentionPolicyValue.NON_RETAIN))\n+      {\n+        if (a_manager instanceof ServantLocator)\n+          servant_locator = (ServantLocator) a_manager;\n+        else\n+          throw new OBJ_ADAPTER(\"NON_RETAIN requires ServantLocator\", 4,\n+                                CompletionStatus.COMPLETED_NO\n+                               );\n+      }\n+    else\n+      throw new WrongPolicy(\"No servant retention policy is specified.\");\n+  }\n+\n+  /**\n+   * Get the servant manager, associated with this POA.\n+   *\n+   * @return the associated servant manager or null if it has\n+   * been previously set.\n+   *\n+   * @throws WrongPolicy if the required USE_SERVANT_MANAGER policy does not\n+   * apply to this POA.\n+   */\n+  public ServantManager get_servant_manager()\n+                                     throws WrongPolicy\n+  {\n+    required(RequestProcessingPolicyValue.USE_SERVANT_MANAGER);\n+\n+    if (servant_activator != null)\n+      return servant_activator;\n+    else\n+      return servant_locator;\n+  }\n+\n+  /**\n+   * Get the unique Id of the POA in the process in which it is created.\n+   * This Id is needed by portable interceptors. The id is unique\n+   * for the life span of the POA in the process. For persistent\n+   * POAs, if a POA is created in the same path with the same name as\n+   * another POA, these POAs are identical have the same id. All transient\n+   * POAs are assumed unique.\n+   */\n+  public byte[] id()\n+  {\n+    if (m_poa_id != null)\n+      return m_poa_id;\n+    else\n+      {\n+        cdrBufOutput buffer = new cdrBufOutput();\n+        POA p = this;\n+        while (p != null)\n+          {\n+            buffer.write_string(p.the_name());\n+            p = p.the_parent();\n+          }\n+        m_poa_id = buffer.buffer.toByteArray();\n+        return m_poa_id;\n+      }\n+  }\n+\n+  /**\n+   * Returns the reference to the active object with the given Id.\n+   *\n+   * @param the_Object_Id the object id.\n+   *\n+   * @throws ObjectNotActive if there is no active object with such Id\n+   * in the scope of this POA.\n+   * @throws WrongPolicy if the required RETAIN policy does not apply to\n+   * this POA.\n+   */\n+  public org.omg.CORBA.Object id_to_reference(byte[] the_Object_Id)\n+                                       throws ObjectNotActive, WrongPolicy\n+  {\n+    required(ServantRetentionPolicyValue.RETAIN);\n+\n+    activeObjectMap.Obj ref = aom.get(the_Object_Id);\n+    if (ref == null)\n+      throw new ObjectNotActive();\n+    else\n+      return ref.object;\n+  }\n+\n+  /**\n+   * Returns the servant that serves the active object with the given Id.\n+   *\n+   * @param the_Object_Id the object id.\n+   *\n+   * @throws ObjectNotActive if there is no active object with such Id or\n+   * it is not currently active.\n+   * @throws WrongPolicy. This method requires either RETAIN or\n+   * USE_DEFAULT_SERVANT policies and reaises the WrongPolicy if none of them\n+   * apply to this POA.\n+   */\n+  public Servant id_to_servant(byte[] the_Object_Id)\n+                        throws ObjectNotActive, WrongPolicy\n+  {\n+    if (applies(ServantRetentionPolicyValue.RETAIN))\n+      {\n+        activeObjectMap.Obj ref = aom.get(the_Object_Id);\n+        if (ref == null || ref.isDeactiveted())\n+          {\n+            if (default_servant != null)\n+              return default_servant;\n+            else\n+              throw new ObjectNotActive();\n+          }\n+        else if (ref.servant != null)\n+          return ref.servant;\n+        else if (default_servant != null)\n+          return default_servant;\n+        else\n+          throw new ObjectNotActive();\n+      }\n+    else if (default_servant != null)\n+      {\n+        return default_servant;\n+      }\n+    else\n+      throw new WrongPolicy(\"Either RETAIN or USE_DEFAULT_SERVANT required.\");\n+  }\n+\n+  /**\n+   * Returns the Object Id, encapsulated in the given object reference.\n+   *\n+   * @param the_Object the object that has been previously created with this\n+   * POA. It need not be active.\n+   *\n+   * @throws WrongAdapter if the passed object is not known for this POA.\n+   * @throws WrongPolicy never (declared for the future extensions only).\n+   */\n+  public byte[] reference_to_id(org.omg.CORBA.Object the_Object)\n+                         throws WrongAdapter, WrongPolicy\n+  {\n+    activeObjectMap.Obj ref = aom.findObject(the_Object);\n+    if (ref == null)\n+      throw new WrongAdapter();\n+    return ref.key;\n+  }\n+\n+  /**\n+   * Returns the servant that is serving this object.\n+   *\n+   * @return if the RETAIN policy applies and the object is in the Active\n+   * Object Map, the method returns the servant, associated with this object.\n+   * Otherwise, if the USE_DEFAULT_SERVANT policy applies, the method returns\n+   * the default servant (if one was set).\n+   *\n+   * @throws ObjectNotActive if none of the conditions above are satisfied.\n+   * @throws WrongAdapter if the object reference was not created with this POA.\n+   * @throws WrongPolicy. This method requires either RETAIN or\n+   * USE_DEFAULT_SERVANT policies and reaises the WrongPolicy if none of them\n+   * apply to this POA.\n+   */\n+  public Servant reference_to_servant(org.omg.CORBA.Object the_Object)\n+                               throws ObjectNotActive, WrongPolicy,\n+                                      WrongAdapter\n+  {\n+    if (applies(ServantRetentionPolicyValue.RETAIN))\n+      {\n+        activeObjectMap.Obj ref = aom.findObject(the_Object);\n+        if (ref == null)\n+          throw new WrongAdapter();\n+        else if (ref.isDeactiveted() || ref.servant == null)\n+          {\n+            if (default_servant != null)\n+              return default_servant;\n+            else\n+              throw new ObjectNotActive();\n+          }\n+        else\n+          return ref.servant;\n+      }\n+    else if (default_servant != null)\n+      {\n+        return default_servant;\n+      }\n+    else\n+      throw new WrongPolicy(\"Either RETAIN or USE_DEFAULT_SERVANT required.\");\n+  }\n+\n+  /**\n+  * Returns the id of the object, served by the given servant\n+  * (assuming that the servant serves only one object).\n+  * The id is found in one of the following ways.\n+  * <ul>\n+  * <li>If the POA has both the RETAIN and the UNIQUE_ID policy and\n+  * the specified servant is active, the method return the Object Id associated\n+  * with that servant.\n+  * </li><li>\n+  * If the POA has both the RETAIN and the IMPLICIT_ACTIVATION policy and\n+  * either the POA has the MULTIPLE_ID policy or the specified servant is\n+  * inactive, the method activates the servant using a POA-generated Object Id\n+  * and the Interface Id associated with the servant, and returns that\n+  * Object Id.\n+  * </li>\n+  * <li>If the POA has the USE_DEFAULT_SERVANT policy, the servant specified\n+  * is the default servant, and the method is being invoked in the context of\n+  * executing a request on the default servant, the method returns the\n+  * ObjectId associated with the current invocation.\n+  * </li>\n+  * </ul>\n+  * @throws ServantNotActive in all cases, not listed in the list above.\n+  * @throws WrongPolicy The method requres USE_DEFAULT_SERVANT policy or\n+  * a combination of the RETAIN policy and either the UNIQUE_ID or\n+  * IMPLICIT_ACTIVATION policies and throws the WrongPolicy if these conditions\n+  * are not satisfied.\n+  */\n+  public byte[] servant_to_id(Servant the_Servant)\n+                       throws ServantNotActive, WrongPolicy\n+  {\n+    if (applies(RequestProcessingPolicyValue.USE_DEFAULT_SERVANT) ||\n+        applies(ServantRetentionPolicyValue.RETAIN) &&\n+        (\n+          applies(IdUniquenessPolicyValue.UNIQUE_ID) ||\n+          applies(ImplicitActivationPolicyValue.IMPLICIT_ACTIVATION)\n+        )\n+       )\n+      {\n+        activeObjectMap.Obj ref = null;\n+        if (!applies(IdUniquenessPolicyValue.MULTIPLE_ID))\n+          ref = aom.findServant(the_Servant);\n+        if (ref == null &&\n+            applies(ImplicitActivationPolicyValue.IMPLICIT_ACTIVATION)\n+           )\n+          {\n+            // Try to activate.\n+            try\n+              {\n+                return activate_object(the_Servant);\n+              }\n+            catch (ServantAlreadyActive ex)\n+              {\n+                // Either it shuld not be or the policy allows multiple ids.\n+                throw new InternalError();\n+              }\n+          }\n+        if (ref == null)\n+          throw new ServantNotActive();\n+        else\n+          return ref.key;\n+      }\n+    else\n+      throw new WrongPolicy(\"(RETAIN and UNIQUE ID) \" +\n+                            \"or USE_DEFAULT_SERVANT required.\"\n+                           );\n+  }\n+\n+  /**\n+   * <p>Converts the given servant to the object reference.\n+   * The servant will serve all methods, invoked on the returned object.\n+   * The returned object reference can be passed to the remote client,\n+   * enabling remote invocations.\n+   * </p><p>\n+   * If the specified servant is active, it is returned. Otherwise,\n+   * if the POA has the IMPLICIT_ACTIVATION policy the method activates\n+   * the servant. In this case, if the servant activator is set,\n+   * the {@link ServantActivatorOperations#incarnate} method will be called.\n+   * </p>\n+   *\n+   * @throws ServantNotActive if the servant is inactive and no\n+   * IMPLICIT_ACTIVATION policy applies.\n+   * @throws WrongPolicy This method needs the RETAIN policy and either the\n+   * UNIQUE_ID or IMPLICIT_ACTIVATION policies.\n+   *\n+   * @return the object, exposing the given servant in the context of this POA.\n+   */\n+  public org.omg.CORBA.Object servant_to_reference(Servant the_Servant)\n+                                            throws ServantNotActive,\n+                                                   WrongPolicy\n+  {\n+    required(ServantRetentionPolicyValue.RETAIN);\n+\n+    activeObjectMap.Obj exists = null;\n+\n+    if (!applies(IdUniquenessPolicyValue.MULTIPLE_ID))\n+      exists = aom.findServant(the_Servant);\n+\n+    if (exists != null)\n+      {\n+        if (exists.isDeactiveted())\n+          {\n+            if (applies(ImplicitActivationPolicyValue.IMPLICIT_ACTIVATION))\n+              {\n+                checkDiscarding();\n+                exists.setDeactivated(false);\n+                incarnate(exists, exists.key, the_Servant, false);\n+              }\n+            else\n+              throw new ServantNotActive();\n+          }\n+        else\n+          return exists.object;\n+      }\n+    if (exists == null &&\n+        applies(ImplicitActivationPolicyValue.IMPLICIT_ACTIVATION)\n+       )\n+      {\n+        checkDiscarding();\n+\n+        byte[] object_key = activeObjectMap.getFreeId();\n+\n+        servantDelegate delegate =\n+          new servantDelegate(the_Servant, this, object_key);\n+        connectDelegate(object_key, delegate);\n+\n+        return delegate.object;\n+      }\n+    else\n+      throw new ServantNotActive();\n+  }\n+\n+  /**\n+   * Incarnate in cases when request forwarding is not expected\n+   * because the servant must be provided by the servant activator.\n+   *\n+   * @param x the aom entry, where the object is replaced by\n+   * value, returned by servant activator (if not null).\n+   *\n+   * @param key the object key.\n+   *\n+   * @param a_servant the servant that was passed as a parameter in the\n+   * activation method.\n+   *\n+   * @param use_forwarding if true, the gnuForwardRequest is throw\n+   * under the forwarding exception (for remote client). Otherwise, the\n+   * request is internally redirected (for local invocation).\n+   */\n+  private Servant incarnate(activeObjectMap.Obj x, byte[] object_key,\n+                            Servant a_servant, boolean use_forwarding\n+                           )\n+  {\n+    if (servant_activator != null)\n+      {\n+        Servant servant;\n+        try\n+          {\n+            servant = servant_activator.incarnate(object_key, this);\n+          }\n+        catch (ForwardRequest ex)\n+          {\n+            if (use_forwarding)\n+              throw new gnuForwardRequest(ex.forward_reference);\n+            else\n+              servant =\n+                ForwardedServant.create((ObjectImpl) ex.forward_reference);\n+          }\n+        if (servant != null && x != null)\n+          x.setServant(servant);\n+        if (servant == null && x != null)\n+          servant = x.servant;\n+        return servant;\n+      }\n+    else if (a_servant != null)\n+      {\n+        x.setServant(a_servant);\n+        return a_servant;\n+      }\n+    else if (x.servant != null)\n+      {\n+        return x.servant;\n+      }\n+    else if (default_servant != null)\n+      {\n+        x.setServant(default_servant);\n+        return x.servant;\n+      }\n+    else\n+      throw new BAD_INV_ORDER(\"No servant given and the servant activator not set\");\n+  }\n+\n+  /**\n+   * Return the POA manager, associated with this POA.\n+   *\n+   * @return the associated POA manager (always available).\n+   */\n+  public POAManager the_POAManager()\n+  {\n+    return m_manager;\n+  }\n+\n+  /**\n+   * Returns the adapter activator, associated with this POA.\n+   * The newly created POA has no activator (null would be\n+   * returned). The ORB root POA also initially has no activator.\n+   *\n+   * @return tha adapter activator or null if this POA has no\n+   * associated adapter activator.\n+   */\n+  public AdapterActivator the_activator()\n+  {\n+    return m_activator;\n+  }\n+\n+  /**\n+  * Set the adapter activator for this POA.\n+  *\n+  * @param the activator being set.\n+  */\n+  public void the_activator(AdapterActivator an_activator)\n+  {\n+    m_activator = an_activator;\n+  }\n+\n+  /**\n+  * The children of this POA.\n+  *\n+  * @return the array of all childs for this POA.\n+  */\n+  public POA[] the_children()\n+  {\n+    POA[] poas = new POA[ children.size() ];\n+    for (int i = 0; i < poas.length; i++)\n+      {\n+        poas [ i ] = (POA) children.get(i);\n+      }\n+    return poas;\n+  }\n+\n+  /**\n+   * Return the name of this POA.\n+   *\n+   * @return the name of POA, relative to its parent.\n+   */\n+  public String the_name()\n+  {\n+    return name;\n+  }\n+  ;\n+\n+  /**\n+   * Return the parent of this POA.\n+   *\n+   * @return the parent POA or <code>null</code> if this is a root POA.\n+   */\n+  public POA the_parent()\n+  {\n+    return parent;\n+  }\n+\n+  /** {@inheritDoc} */\n+  public IdAssignmentPolicy create_id_assignment_policy(IdAssignmentPolicyValue a_value)\n+  {\n+    return new gnuIdAssignmentPolicy(a_value);\n+  }\n+\n+  /** {@inheritDoc} */\n+  public IdUniquenessPolicy create_id_uniqueness_policy(IdUniquenessPolicyValue a_value)\n+  {\n+    return new gnuIdUniquenessPolicy(a_value);\n+  }\n+\n+  /** {@inheritDoc} */\n+  public ImplicitActivationPolicy create_implicit_activation_policy(ImplicitActivationPolicyValue a_value)\n+  {\n+    return new gnuImplicitActivationPolicy(a_value);\n+  }\n+\n+  /** {@inheritDoc} */\n+  public LifespanPolicy create_lifespan_policy(LifespanPolicyValue a_value)\n+  {\n+    return new gnuLifespanPolicy(a_value);\n+  }\n+\n+  /** {@inheritDoc} */\n+  public RequestProcessingPolicy create_request_processing_policy(RequestProcessingPolicyValue a_value)\n+  {\n+    return new gnuRequestProcessingPolicy(a_value);\n+  }\n+\n+  /** {@inheritDoc} */\n+  public ServantRetentionPolicy create_servant_retention_policy(ServantRetentionPolicyValue a_value)\n+  {\n+    return new gnuServantRetentionPolicy(a_value);\n+  }\n+\n+  /** {@inheritDoc} */\n+  public ThreadPolicy create_thread_policy(ThreadPolicyValue a_value)\n+  {\n+    return new gnuThreadPolicy(a_value);\n+  }\n+\n+  /**\n+   * <p> Destroy this POA and all descendant POAs. The destroyed POAs can be\n+   * later re-created via {@link AdapterActivator} or by invoking\n+   * {@link #create_POA}.\n+   * This differs from {@link PoaManagerOperations#deactivate} that does\n+   * not allow recreation of the deactivated POAs. After deactivation,\n+   * recreation is only possible if the POAs were later destroyed.\n+   * </p><p>\n+   * The remote invocation on the target, belonging to the POA that is\n+   * currently destroyed return the remote exception ({@link TRANSIENT},\n+   * minor code 4).\n+   * </p>\n+   * @param etherealize_objects if true, and POA has RETAIN policy, and the\n+   * servant manager is available, the servant manager method\n+   * {@link ServantActivatorOperations#etherealize} is called for each\n+   *  <i>active</i> object in the Active Object Map. This method should not\n+   * try to access POA being destroyed. If <code>destroy</code> is called\n+   * multiple times before the destruction completes,\n+   * the etherialization should be invoked only once.\n+   *\n+   * @param wait_for_completion if true, the method waits till the POA being\n+   * destroyed completes all current requests and etherialization. If false,\n+   * the method returns immediately.\n+   */\n+  public void destroy(boolean etherealize_objects, boolean wait_for_completion)\n+  {\n+    if (wait_for_completion)\n+      waitWhileRunning();\n+\n+    // Put the brake instead of manager, preventing the subsequent\n+    // requests.\n+    gnuPOAManager g = new gnuPOAManager();\n+    g.state = State.INACTIVE;\n+    m_manager = g;\n+\n+    // Disconnect from parent.\n+    if (parent instanceof gnuPOA)\n+      {\n+        ((gnuPOA) parent).children.remove(this);\n+      }\n+\n+    unregisterFromManager();\n+\n+    // Disconnect from the ORB all objects, registered with this POA.\n+    ArrayList keys = new ArrayList();\n+    keys.addAll(aom.keySet());\n+\n+    byte[] key;\n+    activeObjectMap.Obj obj;\n+    for (int i = 0; i < keys.size(); i++)\n+      {\n+        key = (byte[]) keys.get(i);\n+        obj = aom.get(key);\n+        if (obj.poa == this)\n+          m_orb.disconnect(obj.object);\n+      }\n+\n+    m_orb.identityDestroyed(this);\n+\n+    if (etherealize_objects && servant_activator != null && !m_inDestruction)\n+      {\n+        etherealizeAll();\n+      }\n+    m_inDestruction = true;\n+\n+    POA[] ch = the_children();\n+    for (int i = 0; i < ch.length; i++)\n+      {\n+        ch [ i ].destroy(etherealize_objects, wait_for_completion);\n+      }\n+  }\n+\n+  /**\n+   * Destroy this POA if it has not been destroyed, destroys it.\n+   */\n+  protected void finalize()\n+                   throws java.lang.Throwable\n+  {\n+    if (!m_inDestruction)\n+      destroy(false, false);\n+  }\n+\n+  /**\n+   * Remove self from the manager list.\n+   */\n+  private void unregisterFromManager()\n+  {\n+    if (m_manager instanceof gnuPOAManager)\n+      {\n+        gnuPOAManager p = (gnuPOAManager) m_manager;\n+        p.removePOA(this);\n+      }\n+  }\n+\n+  /**\n+   * Get the policy of the given type, associated with this POA.\n+   *\n+   * @param a_policy_type a type of the requested policy.\n+   * @return a policy of the given type, applyting to this POA.\n+   *\n+   * @throws org.omg.CORBA.BAD_PARAM if the policy of this type has not\n+   * been specified for this POA.\n+   */\n+  public Policy _get_policy(int a_policy_type)\n+                     throws org.omg.CORBA.BAD_PARAM\n+  {\n+    for (int i = 0; i < s_policies.length; i++)\n+      {\n+        if (s_policies [ i ].policy_type() == a_policy_type)\n+          return s_policies [ i ].copy();\n+      }\n+    throw new BAD_PARAM(\"No policy type \" + a_policy_type);\n+  }\n+\n+  /**\n+   * Get the copy of the policy array.\n+   */\n+  public Policy[] getPolicyArray()\n+  {\n+    Policy[] r = new Policy[ s_policies.length ];\n+    for (int i = 0; i < s_policies.length; i++)\n+      {\n+        r [ i ] = s_policies [ i ].copy();\n+      }\n+    return r;\n+  }\n+\n+  /**\n+   * The POAs cannot be created by this method.\n+   *\n+   * @specnote this is also not possible in Suns jdk at least till 1.4.\n+   *\n+   * @throws NO_IMPLEMENT always.\n+   */\n+  public org.omg.CORBA.Object _set_policy_override(Policy[] policies,\n+                                                   SetOverrideType how\n+                                                  )\n+  {\n+    throw new NO_IMPLEMENT(\"Use createPOA instead.\");\n+  }\n+\n+  /**\n+   * Get the ORB, where this POA is connected.\n+   */\n+  public ORB orb()\n+  {\n+    return m_orb;\n+  }\n+\n+  /**\n+   * Connect the given delegate under the given key, also calling\n+   * incarnate.\n+   */\n+  private void connectDelegate(byte[] object_key, servantDelegate delegate)\n+  {\n+    aom.add(delegate);\n+    connect_to_orb(object_key, delegate.object);\n+    if (servant_activator != null)\n+      incarnate(null, object_key, delegate.servant, false);\n+  }\n+\n+  /**\n+   * Check if the POA is not in a discarding mode. The activation\n+   * operations are forbidded in discarding mode.\n+   *\n+   * @throws TRANSIENT if the POA is in discarding mode.\n+   */\n+  private void checkDiscarding()\n+                        throws TRANSIENT\n+  {\n+    if (m_manager.get_state() == State.DISCARDING)\n+      throw new TRANSIENT(\"Discarding mode\", 1, CompletionStatus.COMPLETED_MAYBE);\n+  }\n+\n+  /**\n+   * Connect the given delegate object to orb.\n+   */\n+  protected void connect_to_orb(byte[] an_Object_Id, org.omg.CORBA.Object object)\n+  {\n+    if (applies(ThreadPolicyValue.SINGLE_THREAD_MODEL))\n+      m_orb.connect_1_thread(object, toIORKey(an_Object_Id), this);\n+    else\n+      m_orb.connect(object, toIORKey(an_Object_Id));\n+  }\n+\n+  /**\n+   * Returns the representation of this POA tree.\n+   */\n+  public String toString()\n+  {\n+    StringBuffer b = new StringBuffer(name);\n+\n+    if (children.size() != 0)\n+      {\n+        b.append(\" (\");\n+\n+        for (int i = 0; i < children.size(); i++)\n+          {\n+            b.append(children.get(i));\n+            if (i < children.size() - 2)\n+              b.append(\", \");\n+          }\n+        b.append(\")\");\n+      }\n+    return b.toString();\n+  }\n+\n+  /**\n+   * Check if the policy set is valid.\n+   */\n+  protected boolean validatePolicies(Policy[] a)\n+                              throws InvalidPolicy\n+  {\n+    if (applies(ServantRetentionPolicyValue.NON_RETAIN))\n+      {\n+        if (!applies(RequestProcessingPolicyValue.USE_DEFAULT_SERVANT) &&\n+            !applies(RequestProcessingPolicyValue.USE_SERVANT_MANAGER)\n+           )\n+          {\n+            short p = 0;\n+            for (short i = 0; i < a.length; i++)\n+              {\n+                if (a [ i ].policy_type() == SERVANT_RETENTION_POLICY_ID.value)\n+                  p = i;\n+              }\n+            throw new InvalidPolicy(\"NON_RETAIN requires either \" +\n+                                    \"USE_DEFAULT_SERVANT or USE_SERVANT_MANAGER\",\n+                                    p\n+                                   );\n+          }\n+      }\n+    return true;\n+  }\n+\n+  /**\n+   * Recursively searches for the given object in the POA tree.\n+   */\n+  public activeObjectMap.Obj findObject(org.omg.CORBA.Object object)\n+  {\n+    activeObjectMap.Obj h = aom.findObject(object);\n+    if (h != null)\n+      return h;\n+    else\n+      {\n+        for (int i = 0; i < children.size(); i++)\n+          {\n+            h = ((gnuPOA) children.get(i)).findObject(object);\n+            if (h != null)\n+              return h;\n+          }\n+      }\n+    return h;\n+  }\n+\n+  /**\n+   * Recursively searches for the given key in the POA tree.\n+   * @param ior_key the key, ecapsulating both object\n+   * and poa ids.\n+   * @return\n+   */\n+  public activeObjectMap.Obj findKey(byte[] object_id, byte[] poa_id)\n+  {\n+    activeObjectMap.Obj h = null;\n+    if (Arrays.equals(poa_id, id()))\n+      h = aom.get(object_id);\n+    if (h != null)\n+      return h;\n+    else\n+      {\n+        for (int i = 0; i < children.size(); i++)\n+          {\n+            h = ((gnuPOA) children.get(i)).findKey(object_id, poa_id);\n+            if (h != null)\n+              return h;\n+          }\n+      }\n+    return h;\n+  }\n+\n+  /**\n+   * Parses the given key, extracts poa and object id and searches\n+   * for such reference.\n+   */\n+  public activeObjectMap.Obj findIorKey(byte[] ior_key)\n+  {\n+    cdrBufInput in = new cdrBufInput(ior_key);\n+    int signature = in.read_long();\n+    if (signature != SIGNATURE)\n+      return null;\n+\n+    byte[] id = in.read_sequence();\n+    byte[] poa = in.read_sequence();\n+    return findKey(id, poa);\n+  }\n+\n+  /**\n+   * Converts the object Id into the IOR key. IOR key must be\n+   * unique in the scope of the ORB, and Ids only in the scope of POA.\n+   * Hence the IOR key includes the POA identifiers.\n+   */\n+  public byte[] toIORKey(byte[] object_id)\n+  {\n+    cdrBufOutput buffer = new cdrBufOutput();\n+    buffer.write_long(SIGNATURE);\n+    buffer.write_sequence(object_id);\n+    buffer.write_sequence(id());\n+    return buffer.buffer.toByteArray();\n+  }\n+\n+  /**\n+   * Extracts the object id from the ior key.\n+   *\n+   * @param ior_key\n+   *\n+   * @return the encapsulated object ior key or null if\n+   * this ior key either refers a different POA or encoding signature\n+   * mismatch.\n+   */\n+  public byte[] idFormIor(byte[] ior_key)\n+  {\n+    cdrBufInput in = new cdrBufInput(ior_key);\n+    int signature = in.read_long();\n+    if (signature != SIGNATURE)\n+      return null;\n+\n+    byte[] object_id = in.read_sequence();\n+    byte[] poa_id = in.read_sequence();\n+    if (Arrays.equals(poa_id, id()))\n+      return object_id;\n+    else\n+      return null;\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "6c1b5644f3699d4d73cab160cf0b90721293b7dd", "filename": "libjava/classpath/gnu/CORBA/Poa/gnuPOAManager.java", "status": "added", "additions": 225, "deletions": 0, "changes": 225, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuPOAManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuPOAManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuPOAManager.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,225 @@\n+/* gnuPOAManager.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Poa;\n+\n+import org.omg.CORBA.BAD_INV_ORDER;\n+import org.omg.CORBA.LocalObject;\n+import org.omg.PortableServer.POAManager;\n+import org.omg.PortableServer.POAManagerPackage.AdapterInactive;\n+import org.omg.PortableServer.POAManagerPackage.State;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+\n+/**\n+ * The implementation of the POA manager. The manager is a controlled\n+ * switch that can change its states in response to the method calls\n+ * and throw exceptions if the requested change is invalid. It is possible\n+ * to check the state this switch. It does not do anything else.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class gnuPOAManager\n+  extends LocalObject\n+  implements POAManager\n+{\n+  /**\n+   * The POAs, controlled by this manager. The members must be instances of\n+   * the gnuAbstractPOA.\n+   */\n+  HashSet POAs = new HashSet();\n+\n+  /**\n+   * The state of the manager. The newly created manager is always\n+   * in the holding state.\n+   */\n+  State state = State.HOLDING;\n+\n+  /**\n+   * Get the state of the POA manager.\n+   */\n+  public State get_state()\n+  {\n+    return state;\n+  }\n+\n+  /**\n+   * Turns the associated POAs into active state, allowing them to receive\n+   * and process requests.\n+   *\n+   * @throws if the POAs are in the inactive state. If once inactivated,\n+   * the POA cannot be activated again. This method can only be called\n+   * to leave the holding or discarding state.\n+   */\n+  public void activate()\n+                throws AdapterInactive\n+  {\n+    if (state != State.INACTIVE)\n+      state = State.ACTIVE;\n+    else\n+      throw new AdapterInactive();\n+  }\n+\n+  /**\n+   * Turns the associated POAs into holding state. In this state, the POAs\n+   * queue incoming requests but do not process them.\n+   *\n+   * @param wait_for_completion if true, the method call suspends the current\n+   * thread till POAs complete the requests they are currently processing. If\n+   * false, the method returns immediately.\n+\n+   * @throws AdapterInactive if the POAs are in the inactive state.\n+   */\n+  public void hold_requests(boolean wait_for_completion)\n+                     throws AdapterInactive\n+  {\n+    if (state != State.INACTIVE)\n+      state = State.HOLDING;\n+    else\n+      throw new AdapterInactive();\n+    if (wait_for_completion)\n+      waitForIdle();\n+  }\n+\n+  /**\n+   *\n+   * Turns the asociated POAs into inactive state. The POAs in the incative\n+   * state will reject new requests. If the POA is once inactivated, it\n+   * cannot be activated again. The operation is used when\n+   * the associated POAs are to be shut down.\n+   *\n+   * @param etherealize_objects if true, the servant managers of the\n+   * associated POAs, having RETAIN and USE_SERVANT_MANAGER policies,\n+   * will receive a call of {@link ServantActivatorOperations#etherealize}.\n+   *\n+   * @param wait_for_completion if true, the method call suspends the current\n+   * thread till POAs complete the requests they are currently processing. If\n+   * false, the method returns immediately.\n+   *\n+   * @throws AdapterInactive if the POAs are already in the inactive state.\n+   *\n+   * @see POAOperations#destroy\n+   */\n+  public void deactivate(boolean etherealize_objects,\n+                         boolean wait_for_completion\n+                        )\n+                  throws AdapterInactive\n+  {\n+    if (state == State.INACTIVE)\n+      throw new AdapterInactive(\"Repetetive inactivation\");\n+    state = State.INACTIVE;\n+    if (wait_for_completion)\n+      waitForIdle();\n+\n+    Iterator iter = POAs.iterator();\n+    while (iter.hasNext())\n+      {\n+        gnuPOA poa = (gnuPOA) iter.next();\n+\n+        // If the servant activator is non null, this means it has been\n+        // set - hence the policies are appropriate.\n+        if (poa.servant_activator != null)\n+          poa.etherealizeAll();\n+      }\n+  }\n+\n+  /**\n+   * Turns the associated POAs into discaring state. In this state, the POAs\n+   * discard the incoming requests. This mode is used in situations when\n+   * the server is flooded with requests. The client receives remote exception\n+   * ({@link org.omg.CORBA.TRANSIENT}, minor code 1).\n+   *\n+   * @param wait_for_completion if true, the method call suspends the current\n+   * thread till POAs complete the requests they are currently processing. If\n+   * false, the method returns immediately.\n+\n+   * @throws AdapterInactive if the POAs are in the inactive state.\n+   */\n+  public void discard_requests(boolean wait_for_completion)\n+                        throws AdapterInactive\n+  {\n+    if (state != State.INACTIVE)\n+      state = State.DISCARDING;\n+    else\n+      throw new AdapterInactive();\n+    if (wait_for_completion)\n+      waitForIdle();\n+  }\n+\n+  /**\n+   * Suspend the current thread while at least one of the associated POA is\n+   * actively processing some requests. The method assumes that the POAs\n+   * are not accepting the <i>new</i> requests due manager state.\n+   *\n+   * @throws BAD_INV_ORDER if the POAs are in the active state.\n+   */\n+  public void waitForIdle()\n+  {\n+    if (state == State.ACTIVE)\n+      throw new BAD_INV_ORDER(\"The state is active\");\n+\n+    Iterator iter = POAs.iterator();\n+    while (iter.hasNext())\n+      {\n+        gnuPOA poa = (gnuPOA) iter.next();\n+        poa.waitWhileRunning();\n+      }\n+  }\n+\n+  /**\n+   * Add the POA that will be controlled by this manager.\n+   *\n+   * @param poa the POA.\n+   */\n+  public void addPoa(gnuPOA poa)\n+  {\n+    POAs.add(poa);\n+  }\n+\n+  /**\n+   * Remove the POA, releasing it from the control of this manager.\n+   * Called in POA finaliser.\n+   *\n+   * @param poa the POA to remove.\n+   */\n+  public void removePOA(gnuPOA poa)\n+  {\n+    POAs.remove(poa);\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "927d02fe3d21f0702431fed50fb9937e2fdade13", "filename": "libjava/classpath/gnu/CORBA/Poa/gnuPoaCurrent.java", "status": "added", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuPoaCurrent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuPoaCurrent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuPoaCurrent.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,179 @@\n+/* gnuPoaCurrent.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Poa;\n+\n+import org.omg.CORBA.CurrentHelper;\n+import org.omg.CORBA.portable.ObjectImpl;\n+import org.omg.PortableServer.Current;\n+import org.omg.PortableServer.CurrentOperations;\n+import org.omg.PortableServer.CurrentPackage.NoContext;\n+import org.omg.PortableServer.POA;\n+\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * Supports the \"Poa current\" concept, providing the id and poa of\n+ * the object currently being served. There is only one instance\n+ * of this class per ORB. It maintains a thread to information map.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class gnuPoaCurrent\n+  extends ObjectImpl\n+  implements Current\n+{\n+  /**\n+   * The table, mapping threads to records.\n+   */\n+  private TreeMap threads = new TreeMap();\n+\n+  /**\n+   * Get the array of POA current repository ids.\n+   *\n+   * @return a single member array, containing value, returned\n+   * by the {@link CurrentHelper#id}, normally\n+   * \"IDL:omg.org/PortableServer/Current:2.3\".\n+   */\n+  public String[] _ids()\n+  {\n+    return new String[] { CurrentHelper.id() };\n+  }\n+\n+  /**\n+   * Get the object id, associated with the thread currently being served.\n+   *\n+   * @throws NoContext if the current thread is not associated with any\n+   * object.\n+   */\n+  public byte[] get_object_id()\n+                       throws NoContext\n+  {\n+    CurrentOperations r;\n+    synchronized (threads)\n+      {\n+        r = (CurrentOperations) threads.get(Thread.currentThread().getName());\n+      }\n+    if (r != null)\n+      return r.get_object_id();\n+    else\n+      throw new NoContext(Thread.currentThread().getName());\n+  }\n+\n+  /**\n+   * Get the object POA, associated with the thread currently being served.\n+   *\n+   * @throws NoContext if the current thread is not associated with any\n+   * object.\n+   */\n+  public POA get_POA()\n+              throws NoContext\n+  {\n+    CurrentOperations r;\n+    synchronized (threads)\n+      {\n+        r = (CurrentOperations) threads.get(Thread.currentThread().getName());\n+      }\n+    if (r != null)\n+      return r.get_POA();\n+    else\n+      throw new NoContext(Thread.currentThread().getName());\n+  }\n+\n+  /**\n+   * Add the entry to the map.\n+   */\n+  public void put(Thread t, CurrentOperations record)\n+  {\n+    synchronized (threads)\n+      {\n+        threads.put(t.getName(), record);\n+      }\n+  }\n+\n+  /**\n+   * Check if this Poa has some running threads.\n+   */\n+  public boolean has(POA poa)\n+  {\n+    synchronized (threads)\n+      {\n+        Iterator iter = threads.entrySet().iterator();\n+        while (iter.hasNext())\n+          {\n+            Map.Entry item = (Map.Entry) iter.next();\n+            try\n+              {\n+                if (((CurrentOperations) item.getValue()).get_POA() == poa)\n+                  {\n+                    return true;\n+                  }\n+              }\n+            catch (NoContext ex)\n+              {\n+                throw new InternalError();\n+              }\n+          }\n+      }\n+    return false;\n+  }\n+\n+  /**\n+   * Check if this thread is registered.\n+   */\n+  public boolean has(Thread t)\n+  {\n+    synchronized (threads)\n+      {\n+        return threads.containsKey(t.getName());\n+      }\n+  }\n+\n+  /**\n+   * Remove the entry from the map.\n+   */\n+  public void remove(Thread t)\n+  {\n+    synchronized (threads)\n+      {\n+        threads.remove(t.getName());\n+      }\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "5bbcd1321b3ede2e7b468cfa27eed1ade9dca5b4", "filename": "libjava/classpath/gnu/CORBA/Poa/gnuRequestProcessingPolicy.java", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuRequestProcessingPolicy.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuRequestProcessingPolicy.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuRequestProcessingPolicy.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,80 @@\n+/* gnuRequestProcessingPolicy.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Poa;\n+\n+import gnu.CORBA._PolicyImplBase;\n+\n+import org.omg.PortableServer.REQUEST_PROCESSING_POLICY_ID;\n+import org.omg.PortableServer.RequestProcessingPolicy;\n+import org.omg.PortableServer.RequestProcessingPolicyValue;\n+\n+/**\n+ * The implementation of the request processing policy.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class gnuRequestProcessingPolicy\n+  extends _PolicyImplBase\n+  implements RequestProcessingPolicy, vPolicy\n+{\n+  /**\n+   * Use serialVersionUID for interoperability.\n+   */\n+  private static final long serialVersionUID = 1L;\n+\n+  /**\n+   * Create the policy.\n+   *\n+   * @param v a value for the policy.\n+   */\n+  public gnuRequestProcessingPolicy(RequestProcessingPolicyValue v)\n+  {\n+    super(REQUEST_PROCESSING_POLICY_ID.value, v, v.value(),\n+          \"IDL:org.omg/PortableServer/RequestProcessingPolicy:1.0\"\n+         );\n+  }\n+\n+  /**\n+   * Get the value for the policy that was passed in a constructor.\n+   */\n+  public RequestProcessingPolicyValue value()\n+  {\n+    return (RequestProcessingPolicyValue) getValue();\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "1ad98d1cecd6843e4b800944b4f9c9647ac88547", "filename": "libjava/classpath/gnu/CORBA/Poa/gnuServantObject.java", "status": "added", "additions": 802, "deletions": 0, "changes": 802, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuServantObject.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuServantObject.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuServantObject.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,802 @@\n+/* gnuServantObject.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Poa;\n+\n+import gnu.CORBA.GIOP.ReplyHeader;\n+import gnu.CORBA.IOR_Delegate;\n+import gnu.CORBA.IOR_contructed_object;\n+import gnu.CORBA.Interceptor.gnuServerRequestInfo;\n+import gnu.CORBA.ObjectCreator;\n+import gnu.CORBA.Unexpected;\n+import gnu.CORBA.bufferedResponseHandler;\n+import gnu.CORBA.recordTypeCode;\n+import gnu.CORBA.streamReadyHolder;\n+\n+import org.omg.CORBA.Any;\n+import org.omg.CORBA.BAD_OPERATION;\n+import org.omg.CORBA.BAD_PARAM;\n+import org.omg.CORBA.CompletionStatus;\n+import org.omg.CORBA.OBJECT_NOT_EXIST;\n+import org.omg.CORBA.OBJ_ADAPTER;\n+import org.omg.CORBA.ORB;\n+import org.omg.CORBA.SystemException;\n+import org.omg.CORBA.TCKind;\n+import org.omg.CORBA.TRANSIENT;\n+import org.omg.CORBA.UserException;\n+import org.omg.CORBA.portable.InputStream;\n+import org.omg.CORBA.portable.InvokeHandler;\n+import org.omg.CORBA.portable.ObjectImpl;\n+import org.omg.CORBA.portable.OutputStream;\n+import org.omg.CORBA.portable.ResponseHandler;\n+import org.omg.PortableInterceptor.ForwardRequest;\n+import org.omg.PortableInterceptor.ServerRequestInterceptorOperations;\n+import org.omg.PortableServer.CurrentOperations;\n+import org.omg.PortableServer.DynamicImplementation;\n+import org.omg.PortableServer.ImplicitActivationPolicyValue;\n+import org.omg.PortableServer.POA;\n+import org.omg.PortableServer.POAManager;\n+import org.omg.PortableServer.POAManagerPackage.State;\n+import org.omg.PortableServer.Servant;\n+import org.omg.PortableServer.ServantLocatorPackage.CookieHolder;\n+import org.omg.PortableServer.ServantRetentionPolicyValue;\n+import org.omg.PortableServer.portable.Delegate;\n+\n+import java.io.IOException;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * Represents a CORBA object, being locally served by the associated servant.\n+ * The calls to the object are forwarded to the calls to the servant.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class gnuServantObject extends ObjectImpl\n+  implements org.omg.CORBA.Object,\n+    InvokeHandler,\n+    CurrentOperations\n+{\n+  /**\n+   * The associated servant that must also implement the {@link InvokeHandler}\n+       * interface. This value can be temporary null if the object was created using\n+   * POA.create_reference or POA.create_reference_with_id, private to force\n+   * always to use {@link setServant}.\n+   */\n+  private Servant servant;\n+\n+  /**\n+   * The Id of this object.\n+   */\n+  public final byte[] Id;\n+\n+  /**\n+   * The poa that takes care about this object.\n+   */\n+  public final gnuPOA poa;\n+\n+  /**\n+   * The POA manager, used to control the work of this object.\n+   */\n+  public final POAManager manager;\n+\n+  /**\n+   * The orb.\n+   */\n+  public final ORB_1_4 orb;\n+\n+  /**\n+   * The object repository ids, if they were specified separately. Normally, the\n+   * ids are requested from the servant.\n+   */\n+  public final String[] repository_ids;\n+\n+  /**\n+   * Create an object with no connected servant. The servant must be set later.\n+   *\n+   * @param a_repository_ids an array of repository ids, can be null (then ids\n+   * will be requested from the servant).\n+   * @param an_id the object id.\n+   * @param a_poa the POA.\n+   */\n+  public gnuServantObject(String[] a_repository_ids, byte[] an_id,\n+    gnuPOA a_poa, ORB_1_4 an_orb\n+  )\n+  {\n+    repository_ids = a_repository_ids;\n+    Id = an_id;\n+    manager = a_poa.the_POAManager();\n+    poa = a_poa;\n+    orb = an_orb;\n+  }\n+\n+  /**\n+   * Create a servant object, associated with the passed servant.\n+   *\n+   * @param a_servant a servant, serving this object.\n+   * @param an_id an Object Id for this object.\n+   *\n+   * @throws BAD_PARAM if the passed servant is not an {@link InvokeHandler}.\n+   */\n+  public gnuServantObject(Servant a_servant, byte[] an_id, ORB_1_4 an_orb,\n+    gnuPOA a_poa\n+  )\n+  {\n+    Id = an_id;\n+    setServant(a_servant);\n+    poa = a_poa;\n+    if (poa != null)\n+      {\n+        manager = poa.the_POAManager();\n+      }\n+    else\n+      {\n+        manager = null;\n+      }\n+    repository_ids = null;\n+    orb = an_orb;\n+  }\n+\n+  /**\n+   * Set a servant, if it has not been previously set.\n+   *\n+   * @param a_servant a servant to set, can be null to indicate the necessity\n+   * for the subsequent activation.\n+   *\n+   * @throws BAD_PARAM if the passed servant is not an {@link InvokeHandler} or\n+   * {@link DynamicImplementation} and also not null.\n+   */\n+  public void setServant(Servant a_servant)\n+  {\n+    if (a_servant != null &&\n+      !(a_servant instanceof InvokeHandler) &&\n+      !(a_servant instanceof DynamicImplementation)\n+    )\n+      {\n+        throw new BAD_PARAM(\"Must be either InvokeHandler or \" +\n+          \"DynamicImplementation, but is \" + a_servant\n+        );\n+      }\n+    servant = a_servant;\n+  }\n+\n+  /**\n+   * Returns the associated servant.\n+   */\n+  public Servant getServant()\n+  {\n+    return servant;\n+  }\n+\n+  /**\n+   * Return the associated invocation handler.\n+   */\n+  public InvokeHandler getHandler(String operation, CookieHolder cookie,\n+    boolean forwarding_allowed\n+  ) throws gnuForwardRequest\n+  {\n+    if (servant != null)\n+      {\n+        return servantToHandler(servant);\n+      }\n+    else\n+      {\n+        // Use servant locator to locate the servant.\n+        if (poa.servant_locator != null)\n+          {\n+            try\n+              {\n+                servant =\n+                  poa.servant_locator.preinvoke(Id, poa, operation, cookie);\n+                return servantToHandler(servant);\n+              }\n+            catch (org.omg.PortableServer.ForwardRequest forw_ex)\n+              {\n+                if (forwarding_allowed)\n+                  {\n+                    throw new gnuForwardRequest(forw_ex.forward_reference);\n+                  }\n+                else\n+                  {\n+                    servant =\n+                      ForwardedServant.create(forw_ex.forward_reference);\n+                    return servantToHandler(servant);\n+                  }\n+              }\n+          }\n+        else\n+        // Use servant activator to locate the servant.\n+        if (poa.applies(ImplicitActivationPolicyValue.IMPLICIT_ACTIVATION) &&\n+          poa.applies(ServantRetentionPolicyValue.RETAIN)\n+        )\n+          {\n+            try\n+              {\n+                poa.activate_object_with_id(Id, servant, forwarding_allowed);\n+                servant = poa.id_to_servant(Id);\n+                return servantToHandler(servant);\n+              }\n+            catch (gnuForwardRequest forwarded)\n+              {\n+                throw forwarded;\n+              }\n+            catch (Exception ex)\n+              {\n+                ex.printStackTrace();\n+\n+                BAD_OPERATION bad =\n+                  new BAD_OPERATION(\"Unable to activate\", 0x5004,\n+                    CompletionStatus.COMPLETED_NO\n+                  );\n+                bad.initCause(ex);\n+                throw bad;\n+              }\n+          }\n+        else if (poa.default_servant != null)\n+          {\n+            servant = poa.default_servant;\n+            return servantToHandler(servant);\n+          }\n+\n+        // No servant and no servant manager - throw exception.\n+        else\n+          {\n+            throw new BAD_OPERATION(\"Unable to activate\", 0x5002,\n+              CompletionStatus.COMPLETED_NO\n+            );\n+          }\n+      }\n+  }\n+\n+  /**\n+   * Convert the servant to invocation handler.\n+   */\n+  public InvokeHandler servantToHandler(Servant a_servant)\n+  {\n+    if (a_servant instanceof InvokeHandler)\n+      {\n+        return (InvokeHandler) a_servant;\n+      }\n+    else if (a_servant instanceof DynamicImplementation)\n+      {\n+        return new dynImpHandler((DynamicImplementation) a_servant);\n+      }\n+    else\n+      {\n+        throw new BAD_OPERATION(a_servant +\n+          \" must be either InvokeHandler or \" + \"POA DynamicImplementation\"\n+        );\n+      }\n+  }\n+\n+  /**\n+   * Create a servant object, associated with the passed servant. Requests the\n+   * object id from the servant. Depending on the policies of the servants POA,\n+   * the calls are eithe not synchronized or synchronized on POA or ORB.\n+   *\n+   * @param a_servant a servant, serving this object.\n+   * @param an_id an Object Id for this object.\n+   */\n+  public gnuServantObject(Servant a_servant, gnuPOA a_poa)\n+  {\n+    this(a_servant, a_servant._object_id(), (ORB_1_4) a_servant._orb(), a_poa);\n+  }\n+\n+  /**\n+   * Delegates call to servant, passing the poa and Id.\n+   */\n+  public String[] _ids()\n+  {\n+    if (repository_ids == null)\n+      {\n+        return getServant()._all_interfaces(poa, Id);\n+      }\n+    else\n+      {\n+        return repository_ids;\n+      }\n+  }\n+\n+  /**\n+   * Gets a string representation.\n+   */\n+  public String toString()\n+  {\n+    StringBuffer b = new StringBuffer(\"Servant object (\");\n+    for (int i = 0; i < Id.length; i++)\n+      {\n+        b.append(Integer.toHexString(Id [ i ] & 0xFF));\n+        b.append(' ');\n+      }\n+    b.append(')');\n+    return b.toString();\n+  }\n+\n+  /**\n+   * Always returns true.\n+   */\n+  public boolean _is_local()\n+  {\n+    return true;\n+  }\n+\n+  /**\n+   * Check if this object could be named by the given repository id.\n+   *\n+   * @param idl_id the repository id to check.\n+   *\n+   * @return true if it is one of the possible repository ids of this object.\n+   */\n+  public boolean _is_a(String idl_id)\n+  {\n+    String[] maybe = _ids();\n+    for (int i = 0; i < maybe.length; i++)\n+      {\n+        if (maybe [ i ].equals(idl_id))\n+          {\n+            return true;\n+          }\n+      }\n+    return false;\n+  }\n+\n+  /**\n+   * Get an ORB, associated with the servant of this object.\n+   *\n+   * @return\n+   */\n+  public ORB _orb()\n+  {\n+    return getServant()._orb();\n+  }\n+\n+  /**\n+   * Handle the invocation (delegates to servant).\n+   *\n+   * @throws TRANSIENT minor 0x535503e9 if the POA is in discarding mode.\n+   * @throws OBJ_ADAPTER minor 0x535503ea if the POA is inactivated.\n+   * @throws OBJECT_NOT_EXISTS minor 0x535503ec if this object is inactivated.\n+   *\n+   * @specnote see {@link POAManagerOperations} for specnotes about the minor\n+   * codes.\n+   */\n+  public OutputStream _invoke(String method, InputStream input,\n+    ResponseHandler r_handler\n+  ) throws SystemException\n+  {\n+    boolean intercept = false;\n+    ServerRequestInterceptorOperations interceptor = null;\n+    gnuServerRequestInfo info = null;\n+    bufferedResponseHandler i_handler = null;\n+\n+    try\n+      {\n+        if (orb.iServer != null &&\n+          r_handler instanceof bufferedResponseHandler\n+        )\n+          {\n+            interceptor = orb.iServer;\n+\n+            i_handler = (bufferedResponseHandler) r_handler;\n+\n+            info =\n+              new gnuServerRequestInfo(this, i_handler.request_header,\n+                i_handler.reply_header\n+              );\n+            intercept = true;\n+\n+            interceptor.receive_request_service_contexts(info);\n+          }\n+\n+        try\n+          {\n+            CookieHolder cookie = null;\n+            activeObjectMap.Obj self = poa.aom.get(Id);\n+\n+            if (poa.servant_locator != null)\n+              {\n+                // If the servant locator is in use, it is always responsible\n+                // for providing the servant.\n+                self.servant = servant = null;\n+                cookie = new CookieHolder();\n+              }\n+            else if (self != null && self.isDeactiveted())\n+              {\n+                if (poa.applies(\n+                    ImplicitActivationPolicyValue.IMPLICIT_ACTIVATION\n+                  ) &&\n+                  poa.servant_activator != null\n+                )\n+                  {\n+                    // Reset the servant, forcing the subsequent activation.\n+                    servant = null;\n+                  }\n+                else\n+                  {\n+                    throw new OBJECT_NOT_EXIST(\"Object deactivated\",\n+                      0x535503ec, CompletionStatus.COMPLETED_NO\n+                    );\n+                  }\n+              }\n+\n+            InvokeHandler handler = getHandler(method, cookie, true);\n+\n+            Delegate d = null;\n+\n+            try\n+              {\n+                d = servant._get_delegate();\n+                orb.currents.put(Thread.currentThread(), this);\n+              }\n+            catch (Exception ex)\n+              {\n+                // In some cases exception is thrown if the delegate is not set.\n+              }\n+            if (d instanceof servantDelegate)\n+              {\n+                // If the delegate is already set, check maybe we can\n+                // reuse the existing instance.\n+                if (((servantDelegate) d).object != this)\n+                  {\n+                    servant._set_delegate(new servantDelegate(servant, poa, Id));\n+                  }\n+              }\n+            else\n+              {\n+                servant._set_delegate(new servantDelegate(servant, poa, Id));\n+              }\n+\n+            try\n+              {\n+                switch (manager.get_state().value())\n+                  {\n+                    case State._ACTIVE :\n+\n+                      OutputStream rt;\n+                      try\n+                        {\n+                          if (intercept)\n+                            {\n+                              interceptor.receive_request(info);\n+                            }\n+\n+                          rt = handler._invoke(method, input, r_handler);\n+\n+                          if (intercept)\n+                            {\n+                              // Handler is casted into i_handler.\n+                              if (i_handler.isExceptionReply())\n+                                {\n+                                  info.m_reply_header.reply_status =\n+                                    ReplyHeader.USER_EXCEPTION;\n+\n+                                  // Make Any, holding the user exception.\n+                                  Any a = orb.create_any();\n+                                  OutputStream buf = i_handler.getBuffer();\n+                                  InputStream in = buf.create_input_stream();\n+                                  String uex_idl = \"unknown\";\n+                                  try\n+                                    {\n+                                      in.mark(Integer.MAX_VALUE);\n+                                      uex_idl = in.read_string();\n+                                      in.reset();\n+                                    }\n+                                  catch (IOException e)\n+                                    {\n+                                      throw new Unexpected(e);\n+                                    }\n+\n+                                  try\n+                                    {\n+                                      UserException exception =\n+                                        ObjectCreator.readUserException(uex_idl,\n+                                          in\n+                                        );\n+\n+                                      ObjectCreator.insertWithHelper(a,\n+                                        exception\n+                                      );\n+                                    }\n+                                  catch (Exception e)\n+                                    {\n+                                      // Failed due any reason, insert without\n+                                      // helper.\n+                                      a.insert_Streamable(new streamReadyHolder(\n+                                          buf.create_input_stream()\n+                                        )\n+                                      );\n+\n+                                      recordTypeCode r =\n+                                        new recordTypeCode(TCKind.tk_except);\n+                                      r.setId(uex_idl);\n+                                      r.setName(ObjectCreator.getDefaultName(\n+                                          uex_idl\n+                                        )\n+                                      );\n+                                    }\n+\n+                                  info.m_usr_exception = a;\n+                                  interceptor.send_exception(info);\n+                                }\n+                              else\n+                                {\n+                                  info.m_reply_header.reply_status =\n+                                    ReplyHeader.NO_EXCEPTION;\n+                                  interceptor.send_reply(info);\n+                                }\n+                            }\n+                        }\n+                      catch (SystemException sys_ex)\n+                        {\n+                          if (intercept)\n+                            {\n+                              info.m_reply_header.reply_status =\n+                                ReplyHeader.SYSTEM_EXCEPTION;\n+                              info.m_sys_exception = sys_ex;\n+                              interceptor.send_exception(info);\n+                            }\n+                          throw sys_ex;\n+                        }\n+\n+                      return rt;\n+\n+                    case State._HOLDING :\n+\n+                      // The holding mode is implemented\n+                      // relying on the holding capabilites of the network\n+                      // support (if any).\n+                      // TODO FIXME in more recent CORBA applications, the\n+                      // client\n+                      // ORB can free the connection and wait for a server side\n+                      // notification about the completed request. Implement\n+                      // this\n+                      // as soon as JDK specification would allow bidirectional\n+                      // policy.\n+                      int sleep = 5;\n+                      int max = 500;\n+\n+                      // Wait till the state will be switched into some other\n+                      // mode.\n+                      while (manager.get_state().value() == State._HOLDING)\n+                        {\n+                          try\n+                            {\n+                              Thread.sleep(sleep);\n+                              if (sleep < max)\n+                                {\n+                                  sleep = max;\n+                                }\n+                            }\n+                          catch (InterruptedException ex)\n+                            {\n+                            }\n+                        }\n+\n+                      // Handle another mode.\n+                      return _invoke(method, input, r_handler);\n+\n+                    case State._DISCARDING :\n+                      throw new TRANSIENT(\"Discarding mode\", 0x535503e9,\n+                        CompletionStatus.COMPLETED_NO\n+                      );\n+\n+                    case State._INACTIVE :\n+                      throw new OBJ_ADAPTER(\"POA deactivated\", 0x535503ea,\n+                        CompletionStatus.COMPLETED_NO\n+                      );\n+\n+                    default :\n+                      throw new InternalError(); // No more states.\n+                  }\n+              }\n+            finally\n+              {\n+                if (poa.servant_locator != null)\n+                  {\n+                    poa.servant_locator.postinvoke(Id, poa, method,\n+                      cookie.value, servant\n+                    );\n+                    servant = null;\n+                  }\n+              }\n+          }\n+        finally\n+          {\n+            orb.currents.remove(Thread.currentThread());\n+          }\n+      }\n+    catch (ForwardRequest fex)\n+      {\n+        // May be thrown by interceptor.\n+        if (intercept)\n+          {\n+            Forwarding:\n+            while (true)\n+              {\n+                info.m_reply_header.reply_status =\n+                  ReplyHeader.LOCATION_FORWARD;\n+                info.m_forward_reference = fex.forward;\n+                try\n+                  {\n+                    interceptor.send_other(info);\n+                    break Forwarding;\n+                  }\n+                catch (ForwardRequest fex2)\n+                  {\n+                    info.m_forward_reference = fex2.forward;\n+                    fex.forward = info.m_forward_reference;\n+                  }\n+              }\n+          }\n+        throw new gnuForwardRequest(fex.forward);\n+      }\n+    catch (gnuForwardRequest fex)\n+      {\n+        // May be thrown during activation.\n+        if (intercept)\n+          {\n+            Forwarding:\n+            while (true)\n+              {\n+                info.m_reply_header.reply_status =\n+                  ReplyHeader.LOCATION_FORWARD;\n+                info.m_forward_reference = fex.forward_reference;\n+                try\n+                  {\n+                    interceptor.send_other(info);\n+                    break Forwarding;\n+                  }\n+                catch (ForwardRequest fex2)\n+                  {\n+                    info.m_forward_reference = fex2.forward;\n+                    fex.forward_reference = (ObjectImpl) fex2.forward;\n+                  }\n+              }\n+          }\n+        throw fex;\n+      }\n+  }\n+\n+  /**\n+   * Compare with another object for equality, comparing the object keys.\n+   */\n+  public boolean equals(java.lang.Object other)\n+  {\n+    if (other instanceof gnuServantObject)\n+      {\n+        gnuServantObject o = (gnuServantObject) other;\n+\n+        return Arrays.equals(o.Id, Id);\n+      }\n+    else\n+      {\n+        return false;\n+      }\n+  }\n+\n+  /**\n+   * Get the hash code, based on the object key.\n+   */\n+  public int hashCode()\n+  {\n+    long s = 0;\n+    int v = 1;\n+    for (int i = 0; i < Id.length; i++)\n+      {\n+        s += Id [ i ] * v;\n+        if (s > Integer.MAX_VALUE)\n+          {\n+            s = s % Integer.MAX_VALUE;\n+            v = 1;\n+          }\n+        v = v * 8;\n+      }\n+    return (int) (s % Integer.MAX_VALUE);\n+  }\n+\n+  /**\n+   * Get the object id.\n+   */\n+  public byte[] get_object_id()\n+  {\n+    return Id;\n+  }\n+\n+  /**\n+   * Get POA.\n+   */\n+  public POA get_POA()\n+  {\n+    return poa;\n+  }\n+\n+  /**\n+   * Returns without action.\n+   */\n+  public void _release()\n+  {\n+  }\n+\n+  /**\n+   * Returns without action.\n+   */\n+  public void _releaseReply(InputStream stream)\n+  {\n+  }\n+\n+  /**\n+   * Checks if this object is equivalent to another instance. These objects are\n+   * assumed equal if they are connected to the same orb and poa under the same\n+   * Id, regardless of they delegates.\n+   *\n+   * @param another instance to check.\n+   * @return\n+   */\n+  public boolean _is_equivalent(org.omg.CORBA.Object other)\n+  {\n+    if (other instanceof gnuServantObject)\n+      {\n+        gnuServantObject g = (gnuServantObject) other;\n+        return orb == g.orb && poa == g.poa && Arrays.equals(Id, g.Id);\n+      }\n+    else if (other instanceof IOR_contructed_object)\n+      {\n+        IOR_contructed_object ir = ((IOR_contructed_object) other);\n+        try\n+          {\n+            IOR_Delegate ird = (IOR_Delegate) ir._get_delegate();\n+            byte[] ior_id = poa.idFormIor(ird.getIor().key);\n+            if (ior_id != null && Arrays.equals(ior_id, Id))\n+              {\n+                return true;\n+              }\n+            else\n+              {\n+                return false;\n+              }\n+          }\n+        catch (Exception ex)\n+          {\n+            // Non - typical delegate or very specific subclass of\n+            // IOR_constructed_object.\n+            return super._is_equivalent(other);\n+          }\n+      }\n+    return super._is_equivalent(other);\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "009e70e1b35dbc8f1e3babae2a30c4893f0fee4d", "filename": "libjava/classpath/gnu/CORBA/Poa/gnuServantRetentionPolicy.java", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuServantRetentionPolicy.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuServantRetentionPolicy.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuServantRetentionPolicy.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,80 @@\n+/* gnuServantRetentionPolicy.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Poa;\n+\n+import gnu.CORBA._PolicyImplBase;\n+\n+import org.omg.PortableServer.SERVANT_RETENTION_POLICY_ID;\n+import org.omg.PortableServer.ServantRetentionPolicy;\n+import org.omg.PortableServer.ServantRetentionPolicyValue;\n+\n+/**\n+ * The implementation of the servant retention policy.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class gnuServantRetentionPolicy\n+  extends _PolicyImplBase\n+  implements ServantRetentionPolicy, vPolicy\n+{\n+  /**\n+   * Use serialVersionUID for interoperability.\n+   */\n+  private static final long serialVersionUID = 1L;\n+\n+  /**\n+   * Create the policy.\n+   *\n+   * @param v a value for the policy.\n+   */\n+  public gnuServantRetentionPolicy(ServantRetentionPolicyValue v)\n+  {\n+    super(SERVANT_RETENTION_POLICY_ID.value, v, v.value(),\n+          \"IDL:org.omg/PortableServer/ServantRetentionPolicy:1.0\"\n+         );\n+  }\n+\n+  /**\n+   * Get the value for the policy that was passed in a constructor.\n+   */\n+  public ServantRetentionPolicyValue value()\n+  {\n+    return (ServantRetentionPolicyValue) getValue();\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "f42ebefb3630f9f6a0ec4e2d24b0a13f6531b27f", "filename": "libjava/classpath/gnu/CORBA/Poa/gnuThreadPolicy.java", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuThreadPolicy.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuThreadPolicy.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FgnuThreadPolicy.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,80 @@\n+/* gnuThreadPolicy.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Poa;\n+\n+import gnu.CORBA._PolicyImplBase;\n+\n+import org.omg.PortableServer.THREAD_POLICY_ID;\n+import org.omg.PortableServer.ThreadPolicy;\n+import org.omg.PortableServer.ThreadPolicyValue;\n+\n+/**\n+ * The implementation of the thread policy.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class gnuThreadPolicy\n+  extends _PolicyImplBase\n+  implements ThreadPolicy, vPolicy\n+{\n+  /**\n+   * Use serialVersionUID for interoperability.\n+   */\n+  private static final long serialVersionUID = 1L;\n+\n+  /**\n+   * Create the policy.\n+   *\n+   * @param v a value for the policy.\n+   */\n+  public gnuThreadPolicy(ThreadPolicyValue v)\n+  {\n+    super(THREAD_POLICY_ID.value, v, v.value(),\n+          \"IDL:org.omg/PortableServer/ThreadPolicy:1.0\"\n+         );\n+  }\n+\n+  /**\n+   * Get the value for the policy that was passed in a constructor.\n+   */\n+  public ThreadPolicyValue value()\n+  {\n+    return (ThreadPolicyValue) getValue();\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "eb688467ae7cf05bd81d46a4581d7db23d058b5e", "filename": "libjava/classpath/gnu/CORBA/Poa/policySets.java", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FpolicySets.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FpolicySets.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FpolicySets.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,128 @@\n+/* policySets.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Poa;\n+\n+import org.omg.CORBA.Policy;\n+import org.omg.PortableServer.IdAssignmentPolicyValue;\n+import org.omg.PortableServer.IdUniquenessPolicyValue;\n+import org.omg.PortableServer.ImplicitActivationPolicyValue;\n+import org.omg.PortableServer.LifespanPolicyValue;\n+import org.omg.PortableServer.RequestProcessingPolicyValue;\n+import org.omg.PortableServer.ServantRetentionPolicyValue;\n+import org.omg.PortableServer.ThreadPolicyValue;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * Contains the frequently uset POA policy sets. The policy\n+ * arrays are package private for security reasons, the cloned\n+ * copies are returned.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class policySets\n+{\n+  /**\n+   * The default policy set, as defined in OMG specs. This is also\n+   * the policy set for the root POA.\n+   */\n+  private static final vPolicy[] rootPOASet =\n+    new vPolicy[]\n+    {\n+      new gnuThreadPolicy(ThreadPolicyValue.ORB_CTRL_MODEL),\n+      new gnuLifespanPolicy(LifespanPolicyValue.TRANSIENT),\n+      new gnuIdUniquenessPolicy(IdUniquenessPolicyValue.UNIQUE_ID),\n+      new gnuIdAssignmentPolicy(IdAssignmentPolicyValue.SYSTEM_ID),\n+      new gnuServantRetentionPolicy(ServantRetentionPolicyValue.RETAIN),\n+      new gnuRequestProcessingPolicy(RequestProcessingPolicyValue.USE_ACTIVE_OBJECT_MAP_ONLY),\n+      new gnuImplicitActivationPolicy(ImplicitActivationPolicyValue.IMPLICIT_ACTIVATION)\n+    };\n+\n+  /**\n+   * Return the policy set, applicable for the root POA, as defined\n+   * in OMG specs.\n+   */\n+  public static Policy[] rootPoa()\n+  {\n+    Policy[] p = new Policy[ rootPOASet.length ];\n+    System.arraycopy(rootPOASet, 0, p, 0, p.length);\n+    return p;\n+  }\n+\n+  /**\n+   * Convert the potentially incomplete policy array into array, containing\n+   * the complete policy set.\n+   *\n+   * @param policies the policy list, may be incomplete (even zero size).\n+   *\n+   * @return the complete policy array. The missing, but needed policies\n+   * are added with they default values.\n+   */\n+  public static Policy[] withDefault(Policy[] policies)\n+  {\n+    ArrayList current = new ArrayList(rootPOASet.length);\n+    Policy p_default;\n+    boolean specified;\n+\n+    for (int i = 0; i < rootPOASet.length; i++)\n+      {\n+        p_default = rootPOASet [ i ];\n+        specified = false;\n+        ForThis:\n+        for (int j = 0; j < policies.length; j++)\n+          {\n+            if (policies [ j ].policy_type() == p_default.policy_type())\n+              {\n+                specified = true;\n+                current.add(policies [ j ]);\n+                break ForThis;\n+              }\n+          }\n+        if (!specified)\n+          current.add(p_default.copy());\n+      }\n+\n+    Policy[] complete = new Policy[ current.size() ];\n+    for (int i = 0; i < complete.length; i++)\n+      {\n+        complete [ i ] = (Policy) current.get(i);\n+      }\n+    return complete;\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "f59c01c6b3e4a751915ce497102d9a2245b685bf", "filename": "libjava/classpath/gnu/CORBA/Poa/servantDelegate.java", "status": "added", "additions": 232, "deletions": 0, "changes": 232, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FservantDelegate.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FservantDelegate.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FservantDelegate.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,232 @@\n+/* servantDelegate.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Poa;\n+\n+import gnu.CORBA.Unexpected;\n+\n+import org.omg.CORBA.NO_IMPLEMENT;\n+import org.omg.CORBA.ORB;\n+import org.omg.CORBA.ORBPackage.InvalidName;\n+import org.omg.CORBA.Object;\n+import org.omg.PortableServer.CurrentPackage.NoContext;\n+import org.omg.PortableServer.POA;\n+import org.omg.PortableServer.POAHelper;\n+import org.omg.PortableServer.Servant;\n+import org.omg.PortableServer.portable.Delegate;\n+\n+/**\n+ * The implementation of the servant delegate for the locally existing\n+ * servant.The associated servant that must also implement the\n+ * {@link InvokeHandler} interface. Each servant requires a separate\n+ * instance of this delegate and can serve a single object only.\n+ * Hence the fields are final, but the delegate is typically reused\n+ * unless the same servant is connected to different objects.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class servantDelegate\n+  implements Delegate\n+{\n+  /**\n+   * The servant, associated with this object.\n+   */\n+  final Servant servant;\n+\n+  /**\n+   * The servant (not object) id.\n+   */\n+  final byte[] servant_id;\n+\n+  /**\n+   * The POA, where the servant is connected.\n+   */\n+  final gnuPOA poa;\n+\n+  /**\n+   * The object, exposed as an object, served by this servant.\n+   */\n+  final gnuServantObject object;\n+\n+  /**\n+   * Create the delegat for the servant that will be connected to the\n+   * given poa. The method is normally called from inside of gnuPOA.\n+   * The constructor sets the newly created delegate as the delegate to this\n+   * servant by calling Servant._set_delegate.\n+   *\n+   * @param a_poa the poa.\n+   * @param a_servant the servant.\n+   * @param a_servant_id the servant id.\n+   */\n+  public servantDelegate(Servant a_servant, gnuPOA a_poa, byte[] a_servant_id)\n+  {\n+    poa = a_poa;\n+    servant = a_servant;\n+    servant_id = a_servant_id;\n+    servant._set_delegate(this);\n+    object =\n+      new gnuServantObject(servant, servant_id, (ORB_1_4) servant._orb(), a_poa);\n+    object._set_delegate(new LocalDelegate(object, poa, a_servant_id));\n+  }\n+\n+  /**\n+   * Check if this object could be named by the given repository id.\n+   * @param idl_id the repository id to check.\n+   *\n+   * @return true if it is one of the possible repository ids of this\n+   * object.\n+   */\n+  public boolean is_a(Servant a_servant, String idl_id)\n+  {\n+    same(a_servant);\n+\n+    String[] maybe = object.repository_ids;\n+    if (maybe == null)\n+      maybe = servant._all_interfaces(poa, object.Id);\n+    for (int i = 0; i < maybe.length; i++)\n+      {\n+        if (maybe [ i ].equals(idl_id))\n+          return true;\n+      }\n+    return false;\n+  }\n+\n+  /**\n+   * Return the ORB's default POA.\n+   */\n+  public POA default_POA(Servant a_servant)\n+  {\n+    same(a_servant);\n+    try\n+      {\n+        return POAHelper.narrow(orb(a_servant).resolve_initial_references(\"RootPOA\"));\n+      }\n+    catch (InvalidName ex)\n+      {\n+        throw new Unexpected(ex);\n+      }\n+  }\n+\n+  /**\n+   * Get ORB.\n+   */\n+  public ORB orb(Servant a_servant)\n+  {\n+    same(a_servant);\n+    return poa.orb();\n+  }\n+\n+  /**\n+   * Get the object, exposing the servant.\n+   */\n+  public Object this_object(Servant a_servant)\n+  {\n+    same(a_servant);\n+    try\n+      {\n+        return poa.aom.get(poa.m_orb.currents.get_object_id()).object;\n+      }\n+    catch (NoContext ex)\n+      {\n+        return object;\n+      }\n+  }\n+\n+  /**\n+   * Not supported.\n+   *\n+   * @specnote Same as for Sun up till 1.5 inclusive.\n+   */\n+  public Object get_interface_def(Servant a_servant)\n+  {\n+    same(a_servant);\n+    throw new NO_IMPLEMENT();\n+  }\n+\n+  /**\n+   * Get the Id of the object being currently served.\n+   */\n+  public byte[] object_id(Servant a_servant)\n+  {\n+    same(a_servant);\n+    try\n+      {\n+        byte[] id = poa.m_orb.currents.get_object_id();\n+        return id;\n+      }\n+    catch (NoContext ex)\n+      {\n+        return object.Id;\n+      }\n+  }\n+\n+  /**\n+   * Always returns false;\n+   */\n+  public boolean non_existent(Servant a_servant)\n+  {\n+    same(a_servant);\n+    return false;\n+  }\n+\n+  /**\n+   * Return the associated POA.\n+   */\n+  public POA poa(Servant a_servant)\n+  {\n+    same(a_servant);\n+    try\n+      {\n+        return poa.m_orb.currents.get_POA();\n+      }\n+    catch (NoContext ex)\n+      {\n+        return poa;\n+      }\n+  }\n+\n+  /**\n+   * Checks if the passed servant is the same as the servant, associated with\n+   * this delegate. This class requires a single servant per delegate.\n+   */\n+  void same(Servant some_servant)\n+  {\n+    if (servant != some_servant)\n+      throw new InternalError(\"Only one servant per delegate is supported.\");\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "9e45b56d7ee6220b5a4a8aa0e414b01d3a0c1200", "filename": "libjava/classpath/gnu/CORBA/Poa/vPolicy.java", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FvPolicy.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FvPolicy.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FPoa%2FvPolicy.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,62 @@\n+/* vPolicy.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA.Poa;\n+\n+import org.omg.CORBA.Policy;\n+\n+/**\n+ * The Classpath implementation of the policy, providing the policy\n+ * value and the code of the policy type.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public interface vPolicy\n+  extends Policy\n+{\n+  /**\n+   * Get the value of this policy\n+   */\n+  java.lang.Object getValue();\n+\n+  /**\n+   * Get the integer code of this policy value.\n+   */\n+  int getCode();\n+\n+}\n\\ No newline at end of file"}, {"sha": "0b382648981acdf9a99b86e7ad8aac1e23ca5a2c", "filename": "libjava/classpath/gnu/CORBA/gnuValueHolder.java", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FgnuValueHolder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2FCORBA%2FgnuValueHolder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2FCORBA%2FgnuValueHolder.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,135 @@\n+/* gnuValueHolder.java --\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.CORBA;\n+\n+import gnu.CORBA.CDR.Vio;\n+\n+import org.omg.CORBA.TypeCode;\n+import org.omg.CORBA.ValueBaseHolder;\n+import org.omg.CORBA.portable.BoxedValueHelper;\n+import org.omg.CORBA.portable.InputStream;\n+import org.omg.CORBA.portable.OutputStream;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Boxed value holder that also remembers the value type and the value helper.\n+ *\n+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)\n+ */\n+public class gnuValueHolder\n+  extends ValueBaseHolder\n+{\n+  /**\n+   * The type code of the stored value.\n+   */\n+  TypeCode type;\n+\n+  /**\n+   * The helper that could read and write fields of the boxed value.\n+   */\n+  transient BoxedValueHelper helper;\n+\n+  /**\n+   * If true, the helper not available.\n+   */\n+  transient boolean helper_NA;\n+\n+  /**\n+   * Create a new instance for the given value and given type.\n+   */\n+  public gnuValueHolder(Serializable value, TypeCode a_type)\n+  {\n+    super(value);\n+    type = a_type;\n+  }\n+\n+  /**\n+   * Get the true type, as it was passed in the constructor.\n+   */\n+  public TypeCode _type()\n+  {\n+    return type;\n+  }\n+\n+  /**\n+   * Write content to the output stream. Tries to locate the\n+   * corresponding helper class.\n+   */\n+  public void _write(OutputStream output)\n+  {\n+    findHelper();\n+    if (helper == null)\n+      super._write(output);\n+    else\n+      Vio.write(output, value, helper);\n+  }\n+\n+  /**\n+   * Read, trying to locate helper, if possible.\n+   */\n+  public void _read(InputStream input)\n+  {\n+    findHelper();\n+    if (helper == null)\n+      super._read(input);\n+    else\n+      value = Vio.read(input, helper);\n+  }\n+\n+  /**\n+   * Set the read and write methods.\n+   */\n+  void findHelper()\n+  {\n+    if (helper != null || helper_NA)\n+      return;\n+    try\n+      {\n+        Class helperClass =\n+          Class.forName(ObjectCreator.toHelperName(type.id()));\n+\n+        helper = (BoxedValueHelper) helperClass.newInstance();\n+      }\n+    catch (Exception ex)\n+      {\n+        helper_NA = true;\n+      }\n+  }\n+}\n\\ No newline at end of file"}, {"sha": "27634a8941b1747d1407bc367f84b81806c4b073", "filename": "libjava/classpath/gnu/classpath/Pointer.java", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2FPointer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2FPointer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2FPointer.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,47 @@\n+/* Pointer.java -- Pointer to VM specific data\n+   Copyright (C) 1999, 2000, 2004  Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+/* This file is originally part of libgcj. */\n+\n+package gnu.classpath;\n+\n+/** A type used to indicate special data used by native code that should not \n+    be marked by the garbage collector. */\n+\n+public abstract class Pointer\n+{\n+}"}, {"sha": "42b6c1d2db088fc56ab19dd6b2b17e7eaa59fa3e", "filename": "libjava/classpath/gnu/classpath/Pointer32.java", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2FPointer32.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2FPointer32.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2FPointer32.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,52 @@\n+/* Pointer32.java -- 32 bit Pointer\n+   Copyright (C) 2004  Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.classpath;\n+\n+/**\n+ * A type used to indicate special data used by native code that should not \n+ * be marked by the garbage collector.\n+ */\n+public final class Pointer32 extends Pointer\n+{\n+   final int data;\n+   \n+   public Pointer32(int data)\n+   {\n+     this.data = data;\n+   }\n+}"}, {"sha": "6d27e1ba1334905452f9e41aae8dedce36c5c118", "filename": "libjava/classpath/gnu/classpath/Pointer64.java", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2FPointer64.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2FPointer64.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2FPointer64.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,52 @@\n+/* Pointer64.java -- 64 bit Pointer\n+   Copyright (C) 2004  Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.classpath;\n+\n+/**\n+ * A type used to indicate special data used by native code that should not \n+ * be marked by the garbage collector.\n+ */\n+public final class Pointer64 extends Pointer\n+{\n+   final long data;\n+   \n+   public Pointer64(long data)\n+   {\n+     this.data = data;\n+   }\n+}"}, {"sha": "bb8f60224ce9ddc5f20a27bab1ff317359042388", "filename": "libjava/classpath/gnu/classpath/jdwp/Jdwp.java", "status": "added", "additions": 302, "deletions": 0, "changes": 302, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2FJdwp.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2FJdwp.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2FJdwp.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,302 @@\n+/* Jdwp.java -- Virtual machine to JDWP back-end programming interface\n+   Copyright (C) 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp;\n+\n+import gnu.classpath.jdwp.event.Event;\n+import gnu.classpath.jdwp.event.EventManager;\n+import gnu.classpath.jdwp.event.EventRequest;\n+import gnu.classpath.jdwp.id.ThreadId;\n+import gnu.classpath.jdwp.processor.PacketProcessor;\n+import gnu.classpath.jdwp.transport.ITransport;\n+import gnu.classpath.jdwp.transport.JdwpConnection;\n+import gnu.classpath.jdwp.transport.TransportException;\n+import gnu.classpath.jdwp.transport.TransportFactory;\n+\n+import java.io.IOException;\n+import java.security.AccessController;\n+import java.util.HashMap;\n+\n+/**\n+ * Main interface from the virtual machine to the JDWP back-end.\n+ *\n+ * @author Keith Seitz (keiths@redhat.com)\n+ */\n+public class Jdwp\n+  extends Thread\n+{\n+  // The single instance of the back-end\n+  private static Jdwp _instance = null;\n+\n+  /**\n+   * Are we debugging?\n+   */\n+  public static boolean isDebugging = false;\n+\n+  // Packet processor\n+  private PacketProcessor _packetProcessor;\n+  private Thread _ppThread;\n+\n+  // JDWP configuration properties\n+  private HashMap _properties;\n+\n+  // The suspend property of the configure string\n+  // (-Xrunjdwp:..suspend=<boolean>)\n+  private static final String _PROPERTY_SUSPEND = \"suspend\";\n+\n+  // User's main application thread\n+  private Thread _mainThread;\n+\n+  // Connection to debugger\n+  private JdwpConnection _connection;\n+\n+  // Are we shutting down the current session?\n+  private boolean _shutdown;\n+\n+  // A thread group for the JDWP threads\n+  private ThreadGroup _group;\n+\n+  /**\n+   * constructor\n+   */\n+  public Jdwp ()\n+  {\n+    _shutdown = false;\n+    isDebugging = true;\n+    _instance = this;\n+  }\n+\n+  /**\n+   * Returns the JDWP back-end, creating an instance of it\n+   * if one does not already exist.\n+   */\n+  public static Jdwp getDefault ()\n+  {\n+    return _instance;\n+  }\n+\n+  /**\n+   * Should the virtual machine suspend on startup?\n+   */\n+  public static boolean suspendOnStartup ()\n+  {\n+    Jdwp jdwp = getDefault ();\n+    if (jdwp != null)\n+      {\n+\tString suspend = (String) jdwp._properties.get (_PROPERTY_SUSPEND);\n+\tif (suspend != null && suspend.equals (\"y\"))\n+\t  return true;\n+      }\n+\n+    return false;\n+  }\n+\n+  /**\n+   * Configures the back-end\n+   *\n+   * @param configArgs  a string of configury options\n+   * @param mainThread  the main application thread\n+   */\n+  public void configure (String configArgs, Thread mainThread)\n+  {\n+    _mainThread = mainThread;\n+    _processConfigury (configArgs);\n+  }\n+\n+  // A helper function to initialize the transport layer\n+  private void _doInitialization ()\n+    throws TransportException\n+  {\n+    _group = new ThreadGroup (\"JDWP threads\");\n+    // initialize transport\n+    ITransport transport = TransportFactory.newInstance (_properties);\n+    _connection = new JdwpConnection (_group, transport);\n+    _connection.initialize ();\n+    _connection.start ();\n+\n+    // Create processor\n+    _packetProcessor = new PacketProcessor (_connection);\n+    _ppThread = new Thread (_group, new Runnable ()\n+      {\n+\tpublic void run ()\n+\t{\n+\t  AccessController.doPrivileged (_packetProcessor);\n+\t}\n+      });\n+    _ppThread.start ();\n+  }\n+\n+  /**\n+   * Shutdown the JDWP back-end\n+   *\n+   * NOTE: This does not quite work properly. See notes in \n+   * run() on this subject (catch of InterruptedException).\n+   */\n+  public void shutdown ()\n+  {\n+    if (!_shutdown)\n+      {\n+\t_packetProcessor.shutdown ();\n+\t_ppThread.interrupt ();\n+\t_connection.shutdown ();\n+\t_shutdown = true;\n+\tisDebugging = false;\n+\n+\t/* FIXME: probably need to check state of user's\n+\t   program -- if it is suspended, we need to either\n+\t   resume or kill them. */\n+\n+\tinterrupt ();\n+      }\n+  }\n+\n+  /**\n+   * Notify the debugger of an event. This method should not\n+   * be called if debugging is not active (but it would not\n+   * cause any harm). Places where event notifications occur\n+   * should check isDebugging before doing anything.\n+   *\n+   * The event is filtered through the event manager before being\n+   * sent.\n+   *\n+   * FIXME: Probably need logic to send multiple events\n+   * @param event the event to report\n+   */\n+  public static void notify (Event event)\n+  {\n+    Jdwp jdwp = getDefault ();\n+    if (jdwp != null)\n+      {\n+\tEventManager em = EventManager.getDefault ();\n+\tEventRequest request = em.getEventRequest (event);\n+\tif (request != null)\n+\t  sendEvent (request, event);\n+      }\n+  }\n+  \n+  /**\n+   * Sends the event to the debugger.\n+   *\n+   * This method bypasses the event manager's filtering.\n+   *\n+   * @param  request  the debugger request for the event\n+   * @param  event    the event to send\n+   */\n+  public static void sendEvent (EventRequest request, Event event)\n+  {\n+    Jdwp jdwp = getDefault ();\n+    if (jdwp != null)\n+      {\n+\ttry\n+\t  {\n+\t    // !! May need to implement send queue?\n+\t    synchronized (jdwp._connection)\n+\t      {\n+\t\tjdwp._connection.sendEvent (request, event);\n+\t      }\n+\t    \n+\t    // Follow suspend policy\n+\t    jdwp._enforceSuspendPolicy (request.getSuspendPolicy ());\n+\t  }\n+\tcatch (IOException ie)\n+\t  {\n+\t    System.out.println (\"Jdwp.notify: caught exception: \" + ie);\n+\t  }\n+      }\n+  }\n+\n+  // Helper function to enforce suspend policies on event notification\n+  private void _enforceSuspendPolicy (byte suspendPolicy)\n+  {\n+    switch (suspendPolicy)\n+      {\n+      case EventRequest.SUSPEND_NONE:\n+\t// do nothing\n+\tbreak;\n+\n+      case EventRequest.SUSPEND_THREAD:\n+\tVMVirtualMachine.suspendThread (this);\n+\tbreak;\n+\n+      case EventRequest.SUSPEND_ALL:\n+\tVMVirtualMachine.suspendAllThreads ();\n+\tbreak;\n+      }\n+  }\n+\n+  public void run ()\n+  {\n+    try\n+      {\n+\t_doInitialization ();\n+\n+\t_mainThread.start ();\n+\n+\t_mainThread.join ();\n+      }\n+    catch (InterruptedException ie)\n+      {\n+\t/* Shutting down. If we're in server mode, we should\n+\t   prepare for a new connection. Otherwise, we should\n+\t   simply exit. */\n+\t// FIXME\n+      }\n+    catch (Throwable t)\n+      {\n+\tSystem.out.println (\"Exception in JDWP back-end: \" + t);\n+\tSystem.exit (1);\n+      }\n+  }\n+\n+  // A helper function to process the configure string \"-Xrunjdwp:...\"\n+  private void _processConfigury (String configString)\n+  {\n+    // Loop through configuration arguments looking for a\n+    // transport name\n+    _properties = new HashMap ();\n+    String[] options = configString.split (\",\");\n+    for (int i = 0; i < options.length; ++i)\n+      {\n+\tString[] property = options[i].split (\"=\");\n+\tif (property.length == 2)\n+\t  _properties.put (property[0], property[1]);\n+\t// ignore malformed options\n+      }\n+  }\n+}"}, {"sha": "f38774d622e62e6a69a5144d8e562cbcd4b54852", "filename": "libjava/classpath/gnu/classpath/jdwp/JdwpConstants.java", "status": "added", "additions": 901, "deletions": 0, "changes": 901, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2FJdwpConstants.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2FJdwpConstants.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2FJdwpConstants.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,901 @@\n+/* JdwpConstants.java -- Constants defined by JDWP 1.4 specification\n+   Copyright (C) 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp;\n+\n+/**\n+ * Constants defined by JDWP specification.\n+ *\n+ * @author Keith Seitz  (keiths@redhat.com)\n+ */\n+public class JdwpConstants\n+{\n+  public static final class Version\n+  {\n+    public static final int MAJOR = 1;\n+    public static final int MINOR = 4;\n+  }\n+  \n+  ////////////////////////////////////////\n+  //           Commands/Sets            //\n+  ////////////////////////////////////////\n+\n+  public static final class CommandSet\n+  {\n+    public static final class VirtualMachine\n+    {\n+      public static final byte CS_VALUE = 1;\n+\n+      // commands\n+      public static final byte VERSION = 1;\n+      public static final byte CLASSES_BY_SIGNATURE = 2;\n+      public static final byte ALL_CLASSES = 3;\n+      public static final byte ALL_THREADS = 4;\n+      public static final byte TOP_LEVEL_THREAD_GROUPS = 5;\n+      public static final byte DISPOSE = 6;\n+      public static final byte IDSIZES = 7;\n+      public static final byte SUSPEND = 8;\n+      public static final byte RESUME = 9;\n+      public static final byte EXIT = 10;\n+      public static final byte CREATE_STRING = 11;\n+      public static final byte CAPABILITIES = 12;\n+      public static final byte CLASS_PATHS = 13;\n+      public static final byte DISPOSE_OBJECTS = 14;\n+      public static final byte HOLD_EVENTS = 15; \n+      public static final byte RELEASE_EVENTS = 16;\n+      public static final byte CAPABILITIES_NEW = 17;\n+      public static final byte REDEFINE_CLASSES = 18;\n+      public static final byte SET_DEFAULT_STRATUM = 19;\n+      public static final byte ALL_CLASSES_WITH_GENERIC = 20;\n+    }\n+\n+    public static final class ReferenceType\n+    {\n+      public static final byte CS_VALUE = 2;\n+\n+      // commands\n+      public static final byte SIGNATURE= 1;\n+      public static final byte CLASS_LOADER= 2;\n+      public static final byte MODIFIERS = 3;\n+      public static final byte FIELDS = 4;\n+      public static final byte METHODS = 5; \n+      public static final byte GET_VALUES = 6;\n+      public static final byte SOURCE_FILE = 7;\n+      public static final byte NESTED_TYPES = 8;\n+      public static final byte STATUS = 9;\n+      public static final byte INTERFACES= 10;\n+      public static final byte CLASS_OBJECT = 11;\n+      public static final byte SOURCE_DEBUG_EXTENSION = 12;\n+      public static final byte SIGNATURE_WITH_GENERIC = 13;\n+      public static final byte FIELDS_WITH_GENERIC = 14;\n+      public static final byte METHODS_WITH_GENERIC = 15;\n+    }\n+\n+    public static final class ClassType\n+    {\n+      public static final byte CS_VALUE = 3;\n+\n+      // commands\n+      public static final byte SUPERCLASS = 1;\n+      public static final byte SET_VALUES = 2;\n+      public static final byte INVOKE_METHOD = 3;\n+      public static final byte NEW_INSTANCE = 4;\n+    }\n+\n+    public static final class ArrayType\n+    {\n+      public static final byte CS_VALUE = 4;\n+\n+      // commands\n+      public static final byte NEW_INSTANCE = 1;\n+    }\n+\n+    public static final class InterfaceType\n+    {\n+      public static final byte CS_VALUE = 5;\n+\n+      // commands\n+    }\n+\n+    public static final class Method\n+    {\n+      public static final byte CS_VALUE = 6;\n+\n+      // commands\n+      public static final byte LINE_TABLE = 1;\n+      public static final byte VARIABLE_TABLE = 2;\n+      public static final byte BYTE_CODES = 3;\n+      public static final byte IS_OBSOLETE = 4;\n+      public static final byte VARIABLE_TABLE_WITH_GENERIC = 5;\n+    }\n+\n+    public static final class Field\n+    {\n+      public static final byte CS_VALUE = 8;\n+\n+      // commands\n+    }\n+\n+    public static final class ObjectReference\n+    {\n+      public static final byte CS_VALUE = 9;\n+\n+      // commands\n+      public static final byte REFERENCE_TYPE = 1;\n+      public static final byte GET_VALUES = 2;\n+      public static final byte SET_VALUES = 3;\n+      public static final byte MONITOR_INFO = 5;\n+      public static final byte INVOKE_METHOD = 6;\n+      public static final byte DISABLE_COLLECTION = 7;\n+      public static final byte ENABLE_COLLECTION = 8;\n+      public static final byte IS_COLLECTED = 9;\n+    }\n+\n+    public static final class StringReference\n+    {\n+      public static final byte CS_VALUE = 10;\n+\n+      // commands\n+      public static final byte VALUE = 1;\n+    }\n+\n+    public static final class ThreadReference\n+    {\n+      public static final byte CS_VALUE = 11;\n+\n+      // commands\n+      public static final byte NAME = 1;\n+      public static final byte SUSPEND = 2;\n+      public static final byte RESUME = 3;\n+      public static final byte STATUS = 4;\n+      public static final byte THREAD_GROUP = 5;\n+      public static final byte FRAMES = 6;\n+      public static final byte FRAME_COUNT = 7;\n+      public static final byte OWNED_MONITORS = 8;\n+      public static final byte CURRENT_CONTENDED_MONITOR = 9;\n+      public static final byte STOP = 10;\n+      public static final byte INTERRUPT = 11;\n+      public static final byte SUSPEND_COUNT = 12;\n+    }\n+\n+    public static final class ThreadGroupReference\n+    {\n+      public static final byte CS_VALUE = 12;\n+\n+      // commands\n+      public static final byte NAME = 1;\n+      public static final byte PARENT = 2;\n+      public static final byte CHILDREN = 3;\n+    }\n+\n+    public static final class ArrayReference\n+    {\n+      public static final byte CS_VALUE = 13;\n+\n+      // commands\n+      public static final byte LENGTH = 1;\n+      public static final byte GET_VALUES = 2;\n+      public static final byte SET_VALUES = 3;\n+    }\n+\n+    public static final class ClassLoaderReference\n+    {\n+      public static final byte CS_VALUE = 14;\n+\n+      // commands\n+      public static final byte VISIBLE_CLASSES = 1;\n+    }\n+\n+    public static final class EventRequest\n+    {\n+      public static final byte CS_VALUE = 15;\n+\n+      // commands\n+      public static final byte SET = 1;\n+      public static final byte CLEAR = 2;\n+      public static final byte CLEAR_ALL_BREAKPOINTS = 3;\n+    }\n+\n+    public static final class StackFrame\n+    {\n+      public static final byte CS_VALUE = 16;\n+\n+      // commands\n+      public static final byte GET_VALUES = 1;\n+      public static final byte SET_VALUES = 2;\n+      public static final byte THIS_OBJECT = 3;\n+      public static final byte POP_FRAMES = 4;\n+    }\n+\n+    public static final class ClassObjectReference\n+    {\n+      public static final byte CS_VALUE = 17;\n+\n+      // commands\n+      public static final byte REFLECTED_TYPE = 1;\n+    }\n+\n+    public static final int MAXIMUM = ClassObjectReference.CS_VALUE;\n+\n+    public static final class Event\n+    {\n+      public static final byte CS_VALUE = 64;\n+\n+      // commands\n+      public static final byte COMPOSITE = 100;\n+    }\n+  }\n+\n+  ////////////////////////////////////////\n+  //             Constants              //\n+  ////////////////////////////////////////\n+\n+  /*\n+   * Error constants\n+   */\n+  public static final class Error\n+  {\n+    /**\n+     * No error has occurred\n+     */\n+    public static final short NONE = 0;\n+\n+    /**\n+     * Passed thread is null, is not a valid thread or has exited\n+     */\n+    public static final short INVALID_THREAD = 10;\n+\n+    /**\n+     * Thread group invalid\n+     */\n+    public static final short INVALID_THREAD_GROUP = 11;\n+\n+    /**\n+     * Invalid priority\n+     */\n+    public static final short INVALID_PRIORITY = 12;\n+\n+    /**\n+     * Specified thread has not been suspended by an event\n+     */\n+    public static final short THREAD_NOT_SUSPENDED = 13;\n+\n+    /**\n+     * Thread already suspended\n+     */\n+    public static final short THREAD_SUSPENDED = 14;\n+\n+    /**\n+     * Reference type has been unloaded and garbage collected\n+     */\n+    public static final short INVALID_OBJECT = 20;\n+\n+    /**\n+     * Invalid class\n+     */\n+    public static final short INVALID_CLASS = 21;\n+\n+    /**\n+     * Class has been loaded but not yet prepared\n+     */\n+    public static final short CLASS_NOT_PREPARED = 22;\n+\n+    /**\n+     * Invalid method\n+     */\n+    public static final short INVALID_METHODID = 23;\n+\n+    /**\n+     * Invalid location\n+     */\n+    public static final short INVALID_LOCATION = 24;\n+\n+    /**\n+     * Invalid field\n+     */\n+    public static final short INVALID_FIELDID = 25;\n+\n+    /**\n+     * Invaliid frame\n+     */\n+    public static final short INVALID_FRAMEID = 30;\n+\n+    /**\n+     * There are no more Java or JNI frames on the call stack\n+     */\n+    public static final short NO_MORE_FRAMES = 31;\n+\n+    /**\n+     * Information about the frame is not available\n+     */\n+    public static final short OPAQUE_FRAME = 32;\n+\n+    /**\n+     * Operation can only be performed on current frame\n+     */\n+    public static final short NOT_CURRENT_FRAME = 33;\n+\n+    /**\n+     * Variable is not an appropriate type for the function used\n+     */\n+    public static final short TYPE_MISMATCH = 34;\n+\n+    /**\n+     * Invalid slot\n+     */\n+    public static final short INVALID_SLOT = 35;\n+\n+    /**\n+     * Item already set\n+     */\n+    public static final short DUPLICATE = 40;\n+\n+    /**\n+     * Desired element not found\n+     */\n+    public static final short NOT_FOUND = 41;\n+\n+    /**\n+     * Invalid monitor\n+     */\n+    public static final short INVALID_MONITOR = 50;\n+\n+    /**\n+     * Thread doesn't own the monitor\n+     */\n+    public static final short NOT_MONITOR_OWNER = 51;\n+\n+    /**\n+     * Call has been interrupted before completion\n+     */\n+    public static final short INTERRUPT = 52;\n+\n+    /**\n+     * Virtual machine attempted to read a class file and determined that\n+     * the file is malformed or otherwise cannot be interpreted as a class\n+     * file\n+     */\n+    public static final short INVALID_CLASS_FORMAT = 60;\n+\n+    /**\n+     * Circularity has been detected while initializing a class\n+     */\n+    public static final short CIRCULAR_CLASS_DEFINITION = 61;\n+\n+    /**\n+     * Verifier detected that a class file, though well formed, contained\n+     * some sort of internal inconsistency or security problem\n+     */\n+    public static final short FAILS_VERIFICATION = 62;\n+\n+    /**\n+     * Adding methods has not been implemented\n+     */\n+    public static final short ADD_METHOD_NOT_IMPLEMENTED = 63;\n+\n+    /**\n+     * Schema change has not been implemented\n+     */\n+    public static final short SCHEMA_CHANGE_NOT_IMPLEMENTED = 64;\n+\n+    /**\n+     * State of the thread has been modified and is now inconsistent\n+     */\n+    public static final short INVALID_TYPESTATE = 65;\n+\n+    /**\n+     * A direct superclass is different for the new class version, or the set\n+     * of directly implemented interfaces is different and\n+     * <code>canUnrestrictedlyRedefineClasses</code> is false\n+     */\n+    public static final short HIERARCHY_CHANGE_NOT_IMPLEMENTED = 66;\n+\n+    /**\n+     * New class version does not declare a method declared in the old\n+     * class version and <code>canUnrestrictedlyRedefineClasses</code>\n+     * is false\n+     */\n+    public static final short DELETE_METHOD_NOT_IMPLEMENTED = 67;\n+\n+    /**\n+     * Class file has a version number not supported by this VM\n+     */\n+    public static final short UNSUPPORTED_VERSION = 68;\n+\n+    /**\n+     * Class name defined in the new class file is different from the name\n+     * in the old class object\n+     */\n+    public static final short NAMES_DONT_MATCH = 69;\n+\n+    /**\n+     * New class version has different modifiers and\n+     * <code>canUnrestrictedlyRedefineClasses</code> is false\n+     */\n+    public static final short CLASS_MODIFIERS_CHANGE_NOT_IMPLEMENTED = 70;\n+\n+    /**\n+     * A method in the new class version has different modifiers than its\n+     * counterpart in the old class version and\n+     * <code>canUnrestrictedlyRedefineClasses</code> is false.\n+     */\n+    public static final short METHOD_MODIFIERS_CHANGE_NOT_IMPLEMENTED = 71;\n+\n+    /**\n+     * Functionality is not implemented in this virtual machine\n+     */\n+    public static final short NOT_IMPLEMENTED = 99;\n+\n+    /**\n+     * Invalid pointer\n+     */\n+    public static final short NULL_POINTER = 100;\n+\n+    /**\n+     * Desired information is not available\n+     */\n+    public static final short ABSENT_INFORMATION = 101;\n+\n+    /**\n+     * Specified event type id is not recognized\n+     */\n+    public static final short INVALID_EVENT_TYPE = 102;\n+\n+    /**\n+     * Illegal argument\n+     */\n+    public static final short ILLEGAL_ARGUMENT = 103;\n+\n+    /**\n+     * The function needed to allocate memory and no more memory was\n+     * available for allocation\n+     */\n+    public static final short OUT_OF_MEMORY = 110;\n+\n+    /**\n+     * Debugging has not been enabled in this virtual machine. JVMDI cannot\n+     * be used\n+     */\n+    public static final short ACCESS_DENIED = 111;\n+\n+    /**\n+     * The virtual machine is not running\n+     */\n+    public static final short VM_DEAD = 112;\n+\n+    /**\n+     * An unexpected internal error has occurred\n+     */\n+    public static final short INTERNAL = 113;\n+\n+    /**\n+     * The thread being used to call this function is not attached to the\n+     * virtual machine. Calls must be made from attached threads.\n+     */\n+    public static final short UNATTACHED_THREAD = 115;\n+\n+    /**\n+     * Invalid object type id or class tag\n+     */\n+    public static final short INVALID_TAG = 500;\n+\n+    /**\n+     * Previous invoke not complete\n+     */\n+    public static final short ALREADY_INVOKING = 502;\n+\n+    /**\n+     * Invalid index\n+     */\n+    public static final short INVALID_INDEX = 503;\n+\n+    /**\n+     * Invalid length\n+     */\n+    public static final short INVALID_LENGTH = 504;\n+\n+    /**\n+     * Invalid string\n+     */\n+    public static final short INVALID_STRING = 506;\n+\n+    /**\n+     * Invalid class loader\n+     */\n+    public static final short INVALID_CLASS_LOADER = 507;\n+\n+    /**\n+     * Invalid array\n+     */\n+    public static final short INVALID_ARRAY = 508;\n+\n+    /**\n+     * Unable to load the transport\n+     */\n+    public static final short TRANSPORT_LOAD = 509;\n+\n+    /**\n+     * Unablie to initialize the transport\n+     */\n+    public static final short TRANSPORT_INIT = 510;\n+\n+    /**\n+     * Method is native\n+     */\n+    public static final short NATIVE_METHOD = 511;\n+\n+    /**\n+     * Invalid count\n+     */\n+    public static final short INVALID_COUNT = 512;\n+  }\n+\n+  /*\n+   * EventKind constants\n+   */\n+  public static final class EventKind\n+  {\n+    public static final byte SINGLE_STEP = 1;\n+    public static final byte BREAKPOINT = 2;\n+    public static final byte FRAME_POP = 3;\n+    public static final byte EXCEPTION = 4;\n+    public static final byte USER_DEFINED = 5;\n+    public static final byte THREAD_START = 6;\n+    public static final byte THREAD_END = 7;\n+    public static final byte CLASS_PREPARE = 8;\n+    public static final byte CLASS_UNLOAD = 9;\n+    public static final byte CLASS_LOAD = 10;\n+    public static final byte FIELD_ACCESS = 20;\n+    public static final byte FIELD_MODIFICATION = 21;\n+    public static final byte EXCEPTION_CATCH = 30;\n+    public static final byte METHOD_ENTRY = 40;\n+    public static final byte METHOD_EXIT = 41;\n+    public static final byte VM_INIT = 90;\n+    public static final byte VM_DEATH = 99;    \n+    public static final byte VM_DISCONNECTED = 100;\n+\n+    public static final byte VM_START = VM_INIT;\n+    public static final byte THREAD_DEATH = THREAD_END;\n+  }\n+\n+  /*\n+   * ModKind constants (event filters)\n+   */\n+  public static final class ModKind\n+  {\n+    /**\n+     * Limit the requested event to be reported at most once after a\n+     * given number of occurrences. May be used with any event.\n+     */\n+    public static final byte COUNT = 1;\n+\n+    /**\n+     * Conditional on expression\n+     */\n+    public static final byte CONDITIONAL = 2;\n+\n+    /**\n+     * Restricts reported events to those in the given thread.\n+     * May be used with any event except for class unload.\n+     */\n+    public static final byte THREAD_ONLY = 3;\n+\n+    /**\n+     * For class prepare events, restricts generated events \n+     * to be the preparation of the given reference type and any\n+     * subtypes.\n+     *\n+     * For other events, restricts the generated events to those where\n+     * location is in the given reference type or any of its subtypes.\n+     *\n+     * An event will be generated for any location in a reference type\n+     * that can be safely cast to the given reference type.\n+     *\n+     * May be used with any event except class unload, thread start,\n+     * and thread end.\n+     */\n+    public static final byte CLASS_ONLY = 4;\n+\n+    /**\n+     * Restricts reported events to those for classes whose name matches\n+     * the given restricted regular expression.\n+     *\n+     * For class prepare events, the prepared class name is matched.\n+     * For class unload events, the unloaded class name is matched.\n+     * For other events, the class name of the event's location is matched.\n+     *\n+     * May be used with any event except thread start and thread end.\n+     */\n+    public static final byte CLASS_MATCH = 5;\n+\n+    /**\n+     * Restricts reported events to those for classes whose name does not\n+     * match the given restricted regular expression.\n+     * \n+     * For class prepare events, the prepared class name is matched.\n+     * For class unload events, the unloaded class name is matched.\n+     * For other events, the class name of the event's location is matched.\n+     *\n+     * May be used with any event except thread start and thread end.\n+     */\n+    public static final byte CLASS_EXCLUDE = 6;\n+\n+    /**\n+     * Restricts reported events to those that occur at the given location.\n+     *\n+     * May be used with breakpoint, field access, field modification, step,\n+     * and exception event kinds.\n+     */\n+    public static final byte LOCATION_ONLY = 7;\n+\n+    /**\n+     * Restricts reported exceptions by their class and whether they are\n+     * caught or uncaught.\n+     *\n+     * May be used with exception event kinds only.\n+     */\n+    public static final byte EXCEPTION_ONLY = 8;\n+\n+    /**\n+     * Restricts reported events to those that occur for a given field.\n+     *\n+     * May be used with field access and field modification event kinds only.\n+     */\n+    public static final byte FIELD_ONLY = 9;\n+\n+    /**\n+     * Restricts reported step events to those which satisfy depth and\n+     * size constraints.\n+     * \n+     * May be used with step event kinds only.\n+     */\n+    public static final byte STEP = 10;\n+\n+    /**\n+     * Restricts reported events to those whose active 'this' object is\n+     * the given object. Match value is the null object for static methods.\n+     *\n+     * May be used with any event except class prepare, class unload,\n+     * thread start, and thread end.\n+     */\n+    public static final byte INSTANCE_ONLY = 11;\n+  }\n+\n+  /*\n+   * ThreadStatus constants\n+   */\n+  public static final class ThreadStatus\n+  {\n+    public static final int ZOMBIE = 0;\n+    public static final int RUNNING = 1;\n+    public static final int SLEEPING = 2;\n+    public static final int MONITOR = 3;\n+    public static final int WAIT = 4;\n+  }\n+\n+  /*\n+   * SuspendStatus constants\n+   */\n+  public static final class SuspendStatus\n+  {\n+    public static final byte SUSPENDED = 1;\n+  }\n+\n+  /*\n+   * ClassStatus constants\n+   */\n+  public static final class ClassStatus\n+  {\n+    public static final int VERIFIED = 1;\n+    public static final int PREPARED = 2;\n+    public static final int INITIALIZED = 4;\n+    public static final int ERROR = 8;\n+  }\n+\n+  /*\n+   * TypeTag constants\n+   */\n+  public static final class TypeTag\n+  {\n+    public static final byte CLASS = 1;\n+    public static final byte INTERFACE = 2;\n+    public static final byte ARRAY = 3;\n+  }\n+\n+  /*\n+   * Tag constants\n+   */\n+  public static final class Tag\n+  {\n+    /**\n+     * Array object (objectID size)\n+     */\n+    public static final byte ARRAY = '[';\n+\n+    /**\n+     * Byte value (1 byte)\n+     */\n+    public static final byte BYTE = 'B';\n+\n+    /**\n+     * Character value (2 bytes)\n+     */\n+    public static final byte CHAR = 'C';\n+\n+    /**\n+     * Object (objectID size)\n+     */\n+    public static final byte OBJECT = 'L';\n+\n+    /**\n+     * Float value (4 bytes)\n+     */\n+    public static final byte FLOAT = 'F';\n+\n+    /**\n+     * Double value (8 bytes)\n+     */\n+    public static final byte DOUBLE = 'D';\n+\n+    /**\n+     * Int value (4 bytes)\n+     */\n+    public static final byte INT = 'I';\n+\n+    /**\n+     * Long value (8 bytes)\n+     */\n+    public static final byte LONG = 'J';\n+\n+    /**\n+     * Short value (2 bytes)\n+     */\n+    public static final byte SHORT = 'S';\n+\n+    /**\n+     * Void value (no bytes)\n+     */\n+    public static final byte  VOID = 'V';\n+\n+    /**\n+     * Boolean value (1 byte)\n+     */\n+    public static final byte BOOLEAN = 'Z';\n+\n+    /**\n+     * String object (objectID size)\n+     */\n+    public static final byte STRING = 's';\n+\n+    /**\n+     * Thread object (objectID size)\n+     */\n+    public static final byte THREAD = 't';\n+\n+    /**\n+     * ThreadGroup object (objectID size)\n+     */\n+    public static final byte THREAD_GROUP = 'g';\n+\n+    /**\n+     * ClassLoader object (objectID size)\n+     */\n+    public static final byte CLASS_LOADER = 'l';\n+\n+    /**\n+     * Class object object (objectID size)\n+     */\n+    public static final byte CLASS_OBJECT = 'c';\n+  }\n+\n+  /*\n+   * StepDepth constants\n+   */\n+  public static final class StepDepth\n+  {\n+    /**\n+     * Step into any method calls that occur before the end of the step\n+     */\n+    public static final int INTO = 0;\n+\n+    /**\n+     * Step over any method calls that occur before the end of the step\n+     */\n+    public static final int OVER = 1;\n+\n+    /**\n+     * Step out of the current method\n+     */\n+    public static final int OUT = 2;\n+  }\n+\n+  /*\n+   * StepSize constants\n+   */\n+  public static final class StepSize\n+  {\n+    /**\n+     * Step by the minimum possible amount (often a bytecode instruction)\n+     */\n+    public static final int MIN = 0;\n+\n+    /**\n+     * Step to the next source line unless there is no line number information,\n+     * in which case MIN step is done instead\n+     */\n+    public static final int LINE = 1;\n+  }\n+\n+  /*\n+   * SuspendPolicy constants\n+   */\n+  public static final class SuspendPolicy\n+  {\n+    /**\n+     * Suspend no threads when this event is encountered\n+     */\n+    public static final byte NONE = 0;\n+\n+    /**\n+     * Suspend the event thread when this event is encountered\n+     */\n+    public static final byte EVENT_THREAD = 1;\n+\n+    /**\n+     * Suspend all threads when this event is encountered\n+     */\n+    public static final byte ALL = 2;\n+  }\n+\n+  /*\n+   * InvokeOptions flag constants\n+   */\n+  public static final class InvokeOptions\n+  {\n+    /**\n+     * otherwise, all threads started\n+     */\n+    public static final int INVOKE_SINGLE_THREADED = 0x1;\n+\n+    /**\n+     * otherwise, normal virtual invoke (instance methods only)\n+     */\n+    public static final int INVOKE_NONVIRTUAL = 0x2;\n+  }\n+}"}, {"sha": "22cede0c50a138e735b58eda03fa31839394de8a", "filename": "libjava/classpath/gnu/classpath/jdwp/event/ClassPrepareEvent.java", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FClassPrepareEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FClassPrepareEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FClassPrepareEvent.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,147 @@\n+/* ClassPrepareEvent.java -- An event specifying that a class has been\n+   prepared by the virtual machine\n+   Copyright (C) 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.event;\n+\n+import gnu.classpath.jdwp.JdwpConstants;\n+import gnu.classpath.jdwp.VMIdManager;\n+import gnu.classpath.jdwp.id.ReferenceTypeId;\n+import gnu.classpath.jdwp.id.ThreadId;\n+import gnu.classpath.jdwp.util.JdwpString;\n+import gnu.classpath.jdwp.util.Signature;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+/**\n+ * \"Notification of a class prepare in the target VM. See the JVM\n+ * specification for a definition of class preparation. Class prepare\n+ * events are not generated for primtiive classes (for example,\n+ * <code>java.lang.Integer.TYPE</code>).\" -- JDWP 1.4.2\n+ *\n+ * @author Keith Seitz  (keiths@redhat.com)\n+ */\n+public class ClassPrepareEvent\n+  extends Event\n+{\n+  // The thread in which this event occurred\n+  private Thread _thread;\n+\n+  // The class that was prepared\n+  private Class _class;\n+\n+  // Prepare flags\n+  private int _status;\n+\n+  /**\n+   * Class has been verified\n+   */\n+  public static final int STATUS_VERIFIED\n+      = JdwpConstants.ClassStatus.VERIFIED;\n+\n+  /**\n+   * Class has been prepared\n+   */\n+  public static final int STATUS_PREPARED\n+      = JdwpConstants.ClassStatus.PREPARED;\n+\n+  /**\n+   * Class has been initialized\n+   */\n+  public static final int STATUS_INITIALIZED\n+      = JdwpConstants.ClassStatus.INITIALIZED;\n+\n+  /**\n+   * Error preparing class\n+   */\n+  public static final int STATUS_ERROR\n+      = JdwpConstants.ClassStatus.ERROR;\n+\n+  /**\n+   * Constructs a new <code>ClassPrepareEvent</code>\n+   *\n+   * @param thread  thread in which event occurred\n+   * @param clazz   class which was prepared\n+   * @param flags   prepare status flags\n+   */\n+  public ClassPrepareEvent (Thread thread, Class clazz, int flags)\n+  {\n+    super (JdwpConstants.EventKind.CLASS_PREPARE);\n+    _thread = thread;\n+    _class = clazz;\n+    _status = flags;\n+  }\n+\n+  /**\n+   * Returns a specific filtering parameter for this event.\n+   * Valid types are thread and class.\n+   *\n+   * @param type  the type of parameter desired\n+   * @returns the desired parameter or <code>null</code>\n+   */\n+  public Object getParameter (Class type)\n+  {\n+    if (type == ThreadId.class)\n+      return _thread;\n+    else if (type == ReferenceTypeId.class)\n+      return _class;\n+\n+    return null;\n+  }\n+\n+  /**\n+   * Writes the event to the given stream\n+   *\n+   * @param outStream  the output stream to write the event to\n+   */\n+  protected void _writeData (DataOutputStream outStream)\n+    throws IOException\n+  {\n+    VMIdManager idm = VMIdManager.getDefault();\n+    ThreadId tid = (ThreadId) idm.getObjectId (_thread);\n+    ReferenceTypeId rid = idm.getReferenceTypeId (_class);\n+\n+    tid.write (outStream);\n+    rid.writeTagged (outStream);\n+    JdwpString.writeString (outStream,\n+\t\t\t    Signature.computeClassSignature (_class));\n+    outStream.writeInt (_status);\n+  }\n+}"}, {"sha": "14e5b78fc149dbff92ce0a934a9487bbcd4c4f48", "filename": "libjava/classpath/gnu/classpath/jdwp/event/Event.java", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FEvent.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,130 @@\n+/* Event.java -- a base class for all event types\n+   Copyright (C) 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.event;\n+\n+import gnu.classpath.jdwp.JdwpConstants;\n+import gnu.classpath.jdwp.transport.JdwpCommandPacket;\n+import gnu.classpath.jdwp.transport.JdwpPacket;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+/**\n+ * This class is a base class for all VM->debugger event\n+ * notifications.\n+ *\n+ * @author Keith Seitz  (keiths@redhat.com)\n+ */\n+public abstract class Event\n+{\n+  // The kind of event represented by this event\n+  private byte _eventKind;\n+\n+  /**\n+   * Constructs an <code>Event</code> of the given kind\n+   *\n+   * @param kind  the type of event\n+   */\n+  public Event (byte kind)\n+  {\n+    _eventKind = kind;\n+  }\n+\n+  /**\n+   * Returns the event type of this event\n+   *\n+   * @returns  the event kind\n+   */\n+  public byte getEventKind ()\n+  {\n+    return _eventKind;\n+  }\n+\n+  /**\n+   * Abstract function used by implementing classes to fill in the\n+   * event-specific data. Note that request ID is automatically added\n+   * by this class (since it appears in all event notifications).\n+   *\n+   * @param outStream  the stream to which to write data\n+   */\n+  protected abstract void _writeData (DataOutputStream outStream)\n+    throws IOException;\n+\n+  /**\n+   * Returns a specific filtering parameter for this event. For example,\n+   * most events may be filtered by thread. Consequently, a call to this\n+   * method with <code>ThreadId.class</code> should return a\n+   * <code>Thread</code>.\n+   *\n+   * @param type  the type of parameter to return\n+   * @returns the parameter (not the ID) or <code>null</code> if none is\n+   *          is defined for this event\n+   */\n+  public abstract Object getParameter (Class type);\n+\n+  /**\n+   * Converts this event into to a JDWP packet\n+   *\n+   * @param dos     the stream to which to write data\n+   * @param request the request the wanted this notification\n+   * @returns a <code>JdwpPacket</code> of the events\n+   */\n+  public JdwpPacket toPacket (DataOutputStream dos, EventRequest request)\n+  {\n+    JdwpPacket pkt;\n+    try\n+      {\n+\tdos.writeByte (request.getSuspendPolicy ());\n+\tdos.writeInt (1);\n+\tdos.writeByte (_eventKind);\n+\tdos.writeInt (request.getId ());\n+\t_writeData (dos);\n+\n+\tpkt = new JdwpCommandPacket (JdwpConstants.CommandSet.Event.CS_VALUE,\n+\t\t\t\t     JdwpConstants.CommandSet.Event.COMPOSITE);\n+      }\n+    catch (IOException ioe)\n+      {\n+\tpkt = null;\n+      }\n+\n+    return pkt;\n+  }\n+}"}, {"sha": "436a544eb3cdb86456412aec65f76e622cfc57ea", "filename": "libjava/classpath/gnu/classpath/jdwp/event/EventManager.java", "status": "added", "additions": 293, "deletions": 0, "changes": 293, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FEventManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FEventManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FEventManager.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,293 @@\n+/* EventManager.java -- event management and notification infrastructure\n+   Copyright (C) 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.event;\n+\n+import gnu.classpath.jdwp.VMVirtualMachine;\n+import gnu.classpath.jdwp.exception.InvalidEventTypeException;\n+\n+import java.util.Collection;\n+import java.util.Hashtable;\n+import java.util.Iterator;\n+\n+/**\n+ * Manages event requests and filters event notifications.\n+ *\n+ * The purpose of this class is actually two-fold:\n+ * \n+ * 1) Maintain a list of event requests from the debugger\n+ * 2) Filter event notifications from the VM\n+ * \n+ * If an event request arrives from the debugger, the back-end will\n+ * call {@link #reqestEvent}, which will first check for a valid event.\n+ * If it is valid, <code>EventManager</code> will record the request\n+ * internally and register the event with the virtual machine, which may\n+ * choose to handle the request itself (as is likely the case with\n+ * breakpoints and other execution-related events), or it may decide to\n+ * allow the <code>EventManager</code> to handle notifications and all\n+ * filtering (which is convenient for other events such as class (un)loading).\n+ * \n+ * @author Keith Seitz  (keiths@redhat.com)\n+ */\n+public class EventManager\n+{\n+  // Single instance\n+  private static EventManager _instance = new EventManager ();\n+\n+  // maps event (EVENT_*) to lists of EventRequests\n+  private Hashtable _requests = null;\n+\n+  /**\n+   * Returns an instance of the event manager\n+   *\n+   * @return the event manager\n+   */\n+  public static EventManager getDefault ()\n+  {\n+    return _instance;\n+  }\n+\n+  // Private constructs a new <code>EventManager</code>\n+  private EventManager ()\n+  {\n+    _requests = new Hashtable ();\n+\n+    // Add lists for all the event types\n+    _requests.put (new Byte (EventRequest.EVENT_SINGLE_STEP),\n+\t\t   new Hashtable ());\n+    _requests.put (new Byte (EventRequest.EVENT_BREAKPOINT),\n+\t\t   new Hashtable ());\n+    _requests.put (new Byte (EventRequest.EVENT_FRAME_POP),\n+\t\t   new Hashtable ());\n+    _requests.put (new Byte (EventRequest.EVENT_EXCEPTION),\n+\t\t   new Hashtable ());\n+    _requests.put (new Byte (EventRequest.EVENT_USER_DEFINED),\n+\t\t   new Hashtable ());\n+    _requests.put (new Byte (EventRequest.EVENT_THREAD_START),\n+\t\t   new Hashtable ());\n+    _requests.put (new Byte (EventRequest.EVENT_THREAD_END),\n+\t\t   new Hashtable ());\n+    _requests.put (new Byte (EventRequest.EVENT_CLASS_PREPARE),\n+\t\t   new Hashtable ());\n+    _requests.put (new Byte (EventRequest.EVENT_CLASS_UNLOAD),\n+\t\t   new Hashtable ());\n+    _requests.put (new Byte (EventRequest.EVENT_CLASS_LOAD),\n+\t\t   new Hashtable ());\n+    _requests.put (new Byte (EventRequest.EVENT_FIELD_ACCESS),\n+\t\t   new Hashtable ());\n+    _requests.put (new Byte (EventRequest.EVENT_FIELD_MODIFY),\n+\t\t   new Hashtable ());\n+    _requests.put (new Byte (EventRequest.EVENT_METHOD_ENTRY),\n+\t\t   new Hashtable ());\n+    _requests.put (new Byte (EventRequest.EVENT_METHOD_EXIT),\n+\t\t   new Hashtable ());\n+    _requests.put (new Byte (EventRequest.EVENT_VM_INIT),\n+\t\t   new Hashtable ());\n+    _requests.put (new Byte (EventRequest.EVENT_VM_DEATH),\n+\t\t   new Hashtable ());\n+\n+    // Add auto-generated event notifications\n+    // only two: VM_INIT, VM_DEATH\n+    try\n+      {\n+\trequestEvent (new EventRequest (0,\n+\t\t\t\t\tEventRequest.EVENT_VM_INIT,\n+\t\t\t\t\tEventRequest.SUSPEND_NONE));\n+\trequestEvent (new EventRequest (0,\n+\t\t\t\t\tEventRequest.EVENT_VM_DEATH,\n+\t\t\t\t\tEventRequest.SUSPEND_NONE));\n+      }\n+    catch (InvalidEventTypeException e)\n+      {\n+\t// This can't happen\n+      }\n+  }\n+\n+  /**\n+   * Returns a request for the given event. This method will only\n+   * be used if the <code>EventManager</code> is handling event filtering.\n+   *\n+   * @param  event  the event\n+   * @return request that was interested in this event\n+   *         or <code>null</code> if none (and event should not be sent)\n+   * @throws IllegalArgumentException for invalid event kind\n+   */\n+  public EventRequest getEventRequest (Event event)\n+  {\n+    EventRequest interestedRequest = null;\n+    Hashtable requests;\n+    Byte kind = new Byte (event.getEventKind ());\n+    requests = (Hashtable) _requests.get (kind);\n+    if (requests == null)\n+      {\n+\t// Did not get a valid event type\n+\tthrow new IllegalArgumentException (\"invalid event kind: \" + kind);\n+      }\n+    boolean match = false;\n+\n+    // Loop through the requests. Must look at ALL requests in order\n+    // to evaluate all filters (think count filter).\n+    // TODO: What if multiple matches? Spec isn't so clear on this.\n+    Iterator rIter = requests.values().iterator ();\n+    while (rIter.hasNext ())\n+      {\n+\tEventRequest request = (EventRequest) rIter.next ();\n+\tif (request.matches (event))\n+\t  interestedRequest = request;\n+      }\n+\n+    return interestedRequest;\n+  }\n+\n+  /**\n+   * Requests monitoring of an event.\n+   *\n+   * The debugger registers for event notification through\n+   * an event filter. If no event filter is specified for an event\n+   * in the VM, it is assumed that the debugger is not interested in\n+   * receiving notifications of this event.\n+   *\n+   * The virtual machine will be notified of the request.\n+   *\n+   * @param request  the request to monitor\n+   * @throws InvalidEventTypeException for invalid event kind\n+   */\n+  public void requestEvent (EventRequest request)\n+    throws InvalidEventTypeException\n+  {\n+    // Add request to request list\n+    Hashtable requests;\n+    Byte kind = new Byte (request.getEventKind ());\n+    requests = (Hashtable) _requests.get (kind);\n+    if (requests == null)\n+      {\n+\t// Did not get a valid event type\n+\tthrow new InvalidEventTypeException (request.getEventKind ());\n+      }\n+\n+    // Register the event with the VM\n+    VMVirtualMachine.registerEvent (request);\n+    requests.put (new Integer (request.getId ()), request);\n+  }\n+\n+  /**\n+   * Deletes the given request from the management table\n+   *\n+   * @param  kind  the event kind\n+   * @param  id    the ID of the request to delete\n+   * @throws IllegalArgumentException for invalid event kind\n+   */\n+  public void deleteRequest (byte kind, int id)\n+  {\n+    Hashtable requests;\n+    requests = (Hashtable) _requests.get (new Byte (kind));\n+    if (requests == null)\n+      {\n+\t// Did not get a valid event type\n+\tthrow new IllegalArgumentException (\"invalid event kind: \" + kind);\n+      }\n+\n+    Integer iid = new Integer (id);\n+    EventRequest request = (EventRequest) requests.get (iid);\n+    if (request != null)\n+      {\n+\tVMVirtualMachine.unregisterEvent (request);\n+\trequests.remove (iid);\n+      }\n+  }\n+\n+  /**\n+   * Clears all the requests for a given event\n+   *\n+   * @param  kind  the event kind\n+   * @throws IllegalArgumentException for invalid event kind\n+   */\n+  public void clearRequests (byte kind)\n+  {\n+    Hashtable requests = (Hashtable) _requests.get (new Byte (kind));\n+    if (requests == null)\n+      {\n+\t// Did not get a valid event type\n+\tthrow new IllegalArgumentException (\"invalid event kind: \" + kind);\n+      }\n+\n+    VMVirtualMachine.clearEvents (kind);\n+    requests.clear ();\n+  }\n+\n+  /**\n+   * Returns a given event request for an event\n+   *\n+   * @param  kind  the kind of event for the request\n+   * @param  id    the integer request id to return\n+   * @return  the request for the given event kind with the given id\n+   *          (or <code>null</code> if not found)\n+   * @throws IllegalArgumentException for invalid event kind\n+   */\n+  public EventRequest getRequest (byte kind, int id)\n+  {\n+    Hashtable requests = (Hashtable) _requests.get (new Byte (kind));\n+    if (requests == null)\n+      {\n+\t// Did not get a valid event type\n+\tthrow new IllegalArgumentException (\"invalid event kind: \" + kind);\n+      }\n+\n+    return (EventRequest) requests.get (new Integer (id));\n+  }\n+\n+  /**\n+   * Returns all requests of the given event kind\n+   *\n+   * @param  kind  the event kind\n+   * @returns a <code>Collection</code> of all the registered requests\n+   * @throws IllegalArgumentException for invalid event kind\n+   */\n+  public Collection getRequests (byte kind)\n+  {\n+    Hashtable requests = (Hashtable) _requests.get (new Byte (kind));\n+    if (requests == null)\n+      {\n+\t// Did not get a valid event type\n+\tthrow new IllegalArgumentException (\"invalid event kind: \" + kind);\n+      }\n+    \n+    return requests.values ();\n+  }\n+}"}, {"sha": "eadad2840b69c41025e9fd4b79f9b23ac127ccf8", "filename": "libjava/classpath/gnu/classpath/jdwp/event/EventRequest.java", "status": "added", "additions": 376, "deletions": 0, "changes": 376, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FEventRequest.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FEventRequest.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FEventRequest.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,376 @@\n+/* EventRequest.java -- an event request from the debugger\n+   Copyright (C) 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.event;\n+\n+import gnu.classpath.jdwp.JdwpConstants;\n+import gnu.classpath.jdwp.event.filters.*;\n+import gnu.classpath.jdwp.exception.JdwpIllegalArgumentException;\n+import gnu.classpath.jdwp.id.*;\n+\n+import java.util.LinkedList;\n+import java.util.ListIterator;\n+\n+/**\n+ * A class which represents a request by the debugger for an event\n+ * in the VM. <code>EventRequest</code>s usually have event filters\n+ * associated with them, which allow the debugger to specify conditions\n+ * under which the notification should be sent (specific thread, specific\n+ * class, ignore count, etc).\n+ *\n+ * @author Keith Seitz  (keiths@redhat.com)\n+ */\n+public class EventRequest\n+{\n+  /*\n+   * Event types\n+   */\n+\n+  /**\n+   * Single step event\n+   */\n+  public static final byte EVENT_SINGLE_STEP =\n+    JdwpConstants.EventKind.SINGLE_STEP;\n+\n+  /**\n+   * Breakpoint event\n+   */\n+  public static final byte EVENT_BREAKPOINT =\n+    JdwpConstants.EventKind.BREAKPOINT;\n+\n+  /**\n+   * Frame pop event\n+   */\n+  public static final byte EVENT_FRAME_POP =\n+    JdwpConstants.EventKind.FRAME_POP;\n+\n+  /**\n+   * Exception event\n+   */\n+  public static final byte EVENT_EXCEPTION =\n+    JdwpConstants.EventKind.EXCEPTION;\n+\n+  /**\n+   * User-defined event\n+   */\n+  public static final byte EVENT_USER_DEFINED = \n+    JdwpConstants.EventKind.USER_DEFINED;\n+\n+  /**\n+   * Thread start event\n+   */\n+  public static final byte EVENT_THREAD_START = \n+    JdwpConstants.EventKind.THREAD_START;\n+\n+  /**\n+   * Thread end/death event\n+   */\n+  public static final byte EVENT_THREAD_END =\n+    JdwpConstants.EventKind.THREAD_END;\n+\n+  /**\n+   * Class prepare event\n+   */\n+  public static final byte EVENT_CLASS_PREPARE =\n+    JdwpConstants.EventKind.CLASS_PREPARE;\n+\n+  /**\n+   * Class unload event\n+   */\n+  public static final byte EVENT_CLASS_UNLOAD =\n+    JdwpConstants.EventKind.CLASS_UNLOAD;\n+\n+  /**\n+   * Class load event\n+   */\n+  public static final byte EVENT_CLASS_LOAD =\n+    JdwpConstants.EventKind.CLASS_LOAD;\n+\n+  /**\n+   * Field access event\n+   */\n+  public static final byte EVENT_FIELD_ACCESS =\n+    JdwpConstants.EventKind.FIELD_ACCESS;\n+\n+  /**\n+   * Field modify event\n+   */\n+  public static final byte EVENT_FIELD_MODIFY =\n+    JdwpConstants.EventKind.FIELD_MODIFICATION;\n+\n+  /**\n+   * Method entry event\n+   */\n+  public static final byte EVENT_METHOD_ENTRY =\n+    JdwpConstants.EventKind.METHOD_ENTRY;\n+\n+  /**\n+   * Method exit event\n+   */\n+  public static final byte EVENT_METHOD_EXIT = \n+    JdwpConstants.EventKind.METHOD_EXIT;\n+\n+  /**\n+   * Virtual machine initialization/start\n+   */\n+  public static final byte EVENT_VM_INIT =\n+    JdwpConstants.EventKind.VM_INIT;\n+\n+  /**\n+   * Virutal machine death\n+   */\n+  public static final byte EVENT_VM_DEATH =\n+    JdwpConstants.EventKind.VM_DEATH;\n+\n+\n+  /*\n+   * Suspend policies\n+   */\n+\n+  /**\n+   * Do not suspend any threads\n+   */\n+  public static final byte SUSPEND_NONE = \n+    JdwpConstants.SuspendPolicy.NONE;\n+\n+  /**\n+   * Suspend the thread in which the event occurred\n+   */\n+  public static final byte SUSPEND_THREAD =\n+    JdwpConstants.SuspendPolicy.EVENT_THREAD;\n+\n+  /**\n+   * Suspend all threads\n+   */\n+  public static final byte SUSPEND_ALL =\n+    JdwpConstants.SuspendPolicy.ALL;\n+\n+  // ID of last EventRequest\n+  private static int _last_id = 0;\n+  private static Object _idLock = new Object ();\n+\n+  // A list of filters\n+  private LinkedList _filters;\n+\n+  // The ID of this request\n+  private int _id;\n+\n+  // The suspend policy to enforce when this event occurs\n+  private byte _suspendPolicy;\n+\n+  // Kind of event requested\n+  private byte _kind;\n+\n+  /**\n+   * Construct a new <code>EventRequest</code>\n+   *\n+   * @param kind           the kind of event requested\n+   * @param suspendPolicy  how to suspend threads when event occurs\n+   */\n+  public EventRequest (byte kind, byte suspendPolicy)\n+  {\n+    _filters = new LinkedList ();\n+    synchronized (_idLock)\n+      {\n+\t_id = ++_last_id;\n+      }\n+    _kind = kind;\n+    _suspendPolicy = suspendPolicy;\n+  }\n+\n+  /**\n+   * Construct a new <code>EventRequest</code> with the given ID\n+   *\n+   * @param id             the id of the request to create\n+   * @param kind           the kind of event requested\n+   * @param suspendPolicy  how to suspend threads when event occurs\n+   */\n+  public EventRequest (int id, byte kind, byte suspendPolicy)\n+  {\n+    _filters = new LinkedList ();\n+    _kind = kind;\n+    _suspendPolicy = suspendPolicy;\n+  }\n+\n+  /**\n+   * Creates a new event filter, adding it to this request\n+   *\n+   * @param  filter  the filter to add\n+   * @throws JdwpIllegalArgumentException if an invalid or illegal filter\n+   *         is added to the request\n+   */\n+  public void addFilter (IEventFilter filter)\n+    throws JdwpIllegalArgumentException\n+  {\n+    // Check validity of filter for this request\n+    boolean valid = true;\n+\n+    Class clazz = filter.getClass ();\n+    if (clazz == ClassExcludeFilter.class)\n+      {\n+\tif (_kind == EVENT_THREAD_START\n+\t    || _kind == EVENT_THREAD_END)\n+\t  valid = false;\n+      }\n+    else if (clazz == ClassMatchFilter.class)\n+      {\n+\tif (_kind == EVENT_THREAD_START\n+\t    || _kind == EVENT_THREAD_END)\n+\t  valid = false;\n+      }\n+    else if (clazz == ClassOnlyFilter.class)\n+      {\n+\tif (_kind == EVENT_CLASS_UNLOAD\n+\t    || _kind == EVENT_THREAD_START\n+\t    || _kind == EVENT_THREAD_END)\n+\t  valid = false;\n+      }\n+    else if (clazz == ConditionalFilter.class)\n+      {\n+\t// JDWP 1.4 does not say much about this\n+      }\n+    else if (clazz == CountFilter.class)\n+      {\n+\t// may be used with any event\n+      }\n+    else if (clazz == ExceptionOnlyFilter.class)\n+      {\n+\tif (_kind != EVENT_EXCEPTION)\n+\t  valid = false;\n+      }\n+    else if (clazz == FieldOnlyFilter.class)\n+      {\n+\tif (_kind != EVENT_FIELD_ACCESS\n+\t    && _kind != EVENT_FIELD_MODIFY)\n+\t  valid = false;\n+      }\n+    else if (clazz == InstanceOnlyFilter.class)\n+      {\n+\tif (_kind == EVENT_CLASS_PREPARE\n+\t    || _kind == EVENT_CLASS_UNLOAD\n+\t    || _kind == EVENT_THREAD_START\n+\t    || _kind == EVENT_THREAD_END)\n+\t  valid = false;\n+      }\n+    else if (clazz == LocationOnlyFilter.class)\n+      {\n+\tif (_kind != EVENT_BREAKPOINT\n+\t    && _kind != EVENT_FIELD_ACCESS\n+\t    && _kind != EVENT_FIELD_MODIFY\n+\t    && _kind != EVENT_SINGLE_STEP\n+\t    && _kind != EVENT_EXCEPTION)\n+\t  valid = false;\n+      }\n+    else if (clazz == StepFilter.class)\n+      {\n+\tif (_kind != EVENT_SINGLE_STEP)\n+\t  valid = false;\n+      }\n+    else if (clazz == ThreadOnlyFilter.class)\n+      {\n+\tif (_kind == EVENT_CLASS_UNLOAD)\n+\t  valid = false;\n+      }\n+\n+    if (!valid)\n+      {\n+\tString msg = (\"cannot use \" + filter.getClass ().getName ()\n+\t\t      + \" with class unload events\");\n+\tthrow new JdwpIllegalArgumentException (msg);\n+      }\n+\n+    // Add filter to list\n+    _filters.add (filter);\n+  }\n+\n+  /**\n+   * Returns the suspend policy for this request\n+   */\n+  public byte getSuspendPolicy ()\n+  {\n+    return _suspendPolicy;\n+  }\n+\n+  /**\n+   * Returns the request id of this request\n+   */\n+  public int getId ()\n+  {\n+    return _id;\n+  }\n+\n+  /**\n+   * Sets the id of the request (used for auto-generated events)\n+   */\n+  public void setId (int id)\n+  {\n+    _id = id;\n+  }\n+\n+  /**\n+   * Returns the kind of event for this request\n+   */\n+  public byte getEventKind ()\n+  {\n+    return _kind;\n+  }\n+\n+  /**\n+   * Determines whether the given event matches this request\n+   *\n+   * @param  theEvent  the event to compare to\n+   */\n+  public boolean matches (Event theEvent)\n+  {\n+    boolean matches = true;\n+\n+    // Loop through filters; all must match\n+    // Note that we must allow EVERY filter to evaluate. This way\n+    // things like CountFilter will work.\n+    ListIterator iter = _filters.listIterator ();\n+    while (iter.hasNext ())\n+      {\n+\tIEventFilter filter = (IEventFilter) iter.next ();\n+\tif (!filter.matches (theEvent))\n+\t  matches = false;\n+      }\n+\n+    return matches;\n+  }\n+}"}, {"sha": "768b216de0c8a7a0cd92513e3774c4e78d1dc6e7", "filename": "libjava/classpath/gnu/classpath/jdwp/event/ThreadEndEvent.java", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FThreadEndEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FThreadEndEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FThreadEndEvent.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,105 @@\n+/* ThreadEndEvent.java -- An event specifying that a thread has died\n+   Copyright (C) 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.event;\n+\n+import gnu.classpath.jdwp.JdwpConstants;\n+import gnu.classpath.jdwp.VMIdManager;\n+import gnu.classpath.jdwp.id.ThreadId;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+/**\n+ * \"Notification of a completed thread in the target VM. The notification\n+ * is generated by the dying thread before it terminates. Because of this\n+ * timing, it is possible for VirtualMachine.allThreads to return this\n+ * thread after this event is received.\n+ *\n+ * <p>Note that this event gives no information about the lifetime of the\n+ * thread object. It may or may not be collected soon depending on what\n+ * references exist in the target VM.\" -- JDWP 1.4.2\n+ *\n+ * @author Keith Seitz  (keiths@redhat.com)\n+ */\n+public class ThreadEndEvent\n+  extends Event\n+{\n+  private Thread _thread;\n+\n+  /**\n+   * Constructs a new <code>ThreadEndEvent</code>\n+   *\n+   * @param thread  the deceased thread\n+   */\n+  public ThreadEndEvent (Thread thread)\n+  {\n+    super (JdwpConstants.EventKind.THREAD_END);\n+    _thread = thread;\n+  }\n+\n+  /**\n+   * Returns a specific filtering parameter for this event.\n+   * Valid types are ThreadId.\n+   *\n+   * @param type  the type of parameter desired\n+   * @returns the desired parameter or <code>null</code>\n+   */\n+  public Object getParameter (Class type)\n+  {\n+    if (type == ThreadId.class)\n+      return _thread;\n+\n+    return null;\n+  }\n+\n+  /**\n+   * Writes the event to the given stream\n+   *\n+   * @param outStream  the output stream to write the event to\n+   */\n+  protected void _writeData (DataOutputStream outStream)\n+    throws IOException\n+  {\n+    VMIdManager idm = VMIdManager.getDefault();\n+    ThreadId tid = (ThreadId) idm.getObjectId (_thread);\n+    tid.write (outStream);\n+  }\n+}\n+"}, {"sha": "67caea97c22802e0122199af8e4ee8499dd7936b", "filename": "libjava/classpath/gnu/classpath/jdwp/event/ThreadStartEvent.java", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FThreadStartEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FThreadStartEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FThreadStartEvent.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,109 @@\n+/* ThreadStartEvent.java -- An event specifying that a new thread\n+   has started in the virtual machine\n+   Copyright (C) 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.event;\n+\n+import gnu.classpath.jdwp.JdwpConstants;\n+import gnu.classpath.jdwp.VMIdManager;\n+import gnu.classpath.jdwp.id.ThreadId;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+/**\n+ * \"Notification of a new running thread in the target VM. The new\n+ * thread can be the result of a call to {@link java.lang.Thread.start} or\n+ * the result of attaching a new thread to the VM though JNI. The\n+ * notification is generated by the new thread some time before its\n+ * execution starts. Because of this timing, it is possible to receive\n+ * other events for the thread before this event is received. (Notably,\n+ * Method Entry Events and Method Exit Events might occur during thread\n+ * initialization. It is also possible for the VirtualMachine AllThreads\n+ * command to return a thread before its thread start event is received.\n+ *\n+ * <p>Note that this event gives no information about the creation of the\n+ * thread object which may have happened much earlier, depending on the\n+ * VM being debugged.\" -- JDWP 1.4.2\n+ *\n+ * @author Keith Seitz  (keiths@redhat.com)\n+ */\n+public class ThreadStartEvent\n+  extends Event\n+{\n+  private Thread _thread;\n+\n+  /**\n+   * Constructs a new <code>ThreadStartEvent</code>\n+   *\n+   * @param tid  the thread ID in which event occurred\n+   */\n+  public ThreadStartEvent (Thread thread) {\n+    super (JdwpConstants.EventKind.THREAD_END);\n+    _thread = thread;\n+  }\n+\n+  /**\n+   * Returns a specific filtering parameter for this event.\n+   * Valid types are ThreadId.\n+   *\n+   * @param type  the type of parameter desired\n+   * @returns the desired parameter or <code>null</code>\n+   */\n+  public Object getParameter (Class type)\n+  {\n+    if (type == ThreadId.class)\n+      return _thread;\n+\n+    return null;\n+  }\n+\n+  /**\n+   * Writes the event to the given stream\n+   *\n+   * @param outStream  the output stream to write the event to\n+   */\n+  protected void _writeData (DataOutputStream outStream)\n+    throws IOException\n+  {\n+    VMIdManager idm = VMIdManager.getDefault();\n+    ThreadId tid = (ThreadId) idm.getObjectId (_thread);\n+    tid.write (outStream);\n+  }\n+}"}, {"sha": "dd228e935cfe8d5826c607b69bb564070afc1d62", "filename": "libjava/classpath/gnu/classpath/jdwp/event/VmInitEvent.java", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FVmInitEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FVmInitEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2FVmInitEvent.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,94 @@\n+/* VmInitEvent.java -- An event specifying that the VM has started\n+   Copyright (C) 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.event;\n+\n+import gnu.classpath.jdwp.JdwpConstants;\n+import gnu.classpath.jdwp.VMIdManager;\n+import gnu.classpath.jdwp.id.ThreadId;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+/**\n+ * \"Notification of initialization of a target VM. This event is\n+ * received before the main thread is started and before any application\n+ * code has been executed.\" -- JDWP 1.4.2\n+ * \n+ * @author Keith Seitz  (keiths@redhat.com)\n+ */\n+public class VmInitEvent\n+  extends Event\n+{\n+  private Thread _initialThread;\n+\n+  /**\n+   * Constructs a <code>VmInitEvent</code> object\n+   *\n+   * @param thread  the initial thread\n+   */\n+  public VmInitEvent (Thread thread)\n+  {\n+    super (JdwpConstants.EventKind.VM_INIT);\n+    _initialThread = thread;\n+  }\n+\n+  /**\n+   * Returns a specific filtering parameter for this event.\n+   * This event has no valid types.\n+   *\n+   * @param type  the type of parameter desired\n+   * @returns the desired parameter or <code>null</code>\n+   */\n+  public Object getParameter (Class type)\n+  {\n+    return null;\n+  }\n+\n+  /**\n+   * Writes out event-specific data\n+   */\n+  protected void _writeData (DataOutputStream outStream)\n+    throws IOException\n+  {\n+    VMIdManager idm = VMIdManager.getDefault();\n+    ThreadId tid = (ThreadId) idm.getObjectId (_initialThread);\n+    tid.write (outStream);\n+  }\n+}"}, {"sha": "c8ec51c756beea24e3392c067a08081aa5f209c5", "filename": "libjava/classpath/gnu/classpath/jdwp/event/filters/ClassExcludeFilter.java", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FClassExcludeFilter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FClassExcludeFilter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FClassExcludeFilter.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,75 @@\n+/* ClassExcludeFilter.java -- filter on class name (exclusive)\n+   Copyright (C) 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.event.filters;\n+\n+import gnu.classpath.jdwp.event.Event;\n+import gnu.classpath.jdwp.exception.InvalidStringException;\n+\n+/**\n+ * An event filter which excludes events matching a \n+ * specified class pattern (exact match or start/end with \"*\").\n+ *\n+ * @author Keith Seitz  (keiths@redhat.com)\n+ */\n+public class ClassExcludeFilter\n+  extends ClassMatchFilter\n+{\n+  /**\n+   * Constructs a new <code>ClassExcludeFilter</code>\n+   *\n+   * @param  pattern  the pattern to use\n+   * @throws InvalidStringException  if pattern is invalid\n+   */\n+  public ClassExcludeFilter (String pattern)\n+    throws InvalidStringException\n+  {\n+    super (pattern);\n+  }\n+\n+  /**\n+   * Does the given event match the filter?\n+   *\n+   * @param event  the <code>Event</code> to scrutinize\n+   */\n+  public boolean matches (Event event)\n+  {\n+    return !super.matches (event);\n+  }\n+}"}, {"sha": "4ee92bbf5e13d2d9a79aa027cf54f1daa70aa0b1", "filename": "libjava/classpath/gnu/classpath/jdwp/event/filters/ClassMatchFilter.java", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FClassMatchFilter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FClassMatchFilter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FClassMatchFilter.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,114 @@\n+/* ClassMatchFilter.java -- filter on class name (inclusive)\n+   Copyright (C) 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.event.filters;\n+\n+import gnu.classpath.jdwp.event.Event;\n+import gnu.classpath.jdwp.exception.InvalidStringException;\n+import gnu.classpath.jdwp.exception.InvalidClassException;\n+import gnu.classpath.jdwp.id.ReferenceTypeId;\n+\n+/**\n+ * An event filter which includes events matching a \n+ * specified class pattern (exact match or start/end with \"*\").\n+ *\n+ * @author Keith Seitz  (keiths@redhat.com)\n+ */\n+public class ClassMatchFilter\n+  implements IEventFilter\n+{\n+  // Pattern to match\n+  private String _pattern;\n+\n+  /**\n+   * Constructs a new <code>ClassMatchFilter</code>\n+   *\n+   * @param  pattern  the pattern to use\n+   * @throws InvalidStringException  if pattern is invalid\n+   */\n+  public ClassMatchFilter (String pattern)\n+    throws InvalidStringException\n+  {\n+    int index = pattern.indexOf ('*');\n+    if (index != -1 && index != 0 && index != (pattern.length () - 1))\n+      {\n+\t// '*' must be first char or last char\n+\tthrow new InvalidStringException (\"pattern may be an exact match or \"\n+\t\t\t\t\t  + \"start/end with \\\"*\\\"\");\n+      }\n+    _pattern = pattern;\n+  }\n+\n+  /**\n+   * Returns the pattern to be matched\n+   *\n+   * @return the pattern\n+   */\n+  public String getPattern ()\n+  {\n+    return _pattern;\n+  }\n+\n+  /**\n+   * Does the given event match the filter?\n+   *\n+   * @param event  the <code>Event</code> to scrutinize\n+   */\n+  public boolean matches (Event event)\n+  {\n+    Object type = event.getParameter (ReferenceTypeId.class);\n+    if (type != null)\n+      {\n+\tClass eventClass = (Class) type;\n+\tString name = eventClass.getName ();\n+\t\n+\tif (_pattern.startsWith (\"*\"))\n+\t  return name.endsWith (_pattern.substring (1));\n+\telse if (_pattern.endsWith (\"*\"))\n+\t  {\n+\t    int end = _pattern.length () - 1;\n+\t    return name.startsWith (_pattern.substring (0, end));\n+\t  }\n+\telse\n+\t  return name.matches (_pattern);\n+      }\n+\n+    return false;\n+  }\n+}"}, {"sha": "e4bf06cf961d013647515be395ed8234475f96c0", "filename": "libjava/classpath/gnu/classpath/jdwp/event/filters/ClassOnlyFilter.java", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FClassOnlyFilter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FClassOnlyFilter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FClassOnlyFilter.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,109 @@\n+/* ClassOnlyFilter.java -- filter on specific class\n+   Copyright (C) 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.event.filters;\n+\n+import gnu.classpath.jdwp.event.Event;\n+import gnu.classpath.jdwp.exception.InvalidClassException;\n+import gnu.classpath.jdwp.id.ReferenceTypeId;\n+\n+/**\n+ * An event filter which filters out events in uninteresting\n+ * classes.\n+ *\n+ * @author Keith Seitz  (keiths@redhat.com)\n+ */\n+public class ClassOnlyFilter\n+  implements IEventFilter\n+{\n+  // Class ID for which to filter\n+  private ReferenceTypeId _id;\n+\n+  /**\n+   * Constructs a new <code>ClassOnlyFilter</code>\n+   *\n+   * @param refId  the reference type id for a class for which events\n+   *               will be reported\n+   * @throws InvalidClassException if the ID is no longer valid\n+   */\n+  public ClassOnlyFilter (ReferenceTypeId refId)\n+    throws InvalidClassException\n+  {\n+    // validity check\n+    refId.getType ();\n+    _id = refId;\n+  }\n+\n+  /**\n+   * Returns the class to which to restrict events\n+   *\n+   * @return the class's ID\n+   */\n+  public ReferenceTypeId getType ()\n+  {\n+    return _id;\n+  }\n+\n+  /**\n+   * Does the given event match the filter?\n+   *\n+   * @param event  the <code>Event</code> to scrutinize\n+   */\n+  public boolean matches (Event event)\n+  {\n+    Object type = event.getParameter (ReferenceTypeId.class);\n+    if (type != null)\n+      {\n+\ttry\n+\t  {\n+\t    Class clazz = _id.getType ();\n+\t    Class eventClass = (Class) type;\n+\t    if (clazz.isAssignableFrom (eventClass))\n+\t      return true;\n+\t  }\n+\tcatch (InvalidClassException ice)\n+\t  {\n+\t    // class is no longer valid\n+\t    return false;\n+\t  }\n+      }\n+\n+    return false;\n+  }\n+}"}, {"sha": "1fab693eee7daa9c11d1d877b80e8e19929f488e", "filename": "libjava/classpath/gnu/classpath/jdwp/event/filters/ConditionalFilter.java", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FConditionalFilter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FConditionalFilter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FConditionalFilter.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,82 @@\n+/* ConditionalFilter.java -- conditional expression filter\n+   Copyright (C) 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.event.filters;\n+\n+import gnu.classpath.jdwp.event.Event;\n+import gnu.classpath.jdwp.exception.NotImplementedException;\n+\n+/**\n+ * An event filter which allows expression conditionals.\n+ * Note that in JDWP 1.4, this class is marked \"for the\n+ * future\".\n+ *\n+ * @author Keith Seitz  (keiths@redhat.com)\n+ */\n+public class ConditionalFilter\n+  implements IEventFilter\n+{\n+  // private ConditionalId _exprId;\n+\n+  /**\n+   * Constructs a new <code>ConditionalFilter</code> with the\n+   * given conditional.\n+   *\n+   * <p><b>NOTE:</b> This filter is marked \"for the future\",\n+   * i.e, there is no way to actually use this yet.\n+   *\n+   * @param  cond  the conditional expression\n+   * @throws NotImplementedException if used\n+   */\n+  public ConditionalFilter (Object conditional)\n+    throws NotImplementedException\n+  {\n+    throw new NotImplementedException (\"conditional filters\");\n+  }\n+\n+  /**\n+   * Does the given event match the filter?\n+   *\n+   * @param event  the <code>Event</code> to scrutinize\n+   */\n+  public boolean matches (Event event)\n+  {\n+    return false;\n+  }\n+}"}, {"sha": "46148a504bcce9fff01ae5e66ee660a2cabe9c8a", "filename": "libjava/classpath/gnu/classpath/jdwp/event/filters/CountFilter.java", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FCountFilter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FCountFilter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FCountFilter.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,95 @@\n+/* CountFilter.java -- a step filter\n+   Copyright (C) 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.event.filters;\n+\n+import gnu.classpath.jdwp.event.Event;\n+import gnu.classpath.jdwp.exception.InvalidCountException;\n+\n+/**\n+ * An ignore count filter.\n+ *\n+ * @author Keith Seitz  (keiths@redhat.com)\n+ */\n+public class CountFilter\n+  implements IEventFilter\n+{\n+  // the count\n+  private int _count;\n+\n+  /**\n+   * Constructs a new <code>CountFilter</code> with the given count.\n+   *\n+   * @param  count  the number of times the event will be ignored\n+   * @throws InvalidCountException if count is invalid (< 1)\n+   */\n+  public CountFilter (int count)\n+    throws InvalidCountException\n+  {\n+    // Check for valid count\n+    if (count < 1)\n+      throw new InvalidCountException (count);\n+\n+    _count = count;\n+  }\n+\n+  /**\n+   * Returns the ignore count\n+   *\n+   * @return the number of times the event should be ignored\n+   */\n+  public int getCount ()\n+  {\n+    return _count;\n+  }\n+\n+  /**\n+   * Does the given event match the filter?\n+   *\n+   * @param event  the <code>Event</code> to scrutinize\n+   */\n+  public boolean matches (Event event)\n+  {\n+    // This filter only relies on its count\n+    if (--_count == 0)\n+      return true;\n+\n+    return false;\n+  }\n+}"}, {"sha": "cc4919de6ab720cf1ec6daf2ad955a870499f955", "filename": "libjava/classpath/gnu/classpath/jdwp/event/filters/ExceptionOnlyFilter.java", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FExceptionOnlyFilter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FExceptionOnlyFilter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FExceptionOnlyFilter.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,121 @@\n+/* ExceptionOnlyFilter.java -- \n+   Copyright (C) 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.event.filters;\n+\n+import gnu.classpath.jdwp.event.Event;\n+import gnu.classpath.jdwp.exception.InvalidClassException;\n+import gnu.classpath.jdwp.id.ReferenceTypeId;\n+\n+/**\n+ * Restricts reported exceptions by their class and whether they are caught\n+ * or uncaught.\n+ * \n+ * This modifier can be used with exception event kinds only.\n+ *\n+ * @author Keith Seitz  (keiths@redhat.com)\n+ */\n+public class ExceptionOnlyFilter\n+  implements IEventFilter\n+{\n+  private ReferenceTypeId _refId;\n+  private boolean _caught;\n+  private boolean _uncaught;\n+\n+  /**\n+   * Constructs a new <code>ExceptionOnlyFilter</code>\n+   *\n+   * @param  refid\n+   * @param  caught\n+   * @param  uncaught\n+   * @throws InvalidClassException if refid is invalid\n+   */\n+  public ExceptionOnlyFilter (ReferenceTypeId refId, boolean caught,\n+\t\t\t      boolean uncaught)\n+    throws InvalidClassException\n+  {\n+    if (refId == null || refId.getReference().get () == null)\n+      throw new InvalidClassException (refId.getId ());\n+\n+    _refId = refId;\n+    _caught = caught;\n+    _uncaught = uncaught;\n+  }\n+\n+  /**\n+   * Returns the exception class to report (<code>null</code> for all)\n+   *\n+   * @return the class's ID\n+   */\n+  public ReferenceTypeId getType ()\n+  {\n+    return _refId;\n+  }\n+\n+  /**\n+   * Report caught exceptions?\n+   *\n+   * @return whether to report caught exceptions\n+   */\n+  public boolean forCaught ()\n+  {\n+    return _caught;\n+  }\n+\n+  /**\n+   * Report uncaught exceptions?\n+   *\n+   * @return whether to report uncaught exceptions\n+   */\n+  public boolean forUncaught ()\n+  {\n+    return _uncaught;\n+  }\n+\n+  /**\n+   * Does the given event match the filter?\n+   *\n+   * @param event  the <code>Event</code> to scrutinize\n+   */\n+  public boolean matches (Event event)\n+  {\n+    // FIXME\n+    throw new RuntimeException (\"ExceptionOnlyFilter.matches not implemented\");\n+  }\n+}"}, {"sha": "19c5b8a9ba1ea261b25c4e8fb1dc5483d8cc137d", "filename": "libjava/classpath/gnu/classpath/jdwp/event/filters/FieldOnlyFilter.java", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FFieldOnlyFilter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FFieldOnlyFilter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FFieldOnlyFilter.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,112 @@\n+/* FieldOnlyFilter.java -- filter on field\n+   Copyright (C) 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.event.filters;\n+\n+import gnu.classpath.jdwp.event.Event;\n+import gnu.classpath.jdwp.exception.InvalidClassException;\n+import gnu.classpath.jdwp.exception.InvalidFieldException;\n+import gnu.classpath.jdwp.id.ReferenceTypeId;\n+\n+/**\n+ * Restricts reported events to those that occur for a given field.\n+ * \n+ * This modifier can be used with field access and field modification event\n+ * kinds only.\n+ *\n+ * @author Keith Seitz  (keiths@redhat.com)\n+ */\n+public class FieldOnlyFilter\n+  implements IEventFilter\n+{\n+  private ReferenceTypeId _refId;\n+  private ReferenceTypeId _fieldId;\n+\n+  /**\n+   * Constructs a new <code>FieldOnlyFilter</code>.\n+   *\n+   * @param  refId  class for field\n+   * @param  fid    field\n+   * @throws InvalidClassException if class is invalid\n+   * @throws InvalidFieldExcpetion if field is invalid\n+   */\n+  public FieldOnlyFilter (ReferenceTypeId refId, /*Field*/ReferenceTypeId fid)\n+    throws InvalidClassException, InvalidFieldException\n+  {\n+    if (refId == null || refId.getReference().get () == null)\n+      throw new InvalidClassException (refId.getId ());\n+\n+    if (fid == null)\n+      throw new InvalidFieldException (fid.getId ());\n+\n+    _refId = refId;\n+    _fieldId = fid;\n+  }\n+\n+  /**\n+   * Returns the class in which the field is declared \n+   *\n+   * @return the class's id\n+   */\n+  public ReferenceTypeId getType ()\n+  {\n+    return _refId;\n+  }\n+\n+  /**\n+   * Returns the field for which to restrict events\n+   *\n+   * @return the field's id\n+   */\n+  public ReferenceTypeId getField ()\n+  {\n+    return _fieldId;\n+  }\n+\n+  /**\n+   * Does the given event match the filter?\n+   *\n+   * @param event  the <code>Event</code> to scrutinize\n+   */\n+  public boolean matches (Event event)\n+  {\n+    // FIXME\n+    throw new RuntimeException (\"FieldOnlyFilter.matches not implemented\");\n+  }\n+}"}, {"sha": "4a2b5431bc9ac09207c1a036afd9ccab467fef74", "filename": "libjava/classpath/gnu/classpath/jdwp/event/filters/IEventFilter.java", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FIEventFilter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FIEventFilter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FIEventFilter.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,65 @@\n+/* IEventFilter.java -- an interface for event filters\n+   Copyright (C) 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.event.filters;\n+\n+import gnu.classpath.jdwp.event.Event;\n+\n+/**\n+ * An interface for event filters. The debugger registers an event\n+ * filter for a given event when it is interested in receiving\n+ * notifications about that event from the VM.\n+ *\n+ * <p>Filters are attached to {@link gnu.classpath.jdwp.event.EventRequest}s\n+ * in order to allow the debugger to specify that an event should be sent\n+ * only when the filters for the event request all match.\n+ *\n+ * <p>No filters means \"send all notifications\".\n+ *\n+ * @author Keith Seitz  (keiths@redhat.com)\n+ */\n+public interface IEventFilter\n+{\n+  /**\n+   * Does the given event match the filter?\n+   *\n+   * @param event  the <code>Event</code> to scrutinize\n+   */\n+  public boolean matches (Event event);\n+}"}, {"sha": "130749b4b8a98cc57943897da99979f7af4d5d98", "filename": "libjava/classpath/gnu/classpath/jdwp/event/filters/InstanceOnlyFilter.java", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FInstanceOnlyFilter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FInstanceOnlyFilter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FInstanceOnlyFilter.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,101 @@\n+/* InstanceOnlyFilter.java -- filter on instance\n+   Copyright (C) 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.event.filters;\n+\n+import gnu.classpath.jdwp.event.Event;\n+import gnu.classpath.jdwp.exception.InvalidObjectException;\n+import gnu.classpath.jdwp.id.ObjectId;\n+\n+/**\n+ * Restricts reported events to those whose active 'this' object is the\n+ * given object. Match value is the null object for static methods.\n+ * \n+ * This modifier can be used with any event kind except class prepare,\n+ * class unload, thread start, and thread end. Introduced in JDWP version 1.4.\n+ *\n+ * @author Keith Seitz  (keiths@redhat.com)\n+ */\n+public class InstanceOnlyFilter\n+  implements IEventFilter\n+{\n+  private ObjectId _instance;\n+\n+  /**\n+   * Constructs a new <code>InstanceOnlyFilter</code>.\n+   *\n+   * @param  oid  the object to which to restrict events (may be null)\n+   * @throws InvalidObjectException if Object is invalid\n+   */\n+  public InstanceOnlyFilter (ObjectId oid)\n+    throws InvalidObjectException\n+  {\n+    if (oid != null && oid.getReference().get () == null)\n+      throw new InvalidObjectException (oid.getId ());\n+\n+    _instance = oid;\n+  }\n+\n+  /**\n+   * Returns the instance to which to restrict events\n+   *\n+   * @return the object's ID\n+   */\n+  public ObjectId getInstance ()\n+  {\n+    return _instance;\n+  }\n+\n+  /**\n+   * Does the given event match the filter?\n+   *\n+   * @param event  the <code>Event</code> to scrutinize\n+   */\n+  public boolean matches (Event event)\n+  {\n+    Object eventInstance = event.getParameter (ObjectId.class);\n+    if (eventInstance != null)\n+      {\n+\tObject myInstance = _instance.getReference().get ();\n+\treturn ((myInstance != null) && (myInstance == eventInstance));\n+      }\n+\n+    return false;\n+  }\n+}"}, {"sha": "e9102fa03036cd246d1773a8b343c30b4e563ac7", "filename": "libjava/classpath/gnu/classpath/jdwp/event/filters/LocationOnlyFilter.java", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FLocationOnlyFilter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FLocationOnlyFilter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FLocationOnlyFilter.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f", "patch": "@@ -0,0 +1,91 @@\n+/* LocationOnlyFilter.java -- filter on location\n+   Copyright (C) 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.event.filters;\n+\n+import gnu.classpath.jdwp.event.Event;\n+import gnu.classpath.jdwp.exception.InvalidLocationException;\n+import gnu.classpath.jdwp.util.Location;\n+\n+/**\n+ * Restricts reported events to those that occur at the given location.\n+ *\n+ * May be used with breakpoint, field access, field modification, step,\n+ * and exception event kinds.\n+ *\n+ * @author Keith Seitz  (keiths@redhat.com)\n+ */\n+public class LocationOnlyFilter\n+  implements IEventFilter\n+{\n+  private Location _location;\n+\n+  /**\n+   * Constructs a new <code>LocationOnlyFilter</code>.\n+   *\n+   * @param  loc  the location for which to report events\n+   * @throws InvalidLocationException if location is invalid\n+   */\n+  public LocationOnlyFilter (Location loc)\n+    throws InvalidLocationException\n+  {\n+    _location = loc;\n+  }\n+\n+  /**\n+   * Returns the location at which to restrict events\n+   *\n+   * @return the location\n+   */\n+  public Location getLocation ()\n+  {\n+    return _location;\n+  }\n+\n+  /**\n+   * Does the given event match the filter?\n+   *\n+   * @param event  the <code>Event</code> to scrutinize\n+   */\n+  public boolean matches (Event event)\n+  {\n+    // FIXME\n+    throw new RuntimeException (\"LocationOnlyFilter.matches not implemented\");\n+  }\n+}"}, {"sha": "75753cda09573d6090297b78f70f45d34c819335", "filename": "libjava/classpath/gnu/classpath/jdwp/event/filters/StepFilter.java", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FStepFilter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FStepFilter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FStepFilter.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "039b4372125b97579b024f7cc5722fcc4f234681", "filename": "libjava/classpath/gnu/classpath/jdwp/event/filters/ThreadOnlyFilter.java", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FThreadOnlyFilter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FThreadOnlyFilter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fevent%2Ffilters%2FThreadOnlyFilter.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "17bbfb34a3497f7d1b8e6c4f57eda92129824ecd", "filename": "libjava/classpath/gnu/classpath/jdwp/exception/InvalidClassLoaderException.java", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidClassLoaderException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidClassLoaderException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidClassLoaderException.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "f088c73db1ce24c995f10e47af2f2fe5c102312c", "filename": "libjava/classpath/gnu/classpath/jdwp/exception/InvalidFieldException.java", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidFieldException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidFieldException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidFieldException.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "c67951fa2b3e9a09c8088cc9800b5be6734c524d", "filename": "libjava/classpath/gnu/classpath/jdwp/exception/InvalidLocationException.java", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidLocationException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidLocationException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidLocationException.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "3299915b8a54a8c9e347feb0539c9c0485dc0fec", "filename": "libjava/classpath/gnu/classpath/jdwp/exception/InvalidMethodException.java", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidMethodException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidMethodException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidMethodException.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "1ede37f83702760e801e6483a80e5f804456a964", "filename": "libjava/classpath/gnu/classpath/jdwp/exception/JdwpIllegalArgumentException.java", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FJdwpIllegalArgumentException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FJdwpIllegalArgumentException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FJdwpIllegalArgumentException.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "24702166252699ea4cdcd19af3ce8a521c315f4f", "filename": "libjava/classpath/gnu/classpath/jdwp/processor/ArrayReferenceCommandSet.java", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FArrayReferenceCommandSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FArrayReferenceCommandSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FArrayReferenceCommandSet.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "8ae1b450862eb5c6a78310e907794d54ae5b0a36", "filename": "libjava/classpath/gnu/classpath/jdwp/processor/ArrayTypeCommandSet.java", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FArrayTypeCommandSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FArrayTypeCommandSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FArrayTypeCommandSet.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "4e8e23ede23d3aa3b2f0ca01c4ea9c4b54f356f3", "filename": "libjava/classpath/gnu/classpath/jdwp/processor/ClassLoaderReferenceCommandSet.java", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FClassLoaderReferenceCommandSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FClassLoaderReferenceCommandSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FClassLoaderReferenceCommandSet.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "dcafa6f84d2209a5fff7285d85309a6202b05e32", "filename": "libjava/classpath/gnu/classpath/jdwp/processor/ClassObjectReferenceCommandSet.java", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FClassObjectReferenceCommandSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FClassObjectReferenceCommandSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FClassObjectReferenceCommandSet.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "ff6010e59cb949c271561384693a228000d2a54c", "filename": "libjava/classpath/gnu/classpath/jdwp/processor/ClassTypeCommandSet.java", "status": "added", "additions": 218, "deletions": 0, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FClassTypeCommandSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FClassTypeCommandSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FClassTypeCommandSet.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "389b2d349f9d0cf431f862016aa538a5814c2bac", "filename": "libjava/classpath/gnu/classpath/jdwp/processor/EventRequestCommandSet.java", "status": "added", "additions": 196, "deletions": 0, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FEventRequestCommandSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FEventRequestCommandSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FEventRequestCommandSet.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "b5db664e4e499277f5f2916c4422b3f854f52eaa", "filename": "libjava/classpath/gnu/classpath/jdwp/processor/MethodCommandSet.java", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FMethodCommandSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FMethodCommandSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FMethodCommandSet.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "480f4ca2833319ba3255c65b27cc10c5b017f6d6", "filename": "libjava/classpath/gnu/classpath/jdwp/processor/StackFrameCommandSet.java", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FStackFrameCommandSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FStackFrameCommandSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FStackFrameCommandSet.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "8a11195a70801d147fd8a88213ee9d39f1300752", "filename": "libjava/classpath/gnu/classpath/jdwp/processor/ThreadGroupReferenceCommandSet.java", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FThreadGroupReferenceCommandSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FThreadGroupReferenceCommandSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FThreadGroupReferenceCommandSet.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "73643b6a83a3568204c15006060a13204200a505", "filename": "libjava/classpath/gnu/classpath/jdwp/processor/ThreadReferenceCommandSet.java", "status": "added", "additions": 245, "deletions": 0, "changes": 245, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FThreadReferenceCommandSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FThreadReferenceCommandSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FThreadReferenceCommandSet.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "dc4933aedebf2c0c5e8dec075f6ce721d282c343", "filename": "libjava/classpath/gnu/classpath/jdwp/util/LineTable.java", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FLineTable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FLineTable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FLineTable.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "d7a2855ce8a5cd51f1a2b9208e05b58a0eed3c5e", "filename": "libjava/classpath/gnu/classpath/jdwp/util/Location.java", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FLocation.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FLocation.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FLocation.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "a9c1b330579199b8737498f8b808bd6f6522daea", "filename": "libjava/classpath/gnu/classpath/jdwp/util/MethodResult.java", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FMethodResult.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FMethodResult.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FMethodResult.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "759b2a99cb1ac53805e0a53d8255ad530c6c15db", "filename": "libjava/classpath/gnu/classpath/jdwp/util/Value.java", "status": "added", "additions": 301, "deletions": 0, "changes": 301, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FValue.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FValue.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FValue.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "22d8c7dd621d048dced9b1adc44f40d1eecb0844", "filename": "libjava/classpath/gnu/classpath/jdwp/util/VariableTable.java", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FVariableTable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FVariableTable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FVariableTable.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "a470fe171b883bff0fc00df652356e93b32b34dc", "filename": "libjava/classpath/gnu/java/awt/peer/gtk/GtkClipboardNotifier.java", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkClipboardNotifier.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkClipboardNotifier.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkClipboardNotifier.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "08b6b66dd1f877828105105193c7e3d72bc6e343", "filename": "libjava/classpath/gnu/java/awt/peer/gtk/GtkSelection.java", "status": "added", "additions": 664, "deletions": 0, "changes": 664, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkSelection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkSelection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkSelection.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "fdd6da0a639df08aeced96a94ebfc87df1160b2c", "filename": "libjava/classpath/gnu/java/awt/peer/qt/MainQtThread.java", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FMainQtThread.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FMainQtThread.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FMainQtThread.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "706e0df6c0530c80379a6d1136b5fc830fd5d8a0", "filename": "libjava/classpath/gnu/java/awt/peer/qt/NativeWrapper.java", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FNativeWrapper.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FNativeWrapper.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FNativeWrapper.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "428cda17308f6fd8f2bf77fe48fab354e4aef11c", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QMatrix.java", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQMatrix.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQMatrix.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQMatrix.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "8d176a156989e8170574e1308d446586895fa06f", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QPainterPath.java", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQPainterPath.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQPainterPath.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQPainterPath.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "ec41015ed60337c9a301c50519b50cdd1457370f", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QPen.java", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQPen.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQPen.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQPen.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "43387acf6aa2b286d4ff79a836c7d859ce71601d", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtAudioClip.java", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtAudioClip.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtAudioClip.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtAudioClip.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "629f4591117db0734397a41254e07d8f0bfaaf50", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtButtonPeer.java", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtButtonPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtButtonPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtButtonPeer.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "2367cd0662a96c8009fd7a3c66a16e3998653606", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtCanvasPeer.java", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtCanvasPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtCanvasPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtCanvasPeer.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "788e08ee12a88971101c2a810ac6929c341cc688", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtCheckboxPeer.java", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtCheckboxPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtCheckboxPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtCheckboxPeer.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "30674b36ecad7ef6bb70370ba2e9f24654dbf40d", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtChoicePeer.java", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtChoicePeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtChoicePeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtChoicePeer.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "7395a8e6c81d86be6b55b507648d88963e94587b", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtComponentGraphics.java", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtComponentGraphics.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtComponentGraphics.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtComponentGraphics.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "d5662a86169302f1ba8ce8dabb031dcf44db7fa0", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtComponentPeer.java", "status": "added", "additions": 825, "deletions": 0, "changes": 825, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtComponentPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtComponentPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtComponentPeer.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "3782d78159768309cb7780d7ba6d4d9ebb14501a", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtContainerPeer.java", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtContainerPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtContainerPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtContainerPeer.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "0da2e4ebc955eb9083b13334c3fc5cf4bd6158bf", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtDialogPeer.java", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtDialogPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtDialogPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtDialogPeer.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "cac12b91a9959517ad309cac06fa92b10762e23c", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtEmbeddedWindowPeer.java", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtEmbeddedWindowPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtEmbeddedWindowPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtEmbeddedWindowPeer.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "4937031aa05aa382570dde22bd2ccd726853f0a3", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtFileDialogPeer.java", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtFileDialogPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtFileDialogPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtFileDialogPeer.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "e403239e9e9f799bf6bfd38d38a230ff3479f1ec", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtFontMetrics.java", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtFontMetrics.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtFontMetrics.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtFontMetrics.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "ee88c7dd5d043dabc5084593f47b3a5f5d3c0010", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtFontPeer.java", "status": "added", "additions": 209, "deletions": 0, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtFontPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtFontPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtFontPeer.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "b2c6a5921cb2d59e8dc349a379163296075d8c63", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtFramePeer.java", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtFramePeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtFramePeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtFramePeer.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "f9b4f26729f9d02181e314e7039b9b50b6f8d05b", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtGraphics.java", "status": "added", "additions": 706, "deletions": 0, "changes": 706, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtGraphics.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtGraphics.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtGraphics.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "142b140cf14cd54c054b9c12f7874040efabb7a4", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtGraphicsEnvironment.java", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtGraphicsEnvironment.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtGraphicsEnvironment.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtGraphicsEnvironment.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "9095464357068564295494fab40eddf04971d6c2", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtImage.java", "status": "added", "additions": 642, "deletions": 0, "changes": 642, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtImage.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtImage.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtImage.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "aec0671f8e0ed5bbd8ceadf7c5563e0984b8456b", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtImageConsumer.java", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtImageConsumer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtImageConsumer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtImageConsumer.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "5a6f3189a7ae910a0901c542b00ddd2f8e261a71", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtImageDirectGraphics.java", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtImageDirectGraphics.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtImageDirectGraphics.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtImageDirectGraphics.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "f8a7e51d398340956a1aea66550109d132c6ea8a", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtImageGraphics.java", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtImageGraphics.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtImageGraphics.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtImageGraphics.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "449c9b3cb58e6e0670a36eca84bba64889cd3fa9", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtLabelPeer.java", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtLabelPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtLabelPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtLabelPeer.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "9df250a42d316c17fd1d8d79394eebc9081c55a1", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtListPeer.java", "status": "added", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtListPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtListPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtListPeer.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "d8f0d1f8892b7d3ea0395a1836157c2643179b1d", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtMenuBarPeer.java", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtMenuBarPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtMenuBarPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtMenuBarPeer.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "7e292d00fbf432cf7553a0a6feef084b5895a8e6", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtMenuComponentPeer.java", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtMenuComponentPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtMenuComponentPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtMenuComponentPeer.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "34753cb359b3d53dbbb037fac1a0bd12dc3cc697", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtMenuItemPeer.java", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtMenuItemPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtMenuItemPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtMenuItemPeer.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "7457c38d2ff6fd04d117c980a47eed60ff9da6de", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtMenuPeer.java", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtMenuPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtMenuPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtMenuPeer.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "9e4352331102af69a53fa21b7801a4c18660e3e2", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtPanelPeer.java", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtPanelPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtPanelPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtPanelPeer.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "81577cc6c526778616695f19c3572cb07f56d62d", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtPopupMenuPeer.java", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtPopupMenuPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtPopupMenuPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtPopupMenuPeer.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "405505e9bc8f7d86aa812fbd259d017c9482fc39", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtRepaintThread.java", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtRepaintThread.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtRepaintThread.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtRepaintThread.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "c2d73aed1cb1a24cd99d2088653e6353d8f577a8", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtScreenDevice.java", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtScreenDevice.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtScreenDevice.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtScreenDevice.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "045cfdf3284ec76cdcc17f0cf8542a18c617c008", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtScreenDeviceConfiguration.java", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtScreenDeviceConfiguration.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtScreenDeviceConfiguration.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtScreenDeviceConfiguration.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "02fa8fb22cbf78836e2994845b9e3401d061255e", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtScrollPanePeer.java", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtScrollPanePeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtScrollPanePeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtScrollPanePeer.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "838cca62d20f1952f2db81b41a193e301f6a0c7a", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtScrollbarPeer.java", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtScrollbarPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtScrollbarPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtScrollbarPeer.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "f37b9537cfa0779f1841c54043857c116609fa7b", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtTextAreaPeer.java", "status": "added", "additions": 180, "deletions": 0, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtTextAreaPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtTextAreaPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtTextAreaPeer.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "0e3d5af78169fb2492de35addc8148a6cd60ab89", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtTextFieldPeer.java", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtTextFieldPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtTextFieldPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtTextFieldPeer.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "54f4888cf8dd85fa70801c7eeb6f94c142a5b4db", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtToolkit.java", "status": "added", "additions": 470, "deletions": 0, "changes": 470, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtToolkit.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtToolkit.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtToolkit.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "0ec61deb3a6b5933186b205c7609c0c60830e44d", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtVolatileImage.java", "status": "added", "additions": 438, "deletions": 0, "changes": 438, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtVolatileImage.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtVolatileImage.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtVolatileImage.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "7baf8e6ebea0884426479ec575815a6abc07b528", "filename": "libjava/classpath/gnu/java/awt/peer/qt/QtWindowPeer.java", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtWindowPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtWindowPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fqt%2FQtWindowPeer.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "501575e56d81d14a089c14b9e8ace07734c2275d", "filename": "libjava/classpath/gnu/xml/stream/AttributeImpl.java", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FAttributeImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FAttributeImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FAttributeImpl.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "6df06582b877587ca4dcb61bb396fdf88fbb6392", "filename": "libjava/classpath/gnu/xml/stream/CharactersImpl.java", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FCharactersImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FCharactersImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FCharactersImpl.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "5863fb05aecd04b4b4b7ebcd59fa3ab89ea620a8", "filename": "libjava/classpath/gnu/xml/stream/CommentImpl.java", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FCommentImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FCommentImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FCommentImpl.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "8e008aaede1f2d1a9b8cf2574d863aedc8b950fc", "filename": "libjava/classpath/gnu/xml/stream/DTDImpl.java", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FDTDImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FDTDImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FDTDImpl.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "7a5e2049e10b5a5ebfe3960c2dd92f985c8fd33f", "filename": "libjava/classpath/gnu/xml/stream/EndDocumentImpl.java", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FEndDocumentImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FEndDocumentImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FEndDocumentImpl.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "7b5382ec5f3ba1bb478b144316d6266359aedf3a", "filename": "libjava/classpath/gnu/xml/stream/EndElementImpl.java", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FEndElementImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FEndElementImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FEndElementImpl.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "fd36ee267d3ea16ddef04963127239dc42780bcc", "filename": "libjava/classpath/gnu/xml/stream/EndEntityImpl.java", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FEndEntityImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FEndEntityImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FEndEntityImpl.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "41ec2fb9b0d685f12b2c95acff4dca4db21edf65", "filename": "libjava/classpath/gnu/xml/stream/EntityDeclarationImpl.java", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FEntityDeclarationImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FEntityDeclarationImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FEntityDeclarationImpl.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "4b40bfa526a647c1650733879cae7bbc56febca6", "filename": "libjava/classpath/gnu/xml/stream/EntityReferenceImpl.java", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FEntityReferenceImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FEntityReferenceImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FEntityReferenceImpl.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "3bf0f2518b5feb5a5ea71a28dfe1bad9cfb0ffb9", "filename": "libjava/classpath/gnu/xml/stream/FilteredEventReader.java", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FFilteredEventReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FFilteredEventReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FFilteredEventReader.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "1db02f6e30a5625ae2dffca33fc37bb566f21c32", "filename": "libjava/classpath/gnu/xml/stream/FilteredStreamReader.java", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FFilteredStreamReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FFilteredStreamReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FFilteredStreamReader.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "1900aeb45c34f477d51f30c9d09984d25eee3f17", "filename": "libjava/classpath/gnu/xml/stream/LocationImpl.java", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FLocationImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FLocationImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FLocationImpl.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "eeb57be6cacbf635c3e1688d2a420752cc8e749b", "filename": "libjava/classpath/gnu/xml/stream/NamespaceImpl.java", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FNamespaceImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FNamespaceImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FNamespaceImpl.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "2d08599f577e6e48c7623f5633658bf7b0074d5b", "filename": "libjava/classpath/gnu/xml/stream/NotationDeclarationImpl.java", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FNotationDeclarationImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FNotationDeclarationImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FNotationDeclarationImpl.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "6a5028956ad51615e2d96b497926fb01ec6b70f0", "filename": "libjava/classpath/gnu/xml/stream/ProcessingInstructionImpl.java", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FProcessingInstructionImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FProcessingInstructionImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FProcessingInstructionImpl.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "dc4251dd9bfed45a2f93e8faa7d64962969641fb", "filename": "libjava/classpath/gnu/xml/stream/StartDocumentImpl.java", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FStartDocumentImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FStartDocumentImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FStartDocumentImpl.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "48f886560469e235d4648b7b1e02ab4bc8fe9b5f", "filename": "libjava/classpath/gnu/xml/stream/StartElementImpl.java", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FStartElementImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FStartElementImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FStartElementImpl.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "6e4ca257a2c7e0e97d1f4452b83eb1d17e548c75", "filename": "libjava/classpath/gnu/xml/stream/StartEntityImpl.java", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FStartEntityImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FStartEntityImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FStartEntityImpl.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "4b21b6c711007bffd47db62f67cbcf0454e59a5f", "filename": "libjava/classpath/gnu/xml/stream/XMLEventAllocatorImpl.java", "status": "added", "additions": 204, "deletions": 0, "changes": 204, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLEventAllocatorImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLEventAllocatorImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLEventAllocatorImpl.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "a839b182c09c8cfcca607d7ae8877ab25a0afd79", "filename": "libjava/classpath/gnu/xml/stream/XMLEventFactoryImpl.java", "status": "added", "additions": 271, "deletions": 0, "changes": 271, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLEventFactoryImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLEventFactoryImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLEventFactoryImpl.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "a8b522f88a754b85d3db90fa2a2c55f8dc7b78ce", "filename": "libjava/classpath/gnu/xml/stream/XMLEventImpl.java", "status": "added", "additions": 208, "deletions": 0, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLEventImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLEventImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLEventImpl.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "70481d7c4077d289efa5a1ef7b93337f82e1082a", "filename": "libjava/classpath/gnu/xml/stream/XMLEventReaderImpl.java", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLEventReaderImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLEventReaderImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLEventReaderImpl.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "45024158da61ff9f2f7f88960c8d707715a2d0a8", "filename": "libjava/classpath/gnu/xml/stream/XMLEventWriterImpl.java", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLEventWriterImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLEventWriterImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLEventWriterImpl.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "c99f564b623e0a7bf1491f09f56e4805ed774ea2", "filename": "libjava/classpath/gnu/xml/stream/XMLInputFactoryImpl.java", "status": "added", "additions": 321, "deletions": 0, "changes": 321, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLInputFactoryImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLInputFactoryImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLInputFactoryImpl.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "25f520416e2f4721f03432d4e10e21b0071eb835", "filename": "libjava/classpath/gnu/xml/stream/XMLOutputFactoryImpl.java", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLOutputFactoryImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLOutputFactoryImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLOutputFactoryImpl.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "568d800ae0dd6775510f611ea005074fcd063c8f", "filename": "libjava/classpath/gnu/xml/stream/XMLStreamReaderImpl.java", "status": "added", "additions": 1037, "deletions": 0, "changes": 1037, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLStreamReaderImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLStreamReaderImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLStreamReaderImpl.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "9ac0abe271289ddd336049806ada2cf8d65f8cc0", "filename": "libjava/classpath/gnu/xml/stream/XMLStreamWriterImpl.java", "status": "added", "additions": 699, "deletions": 0, "changes": 699, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLStreamWriterImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLStreamWriterImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fxml%2Fstream%2FXMLStreamWriterImpl.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "576e0368d19828d09d79d7779845d11247b26ca6", "filename": "libjava/classpath/include/gnu_java_awt_peer_gtk_GtkSelection.h", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_gtk_GtkSelection.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_gtk_GtkSelection.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_gtk_GtkSelection.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "eaf863ac5fea4852ede8998c289990835c085a12", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_MainQtThread.h", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_MainQtThread.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_MainQtThread.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_MainQtThread.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "536a1d7c3e3dc82baef7b1ad182823de51e8cb64", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QMatrix.h", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QMatrix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QMatrix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QMatrix.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "eaea6309cf8fd3d3fdda81d234d2c439b7c02b4d", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QPainterPath.h", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QPainterPath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QPainterPath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QPainterPath.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "7ac3320ce1196a9e0d10ffa9ccfd79c3801916ef", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QPen.h", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QPen.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QPen.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QPen.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "d696a411c6f0219920f4b470946c684abca51a12", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtAudioClip.h", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtAudioClip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtAudioClip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtAudioClip.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "b7506497114a713d3b3812db7365789433749c02", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtButtonPeer.h", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtButtonPeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtButtonPeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtButtonPeer.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "df12c03b3dbf2895152a1eaea09237b5cc971a60", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtCanvasPeer.h", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtCanvasPeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtCanvasPeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtCanvasPeer.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "2d8958e9ec463925c9c48047c90ba7514a973eee", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtCheckboxPeer.h", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtCheckboxPeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtCheckboxPeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtCheckboxPeer.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "ad67de4a9a523751336523cbdaf285f03d1dc0b8", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtChoicePeer.h", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtChoicePeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtChoicePeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtChoicePeer.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "79b3a8b717999e9a6d55fed3edf04c7cd6cabcba", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtComponentPeer.h", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtComponentPeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtComponentPeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtComponentPeer.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "2993e184141a967ceb0b18f46111dee61d1a8fa1", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtContainerPeer.h", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtContainerPeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtContainerPeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtContainerPeer.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "631b85e5e99be76724b0eceffc4745fbd6808f94", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtDialogPeer.h", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtDialogPeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtDialogPeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtDialogPeer.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "db9e40cd21eb1e962250f45ddf1ec4b18bc7be01", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtEmbeddedWindowPeer.h", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtEmbeddedWindowPeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtEmbeddedWindowPeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtEmbeddedWindowPeer.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "515013b72f00360d41632a86925631cdcc1e8b6e", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtFileDialogPeer.h", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtFileDialogPeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtFileDialogPeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtFileDialogPeer.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "632167a7662332c585c675d1a6c3bd68be230017", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtFontMetrics.h", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtFontMetrics.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtFontMetrics.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtFontMetrics.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "79ab66cb2f49774667aff44f69aa97c90c051f13", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtFontPeer.h", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtFontPeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtFontPeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtFontPeer.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "019c6cdae53e0e9bc314ebc744b5776ca0743d31", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtFramePeer.h", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtFramePeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtFramePeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtFramePeer.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "13a9e818a57c066b2586554c997f16e01e36fc05", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtGraphics.h", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtGraphics.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtGraphics.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtGraphics.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "d964760f306c28ef4b005ca657ec0955b8d8c453", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtGraphicsEnvironment.h", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtGraphicsEnvironment.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtGraphicsEnvironment.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtGraphicsEnvironment.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "238415229e4da1688f2b5615cd3df2ac6c039871", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtImage.h", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtImage.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtImage.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtImage.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "ece10bc2fd4c21f73b2ec3e633fb8a7ff3021c5e", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtLabelPeer.h", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtLabelPeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtLabelPeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtLabelPeer.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "07477e3e32e68eb712a52aef1bbc459638e33fbf", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtListPeer.h", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtListPeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtListPeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtListPeer.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "f4ed76fee262bd72eeb7a528abd7aaa0b5a14286", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtMenuBarPeer.h", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtMenuBarPeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtMenuBarPeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtMenuBarPeer.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "91c9b2686bffd0fda98b075da0059e0c82390165", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtMenuComponentPeer.h", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtMenuComponentPeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtMenuComponentPeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtMenuComponentPeer.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "9f8d20ed4aabfd3e430bc60f53dd4c66e7298d85", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtMenuItemPeer.h", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtMenuItemPeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtMenuItemPeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtMenuItemPeer.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "2cb185e46c22dc4fddf4dcc5bee4ef2d572dfed5", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtMenuPeer.h", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtMenuPeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtMenuPeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtMenuPeer.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "00e97082ba6867af0aeb6490972f00475bbb5b64", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtPanelPeer.h", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtPanelPeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtPanelPeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtPanelPeer.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "79ee4619df7a123223fd33c9acdadbe2c0bd9af8", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtPopupMenuPeer.h", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtPopupMenuPeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtPopupMenuPeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtPopupMenuPeer.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "8fb5c27370050522cb4983a7545d6a30f13f2abc", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtScreenDevice.h", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtScreenDevice.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtScreenDevice.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtScreenDevice.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "d831dae94bd28daf3429b33328c7bce1fd293fb6", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtScrollPanePeer.h", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtScrollPanePeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtScrollPanePeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtScrollPanePeer.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "2ff22db50f9d7c92bb0b681040697e78984a5c9d", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtScrollbarPeer.h", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtScrollbarPeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtScrollbarPeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtScrollbarPeer.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "17c2def5c9c5eb1753ce73a8358011ad6c26f6c4", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtTextAreaPeer.h", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtTextAreaPeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtTextAreaPeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtTextAreaPeer.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "d86e1c7fa0ed6273e2a08bf368bbb7772433d986", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtTextFieldPeer.h", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtTextFieldPeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtTextFieldPeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtTextFieldPeer.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "af882b6cf7031791d5df790cb4333a29f6a9d99a", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtToolkit.h", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtToolkit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtToolkit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtToolkit.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "9fcbc6e38b364d49b5d44b7b1da36cd1ba06f46e", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtVolatileImage.h", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtVolatileImage.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtVolatileImage.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtVolatileImage.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "fc29642a2cde755164a7bc5f976fd487cff261b5", "filename": "libjava/classpath/include/gnu_java_awt_peer_qt_QtWindowPeer.h", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtWindowPeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtWindowPeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_qt_QtWindowPeer.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "2b46e2213a83526a7183ddfc763682dea1a7e0f0", "filename": "libjava/classpath/include/jawt.h", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fjawt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fjawt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fjawt.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "5c2089b904fae5bda0ee23be3a8172f61c4b2613", "filename": "libjava/classpath/include/jawt_md.h", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fjawt_md.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Finclude%2Fjawt_md.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fjawt_md.h?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "8252dea3bcdc475fe2fbfc4f94b860e99f19d922", "filename": "libjava/classpath/java/awt/datatransfer/FlavorEvent.java", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjava%2Fawt%2Fdatatransfer%2FFlavorEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjava%2Fawt%2Fdatatransfer%2FFlavorEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjava%2Fawt%2Fdatatransfer%2FFlavorEvent.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "31b164d6b70b97f3c22920eb591ec0947b21e35f", "filename": "libjava/classpath/java/awt/datatransfer/FlavorListener.java", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjava%2Fawt%2Fdatatransfer%2FFlavorListener.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjava%2Fawt%2Fdatatransfer%2FFlavorListener.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjava%2Fawt%2Fdatatransfer%2FFlavorListener.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "20526eba8cd427c235557abc09c7b3393d84ac6f", "filename": "libjava/classpath/javax/swing/plaf/metal/MetalInternalFrameTitlePane.java", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalInternalFrameTitlePane.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalInternalFrameTitlePane.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalInternalFrameTitlePane.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "ac2a5fa918a385ef488af3fa0821773dcbeec43e", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiButtonUI.java", "status": "added", "additions": 352, "deletions": 0, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiButtonUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiButtonUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiButtonUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "8adb9500bb0f9713e30cdf3b4e143e33d2756c86", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiColorChooserUI.java", "status": "added", "additions": 352, "deletions": 0, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiColorChooserUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiColorChooserUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiColorChooserUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "05279d7d654a9db68ddbc777bdec33dfc307c0db", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiComboBoxUI.java", "status": "added", "additions": 427, "deletions": 0, "changes": 427, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiComboBoxUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiComboBoxUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiComboBoxUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "186ce32fe248e2db4d980c4218a8c89be190c080", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiDesktopIconUI.java", "status": "added", "additions": 352, "deletions": 0, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiDesktopIconUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiDesktopIconUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiDesktopIconUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "d48fb2b0185b2f70946fc30605aba69062345754", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiDesktopPaneUI.java", "status": "added", "additions": 352, "deletions": 0, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiDesktopPaneUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiDesktopPaneUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiDesktopPaneUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "6f88260101c31d881f2ed8a20f7632d5e1bff7a3", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiFileChooserUI.java", "status": "added", "additions": 505, "deletions": 0, "changes": 505, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiFileChooserUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiFileChooserUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiFileChooserUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "01d1df6a124262d9e86fb8c6841d547e6ac5dd23", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiInternalFrameUI.java", "status": "added", "additions": 353, "deletions": 0, "changes": 353, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiInternalFrameUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiInternalFrameUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiInternalFrameUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "ba5b9d47380fb3cb5e508549740804159a13dd78", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiLabelUI.java", "status": "added", "additions": 352, "deletions": 0, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiLabelUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiLabelUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiLabelUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "7350b4541159dd33c7190c2a9b06f8973e2bfcf3", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiListUI.java", "status": "added", "additions": 446, "deletions": 0, "changes": 446, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiListUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiListUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiListUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "a70a8ff690e3700e9482c9d3b9c60928f345fb6b", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiLookAndFeel.java", "status": "added", "additions": 241, "deletions": 0, "changes": 241, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiLookAndFeel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiLookAndFeel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiLookAndFeel.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "a8e805af1d4e1a2636f6655f1cbb867f4ffb6d92", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiMenuBarUI.java", "status": "added", "additions": 352, "deletions": 0, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiMenuBarUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiMenuBarUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiMenuBarUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "ccab5feec9fc1064b4d492b05bf01f9094a8a477", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiMenuItemUI.java", "status": "added", "additions": 352, "deletions": 0, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiMenuItemUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiMenuItemUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiMenuItemUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "c5cb913a0680a88b81fbcd6bf3829771ec5ba665", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiOptionPaneUI.java", "status": "added", "additions": 396, "deletions": 0, "changes": 396, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiOptionPaneUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiOptionPaneUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiOptionPaneUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "67629b2febab495807d746a0b64fa808e3ae8390", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiPanelUI.java", "status": "added", "additions": 352, "deletions": 0, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiPanelUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiPanelUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiPanelUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "161429d296f78e2dd0c30c44c818cfc7f3425f00", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiPopupMenuUI.java", "status": "added", "additions": 352, "deletions": 0, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiPopupMenuUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiPopupMenuUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiPopupMenuUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "c5dbbe815ae14bd0a95911c1f701b8113992d345", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiProgressBarUI.java", "status": "added", "additions": 352, "deletions": 0, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiProgressBarUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiProgressBarUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiProgressBarUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "bd0cb5c1d1a56ccd780c83e55869c32ecdf85125", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiRootPaneUI.java", "status": "added", "additions": 352, "deletions": 0, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiRootPaneUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiRootPaneUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiRootPaneUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "1a993b840b6d4cfe69fc73feeb4e03f84054f1c2", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiScrollBarUI.java", "status": "added", "additions": 352, "deletions": 0, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiScrollBarUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiScrollBarUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiScrollBarUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "a50c3ba7f18cf011a752726166329fd1e711abe0", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiScrollPaneUI.java", "status": "added", "additions": 352, "deletions": 0, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiScrollPaneUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiScrollPaneUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiScrollPaneUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "f8e4feae7f3bf1eb0cc5d9df78b2974f4e57d4b7", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiSeparatorUI.java", "status": "added", "additions": 352, "deletions": 0, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiSeparatorUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiSeparatorUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiSeparatorUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "8a4aab6e041ccb4502834dd1652c7bb8d563244d", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiSliderUI.java", "status": "added", "additions": 352, "deletions": 0, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiSliderUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiSliderUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiSliderUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "70068e82a562b0fcad6f8884217599b47d2312d5", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiSpinnerUI.java", "status": "added", "additions": 352, "deletions": 0, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiSpinnerUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiSpinnerUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiSpinnerUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "f481f8109d9f60cb66c64b77c2faef32f296f5dd", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiSplitPaneUI.java", "status": "added", "additions": 488, "deletions": 0, "changes": 488, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiSplitPaneUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiSplitPaneUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiSplitPaneUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "575de192a53c4126aa0176a6bccd06fea787964a", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiTabbedPaneUI.java", "status": "added", "additions": 444, "deletions": 0, "changes": 444, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiTabbedPaneUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiTabbedPaneUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiTabbedPaneUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "6c59cef6c96575f9b8d7094e9856ca098c480752", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiTableHeaderUI.java", "status": "added", "additions": 352, "deletions": 0, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiTableHeaderUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiTableHeaderUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiTableHeaderUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "2e5b5bcf5322a1a58dcf01454ac1fd8358fd26d3", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiTableUI.java", "status": "added", "additions": 352, "deletions": 0, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiTableUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiTableUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiTableUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "c5dee247dd3f77cbe07ba7dc86bfac2fcdc9238d", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiTextUI.java", "status": "added", "additions": 617, "deletions": 0, "changes": 617, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiTextUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiTextUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiTextUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "afe63bf358feb3344b1cb7e6ba2eac35d857bc8c", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiToolBarUI.java", "status": "added", "additions": 352, "deletions": 0, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiToolBarUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiToolBarUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiToolBarUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "fcd622dd8d3db930e03bea1999ab6c5a3e223eaf", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiToolTipUI.java", "status": "added", "additions": 352, "deletions": 0, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiToolTipUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiToolTipUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiToolTipUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "de1dc6cc7731eeedef95742742b39a8ff6cc2b75", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiTreeUI.java", "status": "added", "additions": 628, "deletions": 0, "changes": 628, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiTreeUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiTreeUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiTreeUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "33bbc3b7f759bd66c6103656fa2ed5f91d314c76", "filename": "libjava/classpath/javax/swing/plaf/multi/MultiViewportUI.java", "status": "added", "additions": 352, "deletions": 0, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiViewportUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiViewportUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2FMultiViewportUI.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "568a7d0bf98b0861066cf8fa0503f07017e4f9d7", "filename": "libjava/classpath/javax/swing/plaf/multi/package.html", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2Fpackage.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2Fpackage.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Fplaf%2Fmulti%2Fpackage.html?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "d5fc395e1ac0cff6e33ac2d1ebd171ccce8adc38", "filename": "libjava/classpath/javax/swing/text/AbstractWriter.java", "status": "added", "additions": 480, "deletions": 0, "changes": 480, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FAbstractWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FAbstractWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FAbstractWriter.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "0f8ba1ce15e07236eb3c3666a500441513f81a68", "filename": "libjava/classpath/javax/swing/text/BoxView.java", "status": "added", "additions": 714, "deletions": 0, "changes": 714, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FBoxView.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FBoxView.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FBoxView.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "6776c95727a987c45168fcc9cc6a4e4f09bff1e6", "filename": "libjava/classpath/javax/swing/text/CompositeView.java", "status": "added", "additions": 652, "deletions": 0, "changes": 652, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FCompositeView.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FCompositeView.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FCompositeView.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "a6a5ff618bd1471cd141e3e2267cb15a7f663725", "filename": "libjava/classpath/javax/swing/text/ElementIterator.java", "status": "added", "additions": 181, "deletions": 0, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FElementIterator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FElementIterator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FElementIterator.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "a6ef89efb784a2e452cb513ba26a4dad60d8de2d", "filename": "libjava/classpath/javax/swing/text/FlowView.java", "status": "added", "additions": 617, "deletions": 0, "changes": 617, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FFlowView.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FFlowView.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FFlowView.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "f9e60972d841ee3a891a125e025b3d0cab0b525f", "filename": "libjava/classpath/javax/swing/text/GlyphView.java", "status": "added", "additions": 521, "deletions": 0, "changes": 521, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FGlyphView.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FGlyphView.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FGlyphView.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "c7e22b6c3eb85a4d4e80c551769dbbe665864c9b", "filename": "libjava/classpath/javax/swing/text/IconView.java", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FIconView.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FIconView.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FIconView.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "a10391613cd041e8dff26d1fa00f940e76ed1e28", "filename": "libjava/classpath/javax/swing/text/LabelView.java", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FLabelView.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FLabelView.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FLabelView.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "83433b6eef5c6e352d0ff2f68910f46350aec019", "filename": "libjava/classpath/javax/swing/text/LayoutQueue.java", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FLayoutQueue.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FLayoutQueue.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FLayoutQueue.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "6c6006a2a0f435b6b73fd0b9ddd4ca20c0d0edfe", "filename": "libjava/classpath/javax/swing/text/ParagraphView.java", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FParagraphView.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FParagraphView.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fswing%2Ftext%2FParagraphView.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "288c7411dea459d6b60acc67ec034c1de8be77db", "filename": "libjava/classpath/javax/xml/stream/EventFilter.java", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FEventFilter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FEventFilter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FEventFilter.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "d04e71a8cf6cee73daa2313c9128a6740d9cb559", "filename": "libjava/classpath/javax/xml/stream/FactoryConfigurationError.java", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FFactoryConfigurationError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FFactoryConfigurationError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FFactoryConfigurationError.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "d043ba254e929d177846eef2bf2d26f14e0bb183", "filename": "libjava/classpath/javax/xml/stream/Location.java", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FLocation.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FLocation.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FLocation.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "77fbfc7f533e619329e3571d14be172bd6fea350", "filename": "libjava/classpath/javax/xml/stream/StreamFilter.java", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FStreamFilter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FStreamFilter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FStreamFilter.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "456414d6101c52586cc99af8e9500ab79c636550", "filename": "libjava/classpath/javax/xml/stream/XMLEventFactory.java", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLEventFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLEventFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLEventFactory.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "5d4c1700065ea423ea39d381305eecd10a196290", "filename": "libjava/classpath/javax/xml/stream/XMLEventReader.java", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLEventReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLEventReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLEventReader.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "60b18f977ca6b5911bb0fd5e8b8aaab696385b90", "filename": "libjava/classpath/javax/xml/stream/XMLEventWriter.java", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLEventWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLEventWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLEventWriter.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "7e7698df12c037967a0939e0bad883b53bd6773a", "filename": "libjava/classpath/javax/xml/stream/XMLFilter.java", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLFilter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLFilter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLFilter.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "4c904a62fde5afe7063e24cde80e6bcecd3ea714", "filename": "libjava/classpath/javax/xml/stream/XMLInputFactory.java", "status": "added", "additions": 458, "deletions": 0, "changes": 458, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLInputFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLInputFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLInputFactory.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "e12bffafdcc85d1c5df224d482b4d4406469d5fb", "filename": "libjava/classpath/javax/xml/stream/XMLIterator.java", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLIterator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLIterator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLIterator.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "cf31f02a5912f57397beed9f8fc971931e5e4db7", "filename": "libjava/classpath/javax/xml/stream/XMLOutputFactory.java", "status": "added", "additions": 286, "deletions": 0, "changes": 286, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLOutputFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLOutputFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLOutputFactory.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "bdf0b8accc464bd94adfba6693b274c098c43fe1", "filename": "libjava/classpath/javax/xml/stream/XMLReporter.java", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLReporter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLReporter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLReporter.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "148afc6f1a5eca7b80fa8185cc2bbe3a4e39437a", "filename": "libjava/classpath/javax/xml/stream/XMLResolver.java", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLResolver.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLResolver.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLResolver.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "1f0d2ef33cd1b3c3b4214455220e10420b4d7451", "filename": "libjava/classpath/javax/xml/stream/XMLStreamConstants.java", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLStreamConstants.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLStreamConstants.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLStreamConstants.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "0e91ed7a99eb543e5e3b33d9922b62c6043d10fe", "filename": "libjava/classpath/javax/xml/stream/XMLStreamException.java", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLStreamException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLStreamException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLStreamException.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "e598fabb6b63bdd790e9b1c034a6bd2959cf428a", "filename": "libjava/classpath/javax/xml/stream/XMLStreamReader.java", "status": "added", "additions": 301, "deletions": 0, "changes": 301, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLStreamReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLStreamReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLStreamReader.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "5fe9e9f70f4e53d5935ad42071c096408e120418", "filename": "libjava/classpath/javax/xml/stream/XMLStreamWriter.java", "status": "added", "additions": 244, "deletions": 0, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLStreamWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLStreamWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2FXMLStreamWriter.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "cf471137484e66daac3b73cc3bd2ce643430e8d3", "filename": "libjava/classpath/javax/xml/stream/events/Attribute.java", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FAttribute.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FAttribute.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FAttribute.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "3728a997c349fd9ad5f3fbe82c0227d86a54d7db", "filename": "libjava/classpath/javax/xml/stream/events/Characters.java", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FCharacters.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FCharacters.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FCharacters.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "300e32c9266cb4a6515dd817bfd82bc4b2b2a497", "filename": "libjava/classpath/javax/xml/stream/events/Comment.java", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FComment.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FComment.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FComment.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "6c7bcc4ced0859eecf5cd1ecf3989fa7989d36b2", "filename": "libjava/classpath/javax/xml/stream/events/DTD.java", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FDTD.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FDTD.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FDTD.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "57d93af928d78c5442813af0c1ef0b1f09ab0cbb", "filename": "libjava/classpath/javax/xml/stream/events/EndDocument.java", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FEndDocument.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FEndDocument.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FEndDocument.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "86a2e1617e4d3442e3a2cfd690c4e1e82c28df7c", "filename": "libjava/classpath/javax/xml/stream/events/EndElement.java", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FEndElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FEndElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FEndElement.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "b5c32d716f2913ad36353c7ccb262f626cbc64db", "filename": "libjava/classpath/javax/xml/stream/events/EndEntity.java", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FEndEntity.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FEndEntity.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FEndEntity.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "a319f098cc422b5318773fe9cf9e131eb5559d4c", "filename": "libjava/classpath/javax/xml/stream/events/EntityDeclaration.java", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FEntityDeclaration.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FEntityDeclaration.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FEntityDeclaration.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "72447096b688c240e9e3c39e542f90b5fe429d90", "filename": "libjava/classpath/javax/xml/stream/events/EntityReference.java", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FEntityReference.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FEntityReference.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FEntityReference.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "2275432159a248b4f1d13cf24536326e20923c95", "filename": "libjava/classpath/javax/xml/stream/events/Namespace.java", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FNamespace.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FNamespace.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FNamespace.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "9ac29e9cc2c1dd5fab20e85467a79a4395232315", "filename": "libjava/classpath/javax/xml/stream/events/NotationDeclaration.java", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FNotationDeclaration.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FNotationDeclaration.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FNotationDeclaration.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "861dd30be6802e14c0c3449d9b5b97491c068dd4", "filename": "libjava/classpath/javax/xml/stream/events/ProcessingInstruction.java", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FProcessingInstruction.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FProcessingInstruction.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FProcessingInstruction.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "2bd251e4adb7d029d8128819e7106373e26373ba", "filename": "libjava/classpath/javax/xml/stream/events/StartDocument.java", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FStartDocument.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FStartDocument.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FStartDocument.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "a35b3b4121f013d3bdc910a057e7452bb38aa0bb", "filename": "libjava/classpath/javax/xml/stream/events/StartElement.java", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FStartElement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FStartElement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FStartElement.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "d41e0db7a72f237f6bc57e85b77167a1ef11929c", "filename": "libjava/classpath/javax/xml/stream/events/StartEntity.java", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FStartEntity.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FStartEntity.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FStartEntity.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "54e9516f62b8dba73e7d02447d463d96f9fdee4e", "filename": "libjava/classpath/javax/xml/stream/events/XMLEvent.java", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FXMLEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FXMLEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Fevents%2FXMLEvent.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}, {"sha": "f6d1585b790c02fe5b2a2efd4c16a4a09e291d96", "filename": "libjava/classpath/javax/xml/stream/util/EventReaderDelegate.java", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Futil%2FEventReaderDelegate.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b044d19517541c95681d35a92dbc81e6e21d94f/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Futil%2FEventReaderDelegate.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fxml%2Fstream%2Futil%2FEventReaderDelegate.java?ref=9b044d19517541c95681d35a92dbc81e6e21d94f"}]}