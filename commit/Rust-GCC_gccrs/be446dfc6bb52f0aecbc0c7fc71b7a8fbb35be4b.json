{"sha": "be446dfc6bb52f0aecbc0c7fc71b7a8fbb35be4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU0NDZkZmM2YmI1MmYwYWVjYmMwYzdmYzcxYjdhOGZiYjM1YmU0Yg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2004-01-27T14:42:36Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-01-27T14:42:36Z"}, "message": "sparc.c (function_arg_pass_by_reference): Return 1 for SCmode and DCmode if ARCH32.\n\n\t* config/sparc/sparc.c (function_arg_pass_by_reference): Return 1\n\tfor SCmode and DCmode if ARCH32.\n\t(sparc_va_arg): Handle SCmode and DCmode by reference if ARCH32.\n\t* config/sparc/sparc.h (RETURN_IN_MEMORY): Return 0 for TCmode\n\tif ARCH32.\n\t(BASE_RETURN_VALUE_REG): Return 32 for all FP modes except TFmode\n\tif ARCH32.\n\t(BASE_OUTGOING_VALUE_REG): Likewise.\n\nFrom-SVN: r76708", "tree": {"sha": "0c3946439f6563c3412bf9d01dddc4fb80a2aca6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c3946439f6563c3412bf9d01dddc4fb80a2aca6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be446dfc6bb52f0aecbc0c7fc71b7a8fbb35be4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be446dfc6bb52f0aecbc0c7fc71b7a8fbb35be4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be446dfc6bb52f0aecbc0c7fc71b7a8fbb35be4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be446dfc6bb52f0aecbc0c7fc71b7a8fbb35be4b/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "04b1f9b877999485989fdb5265a0c48db49d2722", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04b1f9b877999485989fdb5265a0c48db49d2722", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04b1f9b877999485989fdb5265a0c48db49d2722"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "58a742c0c28c11c99164e1924fd8b8351022dbd2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be446dfc6bb52f0aecbc0c7fc71b7a8fbb35be4b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be446dfc6bb52f0aecbc0c7fc71b7a8fbb35be4b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be446dfc6bb52f0aecbc0c7fc71b7a8fbb35be4b", "patch": "@@ -1,3 +1,14 @@\n+2004-01-27  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* config/sparc/sparc.c (function_arg_pass_by_reference): Return 1\n+\tfor SCmode and DCmode if ARCH32.\n+\t(sparc_va_arg): Handle SCmode and DCmode by reference if ARCH32.\n+\t* config/sparc/sparc.h (RETURN_IN_MEMORY): Return 0 for TCmode\n+\tif ARCH32.\n+\t(BASE_RETURN_VALUE_REG): Return 32 for all FP modes except TFmode\n+\tif ARCH32.\n+\t(BASE_OUTGOING_VALUE_REG): Likewise.\n+\n 2004-01-27  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR target/10904"}, {"sha": "e1e37eec0b9e43f0b961b6d89b364a6373b550bb", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be446dfc6bb52f0aecbc0c7fc71b7a8fbb35be4b/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be446dfc6bb52f0aecbc0c7fc71b7a8fbb35be4b/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=be446dfc6bb52f0aecbc0c7fc71b7a8fbb35be4b", "patch": "@@ -5591,7 +5591,10 @@ function_arg_pass_by_reference (const struct sparc_args *cum ATTRIBUTE_UNUSED,\n   if (TARGET_ARCH32)\n     {\n       return ((type && AGGREGATE_TYPE_P (type))\n-\t      || mode == TFmode || mode == TCmode);\n+\t      || mode == TFmode\n+\t      || mode == SCmode\n+\t      || mode == DCmode\n+\t      || mode == TCmode);\n     }\n   else\n     {\n@@ -5803,6 +5806,8 @@ sparc_va_arg (tree valist, tree type)\n     {\n       if (AGGREGATE_TYPE_P (type)\n \t  || TYPE_MODE (type) == TFmode\n+\t  || TYPE_MODE (type) == SCmode\n+\t  || TYPE_MODE (type) == DCmode\n \t  || TYPE_MODE (type) == TCmode)\n \t{\n \t  indirect = 1;"}, {"sha": "364bea099e39eb14ec4e1a5f3b7c32371bebe1ce", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be446dfc6bb52f0aecbc0c7fc71b7a8fbb35be4b/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be446dfc6bb52f0aecbc0c7fc71b7a8fbb35be4b/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=be446dfc6bb52f0aecbc0c7fc71b7a8fbb35be4b", "patch": "@@ -1157,8 +1157,7 @@ extern int sparc_mode_class[];\n #define RETURN_IN_MEMORY(TYPE)\t\t\t\t\\\n (TARGET_ARCH32\t\t\t\t\t\t\\\n  ? (TYPE_MODE (TYPE) == BLKmode\t\t\t\t\\\n-    || TYPE_MODE (TYPE) == TFmode\t\t\t\\\n-    || TYPE_MODE (TYPE) == TCmode)\t\t\t\\\n+    || TYPE_MODE (TYPE) == TFmode)\t\t\t\\\n  : (TYPE_MODE (TYPE) == BLKmode\t\t\t\t\\\n     && (unsigned HOST_WIDE_INT) int_size_in_bytes (TYPE) > 32))\n \n@@ -1671,13 +1670,13 @@ extern char leaf_reg_remap[];\n #define BASE_RETURN_VALUE_REG(MODE)\t\t\t\t\t\\\n   (TARGET_ARCH64\t\t\t\t\t\t\t\\\n    ? (TARGET_FPU && FLOAT_MODE_P (MODE) ? 32 : 8)\t\t\t\\\n-   : (((MODE) == SFmode || (MODE) == DFmode) && TARGET_FPU ? 32 : 8))\n+   : (TARGET_FPU && FLOAT_MODE_P (MODE) && (MODE) != TFmode ? 32 : 8))\n \n #define BASE_OUTGOING_VALUE_REG(MODE)\t\t\t\t\\\n   (TARGET_ARCH64\t\t\t\t\t\t\\\n    ? (TARGET_FPU && FLOAT_MODE_P (MODE) ? 32\t\t\t\\\n       : TARGET_FLAT ? 8 : 24)\t\t\t\t\t\\\n-   : (((MODE) == SFmode || (MODE) == DFmode) && TARGET_FPU ? 32\t\\\n+   : (TARGET_FPU && FLOAT_MODE_P (MODE) && (MODE) != TFmode ? 32\\\n       : (TARGET_FLAT ? 8 : 24)))\n \n #define BASE_PASSING_ARG_REG(MODE)\t\t\t\t\\"}]}