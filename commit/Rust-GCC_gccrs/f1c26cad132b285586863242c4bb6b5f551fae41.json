{"sha": "f1c26cad132b285586863242c4bb6b5f551fae41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFjMjZjYWQxMzJiMjg1NTg2ODYzMjQyYzRiYjZiNWY1NTFmYWU0MQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2010-03-24T18:49:49Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2010-03-24T18:49:49Z"}, "message": "re PR target/38118 (gcc emits non-TLS data as TLS on Solaris 11/SPARC)\n\n\t* configure.ac (i[34567]86-*-*): Handle Solaris 2/x86 TLS support\n\tand Sun as TLS syntax.\n\t(TLS_SECTION_ASM_FLAG) [on_solaris && !gas_flag]: Define.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\t* varasm.c (TLS_SECTION_ASM_FLAG): Define default.\n\t(default_elf_asm_named_section): Use it.\n\t* config/i386/i386.c (output_pic_addr_const): Lowercase @DTPOFF.\n\t(i386_output_dwarf_dtprel): Likewise.\n\t(output_addr_const_extra): Likewise.\n\t(output_pic_addr_const): Lowercase @GOTTPOFF.\n\t(output_addr_const_extra): Likewise.\n\t(output_pic_addr_const): Lowercase @GOTNTPOFF.\n\t(output_addr_const_extra): Likewise.\n\t(output_pic_addr_const): Lowercase @INDNTPOFF.\n\t(output_addr_const_extra): Likewise.\n\t(output_pic_addr_const): Lowercase @NTPOFF.\n\t(output_addr_const_extra): Likewise.\n\t(output_pic_addr_const): Lowercase @TPOFF.\n\t(output_addr_const_extra): Likewise.\n\t* config/i386/i386.md (*tls_global_dynamic_32_gnu): Lowercase\n\t@TLSGD.\n\t(*tls_global_dynamic_64): Likewise.\n\t(*tls_local_dynamic_base_32_gnu): Lowercase @TLSLDM.\n\t(*tls_local_dynamic_base_64): Lowercase\t@TLSLD.\n\n\t* defaults.h (TLS_COMMON_ASM_OP): Provide default.\n\t(ASM_OUTPUT_TLS_COMMON): Use it.\n\t* config/i386/sol2-gas.h (TLS_COMMON_ASM_OP): Undef.\n\n\tPR target/38118\n\t* config.gcc (sparc*-*-solaris2*) [$gas=yes]: Add usegas.h to\n\ttm_file.\n\t* config/sparc/sol2.h (ASM_OUTPUT_ALIGNED_COMMON): Move ...\n\t* config/sol2.h (ASM_OUTPUT_ALIGNED_COMMON): ... here.\n\t* config/i386/sol2-10.h (ASM_OUTPUT_ALIGNED_COMMON): Redefine.\n\t* config/i386/sol2.h (TARGET_SUN_TLS): Redefine.\n\nFrom-SVN: r157705", "tree": {"sha": "ef6a9e9fc1a86c9ee173f222db3bc79d9f53eddf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef6a9e9fc1a86c9ee173f222db3bc79d9f53eddf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1c26cad132b285586863242c4bb6b5f551fae41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1c26cad132b285586863242c4bb6b5f551fae41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1c26cad132b285586863242c4bb6b5f551fae41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1c26cad132b285586863242c4bb6b5f551fae41/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d2af65b9bc0c020a647859b553eac045410d0181", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2af65b9bc0c020a647859b553eac045410d0181", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2af65b9bc0c020a647859b553eac045410d0181"}], "stats": {"total": 324, "additions": 248, "deletions": 76}, "files": [{"sha": "bff16dc5d19d451faac7a15c3d01889666dfb6b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c26cad132b285586863242c4bb6b5f551fae41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c26cad132b285586863242c4bb6b5f551fae41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1c26cad132b285586863242c4bb6b5f551fae41", "patch": "@@ -1,3 +1,44 @@\n+2010-03-24  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac (i[34567]86-*-*): Handle Solaris 2/x86 TLS support\n+\tand Sun as TLS syntax.\n+\t(TLS_SECTION_ASM_FLAG) [on_solaris && !gas_flag]: Define.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\t* varasm.c (TLS_SECTION_ASM_FLAG): Define default.\n+\t(default_elf_asm_named_section): Use it.\n+\t* config/i386/i386.c (output_pic_addr_const): Lowercase @DTPOFF.\n+\t(i386_output_dwarf_dtprel): Likewise.\n+\t(output_addr_const_extra): Likewise.\n+\t(output_pic_addr_const): Lowercase @GOTTPOFF.\n+\t(output_addr_const_extra): Likewise.\n+\t(output_pic_addr_const): Lowercase @GOTNTPOFF.\n+\t(output_addr_const_extra): Likewise.\n+\t(output_pic_addr_const): Lowercase @INDNTPOFF.\n+\t(output_addr_const_extra): Likewise.\n+\t(output_pic_addr_const): Lowercase @NTPOFF.\n+\t(output_addr_const_extra): Likewise.\n+\t(output_pic_addr_const): Lowercase @TPOFF.\n+\t(output_addr_const_extra): Likewise.\n+\t* config/i386/i386.md (*tls_global_dynamic_32_gnu): Lowercase\n+\t@TLSGD.\n+\t(*tls_global_dynamic_64): Likewise.\n+\t(*tls_local_dynamic_base_32_gnu): Lowercase @TLSLDM.\n+\t(*tls_local_dynamic_base_64): Lowercase\t@TLSLD.\n+\n+\t* defaults.h (TLS_COMMON_ASM_OP): Provide default.\n+\t(ASM_OUTPUT_TLS_COMMON): Use it.\n+\t* config/i386/sol2-gas.h (TLS_COMMON_ASM_OP): Undef.\n+\n+\tPR target/38118\n+\t* config.gcc (sparc*-*-solaris2*) [$gas=yes]: Add usegas.h to\n+\ttm_file.\n+\t* config/sparc/sol2.h (ASM_OUTPUT_ALIGNED_COMMON): Move ...\n+\t* config/sol2.h (ASM_OUTPUT_ALIGNED_COMMON): ... here.\n+\t* config/i386/sol2-10.h (ASM_OUTPUT_ALIGNED_COMMON): Redefine.\n+\t* config/i386/sol2.h (TARGET_SUN_TLS): Redefine.\n+\t(ASM_DECLARE_OBJECT_NAME) [!USE_GAS]: Redefine.\n+\n 2010-03-24  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config/i386/i386.c (override_options): Don't accept"}, {"sha": "d4e733c29c597d67954584879d9611b66d6f3365", "filename": "gcc/config.gcc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c26cad132b285586863242c4bb6b5f551fae41/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c26cad132b285586863242c4bb6b5f551fae41/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=f1c26cad132b285586863242c4bb6b5f551fae41", "patch": "@@ -2412,6 +2412,9 @@ sparc*-*-solaris2*)\n \telse\n \t\ttmake_file=\"$tmake_file t-slibgcc-sld\"\n \tfi\n+\tif test x$gas = xyes; then\n+\t\ttm_file=\"usegas.h ${tm_file}\"\n+\tfi\n \tc_target_objs=\"sol2-c.o\"\n \tcxx_target_objs=\"sol2-c.o\"\n \textra_objs=\"sol2.o\""}, {"sha": "a9e208fa4eb8c68ceb91eee5ba9c5b3e33e02dca", "filename": "gcc/config.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c26cad132b285586863242c4bb6b5f551fae41/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c26cad132b285586863242c4bb6b5f551fae41/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=f1c26cad132b285586863242c4bb6b5f551fae41", "patch": "@@ -1634,6 +1634,13 @@\n #endif\n \n \n+/* Define to the flag used to mark TLS sections if the default (`T') doesn't\n+   work. */\n+#ifndef USED_FOR_TARGET\n+#undef TLS_SECTION_ASM_FLAG\n+#endif\n+\n+\n /* Define if your assembler mis-optimizes .eh_frame data. */\n #ifndef USED_FOR_TARGET\n #undef USE_AS_TRADITIONAL_FORMAT"}, {"sha": "a6ffc1921fc660f94c9c0f5f9d7cbdbf0f7eb273", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c26cad132b285586863242c4bb6b5f551fae41/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c26cad132b285586863242c4bb6b5f551fae41/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f1c26cad132b285586863242c4bb6b5f551fae41", "patch": "@@ -10863,29 +10863,29 @@ output_pic_addr_const (FILE *file, rtx x, int code)\n \t  break;\n \tcase UNSPEC_GOTTPOFF:\n \t  /* FIXME: This might be @TPOFF in Sun ld too.  */\n-\t  fputs (\"@GOTTPOFF\", file);\n+\t  fputs (\"@gottpoff\", file);\n \t  break;\n \tcase UNSPEC_TPOFF:\n-\t  fputs (\"@TPOFF\", file);\n+\t  fputs (\"@tpoff\", file);\n \t  break;\n \tcase UNSPEC_NTPOFF:\n \t  if (TARGET_64BIT)\n-\t    fputs (\"@TPOFF\", file);\n+\t    fputs (\"@tpoff\", file);\n \t  else\n-\t    fputs (\"@NTPOFF\", file);\n+\t    fputs (\"@ntpoff\", file);\n \t  break;\n \tcase UNSPEC_DTPOFF:\n-\t  fputs (\"@DTPOFF\", file);\n+\t  fputs (\"@dtpoff\", file);\n \t  break;\n \tcase UNSPEC_GOTNTPOFF:\n \t  if (TARGET_64BIT)\n \t    fputs (ASSEMBLER_DIALECT == ASM_ATT ?\n-\t\t   \"@GOTTPOFF(%rip)\": \"@GOTTPOFF[rip]\", file);\n+\t\t   \"@gottpoff(%rip)\": \"@gottpoff[rip]\", file);\n \t  else\n-\t    fputs (\"@GOTNTPOFF\", file);\n+\t    fputs (\"@gotntpoff\", file);\n \t  break;\n \tcase UNSPEC_INDNTPOFF:\n-\t  fputs (\"@INDNTPOFF\", file);\n+\t  fputs (\"@indntpoff\", file);\n \t  break;\n #if TARGET_MACHO\n \tcase UNSPEC_MACHOPIC_OFFSET:\n@@ -10912,7 +10912,7 @@ i386_output_dwarf_dtprel (FILE *file, int size, rtx x)\n {\n   fputs (ASM_LONG, file);\n   output_addr_const (file, x);\n-  fputs (\"@DTPOFF\", file);\n+  fputs (\"@dtpoff\", file);\n   switch (size)\n     {\n     case 4:\n@@ -12189,34 +12189,34 @@ output_addr_const_extra (FILE *file, rtx x)\n     case UNSPEC_GOTTPOFF:\n       output_addr_const (file, op);\n       /* FIXME: This might be @TPOFF in Sun ld.  */\n-      fputs (\"@GOTTPOFF\", file);\n+      fputs (\"@gottpoff\", file);\n       break;\n     case UNSPEC_TPOFF:\n       output_addr_const (file, op);\n-      fputs (\"@TPOFF\", file);\n+      fputs (\"@tpoff\", file);\n       break;\n     case UNSPEC_NTPOFF:\n       output_addr_const (file, op);\n       if (TARGET_64BIT)\n-\tfputs (\"@TPOFF\", file);\n+\tfputs (\"@tpoff\", file);\n       else\n-\tfputs (\"@NTPOFF\", file);\n+\tfputs (\"@ntpoff\", file);\n       break;\n     case UNSPEC_DTPOFF:\n       output_addr_const (file, op);\n-      fputs (\"@DTPOFF\", file);\n+      fputs (\"@dtpoff\", file);\n       break;\n     case UNSPEC_GOTNTPOFF:\n       output_addr_const (file, op);\n       if (TARGET_64BIT)\n \tfputs (ASSEMBLER_DIALECT == ASM_ATT ?\n-\t       \"@GOTTPOFF(%rip)\" : \"@GOTTPOFF[rip]\", file);\n+\t       \"@gottpoff(%rip)\" : \"@gottpoff[rip]\", file);\n       else\n-\tfputs (\"@GOTNTPOFF\", file);\n+\tfputs (\"@gotntpoff\", file);\n       break;\n     case UNSPEC_INDNTPOFF:\n       output_addr_const (file, op);\n-      fputs (\"@INDNTPOFF\", file);\n+      fputs (\"@indntpoff\", file);\n       break;\n #if TARGET_MACHO\n     case UNSPEC_MACHOPIC_OFFSET:"}, {"sha": "9adf0a67cb941b26589ed11378d890234f42b75c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c26cad132b285586863242c4bb6b5f551fae41/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c26cad132b285586863242c4bb6b5f551fae41/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f1c26cad132b285586863242c4bb6b5f551fae41", "patch": "@@ -14491,7 +14491,7 @@\n    (clobber (match_scratch:SI 5 \"=c\"))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_64BIT && TARGET_GNU_TLS\"\n-  \"lea{l}\\t{%a2@TLSGD(,%1,1), %0|%0, %a2@TLSGD[%1*1]}\\;call\\t%P3\"\n+  \"lea{l}\\t{%a2@tlsgd(,%1,1), %0|%0, %a2@tlsgd[%1*1]}\\;call\\t%P3\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"12\")])\n \n@@ -14530,7 +14530,7 @@\n    (unspec:DI [(match_operand:DI 1 \"tls_symbolic_operand\" \"\")]\n \t      UNSPEC_TLS_GD)]\n   \"TARGET_64BIT\"\n-  { return ASM_BYTE \"0x66\\n\\tlea{q}\\t{%a1@TLSGD(%%rip), %%rdi|rdi, %a1@TLSGD[rip]}\\n\" ASM_SHORT \"0x6666\\n\\trex64\\n\\tcall\\t%P2\"; }\n+  { return ASM_BYTE \"0x66\\n\\tlea{q}\\t{%a1@tlsgd(%%rip), %%rdi|rdi, %a1@tlsgd[rip]}\\n\" ASM_SHORT \"0x6666\\n\\trex64\\n\\tcall\\t%P2\"; }\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"16\")])\n \n@@ -14559,7 +14559,7 @@\n    (clobber (match_scratch:SI 4 \"=c\"))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_64BIT && TARGET_GNU_TLS\"\n-  \"lea{l}\\t{%&@TLSLDM(%1), %0|%0, %&@TLSLDM[%1]}\\;call\\t%P2\"\n+  \"lea{l}\\t{%&@tlsldm(%1), %0|%0, %&@tlsldm[%1]}\\;call\\t%P2\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"11\")])\n \n@@ -14594,7 +14594,7 @@\n \t\t (match_operand:DI 2 \"\" \"\")))\n    (unspec:DI [(const_int 0)] UNSPEC_TLS_LD_BASE)]\n   \"TARGET_64BIT\"\n-  \"lea{q}\\t{%&@TLSLD(%%rip), %%rdi|rdi, %&@TLSLD[rip]}\\;call\\t%P1\"\n+  \"lea{q}\\t{%&@tlsld(%%rip), %%rdi|rdi, %&@tlsld[rip]}\\;call\\t%P1\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"12\")])\n "}, {"sha": "a15ada326a5e5e588c9496faa9dc9de11c6cb4e5", "filename": "gcc/config/i386/sol2-10.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c26cad132b285586863242c4bb6b5f551fae41/gcc%2Fconfig%2Fi386%2Fsol2-10.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c26cad132b285586863242c4bb6b5f551fae41/gcc%2Fconfig%2Fi386%2Fsol2-10.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2-10.h?ref=f1c26cad132b285586863242c4bb6b5f551fae41", "patch": "@@ -50,6 +50,21 @@ along with GCC; see the file COPYING3.  If not see\n   } while (0)\n #endif\n \n+/* As in sol2.h, override the default from i386/x86-64.h to work around\n+   Sun as TLS bug.  */\n+#undef  ASM_OUTPUT_ALIGNED_COMMON\n+#define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (TARGET_SUN_TLS\t\t\t\t\t\t\\\n+\t  && in_section\t\t\t\t\t\t\t\\\n+\t  && ((in_section->common.flags & (SECTION_TLS | SECTION_BSS))\t\\\n+\t      == (SECTION_TLS | SECTION_BSS)))\t\t\t\t\\\n+\tswitch_to_section (bss_section);\t\t\t\t\\\n+      x86_elf_aligned_common (FILE, NAME, SIZE, ALIGN);\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while  (0)\n+\n #undef NO_PROFILE_COUNTERS\n \n #undef MCOUNT_NAME"}, {"sha": "8d15b9d119d793e28b2e909685c84340f7dd3ba6", "filename": "gcc/config/i386/sol2-gas.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c26cad132b285586863242c4bb6b5f551fae41/gcc%2Fconfig%2Fi386%2Fsol2-gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c26cad132b285586863242c4bb6b5f551fae41/gcc%2Fconfig%2Fi386%2Fsol2-gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2-gas.h?ref=f1c26cad132b285586863242c4bb6b5f551fae41", "patch": "@@ -26,3 +26,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n /* Undefine this so that BNSYM/ENSYM pairs are emitted by STABS+.  */\n #undef NO_DBX_BNSYM_ENSYM\n+\n+/* Restore default; gas doesn't understand Sun as .tcomm.  */\n+#undef TLS_COMMON_ASM_OP"}, {"sha": "70c8a8f6744300e953f86f30cafbee8d716f8e47", "filename": "gcc/config/i386/sol2.h", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c26cad132b285586863242c4bb6b5f551fae41/gcc%2Fconfig%2Fi386%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c26cad132b285586863242c4bb6b5f551fae41/gcc%2Fconfig%2Fi386%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2.h?ref=f1c26cad132b285586863242c4bb6b5f551fae41", "patch": "@@ -96,6 +96,43 @@ along with GCC; see the file COPYING3.  If not see\n #undef TARGET_SUN_TLS\n #define TARGET_SUN_TLS 1\n \n+/* Follow Sun requirements for TLS code sequences and use Sun assembler TLS\n+   syntax.  */\n+#undef TARGET_SUN_TLS\n+#define TARGET_SUN_TLS 1\n+\n+/* The Sun assembler uses .tcomm for TLS common sections.  */\n+#define TLS_COMMON_ASM_OP \".tcomm\"\n+\n+/* Similar to the Sun assembler on SPARC, the native assembler requires\n+   TLS objects to be declared as @tls_obj (not @tls_object).  Unlike SPARC,\n+   gas doesn't understand this variant.  */\n+#ifndef USE_GAS\n+#undef  ASM_DECLARE_OBJECT_NAME\n+#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      HOST_WIDE_INT size;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      if (targetm.have_tls && DECL_THREAD_LOCAL_P (DECL))\t\\\n+\tASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"tls_obj\");\t\\\n+      else\t\t\t\t\t\t\t\\\n+\tASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"object\");\t\\\n+\t\t\t\t\t\t\t\t\\\n+      size_directive_output = 0;\t\t\t\t\\\n+      if (!flag_inhibit_size_directive\t\t\t\t\\\n+\t  && (DECL) && DECL_SIZE (DECL))\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  size_directive_output = 1;\t\t\t\t\\\n+\t  size = int_size_in_bytes (TREE_TYPE (DECL));\t\t\\\n+\t  ASM_OUTPUT_SIZE_DIRECTIVE (FILE, NAME, size);\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+      ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+#endif\n+\n /* The Solaris assembler cannot grok .stabd directives.  */\n #undef NO_DBX_BNSYM_ENSYM\n #define NO_DBX_BNSYM_ENSYM 1"}, {"sha": "a20c3b983f69d011e05d19dd9339a7512baa10ef", "filename": "gcc/config/sol2.h", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c26cad132b285586863242c4bb6b5f551fae41/gcc%2Fconfig%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c26cad132b285586863242c4bb6b5f551fae41/gcc%2Fconfig%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.h?ref=f1c26cad132b285586863242c4bb6b5f551fae41", "patch": "@@ -1,6 +1,7 @@\n /* Operating system specific defines to be used when targeting GCC for any\n    Solaris 2 system.\n-   Copyright 2002, 2003, 2004, 2007, 2008, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2003, 2004, 2007, 2008, 2009, 2010\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -265,6 +266,24 @@ __enable_execute_stack (void *addr)\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+/* Solaris 'as' has a bug: a .common directive in .tbss section\n+   behaves as .tls_common rather than normal non-TLS .common.  */\n+#undef  ASM_OUTPUT_ALIGNED_COMMON\n+#define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (TARGET_SUN_TLS\t\t\t\t\t\t\\\n+\t  && in_section\t\t\t\t\t\t\t\\\n+\t  && ((in_section->common.flags & (SECTION_TLS | SECTION_BSS))\t\\\n+\t      == (SECTION_TLS | SECTION_BSS)))\t\t\t\t\\\n+\tswitch_to_section (bss_section);\t\t\t\t\\\n+      fprintf ((FILE), \"%s\", COMMON_ASM_OP);\t\t\t\t\\\n+      assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n+      fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\",\t\t\\\n+\t       (SIZE), (ALIGN) / BITS_PER_UNIT);\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n extern GTY(()) tree solaris_pending_aligns;\n extern GTY(()) tree solaris_pending_inits;\n extern GTY(()) tree solaris_pending_finis;"}, {"sha": "294f9874b01eda5abc284eb4ef9555859d3fcf66", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c26cad132b285586863242c4bb6b5f551fae41/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c26cad132b285586863242c4bb6b5f551fae41/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=f1c26cad132b285586863242c4bb6b5f551fae41", "patch": "@@ -177,24 +177,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* Solaris 'as' has a bug: a .common directive in .tbss section\n-   behaves as .tls_common rather than normal non-TLS .common.  */\n-#undef  ASM_OUTPUT_ALIGNED_COMMON\n-#define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (TARGET_SUN_TLS\t\t\t\t\t\t\\\n-\t  && in_section\t\t\t\t\t\t\t\\\n-\t  && ((in_section->common.flags & (SECTION_TLS | SECTION_BSS))\t\\\n-\t      == (SECTION_TLS | SECTION_BSS)))\t\t\t\t\\\n-\tswitch_to_section (bss_section);\t\t\t\t\\\n-      fprintf ((FILE), \"%s\", COMMON_ASM_OP);\t\t\t\t\\\n-      assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-      fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\",\t\t\\\n-\t       (SIZE), (ALIGN) / BITS_PER_UNIT);\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n /* Use Solaris ELF section syntax.  */\n #undef TARGET_ASM_NAMED_SECTION\n #define TARGET_ASM_NAMED_SECTION sparc_solaris_elf_asm_named_section"}, {"sha": "f5cb4fec8137debed1b3c29640ee6aa2954469e1", "filename": "gcc/configure", "status": "modified", "additions": 44, "deletions": 16, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c26cad132b285586863242c4bb6b5f551fae41/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c26cad132b285586863242c4bb6b5f551fae41/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=f1c26cad132b285586863242c4bb6b5f551fae41", "patch": "@@ -21946,25 +21946,53 @@ foo:\t.long\t25\n \ttls_first_minor=17\n \t;;\n   i[34567]86-*-*)\n-    conftest_s='\n-\t.section \".tdata\",\"awT\",@progbits\n+    case \"$target\" in\n+      i[34567]86-*-solaris2.[56789]*)\n+\t# TLS was introduced in the Solaris 9 4/04 release but\n+\t# we do not enable it by default on Solaris 9 either.\n+\tif test \"x$enable_tls\" = xyes ; then\n+\t  on_solaris=yes\n+\telse\n+\t  enable_tls=no;\n+\tfi\n+\t;;\n+      i[34567]86-*-solaris2.*)\n+\ton_solaris=yes\n+\t;;\n+      *)\n+\ton_solaris=no\n+\t;;\n+    esac\n+    if test x$on_solaris = xyes && test x$gas_flag = xno; then\n+      conftest_s='\n+\t.section .tdata,\"awt\",@progbits'\n+      tls_first_major=0\n+      tls_first_minor=0\n+\n+$as_echo \"#define TLS_SECTION_ASM_FLAG 't'\" >>confdefs.h\n+\n+    else\n+      conftest_s='\n+\t.section \".tdata\",\"awT\",@progbits'\n+      tls_first_major=2\n+      tls_first_minor=14\n+      tls_as_opt=\"--fatal-warnings\"\n+    fi\n+    conftest_s=\"$conftest_s\n foo:\t.long\t25\n \t.text\n \tmovl\t%gs:0, %eax\n-\tleal\tfoo@TLSGD(,%ebx,1), %eax\n-\tleal\tfoo@TLSLDM(%ebx), %eax\n-\tleal\tfoo@DTPOFF(%eax), %edx\n-\tmovl\tfoo@GOTTPOFF(%ebx), %eax\n-\tsubl\tfoo@GOTTPOFF(%ebx), %eax\n-\taddl\tfoo@GOTNTPOFF(%ebx), %eax\n-\tmovl\tfoo@INDNTPOFF, %eax\n-\tmovl\t$foo@TPOFF, %eax\n-\tsubl\t$foo@TPOFF, %eax\n-\tleal\tfoo@NTPOFF(%ecx), %eax'\n-\ttls_first_major=2\n-\ttls_first_minor=14\n-\ttls_as_opt=--fatal-warnings\n-\t;;\n+\tleal\tfoo@tlsgd(,%ebx,1), %eax\n+\tleal\tfoo@tlsldm(%ebx), %eax\n+\tleal\tfoo@dtpoff(%eax), %edx\n+\tmovl\tfoo@gottpoff(%ebx), %eax\n+\tsubl\tfoo@gottpoff(%ebx), %eax\n+\taddl\tfoo@gotntpoff(%ebx), %eax\n+\tmovl\tfoo@indntpoff, %eax\n+\tmovl\t\\$foo@tpoff, %eax\n+\tsubl\t\\$foo@tpoff, %eax\n+\tleal\tfoo@ntpoff(%ecx), %eax\"\n+    ;;\n   x86_64-*-*)\n     conftest_s='\n \t.section \".tdata\",\"awT\",@progbits"}, {"sha": "6eee49b48e34a0978ec5e0f9bcfab9d4085a1d2d", "filename": "gcc/configure.ac", "status": "modified", "additions": 46, "deletions": 17, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c26cad132b285586863242c4bb6b5f551fae41/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c26cad132b285586863242c4bb6b5f551fae41/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=f1c26cad132b285586863242c4bb6b5f551fae41", "patch": "@@ -2,7 +2,7 @@\n # Process this file with autoconf to generate a configuration script.\n \n # Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,\n-# 2007, 2008, 2009 Free Software Foundation, Inc.\n+# 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n \n #This file is part of GCC.\n \n@@ -2573,25 +2573,54 @@ foo:\t.long\t25\n \ttls_first_minor=17\n \t;;\n   i[34567]86-*-*)\n-    conftest_s='\n-\t.section \".tdata\",\"awT\",@progbits\n+    case \"$target\" in\n+      i[34567]86-*-solaris2.[56789]*)\n+\t# TLS was introduced in the Solaris 9 4/04 release but\n+\t# we do not enable it by default on Solaris 9 either.\n+\tif test \"x$enable_tls\" = xyes ; then\n+\t  on_solaris=yes\n+\telse\n+\t  enable_tls=no;\n+\tfi\n+\t;;\n+      i[34567]86-*-solaris2.*)\n+\ton_solaris=yes\n+\t;;\n+      *)\n+\ton_solaris=no\n+\t;;\n+    esac\n+    if test x$on_solaris = xyes && test x$gas_flag = xno; then\n+      conftest_s='\n+\t.section .tdata,\"awt\",@progbits'\n+      tls_first_major=0\n+      tls_first_minor=0\n+changequote([,])dnl\n+      AC_DEFINE(TLS_SECTION_ASM_FLAG, 't',\n+[Define to the flag used to mark TLS sections if the default (`T') doesn't work.])\n+changequote(,)dnl\n+    else\n+      conftest_s='\n+\t.section \".tdata\",\"awT\",@progbits'\n+      tls_first_major=2\n+      tls_first_minor=14\n+      tls_as_opt=\"--fatal-warnings\"\n+    fi\n+    conftest_s=\"$conftest_s\n foo:\t.long\t25\n \t.text\n \tmovl\t%gs:0, %eax\n-\tleal\tfoo@TLSGD(,%ebx,1), %eax\n-\tleal\tfoo@TLSLDM(%ebx), %eax\n-\tleal\tfoo@DTPOFF(%eax), %edx\n-\tmovl\tfoo@GOTTPOFF(%ebx), %eax\n-\tsubl\tfoo@GOTTPOFF(%ebx), %eax\n-\taddl\tfoo@GOTNTPOFF(%ebx), %eax\n-\tmovl\tfoo@INDNTPOFF, %eax\n-\tmovl\t$foo@TPOFF, %eax\n-\tsubl\t$foo@TPOFF, %eax\n-\tleal\tfoo@NTPOFF(%ecx), %eax'\n-\ttls_first_major=2\n-\ttls_first_minor=14\n-\ttls_as_opt=--fatal-warnings\n-\t;;\n+\tleal\tfoo@tlsgd(,%ebx,1), %eax\n+\tleal\tfoo@tlsldm(%ebx), %eax\n+\tleal\tfoo@dtpoff(%eax), %edx\n+\tmovl\tfoo@gottpoff(%ebx), %eax\n+\tsubl\tfoo@gottpoff(%ebx), %eax\n+\taddl\tfoo@gotntpoff(%ebx), %eax\n+\tmovl\tfoo@indntpoff, %eax\n+\tmovl\t\\$foo@tpoff, %eax\n+\tsubl\t\\$foo@tpoff, %eax\n+\tleal\tfoo@ntpoff(%ecx), %eax\"\n+    ;;\n   x86_64-*-*)\n     conftest_s='\n \t.section \".tdata\",\"awT\",@progbits"}, {"sha": "26f90edf3fbd4b100b351dbb62b3740619d1e64b", "filename": "gcc/defaults.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c26cad132b285586863242c4bb6b5f551fae41/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c26cad132b285586863242c4bb6b5f551fae41/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=f1c26cad132b285586863242c4bb6b5f551fae41", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of various defaults for tm.h macros.\n    Copyright (C) 1992, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2005, 2007, 2008, 2009\n+   2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by Ron Guilmette (rfg@monkeys.com)\n \n@@ -118,11 +118,15 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #endif\n #endif\n \n+#ifndef TLS_COMMON_ASM_OP\n+#define TLS_COMMON_ASM_OP \".tls_common\"\n+#endif\n+\n #if defined (HAVE_AS_TLS) && !defined (ASM_OUTPUT_TLS_COMMON)\n #define ASM_OUTPUT_TLS_COMMON(FILE, DECL, NAME, SIZE)\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      fprintf ((FILE), \"\\t.tls_common\\t\");\t\t\t\t\\\n+      fprintf ((FILE), \"\\t%s\\t\", TLS_COMMON_ASM_OP);\t\t\t\\\n       assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n       fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\",\t\t\\\n \t       (SIZE), DECL_ALIGN (DECL) / BITS_PER_UNIT);\t\t\\"}, {"sha": "ba4e61218345178f6ae52516eefde302ceb9966c", "filename": "gcc/varasm.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c26cad132b285586863242c4bb6b5f551fae41/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c26cad132b285586863242c4bb6b5f551fae41/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=f1c26cad132b285586863242c4bb6b5f551fae41", "patch": "@@ -6067,6 +6067,10 @@ default_no_named_section (const char *name ATTRIBUTE_UNUSED,\n   gcc_unreachable ();\n }\n \n+#ifndef TLS_SECTION_ASM_FLAG\n+#define TLS_SECTION_ASM_FLAG 'T'\n+#endif\n+\n void\n default_elf_asm_named_section (const char *name, unsigned int flags,\n \t\t\t       tree decl ATTRIBUTE_UNUSED)\n@@ -6097,7 +6101,7 @@ default_elf_asm_named_section (const char *name, unsigned int flags,\n   if (flags & SECTION_STRINGS)\n     *f++ = 'S';\n   if (flags & SECTION_TLS)\n-    *f++ = 'T';\n+    *f++ = TLS_SECTION_ASM_FLAG;\n   if (HAVE_COMDAT_GROUP && (flags & SECTION_LINKONCE))\n     *f++ = 'G';\n   *f = '\\0';"}]}