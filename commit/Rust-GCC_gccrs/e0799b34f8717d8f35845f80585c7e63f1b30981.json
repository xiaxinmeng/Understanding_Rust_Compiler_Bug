{"sha": "e0799b34f8717d8f35845f80585c7e63f1b30981", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA3OTliMzRmODcxN2Q4ZjM1ODQ1ZjgwNTg1YzdlNjNmMWIzMDk4MQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-04-04T07:18:03Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-04-04T07:18:03Z"}, "message": "(XFtype): Do define it, if LONG_DOUBLE_TYPE_SIZE == 96.\n\n(__fixunsxfdi): New function, if LONG_DOUBLE_TYPE_SIZE == 96.\n(__fixxfdi, __floatdixf, __fixunsxfsi): Likewise.\n\nFrom-SVN: r4000", "tree": {"sha": "4865bb74930196ee268a1361d1340087469e9908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4865bb74930196ee268a1361d1340087469e9908"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0799b34f8717d8f35845f80585c7e63f1b30981", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0799b34f8717d8f35845f80585c7e63f1b30981", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0799b34f8717d8f35845f80585c7e63f1b30981", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0799b34f8717d8f35845f80585c7e63f1b30981/comments", "author": null, "committer": null, "parents": [{"sha": "b7dd0967b071a1e619fa955ce99dfdbc33aa65f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7dd0967b071a1e619fa955ce99dfdbc33aa65f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7dd0967b071a1e619fa955ce99dfdbc33aa65f6"}], "stats": {"total": 83, "additions": 82, "deletions": 1}, "files": [{"sha": "433627edf908c337cd008b31aa202735a5b47a91", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 82, "deletions": 1, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0799b34f8717d8f35845f80585c7e63f1b30981/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0799b34f8717d8f35845f80585c7e63f1b30981/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=e0799b34f8717d8f35845f80585c7e63f1b30981", "patch": "@@ -55,7 +55,7 @@ typedef\t\t int DItype\t__attribute__ ((mode (DI)));\n typedef unsigned int UDItype\t__attribute__ ((mode (DI)));\n typedef \tfloat SFtype\t__attribute__ ((mode (SF)));\n typedef\t\tfloat DFtype\t__attribute__ ((mode (DF)));\n-#if 0\n+#if LONG_DOUBLE_TYPE_SIZE == 96\n typedef\t\tfloat XFtype\t__attribute__ ((mode (XF)));\n #endif\n #if LONG_DOUBLE_TYPE_SIZE == 128\n@@ -803,6 +803,50 @@ __fixtfdi (a)\n }\n #endif\n \n+#if defined(L_fixunsxfdi) && (LONG_DOUBLE_TYPE_SIZE == 96)\n+#define WORD_SIZE (sizeof (SItype) * BITS_PER_UNIT)\n+#define HIGH_WORD_COEFF (((UDItype) 1) << WORD_SIZE)\n+\n+DItype\n+__fixunsxfdi (a)\n+     XFtype a;\n+{\n+  XFtype b;\n+  UDItype v;\n+\n+  if (a < 0)\n+    return 0;\n+\n+  /* Compute high word of result, as a flonum.  */\n+  b = (a / HIGH_WORD_COEFF);\n+  /* Convert that to fixed (but not to DItype!),\n+     and shift it into the high word.  */\n+  v = (USItype) b;\n+  v <<= WORD_SIZE;\n+  /* Remove high part from the XFtype, leaving the low part as flonum.  */\n+  a -= (XFtype)v;\n+  /* Convert that to fixed (but not to DItype!) and add it in.\n+     Sometimes A comes out negative.  This is significant, since\n+     A has more bits than a long int does.  */\n+  if (a < 0)\n+    v -= (USItype) (- a);\n+  else\n+    v += (USItype) a;\n+  return v;\n+}\n+#endif\n+\n+#if defined(L_fixxfdi) && (LONG_DOUBLE_TYPE_SIZE == 96)\n+DItype\n+__fixxfdi (a)\n+     XFtype a;\n+{\n+  if (a < 0)\n+    return - __fixunsxfdi (-a);\n+  return __fixunsxfdi (a);\n+}\n+#endif\n+\n #ifdef L_fixunsdfdi\n #define WORD_SIZE (sizeof (SItype) * BITS_PER_UNIT)\n #define HIGH_WORD_COEFF (((UDItype) 1) << WORD_SIZE)\n@@ -893,6 +937,30 @@ __fixsfdi (SFtype a)\n }\n #endif\n \n+#if defined(L_floatdixf) && (LONG_DOUBLE_TYPE_SIZE == 96)\n+#define WORD_SIZE (sizeof (SItype) * BITS_PER_UNIT)\n+#define HIGH_HALFWORD_COEFF (((UDItype) 1) << (WORD_SIZE / 2))\n+#define HIGH_WORD_COEFF (((UDItype) 1) << WORD_SIZE)\n+\n+XFtype\n+__floatdixf (u)\n+     DItype u;\n+{\n+  XFtype d;\n+  SItype negate = 0;\n+\n+  if (u < 0)\n+    u = -u, negate = 1;\n+\n+  d = (USItype) (u >> WORD_SIZE);\n+  d *= HIGH_HALFWORD_COEFF;\n+  d *= HIGH_HALFWORD_COEFF;\n+  d += (USItype) (u & (HIGH_WORD_COEFF - 1));\n+\n+  return (negate ? -d : d);\n+}\n+#endif\n+\n #if defined(L_floatditf) && (LONG_DOUBLE_TYPE_SIZE == 128)\n #define WORD_SIZE (sizeof (SItype) * BITS_PER_UNIT)\n #define HIGH_HALFWORD_COEFF (((UDItype) 1) << (WORD_SIZE / 2))\n@@ -965,6 +1033,19 @@ __floatdisf (u)\n }\n #endif\n \n+#if defined(L_fixunsxfsi) && LONG_DOUBLE_TYPE_SIZE == 96\n+#include \"glimits.h\"\n+\n+USItype\n+__fixunsxfsi (a)\n+     XFtype a;\n+{\n+  if (a >= - (DFtype) LONG_MIN)\n+    return (SItype) (a + LONG_MIN) - LONG_MIN;\n+  return (SItype) a;\n+}\n+#endif\n+\n #ifdef L_fixunsdfsi\n #include \"glimits.h\"\n "}]}