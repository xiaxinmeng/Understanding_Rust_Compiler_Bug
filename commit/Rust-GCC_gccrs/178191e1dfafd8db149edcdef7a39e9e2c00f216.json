{"sha": "178191e1dfafd8db149edcdef7a39e9e2c00f216", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc4MTkxZTFkZmFmZDhkYjE0OWVkY2RlZjdhMzllOWUyYzAwZjIxNg==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-06-04T10:06:59Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-06-04T10:08:24Z"}, "message": "Fortran/OpenMP: Add omp loop [PR99928]\n\n\tPR middle-end/99928\n\ngcc/fortran/ChangeLog:\n\n\t* dump-parse-tree.c (show_omp_clauses): Handle bind clause.\n\t(show_omp_node): Handle loop directive.\n\t* frontend-passes.c (gfc_code_walker): Likewise.\n\t* gfortran.h (enum gfc_statement): Add\n\tST_OMP_(END_)(TARGET_)(|PARALLEL_|TEAMS_)LOOP.\n\t(enum gfc_omp_bind_type): New.\n\t(gfc_omp_clauses): Use it.\n\t(enum gfc_exec_op): Add EXEC_OMP_(TARGET_)(|PARALLEL_|TEAMS_)LOOP.\n\t* match.h (gfc_match_omp_loop, gfc_match_omp_parallel_loop,\n\tgfc_match_omp_target_parallel_loop, gfc_match_omp_target_teams_loop,\n\tgfc_match_omp_teams_loop): New.\n\t* openmp.c (enum omp_mask1): Add OMP_CLAUSE_BIND.\n\t(gfc_match_omp_clauses): Handle it.\n\t(OMP_LOOP_CLAUSES, gfc_match_omp_loop, gfc_match_omp_teams_loop,\n\tgfc_match_omp_target_teams_loop, gfc_match_omp_parallel_loop,\n\tgfc_match_omp_target_parallel_loop): New.\n\t(resolve_omp_clauses, resolve_omp_do, omp_code_to_statement,\n\tgfc_resolve_omp_directive): Handle omp loop.\n\t* parse.c (decode_omp_directive case_exec_markers, gfc_ascii_statement,\n\tparse_omp_do, parse_executable): Likewise.\n\t(parse_omp_structured_block): Remove ST_ which use parse_omp_do.\n\t* resolve.c (gfc_resolve_blocks): Add omp loop.\n\t* st.c (gfc_free_statement): Likewise.\n\t* trans-openmp.c (gfc_trans_omp_clauses): Handle bind clause.\n\t(gfc_trans_omp_do, gfc_trans_omp_parallel_do, gfc_trans_omp_distribute,\n\tgfc_trans_omp_teams, gfc_trans_omp_target, gfc_trans_omp_directive):\n\tHandle loop directive.\n\t(gfc_split_omp_clauses): Likewise; fix firstprivate/lastprivate\n\tand (in_)reduction for taskloop.\n\t* trans.c (trans_code): Handle omp loop directive.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/gomp/pr99928-3.f90: Add 'default(none)', following\n\tC/C++ version of the patch.\n\t* gfortran.dg/gomp/loop-1.f90: New test.\n\t* gfortran.dg/gomp/loop-2.f90: New test.\n\t* gfortran.dg/gomp/pr99928-1.f90: New test; based on C/C++ test.\n\t* gfortran.dg/gomp/pr99928-11.f90: Likewise.\n\t* gfortran.dg/gomp/pr99928-2.f90: Likewise.\n\t* gfortran.dg/gomp/pr99928-4.f90: Likewise.\n\t* gfortran.dg/gomp/pr99928-5.f90: Likewise.\n\t* gfortran.dg/gomp/pr99928-6.f90: Likewise.\n\t* gfortran.dg/gomp/pr99928-8.f90: Likewise.\n\t* gfortran.dg/goacc/omp.f95: Use 'acc kernels loops' instead\n\tof 'acc loops' to hide unrelated bug for now.\n\t* gfortran.dg/goacc/omp-fixed.f: Likewise", "tree": {"sha": "85549e8299e3e53dc2446dcd95ee738945c8ee81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85549e8299e3e53dc2446dcd95ee738945c8ee81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/178191e1dfafd8db149edcdef7a39e9e2c00f216", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/178191e1dfafd8db149edcdef7a39e9e2c00f216", "html_url": "https://github.com/Rust-GCC/gccrs/commit/178191e1dfafd8db149edcdef7a39e9e2c00f216", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/178191e1dfafd8db149edcdef7a39e9e2c00f216/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7dd2e4eeb44bc8678ecde8a6c7401de85e63561", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7dd2e4eeb44bc8678ecde8a6c7401de85e63561", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7dd2e4eeb44bc8678ecde8a6c7401de85e63561"}], "stats": {"total": 1578, "additions": 1497, "deletions": 81}, "files": [{"sha": "8e2df736d8cad67e4a91aaa6151946612241389b", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=178191e1dfafd8db149edcdef7a39e9e2c00f216", "patch": "@@ -1718,6 +1718,19 @@ show_omp_clauses (gfc_omp_clauses *omp_clauses)\n \t}\n       fprintf (dumpfile, \" PROC_BIND(%s)\", type);\n     }\n+  if (omp_clauses->bind != OMP_BIND_UNSET)\n+    {\n+      const char *type;\n+      switch (omp_clauses->bind)\n+\t{\n+\tcase OMP_BIND_TEAMS: type = \"TEAMS\"; break;\n+\tcase OMP_BIND_PARALLEL: type = \"PARALLEL\"; break;\n+\tcase OMP_BIND_THREAD: type = \"THREAD\"; break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+      fprintf (dumpfile, \" BIND(%s)\", type);\n+    }\n   if (omp_clauses->num_teams)\n     {\n       fputs (\" NUM_TEAMS(\", dumpfile);\n@@ -1896,6 +1909,7 @@ show_omp_node (int level, gfc_code *c)\n     case EXEC_OMP_DISTRIBUTE_SIMD: name = \"DISTRIBUTE SIMD\"; break;\n     case EXEC_OMP_DO: name = \"DO\"; break;\n     case EXEC_OMP_DO_SIMD: name = \"DO SIMD\"; break;\n+    case EXEC_OMP_LOOP: name = \"LOOP\"; break;\n     case EXEC_OMP_FLUSH: name = \"FLUSH\"; break;\n     case EXEC_OMP_MASTER: name = \"MASTER\"; break;\n     case EXEC_OMP_MASTER_TASKLOOP: name = \"MASTER TASKLOOP\"; break;\n@@ -1905,6 +1919,7 @@ show_omp_node (int level, gfc_code *c)\n     case EXEC_OMP_PARALLEL: name = \"PARALLEL\"; break;\n     case EXEC_OMP_PARALLEL_DO: name = \"PARALLEL DO\"; break;\n     case EXEC_OMP_PARALLEL_DO_SIMD: name = \"PARALLEL DO SIMD\"; break;\n+    case EXEC_OMP_PARALLEL_LOOP: name = \"PARALLEL LOOP\"; break;\n     case EXEC_OMP_PARALLEL_MASTER: name = \"PARALLEL MASTER\"; break;\n     case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n       name = \"PARALLEL MASTER TASKLOOP\"; break;\n@@ -1924,6 +1939,7 @@ show_omp_node (int level, gfc_code *c)\n     case EXEC_OMP_TARGET_PARALLEL_DO: name = \"TARGET PARALLEL DO\"; break;\n     case EXEC_OMP_TARGET_PARALLEL_DO_SIMD:\n       name = \"TARGET_PARALLEL_DO_SIMD\"; break;\n+    case EXEC_OMP_TARGET_PARALLEL_LOOP: name = \"TARGET PARALLEL LOOP\"; break;\n     case EXEC_OMP_TARGET_SIMD: name = \"TARGET SIMD\"; break;\n     case EXEC_OMP_TARGET_TEAMS: name = \"TARGET TEAMS\"; break;\n     case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE:\n@@ -1934,6 +1950,7 @@ show_omp_node (int level, gfc_code *c)\n       name = \"TARGET TEAMS DISTRIBUTE PARALLEL DO SIMD\"; break;\n     case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD:\n       name = \"TARGET TEAMS DISTRIBUTE SIMD\"; break;\n+    case EXEC_OMP_TARGET_TEAMS_LOOP: name = \"TARGET TEAMS LOOP\"; break;\n     case EXEC_OMP_TARGET_UPDATE: name = \"TARGET UPDATE\"; break;\n     case EXEC_OMP_TASK: name = \"TASK\"; break;\n     case EXEC_OMP_TASKGROUP: name = \"TASKGROUP\"; break;\n@@ -1948,6 +1965,7 @@ show_omp_node (int level, gfc_code *c)\n     case EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:\n       name = \"TEAMS DISTRIBUTE PARALLEL DO SIMD\"; break;\n     case EXEC_OMP_TEAMS_DISTRIBUTE_SIMD: name = \"TEAMS DISTRIBUTE SIMD\"; break;\n+    case EXEC_OMP_TEAMS_LOOP: name = \"TEAMS LOOP\"; break;\n     case EXEC_OMP_WORKSHARE: name = \"WORKSHARE\"; break;\n     default:\n       gcc_unreachable ();\n@@ -1977,10 +1995,12 @@ show_omp_node (int level, gfc_code *c)\n     case EXEC_OMP_DISTRIBUTE_SIMD:\n     case EXEC_OMP_DO:\n     case EXEC_OMP_DO_SIMD:\n+    case EXEC_OMP_LOOP:\n     case EXEC_OMP_ORDERED:\n     case EXEC_OMP_PARALLEL:\n     case EXEC_OMP_PARALLEL_DO:\n     case EXEC_OMP_PARALLEL_DO_SIMD:\n+    case EXEC_OMP_PARALLEL_LOOP:\n     case EXEC_OMP_PARALLEL_MASTER:\n     case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n     case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n@@ -1997,12 +2017,14 @@ show_omp_node (int level, gfc_code *c)\n     case EXEC_OMP_TARGET_PARALLEL:\n     case EXEC_OMP_TARGET_PARALLEL_DO:\n     case EXEC_OMP_TARGET_PARALLEL_DO_SIMD:\n+    case EXEC_OMP_TARGET_PARALLEL_LOOP:\n     case EXEC_OMP_TARGET_SIMD:\n     case EXEC_OMP_TARGET_TEAMS:\n     case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE:\n     case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO:\n     case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:\n     case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD:\n+    case EXEC_OMP_TARGET_TEAMS_LOOP:\n     case EXEC_OMP_TARGET_UPDATE:\n     case EXEC_OMP_TASK:\n     case EXEC_OMP_TASKLOOP:\n@@ -2012,6 +2034,7 @@ show_omp_node (int level, gfc_code *c)\n     case EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO:\n     case EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:\n     case EXEC_OMP_TEAMS_DISTRIBUTE_SIMD:\n+    case EXEC_OMP_TEAMS_LOOP:\n     case EXEC_OMP_WORKSHARE:\n       omp_clauses = c->ext.omp_clauses;\n       break;"}, {"sha": "34fb22c57449db1af682769380f09835feb51c50", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=178191e1dfafd8db149edcdef7a39e9e2c00f216", "patch": "@@ -5542,6 +5542,7 @@ gfc_code_walker (gfc_code **c, walk_code_fn_t codefn, walk_expr_fn_t exprfn,\n \t    case EXEC_OMP_PARALLEL:\n \t    case EXEC_OMP_PARALLEL_DO:\n \t    case EXEC_OMP_PARALLEL_DO_SIMD:\n+\t    case EXEC_OMP_PARALLEL_LOOP:\n \t    case EXEC_OMP_PARALLEL_MASTER:\n \t    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n \t    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n@@ -5567,6 +5568,7 @@ gfc_code_walker (gfc_code **c, walk_code_fn_t codefn, walk_expr_fn_t exprfn,\n \t    case EXEC_OMP_DISTRIBUTE_SIMD:\n \t    case EXEC_OMP_DO:\n \t    case EXEC_OMP_DO_SIMD:\n+\t    case EXEC_OMP_LOOP:\n \t    case EXEC_OMP_ORDERED:\n \t    case EXEC_OMP_SECTIONS:\n \t    case EXEC_OMP_SINGLE:\n@@ -5581,19 +5583,22 @@ gfc_code_walker (gfc_code **c, walk_code_fn_t codefn, walk_expr_fn_t exprfn,\n \t    case EXEC_OMP_TARGET_PARALLEL:\n \t    case EXEC_OMP_TARGET_PARALLEL_DO:\n \t    case EXEC_OMP_TARGET_PARALLEL_DO_SIMD:\n+\t    case EXEC_OMP_TARGET_PARALLEL_LOOP:\n \t    case EXEC_OMP_TARGET_SIMD:\n \t    case EXEC_OMP_TARGET_TEAMS:\n \t    case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE:\n \t    case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO:\n \t    case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:\n \t    case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD:\n+\t    case EXEC_OMP_TARGET_TEAMS_LOOP:\n \t    case EXEC_OMP_TARGET_UPDATE:\n \t    case EXEC_OMP_TASK:\n \t    case EXEC_OMP_TEAMS:\n \t    case EXEC_OMP_TEAMS_DISTRIBUTE:\n \t    case EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO:\n \t    case EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:\n \t    case EXEC_OMP_TEAMS_DISTRIBUTE_SIMD:\n+\t    case EXEC_OMP_TEAMS_LOOP:\n \n \t      /* Come to this label only from the\n \t\t EXEC_OMP_PARALLEL_* cases above.  */"}, {"sha": "cbc95d3726dded8ab789babae569ba66844fe55d", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=178191e1dfafd8db149edcdef7a39e9e2c00f216", "patch": "@@ -271,7 +271,11 @@ enum gfc_statement\n   ST_OMP_END_PARALLEL_MASTER_TASKLOOP, ST_OMP_PARALLEL_MASTER_TASKLOOP_SIMD,\n   ST_OMP_END_PARALLEL_MASTER_TASKLOOP_SIMD, ST_OMP_MASTER_TASKLOOP,\n   ST_OMP_END_MASTER_TASKLOOP, ST_OMP_MASTER_TASKLOOP_SIMD,\n-  ST_OMP_END_MASTER_TASKLOOP_SIMD, ST_NONE\n+  ST_OMP_END_MASTER_TASKLOOP_SIMD, ST_OMP_LOOP, ST_OMP_END_LOOP,\n+  ST_OMP_PARALLEL_LOOP, ST_OMP_END_PARALLEL_LOOP, ST_OMP_TEAMS_LOOP,\n+  ST_OMP_END_TEAMS_LOOP, ST_OMP_TARGET_PARALLEL_LOOP,\n+  ST_OMP_END_TARGET_PARALLEL_LOOP, ST_OMP_TARGET_TEAMS_LOOP,\n+  ST_OMP_END_TARGET_TEAMS_LOOP, ST_NONE\n };\n \n /* Types of interfaces that we can have.  Assignment interfaces are\n@@ -1401,6 +1405,14 @@ enum gfc_omp_memorder\n   OMP_MEMORDER_RELAXED\n };\n \n+enum gfc_omp_bind_type\n+{\n+  OMP_BIND_UNSET,\n+  OMP_BIND_TEAMS,\n+  OMP_BIND_PARALLEL,\n+  OMP_BIND_THREAD\n+};\n+\n typedef struct gfc_omp_clauses\n {\n   struct gfc_expr *if_expr;\n@@ -1421,6 +1433,7 @@ typedef struct gfc_omp_clauses\n   enum gfc_omp_cancel_kind cancel;\n   enum gfc_omp_proc_bind_kind proc_bind;\n   enum gfc_omp_depend_op depobj_update;\n+  enum gfc_omp_bind_type bind;\n   struct gfc_expr *safelen_expr;\n   struct gfc_expr *simdlen_expr;\n   struct gfc_expr *num_teams;\n@@ -2717,7 +2730,8 @@ enum gfc_exec_op\n   EXEC_OMP_TASKLOOP, EXEC_OMP_TASKLOOP_SIMD, EXEC_OMP_SCAN, EXEC_OMP_DEPOBJ,\n   EXEC_OMP_PARALLEL_MASTER, EXEC_OMP_PARALLEL_MASTER_TASKLOOP,\n   EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD, EXEC_OMP_MASTER_TASKLOOP,\n-  EXEC_OMP_MASTER_TASKLOOP_SIMD\n+  EXEC_OMP_MASTER_TASKLOOP_SIMD, EXEC_OMP_LOOP, EXEC_OMP_PARALLEL_LOOP,\n+  EXEC_OMP_TEAMS_LOOP, EXEC_OMP_TARGET_PARALLEL_LOOP, EXEC_OMP_TARGET_TEAMS_LOOP\n };\n \n typedef struct gfc_code"}, {"sha": "bb1f34fc4448be9fdc70cff7f3eef95264e3a511", "filename": "gcc/fortran/match.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ffortran%2Fmatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ffortran%2Fmatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.h?ref=178191e1dfafd8db149edcdef7a39e9e2c00f216", "patch": "@@ -167,6 +167,7 @@ match gfc_match_omp_distribute_parallel_do_simd (void);\n match gfc_match_omp_distribute_simd (void);\n match gfc_match_omp_do (void);\n match gfc_match_omp_do_simd (void);\n+match gfc_match_omp_loop (void);\n match gfc_match_omp_flush (void);\n match gfc_match_omp_master (void);\n match gfc_match_omp_master_taskloop (void);\n@@ -176,6 +177,7 @@ match gfc_match_omp_ordered_depend (void);\n match gfc_match_omp_parallel (void);\n match gfc_match_omp_parallel_do (void);\n match gfc_match_omp_parallel_do_simd (void);\n+match gfc_match_omp_parallel_loop (void);\n match gfc_match_omp_parallel_master (void);\n match gfc_match_omp_parallel_master_taskloop (void);\n match gfc_match_omp_parallel_master_taskloop_simd (void);\n@@ -193,12 +195,14 @@ match gfc_match_omp_target_exit_data (void);\n match gfc_match_omp_target_parallel (void);\n match gfc_match_omp_target_parallel_do (void);\n match gfc_match_omp_target_parallel_do_simd (void);\n+match gfc_match_omp_target_parallel_loop (void);\n match gfc_match_omp_target_simd (void);\n match gfc_match_omp_target_teams (void);\n match gfc_match_omp_target_teams_distribute (void);\n match gfc_match_omp_target_teams_distribute_parallel_do (void);\n match gfc_match_omp_target_teams_distribute_parallel_do_simd (void);\n match gfc_match_omp_target_teams_distribute_simd (void);\n+match gfc_match_omp_target_teams_loop (void);\n match gfc_match_omp_target_update (void);\n match gfc_match_omp_task (void);\n match gfc_match_omp_taskgroup (void);\n@@ -211,6 +215,7 @@ match gfc_match_omp_teams_distribute (void);\n match gfc_match_omp_teams_distribute_parallel_do (void);\n match gfc_match_omp_teams_distribute_parallel_do_simd (void);\n match gfc_match_omp_teams_distribute_simd (void);\n+match gfc_match_omp_teams_loop (void);\n match gfc_match_omp_threadprivate (void);\n match gfc_match_omp_workshare (void);\n match gfc_match_omp_end_critical (void);"}, {"sha": "d7136b1e6d75df7f31b918464d2af35f9119cc78", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 92, "deletions": 2, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=178191e1dfafd8db149edcdef7a39e9e2c00f216", "patch": "@@ -846,6 +846,7 @@ enum omp_mask1\n   OMP_CLAUSE_MEMORDER,  /* OpenMP 5.0.  */\n   OMP_CLAUSE_DETACH,  /* OpenMP 5.0.  */\n   OMP_CLAUSE_AFFINITY,  /* OpenMP 5.0.  */\n+  OMP_CLAUSE_BIND,  /* OpenMP 5.0.  */\n   OMP_CLAUSE_NOWAIT,\n   /* This must come last.  */\n   OMP_MASK1_LAST\n@@ -1426,6 +1427,26 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t\t\t\t\t   allow_derived))\n \t    continue;\n \t  break;\n+\tcase 'b':\n+\t  if ((mask & OMP_CLAUSE_BIND)\n+\t      && c->bind == OMP_BIND_UNSET\n+\t      && gfc_match (\"bind ( \") == MATCH_YES)\n+\t    {\n+\t      if (gfc_match (\"teams )\") == MATCH_YES)\n+\t\tc->bind = OMP_BIND_TEAMS;\n+\t      else if (gfc_match (\"parallel )\") == MATCH_YES)\n+\t\tc->bind = OMP_BIND_PARALLEL;\n+\t      else if (gfc_match (\"thread )\") == MATCH_YES)\n+\t\tc->bind = OMP_BIND_THREAD;\n+\t      else\n+\t\t{\n+\t\t  gfc_error (\"Expected TEAMS, PARALLEL or THEAD as binding in \"\n+\t\t\t     \"BIND at %C\");\n+\t\t  break;\n+\t\t}\n+\t      continue;\n+\t    }\n+\t  break;\n \tcase 'c':\n \t  if ((mask & OMP_CLAUSE_CAPTURE)\n \t      && !c->capture\n@@ -3016,6 +3037,9 @@ gfc_match_oacc_routine (void)\n    | OMP_CLAUSE_LASTPRIVATE | OMP_CLAUSE_REDUCTION\t\t\t\\\n    | OMP_CLAUSE_SCHEDULE | OMP_CLAUSE_ORDERED | OMP_CLAUSE_COLLAPSE\t\\\n    | OMP_CLAUSE_LINEAR | OMP_CLAUSE_ORDER)\n+#define OMP_LOOP_CLAUSES \\\n+  (omp_mask (OMP_CLAUSE_BIND) | OMP_CLAUSE_COLLAPSE | OMP_CLAUSE_ORDER\t\\\n+   | OMP_CLAUSE_PRIVATE | OMP_CLAUSE_LASTPRIVATE | OMP_CLAUSE_REDUCTION)\n #define OMP_SECTIONS_CLAUSES \\\n   (omp_mask (OMP_CLAUSE_PRIVATE) | OMP_CLAUSE_FIRSTPRIVATE\t\t\\\n    | OMP_CLAUSE_LASTPRIVATE | OMP_CLAUSE_REDUCTION)\n@@ -3254,6 +3278,45 @@ gfc_match_omp_do_simd (void)\n }\n \n \n+match\n+gfc_match_omp_loop (void)\n+{\n+  return match_omp (EXEC_OMP_LOOP, OMP_LOOP_CLAUSES);\n+}\n+\n+\n+match\n+gfc_match_omp_teams_loop (void)\n+{\n+  return match_omp (EXEC_OMP_TEAMS_LOOP, OMP_TEAMS_CLAUSES | OMP_LOOP_CLAUSES);\n+}\n+\n+\n+match\n+gfc_match_omp_target_teams_loop (void)\n+{\n+  return match_omp (EXEC_OMP_TARGET_TEAMS_LOOP,\n+\t\t    OMP_TARGET_CLAUSES | OMP_TEAMS_CLAUSES | OMP_LOOP_CLAUSES);\n+}\n+\n+\n+match\n+gfc_match_omp_parallel_loop (void)\n+{\n+  return match_omp (EXEC_OMP_PARALLEL_LOOP,\n+\t\t    OMP_PARALLEL_CLAUSES | OMP_LOOP_CLAUSES);\n+}\n+\n+\n+match\n+gfc_match_omp_target_parallel_loop (void)\n+{\n+  return match_omp (EXEC_OMP_TARGET_PARALLEL_LOOP,\n+\t\t    (OMP_TARGET_CLAUSES | OMP_PARALLEL_CLAUSES\n+\t\t     | OMP_LOOP_CLAUSES));\n+}\n+\n+\n match\n gfc_match_omp_flush (void)\n {\n@@ -5889,14 +5952,19 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t\t  {\n \t\t  case OMP_LIST_REDUCTION_TASK:\n \t\t    if (code\n-\t\t\t&& (code->op == EXEC_OMP_TASKLOOP\n+\t\t\t&& (code->op == EXEC_OMP_LOOP\n+\t\t\t    || code->op == EXEC_OMP_TASKLOOP\n \t\t\t    || code->op == EXEC_OMP_TASKLOOP_SIMD\n \t\t\t    || code->op == EXEC_OMP_MASTER_TASKLOOP\n \t\t\t    || code->op == EXEC_OMP_MASTER_TASKLOOP_SIMD\n+\t\t\t    || code->op == EXEC_OMP_PARALLEL_LOOP\n \t\t\t    || code->op == EXEC_OMP_PARALLEL_MASTER_TASKLOOP\n \t\t\t    || code->op == EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD\n+\t\t\t    || code->op == EXEC_OMP_TARGET_PARALLEL_LOOP\n+\t\t\t    || code->op == EXEC_OMP_TARGET_TEAMS_LOOP\n \t\t\t    || code->op == EXEC_OMP_TEAMS\n-\t\t\t    || code->op == EXEC_OMP_TEAMS_DISTRIBUTE))\n+\t\t\t    || code->op == EXEC_OMP_TEAMS_DISTRIBUTE\n+\t\t\t    || code->op == EXEC_OMP_TEAMS_LOOP))\n \t\t      {\n \t\t\tgfc_error (\"Only DEFAULT permitted as reduction-\"\n \t\t\t\t   \"modifier in REDUCTION clause at %L\",\n@@ -6953,11 +7021,13 @@ resolve_omp_do (gfc_code *code)\n       break;\n     case EXEC_OMP_DO: name = \"!$OMP DO\"; break;\n     case EXEC_OMP_DO_SIMD: name = \"!$OMP DO SIMD\"; is_simd = true; break;\n+    case EXEC_OMP_LOOP: name = \"!$OMP LOOP\"; break;\n     case EXEC_OMP_PARALLEL_DO: name = \"!$OMP PARALLEL DO\"; break;\n     case EXEC_OMP_PARALLEL_DO_SIMD:\n       name = \"!$OMP PARALLEL DO SIMD\";\n       is_simd = true;\n       break;\n+    case EXEC_OMP_PARALLEL_LOOP: name = \"!$OMP PARALLEL LOOP\"; break;\n     case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n       name = \"!$OMP PARALLEL MASTER TASKLOOP\";\n       break;\n@@ -6976,6 +7046,9 @@ resolve_omp_do (gfc_code *code)\n       name = \"!$OMP TARGET PARALLEL DO SIMD\";\n       is_simd = true;\n       break;\n+    case EXEC_OMP_TARGET_PARALLEL_LOOP:\n+      name = \"!$OMP TARGET PARALLEL LOOP\";\n+      break;\n     case EXEC_OMP_TARGET_SIMD:\n       name = \"!$OMP TARGET SIMD\";\n       is_simd = true;\n@@ -6994,6 +7067,7 @@ resolve_omp_do (gfc_code *code)\n       name = \"!$OMP TARGET TEAMS DISTRIBUTE SIMD\";\n       is_simd = true;\n       break;\n+    case EXEC_OMP_TARGET_TEAMS_LOOP: name = \"!$OMP TARGET TEAMS LOOP\"; break;\n     case EXEC_OMP_TASKLOOP: name = \"!$OMP TASKLOOP\"; break;\n     case EXEC_OMP_TASKLOOP_SIMD:\n       name = \"!$OMP TASKLOOP SIMD\";\n@@ -7011,6 +7085,7 @@ resolve_omp_do (gfc_code *code)\n       name = \"!$OMP TEAMS DISTRIBUTE SIMD\";\n       is_simd = true;\n       break;\n+    case EXEC_OMP_TEAMS_LOOP: name = \"!$OMP TEAMS LOOP\"; break;\n     default: gcc_unreachable ();\n     }\n \n@@ -7152,6 +7227,8 @@ omp_code_to_statement (gfc_code *code)\n       return ST_OMP_PARALLEL_WORKSHARE;\n     case EXEC_OMP_DO:\n       return ST_OMP_DO;\n+    case EXEC_OMP_LOOP:\n+      return ST_OMP_LOOP;\n     case EXEC_OMP_ATOMIC:\n       return ST_OMP_ATOMIC;\n     case EXEC_OMP_BARRIER:\n@@ -7190,6 +7267,8 @@ omp_code_to_statement (gfc_code *code)\n       return ST_OMP_TARGET_PARALLEL_DO;\n     case EXEC_OMP_TARGET_PARALLEL_DO_SIMD:\n       return ST_OMP_TARGET_PARALLEL_DO_SIMD;\n+    case EXEC_OMP_TARGET_PARALLEL_LOOP:\n+      return ST_OMP_TARGET_PARALLEL_LOOP;\n     case EXEC_OMP_TARGET_SIMD:\n       return ST_OMP_TARGET_SIMD;\n     case EXEC_OMP_TARGET_TEAMS:\n@@ -7202,6 +7281,8 @@ omp_code_to_statement (gfc_code *code)\n       return ST_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD;\n     case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD:\n       return ST_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD;\n+    case EXEC_OMP_TARGET_TEAMS_LOOP:\n+      return ST_OMP_TARGET_TEAMS_LOOP;\n     case EXEC_OMP_TARGET_UPDATE:\n       return ST_OMP_TARGET_UPDATE;\n     case EXEC_OMP_TASKGROUP:\n@@ -7224,10 +7305,14 @@ omp_code_to_statement (gfc_code *code)\n       return ST_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD;\n     case EXEC_OMP_TEAMS_DISTRIBUTE_SIMD:\n       return ST_OMP_TEAMS_DISTRIBUTE_SIMD;\n+    case EXEC_OMP_TEAMS_LOOP:\n+      return ST_OMP_TEAMS_LOOP;\n     case EXEC_OMP_PARALLEL_DO:\n       return ST_OMP_PARALLEL_DO;\n     case EXEC_OMP_PARALLEL_DO_SIMD:\n       return ST_OMP_PARALLEL_DO_SIMD;\n+    case EXEC_OMP_PARALLEL_LOOP:\n+      return ST_OMP_PARALLEL_LOOP;\n     case EXEC_OMP_DEPOBJ:\n       return ST_OMP_DEPOBJ;\n     default:\n@@ -7628,26 +7713,31 @@ gfc_resolve_omp_directive (gfc_code *code, gfc_namespace *ns)\n     case EXEC_OMP_DISTRIBUTE_SIMD:\n     case EXEC_OMP_DO:\n     case EXEC_OMP_DO_SIMD:\n+    case EXEC_OMP_LOOP:\n     case EXEC_OMP_PARALLEL_DO:\n     case EXEC_OMP_PARALLEL_DO_SIMD:\n+    case EXEC_OMP_PARALLEL_LOOP:\n     case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n     case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n     case EXEC_OMP_MASTER_TASKLOOP:\n     case EXEC_OMP_MASTER_TASKLOOP_SIMD:\n     case EXEC_OMP_SIMD:\n     case EXEC_OMP_TARGET_PARALLEL_DO:\n     case EXEC_OMP_TARGET_PARALLEL_DO_SIMD:\n+    case EXEC_OMP_TARGET_PARALLEL_LOOP:\n     case EXEC_OMP_TARGET_SIMD:\n     case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE:\n     case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO:\n     case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:\n     case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD:\n+    case EXEC_OMP_TARGET_TEAMS_LOOP:\n     case EXEC_OMP_TASKLOOP:\n     case EXEC_OMP_TASKLOOP_SIMD:\n     case EXEC_OMP_TEAMS_DISTRIBUTE:\n     case EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO:\n     case EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:\n     case EXEC_OMP_TEAMS_DISTRIBUTE_SIMD:\n+    case EXEC_OMP_TEAMS_LOOP:\n       resolve_omp_do (code);\n       break;\n     case EXEC_OMP_CANCEL:"}, {"sha": "0522b3913935363af37e3ae1217ee085445ec7e4", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 62, "deletions": 42, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=178191e1dfafd8db149edcdef7a39e9e2c00f216", "patch": "@@ -988,6 +988,9 @@ decode_omp_directive (void)\n \t      ST_OMP_MASTER_TASKLOOP);\n       matcho (\"master\", gfc_match_omp_master, ST_OMP_MASTER);\n       break;\n+    case 'l':\n+      matcho (\"loop\", gfc_match_omp_loop, ST_OMP_LOOP);\n+      break;\n     case 'o':\n       if (gfc_match (\"ordered depend (\") == MATCH_YES)\n \t{\n@@ -1004,6 +1007,8 @@ decode_omp_directive (void)\n       matchs (\"parallel do simd\", gfc_match_omp_parallel_do_simd,\n \t      ST_OMP_PARALLEL_DO_SIMD);\n       matcho (\"parallel do\", gfc_match_omp_parallel_do, ST_OMP_PARALLEL_DO);\n+      matcho (\"parallel loop\", gfc_match_omp_parallel_loop,\n+\t      ST_OMP_PARALLEL_LOOP);\n       matcho (\"parallel master taskloop simd\",\n \t      gfc_match_omp_parallel_master_taskloop_simd,\n \t      ST_OMP_PARALLEL_MASTER_TASKLOOP_SIMD);\n@@ -1037,6 +1042,8 @@ decode_omp_directive (void)\n \t      ST_OMP_TARGET_PARALLEL_DO_SIMD);\n       matcho (\"target parallel do\", gfc_match_omp_target_parallel_do,\n \t      ST_OMP_TARGET_PARALLEL_DO);\n+      matcho (\"target parallel loop\", gfc_match_omp_target_parallel_loop,\n+\t      ST_OMP_TARGET_PARALLEL_LOOP);\n       matcho (\"target parallel\", gfc_match_omp_target_parallel,\n \t      ST_OMP_TARGET_PARALLEL);\n       matchs (\"target simd\", gfc_match_omp_target_simd, ST_OMP_TARGET_SIMD);\n@@ -1051,6 +1058,8 @@ decode_omp_directive (void)\n \t      ST_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD);\n       matcho (\"target teams distribute\", gfc_match_omp_target_teams_distribute,\n \t      ST_OMP_TARGET_TEAMS_DISTRIBUTE);\n+      matcho (\"target teams loop\", gfc_match_omp_target_teams_loop,\n+\t      ST_OMP_TARGET_TEAMS_LOOP);\n       matcho (\"target teams\", gfc_match_omp_target_teams, ST_OMP_TARGET_TEAMS);\n       matcho (\"target update\", gfc_match_omp_target_update,\n \t      ST_OMP_TARGET_UPDATE);\n@@ -1072,6 +1081,7 @@ decode_omp_directive (void)\n \t      ST_OMP_TEAMS_DISTRIBUTE_SIMD);\n       matcho (\"teams distribute\", gfc_match_omp_teams_distribute,\n \t      ST_OMP_TEAMS_DISTRIBUTE);\n+      matcho (\"teams loop\", gfc_match_omp_teams_loop, ST_OMP_TEAMS_LOOP);\n       matcho (\"teams\", gfc_match_omp_teams, ST_OMP_TEAMS);\n       matchdo (\"threadprivate\", gfc_match_omp_threadprivate,\n \t       ST_OMP_THREADPRIVATE);\n@@ -1125,9 +1135,11 @@ decode_omp_directive (void)\n     case ST_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD:\n     case ST_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO:\n     case ST_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:\n+    case ST_OMP_TARGET_TEAMS_LOOP:\n     case ST_OMP_TARGET_PARALLEL:\n     case ST_OMP_TARGET_PARALLEL_DO:\n     case ST_OMP_TARGET_PARALLEL_DO_SIMD:\n+    case ST_OMP_TARGET_PARALLEL_LOOP:\n     case ST_OMP_TARGET_SIMD:\n     case ST_OMP_TARGET_UPDATE:\n       {\n@@ -1650,6 +1662,8 @@ next_statement (void)\n   case ST_OMP_DISTRIBUTE_PARALLEL_DO_SIMD: case ST_OMP_TARGET_PARALLEL: \\\n   case ST_OMP_TARGET_PARALLEL_DO: case ST_OMP_TARGET_PARALLEL_DO_SIMD: \\\n   case ST_OMP_TARGET_SIMD: case ST_OMP_TASKLOOP: case ST_OMP_TASKLOOP_SIMD: \\\n+  case ST_OMP_LOOP: case ST_OMP_PARALLEL_LOOP: case ST_OMP_TEAMS_LOOP: \\\n+  case ST_OMP_TARGET_PARALLEL_LOOP: case ST_OMP_TARGET_TEAMS_LOOP: \\\n   case ST_CRITICAL: \\\n   case ST_OACC_PARALLEL_LOOP: case ST_OACC_PARALLEL: case ST_OACC_KERNELS: \\\n   case ST_OACC_DATA: case ST_OACC_HOST_DATA: case ST_OACC_LOOP: \\\n@@ -2359,6 +2373,9 @@ gfc_ascii_statement (gfc_statement st)\n     case ST_OMP_END_SIMD:\n       p = \"!$OMP END SIMD\";\n       break;\n+    case ST_OMP_END_LOOP:\n+      p = \"!$OMP END LOOP\";\n+      break;\n     case ST_OMP_END_MASTER:\n       p = \"!$OMP END MASTER\";\n       break;\n@@ -2380,6 +2397,9 @@ gfc_ascii_statement (gfc_statement st)\n     case ST_OMP_END_PARALLEL_DO_SIMD:\n       p = \"!$OMP END PARALLEL DO SIMD\";\n       break;\n+    case ST_OMP_END_PARALLEL_LOOP:\n+      p = \"!$OMP END PARALLEL LOOP\";\n+      break;\n     case ST_OMP_END_PARALLEL_MASTER:\n       p = \"!$OMP END PARALLEL MASTER\";\n       break;\n@@ -2419,6 +2439,9 @@ gfc_ascii_statement (gfc_statement st)\n     case ST_OMP_END_TARGET_PARALLEL_DO_SIMD:\n       p = \"!$OMP END TARGET PARALLEL DO SIMD\";\n       break;\n+    case ST_OMP_END_TARGET_PARALLEL_LOOP:\n+      p = \"!$OMP END TARGET PARALLEL LOOP\";\n+      break;\n     case ST_OMP_END_TARGET_SIMD:\n       p = \"!$OMP END TARGET SIMD\";\n       break;\n@@ -2437,6 +2460,9 @@ gfc_ascii_statement (gfc_statement st)\n     case ST_OMP_END_TARGET_TEAMS_DISTRIBUTE_SIMD:\n       p = \"!$OMP END TARGET TEAMS DISTRIBUTE SIMD\";\n       break;\n+    case ST_OMP_END_TARGET_TEAMS_LOOP:\n+      p = \"!$OMP END TARGET TEAMS LOOP\";\n+      break;\n     case ST_OMP_END_TASKGROUP:\n       p = \"!$OMP END TASKGROUP\";\n       break;\n@@ -2461,12 +2487,18 @@ gfc_ascii_statement (gfc_statement st)\n     case ST_OMP_END_TEAMS_DISTRIBUTE_SIMD:\n       p = \"!$OMP END TEAMS DISTRIBUTE SIMD\";\n       break;\n+    case ST_OMP_END_TEAMS_LOOP:\n+      p = \"!$OMP END TEAMS LOP\";\n+      break;\n     case ST_OMP_END_WORKSHARE:\n       p = \"!$OMP END WORKSHARE\";\n       break;\n     case ST_OMP_FLUSH:\n       p = \"!$OMP FLUSH\";\n       break;\n+    case ST_OMP_LOOP:\n+      p = \"!$OMP LOOP\";\n+      break;\n     case ST_OMP_MASTER:\n       p = \"!$OMP MASTER\";\n       break;\n@@ -2486,6 +2518,9 @@ gfc_ascii_statement (gfc_statement st)\n     case ST_OMP_PARALLEL_DO:\n       p = \"!$OMP PARALLEL DO\";\n       break;\n+    case ST_OMP_PARALLEL_LOOP:\n+      p = \"!$OMP PARALLEL LOOP\";\n+      break;\n     case ST_OMP_PARALLEL_DO_SIMD:\n       p = \"!$OMP PARALLEL DO SIMD\";\n       break;\n@@ -2543,6 +2578,9 @@ gfc_ascii_statement (gfc_statement st)\n     case ST_OMP_TARGET_PARALLEL_DO_SIMD:\n       p = \"!$OMP TARGET PARALLEL DO SIMD\";\n       break;\n+    case ST_OMP_TARGET_PARALLEL_LOOP:\n+      p = \"!$OMP TARGET PARALLEL LOOP\";\n+      break;\n     case ST_OMP_TARGET_SIMD:\n       p = \"!$OMP TARGET SIMD\";\n       break;\n@@ -2561,6 +2599,9 @@ gfc_ascii_statement (gfc_statement st)\n     case ST_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD:\n       p = \"!$OMP TARGET TEAMS DISTRIBUTE SIMD\";\n       break;\n+    case ST_OMP_TARGET_TEAMS_LOOP:\n+      p = \"!$OMP TARGET TEAMS LOOP\";\n+      break;\n     case ST_OMP_TARGET_UPDATE:\n       p = \"!$OMP TARGET UPDATE\";\n       break;\n@@ -2597,6 +2638,9 @@ gfc_ascii_statement (gfc_statement st)\n     case ST_OMP_TEAMS_DISTRIBUTE_SIMD:\n       p = \"!$OMP TEAMS DISTRIBUTE SIMD\";\n       break;\n+    case ST_OMP_TEAMS_LOOP:\n+      p = \"!$OMP TEAMS LOOP\";\n+      break;\n     case ST_OMP_THREADPRIVATE:\n       p = \"!$OMP THREADPRIVATE\";\n       break;\n@@ -5044,17 +5088,24 @@ parse_omp_do (gfc_statement omp_st)\n       break;\n     case ST_OMP_DO: omp_end_st = ST_OMP_END_DO; break;\n     case ST_OMP_DO_SIMD: omp_end_st = ST_OMP_END_DO_SIMD; break;\n+    case ST_OMP_LOOP: omp_end_st = ST_OMP_END_LOOP; break;\n     case ST_OMP_PARALLEL_DO: omp_end_st = ST_OMP_END_PARALLEL_DO; break;\n     case ST_OMP_PARALLEL_DO_SIMD:\n       omp_end_st = ST_OMP_END_PARALLEL_DO_SIMD;\n       break;\n+    case ST_OMP_PARALLEL_LOOP:\n+      omp_end_st = ST_OMP_END_PARALLEL_LOOP;\n+      break;\n     case ST_OMP_SIMD: omp_end_st = ST_OMP_END_SIMD; break;\n     case ST_OMP_TARGET_PARALLEL_DO:\n       omp_end_st = ST_OMP_END_TARGET_PARALLEL_DO;\n       break;\n     case ST_OMP_TARGET_PARALLEL_DO_SIMD:\n       omp_end_st = ST_OMP_END_TARGET_PARALLEL_DO_SIMD;\n       break;\n+    case ST_OMP_TARGET_PARALLEL_LOOP:\n+      omp_end_st = ST_OMP_END_TARGET_PARALLEL_LOOP;\n+      break;\n     case ST_OMP_TARGET_SIMD: omp_end_st = ST_OMP_END_TARGET_SIMD; break;\n     case ST_OMP_TARGET_TEAMS_DISTRIBUTE:\n       omp_end_st = ST_OMP_END_TARGET_TEAMS_DISTRIBUTE;\n@@ -5068,6 +5119,9 @@ parse_omp_do (gfc_statement omp_st)\n     case ST_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD:\n       omp_end_st = ST_OMP_END_TARGET_TEAMS_DISTRIBUTE_SIMD;\n       break;\n+    case ST_OMP_TARGET_TEAMS_LOOP:\n+      omp_end_st = ST_OMP_END_TARGET_TEAMS_LOOP;\n+      break;\n     case ST_OMP_TASKLOOP: omp_end_st = ST_OMP_END_TASKLOOP; break;\n     case ST_OMP_TASKLOOP_SIMD: omp_end_st = ST_OMP_END_TASKLOOP_SIMD; break;\n     case ST_OMP_MASTER_TASKLOOP: omp_end_st = ST_OMP_END_MASTER_TASKLOOP; break;\n@@ -5092,6 +5146,9 @@ parse_omp_do (gfc_statement omp_st)\n     case ST_OMP_TEAMS_DISTRIBUTE_SIMD:\n       omp_end_st = ST_OMP_END_TEAMS_DISTRIBUTE_SIMD;\n       break;\n+    case ST_OMP_TEAMS_LOOP:\n+      omp_end_st = ST_OMP_END_TEAMS_LOOP;\n+      break;\n     default: gcc_unreachable ();\n     }\n   if (st == omp_end_st)\n@@ -5323,12 +5380,6 @@ parse_omp_structured_block (gfc_statement omp_st, bool workshare_stmts_only)\n     case ST_OMP_PARALLEL_MASTER:\n       omp_end_st = ST_OMP_END_PARALLEL_MASTER;\n       break;\n-    case ST_OMP_PARALLEL_MASTER_TASKLOOP:\n-      omp_end_st = ST_OMP_END_PARALLEL_MASTER_TASKLOOP;\n-      break;\n-    case ST_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n-      omp_end_st = ST_OMP_END_PARALLEL_MASTER_TASKLOOP_SIMD;\n-      break;\n     case ST_OMP_PARALLEL_SECTIONS:\n       omp_end_st = ST_OMP_END_PARALLEL_SECTIONS;\n       break;\n@@ -5344,12 +5395,6 @@ parse_omp_structured_block (gfc_statement omp_st, bool workshare_stmts_only)\n     case ST_OMP_MASTER:\n       omp_end_st = ST_OMP_END_MASTER;\n       break;\n-    case ST_OMP_MASTER_TASKLOOP:\n-      omp_end_st = ST_OMP_END_MASTER_TASKLOOP;\n-      break;\n-    case ST_OMP_MASTER_TASKLOOP_SIMD:\n-      omp_end_st = ST_OMP_END_MASTER_TASKLOOP_SIMD;\n-      break;\n     case ST_OMP_SINGLE:\n       omp_end_st = ST_OMP_END_SINGLE;\n       break;\n@@ -5365,18 +5410,6 @@ parse_omp_structured_block (gfc_statement omp_st, bool workshare_stmts_only)\n     case ST_OMP_TARGET_TEAMS:\n       omp_end_st = ST_OMP_END_TARGET_TEAMS;\n       break;\n-    case ST_OMP_TARGET_TEAMS_DISTRIBUTE:\n-      omp_end_st = ST_OMP_END_TARGET_TEAMS_DISTRIBUTE;\n-      break;\n-    case ST_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO:\n-      omp_end_st = ST_OMP_END_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO;\n-      break;\n-    case ST_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:\n-      omp_end_st = ST_OMP_END_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD;\n-      break;\n-    case ST_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD:\n-      omp_end_st = ST_OMP_END_TARGET_TEAMS_DISTRIBUTE_SIMD;\n-      break;\n     case ST_OMP_TASK:\n       omp_end_st = ST_OMP_END_TASK;\n       break;\n@@ -5389,27 +5422,9 @@ parse_omp_structured_block (gfc_statement omp_st, bool workshare_stmts_only)\n     case ST_OMP_TEAMS_DISTRIBUTE:\n       omp_end_st = ST_OMP_END_TEAMS_DISTRIBUTE;\n       break;\n-    case ST_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO:\n-      omp_end_st = ST_OMP_END_TEAMS_DISTRIBUTE_PARALLEL_DO;\n-      break;\n-    case ST_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:\n-      omp_end_st = ST_OMP_END_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD;\n-      break;\n-    case ST_OMP_TEAMS_DISTRIBUTE_SIMD:\n-      omp_end_st = ST_OMP_END_TEAMS_DISTRIBUTE_SIMD;\n-      break;\n     case ST_OMP_DISTRIBUTE:\n       omp_end_st = ST_OMP_END_DISTRIBUTE;\n       break;\n-    case ST_OMP_DISTRIBUTE_PARALLEL_DO:\n-      omp_end_st = ST_OMP_END_DISTRIBUTE_PARALLEL_DO;\n-      break;\n-    case ST_OMP_DISTRIBUTE_PARALLEL_DO_SIMD:\n-      omp_end_st = ST_OMP_END_DISTRIBUTE_PARALLEL_DO_SIMD;\n-      break;\n-    case ST_OMP_DISTRIBUTE_SIMD:\n-      omp_end_st = ST_OMP_END_DISTRIBUTE_SIMD;\n-      break;\n     case ST_OMP_WORKSHARE:\n       omp_end_st = ST_OMP_END_WORKSHARE;\n       break;\n@@ -5689,26 +5704,31 @@ parse_executable (gfc_statement st)\n \tcase ST_OMP_DISTRIBUTE_SIMD:\n \tcase ST_OMP_DO:\n \tcase ST_OMP_DO_SIMD:\n+\tcase ST_OMP_LOOP:\n \tcase ST_OMP_PARALLEL_DO:\n \tcase ST_OMP_PARALLEL_DO_SIMD:\n+\tcase ST_OMP_PARALLEL_LOOP:\n \tcase ST_OMP_PARALLEL_MASTER_TASKLOOP:\n \tcase ST_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n \tcase ST_OMP_MASTER_TASKLOOP:\n \tcase ST_OMP_MASTER_TASKLOOP_SIMD:\n \tcase ST_OMP_SIMD:\n \tcase ST_OMP_TARGET_PARALLEL_DO:\n \tcase ST_OMP_TARGET_PARALLEL_DO_SIMD:\n+\tcase ST_OMP_TARGET_PARALLEL_LOOP:\n \tcase ST_OMP_TARGET_SIMD:\n \tcase ST_OMP_TARGET_TEAMS_DISTRIBUTE:\n \tcase ST_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO:\n \tcase ST_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:\n \tcase ST_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD:\n+\tcase ST_OMP_TARGET_TEAMS_LOOP:\n \tcase ST_OMP_TASKLOOP:\n \tcase ST_OMP_TASKLOOP_SIMD:\n \tcase ST_OMP_TEAMS_DISTRIBUTE:\n \tcase ST_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO:\n \tcase ST_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:\n \tcase ST_OMP_TEAMS_DISTRIBUTE_SIMD:\n+\tcase ST_OMP_TEAMS_LOOP:\n \t  st = parse_omp_do (st);\n \t  if (st == ST_IMPLIED_ENDDO)\n \t    return st;"}, {"sha": "a37ad66564575d6c83ff771e5fc7f73d0d3b2b7c", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=178191e1dfafd8db149edcdef7a39e9e2c00f216", "patch": "@@ -10797,13 +10797,15 @@ gfc_resolve_blocks (gfc_code *b, gfc_namespace *ns)\n \tcase EXEC_OMP_DISTRIBUTE_SIMD:\n \tcase EXEC_OMP_DO:\n \tcase EXEC_OMP_DO_SIMD:\n+\tcase EXEC_OMP_LOOP:\n \tcase EXEC_OMP_MASTER:\n \tcase EXEC_OMP_MASTER_TASKLOOP:\n \tcase EXEC_OMP_MASTER_TASKLOOP_SIMD:\n \tcase EXEC_OMP_ORDERED:\n \tcase EXEC_OMP_PARALLEL:\n \tcase EXEC_OMP_PARALLEL_DO:\n \tcase EXEC_OMP_PARALLEL_DO_SIMD:\n+\tcase EXEC_OMP_PARALLEL_LOOP:\n \tcase EXEC_OMP_PARALLEL_MASTER:\n \tcase EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n \tcase EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n@@ -10819,12 +10821,14 @@ gfc_resolve_blocks (gfc_code *b, gfc_namespace *ns)\n \tcase EXEC_OMP_TARGET_PARALLEL:\n \tcase EXEC_OMP_TARGET_PARALLEL_DO:\n \tcase EXEC_OMP_TARGET_PARALLEL_DO_SIMD:\n+\tcase EXEC_OMP_TARGET_PARALLEL_LOOP:\n \tcase EXEC_OMP_TARGET_SIMD:\n \tcase EXEC_OMP_TARGET_TEAMS:\n \tcase EXEC_OMP_TARGET_TEAMS_DISTRIBUTE:\n \tcase EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO:\n \tcase EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:\n \tcase EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD:\n+\tcase EXEC_OMP_TARGET_TEAMS_LOOP:\n \tcase EXEC_OMP_TARGET_UPDATE:\n \tcase EXEC_OMP_TASK:\n \tcase EXEC_OMP_TASKGROUP:\n@@ -10836,6 +10840,7 @@ gfc_resolve_blocks (gfc_code *b, gfc_namespace *ns)\n \tcase EXEC_OMP_TEAMS_DISTRIBUTE:\n \tcase EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO:\n \tcase EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:\n+\tcase EXEC_OMP_TEAMS_LOOP:\n \tcase EXEC_OMP_TEAMS_DISTRIBUTE_SIMD:\n \tcase EXEC_OMP_WORKSHARE:\n \t  break;\n@@ -12219,6 +12224,7 @@ gfc_resolve_code (gfc_code *code, gfc_namespace *ns)\n \tcase EXEC_OMP_DISTRIBUTE_SIMD:\n \tcase EXEC_OMP_DO:\n \tcase EXEC_OMP_DO_SIMD:\n+\tcase EXEC_OMP_LOOP:\n \tcase EXEC_OMP_MASTER:\n \tcase EXEC_OMP_MASTER_TASKLOOP:\n \tcase EXEC_OMP_MASTER_TASKLOOP_SIMD:\n@@ -12234,12 +12240,14 @@ gfc_resolve_code (gfc_code *code, gfc_namespace *ns)\n \tcase EXEC_OMP_TARGET_PARALLEL:\n \tcase EXEC_OMP_TARGET_PARALLEL_DO:\n \tcase EXEC_OMP_TARGET_PARALLEL_DO_SIMD:\n+\tcase EXEC_OMP_TARGET_PARALLEL_LOOP:\n \tcase EXEC_OMP_TARGET_SIMD:\n \tcase EXEC_OMP_TARGET_TEAMS:\n \tcase EXEC_OMP_TARGET_TEAMS_DISTRIBUTE:\n \tcase EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO:\n \tcase EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:\n \tcase EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD:\n+\tcase EXEC_OMP_TARGET_TEAMS_LOOP:\n \tcase EXEC_OMP_TARGET_UPDATE:\n \tcase EXEC_OMP_TASK:\n \tcase EXEC_OMP_TASKGROUP:\n@@ -12252,13 +12260,15 @@ gfc_resolve_code (gfc_code *code, gfc_namespace *ns)\n \tcase EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO:\n \tcase EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:\n \tcase EXEC_OMP_TEAMS_DISTRIBUTE_SIMD:\n+\tcase EXEC_OMP_TEAMS_LOOP:\n \tcase EXEC_OMP_WORKSHARE:\n \t  gfc_resolve_omp_directive (code, ns);\n \t  break;\n \n \tcase EXEC_OMP_PARALLEL:\n \tcase EXEC_OMP_PARALLEL_DO:\n \tcase EXEC_OMP_PARALLEL_DO_SIMD:\n+\tcase EXEC_OMP_PARALLEL_LOOP:\n \tcase EXEC_OMP_PARALLEL_MASTER:\n \tcase EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n \tcase EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:"}, {"sha": "6ae1df612a7efc35632f319e4cf29c662d146c2e", "filename": "gcc/fortran/st.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ffortran%2Fst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ffortran%2Fst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fst.c?ref=178191e1dfafd8db149edcdef7a39e9e2c00f216", "patch": "@@ -225,13 +225,15 @@ gfc_free_statement (gfc_code *p)\n     case EXEC_OMP_DISTRIBUTE_SIMD:\n     case EXEC_OMP_DO:\n     case EXEC_OMP_DO_SIMD:\n+    case EXEC_OMP_LOOP:\n     case EXEC_OMP_END_SINGLE:\n     case EXEC_OMP_MASTER_TASKLOOP:\n     case EXEC_OMP_MASTER_TASKLOOP_SIMD:\n     case EXEC_OMP_ORDERED:\n     case EXEC_OMP_PARALLEL:\n     case EXEC_OMP_PARALLEL_DO:\n     case EXEC_OMP_PARALLEL_DO_SIMD:\n+    case EXEC_OMP_PARALLEL_LOOP:\n     case EXEC_OMP_PARALLEL_MASTER:\n     case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n     case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n@@ -248,12 +250,14 @@ gfc_free_statement (gfc_code *p)\n     case EXEC_OMP_TARGET_PARALLEL:\n     case EXEC_OMP_TARGET_PARALLEL_DO:\n     case EXEC_OMP_TARGET_PARALLEL_DO_SIMD:\n+    case EXEC_OMP_TARGET_PARALLEL_LOOP:\n     case EXEC_OMP_TARGET_SIMD:\n     case EXEC_OMP_TARGET_TEAMS:\n     case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE:\n     case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO:\n     case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:\n     case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD:\n+    case EXEC_OMP_TARGET_TEAMS_LOOP:\n     case EXEC_OMP_TARGET_UPDATE:\n     case EXEC_OMP_TASK:\n     case EXEC_OMP_TASKLOOP:\n@@ -263,6 +267,7 @@ gfc_free_statement (gfc_code *p)\n     case EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO:\n     case EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:\n     case EXEC_OMP_TEAMS_DISTRIBUTE_SIMD:\n+    case EXEC_OMP_TEAMS_LOOP:\n     case EXEC_OMP_WORKSHARE:\n       gfc_free_omp_clauses (p->ext.omp_clauses);\n       break;"}, {"sha": "1e22cdb82b72977b4c05fb2bda4aa74c9c89f4de", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 99, "deletions": 18, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=178191e1dfafd8db149edcdef7a39e9e2c00f216", "patch": "@@ -4195,6 +4195,25 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t  OMP_CLAUSE_GANG_STATIC_EXPR (c) = arg;\n \t}\n     }\n+  if (clauses->bind != OMP_BIND_UNSET)\n+    {\n+      c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_BIND);\n+      omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n+      switch (clauses->bind)\n+\t{\n+\tcase OMP_BIND_TEAMS:\n+\t  OMP_CLAUSE_BIND_KIND (c) = OMP_CLAUSE_BIND_TEAMS;\n+\t  break;\n+\tcase OMP_BIND_PARALLEL:\n+\t  OMP_CLAUSE_BIND_KIND (c) = OMP_CLAUSE_BIND_PARALLEL;\n+\t  break;\n+\tcase OMP_BIND_THREAD:\n+\t  OMP_CLAUSE_BIND_KIND (c) = OMP_CLAUSE_BIND_THREAD;\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+    }\n \n   return nreverse (omp_clauses);\n }\n@@ -5083,6 +5102,7 @@ gfc_trans_omp_do (gfc_code *code, gfc_exec_op op, stmtblock_t *pblock,\n     case EXEC_OMP_SIMD: stmt = make_node (OMP_SIMD); break;\n     case EXEC_OMP_DO: stmt = make_node (OMP_FOR); break;\n     case EXEC_OMP_DISTRIBUTE: stmt = make_node (OMP_DISTRIBUTE); break;\n+    case EXEC_OMP_LOOP: stmt = make_node (OMP_LOOP); break;\n     case EXEC_OMP_TASKLOOP: stmt = make_node (OMP_TASKLOOP); break;\n     case EXEC_OACC_LOOP: stmt = make_node (OACC_LOOP); break;\n     default: gcc_unreachable ();\n@@ -5343,6 +5363,7 @@ gfc_split_omp_clauses (gfc_code *code,\n \t\t       gfc_omp_clauses clausesa[GFC_OMP_SPLIT_NUM])\n {\n   int mask = 0, innermost = 0;\n+  bool is_loop = false;\n   memset (clausesa, 0, GFC_OMP_SPLIT_NUM * sizeof (gfc_omp_clauses));\n   switch (code->op)\n     {\n@@ -5363,6 +5384,7 @@ gfc_split_omp_clauses (gfc_code *code,\n       innermost = GFC_OMP_SPLIT_SIMD;\n       break;\n     case EXEC_OMP_DO:\n+    case EXEC_OMP_LOOP:\n       innermost = GFC_OMP_SPLIT_DO;\n       break;\n     case EXEC_OMP_DO_SIMD:\n@@ -5373,6 +5395,7 @@ gfc_split_omp_clauses (gfc_code *code,\n       innermost = GFC_OMP_SPLIT_PARALLEL;\n       break;\n     case EXEC_OMP_PARALLEL_DO:\n+    case EXEC_OMP_PARALLEL_LOOP:\n       mask = GFC_OMP_MASK_PARALLEL | GFC_OMP_MASK_DO;\n       innermost = GFC_OMP_SPLIT_DO;\n       break;\n@@ -5399,6 +5422,7 @@ gfc_split_omp_clauses (gfc_code *code,\n       innermost = GFC_OMP_SPLIT_PARALLEL;\n       break;\n     case EXEC_OMP_TARGET_PARALLEL_DO:\n+    case EXEC_OMP_TARGET_PARALLEL_LOOP:\n       mask = GFC_OMP_MASK_TARGET | GFC_OMP_MASK_PARALLEL | GFC_OMP_MASK_DO;\n       innermost = GFC_OMP_SPLIT_DO;\n       break;\n@@ -5435,6 +5459,10 @@ gfc_split_omp_clauses (gfc_code *code,\n \t     | GFC_OMP_MASK_DISTRIBUTE | GFC_OMP_MASK_SIMD;\n       innermost = GFC_OMP_SPLIT_SIMD;\n       break;\n+    case EXEC_OMP_TARGET_TEAMS_LOOP:\n+      mask = GFC_OMP_MASK_TARGET | GFC_OMP_MASK_TEAMS | GFC_OMP_MASK_DO;\n+      innermost = GFC_OMP_SPLIT_DO;\n+      break;\n     case EXEC_OMP_MASTER_TASKLOOP:\n     case EXEC_OMP_TASKLOOP:\n       innermost = GFC_OMP_SPLIT_TASKLOOP;\n@@ -5465,6 +5493,10 @@ gfc_split_omp_clauses (gfc_code *code,\n       mask = GFC_OMP_MASK_TEAMS | GFC_OMP_MASK_DISTRIBUTE | GFC_OMP_MASK_SIMD;\n       innermost = GFC_OMP_SPLIT_SIMD;\n       break;\n+    case EXEC_OMP_TEAMS_LOOP:\n+      mask = GFC_OMP_MASK_TEAMS | GFC_OMP_MASK_DO;\n+      innermost = GFC_OMP_SPLIT_DO;\n+      break;\n     default:\n       gcc_unreachable ();\n     }\n@@ -5473,6 +5505,18 @@ gfc_split_omp_clauses (gfc_code *code,\n       clausesa[innermost] = *code->ext.omp_clauses;\n       return;\n     }\n+  /* Loops are similar to DO but still a bit different.  */\n+  switch (code->op)\n+    {\n+    case EXEC_OMP_LOOP:\n+    case EXEC_OMP_PARALLEL_LOOP:\n+    case EXEC_OMP_TEAMS_LOOP:\n+    case EXEC_OMP_TARGET_PARALLEL_LOOP:\n+    case EXEC_OMP_TARGET_TEAMS_LOOP:\n+      is_loop = true;\n+    default:\n+      break;\n+    }\n   if (code->ext.omp_clauses != NULL)\n     {\n       if (mask & GFC_OMP_MASK_TARGET)\n@@ -5540,7 +5584,7 @@ gfc_split_omp_clauses (gfc_code *code,\n \t  clausesa[GFC_OMP_SPLIT_PARALLEL].if_expr\n \t    = code->ext.omp_clauses->if_expr;\n \t}\n-      if (mask & GFC_OMP_MASK_DO)\n+      if ((mask & GFC_OMP_MASK_DO) && !is_loop)\n \t{\n \t  /* First the clauses that are unique to some constructs.  */\n \t  clausesa[GFC_OMP_SPLIT_DO].ordered\n@@ -5560,6 +5604,11 @@ gfc_split_omp_clauses (gfc_code *code,\n \t    = code->ext.omp_clauses->chunk_size;\n \t  clausesa[GFC_OMP_SPLIT_DO].nowait\n \t    = code->ext.omp_clauses->nowait;\n+\t}\n+      if (mask & GFC_OMP_MASK_DO)\n+\t{\n+\t  clausesa[GFC_OMP_SPLIT_DO].bind\n+\t    = code->ext.omp_clauses->bind;\n \t  /* Duplicate collapse.  */\n \t  clausesa[GFC_OMP_SPLIT_DO].collapse\n \t    = code->ext.omp_clauses->collapse;\n@@ -5621,7 +5670,7 @@ gfc_split_omp_clauses (gfc_code *code,\n \t it is enough to put it on the innermost one.  For\n \t !$ omp parallel do put it on parallel though,\n \t as that's what we did for OpenMP 3.1.  */\n-      clausesa[innermost == GFC_OMP_SPLIT_DO\n+      clausesa[innermost == GFC_OMP_SPLIT_DO && !is_loop\n \t       ? (int) GFC_OMP_SPLIT_PARALLEL\n \t       : innermost].lists[OMP_LIST_PRIVATE]\n \t= code->ext.omp_clauses->lists[OMP_LIST_PRIVATE];\n@@ -5637,19 +5686,25 @@ gfc_split_omp_clauses (gfc_code *code,\n       else if (mask & GFC_OMP_MASK_DISTRIBUTE)\n \tclausesa[GFC_OMP_SPLIT_DISTRIBUTE].lists[OMP_LIST_FIRSTPRIVATE]\n \t  = code->ext.omp_clauses->lists[OMP_LIST_FIRSTPRIVATE];\n+      if (mask & GFC_OMP_MASK_TASKLOOP)\n+\tclausesa[GFC_OMP_SPLIT_TASKLOOP].lists[OMP_LIST_FIRSTPRIVATE]\n+\t  = code->ext.omp_clauses->lists[OMP_LIST_FIRSTPRIVATE];\n       if (mask & GFC_OMP_MASK_PARALLEL)\n \tclausesa[GFC_OMP_SPLIT_PARALLEL].lists[OMP_LIST_FIRSTPRIVATE]\n \t  = code->ext.omp_clauses->lists[OMP_LIST_FIRSTPRIVATE];\n-      else if (mask & GFC_OMP_MASK_DO)\n+      else if ((mask & GFC_OMP_MASK_DO) && !is_loop)\n \tclausesa[GFC_OMP_SPLIT_DO].lists[OMP_LIST_FIRSTPRIVATE]\n \t  = code->ext.omp_clauses->lists[OMP_LIST_FIRSTPRIVATE];\n-      /* Lastprivate is allowed on distribute, do and simd.\n+      /* Lastprivate is allowed on distribute, do, simd, taskloop and loop.\n          In parallel do{, simd} we actually want to put it on\n \t parallel rather than do.  */\n       if (mask & GFC_OMP_MASK_DISTRIBUTE)\n \tclausesa[GFC_OMP_SPLIT_DISTRIBUTE].lists[OMP_LIST_LASTPRIVATE]\n \t  = code->ext.omp_clauses->lists[OMP_LIST_LASTPRIVATE];\n-      if (mask & GFC_OMP_MASK_PARALLEL)\n+      if (mask & GFC_OMP_MASK_TASKLOOP)\n+\tclausesa[GFC_OMP_SPLIT_TASKLOOP].lists[OMP_LIST_LASTPRIVATE]\n+\t  = code->ext.omp_clauses->lists[OMP_LIST_LASTPRIVATE];\n+      if ((mask & GFC_OMP_MASK_PARALLEL) && !is_loop)\n \tclausesa[GFC_OMP_SPLIT_PARALLEL].lists[OMP_LIST_LASTPRIVATE]\n \t  = code->ext.omp_clauses->lists[OMP_LIST_LASTPRIVATE];\n       else if (mask & GFC_OMP_MASK_DO)\n@@ -5658,17 +5713,25 @@ gfc_split_omp_clauses (gfc_code *code,\n       if (mask & GFC_OMP_MASK_SIMD)\n \tclausesa[GFC_OMP_SPLIT_SIMD].lists[OMP_LIST_LASTPRIVATE]\n \t  = code->ext.omp_clauses->lists[OMP_LIST_LASTPRIVATE];\n-      /* Reduction is allowed on simd, do, parallel and teams.\n-\t Duplicate it on all of them, but omit on do if\n-\t parallel is present; additionally, inscan applies to do/simd only.  */\n+      /* Reduction is allowed on simd, do, parallel, teams, taskloop, and loop.\n+\t Duplicate it on all of them, but\n+\t - omit on do if parallel is present;\n+\t - omit on task and parallel if loop is present;\n+\t additionally, inscan applies to do/simd only.  */\n       for (int i = OMP_LIST_REDUCTION; i <= OMP_LIST_REDUCTION_TASK; i++)\n \t{\n-\t  if (mask & GFC_OMP_MASK_TEAMS\n+\t  if (mask & GFC_OMP_MASK_TASKLOOP\n \t      && i != OMP_LIST_REDUCTION_INSCAN)\n+\t    clausesa[GFC_OMP_SPLIT_TASKLOOP].lists[i]\n+\t      = code->ext.omp_clauses->lists[i];\n+\t  if (mask & GFC_OMP_MASK_TEAMS\n+\t      && i != OMP_LIST_REDUCTION_INSCAN\n+\t      && !is_loop)\n \t    clausesa[GFC_OMP_SPLIT_TEAMS].lists[i]\n \t      = code->ext.omp_clauses->lists[i];\n \t  if (mask & GFC_OMP_MASK_PARALLEL\n-\t      && i != OMP_LIST_REDUCTION_INSCAN)\n+\t      && i != OMP_LIST_REDUCTION_INSCAN\n+\t      && !is_loop)\n \t    clausesa[GFC_OMP_SPLIT_PARALLEL].lists[i]\n \t      = code->ext.omp_clauses->lists[i];\n \t  else if (mask & GFC_OMP_MASK_DO)\n@@ -5689,8 +5752,9 @@ gfc_split_omp_clauses (gfc_code *code,\n       clausesa[innermost].lists[OMP_LIST_LINEAR]\n \t= code->ext.omp_clauses->lists[OMP_LIST_LINEAR];\n     }\n-  if ((mask & (GFC_OMP_MASK_PARALLEL | GFC_OMP_MASK_DO))\n-      == (GFC_OMP_MASK_PARALLEL | GFC_OMP_MASK_DO))\n+   if (((mask & (GFC_OMP_MASK_PARALLEL | GFC_OMP_MASK_DO))\n+\t== (GFC_OMP_MASK_PARALLEL | GFC_OMP_MASK_DO))\n+       && !is_loop)\n     clausesa[GFC_OMP_SPLIT_DO].nowait = true;\n }\n \n@@ -5740,7 +5804,7 @@ gfc_trans_omp_do_simd (gfc_code *code, stmtblock_t *pblock,\n }\n \n static tree\n-gfc_trans_omp_parallel_do (gfc_code *code, stmtblock_t *pblock,\n+gfc_trans_omp_parallel_do (gfc_code *code, bool is_loop, stmtblock_t *pblock,\n \t\t\t   gfc_omp_clauses *clausesa)\n {\n   stmtblock_t block, *new_pblock = pblock;\n@@ -5768,8 +5832,9 @@ gfc_trans_omp_parallel_do (gfc_code *code, stmtblock_t *pblock,\n       else\n \tpushlevel ();\n     }\n-  stmt = gfc_trans_omp_do (code, EXEC_OMP_DO, new_pblock,\n-\t\t\t   &clausesa[GFC_OMP_SPLIT_DO], omp_clauses);\n+  stmt = gfc_trans_omp_do (code, is_loop ? EXEC_OMP_LOOP : EXEC_OMP_DO,\n+\t\t\t   new_pblock, &clausesa[GFC_OMP_SPLIT_DO],\n+\t\t\t   omp_clauses);\n   if (pblock == NULL)\n     {\n       if (TREE_CODE (stmt) != BIND_EXPR)\n@@ -6006,7 +6071,7 @@ gfc_trans_omp_distribute (gfc_code *code, gfc_omp_clauses *clausesa)\n     case EXEC_OMP_DISTRIBUTE_PARALLEL_DO:\n     case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO:\n     case EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO:\n-      stmt = gfc_trans_omp_parallel_do (code, &block, clausesa);\n+      stmt = gfc_trans_omp_parallel_do (code, false, &block, clausesa);\n       if (TREE_CODE (stmt) != BIND_EXPR)\n \tstmt = build3_v (BIND_EXPR, NULL, stmt, poplevel (1, 0));\n       else\n@@ -6083,6 +6148,12 @@ gfc_trans_omp_teams (gfc_code *code, gfc_omp_clauses *clausesa,\n \t\t\t       &clausesa[GFC_OMP_SPLIT_DISTRIBUTE],\n \t\t\t       NULL);\n       break;\n+    case EXEC_OMP_TARGET_TEAMS_LOOP:\n+    case EXEC_OMP_TEAMS_LOOP:\n+      stmt = gfc_trans_omp_do (code, EXEC_OMP_LOOP, NULL,\n+\t\t\t       &clausesa[GFC_OMP_SPLIT_DO],\n+\t\t\t       NULL);\n+      break;\n     default:\n       stmt = gfc_trans_omp_distribute (code, clausesa);\n       break;\n@@ -6140,7 +6211,11 @@ gfc_trans_omp_target (gfc_code *code)\n       }\n       break;\n     case EXEC_OMP_TARGET_PARALLEL_DO:\n-      stmt = gfc_trans_omp_parallel_do (code, &block, clausesa);\n+    case EXEC_OMP_TARGET_PARALLEL_LOOP:\n+      stmt = gfc_trans_omp_parallel_do (code,\n+\t\t\t\t\t(code->op\n+\t\t\t\t\t == EXEC_OMP_TARGET_PARALLEL_LOOP),\n+\t\t\t\t\t&block, clausesa);\n       if (TREE_CODE (stmt) != BIND_EXPR)\n \tstmt = build3_v (BIND_EXPR, NULL, stmt, poplevel (1, 0));\n       else\n@@ -6611,6 +6686,7 @@ gfc_trans_omp_directive (gfc_code *code)\n       return gfc_trans_omp_depobj (code);\n     case EXEC_OMP_DISTRIBUTE:\n     case EXEC_OMP_DO:\n+    case EXEC_OMP_LOOP:\n     case EXEC_OMP_SIMD:\n     case EXEC_OMP_TASKLOOP:\n       return gfc_trans_omp_do (code, code->op, NULL, code->ext.omp_clauses,\n@@ -6633,7 +6709,9 @@ gfc_trans_omp_directive (gfc_code *code)\n     case EXEC_OMP_PARALLEL:\n       return gfc_trans_omp_parallel (code);\n     case EXEC_OMP_PARALLEL_DO:\n-      return gfc_trans_omp_parallel_do (code, NULL, NULL);\n+      return gfc_trans_omp_parallel_do (code, false, NULL, NULL);\n+    case EXEC_OMP_PARALLEL_LOOP:\n+      return gfc_trans_omp_parallel_do (code, true, NULL, NULL);\n     case EXEC_OMP_PARALLEL_DO_SIMD:\n       return gfc_trans_omp_parallel_do_simd (code, NULL, NULL);\n     case EXEC_OMP_PARALLEL_MASTER:\n@@ -6652,12 +6730,14 @@ gfc_trans_omp_directive (gfc_code *code)\n     case EXEC_OMP_TARGET_PARALLEL:\n     case EXEC_OMP_TARGET_PARALLEL_DO:\n     case EXEC_OMP_TARGET_PARALLEL_DO_SIMD:\n+    case EXEC_OMP_TARGET_PARALLEL_LOOP:\n     case EXEC_OMP_TARGET_SIMD:\n     case EXEC_OMP_TARGET_TEAMS:\n     case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE:\n     case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO:\n     case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:\n     case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD:\n+    case EXEC_OMP_TARGET_TEAMS_LOOP:\n       return gfc_trans_omp_target (code);\n     case EXEC_OMP_TARGET_DATA:\n       return gfc_trans_omp_target_data (code);\n@@ -6682,6 +6762,7 @@ gfc_trans_omp_directive (gfc_code *code)\n     case EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO:\n     case EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:\n     case EXEC_OMP_TEAMS_DISTRIBUTE_SIMD:\n+    case EXEC_OMP_TEAMS_LOOP:\n       return gfc_trans_omp_teams (code, NULL, NULL_TREE);\n     case EXEC_OMP_WORKSHARE:\n       return gfc_trans_omp_workshare (code, code->ext.omp_clauses);"}, {"sha": "3ffa394d406735ca59d966dfd856c8b55bf9f060", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=178191e1dfafd8db149edcdef7a39e9e2c00f216", "patch": "@@ -2168,6 +2168,7 @@ trans_code (gfc_code * code, tree cond)\n \tcase EXEC_OMP_DISTRIBUTE_SIMD:\n \tcase EXEC_OMP_DO:\n \tcase EXEC_OMP_DO_SIMD:\n+\tcase EXEC_OMP_LOOP:\n \tcase EXEC_OMP_FLUSH:\n \tcase EXEC_OMP_MASTER:\n \tcase EXEC_OMP_MASTER_TASKLOOP:\n@@ -2176,6 +2177,7 @@ trans_code (gfc_code * code, tree cond)\n \tcase EXEC_OMP_PARALLEL:\n \tcase EXEC_OMP_PARALLEL_DO:\n \tcase EXEC_OMP_PARALLEL_DO_SIMD:\n+\tcase EXEC_OMP_PARALLEL_LOOP:\n \tcase EXEC_OMP_PARALLEL_MASTER:\n \tcase EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n \tcase EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n@@ -2191,12 +2193,14 @@ trans_code (gfc_code * code, tree cond)\n \tcase EXEC_OMP_TARGET_PARALLEL:\n \tcase EXEC_OMP_TARGET_PARALLEL_DO:\n \tcase EXEC_OMP_TARGET_PARALLEL_DO_SIMD:\n+\tcase EXEC_OMP_TARGET_PARALLEL_LOOP:\n \tcase EXEC_OMP_TARGET_SIMD:\n \tcase EXEC_OMP_TARGET_TEAMS:\n \tcase EXEC_OMP_TARGET_TEAMS_DISTRIBUTE:\n \tcase EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO:\n \tcase EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:\n \tcase EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD:\n+\tcase EXEC_OMP_TARGET_TEAMS_LOOP:\n \tcase EXEC_OMP_TARGET_UPDATE:\n \tcase EXEC_OMP_TASK:\n \tcase EXEC_OMP_TASKGROUP:\n@@ -2209,6 +2213,7 @@ trans_code (gfc_code * code, tree cond)\n \tcase EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO:\n \tcase EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:\n \tcase EXEC_OMP_TEAMS_DISTRIBUTE_SIMD:\n+\tcase EXEC_OMP_TEAMS_LOOP:\n \tcase EXEC_OMP_WORKSHARE:\n \t  res = gfc_trans_omp_directive (code);\n \t  break;"}, {"sha": "6ce6f73c16bb78c7f9b57631823b64372f590281", "filename": "gcc/testsuite/gfortran.dg/goacc/omp-fixed.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fomp-fixed.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fomp-fixed.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fomp-fixed.f?ref=178191e1dfafd8db149edcdef7a39e9e2c00f216", "patch": "@@ -26,7 +26,7 @@ SUBROUTINE NI\n       ENDDO\n \n !$OMP PARALLEL                                                          &\n-!$ACC& LOOP ! { dg-error \"Wrong OpenMP continuation\" }\n+!$ACC& KERNELS LOOP ! { dg-error \"Wrong OpenMP continuation\" }\n       DO I = 1, 10\n       ENDDO\n       END SUBROUTINE NI"}, {"sha": "8b3b2593217ce5a897a9b64e6a916ee289aedae2", "filename": "gcc/testsuite/gfortran.dg/goacc/omp.f95", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fomp.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fomp.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fomp.f95?ref=178191e1dfafd8db149edcdef7a39e9e2c00f216", "patch": "@@ -69,6 +69,6 @@ subroutine nana\n      !$omp do ! { dg-error \"Wrong OpenACC continuation\" }\n \n      !$omp parallel &\n-     !$acc loop ! { dg-error \"Wrong OpenMP continuation\" }\n+     !$acc kernels loop ! { dg-error \"Wrong OpenMP continuation\" }\n    end subroutine nana\n end module test"}, {"sha": "c112030a32c608ead4501c2ffe4a7255ec888ff2", "filename": "gcc/testsuite/gfortran.dg/gomp/loop-1.f90", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Floop-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Floop-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Floop-1.f90?ref=178191e1dfafd8db149edcdef7a39e9e2c00f216", "patch": "@@ -0,0 +1,56 @@\n+! { dg-additional-options \"-fdump-tree-original\" }\n+\n+implicit none\n+integer :: q, i, j\n+integer :: r\n+r = 0\n+!$omp loop bind(thread) reduction(default,+: r) collapse(2) order(concurrent), private(q) lastprivate(i)\n+do i = 1,4\n+do j = 1,4\n+  r = r + 1\n+  q = 5\n+end do\n+end do\n+\n+!$omp teams loop bind(teams) collapse(2) order(concurrent), private(q) lastprivate(i) reduction(default,+: r) \n+do i = 1,4\n+do j = 1,4\n+  r = r + 1\n+  q = 5\n+end do\n+end do\n+\n+!$omp target teams loop bind(thread) reduction(+: r) collapse(2) order(concurrent), private(q) lastprivate(i)\n+do i = 1,4\n+do j = 1,4\n+  r = r + 1\n+  q = 5\n+end do\n+end do\n+\n+!$omp parallel loop bind(thread) collapse(2) order(concurrent), private(q) lastprivate(i) reduction(default,+: r) \n+do i = 1,4\n+do j = 1,4\n+  r = r + 1\n+  q = 5\n+end do\n+end do\n+\n+!$omp target parallel loop bind(parallel) collapse(2) order(concurrent), private(q) lastprivate(i) reduction(default,+: r) \n+do i = 1,4\n+do j = 1,4\n+  r = r + 1\n+  q = 5\n+end do\n+end do\n+\n+end\n+ \n+! TODO: xfailed due to PR99928: \n+! { dg-final { scan-tree-dump-times \"#pragma omp target map\\\\(tofrom:r\\\\)\\[\\r\\n\\]\" 2 \"original\" { xfail *-*-* } } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp parallel\\[\\r\\n\\]\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp teams\\[\\r\\n\\]\" 2 \"original\" } }\n+\n+! { dg-final { scan-tree-dump-times \"#pragma omp loop private\\\\(q\\\\) lastprivate\\\\(i\\\\) reduction\\\\(\\\\+:r\\\\) order\\\\(concurrent\\\\) collapse\\\\(2\\\\) bind\\\\(parallel\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp loop private\\\\(q\\\\) lastprivate\\\\(i\\\\) reduction\\\\(\\\\+:r\\\\) order\\\\(concurrent\\\\) collapse\\\\(2\\\\) bind\\\\(teams\\\\)\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp loop private\\\\(q\\\\) lastprivate\\\\(i\\\\) reduction\\\\(\\\\+:r\\\\) order\\\\(concurrent\\\\) collapse\\\\(2\\\\) bind\\\\(thread\\\\)\" 3 \"original\" } }"}, {"sha": "b2a0d1589e1c97ee05d89535b903ae7476fc0fbc", "filename": "gcc/testsuite/gfortran.dg/gomp/loop-2.f90", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Floop-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Floop-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Floop-2.f90?ref=178191e1dfafd8db149edcdef7a39e9e2c00f216", "patch": "@@ -0,0 +1,44 @@\n+subroutine foo()\n+implicit none\n+integer :: i, r\n+!$omp loop reduction(task, +: r)  ! { dg-error \"Only DEFAULT permitted as reduction-modifier in REDUCTION clause\" }\n+do i = 1, 64\n+end do\n+!$omp teams loop reduction(task, +: r)  ! { dg-error \"Only DEFAULT permitted as reduction-modifier in REDUCTION clause\" }\n+do i = 1, 64\n+end do\n+!$omp parallel loop reduction(task, +: r)  ! { dg-error \"Only DEFAULT permitted as reduction-modifier in REDUCTION clause\" }\n+do i = 1, 64\n+end do\n+!$omp target teams loop reduction(task, +: r)  ! { dg-error \"Only DEFAULT permitted as reduction-modifier in REDUCTION clause\" }\n+do i = 1, 64\n+end do\n+!$omp target parallel loop reduction(task, +: r)  ! { dg-error \"Only DEFAULT permitted as reduction-modifier in REDUCTION clause\" }\n+do i = 1, 64\n+end do\n+\n+!$omp loop reduction(inscan, +: r)  ! { dg-error \"'inscan' REDUCTION clause on construct other than DO, SIMD, DO SIMD, PARALLEL DO, PARALLEL DO SIMD\" }\n+do i = 1, 64\n+end do\n+!$omp teams loop reduction(inscan, +: r)  ! { dg-error \"'inscan' REDUCTION clause on construct other than DO, SIMD, DO SIMD, PARALLEL DO, PARALLEL DO SIMD\" }\n+do i = 1, 64\n+end do\n+!$omp parallel loop reduction(inscan, +: r) ! { dg-error \"'inscan' REDUCTION clause on construct other than DO, SIMD, DO SIMD, PARALLEL DO, PARALLEL DO SIMD\" }\n+do i = 1, 64\n+end do\n+!$omp target teams loop reduction(inscan, +: r)  ! { dg-error \"'inscan' REDUCTION clause on construct other than DO, SIMD, DO SIMD, PARALLEL DO, PARALLEL DO SIMD\" }\n+do i = 1, 64\n+end do\n+!$omp target parallel loop reduction(inscan, +: r)  ! { dg-error \"'inscan' REDUCTION clause on construct other than DO, SIMD, DO SIMD, PARALLEL DO, PARALLEL DO SIMD\" }\n+do i = 1, 64\n+end do\n+\n+!$omp loop bind(target)  ! { dg-error \"17: Expected TEAMS, PARALLEL or THEAD as binding in BIND\" }\n+do i = 1, 64\n+end do\n+\n+!$omp loop bind(teams) bind(teams)  ! { dg-error \"24: Failed to match clause\" }\n+do i = 1, 64\n+end do\n+\n+end"}, {"sha": "5cbffb09b3f3f6423e1141fa0dc089e0496e7782", "filename": "gcc/testsuite/gfortran.dg/gomp/pr99928-1.f90", "status": "added", "additions": 238, "deletions": 0, "changes": 238, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-1.f90?ref=178191e1dfafd8db149edcdef7a39e9e2c00f216", "patch": "@@ -0,0 +1,238 @@\n+! PR middle-end/99928\n+! { dg-do compile }\n+! { dg-options \"-fopenmp -fdump-tree-gimple\" }\n+\n+module m\n+  integer :: f00, f01, f02, f03, f04, f05, f06, f07, f08, f09\n+  integer :: f12, f13, f14, f15, f16, f17, f18, f19\n+  integer :: f20, f21, f22, f23, f24, f25, f26, f27, f28, f29\n+\n+contains\n+\n+subroutine foo ()\n+  integer :: i\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*firstprivate\\\\(f00\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f00\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(f00\\\\)\" \"gimple\" } } ! FIXME. \n+  !$omp distribute parallel do firstprivate (f00) default(none)\n+  do i = 1, 64\n+    f00 = f00 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*firstprivate\\\\(f01\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f01\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(f01\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f01\\\\)\" \"gimple\" } }\n+  !$omp distribute parallel do simd firstprivate (f01) default(none)\n+  do i = 1, 64\n+    f01 = f01 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*firstprivate\\\\(f02\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f02\\\\)\" \"gimple\" } }\n+  !$omp distribute simd firstprivate (f02)\n+  do i = 1, 64\n+    f02 = f02 + 1\n+  end do\n+end\n+\n+subroutine bar ()\n+  integer :: f10, f11\n+  integer :: i\n+  f10 = 0; f11 = 0\n+  ! { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*firstprivate\\\\(f03\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f03\\\\)\" \"gimple\" } }\n+  !$omp do simd firstprivate (f03)\n+  do i = 1, 64\n+    f03 = f03 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*firstprivate\\\\(f04\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(f04\\\\)\" \"gimple\" } }\n+  !$omp master taskloop firstprivate (f04) default(none)\n+  do i = 1, 64\n+    f04 = f04 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*firstprivate\\\\(f05\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(f05\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f05\\\\)\" \"gimple\" } }\n+  !$omp master taskloop simd firstprivate (f05) default(none)\n+  do i = 1, 64\n+    f05 = f05 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f06\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(f06\\\\)\" \"gimple\" } } ! FIXME. \n+  !$omp parallel do firstprivate (f06) default(none)\n+  do i = 1, 64\n+    f06 = f06 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f07\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(f07\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f07\\\\)\" \"gimple\" } }\n+  !$omp parallel do simd firstprivate (f07) default(none)\n+  do i = 1, 64\n+    f07 = f07 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f08\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(f08\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f08\\\\)\" \"gimple\" } }\n+  !$omp parallel loop firstprivate (f08) default(none)\n+  do i = 1, 64\n+    f08 = f08 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f09\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*firstprivate\\\\(f09\\\\)\" \"gimple\" } }\n+  !$omp parallel master firstprivate (f09) default(none)\n+  f09 = f09 + 1\n+  !$omp end parallel master\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(f10\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*firstprivate\\\\(f10\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(f10\\\\)\" \"gimple\" } }\n+  !$omp parallel master taskloop firstprivate (f10) default(none)\n+  do i = 1, 64\n+    f10 = f10 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(f11\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*firstprivate\\\\(f11\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(f11\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f11\\\\)\" \"gimple\" } }\n+  !$omp parallel master taskloop simd firstprivate (f11) default(none)\n+  do i = 1, 64\n+    f11 = f11 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f12\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp sections\\[^\\n\\r]*firstprivate\\\\(f12\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp section \\[^\\n\\r]*firstprivate\\\\(f12\\\\)\" \"gimple\" } }\n+  !$omp parallel sections firstprivate (f12) default(none)\n+    f12 = f12 + 1\n+    !$omp section\n+    f12 = f12 + 1\n+  !$omp end parallel sections\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*firstprivate\\\\(f13\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f13\\\\)\" \"gimple\" } }\n+  !$omp target parallel firstprivate (f13) default(none) ! defaultmap(none)\n+  f13 = f13 + 1\n+  !$omp end target parallel\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*firstprivate\\\\(f14\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f14\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(f14\\\\)\" \"gimple\" } } ! FIXME. \n+  !$omp target parallel do firstprivate (f14) default(none) ! defaultmap(none)\n+  do i = 1, 64\n+    f14 = f14 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*firstprivate\\\\(f15\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f15\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(f15\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f15\\\\)\" \"gimple\" } }\n+  !$omp target parallel do simd firstprivate (f15) default(none) ! defaultmap(none)\n+  do i = 1, 64\n+    f15 = f15 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*firstprivate\\\\(f16\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f16\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(f16\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f16\\\\)\" \"gimple\" } }\n+  !$omp target parallel loop firstprivate (f16) default(none) ! defaultmap(none)\n+  do i = 1, 64\n+    f16 = f16 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*firstprivate\\\\(f17\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*firstprivate\\\\(f17\\\\)\" \"gimple\" } }\n+  !$omp target teams firstprivate (f17) default(none) ! defaultmap(none)\n+  f17 = f17 + 1\n+  !$omp end target teams\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*firstprivate\\\\(f18\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*firstprivate\\\\(f18\\\\)\" \"gimple\" } } ! FIXME: This should be on distribute instead. \n+  ! { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*firstprivate\\\\(f18\\\\)\" \"gimple\" } } ! FIXME. \n+  !$omp target teams distribute firstprivate (f18) default(none) ! defaultmap(none)\n+  do i = 1, 64\n+    f18 = f18 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*firstprivate\\\\(f19\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*firstprivate\\\\(f19\\\\)\" \"gimple\" } } ! FIXME: This should be on distribute instead. \n+  ! { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*firstprivate\\\\(f19\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f19\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(f19\\\\)\" \"gimple\" } } ! FIXME. \n+  !$omp target teams distribute parallel do firstprivate (f19) default(none) ! defaultmap(none)\n+  do i = 1, 64\n+    f19 = f19 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*firstprivate\\\\(f20\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*firstprivate\\\\(f20\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*firstprivate\\\\(f20\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f20\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(f20\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f20\\\\)\" \"gimple\" } }\n+  !$omp target teams distribute parallel do simd firstprivate (f20) default(none) ! defaultmap(none)\n+  do i = 1, 64\n+    f20 = f20 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*firstprivate\\\\(f21\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*firstprivate\\\\(f21\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*firstprivate\\\\(f21\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f21\\\\)\" \"gimple\" } }\n+  !$omp target teams distribute simd firstprivate (f21) default(none) ! defaultmap(none)\n+  do i = 1, 64\n+    f21 = f21 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*firstprivate\\\\(f22\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*firstprivate\\\\(f22\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*firstprivate\\\\(f22\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(f22\\\\)\" \"gimple\" } } ! NOTE: This is an implementation detail. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(f22\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f22\\\\)\" \"gimple\" } }\n+  !$omp target teams loop firstprivate (f22) default(none) ! defaultmap(none)\n+  do i = 1, 64\n+    f22 = f22 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*firstprivate\\\\(f23\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f23\\\\)\" \"gimple\" } }\n+  !$omp target simd firstprivate (f23) ! defaultmap(none)\n+  do i = 1, 64\n+    f23 = f23 + 1\n+  end do\n+  !$omp end target simd\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(f24\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f24\\\\)\" \"gimple\" } }\n+  !$omp taskloop simd firstprivate (f24) default(none)\n+  do i = 1, 64\n+    f24 = f24 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*firstprivate\\\\(f25\\\\)\" \"gimple\" } } ! FIXME: This should be on distribute instead. \n+  ! { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*firstprivate\\\\(f25\\\\)\" \"gimple\" } } ! FIXME. \n+  !$omp teams distribute firstprivate (f25) default(none)\n+  do i = 1, 64\n+    f25 = f25 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*firstprivate\\\\(f26\\\\)\" \"gimple\" } } ! FIXME: This should be on distribute instead. \n+  ! { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*firstprivate\\\\(f26\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f26\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(f26\\\\)\" \"gimple\" } } ! FIXME. \n+  !$omp teams distribute parallel do firstprivate (f26) default(none)\n+  do i = 1, 64\n+    f26 = f26 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*firstprivate\\\\(f27\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*firstprivate\\\\(f27\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(f27\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(f27\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f27\\\\)\" \"gimple\" } }\n+  !$omp teams distribute parallel do simd firstprivate (f27) default(none)\n+  do i = 1, 64\n+    f27 = f27 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*firstprivate\\\\(f28\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*firstprivate\\\\(f28\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f28\\\\)\" \"gimple\" } }\n+  !$omp teams distribute simd firstprivate (f28) default(none)\n+  do i = 1, 64\n+    f28 = f28 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*firstprivate\\\\(f29\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*firstprivate\\\\(f29\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(f29\\\\)\" \"gimple\" } } ! NOTE: This is an implementation detail. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(f29\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(f29\\\\)\" \"gimple\" } }\n+  !$omp teams loop firstprivate (f29) default(none)\n+  do i = 1, 64\n+    f29 = f29 + 1\n+  end do\n+end\n+end module m"}, {"sha": "864ae4b6c99e1eb45cdabc97d680f229444f0b93", "filename": "gcc/testsuite/gfortran.dg/gomp/pr99928-11.f90", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-11.f90?ref=178191e1dfafd8db149edcdef7a39e9e2c00f216", "patch": "@@ -0,0 +1,34 @@\n+! PR middle-end/99928\n+! { dg-do compile }\n+! { dg-options \"-fopenmp -fdump-tree-gimple\" }\n+\n+module m\n+  integer :: r00, r01, r02\n+\n+contains\n+\n+subroutine bar ()\n+  integer :: i\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*in_reduction\\\\(\\\\+:r00\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*in_reduction\\\\(\\\\+:r00\\\\)\" \"gimple\" } }\n+  !$omp master taskloop in_reduction(+:r00)\n+  do i = 1, 64\n+    r00 = r00 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*in_reduction\\\\(\\\\+:r01\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*in_reduction\\\\(\\\\+:r01\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*in_reduction\\\\(\\\\+:r01\\\\)\" \"gimple\" } }\n+  !$omp master taskloop simd in_reduction(+:r01)\n+  do i = 1, 64\n+    r01 = r01 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*in_reduction\\\\(\\\\+:r02\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*in_reduction\\\\(\\\\+:r02\\\\)\" \"gimple\" } }\n+  !$omp taskloop simd in_reduction(+:r02)\n+  do i = 1, 64\n+    r02 = r02 + 1\n+  end do\n+  ! FIXME: We don't support in_reduction clause on target yet, once we do, should\n+  ! add testcase coverage for all combined/composite constructs with target as leaf construct. \n+end\n+end module m"}, {"sha": "5dbf78ba2919cbe74094d991a59bf4523da1dd79", "filename": "gcc/testsuite/gfortran.dg/gomp/pr99928-2.f90", "status": "added", "additions": 231, "deletions": 0, "changes": 231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-2.f90?ref=178191e1dfafd8db149edcdef7a39e9e2c00f216", "patch": "@@ -0,0 +1,231 @@\n+! PR middle-end/99928\n+! { dg-do compile }\n+! { dg-options \"-fopenmp -fdump-tree-gimple\" }\n+\n+module m\n+  integer :: l00, l01, l02, l03, l04, l05, l06, l07\n+  integer :: l10, l11, l12, l13, l14, l15, l16, l17, l18\n+\n+contains\n+\n+subroutine foo ()\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(l00\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l00\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l00\\\\)\" \"gimple\" } } ! FIXME. \n+  !$omp distribute parallel do lastprivate (l00) default(none)\n+  do i = 1, 64\n+    l00 = i\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(l01\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l01\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l01\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l01\\\\)\" \"gimple\" } }\n+  !$omp distribute parallel do simd lastprivate (l01) default(none)\n+  do i = 1, 64\n+    l01 = i\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(l02\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l02\\\\)\" \"gimple\" } }\n+  !$omp distribute simd lastprivate (l02)\n+  do i = 1, 64\n+    l02 = i\n+  end do\n+end\n+\n+subroutine bar ()\n+  integer :: j00, j01, j02, j03\n+  integer :: l08, l09, l19, l20, l21, l22\n+  integer :: i\n+  l08 = 0; l09 = 0; l19 = 0; l20 = 0; l21 = 0; l22 = 0\n+  ! { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(l03\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l03\\\\)\" \"gimple\" } }\n+  !$omp do simd lastprivate (l03)\n+  do i = 1, 64\n+    l03 = i\n+  end do\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(l04\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(l04\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l04\\\\)\" \"gimple\" } }\n+  !$omp master taskloop lastprivate (l04) default(none)\n+  do i = 1, 64\n+    l04 = i\n+  end do\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(l05\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(l05\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l05\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l05\\\\)\" \"gimple\" } }\n+  !$omp master taskloop simd lastprivate (l05) default(none)\n+  do i = 1, 64\n+    l05 = i\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l06\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l06\\\\)\" \"gimple\" } } ! FIXME. \n+  !$omp parallel do lastprivate (l06) default(none)\n+  do i = 1, 64\n+    l06 = i\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l07\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l07\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l07\\\\)\" \"gimple\" } }\n+  !$omp parallel do simd lastprivate (l07) default(none)\n+  do i = 1, 64\n+    l07 = i\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j00\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j00\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j00\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  !$omp parallel loop lastprivate (j00) default(none)\n+  do j00 = 1, 64\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(l08\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(l08\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(l08\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l08\\\\)\" \"gimple\" } }\n+  !$omp parallel master taskloop lastprivate (l08) default(none)\n+  do i = 1, 64\n+    l08 = i\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(l09\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(l09\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(l09\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l09\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l09\\\\)\" \"gimple\" } }\n+  !$omp parallel master taskloop simd lastprivate (l09) default(none)\n+  do i = 1, 64\n+    l09 = i\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l10\\\\)\" \"gimple\" } } ! FIXME: This should be on sections instead. \n+  ! { dg-final { scan-tree-dump-not \"omp sections\\[^\\n\\r]*lastprivate\\\\(l10\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump-not \"omp section \\[^\\n\\r]*lastprivate\\\\(l10\\\\)\" \"gimple\" } }\n+  !$omp parallel sections lastprivate (l10) default(none)\n+    l10 = 1\n+    !$omp section\n+    l10 = 2\n+  !$omp end parallel sections\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l11\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l11\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l11\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l11\\\\)\" \"gimple\" } } ! FIXME. \n+  !$omp target parallel do lastprivate (l11) default(none) ! defaultmap(none)\n+  do i = 1, 64\n+    l11 = i\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l12\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l12\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l12\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l12\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l12\\\\)\" \"gimple\" } }\n+  !$omp target parallel do simd lastprivate (l12) default(none) ! defaultmap(none)\n+  do i = 1, 64\n+    l12 = i\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j01\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j01\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j01\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j01\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j01\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  !$omp target parallel loop lastprivate (j01) default(none) ! defaultmap(none)\n+  do j01 = 0, 64\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l13\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l13\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(l13\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(l13\\\\)\" \"gimple\" } }\n+  !$omp target teams distribute lastprivate (l13) default(none) ! defaultmap(none)\n+  do i = 1, 64\n+    l13 = i\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l14\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l14\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(l14\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(l14\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l14\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l14\\\\)\" \"gimple\" } } ! FIXME. \n+  !$omp target teams distribute parallel do lastprivate (l14) default(none) ! defaultmap(none)\n+  do i = 1, 64\n+    l14 = i\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l15\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l15\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(l15\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(l15\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l15\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l15\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l15\\\\)\" \"gimple\" } }\n+  !$omp target teams distribute parallel do simd lastprivate (l15) default(none) ! defaultmap(none)\n+  do i = 1, 64\n+    l15 = i\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l16\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l16\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(l16\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(l16\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l16\\\\)\" \"gimple\" } }\n+  !$omp target teams distribute simd lastprivate (l16) default(none) ! defaultmap(none)\n+  do i = 1, 64\n+    l16 = i\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j02\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j02\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j02\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j02\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j02\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  ! { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j02\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j02\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  !$omp target teams loop lastprivate (j02) default(none) ! defaultmap(none)\n+  do j02 = 0, 64\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l17\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l17\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l17\\\\)\" \"gimple\" } }\n+  !$omp target simd lastprivate (l17) ! defaultmap(none)\n+  do i = 1, 64\n+    l17 = i\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(l18\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l18\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l18\\\\)\" \"gimple\" } }\n+  !$omp taskloop simd lastprivate (l18) default(none)\n+  do i = 1, 64\n+    l18 = i\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(l19\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(l19\\\\)\" \"gimple\" } }\n+  !$omp teams distribute lastprivate (l19) default(none)\n+  do i = 1, 64\n+    l19 = i\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(l20\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(l20\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l20\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l20\\\\)\" \"gimple\" } } ! FIXME. \n+ !$omp teams distribute parallel do lastprivate (l20) default(none)\n+  do i = 1, 64\n+    l20 = i\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(l21\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(l21\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l21\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l21\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l21\\\\)\" \"gimple\" } }\n+ !$omp teams distribute parallel do simd lastprivate (l21) default(none)\n+  do i = 1, 64\n+    l21 = i\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(l22\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(l22\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l22\\\\)\" \"gimple\" } }\n+  !$omp teams distribute simd lastprivate (l22) default(none)\n+  do i = 1, 64\n+    l22 = i\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j03\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j03\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j03\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  ! { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j03\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(j03\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  !$omp teams loop lastprivate (j03) default(none)\n+  do j03 = 1, 64\n+  end do\n+end\n+end module m"}, {"sha": "854b9d6f2e1c685c7397626eb2d9893a461eeaef", "filename": "gcc/testsuite/gfortran.dg/gomp/pr99928-3.f90", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-3.f90?ref=178191e1dfafd8db149edcdef7a39e9e2c00f216", "patch": "@@ -25,25 +25,25 @@ subroutine bar ()\n   ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(l01\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(l01\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l01\\\\)\" \"gimple\" } }\n-  !$omp master taskloop firstprivate (l01) lastprivate (l01)\n+  !$omp master taskloop firstprivate (l01) lastprivate (l01) default(none)\n   do i = 1, 64\n     l01 = i\n   end do\n   ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*firstprivate\\\\(l02\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(l02\\\\)\" \"gimple\" } }\n-  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(l02\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(l02\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l02\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(l02\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l02\\\\)\" \"gimple\" } }\n-  !$omp master taskloop simd firstprivate (l02) lastprivate (l02)\n+  !$omp master taskloop simd firstprivate (l02) lastprivate (l02) default(none)\n   do i = 1, 64\n     l02 = i\n   end do\n   ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(l03\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n   ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l03\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n   ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(l03\\\\)\" \"gimple\" } } ! FIXME. \n   ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l03\\\\)\" \"gimple\" } } ! FIXME. \n-  !$omp parallel do firstprivate (l03) lastprivate (l03)\n+  !$omp parallel do firstprivate (l03) lastprivate (l03) default(none)\n   do i = 1, 64\n     l03 = i\n   end do\n@@ -54,7 +54,7 @@ subroutine bar ()\n   ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l04\\\\)\" \"gimple\" } } ! FIXME. \n   ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(l04\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l04\\\\)\" \"gimple\" } }\n-  !$omp parallel do simd firstprivate (l04) lastprivate (l04)\n+  !$omp parallel do simd firstprivate (l04) lastprivate (l04) default(none)\n   do i = 1, 64\n     l04 = i\n   end do\n@@ -63,19 +63,19 @@ subroutine bar ()\n   ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*firstprivate\\\\(l05\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(l05\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(l05\\\\)\" \"gimple\" } }\n-  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l05\\\\)\" \"gimple\" { xfail *-*-* } } }\n-  !$omp parallel master taskloop firstprivate (l05) lastprivate (l05)\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l05\\\\)\" \"gimple\" } }\n+  !$omp parallel master taskloop firstprivate (l05) lastprivate (l05) default(none)\n   do i = 1, 64\n     l05 = i\n   end do\n   ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(l06\\\\)\" \"gimple\" { xfail *-*-* } } }\n   ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*firstprivate\\\\(l06\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(l06\\\\)\" \"gimple\" } }\n-  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(l06\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(l06\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l06\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(l06\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l06\\\\)\" \"gimple\" } }\n-  !$omp parallel master taskloop simd firstprivate (l06) lastprivate (l06)\n+  !$omp parallel master taskloop simd firstprivate (l06) lastprivate (l06) default(none)\n   do i = 1, 64\n     l06 = i\n   end do\n@@ -90,7 +90,7 @@ subroutine bar ()\n   ! { dg-final { scan-tree-dump-not \"omp sections\\[^\\n\\r]*lastprivate\\\\(l07\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump-not \"omp section \\[^\\n\\r]*firstprivate\\\\(l07\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump-not \"omp section \\[^\\n\\r]*lastprivate\\\\(l07\\\\)\" \"gimple\" } }\n-  !$omp parallel sections firstprivate (l07) lastprivate (l07)\n+  !$omp parallel sections firstprivate (l07) lastprivate (l07) default(none)\n     l07 = 1\n     !$omp section\n     l07 = 2\n@@ -101,7 +101,7 @@ subroutine bar ()\n   ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l08\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n   ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(l08\\\\)\" \"gimple\" } } ! FIXME. \n   ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l08\\\\)\" \"gimple\" } } ! FIXME. \n-  !$omp target parallel do firstprivate (l08) lastprivate (l08)\n+  !$omp target parallel do firstprivate (l08) lastprivate (l08) default(none) ! defaultmap(none)\n   do i = 1, 64\n     l08 = i\n   end do\n@@ -114,23 +114,23 @@ subroutine bar ()\n   ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l09\\\\)\" \"gimple\" } } ! FIXME. \n   ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(l09\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l09\\\\)\" \"gimple\" } }\n-  !$omp target parallel do simd firstprivate (l09) lastprivate (l09)\n+  !$omp target parallel do simd firstprivate (l09) lastprivate (l09) default(none) ! defaultmap(none)\n   do i = 1, 64\n     l09 = i\n   end do\n   ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l10\" \"gimple\" { xfail *-*-* } } }\n   ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l10\\\\)\" \"gimple\" { xfail *-*-* } } }\n   ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(l10\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l10\\\\)\" \"gimple\" } }\n-  !$omp target simd firstprivate (l10) lastprivate (l10)\n+  !$omp target simd firstprivate (l10) lastprivate (l10) ! defaultmap(none)\n   do i = 1, 64\n     l10 = i\n   end do\n-  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(l11\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(l11\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l11\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(l11\\\\)\" \"gimple\" } }\n   ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l11\\\\)\" \"gimple\" } }\n- !$omp taskloop simd firstprivate (l11) lastprivate (l11)\n+ !$omp taskloop simd firstprivate (l11) lastprivate (l11) default(none)\n   do i = 1, 64\n     l11 = i\n   end do"}, {"sha": "5b82dd6581c34120803b3739b397817055bdf015", "filename": "gcc/testsuite/gfortran.dg/gomp/pr99928-4.f90", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-4.f90?ref=178191e1dfafd8db149edcdef7a39e9e2c00f216", "patch": "@@ -0,0 +1,89 @@\n+! PR middle-end/99928\n+! { dg-do compile }\n+! { dg-options \"-fopenmp -fdump-tree-gimple\" }\n+\n+module m\n+  integer :: l00, l01, l05, l06, l07, l08\n+\n+contains\n+\n+subroutine bar ()\n+  integer :: l02, l03, l04\n+  integer :: i\n+  l02 = 0; l03 = 0; l04 = 0\n+  ! { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*firstprivate\\\\(l00\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(l00\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(l00:1\\\\)\" \"gimple\" } }\n+  !$omp do simd linear (l00)\n+  do i = 1, 64\n+    l00 = l00 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*firstprivate\\\\(l01\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(l01\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(l01\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l01\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(l01:1\\\\)\" \"gimple\" } }\n+  !$omp master taskloop simd linear (l01) default(none)\n+  do i = 1, 64\n+    l01 = l01 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(l02\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*linear\\\\(l02:1\\\\)\" \"gimple\" } }\n+  !$omp parallel do linear (l02) default(none)\n+  do i = 1, 64\n+    l02 = l02 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(l03\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l03\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(l03\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l03\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(l03:1\\\\)\" \"gimple\" } }\n+  !$omp parallel do simd linear (l03) default(none)\n+  do i = 1, 64\n+    l03 = l03 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(l04\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*firstprivate\\\\(l04\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(l04\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(l04\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l04\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(l04:1\\\\)\" \"gimple\" } }\n+  !$omp parallel master taskloop simd linear (l04) default(none)\n+  do i = 1, 64\n+    l04 = l04 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l05\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l05\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(l05\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*linear\\\\(l05:1\\\\)\" \"gimple\" } }\n+  !$omp target parallel do linear (l05) default(none) ! defaultmap(none)\n+  do i = 1, 64\n+    l05 = l05 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l06\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l06\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(l06\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l06\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(l06\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l06\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(l06:1\\\\)\" \"gimple\" } }\n+  !$omp target parallel do simd linear (l06) default(none) ! defaultmap(none)\n+  do i = 1, 64\n+    l06 = l06 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l07\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l07\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(l07:1\\\\)\" \"gimple\" } }\n+  !$omp target simd linear (l07) ! defaultmap(none)\n+  do i = 1, 64\n+    l07 = l07 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(l08\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l08\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(l08:1\\\\)\" \"gimple\" } }\n+  !$omp taskloop simd linear (l08) default(none)\n+  do i = 1, 64\n+    l08 = l08 + 1\n+  end do\n+end\n+end module m"}, {"sha": "9f45e48feb4a83b4bf67ee097274991dfc7e7810", "filename": "gcc/testsuite/gfortran.dg/gomp/pr99928-5.f90", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-5.f90?ref=178191e1dfafd8db149edcdef7a39e9e2c00f216", "patch": "@@ -0,0 +1,107 @@\n+! PR middle-end/99928\n+! { dg-do compile }\n+! { dg-options \"-fopenmp -fdump-tree-gimple\" }\n+\n+module m\n+  integer :: j00, j01, j02, j03, j04, j06, j07, j08, j09\n+  integer :: j10\n+\n+contains\n+\n+subroutine foo ()\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j00\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j00\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j00\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j00:1\\\\)\" \"gimple\" } }\n+  !$omp distribute parallel do simd linear (j00) default(none)\n+  do j00 = 1, 64\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j01\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j01:1\\\\)\" \"gimple\" } }\n+  !$omp distribute simd linear (j01)\n+  do j01 = 1, 64\n+  end do\n+end\n+\n+subroutine bar ()\n+  integer :: j05, j11, j12\n+  ! { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j02\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j02:1\\\\)\" \"gimple\" } }\n+  !$omp do simd linear (j02)\n+  do j02 = 1, 64\n+  end do\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(j03\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j03\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j03\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j03:1\\\\)\" \"gimple\" } }\n+  !$omp master taskloop simd linear (j03) default(none)\n+  do j03 = 1, 64\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j04\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j04\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j04:1\\\\)\" \"gimple\" } }\n+  !$omp parallel do simd linear (j04) default(none)\n+  do j04 = 1, 64\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j05\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(j05\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j05\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j05\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j05:1\\\\)\" \"gimple\" } }\n+  !$omp parallel master taskloop simd linear (j05) default(none)\n+  do j05 = 1, 64\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j06\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j06\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j06\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j06\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j06:1\\\\)\" \"gimple\" } }\n+  !$omp target parallel do simd linear (j06) default(none) ! defaultmap(none)\n+  do j06 = 1, 64\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j07\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j07\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j07:1\\\\)\" \"gimple\" } }\n+  !$omp target simd linear (j07) ! defaultmap(none)\n+  do j07 = 1, 64\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j08\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j08\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j08\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j08\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j08\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j08\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j08:1\\\\)\" \"gimple\" } }\n+  !$omp target teams distribute parallel do simd linear (j08) default(none) ! defaultmap(none)\n+  do j08 = 1, 64\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j09\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j09\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j09\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j09\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j09:1\\\\)\" \"gimple\" } }\n+  !$omp target teams distribute simd linear (j09) default(none) ! defaultmap(none)\n+  do j09 = 1, 64\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j10\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j10\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j10:1\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  !$omp taskloop simd linear (j10) default(none)\n+  do j010 = 1, 64\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j11\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j11\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j11\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j11\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j11:1\\\\)\" \"gimple\" } }\n+  !$omp teams distribute parallel do simd linear (j11) default(none)\n+  do j11 = 1, 64\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j12\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j12\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j12:1\\\\)\" \"gimple\" } }\n+  !$omp teams distribute simd linear (j12) default(none)\n+  do j12 = 1, 64\n+  end do\n+end\n+end module m"}, {"sha": "37a93e6b1ac8d28f4641910608e7eb2177fa1760", "filename": "gcc/testsuite/gfortran.dg/gomp/pr99928-6.f90", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-6.f90?ref=178191e1dfafd8db149edcdef7a39e9e2c00f216", "patch": "@@ -0,0 +1,107 @@\n+! PR middle-end/99928\n+! { dg-do compile }\n+! { dg-options \"-fopenmp -fdump-tree-gimple\" }\n+\n+module m\n+  integer :: j00, j01, j02, j03, j04, j06, j07, j08, j09\n+  integer :: j10\n+\n+contains\n+\n+subroutine foo ()\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j00\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j00\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j00\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j00:1\\\\)\" \"gimple\" } }\n+  !$omp distribute parallel do simd default(none)\n+  do j00 = 1, 64\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j01\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j01:1\\\\)\" \"gimple\" } }\n+  !$omp distribute simd\n+  do j01 = 1, 64\n+  end do\n+end\n+\n+subroutine bar ()\n+  integer :: j05, j11, j12;\n+  ! { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(j02\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j02:1\\\\)\" \"gimple\" } }\n+  !$omp do simd\n+  do j02 = 1, 64\n+  end do\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(j03\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j03\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j03\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j03:1\\\\)\" \"gimple\" } }\n+  !$omp master taskloop simd default(none)\n+  do j03 = 1, 64\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j04\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j04\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j04:1\\\\)\" \"gimple\" } }\n+  !$omp parallel do simd default(none)\n+  do j04 = 1, 64\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(j05\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(j05\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j05\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j05\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j05:1\\\\)\" \"gimple\" } }\n+  !$omp parallel master taskloop simd default(none)\n+  do j05 = 1, 64\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j06\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j06\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j06\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j06\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j06:1\\\\)\" \"gimple\" } }\n+  !$omp target parallel do simd default(none) ! defaultmap(none)\n+  do j06 = 1, 64\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j07\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j07\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j07:1\\\\)\" \"gimple\" } }\n+  !$omp target simd ! defaultmap(none)\n+  do j07 = 1, 64\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j08\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j08\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j08\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j08\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j08\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j08\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j08:1\\\\)\" \"gimple\" } }\n+  !$omp target teams distribute parallel do simd default(none) ! defaultmap(none)\n+  do j08 = 1, 64\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j09\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j09\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j09\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j09\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j09:1\\\\)\" \"gimple\" } }\n+  !$omp target teams distribute simd default(none) ! defaultmap(none)\n+  do j09 = 1, 64\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*shared\\\\(j10\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(j10\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j10:1\\\\)\" \"gimple\" } }\n+  !$omp taskloop simd default(none)\n+  do j10 = 1, 64\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j11\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j11\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j11\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j11\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j11:1\\\\)\" \"gimple\" } }\n+  !$omp teams distribute parallel do simd default(none)\n+  do j11 = 1, 64\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j12\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j12\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j12:1\\\\)\" \"gimple\" } }\n+  !$omp teams distribute simd default(none)\n+  do j12 = 1, 64\n+  end do\n+end\n+end module m"}, {"sha": "de27ffed6299c9eeadc639e04d8de41c6e058054", "filename": "gcc/testsuite/gfortran.dg/gomp/pr99928-8.f90", "status": "added", "additions": 252, "deletions": 0, "changes": 252, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/178191e1dfafd8db149edcdef7a39e9e2c00f216/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-8.f90?ref=178191e1dfafd8db149edcdef7a39e9e2c00f216", "patch": "@@ -0,0 +1,252 @@\n+! PR middle-end/99928\n+! { dg-do compile }\n+! { dg-options \"-fopenmp -fdump-tree-gimple\" }\n+\n+module m\n+  integer :: r00, r01, r02, r03, r04, r05\n+  integer :: r13, r14, r15, r16, r17, r18, r19\n+  integer :: r20, r21, r22, r23, r24\n+\n+contains\n+\n+subroutine foo ()\n+  integer :: i\n+  ! { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:r00\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r00\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r00\\\\)\" \"gimple\" } } ! FIXME. \n+  !$omp distribute parallel do reduction(+:r00) default(none)\n+  do i = 1, 64\n+    r00 = r00 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:r01\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r01\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r01\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r01\\\\)\" \"gimple\" } }\n+  !$omp distribute parallel do simd reduction(+:r01) default(none)\n+  do i = 1, 64\n+    r01 = r01 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:r02\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r02\\\\)\" \"gimple\" } }\n+  !$omp distribute simd reduction(+:r02)\n+  do i = 1, 64\n+    r02 = r02 + 1\n+  end do\n+end\n+\n+subroutine bar ()\n+  integer :: r06, r07, r08, r09\n+  integer :: r10, r11, r12\n+  integer :: r25, r26, r27, r28, r29\n+  integer :: i\n+  r06 = 0; r07 = 0; r08 = 0; r09 = 0\n+  r10 = 0; r11 = 0; r12 = 0\n+  r25 = 0; r26 = 0; r27 = 0; r28 = 0; r29 = 0\n+  ! { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r03\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r03\\\\)\" \"gimple\" } }\n+  !$omp do simd reduction(+:r03)\n+  do i = 1, 64\n+    r03 = r03 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*reduction\\\\(\\\\+:r04\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*reduction\\\\(\\\\+:r04\\\\)\" \"gimple\" } }\n+  !$omp master taskloop reduction(+:r04) default(none)\n+  do i = 1, 64\n+    r04 = r04 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*reduction\\\\(\\\\+:r05\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*reduction\\\\(\\\\+:r05\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r05\\\\)\" \"gimple\" } }\n+  !$omp master taskloop simd reduction(+:r05) default(none)\n+  do i = 1, 64\n+    r05 = r05 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r06\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r06\\\\)\" \"gimple\" } } ! FIXME. \n+  !$omp parallel do reduction(+:r06) default(none)\n+  do i = 1, 64\n+    r06 = r06 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r07\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r07\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r07\\\\)\" \"gimple\" } }\n+  !$omp parallel do simd reduction(+:r07) default(none)\n+  do i = 1, 64\n+    r07 = r07 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(r08\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r08\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r08\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  !$omp parallel loop reduction(+:r08) default(none)\n+  do i = 1, 64\n+    r08 = r08 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r09\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*reduction\\\\(\\\\+:r09\\\\)\" \"gimple\" } }\n+  !$omp parallel master reduction(+:r09) default(none)\n+  r09 = r09 + 1\n+  !$omp end parallel master\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(r10\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*reduction\\\\(\\\\+:r10\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*reduction\\\\(\\\\+:r10\\\\)\" \"gimple\" } }\n+  !$omp parallel master taskloop reduction(+:r10) default(none)\n+  do i = 1, 64\n+    r10 = r10 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(r11\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*reduction\\\\(\\\\+:r11\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*reduction\\\\(\\\\+:r11\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r11\\\\)\" \"gimple\" } }\n+  !$omp parallel master taskloop simd reduction(+:r11) default(none)\n+  do i = 1, 64\n+    r11 = r11 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r12\\\\)\" \"gimple\" } } ! FIXME: This should be on sections instead. \n+  ! { dg-final { scan-tree-dump-not \"omp sections\\[^\\n\\r]*reduction\\\\(\\\\+:r12\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump-not \"omp section \\[^\\n\\r]*reduction\\\\(\\\\+:r12\\\\)\" \"gimple\" } }\n+  !$omp parallel sections reduction(+:r12) default(none)\n+    r12 = r12 + 1\n+    !$omp section\n+    r12 = r12 + 1\n+  !$omp end parallel sections\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r13\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r13\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r13\\\\)\" \"gimple\" } }\n+  !$omp target parallel reduction(+:r13) default(none) ! defaultmap(none)\n+  r13 = r13 + 1\n+  !$omp end target parallel\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r14\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r14\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r14\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r14\\\\)\" \"gimple\" } } ! FIXME. \n+  !$omp target parallel do reduction(+:r14) default(none) ! defaultmap(none)\n+  do i = 1, 64\n+    r14 = r14 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r15\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r15\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r15\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r15\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r15\\\\)\" \"gimple\" } }\n+  !$omp target parallel do simd reduction(+:r15) default(none) ! defaultmap(none)\n+  do i = 1, 64\n+    r15 = r15 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r16\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r16\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(r16\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r16\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r16\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  !$omp target parallel loop reduction(+:r16) default(none) ! defaultmap(none)\n+  do i = 1, 64\n+    r16 = r16 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r17\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r17\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:r17\\\\)\" \"gimple\" } }\n+  !$omp target teams reduction(+:r17) default(none) ! defaultmap(none)\n+  r17 = r17 + 1\n+  !$omp end target teams\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r18\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r18\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:r18\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:r18\\\\)\" \"gimple\" } }\n+  !$omp target teams distribute reduction(+:r18) default(none) ! defaultmap(none)\n+  do i = 1, 64\n+    r18 = r18 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r19\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r19\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:r19\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:r19\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r19\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r19\\\\)\" \"gimple\" } } ! FIXME. \n+  !$omp target teams distribute parallel do reduction(+:r19) default(none) ! defaultmap(none)\n+  do i = 1, 64\n+    r19 = r19 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r20\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r20\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:r20\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:r20\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r20\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r20\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r20\\\\)\" \"gimple\" } }\n+  !$omp target teams distribute parallel do simd reduction(+:r20) default(none) ! defaultmap(none)\n+  do i = 1, 64\n+    r20 = r20 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r21\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r21\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:r21\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:r21\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r21\\\\)\" \"gimple\" } }\n+  !$omp target teams distribute simd reduction(+:r21) default(none) ! defaultmap(none)\n+  do i = 1, 64\n+    r21 = r21 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r22\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r22\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(r22\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:r22\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(r22\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  ! { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r22\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r22\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  !$omp target teams loop reduction(+:r22) default(none) ! defaultmap(none)\n+  do i = 1, 64\n+    r22 = r22 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:r23\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(r23\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r23\\\\)\" \"gimple\" } }\n+  !$omp target simd reduction(+:r23) ! defaultmap(none)\n+  do i = 1, 64\n+    r23 = r23 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*reduction\\\\(\\\\+:r24\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r24\\\\)\" \"gimple\" } }\n+  !$omp taskloop simd reduction(+:r24) default(none)\n+  do i = 1, 64\n+    r24 = r24 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:r25\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:r25\\\\)\" \"gimple\" } }\n+  !$omp teams distribute reduction(+:r25) default(none)\n+  do i = 1, 64\n+    r25 = r25 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:r26\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:r26\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r26\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r26\\\\)\" \"gimple\" } } ! FIXME. \n+  !$omp teams distribute parallel do reduction(+:r26) default(none)\n+  do i = 1, 64\n+    r26 = r26 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:r27\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:r27\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*reduction\\\\(\\\\+:r27\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r27\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r27\\\\)\" \"gimple\" } }\n+  !$omp teams distribute parallel do simd reduction(+:r27) default(none)\n+  do i = 1, 64\n+    r27 = r27 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*reduction\\\\(\\\\+:r28\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:r28\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r28\\\\)\" \"gimple\" } }\n+  !$omp teams distribute simd reduction(+:r28) default(none)\n+  do i = 1, 64\n+    r28 = r28 + 1\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(r29\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*reduction\\\\(\\\\+:r29\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(r29\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  ! { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*reduction\\\\(\\\\+:r29\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*reduction\\\\(\\\\+:r29\\\\)\" \"gimple\" } } ! NOTE: This is implementation detail. \n+  !$omp teams loop reduction(+:r29) default(none)\n+  do i = 1, 64\n+    r29 = r29 + 1\n+  end do\n+end\n+end module m"}]}