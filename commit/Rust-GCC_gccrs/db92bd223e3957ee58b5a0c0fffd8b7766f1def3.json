{"sha": "db92bd223e3957ee58b5a0c0fffd8b7766f1def3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI5MmJkMjIzZTM5NTdlZTU4YjVhMGMwZmZmZDhiNzc2NmYxZGVmMw==", "commit": {"author": {"name": "Geng Qi", "email": "gengqi@linux.alibaba.com", "date": "2021-05-24T12:22:52Z"}, "committer": {"name": "Xianmiao Qu", "email": "xianmiao_qu@c-sky.com", "date": "2021-05-25T06:07:20Z"}, "message": "C-SKY: Add fpuv3 instructions and CK860 arch.\n\ngcc/ChangeLog:\n\n\t* config/csky/constraints.md (\"W\"): New constriant for mem operand\n\twith base reg, index register.\n\t(\"Q\"): Renamed and modified \"csky_valid_fpuv2_mem_operand\" to\n\t\"csky_valid_mem_constraint_operand\" to deal with both \"Q\" and \"W\"\n\tconstraint.\n\t(\"Dv\"): New constraint for const double value that can be used at\n\tfmovi instruction.\n\t* config/csky/csky-modes.def (HFmode): New mode.\n\t* config/csky/csky-protos.h (csky_valid_fpuv2_mem_operand): Rename\n\tto \"csky_valid_mem_constraint_operand\" and support new constraint\n\t\"W\".\n\t(csky_get_movedouble_length): New.\n\t(fpuv3_output_move): New.\n\t(fpuv3_const_double): New.\n\t* config/csky/csky.c (csky_option_override): New arch CK860 with fpv3.\n\t(decompose_csky_address): Refine.\n\t(csky_print_operand): New \"CONST_DOUBLE\" operand.\n\t(csky_output_move): Support fpv3 instructions.\n\t(csky_get_movedouble_length): New.\n\t(fpuv3_output_move): New.\n\t(fpuv3_const_double): New.\n\t(csky_emit_compare): Cover float comparsion.\n\t(csky_emit_compare_float): Refine.\n\t(csky_vaild_fpuv2_mem_operand): Rename to\n\t\"csky_valid_mem_constraint_operand\" and support new constraint \"W\".\n\t(ck860_rtx_costs): New.\n\t(csky_rtx_costs): Add the cost calculation of CK860.\n\t(regno_reg_class): New vregs for fpuv3.\n\t(csky_dbx_regno): Likewise.\n\t(csky_cpu_cpp_builtins): New builtin macro for fpuv3.\n\t(csky_conditional_register_usage): Suporrot fpuv3.\n\t(csky_dwarf_register_span): Suporrot fpuv3.\n\t(csky_init_builtins, csky_mangle_type): Support \"__fp16\" type.\n\t(ck810_legitimate_index_p): Support fp16.\n\t* config/csky/csky.h (TARGET_TLS): ADD CK860.\n\t(CSKY_VREG_P, CSKY_VREG_LO_P, CSKY_VREG_HI_P): Support fpuv3.\n\t(TARGET_SINGLE_FPU): Support fpuv3.\n\t(TARGET_SUPPORT_FPV3): New.\n\t(FIRST_PSEUDO_REGISTER): Change to 202 to hold the new fpuv3 registers.\n\t(FIXED_REGISTERS, CALL_REALLY_USED_REGISTERS, REGISTER_NAMES,\n\t REG_CLASS_CONTENTS): Support fpuv3.\n\t* config/csky/csky.md (movsf): Move to cksy_insn_fpu.md and refine.\n\t(csky_movsf_fpv2): Likewise.\n\t(ck801_movsf): Likewise.\n\t(csky_movsf): Likewise.\n\t(movdf): Likewise.\n\t(csky_movdf_fpv2): Likewise.\n\t(ck801_movdf): Likewise.\n\t(csky_movdf): Likewise.\n\t(movsicc): Refine. Use \"comparison_operatior\" instead of\n\t\"ordered_comparison_operatior\".\n\t(addsicc): Likewise.\n\t(CSKY_FIRST_VFP3_REGNUM, CSKY_LAST_VFP3_REGNUM): New constant.\n\t(call_value_internal_vh): New.\n\t* config/csky/csky_cores.def (CK860): New arch and cpu.\n\t(fpv3_hf): New.\n\t(fpv3_hsf): New.\n\t(fpv3_sdf): New.\n\t(fpv3): New.\n\t* config/csky/csky_insn_fpu.md: Refactor. Separate all float patterns\n\tinto emit-patterns and match-patterns, remain the emit-patterns here,\n\tand move the match-patterns to csky_insn_fpuv2.md or\n\tcsky_insn_fpuv3.md.\n\t* config/csky/csky_insn_fpuv2.md: New file for fpuv2 instructions.\n\t* config/csky/csky_insn_fpuv3.md: New file and new patterns for fpuv3\n\tisntructions.\n\t* config/csky/csky_isa.def (fcr): New.\n\t(fpv3_hi): New.\n\t(fpv3_hf): New.\n\t(fpv3_sf): New.\n\t(fpv3_df): New.\n\t(CK860): New definition for ck860.\n\t* config/csky/csky_tables.opt (ck860): New processors ck860,\n\tck860f. And new arch ck860.\n\t(fpv3_hf): New.\n\t(fpv3_hsf): New.\n\t(fpv3_hdf): New.\n\t(fpv3): New.\n\t* config/csky/predicates.md (csky_float_comparsion_operator): Delete\n\t\"geu\", \"gtu\", \"leu\", \"ltu\", which will never appear at float comparison.\n\t* config/csky/t-csky-elf: Support 860.\n\t* config/csky/t-csky-linux: Likewise.\n\t* doc/md.texi: Add \"Q\" and \"W\" constraints for C-SKY.", "tree": {"sha": "9bab2521612c8753a40a2945c314392efc3541e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bab2521612c8753a40a2945c314392efc3541e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db92bd223e3957ee58b5a0c0fffd8b7766f1def3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db92bd223e3957ee58b5a0c0fffd8b7766f1def3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db92bd223e3957ee58b5a0c0fffd8b7766f1def3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/comments", "author": {"login": "Geng-Qi-alibaba", "id": 74535016, "node_id": "MDQ6VXNlcjc0NTM1MDE2", "avatar_url": "https://avatars.githubusercontent.com/u/74535016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Geng-Qi-alibaba", "html_url": "https://github.com/Geng-Qi-alibaba", "followers_url": "https://api.github.com/users/Geng-Qi-alibaba/followers", "following_url": "https://api.github.com/users/Geng-Qi-alibaba/following{/other_user}", "gists_url": "https://api.github.com/users/Geng-Qi-alibaba/gists{/gist_id}", "starred_url": "https://api.github.com/users/Geng-Qi-alibaba/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Geng-Qi-alibaba/subscriptions", "organizations_url": "https://api.github.com/users/Geng-Qi-alibaba/orgs", "repos_url": "https://api.github.com/users/Geng-Qi-alibaba/repos", "events_url": "https://api.github.com/users/Geng-Qi-alibaba/events{/privacy}", "received_events_url": "https://api.github.com/users/Geng-Qi-alibaba/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "637569df03507cfd603d0979652b0a936d9b122d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/637569df03507cfd603d0979652b0a936d9b122d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/637569df03507cfd603d0979652b0a936d9b122d"}], "stats": {"total": 2800, "additions": 2125, "deletions": 675}, "files": [{"sha": "937cb81a3444671fcd7090ec36e069339874742f", "filename": "gcc/config/csky/constraints.md", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fconstraints.md?ref=db92bd223e3957ee58b5a0c0fffd8b7766f1def3", "patch": "@@ -34,7 +34,11 @@\n \n (define_memory_constraint \"Q\"\n   \"Memory operands with base register, index register and short displacement for FPUV2\"\n-  (match_test \"csky_valid_fpuv2_mem_operand (op)\"))\n+  (match_test \"csky_valid_mem_constraint_operand (op, \\\"Q\\\")\"))\n+\n+(define_memory_constraint \"W\"\n+  \"Memory operands with base register, index register\"\n+  (match_test \"csky_valid_mem_constraint_operand (op, \\\"W\\\")\"))\n \n (define_constraint \"R\"\n   \"Memory operands whose address is a label_ref\"\n@@ -172,3 +176,10 @@\n   \"Constant in range [-8, -1]\"\n   (and (match_code \"const_int\")\n        (match_test \"CSKY_CONST_OK_FOR_US (ival)\")))\n+\n+(define_constraint \"Dv\"\n+ \"@VFPv3\n+  A const_double which can be used with a VFP fmovi\n+  instruction.\"\n+  (and (match_code \"const_double\")\n+       (match_test \"fpuv3_const_double_rtx (op)\")))"}, {"sha": "a2427ff17c7078a1a9d7be1ae597d70ffe80b841", "filename": "gcc/config/csky/csky-modes.def", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Fcsky-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Fcsky-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky-modes.def?ref=db92bd223e3957ee58b5a0c0fffd8b7766f1def3", "patch": "@@ -0,0 +1,2 @@\n+/* Float modes.  */\n+FLOAT_MODE (HF, 2, ieee_half_format);        /* Half-precision floating point */"}, {"sha": "7c6528b94a34cec209d7597a1c92794385f09969", "filename": "gcc/config/csky/csky-protos.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Fcsky-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Fcsky-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky-protos.h?ref=db92bd223e3957ee58b5a0c0fffd8b7766f1def3", "patch": "@@ -30,7 +30,7 @@ extern void csky_cpu_cpp_builtins (cpp_reader *);\n extern bool csky_inlinable_constant (HOST_WIDE_INT value);\n extern bool csky_shifted_imm8_constant (unsigned HOST_WIDE_INT,\n \t\t\t\t\tunsigned int *, unsigned int *);\n-extern bool csky_valid_fpuv2_mem_operand (rtx);\n+extern bool csky_valid_mem_constraint_operand (rtx, const char*);\n \n extern bool csky_minipool_load_p (rtx_insn *);\n extern const char *csky_output_move (rtx insn, rtx *, machine_mode);\n@@ -70,4 +70,9 @@ extern int csky_default_branch_cost (bool, bool);\n extern bool csky_default_logical_op_non_short_circuit (void);\n \n extern void csky_init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree);\n+extern int csky_get_movedouble_length(rtx operands[]);\n+\n+/* The functions was used for fpuv3.  */\n+extern const char *fpuv3_output_move (rtx *operands);\n+extern int fpuv3_const_double_rtx (rtx);\n #endif /* GCC_CSKY_PROTOS_H */"}, {"sha": "6e97994af17eb6918505760200137c60f8444c09", "filename": "gcc/config/csky/csky.c", "status": "modified", "additions": 568, "deletions": 76, "changes": 644, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Fcsky.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Fcsky.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky.c?ref=db92bd223e3957ee58b5a0c0fffd8b7766f1def3", "patch": "@@ -126,7 +126,46 @@ enum reg_class regno_reg_class[FIRST_PSEUDO_REGISTER] =\n   /* Reserved.  */\n   RESERVE_REGS, RESERVE_REGS,\n   /* Register epc.  */\n-  OTHER_REGS\n+  OTHER_REGS,\n+  /* Vec registers.  */\n+  V_REGS,       V_REGS,       V_REGS,       V_REGS,\n+  V_REGS,       V_REGS,       V_REGS,       V_REGS,\n+  V_REGS,       V_REGS,       V_REGS,       V_REGS,\n+  V_REGS,       V_REGS,       V_REGS,       V_REGS,\n+  /* Reserved.  */\n+  RESERVE_REGS, RESERVE_REGS, RESERVE_REGS, RESERVE_REGS,\n+  RESERVE_REGS, RESERVE_REGS, RESERVE_REGS, RESERVE_REGS,\n+  RESERVE_REGS, RESERVE_REGS, RESERVE_REGS, RESERVE_REGS,\n+  RESERVE_REGS, RESERVE_REGS, RESERVE_REGS, RESERVE_REGS,\n+  /* Reserved.  */\n+  RESERVE_REGS, RESERVE_REGS, RESERVE_REGS, RESERVE_REGS,\n+  RESERVE_REGS, RESERVE_REGS, RESERVE_REGS, RESERVE_REGS,\n+  RESERVE_REGS, RESERVE_REGS, RESERVE_REGS, RESERVE_REGS,\n+  RESERVE_REGS, RESERVE_REGS, RESERVE_REGS, RESERVE_REGS,\n+  RESERVE_REGS, RESERVE_REGS, RESERVE_REGS, RESERVE_REGS,\n+  RESERVE_REGS, RESERVE_REGS, RESERVE_REGS, RESERVE_REGS,\n+  RESERVE_REGS, RESERVE_REGS, RESERVE_REGS, RESERVE_REGS,\n+  RESERVE_REGS, RESERVE_REGS, RESERVE_REGS, RESERVE_REGS,\n+\n+  RESERVE_REGS, RESERVE_REGS, RESERVE_REGS, RESERVE_REGS,\n+  RESERVE_REGS, RESERVE_REGS, RESERVE_REGS, RESERVE_REGS,\n+  RESERVE_REGS, RESERVE_REGS, RESERVE_REGS, RESERVE_REGS,\n+  RESERVE_REGS, RESERVE_REGS, RESERVE_REGS, RESERVE_REGS,\n+  RESERVE_REGS, RESERVE_REGS, RESERVE_REGS, RESERVE_REGS,\n+  RESERVE_REGS, RESERVE_REGS, RESERVE_REGS, RESERVE_REGS,\n+  RESERVE_REGS, RESERVE_REGS, RESERVE_REGS, RESERVE_REGS,\n+  RESERVE_REGS, RESERVE_REGS, RESERVE_REGS, RESERVE_REGS,\n+\n+  RESERVE_REGS, RESERVE_REGS, RESERVE_REGS, RESERVE_REGS,\n+  RESERVE_REGS, RESERVE_REGS, RESERVE_REGS, RESERVE_REGS,\n+  RESERVE_REGS, RESERVE_REGS, RESERVE_REGS, RESERVE_REGS,\n+  RESERVE_REGS, RESERVE_REGS, RESERVE_REGS, RESERVE_REGS,\n+  RESERVE_REGS, RESERVE_REGS, RESERVE_REGS, RESERVE_REGS,\n+  RESERVE_REGS, RESERVE_REGS, RESERVE_REGS, RESERVE_REGS,\n+  RESERVE_REGS, RESERVE_REGS, RESERVE_REGS, RESERVE_REGS,\n+  RESERVE_REGS, RESERVE_REGS, RESERVE_REGS, RESERVE_REGS,\n+\n+  RESERVE_REGS, RESERVE_REGS, RESERVE_REGS\n };\n \n /* Arrays that map GCC register numbers to debugger register numbers,\n@@ -138,11 +177,34 @@ const int csky_dbx_regno[FIRST_PSEUDO_REGISTER] =\n   8,  9,  10, 11, 12, 13, 14, 15,\n   16, 17, 18, 19, 20, 21, 22, 23,\n   24, 25, 26, 27, 28, 29, 30, 31,\n-  -1, -1, 36, 37, -1, -1, -1, -1,\n-  -1, -1, -1, -1, -1, -1, -1, -1,\n-  -1, -1, -1, -1, 56, 57, 58, 59,\n-  60, 61, 62, 63, 64, 65, 66, 67,\n-  68, 69, 70, 71, -1, -1, 72\n+  -1, -1, 36, 37,\n+  75,  79,  83,  87,  91,  95,  99,  103,\n+  107, 111, 115, 119, 123, 127, 131, 135,\n+  74,  78,  82,  86,  90,  94,  98,  102,\n+  106, 110, 114, 118, 122, 126, 130, 134,\n+  -1, -1, 72,\n+  /* vr: 71 - 86 */\n+  139,  143,  147,  151,  155,  159,  163,  167,\n+  171,  175,  179,  183,  187,  191,  195,  199,\n+  138,  142,  146,  150,  154,  158,  162,  166,\n+  170,  174,  178,  182,  186,  190,  194,  198,\n+  /* resereved */\n+  -1,   -1,   -1,   -1,   -1,   -1,   -1,  -1,\n+  -1,   -1,   -1,   -1,   -1,   -1,   -1,  -1,\n+  -1,   -1,   -1,   -1,   -1,   -1,   -1,  -1,\n+  -1,   -1,   -1,   -1,   -1,   -1,   -1,  -1,\n+\n+  -1,   -1,   -1,   -1,   -1,   -1,   -1,  -1,\n+  -1,   -1,   -1,   -1,   -1,   -1,   -1,  -1,\n+  -1,   -1,   -1,   -1,   -1,   -1,   -1,  -1,\n+  -1,   -1,   -1,   -1,   -1,   -1,   -1,  -1,\n+\n+  -1,   -1,   -1,   -1,   -1,   -1,   -1,  -1,\n+  -1,   -1,   -1,   -1,   -1,   -1,   -1,  -1,\n+  -1,   -1,   -1,   -1,   -1,   -1,   -1,  -1,\n+  -1,   -1,   -1,   -1,   -1,   -1,   -1,  -1,\n+\n+  -1,   -1,   -1\n };\n \n /* Table of machine attributes.  */\n@@ -351,6 +413,12 @@ csky_cpu_cpp_builtins (cpp_reader *pfile)\n       builtin_define (\"__CSKY_FPUV2__\");\n     }\n \n+  if (TARGET_SUPPORT_FPV3)\n+    {\n+      builtin_define (\"__csky_fpuv3__\");\n+      builtin_define (\"__CSKY_FPUV3__\");\n+    }\n+\n   if (TARGET_ELRW)\n     {\n       builtin_define (\"__csky_elrw__\");\n@@ -408,14 +476,16 @@ csky_cpu_cpp_builtins (cpp_reader *pfile)\n  *\t\t\t   Storage Layout\t\t\t  *\n  ******************************************************************/\n \n-\n #undef\tTARGET_PROMOTE_FUNCTION_MODE\n #define TARGET_PROMOTE_FUNCTION_MODE \\\n   default_promote_function_mode_always_promote\n \n #undef TARGET_CONSTANT_ALIGNMENT\n #define TARGET_CONSTANT_ALIGNMENT csky_constant_alignment\n \n+#undef TARGET_MANGLE_TYPE\n+#define TARGET_MANGLE_TYPE csky_mangle_type\n+\n \n /******************************************************************\n  *\t\tStack Layout and Calling Conventions\t\t  *\n@@ -692,6 +762,15 @@ csky_default_logical_op_non_short_circuit (void)\n #define\t TARGET_SCHED_ADJUST_COST csky_sched_adjust_cost\n \n \n+/******************************************************************\n+ *\t\t\tBuiltin\t\t\t\t\t  *\n+ ******************************************************************/\n+\n+\n+#undef  TARGET_INIT_BUILTINS\n+#define TARGET_INIT_BUILTINS  csky_init_builtins\n+\n+\n /* The declaration of functions.  */\n static void push_csky_minipool_fix (rtx_insn *, HOST_WIDE_INT, rtx *,\n \t\t\t\t    machine_mode, rtx);\n@@ -837,6 +916,7 @@ Mfix *minipool_fix_tail;\n Mfix *minipool_barrier;\n \n /* Allow GC scanning of the minipool obstack.  */\n+\n static void\n csky_add_gc_roots (void)\n {\n@@ -846,6 +926,7 @@ csky_add_gc_roots (void)\n \n /* Implement TARGET_CONSTANT_ALIGNMENT.\n    Make strings word-aligned so strcpy from constants will be faster.  */\n+\n static HOST_WIDE_INT\n csky_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n {\n@@ -1109,6 +1190,7 @@ get_csky_barrier_cost (rtx_insn *insn)\n    (FIX->address,MAX_ADDRESS) to forcibly insert a minipool barrier.\n    Create the barrier by inserting a jump and add a new fix entry for\n    it.  */\n+\n static Mfix *\n create_csky_fix_barrier (Mfix *fix, Mfix *fix_next,\n \t\t\t HOST_WIDE_INT max_address)\n@@ -1455,6 +1537,7 @@ csky_compute_pushpop_length (rtx *operands)\n }\n \n /* Emit constant pools for -mconstpool.  */\n+\n static void\n csky_emit_constant_pools (void)\n {\n@@ -1796,6 +1879,7 @@ csky_initial_elimination_offset (int from, int to)\n    CUM is a variable of type CUMULATIVE_ARGS which gives info about\n     the preceding args and about the function being called.\n    ARG is a description of the argument.  */\n+\n static rtx\n csky_function_arg (cumulative_args_t pcum_v, const function_arg_info &arg)\n {\n@@ -1921,6 +2005,7 @@ csky_function_value (const_tree type, const_tree func,\n \n \n /* Implement TARGET_LIBCALL_VALUE.  */\n+\n static rtx\n csky_libcall_value (machine_mode mode,\n \t\t    const_rtx libcall ATTRIBUTE_UNUSED)\n@@ -1949,6 +2034,7 @@ csky_function_value_regno_p (const unsigned int regno)\n \n /* Return an RTX indicating where the return address to the\n    calling function can be found.  */\n+\n rtx\n csky_return_addr (int count, rtx frame ATTRIBUTE_UNUSED)\n {\n@@ -1964,6 +2050,7 @@ csky_return_addr (int count, rtx frame ATTRIBUTE_UNUSED)\n    that must be put in registers. The value must be zero for arguments\n    that are passed entirely in registers or\n    that are entirely pushed on the stack.  */\n+\n static int\n csky_arg_partial_bytes (cumulative_args_t pcum_v, const function_arg_info &arg)\n {\n@@ -2180,7 +2267,19 @@ csky_conditional_register_usage (void)\n       int regno;\n \n       for (regno = CSKY_FIRST_VFP_REGNUM;\n-\t   regno <= CSKY_LAST_VFP_REGNUM; regno++)\n+\t   regno <= CSKY_LAST_VFP3_REGNUM; regno++)\n+\t{\n+\t  fixed_regs[regno] = 1;\n+\t  call_used_regs[regno] = 1;\n+\t}\n+    }\n+\n+  if (!TARGET_SUPPORT_FPV3)\n+    {\n+      int regno;\n+\n+      for (regno = CSKY_FIRST_VFP3_REGNUM;\n+\t   regno <= CSKY_LAST_VFP3_REGNUM; regno++)\n \t{\n \t  fixed_regs[regno] = 1;\n \t  call_used_regs[regno] = 1;\n@@ -2198,6 +2297,7 @@ csky_conditional_register_usage (void)\n }\n \n /* Implement TARGET_HARD_REGNO_NREGS.  */\n+\n static unsigned int\n csky_hard_regno_nregs (unsigned int regno, machine_mode mode)\n {\n@@ -2261,6 +2361,7 @@ csky_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n /* Implement TARGET_MODES_TIEABLE_P.  We can't tie DFmode with other modes\n    when V_REGs might be in use because those registers mess with the stored\n    bits.  */\n+\n static bool\n csky_modes_tieable_p (machine_mode mode1, machine_mode mode2)\n {\n@@ -2272,6 +2373,7 @@ csky_modes_tieable_p (machine_mode mode1, machine_mode mode2)\n /* Implement TARGET_CAN_CHANGE_MODE_CLASS.\n    V_REG registers can't do subreg as all values are reformatted to\n    internal precision.  */\n+\n static bool\n csky_can_change_mode_class (machine_mode from,\n \t\t\t    machine_mode to,\n@@ -2406,6 +2508,7 @@ csky_spill_class (reg_class_t rclass, machine_mode mode ATTRIBUTE_UNUSED)\n \n /* Convert a static initializer array of feature bits to sbitmap\n    representation.  */\n+\n static void\n csky_initialize_isa (sbitmap isa, const enum csky_isa_feature *isa_bits)\n {\n@@ -2417,6 +2520,7 @@ csky_initialize_isa (sbitmap isa, const enum csky_isa_feature *isa_bits)\n \n /* Configure a build target TARGET from the user-specified options OPTS and\n    OPTS_SET.  */\n+\n static void\n csky_configure_build_target (struct csky_build_target *target,\n \t\t\t     struct cl_target_option *opts,\n@@ -2508,7 +2612,9 @@ csky_option_override (void)\n \n   csky_base_arch = csky_active_target.base_arch;\n \n-  if (flag_pic && !(CSKY_TARGET_ARCH (CK810) || CSKY_TARGET_ARCH (CK807)))\n+  if (flag_pic && !(CSKY_TARGET_ARCH (CK807)\n+\t\t   || CSKY_TARGET_ARCH (CK810)\n+\t\t   || CSKY_TARGET_ARCH (CK860)))\n     {\n       flag_pic = 0;\n       warning (0, \"%qs is not supported by arch %s\",\n@@ -2526,19 +2632,21 @@ csky_option_override (void)\n \t  bool ok;\n \t  int fpu_index;\n \n-#ifdef CSKY_FPUTYPE_DEFAULT\n-\t  target_fpu_name = CSKY_FPUTYPE_DEFAULT;\n-#else\n-\t  target_fpu_name = \"fpv2\";\n-#endif\n-\n \t  if (csky_active_target.core_name != NULL\n \t      && !strchr (csky_active_target.core_name, 'f'))\n \t    target_fpu_name = \"auto\";\n \t  else if (CSKY_TARGET_ARCH (CK803) || !TARGET_DOUBLE_FLOAT)\n \t    target_fpu_name = \"fpv2_sf\";\n+\t  else if (CSKY_TARGET_ARCH (CK860))\n+\t    target_fpu_name = \"fpv3\";\n \t  else if (TARGET_DOUBLE_FLOAT && TARGET_FDIVDU)\n \t    target_fpu_name = \"fpv2_divd\";\n+\t  else\n+#ifdef CSKY_FPUTYPE_DEFAULT\n+\t    target_fpu_name = CSKY_FPUTYPE_DEFAULT;\n+#else\n+\t    target_fpu_name = \"fpv2\";\n+#endif\n \n \t  ok = opt_enum_arg_to_value (OPT_mfpu_, target_fpu_name, &fpu_index,\n \t\t\t\t      CL_TARGET);\n@@ -3020,10 +3128,8 @@ ck810_legitimate_index_p (machine_mode mode, rtx index, int strict_p)\n {\n   enum rtx_code code = GET_CODE (index);\n \n-  if (TARGET_HARD_FLOAT\n-      && (mode == SFmode || mode == DFmode))\n-    return (code == CONST_INT && INTVAL (index) < 1024\n-\t    && INTVAL (index) >= 0\n+  if (code == CONST_INT && TARGET_HARD_FLOAT && CSKY_VREG_MODE_P (mode))\n+    return (INTVAL (index) < 1024 && INTVAL (index) >= 0\n \t    && (INTVAL (index) & 3) == 0);\n \n   if (code == CONST_INT)\n@@ -3183,7 +3289,7 @@ static bool\n decompose_csky_address (rtx addr, struct csky_address *out)\n {\n   rtx base = NULL_RTX, index = NULL_RTX, disp = NULL_RTX;\n-  HOST_WIDE_INT scale = 1;\n+  HOST_WIDE_INT scale = 0;\n   rtx scale_rtx = NULL_RTX;\n   int i;\n \n@@ -3231,7 +3337,10 @@ decompose_csky_address (rtx addr, struct csky_address *out)\n \t      if (!base)\n \t\tbase = op;\n \t      else if (!index)\n-\t\tindex = op;\n+\t\t{\n+\t\t  index = op;\n+\t\t  scale = 1;\n+\t\t}\n \t      else\n \t\treturn false;\n \t      break;\n@@ -3259,7 +3368,7 @@ decompose_csky_address (rtx addr, struct csky_address *out)\n \t      scale_rtx = XEXP (op, 1);\n \t      if (!CONST_INT_P (scale_rtx))\n \t\treturn false;\n-\t      scale = scale << INTVAL (scale_rtx);\n+\t      scale = 1 << INTVAL (scale_rtx);\n \t      break;\n \t    default:\n \t      return false;\n@@ -3484,6 +3593,14 @@ csky_print_operand (FILE *stream, rtx x, int code)\n \tcase UNSPEC:\n \t  csky_output_pic_addr_const (stream, x, code);\n \t  break;\n+\tcase CONST_DOUBLE:\n+\t  {\n+\t    char fpstr[20];\n+\t    real_to_decimal ( fpstr, CONST_DOUBLE_REAL_VALUE (x),\n+\t\t\t     sizeof (fpstr), 0, 1);\n+\t    fprintf (stream, \"%s\", fpstr);\n+\t  }\n+\t  break;\n \tdefault:\n \t  output_addr_const (stream, x);\n \t  break;\n@@ -3997,17 +4114,37 @@ csky_output_move (rtx insn ATTRIBUTE_UNUSED, rtx operands[],\n \t\treturn \"mfhi\\t%0\";\n \t    }\n \n-\t    if (CSKY_VREG_P (dstreg) && CSKY_VREG_P (srcreg))\n-\t      return \"fmovs\\t%0, %1\";\n-\t    if (CSKY_VREG_P (dstreg))\n-\t      return \"fmtvrl\\t%0, %1\";\n-\t    if (CSKY_VREG_P (srcreg))\n-\t      return \"fmfvrl\\t%0, %1\";\n-\n-\t    if (REGNO (src) == CSKY_CC_REGNUM)\n-\t      return \"mvc\\t%0\";\n-\t    else\n-\t      return \"mov\\t%0, %1\";\n+\t  if (CSKY_VREG_P (dstreg) && CSKY_VREG_P (srcreg))\n+\t    {\n+\t      if (CSKY_ISA_FEATURE (fpv2_sf))\n+\t\treturn \"fmovs\\t%0, %1\";\n+\t      else if (CSKY_ISA_FEATURE (fpv3_sf))\n+\t\treturn \"fmov.32\\t%0, %1\";\n+\t      else\n+\t\tgcc_unreachable ();\n+\t    }\n+\t  if (CSKY_VREG_P (dstreg))\n+\t    {\n+\t      if (CSKY_ISA_FEATURE (fpv2_sf))\n+\t\treturn \"fmtvrl\\t%0, %1\";\n+\t      else if (CSKY_ISA_FEATURE (fpv3_sf))\n+\t\treturn \"fmtvr.32.1\\t%0, %1\";\n+\t      else\n+\t\tgcc_unreachable ();\n+\t    }\n+\t  if (CSKY_VREG_P (srcreg))\n+\t    {\n+\t      if (CSKY_ISA_FEATURE (fpv2_sf))\n+\t\treturn \"fmfvrl\\t%0, %1\";\n+\t      else if (CSKY_ISA_FEATURE (fpv3_sf))\n+\t\treturn \"fmfvr.32.1\\t%0, %1\";\n+\t      else\n+\t\tgcc_unreachable ();\n+\t    }\n+\t  if (REGNO (src) == CSKY_CC_REGNUM)\n+\t    return \"mvc\\t%0\";\n+\t  else\n+\t    return \"mov\\t%0, %1\";\n \t}\n       /* The situation mov memory to reg.  */\n       else if (GET_CODE (src) == MEM)\n@@ -4018,13 +4155,21 @@ csky_output_move (rtx insn ATTRIBUTE_UNUSED, rtx operands[],\n \t    switch (GET_MODE (src))\n \t      {\n \t      case E_HImode:\n+\t      case E_HFmode:\n \t\treturn \"ldr.h\\t%0, %1\";\n \t      case E_QImode:\n \t\treturn \"ldr.b\\t%0, %1\";\n \t      case E_SImode:\n \t      case E_SFmode:\n \t\tif (CSKY_VREG_P (REGNO (dst)))\n-\t\t  return \"fldrs\\t%0, %1\";\n+\t\t  {\n+\t\t    if (CSKY_ISA_FEATURE(fpv2_sf))\n+\t\t      return \"fldrs\\t%0, %1\";\n+\t\t    else if (CSKY_ISA_FEATURE(fpv3_sf))\n+\t\t      return \"fldr.32\\t%0, %1\";\n+\t\t    else\n+\t\t      gcc_unreachable ();\n+\t\t    }\n \t\telse\n \t\t  return \"ldr.w\\t%0, %1\";\n \t      default:\n@@ -4042,13 +4187,21 @@ csky_output_move (rtx insn ATTRIBUTE_UNUSED, rtx operands[],\n \t    switch (GET_MODE (src))\n \t      {\n \t      case E_HImode:\n+\t      case E_HFmode:\n \t\treturn \"ld.h\\t%0, %1\";\n \t      case E_QImode:\n \t\treturn \"ld.b\\t%0, %1\";\n \t      case E_SFmode:\n \t      case E_SImode:\n \t\tif (CSKY_VREG_P (REGNO (dst)))\n-\t\t  return \"flds\\t%0, %1\";\n+\t\t  {\n+\t\t     if (CSKY_ISA_FEATURE(fpv2_sf))\n+\t\t       return \"flds\\t%0, %1\";\n+\t\t     else if (CSKY_ISA_FEATURE(fpv3_sf))\n+\t\t       return \"fld.32\\t%0, %1\";\n+\t\t     else\n+\t\t       gcc_unreachable ();\n+\t\t   }\n \t\telse\n \t\t  return \"ld.w\\t%0, %1\";\n \t      default:\n@@ -4106,7 +4259,14 @@ csky_output_move (rtx insn ATTRIBUTE_UNUSED, rtx operands[],\n \t  case E_SFmode:\n \t  case E_SImode:\n \t    if (CSKY_VREG_P (REGNO (src)))\n-\t      return \"fstrs\\t%1, %0\";\n+\t      {\n+\t\tif (CSKY_ISA_FEATURE(fpv2_sf))\n+\t\t  return \"fstrs\\t%1, %0\";\n+\t\telse if (CSKY_ISA_FEATURE(fpv3_sf))\n+\t\t  return \"fstr.32\\t%1, %0\";\n+\t\telse\n+\t\t  gcc_unreachable ();\n+\t      }\n \t    else\n \t      return \"str.w\\t%1, %0\";\n \t  default:\n@@ -4122,7 +4282,14 @@ csky_output_move (rtx insn ATTRIBUTE_UNUSED, rtx operands[],\n \t  case E_SImode:\n \t  case E_SFmode:\n \t    if (CSKY_VREG_P (REGNO (src)))\n-\t      return \"fsts\\t%1, %0\";\n+\t      {\n+\t\tif (CSKY_ISA_FEATURE(fpv2_sf))\n+\t\t  return \"fsts\\t%1, %0\";\n+\t\telse if (CSKY_ISA_FEATURE(fpv3_sf))\n+\t\t  return \"fst.32\\t%1, %0\";\n+\t\telse\n+\t\t  gcc_unreachable ();\n+\t      }\n \t    else\n \t      return \"st.w\\t%1, %0\";\n \t  default:\n@@ -4261,7 +4428,14 @@ csky_output_movedouble (rtx operands[],\n \t\treturn \"mthi\\t%R1\\n\\tmtlo\\t%1\";\n \t    }\n \t  else if (CSKY_VREG_P (srcreg) && CSKY_VREG_P (dstreg))\n-\t    return \"fmovd\\t%0, %1\";\n+\t    {\n+\t      if (CSKY_ISA_FEATURE(fpv2_df))\n+\t\treturn \"fmovd\\t%0, %1\";\n+\t      else if (CSKY_ISA_FEATURE(fpv3_df))\n+\t\treturn \"fmov.64\\t%0, %1\";\n+\t      else\n+\t\tgcc_unreachable ();\n+\t    }\n \t  else if (CSKY_VREG_P (srcreg))\n \t    {\n \t      /* Since the vector registers in fpuv2_soft processors\n@@ -4270,18 +4444,46 @@ csky_output_movedouble (rtx operands[],\n \t      if (TARGET_SOFT_FPU)\n \t\t  return \"fmfvrl\\t%0, %1\";\n \t      else if (TARGET_BIG_ENDIAN)\n-\t\treturn \"fmfvrh\\t%0, %1\\n\\tfmfvrl\\t%R0, %1\";\n+\t\t{\n+\t\t  if (CSKY_ISA_FEATURE(fpv2_df))\n+\t\t    return \"fmfvrh\\t%0, %1\\n\\tfmfvrl\\t%R0, %1\";\n+\t\t  else if (CSKY_ISA_FEATURE(fpv3_df))\n+\t\t    return \"fmfvr.64\\t%R0, %0, %1\";\n+\t\t  else\n+\t\t    gcc_unreachable ();\n+\t\t}\n \t      else\n-\t\treturn \"fmfvrh\\t%R0, %1\\n\\tfmfvrl\\t%0, %1\";\n+\t\t{\n+\t\t  if (CSKY_ISA_FEATURE(fpv2_df))\n+\t\t    return \"fmfvrh\\t%R0, %1\\n\\tfmfvrl\\t%0, %1\";\n+\t\t  else if (CSKY_ISA_FEATURE(fpv3_df))\n+\t\t    return \"fmfvr.64\\t%0, %R0, %1\";\n+\t\t  else\n+\t\t    gcc_unreachable ();\n+\t\t}\n \t    }\n \t  else if (CSKY_VREG_P (dstreg))\n \t    {\n \t      if (TARGET_SOFT_FPU)\n \t\treturn \"fmtvrl\\t%0, %1\";\n \t      else if (TARGET_BIG_ENDIAN)\n-\t\treturn \"fmtvrh\\t%0, %1\\n\\tfmtvrl\\t%0, %R1\";\n+\t\t{\n+\t\t  if (CSKY_ISA_FEATURE(fpv2_df))\n+\t\t    return \"fmtvrh\\t%0, %1\\n\\tfmtvrl\\t%0, %R1\";\n+\t\t  else if (CSKY_ISA_FEATURE(fpv3_df))\n+\t\t    return \"fmtvr.64\\t%0, %R1, %1\";\n+\t\t  else\n+\t\t    gcc_unreachable ();\n+\t\t}\n \t      else\n-\t\treturn \"fmtvrh\\t%0, %R1\\n\\tfmtvrl\\t%0, %1\";\n+\t\t{\n+\t\t  if (CSKY_ISA_FEATURE(fpv2_df))\n+\t\t    return \"fmtvrh\\t%0, %R1\\n\\tfmtvrl\\t%0, %1\";\n+\t\t  else if (CSKY_ISA_FEATURE(fpv3_df))\n+\t\t    return \"fmtvr.64\\t%0, %1, %R1\";\n+\t\t  else\n+\t\t    gcc_unreachable ();\n+\t\t}\n \t    }\n \n \t  /* Ensure the second source not overwritten.  */\n@@ -4323,9 +4525,23 @@ csky_output_movedouble (rtx operands[],\n \t  if (CSKY_VREG_P (dstreg))\n \t    {\n \t      if (op0.index)\n-\t\treturn \"fldrd\\t%0, %1\";\n+\t\t{\n+\t\t  if (CSKY_ISA_FEATURE(fpv2_df))\n+\t\t    return \"fldrd\\t%0, %1\";\n+\t\t  else if (CSKY_ISA_FEATURE(fpv3_df))\n+\t\t    return \"fldr.64\\t%0, %1\";\n+\t\t  else\n+\t\t    gcc_unreachable ();\n+\t\t}\n \t      else\n-\t\treturn \"fldd\\t%0, %1\";\n+\t\t{\n+\t\t  if (CSKY_ISA_FEATURE(fpv2_df))\n+\t\t    return \"fldd\\t%0, %1\";\n+\t\t  else if (CSKY_ISA_FEATURE(fpv3_df))\n+\t\t    return \"fld.64\\t%0, %1\";\n+\t\t  else\n+\t\t    gcc_unreachable ();\n+\t\t}\n \t    }\n \t  /* FIXME length attribute is wrong here.  */\n \t  if (dstreg == basereg)\n@@ -4389,9 +4605,23 @@ csky_output_movedouble (rtx operands[],\n       if (CSKY_VREG_P (srcreg))\n \t{\n \t  if (op0.index)\n-\t    return \"fstrd\\t%1, %0\";\n+\t    {\n+\t      if (CSKY_ISA_FEATURE(fpv2_df))\n+\t\treturn \"fstrd\\t%1, %0\";\n+\t      else if (CSKY_ISA_FEATURE(fpv3_df))\n+\t\treturn \"fstr.64\\t%1, %0\";\n+\t      else\n+\t\tgcc_unreachable ();\n+\t    }\n \t  else\n-\t    return \"fstd\\t%1, %0\";\n+\t    {\n+\t      if (CSKY_ISA_FEATURE(fpv2_df))\n+\t\treturn \"fstd\\t%1, %0\";\n+\t      else if (CSKY_ISA_FEATURE(fpv3_df))\n+\t\treturn \"fst.64\\t%1, %0\";\n+\t      else\n+\t\tgcc_unreachable ();\n+\t    }\n \t}\n       /* FIXME length attribute is wrong here.  */\n       if (srcreg == basereg)\n@@ -4518,9 +4748,181 @@ csky_output_ck801_movedouble (rtx operands[],\n     gcc_unreachable ();\n }\n \n+/* Calculate the instruction's length for moving double-word data.  */\n+\n+int\n+csky_get_movedouble_length(rtx operands[])\n+{\n+  rtx dst = operands[0];\n+  rtx src = operands[1];\n+\n+  if (REG_P (dst))\n+    {\n+      if (REG_P (src))\n+\t{\n+\t  int dstreg = REGNO (dst);\n+\t  int srcreg = REGNO (src);\n+\n+\t  if (CSKY_VREG_P (srcreg) && CSKY_VREG_P (dstreg))\n+\t    return 4;\n+\t  else\n+\t    return 8;\n+\t}\n+      else if (GET_CODE (src) == MEM)\n+\t{\n+\t  rtx memexp = XEXP (src, 0);\n+\t  int dstreg = REGNO (dst);\n+\t  struct csky_address op0;\n+\t  decompose_csky_address (XEXP (src, 0), &op0);\n+\n+\t  if (GET_CODE (memexp) == LABEL_REF)\n+\t    return 8;\n+\t  if (CSKY_VREG_P (dstreg))\n+\t    return 4;\n+\t  return 8;\n+\t}\n+      else if (GET_CODE (src) == CONST_INT || GET_CODE (src) == CONST_DOUBLE)\n+\t{\n+\t  split_double (src, operands + 2, operands + 3);\n+\t  if (CSKY_CONST_OK_FOR_N (INTVAL (operands[2]) + 1)\n+\t      && CSKY_CONST_OK_FOR_N (INTVAL (operands[3]) + 1)\n+\t      && REGNO (operands[0]) < 6)\n+\t    return 4;\n+\t  else\n+\t    return 8;\n+\t}\n+    }\n+  else if (GET_CODE (dst) == MEM && GET_CODE (src) == REG)\n+    {\n+      rtx memexp = XEXP (dst, 0);\n+      int srcreg = REGNO (src);\n+      int offset = -1;\n+      if (CSKY_VREG_P (srcreg))\n+\treturn 4;\n+\n+      if (GET_CODE (memexp) == REG)\n+\toffset = 0;\n+      else if (GET_CODE (memexp) == PLUS)\n+\t{\n+\t  if (GET_CODE (XEXP (memexp, 0)) == REG)\n+\t    offset = INTVAL (XEXP (memexp, 1));\n+\t  else if (GET_CODE (XEXP (memexp, 1)) == REG)\n+\t    offset = INTVAL (XEXP (memexp, 0));\n+\t  else\n+\t    gcc_unreachable ();\n+\t}\n+      else\n+\tgcc_unreachable ();\n+\n+      if (srcreg <= 6 && offset <= 1020)\n+\treturn 4;\n+      else if ((srcreg == 7 && offset <= 1024) || (srcreg <= 7 && offset == 1024))\n+\treturn 6;\n+      else\n+\treturn 8;\n+    }\n+  else\n+    gcc_unreachable ();\n+\n+  return 0;\n+}\n+\n+/* Output float point load/store instructions for fpuv3.  */\n+\n+const char *\n+fpuv3_output_move (rtx *operands)\n+{\n+  rtx reg, mem, addr, ops[2];\n+  bool isload = REG_P (operands[0]);\n+\n+  const char *templ = \"f%s%s.%s\\t%%0, %%1\";\n+  char buff[50];\n+  machine_mode mode;\n+\n+  reg = operands[isload ? 0 : 1];\n+  mem = operands[isload ? 1 : 0];\n+\n+  gcc_assert (REG_P (reg));\n+  gcc_assert (CSKY_VREG_P (REGNO (reg)));\n+  gcc_assert (MEM_P (mem));\n+\n+  mode = GET_MODE (reg);\n+  const char *type = mode == DFmode ? \"64\" :\n+\t\t     mode == SFmode ? \"32\" :\n+\t\t     mode == HFmode ? \"16\" :\n+\t\t     NULL;\n+  gcc_assert(type != NULL);\n+\n+  addr = XEXP (mem, 0);\n+  struct csky_address caddr;\n+  decompose_csky_address (addr, &caddr);\n+\n+  ops[0] = reg;\n+  ops[1] = mem;\n+  sprintf (buff, templ,\n+\t   isload ? \"ld\" : \"st\",\n+\t   caddr.index ? \"r\" : \"\",\n+\t   type);\n+  output_asm_insn (buff, ops);\n+\n+  return \"\";\n+}\n+\n+/* Check if a const_double can be used by a VFP fmovi instruction.  */\n+\n+int\n+fpuv3_const_double_rtx (rtx x)\n+{\n+  REAL_VALUE_TYPE r, m;\n+  r = *CONST_DOUBLE_REAL_VALUE (x);\n+\n+  /* Fpuv3 doesn't support the following values.  */\n+  if (REAL_VALUE_ISINF (r) || REAL_VALUE_ISNAN (r) || REAL_VALUE_MINUS_ZERO (r)\n+      || r.cl == rvc_zero)\n+    return 0;\n+\n+  /* Extract sign, exponent and mantissa.  */\n+  int exponent;\n+  r = real_value_abs (&r);\n+  exponent = REAL_EXP (&r);\n+\n+  bool fail;\n+  unsigned HOST_WIDE_INT mantissa, mant_hi;\n+  unsigned HOST_WIDE_INT mask;\n+  int point_pos = 2 * HOST_BITS_PER_WIDE_INT - 1;\n+  real_ldexp (&m, &r, point_pos - exponent);\n+  wide_int w = real_to_integer (&m, &fail, HOST_BITS_PER_WIDE_INT * 2);\n+  mantissa = w.elt (0);\n+  mant_hi = w.elt (1);\n+\n+  exponent -= 1;\n+\n+  if (!IN_RANGE (exponent, -4, 11))\n+    return 0;\n+\n+  /* If there are bits set in the low part of the mantissa, these values are\n+     not supported.  */\n+  if (mantissa != 0)\n+    return 0;\n+\n+  /* Now, make the mantissa contain the most-significant bits, and the\n+     point_pos indicates the number of these bits.  */\n+  point_pos -= HOST_BITS_PER_WIDE_INT;\n+  mantissa = mant_hi;\n+\n+  /* We can only allow a mantissa of 9 significant digits, top of which is always 1.  */\n+  mask = ((unsigned HOST_WIDE_INT)1 << (point_pos - 9)) - 1;\n+  if ((mantissa & mask) != 0)\n+    return 0;\n+\n+  return 1;\n+}\n+\n+\n /* Split operands for an AND expression when OPERANDS[2] is a constant.\n    Note operands[0] is marked earlyclobber in this case and can be\n    overwritten.  Return true if \"DONE\", false otherwise.  */\n+\n bool\n csky_split_and (rtx *operands)\n {\n@@ -4650,6 +5052,7 @@ csky_split_and (rtx *operands)\n /* Split operands for an IOR expression when OPERANDS[2] is a constant.\n    Note operands[0] is marked earlyclobber in this case and can be\n    overwritten.  Return true if \"DONE\", false otherwise.  */\n+\n bool\n csky_split_ior (rtx *operands)\n {\n@@ -4717,6 +5120,7 @@ csky_split_ior (rtx *operands)\n /* Split operands for an XOR expression when OPERANDS[2] is a constant.\n    Note operands[0] is marked earlyclobber in this case and can be\n    overwritten.  Return true if \"DONE\", false otherwise.  */\n+\n bool\n csky_split_xor (rtx *operands)\n {\n@@ -4765,6 +5169,7 @@ csky_split_xor (rtx *operands)\n \n \n /* Return true if X is an address form involving a symbol or label ref.  */\n+\n bool\n csky_symbolic_address_p (rtx x)\n {\n@@ -4793,6 +5198,9 @@ csky_emit_compare (enum rtx_code code, rtx op0, rtx op1)\n   bool invert;\n   rtx cc_reg = gen_rtx_REG (CCmode, CSKY_CC_REGNUM);\n \n+  if (GET_MODE_CLASS(GET_MODE (op0)) == MODE_FLOAT)\n+    return csky_emit_compare_float(code, op0, op1);\n+\n   if (GET_CODE (op1) == CONST_INT)\n     {\n       HOST_WIDE_INT val = INTVAL (op1);\n@@ -5707,6 +6115,7 @@ tls_unspec_mentioned_p (rtx x)\n \n \n /* Implement LEGITIMATE_PIC_OPERAND_P.  */\n+\n bool\n csky_legitimate_pic_operand_p (rtx x)\n {\n@@ -5938,33 +6347,20 @@ csky_emit_compare_float (enum rtx_code code, rtx op0, rtx op1)\n     op1 = force_reg (mode, op1);\n \n   invert = false;\n+\n   switch (code)\n     {\n     case EQ:\n       code = NE;\n       invert = true;\n       break;\n-\n-    case NE:\n-      break;\n-    case LE:\n-      if (op1 == CONST0_RTX (mode))\n-\top1 = force_reg (mode, op1);\n-      break;\n     case GT:\n-      if (op1 == CONST0_RTX (mode))\n-\top1 = force_reg (mode, op1);\n-      break;\n-    case GE:\n-      break;\n     case LT:\n-      if (op1 == CONST0_RTX (mode))\n-\t{\n-\t  code = GE;\n-\t  invert = true;\n-\t}\n-      break;\n-    case UNORDERED:\n+    case LE:\n+      if (op1 == CONST0_RTX (mode) && (CSKY_ISA_FEATURE_GET(fpv2_sf)\n+\t\t\t\t       || CSKY_ISA_FEATURE_GET(fpv2_df)\n+\t\t\t\t       || CSKY_ISA_FEATURE_GET(fpv2_divd)))\n+\top1 = force_reg (mode, op1);\n       break;\n     case ORDERED:\n       code = UNORDERED;\n@@ -5980,10 +6376,11 @@ csky_emit_compare_float (enum rtx_code code, rtx op0, rtx op1)\n   return invert;\n }\n \n-/* Support for the Q memory constraint.  Returns true if OP is a MEM RTX\n-   with an address consisting of base + index or base + displacement.  */\n+/* Support for the Q or W memory constraint.  Returns true if OP is a MEM\n+   RTX with an address consisting of base + index or base + displacement.  */\n+\n bool\n-csky_valid_fpuv2_mem_operand (rtx op)\n+csky_valid_mem_constraint_operand (rtx op, const char *constraint)\n {\n   struct csky_address addr;\n \n@@ -5998,7 +6395,7 @@ csky_valid_fpuv2_mem_operand (rtx op)\n     return false;\n \n   /* Verify index operand. */\n-  if (addr.index)\n+  if (addr.index && (constraint[0] == 'Q' || constraint[0] == 'W'))\n     {\n       if (!is_csky_address_register_rtx_p (addr.index, 0))\n \treturn false;\n@@ -6010,7 +6407,7 @@ csky_valid_fpuv2_mem_operand (rtx op)\n       return false;\n     }\n   /* Verify disp operand.  */\n-  else if (addr.disp)\n+  else if (addr.disp && constraint[0] == 'Q')\n     {\n       rtx disp = addr.disp;\n \n@@ -6023,7 +6420,11 @@ csky_valid_fpuv2_mem_operand (rtx op)\n \n        return false;\n     }\n-  return true;\n+  else if (constraint[0] == 'Q')\n+  /* Single reg is valid for 'Q'.  */\n+    return true;\n+\n+  return false;\n }\n \n \n@@ -6442,7 +6843,7 @@ ck803_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED,\n     }\n }\n \n-/* TARGET_RTX_COSTS helper for ck807+ arches.  */\n+/* TARGET_RTX_COSTS helper for ck807/ck810 arches.  */\n \n static bool\n ck807_ck810_rtx_costs (rtx x, int code,\n@@ -6473,6 +6874,52 @@ ck807_ck810_rtx_costs (rtx x, int code,\n     }\n }\n \n+/* TARGET_RTX_COSTS helper for ck860 arches.  */\n+\n+static bool\n+ck860_rtx_costs (rtx x, int code, machine_mode mode,\n+\t\t int outer_code ATTRIBUTE_UNUSED,\n+\t\t int *total, bool speed ATTRIBUTE_UNUSED)\n+{\n+  switch (code)\n+    {\n+    case PLUS:\n+      /* The costs of mula is 1 more than mult.  */\n+      if (GET_CODE (XEXP (x, 0)) == MULT && REG_P (XEXP (x, 1)) && speed)\n+\t{\n+\t  rtx mul_op0 = XEXP (XEXP (x, 0), 0);\n+\t  rtx mul_op1 = XEXP (XEXP (x, 0), 1);\n+\t  if (REG_P (mul_op0) && REG_P (mul_op1))\n+\t    {\n+\t      *total = COSTS_N_INSNS (1);\n+\t      *total += rtx_cost (XEXP (x, 0), mode,\n+\t\t\t\t  (enum rtx_code) code, 0, speed);\n+\t      return true;\n+\t    }\n+\t}\n+      return false;\n+    case MULT:\n+      if (REG_P (XEXP (x, 0)) && CONST_INT_P (XEXP (x, 1)))\n+\t{\n+\t  HOST_WIDE_INT val = INTVAL (XEXP (x, 1));\n+\t  if (val % 2 == 0 && val < 0xffffffff && val > 0)\n+\t    {\n+\t      *total = COSTS_N_INSNS (1);\n+\t      return true;\n+\t    }\n+\t}\n+      return false;\n+\n+    case CONST:\n+    case LABEL_REF:\n+    case SYMBOL_REF:\n+      *total = COSTS_N_INSNS (3);\n+      return true;\n+    default:\n+      return false;\n+    }\n+}\n+\n \n /* Implement TARGET_RTX_COSTS, to compute a (partial) cost for rtx X.\n    Return true if the complete cost has been computed, and false if\n@@ -6491,6 +6938,8 @@ csky_rtx_costs (rtx x, machine_mode mode ATTRIBUTE_UNUSED, int outer_code,\n     return ck803_rtx_costs (x, code, outer_code, total, speed);\n   else if (CSKY_TARGET_ARCH (CK807) || CSKY_TARGET_ARCH (CK810))\n     return ck807_ck810_rtx_costs (x, code, outer_code, total, speed);\n+  else if (CSKY_TARGET_ARCH (CK860))\n+    return ck860_rtx_costs (x, code, mode, outer_code, total, speed);\n   else\n     gcc_unreachable ();\n }\n@@ -6633,6 +7082,7 @@ csky_warn_func_return (tree decl)\n /* Implement TARGET_RETURN_IN_MEMORY to decide whether TYPE should be\n    returned in memory (true) or in a register (false).\n    FNTYPE is the type of the function making the call.  */\n+\n static bool\n csky_return_in_memory (const_tree type,\n \t\t       const_tree fntype ATTRIBUTE_UNUSED)\n@@ -6646,6 +7096,7 @@ csky_return_in_memory (const_tree type,\n    Dwarf models VFP registers as  64-bit or 128-bit registers default.\n    GCC models tham as 32-bit registers, so we need to describe this to\n    the DWARF generation code.  Other registers can use the default.  */\n+\n static rtx\n csky_dwarf_register_span (rtx rtl)\n {\n@@ -6659,11 +7110,15 @@ csky_dwarf_register_span (rtx rtl)\n   if (!CSKY_VREG_P (regno))\n     return NULL_RTX;\n \n+  if (CSKY_VREG_HI_P (regno))\n+    regno += 16;\n+\n   mode = GET_MODE (rtl);\n   if (GET_MODE_SIZE (mode) < 8)\n     return NULL_RTX;\n \n-  if (TARGET_SOFT_FPU)\n+\n+  if (TARGET_SINGLE_FPU)\n     {\n       nregs = GET_MODE_SIZE (mode) / 4;\n       for (i = 0; i < nregs; i += 2)\n@@ -6684,9 +7139,18 @@ csky_dwarf_register_span (rtx rtl)\n \t as the CPU bit width. Transform the 64-bit FPU registers to\n \t 32 bits here, and we will modify the unwind processing to\n \t fit CSKY architecture later.  */\n-      nregs = GET_MODE_SIZE (mode) / 8;\n-      for (i = 0; i < nregs; i++)\n-\tparts[i] = gen_rtx_REG (SImode, regno + i);\n+      nregs = GET_MODE_SIZE (mode) / 4;\n+      for (i = 0; i < nregs; i += 2)\n+\tif (TARGET_BIG_ENDIAN)\n+\t  {\n+\t    parts[i] = gen_rtx_REG (SImode, regno + i - 16);\n+\t    parts[i + 1] = gen_rtx_REG (SImode, regno + i);\n+\t  }\n+\telse\n+\t  {\n+\t    parts[i] = gen_rtx_REG (SImode, regno + i);\n+\t    parts[i + 1] = gen_rtx_REG (SImode, regno + i - 16);\n+\t  }\n     }\n \n   return gen_rtx_PARALLEL (VOIDmode, gen_rtvec_v (nregs , parts));\n@@ -6847,6 +7311,34 @@ csky_init_cumulative_args (CUMULATIVE_ARGS *pcum, tree fntype,\n     pcum->is_stdarg = true;\n }\n \n+\n+/* Implement the TARGET_INIT_BUILTINS target macro.  */\n+\n+void\n+csky_init_builtins (void)\n+{\n+  /* Inint fp16.  */\n+  static tree csky_floatHF_type_node = make_node (REAL_TYPE);\n+  TYPE_PRECISION (csky_floatHF_type_node) = GET_MODE_PRECISION (HFmode);\n+  layout_type (csky_floatHF_type_node);\n+  (*lang_hooks.types.register_builtin_type) (csky_floatHF_type_node, \"__fp16\");\n+}\n+\n+\n+/* Implement TARGET_MANGLE_TYPE.  */\n+\n+static const char *\n+csky_mangle_type (const_tree type)\n+{\n+  if (TYPE_NAME (type) && TREE_CODE (TYPE_NAME (type)) == TYPE_DECL\n+      && DECL_NAME (TYPE_NAME (type))\n+      && !strcmp (IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type))), \"__fp16\"))\n+    return \"__fp16\";\n+\n+  /* Use the default mangling.  */\n+  return NULL;\n+}\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-csky.h\""}, {"sha": "f535c42cfe49932dd3278e67bf11b1a0ec7f4ba9", "filename": "gcc/config/csky/csky.h", "status": "modified", "additions": 138, "deletions": 24, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Fcsky.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Fcsky.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky.h?ref=db92bd223e3957ee58b5a0c0fffd8b7766f1def3", "patch": "@@ -28,8 +28,17 @@\n #define CSKY_GENERAL_REGNO_P(N)\t\t\t\\\n   ((N) < CSKY_NGPR_REGS && (int)(N) >= 0)\n \n-#define CSKY_VREG_P(N)\t\t     \\\n-  ((N) >= CSKY_FIRST_VFP_REGNUM && (N) <= CSKY_LAST_VFP_REGNUM)\n+#define CSKY_VREG_LO_P(N) \\\n+  ((N) >= CSKY_FIRST_VFP_REGNUM \\\n+   && (N) <= CSKY_LAST_VFP_REGNUM)\n+\n+ #define CSKY_VREG_HI_P(N) \\\n+   ((N) >= CSKY_FIRST_VFP3_REGNUM \\\n+    && (N) <= CSKY_LAST_VFP3_REGNUM)\n+\n+ #define CSKY_VREG_P(N)    \\\n+   (CSKY_VREG_LO_P(N)     \\\n+    || CSKY_VREG_HI_P(N))\n \n #define CSKY_HILO_REG_P(N)   \\\n   ((N) == CSKY_HI_REGNUM || (N) == CSKY_LO_REGNUM)\n@@ -124,7 +133,7 @@\n   (optimize_size && TARGET_CONSTANT_POOL \\\n    && (CSKY_TARGET_ARCH (CK801) || CSKY_TARGET_ARCH (CK802)))\n #define TARGET_TLS \\\n-  (CSKY_TARGET_ARCH (CK807) || CSKY_TARGET_ARCH (CK810))\n+  (CSKY_TARGET_ARCH (CK807) || CSKY_TARGET_ARCH (CK810) || CSKY_TARGET_ARCH (CK860))\n \n /* Run-time Target Specification.  */\n #define TARGET_SOFT_FLOAT       (csky_float_abi == CSKY_FLOAT_ABI_SOFT)\n@@ -133,7 +142,9 @@\n /* Use hardware floating point calling convention.  */\n #define TARGET_HARD_FLOAT_ABI   (csky_float_abi == CSKY_FLOAT_ABI_HARD)\n \n-#define TARGET_SINGLE_FPU     (csky_fpu_index == TARGET_FPU_fpv2_sf)\n+#define TARGET_SINGLE_FPU     (csky_fpu_index == TARGET_FPU_fpv2_sf \\\n+\t\t\t       || csky_fpu_index == TARGET_FPU_fpv3_hsf \\\n+\t\t\t       || csky_fpu_index == TARGET_FPU_fpv3_hf)\n #define TARGET_DOUBLE_FPU     (TARGET_HARD_FLOAT && !TARGET_SINGLE_FPU)\n \n #define FUNCTION_VARG_REGNO_P(REGNO)      \\\n@@ -142,13 +153,18 @@\n \t\tCSKY_FIRST_VFP_REGNUM + CSKY_NPARM_FREGS - 1))\n \n #define CSKY_VREG_MODE_P(mode) \\\n-  ((mode) == SFmode || (mode) == DFmode)\n+  ((mode) == SFmode || (mode) == DFmode \\\n+   || (CSKY_ISA_FEATURE(fpv3_hf) && (mode) == HFmode))\n \n #define FUNCTION_VARG_MODE_P(mode)  \\\n   (TARGET_HARD_FLOAT_ABI            \\\n    && CSKY_VREG_MODE_P(mode)        \\\n    && !(mode == DFmode && TARGET_SINGLE_FPU))\n \n+#define TARGET_SUPPORT_FPV3 (CSKY_ISA_FEATURE (fpv3_hf)    \\\n+\t\t\t     || CSKY_ISA_FEATURE (fpv3_sf) \\\n+\t\t\t     || CSKY_ISA_FEATURE (fpv3_df))\n+\n /* Number of loads/stores handled by ldm/stm.  */\n #define CSKY_MIN_MULTIPLE_STLD\t3\n #define CSKY_MAX_MULTIPLE_STLD\t12\n@@ -427,7 +443,7 @@ typedef struct\n  ******************************************************************/\n \n \n-#define FIRST_PSEUDO_REGISTER 71\n+#define FIRST_PSEUDO_REGISTER 202\n \n /* 1 for registers that have pervasive standard uses\n    and are not available for the register allocator.\n@@ -456,7 +472,31 @@ typedef struct\n  /*  reserved */\t\t\t\t\t\t\t\\\n      1,\t   1,\t\t\t\t\t\t\t\t\\\n  /*  epc */\t\t\t\t\t\t\t\t\\\n-     1\t\t\t\t\t\t\t\t\t\\\n+     1,\t\t\t\t\t\t\t\t\t\\\n+ /* vr16  vr17  vr18  vr19  vr20  vr21  vr22  vr23 */\t\t\t\\\n+     0,    0,    0,    0,    0,    0,    0,    0,\t\t\t\\\n+ /* vr24  vr25  vr26  vr27  vr28  vr29  vr30  vr31 */\t\t\t\\\n+     0,    0,    0,    0,    0,    0,    0,    0 ,\t\t\t\\\n+ /* reserved */\t\t\t\t\t\t\t\t\\\n+     1,    1,    1,    1,    1,    1,    1,    1,\t\t\t\\\n+     1,    1,    1,    1,    1,    1,    1,    1,\t\t\t\\\n+ /* reserved */\t\t\t\t\t\t\t\t\\\n+     1,    1,    1,    1,    1,    1,    1,    1,\t\t\t\\\n+     1,    1,    1,    1,    1,    1,    1,    1,\t\t\t\\\n+     1,    1,    1,    1,    1,    1,    1,    1,\t\t\t\\\n+     1,    1,    1,    1,    1,    1,    1,    1,\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+     1,    1,    1,    1,    1,    1,    1,    1,\t\t\t\\\n+     1,    1,    1,    1,    1,    1,    1,    1,\t\t\t\\\n+     1,    1,    1,    1,    1,    1,    1,    1,\t\t\t\\\n+     1,    1,    1,    1,    1,    1,    1,    1,\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+     1,    1,    1,    1,    1,    1,    1,    1,\t\t\t\\\n+     1,    1,    1,    1,    1,    1,    1,    1,\t\t\t\\\n+     1,    1,    1,    1,    1,    1,    1,    1,\t\t\t\\\n+     1,    1,    1,    1,    1,    1,    1,    1,\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+     1,    1,    1\t\t\t\t\t\t\t\\\n }\n \n /* Like `CALL_USED_REGISTERS' but used to overcome a historical\n@@ -487,7 +527,31 @@ typedef struct\n  /*  reserved */\t\t\t\t\t\t\t\\\n      1,\t   1,\t\t\t\t\t\t\t\t\\\n  /*  epc */\t\t\t\t\t\t\t\t\\\n-     1\t\t\t\t\t\t\t\t\t\\\n+     1,\t\t\t\t\t\t\t\t\t\\\n+ /*  vr16  vr17  vr18  vr19  vr20  vr21  vr22  vr23*/\t\t\t\\\n+     1,\t   1,\t 1,    1,    1,\t   1,\t 1,    1,\t\t\t\\\n+ /*  vr24  vr25 vr26  vr27  vr28  vr29\t vr30  vr31 */\t\t\t\\\n+     1,\t   1,\t 1,    1,    1,\t   1,\t 1,    1,\t\t\t\\\n+ /*  reserved */\t\t\t\t\t\t\t\\\n+     1,\t   1,\t 1,    1,    1,\t   1,\t 1,    1,\t\t\t\\\n+     1,\t   1,\t 1,    1,    1,\t   1,\t 1,    1,\t\t\t\\\n+ /* reserved */\t\t\t\t\t\t\t\t\\\n+     1,    1,    1,    1,    1,    1,    1,    1,\t\t\t\\\n+     1,    1,    1,    1,    1,    1,    1,    1,\t\t\t\\\n+     1,    1,    1,    1,    1,    1,    1,    1,\t\t\t\\\n+     1,    1,    1,    1,    1,    1,    1,    1,\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+     1,    1,    1,    1,    1,    1,    1,    1,\t\t\t\\\n+     1,    1,    1,    1,    1,    1,    1,    1,\t\t\t\\\n+     1,    1,    1,    1,    1,    1,    1,    1,\t\t\t\\\n+     1,    1,    1,    1,    1,    1,    1,    1,\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+     1,    1,    1,    1,    1,    1,    1,    1,\t\t\t\\\n+     1,    1,    1,    1,    1,    1,    1,    1,\t\t\t\\\n+     1,    1,    1,    1,    1,    1,    1,    1,\t\t\t\\\n+     1,    1,    1,    1,    1,    1,    1,    1,\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+     1,    1,    1\t\t\t\t\t\t\t\\\n }\n \n #define REGISTER_NAMES\t\t\t\t\t\t\t\\\n@@ -510,7 +574,37 @@ typedef struct\n   \"vr0\", \"vr1\", \"vr2\",\t\"vr3\",\t\"vr4\",\t\"vr5\",\t\"vr6\",\t\"vr7\",\t\t\\\n   \"vr8\", \"vr9\", \"vr10\", \"vr11\", \"vr12\", \"vr13\", \"vr14\", \"vr15\",\t\t\\\n   \"reserved\", \"reserved\",\t\t\t\t\t\t\\\n-  \"epc\"\t\t\t\t\t\t\t\t\t\\\n+  \"epc\",\t\t\t\t\t\t\t\t\\\n+  /* V registers: 71~86 */\t\t\t\t\t\t\\\n+  \"vr16\", \"vr17\", \"vr18\", \"vr19\", \"vr20\", \"vr21\", \"vr22\", \"vr23\",\t\\\n+  \"vr24\", \"vr25\", \"vr26\", \"vr27\", \"vr28\", \"vr29\", \"vr30\", \"vr31\",\t\\\n+  \"reserved\", \"reserved\", \"reserved\", \"reserved\", \"reserved\",\t\t\\\n+  \"reserved\", \"reserved\", \"reserved\", \"reserved\", \"reserved\",\t\t\\\n+  \"reserved\", \"reserved\", \"reserved\", \"reserved\", \"reserved\",\t\t\\\n+  \"reserved\",\t\t\t\t\t\t\t\t\\\n+  /* reserved: 87~201*/\t\t\t\t\t\t\t\\\n+  \"reserved\", \"reserved\", \"reserved\", \"reserved\", \"reserved\",\t\t\\\n+  \"reserved\", \"reserved\", \"reserved\", \"reserved\", \"reserved\",\t\t\\\n+  \"reserved\", \"reserved\", \"reserved\", \"reserved\", \"reserved\",\t\t\\\n+  \"reserved\", \"reserved\", \"reserved\", \"reserved\", \"reserved\",\t\t\\\n+  \"reserved\", \"reserved\", \"reserved\", \"reserved\", \"reserved\",\t\t\\\n+  \"reserved\", \"reserved\", \"reserved\", \"reserved\", \"reserved\",\t\t\\\n+  \"reserved\", \"reserved\",\t\t\t\t\t\t\\\n+  \"reserved\", \"reserved\", \"reserved\", \"reserved\", \"reserved\",\t\t\\\n+  \"reserved\", \"reserved\", \"reserved\", \"reserved\", \"reserved\",\t\t\\\n+  \"reserved\", \"reserved\", \"reserved\", \"reserved\", \"reserved\",\t\t\\\n+  \"reserved\", \"reserved\", \"reserved\", \"reserved\", \"reserved\",\t\t\\\n+  \"reserved\", \"reserved\", \"reserved\", \"reserved\", \"reserved\",\t\t\\\n+  \"reserved\", \"reserved\", \"reserved\", \"reserved\", \"reserved\",\t\t\\\n+  \"reserved\", \"reserved\",\t\t\t\t\t\t\\\n+  \"reserved\", \"reserved\", \"reserved\", \"reserved\", \"reserved\",\t\t\\\n+  \"reserved\", \"reserved\", \"reserved\", \"reserved\", \"reserved\",\t\t\\\n+  \"reserved\", \"reserved\", \"reserved\", \"reserved\", \"reserved\",\t\t\\\n+  \"reserved\", \"reserved\", \"reserved\", \"reserved\", \"reserved\",\t\t\\\n+  \"reserved\", \"reserved\", \"reserved\", \"reserved\", \"reserved\",\t\t\\\n+  \"reserved\", \"reserved\", \"reserved\", \"reserved\", \"reserved\",\t\t\\\n+  \"reserved\", \"reserved\",\t\t\t\t\t\t\\\n+  \"reserved\", \"reserved\", \"reserved\"\t\t\t\t\t\\\n }\n \n /* Table of additional register names to use in user input.  */\n@@ -569,9 +663,16 @@ typedef struct\n      52,   53,\t 54,   55,   56,   57,\t 58,   59,\t\t\\\n /*  vr8\t  vr9\tvr10  vr11  vr12  vr13\tvr14  vr15 */\t\t\\\n      60,   61,\t 62,   63,   64,   65,\t 66,   67,\t\t\\\n+/*  vr16  vr17  vr18  vr18  vr20  vr21\tvr22  vr23 */\t\t\\\n+     71,   72,\t 73,   74,   75,   76,\t 77,   78,\t\t\\\n+/*  vr24  vr25\tvr26  vr27  vr28  vr28\tvr30  vr31 */\t\t\\\n+     79,   80,\t 81,   82,   83,   84,\t 85,   86,\t\t\\\n /*  reserved  */\t\t\t\t\t\t\\\n      36,   37,\t 38,   39,   40,   41,\t 42,   43,\t\t\\\n      44,   45,\t 46,   47,   48,   49,\t 50,   51,\t\t\\\n+/*  reserved  */\t\t\t\t\t\t\\\n+     87,   88,\t 89,   90,   91,   92,\t 93,   94,\t\t\\\n+     95,   96,\t 97,   98,   99,   100,  101,  102,\t\t\\\n /*  sp\t  tls\treserved     c\t   reserved\t    epc */\t\\\n      14,   31,\t 32,\t     33,   68,\t 69,\t     70\t }\n \n@@ -616,21 +717,34 @@ enum reg_class\n \n /* Define which registers fit in which classes.  This is an initializer\n    for a vector of HARD_REG_SET of length N_REG_CLASSES.  */\n-#define REG_CLASS_CONTENTS\t\t\t\t\t     \\\n-{\t\t\t\t\t\t\t\t     \\\n-  {0x00000000, 0x00000000, 0x00000000 },  /* NO_REGS\t       */    \\\n-  {0x000000FF, 0x00000000, 0x00000000 },  /* MINI_REGS\t       */    \\\n-  {0x00004000, 0x00000000, 0x00000000 },  /* SP_REGS\t       */    \\\n-  {0x0000FFFF, 0x00000000, 0x00000000 },  /* LOW_REGS\t       */    \\\n-  {0xFFFFFFFF, 0x00000000, 0x00000000 },  /* GENERAL_REGS      */    \\\n-  {0x00000000, 0x00000002, 0x00000000 },  /* C_REGS\t       */    \\\n-  {0x00000000, 0x00000004, 0x00000000 },  /* HI_REG\t       */    \\\n-  {0x00000000, 0x00000008, 0x00000000 },  /* LO_REG\t       */    \\\n-  {0x00000000, 0x0000000c, 0x00000000 },  /* HILO_REGS\t       */    \\\n-  {0x00000000, 0xFFF00000, 0x0000000F },  /* V_REGS\t       */    \\\n-  {0x00000000, 0x00000000, 0x00000040 },  /* OTHER_REGS\t       */    \\\n-  {0x00000000, 0x0FF00001, 0x00000030 },  /* RESERVE_REGS      */    \\\n-  {0xFFFFFFFF, 0xFFFFFFFF, 0x0000007F },  /* ALL_REGS\t       */    \\\n+#define REG_CLASS_CONTENTS\t\t\t\t\t\t      \\\n+{\t\t\t\t\t\t\t\t\t      \\\n+  {0x00000000, 0x00000000, 0x00000000, 0x00000000,\t\t\t      \\\n+   0x00000000, 0x00000000, 0x00000000},\t\t\t/* NO_REGS\t */   \\\n+  {0x000000FF, 0x00000000, 0x00000000, 0x00000000,\t\t\t      \\\n+   0x00000000, 0x00000000, 0x00000000},\t\t\t/* MINI_REGS     */   \\\n+  {0x00004000, 0x00000000, 0x00000000, 0x00000000,\t\t\t      \\\n+   0x00000000, 0x00000000, 0x00000000},\t\t\t/* SP_REGS\t */   \\\n+  {0x0000FFFF, 0x00000000, 0x00000000, 0x00000000,\t\t\t      \\\n+   0x00000000, 0x00000000, 0x00000000},\t\t\t/* LOW_REGS      */   \\\n+  {0xFFFFFFFF, 0x00000000, 0x00000000, 0x00000000,\t\t\t      \\\n+   0x00000000, 0x00000000, 0x00000000},\t\t\t/* GENERAL_REGS  */   \\\n+  {0x00000000, 0x00000002, 0x00000000, 0x00000000,\t\t\t      \\\n+   0x00000000, 0x00000000, 0x00000000},\t\t\t/* C_REGS\t */   \\\n+  {0x00000000, 0x00000004, 0x00000000, 0x00000000,\t\t\t      \\\n+   0x00000000, 0x00000000, 0x00000000},\t\t\t/* HI_REG\t */   \\\n+  {0x00000000, 0x00000008, 0x00000000, 0x00000000,\t\t\t      \\\n+   0x00000000, 0x00000000, 0x00000000},\t\t\t/* LO_REG\t */   \\\n+  {0x00000000, 0x0000000c, 0x00000000, 0x00000000,\t\t\t      \\\n+   0x00000000, 0x00000000, 0x00000000},\t\t\t/* HILO_REGS     */   \\\n+  {0x00000000, 0xFFF00000, 0x007FFF8F, 0x00000000,\t\t\t      \\\n+   0x00000000, 0x00000000, 0x00000000},\t\t\t/* V_REGS\t */   \\\n+  {0x00000000, 0x00000000, 0x00000040, 0x00000000,\t\t\t      \\\n+   0x00000000, 0x00000000, 0x00000000},\t\t\t/* OTHER_REGS    */   \\\n+  {0x00000000, 0x000FFFF1, 0xFF800030, 0xFFFFFFFF,\t\t\t      \\\n+   0xFFFFFFFF, 0xFFFFFFFF, 0x000003FF},\t\t\t/* RESERVE_REGS  */   \\\n+  {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,\t\t\t      \\\n+   0xFFFFFFFF, 0xFFFFFFFF, 0x000003FF},\t\t\t/* ALL_REGS      */   \\\n }\n \n /* Return register class from regno.  */"}, {"sha": "c27d627e183099dafdf7a48bb1c2c64aff2dcb24", "filename": "gcc/config/csky/csky.md", "status": "modified", "additions": 32, "deletions": 95, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Fcsky.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Fcsky.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky.md?ref=db92bd223e3957ee58b5a0c0fffd8b7766f1def3", "patch": "@@ -32,6 +32,8 @@\n    (CSKY_FIRST_RET_REGNUM\t\t0)\n    (CSKY_FIRST_VFP_REGNUM\t\t52)\n    (CSKY_LAST_VFP_REGNUM\t\t67)\n+   (CSKY_FIRST_VFP3_REGNUM\t\t71)\n+   (CSKY_LAST_VFP3_REGNUM\t\t86)\n    (CSKY_FIRST_HIGH_REGNUM\t\t16)\n    (CSKY_LAST_HIGH_REGNUM\t\t31)\n    (CSKY_FIRST_MINI_REGNUM\t\t0)\n@@ -423,85 +425,6 @@\n    (set_attr \"type\" \"alu,alu,alu,load,load,store\")]\n )\n \n-;; Float mov instructions.\n-\n-(define_expand \"movsf\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"\")\n-\t(match_operand:SF 1 \"general_operand\" \"\"))]\n-  \"\"\n-  \"\n-  if (GET_CODE (operands[0]) == MEM && can_create_pseudo_p ())\n-    operands[1] = force_reg (SFmode, operands[1]);\n-  \"\n-)\n-\n-;; FIXME: maybe the vreg load/stores should have their own type attr.\n-(define_insn \"*csky_movsf_fpv2\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=b,r,v,r,r,r, m,Q,v,v,v\")\n-\t(match_operand:SF 1 \"general_operand\"\t   \" b,r,r,v,m,mF,r,v,Q,v,m\"))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"* return csky_output_move (insn, operands, SFmode);\"\n-  [(set_attr \"length\" \"2,4,4,4,4,4,4,4,4,4,4\")\n-   (set_attr \"type\" \"alu,alu,alu,alu,load,load,store,alu,alu,alu,alu\")]\n-)\n-\n-(define_insn \"*ck801_movsf\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=r,r,r, m\")\n-\t(match_operand:SF 1 \"general_operand\"\t   \" r,m,mF,r\"))]\n-  \"CSKY_ISA_FEATURE (E1)\"\n-  \"* return csky_output_ck801_move (insn, operands, SFmode);\"\n-  [(set_attr \"length\" \"2,4,4,4\")\n-   (set_attr \"type\" \"alu,load,load,store\")]\n-)\n-\n-(define_insn \"*csky_movsf\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=b,r,r,r, m\")\n-\t(match_operand:SF 1 \"general_operand\"\t   \" b,r,m,mF,r\"))]\n-  \"CSKY_ISA_FEATURE (E2) && !CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"* return csky_output_move (insn, operands, SFmode);\"\n- [(set_attr \"length\" \"2,4,4,4,4\")\n-  (set_attr \"type\" \"alu,alu,load,load,store\")]\n-)\n-\n-\n-(define_expand \"movdf\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"\")\n-\t(match_operand:DF 1 \"general_operand\" \"\"))]\n-  \"\"\n-  \"\n-  if (GET_CODE (operands[0]) == MEM && can_create_pseudo_p ())\n-      operands[1] = force_reg (DFmode, operands[1]);\n-  \"\n-)\n-\n-;; FIXME: maybe the vreg load/stores should have their own type attr.\n-(define_insn \"*csky_movdf_fpv2\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=b,r,v,r,r,r, m,Q,v,v,v\")\n-\t(match_operand:DF 1 \"general_operand\"\t    \"b,r,r,v,m,mF,r,v,Q,v,m\"))]\n-  \"CSKY_ISA_FEATURE (fpv2_df)\"\n-  \"* return csky_output_movedouble (operands, DFmode);\"\n-  [(set_attr \"length\" \"4,8,8,8,8,8,8,8,8,8,8\")\n-   (set_attr \"type\" \"alu,alu,alu,alu,load,load,store,alu,alu,alu,alu\")]\n-)\n-\n-(define_insn \"*ck801_movdf\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=r,r,r, m\")\n-\t(match_operand:DF 1 \"general_operand\"\t   \" r,m,mF,r\"))]\n-  \"CSKY_ISA_FEATURE (E1)\"\n-  \"* return csky_output_ck801_movedouble (operands, DFmode);\"\n-  [(set_attr \"length\" \"4,8,8,8\")\n-   (set_attr \"type\" \"alu,load,load,store\")]\n-)\n-\n-(define_insn \"*csky_movdf\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=b,r,r,r, m\")\n-\t(match_operand:DF 1 \"general_operand\"\t   \" b,r,m,mF,r\"))]\n-  \"CSKY_ISA_FEATURE (E2) && !CSKY_ISA_FEATURE (fpv2_df)\"\n-  \"* return csky_output_movedouble (operands, DFmode);\"\n- [(set_attr \"length\" \"4,8,8,8,8\")\n-  (set_attr \"type\" \"alu,alu,load,load,store\")]\n-)\n-\n ;; The only CCmode move supported is a nop.  Without this pattern,\n ;; CSE is unable to eliminate redundant comparisons in conditional\n ;; execution expressions.\n@@ -522,7 +445,7 @@\n \n (define_expand \"movsicc\"\n   [(set (match_operand 0 \"register_operand\" \"\")\n-\t(if_then_else:SI (match_operand\t   1 \"ordered_comparison_operator\" \"\")\n+\t(if_then_else:SI (match_operand\t   1 \"comparison_operator\" \"\")\n \t\t\t (match_operand:SI 2 \"register_operand\" \"\")\n \t\t\t (match_operand:SI 3 \"register_operand\" \"\")))]\n   \"CSKY_ISA_FEATURE (E2)\"\n@@ -1321,7 +1244,7 @@\n \n (define_expand \"addsicc\"\n   [(match_operand:SI 0 \"register_operand\" \"\")\n-   (match_operand    1 \"ordered_comparison_operator\" \"\")\n+   (match_operand    1 \"comparison_operator\" \"\")\n    (match_operand:SI 2 \"register_operand\" \"\")\n    (match_operand:SI 3 \"csky_literal_K_Uh_operand\" \"\")]\n   \"CSKY_ISA_FEATURE (E2)\"\n@@ -3316,9 +3239,9 @@\n \n (define_expand \"untyped_call\"\n   [(parallel [(call (match_operand 0 \"\" \"\")\n-        (const_int 0))\n-        (match_operand 1 \"\" \"\")\n-        (match_operand 2 \"\" \"\")])]\n+\t(const_int 0))\n+\t(match_operand 1 \"\" \"\")\n+\t(match_operand 2 \"\" \"\")])]\n   \"\"\n {\n   int i;\n@@ -3349,11 +3272,25 @@\n   \"\"\n   [(set_attr \"length\" \"0\")])\n \n-(define_insn \"*call_value_internal_vs\"\n-  [(set (match_operand:SF               0 \"register_operand\"          \"=v,v,v\")\n+(define_insn \"*call_value_internal_vh\"\n+  [(set (match_operand:HF               0 \"register_operand\"          \"=v,v,v\")\n         (call (mem:SI (match_operand:SI 1 \"csky_call_address_operand\" \"b, r,S\"))\n               (match_operand 2 \"\" \"\")))\n    (clobber (reg:SI CSKY_LR_REGNUM))]\n+  \"TARGET_HARD_FLOAT_ABI && CSKY_ISA_FEATURE (fpv3_hf)\"\n+  \"@\n+    jsr\\t%1\n+    jsr\\t%1\n+    jbsr\\t%1\"\n+  [(set_attr \"length\" \"2,4,4\")\n+   (set_attr \"type\"   \"call_jsr,call_jsr,call\")]\n+)\n+\n+(define_insn \"*call_value_internal_vs\"\n+  [(set (match_operand:SF\t       0 \"register_operand\"\t  \"=v,v,v\")\n+\t(call (mem:SI (match_operand:SI 1 \"csky_call_address_operand\" \"b, r,S\"))\n+\t      (match_operand 2 \"\" \"\")))\n+   (clobber (reg:SI CSKY_LR_REGNUM))]\n   \"TARGET_HARD_FLOAT_ABI\"\n   \"@\n     jsr\\t%1\n@@ -3364,9 +3301,9 @@\n )\n \n (define_insn \"*call_value_internal_vd\"\n-  [(set (match_operand:DF               0 \"register_operand\"          \"=v,v,v\")\n-        (call (mem:SI (match_operand:SI 1 \"csky_call_address_operand\" \"b, r,S\"))\n-              (match_operand 2 \"\" \"\")))\n+  [(set (match_operand:DF\t       0 \"register_operand\"\t  \"=v,v,v\")\n+\t(call (mem:SI (match_operand:SI 1 \"csky_call_address_operand\" \"b, r,S\"))\n+\t      (match_operand 2 \"\" \"\")))\n    (clobber (reg:SI CSKY_LR_REGNUM))]\n   \"TARGET_HARD_FLOAT_ABI && TARGET_DOUBLE_FPU\"\n   \"@\n@@ -3378,18 +3315,18 @@\n )\n \n (define_insn \"*call_value_internal_pic_vs\"\n-  [(set (match_operand:SF               0 \"register_operand\"    \"=v\")\n-        (call (mem:SI (match_operand:SI 1 \"csky_unspec_operand\" \"X\"))\n-                      (match_operand    2 \"\" \"\")))\n+  [(set (match_operand:SF\t       0 \"register_operand\"    \"=v\")\n+\t(call (mem:SI (match_operand:SI 1 \"csky_unspec_operand\" \"X\"))\n+\t\t      (match_operand    2 \"\" \"\")))\n    (clobber (reg:SI CSKY_LR_REGNUM))]\n   \"flag_pic && TARGET_HARD_FLOAT_ABI\"\n   \"* return csky_output_call (operands, 1);\"\n )\n \n (define_insn \"*call_value_internal_pic_vd\"\n-  [(set (match_operand:DF               0 \"register_operand\"    \"=v\")\n-        (call (mem:SI (match_operand:SI 1 \"csky_unspec_operand\" \"X\"))\n-                      (match_operand    2 \"\" \"\")))\n+  [(set (match_operand:DF\t       0 \"register_operand\"    \"=v\")\n+\t(call (mem:SI (match_operand:SI 1 \"csky_unspec_operand\" \"X\"))\n+\t\t      (match_operand    2 \"\" \"\")))\n    (clobber (reg:SI CSKY_LR_REGNUM))]\n   \"flag_pic && TARGET_HARD_FLOAT_ABI && TARGET_DOUBLE_FPU\"\n   \"* return csky_output_call (operands, 1);\""}, {"sha": "fcf42a4e08273b1a708eae505a9c3be3c910db88", "filename": "gcc/config/csky/csky_cores.def", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Fcsky_cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Fcsky_cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky_cores.def?ref=db92bd223e3957ee58b5a0c0fffd8b7766f1def3", "patch": "@@ -38,6 +38,8 @@ CSKY_ARCH (\"ck807\",  ck807,  CK807,\n \t   CSKY_ISA_FEAT (CSKY_ISA_CK807) CSKY_ISA_FEAT (CSKY_ISA_DSP))\n CSKY_ARCH (\"ck810\",  ck810,  CK810,\n \t   CSKY_ISA_FEAT (CSKY_ISA_CK810) CSKY_ISA_FEAT (CSKY_ISA_DSP))\n+CSKY_ARCH (\"ck860\",  ck860,  CK860,\n+\t   CSKY_ISA_FEAT (CSKY_ISA_CK860))\n #endif\n \n \n@@ -181,6 +183,12 @@ CSKY_CORE (\"ck810ft\",  ck810ff,\t ck810ft,  CK810,\n \t   CSKY_ISA_FEAT_NONE)\n CSKY_CORE (\"ck810ftv\", ck810ftv, ck810ftv, CK810,\n \t   CSKY_ISA_FEAT_NONE)\n+\n+/* ck860 Architecture Processors */\n+CSKY_CORE(\"ck860\",    ck860,    ck860,    CK860,\n+\t  CSKY_ISA_FEAT_NONE)\n+CSKY_CORE(\"ck860f\",   ck860f,   ck860f,   CK860,\n+\t  CSKY_ISA_FEAT_NONE)\n #endif\n \n \n@@ -196,4 +204,9 @@ CSKY_CORE (\"ck810ftv\", ck810ftv, ck810ftv, CK810,\n CSKY_FPU (\"fpv2_sf\",   fpv2_sf,\t  CSKY_ISA_FEAT (CSKY_ISA_FPv2_SF))\n CSKY_FPU (\"fpv2\",      fpv2,\t  CSKY_ISA_FEAT (CSKY_ISA_FPv2))\n CSKY_FPU (\"fpv2_divd\", fpv2_divd, CSKY_ISA_FEAT (CSKY_ISA_FPv2_DIVD))\n+\n+CSKY_FPU (\"fpv3_hf\",   fpv3_hf,   CSKY_ISA_FEAT (CSKY_ISA_FPv3_HF))\n+CSKY_FPU (\"fpv3_hsf\",  fpv3_hsf,  CSKY_ISA_FEAT (CSKY_ISA_FPv3_HSF))\n+CSKY_FPU (\"fpv3_sdf\",  fpv3_sdf,  CSKY_ISA_FEAT (CSKY_ISA_FPv3_SDF))\n+CSKY_FPU (\"fpv3\",      fpv3,      CSKY_ISA_FEAT (CSKY_ISA_FPv3))\n #endif"}, {"sha": "e0d01ab1d962dcde26d489c315b3a71f73ba692b", "filename": "gcc/config/csky/csky_insn_fpu.md", "status": "modified", "additions": 327, "deletions": 471, "changes": 798, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Fcsky_insn_fpu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Fcsky_insn_fpu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky_insn_fpu.md?ref=db92bd223e3957ee58b5a0c0fffd8b7766f1def3", "patch": "@@ -18,550 +18,406 @@\n ;; along with GCC; see the file COPYING3.  If not see\n ;; <http://www.gnu.org/licenses/>.  */\n \n-;; -------------------------------------------------------------------------\n-;; Float Abs instructions\n-;; -------------------------------------------------------------------------\n+(define_c_enum \"unspec\" [\n+  UNSPEC_FLOOR\n+  UNSPEC_CEIL\n+  UNSPEC_BTRUNC\n+  UNSPEC_RINT\n+])\n \n-(define_insn \"abssf2\"\n-  [(set (match_operand:SF\t  0 \"register_operand\" \"=v,r\")\n-\t(abs:SF (match_operand:SF 1 \"register_operand\" \"v, r\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"@\n-    fabss\\t%0, %1\n-    bclri\\t%0, %1, 31\")\n+(define_c_enum \"unspecv\" [\n+  VUNSPEC_GET_FCR     ; Represent fetch of FCR content.\n+  VUNSPEC_SET_FCR     ; Represent assign of FCR content.\n+  VUNSPEC_INS_FCR     ; Represent insert of FCR content.\n+])\n \n-(define_insn \"absdf2\"\n-  [(set (match_operand:DF\t  0 \"register_operand\" \"=v\")\n-\t(abs:DF (match_operand:DF 1 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_df)\"\n-  \"fabsd\\t%0, %1\")\n+(define_mode_iterator F3ANY [HF SF DF])\n+(define_mode_attr f3t [(HF \"16\") (SF \"32\") (DF \"64\")])\n \n+(define_mode_iterator SFDF [SF DF])\n+(define_mode_attr f2t [(SF \"32\") (DF \"64\")])\n \n-;; -------------------------------------------------------------------------\n-;; Float Neg instructions\n-;; -------------------------------------------------------------------------\n+(define_code_iterator FCMPZ [ne ge lt gt le])\n+(define_code_attr zero_inst [(ne \"nez\") (ge \"hsz\") (lt \"ltz\") (gt \"hz\") (le \"lsz\")])\n \n-(define_insn \"negsf2\"\n-  [(set (match_operand:SF\t  0 \"register_operand\" \"=v\")\n-\t(neg:SF (match_operand:SF 1 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"fnegs\\t%0, %1\")\n+(define_code_iterator FCMP [ne ge lt])\n+(define_code_attr reg_inst [(ne \"ne\") (ge \"hs\") (lt \"lt\")])\n \n-(define_insn \"negdf2\"\n-  [(set (match_operand:DF\t  0 \"register_operand\" \"=v\")\n-\t(neg:DF (match_operand:DF 1 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_df)\"\n-  \"fnegd\\t%0, %1\")\n+(define_code_iterator FIX_SU [fix unsigned_fix])\n+(define_code_attr fixsuop [(fix \"\")  (unsigned_fix \"uns\")])\n+(define_code_attr fixsu   [(fix \"s\") (unsigned_fix \"u\")])\n \n+(define_code_iterator FLOAT_SU [float unsigned_float])\n+(define_code_attr floatsuop [(float \"\")  (unsigned_float \"uns\")])\n+(define_code_attr floatsu   [(float \"s\") (unsigned_float \"u\")])\n \n-;; -------------------------------------------------------------------------\n-;; Float Sqrt instructions\n-;; -------------------------------------------------------------------------\n+(define_int_iterator FRM  [UNSPEC_FLOOR\n+\t\t\t   UNSPEC_CEIL UNSPEC_RINT])\n \n-(define_insn \"sqrtsf2\"\n-  [(set (match_operand:SF\t   0 \"register_operand\" \"=v\")\n-\t(sqrt:SF (match_operand:SF 1 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"fsqrts\\t%0, %1\")\n+(define_int_iterator FRMF [UNSPEC_FLOOR\n+\t\t\t   UNSPEC_CEIL UNSPEC_BTRUNC])\n \n-(define_insn \"sqrtdf2\"\n-  [(set (match_operand:DF\t   0 \"register_operand\" \"=v\")\n-\t(sqrt:DF (match_operand:DF 1 \"register_operand\" \"v\")))]\n- \"CSKY_ISA_FEATURE (fpv2_divd)\"\n- \"fsqrtd\\t%0, %1\")\n+(define_int_attr frm_pattern [(UNSPEC_FLOOR \"floor\")\n+\t\t\t      (UNSPEC_CEIL \"ceil\")   (UNSPEC_BTRUNC \"btrunc\")\n+\t\t\t      (UNSPEC_RINT \"rint\")])\n+\n+(define_int_attr rm [(UNSPEC_FLOOR \".rni\")\n+\t\t     (UNSPEC_CEIL \".rpi\")  (UNSPEC_BTRUNC \".rz\")\n+\t\t     (UNSPEC_RINT \"\")])\n \n \n ;; -------------------------------------------------------------------------\n-;; Float Add instructions\n+;; Float mov instructions\n ;; -------------------------------------------------------------------------\n \n-(define_insn \"addsf3\"\n-  [(set (match_operand:SF\t   0 \"register_operand\" \"=v\")\n-\t(plus:SF (match_operand:SF 1 \"register_operand\" \"v\")\n-\t\t (match_operand:SF 2 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"fadds\\t%0, %1, %2\")\n+(define_expand \"movhf\"\n+  [(set (match_operand:HF 0 \"general_operand\" \"\")\n+\t(match_operand:HF 1 \"general_operand\" \"\"))]\n+  \"CSKY_ISA_FEATURE(fpv3_hf)\"\n+  \"\n+  {\n+    if (GET_CODE(operands[0]) == MEM && can_create_pseudo_p ())\n+      {\n+\toperands[1] = force_reg (HFmode, operands[1]);\n+      }\n+  }\n+\")\n+\n+(define_expand \"mov<mode>\"\n+  [(set (match_operand:SFDF 0 \"general_operand\" \"\")\n+\t(match_operand:SFDF 1 \"general_operand\" \"\"))]\n+  \"CSKY_ISA_FEATURE(fpv2_<mode>)\n+   || CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"\n+  {\n+    if (GET_CODE(operands[0]) == MEM && can_create_pseudo_p ())\n+      {\n+\toperands[1] = force_reg (<MODE>mode, operands[1]);\n+      }\n+  }\n+\")\n+\n+;; Move float value with general register.\n+\n+(define_insn \"*e2_movsf\"\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=b,r,r,r, m\")\n+       (match_operand:SF 1 \"general_operand\"      \" b,r,m,mF,r\"))]\n+  \"CSKY_ISA_FEATURE (E2)\n+   && !CSKY_ISA_FEATURE (fpv2_sf)\n+   && !CSKY_ISA_FEATURE (fpv3_sf)\"\n+  \"* return csky_output_move (insn, operands, SFmode);\"\n+ [(set_attr \"length\" \"2,4,4,4,4\")\n+  (set_attr \"type\" \"alu,alu,load,load,store\")]\n+)\n+\n+(define_insn \"*e2_movdf\"\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=b,r,r,r, m\")\n+       (match_operand:DF 1 \"general_operand\"      \" b,r,m,mF,r\"))]\n+  \"CSKY_ISA_FEATURE (E2)\n+   && !CSKY_ISA_FEATURE (fpv2_df)\n+   && !CSKY_ISA_FEATURE (fpv3_df)\"\n+  \"* return csky_output_movedouble (operands, DFmode);\"\n+ [(set_attr \"length\" \"4,8,8,8,8\")\n+  (set_attr \"type\" \"alu,alu,load,load,store\")]\n+)\n \n-(define_insn \"adddf3\"\n-  [(set (match_operand:DF\t   0 \"register_operand\" \"=v\")\n-\t(plus:DF (match_operand:DF 1 \"register_operand\" \"v\")\n-\t\t (match_operand:DF 2 \"register_operand\" \"v\")))]\n- \"CSKY_ISA_FEATURE (fpv2_df)\"\n- \"faddd\\t%0, %1, %2\")\n+(define_insn \"*e1_movsf\"\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=r,r,r, m\")\n+\t(match_operand:SF 1 \"general_operand\"      \" r,m,mF,r\"))]\n+  \"CSKY_ISA_FEATURE (E1)\"\n+  \"* return csky_output_ck801_move (insn, operands, SFmode);\"\n+  [(set_attr \"length\" \"2,4,4,4\")\n+   (set_attr \"type\" \"alu,load,load,store\")]\n+)\n \n+(define_insn \"*e1_movdf\"\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=r,r,r, m\")\n+\t(match_operand:DF 1 \"general_operand\"      \" r,m,mF,r\"))]\n+  \"CSKY_ISA_FEATURE (E1)\"\n+  \"* return csky_output_ck801_movedouble (operands, DFmode);\"\n+  [(set_attr \"length\" \"4,8,8,8\")\n+   (set_attr \"type\" \"alu,load,load,store\")]\n+)\n \n ;; -------------------------------------------------------------------------\n-;; Float Sub instructions\n+;; Float Mul instructions\n ;; -------------------------------------------------------------------------\n \n-(define_insn \"subsf3\"\n-  [(set (match_operand:SF\t    0 \"register_operand\" \"=v\")\n-\t(minus:SF (match_operand:SF 1 \"register_operand\" \"v\")\n-\t\t  (match_operand:SF 2 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"fsubs\\t%0, %1, %2\")\n+(define_expand \"mulhf3\"\n+  [(set (match_operand:HF\t    0 \"register_operand\" \"=v\")\n+\t(mult:HF (match_operand:HF   1 \"register_operand\" \"v\")\n+\t\t (match_operand:HF   2 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE(fpv3_hf)\"\n+  \"\")\n \n-(define_insn \"subdf3\"\n-  [(set (match_operand:DF\t    0 \"register_operand\" \"=v\")\n-\t(minus:DF (match_operand:DF 1 \"register_operand\" \"v\")\n-\t\t  (match_operand:DF 2 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_df)\"\n-  \"fsubd\\t%0, %1, %2\")\n+(define_expand \"mul<mode>3\"\n+  [(set (match_operand:SFDF\t    0 \"register_operand\" \"=v\")\n+\t(mult:SFDF (match_operand:SFDF   1 \"register_operand\" \"v\")\n+\t\t (match_operand:SFDF   2 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE(fpv2_<mode>)\n+  || CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"\")\n \n+(define_expand \"fma<mode>4\"\n+  [(set (match_operand:F3ANY\t    0 \"register_operand\" \"=v\")\n+\t(fma:F3ANY (match_operand:F3ANY  1 \"register_operand\" \"v\")\n+\t\t   (match_operand:F3ANY  2 \"register_operand\" \"v\")\n+\t\t   (match_operand:F3ANY  3 \"register_operand\" \"0\")))]\n+  \"CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"\")\n \n ;; -------------------------------------------------------------------------\n-;; Float Mul instructions\n+;; Float ADD SUB NEG ABS instructions\n ;; -------------------------------------------------------------------------\n \n-(define_insn \"mulsf3\"\n-  [(set (match_operand:SF\t   0 \"register_operand\" \"=v\")\n-\t(mult:SF (match_operand:SF 1 \"register_operand\" \"v\")\n-\t\t (match_operand:SF 2 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"fmuls\\t%0, %1, %2\")\n-\n-(define_insn \"muldf3\"\n-  [(set (match_operand:DF\t   0 \"register_operand\" \"=v\")\n-\t(mult:DF (match_operand:DF 1 \"register_operand\" \"v\")\n-\t\t (match_operand:DF 2 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_df)\"\n-  \"fmuld\\t%0, %1, %2\")\n-\n-(define_insn \"*fpuv2_nmulsf3_1\"\n-  [(set (match_operand:SF\t\t   0 \"register_operand\" \"=v\")\n-\t(mult:SF (neg:SF (match_operand:SF 1 \"register_operand\" \"%v\"))\n-\t\t (match_operand:SF\t   2 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf) && !flag_rounding_math\"\n-  \"fnmuls\\t%0, %1, %2\")\n-\n-(define_insn \"*fpuv2_nmulsf3_2\"\n-  [(set (match_operand:SF\t\t   0 \"register_operand\" \"=v\")\n-\t(neg:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"v\")\n-\t\t\t (match_operand:SF 2 \"register_operand\" \"v\"))))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"fnmuls\\t%0, %1, %2\")\n-\n-(define_insn \"*fpuv2_nmuldf3_1\"\n-  [(set (match_operand:DF\t\t   0 \"register_operand\" \"=v\")\n-\t(mult:DF (neg:DF (match_operand:DF 1 \"register_operand\" \"%v\"))\n-\t\t (match_operand:DF\t   2 \"register_operand\" \"v\")))]\n- \"CSKY_ISA_FEATURE (fpv2_df) && !flag_rounding_math\"\n- \"fnmuld\\t%0, %1, %2\")\n-\n-(define_insn \"*fpuv2_nmuldf3_2\"\n-  [(set (match_operand:DF\t\t   0 \"register_operand\" \"=v\")\n-\t(neg:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"v\")\n-\t\t\t (match_operand:DF 2 \"register_operand\" \"v\"))))]\n-  \"CSKY_ISA_FEATURE (fpv2_df)\"\n-  \"fnmuld\\t%0, %1, %2\")\n+(define_expand \"addhf3\"\n+  [(set (match_operand:HF\t   0 \"register_operand\" \"\")\n+\t(plus:HF (match_operand:HF  1 \"register_operand\" \"\")\n+\t\t (match_operand:HF  2 \"register_operand\" \"\")))]\n+  \"CSKY_ISA_FEATURE(fpv3_hf)\"\n+  \"\"\n+)\n+\n+(define_expand \"add<mode>3\"\n+  [(set (match_operand:SFDF\t     0 \"register_operand\" \"\")\n+\t(plus:SFDF (match_operand:SFDF  1 \"register_operand\" \"\")\n+\t\t   (match_operand:SFDF  2 \"register_operand\" \"\")))]\n+  \"CSKY_ISA_FEATURE(fpv2_<mode>) || CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"\"\n+)\n \n+(define_expand \"subhf3\"\n+  [(set (match_operand:HF\t    0 \"register_operand\" \"\")\n+\t(minus:HF (match_operand:HF  1 \"register_operand\" \"\")\n+\t\t  (match_operand:HF  2 \"register_operand\" \"\")))]\n+  \"CSKY_ISA_FEATURE(fpv3_hf)\"\n+  \"\"\n+)\n \n-;; -------------------------------------------------------------------------\n-;; Float Div instructions\n-;; -------------------------------------------------------------------------\n+(define_expand \"sub<mode>3\"\n+  [(set (match_operand:SFDF\t      0 \"register_operand\" \"\")\n+\t(minus:SFDF (match_operand:SFDF  1 \"register_operand\" \"\")\n+\t\t    (match_operand:SFDF  2 \"register_operand\" \"\")))]\n+  \"CSKY_ISA_FEATURE(fpv2_<mode>) || CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"\"\n+)\n \n-(define_expand \"divsf3\"\n-  [(set (match_operand:SF\t  0 \"register_operand\" \"\")\n-\t(div:SF (match_operand:SF 1 \"csky_arith_float1_operand\" \"\")\n-\t\t(match_operand:SF 2 \"register_operand\" \"\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"\")\n+(define_expand \"abshf2\"\n+  [(set (match_operand:HF\t   0 \"register_operand\" \"\")\n+\t(abs:HF (match_operand:HF   1 \"register_operand\" \"\")))]\n+  \"CSKY_ISA_FEATURE(fpv3_hf)\"\n+  \"\"\n+)\n \n-(define_insn \"*fpuv2_divsf3\"\n-  [(set (match_operand:SF\t  0 \"register_operand\" \"=v\")\n-\t(div:SF (match_operand:SF 1 \"register_operand\" \"v\")\n-\t\t(match_operand:SF 2 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"fdivs\\t%0, %1, %2\")\n-\n-(define_insn \"*fpuv2_1_divsf3\"\n-  [(set (match_operand:SF\t  0 \"register_operand\"\t\t\"=v\")\n-\t(div:SF (match_operand:SF 1 \"csky_const_float1_operand\" \"i\")\n-\t\t(match_operand:SF 2 \"register_operand\"\t\t\"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"frecips\\t%0, %2\")\n-\n-\n-(define_expand \"divdf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t(div:DF (match_operand:DF 1 \"csky_arith_float1_operand\" \"\")\n-\t\t(match_operand:DF 2 \"register_operand\" \"\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_divd)\"\n-  \"\")\n+(define_expand \"abs<mode>2\"\n+  [(set (match_operand:SFDF\t     0 \"register_operand\" \"\")\n+\t(abs:SFDF (match_operand:SFDF   1 \"register_operand\" \"\")))]\n+  \"CSKY_ISA_FEATURE(fpv2_<mode>) || CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"\"\n+)\n \n-(define_insn \"*fpuv2_divdf3\"\n-  [(set (match_operand:DF\t  0 \"register_operand\" \"=v\")\n-\t(div:DF (match_operand:DF 1 \"register_operand\" \"v\")\n-\t\t(match_operand:DF 2 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_divd)\"\n-  \"fdivd\\t%0, %1, %2\")\n+(define_expand \"neghf2\"\n+  [(set (match_operand:HF\t   0 \"register_operand\" \"\")\n+\t(neg:HF (match_operand:HF   1 \"register_operand\" \"\")))]\n+  \"CSKY_ISA_FEATURE(fpv3_hf)\"\n+  \"\"\n+)\n \n-(define_insn \"*fpuv2_1_divdf3\"\n-  [(set (match_operand:DF\t  0 \"register_operand\"\t\t\"=v\")\n-\t(div:DF (match_operand:DF 1 \"csky_const_float1_operand\" \"i\")\n-\t\t(match_operand:DF 2 \"register_operand\"\t\t\"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_divd)\"\n-  \"frecipd\\t%0, %2\")\n+(define_expand \"neg<mode>2\"\n+  [(set (match_operand:SFDF\t   0 \"register_operand\" \"\")\n+\t(neg:SFDF (match_operand:SFDF 1 \"register_operand\" \"\")))]\n+  \"CSKY_ISA_FEATURE(fpv2_<mode>) || CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"\"\n+)\n \n+(define_expand \"sqrthf2\"\n+  [(set (match_operand:HF\t   0 \"register_operand\" \"\")\n+\t(sqrt:HF (match_operand:HF  1 \"register_operand\" \"\")))]\n+  \"CSKY_ISA_FEATURE(fpv3_hf)\"\n+  \"\"\n+)\n+\n+(define_expand \"sqrt<mode>2\"\n+  [(set (match_operand:SFDF\t    0 \"register_operand\" \"\")\n+\t(sqrt:SFDF (match_operand:SFDF 1 \"register_operand\" \"\")))]\n+  \"CSKY_ISA_FEATURE(fpv2_<mode>) || CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"\"\n+)\n \n ;; -------------------------------------------------------------------------\n-;; Float add(sub) with mult instructions\n+;; Float div instructions\n ;; -------------------------------------------------------------------------\n \n-;; vrz <= vrz + vrx * vry\n-(define_insn \"*fpuv2_fmacs\"\n-  [(set (match_operand:SF\t\t    0 \"register_operand\" \"=v\")\n-\t(plus:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"v\")\n-\t\t\t  (match_operand:SF 2 \"register_operand\" \"v\"))\n-\t\t (match_operand:SF\t    3 \"register_operand\" \"0\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"fmacs\\t%0, %1, %2\")\n-\n-(define_insn \"*fpuv2_fmacd\"\n-  [(set (match_operand:DF\t\t    0 \"register_operand\" \"=v\")\n-\t(plus:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"v\")\n-\t\t\t  (match_operand:DF 2 \"register_operand\" \"v\"))\n-\t\t (match_operand:DF\t    3 \"register_operand\" \"0\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_df)\"\n-  \"fmacd\\t%0, %1, %2\")\n-\n-;; vrz <= vrz - vrx * vry\n-(define_insn \"*fpuv2_fnmacs\"\n-  [(set (match_operand:SF\t\t     0 \"register_operand\" \"=v\")\n-\t(minus:SF (match_operand:SF\t     1 \"register_operand\" \"0\")\n-\t\t  (mult:SF (match_operand:SF 2 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:SF 3 \"register_operand\" \"v\"))))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"fnmacs\\t%0, %2, %3\")\n-\n-(define_insn \"*fpuv2_fnmacd\"\n-  [(set (match_operand:DF\t\t     0 \"register_operand\" \"=v\")\n-\t(minus:DF (match_operand:DF\t     1 \"register_operand\" \"0\")\n-\t\t  (mult:DF (match_operand:DF 2 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:DF 3 \"register_operand\" \"v\"))))]\n-  \"CSKY_ISA_FEATURE (fpv2_df)\"\n-  \"fnmacd\\t%0, %2, %3\")\n-\n-;; vrz <= vrx * vry - vrz\n-(define_insn \"*fpuv2_fmscs\"\n-  [(set (match_operand:SF\t\t     0 \"register_operand\" \"=v\")\n-\t(minus:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:SF 2 \"register_operand\" \"v\"))\n-\t\t  (match_operand:SF\t     3 \"register_operand\" \"0\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"fmscs\\t%0, %1, %2\")\n-\n-(define_insn \"*fpuv2_fmscd\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=v\")\n-\t(minus:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:DF 2 \"register_operand\" \"v\"))\n-\t\t  (match_operand:DF 3 \"register_operand\" \"0\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_df)\"\n-  \"fmscd\\t%0, %1, %2\")\n-\n-;; vrz = - (vrz + vrx * vry)\n-(define_insn \"*fpuv2_fnmscs_1\"\n-  [(set (match_operand:SF\t\t\t     0 \"register_operand\" \"=v\")\n-\t(minus:SF (mult:SF (neg:SF (match_operand:SF 1 \"register_operand\" \"%v\"))\n-\t\t\t   (match_operand:SF\t     2 \"register_operand\" \"v\"))\n-\t\t  (match_operand:SF\t\t     3 \"register_operand\" \"0\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"fnmscs\\t%0, %1, %2\")\n-\n-(define_insn \"*fpuv2_fnmscs_2\"\n-  [(set (match_operand:SF\t\t\t    0 \"register_operand\" \"=v\")\n-\t(neg:SF (plus:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"v\")\n-\t\t\t\t  (match_operand:SF 2 \"register_operand\" \"v\"))\n-\t\t\t (match_operand:SF\t    3 \"register_operand\" \"0\"))))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"fnmscs\\t%0, %1, %2\")\n-\n-(define_insn \"*fpuv2_fnmscd_1\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=v\")\n-\t(minus:DF (mult:DF (neg:DF (match_operand:DF 1 \"register_operand\" \"%v\"))\n-\t\t\t   (match_operand:DF 2 \"register_operand\" \"v\"))\n-\t\t  (match_operand:DF 3 \"register_operand\" \"0\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_df)\"\n-  \"fnmscd\\t%0, %1, %2\")\n-\n-(define_insn \"*fpuv2_fnmscd_2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=v\")\n-\t(neg:DF (plus:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"v\")\n-\t\t\t\t  (match_operand:DF 2 \"register_operand\" \"v\"))\n-\t\t\t (match_operand:DF 3 \"register_operand\" \"0\"))))]\n-  \"CSKY_ISA_FEATURE (fpv2_df)\"\n-  \"fnmscd\\t%0, %1, %2\")\n+(define_expand \"div<mode>3\"\n+  [(set (match_operand:SFDF\t   0 \"register_operand\" \"\")\n+\t(div:SFDF (match_operand:SFDF 1 \"csky_arith_float1_operand\" \"\")\n+\t\t  (match_operand:SFDF 2 \"register_operand\" \"\")))]\n+  \"CSKY_ISA_FEATURE(fpv2_<mode>) || CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"\")\n \n+(define_expand \"divhf3\"\n+ [(set (match_operand:HF 0 \"register_operand\" \"\")\n+       (div:HF (match_operand:HF 1 \"csky_arith_float1_operand\" \"\")\n+\t       (match_operand:HF 2 \"register_operand\" \"\")))]\n+ \"CSKY_ISA_FEATURE(fpv3_hf)\"\n+ \"\")\n \n ;; -------------------------------------------------------------------------\n ;; Float compare instructions\n ;; -------------------------------------------------------------------------\n \n-(define_expand \"cbranchsf4\"\n+(define_expand \"cbranch<mode>4\"\n   [(set (pc) (if_then_else (match_operator 0 \"csky_float_comparison_operator\"\n-\t\t\t     [(match_operand:SF 1 \"register_operand\")\n-\t\t\t      (match_operand:SF 2 \"csky_compare_operand_float\")])\n+\t\t\t    [(match_operand:SFDF 1 \"register_operand\")\n+\t\t\t     (match_operand:SFDF 2 \"csky_compare_operand_float\")])\n \t\t\t   (label_ref (match_operand 3 \"\"))\n \t\t\t   (pc)))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"\n-  {\n-    enum rtx_code code = GET_CODE (operands[0]);\n-    bool invert = csky_emit_compare_float (code, operands[1], operands[2]);\n+\"CSKY_ISA_FEATURE(fpv2_<mode>) || CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+\"{\n+  enum rtx_code code = GET_CODE (operands[0]);\n+  bool invert;\n \n-    if (invert)\n-      emit_jump_insn (gen_csky_jbf (operands[3]));\n-    else\n-      emit_jump_insn (gen_csky_jbt (operands[3]));\n+  invert = csky_emit_compare_float (code, operands[1], operands[2]);\n \n-    DONE;\n-  }\")\n-\n-(define_insn \"*fpuv2_unordered\"\n-  [(set (reg:CC 33) (unordered:CC (match_operand:SF 0 \"register_operand\" \"v\")\n-\t\t\t\t  (match_operand:SF 1 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"fcmpuos\\t%0, %1\")\n-\n-(define_insn \"*fpuv2_unordered_zero\"\n-  [(set (reg:CC 33) (unordered:CC (match_operand:SF 0 \"register_operand\" \"v\")\n-\t\t\t\t  (match_operand:SF 1 \"csky_const_float0_operand\" \"i\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"fcmpuos\\t%0, %0\")\n-\n-(define_insn \"*fpuv2_ne\"\n-  [(set (reg:CC 33) (ne:CC (match_operand:SF 0 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:SF 1 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"fcmpnes\\t%0, %1\")\n-\n-(define_insn \"*fpuv2_gt\"\n-  [(set (reg:CC 33) (gt:CC (match_operand:SF 0 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:SF 1 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"fcmplts\\t%1, %0\")\n-\n-(define_insn \"*fpuv2_ge\"\n-  [(set (reg:CC 33) (ge:CC (match_operand:SF 0 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:SF 1 \"register_operand\" \"v\")))]\n- \"CSKY_ISA_FEATURE (fpv2_sf)\"\n- \"fcmphss\\t%0, %1\")\n-\n-(define_insn \"*fpuv2_lt\"\n-  [(set (reg:CC 33) (lt:CC (match_operand:SF 0 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:SF 1 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"fcmplts\\t%0, %1\")\n-\n-(define_insn \"*fpuv2_le\"\n-  [(set (reg:CC 33) (le:CC (match_operand:SF 0 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:SF 1 \"register_operand\" \"v\")))]\n- \"CSKY_ISA_FEATURE (fpv2_sf)\"\n- \"fcmphss\\t%1, %0\")\n-\n-(define_insn \"*fpuv2_gez\"\n-  [(set (reg:CC 33) (ge:CC (match_operand:SF 0 \"register_operand\"\t   \"v\")\n-\t\t\t   (match_operand:SF 1 \"csky_const_float0_operand\" \"i\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"fcmpzhss\\t%0\")\n-\n-(define_insn \"*fpuv2_nez\"\n-  [(set (reg:CC 33) (ne:CC (match_operand:SF 0 \"register_operand\"\t   \"v\")\n-\t\t\t   (match_operand:SF 1 \"csky_const_float0_operand\" \"i\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"fcmpznes\\t%0\")\n-\n-\n-(define_expand \"cbranchdf4\"\n-  [(set (pc) (if_then_else (match_operator 0 \"csky_float_comparison_operator\"\n-\t\t\t     [(match_operand:DF 1 \"register_operand\")\n-\t\t\t      (match_operand:DF 2 \"csky_compare_operand_float\")])\n-\t\t\t   (label_ref (match_operand 3 \"\"))\n-\t\t\t   (pc)))]\n-  \"CSKY_ISA_FEATURE (fpv2_df)\"\n-  \"\n-  {\n-    enum rtx_code code = GET_CODE (operands[0]);\n-    bool invert = csky_emit_compare_float (code, operands[1], operands[2]);\n+  if (invert)\n+    emit_jump_insn (gen_csky_jbf (operands[3]));\n+  else\n+    emit_jump_insn (gen_csky_jbt (operands[3]));\n \n-    if (invert)\n-      emit_jump_insn (gen_csky_jbf (operands[3]));\n-    else\n-      emit_jump_insn (gen_csky_jbt (operands[3]));\n+  DONE;\n \n-    DONE;\n }\")\n \n-(define_insn \"*fpuv2_dunordered\"\n-  [(set (reg:CC 33) (unordered:CC (match_operand:DF 0 \"register_operand\" \"v\")\n-\t\t\t\t  (match_operand:DF 1 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_df)\"\n-  \"fcmpuod\\t%0, %1\")\n-\n-(define_insn \"*fpuv2_dunordered_zero\"\n-  [(set (reg:CC 33) (unordered:CC (match_operand:DF 0 \"register_operand\" \"v\")\n-\t\t\t\t  (match_operand:DF 1 \"csky_const_float0_operand\" \"i\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_df)\"\n-  \"fcmpuod\\t%0, %0\")\n-\n-(define_insn \"*fpuv2_dne\"\n-  [(set (reg:CC 33) (ne:CC (match_operand:DF 0 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:DF 1 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_df)\"\n-  \"fcmpned\\t%0, %1\")\n-\n-(define_insn \"*fpuv2_dgt\"\n-  [(set (reg:CC 33) (gt:CC (match_operand:DF 0 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:DF 1 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_df)\"\n-  \"fcmpltd\\t%1, %0\")\n-\n-(define_insn \"*fpuv2_dge\"\n-  [(set (reg:CC 33) (ge:CC (match_operand:DF 0 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:DF 1 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_df)\"\n-  \"fcmphsd\\t%0, %1\")\n-\n-(define_insn \"*fpuv2_dlt\"\n-  [(set (reg:CC 33) (lt:CC (match_operand:DF 0 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:DF 1 \"register_operand\" \"v\")))]\n- \"CSKY_ISA_FEATURE (fpv2_df)\"\n- \"fcmpltd\\t%0, %1\")\n-\n-(define_insn \"*fpuv2_dle\"\n-  [(set (reg:CC 33) (le:CC (match_operand:DF 0 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:DF 1 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_df)\"\n-  \"fcmphsd\\t%1, %0\")\n-\n-(define_insn \"*fpuv2_dgez\"\n-  [(set (reg:CC 33) (ge:CC (match_operand:DF 0 \"register_operand\"\t   \"v\")\n-\t\t\t   (match_operand:DF 1 \"csky_const_float0_operand\" \"i\")))]\n- \"CSKY_ISA_FEATURE (fpv2_df)\"\n- \"fcmpzhsd\\t%0\")\n-\n-(define_insn \"*fpuv2_dnez\"\n-  [(set (reg:CC 33) (ne:CC (match_operand:DF 0 \"register_operand\"\t   \"v\")\n-\t\t\t   (match_operand:DF 1 \"csky_const_float0_operand\" \"i\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_df)\"\n-  \"fcmpzned\\t%0\")\n+(define_expand \"cbranchhf4\"\n+  [(set (pc) (if_then_else (match_operator 0 \"csky_float_comparison_operator\"\n+\t\t\t    [(match_operand:HF 1 \"register_operand\")\n+\t\t\t     (match_operand:HF 2 \"csky_compare_operand_float\")])\n+\t\t\t   (label_ref (match_operand 3 \"\"))\n+\t\t\t   (pc)))]\n+\"CSKY_ISA_FEATURE(fpv3_hf)\"\n+\"{\n+  enum rtx_code code = GET_CODE (operands[0]);\n+  bool invert;\n \n+  invert = csky_emit_compare_float (code, operands[1], operands[2]);\n \n-;; -------------------------------------------------------------------------\n-;; Float convert instructions\n-;; -------------------------------------------------------------------------\n+  if (invert)\n+    emit_jump_insn (gen_csky_jbf (operands[3]));\n+  else\n+    emit_jump_insn (gen_csky_jbt (operands[3]));\n \n-;; DF <- SF\n-(define_insn \"extendsfdf2\"\n-  [(set (match_operand:DF\t\t   0 \"register_operand\" \"=v\")\n-\t(float_extend:DF (match_operand:SF 1 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_df)\"\n-  \"fstod\\t%0, %1\")\n-\n-;; SF <- DF\n-(define_insn \"truncdfsf2\"\n-  [(set (match_operand:SF\t\t     0 \"register_operand\" \"=v\")\n-\t(float_truncate:SF (match_operand:DF 1 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_df)\"\n-  \"fdtos\\t%0, %1\")\n-\n-;; SF <- SI\n-(define_insn \"floatsisf2\"\n-  [(set (match_operand:SF\t    0 \"register_operand\" \"=v\")\n-\t(float:SF (match_operand:SI 1 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"fsitos\\t%0, %1\")\n-\n-;; DF <- SI\n-(define_insn \"floatsidf2\"\n-  [(set (match_operand:DF\t    0 \"register_operand\" \"=v\")\n-\t(float:DF (match_operand:SI 1 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_df)\"\n-  \"fsitod\\t%0, %1\")\n-\n-;; SF <- unsigned SI\n-(define_insn \"floatunssisf2\"\n-  [(set (match_operand:SF\t\t     0 \"register_operand\" \"=v\")\n-\t(unsigned_float:SF (match_operand:SI 1 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"fuitos\\t%0, %1\")\n-\n-;; DF <- unsigned SI\n-(define_insn \"floatunssidf2\"\n-  [(set (match_operand:DF\t\t     0 \"register_operand\" \"=v\")\n-\t(unsigned_float:DF (match_operand:SI 1 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_df)\"\n-  \"fuitod\\t%0, %1\")\n-\n-;; SI <- SF\n-(define_insn \"fix_truncsfsi2\"\n-  [(set (match_operand:SI\t  0 \"register_operand\" \"=v\")\n-\t(fix:SI (match_operand:SF 1 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"fstosi.rz\\t%0, %1\")\n-\n-;; SI <- DF\n-(define_insn \"fix_truncdfsi2\"\n-  [(set (match_operand:SI\t  0 \"register_operand\" \"=v\")\n-\t(fix:SI (match_operand:DF 1 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_df)\"\n-  \"fdtosi.rz\\t%0, %1\")\n-\n-;; unsigned SI <- SF\n-(define_insn \"fixuns_truncsfsi2\"\n-  [(set (match_operand:SI\t\t   0 \"register_operand\" \"=v\")\n-\t(unsigned_fix:SI (match_operand:SF 1 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"fstoui.rz\\t%0, %1\")\n-\n-;; unsigned SI <- DF\n-(define_insn \"fixuns_truncdfsi2\"\n-  [(set (match_operand:SI\t\t   0 \"register_operand\" \"=v\")\n-\t(unsigned_fix:SI (match_operand:DF 1 \"register_operand\" \"v\")))]\n-  \"CSKY_ISA_FEATURE (fpv2_df)\"\n-  \"fdtoui.rz\\t%0, %1\")\n+  DONE;\n \n+}\")\n \n ;; -------------------------------------------------------------------------\n-;; Float mov instructions\n+;; Instructions for float cstore\n ;; -------------------------------------------------------------------------\n \n-;; Note:  movsf and movdf patterns are in csky.md.\n-\n-;; cstore SF\n-(define_expand \"cstoresf4\"\n+(define_expand \"cstore<mode>4\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(match_operator\t  1 \"ordered_comparison_operator\"\n-\t  [(match_operand:SF 2 \"register_operand\" \"\")\n-\t   (match_operand:SF 3 \"csky_compare_operand_float\" \"\")]))]\n-  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n-  \"\n-  {\n-    bool invert = csky_emit_compare_float (GET_CODE (operands[1]),\n-\t\t\t\t\t   operands[2], operands[3]);\n-    if (invert)\n+\t(match_operator   1 \"csky_float_comparison_operator\"\n+\t  [(match_operand:SFDF 2 \"register_operand\" \"\")\n+\t   (match_operand:SFDF 3 \"csky_compare_operand_float\" \"\")]))]\n+  \"CSKY_ISA_FEATURE (fpv2_<mode>) || CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"{\n+    bool invert;\n+\n+    invert = csky_emit_compare_float (GET_CODE (operands[1]),\n+\t\t\t\t operands[2], operands[3]);\n+    if(invert)\n       emit_insn (gen_mvcv (operands[0]));\n     else\n       emit_insn (gen_mvc (operands[0]));\n     DONE;\n   }\"\n )\n \n-;; cstore DF\n-(define_expand \"cstoredf4\"\n+(define_expand \"cstorehf4\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(match_operator 1 \"ordered_comparison_operator\"\n-\t  [(match_operand:DF 2 \"register_operand\" \"\")\n-\t   (match_operand:DF 3 \"csky_compare_operand_float\" \"\")]))]\n-  \"CSKY_ISA_FEATURE (fpv2_df)\"\n-  \"\n-  {\n-    bool invert = csky_emit_compare_float (GET_CODE (operands[1]),\n-\t\t\t\t\t   operands[2], operands[3]);\n-    if (invert)\n+\t(match_operator   1 \"csky_float_comparison_operator\"\n+\t  [(match_operand:HF 2 \"register_operand\" \"\")\n+\t   (match_operand:HF 3 \"csky_compare_operand_float\" \"\")]))]\n+  \"CSKY_ISA_FEATURE(fpv3_hf)\"\n+  \"{\n+    bool invert;\n+\n+    invert = csky_emit_compare_float (GET_CODE (operands[1]),\n+\t\t\t\t operands[2], operands[3]);\n+    if(invert)\n       emit_insn (gen_mvcv (operands[0]));\n     else\n       emit_insn (gen_mvc (operands[0]));\n     DONE;\n   }\"\n )\n+\n+;; -------------------------------------------------------------------------\n+;; Float convert instructions\n+;; -------------------------------------------------------------------------\n+\n+;; SF <- HF\n+(define_expand \"extendhfsf2\"\n+  [(set (match_operand:SF\t\t  0 \"register_operand\" \"\")\n+\t(float_extend:SF (match_operand:HF 1 \"register_operand\" \"\")))]\n+  \"CSKY_ISA_FEATURE(fpv3_hf)\"\n+  \"\")\n+\n+;; HF <- SF\n+(define_expand \"truncsfhf2\"\n+  [(set (match_operand:HF\t\t     0 \"register_operand\" \"\")\n+\t(float_truncate:HF (match_operand:SF 1 \"register_operand\" \"\")))]\n+  \"CSKY_ISA_FEATURE(fpv3_hf)\"\n+  \"\")\n+\n+;; DF <- SF\n+(define_expand \"extendsfdf2\"\n+  [(set (match_operand:DF\t\t  0 \"register_operand\" \"\")\n+\t(float_extend:DF (match_operand:SF 1 \"register_operand\" \"\")))]\n+  \"CSKY_ISA_FEATURE(fpv2_df) || CSKY_ISA_FEATURE(fpv3_df)\"\n+  \"\")\n+\n+;; SF <- DF\n+(define_expand \"truncdfsf2\"\n+  [(set (match_operand:SF\t\t    0 \"register_operand\" \"\")\n+\t(float_truncate:SF (match_operand:DF 1 \"register_operand\" \"\")))]\n+  \"CSKY_ISA_FEATURE(fpv2_df) || CSKY_ISA_FEATURE(fpv3_df)\"\n+  \"\")\n+\n+;; HF <- unsigned SI,SI\n+(define_expand \"float<floatsuop>sihf2\"\n+  [(set (match_operand:HF\t   0 \"register_operand\" \"\")\n+\t(FLOAT_SU:HF (match_operand:SI 1 \"register_operand\" \"\")))]\n+  \"CSKY_ISA_FEATURE(fpv3_hf)\"\n+  \"\")\n+\n+;; DF,SF <- unsigned SI,SI\n+(define_expand \"float<floatsuop>si<mode>2\"\n+  [(set (match_operand:SFDF\t\t    0 \"register_operand\" \"\")\n+\t(FLOAT_SU:SFDF (match_operand:SI 1 \"register_operand\" \"\")))]\n+  \"CSKY_ISA_FEATURE(fpv2_<mode>) || CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"\")\n+\n+;; HF <- unsigned HI,HI\n+(define_expand \"float<floatsuop>hihf2\"\n+  [(set (match_operand:HF\t   0 \"register_operand\" \"\")\n+\t(FLOAT_SU:HF (match_operand:HI 1 \"register_operand\" \"\")))]\n+  \"CSKY_ISA_FEATURE(fpv3_hi) && CSKY_ISA_FEATURE(fpv3_hf)\"\n+  \"\")\n+\n+;; unsigned SI,SI <- HF\n+(define_expand \"fix<fixsuop>_trunchfsi2\"\n+  [(set (match_operand:SI\t    0 \"register_operand\" \"\")\n+\t(FIX_SU:SI (fix:HF (match_operand:HF 1 \"register_operand\" \"\"))))]\n+  \"CSKY_ISA_FEATURE(fpv3_hf)\"\n+  \"\")\n+\n+;; unsigned SI,SI <- DF,SF\n+(define_expand \"fix<fixsuop>_trunc<mode>si2\"\n+  [(set (match_operand:SI\t    0 \"register_operand\" \"\")\n+\t(FIX_SU:SI (fix:SFDF (match_operand:SFDF 1 \"register_operand\" \"\"))))]\n+  \"CSKY_ISA_FEATURE(fpv2_<mode>) || CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"\")\n+\n+(include \"csky_insn_fpuv3.md\")\n+(include \"csky_insn_fpuv2.md\")"}, {"sha": "0a680f8bf3511d1bb3888354eeddbb06531ae886", "filename": "gcc/config/csky/csky_insn_fpuv2.md", "status": "added", "additions": 470, "deletions": 0, "changes": 470, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Fcsky_insn_fpuv2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Fcsky_insn_fpuv2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky_insn_fpuv2.md?ref=db92bd223e3957ee58b5a0c0fffd8b7766f1def3", "patch": "@@ -0,0 +1,470 @@\n+\n+;; -------------------------------------------------------------------------\n+;; Float Abs instructions\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"*fpuv2_abssf2\"\n+  [(set (match_operand:SF\t 0 \"register_operand\" \"=v,a,r\")\n+\t(abs:SF (match_operand:SF 1 \"register_operand\" \"v, 0,r\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"@\n+    fabss\\t%0, %1\n+    bclri\\t%0, %1, 31\n+    bclri\\t%0, %1, 31\"\n+  [(set_attr \"length\" \"4,2,4\")])\n+\n+(define_insn \"*fpuv2_absdf2\"\n+  [(set (match_operand:DF\t 0 \"register_operand\" \"=v\")\n+\t(abs:DF (match_operand:DF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fabsd\\t%0, %1\")\n+\n+\n+;; -------------------------------------------------------------------------\n+;; Float Neg instructions\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"*fpuv2_negsf2\"\n+  [(set (match_operand:SF\t 0 \"register_operand\" \"=v\")\n+\t(neg:SF (match_operand:SF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fnegs\\t%0, %1\")\n+\n+(define_insn \"*fpuv2_negdf2\"\n+  [(set (match_operand:DF\t 0 \"register_operand\" \"=v\")\n+\t(neg:DF (match_operand:DF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fnegd\\t%0, %1\")\n+\n+\n+;; -------------------------------------------------------------------------\n+;; Float Sqrt instructions\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"*fpuv2_sqrtsf2\"\n+  [(set (match_operand:SF\t  0 \"register_operand\" \"=v\")\n+\t(sqrt:SF (match_operand:SF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fsqrts\\t%0, %1\")\n+\n+(define_insn \"*fpuv2_sqrtdf2\"\n+  [(set (match_operand:DF\t  0 \"register_operand\" \"=v\")\n+\t(sqrt:DF (match_operand:DF 1 \"register_operand\" \"v\")))]\n+ \"CSKY_ISA_FEATURE (fpv2_divd)\"\n+ \"fsqrtd\\t%0, %1\")\n+\n+\n+;; -------------------------------------------------------------------------\n+;; Float Add instructions\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"*fpuv2_addsf3\"\n+  [(set (match_operand:SF\t  0 \"register_operand\" \"=v\")\n+\t(plus:SF (match_operand:SF 1 \"register_operand\" \"v\")\n+\t\t (match_operand:SF 2 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fadds\\t%0, %1, %2\")\n+\n+(define_insn \"*fpuv2_adddf3\"\n+  [(set (match_operand:DF\t  0 \"register_operand\" \"=v\")\n+\t(plus:DF (match_operand:DF 1 \"register_operand\" \"v\")\n+\t\t (match_operand:DF 2 \"register_operand\" \"v\")))]\n+ \"CSKY_ISA_FEATURE (fpv2_df)\"\n+ \"faddd\\t%0, %1, %2\")\n+\n+\n+;; -------------------------------------------------------------------------\n+;; Float Sub instructions\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"*fpuv2_subsf3\"\n+  [(set (match_operand:SF\t   0 \"register_operand\" \"=v\")\n+\t(minus:SF (match_operand:SF 1 \"register_operand\" \"v\")\n+\t\t  (match_operand:SF 2 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fsubs\\t%0, %1, %2\")\n+\n+(define_insn \"*fpuv2_subdf3\"\n+  [(set (match_operand:DF\t   0 \"register_operand\" \"=v\")\n+\t(minus:DF (match_operand:DF 1 \"register_operand\" \"v\")\n+\t\t  (match_operand:DF 2 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fsubd\\t%0, %1, %2\")\n+\n+\n+;; -------------------------------------------------------------------------\n+;; Float Mul instructions\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"*fpv2_mulsf3\"\n+  [(set (match_operand:SF\t  0 \"register_operand\" \"=v\")\n+\t(mult:SF (match_operand:SF 1 \"register_operand\" \"v\")\n+\t\t (match_operand:SF 2 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fmuls\\t%0, %1, %2\")\n+\n+(define_insn \"*fpv2_muldf3\"\n+  [(set (match_operand:DF\t  0 \"register_operand\" \"=v\")\n+\t(mult:DF (match_operand:DF 1 \"register_operand\" \"v\")\n+\t\t (match_operand:DF 2 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fmuld\\t%0, %1, %2\")\n+\n+(define_insn \"*fpuv2_nmulsf3_1\"\n+  [(set (match_operand:SF\t\t  0 \"register_operand\" \"=v\")\n+\t(mult:SF (neg:SF (match_operand:SF 1 \"register_operand\" \"%v\"))\n+\t\t (match_operand:SF\t 2 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf) && !flag_rounding_math\"\n+  \"fnmuls\\t%0, %1, %2\")\n+\n+(define_insn \"*fpuv2_nmulsf3_2\"\n+  [(set (match_operand:SF\t\t  0 \"register_operand\" \"=v\")\n+\t(neg:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"v\")\n+\t\t\t (match_operand:SF 2 \"register_operand\" \"v\"))))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fnmuls\\t%0, %1, %2\")\n+\n+(define_insn \"*fpuv2_nmuldf3_1\"\n+  [(set (match_operand:DF\t\t  0 \"register_operand\" \"=v\")\n+\t(mult:DF (neg:DF (match_operand:DF 1 \"register_operand\" \"%v\"))\n+\t\t (match_operand:DF\t 2 \"register_operand\" \"v\")))]\n+ \"CSKY_ISA_FEATURE (fpv2_df) && !flag_rounding_math\"\n+ \"fnmuld\\t%0, %1, %2\")\n+\n+(define_insn \"*fpuv2_nmuldf3_2\"\n+  [(set (match_operand:DF\t\t  0 \"register_operand\" \"=v\")\n+\t(neg:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"v\")\n+\t\t\t (match_operand:DF 2 \"register_operand\" \"v\"))))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fnmuld\\t%0, %1, %2\")\n+\n+\n+;; -------------------------------------------------------------------------\n+;; Float Div instructions\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"*fpuv2_divsf3\"\n+  [(set (match_operand:SF\t 0 \"register_operand\" \"=v\")\n+\t(div:SF (match_operand:SF 1 \"register_operand\" \"v\")\n+\t\t(match_operand:SF 2 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fdivs\\t%0, %1, %2\")\n+\n+(define_insn \"*fpuv2_1_divsf3\"\n+  [(set (match_operand:SF\t 0 \"register_operand\"\t  \"=v\")\n+\t(div:SF (match_operand:SF 1 \"csky_const_float1_operand\" \"i\")\n+\t\t(match_operand:SF 2 \"register_operand\"\t  \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"frecips\\t%0, %2\")\n+\n+(define_insn \"*fpuv2_divdf3\"\n+  [(set (match_operand:DF\t 0 \"register_operand\" \"=v\")\n+\t(div:DF (match_operand:DF 1 \"register_operand\" \"v\")\n+\t\t(match_operand:DF 2 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_divd)\"\n+  \"fdivd\\t%0, %1, %2\")\n+\n+(define_insn \"*fpuv2_1_divdf3\"\n+  [(set (match_operand:DF\t 0 \"register_operand\"\t  \"=v\")\n+\t(div:DF (match_operand:DF 1 \"csky_const_float1_operand\" \"i\")\n+\t\t(match_operand:DF 2 \"register_operand\"\t  \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_divd)\"\n+  \"frecipd\\t%0, %2\")\n+\n+\n+;; -------------------------------------------------------------------------\n+;; Float add(sub) with mult instructions\n+;; -------------------------------------------------------------------------\n+\n+;; vrz <= vrz + vrx * vry\n+(define_insn \"*fpuv2_fmacs\"\n+  [(set (match_operand:SF\t\t   0 \"register_operand\" \"=v\")\n+\t(plus:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"v\")\n+\t\t\t  (match_operand:SF 2 \"register_operand\" \"v\"))\n+\t\t (match_operand:SF\t  3 \"register_operand\" \"0\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fmacs\\t%0, %1, %2\")\n+\n+(define_insn \"*fpuv2_fmacd\"\n+  [(set (match_operand:DF\t\t   0 \"register_operand\" \"=v\")\n+\t(plus:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"v\")\n+\t\t\t  (match_operand:DF 2 \"register_operand\" \"v\"))\n+\t\t (match_operand:DF\t  3 \"register_operand\" \"0\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fmacd\\t%0, %1, %2\")\n+\n+;; vrz <= vrz - vrx * vry\n+(define_insn \"*fpuv2_fnmacs\"\n+  [(set (match_operand:SF\t\t    0 \"register_operand\" \"=v\")\n+\t(minus:SF (match_operand:SF\t  1 \"register_operand\" \"0\")\n+\t\t  (mult:SF (match_operand:SF 2 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:SF 3 \"register_operand\" \"v\"))))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fnmacs\\t%0, %2, %3\")\n+\n+(define_insn \"*fpuv2_fnmacd\"\n+  [(set (match_operand:DF\t\t    0 \"register_operand\" \"=v\")\n+\t(minus:DF (match_operand:DF\t  1 \"register_operand\" \"0\")\n+\t\t  (mult:DF (match_operand:DF 2 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:DF 3 \"register_operand\" \"v\"))))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fnmacd\\t%0, %2, %3\")\n+\n+;; vrz <= vrx * vry - vrz\n+(define_insn \"*fpuv2_fmscs\"\n+  [(set (match_operand:SF\t\t    0 \"register_operand\" \"=v\")\n+\t(minus:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:SF 2 \"register_operand\" \"v\"))\n+\t\t  (match_operand:SF\t  3 \"register_operand\" \"0\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fmscs\\t%0, %1, %2\")\n+\n+(define_insn \"*fpuv2_fmscd\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=v\")\n+\t(minus:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:DF 2 \"register_operand\" \"v\"))\n+\t\t  (match_operand:DF 3 \"register_operand\" \"0\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fmscd\\t%0, %1, %2\")\n+\n+;; vrz = - (vrz + vrx * vry)\n+(define_insn \"*fpuv2_fnmscs_1\"\n+  [(set (match_operand:SF\t\t\t    0 \"register_operand\" \"=v\")\n+\t(minus:SF (mult:SF (neg:SF (match_operand:SF 1 \"register_operand\" \"%v\"))\n+\t\t\t   (match_operand:SF\t 2 \"register_operand\" \"v\"))\n+\t\t  (match_operand:SF\t\t  3 \"register_operand\" \"0\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fnmscs\\t%0, %1, %2\")\n+\n+(define_insn \"*fpuv2_fnmscs_2\"\n+  [(set (match_operand:SF\t\t\t   0 \"register_operand\" \"=v\")\n+\t(neg:SF (plus:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"v\")\n+\t\t\t\t  (match_operand:SF 2 \"register_operand\" \"v\"))\n+\t\t\t (match_operand:SF\t  3 \"register_operand\" \"0\"))))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fnmscs\\t%0, %1, %2\")\n+\n+(define_insn \"*fpuv2_fnmscd_1\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=v\")\n+\t(minus:DF (mult:DF (neg:DF (match_operand:DF 1 \"register_operand\" \"%v\"))\n+\t\t\t   (match_operand:DF 2 \"register_operand\" \"v\"))\n+\t\t  (match_operand:DF 3 \"register_operand\" \"0\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fnmscd\\t%0, %1, %2\")\n+\n+(define_insn \"*fpuv2_fnmscd_2\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=v\")\n+\t(neg:DF (plus:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"v\")\n+\t\t\t\t  (match_operand:DF 2 \"register_operand\" \"v\"))\n+\t\t\t (match_operand:DF 3 \"register_operand\" \"0\"))))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fnmscd\\t%0, %1, %2\")\n+\n+\n+;; -------------------------------------------------------------------------\n+;; Float compare instructions\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"*fpuv2_unordered\"\n+  [(set (reg:CC 33) (unordered:CC (match_operand:SF 0 \"register_operand\" \"v\")\n+\t\t\t\t  (match_operand:SF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fcmpuos\\t%0, %1\")\n+\n+(define_insn \"*fpuv2_unordered_zero\"\n+  [(set (reg:CC 33) (unordered:CC (match_operand:SF 0 \"register_operand\" \"v\")\n+\t\t\t\t  (match_operand:SF 1 \"csky_const_float0_operand\" \"i\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fcmpuos\\t%0, %0\")\n+\n+(define_insn \"*fpuv2_ne\"\n+  [(set (reg:CC 33) (ne:CC (match_operand:SF 0 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:SF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fcmpnes\\t%0, %1\")\n+\n+(define_insn \"*fpuv2_gt\"\n+  [(set (reg:CC 33) (gt:CC (match_operand:SF 0 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:SF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fcmplts\\t%1, %0\")\n+\n+(define_insn \"*fpuv2_ge\"\n+  [(set (reg:CC 33) (ge:CC (match_operand:SF 0 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:SF 1 \"register_operand\" \"v\")))]\n+ \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+ \"fcmphss\\t%0, %1\")\n+\n+(define_insn \"*fpuv2_lt\"\n+  [(set (reg:CC 33) (lt:CC (match_operand:SF 0 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:SF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fcmplts\\t%0, %1\")\n+\n+(define_insn \"*fpuv2_le\"\n+  [(set (reg:CC 33) (le:CC (match_operand:SF 0 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:SF 1 \"register_operand\" \"v\")))]\n+ \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+ \"fcmphss\\t%1, %0\")\n+\n+(define_insn \"*fpuv2_gez\"\n+  [(set (reg:CC 33) (ge:CC (match_operand:SF 0 \"register_operand\"\t  \"v\")\n+\t\t\t   (match_operand:SF 1 \"csky_const_float0_operand\" \"i\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fcmpzhss\\t%0\")\n+\n+(define_insn \"*fpuv2_nez\"\n+  [(set (reg:CC 33) (ne:CC (match_operand:SF 0 \"register_operand\"\t  \"v\")\n+\t\t\t   (match_operand:SF 1 \"csky_const_float0_operand\" \"i\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fcmpznes\\t%0\")\n+\n+(define_insn \"*fpuv2_dunordered\"\n+  [(set (reg:CC 33) (unordered:CC (match_operand:DF 0 \"register_operand\" \"v\")\n+\t\t\t\t  (match_operand:DF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fcmpuod\\t%0, %1\")\n+\n+(define_insn \"*fpuv2_dunordered_zero\"\n+  [(set (reg:CC 33) (unordered:CC (match_operand:DF 0 \"register_operand\" \"v\")\n+\t\t\t\t  (match_operand:DF 1 \"csky_const_float0_operand\" \"i\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fcmpuod\\t%0, %0\")\n+\n+(define_insn \"*fpuv2_dne\"\n+  [(set (reg:CC 33) (ne:CC (match_operand:DF 0 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:DF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fcmpned\\t%0, %1\")\n+\n+(define_insn \"*fpuv2_dgt\"\n+  [(set (reg:CC 33) (gt:CC (match_operand:DF 0 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:DF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fcmpltd\\t%1, %0\")\n+\n+(define_insn \"*fpuv2_dge\"\n+  [(set (reg:CC 33) (ge:CC (match_operand:DF 0 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:DF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fcmphsd\\t%0, %1\")\n+\n+(define_insn \"*fpuv2_dlt\"\n+  [(set (reg:CC 33) (lt:CC (match_operand:DF 0 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:DF 1 \"register_operand\" \"v\")))]\n+ \"CSKY_ISA_FEATURE (fpv2_df)\"\n+ \"fcmpltd\\t%0, %1\")\n+\n+(define_insn \"*fpuv2_dle\"\n+  [(set (reg:CC 33) (le:CC (match_operand:DF 0 \"register_operand\" \"v\")\n+\t\t\t   (match_operand:DF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fcmphsd\\t%1, %0\")\n+\n+(define_insn \"*fpuv2_dgez\"\n+  [(set (reg:CC 33) (ge:CC (match_operand:DF 0 \"register_operand\"\t  \"v\")\n+\t\t\t   (match_operand:DF 1 \"csky_const_float0_operand\" \"i\")))]\n+ \"CSKY_ISA_FEATURE (fpv2_df)\"\n+ \"fcmpzhsd\\t%0\")\n+\n+(define_insn \"*fpuv2_dnez\"\n+  [(set (reg:CC 33) (ne:CC (match_operand:DF 0 \"register_operand\"\t  \"v\")\n+\t\t\t   (match_operand:DF 1 \"csky_const_float0_operand\" \"i\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fcmpzned\\t%0\")\n+\n+\n+;; -------------------------------------------------------------------------\n+;; Float convert instructions\n+;; -------------------------------------------------------------------------\n+\n+;; DF <- SF\n+(define_insn \"*fpuv2_extendsfdf2\"\n+  [(set (match_operand:DF\t\t  0 \"register_operand\" \"=v\")\n+\t(float_extend:DF (match_operand:SF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fstod\\t%0, %1\")\n+\n+;; SF <- DF\n+(define_insn \"*fpuv2_truncdfsf2\"\n+  [(set (match_operand:SF\t\t    0 \"register_operand\" \"=v\")\n+\t(float_truncate:SF (match_operand:DF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fdtos\\t%0, %1\")\n+\n+;; SF <- SI\n+(define_insn \"*fpuv2_floatsisf2\"\n+  [(set (match_operand:SF\t   0 \"register_operand\" \"=v\")\n+\t(float:SF (match_operand:SI 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fsitos\\t%0, %1\")\n+\n+;; DF <- SI\n+(define_insn \"*fpuv2_floatsidf2\"\n+  [(set (match_operand:DF\t   0 \"register_operand\" \"=v\")\n+\t(float:DF (match_operand:SI 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fsitod\\t%0, %1\")\n+\n+;; SF <- unsigned SI\n+(define_insn \"*fpuv2_floatunssisf2\"\n+  [(set (match_operand:SF\t\t    0 \"register_operand\" \"=v\")\n+\t(unsigned_float:SF (match_operand:SI 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fuitos\\t%0, %1\")\n+\n+;; DF <- unsigned SI\n+(define_insn \"*fpuv2_floatunssidf2\"\n+  [(set (match_operand:DF\t\t    0 \"register_operand\" \"=v\")\n+\t(unsigned_float:DF (match_operand:SI 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fuitod\\t%0, %1\")\n+\n+;; SI <- SF\n+(define_insn \"*fpuv2_fix_truncsfsi2\"\n+  [(set (match_operand:SI\t 0 \"register_operand\" \"=v\")\n+\t(fix:SI (fix:SF (match_operand:SF 1 \"register_operand\" \"v\"))))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fstosi.rz\\t%0, %1\")\n+\n+;; SI <- DF\n+(define_insn \"*fpuv2_fix_truncdfsi2\"\n+  [(set (match_operand:SI\t 0 \"register_operand\" \"=v\")\n+\t(fix:SI (fix:DF (match_operand:DF 1 \"register_operand\" \"v\"))))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fdtosi.rz\\t%0, %1\")\n+\n+;; unsigned SI <- SF\n+(define_insn \"*fpuv2_fixuns_truncsfsi2\"\n+  [(set (match_operand:SI\t\t  0 \"register_operand\" \"=v\")\n+\t(unsigned_fix:SI (fix:SF (match_operand:SF 1 \"register_operand\" \"v\"))))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"fstoui.rz\\t%0, %1\")\n+\n+;; unsigned SI <- DF\n+(define_insn \"*fpuv2_fixuns_truncdfsi2\"\n+  [(set (match_operand:SI\t\t  0 \"register_operand\" \"=v\")\n+\t(unsigned_fix:SI (fix:DF (match_operand:DF 1 \"register_operand\" \"v\"))))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"fdtoui.rz\\t%0, %1\")\n+\n+\n+;; -------------------------------------------------------------------------\n+;; Float mov instructions\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"*fpuv2_movsf\"\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=r,r, r,m,v,r,Q,v,v,v\")\n+\t(match_operand:SF 1 \"general_operand\"      \" r,m,mF,r,r,v,v,Q,v,W\"))]\n+  \"CSKY_ISA_FEATURE (fpv2_sf)\"\n+  \"* return csky_output_move(insn, operands, SFmode);\"\n+)\n+\n+(define_insn \"*fpuv2_movdf\"\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=r,r, r,m, v,?r,Q,v,v,v\")\n+\t(match_operand:DF 1 \"general_operand\"      \" r,m,mF,r,?r, v,v,Q,v,m\"))]\n+  \"CSKY_ISA_FEATURE (fpv2_df)\"\n+  \"* return csky_output_movedouble(operands, DFmode);\"\n+  [(set (attr \"length\")\n+\t(symbol_ref \"csky_get_movedouble_length (operands)\"))]\n+)"}, {"sha": "053673c49d2f11119fdbfa372990df9f20d7f867", "filename": "gcc/config/csky/csky_insn_fpuv3.md", "status": "added", "additions": 497, "deletions": 0, "changes": 497, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Fcsky_insn_fpuv3.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Fcsky_insn_fpuv3.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky_insn_fpuv3.md?ref=db92bd223e3957ee58b5a0c0fffd8b7766f1def3", "patch": "@@ -0,0 +1,497 @@\n+\n+(define_c_enum \"unspec\" [\n+  UNSPEC_MAXNM_F3\n+  UNSPEC_MINNM_F3\n+])\n+\n+;; -------------------------------------------------------------------------\n+;; Float mov instructions\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"*fpv3_movhf\"\n+  [(set (match_operand:HF 0 \"nonimmediate_operand\" \"=r,r,v,r,m,r,Q,v,v,v, v\")\n+\t(match_operand:HF 1 \"general_operand\"      \" r,F,r,v,r,m,v,Q,v,W,Dv\"))]\n+  \"CSKY_ISA_FEATURE(fpv3_hf)\"\n+  \"*\n+  switch (which_alternative)\n+    {\n+    case 2:\n+      return \\\"fmtvr.16\\\\t%0, %1\\\";\n+    case 3:\n+      return \\\"fmfvr.16\\\\t%0, %1\\\";\n+    case 6:\n+    case 7:\n+    case 9:\n+      return fpuv3_output_move(operands);\n+    case 8:\n+      return \\\"fmov.16\\\\t%0, %1\\\";\n+    case 10:\n+      return \\\"fmovi.16\\\\t%0, %1\\\";\n+    case 1:\n+      {\n+\tlong bits;\n+\trtx ops[4];\n+\n+\tbits = real_to_target (NULL, CONST_DOUBLE_REAL_VALUE (operands[1]), HFmode);\n+\tops[0] = operands[0];\n+\tops[1] = GEN_INT (bits);\n+\n+\toutput_asm_insn (\\\"lrw\\\\t%0, %1\\\", ops);\n+\treturn \\\"\\\";\n+      }\n+    default:\n+      return csky_output_move(insn, operands, HFmode);\n+    }\n+  \"\n+)\n+\n+(define_insn \"*fpv3_movsf\"\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=r,r, r,m,v,r,Q,v,v,v, v\")\n+\t(match_operand:SF 1 \"general_operand\"      \" r,m,mF,r,r,v,v,Q,v,W,Dv\"))]\n+  \"CSKY_ISA_FEATURE(fpv3_sf)\"\n+  \"*\n+  switch (which_alternative)\n+    {\n+    case 4:\n+      return \\\"fmtvr.32.1\\\\t%0, %1\\\";\n+    case 5:\n+      return \\\"fmfvr.32.1\\\\t%0, %1\\\";\n+    case 6:\n+    case 7:\n+    case 9:\n+      return fpuv3_output_move(operands);\n+    case 8:\n+      return \\\"fmov.32\\\\t%0, %1\\\";\n+    case 10:\n+      return \\\"fmovi.32\\\\t%0, %1\\\";\n+    default:\n+      return csky_output_move(insn, operands, SFmode);\n+    }\n+  \"\n+)\n+\n+(define_insn \"*fpv3_movdf\"\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=r,r, r,m,v,?r,Q,v,v,v, v\")\n+\t(match_operand:DF 1 \"general_operand\"      \" r,m,mF,r,?r,v,v,Q,v,m,Dv\"))]\n+  \"CSKY_ISA_FEATURE(fpv3_df)\"\n+  \"*\n+  switch (which_alternative)\n+    {\n+    case 4:\n+      if (TARGET_BIG_ENDIAN)\n+\treturn \\\"fmtvr.64\\\\t%0, %R1, %1\\\";\n+      return \\\"fmtvr.64\\\\t%0, %1, %R1\\\";\n+    case 5:\n+      if (TARGET_BIG_ENDIAN)\n+\treturn \\\"fmfvr.64\\\\t%R0, %0, %1\\\";\n+      return \\\"fmfvr.64\\\\t%0, %R0, %1\\\";\n+    case 6:\n+    case 7:\n+    case 9:\n+      return fpuv3_output_move(operands);\n+    case 8:\n+      return \\\"fmov.64\\\\t%0, %1\\\";\n+    case 10:\n+      return \\\"fmovi.64\\\\t%0, %1\\\";\n+    default:\n+      return csky_output_movedouble(operands, DFmode);\n+    }\n+  \"\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; Float Mul instructions\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"*fpv3_mul<mode>3\"\n+  [(set (match_operand:F3ANY\t      0 \"register_operand\" \"=v\")\n+\t(mult:F3ANY (match_operand:F3ANY  1 \"register_operand\" \" v\")\n+\t\t    (match_operand:F3ANY  2 \"register_operand\" \" v\")))]\n+  \"CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"fmul.<f3t>\\t%0, %1, %2\"\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; Float Muladd and mulsub instructions\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"*fpv3_mula<mode>3\"\n+  [(set (match_operand:F3ANY\t      0 \"register_operand\" \"+v\")\n+\t(plus:F3ANY (mult:F3ANY (match_operand:F3ANY  1 \"register_operand\" \" v\")\n+\t\t\t\t(match_operand:F3ANY  2 \"register_operand\" \" v\"))\n+\t\t    (match_dup 0)))]\n+  \"CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"fmula.<f3t>\\t%0, %1, %2\"\n+)\n+\n+(define_insn \"*fpv3_muls<mode>3\"\n+  [(set (match_operand:F3ANY\t      0 \"register_operand\" \"+v\")\n+\t(minus:F3ANY (match_dup 0)\n+\t\t     (mult:F3ANY (match_operand:F3ANY  1 \"register_operand\" \" v\")\n+\t\t\t\t (match_operand:F3ANY  2 \"register_operand\" \" v\"))))]\n+  \"CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"fmuls.<f3t>\\t%0, %1, %2\"\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; Float fmula/fmuls/fnmula/fnmuls instructions\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"*fpv3_fmuls_<mode>4\"\n+  [(set (match_operand:F3ANY\t      0 \"register_operand\" \"=v\")\n+\t(fma:F3ANY (neg:F3ANY (match_operand:F3ANY  1 \"register_operand\" \"v\"))\n+\t\t   (match_operand:F3ANY   2 \"register_operand\" \"v\")\n+\t\t   (match_operand:F3ANY   3 \"register_operand\"  \"0\")))]\n+  \"CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"ffmuls.<f3t>\\t%0, %1, %2\"\n+)\n+\n+(define_insn \"*fpv3_fmula_<mode>4\"\n+  [(set (match_operand:F3ANY\t    0 \"register_operand\" \"=v\")\n+\t(fma:F3ANY (match_operand:F3ANY 1 \"register_operand\" \" v\")\n+\t\t   (match_operand:F3ANY 2 \"register_operand\" \" v\")\n+\t\t   (match_operand:F3ANY 3 \"register_operand\" \"0\")))]\n+  \"CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"ffmula.<f3t>\\t%0, %1, %2\"\n+)\n+\n+(define_insn \"*fpv3_fnmula_<mode>4\"\n+  [(set (match_operand:F3ANY\t      0 \"register_operand\" \"=v\")\n+\t(neg: F3ANY (fma:F3ANY (match_operand:F3ANY  1 \"register_operand\" \" v\")\n+\t\t\t       (match_operand:F3ANY  2 \"register_operand\" \" v\")\n+\t\t\t       (match_operand:F3ANY  3 \"register_operand\" \"0\"))))]\n+  \"CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"ffnmula.<f3t>\\t%0, %1, %2\"\n+)\n+\n+(define_insn \"*fpv3_fnmuls_<mode>4\"\n+  [(set (match_operand:F3ANY\t      0 \"register_operand\" \"=v\")\n+\t(fma:F3ANY (match_operand:F3ANY  1 \"register_operand\" \" v\")\n+\t\t   (match_operand:F3ANY  2 \"register_operand\" \" v\")\n+\t\t   (neg:F3ANY (match_operand:F3ANY  3 \"register_operand\" \"0\"))))]\n+  \"CSKY_ISA_FEATURE(fpv3_sf)\"\n+  \"ffnmuls.<f3t>\\t%0, %1, %2\"\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; Float div/recipe/sqrt instructions\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"*fpv3_div<mode>3\"\n+  [(set (match_operand:F3ANY\t      0 \"register_operand\" \"=v\")\n+\t(div:F3ANY (match_operand:F3ANY   1 \"register_operand\" \" v\")\n+\t\t   (match_operand:F3ANY   2 \"register_operand\" \" v\")))]\n+  \"CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"fdiv.<f3t>\\t%0, %1, %2\"\n+)\n+\n+(define_insn \"*fpv3_recip<mode>3\"\n+  [(set (match_operand:F3ANY\t     0 \"register_operand\" \"=v\")\n+\t(div:F3ANY (match_operand:F3ANY  1 \"csky_const_float1_operand\" \" i\")\n+\t\t   (match_operand:F3ANY  2 \"register_operand\" \" v\")))]\n+  \"CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"frecip.<f3t>\\t%0, %2\"\n+)\n+\n+(define_insn \"*fpv3_sqrt<mode>2\"\n+  [(set (match_operand:F3ANY\t      0 \"register_operand\" \"=v\")\n+\t(sqrt:F3ANY (match_operand:F3ANY  1 \"register_operand\" \" v\")))]\n+  \"CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"fsqrt.<f3t>\\t%0, %1\"\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; Float fmax/fmin instructions\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"fmax<mode>3\"\n+  [(set (match_operand:F3ANY\t\t 0 \"register_operand\" \"=v\")\n+\t(unspec:F3ANY [(match_operand:F3ANY  1 \"register_operand\" \" v\")\n+\t\t       (match_operand:F3ANY  2 \"register_operand\" \" v\")]\n+\t\t      UNSPEC_MAXNM_F3))]\n+  \"CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"fmaxnm.<f3t>\\t%0, %1, %2\"\n+)\n+\n+(define_insn \"fmin<mode>3\"\n+  [(set (match_operand:F3ANY\t\t 0 \"register_operand\" \"=v\")\n+\t(unspec:F3ANY [(match_operand:F3ANY  1 \"register_operand\" \" v\")\n+\t\t       (match_operand:F3ANY  2 \"register_operand\" \" v\")]\n+\t\t      UNSPEC_MINNM_F3))]\n+  \"CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"fminnm.<f3t>\\t%0, %1, %2\"\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; Float compare instructions\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"*fpv3_<zero_inst>_<mode>3\"\n+  [(set (reg:CC CSKY_CC_REGNUM)\n+\t(FCMPZ:CC (match_operand:F3ANY 0 \"register_operand\" \"v\")\n+\t\t  (match_operand:F3ANY 1 \"csky_const_float0_operand\" \"i\")))]\n+   \"CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+   \"fcmp<zero_inst>.<f3t>\\t%0\"\n+)\n+\n+(define_insn \"*fpv3_<reg_inst>_<mode>3\"\n+  [(set (reg:CC CSKY_CC_REGNUM)\n+\t(FCMP:CC (match_operand:F3ANY 0 \"register_operand\" \"v\")\n+\t\t (match_operand:F3ANY 1 \"register_operand\" \"v\")))]\n+   \"CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+   \"fcmp<reg_inst>.<f3t>\\t%0, %1\"\n+)\n+\n+(define_insn \"*fpv3_gt<mode>3\"\n+  [(set (reg:CC CSKY_CC_REGNUM)\n+\t(gt:CC (match_operand:F3ANY 0 \"register_operand\" \"v\")\n+\t       (match_operand:F3ANY 1 \"register_operand\" \"v\")))]\n+   \"CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+   \"fcmplt.<f3t>\\t%1, %0\"\n+)\n+\n+(define_insn \"*fpv3_le<mode>3\"\n+  [(set (reg:CC CSKY_CC_REGNUM)\n+\t(le:CC (match_operand:F3ANY 0 \"register_operand\" \"v\")\n+\t       (match_operand:F3ANY 1 \"register_operand\" \"v\")))]\n+   \"CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+   \"fcmphs.<f3t>\\t%1, %0\"\n+)\n+\n+(define_insn \"*fpv3_unordered\"\n+  [(set (reg:CC CSKY_CC_REGNUM)\n+\t(unordered:CC (match_operand:F3ANY 0 \"register_operand\" \"v\")\n+\t\t      (match_operand:F3ANY 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"fcmpuo.<f3t>\\t%0, %1\")\n+\n+(define_insn \"*fpv3_unordered_zero\"\n+  [(set (reg:CC CSKY_CC_REGNUM)\n+\t(unordered:CC (match_operand:F3ANY 0 \"register_operand\" \"v\")\n+\t\t      (match_operand:F3ANY 1 \"csky_const_float0_operand\" \"i\")))]\n+  \"CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"fcmpuoz.<f3t>\\t%0\")\n+\n+;; -------------------------------------------------------------------------\n+;; Float ADD instructions\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"*fpv3_add<mode>3\"\n+  [(set (match_operand:F3ANY\t      0 \"register_operand\" \"=v\")\n+\t(plus:F3ANY (match_operand:F3ANY  1 \"register_operand\" \" v\")\n+\t\t    (match_operand:F3ANY  2 \"register_operand\" \" v\")))]\n+  \"CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"fadd.<f3t>\\t%0, %1, %2\"\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; Float SUB instructions\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"*fpv3_sub<mode>3\"\n+  [(set (match_operand:F3ANY\t       0 \"register_operand\" \"=v\")\n+\t(minus:F3ANY (match_operand:F3ANY  1 \"register_operand\" \" v\")\n+\t\t     (match_operand:F3ANY  2 \"register_operand\" \" v\")))]\n+  \"CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"fsub.<f3t>\\t%0, %1, %2\"\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; Float NEG instructions\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"*fpv3_neg<mode>2\"\n+  [(set (match_operand:F3ANY\t     0 \"register_operand\" \"=v\")\n+\t(neg:F3ANY (match_operand:F3ANY  1 \"register_operand\" \" v\")))]\n+  \"CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"fneg.<f3t>\\t%0, %1\"\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; Float ABS instructions\n+;; -------------------------------------------------------------------------\n+\n+(define_insn \"*fpv3_abs<mode>2\"\n+  [(set (match_operand:F3ANY\t     0 \"register_operand\" \"=v\")\n+\t(abs:F3ANY (match_operand:F3ANY  1 \"register_operand\" \" v\")))]\n+  \"CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"fabs.<f3t>\\t%0, %1\"\n+)\n+\n+;; -------------------------------------------------------------------------\n+;; Float common convert instructions\n+;; -------------------------------------------------------------------------\n+\n+;; SF <- HF\n+(define_insn \"*fpv3_extendhfsf2\"\n+  [(set (match_operand:SF\t\t  0 \"register_operand\" \"=v\")\n+\t(float_extend:SF (match_operand:HF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE(fpv3_hf)\"\n+  \"fhtos\\t%0, %1\")\n+\n+;; HF <- SF\n+(define_insn \"*fpv3_truncsfhf2\"\n+  [(set (match_operand:HF\t\t     0 \"register_operand\" \"=v\")\n+\t(float_truncate:HF (match_operand:SF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE(fpv3_hf)\"\n+  \"fstoh\\t%0, %1\")\n+\n+;; DF <- SF\n+(define_insn \"*fpv3_extendsfdf2\"\n+  [(set (match_operand:DF\t\t  0 \"register_operand\" \"=v\")\n+\t(float_extend:DF (match_operand:SF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE(fpv3_df)\"\n+  \"fstod\\t%0, %1\")\n+\n+;; SF <- DF\n+(define_insn \"*fpv3_truncdfsf2\"\n+  [(set (match_operand:SF\t\t    0 \"register_operand\" \"=v\")\n+\t(float_truncate:SF (match_operand:DF 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE(fpv3_df)\"\n+  \"fdtos\\t%0, %1\")\n+\n+;; DF,SF,HF <- unsigned SI,SI\n+(define_insn \"*fpv3_float<floatsuop>si<mode>2\"\n+  [(set (match_operand:F3ANY\t   0 \"register_operand\" \"=v\")\n+\t(FLOAT_SU:F3ANY (match_operand:SI 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"fitof.<floatsu>32.f<f3t>\\t%0, %1\")\n+\n+;; HF <- unsigned HI,HI\n+(define_insn \"*fpv3_float<floatsuop>hihf2\"\n+  [(set (match_operand:HF\t   0 \"register_operand\" \"=v\")\n+\t(FLOAT_SU:HF (match_operand:HI 1 \"register_operand\" \"v\")))]\n+  \"CSKY_ISA_FEATURE(fpv3_hi) && CSKY_ISA_FEATURE(fpv3_hf)\"\n+  \"fitof.<floatsu>16.f16\\t%0, %1\")\n+\n+;; unsigned SI,SI <- DF,SF,HF\n+(define_insn \"*fpv3_fix<fixsuop>_trunc<mode>si2\"\n+  [(set (match_operand:SI\t    0 \"register_operand\" \"=v\")\n+\t(FIX_SU:SI (fix:F3ANY (match_operand:F3ANY 1 \"register_operand\" \"v\"))))]\n+  \"CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"fftoi.f<f3t>.<fixsu>32.rz\\t%0, %1\")\n+\n+;; -------------------------------------------------------------------------\n+;; Float complex convert instructions\n+;; -------------------------------------------------------------------------\n+\n+;; Fixed point to floating point conversions.\n+\n+;(define_insn \"*combine_fcvt_fixed16_<mode>\"\n+;  [(set (match_operand:F3ANY 0 \"register_operand\" \"=v\")\n+;\t(mult:F3ANY (float:F3ANY (match_operand:HI 1 \"register_operand\" \"0\"))\n+;\t       (match_operand 2\n+;\t\t\t\"const_double_fcvt_power_of_two_reciprocal_hq\" \"Dt\")))]\n+;  \"CSKY_ISA_FEATURE(fpv3_<mode>) && !flag_rounding_math\n+;   && CSKY_ISA_FEATURE(fpv3_hi)\"\n+;  \"fxtof.s16.f<f3t>\\t%0, %1, %v2\")\n+;\n+;(define_insn \"*combine_fcvt_fixed32_<mode>\"\n+;  [(set (match_operand:F3ANY 0 \"register_operand\" \"=v\")\n+;\t(mult:F3ANY (float:F3ANY (match_operand:SI 1 \"register_operand\" \"0\"))\n+;\t       (match_operand 2\n+;\t\t\t\"const_double_fcvt_power_of_two_reciprocal_sq\" \"Dt\")))]\n+;  \"CSKY_ISA_FEATURE(fpv3_<mode>) && !flag_rounding_math\"\n+;  \"fxtof.s32.f<f3t>\\t%0, %1, %v2\")\n+;\n+;(define_insn \"*combine_fcvt_unfixed16_<mode>\"\n+;  [(set (match_operand:F3ANY 0 \"register_operand\" \"=v\")\n+;\t(mult:F3ANY (unsigned_float:F3ANY (match_operand:HI 1 \"register_operand\" \"0\"))\n+;\t       (match_operand 2\n+;\t\t\t\"const_double_fcvt_power_of_two_reciprocal_hq\" \"Dt\")))]\n+;  \"CSKY_ISA_FEATURE(fpv3_<mode>) && !flag_rounding_math\n+;   && CSKY_ISA_FEATURE(fpv3_hi)\"\n+;  \"fxtof.u16.f<f3t>\\t%0, %1, %v2\")\n+;\n+;(define_insn \"*combine_fcvt_unfixed32_<mode>\"\n+;  [(set (match_operand:F3ANY 0 \"register_operand\" \"=v\")\n+;\t(mult:F3ANY (unsigned_float:F3ANY (match_operand:SI 1 \"register_operand\" \"0\"))\n+;\t       (match_operand 2\n+;\t\t\t\"const_double_fcvt_power_of_two_reciprocal_sq\" \"Dt\")))]\n+;  \"CSKY_ISA_FEATURE(fpv3_<mode>) && !flag_rounding_math\"\n+;  \"fxtof.u32.f<f3t>\\t%0, %1, %v2\")\n+\n+;; Floating point to fixed point conversions.\n+\n+;(define_insn \"*combine_fcvt<mode>_fixed16\"\n+;  [(set (match_operand:HI 0 \"register_operand\" \"=v\")\n+;\t(fix:HI (fix:F3ANY (mult:F3ANY (match_operand:F3ANY 1 \"register_operand\" \"0\")\n+;\t\t\t    (match_operand 2\n+;\t\t\t     \"const_double_fcvt_power_of_two_hq\" \"Du\")))))]\n+;  \"CSKY_ISA_FEATURE(fpv3_<mode>) && !flag_rounding_math\n+;   && CSKY_ISA_FEATURE(fpv3_hi)\"\n+;  \"fftox.f<f3t>.s16\\t%0, %1, %v2\"\n+; )\n+;\n+;(define_insn \"*combine_fcvt<mode>_fixed32\"\n+;  [(set (match_operand:SI 0 \"register_operand\" \"=v\")\n+;\t(fix:SI (fix:F3ANY (mult:F3ANY (match_operand:F3ANY 1 \"register_operand\" \"0\")\n+;\t\t\t    (match_operand 2\n+;\t\t\t     \"const_double_fcvt_power_of_two_sq\" \"Du\")))))]\n+;  \"CSKY_ISA_FEATURE(fpv3_<mode>) && !flag_rounding_math\"\n+;  \"fftox.f<f3t>.s32\\t%0, %1, %v2\"\n+; )\n+;\n+;(define_insn \"*combine_fcvt<mode>_unfixed16\"\n+;  [(set (match_operand:HI 0 \"register_operand\" \"=v\")\n+;\t(unsigned_fix:HI (fix:F3ANY (mult:F3ANY (match_operand:F3ANY 1 \"register_operand\" \"0\")\n+;\t\t\t\t     (match_operand 2\n+;\t\t\t\t      \"const_double_fcvt_power_of_two_hq\" \"Du\")))))]\n+;  \"CSKY_ISA_FEATURE(fpv3_<mode>) && !flag_rounding_math\n+;   && CSKY_ISA_FEATURE(fpv3_hi)\"\n+;  \"fftox.f<f3t>.u16\\t%0, %1, %v2\"\n+; )\n+;\n+;(define_insn \"*combine_fcvt<mode>_unfixed32\"\n+;  [(set (match_operand:SI 0 \"register_operand\" \"=v\")\n+;\t(unsigned_fix:SI (fix:F3ANY (mult:F3ANY (match_operand:F3ANY 1 \"register_operand\" \"0\")\n+;\t\t\t\t     (match_operand 2\n+;\t\t\t\t      \"const_double_fcvt_power_of_two_sq\" \"Du\")))))]\n+;  \"CSKY_ISA_FEATURE(fpv3_<mode>) && !flag_rounding_math\"\n+;  \"fftox.f<f3t>.u32\\t%0, %1, %v2\"\n+; )\n+\n+;; conversions need to be rounding to nearest.\n+\n+(define_insn \"l<frm_pattern><fixsuop><mode>si2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=v\")\n+\t(FIX_SU:SI (unspec:F3ANY [(match_operand:F3ANY 1 \"register_operand\" \"0\")]\n+\t\t\t\t   FRM)))]\n+  \"CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"fftoi.f<f3t>.<fixsu>32<rm>\\t%0, %1\"\n+)\n+\n+(define_insn \"<frm_pattern><mode>2\"\n+  [(set (match_operand:F3ANY 0 \"register_operand\" \"=v\")\n+\t(unspec:F3ANY [(match_operand:F3ANY 1 \"register_operand\" \"0\")] FRMF))]\n+  \"CSKY_ISA_FEATURE(fpv3_<mode>)\"\n+  \"fftofi.f<f3t><rm>\\t%0, %1\"\n+)\n+\n+;; Write Floating-point Control Register.\n+(define_insn \"csky_setfcrsi\"\n+  [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"r\")] VUNSPEC_SET_FCR)]\n+  \"CSKY_ISA_FEATURE(fcr)\"\n+  \"mtcr\\t%0, fcr\"\n+)\n+\n+;; Read Floating-point Control Register.\n+(define_insn \"csky_getfcrsi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec_volatile:SI [(const_int 0)] VUNSPEC_GET_FCR))]\n+  \"CSKY_ISA_FEATURE(fcr)\"\n+  \"mfcr\\t%0, fcr\"\n+)\n+\n+;; Insert Floating-point Control Register.\n+(define_insn \"csky_insfcrsi\"\n+  [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"r\")\n+\t\t     (match_operand:SI 1 \"const_int_operand\" \"i\")\n+\t\t     (match_operand:SI 2 \"const_int_operand\" \"i\")]VUNSPEC_INS_FCR)\n+   (clobber (reg: SI 13))]\n+  \"CSKY_ISA_FEATURE(fcr)\"\n+  {\n+    operands[1] = GEN_INT (INTVAL (operands[2]) + INTVAL (operands[1]) - 1);\n+    return \"mfcr\\tt1, fcr\\n\\tins\\tt1, %0, %1, %2\\n\\tmtcr\\tt1, fcr\";\n+  }\n+)"}, {"sha": "584981963d9736d0236772bbaa36f1c188591086", "filename": "gcc/config/csky/csky_isa.def", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Fcsky_isa.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Fcsky_isa.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky_isa.def?ref=db92bd223e3957ee58b5a0c0fffd8b7766f1def3", "patch": "@@ -32,6 +32,7 @@ CSKY_ISA (7E10,\t \"Extended insns for arch ck810\t from ck807\")\n \n /* Special insns */\n CSKY_ISA (div,\t  \"divide insns\")\n+CSKY_ISA (fcr,\t  \"Control the fcr register\")\n \n /* Extended insns */\n CSKY_ISA (dsp,\t \"Extended insns for DSP\")\n@@ -41,6 +42,11 @@ CSKY_ISA (fpv2_sf,    \"Single precision operations supported\")\n CSKY_ISA (fpv2_df,    \"Double precision operations supported\")\n CSKY_ISA (fpv2_divd,  \"Double precision div operations supported\")\n \n+CSKY_ISA (fpv3_hi,    \"half word for fpu convert supported\")\n+CSKY_ISA (fpv3_hf,    \"half precision operations supported\")\n+CSKY_ISA (fpv3_sf,    \"Single precision operations supported\")\n+CSKY_ISA (fpv3_df,    \"Double precision operations supported\")\n+\n /* Specific insns mode */\n #ifdef\tCSKY_ISA_MACRO\n #define CSKY_ISA_CK801\t    CSKY_ISA_FEATURE_GET (E1)\n@@ -50,10 +56,19 @@ CSKY_ISA (fpv2_divd,  \"Double precision div operations supported\")\n #define CSKY_ISA_CK803R1    CSKY_ISA_CK803, CSKY_ISA_FEATURE_GET (3E3r1)\n #define CSKY_ISA_CK807\t    CSKY_ISA_CK803, CSKY_ISA_FEATURE_GET (3E7)\n #define CSKY_ISA_CK810\t    CSKY_ISA_CK807, CSKY_ISA_FEATURE_GET (7E10)\n+#define CSKY_ISA_CK860      CSKY_ISA_CK810, CSKY_ISA_FEATURE_GET(3E3r1)\n \n #define CSKY_ISA_DSP\t    CSKY_ISA_FEATURE_GET (dsp)\n \n #define CSKY_ISA_FPv2_SF    CSKY_ISA_FEATURE_GET (fpv2_sf)\n #define CSKY_ISA_FPv2\t    CSKY_ISA_FPv2_SF, CSKY_ISA_FEATURE_GET (fpv2_df)\n #define CSKY_ISA_FPv2_DIVD  CSKY_ISA_FPv2, CSKY_ISA_FEATURE_GET (fpv2_divd)\n+\n+#define CSKY_ISA_FPv3_HF    CSKY_ISA_FEATURE_GET (fpv3_hf), \\\n+                            CSKY_ISA_FEATURE_GET (fpv3_hi)\n+#define CSKY_ISA_FPv3_HSF   CSKY_ISA_FPv3_HF, \\\n+                            CSKY_ISA_FEATURE_GET (fpv3_sf)\n+#define CSKY_ISA_FPv3_SDF   CSKY_ISA_FEATURE_GET (fpv3_sf), \\\n+                            CSKY_ISA_FEATURE_GET (fpv3_df)\n+#define CSKY_ISA_FPv3       CSKY_ISA_FPv3_HF, CSKY_ISA_FPv3_SDF\n #endif"}, {"sha": "ca113dd31008777e891cdccaf17401a7e9396ab3", "filename": "gcc/config/csky/csky_tables.opt", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Fcsky_tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Fcsky_tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky_tables.opt?ref=db92bd223e3957ee58b5a0c0fffd8b7766f1def3", "patch": "@@ -194,6 +194,12 @@ Enum(csky_processor_type) String(ck810ft) Value( TARGET_CPU_ck810ff)\n EnumValue\n Enum(csky_processor_type) String(ck810ftv) Value( TARGET_CPU_ck810ftv)\n \n+EnumValue\n+Enum(csky_processor_type) String(ck860) Value( TARGET_CPU_ck860)\n+\n+EnumValue\n+Enum(csky_processor_type) String(ck860f) Value( TARGET_CPU_ck860f)\n+\n Enum\n Name(csky_arch) Type(int)\n Known CSKY architectures (for use with the -march= option):\n@@ -213,6 +219,9 @@ Enum(csky_arch) String(ck807) Value(3)\n EnumValue\n Enum(csky_arch) String(ck810) Value(4)\n \n+EnumValue\n+Enum(csky_arch) String(ck860) Value(5)\n+\n Enum\n Name(csky_fpu) Type(enum csky_fpu_type)\n Known CSKY FPUs (for use with the -mfpu= option):\n@@ -226,5 +235,17 @@ Enum(csky_fpu) String(fpv2) Value(TARGET_FPU_fpv2)\n EnumValue\n Enum(csky_fpu) String(fpv2_divd) Value(TARGET_FPU_fpv2_divd)\n \n+EnumValue\n+Enum(csky_fpu) String(fpv3_hf) Value(TARGET_FPU_fpv3_hf)\n+\n+EnumValue\n+Enum(csky_fpu) String(fpv3_hsf) Value(TARGET_FPU_fpv3_hsf)\n+\n+EnumValue\n+Enum(csky_fpu) String(fpv3_sdf) Value(TARGET_FPU_fpv3_sdf)\n+\n+EnumValue\n+Enum(csky_fpu) String(fpv3) Value(TARGET_FPU_fpv3)\n+\n EnumValue\n Enum(csky_fpu) String(auto) Value(TARGET_FPU_auto)"}, {"sha": "878446de0332ac960148f232673fffb208c6675d", "filename": "gcc/config/csky/predicates.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fpredicates.md?ref=db92bd223e3957ee58b5a0c0fffd8b7766f1def3", "patch": "@@ -294,5 +294,4 @@\n })\n \n (define_special_predicate \"csky_float_comparison_operator\"\n-  (match_code \"eq,ne,le,lt,ge,gt,geu,gtu,leu,ltu,\n-\t       unordered,ordered\"))\n+  (match_code \"eq,ne,le,lt,ge,gt,unordered,ordered\"))"}, {"sha": "4e7fcbe462b2203fbc1a1e01c19a2cda891af29a", "filename": "gcc/config/csky/t-csky-elf", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Ft-csky-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Ft-csky-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Ft-csky-elf?ref=db92bd223e3957ee58b5a0c0fffd8b7766f1def3", "patch": "@@ -27,8 +27,8 @@ MULTILIB_MATCHES      = mbig-endian=EB\n MULTILIB_EXCEPTIONS   =\n \n # Arch variants.\n-MULTILIB_OPTIONS     += mcpu=ck802/mcpu=ck801/mcpu=ck803f/mcpu=ck807f/mcpu=ck810f\n-MULTILIB_DIRNAMES    += ck802 ck801 ck803 ck807 ck810\n+MULTILIB_OPTIONS     += mcpu=ck802/mcpu=ck801/mcpu=ck803f/mcpu=ck807f/mcpu=ck810f/mcpu=ck860f\n+MULTILIB_DIRNAMES    += ck802 ck801 ck803 ck807 ck810 ck860\n \n # For arch ck802.\n MULTILIB_MATCHES     += mcpu?ck802=march?ck802\n@@ -100,6 +100,11 @@ MULTILIB_MATCHES     += mcpu?ck807f=march?ck807ef\n MULTILIB_MATCHES     += mcpu?ck807f=march?ck807\n MULTILIB_MATCHES     += mcpu?ck807f=mcpu?ck807\n \n+# For arch ck860\n+MULTILIB_MATCHES     += mcpu?ck860f=march?ck860\n+MULTILIB_MATCHES     += mcpu?ck860f=mcpu?ck860\n+MULTILIB_MATCHES     += mcpu?ck860f=mcpu?c860\n+\n # For option -mfloat-abi=\n MULTILIB_OPTIONS     += mfloat-abi=soft/mfloat-abi=softfp/mfloat-abi=hard\n MULTILIB_DIRNAMES    += soft soft-fp hard-fp"}, {"sha": "0730c3a498a4f7ff584f2e35366bfcab5edcd9ff", "filename": "gcc/config/csky/t-csky-linux", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Ft-csky-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fconfig%2Fcsky%2Ft-csky-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Ft-csky-linux?ref=db92bd223e3957ee58b5a0c0fffd8b7766f1def3", "patch": "@@ -21,11 +21,11 @@\n \n \n MULTILIB_EXCEPTIONS  =\n-CSKY_MULTILIB_OSDIRNAMES = mfloat-abi.softfp=/soft-fp mfloat-abi.hard=/hard-fp mfloat-abi.soft=/. mcpu.ck810f=/. mcpu.ck807f=/ck807\n+CSKY_MULTILIB_OSDIRNAMES = mfloat-abi.softfp=/soft-fp mfloat-abi.hard=/hard-fp mfloat-abi.soft=/. mcpu.ck810f=/. mcpu.ck807f=/ck807 mcpu.ck860f=/ck860\n \n # Arch variants.\n-MULTILIB_OPTIONS     += mcpu=ck810f/mcpu=ck807f\n-MULTILIB_DIRNAMES    += ck810 ck807\n+MULTILIB_OPTIONS     += mcpu=ck810f/mcpu=ck807f/mcpu=ck860f\n+MULTILIB_DIRNAMES    += ck810 ck807 ck860\n \n # For ck807.\n MULTILIB_MATCHES     += mcpu?ck807f=march?ck807\n@@ -41,6 +41,11 @@ MULTILIB_MATCHES     += mcpu?ck810f=mcpu?ck810vf\n MULTILIB_MATCHES     += mcpu?ck810f=mcpu?ck810ft\n MULTILIB_MATCHES     += mcpu?ck810f=mcpu?ck810vft\n \n+# For ck860\n+MULTILIB_MATCHES     += mcpu?ck860f=march?ck860\n+MULTILIB_MATCHES     += mcpu?ck860f=mcpu?ck860\n+MULTILIB_MATCHES     += mcpu?ck860f=mcpu?c860\n+\n # For option -mfloat-abi=\n MULTILIB_OPTIONS     += mfloat-abi=soft/mfloat-abi=softfp/mfloat-abi=hard\n MULTILIB_DIRNAMES    += soft soft-fp hard-fp"}, {"sha": "00caf3844ccf8ea289d581839766502d51b9e8d7", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db92bd223e3957ee58b5a0c0fffd8b7766f1def3/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=db92bd223e3957ee58b5a0c0fffd8b7766f1def3", "patch": "@@ -2258,6 +2258,14 @@ Vector registers.\n \n @item z\n Stack pointer register (SP).\n+\n+@item Q\n+A memory address which uses a base register with a short offset\n+or with a index register with its scale.\n+\n+@item W\n+A memory address which uses a base register with a index register\n+with its scale.\n @end table\n \n @ifset INTERNALS"}]}