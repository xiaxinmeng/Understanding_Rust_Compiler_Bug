{"sha": "155768d65f390246004dfe2d6ca22c62d405dc96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU1NzY4ZDY1ZjM5MDI0NjAwNGRmZTJkNmNhMjJjNjJkNDA1ZGM5Ng==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2016-01-15T09:57:02Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2016-01-15T09:57:02Z"}, "message": "lto-streamer-out.c (subtract_estimated_size): New function.\n\n\t* lto-streamer-out.c (subtract_estimated_size): New function.\n\t(get_symbol_initial_value): Use it.\n\nFrom-SVN: r232407", "tree": {"sha": "e6aabddf4ac4b5e680f4935b3336ec292fee8af9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6aabddf4ac4b5e680f4935b3336ec292fee8af9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/155768d65f390246004dfe2d6ca22c62d405dc96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/155768d65f390246004dfe2d6ca22c62d405dc96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/155768d65f390246004dfe2d6ca22c62d405dc96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/155768d65f390246004dfe2d6ca22c62d405dc96/comments", "author": null, "committer": null, "parents": [{"sha": "092f7deb4ce52cbdda85b3a640b9662f475672cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/092f7deb4ce52cbdda85b3a640b9662f475672cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/092f7deb4ce52cbdda85b3a640b9662f475672cb"}], "stats": {"total": 50, "additions": 48, "deletions": 2}, "files": [{"sha": "006493bb4b077c734b146920b38c3e261deaae15", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155768d65f390246004dfe2d6ca22c62d405dc96/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155768d65f390246004dfe2d6ca22c62d405dc96/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=155768d65f390246004dfe2d6ca22c62d405dc96", "patch": "@@ -1,3 +1,8 @@\n+2016-01-15  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* lto-streamer-out.c (subtract_estimated_size): New function.\n+\t(get_symbol_initial_value): Use it.\n+\n 2016-01-15  Christian Bruel  <christian.bruel@st.com>\n \n \tPR target/65837"}, {"sha": "0cefc15f3e6646b7efcf98b16484bacf08bf37f2", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155768d65f390246004dfe2d6ca22c62d405dc96/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155768d65f390246004dfe2d6ca22c62d405dc96/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=155768d65f390246004dfe2d6ca22c62d405dc96", "patch": "@@ -309,6 +309,41 @@ lto_is_streamable (tree expr)\n \t     || TREE_CODE_CLASS (code) != tcc_statement);\n }\n \n+/* Very rough estimate of streaming size of the initializer.  If we ignored\n+   presence of strings, we could simply just count number of non-indexable\n+   tree nodes and number of references to indexable nodes.  Strings however\n+   may be very large and we do not want to dump them int othe global stream.\n+\n+   Count the size of initializer until the size in DATA is positive.  */\n+\n+static tree\n+subtract_estimated_size (tree *tp, int *ws, void *data)\n+{\n+  long *sum = (long *)data;\n+  if (tree_is_indexable (*tp))\n+    {\n+      /* Indexable tree is one reference to global stream.\n+\t Guess it may be about 4 bytes.  */\n+      *sum -= 4;\n+      *ws = 0;\n+    }\n+  /* String table entry + base of tree node needs to be streamed.  */\n+  if (TREE_CODE (*tp) == STRING_CST)\n+    *sum -= TREE_STRING_LENGTH (*tp) + 8;\n+  else\n+    {\n+      /* Identifiers are also variable length but should not appear\n+\t naked in constructor.  */\n+      gcc_checking_assert (TREE_CODE (*tp) != IDENTIFIER_NODE);\n+      /* We do not really make attempt to work out size of pickled tree, as\n+\t it is very variable. Make it bigger than the reference.  */\n+      *sum -= 16;\n+    }\n+  if (*sum < 0)\n+    return *tp;\n+  return NULL_TREE;\n+}\n+\n \n /* For EXPR lookup and return what we want to stream to OB as DECL_INITIAL.  */\n \n@@ -329,10 +364,16 @@ get_symbol_initial_value (lto_symtab_encoder_t encoder, tree expr)\n       varpool_node *vnode;\n       /* Extra section needs about 30 bytes; do not produce it for simple\n \t scalar values.  */\n-      if (TREE_CODE (DECL_INITIAL (expr)) == CONSTRUCTOR\n-\t  || !(vnode = varpool_node::get (expr))\n+      if (!(vnode = varpool_node::get (expr))\n \t  || !lto_symtab_encoder_encode_initializer_p (encoder, vnode))\n         initial = error_mark_node;\n+      if (initial != error_mark_node)\n+\t{\n+\t  long max_size = 30;\n+\t  if (walk_tree (&initial, subtract_estimated_size, (void *)&max_size,\n+\t\t\t NULL))\n+\t    initial = error_mark_node;\n+\t}\n     }\n \n   return initial;"}]}