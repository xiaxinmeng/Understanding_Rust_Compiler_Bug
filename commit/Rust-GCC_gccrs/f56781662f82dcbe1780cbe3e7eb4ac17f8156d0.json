{"sha": "f56781662f82dcbe1780cbe3e7eb4ac17f8156d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU2NzgxNjYyZjgyZGNiZTE3ODBjYmUzZTdlYjRhYzE3ZjgxNTZkMA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-19T18:32:41Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-19T18:38:51Z"}, "message": "Assignments are a coercion site in rust\n\nThis implements the reference mutability coercion rules, where the base\ntypes must be compatible and the base can turn a mutable reference into\na constant one.\n\nAddress #434\nFixes #576", "tree": {"sha": "c9119796d4330f6dda5d93f85de80044de723cb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9119796d4330f6dda5d93f85de80044de723cb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f56781662f82dcbe1780cbe3e7eb4ac17f8156d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f56781662f82dcbe1780cbe3e7eb4ac17f8156d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f56781662f82dcbe1780cbe3e7eb4ac17f8156d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f56781662f82dcbe1780cbe3e7eb4ac17f8156d0/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cbd3afc714a1d874fd829108f9b51a44205c050", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cbd3afc714a1d874fd829108f9b51a44205c050", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cbd3afc714a1d874fd829108f9b51a44205c050"}], "stats": {"total": 62, "additions": 41, "deletions": 21}, "files": [{"sha": "efca267e7d4d26b0326248e55ea42f18ca56e836", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56781662f82dcbe1780cbe3e7eb4ac17f8156d0/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56781662f82dcbe1780cbe3e7eb4ac17f8156d0/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=f56781662f82dcbe1780cbe3e7eb4ac17f8156d0", "patch": "@@ -537,6 +537,10 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n     Btype *base_compiled_type\n       = TyTyResolveCompile::compile (ctx, type.get_base ());\n     translated = ctx->get_backend ()->reference_type (base_compiled_type);\n+    if (!type.is_mutable ())\n+      {\n+\ttranslated = ctx->get_backend ()->immutable_type (translated);\n+      }\n   }\n \n   void visit (TyTy::StrType &type) override"}, {"sha": "b53cd4689fc82ff1a755e74eeda028972c61c902", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56781662f82dcbe1780cbe3e7eb4ac17f8156d0/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56781662f82dcbe1780cbe3e7eb4ac17f8156d0/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=f56781662f82dcbe1780cbe3e7eb4ac17f8156d0", "patch": "@@ -348,7 +348,7 @@ class TypeCheckExpr : public TypeCheckBase\n     auto lhs = TypeCheckExpr::Resolve (expr.get_lhs (), false);\n     auto rhs = TypeCheckExpr::Resolve (expr.get_rhs (), false);\n \n-    auto result = lhs->unify (rhs);\n+    auto result = lhs->coerce (rhs);\n     if (result->get_kind () == TyTy::TypeKind::ERROR)\n       return;\n "}, {"sha": "1b6f47c1595737a81b39e08b8a60256fb1bd2b67", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56781662f82dcbe1780cbe3e7eb4ac17f8156d0/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56781662f82dcbe1780cbe3e7eb4ac17f8156d0/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=f56781662f82dcbe1780cbe3e7eb4ac17f8156d0", "patch": "@@ -80,7 +80,7 @@ class TypeCheckStmt : public TypeCheckBase\n     // let x:i32 = 123;\n     if (specified_ty != nullptr && init_expr_ty != nullptr)\n       {\n-\tauto unified_ty = specified_ty->unify (init_expr_ty);\n+\tauto unified_ty = specified_ty->coerce (init_expr_ty);\n \tif (unified_ty->get_kind () == TyTy::TypeKind::ERROR)\n \t  return;\n "}, {"sha": "5c10b0404f2a6c799bf46835cfb1ad33ea1ee4e3", "filename": "gcc/rust/typecheck/rust-tyty-coercion.h", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56781662f82dcbe1780cbe3e7eb4ac17f8156d0/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56781662f82dcbe1780cbe3e7eb4ac17f8156d0/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h?ref=f56781662f82dcbe1780cbe3e7eb4ac17f8156d0", "patch": "@@ -93,7 +93,7 @@ class BaseCoercionRules : public TyVisitor\n     Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n     RichLocation r (ref_locus);\n     r.add_range (base_locus);\n-    rust_error_at (r, \"cannot coerce [%s] with [%s]\",\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n@@ -104,7 +104,7 @@ class BaseCoercionRules : public TyVisitor\n     Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n     RichLocation r (ref_locus);\n     r.add_range (base_locus);\n-    rust_error_at (r, \"cannot coerce [%s] with [%s]\",\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n@@ -115,7 +115,7 @@ class BaseCoercionRules : public TyVisitor\n     Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n     RichLocation r (ref_locus);\n     r.add_range (base_locus);\n-    rust_error_at (r, \"cannot coerce [%s] with [%s]\",\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n@@ -126,7 +126,7 @@ class BaseCoercionRules : public TyVisitor\n     Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n     RichLocation r (ref_locus);\n     r.add_range (base_locus);\n-    rust_error_at (r, \"cannot coerce [%s] with [%s]\",\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n@@ -137,7 +137,7 @@ class BaseCoercionRules : public TyVisitor\n     Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n     RichLocation r (ref_locus);\n     r.add_range (base_locus);\n-    rust_error_at (r, \"cannot coerce [%s] with [%s]\",\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n@@ -148,7 +148,7 @@ class BaseCoercionRules : public TyVisitor\n     Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n     RichLocation r (ref_locus);\n     r.add_range (base_locus);\n-    rust_error_at (r, \"cannot coerce [%s] with [%s]\",\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n@@ -159,7 +159,7 @@ class BaseCoercionRules : public TyVisitor\n     Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n     RichLocation r (ref_locus);\n     r.add_range (base_locus);\n-    rust_error_at (r, \"cannot coerce [%s] with [%s]\",\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n@@ -170,7 +170,7 @@ class BaseCoercionRules : public TyVisitor\n     Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n     RichLocation r (ref_locus);\n     r.add_range (base_locus);\n-    rust_error_at (r, \"cannot coerce [%s] with [%s]\",\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n@@ -181,7 +181,7 @@ class BaseCoercionRules : public TyVisitor\n     Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n     RichLocation r (ref_locus);\n     r.add_range (base_locus);\n-    rust_error_at (r, \"cannot coerce [%s] with [%s]\",\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n@@ -192,7 +192,7 @@ class BaseCoercionRules : public TyVisitor\n     Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n     RichLocation r (ref_locus);\n     r.add_range (base_locus);\n-    rust_error_at (r, \"cannot coerce [%s] with [%s]\",\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n@@ -203,7 +203,7 @@ class BaseCoercionRules : public TyVisitor\n     Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n     RichLocation r (ref_locus);\n     r.add_range (base_locus);\n-    rust_error_at (r, \"cannot coerce [%s] with [%s]\",\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n@@ -214,7 +214,7 @@ class BaseCoercionRules : public TyVisitor\n     Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n     RichLocation r (ref_locus);\n     r.add_range (base_locus);\n-    rust_error_at (r, \"cannot coerce [%s] with [%s]\",\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n@@ -225,7 +225,7 @@ class BaseCoercionRules : public TyVisitor\n     Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n     RichLocation r (ref_locus);\n     r.add_range (base_locus);\n-    rust_error_at (r, \"cannot coerce [%s] with [%s]\",\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n@@ -236,7 +236,7 @@ class BaseCoercionRules : public TyVisitor\n     Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n     RichLocation r (ref_locus);\n     r.add_range (base_locus);\n-    rust_error_at (r, \"cannot coerce [%s] with [%s]\",\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n@@ -247,7 +247,7 @@ class BaseCoercionRules : public TyVisitor\n     Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n     RichLocation r (ref_locus);\n     r.add_range (base_locus);\n-    rust_error_at (r, \"cannot coerce [%s] with [%s]\",\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n@@ -258,7 +258,7 @@ class BaseCoercionRules : public TyVisitor\n     Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n     RichLocation r (ref_locus);\n     r.add_range (base_locus);\n-    rust_error_at (r, \"cannot coerce [%s] with [%s]\",\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n@@ -269,7 +269,7 @@ class BaseCoercionRules : public TyVisitor\n     Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n     RichLocation r (ref_locus);\n     r.add_range (base_locus);\n-    rust_error_at (r, \"cannot coerce [%s] with [%s]\",\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n@@ -280,7 +280,7 @@ class BaseCoercionRules : public TyVisitor\n     Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n     RichLocation r (ref_locus);\n     r.add_range (base_locus);\n-    rust_error_at (r, \"cannot coerce [%s] with [%s]\",\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }\n@@ -291,7 +291,7 @@ class BaseCoercionRules : public TyVisitor\n     Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n     RichLocation r (ref_locus);\n     r.add_range (base_locus);\n-    rust_error_at (r, \"cannot coerce [%s] with [%s]\",\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n \t\t   get_base ()->as_string ().c_str (),\n \t\t   type.as_string ().c_str ());\n   }"}, {"sha": "3d979269cf222cd5152060d185de9176a26bfcf1", "filename": "gcc/testsuite/rust/compile/reference1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56781662f82dcbe1780cbe3e7eb4ac17f8156d0/gcc%2Ftestsuite%2Frust%2Fcompile%2Freference1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56781662f82dcbe1780cbe3e7eb4ac17f8156d0/gcc%2Ftestsuite%2Frust%2Fcompile%2Freference1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Freference1.rs?ref=f56781662f82dcbe1780cbe3e7eb4ac17f8156d0", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let a = &123;\n+    let b: &mut i32 = a;\n+    // { dg-error \"expected .&mut i32. got .& i32.\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "3bfa938ffdcb1e7cda0c3a94c0583c7c28d06999", "filename": "gcc/testsuite/rust/compile/torture/coercion1.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56781662f82dcbe1780cbe3e7eb4ac17f8156d0/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcoercion1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56781662f82dcbe1780cbe3e7eb4ac17f8156d0/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcoercion1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcoercion1.rs?ref=f56781662f82dcbe1780cbe3e7eb4ac17f8156d0", "patch": "@@ -0,0 +1,11 @@\n+pub fn main() {\n+    let a: &i32 = &123;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    let b: &mut i32 = &mut 123;\n+\n+    let c: &i32 = &mut 123;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    let d: &i32 = b;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}]}