{"sha": "f4b4ce152a06578d94ae7630cffd655d590b2857", "node_id": "C_kwDOANBUbNoAKGY0YjRjZTE1MmEwNjU3OGQ5NGFlNzYzMGNmZmQ2NTVkNTkwYjI4NTc", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2021-10-13T20:04:32Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2021-11-09T20:50:17Z"}, "message": "libstdc++: [_GLIBCXX_DEBUG] Implement unordered container merge\n\nThe _GLIBCXX_DEBUG unordered containers need a dedicated merge implementation\nso that any existing iterator on the transfered nodes is properly invalidated.\n\nAdd typedef/using declarations for everything used as-is from normal implementation.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/hashtable_policy.h (__distance_fw): Replace class keyword with\n\ttypename.\n\t* include/bits/hashtable.h (_Hashtable<>::_M_merge_unique): Remove noexcept\n\tqualification. Use const_iterator for node extraction/reinsert.\n\t(_Hashtable<>::_M_merge_multi): Likewise. Compute new hash code before extract.\n\t* include/debug/safe_container.h (_Safe_container<>): Make all methods\n\tprotected.\n\t* include/debug/safe_unordered_container.h\n\t(_Safe_unordered_container<>::_UContInvalidatePred<_ExtractKey, _Source>): New.\n\t(_Safe_unordered_container<>::_UMContInvalidatePred<_ExtractKey, _Source>): New.\n\t(_Safe_unordered_container<>::_UContMergeGuard<_Source, _InvalidatePred>): New.\n\t(_Safe_unordered_container<>::_S_uc_guard<_ExtractKey, _Source>): New.\n\t(_Safe_unordered_container<>::_S_umc_guard<_ExtractKey, _Source>): New.\n\t(_Safe_unordered_container<>::_M_invalide_all): Make public.\n\t(_Safe_unordered_container<>::_M_invalide_if): Likewise.\n\t(_Safe_unordered_container<>::_M_invalide_local_if): Likewise.\n\t* include/debug/unordered_map\n\t(unordered_map<>::mapped_type, pointer, const_pointer): New typedef.\n\t(unordered_map<>::reference, const_reference, difference_type): New typedef.\n\t(unordered_map<>::get_allocator, empty, size, max_size): Add usings.\n\t(unordered_map<>::bucket_count, max_bucket_count, bucket): Add usings.\n\t(unordered_map<>::hash_function, key_equal, count, contains): Add usings.\n\t(unordered_map<>::operator[], at, rehash, reserve): Add usings.\n\t(unordered_map<>::merge): New.\n\t(unordered_multimap<>::mapped_type, pointer, const_pointer): New typedef.\n\t(unordered_multimap<>::reference, const_reference, difference_type): New typedef.\n\t(unordered_multimap<>::get_allocator, empty, size, max_size): Add usings.\n\t(unordered_multimap<>::bucket_count, max_bucket_count, bucket): Add usings.\n\t(unordered_multimap<>::hash_function, key_equal, count, contains): Add usings.\n\t(unordered_multimap<>::rehash, reserve): Add usings.\n\t(unordered_multimap<>::merge): New.\n\t* include/debug/unordered_set\n\t(unordered_set<>::mapped_type, pointer, const_pointer): New typedef.\n\t(unordered_set<>::reference, const_reference, difference_type): New typedef.\n\t(unordered_set<>::get_allocator, empty, size, max_size): Add usings.\n\t(unordered_set<>::bucket_count, max_bucket_count, bucket): Add usings.\n\t(unordered_set<>::hash_function, key_equal, count, contains): Add usings.\n\t(unordered_set<>::rehash, reserve): Add usings.\n\t(unordered_set<>::merge): New.\n\t(unordered_multiset<>::mapped_type, pointer, const_pointer): New typedef.\n\t(unordered_multiset<>::reference, const_reference, difference_type): New typedef.\n\t(unordered_multiset<>::get_allocator, empty, size, max_size): Add usings.\n\t(unordered_multiset<>::bucket_count, max_bucket_count, bucket): Add usings.\n\t(unordered_multiset<>::hash_function, key_equal, count, contains): Add usings.\n\t(unordered_multiset<>::rehash, reserve): Add usings.\n\t(unordered_multiset<>::merge): New.\n\t* testsuite/23_containers/unordered_map/debug/merge1_neg.cc: New test.\n\t* testsuite/23_containers/unordered_map/debug/merge2_neg.cc: New test.\n\t* testsuite/23_containers/unordered_map/debug/merge3_neg.cc: New test.\n\t* testsuite/23_containers/unordered_map/debug/merge4_neg.cc: New test.\n\t* testsuite/23_containers/unordered_multimap/debug/merge1_neg.cc: New test.\n\t* testsuite/23_containers/unordered_multimap/debug/merge2_neg.cc: New test.\n\t* testsuite/23_containers/unordered_multimap/debug/merge3_neg.cc: New test.\n\t* testsuite/23_containers/unordered_multimap/debug/merge4_neg.cc: New test.\n\t* testsuite/23_containers/unordered_multiset/debug/merge1_neg.cc: New test.\n\t* testsuite/23_containers/unordered_multiset/debug/merge2_neg.cc: New test.\n\t* testsuite/23_containers/unordered_multiset/debug/merge3_neg.cc: New test.\n\t* testsuite/23_containers/unordered_multiset/debug/merge4_neg.cc: New test.\n\t* testsuite/23_containers/unordered_set/debug/merge1_neg.cc: New test.\n\t* testsuite/23_containers/unordered_set/debug/merge2_neg.cc: New test.\n\t* testsuite/23_containers/unordered_set/debug/merge3_neg.cc: New test.\n\t* testsuite/23_containers/unordered_set/debug/merge4_neg.cc: New test.\n\t* testsuite/util/testsuite_abi.h: [_GLIBCXX_DEBUG] Use normal unordered\n\tcontainer implementation.", "tree": {"sha": "46615606217dc6b64d3370cb652c96537abfd567", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46615606217dc6b64d3370cb652c96537abfd567"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4b4ce152a06578d94ae7630cffd655d590b2857", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4b4ce152a06578d94ae7630cffd655d590b2857", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4b4ce152a06578d94ae7630cffd655d590b2857", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4b4ce152a06578d94ae7630cffd655d590b2857/comments", "author": null, "committer": null, "parents": [{"sha": "f7844b6a777cb47fec7208d7bd594f6ce66f1daa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7844b6a777cb47fec7208d7bd594f6ce66f1daa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7844b6a777cb47fec7208d7bd594f6ce66f1daa"}], "stats": {"total": 858, "additions": 845, "deletions": 13}, "files": [{"sha": "0e949d7361462891252871fbad9836e6e03a63ef", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=f4b4ce152a06578d94ae7630cffd655d590b2857", "patch": "@@ -1065,14 +1065,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /// Merge from a compatible container into one with unique keys.\n       template<typename _Compatible_Hashtable>\n \tvoid\n-\t_M_merge_unique(_Compatible_Hashtable& __src) noexcept\n+\t_M_merge_unique(_Compatible_Hashtable& __src)\n \t{\n \t  static_assert(is_same_v<typename _Compatible_Hashtable::node_type,\n \t      node_type>, \"Node types are compatible\");\n \t  __glibcxx_assert(get_allocator() == __src.get_allocator());\n \n \t  auto __n_elt = __src.size();\n-\t  for (auto __i = __src.begin(), __end = __src.end(); __i != __end;)\n+\t  for (auto __i = __src.cbegin(), __end = __src.cend(); __i != __end;)\n \t    {\n \t      auto __pos = __i++;\n \t      const key_type& __k = _ExtractKey{}(*__pos);\n@@ -1093,15 +1093,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /// Merge from a compatible container into one with equivalent keys.\n       template<typename _Compatible_Hashtable>\n \tvoid\n-\t_M_merge_multi(_Compatible_Hashtable& __src) noexcept\n+\t_M_merge_multi(_Compatible_Hashtable& __src)\n \t{\n \t  static_assert(is_same_v<typename _Compatible_Hashtable::node_type,\n \t      node_type>, \"Node types are compatible\");\n \t  __glibcxx_assert(get_allocator() == __src.get_allocator());\n \n \t  this->reserve(size() + __src.size());\n-\t  for (auto __i = __src.begin(), __end = __src.end(); __i != __end;)\n-\t    _M_reinsert_node_multi(cend(), __src.extract(__i++));\n+\t  for (auto __i = __src.cbegin(), __end = __src.cend(); __i != __end;)\n+\t    {\n+\t      auto __pos = __i++;\n+\t      const key_type& __k = _ExtractKey{}(*__pos);\n+\t      __hash_code __code = this->_M_hash_code(__k);\n+\t      auto __nh = __src.extract(__pos);\n+\t      _M_insert_multi_node(nullptr, __code, __nh._M_ptr);\n+\t      __nh._M_ptr = nullptr;\n+\t    }\n \t}\n #endif // C++17\n "}, {"sha": "c0295b759634464232a516060b2ab366b58a0b7b", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=f4b4ce152a06578d94ae7630cffd655d590b2857", "patch": "@@ -60,19 +60,19 @@ namespace __detail\n \n   // Helper function: return distance(first, last) for forward\n   // iterators, or 0/1 for input iterators.\n-  template<class _Iterator>\n+  template<typename _Iterator>\n     inline typename std::iterator_traits<_Iterator>::difference_type\n     __distance_fw(_Iterator __first, _Iterator __last,\n \t\t  std::input_iterator_tag)\n     { return __first != __last ? 1 : 0; }\n \n-  template<class _Iterator>\n+  template<typename _Iterator>\n     inline typename std::iterator_traits<_Iterator>::difference_type\n     __distance_fw(_Iterator __first, _Iterator __last,\n \t\t  std::forward_iterator_tag)\n     { return std::distance(__first, __last); }\n \n-  template<class _Iterator>\n+  template<typename _Iterator>\n     inline typename std::iterator_traits<_Iterator>::difference_type\n     __distance_fw(_Iterator __first, _Iterator __last)\n     { return __distance_fw(__first, __last,"}, {"sha": "5de55d69f3437333bb138c074390c3ddf0c942d7", "filename": "libstdc++-v3/include/debug/safe_container.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_container.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_container.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_container.h?ref=f4b4ce152a06578d94ae7630cffd655d590b2857", "patch": "@@ -78,7 +78,6 @@ namespace __gnu_debug\n       { }\n #endif\n \n-    public:\n       // Copy assignment invalidate all iterators.\n       _Safe_container&\n       operator=(const _Safe_container&) _GLIBCXX_NOEXCEPT"}, {"sha": "ce9d9ea4091ae954eb7986d961c88f8381099a57", "filename": "libstdc++-v3/include/debug/safe_unordered_container.h", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_unordered_container.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_unordered_container.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_unordered_container.h?ref=f4b4ce152a06578d94ae7630cffd655d590b2857", "patch": "@@ -72,6 +72,96 @@ namespace __gnu_debug\n \t\t{ return __it != __local_end; });\n       }\n \n+#if __cplusplus > 201402L\n+      template<typename _ExtractKey, typename _Source>\n+\tstruct _UContInvalidatePred\n+\t{\n+\t  template<typename _Iterator>\n+\t    bool\n+\t    operator()(_Iterator __it) const\n+\t    { return _M_source.count(_ExtractKey{}(*__it)) == 0; }\n+\n+\t  const _Source& _M_source;\n+\t};\n+\n+      template<typename _ExtractKey, typename _Source>\n+\tstruct _UMContInvalidatePred\n+\t{\n+\t  template<typename _Iterator>\n+\t    bool\n+\t    operator()(_Iterator __it) const\n+\t    {\n+\t      auto __rng =\n+\t\t_M_source._M_base().equal_range(_ExtractKey{}(*__it));\n+\t      for (auto __rit = __rng.first;\n+\t\t   __rit != __rng.second; ++__rit)\n+\t\t{\n+\t\t  if (__it == __rit)\n+\t\t    return false;\n+\t\t}\n+\n+\t      return true;\n+\t    }\n+\n+\t  const _Source& _M_source;\n+\t};\n+\n+      template<typename _Source, typename _InvalidatePred>\n+\tstruct _UContMergeGuard\n+\t{\n+\t  _UContMergeGuard(_Source& __src) noexcept\n+\t  : _M_source(__src), _M_size(__src.size()), _M_pred { __src }\n+\t  { }\n+\n+\t  _UContMergeGuard(const _UContMergeGuard&) = delete;\n+\n+\t  ~_UContMergeGuard()\n+\t  {\n+\t    const std::size_t __size = _M_source.size();\n+\t    if (__size == _M_size)\n+\t      return;\n+\n+\t    __try\n+\t      {\n+\t\tif (__size == 0)\n+\t\t  _M_source._M_invalidate_all();\n+\t\telse\n+\t\t  {\n+\t\t    _M_source._M_invalidate_if(_M_pred);\n+\t\t    _M_source._M_invalidate_local_if(_M_pred);\n+\t\t  }\n+\t      }\n+\t    __catch(...)\n+\t      {\n+\t\t_M_source._M_invalidate_all();\n+\t      }\n+\t  }\n+\n+\t  _Source& _M_source;\n+\t  const std::size_t _M_size;\n+\t  _InvalidatePred _M_pred;\n+\t};\n+\n+      template<typename _ExtractKey, typename _Source>\n+\tstatic _UContMergeGuard<_Source,\n+\t\t\t\t_UContInvalidatePred<_ExtractKey, _Source>>\n+\t_S_uc_guard(_ExtractKey, _Source& __src)\n+\t{\n+\t  typedef _UContInvalidatePred<_ExtractKey, _Source> _InvalidatePred;\n+\t  return _UContMergeGuard<_Source, _InvalidatePred>(__src);\n+\t}\n+\n+      template<typename _ExtractKey, typename _Source>\n+\tstatic _UContMergeGuard<_Source,\n+\t\t\t\t_UMContInvalidatePred<_ExtractKey, _Source>>\n+\t_S_umc_guard(_ExtractKey, _Source& __src)\n+\t{\n+\t  typedef _UMContInvalidatePred<_ExtractKey, _Source> _InvalidatePred;\n+\t  return _UContMergeGuard<_Source, _InvalidatePred>(__src);\n+\t}\n+#endif // C++17\n+\n+    public:\n       void\n       _M_invalidate_all()\n       {"}, {"sha": "d6e184a2e997e6d89d1ae9a985140451d1e1edc2", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 111, "deletions": 2, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=f4b4ce152a06578d94ae7630cffd655d590b2857", "patch": "@@ -97,7 +97,12 @@ namespace __debug\n \n       typedef typename _Base::key_type\t\t\tkey_type;\n       typedef typename _Base::value_type\t\tvalue_type;\n+      typedef typename _Base::mapped_type\t\tmapped_type;\n \n+      typedef typename _Base::pointer\t\t\tpointer;\n+      typedef typename _Base::const_pointer\t\tconst_pointer;\n+      typedef typename _Base::reference\t\t\treference;\n+      typedef typename _Base::const_reference\t\tconst_reference;\n       typedef __gnu_debug::_Safe_iterator<\n \t_Base_iterator, unordered_map>\t\t\titerator;\n       typedef __gnu_debug::_Safe_iterator<\n@@ -106,6 +111,7 @@ namespace __debug\n \t_Base_local_iterator, unordered_map>\t\tlocal_iterator;\n       typedef __gnu_debug::_Safe_local_iterator<\n \t_Base_const_local_iterator, unordered_map>\tconst_local_iterator;\n+      typedef typename _Base::difference_type\t\tdifference_type;\n \n       unordered_map() = default;\n \n@@ -209,6 +215,11 @@ namespace __debug\n \treturn *this;\n       }\n \n+      using _Base::get_allocator;\n+      using _Base::empty;\n+      using _Base::size;\n+      using _Base::max_size;\n+\n       void\n       swap(unordered_map& __x)\n \tnoexcept( noexcept(declval<_Base&>().swap(__x)) )\n@@ -291,13 +302,19 @@ namespace __debug\n \treturn { _Base::cend(__b), this };\n       }\n \n+      using _Base::bucket_count;\n+      using _Base::max_bucket_count;\n+      using _Base::bucket;\n+\n       size_type\n       bucket_size(size_type __b) const\n       {\n \t__glibcxx_check_bucket_index(__b);\n \treturn _Base::bucket_size(__b);\n       }\n \n+      using _Base::load_factor;\n+\n       float\n       max_load_factor() const noexcept\n       { return _Base::max_load_factor(); }\n@@ -538,9 +555,38 @@ namespace __debug\n \treturn { _Base::insert(__hint.base(), std::move(__nh)), this };\n       }\n \n-      using _Base::merge;\n+      template<typename _H2, typename _P2>\n+\tvoid\n+\tmerge(unordered_map<_Key, _Tp, _H2, _P2, _Alloc>& __source)\n+\t{\n+\t  auto __guard\n+\t    = _Safe::_S_uc_guard(std::__detail::_Select1st{}, __source);\n+\t  _Base::merge(__source._M_base());\n+\t}\n+\n+      template<typename _H2, typename _P2>\n+\tvoid\n+\tmerge(unordered_map<_Key, _Tp, _H2, _P2, _Alloc>&& __source)\n+\t{ merge(__source); }\n+\n+      template<typename _H2, typename _P2>\n+\tvoid\n+\tmerge(unordered_multimap<_Key, _Tp, _H2, _P2, _Alloc>& __source)\n+\t{\n+\t  auto __guard\n+\t    = _Safe::_S_umc_guard(std::__detail::_Select1st{}, __source);\n+\t  _Base::merge(__source._M_base());\n+\t}\n+\n+      template<typename _H2, typename _P2>\n+\tvoid\n+\tmerge(unordered_multimap<_Key, _Tp, _H2, _P2, _Alloc>&& __source)\n+\t{ merge(__source); }\n #endif // C++17\n \n+      using _Base::hash_function;\n+      using _Base::key_eq;\n+\n       iterator\n       find(const key_type& __key)\n       { return { _Base::find(__key), this }; }\n@@ -567,6 +613,11 @@ namespace __debug\n \t{ return { _Base::find(__k), this }; }\n #endif\n \n+      using _Base::count;\n+#if __cplusplus > 201703L\n+      using _Base::contains;\n+#endif\n+\n       std::pair<iterator, iterator>\n       equal_range(const key_type& __key)\n       {\n@@ -605,6 +656,9 @@ namespace __debug\n \t}\n #endif\n \n+      using _Base::operator[];\n+      using _Base::at;\n+\n       size_type\n       erase(const key_type& __key)\n       {\n@@ -651,6 +705,9 @@ namespace __debug\n \treturn { __next, this };\n       }\n \n+      using _Base::rehash;\n+      using _Base::reserve;\n+\n       _Base&\n       _M_base() noexcept\t{ return *this; }\n \n@@ -843,7 +900,12 @@ namespace __debug\n \n       typedef typename _Base::key_type\t\t\tkey_type;\n       typedef typename _Base::value_type\t\tvalue_type;\n+      typedef typename _Base::mapped_type\t\tmapped_type;\n \n+      typedef typename _Base::pointer\t\t\tpointer;\n+      typedef typename _Base::const_pointer\t\tconst_pointer;\n+      typedef typename _Base::reference\t\t\treference;\n+      typedef typename _Base::const_reference\t\tconst_reference;\n       typedef __gnu_debug::_Safe_iterator<\n \t_Base_iterator, unordered_multimap>\t\titerator;\n       typedef __gnu_debug::_Safe_iterator<\n@@ -852,6 +914,7 @@ namespace __debug\n \t_Base_local_iterator, unordered_multimap>\tlocal_iterator;\n       typedef __gnu_debug::_Safe_local_iterator<\n \t_Base_const_local_iterator, unordered_multimap>\tconst_local_iterator;\n+      typedef typename _Base::difference_type\t\tdifference_type;\n \n       unordered_multimap() = default;\n \n@@ -952,6 +1015,11 @@ namespace __debug\n \treturn *this;\n       }\n \n+      using _Base::get_allocator;\n+      using _Base::empty;\n+      using _Base::size;\n+      using _Base::max_size;\n+\n       void\n       swap(unordered_multimap& __x)\n \tnoexcept( noexcept(declval<_Base&>().swap(__x)) )\n@@ -1034,6 +1102,10 @@ namespace __debug\n \treturn { _Base::cend(__b), this };\n       }\n \n+      using _Base::bucket_count;\n+      using _Base::max_bucket_count;\n+      using _Base::bucket;\n+\n       size_type\n       bucket_size(size_type __b) const\n       {\n@@ -1192,9 +1264,38 @@ namespace __debug\n \treturn { _Base::insert(__hint.base(), std::move(__nh)), this };\n       }\n \n-      using _Base::merge;\n+      template<typename _H2, typename _P2>\n+\tvoid\n+\tmerge(unordered_multimap<_Key, _Tp, _H2, _P2, _Alloc>& __source)\n+\t{\n+\t  auto __guard\n+\t    = _Safe::_S_umc_guard(std::__detail::_Select1st{}, __source);\n+\t  _Base::merge(__source._M_base());\n+\t}\n+\n+      template<typename _H2, typename _P2>\n+\tvoid\n+\tmerge(unordered_multimap<_Key, _Tp, _H2, _P2, _Alloc>&& __source)\n+\t{ merge(__source); }\n+\n+      template<typename _H2, typename _P2>\n+\tvoid\n+\tmerge(unordered_map<_Key, _Tp, _H2, _P2, _Alloc>& __source)\n+\t{\n+\t  auto __guard\n+\t    = _Safe::_S_uc_guard(std::__detail::_Select1st{}, __source);\n+\t  _Base::merge(__source._M_base());\n+\t}\n+\n+      template<typename _H2, typename _P2>\n+\tvoid\n+\tmerge(unordered_map<_Key, _Tp, _H2, _P2, _Alloc>&& __source)\n+\t{ merge(__source); }\n #endif // C++17\n \n+      using _Base::hash_function;\n+      using _Base::key_eq;\n+\n       iterator\n       find(const key_type& __key)\n       { return { _Base::find(__key), this }; }\n@@ -1221,6 +1322,11 @@ namespace __debug\n \t{ return { _Base::find(__k), this }; }\n #endif\n \n+      using _Base::count;\n+#if __cplusplus > 201703L\n+      using _Base::contains;\n+#endif\n+\n       std::pair<iterator, iterator>\n       equal_range(const key_type& __key)\n       {\n@@ -1309,6 +1415,9 @@ namespace __debug\n \treturn { __next, this };\n       }\n \n+      using _Base::rehash;\n+      using _Base::reserve;\n+\n       _Base&\n       _M_base() noexcept { return *this; }\n "}, {"sha": "7dc91fa862dd86b27a7c0afe506977f07cc073fa", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 110, "deletions": 2, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=f4b4ce152a06578d94ae7630cffd655d590b2857", "patch": "@@ -88,13 +88,18 @@ namespace __debug\n \n     public:\n       typedef typename _Base::size_type\t\t\tsize_type;\n+      typedef typename _Base::difference_type\t\tdifference_type;\n       typedef typename _Base::hasher\t\t\thasher;\n       typedef typename _Base::key_equal\t\t\tkey_equal;\n       typedef typename _Base::allocator_type\t\tallocator_type;\n \n       typedef typename _Base::key_type\t\t\tkey_type;\n       typedef typename _Base::value_type\t\tvalue_type;\n \n+      typedef typename _Base::pointer\t\t\tpointer;\n+      typedef typename _Base::const_pointer\t\tconst_pointer;\n+      typedef typename _Base::reference\t\t\treference;\n+      typedef typename _Base::const_reference\t\tconst_reference;\n       typedef __gnu_debug::_Safe_iterator<\n \t_Base_iterator, unordered_set>\t\t\titerator;\n       typedef __gnu_debug::_Safe_iterator<\n@@ -203,6 +208,11 @@ namespace __debug\n \treturn *this;\n       }\n \n+      using _Base::get_allocator;\n+      using _Base::empty;\n+      using _Base::size;\n+      using _Base::max_size;\n+\n       void\n       swap(unordered_set& __x)\n \tnoexcept( noexcept(declval<_Base&>().swap(__x)) )\n@@ -285,13 +295,19 @@ namespace __debug\n \treturn { _Base::cend(__b), this };\n       }\n \n+      using _Base::bucket_count;\n+      using _Base::max_bucket_count;\n+\n       size_type\n       bucket_size(size_type __b) const\n       {\n \t__glibcxx_check_bucket_index(__b);\n \treturn _Base::bucket_size(__b);\n       }\n \n+      using _Base::bucket;\n+      using _Base::load_factor;\n+\n       float\n       max_load_factor() const noexcept\n       { return _Base::max_load_factor(); }\n@@ -303,6 +319,9 @@ namespace __debug\n \t_Base::max_load_factor(__f);\n       }\n \n+      using _Base::rehash;\n+      using _Base::reserve;\n+\n       template<typename... _Args>\n \tstd::pair<iterator, bool>\n \templace(_Args&&... __args)\n@@ -423,9 +442,38 @@ namespace __debug\n \treturn { _Base::insert(__hint.base(), std::move(__nh)), this };\n       }\n \n-      using _Base::merge;\n+      template<typename _H2, typename _P2>\n+\tvoid\n+\tmerge(unordered_set<_Value, _H2, _P2, _Alloc>& __source)\n+\t{\n+\t  auto __guard\n+\t    = _Safe::_S_uc_guard(std::__detail::_Identity{}, __source);\n+\t  _Base::merge(__source._M_base());\n+\t}\n+\n+      template<typename _H2, typename _P2>\n+\tvoid\n+\tmerge(unordered_set<_Value, _H2, _P2, _Alloc>&& __source)\n+\t{ merge(__source); }\n+\n+      template<typename _H2, typename _P2>\n+\tvoid\n+\tmerge(unordered_multiset<_Value, _H2, _P2, _Alloc>& __source)\n+\t{\n+\t  auto __guard\n+\t    = _Safe::_S_umc_guard(std::__detail::_Identity{}, __source);\n+\t  _Base::merge(__source._M_base());\n+\t}\n+\n+      template<typename _H2, typename _P2>\n+\tvoid\n+\tmerge(unordered_multiset<_Value, _H2, _P2, _Alloc>&& __source)\n+\t{ merge(__source); }\n #endif // C++17\n \n+      using _Base::hash_function;\n+      using _Base::key_eq;\n+\n       iterator\n       find(const key_type& __key)\n       { return { _Base::find(__key), this }; }\n@@ -452,6 +500,12 @@ namespace __debug\n \t{ return { _Base::find(__k), this }; }\n #endif\n \n+      using _Base::count;\n+\n+#if __cplusplus > 201703L\n+      using _Base::contains;\n+#endif\n+\n       std::pair<iterator, iterator>\n       equal_range(const key_type& __key)\n       {\n@@ -707,13 +761,18 @@ namespace __debug\n \n     public:\n       typedef typename _Base::size_type\t\t\tsize_type;\n+      typedef typename _Base::difference_type\t\tdifference_type;\n       typedef typename _Base::hasher\t\t\thasher;\n       typedef typename _Base::key_equal\t\t\tkey_equal;\n       typedef typename _Base::allocator_type\t\tallocator_type;\n \n       typedef typename _Base::key_type\t\t\tkey_type;\n       typedef typename _Base::value_type\t\tvalue_type;\n \n+      typedef typename _Base::pointer\t\t\tpointer;\n+      typedef typename _Base::const_pointer\t\tconst_pointer;\n+      typedef typename _Base::reference\t\t\treference;\n+      typedef typename _Base::const_reference\t\tconst_reference;\n       typedef __gnu_debug::_Safe_iterator<\n \t_Base_iterator, unordered_multiset>\t\titerator;\n       typedef __gnu_debug::_Safe_iterator<\n@@ -822,6 +881,11 @@ namespace __debug\n \treturn *this;\n       }\n \n+      using _Base::get_allocator;\n+      using _Base::empty;\n+      using _Base::size;\n+      using _Base::max_size;\n+\n       void\n       swap(unordered_multiset& __x)\n \tnoexcept( noexcept(declval<_Base&>().swap(__x)) )\n@@ -904,13 +968,19 @@ namespace __debug\n \treturn { _Base::cend(__b), this };\n       }\n \n+      using _Base::bucket_count;\n+      using _Base::max_bucket_count;\n+\n       size_type\n       bucket_size(size_type __b) const\n       {\n \t__glibcxx_check_bucket_index(__b);\n \treturn _Base::bucket_size(__b);\n       }\n \n+      using _Base::bucket;\n+      using _Base::load_factor;\n+\n       float\n       max_load_factor() const noexcept\n       { return _Base::max_load_factor(); }\n@@ -922,6 +992,9 @@ namespace __debug\n \t_Base::max_load_factor(__f);\n       }\n \n+      using _Base::rehash;\n+      using _Base::reserve;\n+\n       template<typename... _Args>\n \titerator\n \templace(_Args&&... __args)\n@@ -1037,9 +1110,38 @@ namespace __debug\n \treturn { _Base::insert(__hint.base(), std::move(__nh)), this };\n       }\n \n-      using _Base::merge;\n+      template<typename _H2, typename _P2>\n+\tvoid\n+\tmerge(unordered_multiset<_Value, _H2, _P2, _Alloc>& __source)\n+\t{\n+\t  auto __guard\n+\t    = _Safe::_S_umc_guard(std::__detail::_Identity{}, __source);\n+\t  _Base::merge(__source._M_base());\n+\t}\n+\n+      template<typename _H2, typename _P2>\n+\tvoid\n+\tmerge(unordered_multiset<_Value, _H2, _P2, _Alloc>&& __source)\n+\t{ merge(__source); }\n+\n+      template<typename _H2, typename _P2>\n+\tvoid\n+\tmerge(unordered_set<_Value, _H2, _P2, _Alloc>& __source)\n+\t{\n+\t  auto __guard\n+\t    = _Safe::_S_uc_guard(std::__detail::_Identity{}, __source);\n+\t  _Base::merge(__source._M_base());\n+\t}\n+\n+      template<typename _H2, typename _P2>\n+\tvoid\n+\tmerge(unordered_set<_Value, _H2, _P2, _Alloc>&& __source)\n+\t{ merge(__source); }\n #endif // C++17\n \n+      using _Base::hash_function;\n+      using _Base::key_eq;\n+\n       iterator\n       find(const key_type& __key)\n       { return { _Base::find(__key), this }; }\n@@ -1066,6 +1168,12 @@ namespace __debug\n \t{ return { _Base::find(__k), this }; }\n #endif\n \n+      using _Base::count;\n+\n+#if __cplusplus > 201703L\n+      using _Base::contains;\n+#endif\n+\n       std::pair<iterator, iterator>\n       equal_range(const key_type& __key)\n       {"}, {"sha": "6d007944918ee8b839708d5d095ea9ec660321e8", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/debug/merge1_neg.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdebug%2Fmerge1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdebug%2Fmerge1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdebug%2Fmerge1_neg.cc?ref=f4b4ce152a06578d94ae7630cffd655d590b2857", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do run { target c++17 xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <unordered_map>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+using test_type = std::unordered_map<int, double>;\n+\n+void\n+test01()\n+{\n+  test_type c0{ { 1, 3.5 }, { 2, 5.5 }, { 3, 7.5 }, { 5, 11.5 }, { 6, 13.5 } };\n+  test_type c1{ { 1, 3.5 }, { 2, 5.5 }, { 3, 7.5 }, { 4, 9.5 } };\n+\n+  auto it2 = c1.find(2);\n+  auto it4 = c1.find(4);\n+  VERIFY( it2->second == 5.5 );\n+  VERIFY( it4->second == 9.5 );\n+\n+  c0.merge(c1);\n+\n+  VERIFY( it2->second == 5.5 );\n+  VERIFY( it4 != it2 ); // Invalid iterator.\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "543cd960a5ea2ccacec6cb819c0e9c495cbe8ea3", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/debug/merge2_neg.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdebug%2Fmerge2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdebug%2Fmerge2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdebug%2Fmerge2_neg.cc?ref=f4b4ce152a06578d94ae7630cffd655d590b2857", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do run { target c++17 xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <unordered_map>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+using test_type = std::unordered_map<int, int>;\n+\n+void\n+test01()\n+{\n+  test_type c0{ { 1, 1 }, { 2, 2 }, { 3, 3 }, { 5, 5 }, { 6, 6 } };\n+  test_type c1{ { 1, 1 }, { 2, 2 }, { 3, 3 }, { 4, 4 } };\n+\n+  auto it2 = c1.find(2);\n+  auto it4 = c1.find(4);\n+  VERIFY( it2->second == 2 );\n+  VERIFY( it4->second == 4 );\n+\n+  c0.merge(std::move(c1));\n+\n+  VERIFY( it2->second == 2 );\n+  VERIFY( it2 != it4 ); // Invalid iterator.\n+}\n+\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "8e234799cbf6ae263a3a57a748ad5ac8921bd675", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/debug/merge3_neg.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdebug%2Fmerge3_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdebug%2Fmerge3_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdebug%2Fmerge3_neg.cc?ref=f4b4ce152a06578d94ae7630cffd655d590b2857", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do run { target c++17 xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <unordered_map>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+using test_type = std::unordered_map<int, int>;\n+\n+void\n+test01()\n+{\n+  test_type c0\n+    {\n+     { 1, 1 }, { 2, 2 }, { 3, 3 },\n+     { 5, 5 }, { 6, 6 }, { 7, 7 }\n+    };\n+  std::unordered_multimap<int, int> c1\n+    {\n+     { 1, 1 }, { 1, 1 }, { 2, 2 }, { 2, 2 },\n+     { 3, 3 }, { 3, 3 }, { 4, 4 }, { 4, 4 },\n+     { 5, 5 }\n+    };\n+\n+  auto it1 = c1.find(1);\n+  auto it41 = c1.find(4);\n+  auto it42 = it41;\n+  ++it42;\n+  VERIFY( it42->second == 4 );\n+\n+  c0.merge(c1);\n+\n+  VERIFY( it1->second == 1 );\n+  VERIFY( c1.count(4) == 1 );\n+  VERIFY( it41 != it42 ); // Invalid iterator.\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "3c9c8268f8c18a35be509030e43caf655530b0db", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/debug/merge4_neg.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdebug%2Fmerge4_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdebug%2Fmerge4_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdebug%2Fmerge4_neg.cc?ref=f4b4ce152a06578d94ae7630cffd655d590b2857", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do run { target c++17 xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <unordered_map>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+using test_type = std::unordered_map<int, int>;\n+\n+void\n+test01()\n+{\n+  test_type c0\n+    {\n+     { 1, 1 }, { 2, 2 }, { 3, 3 },\n+     { 5, 5 }, { 6, 6 }, { 7, 7 }\n+    };\n+  std::unordered_multimap<int, int> c1\n+    {\n+     { 1, 1 }, { 1, 1 }, { 2, 2 }, { 2, 2 },\n+     { 3, 3 }, { 3, 3 }, { 4, 4 }, { 4, 4 },\n+     { 5, 5 }\n+    };\n+\n+  auto it1 = c1.find(1);\n+  auto it41 = c1.find(4);\n+  auto it42 = it41;\n+  ++it42;\n+  VERIFY( it42->second == 4 );\n+\n+  c0.merge(std::move(c1));\n+\n+  VERIFY( it1->second == 1 );\n+  VERIFY( c1.count(4) == 1 );\n+  VERIFY( it41 != it42 ); // Invalid iterator.\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "25b3b9e0c753256bd2fd8746bc0ad20ad89736ea", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/debug/merge1_neg.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fdebug%2Fmerge1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fdebug%2Fmerge1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fdebug%2Fmerge1_neg.cc?ref=f4b4ce152a06578d94ae7630cffd655d590b2857", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do run { target c++17 xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <unordered_map>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+using test_type = std::unordered_multimap<int, int>;\n+\n+void\n+test01()\n+{\n+  test_type c0\n+    {\n+     { 1, 1 }, { 1, 1 }, { 2, 2 },\n+     { 2, 2 }, { 3, 3 }, { 3, 3 }\n+    };\n+  test_type c1 = c0;\n+\n+  auto it = c1.find(2);\n+  VERIFY( it->second == 2 );\n+\n+  c0.merge(c1);\n+\n+  VERIFY( it != c1.end() ); // Invalid iterator.\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "8d28d83b972f469e18b55532a855ae7027a365ca", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/debug/merge2_neg.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fdebug%2Fmerge2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fdebug%2Fmerge2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fdebug%2Fmerge2_neg.cc?ref=f4b4ce152a06578d94ae7630cffd655d590b2857", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do run { target c++17 xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <unordered_map>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+using test_type = std::unordered_multimap<int, int>;\n+\n+void\n+test01()\n+{\n+  test_type c0\n+    {\n+     { 1, 1 }, { 1, 1 }, { 2, 2 },\n+     { 2, 2 }, { 3, 3 }, { 3, 3 }\n+    };\n+  test_type c1 = c0;\n+\n+  auto it = c1.find(2);\n+  VERIFY( it->second == 2 );\n+\n+  c0.merge(std::move(c1));\n+\n+  VERIFY( it != c1.end() ); // Invalid iterator.\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "5db91a27ca0a1f86de9dfe389a91f230e1afd98c", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/debug/merge3_neg.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fdebug%2Fmerge3_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fdebug%2Fmerge3_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fdebug%2Fmerge3_neg.cc?ref=f4b4ce152a06578d94ae7630cffd655d590b2857", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do run { target c++17 xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <unordered_map>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+using test_type = std::unordered_multimap<int, int>;\n+\n+void\n+test01()\n+{\n+  test_type c0\n+    {\n+     { 1, 1 }, { 1, 1 }, { 2, 2 },\n+     { 2, 2 }, { 3, 3 }, { 3, 3 }\n+    };\n+  std::unordered_map<int, int> c1{ { 1, 1 }, { 2, 2 }, { 3, 3 } };\n+\n+  auto it = c1.find(2);\n+  VERIFY( it->second == 2 );\n+\n+  c0.merge(c1);\n+\n+  VERIFY( it != c1.end() ); // Invalid iterator.\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "a1636703569e81f98418d47a3ab1f3dd63793b67", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/debug/merge4_neg.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fdebug%2Fmerge4_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fdebug%2Fmerge4_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fdebug%2Fmerge4_neg.cc?ref=f4b4ce152a06578d94ae7630cffd655d590b2857", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do run { target c++17 xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <unordered_map>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+using test_type = std::unordered_multimap<int, int>;\n+\n+void\n+test01()\n+{\n+  test_type c0\n+    {\n+     { 1, 1 }, { 1, 1 }, { 2, 2 },\n+     { 2, 2 }, { 3, 3 }, { 3, 3 }\n+    };\n+  std::unordered_map<int, int> c1{ { 1, 1 }, { 2, 2 }, { 3, 3 } };\n+\n+  auto it = c1.find(2);\n+  VERIFY( it->second == 2 );\n+\n+  c0.merge(std::move(c1));\n+\n+  VERIFY( it != c1.end() ); // Invalid iterator.\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "bce8da7f6cf933666709db3f36065e7fe6cd0dd1", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/debug/merge1_neg.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fdebug%2Fmerge1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fdebug%2Fmerge1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fdebug%2Fmerge1_neg.cc?ref=f4b4ce152a06578d94ae7630cffd655d590b2857", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do run { target c++17 xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <unordered_set>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+using test_type = std::unordered_multiset<int>;\n+\n+void\n+test01()\n+{\n+  test_type c0{ 1, 1, 2, 2, 3, 3 };\n+  test_type c1 = c0;\n+\n+  auto it = c1.find(2);\n+  VERIFY( *it == 2 );\n+\n+  c0.merge(c1);\n+\n+  VERIFY( it != c1.end() ); // Invalid iterator.\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "72317a32e89a5170fc60fac49a382d51941e7d62", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/debug/merge2_neg.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fdebug%2Fmerge2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fdebug%2Fmerge2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fdebug%2Fmerge2_neg.cc?ref=f4b4ce152a06578d94ae7630cffd655d590b2857", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do run { target c++17 xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <unordered_set>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+using test_type = std::unordered_multiset<int>;\n+\n+void\n+test01()\n+{\n+  test_type c0{ 1, 1, 2, 2, 3, 3 };\n+  test_type c1 = c0;\n+\n+  auto it = c1.find(2);\n+  VERIFY( *it == 2 );\n+\n+  c0.merge(std::move(c1));\n+\n+  VERIFY( it != c1.end() ); // Invalid iterator.\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "1b1f4870dd18583c6c31a824e157422251dc8063", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/debug/merge3_neg.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fdebug%2Fmerge3_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fdebug%2Fmerge3_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fdebug%2Fmerge3_neg.cc?ref=f4b4ce152a06578d94ae7630cffd655d590b2857", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do run { target c++17 xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <unordered_set>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+using test_type = std::unordered_multiset<int>;\n+\n+void\n+test01()\n+{\n+  test_type c0{ 1, 1, 2, 2, 3, 3 };\n+  std::unordered_set<int> c1{ 1, 2, 3 };\n+\n+  auto it = c1.find(2);\n+  VERIFY( *it == 2 );\n+\n+  c0.merge(c1);\n+\n+  VERIFY( it != c1.end() ); // Invalid iterator.\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "5005cf8468abf82c201224cd0738a850307f5c6b", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/debug/merge4_neg.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fdebug%2Fmerge4_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fdebug%2Fmerge4_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fdebug%2Fmerge4_neg.cc?ref=f4b4ce152a06578d94ae7630cffd655d590b2857", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do run { target c++17 xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <unordered_set>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+using test_type = std::unordered_multiset<int>;\n+\n+void\n+test01()\n+{\n+  test_type c0{ 1, 1, 2, 2, 3, 3 };\n+  std::unordered_set<int> c1{ 1, 2, 3 };\n+\n+  auto it = c1.find(2);\n+  VERIFY( *it == 2 );\n+\n+  c0.merge(std::move(c1));\n+\n+  VERIFY( it != c1.end() ); // Invalid iterator.\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "8a2bc6e468ff8b8b42759c417efae39a9d41d2c9", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/debug/merge1_neg.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fdebug%2Fmerge1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fdebug%2Fmerge1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fdebug%2Fmerge1_neg.cc?ref=f4b4ce152a06578d94ae7630cffd655d590b2857", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do run { target c++17 xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <unordered_set>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+using test_type = std::unordered_set<int>;\n+\n+void\n+test01()\n+{\n+  test_type c0{ 1, 2, 3, 5, 6 };\n+  test_type c1{ 1, 2, 3, 4 };\n+\n+  auto it2 = c1.find(2);\n+  auto it4 = c1.find(4);\n+  VERIFY( *it2 == 2 );\n+  VERIFY( *it4 == 4 );\n+\n+  c0.merge(c1);\n+\n+  VERIFY( *it2 == 2 );\n+  VERIFY( it2 != it4 ); // Invalid iterator.\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "3ac96540770e890b2f2227d8784c32fcfe7db132", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/debug/merge2_neg.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fdebug%2Fmerge2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fdebug%2Fmerge2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fdebug%2Fmerge2_neg.cc?ref=f4b4ce152a06578d94ae7630cffd655d590b2857", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do run { target c++17 xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <unordered_set>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+using test_type = std::unordered_set<int>;\n+\n+void\n+test01()\n+{\n+  test_type c0{ 1, 2, 3, 5, 6 };\n+  test_type c1{ 1, 2, 3, 4 };\n+\n+  auto it2 = c1.find(2);\n+  auto it4 = c1.find(4);\n+  VERIFY( *it2 == 2 );\n+  VERIFY( *it4 == 4 );\n+\n+  c0.merge(std::move(c1));\n+\n+  VERIFY( *it2 == 2 );\n+  VERIFY( it2 != it4 ); // Invalid iterator.\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "7e93b55d50733d2752fb444ce29bd0a9d4ec57fc", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/debug/merge3_neg.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fdebug%2Fmerge3_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fdebug%2Fmerge3_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fdebug%2Fmerge3_neg.cc?ref=f4b4ce152a06578d94ae7630cffd655d590b2857", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do run { target c++17 xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <unordered_set>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+using test_type = std::unordered_set<int>;\n+\n+void\n+test01()\n+{\n+  test_type c0{ 1, 2, 3, 5, 6, 7 };\n+  std::unordered_multiset<int> c1{ 1, 1, 2, 2, 3, 3, 4, 4, 5 };\n+\n+  auto it1 = c1.find(1);\n+  auto it41 = c1.find(4);\n+  auto it42 = it41;\n+  ++it42;\n+  VERIFY( *it42 == 4 );\n+\n+  c0.merge(c1);\n+\n+  VERIFY( *it1 == 1 );\n+  VERIFY( c1.count(4) == 1 );\n+  VERIFY( it41 != it42 ); // Invalid iterator.\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "14c8ff63b0505dc18c0509778f889a1d15fb4a9e", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/debug/merge4_neg.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fdebug%2Fmerge4_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fdebug%2Fmerge4_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fdebug%2Fmerge4_neg.cc?ref=f4b4ce152a06578d94ae7630cffd655d590b2857", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do run { target c++17 xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <unordered_set>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+using test_type = std::unordered_set<int>;\n+\n+void\n+test01()\n+{\n+  test_type c0{ 1, 2, 3, 5, 6, 7 };\n+  std::unordered_multiset<int> c1{ 1, 1, 2, 2, 3, 3, 4, 4, 5 };\n+\n+  auto it1 = c1.find(1);\n+  auto it41 = c1.find(4);\n+  auto it42 = it41;\n+  ++it42;\n+  VERIFY( *it42 == 4 );\n+\n+  c0.merge(std::move(c1));\n+\n+  VERIFY( *it1 == 1 );\n+  VERIFY( c1.count(4) == 1 );\n+  VERIFY( it41 != it42 ); // Invalid iterator.\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "4a0cf64f6fbfe78d333de815efedb5921458f05f", "filename": "libstdc++-v3/testsuite/util/testsuite_abi.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b4ce152a06578d94ae7630cffd655d590b2857/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.h?ref=f4b4ce152a06578d94ae7630cffd655d590b2857", "patch": "@@ -24,7 +24,11 @@\n #include <locale>\n #if __cplusplus >= 201103L\n # include <unordered_map>\n+# ifdef _GLIBCXX_DEBUG\n+namespace unord = std::_GLIBCXX_STD_C;\n+# else\n namespace unord = std;\n+# endif\n #else\n # include <tr1/unordered_map>\n namespace unord = std::tr1;"}]}