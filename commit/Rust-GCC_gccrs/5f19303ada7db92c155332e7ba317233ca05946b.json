{"sha": "5f19303ada7db92c155332e7ba317233ca05946b", "node_id": "C_kwDOANBUbNoAKDVmMTkzMDNhZGE3ZGI5MmMxNTUzMzJlN2JhMzE3MjMzY2EwNTk0NmI", "commit": {"author": {"name": "Haochen Jiang", "email": "haochen.jiang@intel.com", "date": "2022-01-12T02:01:21Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-01-13T05:03:11Z"}, "message": "Optimize a ^ ((a ^ b) & mask) to (~mask & a) | (b & mask).\n\nFrom the perspective of the pipeline, `andn + and + ior` version take\n2 cycles(AND and ANDN doesn't have dependence), but xor + and + xor\nwill take 3 cycles.\n\n-       xorl    %edi, %esi\n        andl    %edx, %esi\n-       movl    %esi, %eax\n-       xorl    %edi, %eax\n+       andn    %edi, %edx, %eax\n+       orl     %esi, %eax\n\ngcc/ChangeLog:\n\n\tPR target/94790\n\t* config/i386/i386.md (*xor2andn): New define_insn_and_split.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/94790\n\t* gcc.target/i386/pr94790-1.c: New test.\n\t* gcc.target/i386/pr94790-2.c: Ditto.", "tree": {"sha": "8f2866087cd1d5b3409b0c79de2ccf5206a50ef8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f2866087cd1d5b3409b0c79de2ccf5206a50ef8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f19303ada7db92c155332e7ba317233ca05946b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f19303ada7db92c155332e7ba317233ca05946b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f19303ada7db92c155332e7ba317233ca05946b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f19303ada7db92c155332e7ba317233ca05946b/comments", "author": {"login": "jianghc724", "id": 10798680, "node_id": "MDQ6VXNlcjEwNzk4Njgw", "avatar_url": "https://avatars.githubusercontent.com/u/10798680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jianghc724", "html_url": "https://github.com/jianghc724", "followers_url": "https://api.github.com/users/jianghc724/followers", "following_url": "https://api.github.com/users/jianghc724/following{/other_user}", "gists_url": "https://api.github.com/users/jianghc724/gists{/gist_id}", "starred_url": "https://api.github.com/users/jianghc724/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jianghc724/subscriptions", "organizations_url": "https://api.github.com/users/jianghc724/orgs", "repos_url": "https://api.github.com/users/jianghc724/repos", "events_url": "https://api.github.com/users/jianghc724/events{/privacy}", "received_events_url": "https://api.github.com/users/jianghc724/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "080a06fcb076b3586ee4b00d415ae177f0b76b18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/080a06fcb076b3586ee4b00d415ae177f0b76b18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/080a06fcb076b3586ee4b00d415ae177f0b76b18"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "9937643a273e432c201b24bbdf9d02772f58ac2d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f19303ada7db92c155332e7ba317233ca05946b/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f19303ada7db92c155332e7ba317233ca05946b/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=5f19303ada7db92c155332e7ba317233ca05946b", "patch": "@@ -10453,6 +10453,44 @@\n    (set_attr \"znver1_decode\" \"double\")\n    (set_attr \"mode\" \"DI\")])\n \n+;; PR target/94790: Optimize a ^ ((a ^ b) & mask) to (~mask & a) | (b & mask)\n+(define_insn_and_split \"*xor2andn\"\n+  [(set (match_operand:SWI248 0 \"nonimmediate_operand\")\n+\t(xor:SWI248\n+\t  (and:SWI248\n+\t    (xor:SWI248\n+\t      (match_operand:SWI248 1 \"nonimmediate_operand\")\n+\t      (match_operand:SWI248 2 \"nonimmediate_operand\"))\n+\t    (match_operand:SWI248 3 \"nonimmediate_operand\"))\n+\t  (match_dup 1)))\n+    (clobber (reg:CC FLAGS_REG))]\n+  \"(TARGET_BMI || TARGET_AVX512BW)\n+   && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(parallel [(set (match_dup 4)\n+\t\t(and:SWI248\n+\t\t  (not:SWI248\n+\t\t    (match_dup 3))\n+\t\t  (match_dup 1)))\n+\t      (clobber (reg:CC FLAGS_REG))])\n+   (parallel [(set (match_dup 5)\n+\t\t(and:SWI248\n+\t\t  (match_dup 2)\n+\t\t  (match_dup 3)))\n+\t      (clobber (reg:CC FLAGS_REG))])\n+   (parallel [(set (match_dup 0)\n+\t\t(ior:SWI248\n+\t\t  (match_dup 4)\n+\t\t  (match_dup 5)))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n+{\n+  operands[1] = force_reg (<MODE>mode, operands[1]);\n+  operands[3] = force_reg (<MODE>mode, operands[3]);\n+  operands[4] = gen_reg_rtx (<MODE>mode);\n+  operands[5] = gen_reg_rtx (<MODE>mode);\n+})\n+\n ;; See comment for addsi_1_zext why we do use nonimmediate_operand\n (define_insn \"*<code>si_1_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")"}, {"sha": "1ff5fa25dfab091f86d2c058b1fa4f373560dc99", "filename": "gcc/testsuite/gcc.target/i386/pr94790-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f19303ada7db92c155332e7ba317233ca05946b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94790-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f19303ada7db92c155332e7ba317233ca05946b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94790-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94790-1.c?ref=5f19303ada7db92c155332e7ba317233ca05946b", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mbmi\" } */\n+/* { dg-final { scan-assembler-times \"andn\\[ \\\\t\\]\" 2 } } */\n+/* { dg-final { scan-assembler-not \"xorl\\[ \\\\t\\]\" } } */\n+\n+unsigned r1(unsigned a, unsigned b, unsigned mask)\n+{\n+  return a ^ ((a ^ b) & mask);\n+}\n+\n+unsigned r2(unsigned a, unsigned b, unsigned mask)\n+{\n+  return (~mask & a) | (b & mask);\n+}"}, {"sha": "ad11d94e15741fd0e710695cfe749a560ee0756b", "filename": "gcc/testsuite/gcc.target/i386/pr94790-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f19303ada7db92c155332e7ba317233ca05946b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94790-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f19303ada7db92c155332e7ba317233ca05946b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94790-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94790-2.c?ref=5f19303ada7db92c155332e7ba317233ca05946b", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mbmi\" } */\n+/* { dg-final { scan-assembler-not \"andn\\[ \\\\t\\]\" } } */\n+/* { dg-final { scan-assembler-times \"xorl\\[ \\\\t\\]\" 2 } } */\n+\n+unsigned r1(unsigned a, unsigned b, unsigned mask)\n+{\n+  return a ^ ((a ^ b) & mask) + (a ^ b);\n+}"}]}