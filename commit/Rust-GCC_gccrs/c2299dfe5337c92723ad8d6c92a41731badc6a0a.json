{"sha": "c2299dfe5337c92723ad8d6c92a41731badc6a0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIyOTlkZmU1MzM3YzkyNzIzYWQ4ZDZjOTJhNDE3MzFiYWRjNmEwYQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-05-27T13:13:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-05-27T13:13:28Z"}, "message": "re PR middle-end/49189 (infinite recursion in constant folder)\n\n2011-05-27  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/49189\n\t* fold-const.c (fold_unary_loc): Do not re-fold folding conversions\n\tof comparisons.\n\n\t* gnat.dg/bit_packed_array5.adb: New testcase.\n\t* gnat.dg/bit_packed_array5.ads: Likewise.\n\nFrom-SVN: r174330", "tree": {"sha": "5a01789e8423444f6b3623d0f6a43454d41ffb54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a01789e8423444f6b3623d0f6a43454d41ffb54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2299dfe5337c92723ad8d6c92a41731badc6a0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2299dfe5337c92723ad8d6c92a41731badc6a0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2299dfe5337c92723ad8d6c92a41731badc6a0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2299dfe5337c92723ad8d6c92a41731badc6a0a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a95b23b4290ffaa95614a10eb13123251bcd7e90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a95b23b4290ffaa95614a10eb13123251bcd7e90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a95b23b4290ffaa95614a10eb13123251bcd7e90"}], "stats": {"total": 67, "additions": 60, "deletions": 7}, "files": [{"sha": "6271933bd1347db4e475f165ffb4a6de8e4eb50c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2299dfe5337c92723ad8d6c92a41731badc6a0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2299dfe5337c92723ad8d6c92a41731badc6a0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2299dfe5337c92723ad8d6c92a41731badc6a0a", "patch": "@@ -1,3 +1,9 @@\n+2011-05-27  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/49189\n+\t* fold-const.c (fold_unary_loc): Do not re-fold folding conversions\n+\tof comparisons.\n+\n 2011-05-27  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* haifa-sched.c (sched_scan_info): Remove."}, {"sha": "9a3f8cb0fecf5c0c788b0388ad9fdac286675fdf", "filename": "gcc/fold-const.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2299dfe5337c92723ad8d6c92a41731badc6a0a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2299dfe5337c92723ad8d6c92a41731badc6a0a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=c2299dfe5337c92723ad8d6c92a41731badc6a0a", "patch": "@@ -7660,15 +7660,19 @@ fold_unary_loc (location_t loc, enum tree_code code, tree type, tree op0)\n       if (COMPARISON_CLASS_P (op0))\n \t{\n \t  /* If we have (type) (a CMP b) and type is an integral type, return\n-\t     new expression involving the new type.  */\n+\t     new expression involving the new type.  Canonicalize\n+\t     (type) (a CMP b) to (a CMP b) ? (type) true : (type) false for\n+\t     non-integral type.\n+\t     Do not fold the result as that would not simplify further, also\n+\t     folding again results in recursions.  */\n \t  if (INTEGRAL_TYPE_P (type))\n-\t    return fold_build2_loc (loc, TREE_CODE (op0), type,\n-\t\t\t\t    TREE_OPERAND (op0, 0),\n-\t\t\t\t    TREE_OPERAND (op0, 1));\n+\t    return build2_loc (loc, TREE_CODE (op0), type,\n+\t\t\t       TREE_OPERAND (op0, 0),\n+\t\t\t       TREE_OPERAND (op0, 1));\n \t  else\n-\t    return fold_build3_loc (loc, COND_EXPR, type, op0,\n-\t\t\t\t    fold_convert (type, boolean_true_node),\n-\t\t\t\t    fold_convert (type, boolean_false_node));\n+\t    return build3_loc (loc, COND_EXPR, type, op0,\n+\t\t\t       fold_convert (type, boolean_true_node),\n+\t\t\t       fold_convert (type, boolean_false_node));\n \t}\n \n       /* Handle cases of two conversions in a row.  */"}, {"sha": "2bf68b3da0672cbda3e2e8c14ef04c5849ed2e4f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2299dfe5337c92723ad8d6c92a41731badc6a0a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2299dfe5337c92723ad8d6c92a41731badc6a0a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c2299dfe5337c92723ad8d6c92a41731badc6a0a", "patch": "@@ -1,3 +1,9 @@\n+2011-05-27  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/49189\n+\t* gnat.dg/bit_packed_array5.adb: New testcase.\n+\t* gnat.dg/bit_packed_array5.ads: Likewise.\n+\n 2011-05-26  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/friend1.C: New."}, {"sha": "de574fb0d26c98859c5cf1c448a235f6628c5a6f", "filename": "gcc/testsuite/gnat.dg/bit_packed_array5.adb", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2299dfe5337c92723ad8d6c92a41731badc6a0a/gcc%2Ftestsuite%2Fgnat.dg%2Fbit_packed_array5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2299dfe5337c92723ad8d6c92a41731badc6a0a/gcc%2Ftestsuite%2Fgnat.dg%2Fbit_packed_array5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fbit_packed_array5.adb?ref=c2299dfe5337c92723ad8d6c92a41731badc6a0a", "patch": "@@ -0,0 +1,21 @@\n+with System;\n+\n+package body Bit_Packed_Array5 is\n+\n+   function Inv (Word : Word_Type) return Word_Type is\n+      W : Word_Type := Word;\n+      pragma Volatile (W);\n+\n+      A_W : constant System.Address := W'Address;\n+\n+      V : Short_Bit_Array_Type;\n+      for V'Address use A_W;\n+      pragma Volatile (V);\n+   begin\n+      for I in V'Range loop\n+          V (I) := not V (I);\n+      end loop;\n+      return W;\n+   end;\n+\n+end Bit_Packed_Array5;"}, {"sha": "8d335f0c393b33685fa02204a774a74a16b2df70", "filename": "gcc/testsuite/gnat.dg/bit_packed_array5.ads", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2299dfe5337c92723ad8d6c92a41731badc6a0a/gcc%2Ftestsuite%2Fgnat.dg%2Fbit_packed_array5.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2299dfe5337c92723ad8d6c92a41731badc6a0a/gcc%2Ftestsuite%2Fgnat.dg%2Fbit_packed_array5.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fbit_packed_array5.ads?ref=c2299dfe5337c92723ad8d6c92a41731badc6a0a", "patch": "@@ -0,0 +1,16 @@\n+-- { dg-do compile }\n+\n+package Bit_Packed_Array5 is\n+\n+   type Bit_Array is array (Integer range <>) of Boolean;\n+   pragma Pack (Bit_Array);\n+\n+   type Short_Bit_Array_Type is new Bit_Array (0 .. 15);\n+   for Short_Bit_Array_Type'Size use 16;\n+\n+   type Word_Type is range 0 .. 65535;\n+   for Word_Type'Size use 16;\n+\n+   function Inv (Word : Word_Type) return Word_Type;\n+\n+end Bit_Packed_Array5;"}]}