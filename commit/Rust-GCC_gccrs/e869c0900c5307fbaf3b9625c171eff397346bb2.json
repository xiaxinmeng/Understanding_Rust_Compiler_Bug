{"sha": "e869c0900c5307fbaf3b9625c171eff397346bb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg2OWMwOTAwYzUzMDdmYmFmM2I5NjI1YzE3MWVmZjM5NzM0NmJiMg==", "commit": {"author": {"name": "R\u00fcdiger Sonderfeld", "email": "ruediger@c-plusplus.de", "date": "2014-12-22T13:45:44Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-12-22T13:45:44Z"}, "message": "re PR libstdc++/60396 (Missing time_get<>::get() functions)\n\n2014-12-22  R\u00fcdiger Sonderfeld  <ruediger@c-plusplus.de>\n\t    Jonathan Wakely  <jwakely@redhat.com>\n\n\tPR libstdc++/60396\n\t* config/abi/pre/gnu.ver: Add new exports.\n\t* include/bits/locale_facets_nonio.h (time_get::get): New overloads.\n\t(time_get::do_get):  New virtual function.\n\t* include/bits/locale_facets_nonio.tcc (time_get::get): Define.\n\t(time_get::do_get): Define.\n\t* src/c++11/string-inst.cc (time_get::get, time_get::do_get): Add\n\tC++11-only instantiations.\n\t* testsuite/22_locale/time_get/get/char/1.cc: New.\n\t* testsuite/22_locale/time_get/get/char/2.cc: New.\n\t* testsuite/22_locale/time_get/get/wchar_t/1.cc: New.\n\t* testsuite/22_locale/time_get/get/wchar_t/2.cc: New.\n\nCo-Authored-By: Jonathan Wakely <jwakely@redhat.com>\n\nFrom-SVN: r219012", "tree": {"sha": "978f0eb94c76abe2496ae59d510cd29f1519e28a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/978f0eb94c76abe2496ae59d510cd29f1519e28a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e869c0900c5307fbaf3b9625c171eff397346bb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e869c0900c5307fbaf3b9625c171eff397346bb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e869c0900c5307fbaf3b9625c171eff397346bb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e869c0900c5307fbaf3b9625c171eff397346bb2/comments", "author": {"login": "ruediger", "id": 1803, "node_id": "MDQ6VXNlcjE4MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1803?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruediger", "html_url": "https://github.com/ruediger", "followers_url": "https://api.github.com/users/ruediger/followers", "following_url": "https://api.github.com/users/ruediger/following{/other_user}", "gists_url": "https://api.github.com/users/ruediger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruediger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruediger/subscriptions", "organizations_url": "https://api.github.com/users/ruediger/orgs", "repos_url": "https://api.github.com/users/ruediger/repos", "events_url": "https://api.github.com/users/ruediger/events{/privacy}", "received_events_url": "https://api.github.com/users/ruediger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d3a0146ae9b32c4c57cbd4d5cde2672ed283828", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d3a0146ae9b32c4c57cbd4d5cde2672ed283828", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d3a0146ae9b32c4c57cbd4d5cde2672ed283828"}], "stats": {"total": 687, "additions": 687, "deletions": 0}, "files": [{"sha": "41a91c54524f1a4952543b331435c31876860ddd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e869c0900c5307fbaf3b9625c171eff397346bb2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e869c0900c5307fbaf3b9625c171eff397346bb2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e869c0900c5307fbaf3b9625c171eff397346bb2", "patch": "@@ -1,3 +1,19 @@\n+2014-12-22  R\u00fcdiger Sonderfeld  <ruediger@c-plusplus.de>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/60396\n+\t* config/abi/pre/gnu.ver: Add new exports.\n+\t* include/bits/locale_facets_nonio.h (time_get::get): New overloads.\n+\t(time_get::do_get):  New virtual function.\n+\t* include/bits/locale_facets_nonio.tcc (time_get::get): Define.\n+\t(time_get::do_get): Define.\n+\t* src/c++11/string-inst.cc (time_get::get, time_get::do_get): Add\n+\tC++11-only instantiations.\n+\t* testsuite/22_locale/time_get/get/char/1.cc: New.\n+\t* testsuite/22_locale/time_get/get/char/2.cc: New.\n+\t* testsuite/22_locale/time_get/get/wchar_t/1.cc: New.\n+\t* testsuite/22_locale/time_get/get/wchar_t/2.cc: New.\n+\n 2014-12-21  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/64367"}, {"sha": "6602532ef79074872bc7c1332c5f6cee41ce370b", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e869c0900c5307fbaf3b9625c171eff397346bb2/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e869c0900c5307fbaf3b9625c171eff397346bb2/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=e869c0900c5307fbaf3b9625c171eff397346bb2", "patch": "@@ -1748,6 +1748,10 @@ GLIBCXX_3.4.21 {\n \n     _ZNKSt3tr14hashINSt7__cxx1112basic_string*;\n \n+    # std::time_get::get\n+    _ZNKSt8time_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE3getES3_S3_RSt8ios_baseRSt12_Ios_IostateP2tmPK[cw]SC_;\n+    _ZNKSt8time_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE6do_getES3_S3_RSt8ios_baseRSt12_Ios_IostateP2tmcc;\n+\n } GLIBCXX_3.4.20;\n \n "}, {"sha": "a9feaec7dfbf88f0cca8963df2e5341d47e380bd", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.h", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e869c0900c5307fbaf3b9625c171eff397346bb2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e869c0900c5307fbaf3b9625c171eff397346bb2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h?ref=e869c0900c5307fbaf3b9625c171eff397346bb2", "patch": "@@ -537,6 +537,54 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t       ios_base::iostate& __err, tm* __tm) const\n       { return this->do_get_year(__beg, __end, __io, __err, __tm); }\n \n+#if __cplusplus >= 201103L\n+      /**\n+       *  @brief  Parse input string according to format.\n+       *\n+       *  This function calls time_get::do_get with the provided\n+       *  parameters.  @see do_get() and get().\n+       *\n+       *  @param __s        Start of string to parse.\n+       *  @param __end      End of string to parse.\n+       *  @param __io       Source of the locale.\n+       *  @param __err      Error flags to set.\n+       *  @param __tm       Pointer to struct tm to fill in.\n+       *  @param __format   Format specifier.\n+       *  @param __modifier Format modifier.\n+       *  @return  Iterator to first char not parsed.\n+       */\n+      inline\n+      iter_type get(iter_type __s, iter_type __end, ios_base& __io,\n+                    ios_base::iostate& __err, tm* __tm, char __format,\n+                    char __modifier = 0) const\n+      {\n+        return this->do_get(__s, __end, __io, __err, __tm, __format,\n+                            __modifier);\n+      }\n+\n+      /**\n+       *  @brief  Parse input string according to format.\n+       *\n+       *  This function parses the input string according to a\n+       *  provided format string.  It does the inverse of\n+       *  time_put::put.  The format string follows the format\n+       *  specified for strftime(3)/strptime(3).  The actual parsing\n+       *  is done by time_get::do_get.\n+       *\n+       *  @param __s        Start of string to parse.\n+       *  @param __end      End of string to parse.\n+       *  @param __io       Source of the locale.\n+       *  @param __err      Error flags to set.\n+       *  @param __tm       Pointer to struct tm to fill in.\n+       *  @param __fmt      Start of the format string.\n+       *  @param __fmtend   End of the format string.\n+       *  @return  Iterator to first char not parsed.\n+       */\n+      iter_type get(iter_type __s, iter_type __end, ios_base& __io,\n+                    ios_base::iostate& __err, tm* __tm, const char_type* __fmt,\n+                    const char_type* __fmtend) const;\n+#endif // __cplusplus >= 201103L\n+\n     protected:\n       /// Destructor.\n       virtual\n@@ -650,6 +698,33 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       do_get_year(iter_type __beg, iter_type __end, ios_base& __io,\n \t\t  ios_base::iostate& __err, tm* __tm) const;\n \n+#if __cplusplus >= 201103L\n+      /**\n+       *  @brief  Parse input string according to format.\n+       *\n+       *  This function parses the string according to the provided\n+       *  format and optional modifier.  This function is a hook for\n+       *  derived classes to change the value returned.  @see get()\n+       *  for more details.\n+       *\n+       *  @param __s        Start of string to parse.\n+       *  @param __end      End of string to parse.\n+       *  @param __io       Source of the locale.\n+       *  @param __err      Error flags to set.\n+       *  @param __tm       Pointer to struct tm to fill in.\n+       *  @param __format   Format specifier.\n+       *  @param __modifier Format modifier.\n+       *  @return  Iterator to first char not parsed.\n+       */\n+#if _GLIBCXX_USE_CXX11_ABI\n+      virtual\n+#endif\n+      iter_type\n+      do_get(iter_type __s, iter_type __end, ios_base& __f,\n+             ios_base::iostate& __err, tm* __tm,\n+             char __format, char __modifier) const;\n+#endif // __cplusplus >= 201103L\n+\n       // Extract numeric component of length __len.\n       iter_type\n       _M_extract_num(iter_type __beg, iter_type __end, int& __member,"}, {"sha": "b0f89aec7a20f8b1b2db8b22af364451e8113062", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.tcc", "status": "modified", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e869c0900c5307fbaf3b9625c171eff397346bb2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e869c0900c5307fbaf3b9625c171eff397346bb2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc?ref=e869c0900c5307fbaf3b9625c171eff397346bb2", "patch": "@@ -1141,6 +1141,113 @@ _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n       return __beg;\n     }\n \n+#if __cplusplus >= 201103L\n+  template<typename _CharT, typename _InIter>\n+    inline\n+    _InIter\n+    time_get<_CharT, _InIter>::\n+    get(iter_type __s, iter_type __end, ios_base& __io,\n+        ios_base::iostate& __err, tm* __tm, const char_type* __fmt,\n+        const char_type* __fmtend) const\n+    {\n+      const locale& __loc = __io._M_getloc();\n+      ctype<_CharT> const& __ctype = use_facet<ctype<_CharT> >(__loc);\n+      __err = ios_base::goodbit;\n+      while (__fmt != __fmtend &&\n+             __err == ios_base::goodbit)\n+        {\n+          if (__s == __end)\n+            {\n+              __err = ios_base::eofbit | ios_base::failbit;\n+              break;\n+            }\n+          else if (__ctype.narrow(*__fmt, 0) == '%')\n+            {\n+              char __format;\n+              char __mod = 0;\n+              if (++__fmt == __fmtend)\n+                {\n+                  __err = ios_base::failbit;\n+                  break;\n+                }\n+              const char __c = __ctype.narrow(*__fmt, 0);\n+              if (__c != 'E' && __c != 'O')\n+                __format = __c;\n+              else if (++__fmt != __fmtend)\n+                {\n+                  __mod = __c;\n+                  __format = __ctype.narrow(*__fmt, 0);\n+                }\n+              else\n+                {\n+                  __err = ios_base::failbit;\n+                  break;\n+                }\n+              __s = this->do_get(__s, __end, __io, __err, __tm, __format,\n+\t\t\t\t __mod);\n+              ++__fmt;\n+            }\n+          else if (__ctype.is(ctype_base::space, *__fmt))\n+            {\n+              ++__fmt;\n+              while (__fmt != __fmtend &&\n+                     __ctype.is(ctype_base::space, *__fmt))\n+                ++__fmt;\n+\n+              while (__s != __end &&\n+                     __ctype.is(ctype_base::space, *__s))\n+                ++__s;\n+            }\n+          // TODO real case-insensitive comparison\n+          else if (__ctype.tolower(*__s) == __ctype.tolower(*__fmt) ||\n+                   __ctype.toupper(*__s) == __ctype.toupper(*__fmt))\n+            {\n+              ++__s;\n+              ++__fmt;\n+            }\n+          else\n+            {\n+              __err = ios_base::failbit;\n+              break;\n+            }\n+        }\n+      return __s;\n+    }\n+\n+  template<typename _CharT, typename _InIter>\n+    inline\n+    _InIter\n+    time_get<_CharT, _InIter>::\n+    do_get(iter_type __beg, iter_type __end, ios_base& __io,\n+           ios_base::iostate& __err, tm* __tm,\n+           char __format, char __mod) const\n+    {\n+      const locale& __loc = __io._M_getloc();\n+      ctype<_CharT> const& __ctype = use_facet<ctype<_CharT> >(__loc);\n+      __err = ios_base::goodbit;\n+\n+      char_type __fmt[4];\n+      __fmt[0] = __ctype.widen('%');\n+      if (!__mod)\n+        {\n+          __fmt[1] = __format;\n+          __fmt[2] = char_type();\n+        }\n+      else\n+        {\n+          __fmt[1] = __mod;\n+          __fmt[2] = __format;\n+          __fmt[3] = char_type();\n+        }\n+\n+      __beg = _M_extract_via_format(__beg, __end, __io, __err, __tm, __fmt);\n+      if (__beg == __end)\n+\t__err |= ios_base::eofbit;\n+      return __beg;\n+    }\n+\n+#endif // __cplusplus >= 201103L\n+\n   template<typename _CharT, typename _OutIter>\n     _OutIter\n     time_put<_CharT, _OutIter>::"}, {"sha": "a25ce206e8f3928ebe0ada647baea2f9f4fb0cec", "filename": "libstdc++-v3/src/c++11/string-inst.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e869c0900c5307fbaf3b9625c171eff397346bb2/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fstring-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e869c0900c5307fbaf3b9625c171eff397346bb2/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fstring-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fstring-inst.cc?ref=e869c0900c5307fbaf3b9625c171eff397346bb2", "patch": "@@ -113,3 +113,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n+\n+// TODO does not belong here!\n+#include <locale>\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n+  template istreambuf_iterator<C> time_get<C, istreambuf_iterator<C> >::get(iter_type, iter_type, ios_base&, ios_base::iostate&, tm*, char, char) const;\n+  template istreambuf_iterator<C> time_get<C, istreambuf_iterator<C> >::do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, tm*, char, char) const;\n+  template istreambuf_iterator<C> time_get<C, istreambuf_iterator<C> >::get(iter_type, iter_type, ios_base&, ios_base::iostate&, tm*, const char_type*, const char_type*) const;\n+_GLIBCXX_END_NAMESPACE_CXX11\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "19ca7ac57a14643c5e28e0172e699cfab2ccff79", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get/char/1.cc", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e869c0900c5307fbaf3b9625c171eff397346bb2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e869c0900c5307fbaf3b9625c171eff397346bb2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fchar%2F1.cc?ref=e869c0900c5307fbaf3b9625c171eff397346bb2", "patch": "@@ -0,0 +1,132 @@\n+// { dg-options \" -std=gnu++11 \" }\n+\n+// 2014-04-14 R\u00fcdiger Sonderfeld  <ruediger@c-plusplus.de>\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 22.4.5.1.1 (C++11) time_get members [locale.time.get.members]\n+\n+#include <locale>\n+#include <sstream>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+#ifndef _GLIBCXX_ASSERT\n+#  include <iostream>\n+#  define PRINT(x) cout << #x << \": \" << x << endl\n+#  define TESTHEAD(x) cout << x << endl\n+#else\n+#  define PRINT(x) do {} while(false)\n+#  define TESTHEAD(x) do {} while(false)\n+#endif\n+\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  locale loc_c = locale::classic();\n+\n+  istringstream iss;\n+  iss.imbue(loc_c);\n+  const time_get<char>& tget = use_facet<time_get<char>>(iss.getloc());\n+  typedef istreambuf_iterator<char> iter;\n+  const iter end;\n+\n+  tm time;\n+  ios_base::iostate err = ios_base::badbit;\n+\n+  // check regular operations with format string\n+  TESTHEAD(\"regular operations\");\n+  iss.str(\"d 2014-04-14 01:09:35\");\n+  string format = \"d %Y-%m-%d %H:%M:%S\";\n+  auto ret = tget.get(iter(iss), end, iss, err, &time,\n+                      format.data(), format.data()+format.size());\n+  PRINT(err);\n+  VERIFY(err == ios_base::eofbit);\n+  VERIFY(ret == end);\n+  PRINT(time.tm_year);\n+  VERIFY(time.tm_year == 114);\n+  PRINT(time.tm_mon);\n+  VERIFY(time.tm_mon == 3);\n+  PRINT(time.tm_mday);\n+  VERIFY(time.tm_mday == 14);\n+  PRINT(time.tm_hour);\n+  VERIFY(time.tm_hour == 1);\n+  PRINT(time.tm_min);\n+  VERIFY(time.tm_min == 9);\n+  PRINT(time.tm_sec);\n+  VERIFY(time.tm_sec == 35);\n+\n+  TESTHEAD(\"check eof\");\n+  iss.str(\"2020  \");\n+  format = \"%Y\";\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+                 format.data(), format.data()+format.size());\n+  VERIFY(err != ios_base::eofbit);\n+  VERIFY(time.tm_year == 120);\n+  VERIFY(ret != end);\n+\n+  TESTHEAD(\"check broken format\");\n+  iss.str(\"2014-04-14 01:09:35\");\n+  format = \"%\";\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+                 format.data(), format.data()+format.size());\n+  VERIFY(err == ios_base::failbit);\n+\n+  TESTHEAD(\"check single format letter version\");\n+  iss.str(\"2020\");\n+  ret = tget.get(iter(iss), end, iss, err, &time, 'Y');\n+  VERIFY(err == ios_base::eofbit);\n+  VERIFY(time.tm_year == 120);\n+  VERIFY(ret == end);\n+\n+  TESTHEAD(\"check skipping of space\");\n+  iss.str(\"2010    07 01\");\n+  format = \"%Y %m %d\";\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+                 format.data(), format.data()+format.size());\n+  VERIFY(err == ios_base::eofbit);\n+  VERIFY(time.tm_year == 110);\n+  VERIFY(time.tm_mon == 6);\n+  VERIFY(time.tm_mday == 1);\n+  VERIFY(ret == end);\n+\n+  TESTHEAD(\"check mismatch\");\n+  iss.str(\"year: 1970\");\n+  format = \"jahr: %Y\";\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+                 format.data(), format.data()+format.size());\n+  VERIFY(err == ios_base::failbit);\n+  VERIFY(ret == iter(iss));\n+\n+  TESTHEAD(\"check case insensitive match\");\n+  iss.str(\"yEaR: 1980\");\n+  format = \"YeAR: %Y\";\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+                 format.data(), format.data()+format.size());\n+  VERIFY(err == ios_base::eofbit);\n+  VERIFY(ret == end);\n+  VERIFY(time.tm_year == 80);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3a04931611b733bc32a53120318840aa7bacb13c", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get/char/2.cc", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e869c0900c5307fbaf3b9625c171eff397346bb2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e869c0900c5307fbaf3b9625c171eff397346bb2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fchar%2F2.cc?ref=e869c0900c5307fbaf3b9625c171eff397346bb2", "patch": "@@ -0,0 +1,104 @@\n+// { dg-require-namedlocale \"de_DE.utf8\" }\n+// { dg-options \" -std=gnu++11 \" }\n+\n+// 2014-04-14 R\u00fcdiger Sonderfeld  <ruediger@c-plusplus.de>\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 22.4.5.1.1 (C++11) time_get members [locale.time.get.members]\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+#ifndef _GLIBCXX_ASSERT\n+#  include <iostream>\n+#  define PRINT(x) cout << #x << \": \" << x << endl\n+#  define TESTHEAD(x) cout << x << endl\n+#else\n+#  define PRINT(x) do {} while(false)\n+#  define TESTHEAD(x) do {} while(false)\n+#endif\n+\n+void test02()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  locale loc_c = locale::classic();\n+  locale loc_de = locale(\"de_DE.utf8\");\n+  VERIFY( loc_de != loc_c );\n+\n+  istringstream iss;\n+  iss.imbue(loc_de);\n+  const time_get<char>& tget = use_facet<time_get<char>>(iss.getloc());\n+  typedef istreambuf_iterator<char> iter;\n+  const iter end;\n+\n+  ios_base::iostate err;\n+  tm time;\n+\n+  TESTHEAD(\"German locale test\");\n+  iss.str(\"Montag, den 14. April 2014\");\n+  string format = \"%A, den %d. %B %Y\";\n+  auto ret = tget.get(iter(iss), end, iss, err, &time,\n+                      format.data(), format.data()+format.size());\n+  PRINT(err);\n+  VERIFY(err == ios_base::eofbit);\n+  PRINT(time.tm_year);\n+  VERIFY(time.tm_year == 114);\n+  PRINT(time.tm_mon);\n+  VERIFY(time.tm_mon == 3);\n+  PRINT(time.tm_wday);\n+  VERIFY(time.tm_wday == 1);\n+  PRINT(time.tm_mday);\n+  VERIFY(time.tm_mday == 14);\n+  VERIFY(end == end);\n+\n+  TESTHEAD(\"German locale: Check case-insensitivity\");\n+  tm time2;\n+  iss.str(\"Montag, den 14. April 2014\");\n+  format = \"%A, DEN %d. %B %Y\"; // check case-insensitivity\n+  ret = tget.get(iter(iss), end, iss, err, &time2,\n+                 format.data(), format.data()+format.size());\n+  PRINT(err);\n+  VERIFY(err == ios_base::eofbit);\n+  PRINT(time2.tm_year);\n+  VERIFY(time2.tm_year == 114);\n+  PRINT(time2.tm_mon);\n+  VERIFY(time2.tm_mon == 3);\n+  PRINT(time2.tm_wday);\n+  VERIFY(time2.tm_wday == 1);\n+  PRINT(time2.tm_mday);\n+  VERIFY(time2.tm_mday == 14);\n+  VERIFY(end == end);\n+\n+  TESTHEAD(\"German locale: Check single\");\n+  iss.str(\"Mittwoch\");\n+  ret = tget.get(iter(iss), end, iss, err, &time, 'A');\n+  PRINT(err);\n+  VERIFY(err == ios_base::eofbit);\n+  PRINT(time.tm_wday);\n+  VERIFY(time.tm_wday == 3);\n+  VERIFY(end == end);\n+}\n+\n+int main()\n+{\n+  test02();\n+}"}, {"sha": "5668871592c081a51c3ec75b8225c6e7a3827a16", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get/wchar_t/1.cc", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e869c0900c5307fbaf3b9625c171eff397346bb2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e869c0900c5307fbaf3b9625c171eff397346bb2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fwchar_t%2F1.cc?ref=e869c0900c5307fbaf3b9625c171eff397346bb2", "patch": "@@ -0,0 +1,132 @@\n+// { dg-options \" -std=gnu++11 \" }\n+\n+// 2014-04-14 R\u00fcdiger Sonderfeld  <ruediger@c-plusplus.de>\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 22.4.5.1.1 (C++11) time_get members [locale.time.get.members]\n+\n+#include <locale>\n+#include <sstream>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+#ifndef _GLIBCXX_ASSERT\n+#  include <iostream>\n+#  define PRINT(x) cout << #x << \": \" << x << endl\n+#  define TESTHEAD(x) cout << x << endl\n+#else\n+#  define PRINT(x) do {} while(false)\n+#  define TESTHEAD(x) do {} while(false)\n+#endif\n+\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  locale loc_c = locale::classic();\n+\n+  wistringstream iss;\n+  iss.imbue(loc_c);\n+  const time_get<wchar_t>& tget = use_facet<time_get<wchar_t>>(iss.getloc());\n+  typedef istreambuf_iterator<wchar_t> iter;\n+  const iter end;\n+\n+  tm time;\n+  ios_base::iostate err = ios_base::badbit;\n+\n+  // check regular operations with format string\n+  TESTHEAD(\"regular operations\");\n+  iss.str(L\"d 2014-04-14 01:09:35\");\n+  wstring format = L\"d %Y-%m-%d %H:%M:%S\";\n+  auto ret = tget.get(iter(iss), end, iss, err, &time,\n+                      format.data(), format.data()+format.size());\n+  PRINT(err);\n+  VERIFY(err == ios_base::eofbit);\n+  VERIFY(ret == end);\n+  PRINT(time.tm_year);\n+  VERIFY(time.tm_year == 114);\n+  PRINT(time.tm_mon);\n+  VERIFY(time.tm_mon == 3);\n+  PRINT(time.tm_mday);\n+  VERIFY(time.tm_mday == 14);\n+  PRINT(time.tm_hour);\n+  VERIFY(time.tm_hour == 1);\n+  PRINT(time.tm_min);\n+  VERIFY(time.tm_min == 9);\n+  PRINT(time.tm_sec);\n+  VERIFY(time.tm_sec == 35);\n+\n+  TESTHEAD(\"check eof\");\n+  iss.str(L\"2020  \");\n+  format = L\"%Y\";\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+                 format.data(), format.data()+format.size());\n+  VERIFY(err != ios_base::eofbit);\n+  VERIFY(time.tm_year == 120);\n+  VERIFY(ret != end);\n+\n+  TESTHEAD(\"check broken format\");\n+  iss.str(L\"2014-04-14 01:09:35\");\n+  format = L\"%\";\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+                 format.data(), format.data()+format.size());\n+  VERIFY(err == ios_base::failbit);\n+\n+  TESTHEAD(\"check single format letter version\");\n+  iss.str(L\"2020\");\n+  ret = tget.get(iter(iss), end, iss, err, &time, L'Y');\n+  VERIFY(err == ios_base::eofbit);\n+  VERIFY(time.tm_year == 120);\n+  VERIFY(ret == end);\n+\n+  TESTHEAD(L\"check skipping of space\");\n+  iss.str(L\"2010    07 01\");\n+  format = L\"%Y %m %d\";\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+                 format.data(), format.data()+format.size());\n+  VERIFY(err == ios_base::eofbit);\n+  VERIFY(time.tm_year == 110);\n+  VERIFY(time.tm_mon == 6);\n+  VERIFY(time.tm_mday == 1);\n+  VERIFY(ret == end);\n+\n+  TESTHEAD(\"check mismatch\");\n+  iss.str(L\"year: 1970\");\n+  format = L\"jahr: %Y\";\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+                 format.data(), format.data()+format.size());\n+  VERIFY(err == ios_base::failbit);\n+  VERIFY(ret == iter(iss));\n+\n+  TESTHEAD(\"check case insensitive match\");\n+  iss.str(L\"yEaR: 1980\");\n+  format = L\"YeAR: %Y\";\n+  ret = tget.get(iter(iss), end, iss, err, &time,\n+                 format.data(), format.data()+format.size());\n+  VERIFY(err == ios_base::eofbit);\n+  VERIFY(ret == end);\n+  VERIFY(time.tm_year == 80);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "9ec51e2bdfd05c3831175ce11c8838794c046faa", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get/wchar_t/2.cc", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e869c0900c5307fbaf3b9625c171eff397346bb2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e869c0900c5307fbaf3b9625c171eff397346bb2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget%2Fwchar_t%2F2.cc?ref=e869c0900c5307fbaf3b9625c171eff397346bb2", "patch": "@@ -0,0 +1,104 @@\n+// { dg-require-namedlocale \"de_DE.utf8\" }\n+// { dg-options \" -std=gnu++11 \" }\n+\n+// 2014-04-14 R\u00fcdiger Sonderfeld  <ruediger@c-plusplus.de>\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 22.4.5.1.1 (C++11) time_get members [locale.time.get.members]\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+#ifndef _GLIBCXX_ASSERT\n+#  include <iostream>\n+#  define PRINT(x) cout << #x << \": \" << x << endl\n+#  define TESTHEAD(x) cout << x << endl\n+#else\n+#  define PRINT(x) do {} while(false)\n+#  define TESTHEAD(x) do {} while(false)\n+#endif\n+\n+void test02()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  locale loc_c = locale::classic();\n+  locale loc_de = locale(\"de_DE.utf8\");\n+  VERIFY( loc_de != loc_c );\n+\n+  wistringstream iss;\n+  iss.imbue(loc_de);\n+  const time_get<wchar_t>& tget = use_facet<time_get<wchar_t>>(iss.getloc());\n+  typedef istreambuf_iterator<wchar_t> iter;\n+  const iter end;\n+\n+  ios_base::iostate err;\n+  tm time;\n+\n+  TESTHEAD(\"German locale test\");\n+  iss.str(L\"Montag, den 14. April 2014\");\n+  wstring format = L\"%A, den %d. %B %Y\";\n+  auto ret = tget.get(iter(iss), end, iss, err, &time,\n+                      format.data(), format.data()+format.size());\n+  PRINT(err);\n+  VERIFY(err == ios_base::eofbit);\n+  PRINT(time.tm_year);\n+  VERIFY(time.tm_year == 114);\n+  PRINT(time.tm_mon);\n+  VERIFY(time.tm_mon == 3);\n+  PRINT(time.tm_wday);\n+  VERIFY(time.tm_wday == 1);\n+  PRINT(time.tm_mday);\n+  VERIFY(time.tm_mday == 14);\n+  VERIFY(end == end);\n+\n+  TESTHEAD(\"German locale: Check case-insensitivity\");\n+  tm time2;\n+  iss.str(L\"Montag, den 14. April 2014\");\n+  format = L\"%A, DEN %d. %B %Y\"; // check case-insensitivity\n+  ret = tget.get(iter(iss), end, iss, err, &time2,\n+                 format.data(), format.data()+format.size());\n+  PRINT(err);\n+  VERIFY(err == ios_base::eofbit);\n+  PRINT(time2.tm_year);\n+  VERIFY(time2.tm_year == 114);\n+  PRINT(time2.tm_mon);\n+  VERIFY(time2.tm_mon == 3);\n+  PRINT(time2.tm_wday);\n+  VERIFY(time2.tm_wday == 1);\n+  PRINT(time2.tm_mday);\n+  VERIFY(time2.tm_mday == 14);\n+  VERIFY(end == end);\n+\n+  TESTHEAD(\"German locale: Check single\");\n+  iss.str(L\"Mittwoch\");\n+  ret = tget.get(iter(iss), end, iss, err, &time, L'A');\n+  PRINT(err);\n+  VERIFY(err == ios_base::eofbit);\n+  PRINT(time.tm_wday);\n+  VERIFY(time.tm_wday == 3);\n+  VERIFY(end == end);\n+}\n+\n+int main()\n+{\n+  test02();\n+}"}]}