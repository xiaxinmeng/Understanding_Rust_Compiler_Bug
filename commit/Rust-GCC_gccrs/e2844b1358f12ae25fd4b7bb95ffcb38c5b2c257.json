{"sha": "e2844b1358f12ae25fd4b7bb95ffcb38c5b2c257", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI4NDRiMTM1OGYxMmFlMjVmZDRiN2JiOTVmZmNiMzhjNWIyYzI1Nw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-07-31T10:34:36Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-07-31T10:34:36Z"}, "message": "GCOV: add cache for streamed locations.\n\n2018-07-31  Martin Liska  <mliska@suse.cz>\n\n        PR gcov-profile/85338\n        PR gcov-profile/85350\n        PR gcov-profile/85372\n        * profile.c (struct location_triplet): New.\n\t(struct location_triplet_hash): Likewise.\n\t(output_location): Do not output a BB that\n        is already recorded for a line.\n\t(branch_prob): Use streamed_locations.\n2018-07-31  Martin Liska  <mliska@suse.cz>\n\n        PR gcov-profile/85338\n        PR gcov-profile/85350\n        PR gcov-profile/85372\n\t* gcc.misc-tests/gcov-pr85338.c: New test.\n\t* gcc.misc-tests/gcov-pr85350.c: New test.\n\t* gcc.misc-tests/gcov-pr85372.c: New test.\n\nFrom-SVN: r263113", "tree": {"sha": "b7900aba2f8e4ac6802ec6086fcef6f783b59a18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7900aba2f8e4ac6802ec6086fcef6f783b59a18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2844b1358f12ae25fd4b7bb95ffcb38c5b2c257", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2844b1358f12ae25fd4b7bb95ffcb38c5b2c257", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2844b1358f12ae25fd4b7bb95ffcb38c5b2c257", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2844b1358f12ae25fd4b7bb95ffcb38c5b2c257/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "80dde427a00b3121ec7b1b3664208149feaa23a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80dde427a00b3121ec7b1b3664208149feaa23a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80dde427a00b3121ec7b1b3664208149feaa23a8"}], "stats": {"total": 181, "additions": 173, "deletions": 8}, "files": [{"sha": "ca678154c6439aae018acf25b43091c67176682d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2844b1358f12ae25fd4b7bb95ffcb38c5b2c257/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2844b1358f12ae25fd4b7bb95ffcb38c5b2c257/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2844b1358f12ae25fd4b7bb95ffcb38c5b2c257", "patch": "@@ -1,3 +1,14 @@\n+2018-07-31  Martin Liska  <mliska@suse.cz>\n+\n+        PR gcov-profile/85338\n+        PR gcov-profile/85350\n+        PR gcov-profile/85372\n+        * profile.c (struct location_triplet): New.\n+\t(struct location_triplet_hash): Likewise.\n+\t(output_location): Do not output a BB that\n+        is already recorded for a line.\n+\t(branch_prob): Use streamed_locations.\n+\n 2018-07-31  Martin Liska  <mliska@suse.cz>\n \n         PR gcov-profile/85370"}, {"sha": "cb51e0d4c51feba9942528f5e3ff8ba92c8c1976", "filename": "gcc/profile.c", "status": "modified", "additions": 83, "deletions": 8, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2844b1358f12ae25fd4b7bb95ffcb38c5b2c257/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2844b1358f12ae25fd4b7bb95ffcb38c5b2c257/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=e2844b1358f12ae25fd4b7bb95ffcb38c5b2c257", "patch": "@@ -919,17 +919,90 @@ compute_value_histograms (histogram_values values, unsigned cfg_checksum,\n     free (histogram_counts[t]);\n }\n \n+/* Location triplet which records a location.  */\n+struct location_triplet\n+{\n+  const char *filename;\n+  int lineno;\n+  int bb_index;\n+};\n+\n+/* Traits class for streamed_locations hash set below.  */\n+\n+struct location_triplet_hash : typed_noop_remove <location_triplet>\n+{\n+  typedef location_triplet value_type;\n+  typedef location_triplet compare_type;\n+\n+  static hashval_t\n+  hash (const location_triplet &ref)\n+  {\n+    inchash::hash hstate (0);\n+    if (ref.filename)\n+      hstate.add_int (strlen (ref.filename));\n+    hstate.add_int (ref.lineno);\n+    hstate.add_int (ref.bb_index);\n+    return hstate.end ();\n+  }\n+\n+  static bool\n+  equal (const location_triplet &ref1, const location_triplet &ref2)\n+  {\n+    return ref1.lineno == ref2.lineno\n+      && ref1.bb_index == ref2.bb_index\n+      && ref1.filename != NULL\n+      && ref2.filename != NULL\n+      && strcmp (ref1.filename, ref2.filename) == 0;\n+  }\n+\n+  static void\n+  mark_deleted (location_triplet &ref)\n+  {\n+    ref.lineno = -1;\n+  }\n+\n+  static void\n+  mark_empty (location_triplet &ref)\n+  {\n+    ref.lineno = -2;\n+  }\n+\n+  static bool\n+  is_deleted (const location_triplet &ref)\n+  {\n+    return ref.lineno == -1;\n+  }\n+\n+  static bool\n+  is_empty (const location_triplet &ref)\n+  {\n+    return ref.lineno == -2;\n+  }\n+};\n+\n+\n+\n+\n /* When passed NULL as file_name, initialize.\n    When passed something else, output the necessary commands to change\n    line to LINE and offset to FILE_NAME.  */\n static void\n-output_location (char const *file_name, int line,\n+output_location (hash_set<location_triplet_hash> *streamed_locations,\n+\t\t char const *file_name, int line,\n \t\t gcov_position_t *offset, basic_block bb)\n {\n   static char const *prev_file_name;\n   static int prev_line;\n   bool name_differs, line_differs;\n \n+  location_triplet triplet;\n+  triplet.filename = file_name;\n+  triplet.lineno = line;\n+  triplet.bb_index = bb ? bb->index : 0;\n+\n+  if (streamed_locations->add (triplet))\n+    return;\n+\n   if (!file_name)\n     {\n       prev_file_name = NULL;\n@@ -1018,6 +1091,8 @@ branch_prob (void)\n   flow_call_edges_add (NULL);\n   add_noreturn_fake_exit_edges ();\n \n+  hash_set <location_triplet_hash> streamed_locations;\n+\n   /* We can't handle cyclic regions constructed using abnormal edges.\n      To avoid these we replace every source of abnormal edge by a fake\n      edge from entry node and every destination by fake edge to exit.\n@@ -1254,7 +1329,7 @@ branch_prob (void)\n \n       /* Line numbers.  */\n       /* Initialize the output.  */\n-      output_location (NULL, 0, NULL, NULL);\n+      output_location (&streamed_locations, NULL, 0, NULL, NULL);\n \n       hash_set<int_hash <location_t, 0, 2> > seen_locations;\n \n@@ -1268,8 +1343,8 @@ branch_prob (void)\n \t      location_t loc = DECL_SOURCE_LOCATION (current_function_decl);\n \t      seen_locations.add (loc);\n \t      expanded_location curr_location = expand_location (loc);\n-\t      output_location (curr_location.file, curr_location.line,\n-\t\t\t       &offset, bb);\n+\t      output_location (&streamed_locations, curr_location.file,\n+\t\t\t       curr_location.line, &offset, bb);\n \t    }\n \n \t  for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n@@ -1279,8 +1354,8 @@ branch_prob (void)\n \t      if (!RESERVED_LOCATION_P (loc))\n \t\t{\n \t\t  seen_locations.add (loc);\n-\t\t  output_location (gimple_filename (stmt), gimple_lineno (stmt),\n-\t\t\t\t   &offset, bb);\n+\t\t  output_location (&streamed_locations, gimple_filename (stmt),\n+\t\t\t\t   gimple_lineno (stmt), &offset, bb);\n \t\t}\n \t    }\n \n@@ -1294,8 +1369,8 @@ branch_prob (void)\n \t      && !seen_locations.contains (loc))\n \t    {\n \t      expanded_location curr_location = expand_location (loc);\n-\t      output_location (curr_location.file, curr_location.line,\n-\t\t\t       &offset, bb);\n+\t      output_location (&streamed_locations, curr_location.file,\n+\t\t\t       curr_location.line, &offset, bb);\n \t    }\n \n \t  if (offset)"}, {"sha": "eaa6b19848743e7b3a4ba83aa93cbdee41ccb585", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2844b1358f12ae25fd4b7bb95ffcb38c5b2c257/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2844b1358f12ae25fd4b7bb95ffcb38c5b2c257/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e2844b1358f12ae25fd4b7bb95ffcb38c5b2c257", "patch": "@@ -1,3 +1,12 @@\n+2018-07-31  Martin Liska  <mliska@suse.cz>\n+\n+        PR gcov-profile/85338\n+        PR gcov-profile/85350\n+        PR gcov-profile/85372\n+\t* gcc.misc-tests/gcov-pr85338.c: New test.\n+\t* gcc.misc-tests/gcov-pr85350.c: New test.\n+\t* gcc.misc-tests/gcov-pr85372.c: New test.\n+\n 2018-07-31  Martin Liska  <mliska@suse.cz>\n \n         PR gcov-profile/83813"}, {"sha": "d1e16d29c7a81191b72c007f63e3e0f2a78c15ec", "filename": "gcc/testsuite/gcc.misc-tests/gcov-pr85338.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2844b1358f12ae25fd4b7bb95ffcb38c5b2c257/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-pr85338.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2844b1358f12ae25fd4b7bb95ffcb38c5b2c257/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-pr85338.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-pr85338.c?ref=e2844b1358f12ae25fd4b7bb95ffcb38c5b2c257", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-options \"-fprofile-arcs -ftest-coverage\" } */\n+/* { dg-do run { target native } } */\n+\n+void Test(long long Val, int Amt)\n+{\n+  __builtin_printf(\"  lshr: 0x%llx \\t\\t shl: 0x%llx\\n\", Val >> Amt, Val << Amt);  /* count(1) */\n+  __builtin_printf(\"  lshr: 0x%llx\\t\\tshl: 0x%llx\\n\",  /* count(1) */\n+    Val >> Amt, Val << Amt);\n+  __builtin_printf(\"  lshr: 0x%llx \\t\\t shl: 0x%llx\\n\",  /* count(1) */\n+    (unsigned long long)Val >> Amt, Val << Amt);\n+}\n+\n+int main()\n+{\n+  Test(10, 4);\n+\n+  return 0;\n+}\n+\n+\n+/* { dg-final { run-gcov gcov-pr85338.c } } */"}, {"sha": "0383b81fdfb6c3d101e940d3ff9fea80ad9f21c2", "filename": "gcc/testsuite/gcc.misc-tests/gcov-pr85350.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2844b1358f12ae25fd4b7bb95ffcb38c5b2c257/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-pr85350.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2844b1358f12ae25fd4b7bb95ffcb38c5b2c257/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-pr85350.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-pr85350.c?ref=e2844b1358f12ae25fd4b7bb95ffcb38c5b2c257", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-options \"-fprofile-arcs -ftest-coverage\" } */\n+/* { dg-do run { target native } } */\n+\n+int main (void)\n+{\n+  const int t = 2; /* count(1) */\n+  struct s1 {\t/* count(1) */\n+    int x;\n+    int g[t];\n+  };\n+\n+  struct s2 {\n+    int x;\n+    int g[2];\n+  };\n+\n+  __builtin_printf(\"Sucess!\\n\");\n+  return 0;\n+}\n+\n+/* { dg-final { run-gcov gcov-pr85350.c } } */"}, {"sha": "7c90e68b0dcedae259df2eaa64cf85719ec0bc91", "filename": "gcc/testsuite/gcc.misc-tests/gcov-pr85372.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2844b1358f12ae25fd4b7bb95ffcb38c5b2c257/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-pr85372.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2844b1358f12ae25fd4b7bb95ffcb38c5b2c257/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-pr85372.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-pr85372.c?ref=e2844b1358f12ae25fd4b7bb95ffcb38c5b2c257", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-options \"-fprofile-arcs -ftest-coverage\" } */\n+/* { dg-do run { target native } } */\n+/* { dg-require-effective-target indirect_jumps } */\n+\n+void *buf[5];\n+\n+void fjmp (void) {\n+  __builtin_longjmp (buf, 1);\n+}\n+\n+int main(void)\n+{\n+  int last = 0;\n+\n+  if (__builtin_setjmp (buf) == 0) {\t/* count(2) */\n+    __builtin_printf(\"True  branch\\n\");\n+    while (1) {\n+      last = 1;\t/* count(1) */\n+      fjmp ();\t/* count(1) */\n+    }\n+  } else {\n+    __builtin_printf(\"False branch\\n\");\n+  }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { run-gcov gcov-pr85372.c } } */"}]}