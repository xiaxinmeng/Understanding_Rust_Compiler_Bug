{"sha": "7a92339b20611111bb02b7b83bcc6e9cb5761740", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E5MjMzOWIyMDYxMTExMWJiMDJiN2I4M2JjYzZlOWNiNTc2MTc0MA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-12T21:24:55Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-12T21:24:55Z"}, "message": "(SETUP_INCOMING_VARARGS): If not TARGET_FPREGS...\n\n(SETUP_INCOMING_VARARGS): If not TARGET_FPREGS, save another copy of\nthe integer regs where the FP regs would have gone.\n\nFrom-SVN: r5757", "tree": {"sha": "54333f598ead1787639b36c93d69adf5a4d36728", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54333f598ead1787639b36c93d69adf5a4d36728"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a92339b20611111bb02b7b83bcc6e9cb5761740", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a92339b20611111bb02b7b83bcc6e9cb5761740", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a92339b20611111bb02b7b83bcc6e9cb5761740", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a92339b20611111bb02b7b83bcc6e9cb5761740/comments", "author": null, "committer": null, "parents": [{"sha": "6fb2e34673c7c5678301868fb547d80cd90fe737", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fb2e34673c7c5678301868fb547d80cd90fe737", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fb2e34673c7c5678301868fb547d80cd90fe737"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "6d671e964a59569639f0286b1100aa4d790e4720", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a92339b20611111bb02b7b83bcc6e9cb5761740/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a92339b20611111bb02b7b83bcc6e9cb5761740/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=7a92339b20611111bb02b7b83bcc6e9cb5761740", "patch": "@@ -794,7 +794,14 @@ enum reg_class { NO_REGS, GENERAL_REGS, FLOAT_REGS, ALL_REGS,\n    However, if NO registers need to be saved, don't allocate any space.\n    This is not only because we won't need the space, but because AP includes\n    the current_pretend_args_size and we don't want to mess up any\n-   ap-relative addresses already made.  */\n+   ap-relative addresses already made.\n+\n+   If we are not to use the floating-point registers, save the integer\n+   registers where we would put the floating-point registers.  This is\n+   not the most efficient way to implement varargs with just one register\n+   class, but it isn't worth doing anything more efficient in this rare\n+   case.  */\n+   \n \n #define SETUP_INCOMING_VARARGS(CUM,MODE,TYPE,PRETEND_SIZE,NO_RTL)\t\\\n { if ((CUM) < 6)\t\t\t\t\t\t\t\\\n@@ -808,7 +815,7 @@ enum reg_class { NO_REGS, GENERAL_REGS, FLOAT_REGS, ALL_REGS,\n \t\t\t\t     ((CUM) + 6)* UNITS_PER_WORD)),\t\\\n \t     6 - (CUM), (6 - (CUM)) * UNITS_PER_WORD);\t\t\t\\\n \t  move_block_from_reg\t\t\t\t\t\t\\\n-\t    (16 + 32 + CUM,\t\t\t\t\t\t\\\n+\t    (16 + (TARGET_FPREGS ? 32 : 0) + CUM,\t\t\t\\\n \t     gen_rtx (MEM, BLKmode,\t\t\t\t\t\\\n \t\t      plus_constant (virtual_incoming_args_rtx,\t\t\\\n \t\t\t\t     (CUM) * UNITS_PER_WORD)),\t\t\\"}]}