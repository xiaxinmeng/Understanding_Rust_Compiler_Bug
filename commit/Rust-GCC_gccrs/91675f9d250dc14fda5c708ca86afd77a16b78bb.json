{"sha": "91675f9d250dc14fda5c708ca86afd77a16b78bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE2NzVmOWQyNTBkYzE0ZmRhNWM3MDhjYTg2YWZkNzdhMTZiNzhiYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-09-26T00:22:01Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-09-26T00:22:01Z"}, "message": "re PR libstdc++/12352 (Exception safety problems in src/localename.cc)\n\n2003-09-25  Paolo Carlini  <pcarlini@unitus.it>\n\n\tPR libstdc++/12352\n\t* src/localename.cc (locale::_Impl::_Impl(const _Impl&,\n\tsize_t)): Don't leak if memory allocations for _M_facets,\n\t_M_caches, and _M_names fail.\n\t(locale::_Impl::_Impl(const char*, size_t)): Ditto.\n\t(locale::_Impl::_M_replace_categories(const _Impl*,\n\tcategory)): Ditto.\n\t(locale::_Impl::_M_install_facet(const locale::id*,\n\tconst facet*)): Ditto.\n\t* include/bits/locale_classes.h (locale::locale(const locale&,\n\t_Facet*)): Don't leak memory.\n\t* testsuite/22_locale/locale/cons/12352.cc: New, from the PR.\n\n\t* src/localename.cc (locale::_Impl::_Impl(facet**, size_t,\n\tbool)): Qualify with std:: strcpy, tweak.\n\t* include/bits/locale_classes.h\n\t(locale::_Impl::_M_check_same_name): Qualify strcmp.\n\nFrom-SVN: r71808", "tree": {"sha": "d30431ba3f6f30116cd7cdf6d5917466fb5bd031", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d30431ba3f6f30116cd7cdf6d5917466fb5bd031"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91675f9d250dc14fda5c708ca86afd77a16b78bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91675f9d250dc14fda5c708ca86afd77a16b78bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91675f9d250dc14fda5c708ca86afd77a16b78bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91675f9d250dc14fda5c708ca86afd77a16b78bb/comments", "author": null, "committer": null, "parents": [{"sha": "81a1dd18722933060d68626285e0fbc188846718", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81a1dd18722933060d68626285e0fbc188846718", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81a1dd18722933060d68626285e0fbc188846718"}], "stats": {"total": 331, "additions": 243, "deletions": 88}, "files": [{"sha": "7729b7bbd6b16d439f1e40a462f1837acf4a5fc2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91675f9d250dc14fda5c708ca86afd77a16b78bb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91675f9d250dc14fda5c708ca86afd77a16b78bb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=91675f9d250dc14fda5c708ca86afd77a16b78bb", "patch": "@@ -1,3 +1,23 @@\n+2003-09-25  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\tPR libstdc++/12352\n+\t* src/localename.cc (locale::_Impl::_Impl(const _Impl&,\n+\tsize_t)): Don't leak if memory allocations for _M_facets,\n+\t_M_caches, and _M_names fail.\n+\t(locale::_Impl::_Impl(const char*, size_t)): Ditto.\n+\t(locale::_Impl::_M_replace_categories(const _Impl*,\n+\tcategory)): Ditto.\n+\t(locale::_Impl::_M_install_facet(const locale::id*,\n+\tconst facet*)): Ditto.\n+\t* include/bits/locale_classes.h (locale::locale(const locale&,\n+\t_Facet*)): Don't leak memory.\n+\t* testsuite/22_locale/locale/cons/12352.cc: New, from the PR.\n+\n+\t* src/localename.cc (locale::_Impl::_Impl(facet**, size_t,\n+\tbool)): Qualify with std:: strcpy, tweak.\n+\t* include/bits/locale_classes.h\n+\t(locale::_Impl::_M_check_same_name): Qualify strcmp.\n+\n 2003-09-25  Brad Spencer  <spencer@infointeractive.com>\n \n \tPR libstdc++/6072"}, {"sha": "49ece4ce1f5fea234fcee77f700d5c87156a85e0", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91675f9d250dc14fda5c708ca86afd77a16b78bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91675f9d250dc14fda5c708ca86afd77a16b78bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=91675f9d250dc14fda5c708ca86afd77a16b78bb", "patch": "@@ -346,7 +346,7 @@ namespace std\n     {\n       bool __ret = true;\n       for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)\n-\t__ret &= (strcmp(_M_names[__i], _M_names[__i + 1]) == 0);\n+\t__ret &= (std::strcmp(_M_names[__i], _M_names[__i + 1]) == 0);\n       return __ret;\n     }\n \n@@ -379,13 +379,30 @@ namespace std\n     locale::locale(const locale& __other, _Facet* __f)\n     {\n       _M_impl = new _Impl(*__other._M_impl, 1);\n-      _M_impl->_M_install_facet(&_Facet::id, __f);\n-      for (size_t __i = 0; __i < _S_categories_size; ++__i)\n+\n+      char* _M_tmp_names[_S_categories_size];\n+      size_t __i = 0;\n+      try\n+\t{\n+\t  for (; __i < _S_categories_size; ++__i)\n+\t    {\n+\t      _M_tmp_names[__i] = new char[2];\n+\t      std::strcpy(_M_tmp_names[__i], \"*\");\n+\t    }\n+\t  _M_impl->_M_install_facet(&_Facet::id, __f);\n+\t}\n+      catch(...)\n+\t{\n+\t  delete _M_impl;\n+\t  for (size_t __j = 0; __j < __i; ++__j)\n+\t    delete [] _M_tmp_names[__j];\t  \n+\t  __throw_exception_again;\n+\t}\n+\n+      for (size_t __k = 0; __k < _S_categories_size; ++__k)\n \t{\n-\t  delete [] _M_impl->_M_names[__i];\n-\t  char* __new = new char[2];\n-\t  std::strcpy(__new, \"*\");\n-\t  _M_impl->_M_names[__i] = __new;\n+\t  delete [] _M_impl->_M_names[__k];\n+\t  _M_impl->_M_names[__k] = _M_tmp_names[__k];\n \t}\n     }\n } // namespace std"}, {"sha": "866e8979a6546a457562fefce05dd3be7d4b7323", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 75, "deletions": 81, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91675f9d250dc14fda5c708ca86afd77a16b78bb/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91675f9d250dc14fda5c708ca86afd77a16b78bb/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=91675f9d250dc14fda5c708ca86afd77a16b78bb", "patch": "@@ -44,7 +44,7 @@ namespace __gnu_cxx\n   extern numpunct<char> \t\t\tnumpunct_c;\n   extern num_get<char> \t\t\t\tnum_get_c;\n   extern num_put<char> \t\t\t\tnum_put_c;  \n-extern codecvt<char, char, mbstate_t>\t\tcodecvt_c;\n+  extern codecvt<char, char, mbstate_t>\t\tcodecvt_c;\n   extern moneypunct<char, false> \t\tmoneypunct_cf;\n   extern moneypunct<char, true> \t\tmoneypunct_ct;\n   extern money_get<char> \t\t\tmoney_get_c;\n@@ -111,55 +111,48 @@ namespace std\n   _Impl(const _Impl& __imp, size_t __refs)\n   : _M_references(__refs), _M_facets_size(__imp._M_facets_size)\n   {\n+    _M_facets = _M_caches = 0;\n+    _M_names = 0;\n     try\n-      { \n+      {\n \t_M_facets = new const facet*[_M_facets_size]; \n-\tfor (size_t __i = 0; __i < _M_facets_size; ++__i)\n-\t  _M_facets[__i] = 0;\n+\t_M_caches = new const facet*[_M_facets_size];\n+\t_M_names = new char*[_S_categories_size];\n       }\n-    catch(...) \n+    catch(...)\n       {\n \tdelete [] _M_facets;\n+\tdelete [] _M_caches;\t\t\n \t__throw_exception_again;\n       }\n+\n     for (size_t __i = 0; __i < _M_facets_size; ++__i)\n       {\n \t_M_facets[__i] = __imp._M_facets[__i];\n+\t_M_caches[__i] = __imp._M_caches[__i];\n \tif (_M_facets[__i])\n \t  _M_facets[__i]->_M_add_reference();\n-      }\n-\n-    try \n-      {\n-      \t_M_caches = new const facet*[_M_facets_size];\n-      }\n-    catch(...)\n-      {\n-\tdelete [] _M_caches;\n-\t__throw_exception_again;\n-      }\n-    for (size_t __i = 0; __i < _M_facets_size; ++__i)\n-      {\n-\t_M_caches[__i] = __imp._M_caches[__i];\n \tif (_M_caches[__i])\n-\t  _M_caches[__i]->_M_add_reference(); \n+\t  _M_caches[__i]->_M_add_reference(); \t\n       }\n \n-    try \n+    // Name all the categories.\n+    for (size_t __i = 0; __i < _S_categories_size; ++__i)\n+      _M_names[__i] = 0;\n+    try\n       {\n-      \t_M_names = new char*[_S_categories_size];\n+\tfor (size_t __i = 0; __i < _S_categories_size; ++__i)\n+\t  {\n+\t    char* __new = new char[std::strlen(__imp._M_names[__i]) + 1];\n+\t    std::strcpy(__new, __imp._M_names[__i]);\n+\t    _M_names[__i] = __new;\n+\t  }\n       }\n     catch(...)\n       {\n-\tdelete [] _M_names;\n+\tthis->~_Impl();\n \t__throw_exception_again;\n       }\n-    for (size_t __i = 0; __i < _S_categories_size; ++__i)\n-      {\n-\tchar* __new = new char[strlen(__imp._M_names[__i]) + 1];\n-\tstd::strcpy(__new, __imp._M_names[__i]);\n-\t_M_names[__i] = __new;\n-      }\n   }\n \n   // Construct named _Impl.\n@@ -172,66 +165,61 @@ namespace std\n     __c_locale __cloc;\n     locale::facet::_S_create_c_locale(__cloc, __s);\n \n+    _M_facets = _M_caches = 0;\n+    _M_names = 0;\n     try\n-      { \n-\t_M_facets = new const facet*[_M_facets_size]; \n-\tfor (size_t __i = 0; __i < _M_facets_size; ++__i)\n-\t  _M_facets[__i] = 0;\n-      }\n-    catch(...) \n       {\n-\tdelete [] _M_facets;\n-\t__throw_exception_again;\n-      }\n-\n-    try \n-      {\n-      \t_M_caches = new const facet*[_M_facets_size];\n-\tfor (size_t __i = 0; __i < _M_facets_size; ++__i)\n-\t  _M_caches[__i] = 0;\n+\t_M_facets = new const facet*[_M_facets_size];\n+\t_M_caches = new const facet*[_M_facets_size];\n+\t_M_names = new char*[_S_categories_size];\n       }\n     catch(...)\n       {\n+\tdelete [] _M_facets;\n \tdelete [] _M_caches;\n \t__throw_exception_again;\n-      }\n+      }      \n+\n+    for (size_t __i = 0; __i < _M_facets_size; ++__i)\n+      _M_facets[__i] = _M_caches[__i] = 0;\n \n     // Name all the categories.\n-    try \n-      {\n-      \t_M_names = new char*[_S_categories_size];\n-      }\n-    catch(...)\n-      {\n-\tdelete [] _M_names;\n-\t__throw_exception_again;\n-      }\n-    size_t __len = std::strlen(__s);\n-    if (!std::strchr(__s, ';'))\n+    for (size_t __i = 0; __i < _S_categories_size; ++__i)\n+      _M_names[__i] = 0;\n+    try\n       {\n-\tfor (size_t __i = 0; __i < _S_categories_size; ++__i)\n+\tconst size_t __len = std::strlen(__s);\n+\tif (!std::strchr(__s, ';'))\n \t  {\n-\t    _M_names[__i] = new char[__len + 1];\n-\t    std::strcpy(_M_names[__i], __s);\n+\t    for (size_t __i = 0; __i < _S_categories_size; ++__i)\n+\t      {\n+\t\t_M_names[__i] = new char[__len + 1];\n+\t\tstd::strcpy(_M_names[__i], __s);\n+\t      }\n \t  }\n-      }\n-    else\n-      {\n-\tconst char* __beg = __s;\n-\tfor (size_t __i = 0; __i < _S_categories_size; ++__i)\n+\telse\n \t  {\n-\t    __beg = std::strchr(__beg, '=') + 1;\n-\t    const char* __end = std::strchr(__beg, ';');\n-\t    if (!__end)\n-\t      __end = __s + __len;\n-\t    char* __new = new char[__end - __beg + 1];\n-\t    std::memcpy(__new, __beg, __end - __beg);\n-\t    __new[__end - __beg] = '\\0';\n-\t    _M_names[__i] = __new;\n+\t    const char* __beg = __s;\n+\t    for (size_t __i = 0; __i < _S_categories_size; ++__i)\n+\t      {\n+\t\t__beg = std::strchr(__beg, '=') + 1;\n+\t\tconst char* __end = std::strchr(__beg, ';');\n+\t\tif (!__end)\n+\t\t  __end = __s + __len;\n+\t\tchar* __new = new char[__end - __beg + 1];\n+\t\tstd::memcpy(__new, __beg, __end - __beg);\n+\t\t__new[__end - __beg] = '\\0';\n+\t\t_M_names[__i] = __new;\n+\t      }\n \t  }\n       }\n+    catch(...)\n+      {\n+\tthis->~_Impl();\n+\t__throw_exception_again;\n+      }\n \n-    // Construct all standard facets and add them to _M_facets.  \n+    // Construct all standard facets and add them to _M_facets.\n     _M_init_facet(new std::ctype<char>(__cloc, 0, false));\n     _M_init_facet(new codecvt<char, char, mbstate_t>(__cloc));\n     _M_init_facet(new numpunct<char>(__cloc));\n@@ -263,6 +251,7 @@ namespace std\n     _M_init_facet(new time_put<wchar_t>);\n     _M_init_facet(new std::messages<wchar_t>(__cloc, __s));\n #endif\t  \n+\n     locale::facet::_S_destroy_c_locale(__cloc);\n   }\n \n@@ -278,19 +267,16 @@ namespace std\n \t\t\t\t      locale::facet::_S_c_name);\n \n     _M_facets = new (&facet_vec) const facet*[_M_facets_size];\n-    for (size_t __i = 0; __i < _M_facets_size; ++__i)\n-      _M_facets[__i] = 0;\n-\n     _M_caches = new (&cache_vec) const facet*[_M_facets_size];\n     for (size_t __i = 0; __i < _M_facets_size; ++__i)\n-      _M_caches[__i] = 0;\n+      _M_facets[__i] = _M_caches[__i] = 0;\n \n     // Name all the categories.\n     _M_names = new (&name_vec) char*[_S_categories_size];\n     for (size_t __i = 0; __i < _S_categories_size; ++__i)\n       {\n \t_M_names[__i] = new (&name_c[__i]) char[2];\n-\tstrcpy(_M_names[__i], locale::facet::_S_c_name);\n+\tstd::strcpy(_M_names[__i], locale::facet::_S_c_name);\n       }\n \n     // This is needed as presently the C++ version of \"C\" locales\n@@ -357,7 +343,7 @@ namespace std\n     _M_init_facet(new (&time_put_w) time_put<wchar_t>(1));\n     _M_init_facet(new (&messages_w) std::messages<wchar_t>(1));\n #endif \n-\n+     \n     // This locale is safe to pre-cache, after all the facets have\n     // been created and installed.\n     _M_caches[numpunct<char>::id._M_id()] = __npc;\n@@ -388,9 +374,9 @@ namespace std\n \t    if (std::strcmp(_M_names[__ix], \"*\") != 0 \n \t\t&& std::strcmp(__imp->_M_names[__ix], \"*\") != 0)\n \t      {\n-\t\tdelete [] _M_names[__ix];\n \t\tchar* __new = new char[std::strlen(__imp->_M_names[__ix]) + 1];\n \t\tstd::strcpy(__new, __imp->_M_names[__ix]);\n+\t\tdelete [] _M_names[__ix];\n \t\t_M_names[__ix] = __new;\n \t      }\n \t  }\n@@ -440,7 +426,15 @@ namespace std\n \t    // New cache array.\n \t    const facet** __oldc = _M_caches;\n \t    const facet** __newc;\n-\t    __newc = new const facet*[__new_size]; \n+\t    try\n+\t      {\n+\t\t__newc = new const facet*[__new_size];\n+\t      }\n+\t    catch(...)\n+\t      {\n+\t\tdelete [] __newf;\n+\t\t__throw_exception_again;\n+\t      }\n \t    for (size_t __i = 0; __i < _M_facets_size; ++__i)\n \t      __newc[__i] = _M_caches[__i];\n \t    for (size_t __i2 = _M_facets_size; __i2 < __new_size; ++__i2)"}, {"sha": "426395951542234940528e7b4ef2b61ff5f9d379", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/12352.cc", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91675f9d250dc14fda5c708ca86afd77a16b78bb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F12352.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91675f9d250dc14fda5c708ca86afd77a16b78bb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F12352.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F12352.cc?ref=91675f9d250dc14fda5c708ca86afd77a16b78bb", "patch": "@@ -0,0 +1,124 @@\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.1.1.2 locale constructors and destructors [lib.locale.cons]\n+\n+#include <new>\n+#include <locale>\n+#include <cstdlib>\n+#include <cstring>\n+\n+int times_to_fail = 0;\n+\n+void* allocate(std::size_t n)\n+{\n+  if (!times_to_fail--)\n+    return 0;\n+\n+  void* ret = std::malloc(n ? n : 1);\n+  if (ret)\n+    std::memset(ret, 0xbc, n);\n+  return ret;\n+}\n+\n+void deallocate(void* p)\n+{\n+  if (p)\n+    std::free(p);\n+}\n+\n+void* operator new(std::size_t n) throw (std::bad_alloc)\n+{\n+  void* ret = allocate(n);\n+  if (!ret)\n+    throw std::bad_alloc();\n+  return ret;\n+}\n+\n+void* operator new[](std::size_t n) throw (std::bad_alloc)\n+{\n+  void* ret = allocate(n);\n+  if (!ret)\n+    throw std::bad_alloc();\n+  return ret;\n+}\n+\n+void operator delete(void* p) throw()\n+{\n+  deallocate(p);\n+}\n+\n+void operator delete[](void* p) throw()\n+{\n+  deallocate(p);\n+}\n+\n+void* operator new(std::size_t n, const std::nothrow_t&) throw()\n+{\n+  return allocate(n);\n+}\n+\n+void* operator new[](std::size_t n, const std::nothrow_t&) throw()\n+{\n+  return allocate(n);\n+}\n+\n+void operator delete(void* p, const std::nothrow_t&) throw()\n+{\n+  deallocate(p);\n+}\n+\n+void operator delete[](void* p, const std::nothrow_t&) throw()\n+{\n+  deallocate(p);\n+}\n+\n+// libstdc++/12352\n+void test01(int iters)\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  for (int j = 0; j < iters; ++j)\n+    {\n+      for (int i = 0; i < 100; ++i)\n+\t{\n+\t  times_to_fail = i;\n+\t  try\n+\t    {\n+\t      locale loc1(\"\");\n+\t      locale loc2(loc1, locale::classic(), locale::numeric);\n+\t    }\n+\t  catch (exception&)\n+\t    {\n+\t    }\n+\t}\n+    }\n+}\n+\n+int main(int argc, char* argv[])\n+{\n+  int iters = 1;\n+  if (argc > 1)\n+    iters = std::atoi(argv[1]);\n+  if (iters < 1)\n+    iters = 1;\n+  test01(iters);\n+\n+  return 0;\n+}"}]}