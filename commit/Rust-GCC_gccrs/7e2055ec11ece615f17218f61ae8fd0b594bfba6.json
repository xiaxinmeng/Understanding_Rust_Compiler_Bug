{"sha": "7e2055ec11ece615f17218f61ae8fd0b594bfba6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UyMDU1ZWMxMWVjZTYxNWYxNzIxOGY2MWFlOGZkMGI1OTRiZmJhNg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-08-26T06:54:15Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-08-26T06:54:15Z"}, "message": "config.gcc (hppa*-*-hpux11*, [...]): Remove commented-out logic to use DCE threads (if present)...\n\ngcc:\n\t* config.gcc (hppa*-*-hpux11*, ia64*-*-hpux*): Remove\n\tcommented-out logic to use DCE threads (if present), add\n\tsupport for POSIX threads.\n\t* config/ia64/hpux.h: Define CPP_SPEC to set appropriate\n\t#defines for -pthread.  Add -lpthread to LIB_SPEC when\n\t-pthread.  In both cases take -mt as a synonym for -pthread\n\tfor acc compatibility.\n\tDefine GTHREAD_USE_WEAK to 0.\n\t* config/pa/pa-hpux11.h: Likewise for CPP_SPEC and LIB_SPEC.\n\tRemove old logic for DCE threads from LIB_SPEC.\n\t* config/pa/pa64-hpux.h: Define GTHREAD_USE_WEAK to 0.\nlibstdc++-v3:\n\t* config/os/hpux/os_defines.h: Unconditionally define\n\t_GLIBCXX_GTHREAD_USE_WEAK to 0.\n\nFrom-SVN: r70797", "tree": {"sha": "4da878ce1023935732ab30a3a136fc84f8f2321a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4da878ce1023935732ab30a3a136fc84f8f2321a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e2055ec11ece615f17218f61ae8fd0b594bfba6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e2055ec11ece615f17218f61ae8fd0b594bfba6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e2055ec11ece615f17218f61ae8fd0b594bfba6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e2055ec11ece615f17218f61ae8fd0b594bfba6/comments", "author": null, "committer": null, "parents": [{"sha": "6cd28c3182ddfd66585f121bcb09445fdd96ece5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd28c3182ddfd66585f121bcb09445fdd96ece5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cd28c3182ddfd66585f121bcb09445fdd96ece5"}], "stats": {"total": 246, "additions": 141, "deletions": 105}, "files": [{"sha": "b4d62d35a99032ada126b216fe31475055d3e597", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2055ec11ece615f17218f61ae8fd0b594bfba6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2055ec11ece615f17218f61ae8fd0b594bfba6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e2055ec11ece615f17218f61ae8fd0b594bfba6", "patch": "@@ -1,3 +1,17 @@\n+2003-08-25  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* config.gcc (hppa*-*-hpux11*, ia64*-*-hpux*): Remove\n+\tcommented-out logic to use DCE threads (if present), add\n+\tsupport for POSIX threads.\n+\t* config/ia64/hpux.h: Define CPP_SPEC to set appropriate\n+\t#defines for -pthread.  Add -lpthread to LIB_SPEC when\n+\t-pthread.  In both cases take -mt as a synonym for -pthread\n+\tfor acc compatibility.\n+\tDefine GTHREAD_USE_WEAK to 0.\n+\t* config/pa/pa-hpux11.h: Likewise for CPP_SPEC and LIB_SPEC.\n+\tRemove old logic for DCE threads from LIB_SPEC.\n+\t* config/pa/pa64-hpux.h: Define GTHREAD_USE_WEAK to 0.\n+\n 2003-08-25  Roger Sayle  <roger@eyesopen.com>\n \n \t* builtins.c (expand_builtin_mathfn):  Rearrange so that we only\n@@ -9,7 +23,7 @@\n \n \t* config/ia64/ia64.c (ia64_expand_tls_address): Properly truncate\n \tresult when op0 is SImode.\n-\t\n+\n 2003-08-25  Nathanael Nerode  <neroden@twcny.rr.com>\n \n \t* fixinc/inclhack.def (svr4_sighandler_type): New fix, ported\n@@ -64,7 +78,7 @@\n \t(pp_c_abstract_declarator): Adjust prototype.\n \t(pp_c_direct_abstract_declarator): Likewise.\n \t(pp_c_type_id): Likewise.\n-\t(pp_c_storage_class_specifier): Likewise. \n+\t(pp_c_storage_class_specifier): Likewise.\n \t(pp_c_function_specifier): Likewise.\n \t(pp_c_declaration_specifiers): Likewise.\n \t(pp_c_direct_declarator): Likewise.\n@@ -356,26 +370,26 @@ Wed Aug 20 12:08:55 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t* config/pa/quadlib.c: Likewise.\n \t* config/pa/rtems.h: Likewise.\n \t* config/pa/pa-protos.h: Replace 'GNU CC' with 'GCC' and remove\n-\tall uses of the PARAMS macro. \n+\tall uses of the PARAMS macro.\n \t* config/pa/pa.h: Likewise.\n \t* config/pa/som.h: Likewise.\n \n-        * config/iq2000/iq2000.c: Replace 'GNU CC' with 'GCC'.\n-        Remove all uses of PARAMS macro.\n-        Convert all function definitions to ISO C90 syntax.\n+\t* config/iq2000/iq2000.c: Replace 'GNU CC' with 'GCC'.\n+\tRemove all uses of PARAMS macro.\n+\tConvert all function definitions to ISO C90 syntax.\n \t* config/iq2000-protos.h: Replace 'GNU CC' with 'GCC'.\n-        Remove all uses of PARAMS macro.\n+\tRemove all uses of PARAMS macro.\n \t* config/iq2000.h: Remove all uses of PARAMS macro.\n-        * config/iq2000/iq2000.md: Replace 'GNU CC' with 'GCC'.\n+\t* config/iq2000/iq2000.md: Replace 'GNU CC' with 'GCC'.\n \n 2003-08-23  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390-protos.h (s390_output_pool_entry): Declare.\n \t* config/s390/s390.c (gen_consttable): Remove.\n \t(s390_dump_pool): Use UNSPECV_POOL_ENTRY for pool entry insns.\n \t(s390_output_pool_entry): New function.\n-\t* config/s390/s390.md (UNSPECV_POOL_QI, UNSPECV_POOL_HI, \n-\tUNSPECV_POOL_SI, UNSPECV_POOL_DI, UNSPECV_POOL_TI, \n+\t* config/s390/s390.md (UNSPECV_POOL_QI, UNSPECV_POOL_HI,\n+\tUNSPECV_POOL_SI, UNSPECV_POOL_DI, UNSPECV_POOL_TI,\n \tUNSPECV_POOL_SF, UNSPECV_POOL_DF): Remove, replace by ...\n \t(UNSPECV_POOL_ENTRY): ... this new constant.\n \t(\"consttable_qi\", \"consttable_hi\", \"consttable_si\", \"consttable_di\",\n@@ -475,8 +489,8 @@ Wed Aug 20 12:08:55 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t* config/m68k/m68k.c: Likewise.\n \n 2003-08-21  Bernardo Innocenti  <bernie@develer.com>\n-            Paul Dale  <pauli@snapgear.com>\n-            Peter Barada <peter@baradas.org>\n+\t    Paul Dale  <pauli@snapgear.com>\n+\t    Peter Barada <peter@baradas.org>\n \n \t* config/m68k/m68k.c (m68k_rtx_costs): Adjust mul/div costs for\n \tColdFire cores."}, {"sha": "70ce27eb43a75b412329297374c8f2cf41a54593", "filename": "gcc/config.gcc", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2055ec11ece615f17218f61ae8fd0b594bfba6/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2055ec11ece615f17218f61ae8fd0b594bfba6/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=7e2055ec11ece615f17218f61ae8fd0b594bfba6", "patch": "@@ -882,41 +882,35 @@ hppa*64*-*-hpux11*)\n \tthen\n \t\ttarget_cpu_default=\"${target_cpu_default}|MASK_GNU_LD\"\n \tfi\n-#\tif [ x$enable_threads = x ]; then\n-#\t    enable_threads=$have_pthread_h\n-#\tfi\n-#\tif [ x$enable_threads = xyes ]; then\n-#\t\tthread_file='dce'\n-#\t\ttmake_file=\"${tmake_file} pa/t-dce-thr\"\n-#\tfi\n+\tcase x${enable_threads} in\n+\txyes | xposix )\n+\t\tthread_file=posix \n+\t\t;;\n+\tesac\n \tinstall_headers_dir=install-headers-cpio\n \t;;\n hppa1.1-*-hpux11* | hppa2*-*-hpux11*)\n \ttarget_cpu_default=\"MASK_PA_11\"\n \ttm_file=\"${tm_file} pa/pa32-regs.h pa/long_double.h dbxelf.h pa/som.h pa/pa-hpux.h pa/pa-hpux11.h\"\n \ttmake_file=\"pa/t-pa pa/t-pa-hpux pa/t-hpux-shlib\"\n \txmake_file=\"pa/x-ada\"\n-#\tif test x$enable_threads = x; then\n-#\t    enable_threads=$have_pthread_h\n-#\tfi\n-#\tif test x$enable_threads = xyes; then\n-#\t\tthread_file='dce'\n-#\t\ttmake_file=\"${tmake_file} pa/t-dce-thr\"\n-#\tfi\n+\tcase x${enable_threads} in\n+\txyes | xposix )\n+\t\tthread_file=posix \n+\t\t;;\n+\tesac\n \tinstall_headers_dir=install-headers-cpio\n \tuse_collect2=yes\n \t;;\n hppa1.0-*-hpux11*)\n \ttm_file=\"${tm_file} pa/pa32-regs.h pa/long_double.h dbxelf.h pa/som.h pa/pa-hpux.h pa/pa-hpux11.h\"\n \ttmake_file=\"pa/t-pa pa/t-pa-hpux pa/t-hpux-shlib\"\n \txmake_file=\"pa/x-ada\"\n-#\tif test x$enable_threads = x; then\n-#\t    enable_threads=$have_pthread_h\n-#\tfi\n-#\tif test x$enable_threads = xyes; then\n-#\t\tthread_file='dce'\n-#\t\ttmake_file=\"${tmake_file} pa/t-dce-thr\"\n-#\tfi\n+\tcase x${enable_threads} in\n+\txyes | xposix )\n+\t\tthread_file=posix \n+\t\t;;\n+\tesac\n \tinstall_headers_dir=install-headers-cpio\n \tuse_collect2=yes\n \t;;\n@@ -1296,9 +1290,11 @@ ia64*-*-hpux*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h ia64/sysv4.h ia64/hpux.h ia64/hpux_longdouble.h\"\n \ttmake_file=\"ia64/t-ia64 ia64/t-hpux\"\n \ttarget_cpu_default=\"MASK_GNU_AS\"\n-\tif test x$enable_threads = xyes; then\n-\t\tthread_file='posix'\n-\tfi\n+\tcase x$enable_threads in\n+\txyes | xposix )\n+\t\tthread_file=posix\n+\t\t;;\n+\tesac\n \tuse_collect2=no\n \tc_target_objs=\"ia64-c.o\"\n \tcxx_target_objs=\"ia64-c.o\""}, {"sha": "160ac456b7b0aca272990abf4e4722c43e5799ad", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2055ec11ece615f17218f61ae8fd0b594bfba6/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2055ec11ece615f17218f61ae8fd0b594bfba6/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=7e2055ec11ece615f17218f61ae8fd0b594bfba6", "patch": "@@ -49,6 +49,13 @@ do {\t\t\t\t\t\t\t\\\n \t  }\t\t\t\t\t\t\\\n } while (0)\n \n+#undef CPP_SPEC\n+#define CPP_SPEC \\\n+  \"%{mt|pthread:-D_REENTRANT -D_THREAD_SAFE -D_POSIX_C_SOURCE=199506L}\"\n+/* aCC defines also -DRWSTD_MULTI_THREAD, -DRW_MULTI_THREAD.  These\n+   affect only aCC's C++ library (Rogue Wave-derived) which we do not\n+   use, and they violate the user's name space.  */\n+\n #undef  ASM_EXTRA_SPEC\n #define ASM_EXTRA_SPEC \"%{milp32:-milp32} %{mlp64:-mlp64}\"\n \n@@ -68,6 +75,7 @@ do {\t\t\t\t\t\t\t\\\n #undef  LIB_SPEC\n #define LIB_SPEC \\\n   \"%{!shared: \\\n+     %{mt|pthread:-lpthread} \\\n      %{p:%{!mlp64:-L/usr/lib/hpux32/libp} \\\n \t %{mlp64:-L/usr/lib/hpux64/libp} -lprof} \\\n      %{pg:%{!mlp64:-L/usr/lib/hpux32/libp} \\\n@@ -134,6 +142,10 @@ do {\t\t\t\t\t\t\t\t\\\n #undef TARGET_HPUX_LD\n #define TARGET_HPUX_LD\t1\n \n+/* The HPUX dynamic linker objects to weak symbols with no\n+   definitions, so do not use them in gthr-posix.h.  */\n+#define GTHREAD_USE_WEAK 0\n+\n /* Put out the needed function declarations at the end.  */\n \n #define TARGET_ASM_FILE_END ia64_hpux_file_end"}, {"sha": "e8865dfff7f0e69ea6514d64b206b69ad563ec5e", "filename": "gcc/config/pa/pa-hpux11.h", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2055ec11ece615f17218f61ae8fd0b594bfba6/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2055ec11ece615f17218f61ae8fd0b594bfba6/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h?ref=7e2055ec11ece615f17218f61ae8fd0b594bfba6", "patch": "@@ -74,6 +74,13 @@ Boston, MA 02111-1307, USA.  */\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+#undef CPP_SPEC\n+#define CPP_SPEC \\\n+  \"%{mt|pthread:-D_REENTRANT -D_THREAD_SAFE -D_POSIX_C_SOURCE=199506L}\"\n+/* aCC defines also -DRWSTD_MULTI_THREAD, -DRW_MULTI_THREAD.  These\n+   affect only aCC's C++ library (Rogue Wave-derived) which we do not\n+   use, and they violate the user's name space.  */\n+\n /* We can debug dynamically linked executables on hpux11; we also\n    want dereferencing of a NULL pointer to cause a SEGV.  */\n #undef LINK_SPEC\n@@ -100,15 +107,12 @@ Boston, MA 02111-1307, USA.  */\n    %{static:-a archive} %{shared:-b}\"\n #endif\n \n-/* Like the default, except no -lg.  */\n+/* hpux 11 has posix threads.  */\n #undef LIB_SPEC\n #define LIB_SPEC \\\n   \"%{!shared:\\\n-     %{!p:%{!pg:\\\n-       %{!threads:-lc %{static:%{!nolibdld:-a shared -ldld -a archive -lc}}}\\\n-       %{threads:-lcma -lc_r}}}\\\n-     %{p:%{!pg:-lc %{static:%{!nolibdld:-a shared -ldld -a archive -lc}}}}\\\n-     %{pg:-lc %{static:%{!nolibdld:-a shared -ldld -a archive -lc}}}}\"\n+     %{mt|pthread:-lpthread} -lc \\\n+     %{static:%{!nolibdld:-a shared -ldld -a archive -lc}}}\"\n \n /* Under hpux11, the normal location of the `ld' and `as' programs is the\n    /usr/ccs/bin directory.  */"}, {"sha": "a29583b561be63bc29b1f345de0088f2b95f2fbc", "filename": "gcc/config/pa/pa64-hpux.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2055ec11ece615f17218f61ae8fd0b594bfba6/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2055ec11ece615f17218f61ae8fd0b594bfba6/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h?ref=7e2055ec11ece615f17218f61ae8fd0b594bfba6", "patch": "@@ -383,3 +383,7 @@ PA_INIT_FINI_HACK\n    and returns 0.  /bin/true cannot be used because it is a script without\n    an interpreter.  */\n #define INIT_ENVIRONMENT \"LD_PXDB=/usr/ccs/bin/size\"\n+\n+/* The HPUX dynamic linker objects to weak symbols with no\n+   definitions, so do not use them in gthr-posix.h.  */\n+#define GTHREAD_USE_WEAK 0"}, {"sha": "33f4fadc06cb27a14cc636224356a597fc953b50", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 65, "deletions": 60, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2055ec11ece615f17218f61ae8fd0b594bfba6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2055ec11ece615f17218f61ae8fd0b594bfba6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7e2055ec11ece615f17218f61ae8fd0b594bfba6", "patch": "@@ -1,3 +1,8 @@\n+2003-08-25  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* config/os/hpux/os_defines.h: Unconditionally define\n+\t_GLIBCXX_GTHREAD_USE_WEAK to 0.\n+\n 2003-08-19  Geoffrey Keating  <geoffk@apple.com>\n \n \t* crossconfig.m4 (*-darwin*): Add a large and boring stanza for\n@@ -6,8 +11,8 @@\n \n 2003-08-19  Petur Runolfsson  <peturr02@ru.is>\n \n-        * include/ext/ropeimpl.h: #include <ostream> instead of <iostream>\n-\t\n+\t* include/ext/ropeimpl.h: #include <ostream> instead of <iostream>\n+\n 2003-08-17  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* configure.ac:  GCC_NO_EXECUTABLES was supposed to be commented\n@@ -48,7 +53,7 @@\n 2003-08-11  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/basic_ios.h: Remove *_iter typedefs, change num*\n-\ttypedefs to num_*.\t\n+\ttypedefs to num_*.\n \t* include/bits/basic_ios.tcc: Same.\n \t* include/bits/istream.tcc: Same.\n \t* include/bits/locale_facets.h: Same.\n@@ -58,7 +63,7 @@\n \t* testsuite/26_numerics/complex_inserters_extractors.cc: Fix.\n \n \t* include/ext/rope: Remove build warning.\n-\t\n+\n 2003-08-11  Andreas Jaeger  <aj@suse.de>\n \n \t* include/Makefile.am (stamp-c_base): Add dependency on stamp-bits\n@@ -84,27 +89,27 @@\n \t* testsuite/Makefile.am (check-abi): Change libstdc++-v3 to libstdc++.\n \t(check-abi-verbose): Same.\n \t* testsuite/testsuite_performance.h (report_performance): Same.\n-\t\n+\n 2003-08-08  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* testsuite/testsuite_performance.h (__FreeBSD__): Add fake mallinfo.\n \n 2003-08-07  Doug Gregor  <dgregor@apple.com>\n \n-\t* include/bits/char_traits.h (char_traits::not_eof): Match operand \n-        types in ? :.\n+\t* include/bits/char_traits.h (char_traits::not_eof): Match operand\n+\ttypes in ? :.\n \n 2003-08-07  Bernardo Innocenti  <bernie@develer.com>\n \n \tPR libstdc++/11784\n \t* libstdc++-v3/config/cpu/m68k/atomicity.h (__exchange_and_add):\n \tReplace variants with new BSET-based version.\n-\t\n+\n 2003-08-07  Carlo Wood  <carlo@alinoe.com>\n \n \t* include/bits/demangle.h: Do not use cctype functions that depend\n \ton locale.\n-\t\n+\n 2003-08-05  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* configure.in:  Rename...\n@@ -201,11 +206,11 @@\n \t* testsuite/23_containers/multiset/1.cc: New.\n \t* testsuite/23_containers/set/1.cc: New.\n \t* testsuite/23_containers/vector/1.cc: New.\n-\t\n+\n 2003-07-31  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tReshuffle 23_containers testsuite.\n-\t* 23_containers/adaptors.cc, bitset_ctor.cc,bitset_members.cc, \n+\t* 23_containers/adaptors.cc, bitset_ctor.cc,bitset_members.cc,\n \tbitset_shift.cc, deque_ctor.cc, deque_operators.cc,\n \tlist_capacity.cc, list_ctor.cc, list_modifiers.cc, list_operators.cc,\n \tmap_insert.cc, map_operators.cc, map_operators_neg.cc, multiset.cc,\n@@ -261,7 +266,7 @@\n \t* 23_containers/vector/modifiers/1.cc: New.\n \t* 23_containers/vector/modifiers/2.cc: New.\n \t* 23_containers/vector/resize/1.cc: New.\n-\t\n+\n 2003-07-31  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* testsuite/thread/pthread1.cc: Add alpha*-*-osf* to dg-do run,\n@@ -319,20 +324,20 @@\n \t* include/c/std_cwctype.h: Same.\n \t* include/c_std/cmath.tcc: Same.\n \t* include/c_std/std_cmath.h: Same.\n-\t\n+\n 2003-07-30  Gawain Bolton  <gp.bolton@computer.org>\n \n-\tPR libstdc++/11504.  \n+\tPR libstdc++/11504.\n \t* include/bits/stl_tree.h: Replace C-style casts with C++-style\n \tcasts.  Changes to avoid casting away constness.  Eliminate\n \t_Rb_tree_base_iterator class.  Change _Rb_tree_iterator to use\n \tinitialization lists.  Move out implementation of __black_count()\n \tto...\n-        * src/stl_tree.cc: ...here and rename _Rb_tree_black_count().\n-        Rename_Rb_tree_base_iterator::_M_increment() to\n-        _Rb_tree_increment and _Rb_tree_base_iterator::_M_decrement() to\n-        _Rb_tree_decrement.\n-        * config/linker-map.gnu: Add and change symbols here.\n+\t* src/stl_tree.cc: ...here and rename _Rb_tree_black_count().\n+\tRename_Rb_tree_base_iterator::_M_increment() to\n+\t_Rb_tree_increment and _Rb_tree_base_iterator::_M_decrement() to\n+\t_Rb_tree_decrement.\n+\t* config/linker-map.gnu: Add and change symbols here.\n \n 2003-07-30  Jonathan Wakely  <redi@gcc.gnu.org>\n \n@@ -346,7 +351,7 @@\n \tChange DEBUG_ASSERT to _GLIBCXX_ASSERT.\n \t* testsuite/libstdc++-v3.dg/dg.exp: Same.\n \t* testsuite/lib/libstdc++-v3-dg.exp (libstdc++-v3-init): Same.\n-\t* testsuite/23_containers/bitset_ctor.cc: \n+\t* testsuite/23_containers/bitset_ctor.cc:\n \t* testsuite/17_intro/header_ciso646.cc: Remove DEBUG_ASSERT.\n \t* testsuite/18_support/numeric_limits.cc: Same.\n \t* testsuite/21_strings/basic_string/append/char/1.cc: Same.\n@@ -369,16 +374,16 @@\n \t* testsuite/21_strings/basic_string/insert/char/2.cc: Same.\n \t* testsuite/21_strings/basic_string/insert/wchar_t/1.cc: Same.\n \t* testsuite/21_strings/basic_string/insert/wchar_t/2.cc: Same.\n-\t* testsuite/21_strings/basic_string/inserters_extractors/char/1.cc: \n-\t* testsuite/21_strings/basic_string/inserters_extractors/char/4.cc: \n-\t* testsuite/21_strings/basic_string/inserters_extractors/char/5.cc: \n-\t* testsuite/21_strings/basic_string/inserters_extractors/char/6.cc: \n-\t* testsuite/21_strings/basic_string/inserters_extractors/char/7.cc: \n-\t* testsuite/21_strings/basic_string/inserters_extractors/wchar_t/1.cc: \n-\t* testsuite/21_strings/basic_string/inserters_extractors/wchar_t/4.cc: \n-\t* testsuite/21_strings/basic_string/inserters_extractors/wchar_t/5.cc: \n-\t* testsuite/21_strings/basic_string/inserters_extractors/wchar_t/6.cc: \n-\t* testsuite/21_strings/basic_string/inserters_extractors/wchar_t/7.cc: \n+\t* testsuite/21_strings/basic_string/inserters_extractors/char/1.cc:\n+\t* testsuite/21_strings/basic_string/inserters_extractors/char/4.cc:\n+\t* testsuite/21_strings/basic_string/inserters_extractors/char/5.cc:\n+\t* testsuite/21_strings/basic_string/inserters_extractors/char/6.cc:\n+\t* testsuite/21_strings/basic_string/inserters_extractors/char/7.cc:\n+\t* testsuite/21_strings/basic_string/inserters_extractors/wchar_t/1.cc:\n+\t* testsuite/21_strings/basic_string/inserters_extractors/wchar_t/4.cc:\n+\t* testsuite/21_strings/basic_string/inserters_extractors/wchar_t/5.cc:\n+\t* testsuite/21_strings/basic_string/inserters_extractors/wchar_t/6.cc:\n+\t* testsuite/21_strings/basic_string/inserters_extractors/wchar_t/7.cc:\n \t* testsuite/21_strings/basic_string/operators/char/1.cc: Same.\n \t* testsuite/21_strings/basic_string/operators/char/2.cc: Same.\n \t* testsuite/21_strings/basic_string/operators/wchar_t/1.cc: Same.\n@@ -411,9 +416,9 @@\n \t* testsuite/27_io/basic_istream/extractors_arithmetic/char/09.cc: Same.\n \t* testsuite/27_io/basic_istream/extractors_arithmetic/char/10.cc: Same.\n \t* testsuite/27_io/basic_ostream/inserters_arithmetic/char/1.cc: Same.\n-\t* testsuite/27_io/basic_ostream/inserters_arithmetic/wchar_t/1.cc: \n-        Same.\n-\t\n+\t* testsuite/27_io/basic_ostream/inserters_arithmetic/wchar_t/1.cc:\n+\tSame.\n+\n 2003-07-28  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* docs/doxygen/user.cfg.in, docs/html/abi.txt, docs/html/debug.html,\n@@ -456,8 +461,8 @@\n \n 2003-07-24  Nathan Myers  <ncm-nospam@cantrip.org>\n \n-        * testsuite/23_containers/map_operators.cc: Conform to \n-        container requirement as value must be Assignable.\n+\t* testsuite/23_containers/map_operators.cc: Conform to\n+\tcontainer requirement as value must be Assignable.\n \n 2003-07-23  Alexandre Oliva  <aoliva@redhat.com>\n \n@@ -538,9 +543,9 @@\n 2003-07-21  Doug Gregor  <dgregor@apple.com>\n \n \t* include/bits/boost_concept_check.h:\n-\t(_EqualityComparableConcept::__constraints): Remove != from the \n-        list of constraints; it is not listed in Table 28 of the C++98 \n-        standard.\n+\t(_EqualityComparableConcept::__constraints): Remove != from the\n+\tlist of constraints; it is not listed in Table 28 of the C++98\n+\tstandard.\n \n 2003-07-18  Andreas Jaeger  <aj@suse.de>\n \n@@ -550,7 +555,7 @@\n \t* config/abi/x86_64-linux-gnu/baseline_symbols.txt: Regenerated.\n \n 2003-07-17  Benjamin Kosnik  <bkoz@redhat.com>\n-\t\n+\n \t* config/linker-map.gnu: Add __moneypunct_cache, __timepunct_cache.\n \t* config/locale/generic/messages_members.h: Tweaks.\n \t* config/locale/generic/monetary_members.cc\n@@ -590,7 +595,7 @@\n \n \t* include/bits/locale_facets.h (__num_base::_S_atoms_in): Add -+xX.\n \t(num_get::_M_convert_int): To _M_insert_int.\n-\t(num_get::_M_convert_float): To _M_insert_float.\t\n+\t(num_get::_M_convert_float): To _M_insert_float.\n \t* include/bits/locale_facets.tcc (num_get::_M_extract_float):\n \tUse caches for ctype, num_get.\n \t(num_get::_M_extract_int): Same.\n@@ -633,18 +638,18 @@\n 2003-07-15  Jerry Quinn  <jlquinn@optonline.net>\n \n \t* include/bits/stl_algo.h (includes, set_union, set_intersection,\n-        set_difference, set_symmetric_difference, max_element, min_element,\n-        next_permutation, prev_permutation, find_first_of, find_end):\n-        Document.\n+\tset_difference, set_symmetric_difference, max_element, min_element,\n+\tnext_permutation, prev_permutation, find_first_of, find_end):\n+\tDocument.\n \t* include/bits/stl_algobase.h (copy,copy_backward):  Clarify overlap\n-        restrictions in docs.\n+\trestrictions in docs.\n \t* include/bits/stl_heap.h (push_heap, pop_heap, make_heap, sort_heap):\n-        Document.\n+\tDocument.\n \t* docs/doxygen/doxygroups.cc (setoperations):  New group.\n \n 2003-07-15  Jerry Quinn  <jlquinn@optonline.net>\n \n-        * include/bits/basic_string.h:  Document public functions.\n+\t* include/bits/basic_string.h:  Document public functions.\n \t* docs/doxygen/TODO:  Update c21 todo.\n \n 2003-07-15  Jerry Quinn  <jlquinn@optonline.net>\n@@ -674,7 +679,7 @@\n \tPR libstdc++/11378\n \t* include/std/std_fstream.h (xsputn): Declare only.\n \t* include/bits/fstream.tcc (xsputn): Define, optimize for the\n-\talways_noconv() case: when __n is sufficiently large flush \n+\talways_noconv() case: when __n is sufficiently large flush\n \tthe buffer and issue a direct write, if possible combining the\n \ttwo with writev in __basic_file<>::xsputn_2.\n \t* config/io/basic_file_stdio.h (__basic_file<>::xsputn_2):\n@@ -696,7 +701,7 @@\n \n \t* testsuite/27_io/ios_base/cons/assign_neg.cc: Fix line numbers.\n \t* testsuite/27_io/ios_base/cons/copy_neg.cc: Same.\n-\t\n+\n 2003-07-14  Gabriel Dos Reis  <gcc@integrable-solutions.net>\n \n \t* config/locale/gnu/c_locale.h (__convert_from_v): Include\n@@ -744,7 +749,7 @@\n 2003-07-09  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/locale_facets.tcc: Use function object for\n-\t__use_cache instead of template function. Partially specialize for \n+\t__use_cache instead of template function. Partially specialize for\n \t__numpunct<_CharT>.\n \t* include/bits/locale_classes.h: Update friend declaration for\n \t__use_cache.\n@@ -761,7 +766,7 @@\n \t* testsuite/22_locale/numpunct/members/wchar_t/cache_2.cc: New.\n \t* testsuite/22_locale/numpunct/members/pod/1.cc: New.\n \t* testsuite/22_locale/numpunct/members/pod/2.cc: New.\n-\t\n+\n 2003-07-09  Jerry Quinn  <jlquinn@optonline.net>\n \n \t* src/ios.cc (_M_grow_words):  Fix spelling.\n@@ -782,7 +787,7 @@\n \t* include/Makefile.am (ext_headers): Add pod_char_traits.h.\n \t* include/Makefile.in: Regenerate.\n \t* docs/html/21_strings/howto.html: Update.\n-\t\t\n+\n 2003-07-08  Gawain Bolton  <gp.bolton@computer.org>\n \n \t* testsuite/performance/list_create_fill_sort.cc: New.\n@@ -792,11 +797,11 @@\n \t* config/locale/generic/numeric_members.cc: Correct type info.\n \t* config/locale/gnu/numeric_members.cc: Same.\n \t* include/bits/locale_facets.h: Same.\n-\t\n+\n \t* include/bits/char_traits.h: Correct spacing.\n \n \t* src/locale.cc: Wrap to 80 col.\n-\t\n+\n 2003-07-07  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* include/std/std_complex.h: Partially revert last\n@@ -881,7 +886,7 @@\n 2003-07-05  Gawain Bolton  <gp.bolton@computer.org>\n \n \t* include/bits/stl_tree.h: _Rb_tree_rebalance():  Add local\n-          variable for grandparent and use const\n+\t  variable for grandparent and use const\n \n 2003-07-05  David Billinghurst <David.Billinghurst@riotinto.com>\n \n@@ -912,15 +917,15 @@\n \t* testsuite/Makefile.am: Same.\n \t* testsuite/Makefile.in: Regenerate.\n \t* po/Makefile.am: Same.\n-\t* po/Makefile.in: Regenerate.\t\n+\t* po/Makefile.in: Regenerate.\n \t* libsupc++/Makefile.am: Same.\n-\t* libsupc++/Makefile.in: Regenerate.\t\n+\t* libsupc++/Makefile.in: Regenerate.\n \t* libmath/Makefile.am: Same.\n-\t* libmath/Makefile.in: Regenerate.\t\n+\t* libmath/Makefile.in: Regenerate.\n \t* include/Makefile.am: Same.\n-\t* include/Makefile.in: Regenerate.\t\n+\t* include/Makefile.in: Regenerate.\n \t* src/Makefile.am: Same.\n-\t* src/Makefile.in: Regenerate.\t\n+\t* src/Makefile.in: Regenerate.\n \t* acconfig.h: Same.\n \t* configure.host: Same.\n \t* configure.in: Same.\n@@ -932,7 +937,7 @@\n \t* include: Same, standardize include guards.\n \t* config: Same.\n \t* libsupc++: Same.\n-\t\n+\n 2003-07-04  Zack Weinberg  <zack@codesourcery.com>\n \n \t* testsuite/22_locale/collate/compare/wchar_t/2.cc"}, {"sha": "b83516dd260513831ebe2562164c0a97885af77b", "filename": "libstdc++-v3/config/os/hpux/os_defines.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2055ec11ece615f17218f61ae8fd0b594bfba6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2055ec11ece615f17218f61ae8fd0b594bfba6/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fos_defines.h?ref=7e2055ec11ece615f17218f61ae8fd0b594bfba6", "patch": "@@ -97,8 +97,9 @@ typedef long int __padding_type;\n #define _GLIBCXX_INST_ATOMICITY_LOCK 1\n #endif\n \n-/* Don't use pragma weak in gthread headers.  */\n-#ifdef __hppa__\n+/* Don't use pragma weak in gthread headers.  HP-UX rejects programs\n+   with unsatisfied external references even if all of those references\n+   are weak; gthread relies on such unsatisfied references being resolved\n+   to null pointers when weak symbol support is on.  */\n #define _GLIBCXX_GTHREAD_USE_WEAK 0\n #endif\n-#endif"}]}