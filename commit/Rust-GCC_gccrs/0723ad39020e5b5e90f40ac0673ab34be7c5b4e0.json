{"sha": "0723ad39020e5b5e90f40ac0673ab34be7c5b4e0", "node_id": "C_kwDOANBUbNoAKDA3MjNhZDM5MDIwZTViNWU5MGY0MGFjMDY3M2FiMzRiZTdjNWI0ZTA", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-17T10:21:54Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-19T17:44:14Z"}, "message": "libstdc++: Add always_inline to trivial range access functions\n\nThis makes all the [iterator.range] functions always-inline, except the\nones that construct a std::reverse_iterator, as they do a little more\nwork. They could probably be made always_inline too though, and maybe\nthe std::reverse_iterator constructor too.\n\nThis means that even for -O0 these functions have no runtime overhead\ncompared with calling a member of the container, or performing pointer\narithmetic for arrays.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/range_access.h: Add always_inline attribute to\n\ttrivial functions.", "tree": {"sha": "1d302c1270ad62ae64f4be35af7e5439002efd30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d302c1270ad62ae64f4be35af7e5439002efd30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0723ad39020e5b5e90f40ac0673ab34be7c5b4e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0723ad39020e5b5e90f40ac0673ab34be7c5b4e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0723ad39020e5b5e90f40ac0673ab34be7c5b4e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0723ad39020e5b5e90f40ac0673ab34be7c5b4e0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c021f17e7d09a0eae2d6fb875c9a5484bd4e043", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c021f17e7d09a0eae2d6fb875c9a5484bd4e043", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c021f17e7d09a0eae2d6fb875c9a5484bd4e043"}], "stats": {"total": 53, "additions": 28, "deletions": 25}, "files": [{"sha": "241f5417eec51952fd5d8b6a8b7ae86ba49a69f3", "filename": "libstdc++-v3/include/bits/range_access.h", "status": "modified", "additions": 28, "deletions": 25, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0723ad39020e5b5e90f40ac0673ab34be7c5b4e0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0723ad39020e5b5e90f40ac0673ab34be7c5b4e0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h?ref=0723ad39020e5b5e90f40ac0673ab34be7c5b4e0", "patch": "@@ -47,7 +47,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n-    [[__nodiscard__]]\n+    [[__nodiscard__, __gnu__::__always_inline__]]\n     inline _GLIBCXX17_CONSTEXPR auto\n     begin(_Container& __cont) -> decltype(__cont.begin())\n     { return __cont.begin(); }\n@@ -58,7 +58,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n-    [[__nodiscard__]]\n+    [[__nodiscard__, __gnu__::__always_inline__]]\n     inline _GLIBCXX17_CONSTEXPR auto\n     begin(const _Container& __cont) -> decltype(__cont.begin())\n     { return __cont.begin(); }\n@@ -69,7 +69,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n-    [[__nodiscard__]]\n+    [[__nodiscard__, __gnu__::__always_inline__]]\n     inline _GLIBCXX17_CONSTEXPR auto\n     end(_Container& __cont) -> decltype(__cont.end())\n     { return __cont.end(); }\n@@ -80,7 +80,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n-    [[__nodiscard__]]\n+    [[__nodiscard__, __gnu__::__always_inline__]]\n     inline _GLIBCXX17_CONSTEXPR auto\n     end(const _Container& __cont) -> decltype(__cont.end())\n     { return __cont.end(); }\n@@ -90,7 +90,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __arr  Array.\n    */\n   template<typename _Tp, size_t _Nm>\n-    [[__nodiscard__]]\n+    [[__nodiscard__, __gnu__::__always_inline__]]\n     inline _GLIBCXX14_CONSTEXPR _Tp*\n     begin(_Tp (&__arr)[_Nm]) noexcept\n     { return __arr; }\n@@ -101,7 +101,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __arr  Array.\n    */\n   template<typename _Tp, size_t _Nm>\n-    [[__nodiscard__]]\n+    [[__nodiscard__, __gnu__::__always_inline__]]\n     inline _GLIBCXX14_CONSTEXPR _Tp*\n     end(_Tp (&__arr)[_Nm]) noexcept\n     { return __arr + _Nm; }\n@@ -121,7 +121,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n-    [[__nodiscard__]]\n+    [[__nodiscard__, __gnu__::__always_inline__]]\n     constexpr auto\n     cbegin(const _Container& __cont) noexcept(noexcept(std::begin(__cont)))\n       -> decltype(std::begin(__cont))\n@@ -133,7 +133,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n-    [[__nodiscard__]]\n+    [[__nodiscard__, __gnu__::__always_inline__]]\n     constexpr auto\n     cend(const _Container& __cont) noexcept(noexcept(std::end(__cont)))\n       -> decltype(std::end(__cont))\n@@ -145,7 +145,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n-    [[__nodiscard__]]\n+    [[__nodiscard__, __gnu__::__always_inline__]]\n     inline _GLIBCXX17_CONSTEXPR auto\n     rbegin(_Container& __cont) -> decltype(__cont.rbegin())\n     { return __cont.rbegin(); }\n@@ -156,7 +156,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n-    [[__nodiscard__]]\n+    [[__nodiscard__, __gnu__::__always_inline__]]\n     inline _GLIBCXX17_CONSTEXPR auto\n     rbegin(const _Container& __cont) -> decltype(__cont.rbegin())\n     { return __cont.rbegin(); }\n@@ -167,7 +167,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n-    [[__nodiscard__]]\n+    [[__nodiscard__, __gnu__::__always_inline__]]\n     inline _GLIBCXX17_CONSTEXPR auto\n     rend(_Container& __cont) -> decltype(__cont.rend())\n     { return __cont.rend(); }\n@@ -178,7 +178,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n-    [[__nodiscard__]]\n+    [[__nodiscard__, __gnu__::__always_inline__]]\n     inline _GLIBCXX17_CONSTEXPR auto\n     rend(const _Container& __cont) -> decltype(__cont.rend())\n     { return __cont.rend(); }\n@@ -233,7 +233,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n-    [[__nodiscard__]]\n+    [[__nodiscard__, __gnu__::__always_inline__]]\n     inline _GLIBCXX17_CONSTEXPR auto\n     crbegin(const _Container& __cont) -> decltype(std::rbegin(__cont))\n     { return std::rbegin(__cont); }\n@@ -244,7 +244,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n-    [[__nodiscard__]]\n+    [[__nodiscard__, __gnu__::__always_inline__]]\n     inline _GLIBCXX17_CONSTEXPR auto\n     crend(const _Container& __cont) -> decltype(std::rend(__cont))\n     { return std::rend(__cont); }\n@@ -259,7 +259,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template <typename _Container>\n-    [[nodiscard]]\n+    [[nodiscard, __gnu__::__always_inline__]]\n     constexpr auto\n     size(const _Container& __cont) noexcept(noexcept(__cont.size()))\n     -> decltype(__cont.size())\n@@ -269,7 +269,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @brief  Return the size of an array.\n    */\n   template <typename _Tp, size_t _Nm>\n-    [[nodiscard]]\n+    [[nodiscard, __gnu__::__always_inline__]]\n     constexpr size_t\n     size(const _Tp (&)[_Nm]) noexcept\n     { return _Nm; }\n@@ -279,7 +279,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template <typename _Container>\n-    [[nodiscard]] constexpr auto\n+    [[nodiscard, __gnu__::__always_inline__]]\n+    constexpr auto\n     empty(const _Container& __cont) noexcept(noexcept(__cont.empty()))\n     -> decltype(__cont.empty())\n     { return __cont.empty(); }\n@@ -288,7 +289,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @brief  Return whether an array is empty (always false).\n    */\n   template <typename _Tp, size_t _Nm>\n-    [[nodiscard]] constexpr bool\n+    [[nodiscard, __gnu__::__always_inline__]]\n+    constexpr bool\n     empty(const _Tp (&)[_Nm]) noexcept\n     { return false; }\n \n@@ -297,7 +299,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __il  Initializer list.\n    */\n   template <typename _Tp>\n-    [[nodiscard]] constexpr bool\n+    [[nodiscard, __gnu__::__always_inline__]]\n+    constexpr bool\n     empty(initializer_list<_Tp> __il) noexcept\n     { return __il.size() == 0;}\n \n@@ -306,7 +309,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template <typename _Container>\n-    [[nodiscard]]\n+    [[nodiscard, __gnu__::__always_inline__]]\n     constexpr auto\n     data(_Container& __cont) noexcept(noexcept(__cont.data()))\n     -> decltype(__cont.data())\n@@ -317,7 +320,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template <typename _Container>\n-    [[nodiscard]]\n+    [[nodiscard, __gnu__::__always_inline__]]\n     constexpr auto\n     data(const _Container& __cont) noexcept(noexcept(__cont.data()))\n     -> decltype(__cont.data())\n@@ -328,7 +331,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __array  Array.\n    */\n   template <typename _Tp, size_t _Nm>\n-    [[nodiscard]]\n+    [[nodiscard, __gnu__::__always_inline__]]\n     constexpr _Tp*\n     data(_Tp (&__array)[_Nm]) noexcept\n     { return __array; }\n@@ -338,15 +341,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __il  Initializer list.\n    */\n   template <typename _Tp>\n-    [[nodiscard]]\n+    [[nodiscard, __gnu__::__always_inline__]]\n     constexpr const _Tp*\n     data(initializer_list<_Tp> __il) noexcept\n     { return __il.begin(); }\n \n #if __cplusplus > 201703L\n #define __cpp_lib_ssize 201902L\n   template<typename _Container>\n-    [[nodiscard]]\n+    [[nodiscard, __gnu__::__always_inline__]]\n     constexpr auto\n     ssize(const _Container& __cont)\n     noexcept(noexcept(__cont.size()))\n@@ -357,7 +360,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Tp, ptrdiff_t _Num>\n-    [[nodiscard]]\n+    [[nodiscard, __gnu__::__always_inline__]]\n     constexpr ptrdiff_t\n     ssize(const _Tp (&)[_Num]) noexcept\n     { return _Num; }"}]}