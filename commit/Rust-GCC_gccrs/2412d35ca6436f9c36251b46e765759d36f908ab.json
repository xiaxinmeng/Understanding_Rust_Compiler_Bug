{"sha": "2412d35ca6436f9c36251b46e765759d36f908ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQxMmQzNWNhNjQzNmY5YzM2MjUxYjQ2ZTc2NTc1OWQzNmY5MDhhYg==", "commit": {"author": {"name": "Sebastian Pop", "email": "pop@cri.ensmp.fr", "date": "2005-04-21T08:48:55Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2005-04-21T08:48:55Z"}, "message": "Makefile.in (tree-chrec.o): Depend on params.h.\n\n\tPR/20742\n\t* Makefile.in (tree-chrec.o): Depend on params.h.\n\t* params.def (PARAM_SCEV_MAX_EXPR_SIZE): New parameter with\n\tdefault value 20.\n\t* tree-chrec.c: Depend on params.h.  Replace build with buildN,\n\tand fold build with fold_buildN.\n\t(chrec_fold_plus_1): Fail with a chrec_don_know when the size of\n\tthe expression exceeds PARAM_SCEV_MAX_EXPR_SIZE.\n\t(tree_contains_chrecs): Compute an estimation of the size of the\n\tgiven expression.\n\t* tree-chrec.h (tree_contains_chrecs): Modify its declaration.\n\t(tree_does_not_contain_chrecs): Update the use of tree_contains_chrecs.\n\t* tree-scalar-evolution.c (simple_iv): Ditto.\n\t* doc/invoke.texi (scev-max-expr-size): Documented.\n\nFrom-SVN: r98497", "tree": {"sha": "f3f2b4031060687272842eac011220d90325c975", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3f2b4031060687272842eac011220d90325c975"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2412d35ca6436f9c36251b46e765759d36f908ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2412d35ca6436f9c36251b46e765759d36f908ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2412d35ca6436f9c36251b46e765759d36f908ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2412d35ca6436f9c36251b46e765759d36f908ab/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6db622515f2ab2ae19b15efddf5a9067e35a78e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6db622515f2ab2ae19b15efddf5a9067e35a78e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6db622515f2ab2ae19b15efddf5a9067e35a78e"}], "stats": {"total": 78, "additions": 58, "deletions": 20}, "files": [{"sha": "9a640af23018f037d860a2df98e780c10cc11d6b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2412d35ca6436f9c36251b46e765759d36f908ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2412d35ca6436f9c36251b46e765759d36f908ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2412d35ca6436f9c36251b46e765759d36f908ab", "patch": "@@ -1,3 +1,20 @@\n+2005-04-21  Sebastian Pop  <pop@cri.ensmp.fr>\n+\n+\tPR/20742\n+\t* Makefile.in (tree-chrec.o): Depend on params.h.\n+\t* params.def (PARAM_SCEV_MAX_EXPR_SIZE): New parameter with\n+\tdefault value 20.\n+\t* tree-chrec.c: Depend on params.h.  Replace build with buildN,\n+\tand fold build with fold_buildN.\n+\t(chrec_fold_plus_1): Fail with a chrec_don_know when the size of\n+\tthe expression exceeds PARAM_SCEV_MAX_EXPR_SIZE.\n+\t(tree_contains_chrecs): Compute an estimation of the size of the\n+\tgiven expression.\n+\t* tree-chrec.h (tree_contains_chrecs): Modify its declaration.\n+\t(tree_does_not_contain_chrecs): Update the use of tree_contains_chrecs.\n+\t* tree-scalar-evolution.c (simple_iv): Ditto.\n+\t* doc/invoke.texi (scev-max-expr-size): Documented.\n+\n 2005-04-21  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config.gcc (*-*-darwin*): Add darwin.opt to $extra_options."}, {"sha": "d55603b2e91fd247f67a62c8aab5c149c714343f", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2412d35ca6436f9c36251b46e765759d36f908ab/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2412d35ca6436f9c36251b46e765759d36f908ab/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=2412d35ca6436f9c36251b46e765759d36f908ab", "patch": "@@ -1795,7 +1795,7 @@ tree-browser.o : tree-browser.c tree-browser.def $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) errors.h tree-inline.h diagnostic.h $(HASHTAB_H) \\\n    $(TM_H) coretypes.h\n tree-chrec.o: tree-chrec.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   errors.h $(GGC_H) $(TREE_H) tree-chrec.h tree-pass.h\n+   errors.h $(GGC_H) $(TREE_H) tree-chrec.h tree-pass.h $(PARAMS_H)\n tree-scalar-evolution.o: tree-scalar-evolution.c $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TM_H) errors.h $(GGC_H) $(TREE_H) $(RTL_H) \\\n    $(BASIC_BLOCK_H) diagnostic.h $(TREE_FLOW_H) $(TREE_DUMP_H) \\"}, {"sha": "1b686309aed312b63c64736468729eaac0bb37ea", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2412d35ca6436f9c36251b46e765759d36f908ab/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2412d35ca6436f9c36251b46e765759d36f908ab/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2412d35ca6436f9c36251b46e765759d36f908ab", "patch": "@@ -5680,6 +5680,10 @@ If number of candidates in the set is smaller than this value,\n we always try to remove unnecessary ivs from the set during its\n optimization when a new iv is added to the set.\n \n+@item scev-max-expr-size\n+Bound on size of expressions used in the scalar evolutions analyzer.\n+Large expressions slow the analyzer.\n+\n @item max-iterations-to-track\n \n The maximum number of iterations of a loop the brute force algorithm"}, {"sha": "f2b25c0d450be18d447b90dcf46bdd5446320a91", "filename": "gcc/params.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2412d35ca6436f9c36251b46e765759d36f908ab/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2412d35ca6436f9c36251b46e765759d36f908ab/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=2412d35ca6436f9c36251b46e765759d36f908ab", "patch": "@@ -372,6 +372,11 @@ DEFPARAM(PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND,\n \t \"If number of candidates in the set is smaller, we always try to remove unused ivs during its optimization\",\n \t 10, 0, 0)\n \n+DEFPARAM(PARAM_SCEV_MAX_EXPR_SIZE,\n+ \t \"scev-max-expr-size\",\n+\t \"Bound on size of expressions used in the scalar evolutions analyzer\",\n+\t 20, 0, 0)\n+\n /* The product of the next two is used to decide whether or not to\n    use .GLOBAL_VAR.  See tree-dfa.c.  */\n DEFPARAM(PARAM_GLOBAL_VAR_THRESHOLD,"}, {"sha": "967a3cd8158d6653e443d138b3796b1c2102456e", "filename": "gcc/tree-chrec.c", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2412d35ca6436f9c36251b46e765759d36f908ab/gcc%2Ftree-chrec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2412d35ca6436f9c36251b46e765759d36f908ab/gcc%2Ftree-chrec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.c?ref=2412d35ca6436f9c36251b46e765759d36f908ab", "patch": "@@ -35,6 +35,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"varray.h\"\n #include \"tree-chrec.h\"\n #include \"tree-pass.h\"\n+#include \"params.h\"\n \n \f\n \n@@ -286,11 +287,17 @@ chrec_fold_plus_1 (enum tree_code code,\n \t\t\t\t    build_int_cst_type (type, -1)));\n \n \tdefault:\n-\t  if (tree_contains_chrecs (op0)\n-\t      || tree_contains_chrecs (op1))\n-\t    return build (code, type, op0, op1);\n-\t  else\n-\t    return fold (build (code, type, op0, op1));\n+\t  {\n+\t    int size = 0;\n+\t    if ((tree_contains_chrecs (op0, &size)\n+\t\t || tree_contains_chrecs (op1, &size))\n+\t\t&& size < PARAM_VALUE (PARAM_SCEV_MAX_EXPR_SIZE))\n+\t      return build2 (code, type, op0, op1);\n+\t    else if (size < PARAM_VALUE (PARAM_SCEV_MAX_EXPR_SIZE))\n+\t      return fold_build2 (code, type, op0, op1);\n+\t    else\n+\t      return chrec_dont_know;\n+\t  }\n \t}\n     }\n }\n@@ -374,7 +381,7 @@ chrec_fold_multiply (tree type,\n \t    return op0;\n \t  if (integer_zerop (op1))\n \t    return build_int_cst_type (type, 0);\n-\t  return fold (build (MULT_EXPR, type, op0, op1));\n+\t  return fold_build2 (MULT_EXPR, type, op0, op1);\n \t}\n     }\n }\n@@ -478,16 +485,16 @@ chrec_evaluate (unsigned var, tree chrec, tree n, unsigned int k)\n       binomial_n_k = tree_fold_binomial (type, n, k);\n       if (!binomial_n_k)\n \treturn chrec_dont_know;\n-      arg1 = fold (build2 (MULT_EXPR, type,\n-\t\t\t   CHREC_LEFT (chrec), binomial_n_k));\n+      arg1 = fold_build2 (MULT_EXPR, type,\n+\t\t\t  CHREC_LEFT (chrec), binomial_n_k);\n       return chrec_fold_plus (type, arg0, arg1);\n     }\n \n   binomial_n_k = tree_fold_binomial (type, n, k);\n   if (!binomial_n_k)\n     return chrec_dont_know;\n   \n-  return fold (build2 (MULT_EXPR, type, chrec, binomial_n_k));\n+  return fold_build2 (MULT_EXPR, type, chrec, binomial_n_k);\n }\n \n /* Evaluates \"CHREC (X)\" when the varying variable is VAR.  \n@@ -717,7 +724,7 @@ reset_evolution_in_loop (unsigned loop_num,\n {\n   if (TREE_CODE (chrec) == POLYNOMIAL_CHREC\n       && CHREC_VARIABLE (chrec) > loop_num)\n-    return build \n+    return build2 \n       (TREE_CODE (chrec), \n        build_int_cst (NULL_TREE, CHREC_VARIABLE (chrec)), \n        reset_evolution_in_loop (loop_num, CHREC_LEFT (chrec), new_evol), \n@@ -862,29 +869,34 @@ chrec_contains_undetermined (tree chrec)\n     }\n }\n \n-/* Determines whether the tree EXPR contains chrecs.  */\n+/* Determines whether the tree EXPR contains chrecs, and increment\n+   SIZE if it is not a NULL pointer by an estimation of the depth of\n+   the tree.  */\n \n bool\n-tree_contains_chrecs (tree expr)\n+tree_contains_chrecs (tree expr, int *size)\n {\n   if (expr == NULL_TREE)\n     return false;\n+\n+  if (size)\n+    (*size)++;\n   \n   if (tree_is_chrec (expr))\n     return true;\n-  \n+\n   switch (TREE_CODE_LENGTH (TREE_CODE (expr)))\n     {\n     case 3:\n-      if (tree_contains_chrecs (TREE_OPERAND (expr, 2)))\n+      if (tree_contains_chrecs (TREE_OPERAND (expr, 2), size))\n \treturn true;\n       \n     case 2:\n-      if (tree_contains_chrecs (TREE_OPERAND (expr, 1)))\n+      if (tree_contains_chrecs (TREE_OPERAND (expr, 1), size))\n \treturn true;\n       \n     case 1:\n-      if (tree_contains_chrecs (TREE_OPERAND (expr, 0)))\n+      if (tree_contains_chrecs (TREE_OPERAND (expr, 0), size))\n \treturn true;\n       \n     default:"}, {"sha": "8f8c065470d87c9991a0a16be6ff025b62b1a0d0", "filename": "gcc/tree-chrec.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2412d35ca6436f9c36251b46e765759d36f908ab/gcc%2Ftree-chrec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2412d35ca6436f9c36251b46e765759d36f908ab/gcc%2Ftree-chrec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.h?ref=2412d35ca6436f9c36251b46e765759d36f908ab", "patch": "@@ -87,7 +87,7 @@ extern bool chrec_is_positive (tree, bool *);\n extern bool chrec_contains_symbols (tree);\n extern bool chrec_contains_symbols_defined_in_loop (tree, unsigned);\n extern bool chrec_contains_undetermined (tree);\n-extern bool tree_contains_chrecs (tree);\n+extern bool tree_contains_chrecs (tree, int *);\n extern bool evolution_function_is_affine_multivariate_p (tree);\n extern bool evolution_function_is_univariate_p (tree);\n extern unsigned nb_vars_in_chrec (tree);\n@@ -183,7 +183,7 @@ evolution_function_is_affine_or_constant_p (tree chrec)\n static inline bool\n tree_does_not_contain_chrecs (tree expr)\n {\n-  return !tree_contains_chrecs (expr);\n+  return !tree_contains_chrecs (expr, NULL);\n }\n \n /* Determines whether CHREC is a loop invariant with respect to LOOP_NUM.  "}, {"sha": "ca808934efaf8532fb8839fdac98f14ab487c45b", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2412d35ca6436f9c36251b46e765759d36f908ab/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2412d35ca6436f9c36251b46e765759d36f908ab/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=2412d35ca6436f9c36251b46e765759d36f908ab", "patch": "@@ -2582,7 +2582,7 @@ simple_iv (struct loop *loop, tree stmt, tree op, tree *base, tree *step)\n   if (TREE_CODE (*step) != INTEGER_CST)\n     return false;\n   *base = CHREC_LEFT (ev);\n-  if (tree_contains_chrecs (*base)\n+  if (tree_contains_chrecs (*base, NULL)\n       || chrec_contains_symbols_defined_in_loop (*base, loop->num))\n     return false;\n "}]}