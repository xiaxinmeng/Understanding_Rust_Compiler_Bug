{"sha": "9adcfa3c1f4f3194b50c893f06bb52f1058aebe8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFkY2ZhM2MxZjRmMzE5NGI1MGM4OTNmMDZiYjUyZjEwNThhZWJlOA==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@arm.com", "date": "2013-05-15T11:49:06Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2013-05-15T11:49:06Z"}, "message": "Fix PR target/19599 - tailcall function pointers.\n\n2013-05-15  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\n\tPR target/19599\n\t* config/arm/predicates.md (call_insn_operand): New predicate.\n\t* config/arm/constraints.md (\"Cs\", \"Ss\"):  New constraints.\n\t* config/arm/arm.md (*call_insn, *call_value_insn): Match only\n\tif insn is not a tail call.\n\t(*sibcall_insn, *sibcall_value_insn): Adjust for tailcalling through\n\tregisters.\n\t* config/arm/arm.h (enum reg_class): New caller save register class.\n\t(REG_CLASS_NAMES): Likewise.\n\t(REG_CLASS_CONTENTS): Likewise.\n\t* config/arm/arm.c (arm_function_ok_for_sibcall): Allow tailcalling\n\twithout decls.\n\n2013-05-15  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\n\tPR target/19599\n\t* gcc.target/arm/pr40887.c: Adjust testcase.\n\t* gcc.target/arm/pr19599.c: New test.\n\nFrom-SVN: r198928", "tree": {"sha": "4c80c0aab83b8d5939ca0d746181b00b92cfeca2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c80c0aab83b8d5939ca0d746181b00b92cfeca2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9adcfa3c1f4f3194b50c893f06bb52f1058aebe8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9adcfa3c1f4f3194b50c893f06bb52f1058aebe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9adcfa3c1f4f3194b50c893f06bb52f1058aebe8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9adcfa3c1f4f3194b50c893f06bb52f1058aebe8/comments", "author": null, "committer": null, "parents": [{"sha": "ccb3ad87d42e58bbd93e36f7c8787e9ae1c075a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccb3ad87d42e58bbd93e36f7c8787e9ae1c075a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccb3ad87d42e58bbd93e36f7c8787e9ae1c075a2"}], "stats": {"total": 118, "additions": 96, "deletions": 22}, "files": [{"sha": "4b6c6038989c9189df3e98850e01d4c99bd69f74", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adcfa3c1f4f3194b50c893f06bb52f1058aebe8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adcfa3c1f4f3194b50c893f06bb52f1058aebe8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9adcfa3c1f4f3194b50c893f06bb52f1058aebe8", "patch": "@@ -1,3 +1,18 @@\n+2013-05-15  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\tPR target/19599\n+\t* config/arm/predicates.md (call_insn_operand): New predicate.\n+\t* config/arm/constraints.md (\"Cs\", \"Ss\"):  New constraints.\n+\t* config/arm/arm.md (*call_insn, *call_value_insn): Match only\n+\tif insn is not a tail call.\n+\t(*sibcall_insn, *sibcall_value_insn): Adjust for tailcalling through\n+\tregisters.\n+\t* config/arm/arm.h (enum reg_class): New caller save register class.\n+\t(REG_CLASS_NAMES): Likewise.\n+\t(REG_CLASS_CONTENTS): Likewise.\n+\t* config/arm/arm.c (arm_function_ok_for_sibcall): Allow tailcalling\n+\twithout decls.\n+\n 2013-05-15  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-loop.c (vect_transform_loop): Use MSG_NOTE instead"}, {"sha": "036db8ab6fb28779d251fb7b3b3e2541ab72c681", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adcfa3c1f4f3194b50c893f06bb52f1058aebe8/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adcfa3c1f4f3194b50c893f06bb52f1058aebe8/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=9adcfa3c1f4f3194b50c893f06bb52f1058aebe8", "patch": "@@ -5376,9 +5376,8 @@ arm_function_ok_for_sibcall (tree decl, tree exp)\n   if (cfun->machine->sibcall_blocked)\n     return false;\n \n-  /* Never tailcall something for which we have no decl, or if we\n-     are generating code for Thumb-1.  */\n-  if (decl == NULL || TARGET_THUMB1)\n+  /* Never tailcall something if we are generating code for Thumb-1.  */\n+  if (TARGET_THUMB1)\n     return false;\n \n   /* The PIC register is live on entry to VxWorks PLT entries, so we\n@@ -5388,13 +5387,14 @@ arm_function_ok_for_sibcall (tree decl, tree exp)\n \n   /* Cannot tail-call to long calls, since these are out of range of\n      a branch instruction.  */\n-  if (arm_is_long_call_p (decl))\n+  if (decl && arm_is_long_call_p (decl))\n     return false;\n \n   /* If we are interworking and the function is not declared static\n      then we can't tail-call it unless we know that it exists in this\n      compilation unit (since it might be a Thumb routine).  */\n-  if (TARGET_INTERWORK && TREE_PUBLIC (decl) && !TREE_ASM_WRITTEN (decl))\n+  if (TARGET_INTERWORK && decl && TREE_PUBLIC (decl)\n+      && !TREE_ASM_WRITTEN (decl))\n     return false;\n \n   func_type = arm_current_func_type ();"}, {"sha": "3a49a90c184246f71957fb84bdc64d64ecc7e78d", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adcfa3c1f4f3194b50c893f06bb52f1058aebe8/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adcfa3c1f4f3194b50c893f06bb52f1058aebe8/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=9adcfa3c1f4f3194b50c893f06bb52f1058aebe8", "patch": "@@ -1142,6 +1142,7 @@ enum reg_class\n   STACK_REG,\n   BASE_REGS,\n   HI_REGS,\n+  CALLER_SAVE_REGS,\n   GENERAL_REGS,\n   CORE_REGS,\n   VFP_D0_D7_REGS,\n@@ -1168,6 +1169,7 @@ enum reg_class\n   \"STACK_REG\",\t\t\\\n   \"BASE_REGS\",\t\t\\\n   \"HI_REGS\",\t\t\\\n+  \"CALLER_SAVE_REGS\",\t\\\n   \"GENERAL_REGS\",\t\\\n   \"CORE_REGS\",\t\t\\\n   \"VFP_D0_D7_REGS\",\t\\\n@@ -1193,6 +1195,7 @@ enum reg_class\n   { 0x00002000, 0x00000000, 0x00000000, 0x00000000 }, /* STACK_REG */\t\\\n   { 0x000020FF, 0x00000000, 0x00000000, 0x00000000 }, /* BASE_REGS */\t\\\n   { 0x00005F00, 0x00000000, 0x00000000, 0x00000000 }, /* HI_REGS */\t\\\n+  { 0x0000100F, 0x00000000, 0x00000000, 0x00000000 }, /* CALLER_SAVE_REGS */ \\\n   { 0x00005FFF, 0x00000000, 0x00000000, 0x00000000 }, /* GENERAL_REGS */ \\\n   { 0x00007FFF, 0x00000000, 0x00000000, 0x00000000 }, /* CORE_REGS */\t\\\n   { 0xFFFF0000, 0x00000000, 0x00000000, 0x00000000 }, /* VFP_D0_D7_REGS  */ \\"}, {"sha": "d3bc760952dcd13e70769c9e49b825c1261101a7", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 42, "deletions": 15, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adcfa3c1f4f3194b50c893f06bb52f1058aebe8/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adcfa3c1f4f3194b50c893f06bb52f1058aebe8/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=9adcfa3c1f4f3194b50c893f06bb52f1058aebe8", "patch": "@@ -8889,7 +8889,7 @@\n          (match_operand 1 \"\" \"\"))\n    (use (match_operand 2 \"\" \"\"))\n    (clobber (reg:SI LR_REGNUM))]\n-  \"TARGET_ARM && arm_arch5\"\n+  \"TARGET_ARM && arm_arch5 && !SIBLING_CALL_P (insn)\"\n   \"blx%?\\\\t%0\"\n   [(set_attr \"type\" \"call\")]\n )\n@@ -8899,7 +8899,7 @@\n          (match_operand 1 \"\" \"\"))\n    (use (match_operand 2 \"\" \"\"))\n    (clobber (reg:SI LR_REGNUM))]\n-  \"TARGET_ARM && !arm_arch5\"\n+  \"TARGET_ARM && !arm_arch5 && !SIBLING_CALL_P (insn)\"\n   \"*\n   return output_call (operands);\n   \"\n@@ -8918,7 +8918,7 @@\n \t (match_operand 1 \"\" \"\"))\n    (use (match_operand 2 \"\" \"\"))\n    (clobber (reg:SI LR_REGNUM))]\n-  \"TARGET_ARM && !arm_arch5\"\n+  \"TARGET_ARM && !arm_arch5 && !SIBLING_CALL_P (insn)\"\n   \"*\n   return output_call_mem (operands);\n   \"\n@@ -8931,7 +8931,7 @@\n \t (match_operand 1 \"\" \"\"))\n    (use (match_operand 2 \"\" \"\"))\n    (clobber (reg:SI LR_REGNUM))]\n-  \"TARGET_THUMB1 && arm_arch5\"\n+  \"TARGET_THUMB1 && arm_arch5 && !SIBLING_CALL_P (insn)\"\n   \"blx\\\\t%0\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"type\" \"call\")]\n@@ -8942,7 +8942,7 @@\n \t (match_operand 1 \"\" \"\"))\n    (use (match_operand 2 \"\" \"\"))\n    (clobber (reg:SI LR_REGNUM))]\n-  \"TARGET_THUMB1 && !arm_arch5\"\n+  \"TARGET_THUMB1 && !arm_arch5 && !SIBLING_CALL_P (insn)\"\n   \"*\n   {\n     if (!TARGET_CALLER_INTERWORKING)\n@@ -9001,7 +9001,7 @@\n \t      (match_operand 2 \"\" \"\")))\n    (use (match_operand 3 \"\" \"\"))\n    (clobber (reg:SI LR_REGNUM))]\n-  \"TARGET_ARM && arm_arch5\"\n+  \"TARGET_ARM && arm_arch5 && !SIBLING_CALL_P (insn)\"\n   \"blx%?\\\\t%1\"\n   [(set_attr \"type\" \"call\")]\n )\n@@ -9012,7 +9012,7 @@\n \t      (match_operand 2 \"\" \"\")))\n    (use (match_operand 3 \"\" \"\"))\n    (clobber (reg:SI LR_REGNUM))]\n-  \"TARGET_ARM && !arm_arch5\"\n+  \"TARGET_ARM && !arm_arch5 && !SIBLING_CALL_P (insn)\"\n   \"*\n   return output_call (&operands[1]);\n   \"\n@@ -9028,7 +9028,8 @@\n \t      (match_operand 2 \"\" \"\")))\n    (use (match_operand 3 \"\" \"\"))\n    (clobber (reg:SI LR_REGNUM))]\n-  \"TARGET_ARM && !arm_arch5 && (!CONSTANT_ADDRESS_P (XEXP (operands[1], 0)))\"\n+  \"TARGET_ARM && !arm_arch5 && (!CONSTANT_ADDRESS_P (XEXP (operands[1], 0)))\n+   && !SIBLING_CALL_P (insn)\"\n   \"*\n   return output_call_mem (&operands[1]);\n   \"\n@@ -9078,6 +9079,7 @@\n    (use (match_operand 2 \"\" \"\"))\n    (clobber (reg:SI LR_REGNUM))]\n   \"TARGET_32BIT\n+   && !SIBLING_CALL_P (insn)\n    && (GET_CODE (operands[0]) == SYMBOL_REF)\n    && !arm_is_long_call_p (SYMBOL_REF_DECL (operands[0]))\"\n   \"*\n@@ -9094,6 +9096,7 @@\n    (use (match_operand 3 \"\" \"\"))\n    (clobber (reg:SI LR_REGNUM))]\n   \"TARGET_32BIT\n+   && !SIBLING_CALL_P (insn)\n    && (GET_CODE (operands[1]) == SYMBOL_REF)\n    && !arm_is_long_call_p (SYMBOL_REF_DECL (operands[1]))\"\n   \"*\n@@ -9139,6 +9142,10 @@\n   \"TARGET_32BIT\"\n   \"\n   {\n+    if (!REG_P (XEXP (operands[0], 0))\n+       && (GET_CODE (XEXP (operands[0], 0)) != SYMBOL_REF))\n+     XEXP (operands[0], 0) = force_reg (SImode, XEXP (operands[0], 0));\n+\n     if (operands[2] == NULL_RTX)\n       operands[2] = const0_rtx;\n   }\"\n@@ -9153,32 +9160,52 @@\n   \"TARGET_32BIT\"\n   \"\n   {\n+    if (!REG_P (XEXP (operands[1], 0)) &&\n+       (GET_CODE (XEXP (operands[1],0)) != SYMBOL_REF))\n+     XEXP (operands[1], 0) = force_reg (SImode, XEXP (operands[1], 0));\n+\n     if (operands[3] == NULL_RTX)\n       operands[3] = const0_rtx;\n   }\"\n )\n \n (define_insn \"*sibcall_insn\"\n- [(call (mem:SI (match_operand:SI 0 \"\" \"X\"))\n+ [(call (mem:SI (match_operand:SI 0 \"call_insn_operand\" \"Cs,Ss\"))\n \t(match_operand 1 \"\" \"\"))\n   (return)\n   (use (match_operand 2 \"\" \"\"))]\n-  \"TARGET_32BIT && GET_CODE (operands[0]) == SYMBOL_REF\"\n+  \"TARGET_32BIT && SIBLING_CALL_P (insn)\"\n   \"*\n-  return NEED_PLT_RELOC ? \\\"b%?\\\\t%a0(PLT)\\\" : \\\"b%?\\\\t%a0\\\";\n+  if (which_alternative == 1)\n+    return NEED_PLT_RELOC ? \\\"b%?\\\\t%a0(PLT)\\\" : \\\"b%?\\\\t%a0\\\";\n+  else\n+    {\n+      if (arm_arch5 || arm_arch4t)\n+\treturn \\\" bx\\\\t%0\\\\t%@ indirect register sibling call\\\";\n+      else\n+\treturn \\\"mov%?\\\\t%|pc, %0\\\\t%@ indirect register sibling call\\\";\n+    }\n   \"\n   [(set_attr \"type\" \"call\")]\n )\n \n (define_insn \"*sibcall_value_insn\"\n- [(set (match_operand 0 \"\" \"\")\n-       (call (mem:SI (match_operand:SI 1 \"\" \"X\"))\n+ [(set (match_operand 0 \"s_register_operand\" \"\")\n+       (call (mem:SI (match_operand:SI 1 \"call_insn_operand\" \"Cs,Ss\"))\n \t     (match_operand 2 \"\" \"\")))\n   (return)\n   (use (match_operand 3 \"\" \"\"))]\n-  \"TARGET_32BIT && GET_CODE (operands[1]) == SYMBOL_REF\"\n+  \"TARGET_32BIT && SIBLING_CALL_P (insn)\"\n   \"*\n-  return NEED_PLT_RELOC ? \\\"b%?\\\\t%a1(PLT)\\\" : \\\"b%?\\\\t%a1\\\";\n+  if (which_alternative == 1)\n+   return NEED_PLT_RELOC ? \\\"b%?\\\\t%a1(PLT)\\\" : \\\"b%?\\\\t%a1\\\";\n+  else\n+    {\n+      if (arm_arch5 || arm_arch4t)\n+\treturn \\\"bx\\\\t%1\\\";\n+      else\n+\treturn \\\"mov%?\\\\t%|pc, %1\\\\t@ indirect sibling call \\\";\n+    }\n   \"\n   [(set_attr \"type\" \"call\")]\n )"}, {"sha": "7e7b3e69e0a5a9e583d77687cacdef26447eb461", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adcfa3c1f4f3194b50c893f06bb52f1058aebe8/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adcfa3c1f4f3194b50c893f06bb52f1058aebe8/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=9adcfa3c1f4f3194b50c893f06bb52f1058aebe8", "patch": "@@ -96,6 +96,9 @@\n (define_register_constraint \"c\" \"CC_REG\"\n  \"@internal The condition code register.\")\n \n+(define_register_constraint \"Cs\" \"CALLER_SAVE_REGS\"\n+ \"@internal The caller save registers.  Useful for sibcalls.\")\n+\n (define_constraint \"I\"\n  \"In ARM/Thumb-2 state a constant that can be used as an immediate value in a\n   Data Processing instruction.  In Thumb-1 state a constant in the range\n@@ -400,3 +403,9 @@\n ;; Additionally, we used to have a Q constraint in Thumb state, but\n ;; this wasn't really a valid memory constraint.  Again, all uses of\n ;; this now seem to have been removed.\n+\n+(define_constraint \"Ss\"\n+ \"@internal\n+  Ss is a symbol reference.\"\n+ (match_code \"symbol_ref\")\n+)"}, {"sha": "92de9fe8bd9407064b78e9a7c521bc629a32a630", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adcfa3c1f4f3194b50c893f06bb52f1058aebe8/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adcfa3c1f4f3194b50c893f06bb52f1058aebe8/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=9adcfa3c1f4f3194b50c893f06bb52f1058aebe8", "patch": "@@ -635,3 +635,7 @@\n (define_predicate \"mem_noofs_operand\"\n   (and (match_code \"mem\")\n        (match_code \"reg\" \"0\")))\n+\n+(define_predicate \"call_insn_operand\"\n+  (ior (match_code \"symbol_ref\")\n+       (match_operand 0 \"s_register_operand\")))"}, {"sha": "d69fbd4e74f39925fb811ac47f94199d892fd3ed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adcfa3c1f4f3194b50c893f06bb52f1058aebe8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adcfa3c1f4f3194b50c893f06bb52f1058aebe8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9adcfa3c1f4f3194b50c893f06bb52f1058aebe8", "patch": "@@ -1,3 +1,9 @@\n+2013-05-15  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\tPR target/19599\n+\t* gcc.target/arm/pr40887.c: Adjust testcase.\n+\t* gcc.target/arm/pr19599.c: New test.\n+\n 2013-05-15  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/57275"}, {"sha": "e3e066cf8207c6c74a4f1a7800095c89d3996098", "filename": "gcc/testsuite/gcc.target/arm/pr19599.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adcfa3c1f4f3194b50c893f06bb52f1058aebe8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr19599.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adcfa3c1f4f3194b50c893f06bb52f1058aebe8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr19599.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr19599.c?ref=9adcfa3c1f4f3194b50c893f06bb52f1058aebe8", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-skip-if \"need at least armv5te\" { *-*-* } { \"-march=armv[234]*\" } { \"\" } } */\n+/* { dg-options \"-O2 -march=armv5te -marm\" }  */\n+/* { dg-final { scan-assembler \"bx\" } } */\n+\n+int (*indirect_func)();\n+\n+int indirect_call()\n+{\n+  return indirect_func();\n+}"}, {"sha": "5cabe3ab7feaa2563702adb494bcfbeeff956053", "filename": "gcc/testsuite/gcc.target/arm/pr40887.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adcfa3c1f4f3194b50c893f06bb52f1058aebe8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr40887.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adcfa3c1f4f3194b50c893f06bb52f1058aebe8/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr40887.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr40887.c?ref=9adcfa3c1f4f3194b50c893f06bb52f1058aebe8", "patch": "@@ -2,9 +2,9 @@\n /* { dg-options \"-O2 -march=armv5te\" }  */\n /* { dg-final { scan-assembler \"blx\" } } */\n \n-int (*indirect_func)();\n+int (*indirect_func)(int x);\n \n int indirect_call()\n {\n-    return indirect_func();\n+  return indirect_func(20) + indirect_func (40);\n }"}]}