{"sha": "70ec16f7c29de16e0ec824de9a8979ff0a902488", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBlYzE2ZjdjMjlkZTE2ZTBlYzgyNGRlOWE4OTc5ZmYwYTkwMjQ4OA==", "commit": {"author": {"name": "Andrew Pinski", "email": "andrew_pinski@playstation.sony.com", "date": "2007-04-29T06:22:14Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2007-04-29T06:22:14Z"}, "message": "re PR c++/30221 (internal compiler error: in reshape_init_r, at cp/decl.c:4632)\n\n2007-04-28  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR C++/30221\n        * decl.c (reshape_init_r): Don't reshape the first element if it\n        is a pointer to member function.\n\n2007-04-28  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR C++/30221\n        * g++.dg/init/ptrfn2.C: New test.\n        * g++.dg/init/ptrfn3.C: New test.\n\nFrom-SVN: r124271", "tree": {"sha": "3840cef2f2e0b838d286f61d057440ec741bbf31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3840cef2f2e0b838d286f61d057440ec741bbf31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70ec16f7c29de16e0ec824de9a8979ff0a902488", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70ec16f7c29de16e0ec824de9a8979ff0a902488", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70ec16f7c29de16e0ec824de9a8979ff0a902488", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70ec16f7c29de16e0ec824de9a8979ff0a902488/comments", "author": null, "committer": null, "parents": [{"sha": "4f06d65b44483f00dd2397321cf599e4066950c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f06d65b44483f00dd2397321cf599e4066950c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f06d65b44483f00dd2397321cf599e4066950c3"}], "stats": {"total": 51, "additions": 48, "deletions": 3}, "files": [{"sha": "2a363c47923d3051173d78c4eb7b43f4a2496da7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70ec16f7c29de16e0ec824de9a8979ff0a902488/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70ec16f7c29de16e0ec824de9a8979ff0a902488/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=70ec16f7c29de16e0ec824de9a8979ff0a902488", "patch": "@@ -1,3 +1,9 @@\n+2007-04-28  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR C++/30221\n+\t* decl.c (reshape_init_r): Don't reshape the first element if it\n+\tis a pointer to member function.\n+\n 2007-04-27  Simon Baldwin  <simonb@google.com>\n \n \t* decl.c (grokparms): Changed message format from %qD to %qE."}, {"sha": "31bc8d2649e42215513cef1572b5be2166802b05", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70ec16f7c29de16e0ec824de9a8979ff0a902488/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70ec16f7c29de16e0ec824de9a8979ff0a902488/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=70ec16f7c29de16e0ec824de9a8979ff0a902488", "patch": "@@ -4638,19 +4638,24 @@ reshape_init_r (tree type, reshape_iter *d, bool first_initializer_p)\n     {\n       if (TREE_CODE (init) == CONSTRUCTOR)\n \t{\n+\t  if (TREE_TYPE (init) && TYPE_PTRMEMFUNC_P (TREE_TYPE (init)))\n+\t    /* There is no need to reshape pointer-to-member function\n+\t       initializers, as they are always constructed correctly\n+\t       by the front end.  */\n+           ;\n+\t  else if (COMPOUND_LITERAL_P (init))\n \t  /* For a nested compound literal, there is no need to reshape since\n \t     brace elision is not allowed. Even if we decided to allow it,\n \t     we should add a call to reshape_init in finish_compound_literal,\n \t     before calling digest_init, so changing this code would still\n \t     not be necessary.  */\n-\t  if (!COMPOUND_LITERAL_P (init))\n+\t    gcc_assert (!BRACE_ENCLOSED_INITIALIZER_P (init));\n+\t  else\n \t    {\n \t      ++d->cur;\n \t      gcc_assert (BRACE_ENCLOSED_INITIALIZER_P (init));\n \t      return reshape_init (type, init);\n \t    }\n-\t  else\n-\t    gcc_assert (!BRACE_ENCLOSED_INITIALIZER_P (init));\n \t}\n \n       warning (OPT_Wmissing_braces, \"missing braces around initializer for %qT\","}, {"sha": "3113b303265c09e9c03bc68b2569475591ca1fdc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70ec16f7c29de16e0ec824de9a8979ff0a902488/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70ec16f7c29de16e0ec824de9a8979ff0a902488/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=70ec16f7c29de16e0ec824de9a8979ff0a902488", "patch": "@@ -1,3 +1,9 @@\n+2007-04-28  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR C++/30221\n+\t* g++.dg/init/ptrfn2.C: New test.\n+\t* g++.dg/init/ptrfn3.C: New test.\n+\n 2007-04-29  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/31711"}, {"sha": "0ca922b9c38fd6e24ee6e56df4c39b46748cd9e8", "filename": "gcc/testsuite/g++.dg/init/ptrfn2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70ec16f7c29de16e0ec824de9a8979ff0a902488/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fptrfn2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70ec16f7c29de16e0ec824de9a8979ff0a902488/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fptrfn2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fptrfn2.C?ref=70ec16f7c29de16e0ec824de9a8979ff0a902488", "patch": "@@ -0,0 +1,14 @@\n+// { dg-options \"\" }\n+// { dg-do compile }\n+// C++/30221\n+// We would ICE while trying to reshape the pointer to\n+// member function element which is not needed.\n+\n+\n+class abstract {};\n+typedef void (abstract::*fptr1) (short & s ) const;\n+struct s {};\n+s array[] =\n+{\n+ (fptr1)0 \n+};// { dg-error \"\" }"}, {"sha": "960085063cf1b493d690386d4322548e22721848", "filename": "gcc/testsuite/g++.dg/init/ptrfn3.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70ec16f7c29de16e0ec824de9a8979ff0a902488/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fptrfn3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70ec16f7c29de16e0ec824de9a8979ff0a902488/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fptrfn3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fptrfn3.C?ref=70ec16f7c29de16e0ec824de9a8979ff0a902488", "patch": "@@ -0,0 +1,14 @@\n+// { dg-options \"\" }\n+// { dg-do compile }\n+// C++/30221\n+// We would ICE while trying to reshape the pointer to\n+// member function element which is not needed.\n+\n+\n+class abstract {};\n+typedef void (abstract::*fptr1) (short & s ) const;\n+struct s {fptr1 f;};\n+s array[] =\n+{\n+ (fptr1)0\n+};"}]}