{"sha": "8b7af071b0cd4a6f8d989453ac81a4c3768d6343", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI3YWYwNzFiMGNkNGE2ZjhkOTg5NDUzYWM4MWE0YzM3NjhkNjM0Mw==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2020-08-08T20:22:00Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2020-08-11T19:30:05Z"}, "message": "libstdc++: Implement DR 526 on [forward_]list remove_if/unique [PR 91620]\n\nRespect DR 526 in implementation of std::[forward_]list remove/remove_if/unique.\n[forward_]list::remove was already implementing it but the implementation has\nbeen modified to generalize the following pattern. All nodes to remove are\ncollected in an intermediate [forward_]list which purpose is just to be\ndetroyed once out of scope.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/91620\n\t* include/bits/forward_list.tcc (forward_list<>::remove): Collect nodes\n\tto destroy in an intermediate forward_list.\n\t(forward_list<>::remove_if, forward_list<>::unique): Likewise.\n\t* include/bits/list.tcc (list<>::remove, list<>::unique): Likewise.\n\t(list<>::remove_if): Likewise.\n\t* include/debug/forward_list (forward_list<>::_M_erase_after): Remove.\n\t(forward_list<>::erase_after): Adapt.\n\t(forward_list<>::remove, forward_list<>::remove_if): Collect nodes to\n\tdestroy in an intermediate forward_list.\n\t(forward_list<>::unique): Likewise.\n\t* include/debug/list (list<>::remove, list<>::unique): Likewise.\n\t(list<>::remove_if): Likewise.\n\t* testsuite/23_containers/forward_list/operations/91620.cc: New test.\n\t* testsuite/23_containers/list/operations/91620.cc: New test.", "tree": {"sha": "1d6317f5ea0753b290fbf34d17aa28e304bc9d1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d6317f5ea0753b290fbf34d17aa28e304bc9d1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b7af071b0cd4a6f8d989453ac81a4c3768d6343", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b7af071b0cd4a6f8d989453ac81a4c3768d6343", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b7af071b0cd4a6f8d989453ac81a4c3768d6343", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b7af071b0cd4a6f8d989453ac81a4c3768d6343/comments", "author": null, "committer": null, "parents": [{"sha": "8f9fd3c4ee5f9e9eb5045d35fcf189ccd214231c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f9fd3c4ee5f9e9eb5045d35fcf189ccd214231c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f9fd3c4ee5f9e9eb5045d35fcf189ccd214231c"}], "stats": {"total": 506, "additions": 382, "deletions": 124}, "files": [{"sha": "3f94066bd55e1a76ec31010da14aa1a97218bf99", "filename": "libstdc++-v3/include/bits/forward_list.tcc", "status": "modified", "additions": 30, "deletions": 35, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7af071b0cd4a6f8d989453ac81a4c3768d6343/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7af071b0cd4a6f8d989453ac81a4c3768d6343/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc?ref=8b7af071b0cd4a6f8d989453ac81a4c3768d6343", "patch": "@@ -290,30 +290,19 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     remove(const _Tp& __val) -> __remove_return_type\n     {\n       size_type __removed __attribute__((__unused__)) = 0;\n-      _Node_base* __curr = &this->_M_impl._M_head;\n-      _Node_base* __extra = nullptr;\n+      forward_list __to_destroy(get_allocator());\n \n-      while (_Node* __tmp = static_cast<_Node*>(__curr->_M_next))\n-\t{\n-\t  if (*__tmp->_M_valptr() == __val)\n-\t    {\n-\t      if (__tmp->_M_valptr() != std::__addressof(__val))\n-\t\t{\n-\t\t  this->_M_erase_after(__curr);\n-\t\t  _GLIBCXX20_ONLY( __removed++ );\n-\t\t  continue;\n-\t\t}\n-\t      else\n-\t\t__extra = __curr;\n-\t    }\n-\t  __curr = __curr->_M_next;\n-\t}\n+      auto __prev_it = cbefore_begin();\n+      while (_Node* __tmp = static_cast<_Node*>(__prev_it._M_node->_M_next))\n+\tif (*__tmp->_M_valptr() == __val)\n+\t  {\n+\t    __to_destroy.splice_after(__to_destroy.cbefore_begin(),\n+\t\t\t\t      *this, __prev_it);\n+\t    _GLIBCXX20_ONLY( __removed++ );\n+\t  }\n+\telse\n+\t  ++__prev_it;\n \n-      if (__extra)\n-\t{\n-\t  this->_M_erase_after(__extra);\n-\t  _GLIBCXX20_ONLY( __removed++ );\n-\t}\n       return _GLIBCXX20_ONLY( __removed );\n     }\n \n@@ -324,17 +313,19 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       remove_if(_Pred __pred) -> __remove_return_type\n       {\n \tsize_type __removed __attribute__((__unused__)) = 0;\n-\t_Node_base* __curr = &this->_M_impl._M_head;\n-\twhile (_Node* __tmp = static_cast<_Node*>(__curr->_M_next))\n-\t  {\n-\t    if (__pred(*__tmp->_M_valptr()))\n-\t      {\n-\t\tthis->_M_erase_after(__curr);\n-\t\t_GLIBCXX20_ONLY( __removed++ );\n-\t      }\n-\t    else\n-\t      __curr = __curr->_M_next;\n-\t  }\n+\tforward_list __to_destroy(get_allocator());\n+\n+\tauto __prev_it = cbefore_begin();\n+\twhile (_Node* __tmp = static_cast<_Node*>(__prev_it._M_node->_M_next))\n+\t  if (__pred(*__tmp->_M_valptr()))\n+\t    {\n+\t      __to_destroy.splice_after(__to_destroy.cbefore_begin(),\n+\t\t\t\t\t*this, __prev_it);\n+\t      _GLIBCXX20_ONLY( __removed++ );\n+\t    }\n+\t  else\n+\t    ++__prev_it;\n+\n \treturn _GLIBCXX20_ONLY( __removed );\n       }\n \n@@ -348,20 +339,24 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \titerator __last = end();\n \tif (__first == __last)\n \t  return _GLIBCXX20_ONLY(0);\n+\n+\tforward_list __to_destroy(get_allocator());\n \tsize_type __removed __attribute__((__unused__)) = 0;\n \titerator __next = __first;\n \twhile (++__next != __last)\n \t{\n \t  if (__binary_pred(*__first, *__next))\n \t    {\n-\t      erase_after(__first);\n+\t      __to_destroy.splice_after(__to_destroy.cbefore_begin(),\n+\t\t\t\t\t*this, __first);\n \t      _GLIBCXX20_ONLY( __removed++ );\n \t    }\n \t  else\n \t    __first = __next;\n \t  __next = __first;\n \t}\n-        return _GLIBCXX20_ONLY( __removed );\n+\n+\treturn _GLIBCXX20_ONLY( __removed );\n       }\n \n #undef _GLIBCXX20_ONLY"}, {"sha": "9b664f114540bca95cc28752dba45869d18f1053", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 50, "deletions": 20, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7af071b0cd4a6f8d989453ac81a4c3768d6343/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7af071b0cd4a6f8d989453ac81a4c3768d6343/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=8b7af071b0cd4a6f8d989453ac81a4c3768d6343", "patch": "@@ -331,10 +331,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     list<_Tp, _Alloc>::\n     remove(const value_type& __value)\n     {\n+#if !_GLIBCXX_USE_CXX11_ABI\n       size_type __removed __attribute__((__unused__)) = 0;\n+#endif\n+      list __to_destroy(get_allocator());\n       iterator __first = begin();\n       iterator __last = end();\n-      iterator __extra = __last;\n       while (__first != __last)\n \t{\n \t  iterator __next = __first;\n@@ -344,22 +346,20 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t      // 526. Is it undefined if a function in the standard changes\n \t      // in parameters?\n-\t      if (std::__addressof(*__first) != std::__addressof(__value))\n-\t\t{\n-\t\t  _M_erase(__first);\n-\t\t  _GLIBCXX20_ONLY( __removed++ );\n-\t\t}\n-\t      else\n-\t\t__extra = __first;\n+\t      __to_destroy.splice(__to_destroy.begin(), *this, __first);\n+#if !_GLIBCXX_USE_CXX11_ABI\n+\t      _GLIBCXX20_ONLY( __removed++ );\n+#endif\n \t    }\n+\n \t  __first = __next;\n \t}\n-      if (__extra != __last)\n-\t{\n-\t  _M_erase(__extra);\n-\t  _GLIBCXX20_ONLY( __removed++ );\n-\t}\n-      return _GLIBCXX20_ONLY( __removed );\n+\n+#if !_GLIBCXX_USE_CXX11_ABI\n+\treturn _GLIBCXX20_ONLY( __removed );\n+#else\n+\treturn _GLIBCXX20_ONLY( __to_destroy.size() );\n+#endif\n     }\n \n   template<typename _Tp, typename _Alloc>\n@@ -371,20 +371,30 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       iterator __last = end();\n       if (__first == __last)\n \treturn _GLIBCXX20_ONLY( 0 );\n+#if !_GLIBCXX_USE_CXX11_ABI\n       size_type __removed __attribute__((__unused__)) = 0;\n+#endif\n+      list __to_destroy(get_allocator());\n       iterator __next = __first;\n       while (++__next != __last)\n \t{\n \t  if (*__first == *__next)\n \t    {\n-\t      _M_erase(__next);\n+\t      __to_destroy.splice(__to_destroy.begin(), *this, __next);\n+#if !_GLIBCXX_USE_CXX11_ABI\n \t      _GLIBCXX20_ONLY( __removed++ );\n+#endif\n \t    }\n \t  else\n \t    __first = __next;\n \t  __next = __first;\n \t}\n+\n+#if !_GLIBCXX_USE_CXX11_ABI\n       return _GLIBCXX20_ONLY( __removed );\n+#else\n+      return _GLIBCXX20_ONLY( __to_destroy.size() );\n+#endif\n     }\n \n   template<typename _Tp, typename _Alloc>\n@@ -533,21 +543,31 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       list<_Tp, _Alloc>::\n       remove_if(_Predicate __pred)\n       {\n+#if !_GLIBCXX_USE_CXX11_ABI\n \tsize_type __removed __attribute__((__unused__)) = 0;\n-        iterator __first = begin();\n-        iterator __last = end();\n-        while (__first != __last)\n+#endif\n+\tlist __to_destroy(get_allocator());\n+\titerator __first = begin();\n+\titerator __last = end();\n+\twhile (__first != __last)\n \t  {\n \t    iterator __next = __first;\n \t    ++__next;\n \t    if (__pred(*__first))\n \t      {\n-\t\t_M_erase(__first);\n+\t\t__to_destroy.splice(__to_destroy.begin(), *this, __first);\n+#if !_GLIBCXX_USE_CXX11_ABI\n \t\t_GLIBCXX20_ONLY( __removed++ );\n+#endif\n \t      }\n \t    __first = __next;\n \t  }\n+\n+#if !_GLIBCXX_USE_CXX11_ABI\n \treturn _GLIBCXX20_ONLY( __removed );\n+#else\n+\treturn _GLIBCXX20_ONLY( __to_destroy.size() );\n+#endif\n       }\n \n   template<typename _Tp, typename _Alloc>\n@@ -560,20 +580,30 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n         iterator __last = end();\n         if (__first == __last)\n \t  return _GLIBCXX20_ONLY(0);\n+#if !_GLIBCXX_USE_CXX11_ABI\n         size_type __removed __attribute__((__unused__)) = 0;\n+#endif\n+\tlist __to_destroy(get_allocator());\n         iterator __next = __first;\n         while (++__next != __last)\n \t  {\n \t    if (__binary_pred(*__first, *__next))\n \t      {\n-\t\t_M_erase(__next);\n+\t\t__to_destroy.splice(__to_destroy.begin(), *this, __next);\n+#if !_GLIBCXX_USE_CXX11_ABI\n \t\t_GLIBCXX20_ONLY( __removed++ );\n+#endif\n \t      }\n \t    else\n \t      __first = __next;\n \t    __next = __first;\n \t  }\n+\n+#if !_GLIBCXX_USE_CXX11_ABI\n \treturn _GLIBCXX20_ONLY( __removed );\n+#else\n+\treturn _GLIBCXX20_ONLY( __to_destroy.size() );\n+#endif\n       }\n \n #undef _GLIBCXX20_ONLY"}, {"sha": "7a00417ccb2e182e542b27a6de9b018d5f173fa8", "filename": "libstdc++-v3/include/debug/forward_list", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7af071b0cd4a6f8d989453ac81a4c3768d6343/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7af071b0cd4a6f8d989453ac81a4c3768d6343/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list?ref=8b7af071b0cd4a6f8d989453ac81a4c3768d6343", "patch": "@@ -452,21 +452,15 @@ namespace __debug\n \treturn { _Base::insert_after(__pos.base(), __il), this };\n       }\n \n-    private:\n-      _Base_iterator\n-      _M_erase_after(_Base_const_iterator __pos)\n-      {\n-\t_Base_const_iterator __next = std::next(__pos);\n-\tthis->_M_invalidate_if([__next](_Base_const_iterator __it)\n-\t  { return __it == __next; });\n-\treturn _Base::erase_after(__pos);\n-      }\n-    public:\n       iterator\n       erase_after(const_iterator __pos)\n       {\n \t__glibcxx_check_erase_after(__pos);\n-\treturn { _M_erase_after(__pos.base()), this };\n+\n+\t_Base_const_iterator __next = std::next(__pos.base());\n+\tthis->_M_invalidate_if([__next](_Base_const_iterator __it)\n+\t\t\t       { return __it == __next; });\n+\treturn { _Base::erase_after(__pos.base()), this };\n       }\n \n       iterator\n@@ -691,29 +685,23 @@ namespace __debug\n \t  return _Base::remove(__val);\n \n \tsize_type __removed __attribute__((__unused__)) = 0;\n-\t_Base_iterator __x = _Base::before_begin();\n-\t_Base_iterator __old = __x++;\n-\t_Base_iterator __extra = _Base::end();\n-\twhile (__x != _Base::end())\n+\t_Base __to_destroy(get_allocator());\n+\t_Base_const_iterator __x = _Base::cbefore_begin();\n+\t_Base_const_iterator __old = __x++;\n+\twhile (__x != _Base::cend())\n \t  {\n \t    if (*__x == __val)\n \t      {\n-\t\tif (std::__addressof(*__x) != std::__addressof(__val))\n-\t\t  {\n-\t\t    __x = _M_erase_after(__old);\n-\t\t    _GLIBCXX20_ONLY( __removed++ );\n-\t\t    continue;\n-\t\t  }\n-\t\telse\n-\t\t  __extra = __old;\n+\t\t_Base_const_iterator __next = std::next(__old);\n+\t\tthis->_M_invalidate_if([__next](_Base_const_iterator __it)\n+\t\t\t\t       { return __it == __next; });\n+\t\t__to_destroy.splice_after(__to_destroy.cbefore_begin(),\n+\t\t\t\t\t  _M_base(), __old);\n+\t\t__x = __old;\n+\t\t_GLIBCXX20_ONLY( __removed++ );\n \t      }\n-\t    __old = __x++;\n-\t  }\n \n-\tif (__extra != _Base::end())\n-\t  {\n-\t    this->_M_erase_after(__extra);\n-\t    _GLIBCXX20_ONLY( __removed++ );\n+\t    __old = __x++;\n \t  }\n \n \treturn _GLIBCXX20_ONLY( __removed );\n@@ -727,16 +715,23 @@ namespace __debug\n \t    return _Base::remove_if(__pred);\n \n \t  size_type __removed __attribute__((__unused__)) = 0;\n+\t  _Base __to_destroy(get_allocator());\n \t  _Base_iterator __x = _Base::before_begin();\n \t  _Base_iterator __old = __x++;\n \t  while (__x != _Base::end())\n-\t    if (__pred(*__x))\n-\t      {\n-\t\t__x = _M_erase_after(__old);\n-\t\t_GLIBCXX20_ONLY( __removed++ );\n-\t      }\n-\t    else\n+\t    {\n+\t      if (__pred(*__x))\n+\t\t{\n+\t\t  this->_M_invalidate_if([__x](_Base_const_iterator __it)\n+\t\t\t\t\t { return __it == __x; });\n+\t\t  __to_destroy.splice_after(__to_destroy.cbefore_begin(),\n+\t\t\t\t\t    _M_base(), __old);\n+\t\t  __x = __old;\n+\t\t  _GLIBCXX20_ONLY( __removed++ );\n+\t\t}\n+\n \t      __old = __x++;\n+\t    }\n \n \t  return _GLIBCXX20_ONLY( __removed );\n \t}\n@@ -753,22 +748,27 @@ namespace __debug\n \t  if (!this->_M_iterators && !this->_M_const_iterators)\n \t    return _Base::unique(__binary_pred);\n \n-\t  _Base_iterator __first = _Base::begin();\n-\t  _Base_iterator __last = _Base::end();\n+\t  _Base_const_iterator __first = _Base::cbegin();\n+\t  _Base_const_iterator __last = _Base::cend();\n \t  if (__first == __last)\n \t    return _GLIBCXX20_ONLY(0);\n \n \t  size_type __removed __attribute__((__unused__)) = 0;\n-\t  _Base_iterator __next = std::next(__first);\n+\t  _Base __to_destroy(get_allocator());\n+\t  _Base_const_iterator __next = std::next(__first);\n \t  while (__next != __last)\n \t    {\n \t      if (__binary_pred(*__first, *__next))\n \t\t{\n-\t\t  __next = _M_erase_after(__first);\n+\t\t  this->_M_invalidate_if([__next](_Base_const_iterator __it)\n+\t\t\t\t\t { return __it == __next; });\n+\t\t  __to_destroy.splice_after(__to_destroy.cbefore_begin(),\n+\t\t\t\t\t    _M_base(), __first);\n+\t\t  __next = __first;\n \t\t  _GLIBCXX20_ONLY( __removed++ );\n \t\t}\n-\t      else\n-\t\t__first = __next++;\n+\n+\t      __first = __next++;\n \t    }\n \n \t  return _GLIBCXX20_ONLY( __removed );"}, {"sha": "b5652fd9fdcebae63ebb4af55c2725b9d03f01dd", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 63, "deletions": 28, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7af071b0cd4a6f8d989453ac81a4c3768d6343/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7af071b0cd4a6f8d989453ac81a4c3768d6343/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=8b7af071b0cd4a6f8d989453ac81a4c3768d6343", "patch": "@@ -681,36 +681,36 @@ namespace __debug\n \tif (!this->_M_iterators && !this->_M_const_iterators)\n \t  return _Base::remove(__value);\n \n+#if !_GLIBCXX_USE_CXX11_ABI\n \tsize_type __removed __attribute__((__unused__)) = 0;\n+#endif\n+\t_Base __to_destroy(get_allocator());\n \t_Base_iterator __first = _Base::begin();\n \t_Base_iterator __last = _Base::end();\n-\t_Base_iterator __extra = __last;\n \twhile (__first != __last)\n \t  {\n+\t    _Base_iterator __next = __first;\n+\t    ++__next;\n \t    if (*__first == __value)\n-\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t      // 526. Is it undefined if a function in the standard changes\n-\t      // in parameters?\n-\t      if (std::__addressof(*__first) != std::__addressof(__value))\n-\t\t{\n-\t\t  __first = _M_erase(__first);\n-\t\t  _GLIBCXX20_ONLY( __removed++ );\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  __extra = __first;\n-\t\t  ++__first;\n-\t\t}\n-\t    else\n-\t      ++__first;\n-\t  }\n+\t      {\n+\t\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t\t// 526. Is it undefined if a function in the standard changes\n+\t\t// in parameters?\n+\t\tthis->_M_invalidate_if(_Equal(__first));\n+\t\t__to_destroy.splice(__to_destroy.begin(), _M_base(), __first);\n+#if !_GLIBCXX_USE_CXX11_ABI\n+\t\t_GLIBCXX20_ONLY( __removed++ );\n+#endif\n+\t      }\n \n-\tif (__extra != __last)\n-\t  {\n-\t    _M_erase(__extra);\n-\t    _GLIBCXX20_ONLY( __removed++ );\n+\t    __first = __next;\n \t  }\n+\n+#if !_GLIBCXX_USE_CXX11_ABI\n \treturn _GLIBCXX20_ONLY( __removed );\n+#else\n+\treturn _GLIBCXX20_ONLY( __to_destroy.size() );\n+#endif\n       }\n \n       template<class _Predicate>\n@@ -720,17 +720,31 @@ namespace __debug\n \t  if (!this->_M_iterators && !this->_M_const_iterators)\n \t    return _Base::remove_if(__pred);\n \n+#if !_GLIBCXX_USE_CXX11_ABI\n \t  size_type __removed __attribute__((__unused__)) = 0;\n+#endif\n+\t  _Base __to_destroy(get_allocator());\n \t  for (_Base_iterator __x = _Base::begin(); __x != _Base::end(); )\n+\t  {\n+\t    _Base_iterator __next = __x;\n+\t    ++__next;\n \t    if (__pred(*__x))\n \t      {\n-\t\t__x = _M_erase(__x);\n+\t\tthis->_M_invalidate_if(_Equal(__x));\n+\t\t__to_destroy.splice(__to_destroy.begin(), _M_base(), __x);\n+#if !_GLIBCXX_USE_CXX11_ABI\n \t\t_GLIBCXX20_ONLY( __removed++ );\n+#endif\n \t      }\n-\t    else\n-\t      ++__x;\n \n+\t    __x = __next;\n+\t  }\n+\n+#if !_GLIBCXX_USE_CXX11_ABI\n \t  return _GLIBCXX20_ONLY( __removed );\n+#else\n+\t  return _GLIBCXX20_ONLY( __to_destroy.size() );\n+#endif\n \t}\n \n       _GLIBCXX_LIST_REMOVE_RETURN_TYPE_TAG\n@@ -743,21 +757,31 @@ namespace __debug\n \tif (empty())\n \t  return _GLIBCXX20_ONLY(0);\n \n+#if !_GLIBCXX_USE_CXX11_ABI\n         size_type __removed __attribute__((__unused__)) = 0;\n+#endif\n+\t_Base __to_destroy(get_allocator());\n \t_Base_iterator __first = _Base::begin();\n \t_Base_iterator __last = _Base::end();\n \t_Base_iterator __next = __first;\n \twhile (++__next != __last)\n \t  if (*__first == *__next)\n \t    {\n-\t      _M_erase(__next);\n+\t      this->_M_invalidate_if(_Equal(__next));\n+\t      __to_destroy.splice(__to_destroy.begin(), _M_base(), __next);\n \t      __next = __first;\n+#if !_GLIBCXX_USE_CXX11_ABI\n \t      _GLIBCXX20_ONLY( __removed++ );\n+#endif\n \t    }\n \t  else\n \t    __first = __next;\n \n+#if !_GLIBCXX_USE_CXX11_ABI\n \treturn _GLIBCXX20_ONLY( __removed );\n+#else\n+\treturn _GLIBCXX20_ONLY( __to_destroy.size() );\n+#endif\n       }\n \n       template<class _BinaryPredicate>\n@@ -770,21 +794,32 @@ namespace __debug\n \t  if (empty())\n \t    return _GLIBCXX20_ONLY(0);\n \n+\n+#if !_GLIBCXX_USE_CXX11_ABI\n \t  size_type __removed __attribute__((__unused__)) = 0;\n+#endif\n+\t  _Base __to_destroy(get_allocator());\n \t  _Base_iterator __first = _Base::begin();\n \t  _Base_iterator __last = _Base::end();\n-\t  _Base_iterator __next = __first;;\n+\t  _Base_iterator __next = __first;\n \t  while (++__next != __last)\n \t    if (__binary_pred(*__first, *__next))\n \t      {\n-\t\t_M_erase(__next);\n+\t\tthis->_M_invalidate_if(_Equal(__next));\n+\t\t__to_destroy.splice(__to_destroy.begin(), _M_base(), __next);\n \t\t__next = __first;\n+#if !_GLIBCXX_USE_CXX11_ABI\n \t\t_GLIBCXX20_ONLY( __removed++ );\n+#endif\n \t      }\n \t    else\n \t      __first = __next;\n \n-\t  return _GLIBCXX20_ONLY( __removed );\n+#if !_GLIBCXX_USE_CXX11_ABI\n+\treturn _GLIBCXX20_ONLY( __removed );\n+#else\n+\treturn _GLIBCXX20_ONLY( __to_destroy.size() );\n+#endif\n \t}\n \n #undef _GLIBCXX_LIST_REMOVE_RETURN_TYPE_TAG"}, {"sha": "a3127f6ee68a5a3fc84a30aea323c4ad860af76a", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/operations/91620.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7af071b0cd4a6f8d989453ac81a4c3768d6343/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Foperations%2F91620.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7af071b0cd4a6f8d989453ac81a4c3768d6343/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Foperations%2F91620.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Foperations%2F91620.cc?ref=8b7af071b0cd4a6f8d989453ac81a4c3768d6343", "patch": "@@ -0,0 +1,88 @@\n+// { dg-do run { target c++11 } }\n+// { dg-options \"-g -O0\" }\n+\n+//\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <forward_list>\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct PredLWG526\n+{\n+  PredLWG526(int i) : i_(i) {};\n+  ~PredLWG526() { i_ = -32767; }\n+\n+  bool\n+  operator() (const PredLWG526& p) const { return p.i_ == i_; }\n+\n+  bool\n+  operator==(int i) const { return i == i_; }\n+\n+  bool\n+  operator() (const PredLWG526& lhs, const PredLWG526& rhs) const\n+  {\n+    VERIFY( i_ != -32767 );\n+    return lhs.i_ == rhs.i_;\n+  }\n+\n+  int i_;\n+};\n+\n+void test01()\n+{\n+  int a1[] = {1, 2, 1, 3, 5, 8, 11};\n+  int a2[] = {2, 3, 5, 8, 11};\n+  std::forward_list<PredLWG526> fl(a1, a1 + 7);\n+\n+  VERIFY( std::distance(fl.begin(), fl.end()) == 7 );\n+\n+  fl.remove_if(std::cref(fl.front()));\n+  VERIFY( std::distance(fl.begin(), fl.end()) == 5 );\n+  for (size_t i = 0; !fl.empty(); ++i)\n+    {\n+      VERIFY( fl.front() == a2[i] );\n+      fl.pop_front();\n+    }\n+}\n+\n+void test02()\n+{\n+  int a1[] = {1, 1, 1, 2, 3, 5, 8, 11};\n+  int a2[] = {1, 2, 3, 5, 8, 11};\n+  std::forward_list<PredLWG526> fl(a1, a1 + 8);\n+\n+  VERIFY( std::distance(fl.begin(), fl.end()) == 8 );\n+\n+  auto it = fl.begin();\n+  ++it;\n+  fl.unique(std::cref(*it));\n+  VERIFY( std::distance(fl.begin(), fl.end()) == 6 );\n+  for (size_t i = 0; !fl.empty(); ++i)\n+    {\n+      VERIFY( fl.front() == a2[i] );\n+      fl.pop_front();\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "64c0998082d1ecbc73c649fba1cd5def59533915", "filename": "libstdc++-v3/testsuite/23_containers/list/operations/91620.cc", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7af071b0cd4a6f8d989453ac81a4c3768d6343/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F91620.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7af071b0cd4a6f8d989453ac81a4c3768d6343/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F91620.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F91620.cc?ref=8b7af071b0cd4a6f8d989453ac81a4c3768d6343", "patch": "@@ -0,0 +1,110 @@\n+// { dg-do run { target c++11 } }\n+// { dg-options \"-g -O0\" }\n+\n+//\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <list>\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct PredLWG526\n+{\n+  PredLWG526(int i) : i_(i) {};\n+  ~PredLWG526() { i_ = -32767; }\n+\n+  bool\n+  operator() (const PredLWG526& p) const { return p.i_ == i_; }\n+\n+  bool\n+  operator==(int i) const { return i == i_; }\n+\n+  bool\n+  operator()(const PredLWG526& lhs, const PredLWG526& rhs) const\n+  {\n+    VERIFY( i_ != -32767 );\n+    return lhs.i_ == rhs.i_;\n+  }\n+\n+  friend bool\n+  operator==(const PredLWG526& lhs, const PredLWG526& rhs)\n+  { return lhs.i_ == rhs.i_; }\n+\n+  int i_;\n+};\n+\n+void test01()\n+{\n+  int a1[] = {1, 2, 1, 3, 5, 8, 11};\n+  int a2[] = {2, 3, 5, 8, 11};\n+  std::list<PredLWG526> l(a1, a1 + 7);\n+\n+  VERIFY( std::distance(l.begin(), l.end()) == 7 );\n+\n+  l.remove(l.front());\n+  VERIFY( std::distance(l.begin(), l.end()) == 5 );\n+  for (size_t i = 0; !l.empty(); ++i)\n+    {\n+      VERIFY( l.front() == a2[i] );\n+      l.pop_front();\n+    }\n+}\n+\n+void test02()\n+{\n+  int a1[] = {1, 2, 1, 3, 5, 8, 11};\n+  int a2[] = {2, 3, 5, 8, 11};\n+  std::list<PredLWG526> l(a1, a1 + 7);\n+\n+  VERIFY( std::distance(l.begin(), l.end()) == 7 );\n+\n+  l.remove_if(std::cref(l.front()));\n+  VERIFY( std::distance(l.begin(), l.end()) == 5 );\n+  for (size_t i = 0; !l.empty(); ++i)\n+    {\n+      VERIFY( l.front() == a2[i] );\n+      l.pop_front();\n+    }\n+}\n+\n+void test03()\n+{\n+  int a1[] = {1, 1, 1, 2, 3, 5, 8, 11};\n+  int a2[] = {1, 2, 3, 5, 8, 11};\n+  std::list<PredLWG526> l(a1, a1 + 8);\n+\n+  VERIFY( std::distance(l.begin(), l.end()) == 8 );\n+\n+  auto it = l.begin();\n+  ++it;\n+  l.unique(std::cref(*it));\n+  VERIFY( std::distance(l.begin(), l.end()) == 6 );\n+  for (size_t i = 0; !l.empty(); ++i)\n+    {\n+      VERIFY( l.front() == a2[i] );\n+      l.pop_front();\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  return 0;\n+}"}]}