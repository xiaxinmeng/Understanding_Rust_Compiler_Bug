{"sha": "e3e68fa59ead502c24950298b53c637bbe535a74", "node_id": "C_kwDOANBUbNoAKGUzZTY4ZmE1OWVhZDUwMmMyNDk1MDI5OGI1M2M2MzdiYmU1MzVhNzQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-30T08:49:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-30T08:49:47Z"}, "message": "ubsan: Fix ICE due to -fsanitize=object-size [PR105093]\n\nThe following testcase ICEs, because for a volatile X & RESULT_DECL\nubsan wants to take address of that reference.  instrument_object_size\nis called with x, so the base is equal to the access and the var\nis automatic, so there is no risk of an out of bounds access for it.\nNormally we wouldn't instrument those because we fold address of the\nt - address of inner to 0, add constant size of the decl and it is\nequal to what __builtin_object_size computes.  But the volatile\nresults in the subtraction not being folded.\n\nThe first hunk fixes it by punting if we access the whole automatic\ndecl, so that even volatile won't cause a problem.\nThe second hunk (not strictly needed for this testcase) is similar\nto what has been added to asan.cc recently, if we actually take\naddress of a decl and keep it in the IL, we better mark it addressable.\n\n2022-03-30  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR sanitizer/105093\n\t* ubsan.cc (instrument_object_size): If t is equal to inner and\n\tis a decl other than global var, punt.  When emitting call to\n\tUBSAN_OBJECT_SIZE ifn, make sure base is addressable.\n\n\t* g++.dg/ubsan/pr105093.C: New test.", "tree": {"sha": "ce748e88b5bbcc058b1cfc71a709cc34ac1b5b25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce748e88b5bbcc058b1cfc71a709cc34ac1b5b25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3e68fa59ead502c24950298b53c637bbe535a74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3e68fa59ead502c24950298b53c637bbe535a74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3e68fa59ead502c24950298b53c637bbe535a74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3e68fa59ead502c24950298b53c637bbe535a74/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "387e818cda0ffde86f624228c3da1ab28f453685", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387e818cda0ffde86f624228c3da1ab28f453685", "html_url": "https://github.com/Rust-GCC/gccrs/commit/387e818cda0ffde86f624228c3da1ab28f453685"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "49f75ed69cf80fe93956d9d5f0abefa24274aa85", "filename": "gcc/testsuite/g++.dg/ubsan/pr105093.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3e68fa59ead502c24950298b53c637bbe535a74/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr105093.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3e68fa59ead502c24950298b53c637bbe535a74/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr105093.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr105093.C?ref=e3e68fa59ead502c24950298b53c637bbe535a74", "patch": "@@ -0,0 +1,12 @@\n+// PR sanitizer/105093\n+// { dg-do compile }\n+// { dg-options \"-O2 -fsanitize=undefined -Wno-volatile\" }\n+\n+struct X { X (); ~X (); };\n+\n+volatile X\n+foo ()\n+{\n+  X x;\n+  return x;\n+}"}, {"sha": "0f5b372b195f7e6966c610261961249b9dfa41d8", "filename": "gcc/ubsan.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3e68fa59ead502c24950298b53c637bbe535a74/gcc%2Fubsan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3e68fa59ead502c24950298b53c637bbe535a74/gcc%2Fubsan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.cc?ref=e3e68fa59ead502c24950298b53c637bbe535a74", "patch": "@@ -2123,6 +2123,8 @@ instrument_object_size (gimple_stmt_iterator *gsi, tree t, bool is_lhs)\n \t   || TREE_CODE (inner) == RESULT_DECL)\n \t  && DECL_REGISTER (inner))\n \treturn;\n+      if (t == inner && !is_global_var (t))\n+\treturn;\n       base = inner;\n     }\n   else if (TREE_CODE (inner) == MEM_REF)\n@@ -2219,6 +2221,11 @@ instrument_object_size (gimple_stmt_iterator *gsi, tree t, bool is_lhs)\n \t}\n     }\n \n+  if (DECL_P (base)\n+      && decl_function_context (base) == current_function_decl\n+      && !TREE_ADDRESSABLE (base))\n+    mark_addressable (base);\n+\n   if (bos_stmt && gimple_call_builtin_p (bos_stmt, BUILT_IN_OBJECT_SIZE))\n     ubsan_create_edge (bos_stmt);\n "}]}