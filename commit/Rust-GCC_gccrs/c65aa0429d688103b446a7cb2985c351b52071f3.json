{"sha": "c65aa0429d688103b446a7cb2985c351b52071f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY1YWEwNDI5ZDY4ODEwM2I0NDZhN2NiMjk4NWMzNTFiNTIwNzFmMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-07-05T07:56:45Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-07-05T07:56:45Z"}, "message": "target-insns.def (stack_protect_set, [...]): New targetm instruction patterns.\n\ngcc/\n\t* target-insns.def (stack_protect_set, stack_protect_test): New\n\ttargetm instruction patterns.\n\t* cfgexpand.c (stack_protect_prologue): Use them instead of\n\tHAVE_*/gen_* interface.\n\t* function.c (stack_protect_epilogue): Likewise.\n\nFrom-SVN: r225428", "tree": {"sha": "8259493253aa32f29e39453efeeca64cecadb24b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8259493253aa32f29e39453efeeca64cecadb24b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c65aa0429d688103b446a7cb2985c351b52071f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c65aa0429d688103b446a7cb2985c351b52071f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c65aa0429d688103b446a7cb2985c351b52071f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c65aa0429d688103b446a7cb2985c351b52071f3/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c58793af54226c898ae27c913a8f9d85bbf948c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c58793af54226c898ae27c913a8f9d85bbf948c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c58793af54226c898ae27c913a8f9d85bbf948c"}], "stats": {"total": 42, "additions": 19, "deletions": 23}, "files": [{"sha": "6f077c7a5d9fecfd94532eb4d0736b502c83b27e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65aa0429d688103b446a7cb2985c351b52071f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65aa0429d688103b446a7cb2985c351b52071f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c65aa0429d688103b446a7cb2985c351b52071f3", "patch": "@@ -1,3 +1,11 @@\n+2015-07-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* target-insns.def (stack_protect_set, stack_protect_test): New\n+\ttargetm instruction patterns.\n+\t* cfgexpand.c (stack_protect_prologue): Use them instead of\n+\tHAVE_*/gen_* interface.\n+\t* function.c (stack_protect_epilogue): Likewise.\n+\n 2015-07-05  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* expr.h (gen_move_insn_uncast): Delete."}, {"sha": "4f9a31dbaefc66d932a9576ac22a1bca9e38ab0a", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65aa0429d688103b446a7cb2985c351b52071f3/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65aa0429d688103b446a7cb2985c351b52071f3/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=c65aa0429d688103b446a7cb2985c351b52071f3", "patch": "@@ -5767,11 +5767,6 @@ expand_main_function (void)\n /* Expand code to initialize the stack_protect_guard.  This is invoked at\n    the beginning of a function to be protected.  */\n \n-#ifndef HAVE_stack_protect_set\n-# define HAVE_stack_protect_set\t\t0\n-# define gen_stack_protect_set(x,y)\t(gcc_unreachable (), NULL_RTX)\n-#endif\n-\n static void\n stack_protect_prologue (void)\n {\n@@ -5783,15 +5778,12 @@ stack_protect_prologue (void)\n \n   /* Allow the target to copy from Y to X without leaking Y into a\n      register.  */\n-  if (HAVE_stack_protect_set)\n-    {\n-      rtx insn = gen_stack_protect_set (x, y);\n-      if (insn)\n-\t{\n-\t  emit_insn (insn);\n-\t  return;\n-\t}\n-    }\n+  if (targetm.have_stack_protect_set ())\n+    if (rtx_insn *insn = targetm.gen_stack_protect_set (x, y))\n+      {\n+\temit_insn (insn);\n+\treturn;\n+      }\n \n   /* Otherwise do a straight move.  */\n   emit_move_insn (x, y);"}, {"sha": "2c9deac047f19841412aba4d469389ac51d1c282", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65aa0429d688103b446a7cb2985c351b52071f3/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65aa0429d688103b446a7cb2985c351b52071f3/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=c65aa0429d688103b446a7cb2985c351b52071f3", "patch": "@@ -4874,11 +4874,6 @@ init_function_start (tree subr)\n /* Expand code to verify the stack_protect_guard.  This is invoked at\n    the end of a function to be protected.  */\n \n-#ifndef HAVE_stack_protect_test\n-# define HAVE_stack_protect_test\t\t0\n-# define gen_stack_protect_test(x, y, z)\t(gcc_unreachable (), NULL_RTX)\n-#endif\n-\n void\n stack_protect_epilogue (void)\n {\n@@ -4891,13 +4886,12 @@ stack_protect_epilogue (void)\n \n   /* Allow the target to compare Y with X without leaking either into\n      a register.  */\n-  switch (HAVE_stack_protect_test != 0)\n+  switch (targetm.have_stack_protect_test ())\n     {\n     case 1:\n-      tmp = gen_stack_protect_test (x, y, label);\n-      if (tmp)\n+      if (rtx_insn *seq = targetm.gen_stack_protect_test (x, y, label))\n \t{\n-\t  emit_insn (tmp);\n+\t  emit_insn (seq);\n \t  break;\n \t}\n       /* FALLTHRU */"}, {"sha": "6aae708abf7185f2fb3cb0a5741dc230a6e4548f", "filename": "gcc/target-insns.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65aa0429d688103b446a7cb2985c351b52071f3/gcc%2Ftarget-insns.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65aa0429d688103b446a7cb2985c351b52071f3/gcc%2Ftarget-insns.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-insns.def?ref=c65aa0429d688103b446a7cb2985c351b52071f3", "patch": "@@ -55,6 +55,8 @@ DEF_TARGET_INSN (save_stack_function, (rtx x0, rtx x1))\n DEF_TARGET_INSN (save_stack_nonlocal, (rtx x0, rtx x1))\n DEF_TARGET_INSN (sibcall_epilogue, (void))\n DEF_TARGET_INSN (simple_return, (void))\n+DEF_TARGET_INSN (stack_protect_set, (rtx x0, rtx x1))\n+DEF_TARGET_INSN (stack_protect_test, (rtx x0, rtx x1, rtx x2))\n DEF_TARGET_INSN (store_multiple, (rtx x0, rtx x1, rtx x2))\n DEF_TARGET_INSN (tablejump, (rtx x0, rtx x1))\n DEF_TARGET_INSN (trap, (void))"}]}