{"sha": "0ca6c49ff1069176f2fd34e3e13ed44aaea23bdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNhNmM0OWZmMTA2OTE3NmYyZmQzNGUzZTEzZWQ0NGFhZWEyM2JkYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2013-09-21T20:59:10Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-09-21T20:59:10Z"}, "message": "x86-tune.def (partial_reg_stall): Disable for CoreI7 and newer.\n\n\n\t* x86-tune.def (partial_reg_stall): Disable for CoreI7 and newer.\n\t(sse_typeless_stores): Enable for core\n\t(sse_load0_by_pxor): Likewise.\n\t(four_jump_limit): Disable for core.\n\t(pad_returns): Likewise.\n\t(avoid_vector_decode): Likewise.\n\t(fuse_cmp_and_branch): Enable for cores.\n\t* i386.c (x86_accumulate_outgoing_args): Disable for cores.\n\nFrom-SVN: r202813", "tree": {"sha": "70bc44cb139cf493dad73437141afad954c192ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70bc44cb139cf493dad73437141afad954c192ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ca6c49ff1069176f2fd34e3e13ed44aaea23bdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ca6c49ff1069176f2fd34e3e13ed44aaea23bdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ca6c49ff1069176f2fd34e3e13ed44aaea23bdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ca6c49ff1069176f2fd34e3e13ed44aaea23bdb/comments", "author": null, "committer": null, "parents": [{"sha": "765c1354c7c9a81e9d78504a8db051ca23df7b92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/765c1354c7c9a81e9d78504a8db051ca23df7b92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/765c1354c7c9a81e9d78504a8db051ca23df7b92"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "a4dbd3961e3160c963fcf89f4df16cabd7ae9a0a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ca6c49ff1069176f2fd34e3e13ed44aaea23bdb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ca6c49ff1069176f2fd34e3e13ed44aaea23bdb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ca6c49ff1069176f2fd34e3e13ed44aaea23bdb", "patch": "@@ -1,3 +1,14 @@\n+2013-09-20  Jan Hubicka  <jh@suse.cz>\n+\n+\t* x86-tune.def (partial_reg_stall): Disable for CoreI7 and newer.\n+\t(sse_typeless_stores): Enable for core\n+\t(sse_load0_by_pxor): Likewise.\n+\t(four_jump_limit): Disable for core.\n+\t(pad_returns): Likewise.\n+\t(avoid_vector_decode): Likewise.\n+\t(fuse_cmp_and_branch): Enable for cores.\n+\t* i386.c (x86_accumulate_outgoing_args): Disable for cores.\n+\n 2013-09-20  John David Anglin  <danglin@gcc.gnu.org>\n \n \tPR middle-end/56791"}, {"sha": "0c10e7317eae1a14a7ef12829dfff610507fdbe9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ca6c49ff1069176f2fd34e3e13ed44aaea23bdb/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ca6c49ff1069176f2fd34e3e13ed44aaea23bdb/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0ca6c49ff1069176f2fd34e3e13ed44aaea23bdb", "patch": "@@ -1899,7 +1899,7 @@ static unsigned int initial_ix86_arch_features[X86_ARCH_LAST] = {\n };\n \n static const unsigned int x86_accumulate_outgoing_args\n-  = m_PPRO | m_P4_NOCONA | m_ATOM | m_SLM | m_CORE_ALL | m_AMD_MULTIPLE | m_GENERIC;\n+  = m_PPRO | m_P4_NOCONA | m_ATOM | m_SLM | m_AMD_MULTIPLE | m_GENERIC;\n \n static const unsigned int x86_arch_always_fancy_math_387\n   = m_PENT | m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_ATOM | m_SLM | m_AMD_MULTIPLE | m_GENERIC;"}, {"sha": "5f2e897394525f98d93148ccc73cf2a099194a5d", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ca6c49ff1069176f2fd34e3e13ed44aaea23bdb/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ca6c49ff1069176f2fd34e3e13ed44aaea23bdb/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=0ca6c49ff1069176f2fd34e3e13ed44aaea23bdb", "patch": "@@ -52,7 +52,7 @@ DEF_TUNE (X86_TUNE_MOVX, \"movx\",\n    and can happen in caller/callee saving sequences.  */\n DEF_TUNE (X86_TUNE_PARTIAL_REG_STALL, \"partial_reg_stall\", m_PPRO)\n DEF_TUNE (X86_TUNE_PARTIAL_FLAG_REG_STALL, \"partial_flag_reg_stall\",\n-          m_CORE_ALL | m_GENERIC)\n+          m_CORE2 | m_GENERIC)\n /* X86_TUNE_LCP_STALL: Avoid an expensive length-changing prefix stall\n  * on 16-bit immediate moves into memory on Core2 and Corei7.  */\n DEF_TUNE (X86_TUNE_LCP_STALL, \"lcp_stall\", m_CORE_ALL | m_GENERIC)\n@@ -125,8 +125,10 @@ DEF_TUNE (X86_TUNE_SSE_PACKED_SINGLE_INSN_OPTIMAL, \"sse_packed_single_insn_optim\n    maintain just lower part of scalar values in proper format leaving the\n    upper part undefined.  */\n DEF_TUNE (X86_TUNE_SSE_SPLIT_REGS, \"sse_split_regs\", m_ATHLON_K8)\n-DEF_TUNE (X86_TUNE_SSE_TYPELESS_STORES, \"sse_typeless_stores\", m_AMD_MULTIPLE)\n-DEF_TUNE (X86_TUNE_SSE_LOAD0_BY_PXOR, \"sse_load0_by_pxor\", m_PPRO | m_P4_NOCONA)\n+DEF_TUNE (X86_TUNE_SSE_TYPELESS_STORES, \"sse_typeless_stores\",\n+\t  m_AMD_MULTIPLE | m_CORE_ALL)\n+DEF_TUNE (X86_TUNE_SSE_LOAD0_BY_PXOR, \"sse_load0_by_pxor\",\n+\t  m_PPRO | m_P4_NOCONA | m_CORE_ALL)\n DEF_TUNE (X86_TUNE_MEMORY_MISMATCH_STALL, \"memory_mismatch_stall\",\n           m_P4_NOCONA | m_CORE_ALL | m_ATOM | m_SLM | m_AMD_MULTIPLE | m_GENERIC)\n DEF_TUNE (X86_TUNE_PROLOGUE_USING_MOVE, \"prologue_using_move\", \n@@ -144,7 +146,7 @@ DEF_TUNE (X86_TUNE_INTER_UNIT_CONVERSIONS, \"inter_unit_conversions\",\n /* X86_TUNE_FOUR_JUMP_LIMIT: Some CPU cores are not able to predict more\n    than 4 branch instructions in the 16 byte window.  */\n DEF_TUNE (X86_TUNE_FOUR_JUMP_LIMIT, \"four_jump_limit\",\n-          m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_ATOM | m_SLM| m_AMD_MULTIPLE \n+          m_PPRO | m_P4_NOCONA | m_ATOM | m_SLM | m_AMD_MULTIPLE \n           | m_GENERIC)\n DEF_TUNE (X86_TUNE_SCHEDULE, \"schedule\",\n           m_PENT | m_PPRO | m_CORE_ALL | m_ATOM | m_SLM | m_K6_GEODE \n@@ -154,13 +156,13 @@ DEF_TUNE (X86_TUNE_USE_BT, \"use_bt\",\n DEF_TUNE (X86_TUNE_USE_INCDEC, \"use_incdec\",\n           ~(m_P4_NOCONA | m_CORE_ALL | m_ATOM | m_SLM | m_GENERIC))\n DEF_TUNE (X86_TUNE_PAD_RETURNS, \"pad_returns\",\n-          m_CORE_ALL | m_AMD_MULTIPLE | m_GENERIC)\n+          m_AMD_MULTIPLE | m_GENERIC)\n DEF_TUNE (X86_TUNE_PAD_SHORT_FUNCTION, \"pad_short_function\", m_ATOM)\n DEF_TUNE (X86_TUNE_EXT_80387_CONSTANTS, \"ext_80387_constants\",\n           m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_ATOM | m_SLM | m_K6_GEODE\n           | m_ATHLON_K8 | m_GENERIC)\n DEF_TUNE (X86_TUNE_AVOID_VECTOR_DECODE, \"avoid_vector_decode\",\n-          m_CORE_ALL | m_K8 | m_GENERIC)\n+          m_K8 | m_GENERIC)\n /* X86_TUNE_PROMOTE_HIMODE_IMUL: Modern CPUs have same latency for HImode\n    and SImode multiply, but 386 and 486 do HImode multiply faster.  */\n DEF_TUNE (X86_TUNE_PROMOTE_HIMODE_IMUL, \"promote_himode_imul\",\n@@ -193,7 +195,7 @@ DEF_TUNE (X86_TUNE_USE_VECTOR_CONVERTS, \"use_vector_converts\", m_AMDFAM10)\n /* X86_TUNE_FUSE_CMP_AND_BRANCH: Fuse a compare or test instruction\n    with a subsequent conditional jump instruction into a single\n    compare-and-branch uop.  */\n-DEF_TUNE (X86_TUNE_FUSE_CMP_AND_BRANCH, \"fuse_cmp_and_branch\", m_BDVER)\n+DEF_TUNE (X86_TUNE_FUSE_CMP_AND_BRANCH, \"fuse_cmp_and_branch\", m_BDVER | m_CORE_ALL)\n /* X86_TUNE_OPT_AGU: Optimize for Address Generation Unit. This flag\n    will impact LEA instruction selection. */\n DEF_TUNE (X86_TUNE_OPT_AGU, \"opt_agu\", m_ATOM | m_SLM)"}]}