{"sha": "3193c4158643cc5739a73cb6df24b82844b2ae80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE5M2M0MTU4NjQzY2M1NzM5YTczY2I2ZGYyNGI4Mjg0NGIyYWU4MA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "2002-04-30T15:32:10Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2002-04-30T15:32:10Z"}, "message": "pa.md (7100lc, [...]): Slightly refine handling of double precision multiplies.\n\n        * pa.md (7100lc, 7200, 7300 scheduling): Slightly refine\n        handling of double precision multiplies.\n\n\n        * pa.md (7100lc, 7200, 7300 scheduling): Refine handling of\n        fpdiv and fpsqrt instructions.\n        (7200 & 7300 scheduling): Fix typo in handling of\n        store-load and store-store penalties.\n\nFrom-SVN: r52946", "tree": {"sha": "fb6e397ab882ed061fc893f47328755fbe4de000", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb6e397ab882ed061fc893f47328755fbe4de000"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3193c4158643cc5739a73cb6df24b82844b2ae80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3193c4158643cc5739a73cb6df24b82844b2ae80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3193c4158643cc5739a73cb6df24b82844b2ae80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3193c4158643cc5739a73cb6df24b82844b2ae80/comments", "author": null, "committer": null, "parents": [{"sha": "2799d721eca06facede4ef75fac9c486dc3f64ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2799d721eca06facede4ef75fac9c486dc3f64ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2799d721eca06facede4ef75fac9c486dc3f64ba"}], "stats": {"total": 57, "additions": 34, "deletions": 23}, "files": [{"sha": "02c0bddd253d1456293f26d76bc66f87181bd7ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3193c4158643cc5739a73cb6df24b82844b2ae80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3193c4158643cc5739a73cb6df24b82844b2ae80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3193c4158643cc5739a73cb6df24b82844b2ae80", "patch": "@@ -1,3 +1,13 @@\n+Tue Apr 30 09:31:59 2002  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* pa.md (7100lc, 7200, 7300 scheduling): Slightly refine\n+\thandling of double precision multiplies.\n+\n+\t* pa.md (7100lc, 7200, 7300 scheduling): Refine handling of\n+\tfpdiv and fpsqrt instructions.\n+\t(7200 & 7300 scheduling): Fix typo in handling of\n+\tstore-load and store-store penalties.\n+\n 2002-04-30  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n \n \t* doc/contrib.texi (Contributors): Use MIPS instead of Mips and"}, {"sha": "2a6dea316602c5764e546c51b4ca0ddd2953622b", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3193c4158643cc5739a73cb6df24b82844b2ae80/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3193c4158643cc5739a73cb6df24b82844b2ae80/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=3193c4158643cc5739a73cb6df24b82844b2ae80", "patch": "@@ -327,65 +327,66 @@\n \n (define_automaton \"pa7100lc\")\n (define_cpu_unit \"i0_7100lc, i1_7100lc, f_7100lc\" \"pa7100lc\")\n-(define_cpu_unit \"fpalu_7100lc,fpdivsqrt_7100lc,fpmul_7100lc\" \"pa7100lc\")\n+(define_cpu_unit \"fpalu_7100lc,fpmul_7100lc\" \"pa7100lc\")\n (define_cpu_unit \"mem_7100lc\" \"pa7100lc\")\n \n (define_insn_reservation \"Y0\" 2\n   (and (eq_attr \"type\" \"fpcc,fpalu\")\n        (eq_attr \"cpu\" \"7100LC,7200,7300\"))\n   \"f_7100lc,fpalu_7100lc\")\n \n+;; Double precision multiplies lock the entire CPU for one\n+;; cycle.  There is no way to avoid this lock and trying to\n+;; schedule around the lock is pointless and thus there is no\n+;; value in trying to model this lock.  Not modeling the lock\n+;; allows for a smaller DFA and may reduce register pressure.\n (define_insn_reservation \"Y1\" 2\n-  (and (eq_attr \"type\" \"fpmulsgl\")\n+  (and (eq_attr \"type\" \"fpmulsgl,fpmuldbl\")\n        (eq_attr \"cpu\" \"7100LC,7200,7300\"))\n   \"f_7100lc,fpmul_7100lc\")\n \n-(define_insn_reservation \"Y2\" 3\n-  (and (eq_attr \"type\" \"fpmuldbl\")\n-       (eq_attr \"cpu\" \"7100LC,7200,7300\"))\n-  \"f_7100lc,fpmul_7100lc,fpmul_7100lc\")\n-\n-(define_insn_reservation \"Y3\" 8\n-  (and (eq_attr \"type\" \"fpdivsgl,fpsqrtsgl\")\n-       (eq_attr \"cpu\" \"7100LC,7200,7300\"))\n-  \"f_7100lc+fpdivsqrt_7100lc,fpdivsqrt_7100lc*7\")\n-\n-(define_insn_reservation \"Y4\" 15\n-  (and (eq_attr \"type\" \"fpdivdbl,fpsqrtdbl\")\n+;; fp division and sqrt instructions lock the entire CPU for\n+;; 7 cycles (single precision) or 14 cycles (double precision).\n+;; There is no way to avoid this lock and trying to schedule\n+;; around the lock is pointless and thus there is no value in\n+;; trying to model this lock.  Not modeling the lock allows\n+;; for a smaller DFA and may reduce register pressure.\n+(define_insn_reservation \"Y2\" 1\n+  (and (eq_attr \"type\" \"fpdivsgl,fpsqrtsgl,fpdivdbl,fpsqrtdbl\")\n        (eq_attr \"cpu\" \"7100LC,7200,7300\"))\n-  \"f_7100lc+fpdivsqrt_7100lc,fpdivsqrt_7100lc*14\")\n+  \"f_7100lc\")\n \n-(define_insn_reservation \"Y5\" 2\n+(define_insn_reservation \"Y3\" 2\n   (and (eq_attr \"type\" \"load,fpload\")\n        (eq_attr \"cpu\" \"7100LC,7200,7300\"))\n   \"i1_7100lc+mem_7100lc\")\n \n-(define_insn_reservation \"Y6\" 2\n+(define_insn_reservation \"Y4\" 2\n   (and (eq_attr \"type\" \"store,fpstore\")\n        (eq_attr \"cpu\" \"7100LC\"))\n   \"i1_7100lc+mem_7100lc,mem_7100lc\")\n \n-(define_insn_reservation \"Y7\" 1\n+(define_insn_reservation \"Y5\" 1\n   (and (eq_attr \"type\" \"shift,nullshift\")\n        (eq_attr \"cpu\" \"7100LC,7200,7300\"))\n   \"i1_7100lc\")\n \n-(define_insn_reservation \"Y8\" 1\n+(define_insn_reservation \"Y6\" 1\n   (and (eq_attr \"type\" \"!fpcc,fpalu,fpmulsgl,fpmuldbl,fpdivsgl,fpsqrtsgl,fpdivdbl,fpsqrtdbl,load,fpload,store,fpstore,shift,nullshift\")\n        (eq_attr \"cpu\" \"7100LC,7200,7300\"))\n   \"(i0_7100lc|i1_7100lc)\")\n \n ;; The 7200 has a store-load penalty\n-(define_insn_reservation \"Y9\" 2\n+(define_insn_reservation \"Y7\" 2\n   (and (eq_attr \"type\" \"store,fpstore\")\n        (eq_attr \"cpu\" \"7200\"))\n-  \"i0_7100lc,mem_7100lc\")\n+  \"i1_7100lc,mem_7100lc\")\n \n ;; The 7300 has no penalty for store-store or store-load\n-(define_insn_reservation \"YA\" 2\n+(define_insn_reservation \"Y8\" 2\n   (and (eq_attr \"type\" \"store,fpstore\")\n        (eq_attr \"cpu\" \"7300\"))\n-  \"i0_7100lc\")\n+  \"i1_7100lc\")\n \n ;; Scheduling for the PA8000 is somewhat different than scheduling for a\n ;; traditional architecture."}]}