{"sha": "b38cd28c43ada6c2e1529b0f71cb598662d8f77c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM4Y2QyOGM0M2FkYTZjMmUxNTI5YjBmNzFjYjU5ODY2MmQ4Zjc3Yw==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-11-24T09:13:33Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-11-24T09:13:33Z"}, "message": "DirectByteBufferImpl.java, [...]: Reformatted.\n\n2004-11-24  Michael Koch  <konqueror@gmx.de>\n\n\t* java/nio/DirectByteBufferImpl.java,\n\tjava/nio/MappedByteBufferImpl.java:\n\tReformatted.\n\nFrom-SVN: r91141", "tree": {"sha": "3379fef356f01aeca783fe2c1d9da9707750a389", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3379fef356f01aeca783fe2c1d9da9707750a389"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b38cd28c43ada6c2e1529b0f71cb598662d8f77c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b38cd28c43ada6c2e1529b0f71cb598662d8f77c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b38cd28c43ada6c2e1529b0f71cb598662d8f77c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b38cd28c43ada6c2e1529b0f71cb598662d8f77c/comments", "author": null, "committer": null, "parents": [{"sha": "033797e23c3723dd1cc7911981e3747cc0dda6e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/033797e23c3723dd1cc7911981e3747cc0dda6e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/033797e23c3723dd1cc7911981e3747cc0dda6e3"}], "stats": {"total": 274, "additions": 140, "deletions": 134}, "files": [{"sha": "444673d6a33bf07fd70967a544a340741ec5c790", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b38cd28c43ada6c2e1529b0f71cb598662d8f77c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b38cd28c43ada6c2e1529b0f71cb598662d8f77c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b38cd28c43ada6c2e1529b0f71cb598662d8f77c", "patch": "@@ -1,3 +1,9 @@\n+2004-11-24  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/nio/DirectByteBufferImpl.java,\n+\tjava/nio/MappedByteBufferImpl.java:\n+\tReformatted.\n+\n 2004-11-23  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* testsuite/lib/libjava.exp,"}, {"sha": "6e4fa811ce3a49b2d26685f5a2708c7043761eb1", "filename": "libjava/java/nio/DirectByteBufferImpl.java", "status": "modified", "additions": 70, "deletions": 70, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b38cd28c43ada6c2e1529b0f71cb598662d8f77c/libjava%2Fjava%2Fnio%2FDirectByteBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b38cd28c43ada6c2e1529b0f71cb598662d8f77c/libjava%2Fjava%2Fnio%2FDirectByteBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FDirectByteBufferImpl.java?ref=b38cd28c43ada6c2e1529b0f71cb598662d8f77c", "patch": "@@ -58,16 +58,16 @@ final class DirectByteBufferImpl extends ByteBuffer\n   RawData address;\n   private boolean readOnly;\n \n-  public DirectByteBufferImpl (RawData address, long len)\n+  public DirectByteBufferImpl(RawData address, long len)\n   {\n-    this (null, address, (int) len, (int) len, 0, false);\n+    this(null, address, (int) len, (int) len, 0, false);\n   }\n   \n-  public DirectByteBufferImpl (Object owner, RawData address,\n-\t\t\t       int capacity, int limit,\n-\t\t\t       int position, boolean readOnly)\n+  public DirectByteBufferImpl(Object owner, RawData address,\n+\t\t\t      int capacity, int limit,\n+\t\t\t      int position, boolean readOnly)\n   {\n-    super (capacity, limit, position, -1);\n+    super(capacity, limit, position, -1);\n     this.address = address;\n     this.readOnly = readOnly;\n     this.owner = owner;\n@@ -84,25 +84,25 @@ public static ByteBuffer allocate(int capacity)\n   private static native RawData allocateImpl (int capacity);\n   private static native void freeImpl (RawData address);\n   \n-  protected void finalize () throws Throwable\n+  protected void finalize() throws Throwable\n   {\n     freeImpl (address);\n   }\n   \n   static native byte getImpl (RawData address, int index);\n   static native void putImpl (RawData address, int index, byte value);\n \n-  public byte get ()\n+  public byte get()\n   {\n     checkForUnderflow();\n \n     int pos = position();\n     byte result = getImpl (address, pos);\n-    position (pos + 1);\n+    position(pos + 1);\n     return result;\n   }\n \n-  public byte get (int index)\n+  public byte get(int index)\n   {\n     checkIndex(index);\n \n@@ -112,7 +112,7 @@ public byte get (int index)\n   static native void getImpl (RawData address, int index,\n \t\t\t      byte[] dst, int offset, int length);\n \n-  public ByteBuffer get (byte[] dst, int offset, int length)\n+  public ByteBuffer get(byte[] dst, int offset, int length)\n   {\n     checkArraySize(dst.length, offset, length);\n     checkForUnderflow(length);\n@@ -124,18 +124,18 @@ public ByteBuffer get (byte[] dst, int offset, int length)\n     return this;\n   }\n \n-  public ByteBuffer put (byte value)\n+  public ByteBuffer put(byte value)\n   {\n     checkIfReadOnly();\n     checkForOverflow();\n \n     int pos = position();\n     putImpl (address, pos, value);\n-    position (pos + 1);\n+    position(pos + 1);\n     return this;\n   }\n   \n-  public ByteBuffer put (int index, byte value)\n+  public ByteBuffer put(int index, byte value)\n   {\n     checkIfReadOnly();\n     checkIndex(index);\n@@ -151,7 +151,7 @@ void shiftDown(int dst_offset, int src_offset, int count)\n     shiftDown(address, dst_offset, src_offset, count);\n   }\n   \n-  public ByteBuffer compact ()\n+  public ByteBuffer compact()\n   {\n     int pos = position();\n     if (pos > 0)\n@@ -166,23 +166,23 @@ public ByteBuffer compact ()\n \n   public static native RawData adjustAddress(RawData address, int offset);\n \n-  public ByteBuffer slice ()\n+  public ByteBuffer slice()\n   {\n     int rem = remaining();\n     return new DirectByteBufferImpl (owner,\n \t\t\t\t     adjustAddress(address, position()),\n \t\t\t\t     rem, rem, 0, isReadOnly ());\n   }\n \n-  private ByteBuffer duplicate (boolean readOnly)\n+  private ByteBuffer duplicate(boolean readOnly)\n   {\n     int pos = position();\n     reset();\n     int mark = position();\n     position(pos);\n     DirectByteBufferImpl result\n-      = new DirectByteBufferImpl (owner, address, capacity (), limit (),\n-\t\t\t\t  pos, readOnly);\n+      = new DirectByteBufferImpl(owner, address, capacity(), limit(),\n+\t\t\t\t pos, readOnly);\n     if (mark != pos)\n       {\n \tresult.position(mark);\n@@ -192,185 +192,185 @@ private ByteBuffer duplicate (boolean readOnly)\n     return result;\n   }\n \n-  public ByteBuffer duplicate ()\n+  public ByteBuffer duplicate()\n   {\n     return duplicate(isReadOnly());\n   }\n \n-  public ByteBuffer asReadOnlyBuffer ()\n+  public ByteBuffer asReadOnlyBuffer()\n   {\n     return duplicate(true);\n   }\n \n-  public boolean isReadOnly ()\n+  public boolean isReadOnly()\n   {\n     return readOnly;\n   }\n \n-  public boolean isDirect ()\n+  public boolean isDirect()\n   {\n     return true;\n   }\n \n-  public CharBuffer asCharBuffer ()\n+  public CharBuffer asCharBuffer()\n   {\n-    return new CharViewBufferImpl (this, remaining() >> 1);\n+    return new CharViewBufferImpl(this, remaining() >> 1);\n   }\n \n-  public ShortBuffer asShortBuffer ()\n+  public ShortBuffer asShortBuffer()\n   {\n-    return new ShortViewBufferImpl (this, remaining() >> 1);\n+    return new ShortViewBufferImpl(this, remaining() >> 1);\n   }\n \n-  public IntBuffer asIntBuffer ()\n+  public IntBuffer asIntBuffer()\n   {\n-    return new IntViewBufferImpl (this, remaining() >> 2);\n+    return new IntViewBufferImpl(this, remaining() >> 2);\n   }\n \n-  public LongBuffer asLongBuffer ()\n+  public LongBuffer asLongBuffer()\n   {\n-    return new LongViewBufferImpl (this, remaining() >> 3);\n+    return new LongViewBufferImpl(this, remaining() >> 3);\n   }\n \n-  public FloatBuffer asFloatBuffer ()\n+  public FloatBuffer asFloatBuffer()\n   {\n-    return new FloatViewBufferImpl (this, remaining() >> 2);\n+    return new FloatViewBufferImpl(this, remaining() >> 2);\n   }\n \n-  public DoubleBuffer asDoubleBuffer ()\n+  public DoubleBuffer asDoubleBuffer()\n   {\n-    return new DoubleViewBufferImpl (this, remaining() >> 3);\n+    return new DoubleViewBufferImpl(this, remaining() >> 3);\n   }\n \n-  public char getChar ()\n+  public char getChar()\n   {\n     return ByteBufferHelper.getChar(this, order());\n   }\n   \n-  public ByteBuffer putChar (char value)\n+  public ByteBuffer putChar(char value)\n   {\n     ByteBufferHelper.putChar(this, value, order());\n     return this;\n   }\n   \n-  public char getChar (int index)\n+  public char getChar(int index)\n   {\n     return ByteBufferHelper.getChar(this, index, order());\n   }\n   \n-  public ByteBuffer putChar (int index, char value)\n+  public ByteBuffer putChar(int index, char value)\n   {\n     ByteBufferHelper.putChar(this, index, value, order());\n     return this;\n   }\n \n-  public short getShort ()\n+  public short getShort()\n   {\n     return ByteBufferHelper.getShort(this, order());\n   }\n   \n-  public ByteBuffer putShort (short value)\n+  public ByteBuffer putShort(short value)\n   {\n     ByteBufferHelper.putShort(this, value, order());\n     return this;\n   }\n   \n-  public short getShort (int index)\n+  public short getShort(int index)\n   {\n     return ByteBufferHelper.getShort(this, index, order());\n   }\n   \n-  public ByteBuffer putShort (int index, short value)\n+  public ByteBuffer putShort(int index, short value)\n   {\n     ByteBufferHelper.putShort(this, index, value, order());\n     return this;\n   }\n \n-  public int getInt ()\n+  public int getInt()\n   {\n     return ByteBufferHelper.getInt(this, order());\n   }\n   \n-  public ByteBuffer putInt (int value)\n+  public ByteBuffer putInt(int value)\n   {\n     ByteBufferHelper.putInt(this, value, order());\n     return this;\n   }\n   \n-  public int getInt (int index)\n+  public int getInt(int index)\n   {\n     return ByteBufferHelper.getInt(this, index, order());\n   }\n   \n-  public ByteBuffer putInt (int index, int value)\n+  public ByteBuffer putInt(int index, int value)\n   {\n     ByteBufferHelper.putInt(this, index, value, order());\n     return this;\n   }\n \n-  public long getLong ()\n+  public long getLong()\n   {\n     return ByteBufferHelper.getLong(this, order());\n   }\n   \n-  public ByteBuffer putLong (long value)\n+  public ByteBuffer putLong(long value)\n   {\n-    ByteBufferHelper.putLong (this, value, order());\n+    ByteBufferHelper.putLong(this, value, order());\n     return this;\n   }\n   \n-  public long getLong (int index)\n+  public long getLong(int index)\n   {\n-    return ByteBufferHelper.getLong (this, index, order());\n+    return ByteBufferHelper.getLong(this, index, order());\n   }\n   \n-  public ByteBuffer putLong (int index, long value)\n+  public ByteBuffer putLong(int index, long value)\n   {\n-    ByteBufferHelper.putLong (this, index, value, order());\n+    ByteBufferHelper.putLong(this, index, value, order());\n     return this;\n   }\n \n-  public float getFloat ()\n+  public float getFloat()\n   {\n-    return ByteBufferHelper.getFloat (this, order());\n+    return ByteBufferHelper.getFloat(this, order());\n   }\n   \n-  public ByteBuffer putFloat (float value)\n+  public ByteBuffer putFloat(float value)\n   {\n-    ByteBufferHelper.putFloat (this, value, order());\n+    ByteBufferHelper.putFloat(this, value, order());\n     return this;\n   }\n   \n-  public float getFloat (int index)\n+  public float getFloat(int index)\n   {\n-    return ByteBufferHelper.getFloat (this, index, order());\n+    return ByteBufferHelper.getFloat(this, index, order());\n   }\n \n-  public ByteBuffer putFloat (int index, float value)\n+  public ByteBuffer putFloat(int index, float value)\n   {\n-    ByteBufferHelper.putFloat (this, index, value, order());\n+    ByteBufferHelper.putFloat(this, index, value, order());\n     return this;\n   }\n \n-  public double getDouble ()\n+  public double getDouble()\n   {\n-    return ByteBufferHelper.getDouble (this, order());\n+    return ByteBufferHelper.getDouble(this, order());\n   }\n \n-  public ByteBuffer putDouble (double value)\n+  public ByteBuffer putDouble(double value)\n   {\n-    ByteBufferHelper.putDouble (this, value, order());\n+    ByteBufferHelper.putDouble(this, value, order());\n     return this;\n   }\n   \n-  public double getDouble (int index)\n+  public double getDouble(int index)\n   {\n-    return ByteBufferHelper.getDouble (this, index, order());\n+    return ByteBufferHelper.getDouble(this, index, order());\n   }\n   \n-  public ByteBuffer putDouble (int index, double value)\n+  public ByteBuffer putDouble(int index, double value)\n   {\n-    ByteBufferHelper.putDouble (this, index, value, order());\n+    ByteBufferHelper.putDouble(this, index, value, order());\n     return this;\n   }\n }"}, {"sha": "8f413220a177e315fd8721239f1d0a6f8e8a708c", "filename": "libjava/java/nio/MappedByteBufferImpl.java", "status": "modified", "additions": 64, "deletions": 64, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b38cd28c43ada6c2e1529b0f71cb598662d8f77c/libjava%2Fjava%2Fnio%2FMappedByteBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b38cd28c43ada6c2e1529b0f71cb598662d8f77c/libjava%2Fjava%2Fnio%2FMappedByteBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FMappedByteBufferImpl.java?ref=b38cd28c43ada6c2e1529b0f71cb598662d8f77c", "patch": "@@ -54,20 +54,20 @@ final class MappedByteBufferImpl extends MappedByteBuffer\n    * Win32 uses it for the pointer returned by CreateFileMapping. */\n   public long implLen;\n   \n-  public MappedByteBufferImpl (RawData address, int size, boolean readOnly)\n+  public MappedByteBufferImpl(RawData address, int size, boolean readOnly)\n     throws IOException\n   {\n     super(size, size, 0, -1);\n     this.address = address;\n     this.readOnly = readOnly;\n   }\n \n-  public boolean isReadOnly ()\n+  public boolean isReadOnly()\n   {\n     return readOnly;\n   }\n   \n-  public byte get ()\n+  public byte get()\n   {\n     checkForUnderflow();\n \n@@ -77,7 +77,7 @@ public byte get ()\n     return result;\n   }\n \n-  public ByteBuffer put (byte value)\n+  public ByteBuffer put(byte value)\n   {\n     checkIfReadOnly();\n     checkForOverflow();\n@@ -88,14 +88,14 @@ public ByteBuffer put (byte value)\n     return this;\n   }\n \n-  public byte get (int index)\n+  public byte get(int index)\n   {\n     checkIndex(index);\n \n     return DirectByteBufferImpl.getImpl(address, index);\n   }\n \n-  public ByteBuffer get (byte[] dst, int offset, int length)\n+  public ByteBuffer get(byte[] dst, int offset, int length)\n   {\n     checkArraySize(dst.length, offset, length);\n     checkForUnderflow(length);\n@@ -107,7 +107,7 @@ public ByteBuffer get (byte[] dst, int offset, int length)\n     return this;\n   }\n \n-  public ByteBuffer put (int index, byte value)\n+  public ByteBuffer put(int index, byte value)\n   {\n     checkIfReadOnly();\n     checkIndex(index);\n@@ -116,7 +116,7 @@ public ByteBuffer put (int index, byte value)\n     return this;\n   }\n \n-  public ByteBuffer compact ()\n+  public ByteBuffer compact()\n   {\n     int pos = position();\n     if (pos > 0)\n@@ -130,12 +130,12 @@ public ByteBuffer compact ()\n     return this;\n   }\n \n-  public boolean isDirect ()\n+  public boolean isDirect()\n   {\n     return true;\n   }\n \n-  public ByteBuffer slice ()\n+  public ByteBuffer slice()\n   {\n     int rem = remaining();\n     return new DirectByteBufferImpl (this,\n@@ -144,15 +144,15 @@ public ByteBuffer slice ()\n \t\t\t\t     rem, rem, 0, isReadOnly ());\n   }\n \n-  private ByteBuffer duplicate (boolean readOnly)\n+  private ByteBuffer duplicate(boolean readOnly)\n   {\n     int pos = position();\n     reset();\n     int mark = position();\n     position(pos);\n     DirectByteBufferImpl result\n-      = new DirectByteBufferImpl (this, address, capacity (), limit (),\n-\t\t\t\t  pos, readOnly);\n+      = new DirectByteBufferImpl(this, address, capacity(), limit(),\n+\t\t\t\t pos, readOnly);\n     if (mark != pos)\n       {\n \tresult.position(mark);\n@@ -162,182 +162,182 @@ private ByteBuffer duplicate (boolean readOnly)\n     return result;\n   }\n \n-  public ByteBuffer duplicate ()\n+  public ByteBuffer duplicate()\n   {\n     return duplicate(isReadOnly());\n   }\n \n-  public ByteBuffer asReadOnlyBuffer ()\n+  public ByteBuffer asReadOnlyBuffer()\n   {\n     return duplicate(true);\n   }\n \n-  public CharBuffer asCharBuffer ()\n+  public CharBuffer asCharBuffer()\n   {\n-    return new CharViewBufferImpl (this, remaining() >> 1);\n+    return new CharViewBufferImpl(this, remaining() >> 1);\n   }\n \n-  public ShortBuffer asShortBuffer ()\n+  public ShortBuffer asShortBuffer()\n   {\n-    return new ShortViewBufferImpl (this, remaining() >> 1);\n+    return new ShortViewBufferImpl(this, remaining() >> 1);\n   }\n \n-  public IntBuffer asIntBuffer ()\n+  public IntBuffer asIntBuffer()\n   {\n-    return new IntViewBufferImpl (this, remaining() >> 2);\n+    return new IntViewBufferImpl(this, remaining() >> 2);\n   }\n \n-  public LongBuffer asLongBuffer ()\n+  public LongBuffer asLongBuffer()\n   {\n-    return new LongViewBufferImpl (this, remaining() >> 3);\n+    return new LongViewBufferImpl(this, remaining() >> 3);\n   }\n \n-  public FloatBuffer asFloatBuffer ()\n+  public FloatBuffer asFloatBuffer()\n   {\n-    return new FloatViewBufferImpl (this, remaining() >> 2);\n+    return new FloatViewBufferImpl(this, remaining() >> 2);\n   }\n \n-  public DoubleBuffer asDoubleBuffer ()\n+  public DoubleBuffer asDoubleBuffer()\n   {\n-    return new DoubleViewBufferImpl (this, remaining() >> 3);\n+    return new DoubleViewBufferImpl(this, remaining() >> 3);\n   }\n \n-  public char getChar ()\n+  public char getChar()\n   {\n     return ByteBufferHelper.getChar(this, order());\n   }\n   \n-  public ByteBuffer putChar (char value)\n+  public ByteBuffer putChar(char value)\n   {\n     ByteBufferHelper.putChar(this, value, order());\n     return this;\n   }\n   \n-  public char getChar (int index)\n+  public char getChar(int index)\n   {\n     return ByteBufferHelper.getChar(this, index, order());\n   }\n   \n-  public ByteBuffer putChar (int index, char value)\n+  public ByteBuffer putChar(int index, char value)\n   {\n     ByteBufferHelper.putChar(this, index, value, order());\n     return this;\n   }\n \n-  public short getShort ()\n+  public short getShort()\n   {\n     return ByteBufferHelper.getShort(this, order());\n   }\n   \n-  public ByteBuffer putShort (short value)\n+  public ByteBuffer putShort(short value)\n   {\n     ByteBufferHelper.putShort(this, value, order());\n     return this;\n   }\n   \n-  public short getShort (int index)\n+  public short getShort(int index)\n   {\n     return ByteBufferHelper.getShort(this, index, order());\n   }\n   \n-  public ByteBuffer putShort (int index, short value)\n+  public ByteBuffer putShort(int index, short value)\n   {\n     ByteBufferHelper.putShort(this, index, value, order());\n     return this;\n   }\n \n-  public int getInt ()\n+  public int getInt()\n   {\n     return ByteBufferHelper.getInt(this, order());\n   }\n   \n-  public ByteBuffer putInt (int value)\n+  public ByteBuffer putInt(int value)\n   {\n     ByteBufferHelper.putInt(this, value, order());\n     return this;\n   }\n   \n-  public int getInt (int index)\n+  public int getInt(int index)\n   {\n     return ByteBufferHelper.getInt(this, index, order());\n   }\n   \n-  public ByteBuffer putInt (int index, int value)\n+  public ByteBuffer putInt(int index, int value)\n   {\n     ByteBufferHelper.putInt(this, index, value, order());\n     return this;\n   }\n \n-  public long getLong ()\n+  public long getLong()\n   {\n     return ByteBufferHelper.getLong(this, order());\n   }\n   \n-  public ByteBuffer putLong (long value)\n+  public ByteBuffer putLong(long value)\n   {\n-    ByteBufferHelper.putLong (this, value, order());\n+    ByteBufferHelper.putLong(this, value, order());\n     return this;\n   }\n   \n-  public long getLong (int index)\n+  public long getLong(int index)\n   {\n-    return ByteBufferHelper.getLong (this, index, order());\n+    return ByteBufferHelper.getLong(this, index, order());\n   }\n   \n-  public ByteBuffer putLong (int index, long value)\n+  public ByteBuffer putLong(int index, long value)\n   {\n-    ByteBufferHelper.putLong (this, index, value, order());\n+    ByteBufferHelper.putLong(this, index, value, order());\n     return this;\n   }\n \n-  public float getFloat ()\n+  public float getFloat()\n   {\n-    return ByteBufferHelper.getFloat (this, order());\n+    return ByteBufferHelper.getFloat(this, order());\n   }\n   \n-  public ByteBuffer putFloat (float value)\n+  public ByteBuffer putFloat(float value)\n   {\n-    ByteBufferHelper.putFloat (this, value, order());\n+    ByteBufferHelper.putFloat(this, value, order());\n     return this;\n   }\n   \n-  public float getFloat (int index)\n+  public float getFloat(int index)\n   {\n-    return ByteBufferHelper.getFloat (this, index, order());\n+    return ByteBufferHelper.getFloat(this, index, order());\n   }\n \n-  public ByteBuffer putFloat (int index, float value)\n+  public ByteBuffer putFloat(int index, float value)\n   {\n-    ByteBufferHelper.putFloat (this, index, value, order());\n+    ByteBufferHelper.putFloat(this, index, value, order());\n     return this;\n   }\n \n-  public double getDouble ()\n+  public double getDouble()\n   {\n-    return ByteBufferHelper.getDouble (this, order());\n+    return ByteBufferHelper.getDouble(this, order());\n   }\n \n-  public ByteBuffer putDouble (double value)\n+  public ByteBuffer putDouble(double value)\n   {\n-    ByteBufferHelper.putDouble (this, value, order());\n+    ByteBufferHelper.putDouble(this, value, order());\n     return this;\n   }\n   \n-  public double getDouble (int index)\n+  public double getDouble(int index)\n   {\n-    return ByteBufferHelper.getDouble (this, index, order());\n+    return ByteBufferHelper.getDouble(this, index, order());\n   }\n   \n-  public ByteBuffer putDouble (int index, double value)\n+  public ByteBuffer putDouble(int index, double value)\n   {\n-    ByteBufferHelper.putDouble (this, index, value, order());\n+    ByteBufferHelper.putDouble(this, index, value, order());\n     return this;\n   }\n \n   // NOTE: In libgcj these methods are implemented in natFileChannelXxx.cc,\n   // because they're small, and to put them next to FileChannelImpl::mapImpl.\n-  native void unmapImpl ();\n-  native boolean isLoadedImpl ();\n+  native void unmapImpl();\n+  native boolean isLoadedImpl();\n     // FIXME: Try to load all pages into memory.\n   native void loadImpl();\n "}]}