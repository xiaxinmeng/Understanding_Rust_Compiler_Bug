{"sha": "6f50a76adaacd20334d24f605840af566c448cf3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY1MGE3NmFkYWFjZDIwMzM0ZDI0ZjYwNTg0MGFmNTY2YzQ0OGNmMw==", "commit": {"author": {"name": "Brooks Moses", "email": "brooks.moses@codesourcery.com", "date": "2007-03-14T02:43:27Z"}, "committer": {"name": "Brooks Moses", "email": "brooks@gcc.gnu.org", "date": "2007-03-14T02:43:27Z"}, "message": "re PR fortran/28068 (Non-standard intrinsics should be documented)\n\nPR fortran/28068\n* intrinsic.texi: General whitespace cleanup, remove\ncomment about missing intrinsics.\n(menu): Add lines for new entries listed below.\n(ACOSH): Mention specific function DACOSH, correct\ndescription phrasing.\n(ASINH): Mention specific function DASINH, correct\ndescription phrasing.\n(ATANH): Mention specific function DATANH, correct\ndescription phrasing.\n(COS): Add index entry for CCOS.\n(CPU_TIME): Correct \"REAL\" to \"REAL(*)\".\n(EXP): Add index entry for CEXP.\n(INT): Correct argument name to \"A\".\n(INT2): New entry.\n(INT8): New entry.\n(LONG): New entry.\n(MAX): Add index entries for specific variants.\n(MCLOCK): New entry.\n(MCLOCK8): New entry.\n(SECNDS): Adjust to a more standard form.\n(SECOND): New entry.\n(TIME): Add cross-reference to MCLOCK.\n(TIME8): Add cross-reference to MCLOCK8.\n\nFrom-SVN: r122902", "tree": {"sha": "3451ea3a87811b06abf373a7773c393635d98c19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3451ea3a87811b06abf373a7773c393635d98c19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f50a76adaacd20334d24f605840af566c448cf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f50a76adaacd20334d24f605840af566c448cf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f50a76adaacd20334d24f605840af566c448cf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f50a76adaacd20334d24f605840af566c448cf3/comments", "author": null, "committer": null, "parents": [{"sha": "403d4851227351c58de907237e6266b5e9956778", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/403d4851227351c58de907237e6266b5e9956778", "html_url": "https://github.com/Rust-GCC/gccrs/commit/403d4851227351c58de907237e6266b5e9956778"}], "stats": {"total": 382, "additions": 343, "deletions": 39}, "files": [{"sha": "c20066ef73b0b6c28e6ff2e6ef23e70731935154", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f50a76adaacd20334d24f605840af566c448cf3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f50a76adaacd20334d24f605840af566c448cf3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6f50a76adaacd20334d24f605840af566c448cf3", "patch": "@@ -1,3 +1,30 @@\n+2007-03-13  Brooks Moses  <brooks.moses@codesourcery.com>\n+\n+\tPR fortran/28068\n+\t* intrinsic.texi: General whitespace cleanup, remove\n+\tcomment about missing intrinsics.\n+\t(menu): Add lines for new entries listed below.\n+\t(ACOSH): Mention specific function DACOSH, correct\n+\tdescription phrasing.\n+\t(ASINH): Mention specific function DASINH, correct\n+\tdescription phrasing.\n+\t(ATANH): Mention specific function DATANH, correct\n+\tdescription phrasing.\n+\t(COS): Add index entry for CCOS.\n+\t(CPU_TIME): Correct \"REAL\" to \"REAL(*)\".\n+\t(EXP): Add index entry for CEXP.\n+\t(INT): Correct argument name to \"A\".\n+\t(INT2): New entry.\n+\t(INT8): New entry.\n+\t(LONG): New entry.\n+\t(MAX): Add index entries for specific variants.\n+\t(MCLOCK): New entry.\n+\t(MCLOCK8): New entry.\n+\t(SECNDS): Adjust to a more standard form.\n+\t(SECOND): New entry.\n+\t(TIME): Add cross-reference to MCLOCK.\n+\t(TIME8): Add cross-reference to MCLOCK8.\n+\n 2007-03-11  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/30883"}, {"sha": "4c8dd222c8fc8fc2a9c51f7ba62adf5af671285b", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 316, "deletions": 39, "changes": 355, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f50a76adaacd20334d24f605840af566c448cf3/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f50a76adaacd20334d24f605840af566c448cf3/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=6f50a76adaacd20334d24f605840af566c448cf3", "patch": "@@ -38,10 +38,6 @@ Some basic guidelines for editing this document:\n @chapter Intrinsic Procedures\n @cindex intrinsic procedures\n \n-@comment Missing intrinsics (double check with #19292)\n-@comment  - MClock\n-@comment  - Short\n-\n @menu\n * Introduction:         Introduction to Intrinsics\n * @code{ABORT}:         ABORT,     Abort the program     \n@@ -145,6 +141,8 @@ Some basic guidelines for editing this document:\n * @code{IERRNO}:        IERRNO,    Function to get the last system error number\n * @code{INDEX}:         INDEX,     Position of a substring within a string\n * @code{INT}:           INT,       Convert to integer type\n+* @code{INT2}:          INT2,      Convert to 16-bit integer type\n+* @code{INT8}:          INT8,      Convert to 64-bit integer type\n * @code{IOR}:           IOR,       Bitwise logical or\n * @code{IRAND}:         IRAND,     Integer pseudo-random number\n * @code{ISATTY}:        ISATTY,    Whether a unit is a terminal device\n@@ -166,6 +164,7 @@ Some basic guidelines for editing this document:\n * @code{LOG}:           LOG,       Logarithm function\n * @code{LOG10}:         LOG10,     Base 10 logarithm function \n * @code{LOGICAL}:       LOGICAL,   Convert to logical type\n+* @code{LONG}:          LONG,      Convert to integer type\n * @code{LSHIFT}:        LSHIFT,    Left shift bits\n * @code{LSTAT}:         LSTAT,     Get file status\n * @code{LTIME}:         LTIME,     Convert time to local time info\n@@ -175,6 +174,8 @@ Some basic guidelines for editing this document:\n * @code{MAXEXPONENT}:   MAXEXPONENT, Maximum exponent of a real kind\n * @code{MAXLOC}:        MAXLOC,    Location of the maximum value within an array\n * @code{MAXVAL}:        MAXVAL,    Maximum value of an array\n+* @code{MCLOCK}:        MCLOCK,    Time function\n+* @code{MCLOCK8}:       MCLOCK8,   Time function (64-bit)\n * @code{MERGE}:         MERGE,     Merge arrays\n * @code{MIN}:           MIN,       Minimum value of an argument list\n * @code{MINEXPONENT}:   MINEXPONENT, Minimum exponent of a real kind\n@@ -210,8 +211,7 @@ Some basic guidelines for editing this document:\n * @code{SCALE}:         SCALE,     Scale a real value\n * @code{SCAN}:          SCAN,      Scan a string for the presence of a set of characters\n * @code{SECNDS}:        SECNDS,    Time function\n-@comment * @code{SECOND}:        SECOND,    (?)\n-@comment * @code{SECONDS}:       SECONDS,   (?)\n+* @code{SECOND}:        SECOND,    CPU time function\n * @code{SELECTED_INT_KIND}: SELECTED_INT_KIND,  Choose integer kind\n * @code{SELECTED_REAL_KIND}: SELECTED_REAL_KIND,  Choose real kind\n * @code{SET_EXPONENT}:  SET_EXPONENT, Set the exponent of the model\n@@ -327,6 +327,7 @@ end program test_abort\n @end table\n \n \n+\n @node ABS\n @section @code{ABS} --- Absolute value  \n @cindex @code{ABS} intrinsic\n@@ -385,6 +386,7 @@ end program test_abs\n @end table\n \n \n+\n @node ACCESS\n @section @code{ACCESS} --- Checks file access modes\n @cindex @code{ACCESS} \n@@ -442,6 +444,7 @@ end program access_test\n @end table\n \n \n+\n @node ACHAR\n @section @code{ACHAR} --- Character in @acronym{ASCII} collating sequence \n @cindex @code{ACHAR} intrinsic\n@@ -539,15 +542,18 @@ Inverse function: @ref{COS}\n @end table\n \n \n+\n @node ACOSH\n @section @code{ACOSH} --- Hyperbolic arccosine function\n @cindex @code{ACOSH} intrinsic\n+@cindex @code{DACOSH} intrinsic\n @cindex hyperbolic arccosine\n @cindex hyperbolic cosine (inverse)\n \n @table @asis\n @item @emph{Description}:\n-@code{ACOSH(X)} computes the area hyperbolic cosine of @var{X} (inverse of @code{COSH(X)}).\n+@code{ACOSH(X)} computes the hyperbolic arccosine of @var{X} (inverse of\n+@code{COSH(X)}).\n \n @item @emph{Standard}:\n GNU extension\n@@ -576,6 +582,12 @@ PROGRAM test_acosh\n END PROGRAM\n @end smallexample\n \n+@item @emph{Specific names}:\n+@multitable @columnfractions .20 .20 .20 .25\n+@item Name             @tab Argument          @tab Return type       @tab Standard\n+@item @code{DACOSH(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab GNU extension\n+@end multitable\n+\n @item @emph{See also}:\n Inverse function: @ref{COSH}\n @end table\n@@ -931,6 +943,7 @@ end program test_allocated\n @end table\n \n \n+\n @node AND\n @section @code{AND} --- Bitwise logical AND\n @cindex @code{AND} intrinsic\n@@ -1152,15 +1165,17 @@ Inverse function: @ref{SIN}\n @end table\n \n \n+\n @node ASINH\n @section @code{ASINH} --- Hyperbolic arcsine function\n @cindex @code{ASINH} intrinsic\n+@cindex @code{DASINH} intrinsic\n @cindex hyperbolic arcsine\n @cindex hyperbolic sine (inverse)\n \n @table @asis\n @item @emph{Description}:\n-@code{ASINH(X)} computes the area hyperbolic sine of @var{X} (inverse of @code{SINH(X)}).\n+@code{ASINH(X)} computes the hyperbolic arcsine of @var{X} (inverse of @code{SINH(X)}).\n \n @item @emph{Standard}:\n GNU extension\n@@ -1188,6 +1203,12 @@ PROGRAM test_asinh\n END PROGRAM\n @end smallexample\n \n+@item @emph{Specific names}:\n+@multitable @columnfractions .20 .20 .20 .25\n+@item Name             @tab Argument          @tab Return type       @tab Standard\n+@item @code{DASINH(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab GNU extension.\n+@end multitable\n+\n @item @emph{See also}:\n Inverse function: @ref{SINH}\n @end table\n@@ -1326,7 +1347,8 @@ Inverse function: @ref{TAN}\n \n @table @asis\n @item @emph{Description}:\n-@code{ATAN2(Y,X)} computes the arctangent of the complex number @math{X + i Y}.\n+@code{ATAN2(Y,X)} computes the arctangent of the complex number\n+@math{X + i Y}.\n \n @item @emph{Standard}:\n F77 and later\n@@ -1373,12 +1395,14 @@ end program test_atan2\n @node ATANH\n @section @code{ATANH} --- Hyperbolic arctangent function\n @cindex @code{ASINH} intrinsic\n+@cindex @code{DASINH} intrinsic\n @cindex hyperbolic arctangent\n @cindex hyperbolic tangent (inverse)\n \n @table @asis\n @item @emph{Description}:\n-@code{ATANH(X)} computes the area hyperbolic sine of @var{X} (inverse of @code{TANH(X)}).\n+@code{ATANH(X)} computes the hyperbolic arctangent of @var{X} (inverse\n+of @code{TANH(X)}).\n \n @item @emph{Standard}:\n GNU extension\n@@ -1407,13 +1431,18 @@ PROGRAM test_atanh\n END PROGRAM\n @end smallexample\n \n+@item @emph{Specific names}:\n+@multitable @columnfractions .20 .20 .20 .25\n+@item Name             @tab Argument          @tab Return type       @tab Standard\n+@item @code{DATANH(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab GNU extension\n+@end multitable\n+\n @item @emph{See also}:\n Inverse function: @ref{TANH}\n @end table\n \n \n \n-\n @node BESJ0\n @section @code{BESJ0} --- Bessel function of the first kind of order 0\n @cindex @code{BESJ0} intrinsic\n@@ -1870,6 +1899,7 @@ and formatted string representations.\n @end table\n \n \n+\n @node CHDIR\n @section @code{CHDIR} --- Change working directory\n @cindex @code{CHDIR} intrinsic\n@@ -1981,6 +2011,7 @@ end program chmod_test\n @end table\n \n \n+\n @node CMPLX\n @section @code{CMPLX} --- Complex conversion function\n @cindex @code{CMPLX} intrinsic\n@@ -2071,6 +2102,8 @@ end program test_command_argument_count\n @ref{GET_COMMAND}, @ref{GET_COMMAND_ARGUMENT}\n @end table\n \n+\n+\n @node CONJG\n @section @code{CONJG} --- Complex conjugate function \n @cindex @code{CONJG} intrinsic\n@@ -2123,6 +2156,7 @@ end program test_conjg\n @section @code{COS} --- Cosine function \n @cindex @code{COS} intrinsic\n @cindex @code{DCOS} intrinsic\n+@cindex @code{CCOS} intrinsic\n @cindex @code{ZCOS} intrinsic\n @cindex @code{CDCOS} intrinsic\n @cindex trigonometric functions\n@@ -2291,8 +2325,9 @@ end program test_count\n \n @table @asis\n @item @emph{Description}:\n-Returns a @code{REAL} value representing the elapsed CPU time in seconds.  This\n-is useful for testing segments of code to determine execution time.\n+Returns a @code{REAL(*)} value representing the elapsed CPU time in\n+seconds.  This is useful for testing segments of code to determine\n+execution time.\n \n @item @emph{Standard}:\n F95 and later\n@@ -2305,7 +2340,7 @@ Subroutine\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{TIME} @tab The type shall be @code{REAL} with @code{INTENT(OUT)}.\n+@item @var{TIME} @tab The type shall be @code{REAL(*)} with @code{INTENT(OUT)}.\n @end multitable\n \n @item @emph{Return value}:\n@@ -2378,6 +2413,7 @@ end program test_cshift\n @end table\n \n \n+\n @node CTIME\n @section @code{CTIME} --- Convert a time into a string\n @cindex @code{CTIME} intrinsic\n@@ -3262,6 +3298,7 @@ end program test_exit\n @section @code{EXP} --- Exponential function \n @cindex @code{EXP} intrinsic\n @cindex @code{DEXP} intrinsic\n+@cindex @code{CEXP} intrinsic\n @cindex @code{ZEXP} intrinsic\n @cindex @code{CDEXP} intrinsic\n @cindex exponential\n@@ -3348,6 +3385,7 @@ end program test_exponent\n @end table\n \n \n+\n @node FDATE\n @section @code{FDATE} --- Get the current time as a string\n @cindex @code{FDATE} intrinsic\n@@ -3403,6 +3441,8 @@ end program test_fdate\n @end smallexample\n @end table\n \n+\n+\n @node FLOAT\n \n @section @code{FLOAT} --- Convert integer to default real\n@@ -3500,6 +3540,7 @@ END PROGRAM\n @end table\n \n \n+\n @node FGETC\n @section @code{FGETC} --- Read a single character in stream mode\n @cindex @code{FGETC} intrinsic\n@@ -4624,6 +4665,7 @@ and formatted string representations.\n @end table\n \n \n+\n @node IAND\n @section @code{IAND} --- Bitwise logical and\n @cindex @code{IAND} intrinsic\n@@ -5062,11 +5104,11 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@item @code{RESULT = INT(X [, KIND))}\n+@code{RESULT = INT(A [, KIND))}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{X}    @tab Shall be of type @code{INTEGER(*)},\n+@item @var{A}    @tab Shall be of type @code{INTEGER(*)},\n                       @code{REAL(*)}, or @code{COMPLEX(*)}.\n @item @var{KIND} @tab (Optional) An @code{INTEGER(*)} initialization\n                       expression indicating the kind parameter of\n@@ -5079,13 +5121,13 @@ the following rules:\n \n @table @asis\n @item (A)\n-If @var{X} is of type @code{INTEGER(*)}, @code{INT(X) = X} \n+If @var{A} is of type @code{INTEGER(*)}, @code{INT(A) = A} \n @item (B)\n-If @var{X} is of type @code{REAL(*)} and @math{|X| < 1}, @code{INT(X)} equals @var{0}. \n-If @math{|X| \\geq 1}, then @code{INT(X)} equals the largest integer that does not exceed \n-the range of @var{X} and whose sign is the same as the sign of @var{X}.\n+If @var{A} is of type @code{REAL(*)} and @math{|A| < 1}, @code{INT(A)} equals @code{0}. \n+If @math{|A| \\geq 1}, then @code{INT(A)} equals the largest integer that does not exceed \n+the range of @var{A} and whose sign is the same as the sign of @var{A}.\n @item (C)\n-If @var{X} is of type @code{COMPLEX(*)}, rule B is applied to the real part of X.\n+If @var{A} is of type @code{COMPLEX(*)}, rule B is applied to the real part of @var{A}.\n @end table\n \n @item @emph{Example}:\n@@ -5101,15 +5143,88 @@ end program\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name             @tab Argument            @tab Return type       @tab Standard\n-@item @code{IFIX(X)}   @tab @code{REAL(4) X}    @tab @code{INTEGER}    @tab F77 and later\n-@item @code{IDINT(X)}  @tab @code{REAL(8) X}    @tab @code{INTEGER}    @tab F77 and later\n+@item @code{IFIX(A)}   @tab @code{REAL(4) A}    @tab @code{INTEGER}    @tab F77 and later\n+@item @code{IDINT(A)}  @tab @code{REAL(8) A}    @tab @code{INTEGER}    @tab F77 and later\n @end multitable\n \n @comment @item @emph{See also}:\n @end table\n \n \n \n+@node INT2\n+@section @code{INT2} --- Convert to 16-bit integer type\n+@cindex @code{INT2} intrinsic\n+@cindex @code{SHORT} intrinsic\n+@cindex conversion function (integer)\n+\n+@table @asis\n+@item @emph{Description}:\n+Convert to a @code{KIND=2} integer type. This is equivalent to the\n+standard @code{INT} intrinsic with an optional argument of\n+@code{KIND=2}, and is only included for backwards compatibility.\n+\n+The @code{SHORT} intrinsic is equivalent to @code{INT2}.\n+\n+@item @emph{Standard}:\n+GNU extension.\n+\n+@item @emph{Class}:\n+Elemental function\n+\n+@item @emph{Syntax}:\n+@code{RESULT = INT2(A)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{A}    @tab Shall be of type @code{INTEGER(*)},\n+                      @code{REAL(*)}, or @code{COMPLEX(*)}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is a @code{INTEGER(2)} variable.\n+\n+@comment @item @emph{See also}:\n+@ref{INT}, @ref{INT8}, @ref{LONG}\n+@end table\n+\n+\n+\n+@node INT8\n+@section @code{INT8} --- Convert to 64-bit integer type\n+@cindex @code{INT8} intrinsic\n+@cindex conversion function (integer)\n+\n+@table @asis\n+@item @emph{Description}:\n+Convert to a @code{KIND=8} integer type. This is equivalent to the\n+standard @code{INT} intrinsic with an optional argument of\n+@code{KIND=8}, and is only included for backwards compatibility.\n+\n+@item @emph{Standard}:\n+GNU extension.\n+\n+@item @emph{Class}:\n+Elemental function\n+\n+@item @emph{Syntax}:\n+@code{RESULT = INT8(A)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{A}    @tab Shall be of type @code{INTEGER(*)},\n+                      @code{REAL(*)}, or @code{COMPLEX(*)}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is a @code{INTEGER(8)} variable.\n+\n+@comment @item @emph{See also}:\n+@ref{INT}, @ref{INT2}, @ref{LONG}\n+@end table\n+\n+\n+\n @node IOR\n @section @code{IOR} --- Bitwise logical or\n @cindex @code{IOR} intrinsic\n@@ -5148,7 +5263,6 @@ the larger argument.)\n \n \n \n-\n @node IRAND\n @section @code{IRAND} --- Integer pseudo-random number\n @cindex @code{IRAND} intrinsic\n@@ -5236,7 +5350,6 @@ END PROGRAM\n \n \n \n-\n @node ISHFT\n @section @code{ISHFT} --- Shift bits\n @cindex @code{ISHFT} intrinsic\n@@ -5277,7 +5390,6 @@ The return value is of type @code{INTEGER(*)} and of the same kind as\n \n \n \n-\n @node ISHFTC\n @section @code{ISHFTC} --- Shift bits circularly\n @cindex @code{ISHFTC} intrinsic\n@@ -5987,6 +6099,41 @@ kind corresponding to @var{KIND}, or of the default logical kind if\n \n \n \n+@node LONG\n+@section @code{LONG} --- Convert to integer type\n+@cindex @code{LONG} intrinsic\n+@cindex conversion function (integer)\n+\n+@table @asis\n+@item @emph{Description}:\n+Convert to a @code{KIND=4} integer type, which is the same size as a C\n+@code{long} integer.  This is equivalent to the standard @code{INT}\n+intrinsic with an optional argument of @code{KIND=4}, and is only\n+included for backwards compatibility.\n+\n+@item @emph{Standard}:\n+GNU extension.\n+\n+@item @emph{Class}:\n+Elemental function\n+\n+@item @emph{Syntax}:\n+@code{RESULT = LONG(A)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{A}    @tab Shall be of type @code{INTEGER(*)},\n+                      @code{REAL(*)}, or @code{COMPLEX(*)}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is a @code{INTEGER(4)} variable.\n+\n+@comment @item @emph{See also}:\n+@ref{INT}, @ref{INT2}, @ref{INT8}\n+@end table\n+\n+\n \n @node LSHIFT\n @section @code{LSHIFT} --- Left shift bits\n@@ -6029,6 +6176,7 @@ The return value is of type @code{INTEGER(*)} and of the same kind as\n @end table\n \n \n+\n @node LSTAT\n @section @code{LSTAT} --- Get file status\n @cindex @code{LSTAT} intrinsic\n@@ -6233,6 +6381,11 @@ for the @code{*} or @code{.AND.} operators.\n @node MAX\n @section @code{MAX} --- Maximum value of an argument list\n @cindex @code{MAX} intrinsic\n+@cindex @code{MAX0} intrinsic\n+@cindex @code{AMAX0} intrinsic\n+@cindex @code{MAX1} intrinsic\n+@cindex @code{AMAX1} intrinsic\n+@cindex @code{DMAX1} intrinsic\n \n @table @asis\n @item @emph{Description}:\n@@ -6431,6 +6584,84 @@ cases, the result is of the same type and kind as @var{ARRAY}.\n \n \n \n+@node MCLOCK\n+@section @code{MCLOCK} --- Time function\n+@cindex @code{MCLOCK} intrinsic\n+@cindex time, clock ticks\n+@cindex clock ticks\n+\n+@table @asis\n+@item @emph{Description}:\n+Returns the number of clock ticks since the start of the process, based\n+on the UNIX function @code{clock(3)}.\n+\n+This intrinsic is not fully portable, such as to systems with 32-bit\n+@code{INTEGER} types but supporting times wider than 32 bits. Therefore,\n+the values returned by this intrinsic might be, or become, negative, or\n+numerically less than previous values, during a single run of the\n+compiled program.\n+\n+@item @emph{Standard}:\n+GNU extension\n+\n+@item @emph{Class}:\n+Non-elemental function\n+\n+@item @emph{Syntax}:\n+@code{RESULT = MCLOCK()}\n+\n+@item @emph{Return value}:\n+The return value is a scalar of type @code{INTEGER(4)}, equal to the\n+number of clock ticks since the start of the process, or @code{-1} if\n+the system does not support @code{clock(3)}.\n+\n+@item @emph{See also}:\n+@ref{CTIME}, @ref{GMTIME}, @ref{LTIME}, @ref{MCLOCK}, @ref{TIME}\n+\n+@end table\n+\n+\n+\n+@node MCLOCK8\n+@section @code{MCLOCK8} --- Time function (64-bit)\n+@cindex @code{MCLOCK8} intrinsic\n+@cindex time, current\n+@cindex current time\n+\n+@table @asis\n+@item @emph{Description}:\n+Returns the number of clock ticks since the start of the process, based\n+on the UNIX function @code{clock(3)}.\n+\n+@emph{Warning:} this intrinsic does not increase the range of the timing\n+values over that returned by @code{clock(3)}. On a system with a 32-bit\n+@code{clock(3)}, @code{MCLOCK8()} will return a 32-bit value, even though\n+it is converted to a 64-bit @code{INTEGER(8)} value. That means\n+overflows of the 32-bit value can still occur. Therefore, the values\n+returned by this intrinsic might be or become negative or numerically\n+less than previous values during a single run of the compiled program.\n+\n+@item @emph{Standard}:\n+GNU extension\n+\n+@item @emph{Class}:\n+Non-elemental function\n+\n+@item @emph{Syntax}:\n+@code{RESULT = MCLOCK8()}\n+\n+@item @emph{Return value}:\n+The return value is a scalar of type @code{INTEGER(8)}, equal to the\n+number of clock ticks since the start of the process, or @code{-1} if\n+the system does not support @code{clock(3)}.\n+\n+@item @emph{See also}:\n+@ref{CTIME}, @ref{GMTIME}, @ref{LTIME}, @ref{MCLOCK}, @ref{TIME8}\n+\n+@end table\n+\n+\n+\n @node MERGE\n @section @code{MERGE} --- Merge variables\n @cindex @code{MERGE} intrinsic\n@@ -6468,6 +6699,11 @@ The result is of the same type and type parameters as @var{TSOURCE}.\n @node MIN\n @section @code{MIN} --- Minimum value of an argument list\n @cindex @code{MIN} intrinsic\n+@cindex @code{MIN0} intrinsic\n+@cindex @code{AMIN0} intrinsic\n+@cindex @code{MIN1} intrinsic\n+@cindex @code{AMIN1} intrinsic\n+@cindex @code{DMIN1} intrinsic\n \n @table @asis\n @item @emph{Description}:\n@@ -6510,6 +6746,8 @@ and has the same type and kind as the first argument.\n @ref{MAX}, @ref{MINLOC}, @ref{MINVAL}\n @end table\n \n+\n+\n @node MINEXPONENT\n @section @code{MINEXPONENT} --- Minimum exponent of a real kind\n @cindex @code{MINEXPONENT} intrinsic\n@@ -7000,6 +7238,7 @@ end program test_nint\n @end table\n \n \n+\n @node NOT\n @section @code{NOT} --- Logical negation\n @cindex @code{NOT} intrinsic\n@@ -7034,7 +7273,6 @@ argument.\n \n \n \n-\n @node NULL\n @section @code{NULL} --- Function that returns an disassociated pointer\n @cindex @code{NULL} intrinsic\n@@ -7060,7 +7298,6 @@ Transformational function\n \n \n \n-\n @node OR\n @section @code{OR} --- Bitwise logical OR\n @cindex @code{OR} intrinsic\n@@ -7111,7 +7348,6 @@ F95 elemental function: @ref{IOR}\n \n \n \n-\n @node PACK\n @section @code{PACK} --- Pack an array into an array of rank one\n @cindex @code{PACK} intrinsic\n@@ -7586,7 +7822,6 @@ Transformational function\n \n \n \n-\n @node RESHAPE\n @section @code{RESHAPE} --- Function to reshape an array\n @cindex @code{RESHAPE} intrinsic\n@@ -7725,6 +7960,7 @@ end program test_scale\n @end table\n \n \n+\n @node SCAN\n @section @code{SCAN} --- Scan a string for the presence of a set of characters\n @cindex @code{SCAN} intrinsic\n@@ -7749,7 +7985,6 @@ Elemental function\n \n \n \n-\n @node SECNDS\n @section @code{SECNDS} --- Time function\n @cindex @code{SECNDS} intrinsic\n@@ -7767,16 +8002,15 @@ use is discouraged.\n GNU extension\n \n @item @emph{Class}:\n-function\n+Non-elemental function\n \n @item @emph{Syntax}:\n @code{RESULT = SECNDS (X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item Name        @tab Type\n-@item @var{T}     @tab REAL(4)\n-@item @var{X}     @tab REAL(4)\n+@item @var{T}     @tab Shall be of type @code{REAL(4)}.\n+@item @var{X}     @tab Shall be of type @code{REAL(4)}.\n @end multitable\n \n @item @emph{Return value}:\n@@ -7798,6 +8032,50 @@ end program test_secnds\n \n \n \n+@node SECOND\n+@section @code{SECOND} --- CPU time function\n+@cindex @code{SECOND} intrinsic\n+@cindex time, elapsed\n+@cindex elapsed time\n+\n+@table @asis\n+@item @emph{Description}:\n+Returns a @code{REAL(4)} value representing the elapsed CPU time in\n+seconds.  This provides the same functionality as the standard\n+@code{CPU_TIME} intrinsic, and is only included for backwards\n+compatibility.\n+\n+This intrinsic is provided in both subroutine and function forms;\n+however, only one form can be used in any given program unit.\n+\n+@item @emph{Standard}:\n+GNU extension\n+\n+@item @emph{Class}:\n+Subroutine, non-elemental function\n+\n+@item @emph{Syntax}:\n+@multitable @columnfractions .80\n+@item @code{CALL SECOND(TIME)}\n+@item @code{TIME = SECOND()}\n+@end multitable\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{TIME}  @tab Shall be of type @code{REAL(4)}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+In either syntax, @var{TIME} is set to the process's current runtime in\n+seconds.\n+\n+@item @emph{See also}:\n+@ref{CPU_TIME}\n+\n+@end table\n+\n+\n+\n @node SELECTED_INT_KIND\n @section @code{SELECTED_INT_KIND} --- Choose integer kind\n @cindex @code{SELECTED_INT_KIND} intrinsic\n@@ -8089,6 +8367,7 @@ end program test_signal\n @section @code{SIN} --- Sine function \n @cindex @code{SIN} intrinsic\n @cindex @code{DSIN} intrinsic\n+@cindex @code{CSIN} intrinsic\n @cindex @code{ZSIN} intrinsic\n @cindex @code{CDSIN} intrinsic\n @cindex trigonometric functions\n@@ -8299,7 +8578,6 @@ Elemental function\n \n \n \n-\n @node SPREAD\n @section @code{SPREAD} --- Add a dimension to an array\n @cindex @code{SPREAD} intrinsic\n@@ -8324,7 +8602,6 @@ Transformational function\n \n \n \n-\n @node SQRT\n @section @code{SQRT} --- Square-root function\n @cindex @code{SQRT} intrinsic\n@@ -8770,7 +9047,7 @@ Non-elemental function\n The return value is a scalar of type @code{INTEGER(4)}.\n \n @item @emph{See also}:\n-@ref{CTIME}, @ref{GMTIME}, @ref{LTIME}, @ref{TIME8}\n+@ref{CTIME}, @ref{GMTIME}, @ref{LTIME}, @ref{MCLOCK}, @ref{TIME8}\n \n @end table\n \n@@ -8809,7 +9086,7 @@ Non-elemental function\n The return value is a scalar of type @code{INTEGER(8)}.\n \n @item @emph{See also}:\n-@ref{CTIME}, @ref{GMTIME}, @ref{LTIME}, @ref{TIME}\n+@ref{CTIME}, @ref{GMTIME}, @ref{LTIME}, @ref{MCLOCK8}, @ref{TIME}\n \n @end table\n "}]}