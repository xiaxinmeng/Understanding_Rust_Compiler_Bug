{"sha": "6512bc931455f0437a0a8eab44232b4483ba16fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUxMmJjOTMxNDU1ZjA0MzdhMGE4ZWFiNDQyMzJiNDQ4M2JhMTZmYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-02-29T08:45:17Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-02-29T08:45:17Z"}, "message": "re PR tree-optimization/69720 (wrong code at -O3 on x86_64-linux-gnu)\n\n2016-02-29  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/69720\n\t* tree-vect-loop.c (get_initial_def_for_reduction): Avoid\n\tthe adjustment_def path for possibly vectorized defs.\n\t(vect_create_epilog_for_reduction): Handle vectorized initial\n\tdefs properly.\n\n\t* gcc.dg/vect/vect-outer-pr69720.c: New testcase.\n\nFrom-SVN: r233803", "tree": {"sha": "aeb6f06c1c539975c7e7e3c58d608bbc934632ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aeb6f06c1c539975c7e7e3c58d608bbc934632ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6512bc931455f0437a0a8eab44232b4483ba16fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6512bc931455f0437a0a8eab44232b4483ba16fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6512bc931455f0437a0a8eab44232b4483ba16fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6512bc931455f0437a0a8eab44232b4483ba16fb/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a34a94c3ed62d412560eb92bb3b5010159d68cee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a34a94c3ed62d412560eb92bb3b5010159d68cee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a34a94c3ed62d412560eb92bb3b5010159d68cee"}], "stats": {"total": 72, "additions": 63, "deletions": 9}, "files": [{"sha": "772fc3b7582c883224c81a40fc1565c52721e822", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6512bc931455f0437a0a8eab44232b4483ba16fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6512bc931455f0437a0a8eab44232b4483ba16fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6512bc931455f0437a0a8eab44232b4483ba16fb", "patch": "@@ -1,3 +1,11 @@\n+2016-02-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69720\n+\t* tree-vect-loop.c (get_initial_def_for_reduction): Avoid\n+\tthe adjustment_def path for possibly vectorized defs.\n+\t(vect_create_epilog_for_reduction): Handle vectorized initial\n+\tdefs properly.\n+\n 2016-02-28  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/i386/cygming.h (STACK_REALIGN_DEFAULT): Define."}, {"sha": "8347c677cd439ec32109db06b2613a4240acbb43", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6512bc931455f0437a0a8eab44232b4483ba16fb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6512bc931455f0437a0a8eab44232b4483ba16fb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6512bc931455f0437a0a8eab44232b4483ba16fb", "patch": "@@ -1,3 +1,8 @@\n+2016-02-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69720\n+\t* gcc.dg/vect/vect-outer-pr69720.c: New testcase.\n+\n 2016-02-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/68147"}, {"sha": "bcfcc6db8cec4fed21063f93aa17b7cf75dfc5b6", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-pr69720.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6512bc931455f0437a0a8eab44232b4483ba16fb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-pr69720.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6512bc931455f0437a0a8eab44232b4483ba16fb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-pr69720.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-pr69720.c?ref=6512bc931455f0437a0a8eab44232b4483ba16fb", "patch": "@@ -0,0 +1,28 @@\n+extern void abort (void);\n+\n+int a[128];\n+double b[128] = { 1., 2., 3., 4. };\n+\n+void __attribute__((noinline)) foo()\n+{\n+  int i;\n+  for (i = 0; i < 128; ++i)\n+    {\n+      double tem1 = b[i];\n+      for (int j = 0; j < 32; ++j)\n+\ttem1 += 1;\n+      b[i] = tem1;\n+      a[i] = i;\n+    }\n+}\n+\n+int main()\n+{\n+  foo ();\n+  if (b[0] != 33. || b[1] != 34.\n+      || b[2] != 35. || b[3] != 36.)\n+    abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { target { vect_double && vect_int } } } } */"}, {"sha": "627ff1c5cf38fce4c285ee0c49a842fe0c8339ba", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6512bc931455f0437a0a8eab44232b4483ba16fb/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6512bc931455f0437a0a8eab44232b4483ba16fb/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=6512bc931455f0437a0a8eab44232b4483ba16fb", "patch": "@@ -4110,6 +4110,15 @@ get_initial_def_for_reduction (gimple *stmt, tree init_val,\n       return vect_create_destination_var (init_val, vectype);\n     }\n \n+  /* In case of a nested reduction do not use an adjustment def as\n+     that case is not supported by the epilogue generation correctly\n+     if ncopies is not one.  */\n+  if (adjustment_def && nested_in_vect_loop)\n+    {\n+      *adjustment_def = NULL;\n+      return vect_get_vec_def_for_operand (init_val, stmt);\n+    }\n+\n   switch (code)\n     {\n       case WIDEN_SUM_EXPR:\n@@ -4124,12 +4133,7 @@ get_initial_def_for_reduction (gimple *stmt, tree init_val,\n         /* ADJUSMENT_DEF is NULL when called from\n            vect_create_epilog_for_reduction to vectorize double reduction.  */\n         if (adjustment_def)\n-          {\n-            if (nested_in_vect_loop)\n-              *adjustment_def = vect_get_vec_def_for_operand (init_val, stmt);\n-            else\n-              *adjustment_def = init_val;\n-          }\n+\t  *adjustment_def = init_val;\n \n         if (code == MULT_EXPR)\n           {\n@@ -4341,6 +4345,7 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple *stmt,\n      (in case of SLP, do it for all the phis). */\n \n   /* Get the loop-entry arguments.  */\n+  enum vect_def_type initial_def_dt = vect_unknown_def_type;\n   if (slp_node)\n     vect_get_vec_defs (reduction_op, NULL_TREE, stmt, &vec_initial_defs,\n                        NULL, slp_node, reduc_index);\n@@ -4351,9 +4356,10 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple *stmt,\n       gimple *def_stmt = SSA_NAME_DEF_STMT (reduction_op);\n       initial_def = PHI_ARG_DEF_FROM_EDGE (def_stmt,\n \t\t\t\t\t   loop_preheader_edge (loop));\n-      vec_initial_defs.create (1);\n+      vect_is_simple_use (initial_def, loop_vinfo, &def_stmt, &initial_def_dt);\n       vec_initial_def = get_initial_def_for_reduction (stmt, initial_def,\n \t\t\t\t\t\t       &adjustment_def);\n+      vec_initial_defs.create (1);\n       vec_initial_defs.quick_push (vec_initial_def);\n     }\n \n@@ -4368,6 +4374,15 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple *stmt,\n       def = vect_defs[i];\n       for (j = 0; j < ncopies; j++)\n         {\n+\t  if (j != 0)\n+\t    {\n+\t      phi = STMT_VINFO_RELATED_STMT (vinfo_for_stmt (phi));\n+\t      if (nested_in_vect_loop)\n+\t\tvec_init_def\n+\t\t  = vect_get_vec_def_for_stmt_copy (initial_def_dt,\n+\t\t\t\t\t\t    vec_init_def);\n+\t    }\n+\n \t  /* Set the loop-entry arg of the reduction-phi.  */\n \n \t  if (STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info)\n@@ -4404,8 +4419,6 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple *stmt,\n               dump_gimple_stmt (MSG_NOTE, TDF_SLIM, SSA_NAME_DEF_STMT (def), 0);\n               dump_printf (MSG_NOTE, \"\\n\");\n             }\n-\n-          phi = STMT_VINFO_RELATED_STMT (vinfo_for_stmt (phi));\n         }\n     }\n "}]}