{"sha": "ccbaf064ff496fbf0ace8bf2b38a3047b4ad497b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NiYWYwNjRmZjQ5NmZiZjBhY2U4YmYyYjM4YTMwNDdiNGFkNDk3Yg==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2001-04-09T15:17:08Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2001-04-09T15:17:08Z"}, "message": "basic-block.h (set_new_block_for_insns): New Prototype.\n\n\n2001-04-09  Andrew MacLeod  <amacleod@redhat.com>\n\n\t* basic-block.h (set_new_block_for_insns): New Prototype.\n\t(set_block_num): Delete prototype.\n\t* flow.c (set_block_num): Remove obsolete function.\n\t(set_block_for_new_insns): Set BB for single or multiple insns.\n\t* gcse.c (handle_avail_expr): Use set_block_for_new_insns.\n\t(process_insn_end_bb): Use set_block_for_new_insns or\n\tset_block_for_insn instead of set_block_num.\n\t(pre_insert_copy_insn): Use set_block_for_new_insns.\n\t(update_ld_motion_stores): Use set_block_for_new_insns.\n\t(insert_insn_start_bb): Use set_block_for_new_insns.\n\t(replace_store_insn): Use set_block_for_new_insns.\n\nFrom-SVN: r41208", "tree": {"sha": "feaa93448a535cf85103922cb480ccacbcbb26ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/feaa93448a535cf85103922cb480ccacbcbb26ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccbaf064ff496fbf0ace8bf2b38a3047b4ad497b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccbaf064ff496fbf0ace8bf2b38a3047b4ad497b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccbaf064ff496fbf0ace8bf2b38a3047b4ad497b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccbaf064ff496fbf0ace8bf2b38a3047b4ad497b/comments", "author": null, "committer": null, "parents": [{"sha": "a13d4ebfc3445a9a349b8ee4cf39b712a96e0a93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a13d4ebfc3445a9a349b8ee4cf39b712a96e0a93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a13d4ebfc3445a9a349b8ee4cf39b712a96e0a93"}], "stats": {"total": 68, "additions": 51, "deletions": 17}, "files": [{"sha": "4478e295958677bb8a222659947b7f6dcf32ec2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccbaf064ff496fbf0ace8bf2b38a3047b4ad497b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccbaf064ff496fbf0ace8bf2b38a3047b4ad497b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ccbaf064ff496fbf0ace8bf2b38a3047b4ad497b", "patch": "@@ -1,3 +1,17 @@\n+2001-04-09  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* basic-block.h (set_new_block_for_insns): New Prototype.\n+\t(set_block_num): Delete prototype.\n+\t* flow.c (set_block_num): Remove obsolete function.\n+\t(set_block_for_new_insns): Set BB for single or multiple insns.\n+\t* gcse.c (handle_avail_expr): Use set_block_for_new_insns.\n+\t(process_insn_end_bb): Use set_block_for_new_insns or \n+\tset_block_for_insn instead of set_block_num.\n+\t(pre_insert_copy_insn): Use set_block_for_new_insns.\n+\t(update_ld_motion_stores): Use set_block_for_new_insns.\n+\t(insert_insn_start_bb): Use set_block_for_new_insns.\n+\t(replace_store_insn): Use set_block_for_new_insns.\n+\n 2001-04-09  Andrew MacLeod  <amacleod@redhat.com>\n \t    Jeff Law  <law@redhat.com>\n "}, {"sha": "f3911c8f518c42d7f8c1836e867509e747fa6018", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccbaf064ff496fbf0ace8bf2b38a3047b4ad497b/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccbaf064ff496fbf0ace8bf2b38a3047b4ad497b/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=ccbaf064ff496fbf0ace8bf2b38a3047b4ad497b", "patch": "@@ -236,7 +236,7 @@ extern varray_type basic_block_for_insn;\n extern void compute_bb_for_insn\t\tPARAMS ((int));\n extern void update_bb_for_insn\t\tPARAMS ((basic_block));\n extern void set_block_for_insn\t\tPARAMS ((rtx, basic_block));\n-extern void set_block_num\t\tPARAMS ((rtx, int));\n+extern void set_block_for_new_insns\tPARAMS ((rtx, basic_block));\n \n extern void free_basic_block_vars\tPARAMS ((int));\n "}, {"sha": "7736d855f34af8b6a08aac8bf2963da9f04682e0", "filename": "gcc/flow.c", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccbaf064ff496fbf0ace8bf2b38a3047b4ad497b/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccbaf064ff496fbf0ace8bf2b38a3047b4ad497b/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=ccbaf064ff496fbf0ace8bf2b38a3047b4ad497b", "patch": "@@ -6697,15 +6697,38 @@ set_block_for_insn (insn, bb)\n   VARRAY_BB (basic_block_for_insn, uid) = bb;\n }\n \n-/* Record INSN's block number as BB.  */\n-/* ??? This has got to go.  */\n+/* When a new insn has been inserted into an existing block, it will\n+   sometimes emit more than a single insn. This routine will set the\n+   block number for the specified insn, and look backwards in the insn\n+   chain to see if there are any other uninitialized insns immediately \n+   previous to this one, and set the block number for them too.  */\n \n void\n-set_block_num (insn, bb)\n+set_block_for_new_insns (insn, bb)\n      rtx insn;\n-     int bb;\n+     basic_block bb;\n {\n-  set_block_for_insn (insn, BASIC_BLOCK (bb));\n+  set_block_for_insn (insn, bb);\n+\n+  /* We dont scan to set the block to 0 since this is the default value.  \n+     If we did, we'd end up scanning/setting the entire prologue block\n+     everytime we insert an insn into it. */\n+  if (bb->index == 0)\n+    return;\n+\n+  /* Scan the previous instructions setting the block number until we find \n+     an instruction that has the block number set, or we find a note \n+     of any kind.  */\n+  for (insn = PREV_INSN (insn); insn != NULL_RTX; insn = PREV_INSN (insn))\n+    {\n+      if (GET_CODE (insn) == NOTE)\n+\tbreak;\n+      if ((size_t)INSN_UID (insn) >= basic_block_for_insn->num_elements \n+\t  || BLOCK_NUM (insn) == 0)\n+\tset_block_for_insn (insn, bb);\n+      else\n+\tbreak;\n+    }\n }\n \f\n /* Verify the CFG consistency.  This function check some CFG invariants and"}, {"sha": "4c96cf9ebcd2e9b65dfa8f9121151f67bbd3559c", "filename": "gcc/gcse.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccbaf064ff496fbf0ace8bf2b38a3047b4ad497b/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccbaf064ff496fbf0ace8bf2b38a3047b4ad497b/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=ccbaf064ff496fbf0ace8bf2b38a3047b4ad497b", "patch": "@@ -3549,7 +3549,7 @@ handle_avail_expr (insn, expr)\n \t\t\t   insn_computes_expr);\n \n       /* Keep block number table up to date.  */\n-      set_block_num (new_insn, BLOCK_NUM (insn_computes_expr));\n+      set_block_for_new_insns (new_insn, BLOCK_FOR_INSN (insn_computes_expr));\n \n       /* Keep register set table up to date.  */\n       record_one_set (REGNO (to), new_insn);\n@@ -4808,7 +4808,7 @@ insert_insn_end_bb (expr, bb, pre)\n \t{\n \t  rtx insn = XVECEXP (pat, 0, i);\n \n-\t  set_block_num (insn, bb);\n+\t  set_block_for_insn (insn, BASIC_BLOCK (bb));\n \t  if (INSN_P (insn))\n \t    add_label_notes (PATTERN (insn), new_insn);\n \n@@ -4818,7 +4818,7 @@ insert_insn_end_bb (expr, bb, pre)\n   else\n     {\n       add_label_notes (SET_SRC (pat), new_insn);\n-      set_block_num (new_insn, bb);\n+      set_block_for_new_insns (new_insn, BASIC_BLOCK (bb));\n \n       /* Keep register set table up to date.  */\n       record_one_set (regno, new_insn);\n@@ -4942,7 +4942,7 @@ pre_insert_copy_insn (expr, insn)\n \t\t\t      insn);\n \n   /* Keep block number table up to date.  */\n-  set_block_num (new_insn, bb);\n+  set_block_for_new_insns (new_insn, BASIC_BLOCK (bb));\n \n   /* Keep register set table up to date.  */\n   record_one_set (regno, new_insn);\n@@ -6367,7 +6367,7 @@ update_ld_motion_stores (expr)\n \t  copy = gen_move_insn ( reg, SET_SRC (pat));\n \t  i = emit_insn_before (copy, insn);\n \t  record_one_set (REGNO (reg), i);\n-\t  set_block_num (i, BLOCK_NUM (insn));\n+\t  set_block_for_new_insns (i, BLOCK_FOR_INSN (insn));\n \t  SET_SRC (pat) = reg;\n \n \t  /* un-recognize this pattern since it's probably different now.  */\n@@ -6877,11 +6877,8 @@ insert_insn_start_bb (insn, bb)\n \n   if (prev == BLOCK_END (bb))\n     BLOCK_END (bb) = insn;\n-  while (insn != prev)\n-    {\n-      set_block_num (insn, bb);\n-      insn = PREV_INSN (insn);\n-    }\n+\n+  set_block_for_new_insns (insn, BASIC_BLOCK (bb));\n \n   if (gcse_file)\n     {\n@@ -6971,7 +6968,7 @@ replace_store_insn (reg, del, bb)\n   \n   insn = gen_move_insn (reg, SET_SRC (PATTERN (del)));\n   insn = emit_insn_after (insn, del);\n-  set_block_num (insn, bb);\n+  set_block_for_new_insns (insn, BASIC_BLOCK (bb));\n   \n   if (gcse_file)\n     {"}]}