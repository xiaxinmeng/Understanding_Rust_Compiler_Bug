{"sha": "d4ac4ce2d38ef15977539ab5cd33876470011c3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRhYzRjZTJkMzhlZjE1OTc3NTM5YWI1Y2QzMzg3NjQ3MDAxMWMzYw==", "commit": {"author": {"name": "Lawrence Crowl", "email": "crowl@google.com", "date": "2012-11-01T21:02:15Z"}, "committer": {"name": "Lawrence Crowl", "email": "crowl@gcc.gnu.org", "date": "2012-11-01T21:02:15Z"}, "message": "This patch renames sbitmap iterators to unify them with the bitmap iterators.\n\nRemove the unused EXECUTE_IF_SET_IN_SBITMAP_REV, which has an unconventional\ninterface.\n\nRename the sbitmap_iter_* functions to match bitmap's bmp_iter_* functions.\nAdd an additional parameter to the initialization and next functions to\nmatch the interface in bmp_iter_*.  This extra parameter is mostly hidden\nby the use of the EXECUTE_IF macros.\n\nRename the EXECUTE_IF_SET_IN_SBITMAP macro to EXECUTE_IF_SET_IN_BITMAP.  Its\nimplementation is now identical to that in bitmap.h.  To prevent redefinition\nerrors, both definitions are now guarded by #ifndef.  An alternate strategy\nis to simply include bitmap.h from sbitmap.h.  As this would increase build\ntime, I have elected to use the #ifndef version.  I do not have a strong\npreference here.\n\nThe sbitmap_iterator type is still distinctly named because it is often\ndeclared in contexts where the bitmap type is not obvious.  There are less\nthan 40 uses of this type, so the burden to modify it when changing bitmap\ntypes is not large.\n\nTested on x86-64, config-list.mk testing.\n\n\nIndex: gcc/ChangeLog\n\n2012-10-31  Lawrence Crowl  <crowl@google.com>\n\n\t* sbitmap.h (sbitmap_iter_init): Rename bmp_iter_set_init and add\n\tunused parameter to match bitmap iterator.  Update callers.\n\t(sbitmap_iter_cond): Rename bmp_iter_set.  Update callers.\n\t(sbitmap_iter_next): Rename bmp_iter_next and add unused parameter to\n\tmatch bitmap iterator.  Update callers.\n\t(EXECUTE_IF_SET_IN_SBITMAP_REV): Remove unused.\n\t(EXECUTE_IF_SET_IN_SBITMAP): Rename EXECUTE_IF_SET_IN_BITMAP and\n\tadjust to be identical to the definition in bitmap.h.  Conditionalize\n\tthe definition based on not having been defined.  Update callers.\n\t* bitmap.h (EXECUTE_IF_SET_IN_BITMAP): Conditionalize the definition\n\tbased on not having been defined.  (To match the above.)\n\nFrom-SVN: r193069", "tree": {"sha": "6a2b07bcbe69d6025168367c7ef581e376cca84c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a2b07bcbe69d6025168367c7ef581e376cca84c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4ac4ce2d38ef15977539ab5cd33876470011c3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4ac4ce2d38ef15977539ab5cd33876470011c3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4ac4ce2d38ef15977539ab5cd33876470011c3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4ac4ce2d38ef15977539ab5cd33876470011c3c/comments", "author": null, "committer": null, "parents": [{"sha": "0dd4969120693e1040ff3cd2076571618baa616d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dd4969120693e1040ff3cd2076571618baa616d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dd4969120693e1040ff3cd2076571618baa616d"}], "stats": {"total": 312, "additions": 172, "deletions": 140}, "files": [{"sha": "444606169145d179f9205472941b542cacb5e850", "filename": "contrib/testsuite-management/x86_64-unknown-linux-gnu.xfail", "status": "modified", "additions": 99, "deletions": 62, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ac4ce2d38ef15977539ab5cd33876470011c3c/contrib%2Ftestsuite-management%2Fx86_64-unknown-linux-gnu.xfail", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ac4ce2d38ef15977539ab5cd33876470011c3c/contrib%2Ftestsuite-management%2Fx86_64-unknown-linux-gnu.xfail", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Ftestsuite-management%2Fx86_64-unknown-linux-gnu.xfail?ref=d4ac4ce2d38ef15977539ab5cd33876470011c3c", "patch": "@@ -1,98 +1,135 @@\n-FAIL: g++.dg/torture/pr46154.C -O3 -fomit-frame-pointer  (internal compiler error)\n-FAIL: g++.dg/torture/pr46154.C -O2 -flto -fno-use-linker-plugin -flto-partition=none  (internal compiler error)\n-FAIL: g++.dg/torture/pr46154.C -O3 -g  (internal compiler error)\n-FAIL: g++.dg/torture/pr46154.C -O2 -flto -fno-use-linker-plugin -flto-partition=none  (test for excess errors)\n-FAIL: g++.dg/torture/pr46154.C -O3 -g  (test for excess errors)\n-FAIL: g++.dg/torture/pr46154.C -O3 -fomit-frame-pointer  (test for excess errors)\n-FAIL: g++.dg/torture/pr46154.C -O2  (test for excess errors)\n-FAIL: g++.dg/torture/pr46154.C -O2  (internal compiler error)\n-FAIL: g++.dg/tree-ssa/pr45453.C -std=gnu++98 (test for excess errors)\n-UNRESOLVED: g++.dg/tree-ssa/pr45453.C -std=gnu++11  scan-tree-dump-times optimized \"OBJ_TYPE_REF\" 1\n-UNRESOLVED: g++.dg/tree-ssa/pr45453.C -std=gnu++98  scan-tree-dump-times optimized \"OBJ_TYPE_REF\" 1\n-FAIL: g++.dg/tree-ssa/pr45453.C -std=gnu++11 (test for excess errors)\n-FAIL: gcc.dg/attr-weakref-1.c (test for excess errors)\n+FAIL: g++.dg/other/anon5.C -std=gnu++98 (test for excess errors)\n+FAIL: g++.dg/other/anon5.C -std=gnu++11 (test for excess errors)\n+FAIL: gcc.c-torture/compile/pr44119.c -Os  (test for excess errors)\n+FAIL: gcc.c-torture/compile/pr44119.c -O3 -fomit-frame-pointer  (internal compiler error)\n+FAIL: gcc.c-torture/compile/pr44119.c -O3 -fomit-frame-pointer -funroll-loops  (test for excess errors)\n+FAIL: gcc.c-torture/compile/pr44119.c -O2 -flto -flto-partition=none  (internal compiler error)\n+FAIL: gcc.c-torture/compile/pr44119.c -O2 -flto -flto-partition=none  (test for excess errors)\n+FAIL: gcc.c-torture/compile/pr44119.c -O2  (test for excess errors)\n+FAIL: gcc.c-torture/compile/pr44119.c -O2 -flto  (internal compiler error)\n+FAIL: gcc.c-torture/compile/pr44119.c -O3 -g  (internal compiler error)\n+FAIL: gcc.c-torture/compile/pr44119.c -O2 -flto  (test for excess errors)\n+FAIL: gcc.c-torture/compile/pr44119.c -O1  (test for excess errors)\n+FAIL: gcc.c-torture/compile/pr44119.c -O3 -fomit-frame-pointer  (test for excess errors)\n+FAIL: gcc.c-torture/compile/pr44119.c -O3 -g  (test for excess errors)\n+FAIL: gcc.c-torture/compile/pr44119.c -O3 -fomit-frame-pointer -funroll-all-loops -finline-functions  (test for excess errors)\n+FAIL: gcc.c-torture/compile/pr44119.c -O2  (internal compiler error)\n+FAIL: gcc.c-torture/compile/pr44119.c -O3 -fomit-frame-pointer -funroll-all-loops -finline-functions  (internal compiler error)\n+FAIL: gcc.c-torture/compile/pr44119.c -Os  (internal compiler error)\n+FAIL: gcc.c-torture/compile/pr44119.c -O1  (internal compiler error)\n+FAIL: gcc.c-torture/compile/pr44119.c -O3 -fomit-frame-pointer -funroll-loops  (internal compiler error)\n UNRESOLVED: gcc.dg/attr-weakref-1.c compilation failed to produce executable\n+FAIL: gcc.dg/attr-weakref-1.c (test for excess errors)\n FAIL: gcc.dg/autopar/pr49960.c scan-tree-dump-times optimized \"loopfn\" 0\n FAIL: gcc.dg/autopar/pr49960.c scan-tree-dump-times parloops \"SUCCESS: may be parallelized\" 0\n FAIL: gcc.dg/builtin-object-size-8.c execution test\n-FAIL: gcc.dg/graphite/pr42521.c (internal compiler error)\n-FAIL: gcc.dg/graphite/pr42521.c (test for excess errors)\n-FAIL: gcc.dg/graphite/pr42771.c (internal compiler error)\n-FAIL: gcc.dg/graphite/pr42771.c (test for excess errors)\n-XPASS: gcc.dg/guality/example.c -O2 -flto -fno-use-linker-plugin -flto-partition=none  execution test\n+FAIL: gcc.dg/cproj-fails-with-broken-glibc.c execution test\n XPASS: gcc.dg/guality/example.c -O2  execution test\n+XPASS: gcc.dg/guality/example.c -O2 -flto  execution test\n XPASS: gcc.dg/guality/example.c -O0  execution test\n-XPASS: gcc.dg/guality/guality.c -O2  execution test\n+XPASS: gcc.dg/guality/example.c -O2 -flto -flto-partition=none  execution test\n+XPASS: gcc.dg/guality/guality.c -O2 -flto -flto-partition=none  execution test\n XPASS: gcc.dg/guality/guality.c -O3 -fomit-frame-pointer  execution test\n-XPASS: gcc.dg/guality/guality.c -O1  execution test\n XPASS: gcc.dg/guality/guality.c -O0  execution test\n XPASS: gcc.dg/guality/guality.c -O3 -g  execution test\n-XPASS: gcc.dg/guality/guality.c -O2 -flto -fno-use-linker-plugin -flto-partition=none  execution test\n-XPASS: gcc.dg/guality/guality.c -O2 -flto -fuse-linker-plugin -fno-fat-lto-objects  execution test\n XPASS: gcc.dg/guality/guality.c -Os  execution test\n+XPASS: gcc.dg/guality/guality.c -O2 -flto  execution test\n+XPASS: gcc.dg/guality/guality.c -O2  execution test\n+XPASS: gcc.dg/guality/guality.c -O1  execution test\n XPASS: gcc.dg/guality/inline-params.c -O2  execution test\n-XPASS: gcc.dg/guality/inline-params.c -O3 -g  execution test\n-XPASS: gcc.dg/guality/inline-params.c -O2 -flto -fno-use-linker-plugin -flto-partition=none  execution test\n XPASS: gcc.dg/guality/inline-params.c -O3 -fomit-frame-pointer  execution test\n+XPASS: gcc.dg/guality/inline-params.c -O2 -flto  execution test\n XPASS: gcc.dg/guality/inline-params.c -Os  execution test\n+XPASS: gcc.dg/guality/inline-params.c -O3 -g  execution test\n+XPASS: gcc.dg/guality/inline-params.c -O2 -flto -flto-partition=none  execution test\n+XPASS: gcc.dg/guality/pr41353-1.c -O3 -g  line 28 j == 28 + 37\n+XPASS: gcc.dg/guality/pr41353-1.c -O1  line 28 j == 28 + 37\n+XPASS: gcc.dg/guality/pr41353-1.c -O2 -flto -flto-partition=none  line 28 j == 28 + 37\n+XPASS: gcc.dg/guality/pr41353-1.c -O2  line 28 j == 28 + 37\n+XPASS: gcc.dg/guality/pr41353-1.c -O2 -flto  line 28 j == 28 + 37\n+XPASS: gcc.dg/guality/pr41353-1.c -Os  line 28 j == 28 + 37\n+XPASS: gcc.dg/guality/pr41353-1.c -O3 -fomit-frame-pointer  line 28 j == 28 + 37\n+XPASS: gcc.dg/guality/pr41353-1.c -O0  line 28 j == 28 + 37\n XPASS: gcc.dg/guality/pr41447-1.c -O1  execution test\n-XPASS: gcc.dg/guality/pr41447-1.c -O3 -fomit-frame-pointer  execution test\n XPASS: gcc.dg/guality/pr41447-1.c -Os  execution test\n XPASS: gcc.dg/guality/pr41447-1.c -O2  execution test\n-XPASS: gcc.dg/guality/pr41447-1.c -O3 -g  execution test\n+XPASS: gcc.dg/guality/pr41447-1.c -O3 -fomit-frame-pointer  execution test\n XPASS: gcc.dg/guality/pr41447-1.c -O0  execution test\n-XPASS: gcc.dg/guality/pr41447-1.c -O2 -flto -fuse-linker-plugin -fno-fat-lto-objects  execution test\n-XPASS: gcc.dg/guality/pr41616-1.c -O1  execution test\n-XPASS: gcc.dg/guality/pr41616-1.c -O3 -fomit-frame-pointer  execution test\n+XPASS: gcc.dg/guality/pr41447-1.c -O3 -g  execution test\n+XPASS: gcc.dg/guality/pr41616-1.c -O2 -flto -flto-partition=none  execution test\n XPASS: gcc.dg/guality/pr41616-1.c -O0  execution test\n-XPASS: gcc.dg/guality/pr41616-1.c -O2 -flto -fno-use-linker-plugin -flto-partition=none  execution test\n-XPASS: gcc.dg/guality/pr41616-1.c -O2  execution test\n+XPASS: gcc.dg/guality/pr41616-1.c -O3 -fomit-frame-pointer  execution test\n XPASS: gcc.dg/guality/pr41616-1.c -O3 -g  execution test\n+XPASS: gcc.dg/guality/pr41616-1.c -O1  execution test\n XPASS: gcc.dg/guality/pr41616-1.c -Os  execution test\n+XPASS: gcc.dg/guality/pr41616-1.c -O2  execution test\n+XPASS: gcc.dg/guality/pr41616-1.c -O2 -flto  execution test\n+FAIL: gcc.dg/guality/pr54200.c -Os  line 20 z == 3\n+FAIL: gcc.dg/guality/pr54519-1.c -O2 -flto -flto-partition=none  line 23 y == 117\n+FAIL: gcc.dg/guality/pr54519-1.c -O2 -flto  line 20 y == 25\n+FAIL: gcc.dg/guality/pr54519-1.c -O2 -flto  line 23 z == 8\n+FAIL: gcc.dg/guality/pr54519-1.c -O2 -flto  line 20 z == 6\n+FAIL: gcc.dg/guality/pr54519-1.c -O2 -flto -flto-partition=none  line 23 z == 8\n+FAIL: gcc.dg/guality/pr54519-1.c -O2 -flto  line 23 y == 117\n+FAIL: gcc.dg/guality/pr54519-1.c -O2 -flto -flto-partition=none  line 20 z == 6\n+FAIL: gcc.dg/guality/pr54519-1.c -O2 -flto -flto-partition=none  line 20 y == 25\n+FAIL: gcc.dg/guality/pr54519-2.c -O2 -flto -flto-partition=none  line 17 y == 25\n+FAIL: gcc.dg/guality/pr54519-2.c -O2 -flto  line 17 y == 25\n+FAIL: gcc.dg/guality/pr54519-5.c -O2 -flto  line 17 y == 25\n+FAIL: gcc.dg/guality/pr54519-5.c -O2 -flto -flto-partition=none  line 17 y == 25\n+FAIL: gcc.dg/guality/pr54519-5.c -Os  line 17 y == 25\n+FAIL: gcc.dg/guality/pr54519-5.c -O3 -fomit-frame-pointer  line 17 y == 25\n+FAIL: gcc.dg/guality/pr54519-5.c -O2  line 17 y == 25\n+FAIL: gcc.dg/guality/pr54519-5.c -O3 -g  line 17 y == 25\n+FAIL: gcc.dg/guality/vla-1.c -O2 -flto  line 24 sizeof (a) == 17 * sizeof (short)\n+FAIL: gcc.dg/guality/vla-1.c -O2 -flto  line 17 sizeof (a) == 6\n+FAIL: gcc.dg/guality/vla-1.c -O3 -g  line 24 sizeof (a) == 17 * sizeof (short)\n+FAIL: gcc.dg/guality/vla-1.c -O3 -fomit-frame-pointer  line 24 sizeof (a) == 17 * sizeof (short)\n+FAIL: gcc.dg/guality/vla-1.c -O1  line 24 sizeof (a) == 17 * sizeof (short)\n+FAIL: gcc.dg/guality/vla-1.c -Os  line 17 sizeof (a) == 6\n+FAIL: gcc.dg/guality/vla-1.c -O2 -flto -flto-partition=none  line 17 sizeof (a) == 6\n+FAIL: gcc.dg/guality/vla-1.c -O2  line 17 sizeof (a) == 6\n+FAIL: gcc.dg/guality/vla-1.c -O3 -fomit-frame-pointer  line 17 sizeof (a) == 6\n+FAIL: gcc.dg/guality/vla-1.c -O0  line 24 sizeof (a) == 17 * sizeof (short)\n+FAIL: gcc.dg/guality/vla-1.c -O2 -flto -flto-partition=none  line 24 sizeof (a) == 17 * sizeof (short)\n+FAIL: gcc.dg/guality/vla-1.c -O2  line 24 sizeof (a) == 17 * sizeof (short)\n+FAIL: gcc.dg/guality/vla-1.c -O1  line 17 sizeof (a) == 6\n+FAIL: gcc.dg/guality/vla-1.c -O3 -g  line 17 sizeof (a) == 6\n+FAIL: gcc.dg/guality/vla-1.c -O0  line 17 sizeof (a) == 6\n+FAIL: gcc.dg/guality/vla-1.c -Os  line 24 sizeof (a) == 17 * sizeof (short)\n+FAIL: gcc.dg/guality/vla-2.c -O3 -g  line 25 sizeof (a) == 6 * sizeof (int)\n+FAIL: gcc.dg/guality/vla-2.c -O0  line 25 sizeof (a) == 6 * sizeof (int)\n+FAIL: gcc.dg/guality/vla-2.c -O0  line 16 sizeof (a) == 5 * sizeof (int)\n+FAIL: gcc.dg/guality/vla-2.c -O3 -fomit-frame-pointer  line 16 sizeof (a) == 5 * sizeof (int)\n+FAIL: gcc.dg/guality/vla-2.c -O2 -flto  line 25 sizeof (a) == 6 * sizeof (int)\n+FAIL: gcc.dg/guality/vla-2.c -Os  line 25 sizeof (a) == 6 * sizeof (int)\n+FAIL: gcc.dg/guality/vla-2.c -O2  line 16 sizeof (a) == 5 * sizeof (int)\n+FAIL: gcc.dg/guality/vla-2.c -O1  line 25 sizeof (a) == 6 * sizeof (int)\n+FAIL: gcc.dg/guality/vla-2.c -O2 -flto  line 16 sizeof (a) == 5 * sizeof (int)\n+FAIL: gcc.dg/guality/vla-2.c -O3 -g  line 16 sizeof (a) == 5 * sizeof (int)\n+FAIL: gcc.dg/guality/vla-2.c -O1  line 16 sizeof (a) == 5 * sizeof (int)\n+FAIL: gcc.dg/guality/vla-2.c -O2  line 25 sizeof (a) == 6 * sizeof (int)\n+FAIL: gcc.dg/guality/vla-2.c -O2 -flto -flto-partition=none  line 25 sizeof (a) == 6 * sizeof (int)\n+FAIL: gcc.dg/guality/vla-2.c -O2 -flto -flto-partition=none  line 16 sizeof (a) == 5 * sizeof (int)\n+FAIL: gcc.dg/guality/vla-2.c -Os  line 16 sizeof (a) == 5 * sizeof (int)\n+FAIL: gcc.dg/guality/vla-2.c -O3 -fomit-frame-pointer  line 25 sizeof (a) == 6 * sizeof (int)\n XPASS: gcc.dg/inline_3.c (test for excess errors)\n XPASS: gcc.dg/inline_4.c (test for excess errors)\n-FAIL: gcc.dg/pr44974.c scan-assembler call[^\\n]*_Exit\n-FAIL: gcc.dg/torture/pr51106-2.c -Os  (test for excess errors)\n-FAIL: gcc.dg/torture/pr51106-2.c -O3 -g  (internal compiler error)\n+FAIL: gcc.dg/torture/pr51106-2.c -O2 -flto  (test for excess errors)\n FAIL: gcc.dg/torture/pr51106-2.c -O1  (test for excess errors)\n-FAIL: gcc.dg/torture/pr51106-2.c -O3 -fomit-frame-pointer  (internal compiler error)\n-FAIL: gcc.dg/torture/pr51106-2.c -O2 -flto -fno-use-linker-plugin -flto-partition=none  (internal compiler error)\n-FAIL: gcc.dg/torture/pr51106-2.c -Os  (internal compiler error)\n-FAIL: gcc.dg/torture/pr51106-2.c -O2 -flto -fno-use-linker-plugin -flto-partition=none  (test for excess errors)\n FAIL: gcc.dg/torture/pr51106-2.c -O3 -g  (test for excess errors)\n-FAIL: gcc.dg/torture/pr51106-2.c -O1  (internal compiler error)\n+FAIL: gcc.dg/torture/pr51106-2.c -Os  (test for excess errors)\n FAIL: gcc.dg/torture/pr51106-2.c -O0  (test for excess errors)\n-FAIL: gcc.dg/torture/pr51106-2.c -O0  (internal compiler error)\n-FAIL: gcc.dg/torture/pr51106-2.c -O2  (test for excess errors)\n-FAIL: gcc.dg/torture/pr51106-2.c -O2  (internal compiler error)\n FAIL: gcc.dg/torture/pr51106-2.c -O3 -fomit-frame-pointer  (test for excess errors)\n+FAIL: gcc.dg/torture/pr51106-2.c -O2 -flto -flto-partition=none  (test for excess errors)\n+FAIL: gcc.dg/torture/pr51106-2.c -O2  (test for excess errors)\n XPASS: gcc.dg/unroll_2.c (test for excess errors)\n XPASS: gcc.dg/unroll_3.c (test for excess errors)\n XPASS: gcc.dg/unroll_4.c (test for excess errors)\n-XPASS: gfortran.dg/do_1.f90 -O0  execution test\n-XPASS: gfortran.dg/do_1.f90 -O1  execution test\n-FAIL: gfortran.dg/lto/pr45586 f_lto_pr45586_0.o-f_lto_pr45586_0.o link, -O0 -flto -flto-partition=none -fuse-linker-plugin (internal compiler error)\n-FAIL: gfortran.dg/lto/pr45586 f_lto_pr45586_0.o-f_lto_pr45586_0.o link, -O0 -flto -fuse-linker-plugin -fno-fat-lto-objects  (internal compiler error)\n-UNRESOLVED: gfortran.dg/lto/pr45586 f_lto_pr45586_0.o-f_lto_pr45586_0.o execute -O0 -flto -fuse-linker-plugin -fno-fat-lto-objects\n-FAIL: gfortran.dg/lto/pr45586 f_lto_pr45586_0.o-f_lto_pr45586_0.o link, -O0 -flto -flto-partition=1to1 -fno-use-linker-plugin  (internal compiler error)\n-UNRESOLVED: gfortran.dg/lto/pr45586 f_lto_pr45586_0.o-f_lto_pr45586_0.o execute -O0 -flto -flto-partition=1to1 -fno-use-linker-plugin\n-UNRESOLVED: gfortran.dg/lto/pr45586 f_lto_pr45586_0.o-f_lto_pr45586_0.o execute -O0 -flto -flto-partition=none -fuse-linker-plugin\n-UNRESOLVED: gfortran.dg/lto/pr45586-2 f_lto_pr45586-2_0.o-f_lto_pr45586-2_0.o execute -O0 -flto -flto-partition=none -fuse-linker-plugin\n-UNRESOLVED: gfortran.dg/lto/pr45586-2 f_lto_pr45586-2_0.o-f_lto_pr45586-2_0.o execute -O0 -flto -flto-partition=1to1 -fno-use-linker-plugin\n-FAIL: gfortran.dg/lto/pr45586-2 f_lto_pr45586-2_0.o-f_lto_pr45586-2_0.o link, -O0 -flto -flto-partition=none -fuse-linker-plugin (internal compiler error)\n-UNRESOLVED: gfortran.dg/lto/pr45586-2 f_lto_pr45586-2_0.o-f_lto_pr45586-2_0.o execute -O0 -flto -fuse-linker-plugin -fno-fat-lto-objects\n-FAIL: gfortran.dg/lto/pr45586-2 f_lto_pr45586-2_0.o-f_lto_pr45586-2_0.o link, -O0 -flto -fuse-linker-plugin -fno-fat-lto-objects  (internal compiler error)\n-FAIL: gfortran.dg/lto/pr45586-2 f_lto_pr45586-2_0.o-f_lto_pr45586-2_0.o link, -O0 -flto -flto-partition=1to1 -fno-use-linker-plugin  (internal compiler error)\n-FAIL: gnat.dg/array11.adb (test for warnings, line 12)\n-FAIL: gnat.dg/object_overflow.adb (test for warnings, line 8)\n FAIL: libmudflap.c++/pass55-frag.cxx (-O2) execution test\n FAIL: libmudflap.c++/pass55-frag.cxx ( -O) execution test\n FAIL: libmudflap.c++/pass55-frag.cxx (-O3) execution test\n FAIL: libmudflap.c/fail37-frag.c (-O3) output pattern test\n FAIL: libmudflap.c/fail37-frag.c (-O2) output pattern test\n FAIL: libmudflap.c/fail37-frag.c (-O3) crash test\n FAIL: libmudflap.c/fail37-frag.c (-O2) crash test\n-FAIL: reflect \n-FAIL: sourcelocation -findirect-dispatch output - source compiled test\n-FAIL: sourcelocation -O3 output - source compiled test\n-FAIL: sourcelocation output - source compiled test"}, {"sha": "7d963a8c058e92f00331815fbef5ea0e84f1dfb7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4ac4ce2d38ef15977539ab5cd33876470011c3c", "patch": "@@ -1,3 +1,17 @@\n+2012-10-31  Lawrence Crowl  <crowl@google.com>\n+\n+\t* sbitmap.h (sbitmap_iter_init): Rename bmp_iter_set_init and add\n+\tunused parameter to match bitmap iterator.  Update callers.\n+\t(sbitmap_iter_cond): Rename bmp_iter_set.  Update callers.\n+\t(sbitmap_iter_next): Rename bmp_iter_next and add unused parameter to\n+\tmatch bitmap iterator.  Update callers.\n+\t(EXECUTE_IF_SET_IN_SBITMAP_REV): Remove unused.\n+\t(EXECUTE_IF_SET_IN_SBITMAP): Rename EXECUTE_IF_SET_IN_BITMAP and\n+\tadjust to be identical to the definition in bitmap.h.  Conditionalize\n+\tthe definition based on not having been defined.  Update callers.\n+\t* bitmap.h (EXECUTE_IF_SET_IN_BITMAP): Conditionalize the definition\n+\tbased on not having been defined.  (To match the above.)\n+\n 2012-11-01  Lawrence Crowl  <crowl@google.com>\n \n \t* sbitmap.h (TEST_BIT): Rename bitmap_bit_p, normalizing parameter"}, {"sha": "785ce3c48d73f86a0df4d65fdbd6ffc37ff9244f", "filename": "gcc/bitmap.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=d4ac4ce2d38ef15977539ab5cd33876470011c3c", "patch": "@@ -682,10 +682,13 @@ bmp_iter_and_compl (bitmap_iterator *bi, unsigned *bit_no)\n    should be treated as a read-only variable as it contains loop\n    state.  */\n \n+#ifndef EXECUTE_IF_SET_IN_BITMAP\n+/* See sbitmap.h for the other definition of EXECUTE_IF_SET_IN_BITMAP.  */\n #define EXECUTE_IF_SET_IN_BITMAP(BITMAP, MIN, BITNUM, ITER)\t\t\\\n   for (bmp_iter_set_init (&(ITER), (BITMAP), (MIN), &(BITNUM));\t\t\\\n        bmp_iter_set (&(ITER), &(BITNUM));\t\t\t\t\\\n        bmp_iter_next (&(ITER), &(BITNUM)))\n+#endif\n \n /* Loop over all the bits set in BITMAP1 & BITMAP2, starting with MIN\n    and setting BITNUM to the bit number.  ITER is a bitmap iterator."}, {"sha": "76a6e61aec9c12c81d66ae210fb6ce8dff1ab59e", "filename": "gcc/bt-load.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Fbt-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Fbt-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbt-load.c?ref=d4ac4ce2d38ef15977539ab5cd33876470011c3c", "patch": "@@ -721,7 +721,7 @@ link_btr_uses (btr_def *def_array, btr_user *use_array, sbitmap *bb_out,\n \t\t\t    reaching_defs,\n \t\t\t    btr_defset[reg - first_btr]);\n \t\t    }\n-\t\t  EXECUTE_IF_SET_IN_SBITMAP (reaching_defs_of_reg, 0, uid, sbi)\n+\t\t  EXECUTE_IF_SET_IN_BITMAP (reaching_defs_of_reg, 0, uid, sbi)\n \t\t    {\n \t\t      btr_def def = def_array[uid];\n "}, {"sha": "fae300e4ce1871c30282ea90d5c2732d09da6b0c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d4ac4ce2d38ef15977539ab5cd33876470011c3c", "patch": "@@ -24815,7 +24815,7 @@ core2i7_first_cycle_multipass_backtrack (const void *_data,\n   sbitmap_iterator sbi;\n \n   gcc_assert (bitmap_last_set_bit (data->ready_try_change) < n_ready);\n-  EXECUTE_IF_SET_IN_SBITMAP (data->ready_try_change, 0, i, sbi)\n+  EXECUTE_IF_SET_IN_BITMAP (data->ready_try_change, 0, i, sbi)\n     {\n       ready_try[i] = 0;\n     }"}, {"sha": "9d44ac893011edf8c2bf23dd22c5e63a3f2a6364", "filename": "gcc/ddg.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Fddg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Fddg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fddg.c?ref=d4ac4ce2d38ef15977539ab5cd33876470011c3c", "patch": "@@ -801,7 +801,7 @@ print_sccs (FILE *file, ddg_all_sccs_ptr sccs, ddg_ptr g)\n   for (i = 0; i < sccs->num_sccs; i++)\n     {\n       fprintf (file, \"SCC number: %d\\n\", i);\n-      EXECUTE_IF_SET_IN_SBITMAP (sccs->sccs[i]->nodes, 0, u, sbi)\n+      EXECUTE_IF_SET_IN_BITMAP (sccs->sccs[i]->nodes, 0, u, sbi)\n       {\n         fprintf (file, \"insn num %d\\n\", u);\n         print_rtl_single (file, g->nodes[u].insn);\n@@ -893,7 +893,7 @@ create_scc (ddg_ptr g, sbitmap nodes)\n   bitmap_copy (scc->nodes, nodes);\n \n   /* Mark the backarcs that belong to this SCC.  */\n-  EXECUTE_IF_SET_IN_SBITMAP (nodes, 0, u, sbi)\n+  EXECUTE_IF_SET_IN_BITMAP (nodes, 0, u, sbi)\n     {\n       ddg_edge_ptr e;\n       ddg_node_ptr n = &g->nodes[u];\n@@ -977,7 +977,7 @@ find_successors (sbitmap succ, ddg_ptr g, sbitmap ops)\n   unsigned int i = 0;\n   sbitmap_iterator sbi;\n \n-  EXECUTE_IF_SET_IN_SBITMAP (ops, 0, i, sbi)\n+  EXECUTE_IF_SET_IN_BITMAP (ops, 0, i, sbi)\n     {\n       const sbitmap node_succ = NODE_SUCCESSORS (&g->nodes[i]);\n       bitmap_ior (succ, succ, node_succ);\n@@ -996,7 +996,7 @@ find_predecessors (sbitmap preds, ddg_ptr g, sbitmap ops)\n   unsigned int i = 0;\n   sbitmap_iterator sbi;\n \n-  EXECUTE_IF_SET_IN_SBITMAP (ops, 0, i, sbi)\n+  EXECUTE_IF_SET_IN_BITMAP (ops, 0, i, sbi)\n     {\n       const sbitmap node_preds = NODE_PREDECESSORS (&g->nodes[i]);\n       bitmap_ior (preds, preds, node_preds);\n@@ -1141,7 +1141,7 @@ find_nodes_on_paths (sbitmap result, ddg_ptr g, sbitmap from, sbitmap to)\n       change = 0;\n       bitmap_copy (workset, tmp);\n       bitmap_clear (tmp);\n-      EXECUTE_IF_SET_IN_SBITMAP (workset, 0, u, sbi)\n+      EXECUTE_IF_SET_IN_BITMAP (workset, 0, u, sbi)\n \t{\n \t  ddg_edge_ptr e;\n \t  ddg_node_ptr u_node = &g->nodes[u];\n@@ -1170,7 +1170,7 @@ find_nodes_on_paths (sbitmap result, ddg_ptr g, sbitmap from, sbitmap to)\n       change = 0;\n       bitmap_copy (workset, tmp);\n       bitmap_clear (tmp);\n-      EXECUTE_IF_SET_IN_SBITMAP (workset, 0, u, sbi)\n+      EXECUTE_IF_SET_IN_BITMAP (workset, 0, u, sbi)\n \t{\n \t  ddg_edge_ptr e;\n \t  ddg_node_ptr u_node = &g->nodes[u];\n@@ -1257,7 +1257,7 @@ longest_simple_path (struct ddg * g, int src, int dest, sbitmap nodes)\n       change = 0;\n       bitmap_copy (workset, tmp);\n       bitmap_clear (tmp);\n-      EXECUTE_IF_SET_IN_SBITMAP (workset, 0, u, sbi)\n+      EXECUTE_IF_SET_IN_BITMAP (workset, 0, u, sbi)\n \t{\n \t  ddg_node_ptr u_node = &g->nodes[u];\n "}, {"sha": "d389a426593de669250120b268f4e82c4eab36cc", "filename": "gcc/dse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=d4ac4ce2d38ef15977539ab5cd33876470011c3c", "patch": "@@ -3414,7 +3414,7 @@ dse_step3 (bool for_spills)\n   /* For any block in an infinite loop, we must initialize the out set\n      to all ones.  This could be expensive, but almost never occurs in\n      practice. However, it is common in regression tests.  */\n-  EXECUTE_IF_SET_IN_SBITMAP (unreachable_blocks, 0, i, sbi)\n+  EXECUTE_IF_SET_IN_BITMAP (unreachable_blocks, 0, i, sbi)\n     {\n       if (bitmap_bit_p (all_blocks, i))\n \t{"}, {"sha": "334953204e3a901117b136d21464054da7e1ec49", "filename": "gcc/ebitmap.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Febitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Febitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Febitmap.c?ref=d4ac4ce2d38ef15977539ab5cd33876470011c3c", "patch": "@@ -438,7 +438,7 @@ bitmap_and_into (ebitmap dst, ebitmap src)\n      the result, AND'ing them.  */\n   bitmap_and (dst->wordmask, dst->wordmask, src->wordmask);\n \n-  EXECUTE_IF_SET_IN_SBITMAP (dst->wordmask, 0, i, sbi)\n+  EXECUTE_IF_SET_IN_BITMAP (dst->wordmask, 0, i, sbi)\n     {\n       EBITMAP_ELT_TYPE tmpword = ebitmap_array_get (src, srceltindex++);\n       tmpword &= ebitmap_array_get (dst, dsteltindex++);\n@@ -490,7 +490,7 @@ bitmap_and (ebitmap dst, ebitmap src1, ebitmap src2)\n \t\t      0);\n   bitmap_and (dst->wordmask, src1->wordmask, src2->wordmask);\n \n-  EXECUTE_IF_SET_IN_SBITMAP (dst->wordmask, 0, i, sbi)\n+  EXECUTE_IF_SET_IN_BITMAP (dst->wordmask, 0, i, sbi)\n     {\n       bool src1hasword, src2hasword;\n \n@@ -598,7 +598,7 @@ bitmap_ior_into (ebitmap dst, ebitmap src)\n   newarraysize = src->numwords + dst->numwords;\n   newarray = XNEWVEC (EBITMAP_ELT_TYPE, newarraysize);\n \n-  EXECUTE_IF_SET_IN_SBITMAP (tempmask, 0, i, sbi)\n+  EXECUTE_IF_SET_IN_BITMAP (tempmask, 0, i, sbi)\n     {\n       bool dsthasword, srchasword;\n \n@@ -707,7 +707,7 @@ bitmap_ior (ebitmap dst, ebitmap src1, ebitmap src2)\n   newarraysize = src1->numwords + src2->numwords;\n   newarray = XNEWVEC (EBITMAP_ELT_TYPE, newarraysize);\n \n-  EXECUTE_IF_SET_IN_SBITMAP (tempmask, 0, i, sbi)\n+  EXECUTE_IF_SET_IN_BITMAP (tempmask, 0, i, sbi)\n     {\n       bool src1hasword, src2hasword;\n       EBITMAP_ELT_TYPE tmpword;\n@@ -803,7 +803,7 @@ bitmap_and_compl_into (ebitmap dst, ebitmap src)\n   if (src->numwords == 0)\n     return false;\n \n-  EXECUTE_IF_SET_IN_SBITMAP (dst->wordmask, 0, i, sbi)\n+  EXECUTE_IF_SET_IN_BITMAP (dst->wordmask, 0, i, sbi)\n     {\n       bool srchasword;\n \n@@ -886,7 +886,7 @@ bitmap_and_compl (ebitmap dst, ebitmap src1, ebitmap src2)\n   newarraysize = src1->numwords;\n   newarray = XNEWVEC (EBITMAP_ELT_TYPE, newarraysize);\n \n-  EXECUTE_IF_SET_IN_SBITMAP (src1->wordmask, 0, i, sbi)\n+  EXECUTE_IF_SET_IN_BITMAP (src1->wordmask, 0, i, sbi)\n     {\n       bool src2hasword;\n       EBITMAP_ELT_TYPE tmpword;"}, {"sha": "fef3154baf42064f7c4e358fc9fe78c91b2adf21", "filename": "gcc/ebitmap.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Febitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Febitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Febitmap.h?ref=d4ac4ce2d38ef15977539ab5cd33876470011c3c", "patch": "@@ -94,8 +94,9 @@ typedef struct {\n static inline void\n ebitmap_iter_init (ebitmap_iterator *i, ebitmap bmp, unsigned int min)\n {\n-  sbitmap_iter_init (&i->maskiter, bmp->wordmask,\n-\t\t     min / EBITMAP_ELT_BITS);\n+  unsigned unused;\n+  bmp_iter_set_init (&i->maskiter, bmp->wordmask,\n+\t\t     min / EBITMAP_ELT_BITS, &unused);\n   i->size = bmp->numwords;\n   if (i->size == 0)\n     {\n@@ -131,14 +132,15 @@ static inline bool\n ebitmap_iter_cond (ebitmap_iterator *i, unsigned int *n)\n {\n   unsigned int ourn = 0;\n+  unsigned unused;\n \n   if (i->size == 0)\n     return false;\n \n   if (i->word == 0)\n     {\n-      sbitmap_iter_next (&i->maskiter);\n-      if (!sbitmap_iter_cond (&i->maskiter, &ourn))\n+      bmp_iter_next (&i->maskiter, &unused);\n+      if (!bmp_iter_set (&i->maskiter, &ourn))\n \treturn false;\n       i->bit_num = ourn * EBITMAP_ELT_BITS;\n       i->word = i->ptr[i->eltnum++];"}, {"sha": "d97ad34a49843c39c9d990e96644c7962eca92d0", "filename": "gcc/gcse.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=d4ac4ce2d38ef15977539ab5cd33876470011c3c", "patch": "@@ -1930,15 +1930,15 @@ prune_insertions_deletions (int n_elems)\n      needs to be inserted.  */\n   for (i = 0; i < (unsigned) n_edges; i++)\n     {\n-      EXECUTE_IF_SET_IN_SBITMAP (pre_insert_map[i], 0, j, sbi)\n+      EXECUTE_IF_SET_IN_BITMAP (pre_insert_map[i], 0, j, sbi)\n \tinsertions[j]++;\n     }\n \n   /* Similarly for deletions, but those occur in blocks rather than on\n      edges.  */\n   for (i = 0; i < (unsigned) last_basic_block; i++)\n     {\n-      EXECUTE_IF_SET_IN_SBITMAP (pre_delete_map[i], 0, j, sbi)\n+      EXECUTE_IF_SET_IN_BITMAP (pre_delete_map[i], 0, j, sbi)\n \tdeletions[j]++;\n     }\n \n@@ -1952,7 +1952,7 @@ prune_insertions_deletions (int n_elems)\n       bitmap_set_bit (prune_exprs, j);\n \n   /* Now prune PRE_INSERT_MAP and PRE_DELETE_MAP based on PRUNE_EXPRS.  */\n-  EXECUTE_IF_SET_IN_SBITMAP (prune_exprs, 0, j, sbi)\n+  EXECUTE_IF_SET_IN_BITMAP (prune_exprs, 0, j, sbi)\n     {\n       for (i = 0; i < (unsigned) n_edges; i++)\n \tbitmap_clear_bit (pre_insert_map[i], j);\n@@ -2943,7 +2943,7 @@ should_hoist_expr_to_dom (basic_block expr_bb, struct expr *expr,\n \t pressure for basic blocks newly added in hoisted_bbs.  */\n       if (flag_ira_hoist_pressure && !pred)\n \t{\n-\t  EXECUTE_IF_SET_IN_SBITMAP (visited, 0, i, sbi)\n+\t  EXECUTE_IF_SET_IN_BITMAP (visited, 0, i, sbi)\n \t    if (!bitmap_bit_p (hoisted_bbs, i))\n \t      {\n \t\tbitmap_set_bit (hoisted_bbs, i);"}, {"sha": "78206f35381400f032688e830817f3a2222e68da", "filename": "gcc/ira-lives.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Fira-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Fira-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-lives.c?ref=d4ac4ce2d38ef15977539ab5cd33876470011c3c", "patch": "@@ -1480,7 +1480,7 @@ remove_some_program_points_and_update_live_ranges (void)\n   map = (int *) ira_allocate (sizeof (int) * ira_max_point);\n   n = -1;\n   prev_born_p = prev_dead_p = false;\n-  EXECUTE_IF_SET_IN_SBITMAP (born_or_dead, 0, i, sbi)\n+  EXECUTE_IF_SET_IN_BITMAP (born_or_dead, 0, i, sbi)\n     {\n       born_p = bitmap_bit_p (born, i);\n       dead_p = bitmap_bit_p (dead, i);"}, {"sha": "7fbba70fc010f3e374041a8b607576bd94cca5d8", "filename": "gcc/lower-subreg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Flower-subreg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Flower-subreg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flower-subreg.c?ref=d4ac4ce2d38ef15977539ab5cd33876470011c3c", "patch": "@@ -1589,7 +1589,7 @@ decompose_multiword_subregs (bool decompose_copies)\n \t of a basic block, split those blocks now.  Note that we only handle\n \t the case where splitting a load has caused multiple possibly trapping\n \t loads to appear.  */\n-      EXECUTE_IF_SET_IN_SBITMAP (sub_blocks, 0, i, sbi)\n+      EXECUTE_IF_SET_IN_BITMAP (sub_blocks, 0, i, sbi)\n \t{\n \t  rtx insn, end;\n \t  edge fallthru;"}, {"sha": "64643459af0c0decd51f45dfe28ae27c699fd857", "filename": "gcc/lra-lives.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Flra-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Flra-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-lives.c?ref=d4ac4ce2d38ef15977539ab5cd33876470011c3c", "patch": "@@ -789,7 +789,7 @@ remove_some_program_points_and_update_live_ranges (void)\n   map = XCNEWVEC (int, lra_live_max_point);\n   n = -1;\n   prev_born_p = prev_dead_p = false;\n-  EXECUTE_IF_SET_IN_SBITMAP (born_or_dead, 0, i, sbi)\n+  EXECUTE_IF_SET_IN_BITMAP (born_or_dead, 0, i, sbi)\n     {\n       born_p = bitmap_bit_p (born, i);\n       dead_p = bitmap_bit_p (dead, i);"}, {"sha": "2d7c9e932a4a16b8af309c99c8bd836db8f38140", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=d4ac4ce2d38ef15977539ab5cd33876470011c3c", "patch": "@@ -615,7 +615,7 @@ schedule_reg_move (partial_schedule_ptr ps, int i_reg_move,\n \n   /* Handle the dependencies between the move and previously-scheduled\n      successors.  */\n-  EXECUTE_IF_SET_IN_SBITMAP (move->uses, 0, u, sbi)\n+  EXECUTE_IF_SET_IN_BITMAP (move->uses, 0, u, sbi)\n     {\n       this_insn = ps_rtl_insn (ps, u);\n       this_latency = insn_latency (move->insn, this_insn);\n@@ -829,7 +829,7 @@ apply_reg_moves (partial_schedule_ptr ps)\n       unsigned int i_use;\n       sbitmap_iterator sbi;\n \n-      EXECUTE_IF_SET_IN_SBITMAP (move->uses, 0, i_use, sbi)\n+      EXECUTE_IF_SET_IN_BITMAP (move->uses, 0, i_use, sbi)\n \t{\n \t  replace_rtx (ps->g->nodes[i_use].insn, move->old_reg, move->new_reg);\n \t  df_insn_rescan (ps->g->nodes[i_use].insn);\n@@ -2664,7 +2664,7 @@ find_max_asap (ddg_ptr g, sbitmap nodes)\n   int result = -1;\n   sbitmap_iterator sbi;\n \n-  EXECUTE_IF_SET_IN_SBITMAP (nodes, 0, u, sbi)\n+  EXECUTE_IF_SET_IN_BITMAP (nodes, 0, u, sbi)\n     {\n       ddg_node_ptr u_node = &g->nodes[u];\n \n@@ -2686,7 +2686,7 @@ find_max_hv_min_mob (ddg_ptr g, sbitmap nodes)\n   int result = -1;\n   sbitmap_iterator sbi;\n \n-  EXECUTE_IF_SET_IN_SBITMAP (nodes, 0, u, sbi)\n+  EXECUTE_IF_SET_IN_BITMAP (nodes, 0, u, sbi)\n     {\n       ddg_node_ptr u_node = &g->nodes[u];\n \n@@ -2715,7 +2715,7 @@ find_max_dv_min_mob (ddg_ptr g, sbitmap nodes)\n   int result = -1;\n   sbitmap_iterator sbi;\n \n-  EXECUTE_IF_SET_IN_SBITMAP (nodes, 0, u, sbi)\n+  EXECUTE_IF_SET_IN_BITMAP (nodes, 0, u, sbi)\n     {\n       ddg_node_ptr u_node = &g->nodes[u];\n "}, {"sha": "191c8263a2844c9d584c14a54cde01cb18c6f1b1", "filename": "gcc/sbitmap.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Fsbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Fsbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.c?ref=d4ac4ce2d38ef15977539ab5cd33876470011c3c", "patch": "@@ -656,7 +656,7 @@ bitmap_first_set_bit (const_sbitmap bmap)\n   unsigned int n = 0;\n   sbitmap_iterator sbi;\n \n-  EXECUTE_IF_SET_IN_SBITMAP (bmap, 0, n, sbi)\n+  EXECUTE_IF_SET_IN_BITMAP (bmap, 0, n, sbi)\n     return n;\n   return -1;\n }"}, {"sha": "96590d4e176a609b91ff89b07113dc131aab4a4e", "filename": "gcc/sbitmap.h", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Fsbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Fsbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.h?ref=d4ac4ce2d38ef15977539ab5cd33876470011c3c", "patch": "@@ -45,7 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n      * cardinality\t\t: sbitmap_popcount\n      * choose_one\t\t: bitmap_first_set_bit /\n \t\t\t\t  bitmap_last_set_bit\n-     * forall\t\t\t: EXECUTE_IF_SET_IN_SBITMAP\n+     * forall\t\t\t: EXECUTE_IF_SET_IN_BITMAP\n      * set_copy\t\t\t: bitmap_copy / bitmap_copy_n\n      * set_intersection\t\t: bitmap_and\n      * set_union\t\t: bitmap_ior\n@@ -177,7 +177,8 @@ typedef struct {\n    MIN.  */\n \n static inline void\n-sbitmap_iter_init (sbitmap_iterator *i, const_sbitmap bmp, unsigned int min)\n+bmp_iter_set_init (sbitmap_iterator *i, const_sbitmap bmp,\n+\t\t   unsigned int min, unsigned *bit_no ATTRIBUTE_UNUSED)\n {\n   i->word_num = min / (unsigned int) SBITMAP_ELT_BITS;\n   i->bit_num = min;\n@@ -196,7 +197,7 @@ sbitmap_iter_init (sbitmap_iterator *i, const_sbitmap bmp, unsigned int min)\n    false.  */\n \n static inline bool\n-sbitmap_iter_cond (sbitmap_iterator *i, unsigned int *n)\n+bmp_iter_set (sbitmap_iterator *i, unsigned int *n)\n {\n   /* Skip words that are zeros.  */\n   for (; i->word == 0; i->word = i->ptr[i->word_num])\n@@ -222,7 +223,7 @@ sbitmap_iter_cond (sbitmap_iterator *i, unsigned int *n)\n /* Advance to the next bit.  */\n \n static inline void\n-sbitmap_iter_next (sbitmap_iterator *i)\n+bmp_iter_next (sbitmap_iterator *i, unsigned *bit_no ATTRIBUTE_UNUSED)\n {\n   i->word >>= 1;\n   i->bit_num++;\n@@ -232,38 +233,13 @@ sbitmap_iter_next (sbitmap_iterator *i)\n    iteration, N is set to the index of the bit being visited.  ITER is\n    an instance of sbitmap_iterator used to iterate the bitmap.  */\n \n-#define EXECUTE_IF_SET_IN_SBITMAP(SBITMAP, MIN, N, ITER)\t\\\n-  for (sbitmap_iter_init (&(ITER), (SBITMAP), (MIN));\t\t\\\n-       sbitmap_iter_cond (&(ITER), &(N));\t\t\t\\\n-       sbitmap_iter_next (&(ITER)))\n-\n-#define EXECUTE_IF_SET_IN_SBITMAP_REV(SBITMAP, N, CODE)\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned int word_num_;\t\t\t\t\t\t\\\n-  unsigned int bit_num_;\t\t\t\t\t\t\\\n-  unsigned int size_ = (SBITMAP)->size;\t\t\t\t\t\\\n-  SBITMAP_ELT_TYPE *ptr_ = (SBITMAP)->elms;\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  for (word_num_ = size_; word_num_ > 0; word_num_--)\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      SBITMAP_ELT_TYPE word_ = ptr_[word_num_ - 1];\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      if (word_ != 0)\t\t\t\t\t\t\t\\\n-\tfor (bit_num_ = SBITMAP_ELT_BITS; bit_num_ > 0; bit_num_--)\t\\\n-\t  {\t\t\t\t\t\t\t\t\\\n-\t    SBITMAP_ELT_TYPE _mask = (SBITMAP_ELT_TYPE)1 << (bit_num_ - 1);\\\n-\t\t\t\t\t\t\t\t\t\\\n-\t    if ((word_ & _mask) != 0)\t\t\t\t\t\\\n-\t      {\t\t\t\t\t\t\t\t\\\n-\t\tword_ &= ~ _mask;\t\t\t\t\t\\\n-\t\t(N) = (word_num_ - 1) * SBITMAP_ELT_BITS + bit_num_ - 1;\\\n-\t\tCODE;\t\t\t\t\t\t\t\\\n-\t\tif (word_ == 0)\t\t\t\t\t\t\\\n-\t\t  break;\t\t\t\t\t\t\\\n-\t      }\t\t\t\t\t\t\t\t\\\n-\t  }\t\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-} while (0)\n+#ifndef EXECUTE_IF_SET_IN_BITMAP\n+/* See bitmap.h for the other definition of EXECUTE_IF_SET_IN_BITMAP.  */\n+#define EXECUTE_IF_SET_IN_BITMAP(BITMAP, MIN, BITNUM, ITER)\t\\\n+  for (bmp_iter_set_init (&(ITER), (BITMAP), (MIN), &(BITNUM));\t\\\n+       bmp_iter_set (&(ITER), &(BITNUM));\t\t\t\\\n+       bmp_iter_next (&(ITER), &(BITNUM)))\n+#endif\n \n inline void sbitmap_free (sbitmap map)\n {"}, {"sha": "46edff864a13b7c7b3491d812c2dc10f4fc59c7c", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=d4ac4ce2d38ef15977539ab5cd33876470011c3c", "patch": "@@ -342,7 +342,7 @@ extract_edgelst (sbitmap set, edgelst *el)\n   el->nr_members = 0;\n \n   /* Iterate over each word in the bitset.  */\n-  EXECUTE_IF_SET_IN_SBITMAP (set, 0, i, sbi)\n+  EXECUTE_IF_SET_IN_BITMAP (set, 0, i, sbi)\n     {\n       edgelst_table[edgelst_last++] = rgn_edges[i];\n       el->nr_members++;"}, {"sha": "c5789663f8a56fa034da0f7f104cb247ded47cab", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=d4ac4ce2d38ef15977539ab5cd33876470011c3c", "patch": "@@ -2673,12 +2673,12 @@ prepare_names_to_update (bool insert_phi_p)\n   /* First process names in NEW_SSA_NAMES.  Otherwise, uses of old\n      names may be considered to be live-in on blocks that contain\n      definitions for their replacements.  */\n-  EXECUTE_IF_SET_IN_SBITMAP (new_ssa_names, 0, i, sbi)\n+  EXECUTE_IF_SET_IN_BITMAP (new_ssa_names, 0, i, sbi)\n     prepare_def_site_for (ssa_name (i), insert_phi_p);\n \n   /* If an old name is in NAMES_TO_RELEASE, we cannot remove it from\n      OLD_SSA_NAMES, but we have to ignore its definition site.  */\n-  EXECUTE_IF_SET_IN_SBITMAP (old_ssa_names, 0, i, sbi)\n+  EXECUTE_IF_SET_IN_BITMAP (old_ssa_names, 0, i, sbi)\n     {\n       if (names_to_release == NULL || !bitmap_bit_p (names_to_release, i))\n \tprepare_def_site_for (ssa_name (i), insert_phi_p);\n@@ -2738,7 +2738,7 @@ dump_update_ssa (FILE *file)\n       fprintf (file, \"N_i -> { O_1 ... O_j } means that N_i replaces \"\n \t             \"O_1, ..., O_j\\n\\n\");\n \n-      EXECUTE_IF_SET_IN_SBITMAP (new_ssa_names, 0, i, sbi)\n+      EXECUTE_IF_SET_IN_BITMAP (new_ssa_names, 0, i, sbi)\n \tdump_names_replaced_by (file, ssa_name (i));\n     }\n \n@@ -3242,7 +3242,7 @@ update_ssa (unsigned update_flags)\n \t     for traversal.  */\n \t  sbitmap tmp = sbitmap_alloc (SBITMAP_SIZE (old_ssa_names));\n \t  bitmap_copy (tmp, old_ssa_names);\n-\t  EXECUTE_IF_SET_IN_SBITMAP (tmp, 0, i, sbi)\n+\t  EXECUTE_IF_SET_IN_BITMAP (tmp, 0, i, sbi)\n \t    insert_updated_phi_nodes_for (ssa_name (i), dfs, blocks_to_update,\n \t                                  update_flags);\n \t  sbitmap_free (tmp);\n@@ -3266,7 +3266,7 @@ update_ssa (unsigned update_flags)\n \n   /* Reset the current definition for name and symbol before renaming\n      the sub-graph.  */\n-  EXECUTE_IF_SET_IN_SBITMAP (old_ssa_names, 0, i, sbi)\n+  EXECUTE_IF_SET_IN_BITMAP (old_ssa_names, 0, i, sbi)\n     get_ssa_name_ann (ssa_name (i))->info.current_def = NULL_TREE;\n \n   FOR_EACH_VEC_ELT (tree, symbols_to_rename, i, sym)"}, {"sha": "3503c6411a6316124c6e3b430fbf95c91fa1b169", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4ac4ce2d38ef15977539ab5cd33876470011c3c/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=d4ac4ce2d38ef15977539ab5cd33876470011c3c", "patch": "@@ -1324,7 +1324,7 @@ undistribute_ops_list (enum tree_code opcode,\n   ctable = htab_create (15, oecount_hash, oecount_eq, NULL);\n   subops = XCNEWVEC (VEC (operand_entry_t, heap) *,\n \t\t     VEC_length (operand_entry_t, *ops));\n-  EXECUTE_IF_SET_IN_SBITMAP (candidates, 0, i, sbi0)\n+  EXECUTE_IF_SET_IN_BITMAP (candidates, 0, i, sbi0)\n     {\n       gimple oedef;\n       enum tree_code oecode;\n@@ -1389,7 +1389,7 @@ undistribute_ops_list (enum tree_code opcode,\n          the common operand in their inner chain.  */\n       bitmap_clear (candidates2);\n       nr_candidates2 = 0;\n-      EXECUTE_IF_SET_IN_SBITMAP (candidates, 0, i, sbi0)\n+      EXECUTE_IF_SET_IN_BITMAP (candidates, 0, i, sbi0)\n \t{\n \t  gimple oedef;\n \t  enum tree_code oecode;\n@@ -1431,7 +1431,7 @@ undistribute_ops_list (enum tree_code opcode,\n \t      print_generic_expr (dump_file, oe1->op, 0);\n \t    }\n \t  zero_one_operation (&oe1->op, c->oecode, c->op);\n-\t  EXECUTE_IF_SET_IN_SBITMAP (candidates2, first+1, i, sbi0)\n+\t  EXECUTE_IF_SET_IN_BITMAP (candidates2, first+1, i, sbi0)\n \t    {\n \t      gimple sum;\n \t      oe2 = VEC_index (operand_entry_t, *ops, i);"}]}