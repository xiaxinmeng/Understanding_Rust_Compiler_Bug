{"sha": "9c5bd1e9811babe255ddbbdcda1d00ea5997b826", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM1YmQxZTk4MTFiYWJlMjU1ZGRiYmRjZGExZDAwZWE1OTk3YjgyNg==", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-05-19T10:42:51Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-05-20T08:46:47Z"}, "message": "vect: Replace hardcoded inner loop cost factor\n\nThis patch is to replace the current hardcoded weight factor\n50, which is applied by the loop vectorizer to the cost of\nstatements in an inner loop relative to the loop being\nvectorized, with one newly added member inner_loop_cost_factor\nin loop vinfo.  It also introduces one parameter\nvect-inner-loop-cost-factor whose default value is 50, and\nis used to initialize the inner_loop_cost_factor member.\n\nThe motivation here is that: if targets want to have one\nunique function to gather some information in each add_stmt_cost\ncall, no matter that it's put before or after the cost tweaking\npart for inner loop, it may have the need to adjust (expand or\nshrink) the gathered data as the factor.  Now the factor is\nhardcoded, it's not easily maintained.\n\nBootstrapped/regtested on powerpc64le-linux-gnu P9,\nx86_64-redhat-linux and aarch64-linux-gnu.\n\ngcc/ChangeLog:\n\n\t* doc/invoke.texi (vect-inner-loop-cost-factor): Document new\n\tparameter.\n\t* params.opt (vect-inner-loop-cost-factor): New.\n\t* targhooks.c (default_add_stmt_cost): Replace hardcoded factor\n\t50 with LOOP_VINFO_INNER_LOOP_COST_FACTOR, include head file\n\ttree-vectorizer.h and its required ones.\n\t* config/aarch64/aarch64.c (aarch64_add_stmt_cost): Replace\n\thardcoded factor 50 with LOOP_VINFO_INNER_LOOP_COST_FACTOR.\n\t* config/arm/arm.c (arm_add_stmt_cost): Likewise.\n\t* config/i386/i386.c (ix86_add_stmt_cost): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_add_stmt_cost): Likewise.\n\t* tree-vect-loop.c (vect_compute_single_scalar_iteration_cost):\n\tLikewise.\n\t(_loop_vec_info::_loop_vec_info): Init inner_loop_cost_factor.\n\t* tree-vectorizer.h (_loop_vec_info): Add inner_loop_cost_factor.\n\t(LOOP_VINFO_INNER_LOOP_COST_FACTOR): New macro.", "tree": {"sha": "7d3ee49acadcfbc6c7a4cbb4c096f398db0538f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d3ee49acadcfbc6c7a4cbb4c096f398db0538f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c5bd1e9811babe255ddbbdcda1d00ea5997b826", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c5bd1e9811babe255ddbbdcda1d00ea5997b826", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c5bd1e9811babe255ddbbdcda1d00ea5997b826", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c5bd1e9811babe255ddbbdcda1d00ea5997b826/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a9b3f04c11eb467a8dc504a37dad57a371a0d4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a9b3f04c11eb467a8dc504a37dad57a371a0d4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a9b3f04c11eb467a8dc504a37dad57a371a0d4c"}], "stats": {"total": 49, "additions": 43, "deletions": 6}, "files": [{"sha": "c1e451ec8dcb72bb220569351d828fb0573ab977", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5bd1e9811babe255ddbbdcda1d00ea5997b826/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5bd1e9811babe255ddbbdcda1d00ea5997b826/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=9c5bd1e9811babe255ddbbdcda1d00ea5997b826", "patch": "@@ -15435,7 +15435,10 @@ aarch64_add_stmt_cost (class vec_info *vinfo, void *data, int count,\n \t arbitrary and could potentially be improved with analysis.  */\n       if (where == vect_body && stmt_info\n \t  && stmt_in_inner_loop_p (vinfo, stmt_info))\n-\tcount *= 50; /*  FIXME  */\n+\t{\n+\t  gcc_assert (loop_vinfo);\n+\t  count *= LOOP_VINFO_INNER_LOOP_COST_FACTOR (loop_vinfo); /*  FIXME  */\n+\t}\n \n       retval = (unsigned) (count * stmt_cost);\n       costs->region[where] += retval;"}, {"sha": "caf4e56b9fefd5b2a1b50365dacfaa2370484c5c", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5bd1e9811babe255ddbbdcda1d00ea5997b826/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5bd1e9811babe255ddbbdcda1d00ea5997b826/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=9c5bd1e9811babe255ddbbdcda1d00ea5997b826", "patch": "@@ -12226,7 +12226,11 @@ arm_add_stmt_cost (vec_info *vinfo, void *data, int count,\n \t arbitrary and could potentially be improved with analysis.  */\n       if (where == vect_body && stmt_info\n \t  && stmt_in_inner_loop_p (vinfo, stmt_info))\n-\tcount *= 50;  /* FIXME.  */\n+\t{\n+\t  loop_vec_info loop_vinfo = dyn_cast<loop_vec_info> (vinfo);\n+\t  gcc_assert (loop_vinfo);\n+\t  count *= LOOP_VINFO_INNER_LOOP_COST_FACTOR (loop_vinfo); /* FIXME.  */\n+\t}\n \n       retval = (unsigned) (count * stmt_cost);\n       cost[where] += retval;"}, {"sha": "f3b451835daf03c4fcfe88c089671fe8af4871be", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5bd1e9811babe255ddbbdcda1d00ea5997b826/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5bd1e9811babe255ddbbdcda1d00ea5997b826/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9c5bd1e9811babe255ddbbdcda1d00ea5997b826", "patch": "@@ -22482,7 +22482,11 @@ ix86_add_stmt_cost (class vec_info *vinfo, void *data, int count,\n      arbitrary and could potentially be improved with analysis.  */\n   if (where == vect_body && stmt_info\n       && stmt_in_inner_loop_p (vinfo, stmt_info))\n-    count *= 50;  /* FIXME.  */\n+    {\n+      loop_vec_info loop_vinfo = dyn_cast<loop_vec_info> (vinfo);\n+      gcc_assert (loop_vinfo);\n+      count *= LOOP_VINFO_INNER_LOOP_COST_FACTOR (loop_vinfo); /* FIXME.  */\n+    }\n \n   retval = (unsigned) (count * stmt_cost);\n "}, {"sha": "dfa517bba6c48abc7974a07583825fda977a81c9", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5bd1e9811babe255ddbbdcda1d00ea5997b826/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5bd1e9811babe255ddbbdcda1d00ea5997b826/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=9c5bd1e9811babe255ddbbdcda1d00ea5997b826", "patch": "@@ -5364,7 +5364,11 @@ rs6000_add_stmt_cost (class vec_info *vinfo, void *data, int count,\n \t arbitrary and could potentially be improved with analysis.  */\n       if (where == vect_body && stmt_info\n \t  && stmt_in_inner_loop_p (vinfo, stmt_info))\n-\tcount *= 50;  /* FIXME.  */\n+\t{\n+\t  loop_vec_info loop_vinfo = dyn_cast<loop_vec_info> (vinfo);\n+\t  gcc_assert (loop_vinfo);\n+\t  count *= LOOP_VINFO_INNER_LOOP_COST_FACTOR (loop_vinfo); /* FIXME.  */\n+\t}\n \n       retval = (unsigned) (count * stmt_cost);\n       cost_data->cost[where] += retval;"}, {"sha": "49c74f374978baa312af1b0670bb2f45b7484e3d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5bd1e9811babe255ddbbdcda1d00ea5997b826/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5bd1e9811babe255ddbbdcda1d00ea5997b826/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9c5bd1e9811babe255ddbbdcda1d00ea5997b826", "patch": "@@ -14226,6 +14226,11 @@ code to iterate.  2 allows partial vector loads and stores in all loops.\n The parameter only has an effect on targets that support partial\n vector loads and stores.\n \n+@item vect-inner-loop-cost-factor\n+The factor which the loop vectorizer applies to the cost of statements\n+in an inner loop relative to the loop being vectorized.  The default\n+value is 50.\n+\n @item avoid-fma-max-bits\n Maximum number of bits for which we avoid creating FMAs.\n "}, {"sha": "82600b930baaa3838b3be309acd2a93f23b0bec0", "filename": "gcc/params.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5bd1e9811babe255ddbbdcda1d00ea5997b826/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5bd1e9811babe255ddbbdcda1d00ea5997b826/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=9c5bd1e9811babe255ddbbdcda1d00ea5997b826", "patch": "@@ -1089,4 +1089,8 @@ Bound on number of runtime checks inserted by the vectorizer's loop versioning f\n Common Joined UInteger Var(param_vect_partial_vector_usage) Init(2) IntegerRange(0, 2) Param Optimization\n Controls how loop vectorizer uses partial vectors.  0 means never, 1 means only for loops whose need to iterate can be removed, 2 means for all loops.  The default value is 2.\n \n+-param=vect-inner-loop-cost-factor=\n+Common Joined UInteger Var(param_vect_inner_loop_cost_factor) Init(50) IntegerRange(1, 999999) Param Optimization\n+The factor which the loop vectorizer applies to the cost of statements in an inner loop relative to the loop being vectorized.\n+\n ; This comment is to ensure we retain the blank line above."}, {"sha": "2d2de0431f3e53be9c7ec76685747a806d525c13", "filename": "gcc/targhooks.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5bd1e9811babe255ddbbdcda1d00ea5997b826/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5bd1e9811babe255ddbbdcda1d00ea5997b826/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=9c5bd1e9811babe255ddbbdcda1d00ea5997b826", "patch": "@@ -90,6 +90,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"attribs.h\"\n #include \"asan.h\"\n #include \"emit-rtl.h\"\n+#include \"gimple.h\"\n+#include \"cfgloop.h\"\n+#include \"tree-vectorizer.h\"\n \n bool\n default_legitimate_address_p (machine_mode mode ATTRIBUTE_UNUSED,\n@@ -1480,7 +1483,11 @@ default_add_stmt_cost (class vec_info *vinfo, void *data, int count,\n       arbitrary and could potentially be improved with analysis.  */\n   if (where == vect_body && stmt_info\n       && stmt_in_inner_loop_p (vinfo, stmt_info))\n-    count *= 50;  /* FIXME.  */\n+    {\n+      loop_vec_info loop_vinfo = dyn_cast<loop_vec_info> (vinfo);\n+      gcc_assert (loop_vinfo);\n+      count *= LOOP_VINFO_INNER_LOOP_COST_FACTOR (loop_vinfo);\n+    }\n \n   retval = (unsigned) (count * stmt_cost);\n   cost[where] += retval;"}, {"sha": "ff7673d72500733ed0b113b0007c503fd8a593ae", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5bd1e9811babe255ddbbdcda1d00ea5997b826/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5bd1e9811babe255ddbbdcda1d00ea5997b826/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=9c5bd1e9811babe255ddbbdcda1d00ea5997b826", "patch": "@@ -836,6 +836,7 @@ _loop_vec_info::_loop_vec_info (class loop *loop_in, vec_info_shared *shared)\n     single_scalar_iteration_cost (0),\n     vec_outside_cost (0),\n     vec_inside_cost (0),\n+    inner_loop_cost_factor (param_vect_inner_loop_cost_factor),\n     vectorizable (false),\n     can_use_partial_vectors_p (param_vect_partial_vector_usage != 0),\n     using_partial_vectors_p (false),\n@@ -1237,7 +1238,7 @@ vect_compute_single_scalar_iteration_cost (loop_vec_info loop_vinfo)\n   /* FORNOW.  */\n   innerloop_iters = 1;\n   if (loop->inner)\n-    innerloop_iters = 50; /* FIXME */\n+    innerloop_iters = LOOP_VINFO_INNER_LOOP_COST_FACTOR (loop_vinfo);\n \n   for (i = 0; i < nbbs; i++)\n     {"}, {"sha": "7dcb4cd0b46b03eef90705eed776d9c3dd797101", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5bd1e9811babe255ddbbdcda1d00ea5997b826/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5bd1e9811babe255ddbbdcda1d00ea5997b826/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=9c5bd1e9811babe255ddbbdcda1d00ea5997b826", "patch": "@@ -689,6 +689,10 @@ typedef class _loop_vec_info : public vec_info {\n   /* The cost of the vector loop body.  */\n   int vec_inside_cost;\n \n+  /* The factor used to over weight those statements in an inner loop\n+     relative to the loop being vectorized.  */\n+  unsigned int inner_loop_cost_factor;\n+\n   /* Is the loop vectorizable? */\n   bool vectorizable;\n \n@@ -807,6 +811,7 @@ typedef class _loop_vec_info : public vec_info {\n #define LOOP_VINFO_SINGLE_SCALAR_ITERATION_COST(L) (L)->single_scalar_iteration_cost\n #define LOOP_VINFO_ORIG_LOOP_INFO(L)       (L)->orig_loop_info\n #define LOOP_VINFO_SIMD_IF_COND(L)         (L)->simd_if_cond\n+#define LOOP_VINFO_INNER_LOOP_COST_FACTOR(L) (L)->inner_loop_cost_factor\n \n #define LOOP_VINFO_FULLY_MASKED_P(L)\t\t\\\n   (LOOP_VINFO_USING_PARTIAL_VECTORS_P (L)\t\\"}]}