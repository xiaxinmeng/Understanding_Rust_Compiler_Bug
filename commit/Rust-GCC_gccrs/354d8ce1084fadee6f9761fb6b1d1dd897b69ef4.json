{"sha": "354d8ce1084fadee6f9761fb6b1d1dd897b69ef4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU0ZDhjZTEwODRmYWRlZTZmOTc2MWZiNmIxZDFkZDg5N2I2OWVmNA==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-11-17T01:01:49Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-11-17T01:01:49Z"}, "message": "In gcc/objc/: 2010-11-17 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/objc/:\n2010-11-17  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * objc-act.c (lookup_method_in_protocol_list): Search methods in\n        PROTOCOL_OPTIONAL_CLS_METHODS / PROTOCOL_OPTIONAL_NST_METHODS if\n        they are not found in PROTOCOL_CLS_METHODS / PROTOCOL_NST_METHODS.\n\nIn gcc/testsuite/:\n2010-11-17  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * objc.dg/protocol-optional-1.m: New.\n        * obj-c++.dg/protocol-optional-1.mm: New.\n\nFrom-SVN: r166847", "tree": {"sha": "c5e43cfa2e004941e7921046bb7a9dcefad68617", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5e43cfa2e004941e7921046bb7a9dcefad68617"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/354d8ce1084fadee6f9761fb6b1d1dd897b69ef4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/354d8ce1084fadee6f9761fb6b1d1dd897b69ef4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/354d8ce1084fadee6f9761fb6b1d1dd897b69ef4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/354d8ce1084fadee6f9761fb6b1d1dd897b69ef4/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "109a508a0af670a6b7e927d73661d9412c31c2ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/109a508a0af670a6b7e927d73661d9412c31c2ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/109a508a0af670a6b7e927d73661d9412c31c2ef"}], "stats": {"total": 152, "additions": 138, "deletions": 14}, "files": [{"sha": "dd4814891a720473b158d9136a292e320f2bbad7", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/354d8ce1084fadee6f9761fb6b1d1dd897b69ef4/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/354d8ce1084fadee6f9761fb6b1d1dd897b69ef4/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=354d8ce1084fadee6f9761fb6b1d1dd897b69ef4", "patch": "@@ -1,3 +1,9 @@\n+2010-11-17  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc-act.c (lookup_method_in_protocol_list): Search methods in\n+\tPROTOCOL_OPTIONAL_CLS_METHODS / PROTOCOL_OPTIONAL_NST_METHODS if\n+\tthey are not found in PROTOCOL_CLS_METHODS / PROTOCOL_NST_METHODS.\n+\n 2010-11-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc-act.c (objc_build_setter_call): New."}, {"sha": "96a3998221a72f0080ffeeb4b273a0cf38e2a400", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 31, "deletions": 14, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/354d8ce1084fadee6f9761fb6b1d1dd897b69ef4/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/354d8ce1084fadee6f9761fb6b1d1dd897b69ef4/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=354d8ce1084fadee6f9761fb6b1d1dd897b69ef4", "patch": "@@ -649,30 +649,44 @@ static tree\n lookup_method_in_protocol_list (tree rproto_list, tree sel_name,\n \t\t\t\tint is_class)\n {\n-   tree rproto, p;\n-   tree fnd = 0;\n+  tree rproto, p, m;\n \n    for (rproto = rproto_list; rproto; rproto = TREE_CHAIN (rproto))\n      {\n-        p = TREE_VALUE (rproto);\n+       p = TREE_VALUE (rproto);\n+       m = NULL_TREE;\n \n \tif (TREE_CODE (p) == PROTOCOL_INTERFACE_TYPE)\n \t  {\n-\t    if ((fnd = lookup_method (is_class\n-\t\t\t\t      ? PROTOCOL_CLS_METHODS (p)\n-\t\t\t\t      : PROTOCOL_NST_METHODS (p), sel_name)))\n-\t      ;\n-\t    else if (PROTOCOL_LIST (p))\n-\t      fnd = lookup_method_in_protocol_list (PROTOCOL_LIST (p),\n-\t\t\t\t\t\t    sel_name, is_class);\n+\t    /* First, search the @required protocol methods.  */\n+\t    if (is_class)\n+\t      m = lookup_method (PROTOCOL_CLS_METHODS (p),  sel_name);\n+\t    else\n+\t      m = lookup_method (PROTOCOL_NST_METHODS (p), sel_name);\n+\n+\t    if (m)\n+\t      return m;\n+\n+\t    /* If still not found, search the @optional protocol methods.  */\n+\t    if (is_class)\n+\t      m = lookup_method (PROTOCOL_OPTIONAL_CLS_METHODS (p), sel_name);\n+\t    else\n+\t      m = lookup_method (PROTOCOL_OPTIONAL_NST_METHODS (p), sel_name);\n+\n+\t    if (m)\n+\t      return m;\n+\n+\t    /* If still not found, search the attached protocols.  */\n+\t    if (PROTOCOL_LIST (p))\n+\t      m = lookup_method_in_protocol_list (PROTOCOL_LIST (p),\n+\t\t\t\t\t\t  sel_name, is_class);\n+\t    if (m)\n+\t      return m;\n \t  }\n \telse\n           {\n \t    ; /* An identifier...if we could not find a protocol.  */\n           }\n-\n-\tif (fnd)\n-\t  return fnd;\n      }\n \n    return 0;\n@@ -8642,7 +8656,10 @@ objc_add_method (tree klass, tree method, int is_class, bool is_optional)\n {\n   tree mth;\n \n-  /* @optional methods are added to protocol's OPTIONAL list */\n+  /* @optional methods are added to protocol's OPTIONAL list.  Note\n+     that this disables checking that the methods are implemented by\n+     classes implementing the protocol, since these checks only use\n+     the CLASS_CLS_METHODS and CLASS_NST_METHODS.  */\n   if (is_optional)\n     {\n       gcc_assert (TREE_CODE (klass) == PROTOCOL_INTERFACE_TYPE);"}, {"sha": "01c6cb189c2bfde5da6e42cb54b42d02e15822f3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/354d8ce1084fadee6f9761fb6b1d1dd897b69ef4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/354d8ce1084fadee6f9761fb6b1d1dd897b69ef4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=354d8ce1084fadee6f9761fb6b1d1dd897b69ef4", "patch": "@@ -1,3 +1,8 @@\n+2010-11-17  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc.dg/protocol-optional-1.m: New.\n+\t* obj-c++.dg/protocol-optional-1.mm: New.\n+\n 2010-11-16  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.target/powerpc/ppc-fma-2.c: Use -ffp-contract=off."}, {"sha": "bc4a3d07e978081000dcb89328bcf2bbda1c256c", "filename": "gcc/testsuite/obj-c++.dg/protocol-optional-1.mm", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/354d8ce1084fadee6f9761fb6b1d1dd897b69ef4/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fprotocol-optional-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/354d8ce1084fadee6f9761fb6b1d1dd897b69ef4/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fprotocol-optional-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fprotocol-optional-1.mm?ref=354d8ce1084fadee6f9761fb6b1d1dd897b69ef4", "patch": "@@ -0,0 +1,48 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+/* Test that @optional for @protocol works.  */\n+\n+@protocol MyProtocol\n++ (int)classMethod;\n+- (int)method;\n+@optional\n++ (int)optionalClassMethod;\n+- (int)optionalMethod;\n+@end\n+\n+@interface MyRootClass <MyProtocol>\n+@end\n+\n+/* The implementation implements both the @required methods, but none\n+   of the @optional ones.  There should be no warnings as the\n+   @optional methods are optional. ;-)  */\n+@implementation MyRootClass\n++ (int)classMethod\n+{\n+  return 20;\n+}\n+- (int)method\n+{\n+  return 11;\n+}\n+@end\n+\n+int function (id <MyProtocol> object1,\n+\t      MyRootClass *object2)\n+{\n+  /* Test that there are no warnings if you try to use an @optional\n+     method with an object of the class.  */\n+  int i = 0;\n+\n+  i += [object1 method];\n+  i += [object2 method];\n+  i += [MyRootClass classMethod];\n+  i += [object1 optionalMethod];\n+  i += [object2 optionalMethod];\n+  i += [MyRootClass optionalClassMethod];\n+\n+  return i;\n+}"}, {"sha": "bc4a3d07e978081000dcb89328bcf2bbda1c256c", "filename": "gcc/testsuite/objc.dg/protocol-optional-1.m", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/354d8ce1084fadee6f9761fb6b1d1dd897b69ef4/gcc%2Ftestsuite%2Fobjc.dg%2Fprotocol-optional-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/354d8ce1084fadee6f9761fb6b1d1dd897b69ef4/gcc%2Ftestsuite%2Fobjc.dg%2Fprotocol-optional-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fprotocol-optional-1.m?ref=354d8ce1084fadee6f9761fb6b1d1dd897b69ef4", "patch": "@@ -0,0 +1,48 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+/* Test that @optional for @protocol works.  */\n+\n+@protocol MyProtocol\n++ (int)classMethod;\n+- (int)method;\n+@optional\n++ (int)optionalClassMethod;\n+- (int)optionalMethod;\n+@end\n+\n+@interface MyRootClass <MyProtocol>\n+@end\n+\n+/* The implementation implements both the @required methods, but none\n+   of the @optional ones.  There should be no warnings as the\n+   @optional methods are optional. ;-)  */\n+@implementation MyRootClass\n++ (int)classMethod\n+{\n+  return 20;\n+}\n+- (int)method\n+{\n+  return 11;\n+}\n+@end\n+\n+int function (id <MyProtocol> object1,\n+\t      MyRootClass *object2)\n+{\n+  /* Test that there are no warnings if you try to use an @optional\n+     method with an object of the class.  */\n+  int i = 0;\n+\n+  i += [object1 method];\n+  i += [object2 method];\n+  i += [MyRootClass classMethod];\n+  i += [object1 optionalMethod];\n+  i += [object2 optionalMethod];\n+  i += [MyRootClass optionalClassMethod];\n+\n+  return i;\n+}"}]}