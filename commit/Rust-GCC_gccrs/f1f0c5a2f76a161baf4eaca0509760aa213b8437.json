{"sha": "f1f0c5a2f76a161baf4eaca0509760aa213b8437", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFmMGM1YTJmNzZhMTYxYmFmNGVhY2EwNTA5NzYwYWEyMTNiODQzNw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-11-19T02:22:53Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-11-19T02:22:53Z"}, "message": "exception_support.h: New header file.\n\n\t* libsupc++/exception_support.h: New header file.\n\t* libsupc++/vec.cc: Include it.\n\t(__cxa_vec_new2): Recatch exceptions before rethrows.\n\t(__cxa_vec_new3): Likewise.\n\t(__cxa_vec_ctor): Likewise.\n\t(__cxa_vec_cctor): Likewise.\n\t(__cxa_vec_dtor): Likewise.\n\t(__cxa_vec_delete2): Likewise.\n\t(__cxa_vec_delete3): Likewise.\n\nFrom-SVN: r37551", "tree": {"sha": "aae3d1ce89bb09f8e1fb035472aa366d7421430a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aae3d1ce89bb09f8e1fb035472aa366d7421430a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1f0c5a2f76a161baf4eaca0509760aa213b8437", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1f0c5a2f76a161baf4eaca0509760aa213b8437", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1f0c5a2f76a161baf4eaca0509760aa213b8437", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1f0c5a2f76a161baf4eaca0509760aa213b8437/comments", "author": null, "committer": null, "parents": [{"sha": "0a8ad417906348bc502b75cabced1e69a930eef0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a8ad417906348bc502b75cabced1e69a930eef0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a8ad417906348bc502b75cabced1e69a930eef0"}], "stats": {"total": 118, "additions": 64, "deletions": 54}, "files": [{"sha": "64aed389d70d8fb0ca73b35b510ec9e11b5f8855", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f0c5a2f76a161baf4eaca0509760aa213b8437/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f0c5a2f76a161baf4eaca0509760aa213b8437/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f1f0c5a2f76a161baf4eaca0509760aa213b8437", "patch": "@@ -1,3 +1,15 @@\n+2000-11-18  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* libsupc++/exception_support.h: New header file.\n+\t* libsupc++/vec.cc: Include it.\n+\t(__cxa_vec_new2): Recatch exceptions before rethrows.\n+\t(__cxa_vec_new3): Likewise.\n+\t(__cxa_vec_ctor): Likewise.\n+\t(__cxa_vec_cctor): Likewise.\n+\t(__cxa_vec_dtor): Likewise.\n+\t(__cxa_vec_delete2): Likewise.\n+\t(__cxa_vec_delete3): Likewise.\n+\n 2000-11-17  Theodore Papadopoulo  <Theodore.Papadopoulo@sophia.inria.fr>\n \n \t* include/bits/stl_tree.h: Overload operators == and != to be able"}, {"sha": "ace0927cc1f84bd37388256840846c224b0de550", "filename": "libstdc++-v3/libsupc++/exception_support.cc", "status": "modified", "additions": 12, "deletions": 37, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f0c5a2f76a161baf4eaca0509760aa213b8437/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_support.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f0c5a2f76a161baf4eaca0509760aa213b8437/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_support.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_support.cc?ref=f1f0c5a2f76a161baf4eaca0509760aa213b8437", "patch": "@@ -32,8 +32,7 @@\n #include \"typeinfo\"\n #include \"exception\"\n #include <cstddef>\n-#include \"gansidecl.h\" /* Needed to support macros used in eh-common.h. */\n-#include \"eh-common.h\"\n+#include \"exception_support.h\"\n \n /* Define terminate, unexpected, set_terminate, set_unexpected as\n    well as the default terminate func and default unexpected func.  */\n@@ -80,40 +79,6 @@ std::unexpected ()\n   __unexpected_func ();\n }\n \n-/* The type of a function called to clean up an exception object.\n-   (These will be destructors.)  Under the old ABI, these take a\n-   second argument (the `in-charge' argument), that indicates whether\n-   or not do delete the object, and whether or not to destroy virtual\n-   bases.  Under the new ABI, there is no second argument.  */\n-#if !defined (__GXX_ABI_VERSION) || __GXX_ABI_VERSION < 100\n-typedef void (*cleanup_fn)(void *, int);\n-/* The `2' is the value for the in-charge parameter that indicates\n-   that virtual bases should be destroyed.  */\n-#define CALL_CLEANUP(FN, THIS) FN (THIS, 2)\n-#else\n-typedef void (*cleanup_fn)(void *);\n-#define CALL_CLEANUP(FN, THIS) FN (THIS)\n-#endif\n-\n-/* C++-specific state about the current exception.\n-   This must match init_exception_processing().\n-\n-   Note that handlers and caught are not redundant; when rethrown, an\n-   exception can have multiple active handlers and still be considered\n-   uncaught.  */\n-\n-struct cp_eh_info\n-{\n-  __eh_info eh_info;\n-  void *value;\n-  void *type;\n-  cleanup_fn cleanup;\n-  bool caught;\n-  cp_eh_info *next;\n-  long handlers;\n-  void *original_value;\n-};\n-\n /* Language-specific EH info pointer, defined in libgcc2. */\n \n extern \"C\" cp_eh_info **__get_eh_info (); \t// actually void **\n@@ -281,7 +246,7 @@ __cp_pop_exception (cp_eh_info *p)\n /* We're doing a rethrow.  Find the currently handled exception, mark it\n    uncaught, and move it to the top of the EH stack.  */\n \n-extern \"C\" void\n+extern \"C\" cp_eh_info *\n __uncatch_exception (void)\n {\n   cp_eh_info **stack = __get_eh_info ();\n@@ -308,6 +273,16 @@ __uncatch_exception (void)\n     }\n \n   p->caught = false;\n+\n+  return p;\n+}\n+\n+/* Mark P as caught after we previously marked it as uncaught.  */\n+\n+extern \"C\" void\n+__recatch_exception (cp_eh_info *p)\n+{\n+  p->caught = true;\n }\n \n /* As per [except.unexpected]:"}, {"sha": "f00d3c11b2301f64efde09baa79736fa6e6e0925", "filename": "libstdc++-v3/libsupc++/vec.cc", "status": "modified", "additions": 40, "deletions": 17, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f0c5a2f76a161baf4eaca0509760aa213b8437/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f0c5a2f76a161baf4eaca0509760aa213b8437/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvec.cc?ref=f1f0c5a2f76a161baf4eaca0509760aa213b8437", "patch": "@@ -32,13 +32,21 @@\n #include <new>\n #include <exception>\n \n-// Exception handling hook, to mark current exception as not caught --\n-// generally because we're about to rethrow it after some cleanup.\n-extern \"C\" void __uncatch_exception (void);\n+#include \"exception_support.h\"\n \n namespace __cxxabiv1\n {\n \n+namespace \n+{\n+struct uncatch_exception {\n+  uncatch_exception () { p = __uncatch_exception (); }\n+  ~uncatch_exception () { __recatch_exception (p); }\n+\n+  cp_eh_info *p;\n+};\n+}\n+\n /* allocate and construct array */\n extern \"C\" void *\n __cxa_vec_new (std::size_t element_count,\n@@ -76,8 +84,10 @@ __cxa_vec_new2 (std::size_t element_count,\n     }\n   catch (...)\n     {\n-      __uncatch_exception ();\n-      dealloc (base - padding_size);\n+      {\n+\tuncatch_exception ue;\n+\tdealloc (base - padding_size);\n+      }\n       throw;\n     }\n   return base;\n@@ -107,8 +117,10 @@ __cxa_vec_new3 (std::size_t element_count,\n     }\n   catch (...)\n     {\n-      __uncatch_exception ();\n-      dealloc (base - padding_size, size);\n+      {\n+\tuncatch_exception ue;\n+\tdealloc (base - padding_size, size);\n+      }\n       throw;\n     }\n   return base;\n@@ -133,8 +145,10 @@ __cxa_vec_ctor (void *array_address,\n     }\n   catch (...)\n     {\n-      __uncatch_exception ();\n-      __cxa_vec_dtor (array_address, ix, element_size, destructor);\n+      {\n+\tuncatch_exception ue;\n+\t__cxa_vec_dtor (array_address, ix, element_size, destructor);\n+      }\n       throw;\n     }\n }\n@@ -162,8 +176,10 @@ __cxa_vec_cctor (void *dest_array,\n     }\n   catch (...)\n     {\n-      __uncatch_exception ();\n-      __cxa_vec_dtor (dest_array, ix, element_size, destructor);\n+      {\n+\tuncatch_exception ue;\n+\t__cxa_vec_dtor (dest_array, ix, element_size, destructor);\n+      }\n       throw;\n     }\n }\n@@ -197,8 +213,11 @@ __cxa_vec_dtor (void *array_address,\n             // [except.ctor]/3 If a destructor called during stack unwinding\n             // exits with an exception, terminate is called.\n             std::terminate ();\n-          __uncatch_exception ();\n-          __cxa_vec_dtor (array_address, ix, element_size, destructor);\n+\t  {\n+\t    uncatch_exception ue;\n+\t    __cxa_vec_dtor (array_address, ix, element_size,\n+\t\t\t    destructor);\n+\t  }\n           throw;\n         }\n     }\n@@ -236,8 +255,10 @@ __cxa_vec_delete2 (void *array_address,\n         }\n       catch (...)\n         {\n-          __uncatch_exception ();\n-          dealloc (base);\n+\t  {\n+\t    uncatch_exception ue;\n+\t    dealloc (base);\n+\t  }\n           throw;\n         }\n     }\n@@ -266,8 +287,10 @@ __cxa_vec_delete3 (void *array_address,\n         }\n       catch (...)\n         {\n-          __uncatch_exception ();\n-          dealloc (base, size);\n+\t  {\n+\t    uncatch_exception ue;\n+\t    dealloc (base, size);\n+\t  }\n           throw;\n         }\n     }"}]}