{"sha": "0889116d34c9afe7c6bb0368f0c246bd1a59c28d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg4OTExNmQzNGM5YWZlN2M2YmIwMzY4ZjBjMjQ2YmQxYTU5YzI4ZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-01-29T22:04:57Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-01-29T22:04:57Z"}, "message": "h8300.h (PREDICATE_CODES): Add entries for general_operand_src and general_operand_dst.\n\n\t* config/h8300/h8300.h (PREDICATE_CODES): Add entries for\n\tgeneral_operand_src and general_operand_dst.\n\nFrom-SVN: r62110", "tree": {"sha": "6fdcac67e0b3d6653f7b211a0cbc128a88281591", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fdcac67e0b3d6653f7b211a0cbc128a88281591"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0889116d34c9afe7c6bb0368f0c246bd1a59c28d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0889116d34c9afe7c6bb0368f0c246bd1a59c28d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0889116d34c9afe7c6bb0368f0c246bd1a59c28d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0889116d34c9afe7c6bb0368f0c246bd1a59c28d/comments", "author": null, "committer": null, "parents": [{"sha": "be5a07ac0145404878abc5629b081cba8c9b6452", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be5a07ac0145404878abc5629b081cba8c9b6452", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be5a07ac0145404878abc5629b081cba8c9b6452"}], "stats": {"total": 55, "additions": 32, "deletions": 23}, "files": [{"sha": "991b364533006f6a9acaa8cfab36afeb9e3811f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0889116d34c9afe7c6bb0368f0c246bd1a59c28d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0889116d34c9afe7c6bb0368f0c246bd1a59c28d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0889116d34c9afe7c6bb0368f0c246bd1a59c28d", "patch": "@@ -1,3 +1,8 @@\n+2003-01-29  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300.h (PREDICATE_CODES): Add entries for\n+\tgeneral_operand_src and general_operand_dst.\n+\n 2003-01-29  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000.c (function_arg_pass_by_reference):\n@@ -13,24 +18,24 @@\n \t(LEGITIMIZE_ADDRESS, THUMB_LEGITIMIZE_ADDRESS): Wrap with\n \tdo ... while (0)\n \n-2003-01-29\tJoel Sherrill <joel@OARcorp.com>\n+2003-01-29  Joel Sherrill  <joel@OARcorp.com>\n \n \t* gthr-rtems.h: Define __GTHREAD_MUTEX_INIT.  Apparently no code\n \tdepended on it being defined until now. This was tracked as PR9296.\n \n-2003-01-13\tJoel Sherrill <joel@OARcorp.com>\n+2003-01-13  Joel Sherrill  <joel@OARcorp.com>\n \n \t* config/mips/rtems.h: Predefine __USE_INIT_FINI__ so generic\n \tRTEMS code knows which C++ initialization style the toolset\n \tconfiguration is using. This was tracked as PR9295.\n \n-2003-01-29\tJoel Sherrill <joel@OARcorp.com>\n+2003-01-29  Joel Sherrill  <joel@OARcorp.com>\n \n \t* config/m68k/t-crtstuff: Replace spaces with tabs, add \n \t $(MULTILIB_CFLAGS) as compiler option and multilib crtbegin/end.o.\n \tThis issue was tracked as PR9293.\n \n-2003-01-29\tJoel Sherrill <joel@OARcorp.com>\n+2003-01-29  Joel Sherrill  <joel@OARcorp.com>\n \n \t* config.gcc (hppa1.1-rtems):  Did not include t-rtems nor enable\n \tRTEMS threads."}, {"sha": "9ff5ca536e761e8848e14e373495eac76030fd6b", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0889116d34c9afe7c6bb0368f0c246bd1a59c28d/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0889116d34c9afe7c6bb0368f0c246bd1a59c28d/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=0889116d34c9afe7c6bb0368f0c246bd1a59c28d", "patch": "@@ -1270,25 +1270,29 @@ struct cum_arg\n \n /* Define the codes that are matched by predicates in h8300.c.  */\n \n-#define PREDICATE_CODES\t\t\t\t\t\\\n-  {\"single_one_operand\", {CONST_INT}},\t\t\t\\\n-  {\"single_zero_operand\", {CONST_INT}},\t\t\t\\\n-  {\"call_insn_operand\", {MEM}},\t\t\t\t\\\n-  {\"small_call_insn_operand\", {MEM}},\t\t\t\\\n-  {\"jump_address_operand\", {REG, MEM}},\t\t\t\\\n-  {\"two_insn_adds_subs_operand\", {CONST_INT}},\t\t\\\n-  {\"bit_operand\", {REG, SUBREG, MEM}},\t\t\t\\\n-  {\"bit_memory_operand\", {MEM}},\t\t\t\\\n-  {\"stack_pointer_operand\", {REG}},\t\t\t\\\n-  {\"const_int_le_2_operand\", {CONST_INT}},\t\t\\\n-  {\"const_int_le_6_operand\", {CONST_INT}},\t\t\\\n-  {\"const_int_gt_2_operand\", {CONST_INT}},\t\t\\\n-  {\"const_int_ge_8_operand\", {CONST_INT}},\t\t\\\n-  {\"const_int_qi_operand\", {CONST_INT}},\t\t\\\n-  {\"const_int_hi_operand\", {CONST_INT}},\t\t\\\n-  {\"incdec_operand\", {CONST_INT}},\t\t\t\\\n-  {\"bit_operator\", {XOR, AND, IOR}},\t\t\t\\\n-  {\"nshift_operator\", {ASHIFTRT, LSHIFTRT, ASHIFT}},\t\\\n+#define PREDICATE_CODES\t\t\t\t\t\t\t\\\n+  {\"general_operand_src\", {CONST_INT, CONST_DOUBLE, CONST, SYMBOL_REF,\t\\\n+\t\t\t   LABEL_REF, SUBREG, REG, MEM, ADDRESSOF}},\t\\\n+  {\"general_operand_dst\", {CONST_INT, CONST_DOUBLE, CONST, SYMBOL_REF,\t\\\n+\t\t\t   LABEL_REF, SUBREG, REG, MEM, ADDRESSOF}},\t\\\n+  {\"single_one_operand\", {CONST_INT}},\t\t\t\t\t\\\n+  {\"single_zero_operand\", {CONST_INT}},\t\t\t\t\t\\\n+  {\"call_insn_operand\", {MEM}},\t\t\t\t\t\t\\\n+  {\"small_call_insn_operand\", {MEM}},\t\t\t\t\t\\\n+  {\"jump_address_operand\", {REG, MEM}},\t\t\t\t\t\\\n+  {\"two_insn_adds_subs_operand\", {CONST_INT}},\t\t\t\t\\\n+  {\"bit_operand\", {REG, SUBREG, MEM}},\t\t\t\t\t\\\n+  {\"bit_memory_operand\", {MEM}},\t\t\t\t\t\\\n+  {\"stack_pointer_operand\", {REG}},\t\t\t\t\t\\\n+  {\"const_int_le_2_operand\", {CONST_INT}},\t\t\t\t\\\n+  {\"const_int_le_6_operand\", {CONST_INT}},\t\t\t\t\\\n+  {\"const_int_gt_2_operand\", {CONST_INT}},\t\t\t\t\\\n+  {\"const_int_ge_8_operand\", {CONST_INT}},\t\t\t\t\\\n+  {\"const_int_qi_operand\", {CONST_INT}},\t\t\t\t\\\n+  {\"const_int_hi_operand\", {CONST_INT}},\t\t\t\t\\\n+  {\"incdec_operand\", {CONST_INT}},\t\t\t\t\t\\\n+  {\"bit_operator\", {XOR, AND, IOR}},\t\t\t\t\t\\\n+  {\"nshift_operator\", {ASHIFTRT, LSHIFTRT, ASHIFT}},\t\t\t\\\n   {\"eqne_operator\", {EQ, NE}},\n \n #endif /* ! GCC_H8300_H */"}]}