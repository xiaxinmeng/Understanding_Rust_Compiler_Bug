{"sha": "ec37f1bc59f747335ec373f1d2062e338ce3a455", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMzN2YxYmM1OWY3NDczMzVlYzM3M2YxZDIwNjJlMzM4Y2UzYTQ1NQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-01-09T21:13:49Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-01-09T21:13:49Z"}, "message": "Add new file gcc/testsuite/jit.dg/test-constants.c erroneously omitted from r219401\n\nFrom-SVN: r219404", "tree": {"sha": "cd75f54b52603d687032da5fa6e16001c215e91b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd75f54b52603d687032da5fa6e16001c215e91b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec37f1bc59f747335ec373f1d2062e338ce3a455", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec37f1bc59f747335ec373f1d2062e338ce3a455", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec37f1bc59f747335ec373f1d2062e338ce3a455", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec37f1bc59f747335ec373f1d2062e338ce3a455/comments", "author": null, "committer": null, "parents": [{"sha": "40e2396121e547e79dd2492372176c18355fab4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40e2396121e547e79dd2492372176c18355fab4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40e2396121e547e79dd2492372176c18355fab4f"}], "stats": {"total": 339, "additions": 339, "deletions": 0}, "files": [{"sha": "a5092494c5c27e735c511fa282753cce3e0d2672", "filename": "gcc/testsuite/jit.dg/test-constants.c", "status": "added", "additions": 339, "deletions": 0, "changes": 339, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec37f1bc59f747335ec373f1d2062e338ce3a455/gcc%2Ftestsuite%2Fjit.dg%2Ftest-constants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec37f1bc59f747335ec373f1d2062e338ce3a455/gcc%2Ftestsuite%2Fjit.dg%2Ftest-constants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-constants.c?ref=ec37f1bc59f747335ec373f1d2062e338ce3a455", "patch": "@@ -0,0 +1,339 @@\n+#include <limits.h>\n+#include <float.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+static void\n+make_test_of_constant (gcc_jit_context *ctxt,\n+                       gcc_jit_type *type,\n+                       gcc_jit_rvalue *rvalue,\n+                       const char *funcname)\n+{\n+  /* Make a test function of the form:\n+       T funcname (void)\n+       {\n+\t  return VALUE;\n+       }\n+     and return a debug dump of VALUE so that\n+     the caller can sanity-check the debug dump implementation.\n+  */\n+  gcc_jit_function *test_fn =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+\t\t\t\t  GCC_JIT_FUNCTION_EXPORTED,\n+\t\t\t\t  type,\n+\t\t\t\t  funcname,\n+\t\t\t\t  0, NULL,\n+\t\t\t\t  0);\n+  gcc_jit_block *initial = gcc_jit_function_new_block (test_fn, \"initial\");\n+  gcc_jit_block_end_with_return (initial, NULL, rvalue);\n+}\n+\n+/**********************************************************************\n+ Tests of gcc_jit_context_new_rvalue_from_int.\n+ **********************************************************************/\n+\n+static const char *\n+make_test_of_int_constant (gcc_jit_context *ctxt,\n+\t\t\t   gcc_jit_type *type,\n+\t\t\t   int value,\n+\t\t\t   const char *funcname)\n+{\n+  /* Make a test function of the form:\n+       int funcname (void)\n+       {\n+\t  return VALUE;\n+       }\n+     and return a debug dump of VALUE so that\n+     the caller can sanity-check the debug dump implementation.\n+  */\n+  gcc_jit_rvalue *rvalue =\n+    gcc_jit_context_new_rvalue_from_int (ctxt, type, value);\n+  make_test_of_constant (ctxt, type, rvalue, funcname);\n+  return gcc_jit_object_get_debug_string (\n+    gcc_jit_rvalue_as_object (rvalue));\n+}\n+\n+static void\n+make_tests_of_int_constants (gcc_jit_context *ctxt)\n+{\n+  gcc_jit_type *int_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n+\n+  CHECK_STRING_VALUE (\n+    make_test_of_int_constant (ctxt,\n+\t\t\t       int_type,\n+\t\t\t       0,\n+\t\t\t       \"test_int_constant_0\"),\n+    \"(int)0\");\n+  make_test_of_int_constant (ctxt,\n+                             int_type,\n+                             INT_MAX,\n+                             \"test_int_constant_INT_MAX\");\n+  make_test_of_int_constant (ctxt,\n+                             int_type,\n+                             INT_MIN,\n+                             \"test_int_constant_INT_MIN\");\n+}\n+\n+static void\n+verify_int_constants (gcc_jit_result *result)\n+{\n+  typedef int (*test_fn) (void);\n+\n+  test_fn test_int_constant_0 =\n+    (test_fn)gcc_jit_result_get_code (result,\n+\t\t\t\t      \"test_int_constant_0\");\n+  CHECK_NON_NULL (test_int_constant_0);\n+  CHECK_VALUE (test_int_constant_0 (), 0);\n+\n+  test_fn test_int_constant_INT_MAX =\n+    (test_fn)gcc_jit_result_get_code (result,\n+\t\t\t\t      \"test_int_constant_INT_MAX\");\n+  CHECK_NON_NULL (test_int_constant_INT_MAX);\n+  CHECK_VALUE (test_int_constant_INT_MAX (), INT_MAX);\n+\n+  test_fn test_int_constant_INT_MIN =\n+    (test_fn)gcc_jit_result_get_code (result,\n+\t\t\t\t      \"test_int_constant_INT_MIN\");\n+  CHECK_NON_NULL (test_int_constant_INT_MIN);\n+  CHECK_VALUE (test_int_constant_INT_MIN (), INT_MIN);\n+}\n+\n+/**********************************************************************\n+ Tests of gcc_jit_context_new_rvalue_from_long.\n+ **********************************************************************/\n+\n+static const char *\n+make_test_of_long_constant (gcc_jit_context *ctxt,\n+\t\t\t   gcc_jit_type *type,\n+\t\t\t   long value,\n+\t\t\t   const char *funcname)\n+{\n+  /* Make a test function of the form:\n+       long funcname (void)\n+       {\n+\t  return VALUE;\n+       }\n+     and return a debug dump of VALUE so that\n+     the caller can sanity-check the debug dump implementation.\n+  */\n+  gcc_jit_rvalue *rvalue =\n+    gcc_jit_context_new_rvalue_from_long (ctxt, type, value);\n+  make_test_of_constant (ctxt, type, rvalue, funcname);\n+  return gcc_jit_object_get_debug_string (\n+    gcc_jit_rvalue_as_object (rvalue));\n+}\n+\n+static void\n+make_tests_of_long_constants (gcc_jit_context *ctxt)\n+{\n+  gcc_jit_type *long_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_LONG);\n+\n+  CHECK_STRING_VALUE (\n+    make_test_of_long_constant (ctxt,\n+\t\t\t       long_type,\n+\t\t\t       0,\n+\t\t\t       \"test_long_constant_0\"),\n+    \"(long)0\");\n+  make_test_of_long_constant (ctxt,\n+                             long_type,\n+                             LONG_MAX,\n+                             \"test_long_constant_LONG_MAX\");\n+  make_test_of_long_constant (ctxt,\n+                             long_type,\n+                             LONG_MIN,\n+                             \"test_long_constant_LONG_MIN\");\n+}\n+\n+static void\n+verify_long_constants (gcc_jit_result *result)\n+{\n+  typedef long (*test_fn) (void);\n+\n+  test_fn test_long_constant_0 =\n+    (test_fn)gcc_jit_result_get_code (result,\n+\t\t\t\t      \"test_long_constant_0\");\n+  CHECK_NON_NULL (test_long_constant_0);\n+  CHECK_VALUE (test_long_constant_0 (), 0);\n+\n+  test_fn test_long_constant_LONG_MAX =\n+    (test_fn)gcc_jit_result_get_code (result,\n+\t\t\t\t      \"test_long_constant_LONG_MAX\");\n+  CHECK_NON_NULL (test_long_constant_LONG_MAX);\n+  CHECK_VALUE (test_long_constant_LONG_MAX (), LONG_MAX);\n+\n+  test_fn test_long_constant_LONG_MIN =\n+    (test_fn)gcc_jit_result_get_code (result,\n+\t\t\t\t      \"test_long_constant_LONG_MIN\");\n+  CHECK_NON_NULL (test_long_constant_LONG_MIN);\n+  CHECK_VALUE (test_long_constant_LONG_MIN (), LONG_MIN);\n+}\n+\n+/**********************************************************************\n+ Tests of gcc_jit_context_new_rvalue_from_double.\n+ **********************************************************************/\n+\n+static const char *\n+make_test_of_double_constant (gcc_jit_context *ctxt,\n+\t\t\t   gcc_jit_type *type,\n+\t\t\t   double value,\n+\t\t\t   const char *funcname)\n+{\n+  /* Make a test function of the form:\n+       double funcname (void)\n+       {\n+\t  return VALUE;\n+       }\n+     and return a debug dump of VALUE so that\n+     the caller can sanity-check the debug dump implementation.\n+  */\n+  gcc_jit_rvalue *rvalue =\n+    gcc_jit_context_new_rvalue_from_double (ctxt, type, value);\n+  make_test_of_constant (ctxt, type, rvalue, funcname);\n+  return gcc_jit_object_get_debug_string (\n+    gcc_jit_rvalue_as_object (rvalue));\n+}\n+\n+static void\n+make_tests_of_double_constants (gcc_jit_context *ctxt)\n+{\n+  gcc_jit_type *double_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_DOUBLE);\n+\n+  make_test_of_double_constant (ctxt,\n+                                double_type,\n+                                0.5,\n+                                \"test_double_constant_0_5\");\n+  make_test_of_double_constant (ctxt,\n+                                double_type,\n+                                1e100,\n+                                \"test_double_constant_1e100\");\n+  make_test_of_double_constant (ctxt,\n+                                double_type,\n+                                DBL_MIN,\n+                                \"test_double_constant_DBL_MIN\");\n+  make_test_of_double_constant (ctxt,\n+                                double_type,\n+                                DBL_MAX,\n+                                \"test_double_constant_DBL_MAX\");\n+}\n+\n+static void\n+verify_double_constants (gcc_jit_result *result)\n+{\n+  typedef double (*test_fn) (void);\n+\n+  test_fn test_double_constant_0_5 =\n+    (test_fn)gcc_jit_result_get_code (result,\n+\t\t\t\t      \"test_double_constant_0_5\");\n+  CHECK_NON_NULL (test_double_constant_0_5);\n+  CHECK_VALUE (test_double_constant_0_5 (), 0.5);\n+\n+  test_fn test_double_constant_1e100 =\n+    (test_fn)gcc_jit_result_get_code (result,\n+\t\t\t\t      \"test_double_constant_1e100\");\n+  CHECK_NON_NULL (test_double_constant_1e100);\n+  CHECK_VALUE (test_double_constant_1e100 (), 1e100);\n+\n+  test_fn test_double_constant_DBL_MIN =\n+    (test_fn)gcc_jit_result_get_code (result,\n+\t\t\t\t      \"test_double_constant_DBL_MIN\");\n+  CHECK_NON_NULL (test_double_constant_DBL_MIN);\n+  CHECK_VALUE (test_double_constant_DBL_MIN (), DBL_MIN);\n+\n+  test_fn test_double_constant_DBL_MAX =\n+    (test_fn)gcc_jit_result_get_code (result,\n+\t\t\t\t      \"test_double_constant_DBL_MAX\");\n+  CHECK_NON_NULL (test_double_constant_DBL_MAX);\n+  CHECK_VALUE (test_double_constant_DBL_MAX (), DBL_MAX);\n+}\n+\n+/**********************************************************************\n+ Tests of gcc_jit_context_new_rvalue_from_ptr.\n+ **********************************************************************/\n+\n+static const char *\n+make_test_of_ptr_constant (gcc_jit_context *ctxt,\n+\t\t\t   gcc_jit_type *type,\n+\t\t\t   void *value,\n+\t\t\t   const char *funcname)\n+{\n+  /* Make a test function of the form:\n+       void *funcname (void)\n+       {\n+\t  return VALUE;\n+       }\n+     and return a debug dump of VALUE so that\n+     the caller can sanity-check the debug dump implementation.\n+  */\n+  gcc_jit_rvalue *rvalue =\n+    gcc_jit_context_new_rvalue_from_ptr (ctxt, type, value);\n+  make_test_of_constant (ctxt, type, rvalue, funcname);\n+  return gcc_jit_object_get_debug_string (\n+    gcc_jit_rvalue_as_object (rvalue));\n+}\n+\n+static void\n+make_tests_of_ptr_constants (gcc_jit_context *ctxt)\n+{\n+  gcc_jit_type *ptr_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_VOID_PTR);\n+\n+  CHECK_STRING_VALUE (\n+    make_test_of_ptr_constant (ctxt,\n+\t\t\t       ptr_type,\n+\t\t\t       0,\n+\t\t\t       \"test_ptr_constant_0\"),\n+    \"(void *)NULL\");\n+  CHECK_STRING_VALUE (\n+    make_test_of_ptr_constant (ctxt,\n+\t\t\t       ptr_type,\n+\t\t\t       (void *)0xdeadbeef,\n+\t\t\t       \"test_ptr_constant_0xdeadbeef\"),\n+    \"(void *)0xdeadbeef\");\n+}\n+\n+static void\n+verify_ptr_constants (gcc_jit_result *result)\n+{\n+  typedef void *(*test_fn) (void);\n+\n+  test_fn test_ptr_constant_0 =\n+    (test_fn)gcc_jit_result_get_code (result,\n+\t\t\t\t      \"test_ptr_constant_0\");\n+  CHECK_NON_NULL (test_ptr_constant_0);\n+  CHECK_VALUE (test_ptr_constant_0 (), 0);\n+\n+  test_fn test_ptr_constant_0xdeadbeef =\n+    (test_fn)gcc_jit_result_get_code (result,\n+\t\t\t\t      \"test_ptr_constant_0xdeadbeef\");\n+  CHECK_NON_NULL (test_ptr_constant_0xdeadbeef);\n+  CHECK_VALUE (test_ptr_constant_0xdeadbeef (), (void *)0xdeadbeef);\n+}\n+\n+/**********************************************************************\n+ Code for harness\n+ **********************************************************************/\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  make_tests_of_int_constants (ctxt);\n+  make_tests_of_long_constants (ctxt);\n+  make_tests_of_double_constants (ctxt);\n+  make_tests_of_ptr_constants (ctxt);\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  CHECK_NON_NULL (result);\n+\n+  verify_int_constants (result);\n+  verify_long_constants (result);\n+  verify_double_constants (result);\n+  verify_ptr_constants (result);\n+}"}]}