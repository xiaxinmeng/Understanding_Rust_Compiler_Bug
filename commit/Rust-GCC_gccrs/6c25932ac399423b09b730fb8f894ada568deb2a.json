{"sha": "6c25932ac399423b09b730fb8f894ada568deb2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMyNTkzMmFjMzk5NDIzYjA5YjczMGZiOGY4OTRhZGE1NjhkZWIyYQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-16T14:35:58Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-16T16:52:02Z"}, "message": "libstdc++: Use qualified-id for class member constant [PR101937]\n\nThe expression ctx._M_indent is not a constant expression when ctx is a\nreference parameter, even though _M_indent is an enumerator. Rename it\nto _S_indent to be consistent with our conventions, and refer to it as\nPrintContext::_S_indent to be valid C++ code (at least until P2280 is\naccepted as a DR).\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/101937\n\t* src/c++11/debug.cc (PrintContext::_M_indent): Replace with a\n\tstatic data member.\n\t(print_word): Use qualified-id to access it.", "tree": {"sha": "351d4c9262127bcd5638b57c3398c7e62621697a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/351d4c9262127bcd5638b57c3398c7e62621697a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c25932ac399423b09b730fb8f894ada568deb2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c25932ac399423b09b730fb8f894ada568deb2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c25932ac399423b09b730fb8f894ada568deb2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c25932ac399423b09b730fb8f894ada568deb2a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db853ff78a34fef25bc16133e0367a64526f9f4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db853ff78a34fef25bc16133e0367a64526f9f4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db853ff78a34fef25bc16133e0367a64526f9f4e"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "0128535135e0672ccbb47c9b53894720285596a7", "filename": "libstdc++-v3/src/c++11/debug.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c25932ac399423b09b730fb8f894ada568deb2a/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c25932ac399423b09b730fb8f894ada568deb2a/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc?ref=6c25932ac399423b09b730fb8f894ada568deb2a", "patch": "@@ -573,8 +573,8 @@ namespace\n     : _M_max_length(78), _M_column(1), _M_first_line(true), _M_wordwrap(false)\n     { get_max_length(_M_max_length); }\n \n+    static constexpr int _S_indent = 4;\n     std::size_t\t_M_max_length;\n-    enum { _M_indent = 4 } ;\n     std::size_t\t_M_column;\n     bool\t_M_first_line;\n     bool\t_M_wordwrap;\n@@ -603,7 +603,7 @@ namespace\n     if (length == 0)\n       return;\n \n-    // Consider first '\\n' at begining cause it impacts column.\n+    // First consider '\\n' at the beginning because it impacts the column.\n     if (word[0] == '\\n')\n       {\n \tfprintf(stderr, \"\\n\");\n@@ -625,8 +625,8 @@ namespace\n \t// If this isn't the first line, indent\n \tif (ctx._M_column == 1 && !ctx._M_first_line)\n \t  {\n-\t    const char spacing[ctx._M_indent + 1] = \"    \";\n-\t    print_raw(ctx, spacing, ctx._M_indent);\n+\t    const char spacing[PrintContext::_S_indent + 1] = \"    \";\n+\t    print_raw(ctx, spacing, PrintContext::_S_indent);\n \t  }\n \n \tint written = fprintf(stderr, \"%.*s\", (int)length, word);"}]}