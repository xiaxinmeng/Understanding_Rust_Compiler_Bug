{"sha": "4d7925493467572127fa18fb1227dd67e065861c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ3OTI1NDkzNDY3NTcyMTI3ZmExOGZiMTIyN2RkNjdlMDY1ODYxYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T13:13:26Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T13:13:26Z"}, "message": "[multiple changes]\n\n2011-08-29  Tristan Gingold  <gingold@adacore.com>\n\n\t* s-excdeb.ads, s-excdeb.adb: New files, created from s-except.\n\t* rtsfind.ads (RTU_Id): Replaces System_Exceptions by\n\tSystem_Exceptions_Debug\n\t(RE_Unit_Table): Search RE_Local_Raise in System_Exceptions_Debug\n\t* a-except.adb: With and use System.Exceptions_Debug instead of\n\tSystem.Exceptions.\n\t* a-except-2005.adb: Likewise.\n\t* s-assert.adb: Likewise.\n\t* s-except.adb, s-except.ads: Move debugging hooks to s-excdeb.\n\t* Makefile.rtl: Add s-excdeb.  Adjust compilation rule.\n\t* gcc-interfaces/Makefile.in, gcc-interface/Make-lang.in: Add\n\ts-excdeb. Update dependencies.\n\t(GNATRTL_LINEARALGEBRA_OBJS): Remove a-nlrear.o a-nurear.o a-nllrar.o\n\tas these no longer need external libraries.\n\n2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Resolve_Op_Expon): Additional check to reject an\n\texponentiation operator on universal values in a context that requires\n\ta fixed-point type.\n\n2011-08-29  Tristan Gingold  <gingold@adacore.com>\n\n\t* raise-gcc.c (personnality_routine): Fix thinko.  Set Ada occurrence\n\tbefore calling notify_handled_exception.\n\t* a-exextr.adb: Fix comment.\n\nFrom-SVN: r178221", "tree": {"sha": "7cdac6344493fddee9dd7437b06db0aacfa35f0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cdac6344493fddee9dd7437b06db0aacfa35f0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d7925493467572127fa18fb1227dd67e065861c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d7925493467572127fa18fb1227dd67e065861c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d7925493467572127fa18fb1227dd67e065861c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d7925493467572127fa18fb1227dd67e065861c/comments", "author": null, "committer": null, "parents": [{"sha": "b254da66e7a3155dcd88d5ec68b1a75fba1bbced", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b254da66e7a3155dcd88d5ec68b1a75fba1bbced", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b254da66e7a3155dcd88d5ec68b1a75fba1bbced"}], "stats": {"total": 2871, "additions": 1521, "deletions": 1350}, "files": [{"sha": "593ef4abf0da0ff58aa6b0dbdcea55dac1a8ff59", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4d7925493467572127fa18fb1227dd67e065861c", "patch": "@@ -1,3 +1,32 @@\n+2011-08-29  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* s-excdeb.ads, s-excdeb.adb: New files, created from s-except.\n+\t* rtsfind.ads (RTU_Id): Replaces System_Exceptions by\n+\tSystem_Exceptions_Debug\n+\t(RE_Unit_Table): Search RE_Local_Raise in System_Exceptions_Debug\n+\t* a-except.adb: With and use System.Exceptions_Debug instead of\n+\tSystem.Exceptions.\n+\t* a-except-2005.adb: Likewise.\n+\t* s-assert.adb: Likewise.\n+\t* s-except.adb, s-except.ads: Move debugging hooks to s-excdeb.\n+\t* Makefile.rtl: Add s-excdeb.  Adjust compilation rule.\n+\t* gcc-interfaces/Makefile.in, gcc-interface/Make-lang.in: Add\n+\ts-excdeb. Update dependencies.\n+\t(GNATRTL_LINEARALGEBRA_OBJS): Remove a-nlrear.o a-nurear.o a-nllrar.o\n+\tas these no longer need external libraries.\n+\n+2011-08-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Op_Expon): Additional check to reject an\n+\texponentiation operator on universal values in a context that requires\n+\ta fixed-point type.\n+\n+2011-08-29  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* raise-gcc.c (personnality_routine): Fix thinko.  Set Ada occurrence\n+\tbefore calling notify_handled_exception.\n+\t* a-exextr.adb: Fix comment.\n+\n 2011-08-29  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch4.adb (Expand_Allocator_Expression): Add code to set attribute"}, {"sha": "4b72a20a13eacbb63b31d309c7c5a06b00c75b90", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=4d7925493467572127fa18fb1227dd67e065861c", "patch": "@@ -479,6 +479,7 @@ GNATRTL_NONTASKING_OBJS= \\\n   s-crtrun$(objext) \\\n   s-direio$(objext) \\\n   s-dsaser$(objext) \\\n+  s-excdeb$(objext) \\\n   s-except$(objext) \\\n   s-exctab$(objext) \\\n   s-exnint$(objext) \\"}, {"sha": "cc2409f76ef61f63ea5f3d44920393394c154fb6", "filename": "gcc/ada/a-except-2005.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2Fa-except-2005.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2Fa-except-2005.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.adb?ref=4d7925493467572127fa18fb1227dd67e065861c", "patch": "@@ -46,6 +46,7 @@ pragma Polling (Off);\n \n with System;                  use System;\n with System.Exceptions;       use System.Exceptions;\n+with System.Exceptions_Debug; use System.Exceptions_Debug;\n with System.Standard_Library; use System.Standard_Library;\n with System.Soft_Links;       use System.Soft_Links;\n with System.WCh_Con;          use System.WCh_Con;"}, {"sha": "9994207585a1ef3934813fa59a281a7e963fd8c1", "filename": "gcc/ada/a-except.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2Fa-except.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2Fa-except.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except.adb?ref=4d7925493467572127fa18fb1227dd67e065861c", "patch": "@@ -50,7 +50,7 @@ pragma Polling (Off);\n --  elaboration circularities with System.Exception_Tables.\n \n with System;                  use System;\n-with System.Exceptions;       use System.Exceptions;\n+with System.Exceptions_Debug; use System.Exceptions_Debug;\n with System.Standard_Library; use System.Standard_Library;\n with System.Soft_Links;       use System.Soft_Links;\n "}, {"sha": "61ae6b1ebafbc62fdaa3270fcc487996b1903295", "filename": "gcc/ada/a-exextr.adb", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2Fa-exextr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2Fa-exextr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exextr.adb?ref=4d7925493467572127fa18fb1227dd67e065861c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -93,11 +93,6 @@ package body Exception_Traces is\n       --  configuration. Take care not to output information about internal\n       --  exceptions.\n \n-      --  ??? In the Front-End ZCX case, the traceback entries we have at this\n-      --  point only include the ones we stored while walking up the stack *up\n-      --  to the handler*. All the frames above the subprogram in which the\n-      --  handler is found are missing.\n-\n       if not Excep.Id.Not_Handled_By_Others\n         and then\n           (Exception_Trace = Every_Raise"}, {"sha": "1d6fbf802b43211e0526a1a9868b40d91099657c", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 1313, "deletions": 1248, "changes": 2561, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=4d7925493467572127fa18fb1227dd67e065861c"}, {"sha": "0ca0184ff3917e6828e952000bc420c483ff5a54", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=4d7925493467572127fa18fb1227dd67e065861c", "patch": "@@ -2263,8 +2263,8 @@ LIBGNAT_OBJS = adadecode.o adaint.o argv.o cio.o cstreams.o ctrl_c.o\t\\\n \n include $(fsrcdir)/ada/Makefile.rtl\n \n-GNATRTL_LINEARALGEBRA_OBJS = a-nlcoar.o a-nllcar.o a-nllrar.o a-nlrear.o \\\n-  a-nucoar.o a-nurear.o i-forbla.o i-forlap.o s-gearop.o\n+GNATRTL_LINEARALGEBRA_OBJS = a-nlcoar.o a-nllcar.o \\\n+  a-nucoar.o i-forbla.o i-forlap.o s-gearop.o\n \n GNATRTL_OBJS = $(GNATRTL_NONTASKING_OBJS) $(GNATRTL_TASKING_OBJS) \\\n   $(GNATRTL_LINEARALGEBRA_OBJS) g-trasym.o memtrack.o\n@@ -2774,11 +2774,11 @@ a-except.o  : a-except.adb a-except.ads\n \t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) -O1 -fno-inline \\\n \t      $(NO_REORDER_ADAFLAGS) $(ADA_INCLUDES) $< $(OUTPUT_OPTION)\n \n-# compile s-except.o without optimization and with debug info to let the\n+# compile s-excdeb.o without optimization and with debug info to let the\n # debugger set breakpoints and inspect subprogram parameters on exception\n # related events.\n \n-s-except.o  : s-except.adb s-except.ads\n+s-excdeb.o  : s-excdeb.adb s-excdeb.ads s-except.ads\n \t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) -O0 $(ADA_INCLUDES) \\\n \t      $< $(OUTPUT_OPTION)\n "}, {"sha": "6ea59ae1990d854a1de3ac93a719469604eb9816", "filename": "gcc/ada/raise-gcc.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2Fraise-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2Fraise-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise-gcc.c?ref=4d7925493467572127fa18fb1227dd67e065861c", "patch": "@@ -1149,7 +1149,9 @@ PERSONALITY_FUNCTION (version_arg_t version_arg,\n       else\n \t{\n \t  /* Trigger the appropriate notification routines before the second\n-\t     phase starts, which ensures the stack is still intact. */\n+\t     phase starts, which ensures the stack is still intact.\n+             First, setup the Ada occurrence.  */\n+          __gnat_setup_current_excep (uw_exception);\n \t  __gnat_notify_handled_exception ();\n \n \t  return _URC_HANDLER_FOUND;"}, {"sha": "b4f350a3bc4680d8c2462ffc4470f08dd57c14ce", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=4d7925493467572127fa18fb1227dd67e065861c", "patch": "@@ -226,7 +226,7 @@ package Rtsfind is\n       System_DSA_Services,\n       System_DSA_Types,\n       System_Exception_Table,\n-      System_Exceptions,\n+      System_Exceptions_Debug,\n       System_Exn_Int,\n       System_Exn_LLF,\n       System_Exn_LLI,\n@@ -753,7 +753,7 @@ package Rtsfind is\n \n      RE_Register_Exception,              -- System.Exception_Table\n \n-     RE_Local_Raise,                     -- System.Exceptions\n+     RE_Local_Raise,                     -- System.Exceptions_Debug\n \n      RE_Exn_Integer,                     -- System.Exn_Int\n \n@@ -1940,7 +1940,7 @@ package Rtsfind is\n \n      RE_Register_Exception               => System_Exception_Table,\n \n-     RE_Local_Raise                      => System_Exceptions,\n+     RE_Local_Raise                      => System_Exceptions_Debug,\n \n      RE_Exn_Integer                      => System_Exn_Int,\n "}, {"sha": "fbc0f8acbc79d5fd179a7dfffb62650ab61e97be", "filename": "gcc/ada/s-assert.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2Fs-assert.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2Fs-assert.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-assert.adb?ref=4d7925493467572127fa18fb1227dd67e065861c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,7 +32,7 @@\n pragma Compiler_Unit;\n \n with Ada.Exceptions;\n-with System.Exceptions;\n+with System.Exceptions_Debug;\n \n package body System.Assertions is\n \n@@ -42,7 +42,7 @@ package body System.Assertions is\n \n    procedure Raise_Assert_Failure (Msg : String) is\n    begin\n-      System.Exceptions.Debug_Raise_Assert_Failure;\n+      System.Exceptions_Debug.Debug_Raise_Assert_Failure;\n       Ada.Exceptions.Raise_Exception (Assert_Failure'Identity, Msg);\n    end Raise_Assert_Failure;\n "}, {"sha": "5027bcaee57864e2a94126232b70361016b2a3b3", "filename": "gcc/ada/s-excdeb.adb", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2Fs-excdeb.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2Fs-excdeb.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-excdeb.adb?ref=4d7925493467572127fa18fb1227dd67e065861c", "patch": "@@ -0,0 +1,75 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--               S Y S T E M . E X C E P T I O N S _ D E B U G              --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--         Copyright (C) 2006-2011, Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+pragma Compiler_Unit;\n+\n+package body System.Exceptions_Debug is\n+\n+   ---------------------------\n+   -- Debug_Raise_Exception --\n+   ---------------------------\n+\n+   procedure Debug_Raise_Exception (E : SSL.Exception_Data_Ptr) is\n+      pragma Inspection_Point (E);\n+   begin\n+      null;\n+   end Debug_Raise_Exception;\n+\n+   -------------------------------\n+   -- Debug_unhandled_Exception --\n+   -------------------------------\n+\n+   procedure Debug_Unhandled_Exception (E : SSL.Exception_Data_Ptr) is\n+      pragma Inspection_Point (E);\n+   begin\n+      null;\n+   end Debug_Unhandled_Exception;\n+\n+   --------------------------------\n+   -- Debug_Raise_Assert_Failure --\n+   --------------------------------\n+\n+   procedure Debug_Raise_Assert_Failure is\n+   begin\n+      null;\n+   end Debug_Raise_Assert_Failure;\n+\n+   -----------------\n+   -- Local_Raise --\n+   -----------------\n+\n+   procedure Local_Raise (Excep : System.Address) is\n+      pragma Warnings (Off, Excep);\n+   begin\n+      return;\n+   end Local_Raise;\n+\n+end System.Exceptions_Debug;"}, {"sha": "f0480918390969109e942ab81596ac53bde691c7", "filename": "gcc/ada/s-excdeb.ads", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2Fs-excdeb.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2Fs-excdeb.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-excdeb.ads?ref=4d7925493467572127fa18fb1227dd67e065861c", "patch": "@@ -0,0 +1,77 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                S Y S T E M . E X C E P T I O N S _ D E B U G             --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--          Copyright (C) 2006-2011, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package contains internal routines used as debugger helpers.\n+--  It should be compiled without optimization to let debuggers inspect\n+--  parameter values reliably from breakpoints on the routines.\n+\n+pragma Compiler_Unit;\n+\n+with System.Standard_Library;\n+\n+package System.Exceptions_Debug is\n+\n+   pragma Preelaborate_05;\n+   --  To let Ada.Exceptions \"with\" us and let us \"with\" Standard_Library\n+\n+   package SSL renames System.Standard_Library;\n+   --  To let some of the hooks below have formal parameters typed in\n+   --  accordance with what GDB expects.\n+\n+   procedure Debug_Raise_Exception (E : SSL.Exception_Data_Ptr);\n+   pragma Export\n+     (Ada, Debug_Raise_Exception, \"__gnat_debug_raise_exception\");\n+   --  Hook called at a \"raise\" point for an exception E, when it is\n+   --  just about to be propagated.\n+\n+   procedure Debug_Unhandled_Exception (E : SSL.Exception_Data_Ptr);\n+   pragma Export\n+     (Ada, Debug_Unhandled_Exception, \"__gnat_unhandled_exception\");\n+   --  Hook called during the propagation process of an exception E, as soon\n+   --  as it is known to be unhandled.\n+\n+   procedure Debug_Raise_Assert_Failure;\n+   pragma Export\n+     (Ada, Debug_Raise_Assert_Failure, \"__gnat_debug_raise_assert_failure\");\n+   --  Hook called when an assertion failed. This is used by the debugger to\n+   --  intercept assertion failures, and treat them specially.\n+\n+   procedure Local_Raise (Excep : System.Address);\n+   pragma Export (Ada, Local_Raise);\n+   --  This is a dummy routine, used only by the debugger for the purpose of\n+   --  logging local raise statements that were transformed into a direct goto\n+   --  to the handler code. The compiler in this case generates:\n+   --\n+   --    Local_Raise (exception_data'address);\n+   --    goto Handler\n+   --\n+   --  The argument is the address of the exception data\n+end System.Exceptions_Debug;"}, {"sha": "0d3f9d4416e69d21db1faedfc909f5c46cae91a1", "filename": "gcc/ada/s-except.adb", "status": "modified", "additions": 2, "deletions": 45, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2Fs-except.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2Fs-except.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-except.adb?ref=4d7925493467572127fa18fb1227dd67e065861c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---         Copyright (C) 2006-2009, Free Software Foundation, Inc.          --\n+--         Copyright (C) 2006-2011, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,47 +29,4 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-pragma Compiler_Unit;\n-\n-package body System.Exceptions is\n-\n-   ---------------------------\n-   -- Debug_Raise_Exception --\n-   ---------------------------\n-\n-   procedure Debug_Raise_Exception (E : SSL.Exception_Data_Ptr) is\n-      pragma Inspection_Point (E);\n-   begin\n-      null;\n-   end Debug_Raise_Exception;\n-\n-   -------------------------------\n-   -- Debug_unhandled_Exception --\n-   -------------------------------\n-\n-   procedure Debug_Unhandled_Exception (E : SSL.Exception_Data_Ptr) is\n-      pragma Inspection_Point (E);\n-   begin\n-      null;\n-   end Debug_Unhandled_Exception;\n-\n-   --------------------------------\n-   -- Debug_Raise_Assert_Failure --\n-   --------------------------------\n-\n-   procedure Debug_Raise_Assert_Failure is\n-   begin\n-      null;\n-   end Debug_Raise_Assert_Failure;\n-\n-   -----------------\n-   -- Local_Raise --\n-   -----------------\n-\n-   procedure Local_Raise (Excep : System.Address) is\n-      pragma Warnings (Off, Excep);\n-   begin\n-      return;\n-   end Local_Raise;\n-\n-end System.Exceptions;\n+pragma No_Body;"}, {"sha": "8b40b15b56bdec054a3f19ac459925d66ac60894", "filename": "gcc/ada/s-except.ads", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2Fs-except.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2Fs-except.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-except.ads?ref=4d7925493467572127fa18fb1227dd67e065861c", "patch": "@@ -29,14 +29,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package contains internal routines used as debugger helpers.\n---  It should be compiled without optimization to let debuggers inspect\n---  parameter values reliably from breakpoints on the routines.\n-\n pragma Compiler_Unit;\n \n-with System.Standard_Library;\n-\n package System.Exceptions is\n \n    pragma Preelaborate_05;\n@@ -45,39 +39,6 @@ package System.Exceptions is\n    ZCX_By_Default : constant Boolean;\n    --  Visible copy to allow Ada.Exceptions to know the exception model.\n \n-   package SSL renames System.Standard_Library;\n-   --  To let some of the hooks below have formal parameters typed in\n-   --  accordance with what GDB expects.\n-\n-   procedure Debug_Raise_Exception (E : SSL.Exception_Data_Ptr);\n-   pragma Export\n-     (Ada, Debug_Raise_Exception, \"__gnat_debug_raise_exception\");\n-   --  Hook called at a \"raise\" point for an exception E, when it is\n-   --  just about to be propagated.\n-\n-   procedure Debug_Unhandled_Exception (E : SSL.Exception_Data_Ptr);\n-   pragma Export\n-     (Ada, Debug_Unhandled_Exception, \"__gnat_unhandled_exception\");\n-   --  Hook called during the propagation process of an exception E, as soon\n-   --  as it is known to be unhandled.\n-\n-   procedure Debug_Raise_Assert_Failure;\n-   pragma Export\n-     (Ada, Debug_Raise_Assert_Failure, \"__gnat_debug_raise_assert_failure\");\n-   --  Hook called when an assertion failed. This is used by the debugger to\n-   --  intercept assertion failures, and treat them specially.\n-\n-   procedure Local_Raise (Excep : System.Address);\n-   pragma Export (Ada, Local_Raise);\n-   --  This is a dummy routine, used only by the debugger for the purpose of\n-   --  logging local raise statements that were transformed into a direct goto\n-   --  to the handler code. The compiler in this case generates:\n-   --\n-   --    Local_Raise (exception_data'address);\n-   --    goto Handler\n-   --\n-   --  The argument is the address of the exception data\n-\n private\n    ZCX_By_Default : constant Boolean := System.ZCX_By_Default;\n "}, {"sha": "7d47bbeb05a133a322d3bd46c1bf6d44f67738e5", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7925493467572127fa18fb1227dd67e065861c/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=4d7925493467572127fa18fb1227dd67e065861c", "patch": "@@ -7839,6 +7839,14 @@ package body Sem_Res is\n       if Is_Fixed_Point_Type (Typ) and then Comes_From_Source (N) then\n          Error_Msg_N (\"exponentiation not available for fixed point\", N);\n          return;\n+\n+      elsif Nkind (Parent (N)) in N_Op\n+        and then Is_Fixed_Point_Type (Etype (Parent (N)))\n+        and then Etype (N) = Universal_Real\n+        and then Comes_From_Source (N)\n+      then\n+         Error_Msg_N (\"exponentiation not available for fixed point\", N);\n+         return;\n       end if;\n \n       if Comes_From_Source (N)"}]}