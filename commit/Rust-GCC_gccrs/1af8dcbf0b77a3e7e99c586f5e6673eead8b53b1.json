{"sha": "1af8dcbf0b77a3e7e99c586f5e6673eead8b53b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFmOGRjYmYwYjc3YTNlN2U5OWM1ODZmNWU2NjczZWVhZDhiNTNiMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-06-16T14:56:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-06-16T14:56:34Z"}, "message": "re PR middle-end/27116 (Incorrect integer division (wrong sign).)\n\n2006-06-16  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/27116\n\t* fold-const.c (negate_expr_p): Do not introduce undefined\n\toverflow in negating INTEGER_CSTs.\n\t(fold_negate_expr): Rename from negate_expr.  Revert last\n\tchange for folding BIT_NOT_EXPR.  Change semantics to\n\treturn NULL_TREE for non-simplified negations.  Do not\n\tstrip type conversions and unify type handling.\n\t(negate_expr): New function, wrap around fold_negate_expr\n\tbut ensure building a tree always.  Strip type conversions\n\there, fold to result type.\n\t(fold_unary): Use fold_negate_expr for folding NEGATE_EXPR.\n\n\t* gcc.dg/pr15785-1.c: Revert last change.\n\t* gcc.dg/torture/pr27116-2.c: New testcase.\n\nFrom-SVN: r114723", "tree": {"sha": "7073ab53b36f03e3e04cb67e6df2ca77822bd4df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7073ab53b36f03e3e04cb67e6df2ca77822bd4df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1af8dcbf0b77a3e7e99c586f5e6673eead8b53b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1af8dcbf0b77a3e7e99c586f5e6673eead8b53b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1af8dcbf0b77a3e7e99c586f5e6673eead8b53b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1af8dcbf0b77a3e7e99c586f5e6673eead8b53b1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2d0df1f9a8051d2a89f50e75b9555db06a9fdad8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d0df1f9a8051d2a89f50e75b9555db06a9fdad8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d0df1f9a8051d2a89f50e75b9555db06a9fdad8"}], "stats": {"total": 143, "additions": 93, "deletions": 50}, "files": [{"sha": "5ced5be717d9325007aa7aa915cdbcd3f1803542", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af8dcbf0b77a3e7e99c586f5e6673eead8b53b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af8dcbf0b77a3e7e99c586f5e6673eead8b53b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1af8dcbf0b77a3e7e99c586f5e6673eead8b53b1", "patch": "@@ -1,3 +1,17 @@\n+2006-06-16  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/27116\n+\t* fold-const.c (negate_expr_p): Do not introduce undefined\n+\toverflow in negating INTEGER_CSTs.\n+\t(fold_negate_expr): Rename from negate_expr.  Revert last\n+\tchange for folding BIT_NOT_EXPR.  Change semantics to\n+\treturn NULL_TREE for non-simplified negations.  Do not\n+\tstrip type conversions and unify type handling.\n+\t(negate_expr): New function, wrap around fold_negate_expr\n+\tbut ensure building a tree always.  Strip type conversions\n+\there, fold to result type.\n+\t(fold_unary): Use fold_negate_expr for folding NEGATE_EXPR.\n+\n 2006-06-16  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/27802"}, {"sha": "57a72489121af0c6d509c231ad3a720c0e337f6f", "filename": "gcc/fold-const.c", "status": "modified", "additions": 54, "deletions": 50, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af8dcbf0b77a3e7e99c586f5e6673eead8b53b1/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af8dcbf0b77a3e7e99c586f5e6673eead8b53b1/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=1af8dcbf0b77a3e7e99c586f5e6673eead8b53b1", "patch": "@@ -923,7 +923,7 @@ may_negate_without_overflow_p (tree t)\n }\n \n /* Determine whether an expression T can be cheaply negated using\n-   the function negate_expr.  */\n+   the function negate_expr without introducing undefined overflow.  */\n \n static bool\n negate_expr_p (tree t)\n@@ -939,7 +939,8 @@ negate_expr_p (tree t)\n   switch (TREE_CODE (t))\n     {\n     case INTEGER_CST:\n-      if (TYPE_UNSIGNED (type) || ! flag_trapv)\n+      if (TYPE_UNSIGNED (type)\n+\t  || (flag_wrapv && ! flag_trapv))\n \treturn true;\n \n       /* Check that -CST will not overflow type.  */\n@@ -1030,28 +1031,22 @@ negate_expr_p (tree t)\n   return false;\n }\n \n-/* Given T, an expression, return the negation of T.  Allow for T to be\n-   null, in which case return null.  */\n+/* Given T, an expression, return a folded tree for -T or NULL_TREE, if no\n+   simplification is possible.\n+   If negate_expr_p would return true for T, NULL_TREE will never be\n+   returned.  */\n \n static tree\n-negate_expr (tree t)\n+fold_negate_expr (tree t)\n {\n-  tree type;\n+  tree type = TREE_TYPE (t);\n   tree tem;\n \n-  if (t == 0)\n-    return 0;\n-\n-  type = TREE_TYPE (t);\n-  STRIP_SIGN_NOPS (t);\n-\n   switch (TREE_CODE (t))\n     {\n     /* Convert - (~A) to A + 1.  */\n     case BIT_NOT_EXPR:\n-      if (INTEGRAL_TYPE_P (type)\n-      \t  && (TYPE_UNSIGNED (type)\n-\t      || (flag_wrapv && !flag_trapv)))\n+      if (INTEGRAL_TYPE_P (type))\n         return fold_build2 (PLUS_EXPR, type, TREE_OPERAND (t, 0),\n                             build_int_cst (type, 1));\n       break;\n@@ -1068,7 +1063,7 @@ negate_expr (tree t)\n       tem = fold_negate_const (t, type);\n       /* Two's complement FP formats, such as c4x, may overflow.  */\n       if (! TREE_OVERFLOW (tem) || ! flag_trapping_math)\n-\treturn fold_convert (type, tem);\n+\treturn tem;\n       break;\n \n     case COMPLEX_CST:\n@@ -1085,7 +1080,7 @@ negate_expr (tree t)\n       break;\n \n     case NEGATE_EXPR:\n-      return fold_convert (type, TREE_OPERAND (t, 0));\n+      return TREE_OPERAND (t, 0);\n \n     case PLUS_EXPR:\n       if (! FLOAT_TYPE_P (type) || flag_unsafe_math_optimizations)\n@@ -1096,18 +1091,16 @@ negate_expr (tree t)\n \t\t\t\t     TREE_OPERAND (t, 1)))\n \t    {\n \t      tem = negate_expr (TREE_OPERAND (t, 1));\n-\t      tem = fold_build2 (MINUS_EXPR, TREE_TYPE (t),\n-\t\t\t\t tem, TREE_OPERAND (t, 0));\n-\t      return fold_convert (type, tem);\n+\t      return fold_build2 (MINUS_EXPR, type,\n+\t\t\t\t  tem, TREE_OPERAND (t, 0));\n \t    }\n \n \t  /* -(A + B) -> (-A) - B.  */\n \t  if (negate_expr_p (TREE_OPERAND (t, 0)))\n \t    {\n \t      tem = negate_expr (TREE_OPERAND (t, 0));\n-\t      tem = fold_build2 (MINUS_EXPR, TREE_TYPE (t),\n-\t\t\t\t tem, TREE_OPERAND (t, 1));\n-\t      return fold_convert (type, tem);\n+\t      return fold_build2 (MINUS_EXPR, type,\n+\t\t\t\t  tem, TREE_OPERAND (t, 1));\n \t    }\n \t}\n       break;\n@@ -1116,33 +1109,27 @@ negate_expr (tree t)\n       /* - (A - B) -> B - A  */\n       if ((! FLOAT_TYPE_P (type) || flag_unsafe_math_optimizations)\n \t  && reorder_operands_p (TREE_OPERAND (t, 0), TREE_OPERAND (t, 1)))\n-\treturn fold_convert (type,\n-\t\t\t     fold_build2 (MINUS_EXPR, TREE_TYPE (t),\n-\t\t\t\t\t  TREE_OPERAND (t, 1),\n-\t\t\t\t\t  TREE_OPERAND (t, 0)));\n+\treturn fold_build2 (MINUS_EXPR, type,\n+\t\t\t    TREE_OPERAND (t, 1), TREE_OPERAND (t, 0));\n       break;\n \n     case MULT_EXPR:\n-      if (TYPE_UNSIGNED (TREE_TYPE (t)))\n+      if (TYPE_UNSIGNED (type))\n         break;\n \n       /* Fall through.  */\n \n     case RDIV_EXPR:\n-      if (! HONOR_SIGN_DEPENDENT_ROUNDING (TYPE_MODE (TREE_TYPE (t))))\n+      if (! HONOR_SIGN_DEPENDENT_ROUNDING (TYPE_MODE (type)))\n \t{\n \t  tem = TREE_OPERAND (t, 1);\n \t  if (negate_expr_p (tem))\n-\t    return fold_convert (type,\n-\t\t\t\t fold_build2 (TREE_CODE (t), TREE_TYPE (t),\n-\t\t\t\t\t      TREE_OPERAND (t, 0),\n-\t\t\t\t\t      negate_expr (tem)));\n+\t    return fold_build2 (TREE_CODE (t), type,\n+\t\t\t\tTREE_OPERAND (t, 0), negate_expr (tem));\n \t  tem = TREE_OPERAND (t, 0);\n \t  if (negate_expr_p (tem))\n-\t    return fold_convert (type,\n-\t\t\t\t fold_build2 (TREE_CODE (t), TREE_TYPE (t),\n-\t\t\t\t\t      negate_expr (tem),\n-\t\t\t\t\t      TREE_OPERAND (t, 1)));\n+\t    return fold_build2 (TREE_CODE (t), type,\n+\t\t\t\tnegate_expr (tem), TREE_OPERAND (t, 1));\n \t}\n       break;\n \n@@ -1151,20 +1138,16 @@ negate_expr (tree t)\n     case FLOOR_DIV_EXPR:\n     case CEIL_DIV_EXPR:\n     case EXACT_DIV_EXPR:\n-      if (!TYPE_UNSIGNED (TREE_TYPE (t)) && !flag_wrapv)\n+      if (!TYPE_UNSIGNED (type) && !flag_wrapv)\n         {\n           tem = TREE_OPERAND (t, 1);\n           if (negate_expr_p (tem))\n-            return fold_convert (type,\n-                                 fold_build2 (TREE_CODE (t), TREE_TYPE (t),\n-                                              TREE_OPERAND (t, 0),\n-                                              negate_expr (tem)));\n+            return fold_build2 (TREE_CODE (t), type,\n+\t\t\t\tTREE_OPERAND (t, 0), negate_expr (tem));\n           tem = TREE_OPERAND (t, 0);\n           if (negate_expr_p (tem))\n-            return fold_convert (type,\n-                                 fold_build2 (TREE_CODE (t), TREE_TYPE (t),\n-                                              negate_expr (tem),\n-                                              TREE_OPERAND (t, 1)));\n+            return fold_build2 (TREE_CODE (t), type,\n+\t\t\t\tnegate_expr (tem), TREE_OPERAND (t, 1));\n         }\n       break;\n \n@@ -1174,7 +1157,7 @@ negate_expr (tree t)\n \t{\n \t  tem = strip_float_extensions (t);\n \t  if (tem != t && negate_expr_p (tem))\n-\t    return fold_convert (type, negate_expr (tem));\n+\t    return negate_expr (tem);\n \t}\n       break;\n \n@@ -1215,7 +1198,27 @@ negate_expr (tree t)\n       break;\n     }\n \n-  tem = fold_build1 (NEGATE_EXPR, TREE_TYPE (t), t);\n+  return NULL_TREE;\n+}\n+\n+/* Like fold_negate_expr, but return a NEGATE_EXPR tree, if T can not be\n+   negated in a simpler way.  Also allow for T to be NULL_TREE, in which case\n+   return NULL_TREE. */\n+\n+static tree\n+negate_expr (tree t)\n+{\n+  tree type, tem;\n+\n+  if (t == NULL_TREE)\n+    return NULL_TREE;\n+\n+  type = TREE_TYPE (t);\n+  STRIP_SIGN_NOPS (t);\n+\n+  tem = fold_negate_expr (t);\n+  if (!tem)\n+    tem = build1 (NEGATE_EXPR, TREE_TYPE (t), t);\n   return fold_convert (type, tem);\n }\n \f\n@@ -7544,8 +7547,9 @@ fold_unary (enum tree_code code, tree type, tree op0)\n       return fold_view_convert_expr (type, op0);\n \n     case NEGATE_EXPR:\n-      if (negate_expr_p (arg0))\n-\treturn fold_convert (type, negate_expr (arg0));\n+      tem = fold_negate_expr (arg0);\n+      if (tem)\n+\treturn fold_convert (type, tem);\n       return NULL_TREE;\n \n     case ABS_EXPR:"}, {"sha": "f4a6ed447e4067993d38b417f564e415490ec9e6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af8dcbf0b77a3e7e99c586f5e6673eead8b53b1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af8dcbf0b77a3e7e99c586f5e6673eead8b53b1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1af8dcbf0b77a3e7e99c586f5e6673eead8b53b1", "patch": "@@ -1,3 +1,9 @@\n+2006-06-16  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/27116\n+\t* gcc.dg/pr15785-1.c: Revert last change.\n+\t* gcc.dg/torture/pr27116-2.c: New testcase.\n+\n 2006-06-16  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/27802"}, {"sha": "47cd3d7b01bc90f74169f5d5a1d201b3508f5882", "filename": "gcc/testsuite/gcc.dg/pr15785-1.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af8dcbf0b77a3e7e99c586f5e6673eead8b53b1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15785-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af8dcbf0b77a3e7e99c586f5e6673eead8b53b1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15785-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15785-1.c?ref=1af8dcbf0b77a3e7e99c586f5e6673eead8b53b1", "patch": "@@ -11,6 +11,11 @@ void b (int x) {\n \t\tlink_error ();\n }\n \n+void c (int x) {\n+\tif (!(- (~x) - x))\n+\t\tlink_error ();\n+}\n+\n void d (int x) {\n \tif (!(~ (-x) - x))\n \t\tlink_error ();\n@@ -29,6 +34,7 @@ void f (int x) {\n int main (int argc, char *argv[]) {\n \ta(argc);\n \tb(argc);\n+\tc(argc);\n \td(argc);\n \te(argc);\n \tf(argc);"}, {"sha": "9c748b245f5234760a1b957f3e34ba280476db6e", "filename": "gcc/testsuite/gcc.dg/torture/pr27116-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af8dcbf0b77a3e7e99c586f5e6673eead8b53b1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr27116-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af8dcbf0b77a3e7e99c586f5e6673eead8b53b1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr27116-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr27116-2.c?ref=1af8dcbf0b77a3e7e99c586f5e6673eead8b53b1", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+\n+extern void abort(void);\n+\n+int main (void)\n+{\n+    volatile long int n;\n+    n = -2;\n+\n+    if ((-2147483647L - 1L) / (-n) != -1073741824L)\n+\tabort ();\n+    return 0;\n+}"}]}