{"sha": "9761988fc78d16fe36fbb7f000c6b55e7fa83787", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc2MTk4OGZjNzhkMTZmZTM2ZmJiN2YwMDBjNmI1NWU3ZmE4Mzc4Nw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-07-28T18:03:29Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-07-28T18:03:29Z"}, "message": "compiler: track placeholder pointer types for conversion\n    \n    We recently started walking through the hash table of pointer types to\n    finalize them.  Unfortunately it is possible to create a new pointer\n    type while finalizing an existing one (test case: test/fixedbugs/issue5291)\n    and that breaks the iteration.  So, instead, keep a list of\n    placeholder pointer types, and iterate through them while permitting\n    the list to be extended as we go.\n    \n    Reviewed-on: https://go-review.googlesource.com/51771\n\nFrom-SVN: r250683", "tree": {"sha": "331c793014022b2db3215daf49ba805b42c7133f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/331c793014022b2db3215daf49ba805b42c7133f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9761988fc78d16fe36fbb7f000c6b55e7fa83787", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9761988fc78d16fe36fbb7f000c6b55e7fa83787", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9761988fc78d16fe36fbb7f000c6b55e7fa83787", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9761988fc78d16fe36fbb7f000c6b55e7fa83787/comments", "author": null, "committer": null, "parents": [{"sha": "97a0928c524753bcebed187fb087862705fcdda3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97a0928c524753bcebed187fb087862705fcdda3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97a0928c524753bcebed187fb087862705fcdda3"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "9dc96cfc1000be581706aa8bc53edfc96090cd7c", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9761988fc78d16fe36fbb7f000c6b55e7fa83787/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9761988fc78d16fe36fbb7f000c6b55e7fa83787/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=9761988fc78d16fe36fbb7f000c6b55e7fa83787", "patch": "@@ -1,4 +1,4 @@\n-27804ec53590e3644e030c9860822139a0cfb03f\n+2118958321532352c91fd9406f571f8729a791cd\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "4d923733667ff9d45338e87b892918ae3b194bac", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9761988fc78d16fe36fbb7f000c6b55e7fa83787/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9761988fc78d16fe36fbb7f000c6b55e7fa83787/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=9761988fc78d16fe36fbb7f000c6b55e7fa83787", "patch": "@@ -1057,6 +1057,8 @@ Type::get_backend_placeholder(Gogo* gogo)\n       {\n \tLocation loc = Linemap::unknown_location();\n \tbt = gogo->backend()->placeholder_pointer_type(\"\", loc, false);\n+\tPointer_type* pt = this->convert<Pointer_type, TYPE_POINTER>();\n+\tType::placeholder_pointers.push_back(pt);\n       }\n       break;\n \n@@ -5521,6 +5523,11 @@ Pointer_type::do_import(Import* imp)\n \n Type::Pointer_type_table Type::pointer_types;\n \n+// A list of placeholder pointer types.  We keep this so we can ensure\n+// they are finalized.\n+\n+std::vector<Pointer_type*> Type::placeholder_pointers;\n+\n // Make a pointer type.\n \n Pointer_type*\n@@ -5551,11 +5558,11 @@ Type::make_pointer_type(Type* to_type)\n void\n Type::finish_pointer_types(Gogo* gogo)\n {\n-  for (Pointer_type_table::const_iterator i = pointer_types.begin();\n-       i != pointer_types.end();\n-       ++i)\n+  // We don't use begin() and end() because it is possible to add new\n+  // placeholder pointer types as we finalized existing ones.\n+  for (size_t i = 0; i < Type::placeholder_pointers.size(); i++)\n     {\n-      Pointer_type* pt = i->second;\n+      Pointer_type* pt = Type::placeholder_pointers[i];\n       Type_btypes::iterator tbti = Type::type_btypes.find(pt);\n       if (tbti != Type::type_btypes.end() && tbti->second.is_placeholder)\n         {"}, {"sha": "f15f08ae4f086bfb4655019b4739e062cbc44f2f", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9761988fc78d16fe36fbb7f000c6b55e7fa83787/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9761988fc78d16fe36fbb7f000c6b55e7fa83787/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=9761988fc78d16fe36fbb7f000c6b55e7fa83787", "patch": "@@ -1350,6 +1350,9 @@ class Type\n \n   static Pointer_type_table pointer_types;\n \n+  // List of placeholder pointer types.\n+  static std::vector<Pointer_type*> placeholder_pointers;\n+\n   // The type classification.\n   Type_classification classification_;\n   // The backend representation of the type, once it has been"}]}