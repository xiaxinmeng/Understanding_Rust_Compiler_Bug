{"sha": "eb04805be4029716e76532babc0fa9ecb18de96e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIwNDgwNWJlNDAyOTcxNmU3NjUzMmJhYmMwZmE5ZWNiMThkZTk2ZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-07-07T22:26:38Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-07-07T22:36:29Z"}, "message": "libstdc++: Replace __int_limits with __numeric_traits_integer\n\nI recently added std::__detail::__int_limits as a lightweight\nalternative to std::numeric_limits, forgetting that the values it\nprovides (digits, min and max) are already provided by\n__gnu_cxx::__numeric_traits.\n\nThis change adds __int_traits as an alias for __numeric_traits_integer.\nThis avoids instantiating __numeric_traits to decide whether to use\n__numeric_traits_integer or __numeric_traits_floating. Then all uses of\n__int_limits can be replaced with __int_traits, and __int_limits can be\nremoved.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/Makefile.am: Remove bits/int_limits.h.\n\t* include/Makefile.in: Regenerate.\n\t* include/bits/int_limits.h: Removed.\n\t* include/bits/parse_numbers.h (_Select_int_base): Replace\n\t__int_limits with __int_traits.\n\t* include/bits/range_access.h (_SSize::operator()): Likewise.\n\t* include/ext/numeric_traits.h (__numeric_traits_integer): Add\n\tstatic assertion.\n\t(__int_traits): New alias template.\n\t* include/std/bit (__rotl, __rotr, __countl_zero, __countl_one)\n\t(__countr_zero, __countr_one, __popcount, __bit_ceil)\n\t(__bit_floor, __bit_width) Replace __int_limits with\n\t__int_traits.\n\t* include/std/charconv (__to_chars_8, __from_chars_binary)\n\t(__from_chars_alpha_to_num, from_chars): Likewise.\n\t* include/std/memory_resource (polymorphic_allocator::allocate)\n\t(polymorphic_allocator::allocate_object): Likewise.\n\t* include/std/string_view (basic_string_view::_S_compare):\n\tLikewise.\n\t* include/std/utility (cmp_equal, cmp_less, in_range): Likewise.", "tree": {"sha": "2a687b02ebaf35e79aa22184e9d39e1b7b9e9156", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a687b02ebaf35e79aa22184e9d39e1b7b9e9156"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb04805be4029716e76532babc0fa9ecb18de96e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb04805be4029716e76532babc0fa9ecb18de96e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb04805be4029716e76532babc0fa9ecb18de96e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb04805be4029716e76532babc0fa9ecb18de96e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ca8fefeb720c8a9dec58e9a99042e6727309251", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ca8fefeb720c8a9dec58e9a99042e6727309251", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ca8fefeb720c8a9dec58e9a99042e6727309251"}], "stats": {"total": 200, "additions": 67, "deletions": 133}, "files": [{"sha": "e131ce04f8cae133b8f3880d2a52539b04017c12", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb04805be4029716e76532babc0fa9ecb18de96e/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb04805be4029716e76532babc0fa9ecb18de96e/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=eb04805be4029716e76532babc0fa9ecb18de96e", "patch": "@@ -129,7 +129,6 @@ bits_headers = \\\n \t${bits_srcdir}/hashtable.h \\\n \t${bits_srcdir}/hashtable_policy.h \\\n \t${bits_srcdir}/indirect_array.h \\\n-\t${bits_srcdir}/int_limits.h \\\n \t${bits_srcdir}/invoke.h \\\n \t${bits_srcdir}/ios_base.h \\\n \t${bits_srcdir}/istream.tcc \\"}, {"sha": "c0b71e13a3235bccd651d905f3ade36372a60716", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb04805be4029716e76532babc0fa9ecb18de96e/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb04805be4029716e76532babc0fa9ecb18de96e/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=eb04805be4029716e76532babc0fa9ecb18de96e", "patch": "@@ -475,7 +475,6 @@ bits_headers = \\\n \t${bits_srcdir}/hashtable.h \\\n \t${bits_srcdir}/hashtable_policy.h \\\n \t${bits_srcdir}/indirect_array.h \\\n-\t${bits_srcdir}/int_limits.h \\\n \t${bits_srcdir}/invoke.h \\\n \t${bits_srcdir}/ios_base.h \\\n \t${bits_srcdir}/istream.tcc \\"}, {"sha": "7ae34377331dc1e87f540254e33bb64c92ff913a", "filename": "libstdc++-v3/include/bits/int_limits.h", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca8fefeb720c8a9dec58e9a99042e6727309251/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fint_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca8fefeb720c8a9dec58e9a99042e6727309251/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fint_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fint_limits.h?ref=9ca8fefeb720c8a9dec58e9a99042e6727309251", "patch": "@@ -1,74 +0,0 @@\n-// Minimal replacement for numeric_limits of integers. -*- C++ -*-\n-\n-// Copyright (C) 2020 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-/** @file bits/int_limits.h\n- *  This is an internal header file, included by other library headers.\n- *  Do not attempt to use it directly. @headername{limits}\n- */\n-\n-#ifndef _GLIBCXX_INT_LIMITS_H\n-#define _GLIBCXX_INT_LIMITS_H 1\n-\n-#pragma GCC system_header\n-\n-#if __cplusplus >= 201103L\n-#include <bits/c++config.h>\n-\n-namespace std _GLIBCXX_VISIBILITY(default)\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-namespace __detail\n-{\n-  // This template is used for arbitrary signed and unsigned integer types\n-  // (by headers <bit> and <charconv>) and for specific integer types\n-  // (by <memory_resource> and <string_view>) but also for char (<charconv>).\n-  // For simplicity's sake, all integral types except bool are supported.\n-\n-  // Lightweight alternative to numeric_limits<signed integer type>.\n-  template<typename _Tp, bool = is_signed<_Tp>::value>\n-    struct __int_limits\n-    {\n-      static_assert(is_integral<_Tp>::value, \"unsupported specialization\");\n-      using _Up = typename make_unsigned<_Tp>::type;\n-      static constexpr int digits = sizeof(_Tp) * __CHAR_BIT__ - 1;\n-      static constexpr _Tp min() noexcept { return _Tp(_Up(1) << digits); }\n-      static constexpr _Tp max() noexcept { return _Tp(_Up(~_Up(0)) >> 1); }\n-    };\n-\n-  // Lightweight alternative to numeric_limits<unsigned integer type>.\n-  template<typename _Tp>\n-    struct __int_limits<_Tp, false>\n-    {\n-      static_assert(is_integral<_Tp>::value, \"unsupported specialization\");\n-      static constexpr int digits = sizeof(_Tp) * __CHAR_BIT__;\n-      static constexpr _Tp min() noexcept { return 0; }\n-      static constexpr _Tp max() noexcept { return _Tp(-1); }\n-    };\n-\n-  template<> struct __int_limits<bool>; // not defined\n-}\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n-#endif // C++11\n-#endif // _GLIBCXX_INT_LIMITS_H"}, {"sha": "5e80907af09fb348c81e0acd86f16089145acf52", "filename": "libstdc++-v3/include/bits/parse_numbers.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb04805be4029716e76532babc0fa9ecb18de96e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fparse_numbers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb04805be4029716e76532babc0fa9ecb18de96e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fparse_numbers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fparse_numbers.h?ref=eb04805be4029716e76532babc0fa9ecb18de96e", "patch": "@@ -36,7 +36,7 @@\n \n #if __cplusplus >= 201402L\n \n-#include <bits/int_limits.h>\n+#include <ext/numeric_traits.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -265,7 +265,7 @@ namespace __select_int\n \n   template<unsigned long long _Val, typename _IntType, typename... _Ints>\n     struct _Select_int_base<_Val, _IntType, _Ints...>\n-    : conditional_t<(_Val <= __detail::__int_limits<_IntType>::max()),\n+    : conditional_t<(_Val <= __gnu_cxx::__int_traits<_IntType>::__max),\n \t\t    integral_constant<_IntType, _Val>,\n \t\t    _Select_int_base<_Val, _Ints...>>\n     { };"}, {"sha": "3919183c5b45e7750f5bd237263e94974e01038d", "filename": "libstdc++-v3/include/bits/range_access.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb04805be4029716e76532babc0fa9ecb18de96e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb04805be4029716e76532babc0fa9ecb18de96e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h?ref=eb04805be4029716e76532babc0fa9ecb18de96e", "patch": "@@ -35,7 +35,7 @@\n #if __cplusplus >= 201103L\n #include <initializer_list>\n #include <bits/iterator_concepts.h>\n-#include <bits/int_limits.h>\n+#include <ext/numeric_traits.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -727,12 +727,12 @@ namespace ranges\n \t{\n \t  using __iter_type = decltype(_Begin{}(std::forward<_Tp>(__e)));\n \t  using __diff_type = iter_difference_t<__iter_type>;\n-\t  using std::__detail::__int_limits;\n+\t  using __gnu_cxx::__int_traits;\n \t  auto __size = _Size{}(std::forward<_Tp>(__e));\n \t  if constexpr (integral<__diff_type>)\n \t    {\n-\t      if constexpr (__int_limits<__diff_type>::digits\n-\t\t\t    < __int_limits<ptrdiff_t>::digits)\n+\t      if constexpr (__int_traits<__diff_type>::__digits\n+\t\t\t    < __int_traits<ptrdiff_t>::__digits)\n \t\treturn static_cast<ptrdiff_t>(__size);\n \t    }\n \t  return static_cast<__diff_type>(__size);"}, {"sha": "69f286d7be7c2c15df6049d70010977ad7869d00", "filename": "libstdc++-v3/include/ext/numeric_traits.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb04805be4029716e76532babc0fa9ecb18de96e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb04805be4029716e76532babc0fa9ecb18de96e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric_traits.h?ref=eb04805be4029716e76532babc0fa9ecb18de96e", "patch": "@@ -54,6 +54,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Value>\n     struct __numeric_traits_integer\n     {\n+#if __cplusplus >= 201103L\n+      static_assert(std::__is_integer<_Value>::__value,\n+\t\t    \"invalid specialization\");\n+#endif\n+\n       // Only integers for initialization of member constant.\n       static const _Value __min = __glibcxx_min(_Value);\n       static const _Value __max = __glibcxx_max(_Value);\n@@ -76,6 +81,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Value>\n     const int __numeric_traits_integer<_Value>::__digits;\n \n+#if __cplusplus >= 201103L\n+  template<typename _Tp>\n+    using __int_traits = __numeric_traits_integer<_Tp>;\n+#endif\n+\n #undef __glibcxx_signed\n #undef __glibcxx_digits\n #undef __glibcxx_min"}, {"sha": "f4344820d5275856f604687b19e407cc5425723d", "filename": "libstdc++-v3/include/std/bit", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb04805be4029716e76532babc0fa9ecb18de96e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb04805be4029716e76532babc0fa9ecb18de96e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit?ref=eb04805be4029716e76532babc0fa9ecb18de96e", "patch": "@@ -34,7 +34,7 @@\n #if __cplusplus >= 201402L\n \n #include <type_traits>\n-#include <bits/int_limits.h>\n+#include <ext/numeric_traits.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -55,7 +55,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr _Tp\n     __rotl(_Tp __x, int __s) noexcept\n     {\n-      constexpr auto _Nd = __detail::__int_limits<_Tp>::digits;\n+      constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;\n       const int __r = __s % _Nd;\n       if (__r == 0)\n \treturn __x;\n@@ -69,7 +69,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr _Tp\n     __rotr(_Tp __x, int __s) noexcept\n     {\n-      constexpr auto _Nd = __detail::__int_limits<_Tp>::digits;\n+      constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;\n       const int __r = __s % _Nd;\n       if (__r == 0)\n \treturn __x;\n@@ -83,15 +83,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr int\n     __countl_zero(_Tp __x) noexcept\n     {\n-      using std::__detail::__int_limits;\n-      constexpr auto _Nd = __int_limits<_Tp>::digits;\n+      using __gnu_cxx::__int_traits;\n+      constexpr auto _Nd = __int_traits<_Tp>::__digits;\n \n       if (__x == 0)\n         return _Nd;\n \n-      constexpr auto _Nd_ull = __int_limits<unsigned long long>::digits;\n-      constexpr auto _Nd_ul = __int_limits<unsigned long>::digits;\n-      constexpr auto _Nd_u = __int_limits<unsigned>::digits;\n+      constexpr auto _Nd_ull = __int_traits<unsigned long long>::__digits;\n+      constexpr auto _Nd_ul = __int_traits<unsigned long>::__digits;\n+      constexpr auto _Nd_u = __int_traits<unsigned>::__digits;\n \n       if _GLIBCXX17_CONSTEXPR (_Nd <= _Nd_u)\n \t{\n@@ -119,7 +119,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      constexpr int __diff = (2 * _Nd_ull) - _Nd;\n \t      return __builtin_clzll(__high) - __diff;\n \t    }\n-\t  constexpr auto __max_ull = __int_limits<unsigned long long>::max();\n+\t  constexpr auto __max_ull = __int_traits<unsigned long long>::__max;\n \t  unsigned long long __low = __x & __max_ull;\n \t  return (_Nd - _Nd_ull) + __builtin_clzll(__low);\n \t}\n@@ -129,24 +129,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr int\n     __countl_one(_Tp __x) noexcept\n     {\n-      if (__x == __detail::__int_limits<_Tp>::max())\n-\treturn __detail::__int_limits<_Tp>::digits;\n+      if (__x == __gnu_cxx::__int_traits<_Tp>::__max)\n+\treturn __gnu_cxx::__int_traits<_Tp>::__digits;\n       return std::__countl_zero<_Tp>((_Tp)~__x);\n     }\n \n   template<typename _Tp>\n     constexpr int\n     __countr_zero(_Tp __x) noexcept\n     {\n-      using std::__detail::__int_limits;\n-      constexpr auto _Nd = __int_limits<_Tp>::digits;\n+      using __gnu_cxx::__int_traits;\n+      constexpr auto _Nd = __int_traits<_Tp>::__digits;\n \n       if (__x == 0)\n         return _Nd;\n \n-      constexpr auto _Nd_ull = __int_limits<unsigned long long>::digits;\n-      constexpr auto _Nd_ul = __int_limits<unsigned long>::digits;\n-      constexpr auto _Nd_u = __int_limits<unsigned>::digits;\n+      constexpr auto _Nd_ull = __int_traits<unsigned long long>::__digits;\n+      constexpr auto _Nd_ul = __int_traits<unsigned long>::__digits;\n+      constexpr auto _Nd_u = __int_traits<unsigned>::__digits;\n \n       if _GLIBCXX17_CONSTEXPR (_Nd <= _Nd_u)\n \treturn __builtin_ctz(__x);\n@@ -159,7 +159,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  static_assert(_Nd <= (2 * _Nd_ull),\n \t\t\t\"Maximum supported integer size is 128-bit\");\n \n-\t  constexpr auto __max_ull = __int_limits<unsigned long long>::max();\n+\t  constexpr auto __max_ull = __int_traits<unsigned long long>::__max;\n \t  unsigned long long __low = __x & __max_ull;\n \t  if (__low != 0)\n \t    return __builtin_ctzll(__low);\n@@ -172,24 +172,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr int\n     __countr_one(_Tp __x) noexcept\n     {\n-      if (__x == __detail::__int_limits<_Tp>::max())\n-\treturn __detail::__int_limits<_Tp>::digits;\n+      if (__x == __gnu_cxx::__int_traits<_Tp>::__max)\n+\treturn __gnu_cxx::__int_traits<_Tp>::__digits;\n       return std::__countr_zero((_Tp)~__x);\n     }\n \n   template<typename _Tp>\n     constexpr int\n     __popcount(_Tp __x) noexcept\n     {\n-      using std::__detail::__int_limits;\n-      constexpr auto _Nd = __int_limits<_Tp>::digits;\n+      using __gnu_cxx::__int_traits;\n+      constexpr auto _Nd = __int_traits<_Tp>::__digits;\n \n       if (__x == 0)\n         return 0;\n \n-      constexpr auto _Nd_ull = __int_limits<unsigned long long>::digits;\n-      constexpr auto _Nd_ul = __int_limits<unsigned long>::digits;\n-      constexpr auto _Nd_u = __int_limits<unsigned>::digits;\n+      constexpr auto _Nd_ull = __int_traits<unsigned long long>::__digits;\n+      constexpr auto _Nd_ul = __int_traits<unsigned long>::__digits;\n+      constexpr auto _Nd_u = __int_traits<unsigned>::__digits;\n \n       if _GLIBCXX17_CONSTEXPR (_Nd <= _Nd_u)\n \treturn __builtin_popcount(__x);\n@@ -202,7 +202,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  static_assert(_Nd <= (2 * _Nd_ull),\n \t\t\t\"Maximum supported integer size is 128-bit\");\n \n-\t  constexpr auto __max_ull = __int_limits<unsigned long long>::max();\n+\t  constexpr auto __max_ull = __int_traits<unsigned long long>::__max;\n \t  unsigned long long __low = __x & __max_ull;\n \t  unsigned long long __high = __x >> _Nd_ull;\n \t  return __builtin_popcountll(__low) + __builtin_popcountll(__high);\n@@ -218,8 +218,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr _Tp\n     __bit_ceil(_Tp __x) noexcept\n     {\n-      using std::__detail::__int_limits;\n-      constexpr auto _Nd = __int_limits<_Tp>::digits;\n+      using __gnu_cxx::__int_traits;\n+      constexpr auto _Nd = __int_traits<_Tp>::__digits;\n       if (__x == 0 || __x == 1)\n         return 1;\n       auto __shift_exponent = _Nd - std::__countl_zero((_Tp)(__x - 1u));\n@@ -230,7 +230,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n       if (!__builtin_is_constant_evaluated())\n \t{\n-\t  __glibcxx_assert( __shift_exponent != __int_limits<_Tp>::digits );\n+\t  __glibcxx_assert( __shift_exponent != __int_traits<_Tp>::__digits );\n \t}\n #endif\n       using __promoted_type = decltype(__x << 1);\n@@ -251,7 +251,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr _Tp\n     __bit_floor(_Tp __x) noexcept\n     {\n-      constexpr auto _Nd = __detail::__int_limits<_Tp>::digits;\n+      constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;\n       if (__x == 0)\n         return 0;\n       return (_Tp)1u << (_Nd - std::__countl_zero((_Tp)(__x >> 1)));\n@@ -261,7 +261,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr _Tp\n     __bit_width(_Tp __x) noexcept\n     {\n-      constexpr auto _Nd = __detail::__int_limits<_Tp>::digits;\n+      constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;\n       return _Nd - std::__countl_zero(__x);\n     }\n "}, {"sha": "cc7dd0e3758f32f77d083bb23b98a0a2c13646c8", "filename": "libstdc++-v3/include/std/charconv", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb04805be4029716e76532babc0fa9ecb18de96e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb04805be4029716e76532babc0fa9ecb18de96e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv?ref=eb04805be4029716e76532babc0fa9ecb18de96e", "patch": "@@ -42,7 +42,7 @@\n #include <cctype>\t\t// for isdigit\n #include <bits/charconv.h>\t// for __to_chars_len, __to_chars_10_impl\n #include <bits/error_constants.h> // for std::errc\n-#include <bits/int_limits.h>\n+#include <ext/numeric_traits.h>\n \n // FIXME: Define when floating point is supported:\n // #define __cpp_lib_to_chars 201611L\n@@ -237,7 +237,7 @@ namespace __detail\n       to_chars_result __res;\n       unsigned __len;\n \n-      if _GLIBCXX17_CONSTEXPR (__detail::__int_limits<_Tp>::digits <= 16)\n+      if _GLIBCXX17_CONSTEXPR (__gnu_cxx::__int_traits<_Tp>::__digits <= 16)\n \t{\n \t  __len = __val > 077777u ? 6u\n \t    : __val > 07777u ? 5u\n@@ -432,7 +432,7 @@ namespace __detail\n \t  __i++;\n \t}\n       __first += __i;\n-      return (__i - __leading_zeroes) <= __detail::__int_limits<_Tp>::digits;\n+      return (__i - __leading_zeroes) <= __gnu_cxx::__int_traits<_Tp>::__digits;\n     }\n \n   /// std::from_chars implementation for integers in bases 3 to 10.\n@@ -551,7 +551,7 @@ namespace __detail\n     case 'Z':\n       return 35;\n     }\n-    return __detail::__int_limits<unsigned char>::max();\n+    return __gnu_cxx::__int_traits<unsigned char>::__max;\n   }\n \n   /// std::from_chars implementation for integers in bases 11 to 26.\n@@ -638,10 +638,10 @@ namespace __detail\n \t\t}\n \t      else\n \t\t{\n-\t\t  if _GLIBCXX17_CONSTEXPR (__detail::__int_limits<_Up>::max()\n-\t\t      > __detail::__int_limits<_Tp>::max())\n+\t\t  if _GLIBCXX17_CONSTEXPR (__gnu_cxx::__int_traits<_Up>::__max\n+\t\t      > __gnu_cxx::__int_traits<_Tp>::__max)\n \t\t    {\n-\t\t      if (__val > __detail::__int_limits<_Tp>::max())\n+\t\t      if (__val > __gnu_cxx::__int_traits<_Tp>::__max)\n \t\t\t__res.ec = errc::result_out_of_range;\n \t\t      else\n \t\t\t__value = __val;"}, {"sha": "2b8735b8c396f82f50e752071a9263d7a1226d49", "filename": "libstdc++-v3/include/std/memory_resource", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb04805be4029716e76532babc0fa9ecb18de96e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb04805be4029716e76532babc0fa9ecb18de96e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource?ref=eb04805be4029716e76532babc0fa9ecb18de96e", "patch": "@@ -39,7 +39,7 @@\n #include <cstddef>\t\t\t// size_t, max_align_t, byte\n #include <shared_mutex>\t\t\t// shared_mutex\n #include <bits/functexcept.h>\n-#include <bits/int_limits.h>\n+#include <ext/numeric_traits.h>\n #include <debug/assertions.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -168,7 +168,7 @@ namespace pmr\n       allocate(size_t __n)\n       __attribute__((__returns_nonnull__))\n       {\n-\tif (__n > (__detail::__int_limits<size_t>::max() / sizeof(_Tp)))\n+\tif (__n > (__gnu_cxx::__int_traits<size_t>::__max / sizeof(_Tp)))\n \t  _GLIBCXX_THROW_OR_ABORT(bad_array_new_length());\n \treturn static_cast<_Tp*>(_M_resource->allocate(__n * sizeof(_Tp),\n \t\t\t\t\t\t       alignof(_Tp)));\n@@ -194,7 +194,7 @@ namespace pmr\n \t[[nodiscard]] _Up*\n \tallocate_object(size_t __n = 1)\n \t{\n-\t  if ((__detail::__int_limits<size_t>::max() / sizeof(_Up)) < __n)\n+\t  if ((__gnu_cxx::__int_traits<size_t>::__max / sizeof(_Up)) < __n)\n \t    _GLIBCXX_THROW_OR_ABORT(bad_array_new_length());\n \t  return static_cast<_Up*>(allocate_bytes(__n * sizeof(_Up),\n \t\t\t\t\t\t  alignof(_Up)));"}, {"sha": "ca0d6265098159659b2cffdd422975ffb39185fa", "filename": "libstdc++-v3/include/std/string_view", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb04805be4029716e76532babc0fa9ecb18de96e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb04805be4029716e76532babc0fa9ecb18de96e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=eb04805be4029716e76532babc0fa9ecb18de96e", "patch": "@@ -40,9 +40,9 @@\n #include <iosfwd>\n #include <bits/char_traits.h>\n #include <bits/functional_hash.h>\n-#include <bits/int_limits.h>\n #include <bits/range_access.h>\n #include <bits/ostream_insert.h>\n+#include <ext/numeric_traits.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -462,10 +462,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _S_compare(size_type __n1, size_type __n2) noexcept\n       {\n \tconst difference_type __diff = __n1 - __n2;\n-\tif (__diff > __detail::__int_limits<int>::max())\n-\t  return __detail::__int_limits<int>::max();\n-\tif (__diff < __detail::__int_limits<int>::min())\n-\t  return __detail::__int_limits<int>::min();\n+\tif (__diff > __gnu_cxx::__int_traits<int>::__max)\n+\t  return __gnu_cxx::__int_traits<int>::__max;\n+\tif (__diff < __gnu_cxx::__int_traits<int>::__min)\n+\t  return __gnu_cxx::__int_traits<int>::__min;\n \treturn static_cast<int>(__diff);\n       }\n "}, {"sha": "4a9ad604cbc18fb02d1c2e72ba8093d888697e1d", "filename": "libstdc++-v3/include/std/utility", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb04805be4029716e76532babc0fa9ecb18de96e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb04805be4029716e76532babc0fa9ecb18de96e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility?ref=eb04805be4029716e76532babc0fa9ecb18de96e", "patch": "@@ -76,7 +76,7 @@\n #include <initializer_list>\n \n #if __cplusplus > 201703L\n-#include <bits/int_limits.h>\n+#include <ext/numeric_traits.h>\n #endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -456,16 +456,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static_assert(__is_standard_integer<_Up>::value);\n       static_assert(__is_standard_integer<_Tp>::value);\n-      using std::__detail::__int_limits;\n+      using __gnu_cxx::__int_traits;\n \n       if constexpr (is_signed_v<_Tp> == is_signed_v<_Up>)\n-\treturn __int_limits<_Up>::min() <= __t\n-\t  && __t <= __int_limits<_Up>::max();\n+\treturn __int_traits<_Up>::__min <= __t\n+\t  && __t <= __int_traits<_Up>::__max;\n       else if constexpr (is_signed_v<_Tp>)\n \treturn __t >= 0\n-\t  && make_unsigned_t<_Tp>(__t) <= __int_limits<_Up>::max();\n+\t  && make_unsigned_t<_Tp>(__t) <= __int_traits<_Up>::__max;\n       else\n-\treturn __t <= make_unsigned_t<_Up>(__int_limits<_Up>::max());\n+\treturn __t <= make_unsigned_t<_Up>(__int_traits<_Up>::__max);\n     }\n #endif // C++20\n #endif // C++17"}]}