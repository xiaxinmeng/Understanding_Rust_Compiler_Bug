{"sha": "033509daea7672c110fbe3ad80b445623deb0848", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDMzNTA5ZGFlYTc2NzJjMTEwZmJlM2FkODBiNDQ1NjIzZGViMDg0OA==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2002-01-23T19:42:18Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2002-01-23T19:42:18Z"}, "message": "natField.cc (setAddr): New function.\n\n\n\t* java/lang/reflect/natField.cc (setAddr):  New function.\n\tCalls getAddr and then checks that the field isn't final.\n\t(setBoolean. setChar, setByte, setShort, setInt, setLong, setFloat,\n\tsetDouble, set):  Use setAddr instead of getAddr, to check for FINAL.\n\t(set):  Call setAddr before check that new value has right type,\n\tto better match specified semantics.\n\nFrom-SVN: r49153", "tree": {"sha": "6ba6fba52107bfd6271e31bfcd9a63f10ba28498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ba6fba52107bfd6271e31bfcd9a63f10ba28498"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/033509daea7672c110fbe3ad80b445623deb0848", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/033509daea7672c110fbe3ad80b445623deb0848", "html_url": "https://github.com/Rust-GCC/gccrs/commit/033509daea7672c110fbe3ad80b445623deb0848", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/033509daea7672c110fbe3ad80b445623deb0848/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c588e52b27d5051a1d93f9329a7160bae496f306", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c588e52b27d5051a1d93f9329a7160bae496f306", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c588e52b27d5051a1d93f9329a7160bae496f306"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "bc20e9637f3a1de543c3058d6cabfdbc568d28c9", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033509daea7672c110fbe3ad80b445623deb0848/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033509daea7672c110fbe3ad80b445623deb0848/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=033509daea7672c110fbe3ad80b445623deb0848", "patch": "@@ -1,3 +1,12 @@\n+2002-01-23  Per Bothner  <per@bothner.com>\n+\n+\t* java/lang/reflect/natField.cc (setAddr):  New function.\n+\tCalls getAddr and then checks that the field isn't final.\n+\t(setBoolean. setChar, setByte, setShort, setInt, setLong, setFloat,\n+\tsetDouble, set):  Use setAddr instead of getAddr, to check for FINAL.\n+\t(set):  Call setAddr before check that new value has right type,\n+\tto better match specified semantics.\n+\n 2002-01-22  Tom Tromey  <tromey@redhat.com>\n \n \t* java/awt/TextField.java: Replaced with Classpath version."}, {"sha": "b0ae48d3383c0786e21110598893273582b79d22", "filename": "libjava/java/lang/reflect/natField.cc", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033509daea7672c110fbe3ad80b445623deb0848/libjava%2Fjava%2Flang%2Freflect%2FnatField.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033509daea7672c110fbe3ad80b445623deb0848/libjava%2Fjava%2Flang%2Freflect%2FnatField.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FnatField.cc?ref=033509daea7672c110fbe3ad80b445623deb0848", "patch": "@@ -16,6 +16,7 @@ details.  */\n #include <java/lang/reflect/Field.h>\n #include <java/lang/reflect/Modifier.h>\n #include <java/lang/IllegalArgumentException.h>\n+#include <java/lang/IllegalAccessException.h>\n #include <java/lang/NullPointerException.h>\n #include <java/lang/Byte.h>\n #include <java/lang/Short.h>\n@@ -252,6 +253,15 @@ java::lang::reflect::Field::get (jclass caller, jobject obj)\n   throw new java::lang::IllegalArgumentException;\n }\n \n+static void*\n+setAddr (java::lang::reflect::Field* field, jclass caller, jobject obj)\n+{\n+  void *addr = getAddr(field, caller, obj);\n+  if  (field->getModifiers() & java::lang::reflect::Modifier::FINAL)\n+    throw new java::lang::IllegalAccessException();\n+  return addr;\n+}\n+\n static void\n setBoolean (jclass type, void *addr, jboolean value)\n {\n@@ -366,63 +376,63 @@ void\n java::lang::reflect::Field::setBoolean (jclass caller, jobject obj, jboolean b)\n {\n   jfieldID fld = _Jv_FromReflectedField (this);\n-  ::setBoolean (fld->type, getAddr (this, caller, obj), b);\n+  ::setBoolean (fld->type, setAddr (this, caller, obj), b);\n }\n \n void\n java::lang::reflect::Field::setChar (jclass caller, jobject obj, jchar c)\n {\n   jfieldID fld = _Jv_FromReflectedField (this);\n-  ::setChar (fld->type, getAddr (this, caller, obj), c);\n+  ::setChar (fld->type, setAddr (this, caller, obj), c);\n }\n \n void\n java::lang::reflect::Field::setByte (jclass caller, jobject obj, jbyte b)\n {\n   jfieldID fld = _Jv_FromReflectedField (this);\n-  ::setByte (fld->type, getAddr (this, caller, obj), b);\n+  ::setByte (fld->type, setAddr (this, caller, obj), b);\n }\n \n void\n java::lang::reflect::Field::setShort (jclass caller, jobject obj, jshort s)\n {\n   jfieldID fld = _Jv_FromReflectedField (this);\n-  ::setShort (fld->type, getAddr (this, caller, obj), s);\n+  ::setShort (fld->type, setAddr (this, caller, obj), s);\n }\n \n void\n java::lang::reflect::Field::setInt (jclass caller, jobject obj, jint i)\n {\n   jfieldID fld = _Jv_FromReflectedField (this);\n-  ::setInt (fld->type, getAddr (this, caller, obj), i);\n+  ::setInt (fld->type, setAddr (this, caller, obj), i);\n }\n \n void\n java::lang::reflect::Field::setLong (jclass caller, jobject obj, jlong l)\n {\n   jfieldID fld = _Jv_FromReflectedField (this);\n-  ::setLong (fld->type, getAddr (this, caller, obj), l);\n+  ::setLong (fld->type, setAddr (this, caller, obj), l);\n }\n void\n java::lang::reflect::Field::setFloat (jclass caller, jobject obj, jfloat f)\n {\n   jfieldID fld = _Jv_FromReflectedField (this);\n-  ::setFloat (fld->type, getAddr (this, caller, obj), f);\n+  ::setFloat (fld->type, setAddr (this, caller, obj), f);\n }\n \n void\n java::lang::reflect::Field::setDouble (jclass caller, jobject obj, jdouble d)\n {\n   jfieldID fld = _Jv_FromReflectedField (this);\n-  ::setDouble (fld->type, getAddr (this, caller, obj), d);\n+  ::setDouble (fld->type, setAddr (this, caller, obj), d);\n }\n \n void\n java::lang::reflect::Field::set (jclass caller, jobject object, jobject value,\n \t\t\t\t jclass type)\n {\n+  void* addr = setAddr (this, caller, object);\n   if (value != NULL && ! _Jv_IsInstanceOf (value, type))\n     throw new java::lang::IllegalArgumentException;\n-  void* addr = getAddr (this, caller, object);\n   * (jobject*) addr = value;\n }"}]}