{"sha": "bd39cb5225a1a8b3a7ac15ef7a50231205a64ff8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQzOWNiNTIyNWExYThiM2E3YWMxNWVmN2E1MDIzMTIwNWE2NGZmOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-10-08T15:21:29Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-10-08T15:21:29Z"}, "message": "lto-streamer-in.c (lto_input_ts_decl_minimal_tree_pointers): Re-construct BLOCK_VARS.\n\n2010-10-08  Richard Guenther  <rguenther@suse.de>\n\n\t* lto-streamer-in.c (lto_input_ts_decl_minimal_tree_pointers):\n\tRe-construct BLOCK_VARS.\n\t(lto_input_ts_block_tree_pointers): Do not stream BLOCK_VARS.\n\t* lto-streamer-out.c (lto_output_ts_block_tree_pointers): Likewise.\n\t* tree.c (free_lang_data_in_block): Remove.\n\t(free_lang_data_in_decl): Do not touch DECL_CONTEXT of non-PARM_DECLs.\n\tDo not touch the BLOCK tree.\n\t* expr.c (expand_expr_real_1): Allow externals.\n\nFrom-SVN: r165191", "tree": {"sha": "cd4458364349dd314a008566cb2ca44b9b869fc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd4458364349dd314a008566cb2ca44b9b869fc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd39cb5225a1a8b3a7ac15ef7a50231205a64ff8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd39cb5225a1a8b3a7ac15ef7a50231205a64ff8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd39cb5225a1a8b3a7ac15ef7a50231205a64ff8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd39cb5225a1a8b3a7ac15ef7a50231205a64ff8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8686c474f718468adeaf5663f0ad4e0721ef2ab0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8686c474f718468adeaf5663f0ad4e0721ef2ab0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8686c474f718468adeaf5663f0ad4e0721ef2ab0"}], "stats": {"total": 94, "additions": 28, "deletions": 66}, "files": [{"sha": "be4f9f795cf6ccf02abb6c66078edb3fb3cf1b98", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd39cb5225a1a8b3a7ac15ef7a50231205a64ff8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd39cb5225a1a8b3a7ac15ef7a50231205a64ff8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd39cb5225a1a8b3a7ac15ef7a50231205a64ff8", "patch": "@@ -1,3 +1,14 @@\n+2010-10-08  Richard Guenther  <rguenther@suse.de>\n+\n+\t* lto-streamer-in.c (lto_input_ts_decl_minimal_tree_pointers):\n+\tRe-construct BLOCK_VARS.\n+\t(lto_input_ts_block_tree_pointers): Do not stream BLOCK_VARS.\n+\t* lto-streamer-out.c (lto_output_ts_block_tree_pointers): Likewise.\n+\t* tree.c (free_lang_data_in_block): Remove.\n+\t(free_lang_data_in_decl): Do not touch DECL_CONTEXT of non-PARM_DECLs.\n+\tDo not touch the BLOCK tree.\n+\t* expr.c (expand_expr_real_1): Allow externals.\n+\n 2010-10-08  Richard Guenther  <rguenther@suse.de>\n \n \t* lto-streamer-out.c (lto_output_ts_block_tree_pointers):"}, {"sha": "291b79f4bd2d48ef5a802703d0967c8d027c8263", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd39cb5225a1a8b3a7ac15ef7a50231205a64ff8/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd39cb5225a1a8b3a7ac15ef7a50231205a64ff8/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=bd39cb5225a1a8b3a7ac15ef7a50231205a64ff8", "patch": "@@ -8448,6 +8448,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       gcc_assert (!context\n \t\t  || context == current_function_decl\n \t\t  || TREE_STATIC (exp)\n+\t\t  || DECL_EXTERNAL (exp)\n \t\t  /* ??? C++ creates functions that are not TREE_STATIC.  */\n \t\t  || TREE_CODE (exp) == FUNCTION_DECL);\n "}, {"sha": "fb27e63b753d4506bebd66cdc9d26d5433692861", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd39cb5225a1a8b3a7ac15ef7a50231205a64ff8/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd39cb5225a1a8b3a7ac15ef7a50231205a64ff8/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=bd39cb5225a1a8b3a7ac15ef7a50231205a64ff8", "patch": "@@ -1915,6 +1915,13 @@ lto_input_ts_decl_minimal_tree_pointers (struct lto_input_block *ib,\n {\n   DECL_NAME (expr) = lto_input_tree (ib, data_in);\n   DECL_CONTEXT (expr) = lto_input_tree (ib, data_in);\n+  /* We do not stream BLOCK_VARS but lazily construct it here.  */\n+  if (DECL_CONTEXT (expr)\n+      && TREE_CODE (DECL_CONTEXT (expr)) == BLOCK)\n+    {\n+      TREE_CHAIN (expr) = BLOCK_VARS (DECL_CONTEXT (expr));\n+      BLOCK_VARS (DECL_CONTEXT (expr)) = expr;\n+    }\n   DECL_SOURCE_LOCATION (expr) = lto_input_location (ib, data_in);\n }\n \n@@ -2136,7 +2143,8 @@ lto_input_ts_block_tree_pointers (struct lto_input_block *ib,\n   unsigned i, len;\n \n   BLOCK_SOURCE_LOCATION (expr) = lto_input_location (ib, data_in);\n-  BLOCK_VARS (expr) = lto_input_chain (ib, data_in);\n+  /* We do not stream BLOCK_VARS but lazily construct it when reading\n+     in decls.  */\n \n   len = lto_input_uleb128 (ib);\n   if (len > 0)"}, {"sha": "42e37fa86e5bb65a6a6829cefec5e769c2731ba6", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd39cb5225a1a8b3a7ac15ef7a50231205a64ff8/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd39cb5225a1a8b3a7ac15ef7a50231205a64ff8/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=bd39cb5225a1a8b3a7ac15ef7a50231205a64ff8", "patch": "@@ -1055,11 +1055,15 @@ lto_output_ts_block_tree_pointers (struct output_block *ob, tree expr,\n   tree t;\n \n   lto_output_location (ob, BLOCK_SOURCE_LOCATION (expr));\n-  lto_output_chain (ob, BLOCK_VARS (expr), ref_p);\n+  /* We do not stream BLOCK_VARS but lazily construct it when reading\n+     in decls.  */\n \n   output_uleb128 (ob, VEC_length (tree, BLOCK_NONLOCALIZED_VARS (expr)));\n   FOR_EACH_VEC_ELT (tree, BLOCK_NONLOCALIZED_VARS (expr), i, t)\n-    lto_output_tree_or_ref (ob, t, ref_p);\n+    {\n+      gcc_assert (DECL_CONTEXT (t) != expr);\n+      lto_output_tree_or_ref (ob, t, ref_p);\n+    }\n \n   lto_output_tree_or_ref (ob, BLOCK_SUPERCONTEXT (expr), ref_p);\n   lto_output_tree_or_ref (ob, BLOCK_ABSTRACT_ORIGIN (expr), ref_p);"}, {"sha": "d068a7e109eeaeabc727d15fddc9ca6bfc6677b5", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 63, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd39cb5225a1a8b3a7ac15ef7a50231205a64ff8/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd39cb5225a1a8b3a7ac15ef7a50231205a64ff8/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=bd39cb5225a1a8b3a7ac15ef7a50231205a64ff8", "patch": "@@ -4443,29 +4443,6 @@ need_assembler_name_p (tree decl)\n }\n \n \n-/* Remove all the non-variable decls from BLOCK.  LOCALS is the set of\n-   variables in DECL_STRUCT_FUNCTION (FN)->local_decls.  Every decl\n-   in BLOCK that is not in LOCALS is removed.  */\n-\n-static void\n-free_lang_data_in_block (tree fn, tree block, struct pointer_set_t *locals)\n-{\n-  tree *tp, t;\n-\n-  tp = &BLOCK_VARS (block);\n-  while (*tp)\n-    {\n-      if (!pointer_set_contains (locals, *tp))\n-\t*tp = TREE_CHAIN (*tp);\n-      else\n-\ttp = &TREE_CHAIN (*tp);\n-    }\n-\n-  for (t = BLOCK_SUBBLOCKS (block); t; t = BLOCK_CHAIN (t))\n-    free_lang_data_in_block (fn, t, locals);\n-}\n-\n-\n /* Reset all language specific information still present in symbol\n    DECL.  */\n \n@@ -4489,16 +4466,6 @@ free_lang_data_in_decl (tree decl)\n   if (DECL_NAME (decl))\n     TREE_TYPE (DECL_NAME (decl)) = NULL_TREE;\n \n-  /* Ignore any intervening types, because we are going to clear their\n-     TYPE_CONTEXT fields.  */\n-  if (TREE_CODE (decl) != FIELD_DECL\n-      && TREE_CODE (decl) != FUNCTION_DECL)\n-    DECL_CONTEXT (decl) = decl_function_context (decl);\n-\n-  if (DECL_CONTEXT (decl)\n-      && TREE_CODE (DECL_CONTEXT (decl)) == NAMESPACE_DECL)\n-    DECL_CONTEXT (decl) = NULL_TREE;\n-\n  if (TREE_CODE (decl) == VAR_DECL)\n    {\n      tree context = DECL_CONTEXT (decl);\n@@ -4512,9 +4479,6 @@ free_lang_data_in_decl (tree decl)\n \t        all vars to global ones.  */\n \t     DECL_INITIAL (decl) = NULL_TREE;\n \t   }\n-\n-\t if (TREE_STATIC (decl))\n-\t   DECL_CONTEXT (decl) = NULL_TREE;\n        }\n    }\n \n@@ -4533,8 +4497,6 @@ free_lang_data_in_decl (tree decl)\n       if (gimple_has_body_p (decl))\n \t{\n \t  tree t;\n-\t  unsigned ix;\n-\t  struct pointer_set_t *locals;\n \n \t  /* If DECL has a gimple body, then the context for its\n \t     arguments must be DECL.  Otherwise, it doesn't really\n@@ -4547,22 +4509,6 @@ free_lang_data_in_decl (tree decl)\n \t     the PARM_DECL will be used in the function's body).  */\n \t  for (t = DECL_ARGUMENTS (decl); t; t = TREE_CHAIN (t))\n \t    DECL_CONTEXT (t) = decl;\n-\n-\t  /* Collect all the symbols declared in DECL.  */\n-\t  locals = pointer_set_create ();\n-\t  FOR_EACH_LOCAL_DECL (DECL_STRUCT_FUNCTION (decl), ix, t)\n-\t    {\n-\t      pointer_set_insert (locals, t);\n-\n-\t      /* All the local symbols should have DECL as their\n-\t\t context.  */\n-\t      DECL_CONTEXT (t) = decl;\n-\t    }\n-\n-\t  /* Get rid of any decl not in local_decls.  */\n-\t  free_lang_data_in_block (decl, DECL_INITIAL (decl), locals);\n-\n-\t  pointer_set_destroy (locals);\n \t}\n \n       /* DECL_SAVED_TREE holds the GENERIC representation for DECL.\n@@ -4576,15 +4522,7 @@ free_lang_data_in_decl (tree decl)\n \tDECL_INITIAL (decl) = NULL_TREE;\n     }\n   else if (TREE_CODE (decl) == TYPE_DECL)\n-    {\n-      DECL_INITIAL (decl) = NULL_TREE;\n-\n-      /* DECL_CONTEXT is overloaded as DECL_FIELD_CONTEXT for\n-\t FIELD_DECLs, which should be preserved.  Otherwise,\n-\t we shouldn't be concerned with source-level lexical\n-\t nesting beyond this point. */\n-      DECL_CONTEXT (decl) = NULL_TREE;\n-    }\n+    DECL_INITIAL (decl) = NULL_TREE;\n }\n \n "}]}