{"sha": "14a07c92824f33079e12d00118ef1a434128ac82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRhMDdjOTI4MjRmMzMwNzllMTJkMDAxMThlZjFhNDM0MTI4YWM4Mg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2005-08-24T07:48:45Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-08-24T07:48:45Z"}, "message": "darwin.c (gen_pic_offset): New.\n\n2005-08-24  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* config/darwin.c (gen_pic_offset): New.\n\t(machopic_indirect_data_reference,  machopic_legitimize_pic_address):\n\tUse it.\n\nFrom-SVN: r103434", "tree": {"sha": "f4f0bb0f5074ee57bc0f4122196ae5ef2f886cfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4f0bb0f5074ee57bc0f4122196ae5ef2f886cfa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14a07c92824f33079e12d00118ef1a434128ac82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14a07c92824f33079e12d00118ef1a434128ac82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14a07c92824f33079e12d00118ef1a434128ac82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14a07c92824f33079e12d00118ef1a434128ac82/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d49195a31bf02eed0b8d8360806d4c20602d75e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d49195a31bf02eed0b8d8360806d4c20602d75e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d49195a31bf02eed0b8d8360806d4c20602d75e0"}], "stats": {"total": 46, "additions": 26, "deletions": 20}, "files": [{"sha": "7726006bb019a0754db53bac1ca26ce1702a327d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14a07c92824f33079e12d00118ef1a434128ac82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14a07c92824f33079e12d00118ef1a434128ac82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14a07c92824f33079e12d00118ef1a434128ac82", "patch": "@@ -1,3 +1,9 @@\n+2005-08-24  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* config/darwin.c (gen_pic_offset): New.\n+\t(machopic_indirect_data_reference,  machopic_legitimize_pic_address):\n+\tUse it.\n+\n 2005-08-23  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \tPR tree-optimization/23486"}, {"sha": "bd5d5a8c75b063a3e78a178393157c1458cd7bc7", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14a07c92824f33079e12d00118ef1a434128ac82/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14a07c92824f33079e12d00118ef1a434128ac82/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=14a07c92824f33079e12d00118ef1a434128ac82", "patch": "@@ -227,6 +227,17 @@ machopic_function_base_sym (void)\n   return sym_ref;\n }\n \n+/* Return either ORIG or (const:P (minus:P ORIG PIC_BASE)), depending\n+   on whether pic_base is NULL or not.  */\n+static inline rtx\n+gen_pic_offset (rtx orig, rtx pic_base)\n+{\n+  if (!pic_base)\n+    return orig;\n+  else\n+    return gen_rtx_CONST (Pmode, gen_rtx_MINUS (Pmode, orig, pic_base));\n+}\n+\n static GTY(()) const char * function_base_func_name;\n static GTY(()) int current_pic_label_num;\n \n@@ -433,8 +444,7 @@ machopic_indirect_data_reference (rtx orig, rtx reg)\n \t{\n #if defined (TARGET_TOC) || defined (HAVE_lo_sum)\n \t  rtx pic_base = machopic_function_base_sym ();\n-\t  rtx offset = gen_rtx_CONST (Pmode,\n-\t\t\t\t      gen_rtx_MINUS (Pmode, orig, pic_base));\n+\t  rtx offset = gen_pic_offset (orig, pic_base);\n #endif\n \n #if defined (TARGET_TOC) /* i.e., PowerPC */\n@@ -591,9 +601,9 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t  return reg;\n \t}\n \n-      /* if dynamic-no-pic then use 0 as the pic base  */\n+      /* if dynamic-no-pic we don't have a pic base  */\n       if (MACHO_DYNAMIC_NO_PIC_P)\n-\tpic_base = CONST0_RTX (Pmode);\n+\tpic_base = NULL;\n       else\n \tpic_base = machopic_function_base_sym ();\n \n@@ -629,10 +639,7 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t  if (GET_CODE (XEXP (orig, 0)) == SYMBOL_REF\n \t      || GET_CODE (XEXP (orig, 0)) == LABEL_REF)\n \t    {\n-\t      rtx offset = gen_rtx_CONST (Pmode,\n-\t\t\t\t\t  gen_rtx_MINUS (Pmode,\n-\t\t\t\t\t\t\t XEXP (orig, 0),\n-\t\t\t\t\t\t\t pic_base));\n+\t      rtx offset = gen_pic_offset (XEXP (orig, 0), pic_base);\n #if defined (TARGET_TOC) /* i.e., PowerPC */\n \t      /* Generating a new reg may expose opportunities for\n \t\t common subexpression elimination.  */\n@@ -686,12 +693,9 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t\t\t\t\t\t   PIC_OFFSET_TABLE_REGNUM)));\n #endif\n \n-\t      pic_ref = gen_rtx_PLUS (Pmode,\n-\t\t\t\t      pic,\n-\t\t\t\t      gen_rtx_CONST (Pmode,\n-\t\t\t\t\t  gen_rtx_MINUS (Pmode,\n-\t\t\t\t\t\t\t XEXP (orig, 0),\n-\t\t\t\t\t\t\t pic_base)));\n+\t      pic_ref = gen_rtx_PLUS (Pmode, pic,\n+\t\t\t\t      gen_pic_offset (XEXP (orig, 0),\n+\t\t\t\t\t\t      pic_base));\n \t    }\n \n #if !defined (TARGET_TOC)\n@@ -706,9 +710,7 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t  if (GET_CODE (orig) == SYMBOL_REF\n \t      || GET_CODE (orig) == LABEL_REF)\n \t    {\n-\t      rtx offset = gen_rtx_CONST (Pmode,\n-\t\t\t\t\t  gen_rtx_MINUS (Pmode, \n-\t\t\t\t\t\t\t orig, pic_base));\n+\t      rtx offset = gen_pic_offset (orig, pic_base);\n #if defined (TARGET_TOC) /* i.e., PowerPC */\n               rtx hi_sum_reg;\n \n@@ -762,9 +764,7 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n #endif\n \t\t  pic_ref = gen_rtx_PLUS (Pmode,\n \t\t\t\t\t  pic,\n-\t\t\t\t\t  gen_rtx_CONST (Pmode,\n-\t\t\t\t\t      gen_rtx_MINUS (Pmode,\n-\t\t\t\t\t\t\t     orig, pic_base)));\n+\t\t\t\t\t  gen_pic_offset (orig, pic_base));\n \t\t}\n \t    }\n \t}"}]}