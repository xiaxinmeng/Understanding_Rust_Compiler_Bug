{"sha": "ddaf4c9114124df0305df1eeb8e1452b42c3c771", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRhZjRjOTExNDEyNGRmMDMwNWRmMWVlYjhlMTQ1MmI0MmMzYzc3MQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-03-07T17:38:08Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-03-07T17:38:08Z"}, "message": "lib2funcs.asm: Remove entry/exit routines.\n\n        * lib2funcs.asm: Remove entry/exit routines.  Move them into...\n        * ee.asm: New file.  Entry/exit code.\n        * ee_fp.asm: New file.  Entry/exit code with frame pointer.\n        * t-pa: Corresponding changes.\n        * t-pro: Corresponding changes.\n\nFrom-SVN: r11491", "tree": {"sha": "ffccde381d812672b7bdf0ef4ab8ef214a6b0013", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffccde381d812672b7bdf0ef4ab8ef214a6b0013"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddaf4c9114124df0305df1eeb8e1452b42c3c771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddaf4c9114124df0305df1eeb8e1452b42c3c771", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddaf4c9114124df0305df1eeb8e1452b42c3c771", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddaf4c9114124df0305df1eeb8e1452b42c3c771/comments", "author": null, "committer": null, "parents": [{"sha": "9e9b00600ba508de8a86b1676a7e7be51828c566", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e9b00600ba508de8a86b1676a7e7be51828c566", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e9b00600ba508de8a86b1676a7e7be51828c566"}], "stats": {"total": 489, "additions": 20, "deletions": 469}, "files": [{"sha": "854aa9c62be1632c8e25918aefb6945391536af0", "filename": "gcc/config/pa/lib2funcs.asm", "status": "modified", "additions": 0, "deletions": 465, "changes": 465, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddaf4c9114124df0305df1eeb8e1452b42c3c771/gcc%2Fconfig%2Fpa%2Flib2funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddaf4c9114124df0305df1eeb8e1452b42c3c771/gcc%2Fconfig%2Fpa%2Flib2funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Flib2funcs.asm?ref=ddaf4c9114124df0305df1eeb8e1452b42c3c771", "patch": "@@ -64,468 +64,3 @@ L$foo\n \tbe,n 0(%sr0,%rp)\n \t.EXIT\n \t.PROCEND\n-\n-\t.SPACE $TEXT$\n-\t.SUBSPA $MILLICODE$\n-\n-; This is an out-of-line prologue.\n-;\n-; It performs the following operations:\n-;\n-;\t* Saves the return pointer at sp - 20\n-;\n-;\t* Creates a new stack frame (sp'), size of the frame is passed in %r21\n-;\n-;\t* The old stack pointer is saved at sp (frame pointer version only).\n-;\n-;\t* Saves grs (passed in low 16 bits of %r22 into the stack frame\n-;\tat sp' + local_fsize (passed in %r19).\n-;\n-;\t* Saves frs (passed in high 16 bits of %r22) into the stack\n-;\tframe at sp' + local_fsize (passed in %r19).\n-;\n-;\t* Sets up a frame pointer (in %r3) (frame pointer version only).\n-;\n-;\t* Returns to the instruction _immediately_ after the call to\n-;\tthis function.\n-\n-\t.align 32\n-\t.NSUBSPA $MILLICODE$,QUAD=0,ALIGN=8,ACCESS=44,CODE_ONLY\n-\t.EXPORT __outline_prologue,MILLICODE\n-__outline_prologue\n-\t.PROC\n-\t.CALLINFO FRAME=0,NO_CALLS\n-\t.ENTRY\n-\tcopy %r30,%r20\n-\n-\t; Subtract 4 from our return pointer so that we return to\n-\t; the right location.\n-        ldo -4(%r31),%r31\n-\n-\t; Save off %r2\n-\tstw %r2,-20(0,%r30)\n-\n-\t; Make our new frame.\n-\tadd %r21,%r30,%r30\n-\n-\t; Add in local_fsize to our frame pointer so we do register\n-\t; saves into the right place\n-\tadd %r20,%r19,%r20\n-\n-\t; %r22 tells us what registers we need to save.  The upper half\n-\t; is for fp registers, the lower half for integer registers.\n-\t; We put the lower half in %r1 and the upper half into %r22\n-\t; for later use.\n-\textru %r22,31,16,%r1\n-\textrs %r22,15,16,%r22\n-\n-\t; %r1 now olds a value 0-18 which corresponds to the number\n-\t; of grs we need to save.  We need to reverse that value so\n-\t; we can just into the table and straight-line execute to the\n-\t; end of the gr saves.\n-\tcomb,= %r0,%r1,L$0000\n-\tsubi 18,%r1,%r1\n-\tblr,n %r1,%r0\n-\tb,n L$0000\n-\tstws,ma %r18,4(0,%r20)\n-\tnop\n-\tstws,ma %r17,4(0,%r20)\n-\tnop\n-\tstws,ma %r16,4(0,%r20)\n-\tnop\n-\tstws,ma %r15,4(0,%r20)\n-\tnop\n-\tstws,ma %r14,4(0,%r20)\n-\tnop\n-\tstws,ma %r13,4(0,%r20)\n-\tnop\n-\tstws,ma %r12,4(0,%r20)\n-\tnop\n-\tstws,ma %r11,4(0,%r20)\n-\tnop\n-\tstws,ma %r10,4(0,%r20)\n-\tnop\n-\tstws,ma %r9,4(0,%r20)\n-\tnop\n-\tstws,ma %r8,4(0,%r20)\n-\tnop\n-\tstws,ma %r7,4(0,%r20)\n-\tnop\n-\tstws,ma %r6,4(0,%r20)\n-\tnop\n-\tstws,ma %r5,4(0,%r20)\n-\tnop\n-\tstws,ma %r4,4(0,%r20)\n-\tnop\n-\tstws,ma %r3,4(0,%r20)\n-\tnop\n-L$0000\n-\t; All gr saves are done.  Align the temporary frame pointer and\n-\t; do the fr saves.\n-\tldo 7(%r20),%r20\n-\tdepi 0,31,3,%r20\n-\n-\tcomb,= %r0,%r22,L$0001\n-\tsubi 21,%r22,%r22\n-\tblr,n %r22,%r0\n-\tb,n L$0001\n-\tfstws,ma %fr21,8(0,%r20)\n-\tnop\n-\tfstws,ma %fr20,8(0,%r20)\n-\tnop\n-\tfstws,ma %fr19,8(0,%r20)\n-\tnop\n-\tfstws,ma %fr18,8(0,%r20)\n-\tnop\n-\tfstws,ma %fr17,8(0,%r20)\n-\tnop\n-\tfstws,ma %fr16,8(0,%r20)\n-\tnop\n-\tfstws,ma %fr15,8(0,%r20)\n-\tnop\n-\tfstws,ma %fr14,8(0,%r20)\n-\tnop\n-\tfstws,ma %fr13,8(0,%r20)\n-\tnop\n-\tfstws,ma %fr12,8(0,%r20)\n-\tnop\n-L$0001\n-\t; Return\n-\tbv,n 0(%r31)\n-\t.EXIT\n-\t.PROCEND\n-\n-\n-\n-\t.align 32\n-\t.NSUBSPA $MILLICODE$,QUAD=0,ALIGN=8,ACCESS=44,CODE_ONLY\n-\t.EXPORT __outline_prologue_fp,MILLICODE\n-__outline_prologue_fp\n-\t.PROC\n-\t.CALLINFO FRAME=0,NO_CALLS\n-\t.ENTRY\n-\tcopy %r30,%r20\n-\n-\t; Subtract 4 from our return pointer so that we return to\n-\t; the right location.\n-        ldo -4(%r31),%r31\n-\n-\t; Save off %r2\n-\tstw %r2,-20(0,%r30)\n-\n-\t; Make our new frame.\n-\tadd %r21,%r30,%r30\n-\n-\t; Save our old stack pointer.\n-\tstw %r20,0(0,%r20)\n-\n-\t; Add in local_fsize to our frame pointer so we do register\n-\t; saves into the right place\n-\tadd %r20,%r19,%r20\n-\n-\t; %r22 tells us what registers we need to save.  The upper half\n-\t; is for fp registers, the lower half for integer registers.\n-\t; We put the lower half in %r1 and the upper half into %r22\n-\t; for later use.\n-\textru %r22,31,16,%r1\n-\textrs %r22,15,16,%r22\n-\n-\t; %r1 now olds a value 0-18 which corresponds to the number\n-\t; of grs we need to save.  We need to reverse that value so\n-\t; we can just into the table and straight-line execute to the\n-\t; end of the gr saves.\n-\tcomb,= %r0,%r1,L$0002\n-\tsubi 18,%r1,%r1\n-\tblr,n %r1,%r0\n-\tb,n L$0002\n-\tstws,ma %r18,4(0,%r20)\n-\tnop\n-\tstws,ma %r17,4(0,%r20)\n-\tnop\n-\tstws,ma %r16,4(0,%r20)\n-\tnop\n-\tstws,ma %r15,4(0,%r20)\n-\tnop\n-\tstws,ma %r14,4(0,%r20)\n-\tnop\n-\tstws,ma %r13,4(0,%r20)\n-\tnop\n-\tstws,ma %r12,4(0,%r20)\n-\tnop\n-\tstws,ma %r11,4(0,%r20)\n-\tnop\n-\tstws,ma %r10,4(0,%r20)\n-\tnop\n-\tstws,ma %r9,4(0,%r20)\n-\tnop\n-\tstws,ma %r8,4(0,%r20)\n-\tnop\n-\tstws,ma %r7,4(0,%r20)\n-\tnop\n-\tstws,ma %r6,4(0,%r20)\n-\tnop\n-\tstws,ma %r5,4(0,%r20)\n-\tnop\n-\tstws,ma %r4,4(0,%r20)\n-\tnop\n-\tstws,ma %r3,4(0,%r20)\n-\tnop\n-L$0002\n-\t; All gr saves are done.  Align the temporary frame pointer and\n-\t; do the fr saves.\n-\tldo 7(%r20),%r20\n-\tdepi 0,31,3,%r20\n-\n-\tcomb,= %r0,%r22,L$0003\n-\tsubi 21,%r22,%r22\n-\tblr,n %r22,%r0\n-\tb,n L$0003\n-\tfstws,ma %fr21,8(0,%r20)\n-\tnop\n-\tfstws,ma %fr20,8(0,%r20)\n-\tnop\n-\tfstws,ma %fr19,8(0,%r20)\n-\tnop\n-\tfstws,ma %fr18,8(0,%r20)\n-\tnop\n-\tfstws,ma %fr17,8(0,%r20)\n-\tnop\n-\tfstws,ma %fr16,8(0,%r20)\n-\tnop\n-\tfstws,ma %fr15,8(0,%r20)\n-\tnop\n-\tfstws,ma %fr14,8(0,%r20)\n-\tnop\n-\tfstws,ma %fr13,8(0,%r20)\n-\tnop\n-\tfstws,ma %fr12,8(0,%r20)\n-\tnop\n-L$0003\n-\t; Return, setting up a frame pointer in the delay slot\n-\tbv 0(%r31)\n-\tsub %r30,%r21,%r3\n-\t.EXIT\n-\t.PROCEND\n-\n-\n-; This is an out-of-line epilogue.  It's operation is basically the reverse\n-; of the out-of-line prologue.\n-\n-\t.align 32\n-\t.NSUBSPA $MILLICODE$,QUAD=0,ALIGN=8,ACCESS=44,CODE_ONLY\n-\t.EXPORT __outline_epilogue,MILLICODE\n-__outline_epilogue\n-\t.PROC\n-\t.CALLINFO FRAME=0,NO_CALLS\n-\t.ENTRY\n-\t; Get our original stack pointer and put it in %r20\n-\tsub %r30,%r21,%r20\n-\n-\t; Subtract 4 from our return pointer so that we return to\n-\t; the right location.\n-        ldo -4(%r31),%r31\n-\n-\t; Reload %r2\n-\tldw -20(0,%r20),%r2\n-\n-\t; Add in local_fsize (%r19) to the frame pointer to find\n-\t; the saved registers.\n-\tadd %r20,%r19,%r20\n-\n-\t; %r22 tells us what registers we need to restore.  The upper half\n-\t; is for fp registers, the lower half for integer registers.\n-\t; We put the lower half in %r1 and the upper half into %r22\n-\t; for later use.\n-\textru %r22,31,16,%r1\n-\textrs %r22,15,16,%r22\n-\n-\t; %r1 now olds a value 0-18 which corresponds to the number\n-\t; of grs we need to restore.  We need to reverse that value so\n-\t; we can just into the table and straight-line execute to the\n-\t; end of the gr restore.\n-\tcomb,= %r0,%r1,L$0004\n-\tsubi 18,%r1,%r1\n-\tblr,n %r1,%r0\n-\tb,n L$0004\n-\tldws,ma 4(0,%r20),%r18\n-\tnop\n-\tldws,ma 4(0,%r20),%r17\n-\tnop\n-\tldws,ma 4(0,%r20),%r16\n-\tnop\n-\tldws,ma 4(0,%r20),%r15\n-\tnop\n-\tldws,ma 4(0,%r20),%r14\n-\tnop\n-\tldws,ma 4(0,%r20),%r13\n-\tnop\n-\tldws,ma 4(0,%r20),%r12\n-\tnop\n-\tldws,ma 4(0,%r20),%r11\n-\tnop\n-\tldws,ma 4(0,%r20),%r10\n-\tnop\n-\tldws,ma 4(0,%r20),%r9\n-\tnop\n-\tldws,ma 4(0,%r20),%r8\n-\tnop\n-\tldws,ma 4(0,%r20),%r7\n-\tnop\n-\tldws,ma 4(0,%r20),%r6\n-\tnop\n-\tldws,ma 4(0,%r20),%r5\n-\tnop\n-\tldws,ma 4(0,%r20),%r4\n-\tnop\n-\tldws,ma 4(0,%r20),%r3\n-\tnop\n-L$0004\n-\t; All gr restore are done.  Align the temporary frame pointer and\n-\t; do the fr restore.\n-\tldo 7(%r20),%r20\n-\tdepi 0,31,3,%r20\n-\n-\tcomb,= %r0,%r22,L$0005\n-\tsubi 21,%r22,%r22\n-\tblr,n %r22,%r0\n-\tb,n L$0005\n-\tfldws,ma 8(0,%r20),%fr21\n-\tnop\n-\tfldws,ma 8(0,%r20),%fr20\n-\tnop\n-\tfldws,ma 8(0,%r20),%fr19\n-\tnop\n-\tfldws,ma 8(0,%r20),%fr18\n-\tnop\n-\tfldws,ma 8(0,%r20),%fr17\n-\tnop\n-\tfldws,ma 8(0,%r20),%fr16\n-\tnop\n-\tfldws,ma 8(0,%r20),%fr15\n-\tnop\n-\tfldws,ma 8(0,%r20),%fr14\n-\tnop\n-\tfldws,ma 8(0,%r20),%fr13\n-\tnop\n-\tfldws,ma 8(0,%r20),%fr12\n-\tnop\n-L$0005\n-\t; Return and deallocate our frame.\n-\tbv 0(%r31)\n-\tsub %r30,%r21,%r30\n-\t.EXIT\n-\t.PROCEND\n-\n-; This is an out-of-line epilogue.  It's operation is basically the reverse\n-; of the out-of-line prologue.\n-\n-\t.align 32\n-\t.NSUBSPA $MILLICODE$,QUAD=0,ALIGN=8,ACCESS=44,CODE_ONLY\n-\t.EXPORT __outline_epilogue_fp,MILLICODE\n-__outline_epilogue_fp\n-\t.PROC\n-\t.CALLINFO FRAME=0,NO_CALLS\n-\t.ENTRY\n-\t; Make a copy of our frame pointer into %r20\n-\tcopy %r3,%r20\n-\n-\t; Subtract 4 from our return pointer so that we return to\n-\t; the right location.\n-        ldo -4(%r31),%r31\n-\n-\t; Reload %r2\n-\t; First save off %r2\n-\tldw -20(0,%r20),%r2\n-\n-\t; Load our old stack pointer, save it in %r21.\n-\tldw 0(0,%r20),%r21\n-\n-\t; Add in local_fsize (%r19) to the frame pointer to find\n-\t; the saved registers.\n-\tadd %r20,%r19,%r20\n-\n-\t; %r22 tells us what registers we need to restore.  The upper half\n-\t; is for fp registers, the lower half for integer registers.\n-\t; We put the lower half in %r1 and the upper half into %r22\n-\t; for later use.\n-\textru %r22,31,16,%r1\n-\textrs %r22,15,16,%r22\n-\n-\t; %r1 now olds a value 0-18 which corresponds to the number\n-\t; of grs we need to restore.  We need to reverse that value so\n-\t; we can just into the table and straight-line execute to the\n-\t; end of the gr restore.\n-\tcomb,= %r0,%r1,L$0006\n-\tsubi 18,%r1,%r1\n-\tblr,n %r1,%r0\n-\tb,n L$0006\n-\tldws,ma 4(0,%r20),%r18\n-\tnop\n-\tldws,ma 4(0,%r20),%r17\n-\tnop\n-\tldws,ma 4(0,%r20),%r16\n-\tnop\n-\tldws,ma 4(0,%r20),%r15\n-\tnop\n-\tldws,ma 4(0,%r20),%r14\n-\tnop\n-\tldws,ma 4(0,%r20),%r13\n-\tnop\n-\tldws,ma 4(0,%r20),%r12\n-\tnop\n-\tldws,ma 4(0,%r20),%r11\n-\tnop\n-\tldws,ma 4(0,%r20),%r10\n-\tnop\n-\tldws,ma 4(0,%r20),%r9\n-\tnop\n-\tldws,ma 4(0,%r20),%r8\n-\tnop\n-\tldws,ma 4(0,%r20),%r7\n-\tnop\n-\tldws,ma 4(0,%r20),%r6\n-\tnop\n-\tldws,ma 4(0,%r20),%r5\n-\tnop\n-\tldws,ma 4(0,%r20),%r4\n-\tnop\n-\tldws,ma 4(0,%r20),%r3\n-\tnop\n-L$0006\n-\t; All gr restore are done.  Align the temporary frame pointer and\n-\t; do the fr restore.\n-\tldo 7(%r20),%r20\n-\tdepi 0,31,3,%r20\n-\n-\tcomb,= %r0,%r22,L$0007\n-\tsubi 21,%r22,%r22\n-\tblr,n %r22,%r0\n-\tb,n L$0007\n-\tfldws,ma 8(0,%r20),%fr21\n-\tnop\n-\tfldws,ma 8(0,%r20),%fr20\n-\tnop\n-\tfldws,ma 8(0,%r20),%fr19\n-\tnop\n-\tfldws,ma 8(0,%r20),%fr18\n-\tnop\n-\tfldws,ma 8(0,%r20),%fr17\n-\tnop\n-\tfldws,ma 8(0,%r20),%fr16\n-\tnop\n-\tfldws,ma 8(0,%r20),%fr15\n-\tnop\n-\tfldws,ma 8(0,%r20),%fr14\n-\tnop\n-\tfldws,ma 8(0,%r20),%fr13\n-\tnop\n-\tfldws,ma 8(0,%r20),%fr12\n-\tnop\n-L$0007\n-\t; Return and deallocate our frame.\n-\tbv 0(%r31)\n-\tcopy %r21,%r30\n-\t.EXIT\n-\t.PROCEND\n-\n-"}, {"sha": "a359918a1259790b9d9a01c46c3520c402b98ccb", "filename": "gcc/config/pa/t-pa", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddaf4c9114124df0305df1eeb8e1452b42c3c771/gcc%2Fconfig%2Fpa%2Ft-pa", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddaf4c9114124df0305df1eeb8e1452b42c3c771/gcc%2Fconfig%2Fpa%2Ft-pa", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ft-pa?ref=ddaf4c9114124df0305df1eeb8e1452b42c3c771", "patch": "@@ -1,10 +1,18 @@\n LIBGCC1=libgcc1.null\n CROSS_LIBGCC1=libgcc1.null\n ADA_CFLAGS=-mdisable-indexing\n-LIB2FUNCS_EXTRA=lib2funcs.asm\n+LIB2FUNCS_EXTRA=lib2funcs.asm ee.asm ee_fp.asm\n \n-lib2funcs.asm: $(srcdir)/config/pa/$(LIB2FUNCS_EXTRA)\n+lib2funcs.asm: $(srcdir)/config/pa/lib2funcs.asm\n \trm -f lib2funcs.asm\n-\tcp $(srcdir)/config/pa/$(LIB2FUNCS_EXTRA) .\n+\tcp $(srcdir)/config/pa/lib2funcs.asm .\n+\n+ee.asm: $(srcdir)/config/pa/ee.asm\n+\trm -f ee.asm\n+\tcp $(srcdir)/config/pa/ee.asm .\n+\n+ee_fp.asm: $(srcdir)/config/pa/ee_fp.asm\n+\trm -f ee_fp.asm\n+\tcp $(srcdir)/config/pa/ee_fp.asm .\n \n TARGET_LIBGCC2_CFLAGS = -fPIC"}, {"sha": "f40b2e4e4d773a38d470416e667664065c65d211", "filename": "gcc/config/pa/t-pro", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddaf4c9114124df0305df1eeb8e1452b42c3c771/gcc%2Fconfig%2Fpa%2Ft-pro", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddaf4c9114124df0305df1eeb8e1452b42c3c771/gcc%2Fconfig%2Fpa%2Ft-pro", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ft-pro?ref=ddaf4c9114124df0305df1eeb8e1452b42c3c771", "patch": "@@ -7,7 +7,7 @@ LIBGCC1_TEST =\n \n ADA_CFLAGS=-mdisable-indexing\n \n-LIB2FUNCS_EXTRA=fp-bit.c dp-bit.c lib2funcs.asm\n+LIB2FUNCS_EXTRA=fp-bit.c dp-bit.c lib2funcs.asm ee.asm ee_fp.asm\n \n dp-bit.c: $(srcdir)/config/fp-bit.c\n \tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n@@ -20,6 +20,14 @@ lib2funcs.asm: $(srcdir)/config/pa/lib2funcs.asm\n \trm -f lib2funcs.asm\n \tcp $(srcdir)/config/pa/lib2funcs.asm .\n \n+ee.asm: $(srcdir)/config/pa/ee.asm\n+\trm -f ee.asm\n+\tcp $(srcdir)/config/pa/ee.asm .\n+\n+ee_fp.asm: $(srcdir)/config/pa/ee_fp.asm\n+\trm -f ee_fp.asm\n+\tcp $(srcdir)/config/pa/ee_fp.asm .\n+\n # Build the libraries for both speed and space optimizations\n \n MULTILIB_OPTIONS=mspace"}]}