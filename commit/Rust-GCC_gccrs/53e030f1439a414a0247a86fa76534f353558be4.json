{"sha": "53e030f1439a414a0247a86fa76534f353558be4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNlMDMwZjE0MzlhNDE0YTAyNDdhODZmYTc2NTM0ZjM1MzU1OGJlNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-06-02T19:49:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-06-02T19:49:21Z"}, "message": "tree.h (struct tree_decl_map): New type.\n\n\t* tree.h (struct tree_decl_map): New type.\n\t(tree_decl_map_eq, tree_decl_map_marked_p): Define.\n\t(tree_decl_map_hash): New prototype.\n\t(debug_expr_for_decl, value_expr_for_decl): Change into\n\ttree_decl_map hashtab from tree_map.\n\t(init_ttree): Adjust initialization.\n\t(tree_decl_map_hash): New function.\n\t(decl_debug_expr_lookup, decl_debug_expr_insert,\n\tdecl_value_expr_lookup, decl_value_expr_insert): Adjust.\ncp/\n\t* cp-objcp-common.c (shadowed_var_for_decl): Change into\n\ttree_decl_map hashtab from tree_map.\n\t(decl_shadowed_for_var_lookup, decl_shadowed_for_var_insert): Adjust.\n\t(init_shadowed_var_for_decl): Adjust initialization.\n\nFrom-SVN: r160185", "tree": {"sha": "d84b06f0fdeaa66af08574dc1b752fda3c962abf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d84b06f0fdeaa66af08574dc1b752fda3c962abf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53e030f1439a414a0247a86fa76534f353558be4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53e030f1439a414a0247a86fa76534f353558be4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53e030f1439a414a0247a86fa76534f353558be4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53e030f1439a414a0247a86fa76534f353558be4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3333a2ddebbb512fa251932e3e3fd8c0bc583d2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3333a2ddebbb512fa251932e3e3fd8c0bc583d2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3333a2ddebbb512fa251932e3e3fd8c0bc583d2b"}], "stats": {"total": 110, "additions": 75, "deletions": 35}, "files": [{"sha": "fa3806c52091f84e0a0d498693f7bbbb6ef97fb4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53e030f1439a414a0247a86fa76534f353558be4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53e030f1439a414a0247a86fa76534f353558be4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53e030f1439a414a0247a86fa76534f353558be4", "patch": "@@ -1,3 +1,15 @@\n+2010-06-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree.h (struct tree_decl_map): New type.\n+\t(tree_decl_map_eq, tree_decl_map_marked_p): Define.\n+\t(tree_decl_map_hash): New prototype.\n+\t(debug_expr_for_decl, value_expr_for_decl): Change into\n+\ttree_decl_map hashtab from tree_map.\n+\t(init_ttree): Adjust initialization.\n+\t(tree_decl_map_hash): New function.\n+\t(decl_debug_expr_lookup, decl_debug_expr_insert,\n+\tdecl_value_expr_lookup, decl_value_expr_insert): Adjust.\n+\n 2010-06-02  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* configure.ac (gcc_cv_ld_sol2_emulation): Test for GNU ld *_sol2"}, {"sha": "1dabc4ca8c70f3b3e3a20099117ea62b18dd6441", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53e030f1439a414a0247a86fa76534f353558be4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53e030f1439a414a0247a86fa76534f353558be4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=53e030f1439a414a0247a86fa76534f353558be4", "patch": "@@ -1,3 +1,10 @@\n+2010-06-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* cp-objcp-common.c (shadowed_var_for_decl): Change into\n+\ttree_decl_map hashtab from tree_map.\n+\t(decl_shadowed_for_var_lookup, decl_shadowed_for_var_insert): Adjust.\n+\t(init_shadowed_var_for_decl): Adjust initialization.\n+\n 2010-06-02  Jason Merrill  <jason@redhat.com>\n \n \t* error.c (dump_type): Improve typedef handling."}, {"sha": "35654c5f07a0a74af5ddaa4993c5f038c8758aa7", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53e030f1439a414a0247a86fa76534f353558be4/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53e030f1439a414a0247a86fa76534f353558be4/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=53e030f1439a414a0247a86fa76534f353558be4", "patch": "@@ -1,5 +1,5 @@\n /* Some code common to C++ and ObjC++ front ends.\n-   Copyright (C) 2004, 2007, 2008, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Ziemowit Laski  <zlaski@apple.com>\n \n This file is part of GCC.\n@@ -177,19 +177,19 @@ has_c_linkage (const_tree decl)\n   return DECL_EXTERN_C_P (decl);\n }\n \n-static GTY ((if_marked (\"tree_map_marked_p\"), param_is (struct tree_map)))\n+static GTY ((if_marked (\"tree_decl_map_marked_p\"), param_is (struct tree_decl_map)))\n      htab_t shadowed_var_for_decl;\n \n /* Lookup a shadowed var for FROM, and return it if we find one.  */\n \n tree\n decl_shadowed_for_var_lookup (tree from)\n {\n-  struct tree_map *h, in;\n+  struct tree_decl_map *h, in;\n   in.base.from = from;\n \n-  h = (struct tree_map *) htab_find_with_hash (shadowed_var_for_decl, &in,\n-\t\t\t\t\t       htab_hash_pointer (from));\n+  h = (struct tree_decl_map *)\n+      htab_find_with_hash (shadowed_var_for_decl, &in, DECL_UID (from));\n   if (h)\n     return h->to;\n   return NULL_TREE;\n@@ -200,22 +200,22 @@ decl_shadowed_for_var_lookup (tree from)\n void\n decl_shadowed_for_var_insert (tree from, tree to)\n {\n-  struct tree_map *h;\n+  struct tree_decl_map *h;\n   void **loc;\n \n-  h = GGC_NEW (struct tree_map);\n-  h->hash = htab_hash_pointer (from);\n+  h = GGC_NEW (struct tree_decl_map);\n   h->base.from = from;\n   h->to = to;\n-  loc = htab_find_slot_with_hash (shadowed_var_for_decl, h, h->hash, INSERT);\n-  *(struct tree_map **) loc = h;\n+  loc = htab_find_slot_with_hash (shadowed_var_for_decl, h, DECL_UID (from),\n+\t\t\t\t  INSERT);\n+  *(struct tree_decl_map **) loc = h;\n }\n \n void\n init_shadowed_var_for_decl (void)\n {\n-  shadowed_var_for_decl = htab_create_ggc (512, tree_map_hash,\n-\t\t\t\t\t   tree_map_eq, 0);\n+  shadowed_var_for_decl = htab_create_ggc (512, tree_decl_map_hash,\n+\t\t\t\t\t   tree_decl_map_eq, 0);\n }\n \n "}, {"sha": "67e2f417cb9cfd8447a7f34889c72f4cede7e8dd", "filename": "gcc/tree.c", "status": "modified", "additions": 33, "deletions": 23, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53e030f1439a414a0247a86fa76534f353558be4/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53e030f1439a414a0247a86fa76534f353558be4/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=53e030f1439a414a0247a86fa76534f353558be4", "patch": "@@ -196,10 +196,10 @@ static GTY ((if_marked (\"ggc_marked_p\"), param_is (union tree_node)))\n /* General tree->tree mapping  structure for use in hash tables.  */\n \n \n-static GTY ((if_marked (\"tree_map_marked_p\"), param_is (struct tree_map)))\n+static GTY ((if_marked (\"tree_decl_map_marked_p\"), param_is (struct tree_decl_map)))\n      htab_t debug_expr_for_decl;\n \n-static GTY ((if_marked (\"tree_map_marked_p\"), param_is (struct tree_map)))\n+static GTY ((if_marked (\"tree_decl_map_marked_p\"), param_is (struct tree_decl_map)))\n      htab_t value_expr_for_decl;\n \n static GTY ((if_marked (\"tree_priority_map_marked_p\"),\n@@ -533,11 +533,11 @@ init_ttree (void)\n   type_hash_table = htab_create_ggc (TYPE_HASH_INITIAL_SIZE, type_hash_hash,\n \t\t\t\t     type_hash_eq, 0);\n \n-  debug_expr_for_decl = htab_create_ggc (512, tree_map_hash,\n-\t\t\t\t\t tree_map_eq, 0);\n+  debug_expr_for_decl = htab_create_ggc (512, tree_decl_map_hash,\n+\t\t\t\t\t tree_decl_map_eq, 0);\n \n-  value_expr_for_decl = htab_create_ggc (512, tree_map_hash,\n-\t\t\t\t\t tree_map_eq, 0);\n+  value_expr_for_decl = htab_create_ggc (512, tree_decl_map_hash,\n+\t\t\t\t\t tree_decl_map_eq, 0);\n   init_priority_for_decl = htab_create_ggc (512, tree_priority_map_hash,\n \t\t\t\t\t    tree_priority_map_eq, 0);\n \n@@ -5560,7 +5560,7 @@ tree_map_base_eq (const void *va, const void *vb)\n   return (a->from == b->from);\n }\n \n-/* Hash a from tree in a tree_map.  */\n+/* Hash a from tree in a tree_base_map.  */\n \n unsigned int\n tree_map_base_hash (const void *item)\n@@ -5578,12 +5578,22 @@ tree_map_base_marked_p (const void *p)\n   return ggc_marked_p (((const struct tree_map_base *) p)->from);\n }\n \n+/* Hash a from tree in a tree_map.  */\n+\n unsigned int\n tree_map_hash (const void *item)\n {\n   return (((const struct tree_map *) item)->hash);\n }\n \n+/* Hash a from tree in a tree_decl_map.  */\n+\n+unsigned int\n+tree_decl_map_hash (const void *item)\n+{\n+  return DECL_UID (((const struct tree_decl_map *) item)->base.from);\n+}\n+\n /* Return the initialization priority for DECL.  */\n \n priority_type\n@@ -5689,11 +5699,11 @@ print_value_expr_statistics (void)\n tree\n decl_debug_expr_lookup (tree from)\n {\n-  struct tree_map *h, in;\n+  struct tree_decl_map *h, in;\n   in.base.from = from;\n \n-  h = (struct tree_map *) htab_find_with_hash (debug_expr_for_decl, &in,\n-\t\t\t\t\t       htab_hash_pointer (from));\n+  h = (struct tree_decl_map *)\n+      htab_find_with_hash (debug_expr_for_decl, &in, DECL_UID (from));\n   if (h)\n     return h->to;\n   return NULL_TREE;\n@@ -5704,27 +5714,27 @@ decl_debug_expr_lookup (tree from)\n void\n decl_debug_expr_insert (tree from, tree to)\n {\n-  struct tree_map *h;\n+  struct tree_decl_map *h;\n   void **loc;\n \n-  h = GGC_NEW (struct tree_map);\n-  h->hash = htab_hash_pointer (from);\n+  h = GGC_NEW (struct tree_decl_map);\n   h->base.from = from;\n   h->to = to;\n-  loc = htab_find_slot_with_hash (debug_expr_for_decl, h, h->hash, INSERT);\n-  *(struct tree_map **) loc = h;\n+  loc = htab_find_slot_with_hash (debug_expr_for_decl, h, DECL_UID (from),\n+\t\t\t\t  INSERT);\n+  *(struct tree_decl_map **) loc = h;\n }\n \n /* Lookup a value expression for FROM, and return it if we find one.  */\n \n tree\n decl_value_expr_lookup (tree from)\n {\n-  struct tree_map *h, in;\n+  struct tree_decl_map *h, in;\n   in.base.from = from;\n \n-  h = (struct tree_map *) htab_find_with_hash (value_expr_for_decl, &in,\n-\t\t\t\t\t       htab_hash_pointer (from));\n+  h = (struct tree_decl_map *)\n+      htab_find_with_hash (value_expr_for_decl, &in, DECL_UID (from));\n   if (h)\n     return h->to;\n   return NULL_TREE;\n@@ -5735,15 +5745,15 @@ decl_value_expr_lookup (tree from)\n void\n decl_value_expr_insert (tree from, tree to)\n {\n-  struct tree_map *h;\n+  struct tree_decl_map *h;\n   void **loc;\n \n-  h = GGC_NEW (struct tree_map);\n-  h->hash = htab_hash_pointer (from);\n+  h = GGC_NEW (struct tree_decl_map);\n   h->base.from = from;\n   h->to = to;\n-  loc = htab_find_slot_with_hash (value_expr_for_decl, h, h->hash, INSERT);\n-  *(struct tree_map **) loc = h;\n+  loc = htab_find_slot_with_hash (value_expr_for_decl, h, DECL_UID (from),\n+\t\t\t\t  INSERT);\n+  *(struct tree_decl_map **) loc = h;\n }\n \n /* Hashing of types so that we don't make duplicates."}, {"sha": "13c684af37abe1c99fcf055e1bfa6c56448d4ab9", "filename": "gcc/tree.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53e030f1439a414a0247a86fa76534f353558be4/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53e030f1439a414a0247a86fa76534f353558be4/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=53e030f1439a414a0247a86fa76534f353558be4", "patch": "@@ -5381,6 +5381,17 @@ struct GTY(()) tree_map {\n extern unsigned int tree_map_hash (const void *);\n #define tree_map_marked_p tree_map_base_marked_p\n \n+/* Map from a decl tree to another tree.  */\n+\n+struct GTY(()) tree_decl_map {\n+  struct tree_map_base base;\n+  tree to;\n+};\n+\n+#define tree_decl_map_eq tree_map_base_eq\n+extern unsigned int tree_decl_map_hash (const void *);\n+#define tree_decl_map_marked_p tree_map_base_marked_p\n+\n /* Map from a tree to an int.  */\n \n struct GTY(()) tree_int_map {"}]}