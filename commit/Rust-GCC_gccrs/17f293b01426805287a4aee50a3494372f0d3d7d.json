{"sha": "17f293b01426805287a4aee50a3494372f0d3d7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdmMjkzYjAxNDI2ODA1Mjg3YTRhZWU1MGEzNDk0MzcyZjBkM2Q3ZA==", "commit": {"author": {"name": "Mark Kettenis", "email": "kettenis@openbsd.org", "date": "2012-09-20T01:20:34Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2012-09-20T01:20:34Z"}, "message": "config.host (hppa-*-openbsd*): New target.\n\nlibgcc/:\n\n        * config.host (hppa-*-openbsd*): New target.\n        * config/pa/t-openbsd: New file.\n\ngcc:/\n\n        * config.gcc (hppa*-*-openbsd*): New target.\n        * config/pa/pa-openbsd.h: New file.\n        * config/pa/pa32-openbsd.h: New file.\n        * config/host-openbsd.c: Update copyright year.\n        (TRY_EXCEPT_VM_SPACE): Define for OpenBSD/hppa.\n\nFrom-SVN: r191508", "tree": {"sha": "5934c9676457a57d510172c9e44a0545dba622bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5934c9676457a57d510172c9e44a0545dba622bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17f293b01426805287a4aee50a3494372f0d3d7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17f293b01426805287a4aee50a3494372f0d3d7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17f293b01426805287a4aee50a3494372f0d3d7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17f293b01426805287a4aee50a3494372f0d3d7d/comments", "author": {"login": "kettenis", "id": 19817229, "node_id": "MDQ6VXNlcjE5ODE3MjI5", "avatar_url": "https://avatars.githubusercontent.com/u/19817229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kettenis", "html_url": "https://github.com/kettenis", "followers_url": "https://api.github.com/users/kettenis/followers", "following_url": "https://api.github.com/users/kettenis/following{/other_user}", "gists_url": "https://api.github.com/users/kettenis/gists{/gist_id}", "starred_url": "https://api.github.com/users/kettenis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kettenis/subscriptions", "organizations_url": "https://api.github.com/users/kettenis/orgs", "repos_url": "https://api.github.com/users/kettenis/repos", "events_url": "https://api.github.com/users/kettenis/events{/privacy}", "received_events_url": "https://api.github.com/users/kettenis/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e29941cef2ac3ed3af5e0e6f9b443ada129fa4ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e29941cef2ac3ed3af5e0e6f9b443ada129fa4ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e29941cef2ac3ed3af5e0e6f9b443ada129fa4ec"}], "stats": {"total": 228, "additions": 223, "deletions": 5}, "files": [{"sha": "b68936b2126f77e621412d489d7975e08a2b1cf8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f293b01426805287a4aee50a3494372f0d3d7d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f293b01426805287a4aee50a3494372f0d3d7d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17f293b01426805287a4aee50a3494372f0d3d7d", "patch": "@@ -1,3 +1,11 @@\n+2012-09-19  Mark Kettenis  <kettenis@openbsd.org>\n+\n+        * config.gcc (hppa*-*-openbsd*): New target.\n+        * config/pa/pa-openbsd.h: New file.\n+        * config/pa/pa32-openbsd.h: New file.\n+        * config/host-openbsd.c: Update copyright year.\n+        (TRY_EXCEPT_VM_SPACE): Define for OpenBSD/hppa.\n+\n 2012-09-19  Martin Jambor  <mjambor@suse.cz>\n \n \t* ipa-prop.c (prune_expression_for_jf): New function."}, {"sha": "d6c81534c59fdf8d70bf760d5be758a8bed1c950", "filename": "gcc/config.gcc", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f293b01426805287a4aee50a3494372f0d3d7d/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f293b01426805287a4aee50a3494372f0d3d7d/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=17f293b01426805287a4aee50a3494372f0d3d7d", "patch": "@@ -1017,10 +1017,15 @@ hppa*-*-linux*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h gnu-user.h linux.h glibc-stdint.h pa/pa-linux.h \\\n \t\t pa/pa32-regs.h pa/pa32-linux.h\"\n \t;;\n-# port not yet contributed.\n-#hppa*-*-openbsd*)\n-#\ttarget_cpu_default=\"MASK_PA_11\"\n-#\t;;\n+hppa*-*-openbsd*)\n+\ttarget_cpu_default=\"MASK_PA_11\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h openbsd.h openbsd-stdint.h openbsd-libpthread.h \\\n+\t\t pa/pa-openbsd.h pa/pa32-regs.h pa/pa32-openbsd.h\"\n+\ttmake_file=\"${tmake_file} pa/t-openbsd\"\n+\textra_options=\"${extra_options} openbsd.opt\"\n+\tgas=yes\n+\tgnu_ld=yes\n+\t;;\n hppa[12]*-*-hpux10*)\n \tcase ${target} in\n \thppa1.1-*-* | hppa2*-*-*)"}, {"sha": "16c140e5006af563ae2fcf63a319d9733839dd43", "filename": "gcc/config/host-openbsd.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f293b01426805287a4aee50a3494372f0d3d7d/gcc%2Fconfig%2Fhost-openbsd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f293b01426805287a4aee50a3494372f0d3d7d/gcc%2Fconfig%2Fhost-openbsd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fhost-openbsd.c?ref=17f293b01426805287a4aee50a3494372f0d3d7d", "patch": "@@ -1,5 +1,6 @@\n /* OpenBSD host-specific hook definitions.\n-   Copyright (C) 2004, 2007, 2008, 2010, 2011 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2007, 2008, 2010, 2011, 2012\n+   Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -33,6 +34,8 @@\n    that's probably free.  */\n #if defined(__amd64__)\n # define TRY_EMPTY_VM_SPACE\t0x400000000000\n+#elif defined(__hppa__)\n+# define TRY_EMPTY_VM_SPACE\t0xb0000000\n #elif defined(__i386__)\n # define TRY_EMPTY_VM_SPACE\t0xb0000000\n #else"}, {"sha": "785409cf780a52e38b95e92f6dbce70159942084", "filename": "gcc/config/pa/pa-openbsd.h", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f293b01426805287a4aee50a3494372f0d3d7d/gcc%2Fconfig%2Fpa%2Fpa-openbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f293b01426805287a4aee50a3494372f0d3d7d/gcc%2Fconfig%2Fpa%2Fpa-openbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-openbsd.h?ref=17f293b01426805287a4aee50a3494372f0d3d7d", "patch": "@@ -0,0 +1,162 @@\n+/* Definitions for PA_RISC with ELF format\n+   Copyright 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010,\n+   2011, 2012\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+\n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+\tOPENBSD_OS_CPP_BUILTINS();\t\t\\\n+\tbuiltin_assert (\"machine=bigendian\");\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* Our profiling scheme doesn't LP labels and counter words.  */\n+#define NO_DEFERRED_PROFILE_COUNTERS 1\n+\n+#undef STRING_ASM_OP\n+#define STRING_ASM_OP   \"\\t.stringz\\t\"\n+\n+#define TEXT_SECTION_ASM_OP \"\\t.text\"\n+#define DATA_SECTION_ASM_OP \"\\t.data\"\n+#define BSS_SECTION_ASM_OP \"\\t.section\\t.bss\"\n+\n+/* We want local labels to start with period if made with asm_fprintf.  */\n+#undef LOCAL_LABEL_PREFIX\n+#define LOCAL_LABEL_PREFIX \".\"\n+\n+/* Define these to generate the Linux/ELF/SysV style of internal\n+   labels all the time - i.e. to be compatible with\n+   ASM_GENERATE_INTERNAL_LABEL in <elfos.h>.  Compare these with the\n+   ones in pa.h and note the lack of dollar signs in these.  FIXME:\n+   shouldn't we fix pa.h to use ASM_GENERATE_INTERNAL_LABEL instead? */\n+\n+#undef ASM_OUTPUT_ADDR_VEC_ELT\n+#define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE) \\\n+  if (TARGET_BIG_SWITCH)\t\t\t\t\t\\\n+    fprintf (FILE, \"\\t.word .L%d\\n\", VALUE);\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\tb .L%d\\n\\tnop\\n\", VALUE)\n+\n+#undef ASM_OUTPUT_ADDR_DIFF_ELT\n+#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n+  if (TARGET_BIG_SWITCH)\t\t\t\t\t\\\n+    fprintf (FILE, \"\\t.word .L%d-.L%d\\n\", VALUE, REL);\t\t\\\n+  else\t\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\tb .L%d\\n\\tnop\\n\", VALUE)\n+\n+/* Use the default.  */\n+#undef ASM_OUTPUT_LABEL\n+\n+/* NOTE: (*targetm.asm_out.internal_label)() is defined for us by elfos.h, and\n+   does what we want (i.e. uses colons).  It must be compatible with\n+   ASM_GENERATE_INTERNAL_LABEL(), so do not define it here.  */\n+\n+/* Use the default.  */\n+#undef ASM_OUTPUT_INTERNAL_LABEL\n+\n+/* Use the default.  */\n+#undef TARGET_ASM_GLOBALIZE_LABEL\n+\n+/* FIXME: Hacked from the <elfos.h> one so that we avoid multiple\n+   labels in a function declaration (since pa.c seems determined to do\n+   it differently)  */\n+\n+#undef ASM_DECLARE_FUNCTION_NAME\n+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"function\");\t\\\n+      ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* As well as globalizing the label, we need to encode the label\n+   to ensure a plabel is generated in an indirect call.  */\n+\n+#undef ASM_OUTPUT_EXTERNAL_LIBCALL\n+#define ASM_OUTPUT_EXTERNAL_LIBCALL(FILE, FUN)  \t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if (!FUNCTION_NAME_P (XSTR (FUN, 0)))\t\t\t\\\n+\tpa_encode_label (FUN);\t\t\t\t\\\n+      (*targetm.asm_out.globalize_label) (FILE, XSTR (FUN, 0));\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* This says how to output an assembler line to define a global common symbol\n+   with size SIZE (in bytes) and alignment ALIGN (in bits).  */\n+\n+#undef ASM_OUTPUT_ALIGNED_COMMON\n+#define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)  \t\t\\\n+  pa_asm_output_aligned_common (FILE, NAME, SIZE, ALIGN)\n+\n+/* This says how to output an assembler line to define a local common symbol\n+   with size SIZE (in bytes) and alignment ALIGN (in bits).  This macro\n+   controls how the assembler definitions of uninitialized static variables\n+   are output.  */\n+\n+#undef ASM_OUTPUT_ALIGNED_LOCAL\n+#define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGN)\t\t\\\n+  pa_asm_output_aligned_local (FILE, NAME, SIZE, ALIGN)\n+\n+/* OpenBSD always uses gas.  */\n+#undef TARGET_GAS\n+#define TARGET_GAS 1\n+\n+/* Layout of source language data types. */\n+\n+/* This must agree with <machine/_types.h> */\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"long unsigned int\"\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"long int\"\n+\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"int\"\n+\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE 32\n+\n+#undef WINT_TYPE\n+#define WINT_TYPE \"int\"\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \\\n+  \"%{!shared:%{!nostdlib:%{!r:%{!e*:-e __start}}}} \\\n+   %{shared:-shared} %{R*} \\\n+   %{static:-Bstatic} \\\n+   %{!static:-Bdynamic} \\\n+   %{assert*} \\\n+   -dynamic-linker /usr/libexec/ld.so\"\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \"\\\n+\t%{!shared: %{pg:gcrt0%O%s} %{!pg:%{p:gcrt0%O%s} %{!p:crt0%O%s}} \\\n+\tcrtbegin%O%s} %{shared:crtbeginS%O%s}\"\n+\n+#undef ENDFILE_SPEC\n+#define ENDFILE_SPEC \"%{!shared:crtend%O%s} %{shared:crtendS%O%s}\"\n+\n+#define OBSD_HAS_CORRECT_SPECS\n+\n+#define HAVE_ENABLE_EXECUTE_STACK"}, {"sha": "af8db1cc9cb274cb9d550f3998a27147f31028ba", "filename": "gcc/config/pa/pa32-openbsd.h", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f293b01426805287a4aee50a3494372f0d3d7d/gcc%2Fconfig%2Fpa%2Fpa32-openbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f293b01426805287a4aee50a3494372f0d3d7d/gcc%2Fconfig%2Fpa%2Fpa32-openbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa32-openbsd.h?ref=17f293b01426805287a4aee50a3494372f0d3d7d", "patch": "@@ -0,0 +1,23 @@\n+/* Definitions for PA_RISC with ELF-32 format\n+   Copyright (C) 2000, 2002, 2004, 2006, 2007, 2010, 2011, 2012\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Turn off various SOM crap we don't want.  */\n+#undef TARGET_ELF32\n+#define TARGET_ELF32 1"}, {"sha": "42308dba755603e092f75f4e38aee85cef8ac182", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f293b01426805287a4aee50a3494372f0d3d7d/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f293b01426805287a4aee50a3494372f0d3d7d/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=17f293b01426805287a4aee50a3494372f0d3d7d", "patch": "@@ -1,3 +1,8 @@\n+2012-09-19  Mark Kettenis  <kettenis@openbsd.org>\n+\n+        * config.host (hppa-*-openbsd*): New target.\n+        * config/pa/t-openbsd: New file.\n+\n 2012-09-15  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/54222"}, {"sha": "368902467fb69f2089a0ecfb7079d728ecc72564", "filename": "libgcc/config.host", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f293b01426805287a4aee50a3494372f0d3d7d/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f293b01426805287a4aee50a3494372f0d3d7d/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=17f293b01426805287a4aee50a3494372f0d3d7d", "patch": "@@ -499,6 +499,9 @@ hppa[12]*-*-hpux11*)\n \textra_parts=\"libgcc_stub.a\"\n \tmd_unwind_header=pa/hpux-unwind.h\n \t;;\n+hppa*-*-openbsd*)\n+\ttmake_file=\"$tmake_file pa/t-openbsd\"\n+\t;;\n i[34567]86-*-darwin*)\n \ttmake_file=\"$tmake_file i386/t-crtpc i386/t-crtfm\"\n \ttm_file=\"$tm_file i386/darwin-lib.h\""}, {"sha": "8b99068ce429c7979c0e41f76e18ee29fc4daec0", "filename": "libgcc/config/pa/t-openbsd", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f293b01426805287a4aee50a3494372f0d3d7d/libgcc%2Fconfig%2Fpa%2Ft-openbsd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f293b01426805287a4aee50a3494372f0d3d7d/libgcc%2Fconfig%2Fpa%2Ft-openbsd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fpa%2Ft-openbsd?ref=17f293b01426805287a4aee50a3494372f0d3d7d", "patch": "@@ -0,0 +1,9 @@\n+#Plug millicode routines into libgcc.a  We want these on both native and\n+#cross compiles.  We use the \"64-bit\" routines because the \"32-bit\" code\n+#is broken for certain corner cases.\n+LIB1ASMSRC = pa/milli64.S\n+LIB1ASMFUNCS = _divI _divU _remI _remU _div_const _mulI _dyncall\n+\n+HOST_LIBGCC2_CFLAGS += -DELF=1 -DLINUX=1\n+\n+LIB2ADD = $(srcdir)/config/pa/fptr.c"}]}