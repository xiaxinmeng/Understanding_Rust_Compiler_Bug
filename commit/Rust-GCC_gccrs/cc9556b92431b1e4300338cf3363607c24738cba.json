{"sha": "cc9556b92431b1e4300338cf3363607c24738cba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M5NTU2YjkyNDMxYjFlNDMwMDMzOGNmMzM2MzYwN2MyNDczOGNiYQ==", "commit": {"author": {"name": "Guilhem Lavaux", "email": "guilhem@kaffe.org", "date": "2003-09-25T17:25:15Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-09-25T17:25:15Z"}, "message": "SimpleDateFormat.java (parse): Don't use class calendar field.\n\n2003-09-25  Guilhem Lavaux  <guilhem@kaffe.org>\n\n\t* java/text/SimpleDateFormat.java (parse): Don't use class calendar\n\tfield.\n\nFrom-SVN: r71782", "tree": {"sha": "84d608672f762e957ce44f556ecca897570a2a18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84d608672f762e957ce44f556ecca897570a2a18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc9556b92431b1e4300338cf3363607c24738cba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc9556b92431b1e4300338cf3363607c24738cba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc9556b92431b1e4300338cf3363607c24738cba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc9556b92431b1e4300338cf3363607c24738cba/comments", "author": null, "committer": null, "parents": [{"sha": "c5fd8041edf6b962e51e223ceac5a70fdf68150a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5fd8041edf6b962e51e223ceac5a70fdf68150a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5fd8041edf6b962e51e223ceac5a70fdf68150a"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "873661ac51beee81eb52794bc597a3997fd3b051", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9556b92431b1e4300338cf3363607c24738cba/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9556b92431b1e4300338cf3363607c24738cba/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=cc9556b92431b1e4300338cf3363607c24738cba", "patch": "@@ -1,3 +1,8 @@\n+2003-09-25  Guilhem Lavaux  <guilhem@kaffe.org>\n+\n+\t* java/text/SimpleDateFormat.java (parse): Don't use class calendar\n+\tfield.\n+\n 2003-09-25  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/nio/SelectorImpl.java"}, {"sha": "f41a27bbc4d0bb3af56516831431725bfbd25e93", "filename": "libjava/java/text/SimpleDateFormat.java", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc9556b92431b1e4300338cf3363607c24738cba/libjava%2Fjava%2Ftext%2FSimpleDateFormat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc9556b92431b1e4300338cf3363607c24738cba/libjava%2Fjava%2Ftext%2FSimpleDateFormat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FSimpleDateFormat.java?ref=cc9556b92431b1e4300338cf3363607c24738cba", "patch": "@@ -547,8 +547,9 @@ public Date parse (String dateStr, ParsePosition pos)\n   {\n     int fmt_index = 0;\n     int fmt_max = pattern.length();\n+    Calendar loc_calendar = (Calendar)calendar.clone();\n \n-    calendar.clear();\n+    loc_calendar.clear();\n     boolean saw_timezone = false;\n     int quote_start = -1;\n     boolean is2DigitYear = false;\n@@ -696,8 +697,8 @@ public Date parse (String dateStr, ParsePosition pos)\n \t\t    found_zone = true;\n \t\t    saw_timezone = true;\n \t\t    TimeZone tz = TimeZone.getTimeZone (strings[0]);\n-\t\t    calendar.setTimeZone (tz);\n-\t\t    calendar.set (Calendar.ZONE_OFFSET, tz.getRawOffset ());\n+\t\t    loc_calendar.setTimeZone (tz);\n+\t\t    loc_calendar.set (Calendar.ZONE_OFFSET, tz.getRawOffset ());\n \t\t    offset = 0;\n \t\t    if (k > 2 && tz instanceof SimpleTimeZone)\n \t\t      {\n@@ -764,17 +765,17 @@ else if (match != null)\n \t  }\n \n \t// Assign the value and move on.\n-\tcalendar.set(calendar_field, value);\n+\tloc_calendar.set(calendar_field, value);\n       }\n     \n     if (is2DigitYear)\n       {\n \t// Apply the 80-20 heuristic to dermine the full year based on \n \t// defaultCenturyStart. \n-\tint year = defaultCentury + calendar.get(Calendar.YEAR);\n-\tcalendar.set(Calendar.YEAR, year);\n-\tif (calendar.getTime().compareTo(defaultCenturyStart) < 0)\n-\t  calendar.set(Calendar.YEAR, year + 100);      \n+\tint year = defaultCentury + loc_calendar.get(Calendar.YEAR);\n+\tloc_calendar.set(Calendar.YEAR, year);\n+\tif (loc_calendar.getTime().compareTo(defaultCenturyStart) < 0)\n+\t  loc_calendar.set(Calendar.YEAR, year + 100);      \n       }\n \n     try\n@@ -783,10 +784,10 @@ else if (match != null)\n \t  {\n \t    // Use the real rules to determine whether or not this\n \t    // particular time is in daylight savings.\n-\t    calendar.clear (Calendar.DST_OFFSET);\n-\t    calendar.clear (Calendar.ZONE_OFFSET);\n+\t    loc_calendar.clear (Calendar.DST_OFFSET);\n+\t    loc_calendar.clear (Calendar.ZONE_OFFSET);\n \t  }\n-        return calendar.getTime();\n+        return loc_calendar.getTime();\n       }\n     catch (IllegalArgumentException x)\n       {"}]}