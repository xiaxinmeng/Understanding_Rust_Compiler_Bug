{"sha": "8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFiNDhhN2JmYWZmOGFjMjUwNmFlOTJkYjU2ZDliOGYzZDdlNGE5Yg==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-08-23T08:11:56Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-08-23T08:11:56Z"}, "message": "convert.c: Split into manageable parts:\n\n\t* gcc.dg/fixed-point/convert.c: Split into manageable parts:\n\t* gcc.dg/fixed-point/convert-1.c: New.\n\t* gcc.dg/fixed-point/convert-2.c: New.\n\t* gcc.dg/fixed-point/convert-3.c: New.\n\t* gcc.dg/fixed-point/convert-4.c: New.\n\t* gcc.dg/fixed-point/convert-float-1.c: New.\n\t* gcc.dg/fixed-point/convert-float-2.c: New.\n\t* gcc.dg/fixed-point/convert-float-3.c: New.\n\t* gcc.dg/fixed-point/convert-float-4.c: New.\n\t* gcc.dg/fixed-point/convert-accum-neg.c: New.\n\t* gcc.dg/fixed-point/convert-sat.c: New.\n\t* gcc.dg/fixed-point/convert.h: New.\n\nFrom-SVN: r190615", "tree": {"sha": "e0baf61e880ea7920f6f276b32ddead939a3c7e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0baf61e880ea7920f6f276b32ddead939a3c7e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ceb16be3e831fa0cae660b70ffbae29e17c9f216", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceb16be3e831fa0cae660b70ffbae29e17c9f216", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceb16be3e831fa0cae660b70ffbae29e17c9f216"}], "stats": {"total": 344, "additions": 262, "deletions": 82}, "files": [{"sha": "6f8cae84bd11475d58f879fcf7b9b22a85e6d530", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b", "patch": "@@ -1,3 +1,18 @@\n+2012-08-23  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* gcc.dg/fixed-point/convert.c: Split into manageable parts:\n+\t* gcc.dg/fixed-point/convert-1.c: New.\n+\t* gcc.dg/fixed-point/convert-2.c: New.\n+\t* gcc.dg/fixed-point/convert-3.c: New.\n+\t* gcc.dg/fixed-point/convert-4.c: New.\n+\t* gcc.dg/fixed-point/convert-float-1.c: New.\n+\t* gcc.dg/fixed-point/convert-float-2.c: New.\n+\t* gcc.dg/fixed-point/convert-float-3.c: New.\n+\t* gcc.dg/fixed-point/convert-float-4.c: New.\n+\t* gcc.dg/fixed-point/convert-accum-neg.c: New.\n+\t* gcc.dg/fixed-point/convert-sat.c: New.\n+\t* gcc.dg/fixed-point/convert.h: New.\n+\n 2012-08-22  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/54089"}, {"sha": "04adea88bfa2c4c0680fbf4a029b536240707b8b", "filename": "gcc/testsuite/gcc.dg/fixed-point/convert-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-1.c?ref=8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* C99 6.3 Conversions.\n+\n+   Check conversions involving fixed-point.  */\n+\n+extern void abort (void);\n+\n+#include \"convert.h\"\n+\n+int main ()\n+{\n+  ALL_CONV (short _Fract, hr);\n+  ALL_CONV (_Fract, r);\n+  ALL_CONV (long _Fract, lr);\n+  ALL_CONV (long long _Fract, llr);\n+\n+  return 0;\n+}"}, {"sha": "fc5bc1fcbbf546c60671999634abbd107f610786", "filename": "gcc/testsuite/gcc.dg/fixed-point/convert-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-2.c?ref=8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* C99 6.3 Conversions.\n+\n+   Check conversions involving fixed-point.  */\n+\n+extern void abort (void);\n+\n+#include \"convert.h\"\n+\n+int main ()\n+{\n+  ALL_CONV (unsigned short _Fract, uhr);\n+  ALL_CONV (unsigned _Fract, ur);\n+  ALL_CONV (unsigned long _Fract, ulr);\n+  ALL_CONV (unsigned long long _Fract, ullr);\n+\n+  return 0;\n+}"}, {"sha": "753c472a844199592a0b7c39c4f97e271e22e608", "filename": "gcc/testsuite/gcc.dg/fixed-point/convert-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-3.c?ref=8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* C99 6.3 Conversions.\n+\n+   Check conversions involving fixed-point.  */\n+\n+extern void abort (void);\n+\n+#include \"convert.h\"\n+\n+int main ()\n+{\n+  ALL_CONV (short _Accum, hk);\n+  ALL_CONV (_Accum, k);\n+  ALL_CONV (long _Accum, lk);\n+  ALL_CONV (long long _Accum, llk);\n+\n+  return 0;\n+}"}, {"sha": "17c4e66ebb7f2b69e5151acbff90422e7a28d61a", "filename": "gcc/testsuite/gcc.dg/fixed-point/convert-4.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-4.c?ref=8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* C99 6.3 Conversions.\n+\n+   Check conversions involving fixed-point.  */\n+\n+extern void abort (void);\n+\n+#include \"convert.h\"\n+\n+int main ()\n+{\n+  ALL_CONV (unsigned short _Accum, uhk);\n+  ALL_CONV (unsigned _Accum, uk);\n+  ALL_CONV (unsigned long _Accum, ulk);\n+  ALL_CONV (unsigned long long _Accum, ullk);\n+\n+  return 0;\n+}"}, {"sha": "af95610429059fd03407ff9f152ad676d3950c93", "filename": "gcc/testsuite/gcc.dg/fixed-point/convert-accum-neg.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-accum-neg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-accum-neg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-accum-neg.c?ref=8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* C99 6.3 Conversions.\n+\n+   Check conversions involving fixed-point.  */\n+\n+extern void abort (void);\n+\n+#include \"convert.h\"\n+\n+int main ()\n+{\n+  ALL_ACCUM_CONV (short _Accum, hk);\n+  ALL_ACCUM_CONV (_Accum, k);\n+  ALL_ACCUM_CONV (long _Accum, lk);\n+  ALL_ACCUM_CONV (long long _Accum, llk);\n+  ALL_ACCUM_CONV (unsigned short _Accum, uhk);\n+  ALL_ACCUM_CONV (unsigned _Accum, uk);\n+  ALL_ACCUM_CONV (unsigned long _Accum, ulk);\n+  ALL_ACCUM_CONV (unsigned long long _Accum, ullk);\n+\n+  NEG_CONV (short _Fract, hr);\n+  NEG_CONV (_Fract, r);\n+  NEG_CONV (long _Fract, lr);\n+  NEG_CONV (long long _Fract, llr);\n+  NEG_CONV (short _Accum, hk);\n+  NEG_CONV (_Accum, k);\n+  NEG_CONV (long _Accum, lk);\n+  NEG_CONV (long long _Accum, llk);\n+\n+  return 0;\n+}"}, {"sha": "b36adab570ac563f2a1db2df3c009ea73269074d", "filename": "gcc/testsuite/gcc.dg/fixed-point/convert-float-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-float-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-float-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-float-1.c?ref=8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* C99 6.3 Conversions.\n+\n+   Check conversions involving fixed-point.  */\n+\n+extern void abort (void);\n+\n+#include \"convert.h\"\n+\n+int main ()\n+{\n+  ALL_CONV_FLOAT (short _Fract, hr);\n+  ALL_CONV_FLOAT (_Fract, r);\n+  ALL_CONV_FLOAT (long _Fract, lr);\n+  ALL_CONV_FLOAT (long long _Fract, llr);\n+\n+  return 0;\n+}"}, {"sha": "2a3f3e95a1b9ea40fd8e0a820f6397d75e2dc872", "filename": "gcc/testsuite/gcc.dg/fixed-point/convert-float-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-float-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-float-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-float-2.c?ref=8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* C99 6.3 Conversions.\n+\n+  Check conversions involving fixed-point.  */\n+\n+extern void abort (void);\n+\n+#include \"convert.h\"\n+\n+int main ()\n+{\n+  ALL_CONV_FLOAT (unsigned short _Fract, uhr);\n+  ALL_CONV_FLOAT (unsigned _Fract, ur);\n+  ALL_CONV_FLOAT (unsigned long _Fract, ulr);\n+  ALL_CONV_FLOAT (unsigned long long _Fract, ullr);\n+\n+  return 0;\n+}"}, {"sha": "9cad010912fe8b7f7ff5a2605a153ca8a1d47c3d", "filename": "gcc/testsuite/gcc.dg/fixed-point/convert-float-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-float-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-float-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-float-3.c?ref=8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* C99 6.3 Conversions.\n+\n+   Check conversions involving fixed-point.  */\n+\n+extern void abort (void);\n+\n+#include \"convert.h\"\n+\n+int main ()\n+{\n+  ALL_CONV_FLOAT (short _Accum, hk);\n+  ALL_CONV_FLOAT (_Accum, k);\n+  ALL_CONV_FLOAT (long _Accum, lk);\n+  ALL_CONV_FLOAT (long long _Accum, llk);\n+\n+  return 0;\n+}"}, {"sha": "c25a55c0715524e34b79782432ccfb2ba94e69cd", "filename": "gcc/testsuite/gcc.dg/fixed-point/convert-float-4.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-float-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-float-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-float-4.c?ref=8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* C99 6.3 Conversions.\n+\n+   Check conversions involving fixed-point.  */\n+\n+extern void abort (void);\n+\n+#include \"convert.h\"\n+\n+int main ()\n+{\n+  ALL_CONV_FLOAT (unsigned short _Accum, uhk);\n+  ALL_CONV_FLOAT (unsigned _Accum, uk);\n+  ALL_CONV_FLOAT (unsigned long _Accum, ulk);\n+  ALL_CONV_FLOAT (unsigned long long _Accum, ullk);\n+\n+  return 0;\n+}"}, {"sha": "278aa173b65647c6c0b127914ae4e9078a3cce43", "filename": "gcc/testsuite/gcc.dg/fixed-point/convert-sat.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-sat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-sat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert-sat.c?ref=8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -O0\" } */\n+\n+/* C99 6.3 Conversions.\n+\n+   Check conversions involving fixed-point.  */\n+\n+extern void abort (void);\n+\n+#include \"convert.h\"\n+\n+int main ()\n+{\n+  SAT_CONV1 (short _Accum, hk);\n+  SAT_CONV1 (_Accum, k);\n+  SAT_CONV1 (long _Accum, lk);\n+  SAT_CONV1 (long long _Accum, llk);\n+\n+  SAT_CONV2 (unsigned short _Accum, uhk);\n+  SAT_CONV2 (unsigned _Accum, uk);\n+  SAT_CONV2 (unsigned long _Accum, ulk);\n+  SAT_CONV2 (unsigned long long _Accum, ullk);\n+\n+  SAT_CONV3 (short _Fract, hr);\n+  SAT_CONV3 (_Fract, r);\n+  SAT_CONV3 (long _Fract, lr);\n+  SAT_CONV3 (long long _Fract, llr);\n+\n+  SAT_CONV4 (signed char);\n+  SAT_CONV4 (short);\n+  SAT_CONV4 (int);\n+  SAT_CONV4 (long);\n+  SAT_CONV4 (long long);\n+\n+  SAT_CONV5 (unsigned char);\n+  SAT_CONV5 (unsigned short);\n+  SAT_CONV5 (unsigned int);\n+  SAT_CONV5 (unsigned long);\n+  SAT_CONV5 (unsigned long long);\n+\n+  SAT_CONV6 (float);\n+  SAT_CONV6 (double);\n+\n+  return 0;\n+}"}, {"sha": "e4e68157a77776cd60ac13d7c9a25872825ce6f5", "filename": "gcc/testsuite/gcc.dg/fixed-point/convert.h", "status": "renamed", "additions": 9, "deletions": 82, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixed-point%2Fconvert.h?ref=8ab48a7bfaff8ac2506ae92db56d9b8f3d7e4a9b", "patch": "@@ -1,11 +1,6 @@\n-/* { dg-do run } */\n-/* { dg-options \"-std=gnu99 -O0\" } */\n-\n-/* C99 6.3 Conversions.\n-\n-   Check conversions involving fixed-point.  */\n-\n-extern void abort (void);\n+/* Check conversions involving fixed-point.\n+ * Break up use-site into into manageable parts so that even embedded\n+ * targets with restrictive resources can run them.  */\n \n /* Fixed-point to fixed-point.  */\n #define CONV(TYPE1,POSTFIX1,TYPE2,POSTFIX2) \\\n@@ -131,7 +126,7 @@ extern void abort (void);\n   CONV(_Sat TYPE, POSTFIX, unsigned _Accum, uk) \\\n   CONV(_Sat TYPE, POSTFIX, unsigned long _Accum, ulk) \\\n   CONV(_Sat TYPE, POSTFIX, unsigned long long _Accum, ullk) \\\n-  CONV(TYPE, POSTFIX, _Sat short _Fract, hr) \\\n+  CONV(TYPE, POSTFIX, _Sat short _Fract, hr)                \\\n   CONV(TYPE, POSTFIX, _Sat _Fract, r) \\\n   CONV(TYPE, POSTFIX, _Sat long _Fract, lr) \\\n   CONV(TYPE, POSTFIX, _Sat long long _Fract, llr) \\\n@@ -147,7 +142,7 @@ extern void abort (void);\n   CONV(TYPE, POSTFIX, _Sat unsigned _Accum, uk) \\\n   CONV(TYPE, POSTFIX, _Sat unsigned long _Accum, ulk) \\\n   CONV(TYPE, POSTFIX, _Sat unsigned long long _Accum, ullk) \\\n-  CONV_INT(TYPE, POSTFIX, signed char) \\\n+  CONV_INT(TYPE, POSTFIX, signed char)                      \\\n   CONV_INT(TYPE, POSTFIX, short) \\\n   CONV_INT(TYPE, POSTFIX, int) \\\n   CONV_INT(TYPE, POSTFIX, long) \\\n@@ -166,8 +161,10 @@ extern void abort (void);\n   CONV_INT(_Sat TYPE, POSTFIX, unsigned short) \\\n   CONV_INT(_Sat TYPE, POSTFIX, unsigned int) \\\n   CONV_INT(_Sat TYPE, POSTFIX, unsigned long) \\\n-  CONV_INT(_Sat TYPE, POSTFIX, unsigned long long) \\\n-  CONV_FLOAT(TYPE, POSTFIX, float) \\\n+  CONV_INT(_Sat TYPE, POSTFIX, unsigned long long)\n+\n+#define ALL_CONV_FLOAT(TYPE,POSTFIX) \\\n+  CONV_FLOAT(TYPE, POSTFIX, float)    \\\n   CONV_FLOAT(TYPE, POSTFIX, double) \\\n   CONV_FLOAT(_Sat TYPE, POSTFIX, float) \\\n   CONV_FLOAT(_Sat TYPE, POSTFIX, double)\n@@ -360,73 +357,3 @@ extern void abort (void);\n   CONV2(TYPE, -1.0, _Sat unsigned long _Fract, 0.0ulr) \\\n   CONV2(TYPE, 1.0, _Sat unsigned long long _Fract, 1.0ullr) \\\n   CONV2(TYPE, -1.0, _Sat unsigned long long _Fract, 0.0ullr)\n-\n-int main ()\n-{\n-  ALL_CONV (short _Fract, hr);\n-  ALL_CONV (_Fract, r);\n-  ALL_CONV (long _Fract, lr);\n-  ALL_CONV (long long _Fract, llr);\n-  ALL_CONV (unsigned short _Fract, uhr);\n-  ALL_CONV (unsigned _Fract, ur);\n-  ALL_CONV (unsigned long _Fract, ulr);\n-  ALL_CONV (unsigned long long _Fract, ullr);\n-  ALL_CONV (short _Accum, hk);\n-  ALL_CONV (_Accum, k);\n-  ALL_CONV (long _Accum, lk);\n-  ALL_CONV (long long _Accum, llk);\n-  ALL_CONV (unsigned short _Accum, uhk);\n-  ALL_CONV (unsigned _Accum, uk);\n-  ALL_CONV (unsigned long _Accum, ulk);\n-  ALL_CONV (unsigned long long _Accum, ullk);\n-\n-  ALL_ACCUM_CONV (short _Accum, hk);\n-  ALL_ACCUM_CONV (_Accum, k);\n-  ALL_ACCUM_CONV (long _Accum, lk);\n-  ALL_ACCUM_CONV (long long _Accum, llk);\n-  ALL_ACCUM_CONV (unsigned short _Accum, uhk);\n-  ALL_ACCUM_CONV (unsigned _Accum, uk);\n-  ALL_ACCUM_CONV (unsigned long _Accum, ulk);\n-  ALL_ACCUM_CONV (unsigned long long _Accum, ullk);\n-\n-  NEG_CONV (short _Fract, hr);\n-  NEG_CONV (_Fract, r);\n-  NEG_CONV (long _Fract, lr);\n-  NEG_CONV (long long _Fract, llr);\n-  NEG_CONV (short _Accum, hk);\n-  NEG_CONV (_Accum, k);\n-  NEG_CONV (long _Accum, lk);\n-  NEG_CONV (long long _Accum, llk);\n-\n-  SAT_CONV1 (short _Accum, hk);\n-  SAT_CONV1 (_Accum, k);\n-  SAT_CONV1 (long _Accum, lk);\n-  SAT_CONV1 (long long _Accum, llk);\n-\n-  SAT_CONV2 (unsigned short _Accum, uhk);\n-  SAT_CONV2 (unsigned _Accum, uk);\n-  SAT_CONV2 (unsigned long _Accum, ulk);\n-  SAT_CONV2 (unsigned long long _Accum, ullk);\n-\n-  SAT_CONV3 (short _Fract, hr);\n-  SAT_CONV3 (_Fract, r);\n-  SAT_CONV3 (long _Fract, lr);\n-  SAT_CONV3 (long long _Fract, llr);\n-\n-  SAT_CONV4 (signed char);\n-  SAT_CONV4 (short);\n-  SAT_CONV4 (int);\n-  SAT_CONV4 (long);\n-  SAT_CONV4 (long long);\n-\n-  SAT_CONV5 (unsigned char);\n-  SAT_CONV5 (unsigned short);\n-  SAT_CONV5 (unsigned int);\n-  SAT_CONV5 (unsigned long);\n-  SAT_CONV5 (unsigned long long);\n-\n-  SAT_CONV6 (float);\n-  SAT_CONV6 (double);\n-\n-  return 0;\n-}", "previous_filename": "gcc/testsuite/gcc.dg/fixed-point/convert.c"}]}